N93-26990 * 


GPS Sytem Simulation Methodology 



Art*™* L RySSTST £*•"*** H. *4M 

Nuclear Pronuhbn Technical Change Meeting MASA-trms Research Cent* r ftdnher 20 23. 9W2 


Talk Outline 

Background 

GPS Methodology Overview 
Graphical User Interface 
Current models 

Application to Space Nuclear Power/ Propulsion 
Interfacing requirements 


iff l**0 irv^NW MM * f«0**~*** «* *■«*» « *»* 

Nuclear Propulsion Technical Imercfungc Meeting NASA-Lewis Research Center (htofvr 20-23, 199 2 



NEP: System* Modeling 


1134 


NP-TIM-92 


ARGONNE| 



History 

• SALT (system analysis language translator) - Early 80’s 

PL/1 code for IBM mainframes 

Moved to multiple platforms and languages (C, C++) 

Batch oriented - translate, compile, run 

Used model and property libraries 

Optimizations and system analysis 

Applied to 

Open-cycle and liquid-metal MHD systems 
Fuel cells 

Ocean thermal energy conversion 
Municipal solid waste processing 
Fusion 

Breeder reactors 

Geothermal and solar energy systems 


NwUar rmptti.tion Technintl Inirrchingr Mfttl** NAS A- 1 suit Kcvnrch Cmtrr fktntvr 



Next Generation Implementation - GPS 

• Designed for modern workstation environments 

• Developed in C++, moved to C for greater portability 

• Steady-state & dynamic model libraries concept of 
SALT, but accessed as class objects 

• Complete, extensible, object-oriented control language 
with numerous procedures for optimizations, equations 
solving, system constraints, parametric analysis 

• Language interpreted, but uses compiled, fully 
optimized models and math procedures ==> 

Fast prototyping cycles 

On-the-fly creation of/interaction with simulations 
Simulation systems can be interupted, queried 
and changed, then resumed 


T&mSjTSSSSS 

Nuclear Propulsion 7 ecbucot trucrc fkin/fe Meciinj NASA-Lnvii (tc-warch Center October 2(1-2}. IW2 



NP TIM-92 


1135 


NEP: Systems Modeling 


ARGONNE 




Nmlettr Propulxitm Tuhtuati hum kotuft Mrrlinn NASA-irnif Hnrtn’h CfMrr (kltther 20 * 2 . 1 . I99J 


■t ; rnin M on ir^r- 


GPS Operators 

• 86 built-in operators 

• I/O functions (fopen, printf, sscanf, sprintf) 

• Math functions (atan2, pow, exp, max, In, loglO) 

• Numerical procedures (vary, cons, icons, mini, diff) 

• Looping and flow control 
cond (...1 if 

cond (...) (...) ifelse 
start inc bound (...) for 
count (...) repeat 
(...) loop 

(cond) (...) while 


t r tmh*0 *tf*t*m tfii*** 1 & Arfrnmm, A 

CwhUm fn Viirq/ /nfrrrfci'l**’ NASA-Lrwb Rewfirch Ct*w Orft+rr 20-7.1 1997 


NEP: Systems Modeling 


1136 


NP-TIM-92 


iONNEl 





Miscellaneous Operators 

• Allocate new model class instance - cdef 
/pumpl I pump: /paraml 12.0 /param2 0.495} cdef 

• Set a debug level (0 thru 5) - debug 

• Run gps simulation from a input file - run 
"input.fil" run 

• Interrupt simulation to permit queries/interactions 
sintrp (followed by resume to continue) 


til**, b**~**»v*~o*. ~f~~.it***' 

Nmlrar I mm**# NASM~b »«.«* < <*»•" *«*• ,W 



GPS Steady-State Power 
System Models 


Basic component models 

gas • gas flow initiator 

sp * gas flow splitter 

mx * gas flow mixer 

ht ■ gas flow healer/cooler 

hx - gas flow heat exchanger 

cp - compressor 

gt - gas turbine 

pump - pump 

di - diffuser 

nz ■ nozzle 

power • calculate system powers 


Basic thermionic models 

reac reactor model 
ti - thermionic converter 

rad - thermal radiator 

sp - power flow splitter 

res - electrical resistor 

be - boost converter 

bus - electrical bus 

mass - mass calculations 

More sophisticated models 

therm * thermal flow initiator 

hprad - heat pipe radiator 

tds * thermionic diode subsystem 

shx - simple, multinode heat exchanger 

nhx * multinode, general purpose HT model 


(Jt) 


Nnclenr Citato. I fclml.nl Urtin tUSMnb »'« m,* I rn,', 10 ?•. (W 


NP-TIM-92 


1137 


NEP: System! Modeling 


argonne! 


GPSTool - Graphical User Interface 




L^iT^ 


Control language gowning 
ton and generated toy 
GPStool appears here; may 
be edited or manually Input 
by power usara 


Gambles options Includes 
generation of plots and system 
diagram. System diagram 
also permits mouse Interactions 
to select components for 
Insertion, deletion, rearrange- 
ment, parameter changes, etc s. 



NEP: Systems Modeling 


1138 


NP-TIM-92 


argonne 





NMUvrnvMo* rnMnl/M mlm* *»«*■, NASMmll ****** Cemr Ocu^r M. IW2 



NP-TlM-92 


1139 


NEP: Systems Modeling 











5 «*» * "i* ^ 1 ”^ 1 "'- *waa»^.»*.™-°-'"’ ■'• — — 

Interfacing Considerations 

• Component models can be Fortran, C, or other Sun languages 
which generate linkable object code 

• Standalone codes must be structured as subroutines with 
argument list of variables/parameters that must be known to 
GPS system 

• Use of Fortran common blocks prevents (presently) having 
multiple instances of that model in a system 

• Because models may be cycled through numerous convergence 
iterations with perturbed input flows 

Models must be true functions of their inputs 

Models must be reasonably robust 

I/O routines should be moved outside compulation routines 

> 


r P I Jog L&n. TGE3 & ****** “ — — 

HuUar Propulsion technical Interchange Meeting NASA -Lewis Research Center October 20-21 fW2 



Converting a standalone code 

• Two step process: 

Convert code to one or more subroutines 
Create a interface definition file (IDEF) 

• GPS uses IDEF to generate small C code to handle 
interfaces 

• Model can still be run independently of gps 
(standalone) by writing a main program to call 
subroutine 



r f W*0o*v*l Ul*v*<yy f 'V' 1-1 P%y*ic * Dir StfoM*, >1 

Nuriear Propulsion Technical huerch,,n X e Meeting N AS A-Le^Hs Research Center October 20-21 W2 


NP TIM 92 


1141 


NEP: Systems Modeling 


ARGONNE 


Interface Specification File Format 



Interface specifications external to models 

• User-prepared ASCII file used by GPS preprocessor to 
generate C stub code to handle gps interfacing 


- Model name 

- Variable types and initial values (arguments + gps I/O) 

- Entry procedures (name, arguments if Fortran routine, 
in and out flow variables) 

- Print variables (used as default gps output) 


EXAMPLE 

Thermionic tone mode! 



R 


moclol roar 

char name s( 16) namess|16| namersjlfi) nam*boom|1Cl 

douNe pow - 106 ell - 0 13 radius helprt mp- 10 0 rhoboom - 10 0 
I boom radiusrs votrs Iwightrs - 0.37 

flowlype II lls ^ . 

ntnsslypc nicore ins? nrs mboorn 


INTERFACE 

SPECIFICATION 


entry c 

outflow mcorfi mss mrs mboom II 


c - mass/siring, thermionic 
componenl ol power 

0 - waste heal flow 

T P. iMty ' AifMHM Mmien* HSm 

Hurl ear Propulsion Technical I 


entry 
out I tow 

pr»U 

print 


s 

Iks 

pow ell radius helglil 
radajsr* volrs heighlrs sep 



Example Conversion 

Fortran Standalone code - TDS 

• 8400 lines of Fortran code (includes TECMDL) 

• Required 32 line interface definition file 

• Conversion completed in < 2 hrs. 

• Same model now runs standalone (called from main) or 
in gps environment 

• Both open (once through) and closed systems have been 
run in gps 

• Have successfully run problems with 250,000 
nonlinear constraints in nested loops 



T.f.tmtng ^ frft***, » — — — 

ftucienr Propnhton technical Interchange Meeting NASSUwis Research Center October 20-23, 1992 

1142 


NEP: Systems Modeling 


NP TIM-92 


ARGONNEl 


