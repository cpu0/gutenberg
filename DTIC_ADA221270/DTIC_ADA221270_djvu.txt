AD-A221 270 


__ UNCLASSIFIED _, 

SECURITY CLASS1flCA’ION Of THIS R*C( (Mtr>D*ti[nttrtd) 


REPORT DOCUMENTATION PAGE 


J. REPORT NUMBER 


|2. 60VT ACCESSION NO. 


4. TIT' (engSubtitle) 

4S!G£®Pi&*y^ 

MVME133A-20 (Target), 89112711.10226 


t, 


7. authors; 

IABG* 

Ottobrunn, Federal Republic of Germany. 


kiad wstulttions 

_ »r r rtt :ov-,r*rA^roy.’.- 

3 RECIPIENTS CATALOG NUN;• 



R 


5. TTPE Of REPORT l PERIOO COVEREO 

27 Nov. 1989 to 27 Nov. 1990 

6. PERFORMING T)RG . REPORT NUMBER 

S. CONTRACT OR 6RANT NUMBER^ 


I. 


PERfORMlNG ORGANIZATION ANO ADDRESS 


10. program element, project, tas* 

AREA l NORN UNIT NUMBERS 


IABG, 

Ottobrunn, Federal Republic of Germany. 


a. CONTROLLING Off ICE NAME AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 2O301-3081 

14. MONITORING AGENCY NAME i ADDRESSED different from Controlling Office) 

IABG, 

Ottobrunn, Federal Republic of Germany. 

16. DISTRIBUTION STATEMENT (of this Report) 


1Z. REPORT DATE 
13. NUMctK Of PRiUf 


is. security class (of this report) 

_U NCLASSIFIED _ 

15i. ^C^ASSlflCATlON/OOwNGRADlNG 

N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of the tbSVect entered m Block JO If d'He'ent from Report) 



18. IEymDROS (Continue on re.fijf Side if netesseiy endidentify by block number) 


Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. ABSTRACT (Continue on reverie side if necesst'y endidentify 6, block number) 

TeleSoft, TeleGen2+ Ada Development System, Ottobrunn West Germany, Sun Microsystems 
Sun-3 Workstation (68020'baaed Sun-3/280) under Sun UNIX 4.2 Release 3.5 (Host) to 
Motorola MVMEI33A-20 (MC68020) bare machine (Target), ACVC 1.10. 


DD 0155 1473 EDITION or 1 NOV 65 IS OBSOLETE 

1 JAN 7J £/N 0102-L'*014-6601 _ UNCLASSIFIED 




SECURITY ClASSH 1CAT10N Of THIS PAGE (nvnen Dttt entered! 



A V F Control Number: 


AVF-IABG-064 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: #89112711.10226 
TeleSoft 

TeleGen2+ Ada Development System for 
Sun-3 x MVME133A-20 


Completion of On-Site Testing: 
27 November 1989 



Prepared By: 
IABG mbH, Abt. SZT 
Einsteinstrasse 20 
D-8012 Ottobrunn 
West Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3091 


Accesio’' Fo r 


NTIS CRA&I 
DflC TAB 

Uftrt'i to.:- ;ed 


it 

□ 

D 


By _ 

Di.sJf ibutMii I 


Wisinil-ty Codes 


Dist 


i A'm>. vdior 
I ';bv-c:al 




Ada Compiler Validation Summary Report 


Compiler Name: TeleGen2+ Ada Development System 
Version 1.4 

Certificate Number: #89112711.10226 


Host: Sun Microsystems Sun-3 Workstation 

(68020 based Sun-3/280) 
under Sun UNIX 4.2 Release 3.5 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 


Testing Completed 27 November 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


low Lli-i 

IABG mbH, Abt. SZT 
Dr. S. Heilbrunner 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 



Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria, VA 22311 



Ada'Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 


TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION . 2 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.3 

1.3 REFERENCES.4 

1.4 DEFINITION OF TERMS . 4 

1.5 ACVC TEST CLASSES.5 

CHAPTER 2 CONFIGURATION INFORMATION .. 8 

2.1 CONFIGURATION TESTED . 3 

2.2 IMPLEMENTATION CHARACTERISTICS . 9 

CHAPTER 3 TEST INFORMATION.15 

3.1 TEST RESULTS.15 

3.2 SUMMARY OF TEST RESULTS BY CLASS.15 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.13 

3.4 VITHDRANN TESTS.. .... 16 

3.5 INAPPLICABLE TESTS . 16 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . 20 

3.7 ADDITIONAL TESTING INFORMATION . 20 

3.7.1 Prevalidation. 20 

3.7.2 Test Method.20 

3.7.3 Test Site.21 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D VITHDRAVN TESTS 

APPENDIX E COMPILER AND LINKER OPTIONS 
























. INTRODUCTION 


CHAPTER 1 
INTRODUCTION 



This Validation Summary Report TVSRt 0 describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1315A. 
This report explains all technical terms used within it and thoroughly 

reports the results of_testing this compiler using the Ada Compiler 

Validation Capability . An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. \ 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
giwen -in this report 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. -^The purpose of validating is to ensure conformity 
of the compiler to the Ada'Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link time, and during execution. 



1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 








INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by the AVF according to 
procedures established by the Ada Joint Program Office and administered by 
the Ada Validation Organization (AVO). 


1.2 USE CF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rra 3D-133 (Fern Street) 

Washington DC 20301-3081 

or from: 

IABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1301 North Beauregard Street 
Alexandria VA 22311 


INTRODUCTION 


1.3 REFERENCE? 


1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1933 and ISO 3652-1937. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, i January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1933 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 






IilTPODUCTIOM 


Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 


INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or TAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
tests. However, some tests contain values that require the test to be 





INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is 'inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


CONFIGUFA"ION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

Tho candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: TeleGen2+ Ada Development System 
Version 1.4 

ACVC Version: 1.10 

Certificate Number: #89112711.10226 

Host Computer: 

Machine: Sun Microsystems Sun-3 Workstation 

(68020 based Sun-3/280) 

Operating System: Sun UNIX 4.2 Release 3.5 

Memory Size: 32 HegaBytes 

Target Computer: 

Machine: Motorola MVHE133A-20 (MC68020) 


Operating System: bare machine 
Memory Size: 1 MegaBytes 




CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 

a. Capacities. 

1) The compiler correctly processes a compilation 
containing 723 variables in the same declarative part. (See 
test D29002K.) 

2) The compiler correctly processes tests containing 

loop statements nested to 65 levels. (See tests D55A03A..H 
(8 tests).) 

3) The compiler correctly processes tests containing 

block statements nested to 65 levels. (See test D56001B.) 

4) The compiler correctly processes tests containing 

recursive procedures separately compiled as subunits nested to 
10 levels. (See tests D64005E..G (3 tests).) 

b. Predefined types. 

1) This implementation supports the additional predefined types 
LONG_INTEGER and LONG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 

c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 

constraints are checked are not defined by the language. While 

the ACVC tests do not specifically attempt to determine the order 

of evaluation of expressions, test results indicate the following: 

1) Some of the default initialization expressions 
for record components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 


CONFIGURATION INFORMATION 


4) NUMERIC_ERROR is raised for largest integer comparison and 

membership tests and no exception is raised for pre-defined 

integer comparison and membership tests when an integer 

literal operand in a comparison or membership test is outside 
the range of the base type.' (See test C45232A.) 

5) NUMERICJ3RROR is raised when a literal operand in a 

fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the AC^c tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a ’LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.HAXJlNT. For this 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.HAX_INT components raises NUMERIC_ERROR for a 
two dimensional array subtype where the large dimension is the 
second one. (See test C36003A) 

2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 

3) NUMERICJSRROR is raised when an array type with 

SYSTEM.MAX INT + 2 components is declared. (See test 

C36202B.) 


CONFIGURATION INFORMATION 


4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C521MX.) 

5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

6) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target’s subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression 
is not evaluated in its entirety before CONSTRAINTJSRROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 

8) A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC JBRROR or CONSTRAINT JERROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
made as choices are evaluated. (See tests C43207A and 
C43207B.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

3) CONSTRAINT_ERROR is raised after all choices are 
evaluated when a bound in a . non-null range of a non-null 
aggregate does not belong to an index subtype. (See test 
E43211B.) 


; i 



CONFIGURATION INFORMATION 


h. Pragmas. 

1) The pragma INLINE is supported for procedures and for non¬ 
library functions. (See tests LA3004A..B (2 tests), EA3004C..D 
(2 tests), and CA3004E..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by IA-408/11, if 

the body is compiled after a unit that instantiates it, then that 

unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 
be compiled in separate compilations. (See test 
CA1012A.) 

4) Generic non-library package bodies as subunits can 

be compiled in separate compilations. (See test CA2009C.) 

5) Generic • non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.} 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 

7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests CA2009C, 


CONFIGURATION INFORMATION 


BC3204C, and BC3205D.) 

3) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC3204C and BC3205D.) 

9) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


Input and output. 

1) The package SEQUENTIALJCO cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

2) The package DIRECT_IO cannot be instantiated wii-h uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

3) Modes IN FILE and OUT FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

4) Modes IN FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT IOT (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

5) Modes IN_FILE and OUTJFILE are supported for text files. 
(See tests CE3102E and CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported for 
SEQUENTIAL_I0. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT^IO. 

(See tests CE2102K and CE2102Y.) 

8) RESET and DELETE operations are supported for text 

files. (See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 

(See test CE2208B.) 

10) Temporary sequential files are given names and not 

deleted when closed. (See test CE2103A.) 

11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

12) Temporary text files are given names and not deleted 






CONFIGURATION INFORMATION 


when closed. (See test CE3112A.) 

13) More than one internal file can be associated with 

each external file for sequential files when reading 

only. (See tests CE2107A..E (5 tests), CE2102L, CE2110B, and 
CE2111D.) 

14) More than one internal file can be associated with 

each external file for direct files when reading only. (See 
tests CE2107F..H (3 tests), CE2110D and CE2111H.) 

15) More than one internal file can be associated with 

each external file for text files when reading only (See 

tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 


TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 315 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation. Modifications to the code, 
processing, or grading for 13 tests were required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST CLASS 

C D 

E 

L 

TOTAL 

Passed 

127 

1129 

2018 

16 

23 

45 

3358 

Inapplicable 

2 

9 

297 

1 

5 

1 

315 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 



TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

TEST 

7 

CHAPTER 

8 9 

10 

11 

12 

13 

14 

TOTAL 

Passed 

198 

573 

544 

245 

171 

99 

160 

332 

132 

36 

250 

340 

278 

3358 

N/A 

14 

75 

136 

3 

1 

0 

6 

0 

5 

0 

2 

29 

43 

315 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn from ACVC Version 1.10 
at the time of this validation: 


E28005C 

A39005G 

B97102E 

C97H6A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84N 

CD2A84M 

CD5011O 

CD2B15C 

CD7205C 

CD2D113 

CD5007B 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 


CE3301A CE3411B 

See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

S<-..,ie tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 315 tests were inapplicable for 
the reasons given below. 

a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 







TEST INFORMATION 


C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


b. C355081, C35503J, C35503M, and C35508N are not applicable because 
they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE => 0, 

TRUE => 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 


c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_INTEGER: 


C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because they acquire a value of SYSTEM.MAX MANTISSA greater than 
32. 


f. D64005G is inapplicable because processing deeply nested 
recursive calls of procedures caused storage_error under the 
option settings used for this validation. 

g. C86001F is not applicable because, for this implementation, the 
package TEXT_IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and 
hence package REPORT, obsolete. 

h. B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, L0NG_INTEGER, or SHORTJTNTEGER. 

i. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

j. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORTJLOAT. 

k. CA2009C, CA2009F, BC3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 2.2.i and 
Appendix F of the Ada Standard). 


TEST INFORMATION 


l. LA3004B, EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for library 
functions. 

m. CD1009C, CD2A41A..3 (2 tests), CD2A41E and CD2A42A..J (10 tests) 
are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

n. CD2A61I..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

o. CD2A84B..I (8 tests) and CD2A8**K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length clauses for access types. 

p. CD4041A is not applicable because of restrictions on record 
representation clauses with 32 bit alignment. 

q. AE/101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

r. AE2101H, EE2401D, and EE24015 use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

s. CE2102D is inapplicable because this implementation supports 

CREATE with INJr'ILE mode for SEQUENTIAL JTO. 

t. CE2102E is inapplicable because this implementation supports 

CREATE with 0UT_FILE mode for SEQUENTIAL_IO. 

u. CE2102F is inapplicable because this implementation supports 

CREATE with INOUT_FILE mode for DIRECTJ!0. 

v. CE2102I is inapplicable because this implementation supports 

CREATE with INJILE mode for DIRECT_I0. 

w. CE2102J is inapplicable because this implementation supports 

CREATE with OUTJILE mode for DIRECT_I0. 

x. CE2102N is inapplicable because this implementation supports OPEN 
with IN.FILE mode for SEQUENTIAL_IO. 

y. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

z. CE2102P is inapplicable because this implementation supports OPEN 
with 0UT_FILE mode for SEQUENTIAL_IO. 





TEST INFORMATION 


aa. CE2102Q is inapplicable because this implementation supports RESET 
with OUTJILE mode for SEQUENTIAL JO. 

ab. CE2102R is inapplicable because this implementation supports OPEN 
with INOUTJILE mode for DIRECTJO. 

ac. CE2102S is inapplicable because this implementation supports RESET 
with INOUTJILE mode for DIRECTJO. 

ad. CE2102T is inapplicable because this implementation supports OPEN 
with INJILE mode for DIRECTED. 

ae. CE2102U is inapplicable because this implementation supports RESET 
with INJILE mode for DIRECTJO. 

af. CE2102V is inapplicable because this implementation supports OPEN 
with OUTJILE mode for DIRECTJO. 

ag. CE2102W is inapplicable because this implementation supports RESET 
with OUTJILE mode for DIRECTJO. 

ah. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 

for sequential files. The proper exception is raised when 

multiple access is attempted. 

ai. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

aj. CE3102E is inapplicable because text file CREATE with INJILE mode 
is supported by this implementation. 

ak. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

al. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

am. CE3102I is inapplicable because text file CREATE with OUTJILE 
mode is supported by this implementation. 

an. CE3102J is inapplicable because text file OPEN with INJILE mode 
is supported by this implementation. 

ao. CE3102K is inapplicable because text file OPEN with OUTJILE mode 
is supported by this implementation. 






TEST 


ap. CE3111B, CE3111D..E (2 tests), CZ3114B, and CE3115A are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 13 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

871001E B71001K B71001Q B71001V BA3006A BA300G3 

BA3007B BA3008A BA3008B BA3013A (6 and 7M) 

Tests C34005G, C34005J and C34006D returned the result FAILED because of 
false assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The A v 0 has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T'SIZE due to the above assumptions (T is the array type). 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the TeleGen2 Ada Development System for a computing system based on 
the same instruction set architecture was submitted to the AV" by the 
applicant for review. Analysis of these results demonstrated that the 
TeleGen2 System successfully passed *11 applicable test's, and it 
exhibited the expected behavior on all inapplicable tests. The applicant 
certified that testing results for the computing system of this -'alidation 
would be identical to the ones submitted for review prior to validation. 


3.7.2 Test Method 

Testing of the TeleGen2+ Ada Development System using ACVC ^ers.on 1.10 




i : 


INFORMATION 


was conducted on-site by a '"alidation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 


Host: Sun Microsystems Sun-3 Workstation 

(63020 based Snn-3/230) 
under Sun UNIX 4.2 Release 3.5 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 

Communication Network: RS 232 

A cartridge containing the customized test suite was loaded onto a 3UN-3 
and transferred via Ethernet to an intermediate computer whose disks were 
accessible via Ethernet for the host computer. Results were collected on 
the host computer and transferred via Ethernet to yet another computer 
for evaluation and archiving. 

The compiler was tested using command scripts provided by TeleSoft 
and reviewed by the validation team. The tests were compiled using the 
command 

ada -0 D (filename) 
and linked with the command 

aid -a (options £ile> (main unit> 

The -L qualifier was added to the compiler call for class B, expanded and 
modified tests. See Appendix E for explanation of compiler and linker 
switches. The (options file) contained a specification of memory addresses 
for the target computer. 

Tests were compiled, linked, and executed (as appropriate) using one com¬ 
puter. Test output, compilation listings, and job logs were captured on 
cartridge and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 

3.7.3 Test Site 

Testing was conducted at TeleSoft, San Diego, USA, and was completed on 
2' 7 November 1939. 





DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of Conformance concerning 
the TeleGen2+ Ada Development System. 





DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG, Dept. SZT, D-8012 Ottobrunn 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Compiler Name: 
Version: 

Host Architecture ISA: 
OS & VER #: 


Base Configuration 

TeleGen2+ Ada Development System 
1.4 

Sun Microsystems Sun-3 Workstation 
(68020 based Sun-3/280) 

Sun UNIX 4.2 Release 3.5 


Target Architecture ISA: Motorola MVME133A-20 (MC68020) 

OS k VER #: Bare machine 

Implementor’s Declaration 


I, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner’s corporate 
name. 



Owner’s Declaration 


Date: 


I, the undersigned, representing TELESOFT, take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANS1/MIL-STD-1815A. 




i TELESOFT /) 

jy' Raymond A. Parra, Vi^e President and General Counsel 


3 


u 


Date: /- 







APPENDIX F OF THE Ada STANDARD 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent contentions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleGen2+ Ada Development System, as described in 
this Appendix, are provided by TeleSoft. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Spnendix F, are: 


package STANDARD is 


type INTEGER is range -32763 .. 32767; 

type LONG_INTEGER is range -2147483643 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type LONG FLOAT is digits 15 

range -8.98846567431158E+307 .. 3.9334S567431158E+307; 

type DURATION is delta 2#1.0#E-14 range -86400.0 .. 36400.0; 


end STANDARD; 


CHAPTERS: LRM ANNOTATIONS 


CHAPTER CONTENTS 

S LRM ANNOTATIONS . 3-1 

3.X LRM Chapter 2 - Lexical Elements . 3-1 

3.2 LRM Chapter 3 - Declarations and Types .. 3-1 

3.3 LRM Chapter 4 • Names and Expressions . 3-3 

3.4 LRM Chapter 9 • Tasks. 3-3 

3.5 LRM Chapter 10 • Program Structure and Compilation Issnes . 3-3 

3.0 LRM Chapter 11 - Exceptions. 3-3 

3.7 LRM Chapter 13 - Implementation-Dependent Features ...................................... 3-4 

Table: Summary of LRM Chapter 13 Features. 3-4 

3.7.1 Pragma Pack... 3-5 

3.7.2 (LRM 13.2j Length Clauses. 3-7 

3.7.2.1 (a) Specifying Size: TSize. 3-7 

3.7.2.2 (b) Specifying Collection Size: T’Storage_Size. 3-3 

3.7.2.3 (c) Specifying Storage for Task Activation: T’StoragejSize. 3-9 

3.7.2.4 (d) Specifying ’Small for Fixed Point Types: T’Small. 3-9 

3.7.3 (LRM 13.3] Enumeration Representation Clauses. 3-10 

3.7.4 [LRM 13.4) Record Representation Clauses. 3-10 

3.7.5 (LRM 13.5| Address Clauses.. 3-11 

3.7.6 [LRM 13.6) Change of Representation.. 3-12 

3.7.7 [LRM 13.7] The Package System. 3-12 

3.7.S [LRM 13.7.2) Representation Attributes...—.............................. 3-12 

3.7.9 [LRM 13.7.3) Representation Attributes of Real Types. .................................... 3-12 

3.7.10 [LRM 13.S| Machine Code Insertions. .. 3-12 

3.7.11 [LRM 13.9) Interface to Other Languages. .. 3-13 

3.7.12 [LRM 13.10) Unchecked Programming. 3-13 

3.8 LRM Appendix F for TeieCen2 ... 3-13 

Table: LRM Appendix F Summary . 3-14 

3.8.1 Implementation-Defined Pragmas. 3-15 

3.8.1.1 Pragma Comment. 3-15 

3.8.1.2 Pragma Linkname. 3-16 

3.8.1.3 Pragma Images. 3-16 

3.8.1.4 Pragma No_Suppress. 3-17 

3.8.2 Implementation-Dependent Attributes. 3-17 

3.8.2.1 ’Address and ’Offset. 3-17 

3.8.2.2 Extended Attributes for Scalar Types. 3-17 

3.8.2.2.1 Integer Attributes . 3-19 

31JUL89 ' REP-1347N-Vl.l(U/68) © 1989 TeleSoft_ 












































CHAPTER 3: LRM ANNOTATIONS 


CHAPTER CONTENTS 

3.8.2.2.2 Enumeration Type Attributes. 3*22 

3.8.2.2.3 Floating Point Attributes ....3*25 

3.8.2.2.4 Fixed Point Attributes .............................._............................._...... 3*27 

3.8.3 Package System. --- 3-31 


RE?-lS47N-Vl.l(U/68) © 1989 TeleSoft 


S1JUL89 









LRM ANNOTATIONS 


3. LRM ANNOTATIONS 

TeleGen2 compiles the full ANSI Ada language as defined by the Reference Manual for the 
Ada Programming Language (LRM) (ANSI/MIL-STD-1815A). This chapter describes the 
portions of the language that are designated by the LRM as implementation dependent for the 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully implemented by the current release of 
TeleGen2 or that require clarification are included. The features that are optional or that are 
implementation dependent, on the other hand, are described in detail. Particularly relevant are 
the sections annotating LRM Chapter 13 (Representation Clauses and Implementation- 
Dependent Features) and Appendix F (Implementation-Dependent Characteristics). 


3.1. LRM Chapter 2 - Lexical Elements 

[LRM 2.1] Character Set. The host and target character set is the ASCII character set. 

[LRM 2.2] Lexical Elements,Separators, and Delimiters. The maximum number of 
characters on an Ada source line is 200. 

[LRM 2.8] Pragmas. TeleGen2 implements all language-defined pragmas except pragma 
Optimize. If pragma Optimize is included in Ada source, the pragma will have no effect. 
Optimization is implemented by using pragma Inline and the optimizer. Pragma Inline 'is not 
supported for library-level subprograms. Pragma Priority is not supported for main programs. 

Limited support is available for pragmas Memory JSize, Storage_Unit, and System-Name; 
that is, these pragmas are allowed if the argument is the same as the value specified in the 
System package. 

Pragmas Page and List are supported in the context of source/error listings; refer to the 
Compiler/Linker chapter of the TeleGeu2 User Guide for more information. 


3.2. LRM Chapter 3 - Declarations and Types 

[LRM 3.2.1] Object Declarations. TeleCen2 does not produce warning messages about the 
use of uninitialized variables. The compiler will not reject a program merely because it contains 
such variables. 

[LRM 3.5.1] Enumeration Types. The maximum aumber of elements in an enumeration 
type is 32767. This maximum can be realized only if generation of the image table for the type 
has been deferred, and there are no references in the program that would cause the image table to 
be generated. Deferral of image table generation for an enumeration type, P, is requested by the 
statement: 

pragma Images (P, Deferred); 

Refer to “Implementation-Defined Pragmas,” in Section 3.8.1, for more information on pragma 
Images. 


RE?-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-1 


31JUL89 






TeleGes2 Reference Information .for UNITC/.#!?. HojU 


(LRM 3.5.4] Integer Types. There are two predefined integer types: Integer and 
Long-Integer. The attributes of these types are shown in Table 3-1. Note that using explicit 
integer type definitions instead of predefined integer types should result in more portable code. 

Table 3-1. Attributes of Predefined Types Integer and Long-Integer 


Attribute 

Type 

Integer 

Long Integer 


-32768 

•2147483648 


32767 

2147483647 


16 

32 

MSSm 

6 

11 


[LRM 3.5.8] Operations of Floating Point Types. There are two predefined fioating point 
types: Float and Long—Float. The attributes of types Float and Long-Float are shown in Table 
3-2. This floating point facility is based on the IEEE standard for 32-bit and 64-bit numbers. 
Note that using explicit real type definitions should lead to more portable code. 

The type Short-Float is not implemented. 

Table 3-2. Attributes of Predefined Types Float and Long-Float 



Type 


Float 

Long-Float 

’Machine-Overflows 

TRUE 

TRUE 

’Machine-Rounds 

TRUE 

TRUE 

’Machine-Radix 

2 

2 

Machine-Mantissa 

24 

53 

Machine -Emax 

127 

1023 

Machine ..Emin 

-125 

-1021 

’Mantissa 

21 

51 

’Digits 

6- 

15 

’Size 

32 

64 

’Emax 

84 

204 

’Safe-Emax 

125 

1021 

’Epsilon 

9.53674E-07 

8.88178E-16 

’Safe-Large 

4.25253E+37 

2.24711641857789E+307 

’Safe-Small 

1.17549E-38 

2.22507385850721E—308 

’Large 

1.93428E+25 

2.57110087081438E+61 

’Small 

2.58494E-26 

1.99469227433161E—62 


3-2 


REP-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 














LRM ANNOTATIONS 


3.1. LRM Chapter 4 - Names and Expressions 

[LRM 4.10] Universal Expressions. There is no limit on the accuracy of real literal 
expressions. Real literal expressions are computed using an arbitrary-precision arithmetic 
package. 


3.2. LRM Chapter 9 - Tasks 

[LRM 9.6] Delay Statements, Duration, and Time. This implementation uses 32-bit 
fixed point numbers to represent the type Duration. The attributes of the type Duration are 
shown in Table 3-3. 


Table 3-3. Attributes of Type Duration 


Attribute 

Value 

’Delta 

’First 

’Last 

0.000061035156250 

-86400.0 

86400.0 


[LRM 9.8] Priorities. Sixty-four levels of priority are available to associate with tasks 
through pragma Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..63; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority’Flrst + System.Prionty’Last) / 2 

[LRM 9.11] Shared Variables. The restrictions on shared variables are only those specified 
in the LRM. 


3.3. LRM Chapter 10 - Program Structure and Compilation Issues 

[LRM 10.1] Compilation Units - Library Units. All main programs are assumed to be 
parameterless procedures or functions that return an integer result type. 


3.4. LRM Chapter 11 - Exceptions 

[LRM 11.1] Exception Declarations. Numeric-Error is raised for integer or floating point 
overflow and for divide-by-zero situations. Floating point underflow yields a result of zero without 
raising an exception. 

Program-Error and Storage-Error are raised by those situations specified in LRM Section 
11.1. Exception handling is also discussed in the Programming Guide chapter. 


3-3 


04JAN90 


REF-134TN-V1.2a(U/68) © 1990 TeleSoft 






TeleGcaS Reference Information for UNIX/68K Host* 


3.7. LRM Chapter 13 - Implementation-Dependent Features 

As shown in Table 3-4, the current reiease of TeieGen2 supports most LRM Chapter 13 
facilities. The sections below the table document those LRM Chapter 13 facilities that are either 
not implemented or that require explanation. Facilities implemented exactly as described in the 
LRM are not mentioned. 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 - 
13.5). Pragma Pack is supported, except for dynam¬ 
ically sized components. For details on the 
TeleCen2 implementation of pragma Pack, see Sec¬ 
tion 3.7.1. 

13.2 Length Clauses 

Supported: 

’Size 

’StorageJSixe for collections 
’StorageJSize for task activation 
’Small for fixed-point types 

See Section 3.7.2 for more information. 

13.3 Enumeration Rep. Clauses 

Supported, except for type Boolean or types derived 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 3.7.4 for a full discussion 
of the TeieGen2 implementation. 

13.5 Address Clauses 

Supported for: objects (including task objects). 

Not supported for: packages, subprograms, or task 
units. 

See Section 3.7.5 for more information. 

13.5.1 Interrupts 

For interrupt entries, the address of a TeleGen2- 
defined interrupt descriptor can be given. See “In¬ 
terrupt Handling” in the *Programming Guide 
chapter for more information. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

——— Continued on the next page - 


3-4 


REF-1347N-V1.1(U/0S) © 1989 TeleSoft 


31JUL89 






IRM ANNOTATIONS 


Table 3-4. Summary of LRM Chapter 13 Features for TelaGen2 (Contd) 


—~ Continued from the previous page — 

13.7 Package System 

Conforms closely to LRM model. Refer to Section 
3.7.7 for details on the TeleGen2 implementation. 

13.7.1 System-Dependent Named 
Numbers 

Refer to the specification of package System (Sec¬ 
tion 3.7.7). 

13.7.2 Representation Attributes 

Implemented as described in LRM except that 
’Address for packages is unsupported. 

’Address of a constant yields a null address. 

13.7.3 Representation Attributes of 
Real Types 

See Table 3-2. 

13.3 Machine Code Insertions 

Fully supported. The TeleGen2 implementation 
defines an attribute, ’Offset, that, along with the 
language-defined attribute ’Offset, allows addresses 
of objects and offsets of data items to be specified in 
stack frames. Refer to “Using Machine Code Inser¬ 
tions” in the Programming Guide chapter for a full 
description on the implementation and use of 
machine code insertions. 

13.9 Interface to Other 

Languages 

Pragma Interface is supported for Assembly, C, 
UNIX, and Fortran. Refer to “Interfacing to Other 
Languages” in the Programming Guide chapter for 
a description of the implementation and use of prag¬ 
ma Interface. 

13.10 Unchecked Programming 

Supported except as noted below (LRM 13.10.2). 

13.10.1 Unchecked Storage Deallo¬ 
cation 

Supported. 

13.10.2 Unchecked Type Conver¬ 
sions 

Supported except for unconstrained record or array 
types. 


3.7.1. Pragma Pack. This section discusses how pragma Pack is used in the TeleGen2 
implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiler allocates 16 bits for a single Boolean, 8 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array; the one below that illustrates a packed Boolean array: 


3-5 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


























TeleGen2 Reference Information for UNIX/38K Hosts 


- — Unpacked Boolean array:- 

Unpacked_Booi_Arr_Type is array (Natural range 0..1) of Boolean 
U_B_Arr:~Unpadced"Bool_ArrJType := (True,False); 

MSB LSB 

7 0 

Element 0 
Element 1 


0 

1 

0 

T 


Packed Boolean array: 


Packed_Bool ArrJType is array (Natural range 0..6) of Boolean; 
pragma Fade - (Packed Bool_Arr_Type); 

P_B_Arr: Packed_BooX_Arr”Type := (P_B Arr(O) => True, 

”P~B_Arr(5) =>"”True7 others => PalseJ; 


Bit: 


MSB 

15 


LSB 

0 


LL 

0 

0 

0 

0 

1 

0 

□ 

□ 

□ 


□ 

□ 

c 

□ 

□ 


Element: 0 1 2 3 4 5 6 


(unused) 


b. With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

1. The total size of the record is a multiple of 8 bits. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure, Rep_Proc, that defines three records of different 
lengths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits; that is, it is maximally packed. 


5*6 


REP-1347N-Vl.l (U/68) © 1989 TeleSoft 


31JUL89 






LRM ANNOTATIONS 


procedure RepJProc is 

type A1 is array (Natural range 0 .. 8) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 .. 3) of Boolean; 
pragoa Pack (A 2 ); 

type A3 is array (Natural range 0 .. 2) of Boolean; 
pragma Pack (A3); 

t 

type A_Rec is 
record 

One : Al; 

Two : A2; 

Three : A3; 
end record; 
pragma Pack (A_Jtec); 

Rec : A-Rec; 


begin 

Rec.One :* ( 0 *> True, 1 »> False, 

3 => False, 4 => True, 

8 »> False, 7 »> False, 
Rec.Two (3) True; 

Rec.Three (1) :» True; 
end RepuProc; 


2 s> False, 

S => False, 

8 => True ); 


3.7.2. [LSM 13.2] Length Clauses. A length clause specifies an amount of storage 
associated with a type. The sections below describe how length clauses are supported in this 
implementation of TeleGen2 and how to use length clauses effectively within the context of 
TeleGen2. 

3.7.2.I. (a) Specifying Siss: T’Sise. The prefix T denotes an object. The size specification 
must allow for enough storage space to accommodate ev«ry allowable value of these objects. The 
constraints on the object and on its subcomponents (if any) must be static. For an unconstrained 
array type, the index subtypes must also be static. 

For this implementation, Min .Size is the smallest number of bits logically required to hold 
any value in the range; no sign bit is allocated for non-negative ranges. Biased representations 
are not supported; e.g., a range of 100 .. 101 requires 7 bits, not 1. Warning: in the current 
release, using a size clause for a discrete type may cause inefficient code to be generated. For 
example, given... 

type Nibble is range 0 .. 15; 
for Nibble’Size use 4; 

...each object of type Nibble will occupy only 4 bits, and relatively expensive bit-field instructions 
will be used for operations on Nibbles. (A single declared object of type Nibble will be aligned on 
a storage-unit boundary, however.) 

For floating-point and access types, a size clause has no effect on the representation. (Task 
types are implemented as access types). 





TeieG«n2 Reference Information for UNIX/O8K Hosts 


For composite (array or record) types, a size clause acts like as implicit pragma Pack, 
followed by a check that the resulting size is no greater than the requested size. Note that the 
composite type will be packed whether or not it is necessary to meet the requested size. The size 
clause for a record must be a multiple of storage units. 

3.7.2.2. (b) Specifying Collection Size: T’Storage_Sixe. A collection is the entire set of 
objects created by evaluation of allocators for an access type. 

The prefix T denotes an access type. Given an access type AccJType, a length clause for a 
collection allocated using AccJType objects might look like this: 
for Acc_Type’Sfcorage_Size use 64; 

In TeleGen2, the above length clause allocates from the heap 64 bytes of contiguous memory for 
objects created by AccJType allocators. Every time a new object is created, it is put into the 
remaining free part of the memory allocated for the collection, provided there is adequate space 
remaining in the collection. Otherwise, a storage error is raised. 

Keeping the objects in a contiguous span qf memory allows system storage reclamation 
routines to deallocate and manage the space when it is no longer needed. Pragma Controlled can 
prevent the deallocation of a specified collection of objects. Objects can be explicitly deallocated 
by calling the UncheckedJDeallocation procedure instantiated for the object and access types. 

Header Record 

In this configuration of TeleGen2, information needed to manage storage blocks in a collection is 
stored in a collection header that requires 20 bytes of memory, adjacent to the collection, in 
addition to the value specified in the length clause. 

Minimum Size 

When an object is deallocated from a collection, a record containing link and size information for 
the space is put in the deallocated space as a placeholder. This enables the space to be located 
and reallocated. The space allocated for an object must therefore have the minimum size needed 
for the placeholder record. For this TeleGen2 configuration, this minimum size is the sum of the 
sizes of an access type and a integer type, or 6 bytes. 

Dynamically Sized Objects 

When a dynamically-sized object i3 allocated, a record requiring 2 bytes accompanies it to keep 
track of the size of the object for when it is put on the free list. The record is used to set the size 
field in the placeholder record since compaction may modify the value. 

Size Expressions 

Instead of specifying an integer in the length clause, you can use an expression to specify storage 
for a given number of objects. For example, suppose an access type Dict_Ref references a record 
SymbolJRec containing five fields: 




RSP-1347N-V 1.1 {U/68) © 1989 TeleSoft 


31JUL89 




_ LB-M ANNOTATIONS 


type Tag is String(l..8); 
type SyaboL-Hec; 

type Dict_Ref is access SjnabcL_Rec; 

type SymboL-Rec is 
record 


Left 

Dict-Sef; 

Sight 

Diet-Kef; 

Parent 

Dict-Ref; 

Value 

Integer; 

Key 

Tag; 


end record; 


To allocate 10 Symbol_Rec objects, you could use an expression such as: 

for Dict_Ref*Starage_Si 2 e use ((SynboUlec’Size • 10)+20); 

where 20 is the extra space needed for the header record. (SymboI_Rec is obviously larger than 
the minimum size required, which is equivalent to one access type and one integer.) 

In another implementation, Symbol_Rec might be a variant record that uses a variable 
length for the string Key: 

type SynboI_Rec(Last : Natural :=0) is 
record 

Left : Dict_Sef; 

Sight : Oict-Sef; 

Parent : Oict-Sef; 

Value : Integer; 

Key : String(l..Last); 
end record; 

In this case, Symbol_Rec objects would be dynamically sized depending on the length of the 
string for Key. Using a length clause for DictJRef as above would then be illegal since 
SymboiJRec’Size cannot be consistently determined. A length clause for Symbol—Rec objects, as 
described in (a) above, would be illegal since not all components of Symbol_Rec are static. As 
defined, a Symboi_Rec object could conceivably have a Key string with Integer’Last number of 
characters. 

3.7.2.3. (c) Specifying Storage for Task Activation: T’Storage_Sixe. The prefix T 
denotes a task type. A length clause for a task type specifies the number of storage units to be 
reserved for an activation of a task of the type. The TeleGen2 default stack size is 8192 bytes. 

5.7.2.4. (d) Specifying ’Small for Fixed Point Types: T’SmaH. Small is the absolute 
precision (a positive reai number) while the prefix T denotes the first named subtype of a fixed 
point type. Elaboration of a reai type defines a set of model numbers. T’Small is generally a 
power of 2, and model numbers are generally multiples of this number so that they can be 
represented exactly on a binary machine. All other real values are defined in terms of model 
numbers having explicit error bounds. 

Example: 

type Fixed is delta 0.25 range -10.0 .. 10.0; 


31JULS9 


REP-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-9 







TeleGen2 Reference Information for UNXX/68K Boats 


Here... 

Fixed’Small » 0.2S — A power of 2 

2.0 * 12 * 0.25 — A model number but not a power of 2 

The value of the expression of the length clause must not be greater than the delta of the 
first named subtype. The effect of the length clause is to use this value of ’Small for the 
representation of values of the fixed point base type. The length clause thereby also affects the 
amount of storage for objects that have this type. 

If a length clause is not used, foi model numbers defined by a fixed point constraint, the 
value of Small is defined as the largest power of two that is not greater than the delta of the fixed 
accuracy definition. 

If a length clause is used, the model numbers are multiples of the specified value for Small. 
For this configuration of TeleGen2, the specified value must be (mathematically) equal to either 
an exact integer or the reciprocal of an exact integer. 

Examples: 

1.0, 2.0, 3.0, 4.0, . . . are legal 
0.5, 1.0/3.0, 0.25, 1.0/3800.0 are legal 
2.5, 2.0/3.0, 0.3 are illegal 

3.7.3. [LRM 13.3] Enumeration Representation Clauses. Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the ’Pos, ’Pred, or ’Succ attributes for values of the 
type. 


3.7.4. [LRM 13.4] Record Representation Clauses. Since record components are subject 
to rearrangement by the compiler, you must use representation clauses to guarantee a particular 
layout. Such clauses are subject to the following constraints: 

■ Each component of the record must be specified with a component clause. 

* The alignment of the record is restricted to mods 1 and 2, byte and word aligned. 

* Bits are ordered right to left within a byte. 

* Components may cross word boundaries. 

Here is a simple example showing how the layout of a record can be specified by using 
representation clauses: 

package Repspec_Exaaple is 
Bits : constant':* 1; 

Word : constant := 4; 

type Five is range 0 .. 16#1F#; _ 

type Seventeen is range 0 .. 16#1FFFF#; 
type Nine is range 0 .. 511; 

type Record_Layout«Type is record 
Eleaentl : Seventeen; 


R£F-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-10 


S1JUL89 





LRM ANNOTATIONS 


Element2 : Five; 

Eleaeat3 : Boolean; 

Eleaent4 : Nine; 
end record; 

for Record-Layout-Xype use record at nod 2; 
Eleaentl at 0*Word range 0 .. 18; 
Eleaent2 at 0»Word range 17 .. 21; 
Element3 at 0«Word range 22 .. 22; 
Eleaent4 at 0*Word range 23 .. 31; 
end record; 

Record-Layout : Record- Layout-Type; 
end Repspec-Example; 


3.7.5. [LRM 13.5] Address Clauses. Tlie Ada compiler supports address clauses for 
objects, subprograms, and entries. Address clauses for packages and task units are not 
supported. 

Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address clauses is affected by the fact that the 
System.Address type is private. For the MCS80x0 target, literal addresses are represented as 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For example, in the examples in this document the 
following declaration is often assumed: 

function Addr is new Unchecked-Conversion (Long-Integer,System.Address); 

This function is invoked when an address literal needs to be converted to an Address type. 
Naturally, user programs may implement a different convention. Below is a sample program that 
uses address clauses and this convention. Package System must be explicitly vaithed when using 
address clauses. 

with System; 

with Unchecked-Conversion; 

procedure Hardware-Access is 

function Addr is new Unchecked-Conversion (Long. Integer, System.Address); 

Hardware-Register : integer; 

for Hardware-Register use at Addr (16#FF0000#); 

begin 
• • • 

end Hardware-Access; 

When using an address clause for an object with an initial value, the address clause should 
immediately follow the object declaration: 

Obj: Some-Type := <init_expr>; 

for Obj use at <addr— expr>; 

This sequence allows the compiler to perform an optimisation wherein it generates code to 
evaluate the <addr—expr> as part of the eiaboration of the declaration of the object. The 
expression <init-expr> will then be evaluated and assigned directly to the object, which is stored 
at <addr_sxpr>. If another declaration haul intervened between the object declaration and the 
address clause, the compiler would have had to create a temporary object to hold the 
initialization value before copying it into the object when the address clause is elaborated. If the 


31JUL89 


TMT/g-iaaTM-Vr i/TT '* 3 * ^ 





T«leC«s2 Reference Information for UNIX/G8K Hosts 


object were a large composite type, the need to use a temporary could result in considerable 
overhead in both time and apace- To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

As mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (8 bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by MC680xO byte instructions. The following example indicates 
how these facts allow access to hardware byte registers: 

with System; 

with Unchecked-Conversion; 
procedure Main is 

function Addr is new Unchecked-Conversion (Long-Integer, System.Address); 
type Byte is range -128..127; 

HW-Segs : array (0..1) of Byte; 
for HW-Regs use at Addr (16#FFF310#); 

Status-Byte : constant integer :» 0; 

Next-Block-Request: constant integer := 1; 

Request-Byte : Byte :=» 119; 

Status : Byte; 

begin 

Status :=* HV-Regs (Status-Byte); 

HW-Regs(Next-Block-Request) :* Request-Byte; 
end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16*FFF310# and the next block request byte is at location 16#FFF311#. 

Function Addr takes a long integer as its argument. Long_Integer'Last is 16#7FFFFFFF#, 
but there are certainly addresses greater than Long—Lnteger’Last. Those addresses with the high 
bit set, such as FFFA00Q0, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set, the address should be computed as the negation of the 2’s complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr(-16#00060000#). 

3.7.8. [LRM 13.8j Change of Representation. TeIeGen2 supports changes of 
representation, except for types with record representation clauses. 

3.7.7. [LRM 13.7] The Package System. The specification of TeleGen2’s implementation 
of package System is presented in the LRM Appendix F section at the end of this chapter. 

3.7.8. [LRM 13.7.2] Representation Attributes. The compiler does not support ’Address 
for packages. 

3.7.9. [LRM 13.7.3j Representation Attributes of Real Types. The representation 
attributes for the predefined Soating point types were presented in Table 3*2. 

3.7.10. [LRM 13.8J Machine Code Insertions. Machine code insertions, an optional 
feature of the Ada language, are fully supported in TeleGen2. Refer to the “Using Machine Code 
Insertions” section in the Programming Guide chapter for information regarding their 


REF-1347N-Vl.l(U/08) © 1989 TeleSoft 


3-12 


31JUL89 



— LRM ANNOTATIONS 


implementation and for examples on their use. 

3.7.11. [LRM 13.9] Interface to Other Languages. In pragma Interface is supported for 
Assembly, C, UNIX, and Fortran. Refer to “Interfacing to Other Languages” in the 
Programming Guide chapter for for information on the use of pragma Interface. TeleGen2 does 
not currently allow pragma Interface for library units. 

3.7.12. [LRM 13.10] Unchecked Programming. Restrictions on unchecked programming 
as it applies to TeleGen2 are listed in the following paragraphs. 

[LRM 13.10.2] Unchecked Type Conversions. Unchecked conversions are allowed 
between types (or subtypes) Tl and T2 as long as they are not unconstrained record or array 
types. 


3.8. LRM Appendix F for TeleGen2 

The Ada language definition allows for certain target dependencies. These dependencies 
must be described in the reference manual for each implementation, in an “Appendix F” that 
addresses each point listed in LRM Appendix F. Table 3*5 constitutes Appendix F for this 
implementation. Points that require further clarification are addressed in sections refererenced in 
the table. 


31JUL89 


REF- 134TN-V 1.1 (U/68) © 1989 TeleSoft 


3-13 





TeleGen2 Reference Information for UNDC/68K Hosts 


Table 3-5. LRM Appendix F for TeleGen2 


(1) Implementation-Dependent Pragmas 

(a) Implementation-defined pragmas: Comment, 
Linkname, Images, and NoJSuppress (Section 
3.8.1). 

(b) Predefined pragmas with implementation- 
dependent characteristics: 

« Interface (assembly, UNIX, C, and Fortran- 
see “Interfacing to Other Languages.” 

Not supported for library units. 

• List and Page (in context of source/error 
compiler listings.) (See the User Guide.) 

• Pack. See Section 3.7.1. 

* Inline. Not supported for library-level 
subprograms. 

* Priority. Not supported for main programs. 

Other supported predefined pragmas: 

Controlled Shared Suppress 

Elaborate 

Predefined pragmas partly supported (see Sec¬ 
tion 3.1): 

Memory-Size Storage.Unit System-Name 

Not supported: Optimize 

(2) Implementation-Dependent Attri¬ 

butes 

’Offset. Used for machine code insertions. 

The predefined attribute ’Address is not supported 
for packages. See “Using Machine Code Insertions” 
earlier in this chapter for information on ’Offset and 
’Address. 

’Extended .Image 
'Extended.V &lue 
’Extended_Width 
’ Extended _Aft 
’Extended .Digits 

Refer to Section 3.8.2 for information on the 
implementation-defined extended attributes listed 
above. 

(3) Package System 

See Section 3.7.7. 

(4) Restrictions on Representation 

Clauses 

Summarized in Table 3-4. 

——— Continued on the next page - 


3»14 


REF-1547N-Vl.l(U/88) © 1989 TeleSoft 


S1JUL89 






















LR-M ANNOTATIONS 


Table 3-5. LRM Appendix F for TeleGen2 (Contd) 


- Continued from the previous page - 

(5) Implementation-Generated Names 

None 

(6) Address Clause Expression Interpre¬ 
tation 

An expression that appears in an object address 
clause is interpreted as the address of the first 
storage unit of the object. 

(7) Restrictions on Unchecked Conver¬ 
sions 

Summarized in Table 3-4. 

(8) Implementation-Dependent Charac¬ 
teristics of the I/O Packages. 

1. In Text_IO, the type Count is defined as follows: 
type Count is range O..Syscem.Max_Text_IO-Count; 

- or 0..Max_Int-1 OR 0..2-147li83j34« 

2. In Text-IO, the type Field is defined as follows: 

subtype Field is integer range 
Systexn.Max-Xext-IO.Field; 

3. In Text-IO, the Form parameter of procedures 
Create and Open is not supported. (If you sup¬ 
ply a Form parameter with either procedure, it 
is ignored.) 

4. Sequential_IO and Direct-IO cannot be instan¬ 
tiated for unconstrained array types or discrim¬ 
inated types without defaults. 

5. The standard library contains preinstantiated 
versions of Text_IO.Integer_IO for types Integer 
and Long-Jhteger and of Text-IO.FIoat-IO for 
types Float and Long-Float. We suggest that 
you use the following to eliminate multiple in¬ 
stantiations of these packages: 

Int«ger-Text_IO 

Long_Integer_Xext-IO 

Float -Text-IO 

Long-Float-Text-10 


3.8.1. Implementation-Defined Pragmas. There are four implementation-defined pragmas 
in TeleGen2: pragmas Comment, Linkname, Images, and NojSuppress. 

3.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <*tring_literal> ); 


siJTTTxo 




ear «/TT /afli_ A, «ae«» - /ll - l — 




















TeleGen2 Reference Information for UNDC/88K Hosts 


where “<string-literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
Any number of comments may be entered into the object code by use of pragma Comment. 

3.8.1.2. Pragma Linkname. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 
exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly, <subprogram_name> ); 

pragma Linkname ( <subprogram.:aame>, <string_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Dummy-Access ( Dummy—Arg : System.Address )’; 
pragma Interface (assembly, Dummy-Access ); 
pragma Linkname (Dummy-Access, •-access"); 

3.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the image table. The length of the index table is therefore the sum 
of the lengths of the literals of the enumeration type; the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Images Remuneration—lype>, Deferred); 

— or — 

pragma Images(<eaumeration—type>, Immediate); 

The default, Deferred, saves space in the literal pool by not creating image and index tables for 
an enumeration type unless the ’Image, ’Value, or ’Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. Is this case, 
using 


pragma Images(<enumeration_type>, Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 

For a very large enumeration type, the length of the image table will exceed Integer’Last 
(the maximum length of a string). In this case, using either 


3-18 


REF-134TN-Vl.l(U/68) © 1989 TeleSoft 


S1JUL89 





LEM ANNOTATIONS 


pragma Images(<emuneration_type>, Immediate); 

or the ’Image, ’Value, or ’Width attribute for the type will result in an error message from the 
compiler. 

S.8.1.4. Pragma No JSuppress. NoJSuppress is a TeleGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. No_Suppress is particularly useful when you have a section of code that 
relies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 
the compilation unit for performance reasons. 

Pragma No-Suppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_Soppress (-identifier> [, [ON =*>] <name>j); 

where <identifier> is the type of check you want to suppress (e.g., access-check; refer to 
LRM 11.7) 

<nam«> is the name of the abject, type/subtype, task unit, generic unit, or subprogram 
within which the check ia to be suppressed; <name> is optional. 

If neither Suppress nor No-Suppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the -i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on —i(nhibit, refer to your TeleGen2 Overview and Command Summary document. 

If either Suppress or No-Suppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
No-Suppress are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or NoJSuppress in the source takes precedence over an —i(nhibit 
option provided during compilation. 

3.8.2. Implementation-Dependent Attributes. 

3.8.2.1. ’Address and ’Offset. These were discussed within the context of using machine 
code insertions, in the Programming Guide chapter. 

5.8.2.2. Extended Attributes for Scalar Types. The extended attributes extend the 
concept behind the Text JO attributes ’Image, ’Value, and ’Width to give the user more power 
and flexibility when displaying values of scalars. Extended attributes differ in two respects from 
their predefined counterparts: 

1. Extended attributes take more parameters and allow control of the format of the output 
string. 

2. Extended attributes are defined for all scalar types, including fixed and floating point 
types. 


31JUL89 


RE g.l34TN.Vl.l<U/6a\ (c) 1989 TeleS oft 










TeleGes2 Reference Information for UNDC/68K Hosts 


Extended versions of predefined attributes are provided for integer, enumeration, floating point, 
and fixed point types: 


Integer: 
Enumeration: 
Floating Point: 
Fixed Point: 


’Extended-Image, 
’Extended-Image, 
’Extended-Image, 
'Extended-Image, 
’Extended_Aft 


’Extended—V al ue, 
’Extended—Value, 
’Extended—V alue, 
’Extended-Value, 


’Extended-Width 

’Extended-Width 

’Extended-Digits 

’Extended-Fore, 


The extended attributes can be used without the overhead of including Text-IO in the 
linked program. Below is an example that illustrates the difference between instantiating 
Text-IO.Float_IO to convert a float value to a string and using Float’Extended—Image: 


with Text-IO; 

function Convcrt-To-String ( FI : Float ) return String is 
Temp-Str : String (1 .. 6 * Float’Digits ); 
package Flt-IO is new Text-IO.Float-IQ (Float); 
begin 

Flt-IO .Put ( TeapJStr, FI ); 
return Temp-Str; 

end Convert-To-String; 


function Convcrt-TouString-No-lcxt-IQ( FI : Float ) return String is 
begin 

return Float’Extended—Image (FI ); 
end Convert-ToJ5tring-No-Text-I0; 


with Text-IO, Convert-To-String, Convert—To-String-No-Tcxt—IQ; 
procedure Show_Diff erent—Conversions is 

Value : Float 10.03376; 

begin 

Text-IO.Put-Line ( "Using the Convert—To-String, the value of the variable 
is : * k Convert—To-String ( Value ) ); 

Text_I0.Put—Line ( "Using the Convert_Ta_String_Na-Text_IQ, the value 
is : * k Convert-To-String-No-Text-IO ( Value ) ); 

end Show-Different—Conversions; 


3-18 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 



LRM ANNOTATIONS 


3.8.2.2.I. Integer Attributes 


’Extended Image 


XTSxtended _Imsge(Item, Width t Base r Based,Sp*ce_IF.Positive) 

Returns the image associated with Item as defined in Text_IO. Integer _IO. The Text_IO 
definition states that the value of Item is an integer literal with no underlines, no exponent, no 
leading zeros (but a single zero for the zero value), and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters, leading spaces are first 
output to make up the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more than one parameter. The parameter Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in base notation or not. If no preference is specified, the de¬ 
fault (false) is assumed. Optional 

Space_If_Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the following subtype were declared: 

subtype X is Integer Range -10..18; 

Then the following would be true: 


X’Extended, .Image (5) = *5* 

X 1 Extended. Jaage(5,0) = *5* 

X’ Extended,Inage (5,2) = * 5* 

X’ExtendecLIaage(5,0,2) = *101* 

X’Extended_Image(5,4,2) = * 101* 

X’Extended_Image(5,0,2,True) = *2#101#* 

X’ErtendecLIaage (5,0,10,False) = *5* 

X’Extended«Inage(5,0,10,False,True) = * 5* 

X ’ Ext endetUaage(-1,0,10, False, False) = *-l" 

X’Extended. Jaage(-1,0,10, False, True) = *-l* 

X’Extended_Image(-1,1,10,False,True) = *-l* 


3IJULS9 


ftmy.isarM.vi-i fit Mai tc\ taao 






TeleGen2 Reference Information for UNDC/68K Hosts 


X’Extended—Image(-1,0,2,True,True) 
X’Extended-Image(-1,10,2,True,True) 

’Extended-Value 


"* 2 # 1 # 


- 2 # 1 #» 


Usage: 

X’Extended-Value(Item) 

Returns the value associated with Item as defined in Text J[O.Integer_JO. The Text-IO definition 
states that given a string, it reads an integer value from the beginning of the string. The value 
returned corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Description: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type X. Required 


Examples: 

Suppose the following subtype were declared: 

Subtype X is Integer Range <10.-16; 

Then the following would be true: 


X’Extended—YalueC'S 1 ) = 5 
X’Extended—Value(* 5«) * 5 
X’Extended-Value(*2#101#*) = 5 
X’Extended—Value( , -l*) * -1 
X’Extended—Value(* -1*) = <1 


’Extended-Width 


Usage: 

X’Extesded-Width(Base3*e«d^p«ee-If—Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype: this attribute is a function that may have multiple 
parameters. This attribute yields the maximum image length over all values of the type or 
subtype X. 


3-20 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 




LRM ANNOTATIONS 


Parameter Descriptions: 


Base 

The base for which the width will be calculated. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether the subtype is stated in based no¬ 
tation. If no value for based is specified, the default (false) 
is assumed. Optional 

Space-If-Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examoies: 


Suppose the following subtype were declared: 

Subtype Z is Integer Range -10..18; 
Then the following would be true: 


X’Extended-Width =* 3 
X’Extended-Width(10) * 3 
X’Extended-Width(2) a 5 
X’Extended_Width(10,True) * 7 
X’Extended_Width(2,True) ** 8 
X’Extended-Width(10,False,True) * 3 
X ’ Extended-Width (10, True, False) » 7 
X’Extended-Width(10,True,True) * 7 
X’ Extended-Width(2,True,True) = 9 
X’Extended-Width(2, False,True) = 8 


- ”-lCT 
-”- 20 " 

- *iooocr 

- *-io*io** 

- ” 2 * 10000 *” 
-” ie* 

-” 10 * 18 ** 

- " 2 * 10000 *” 
- * moor 


timr jift 




TeleGen2 Reference Information for UNIX/08K Hosts 


3.8J2.2.2. Enumeration Type Attributes 

’Extended -Ima ge 
Usage: 

X r Bxtended^UMge(Item,Width,Uppercase) 

Returns the image associated with Item as defined in Text_IO.Enumeration_JO. The Text_IO 
definition states that given an enumeration literal, it will output the value of the enumeration 
literal (either an identifier or a character literal). The character case parameter is ignored for 
character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; thi3 attribute is a function that may have 
more that one parameter. The parameter Item must be an enumeration value. The image of an 
enumeration value is the corresponding identifier, which may have character case and return 
string width specified. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required, 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. If the Width specified is larger than the image of 
Item, the return string is padded with trailing spaces, fit the 
Width specified is smaller than the image of Item, the de¬ 
fault is assumed and the image of the enumeration value is 
output completely. Optional 

Uppercase 

An indication of whether the returned string is in uppercase 
characters. In the case of an enumeration type where the 
enumeration literals are character literals. Uppercase is ig¬ 
nored and the case specified by the type definition is taken. 
If no preference is specified, the default (true) is assumed. 
Optional 


3-22 


REF-1347N-Vl.l (U/68) © 1989 TeieSoft 


31JUL89 





LRM ANNOTATIONS 


Examples: 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Y is ('a’, ’B\ ’c’, ’D’); 

Then the following would be true: 


X’Extended-Image(red) 

a »HED* 

X’Extended-.Image(red, 4) 

* "RED • 

X * Extended-Image(red,2) 

3 »RED" 

X ’ Extended-Image(red,0,false) 

a 'red* 

X’Extended .Image(red,10,false) 

* *red 

Y’Extended-Image(* a *) 

3 

Y*Extended-Image(’B’) 

3 »’B’" 

Y’Extended—Image(*a’, 6 ) 

3 * ’a’ 

Y’Extended Image(’a’,0,true) 

s » , a’* 


’Extended—V alue 


XT2xtended_Vaine( Item) 

Returns the image associated with Item as defined in Text.iO.Enumeration.JO. The Text-IO 
definition states that it reads an enumeration value from the beginning of the given string and 
returns the value of the enumeration literal that corresponds to the sequence input. (LRM 
14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 


<1TTTTflQ 


/*V v 





TeleGen2 Reference Information for UNIX/68K Hoata 


Parameter Descriptions: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of X. Required 


Examples: 

Suppose the following type were declared: 

type X is (red, green, blue, purple); 


Then the following would be true: 

X’Extended-ValueC’red*) = red 

X’Extended-Value( 8 green 8 ) = green 

X’Extended-Value( 8 Purple*) = purple 

X’Extended-Value( 8 GreEn *) * green 


’Extended_Width 

Usage: 


X’Ext ended—Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. This attribute 
yields the maximum image length over all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function returns the width of the largest (width) 
enumeration literal in the enumeration type specified by X. 

Examples: 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Z is (Xl, X12, 1123, X1234); 

Then the following would be true: 

X’Extended-Width * 8 - " purple n 

Z’Extended-Width *5 - "X2£^" 


3-24 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 




uRM ANNOTATIONS 


3.8.2.2.3. Floating Point Attributes 

’Extended _tma ge 

Usage: 

X’Ext ended _Jxnage(Item,Pore,Afi,£xp,Ba8e3ased) 

Returns the image associated with Item as defined in Text.JO.Float_JO. The Text_IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13, 14.3.8:15) 

Item must be a Real value. The resulting string is without underlines or trailing spaces. 
Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-1) is assumed. If based 
notation is specified, the trailing ’#’ is included in Aft. Op¬ 
tional 

Exp 

The minimum number of digits in the exponent. The ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base that the image is to be displayed in. If no base is 
specified, the default (10) is assumed. Optional 

Based 

An indication n f whether you want the string returned to be 
in based .notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


31JUL89 


BP-g.lSaTTM-Vl T.UC«ft 





TeIeGes2 Reference Information for UN3X/68K Hosts 


Examples; 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 


Then the following would be true: 

X’Extended-Image(S.0) 

X’ Extended-Image (5.0,1) 

X ’ExtendecLImage(-5.0,1) 

X’Extended-Image(5.0,2,0) 

X’Extended Image(5.0,2,0,0) 
X’Extended .Image(5.0,2,0,0,2) 

X ’Extended-Image(5.0,2,0,0,2,True) 
X’Extended-Image(5.0,2,2,3,2,True) 


5.0000E+00* 

5.0000E+00'’ 

-5.0000E+00" 

5.0E+00* 

5.0* 

101 . 0 " 
2 # 101 . 0 #" 
2#l.l#E+02* 


’Extended-Value 


Usage: 

XTSlxt end ed_V alne(Item) 

Returns the value associated with Item as defined in Text_JO.Float_IO. The Text-IO definition 
states that it skips any leading zeros, then reads a plus or minus sign if present then reads the 
string according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.8:9,14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint—Error is raised. 

Parameter Descriptions: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 
type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended_Yalue( , 5.0*) =5.0 

X’ExtendecLYaIue("0.5El*) = 5.0 

X’ExtendedLVaiue(*2#1.01#E2") = 5.0 


3.26 


REF-1S47N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 





L2LM ANNOTATIONS 


’Extended—Digits 


XT&xt ended JDigita(Base) 

Returns the number of digits using base in the mantissa of model numbers of the subtype X. 
Parameter Descriotions: 


Base 

The base that the subtype is defined in. If no base is 


specified, the default (10) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range >10.0 .. 16.0; 
Then the following would be true: 
X’Erfcended-Digits ■ = 5 

S.8.2.2.4. Fixed Point Attributes 
’ExtendedJknage 


Usage: 

X’Extended-2mage(Itexa r Fore,Ait,£xp,Base,Based) 


Returns the image associated with Item as defined in Text_IO.Fixed_IO. The Text_IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13,14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more than one parameter. The parameter Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


aEF-1347N.Vl.K U/68l (d 1989 TeieSoft 


21JUL89 


3-2? 




TeieGen2 Reference Information for UNIX/6aK Hosts 


Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-1) is assumed. If 
based notation is specified, the trailing ’#’ is included in 
Aft. Optional 

Exp 

The minimum number of digits in the exponent; the ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
'default (false) is assumed. Optional 


Examples: 


Suppose the following type were declared: 

type X is delta 0.1 range >10.0 .. 17.0; 


Then the following would be true: 

X ’ Extended-Image(5.0) 

X’Extended-Image(5.0,1) 

X’Extended-Image(-5.0,1) 

X ’ Ext ended ..Image (5.0,2,0) 

X’Extended-Image(5.0,2,0,0) 

X’Extended-Image(5.0,2,0,0,2) 

X’Extended-Image(5.0,2,0,0,2,True) 
X’Extended-Image(5,0,2,2,3,2,True) 


• 5.00E-00* 
•S-OOE+OO* 
■-S-OOE+OO* 

• 5.0E+00* 

• 5.0* 

■ 101 . 0 * 

* 2 # 101 . 0 #* 

• Oiil 1 UV.r>rt» 


3-28 


R£F-134TN-Vl.l(U/88) © 1989 TeleSoft 


31JUL89 




LRM ANNOTATIONS 


’Extended_V alue 
Usage: 

X’Extended_V alue(Image) 

Returns the value associated with Item as defined in Text_JO.Fixed_IO. The Text_IO definition 
states that it skips any leading zeros, reads a pius or minus sign if present, then reads the string 
according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.3:9, 14.3.3:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint_£rror is raised. 

Parameter Descriptions: 


Image 

Parameter of the predefined type string. The type of the re- 


turned value is the base type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’ExtendecLValue (*5.0*) 

X ’Ext endecLYalue (*0.521*) 

X’ExtendecLYalue(*2#1.01#E2’) 

’Extended-JFore 
Usage: 

X’ExtendedJFore(Base,Based) 

Returns the minimum number of characters required for the integer part of the based 
representation of X. 


s 5.0 
* 5.0 
= 5.0 


3-29 


S1JUL89 


REP-1347N-V 1.1 (U/88) © 1989 TeieSoft 





TeleGen2 Reference Information for UNIX/68K Hosts 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range >10.0 .. 17.1; 

Then the following would be true: 

X’ExtendecLFore =3 -- "-10" 

X ’ExtendecLFore(2) = 6 • 10001" 

’Extended—Ait 


X’Extended-Aft (Base *B*»ed) 


Returns the minim um number of characters required for the fractional part of the based 
representation of X. 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 
Then the following would be true: 

X’Extended-Aft =1 — "i" from 0.1 

X’Extended-Aft(2) =4 ~ "0001” from &*0.000l* 


5-30 


REF-lS47N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 






LEM ANNOTATIONS 


3.8.3. Package System. The current specification of package System is provided below, 
package System is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System-Name : constant name := TeleGen2; 

Storage-Unit : constant 8; 

Memory-Size : constant : = (2 «• 31) >1; 

-- System^Dependent Named Numbers: 

— See Table 3-2 far the values for attributes of 
— types Float and LanqSlaat 

Min..Tnt : constant := -(2 ** 31); 

Max_Int : constant (2 •» 31) -1; 

Max.,Digits : constant := 15; 

Max,Mantissa : constant 31; 

Fine-Delta : constant :=• 1.0 / (2 •* Max .Mantissa) ; 

Tick : constant :* 10.OB-3; 

-- Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 83; 

Max-Qb j ect—Size : constant Max ..Int; 

Max.Record-Count : constant Max-Int; 

Max. Text-IELCount : constant :=* Max—Int -1; 

Max.Text.If]..Field : constant :■=* 1000; 

•private 
•• » • • 
end System; 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-31 




TEST PARAMETERS 


APPENDIX C 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning Value 

$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access- 
type. 


$BIG_ID1 199 * ’A’ & *1' 

An identifier the size of the 
maximum input line length which 
is identical to $3IG„ID2 except 
for the last character. 


$BIG_ID2 199 * 'A' & '2' 

An identifier the size of the 
maximum input line length which 
is identical to $3IG_ID1 except 
for the last character. 


$BIG_ID3 100 * 'A' & ’3’ & 99 * ’A’ 

An identifier the size of the 
maximum input line length which 
is identical to $BIC-_ID4 except 


Name and Meaning 


Value 


for a character near the middle. 


$BIG_ID4 100 * *A’ & '4' & 99 * 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 


$BIG_INT_LIT 197 * ’O' * "293" 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 


$BIG_REAL_LIT 195 * ’O’ & "690.0" 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 


SBIG_STRING1 & 100 * 'A' & 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 & 99 * ’A’ & ’1* £ 

A string literal which when 

catenated to the end of 
BIG_STRING1 yields the image of 
BIG~ID1. 


SBLANKS ISO * ' ’ 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 2_147_433_546 

A universal integer 

literal whose value is 
TEXT_I0.COUNT’LAST. 

SDEFAULT_MEM_SIZE 2147483647 

An integer literal whose value 
is SYSTEM.MEMORY SIZE. 


$DEFAULT_STORJJNIT 8 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 



TEST PARAMETERS 


Name and Meaning 

$DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM.SYSTEM JIAME. 

$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT JTLOAT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE*LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$ GREATER _THAN_DUR ATION^B A SE_LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAHE1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 


Value 

TELEGEN2 

2#1.0#E-31 

1000 

N0_SUCH_TYPE 

NOJSUCHJTYPE 

100_000.0 

131_0 73.0 

63 

BADCHAR**/* 

/NONAHE/DIRECTORY 


TEST PARAMETERS 


Mane and Meaning 
$INTEGER.FIRST 

A universal integer literal 

whose value is INTEGER'FIRST. 

$INTEGER_LAST 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS.l 

A universal integer literal 

whose value is INTEGER'LAST + 1. 

SLESS.THAN.DURATION 

A universal real literal that 
lies between DURATION’BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION.BASE.FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

SLOV.PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 

An integer literal whose value 
is SYSTEM.MAXJ1ANTISSA. 

5MAX.DIGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MAX.INT. 

SMAX.INT.PLUS.l 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


Value 

-32763 

32767 

32768 

-100.000.0 

-131.073.0 

0 

31 

15 

200 

2147433647 

2 147 483 648 


TEST PARAMETERS 


Name and Meaning 


Value 


$MAX_LEN_INT_BASED_LITERAL "2:" 5 195 * '0' 5 "11:" 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 

$MAX_LEN_REAL_BASED_LIT£RAL "16:" & 193 * 'O' & "F.E:" 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 


$MAX_STRING_LITERAL "" & 193 * ’A’ & 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 


SMIM.IHT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN INT. 


$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 


$NAME NO_SUCH_TYPE_AVAILABLE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LONGJTLOAT, or LONG^INTEGER. 

$NAME_LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 


$NEG_BASED_INT 16#?FFFFFFE# 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM. MAXJNT. 


Name and Meaning 


Value 


$NEWJ!EM_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma MEMORY SIZE, other than 
$DEFAULTJ<EMjlZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 

$NEV_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE UNIT, other than 
$DEFAULT_STOR JJNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE JIHIT. 

$NEV SYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


2147433647 


8 


TELEGEN2 


32 


0.01 


WITHDRAWN TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string TO? OF PAGE. 

63" of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 
follows the pragma, and it is this that must appear at the top 
of the page. 

b. A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGING- 
j0F_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object's size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137). 



VITHDRAVN tests 


g. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] These 
tests wrongly attempt to check the size of objects of a derived 
type (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
’SIZE length clause and attribute, whose interpretation is 
considered problematic by the VG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84N & H, & CD50110 [5 tests] These tests 

assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that simply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 86 & 96, 86 & 96, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'STORAGE.SIZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. CD2D11B This test gives a SMALL representation clause for a 

derived fixed-point type (at line 30) that defines a set of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line'303). 

l. ED7004B, ED7005C & D, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 

p. CE2107I This test requires that objects of two similar scalar 
types be distinguished when read from a file—DATA_ERROR is 


WITHDRAWN TESTS 


expected to be raised by an attempt to read one object as of 
the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid, (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_LINE & 
END_OF_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STANDARD INPUT (lines 103, 
107, 118, 132, & 136). 

s. CE3411B i’his test requires that a text file's column number be 

set to COUNT’LAST in order to check that LAYOUT_ERROR is raised 
by a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 





COMPILER AMD LINKER OPTIONS 


APPENDIX E 

COMPILER AND LINKER OPTIONS 


References and page numbers in this appendix 
consistent with compiler documentation and not with 
report. 


are 

this 



COMPILATION TOOLS 


2.1. The Ada Compiler (“ada”) 

The Te!eGen2 Ada Compiler is invoked by the ada command. Unless you specify otherwise, 
the front end, middle pass, and code generator are executed each time the compiler is invoked. 

Before you can compile, you must (1) make sure you have access to TeieGen2, (2) create a 
library file, and (3) create a sublibrary. These steps wefre explained in the Getting Started section 
of the Overview. We suggest you review that section, and then compile, link, and execute the 
sample program as indicated before you attempt to compile other programs. 

This section focuses specifically on command-level information relating to compilation, that 
is, on invoking the compiler and using the various options to control the compilation process. 
Details on the TeleGen2 compilation process and guidelines for using the compiler most 
effectively are in the Compiler chapter of the User Guide volume. (You might want to look at 
Figure 3-1 in that volume now, to give you insight into the TeleGen2 compilation process and to 
see how the options mentioned in this Command Summary volume relate to the actual 
compilation process.) 

The syntax of the command to invoke the Ada compiler is: 


ada {<“comxnon_option M >} {<option>} <input_spec> 


where: 


< “common-option” > 

None or more of the following set of options that are com¬ 
mon to many TeleGen2 commands: 

-l(ibfile or -t(emplib 
—V(space_size 
—v(erbose 

These options were discussed in Chapter 1. 

< option > 

None or more of the compiler-specific options discussed 
below. 

< input _spec> 

The Ada source file(s) to be compiled. It may be: 

* One or more Ada source files, for example: 

/user/john/example 

Prog__A.text 
ciosrc/caic_mem.ada 
caicio.ada myprog.ada 
*.ada 

* A file containing names of files to be compiled. Such a 
file must have the extension “.ilf”. You can find de¬ 
tails for using input-list files in the User Guide portion 
of your TeleGen2 documentation set. 

* A combination of the above. 


Please note that the compiler defaults are set for your convenience. In most cases you will 
not need to use additional options; a simple “ada <input_spec>” is sufficient. However, options 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-3 








TeleGen2 Command Summary for UNIX-Baaed Cross Compilers 


are included to provide added flexibility. You can, for example, have the compiler quickly check 
the source for syntax and semantic errors but not produce object code (-e(rrors_only) or you can 
compile, bind, and link an main program with a single compiler invocation (-m(ain). Other 
options are provided for other purposes. 

The options available with the ada command, and the relationships among them, are 
illustrated in the following figure. Remember that each of the options listed is identified by a 
dash followed by a single letter (e.g., “-e"). The parenthesis and the characters following the 
option are for descriptive purposes only; they are not part of the option. 


—{(ibfile <libname> 


-t(emplib <sublib>{,...} 


-V(space_size 2000 
-v(erbose 


-e(rrors_jonly ( compile to object ) 

-c(pu_type 20 
I 

-d(ebug 

-i(nhibit <keyt> 

-k/eep 
I 

-0(ptimize <keyf> 
l 

-S(ource_asm 
I 

-u(pdate_lib <keyf> 
. I 

-x(ecution_profile 


-b(inci_only 


-L(ist 


-F(ile_onlyjern 

_i 


-C(ontext 1 
I 

-E(rror_abort 999 

-m(ain <unit> 

I 

□ -s(oftware_float 


<input_spec> 


t (1) <key> for -O. refer to tofL (2) <key> for -« i or i; * ii the default. (2) <key> for-«: a or certain combination* of 

lac. 


2-4 


INTRO- 1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 





COMPILATION TOOLS 


The options available with the ada command are summarized in Table 2-2. The default 
situation (that is. what happens if the option is not used) is explained in the middle column. 
Each option is described in the paragraphs that follow the table. 


Table 2-2. Summary of Compiler Options 


Option 

Default 

Discussed 
in Section 

Common options: 


M|jj| 

-l(ibfile <libname> 

Use liblst.alb as the library file. 


-t(emplib <sublib...> 

None 

1 

-V(space_size <value> 

Set size to 2000 Kbytes. 


-v(erbose 

Do not output progress messages. 

ms 

-b(ind_only 

Bind and link. 


-c(pu_type <value> 

Consider CPU type to be MC68020. 


-d(ebug 

Do not include debug information in 


-E(rror_abort <value> 

object code, {-d sets — k(eep.) 

Abort compilation after 999 errors. 

2.1.4 

-e(rrors_only 

Run middle pass and code generator, 

2.1.5 

-i(nhibit <key>f 

not just front end. 

Do not suppress run-time checks, source 

2.1.6 

-k(eep 

line references, or subprogram name 
information in object. 

Discard intermediate representations of 

2.1.7 

-m(ain <unit> 

secondary units. 

Do not produce executable code 

2.1.8 

-0(ptimize <key>| 

(binder/linker not executed). 

Do not optimize code. 

2.1.9 

a -s(oftware_float 

Use hardware floating-point support. 

2.1.10 

-u(pdate_lib <key>t 

Do not update library when errors are 

2.1.11 

-x(ecution_profile 

found (multi-unit compilations). 

Do not generate execution-profile code. 

2.1.12 

Listing options: 



-C(ontext <value> 

Include 1 line of context with error 

2.1.13.1 

-L(ist 

message. 

Do not generate a source-error listing. 

2.1.13.2 

-F(ile_only_errs 

Do not generate an errors-only listing. 

2.1.13.3 

-Sfource_asm 

only. 

Do not eenerate assembly listing. 

2.1.13.4 


t (1) <key> lor -O. refer to tt?l. (2) <key> for -« i or >; * i> the default. (2) <key> for -« a or certain combination* of 

lae. 


04SEP89 


INTRO-1459N-V 1.1 (UNDC-C) © 1989 TeleSoft 


2-5 
















.COMPILATION TOOLS 


2.2. The Ada Linker (“aid”) 

The TeleGen2 Ada compiler produces object code from Ada source code and stores it in the 
Ada sublibrary. The TeleGen2 Ada linker takes Ada object code and non-Ada imported object 
code from Ada sublibraries and creates either linked output modules or partially linked object 
form modules (OFMs) that can be used as input to subsequent linking operations. 

The linker operates in two phases: the binding phase and the linking phase. The binding 
phase “binds” together all of the necessary Ada units and creates elaboration code that is stored 
in the sublibrary. The linking phase combines the elaboration code, the appropriate Ada object 
modules, and any OFM, environment, or imported non-Ada objects specified in the user’s linker 
options file to produce either an executable load module or a new OFM. 

The linker is invoked with the aid command; it can also be invoked with the -m(ain option 
of the ada command. In the latter case the compiler passes appropriate options to the linker, to 
direct its operation. 

In the simplest case, aid takes two arguments - the name of the main unit of the Ada 
program structure that is to be linked and the name of a linker option file - and produces one 
output file, the complete load module produced by the linking process. The load module is placed 
in the directory from which aid was executed, under the name of the main unit used as the 
argument to aid. For example, the command 

aid -a vmel33.opt main 

links the object modules of all the units in the extended family of unit Main, including any user- 
specified modules in the linker options file vmelSS.opt The resulting load module will be named 
“main.ef”, which is in the TeleGen2 proprietary output format that can be used as input to the 
downloader (adwn command). Important: when using aid, the body of the main unit to be 
linked must be in the working sublibrary. 

The general syntax of the aid command is: 


aid {<“common_option”>} {<option>} <unit> 


where: 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-13 






TeleGen2 Command Summary for UNIX-Baaed Cross Compilers 


r 


< “common.joption ” > 

None or more of the following set of options that are 
common to many Te!eGen2 commands: 

-l(ibfile or -t(emplib 

-V(space_size 

-v(erbose 

These options were discussed in Chapter 1. 

<option> 

None or more of the options discussed in the following 
sections. 

<unit> 

The name of the main unit of the Ada program to be 
linked. If the name of the unit is not provided on the 
command line, the unit is specified with the INPUT op¬ 
tion in a linker options file. For information on linker 
options files, refer to the User Guide portion of your 
TeleGen2 documentation set. 


The options available with the aid command and the relationships among them are illustrated 
below. 


2-14 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


04SEP89 







COMPILATION TOOLS 


aid 


-l(ibfile <libname> 

I_ 


-t(emplib <sublib>{,...} 


-V(space_size 2000 

I 

-v(erbose 

I 

-a(dditional_options <file> 

I 

-B(ase 0 
1 

-b(ind_only 

I 

-c(pu_type 20 

I 

-d(ebug 

I 

-f(ormat <key|> 


-g(eRerate_jofm <lib-entity > 


-o(utput_load <file> 
_I 


-M(ap {<suboption|>} 

I 

-S(“asmJisting” 

I 

□ -s(oftware_float 

t 

-T(raceback 15 

I 

-x(ecution_profile 

I 

-X(ception_show 

I 

— Y 4096 [byt«*-lon|| 

1 

—y 256 |byte*-o»tur«J| 


<umt> 


t Notes 

<key>: S(record or E(xecute_form or 
I(EEE (E is die default) 

<suboption>: i(mage, efxcluded, and/or l(ocals 

Linker directives are communicated to the linker as options on the command line or as 
options entered via an options file. Command-line options are useful for controlling options that 
you are likely to change often. The default option settings are designed to allow for the simplest 
and most convenient use of the linker. Command-line options are discussed below. 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-15 







THE ADA LINKER 


Table 4-1. Linker Options File Commands 


OUTPUT 

j/OBJECTJ'ORM j<lib_entity>j| 
{/COMPLETE 1 /INCOMPLETE| 

\ /LOAD .MODULE <file>j 

— See —o option. 

— Specify output type and format. 

— See — g option. 

INPUT 

— identify object modulet to be linked 

j/EXPORT.DEFINITIONS] 

~ and tpecify the tearch path. 

j/MAIN | /SPEC 1 /BODY | /OFMj 


[/PHANTOM] /WORKINGJUBLIBi 


!/NOSEarch| <lib_entity> 


REGION 

— Define and name memory regiont. 

/HIGH_BOUND-<address> 


/LOW _BOUND«<address> 


j/UNUSEDj (<region_name>| 


LOCATE 

— Specify addressee for control sections. 

(/CONTROL.SECTION-CODE | DATA 

\ CONSTANT| 

(/COMPONENT _NAM£-<lib.jeniity> 

| /SPEC \ /BODY | /OFMjj 


i/AT»<addreas>j 


|/IN-*<region>| 


(/AFTER«<csect_name | lib_entity>) 

!/ALIGNMENT-<value>j 


DEFINE 

— Specify link-time values for symbols. 

/<symbol_n&me>—<value> 


(/ADDRESS! 


TARGET 

— Specify target processor. 

< MC68000 ( MC88010 | MC88020> 

MAP 

— Sec also —M option. 

(/[NOtlMAGEj 

— This is an —M suboption (“i”) 

i/jyVOj INCLUDE J.OCALS] 

— —M suboption 

j/[yVO|EXCLUDED| 

— —M sub option (“e”) 

[/WIDTH =“<152 ‘ 80> j 


i/HEIGHT-<50| <value>>) 


(<file>j 


EXIT 

— Terminate options list. 

QUIT 

— Abandon link operation. 


4.3.2. Mandatory Linker Options File. As delivered, the TeleGen2 system requires that a 
linker options file be used to define certain user environment values. If the environment will not 
be changing, you can modify the CGS to define these values and thereby eliminate the need to 
include them in an options file. When using the options nie, you must specify values to be 
assigned to various symbols recognized by the CGS and defined using the linker DEFINE 
command as follows: 


21SEP89 


UG-1457N-Vl.i(SUN.68) © 1989 TeleSoft 


4-11 














