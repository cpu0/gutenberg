UNCLASSIFIED 


AD 

AD-E403 691 


Technical Report ARWSE-TR-14028 


PREFIX VERSUS POSTFIX IN C++ 


Tom Nealis 


October 2015 



U.S. ARMY ARMAMENT RESEARCH, DEVELOPMENT AND 

^ till., 

ENGINEERING CENTER 

i 1 ill 

Weapons and Software Engineering Center 


Picatinny Arsenal, New Jersey 


Approved for public release; distribution is unlimited. 















UNCLASSIFIED 


The views, opinions, and/or findings contained in this report are those of the 
author(s) and should not be construed as an official Department of the Army 
position, policy, or decision, unless so designated by other documentation. 

The citation in this report of the names of commercial firms or commercially 
available products or services does not constitute official endorsement by or 
approval of the U.S. Government. 

Destroy this report when no longer needed by any method that will prevent 
disclosure of its contents or reconstruction of the document. Do not return 
to the originator. 



UNCLASSIFIED 


REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-01-0188 


The public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, 
gathering and maintaining the data needed, and completing and reviewing the collection of information. Send comments regarding this burden estimate or any other aspect of this collection 
of information, including suggestions for reducing the burden to Department of Defense, Washington Headquarters Services Directorate for Information Operations and Reports (0704-0188), 
1215 Jefferson Davis Highway, Suite 1204, Arlington, VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to any 
penalty for failing to comply with a collection of information if it does not display a currently valid OMB control number. 

PLEASE DO NOT RETURN YOUR FORM TO THE ABOVE ADDRESS. 


1. REPORT DATE (DD-MM-YYYY) 

October 2015 


2. REPORT TYPE 


Final 


3. DATES COVERED {From - To) 


4. TITLE AND SUBTITLE 


PREFIX VERSUS POSTFIX IN C++ 


5a. CONTRACT NUMBER 


5b. GRANT NUMBER 


5c. PROGRAM ELEMENT NUMBER 


6. AUTHORS 

Tom Nealis 


5d. PROJECT NUMBER 


5e. TASK NUMBER 


5f. WORK UNIT NUMBER 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

U.S. ArmyARDEC, WSEC 

Fire Control Systems & Technology Directorate 

(RDAR-WSF-M) 

Picatinny Arsenal, NJ 07806-5000 _ 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

U.S. ArmyARDEC, ESIC 

Knowledge & Process Management (RDAR-EIK) 

Picatinny Arsenal, NJ 07806-5000 


10. SPONSOR/MONITOR’S ACRONYM(S) 


11. SPONSOR/MONITOR’S REPORT 
NUMBER(S) 

Technical Report ARWSE-TR-14028 


12. DISTRIBUTION/AVAILABILITY STATEMENT 


Approved for public release; distribution is unlimited. 


13. SUPPLEMENTARY NOTES 


14. ABSTRACT 

Many coders today do not take the time to consider the implications of the code they write. Not all code is 
created equal, and something as seemingly harmless as incrementing or decrementing via prefix instead of a 
postfix notation can have a considerable effect on performance. Modern day compilers can and do optimize 
certain common instances of code involving this notation, but it should not be relied upon in a well-developed 
and maintained code base. 


15. SUBJECT TERMS 

Prefix increment Prefix decrement Postfix increment 


Postfix decrement 


16. SECURITY CLASSIFICATION OF: 

17. LIMITATION OF 
ABSTRACT 

18. NUMBER 
OF 

19a. NAME OF RESPONSIBLE PERSON 
Tom Nealis 

a. REPORT 

u 

b. ABSTRACT 

U 

c. THIS PAGE 

U 

SAR 

PAGES 

9 

19b. TELEPHONE NUMBER (include area 

code) (973) 724-8048 


Standard Form 298 (Rev. 8/98) 

Prescribed by ANSI Std. Z39.18 





UNCLASSIFIED 


CONTENTS 


Introduction 
Methodology 
Conclusions 
Distribution List 


Approved for public release; distribution is unlimited. 




UNCLASSIFIED 


INTRODUCTION 

Compilers today have become very good at optimizing code that has not been written in the 
most efficient manner possible. Many coders often take this for granted and do not spend time 
concerning themselves with the performance of their code and mistakenly rely on compilers to detect 
and correct inefficiencies. One simple example of why coders should pay attention and not rely on 
compilers to do the thinking for them is when to use prefix or postfix in their code. 

Most coders coming out of school today all know the basic difference between these two 
lines of code: 

function(++variable); 

function(variable++); 

The basic difference is that the first function call will be sent an incremented variable, 
whereas the second one will receive the current value of the variable and then the variable will be 
incremented upon return from the function. So, many coders will be comfortable with that knowledge 
but not think there is any difference between the next two lines of code: 

variable++; 

++variable; 

In the end, both of these lines of code will increment the variable, but the concern is how. 


METHODOLOGY 

In order to understand the difference between these two notations, what is produced by the 
compiler must be discussed. Without optimization, the compiler must create a copy in order to 
accomplish a postfix increment or decrement. The prefix does not require this and is, therefore, 
more efficient. Most modern compilers can detect and optimize the simple cases like the cases 
involving basic built-in types. This should not be relied upon and it should be a habit to always use 
prefix unless specifically needed to postfix. Take for example the following code: 

for(int i = 0; i < SomeNum; i++) { doAnything;} 

Most college professors and books will show loops written in this way. So, coders that have 
seen loops mostly written in this way will continue to write them in the same fashion. It is not 
necessary to postfix increment for this loop. Even though most compilers will optimize this properly 
in most cases, this should always be written for loop: 

for(int i = 0; i < SomeNum; ++i) { doAnything;} 

So let’s take a look at some assembly. Modern compilers will produce the following after they 
optimize this code: 


//prefix built in type 
; 21 : for(auto i = Ou; i < 10000; ++i) 
mov DWORD PTR _i$l[ebp], 0 

jmp SHORT $LN3@wmain 

mov eax, DWORD PTR_i$l[ebp] 

add eax, 1 

mov DWORD PTR _i$l[ebp], eax 

cmp DWORD PTR _i$l[ebp], 10000; 00002710H 

jae SHORT $LNl@wmain 


Approved for public release; distribution is unlimited. 
1 



UNCLASSIFIED 


:22 

jmp SHORT $LN2@wmain 


//postfix built in type 
; 21 : for(auto i = Ou; i < 10000; i++) 
mov DWORD PTR _i$l[ebp], 0 

jmp SHORT $LN3@wmain 

mov eax, DWORD PTR _i$l[ebp] 

add eax, 1 

mov DWORD PTR _i$l[ebp], eax 

cmp DWORD PTR _i$l[ebp], 10000; 00002710H 

Jae SHORT $LNl@wmain 

:22 :; 

Jmp SHORT $LN2@wmain 

As one can see, the optimized code is exactly the same. The following loops are an example 
of code that is a little trickier for the compiler to optimize: 


auto& it = my_ints.begin(); 
while(it != myjnts.endO) 
it++; 

auto& it = my_ints.begin(); 
while(it != myjnts.endO) 
++it; 


The variable ‘it’ is a vector iterator. The prefix and postfix increment line of code produces 
the following assembly code: 


//iterator prefix 
00F755E2 mov 
00F755E5 call 
00F755EA Jmp 


ecx, dword ptrjitj 

std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator++ (0F711F9h) 
wmain + 0EEh{0F7558Eh) 


//iterator postfix 
002E5A12 push 
002E5A14 lea 
002E5A1A push 
002E5A1B mov 
002E5A1E call 
002E5A23 lea 
002E5A29 call 


0 


eax, [ebp - 17ChJ 
eax 

ecx, dword ptr[it] 

std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator++ (02E10FFh) 
ecx, [ebp - 17ChJ 

std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > 
>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >(02E119Ah) 

002E5A2E Jmp wmain + OEEh {02E59BEh) 


As one can clearly see, the compiler was unable to optimize the postfix. It had to create the 
copy. Figure 1 displays how long it takes to run through the previous code for a certain number of 
iterations. 


Approved for public release; distribution is unlimited. 

2 



UNCLASSIFIED 


Prefix versus postfix - 

iterators 

900000 

800000 






























'Z 500000 
ji 400000 
300000 

200000 

100000 














Prefix Iterator 







Postfix Iterator 




















000 

0 100000 200000 300000 400000 500000 600 

Iterations 


Figure 1 

Prefix versus postfix - iterators 


CONCLUSIONS 

The C++ coders need to take the time to understand implications of the code that they create. 
Some of the most benign looking code can have a significant impact on the performance of a piece 
of software that can, in turn, affect the device/system that is running it. An easily addressable 
example of this is the prefix and postfix notation. A coder should always use prefix notation unless 
they have to use postfix. 


Approved for public release; distribution is unlimited. 

3 






UNCLASSIFIED 


DISTRIBUTION LIST 


U.S. ArmyARDEC 
ATTN: RDAR-EIK 

RDAR-WSF-M, T. Nealis 
Picatinny Arsenal, NJ 07806-5000 

Defense Technical Information Center (DTIC) 
ATTN: Accessions Division 
8725 John J. Kingman Road, Ste 0944 
Fort Belvoir, VA 22060-6218 

GIDEP Operations Center 
P.O. Box 8000 
Corona, CA 91718-8000 
gidep@gidep.org 


Approved for public release; distribution is unlimited. 

5 



UNCLASSIFIED 


REVIEW AND APPPOV/^L OF AROEC TECHNICAL REPORTS 

Prefix Va. PciEtftf in t*-* _ 

Tine Date re?«lu«ij by LCSD 

ThoiriasM Nealia_ 

AuUnofVPrqjBct Engineer Report number (to bb 9$9ignHl by LCSD) 

XB(M3 31 ROAR-WSF-M 

Extansion Building ALilhor'a/Pn)jei:rj &iginMr 9 ORkse “ 

(DMs^. Ldbordbry, Symbal) 

PART 1. Wiiift b* ligned befeie lti« report een 

t. The draft copy of thrs njpoft haa been reviawed far (ecbnical tccursty and is aispraw^l 

for sdltmg 

b. Um DtShribirlidn Slatament A X C._□_. E_. F_or X__ ftx IJi# teaaen 

Chicfcsd on itia cantmuBHen or [hi* form Reasan:_^Opervlloi^el U«j._ 


1, If Slabemenl A \t Setactad, tlie repofl be re^awf to tfie Netmrf rechnlppl 

Ifllertriati^ Sarvtcfi (HTrS) tor sale (o Hi4'general public. Only nnclaKrfted (tpCrfs 
whose diBiributian Ig nrt ^Hed Of mntroJIad in any way ana releesed lb WTTS 


c. 


2 . tf Stalement H, 0, D, E. F, or X is salcoted Ehe report yvl be rtlnased to ifia Detonse 
T«#inlM( Infermaliori CenlarfDTrC) w*nch lirmfl dfetribubiin accofdino to Itie 
conditions ir^dicated in the atabsmenl, 


Tl» distribLiton ist tor piie report has been reyiawed tor 



arid Ownplateness 


Patricia Alameda 
^bfvtaion ihlfer^ 




PART 2. To be signed irtfidr whan draft report ia?uhnottSd 0^ iftOf nsvi*w of repraductmn copy. 

f M 

This report is apprayed tor publtabon. y ^ 

Patricia Alameda 

/•' bSn ' aitf*'* * "" — 




Andrew Pskowski 


(Qm 


RDAR-CIS 


{DittB} 


LCSD 45 Bupefisedes SMCAR Form J9, 20 Oac DG 


Approved for public release; distribution is unlimited. 

6 



