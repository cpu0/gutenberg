AD-A247 334 tation page 


FMmAppmnd 

OPttNo.0704^m 





wptf iMpoiMt taiudkiQtitiMtlQf vM^mbiQlMlnciloni^ MMcMnQ wMnQfltfBiOtfMi0ivwto9MdMMrinln9tfMdMi 
IlMM Dm* HIgtMty. Suit 12M. Mn^ VA ^^^a^430^. ari 10 Olin ol Nofliirton OTd RiguMMy MWn. (Me* of 


2. REPORT DATE 


3. REP(^ TYPE AND OATES 

Rnal: 12 Oct 1991 to 01 Jun 1993 


5. FUNDING NUM 


Validation Summary Report: Aitech Defense Systems Inc., AI-ADA/96K, Version 3.0, 
Sun-4/330 under SunOS 4.1.1 (Host) to DSP9^02 ADS board (bare 
machine)(Target), 911012W1.11225 


iBiJriirgiTt 


Wright-Patterson AFB, Dayton, OH 
USA 





ORGANIZATION NAME(S) AND A00RESS(ES) 

Ada Valid^ion Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 


AVF-VSR-507.0292 


0. SPONSORINGAHONITORING AGENCY NAME(S) AND ADORE 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm3E114 
Washington, D.C. 20301-3081 



fFm tTH f fiOT ir*: ? i wy :Tiri rdrr^T, j 


Approved for public release; distribution unlimited. 




10. SPONSORINGAAONITORING AGENCY 
REPORT NUMBER 



12b. DISTRIBUTION CODE 



RACTTMaxiimum 200 wonts) 

Aitech Defense Systems Inc., AI-ADA/96K, Version 3.0, Wright-Patterson AFB, Sun-4/330 under SunOS 4.1.1(Host) to 
DSP96002 ADS board (bare machine)(Target), ACVC 1.11. 




Ada projp’amming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 




17. 

OF REPORT 
UNCLASSIFIED 


LASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 





NSN 7540-01-280-950 


Standard Form 296. (Rtv. 2-89) 
PratcrlMdbyANSISld. 239-128 


























AVF Control Number: AVF-VSR-507.0292 

4 Febniary 1992 
91-06-21-AIT 


Ada CC»1PILER 
VALIDATIOl SUMMARY REPORT: 

Certificate Number: 911012W1.11225 
Aitech Defense Systems Inc. 

AI-ADA/96K, Version 3.0 

Sun-4/330 under SunOS 4.1.1 => DSP96002 ADS board (bare machine) 


Prepared By: 
Ada_Validation_Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ac«»«sloa r*r 


j NTI'? QRAkl 
: OTic lij 
J Ur.anno>tn««d 



I ly—- 

I Dl strlbutlta/ 
j Avail ability Co««e 
i fAvall asfi/or 

Dlst Spaolal 


i?\-\ 


§2 3 05 013 


92-05963 


□ □ 





Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was ccxnpleted on 12 October 1991. 

Compiler Name and Version: AI-ADA/96K, Version 3.0 

Host Conputer System: Sun-4/330 under SunOS 4.1.1 

Target Conputer System: DSP96002 ADS board (bare machine) 

Custraner Agreement Number: 91-06-21-AIT 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

911012W1.11225 is awarded to Aitech Defense Systems Inc. This certificate 

expires on 1 June 1993. 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


A3S~^SniHi¥iOTrOrganizatxOTr 

Dire<i[tor)^onputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 





aitech 

DECLARAVON OF CONFORMANCE 


Customer: 

Ada Validation Facility: 

ACVC Version 
Ada Implementation: 

Compiler Name and Version: 
Host Computer System: 
Target Computer System: 


AITECH Defense Systems Inc. 
ASD/SCEL, Wright-Patterson AFB 
1.11 

AI-ADA/96K Version 3.0 
Sun-4/330 SunOS 4.1.1 
DSP96002 ADS Board Bare Machine 


Customer’s Declaration 


I, the undersigned, representing AITECH Defense Systems, declare that AITECH Defense 
Systems has no knowledge of deliberate deviations from Ada Language Standard 
ANSI/MIL-STD-1815A in the implementation listed in this declaration. 


. - 

d^riel Leemor 
AITECH Defense Systems Inc. 
3080 Olcott St, Suite 105A 
Santa Clara, CA 95054 








TABLE OF CX)MTEI4TS 


CHAPTER 1 INTRCEXJCnCN 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MCMDIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 
INTRODUCTICN 


Hie Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [AdaBS] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or frcxn: 

National Technical Information Service 
5285 Port Royal Road 
Springfield 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to; 

Ada Validation Organization 

Ccmputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTROTUCnCN 


1.2 REFERENCES 

[Adla83] Reference Manual for the Ada Progretmining Language , 

ANSI/MIL-STD-1815A, February 1963 and ISO 8652-1587. 

[Pro90] Ada Compiler Validation Procedures > Version 2.1, Ada Joint 
Program office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Con^liance of Ada irrplementations is tested by means of the ACVC. Hie ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result v^en they 
are executed. Three Ada library units, the packages REPORT aund SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which moist not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, sep?.r?.tely compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in i^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTICW 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and tUG89]). 

In order to pass an ACVC an Ada in 5 )lementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIC»I OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target conpater system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing conpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the ten^jlate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host conpiter system and its 

Implementation target conpater system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vrtiich carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inpleroentation. 

Ada The part of the certification body that provides technical 

Validation guictoce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inqplementation 

Computer A fxanctional unit, consisting of one or more conpaters and 

System associated scft'-’are, that vsc* coirmon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRtXUCnON 


Conformity 


Custcxner 


Declaration of 
Conformance 


Host Confuter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Con^iler 

Validated Ada 
In^lementation 

Validation 


Withdrawn 

test 


Fijlfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF \diich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A conputer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<sv±)section>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system v^ere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the confonnity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect =*"d ^ot used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



C3IAPTER 2 

IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49006A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001P 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024O 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vhich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by docxjments issued by the ISO and the AJPO known as Ada 
CcMimentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
a{^ropriate. 


2-1 





ZMnJMENmTION ISPEM)ENCIES 


The following 285 tests have floating-point type declarations 
requiring more digits than SYSTEM.MhX DIGITS: 


C24113F..Y (20 tests) 
C35706F..Y (20 tests) 
C35708F..Y (20 tests) 
C45241F..Y (20 tests) 
. C45421F..Y (20 tests) 
C45524F..Z (21 tests) 
C45641F..Y (20 tests) 


C35705F..Y (20 tests) 
C35707F..Y (20 tests) 
C35802F..Z (21 tests) 
C45321F..Y (20 tests) 
C45521F..Z (21 tests) 
C45621F..Z (21 tests) 
C46012F..Z (21 tests) 


The following 21 tests check for the predefined type SHORT_INTEGER; 
for this implementation, there is no such type: 


C35404B 

C45412B 

C45611B 

B52004E 

CD7101E 


B36105C 

C45502B 

C45613B 

C55B07B 


C45231B 

C45503B 

C45614B 

B55B09D 


C45304B 

C45504B 

C45631B 

B86001V 


C45411B 

C45504E 

C45632B 

C86006D 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101P 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LONG_INTEGER, or 
SHORT_INTEGER; for this implementation, there is no such type. 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT_FLQAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLCIAT; for this 
implementation, there is no such type. 


C45531M..P amd C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain length clauses 
that specify values for 'SMALL that are not powers of two or ten; this 
implementation does not support such values for 'SMALL. 


C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLCWS is TRUE. 


2-2 



IMPLEMENTATIC»J DEPENDENCIES 


C4A013B contains a static universal real expression that exceeds the 
rcuige of this iitplementation's largest floating-point type; this 
expression is rejected by the conpiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATIW; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATICX^; for this iirplementation, the ranges are the 
same. 

CA2009A, CA2009C..D (2 tests), CA2009F, and BC3009C instantiate 
generic units before their bodies are conpiled; this inplementation 
requires that the body of a generic unit be compiled before any 
instantiation of that unit, as allowed by AI-00506. (See Section 
2.3.) 

LA3004A..B, EA3004C..D, and c:a 3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this inplementation does not support 
pragma INLINE. 

0310090 checks \4iether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD801LA use machine code 
insertions; this inplementation provides no package MACHINE_CODE. 

The following 264 tests check operations on sequential, text, and 
direct access files; this inplementation does not support external 
files: 


C:E2102A. .c 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y 

(12) 

CE2103C..D 

(2) 

CE2104A..D 

(4) 

c:e2105a. .B 

(2) 

CE2106A..B 

(2) 

CE2107A. .H 

(8) 

CE2107L 


CE2108A..H 

(8) 

CE2109A..C 

(3) 

CE2110A..D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A..B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2203A 


CE2204A. .D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE240LA.-C 

(3> 

EE24C'lD 


/I ir r 

(2) 

EE2401G 


C:e2401H. .L 

(5) 

CE2403A 


CE2404A. .B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A. .B 

(2) 

CE2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

C:E3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE340LA 


c:e3402a 


EE3402B 


CE3402C..D 

(2) 

CE3403A. .C 

(3) 


2-3 








IMPLEMEinATIGN DEPENDENCIES 


CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A. .C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 


EE3412C 


CE3413A..C 

(3) 

CE3414A 


CE3602A. .D 

(4) 

c:e3603a 


CE3604A. .B 

(2) 

CE3605A..E 

(5) 

CE3606A. .B 

(2) 

Ci:3704A. .F 

(6) 

CE3704M..O 

(3) 

CZ3705A. .E 

(5) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3805A. .B 

(2) 

CE3806A. .B 

(2) 

CE3806D. .E 

(2) 

(3:3806G. .H 

(2) 

CE3904A. .B 

(2) 

CE3905A. .C 

(3) 

CE3905L 


CE3906A. .C 

(3) 

CE3906E..F 

(2) 


CE2103A, CE2103B, and CE3107A use an illegal file name in an attenpt 
to create a file and expect N?\ME_ERROR to be raised; this 
imolementation does not support external files euid so raises 
USE ERROR. (See Section 2.3.) 


2.3 TEST MODIFICATIC»IS 

Modifications (see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B55A01A BAllOlE BA3006A BA3006B BA3007B BA3008A 

BA3008B BA3013A BC2001D BC2001E 


CA2009A, CA2009C..D (2 tests), CA2009F, and BC3009C were graded 
inapplicable 1^ Evaluation Modification as directed by the AVO. These 
tests instantiate generic units before those units' Ibodies are con^jiled; 
this iinplementation rejects a unit that contains an instantiation of a 
unit whose body is not in the program library. 

BC3204C..D (2 tests) and BC3205C..D (2 tests) were graded passed by 
Processing Modification as directed by the AVO. These tests checJt that 
instantiations of generic units with unconstrained types as generic actual 
parameters are illegal if the generic bodies contain uses of the types 
that require a constraint. However, the generic bodies are compiled after 
the units that contain the instantiations, and this implementation creates 
a dependence of the instantiating units on the generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic bodies 
maltes the instantieting units obsolete—no errors are detected. The 
processing of these tests was modified by re-compiling the obsolete units; 
all intended errors were then detected by the conpiler. 

AD7203B was graded passed by Test Modification as directed by the AVO. 

This inplementation allocates 16K words of the target memory for task 
stacks; by default, equal amounts of storage are allocated to all tasks. 
AD7203B contains 8 tasks, in addition to the environment task; since the 
environnent task requires in excess of 2K words, STORAGE_ERROR is raised 
when the test is run. The test was modified by adding a 'STORAGE SIZE 


2-4 






IMPLEMENTATION DEPENDENCIES 


length clause for the task type T?K at line 165 to specify an allocation 
of 1024 storage units (words) for the activation of each task of the type. 

CE2103A, CE2103B, and CE3107A were graded inapplicable 1^ Evaluation 
Modification as directed by the AVO. Ihe tests abort with an xjnhandled 
exception vdien USE_ERROR is raised on the attenpt to create an external 
file. This is acceptable behavior because this inplementation does not 
support external files, (cf. AI-00332). 


2-5 






Cffi^PTEK 


3 


PROCESSING INFORW^TICN 


3.1 TESTING ENVIRONMENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada ioqplementation, contact: 

Uri Gries 

Aitech Defense Systems Inc. 

3080 Olcott Street, Suite 105A 
Santa Clara, CA 95054 
(408) 980-6200 


Testing of this Ada inplementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the custonized test suite in accordance with the Ada Programming 
Language Standard, vAiether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a resxilt was 
obtained that conform? to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the s\q)port 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 






PROCESSING INFORMATICS 


a) Total Number of i^plicable Tests 3431 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 95 

d) Non-Processed I/D Tests 264 

e) NOn-Processed Floating-Point 

Precision Tests 285 

f) Total Number of Inapplicable Tests 644 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTICS 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host compater. 

The tests were conpiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target ccanputer 
system through ethernet and an OPI (Once Protocol Interface) box 
manufactured by Aitech and run. The results were captured on the host 
computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Option/Switch Effect 

-L Produces list files. 

-A Produces asm files. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The mecining and purpose of these parameters are explained in [UG89]. Ihe 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vhich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


240 — Value of V 

a..V-l -> 'A', V «> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 »> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> "A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 
$BIG_REAL_LIT 
$BIG STP.I?TG1 
$BIG_STRING2 
$BLANKS 


(1..V-3 -> '0') & ”298" 

(1..V-5 -> '0') & "690.0" 
r«r ^ ) St 

& (1..V-1-V/2 -> 'A') & '1' & 
(1..V-20 »> ' ') 


$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


Ar-1 







M^CRO PARAMETERS 


$MAX_STRING_LITERAL '& (1..V-2 -> 'A') & 

Bie following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGMMENT 1 

$CX)UNT_LAST 2_147_483_647 

$DEFAULT_MEM_SIZE 32768 

$DEFAULT_STOR_UNIT 32 

$DEFAULT_SYS_NAME DSP96002 

$DELTA_DOC 2#1.0#E-31 

$ENTRY_ADDRESS 16#400# 

$ENTOY_ADDRESS1 16#401# 

$ENTRY_ADDRESS2 16#402# 

$FIELD_LAST 50 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLOAT_NAME NO_SUCH_TYPE 

$FORM_STRING 

$FORM_S'miNG2 "CAN^K)TJ^TRICT_FII£_CAPACITY" 

$GREATER THAN DURATIOI 

75 000.0 

$C3REATER THAN DURATION BASE LAST 

T31_0T3.0 

$GREATER_THAN_FLCIAT_BASE LAST 

1.I0141E+38 

$GREATER_THAN_FLQAT_SAFE LARGE 

l.TfE38 

A-2 






IV^CRO PARAMETE3tS 


$GREATER THAN SHORT FLOAT SAFE LARGE 
“ “ “ 1.0E308 “ 

$HICai_PRIORITY 23 

$ILLEGAL_EXTERNAL_FILE_NAME1 

\JIODIRECrORY\FILENAME 

$ILLEGAL_EXTERNAL_FILE_NAME2 

THIS_FILEJ«ME_ISjrOO_LC»IG_FOR_My_SYSTEM 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE RAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1 .ADA") 

$INCLUDE_PRAa!A2 PRAGMA INCLUDE ( "B28006F1 .ADA" ) 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE ASSEMBLER 

$LESS_THAN_DURATION -75_000.0 

$LESS THAN DURATION BASE FIRST 
~ ~ “ -lll_073.0 

$LINE_TERMINATOR ASCII.LF 

$LCW_PRIORITY 1 

$MACHINE_CX»E_STATEMENT 

NULL; 

$MACHINE_CC»E_TYPE NO_SUCH_TYPE 

$MANTT«:sa_DOC 31 

$MAX_DIGITS 9 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME NO_SUCH_TYPE_AVAILABLE 

A-3 






MACRO PARAMETERS 


$NAME_LIST 

MC68020, MC88000, i860, DSP96002 

$NAME_SPECIFICATiaJl 

/hoine/val/acvcl_ll/ctest/dev/x2120a 

$NAME_SPECIFICATIC»I2 

/home/val/acvcl_ll/ctest/dev/x2120b 

$NAME_SPECIFICATIC»I3 

/honie/val/acvcl_ll/ctest/dev/x2120c 

$NEG_BASED_INT 

16#F000000E# 

$NEW_MEM_SI2E 

65535 

$NEW_STOR_UNIT 

32 

$NEW_SyS_NAME 

MC88000 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITION 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TyPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

$TICK 

0.000_001 

$VARIABLE_ADDRESS 

16#0320# 

$VARIABLE_ADDRESS1 

16#0321# 

$VARIABLE_ADDRESS2 

16#0322# 

$YOUR_PRAGMA 

INTERFACE_PACKAGE 





APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The conpiler options of this Ada implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to conpiler documentation and 
not to this report. 


LINKER OPTICXOS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 







OVEmEWMOCOMUUaStMaURY 


2J3.^ Ada Cros»^oinpiler (ADA96K) 

The compiler is activated using the command AOA96K. 

Syntax: ADA96K [qualifiers] <sourca-file-naine> 

Parameters: source~flle-naiiie 

Denotes the ffle containing the source text for the 
compilation, if no file type is given, ADA is assumed. 

Qualifiers: The qualifiers and options available are detailed in the 

following table: 






v.Defauft" 

/asmjist 

Generates an assembler fOe for each 
compilation unit The file name is the unit 
name with a suffix "JS" or and the 

file type is ASM . 

True 

/configuration 

file 

Controls various parameters of the list 
file layout biput line length, etc. 

internal 

defaults 

/copy_source 

Saves the source file for the oompiation 
in the Ibrary 

False 

/list 

Generates a list ffie for the compiation. 
The ffle name is that of the source file, 
with file type .US 

False 

/Ibraiy 

Compiles the unit(8) into the given Kbraty 

AOA96K 

UBRARY 

/optimize 

Controls various optbnization options 

False 

/reorder 

Activates the code reordering pass of the 
compiler 

False 

/Suppress^aU 

Disables generation of code tor rurHime 
checKs 

False 

/trace 

Enables generation of trace-back 
information 

False 

Verbose 

Outputs fofonnation during compilation 

False 

txnit 

Generates a cross-reference Isting in the 
list file 

False 


2-5 

















































€dteeh 


ovERvmMNOcoimmsuiauutY 


2^:2 Program Library Manager (PLM96K) 

The interactive program library manager is activated using the command 

PLM96K. 

Syntax: PLM96K C/lihrary>^library_n*me>] 


Qualifiers: /llbrary«<libraxy__nane> 

This optional qualifier sets the current default library for the 
PLM96K. If omitted, the default program library defined by 
the logical name AOA96K_LlBFiARY will be opened. 

Interactive The PLM96K commands and options are detailed in the 
Commands: following table: 



.-..—' 


Create 

Creates a now Ada program suUbrary 
orroatlBxary 

None 

Delete 

Deletes the given unit(s) from the current 
defauR program Ibrary 

None 

Show 

Displays information for the given unR(s) 
from the currem defauR prognun Bbrary 

None 

Exit 

Leaves the program Ibrary manager 

None 

Help 

Dl^lays the PLM96K commands and 
options 

None 

Ubraiy 

Sets the current defauR program Ibrary 
for the PLM96K 

Show the 
current defauR 
Ibrary 

Type 

Displays the Ada source for the given 
unR(s) from the current defauR program 
Ibr^ 

None 


2-6 


























idteeh 


OVERVIEW 4MD COOUND SUUUm 




Extract 

Creates a copy of the stored Ada source 
for the given unit(s) In the eunent 
directory 

Nona 

Import 

inserts an extemafly generated 
compOation unit bo^ into the currant 
default program library 

Nona 

Allocate 

Allocates a unit number for an externally 
generated compilation unit body 

Nona 

Verify 

Checks the consctness of the current 
default program Ibrary 

Nona 


2.3.3 Ada Crass-Unker {LNK96K} 

The cross-linker is activated using the command LNK96K. 

Syntax: LNK96K [qualifiers] <oain-unit-oaae> 

Parameters: main-unit-oaae 

Denotes the main unit for the Ada program to be linked. 
The unit given must be a parameterless procedure. 

Qualifiers: The qualifier and options available are detailed in the 

following table: 


' 


/Obrary 

Specifies the program Arrary where the 
main and its required units will be looked 
for 

AOA96K 

UBRARY 

/map 

Generates a map fS» for the link. The ^ 
name wSI be the main unit name, with 
file type .MAP 

True 


2 - 












































idtech 


ovBmw/M comum suuum 






fptognss 

Outputs information during the link 
process 

False 

flog 

Generates a log file for the link. The log 
file name can be given in the command. 

If not given, the main unit name wiO be 
used, with file type .LOG 

False 

/diroctivas 

Uses the directives in the given 
directives file to guide the link process 

None 

/target 

Specifies the target identifier 

096 (ADS) 

/with_fts 

Includes the required modules from the 
RTS in the link 

False 

/minimaJ_ 

rts 

Includes a minimaL singie^ask RTS in 
the Rnk 

False 

/gen^rta 

Generates the load Ilia for a new fully* 
oorrfigurad RTS executable image 

False 

/trace 

Enables the RTS tracing functions 

False 

/nrit_ 

address 

Specifies the initial memory addresses 
for X, Y and P spaces 

(800,800.400) 

/Iast_ 

address 

Specifies the last memory addresses for 

X. Y, and P spaces 

(7FFE,7FFE 

FFFE) 

/rts.size 

Specifies the maximal size of a fully* 
configured RTS in the (Sfferent memory 
spaces 

(800.200. 

3C00) 

/extemal_ 

module 

Includes the given object fi]e(s) or 
modules from the given object Ibrary in 
the Rnk 

None 

/flags 

Controls various spedai functions of the 
linker 

None 


2-B 

















































APPEM)IX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are; 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type LONG_FLQAT is digits 9 range 

-1.79769313E+308 .. 1.79769313E+308; 

type DURATIOJ is delta 2**-14 range -131072.0 .. 131072.0; 
end STANDARD; 


C-1 








Af^endix B. 

Appendix F of the Ada Reference Manual 


This appendix describes the impiementalion-dependent characteristics of 
the AI'AOA/96K Cross-Compila^on System, as required in the 
Appendix F frame of the Ada Reference Manual (ANSI/MIL-STD-181SA). 


B.1 Implementation-Dependent Pragmas 


The foilowing implementation-dependent pragmas are defined in the 
compiler 


• suppress.all 

• kitorfecejaackage 

• extemal_8ubprogram_nanM 


For detailed information on the use of these pragmas, refer to Section 6.8, 
, tmptementation-Oependent Features.” 


B.2. Implementation-Dependent Attributes 


No implementation-dependent attributes are defined for this version. 


B.3. Package SYSTEM 


The specification of the package SYSTEM: 

package SYSTEM is 

type ADDRESS is naw INTEGER; 

type PRIORITY is range 1 .. 23; 

~ Priority 0 is reserved for the Null Task 
— Priority 24 is reserved for System Tasks 
~ Priorities 25..31 are for interrupts 
type NAME is (MC68020,MC88000,i8SO,OSP96002); 

SYSTEM NAME: constant NAME :« DSP96002; 

STORAGE UNIT: constant :• 32; 

MEMORY SIZE: constant :» 32 • 1024; 

MIN INT: constant -2 147 483 647-1; 

MAX~INT: constant :- 2 147 T83 S47; 

MAX'*OIGITS: constant ft ~ ~ 

MAX'mANTISSA: constant 31; 






APPENOaFOFimABAIBEI^ICEIUlim 


FZHE^OELIA: eonatanC 2.0 ** (-31); 

Tick? eonacanc :> 0.000_001; 

typa ZNTERFACE.UUffGnAGS la (ASSEMBLER, C, RTS) ; 

•od SYSTEM; 


BA Representation Clauses 
B.4.1 Length Clauses 

The following kinds of length dauaes are supported: 

1. Size spedficalion: Psize 

Supported as described in ARM. For scaiar objects residing in the 
frame, the smallest possible size (in complete words) will always be 
chosen by the compiler. 

2. Specification of a coilectkm aizs: Tstoragejrizs 

Spedfies the number of storage units alocatsd to the collection 
associated with access type T. 

, 3. Specification of task sba: Pstoragejdze 

Specifies the number of storage units allocatBd tor each acthralion of 
a task of type T. This size indudes spaos tor the task’s stack, as 
well as some RTS overhead (apprordmatsiy 54 words). 

4. Specification of amaii tor a fbcsd point type: Pamall 


B.4.2. Enumeration Representation Clause 

Enumeration rapresentadon daus e a may apedfy r a prs s e n t aH o ns in the 
range of the pr^fined type INTEGER. 



JUVBBttFCFTHEmaS^RBKEMUUJU. 


B.4 Record Representation Clause 

Rscord represantation clauses are supported as detailed in Section 13.4 
of the ARM. 

B.5 Implementation-Dependent Names for 

Implementation-Dependent Components 

None defined by the compiler. 


B.6 Address Clauses 

Address clauses are supported for objects (variables or constants) and 
task entries (linkage to hardware interrupt); refer to Chapter 16. *AI-TCK 
Target Configuration Kit” 

Address clauses for objects are interpreted as absolute addresses, and 
code is generated using the ORG directive. The compiler does not check 
tor possible overlaps. 


B.7. Unchecked Conversion 

No warning is issued when conversion between objects of different sizes 
is performed. The result of such a conversion is unprsdictabie. 


B.8. Input-Output Packages 

Input-Output packages are si^jpiied with the AI-ADA/96K Cross-Compiler 
System. 

StandardJnput and Standard^output are supported. External files and file 
objects are implementation dependent, a^ therefore are handled as 
specified in the ARM. 



APPBBaFOFTmABA FeBfBKEWmML 


B.8.1. Specification of the Package SequentiaIJO 

with BASIC 10 TnES; 
with I0_EXSEPTI0MS; 
generic'" 

type ELEMENT TYPE ie private; 
package SEQOENfiAL 10 la 

type FILE TYPE £a Halted private; 
type FILEJfODE la (INJFILE, 00T_FILE); 

— File aaaageaent 
procedure CREATE ( 

FILE : in out FILE TYPE; 

MODE : In FILE MODE :• OOT FILE; 

NAME : la STRliiG :« FO^ : in STRING :• ””}; 

procedure OPEN ( 

FILE : In out FILE TYPE; 

MODE : in FILE MODE; 

NAME : In STRIPS; 

FORM : in STRING :• ••); 

procedure CLOSE (FILE : la out FILE TYPE) ; 
procedure DELETE (FILE : In out FUE^TYPE) ; 
procedure RESET ( 

FILE : In out FILE TYPE; 

MODE : in FILE_MODf); 

procedure RESET (FILE : la out FILE TYPE); 
function MODE ' (FILE : in FILE TTPE)'''retum FILE MODE; 
function NAME (FILE : in F^^JTYPE) return STRING; 

function FORM (FILE : in FILE TYPE) return STRING; 
function ISjOPEN(FILE : in FILE^TYPE) return BOOLEAN; 

— Input^and output operations 

procedure READ ( 

FILE : la FILE TYPE; 

ITEM : out ELlSENTjrYPE) ; 

procedure NRITE ( 

FILE t in FILE TYPE; 

ITEM ! in ELEriEkT TYPE); 
function END OF FILE' ( FILE : in FILE_TYPE) 
return lOOliEAN; ~ 


»4 





aitBch 


APPENOaFOFTmAMltB&BieEIUMUAL 


— •xcttptlons 

STATUS ERROR : •xception renamsa 
10 &C:£PTIONS.STATUS__BRROR; 

MODE llRROR : Mcceptlon rananes 
Id* EXCEPTIONS.M0DE_ERR0R; 

NARE error : •zcaption ranaiMs 
10 e3&:£PTI0NS.NAME_ERR0R; 

DSE error : •xception renames 
10 EXCEPTIONS.0SE_ERR0R; 

DEVI(^ ERROR : exee^ion renames 

10 Exceptions. 0Evics_ERR0R; 

END filROR : exception renames 
f& EXCEPTIONS.END_ERROR;- 
DATA*I:RR0R : exception renames 
id^EXCEPTIONS.DATA_ERROR; 

private 

type PILE^TTPE is new BASIC_IO_TYPES.FILE_TYPE; 
end SEQUENTIAL 10; 


B.8.2. SpecIflcaUon for Package Direct Input-Output 

with BASIC 10 TTPES; 
with IO_EX^flOMS; 
generic** 

type ELEMENT TYPE is private; 
package DIRECT*10 is 
- type FILE T!^E is llsiited private; 

type FILE“M0DE is (IN_FILE, INODT_FILE, OUT FILE); 
type COUI^ is range OT. INTEGER'LAST; ~ 

siibtype POSITIVE_COONT is COUNT range 1. .COUNT'LAST; 
— File management 

procedure CREATE ( 

FI1£ : in out FILE TYPE; 

MODE : in FILE MODf :• INOUT FILE; 

NAME : in STRlIfe :» ~ 

FORM : in STRING :• "”); 

procedure OPEN ( 

FILE : in out FILE TYPE; 

MODE : in FILE MODE; 

NAME ; in STRlHS; 

FORM : in STRING 

procedure CLOSE (FILE : in out FILE TYPE); 
procedure DELETE (FILE : in out FIX£_TYPE); 
procedure RESET ( *~ 



t t . 


*pmmFOFTmjmvBB(BicswmiL 


FILE : in oat FILETYPE; 

MODE : In FILEJfOOE); 

procodur* BESET (FILE : in ont FII£ TYPE); 
function MODE (FILE : In FILE TYPE}'~xoturn FILE MODE; 
function MAME (FILE : in Fl£]^ TYPE) zntuxn StiCiNG; 

function FORM (FILE : in FILE~TYPE) ntuxn STRING; 

function IS_OPEM(FILE : in FIUETTYPE) xnturn BOOLEAN; 

— input and output opnrationa 

procedure READ ( 

FILE : in FILE TYPE; 

ITEM : out ELEi&NT TYPE; 

FROM : in POSITIVE^COONT); 

procedure READ ( 

FILE : in FILE_TYPE; 

ITEM : out BLEMENTJYYPE); 

procedure NRITE ( 

FILE : in FILE TYPE; 

ITEM : in ELEl&lT TYPE; 

TO : in POSITIVEjraONT); 

procedure NRITE ( 

FILE t in FILE TYPE; 

ITEM : in ELEldaiT_TYPE); 

procedure SET INDEX ( 

FILE : in ftLE TYPE; 

TO : in POSlIlVE_COONT) ; 

function INDEX( FILE : in FILE TYPE) return 
POSITIVE_OOOHT; " 

function SIZE (FILE : in FILE TYPE) return COUNT; 
function END OF FIU!(FILB : in FILE_TYPE) 
return BO^£A; 

exceptions 

STATUS ERROR : exception renaaes 
10 SCCEPTIONS.STATUS_XRROR; 

MODE'IrrOR t exceptim renama 
l<rEXCEPTIONS.MODE ERR(»; 

MAME*KrROR : exception renaaes 
lO*EXCEPTIONS.NAME ERROR; 

USE fiROR : exception renaaws 
R> EXCEPTIONS.USE ERROR; 





APPBaXFOFTXMA A^ERBICf JUNU4L 


DEVICE ERROR : •Jcceptlon renames 
10 ekCEPTIONS.OEVICE_ERROR; 

END E^ROR : emceptlM renames 
ft EXCEPTIONS.END_ERR0R; 

OATA*i;RROR : exception renames 
1<5^EXCEPTI0NS .DATAJERROR; 

private 

type FILE_TTPE is new BASIC_IO_TYPES-FILE_TYPE; 
end DIRECT 10; 


B.8^. Specification of Package Text Input-Output 

with BASIC 10 TYPES; 

with 10 EX^TIONS; 

pacJcage^'TEXT 10 is 

type FILE TYFE la limited private; 

type FILE'MODE la (IN FILE, OOT FILE); 

type COONT la range 0*",. INTEGER'LAST; 

aubtype P0SITIVE_C00NT la COUNT range 1 .. COUNT'LAST; 

UNBOUNDED: constant COUNT:* 0; —> line and page length 
subtype FIELD la INTEGER range 0 .. 35; 
subtype NUMBER BASE la INTEGER range 2 .. 16; 
type TYPE_SET Ta (LONER_CASE, UPPER_CASE}; 

— File Manageaient 

procedure CREATE ( 

FII£ : In out FILE TYPE; 

MODE : In FILE_M0D£ OUT FILE; 

NAME : in STRING i- 
FORM : in STRING —); 

procedure OPEN ( 

FIX£ : In out FILE TYPE; 

MODE : in FILE MODS; 

NAME : in STRBIG; 

FORM : In STRING 

procedure CLOSE (FILE : in out FILE__TYPE); 
procedure DELETE (FILE : in out FILE^TYPE); 
procedure RESET ( ^ 

FILE t in out FILE TYPE; 

MODE : In FILE MODR); 


B-7 





aUaeh 


JUVBaXFOPViEAMRBStBICeUAMUAL 


procedure RESET (FILE : in out FILE TXFE); 

function MODE (FILE : in FILE TXPS) return 

" FILE MODE 

function NAME (FILE : In FILE TTFE) return sTrimg, 

function FORM (FILE : in FILE^TYFE) return STRING, 

function ISjOFEN(FILE : in FUfTYFE) return BOOLEAN, 

— Control of default input and output files 

procedure SET_INPDT (FILE : in FILEJTYPE) ; 
procedtire SET OUTPOT (FILE : in FILE~TYPE); 
function STAHbARD_I NPD T return FILE^^TYPE; 

function STANOARO''OOTPDT return FILEJTYPE; 

function CURRENT TiIPDT return FILE-TYPE; 

function CURRENT JJOTPOT return FILEJTYPE; 

■— specification of line and page lengths 

procedure SET LINE LENGTH ( 

FILE : in FIXE rffE; 

TO s in COUNT); 

procedure SET LINE LENGTH (TO : in COUNT); 

.procedure 3ET“PAGE“LENGTH ( 

FILE r.in FILE TYfE; 

TO s in COUNT); 

procedure SET PAGE LENGTH (TO : in COUNT); 
function LlNE_LENStH (FILE : in FILE TYPE) 

return COUNT; — 

function LINE_LENGTH return COUNT; 
function PAGE LENGTH (FILE : in FILE TYPE) 
return COUiiT; “ 

function PAGE_LENGTH return COUNT; 

— Column, Line, and Page Control 

procedure NEN LINE ( 

FILE : in-piLE TYPE; 

SPACING : in POSITIVE^COUNT :• 1); 

procedure NEW_LINE (SPACING : in POSITIVE_COUMT :» 1); 

procedure SKIP LINE ( 

FILE : in TiLE TYPE; 

SPACING ; in POSITiVE_COUNT 1); 

procedure SKIP LINE (SPACING : in POSITIVE COUNT 

” 1 ); 

function END OF LINE (FILE : in FILE TYPE) 
return BOOLESIN;- 


B-e 





APPBaXFaPWE/UU RffOBKEMAmUL 


function END_^OF_LINE return BOOLEAN; 

procedure NEM_PAGE (FILE : in FILE_'mE); 
procedure 11BN~PAGE ~ ; 

procedure SKIPJPAGE (FILE : in FILE_TyPE); 
procedure SRIP^PAOE ~ ; 

function END OF_PAGE (FILE : in FILE_TfPE) 
return BOOLEAN;" 

function END_OF_PAGE return BOOLEAN; 

ftuictlon END OF FILE (FILE : in FILE TIPE) 
return B00LESN;~ 

function END_0F_FILE return BOOLEAN; 

procedure SET COL (FILE : In FILE TYPE; 

(TO s in ■POSITIVE_COONT); “ 

procedure SET COL (TO : in POSITIVE OOONT); 
procedure SET'LINE (FILE : in FILE TYPE; 

(TO : in"POSITIVEJ»ONT); 

procedure SET LINE (TO : in POSITIVE COONT); 
function COL (FILE : in FILE TIPS) 

return POSITIVE_COONT; ” 

function OOL return POSITIVE_CODNT; 

function LINE (FILE : in FILE TYPE) 
return POSITIVE COONT; ~ 

function LINE “return P0SIT1VE_C0DNT; 

function PAGE (FILE : in FILE TYPE) 
return POSITIVE COONT; ” 

function PAGE “return POSITIVE^COONT; 

Chermeter Input-Output 

procedure GET '( 

FILE : in FILE TYPE; 

ITEM : out CHARACTER); 

procedure GET (ITEM : out CHARACTER); 

procedure POT ( 

FILE : in FILE TYPE; 

ITEM : in CBARSiCTER); 
procedure POT (ITEM : in CHARACTER); 







APPEMOaFOfWEJm FEFBIBICEIIAIlUAL 


— String Input-Output 

procudur* <ST ( 
rZLE : in FILE TYPE; 

ITEM : out STB^G); 

proeodnr* GET (ITEM : out STRIHG); 

proeoduro POT ( 

FILE : In FILE_TYPE; 

ITEM : In STRING); 

proeoduro POT (ITEM : in STRING); 
proeoduro (ST LINE ( 

FILE : In FIIe TYPE; 

ITEM : out STRSIG; 

LAST : out MATORAL); 

proeoduro GET LINE ( 

ITEM : out S'^RING; 

LAST : out NATORAL); 

proeoduro POT LINE ( 

FILE : in FflE TYPE; 

ITEM : in STRlfiS); 

proeoduro POT__LINE (ITEM : in STRING); 

— (Sonoric Paejcngo for Input-Output of Intogor Typos 
gonorie 

typo NOM is rnngo O; 

paOugo INTE(SR 10 ia 
DEFAULT WIDTH 1 FIELD :• NOM'WIDTH; 

DEFAOLTJBASE : NOMBER_BASE 10; 

proeoduro (ST ( 

FILE : in FILE_TYPE; 

ITBf : out NOmT 
WIDTH : in FIELD x- 0); 

pr oeod uro (ST ( 

ITEM t out NOM; 

WIDTH : in FIELD 0); 



MPPBOXFCFIHEAOAIBatBICEIUHm 


proe«dur« POT ( 

PILE I in PILEJPYPE; 

ITEM : In MOM; 

WIDTH : In FIELD DEFEOLT WIDTH; 

BASE : in NOMBER_BASE dEFADLT_BASE) ; 

proendur* FOT ( 

ITEM : In NDM; 

WIDTH : in FIELD DEFAULT WIDTH; 

BASE : in NOMBER_BASE dEFAOLT_BASE) ; 

procndurn GET ( 

FRm : in STRING; 

ITEM t ont MUM; 

LAST : oat POSITIVE); 

proeodoro PUT ( 

TO : oat STRING; 

ITEM : in HUM; 

BASE : in NUMB£R_BASE :* DEFADLT_BASE) ; 
ond IMTEGER_IO; 

~ Gonorle Pnekagoa for Input-Output of Rani Typos 
gonorle 

typo HUM is digits o; 
psckogo. FL(iAT_IO is 

DEFAULT FORE : FIELD :» 2; 

OEFAULT'AFT : FIELD :» HUM'digits - 1; 

DEFAOLT'EXP : FIELD :» 3; 

proeodoro GET ( 

FILE < in FILE_TIPE; 

ITEM t oat NUM; 

WIDTH : la FIELD :• 0); 

pr ocod uro GET < 

ITEM t ont HUM; 

WIDTH : in FIELD 0); 

procoduro PUT < 

FILE t in FILE TYPE; 

ITEM : in NUM;'~ 

FORE : in FIELD DEFAULT FORE; 

AFT : in FIELD :« OEFAOLT~AFT; 

EXP i in FIELD :• OEFAULTHEXP); 





I 


iPPBoatFOfimm REFB&cEwtm. 


proeadur* POT ( 

ITS! : in NDM; 

FORE : In FIELD DEFAULT FORE; 
AFT : In FIELD :• DEFACLT^AFT; 
EXP : in FIELD :« DBFADLTJEXP) ; 

proeadura GET ( 

FROH : in STRING; 

ITEM : out MOM; 

LAST : out POSITIVE); 

proeadura POT (TO : out STRING; 

ITEM : in MOM; 

AFT : in FIELD DEFAOLT AFT; 

EXP t in FIELD OEFAOLTJBXP) ; 

and FLQAT_IO; 

ganarlc 

typa MOM is dalts O; 
paeksga FIXED^IO is 

DEFAOLT FOSE : FIELD :• MOM'FORE; 
OEFAOLT^AFT t FIELD :• MOM'AFT; 
OEFAOLTJBXP t FIELD 0; 
proea dura GET (FILE : in FILE_TTPE; 
ITEM : out MOM; ~ 

WIDTH : in FIELD 0); 

proeadura GET ( 

ITBf t out MOM; 

WIDTH : in FIELD :• 0} ; 


proeadura 

POT 

( 


FILE 

a 

a 

in 

FILE TTPE; 

ITEM 

a 

a 

in 

MOM; 


FORE 

a 

a 

in 

FIELD 

:• DEFADLT_FORE; 

ATT- 

1 

in 

FIELD 

DEFAOLT~AFT; 

EXP 

T 

in FIELD 

:• OEFAOLTJEXP); 


proeadura POT (ITEM : in MOM; 

FORE : in FIELD :• DEFAULT FORE; 
AFT t in FIELD :» DEFA0LT~’UT; 
EXP I in FIELD :• OEFAOLTJEXP); 

proeadura GET ( 

FROM : in STRING; 

ITEM : out MOM; 

LAST t out POSITIVE); 


B-12 






JtfPBaXFOrTHEAOA RSFBtBKe/UmU. 


procAdim POT ( 

TO : oat STRING; 

XTBf : la ROM; 

AFT t. tn FIELD OEFAOLT AFT; 

EXP t la FIELD :• DEFADLTJBXP); 

•ad nXKDJtOt 

~ Gaaarle paeJcag* for lapat-Output of Eaumratioa 
Typo* 

9 *o«ric 

typo ENQM is (o); 
psekago EMiaiERATIOH 10 is 
OEFAOLT NIDTH t fTELO 0; 

DEFAOLT^SETTING : TYPE SET OPPER CASE; 

proeodur* GET ( ~ 

FILE : la Fn£ TYPE; 

ITEM : oat BNOH); 

proeodoro GET (ITEN : oat ENOM); 
proeodoro POT ( 

FILE t la FILE_TYPE; 

ITEM : la SNOMT 

in3)TB : la FIELD :« OEFAOLT WIDTH; 

SET : la TYPE_SET :• D^A0LT_SETTI11G); 

procador* POT < 

ITEM 1 la EHOM; 

WIDTH : la FIELD :« OEFAOLT WIDTH; 

SET : la TYPE_SET :« DEFAOLT'sETTIHG); 

precodor* GET (FROM : la STRING; 

ITEM : oat ENOM; 

LAST t oat POSITIVE); 

procodoro POT (TO : out STRING; 

ITfif : la ENOM; 

SET : la TYPE_SET DEFAOLT^SETTING); 

•ad ENOMERAIION 10; 


B-13 





mBaxFOFJHEjmieBiBiceiuHuu. 


~ Bxcaptioaa 

STATUS ERROR i ascaptlon x*naMa 
10 fitCERTZOMS.STATUS_BRROR» 

• MODE *IrROR t axeaptiM vanaoaa 
Id*EXCEPTIONS.MODE ERROR; 

EAME'teROR }* ase<^>tlon ranaiMa 
I<rEXCEPTIONS.mME ERROR; 

USE Aror i axeaptlon ganaiaaa 

EXCEPTIONS.OSE^ERROR; 

DEVZA error : asea^ion ranaaaa 
10 ACEPTiaMS.OEVICE_BRROR; 

END ArOR t ascaptlra ranaaaa 

G> EXCSeTXMS.BXDjaaCSLt 
OAXA~Aror i axea^loa ranaaaa 
fb EXCEPTIONS.DATA ERROR; 

ItATOOf ERROR : aseaptfM ranaaaa 
ZO 3 XCEPTIONS .LATOOTJCRROR; 

prlvata 

typa riLE^TYPE la naw BASIC_IO_TYPES.PILE_TrPE; 
and TEXT 10; 


B-14 




