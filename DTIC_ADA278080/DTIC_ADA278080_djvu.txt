AD-A278 080 ntationpage SSJr" 

o « »« n g« t hour par raaponia. including lha tima tor tawtonmg inatruoiiana, aaan^Vig axia'ing data aouieaa galhaiing 
nalion. Sand oommanto racaiding thia buidan aaUmtoa or any olhar aapad o* Ihia oolae i ian o< intormation. including 
arvioa. Oiradoralator totomAdionOparaliortt andHapcrta. 121S JaHatacn OaviaHjghanv'auila 1204, Arlington. VA 
22202-4302, and to lha OHioa ol totormaticn and Haguiawry mtaHa, Offica ol Managa m am and Budgal, Waahinglon, DC 20603. 



uJ ■ d V'. ^ ~ ^ ^ ^ S 0 r-, A r ^ 


7. PERFORMING ORGANIZATION NAME(S) AND ^ 

P^doK i,j,r,Gri •po.ril.Vy 

.Asp/bcLL ; TO. 

Af-'O , lP-- ^ 

8. PERFORMING 

ORGANIZATION 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ^ 

Ada Joint Program Office 

The Pentagon, Rm 3E118 

Washington. DC 20301-3080 

10. SPONSORING/MONITORING 

AGENCY 

11. SUPPLEMENTARY 


12a. DISTRIBUTION/AVAILABILITY 



(Maximum 200 


pLC f^Jtfuy^cK C lusA’r 

j \f f\ y o I 00 i ^0 ) ( 1‘^'n'^Or I/O b- J*.] 

doV 1 f 0 o I J tJ I' •ur, '/t'4 A C'h Ic P 




[/ ‘^-'1 z' 0- 


TIP 





17. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. SECUR 

UNCLASSIFIED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


15. NUMBER OF 


16. PRICE 


20, LIMITATION OF 

UNCLASSIFIED 


ndard Forrrr298, (Rev. 
Prescribed by ANSI Std. 









































AVF Control Number; AVF-VSR-582.0394 
Date VSR Conpleted: March 14, 1994 

94-02-14-TLD 


Ada O^IPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number; 940305W1.11335 
TLD Systems, Ltd. 

TLD Comanche VAVi960 Ada Conpiler System, Version 4.1.1 
VAX Cluster under VMS 5.5 -> 

Tronix JIAI^ Execution Vehicle (i960MX) 
under TLD Real Time Executive, Version 4.1.1 


(Final) 


Prepared By; 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


[Accesion for j ] 

NTIS CRAW 

B!i 

OTIC TAB 

□ 

Unannounced 

Q 

Justification 


8y^<LC Vm or\ 


Distribution/ 

Availability 

Codes 


Avail and/or 
O'st Special 




BTIC QTJ/vLriT KjOPECTED 3 


94-10998 

llliliiiii 94 4 11 114 





Certificate Information 


The following Ada inqplementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 5 March 1994. 


Compiler Name and Version: TLD Comanche VAX/i960 Ada Compiler System, 

Version 4.1.1 


Host Ccmputer System: DEC Local Area Network VAX Cluster (conprising 

2 HicroVAX 3100 Model 90 machines) (VMS 5.5) 


Target Computer System: Tronix JIAM5 Execution Vehicle (i960MX) 

under TLD Real Time Executive (TLDrtx) 
(Domain Configuration), Version 4.1.1 

Customer Agreement Number: 94-02-14-TLD 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940305W1.11335 
is awarded to TLD Systems, Ltd. TSiis certificate expires two years after 
MIL-STD-1815B is approved by ANSI. 


Ihis report has been reviewed and is approved. 


»' J_i-J__— J s T ^ 


Ada Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 
Wright-Patterson AFB OH 




45433-5707 


Ada v^ida^piT Organization 

Director, ^OQpnter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
David R. Basel 
Deputy Director 

Defense information Systems Agency, 
Center for Information Management 




DECLARATION OF CONFORMANCE 


Customer: TU3 Systems, Ltd. 

Ada Validation Facility: 645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1.11 

Ada lo^lementation: 

Coa^iler Name and Version: TLD Comanche VAX/i960 Ada 

CoB^iler System, Version 4.1.1 

Digital Local Area Network VAX Cluster 
executing on (2) MicroVAX 3100 Model 90 
under VAX/VMS 5.5. 

Trcmix JZAWG Execution Vehicle (i960MX) 
running TLD Real Time Executive (TLDrtx), 
(Domain Configuration), Version 4.1.1 


Host Cooputer System: 


Target Ccm^uter System: 


Customer's Declaration 


I, the undersigned, representing TLD Systems, Ltd., declare that TLD 
Systems, Ltd. has no knowledge of deliberate deviations from the Ada 
Leuiguage Standard ANSZ/MIL-STD-1815A in the inplementation listed in this 
declaration executing in the default mode. The certificates shall be 
awarded in TLD Systems, Ltd.'s corporate name. 



Date: 10 February 1994 


vax/i960/tronix 


PAGE 1 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OP THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITODRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

f 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i 
















CHAPTER 1 


INTRODUCTION 


The Ada implementation described edaove was tested according to the Ada 
Validation Procedures [Pro921 against the Ada Standard [Ada831 using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to (Pro92]. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the conputers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate a^ conplete, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5265 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INraCOUCTION 


1.2 REFERENCES 

[Ada83] Reference Metnual for the Ada Proqramminq Lanquaqe, 
ANSI/MIL-STO-18i^, February 1983 and" ISO 8552-^87. 

[Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

IUG89J Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coiipliance of Ada inplementations is tested by means of the ACVC. Ihe ACVC 
contains a collection of test programs structured into six test classes; A, 
B, C, D, E, and L. The first letter of a test name identifies the class*to 
' \diich it belongs. Class A, C, D, and E tests are executable. Class B and 

class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vdien they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK__FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat scane compiler 
optimizations allowed by the Ada standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_F1LE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
St£uidard. The operation of REPORT euid CHECK_FILE is checked by a set of 
executcdale tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada i^leioentation correctly detects violation of 
the Ada Stemdard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In scane tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



INTKXJUCTIGN 


For each Ada inplementation, a customized test suite is produced ^ the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITICW OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada inplementations, 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation svnnmary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program ‘ guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guid^ce for operations of the Ada certification system. 

Organization 
(AVD) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses comonon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stauid-alone unit or may consist of several inter-connected 
units. 


1-3 




IOTRC3DUCTICN 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Custcmter An individual or corporate entity vdio enters into an agreement 

with an AVF vrtiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada irnplementation for which 
validation status is realized. 

Host Computer A computer system \diere Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives foiand to be 
test irrelevant for the given Ada inplementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<s\absection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predcxninantly software, but partial or complete 
hardware in?)lementations are possible. 

Target A computer system v^ere the executable form of Ada programs 

Conpiter are executed. 

System 

Validated Ada The compiler of a validated Ada in?)lementation. 

Conpiler 

Validated Ada An Ada in(>lementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro92]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 





CHAPTER 2 


IHPLEMENCATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available frcan either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E2e005C 

B28006C 

C35507L 

C35507N 

C35507O 

C35508M 

C35508N 

C35702A 

C43004A 

C45114A 

C45346A 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

C83026A 

B83026B 

ce304lA 

C97116A 

C98003B 

BA2011A 

CC1223A 

BC1226A 

CC1226B 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A41E 

CD2A87A 

CD2B15C 

CD4022D 

CD4024B 

CD4024C 

CD5111A 

CD7004C 

ED7005D 

AD7201A 

AD7201E 

CD7204B 

CD9005A 

CD9005B 

CDA201E 

CE2119B 

CE2205B 

CE2405A 

CE3411B 

CE3412B 

CE3607B 

CE3814A 

CE3902B 



C32203A 

C34006D 

C35507K 

C35507P 

C35508I 

C35508J 

C35702B 

C37310A 

B41308B 

C45612A 

C45612B 

C45612C 

B49008B 

A54B02A 

C55B06A 

B83022H 

B83025B 

B83025D 

B85001L 

C86001F 

C94021A 

CB7001A 

CB7001B 

CB7004A 

BC3009B 

BD1B02B 

BD1B06A 

CD2A23E 

CD2A32A 

CD2A41A 

BD3006A 

BD4008A 

CD4022A 

CD4024D 

CD4031A 

CD4051D 

CD7005E 

AD7006A 

CD7006E 

AD7206A 

BD8002A 

BD8004C 

CE2107I 

CE2117A 

CE2117B 

CE3111C 

CE3116A 

CE3118A 

CE3607C 

CE3607D 

CE3812A 


2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives v^ich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLENENIATZON OePDa»NC:ic.S 


Itie following 201 tests heve floating-point type declaraticxis requiring 
more digits than SYSTEM.MAXJDIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

C24113H..K (4 tests) have a line length greater than the maximum allowed 
line length of 120 for this inf>lementation. 

The following 20 tests check for the predefined type LGNG_INTEXXR; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35404D, C45231D, B86001X, C86006E, euxl CD7101G check for a predefined 
integer type with a name other than INTEGER, LCNG_INTEGER, or 
SiK}RT_INTEGER; for this implementation, there is no such type. 

C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLOAT; for this inplementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLQftT, LCNG_FLQftT, or 5HQRT__FLQ)^T; for this 
inplementation, there is no such type. ~~ 

C45531M..P and C45532H..P (8 tests) check fixed-point operations for 
types that require a SYSTDI.MAXJMANTZSSA of 47 or greater; for this 
inplementation, HAX_MANTISSA is less than 47. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain length clauses 
that specify values for 'SHALL that are not powers of two or ten; this 
inqplementation does not support such values for 'SMALL. 

C45624A. .B (2 tests) check that the proper exception is raised if 
HACHINEjDVERFLOMS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHiNEjDVERFLOWS is TRUE. 

D64005F..G (2) tests use 10 levels of recursive procedure calls nesting; 
this level of nesting for procedure calls exceeds the capacity of the 
compiler. 


2-2 




IMPLENENmTIQN OEPE24DENCZES 


B6600iy uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA3004E..F (2 tests) check that a program will execute when an optional 
body of one of its library packages is made obsolete; this 
implementation introduces additional dependences of the package 
declaration on its body as allowed by LRM 10.3(8), and thus the library 
unit is also made obsolete. (See Section 2.3.) 

LA5007S..T (2 tests) check that a program cannot execute if a needed 
library procedure is made obsolete by the recompilation of a library 
unit nam^ in that procedure's context clause; this implementation 
determines that the recompiled unit's specification did not change, and 
so it does not make the dependent procedure obsolete. (See Section 
2.3.) 

CD1009C checks v^ether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A53A checks operations of a fixed-point type for which a length 
clause specifies a power-of-ten lYPE'SMALL; this implementation does not 
support decimal 'SMALLs. (See section 2.3.) 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), emd CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

Ihe following 264 tests check operations on sequential, text, and direct 
access files; this implementation does not support external files (See 
Section 2.3 regarding CE3413B): 


CE2102A. .C 

(3) 

CE2102G..H 

(2) 

C:E2102K 


(3:2102N. .Y 

(12) 

C:E2103C..D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

C3:2106A. .B 

(2) 

C:E2107A. .h 

(8) 

CE2107L 


CE2108A..H 

(8) 

CE2109A..C 

(3) 

CE2110A. .D 

(4) 

CE2111A..I 

(9) 

CE2115A. .B 

(2) 

C32120A. .B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F. .N 

(9) 

C32203A 


CE2204A. .D 

(4) 

CE2205A 


CE2206A 


(32208B 


CE2401A. .C 

(3) 

EE2401O 


CE2401E..F 

(2) 

EE2401G 


CE2401H. .L 

(5) 

CE2403A 


CE2404A. .B 

(2) 

C3:2405B 


CE2406A 


C:E2407A..B 

(2) 

CE2408A..B 

(2) 

C3;2409A. .B 

(2) 

CE2410A. .B 

(2) 

CE2411A 


(3:3102a..C 

(3) 

CE3102F. .H 

(3) 

CE3102J..K 

(2) 

CE3103A 


(3:3104a..C 

(3) 

C3:3106A. .B 

(2) 

CE3107B 


CE3108A. .B 

(2) 

(3:3109A 


C3:3110A 


CE3111A. .B 

(2) 

CE3111D..E 

(2) 

(3:3112A. .D 

(4) 

CE3114A..B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


c:e3208a 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


C33305A 


C3:3401A 


C:E3402A 


EE3402B 


CE3402C. .D 

(2) 

C3:3403A. .C 

(3) 

c:e3403e..f 

(2) 

CE3404B..D 

(3) 

<3:3405A 


EE3405B 


CE3405C..D 

(2) 

CT3406A. .D 

(4) 

C3:3407A..C 

(3) 

CE3408A. .C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


C3:3410A 


CE3410C..E 

(3) 

EE3410F 


(3:3411A 


CE3411C 



2-3 



IHPLENE3mV.TIGM DEPENDENCIES 


CE3412A 
CE3602A..D (4) 
C:E3606A..B (2) 
CE3706D 
CE3806A..B (2) 
CE3905A..C (3) 


EE3412C 
CE3603A 
CE3704A..F (6) 
CE3706F..G (2) 
CE3806D..E (2) 
CE3905L 


CE3413A..C (3) 
CE3604A..B (2) 
CE3704M..O (3) 
CE3804A..P (16) 
CE3806G..H (2) 
CE3906A..C (3) 


CE3414A 
CE3605A..E (5) 
CE3705A..E (5) 
CE3805A..B (2) 
CE3904A..B (2) 
CE3906E..F (2) 


CE2103A, CE2103B, and CE3107A use an illegal file name in an atteinpt to 
create a file and expect NAME_EBROR to be raised; this inqplementation 
does not sxjpport external files and so raises USE ERROR. (See section 
2.3.) 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 63 tests. 

Note: CD2A81A is subject to two, distinct modifications as described belisw 
.(the test name is marked with an asterisk). 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22005Z B24009A B25002A B26005A B44004D B59001E 
B73004B B83033B BA1020C BA1020F BAllOlC BA2001E 
BA3006A BA3013A 

C34009D and C34009J were graded passed by Evaluation Modification as directed 
by the AVO. These tests check that 'SIZE for a composite type is greater 
than or equal to the sum of its cosponents' 'SIZE values; txit this issue is 
addressed by AI-00825, which has not been considered; there is not an obvious 
interpretation. This inplementation represents array components vdiose length 
depends on a discriminant with a default value by implicit pointers into the 
heap space; thus, the 'SIZE of such a record type might be less than the sum 
of its components 'SIZES, since the size of the heap space that is used ty 
the varying-length array components is not counted as part of the 'SIZE of 
the record type. These tests were graded passed given that the Report.Resiilt 
output was "FAILED" and the only Report.Failed output was "INCX)RRECT 
'BASE'SIZE", from line 195 in C34009D and line 193 in C34009J. 

C64104A, CB2006A, CB4002A, and CC1311B were graded passed l9y Processing 
Modification as directed by the AVO. These tests make various checks that 
CXX4STRAINT ERROR is raised for certain operations when the resultant values 
lie outsiHe of the range of the subtype. However, in many of the particular 
checks that these tests make, the exception-raising operation may be avoided 
as per LRM 11.6(7) by optimization that removes the operation if its only 
possible effect is to raise an exception (e.g., an assignment to a variable 
that is not later referenced). In the list below, beside the name of each 
affected test is given the line nxanber of the check that is skipped (with a 
relevant associated operation's line number noted in parenthesis). These 
tests were processed both with and without optimization; the tests reported a 
passed result without optimization; with optimization, the checks cited below 


2-4 









implementation DEPEra^E^lES 


were skij^ped and a corresponding call to REPORT.FAILED was made. 

C64104A 174 (copy back of parameter value) 

CB2006A 36 

CB4002A 65 (initialization @ 54) 

CC1311B 55 (default parameter value @ 36) 

C98001C was graded passed by Processing Modification as directed by the AVO. 
This test checks that a non-static argument to pragma Priority is not 
evaluated; it uses the pragma for the main program and within a task unit in 
the body of this program. This inplementation evaluates the argument when 
the pragma appears in a task unit (at line 27) only; this behavior is in 
conformity to the draft revised Ada standard (a non-static argument will be 
illegal for a main program). (The AVO allows implementers to adopt Ada9X 
rules for Ada83 features so as to encourage the transition to the revised 
rules.) The test was processed with and without line 27 being commented out, 
and it reported "PASSED" and "FAILED" respectively. 

CA3004E..F (2 tests) were graded inapplicable by Evaluation Modification as 

directed by the AVO. These tests check that a program will execute when an 

optional body of one of its library packages is made obsolete. This 

implementation, for optimization purposes, compiles all compilation units of 
a compilation into a single object module with a single set of control 
sections, collectively pooled constants, with inproved addressing. As a 
consequence, the optional package body of these tests and its corresponding 
library unit have a mutual dependence, and thus the library unit is also made 
obsolete. • This inplementation-generated dependence is allowed by LRM 

10.3(8). 

LA5007S..T (2 tests) were graded inapplicable by Evaliiation Modification as 

directed by the AVO. These tests check that a program cannot execute if a 
needed library procedure is made obsolete by the recompilation of a library 
;init named in that procedure's context clause. This implementation 

detennines that the reconpiled unit's specification did not change, and so it 
does not make the dependent procedure obsolete; the program executes, calling 
Report.Failed. The AVO ruled that this behavior is acceptable, in light of 
the intent for the revised Ada standard to permit such acccmomodating 
reconpilation; further deliberation the AVO and ARC will determine whether 
these (and many related) tests will be withdrawn. 

The tests below were graded passed by Test Modification as directed by the 
AVO. These tests all use one of the generic support procedures, Length^Check 
or En\jm_Check (in support files LENCHECK.ADA & ENUMCHEK.ADA), vhich use the 
generic procedure UncheckedjConversion. This inplementation rejects 
instantiations of unchecked_Conversion with array types that have non-static 
index ranges. The AVO ruled that since this issue was not addressed by 
AI-00590, vhich addresses required support for UncheckedjConversion, and 
since AI-00590 is considered not binding under ACVC 1.11, the support 
procedures could be modified to remove the use of Unchecked_Conversion. 
Lines 40..43, 50, and 56..58 in LENCHECK and lines 42, 43, and 58..63 in 
ENUMCHEK were commented out. 

CD1009A CD1009I CD1009M CD1009V CD1009W CD1C03A 

CD1C04D CD2A21A..C CD2A22J CD2A23A. .B CD2A24A CD2A31A..C 








ZMPLEMENTATIGN DEPQ1DDK:IES 


*CD2A81A CD3014C CD3014F CD3015C CD3015E..F CD3015H 

CD3015K CD3022A CD4061A 

*CD2A81A, CD2A81B, CD2A81E, CD2A83A, CD2A83B, CD2A83C, and CD2A83E were 
graded passed by Test Modification as directed by the AVO. These tests check 
that operations of an access type are not affected if a 'SIZE clause is given 
for the type; but the standard customization of the ACVC allows only a single 
size for access types. This inplementation uses a larger size for access 
types v^ose designated object is of type STTUNG. The tests were modified by 
incrementing the specified size $ACC_SIZE with '-t- 64'. 

CD2A53A was graded inapplicable by Evalviation Modification as directed by the 
AVO. The test contains a specification of a power-of-10 value as 'SMALL for 
a fixed-point type. The AVO ruled that, under ACVC 1.11, support of decimal 
'SMALLS may be omitted. 

CE2103A, CE2103B, and CE3107A were graded inapplicable by Evaluation 
Modification as directed by the AVO. The tests abort with an unhandled 
exception vhen USE ERROR is raised on the attempt to create an external file. 
This is acceptable behavior because this inplementation does not suf^rt 
external files (cf. AI-00332). 

CE3413B was graded inapplicable by Evcdviation Modification as directed by the 
AVO. This test includes the expression "COUNT'LAST > 150000", v^ich raises 
CQNSTRAINT_CRROR on the implicit conversion of the integer literal to type 
COUNT since COUNT'LAST » 32,767; there is no handler for this exception, so 
test execution is terminated. The AVO ruled that this behavior was 
acceptable; the AVO ruled that the test be graded inapplicable because it 
checks certain file operations and this inplementation does not support 
external files. 

Many of the Class A and Class C (executable) test files were combined into 
single procedures ("bundles") by the AVF, according to information svpplied 
by the customer and guidance from the AVO. This bundling was done in order 
to reduce the processing time—compiling, linking, and downloading to the 
target. For each test that was bundled, its context clauses for packages 
Report and (if present) SYSTEM were commented out, and the modified test was 
inserted into the declarative part of a block statement in the loundle. The 
general structure of each bundle was: 

WITH REPORT, SYSTEM; 

PROCEDURE <BUNDLE_NAME> IS 

— repeated for each test 

DECLARE 

<TEST FILE> [a modified test is inserted here, ...] 

BEGIN 

<TEST NAME>; [... and invoked here] 

EXCEPTION —test is not expected to reach this exception handler 

WHEN OTHERS -> REPORT.FAILED("unhandled exception "); 

REPORT.RESULT; 

END; 


2-6 









IMPLEHENIATION DEPE3®E34CIES 


— t••• repeated for each test in the bundle] 

EM) <BUNDLE_NhNE>; 

The 1259 tests that were processed in bundles are listed below; each bundle 
is delimited by and 


<A21001A A22002A 

A29002A A29002B 

A29002H A29002I 

A32203D A33003A 

A35710A A35801A 

A38199A A39005B 

A54B01A A54B02A 

A71004A A72001A 

A74106C A74205E 

A83041D A83A02A 

A83C01E A83C01F 

A85013B A87B59A> 

<AD1A01A ADIAOIB 
-AD7102A AD7103A 

C23003A C23006A 

C24003C C24106A 

<C24201A C24202A 

C24211A C25001A 

<C26008A C27001A 

C2A008A C2A009A 

C3211LA C32111B> 

C34001C C34001D 

<C34004A C34004C 

C34005I> <C34005J 
C34005S C34005U 

C34007A C34007D 

C34007P> <C34007R 
C34011B C34012A 

C34014J C34014L 

C34014W C34014Y 

C35003D C35003F 

C35503C C35503D 

<C35503L C35503O 

C35505C> <C35505D 
C35507E C35507G 

<C35706A C35706B 

C35707C C35707D 

C35708E> <C35711A 
C35713C> <C35801D 
<C35902A C35902B 

C35A03B C35A03C 

C35A04A C35A04B 

<C35A04Q C35A05A 

<C35A06D C35A06N 

C35A07A C35A07B 

C35A07Q C35A08B 


A22006B A26004A A26007A A27003A A27004A 

A29002C A29002D A29002E A29002F A29002G 

A29002J A29003A A2A031A> <A32203B A32203C 

A34017C A35101B A35402A A35502Q A35502R 

A35801B A35801F A35902C A38106D A38106E 

A39005C A39005D A39005E A39005F> <A39005G 

A55B12A A55B13A A55B14A A62006D A71002A 

A73001I A73001J A74105B A74106A A74106B 

A74205F> <;^3009A A83009B A83041B A83041C 

A83A02B A83A06A A83A0aA A83C01C A83C01D 

A83C01G A83C01H A83C01I A83C01J A85007D 

<AB7006A AC1015B AC3106A AC3206A AC3207A> 

ADIDOIE AD7001B AD7005A AD7101A AD7101C 

AD7103C> <AD7104A AD7203B AD7205B> <C23001A 

C24002A C24002B C24002C C24003A C24003B 

C24113A C24113B C24113C C24113D C24113E> 

C24202B C24202C C24203A C24203B C24207A 

C25001B C25003A C25004A C26002B C26006A> 

C2A001A C2A001B C2A001C C2A002A C2A006A 

C2A021B> <C32107A C32107C C32108A C32108B 

<C32114A C32115A C32115B> <C32117A C34001A 

C34001F C34002A C34002C C34003A 0340030 

C34005A 0340050 <034005D 034005F 034005G 

O34005L 034005M 0340050 <O34005P O34005R 

O34006A 034006F O34006G 034006j> <0340061 

O34007F 034007G> <0340071 034007J O34007M 

034007S> <034009A 034009F O34009G 034009L 

O34014A 0340140> <034014E 034014G O34014H 

O34014N O34014P O34014R 034014T> <034014U 

O34015B 034016B 034018A 035003A 035003B 

O35102A O35106A 035404A> <035503A O35503B 

O35503E C35503F O35503G O35503H O35503K> 

O35503P O35504A O35504B O35505A O35505B 

O35505E C35505F O35507A 035507B> <0355070 

O35507H 0355071 O35507J> <035507K 035507L> 

0357060 O35706D 035706E> <O35707a O35707B 

O35707E O35708A O35708B 0357080 O35708D 

035711B 035712A 035712B 0357120 035713A 

O35802A O35802B 0358020 O35802D O35802E> 

O35902D O35904A O35904B 035A02A O35A03A 

O35A03D> <O35A03N O35A03O 035A03P> <035A03Q 

035A040> <O35a04D 035A04N> <035A040 035A04P> 

O35A05D 035a05N> <035A05Q 035A06a 035A06B> 

035A060> <O35a06P O35A06Q 035A06R O35A06S 

O35A07O> <O35a07D O35A07N O35A07O 035A07P 

O36003A> <O36004A O36104A 036104B O36105B 


2-7 


IHPLEHE24TATIGN DEPENDENCIES 


C36172A 
C36202C 
C36205C 
C36205J 
C36305A> 
C37008A 
C37102B 
C37208A 
C37211C 
<C37213E 
C37214A> 
C37215G 
C37305A 
C37403A> 
C38002B 
C38102A 
C38107B> 
' *C39006E 
<C41101D 
C41108A 
C41207A 
C41303G 
C41303Q 
<C41304B 
C41308A 
C41323A 
C41402A 
<C42007C 
<C42007J 
<C43105A 
C43204E 
C43205C 
C43205J 
C43208A 
C43213A> 
C43215A 
C44003F 
C45101H 
<C45111D 
C45122B 
C45201B 
C45220C 
C45241A 
C45251A 
C45274A 
C45303A 
<C45323A 
C45345A 
C45347D 
C45421C 
<C45504A 
C45521E> 
<C45532A 
C45532H 


C36172B 

C36203A 

C36205D 

C36205K 

<C37002A 

C37008B> 

C37103A 

C37208B 

C37211D 

C37213F 

<C37215A 

C37215H 

C37306A 

<C37404A 

C38004A 

C38102B 

<C38108A 

C39006G 

C41103A 

C41201D 

C41301A 

C41303I 

C41303R 

C41306A 

C41308C 

C41324A 

C41403A 

C42007D 

C42007K 

C43105B 

C43204F> 

C43205D 

C43205K 

C43208B 

<C43214A 

C43215B 

C44003G 

C45101I 

C45111E 

C45122C 

C45202A 

C45220D 

C45241B 

C45252A 

C45274B 

C45304A> 

C45331A 

C45345B 

C45411A 

C45421D 

C45504D> 

<C45523A 

C45532B 

C45532I 


0361720 

C36204A 

C36205E 

C36301A 

C37003A 

<C37008C 

C37105A 

C37209A 

C37211E 

C37213G 

C37215B> 

C37216A 

C37307A 

C37404B 

C38004B 

C38102C 

C38201A 

C39007A 

C41103B 

C41203A 

C41303A 

C41303J 

C41303S 

C41306B 

C41308D 

C4132SA 

C41404A 

C42007E 

C43003A 

C43106A 

<C43204G 

C43205E 

C43206A 

C43209A 

C43214B 

C43222A> 

C45101A 

C45101K 

C45112A 

C45122D 

C45202B 

C45220E 

C45241C 

C45252B 

C45274C 

<C45321A 

C45331D 

C45345C 

C45411D 

C45421E> 

<C45505A 

C45524A 

C45532C 

C45532J 


<C36174A 

C36204B 

C36205F 

C36301B 

C37003B 

C37009A 

C37107A 

C37209B 

C37213A 

C37213H> 

<C37215C 

C37217A 

C37309A 

C37405A 

C38005A 

C38102D 

C38202A 

C39007B 

C41104A 

C41203B> 

C41303B 

C41303K 

C41303U 

C41306C 

C41309A> 

C41326A 

C42005A 

C42007F 

C43004B 

C43107A 

C43204H 

C43205F 

C43207A 

C43210A 

C43214C 

<C43224A 

C45101B 

C45104A 

C45112B 

C45123A 

C45210A 

C45220F 

C45241D 

C45253A 

C45281A 

C45321B 

C45332A 

C45345D> 

C45412A> 

<C45423A 

C45521A 

C45524B 

C45532D 

C45532K 


C36180A 

€362040 

C36205G 

C36302A 

C37005A 

C37010A 

C37108B 

C37210A> 

C37213B 

<C37213J 

C37215D 

C37217B 

C37310A 

C37409A 

C38005B 

C38102E 

C39006A 

C39008A 

C41105A 

<C41204A 

C41303C 

C41303M 

C41303V 

C41307A 

<C4132QA 

C41327A 

C42006A 

C42007G 

C43103A 

C43108A 

C43204I 

C43205G 

C43207B 

C43211A 

C43214D 

C44003A 

C45101C 

C45111A 

C45113A> 

C45123B 

C45211A 

C45231A> 

C45241E> 

C45262A> 

C45282A 

C45321C 

C45342A 

<C45347A 

<C45413A 

C45431A 

C45521B 

C45524C 

C45532E 

C45532L> 


C36202A 

<C36205A 

C36205H> 

C36303A 

C37006A 

C37010B 

C37206A 

<C37211A 

C37213C 

C37213K 

C37215E 

C372170 

C37312A 

C37411A 

C38005C 

C38104A 

C39006B 

C39008B 

C41106A 

C41205A 

C41303E 

C41303N 

C41303W 

C41307C 

C41321A 

C41328A> 

C42007A 

C42007H 

C43103B 

C43204A 

C43205A 

C43205H 

C43207O 

C43212A 

C43214E 

C44003D 

C45101E 

C45111B 

<C45114B 

C451230 

C4522QA 

<C45232A 

<C45242A 

<C45272A 

C45282B 

C45321D 

C45343A 

C45347B 

C45421A 

C45502A 

C45521C 

C45524D 

C45532F 

<C45534A 


C36202B 

C36205B 

<0362051 

C36304A 

C37007A 

C37012A 

C37207A 

C37211B 

C37213D> 

C37213L 

C37215F 

<C37304A 

C37402A 

C38002A 

C38006A 

C38107A 

C39006D 

0390080 

C41107A 

C41206A 

C41303F 

0413030 

C41304A> 

C41307D 

C41322A 

<C41401A 

C42007B> 

C42007I> 

C43104A> 

0432040 

C43205B 

C43205I 

<C43207D 

0432120 

C43214F 

C44003E 

C45101G 

0451110 

C45122A 

<C45201A 

C45220B 

C45232B 

C45242B 

C45273A 

C45291A 

C45321E> 

C45344A 

0453470 

045421B 

C45503A> 

C45521D 

C45524E> 

C45532G 

C45611A 


2-8 









IHPLEHENEATZQN DEPENDENCIES 


C45613A C45614A C45621A C45621B C45621C C45621D C45621E> 

<C45622A C45624A C45624B C45631A C45632A C45641A C45641B 

C45641C C45641D C45641E> C45652A C45662A C45662B C45672A 

C46011A C46012A C46012B C46012C> <C46012D C46012E> <C46013A 

C46014A C46021A C46023A C46024A C46031A C46032A C46033A> 

<C46041A C46042A C46043A C46043B> <C46044A C46044B C46051A 

C46051B C46051C> <C46052A C46053A C46054A C47002A C47002B 

C47002C C47002D C47003A C47004A C47005A C47006A C47007A> 

<C47008A C47009A C47009B C48004A C48004B C48004C C48004D 

C48004E C48004F C48005A C48005B C48005C C48006A C48006B> 

<C48007A C48007B C48007C C48008A C48008B C48008C C48008D 

C48009A C48009B C48009C C48009D C48009E C48009F C48009G> 

<C48009H C48009I C48009J C48010A C48011A C48012A C49020A 

C49021A C49022A C49022B C49022C C49023A C49024A C49025A 

C49026A> <C4A005A C4A005B C4A006A C4A007A C4A010A C4A010B 

C4A010D C4A011A C4A012A C4A012B C4A013A C4A013B C4A014A> 

<C51002A C51004A C52001A C52001B C52001C C52005A C52005B 

C52005C C52005D C52005E C52005F> <C52007A C52008A C52008B 

C52009A C52009B C52010A C52011A C52011B C52012A C52012B 

C52013A> <C52103B C52103C C52103F C52103G C52103H C52103K 

C52103L> <C52103M C52103P C52103Q C52103R C52103S C52103X 

C52104A C52104B C52104C C52104F> <C52104G C52104H C52104K 

C52104L C52104M C52104P C52104Q C52104R C52104X C52104Y> 

<C53004B C53005A C53005B C53006A C53006B C53007A C53008A 

C54A03A C54A04A C54A06A C54A07A C54A11A C54A13A C54A13B 

C54A13C> <C54A13D C54A22A C54A23A C54A24A C54A24B C54A26A 

C54A27A C54A41A C54A42A C54A42B C54A42C C54A42D C54A42E 

C54A42F C54A42G C55B03A C55B04A C55B05A C55B06A C55B06B> 

<C55B08A C55B09A C55B10A C55B11A C55B11B C55B15A C55B16A 

C55C01A C55C02A C55C02B C55C03A C55C03B C55D01A C56002A 

C57002A C57003A C57004A C57004B C57004C C57005A> <C58004a 

C58004B C58004C C58004D C58004F C58004G C58005A C58005B 

C58005H C58006A C58006B C59001B C59002A C59002B C59002C> 

<C61008A C61009A C61010A C62002A C62003A C62003B C62004A 

C62006A C62009A C63004A C64002B> <C64004G C64005A C64005B 

C64005C C64103A C64103B C64103C C64103D C64103E C64103F> 

<C64104A C64104B C64104C C64104D C64104E C64104F C64104G 

C64104H C64104I C64104J C64104K C64104L C64104M C64104N 

C64104O C64105A C64105B C64105C C64105D C64105E C64105F> 

<C64106A C64106B C64106C C64106D C64107A C64108A C64109A 

C64109B C64109C C64109D C64109E> <C64109F C64109G C64109H 

C64109I C64109J C64109K C64109L> <C64201B C64201C C64202A 

C65003A> <C65003B C65004A C66002A C66002C C66002D C66002E 

C66002F C66002G C67002A C67002B C67002C C67002D C67002E> 

<C67003A C67003B C67003C C67003D C67003E C67005A C67005B 

C67005C C67005D> <C7200lB C72002A C73002A C73007A C74004A 

C74203A C74206A C74207B C74208A C74208B C74209A C74210A 

C74211A C74211B C74302A C74302B C74305A C74305B C74306A 

C74307A> <C74401D C74401E C74401K C74401Q C74402A C74402B 

C74406A C74407B C74409B> <C83007A C83012D C83022A C83023A 

C83024A C83025A> <C83027A C83027C C83028A C83029A C83030A> 

<C83031A C83031C C83031E C83032A C83033A C83051A C83B02A 

C83B02B C83E02A C83E02B C83E03A C83E04A C83F01A C83F03A 

C84002A C84005A C84008A C84009A C85004B C85005A C85005B 


2-9 




INPLEHEl^TION DEPENDENCIES 


C85005C 

C85006G> 

C87B04B 

C87B07D 

C87B11A 

<C87B15A 

C87B24A> 

C87B31A 

CBlOlOA 

CB2007A 

CB4004A 

CB5002A 

CC1018A 

CC1221A 

<CC1304A 

<CC1311A 

CC3012A 

CC3123B 

CC3128A 

CC3221A 

CC3232A 

CC3305B 

CC3407A 

CC3408B 

CC3504E 

<CC3601A 


C85005D> 

<C87A05A 

C87B04C 

C87B07E 

C87B11B 

C87B16A 

<C87B24B 

C87B32A> 

CBlOlOB 

CB3003A 

CB4005A 

CB7003A 

CC1104C 

CC1221B 

CC1304B 

CC1311B 

CC3015A 

CC3125A 

CC3203A 

CC3222A 

CC3233A 

CC3305C 

CC3407B 

CC3408C 

CC3504F> 

CC3601C> 


<C85005E 

C87A05B 

C87B05A 

C87B08A 

C87B13A 

C87B17A 

C87B26B 

<CB1001A 

CBIOIOC 

CB3003B> 

CB4006A 

CB7005A> 

CC1107B 

CC1221C 

CC1305B 

CC2002A 

CC3106B> 

CC3125B 

CC3207B 

CC3223A 

CC3234A 

CC3305D 

CC3407C 

CC3408D 

<CC3504G 

<CC3603A 


C85005F 

C87B02A 

C87B06A 

C87B09A 

C87B14A 

C87B18A 

C87B27A 

CB1002A 

CB1010D> 

<CB3004A 

CB4007A 

<CC1004A 

CCllllA 

CC1221D> 

CC1307A 

CC3004A 

<CC3120A 

CC3125C 

CC3208A 

CC3224A 

CC3235A 

CC3406A 

CC3407D 

CC3504A 

CC3504H 

CC3606A 


C85005G 

C87B02B 

C87B07A 

C87B09B 

C87B14B 

C87B18B 

C87B28A 

CB1003A 

<CB2004A 

CB4001A 

CB4008A 

CC1005C 

CC1204A 

<CC1222A 

CC1307B 

CC3007A 

CC3120B 

CC3125D> 

CC3208B> 

CC3225A> 

CC3236A 

CC3406B 

CC3407E 

CC3504B 

CC3504I 

CC3606B 


C85006A> 

C87B03A 

C87B07B> 

C87B09C 

C87B14C 

C87B19A 

C87B29A 

CB1004A 

CB2005A 

CB4002A 

CB4009A 

CC1010A> 

CC1207B 

CC1224A 

CC1308A 

CC3011A 

CC3121A 

<CC3126A 

<CC3208C 

<CC3230A 

CC3240A 

CC3406C 

CC3407F> 

CC3504C 

CC3504J 

CC3607B> 


<C85006F 

C87B04A 

<C87B07C 

C87B10A 

C87B14D> 

C87B23A 

C87B30A 

CB1005A 

CB2006A 

CB4003A 

CB4013A 

<CC1010B 

CC122QA 

CC1225A> 

CC1310A> 

CC3011D 

CC3123A 

CC3127A 

CC3220A 

CC3231A 

CC3305A 

CC3406D 

<CC340aA 

CC3504D 

CC3504K> 







CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Itie Ada inplementation tested in this validation effort is described 
adequately ty the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Robert R. Risinger 
TLD Systems Ltd. 

3625 Del Amo Boulevard 
Torrance California 90503 
(310) 542-5433 


Testing of this Ada inplementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada inplementatian passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the 
loplementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Leuiguage Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the siqport of a file system — if 
none is svi^ported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 



PROCESSING INFORMATICS 


a) Total Number of Applicable Tests 3534 

b) Total Number of Withdrawn Tests 104 

c) Processed Inaf^licable Tests 67 

d) Non-Processed I/O Tests 264 

e) Non-Processed Floating-Point 

Precisicm Tests 201 

f) Total Number of inapplicable Tests 532 (C4d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A. magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplen^ntation. 

Ihe tests were conpiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target ccmputer 
system by the Serial Ports, and nm. The results were captured on the host 
conpjiter system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The following options were used for testing this 
inplementation; 


Conpiler 
Option / Switch 

NoPhase 

NoLog 


Effect 

Suppress displaying of phase times during 
conqpilation. 

To cause command line to be echoed on log 
file. 


NoDebug 


List 

Target-i960 


Th suppress generation of debug symbols to 
speed conqpilation and linking. 

To cause listing file to be generated. 

Selects the TLD Intel i960 target 
architecture. 


3-2 





PROCESSING ZNPQRNftTIGN 


Linker 

Option / Switch Effect 

NODebug Sioppresses generation of Debugger symbol 

files. 

NoVersion Suppresses announcement banners that 

contain timestamp and version information 
to facilitate file comparing. 

All tests were executed with Code Straightening, Global 
Optimizations, and automatic inlining options enabled. Where 
optimizations are detected by the optimizer that represent deletion 
of test code resulting from vinreachable paths, deleteable 
assignments, or relational tautologies or contradictions, such 
optimizations are reflected by informational or warning diagnostics 
in the ccmipilation listings. 


Test ^tput, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-3 



APPOCIX A 


MACRO PARAMETERS 


Hiis appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89J. The 
parameter values are presented in two tallies. The first table lists the 
values that are defined in terms of the maocimum input-line length, vdiich is 
the value for $MAX_1N_L£N—also listed here. These values are expressed here 
as Ada string aggregates, vhere "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

$B1G__ID1 

$BIG_ID2 

$BIG_ID3 


120 — Value of V 

(1..V-1 -> 'AS V -> 'V) 

(1..V-1 -> 'AS V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 


$BIG_ID4 

$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG__STRING1 

$BIG__STRING2 

$BLANKS 


(1..V/2 -> 'A') & '4' & 

(I..V-1-V/2 -> 'A') 

(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

'"' & (l,.V/2 -> 'A') & '"' 

& (1..V-1-V/2 -> 'A') & '1' & '"' 

(1..V-20 -> ' ') 


$max_len_int_based_literal 

"2:" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16;" & {1..V-7 -> '0') & "F.E;" 


A-1 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

Hie following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COONT_LAST 

511 

$DEFAULT_MEM_SIZE 

16«40000000# 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SyS_NAME 

I960 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

15 

$EWERY__AK)RESS1 

17 

$ENTRY__ADDRESS2 

19 

$FIELD_LAST 

127 

$FILE_TERMINATC» 

ASCIl.FS 

$FIXED_NAME 

NO_SUCH_FIXED_TyPE 

$FLQAT_NAME 

NO_SUCH_FLQATjrYPE 

$PORM_STRING 

t1 tf 

$PORM_STRING2 

CANNOT_RESTRICT_FILE_C 

$GREATER THAN DURATION 

90000.0 

$GREATER THAN DURATION BASE LAST 

T3107I.0 


$GREATER THAN FLOAT BASE LAST 

“ “ “ S.TlOOOE+aS 

$GREATER THAN FLOAT SAFE LARGE 

“ 2.T3000E+37 


mCRO PARMfETERS 


$GREATER THAN SHORT FLOAT SAFE LARCZ 

“ ■“ NO_ltXH_SlORT_FLCATjnrPE 

$HIC2J_PRIORITT 20 

$ILLEGAL EXTERNAL FILE NAMEl 

“ “ ■'BADCHARe.l" 

$ILLEGAL EXTERNAL FILE NAME2 

“ ■" ■^THISFILENAMEMOULMEPERFECTLYLBGAL" & 

"IFITWERENOTSOLONG. SOTOERE" 

$INAPPROPRIATE LINE LENGTH 

“ -1 


$INAPPROPRIATE_PAGE__LE2«3TH 



-1 

$INCLUDE__PRAGMA1 

PRAGMA INCLUDE ("A28006D1.TST") 

$INCLODE_PRAGMA2 

PRAGMA INCLUDE ('*B28006F1.TST") 

$INTEGER_FIRST 

-2147483648 

$INTECa3l_LAST 

2147483647 

$INTEGER_LAST_PLUS_1 

2147483648 

$INTERFACEJLANGUAGE 

ASSEMBLY 

$LESSjrHAN_DURATION 

-90000.0 

$LESS THAN DURATIGN BASE FIRST 
” “ ~ -131073.0 

$LINE_TERMINATOR 

ACSIl.CR 

$LOW_PRIORITy 

1 

$MACHINE CODE STATEMENT 

“ " CTRL'(B, 1, True) 

$MACHINE_C(X)EjrYPE 

CTRL 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX__INT 

2147483647 

$MAX_INT_PLUS_1 

2147483648 

$MIN_INT 

-2_147_483_648 




A-3 




macro parameters 


$MAME 

$NAME_LIST 

$NAME_SPECIFICATIQNI 
$NAME_SPECIFICATIQN2 
$NAME_SPECIFICATI0N3 
$NEG_BASED_INT 
$NiW_MEM_SIZE 
$NEW_STOR_UNIT 
$NEW_SYS_NAME 
$PAGE_TERMINATOR 
$RECORD_DEFINITIC»J 
$RECORD_NAME 
$TASK_S1ZE 
$TASK_STORAGE_SIZE 
$110^ 

$VARIABLE_AKJRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


NO_SUCH_INTEGER_TYPE 

Pmachine« nsl6000, vaoc, afl750 z8002, z8001, 
qould, pdpll, in68000, pe3200, caps, andahl, 
i8086, i80286, i80386, zSOOOO, ns32000, 
ibnsl, 1C168O2O, nebula, nanie_x, hp, tol, 
hawk, rl666, i960 

Not supported 

Not supported 

Not supported 

16#FFFFFFFE# 

16#10000000# 

8 

i960 

ACSII.CR & ASCII.FF 
Withdrawn 
Withdrawn 
32 

2000 

0.000001 

SYSTEM.(16#7FFFFFF4#) 

SYSTEM.(16#7FFFFFEC#) 

SYSTEM.(16#7FFFFFE8#) 

Withdrawn 


A-4 



APPENDIX B 


CC»!PILAT1C»I SYSTEM OPTIONS 


The con?)iler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted otherwise, 
references in this appendix are to conpiler documentation and not to this 
report. 


B-1 



TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 

3-8 


3.4 Compiler Option Switches 

CoBpiler option ■witehas provida control ovar various procassing and 
output faaturas of ttaa eospilur. niaaa faaturas i neluda savasml 
variatias of listing output, tha laval and k i n ds of optisdsations 
dasirad, tha ehoica of targat eea p utar, and tha oparation of tha 
conpilar in a syntax ehaeking nods only. 

iCaywords ara usad for selecting various conpilar options. Tha 
cosplaaant kayword, if it axists. it usad to disabla a conp ilar option 
and is foxsMd by prefixing tha swit^ kayword with *n0”. 

Switch namas may ba truncatad to tha laast nuabar of charactars 
required to vmiquely identify tha swit^. For axaapla, tha swit^ 
"CROSSREF" (explained in tha list below) may ba uniquely identified by 
tha abbreviation *CR* or any longer abbreviation. In tha list ^ 
twitches on the following pages, the abbreviations are in bold and tha 
optional extra characters arc not bolded. 

If an option is not specified by the user, a default setting is 
assumed. All specified coepiler options apply to a single invocation 
of the conpilar. 

the default setting of a switch and its meaning ara defined in tha 
table below, the meaning of tha coeplamant form of a switdi is 
normally tha negation of the switdi. For some switches, tha coaplamant 
meaning is not obvious; these coeplemant switch keywords are listed 
separately. 

In the description of the switches, the target dependent name cargec is 
used. the value of this symbol is determined by tha value of tha 
TARGET switch. 

Coopiler-generated file apecifications generally conform to host 
conventions, thus, any generated filename is the source filensme 
appended with the default file type, the output file name can be 
coopletely or partially apecified. 











TLD ADA COMPILER 

Compiler Usage 


I960-A0A-2C 

3-9 


SWITCH NAME 


MEANING 


ADDRES5_SPACBaj3Uie| (aaoe, tfubjystem_iaaae) 

NOADdress.SFACS -• default 

Ttiis switch allows tisars to specify the association of a 
coapilation unit with a logical address space. Ibis cap ability 
will sT^iport the definition of i9€0 Bxtexided Architectiire "D o s wins * 
and domain calls. 

The name panuneter is the name of the address space and 
aubsyscen-aame is the name of the subsystem to which the address 
space belongs. Zf subsyscam-nasie is not stqpplied, then the address 
space does not belong to a subsystem. This swit^ siay appear in 
any compilation, and applies to all the cospilation units in the 
coopilation. 

NOTE: An alternate method of associating cospilation unit(s) with 

a logical address space is to use the pragma Address_Space in the 
coepilation unit (a) and cospile without using this switch. The 
pragma Address_Space_Bntry is iised to indicate which subprograsw 
, represent entities into the logical space (defined by this switch 
or pragma Address^Space). Refer Section S.2.F of this document 
under Implementation*Dependent Pragaias, for further inforsmtion. 

This capability does not yet allow users to indicate objects that 
are to be iaplemented and referenced as independent objects. 

TTClnh will verify that all coopilation units in the linJc have an 
address space attribute of the same value, or have no address space 
attribute and will create either a domain (if an address attribute 
is specified) or a prog ra m (if no address space attribute is 
specified). 

Alosadb-filenaaie 
NOAIo •• default 

This switch causes information collected during ccopilation to be 
saved in a specified data base file or a default file nasmd 
1960 .ADB in the eespilation directory. This information incl\ides 
the cospilation tmits, the contained scopes, the local declarations 
of objects and types and their descriptions, external references, 
callers, calls, program design language (PDL) idiich is extracted 
from stylized Ada conments embedded in the source code, and any 
other information extracted from similar stylized Ada comments. 
The TLD Ada Info Display (TXDaid) permits the user to browse this 
data base and to extract selected data base information to support 
the imderstanding of a program or to produce documentation 
describing the program. 


WMmuro 










TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 

3-10 


CAll ,TRSE 

N0C/^_TRES -• dafaulc 

lliis switch is \issd in coDjunetion with EXABORATOR and X<ZST to 
ea\aso all .CtX filas ( cor rsspe n ding to ths eosplats sat of objaet 
filas baing linkad for this program) to be raad in sad a closura of 
all calls in tha p r ogr am to ba cee^utad. Itaa rasults of this 
axialysis is foxnattad into a std^rograa call traa report and output 
in tha listing f ila. this switch has no of fact without tha 
SLABORATOR and LIST switchas. 

ROTE: Tha call traa is incooplata if any raquirad coapilation 
xmit's .CXT filas are sussing. 

CHbCKS •' default 

CHsCKS{a (cheek_idencifier{__})} 

N0CHbcks{«( ehaeJe_ideacifier{__}) ) 

Khan tha CHECICS switch is used, zero or isore cback^^identifiers are 
specified axid tha run tins ^xeclcs are enabled. The status of run 
time checks associated with unaanticnad cbeck_ideacifiers is 
unchanged. 

Without any cheefc.idancifiers, the BOCRBCICS switch oisits all run 
tine checks. If ana or store ehmek^idaatifimxw are specified, the 
specified rtm tiaui chachs are osiitted. The status of run tisn 
checks associated with uzsnantionad eheek^ideatifiers is unchanged. 

Checks can ba elisiinated salactivaly or cospletaly by source 
statesiant pragsia Suppress. Pragisa Sxippress overrides the CHECICS 
switch. 

Check_idencifiers are listed below and are described in tha UOf, 
Section S.2.B. 

ALL_CHEC1CS •• default (consists of all the checks below) 

ACCESS.CHECIC OISCRIMZBART.CBECIC DIVI5ZaR_CBEClC 

ELABORATZOR.CRECE IRDEX.CHECK ~ LERGTH.OTCIC 

OVERFLOW ^dC RARGe'cREOC STORACT CHSCE 


era 








TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 

3-11 


COHH0DrrBCbAneter>«pecifieseiaB{...} 

Tbia awitcii allows tha usar zo ovaxrida a sac of dafaiilc swca 
cdiaraeears usad to aark easnaaes which hava spacial sa a n i ng s co eha 
Cnaipilar. (la cha aourea coda, chasa awica ehasmecars aust 
iaaadiacaly follow eha Ada ccBinan t dasigaacor *-•■.) Thara ara 13 
BMca chacaecars dafiaad as posicional aatrias ia tha scriag of 
daaxmeears spacifiad for this mwiztb. To dafiaa eaa or aora 
aatrias. all aatrias up to sad iaeludiag cha last aacxy to bo 
dafiaad asasc ba spacifiad. B a ch of chasa ch a r s et ars mmy bo 
raprosaatod oithor by cha diaractar itsalf. or by a dollar siga *$* 
followad by tha characcar's docisua ascii valua. (Tha lattsr foxsi 
is usoful for spocifyiag rtiaractors whi^ would otharwisa bo 
sigaificaat to tha c e mn a Tid lixaa parsar.) To pacify a dollar siga 
chaxaecor, tiso eha foxa *$36*. Roaiaiaiag charset or positions aro^ 
laft ua^iaagad. Capabilitias for chaxmeear positions in tha string 
may ba disabled by spocifyiag eithar blank (■$32*) or null (*$0*). 
Please refer co the ascii ^laraccar sec cable ia Appendix B for the 
decimal valua of ascii charaecars. Tha dafiaition of aa^ anery 
and its curreae default valua is as follows: 

Tinada eftnM4r<nn«l r«nnil.aeion CesBiant gharaetara 
PQBitiBa Daseriotion 

1 Configuracicin Equals (default: 

This entry dafinas eha daaracear usad to aark 

conditional sourco lines which will ba included in 
eha coapilation only if its 

coafiguzaeioa'ideacifier is spacifiad with the 
CONFIGORATiasr swit^. 

2 Configuration Noe Bqual (default: ”#■} 

This entry dafinas eha character usad to nark 

coadisional source lines whidi will ba incliidad ia 
tha coapilation only if its 

configurmciea-ideBtlfier is not spacifiad with the 
CORFICSOBATZON switcfi. This same cbaraceor is usad 
to begin an "also* clausa within a group of 
conditional compilation lines. The lines betwaaa 
this character and cha and of the group will be 
included ia eha cospilation only if eha 
coafigurseiaa-ideBtifier for tha gro:^ is not 
specified with tha CONFICSDRATIOM switch. 

Begin Configuration (default: "{*) 

This entry dafinas cha character usad to mark eha 
beginning of a group of conditional con^ilation 
soiurce lines. 


3 








TLD ADA COMPILER 

Compiler Usme 


Z960-ADA-2C 

3-12 


4 Bnd Configijration (dsfault: ■}■) 

This anury dafinaa tha cbaxaecar uaad to mmrk tha 
and of a group of conditional compilation aourea 
linaa. 

Saa tha CONFZGOSATZOll coanand liaa option for anra information on 
conditional coo^ilation. 


Somrea rfmmmnr rharactara 


gplitifla PtflCriPtiflB 


5 Continuation Zdna (dafault: *«■) 

Thia antry dafinaa tha tiaaraetar uaad to aaadc a 
eoanant eontinuad from tha pravioua lina and for 
which word'wxapping ia parformad during aourea coda 
raformatting. 

6 Raaarvad for futuira uaa. 

^ Raaarvad for futura uaa. 


TLDai<< gflEi—oiwf rh«-raeterB 
ggligjLflO Paacripcion 

8 Bagia Topic (dafault: " [*) 

Thia antry d afina a tha charactar uaad to aarh tha 
baginning of taxt aaaociatad with a topic naaa. 

9 Bnd Topic (default: ”] *) 

Thia antiry dafinaa tha character uaad to aaurJc tha 
and of taxt aaaociatad with a topic naaw. 

10 Dafina Topic (default: *•*) 

Thia antry dafinaa tha charactar uaad to mark 
definition of a coBwa n t mata charactar fox 
particular uaar>dafiaad topic naata. Thia eharae 
may aubaaquantly ha uaad aa a ahorthand for 
above method, eliminating tha xiead to apaeify 
topic name at each oceurranca. 

11 Daaeription (default: 

Thia antiry dafinaa tha charactar uaad to mark a 
eoanant aa a daaeription aaaoeiated with tha 
pravioua declaration. 












TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 
3 - X3 


12 PDL (default: *|*) 

Tbia ancry dafinaa tha eharaecar uaad to aark a 
ceonant as Prograa Oasign languaga (PDL) . 

13 Cnsiand (dafault: *9”) 

This aacxy dafinas tha ehaxmctar usad to nark a 
eosnant as a < i w m i u itih to control data collection. 
This entry provides a MChanisa for \iaars to 
mmirtfmirt coopatibility batwaan the new 
isgilasMntatidn and previously uunman tad source. It 
also say be used to provide a dagraa of 
coapatibility with tools sinilar to TZi)aid. 

Sea the Rafarenea Doeunant for the_ZZfi_£or aore 

inforouition on TIDaid. 

C0NfI6ORATZOR>{ { } canfigunicioc'idencifierl, — } {) } 

where tha parenthesis ( ) era required only when store t h a n one 
caafipuracion>idencifiar is specified. 

switch provides a conditional ccnpilation (configuration) 
capability by detersiining tha specially cosnanted source lines that 
are to be included in the ccnpilation. Source lines (s) can be 
associated with a eoafiguxmcion>idencifier which if sipplied with 
this swit^t causes then to be included. Also, alternative source 
line (s) can be specially nar)ced to be included if the 
eaofiguruzioD-ideatifier is not supplied. 


Format 

Mark Source Zdne(o) Individually: 

"•configimtion'idencifier eoadirimtmJ -source-line 

or: 

--tcanfigurscian-idencifier condicicnal-source-line 

The above fosnat is repeated for each source line to be siarked as a 
conditional source line. 

Source line(s) beginning with *--*■ are included in the ccnpilation 
if the eaafiguzmcioa-identifier is specified with the connand line 
CONFIGURATION switch. Source liae(s) beginning with ■-'#* are 
included in the ccnpilation if the configuracion-idenclfier is aSR 
specified with the command line CONFICTORAXTON switch (CONFIGURATION 
is not used or is used without that caafiguretiaa-identifier) . 











TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3-14 


Mark a Group of Source Line*: 

- - { eoxifipuxmcion-idencifier 
condicioaai-source•line>1 


coodicieauil-Mouree-line-n 

--# 

aiC'Candicionai•souree<liae>l 


ait-coodi eional •sourceoliae-a 
. • }caafi 9 uzaeioo-ideacifier 

Source line (a) between lines beginning with and "•-#* are 

included in the ccepilation if tbe configuratioo-idencifier is 
specified with the coBnand line CQBFZGDRATIOR swit^. Source 
line (a) between lines beginning with *-•#■ and ■-•}* are incltaded 
in the ccapilatian if the eonfiguracioa>idencifittr is not specified 
with the eoBBnand line CONFZGORATZQN switch (CQRFIGDlUinOR is not 
used or is used without that ecn^iguraeion-ideneifier) . 


} 

} Cespiled if 

} eanfigtiraeiaa>idescifier 
} iA specified with this 
} switch. 

} 

} Coopiled if 

} configuracion'ideecifier 
} is net specified with this 
} swit^. 


Hbsbi ga.Jrw>g« 

Cconents are examined for configuration switches only if they 
occqpty a line by themselves (i.e., the *>•” starts at the first 
noo'blank character of the line. 

Ihe special consient characters *••#*, and ”->}■ snast 

be entered as shown with no spaces between them. 

The characters "#*, "{*, and ”}* are the default mats 

characters for configuration switches, but they can be aiodified. 
See the CObUERT cosnand line option for more infoxmation. 

The coafiguxaeiaa-ideneifier must issnediately follow the special 
coomant characters; no space is allowed between them. 

tnie canfiguxaciaa-idencifier on the closing brace *--}■ is 
optio n al, but if specified must match the identifier on the 
corresponding opening brace 



tMmuro 





TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3-15 


Th« "-•#* hu ana or ch« octaor o£ two discincc aaasings: i) if 
followad by a configuracioD-ideacifier, it aaans ■coopila tba 
baloaca of this liaa eonditionally* and '2) if xio idantifiar 
followa, it Biaana "toggla tba aaaaa of tba ianaraoat conf iguration 
brace*. 

Any additional text on tba aama line as tba 
■ ..{eonfiguracion>idencifier* and/or tba *-•} 

canfiguratioa-idantifiar* will be eonaidarad a cuimant and will not 
be eoB^ilad aa Ada aourea, ragardlaaa of tba configuration 
aettings. 


Wamino Conatraint 

By default, a /CQRFZ6aI960 aatting ia created for tba target 
conqputer and modal (by tba /TARGST and tba /MODSL Ceapilar 
awitcbea) . Tbarafora, 1960 ia not a valid caefiguraciaa>ideacifier 
for con d i tio n al ceapilation. If \iaad, conditional source with that 
name will always be included in tba conpilation wbatbar or not tbis 
switch is specified (since that name is already apacified for tba 
target and model, by default). 


Weaeina 

the eosgiiler treats nested conditional souirca in a mannar siadlar 
to nested 'if* statements. It ^weks tba eanfiguzuziaa~identifier 
to determine if it bas bean specified witb tba CCnFIGORATIOB switA 
(sisiilar to tba cbacleing parfozswd to determine wbatbar on *if* 
statement is to be performed). If so, it selects the source marJced 
witb that eonfiguzetiaa-identifier (just as an ”if* statement is 
performed for a ”True* *if ” condition). If not and alternate 
conditional source exists, it selects tba alternate source for tbat 
canfiguxacian-idencifier marlced witb *--#■ (just as an "else* 
statement is performed for a "False” "if” condition) . It continues 
tbis ebeclcing for every nested eoBfigurmtiaa-identifier it 
encounters. 








TLO ADA COMPILER 

CoHPZLER Usage 


Z960-ADA-2C 

3-16 


For oxaavle: 

-{A 

conditional'rourcO'liae-Al 


condi cional • sourco • lino-An 
—# 

«2 e • condi cionol • ooureo • line'Al 


oi e - condi cionai • eouree - line-An 
--{B 

eondi ti anal - oouree - line-Bi 


conditianal•eource-line'Bn 
al e • cotndi cional • eourre«line>Bl 


ale«eandieianal •eource>Iine*Ba 
..{C 

coodieionai •eource*line-CZ 


eondi tional •«ouree*line -02 
alt caadieianaI-aource«line>CZ 


ai t • eondi ci anal • eource • line - Oi 
--)C 

-}A 


} 

} Coovilod if A u 
} pacified with 
} this swit^. 

} 

} 

} Cenpiled if A is not 
} specified with 
} this switch. 

} 

} 

} Cospiled if A is not 
} sad B it specified 
} with this switch. 

} 

} 

} Cenpiled if A and B are 
} net specified with 
} this switch. 

} 

} 

} Conpilod if A and B are 
} net and C ii specified 
} with this switdi. 

} 

} 

} Cospiled if A, B, and C 
} are not specified with 
} this switch. 

} 


Configuration switches are examined and aust be properly nested 
regardless of whether or not the configrurstian-identifiers are 
specified. 









TLD ADA COMPILER 

Compiler Usase 


Z960-ADA-2C 

3-17 


following oxanpla fomac is invalid, sineo "B* is not 
cooplotaly naatod within ’A*: 


-.{A 

-*{» 

-.}A 

At tha cloaa of *A", tha naatad *B* will ba foread cloaad with tha 
warning BMaaaga: ■Miaaing co n f iguration erwmant: -*}B*. By tha 
tiaa "•-}B* ia raachad, "B* will hava alraady baan cloaad, ao tba 
following warning will ba iaaiiad: 'Thaaatehad eonfigtaration 
CCSOBMnt: --}B». 


CRosskef 

NOCRossrXF -• dafault 

thia awir^ ganarataa a croas rafaranca liating that containa naawa 
rafarancad in tha aourca coda. Tba croaa rafaranca liating ia 
included in the liating file; tharefora, tha LIST awiteh auat ba 
aalacted or CROSSREF haa no affect. 

CTi 

NOCTz -- default 

Tbia awit^ ganarataa a CASS toola interface file. The dafault 
filanaaHi ia derived from tha objaet filaoaaw, with a .CTI 
extenaion. Tha .CTI file ia required to a u pp ort tha CALLJIRBS, 
FQLL.CALL.TREE, and IBVERTED_CALL.TRSB awitcbaa. 

DEBdG •• dafault 
NODEBcg 

Tbia avitch aalacta tha production of ayabolic debug tablaa in tha 
relocatable object file. 

Alternate alleviation: DBg, NODBg 

OIasbostics 

NODIai^STICS •• default 

Tbia awitA producaa a diagnoatic Maaage file compatible with 
Digital'a Language Sanaitiva Editor and XinoTa^ Editor. Sea 
Digital'a documentation for tha Language Sensitive Editor for a 
detailed explanation of the file produced by thia awit^. 


ura 






TLD ADA COHPILEP 

CoMPZLCR Usage 


Z960-ADA-2C 

3-18 


ELaborator 

NOELABcamroR -- default 

This switch gsnasatas a setup prograa (in unic<nasw$SLAB.aBJ (and a 
listing file in uaic>naBe$SZJVB.X.ZS if the LIST switch was 
q>ecif isd)) that elaborates all caBg)ilatioo units on whiA the 
specified library \init procedure (sMin prograa) dreads and then 
calls the procedure (aain p r ogr am ). Mhan the EZABORATOR switch is 
used, Ihe unit nasw of a previously ccspiled procedure sust be 
specified instead of a source file. Zt is not necessary to 
distinguish a main program from a library unit when it is c e s piled. 

Ftjll_call_trss 
NOFtEl.CUJ^.TRSS -- default 

When the FaLL_CAU<_T1tES switch is used, the cenpiler listing 
incltides all calls including all nested calls in every call. The 
110niZX_CALL_TREB switA shows all nested calls in the first 
instance only and all subsequent calls are referred to the first 
instance. This switch has no effect without the EL ABO R ATOR and 
LIST switches. 

INDEitTATIOllan 
INOENTATiaN-3 •• default 

This switch controls the indentation width in a rafosmatted source 
listing (see the REFORMAT switch description). This switch assigns 
a value to the number of coltosut used in indentation; the value n 
can range from 1 to 8. 

INFo *> default 
NOINFo 

The IBFO switch produces all diagnostic messages including 
information'level diagnostic messages. Ths BOUlFO switch 
sx^resses the production of information-level diagnostic messages 
only. 

INSTABTIATEapptiom 
NOINStARTZATE " default 

This switch is used to establish a default mode of instantiation 
for all generic inscantiatians within the c c syilation. 

The option parameter instructs the Coa^piler to instantiate generics 
in the manner specified, as described below: 

single_body' - a single body is used for all instantiations 

macro - each instantiation produces a different body 





TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3-19 


Pl«aa« r«f«r co Scerien 3.12 'GcnaricB* for noro i nfOTM tioo on tbm 
advaatagoB and diBadvantagoB in tiaiag BinglB_body gaoBricB vbtbub 
aaero ganaricB. 

MaBOad inataaeiaeionB and nascad ganaries ara auppozxad and 
ganaricB dafinad in library unica ara paxBdcead. 

It ia nor poaaibla to parfoa a Biacro inacantiation for a ganaric 
whoaa body baa not yat baan ceayilad. 

ROTS: An altamata aathod of controlling macro instantiation of 

a ganaric ia by xiaing pragma Instantiata in tba aourca coda and 
parforming compilation without thia awitch. Tba pragaui controla 
inatantiatien of a particular ganaric. Safar co Saction 5.2.F of 
thia docmanc undar ImplaoMncacion'Dapandant Pragmas, for ftircbar 
information. 

Zn cha avant of a conflict batwaan the pragma and this swic^, 
tha switch takas pracadanca. 


INTsl 

NOINTsl •• dafaulc 

This switch intaraparsaa linaa of aourca coda with cha aaaaadaly 
coda ganaracad in tha macro listing, niia switch is valid only if 
cha UST and RACRO awicchaa ara aalaccad. Zt may ba halpful in 
corralacing Ada aourca to ganaracad coda, but it incraasas cha sisa 
of cha listing fila. 

INVsRTED_CALL_TSE5 

NOINVsRTiD_c;aj,_TREs default 

This switch dacaminas which calls lad co cha prasanc ana. A 
ravaraad ordar call traa is ganaracad. This switch has no affact 
without cha SLABORATOR and X,ZST awicchaa. 

LISt {>Iisciag-fiia* apac} 

NOLZSt -• default ia interactive mode 
LISt •' default for background procasaaa 

This switch gaaerataa a listing file. Tha default filename is 
derived from cha source fileaaaia, with a .LXS extension. Tha 
liszing-tile-spec can be optionally specified. 






TLD ADA COMPILER 

Compiler Usage 


Z960-A0A-2C 

3-20 


LOg 

NOLOg •• defaxilt 

This swiech cauMs cha coo^ilar eo writa in cha ecnp ilacion log, 
coonand lisa scions and tha fila apaeificacion ot cha Ada aourea 
fila baisg coogjilad ahieh ia wriccen co co SYSSOOTPOT <tha 
qparaciag ayacwB' a standard euepuc). This switch is usadiil is 
axasiining bacch output logs bacauss it allows cha usar to aasily 
dacaxnina which filas ara baiag cesyilad. 

macro 

NOMACro -• dafault 

This swic^ produeas an asaaadaly lilca objact coda listing i^pandad 
to cha source listing fila. Tha LIST siritch must ba anablad or 
this swic^ has no efface. 

MAIN SLAB 

NOMAIN^EZiAB •• default 

This switch sialeas the caipilar treat Cha caBg)ilacion unit being 
con^ilad as a usar>dafined elaboration or satt^ p r ogr a m which is 
tisad instead of that nosaally produced by tha ELABORATOR switch. 
The source fila must be specified instead of a unit n a me of a 
previously coopilad procedure. Osually, tha source fila is 
modified by tha usar, starting from the version produced by tha 
NRXTE.ELAB switch. 

MAXsRRORStta 

MAXsRRORS> 500 •• default 

This switch assigns a value lisiit to tha number of errors forcing 
job termination. Once this value is exceeded, tha compilation is 
terminated. Information*level diagnostic messages are not included 
in cha count of errors forcing termination. The specified value's 
range is from 0 to 500. 

MOpSLofliodel-nasie 

If this switch is xiot specified, TIOada provides compilation 
capabilities that are c oumion to all models of the target. 

If this switch is specified, where model-naait is one of the siodels 
below, TIJSada provides coo^ilation capabilities that are valid for 
the specified model. The coe y ilation that is perforated for a 
particular model may be valid for another model of the target if it 
supports the saaie machine-specific code (machine instructions, 
domains, etc.). 






TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 

3 - 21 


The folloving are valid aodals: 


SA 

CA 

X8 

SB 

MC 

m 

tfX 

NEW LZBRARY 

NONEW^LIBRARY -- default 

The SSW_T.TBRARY switch ereatee as I9S0 etifadiseetoxy in your current 
working directory and an ISSO.XiIB library is that subdirectory, 
replacing the contests of the prior sxibdirectory and library, if 
they existed. 

The NORBW_I,lBRARY switch checks if as I5S0 stabdirectory exists in 
your current working directory and if it does not already exist, it 
will create the 1960 subdirectory and an 1960.US library is that 
, subdirectory. 

ROTE: This switch along with the PARSRT_XJBRARY switch replaces 

the MAXE_LZB switch. 

Object{■ ohj ect•file•spec} 

Object -• dafaxiit 
NOObject 

This switch produces a relocatable object file in the 1960 
subdirectory in the current coa p ilation directory. The defaxilt 
filenaaie is derived from the source filenaaie, with a *.QBJ”. 
extension. 

OPt -- default 

N00Pt{ • (paraaieter {,...})} 

niis switch enables the specified global optiaiization of the 
cca^iled code. The negation of this switch disables the specified 
global optistization of the coa^iled code. 


cm 












TLD ADA COMPILER 

CoHriLCR Usage 


I960-A0A-2C 

3-22 


Mwn eh* OPT •viceh i* aaearad, wiehoue any pmxammzmxu, all 
opciniizaciaiis liacad balow ara cuxaad on. This zascoras 
paraaacars co thair dafatxlea. Vban it is aacarad with parasiatars, 
only th* spacifiad paraswtars axa ttizaad on. 

Whan th* MOOPT swit^ is aatarad, without any parasMtan, mil 
optisiisatians listad balow az* tuznad off. Whan it is aneazad with 
pasnmatars, only tha spacifiad paramatars ar* tuznad off. 

Oafaule opeiaisaeions such as COMMaw_snBSZPR£SSZa>l, 
C0RST3VRT_ARZTHMEnC, DEAO^CODE, and VAZHS^FOLDIBG, ate. Should not 
b* ehangad for nozaal xis*. Tlsars say wish to chang* thas* 
Qpeiaisations for eonfiguration or tasting puzposas, howavar, TXl) 
Systeas raeosmands that thay not ba ehangad. Thasa dafault 
optiaisations should ba ehangad only whan thara is an 
situation with data or tha progr a a or a bad, TID- or uaar*ezaat*d 
algoritha. For axaaip la, if tha p r ogr a a an unusad proeadurs 
dafault optiaization paraaatar DShD.SOBPIiOGIUM dafault will dalat* ** 
it for pzoduction iapzovaaant, howavar, usar aay not want g*w» 
3inusad procedure delated for Oabugger puzposas. If users ar* 
f indin g a need to chang* chase opeisiizacians, please notify TU) 
Syscaas so that wa can zesolwa tha problaa aoza efficiently. 

The following paraaeters may ba u« ed with the /OPT and 7W0QPT 
switehas; 

CODE_Movbhbbt 

This paraaecar aovas coda to iap r o v a axaeution tizi*. (For 
axas^la, aovas invariant code out of a loop). This parasietar 
is tuznad on by default. 

CODE^Straigrtenurs 

This paraaatar ensures that prograa flow is wall fozaad by 
parfOCTi n g xraazxaagaaaac of sagaents of coda, niis paraaecar 
is tuned on by default. 

COf^aOR.SUBEXPRESSIOR 

Expressions with tha saaia operands ara not confuted a second 
eia*. (For axazple, if an expression uses "A •*> B* anoehar 
uses "A B", the Conpiler does not eoagnice the 
second expression, since it Imows it has already coopucad tha 
value). This paraaecar is tuznad on by default. WABSIBG: 
Tuzning this switch off aay cause unexpected results. 








TLD ADA COMPILER 

Compiler Usage 


I960-ADA-2C 

3-23 


CONstastjaxtbiietzc 

Ibis paraswtsr psrfozns constant ari thiws tic. Ibis p s r aa is tsr 
is tuxaod on toy default. mRHXliO: Turning this swit^ off 
nay causa xmaspactad results. 

OEAO.Cqds 

Ibis paraswtar rasiovas coda that nsnnot toa r a ae b ad su^ as 
xmlatoalad co da following sn tmconditienal toranA. Ibis 
parsMtar is turned on toy default. HARBIBG: Turning this 
switch off nay causa unaxpactad results. 

OEAO.SmpnoGRAM 

This paranater r ano v as sxdvrograsn that era not cafarancad. 
This paraaiater is turned on fay default. 

DEAD.Varxable 

Tbis paranater ranovas local tasporary variables that are not 
xisad during axacution. Tbis parssiatar is turned on by 
default. 

OELasszgr 

Tbis paranater optinisas coda ty delating redundant 
assignnents. Zt only parforsis delations allowed fay the 
senanties of Ada. Tbis parasietar is turned on by default. 

Irlzde 

By default, the conpilar autosiatically inlinas sutoprograas 
that are not visible in a padcaga spec and if the astiaatad 
coda sisa is snaller than the actual call, it will inline it. 
Tbis parameter is turned on fay default. 

LItsral.pool 

Tbis parameter overrides the C o np ilar* s optimization 
separation of cospila tisa co nst a nt s into a separate aaenery 
pool. Tbis paraaiator enables the user to exercise cosplete 
control over data allocation. Tbis paraswtsr is cxinsed on by 
dsf axilt. 

L0op_USROIIJ3)6 

Tbis paraswtsr applies to register mesiosy only. It caxises an 
expression cosputed at the end of a lo^ to toe renembered at 
the top of the next iteration. This parameter is tximed on fay 
def axilt. 











TLD ADA COMPILER i960-ADA-2C 

Compiler Usage 3-24 


PSSPBOIX 

Thi » paraiMCar pvrfoxBs opciaisacion in vary linicad 
cencaxcs. nxia paraaatar is tumad od by dafault. 

RsGISTSR.SEDlCATZaN 

This paranacar allows dadieacioo of a ragisbsr to an objact or 
axprassion valua. This parssiacar is tumad on by dafault. 


This parasMtar is usad to aetivats tha xaorgaaizar phase of 
tha CoB^ilar. Instruction Stiiaduling, as parfozsMd by tha 
Raorganizar, is a phase between tha Coda Oanerator and tha 
abject PozBiattar phases. Tha Reorganizer reads tha Coda Pile, 
reorders the code, and outputs the Code Pile. This parsMter 
is turned off by defatilt. 

The purpose of the Reorganizer is to perform qptisiizaticn on 
the code generated by the Code Generator in order to minimize 
the amount of time that the hardware has to wait for data, 
generated by earlier instructions, to become ready for use. 

NOTE: If you choose to use this switcdi, TXD mco nm e n ds that 
the System Administrator sot tha user's page file quota to 
at least 60,000. 

SlNSLE.MDDniiE 

This parameter creates one object module per compilation unit 
rather than one for each top-lewel subprogram. If this 
parasieter is not used, and the cos^ilation unit spec and body 
are in separate files, the extension "_b* is added to tha 
package name in the objact file n a me of the package body 
(i.e., package-naaejb.obj) to differentiate between tha 
package body and spec. Ihe user may locate esects from only 
the body or spec by specifying the unique object filenasw 
(package•aasie_b for the body or package-name for the spec) 
followed by the control section name. This parameter is 
turned on by default. 

STr bmg t h^red o c t i on 

This parameter selects operators that execute faster. This 
parameter is turned on by default. 


era 








TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 
3 * 25 


Vaz^de^foldihg 

Subscitucions of oporands ksown co havo ttaa saaw valua ara 
parfozsiad bafora aavraaaioo asalyaia opcimiaacion. (For 
axaspla, if B and C hava tha aaaM valua, ctaa aaqprasaion 'A ♦ 
C* is uaad and *A * B* will ba racognisad as w o n and tba 
Cospilar will not eoeputa tba aaeond aavrassion, sinea it 
knows it has tha sama valua as tha first) . This paraswtar is 
tuznad on by dafault. WARSniG: Turning this swit^ off may 
eatasa unaa^aetad rasults. 

page mlioes-per-paffe 

PAGs. 60 -• dafault 

This switch assigns a valaia to tha nunbar of linas par paga for 
listing. Tha valua can range from 10 to 99. 

PAREht LIBRARTaparenc • library • spec 
NOPAR&r_LlBRAlcr >* dafaxilt 

Tha PAREtlT^^LlBRARY switch aasas tha specified library as tha parant 
library for tha library to be created. 1750A nust iBa incliadad at 
tha and of tha parent*library*kpec. This switch may only ba used 
with tha REH^LIBRART switch. 

Zf tba ROFAREliT_ZJBRARr switch is used, tha library eraatad by tha 
REW^LIBRART switch will have no parant library. 

BOTE: This switch along with tha NSH^LZBEART swit^ rsplacas tha 

IOUCE_LIB switch. 

PARNs 

NOPARMs ** dafault 

This PARAMETER switch causas all option switebas g ov er n ing tba 
conqpilation, incl u di n g tha dafaulted option switehas, to ba 
included in tha listing file. Tha UST option switch must also be 
salectad or this switch has no affect. User specified swit^as ara 
preceded in the listing file by a leading asterisk (*). This 
swit^ adds approximataly one paga to tha listing file. 

PHasS -- default 
NOPHass 


This switch suppresses the display of phase names during 
ccepilation. This switch is usaf\il in batch jobs because it 
reduces the verbosity of the bat^ log file. 









TLD ADA COMPILER 

CoHPXLER Usage 


I960-ADA-2C 

3-26 


REF Id cask mopcxan 
NOREFJId. CJiSSmapziaa •• dafmult 

This is s rsKosnstciag opcioD, uadsr ttas eeoerol of chs REFOBMAT 
sviceh. This swirch dacsrsdxws how variabls nsm ss appmmx ia tha 
caopilsr listing. Ths cpeioas for this switch srs: 

ALL.LONBR -• All waxishle nsMS ars in lowar cass. 

AXjTnFPER •- All variabls naass ars in uppsr eass. 

XSXTZAL.CAPS -• All variabls naass havs i n itial caps. -- dsfault 

REF Key CASEaeption 
N0REF_r&. CASEaoption -> default 

This is a rsfozaatting option, uadsr ths control of ths REFORKAX 
switch. This swit^ dstsxaiass how Ada kay words appsar ia ths 
cospilar listing. Ths eptions for this switch are: 

ALL_XiOWER •• All Ada key words ars in lower ease. •• dsfault 

ALL_nPPSR •• All Ada ksy words are in t^per case. 

IMITIAZi_CAPS -* All Ada key words have initial caps. 

REF0ruat{ arefozaac - file«spee} 

NOREFOri^ .. dsfault 

This switch causes the coopilsr to reforaat ths sourcs listing ia 
ths listing fils (if no rmfoxamt-fiJm-tpme was providsd) oar 
gensarate a rsfomuittod souarcs fils, if a rafozaBe>fils*spsc is 
parssent. The default file eaetsnaion of ths zefoaaiattsd source fils 
is * .RFU*. Rsfoannatting consists of uaifoza indentation and retains 
numeric literals ia their original source foa. This switch 
perfozBS the reformatting as specified by the RSF_IX>_CASE, 
RSF.KET^CASE, and HaDERTATlOR switches. ~ 

SOuRCE -• default 
NOSOorce 

This switch causes the ii^t source program to be included in ths 
listing fils. Unless they ars si^presssd, diagnostic messages ars 
always included in ths listing fils. 

SYNtax^orly 

NOSYNi^_oiiz.Y -• default 

This switch performs syntax and semantic checking on the source 
program. Ro object file is produced and tha UACRO switch is 
ignored. The Ada Program Library is not i^datsd. 


i 


TUO 


fMmura 




TLD ADA COMPILER 

Compiler Usace 


I960-ADA-2C 

3-27 


TARSST>i960 •• dsfault • 

This switch sslsets ths target eosputer tor which cods is to bs 
gsnsratsd for this eoepilaticp.. "i5€0* selects i9fi0 anhiiteeture 
cperaticii. 

UAnrxnos -- default 
NOUArszzigs 

The HARHIUGS switch outputs warning and higher level diagnostic 

Mssages. 

The NOMARXIXNQS swithi sv^resses the output of both warning-level 
and inf ozBiatian-level diagnostic aessages. 

WIoTHschamcters-per-liae 
UIoTH>llO -- default 

This switch sets the number of characters per line (80 to 132) in 
the listing file. 

WOrd store 

NOW0ro_STOR£ -- default 

The NQRD^STQRS switch sisulates byte and half-word stores by using 
full word instructions. This will allow cnly full word stores to 
be perfomed. Ths nOHORD^STQRS switch will allow byte and 
half-word stores to be performed. 

WRitb.slab 

NOWRite.SLAB -- default 

The HRiTB_EXiAB switch generates an Ada source file which represents 
the main elaboration *setvp* program created by the compiler. The 
imit nasie of a previously compiled procedure must be specd.fied 
instead of a source file. The ffRI7B_BLAB switch may not be used at 
the same tune as the SLABORATOR switA. 

Xtra 

NOXntA -- default 

This switch is used to access features under development or 
features not defined in the UQl. See the description of this 
switch in Section 3.15. 






COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada in^jlementation, as described in this ^jpendix, 
are provided by the custoiner. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 






TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 1 


4 DIREaiVE LANGUAGE 


Oa any hose, tha connand lina calling TLDlnJc may opcionally spacxfy a 
licicar diraceive fila co coacrol eha linJcisg oparacion. Tha direcexva 
fila foznac and individual diraecivaa dascribad in cha following 

pagas. 


4.1 Directive File 

Each lina of cha directive file contains up to 132 characters. Tabs 
are treated as blanhs. Blanhs are used to separate words when no other 
punctuation separates them; tha actual number of blanks is 
insignificant. Characters that follow two successive minuses (••) tire 
ignored. 

A directive ordinarily consists of one line of input, however, lines 
may be continued using a tilde (*■) . Only one directive is allowed par 
input lina. A continuation character can be used to continue directive 
values, however, a value cannot ba split between two lines (if tha 
value does not fit on the current lina, the continuation character must 
ba used after the previous value and tha value must be placed on tha 
following line) . Either upper or lower case may ba used (they are are 
equivalent) except for file names on hosts with case‘sensitive file 
names. 


A directive file may include another directive file. The format of 
this directive is: 

INCLUDE filespeci. Ink} 

where tha file extension .Ink may be optionally specified if the file 
is a directive file, otherwise, if the fila is an object module file, 
its extension must be supplied (i.e., .obj or .olb must be supplied) . 

An included file may itself include euiother directive file, that is, in 
tha example above, filespec.lnk may contain yet another directive 
file. The level of nested directive files allowed depends on the 
number of files that the operating system permits to be opened 
simultaneously. 


B-24 








TLO 32-BIT UNIVERSAL LINKER 

OxRECTxve Language 


I960-LNK-2C 

4 - 2 


Coadicioxial liaicing awy be perfoxaied in cbe direccive file. Tbe formac 
of chia condicional linicing is: 


if loqicAl^expreasioa then 

{else I elsif logical-axpreasion chen} 

endif 

Xf Che logical'oacpzesaion cecuxns a crue value, che scacemencs 
following che if or che elsif clausa will be processed, ocherwise, che 
ones following che else clausa will be processed. 

' 4.2 Directives 

TLOlnh direccives are daacrihad in chis saccion, in alphahecical order. 

The following words, in law«r case icalics, are used in che 
deacripeiona: 

f 

csacz •aama 

This is che name of che concrol saccion in che program being 
linked. 


file 


This is a hose file specificacion. A file specificacion muse be 
ccmplecely concained on a line. 

group•name 

This is a concrol saccion chac includes specified modules and/or 
concrol seccions of module<s). 

module-name 

This is che nwe of a module in- che program being linked. 
paddress 

This is a physical address in che form of a hexadecimal number 
from 0 CO FFFFF. 


B-25 


TUO 


(.TD 









TLO 32-BIT UNIVERSAL LINKER 

Directive La.4Guage 


I960-LNK-2C 

4-3 


PP*ye 

Ihis is a pbysxcai pags nxsntoar in cbs fora of a hoxadsciaal 
niabar froa 0-co FFFFF. - * 

symbol 

This is cha naas of an excetsal syabol in cha program baing 
linkad. 

vaddress 

This is a virtual address in cha fora of a haxadaciaal nualBar 
froa 0 to FFFFFFFF (2**32 - 1). 


vpage 

This is a virtual paga nuabar in tha fora of a haxadaciaal 
nuabar froa 0 to FFFFF. 

Bach TXDlnle directive is described below. 


ASSIGN (vpage«|>page{ 

The ASSIGN directive causes tha specified virt\ial paga to be 
mapped to the corresponding physical page. 

For exasiple, 

ASSIGN (400a0«C0) 

causes the specified virtual page 40000 hex to be mapped to the 
physical page CO hex. 

ASSIGN (4000Q.CO. lOOOO-BO) 

causes tha specified virtual pages 40000 hax and lOOOO hex to 
be mapped to the physical pages CO hex and BO hex, 
respectively. 

COMMENT {»}{"}Texc so be put in Load Module{") 

Tha COMMENT directive contains text which TLDlnJc puts in the 
load module. TLDlnic precedes the text within quotes by ”;; ” to 
distinguish user inserted comments from those inserted by 
TXJOlnk which begin with ";" . All comments specified by COMMENT 
directives are inserted in the load module immediately 
following the initial cconent which is created by TLOlnic. If 

B-26 


TVO 


ITS 








TLD 32-BIT UNIVERSAL LINKER 

OzRCCTzvE Language 


I960-LNK-2C 

4-4 


quotas sra spscifiad. chay must exist at cha bagianing and end 
of tha text to bo creatod as a cotsnant. 

DEBUG {fila^ 

Whan 0EBO6 is usod tha linkar craatas a dabug filo containing 
synbols and choir '•/aluos for tha symbolic dabuggar and a 
txaeaback filo containing call and branching information. Zf 
OBBOG is not spacifiad, tha linJcor doaa not produca tha dabug 
filo and tracabaclc fila. Tha linJcor puts symbols which wars 
includad in tha rolocatabla object fila in tha dabug fila and 
tracabach information also in tha relocatablo object file in 
the tracabaclc fila. Tha name of tha dabug and tracabaclc files 
are derived tha same way tha nap fila nasia is derived as 
described in the MAP switch. Tha format of the dabug and * 

tracabaclc files is described in Appendix A. 

This directive has the same functionality as the linlcer switch 
DEBUG described in Chapter 5. 


END 


This directive is always required (if tha End>of>Fila is not 
present) . It terminates directive input to TZDlnlc, so that any 
subsequent input is ignored. After this directive is read, 
TUDlnlc allocates memory and reads the object files to produce 
the load mcxiule. 

FZLL (vaddravaddress, lenasire*in>byees, {*}paccers{”}) 

Tha FIZiL directive is used to fill in all unused memory with a 
user-specifiable value. 

The vaddress parameter is the starting virtual address of the 
fill region, the sxze-ia-byzes paraaieter is the number of bytes 
to be filled with the pattern, azid tha pactezs par 2 unetsr is the 
pattern used to fill in tha fill region. The pair of double 
quotes (" ") are required if the fill pattern is a character 
string. 

GROUP {: group-aarnem){aamel(,aame2 _ }){(accribuce{....})} 

This directive creates a grotiping of control sections. The 
argument name can be moduie-oame. module• namezeseez-name, or 
.■group-name. If module-name is specified (without icsecz-naxae) 
than the wild card is assumed for the csecz-name and all 
control sections of the specified load module are used. 

Because the group-name is associated with the "null" module, it 
is always preceded by the null module name: a colon (:) . The 
group name becomes a new control section that includes ziie 


B-27 





TLO 32-BIT UNIVERSAL LINKER 

OzRCcnvE Language 


I960-LNK-2C 

4 - 5 


specified concroi saeeiona aod ch« lacludcd concroi s«cc:.9iis 
ffisy noc b« specified in any ocher group. 1£ accrxbuces are 
specified, chen only chose concroi secciona wich the specified 
aecribuces will be inelvided in che group and che group's 
aecribuces conaxsc of only chose specified in che direccive. 

This direccive. as well as che SET direccive. can refer to 
aecribuces in pragma Accribuce in che source file. Refer co 
Che Reference n^fniawnr for ehe Tin £or furcher 

informacion regarding pragma Accribuce. 

If no daea or coda accribuce is specified and an inscruccion 
(code) concroi seceion is included in ehe specificacion. che 
group will have ehe code accribuce. If daca concroi seccion(s) 
are also specified, a warning message is displayed indicacing 
chac ehe group coneains siixed inscruccion and daca concroi 
aaeeions and chac che code accribuce is assxmed for che group. 
If no daea or code accribuce is specified and no inscruccion 
(code) concroi seccion is included in che specificacion. che 
group will have che daca accribuce. 

The aligmnenc of ehe group is by che ” lease common denominaeor* 
of all concroi seceion allgnmenc values. The lengch of che 
group is che sum of ehe lengchs of ehe included concroi 
seeeions plus necessary alignmene. The lengch (as wall as 
ocher aecribuces) of ehe group may bo changed by che SET 
direccive. Afcar all explicie (3RQOP direceives have been 
applied, che Linlcer groups any remaining ungroupad concroi 
seeeions and groups by similar aecribuces. Groups may be used 
in ocher group direceives. 

Aecribuces may be one or more of ehe following co selecc groups 
wich chose aceribueas. The boolean aecribuces are separaced by 
a coosna co denoce a logical AND. 

READ 

is a boolean 'X'UUE if che csecc is all readable, 
oeherwise. ie is FAX<SE. 

NOREAD 

is a boolean TRUE if che csecc is noc all readable, 
oeherwise. ic is FAI.SE. 

WRITS 

is a boolean TRGE if che csecc is all wricable. 
oeherwise, ic is FALSE. 

NOWRITS 

is a boolean TRUE if che csecc is noc all wricable, 
oeherwise, ic is FALSE. 

B-28 


uro 




TLD 32-BIT UNIVERSAL LINKER 

OzRECTZVE Language 


I960-LNK-2C 

4-6 


CODE 

is a boolean TRUE i£ the csecc is all code, ocbervise, 
ie is faz.se. 

NOCOOE 

is a boolean TRUE if tixm csecc is noc all code, 
ochecvise, ic is FAZ.SE. 

DATA 

is a boolean TRDE if die csecc is ad.1 daca, ocherwise, 
ie is FAZ.SE. 

NODATA 

is a boolean TRDE if cbe csecc is noc all daca, 
ocherwise, ie is FALSE. 

To allow grovtping of more concrol seccions chan can fic in a 
single direceive line, a concinuacion characcer can be used or 
Che GROUP direceive can be repeaced (using the same group name) 
as many cimes as needed co include eill concrol seccions needed 
wiehin chac group. For example, if Che following is in che 
linker direceive file: 

GROUP :Group_la(a,b,c)... 

GROUP •.QxaueZ^M(d,m,f) ... 

Graup_l will concain a.b,c,d,e, and f. 

Wild card symbols as previously described may be included in 
Che module-name, csecc-name, and group-name (vrtiich is noc che 
name of che group, buc a group co be included) . 

The ordering of che wild card specificacions wiehin che linker 
direceive file is isgiorcanc. If any wild card specificacion is 
a subsec of anocher, che s\ibsec should be lisced firsc. For 
example, if the following groups aire in che linker direceive 
file: 


GROUP :Group_l»(abc*:Imn*)... 

GROUP ;Group_2»<ab»:lm«) ... 

concrol seccion "abcd:lmno'' will be included in Group_l, and 
since ic has been included inco a group, will noc be included 
in Group_2. 

The following is an example of incorrecc ordering, where che 
subsec IS lisced afeer ics concaining sec: 

GROUP ;Group_2a<ab-:lm*)... 


B-?9 





TLO 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 7 


GBOCn? ;aroiip_l» (abe»; Ian*) . .. 

In this exanpie, control saction "abcdilamo” will ba includad 
in Group^I, and sinca it has baan includad into a group, will 
not ba included in Group_l. 

INCLUDE {(}fila{. ...}{)} 

Iha mCLDDE directive specifies tha fila(s) used for subsequent 
linlear input. This is tha only linker directive that requires 
a conplete filenane (i.e.. no file type or extension is 
appended to the supplied nasie) . If the file n a me ends in .obj 
or .olb, the file is asaxaned to be an object module file. If 
the file name ends in .Ink, tha file is assxaned to be a 
directive file. If only one filaspec is specified, the 
corresponding parentheses are not required. This directive may 
be repeated. 

NOTE: The GEOCP and SET directives are used, instead of this 
directive, to make specific selections of modules and/or 
control sections to be inclxided in the link. 

A directive file may include another directive file. The 
format of this directive is: 

IBCLODE filespec{.lDk} 

where the file extension .Ink may be optionally specified if 
the file is a directive file, otherwise, if the file is an 
object module file, its extension must be supplied (i.e., .obj 
or .olb must be supplied). 

An included file may itself include another directive file, 
that is, in the example aUsove, Silespec.lak may contain yet 
another directive file. The level of nested directive files 
allowed depends on the number of files that the operating 
system permits to be opened sisiultaneously. 

LET symbol « expression 

When LET is used, the linker sets the specified symbol to the 
specified value or expression. This directive has the same 
effect as defining the symbol as an EXPORT in an object 
module. Any external references to the specified symbol from 
an object module are set to the value specified in the LET 
directive. Currently, the expression argument must be a 
hexadecimal number. 


B-30 





TLD 32-BlT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 8 


LlBRARY-{ (} ...) } 

This dirsccivs causes che specified objecc ntodule library or 
libraries eo be searched co resolve undefined symbols. The 
parencheses are noc required if only one filespec is specified. 

The order chac che filespecs are specified is che order in 
which chey are searched. If library is used boch on che 
c c am a nd line and in che direccive file, che libraries specified 
on che eosotand line will be searched firsc followed by chose 
specified in che direccive file. 

TXDlnk will process che library direccive or swicch ac che 
poinc where ic is specified, cherefore, ic should be specified 
afcer includes and searches. 

This direccive has che saste funccionalicy as che linher S&ARCR 
direccive and LIBRARY swicch which is described in Chapcer S. 

MEMORY (inem_cype_naae. base_address, Ieagch_in_words, - 
word_sise_in_bics) 

This direccive describes a memory unic ocher chan i960 scandard 
memory co which TLDlnh will allocace concrol seccions 
concaining objeccs specified in pragma Memory JCmic. The 
amm^cype_name argumenc is che characcer scring specified Pragma 
Memory_anic, che base^address argtimenc is che acaurcing address 
hex value in special memory where che memory unic objeccs are 
CO be allocaced, che Ieogch_in_word5 argumenc is che hex va^ue 
of che size in words of che special memory locacion, and che 
word_size_in_bics argumenc is che hex value of che size in bics 
of each word of special memory. 

RESERVE (vaddr«vaddress, len>size_in_byce5{,...}) 

This direccive indicaces chac no relocacable concrol seccions 
are co be loaded inco che specified address space. 

SEARCH file 

When SEARCH is used, TUlnic searches che specified file for 
modules which define currencly undefined excemal references. 
These modules are included as if chey had been specified in an 
IKCLUSE direccive. Cndefined weaJc excemal references (i.e., 
associaced wxch weak IMPORT) do noc cause inclusion on a 
search, buc if an excemal is weakly referenced (i.e., 
associaced wich WEAK IMPORT) and scrongly referenced (i.e., a 
regular IMPORT), ics defining module is loaded by SEARCH. Hew 
excemal references from modules included from che search file 
may cause addicicnal modules co be included from che search 

B-31 


cm 






TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 9 


file, regardless of cde oxrder of modules in thm search file. 

For exasvle, if Che prograa references only S, S references T. 
and Che library eoneams T followed by S, boch S and T ^u:e 
included from che lib.rary. 

11110 direccive has che sasie funccionalicy as che linker LIBRARY 
direccive and LIBRARY swlcch which is described in Qiapeer 5. 

SET nasw' { (}aeeribueelavaluel{ .aceribuce2avaiua2. ...}{)} 

This direccive secs each specified accribuce co che 
corresponding value for che specified concrol seccion or 
group. The argumac nane can be aodule-aaam, 
aodule-naaie:csecc*aaine. or :group-naBie. If module-aame is 
specified (wichouc tcsecc-nama) Chen che wild card "*■ is 
assumed for che cseee-naae and all concrol seccions of che 
specified load module are used. The parencheses are require 
only if more chan one accribuce is specified. Because che 
group>name is associaced wich che "null" module, ic is always 
preceded by che null module name: a colon (:) . 

This direccive. as well as che GROUP direccive, can refer co I 

aecribuces in pragma Accribuce in che source file. Refer co | 

ebe Reference_Documenc for che TLD Ada Compiler for furcher j 

informacion on pragma Accribuce. | 

If no daca or code accribuce is specified and an inscruccion 
(code) concrol seccion is included in che specificacion, che 
concrol seccion or group will have che code accribuce. If daca 
concrol seccion<s) are also specified, a warning message is 
displayed indicacing chac mixed inscruccion and daca concrol 
seccions have been included and chac che code accribuce is 
assumed for che group. If no daca or code accribuce is 

specified and no inscruccion (code) concrol seccion is included 
in che specif icacion, che concrol seccion or group will have 
che daca accribuce. 

Wild card symbols may be included in che module-name and 

cseec-name consiscing of "** which macches one or more 

characcers and ”?" which macches exaccly one characcer. All 

modules and concrol seccions of che objecc module files lisced 
in che include direccive (s) chac macch che wild card paccem 
are selecced. 


B-32 








TLD 32-BIT UNIVERSAL LINKER 

OzRECTivc Language 


I960-LNK-2C 

4 - 10 


Accribueas tnay b« one or mor* of cha following co sac or 
rafaranca an accribuca valua: 

V3U3DR 

ia cha baginning virriial aiddrasa of tbia caacc. zt 
conaiacs of a hax or daciaial nianbar. To sac address (as) 
in region 3, an aighc*digic, non-oagaciva, hax number 
muse be used. 

PADDR 

ia cha beginning physical address of this csacc. Sinca 
cha lin)car does noc nomailly assign physical addresses, 
chis accribuca ssxsc be sec before it is referenced. 

LEZI{G7«} 

ia Cha langch of chis csacc. ^ 

AZ.IGN 

is the alignmanc used for chis csacc. 

READ 

is a boolean TRUE if cha csacc is all readable, 
ochervise, ie is FAZ,SB. 

NOREAD 

is a boolean TRBK if cha csacc is noc all readable, 

ochenrisa, ie is FAZ,SE. 

WRITE 

is a boolean 'i'ROK if cha csacc is all writable, 

ocherwise, ie is FAZ,SE. 

NOWRITE 

is a boolean TROE if cha csacc is noc all wricable, 

ocherwise, ic is FALSE. 

CODE 

is a boolean TRUE if cha csacc is all coda, ocherwise, 
ie is FALSE. 

NOCOOE 

is a boolean TRDE if the csacc is noc all coda, 

ocherwise, ic is FALSE. 

DATA 

is a boolean TRUE if the csacc is all data, ocherwise, 
ic is FALSE. 


B-33 











TLO 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - U 


NODATA 

is a boolsan TRDS i£ chs csscc is noc all daca, 
oehsrviss, ie is FAX«SS. 


B-34 







APPENDIX C 


APPENDIX F OF IHE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ^^ndix are to compiler documentation and not to this 
report. implementation-specific portions of the package STANDARD, vhich are 
not a part of Af^ndix F, are: 


package STANDARD is 


type SHORT_INTEGER is range -32768 .. 32767; 
type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -2.12676E->-37 .. 2.12676E-I-37; 
type LONG FLOAT is digits 15 

range -T.123_558_209_288_95E+307 .. 1.123_558__209_288_95E+307; 
type DURATION is delta 2.0**(-14) range -86_400.0 .. 86_400.0; 


end STANDARD; 


C-1 







APPENDIX F 


Th« Ada laagtiaga dafiaicion allows for csrtain m a rh i n s^dsp sndsnc iaa in a 
conerollod aannar. No machins-dapsndsnt synnax or asaaaric axmaions or 
rastrictions ars allowsd. Tha only allowad iaplaaimtation-dap andanci aa 
corraspond to i«plaawncaton*dapandanc pragmas and atcributas, cartain 
machina-dapandant convantions, as manclonad in diapcar 13 of tha 
lfXL*STC«181SA; and cartain allowad rascrietiona on rapraaantation 
clausaa. 

Ttia fiill dafinition of tha iaqplamantation-dapendant characteristics of 
the TLD VAX/i960 Ada Cosgiilar Systam is prasantsd in this section 
extracted from tha caiig)ilar referanca m a nu a l . 


vax/i960/tronzx 


PAGE 1 








TLD ADA COMPILER 

i960 Tarsit Compiler 


I960-A0A-2C 

5 - 1 


5 i960 target COMPILER 


••ceion idantifias corraapondancaa batwaan faacuras of tha TU)aca 
and sactiona of cha Ada Languaga Rafaranca MaLnual (XJQf) . 


5.1 CH.l - Introduction 

The formal standards for tha Ada Programming Language are provided in 
the Ada Lanctuaoa Reference Manual (LRM) , ARSI/HXL-STD-XSISA. TLD 
Systems has developed TLOacs in the spirit of those standards. 

The Biachine dependencies permitted by the Ada language aure identified 
in LRM Appendix F. No machine dependant syntax, semantic extensions, 
or restrictions are allowed. The only acceptable implesientation 
dependencies are pragmas and attributes, the machine dependent 
conventions explained in UOf Chapter 13, and scsie restrictions on 
, representation clauses. 

TLD Systems has developed implementation-dependant software to 
^ecifically conform to these restrictions and has developed 
implementation-independent pragmas and attributes in tha spirit of tha 
UO*. This software is described, below, in individual discussions that 
follow the topical order (within chapters and appendices) of the LRM. 
For a detailed description of the Run Tima environment, refer to the 
R fl fgtgncc PQCmgnt for-the TLD Ada Run Ti me System. 


5.2 LRM CH.2 - Lexical Elements 

'nie items described in this section correspond to the standards in 
Chapter 2 of the LRM. 


The following limits, capacities, and restrictions are imposed by 
the Ada compiler implementation: 

The m a ximum number of nesting levels for procedures is 10. 'Hiere 
is no limit to nesting of ifs, loops, cases, declare blocks, select 
and accept statements. 


ii 











TLD ADA COMPILER 

z960 Tarsct Compiler 


I960-ADA-2C 

5 - 2 


uiaxinuw nxjobar of lexical elemenca within a language atacea«nt, 
declaration or pragma ia not explicitly limited, but liauted 
depending on the combinatimi of Ada conatructa coded. 

the maximum nuaiber of procedurea per compilation unit ia SOO. 

the maximum number of levela of neating of INCXODS filea ia 10. 
there ia no limit on the total number of IHCLDDBd or WltHed filea. 

Approximately 2000 uaer-defined elementa are allowed in a 
compilation unit, the exact limit dependa iipon the characteriatica 
of the elementa. 

A maximum of SOO aevere (or more aerioua) diagnoatic raeaaagea are 
aillowed for a coopilation. 

the range of atatua valuea allowed ia the aaine aa the range of 
integer valuea, -2147483648..2147483647. 

the maximum number of parametera in a procedure call ia 20. 

the maximum number of charactera in a name ia 120. 

the maximum aource line length ia 120 charactera. 

the maximum atring literal length ia 120 charactera. 

the aource line terminator ia determined by the editor uaed. 

Name charactera have external repreaentation. 


5.3 LRM CH.3 - Declarations and Types 

the itema deacribed in thia section correapond to the standarda in 
Chapter 3 of the LRM. 

Number declarationa aure not aaaigned addreaaea and their namea are 
not permitted aa a prefix to the 'addreaa attribute. 

Objects are allocated by the compiler to occupy one or more 8 bit 
bytes. Only in the presence of pragma Pack or record representation 
clauses are objects allocated to lesa than a word. 

'Address can be aipplied to a constant object to return the address 
of the constauit object. 

Except for access objects, uninitialized objects contain an 


ii 







TID ADA COMPILER i960-A0A-2C 

i960 Tar61T Cowilcr 5-3 


undafiaad valu*. An actaopc to rafaxanca tha valua of an 
uninicializad objact ia not dacactad. 

Tba maafiiBun nvnbar of ammaration litarals of all typas ia lioitad 
only by availabla aymbol cabla apaca. 

Tha pradafinad intagar eypaa ara: 

Zntagar ranga -2_l47_483^64a .. 2_l47^4a3_647. 

Staort_Zncagar ranga •32_7Sa .. 32_768 

3yatam.Min_lnt ia -2_147_483_648. 

Syacam.Max_Inc ia 2_147_4a3_647. 

Tha pradafinad raal typaa ara: 

Float digita 6. 

Long_Ploat digita 15. 

Syatem.Max_Oigita ia 15. 

Thara ia no pradafinad fixad point typa naaia. Fixad point typaa 
ara iaplamantad aa data dapanding upon tha ranga of valuaa by whi^ 
tha typa ia conatrainad. 

Indine eonatrainta and othar addraaa valxaaa (a.g., aceaaa typaa) ara 
lioitad to 2147483647. 

Tha maximum array siza ia liaiitad to 2147483647. 

Tha maximum string length is 2147483647. 

Accass objects are implemented as an unsigned integer. The access 
literal Hull is ia^lemenced as 0. 

There is no limit on the number of dimensions of an array type. 
Array types are passed as paraaieters opposite unconstrained formal 
parameters using a descriptor packet vector. 

Additional dimension bounds follow immediately for aunrays with more 
than one dimension. 


Packed strings aure generated instead of unpacked strings. 










TLD ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 

5-4 


5.4 LRH CH.4 - Names and Expressions 

TtM itams daseribad in this saccion corraapond to tha standards in 
Chaptar 4 of tha LRH. 

MBChina_Ovarflows is True. 

Pragsia Controllad has no offset ainca garbago collaction is navar 
parfoxsMd. 


5.5 LRM CH.5 - Statements 

Tha itasia dascribod in this saction corraapond to tha standards in 
Chaptar S of tha UOf. 

Tha w-if-i tmww nionbar of statmanta in an Ada source program is 
undafinad and limited only by symbol table space. 

Ohless they are quite sparse, Casa statamants ^u:e allocated as 
indexed jump vectors and tharaforo, are vary fast. 

Loop statamants with a "for* isvlamantation schema are iaplamentad 
moat efficiently if tha range is in ravarsa and down to zero. 

Data declared in block statements is elaborated as part of its 
containing scope. 


5.6 LRM CH.6 - Subprograms 

The itesis described in this section correspond to the standards in 
Chaptar 6 of tha LRM. 

Arrays, records, and task types are passed by reference. 


5.7 LRM CH.7 - Packages 

The items described in this section correspond to the standards in 
Chapter 7 of the LRM. 

Package elaboration is performed dynamically, permitting a warm 
restart without reloading the program. 


ii 










TLO ADA COMPILER 

x960 Target Compiler 


I960-ADA-2C 

5 - 5 


5.8 LRH CH.8 - Visibility Rules 


Hoc arolicatal*. 

HOTS: TXJ) has not produced a m odification of the itui(e) deacribed in 
thie LRM aection or documentatiMi parallel to the information in thie 
LRM aectioo. 


5.9 LRM CH.9 - Tasks 

the items described in this section correspond to the standards in 
Chapter 9 of the LRM. 

Task objects are implesiented ae access types pointing to a Process 
Control Block (PCB). 

Type Time in package Calendar is declared as a record containing 
two integer values: the current value of the real time clock 
counter and the number of ticks that have elapsed on the countdown 
timer. 

Pragma Priority is supported with a range defined in package 
System. The restriction on a dynaaiic expression for a task's 
priority has been removed consistent with Ada 9X. Note: Like Ada 
9X, a pragma Priority placed in the main subprogram remains 
restricted to a compile time static ejqiression. 

Pragsia Shared is supported for scalar objects. 

TZJJada allows either a duration or a clock time to be specified in 
a delay statement. If a diiration is specified, the task is delayed 
for that duration. If a clock time is specified, the task is 
delayed until that clock tiow is reached. 

The format for specifying a duration is: 

delay expression 

where expression is of type Duration. 

The format for specifying a clock time is: 

delay until e;q;ression 
where expression is of type Calendar.Time. 











TLO ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

5 • 6 


PacJcag* Calandar is described in the Rafersnes Document for the tu 
R un Tims System, i960 Target. 


5.10 LRM CH.IO - Program Structure/Compilation 

Ads Program Library processing is described in the Referenpi 
for the TLD Ada Library Manager, i960 Target. 

tlultiple Ada Program Libraries are supported with each library 
containing an optional ancestor library. The predefined packages are 
contained in the TLD standard library, Z560.LIB 


‘5.11 LRM CH.ll - Exceptions 

Exception handling is described in the Reference Document for the TLD 
Run Time System ._ia^D Target . 

Exception objects «ure allocated access objects to the exception name 
string. The implementation of exceptions is described in the Reference 
Document for the TLD Run Tima System, i960 Target. 

Exceptions are implemented by the TLD Ada Compiler System to take 
advantage of the normal policy in real time computer system design to 
reserve 50% of the duty cycle. By executing a saiall nusiber of 
instructions in the prologue of a procedure or block containing an 
exception handler, a branch may be taken, at the occurrence of w 
exception, directly to a handler rather than performing the time 
consuming code of imwinding procedure calls and stack frames. The 
philosophy taken is that an exception signals am exceptioxtal condition, 
perhaps a serious one involving recovery or reconfiguration, ud that 
quick response in this situation is more iiqportant and worth the small 
throughput tradeoff in a real time environment. 

TZDada allows one task to asynchrounously signal a another task by 
raising an exception in the other task. The following Ada statement 
may be used in an Ada program to exercise this capability: 

raise excepcian_name in cask_name 

There is no direct effect on the task raising the exception. It 
continues executing the code following the raise statement. The 
context of the target task is set so that the next time it runs, it 
will act as if the exception had been raised at the point at which it 
was last executing. This feature requires the compiler switch XTRA. 


ii 











TLD ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

5 - 7 


5.12 LRM CH.12 - Generic Units 

G«a«ric ioplasMncation is describad in chs Reference Document: for eha 
TLD Run Time Svscem. i96Q Target. 

A single generic instance is generated for a generic body, by default. 
Generic specifications and bodies need not be conpiled together nor 
need a body be conpiled prior to the conpilation of an instantiation. 
Because of the single expansion, this inplenentation of generics tends 
to be more favorable of space savings. To achieve this tradeoff, the 
instantiations must, by nature, be more general and are, therefore, 
somewhat less efficient tisiewise. Refer to pragma Instantiate for more 
information on controlling instantiation of a generic. 


5.13 LRM CH.13 - Clauses/Implementation 

Representation clause support and reetrictions are generally described 

in Section S.2.F. 

, Additional Information 

A comprehensive Machine_Code pacleage is provided amd supported. 

The specification for this package is included in the 
Hachine_Code_.Ada file. 

The present version of the TLD i960 Ada Compiler System supports 
two forms of code insertion language features. In addition to the 
standard LRM form od record aggregate form of code insertions that 
au:e fully supported, TTDacs sttpporcs an alternative form supplied 
with package Machine^Code that defines a procedure for each i960 
architecture instruction that is intrinsically implemented inline 
by using a pragma Interface with a language type of i960; each such 
procedure results in one instruction being inlined. Because a 
procedure form is used, the restrictions placed upon the 
Machine_Code aggregate form of insertion that prohibit mixing in 
the same scope with declarations, statements, and fxmctions do not 
apply. Furthermore, the procedure form offers a more friendly 
syntax that corresponds more to assembler input that does not 
require all fields to be specified (as is true for machine code 
aggregates) and can make use of parameter defaulting for such 
fields as index registers. 

To further support those users who need to write at the assembly 
level, several additional procedures and pragmas have been added 
that assist the user in accessing Ada expressions, modifying Ada 
operands, and in manipulating registers. Pragma Register may be 










TLD ADA COMPILER 

z960 Taroet Compiler 


I960-ADA-2C 

5 - 8 


appliad to an Ada object to direct the coo^iler to allocate 
(dedicate) the object to the designated register, ase o£ this 
object on the le£t side of an assignaent statesient will result in 
Che right side ei^ression being cQBQ)uted and loaded into the 
register associated with the left side object, a la C register 
variables. Use of the object in a value reference context will 
restilt in a use of the valtie currently found in the associated 
register. This approach permits direct access to values from 
cosplicated Ada expressions, pacJced laid subscripted ^erands, 
discriminated record coeponents without having to Icnow how the 
coBipiler actiially allocated the objects. Two additional procedures 
are defined. Protect and Unprotect, which each take a register 
paraaieter identifying a register that is to be reserved from 
compiler use within the range of statements bracketed lay the 
Protect/Ubprotect call pair. 

Pragma Interface with a language type of Interrupt will result in 
the prologue and epilogue of the indicated procedure generated to ^ 
conform to the TLDrtx conventions for interrupt handlers. A 
language type of Void will prevent the compiler from generating any 
prologue or epilogue code and leave the responsibility for the 
procedure entry and exit code to the statements within the 
procedure: usually the above described intrinsically built-in 
machine code procedures. 

Ubchecked^Deallocation and Unchecked_Conversion are supported. 

Procedure Unchecked^Deallocation (LSM 13.10.1) 

Function Uhchecked Conversion (LRH 13.10.2) 


5.14 LRM CH.14 - Input/Output 

The itesis described in this section correspond to the standards in 
Chapter 14 of the LRM. 

Pile I/O operations are not supported. 

Input/output pac)uiges and associated operations are explained in 
Section 5.2.F of this manual. 


11 








TLD ADA COMPILER 

x960 Target Compiler 


I960-ADA-2C 

5 - 9 


5.2.A LRM App.A - Predefined Language Attributes 

itama rafarancad in chia saction corraapond to tha acaxidarda in 
Appandix A of tha LRU. 

All LRU'dafinad attributaa are atjpportad by tha lliDaca. 


5.2.B LRM App.B - Predefined Language Pragmas 

Tha itams daacribad in thia aaction corraapond to tha atandarda in 
Appandix B of tha LRM. Any differencea from tha ia^lementation 
daacribad in tha LRM are liated balow. 

PRAGMA CONTROLLED 

This pragma ia not sixpported. 

PRAGMA ELABORATE 

Thia pragma ia iiqileaientad aa daacribad in tha LRM. 

PRAGMA INLINE 

Thia pragma ia in^)lamantad aa daacribad in tha LRM. 


PRAGMA INTERFACE 

pragma interfaca {liaiguAge_aame, Acla_enticy_n^une{,string)) ; 
pragma intarfaca (ayatam, Ada_eaci ty_naae) ; 

Pragma Intarfaca allova refarancaa to aubprograaia amd objects that 
are defined by a foreign module coded in a language other than Ada. 

The following interfaca languagaa aire supported: 

a Assembly for calling Assembly language routines ; 
o Intel's i960 Architecture Specification for defining built-in 
instruction procedures. 

If the Ada_eaC 2 Cy_naae is a subprogram, LRM rules apply to the 
pragma placement. Pragma Interface may be applied to overloaded 
subprogram names. In this case, pragma Interface applies to all 
preceding subprogram declarations if those declarations are not the 
target of another pragma Interface. 


ii 









TLO ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 
s - 10 


For exaoqple: 

p«cJc«g« T««c ia 
procadure Fl; 

pragma Interface (Aaaembly, Pi, "Aaa_Roucine_l") ; 
procedure Pi (xiLong.Floac); 

pragma Interface (Aaaembly, PI, ■Aam_Routine_2*); 
end Test; 

In the example above, the first pragma Interface applies to the 
first declaration of procedure Pi. The second pragma Interface 
applies to only the second declaration of procedure PI because the 
first declaration of PI has already bean the object of a preceding 
pragma Interface. 

If the Jlda_£ncicy-_Name is an object, the pragma must be placed 
within the same declarative region as the declaration, after the 
declaration of the object, and before any reference to the object. 

Void may be used as the Ianguage_naaie to prevent the compiler from 
generating any prologue or epilogue code and leave the 
responsibility for the procedure entry amd exit code to the 
statements within the procedure. 

If the third parameter is omitted, the Ada name is used as the n a m e 
of the external entity and the resolution of its address is assuowd 
to be satisfied at link time by a corresponding naa»d entry point 
in a foreign language module. 

If the optional string parameter is present, the external nasie 
provided to the linker for address resolution is the contents of 
the sczin^. Therefore, this string must represent an entry point 
in another module and must conform to the conventions of the linker 
being used. 

An object designated in an Interface pragma is not allocated any 
space in the coag)ilation unit containing the pragma. Its 
allocation and location are assusied to be the responsibility of the 
defining module. 

PRAGMA LIST 

pragma List (on | off); 

Compiler switch /LIST must be selected for the pragma List to be 
effective. 









TLD ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

5-11 


PRAGMA MEMORY.SIZE 

pragma Mamory_Sire (numeric^Iicerai) ; 

Dila pragma ia not sxipporcad. This number ia declared in package 
Syatem. 

PRAGMA OPTIMIZE 

Tliia pragma ia not supported. Cooipiler awitchea control CQag)iler 
optimisation. 


PRAGMA PACK 

Thia pragma is implemented aa defined in the LRM. 


PRAGMA PAGE 

Thia pragma is implemented aa defined in the LltM. 


PRAGMA PRIORITY 

thia pragma ia implemented aa defined in the LRM. Priority ( 
containa a range defined in Syatem^.Ada. I 


PRAGMA SHARED 

This pragma is implemented as defined in the LRM. This pragma may 
be applied only to scalar objects. 


PRAGMA STORAGE^UNIT 

pragma Storage_Unit (numeric_Iiceral) ; 

This pragma is not sxipported. This number is declared in package 
System and has 8 bits per byte. 


ii 







TLD ADA COMPILER 

x960 Target Compiucr 


I960-A0A-2C 

5-12 


PRAGMA SUPPRESS 


pragma Suppress (access_checic) ; 
pragma Suppress (all_checks); 


The all.checJcs parameter eliaumates all run time checks with a 
single pragma. Zn addition to the pragma, a compiler switch 
permits control of run time check suppression by cnsmand line 
option, eliminating the need for source changes. 


pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Si^resa 


(discriminant_check) ,- 
(diviaion_check); 
(elaboration^check); 
(index_check); 
(length_check); 
(range_check) ; 
(overflow_check); 
(storage_check); 


PRAGMA SYSTEM.NAME 

pragma System^Name (enuoexacion_iiceraI); 

This pragma is not supported, instead, compiler option is used to 
select the target system and target Ada library for compilation. 

5.2.C LRM App.C- Predefined Language Environment 

The items described in this section correspond to the stemdards in 
Appendix C of the LRM. 

PACKAGE STANDARD 

The specification for this package is included in the Standard .Ada 
file. 


5.2.D LRM App.D - Glossary 

Mot applicable. 


ii 










TLD ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

5 - 13 


5.2.E LRM App.E - Syntax Summary 

R«f«r to "Appendix B. Ada Language Syntax Croaa Reference* for the TLD 
croea>referenced expreaeion of thia inforaweion. 


5.2.F LRM App.F - Implementation Characteristics 

The itena daacribed in thia aection correapond to the standarda in 
A^endix F of the LRM. 

Implementation-Dependent Pragmas 

PRAGMA ADDRESS.SPACE 

pragma AddreBs_Space (naiiie{, suhsy’scem_naine}) ; 

Thia pragma allows users to specify the association of a 
cosipilacion unit with a logical address space. This capability 
will siipport the definition of i960 Extended Architecture "Domains" 
• and domain calls. 

The following switch may be entered on the TLDada coiwnand line and 
used instead of this pragma to asaociate cosgjilation \mit(s) with a 
logical address space. 

/addresB^spaceanamej (naae, subsystemjaame) 

In either the pragma or the switch, name is the naoie of the address 
space and sut8yatem_pame is the name of the subsystem to which the 
address space belongs. If subsyscemjaame is not supplied, then the 
address space does not belong to a subsystem. 

This pragma may ^jpear in any cce^ilation unit. The command line 
switch may appear in any compilation, and applies to all the 
compilation units in the cos^ilation. 

This capability does not yet allow users to indicate objects that 
are to be implemented ud referenced as independent objects. 

TLDlnlc will verify that all compilation units in the link have an 
address space attribute of the sasie value, or have no address space 
attribute and will create either a domain (if am address attribute 
is specified) or a program (if no address space attribute is 
specified). 


ii 







TLO AOA COMPILER 

i960 Tarcct Compiler 


I960-ADA-2C 

5 - 14 


PRAGMA AOORESS.SPACE.ENTRY 

pragma Addr«««_Sp«c«_Bncxy (i3aBe{, eatryjcambez) {, anciy__type)) ; 

Aia pragma allowa usars to in d i c ata which subp r ogr a ma roprasant 
•acriaa into tha clafinad logical addraaa spaca. This capability 
will support tha dafinition of i960 Bxtandad Architactura "DosAins* 
and domain calls. 

Tha n a me is tha name of a praviously daclarad subp r og r am, tha 
ancxy_suBiber is an intagar axpraasion %fhich is avaluatabla at 
compila time, and tha enezy__cypa is ona of tha following: Local, 
Suparvisor, or Subsystem. If aacry_cype is not specified, it 
defaults to Subsystem. 

This pragma may ^^)paar only in a compilation unit for which an 
addraaa space has bean specified either by pragma or command line 
switch. 

This capability does not yet allow users to indicata objects that 
are to be isqplamented and referenced as independent objects. 

T X P ln lc will verify that all compilation units in the link have an 
address space attribute of tha same value, or have no address spaca 
attribute and will create either a domain (if an address attribute 
is specified) or a program (if no auldress space attribute is 
specified). 


PRAGMA ATTRIBUTE 

pragma Attribute (ACCxibuce-NBine»ACCribuce-V’alue. - 
Item-Name{,...}}; 

This pragma allows grouping of control sections with the specified 
attribute. 

If XCem-Mune is oeiitted, the specified attribute applies to all 
control sections in the current module. 

If Item-Name is Name'csect, the specified attritmte applies to the 
control section of the module containing Naaie. Name may Ise a 
label, procedure, or data object. 

If Item-Name is Name'code, the specified attribute applies to the 
code control section of the module containing Name. 


ii 








TLD ADA COMPILER 

x960 Target Compiler 


I960-ADA-2C 

5 - 15 


If Ztem-Uamm is MBM'daea. cha specified accribuce applies co the 
data control section of the module containing Masie. 

If Xtoi'Maaie is iAuie'c«:stant, the specified attribute applies to 
the constant control section of the module containing Mssie. 

Nb other form of I tea-name is allowed. 

The linker directives GKOOP and SET, described in Chapter 4 of the 
Reference Document for the TLD Linker can refer to attributes in 
pragma Attribute in the source file. 


PRAGMA AUDIT 

pragma Audit {Ade-aaae{, _}) ; « 

This pragma causes an error message to be generated for the 
compilation in which an Ada tutme, that is specified by this pragma, 
is referenced. The Ada nasie may be a package, scope, data, etc. 


PRAGMA COMPRESS 

pragma Compress {subtypejaaae ); 

This pragma is similar to pragma Pack, but has subtly different 
effects. Pragma Compress accepts one parasieter: the name of the 
sxibtype to congress. It is implemented to minimize the storage 
requirements of subtypes when they axe used within structures 
(arrays amd records) . Pragma Compress is similar to pragma Pack in 
that it reduces storage requirements for structures, and its use 
does not otherwise affect program operation. Pragma Coef)ress 
differs from pragma Pack in the following ways: 

o Onlike pragma Pack, pragsia Compress is applied to the subtypes 

that are later used within a structure. It is not used on the 

struct\ires thesiselves. Zt only affects structures that later 
use the sxibtype; storage in stack fraoiss and global data axe 
unaffected. 

o Pragma Compress is applied to discrete subtypes only. Zt 

cannot be used on types. 

o Pragma Compress does not reduce storage to the bit-level. Zt 

reduces storage to the nearest "natural machine size". This 
increases total storage requirements, but minimizes the 
performance impact for referencing a value. 


11 





TLD ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 

5 - 16 


For axainple: 

■ubeyp* Snall_Znt is Zncsgsr range 0 .. 255 ; 

pragma Coopresa (Saall_Znt:) ; 

type Num_Array is array (1 .. 1000) of Small.Xnc; 

In this exaagile, Saall_lnt will be reduced from a 32-bit object to 
an unsigned 8-bit object when used in Num_Array. 

If pragma Coogiraas had not been used then Small_Int would be the 
sasw aise as Integer. This is because a subtype declaration should 
not change the underlying object representation. A subtype 
declaration should only isgtose tighter constraints on bounds. In 
this manner a subtype does not incur any extra overhead (other than 
its range checking), when compared with its base type. Pragma 
Coopresa is used in those cases where the underlying representation 
should change for the subtype, therefore: 

o Small_Int is coopatible with Integer. It may lae used anywhere 
an integer is allowed. This includes out and in out parameters 
to subprograsis. 

o A Saiall_lnt object is the same size as Integer when used by 
itself. This minimizes run tisie overhead requireaients for 
single objects allocated in the stack or as global data. 

o Small.Int is 8 bits «rtten used within a record or an array. 
This can dramatically reduce storage requirements for large 
structures. The access performance for compressed elwnents is 
very near that of the ua-conpressed elements, but a slight 
performance cost is incurred when the compressed value is 
passed as an out or in out parameter to a subprogram. 

NOTE: Small^Int' s storage requirements could be reduced lay 
declaring it as a type rather than a subtype, however, Small_Int 
would not be compatible with Integer, eud this could cause 
considerable problems for sooie users. 


PRAGMA CONTIGUOUS 

pragma Contiguous (type_naae | objece^naae); 

This pragma is used as a query to determine whether the compiler 
has allocated the specified type of object in a contiguous block of 
memory words. 








TLD ADA COMPILER 

x960 Tarcet Compiler 


I960-A0A-2C 

5-17 


Tha coopilar ganaratea a warning nassaga if tha allocation is 
nooconciguous or is undacamiinad. Tha allocation is probably 
noncontiguous whan data structuras hava dynasucally sizad 
coBvanants. Tha aillocation is probably undatsminad tihan 
unresolvad privata typas ara forward typa daclarations. 

This pragaa provides infomation to tha prograsner about tha 
allocation schaaia used by tha coopilar. 


PRAGMA EXPORT 

pragna Export (Ianguage_.naae. ada_encicy_naaie, {string}) ; 

Pragma Export is a conplamant to pragma Interface. Export directs 
tha compiler to make tha ada^ancicy_nama available for reference by 
a foreign language module. The ianguage_naa!e parameter identifies 
the language in %rhich the module is coded. 

Assembly is presently supported by Export. Ada is permitted and 
presently means tha same as Aasesibly. The semantics of its use is 
subject to redefinition in future releases of TLDada. Void may be 
used as the langiULgejaaam to specify the user's language 
convention. As a result of specifying Void, tha Coiqsiler will not 
allocate local stack space, will not perform a stack check, and 
will not produce prologue and epilogue coda. If tha optional third 
parameter, string, is used, the string provides the name by which 
the entity may be referenced by the foreign module. Tha contents 
of this string must conform to the conventions for the indicated 
foreign language and the linker being used. TIJ}ada does not make 
axiy checks to determine whether these conventions aure obeyed. 

Pragma Export supports only objects that hava a static allocation 
and subprograms. If the aefa_entity’_naaie is a subprogram, this 
Export must be placed in the saaie scope within the declarative 
region. If it is am object, the ada_enciQ'_nasie must follow the 
object declaration. 

NOTE: The user should be certain that the subprogram and object 
are elaborated before the reference is made. 


11 






TLD ADA COMPILER 

x960 Target Compiler 


I960-A0A-2C 

5 - 18 


PRAGMA ZF 

pragma Xf {coa 9 iIs_ciae_ei 9 res«ian) ; 
pragma Blsif (ccapiIe_cime_ejqpresaion); 
pragma Blsa; 
pragma Bad{ if}; 

Ttaasa source directives may be used to enclose c on ditio n a l ly 
compiled source to enhance progrsm portability and configuration 
adaptation. These directives may be located where language defined 
pragmas, statements, or declarations are allowed. The source code 
following these pragmas is coopiled or ignored (similar to the 
semantics of the corresponding Ada statements) , depending upon 
whether the compiIe_cisie_e39ression is true or false, 
respectively. The primary difference between these directives and 
the corresponding Ada statesients is that the directives may enclose 
declarations ud other pragmas. 

NOTE: To use the pragma IF, ELSBIF, BX,SB, or BUD, the /XTRA 

switch must bo used. 


PRAGMA INCLUDE 

pragma Include (filejpath_naaie_scring); 

This source directive in the form of a language pragma permits 
inclusion of another source file in place of the pragma. This 
pragsia may occur any place a language defined pragma, statement, or 
declaration may occur. This directive is used to facilitate source 
program portability and configurability. If a partial 
file_pacb_aame_scring is provided, the current default pathnasw is 
used as a template. A file name must be provided. 

MOTE: To use the pragma IRCLODB, the /XTRA switch must be used. 


PRAGMA INSTANTIATE 

pragma Instantiate (opcion{, name}) ; 

This pragma is used to control instantiation of a particular 
generic. 


ii 







TLD ADA COMPILER 

i960 Target Compiler 


I960-A0A-2C 

5-19 


To •scablish a dafaulc ooda of inatanciacion for all ganeric 
instantiacions within cha conpilacion, cha following switch may ba 
antarad on tha TLDada entimand lina and usad instead of this pragma: 

/instantiataaopciotn 

In aithar tha pragma or switch, option instructs tha Coo^ilar to 
instantiata ganarics in tha mannar spacified, ais dascribad balow; 

singla^body - a single body is usad for all instantiations 

macro • each instantiation producas a different body 

In this pragma, n»mn is tha nana of tha generic to which this 
pragma awlica. 

There are two basic forms for this pragma. The first form omits 
tha second parameter, is associated with a generic declaration, and 
is pexfliittad to occur only within a generic formal part (i.e., 
after "generic* but before "procedure*, "function", or "pacJcage") . 
In this form, the pragma establishes tha default mode of 
instantiation for that particular generic. 

The second form uses the second parameter, is associated with the 
instantiation, amd may appear anywhere in a declarative part except 
within a generic formal part. This form specifies what mode is to 
be used for the instantiation of the named generic which follows in 
the scope in trhich the pragma appears. This form of the pragma 
takes precedence over the first form. 

In the following example, assume the following definition: 
generic 

pragma instantiate (single_body) ,- -- pragma 1 

package G ... 
end G; 

generic 

pragma instantiate(macro); 
package H ... 
end H; 


• pragma 2 








TLO ADA COMPILER 

z960 Target Compiler 


i960-ADA-2C 

5 - 20 


pacJcag* A is new G (...) ; 
package B is new G(...); 
package C is new H (...) ,- 
package 0 is new H(...); 

pragm inacanciate(macro. G); *• pragma 3 

package B is new G (...) ; 
package F is new G(...); 

In the above example, packages A and B share the same body, due to 
pragma 1. Packages C, D, B, and F will be treated as macro 
instantiation C and D because macro instantiation is the default 
for H (due to pragma 2) and for E and F because they follow pragma 
3. 

In both the pragma and switch: 

o Nested instantiations and nested generics aure supported and 
generics defined in library units are permitted. 

o It is not possible to perform a macro instantiation for a 
generic whose body has not yet been compiled. 

In this pragma: 

o It is also not possible to perform a macro instantiation 
from inside a single*bodied instantiation, because the 
macro instantiation requires ixiformation at compile tisie 
which is only available to a single-bodied generic at 
execution time. 

In the event of a conflict between the pragma and switch, the 
switch takes precedence. 

Please refer to Section 3.12 "(Tenerics" for more information on the 
advantages and disadvantages in using single_body generics versus 
macro generics. 


PRAGMA INTERFACE.NAME 

pragma Interface_Naine {AdA_eazicy_name, scriag) ; 

This pragma takes a variable or subprogram nam wd a string to be 
used by the Linker to reference the variable or subprogram. It has 
the saoie effect as the optional third parameter to pragma 
Interface. 


ii 









TLO ADA COMPILER 

x960 Target Compiler 


I960-ADA-2C 

5 - 21 


PRAGMA ZO.OBJECT 

pragma XO_Objecc {objecc^aaate \ cype_naine{; 

An ZO_Objacc ia an objacc which is concainad wichin a paga 
(409€ bycas) and which bagina and anda on a full word (4 byca) 
boundary. 16 bytas of apaca pracading cha IO_Objacc aura rasarvad 
by cha Cooipilar for usar-spacifiad usa. An objacc is spacifiad co 
ba an ZO^Objacc by usa of cha pragma ZO_Objacc. 

If pragaia ZO_Objacc ia appliad co a cypa, chan any objacc of chac 
Cypa ia an I0_0bjacc. If pragma I0_0bjocc is appliad co an objacc, 
Chan chac objacc is an lOjObjacc. 

Only scacic objaccs may ba I0_0bjaccs. If an accampc is m ad s co 
spacify an objacc which ia noc scacic (a.g., an objacc daclarad 
wichin a subprogram) as an IO_Objacc, TLDada issuas a warning 2 uxd 
cha objacc is craacad as * normal objacc. 

Tha following is an axampla of Ada sotirce in which pragma I0_0bjscc 
ia appliad co an objacc: 


cypa Buffar_Typa is ... 
pragma I0_0bjacc (Buffar_Type); 

Bu£far_Objacc : BufferJTypa ; 

An lO^^Objecc can only ba appliad co scalaur or composica Cypas and 
objaccs buc cannoc co componenc(s) of a composica cypa. 

An IO_ACCribuca can ba usad co dacaxmina whachar or noc an objacc 
is an I0_0bjacc and co recum ics valus. Rafar co saccion 
Implamancacion-Dapandanc Atcribucas in chis Chapcar for mora 
infoxmacion. 


PRAGMA INTERRUPT.KZND 

pragma Incarrupc_Kind {encryjaame, encxy_cype{, duracion}) ; 

An incerrupc encry is craacad as an "ordinary ancry in cha absanca 
of pragma Incarrupc_Kind. Whan pragma Incarrupc_Kind is usad, an 
incarrupc encry may ba craacad as a "condicional" or "cimed* encry. 


ii 









TLD ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

S - 22 


This pragma anise eippear in che casJc specificacion containing cha 
ancry namad and aftar tha encry_najne is daclarad. Thraa 
eoczy_types ara possible: ordinary, timed, and conditional. Tha 
optional pauramatar duration is applicaJbla only to timed entries and 
is the maximum time to wait for an accept. 

For an ordinary entry, if the accept is not ready, the task is 
queued. For a conditional entry, if the accept is not ready, tha 
interrupt is ignored. For a timed entry, if the accept is not 
ready, the program waits for the period of time specified by tha 
duration. Zf the accept is not ready in that period, the interrupt 
is ignored. 


PRAGMA LOAD 

pragma Load (iicerai_scring); 

This pragma otakes the Compiler TLDada include a foreign object 
(identified by the literal^string) into the link comnand. 


PRAGMA MEMORY.UNIT 

-pragma Memory^tJnit (mem^cypo^aame, oJt)jecc_aame | type_aame, {...}); 

TLDacs will locate objects in memory units other than i960 standard 
memory. Such objects are specified by use of pragma Memory_UQit. 
TLDada creates a control section for the specified memory unit and 
allocates the specified objects or all objects of the specified 
type to that control section. It passes the oiemory unit 
information to TLDlnk in the object module. The user specifies the 
location and size of the non-standard owmory unit to link through a 
MEMORY directive. The mem^type^name is the name of the memory unit 
and is currently one of the following: 

SPE 

HMB 

GLOK 

LOT 

SPMMZC 

PBMMZC 

SPMCASZU 

PBMCASIU 

FITS 

MHVM 

WWPROM 

SUBBUS 


ii 







TLD ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

5 - 23 


and aithar otojeet_aaae (tha apacifiad objacc) or tba c>pe_naBe (all 
objaccs of thac typa) may ba apacifiad. 

For axampla: 

pragma Maiiio3ry_anit (SPB, BuffarJTypa) ; 

will collacr all objacca of Buffer_Typa in a control aaccion for 
cba mamory unit name SPS. 

The only legal reference to an object in a mamory unit ia a 
'addraaa reference. 


PRAGMA MONITOR 

pragma Monitor; 

The pragma Monitor can reduce taabing contesct overhead by 
eliminating conteict switching. Thia pragma identifies invocation 
by the cooipiler. with pragma Monitor, a simple procedure call is 
used to invoke task entiry. 

Generally, pragma Monitor restricts the syntax of an Ada task, 
liaiiting the number of operations the task performs and leading to 
faster execution. 

The following restrictions pertain to Ada constructs in monitor 

tasks: 

o Pragma Monitor must be in the task specification. 

o Monitor tasks must be declared in library level, nongeneric 
packages. 

o A monitor task consists of an infinite loop containing one 
select statement. 

o The "when condition* is not allowed in the select alternative of 
the select statement. 

o The only selective wait alternative allowed in the select 
statement is the accept alternative. 

o All escecutable stateswnts of a monitor cask must occur within an 
accept body. 

o Only one accept body is allowed for each enciry declared in the 
cask specification. 


ii 






TLD ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

S - 24 


If « caalc body violataa rescricciona placed on monitor taslca, it is 
identified as erroneous and the cosqpilation fails. 


PRAGMA NO_OEFAULT_ZNZTZALZZATZON 
pragma Mo_Oefault_Initialization; 

pragma No_Oefault_Initializacion (cypename{, ... }) ; 

The LSM requires initialization of certain Ada structures even if 
no explicit initialization is included in the code. For example, 
the LSM requires access_type objects to have an initial value of 
"NULL.* Pragma No_Oefault_Initialization prevents this default 
initialization. 

In addition, initialization declared in a type statement is 
suppressed by this pragma. 

TLD implementation of packed records or records with representation 
clauses includes default initialization of filler bits, i.e., bits 
within the allocated size of a variant that are not associated with 
a record co m po n e n t for the variant. Mo_Default_Initializatian 
prevents this default initialization. 

This pragma must be placed in the declarative region of the 
package, before any declarations that require elaboration coda. 
The pragma remains in effect until the end of the compilation unit. 

NOTE: To use the pragma, NO_OBFAnLT_INITXALIZATIOM, the /XTRA 
switch must be used. The use of this pragma may eiffect the 
results of record comparisons ..nd assignments. 


PRAGMA NO.ELABORATION 

pragma no_elaboration; 

Pragma No_Elaboration is used to prevent the generation of 
elaboration code for the containing scope. This pragma must be 
placed in the declarative region of the affected scope before any 
declauration chat would otherwise produce elaboration code. 

This pragma prevents the unnecessary initialization of packages 
that are initialized by other non-Ada operations. Pragma 
No_Blaboration is used to maintain the Ada Run Time Library 
(•riartl) . 









TLD ADA COMPILER 

x960 Target Compiler 


I960-ADA-2C 

5 - Z5 


For axas^zle: 

packago T««c ia 

Pragaia Mo^Blaboracion; 
for PrograB^Staciis^Word \isa 
racord at ood 8; 

Syatoa_Ilaak at 0*WORD ranga 0..7; 

Proraccion_lCay at 0*WOBD ranga 10 .. 11; *- bits 8,9 uauaad 

and record; 
and Teat; 

Zn tha above example, the tio_Blaboration pragma, preventa the 
generation of elaboration code for package Teat aince it containa 
unuaed bita. 

NOTE: To uae the pragma, NO_ELABORATION, the /XTRk awitch muat 

be uaad. The uae of thia pragma may affect the reaulta of record 
compariaona and uaignmanta. 


PRAGMA NONZERO 

pragma Nonzero (record_cype_oame); 

If tha named record type haa *holea” between fialda that ara 
normally initialized with zeroea, thia pragma will auppreaa tha 
clearing of the holea. If tha named record type haa no *holaa”, 
thia pragma haa no effect. When zeroing ia diaabled, compariaona 
(equality and non^equality) of the named type are diaallowed. ttaa 
uae of thia pragma can significantly reduce initialization time for 
record objects. 


PRAGMA PUT 

pragma Put (vaiue{, ...}); 

Pragma Put takes axiy number of eirgumenta and writes their value to 
standard output at coagiile tiaie when encountered by the Coaviler. 
The arguments may be expressions of zuxy string, enxmieration, 
integer type, or scalar expresaion (such as integer'size) whose 
value is known at cooqpile time. This pragma prints the values on 
the output device without an ending carriage return; pragma 
Put_l,ine is identical to this pragma, but adds a carriage retiizn 
after printing all of its arguaients. 


ii 










TLD ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

5-26 


this pragma ia uaaful ia coaditianally*caagiilad coda co alerc cho 
prograanar to problau chat might not otharwiaa com to his 
attantion via »n axcaption or a cQa^ila-tiBio error. 

This pragma may appear anywhere a pragma is allowed. 


PRAGMA PUT.LZNE 

pragma Put^Ztine (valua{, —}) ; 

Pragaia Put^Line takes any nimbar of arguaiencs and writes their 
value to standard output at coopila time when encountered by the 
Coogiiler. the arguments may be expressions of any string, 
enumeration, integer type, or scalar expression (such as 
integer*size) whose value is Icnown at cosgiila time. This pragma 
prints the values on the output device and adds a carriage retu^ 
after printing all of its argxjmants; pragma Put is identical to 
this pragma, but prints the values without an ending carriage 
return. 

This pragma is usefxtl in conditionally-compiled code to alert the 
programmer to problema that mig^t not otherwise cooie to his 
attention via an exception or a conqpile-time error. 

This pragma may appear anywhere a pragma is allowed. 

PRAGMA REGISTER 

pragma Register (object^name, register^avmber) ; 

This pragma allows limited register dedication to an object for the 
purpose of loading registers with complex Ada expressions or 
storing registers into coo^lex operands within machine code 
insertion subprograsis. The Compiler dedicates the specified 
register to the specified object until the end of the scope is 
reached or until it is released through a call to the subroutine, 
nnprotect, in the Machine^Code package. The objeccjaaxae is the 
name of the object to be dedicated to the register and 
registerjaimber ia the register number (without the ”R* prefix that 
is valid for the particular target). 

These objects may be used on the left or right side of an 
assignment statement to load or store the register, respectively. 


ii 







TLD ADA COMPILER 

z960 Tarset Compiler 


Z960-ADA-2C 

5 - 27 


PRAGMA TCB.EXTENSZON 

pragma TCB_Bxtenaion (value); 

Tbia pragma ia uaad to extend the aiae of the Taah Control Block on 
the ataclc. It can be uaed only within a taak specification. The 
parameter passed to this program must be static and represents the 
size to be extended in bytes. 


PRAGMA UNALIGNED 

pragma thialigned(name, ...); 

This pragma ia uaed to accommodate an access object that contains, 
or might contain, an address which is not four byts aligned. The 
name parameter identifies an access type or object that contains 
unaligned address values. The name parazieter may also refer to a 
formal parameter passed by address that might be occasionally 
passed an unaligned actual parameter. 


PRAGMA WZTHIN.PAGE 

pragma Within^Paga ( eypojaaam) ; 
pragma within_Page (object.naaie); 

NOTE: The cypejaame or pbject^aame must have been previously 
declared in the current declaration region and these declarations 
must be in a static data context (i.e., in a package 
specification or body that is not nested within any procedure or 
function). 

This pragma instructs the compiler to allocate the specified 
object, or each object of the specified type, am a contiguous block 
of mesiory words that does not span auxy page boundaries (a page is 
4096 bytes). 

The compiler generates a warning message if the allocation is 
noncontiguous or not yet determined (see the description of pragma 
Contiguous, above) . Additionally, the compiler generates a warning 
message if the pragma is in a nonstatic declarative region. If an 
object exceeds 4096 bytes, it is allocated with an address at the 
beginning of a page, but it spans one or more succeeding page 
boundaries and a warning message is produced. 


ii 







TLD ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 

5 - 28 


PRAGMA VOLATILE 

pragna Volacila {vmrxatle^aiaplejamma) ; 

niia pragna parfozma eha aana f\mccion aa Pragma Sharad, howavar, 
it alao appliaa to ccsgioaita cypaa aa wall aa scalar cypas or 
aceass typas. 

Implementation-Dependent Attributes 

AOORESS.TYPE 

Tha attribuca ' AddressJTypa i* used in a length representation 
clause to indicate that the address type is to have the 
characteristics of an access descriptor (with a tagged bit). 

The fomat is: 

for type • name 'AddreasJType use Access_Descriptor 


TASK^IO 

The attribute 'Taslc_IO is tised only with task objects. This 
TU)*defined attribute returns the actual system address of the task 
object. 

lO.ATTRIBUTE 

The attribute ' ZO_Attribute is used to determine whether or not aui 
object is an I0_0bject. 

When IO_Attribute is applied to an object, it returns a value of 
type Object_Attribute_TVpe, idtich is a private type declared in the 
package System. 

If the object ^ an XO_Object, then the value returned is the 
address of a record containing the address of the object and the 
number of bits in the object including any bits necessary for 
padding (and does not include the preceding 16 bytes of reserveo 
user space). 

If the object is not an I0_0bject, then the value returned is 
Invalid_Object_Attribute, which is also defined in the pacicage 
System. 


ii 









TLO ADA COMPILER 

z960 Target Compiler 


I960-A0A-2C 

5 - 29 


Ttim aasociation of an ZO^Attribuco with its ZO_.Objsct is naintainad 
only at caBf)ils tins. For sjcaapls. if an lO^Object is passsd as a 
parasMtsr to a subprogram, than within tha subprogram, tha 
ZO_Attributa for that ZO_Objoct has tha valtia 
lnvaIid_Objact_Attributa. 

Tha following is an exampla of obtaining tha valua ratumad by 
' ZO^Attributa for tha ZO_Objact Buffar_Objact shown in tha axampla 
abowa (undar tha Pragma ZOjObjact subsaction handing) . 

A procadura idiich raads information into an lO^Objact is dsfinad as 
lollows: 

procadura Gat (...; Buff_Attr : Systam.Object_Attributa_Typa; ...); 

Tha procadura is callad ais follows: 

Gat (..., Buffer_Object'IO_Attribute, ...) ; 

In tha above exampla, the address of a record containing the 
address of the object and tha number of bits in tha object are 
rattixnad for Buffer_Object. 

Package System 

Tha specification for this pacJeaga is included in tha Systam^.Ada 
file. 

Representation Clauses 

Record representation clauses are sxipported to arrange record 
components within a record. Record components may not be specified 
to cross a word boundary unless they are arranged to encompass two 
or more ^ole words. A record component of type record that has 
record representation clausa ^plied to it may be allocated only at 
bit 0. Bits are numbered from right to left with bit 31 indicating 
the sign bit. 

When there au:e holes (unused bits in a record specification), the 
compiler initializes the entire record to permit optiaium assignsiant 
and compares of the record structure. A one-time initialization of 
these holes is beneficial because it allows bloc)c compares and/or 
assignments to bo used throughout the program. If this 
"optimization” is not performed, record assignments and cos^ares 
would have to be performed one component at a time, degrading the 
code. 


To avoid this initialization, the user should checJt to be certaun 


ii 






TLD ADA COMPILER 

z960 Tamct Compiler 


I960-ADA-2C 
S - 30 


that no holas ara laft in cha raeord acxucrura. Thia may ba dona 
by incraasing cha siza of the objaccs adjacanc to cha hola or by 
dafining duaoiy raeord cenponanca chat fill cha holaa. zf cha 
laecar machod is uaad, any aggragacas for cha scruccura muse 
contain valuaa for cha holaa u wall as cha *raal* eosponants. 
8van wich cha axcra cooponants. this ^proach should opcisuss spaca 
and spaad in cospariaon to procassing ana cosponanc ac a cioaa. 

Zf cha coBponant_elausa of a raeord raprasancacion spacificacion is 
not in cha saaia ordar as cha cospcnanc^liac of cha raeord 
spacificacion, cha ancira raeord is inicializad, as i ndicatad 
abova. 

Addraaa clausaa ara supporcad for variabla objaccs ud dasignaca 
cha visrctial addrasa of cha objacc. Tha Cospilar Syscam usas 
addraaa spacificacion co accass objaccs allocated by non*Ada means 
and does not handle cha clausa ois a caquasc co allocate the objacc 
ac cha indicated address. Address clauses to specify cha address 
CO which coda should ba ralocacad, are noc suppoircad for 
subprograsia, packages, or casks. 

NOTB: Iiongch clauses ara supported for 'Size applied co objaccs 
ocher chan cask and accass type objaccs and danoca cha nuzibar of 
bits allocacad co cha objacc. 

Langch clausas ara svppoirced for 'SCorage^Siza whan applied to a 
cask type and danoca cha nusibar of words of stack co ba allocacad 
CO Che cask. 

Langch clausas ara supporcad for 'SCorage_Size applied co an 
access type and indicaces the nuzibar of scorage unics co be 
rssaz-rad for cha colleccion. 

Bnumaracion represencacion clausas are siipporced for value ranges 
of Zneegar'First co Zncegar'Lasc. 

An alignment raprasancacion clause has been added chat 
corresponds co Ada 9X Chac zaquescs a subtype or object co ba 
allocated co an address chac is a multiple of the alignment 
value. ICS syntax is 

for objecc_or_subcype'Alignmanc use expression; 

The alignment expression must be a static value. The use of 
multiple alignmanc clausas within cha same control section will 
result in the containing control section assuming an alignmanc 
value which is the greatest common multiple (GCU) of Che 
alignment factors occurring within the control section. 


ii 







TLD ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 

5 - 31 


Conventions for Implementation-Generated 
Names Denoting Implementation-Dependent 
Components 

tti* Conpiler Syscui dafinss no inplemencacion dependenc namaa for 
cenpilar ganaracad racord coo^onanca. 

Two naaiing convanciona ara uaad by TXDaca. All viaibla run ciaia 
lilnraxy aubprograaia and kamal aarvicaa bagin with cha characcar 
"A^*. Global Run Tiaia Syacam daca naaiaa bagin with tha charactara 
"A$". Tha uniqua naaia craacad by tha cooqiilar for ovarload 
raaolution ia conpoaad of tha uaar naata appandad with plua a 

mjur-itmww of thraa charactara darivad from tha conpilation unit naaia, 
followad by thraa digita rapraaanting tha ordinal of tha viaibla 
naaia within tha coopilation unit. Tha maxiaiuai length of this vjtiae 
ia 128 characters. 

Interpretation for Expressions Appearing 
IN Address Clauses 

f 

Address axpresaion values and objects of type Address reprasant: a 
location in the program's linear address space. 

Restrictions on Unchecked Conversions 

Ohchecked conversion of generic foraial private types is not allowed. 

Implementation-Dependent Characteristics 
OF Input-Output Packages 

PACKAGE DIRECT.IO (LRM 14.2.5) 

PACKAGE lO.EXCEPTIONS (UtM 14 . 5 ) 

PACKAGE SEQUENTIAL.IO (LRM 14.2.3) 

Input-Output pac)cages are described in the Reference Document for 
the TLD Ada i960 Run Time System. 


ii 








TLD ADA COMPILER 

z960 Target Compiler 


I960-ADA-2C 
5 - 32 


PACKAGE TEXT.IO (UOf l«.3.10) 

Th« following inpleowncacion-dofinad typas ara daclarad in Taxt_Zo: 

cypa Count is incagar ranga 0 .. 5X1; 
subtypa Fiald is Incagar ranga 0 .. 127 ; 


6 i960 Target Compiler Characteristics 

Dia characteristics of tha target coe^ilar are described in this 
section. 


6.1 i960 Run Time Conventions 

Tha Rxin Tlaa conventions established for the TLD Ada Caag>ilar and Run 

Tiflia Syscasi ara explained in tha Rafarenea Document_ fsOL _ hiA _ZU2_ BUB 

Tima Sv ram. i 960 Target. This information is nacassazy whan tha 
user's application software is coded in a language other than Ada. 


6.2 External Names 

External names are supported to a maximum length of 128 characters or 
the limits isg>osed by the i980 Linker. Tha system dependent character, 

, is left as a in external nasies since it is a legal character 
for the Linker. 


7 Relocatable Object Files 

TLDada produces Relocatable Object Files containing the results of the 
compilation. 

The TLDada Compiler partitions the generated object module into several 
separately relocatable control sections. By default, instructions are 
allocated in control section, $ISSCT$. Literals eire allocated in a 
read-only operand control section, $CONS$. Statically allocated data 
are aillocated in control section SOATAS. The NOCSSG switch may be used 
to combine literals and data into the saaie control section. 

The TLD Relocatable Object File is described in the Referenc e Document 
for the TLD 32-3it Universal Linker, i960 Target. 


ii 











TLD ADA COMPILER 

x960 Target Compiler 


I960-A0A-2C 

5-33 


Th* concsrol MCtion aammm and accributaa asn: 

Ralocacabla Contirol Secciona 


Maaie: 

$XS8CT$ 

9CORS9 

$DAXA$ 

OniAPPBD 


Inatruetiona 

Constants 

Data 

Obauipped 


ACtributas: 


ZRDIRBCT 

DIRECT 

DIRECT 

DIRECT 

DIRECT 

MAPPED 

MAPPED 

MAPPED 

MAPPED 

OMMAPPBD 

WM/KM 

RAMJ3R_RaM 

RAM.OR.ROM 

RAM 

RAM 

Sn/ROM 

MAIM tmORY 

MAIM tg^RY * 

MAIM_MEMORY 

MAIM.MBMORY 

EMPTY 

MOT EMPTY 

MOT EMPTY 

MOT aCPTY 

MOT QIPTY 

DMA 

UnPROTBCTED 

OMPROTBCrED 

OMPROTBCTED 

OMPROTBCTED 

MPRAM 

OMPROTBCTED 

QMPROTSCTBD 

OMPROTECTED 

OMPROTECTED 

PRSG 

OMPROTECTED 

OMPROTBCTED 

OHPROTECTED 

OMPROTECTED 

ROMDNSP 

RO.MECK OMSP 

RO.MECK OMSP 

OMPROTECTED 

OMPROTECTED 

O/I 

XMSTRDCT MEM 

OPERAND MEM 

OPERAND MEM 

OPERAND MEM 

PRLL 

MODDLS ALLOC 

MODULE ALLOC 

MODOLE ALLOC 

MODULE ALLO( 


Theaa attribucaa are alao deacribad in the Reference Document for the 
TLD 32-Bit Oniveraal Linlcer. i960 Target. Sectiona 3 and 4.2 deacribe 
TLDlnh'a uae of actributea, Appendix A deacribea the TLD Relocatable 
Object File attributea and aaaociated valuea. 


8 Target Reference Table 

The following table provides i9S0 peuraneter values. 


ii 













Purpoat: 

X To utUfy th* Ada LRM raquiroaant for packaga SYSTEM 


-■ typa addraaa U ranga 0..16#FFFF FFFF#; 

typ# addraaa ia range -2_1«7_4«32^ -2J^^-^3_647; 
for addraaa'aize uaa 32; 

-• an i960 33-bit accaaa deacr{ptor---Me ignore the 33rd bit here 
type aceaaa_daacriptor ia range •2_U7_4a3_648..2_U7_483_647; 
for accees_daacriptor'aiza uae 32; ” 

type unaigned is range 0..2_U7_483_647; 
for unsigned'size uae 31; ~ 

type ahort_intager is range •32_76a..32_767; 
for short.integer'size uae 16; 

type long_integer is range -2_147_483_648..2_147_4a3_647; 
for long_Tnteger'size use 32;” ” - - - 

-- Note: The order of the elesMnts in the OPERATIHG^^STSTENS and NAME 
-• enuaerations CANNOT be changed--they aust correspond with the values 
-- in the CONFIG.CFG file. 

type Operating_SyateiK is (Unix, Netos, Vaa, Ucad, Nsdoa, Bare, TrtJ^>, RTX); 

type Name is (Paschine, Ns16000, Vax, AfITSO, 28002, 28001, 

Gould, Pdpll, M68000, Pe32l'0, Capa, Aadahl, 

18086, 180286, I80386. 280000, Ns32000. Ibaal, 

H68020, Nebula, Naae_X, Hp, Nbl, Hawk, 111666, 1960); 

type Object_Attribute_Typc is private; 
lnvalid_Object_Attribute ; constant Object_Attribute_Type; 

systea_naae: constant name :« 1960; 

os_nane: constant operating_systeras :■ RTX; 

subtype priority is integer range 1..20; -* 1 is default priority. 

note: the following priority ia probably not valid for the Hawk 
••• and will have to be aodified when tasking is implaaented 

subtype interrupt_priority is integer range 1..15; 

pragma put Hne('>', •>', •>', ' system name, 

' ', os.naae, ' •, •<•, •<•, •<•); 

*• Language Defined Constants 
storsge_unit: constant :> 8; 

memory_size: constant :* 16#4000_0000#; -- 256M words per segment 

min_int: constant :« -2**31; 

max~int: constant :» 2**31-1; 

max^digits: constant :« 15; 

max~mantissa: constant :« 31; 

fine_delta: constant :» 2.0**(-31); 

ticks_per_second : constant :* 1_000_000.0; -- Clock ticks are 1 usees, 

tick ” ; constant ;■ lTo/tTcks_per_second; 

ticks_per_rtc : constant :■ 16#100_0000#; 

-• system specific constants 

address.O: constant address ;■ 0; — Zero address 

nuU_a(Mress: constant address ;■ 0; •* Null ptr as systam.address 

nulCAD ; constant access_descriptor ;■ 0; -- null AD, uftagged 

private 

type Object_Attribute_Type is record 

0bJcct_Addrcss : Address :> nuU.address; 

0bject~$<ze : Integer ;■ Integer'first; 
end record; 

Invalid_Object_Attribute : Constant Object_Attribute_Type :■ 

(Objcct_Address » null.address, 

ObjecOize ■» Integer'first); 
end system; 










... MvssusasasMSUMSuussaissssussmKssKmmKSSxasxsssMssxssssxusssWBSssK** 

—* Th« following ooftwart it the property of TLO Syeteas, Ltd. " 

Copyright (C) TLO System, Ltd., 1992 > 

• •*11 » 

Uhen this software is delivered to the U.S. Government, " 

the following applies: ■■ 

• • *•• M 

RESTRICTED RIGHTS LEGEK) * 

Use, duplication, or disclosure by the Govcmaent is subject to ■ 

restrictions as set forth in subpargraph (c)(1)(ii) of the Rights in ■■ 

...H Technical Data and Coaputer Software clause at S2.227-7013. " 

TLO Systeas, Ltd., Torrance, California * 

... ■•■zxsxxasxsnsxnzzxxsssxsusscxnnaxsuusxxsxzsuszxXBXzxanxsBuszss* 

.. .......♦ 

Source file name: 

SYSTEM.ADA 

Packages defined: 

systea - systea constained constants and types 
Revision history: 

07-21-88 glw new code for Hawk-32: 

add types: short_integer, len 9 _integer 
add 'osvs* to operating_systtgK type 
add 'hawk* to name type~ 
change priority range to 1..200 
change address r^e to 0..16#FFFFFFFF# 
change address'size to 32 bits 
change acaory_size to 16810000000* 


package system is 


*■ SRS Requirements: 

--dextract requirements 
■■PNone. 

••fend 



Package name: 

system - system constrained constants and types 

Initialization entry: 
none 

Types/subtypes defined: 
address 
unsigned 
8hort_integer 
long_jnteger 
operatino_8y8tems 
name 
priority 

i nterrupt_priority 
Objeet_Attrfbute_Type 

Constants dafinad: 

system.name 

os.naaw 

storage_unit 

memory_s1ze 

mln_lnt 

max^int 

max'digits 

maxjnantissa 

fiiw.delta 

tick8_per_s*cond 

tick 

ticks_per_rtc 
address_0~ 
null address 
nulTAD 

Invalid Object Attribute 



















