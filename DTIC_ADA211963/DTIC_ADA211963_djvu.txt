AD-A211 963 


UNCLASSIFIED _. 

C UB: ^» CtASSi f 1CATI0*. 0* T*iS *Aui fnv^r Qi:< •' 

REPORT DOCUMENTATION PAGE 


1. MAORI NUMB l R 


pirc ixmurnoNs I 

' wuL _ >r^QH :ov.?.rr[-ss rp^.v ' 

17. 60V1 ACCESSIOM MO. 3 MC1P11MVS CATALOG MJMfclR 


4. TJUE (*ncivbvtie) 

Ada Compiler Validation Summary Report: 

R.R. Software, Inc., JANUS/Ada 2.1.1, Compaq Deskpro 
386/25 (Host & Target) with Pharlap Dos Extender 

_aaoimi inn 22 - 

mjtnor»; 

Wright-Patterson AFB 
Dayton, OH, USA 

a. MAfORMlMG ORGANIZATION AMO ADDRESS 

Wright-Patterson AFB 
Dayton, OH, USA 

IT" CONTROLLING 0*fIC£ NAME AMD ADDRESS 
Ada Joint Program Office 
United States Department of Defense 
Washington, DC 20301-3061 

14. HOMTORING AGENCr name 1 AODRESS(//ditff rent from Controlling Other) 

Wright-Patterson AFB 
Dayton, OH, USA 

16. DISTRIBUTION STATEMENT (of thu Ktport) 


i Tm Of MER0 R T 6 RERJ00 COHERED 

13 January 7 .1989-1 December 19 

6. PERfORMlNG tlAG. REPORT NJmEER 
6. CO*.TRACI OR 6AANT NJMEEA(j/ 


10. RAOGRAX ELEMENT. PROJECT. TASa 

are* i vorr unit NUMBERS 


12. REPORT OAU 


irv 1989 


IS. SECURITi Class (oUhu ttpon) 

UNCLASSIFIED _ 

IS* gt^UCATIONDO-NGRAOING 

N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of the sbnrsn tnit rr m B‘P<k 2C If O'Ht'tm from Report) 

UNCLASSIFIED 


16. SL'PPlEM-INTARi MOTES 


DTIC 

ELECTS I 
AUG 0 41989 I 


16. (Continue on re*erit i> 0 ( if nt(tu* r y identify t} number) v .~ w 

| Ada Program.*:,ing language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 

| 70. ABSTRACT (Continue o" rtvt'it pPt if nttrsnr t »np ,tfe nt<7> b, 6/or 4 numptr) 

JANUS/Ada 2.1.1, R.R. Software, Inc., Wright-Patterson AFB, Compaq Deskpro ^86/z.o 
under MS DOS 3.31 with Pharlap Dos Extender (Host & Target), ACVC 1.10 

r 

J 

• _ 

DD >UHM 1473 EDIT 10*. 0* 1 M0. 6B IS OBSOlETE 

1 JAN 7) S/M 0107-17-014-6601 _ UNCLASSIFIED _ 

SECURITY CLASS) f 1C *' JO*, of THIS Pace Inft’td) 







Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AF3, OH 45433-6503 


"7 ,■ 


/ 


■ £.• c/;o- 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
William S. Ritchie 
Acting Director 
Department of Defense 
Washington DC 20301 









AVF Control Number: AVF-VSR-225.0289 

88-09-23-RRS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890113W1.10022 
R.R. Software, Inc. 

JANUS/Ada 2.1.1 

Compaq Deskpro 386/25 Host and Target with Pharlap Dos Extender 


Completion of On-Site Testing: 
13 January 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson SP B, OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 






Ada Compiler Validation Summary Report: 


Compiler Name: JANUS/Ada 2.1.1 
Certificate Number: 890113W1.10022 


Host: Compaq Deskpro 386/25 under MS DOS 3-31 

with Pharlap Dos Extender 

Target: Compaq Deskpro 386/25 under MS DOS 3*31 
with Pharlap Dos Extender 


Testing Completed 13 January 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB, OH 45433-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Anai ses 
Alexandria VA 22311 



Ada Joint Program Office 
William S. Ritchie 
Acting Director 
Department of Defense 
Washington DC 20301 


Accession For 

NTTS M 
DT1C T. ;> 
Unannoui 
Justification 



By-— 

Di stribution/_ 

Availability Codes 
lAvall and/or 
Diat I Special 


□ □ 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-1 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS . 2-2 

CHAPTER 3 TEST INFORMATION 

3-1 TEST RESULTS.3-1 

3-2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3-3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3-4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS . 3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . . 3-5 

3.7 ADDITIONAL TESTI C INFORMATION . 3-6 

3.7.1 Pre validation ..3_6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-8 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 





















CHAPTER 1 


INTRODUCTION 


This Validation Summary Report CVSR)^" describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for* example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs tc an Ada compiler and 
evaluating the results. --The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 


1-1 






'INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 13 January 1989 at Madison WI. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has nc nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB, OH 45433-6503 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-2 




INTRODUCTION 


» % 


1.3 REFERENCES 


Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

Ada Compiler Validation Capability Implementers * Guide , SofTech, 
Inc., December 1986. 


Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. . These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines . 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 


1-3 







INTRODUCTION 


Inapplicable An ACVC teat that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler’s conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous U3e of the 
language. 


’ 5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errc.j. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to. check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 


Withdrawn 

test 






INTRODUCTION 


i % 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled d executed. Each Class C test is self-checking 
and produces a PASSED, FA ID, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs -J-'volving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 




INTRODUCTION 


I » 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, the-efore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 






CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: JANUS/Ada 2.1.1 
ACVC Version: 1.10 
Certificate Number: 890113W1.10022 
Host Computer: 

Machine: Compaq Deskpro 386/25 

Operating System: MS DOS 3-31 

with Fharlap Dos Extender 

Memory Size: 3072 Kbytes 

Target Computer: 

Machine: Compaq Deskpro 386/25 

Operating System: MS DOS 3-31 

with Fharlap Dos Extender 

Memory Size: 3072 Kbytes 


2-1 





CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 

(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 17 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler rejects tests containing block statements nested 
to 65 levels. (See test D56001B.) 

(*J) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to six 
levels. (See tests D6M005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
LONG_INTEGER and LONG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated an^ the time at whic h 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Not all of the default initialization expressions for recc - 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits fo r ’ extra precision and 
uses no e' ro bits for extra range. (See test C35903A.) 


2-2 






CONFIGURATION INFORMATION 


(4) NUMERIC_ERROR is raised when a literal operand in a comparison 

is outside the range of predefined Integer, when a literal 
operand in a membership test is outside the range of 

predefined Integer, when a literal operand in a comparison is 
greater than SYSTEM.MAX_INT, when a literal operand in a 
membership test is greater than SYSTEM.MAX_INT and no 

exception is raised when a literal operand in a comparison is 
outside the range of the integer type’s base type. (See test 
CU5232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a fixed 
point membership test is outside the range of the base type 
and no exception is raised when a literal operand in a fixed 
point comparison is outside the range of the base type. (See 
test CM5252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 

attempt to determine the method of rounding, the test results 

indicate the following: 

(1) The method used for rounding to integer is round away from 

zero. (See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round away 
from zero. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 

real expressions is round away from zero. (See test C^AOI-A.) 


e. Array types. 


An implementation is allowed 
CONSTRAINT_SRROR for an array 
STANDARD.I JTEGER'LAST and/or 
implementation: 


to raise NUMERIC_ERROR or 
having a 'LENGTH that exceeds 
SYSTEM.MAX INT. For this 


(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 


2-3 









CONFIGURATION INFORMATION 


(2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an array 
type with INTEGER'LAST + 2 components. (See test C36202A.) 

(3) NUMERIC_ERROR is raised when 'LENGTH is applied to an array 
type with SYSTEM.MAX_INT -*• 2 components. (See test C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises STORAGE_ERROR when the array objects are declared. 
(See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 

INTEGER'LAST components raises CONSTRAINT_ERROR when the 

length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 

either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 

evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target’s subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 

not evaluated in its entirety before CONSTRAI 1T_ERR0R is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are made as choices 
are evaluated. (See tests C43207A and C43207B.) 


2-4 








CONFIGURATION INFORMATION 


(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLIE is not supported for functions or 
procedures. (See tests LA3004A..B (2 tc3ts), EA3004C..D (2 
tests), and CA3004E..F (2 tests).) 


i. Generics. 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and 3C3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 

(3) Generic subprogram declarations and bodies can be compiled in 
separate compilations. (See tests CA1012A and CA2009F.) 

(4) Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

(5) Generic non-library subprogram bodies can be compiled in 

separate compilations from their stubs. (See test CA2009F.) 

(5) Generic package declarations and bodies can be compiled in 

separate compilations. (See tests CA2009C, BC3204C, and 

BC3205D.) 

(7) Generic library package specifications and bodies can be 
compiled in separate compilations. (See tests BC3204C and 
3C3205D.) 

(8) Generic non-library package bodies as subunits can be compiled 
in separate compilations. (See test CA2009C.) 

(9) Generic unit bodies and their subunits can be compiled in 

separate compilations. (See test CA3011A.) 


2-5 








CONFIGURATION INFORMATION 


j. Input and output. 

(1) The package SEQUENTIAL_IO "an be instantiated with 

unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_I0 can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN FILE, OUT FILE, and I 10UT_FILE are supported for 
DIRECT 10. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN_FILE and 0UT_FILE are supported for text files. (See 
tests CE3102E and CE 3 T 021 ..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL 10. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIHECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 

(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 

CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

(10) Temporary sequential files are not given names and not deleted 
when closed. (See test CE2108A.) 

(11) Temporary direct files are not given names and not deleted 

when closed. (See test 0E2108C.) 

(12) Temporary text files are not given names and not deleted when 
closed. (See test CE3112A.) 

(13) Only one internal file can be associated with each external 

file for sequential files when at least one of the internal 
files has write access. (See tests CE2107A..E (5 tests), 

CE2102L, CE2110B, and CE2111D.) 

(14) Only one internal file can be associated with each external 

file for direct files when at least one of the internal files 
has write access. (See tests CE2107F..H (3 tests), CE2110D 

and CE2111H.) 


2-6 









CONFIGURATION INFORMATION 


(15) Only one internal file can be associated with each external 
file for text files when at least one of the internal files 
has write access. (See tests CE3111A..E (5 tests), CE311UB, 
and CE3115A.) 












CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 36 tests had been withdrawn because of test errors. The AVF 
determined that 380 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for 37 tests were required to successfully demonstrate the test objective. 
(See section 3*6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

TT 

L 

TOTAL 

Passed 

128 

1131 

1959 

10 

29 

44 

3301 

Inapplicable 

1 

7 

358 

7 

s 

2 

O 

CO 

<n 

Withdrawn 

1 

2 

33 

0 

0 

C 

36 

TOTAL 

o 

m 

1140 

2350 

17 

34 

46 

3717 


3-1 






TEST INFORMATION 


3-3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

CHAPTER 
7 8 

9 

10 

11 

12 

13 

114 

TOTAL 

Passed 

199 

576 

544 

240 

170 

99 

160 

332 

131 

36 

251 

281 

282 

3301 

N/A 

14 

73 

136 

8 

2 

0 

6 

1 

6 

0 

1 

94 

39 

380 

Wdrn 

0 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

29 

9 

36 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

40^ 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 36 tests were withdrawn from ACVC Version 1.10 at the time of 
this validation: 

A39005G B97102E BC3009B CD2A62D CD2A63A..D CD2A66A..D 

CD2A73A..D CD2A76A..D CD2A81G CD2A83G CD2A84M..N CD50110 

CD2315C CD7205C CD5007B CD7105A CD7203B CD7204B 

CD7205D CE2107I CE31HC CE3301A CE3411B 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 380 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 


3-2 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L.•Z (15 tests) 






TEST INFORMATION 


C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L ..1 (15 tests) 


b. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 


The following 

30 tests 

are not 

applicable 

because this 

implementation does not 
clauses for access types: 

support 

'STORAGE_SIZE 

representation 

A39005C 

C87B62B 

CD1009J 

CD1009R 

CD1009S 

CD1C03C 

CD2A83A 

CD2A83B 

CD2A83C 

CD2A83E 

CD2A83F 

CD2A84B 

CD2AS4C 

CD2A84D 

CD2A84E 

CD2A84F 

CD2A84G 

CD2A84H 

CD2A84I 

CD2A84K 

CD2A84L 

CD2B11B 

CD2B11C 

CD2B11D 

CD2B11E 

CD2B1IF 

CD2B11G 

CD2B15B 

CD2B16A 

ED2A86A 

The following 

16 tests 

are not 

applicable 

because this 

implementation 

does not support a predefined type 

SHORT_INTEGER: 

C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

CD7101E 

B52004E 

C55B07B 

B55B09D 

B86001V 


e. B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_I JTEGER. 

f. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SH0RT_FL0AT. 

h. C45531M..P (4 tests) and C45532i..P (4 tests) are not applicable 
because the value of SYSTEM.MAX_MANTISSA is less than 32. 

i. D55A03E..H (4 tests) use 31 levels of loop nesting which exceeds 
the capacity of the compiler. 

j. D56001B uses 65 levels of block nesting which exceeds the capacity 
of the compiler. 

k. D64005F..G (2 tests) are not applicable because this 
implementation does not support nesting 10 levels of recursive 
procedure calls. 


3-3 














TEST INFORMATION 


l. C96005B is not applicable because there are no values of type 
DURATION'BASE that are outside the range of DURATION. 

m. LA3004A, LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F are not 
applicable because this implementation does not support pragma 
INLINE. 


n. CC1223A contains an expression that is expected to be static, but 
which this implementation treats as non-static; thus, this 
implementation raises an exception rather than providing exact 
evaluation. The AVO agreed that this issue of staticness within a 
generic unit requires further review. 


o. The following 51 tests are not applicable because this 
implementation does not support 'SIZE representation clauses for 
floating point, one dimensional array, and record types: 


CD1009C 

CD2A41A 

CD2A41B 

CD2A41E 

CD2A42A 

CD2A42B 

CD2A42C 

CD2A42D 

CD2A42E 

CD2A42F 

CD2A42G 

CD2A42H 

CD2A42I 

CD2A42J 

CD2A61A 

CD2A61B 

CD2A61C 

CD2A61D 

CD2A61F 

CD2A61H 

CD2A61I 

CD2A61J 

CD2A61K 

CD2A61L 

CD2A62A 

CD2A62B 

CD2A62C 

CD2A64A 

CD2A64B 

CD2A64C 

CD2A64D 

CD2A65A 

CD2A65B 

CD2A65C 

CD2A65D 

CD2A' T 1 A 

CD2A71B 

CD2A71C 

CD2A71D 

CD2A72A 

CD2A72B 

CD2A72C 

CD2A72D 

CD2A74A 

CD2A74B 

CD2A74C 

CD2A74D 

CD2A75A 

CD2A75B 

CD2A75C 

CD2A75D 




• 

The following 

13 tests 

are not 

applicable 

because 

implementation 

does not support record 

representation clauses 

CD1009N 

CD1009X 

CD1009Y 

CD1009Z 

CD1C03H 

CD1C04E 

CD4031A 

CD4041A 

CD4051A 

CD4051B 

CD4051C 

CD4051D 

ED1D04A 




q. CE2102D..F (3 tests), CE2102I..J (2 tests), CE2102N..W (10 tests), 
CE31025..G (3 tests), and CE3102I..K (3 tests) are not applicable 

because this implementation supports CREATE (all modes), OPEN (all 
modes), and RESET (to the same mode) for sequential, direct, and 
text files. 


r. CE2107B..E (4 tests), CE2107L, CE2110B, CE2111D, CE2107G..H (2 

tests), CE2110D, CE2111H, CE3111B, CE3111D..E (2 tests), CE3114B, 
and CE3H5A are not applicable because this implementation does 
not permit the association of multiple internal files with the 
same external file when one of the internal files has write access 
to the external file. The proper exception is raised when 
multiple access is attempted. 


3-4 








TEST INFORMATION 


s. EE2201D and EE2401D are not applicable because USE_ERR0R is raised 
when trying to create a file with unconstrained array types. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default sice of a collection: splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 37 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 


B22003A 324007A 
B29001A B37106A 
B55A01A B63001A 
BA1101E BA3006A 
BA3013A BC2001D 


B24009A 

B49003A 

B63001B 

BA3006S 

BC2001E 


B25002A 

B49005A 

B91001H 

BA3007B 

3C30053 


B26005A 
B5100U 
BA1101A 
BA3005A 
00350'A 


B27005A 

353003A 

BA1101C 

3A300SS 


The following modifications were made to compensate for legitimate 
implementation behavior: 

a. At the recommendation of the AVO, a "PRAGMA ELABORATE (REPORT):" 
was added at the beginning of C39005A to ensure that the 
elaboration of the routines in package REPORT tazes place before 
these routines are called. 

b. At the recommendation of the AVO, the variables V and on line 41 
of test CD2011A were initialized to 5.0 due to PR0GRAM_ERR0R being 
raised when an attempt is made to use the uninitialized variables. 

c. At the recommendation of the AVO, LONG_INTEGER’IMAGE was 
substituted for INTEGER'IMAGE in test ED7006C since 
SYSTEM.MEMORY_SIZE is outside the range of INTEGER for this 
implementation. 

d. At the recommendation of the AVO, the lines which check whether 
temporary files can be created in tests CE2108B, CE2108D, and 
CE31123 were commented out because of the way in which temporary 


3-5 








TEST INFORMATION 


file names are constructed. 


The following tests were graded using a modified evaluation criteria: 


a. In test C3^006D, the meaning of 'SIZE applied to a type is not 
clear. The test is graded PASSED provided the only failure 
messages arise from the requirements on the value of T’SIZE, where 
T is a type. 

b. CE330J1G writes, then reads, a floating-point literal and tests the 

input value against a textually identical literal; this 
implementation stores the numeric literal with greater precision 
than it uses for objects of the type, and because the literal is 
not a model number the test for equality at line 121 fails. The 

AVO ruled that CE3804G should be counted as passed, for all of its 
other checks were passed. 


3.7 ADDITIONAL TESTING INFORMATION 
3-7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the JANUS/Ada 2.1.1 compiler was submitted to the AVF by the applicant 
for review. Analysis of these results demonstrated that the compiler 
successfully passed all applicable tests, and the compiler exhibited the 
expected behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the JANUS/Ada 2.1.1 compiler using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in 
whichthe testing was performed is described by the following designations 
of hardware and software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


Compaq Deskpro 386/25 

MS DOS 3-31 with Pharlap Dos Extender 

Compaq Deskpro 386/25 

MS DOS 3*31 with Pharlap Dos Extender 

JANUS/Ada 2.1.1 


A set of diskettes containing all tests except for withdrawn tests and 
tests requiring unsupported floating-point precisions was taken on-site by 
the validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
diskettes. Tests requiring modifications during the prevalidation testing 


3-6 





TEST INFORMATION 


were included in their modified form on the diskettes. 

The contents of the diskettes were loaded directly onto the host computer. 


After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Compaq Deskpro 
386/25. Results were printed from the host computer. 

The compiler was tested using command scripts provided by R.R. Software, 
Inc. and reviewed by the validation team. The compiler was tested using 
the following default option settings: 


OPTION 

/B 

/F 

/L 

/0 

/R 

/X 

/Z 


EFFECT 

Error messages are verbose. 

Library calls are generated for floating 
point operations. 

No listing file is generated. 

Memory model 0 is used. 

The JRL file is put on the same disk as the 
input file. 

Extra symbol table information is not generated. 

Optimization is done only where so specified 
by pragmas. 


The following option settings were used instead of the defaults: 


OPTION 


EFFECT 


/W 


Quiet error messages - suppresses user prompting 
or. errors. 

Warnings off - warnings were suppressed mainly 
because of the confusing warnings that the 
validation tests produce. 


/T 


Trimming code on - this directs the compiler to 
generate code which allows the linker to trim 
unused subprograms. 


/D 


Debugging code off - this directs the compiler 
not to generate any debugging code (generally 
line numbers A walkbacks). 


/SF 


Used to re-direct the compiler scratch files 


3-7 





TEST INFORMATION 


into a RAM disk (disk F), thus speeding up the 
compiles. 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
diskette and archived at the AVF. The listings examine'-’ on-site by the 
validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Madison WI and was completed on 13 January 1989 . 






APPENDIX A 


DECLARATION OF CONFORMANCE 


R.R. Software, Inc. has submitted the following 
Declaration of Conformance concerning the JANUS/Ada 
2.1.1 compiler. 


A-1 






DECLARATION OP COIFORMANCL 


Compiler Implementor: R.R. Software Inc. 

A'da»Val ida11 on Facility: asd/scel, Wright-Patterson AFB, OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Veraion: 1.10 


Baae Configuration 


Base Compiler Name: JANUS/Ada Veraion: Veraion 2.1.1 

Boat Architecture ISA: Compaq Deskpro 386/25 0S4VER #: MS-DOS 3.31/Phar Lap 

Target Architecture ISA:Conpaq Deskpro 386/25 OSAVER #: MS DOS 3.31/Phar Lap 


Implementor'a Declaration 

I, the undersigned, representing R.R. Software Inc., have implemented no 
deliberate extensions to the Ada Language Standard ANSL/MIL-STD-1815A in the 
compiler(a) listed in this declaration. I declare that R.R. Software Inc. ia 
the owner of record of the Ada language compiler(a) listed above and, as such, 
is responsible for maintaining said compiler(a) in conformance to 
ANSI/MIL-STD-1815A. All certificates and registrations for Ada language 
compiler(a) listed in this declaration shall be made only in the owner's 



for implementation and maintenance of the Ada compiler(s) listed above, and 
agree to the public disclosure of the final Validation Summary Report. I 
further agree to continue to comply with the Ada trademark policy, as defined by 
the Ada Joint Program Office. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada 
Language Standard ANSI/MIL-STD-1815A. 




•Ada is a registered trademark of the United States Government 
(Ada Joint Program Office). 


A-2 









AVF Control Number: AVF-VSR-219.0589 

88-09-23-RRS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890113W1.10019 
R.R. Software, Inc. 
JANUS/Ada 2.1.1 

Compaq Deskpro 286 Host and Target 


Completion of On-Site Testing: 
13 January 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB, OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 








Appendix F: Implementation Dependencies 

i 

F Implementation Dependencies 


This appendix specifies certain system-dependent characteristics of JANUS,'Ada, 
version 2.1.1, for an 80x86 target system. 

F.l Implementation Dependent Pragmas 


In addition to the required Ada pragmas, JANUS/Ada also provides several others. 
Some of these pragmas have a textual range. Such pragmas set some value of 
importance to the compiler, usually a flag that may be On or Off. The value to be 
used by the compiler at a given point in a program depends on the parameter of 
the most recent relevant pragma in the text of the program. For flags, if the 
parameter is the identifier On, then the flag is on; if the parameter is the 
identifier Off, then the flag is off; if no such pragma has occurred, then a default 
value is used. 

The range of a pragma - even a pragma that usually has a textual range - may 
vary if the pragma is not inside a compilation unit. This matters only if you put 
multiple compilation units in a file. The following rules apply: 

1) If a pragma is inside a compilation unit, it affects only that unit. 

2) If a pragma is outside a compilation unit, it affects all following 
compilation units in the compilation. 

Certain required Ada pragmas, such as INLINE, would follow different rules; 
however, as it turns out, JANUS/Ada Ignores all pragmas that would follow- 
different rules. '• 

The following system-dependent pragmas arp defined by JANUS/Ada. Unless 
otherwise stated, they may occur anywhere that a pragma may occur. 

AL;._CKECKS Takes one of two identifiers Cn or Off as its argument, and has a 
textual range. If the argument is Off, then this pragma causes 
suppression of arithmetic checking (like pragma ARITHCHECK - see 
below), range checking (like pragma RANGECIIECK - see below), 
storage error checking, and elaboration checking. If the argument is 
On, then these checks are all performed as usual. Note that pragma 
ALL_CHECKS does not affect the status of the DEBUG pragma; for the 
fastest run time code (and the worst run time checking), both 
ALL_CIIECKS and DEBUG should be turned Off and the pragma 
OPTIMIZE (Time) should be used. Note also that ALL_CHECKS does not 
affect the status of the ENUMTAB pragma. Combining check 

suppression using the pragma ALL_CHECKS and using the pragma 
SUPPRESS may cause unexpected results; it should not be done. 


B-2 






Appendix F: Implementation Dependencies 


However, ALL_CHECKS may be combined with the JANUS/Ada pragmas 
ARITHCHECK and RANGECHECK; whichever relevant pragma has 
occurred most recently will determine whether a given check is 

performed. ALL_CHECKS is on by default. Turning any checks off may 
cause unpredictable results if execution would have caused the 
corresponding assumption to be violated. Checks should be off only in 
fully debugged and tested programs. After checks are turned off, full 
testing should again be done, since any program that handles an 

exception may expect results that will not occur if no checking is 

done. 

ARITHCHECK Takes one of the two identifiers On or Off as its argument, and has a 
textual range. Where ARITHCHECK is on, the compiler is permitted to 
(and generally does) not generate checks for situations where it is 
permitted to raise NUMERIC_ERROR; these checks include overflow 
checking and checking for division by zero. Combining check 

suppression using the pragma ARITHCHECK and using the pragma 
SUPFRESS may cause unexpected results; it should not be done. 
However, ARITHCHECK may be combined with the JANUS/Ada pragma 
ALL_CHECKS; whichever pragma has occurred most recently will be 
effective. ARITHCHECK is on by default. Turning any checks off may 
cause unpredictable results if execution would have caused the 
corresponding assumption to be violated. Checks should be off only in 
fully debugged and tested programs. After checks are turned off, full 
testing should again be done, since any program that handles an 
exception may expect results that will not occur if no checking is 
done. t 

CLEANUP Takes an integer literal in the range 0..3 as its argument., and has a 
textual range. Using this pragma allows the JANUS/Ada run-time 
system to be less than meticulous about recovering temporary memory 
space it uses. This pragma can allow for smaller and faster code, but 
can be dangerous; certain constructs can cause memory to be used up 
very quickly. The smaller the parameter, the more danger is permitted. 
A value of C - the default value - causes the run-time system to be 
its usual immaculate self. A value of 0 causes no reclamation of 
temporary space. Values of 1 and 2 allow compromising between 
"cleanliness" and speed. Using values other than 0 adds some risk of 
your program running out of memory, especially in loops which contain 
certain constructs. 


B-3 






Appendix F: Implementation Dependencies 

i 

DEBUG Takes one of the two identifiers On or Off as its argument, and has a 

textual range. This pragma controls the generation of line number 
code and procedure name code. When DEBUG is on, such code is 
generated. When DEBUG is off, no line number code or procedure 
names are generated. This information is used by the walkbaclc which 
is generated after a run-time error (e.g., an unhandled exception). 
The walkback is still generated when DEBUG is off, but the line 
numbers will be incorrect, and no subprogram names will be printed. 
DEBUG's initial state can be set by the command line; if no explicit 
option is given, then DEBUG is initially on. Turning DEBUG off saves 
space, but causes the loss of much of JANUS/Ada's power in 
describing run-time errors. 


Notes: 

DEBUG should only be turned off when the program has no errors. The 
information provided on an error when DEBUG is off Is not very 
useful. 

If DEBUG is or. at the beginning of a subprogram or package 
specification, then it must be on at the end of the specification. 
Conversely, if DEBUG is off at the beginning of such a specification, 
it must be off at the end. If you want DEBUG to be off for an entire 
compilation, then you can either put a DEBUG pragma in the context 
clause of the compilation or you can use the appropriate compiler 
option. 

ENUMTAB Takes one of the two identifiers On or Off as its argument, and has a 
textual range. This pragma controls the generation of enumeration 
tables. Enumeration tables are used for the attributes IMAGE, VALUE, 
and WIDTH, and hence to input and output enumeration values. The 
tables are generated when ENUMTAB is on. The state of the ENUMTAB 
flag is significant only at enumeration type definitions. If this pragma 
is used to prevent generation of a type’s enumeration tables, then 
using the three mentioned attributes causes an erroneous program, 
with unpredictable results; furthermore, the type should net be used 
as a generic actual discrete type, and in particular 

TEXT_IO.ENUMERATION_TO should not be instantiated for the type. If 
the enumeration type is not needed for any of these purposes, the 
tables, which use a lot of space, are unnecessary. ENUMTAB is on by 
default. 


B-4 









Appendix F: Implementation Dependencies 


PAGE_LENGTH 

This pragma takes a single integer literal as its argument. It says 
that a page break should be added to the listing after each 
occurrence of the given number of lines. The default page length is 
32000, so that no page breaks are generated for most programs. Each 
page starts with a header that looks like the following: 

JANUS/ADA Version 2.1.1 compiling file on date at time 

RANGECHECKTakes one of the two identifiers On or Off as its argument, and has a 
textual range. Where RANGECHECK is off, the compiler is permitted to 
(and generally does) not generate checks for situations where it is 
expected to raise CONSTRAINT_ERROR; these checks include null 
pointer checking, discriminant checking, index checking, array length 
checking, and range checking. Combining check suppression using the 
pragma RANGECHECK and using the pragma SUPPRESS may cause 
unexpected results; it should not be done. However, RANGECHECK may 
be combined with the JANUS/Ada pragma ALL_CHECKS; whichever 
pragma has occurred most recently will be effective. RANGECHECK is 
on by default. Turning any checks off may cause unpredictable results 
if execution would have caused the corresponding assumption to be 
violated. Checks should be off only in fully debugged and tested 
programs. After checks are turned off, full testing should again be 
done, since any program that handles an exception may expect results 
that will not occur if no checking is done. 

SYSLIB This pragma tells the compiler that the current unit is one of the 

standard JANUS/Ada system libraries. It takes as a parameter ah 
integer literal in the range 1 .. 15; only the values 1 through 4 are. 
currently used. For example, system library number 2 provides floating 
point support. Do not use this pragma unless you are writing a 
package to replace one of the standard JANUS'Ada system libraries. 

VERBOSE Takes On cr Off as its argument, and has a textual range. VERBOSE 
controls the amount of output, on an error. If VERBOSE is on, the two 
lines preceding the error are printed, with an arrow pointing at the 
error. If VERBOSE is off, only the line number is printed. 

VERBOSE(Off): 

Line 16 at Position 5 

♦ERROR* Identifier is not defined 


B-5 





Appendix F: Implementation Dependencies 


VERBOSE(On): 

15: if X = 10 then 
16: Z := 10; 

‘ERROR* Identifier is not defined 

The reason for this option is that an error message with VERBOSE on 
can take a long time to be generated, especially in a large program. 
VERBOSE's initial condition can be set by the compiler command line. 

Several required Ada pragmas may have surprising effects in JANUS/Ada. The 
FRIORITY pragma may only take the value 0, since that is the only value in the 
range System.Priority. Specifying any OPTIMIZE pragma turns on optimization; 
otherwise, optimization is only done if specified on the compiler's command line. 
The SUPPRESS pragma is ignored unless it only has one parameter. Also, the 
following pragmas are always ignored: CONTROLLED. INLINE, MEMORY_SIZE, PACK. 
SHARED, STORAGE_UNIT, and SYSTEM_NAME. Pragma CONTROLLED is always ignored 
because JANUS/Ada does no automatic garbage collection; thus, the effect of 
pragma CONTROLLED already applies to all access types. Pragma SHARED is 
similarly ignored: JANUS'Ada's non-preemptive task scheduling gives the 
appropriate effect to all variables. The pragmas INLINE, PACK, and SUPPRESS (with 
two parameters) all provide recommendations to the compiler; as Ada allows, the 
recommendations are ignored. The pragmas MEMORY_SIZE, STORAGE_UNIT, and 
SYSTEM_NAME all attempt to make changes to constants in the System package; in 
each case. JANUS/Ada allows only one value, so that the pragma is ignored. 


F.2 Implementation Dependent Attributes 


JANUS/Ada does not provide any attributes other than the required 
attributes. 


Ada 


F.3 Specification of the Package SYSTEM 

The package System for JANUS.'Ada has the following definition. 


B-6 













Appendix F: Implementation Dependencies 


package System is 

— System package for JANUS/Ada 

— Types to define type Address, 
type Word is range 0 .. €5536; 
for Word’Size use 16; 
type Offset_Type is new Vord; 
type Address is record 
Offset : Offset_Type; 

Segment : Word; 
end record; 

Function "+" (Left : Address; Right : OffsetJType) Return Address; 

Function "+” (Left : OffsetJType; Right : Address) Return Address; 

Function (Left : Address; Right : OffsetJType) Return Address; 

Function (Left, Right : Address) Return Offset_Type; 

type Name is (MSJD0S2) ; 

System_Name : constant Name := MS_D0S2; 

Storage_Unit : constant := 8; 

IIemory_Size : constant := 65536; 

— Note: The actual memory size of a program is determined 

— dynamically; this is the maximum number of bytes in the data 

— segment. 

— System Dependent Named Numbers: 

Kin_Int : constant := -2 JL47_433_648; 

IIax_Int : constant := 2_147_4S3_647; 

Kax_Digits : constant := 15; 

MaxJIantissa : constant := 31; 

Fine_Delta : constant := 2"1.0#E-31; 

-- equivalently, 4.65661287307739257S125E-1C 
Tick : constant := 0.01; — Some machines have less accuracy; 

— for example, the IBM PC actually ticks about 

— every 0.06 seconds. 

— Other System Dependent Declarations 
subtype Priority is Integer range C..0; 

type Byte is range 0 .. 255; 
for Byte'Size use 8; 


B-7 







Appendix F: Implementation Dependencies 


end System; 

The type Byte in the System package corresponds to the 8-bit machine byte. The 
type Word is a 16-bit Unsigned Integer type, corresponding to a machine word. 


F.4 Restrictions on Representation Clauses 


If T is a discrete type, or a fixed point type, then the size expression can give 
any value between 1 and 1000 bits (subject, of course, to allowing enough bits for 
every possible value). For other types, the expression must give the default size 
for T. 


A length clause that specifies T'STORAGE^SIZE for an access type is not 
supported; JANUS/Ada uses a single large common heap. 

A length clause that specifies T’STORAGE_SIZE for a task type T is supported. 
Any integer value can be specified. Values smaller than 256 will be rounded up to 
256 (the minimum T'Storage_Size), as the Ada standard does not allow raising an 
exception in this case. 

A length clause that specifies T'SMALL for a fixed point type must give a value 
(subject to the Ada restrictions) in the range 
2.0 ** (-99) .. 2.0 ** 99, 
inclusive. 

An enumeration representation clause for a type T may give any integer values 
within the range System.Min_Tnt .. System.Max_Tnt. If a size length clause is not 
given for the type, the type's size is determined from the literals given. (If nil of 
the literals fit in a byte, then Byte’Size is used; similarly for Integer and 
Long_Integor). 

The expression in an alignment clause in a record representation clause must 
equal 1. 

A component clause must give a storage place that is equivalent to the default 
value of the POSITION attribute for such a component. 

A component clause must give a range that starts at zero and extends to one less 
than the size of the component. 


B-8 








Appendix F: Implementation Dependencies 


* 

JANUS/Ada supports address clauses on most objects. Address clauses are not 
allowed on parameters, generic formal parameters, and renamed objects. The 
address given for an object address clause may be any legal value of type 
System.Address. It will be interpreted as an absolute machine address, using the 
segment part as a selector if in the protected mode. It is the user's responsibility 
to ensure that the value given makes sense (i.e., points at memory, does not 
overlay other objects, etc.) No other address clauses are supported. 


F.5 Implementation Defined Names 


JANUS/Ada uses no implementation generated names. 


F.6 Address Clause Expressions 


The address given for an object address clause may be any legal value of type 
System.Address. It will be interpreted as an absolute machine address, using the 
segment part as a selector if in the protected mode. It is the user's responsibility 
to ensure that the value given makes sense (i.e., points at memory, does not 
overlay other objects, etc.) 


F.7 Unchecked Conversion Restrictions 


first make the following definitions: 

A type or subtype is said to be a simple type or a simple subtype (respectively) 
if it is a scalar (sub)type, an access (sub)type, a task (sub)type. or if it satisfies 
the following two conditions: 

1) If it is an array type or subtype, then it is constrained and its index 
constraint is static; and 

2) If it is a composite type or subtype, then all of its subcomponents have a 
simple subtype. 

A (sub)type which does not meet these conditions is called non-simple. 

Discriminated records can be simple; variant records can be simple. However, 
constraints which depend on discriminants are non-simple (because they are 
non-static). 

JANUS/Ada imposes the following restriction on instantiations of 

Unchecked_Conversion: for such an instantiation to be legal, both the source 


B-9 





Appendix F: Implementation Dependencies 


actual subtype and the target actual subtype must be simple subtypes, and they 
must have the same size. 


F.8 Implementation Dependencies of I/O 


The syntax of an external file name depends on the operating system being used. 
Some external files do not really specify disk files; these are called devices. 
Devices are specified by special file names, and are treated specially by some of 
the I/O routines. 

The syntax of an MS-DOS 2.xx or 3.xx filename is: 

[d:3[path]filename[.ext] 

where "d." is an optional disk name; "path" is an optional path consisting of 
directory names, each followed by a backslash; "filename” is the filename 
(maximum 8 characters); and ".ext" is the extension (or file type). See your 
MS-DOS manual for a complete description. In addition, the following special 
dex’ice names are recognized: 

STI: MS-DOS standard input. The same as Standard_Input. Input is buffered 

by lines, and all MS-DOS line editing characters may be used. Can 
only be read. 

STO: MS-DOS standard output. The same as Standard_Output. Can only be 
written. 

ERR: MS-DOS standard error. The output to this device cannor be 
redirected. Can only be written. 

COX: The console device. Single character input with echoing. Due to the 
design of MS-DOS, this device can he redirected. Can be read and 
written. 

AUX: The auxiliary device. Can he read or written. 

LST: The list (printer) device. Can only be written. 

KED: The console input device. Xo character interpretation is performed, 
and there is no character echo. Again, the input to this device can 
be redirected, so it does not always refer to the physical keyboard. 

The MS-DCS device files may also be used (COX, AUX, and PRX without 
colons ':’). For compatibility reasons, we do not recommend the use of these 
names. 


B-10 







Appendix F: Implementation Dependencies 


The MS-DOS 2.xx version of the I/O system will do a search of the default 
search path (set by the DOS PATH command) if the following conditions are 
met: 


1) No disk name or path is present in the file name; and 

2) The name is not that of a device. 

Alternatively, you may think of the search being done if the file name does 
not contain any of the characters V, or 'V. 

The default search path cannot be changed while the program is running, as 
the path is copied by the JANUS/Ada program when it starts running. 

Note: 

Creates will never cause a path search as they must work in the current 
directory. 

Upon normal completion of a program, any open external files are closed. 
Nevertheless, to provide portability, we recommend explicitly closing any files that 
are used. 

Sharing external files between multiple file objects causes the corresponding 
external file to be opened multiple times by the operating system. The effects of 
this are defined by your operating system. This external file sharing is only 
allowed if all internal files associated with a single external file are opened only 

for reading (mode In_File). and no internal file is Created. Use__Errnr is raised if 

these requirements are violated. A Reset to a writing mode of a file already 
opened for reading also raise Use_Error if the externa! file also is shared by 
another internal file. 

Dinary I/O of values of access types will give meaningless results and should not 
be done. Einary I/O of types which are not simple types (see definition ir. Section 
F.7, above) will raise Use_Error when the file is opened. Such types require 
specification of the block size in the form, a capability which is not yot 
supported. 

The form parameter for Sequential_TO and Direct_TO is always expected to be the 
null string. 

The type Count in the generic package Direct_IO is defined to have the range 0 .. 
32767. 

Ada specifies the existence of special markers called terminators in a text file. 
JANUS/Ada defines the line terminator to be <LF> (line feed), with or without an 


B-l 1 







Appendix F: Implementation Dependences 


additional <CR> (carriage return). The page terminator is the <FF> (form feed) 
character; if it is not preceded by a <LF>, a line terminator is also assumed. 

The file terminator is the end-of-file returned by the host operating system. If no 
line and/or page terminator directly precedes the file terminator, they are 
assumed. If the form "Z" is used, the <Ctrl>-Z character also represents the 
end-of-file. This form is not necessary to correctly read files produced with 
JANUS'Ada and most other programs, but may be occasionally necessary. The only 
legal forms for text files are ”” (the null string) and M Z". All other forms raise 
USE_ERROR. 

If the form is the <Ctrl>-Z character is ignored on input. The <CR> character 
is always Ignored on input. (They will not be returned by Get, for instance). All 
other control characters are sent directly to the user. Output of control characters 
does not affect the layout that Text_IO generates. In particular, output of a <LF> 
before a New_Page does not suppress the New_Line caused by the N‘ew_Page. 

On output, the "Z" form causes the end-of-file to be marked by a <Ctrl>—Z; 
otherwise, no explicit end-of-file character is used. The character pair <CR> <LF> 
is written to represent the line terminator. Because <CR> is ignored on input, this 
is compatible with input. 

The type Text_IO.Count has the range 0 .. 32767; the type Text_IO.Field also has 
the range 0 .. 32767. 

IO_Exceptjons.USE_ERROR is raised if something cannot be dene because of the 
external file system; such situations arise when one attempts: 

- to create or open an external file for writing when the external file is 
already open (via a different internal file). 

- to create or open an external file when the external file is already open for 
writing (via a different internal file). 

- to reset a file to a writing mode when the external file is already open (via 
a different internal file). 

- to write to a full disk ("’rite, Close); 

- to create a file in a full directory (Create); 

- to have more files open than the OS allows (Open, Create); 

- to open a devicp with an illegal mode; 

- to create, reset, nr delete a device; 

- to create a file where a protected file (i.e., a directory or read-only file) 
already exists; 

- to delete a protected file; 

- to use an illegal form (Open, Create); or 

- to open a file for a non-simple type without specifying the block sine; 

- to open a device for direct I'O. 


B-12 






Appendix F. Implementation Dependencies 


IO_Exceptions.DEVICE_ERROR is raised if a hardware error other than those 
covered by USE_ERROR occurs. These situations should never occur, but may on 
rare occasions. For example, DEVICE_ERROR is raised when: 

- a file is not found in a Close or a Delete; 

- a seek error occurs on a direct Read or Write; or 

- a seek error occurs on a sequential End_Of_File. 

The subtypes Standard.Positive and Standard.Natural, used by some I/O routines, 
have the maximum value 327C7. 

No package Low_Lev^l_IO is provided. 


F.9 Running the compiler and linker 


The JANUS'Ada compiler is invoked using the following format: 

JANUS [d:] filename [.ext] I/option} 

where filename is an MS,'DOS file name with optional disk name [d:], optional 

extension [.ext], and compiler options (.'option]. If no disk name is specified, the 

current disk is assumed. If no extension is specified, .PKG is assumed. 

The compiler options are: 

B Brief error messages. The line in error is not printed (equivalent to turning 
off pragma VERBOSE). 

D Don’t generate debugging code (equivalent to turning off pragma DEBIT.) 

F Use in-line 8087 instructions for Floating point operations. By default the 

compiler generates library calls for floating point operations. The 80S7 may 
be used to execute the library calls. A floating point support library is still 
required, even though this option is used. 

L Creatp a listing file with name filename.FRN on the same disk as filename. 
The listing file will be a listing of only the last compilation unit in a file. 

Ld Create a listing file on specified disk ’d’. Choices are ’A’ through ’W. 

Ox Object code memory model. N is 0 or ]. Memory model 0 creates faster, 

smaller code, but limits all code in ail units of a program to one MS-DOS 

segment (i.e., 04 kilobytes); Memory model I allows code size limited only by 
your machine and operating system. See the linker (JLINK) manual for more 
information. Memory model C is assumed if this option is not given. The 
compiler records the memory model for which each library unit was compiled, 
and it will complain if any mismatches occur. Thus, the compiler enforces 
that if it is run using the /ol option, then all of the withed units must 
have been compiled with the same option. 


B-13 




Appendix F: Implementation Dependencies 


Q Quiet error messages. This option causes the compiler not to wait for the 
user to interact after an error. In the usual mode, the compiler will prompt 
the user after each error to ask if the compilation should be aborted. This 
option is useful if the user wants to take a coffee break while the compiler 
is working, since all user prompts are suppressed. The errors (if any) will 
not stay on the screen when this option is used; therefore, the console 

traffic should be sent to the printer or to a file. Be warned that certain 

syntax errors can cause the compiler to print many error messages for each 

and every line in the program. A lot of paper could be used this way! Note 

that the /Q option disallows disk swapping, even if the /S option is given. 

Rd Route the JRL file to the specified disk 'd'. Choices are ’A’ through 'V. The 
default is the same disk as filename. 

Sd Route Scratch files to specified disk. This option is useful if you have a 
RAM disk or if your disk does not have much free space. The use of this 
option also allows disk swapping to load package specification (.SYM) files. 
Normally, after both the compiler and source file disks are searched for .SYM 
files, an error is produced if they are not all found. However, when the /S 
option is used, the compiler disk max - be removed and replaced b\ a disk to 
search. The linker has a similar option, which allows the development of 
large programs on systems with a small disk capacity. Note that disk 
swapping is not enabled by the fS option if the /Q (quiet option) is also 
given. The /Q option is intended for batch mode compiles, and its purpose 
conflicts with the disk swapping. The main problem is that when the /S 
option is used to put scratch files on a RAM disk, a batch file may stop 
waiting for a missing .SYM or ERROR.MSG file; such behavior would not be 
appropriate when /Q is specified. 

T Generate information which allows trimming unused subprograms from the 
code. This option tells the compiler to generate information which can be 
used by the remove subprograms from the final code. This option increases 
the size of the .JRL files produced. We recommend that it be used on 
reusable libraries of code (like trig, libraries or stack packages) - that is 
those compilations for which it is likely that some subprograms are not 
called. 

W Don't print any warning messages. For more control r.f warning messages, use 
the following option form ("':;). 

Wx Print only warnings of level less than the specified digit The given 
value of x may he from 1 to S. The more warnings you are willing to see, 
the higher the number you should give. 

X Handle extra symbol table information. This option is for the use of the 
JScope debugger and other tools. This option requires large quantities of 
memory and disk space, and thins should be avoided if possible. 

Z Turn on optimization. This has the same effect as if the pragma OPTIMIZE 
were set to SPACE throughout you" compilation. 


B-14 





Appendix F; Implementation Dependencies 


The default values for the command line options are: 

B Error messages are verbose. 

D Debug code is generated. 

F Library calls are generated for floating point operations. 
L No listing file is generated. 

0 Memory model 0 is used. 

Q The compiler prompts for abort after every error. 

R The JRL file is put on the same disk as the input file. 

S Scratch files are put on the same disk as the compiler. 

T No trimming code is produced. 

W All warnings are printed. 

X Extra symbol table information is not generated. 

Z Optimization is done only where so specified by pragmas. 


Leading spaces are disregarded between the filename and the call to JANUS. 
Spaces are otherwise not recommended on the command line. The presence of 
blanks to separate the options or between the filename and the extension will be 
ignored. 

Examples: 

JANUS test/Q/L 
JANUS test.run/V4 
JANUS test 

JANUS test .run /B /V/L 


The compiler produces a SYM (SYMbol table information) file when a specification 
is compiled, and a SRL or JRL (Specification ReLocatable or Janus ReLocatabie) file 
when a body is compiled. To make an executable program, the appropriate SRL and 
JRL files must be linked (combined) with the run-time libraries. This is 
accomplished by running the .TAXI'S'Ada linker, JLINK. 


The JANUS.'Ada linker is invoked using the following format: 

JLINK [d:] filename (/option! 

Here "filename" is the name of the SRL or JRL file created when the main program 
was compiled (without the .SRL cr .JRL extension) with optional disk name [d:], 
and compiler options [.'option). The filename usually corresponds to the first eight 
letters of the name of your main program. A disk may be specified where the files 
are to be found. See the linker manual for more detailed directions. We summarize 
here, however, a few of the most commonly used linking options: 


B-15 





Appendix F: Implementation Dependencies 


E Create an EXE file. This is assumed if the /O] option is given. This allows 
allow a slightly larger total program size if memory model is used. 

FO Use software floating point (the default). 

F2 Use hardware (8087) floating point. 

L Display lots of information about the loading process. 

00 Use memory model 0 (the default); see the description of the /0 option in 

the compiler, above. 

01 Use memory model 1. 

Q Use quiet error messages; i.e., don’t wait for the user to interact after an 
error. 

T Trim unused subprograms from the code. This option tells the linker to 
remove subprograms which are never called from the final output file. This 
option reduces space usage of the final file by as much as 30K. 

Examples: 

JUNK test 
JLINK test /Q/L 
JUNK test/01/L/F2 

Note that if you do not have a hardware floating point chip, and if you are using 

memory model 0, then you generally will not need to use any linker options. 


B-16 





Appendix F: Implementation Dependencies 
This page intentionally left blank 








APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 
$ACC_SIZE 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 

An identifier the size of the 
maximum input line length which 
is identical to $BIu_ID2 except 
for the last character. 

$BIG__ID2 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_IDM except 
for a character near the middle. 


Value 

32 

1..199 => 'A 1 ,200 => '1 ' 

1.. 199 => 'A',200 => '2' 

1.. 99 => 'A',100 => *3*,101..200 => ’A' 







TEST PARAMETERS 


Name and Meaning 
$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

$BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 
TEXT_IO.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 

1.. 99 => 'A',100 => *4',101..200 => 'A* 

1.. 197 => 'O',198..200 =: "298" 

1.. 194 => 'O',195..200 => "69.0E1" 

1 => ',2..101 => 'A',102 => 

1 => '"',2..100 => 'A',101 => ’1',102 => 

1 .. 180 => ' ’ 

32_767 

65536 

8 






TEST PARAMETERS 


Name and Meaning Va? 

$DEFAULT_SYS_NAME MSJJ0S2 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 0.000_000_000_465_66l_287_307_739_257_8l 2 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal 

literal whose 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME NOT_APPLICABLE 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME NOT_APPLICABLE 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT_FLOAT, or 

LONG_FLOAT. 

$GREATER_THAN_DURATION 300_000.0 

A universal real literal that 
lies between DURATION’BASE’LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 1.0E6 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 0 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 \NODIRECTORY\FILENAME 

An external file name which 
contains invalid characters. 

*ILLEGAL_EXTERNAL_FILE_NAME2 <BAD I 

An external file name which 
is too long. 

$INTEGER_FIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 



C-3 




TEST PARAMETERS 


Name and Meaning Value 

$INTEGER_LAST 32767 

A universal integer literal 
whose value is INTEGER’LAST. 


$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 
whose value is INTEGER'LAST +■ 1. 


$LESS_THAN_DURATION -305_000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -1.0E6 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$LOW_PRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC . 31 

An integer literal whose value 
is SYSTEM.MAXJMANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

%MAX_IN_LEN 200 

Maximum Input line length 
permitted by the implementation. 


$MAX_INT 2147483647 

A universal integer literal 

whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 

whose value is SYSTEM .MAX INT+1. 


$MAX_LEH__INT_BASED_LITERAL 1..2 => "2:", 

A universal integer based 198..200 => ” 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


3..197 => 'O', 
11 





TEST PARAMETERS 


Name and Meaning 

$MAX_LEN_R£AL_3ASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
In the type SYSTEM.NAME, 
separated by commas . 

$NEG_BASED_INT 

A based Integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT MEM SIZE. 


Value 

1.. 3 => "16:",4..196 => *0', 

197.. 200 => "F.E:" 

1 => '"’,2..199 => ’A’,200 => 

-2147483648 

32 

NOT_APPLICABLE 

MSJ)0S2 

16#FFFF_FFFF# 

65536 


C-5 








\ -4 


TEST PARAMETERS 


Name and Meaning 
$NEW_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGEJJNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJNIT. 

$ NEW JSY S_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

8 


MS D0S2 


32 


0.01 


C-6 






APPENDIX D 
WITHDRAWN TESTS 


Some teats are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 36 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. A39005G has been withdrawn because it unreasonably expects a 

component clause to pack an array component into a minimum size 
(line 30). 

b. B97102E has been withdrawn because it contains an unintended 

illegality: a select statement contains a null statement at the 

place of a selective wait alternative (line 31). 

c. BC3009B has been withdrawn because it wrongly expects that 

circular instantiations will be detected in several compilation 
units even though none of the units is illegal with respect to the 
units it depends on; by AI-00256, the illegality need not be 

detected until execution is attempted (line 95). 

d. CD2A62D has been withdrawn because it wrongly requires that an 
array object's size be no greater than 10, although its subtype's 
size was specified to be 40 (line 137). 

e. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [76 tests] have 

been withdrawn because they wrongly attempt to check the size of 
objects of a derived type (for which a 'SIZE length clause is 
given) by passing them to a derived sub-program (which implicitly 
converts them to the parent type (Ada standard 3.4:14)). 

Additionally, they use the 'SIZE length clause and attribute, 
whose interpretation is considered problematic by the WG9 ARO. 

f. CD2A81G, CD2A83G, CD2A84M and N, and CD50110 have been withdrawn 

because they assume that dependent tasks will terminate while the 
main program executes a loop that simply tests for task 

termination; this is not the case, and the main program may loop 
indefinitely (lines 74, 85, 86 and 96, 86 and 96, and 58, 


D-1 












WITHDRAWN TESTS 


respectively). 

g. CD2B15C and CD7205C have been withdrawn because they expect that a 
*STORAGE_SIZE length clause provides precise control over the 
number of designated objects in a collection; the Ada standard 
13-2:15 allows that such control must not be expected. 

h. CD5007B has been withdrawn because it wrongly expects an 
implicitly declared subprogram to be at the the address that is 
specified for ar. unrelated subprogram (line 303). 

i. CD7105A has been withdrawn because it requires that successive 
calls to CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentary AI-00201, it is only the expected frequency of 
change that must be at least SYSTEM.TICK—particular instances of 
change may be less (line 29). 

j. CD7203B and CD7204B have been withdrawn because they use the 'SIZE 
length clause and attribute, whose interpretation is considered 
problematic by the WG9 ARG. 

k. CD7205D has been withdrawn because it checks an invalid test 

objective: it treats the specification of storage to be reserved 

for a task's activation as though it were like the specification 
of storage for a collection. 

l. CE2107I has been withdrawn because it requires that objects of two 

similar scalar types be distinguished when read from a 

file—DATA_ERR0R is expected to be raised by an attempt to read 
one object as of the other type. However, it is not clear exactly 
how the Ada standard 14.2.4:4 is to be interpreted; thus, this 
test objective is not considered valid, (line 90) 

m. CE3"M1C has been withdrawn because it requires certain behavior 

when two files are associated with the same external file; 
however, this is not required by the Ada standard. 

n. CE3301A has been withdrawn because it contains several calls to 
END_0F_I>INE and END_OF_PAGE that have no parameter: these calls 
were intended to specify a file, not to refer to STANDARD_INPUT 
(lines 103, 107, 118, 132, and 136). 

o. CE3411B has been withdrawn because it requires that a text file’s 
column number be set to COUNT'LAST in order to check that 
LAY0UT_ERR0R is raised by a subsequent PUT operation. But the 
former operation will generally raise an exception due to a lack 
of available disk space, and the test would thus encumber 
validation testing. 




