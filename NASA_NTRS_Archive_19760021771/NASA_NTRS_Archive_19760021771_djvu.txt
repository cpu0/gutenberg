General Disclaimer 


One or more of the Following Statements may affect this Document 


• This document has been reproduced from the best copy furnished by the 
organizational source. It is being released in the interest of making available as 
much information as possible. 


• This document may contain data, which exceeds the sheet parameters. It was 
furnished in this condition by the organizational source and is the best copy 
available. 


• This document may contain tone-on-tone or color graphs, charts and/or pictures, 
which have been reproduced in black and white. 


• This document is paginated as submitted by the original source. 


• Portions of this document are not fully legible due to the historical nature of some 
of the material. However, it is the best reproduction available from the original 
submission. 


Produced by the NASA Center for Aerospace Information (CASI) 



NASA CONTRACTOR 
REPORT 


NASA CR- 149924 

(Supersedes CR-144042) 


(NASA-CR-1 49924) MASK ANALYSIS PROGEAH N76-28859 

(MAP) EEFEEESCE MANUAL {M6S Computing, Inc.) 

165 p HC $6.75 CSCL 09B 

Onclas 

Gl/61 4U611 


MASK ANALYSIS PROGRAM (MAP) REFERENCE MANUAL 


By C. L. Mitchell 

MSeS Computing, Inc. 
HuntsvUle, Alabama 35805 


June 23, 197G 


1 




\ 


Prepared for: 

NASA - GEORGE C. MARSHALL SPACE FLIGHT CENTER 
Marshall Space Flight Center, Alabama 35812 


REPORT NO. 2. GOVERNMENT ACCESSION NO 

NASA CR-i49924‘" 


TITLE ANO subtitle 

MASK ANALYSIS PROGRAM (MAP) REFERENCE MANUAL 


7. AUTHOR (S) 

C. L. Mitchell 


9. PERFORMING ORGANIZATION NAME AND ADDRESS 

M&S Computing, Inc, 

P. 0. Box 5183 
Huntsville, Alabama 35812 


'2 SPONSORING AGENCY NAME AND ADDRESS 

National Aeronautics and Space Administration 
George C. Marshall Space Flight Center 
Huntsville, Alabama 35812 


TECHNICAL REPORT STANDARD TITLE PAGE. 


3. RECIPIENT'S CATALOG NO, 


5. REPORT DATE 

June 23, 1976 


6. PERFORMING ORGANIZATION CODE 

EC45 


0, PERFORMING ORGANIZATION REPORT fi 

75-0039 , Revision 1 


10. WORK UNIT NO. 

11. contract OR GR^T NO. " 

NAS8-25621 

13. TYPE OF REPORT & PERIOD COVERED 

Contractor Report 


SPONSORING agency CODE 


IS supplementary NOTES 

Electronics and Control Laboratory, Electronics Development Division 
Design Techniques Branch 

Te. abstract ^ ~ * 

This document is intended to serve as a User’s Manual and a Programmer's Manual for 
the Mask Analysis Program. The first portion of the document is devoted to the user. 
It contains ail of the information required to execute MAP. The remainder of the 
document describes the details of MAP software logic- Although the information in 
this portion is not required to run the program, it is recommended that every -user ' 
review it to gain an appreciation for the program functions*^ - 

^^^This report supersedes NASA Cll-144042, dated October 2 1, 1975. 










PREFACE 


This document is intended to serve as a User's Manual and a 
Programmer's Manual for the Mask Analysis Program, The first por- 
tion of the document is devoted to the user. It contains all of the infor- 
mation required to execute MAP. The remainder of the document 
describes the details of MLAP software logic. Although the information 
in this portion is not required to run the program, it is recommended 
that every user review it to gain an appreciation for the program functions. 


Prepared by; 

C. L., Mitchell 

Approved by: 



TABLE OF CONTENTS 


S ection Page 

LIST OF FIGURES v. 

LIST OF TABLES v 

1. INTRODUCTION 1-1 

2. PROGRAM STRUCTURE AND OPERATION 2-1 

2.1 Flow of Processing 2-1 

2.2 Definition of Terms 2-1 

2.2.1 Rectangle Definition and Identification 2-1 

2.2.2 General Graphics Terms 2-4 

3. GRAPHIC DATA INPUT 3-1 

4. MAP COMIAAND FORMATS 4-1 

4.1 Preprocessing Comraands 4-3 

4.1.1 OPTN - Option Specification Commri-nd 4-4 

4.1.2 MASK - Input Mask Identification Command 4-6 

4.2 Input/Output Commands 4-7 

4. 2, 1 COMM - Command Printout Command 4-7 

4.2.2 FILE - Special Mask Output Command 4-7 

4. 2, 3 TEXT - Spacia.1 Text Output Command 4-8 

4.2.4 FREE - Mask Storage Release Command 4-8 

4. 3 Opers-tional Commands 4-9 

4.3.1 OPER - Mask Operation Command 4-9 

4.3.2 SPEC - Mask Operation Specification Command 4-26 

4.4 List Processing Commands 4-34 

4.4.1 TRAC - Interconnection Trace Command 4-34 

4.4.2 BOOL - Boolean Equation Generation Command 4-35 

4.4.3 LIST - List Gross -Reference Command 4-37 


watpessB 




TABLE OF CONTENTS 
(continued) 

Section Page 

4.5 Dimensional Processing Commands 4-38 

4.5.1 AREA - Area Computation Command 4-39 

4.5.2 PERI - Perimeter Computation Command 4-39 

4.5.3 PARE - Area Find Perimeter Computation 4-40 

Command 

4.5.4 RANG - Range Computation Command 4-40 

4. 6 Process Control Commands 4-41 

4.6.1 SKIP - Unconditional Routing Command 4-41 

4.6.2 IFNL - Null Condition Routing Command 4-41 

5, MAP OUTPUT 5-1 

5.1 Informational Printout 5-1 

5.2 Mask Data Output 5-1 

6, PROGRAM STRUCTURE 6-.1 

7, PROGRAM VARIABLES 7-1 

7.1 Arrangement of Variables in Common 7-1 

7.2 Adjustment of Array Dimensions 7-1 

7.3 Machine Dependent Variables 7-6 

APPENDIX A Job Setup Examples A-1 

APPENDIX B User Format Descriptions B-1 

APPENDIX C MAP Execution Example C-1 

APPENDIX D Routines Calling Structure D-1 

APPENDIX E Descriptions of Program Variables E-1 


IV 


LIST OF FIGURES 


Figure No, 

Title 

Page 

2-1 

General Flow of Processing 

2-2 

2-2 

Six- Word Rectangle Definition 

2-3 

4-1 

Examples of Edge Operation Buried Line Removal 

4-13 

4-2 

Example of the Single Mask LINK Operation 

4-17 

4-3 

Examples of the Double Mask LINK- and' NLNK Operations 

4-19 

4-4 

Examples of Single Mask TWIX Operation Forms 

4-22 

6-1 

Recommended Overlay Structure 

6-6 

7-1 

List Array Usage 

7-5 

A~1 

Job Setup Example 1 

A-3 

A-2 

Job Setup Example 2 

A-4 

A-3 

Job Setup Example 3 

A-5 

C-1 

Original CMOS Masks 

C-2 

C-2 

CMOS Masks After MAP Smash 

C-5 

C-3 

N Mask After Negation 

LIST OF TABLES 

C-8 

Table No, 

Title 

Page 

4-1 

MLAP Command Summary 

4-2 

4-2 

Optional Information Output 

4-6 

4-3 

Summary of Operations 

4-11 

4-4 

Summary of Operational Specifications 

4-28 

4-5 

MIN and MAX Specifier's Application to Operations 

4-30 

5-1 

Abnormal Processing Condition Messages 

5-2 

5-2 

Debug Printout 

5-4 

6-1 

Main Program Inline Routine Descriptions 

6-2 

6-2 

Subprogram Descriptions 

6-4 

7-1 

Blank Common Structure 

7-2 

7-2 

Directory Array's Usage 

7-3 

A-1 

Logical Unit Assignments 

A-2 

B-1 

MAP I/O Format Siunmary 

B-2 

. D-1 

Inline Routines Calling Structure 

D-2 

D-2 

Subprograms Calling Structure 

D-6 

E-2 

■Variables Definitions 

E-2 




V 


1 


INTRODUCTION 


In examining software designed spscificaLly for artwork verification 
and other closely related graphic analysis functions, several major dis- 
advantages become apparent: 

o Artwork verification and other analysis processes 

are generally limited to small designs due to techni- 
ques for which execution time and computer memory 
resources increase out of proportion to an increase 
in design density or complexity. 

o When artwork analysis techniques are too rigid or 

too specific, the software is useful for only limited 
technologies. The software will require constant 
updating, and eventually become obsolete, 

o If the software requires lengthy and cumbersome 

input data preparation, or if the input data is an 
output produced by another program, standalone 
usage may be prohibited. If the output format Is 
a rigid interface to another program, its useful- 
ness as a standalone program is questionable. 

The Mask Analysis Program (MAP) was designed to avoid these 
pitfalls and to surpass the capability of the single function analysis programs. 
Two significant principles were applied In the design of MAP. 

o Data Base Simplicity - MAP operates on mask data 

which has been converted from its original form to 
orthogonal rectangles with identification numbers. 

o Maximum User Control - MAP processes arc com- 

pletely controlled by a unique command language. 

Among the mask analysis processes which the user 
may command are: qualitative and quantitative 
testing of mask areas, modification of masks, crea- 
tion of new masks, and computation and sorting of 
mask data. 


1-1 


Among the major features of MAP are the following; 

o Versatility - The user is not bound to a specific technology 

nor to specific mask tests; MAP analysis processes may 
be applied to a wide range of computer-aided design appli- 
cations. 

o Multipurpose Processing - MAP is not a single function 

processor restricted to artwork verification. It is also 
capable Of performing the equally important tasks of 
device identification, nodal analysis, capacitance cal- 
culation, and logic equation generation. 

o Variable User Interface - Input of masks to MAP requires 

no lengthy or cumbersome formatting or device identifi- 
cation. Input and output data is not restricted to a single 
format. A number of formats are available. In addition, 
MAP is structured such that implementation of new for- 
mats will require only the replacement of an isolated sub- 
routine. 

o Machine Independence - MAP processing Is performed on 

an open-ended data structure basis; I, e. , the number and 
size of masks analyzed are not restricted by available 
core memory, MAP was written In FORTRAN IV using 
only the widely compatible statement forms. 

High-Speed Processing - Because of the simplicity of 
rectangle processing, MAP is capable of greater pro- 
cessing speed than other accepted methods of mask 
processing. 


o 


2 . 


PROGRAM STRUCTURE AND OPERATION 


This section presents a general description of MAP processing 
flow and a general definition of processing terms which will be referred 
to in the remainder, of the document. Sections 3, 4, and 5 present the 
details of specific processes for specific circumstances. Appendix A 
illustrates job setup examples for the actual execution of MAP. 

2.1 Flow of Processing 

Figai*e 2-1 illustrates the general flow of MAP processing. As 
shown, there are two major processes: rectangular refinement and 
cc'iimand execution. 

Rectangular refinement occurs at the beginning of execution and is 
the process of reading the graphic input data, converting the data to ortho- 
gonal rectangles if necessary, and storing the rectangular data on a file. 
This is a two pass process. On the first pass, smashing into rectangles 
occurs. This may consist of breaking orthogonal polygons into rectangles 
and/or breaking non-orthogonal polygons Into thin horizontal rectangle 
slices which approximate the shape with a degree of accuracy choseu by 
the user. On the second pass, any necessary scaling or offsetting is 
performed. 

Command execution is performed Cor the remainder of the run. 
Commands are processed one at a time. Data is read from the mask 
rectangle file, processing is performed, new data is stored on the rec- 
tangle file or an output file, and any user Information is printed. Execu- 
tion continues in this fashion until all of the commands have been pro- 
cessed. 

2.2 Definition of Terms 


2.2,1 Rectangle Definition and Identification 

Figure 2-2 ilLustrates the MAP definition of an orthogonal rectangle. 
Six words are required to define a rectangle: two identification numbers, 
the lower left corner coordinates, and the upper right corner coordinates. 
Rectangles are processed and stored in this form. 

The identification numbers h? > e been provided to allow associations 
betv/een rectangles to be established and identified by the user. These 
numbers are referred to in this document as the primary and secondary 
identifiers and the specific values of each will be discussed In accordance 
with each command in subsequent sections. 

2-1 













Z.2,2 General Graphics Terms 


Several terms have special connotations with regard to MAP, The 
tex’m mask refers to the collection of graphic data which is on a single art- 
work level or which bears a certain qualitative significance. In other 
words, a mask need not conform to a strict technological mask definition. 
For example, a mask may be the resulting errors from an artwork test. 
Internal to MAP, a mask is a collection of rectangles which is stored In 
one or more records beginning at a mask position on the rectangle file, 
and which is accessed by a unique 4-character alphabetic name. 

The term mask areas must be interpreted somewhat in context. 
However, in general, an area refers to one or more rectangles on a mask 
which have a collective significance which is often reflected in the rectangle 
identifiers. 

The term linka ge has a special MAP connotation. Rectangles on a 
mask are linked if they are physically connected. Rectangles on different 
masks are linked if they intersect or if they are each linked on their own 
masks to other rectangles which intersect. 


2-4 






3 


GRAPHIC DATA INPUT 


The graphic data associated with a set of masks may be described 
in many ways. One of the significant features of MAP is the wide variety 
of input data formats which it will accept. MAP will accept masks from 
mixed formats within the same run. Appendix B details each input for- 
mat currently accepted. The structure of MAP is such that acceptance of 
additional formats requires only the addition of a small subroutine to inter- 
pret each format. 

After a specific format is interpreted by MAP, the data is translated 
into an internal format .^.Uowing the most efficient processing capabilities. 
This internal format, as discussed in Section 2, is in the form of rectangle 
definitions, ‘ 

Most users will probably find this 2 -dimensional form quite suitable. 
However, the facility exists in MAP for handling 1-dlmensional data. The 
user may specify that the input data for a particular run is to be treated as 
line segments. This requires the same storage space; line end points in^ 
stead of rectangle diagonal end points are stored. One-dimensional data 
of this type is readily acceptable to many of the MA^t* processes. However, 
there are certain processes which are not meaningful with 1 -dimensional 
data and the program will consider the data 2-dlmenslonal, The user, 
therefore, should be cautious In selecting meaningful commands when pro- 
cessing linear data. 


4 


MAP COMMAND FORMATS 


This section is devoted to the description of MAP commands. The 
MAP command language is the means by which the user initiates mask pro- 
cessing. This approach contributes to the versatility of the program and 
provides the maximum user control, since processing is performed exactly 
as commanded. 

For a program using this command approach to be versatile, the 
command language must offer a wide range of capabilities. Table 4-1 is 
a summary of the commands comprising the higli-le^fel MAP language. The 
commands are listed in several categories; 

o Preprocessing Commands are processed at the beginning 

of the execution to specify run options and assign names 
to the input masks. 

o Input/Output Commands are provided to allow the user to 

conveniently transfer data. 

o Operational Commands direct the performance of a long 

list of single and double mask operations which result in 
the creation of new masks, 

o List Processing Commands direct several multiple mask 

processes which require complex list processing techniques. 

o Dimensional Processing Commands are provided to Initiate 

various dimensional calculations. 

o Control Commands are provided to allow the user to change 

position in the command string to construct loops and 
branches in processing. 

The user will find that the MAP language contains commands for very 
complex processes as well as very simple processes. Many of the operational 
processes, for example, are very basic processes. The user will find that 
several basic processes are often required to obtain a desired result, and 
there are often several methods of obtaining the same result. With practice, 
a user can quickly acquire the ability to set up efficient command strings. 

The user should not find it distui'bing if a particular execution requires 
several hundred commands, MAP processing speed is very high, particularly 
for the very basic processes. 

4-1 


PREGISDING PAGE BLANK NOT FMBE) 


MAP COMMAND SUMMARY 


COMMAND 


Preprocessing Commands 


DESCRIPTION 


OPTN 

Option specification 

MASK 

Input mask identiiicatioa 

Input/Output Commands; 

COMM 

Comment printout 

FILE 

Special mask output 

TEXT 

Special te3d output 

FREE 

Mask stora£[e release 


Operational Commands 


OPER 

Mask operations 

SPEC 

Mask operatioii specifications 


List Processing Commands 


TRAC 


BOOL 


LIST 


Dimensional Processing Commands 


AREA 

PERI 


PARE 


RANG 


Control Commands 


SKIP 


IFNL 


Interconnection tracin 


Boolean equation generation 


List cross-reference 


Area computation 


Perimeter computation 


Area and perimeter computation 




Unconditional routin 


Null condition routin 


Table 4-1 























This section presents a discussion of each of the command categories 
and a detailed description of each command format and usage considerations. 
The commands are input in a basically free format, are read as 80-character 
records, and are Interpreted character-by-character. 

The format-descriptions which follow illustrate the general form, 
however, the following points should be noted when coding commands; 

o Command names occupy the first four characters of the 

command record. 

G Mask names must be alphabetic strings of one to four 

characters with no internal blanks and must not be the 
same as any of the MAP command names, operators, 
specifiers, or qualifiers, 

o All numerical values must be whole numbers. Positive 

values should not be preceded by a sign. 

o All delimiters (commas, colons, slashes, equal signs, 

ate. ) where specifically illustrated in the format des- 
cription are required, 

o Where blanks are ind'.cated in the format description, 

any number of blanks may be entered and any number 
of blanks may be placed between the command name 
and the rema inder of the command. 

o Characters 73-80 of a command record are not Inter- 

preted as part of the command and, therefore, may be 
used for comments or identification, 

4. 1 Preprocessing Commands 

The preprocessing commands are required for every MAP execution, 
first the OPTN command and then the required number of MASK commands. 
These two commands are read only through the command input unit, and 
should not be included with commands to be read from an alternate command 
Input unit. 


4, 1.1 OPTN “ Option Spe elf ication Commaad 
Format; 

OPTN p,a, d, £,o, s . 

p = 0/1/2/3/4/5/ - degrees of printout. 

a = 0/1/ - alternate input command unit, off/on, 

d = 0/1/ - normal Z-dimenslonal data/1 -dimensional data, 

f = + integer - input scale factor. Positive Implies 

multi|>UGation, negative implies division. 

o = 0/1/ - automatic offset, on /off. 

s = 0/integer - smash slice height after scaling when 

applicable. 

Description ! 

The OPTN command is used to specify options which are to apply 
to an individual MAP run. it is the first command processed. 

The user may select one of six degrees of printed output from the 
printer unit. Table 4-2 indicates the information provided for each degree. 

A value of 2 or 3 is recommended for most runs. 

If an alternate command unit is specified, all commands following 
the last MASK commaad Will be read from the alternate unit. 

One- or two-dimensional data interpretation is in effect for the 
entire run. 

The scale factor Indicated is applied after and in addition to any 
scale factors Indicated in the input data file. 

Automatic offset adjusts all mask coordinates such that the lowest 
and leftmost point on any mask is point (0, 0). If automatic offset is not 
specified, offset will occur only if negative coordinate values are encountered 
In the data, 




4-4 


OPTIONAL INFORMATION OUTPUT 


INFORMATION DESCRIPTION 

PRINT OPTION 

No printout 

0 

General informatic a messages - 
Error messages 

File and mask direetory at beginning and end of run 
Command images as processed 

1-5 

File and mask directory after each process 
Listing of resultant mask data when PRNT specifier 
is used or when data is of a list form 
Timer output after each process 

2-5 

. 

' : * 1 ^ ^ - i , ‘ ; 

Listing of command file at the beginning of the run 
Listing of all resultant mask data 

! 

■ 3-5 

Basic debug output 

4-5 

Listing of intermediate processing mask results 
Extensive debug output 

5 


Table 4-2 


4-5 







The smash slice height should be specified as zero unless the input 
data contains non -orthogonal items. In that case, a smash slice height 
should be specified in accordance with the range in value of the data and the 
accuracy desired. Very thin slices will result in very accurate approxima- 
tions but will increase the number of rectangles on the mask and reduce the 
processing speed. On the other hand, the slice height should not be too large. 
A rule of thumb is the -maximum slice height should not exceed the shortest 
distance between any non -orthogonal line and any other line which is not 
directly connected. This will eliminate any discontinuities which could be 
created in smashing, 

4, 1.2 MASK - Input Mask Identification Command 
Format; 

MASK u, t, s, mj, , . , , mj^ 
u 


t 


s 


Description; 


= integer ^ 1 1 - mask input logical unit number. On 
machines which require a FORTRAN DEFINE FILE 
for a particular format file type, the value of u is 
restricted to the range of 11-15. 

s -1/0/1/2/3/4 - mask data format t/pe. See 
Appendix B for complete description, 

= integer - number of levels to skip before accepting 
input data. For types -1, 3, and 4 it is with respect 
to the beginning of the file; for types 0, 1, and 2 it 
is with respect to the current file position. 

j, . . names to be assigned to the masks as they are input. 


At least one MASK command is required for MAP execution. It must 
follow the OPTN command. 

Multiple MASK commands are required when; data is to be input from 
more than one unit, the data consists of mixed formats, or the desired masks 
cannot be read in a continuous sequential raaaner from the input device. 

The level skip capability is provided to allow inputting portions of 
mask files. After part of a file is skipped, successive mask levels are ac- 
cepted un til all the assigned names have been used. 






4-6 


4, 2 Input/Output Commands 


The commands In this category ar.e all associated with input/output 
operations. 

The COMM and FREE commands are primarily provided as a con- 
venience to the user. The FILE and TEXT commands represent the major 
MAP facility for mask data output. 

4. 2. 1 COMM - Comment Printout Command 

Format; 


COMM character string 

character string = users comment of up to 68 characters 

to be printed on the listing. 

Description ; 

The COMM command allows the user to document the MAP execution 
listing. Whenever a COMM command is encountered, the character string 
contained is printed on the run listing, centered on the page. These 
comments are also a benefit to the user by helping to maintain order and 
meaningfulness of the command file or card deck, 

4.2.2 FILE - Special Mask Output Command 

Format ; 

FILE u, t, m, I, f 

u = 5/6/7/8/9 output logical unit number. 

t = 0/1 /2/3- mask data format type. See Appendix B for 

com|»lete description, 

m = name of the mask to be output. 

I ■= level nurhber on output file. Required only for type 3 format, 

f = 1/0 - new file to be started/no new file. Applicable only to 

<’ I i type 3 format, 

I ■ . 


4-7 


Description; 


The FILE command initiates mask coordinate data output according 
to the format specified by the user. The coordinate data is output as rec- 
tangle descriptions. Where the format permits, the rectangle identifiers 
are included. 

4. 2, 3 TEXT - Special Text Output Command 
Format; 


TEXT u, t, m,l,f 

u = 5/6/7/S/9 “ output logical unit number. 

t = 0/1/3 - mask data format type. See Appendix B for 

complete description. 

n = 1/2/3 - primary/ secondary/both identifiers to be output. 

m = name of the mask for which identifiers are output. 

1 = level number on output file. Required only for type 3 format. 

f = 1/0 - new file to be started/no new file. Applicable only to 

type 3 format. 


Description : 

The TEXT command initiates output of rectangle identifiers. Included 
are the lower left coordinates of each associated rectangle. This type of in- 
formation is very useful for displaying mask area identification when utilizing 
a graphics system with a CRT. 

4.2,4 FREE - Mask Storage Release Command 

Format: 


FREE . . . , mj^ 

mj^, . . . , m^i = names of the masks to be deleted from the master 
mask file. 


4-8 













Description; 

The master mask file contains space for a specific number of masks* 
The number of masks which can be contained depends on the file assignment 
and the dimension of the directory arrays in the particular MAP version. 
When this number of masks is small due*to machine or disk limitations* the 
user may need to delete masks which are no longer needed for processing* 
to provide file space for other masks. This is initiated through the FREE 
command. The program simply erases its directory information for the 
masks listed* releasing the f He space for further use. 


4. 3 Operational Commands 

Two operational commands* GPER and SPEC direct the performance 
of a number of simple mask operations. The OPER command is used to 
initiate an operation involving one or two masks, the result of which is the 
creation of a new mask* The SPEC command is used to define specifica- 
tions to an operation. It precedes the OPER command of the operation for 
which the specifications apply. 

Because the operations which are available and the specifications 
which can be applied are numerous* the general forms of the OPER and 
SPEC commands will be discussed first* each followed by a complete 
description of the specific forms. 

4. 3* 1 OPER - Mask Operation Command 


General Format; 


OPER m 

r 

m = 

r 


obm j , m2Bq j 

the name to be given to the mask resulting from 
the operation. 


a 4-Gharacter operator Identifying the operation 
to be performed. 


m, * m = the names of the masks involved in the operation, 

qj^, q^ = any qualifiers or options associated with the 

operation where applicable. 

General Description ; 

The OPER command simply initiates the creation of a new mask 
from a specified operation on one or two other masks. It is permissible 
for a mask being operated upon to also be named as the resultant mask, 

4-9 


in wh.ich case, the resultant mask will assume the name and the other 
mask will be lost upon completion of the operation. Table 4-3 is a 
summary of the operational forms available with the OPER command, 

SAME Format ; 

OPER m = SAMEbm, 
r . 1 

m = the name of the resultant mask. 

JT 

mj = the name of the mask to which the resultant mask is equated, 
S A ME Pe s c r ipt ion ; 

The SAME operation simply creates a mask which is a duplicate of 
another mask. Unless otherwise specified (by a SPEC command), the 
identifiers on the resultant mask will be the same as on the original nnask. 

NGTV Format ; 

OPER m = NGTVbm, 
r 1 

m = the name of the resultant mask, 
r 

mj^ = the name of the mask of which the resultant mask is a 
negative. 

NGTV Descriptiori. ; 

The NGTV operation creates a mask which is the negative of another 
mask. The lower boundaries of the resultant mask are xero in both x and y 
directions. The upper boundaries are the maximum x and y values encouter- 
ed during preprocessing of the masks. 

Unless otherwise specified (by a SPEC command), the primary and 
secondary identifiers for all of the rectangles on the resultant mask will be 
set to one and two respectively, 

EDGE Format; 


OPER 

m = 

r 


m 

r 

= the name of the resaltant mask* 

o 

- edge operator: 


EDGE 

- extraction of all edges. 


FIEDG 

- horizontal edges only. 


VEDG 

“ vertical edges only. 






SUMMARY OF OPERATIONS 


OPERATOR 

FORM 

SAME 

NGTV 

EDGE 

HEDG 

VEDG 

EXPN 

PLUS 

INTR 

NINT 

EXOR 

LINK 

LINK 

NLNK 

TWIX 

HTWX 

VTWX 

OTWX 

TWIX 

HTWX 

VTWX 

DTWX 

SPIN 

FLIP 

PUSH 

SCAL 

WNDW 

PLAC 


MASKS 

involved 


FUNCTION PERFORMED 

( 

Equation 

Negation : 


Edge extrabtion 


Expansion 

Addition 

Intersection 

Non -inter section extraction 
Exclusive OR 

Single mask linkage 

Double mask linkage 
Non-linkage extraction 


Single mask spacing extraction 


Double mask spacing extraction 


z-axis rotation 

X- and/or y-g^^is rotation 

Offset 

Scaling 

Window restriction 

Cell placement 


Table 4-3 




the name of the mask from which area edges are to be extracted. 

optional buried line removal qualifiers. One or two of the 
following; 

SAMI - same primary identifiers, 

SAM2 - same secondary identifiers. 

SAME - both identifiers the same, 

DIFl - different primary identifiers, 

DIF2 - different secondary identifiers. 

DIFE - both identifiers different. 

EDGE Description; 

Any form of the EDGE operation creates a new mask which contains the 
edges (or sides) of areas (rectangles or groups of rectangles) on another mask. 
Although the resultant edges are lines, they are stored and processed as width- 
less rectangles. The user has the option of extracting all edges, horizontal 
edges only, or vertical edges only by choosing the operator EDGE, HEDG, or 
VEDG respectively. 

If no optional buried line removal qualifiers are specified, the resultant 
mask contains all of the horizontal and/or vertical edges of every rectangle. The 
buried line removal qualifiers allow the user to obtain the edges of mask areas 
(rectangle clusters). If several rectangles are adjacent or overlapping and only 
their periphery is desired, the internal edges maybe eliminated. The line re- 
moval qualifiers represent the conditions upon which internal lines will be re- 
moved. The conditions are based on the relationships of the primary and sec- 
ondary identifiers of any two adjacent or overlapping rectangles in question. 
Figure 4-1 illustrates several examples of EDGE operation results with various 
line removal qualifiers. 

Unless otherwise specified (by a SPEC command), a resultant edge will 
retain the identifiers of the rectangle from which it was extracted. 

EXPN Format; 


mi = 
- 


OPER mj. = EXPNbmj^bx, y 

= the name of the resulteant mask. 

= the name of the mask to be expanded. 
X, y = + integer expansion values. 


4-12 




■ . . . ■ ■ ■ - — - — ■ ... 







EXPN Description ; 

The EXPN operation creates a new mask which contair.s the rectangles 
of another mask expanded by given distances in the x and/or y directions. 
Negative expansion values will result in size reduction. The overall dimen- 
sional change is twice the expansion value; e. g. , in the horizontal direction, the 
left side is shifted left a distance x, and the right side is shifted to the right also 
by a distance x. 

Unless otherwise specified (by a SPEC command), the primary and , 
secondary identifiers will be retained exactly as on the original mask. 

Any portion of the resultant mask, which as a result of expansion, falls 
outside of the first quadrant (positive coordinates) or exceeds the maximum posi- 
tive X or y limits, will be lost. 

The reader will note that this operation is an additive process. For a 
multiplicative scaling, refer to the SCAL form of the OPER command. 


PJjUS Format: 


OPER mj- = PLUSbmj,m 2 

m^f = the name of the resultant mask. 

mj,m2 = the names of the masks to be combined, 

PLUS Description: 

The PLUS operation simply creates a new mask which contains all of the 
rectangles of two other masks. Unless otherwise specified (by a SPEC command), 
the rectangles will retain their original primary and secondary identifiers. 

INTR Format; 


OPER mj. = INTRbmj, m2bq|, q2 

mj. = the name of the resultant mask. 

nij^,m2 = the names of the masks to be intersected. 

” optional mtcrsection qualifiers. One or two of the following; 

SAiVtl - same primary identifiers* 

SAMZ - same secondary identifiers, 

SAME - both identifiers the same. 


4-14 


DIFl - different primary identifiers. 

DIF2 - different secondary identifiers. 

DIFF - both identifiers different. 

INTR Description ; 

The INTR operation creates a new mask which contains rectangles 
representing the coincidence or intersection of two other masks. 


If no qualifiers are specified the resultant mask contains all inter- 
section areas of the two masks. The intersection qualifiers allow the user 
to specify what is a valid intersection between two rectangles based on 
some relationship between the rectangle identifiers, as listed above. 


Unless otherwise specified {by a SPEC command), a rectangle on 
the resultant mask will have primary and secondary identifiers respectively 
reflecting the primary identifier of the rectangle on the first (mj^) mask 
and the primary identifier of the rectangle on the second (ni^) mask which* 
intersected to form it. 


NINT Format: 


OPFR 


m 


m. 


m. 




the name of the resultant mask, 

the name of the mask containing the areas to he 
found exclusive* 

the name of the mask containing excluded areas, 
optional intersection qualifiers, see INTR Format. 


NINT Description ; 


The NINT operation creates a new mask which contains all of the 
areas on the first mask {rrvj) which do not intersect the second mask (m^). 
The qualifiers are the same as for the INTR operation* 


Unless otherwise specified {by a SPEC command), the resultant 
rectangles retain the original identifiers, 

EXOR For mat; 

OPER m - EXOR'J^m , rn_'6q - , 

r 1 Z 2 

m = the name of the resultant mask. 


m^, = the name of the mask on which rectangle linkages are 

to bo found. EBPBODUcmrre of the 

ORIGINAL PAGE IB POOR 


4-15 


= optional intersection qualifiers. See INTR Format. 

EXQR Description ; 

The EXOR operation creates a new mask which contains the exclusive 

OR of the areas on two other masks. The Boolean equivalent expression is 

m = m, * ifl^ + fa. * m^. The qualifiers are the same as for the INTR 

r ,.l 2 1 '2 ^ 

Unless otherwise specified (by a SPEC command), the resultant 
rectangles will retain the identifiers from their respective original masks. 

Single Mask LINK Format : 

m “ LINK6m^-^q^ 
r 1 ^1 

the name of the resultant mask. 

the name of the mask on which rectangle linkages 
are to be found, 

optional inter-mask linkage qualifier; 

POIN - minimum connection by a point, 

LINE - minimum connoction by a line, 

AREA - minimum connection by an area. 

Single Mask LINK Description ; 

The LINK operation on a single mask creates a new mask containing 
the same rectangles as on the original mask but with their identifiers 
modified to reflect connections between rectangles. The resultant secondary 
identifiers are set equal to the original primary identifiers for each rec- 
tangle. The operation locates groups of physically connected rectangles. 

The rectangles v/ithin each group are assigned a new primary identifier 
which is equal to the lowest original primary identifier of the rectangles 
within the connected group. 

The user may specify the minimum qualifications for a valid physical 
conK"'ection with the qualifiers listed above. If no qualifier is specified it 
defaults to POIN, 

Figure 4-2 illustrates the resulting identification number assign- 
ments for each connection qualification for the single mask LINK opei-ation. 


OPER 


m = 

r 



4-16 


















Double Mask LINK Format; 


^iiL. 


€ 


OPER = LINKbrn^^m^bq^jq^ 

m = the name of the resultant mask, 
r 

mj^ = the name of the mask to be linked. 

= the name of the mask to which linkage is performed. 


*11 


q. 


2 


intra-mask linkage qualifier: 


POIN 

LINE 

AREA 

NONE 


minimum connection by a point, 
minimum connection by a line, 
minimum connection by an area, 
no intra-mask linkage. 


optional inter -mask linkage qualifier: 


POIN 

LINE 

AREA 


minimum connection by a point, 
minimum connection by a line, 
minimum connection by an area. 


Double Mask LINK Description : 


The double mask LINK operation first locates the connected groups 
of rectangles on the first mask (jaij) in the same manner as in a single 
mask LINK operation unless otherwise specified (q^^ = NONE), The qualifier 
q^ Is specified to indicate the conditions of a valid connection for this step. 

The next step is to locate only those groups of connected rectangles 
which are connected to any rectangle on the second mask (m^). The qualifier, 
q_, indicates what is a valid connection between masks. 


The rectangles remaining after the final step constitute the resultant 
mask. The rectangle secondary identifiers (unless otherwise specified by a 
SPEC command) will be the original primary identifiers of the rectangles 
on mask mj^. The rectangle primary identifiers will be set to the primary 
identifier (unless otherwise specified by a SPEC command) of the first 
(lowest number) rectangle found on the second mask to which each Is linked. 


Figure 4-3 Illustrates an example of the double mask LINK opera- 
tion. 


4-18 









NLNK Format; 


OPER m = NLNKbm, , m3q, , q, 
r V 2 ^1*^2 

m = the name of the resultant mask, 
r 

= the name of the mask to be found not linked. 

= the name of the mask to which no linkage is to occur, 

qj^ = intra-mask linkage qualifiers (see Double Mask LINK Format). 

q_ = optional inter-mask linkage qualifiers (see Double Mask 
LINK Format). 

NLNK Description ; 

The NLNK operation is essentially the reverse of the double mask 
LINK operation; 1. e., to find the rectangles on the first mask which are not 
linked to the second mask. 

The first step is the same as for the double mask LINK operation. 

The second step is to find only the rectangles or groups of connected rec- 
tangles on the first mask (m, ) which are not connected to any rectangle 
on the second mask (m^). The qualifiers indicate valid connections, and 
are identical in form and meaning to those for the double mask LINK. 

Unless otherwise specified (by a SPEC command), the rectangle 
identifiers will be assigned the same as for a single mask LINK, i. e. , 
as resulting from the first step of the operation. 

Figure 4-3 illustrates an example of the NLNK operation. 

Single Mask TWIX Format ; 


OPER = obm^^ bqj^ 


m = the name of the resultant mask, 
r 

o = spacing opei-ator: 


Tvnx 

HTWX 

VTWX 

DTWX 


horizontal and vertical spacing, 
horizontal spaces only, 
vertical spaces only. 

‘ spaces diagonally off rectangle corners, 
4-20 






rrij^ = the name of the mask upon which spaces are to be found, 
qj = optional identifier qualifier; 

SAME - same primary identifiers. 

DIFF - different primary identifiers. 

Single Mask TWIX Description ; 

Any one of the forms of the single mask TWIX operation is a process 
of locating spaces between rectangles on a mask. The user may extract 
horizontal and vertical, horizontal only, vertical only, or diagonal spaces 
by choosing one of the operator forms: TWIX, HTWX, VTWX, or DTWX, 
respectively. 

The user may further qualify the extracted spaces by specifying 
a qualifier limiting valid spaces to only those between two rectangles with 
different primary identifiers. If no qualifier is given all spaces are ex- 
tracted. 


Unless otherwise specified (by a SPEC command), the space rec- 
tangles constituting the resultant mask will each have their primary identi- 
fier set to the primary identifier of the rectangle on the original mask 
which was to the left or below it, and each secondary identifier will be 
set to the primary identifier of the rectangle on the original mask which 
was to the right or above it. 


Figure 4-4 illustrates examples of single mask TWIX operations. 

Double Mask TWIX Format ; 

OPER m - ohm, , m_-hq, 
r 1 2 ^1 

m = the name of the resultant mask, 

r 

o = spacing operator; 

TWIX - horizontal and vertical spaces. 

HTWX - horizontal spaces only. 

VTWX - ver-tical spaces only. 

DTWX - spaces diagonally off rectangle corners, 

m, , m = the names of the masks between which spaces are 
to he found* 


4-21 





qj^ = optional Identifier qualifier: 

SAME ” same primary identifiers. 

DIFF “ different primary identifiers. 

Double Mask TWIX pescription. ; 

The forms of the double mask TWIX operation are the same as the 
single mask TWIX forms except that spaces extracted are between the 
rectangles of two masks; i. e. , as would be seen if the two masks were 
overlayed. Only spaces between rectangles of different masks are extracted. 

The Identifier qualifier has the same meaning as for the single mask 
TWIX operation. 

Unless otherwise specified (by a SPEC command), the space rectangles 
constituting the resultant mask will each have primary and secondary identi- 
fiers corresponding to the primary identifiers of the rectangle on the first 
mask (m^) and the rectangle on the second mask (tn 2 )» respectively, between 
which tbe space was located. 

SPIN Format: 


OPER 


m 


m. 


^ »y 

r ■'r 


m = SPINbm,bx ,y ,q 
r 1 r r 

the name of the resultant mask, 
the name of the mask to be rotated, 
integers^ 0 - coordinates of the center of rotation. 
: 1/2/3 - the number of quadrants of rotation.^ i . . 


SPIN Description : 

The result of the SPIN operation is the original mask rotated in the 
x-y plane about the point (x^,y^) q quadrants in the clockwise direction. 

Unless otherwise specified (by a SPEC command) the resultant 
rectangle identifiers are the same as on the original mask. 

Any portion of the mask, which, as a result of the SPIN operation, 
falls outside of the first quadrant (positive coordinates) or exceeds the 
maximum positive x or y limits, will be lost. 




c 


FLIP Format; 


OPER m = FLIPbm,^x ,y 
r X m m 

m = the name of the resultant mask, 
r 

= the name of the mask to be mirrored, 

X = positive integer - x mirroring axis; or no x i 
mirroring if zero, . , 

y = positive integer - y mirroring' axis j or no y < 
m . . , - 

mirroring if zero* 

FLIP Descrlptlpn ; 


The result of the FLIP operation Is the mirroring of a mask about 
a line x = x and/or about a line y = y^^. Unless otherwise specified (by 
a SPEC command), the resultant rectangle identifiers are the same as 
on the original mask. 


Any portion of the mask which, as a result of mirroring, falls 
outside of the first quadrant (positive coordinates) or exceeds the maximum 
positive X or y limits will be lost. 


PUSH Format: 


OPER m = PUSHbm,^x , y 
r 1 o 'o 

m = the name of the resultant mask, 
r 

m^ = the name of the mask to be offset, 

X = integer - x direction offset value, 
o 

y = integer - y direction offset value. 

PUSH Pescrlptlon. ; 

The result of the PUSH operation is the offsetting of the original 
mask by a value of x in the x direction and y in the y direction. 

Unless otherwise specified (by a SPEC command), the resultant 
rectangle identifiers are the same as on the original mask. 


4-Z4 




Any portion of the mask which, as a result of the offset, falls outside 
of the first quadrant (positive coordinates) or exceeds the maximum positive 
X or y limits, will be lost. 

SCAL Format ; 

OPER m = SCAL«m,-«x ,y 
r 1 s 's 

m = the name of the resultant mask, 
r 

m^ = the name of the mask to be scaled. 

x^ = integer scale factor in the x direction. Negative 
values indicate division. A zero is interpreted 
as no scaling. 

y = integer scale factor in y direction. Negative values 
indicate division, A zero is interpreted as no 
...I'ling. 


SCAL Description ; 

The result of the SCAL operation is the scaling of the original mask 
by given factors in the x and/or y directions. The reader will note that this 
is a multiplicative process. For an additive expansion or reduction see 
the EXPN form of the OPER command. 


Unless otherwise specified (by a SPEC command), the resultant 
rectangle identifiers are the same as on the original mask. 

Any portion of the mask which, as a result of the scaling process, 
falls outside of the first quadrant (positive coordinates) or exceeds the 
maximum positive x or y limits will be lost. 


WNDW Format ; 

OPER = WNDWbmj^-bXj^, y^ 

m = the name of the resultant mask, 
r 

mj^ = the name of the mask to be windowed, 

Xj^,yj^ = integers - the lower left corner coordinates of 
the rectangular window. 




integers - the upper right corner coordinates of the 
rectangular window. 





4-Z5 










■. V. '.r .. . ■ . .. 


WNPW Description ; 


The result of the WNDW operation is a mask which contains only the 
areas of the original mask which fall within the range of a rectangular window. 
The window is specified by its lower left corner point (xjjyi) and its upper 
right corner point 

Unless otherwise specified (by a SPEC command), the resultant rec- 
tangle identifiers are the same as on the original mask, 

PLAC Forrnat! 


OPER mj. = PLAC ^ mj,m2 

mj. = the name of the resultant mask, 

mj^ = the name of the mask containing the cells to be placed, 

m 2 = the name of the mask containmg placement location of the cells. 

PLAC Description; 

The PLAC operation creates a mask which is the res^!lt of placing the 
cells defined by the first mask (mj) in the positions defined by the second mask 

(rnzi* 


Unless otherwise specified (by a SPEC command), the resultant placed 
cell rectangle identifiers will be the cell identifiers as on the first mask (mj). 

Any portion of the mask which, as a result of the placement process, 
falls outside of the first quadrant (positive coordinates) or exceeds the maximum 
positive X or y limits will be lost. 

The mask contaming the cell description (mj^) must be a valid cell mask. 
The mask containing the cell placement location (m 2 ) must be a valid placement 
mask. Refer to Appendix B for the data types and format descriptions of these 
special mask forms, 

4 . 3.2 SPEC - Mask Operation Specification Command 
General Format: 


S PE C 

s S 2 , . . . , = specifications list. 


4-26 






General Description ; 


The SPEC command is used to define specifications to be applied to the 
Operations defined by OPER commands. Table 4-4 is a summary of the avail- 
able specification forms* 

Any number combination of specifications may be defined for a single 
operation. Multiple SPEC commands may be used where necessary* All SPEC 
commands must directly precede the OPER command for the operation to which 
they apply. Where conflicting or redundant specification types arc contained in 
a SPEC command, the program accepts the last one encountered as valid. Once 
the operation has been performed, the program cancels the specifications. 

In the following description of the individual specifier forms, the formats 
will each be illustrated as if they were used alone. Where several specifications 
are defined they are separated by commas as shown in the above general format. 

Any rectangle identifier modifications as indicated by the specifiers E and 
R are performed in the very last step of any operation. The modifications are 
based on a previous identifier status. This identifier status is the default status 
and depends upon the operation form. The defaults are contained in the descrip- 
tion of each OPER form in the preceding portion of this chapter, 

PRNT Specifier Format; 


SPEC PRNT 


PRNT Specifier Description; 

The PRNT specifier simply indicates the result of the operation is to be 
printed by the listing device. The six-word rectangle desGriptions are printed 
one per line. The result is a six column list where the columns contain primary 
identifiers, secondary identifiers, low x-coordinates, low y- coordinates, high 
x-coordinates, high y-coordinates. 

The user must be sure that the proper print option value has been speci- 
fied by the OPTN command, as the PRNT specifier may be overridden, 

TEMP Specifier Format: 

SPEC TEMP 

TEMP Specifier Descriptiom 

The TEMP specifier indicates that the result of the operation is to be 
discarded upon the completion of the operation. The TEMP specifier is obviously 

4-27 




SUMMARY OF OPERATIONAL SPECIFICATIONS 


SPECIFIER FORM 

application to OPERATIONAL RESULT 

PRNT 

Printed putput 

TEMP 

Temporary storage 

MIN 

Minimum dimensional restrictions 

MAX 

Maximum dimensional rest^rictions 

E 

Identifier equation 

R 

Identifier replacement 

s 

Identifier starting number 

I 

Identifier incrementing value 


Table 4-4 















meaningless unless the output is printed. If it is used alone the operation will 
be wasted unless a PRNT specifier is defined or an appropriate print option 
was given in. the OPTN command. This specifier is useful to avoid accumula- 
ting masks which only need to be printed. 

MIN Specifier Format ; 

SPEC MINd = V 

d =1- character direction indicator: 

A - all (x and y) directions, 

X - X direction, 
y - y direction, 

L - length. 

W - width. 

R - radial. 

V = integer minimum dimension value. 

MIN Specifier Description; 

The MIN specifier allows the user to define the minimum acceptable 
dimensions of resultant mask areas. If some portion of an area does not meet 
the minimum dimension requirements, that portion will be deleted from the 
result. The minimum dimension restriction can be applied in any of the direc- 
tions indicated above. Table 4-5 indicates which of the directions are valid for 
which opex'ation forms, 

MAX Specifier Format : 

SPEC MAXd = V 

d = 1 -character direction indicator. 

A - all (x and y) directions. 

X - X direction. 

Y - y direction. 

E - length. 

W - width. 

R - radial. 


= integer maximum dimension value. 


4-29 




MIN AND MAX SPECIFIER’S APPLICATION TO OPERATIONS 


SPECIFIER FORMS 


MINA, MAXA 


MINX. MAXX 


MINY. MAXY 


MINE, MAXL 


MINW, MAXW 


MINR, MAXR 


APPLICATION TO OPER FORMS • 


Applicable to any OPER form. 


Applicable to any CPER form, 

Applicable to any OPER form. 


Applicable to all EDGE forms to limit 
line lengths. Applicable to single and 
double mask TWIX, HTWX, and VTWX 
forms to limit the length of spacing runs. 


Applicable to single and dovible mask 
TWIX, HTWX, and VTWX forms to 
limit the spacing distance. 


Applicable to single and double mask 
DTWX forms limiting the diagonal 
spacing distance. 


Table 4-5 












MAX Specifier pesGrlption. ; 


The MAX specifier allows the user to define the maximum acceptable 
dimensions of resultant mask areas, bE some portion of an area exceeds 
the maximum dimension requirements, that portion will be deleted from 
the result. The maximum dimension restrictions can be applied in any of 
the directions listed. Table 4-5 indicates which of the directions are valid 
for which operation forms. 

E Specifier Format ; 

SPEC Ei @i 
r p 

i^ = the identifiers to be equated; 

1 - primary, 

2 - secondary. 

i = the previous identifier to which the new identifier is 
^ being equated: 

1 - primary. 

2 - secondary, 

E Specifier Description : 

The E specifier is used to cause the resultant rectangle primary and/ 
or secondary identifiers to be equated to the previous primary or secondary 
identifiers. A complete swap of identifiers is specified by El@2 and E2@l. 

R Spectfier Format ; 

SPEC Ri @i 
r p 

= the Identifiers to be replaced: 

1 - primary. 

2 - secondary, 

i = the condition of the previous identifiers as the basis 
^ for incrementing the Identifiers being replaced; 

0 - unconditional replacement, identifier incremented 

for each rectangle. 

1 - increment on a change in previous primary identifiers. 

4-31 




2 - increment on a change in previous secondary identifiers. 

3 - increment on a change in either the primary or secondary 

identifiers, 

R Specifier Description ; 

The R specifier is used to cause the resultant rectangle primary 
and/or secondary identifiers to be replaced based on some condition of 
the previous status of the identifiers. 

When an R specifier has been given, the functional portion of the 
operation Is performed normally. Upon completion, the resultant rec- 
tangles are arranged in an ordered list. The ordering is based first 
on the lowest primary Identifier; when they are equal the next considera- 
tion is the lowest secondary identifier. 

The replacement of identifiers is based on the position of the 
rectangles in the ordered list. An unconditional replacement {ip = 0) is 
simply the assignment of new Identifiers in sequential fashion through 
the list, incrementing the identifier for each rectangle. For the other 
replacement types (ip = 1, 2, or 3) identifiers are replaced in the same 
sequential fashion thx*ough the list except the identifier value is only Incre- 
mented upon conditions of change In previous identif?ers. For ip = 1 tn- 
crementLiig occurs when a new primary identifier is found, for Lp = 2 
incrementing occurs when a new secondary identifier is found, and for 
ip = 3 incrementing occurs when either a new primary or secondary has 
been found. 


The S and I specifiers discussed later in this section are used In 
conjunction with the R specifier to define the starting value and the Incre- 
ment. If the S or I specifiers are not given, the starting value defaults to 
one and the Increment defaults to one, 

S Specifier Format ; 

SPEC Si @^Hiv, ox 
r 

SPEC Si 

r 1 1 

i ^ = the identifiei* being replaced for which the starting 

value is being defined: 

1 - primary. 

2 - secondary. 

V = positive integer identifier starting value. 


4-32 


Ij = the type of identifier to be looked up for use in 
computing starting value; 

1 - primary. 

2 - secondary. , 

nij = the name of the mask for which the highest ij^ 
identifier is looked up. 

S Specifier Description ; 

The S specifier is used in conjunction with an R specifier to define 
the starting identifier to be used in the ideatifier replacement process. 

There are two forms of the S specifier as shown above. The first 
form allows the user to specify a constant starting value. The second 
form allows the user to have a starting value calculated based upon the 
highest identifier found on another mask. The program looks up the 
highest type ij (primary or secondary) Identifier assigned to any of the 
rectangles on ttie desired mask m, . The program then adds one increment 
to this- value to get the starting value for replacement. 

When an R specifier is used without an S specifier the starting value 
defaults to one. When an S specifier is used without an R specifier, it is 
ignored. 

Caution should be exercised in choosing a starting value. If an 
identifier exceeds the maximum integer value allowed for the particular 
computer, the run may produce erroneous results or may abort. 

I Specifier Format ; 

SPEC li @#bv 

T 

= the identifier being replaced for which the replacement 
Incrementing value is being defined; 

1 - primary. 

2 ~ secondary, 

V = integer Increment^ 0, 

I Specifier Description ; 

The I specifier Is used in conjunction with an R specifier to define 
the value by which replacement numbers are changed for each time they 
are incremented. The increment value is simply given as a constant integer 
value. 


4-33 


When an R specifier is used without an I specifier the increment value 
defaults to one. When an I specifier is used without an R specifier, it is ignored. 

Caution should be exercised in choosing large increment values. If an 
identifier exceeds the maximum integer value allowed for the particular comput- 
er, the run may produce erroneous results or may abort. 

4. 4 List Processing Commands 

Three special list processing commands are provided for the MAP user. 
These commands direct complex multiple mask processes: 

o interconnection tracing (TRAC), 

o Boolean equation generation (BOOB), and 

o list cross-referencing (LIST). 

These three commands have the same general format. The specific format for 
each is presented in the following sections. In all eases where the command def- 
inition becomes lengthy, it may be divided among several command records. In 
this case, the command string must be divided between items- <tnd an must 
appear as the 72nd character on each record except the last, 

4.4,1 TRAC - InterconnectiGn Trace Command 

Format ; 

TRAC /i^/ 

/ijj/ =nth item, in the string, of the form ,, . m^/. 

m^ =the name of the mask involved in the trace (reference mask). 

names of the masks which connect directly to the reference mask 

Description ; 

The purpose of the TRAC process is to locate all interconnections (inter- 
sections) between a number of levels of masks. The result of this complex 
linkage process is the reassignment of rectangle identifiers to reflect all of the 
interconnections among the given masks. 

The masks involved and their inter connection possibilities can be expres- 
sed as a connection tree. The tree is merely a graphic description of those masks 
which may be connected through intersection. The following illustration is an 
example of a connection tree of masks A through E, 

. I 

4-34 




© ©- — © 

© — 0 

This is interpreted: mask A connects to mask E if there is some area on 
mask A which intersects some area on mask C which intersects mask E, or is 
connected to another area' on mask C which intersects mask E, and so on. If this 
condition exists then all of the areas on masks E, C, and A which contribute to this 
pathway, or node, will be given the same primary identification number. 

The user represents the tree structure in the TRAC commands by indica- 
ting each mask name and the names of each mask to which it may immediately 
connect. For the above tree, the TRAC command might be represented as: 

TRAC /E:C/C:A, B, E/A:C/B;C, D/D:B/ 

i, e, , E connects to C, C connects to A, B, and E, and so on. The masks in the 
connection tree may be expressed in any order in the TRAC command, and the 
connection path identifier assignments will be based on that order. 

The user should examine the primary identifiers of the rectangles of the 
masks involved before commanding execution of TRAC, Any rectangles with equal 
primary identifiers will be considered as the same node. If this is to be avoided, 
the primary identifiers on all the masks involved should be made unique. This may 
be done with a proper SPEC command preceding a SAME operation equating a mask 
to itself. 

Appendix C illustrates a simple example of an electrical nodal trace using 
the TRAC command. 


4, 4. 2 BOOL - Boolean Equation Generation Command 


Format; 

BOOL /u/ij/i2/.../in/ 

u = S/6/7/8/9 - logical unit to which Ijonlsan data is to be written, 

= nth item in the string, of the form /mi^:m,a,mb. , . m^/ or of 
the form where: 

m^^ = the name of a mask for which Boolean equatioiis are to 

be generated {reference masks). 


4-35 


ma-tni = the names of the masks from which respectively each 
of i minterrns may be derived for each item on the 
reference mask. If a mask name is preceded by the 
character'*" " that mask's minterrns will be inverted 
(NO Ted). 

s =0/1 indicating a constant off or on state respectively. 

Description; 

The BOOL command process creates a list of Boolean equations which 
describes some interaction between masks, i, e., the status of some mask 
item as controlled by the status of other mask items. For example, the 
status of operation (ON /OFF) of a lightbulb may depend on the status of a 
switch and the status of voltage on the line; or the status of pipeline flow 
may depend on the status of a valve and status of fluid in the lines. 

The equation generation process initiated by the BOOL command might 
best be described by a detailed example, A specific application for computer- 
aided-design Is that of describing the ON/OFF logic state of each source (or 
drain) node in terms of the states of other nodes controlling it. The source 
(or drain) node state of a transistor is controlled by the state of its gate 
node and its drain (or source) node. The status of a node may be controlled 
by more than one transistor as shown below, 

A o 


? N 


B o 




The status of node N is not only controlled by the states of nodes 
A and X, but also by the states of nodes B and Y. If the transistors are 
P- channel the Boolean expression for the status of node N is; 

N = X AND NOT A OR Y AND NOT B, 

if the transistors are N-channel the ejqiression is; 

N = X AND A OR Y AND B, 


4-36 





where each transistor contributes a minterm (e, g. , X and A) to the expression. 
The equation generation process locates all the nodes controlling each node and 
generates the Boolean expression. The user need only specify the masks on 
which the minterms are located. Of course, there are nodes which have a con- 
stant On or OFF status, i, e, , power and ground. 

The equation generation process for CMOS requires the following masks 
to be identified; 


P guard band (PG) 


-N guard band (NG) 


-P sources/draina (PSD) 


where the prirnary sequence numbers 
are node identifications. Each node 
on this mask is grounded (0), 

where the primary sequence numbers 
are node identifications. Each node on 
this mask is connected to power (1), 


-P gates (PGM) 

-N sources/drains (NSD) 
-N gates (NGM) 


> 


where the primary sequence numbers 
are devices and secondary sequence 
numbers are nodes. 


Thus, the BOOL command is expressed: 

BOOL /u/PG;0/NG:l/PSD:PSD, 'PGM/NSD:NSD, NGM/ 


where each item is the mask name of the node and mask name of its minterm 
components. The sign *' ' ” preceding the mask name PGM indicates that each 
minterm part located from that mask is to be a NOT state in the Boolean expression. 


The Boolean expressions are printed out if an appropriate print option was 
specified in the OPTN command. The identifier data used to construct the expres- 
sions is written to the specified logical unit. Section 5,2 explains the format of 
this output. 

4.4.3 LIST - List Cross-Reference Command 
Format : 

LIST /u/ii/i2/, . . /in/ 

u = 5/f>/7/8/9 •• logical unit to which the cross-reference li^is to 

be written* 



•I 






■-i 


/L / = nth item in the string, of the form /m :m ,m, , 
n , nab i 

where: 

m -m, - the names of up to three masks contribute 

3* X * 

to the cross -refereace -list. 


Descrjptloa ; 


The LIST process performs a cross-reference on the rectangle 

identifiers on several masks. Each item contains the name of the reference 

mask m and a list of associated masks m -m.. The process creates 
n a i * 

a list where each entry (which corresponds to one unique primary/secondary 

identifier pair on mask contains the following: 


o word 1 

o word 2 

o word 3 

o word 4- 

word i+2 


rectangle primary identifier. 

rectangle secondary identifier, 

rectangle secondary identifier which 
has the same primary identifier (word 1). 

same as word 3 for masks 


o last word - the Item number n, (position in LiIST command). 

When there is more than one Item specified in the command, the final list 
is created by combining and ordering all of the entries from each item's list. 


The final cross-reference is v/ritten to the specified logical unit. 
Section 5.2 explains the details of this format. If an appropriate print 
option was specified in the OPTN command, the list will also be printed, 

4, 5 pimenSLonal Processing Commands 

Several commands are provided for the user to direct dimensional 
computation proces s: areas, perimeters, and ranges. The result of any of 
these processes is a list of the numeric result of the particular computation. 

The folXov/lng pages describe each of the computations and the 
format of each command. In all cases, the resultant values are listed in 
scientific notation: a value times a power of ten. For simplicity only the 
value and exponent are listed. 


4-38 


RODOCmiTY OF THE 

T?a Pi Wffi 


i 


< 


4 , 5 . 1 AREA - Area Computation Command 
Format ; 

AREA u, m, f 

u = 5 / 6 / 7/819 - logical unit to which area data is to be written, 

m = the name of the mask for which rectangle areas are to 

be computed. 

f = + integer factor 0 to be applied to the final result. 

Negative values imply division. 

Description ; 

The result of the AREA computation is a list of the areas {length x 
width) of the rectangles on the mask, adjusted by the given factor. The 
list is printed in four columns (if an appropriate print option was specified 
in the option command): primary identifiers, secondary identifiers, area 
value, and exponent of ten multipliers. The list is written to the specified 
logical unit in the format described in Section 5.2. 

4,6.2 PERI - Perimeter Computation Command 

Format ; 

PERI u, m, f 

u = 5/6/7/S/9 - logical unit to which perimeter data is to be 

written. 

m = the name of the mask for which the rectangle perimeters 
are to be computed. 

f = integer factor ^ 0 to be applied to the final result. Nega- 
tive values imply division. 

Description ; 

The result of the PERI computation is a list of the perimeters of 
the rectangles on the mask, adjusted by the given factor. The list is 
printed in four columns (if an appropriate print option was specified in the 
option command); primary identifiers, secondary Identifiers, perimeter 
values, exponent of ten multiplier. The list is written to the specified logical 
unit in the format described In Section 5.2, 

4-39 


I 


4,5.3 PARE - Area and Perimeter Computation Command 
Format ! 

PARE u, m, f , f 
a p 

u = 5/6/7/8/9“ logical unit to which area and perimeter data 
is to be written, 

tn = the name of the mask for which the rectangle areas and peri- 
meters are to be computed, 

f = + integer factor 0 to be applied to the final area result. 
Negative values imply division, 

f = i integer factor 0 to be applied to the final perimeter result. 
^ Negative values imply division. 

Description ; 


The result of the PARE computation is simply a combination of the 
AREA and PERI computations. The list is printed in sbc columns (if an 
appropriate print option was specified in the option, command); primary 
identifier, secondary identifier, area value, exponent of ten, perimeter 
value, exp.ynent of ten. The list is written to the specified logical unit in the 
format described in Section 5.2. 

4,5,4 RANG - Range Computaticn Command 


F ormat: 


RANG u, m, f ,f 

X y 

u = 5 76/7/8/9 - logical unit to which range data is to be written, 

m = the name of the mask for which the rectangle x and y ranges 
are to be computed, 

f = i integer factor / 0 to be applied to the final x range result, 
^ Negative values imply division, 

f = + integer factor / 0 to be applied to the final y range result. 
^ Negative values imply division. 

Description ; 


ytyj 


The result of the RANG computation is a list of the x (x^, - x. ) and 
- y.. ) ranges of the rectangle on the mask. The list is printed in six 
^ " 4-40 


columns (if an appropriate print option was specified in the option command) 
primary identifier, secondary Identifier, x range value, exponent of ten, 
y range value, exponent of ten. The list is written to the specified logical 
unit in the format described in Section 5,2. 

4, 6 Process Control Commands 

Several commands have been provided to allow the user to control 
the manner in which the total command file is processed. The commands 
allow the user to have commands unconditionally skipped, or routing in 
the command file to occur based on a null mask condition. 

With practice, a user will quickly learn to set up complex loops 
and branches in the command file where necessary. This capability also 
provides for reduction in run times where processes are only useful for 
non-null masks. The masks may be tested for a null condition and blocks 
of commands may be skipped if a null is found, 

4.6.1 SKIP - Unconditional Routing Command 

Format ; 

SKIP n 

n = integer - number of commands to skip. 

Description ; 

The SKIP command directs the program to move forward or back- 
ward in the command file. The command file is positioned to next read the 
nth command following {+) or preceding (-) the SKIP command. 

4, 6, 2 IFNL - Null Condition Routing Command 

Format ; 

IFNL m, n 

m = name of the mask to be tested for null condition, 
n = + integer - number of commands to skip.. 


4-41 






c 


Description ; 


The IFNIj commands direct the program to tost for a null condition 
of the given mask, and if null, to move forward or backward in the command 
file. When this occurs the command file is positioned to next read the nth 
command following (+)• or preceding (-) the IFNL command. 


e 


C 


4-42 


5 


MAP OUTPUT 


Several forms of data output are provided by MAP, The two major 
categories of output are Informational output and mask data output. The 
following pages describe these output forms In detail. 

5,1 Informational Printout 


MAP inforxnational output is sent entirely to the listing device. Infor- 
mational output includes page headings, tables, command images, and 
messages documenting a particular MAP run. The degree of printout Is 
optional as indicated in Table 4-2. The general form of the headings and 
tables is illustrated in the sample run listing given in Appendix C. Messages 
associated v'ith abnormal processing conditions are listed in Table 5-1, 

When any special debug executions are necessary, the user may 
specify a print option value of 4 or 5 on the OPTN command. Debug print- 
out consists of single line strings of specific program variable values. 

This printout has been implemented for selected subroutines and generally 
occurs on entering or exiting the routine. The debug printout is divided 
into two categories: basic and extensive. The basic debug printout occurs 
at significant points in the processes. The extensive debug printout occurs 
in repeatedly-used routines and may produce a lengthy listing, A print 
option value of 4 yields only the basic form, a value of 5 yields both forms. 
Table 5-2 lists the subroutines where printout inay occur and a description 
of the significance of the processing point where the line is printed. The 
reader may refer to the source listing for the names of the actual variables 
being printed. 

5.2 Mask Data Output 

The mask data output includes any type of data directly related to 
mask rectangle coordinates or identifiers. 

The simplest form of this type is a printed listing of mask coor- 
dinates and identifiers. As previously mentioned, this is controlled by 
the print option of the OPTN command and the PRNT specifier of the 
SPEC command, for OPEIl commands. 

Another output form for mask coordinates and identifiers Is via ^he 
FILE and TEXT commands to secondary storage devices. The forma.cs 
available are generally the same as for originally Inputting mask data to 
MAP, Appendix B describes each format in detail. The masks Involved 
in these commands will also be printed when the print option is greater than 
2 . 


5-1 


ABNORMAL PROCESSING CONDITION MESSAGES 


MESSAGE 


# FATAL ERROR # 
CONDITION 1 


# FATAL ERROR # 
CONDITION 2 


# WARNING # 
CONDITION 3 


# WARNING # 
CONDITION 4 


# ERROR # 
CONDITION 5 


# ERROR # 
CONDITION 6 


# WARNING # 
CONDITION 7 


INTERPRETATION 


The first command was not an OPTN 
command. The execution is terminated. 


No MASK command was encountered 
immediately following the OPTN 
command. The execution is terminated. 


A commanu has been encountered which 
does not contain a proper command type 
name as the first four characters. The 
command is ignored. 


A command format error is present 
disabling complete interpretation of the 
command. An attempt is made to exe- 
cute the command as it was interpreted. 

A command format error is present 
preventing any meaningful interpreta- 
tion of the command. The command is 
ignored. 


No space is available on the mash file 
to write another intermediate or resul- 
tant mask. Execution of the command 
is terminated. 


A mask needed for a process is not 
listed in. the mask directory. The mask 
is assumed to be iiuU^ TlxLs condition 
may often occur for valid reasons since 
null masks are not listed in. the mask 
directory. However, the user should 
check the spelling of the names given 
in the command whenever receiving the 
message. 


Table 5-1 




5-2 




ABNORMAL PROCESSING CONDITION MESSAGES 

(continued) 


MESSAGE 

INTERPRETATION 

# WARNING # 
CONDITION 8 

An intermediate result or a final resul- 
tant mask is null. This is a valid con- 
dition often encountered in MAP pro- 
cessing. When a resultant mask is null, 
this message is followed by a null mask 
message printed at the end of the 
command processing. 

# ERROR # 
CONDITION 9 

An invalid logical unit number has been 
specified in a command. Execution of 
the command is terminated. 

# WARNING # 
CONDITION 10 

An error has occurred in reading a 
command. An attempt is made to read 
the next command. 

# WARNING # 
CONDITION 11 

An error has occurred in writing mask 
data to an output device. An attempt is 
made to continue execution. 

# WARNING # 
CONDITION 12 

An error has occurred in reading mask 
data from an input device. An attempt 
is made to continue execution. 


Table 5-1 
(continued) 


5-3 


yiBwyMfi.iMin iiiinij ii|i 



DEBUG PRINTOUT 


SUBROUTINE 

DESCRIPTION 

OPl 

Processing path flags are printed preceding a 
single mask process step. 

OP2 

Processing path flags are printed preceding a 
mask multiplying process step. 

OPS 

Processing path flags are printed preceding a 
simple multi-pass processing step. 

OP4 

Processing path flags are printed preceding a 
complex multi-pass processing step. Pass 
flags are printed at the beginning of each pass. 

SMASH 

Mask parameters are printed preceding the 
first pass of input processing for an input maslc. 

101 

The input mode is printed preceding input of 
type -1 mask data. This is available only using 
a print option value of 5, 

101 A 

The input mode is printed preceding input of 
type 0 mask data. This is available only using 
a print option value of 5, 

10 IB 

The input mode is printed preceding input of 
type 1 mask data. This is available only using 
a print option value of 5* 

lOlC 

The input mode is printed preceding input of 
type 2 mask data. This is available only using 
a print option value of 5, 

lOlD 

The input mode is printed preceding input of 
type 3 mask data* This is available only using 
a print option value of 5. 

10 IE 

The input mode is printed preceding input of 
type 4 mask data. This is available only using 
a print option value of 5, 


Table 5-2 


5 - 4 - 








DEBUG PRINTOUT 

(Continued) 


SUBROUTINE 

DESCRIPTION 

104 

Input and mask parameters are printed follow- 
ing the reading of a record from the mask file* 

105 

Output and mask parameters are printed fol- 
lowing the writing of a record to the mask file* 

ORDER 1 

The entry data and ordering flags are printed 
following the entry of an item into an ordered 
list* This is available only using a print option 
value of 5, 

ORDER2 

Ordering flags are printed printed preceding 
the final process of sequencing an ordered list. 

ORDERS 

Ordering flags are printed preceding the final 
process of ordering large lists. 

ORDER4 

A pattern identifier is printed preceding the 
process of settmg up an ordering priority 
pattern. 

BOOKl 

Mask parameters are printed following the loca-^ 
tion of a mask in the mask directory. 

BOOK2 

Mask paraiTH:;ters are printed foll.owing the 
deletion of an entry in the mask directory. 

GEOM 

Testing parameters arc printed at the beginning 
of each step in a dimensional testing process. 


Table 5-2 
( Ct>ntlnM cd) 







Another method of output for mask data Is via the commands: BOOL, 
LIST, AREA, PERI, PARE, and RANG. These output forms are not strictly 
rectangle coordinates 'j^nd Identifiers, but are other forms of mask data which 
may be of use for more than casual informational purposes. In all cases, 
the results of these processes are printed when the print option is greater 
than 1. In addition, t>ie resulting lists will be output to a secondary storage 
device. The records output to the device contain the same numeric data 
as is printed in type 0 output format. Refer to Appendix B for format 
details. 


6 


PROGRAM STRUCTURE 


MAP FORTRAN code is in the form of a main program and a number 
of subprograms. The main program is' organized into many small "inline 
routines," These inline routines are simple sections of code in the main 
program which are set apart by comments and specific statement label 
ranges. These inline routines represent specific processes; overall pro- 
gram flow, command processing, and operation forms. 

Table 6-1 is a list of each of the inline routines and a brief functional 
description. Table 6-2 describes each of the actual FORTRAN subprograms 
All of the subprograms are FORTRAN subroutines unless otherwise noted 
in the table. Further Information regarding routine functions can be gained 
from the liberal comi. ents in the MAP source listing. The details of the 
calling structure of these routines and subprograms are presented in 
Appendix D. 

Although the core requirement for MAP is minimal, overlaying may 
be necessary on machines of very limited core resources, MAP is struc- 
tured so that it may be readily overlayed. Figure 6-1 illustrates a recom- 
mended overlay structuro. With this structure a maximum of about 65% 
of the program procedure can be resident at any time. 


6-1 








MAIN PROGRAM INLINE ROUTINE DESCRIPTIONS 


NAME 

DESCRIPTION 

Program. Flow Routines; 

1 

INIT 

Program initialization i 

ORTHO 

Mask Input and orthogonal refinement 

COMMIE 

Command interpretation and execution 

FINIT 

Normal program termination 

Command and Processing Routines: 

COMM 

User comment output 

FILE 

Coordinate storage 

TEXT 

Identifier storage 

FREE 

Mask storage release 

OPER 

Operation execution. 

SPEC 

Operational specif ications setup 

TRAC 

Nodal trace execution 

BOOL 

Boolean equation generation 

LIST 

Special list processing 

AREA 

Area computation 

PERI 

Perimeter computation 

PARE 

Area and perimeter computation 

RANG 1 

Range computation 

SKIP 

Unconditional command file repositioning 

IFNL 

Null mask condition command file repositioning 


Table 6-1 
6-2 






























MAIN PROGRAM INLINE ROUTINE DESCRIPTIONS 


(continued) 


NAME 

DESCRIPTION 

Operational Processing Routines; 

SAME 

Equation 

NGTV 

Negation 

EDGE 

Edge extraction 

EXPN 

Expansion 

PLUS 

Addition 

INTR 

Intersection 

NINT 

Non-intersection extraction 

EXOR 

Exclusive OR 

LINKl 

Single mask linkage 

LINK2 

Double mask linkage. 

NLNK 

Non-linkage extraction 

TWIXI 

Single mask spacing extraction 

TWDC2 

Double mask spacing extraction 

SPIN 

z-axis rotation 

FLIP 

x-axis and/or y-axis mirroring 

PUSH 

Offset 

SCAL 

Scaling 

WNDW 

Window extraction 

PLAC 

Cell placement 


Table 6-1 
{ Continued) 


6-3 

















NAME 


OPl 


OP2 


OP3 


OP4 


SMASH 


101, loiA, loiB, roic, lOlD, 


102 


103 


104 


105 


I06A, I06B, I06C, I06D 


107 


108 


ORDER! 


ORDER2 


ORDERS 


ORDER4 


ORDER5 




















SUBPROGRAM DESCRIPTIONS 
(ontinued) 


NAME 

DESCRIPTION 

BOOKl 

Mask directory entry location 

BOOK2 

Mask directory entry deletion 

GEOM 

Minununa and maximutn dimension testing 

DEPEND 

Isolation of machine dependent code 

LOCATN 

Mask file record address calculator 
(function) 


Table 6-2 
(Gontinued) 




















7 


PROGRAM VARIABLES 


At the outset of MAP development a great deal of consideration was 
given to the program variables. An attempt was made to choose meaningful 
scalar and array names. Appendix E presents a brief description of all 
of the program variables. 

Most of the program variables are in blank common. The arrange- 
ment of common and the structure of the arrays was carefully designed to 
allow the program size to be modified by redimeneionlag the arrays. 

The following discussion describes the arrangement of variables 
in common and methods of adjusting array dimensions. In addition, there 
is a brief description of the few variables whose values are set according 
to the characteristics of the computer. 

7* 1 Arrangement of Variables in Common 

Table 7-1 illustrates the arrangement of variables in blank common. 
The variables have been positioned in categories. 

The first category contains a group of scalar variables whose values 
are determined by program array sizes and machine characteristics, and 
must be Initialized individually. These variables are all set to constant 
values in the subroutine DEPEND, They were placed in a group at the 
beginning so that the remainder of common could be initialized efficiently. 

The intermediate portion of common contains general processing 
variables. The arrays in this portion will always remain of fixed length. 

The last two categories of common variables contain all of the 
arrays which may be redimensloned to change the program size, 

7,2 Adjustment of Ayga-V Dimensions 

As previously mentioned, the arrays at the end of the common block 
may be redimens ioned. The group of arrays shown as file directory arrays 
In Table 7-1 store vital information about program I/O. A portion of the 
arrays is devoted to a directory of the stored masks. Table 7-2 details 
the Information stored in these arrays. All of the arrays have the same 
dimension, and the scalar DIREND is set (In subroutine DEPEND) to 
that dimension. This dimension limits the number of masks which can be 
stored at any time during a MAP run. It should be set at tbe maximum 
number of masks to be stored, plus three or four for intermediate scratch 
mask recordings, plus nine for the non-mask entries. In adjusting the 
size of the directory arrays, the programmer should keep In mind that 
available master mask file space must also be considered when determining 
; 7-1 


BLANK COMMON STRUCTURE 


CATEGORY 

VARIABLES 

Version. Variables 

MACHIN, CHARAC, LARGE, WORDS, 
ITEMS, LEND, DIREND, SET END, MU, 
FACTl, FACT2, FACTS, FACT4 

List Pointers 

BEG(8), END(8), LOC(9) 

Ordered List Pointers 

BEGO(3), ENDO(3), LOCO(3), ENTRY(6), 
START 

Flags 

OPTN1-OPTN6, MODEl -MODES, MODE, 
PAT1--^AT5, SEQL-SEOIO 

Values 

VAL1-VAL6, MAX1-MAX6, MIN1-MIN6, 
SPECl -SPECS 

File Position Pointers 

INPl, INP2, OUT1-OUT5, UNIT 

List Segment Flags 

FILE{8), STATUS(8), SEGl-SEGS, SEG 

Alphanumeric and Command 
Image 

Bl, B4, DELIM(36), CARD(76), FIELD{34) 

File Directory 

NAME{DIR.END), NUMl(DIREND), 
NUM2(]3IREND), COUNT(DIREND), 
RECORD(DIREND) 

Lists 

SETUP(SETEND), LIST(I) 


Table 7-1 


1-Z 



DIRECTORY ARRAY'S USAGE 


ARRAY 

RANGE 

USAGE DESCRIPTION 

4 

NAME{J.) 

1=1-4 

Equivalent to scalars DESTIN, LAST, 
MASK, and TYPE. 

1=5-9 

Name of last mask output to each logical 
unit I. 

1=10- 

DIREND 

Name of mask stored in each file posi- 
tion I. 

NUMl (I) 

1=1-4 

Equivalent to scalars CR, IN, LP, and 
AL, 

1=5-9 

Running count of the number of masks 
output to each logical unit I, 

1=10- 

DIREND 

Highest primary identifier on the' mask 
stored in each file position I. 

NUM2(I) 

1=1-4 

Equivalent to scalars LENGTH, PASS, 
SKIP, and STAT, 

1=5-9 

Data type code of last mask output to each 
logical unit I. 

1=10- 

PIREND 

Highest secondary identifier on the mask 
stored in each file position I. 

COUNT(I) 

1=1-4 

Equivalent to scalars NEXT. TEST, ORD, 
and OR. 

1=5-9 

Running count on number of records out- 
put to each logical unit I. 

1=10- 

DIREND 

Starting record address of the mask stored 
in each file position I. 

RECORD (I) 

1=1-4 

Used to store timer data. 

1=5-9 

Number records written for the last mask 
output to each logical unit I. 

1=10- 

DIREND 

Number of records for the mask stored in 
each file position 1, 


Table 7-2 




' i i-5 ■<■** VH 






7-3 













the maximum number of masks to be stored during a run. 

The arrays shown as lists in Table 7-1 are SETUP(I) and LI§T(I). The 
SETUP array is used to stack processing codes for procedures requiring 
many steps. Ic is used to set up the course of action for the TRAC, BOOE, 
and LIST processes, SETUP(I) must be dimensioned to accommodate one 
entry for every mask name contained on any TRAC, BOOL, or LIST command 
record plus ten. The array is also used for other processes and must 
have a minimum dimension of 20 plus the maximum number of MIN and MAX 
specifiers used in any SPEC string. The scalar SETEND is set (in sub- 
routine DEPEND) equal to the dimension of SETUP(I). 

The array LIST(I) is the core area used to store mask data records 
during processing. The array may be divided up into "segments" as illus- 
trated in Figure 7-^ . The whole segments, first eight divisions, each 
contain exactly the number of words In a single mask record from the 
master file. These segments are used as input or output bxiffsrs as required 
by any particular process. They are also used to create ordered lists. 

The ordering process requires one third more space (L, e. , eight words 
per rectangle instead of six words) during the creation of a list. When 
the list is sequenced it may then be outpi t through a normal segment. 

Figure 7-1 illustrates the ordering configurations which may be used, 
each depending upon, the number of segments required for input records. 

As shown, the LIST array is divided into £ 2/3 segments plus 12 
words for the small buffer at the end. To change the size of LIST(I), the 
number of rectangles per segment must be determined, multiplied by 6 
(words per rectangle) and multiplied by 8 2/3, Twelve plus this value 
yields the dimension of LIST. There are several scalar values (set in 
subroutine DEPEND) which are associated with the dimension of LIST, 

ITEMS is set equal to the number of rectangles per segment (or record). 
WORDS is set to the number of words per segment (or record) and is 
simply 6 times ITEMS, Since the segment size must be equal to the size 
of a file record, the file must be accessed properly. The scalars FACTl- 
FACT4 are values used in a formula in the function LOCATN to compute 
a file address for any record. 

A general rule for the most efficient dimensioning of these arrays 
is to first set the directo'ry arrays and the SETUP array sizes as necessary. 
Then the LIST array should be dimensioned as high as core resources will 
allow. In general, doubling the size of the LIST array will reduce processing 
time by one fourth. 

When any of these array dimensions are changed, the variable 
LEND must be reset (in subroutine DEPEND). LEND is a value used to 
zero part of blank common and is the number of words from EEG(l) through 


7-4 


LIST ARRAY USAGE 


Sesments 


Single 

Record 

Ordoriiiiz 


Double 

Record 

Ordering 


Triple 

Record 

Ordering 


Sequenced 
— Output 
Buffers 




Sequenced 

Output 

Buffer 

Ordering 
Area 11/3 
Segment 


Sequenced 

Output 

Buffers 


Ordering 
Area 4 
Segme nts 


Ordering 
_Area 2 2/3 
Segmaats 


I Last 12 words of 
j LIST array- ai'c 
I equivalent to the 
f DATA array 






the last word In LIST. The following formula maybe used to calculate the 
new value; 

LEND = 272 + 5 X DIREND + SETEND + LIST array dimension, 
for machines with single word REAL variables, or 

LEND = 307 + 6 X DIREND + SETEND + LIST array dimension, 
for machines with double word real variables. 

7.3 Machine Dependent Variables 

As previously mentioned, the first group of scalars In common have 
values that are determined by program array sizes and machine character- 
istics. The array size dependent values were discussed In the previous pages. 

The machine dependent scalars are MACHIN, ‘CHARAC, LARGE, 
and are set in subroutine DEPEND. MACHIN Is set to the number of bits 
per word. CHARAC Is set to the number of characters contained In a real 
variable. LARGE Is set to the largest possible integer value. 

The variables FACT1-FACT4, discussed In regard to the size of 
the LIST array, are also dependent upon the file addressing scheme of the 
computer. The variable LEND which Is array size dependent also depends 
upon the word length of real variables as discussed lathe previous sections. 


7-6 


APPENDIX A 


JOB SETUP EXAMPLES 

Table A-1 lists the logical unit cisslgnments for executing MAP. 
Figures A-1, A-2, andA-3 illustrate the control commands for three typical 
MAP job setups. 


A-1 


LOGICAL UNIT ASSIGNMENTS 


UNIT 

DESCRIPTION 

^ 1 

Command Input Unit (required). OPTN 
and MASK commands are always read 
from this unit. 

2 

Alternate Command Input Unit (optional)’. 
See alternate input command option, 
OPTN command. 

3 

Command Buffer Unit (required). This 
must be a sequential disU file. 

4 

Printed Outpv Unit (optional). See print 
option, OPTN command. 

5-9 

Mask Data Output (optional). See descrip- 
tions of FILE, TEXT, BOOL, LIST, 

AREA, PERI, PARE, and RANG commands. 

1 10 

Master Mask Unit (required). This must be 

a keyed or random access disk file depending 
on tne computer, ^ ^ 

11 -n. 

Mask Data Input Units (at least one required). 
See MASK command description. 























A -4 reproducibility OF THE 

ORIGINAL PAGE IS POOR 


JOB SETUP EXAMPLE 2 




nmuSSmSm 


! A S S I 


! IA S S I 


V'l CEI . CR 


N F :\ z ,;( F 1 l'e^ .CO MM ) - . 
N F : |3^ , ( ET LE JtEm'p ) . 




. A_S S.I b|N F ;|6 , ( F I LE . RES^UL T ) . ( OUTH 


L A_S AJ_G 1Q> ( F I L'E .MAS KS;) 
1 A SS I 3|N F ; 1 2 ..’f E 1 LeL b Ai f A2 ) 

L^U.N ,V A P ) L_ ^ ^ 



UTlI'N 


^ 1'^'^ 


O'UiT.I 


iMiJl 

■) 

1 ! 


i-X 


DATA 


B— 

HiiilllMi 


0|P T N (|.l.terna;te cominai id i n put option on ) 
L^AS K (tmit 12 specified) ; - ' : ; j 


E_O.D_ 
! F 1 N 



This setop includes: OPTN and MASK command input from the card reader (F:l), remainder of 
commands input froiii a file (F;2), printer output stored on a file (F:4), special output stored 
on a file (F:6), and data input from a single file (F;12), 


Figure A -2 







































APPENDIX B 


USER FORMAT DESCRIPTIONS 


The following discussion presents 'the specific details of the I/O formats 
for this particular version of MAP. 

Data format types may be added or replaced in MAP as needed. All 
versions of MAP, however, must maintain the unique MAP format types -1 and 0, 

Table B-1 lists the input and output MAP capabilities which apply to each 
format type. 

Type -1 - MAP Mask File Format 

Type -1 format is the format of the master mask file which is created 
during MAP executions. This is a random access binary file. The record length, 
the number of records allocated per mask, and the total length of the file are 
constants defined in the program. MAP will accept this format for input mask data, 
A file of this format may be externally constructed or saved from some previous 
MAP run. 

Type Q - MAP List Format 

Type 0 format is the other unique MAP format. This format may be 
elected for FILE or TEXT output and is the standard non-printed output for BOOL, 
LIST, AREA, PERI, PARE, and RANG. Data is output as sets of records, one 
set per command, A set consists of: 

o A starting record containing a single value written in 110 

format. This value indicates the number of words per 
record for the remainder of the records in the set, 

o Data records each containing the specified number of 

words (up to six) of data written in nllO format, 

o An end record of the same form as a data record except 

containing all -1 values. This serves as an end of set 
indicator. 

MAP will accept type 0 format for input mask data. 


B-1 


MAP I/O FORMAT SUMMARY 



INPUT CAPABILITIES 

OUTPUT CAPABILITIES 

Type -1; 
Mask File 
Format 

Compatible 

Automatically stored 
during execution* 

Type 0: 

List 

Format 

Compatible 

Output via FILE, TEXT, 
BOOL, LIST, AREA, PERI, 
PARE, and RANG commands* 

Type 1: 

PRF Format 

All elements compatible 
except text 

Output of blocks and text 
elements via FILE and TEXT 
commands* 

Type 2; 

MANN 

Format 

Compatible 

Output via FILE command* 

Type 3; 

AIDS 

Format 

All elements compatible 
except text 

Output of blocks and text 
elements via FILE and TEXT 
commands* 

Type 4: 
Banning 
Cell Library 
Sour ce 
Format 

Compatible 

Not applicable* 


TabJe B-1 


B-Z 











Type 1 - PRF Format 


Type 1 format is the standard PRF format. It is accepted as a mask 
data input format and it may be used to output data via the FILE or TEXT 
command, 

I 

On input MAP will accept BLOCK, LINE, SHAPE, and COMPONENT 
data, TEXT data is ignored by MAP, and END COMPONENTS or END LEVEL 
is interpreted as the end of a mask. 

On output, an END COMPONENTS record is written at the beginning 
of the file. The output for a FILE command is BLOCK data followed by an 
END LEVEL record. The TEXT command output is TEXT data where the 
rectangle identifiers are placed in the text string separated by a comma and 
given the lower left rectangle's coordinate as position points, all followed by 
an END LEVEL command. 

Type 2 - MANN Format 

Type 2 format is the standard MANN format. This format is accept- 
able for mask data input, MAP will accept rotated rectangle definitions and 
smash them into sets of orthogonal rectangles. 

Type 2 format data can be output via the FILE command. The data out- 
put is strictly orthogonal rectangles. 

Type 3 - AIDS Design File Format 

Type 3 format is the standard Sigma 2 AIDS design file format, MAP 
will accept cell placement, shape, line, and block components as mask input 
data. 


Output via the FILE command causes block elements to be written to 
a design file. Output via the TEXT command causes individual identifier digits to 
be stored in the design file as character elements. Type 3 format may be out- 
put to any design file for which the display parameter sector has been previously 
established. If a new file is to be started, the user must select the special new 
file option on the first FILE or TEXT command in the command set which is 
associated with the file. This causes a default display parameter sector to be 
written as the first record of the file. 

Type 4 - Banning Cell Library Format 

MAP will accept the Banning cell library source format as input. All 
cell shapes from a single level will bo considered a single mask. 

There is no provision in MAP for output in type 4 format. 


APPENDIX C 


MAP EXECUTION EXAMPLE 

This appendix presents an example' of a complete CMOS analysis execu- 
tion. The command set used was specially developed for thorough analysis of 
CMOS masks. Among 'the functions performed are; nodal analysis, artwork 
verification, device identification, capacitance calculation, and equation 
generation. 

The CMOS masks analyzed are very simple and should not be considered 
to be typical masks. Errors were designed into these masks to illustrate 
artwork verification capabilities of MAP. Figure C-1 illustrates the form of 
the original masks as displayed on a CRT. Figure C-2 illustrates the masks 
after the smashing operation performed by MAP following input of the original 
masks. Figure C-3 illustrates the N diffusion mask after the negation opera- 
tion performed early in the run. 

The remainder of this appendix contains a portion of the listing pro- 
duced by the sample execution. The complete command set is presented in 
the first several pages. Due to the length of the remainder of the complete 
original listing, only representative portions of the command processing 
printout were selected for inclusion. The portions contained illustrate each 
of the analysis functions mentioned above. 














































.9PTN 3»l*0#10*l#100 _ 

MASK 111 J#Q>W«P/NjT«C#M 

• DIRSCTeRY ♦ . 

FILES 

UNIT SET PECeRDS 


T6TAL 


MASKS 

name 


DIRECTaRY 

10 

11 

12 

13 

^14 

15 


ADDRESy 



300t) 
60C0 

goct) 

l?OCU_ 

15G0U 


R'ECewos 

0 


IDENT 


IDENT 


• CSMMANOS * 


universal CNBS' MASK~ANALys1s'pR9CEDUR 
W*600 

5iliW 

6G0 
b*l*P 
' S*l,3*P 

N^6no 

5>1jN 
5/ 1 j 3 j N 
' T/feod 

5#1^T 

5il j3^T 

C^600 _ 

5iliC 

_ U3jC 

‘h# 6nd 

5jUM 



liEGATISN eF THE N maSK _ 

RlffOiSiei MiR250iS?ii»II 3 iTp 2# o' 

\ - NGTV N 

'SiliN ~ 

5*li3iN 

NODaL trace / RFCtaNGLE I- .NKA SE 


. scale • 0.001 MIL 


a a . 
55? 


\8DAL TRACE 

/M ; c/c J Ml p 1 N/P : C/n ; c/ 




< 












FILE 

TFXT 

FILE 

TEXT 

FILE 

tfht~ 

FILE 

TFXT ■ 

Cef'M 

SPEC 

flPES 

■pILt 

TFXT 

C9MM 

SPEC 

ePER 

FILE 

tFXT“ 

COf'M 

Cbr.'i 

cst^m 

CSr<M 

SPEC 
r<PER 
•FILE 
TFXT 
CnEE 
■C5i*>r- 
SPEC 
SPF.R 
SPEC 
IPE^ ■ 
SPEC 
'9r ER" 
FREE 

file 

TFxr 

FSEE 

CSKM 

C3HM“ 

SPEC 

9PER 

FILE 

TFXT 

carM_ 

Cftl'M 

SPEC 

ePER 

FILE 

TFXT" 

FREE_ 

C9^!M 

SPEC 


5 #liP ^ _ 

5 il# 3 ^P 

5 * 1 «N 

5 <l* 3 iN- 

5 _j I . C 

3 » i V sTZ. 

E«liM 

5 / i* 

LINXASE OF CONNECtEO WELL REC^T^NGLES ^ND RENUMBERING 
R'.StiSiai N"' 

W « LINKW LINE 

"Si i # h 
5 # 1 * 3 *W 

linkage of CONNECTER" THT?!rextDE~RECTffN 5 i:ES^'WDrRENljHBER IMG' 
RlSl < Sl 3 l W 

T • link T • LINE" 

5 « 1 «T 

5 > t # 3 ^ 

general artwork checking ■-’ PHASE"'! 


error; minimum n-p spacing between different nodes • 0 « 

MIL 

PRNT«MAXrt»399 

NP3F » TwjX N#F" ■ • OiFF 

5*1* NPSE 

5*l*3*NP5E 

\P3F 

■ ERKOR : —H-IKTKUM "MITaT H W W I DTH -'0.4 MIL 

HAXX099 
nLwx « Same H " 

MAXY»399 

kl«y ■ Same m : 

PRNT 

"KLvsF" T-pcur'HLl.XiHLWy 

ML».X*MLWY 

5*1* HL»E 

S*1*3*MLWE 

Ml-F 

error: minimum metal-metal spacing . 0.3 Mil for lines 

< "I O-MTCSnLO'RG 

PRNT*«AXW»299 

MMSE • T«1X M D|EF 

5*1*HHSE _ _ 

5*l*3*HMSE 

FRRQR; minimum MetjL-METAL spacing • 0,4 mil for lines 
■ >"16 MILS long 
PRNT* MINL« 10001* MaXW» 399 
MMSE • TWIX M OlF'' 

5*1* MMSE 

■ 5 * I *3* MMSE 
MMSE 

ERR'OR: minimum mEtAL/THIN 'OxIdE Sf'ACiNG ■ 0..2 MIL 
PRNT *MAXW Biss ■ 


CC000031 31 

CC000032 32 

CC000033 33 

CC000034 " 34 

CC000035 3S 

CC000036 3^- 

_ CC000037 37 

CC000038 3g 

CC00OO39 - 39 

" CC000040 ■ • • 40 

CC000041 41 

CC000042 4g- 

CC000043 43 

" CCOOOO44" 44 

_CCoqo045 — ^5 

CC000046 .... • 

CC0Q0047 4T_ 

CC00C048 ^ '48 

CCOQ0049 49 

CCooOOSO ' 50 

CC000051 51 

CC000052 ' 52 

CC000G53 ^ ^5 3_ 

CC060654 <.--- — 54 

CC000055 55 

■CCOG0056‘ — ■ 56 

crCoooos? 57 

CCOOOOS8 ' gg- 

CC000059 59 

CCOOOOSO go 

CC000061 . gj 

CCOC0062' ■ ■ 62' 

CC000063 63 

CC000064 ■■ ■ 64 

CC000065 < 65 

CC000066 66“ 

CC000067 - 67 

CC000068 - 68 

_ CC000069 69 

CC000070 70 

CC000071 71 

CC00a072 L-.C-..'- 72 

_ CC000073 <...- 73 

CC000074 - 74 

CC000075 75 

CCOG0076 76 

CC000077 _ ... 77 

CCO0'b078 7g- 

CC000079 < 79 

ccooooao < — . — ■ go 

CC000081 gx 

CC000032 -gg- 

CC000 083 ------- 8 3 

CCOo6'084 84 

_CW0P085 ......... g5_ 








riLE 

TrxT 

TREE 

cem 

ceHrt 
_ : ePER 
FILE 
TEXT 
RPER 

FIL£_ 

TEXT 

BFER 

FILE 

TEXT 



T FNU 
FILE 

text 

ceHM 

cPcC 

f:PER' 
^ I LE 

• FREE 
TFf%L 

__ 

‘qPEC“ 

RPER 

file 

TEXT 

r 

ce;^ri_ 

I ePER 

I ^PFR 

! 

i “PER 
i file 
i_TFXT 

I free' 

IFNL 

CeMM 

cn«M 

CSf'M 

csf^«_ 

SPEC 

spea 

“ FJLE 
tEXT 
~'fref ■ 

; TFNU_ 

ce'MM 

ceuM 


MTSE • TWIX HjT_ 
5<1 jHTSE 
5j wa^MTSE 
MTSE 


SFPARATIfiN 8F F DIFFUSI8N INT'j ACTIVE OR GUARD BAND AREAS 

PA - NLNK P^W ^LLNE LINE 

5*1# PA 

5#1.3#PA 

PG - MINT P#PA 

_5 # I i PG 

5#1#3#PG 

SEPAfiATiaN GF N OlFFUSt aN IN TO ACTIV E OR GUaRD BAND A REAS 

NA ■ INTR N#W 

5> t jNA 

5/1^3/.NA 

^G * NINT NjNA 

^5i To ^ 

S^ithG 
5# 1 « 3/ NG 


ERRfl’R: MlNlMUHn;j GUARD BAND WIDTH » Qt4 MIX 

. _P R N T j M A X A p 3_9 9 . 

\G>*E ■ Same \g 

5>l#NG^.E 

5^t#3#NGWE 
f*iG i^E 

error: minimum p guard Band width outside of well 

PRNT#MAXA»599 
PGaE ■ MNT PG#W 
5#1#PG*>E 
5#l#3#P5wE 


_ERK3 S J well perimeter MUST HeeT OR OVERLAP P GUARD BAND 


wPER ■ EDGE W 
wPFR - EXPN WPER 
PRM#MINA«1G 
wOER « NINT kPEH/PG 
F.IjwPER 
S# 1#3# WPER 
■yiPER ■ 


NG# 1 0 
ERROR; 


ERROR; N GUaRD BaND May ,\'3T INTERSECT P GUARD BAND# MAY" 
indicate an error )N the separation of n active 
and k Guard band area's due to improper embfdoin’g ” 

OF N ACTIVE WITHIN THE WELL 
^RNT ^ 

NWEE ■ iNTR NG/PQ 
5# 1 # NWEE 
5#1*3/NKEE 

NWEE • ■ • " - ■ ' 

PA#1X8 

ERR'ORl N GUARD BAND MUST TOTALLY SURROUND ALL P ACTIVE 
AREAS 







VNQ » VTrtX NG _ SA>*.E 

VNQ » link VNGiPA L1NE*LINE' 

HNG • HT^^X NG SAME 

hng » Link Hn6»p5s; LTNE^riSE 

PSNT 

-S'LiSE~T"fcireR ‘hRGrVWd ^ 

SjIiSURE 

5jli3<SURE " 

VKGj HNG/ SURE 

P TRANSIST5R IDENTlr IC aTION / CHECKING 


LBCaTISN 9F prospective F channels; AkBitRARILV ASsUMIN 
that any channel up re i mil long vjiTH .\r Least o.i mil 
metal and thin extoF hill pehfbrm sbmewhat i.:ke' a' trans 

MAXWalOOO. HliO/SljiS l/R230*Si!EA i 

“PPC"« 'Trtl jTP'r’ BTfT 

PPC.97 

MINA *100 ~ " 

PC * I MR PPE./ r 

MINA . 100 

PC ■ INTR PC/M 

'■fiPIT'i ■ Ci-nRTPPCTFC NBN'E^ARtA 

Risi/Siam 1 

3PC • LINK QPc‘ LTKE 

5/ 1/2PC 
R/1/3/3PC 
PPC /PC 


ISTOR' 


error: minimum ? channel length « 0» 3 MiL ^ width . 0.7 

MAXW. 299 /MAXL .639 “ 

PCE • TWIX PA OIFF 

PCE/5 

PR NT 

"PCE • UiNK PCE/CFC N9'.E<AI<£A 

5/1 /PCE 

5j1/3'/PCE 

ERR9R; MINIMUM THIN 8XIDE WIDTH 6UTS1CE E^GES 9F p 
CHANNELS ■ 0*2 MIL' 

PCE . EXPN CPC gPO/gpO 

"PCE 75 
PRNT 

PCE . mint PCE/T 

S» l/PCE 

5/ I / 3/ PCE 

error: minimum HetaL mpth »utside edges pf p channels 


APER PCE . EXPN OPC 
TFNL PCE/ 5 
SPEC PRNT 

OPER "PCE . NINT PC£/M~ 
FILE 5/ l/PCE 
“T E'X T 5/1737 p’CE 
FREE PCE 


100/ loo 


CCOOOIAI 
CC000142 
CC0001A3 
CCooOlAJf 
_CC00014^ 
CCoo01’a'6 
CC00C147 
CC000148 
CC000149 
CCOOOISO’ 
_CC000151 
CC00C152" 
CCC00153 
CC000154 
CCC00155 
CCOOC156 
_CC0DO157 
CC000158 
CC000159 
CCOOC16D ■ 
CC000151 
CC003162' 
_CC000163__ 
CC00C164 
CC000165 
CCC00166 
CCcC/jl o7 
CC0DC16S 
_CC000169_ 
CC000170 
CC000171 
CCQ00172 
CC000173 
CGOOOUA 
_CC000175 
CC00017r 
CC000177 
CCC00178 
CC000179 
CCOOOIBO 
CC00C151 
“CC00Q152~ 
CC0001S3 
'CC00C184' 
CC0D0155 
CCC00186 
CCo00l87_ 
■"CC000188 
CC0001S9 
'CC000190 ' 
CC30C191 
■CC00C192" 
CC0_^019^ 
1:^006194 
CC000195 



T 


Jit f]v 




L3CATI0N er P SaURCpS ASiD drains 

RISOjSIS# 1 

PSD ■ SAME PA 

P 5 D 3 L J N K PsQjQPC LlKE^LI NE 

PSD • INTR PSDvPA 

5j1»PSD 

Sj1» 3jPSD 

ERR9R: P SeuRCt ANiT'DRAII^iNfM!J«”wiDfHr«" OtThlL*'' 

_PRNTi2‘‘AXA«S9 

PSCE •' same" PSC 

5*l/PSDE 

5j1j3jPS0E 

ERR9R! MINIMUM SEPApATieN Si- THiN OXID E TO BU TstDF P 
SauRCE and drain EDGi^S • O.i MIL 

oSDE ^ E XPN PS D SiS 

pscr >5 

PR\TiMAXA»104 _ 

PSCE ■ MNT PSDE/T 

s^i/psoe ^ 

5 »l# 3 *‘PSDr 


SPEC 

iL. ‘rPSR 
w ?PER 
F I LE 

text 

C£MM 

ce''M 


LeCATiav; eF p channfl gate metal 

RIEOjSISb I . - 

PGM ■ SAME M 

PGM . LI\< PGM/OPC ' ‘LinE^REA 

PGM ■ INTR PGM/M 
si i; PGM” 

5«1j3>PGM 

ERR9R: minimum P channel gate metal WI0TH_* 0»R M'TLi A 

REOUNDANT tfst since 'channel "width and' metal 'width'' 
auTsroE channel have been checked 

■pGMF »“£XPN CPC SOOT^OO 

PG''F#5 

PfiNT/MAXA»A99 

PGMF O i.stR PQM/PGMF 

5»:/P3ME 

S,1»3/PGmE 

ERK3R: minimum P channel gate metal overlap on N guard 

band ■ 0*R MIL 


ExPN NG 


50/50 


PRNT/MAXA-2AS 

PoMf • INtR PGM / PGMF 

'S/l/PG^E 

5/1/3/P3ME 

ESsaR: p Channel gate metal must cross- the n guard band 

INSIDE edge 5EF0RF CRetSING THE TH ICK O XIDF STEP 
PGMF • LINK TaNG ■ “LlNEiLlNE 
PGME • Twix NG/PGke 


r.VTR PGHaPGMF 





FILE 

5<liPGME 

TEXT 

5* 1 # 3 J PCIME 

FREE 

PG^^F 

COiMM 


C9ivy 

N TRANSISTGR 

ceMH 

] r S L 

MAi 134 

C3MM 

Lee ATI BN er prcsp; 

ce.M.M 

THAT AMY Channel \ 

ce-^M 

"ETAL A‘0 thin 9x 


"HAX.sai JosJRlSoT^r 

-PER 

PNC = T^IX NA 

T F NtL 

»NC.47 


MINA* 100 

r-PER 

nC « inTR psc*t 

SPEC 

M'.N'AslCa 

""r^FET" 

"nC"* ts:r 

??ER 

CNC . link PNCjNC 

SPEC 

RUIjSISI CPC 


CNC * link CnC _ 

FILE 

5i l * CNC 


’ $PZC 

I 

:T\L 

? c 
tTXT 

r^'jy 

Cf^ 

TTNL 
SP£C 
ftPER 
FILE 
TFXT 
Ay M* 


CNC . ll\K P\C^NC NJ5\F^AREA 

RU1jS1S:1 uPC 

r.NC i LiNi< ::nC ui^ 

5jr 1 * CSC 

5i 1 i3j :;nc 

>.vCj nc ‘ 

?:rr^r! ^isiyuy^s cu~p,KK£\rLzmrK'^^'VT^Ki]::ri;iYOr^^ 

r-Ay^»239ir^AXt»699 . _ _ 

^CE 3Tr»IX?^A DIFr 

\ C E # 5 

■pR';r ^ ^ 

KCE p UWK NCE/ONC__ _N9NE^AREA 

5^1# \CE 

5il/3*SCE 

ERaSR: thin DxDE'"rt'lDT'n SUTSIDE EDutS'eF N 

CHA'vNELS » o«2 mil 

■ N'CE‘~rxP,\-^NC ?M72tn3 

SCE*5 

PRMT 

.SCE « NINT NCE*T 

5 /1 »mCE 

nil/3#NCE 

■ EF R3 F i~~ KnTTKU^E'TA£l"~n3'TH &uTSIue toGEs bf N CHANNELS 

e 0*1 mil _______ 

NCE » EXPN CnC" " ■ l6oriO(3 

NCE»5 

PPM 

_NCE_» M INT MCE/y< 

Stir NCE 

S«1#3/NCE 

Nce 


L&CATI6N ar N sauRCfS and orAins 

R 1 S£!J.1 J 

‘nSO • 5a HE NA 

I'SO « LINK NSD/CNC LINEAL INE 






CC000251 251 _.._ 

CC000252 252 

CC000253 253 

CC00025<^ 25<f 

_CC00C255 235 

CC000256 'asfe 

CC0Q0257 257 

■ CC00C258 ■ "■ — ■ 258 " 

CC000259 ... 253 _ 

■■ CC000260 260 

_CC000261 2&l 

CC000262 <---. 262 

CCC0C263 263 _ 

CC003264 2<,> 

CC000265 265 

'CC00C266' 266 

_CC0n0267 267 

CCC00268 — '263 

CC0OCc69 269 

CC003270“ ■"*< 270 

CC002271 271 

’ CC0CC272. ■"< - 272 

_CCQ00273 <” 273 

CCOO0574 - 27^* 

CC000275 275 

CC00C276 276 

CC003277 277 _ 

“CC00C278' H78 

__CC00G279 — - 279 

CCOOO280 ’280 

CC000281 2b1 

CC002282 ■■< 282 

CC0CC233 < 283 

CC000234 ■ - — - 2&A 

CCOOG255 2g5 

ccooc2a6 <vi. '2 b6 

CC00C287 2g7 

CC0002S3 2bS "■■ 

_ CC0002S9 239 

CCOOC290' ■ — — • 2g0 ■ 

_CC000291 291 

CC000292 292 

_ CC000293 < 293 _ 

CC000294 - 294 

CC000295 — - 295 

CC000296 — — 296 

_CC00G297 <*_*_ 397 

CC000298 ,...i 298 

CC0D0299 299 

CC000300 300 

CCG00301 - 301 

CC000302 -••• 3q2 

_CC0_00303 - 3 03 

CC000304 334 

_CCp0030_5 3o5 



NSO . tNTR NSO/NA 

5«1.NS0 

5#l,3/NS0 


.EfiRBRi N SOURCE AND ORAIN MlNIWUM WIDTH ■ 0.1 MIL 

PRNI jMAXA»99 

KSOF • SAME NSD 

Sj liKSDE 

B#1«3»NS0E _ _ 

error: min; mum separation om thin oxide to out's iof n 
s oy Rc e and drain fdgss » Oti mil 

NSOF » EXPN NSD 5(5 

NS0r(5 _ _ 4 __— _ 

PRNTiMAXA»104 

NSDE - MINT NSDE(J 

5(1* NSOE 
J5 * I » 3( NSDr 
NSCE 

LOCATION Or'N CHANKFL ’"GATr^^'ETAL 

Rl3o*Sl3>< 1 ^ 

nGM =■ SAME M “ 

NGH . LINK NGMjONC LTNE'LINE 

NGM ■ INIR NGMjM 

S(1*NGM _ _ 

5(1(3(NGM ■■■ * 

error: MIMMUM N ChANNEL“3ATe "M£Ta'L~WIDTH"%' 6'^S MfLi'”A 

REDUnOANT TEST SINCE CHANNEL vjIDTH AND METAL wIOTH 

outside channel have seen checked 

NGMF • EXPN CNC _ £o0(^00 

NGMFjS 

?R\T(MAXA»499 

NGMe ■ I',‘tR NGM(N'GMr' 

5* 1 * ng?:;e _ 

"'5(i(3(NGME‘ 

error: minimum N channel 3AT_E_METaL_0VERLAP_0N p guard 

band ■ 0.2 mil"' 

MGMF ■ EXpN PG 50(50 

NGME(5 

pRmt*MaXa»R49 _ 

"nG^F » INTR "'»G‘SNGrfF 
5*1 (SOME 
5* 1 * 3* NG'ME 

error; N channel gate metal must C«0SS_THE P guard 3AND 

INSIDE EOgE SEROHe CROSSING THE' THlCX'OXlDF STEp "' 

_KG)'-_II L INN T*PG LINE'LINE 

nGMF •' twiX kG*n6ME 

PRNT _ 

NOME ■ INTR NGM(NGMF 

5j1jN3^<E 

S * I j 3/ NGM^ ' 

NGMg 

GENERAL ARTA-aRx CHECKIN G « PHA SE 2 



CSV.M — 

, C3f^M 

ERR3S; spacing apTrttEN A NBiN SBURCE 6R DRAIN 

s ' ' Cal''*! DlFrOslBN AnO AnV 8TM£R P DiFFUsiBN rtITH A 

i COV.'l different N9Dt number » 0*A mil 

! ; WPER ~PNSO'"i~NTR rT’'7F3D 

t- IrNL PNSD^B 

1 ^! ■ ■ FILE 5 # 1 <PNSD " ■ ' 

I TFXT 5 jli 3 *PNf;D 

SPEC PRNT/MAXvs »399 " 

bfer ppsf • T«ix pnsd^p diff 
e' file 5#i';ppse 

U text 5j1*3jPPSE 

tj ■ FREE PPSE 





CaMM 

cflMM eRRbR! minimum Spacing bet^’^en a nsn'sso.’-sCe gr 'ORA iN 'N' 

CQMM DIFFUSISN anO ANY BTMER N DIFFUSIBN WITH A 

CEM1 ■ DIFFER' MI N9DE NUMBER = 0*4 MIL 

B?ER NNSD • NINT S^NSD ^ _____ 

tFNL S\S3,8 ■ 

file 5< VNSD 

TFxT 5<1/3 iNNSD 
SPEC PRNT» MAX,.*399 

’ 2 P eR“K NSE" ■ ■»~fWpr-K;R' 5 D 7 lNl ‘DiTT 

file 5i 1 * nnse 

TFxT 5» 3/NS'SE ’ ■ 

FREE NNSE 


L"' C3'^M 

I ^ ce-'M 

“C5MM' 
|! cnMM 

I '■ C2MM 

I SPEC 

I “PF.R 

C SPEC 

SPER' 

i file 

TFXT 
SPEC 
I ■■ BRER 


ERR9R: MINIMUM C3NTACT WIDTH . o»3 MR# LENGTH s o.^ MIL# 

Ti E ; •A-NY-TrETi~t^TVrA-TTTMESJ3TB7«“ 3“HTirflR”AN'Y — 

item with 53TH DIMEN'SiBNS in the range between 0.3 
and O.'s mil are IN'ERRBR ' ■■■ 

MINA.300 

CS • SA“E C ■ ■ ■■ 

pRnT 

CSE". Nl\irC»CS 

Bil.CSE _ _ 

5.1.3iCSE 

PhNT.HaXa.3S9 

CSE . SAME CS 


FILE 5.1. CSE 

TFxT 5.1.3.CSE 


FREE CS.CSE 

“ ■ ■ CBMM ERR3RJ minimum' SepaRATIBN er stepped BPENING" ANO aNY 
CSMM cbntact opening s O.I mil 

BPER EXC « EXPN C ICO.lOO 

SPEC PRnt 

“APER—CTeF '.'“^Ilsr-ExCTl 


file 5.1.CT9F 

text S.I.G.CTOE - — 

FREE EXC.CTOE 

CBM- ' ERRaR; minimum SEPARAT't9f^''BP“C0NTA'CT'0PENr\GnrF"PFRIPHERY' 
CBMM of source or drain OIFFUSIBNS o O.R mil 

B FtR''“SD"V PCU 3“PS DTN'SD 

SPEC PRNT.MAXA.19S 


CC000361 _ <-- 

CC000362 <-- 

CC000363 <-- 

CC000364 ■" 

CC000365 <-- 

CC000366 

_CC000367 <-- 

CC000358 <♦« 

CC0Q0369 <-- 

CC000370 ' ’ <— 

CC000371 <-- 

CC000372 

CC000373 <-- 

CC000374 ' 

CC000375 <-” 

■■■ CC000376 

__CCOOC377 <-- 

CC00Q375 

CC000379 <-- 

^ CCC00330 ■<— 

CC000331 <— 

CC000382' <— 

CC000333 < — 

CC000384 

CC0003S5 <-- 

■CC0003S6' <-- 

_CCD0C337 <-- 

CC0D0388 <-- 

CC0003S9 

"CC000390 <--* 

CCoa0391 

CC0D0392 ■ 

CC000393 

CC0DC394 ■■<--- 

CC0003S5 

CC000396 <--■ 

CC0DQ397 

■■ CC00039S 

__CC000399 <-•' 

CC000400 

__CCOOCA01 <--■ 

CC000402 <--■ 

CC0C0403 <-- 

CC000404 ■<-»• 

CC0D0A05 

CCQ0DA06 ’ <--• 

CC000407 <--• 

CC000408 <--- 

CC000409 <--■ 

"'CCOQ0410' ■■<-«< 

CC000411 < — ' 

CC000412 <»•>. 

CC000413 <--- 

C Coo 0 ‘tTA 

__CC000415_ <-- 


361 

362 

363 

364 

365 

'366~ 

367 

368 

369 

370 

371 
372' 

373 

374 

375 

376 

377 

378 

379 
3B0 
3B1 

382 

383 
384" 

385 

386 

387 

388 

389 
350' 

391 

392 

393 

394 

395 
396" 

397 

398 

399 

400 
AOl 
402' 

403 

404 

405 
4q6 
407 
408* 

409 

410 

411 
412' 

414 

415 


SDCC * NINT 50iC _ 

5M.S0CE ■ 

5jli3jS0CE 

oCC? 

gRR3=? I L must ceKPLETrL’l' C9VER Sa^jRCE AND PRATN 

C9^tACT O'PFNINQS 

see » LINK C*SD _LlNE/'.fEA __ 

prnt 

KCSr » NINt SOCiM 

Sil^MCSE 

1 j3iXCUE 

'e«R9p: n'NiKiji'! metal gverla*^ oveh edge bf bther C6NTact 

SPEN1NG5 . 0*2 

9C ■ NINT CiSDC 

0C»fi .... _ . . _ 

Exec * EXPN ec 200<2 qO 

_PRST 

f-CSF » Nl\7 EX6C/M 

IjMCSE ^ 

5/ 1 j 3^ '^CQE 

SDC.9CiEX9C*PNSD>NNsD^MC9f _____ _ 

EKRePf illNIMUr PEXfTRATIBn'OF thin exiOE within guard 

band fo r gate Petal CRassavER ■ 0.2 mil 

" GM '• 'plus P'gVi/ NGN 

58 = PLUS PG/N6 

TSxF » INTR GM/GB' “ 

rexF.s 

PRNtjHaXa»199 
TSXF » INTR T/TOXE. 


rite 

5.1.TBXE 

TFXT 

5.1.3.TSXE 

FkFE 

3M. G3 

cs-'fl 

ERROR} minimum 


OUTSIDE 

sph:c 

PRNTjMAXw»193 

. 5pa:R^ 

tsxf '*' tW Ix" T/gl 

^TLE 

Sil.TSXE 

TFxT 

5.1.3/T9XE 

FnZE 

SD 


EBReR} MINIMUM 


metal • 

SPEC" 

FRNt/MAXh»133 


TSXE » Trt’lX T. M 

■ rjLE 

5i 1 . TOXE 

TEXT 

g.l/3.TexE 

^ FREE 

“ TaXE 

ce^^N 



CAPACITANCE 


0.2 MIL 


expand OIFFUSrONS_r& CeMPENSA-^ep undercut ■ Q.Q5 mils 
‘exp • EXPN P ' 50.50 

ExN » EX?N N 50.. 50 ' 

C'a'T'e GBIT fZE THE metal Atcep ni'^G f&' TMICKNESG 8F bxide 

BENEATH IT 





CCOOD416 ------ .,4l6 

CCOQO'tl? 4l7 

CCOOO'tlS , 418 

CC000419 419 

CC000420 <-rrr-.--"ir”r‘'-Tr“"-" '♦ao 

CC000421 421 

CCOOO^SS 422 

CC000423 4p3 

.. CC000424 .... 424 

CC000A25 425 

CGC00426 426 

CC0Q0427 427 

CC0C042S 428 

CC00C429 — 429 

CC000430 430 

CC000431 431 

^CCoOOA32 432 

CC0Q0433 433 

CC000434 - 434 : 

CC000435 435 

CC000436 438 

CC000437 * 437 

C C 0 0 C 4 3 S < - T.T^z--..r r r T - r - “ — - - 43 8 

CC0D0439 <- — 439 

CCC00440 4^0 

CCQC0441 44 I 

CCooO*t42 < 442 

CC00C443 < 443 

CG0004 44___ _ 4 44 

CC000445 44 S 

. CC000446 <---- 446 _ 

CC000447 ' 447 

ccot:o44S — ... — 448 

CC000449 449 

^ccor:o4 50__ 450 

CC0GD4S1 ------ 43,1 

CC000452 452 

CC00C453 453 

CC000454 434 . 

CC000455 455 

CCC00456 .<•■"’“"-. 777 * 456 

CCOOC'437 -L- — ---------- '457 

CC000453 „ 438 

CC000‘«59 439 

CC000460 450 

CC000461 461 

CCQ00462 <7 ".“ 7 . 7.7 7 ■- 777 . --•“■*•* ______ 

CC000463 463 

CC000464 4^.4 

CCQ00465' <-- 435 

_CC00C466 <-- — 466 

CC000467 ' ■■ 467 " 

CC0DO46,3 468 

CC000469 469 

CCQ0O4.70 < 7 --. 470 




SPER «TH.M » INTR f^jiT _ 

OP£R «THJ< • NlNT 

Ce.rM subtract contact window areas from the THJ'N bxioe ketal 

OPER HTHN ■ NINT MTKN/C ' “ ' " 

COHM 

CSH.’I GAlIfuLATf , junction CAPAClTAN'.'.5TU!.'5sUMiNG kA « 0.07Q PF/§3> 
COH.S MIL and <P h 0«230 PF/t-VIL_r_;_ UNITS 3F_.301_PF 

PARE ■ 6<Ej<P/-14£S6j-500 '' ' '' 

COf'M _ 

COMM calculate CROSSOVER CAPACrTANG£S ASSUMING K&"» 0* OPO’ PF/Sa'*' 
COMM MIL through thick CxIOE ANG K3 « 0,200 PF/SO. MIL THROUGH 
IceHM — TnT T'OK I DE ' TN“T0CT1>T ' ' 

;flPER PTH< 3 IntR EXri.MTriK 

■AREA 6, PTHKj -50:000 
OPER PTHN B iNTR EXP^MTHN 

aREA 6, PTnN, -5000 

FREE pThk.PTHN 
"SPER NThK'* INT'R"TXU7MTh< 

AREA 6«NTHK,-500QO 

OPER ■ NTHN » INTR EXKiHThN ‘ “ 

AREA 6jNTMN/-5000 

FREE NTHk,NTH.N ’ 

C9MM 

comtC cAlc'CCaTe ‘SubSTR’Atf Ca?acttan£e with The same oxidf 

COMM COEFFICIENTS 
5PES all s PLUS ExPiEXN' 

“PER STh< s NI:NT MTHK/ALL 

AREA STHKj -50000 

•'PER SJHN - MINT MTHN; all 

AREA’ STW'N/-5o60 

FREE STH</STHN 

CO'^M 

C5HM EQUATION GENERATION 

CP“M ■ 

" 1 0 H I- 'G'P N E R A T " S’Jl ^ An TRaNs iSTOR'^LauATiSNS ^ 


J ■ SAME PG 

rssi 


S3 . SAME N3 

/6 /PC; q/ NG! l/PoOiPSQi ’PGH/.n5U;NSDjNQM/ 
miscellaneous list PR0CESSING 


STORE OEVICE/NODE list' 

Xfi/PC-M ! PSOj PSO/NGM ; nSG< NSD/ 

I’R INT~n'S’f‘BF channel CIMENSiOh 

6iQPC 

6iCNC 


'sao' accepted" 


* OFFSET • 
X 


0 



CC0Q0471 A7l _ 

CC000472 < A?a 

CC00DA73 — - H73 

CC00047A 474 

__CC000475 E” ■. 

CC000476 476 

CCQ00477 477 

■‘CC000478' " '■ 478 ■ 

CCOOOA79 479 _ 

■''CCOOOASO' ■<- “480 

CC000431 4gj^ 

CC000432 4gg 

CC000433 433 

CC000434 ■■ < 484 

CC0004S5 4gg 

CC0Q0436 ” 433 

CC0004S7 4g7 

CC000488 4gg 

_ CC000485 < 439 . 

CC000490‘ “ ’c--------- ----- 490 "' 

_ CC000491 - 491 

CC0Q0492 492 

CC0DC4 93 ^493 

CC000494 494 

CCoo0495 49S 

CC000436' 496''” 

CC000497 - 497 

CC0DO498 493 

CC000499 <- 499_ 

CCOOOSQO <-.-V."--4C4,’-. 500’ 

CC000501 501 

CC000502 ■ 502 ” 

CC000503 < 503 

CC000504 ' 5 q 4 

G c 0 0 0 5 q 5 < • - » • E T 7 " ■ " :r - ,r * so 5 

CCOQOSdS 5Qg 

CC000507 507 

CC000508"" 508 

CC000509 509 

CC000310 < 510 

.CCcoOSll < — -- 5ii 

, CC000512 — 512 

CC000513 513 

CC000514' 5l4 

CC000515 515 _ 

CC000516 " 516 

CC000517. 517 

CCoob51S 5ig 

CCOO0519 - 519 

CC000520 52 o" 



MASKS 


DIRECTeRY 
_ 10 _ 
11 
12 
13 
1^ 

■ 15 


ADDRtol- RE( 

U 

”3000 

feOQO 

5Q0O 

^l?000 

15000 


RECORDS 

1 

2 

1 


IDEM # 1 

1 . 

1 



ruironjrorDrororofo rofo ronjjrororvjroryrvrvi 


1 




CLOCK » 60 

DELTA » A O 


LJi 

_50G 1800 6600 3300 

7300 6200 11700 7700 


.1_P 


100 

1?00 

_ 13100 

1400 

13175 • 

1^00 

13250 

1300 

13125 

1300 

13350 

1400 _ 

100 

1400 

13 450 

1500 

100 

1500 

1^550 

1600 

100 

1600 

l^l^O 

1800 

13150 

1600 

13#50 

1700 

13250 

17CO 

3 3750 

1800 

100 

IB?.0 

700 

3300 

900 

18 JO 

1500 

3300 

3900 

1800 

4600 

2200 

6500 

1800 

7100 

33G0 

13350 

1300 

13850 

1500 

'13450 

1500 

13950 

2000 

13550 

2000 

14050 

2100 _ 

13650 

2100 

14150 

2200 

13750,_ 

2200 

14250 

2300 

13850 

2300 

14350 

2400 

_ 13950 „ 

2400 

_ 14450 

2500 

14050 

2500 

14650 

3600 

^14150 

2600 

. 14650 

3700 

1425C 

2700 

14750 

2800 

14350 

___ 2800 

14850 

2900 

900 ^ 

2900 

1500 

3300 

3900 

^900_ 

4500 

3300 . . 






cxj (XI f\j oj fu ru (vj oj tfy cxi (XI cxi aj (x> cxi cu (Xi (vj oj 




I ^ ^ ^ ^ d' -i- 4- - 1 - ^ m to tn; in in IT) to in tn ID in 


3 3305 . . 2200 3600 2000 

3 ‘^SOO 2200 5100 2300 

3 .. .. 6100 2200 7200 2600 

3 12100 2300 17000 5200 

_3. Jy 1 .0 0 2 6 0 0. 7 600 2300 

2 SHOO 2600 11700 3300 

„3 0 2=00 7600 3300 

3 0 3300 11700 4300 

.3 .0 4300 100 7300 

3 6300 4300 11700 4400 

_3 690Q 4400 7600 4300 

3 3200 4400 11700 4300 

. 3 SOO 4700 900 5100 

3 1500 4700 6500 5100 

3 500 5100 6500 6300 

3 6900 5200 17000 ‘ 6600 

_3 &00. 6500 900____69Q0 

3 1500 6500 6500 6900 


3 6900 6600 7500 7300 


3 8500 6600 8800 7300 

3 ICOOO .6600 .10300 7300 

3 11200 6600 17000 7300 




1 T 


500 

1600 

3300 

2300 

900 

2300 

6000 

2R00 ■ 

7600' 

2400 

10500“ 

3100 

SOO 

2^300 

5300 

3500 

7600' 

3100 ^ 

11200 

4300 

7600 

4300 

_ 1050D 

5000 

900 

4500 

5300 

5200 

900 

5200 

6000 

6400 

S600 

6000 

10500 

6700 

SOO 

6400 

5300 

7100 

7600 

6700 

8600 

7200 

8300 

6700 

1 1200 

_ - 7200 

8800 

7200 

10500 

. 7900 


1 C 


. 1000 

170G . 

1400 

.. 3400 

4000 

1700 

4400 

3400 

2500 

P500 

2900 

2R00 

5500 

2500 

5900 

2800 

7700 

2500 

8100 

4900 

10700 

3200 

illOO 

4200 

icoo 

4600 

1400 

7000 

5500 

5300 

5900 

6300 

9200 

6100 

9600 

7500 

7700 

6800 

3100 

7100 

_ 1^700 

6S00 

MlOO 

. 7100 




♦_pinc:cT0;?Y • 

' ; fiLzs ’ 

UMT SET REC&ROS T9TAL NAHe TYp£ 

MASKS 


NAME 

0IRECT9RY 

TiLr 

A DOR £5^5 

"'BECOHOS 

IDEM ii T 

P 

10 

1 

0 

2 

71 

N ^ 

il 

p 

300tJ 

1 

97 

T 

12 

3 

AOOO 

1 

110 






_122, 

6 








1 M 

7265 

617 

7348 

700 

123 

I2if 

125 

126 
■ 127 

128 

6 

6 

6 

6 

6 

6 

2500 
7168 

700 

700 

7600 

7434 

1100 

800 

7066 

7021 

7072' 

7166 

800 

SSI 

900 

1000 

7523 

7570 

7621 

7715 

891 

900 

1000 

1100 

129 

130 

131 
135 
133 

135 

136 
“'137 

138 
” 139' 
140 

6 

6 

6 

6 

6 

6 

2500 
5500 
■ 7E60 ■ 
7334 
7448 ‘ 
7b '.'•2 

1100 

1100 

1100 

1200 

1300 

1400 

2900 
5900 
7309 
7903 
"7SS7 ' 
8091 

2300 

6400 

1200 " " ■ *' 
1300 

1400 

1500 

6 

6 

'6 

6 

7636 

9900 

1500 

1500 

8185 

10400 

1600 

7900 

1000 

1700 

1600 

1600 

14Q0 

2200 

3500 . 

7600 

6 

6 

3200 

4000 

1600 
1 600 ' 

3700 

4400 

7600 

3500 

I4l' 

6 

4700 

1600 

5200 

7600 


6. 

7730 

1600 

8279 

1700 

143 

6 

73H4‘ 

1700 

'8373 ■ 

1800 

144 

6 

7918 

1800 

8467 

1900 

' 145 

' 6‘ 

8012' 

1500 

8560 

2000 

146 

6 

8105 

2000 

3654 

2JOO 

l'47“ 

6 

3199 

2100 

8747 

2200 

.. 

6 

3292 

2200 

8841 

2300 

149 

6 

8336 

2300 

"8934 *■*.■ 

2400 

. 

6 ^ 

8400 

2300 

8900 

7900 

151 

6 

■■ 7700 

2400 

8100 ■■ 

5000 

155^ 

6 

3479 

2400 

9028 

2500 

.153“ 

6 

10706 

2400 

moo 

8400 

154 

6 

8530 

2500 

‘ 9079 

2509 

155 

‘ 6 

8576 

2509 

3035 

2600 

_156 ^ 

6 

3666 

2600 

8933 

2700 

157 

6 

8752 

2700* 

*^8835 

2783 

158 

6 

1000 

_ 4500 

. 1400 

7100 

159 

6 

9200 

6000 

9600 

7900 


6 

7700 

6700 

8100 

7500 

161 

6 

7500 

3400 

12800 

S800 


lOENT 2 
2 


■ 


3 





4 


i 

I 


5 

6 



DrLTA » 3 




AL TRaC ■ / R £CTa ,V 3 L E L I NK A Cr 


ccoooo 

CC0030 


in ya 

VLt c\i 


■ TRAC /M ; C/C: p# N/P : C/nYc 7" 

A warning *1 
c eTio" f f f 9N 

U WARNING # 

' c&nditign "a “ 

* null Mask • 

M 


NSOAL TRACE 


CC000030 


.CC000027 

CCOOOOSS 

.ccooooss 




« warning it 

ctjNOmoN a 

# WARNING # 
CSNSmeN 8 

• NULL MASK'*' 

C 



7 
' 7 

_7 , 

■ 7523 
_ 757 D 

762 r 

7715 
" 2900 
_5900 
7809 
7903 
~' 7997 ' 
8091 
"8185 
10400 
‘ 1400 
^2200 
3700“ 
4400 
"5200 ■ 
L. 82 T 9 , 
8373 
8467 
8560 
JB654 


891 
900 

Icoo 
1100 
2800 
_ 6400 
1200 

1300 

1400' 
_ 1500 
1600 
„ 7900 
3500 

7600. 

7600 
_3500 
7600 
.... 1700 . 

1300 
J 9 O 0 L 

sboo 

— 8100 .. 


u. 



147 8193 

14S 8292 


149 
1*50 
-1*5 1_ 
I'iS 
1'53 

154 

155 

156 
-152. 

158 

159 

160 

. 161 , 


8386 
8400 
J770O. 
8479 
.10700 
8530 
.. 8576 
8666 
.875^. 
1000 
9200 
7700 
..7500. 


2100 

2200 

2300. 

?300 

e.400_ 

2400 

2400 

2500 

2509. 

2600 

2700„ 

4500 

6000 

6700 

■84D0_ 


-8747 2200 

8841 2300 

_ 8934 2400 

8900 7900 

—8100 5000 - 

9028 2500 

.11100 ... _ 8400 

9079 2509 

-9035 2000 

8933 2700 

_ 8 S 3 5 278 3 „ 

1400 7100 

. 9600 7900 

8100 7500 

.12800 : 8800 


1 C 


111 

112 

1000 
4000 

1700 

1700 

1400 
4400 

3400 

3400 


113 

114 

2500 
.5500 

2500 
— _2500 

2900 
.5900 

2800 

2B00 


115 

7700 

2500 

8100 

4900 


116 

^10700 

™3200 

—11100 

^^-4500 


117^ 

1000 

4600 

1400 

7000 



I.IB 

5500 

5300 

—.5900 

6300 


119 

9200 

6100 

9600 

7800 


120 

7700 

^800 

—8100 

7100 


121 

10700 

6S00 

liloo 

7100 



4 

5 

6 

7 

8 

_9_ 

lb 

.11 

12 

13 

14 
.15. 

16 

17 

18 
.19. 
20 

-21 


^100 

13175 
13125 
100 
100 
100 
-1-31 50_ 
13250 
100 
900 
3900 
6500 
-1 33501 


13450 

.13550 

13650 

J3750 

13850 


1200 
. 1300 
1400 
-1500 _ 
1600 
_1600_ 
1700 
.1800 _ 
1800 
1800 _ 
1800 
_1«00!_ 
1900 
2000 .. 
2100 
2200 .. 
2300 
.240Q..1. 
2500 
..2600. . 


^13100. 

13250 

13350 

13450 

13550 

131 CO 

13650. 

13750 

700 

1500 

. .. 4500 

noo 

13850_ 

13950 
— 140SO 
14150 
14250 ■ 
143S0 
-16.450 


1 P- 

_1400 

1300 

1400 

1500 

1600 

1800 

.1700 
1800 
3300 
2200 
2200 _ 
3300 

. 1900. 

2000 
2100 . 
2200 
2300 . _ 
2400 


1 

..i 


22 

23 


14050 

..1.4150 



Ik - - 8800 

. 26 900 __2900 1500 _ Hog 

27 3900 2900 4500 ’ 3300 ’ “ 

-28 2900 14950 3000 

29 7500 3000 8500 4400' — 

...30 8800 3000 10000 4400 

31 10300 3000 11300 4400 ' 

- 32 14550 ^^3000 15o50 3100 

33 14650 3100 'l5l50 3200 ~ 

_34 14750 ^3200 jSgSO 3300 

35 100 3300 7100 3900 

36 14850 . 3300 15350 3400 

37 14950 3400 15450 *' 3500 

.. 38 15050 3500 15550 3600 

a3 IBloO 3600 15650 370O ' ‘ 

1525Q ^3700 15750 3800 

'^l 15350 3300 15850“ 3900 

->2 15450 3900 _ 15950 _ 4000 

43 15550 4000 ■ 16050 ' ' 4100 “ 

1S65Q 4100 16050 42Q0 

45 ,15650 4200 16050 4.300 

—i-6 15550 4300 16150 44no 

47 15450 : 4400 ^[6153 IsoO 

1S3S0. 4500 16059 4800 

49 15250 4600 15963 4700 

-.50 13150 4700 15371 4800 

15777 4900 

ll?50 49 00 1 5 623 5000 


2 P 


5000 15589 '“"SIOO 

—5^ ^80Q 5 1 00 1 800 6500 

55 2100 SIOO. 3300' 6500 

- 3600 5t0| 4800 6500 

57 5100 510^ 6100 6500 

-58 .147a0 5100 13495 5200 

15401 “■ 5300 

-^0 1^550 5300, 15308 5400 

3*00 15214 5500" 

-68 ^14350 5500 15121 FSOO 

63 7700 5600 15027 5700 

7700 5700 UU HSo 

65 7700 5800 14840 5900 

?700 ^5900 JL4747 ^6000 

67 7700 6000 14700 ^6200“ 

- 68 9100 6200 9700 6600 

69 11700 6200 12300 77OO 

-70. 9100 7300 9700 7700 

71 7000 7700 > 12300 8300" 


•* 



00 U VO 'si OO^li) VO Nl '•J '4 ^'sj 'Si VI VI vj ^ Lj S4 Ssl -v| VI vj Lj -si -Sj -si 


7 

1 

7 

7 

7 


7 

7 


162 

163 

164 
165, 

166 

167 

163 

169 

170 
_17L 


172 
-173 

174 

175 .. 

176 

.177 

173 


800 

2200 

X800 

2900 

__ 2100 

.2200 „ 

3300 

. 2900 

3600 

2200 

4800 

2900 

-5X00 

.2200 

6100 

2fc00 

7200 

2200 

12X00 

2600 

.,5100 

2600 _ 

6100 

_ 2900 

7600 

2600 

8200 

2900 

H70C 

2600 ^ 

J2100 . 

2900 

7600 

2900 

8200 

3300 

J1700 . _ _ 

.2900 

12100_ 

3300 

1X700 

3300 

12180 

4300 

XOO 

4 4 

4300 _ 

6900 

- 4400 


_ 100 . 

7600 
-LI 700, 
100 


4400 

4400 

4700 


12100 

.6900 

SHOO 

^2100 

500 


4400 

4700 

4300 

„4B00, 

4300 


180 

181 

6500 

100 _ 

4700 

4800 

— * V . 

6900 
500 . 

_ 

4800 

SlOD 

182 

133 

900 

6500 

4800 

.4800 

1500 

12100 

5100 

6100 

184 

ibo 

• 5100 

500 

5200 

. 185 

6500 

5100 „ 

12100 

5200 

186 

100 

5200 

500 

6500 

187 

6500 

5200 _ 

6900 

6500 

18S 

100 

6500 

500 

5600 

189 

900 

6500 

.1503 

6600 

190 

6500 

6500 

6900 

6600 

191 

100 

6600 

— _ 503 

69C0 

192 

900 

6600 

1503 

6900 

193 . _ 

6500 

6600 

.. 6300 

; 6900 

194 

7500 

6600 

8500 

6900 

195 

8600 

6600 

10003 

5900 

196 

10300 

6600 

11200 

6900 " 

197 _ 

100 

6900 

6900 

7300 

193 

7500 

6900 

8500 

7300 

199 

8800 

6500 

^loooa 

_ 7300 

200 

10300 

6900 

11203 

7300 


IDENT M 2, 
161 



PELTA_» 


17 . 








lii SPEC PPK T.MAX<<»399 

' ' e?£R NPSC • T*ix NjP 

• NULL i^ASK • 

O"' NPSE 

t _ . 

» WARNING* #' 

C aNP I T I B N 8 

u war.nYng « 

CBNDITIBN 8 



Output for commands 31 through 48 not shown, * 



CC000045 

GENERAL ARTV»0«< CHECKING - PHASE I CC000050 

CCOOOOSi 

CC00005E 

err or; h inihu h n-p spacing betwl?:n .d.i fferent,.N9DE.s„» CC 000053 . . 

MIL CC00005A 

ccooaos s s s 

DIFF CCOOG056 56 















} NPSE 














;glc 








7 

3 

7100 

2200 

7200 

2300 









7 . 

. - ...3. 

7100 

2300 

_ . 7200 _ 

?4Q0 

9 c 

- ’ 







7 

3 

7100 

EAOO 

7200 

2500 









7 

. SB 

7.100, 

_ 2500, 

7200 

E600 

^ c * 

OIRECTORV * 




' 







FILES 













™ E 

UM T 

SET 

REC3KDS TBTAL NAME 

TYPE 








C r 

5 

26 


18 

87S T 

1 








— 














ja 

Masks 













— 

N AME . 

OrftECT&RY file 

ADDRESS 

RECbHSS ioent 

^ 1 

“ident 

If 2 





1:^ 

M 


ll 

2 

3j00 

1 

9 


161 





S 1— 

C 


13 

A 

9300 

X 

9 


121 





pd fr 

H 


15 

6 

IS3C0 

1 

9 


200 





b: 

^ T 


16 

7 

18300 

i ^ 

16 


no 





P 


17 

3 

21600 

2 

^12 


71 



1 



w 


18 

9 

2 A 300 

’ 1 

11 


2 






NPSE 


20 

11 

30000 

1 

7 


3 





• 

TIME • . 










CLOCK. 

• 128 . 



ne^TA • <9 



I 


I 

i 


} 



til 'a. 






Outpat ior commands 57 through 69 not shown. 


r£R PA • NL\K_Pi_rt_ 

wa=!‘.v:ng'# 

_CSS3 1 T f0\' 8 

t; Si ' o 

_c:s.‘o: Ties s 

* NULL MAsd *- ■ 

PA 


5E>ARATrSN EF^DIFFUSIQN TNT'9 ACTIVE eR*QUARD BAND AREAS 
Ll^E'Li^E ... CCOOOOB2 


CC000090 

CCC00091 













UNIT BKJ R£C3RDS TOTAL TYPfc 

B 34 12 953 PA 1 


MASXS . 
NAME 


DIRECTgRY file 


M 

PA 

c 

PS 

N 

T 


n 

12 

13 

^15 

16 

T7" 


9 

3 

:'4' 

5 

6* 

7 


addr p^^ 

' 9ioO 

laooo 
'iB3gu“' 
183CC> 


HECOHDS IDgNT Ai i IDENT ^ a 

" ur 

12 

i2r 

71 


1 

"1 

2 


9 

12 
9 
3 
■ 9 
16 


200 

no 


21600^ 

243G0 


CLOCK « _ jj66 
DELTA 



T?>ER NA “• iNTR' NiW 


. SEPAR AT reN_OFL_N D1FFUS I9K ! N TO _ACT I V£ 3 R J5U A R0_ S AND _ARgAS. qC000Q95 

ccooooss 


99 


INJL. 


1 , . 

, 10 

. 2100 

-2200._ 

. 3300 

9«»00 

1 

10 

5100 

2200 

6100 

2600 

1 

_ .. __ 10 

SiOG 

_2600 

6100 

pqOO 

3 

10 

800 

2200 

1800 

2500 

3 

10 

3S00 

2200 _ 

4800 

2900 . , . 

3 

n 

8800 

6600 

jpooo 

6900 

3 

11 

8800 

_6900 

10000 

7300 

3 

11 

10300 

6600 

11200 

6900 


-11 

-1.0300 . 

_630P 

„ 11200 

7300 

9 

11 

750C 

6600 

8500 

6900 


11 

7500 

.Ji900.._ 

^8500. 

7300 




« 

»• 

i 








* DIRECTPRy • 

FILES 

_ UMT SET REC3K3S_ teTAL NA^E __TYPE 
5 36 67' ■ 1C92' -S ’ 1 



Output for commands 99 through 101 not shown. 


■“ePER 'liG • :niNt nJna' 


ccoooioa 


. „ 7200 
7600 
-_ 11700 , 
7600 


172 
173 , „ 


U 700 

100 _ 


-.2200 

2600 

-_2600 

2900 

-> 29 . 0 CL 

3300 

_.4300 


12100 

8200 

.12100 

8200 

_ 12100 _ 

12100 
6900 


2600 
2900 
2900 .„ 
3300 

- 3300 . 

4300 
4400 . 










o (a) u) ni vo'U) ^ 





17^ 

11700 

^300 

12100 

4400 
4700 
„ 4800 

4800 
4800 

175 

176 

177 
173 

100 
7600 
11700 ' 
100 

4400 

4400 

4400 

4700 

6900 
S200 
12100 ' 
500 

179 

900 

4700 

1500 

4800 

180 

6500 

4700 

6900 

4800 

131 

100 

4800 

soo 

SlOO 

132 

900 

4800 

1500 

5100 

183 

6S00 

4300 

12100 

5100 

184 

100 

SlOO 

500 

5200 

185 

6500 

5100 

12100 

5200’ 

186 

100 

5200 

500 

6500 

187 

6500 

5200 

6900 

6500 

188 

lOG 

6500 

500 

6600 

139 

900 

6500 

1500 

6600 

190 

.6500 

6500 

65 ‘-0 

6600 

191 

'100 

6600 

500 ■ 

6900”^ 

192 

900 

_ 6600 

1500 

6900 

193 

6500' 

6600 

6900 

6900 

197 

100 

6900 

6900 



IDENT # a' 

11 

161 
Ig 
121 
71 
2 00 

110 

2 

197 


T 


C 

D 


Output for coirunands ‘.^3 through 149 not shown. 


P TRANSIST3R I PENT IF! CAT IdN / ChT CK IM. 


L9CAT1SN sr PR9SPECTIVE P CHANNELS^ ARSITRARILY ASSUMINQ 
that ANV channel Up T0 1 mil LSV3 WITH AT LEAST 0«1 MIL _ 
METAi. ANP thin 0X1PE WILL pERr8RM S9MEv.HAT LIKE A TRANSISTOR 

_SP K M A X W1300<R1 2 C*Sl2a 1*R220/S23<^ 1 CC5.aO:i52 <»« 

SPER PPC • twiX PA' PlPr CCOQOiSS <-« 

• NULL mask * ^ 

PPC 


CCOOOISP 

CC080151 

CCOOOISE 

CC00Q153 

ceoooiSA 

CE000155 

CC000156 


JL52, 


1S8 


* WARNING # 

cesPiTiffN a 


* WARNING 0 
„..C9N0ITI3N ; 8. 


O 




1 PPC 








1 

1 

8500 

3000 

8S00 

4400 







2 

« 2 

10000 

3000 , 

10300 

4400 







3 

3 

1800 

5100 

2100 

6500 







. ..V 

. 4 

.3300.. 

5100 

3600 

. . _ 6500 . 







5 

5 

4800 

SI 00 

5100 

6500 

•DIRECTORY • 












FILES 

• UMT SET 












RECORDS total NAf*E 

TYPE 








5 


41 

1366 SU«E 

1 








masks 

NAME 01 Ri 

ECTSRY 

file 

AOOPESy- 

RECORDS lOENT 

JL-i- 

I D ENT # 9 





* 

KA 

10 

1 

•iOO 

1 

s 

u 






M 

11 

? 

33C0 

1 

9 

16! 






^ PA ■ 

la 

: 3 

A^C'O 

1 “ 

12 

12 






c 

13 

4 

s?f‘0 

1 

9 

121 






' PG 


5 

1?»J0 

2 — 

3 

71 






. N 


iS 

ItiQO 

1 

9 

200 






T 

1«> 

7 

lfi300 

1 

16 

110 






. P 

17 

B 

216C0 

2 


71 



r 



• w . 

18 

9 

24300 

1 

11 

2 






NG 

19 

* Id 

27300 

1 

7 

197 






: ^ PPC 

23 

14 

39000 

1 

S 

5 






♦ TIME • 









clock • 

21* 







_■ - 

■_ ■_ _ _■■ r ^ ■ 

■ ■ — . ■ r- - 


- DELTA JL 

2 










■jFNL ■ PPC, 97 ■ " ■■■ 

SPEC KlNAiloo 

"ePtfi — pc““intr*~ppc7T 

• DHECTePY • 

FILES 

_ UNIT SET RECfrSOS TOTAL NAflE TYPE 
5 ' 46 ■■ 41” 1366' 'SUHE 1 


CC000159 

CC000 16Q 

■i:'Coooi6i 


MASKS 


NAME 

OIRECTBHY 

file 

address 

NA 

10 

1 

300 

M 

11 

p 

3300 

PA 

12 

3 

6300 

C 

13 

4 

9300 

PG 

14 

5 

ip6ocr 

N 

15 

6 

1B300 


Is 

7 

183G0 

P 

17 

B 

21600 

W 

"18 

9 

24300 

NG 

19 

10 

27300 

ppC 

.23 

14 

59300 

pc 

__ 24 

_iS 

48000 


?-.• T 

-j.'r- 
O;' 


I«E • 


RZCBHDS 

1 

1 

■ ‘ 1 ~ 

1 


IDENT » 


IDENT # 2 


‘spec MINa«100 
9 PER PC « INTR PC*M 
"V OlRECTtjRY • 
files 

‘~Dn I T““^eT“TJec 6«175 

5 St-l 


1366 SUME 


ccoo'oisa 

CCopGlj63 


MASKS 

N'AttE 0:1 rectory"" F ILF ■■ ADORES S "REdeiRirs lOtfiT M i~0ENT' • f 
NA lot 300 1 - 


M 



ic! 

^ ■ •:■■: ' '. ^ :■ ■ ■ ' V 

:T‘ isRE]? CPC =» UlsiK >PC# PC 
li 'x VAP>J!NG -rf. 

NBICE'AREA 



CC0Q0164 


CSNPITieV 8 
1 : * WA^NINS * 






I cbnditism a :" ~ ' ■■ 

? . <>-.NULL MASK ♦ 








1 apc 


#:OIf?ECTDRV • 

F I LES: ; 

„UN I T SET g£C 3RDS 

' 5 46 . 41 


1 

2 

1 

„_2 _ 

8500 

lOOOO 

3000 

__3000 

8800 

10300 

4400 

4400 

3 

3 

1800 

5100 

2100 

6500 

4 

4 „ 

3300 

_ .. 5100 ._ 

... 3600 

6500 

S 

5 

4800 

5100 

5100 

6500 


r.B TAL SiA’^^E 
‘1366 SU'^’E 


[■ O'- 

NAME 

OlHEGtSSY 

file 

ADD^ESti 

RECeRDS 

IDENT i* 1 lOENT 

# 2 


NA 

10 

1 

300 

1 . 

9 

11 

-vj' 

n 

: . 11 

2 

3300 

1 

3 

161 


Pa 

12 

" ^ -3- 

63e0'“ 

1; 

12 

12 


c 

13 

A 

9-iir< 

1 

9 

121 


P3 


5 

t?6r) J 

-B' 

3 

71 


N 

iS 

6 

15300 

1 

9 

200 


T 

16 

7 

18300 

1 

16 

no 


P 

17 

8 

Si 60.0 . 

2 

12 

^1. 


W 

. IS :. 

9 

24300 

1 

11 

2 


NG 

19 

10 

27300 

1 

7 

137 


Ct>C 

21 

12 

33000 

"1 

5 ^ 

5 


PPC . 

23 

14; :• 

393C0 

1 

s 

5 


PC 

25 

16 

45300 


5 

6 


* TIME • 


GLQCK “ 
.PELTA • 



>PEC_^Pltl.t 

BrtS IPC • 
it'- i«ARNING nr 

'■caNaiTie'N 
« WASJXTNG # 
CSN3ITI2N 
. NmLL MAS< 


PC ■ 


gi3i»si a« i 

IPC LINK 3PC 


_CC0,0flJ65_ 

CC000166 











I 


Outpvit for commant' ' 67 through 195 not shown. 


SPEC RtSCjSl2<f t 
“eTfS P'SI5 ■ SAy.E: "pa" 


■LeCAtl9N'8F”p's8UR'CES and DRAINS '■ ' 


_ccqooi9B 

ccoooiss 


CC000196 

CC009197 


^Tr;?£CTGfis 

FILES 

'JMT 

S 


<IEC0R3S 

ID 


T&TAL 

1356 


MASKS 

TiAME-*-TOrclTSRr 


1 

5100 

5100 

^6100 

6500 

7 

7500 

3000 

B50D 

A400 

7 

BOO . 

5100 

1800 

5500 

8 

10300 ” 

3000 

11300 ^ 

AAOO 

10 

JSOO... 

3000 

„ioooo 

A400 

11 

2100 

SlOO 

3300 

6500 

12 

3600 

5100 

4800 

6500 


P3 



5 

1P5.C0 1 

N , 

ts* 

6 

15300“^ : 

■r . 

16 

7 

tsioo 

P . 

17 ■ 

ft 

21600 ; 

ft 

18 

9 

EL3ro : 

N3 

19 

10 

■ 27?.‘J ; 

PSD 

20 

11 

sp.i'jo : 

OP£' 

24 

15 

■tpabo ■ ■; 


• TIME • 


CL8CIC* ’229 ' 
DELTA • 1 


PSD . LINK PSDiQPC 


LINEaLINE 


CC000300 




.« warning »_ 

C9ND1TI8N 8 

* WARNING 
C8N0ITI9N B 

* NULL HASK • 



o> cu ro m 


<uu>-<^iDcnM)U>r^-^ 


1 


7500 
8800 
10300 
; 8800 

3000 

3000^^^ 

3000 
3000 „ 

8500 

___toooo 

11300 

10000 

AAOO 
. 4A00 

AAOO 
* _ A400 
6500 
j6500. 

6QD 

-21P0 

5100 

51CLQ 

1800 

330.0 

aioo 

5100 

3300 • 

6500 

.3600 

5100 

, , A800 

6500 

5100 

5100 

6100 

6500 

36.0.0 . . 

5100 

_A800 

6500 





Output for commands 202 through 218 not shown. 


R1 20# sift# 1: 
OPER P6M • SAPE H 


L8C*tI$N’ 9F P CHAMNEL GATE METAL 


CC00022A 

CC0Q02S2 


CC000219 

CC000220 







IfUM 









^ (a] UJ u) to oi to u) • 

OVOto.'sJCMJI •PWf\)*^OU)Ou'^17^C3 4 ’ ti>n)i^C>.t0 0c»>^O'O1 -li^wrUMOvO 




C13C K * 241 

DELTA • 1 


71 

HOO 

no 

7l 

2 

■ 197 
12 
161 
5 


CC00Q223 " ■ ^ 2 


1 PQH 


1 

I 

■^ 1 ’ 

1 

1 

t 

I 

I 

i 

i 

1 

1 

1 

1 

1 

i 

t 

i 

1 

1 

i 

1 

1 

1 

1 

< 

r 

1 


1 

7265 

617 

7348 

700 

2 

2500 

700 

7600 

1100 

3 

716S 


7434 

800 

4 

7066 

800 

7523 

P9l 

5 

7021 

891 

7570 

900 

6 

7072 

900 

7621 

„ 1000 

7 

7166 

1000 

7715 

1100 

8 

2500 

1100 

_2900 

2800 

9 

5500 

1100 

5900 

6400 

10 

7£60 

1100 

7809 

1200 

11 

7354 

1200 

7903 

1300 

..12 

7448 

1 300 

7997 

1400' 

13 

7542 

1400 

8091 

• 1500 

14 

7636 

1500 

S185 

1600 

15 

7730“ 

1600 

8279' 

1700 

16 

7824 

1700 

8373 

1800 

17 ' 

7918“ 


6467 

1900 ■ ■ 

18 

8012 

1900 

3560 

2000 

19 

' 8105 

2000 

8654 

2100 

20 

8199 

2100 

8747 

2200 

21 

8292 

2200 

8841 

2300 

22 

8386 •' 

2300 

8934 

2400 

23 

6400 

2300 

8900 

7900 

24 

8479 

2400 

9028 

250C 

25 ^ 

8530 " 

2500 

3079 

2509 

26 

8576 

2509 

3035 

2600 

27 

8666 

2600 

8933 

2700 

26 

8752 

2700 

8835 

2783 


1 


I 


I 


■ i 


:■ A C--^^ t- At i( - 4 r ! !> jgti 


'a^aia i. J' •'Wc'iii liii iJ/fe '!ii iit' J^fcW ■>* j-ivi, 






H i jijiKg 




■DlRE C TePY • 
FILES 
UNIT set 
5 50 


RECORDS 

lb 


TOTAL 

l^lb 


S9 

9900 

15DU 

10400 

7900 - 


31 

1700 

1600 

2200 

7600 


34 

3200 

1600 

3700 

7600 


35 

4700 

1600 

5200 

7600 



Masks 

NAME 0 


I.«F;eT8RY f.IL£ ADORESb 

10 i ,9 0U 

11 ? 3300 

12 3 A300 

13 U 9300 

I'* 5 l?ftOU 

fe- -,153.C0. 

16 7 1R300 

17 8 21A0U 

IB 9 SA300 

.. . 19 10 £7300_ 

20 11 30300 

__22 13 3r,ono 

• Z>* 15 42300 


.1^ 


* TIME 


RECSRt^ 

i 


LPf NT..#.. 1 .JJJEbll..# 2 


clock 

-DELTA. 


OPER PGM„r-JMTfLP5.n/^ 


c coo ezaA 


1 POM 


617 

_„700 

700 

800 

891 

_.900_ 
900 
1000 
1000 
1100. 
1100 
_ 1100 _ 
1200 
1300. 
lAOO 
1500 
1600 
-1ZOO_ 
1800 
1 90 CL 


73^8 
. 7600 
743if 
. 7523 
7570’ 
_76O0, 
7621 
7600 
7715 
2900 
5900 
_7809 • 
7903 
7997 
8091 
8185 
8279 
J37?_ 
8467 
.8560 , 


700 

. 1100 „ 
800 

. 891 _ 

900 

..lOOO 

1000 
1100 . 
1100 
2800 ... 
6400 

.1200 

1300 
lAOO _ . 
1500 
1600 _ 
1700 

-1800 

1900 
2000 









* OlRECTe^Y • ” ■ 

PILES 

UMT SET REC6R3S TSTaL ' ^A^'E TYPE 
5 ,50 IS 1416 ?SU i 




1 

1 

Rins 

PGOO 

8654 

2100 

1 

1 

81 'jy 

2100 

87*f7 

2?00 - 

1 

1 

829? 

2200 

8841 

2300 . 

1 

1 

S3 8 6 

2300 

8934 

2400 

X 

1 


2300 

8900 

2400 

1 

1 

8400 

2300 

8900 

7lD0 

1 

1 

84/9 

2400 

8900 

2500 

1 

1 

8479 

2400 

9028 

2500 

1 

1 

8530 

2500 

8900 

2509 

1 

1 

8530 

2500 

9079 

2509 

1 

1 

__B576 

2509 

8900 

2600 

1 

i 

85/6 

2509 

9035 

2600 

1 

1 

8&6t> 

2600 

8900 

2700 

1 

1 

8666 

2600 

8933 

2700 

1 

1 

8752 

2700 

8833 

2783 

2 


9900 

1500 

10400' 

7900 

3 

ii 

1700 

1600 

_2200 

7600 

If 

5 

3200 

1600 

3700 

7600 

5 

6 

klOO 

1600 

5200 

7600 



Output for commands 225 through 253 not shown 


0 

1 

JOV 


n' tRANSIsfsR iDENTTFICATieN / CHECKING' 


TFNL NAjIO^ 


CC000254 

CCG00255 

^CC000256 

CC000257 


CC000258 _ 

L^CAtIBN BF PR0,SPEc:vE N channels/ arbitrarily assuming " CC000259 

that any channel IJP T& 1 mil LBNG with at least fl.l tUL CC000260 

m'ETAl and thin BXIDE will PERFBRM SBMEWHAT like a TRANS'ISTBR CC000261 

SPEC HAXW»1QO O/R1BO#S1b« l/RgaO/Si^S# 1 CC000212 

9PER 


25*.. 


PNC * TWU NA 

null mask * 

PNC 


DIPF 


CCOC02S3 


J62 


263 


« warning m 
_CeNDITlBN 8_ 

#"w'ARiviiNG' ft 
C9ND1T16N 8 


1 PNC 





1 

I 

IBOO 

2200 

2100 

2900 




a 

? 

^ 330G r 

2200 

3600 

. 2600 




3 

3 

4800 

3200 

5100 

2600 





4 

3300 

2600 

36C0 

2900 




5 

5 

4800 

2600 

‘ 5100 

2900 




<? 

6 

8500 

_6600 

8800 

6900 




7 

7 

lOOOG 

6600 

10300 

6900 




8 

8 ... 

8500- 

. 5900 

.8800 

— - 7,' 00 












t.i ill a 


'Ot^JSCTSRY • 

f:l£s 

' UNIT SET ^ECes:>S 79TAU ^A^E 
5 3A 10 1524 PG^^e 



S J 


in 

'73CC' 

PSD 


11 

303 OC 


21 

12 

33:vOO 

CPC 

2** 



PSC ■ 

2= ■ 

'"“IV “ 

"i,nOO0' 


IFSL P^Cl97 

C“ ^ IN' A. '1 00 
P \C . :VTP ONC/T 

ISECT32Y • 

FILES 

UMT SET PECaK3S t9TAL ^A-E TYPE 
5 54 10 1524 PG« £ 1 



tn tn lo 01 


VO Ut (MX) 


t — 




9 9 10000 6900 1.0309 .7300 


IDENT tt 2 
11 
161 

12 _ 

12i 

7l 

200 

no 

7i 

2 

197" 



CL&CK ■865 . ! 

..DELTA « ___ 2 _ I 


CCOOOc6_4 c 

CCbob265 <■ 

CC000266 <■ 


IDENT # 2 

"161 

12 

121 ' 

71 

200 

110 

2 

T97' 

12 

■ " 6 
5 

9 


.CL8CK_» .266. 


_ 266 _ 

265 

266 




I 



3 




I 

•s 


16 










SP£C HINA, 100 


OPER KC • INTR NCjM 

*_ directory * 

FILES 

UNIT_ set records ^jOTAL NA^e^ 

B 5^ id 158A PGflE 


CC00Q26S 


HASKS 

NAM£_ 

NA 


orREcreRY 

10 

n 

12 

13 

1^ 

_ 15 

16 

,_.. 17 

IS 

1 ? 

20 

21 

23 

24 
26 


_5PER pNC_i 

A warning xt 
_ C0NDITTSM 
M VvARNING M 
_ CONDITION- 
♦ NULL HA5< 
DNC 


: ■ L1N< PNC/NC 


_ADDRES!3 

30U 

3300 

A 300 



1P60U 
_ 15300 
1R300 

21600^ 

24300 

273Q0 

30300 

33300. 

390r< * 

423'VJ_ 

48300 


REC0HD_^ 

1 

1_ 

1 

1 

2 

1 

1 

2_ 

1 


IDENT # 1_ JLDENT 
9 

9 

12 


CLBC< » 270 

-DEUTA__* 4 


NSNE^AREA 


-CCOOJgf 







* DIR£C7SRY * 

^lLZ?i 

^uMT SET f^rC5??3S T3TAL 


nr' 




iT . 


6 

6 

7 

7 
8^ 

8 
9 
9 


6 

8 

7 

9 

6 


8500 

8500 

loooo 

loooo 

B5G0 

. 6600 
6000 
„ 6600 
6 SOD 
6600 

8800 

8800 

10300 

10300 

8800 

__ 6900 

7300 

6900 

7300 

6900 

8500 

6900 ■ 

8800 

7300" 

loooo 

6600 

10300 

. 6900 

10000 "“ 

6900 

IG300 

7300 


^/ ■£ 
:' ■^cr 




TYPE 

1 


MASKS 

NaM£ 

-.A 

M 

OI^ECTeSY 
♦ ^ 

9 « 

F!LF 

t 

4- 

3 

AD3 RE 5 y 
3CU 
3 3 CG 

r A 

1 C 

3 

6300 

c 

13 

4 

9 C V* 

PG ^ 

■ 1 *t ' 

* ■ 5 ““ 

1?6 3'J 


T 

P 


ID 

16 

17 




• .'^ 
V J 

. J 


No 

PSD 

P3M 

NC 

ic 

19 ^ 

9 

irj 

12 

15 

g73C'J 

1 

1 

n 

7 

2 — — — — 

. .157 

C s< 
21 
23 

3^3!^ ' 

3310 J 

1 

_l 

5 

5 

6 

_^GPC 

GnC 

3960"-^ 

AP3Ct> 

2 

1 

9 

5 

5 

PsC^ 

C 3 
26 

16 

. 48300 

1 

1 

9 

9 

9 — 

9 


Tt'iE 


CL6CK 

DELTA 


272 

2 




s^ec ^?iewsisi spc 

OPE^^ ::SC « LINK QNC 
sf I \3 jU 

tSSDlTliJN S 
M 


LI\E 


CC00C270" 

CC000271 


<•«•••«•••.. 


270 

271 


js( rtA^MNQ 
_C9NDJ T18N 
♦ NULL>AS<^ 
5NC 


8 


1 QNC 


6 

7 

7 


7 

7 


1 

2 

2 


IfiOO 

3300 

3300 


4 


3300 

3300 


2200 

2200 

2600 


2200 

.2600 


2100 

3600 

_3600 

3600" 

3600 


2900 

2600 

,2900 

2600 ' 


.. 290G__ 









.directory ♦ 

FILES 

UMT., SET RECORDS TOTAL. N'A^e TYPE 

5 5V 10 1524 PGfl£ 1 


.. <t800 

4800 
_ 4800 . 

4800 

_8500_ 

8500 
. . 8500 . 

8500 

.10000. 

10000 

JLDO.OJL 

10000 


_-5100 

5100 

-.5100. 

5100 
-JS800. 
8800 
. 8800 
8800 
-10300 
10300 
Ji).300_ 
10300 


MASKS 

S'AME 

NA 

M _ 
PA ■■ 

S 

PQ 
N 
'T 
P 
’ W 

_NG 

PSD 

PQM_ 

NC 

CPC 

p^c ■ 

ONC 


directory, 

10 

11 

12 

13 

14 

... IS _ 
16 

17 

18 

^ 1 ? 

20 

21 

23 

24 

26 

28 


File ^address 

1 ■ 3C0' 

2 3300 

3 "6300 

4 13QJL 

5 IPAQO 

.. 6 l^'tOO 

7 :i5jc'j' 

. 8 _ 21600 

9 24300 

to 27300 

11 30300 

,.12 3S300_ 

14 39600' 

_lb .'*P3C0_ 

17 48300 

19 54000 


.RECORDS 

... 


IDENT 


..I.D.E.NT. # 2. 
11 

161.. 

12 

1.2l_ 

71 

200 . 

110 

71 . 

2 

.l_?z_ 

12 

_6 

6 

5. 

9 

9 


_• TIME • 


—CLOCK-*.. 
DELTA • 



L&CATIBN 8F n sources and drains 


CC000301 

CC000302 






P21iOj3ia?i> 1 
KSO m Sa^E NA 


CC000303 

CC0C03aJ* 


■ 



1 

10 

2100 

2200 

3300 

1 NSO 

2900 



K-' 



2 

10 

5100 

2200 

6100 

3600 



p._ . 




3 

10 

51D0 

2600 

6100 

2900 






4 

10 

600 

2200 

1800 

2900 


. L.i.-.ni , 


* ^ 


5 

10 

3600 

2200 

4800 

2900 



h ■■ 

p-*- 



6 

11 

* 86G0 

6600 

ibooo 

6900 



!i'- 



7 

il 

S800 

6500 

lOCOO 

7300 



I'- 



8 

11 

10300 

6600 

11200 

6900 

-. 

- ■ - 

1; ', .,. 



S 

11 

10300 

6500 

11200 

7300 






10 

11 

7500 

6600 

3500 

6900 


*“ 

* 0IJ!tCf9RY~™ 




11 

11 

7500 

6500 

B500 

7300 




^^!le:s 

UMT 


riE:5^33 T5TAL 


5 ^ 

53 

13 

1594 \'CE 

^AS<S 




\aKE'^ 

'0"l=^ECT£t=?Y 

PlCr 

“ AODRFSii' 

NA 

* C 

1 

SCO 

H 

11 

? 

S3C0 

PA 

12 

3 

6 SCO 

C 

13 

4 

o.-O'J 

PG 

I'* 

3 

12600 

>/ 

( ^ 

h 

I5ica 

T 

1 6 

7 

1H3C0 

P 

17 

A 

2t6C0 

-W- 

IB 

9 

2*^ 3C 0 

^5 

15 

10 

2730^ 

PSD 

20 

.It 

3,'^300 


21 


33300 

NSD 

22 

13 

36000 

OPC 

24 

13 

4P3C0 

CSC 

23 

19 

54300 


R£CGKDS 

1 


ID^AT 


* TI^E ♦ 


CL9C<_. 

IdeCta r 


KS3 • L 
tf #rA3\lSG it 

C'&NilTieN' f 
» aA^'i]^G « 
C3ND5T:9!S 8 
• NJLL rAS< ♦ 


Llt>.< NSO/ONC 


LI^e#UNE 


CC 000305 ' 



1 NSB 


• DISECTBflY * 

FILES 

UNIT SET REC8RDS' TSTAL NAME TYPE 
5,,^. 38, 13 1554 NCt _ 1 


. SlOO 
800 
lOQ 
600 


_S100 
5100 
.. 3600 
8800 
_8800 
7500 
7500 
8800 
.. 8800 
10300 


..3300. 

1800 



NAM£ 

DIPECT&RY 

FILP 

NA 

10 

1 

K 

11 

2 

PA 

12 

3 

C 

13 

4 

PG 

14 

s 

N 

15 

6 

r 

16 

7 

? 

17 

R 

w 

la 

9 

NG 

19 

10 

PSD 

20 


PGM 

21 

12 

NSD 

23 

14 

CPC 

24 

15 

QNC 

23 

19 


300 

33 Q 0 

6300 

9300 

1?6G0^ 

’iSIGO 

IfiSCO 

21600 

2*300 

27300 

_30300_ 

33300 

39000 

*?30O 

54300 


IDENT 


9 

9 

12 

9 


CLOCK. 

DELTA 










Output for commands 307 through 323 not shown. 


SPEC R l a p*S l 3 1 1 
ePER kISK ■ SAME M 


LflCATISN flF N CHANNEL “gate METAL 


_ CC000326 
CC0OO327 


CC00032A 

CC000323' 


.7265 

2500 
.7158 H 
7066 ' 
7021 
7072 

_7166 

2500 

5500 


617 

Z3^8 

20CL 

700 

7600 

1100 

700 

7A34 

800, 

800 

7523 

891 

891 . 

. 7570 

900 

900 

• 7621 

1000 

000 

7715 

11.0.0_ 

I'OO 

8900 

2800 


J 


j 









* DJJlECTeRY • 

FtlGS 

UNIT set REC9R0S TOTAL NAH^ TYPE 
5 60 ao 163 <* NSU I 


5 

. _ 60 

20 

l.(^__NSU 

MASKS 




NAME 

DlRECTeRY 

PILP 

ADDRESS 

NA • 

la 

1 

300 

M 

n 

2 

3300 

PA 



3 

6.300 

C 

1 3 

4 * 

93C0 

PG 

1-* 

5 

1P600 

N 

15 

6 

153CO 

T 

16 

7 

18.300 

P 

17 

i5 

21600 

W 

13 

- 

9 

24300 

ncT~" 


10^ 

27300' 

PSD 

20 

11 

303C0 

P3M 

21 

1? 

33300 

NSO 

22 

13 

36300 

NGM 

23 

lA 

39000 

CPC 

24 

15 

42300 

OKC 

2a 

"19 

54300" 


idem 


lOENT 





1100 
1300 
.. 1300 
1*^00 
-1500 
1600 
. 1700 
1800 
. 1900 
2000 
_3100 
2200 
2200 
2300 
2400 
2500 
_ 2 S 09 
2600 
2700 
1500 
1600 
1600 
_6000 
1600 “' 
1600 
1600 
. 2400 _ 
4500 
24 oq _ 
8400 
6700 


7809 

7903 
_ 7997 
8091 

Sl»5 

8279 
_ 8373 
8467 
_ 8560 
8654 
_® 74 ^ 
8841 
_ 8934 
8900 
_ 9028 
9079 
9035 
8933 
8835 
10400 
1400 
4400 ■ 
_ 9600 _ 
2200 
_ 3700 
5200 " 
_8100 _ 
1400 

XI 100 
laeoiT" 
8100 



— — ■» 


• TIME * 


9PER KQM - L 
* W ARM MG 
C3M0JTT9N S 
n /.ARMING n 

ce NO in BN 8 

» N ULL MASK » 
NGM 


link ngm/qnc' 


LINE/LINE 


• OIRECTBRY • 

FILES 

UNIT SET REEBROS tSTAL NA^E TYPE 
5 60 20 1634 NSU i_ 

MASKS 






CLBCK .« 298. 

DELTA « 1 


CC00032S 


1700 

3200 

4700 

7265 

2500 

.7168 

7066 

7021 

7072 

7166 

2500 

5500 

7260 

7354 

7448 
. 7542 

7636 

7730. 

7824 

7918 

8012 

8105 . 

8195 

8292_ 

8386 

8400 

3479 

8530 

8576 

8666 

8752“ 

9900 


1600 

.1600 

1600 

- 617 _ 
700 

__700 

600 

...891 _ 
900 

. 1000 

1100 
■ 1100 
1100 
1200 . . 
1300 
.1«00.._ 
1500 

_J1600 

1700 

1800 

1900 

.2000 

2100 

.2200 

2300 

2300 

2400 

2500 

2503 

.2600. 

2700 

1500 


2200 7600 

-3700 7600. 

5200 7600 

.7348 700 

7600 1100 

J'434. BOCL 

7523 891 

.7570 . 900 

7621 1000 ’ 

.7715 1100. 

2900 2800 

.5900 6400 

7809 1200“ 

7903 1300 

7997 1400 

8091 j 1500 


8135 

_S279 

8373 

_ 8467 _ 
BS63 

„8654_ 

8747 

_884l 

8934 

..8900 ... 

9028 

„9079._ 

9033 


1600 

1700U. 

1800 
._ 1900 
2000 
2100.. 
2200 

2300_ 

2400 

7900 . 

2500 

2509. 

2600 


_8933 27,00_ 

8835 2783 

.J 0.400 7900 





ir 








• OIRECTaRV • 

FILES 

UNIT SET REC3PDS TOTAL NaMe TYPE 


9 

. 1 _. 

8A00. _ 

3300 . 

8900 

2400 

9 

1 

8 A 00 

3300 

8900 

7900 

■ 9 

1 

8479 

24 OC 

8900 

3500 

9 

1 

8479 

3400 

9038 

3500 

- 9 

_ _ 1 

8530 

3500 

2900 

250® 

9 

1 

8530 

3500 

9079 

2509 

9 

X 

. _ 8576 _ 

3509 

8900. 

. 2600 . 

9 

1 

8576 

3509 

9035 

2600 

9 

1 . . 

6666 

3600 

8900 

2700 

9 

1 

8666 

3600 

8933 

2700 

9_„ 

1 

5753 

PTOO 

883S 

?783 

10 

2 

9900 

1500 

10400 

7900 




5 

60 30 


1634 NSU 

1 

KASKS 

NA 

H 

PA 

. c 

directory 

10 

u 

12 

13 

file 

1 

2 

3 

4 

ADDPES9 
300 
3300 
6300 
9300 

RECORDS IDEM # 

1 

1 

" i ^ ' 1 

1 

PG' 

14 

'5 ’ 

13600 

2 

N 

15 

6 

15300 

1 

T 

16 

7 

183C0 

1 ^ 


IDENT 


O 

'A,- 


OB 


P 
w 

NG_ 

P30‘ 

PCM 


NSO 

NQM 

OPC 

ONC 


17 

18 
19 

8 

9- 

10 

21600 . 

34300 

37300 

2 

1 

1 

12 

11 

7 

20 

11 

30300 

1 

5 

21 

12 

33300 

1 

5 

22 

13 

363C0 

i 

10 

23 

l<r 

39000 

1 

10 

24 

15 

423G0 

i 

5 

2B 

19 

54300 

X 

10 


.* time • 


.. CLOCK .• ^301 

DELTA • i 


Output for conuanands 330 through 403 not shown. 



error: 

niNIMUM. SepARATION flF STEPPED 9PENING AND ANY 

CCnonAOA 



9P£« CXC • CXPN r. 

100# loo 

CONTACT OPEN INS • o«l MIL “ ' 

CC000406 

CCoODAQS 












■ 

1 EXC 




3 111 900 

3 .. . lia 3900 

1600 isoo 

1600 4S00 

3500 

3SQ0 


_ 

p t 






i i 













7 

117 

900 

AHOO 

1500 

7100 


•t 






1 

US 

5400 

5200 

6000 

6A00 








3 

119 

9100 

6000 

9700 

7900 


ji 






9 

ISO 

7600 

6700 

8200 

7200 


i 

- 



. . ^ 


a 

121 

10600 

-6700 

11200 

7200 


1 


FILES _ 

'Uiiilf SET SEC3R3S f0TAl. ' .Al^E tVipt 
5 68 33 1963 NMi>0 1 


^ASKS 

Sa«E 

NiA 


DI»ECf0RY 

10 


AdCRESSi 

300 


RECeKOs 

1 


IDEM 


IDENT 


' 

C 

P3 

K 

T 

13 

15 

16 

4 

5 

6 
7 

93C0 
1 2ACd 
153CU 
18300 

1 

1 

1 

9 

3 

9 

16 

121 

7l 

■ 200 
110 


P 

17 

8 

21600 

it 

12 ■" 

7l 


W 

16 

9 

2A3CO 

1 

n 

2 

a 

NG 

19 

10 

27?r0 

1 

7 

197 

PSD 

20 

11 

3T J jO 

1 

5 

12 


P3^ 

21 

12 

33JC0 

1 ■*' 

5 

6 


NSD 

22 

13 

36300 

1 

10 

9 


^ N uM 

23’ 


393C0” 

1 

10 

6 


CPC 

2^ 

15 

AP.300 

1 

5 

5 


KKSO 

25 

16 

A530O 

1 

7 

197 


PKSO 

26 

17 

48600 

2 

3 

71 


■"exc 

27 

15 

sioco 

1 ' 

9 

121 


QKC 

23 

19 

54300 

1 

10 

9 


SPEC PSS’T 

ft»£» CTSr • NINT EXCaT 


DHECTSRY ♦ 

FILES 

UMT SET REceRDS TBTAL NA«E TYPE 

" S 68 33 1968 ^NSO 1 


flASXS 

NAt!£ DIRECT0RY FILE ADDRESS RECeUOS IOENT # 1 IDENT # 2 


CLOCK ■ 
DELTA ■ 


CCOOd'407 

CC000408 


i ctoe 


















Kk 

10 

1 

3G0 

1 

9 

11 

H 

U 

2 

3300 

1 

9 

161 

PA 

12 

3 

A300 

1 

12 

12 

c 

13 

4 

9300 

1 

9 

121 

PG 

14 

5 

12600 

a 

3 

71 

N 

15 

ff 

15300 

1 

9 

200 

T 

16 

7 

18300 

1 

16 

110 

P 

17 

B 

21600 

2 

12 

71 

■ 

18 

9 

24300 

1 

U 

2 

NG 

19 

10 

27 J30 

1 

7 

197 

PSD 

20 

11 

_.3C'00, 

1 

5 

12 

PGM 

21 

12 

33300 

1 

5 

6 

NSD 

22 

13 

363Q0 

1 _ 

10 

9 

NGM 

23 

14 

39300 

1 

10 

6 

CPC 

24 

15 

4P300 

1 

5 . . 

5 

N\SD 

20 

16 

45300 

1 

7 

197 

P\SD 

26 

17 

48600 

2 

3 

71 

EXC 

27 

18 

51300 

1 " 

9 

121 

QNC 

28 

19 

54300 

1 

10 

9 

CT0E 

25 

20 

57000 

1 

1 

114 

i" T i ME *•' 















0 

1 

o 

o 


CL9CK • 
JtE UI A 


369 


*• «* V 


Output for cominands 409 through 474 not shown. 


P»R g f * WP» -1 6386# -MO 

• ASea and PERlKETEfl *“■ 


CALCULATE junction CAPACITANCES ASSUMING KA ■ 0»070 PF/SO. 
MIL AND KP • OtEOO" PF/MIL IN UMTS 9F ,001 PF' 

T l'b#l* !DF2/AfiE*7£5fRSNE^JtVPiriTlEfE5^TE>SP 


CC000A75' 

CC000A7S 

CC0OOA77" 




478 


1 PARE 


3 

3 

3 

3 

3 

3 

"3 

3 


3 27509504 

4 24499584 

5 45499248 

6__ 18829664 
7 18969664 

.8 ^2750950^ 

9 


to. 


63998624 

83998624 


•5 53600160 

•7 _ 15000056 
-7' 31000064 

^•5 _ 54600160 
55000176* 
^53600160 


•5 

•5 


-6 

•^7 

•7 

•6 


•7 
• 7 


32000113 

_3?00P113^ 


•*6 

*6 


•7 

•7. 








asJAjMUKS-tlMftiM.** 




'i '~i r'li liiil'itti i' . 






3 

3 

3 

3 

_3 

3 

3 

3 

3 

3 

_ 3 , 

3 

3 

3 

3 

3 

_3 

3 

7 

10 

8 
3 
3 
3 
3 
3 
3 
3 

_3 
3 
3 
3 
3 
^ 3 

3 

3 

3 

3 

3 

3 

3 


_3 

7 

11 

13 

1 

3 

3 

3 

3 



— 





11 

78398672 

>' -6 . 92000336 

-7 

12 

24499568 

•6 *8000160 

-7 

13 

24499568 

.. *8000160 

-7 

14 

78398672 

-6 92000336 

^7 

. _ 15 

„ 83998624 

-7 ,32000112 

-7 

16 

83998624 

-7 32000112 

• 7 

17 

83998624 

* 7 _ 32000112 

•7 

18 

83998624 

-7 32000112 

^7 

. 19 

83998624 

• 7 ... 32000112 . 

*7 

20 

83998624 

•7 32000112 

*7 

21 .. 

_ 63998624 

-7 32000112 

. . -7 

22 

83998624 

-7 32000112 

-7 

. 23 

83998624 

- 7 .._ 32000112 . .. . 

-7 

24 

33998624 

-7 32000112 

• 7 

. ..._ 25 

83993624 

- 7 .._ 32000112 .. 

• 7 

26 

24499568 

-6 *8000160 

4-7 

27 

... 24*99568 

•6 *8000160 

-7 

28 

83993624 

-7 32000112 

-7 

29 

. 11549795 __ 

”S _ 10*00033 


30 

13649759 

•5 11200036 


31 

11549795 

-5 10*00033 

*6 . 

32 

83998624 

-7 32000112 

-7 

33 

83998624 

-7 32000112 

-7 

34 

83938624 

-7 ' 32000112 

• 7 

35 

34789360 

-5 31200096 

"6 

36 

83998624 

-7 32000112 

• 7 ’ 

37 

83998624 

-7 32000112 

• 7 

3 S 

83998624 

-7 32000112 ■ 

-7 

39 

83998624 

-7 32000112 

- *7 

40 

83998624 

-7 32000112 

-7 

41 

8399562 * 

-7 32000112 

-7 

42 

83933624 

-7 32000112 

-7 ^ ^ 

43 

53598624 

“7 ... 32000112 

-7 

44 

699936*8 

-7 28000036 

• 7 

45 

699988*8 

-7 25000096 

• 7 

46 

97933*00 

-7 36090128 

-7 

47 

112*1811 

. „ “6 *0120128 

*7 

48 

11325810 

-6 * 03601 ** 


49 

. 11*09808 

-6 . * 06001 ** 

-7 

50 

11*93807 

-6 * 08401 ** ~ 

-7 

51 

11577606 

-6 * 10801*4 

-7 

52 

1166180 * 

-6 * 13201*4 

-7 





_ 51 J ? ARE .. 

53 

1 17 * S 803 

^ »6 415601 * 4 ' 

*•7 


*55 

^6 

<57 

58 

59 

60 
61 


13649759 
13649759 
U549795 
11S298D1 
_U 913800 
13011799^ 
13095797 


10400033 
•■5 „ 11300036 
•5 11300036 

•5 10400033 

^6 41860144 
*6 4 2040 144 
*6 43320144 
.•6 43560144 


• 6 

^•6 ^ 

• 6 

•*6 

-7 

-7 


^7 


fT-~- 


— 




• DlRgCTflRY • 


3 

3 

3 

3 

3 

3 

3 

3 

3 

3 


FILES ~ ■ ~~ 

.UNIT SET RECeROS tSTAL NAME TYPE 
s 7A 6 2006 T9XE i 

... 6. ... I 71 71 PAKE 0 



masks 








NAME 
NA 

directory 

10 

File 

1 

address 

300 

RECORDS IDEnt 
1 

# 1 
9 

lOENT 

11 


M 

PA 

u 

12 

2 

3 

3300 

A300 

1 

1 

9 

IH 

161 

12 

121 

71 


C 

PG 

13 

14 

4 

5 

9300 

IPoOO 

1 

H 

9 

3 


H 

T 

15" " 

16 

6 

7 

15300“ 

18300 

1 

1 

-g- 

16 

200 

110 

o 

! 

0*^ 

rg 

P 

W 

N3 

PSD 

17 

IS 

19 

HO 

ft 

9 

10 

It 

aiA'J J 

24'f 0 
27 jOO 
30300 

d 

1 

1 - 
1 

12 

11 

7 

5 

7l 

2 

197 

12 


PGM 

NSD 

HI 

HH 

IH 

13 

33300' 

36300 

^ 1 
1 

5 

10 

6 

9 


NGM 

QPC 

23 

£4 

14 

13 

39.300 

A?300 

1 

1 

’ 10 
5 

6 

5 


EXP 

EXN 

25 

26 

16 

17 

A5600 

ARCOO 

^ 

1 

12 

9 

71 

200 



C3NC 

HTHX 

MTHN 

30 

31 

"19 

21 

22 

54300'" 

60000 

63000 

1 

I 

’ 2 

10" 

9 

9 

9 

161 

16 


• TIME • 


62 

12193796 

•6 

42840144 


63 

10397615 


30508096 

•6 

64 

102674 IB 

__ <»5 

30136080 

-6 

65 

1C* 35821 

-5 

29760080 

*6 

66 

10005622 

•5 

29388080 


67 

1a909737‘ 

.5 

2960008b 

■ 6 

68 

24499568 


48000160 

-7 

69 

78398672 

• 6 

92000336 ■ 

m7 

70 

24499568 

-6 

^43000160 

r7_ 

71 

26459504 

• 5" 

24400064 

«6 


clock » kZZ 

- PELTA « 2 









I t I 


Output for commands 479 through 483 not shown. 


ARt*.' 6/PTHK# *50000 
• AREA » tIDi»l/ID]»2»AREA/EXP3MENiTi 


CCOOOOS*' 


1 AR EA 


I 


J 1P000043 
I 24000080“ 
I 24000080 
1 54900224 

1 10980036 

1 10980036 

1_ 16000054 
i 16000054" 
1 54900224 

I 54900224 ‘ 
1 10980036 

1 12000043 

_1 16000054. 

1 54900224 

1 54900224 










3 

3 

3 

3 

.3 

3 

3 

3 

3 


1 10980036 
1 400G0160 
1 24000080 
1 54900224 

1 54900224 

10980036 
10980036 
54900224 


-7 
-8 
-7 
• 8 

•a 


-7 

^7 

• 8^ 


0 . 

0 

- 0 . 

0 

JL 


0. 

0 

,0 

0 

JL 


0 

0 

0 


:,- r * 1 -1 

3 

1 

2000006'* 

. 20000064 

m7 

• 7 

0 

0 

w 

0 

A 


j 

3 

3 

_ - . 3 

3 

. 3 

1 

1 

i 

-- 1 

1 

1 

20000064 

1S000056 

5000020a 

40000160 

20000064 

20000054 

-7 

-7 

0 

0 , , 

0 

0 


. i 

■ 

*8 

.6 

• 7 

0 

..... 0 

0 

A 

0 

0 

0 


j 

i 

3 

... 3 

2 

„ 2 . 

2 

2 

g 

2 

50000208 

15000056 

• 8 

- -7 

0 

0 

Q 

0 

0 


I 

3 

3CC00112 

20000064 

•7 

-7 

0 

0 

0 

Q 

T 

i 

I 

3 

3 

20000064 

20000064 

• 7 

• 7 

0 

f) 

0 


:!- . 

3 

2 

2 _ 

4 

5 

15000056 

5000020S 

• 7 ^ 

-3 

0 

D 

0 

0 

A 


1 

[ t 

3 

43000160 

45000160 

• 7 
*7 

0 

D 

y 

0 

0 


1 ^ 

i — 

3 ‘ ” 
3 

6 

8 

45000160 

16000054 

1*7 

-7 

0 

0 

0 

A 

■*" 


3 

8 

_ 8 

8 

__ 8 

8 

8 

16000054 

16000054 

-7 

-7 

Q 

_ 0 

P- 

0 

n 



3 ■ 

160000S4 

24000080 

-7 

-7 

0 

0 

u 

0 

^ 



3 

— 8 

56000192 

12000043 

-7 
• 7 

0 

n 

0 

A 




. - . , -- IK . 





□ 


^ . 

■ 





51 AREA 


♦ DIRECTORY ♦ 
riLes 

a“ 

a" 

120000*3 

-7 

0. 

0 



-UN1T_SET total KAtl£ TYPE 

5 74 6 2006 T6X£ ’ i 

6 . . 2 53 124 ARLa 0 


MASKS 


NAME 

0IRECT8RY Ft 1.7. 

address" 

_ 

NA 

10 

1 

300 


M 

n 

P 

3300 


PA 

12 

... 3 . 

6300 


C 

13 

4 

9300 


PS 

14 

5 

12600 


N ^ 

15 

6 

15300 


T 

16 

7 

18300 


REC9K0S 

1 


' IDENT 0 


1 

I 

X 

2_ 
' j 
1 


1 

9 

9 

.12, 

9 

3 


16 


IDENT 0 2 
U 
161 

. _ 12 
121 

7l_ 

200 

no 











■'■r ’ 




W2-.T>r fi i j i. J ^ -• 


Output for corr.mands 485 through 510 not shown. 


?9>L 7ii/PG io/N5i x/psd; pso# • pgm7\sF;'nso/nSm/ 

* WAPMNG * _ 

casaiTies s' 

rtAsiNING # _ 

C5N0ITI3M 8 ■ ~ 

“‘JATieNS • 


CCOOOsil 







L99“ 


1 ■ t? and -6 

9R 3 Ai^O 4 

9^ 3 ANO 5 

Oft ■■" ■ ” '3 aNo ■ 6 

3 • err 

BtJ 1 ANO 

Oft 1 ANO 5 

1 ANO 6 

aft 9 aNO' I 

Oft R ANO 2 

7 ■ 9N 

fifi 10 and ~ml 

11 ANO .4 


.... 8 • 10 ANO .2 

n S'* 3 "No 2 

9 • 3 AND ■■ 1 


10 ■ t'aNo"- ^ 

.. OR , _ R A O _ -2 


ll ■ 

OR 


12 • ■ ~ 
es 

• DlRtCT6RV * 

FILES 

UNIT SET REC8R0S 

S 74 6 

6 '8 24 


7 and .4 

12 AND ■ ‘.g 

~II"ANb :ts 

1 and .6 


T9TAL NAK£ type 
„2006 T&AE___ 1 

40S ■ B 901 , "o ' 


MASKS 

name directory File address records 

N* 10 t 30 J I 

il 11 2 330'i 1 

PA 12 3 6300"~~~1 — 

C 
N( 


IDEM in 


1 


: 


] 

] 







PCM 

21 

1? 

33.100 

1 

5 

6 

NSD 

22 


14100 

1 

1 0 

9 

NQM 

2J 



1 

TO 

6 

CPC 

2** 

15 

42300 

: 

5 

5 

EXP 

,25 

16 

_45*00 

2 

12 

71 

EXN 

26 

17 

4R300 

1 

9 

200 

i all 

27 

IH 

Si 100 

3 

12 

200 

i CNC 

2S 

19 

543C0 

1 

10 

9 

P3 

29 

an 

576C0 

2 

3 

3 

MTHK 

30 

21 

603C0 

1 

9 

161 

HTWN 

3;. 

_2P 

63600 

2 

9 

16 



CLOCK ■ 459 

delta ■ 5 



HISCELLANESUS 


LIST PRHCESSInG 


CCQ00512 

CC000513 

CCo005>14 


STO«£ DEVrCE/NeOE LIST 
LIS T . / 6 ✓ P SJ5j_P Sp /P SD/Ng M;MSD.>^ SO/ 



GC000515 

CCoOOSiS 



CSSOITIB'^ s 

fj H i,ARN:\G M 

I- ce'i.pme?^ a 
list • 

12 3 4 






4 

4 

4 

4 

4 

7 

7 

11 

‘U 

11 

7 0 

11 C 

0 Q 

7 0 

5 

0 

^0 C 

S 

0 

11 c 

5 

. . .. 0 

12 C 

5 

11 

0 C 

5 

■ 11 ■■ 

11 c 

5 

11 

12 C 

5 

18 

0 0 

5 

12 

11 __ 0 

B 

18 

12 0 

6 

1 _ 

1 0 

6 

1 

12 0 

6 


1 0 

6 

12 

12 0 







CC0OO519 


CCQ00518 


519 


1 _!»/«« 


30000064 

•S 

14000027 

•4 

30C00054 

-5 

14000027 

«4 

30000064 

-5 

_14000027 

«4 

30000064 

•5 

14000027 

-4 

30000064 

•5 

140.00027 

•4 




• O IRECyaRY # 

" ri'LES 

UNIT SET REC9RDS TOTAL KA«E TYPE 

5 7<f 6 S006 TBXE i 

6 10 7 J'3JL_,.RANg 0 


MASKS 

NAME 

NA 


directbry 

10 

11 

12 

13 

Hr 

15 

16 
17 

.18 

20 

21 

22 

23 

24 

25 

26 

27 

23 

23 

30 

31 


ADDfirjS 

3C0 


3300 
„ A300 
9300 ‘ 

12300 
15300 
1A300 
21600 
2A300 
30300"' 
33300 
363C0 
39300 
4p300 
_45600 
4g300 ■■ 
51900 

54300 

57600 

60300 

63600 


RECaHDS 

1 

I 

I 

1 


IDENT 


I dent 



RANG 6i 
• RANGE 


( IDP2#X* EXP8NENT/ Y, EXPaNENT) 


CC000520 


1 Rang 


1’ 30000064 

2 30000064' 

2 30000064 

4 30000064 

_4 30000064 

3 30000064“ 

3 30000064 

E 30000064 ' 

5 30000064 

6 30000064 

_6 ,30000064_ 

a 30000064 
a 30000064 


•5 _ 70000160 
•5 40000080 

■5 30000064 

•5 40000080 

30000064 

-5 40000080' 

. -5 30000064 

-5 40000080 ~ 

. -S 30000064 

•5 39000064 ' 

» 5 49 000089 

*5 30000064 

•5 _4Q000080 










jui uijui oi ui til m y) aun ui & 



: tv- ^ -f-. i 'rfevyr “S' 




A *» 


7 30C00064 

7 :voooooti«i 
9 3000006<^ 

9 30000064 


•5 30000064 -5 

»5 400000HO .5 

-S 30000064 _ .S 

-5 400000SO .5 ■ 


i 

'4 

ji 

% 

■S 

4 


■CLPCt < « 4fi5 

DELTA . 1 










APPENDIX D 


ROUTINES CALLING STRUCTURE 

This appendix presents the routines calling structure of MAP. 
Table D-1 lists each inline main program routine with the other Inline 
routines and the subprograms which each may call. Table D-2 lists 
each subprogram with the other subprogi*ams each may call. 


INLINE ROUTINES CALLING STRUCTURE 


CALLING ROUTINE 


INIT 


ORTHO 




FINIT 


COMM 


COMM 

FILE 

TEXT 

FREE 

OPER 

SPEC 

TRAC 

BOOL 


LIST 

AREA 

PERI 

PARE 

RANG 

SKIP 

IFNL 



SUBPROGRAMS CALLED 

102 

108 

103 

DEPEND 

107 

LOCATN 

OPl 

BOOKl 

SMASH 

107 

BOOK2 

102 

BOOK2 

107 

LOCATN 

108 


107 

107 

OPl 

10 6C 

103 

10 6D 

to 6 A 

I06B 

BOOKl 



BOOK2 



Table D-1 




















INLINE ROUTINES CALLING STRUCTURE 
(continued) 


CALLING routine 

INLINE ROUTINES CALLED 

SUBPROGRAMS CALLED 

SPEC 


103 BOOKl 

108 

TRAC 

LINKl 

OPl 102 

OP2 103 

OPS BOOKl 

OP4 BOOK2 

BOOL 


OPl / I06A 

OPE 107 

OP3 BOOKl 

102 BOOK2 

103 

LIST 


OPl 106 a 

OPE 107 

OPS BOOKl 

T02 BOOK2 

103 

AREA 


OPi 107 

103 BOOKl 

I06^ 

PERI 


OPl 107 

103 BOOKl 

106A 

PARE 


OPi I07 

103 BOOKl 

10 6 A 

■ 

RANG 

. 


OPl 107 

103 BOOKl 

I06A 


Table D-1 
(continued) 


D-3 
















INLINE ROUTINES CALLING STRUCTURE 
(continued) 


SKIP 


IFNL 


SAME 


NGTV 


EDGE 


EXPN 


PLUS 


INTR 


NINT 


EXOR 


LINKI 


LINK2 


NLNK 


TWIXl 


TWIX2 


SKIP 


NINT 


NINT 


PLUS 


LINKI 


LINKI 


TWIXl 


SUBPROGRAMS CALLED 

102 

103 

103 

BOOKl 

OPl 


105 

BOOK! 

OPl 

OP4 

BOOKl 

OPl 

OPl 

OP2 

OPS 

OPl 

OP4 

BOOKl 

OPl 

OPS 

OP4 

BOOKl 

BOOK2 

OPl 

OPS 

BOOKl 

OPl 

OPS 

OP4 

BOOKl 

OPl 

OP2 

OP4 

BOOKl 

BOOK2 

GEOM 

OP2 

BOOKl 


Table D-l 
(continued) 


























INLINE ROUTINES CALLING STRUCTURE 
(continued) 


CALLING ROUTINE 

INLINE ROUTINES CALLED 

SUBPROGRAMS CALLED 

SPIN 


OPl 

FLIP 


OPl 

PUSH 


OPl 

SCAL 


OPl 

WNDW 


OPl 

PL AC 


OP3 


Table D-1 
(continued) 


















SUBPROGRAMS CALLING STRUCTURE 


CALLING SUBPROGRAM 

SUBPROGRAMS CALLED 

OPl 

104 ORDER2 LOCATN 

105 ORDER3 

ORDER! ORDER4 

OP2 

104 ORDER2 LOCATN 

105 ORDERS 

ORDER! ORDER4 

OP3 

IG4 ORDER2 LOCATN 

105 ORDERS 

ORDER! ORDER4 

OP4 

104 ORDER2 BOOK! 

105 ORDERS BOOK2 

ORDER! ORDER4 LOCATN 

SMASH 

101 101 C 105 

IplA lOlD 

lOlB lOlE 

101 

LOCATN DEPEND 

lOlA 

108 LOCATN DEPEND 

10 IB 

108 

lOlG 

108 

lOlD 


IGIE 

108 

102 

108 

103 

108 

104 

108 DEPEND LOCATN 

105 

i 

I06A 10 6D LOCATN 

I06b 107 DEPEND 

I06C 108 


Table D-2 


D-6 


















SUBPROGRAMS CALLING STRUCTURE 
(Continued) 



CALLING SUBPROGRAM 

10 6 A 

IQ6B 

10 6C 

10 6D 

CALLING SUBPROGRAM 

107 

108 

ORDERl 

ORDER2 

ORDERS 

ORDER4 
ORDER5 
BOOKl 
BOOK2 " 

GEOM 

DEPEND 

LOCATN 


SUBPROGRAMS CALLED 

107 108 

108 

108 

IQ8 DEPEND 


SUBPROGRAMS CALLED 

DEPEND 



108 

LOCATN 

OPl 105 BOOK2 

OP4 BOOKl 



Table D-2 
(Continued) 


D-7 
















APPENDIX E 


DESCRIPTIONS OF PROGRAM VARIABLES 

This appendix presents descriptions of MAP variables. Further 
knowledge of the variables may be gained from the liberal comments found 
in the MAP Source Listing. 

Table E-1 presents each variable name and a brief definition. All 
variables are integer type unless otherwise noted. All are in blank common 
or equivalent to blank common variables unless identified as local. Equiva- 
lence is indicated by "variable = variable," Arrays are listed subscripted 
by their dimension. A subscript of "I" indicates the array dimension may be 
varied for different versions of the program. 



VARIABLES DEFINITIONS 


VARIABLE 

AL 

AP{24) 

BEG(8) 

BEGO(3) 

B1 

B4 

C(15) 

CARD{76) 

CELL 

CHAR(ll) 

CHARAC 

CONI 

CON2 

COUNT(I) 

CR 


DESCRIPTION 

Alternate command input logical unit number: 

AL = NUM1(4). 

Real 10 IB local variable containing line widths 
for type 1 input data format. 

Index to LIST array for the beginning of each list 
segment. 

Index to LIST array for the beginning of each 
ordered list. 

Single blank character. 

Real scalar containing four blank characters. 

Real MAIN local array containing the 4-character 
command names, 

Comriiancl image buffer storing columns 5-80. 

Local 101 E scalar containing a cell identifier froni type 
4 input data. 

Local 10 ()D array containing type 3 character 
design file entry words. 

Number of characters which can be stored in word. 

Real MAIN local variable containing the characters 
"OPTN". 

Real ivLAIN local variable containing the characters 
"MASK". 

Each entry is a count of records input or output for 
the mask occupying file location I. 

Normal comnrand input logical unit number. 

CR = NUMl(l). 

Tabic E-l 
E-2 



VARIABLES DEFINITIONS 
(Continued) 


variable 

D(7) 

DATA(12) 

DATAl - DATA12 

DELIM(36) 

DESTIN 

DIG(ll) 

DIREND 

DXl, DX2, 

DYI, DY2 

END(8) 

END 0(3) 

ENTRY (6) 

FACTl - FACT4 

FIET.D (34) 

FILE (8) 

FPX, FPY 

I 


DESCRIPTION 


Local 103 array containing single characters 
considered delimiters on command records. 

Dummy array for temporary storage of output items; 
DATA(12) = last word of LIST. 

Scalar values for DATA array items: DATAl = 
DATA(l). 

Contains an index to D array for each delimiter 
preceding a valid field on a command image. 

Four-character mask destination name. 

Local I06D array used for storing identifier digits 
for output as typo 3 character definitions. 

Length of directory, i, c. , upper bound for NAME, 
NUMl, NUM2, COUNT, and RECORD arrays. 

Local SMASH scalars used for storing delta x 
and y values during smashing. 

Index to LIST array for the end of each list segment. 

Index to LIST ariuiy for the end of each ordered list. 

Contains the priority of words considered when 
ordered lists arc created. 

Factors used in the formula to calculate ma-jh file 
record addresses. 

Real array containing the valid fields located on a 
command image. 

Contains the file position of the masks associated 
with each LIST segment at any time. 

Local IGIE scalars containing polygon first point 
coordinates from type 4 input data. 

Widely used local dummy scalar variable. 

Table E-1 
(Continued) 


VARIABLES 

IN 

INPl 

INP2 

ITEMS 

J 

K 

L 

LARGE 

LAST 

LEND 
LENGTH 
LIST (I) 
LOC(9) 

LOCO(3) 

LP 

LPX, LPY 


M 

MACHIN 


VARIABLES DEFINITIONS 
(Continued) 

DESCRIPTION 

Graphic input data logical unit number: IN = NUM1(2) 
File position of primary input mask. 

File position of secondary input mask. 

Number of six-word items per list segment. 

Widely used local dummy scalar variable. 

Widely used local dummy scalar variable. 

Widely used local dummy scalar variable. 

Largest positive integer value. 

Four-character name of the previously processed 
command; LAST = NAME(2). 

Length of COMMON from BEG(l) through DATA12, 

Record length in words for special list output. 

Main list for processing mask data. 

Index to LIST array for the current processing 
location for each list segment. 

Index to LIST array for the current processing 
location for each ordered list. 

Printer formatted output logical unit number; 

LP = NUM1(3). 

Local 10 IE scalars containing polygon last point 
coordinates from type 4 input data. 

Widely used local dummy scalar variable. 

Number of bits per word. 

Table E-1 
(Continued) 


VARIABLES 

MASK 

MAX1M(6) 

MAXI - MAX6 
MINIM(6) 

MINI ■ MIN6 

MODE 

MODEl 

MODE2 

MODES 

MODE4 

MODES 

MODE6 

MODE? 

MODES 

MU 

N 


VARIABLES DEFINITIONS 
(continued) 

DESCRIPTION 

Four-character mask name. 

Maximvim specified dimensions in the x, y, 
length, width, radial, or any directions; 
MAXIM(1) = MAXI. 

Scalar values for MAXIM array items. 

Minimum specified dimensions in the x, y, 
length, width, radial, or all directions: 

MINlM(l) = MINI. 

Scalar values for MINIM array items. 

General processing mode. 

Processing mode for subroutines lOl, lOlA, lOlB, 
10 1C, rOlD, and 101 E. 

Processing mode for subroutine 102, 

Processing mode for subroutine 103, 

Processing mode for subroutine 10 4. 

Processing mode for subroutine 105. 

Processing mode for subroutines I06A, I06B, 
I06C, and ro6i>. 

Processing mode for subroutine 107, 

Processing mode for subroutine 108, 

Logical unit number for the mask storage file. 

Widely used local dummy scalar variable. 

Table E-1 
(continued) 

E-5 


c 

VARIABLES 

NAME(I) 

NEXT 

NUMl(I) 

NUM2(I) 

NXT 

0 ( 22 ) 

g OPT10N(30) 

OPTNl 

OPTN2 

OPTN3 

OPTN4 

OPTN5 

OPTN6 

OR 

ORD 

ORX, ORY 
OUTl 

< 


VARIABLES DEFINITIONS 
(continued) 

DESCRIPTION 

Real array where each entry is the 4-character 
name for the mask occupying file location I. 

Indicator of additional steps in a string of pro- 
cesses. 

Each entry contains the greatest primary identi- 
fier of the mask occupying file position 1. 

Each entry contains the greatest secondary 
identifier of the mask occupying file position I. 

ORDER2, ORDERS, GEOM, and OP4 local storage 
of the scalar NEXT. 

Real MAIN local array containing the 4-character 
OPER command names. 

Array encompassing a group of scalars; 

OPTION(l) = OPTNl, OPTION(30) = SEQlO. 

Print option value. 

Alternate input unit option. 

Data mode option. 

Scale factor option. 

Offset override option. 

Smash factor option. 

Value indicating list ordering priority pattern. 
Ordered list segment length. 

Local 101 E scalars containing cell origin coordinates 
from type 4 input data. 

Mask output file position. 

Table E- 1 
(Continued) 


E-6 


VARIABLES 

OUT2 

OUTS 

OUT4 

OUTS 

P 

PARAM(8) 

PASS 

PATi 

PAT2 

PATS - PATS 
POINT(l2) 

P0INT{4) 

POINT(4) 

PI - P4 

PI - P6 

P5 - P8 

Q 

R 



VARIABLES DEFINITIONS 
(continued) 


DESCRIPTION 

Ordered mask output file position. 

Special list output logical unit. 

Printed output logical unit. 

Mask output file position. 

Widely used local dummy scalar variable. 

Real local 101 B array storing parameters of 
type 1 input data prior to smashing. 

Pass counter for multiple pass processes: 
PASS = NUM2(2). 


Path code for overall operations. 

Path code for a specific operation step. 
Miscellaneous path flags. 


Real local lOlB array storing type 1 input data 
coordinates prior to smashing. 


Real local lOlC array storing type 2 input data 
coordinaC'es prior to smashing. 

Real local 10 ID array storing type 3 input data 
coordinates prior to smashing. 

Real local lOlE scalars storing type 4 input data 
coordinates prior to smashing. 


Real local lOlD scalars storing type 3 input data 
coordinates prior to smashing. 

Real local lOl C array storing type 2 input data 
coordinates prior to smashing. 


Widely used local dummy scalar variable. 


Widely used local dummy scalar variable. 



Table E-1 
(Continued) 


VARIABLES DEFINITIONS 
(Continued) 


•VARIABLES 
REALl - REAL2 

RECORD(T) 

S(35) 

S{36) 

SCALE 

SEG 

SEGI 

SEG2 

SEG3 

SEG4 

SEG5 

SEQl 

SEQ2 

SEQ3 

SEQ4 

SEQ5 

SEQ6 

SEQ7 

SFQ8 


DESCRIPTION 

Real scalars local to OPl and OP4 used to store 
floating point numbers resulting from mathematical 
operations* 

Each entry contains a record count for the mask 
occupying file position L 

Real MAIN local array containing the 4- character 
SPEC command forms. 

Local I06D array containing default information for 
the first record of a design file. 

Real local lOlE scalar storing type 4 input data scale, 

General list segment number. 

Primary input mask List segment number. 

Secondary input mask list segment number. 

Unordered mask output segment number. 

Ordered mask output segment number. 

Residue list segment number. 

Preliminary identifier action code. 

Final primary identifier action code. 

Final secondary identifier action code. 

Index to LIST array of identifiei-s to be considered 
for modification. 

Primary identifier incrementing value. 

Secondary identifier incrementing value. 

Previous r'rima.ry identifier replaced. 

Previous secondary identifier replaced. 

Table E-1 
(Continued) 

E-8 


VARIABLE S 

SEQ9 

SEQIO 

SETEND 

SETUP{I) 

SETl - SETS 

SKIP 

SPEC{5) 

SPECl 

SPEC2 

SPECS 

SPEC4 

SPECS 

START 

STAT 

STATE 

STATUS{8) 

STRING(3) 

T(10) 


VARIABLES DEFINITIONS 
(Continued) 

DESCRIPTION 

Previous primary replacement identifier. 

Previous secondary replacement identifier. 

Upper bound on SETUP array. 

Array used to store information for multiple step 
processes. 

Scalar values for first five entries of SETUP arrays; 
SETl - SETUP(l). 

Record skip flag for reading mask input data. 

Array form of specification codes: SPEC(l) = SPECl 
Printed output specification code. 

Temporary storage specification code. 

Identifier assignment specification code. 

Minimum dimensional boundary specification code. 
Maximum dimensional boundary specification code. 
Address of first entry in an ordered list. 

General I/O status flag. 

Real 107 local array coritai ling ”ON" and ’'OFF" for 
Boolean printout. 

Contains the I/O status of each list segment. 

Real 103 local array into which valid field command 
characters are encoded. 

Real MAIM local array containing the 4-character 
names of operation options. 





Table E-1 
(Continued) 


K-9 


VARIABLES DEFINITIONS 
(Continued) 


VARIABLES 

TEMP(12) 

TEST 

TIME 

TYPE 
Tl, T2 

T1 - T6 

UNIT 
VALUE (6) 

VALl - VAL6 

WORDS 

X 

Z(ll) 


DESCRIPTION 


103 local array used to temporarily store 
command image characters. 

Indicator for dimensional testing steps in a process 
string. 

DEPEND local real scalar storing internal clock 
time. 

Real 4- character command type. 

Local lOlE scalars containing characters identifying 
valid type 4 format input records. 

Real 10 IB local scalars containing four characters 
identifying valid type 1 format input records. 

Mask file position indicator. 

Miscellaneous values storage: VALUE(3) - 
VALUE{6) contain coordinates of the permissible 
window of masks for the run: VALUE(l) = VALl. 

Scalar names for VALUE array items. 

Number of words in a list segment. 

Local lOlC scalar containing the character "X". 

Local 103 array containing the characters "0" - 
"9" and 


Table E-1 
(Continued) 


E-10 


OOVEfINMtNT ERINTtNQ OFFICE tE7E~641-2E5/1* BEGION NO. 4 


