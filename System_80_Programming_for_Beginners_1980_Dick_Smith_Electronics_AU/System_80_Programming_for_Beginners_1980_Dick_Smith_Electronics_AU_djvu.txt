/y/tem 




pROGRflmminG for BEGinnER/ 



TABLE OF CONTENTS 




Preface 



page 



Introduction 



Chapter 1 Active Commands and Text Editing 
Chapter 2 Basic Programming 
Chapter 3 More About Programming 



13 



17 



1 



This manual is designed as an introduction to computer programming for beginners 
knowing little or nothing about computers. All of the main computer programming 
concepts and techniques will be discussed in detail, and further explained with plenty of real 
life examples. 



No matter what you now think a computer is like , and what it does, by the time you 
finish reading this manual, you will find out a computer is nothing but a man-made machine 
- very powerful of course. And programming is nothing more than implementing a 
sequence of logical steps into instructions that the computer can understand. With the help 
of our BASIC Manual, you can easily make the System 80 work for you as you wish. 



INTRODUCTION 



What is computer programming? Programming is the method used to analyze a problem, 
translate the problem into computer language, and let the computer to solve the problem. 

It is obvious that the problem solving ability is limited by the followings: 

1 . Your ability to analyze a problem. 

2. The capability of the programming language you use. 

3. The power and facilities of the computer itself. 

1 . THE PROBLEM ITSELF 

To be more precise, if you know nothing about space missiles, it is very unlikely that 
you can implement a space missile simulation program that is meaningful to an 
expert. Unless an expert is patient enough to explain all the factors and variables 
involved in space missiles to you with his spare time! 

2. THE PROGRAMMING LANGUAGE ITSELF 

The functions and features of a programming language reflect its capability. Some are 
devoted to business usage, some are for scientific computation, some are for general 
purpose, of course. For example, the Extended Basic in our System 80 is one of 
the most popular general purpose computer languages available. 

3. THE COMPUTER ITSELF 

Finally, the speed and architecture of the computer itself are very important. If your 
computer is twice as fast as others, that means you can finish the job in half the time 
other people have spent. Futhermore, ikthe memory size of your computer is relative- 
ly large, you can write longer, more powerful programs. 




IF A= B 

THEN A = A-1 



LD A,3CH 

CMP B 

JMP NZ 




Suppose we want to solve the following problem: 



Example 1 



1 . David has $ 1 in his pocket. 

2. He took a bus to the mall, the fare is 50^, 

3. He bought an ice cream cone for 89tf. 

4. He played 5 games of pin ball, at 25 tf per game 

5. He bought a football fan cap for $3.99. 

6. He took a bus back home; the fare is 5(V. 



Problem 1 : How much money does David has when he arrives home? 

If the above events are implemented into our Extended Basic language, we may create the 
following program: 



$10 



Program I 



10 D 

28 D 
S6 D 

49 D 

50 D 
66 D 



10 

D • 
D 

D • 
D • 
E> • 



■ 0.5 

- 0. 89 

■ a 25 * 5 

• 2.99 

■ 9.5 

70 PRINT "DAVID HAS $"i D 
80 END .REM 



:REM 
: REM 
: REM 

:REM 
;REM 
; REM 



1. -DAVID HRS $1® 

2. MINUS BUS FARE 56 CENTS 

MINUS ICE CREAM COST 89 CENTS 

MINUS 5 GAMES OF PIN BALL, 25 CENTS 




3. 

4. 

5. 



MINUS CAP COST S3. 99 



MINUS BUS FARE 50 CENTS 
:REM PRINT OUT THE AMOUNT DAVID HAS 
END OF PR0i3RfiM 





25$ 



Every time you RUN this program, the result will be DAVID HAS $ 2. 87 

Actually, Program 1 can be reduced to the program below, however, it is much harder to 
follow. 



Program 2 

16 PRINT "DflVID HftS IM0-8. 5-0. 89-6. 25*5-2. 99-0. 5 
28 END 

The function of a computer is not limited to do the problem described in program 1. 
These calculations can be handled by a simple calculator or even by a small child. In the 
next few chapters, we will introduce more programming concepts, together with some 
powerful programs, which can solve some really interesting and far more difficult problems. 








ACTIVE COMMANDS AND TEXT EDITING 



The main purpose of Active Commands is to order the computer to do some work 
internally and externally. 

Whenever a READY message appears on the screen (see User's Manual for system 
start up and operation), you are in the Active Command level and the computer is waiting 
for your command. It will wait forever until you enter some instructions throught the 
keyboard! 

Some of the valid Active Commands are: 



AUTO 

DELETE 
EDIT 
LIST 
RUN 



turn on automatic line numbering 
delete program line 

Edit program line . 
list all program lines 
Execute the program. 



Now let us try to enter the following underlined statements into the computer 
through the keyboard. 



Program 3 



REflDV 
>RUTO 
18 PRINT "1W FIRST PROGRAM" f NEW LINE 



NEW LINE 



29 FOR ft « 1 TO 1& 
JB PRINT R. f\ * R • 



NEW LINE i 



49 NEXT ft NEW LINE 



NEW LINE I 



58 ENC> NEW LINE 



68 - I BREAK 



At this point, check for typing errors. For example, if you made a mistake in line 30, 
then you must retype the underlined portion: 



READY 

3:6 PRINT fl, fl * R 



NEW LINE 



Then line 30 will have the new edited text. 

In the next chapter, we will discuss more efficient Text Editing techniques. 

If everything is set, we can run the program and see what happens. 



GET S£T RM t 



READY 




>RUN 


1 NEW LINE 1 


MY FIR 


ST PROGRAM 


1 


1 


2 


4 


3 


3 


4 


16 


5 


25 


6 


2:6 


7 


49 


s 


64 


9 


81 


10 


100 




LIST 



f 



READY 



Within the entire operation above, only two commands are used, AUTO and RUN. 
The other parts are just program text and output. 



Now type in LIST and press the NEW LINE! key. 



REfiDV 




X.IST 


NEW LINE 


10 PRINT 


"MY FIRST PROGRRM" 


20 FOR fi 


= 1 TO 10 


30 PRINT 


fl. R * ft 


48 NEXT 


R ■ 


59 END 




READY 


- 








The entire program will be displayed on the screen by using the LIST command. 
Now do you have any idea about what commands are used for in computers? 
There are many such Active Commands available for the System 80. Please refer 
to the BASIC MANUAL for more detail. 



8 



TEXT EDITING 

We always have the inclination to make mistakes. It may not be too bad, as long as we 
can detect, and correct our mistakes fast. 

The function of Text Editing in the System 80 is to allow the users to input, correct 
and update their programs in the most efficient manner possible. 

Some of the Editing features are: 



L 


(list) 


I 


(insert) 


C 


(change) 


D 


(delete) 



For the complete set of Editing features, please refer to the BASIC Manual, 
Chapter 2. 

Now let us go back to Program 3 . 

READY 

>LIST i NEW LINE 



10 PRINT "MV FIRST PROGRAM '« 
20 FOR fl = i TO 10 

3© PRINT ft, ft * ft 

49 NEXT ft 
56 END 
READY' 
> 

If, for example, you want to change the text of line 30 : change A * A to A * 2, 
All you have to do is the following: 

>REftDV 



>EDIT 2& NEW LINE 
10- 



Now hit the L key, the entire line will be displayed on the screen 



20 PRINT fl> R * fl 
26- 



CHANGE /}* A To A*Z 



Typing the [SPACE BAR once, the cursor will move a space to the right. Now, let us 
move the cursor to the 1 2th position. 

30 PRINT fl, fl * _ 

Then you hit the[C]key followed by 2. 



s& PRINT A A *[Cl2 



Once you hit the 1 NEW LINE 1 key, the computer will record all the changes you 
made, and return to the Active Command level. 



39 print a a * 2 



NEW LINE 



This time if you run the program, the output should be the value of A times two, 
instead of the squares of A. (A has the value of 1 to 10) 



Let us list the program once more. 

XIST 

IS PRINT "MV FIRST PROGRAM" 

28 FOR fl - 1 TO 10 

M PRINT fl, fl * 2 

40 NEXT fl 

50 END 

REflDV 

> 

If we want to change line 1 a little. 



10 



> EDIT 18 

10 [L] 



NEWTINE 



Line 10 will be displayed on the screen: 

10 PRINT "MY FIRST PROGRAM" 

10- 



Now type in 7 followed by hitting the [SPACE BAR 



10 PRINT "MY FIRST PROGRAM" 

ie 



SPACE BAR 



/I 



MY First program 



M 



The display will become 

16 PRINT "MY FIRST PROGRAM" 
18 PRINT 

Hit theUkey followed by **. 

16 PRINT "MY FIRST PROGRAM" 
10 PRINT " m **. . 



If you hit the I NEW LINEl key, the display should become 



16 PRINT "MY FIRST PROGRAM" 
19 PRINT "** MY FIRST PROGRAM" 

Now, you should have some ideas about text editing. Suppose you don't want other 
people to know this is your first program. So you want to change the program again! 



> EDIT 10 
19 [Ll 



NEW LINE 



The display should be 



10 PRINT "**»MY FIRST PROGRAM" 

10- 



11 



Move the cursor to the 13th position. 

10 PRINT "** MV FIRST PROGRAM" 
10 PRINT "** MY _ 

Type in 6 followed by D 

16 PRINT "** MV FIRST PROGRAM" 

16 PRINT '"** MV! FIRST! **MY ^&7^ m&AfJ " 

Everything between the two! marks will be deleted. 



Now you hit the NEW LINE [ key. 



16 PRINT "** MV FIRST PROGRAM" 
16 PRINT "** MV! FIRST! PROGRAM" 

Now you are in the Active Command level again, so you can list line 10, 



>LIST 10 NEW LINE 



10 PRINT "** MV 'PROGRAM" 

That means, when you run the program, the heading will be "** MY PROGRAM", 
instrad of "** MY FIRST PROGRAM". 

The next step is to r.ad the Basic Manual, and get familiar with other Active 
Commands and Editing features. 



12 



BASIC PROGRAMMING 



In this chapter we will discuss how to analyze a problem and how to implement it 
into Extended Basic — our future language. 

Before we go further, please study example 1 in the Introduction. 

Now let us try to analyze the procedure required to compute the area and 
circumference of a circle with radius R. 

The area of a circle can be found by using the formula A = T R?. And the 
circumference can be determined by the relationship, C - 2TrR. 

The diagram shown is called a flow-chart. The direction of flow is indicated by the 
arrows. The START and END indicates the starting and finishing point of the program, 
respectively. Other operations include INPUT, OUTPUT, and ASSIGNMENT, etc. 

The flow-chart shown will ask for an input, R. With R as the radius, compute the area 
(IT R2 ), and the circumference (2 irR). Then the print outs will be the values of the radius, 
the area, and the circumference. 

Now we can implement the analyzed problem into Extended Basic, and enter the 
program into the computer. 



f START J 



I INPUT R / 



A = 3.14I6 *R* R 



C=2*3.1416 -R 



L 



PRINT R 



z 



7 



PRINT A 



7 



/ PRINT C / 
T END J 



n 



R 



R 



19 INPUT "ENTER THE RADIUS 

29 ft = 3. 1416 * R * R 

39 C = 2 * 3. 1416 * R 

46 PRINT "THE RADIUS;" 

50 PRINT "THE AREA IS; 

66 PRINT "THE CIRCUMFERENCE IS:"; 

7@ END 

READV 

>RUN 



FIG. 3. 1 



n 



fi 





13 



ENTER THE RADIUS ? 

THE RADIUS: 5 

THE AREA IS: 78:54. 

THE CIRCUMFERENCE TC - 
READY 



(for exam ple, you type in 5 followed by 
hitting the lNEW LINEl kev.) 



I-, 



21. 416 



If we want to try another number, we must RUN the program again. Very 
inconvenient, right? 

Let us change the flow chart a little in order to solve this problem. 

As the flow chart shows, everytime the computer finished printing the value of C, 
it goes back to the beginning of the chart, asks for the value of R, and loops round and 
round forever. 

Again, we can translate the flow chart's logic into Extended Basic. 

10 INPUT "ENTER THE RADIUS "; R 
26 fl = 3. 1416 * R *. R 

20 C - 2 * 3. 1416 * R 

46 PRINT "THE RADIUS:"; R 

56 PRINT "THE AREA IS:"; A 

60 PRINT "THE CIRCUMFERENCE IS:"; C 

70 GOTO. 10 

80 END 

READY - 

. >RUN 

ENTER THE RADIUS ? 7 . 
THE RADIUS; 7 
THE AREA IS: 153: 938 
THE CIRCUMFERENCE IS: 415824 
ENTER THE RADIUS ? 19 
THE RADIUS: 16 

THE AREA IS: 314.16 

THE CIRCUMFERENCE IS. 62.822 

ENTER THE RADIUS ?- 



c 



START 



) 



/ INPUT R / 






A = 3.1416*R*R 






C = 2*3.1416*R 







L 



PRINT 



U 



L 



PRINT A 



L 



7 



PRINT C 



7 



C 



i 



END 



) 



The computer repeats in these sequence, until you hit the | BREAK I key which 
interrupts the further execution of the program. 



FIG 3.2 



14 



(It is not a good programming practice to use the 1BREAKI key, because it forces the 
unnatural termination of a programs.) 

Let us try something more logical. Again, we modify the flow chart a little. 

Don't panic ! Try to compare FIG. 3.3 with FIG. 3.1 and 3.2. There is not much 
changed, right? 

The revised program in Extended Basic should be: 

18 INPUT "ENTER THE RADIUS", R 
15 IF R • <- 8 THEN END 

26 A = 3. 1416 + R * R 

28 C =■ 2 * 2. 1416 * R 

40 PRINT "THE RADIUS. ", R 

50 PRINT "THE RRER IS."; A 

68 PRWT "THE CIRCUMFERENCE IS.", C 

70 GOTO 10 

This program accepts the value of R, if R is less than or equal to (" < = ") zero, then 
stops the program. Otherwise, it computes the area and circumference of the circle, prints 
out the values, goes back to line 10, and ask for another value of R. 

Actually, there are some more "human oriented" methods to terminate a program, 
other than inputting a code number. Let us go through the program below. 

IS INPUT "ENTER THE RADIUS"; R 

20 A - 2. 1416 * R * R 

30 C = 2 * % 1416 * R 

40 PRINT "THE RADIUS:"; R 

50 PRINT "THE ftREfl IS:"; ft 

60 ^RINT "THE CIRCUMFERENCE IS:"; C 

?S PRINT 

80 PRINT "DO YOU WANT TO CONTINUE ?" 

9fc INPUT "PLEfiSE ENTER 'VES' OR 'NO' ONLV", 

160 IF ft$ = "VES" GOTO 19 

110 IF ft* « "NO" THEN END 

120 GOTO 80 





fl$ 



FIG. 3.3 





15 



Just like before, the program asks for the radius, then computes the area and 
circumference of the circle. It then asks if you want to continue or not. Enter "YES" or 
"NO". Don't be scared by the $ sign in A$ in line 90. All it does is to inform the computer 
that the input should be handled as a string (a group of characters or symbols), instead of 
digits (figures). For detailed explanation about string variables, please refer to the BASIC 
Manual. 

Now, try to understand the flow-chart shown : 

Try to run the program : 

READY 
>RUN 

ENTER THE RADIUS ? 8 
THE RADIUS; 8 

THE AREA IS: 261.062 

THE CIRCUMFERENCE IS; 58.2656 

DO VOU WANT TO CONTINUE ? 

PLEASE ENTER 'VES' OR 'NO' ONLV ?YES 

ENTER THE RADIUS ? 12 

THE RADIUS; 12 

THE AREA IS; 452.29 

THE CIRCUMFERENCE IS. 75. 3984 

DO VOU WANT TO CONTINUE ? 

PLEASE ENTER y VES' OR 'NO' ONLV ?N 

DO VOU WANT TO CONTINUE ? 

PLEASE ENTER "VES r OR 'NO' ONLV ?N0 

READY 



f START j 



L 



INPUT R 



7 



A' = 3.1416*R*R 



C = 2*3.1416*R 



/ PRINT R / 



L 



PRINT A 



Z 



7 



PRINT C 



L 



7 



PRINT 
DO VOU WANT TO CONTINUE 



"2J 



Now, do you have a better idea how one single statement can change the capability of 
a program? There are many powerful statements in our Basic Manual. Be sure you read 
them. 




FIG. 3.4 



16 



MORE ABOUT PROGRAMMING 




In the last chapter, we introduced the basic computer programming concepts. Now 
we are ready to move into more advanced and useful areas. 

Did you ever play games with a computer? If yes, do you know how the computer 
shuffles cards when you play Blackjack; or how to roll dice to determine your next move in 
craps? 

In the System 80, there is a built-in function - RND (n) — that generates random 
numbers. 

(Note: n is the upper bound of the numbers to be generated. Please refer to the built-in 
functions in the Basic Manual). 

With the RND (n) function, the computer can automatically and randomly shuffle 
cards, roll die, etc. Furthermore, in order to ensure the numbers generated are at random 
after each power up, the function RANDOM should be used. 

Example 



10 RRNDOM 

20 N = RND <6) : PRINT 

36 PRINT "THE OUTCOME IS:"; N 

48 INPUT *"DQ VOU WfiNT TO CONTINUE ( YES/NO > M ;fl$ 
50 IF fi* * "YES" OR fi$ = "V" GOTO 20 
60 IF m = H N0" OR ft* = "N" THEN END 
76 GOTO 40 

READY 

>RUN 

THE OUTCOME IS: 4 

do vou wrnt to continue <ves/no> ? yes 

THE OUTCOME IS: 4 

DO YOU WANT TO CONTINUE <YES/N0> ? Y 





17 



THE OUTCOME IS. 6 

DO VOU WANT TO CONTINUE (VES/NO) ? NN 

DO VOU WANT TO CONTINUE < VES/NO) ? NO 



The flow chart for this program should be : 

The program generates a random number from 1 to 6 (simulating the faces of die), 
prints out the number, then asks the operator whether he or she wants to continue. If the 
input is "YES" or "Y" then the computer repeats the process, if the input is "NO" or "N" 
then the program ends. However, if the input is neither "YES" nor "NO", the computer, 
looks for a valid and acceptable response, asks repeatedly if the player wants to continue . 



Besides of the random number function, there are many many useful built-in 
functions that help you to solve a wide range of problems simply by using a function call. 

One more example 

10 FOR fl = 1 TO 10 STEP 1 

20 PRINT fi, SQR Cm 

39 NEXT H 

46 END 

This program prints out the square root of the values from 1 to 10. The initial value 
of A is 1 ; then . in line 20, 1 and the square root of 1 are printed. A is incremented by 1 in 
line 30, and the computer checks if A is equal to 10, if not, go back to line 10. The 
sequence continues until A is equal to 10. 

From time to time, you may encounter strings (series of numbers and characters) 
instead ol just figures. In other words, you need some knowledge in string manipulation. 

For example, you are handling the shipping job of a company which is using code 
names that contain both letters and numbers for its orders. 



The format is: 



AB1234S001 
ITEMUO. STORE NO 



( START J 



RANDOM 



r* 



= RND<6) 



/ PRiNTN / 



z 



PRINT "CONTINUE?" 



TRUE 





JT 




FfG. 3.5 



FALSE 



? 




18 



The first 6 characters are the item number code, while the last 4 characters are the 
store number code. 

Suppose there are 20 stores. Stores no. 1 to 7 located in city A; stores no. 8 to 20 
located in city B. Therefore, it is profitable to pool the orders in store no. 1 to 7 together, 
and store no. 8 to 20 together for cheaper shipping charges. 

Now what we are going to do is using the computer to check if the store no. is less than 
eight, then we add the orders to the shipment to city A. Otherwise, we add the orders to the 
shipment to city B\ 

Try to follow this program. 



16 INPUT "ENTER THE CODE NAME'S CN* 

26 IN* = LEFT*. <CN*,c.) .REM FIRST 6 LETTERS = ITEM NO. 

30 SN* s RIGHT* (CN$,3:> .REM LAST 3 LETTERS * STORE NO. 

40 SN = VflL <SN*> .REN CHANGE STRING VALUE TO fiRITH. 

50 INPUT "ENTER THE ORDER QUANTITY"; Q " 

60 IF SN > 8 THEN GOSUB 1009 ELSE QOSUB 2960 



VALUE 



This is not a complete program, because you need some operations (program statements) in 
subroutines 1 000 and 2000 

Note: please refer to the BASIC manual for the usage of LEFTS, RIGHTS, and VAL 
functions. 



Now, are you ready to step into arrays? It is an interesting section, don't miss it. 
Suppose we have a set of 24 numbers. 



ACHY 





100, 


110, 


120, 


130, 


140, 


150, 


160, 


170, 


180, 


190, 


200, 


210, 


220, 


230, 


240, 


250, 


260, 


270, 


280, 


290, 


300, 


310, 


320, 


330, 





















There are many ways we can refer to a particular number in this set. For example, we 
can say the 18th one is 270 which can also be referred as the 7th one on row 2. 



19 



In the case of a computer, we can assign each of these numbers to a variable. Such as: 

16 fll = 160 

28 R2 = 119 
30 R3 = 129 

48 A4 = 130 

50 m = 140 



So that we can reference each of them easily! 

But if we have more numbers, we may run out of variables. 

A better way to handle a set of numbers or strings is to use arrays. 

For these 24 numbers, we may use a single dimension array: 

10 CLEAR 208 :REM CLEAR 266 BYTES OF MEMORY 

20 DIM fl<22) :REM A 24 ELEMENT ARRAY A< 9 TO 23) 

In a program, we may assign : 

IG A<u> * 106 
20 fl(l) = 110 
26 R<2> = 128 

In order to reference 270 in the number list, we may just say 

50 PRINT fl <17) :REM PRINT THE 18TH ELEMENT OF THE ARRAY 
100 A<17) a fi(l?> + 160 :REM ADD 100 TO THE 1STH ELEMENT 

Isn't it simple? 

If we divide these 24 numbers into 3 groups, with 8 elements in each group. We may 

use a two dimensional array: 

26 DIM B <2,?> :REM fl 2 X 8 TWO DIMENSIONAL ARRAY 
Then the numbers may be arranged like: 



20 



ROW 


100 


110 


120 


130 


140 


150 


160 


170 


ROW 1 


180 


190 


200 


210 


220 


230 


240 


250 


ROW 2 


260 


270 


280 


290 


300 


310 


320 


330 


COLUMN 





1 


2 


3 


4 


5 


6 


7 



This time if we refer to 270, we should say: 

160 PRINT 6<2,1> :REM PRINT THE ELEMENT AT ROW 2, COLUMN 1 
230 F = BC2.1) + 19 :REM RDD 18 TO THE ELEMENT 

Similarity, if we refer to 160, we should say 



216 PRINT B<0,6> 



:REM PRINT THE ELEMENT AT ROW a COLUMN 6 



Let us go one step further, with these 24 numbers, we may divide them into even 
smaller groups. Say 4 pages of 2 x 3 arrays. In other words, that is a three dimensional 

array: 



:@ DIM E-3,1,2) 



:REM fi 24 ELEMENTS ARRAY E < 4 X 2 X 3 ) 



PAGE0 



ROW0 
ROW1 



100 110 120 
130 140 150 



COLUMN 1 



PAGE 1 



160 170 180 
190 200 210 



PAGE 2 



220 230 240 
250 260 270 



PAGE 3 



280 290 300 
310 320 330 



This time, if we refer to 270 again, we should say 



76 PRINT E<2,±,2> 



:REM PRINT THE ELEMENT ON PAGE 2, ROW 1, C0L0MN 2 



21 



If we refer to 200, we should mention E ( 1, 1 , 1). 
Try to follow this program: 

16 DIM EC3,1,2) :REM E IS R 4X2X3 RRRflV 

2Q FOR P = £i TO 2 :REM LOOP TO NEXT P 4 TIMES 

K0 FOR R = 6 TO I ,REM LOOP TO NEXT R 2 TIMES 

48 FOR C * 9 TO 2 :REM LOOP TO NEXT C 3 TIMES 

58 INPUT "ENTER H NUMBER"; E<P,R,C> :REM INPUT AN ELEMENT 

68 NEXT C 

70 NEXT R 

88 NEXT P 

96 FOR P = TO % 

100 FOR R = 6 TO 1 

110 FOR C = 8 TO 2 

120 PRINT E<P,R,C)i :REM PRINT EACH ELEMENT 

130 NEXT C 

140 PRINT 

158 NEXT R 

160 PRINT 

176 NEXT P 

ISO END 

This program prints those 4 pages of numbers, if the inputs are in the correct 
sequence . 

This is the basic concept of arrays, now you can do your own programming ; the only 
limitation is your imagination, not your computer. 



22 



