© 


REPORT DOCUMENTATION PAGE 


Form Approved 
OPM No. 0704-0188 


Publcr«ponlngbutdw\(oitfil*colKltonolMoniMllonkMlnHMdloiwMigi1 howptr iMponM. lndudlng«w(fM(or mMnaMrueUam, MwcMngwMngdaaioinMgahMlnginil inairtiiningtwdaa 
nMdad. and raidtaring tha colactlon a( Momiatlon. Sand eomnianla itgaidkig mb bwdan atllmala or any odw aapao et tfib ooltclion of Mbmialion. indudkig auggaa t iona for rtducing dib burdan. to Wastangfon 
Haadquanaia Sarvtca, Dbactorala for Moimalion Oparadona and nipoib. f21S Jaffanon Oavb Higharay. SUM 1200. Aifnglon. VA22202-4302. and to tM Offica of Moimaion and RagUalory Altaira. Odloa of 
ManagamantandBudgal. Wabtingun. DC 20603. 


1. AGENCY USE ONLY (Leave Blank) 


4. TITLE AND SUBTITLE 


2. REPORT DATE 


3. REPORT TYPE AND DATES COVERED 


Final; 25 Sept 92 


5. FUNDING NUMBERS 


Validation Summary Report: Siemens Nixdorf Informationssysteme AG Ada (SINIX) 
V4.1, Siemens Nixdorf RM600 under SINIX V5.41 (Host & Target). 92092211.11276 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


AD-A259 826 


7. PERFORMING ORGANIZATION NAME(S) AND AOORESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
BkJg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 




B. rcnrORMING ORGANIZATION 
REPORT NUMBER 

lABG-VSR 110 


9. SP0NS0RING440NIT0RING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY 


12a, DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


10. SPONSORINGA/IONITORING AGENCY 
REPORT NUMBER 



12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Siemens Nixdorf Informationssysteme AG Ada (SINIX) V4.1, Siemens Nixdorf RM600 under SINIX V5.41 (Host & Target), 
ACVC 1.11. 


14. SUBJECT TERMS 


Ada programming language. Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 




OF REPORT 

UNCLASSIFIED 


18TS1CURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCUSSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. umitation of abstract 


NSN 7540-01-2S0-550 


Standard Form 298, (Rev 2-89) 
Prescribed by ANSI Std 239-128 

















XVF Control Nunbor: lABG-VSR 110 
SoptWDbor 25, 1992 


Ada COMPILER 
VALXDAXXOlt SQIOttRT RBPORXt 
Cortifieata Muaibar: 920922X1.11276 
Slaaons Hixdorf XnfoxaationssyatOM AO 
Ada (SXmZ) VA.l 

SlaMiia Mlxderf RM600 imdar IXIIXZ VS.61 
■eat and Target 


niTO 



Prepared By: 
lABG mbH, Abt. ZTE 
Elnsteinatr. 20 
W-8012 Ottobrunn 
Gemany 


C*rtlficat« l 0 forMtion 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 22, 1992. 

Compiler Name and Version: Ada (8XNXX) V4.1 

Host Computer System: Siemens Mixdorf m600 under SXNXX Version VS .41 

Target Computer System: Same as Host 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
92092211.11276 is awarded to Si«nens Nixdorf AG. This certificate 
expires 24 months after ANSI approval of ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 



lABG, Abt. ITE 
Michael Tonndorf 
Einsteinstr. 20 


DTIC QDALir^ il'JBFEofED 3 


W-8012 Ottobrunn 
Germany 


Ada VdliQMwh Organization 

Director, V 5 »mputer & Software Engineering Division 
Institute ^r Defense Analyses 
Alexandria VA 22311 



Dr. John Solomond, Director 


Department of Defense 
Washington DC 20301 



93-01432 

MHIhIHIII ^ 





Declaration of Conformance 


The following declaration of conformance was supplied by the customer. 


Declaration of conformance 

Customer: 

Certificate Awardee: 

Ada Validation Facility: 

AC VC Version: 


Siemens Nixdorf Informationssysteme AG 
Siemens Nixdorf Informationssysteme AG 
lABG mbH 
1.11 


Ada Implementation: 

Ada Compiler Name and Version: Ada (SINIX) V4.1 

Host Computer System: Siemens Nixdorf RM600 under 

• ’ . •. i .» SINIX Version V5.41 

Target Odnrljjufbr System: Same as Host Computer System 

• V 


Declaration: 


I, the undersigned, declare that I have no knowledge of deliberate deviations 
from the Ada Language Standard ANSI/MIL-STD-ISISA ISO 8652-1987 in the 
implementation listed above. 



Customer Signature 

CCiK/TAi 


Date 




\ 


TABLE OP CONTENTS 

CHAPTER 1 INTRODUCTION 

1.1 USE OP THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REPERENCES.1-1 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEPINITION OP TERMS.1-2 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIPICATIONS. 2-3 

CHAPTER 3 PROCESSING INPORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OP TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX P OP THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


The Ada implenientation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Coapiler Validation Capability (ACVC). This Validation Sumnary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (S U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the s\ibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada no 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures. Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compil er Validation Capability User's Guide. 21 June 1989. 


1-1 . 



INTRODUCTION 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E teats are executeible. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECX_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, thft largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implenwntation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 


Ada Compiler 
Validation 
Capability 
(ACVC) 


The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 


Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 


1-2 




INTRODUCTION 


Ada Joint 

Program 
Offica (AJPO) 

Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliance of 
an Ada 

Implementation 

Computer 

System 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 


The part of the certification body which provides policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


The ability of the implementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 

Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-181SA-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 


1-3 




INTRODUCTION 


Validation 


Withdrawn 

test 


The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 


The following tests have been withdrawn by 

the AVO. 

The rationale 

for 

withdrawing each 

test is available fr«n either the AVO or the AV7. 

The 

publication date 

for this list 

of withdrawn 

tests is 

02 August 1991 

• 

E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C3S508J 

C3SS08M 

C3SS08N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C4S612B 

C45612C 

C4S651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B8302SB 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21B 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD40S1D 

CD5111A 

CD7004C 

BD7005D 

CD700SE 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

A07206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201B 

CE2107I 

CE2117A 

CE2117B 

CB2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX^DIGITS: 


C24113L..Y 

(14 

tests) 

C35705L..Y 

(14 

tests) 

C35706L..Y 

(14 

tests) 

C35707L..Y 

(14 

tests) 

C35708L..Y 

(14 

tests) 

C35802L..Z 

(15 

tests) 

C45241L..Y 

(14 

tests) 

C45321L..Y 

(14 

tests) 

C4S421L..Y 

(14 

tests) 

C45521L..Z 

(15 

tests) 

C45524L..Z 

(15 

tests) 

C45621L..Z 

(15 

tests) 

C45641L..Y 

(14 

tests) 

C46012L..Z 

(15 

tests) 


2-1 








IMPLEMENTATION DEPENDENCIES 


C35713B, C4S423B, B86001T, and C86006H chack for the predefined type 
SHORT_FLOAT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
LONG_FLOAT; for this implementation, there is no such type. 

C3S713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLOAT, or SHORT^FLOAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45423A, C45523A, and C4S622A check that the proper exception is 
raised if MACHINE_^OVERFLOHS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_OVERFLOWS is FALSE. 

C45531M..P and C45S32M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX^MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B8600iy uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009C, and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00S06 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..0, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation does not support 
pragma INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package NACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported ~for the given 
combination of mode and access method; this implementation supports 
these operations. 


2-2 






IMPLEMENTATION DEPENDENCIES 


T«st Fil« Opration Mod«_Pil« Acc«»« Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL lO 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL lO 

CE2102F 

CREATE 

inoUt file 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT lO 

CE2102J 

CREATE 

OUT FILE 

DIRECT lO 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN^FILE 

SEQUENTIAL lO 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL lO 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

inout”file 

DIRECT-IO 

CE2102T 

OPEN 

IN FILE 

DIRECT lO 

CE2102U 

RESET 

IN FILE 

DIRECT lO 

CE2102V 

OPEN 

OUT FILE 

DIRECT lO 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT lO 

CE3102F 

RESET 

Any Mode 

text"io 

CE3102G 

DELETE 


text“io 

CE3102I 

CREATE 

OUT FILE 

TEXT lO 

CE3102J 

OPEN 

IN FILE 

TEXT ’lO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; OSE_EPROR is 
raised when this association is attempted. ~ 


CE2107B..E CE21076..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE311SA 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external file is exceeded;^ this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify ~an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see Section 1.3) were required for 8 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed 
by the AVO. The compiler rejects the use of the range 
FLOAT'FIRST. .FLOAT'LAST as the range constraint of a floating-point type 


2-3 






IMPLEMENTATION DEPENDENCIES 


declaration because the bounds lie outside of the range of safe numbers 
(Cf. LRM 3.5.7:12). 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification 
as directed by the AVO. These tests contain instantiations of a generic 
unit prior to the compilation of that unit's body; as allowed by 
AI-00408 and AI-00506, the compilation of the generic unit bodies makes 
the compilation unit that contains the instantiations obsolete. 

BC3204C and BC320SD were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual pareuneters are illegal 
if the generic bodies contain uses of the types that require a 
constraint. However, the generic bodies are compiled after the units 
that contain the instantiations, and this implementation creates a 
dependence of the instantiating units on the generic units as allowed 
by AI-00408 and AI-00506 such that the compilation of the generic bodies 
makes the instantiating units obsolete—no errors are detected. The 
processing of these tests was modified by compiling the separate files 
in the following order (to allow re-compilation of obsolete units), and 
all intended errors were then detected by the compiler: 

BC3204C: CO, Cl, C2, C3M, C4, C5, C6, C3M 

BC3205D: DO, DIM, D2, DIM 


2-4 







CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation system, see: 

CGX Computer Gesellschaft Konstanz mbH 
TA 4 

Dr. KAAb 

Max^Stromeyer-Str. 168 
W-77S0 Konstanz 
Tel: +49 7531 87 3910. 

For sales information about this Ada implementation system, see: 

Siemens Nixdorf Informationssysteme AG 

PSW SW 33 

Klaus Engelke 

Otto-Hahn-Ring 6 

H-8000 Munchen 83 

Tel: +49 89 636 82549. 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, except 


3-1 





PROCESSING INFORMATION 


those that are listed in sections 2.1 and 2.2 (counted in items b and f, 
below). 


a) Total Number of Applicable Tests 3786 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 289 (c+d-fe) 
Number g) Total of Tests for ACVC 1.11 4170 (a-t-b+f) 


3.3 TEST EXECUTION 

A magnetic data cartridge containing the customized test :3uite (see section 
1.3) was taken on-site by the validation team for processing. The contents 
of the magnetic data cartridge were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. The tests were compiled, 
linked, and executed on the computer system, as appropriate. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for compiling during this 
test were: 

-fE generate error log file 

-fl ignore compilation errors and continue generating code 

within the same compilation file 

-fQ (quiet) suppress messages "added to library" and 

"Generating code for" 

-fw suppress warnings 


No options were invoked explicitly for linking during this test. 

The options -fl, and -fQ are not docusiented in the generic compiler user 
manual. 

Test output, compiler and linker listings, and job logs wrm captured on 
magnetic data cartridge and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which 
is the value for $MAX_1N_LEN—also listed here. These values are 
expressed here as Ada string aggregates, where ”V" represents the maximum 
input-line length. 


Macro Pareuneter_Macro Value 


$MAX_IN_LEN 

200 


$BIG_ID1 

(1..V-1 => 'A', 

V => '1') 

SBIG_ID2 

(1..V-1 => 'A', 

CM 

A 

II 

> 

$BIG_ID3 

(1..V/2 => 'A') 
(1..V-l-V/2 

& '3' & 

=> 'A') 

SBIG__ID4 

(1..V/2 *> 'A') 
(1..V-l-V/2 

& '4' & 

=> 'A') 

$BIG_INT_L1T 

(1..V-3 «> '0') 

& "298" 

$B1G_REAL_LIT 

(1..V-5 => '0') 

& "690.0" 

$BIG_STRING1 

& (1..V/2 » 

> 'A') & ' 

$BIG_STRING2 

& {!..V-l-V/2 »> 'A') 

$BLANKS 

(1..V-20 => ' ' 

) 


$MAX_LEN_INT_BASED LITERAL 

"2;" & {1..V-5 => '0') & -11:" 

$MAX_LEN_REAL BASED_L1TERAL 

"16:" & {1..V-7 *> '0') & -F.E:" 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


A-1 








MACRO PARAMETERS 


Macro Parameter _ Macro Value 

$ACC_SIZE 
$ALZGNMENT 
$COONT_LAST 
$DEFAULT_MEM_SIZE 
$DEFAULT_STOR_UNIT 
$DEFAULT_SYS_NAME 
$DELTA_DOC 
$ENTRY_ADDRESS 
$ENTRY_ADDRESS1 
SENTRY_ADDRESS2 
$FIELD_LAST 
$F1LE_TERMINATOR 
$FIXED_NAME 
$FLOAT_NAME 
$FORM_STRING 
SFORM_STRING2 
SGREATER THAN DURATION 

90_000.0 

SGREATER THAN DURATION BASE LAST 

To_oo5_ooo.o 

SGREATER THAN FLOAT_BASE_LAST 

1.8E+308 

SGREATER THAN FLOAT SAFE LARGE 

1.5E+308 

SGREATER THAN SHORT FLOAT_SAFE_LARGE 
“ " " l.OE+308 

SHIGH_PRIORITY 20 

SILLEGAL EXTERNAL FILE NAMEl 

” 7NODIRECTORY/FILENAMB1 

$ILLEGAL EXTERNAL FILE NAME2 

7nodirectory/filename2 

SINAPPROPRIATE LINE LENGTH 

” >1 

SINAPPROPRIATE PAGE LENGTH 

" -1 

SINCLUDE_PRA6MA1 PRAGMA INCLUDE ("A28006D1.TST") 

SINCLUDE PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 


32 

4 

2147483646 

1024 

8 

R3000 

2#1.0#E-31 

16#0# 

16#1# 

16#2# 

2_147_483_647 
# / 

NO_SUCH_FIXED_TYPE 

NO_SUCH_FLOAT_NAME 

•• n 

"CANNOT RESTRICT FILE CAPACITY" 




MACRO PARAMETERS 


$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

SLESS_THAN_DURATION -90_000.0 

$LESS_THAN DURATION_BASE_FIRST 

- 10 _ 000 _ 000.0 

$LINE_TERMINATOR ' ' 

$L0W_PR10RITY 1 

SMACHINE CODE STATEMENT 


$MACHINE_CODE_TYPE 

$MANTlSSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

SMIN_INT 

$NAME 

$NAME_LIST 

SNAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SyS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORO_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VAR1ABLE_A0DRESS 
$VARIABLE_AODRESS1 
SVARIABLE ADDRESS2 


NULL; 

INSTRUCTION 

31 
15 

2147483647 

2147483648 

-2147483648 

ByTE_INTEGER 

R3000 

/home/acvc/val/X2120A 

/home/acvc/val/X2120B 

/home/acvc/val/X3119A 

16#FFFFFFFE# 

1024 

8 

R3000 

ASCII.LF & ASCLL.FF 
NEW INTEGER 
INSTRUCTION 

32 

2048 

1.0 

FCNDECL.VAR_AD0RESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL.VAR_A0DRESS2 

A-3 






APPENDIX B 


COMPILATION AND LINKER SYSTEM OPTIONS 


Th« compilar and linkar options of this Ads implamantation, as dascribad 
In this Appandix, ara providad by tha customar. Dnlass spacifically 
notad otharwisa, rafarancas in this appandix ara to compilar 
documantation and not to this raport. 


B-1 





1 

1 

] 

1 

] 

] 

] 

] 

3 

3 

3 

3 

3 

3 

3 

3 

3 

J 

J 


16.1 ada 

16.1.1 Invocation 

ada [dpiioff ... 1: 


16.1J Description 

The ada command invokes theMeridian Ada compilec 

A program library must be created using akli^ or aawlib in advance of any compilation. The compiler 
ab^ if it is unable to find aptogram library (eithertbe defudt, ada. lib, in the current working directory 
or the library name specified with the >L option). 

Note that the source file has the extension . ada. Just about any nrm-empty file extension is permitted. The 
ones not allowed itKlude those used by the Meridian Ada compiling system for other purposes such as . o 
for object module files. If an illegal extension is given, the error message “Biasing os ia^sqpas 
f ila naiaa** is displayed. Some other commonly used source file extensions are: 

.ada for package specification source files 

.adb for package body source files 

. anb for subunit (separate) source files 

16.L3 Options 

<-£D Generate debugging ouqwL The -fD option causes the compiler to generate the appropriate code 
and data for (^leratian wi A the Meridian Ada Debugger. Fbrmore information on using this option 
and using the Debugger, see Qupier 9. 

-fl Generate error log file. The •fK option causes the compiler to generate a log file containing aU the 
errormessages and warning messages produced during compilation. The error log file hasthesame 
name as the source file, wiAtheextensicn .bxx. Forexample, the error logfik for . ada is 

siapla.axr. The error log file is placed in the currem working directory. In the absence of the 
~a option, the error log information is sent to the standard output stream. 

•£L Generate exception location information. The ~£L option causes location information (source file 
names and line numbers) to be mairuained for internal checks. Thisinfotmationisusefulfordebug- 
ging in the event that an **Exoeption never handled” message appears when an exception propagates 
out ofthe main program (see section 3.3). This option causes the code to be somewhat larger. lf-£L 
is not used, exceptions that propagate out of the main program will behave in the same way. but no 
location information will be ptkited wiA the “Exception never handled” message. 

-flf Suppress numeric checking. The adoption suppresses two kinds of numeric checks for the entire 

compilation; 

1. division_check 

2. overfIow_check 

These checks are described in section 11.7 oftheLRM. Using-fir reduces the size ofthe code. Note 
that there is a related ada option, -£s to suppress all checks for a compilation. See also section 3.3. 

The -fir option must be used in fgaceofpragmasupprBaaforthe two numeric checks, because 
[aesently pragma si^rass is not supported for diviskNi_chcck and ovcrfViw_check. Pragma 


115 


Meridian Ada Compiler User's Guide 







ada 


■tippxttss worics for other checks, as described in section 2.4.2. In the absence of the-£M option, 
the numeric checks are always performed. 

<-£« Suppress all checks. The •£« option suppresses all automatic checking, irxduding numeric check¬ 
ing. This option is equivalem to using pragma s«ppx««s on all checks. This option reduces the 
size of the code, and is good forptoducing^ptoduction quality” code or for benchmarking the com¬ 
piler. Note that there is a related ada option.-£N to suppress only certain kinds of numeric checks. 
See also sections 2.4.2 and 3.3. 

-tv Compile verbosely. The compiler prints the name of each sutqmgram. package, or generic as it is 
compiled. 

-tv Suppress warning messages. With this optiort, the compiler does not priru warning messages about 
ignored pragmas, exceptions that are certain to be raised at rutt-time. or other potential problems that 
the compiler is otherwise forbidden to deem as errors by the LRM. 

-q The-g option instructs the compiler to run an addidcmal optimization pass. The optimizer removes 

common sub-expressions, dead code and unnecessary jumps. It also does loop optimizations. This 
option is different fiom the ^option tobaap. The-g option to ada optimizes the specified unit 
when it is compiled: no inter-unit optimization is done. The -g option to baap analyzes and opti¬ 
mizes the entire program at link time. Note: Even if-g is specified for the ada command, the-K 
option to ada must still be specified for the -q option to ba^ to be effective. 

-K Keep internal form file. Thisoption is used in conjunction with the Optimizer (see Chapter 7 formore 

information), ^thoutthis option, the compiler deletes internal form files following code genera¬ 
tion. 

-Imodifiers 

Generate listing file. The«l optioncausesthecompilertocTeatealisting.Optionalmodifierscanbe 
given to affect the listing formaL You can use none or any combination of the following modifiers: 

e continuous listing format 

p obey pragma paga directives 

a use standard output 

t relevant text output only 

The formats of and options for listings are discussed in section 16.1.7. The defoult listing file gener¬ 
ated has the same name as the source file, with the extension .lat. For example, the default listing 
file produced for aiatpla. ada has the name aiaipla.lat. The listing file is placed in the currem 
working directory. Note: also causes an error log file to be produced, as with the-£5 option. 

-L library-name 

Default: ada. lib 

Use aitymattij library. The -L option specifies an alternative name for the program library. 

Note: Options beginning with -£ can be combined, as in ”-£nr.” This is equivalent to specifying the options 

separately, e.g. ”-£a -£t .” Options begirming with -I can be siniilatly combined or separated, as in 

“-lea” or “-le -la” (see section 16.1.7). 


16.1.4 Compiler Output Files 

Files produced by compilations, other than listings and error logs, are: 

. atx files interface description files 

. int files Meridian Internal Form FQes 

. gnn files generic description files; nn is a two-digit number 


Meridian Ada Compiler User’s Guide 


116 





16.4 bamp 

16.4.1 Invocation 


baap {option . ^ ,11 tmaia-proeedure-namo] 


16.4.2 Description 

The baap {Build Ada Main Program) command creates an execu t able program ^ven the name of the main 
su bp rogram. The main-procedure-name given toba^p must be a parameterless procedure that has already 
been compiled. 

Nota: Be careful not to confuse the name of the source file containing the main subprogram (e.g. aia- 
pla. ada) with the actual name of the main subprogram (e.g. aiapla). 

IfiiTUun-procedure-name is not specified on the basp command line, banp links using the last-compiled 
subprogram that fits the profile for a main subprogram. To determine which subprogram will be used when 
no main subprogram is given to baap, use the laliJbH: option. When in doubt, it may be best to specify 
the main subprogram explicitly. 

Note that when no main subprogram is specified, baap selects the most recently compiled subprogram, not 
the most recently linked subprogra m . If several different main subprograms are linkMi between compiles, 
still the most recently compiled subprogram is selected if no subprogra m is erqrlidtly speci fi ed. 

The baap program fimctioos as a high-level linker. It works by creating a top-level main program that con¬ 
tains all necessary context clauses and calls to packa^ elaboration procedures. Ihe main program is created 
as an irvemal form file on which the code generator is rua Following this code generatitm pass, all the re¬ 
quired objea files are linked. 

An optional optimization pass can be invoked via the bvp conunand. The details of optimization are dis¬ 
cussed in Qupter 7. The b«qp options relevant to optimization, -q and ^. are discussed below. 

Pr ogram s compiled in Debug mode (with the ada —fD option) are automatically linked with the Meridian 
Ada source levd debugger 

16.4J Options 

—A Aggressivdy inline- This option instructs the optimizer to aggressively inline subprograms when 
used inaddition to the'-GoptioiL Typically, this means that sub|»ograms that are only caDed once are 
iniined if(»iiy theoption isused, only Subprograms for wfaich pragma inliaa has been Speci¬ 
fied are inlined. 

-e compUer-program-name 

Default As stored in program Ubrary. 

Use compiler. The -e option specifies the comidete (non relative) directory path to the 

Meridian Ada compiler: This option overrides the compile program name stored in das program 
libraty. The-e option is intended for use in cross-compiler configurations, although under such 

circumstanoes. an ap p ro priate library configuration is normally used insteiKL 

-£ Suppress main program generation step. The >£ option suppressm the creation and additional 
code generation steps for the temporary main program file. The —£ opoon can be used when a simile 
change has been made to the body of a compihttionuniL If unit elaboration orderis changed, orif the 

<p#r |fiffation of a changed, or if new urrits are added, then this optkm should not be used. The 


133 


Meridian Ada Compiler User’s Guide 





bamp 


-£ option saves a few seconds, but places an additional bookkeeping burden on you. The option 
should be avoided undermost circumstances. Note that invokingbaoqp with the >n option foUowed 
by anotherinvocation ofbup with the -£ option has the same effect as an invocation of hasp with 
neither option (*-n and -£ neutralize each other). 

~g Perform global optimization only. The -g option causes banp to invoke the global optimizer on 
your program. CompUation units to be optirnized globally must have been compiled with the ada 

option. 

-G Perform global and local optimizatiorL The hs option causes banp to perform both global and local 

optimization on your program. This includes performing pragma inlina. As with the -g option, 
compilation units to be optimized must have been compiled with tile ada -K option. 

-Z Link the program with a version of the tasking run-time which supports pre-emptive task scheduling. 

This option produces code which handles interrupts more quickly, but has a slight negative impact on 
performance in general 

-L library-name 

Default: ada. lib 

Use alternate library. The -L option specifies tiie name of the program library to be consulted by the 
banp prograsL This option overrides the default library name. 

->n No link. The-II option suppresses actual objea file linkage, but creates and performs code genera- 
tion on the main program file. Note that invoking basp with the -n option followed by another 
invocation of ba^ with the -£ option has the same effea as an invocation of basp with neither 
optioiL That is, ti and -£ neutralize eadi other. 

•H Nooperations. The-V option causes the baap command todoa‘*dryrun'’;itptintsouttheactionsit 

takes to generare the executable program, but does not actually perform those actions. Thesamekind 
of information is printed by the-P optioa 

-o ouxpta-file-name 
Default: file 

Use alterrute executable file output name. The -e option specifies the naine of the executable pro¬ 
gram file written by the baop command. This option overrides the default ouput file name. 

-P Prim operations. The -P option causes thebaapconunand to prim out the actions it takes to gener¬ 
ate the executable p rogr a m as the actimis are performed. 

Link verbosely. Theoption causes the basp command to prim out information about what ac¬ 
tions it takes in building the main program such as: 

• The name of the program library consulted. 

• The library search order (listed as "saves” of the library units used by the program). 

• The name of the main p rogra m file created (as oppos e d to the main procedure name). 

• The elaboration order. 

• The total program stack size. 

• The name of the executable load module created. 

• The verbose code generation for the main program file. 

-ir Suppress warnings. This option allows you to suppress warnings from the optimizer. 


Meridian Ada Compiler User’s Guide 


134 



APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, as 
described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. Implementation-specific 
portions of the package STANDARD can be found on page 155 of the 
compiler. 


C-1 




Appendix F Implementation-Dependent Characteristics 


This appendix lists implementadoo-dependem chancteiistics of Meridian Ada. Note that there are no pre¬ 
ceding appenhces. This appendix is called Appendix f in order to comply with the Reference Manual for 
the Ada Programming Language* (LRM) ANSI/MIL-j!>ri^l815A which states that this appendix he nam etj 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration representation clauses, record repre¬ 
sentation clauses, address clauses, iiuemipts, padcage systao, madiine code insertions, pra gma intaz* 
f aictt, and unchecked programming. 

F.1 Pragmas 


The implemented pre-defined pragmas are: 


•labozata 

iatazfaea 

Hat 

pack 

paga 

pzlozity 

st^pzaaa 

inlina 


See the LRM section 10.5. 

See section F.1.1. 

See the LRM Appendix B. 

See section F.1.2. 

See the LRM Appendix B. 

See the LRM Appendix B. 

See section F.lj. 

See the LRM section 6.3.2. This pragma is not actually effective unless you compile/Unk 
your program using the global optimizer. 


The remaining pre-defined pragmas are accepted, but presently ignored: 


eoatzollad optiaiaa ayataa^nania 

shazad atozaga wit 

aBB8mzy_aiaa ' 

Named parameter notation for pragmas is not supported. 

When ill^al parameter fonns are encouiuered at compile time, the compiler issues a warning message rather 
than an error, as required by the Ada language definititm. Refer to the LRM Appendix B for additional infor¬ 
mation about the pre-defi^ pragmas. 


F.1.1 Pragma Interface 


The form of pt^ma Intozf ae« inMeridian Ada is: 

pxmgmM iMtmx£mcm( language,subprogram [, •'Unk-fiame''] ); 
where: 

language This is the interface language, one of the names assembly, builtin, c or internaL The 
MHigii builtin and internal ate reserved for use by Meridian compiler mainainers in ran- 
time support packages. 

subprogram This is the name of a subprogr a m to which the pragma iBtnzfacn applies. 


*A11 future references to die Reference Manual for the Ada Progra mming L a ng ua ge appear as the LRM. 


153 


Meridian Ada Compiler User’s Guide 









Appendix F 


link-name This is an optional string literal specifying the name of the non-Ada subprogram correspond¬ 

ing to the Ada subprogram named in the second parameter. If link-name is omitted, then 
link-name defaults to the value of subprogram translated to lowercase. Depending on the 
language specified, some automatic modifications may be made to the link-name to produce 
the actual objea code symbol name that is generated whenever references are made to the 
corresponding Ada subprogram. 

It is appropriate to use the optional link-name parameter to pragma interface only when 
the interface subprogram has a name that does not correspond at all to its Ada identifier or 
when the interface subprogram name cannot be given using rules for constructing Ada i denii - 
fiers (e.g. if the name contains a‘S* character). 

The characteristics of objea code symbols generated for each interface language are: 
assembly The objea code symbol is the same as link-name. 

builtin The objea code symbol is the same as link-name, but prefixed with two underscore charac¬ 
ters (**_”)• This language interface is reserved for special interfaces defined by Meridian 

Software Systems, Inc. The builtin interface is presently used to declare certain low-level 
mn-time operations whose names must not conflict with programmer-defined or language 
system defined names. 

c The objea code symbol is the same as link-name, but with one underscore character ('_*) 

prepended. This is the convention used by the C compiler. 

internal No objea code symbol is generated for an internal language iruerface; this language inter¬ 
face is reserved for special interfaces defined by Meridian Software Systems. Inc. The inter¬ 
nal interface is pres^y used to declare certain machine-level bit operations. 

No automatic dau conversions are performed on parameters of any interface subprograms. It is up to the pro¬ 
grammer to ensure that calling conventions match and that any necessary data conversions take place when 
calling interface subprograms. 

A pragma Intnrf ac« may appear within the same declarative pan as the subprogram to which the pragma 
lat nr £nc« applies, following the subprogram declaration, and prior to the first use of the subprogram. A 
pragma int crfac* that applies to a subprogram declared in a package specification must occur within the 
same package specification as the subprogram declaration: the pragma intnrf ac« may not appear in the 
package body in this case. A pragma ia^«r£ac« declaration for either a private or nonprivate subprogram 
declar^on may appear in the private pan of a package specification. 

Pragma intmxt^cm for library units is not supported. 

Refer to the LRM section 13.9 for additional information about pragma intuxfaca. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that the 
pragma occurs within the same declarative pan as the composite type declaration, before any objects or com¬ 
ponents of the composite type are declared. 

Note that the declarative pan restriction means that the type declaration and accompanying pragma pack 
cannot be split across a package specification and body. 

The effea of pragma pack is to minimize storage consumption by discrete component types whose ranges 
permit packing. Use of pragma pack does ix)t defeat allocations of alignment storage gaps for some record 

types. Pragma pack does not affea the representations of real types, pre-defined integer types, and access 

types. 



Meridian \da Compiler User’s Guide 


154 





Appendix F 


F.U Pragma Suppress 

Pragma suppsaas is implemented as described in the LRM section 11.7, with these differences: 

• Presently. division_check and overflow^chedc mustbe suppressed via a compiler 
flag, >£N; pragma suppraaa is ignored for these two numeric checks. 

• The optional “CN ■»” parametername notation forpragma avppzaaa is ignored. 

• The optional second parameter to pragma suppraaa is ignored: the prr^a always 
applies to the entire scope in which it appears. 

R2 Attributes 


All attributes described in the LRM Appendix A are supported. 

R3 Standxird Types 

Additional standard types are defined in Meridian Ada: 

• bytajLntagwr 

• short^intagwx 

• loiig_iat«9wr 

The standard numeric types are defined a.^: 

typw byta^latagwz L* rangw *128 .. 127; 

typ« shost_lnt« 9 r«s ie ra&g« *32768 32767; 

typ« 1« xaxtg* *2147483648 2147483647; 

typ« long^iatngnx i« rang* *2147483648 .. 2147483647; 

typ« floa t is digits 15 

zaagw *1.79769313486231X>»-308 .. 1.79769313486231Z<»>308; 

typo dn xa tloo is dolts 0.0001 zsago *86400.0000 86400.0000; 

R4 Package System 


The specification of package systsa is: 

pselcsgs systsa is 

typo address is sow iatogor; 


typo aaaa is ( R3000 ); 

syotaa^aaao : eoastaat aaao :» R3000; 

storagojoait : c o ns ta nt :■ 8; 

aaaocyjsiso : eoastaat :* 1024; 


** Systoa^-Oopoadoat Haaad Haaboxs 


aia^iat 

maatJLst 

nax^digits 

sax aaatisaa 

fiiao_dolts 

tick” 


eoastaat :<■ *2147483648; 
eoastaat :« 2147483647; 
eoastaat :* 15; 
eoastaat :« 31; 
constant :■ 2.0 ** (*31); 
constant :* 1.0; 


155 


Meridian Ada Compiler Uaer*s Guide 


Appendix F 


— Othmr Syvtaat-D«p«adi«nt D«claxjiti.ona 
siabtypa priority is intogor rang* 1 .. 20; 

The value of systoa. asBozy_siso is presently meaningless. 

F.5 Restrictions on Representation Clauses 
F.5.1 Length Clauses 

A size specification (t' sizo) is rgected if fewer bits are specified than can accommodate the type. The 
minimum size of a composite type may be subjea to applicaticn of pragma pack. It is pennitted to specify 
precise sizes for unsigni^ integer ranges, e.g. 8 for the range 0.. 255. However, because of requirements 
imposed by the Ada language defimdon, a full 32<-bit range of unsigned values, i.e.0.. (2**32)-1. cannot 
be defined, even using a size specification. 

The specification of collection size (t' at oraga^slr a) is evaluated at run-dme when the scope of the type 
to which the length clause applies is entered, and is therefore subjea to rejecdon (via atoragajerror) 
based on available storage at the time the allocadon is made. A coUecdon may include storage us^for ran- 
dme administradon of the coUecdon. and therefore should not be expected to acctanmodate a spedficnumber 
of objects. Furdiennore, cenain classes of objects such as unconstrained discriminant array components of 
records may be allocated outside a given coUecdon. so a coUecdon may accommodate more objects than 
might be expected. 

The specificadon of storage for a task acdvadon (t'atormg«i__si.z«) is evaluated at lun-time when 
a task to which the length dause applies is acdvated, and is therefore subjea to rejecdon (via rt orag«_jer- 
ror) based on available storage at the time the allocadon is made. Storage reserved for a task acnvadon is 
separate from storage needed for any coUecdons defined within a task body. 

ThespedficadonofsmaUforafixed point type (t' aaall) is subjea only to restricdons defined in the LRM 
section 13JL 

F,5Jt Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enumexadon r ep r e se n t ation clause must 
be in the range of edaadard. iadogoz. 

The value of an internal code may be obtained by applying an appropriare instantiation of on- 
choekod^eoavwrsloa to an integer type. 

FJ3 Record Representation Clauses 

The storage unitofEsa(tbeatsca{ic_simpfe_e3pres«ionpan) is givenintennsof 8-bit storage units and must 
be even. 

Abitposidon(theraiigepan)appUedtoadiscretetypecomponemmaybeintherangeO. .15.with0 being 
the least significant bit of a component ArangespedficadonmaynotspecifyasizesmaUertbancanaccom- 
modate the component A range qpecificadai for a componem not accommodating bit packing may have 
a higher u pp e r bound as appropriate (e.g. 0. .31 foradiscriminamsdziagcomponent). Reform the inter¬ 
nal data representation of a given co m ponent in determining the component size and assigning offsets. 

Componentsofdscrete types forwhicfabitposidons are spedfiedmaynotstraddle 16-bit word boundaries. 

The value of an aUgnment clause (the optional at mod pan) must evaluate m 1.2.4, or 8, and may not be 
smaUer than the highest aUgnmem requ^ by any component of the recoid. 

F.5.4 Address Clauses 

An address clause may be siqjpiied for an objea (whether coostam or vaiiable) or a task entry, but not for a 
su b progr am , package, or task unit The meaning erf an address dause supplied for a task entry is given in sec¬ 
tion FJJ. 


Meridian Ada Compilar User’s Guide 


156 






Appendix F 


An address expression for an object is a 32-bit memory address of type system, address. 

F.5.5 Interrupts 

A task entry’s address clause can be used to associate the entry with a UNIX signal Values in the range 0. .31 
are meaningful, and represem the signals corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversion. 

F.6 Implementation-Dependent Components 

No names are generated by the implemeiuaiirm to denote implementation-dependent components. 

F.7 Unchecked Conversions 

There are no restrictions on the use of unchttck«d_convttxslon. Conversions between objects whose 
sizes do twt conform may result in storage areas with undefined values. 

F.8 Input-Output Packages 

A summary of the imidementatiorMlependem input-output diaracteristics is: 

• In cans to op«n and ez«ata. the form parameter must be the empty string (the de¬ 
fault value). 

• More than one internal file can be associated with a single external file for reading 
only. For writing, (Hily one inienul foe may be associated with an external file; Do 
nm use z«s«t to get around this rule. 

• Temporary sequential and direa foes are given names. Temporary foes are deleted 
when they are closed. 

• File I/O is buffered; text foes assod^ with terminal devices are line-buffered. 

• The packages ■•qa«ntlal__lo and diznet^iocaimot be instantiated with un¬ 
constrained composite types or record types with discriminants without defaults. 

F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


157 


Meridian Ada Compiler User’s Guide 






