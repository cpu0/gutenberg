Technical Report 1384 

December 1990 


AD-A233 576 




BMD/ADA Bit-Oriented 
Message Definer 


A Tool To Define Bit-Oriented 
Messages in Ada 


R. H. Mumm 

S. A. Parker 



DTIC 

ELECTE 
MAR 1319811 ] 

B 




Approved for public release; distribution Is unlimited. 


Q1 3 1 3 071 



NAVAL OCEAN SYSTEMS CENTER 

San Diego, California 92152-5000 


J. D. FONTANA, CAPT, USN H. R. TALKINGTON, Acting 

Commander Technical Director 


ADMINISTRATIVE INFORMATION 

The work reported in this report was done under the Communications and Networking 
block program. Independent Exploratory Development (IED) project ZE91, “Automatic Package 
Specification Generator for Bit-Oriented Messages.” The work was done in FY90 by R. H. Mumm 
and S. A. Parker of the Computer Systems and Software Technology Branch, NOSC, Code 411. 


Released by 
D. L. Hayward, Head 
Computer Systems and 
Software Technology 
Branch 


Under authority of 
A. G. Justice, Head 
Information Processing 
and Displaying Division 


ACKNOWLEDGMENTS 

The authors wish to acknowledge Dr. Charles Sampson, Computer Science Corporation, 
and Dr. Michael Shapiro, Naval Ocean Systems Center, for reviewing this document and providing 
valuable comments. 


A special thanks to Michele Kendall, Naval Ocean Systems Center, for graciously doing the 
word processing required for this document, and to Bob Ollerton, Naval Ocean Systems Center, for 
technical assistance. 


JJ 







OBJECTIVE 


Our objective was to develop a portable software tool that automatically generates the Ada source 
code to define bit-oriented messages. This tool can help reduce development costs for command and 
control systems and other Ada software that process bit-oriented messages. 


RESULTS 


We designed, coded, and demonstrated the Bit-Oriented Message Definer (BMD) tool. The tool 
compiles and executes in the Vax Ada, Sun Telesoft, and Sun Alsys environments and generates message 
definitions for five target environments. A preliminary version was used to generate approximately 7000 
Ada source lines of code for the Ada Bit-Oriented Message Handler (ABOM) Project. 


RECOMMENDATIONS 


1. Programmers who are developing Ada software that process bit-oriented messages should try using 
the BMD. BMD can reduce development time. 

2. Ada compiler validation testing needs to be more comprehensive. Validation testing currently 
does not test representation specifications but needs to. During testing of the BMD, problems were found 
with the representation specifications for two validated compilers. 

3. Automatic code generation can be used effectively for Ada applications. The automatic code is 
most appropriate when the source code is repetitious and writing it manually is labor intensive. 

4. Even when writing small programs a design methodology should be used. Small programs fre¬ 
quently expand. A good design facilitates changes, maintenance, and reuse. 



j_ Accession for 

/ 

tffflS GRA4I 

BIIC TAB 
^Unannounced 
Justification_ 

□ 

□ 


By 

Distribution/ 



foist 


Availabil ity Codas 

Avall~aod/or 

Special 




CONTENTS 


INTRODUCTION . 1 

BACKGROUND. 1 

KEY FEATURES. 1 

Host Environments . 1 

Target Environments. 2 

Characteristics of the BMD . 2 

Characteristics of Source Code Generated . 2 

Tool Limits . 2 

EXAMPLES. 3 

INS Messages Example. 3 

Dummy Track Messages Example. 14 

REFERENCE. 22 

BIBLIOGRAPHY. 22 

ABBREVIATIONS AND ACRONYMS. 22 

APPENDIX A- Lessons Learned . A-l 

FIGURES 

1. Time and status message for the AN/WSN-5 inertial navigation set. 3 

2. Attitude message for the AN/WSN-5 inertial navigation set . 3 

3. Prompts and user input for time and status and attitude message for Vax Ada target . 4 

4. Time and status and attitude message definitions for Vax Ada target . 8 

5. Time and status and attitude message definitions for Sun Alsys target. 11 

6. Dummy air track message. 14 

7. Dummy surface track message. 14 

8. Dummy subsurface track message . 14 

9. Prompts and user input for dummy track messages for AN/UYK-43 Ada_L target. 15 

10. Package global data for dummy track messages. 18 

11. Dummy track message definitions for AN/UYK-43 Ada_L target. 19 

iii 































INTRODUCTION 

The Bit-Oriented Message Definer (BMD) is 
a portable interactive software tool for automati¬ 
cally generating Ada source code that defines bit- 
oriented messages. The BMD can help reduce the 
development costs for Ada software that processes 
bit-oriented messages. Appropriate applications 
include command and control systems, such as, 
the Command and Control Processor (C 2 P) 
Shadow Project, which is being directed by Naval 
Ocean Systems Center (NOSC) and the Ship 
Gridlock Project, which is being conducted at the 
Naval Surface Warfare Center (NSWC), 
Dahlgren, VA. 

The BMD executes on the Vax Ada, Sun 
Telesoft Ada, and Sun Alsys compilers and gener¬ 
ates source code that will execute in at least five 
different target environments. 

The BMD automatically generates the Ada 
source code that a programmer would otherwise 
need to manually generate. This manual process is 
time consuming and requires specific knowledge 
of the target computer and compiler. Information 
the programmer would have to know includes how 
bits are numbered, how they are ordered, the size 
of type integer, as well as other details. The BMD 
user does not need to know these differences. The 
source code for the message definitions is gener¬ 
ated automatically for the target environment the 
user selects. The BMD user simply defines the 
messages by looking at pictures of message layouts 
in software specification documents and then by 
responding to interactive program prompts. The 
user needs only a minimal knowledge of Ada. 

BACKGROUND 

The BMD tool was developed as an Inde¬ 
pendent Exploratory Development project at 
NOSC. A need for this tool was identified during 
the development of software for the Ada Bit- 
Oriented Message Handler (ABOM) project, ear¬ 
ned out by Science Applications International 


Corporation (SAIC) under the direction of 
NOSC, Code 411. ABOM software processed 
hundreds of bit-oriented messages. These 
included link-11, link-4a, link-16, as well as, 
Combat Direction System (CDS) messages. Writ¬ 
ing the message definitions in Ada by hand was 
labor intensive, repetitious, and tedious. Errors 
were easily made. We determined the message 
definition process could be rapidly and accurately 
done by automating it. Preliminary BMD work 
began during the development of ABOM soft¬ 
ware. 

The approach taken to develop BMD was to 
collect the definitions ox bit-oriented messages 
from actual Ada projects. These projects were 

1. AN/WSN-5 Inertial Navigation System 
(INS) developed by the Software Engi¬ 
neering Institute (SEI) 

2. Command and Control Processor (C 2 P) 
Shadow developed by the Hughes Aircraft 
Corporation and Syscon Corporation for 
NOSC, Code 411 

3. Ada Bit-Oriented Message Handler 
(ABOM) software developed by SAIC for 
NOSC, Code 411 

The BMD was developed to be general pur¬ 
pose, allowing messages to be defined in different 
ways. The BMD provides the capability for defin¬ 
ing messages required for these projects and other 
applications. 

KEY FEATURES 

HOST ENVIRONMENTS 

Vax Ada 

Sun Telesoft 

Sun Alsys 

BMD is a very portable tool. BMD will 
compile and execute in these environments. 


1 



TARGET ENVIRONMENTS 


Vax Ada 
Sun Telesofi Ada 
AN-UYK/43 Ada_L 
AN-UYK/44 Ada_M 
Sun Alsys Ada 


g. Writes descriptive header to package 
specification 

The header gives the user name, output 
file name, name of target environment, 
the date and time the package specifica¬ 
tion was created and other relevant infor¬ 
mation. 


CHARACTERISTICS OF THE BMD 

a. Provides capability for defining different 
size messages whose fields vary in length 

b. Allows discriminated records to be 
defined 

This feature is useful when messages have 
many common fields. 

c. Allows multiple messages to be defined in 
one package 

d. Provides capability for assigning default 
values to fields 

Default values can be assigned in base 2 
through 16 using Ada-like notation. 

e. Allows use of field types defined in g’obal 
or definitions packages. 

f. Does extensive error checking 

Error checking includes (1) examining 
the validity of file names, (2) checking 
field names, package names, and type 
names to determine if they are valid Ada 
identifiers, (3) checking field position to 
ensure previously defined fields are not 
overlaid, and (4) determining if the size 
of a default integer is too large for the 
field size. Error messages are displayed to 
allow the user to make corrections. 


CHARACTERISTICS OF SOURCE 
CODE GENERATED 

a. Defines messages as records 

Record representation clauses are auto¬ 
matically generated to specify the order, 
position, and size of message fields. 

b. Defines message fields to be integer types 

Message fields, are defined to be integer 
types of the appropriate size for the field 
widths. The integer type statements and 
length clauses are generated automati¬ 
cally. 

c. Aligns records on word boundaries 

TOOL LIMITS 

a. Maximum number of messages allowed in 
a package specification: 200 

b. Maximum number of bits in a message 
word: 64 

c. Maximum number of bits in a message: 

10,000 

d. Maximum field size: 32 bits 

e. Maximum identifier length: 80 characters 

Note: These limits are declared in pack¬ 
age Spec_Gen_.ada 


2 





EXAMPLES 


The use of BMD will be illustrated with two 
examples. The first example is the definition of 
two INS messages. The second illustrates the use 
of a discriminated record to define three dummy 
track messages. 

INS MESSAGES EXAMPLE 

In this example, the Time and Status Message 
and Attitude Message are defined first for a Vax 
Ada target environment and then for a Sun Alsys 
target environment. This example illustrates the 
difference in the source code generated for these 
targets. 

Figure 1 shows the message layout for the 
Time and Status Message while figure 2 depicts 
the layout for the Attitude Message. These are 
actual message formats taken from the interface 
design specification document for the INS (NAV- 
SEA, 1982). 

Figure 3 shows the BMD prompts and user 
inputs to generate these message definitions for a 
Vax Ada target environment. All user inputs are 
shown in italics. The user, Hans, entered run 


BMD to begin execution. Hans then entered his 
name and selected Vax_Ada as the target envi¬ 
ronment. He indicated the output file name was 
INS_File, that the number of bits in a message 
word is 16, the package specification created will 
be named INS_Spec, the message group name 
was INS, the message objects will be defined, and 
the Time_and_Status and Attitude message will be 
created. The fields in the message were defined 

Bits 


0 


2 

Words 

4 


6 


15 i i i 12 i i i i B i i i i 4 i i i i° 

MESSAGE TYPE - 002 - 

__8j_ 

0 NUMBER OF WORDS-Oil 8 

OWNSHIP HEADING 


OWNSHIP PITCH 


OWNSHIP ROLL 


OWNSHIP HEADING RATE 


OWNSHIP PITCH RATE 


OWNSHIP ROLL RATE 


Figure 2. Attitude message for the 
AN/WSN-5 inertial navigation set. 


Bits 


' 5 i i i 12 i l i -l 8 


MESSAGE TYPE - 003. 


tSFpSACAi EML1D 


I l 4 l I I I 1 


NUMBER OF WORDS- 005 , 


STATUS - 0 


GLSTAT 


NSkrt 


GRSTAT 


GMT 


GMT 


TEST WORD ONE - 1010101010101010 


2 


TEST WORD ONE - 1010101010101010. 


TEST WORD TWO - 0101010101010101 


TESTWORDTWO- 0101010101010101 


Words 


Figure 1. Time and status message for 
the AN/WSN-5 inertial navigation set. 


Bits 


i i 8 i i i i 4 i 


JLili 


GMT 


GMT 


EAST COMPONENT OWNSHIP VELOCITY 


NORTH COMPONENT OWNSHIP VELOCITY 


VERTICAL COMPONENT OWNSHIP VELOCITY 


OWNSHIP SPEED 


TEST WORD ONE - 1010101010101010 . 


TEST WORD ONE - 1010101010101010 . 


TESTWORDONE - 0101010101010101 


TESTWORDONE - 0101010101010101 


10 


12 


Words 


14 


16 


Figure 2. (Continued) Attitude message for 
the AN/WSN-5 inertial navigation set. 


3 
















run h ad 

Enter user name >flans 
Enter target environment 

(VXT_AD*,ADA_L,ADA_M,8UW_TEL,8OT_AL8YS)>vax_ada 
Enter name of file - that will contain epece ~>IXS_Tllm . 

Enter number of bite in a massage word >18 
Enter name of package specification to create >INS__Spac 
Enter name of massage group >INS 
Create message objects (Y or ■)T >y 

Enter message names in mag group. Enter for last msg. 

1 >rims_and_St*tus 

2 >Attitude - 

3 >; 

You are now ready to enter fields for all massages. 

Enter tor last field. 

Is Message Tima_and Status going to use discriminated records 
(Y or ■)? >n 

Enter TIELD_KAME [PACKACE_HAME.TYPE_HAMK] [DETAin.T_VAl.OE] for 
message Tlme_and_status 

Time_and_3tatus 1 >Mssssgs_7yps 8t003f 

Enter start word number 4 start bit position of field (ww,bb) >0,8 
Enter end word number 4 end bit position of field (ww,bb) > 0,15 
Time_and_Status 2 >Nxjobmr_of_Uordm 8/0051 

Enter start word number 4 start bit position of field (vw,bb) >1,1 
Enter end word number 4 end bit position of field (ww,bb) >1,14 
Time_and_8tatus 3 >Zaro_Bltl 0 

Enter start word number 4 start bit position of field (ww,bb) >2,0 
Enter end word number 4 end bit position of field (ww,bb) >2,0 
Time_and_8tatus 4 >101 

Enter start word number 4 start bit position of field (ww,bb) >2,1 
Enter end word number 4 end bit position of field (ww, bb) >2,1 
Tlme_and_8tatus 5 >1 fS 

Enter start word number 4 start bit position of field (ww, bb) >2,2 
Enter end word number 4 end bit position of field (ww, bb) >2,2 
Time_and_8tatus C >Statue 0 

Enter start word number 4 start bit position of field (ww,bb) >2,3 
Enter end word number 4 end bit position of field (ww, bb) >2,9 
Tlme_and_Status 7 >XHL_1D 

Enter start word number 4 start bit position of field (ww,bb) >2,10 
Enter end word number 4 end bit poaition of field (ww, bb) >2,12 
Tlme_and_Statue 8 >CAL 

Enter start word number 4 start bit position of field (ww,bb) >2,13 
Enter end word number 4 end bit position of field (ww, bb) >2,13 
Time_end_8tetus 9 >DSA 

Enter start word number 4 start bit position of field (ww, bb) >2,14 
Enter end word number 4 end bit position of field (ww,bb) >2,14 
Zlme_end_3tatus 10 >DST 

Enter etart word number 4 start bit position of field (ww,bb) >2,15 
Enter end word number 4 end bit poaition of field (ww, bb) >2,15 
Time_end_8tatus 11 >GRSTAT 

Enter start word number 4 start bit position of field (ww,bb) >3,0 
Enter end word number 4 end bit position of field (ww, bb) >3,4 
Tlme_and_8tetus 12 >Zaro_Wordl 0 

Enter start word number 4 start bit position of field (ww, bb) >3, 5 
Enter end word number 4 end bit position of field (ww, bb) >3, 7 
Time and Status 13 >GLSTAX 


Figure 3. Prompts and user input for time and status and attitude message 
for Vax Ada target. 


4 






Kntar start word numbar 4 start bit position of fiald (ww,bb) >3, t 
Kntar and word numbar C and bit position of flaid (ww, bb) >3,12 
liaa_tnd_ltatu« 14 >Xaro Word2 0 

Kntar start word numbar 4 start Bit position of fiald (ww,bb) >3,13 
Kntar and word numbar 4 and bit position of fiald (ww, bb) > 3,15 
Tima_and_<tatua 15 >£9471 

Kntar start word numbar 4 start bit position of fiald (ww,bb) >4,0 
Kntar and word numbar 4 and bit position of fiald (ww,bb) >4,10 
Tlma_and_Statua 14 >Xaro Woxd3 0 

Kntar start word numbar 4 start Bit position of fiald (ww, bb) >4,11 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >4,15 
1 ima_and_5tatus 17 >GMT 2 

Kntar start word nuabar 4 start bit position of fiald (ww, bb) >5,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >5,15 
Tima_and_*tatua 18 >Ta*t_Wordla 211010101010101010# 

Kntar start word numbar 4 start Bit position of fiald (ww, bb) >6,0 
Kntar and word numbar 4 and bit position of fiald (ww,bb) >6,15 
Tlma_and_8tatus 19 >Tmmt_Wovdlb 211010101010101010# 

Kntar start word numbar 4 start Bit position of fiald (ww, bb) >7,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >7,15 
Tima_and_8tatus 20>Tast_IK>rd2a 2#0101O1O10102O1O1# 

Kntar start word numbar 4 start - bit position of fiald (ww,bb) >8,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >2,15 
Tima_and_Statua 21 >T»mt_Wor<f2b 2t0101010l01010101t 

Kntar start word numbar 4 start Bit position of fiald (ww, bb) >9,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >9,15 
Tims_and_8tatus 22 >,* 

Is Massaga Attituda going to usa diseriminatad racords 
(Y or H) 7 >a 

Kntar YIZLD_HAMX [PACXJU3Z_KAMX.TYPIjnME] [DXYJU7LT_VAL0X] for 
maaaaga Attituda — ~ 

Xttituda 1 >Masssga_Typa 9#002# 

Kntar start word msnbar 4 start bit position of fiald (ww, bb) >0, 9 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >0,15 
Xttituda 2 >tfumbar^of_Words 2 80118 

Kntar start word numbar 4 start bit position of fiald (ww,bb) > 1,1 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >1,14 
Xttituda 3 >Xsro_Bltl 0 

Kntar start word numbar 4 start bit position of fiald (ww,bb) >1,15 
Kntar and word numbar 4 and bit position of fiald (ww,bb) >1,15 
Attituda 4 >Ownmhlp_B»mdlng 

Kntar start ward numbar 4 start bit position of fiald (ww,bb) >2,0 
Kntar and word numbar 4 and bit position of flwld (wtr.tb) >2,15 
Xttituda 5 >Ommhlp_Pltcb 

Kntar start word numbar 4 start bit position of fiald (ww, bb) >3,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >3,15 
Xttituda 4 >Ownmhlp_Roll 

Kntar start word numbar 4 start bit position of fiald (ww,bb) >4,0 
Kntar and word numbar 4 and bit position of fiald (ww,bb) >4,15 
Xttituda 7 >Omthlp_Bosdlnq_R*to 

Kntar start word numbar 4 start bit position of fiald (ww,bb) >5,0 
Kntar and word numbar 4 and bit position of fiald (ww, bb) >5,15 
Xttituda 8 >0wnahip_91tcfc_JUta 


Figure 3. (Continued) Prompts and user input for time and status and attitude 
message for Vax Ada target. 


5 






Inter start word number 4 start bit position of fisid (ww,bb) >6, 0 
Inter and word number 4 and bit position of fiald (ww,bb) >6,15 
Attitude 9 >Ownship_Jtol2_JUts 

Sinter start word number 4 start bit position of field (ww, bb) >7,0 
Inter end word number 4 end bit position of field (ww,bb) >7,15 
Attitude 10 >caai 

Inter start word number 4 start bit position of field (vw,bb) > 8,0 
Inter end word number 4 end bit position of field (ww, bb) > 6,10 
Attitude 11 >Zero_Mordl 0 

Inter start word number 4~start bit position of field (ww,bb) > 8,11 
Inter end word number 4 end bit position of field (ww,bb) >8,15 
Attitude 12 >002 

Inter start word number 4 start bit position of field (ww,bb) >9,0 
Inter end word number 4 end bit position of fiald (ww,bb) >9,15 
Attitude 13 >X*Bt_Ccap_Ovn_y»l 

Inter start word number 4~start bit position of field (ww,bb) >10,0 
Inter end word number 4 end bit position of field (ww,bb) >10,15 
Attitude 14 >North_Carap_ Own_ Vm 1 

Inter start word number 4 start bit position of fiald (ww,bb) >11,0 
Inter end word number 4 end bit position of field (ww,bb) >11,15 
Attitude 15 >V»rt_CotBp_Om_y»l 

Inter start word number 4 start bit position of field (ww,bb) >12,0 
Inter end word number 4 end bit position of field (ww,bb) >12,15 
Attitude IS >Ommhlp_Spmmd 

Inter start word number 4 start bit position of field (ww,bb) >13,0 

Inter end word number 4 end bit position of field (ww,bb) >13,15 

Attitude 17 >Testwordla 2410101010101010100 

Inter start word number 4 start bit position of field (ww,bb) >14,0 

Inter end word number 4 end bit position of field (ww,bb) >14,15 

Attitude 18 >Tsst wordlb 2010101010101010104 

Inter start word number 4 start bit position of field (ww,bb) >15,0 

Inter end word number 4 end bit position of field (ww,bb) >15,15 

Attitude 19 >T •atword2* 2001010101010101014 

Inter start word number 4 start bit position of field (ww,bb) >16, 0 

Inter end word number 4 end bit position of field (ww,bb) >16,15 

Attitude 20 >T •atvord2b 2001010101010101014 

Inter start word number 4 start bit position of field (ww,bb) >1 7 ,0 

Ir*-er end word number 4 end bit position of field (ww,bb)>27 ,15 

Attitude 21 >; 

The package specification XHS_8pea includes tbs XHS messages below. 
Time_and Status ~ 

Attitude - 

The file you created is :XHS_rile. 

Bit-Oriented Message Dafiner (BMD) has completed. 


Figure 3. (Continued) Prompts and user input for time and status and attitude message 
for Vax Ada target. 


6 






by giving them a field name, an optional type 
def .ied in another package specification, and an 
optional field value. If an optional Pack- 
age_Name.Type_Name is not given, then the field 
will be of an integer type defined in package 
INSSpec. Some fields, such as \lessage_Type 
and N'umber_of_VVords were given default values 
in Ada-like notation. Base values of 2 through 16 
are valid. Each field position is specified by giving 
both the field start word, start bit position, and 
end word, end bit position. To complete the Time 
and Status message, Hans entered a for 
FIELD NAME. In the BMD a is a delimiter 
indicating there is no more data of the type being 
entered. Information was entered in similar fash¬ 
ion for the Attitude message. The output file, 
l\S_File, was created and the BMD run com¬ 
pleted when was entered for FIELD_NAME 
for the Attitude message. 

Figure 4 depicts the Time and Status and Atti¬ 
tude Message definitions for a Vax Ada target 
environment. Note the header information 


containing the user name, file name, target envi¬ 
ronment, message word size, and time created. 
Below the header are the type for integer types 
ranging from 1 bit up through the maximum size 
of the predefined type integer for the target envi¬ 
ronment, which is 2* *31-1 for Vax Ada. The 
messages are defined as records. Record repre¬ 
sentation clauses are used to specify the position 
and size of message fields. 

Figure 5 shows the Time and Status and Atti¬ 
tude Message definitions for a Sun Alsys target 
environment. The user inputs to generate these 
definitions were identical tc those that generated 
the Vax Ada definitions, figure 3, except now the 
user specified that the target was the Sun Alsys. 
The bit positions relative to the zero storage unit 
in the record representation clause in figure 5 are 
different than those for the Vax target shown in 
figure 4. This difference occurred because the 
Sun orders bits within a word from left to right 
whereas the Vax orders bits within a word from 
right to left. 


7 



packag* IB3_Sp*o Is 


Omi Bum: Ban* 

Fil* nsma la: IHS_Til*. 

Targat anvixonmant: VAX_ADA 

Bumbar of bits In typa intagar for targat anvlronmant: 

Busbar of bits In auitga word: 1C 

Data packag* a pad float Ion craatad: 8/ 25/ 90 

Tima packag* spaclflcatlon craatad: 14: 22: 48 

Tha following statamants ara for IBS massagas: 


typa IntagazOl is rang* 0. 
for IntagarOl'slra ns* 1; 
typa Xnt*g*r02 Is rang* 0. 
for Intag*r02'six* us* 2; 
typa Xntag*r03 Is rang* 0. 
for Xnt*gar03'sis* usa 3; 
typa Xnt*gar04 Is rang* 0. 
for Xnt*gar04'six* usa 4; 
typa Xnt*g*r05 Is rang* 0. 
for Xnt*g*r05'slz* us* 5; 
typa XntagarOC 1s rang* 0. 
for Xnt*g*r06'six* usa C; 
typa Int*g*r07 Is rang* 0. 
for Xnt*g*r07'six* us* 7; 
typa Int*gar08 Is rang* 0. 
for IntagarOS'six* us* 8; 
typa Int*gar09 Is rang* 0. 
for Int*gar09'six* us* 9; 
typa XntagarlO Is rang* 0. 
for Xx<l4g*rl0'sis* us* 10; 
typa Xntagarll Is rang* 0. 
for Xntagarll'six* us* 11; 
typa Int*g*rl2 Is rang* 0. 
for Int*g*rl2'six* usa 12; 
typa Xnt*garl3 Is rang* 0. 
for Xnt*garl3'slx* usa 13; 
typa Int*g*rl4 Is rang* 0. 
for Xnt*g*rl4'slx* us* 14; 
typa IntagarlS Is rang* 0. 
for Xnt*g*rl5'six* usa 15; 
typa XntagarlC la rang* 0. 
for XntagarlC'six* 1C; 


2**2-l; 

2**3-l; 


2**4-l; 


2**5-l; 


2**C-1; 

2**7-l; 


2**8-l; 


2**9-l; 


.2*no-i 


.2**n-i 


. 2 ** 12-1 


■2**13-1 


.2**14-! 


.2**15-! 


. 2**1C-1 


typa Tlma_and_8tatus__R*cord_Typ* Is racord 
Massaga~Typa ~ — : I nt a gar 08 

Humb*r_of_Words : Xntag*rl4 : 

Z*ro_Bltl” : XntagarOl : 

IOT : XntagarOl; 

HS : XntagarOl; 

Status : Xntagar07; 

KML_ID : Xntagar03 : 

CAL : XntagarOl; 

DSA : XntagarOl; 

DST : XntagarOl; 

GRSTAT : Xnt*g*r05; 

Zaro_Wordl : Xnt*g*r03 : 

GLSTAT : Xnt*g*r05; 


810031; 
■8#005t; 
■ 0 ; 


Figure 4. Time and status and attitude message definitions for Vax Ada target. 








Te*t_Wordla 
TeetJWordlb 
Teet~Word2e 
Te*t~Word2b 
and record; 


IntegerlS 2*1010101010101010#; 
Integerl6 2*1010101010101010#; 
Xntegerl6 2*0101010101010101#; 
Integerl6 2*0101010101010101#; 


or 71ne_and_Statua_Record_Type uae 

record at nod 

4; 

15; 

Meaaage_Type 

at 

0 

ranga 

8 . . 

Vunber_of_Word* 

at 

0 

ranga 

17 . 

. 30; 

Zero Bltl 

at 

0 

ranga 

32 . 

. 32; 

IOT 

at 

0 

ranga 

33 . 

. 33; 

VS 

at 

0 

ranga 

34 . 

. 34; 

Statue 

at 

0 

ranga 

35 . 

. 41; 

ZKL 10 

at 

0 

ranga 

42 . 

. 44; 

CAL~ 

at 

0 

ranga 

45 . 

. 45; 

DSA 

at 

0 

ranga 

46 . 

. 46; 

osr 

at 

0 

ranga 

47 . 

. 47; 

GRSTAT 

at 

0 

ranga 

48 . 

. 52; 

Zero Wordl 

at 

0 

ranga 

53 . 

. 55; 

CLSTAT 

at 

0 

ranga 

56 . 

. SO; 

Zero Word2 

at 

0 

ranga 

61 . 

. S3; 

GMT1 

at 

0 

ranga 

64 . 

- 74; 

Zero Word3 

at 

0 

ranga 

75 . 

. 79; 

CMT2 

at 

0 

ranga 

80 . 

. 95; 

TeatJRordla 

at 

0 

ranga 

86 . 

. Ill; 

TeetJWordlb 

at 

0 

ranga 

112 

.. 127; 

Teet_Word2a 

at 

0 

ranga 

128 

.. 143; 

Teat_Word2b 

at 

0 

ranga 

144 

.. 159; 


end record; 

Time_and_8tatue_Record : Tlme_and_Statua_Racord_Type; 


type Xttltude_Reoord_Type la 
Meaaage_Type 

Vumber_of_Worde 
Zero_Bitl 
Omehlp_Heading 
OvnsM.p_Pitch 
Ownablp_Roll 
Ownahlp_Head i ng_Rate 
Owna hip_Pitcb_Rate 
Ovna hi p_Ro11 Rate 
CMT1 

Zero Wordl 
CVTT2 - 

Itit_Cogp_Om_V«l 
Roirth_Cooip_C>vn_Vel 
Vert_Coeop_Own_Vel 
Ovnshlp_Speed 
Testwordla 
Teatwordlb 
Teetvord2a 
Teetvord2b 
end record; 

for *ttltude_Record_Type uae 

Meaaage_Type 


record 

Integer08 
Integer14 
Integer01 
IntegerlS; 
IntegerlS; 
Integerl6; 
IntegerlS; 
Zntegerl6; 
Zntegerl6; 
Integerll; 
Integer05 
IntegerlS; 
Zntegerl6; 
IntegerlS; 
IntegerlS; 
IntegerlS; 
IntegerlS 
IntegerlS 
IntegerlS 
IntegerlS 

record at nod 

at 


8 * 002 #; 

8 * 011 *; 

0 ; 


0 ; 


2*1010101010101010#; 

2*1010101010101010#; 

2 * 0101010101010101 #; 

2 * 0101010101010101 #; 


4 ; 

0 range 


15; 


Figure 4. (Continued) Time and status and attitude message definitions for 
Vax Ada target. 


9 








■unber_of_1lord* 

at 

0 

rang* 

17 . 

. 30; 

Zero_Bitl _ 

at 

0 

rang* 

31 . 

. 31; 

Own*Eip_He*dln g 

at 

0 

rang* 

32 . 

. 47; 

OwnehlpJPitch 

at 

0 

rang* 

48 . 

. 63; 

Ovn*hip_Roll 

at 

0 

rang* 

64 . 

. 79; 

Ownahip_Beadlng_IUte 

at 

0 

rang* 

80 . 

. 95; 

Ownahip_Pitch_IUte 

at 

0 

rang* 

96 . 

. Ill; 

Ownehip - Roll Rate 

at 

0 

rang* 

112 

.. 127 

CMT1 

at 

0 

rang* 

128 

.. 138, 

Zero Wordl 

at 

0 

rang* 

133 

.. 143 

GMT2 

at 

0 

rang* 

144 

.. 159 

*»»t_C p_0*#n_V« 1 

at 

0 

rang* 

160 

.. 175 

■ortSj. «xnp_Own_Vel 

at 

0 

rang* 

176 

.. 191 

Vert_C«wpJ5im_Ve 1 

at 

0 

rang* 

192 

.. 207 

Own*hlp_8p*ed 

at 

0 

rang* 

208 

.. 223 

Testwordl* 

at 

0 

rang* 

224 

.. 239 

Testwordlb 

at 

0 

rang* 

240 

.. 255 

Tertword2* 

at 

0 

rang* 

256 

.. 271 

Teatvord2b 

at 

0 

rang* 

272 

.. 287 


end record; 

Attitude : Attitud*_R*cord_Type; 


end IBS_Spec; 


Figure 4. (Continued) Time and status and attitude message definitions for 
Vax Ada target. 


10 





package IHS_Spec la 

— Oui Bam*: ban* 

— Ilia nam* 1*: IB8_Sun. 

— Target environment: SUB_*iSYS 

— Busbar of bits In typ* Integer for target environment: 16 

— Bumber of bits In message word: 16 

— Date package specification created: 8/ 27/ 90 

— Time package specification created: 11: 23: 12 

— The following statements are for IBS messages: 

type Integer01 Is range 0..1; 

for Integer01'size use 1; 

type Integer02 Is range 0..2+*2-l; 

for Xnteger02'sire use 2; 

type Xnteger03 Is range 0..2**3-l; 

for Xnteg*r03'*lc* use 3; 

type Xnteger04 Is range 0..2**4-l; 

for Xnt*ger04'slz* use 4; 

type IntegerOS Is range 0..2**5-l; 

for Xnteger05'sice use 5; 

typ* Int*g*r06 1* rang* 0..2**6-l; 

for Znteger06'sic* us* 6; 

typ* Int*g*r07 Is range 0..2**7-l; 

for Integer07'slz* us* 7; 

type IntegerOB Is rang* 0..2**8-l; 

for IntagerOB'slc* use 8; 

typ* Xnt*g*r09 Is rang* 0..2**9-l; 

for IntegerOB'ale* us* 9; 

typ* IntegerlO 1* range 0..2**10-1; 

for XntegerlO'slc* use 10; 

typ* Xntegerll Is rang* 0..2**11-1; 

for Xntegerll'sic* us* 11; 

typ* Xnt*g*rl2 Is range 0..2**12-1; 

for Xnt*g*rl2'sic* us* 12; 

type Xnt*g*rl3 1* rang* 0..2**13-1; 

for Xnt*gerl3'slce us* 13; 

typ* Xnt*g*rl4 Is range 0..2**14-1; 

for Int*g*rl4'slc* us* 14; 

type Xnt*gerl5 Is range 0..2**15-1; 

for Xnt*gerl5'sic* us* 15; 

typ* Xnt*g*rl6 Is range 0..2**16-1; 

for Xnt*g*rl6'slc* us* 16; 


typ* Tim*_and_Status 

M*ssag*_Type 

BunberjofJRords 
Zero Bltl 
IOT ~ 

B8 

Status 

KKL ID 

OUT 

DBA 

DSB 

CRSTAT 


R*cord_Typ* Is record 
IntegerOB :• 
: Integer 14 :»■ 
: Integer01 :■ 
: XntegerOl; 

: XntegerOl; 

: Integer07 :« 
: IntegerOS; 

: XntegerOl; 

: XntegerOl; 

: XntegerOl; 

: Integer05; 


8|003f; 
8#005#; 
0 ; 


0 ; 


Figure 5. lime and status and attitude message definitions for Sun Alsys target. 


11 







Zero Wordl 
GLStXt 
Zero_Word2 
cam 

Zero Word3 

<arr2~ 

Te*t_Wordl* 
T**t~Wordlb 
Te*t_Word2a 
TeetJWord2b 
end record; 


Znteger03 :■ 0; 

Integer05; 

Znteger03 :■ 0; 

Zntegerl1; 

Xnteger05 :■ 0; 

Zntegerl6; 

Zntegerl# 211010101010101010#; 
Integer16 :■ 2*1010101010101010#; 
Zntegerl# :« 2*0101010101010101#; 
Integer16 2#0101010101010101#; 


tor Time_and_Statue_Record_Type use 

record 

at mod 

2 ; 


M*a*age_Type 

at 

0 

rang* 

0 .. 

7; 

Wuab*s_of_Word* 

at 

0 

rang* 

17 . 

. 30; 

Zero Bitl 

at 

0 

rang* 

47 . 

. 47; 

IOT 

at 

0 

rang* 

46 . 

. 46; 

MS 

at 

0 

rang* 

45 . 

. 45; 

Statue 

at 

0 

rang# 

38 . 

. 44; 

XML ZD 

at 

0 

rang* 

35 . 

. 37; 

CAL 

at 

0 

rang* 

34 . 

. 34; 

DSA 

at 

0 

rang* 

33 . 

. 33; 

DSF 

at 

0 

rang* 

32 . 

. 32; 

CRSTAT 

at 

0 

rang* 

59 . 

. 63; 

Zero Wordl 

at 

0 

rang* 

56 . 

. 58; 

CLSZAT 

at 

0 

rang* 

51 . 

. 55; 

Zero Word2 

at 

0 

rang* 

48 . 

. 50; 

GMT1 

at 

0 

rang* 

69 . 

. 79; 

Zero Word3 

at 

0 

rang* 

64 . 

. 68; 

GMT2 

at 

0 

rang* 

80 . 

. 95; 

Te*t_Wordla 

at 

0 

rang* 

96 . 

. Ill; 

Te*t_Wordlb 

at 

0 

rang* 

112 

.. 127; 

Teat_Word2a 

at 

0 

rang* 

128 

.. 143; 

Teat_Word2b 

at 

0 

rang* 

144 

.. 159; 


end record; 


Tln>*_*nd_8tatua : Tia»e_end_Statue_Ree©rdJEype; 


type Attitud*_Record_Type la 
Meaaage_Type 

Bumb*r_of_Word* 

ZeroJBitl 

Ownahip_Heading 

Own* hip _Pitch 

Ownahip_Roli 

Own*hip Heedin g R ate 

Own*hip_Pitch_Rat* 

Own*hip Roll_R*te 

aril 

Zero Wordl 
CMT2 

X a *t_Cc«np_Own_V* 1 
Worth_Coo«p_Own_Vel 
Vert_Co«Dp_Own_Vel 
Own* hi p__8peed _ 

TeatJWordle 
Teat Wordlb 


record 

Integer08 :■ 8#002#; 

Zntegerl# :■ 8#011#; 

ZntegerOl :■ 0; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerll; 

Znteger05 :■ 0; 

Zntegerl#; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6; 

Zntegerl6 :« 2*1010101010101010#; 
Zntegerl6 :« 2*1010101010101010#; 


Figure 5. (Continued) Time and status and attitude message definitions for 
Sun Alsys target. 


12 









T«at«ord2a : XntagarlC :■ 2*0101010101010101#; 

T«*tWord2b : XntogorlC 2*0101010101010101#; 

•nd rocord; 


for Attituda_Racord_Typa 

uam racord 

at mod 

2; 



Maaaaga_Typa 

at 

0 

rang* 

0 .. 

7; 

Vuaabar of Word* 

at 

0 

rang* 

17 . 

. 30; 

taro_Bltl — 

at 

0 

rang* 

1C . 

. 16; 

OvnaM.p_Haadlng 

at 

0 

rang* 

32 . 

. 47; 

Own* hi p_J? itch 

at 

0 

ranga 

48 . 

. 63; 

Own* til p_Ro 11 

at 

0 

rang* 

64 . 

. 79; 

Ownahlp_Haad1ng_Rata 

at 

0 

ranga 

80 . 

. 95; 

Own*hip~Ritch_R*t« 

at 

0 

ranga 

96 . 

. Ill; 

Ownahip Roll Rata 

at 

0 

ranga 

112 

.. 127; 

cam ~ ” 

at 

0 

ranga 

133 

.. 143; 

faro Wordl 

at 

0 

ranga 

128 

.. 132; 

CHT2~ 

at 

0 

ranga 

144 

.. 159; 

Z aat_Co«np_Own_Va 1 

at 

0 

ranga 

160 

.. 175; 

■orth_Cos«p_Own_V*l 

at 

0 

ranga 

176 

.. 191; 

V*rt_Co«np_Own_V* 1 

at 

0 

ranga 

192 

.. 207; 

Ownahlp_Spaad 

at 

0 

ranga 

208 

.. 223; 

Taat_Nordla 

at 

0 

ranga 

224 

.. 239; 

Taat_Wordlb 

at 

0 

ranga 

240 

.. 255; 

TaatRord2a 

at 

0 

ranga 

256 

.. 271; 

TaatRord2b 

at 

0 

ranga 

272 

.. 287; 


•nd rocord; 

Attitud* : Attltuda_Racord_Typa; 


and IH3_Spac; 


Figure 5. (Continued) Time and status and attitude message definitions for 
Sun Alsys target. 


13 





Bits 


DUMMY TRACK MESSAGES EXAM¬ 
PLE 

Figures 6, 7, and 8 show the message layout 
for the Dummy Air Track Message, Dummy Sur¬ 
face Track Message, and Dummy Subsurface 
Track Message. These are fictitious messages cre¬ 
ated for illustration purposes only. In these mes¬ 
sages the fields in each are identical down through 
CAL CONST. Beyond CAL CONST the fields are 
different. This layout suggests that these messages 
can be defined as one discriminated record. 


23i t £0i i l |16[ l 1 i 1 ?! i l I i l*i l l >0 


MESSAGE TYPE 


NLABGROFWOR08 


X DISTANCE 


SOURCE DEST 


TRACK NUMBER 


CCNFFM STRENGTH 


GMT 


POSID 


DEPTH 


GMT 


CALCONST 


TYPE 


CLASS 


TEST WORD 


4 

Words 

6 


10 


Bits 


231 I ,20, , , ,tfc 

1 1 . I«| 


MESSAGE TYPf 


NU&BER OF WORDS 

X DISTANCE 

Y DISTANCE 

Z DISTANCE 

SOURCE 

CEST 


X VELOCITY 

TRACK NUMBER 

Y VELOCITY 

ccrrFM 

STRENGTH 

Z VELOCITY 

GMT 


GMT 



ALTITUDE 

CAL CONST 

TEST WORD 


0 

2 

4 

Words 

E 

8 

10 


Figure 6. Dummy air track message. 


Bits 


23l_L I 1 l 1 ll* 

i i i®i l l i*i * i 

MESSAGE TYPE - 

NUMBER OF WORDS 

X DISTANCE 

Y DISTANCE 

Z DISTANCE 

SOURCE 

DEST 

J 

X VELOCITY 

TRACK NUMBER 

Y VELOCITY 

CONFHM 

STRENGTH 

Z VELOCITY 

GMT 




TYPE 

CLASS CAL CONST 

POSID FP 

1 

COUNTRY COOS 

TEST WORD 


0 

2 

4 

Words 

6 

8 

10 


Figure 7. Dummy surface track 
message. 


Figure 8. Dummy subsurface track 
message. 


Figure 9 shows the BMD prompts and user 
inputs used to generate the dummy track message 
definitions. Again, all user inputs are given in ital¬ 
ics. In this example the user, Sally, selected the 
UYK_43 as the target, indicates that message size 
is 24 bits and that message objects will not be cre¬ 
ated. Sally’s responses indicate the message name 
is Track and will be defined as a discriminated 
record. She defined the discriminant as Msg. The 
user has three choices when defining the dis¬ 
criminant type. It can be (1) of type Boolean, (2) 
of a type defined in another package specification 
or (3) of a type defined by the user. When it is 
defined by the user, the type definition will be 
declared in the package created. In figure 9, Sally 
defined the discriminant type as Global_Data. 
Message_Type. Next, the fields, Number_of_ 
Words through Cal_Const are defined to be com¬ 
mon to all values of the discriminant. Then Sally 
indicated the first value of the discriminant is Air, 
and message fields for the discriminant value Air 
are Altitude, FF_A, and TestWord_A. The same 
process was followed for the discriminant values 
Surface and Sub_Surface. When Sally entered a 
to indicate there were no more values for the 
discriminant, the BMD created the output file, 
track_file., and the BMD terminated. The fields, 
Message_Type, FF_A, TestWord_A, FF_S, 
TestWord_S, FF_SS, and TestWord_SS were de¬ 
fined to be of types defined in package 
Global Data. 


14 














































run hmd 

Kntar user mm >tally 

Kntar targat environment (VAX ADA,ADA L,ADA M,SON_TXL,SOH_ALSYS) 

>Ada_I 

Kntar nama of fila that will contain apaca >tracM_flla. 

Kntar numbar of bits in a maeaage word >24 

Kntar nama of package opacification to craata >Track_Maaaaga 
Kntar name of meeeage group >Track 
Craata naaaaga objecta (Y or V)? >n 

Kntar naaaaga nanaa in nag group. Kntar for last mag. 

1 > Trade 

2 >; 

You aza now raady to antar fialda for all maaaagaa. 

Kntar for laat fiald. 

Za Naaaaga Track going to uaa diacriminatad racor do (Y or K )7 >y 
What la tha Diacriminate'a nana? >Msg 

Kntar typa (Boolaan | Packaga_Hajna.Typa_Hama | Typa Kama) of dlacrlminant 
>Clobal_Data.Haaaaga_Typ a 

Kntar atart word numbar and atart bit poaltion for fiald. Nag > 0,16 
Kntar and word numbar and and bit poaltion for fiald. Nag >0,23 
Doaa naaaaga Track contain fialda common bo all valuaa of 
diacrlmlnata (Y or K)? >y 

Kntar fiald information for fialda common to all valuaa of Nag 

Kntar ';' to and dafinitlon of common fialda 

Kntar KIKLDJUMX [PACKAGXJNANK.TYPX_HAKK] [DKTAJ0XT_VAUJK] 

Track 1 >MUmbar_of_Norda 

Kntar atart word numbar l atart bit poaltion of fiald (ww, bb) >0,0 
Kntar and word numbar 6 and bit poaltion of fiald (ww,bb) > 0,11 

Track 4 >X_Dlmtancm 

Kntar atart word numbar 6 atart bit poaltion of fiald (ww, bb) >1,0 
Kntar and word numbar 6 and bit poaltion of fiald (ww,bb) >1,23 

Track 5 >X_DXatancm 

Kntar atart word numbar 6 atart bit poaltion of fiald (ww, bb) >2, 0 
Kntar and word numbar 6 and bit poaltion of fiald (ww,bb) >2,23 

Track 6 >X_Dletanca 

Kntar atart word numbar c atart bit poaltion of fiald (ww,bb) >3, 0 
Kntar and word numbar 6 and bit poaltion of fiald (ww,bb) >3,23 

Track 7 >X_ Velocity 

Kntar atart word numbar 6 atart bit poaltion of fiald (ww, bb) >4,0 
Kntar and word numbar 6 and bit poaltion of fiald (ww,bb) >4,12 

Track 8 >Daat 

Kntar atart word numbar a atart bit poaltion of field (ww, bb) >4,14 
Kntar and word numbar 6 and bit poaltion of field (ww,bb) >4,18 

Track 9 >Sourea 

Kntar atart word numbar 6 atart bit poaltion of fiald (ww,bb) >4,19 
Kntar and word numbar t and bit poaltion of fiald (ww, bb) >4,23 

Track 10 >r_ Velocity 

Kntar atart word nimber 6 atart bit poaltion of fiald (ww, bb) >5, 0 
Kntar and word numbar 6 an bit poaltion of fiald (ww,bb) >5, 12 

Track 11 >Track_Jfumber 

Kntar atart word nwber & atart bit poaltion of fiald (ww, bb) >3,13 
Kntar and word number S and bit poaltion of fiald (ww,bb) >5,23 


Figure 9. Prompts and user input for dummy track messages for AN/UYK-43 
Ada_L target. 


15 







Track 12 >X_Valocity 

kntar start word number £ start bit position of field (ww,bb) >6,0 
Kntar and word numbsr £ and bit position of flaid (wv,bb) >6,12 
Track 13 >Strmngth 

inter start word nwbar £ start bit position of fiald (wv, bb) >6,13 

Kntar and word number £ and bit position of fiald (vw,bb) >6,18 
Track 14 Confirmation 

Kntar start word numbar £ start bit position of fiald (wv, bb) >6,19 

Kntar and word numbar A and bit position of fiald (ww, bb) >6,23 

Track 15 >0471 

Kntar start word mnbar £ start bit position of fiald (ww, bb) >7,0 
Kntar and word numbar £ and bit position of fiald (ww,bb) >7,23 

Track 15 >0472 

Kntar start word numbar £ start bit position of fiald (ww,bb) >8,0 
Kntar and word numbar £ and bit position of fiald (ww,bb) >8,3 

Track 17 >C*l_Coaat 

Kntar start word numbar 6 start bit position of fiald (ww, kb) >9,0 
Kntar and word number ( and bit position of fiald (ww,bb) >9, 7 
Track 17 >; 

Kntar possibla valua takan by Msg 

Kntar ';' if tfaara ara no more possibla values 

>GlobmlJDmt*. Air 

Kntar fiald information naadad for tbis valua of discriminate 
Kntar ';' to and definition of fields for tbis valua 
Kntar KIKLDJMHK [PACKA£K_KAMK. TYPX_)UMK ] [DKTJUJLTJVALOK] 

Track 1 >Alt itude 

Kntar start word numbar £ start bit position of field (ww,bb) >9,0 

Kntar and word numbar £ and bit position of field (ww, bb) >9,18 
Track 2 >TT_A Clobal_Data.TT_Typa 

Kntar start word number £ start bit position of fiald (ww, bb) >9,19 

Kntar and word number c and bit position of fiald (ww,bb) >9,23 
Track 3 >TaatHord_A Clobal_Data . TaatWord_Typa 88777777778 

Kntar start word numbar £ start bit position of fiald (ww, bb) >10,0 

Kntar and word numbar £ and bit position of fiald (ww,bb) >10,15 
Track 4 >; 

Kntar possible valua takan by Msg 

Kntar ';' if there ara no store possibla values 

Global JData.Surface 

Kntar field information naadad for this value of discriminate 
Kntar 'to and definition of fields for this valua 
Kntar riXLDJUMK [FACKAGX_HAMK.TYPI_HAMK] [DKTADLT_VALOZ] 

Track 1 >Clmaa__A 

Kntar start word number fi start bit position of fiald (ww, bb) >9,8 
Kntar and word numbar £ and bit position of fiald (ww,bb) >9,13 
Track 2 >Typa_S 

Kntar start word numbar £ start bit position of field (ww, bb) >9,14 
Kntar and word numbar £ and bit position of fiald (ww,bb) >9,18 
Track 3 >Country_Cod* 

Kntar start word numbar £ start bit position of fiald (ww,bb) >10,0 
Kntar and word number £ and bit position of fiald (ww,bb) >10,11 
Track 4 >TT_8 Global_D*ta ,TT_Typm 


Figure 9. (Continued) Prompts and user input for dummy track messages for 
AN/UYK-43 Ada_L target. 


16 





Inter itut word number a start bit position of fisid (ww,bb) > 10,13 
Inter and word number a and bit position of fiald (ww,bb) > 10,17 
Track S >Poa_ID_S 

Xntar start word number a start bit position of field (ww,bb) >10,18 

Track 3 >Country_Codm 

Inter end word number a end bit position of field (ww,bb) >10,23 
Track 6 >Testword_S Global_Data.TaatWord_Typa 88777777778 

Inter start word number a start bit position of field (ww,bb) >11,0 

Inter end word number a end bit position of field (ww,bb) >11,23 
Track 7 >; 

Inter possible value taken by Msg 

Inter ';* if there are no store possible values 

>Global_Data.Sub_SurZacm 

Inter field information needed for this value of discriminate 
Inter ';' to end definition of fields for this value 
Inter FIIlD_SMfll [PACXACXJKAMX. TYPI_HAMX ] [DITMJLT_VALOI] 

Track 1 >Depth 

Inter start word number a start bit position of field (ww,bb) >9,9 
Inter end word number a end bit position of field (ww,bb) >9,17 

Track 2 >Claaa_S3 

Inter start word number a start bit position of field (ww,bb) >10,0 
Inter end word number a end bit position of field (ww, bb) >10,4 

Track 3 >Typa_SS 

Inter start word number a start bit position of field (ww,bb) >10,5 
Inter end word number a end bit position of field (ww,bb) >10,9 

Track 4 >TT_SS Clobal_Data. TT_Typa 

Inter start word number a start bit position of field (ww,bb) >10,10 
Inter end word number a end bit position of field (ww, bb) >10,14 
Track 5 >Pom_ID_SS 

Inter start word number a start bit position of field (ww,bb) >10,19 
Inter end word number a end bit position of field (ww,bb) >10,23 
Track 6 >Ta»t_WordjS8 Global_Data.Tast*ord_Typa 88777777778 

Inter start word number a start bit position of field (ww,bb) >11,0 
Inter end word number a end bit position of field (ww,bb) >11,15 
Track 7 >; 

Inter possible value taken by Msg 

Inter ';* if there are no more possible values 

e 

8 

The package specification TrackJMessage includes the 
Track messages below. 

Track 

The file you created is :track_file. 

Bit-Oriented Message Definer (BID) has completed. 


Figure 9. (Continued) Prompts and user input for dummy track messages for 
AN/UYK-43 AdaJL target. 


17 









Figure 10 shows package GlobalJData, which 
contains type definitions for global message data 
used by the package created above. Package 
Global_Data was created by hand. 


Figure 11 depicts the discriminated record 
message definition for the Dummy Air, Dummy 
Surface, and Dummy Subsurface Messages. This 
figure contains the source code generated for the 
BMD prompts and user inputs shown in figure 9. 


18 









with Clobal_Data; 
ptckag* InckJlttMg* la 

— Osar lua: sally 

— Flla naaa is: track_flla. 

— Targat anvlronmant: ADA_L 

— Vumbar of hits In typa Tntagar for targat anvlronmant: 32 

— Busbar of hits in maaaaga word: 24 

— Data packaga opacification craatad: 8/ 29/ 90 

— Tima packaga apaclfication craatad: 16: 30: 55 

— Tha following stataoants ara for Track moa saga a: 

typa XntagarOl ia ranga 0.. 1; 

for IntagarOl'siza usa 1; 

typa Intagar02 ia ranga 0..2**2-l; 

for Intagar02'alca usa 2; 

typa ZntagarOS la ranga 0..2**3-l; 

for Xntagar03'aiza usa 3; 

typa Xntagar04 is ranga 0..2**4-l; 

for Xntagax04'slza usa 4; 

typa XntagarOS la ranga 0..2**5-l; 

for Xntagar05'sixa uaa 5; 

typa Xntagar06 is ranga 0..2**6-l; 

for Xntagar06'aiza usa 6; 

typa Xntagar07 ia ranga 0..2**7-l; 

for Xntagar07'slza uaa 7; 

typa Xntagar08 la ranga 0..2**8-l; 

for Xntagar08'aira uaa 8; 

typa Xntagar09 ia ranga 0..2**9-l; 

for Xntagar09'aiza uaa 9; 

typa XntagarlO la ranga 0..2**10-1; 

for XntagarlO'aiza uaa 10; 

typa Intagarll is ranga 0..2**11-1; 

for Xntagorll'aiza uaa 11; 

typa Xntagarl2 ia ranga 0..2**12-1; 

for Xntagarl2'alza usa 12; 

typa Intagarl3 la ranga 0..2**13-1; 

for Xntagarl3'sixa uaa 13; 

typa Xntagarl4 ia ranga 0..2**14-1; 

for Xntagarl4'aiza uaa 14; 

typa Xntagarl5 ia ranga 0..2**15-1; 

for Xntagarl5'siza uaa 15; 

typa Xntagarl6 la ranga 0..2**16-1; 

for Xntagarl6'siza uaa 16; 

typa Xntagarl7 is ranga 0..2**17-1; 

for Xntagarl7'aiza uaa 17; 

typa Xntagarl8 is ranga 0..2**18-1; 

for XntagarlO'siza usa 18; 

typa Xntagarl9 is ranga 0..2**19-1; 

for Xntagarl9'slza uaa 19; 

typa Xntagar20 ia ranga 0..2**20-1; 

for Xntagar20'slza uaa 20; 

typa Xntagar21 la ranga 0..2**21-1; 

for Xntagar21'slza uaa 21; 

typa Xntagar22 is ranga 0..2**22-l; 

for Xntagar22'siza uaa 22; 


Figure 11. Dummy track message definitions for AN/UYK-43 Ada_L target. 


19 







typa Xntagax23 la rang* 0..2**23-l; 

tor Xntagar23'alza uaa 23; 

typa Xntagar24 la rang* 0..2**24-l; 

tor Iatagax24'8lza uaa 24; 

typa Xntagar25 la rang* 0..2**25-l; 

tor Xntagar25'alza uaa 25; 

typa Intagar26 la rang* 0..2**26-l; 

tor Xntagar26'alza uaa 26; 

typa Xntagar27 la ranga 0..2**27-l; 

fox Zntagax27'alza uaa 27; 

typa Xntagar28 la ranga 0..2**28-l; 

tor Zntagar28'alza uaa 28; 

typa Xntagar29 la ranga 0..2»*29-l; 

tor Xntagar29'alza uaa 29; 

typa Xntagar30 la ranga 0..2**30-l; 

for Xntagar30'alza uaa 30; 

typa Xntagar31 la ranga 0..2**31-1; 

for lntagarll'alza uaa 31; 

typa Xntagar32 la ranga -2**31..2**31-1; 

for Intagar32'alza uaa 32; 

typa Track_Maaaaga_Raoord_Typa (Mag : Clobal_Data.Maaaaga Typa) la 
racord 


Sumba r_o f_Worda 

: Intagarl2; 

X_Dlatanca 

: lntagar24; 

Y~Dlatanca 

: lntagar24; 

Z Dlatanca 

: lntagar24; 

X~Valoclty 

: intagarlS; 

Daat 

: lntagar05; 

Sourea 

: intagarOS; 

Y_Valocity 

: IntagarlS; 

Track Mumbar 

: lntagarll; 

ZJValoclty 

: lntagar!3; 

Strangth 

: lntagar06; 

Confirmation 

: lntagar05; 

CMT1 

: lntagar24; 

CMT2 

: IntagaxOC; 

Cal_Conat 

caaa Mag la 

whan Global Data.Air *> 

: lntagar08; 

Altltuda 

: lntagarll; 

rr_x 

; Clobal_Data.TT_Typa; 

TaatWord_A 

: Global Data.TaatWord Typa : 
8#77777777f; 

whan Clobal_Data.Surfaca 

»> 

Claaa_s ~ 

: Zntagar06; 

Typ«_s 

: Zntagar05; 

Country Coda 

: Xntagaxl2; 

nr s 

: Global_Data.IT_Typn; 

Poa_ID_S 

: Clobal_Data.IT~Typa; 

TaatwordjS 

: Global~Data.TaatMord_Typa : 


81777777771; 


whan Clobal_Data.8ub_Surfaca -> 

Dapth : Zntagax09; 

Claaa_88 : Intagar05; 


Figure 11. (Continued) Dummy track message definitions for AN/UYK-43 
Ada_L target. 


20 






Typo 88 : Xnt*g*r05; 

FT 88 : Clob*l_D*t«. FT_Typ*; 

Pow ID as : Glob*l~D*ta. FT~Typ*; 

T«»t Word 88 : Global* Data. Taatword_Typa : * 

8#77777777#; 

and caaa; 

and raoord; 

for Track MaaaagajRaoordJXypa uaa racord at mod 1; 


■unfear of Worda 

at 

0 

rang# 

0 . . 

11; 

Mag 


0 

rang* 

1C . 

. 23; 

X_Diatanca 

at 

0 

rang* 

24 . 

. 47; 

Y_Dlatanca 

at 

0 

rang* 

48 . 

. 71; 

I Dlatanci 

at 

0 

rang* 

72 . 

. 95; 

X_Valoclty 

at 

0 

rang* 

96 . 

. 108; 

Da at 

at 

0 

rang* 

110 

. . 114 

Sourca 

at 

0 

rang* 

115 

. . 119 

Y_Valodty 

at 

0 

rang* 

120 

. . 132 

Track Vumbar 

at 

0 

rang* 

133 

. . 143 

t_Valoclty 

at 

0 

rang* 

144 

.. 156 

Strangth 

at 

0 

rang* 

157 

. . 162 

Confirmation 

at 

0 

rang* 

163 

. . 167 

earn 

at 

0 

rang* 

168 

.. 191 

CMT2 

at 

0 

rang* 

192 

. . 197 

Cal Conat 

at 

0 

rang* 

216 

. . 223 

Xltltuda 

at 

0 

rang* 

224 

. . 234 

nr a 

at 

0 

rang* 

235 

. . 239 

T«atWord_A 

at 

0 

rang* 

240 

. . 255 

Claaa S 

at 

0 

rang* 

224 

. . 229 

Typa_8 

at 

0 

rang* 

230 

.. 234 

Country Coda 

at 

0 

rang* 

240 

. . 251 

IT 8 

at 

0 

rang* 

253 

. . 257 

Poa_ID_8 

at 

0 

rang* 

258 

.. 263 

Taatvord 8 

at 

0 

rang* 

264 

. . 287 

Dapth ** 

at 

0 

rang* 

225 

. . 233 

Claaa_S3 

at 

0 

rang* 

240 

. . 244 

Typa SS 

at 

0 

rang* 

245 

. . 249 

IT SS 

at 

0 

rang* 

250 

. . 254 

Poa ID SS 

at 

0 

rang* 

259 

. . 263 

Taat Word SS 

at 

0 

rang* 

264 

. . 279 


and racord; 


and Track_Maaaaga; 


Figure 11. (Continued) Dummy track message definitions for AN/UYK-43 
Ada_L target. 


21 







REFERENCE 

Naval Sea Systems Command. 1982. “Interface 
Design Specification Inertial Navigation Set 
AN/WSN-5 to External Computer for Paral¬ 
lel Channels B and C,” NAVSEA 
T9427-AA-IDS-010/WSN-5. 

BIBLIOGRAPHY 

Management Assistance Corporation of America 
(MACA). 1989. “Ada Software (ASR) 
Master Index.” 

Mumm, H., and R. Ollerton. 1990. “User's 
Guide to an Event-Activation Record 
Approach to Simulation Modeling in Ada.” 
NOSC TD 1944. Naval Ocean Systems Cen¬ 
ter, San Diego, CA. 

Myers, B., and A. Cappellini. 1987. “The Use 
of Representation Clauses and Implementa¬ 
tion-Dependent Features in Ada: I. Over¬ 
view." CMU/SEI-87-TR-14, Software 
Engineering Institute. 

Telesoft. 1989. “The Telesoft Second Genera¬ 
tion Ada Development System, TeleGen2 
for Sun380/UNIX, User Guide,” 
CVR-1425N- Vl.l(386i/UNIX). 


ABBREVIATIONS AND 
ACRONYMS 


ABOM 

Ada Bit-Oriented Message 
Handler 

BMD 

Bit-Oriented Message Defined 

CDS 

Combat Direction System 

C 2 P 

Command and Control Processor 

INS 

AN/WSN-5 Inertial Navigation 
System 

LRM 

Language Reference Manual 

NASTEE 

Network Architecture Simulated 
Test and Evaluation Environment 

NOSC 

Naval Ocean Systems Center 

NSWC 

Naval Surface Warfare Center 

SAIC 

Science Applications 

International Corporation 

SEI 

Software Engineering Institute 


22 





APPENDIX A: 
LESSONS LEARNED 


printer was helpful in making the style of the Ada 
code written by the two authors consistent and in 
improving the code readability. 


Lessons were learned in a number of areas 
during the development, testing, and use of the 
BMD. 

1. Reuse 

Existing software contributed to the develop¬ 
ment of the BMD in two ways. First, the Network 
Architecture Simulated Test and Evaluation Envi¬ 
ronment (NASTEE) software developed by 
NOSC, Code 854, provided useful examples of 
how automatic code generation is done in Ada. 

Second, source code was reused from other 
projects. Code reused included a linked list pack¬ 
age from the Event-Activation Record Approach 
to Simulation Modeling in Ada libraries developed 
by NOSC, Code 854, and several subprograms for 
manipulating character strings from the INS devel¬ 
oped by the SEI. 

The reuse of existing code resulted in faster 
BMD development with better written compo¬ 
nents. 

The source lines of code for the BMD and 
source lines of code reused is summarized below. 


Delimiting 

Comments Delimiting 

Card-Image 

Semicolon 

Semicolon Stmts 

Lines 

Statements 

& Comments 



BMD 

1243 

344 

1587 

3380 

reused 

216 

151 

367 

657 


2. Tools 

The most helpful tools for this project (other 
than the compilers) were the Vax Ada Debugger 
and the NASA/Goddard Space Flight Center 
Standard Pretty Printer. The pretty printer was 
extracted from the Ada Software Repository 
(ASR) at White Sands Missile Range, New Mex¬ 
ico. A debugger was not used for development on 
the Sun but was used for the Vax; the Vax 
debugging was significantly faster. The pretty 


3. Portability 

One goal of the project from the beginning 
was that the BMD would be 100 percent trans¬ 
portable across the Vax Ada and "un Telesoft 
environments, that is, the same software would 
run in each environment without changing one 
line of source code. This goal was achieved. Care 
was taken to not use any software that would limit 
the BMD to Vax/VMS or Sun/Unix. The BMD 
has also been successfully compiled and executed 
in a Sun Alsys environment. 

Two potential obstacles to portability were the 
difference in file names for VMS versus Unix and 
the difference in the size of the type integer for 
the two compilers. Type integer is 32 bits for Vax 
Ada and 16 bits for Sun Telesoft. The difference 
in file names was handled by examining the con¬ 
tents of System.System_Name to determine the 
compiler/operating system BMD was running on. 

The difference in the size of type integer for 
the compilers was handled by declaring the integer 
type below. The predefined integer type was not 
used. 

type Interger_Type is range 0..2147483647; 

The upper bound on the range is 2**31-1. 
The lower bound is zero because the BMD does 
not use any negative integers. The Sun Telesoft 
and Sun Alsys compilers automatically make Inte- 
ger_Type of type long_integer. 

Declaring your own type for integer rather 
than using the predefined integer type is one port¬ 
ability guideline in Nissen, 1988. This guideline 
and others in Nissen, 1988 were followed. If this 
guideline had not been followed then the BMD 
would not have ported from the Vax Ada to the 
Sun Telesoft environment. 

Portability was also ensured by the sequence 
of demonstrations, that is, there was one on a 
Vax, followed by a Sun demonstration, and then 
one on a Vax again. 


A-l 








4. Testing 

Testing was done by first compiling message 
definition code generated by the BMD. Then a 
test program was run that printed out the values of 
the message fields using the message definition 
generated by the BMD. This testing was done for 
each of the target environments. The source code 
generated for each of the five targets compiled 
with no errors. 

Executing the test program in each target 
environment has been less successful. The test 
program executed successfully in the Vax Ada 
and Sun Alsys environments. It did not execute 
properly with the Sun Telesoft and ALS/N com¬ 
pilers. The problem with these compilers appears 
to be the record representation clauses do not 
work properly. 

The test program was run using the Telesoft 
Version 1.1 compiler for a Sun 3861 computer. 
When using the Telesoft compiler the alignment 
of fields within a message were displaced 1 byte. 
A trouble report was submitted to Telesoft’s cus¬ 
tomer service group. A Telesoft representative 
ran the test program on both the Sun 3861 
Telesoft and Sun 4 Telesoft compilers. She said 
the alignment problem is a compiler bug that 
exists with both compilers and that Telesoft is fix¬ 
ing it. 

For the ALS/N compiler, the test program 
was executed on the Ada Vax compiler. A con¬ 
straint error was raised when the test program 
attempted to print out a 16-bit test word. An 
error report has been submitted to the ALS/N 
program office. Testing involving the execution of 
Ada_L 

and Ada_M generated object code on the 
AN/UYK-43 and AN/UYK-44 computers is cur¬ 
rently being done. 

A lesson learned during testing of the BMD is 
validation testing for Ada compilers needs to be 
more comprehensive. The compilers for the five 
target environments all passed validation. How¬ 
ever, three have problems related to record repre¬ 
sentation specifications. Currently, record 
representation specifications and other compiler 
dependent features covered in Chapter 13 of the 


Langua^i Reference Manual (LRM), (United 
States Department of Defense, 1983), are omitted 
from validation testing. These feahtres must be 
tested during validation to keep erroneous compil¬ 
ers from going to the field. 

5. Timing Comparisons - Manual versus 
BMD 

A preliminary version of the BMD was used 
by SAIC to define bit-oriented messages for the 
ABOM project. SAIC manually wrote the source 
code to define link-11, link-4a, and link-16 mes¬ 
sages. The CDS message definitions were gener¬ 
ated using the BMD. SAIC reported that message 
definitions were created twice as fast when using 
the automated tool. SAIC used the tool to gener¬ 
ate approximately 7000 lines of source code 
defining the CDS messages. 

One of the authors, (HM), manually wrote 
the message definitions for four INS messages 
targeted for the AN/UYK-43 and then generated 
them using the BMD. The task required 2 hours 
and 14 minutes to do manually and 25 minutes to 
do with the BMD. After writing the code by hand, 
three compilations were required to fix errors. 
The BMD-generated code compiled error-free the 
first time. 

6. Lack of a Formal Design Methodol¬ 
ogy 

No formal design methodology was used in 
developing the BMD. At the beginning it did not 
seem necessary. It appeared that the tool would 
remain small and uncomplicated. However, it 
grew in size and complexity. Ultimately, the use of 
a formal design methodology would have made it 
easier for the authors to change and enhance the 
code. 

7. Lack of a Configuration Management 
Tool 

No configuration management tool was used 
during the development of the BMD. At the 
beginning it did not seem necessary since only two 
people would be writing the tool. In hindsight, a 
configuration management tool would have been 
useful. 


A-2 



REFERENCES 


Nissen, J., and P. Wallis. 1988. Portability and 
Style, Cambridge University Press, Cam¬ 
bridge, England. 

United States Department of Defense. 1983. 
“Reference Manual for the Ada Program¬ 
ming Language,” ANSI/MIL-STD-1815A, 
Honeywell, Minneapolis, MN. 


A-3 




REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-0188 


Public re porting burden lor (his collection of Information Is estimated to average 1 hour per response. Including the time for reviewing Instructions, searching existing data sources, gathering and 
maintaining the data needed, and completing and reviewing the collection of Information, Send comments regarding this burden estimate or any other aspect of this collection of Information, Including 
suggestions for reducing this burden, to Washington Headquarters Services. Directorate for InformattonOperatlons and Reports. 121SJefferson Davis Highway. Suite 1204, Arlington, VA 22202-4302. 
and to the Office of Management and Budget. Paperwork Reduction Project (0704-0188). Washington, DC 20503. _ 


2. REPORT DATE 3. REPORT TYPE AND DATES COVERED 


1. AGENCY USE ONLY (Leave blank) 


December 1990 


Final: Oct 89 — Sep 90 


4 TITLE AND SUBTITLE 

BMD/ADA BIT-ORIENTED MESSAGE DEFINER 
A Tool to Define Bit-Oriented Messages in Ada 


8. AUTHOR(S) 

R. H. Mumm and S. A. Parker 


5. FUNDING NUMBERS 

PR: ZE91 
WU: DN3000040 
PE:0602936N 


7. PERFORMING ORGANIZATION NAME(S) AND ADORESSfES) 

Naval Ocean Systems Center 
San Diego, CA 92152-5000 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

NOSC TR 1384 


9 SPONSORING/MONfTORING AGENCY NAME(S) AND ADORESSfES) 

Office of Chief of Naval Research 

Independent Exploratory Development Programs (IED) 

OCNR-20T 

Arlington, VA 22217 


12a DISTRIBLmON/AVAILABUJTY STATEMENT 


Approved for public release; distribution is unlimited. 


13. ABSTRACT (Maximum 200 words) 


10 SPONSORING/MONfTORING 
AGENCY REPORT NUMBER 




The Bit-Oriented Message Definer (BMD) is a portable interactive software tool for automatically generating Ada source 
code that defines bit-oriented messages. The BMD can help reduce the development costs for Ada software that process bit-ori¬ 
ented messages. 



17 SECURITY CLASSIFICATION 
OF REPORT 


18. SECURITY CLASSIFICATION 
OF THIS PAGE 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 


15. NUMBER OF PAGES 


16. PRICE COOE 


20. LIMITATION OF ABSTRACT 


UNCLASSIFIED 


UNCLASSIFIED 


UNCLASSIFIED 


SAME AS REPORT 


NSN 7840-01 -280-5800 


Standard term 298 

























INITIAL DISTRIBUTION 


Code 0012 

Patent Counsel 

(1) 

Code 0144 

R. November 

(1) 

Code 402 

B. Wasilausky 

(1) 

Code 41 

A. Justice 

(1) 

Code 411 

D. Hayward 

(1) 

Code 411 

H. Mumm 

(20) 

Code 952B 

J. Puleo 

(1) 

Code 961 

Archive/Stock 

(6) 

Code 964B 

Library 

(3) 

Defense Technical Information 

Center 

Alexandria, VA 

22304-6145 


NOSC Liaison Office 


Washington, DC 

20363-5100 


Center for Naval Analyses 


Alexandria, VA 

22302-0268 


Naval Surface 

Warfare Center 


Dahlgren, VA 

22448-5000 


Headquarters, 

CECOM 


AMSEL-RD-AIN-TP 


Fort Monmouth, 

NJ 07703 


UNISYS 



St Paul, MN 55164 



(4) 

( 1 ) 

( 1 ) 

( 1 ) 

( 1 ) 

( 1 ) 


SAIC COMSYSTEMS 
San Diego, CA 92121 


( 1 ) 



