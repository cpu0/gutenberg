Software 


(j§>) Dynamically Alterable Arrays 
of Polymorphic Data Types 

An application library package was de- 
veloped that represents data packets for 
Deep Space Network (DSN) message 
packets as dynamically alterable arrays 
composed of arbitrary polymorphic data 
types. The software was to address a limi- 
tation of the present state of the practice 
for having an array directly composed of a 
single monomorphic data type. This is a 
severe limitation when one is dealing with 
science data in that the types of objects 
one is dealing with are typically not 
known in advance and, therefore, are dy- 
namic in nature. The unique feature of 
this approach is that it enables one to de- 
fine at run-time the dynamic shape of the 
matrix with the ability to store polymor- 
phic data types in each of its indices. Exist- 
ing languages such as C and C++ have the 
restriction that the shape of the array 
must be known in advance and each of its 
elements be a monomorphic data type 
that is strictly defined at compile-time. 
This program can be executed on a vari- 
ety of platforms. It can be distributed in 
either source code or binary code form. It 
must be run in conjunction with any one 
of a number of Lisp compilers that are 
available commercially or as shareware. 

This program was written by Mark James 
of Caltech for NASA's Jet Propulsion Lab- 
oratory. FFurther information is contained 
in a TSP (see page 1). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(626) 395-2322. Refer to NPO-42071. ' 


Identifying Trends in Deep 
Space Network Monitor Data 

A computer program has been devel- 
oped that analyzes Deep Space Network 
monitor data, looking for changes of 
trends in critical parameters. This pro- 
gram represents a significant improve- 
ment over the previous practice of man- 
ually plotting data and visually inspecting 
the resulting graphs to identify trends. 
This program uses proven numerical 
techniques to identify trends. When a sta- 
tistically significant trend is detected, 
then it is characterized by means of a 
symbol that can be used by pre-existing 


model-based reasoning software. The 
program can perform any of the follow- 
ing functions: 

• Given an expectation that data in a 
given list should exhibit an upward, 
downward, constant, or unknown trend, 
it can determine whether the data do or 
do not follow such a trend. 

• Given a list of data, it can identify which 
of the aforementioned trends the data 
follow. 

• Given two lists of data, it can deter- 
mine whether or not both follow the 
same trend. 

This program can be executed on a va- 
riety of computers. It can be distributed in 
either source code or binary code form. It 
must be run in conjunction with any one 
of a number of Lisp compilers that are 
available commercially or as shareware. 

This program was written by Mark James 
of Caltech for NASA’s Jet Propulsion Lab- 
oratory. Further information is contained in 
a TSP (see page 1 ). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(626) 395-2322. Refer to NPO-42107. ' 


fjg; Predicting Lifetime of 
a Thermomechanically 
Loaded Component 

NASALIFE is a computer program for 
predicting the lifetime, as affected by 
low cycle fatigue (LCF) and creep rup- 
ture, of a structural component subject 
to temporally varying, multiaxial ther- 
momechanical loads. The component 
could be, for example, part of an aircraft 
turbine engine. Empirical data from 
LCF tests, creep rupture tests, and static 
tensile tests are used as references for 
predicting the number of missions the 
component can withstand under a given 
thermomechanical loading condition. 

The user prepares an input file con- 
taining the creep-rupture and cyclic-fa- 
tigue information, temperature-depend- 
ent material properties, and mission 
loading and control flags. The creep rup- 
ture information can be entered in tabu- 
lar form as stress versus life or by means 
of parameters of the Larson-Miller equa- 
tion. The program uses the Walker 
mean-stress model to adjust predicted 
life for ranges of the ratio between the 


maximum and minimum stresses. Data 
representing complex load cycles are re- 
duced by the rainflow counting method. 
Miner’s rule is utilized to combine the 
damage at different load levels. Finally, 
the program determines the total dam- 
age due to creep and combines it with 
the fatigue damage due to the cyclic 
loading and predicts the approximate 
number of missions a component can 
endure before failing. 

This work was done by Pappu L. N. 
Murthy of Glenn Research Center, John 
Z. Gyekenyesi of N&R Engineering and 
Management Services Corp., Subodh Mital 
of the University of Toledo, and David N. 
Brewer of the U. S. Army Aviation Systems 
Command. Further information is contained 
in a TSP (see page 1 ). 

Inquiries concerning rights for the commer- 
cial use of this invention should be addressed 
to NASA Glenn Research Center, Innovative 
Partnerships Office, Attn: Steve Fedor, Mail 
Stop 4-8, 21000 Brookpark Road, Cleveland, 
Ohio 44135. Refer to LEW-18081. 


@ Partial Automation of Re- 
quirements Tracing 

Requirements Tracing on Target 
(RETRO) is software for after-the-fact 
tracing of textual requirements to support 
independent verification and validation 
of software. RETRO applies one of three 
user-selectable information-retrieval tech- 
niques: (1) term frequency/inverse docu- 
ment frequency (TF/IDF) vector re- 
trieval, (2) TF/IDF vector retrieval with 
simple thesaurus, or (3) keyword extrac- 
tion. One component of RETRO is the 
graphical user interface (GUI) for use in 
initiating a requirements-tracing project 
(a pair of artifacts to be traced to each 
other, such as a requirements spec and a 
design spec) . Once the artifacts have been 
specified and the IR technique chosen, 
another component constructs a repre- 
sentation of the artifact elements and 
stores it on disk. 

Next, the IR technique is used to pro- 
duce a first list of candidate links (poten- 
tial matches between the two artifact lev- 
els). This list, encoded in Extensible 
Markup Language (XML), is optionally 
processed by a “filtering” component de- 
signed to make the list somewhat smaller 
without sacrificing accuracy. Through the 


NASA Tech Briefs, December 2006 


17 


