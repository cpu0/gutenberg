AD-A257 374 

■Ilium 

ManigsmentandBuOgti wawiNv^wt.. 


1. AGENCY USE ONLY (Leave Blank) 2. REPORT DATE 3. REPORT TYPE AND DATES COVERED 

Final: 15 Sept 1992 

4. TITLE AND SUBTITLE 

Validation Summary Report; Meridian Software Systems, Inc., Meridian Ada, Version 
4.1.3, Essence 386 under DOS 5.0, running MS Windows 3.0 (Host & Target), 

920915W1.11267 

5. FUNDING NUMBERS 

LCl 

6, ALrrHOR(S) 

Wright-Patterson AFB, Dayton, OH 

nT 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) r-j p.^ 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676. Rm 135 NOVI 

Wright-Patterson AFB, Dayton, OH 45433 

^ 1 

mi 

I 

iBjH 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) ^ 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington. D.C. 20301-3081 

'10. SP0NS0RINGA40NIT0RING AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

^9|jj|9|20^ 

12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public.release; distribution unlimited. 


13. ABSTRACT (Maximum 200 words) 

Meridian Software Systems, Inc., Meridian Ada, Version 4.1.3, Essence 386 under DOS 5.0, running MS Windows 3.0 
(Host & Target), ACVC1.11. 

14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17. SECURITY Cl ASSIFICATION 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF REPORT OF ABSTRACT 

UNCLASSIFIED UNCLASSIFED UNCLASSIFIED 

20. UMrrATION OF ABSTRACT 


Tr:r 


ENTATION PAGE 


Form Approved 
OPMNo. 0704-0188 


()»1 houipwrMponM. IndudngihclinwIormvtMilnglnHniclioni^MUChingtiWingdiUMijreMgiltMnngindniainliiningVwdtfi 
ngIN*txjrdwiMliniaMor*fiyolhwMpM dIhiicolKllonol Honnatioa kckidingluggMIloialor reducing»iit buntm, 10 WifhingK)n 
1215 Joflomn Oovk Highway. SulU 1204. Artnglon. VA 22202-4302. and 1o «i* Ollica ol Moimalion and Ragdatory Aflan. Odlc* ol 


NSN 7540-01-280-550 


Standard Form 296. (Rev 2-80} 
Prescribed by ANSI Sid 239-128 

































Certificate Information 


The following Ada ii^plementation was tested and determined to pass AiCVC 
1.11. Testing was conf>leted on September 15, 1992. 

Con^iler Name and Version: Meridian Ada, Version 4.1.3 

Host Cocqputer System: Essence 386 

under DOS 5.0, running NS Windows 3.0 

Target Compter System: Essence 386 

under DOS 5.0, running MS Windows 3.0 

Customer Agreement Number: 91-06-12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
920915W1.11267 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB 45433-6503 








Ada ValicUtion Organization 

Directobv^nputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Por 

"ntTs ~€i»iAX 
ITiC tAM 
UiMaac»n«»4 
JuBtiriaatiMi 


- 

Availability Codes 
and/or 

Dlst i Special 


□ Q 




91-06-12-MSS 


Ada COMPILER 
VALIDATICW SUMMARY REPORT: 

Certificate Number: 920915W1.11267 
Meridian Software Systems, Inr. 

Meridieui Ada, Version 4.1.3 
Essence 386 under DOS 5.0, rvinning MS Windows 3.0 -> 
Essence 386 under DOS 5.0, ivnning MS Windows 3.0 


(FINAL) 


Prepared By: 

Ada_Validation_Faci1ity 
ASC/SCEL 

Wright-Patterson AFB 45433-6503 


HOLCF C0082 




Certificate Information 


Hie following Ada implementation was tested auid determined to pass ACVC 
1.11. Testing was coiqpleted on September 15/ 1992. 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Compiter System: Essence 386 

under DOS 5.0, running MS Windows 3.0 

Target Computer System: Essence 386 

under DOS 5.0, running MS Windows 3.0 

Customer Agreement Number: 91-06-12-MSS 

See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
920915W1.11267 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 





a 


aa Validation Facility 
Steven P. Wilson 
Technical Director 


ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 



Alexandria VA 22311 


Oh Organization 

iiiputer and Software Engineering Division 
or Defense Analyses 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


DECLARATION OF CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: Essence 386 

(under DOS 5.0, running MS Windows 3.0) 

Target Computer System: Same as Host 


Customer’s Declaration 

I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 

^ _ Date: [ ^ m 2- 

Stowe Boyd, President v 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine, CA 92718 




TABLE OF CONTENTS 


CHAPTER 1 INTRCMXJCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IHPLEMENTATICX4 DEPENDENCIES 

2.1 WITHDRAS«g TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MM)IFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRC»IMENT. 3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B CC»IPILATION SYSTEM OPTIOJS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 



















CHAPTER 1 


INTRODUCTION 


The Ada implementation described eibove was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Sumrary 
Report (VSR) gives an account of the testing of this Ada implementation. 
For any technical terms used in this report, the reader is referred to 
tPro90]. A detailed description of the ACVC may be foxjnd in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATIOJ SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the A^ Standard other than those presented. Copies of 
this report are available to the public from the AVF which performi^ this 
validation or from: 

National Technical information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language , 

ANSI/MIL-STI>-1815A, Febniary 1^83 and I^ B652-I987. 

[Pro90] Ada Ccanpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

tUG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, eind L. The first letter of a test name identifies the class to 
vhich it belongs. Class A, C, D, and E tests are executedsle. Class B and 
class L tests are expected to produce errors at conpile time and link time, 
respectively. 

The execut^d}le tests are vnritten in a self-checking memner euid produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result ^en they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpil^ and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Scxne of the class B tests contain legal Ada 
code vdiich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada in^leinentation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications describe in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada in^lementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target conpiter system to allow 

treunsfonnation of Ada programs into executable form and 

execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 

Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada cortpiler with its host conputer system and its target 

Inplementation conputer system. 

Ada Joint The part of the certification body vhich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the conpliance of an Ada 

Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Conpiter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Conpater 

System 

Validated Ada 
Conf}iler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity \4io enters into an agree¬ 
ment with an AVF which specifies the terms and conditions 
for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A computer system v^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragra|di>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has beer validated successfully 
either by AVF testing or by registration (Pro90]. 

*^0 process of checking the conformity of an Ada compiler to 
the Ada programming language aixl of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



C31APTER 2 


IMPLEHEmATlCM DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ai^ implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO aixi the AJPO known as Ada 
Commentaries and ccximonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






INPLEMEN1ATICX4 DEPENDENCIES 


Ihe following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX__DIGITS: 


C24113L..y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521I...Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C357i3B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FTiCAT,- for this inplementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
L0NG_FLOAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FTjQAT, L0NG_FL0AT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLGAT'FIRST..FLQAT'LAST may be used as a remge 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINEjOVERFLOWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inpleraentation, MACHINEjOVERFLOWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other them type 
DURATION; for this inplementation, there is no such type, 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (emd emy of its subunits) is conpiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the conpilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; for this inplementation, pragma INLINE 
has no effect unless the program is ccmpiled and linked using global 
optimization. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 




IMPLEMENTATIW DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

AE2101C and EE2201D..E (2 tests) use instantiations of paclcage 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this conpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this conpiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this inpleroentation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_I0 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

C:E3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


The following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised v4ien this association is a1::empted. 


CE2107B..E CE2107G..H €£2107^ CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 


2-3 



IMPLEMEmATION DEPENDENCIES 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inqplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 


2.3 TEST MODIFICATICWS 

Modifications (see section 1.3) were required for 9 tests. 

Ihe following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 

A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The conpiler rejects the use of the range 
FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks vdiether legal itfiits of a compilation are accepted 
if one of the conpilation units is illegal. This test was processed with 
compiler option "-fl", \diich forces the compiler to generate code for 
legal units of a compilation. 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
Al-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected the compiler. 


2-4 




CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada infilementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

William E. Crosby 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine, CA 92719 
(714) 727-0700 


For sales information about this Ada inplementation, contact: 

Meridian Software Systems, Inc. 

Attn: Jim Smith 
10 Pasteur Street 
Irvine, CA 92718 
(714) 727-0700 

Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 



PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inf}leinentation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a resxilt was 
obtained that conforms to the Ada Programming Language Stan^rd. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 emd 2.2 (counted in items b 
and f, below). 


a) Total Number of ^plicedsle Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3792 

95 

82 

0 


201 

283 

(c+d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. Ihe contents of the 
tape were loaded onto a Sun 3 system, transferred via a PC-NFS ethernet to 
a PC-class machine, and written onto diskettes. The contents of the 
diskettes were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. Test resiilts were 
transferred via diskettes and the PC-NFS ethernet back to the Sun 3 system, 
vdiere they were printed. 

Testing was performed using command scripts provided by the custcxner and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 




PROCESSING INFQPraVTION 


Switch 

Effect 

-fE 

Generate error file for the Ada listing utility. 

-fl 

Ignore conpilation errors and continue generating 
code for legal units within the same caoqjilation 
file (for test Ehl003B). 

-fQ 

Suppress "added to library" and "Generating code 
for" information messages. 

-fS 

Use 80286-specific instructions vdiere possible. 

-fV 

Enable overflow checking (this is normally not 
specified directly by the user but is always 
provided by the conpilation system). 

-fw 

Suppress informative warning messages. 

-1 

Produce a listing file. 

The following 
in the form - 

switches appear as modifiers to the -1 comnand, 
Icps: 

-c 

Produce continuous form Ada listings (no page 
headers. 

“P 

Obey PRAGMA PAGE directives within program even 
though the -c flag says not to generate page 
breaks. 

-s 

Output Ada listing to the standard output file 
instead of to a disk file. 

The following switches apply to the linker. 

-E 

Arrange for program to send Windows message when 
finished so Windows validation scripts can 
properly wait for a test to finish. 

-w<unit> 

Link program as if <unit> had been with'ed 1:^ the 
main procedure. Used with 'redir' to redirect 
test output to a file. 


Test output, coDopiler emd linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site 
the validation team vrere also archived. 


3-3 




APPENDIX A 


NACKO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

§BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


200 — Value of V 

(1..V-1 -> 'AS V »> '1') 

(1..V-1 -> 'A', V -> '2') 

(l..V^ -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 
t (1..V/2 «> 'A') & 

L (1..V-1-V/2 -> 'A') & '1' & 
(1..V-20 


$MAX_LEN INT BASED LITERAL 

"2:" u (1..V-5 -> '0') & "11:" 


A-1 




ra^CRO PARAMETERS 


Macro parameter Macro Value 

$MAX LEN REAL BASED LITERAL 

"16;" & (1..V-7 -> '0') & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 -> "A') & 

The following tadale lists all of the other macro parameters and their 
respective values. 

Macro Pareuneter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 2 

$COUNT_LAST 32766 

$DEFAULT_MEM_SIZE 1024 

$DEFAULT_STOR_UNIT 8 

$DEFAULT__SYS_NAME 18086 

$DELTA_DOC 2.0 * *(-31) 

$ENTRy_ADDRESS 16#0# 

$ENTRY_ADDRESS1 16#1# 

$ENTRY_ADDRESS2 16#2# 

$FIELD_LAST 32767 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLCIAT_NAME NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

$FORM_STRING2 "<»NNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATION 

90_000.0 

$GREATER THAN DURATION BASE LAST 

" ~ To 007 000.0 


A-2 



MACRO PARAMETERS 


Macro Parameter Macro Value 

$GREATER THAN FLOAT BASE LAST 

“ l.^E+308 

$GREATER_THAN FLOAT SAFE LARGE 

i.TTEaoa 

$GREATER_THAN SHORT FLOAT SAFB_LARGE 

1.0E308 

$H1GH_PRI0RITY 20 

$ILLEGAL_EXTERNAL_FILE_NAME1 

\j«3DIRECTORY\FILENAME1 

$ILLEGAL_E3CTERNAL_FILE_NAME2 

\^IC»IRECT0RY\FILENAME2 

$INAPPR0PR1ATE_LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.ADA") 

$INCLUDE_PRAaiA2 PRAGMA INCLUDE ("B28006F1 .ADA") 

$INTEGER_FIRST -32768 

$INTEGER_LAST 32767 

$INTEGER_LAST_PLUS_1 32768 

$INTERFACE_LANGUAGE C 

$LESS_THANJDURATION -90_0Q0.0 

$LESS THAN_DURATION BASE FIRST 

-1U_000_000.0 

$LINE_TERMINATOR ASCII.CR & ASCII.LF 

$LOW_PRIORITy 1 

$MACHINE_CODE STATEMENT 

INST1'(B1->16#90#); 

$MACHINE_CODE_TYPE INSTl 


A-3 




MACRO PARAMETERS 


Macro Parameter 


Macro Value 


$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 

$NAME_LIST 

$NAME_SPECIFICATI0N1 

$NAME_SPECIFICATICN2 

$NAME_SPECIFICATI(»I3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

§RECX)RD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 
$VAR1ABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR PRAGMA 


31 
15 

2147483647 

2_147_483_648 

-2147483648 

BYTE_INTEGER 

18086 

C :\A(:VC\TES1VC2120A 
C :\ACVC\TES1N;c2120B 
C;\ACVC\TEST\X3119A 
16#FFFFFFFE# 

1024 

8 

18086 

ASCII.CR & ASCII.LF & ASCII.FF 
RECORD Bl: UNSIGNED_BYTE; END RECORD 
INSTl 

32 

2048 

1.0A8.2 

FCNDECL.VAR_AI»RESS 
FCNDECL.VAR_AI»RESS1 
FCNDECL.VAR_AK)RESS2 
NO SUCH PRAGMA 


APPENDIX B 


COMPILATION SYSTEM OPTIONS 


Ihe conpiler options of this Ada Implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-1 




Aug 14 17:10 1992 


ESB«nc« 386 - ACVC 1.11 


Pag* 13 


MERIDIAN ADA COMPILER OPTIONS 


-fD 6*n*rat* debugging output. Th* -fD option causa* th* 
cospllar to ganarat* tha appropriata cod* and data for 
oparation with th* Maridian Ada Dabuggar. 

-fe Annotat* assanbly languag* listing. . Tha -fa option 
causas th* compilar to annotat* an assasbly languaga 
output fil*. Th* output is supplaaantad by cosnants 
containing th* Ada sourc* stataaants corrasponding to tha 
assanbly languag* cod* sactions writtan by th* cod* 
ganarator. To us* this option, th* ~S option nust also 
ba spacifiad, otharwisa th* annotatad fila is not aaitted. 

-£E Ganarat* arror log fil*. Th* -fE option causas the 

coapiler to generate a log file containing all the error 
aassagas and warning aassagas produced during coapilation. 
Th* arror log file has th* saaa nan* as tha sourc* file, 
with th* extension .err. For axaapla, th* arror log file 
for simple.ada is simple.err. Th* arror log file is 
placed in the currant working directory. In th* absence 
of th* -fE option, th* error log information is sent to 
th* standard output stream. 

>fF Disable floating point checks. This option is used to 
inhibit checks for a math co-procassor before sequences 
of math co-processor instructions, resulting in a 
slightly smaller and faster program. Use of this option 
naans that the resulting program requires, and you 
guarantee, the run-time presence of a math co-processor 
(either an 8087, 80287, or 80387). If a program 
containing floating point computations is conpilad with 
the -fp option, it will behave unpradictably if run on a 
machine without a math co-processor installed; the 
machine may simply "frease up" in this circumstance, 
requiring a reboot. Refer to th* bamp -u option, which 
causes the floating point software to be linked with a 
program. 

-£I Ignore compilation errors and continue generating coda 
for legal units within the same coapilation fil*. 

-fL Generate exception location information. Th* -fL option 
causes location information (sourc* fil* names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in th* event that an 
"Exception never handled" message appears when an 
exception propagates out of th* main program. This flag 
causes the cod* to be somewhat larger. If -fL is not 







Aug 14 17:10 1992 


Essaac* 386 - ACVC 1.11 


Paga 14 


usad, axcaptions that propagata out of tha aaln program 
will bahava in tha saaa way, but no location information 
will bo printad with tha "Excaption navar handlad” 

naasaga. 

-fN Suppross nunaric chaeJeing. tha -fK flag auppraasaa two 
kinds of nuaaric chacka for tha antira compilation: 
division_chack and ovarflow_chack. Thasa chacka arc 
daacribad in saction 11.7 of tha IRM. niis flag raducas 
tha siza of tha coda. 

-fQ Suppross "addad to library" and "Ganarating coda for" 
information maaaagoa normally output by tha compilar. 

-fR Inhibit static initialization of variablas. This option 
is intended for use in ROM-basad ambaddad environments in 
conjunction with tha Meridian Ada Run-Tima Customization 
Library. The -fR option is applicable only in tha 
presence of the -fs option, %fhicii suppresses certain 
runtime checks. Normally, tha Ada compiler initializes 
constants or variables with static data when the 
following conditions all occur: 

1. Checking is disabled with tha -fs option. 

2. Tha initializer expression is static (known at 
compile time). 

3. The object is a global (in top-laval package 
specification or body). 

If the -fR flag is specified, static initialization is 
suppressed for variables (but not for constants); 
assignments to each component of a variable are performed 
in the code. Note that this always happens in the 
absence of the -fs option. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all chec]cs. 
This flag reduces the size of tha code, and is good for 
producing "production quality" code or for benchmarking 
the compiler. Note that there is a related ada option, 
-fM to suppress only certain kinds of numeric checics. 

-fS The -fS flag causes the compiler to generate additional 
80286 instructions not available on the 8086/8088. 
Programs compiled in this mode tend to be smaller than 
programs compiled using the normal 8086/8088 mode. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjunction with the -5 
option. Certain restrictions apply to use of this option. 






Aug 14 17:10 1992 


Eumca 386 - ACVC 1.11 


Pag* 15 


-fv coapil* varbosaly. Th* coapllar prints ths naaa of aach 
subprogras, packaga, or ganaric as it is coapilad. 
Znforaation about th* syabol tabl* spac* raaaining 
following compilation of th* naaad antity is also printad 
in th* fora "[nX]”. 

•fv Supprass warning aassagas. With this option, tha 

coapilar doaa not print warning aassagas about ignorad 
pragmas, axcaptions that ara eartain to b* raisad at 
run-tiaa, or othar potantial problaas that th* coapilar 
is otharvisa forbiddan to daaa as arrors by tha LSM. 

•g Tha -g option instructs th* coapilar to run an additional 

optiaization pass. Th* optiaizar raaovas coaaon 
sub-axprassions, daad coda and unnacassary jumps. It 
also doas loop optiaizations. 

•K Kaap intamal fora fil*. This option is usad in 

conjunction with tha Optiaizar. without this option, th* 
coapilar dalatas intamal fora films following coda 
ganaration. 

-laodifiars 

Ganarat* listing fila. Th* -1 option causas th* coapilar 
to Croat* a listing. Optional aodifiars can ba givan to 
affact th* listing format. You can us* non* or any 
coabination of th* following aodifiars: 

c Us* continuous listing format. Th* listing by 

dafault contains a haadar on aach pag*. Specifying 
•Ic supprassas both pagination and haadar output, 
producing a continuous listing. 

p Obey pragma pag* diractivas. Specifying -Ip is only 
aaaningful if -Ic has also bean givan. Normally -Ic 
supprassas all pagination, %rtiaraas -Icp supprassas 
all pagination axcapt whara explicitly called for 
within th* source fil* with a pragma pag* directive. 

s Use standard output. Tha listing by dafault is 
written to a fila with th* saae naa* as tha source 
fila and tha extension .1st, as in siapla.lst from 
siapla.ada. Specifying -Is causas tha listing file 
to ba written to tha standard output stream instead. 

t Generate relevant text output only. Th* listing by 
dafault contains th* entire source prograa as wall 
as intarsparsad error aassagas and warning aassagas. 
Specifying -It causas tha coapilar to list only th* 
source lines to which error aassagas or warning 
aassagas apply, followed by th* aassagas thaasalvas. 

Th* dafault listing fil* ganaratad has th* saa* naa* as 
th* source file, with th* extension .1st. For axaaple, 


a-4 



Aug 14 17:10 1992 


ESMnc* 386 - ACVC 1.11 


Pag* 16 


th« dafault Hating flla producad for slapla.ada has tha 
nasa siapla.lst. Tha listing flla is placad in tha 
currant worlclng diractory. Kota: -1 also causas an 
arror log fila to ba producad, as with tha -fE option. 

-li library>naao 

Dafault: ada.llb 

Usa altamata library. Tha -L option spaciflas an 
altamativa naaa for tha progras library. 

-N No conpila. This option causas tha ada cosatand to 

"dry run" of tha conpilation procass. The coanand 
invokad for each procassing stap is printad. This 
similar to the -p option, but no actual processing 
performed. 

-P Print compile. This option causes the ada command 

print out tha command invoked for each procassing stap 
as it is parfomad. 

-S Produce assembly coda. Causas tha coda generator to 

produce an assembly language source flla and to halt 
further processing. 


do a 

is 

is 

to 


B-5 



(XnPILATIGN SYSTDI OPTIONS 


LINKER OPTIONS 

The linker options of this Ada inplenentation, as described in this 
j^ppendix, are provided by the customer. unless specifically noted 
otherwisef references in this appendix are to linker documentation and not 
to this report. 


B-6 





GQHPIIATIGN SYSTBI 0PTZGN5 


Aug 14 17:10 1992 Ess«nc« 386 - ACVC 1.11 Page 17 


MERIDIAN ADA LINKER OPTIONS 


-A Aggressively inline. This option Instructs the optiaizer 

to aggressively inline subprograas trtxen used in addition 
to the -G option. Typically, this aeans that subprograas 
that are only called once are inlined. If only the HS 
option is used, only subprograas for trhich pragaa inline 
has been specified are inlined. 

-c compiler-prograa-naae 

Default: (as stored in prograa library) 

Ose alternate coapiler. The -c option specifies the 
coaplete (non relative) directory path to the Meridian 
Ada coapiler. This option overrides the coapiler 
prograa naae stored in the prograa library. The -c 
option is intended for use in cross-coapiler 
configurations, although under such circuastances, an 
appropriate library configuration is noraally used 
instead. 

-E Liiilc the prograa so it can wait properly when called by 

HinExec. Arrange for a aessage to be sent to the parent 
Windows task when the Ada prograa terainates. 

-f Suppress aain prograa generation step. The -f option 

suppresses the creation and additional code generation 
steps for the teaporary aain prograa file. The -f option 
can be used when a siaple change has been aade to the 
body of a coapilatlon unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perfora global optiaization only. The ~q option causes 

baap to invoke the global optiaizer on your prograa. 
Coapilatlon units to be optiaized globally aust have been 
coapiled with the ada -K option. 

-G Perfora global and local optiaization. The >G option 

causes baap to perfora both global and local optiaization 
on your prograa. This includes performing pragma inline. 
As with the -g option, coapilatlon units to be optiaized 
aust have been coapiled with the ada -K option. 

-i The -i option is used in conjunction with the baap -r 

option when producing "pre-linked” code for use with the 


B-7 








OQNPILATIGN SlfSTEM OPTZGNS 


Aug 14 17:10 1992 Eas«nc« 386 - ACVC 1.11 Pag* 18 


Zntal D*v*lopB*nt Tools. Th* -i option causss cartain 
inforaation to b* aaltted into tb* object file that is 
n*sd*d under son* circuastances by the Intel linker, 
LIMK86. By default, pre-linked object aodules use th* 
Microsoft object foraat. 

-I Link the prograa with a version of th* tasking run-tiae 

which supports pre-eaptive task scheduling. This option 
produces cod* which handles interrupts aore quickly, but 
has a slight negative lapact on perforaance in general. 

-L librarynaa* 

Default: ada.lib 

Use alternate library. The -L option specifies the naae 
of the prograa library to be consulted by the baap 
prograa. This option overrides the default library naae. 

-m Produce link nap. The -a option causes a text file 

containing a link nap to be written. The link map is 
Microsoft-compatible and the link map file naae has the 
extension .aap for Real Mode prograas (the default). 

For Extended Mode Prograas (produced when the baap -x 
option is given), the link aap is OS/x86-coapatible and 
the link aap file naae has the extension .xap. 

-M aain-program-stack-size 

Default: 

o 2OK in Real Mode prograas 

o 64K in Extended Mode prograas, when tasking is not 
used 

o 64K - <task-stack-aiz*> in Extended Mod* prograas, 
when tasking is used 

Set aain prograa stack size. The -M option sets the 
stack size (number of decimal bytes) for th* main prograa 
(excluding tasking). Note that th* sum of the aain 
prograa stack size and th* tasking stack size aust be no 
more than 64K bytes. 

-n No link. The -n option suppresses actual object file 

lin)cage, but creates and perforas cod* generation on the 
aain prograa file. 

-N No operations. The -N option causes the baap coaaand to 

do a "dry run"; it prints out the actions it takes to 
generate th* executable prograa, but does not actually 
perform those actions. The saa* kind of information is 
printed by the -P option. 


B-8 







CXMPIIAnGN SY81BI QRXGNS 


Aug 14 17:10 1992 


Easanca 386 - ACVC 1.11 


Page 19 


~o output-flle-naae 

Default: file.exa 

Use alternate executable file output naae. The -o option 
specifies the naae of the executable prograa file written 
by the baap coaaand. This option overrides the default 
output file naae. 

-P Print operations. The -P option causes the baap coaaand 

to print out the actions It takes to generate the 
executable prograa as the actions airs perforaed. 

-r Create re-llnkable output. The -r option causes an 

object file (.obj file) to be generated rather than an 
executable file (.exe file). The resulting file contains 
all syabol and relocation inforaatlon, and can then be 
used with any low-level linker accepting object files 
coapatible with the Intel or Microsoft object foraats. 

-s task-stack-size 
Default: 

o 20K If tasking used 
o Zero if tasking not used 

Use alternate tasking stack size. The -s option 
specifies the nuaber of bytes (In declaal) to be 
* allocated to all the tas)cs to be activated in the Ada 
prograa. This option overrides the default task stack 
size. Note that the sua of the aain prograa stack size 
and the tasking stack size aust be soaewhat saaller than 
64K bytes. The size of Individual task activation 
stacks can be specified with a length clause. 

-u Link software floating point library. Use of the -u 

option enables a prograa containing floating point 
coaputatlons to run with or without a aath co-processor 
chip. A related coapller option, the ada -fF option, 
also can be used to control the action of the run-tiae in 
the absence of a aath co-processor chip. The ada -fF 
option and the baap -u option should not both be used in 
the sane prograa. 

-V Link verbosely. The -v option causes the baap coaaand to 

print out Inforaatlon about what actions It takes In 
building the naln prograa. 

-V scratch-file 

Link using "virtual” node. This option allows larger 
prograns to be linked, although slightly nors slowly. A 



oghpuasicn sysm qpiicns 


Aug 14 17:10 1992 Es««nca 386 - ACVC 1.11 Pag* 20 


scrateh-fll* nust b* spacitlad. Th* scratch-file can 
reside on a RAM disk (if one is available) for faster 
operation. The -V option affects only the operation of 
th* low-level object linker. Th* scratch-file is us*d as 
scratch asaory in %rhich the various object files are 
linked. 

-w library_unit 

Link th* prograa as if th* specified library unit had been 
with'ed by the aain procedure. 

-w Suppress warnings. This option allows you to suppress 

warnings froa the optiaizer. 

-X The -X option is used to create an Extended Mode prograa. 

This option applies only to Extended Mode Meridian Ada. 

The -X option produces a prograa that can be run with the 
raap coaaand to zxin in Extended Mod* (a .exp file). If 
the -X option is not used, a Real Mode prograa (a .exe 
file) is produced. 


B-10 




APPEM>IX C 

APPENDIX F OF THE Ada STANEARD 


The only allowed iof>lementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this i^pendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ippendix are to conpiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, v^ich 
are not a part of ippendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 
type SHORT_INTEGER is range -32768 .. 32767; 
type BYTE_INTEGER is range -128 .. 127; 

type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-1 








AFPSOIX F OF TBB Ada. SIMCABD 


ADcena:: 


'Oierr.eniaTion-OeDenaenT 


:i]C-. 


Ad*. Noti that thw «» no piwding «pp«diM». Tto apfwte ■ aibd 

Apwndi* F in owUr to cta^ with th* Ratow* Manual for th* A^ 

Propam^g Langoag^L^ ANSI/MIL-^rD-lSMA which **rt« that 
thia appandix be naoMd Appandix F. 


Impkmented Oiapter 13 feahuca induda length dauaea, cnafnmticn 
repreaantatian clauaaa, record representation clauses, address dauere 

interrupts, package system, machine cod* maertiona, pragma mtBtace, 

and unchecked programsung. 



F.l Pragmas 


The implemanted pre-defined pragmas are: 
•laboxata See the LRM section 103 


See section F.1.1 
See the LRM Appendix B 
See section F.12 
See the LRM Apperuiix B 
See the LRM Appendix B 
See section F.13 

See the LRM secUon 632. This pragma is not actuaUy effecUve 
uidess you compiJe/link your program usmg the global 
optmuw. 

The remairung pre-defined pragmas are accepted, but presently ignored: 

ooncrollad apClmso eyotan/ian* 

shared atoragejunit iaa«ory_ai.** 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are erKountered at compile time, ttie 

compiler issues a warning message rather than an error, as requuM by 

the Ada language definition. Refer to the LRM Appendix B for additional 
information about the predefined pragmas. 


Intatffaoe 

Hat: 

pack 

page 

prior.tiy 

suppress 

xnXltM 


F.1.1 


Pragma Interface 


The form of pragma mterface in Mendian Ada is: 
pxagea latesfaest ianouaye, autproqram [, 


■1 > 


OoenAda \Mnaows Compiler User s Gokx 


Pooe2A7 




wfami 


tmgmge 

Uda is the tatfffoco language one of the names aessnihiy, 
bailtta. c aBiaaaaff_c, or intanuL The namca bnilttn a^ 
iiifonul are laauvad fa use by Meridian compiler 

tubprvgnm 

lUa is the name of a subprogram to which the pragma 
intarfaee applies. 

laik-tume 

niis is an optfonal shnig Uiexal spodfyiag die name of the 
non-Ada subprogram CBStasponaing to the Ada 
subprogram named in the second parameter. If Ibilr-Mame is 
omitted, then ftnbnawe defaults to the value of lalprty/awi. 

Depending on the language ^odfiedL some automatic 
inciQificationa may be onade to the ihilc weaie to produce the 
actual object code symbol name that is geicralH 
whenever icteranoea are made to the oorrcqpanding Ada 
subprogram. The object code symbol geuaratad fa 
/bih-nama is always translated to upper case. AUiou^ the 

Mgidian object linker is case smsitive, it is a rare obieq 
module that contains mixed-caae symbols; at present, all 

Meridian fiOssSfi object modules use upper case only. 

It is appropriate to UM the optional/mk-mme puuMtcr to pnffM 

Inearf ae« only when the interiue subprogram has a name docs 

not ooirespowd at ailtoitaAde identifier or whan the tnterfMe 
subprogram name cannot be given usoig rules ter caatstructmg Ada 
identifiers (eg^ if the name omtaina a'$’chuacter). 

The charactetistfcs of object code symbols generated for each interface 
language ate: 

aaacmbly 

The object code symbol is the same as Itnlc-nBine. 

builtin 

The object code symbol is the same as Imk-mme, but prefixed with 
two underscore characters This language intemce 

is reserved for spedal interiaces defined by Meridian 

Software Systei^ Inc The builtin interteoe is presently 
used to dedare certain low-level run-time opentions 
whose names must not conflict with progianuiiei-defined 
or language system defined names. 

c 

The object code eymbol is othe same is Unk-name, but with one 
undenoore charsoer C'J') prepended. This is the 
convention used by the C oompiicr. 


No object code symbol is gmerated fa an intemal language 
interface; this Isrwuage interface is reserved fa special 
inieriacei defined by Meridian Software Systems, inc The 
internal faderisce is presently used to dedare certain 
nuchine-level bit operations. 

iniaoaoft_e 

The objsct code symbol is the same as imk-fimie, but with one 
undencore dunirier ("_*') prepended. This is the 
convention used by the Miero^ C con^iter. 


Pao»2U 


C-3 


OpanAdo tMnooMfS CompMr UMTt 






AFPEMDIZ P OP TSB Ada. SXMOMD 



Hit low4e*«i dlliag eoBftntkM an dtaagad only in the en* a< • 
nkwattH.cintarfaca. No autonaac data conmaw an parinnwi on 

nann that calling ooBtandana natEli and that asjTBooanaiy data 
oanfnatoaa taka piaea when calling iolaifaca MbpBogmiia. 

A pramaintarfnon may appear w i thin tfaaaamadadantin part aa 
tha siupiognni to which tM paagna intarf non appUan faDowing tha 
ni b prog Hn<iTt a ntin o,andpiiortothafltatiiaacf theatt b piog uuiL A 
pnpna intarf non that appnea to a aabproBam dedand m a pade^^ 
spedAcatian moat occur wttra the aama padiiage apedficatian aa tha 
subprogram dadaxatiao; the pn^Mlnearfaea may not appear in die 
pa^ge body in thia caae. A pragma Intarfaea dedantton ter either a 
private or n o npri r at aaubpiognmd ari a n tioo may appear in the private 
part of a padatge spedScatiaei. 

Pragma incarfaen ter bbnry unite is not euppoeted. 

Refer to the IKM aectkm 13.9 for additional inteemataon about pragma 
interface. 


F.1.2 PfogmaPock 


Pragma pack ia imp l eme nt e d for c o mposite types (records and arrays). 

Pragma naek is permitted following the composite type declaration to 
whi^ it applies, provided that the pragma occun within the same 
declarative part as the co m po a ite tj^ declaration, before any obieda or 
components of the composite type an dcdaicd. 

Note that the declarative part restriction aieans that the type declaration 
and accompanying pragma peek cannot be split across a package 
spedfieation and body. 

The effect of pragma paek is to minimize storage consumption by 
disoete component types whose ranges permit packing. Use of pragma 
paek docs not defeat allocstians of aiigninem storage gape ter some 
racord types, ftagxna paek docs not ariect the representations of real 
types, pr^efined integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as desoibed in the LRM section 11.7, 
with these di f fe r ence s ; 

• fVesendy, divisum.cfacck and ovcrtlow.chcck must be suppressed 
via a con^ilcr flag, -£X; pragma suppress is ignored for these two 
numeric checks. 

• The optional "Ok ■" parameter name noradon for pragma 
auppresa is ignored. 


OoonAdo Windows Comoaar (/tars Sufdo 

C-4 


Pops 249 





kmtumtnlollon-OtotncttntChomBttMia^ 


• llMoptianilMaandpannMlvtopngiiwaappcwMiiigiiarad.-the 
pngiM ahniyi appita to tfa* cntiR Mopc in which it appcm. 


F.2 Attributes 


All attribolai daaenbed in the LSM Appendix A aic aupportad. Tlw 
lanpIrngniaHnii Ampwmiitmt > Xeeof CMC »tppVtd tO 

a paniMter and ntuina aa a univoiahinlin the alack olfMt o< that 
panunciv (the otfMt iram the BP rtgiatB). u alkwa machine code 
inaertiana to accoi panmeten tiaing lesa cnorfrone eynbolic names. 
An eounple lollowa. 

naahtae_oede.inaO»<XMtne, 1C«4M, abyeaa'loeeteaat)* 


F.3 Standard Types 

A ddi t io n ai standard types aie defined in Meri d i a n Ada: 

• byte.intcger 

• ahoit.integcr 

• k»g_integer 

The standard numetic types are defined as: 
type byte.iate9er is ranee “Ut •• 
type etMrt.inteeer is range •3a7<a .. 337S7; 
type intager is range •3a7Ca 327t7i 

type loag_integar is range -ai474a3C«a 31474e3<47i 

type float is digits IS 

ranga -i.ytyftsuaecayiBOoe i.7a7ea3i34a<a3XBOoei 

typa daration is dalta 0.0001 ranga -00400.0000 


F.4 Package System 

The sperififistiew of package eyeten is: 

pseJtaga systan is 

typa addraas is nav leng_iatagari 

typa nans is {iOOOO/ 

■rsrm_nBni i censtant nans i* iOOOS/ 

atoraga.enit > eonstsnt ta $$ 
aannry_sise t eenatant tm xoaoi 


Pao»250 


C-5 


OpenAdo Mdooews Compfer users Gisde 













I nnatf MT t* >ai474MC4lf 
■uOtt I nmtTiBT •• ai4744a447i 

I niM4f BT i« 1S» 

—nj—tia— I niwft ait 

£iM.telta I nnaw—r i« a.O •• (ODt 

tlok t wtaiif !■ 1.0 / II.at 

— Othar lyti aap—4—a PMlazatlooa 

•■beypa vcioxicr ia tat ata r xaaga 1 .. ao» 

Tha Tihw frf tyf —nrif_tl la ia rn u n ll ) m ft ni n g tfii 


F.5 Restrictions on Representation Clouses 

F.5.1 Ungth OausM 


A lize spcdficatian (t' aiaa) is icjecied if fewer biti axe specaSad titan 
canaccoi n inodatethetyj>e'n»enuninBiiniiaeofa c o mp o »il etypeTnay 
be aubject to apptieation (rf piagnia pack. It is pennitted ID Bpedfy 
pxedse sizes nr unaigaiati integer ranges, 8 for the laage 0.. ass. 

kotaever, because of r eq uir B u entsii n ixieed by die Ada iaayiage 
definition, a full 32*bit range of unsigned vahi^ Le 0.. (a**3a) *1, 
cannot be defined, even using a size spedficatnn. 

Hie sp ecific a Hon of adlectian size (t' storaaa.aisa) is evaluated at 
nin-time when the scope of the type to which the length dause applies is 
entered, and is there f ore subject to rejection (via atorata.arzer) based 
on available storage at tile time the allocation is made A colledion may 
indude storage UM for run-time adxninistntion of the coUectioBi, and 
therefore show not be expected to accommodate a spcdfic number of 

ri*T“-n nrh ** •T*~~T*-*i r *'* 

diaaiminant array components of records may be allocated outside a 
given collection, so a coUcction may accommodate more objects than 
might be expected. 

The specificition of storage for a task activation (t' steraea.alsa) is 
evaluated at run-time whm a task to which the loigth clause applies is 
activated, and is therefore subject to rejection (via ■eorage.error) 
baaed on available storage at the time the allocation is made Storage 
reserved for a task activation is separate from storage needed for any 
collections defined within a task Ixxiy. 

The spedSeation of small for a fixed point type (c' snail) is subject only 
to restrictions defined in the UM section 13 


F.5.2 Enumeration Representation Clauses 

The intenal code for the literal of an enumeration type named in an 
enumeration representation clause must be m the range of 
standard.latagaz. 


OotnAOo Mkiow$ Comotar u$tr'i Guiae ^ 

C-6 


Paom251 




^D09noKr ynpiPmTf m m F v ipwffgKfTrou oftiin ci 


The vahic of an intoal oodB naijr b* obtiiMd bjr tppijriiig n 
app»opiMtKiiwaiiHatk»ofuaohoolfd>,cottewiottteaniiitegg'typo. 


F.5^ Record R«prM«nlaHon OousM 

Tlie •tongc untt otfMt (the at «(ttk;_«aiipfe_^3C}mHOT put) is givta in 
tains of siange unite and mist bo even. 

A bit positkn (die tango psit) appliod to a diaocte type oomponsnt may 
bcmtheiangcO. .iS.withObcmgtfaeteastsignifieuitbttofa 
oomponent A range spadfieatkm aoay not specify a sice smalla than can 
aocaimnodate the coa^ponent A nngc spednatksi for a oonponent not 
aoonninodating bit paadng may have a nighauppa bound u 
appropriate (egyO.. 31 for a diaainiinant string co m po n e nt) . Refer to 
tM intenial date le p ie awna t ion of a given c omp o n e nt in detennining the 
oomponent si» and assigning offeete. 

Cosnponente of disaetetypa far whidiMt positions aiespedfifd may 
not stiaddlc 16^ word boundaries. 

The vahie of an alignment dauac (the opdonal a mod pa^ mna evaluate 
to 1. Z A a 8. and may not be smalla ttuin the highest alignment 
icqutred by any oomponeit of the leoord. On M&hDOS. thiB means that 
some reooRls may not have alignment clauses smalla than Z 


F.54 Address CknisM 

An addicss cUuse may be supplied far an object (whetha constant a 
variable) a a task entry, but na far a subpro g i am , package; a task unit 
The meaning of an adofcss clause suppliM fa a teak entry is given in 
asctianFJ.5. 

An address expression far an ol^ect is a 32-bit segmented memoiy 
address of type syaeoB. address. 


F.5,5 Inttenupts 


A task cn^s address clause can be used to associate the entry with a 
MS-DOS inteiTupt Values in the range 0. .255 are meaningful and 
represent the intonipte co r respo n ding to those values. 

An mterrupt entry anay not have any parameten. 


F.5.6 Chong* Of ReprMtentotion 

'Diete are no restrictions for changes of representation effected by means 
of type con v er a ion. 


Pa0»2S2 


C-7 


OpnnAda iiMiaoM Compiar tsars Aerie 





No names are gewalBil by the mipkaDentatke to cknote 
impkmentatkmKlcpciMleittoimxpanei^ 


F.7 Unchecked Conversions 


There are no restrictians cm the use of nnohnqtied_cc»rr»raioa. 
ConvCTions b et w e en objects whose sizes do not con f c xnn may resufc in 
storage areas vrith undefined values. 


F.8 input'Output Packages 


A summaiy of the iznplementadon-depcndaU input-output 
chanctehstks is: 


a In calls to opan and create, the ybnn parameter must be the empty 
string (the defauU value). 

• More than one intental file can be associated with a single external 
file for resdij^ only. For writing, only one internal file may be 
associated wi& an external file; Do not use reset to get around this 
rule. 


• Temporary sequential and direct files are given names. Te mp or a ry 
files are deleted when they are closed. 

• Foe I/O is buffered; text files associated with terminal devices are 
line-buffered. 

• The packages a*mi«atlal_io and dlr*ct_io cannot be 
ixutantiated with unconstrained composite types or recsrd types 
with discriminants without defaults. 


F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are preently limited 
to 200 characters in length. 


OpenAda Windows Compiler User's Guide 

C-8 


Pope 253 







