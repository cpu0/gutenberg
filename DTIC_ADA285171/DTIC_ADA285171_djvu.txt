Avr Control Number: AVF-VSR-596.0694 
Date VSR Completed: July 21, 1994 

94-05-12-RAT 


AD-A285 171 

Hill! 






ELEC'l 



SEP 2 9 1994 S H 


F 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940630W1.11368 
Rational Software Corporation 

OADSCross Sun4 -> Paragon, Product Number: 2100-01452, Version 6.2 
Sun SPARCstation 10 under SunOS 4.1.3 -> 

Intel Paragon, OSF/1 Release 1.1.4 


(Pinal) 


Prepared By; 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


This documeni bcs been approved 
for public release and sale;'its 
{tstribuhon is uniimited. 


94—30987 / 


DTIC QUALIT? nT-TPr ^TEO 3 


94 9 2 8 07 I 










REPORT DOCUMENTATION PAGE 


Form Approved 


0PM No. 


Public ibportng burden lor Ibis collection of Information Is estimated to average l hour per response, Including the time lor reviewing Instructions, searching existing data 
sources gathering and maintaining the data needed, and reviewing the collection of Information. Send comments regading this burden, to Washington Headquarters 
Service. Directorate for Information Operations and Reports. 1215 Jefferson Davis Highway. Suite 1204. Arlington, VA 22202-4302, and to the Office of Information and 
Regulatory Affairs. Office of Management and Budget. Washington, DC 20503. 


1. AGENCY USE 


(Leave 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND: Compiler. DADScross Sun4 => Paragon, Product #2100-01452, 5. FUNDING 
Verison 6.2 

Host; Sun SPARCstation 10 (under SunOS 4.1.3) 

Target: Intel Paragon (udner OSF/1 Release 1.1.4) 

6. AUTHORS: 

Wright-Patterson AFB, Dayton, OH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 
Ada Joint Program Office, Defense Information System Agency 
Code TXEA, 701 S. Courthouse Rd„ Arlington, VA 
22204-2199 


10. SPONSORING/MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY; Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


13. (Maximum 200 

Rational Software Corporation, 940630W 1.11368 


14. SUBJECT; Ada Programming Language, Ada Compiler Validation Summary 15. NUMBER OF 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A leTPRiCE- 


17 SECURITY 
CLASSIRCATION 

UNCLASSIFIED 




18. SECURITY 

19. SECURITY 


CLASSIRCATION 

UNCLASSIFIED 

UNCLASSIFIED 


20. LIMITATION OF 


UNCLASSIFIED 


























Certificate Znfonnaticm 


The follovring Ada inplenentatlcm was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 


Compiler Name and Version: DAOSCross Sun4 -> Paragon, 

Product Number: 2100-01452, Version 6.2 

Host Computer System: Sun SPARCstation 10 

under SunOS 4.1.3 


Target Computer System: Intel Paragon, OSF/1 Release 1.1.4 

Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11368 
is awarded to Rational Software Corporation. This certificate expires two 
years after M1L-ST&-1815B is approved by ANSI. 


This report has been reviewed and is a^^roved. 



S3ErvaiidaH«r 
Dale E. Lange 
Technical Director 


645 CCSG/SCSL 

Wright-Patterson APB OH 45433-5707 



Ada 

Dir^ctoi 

Institute for Defense Analyses 
Alexandria VA 22311 


ion Organization 

,'vJomputer and Software Engineering Division 



D1 rectoE^AJPO 

Defense information Systems Agency, 
Center for Information Management 


Accesion For 


CRA&I 
DTi:' rAi5 



3 


By 








DECLARATION OF CONFORMANCE 


Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada In^lementation: 

Ada Coiqpiler Name and Version: DADSCross Sun4->Paragon 

Product Number 2100-01452 
Version 6.2 

Host Computer System: Sun Sp" -Station 10, Sun OS Release 4.1.3 

Target Computer System: Intel Pf .gon, OSF/1 Release 1.1.4 


Declaration: 

I, the undersigned, declare that I have no knowledga of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Siunmary Report. 



(CUSTOMER COMPANY OFFICIAL) 


Date: 



•i 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTROEUCTION 


The Ada implententation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
current Ada Con^iler Validation Capability (ACVC). This Validation Suninary 
Report (VSR) gives an account of the testing of this Ada implementation- For 
any technical terms used in this report, the reader is referred to [Pro921. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and conqpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject inqplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRMXJCTION 


1.2 REFERENCES 

(Ada83] Reference Manual for the Ada Progreuaning Lamquage , 
ANSI/MIL-STD-ISISa, February ISsS and ISO 8652-1987. 

lPro921 Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program office, August 19^2. 

IUG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coaipliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vhich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at compile time emd link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NC3T APPLICABLE message indicating the resxilt when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat scxne ccxnpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECR_F1LE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_F1LE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a con^iler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting ccxnpilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Sane of the class B tests contain legal Ada 
code which must not be flagged illegal by the coopiler. This behavior is 
also verified. 

i 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In sane tests of the ACVC, certain mvacro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provid^ in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






iMnmjcTiQN 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdravm tests (see section 2.1), and possibly 
removing Scmie inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conf>iler Ihe software and any needed hardware that have to be added to 
a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada CoK^iler The me 2 ms for testing compliance of Ada implementations. 
Validation consisting of the test suite, the su(^rt programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host ccmputer system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body vhich provides policy and 
Program guid^ce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body ^ich carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Orgeinization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A conputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 



INTPOTUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity vdio enters into an agreement 

with an AVF which specifies the terms 2 md conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for which 
validation status is realized. 

Host Ccm^ter A conpjiter system v^ere Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>;<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usiially, operating 
'iystems are predominantly software, but partial or conplete 
hardware implementations are possible. 

Target A computer system v^ere the executable form of Ada programs 

Conputer are executed. 

System 

Validated Ada The conpiler of a validated Ada implementation. 

Ccxipiler 

Validated Ada An Ada inpleraentation that has been validated successfully 
luplementation either by AVF testing or by registration [Pro92). 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada progreunming leuiguage. 






CHAPTER 2 


implementation dependencies 


2.1 WITHDRAMN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 Novendber 1993. 


2.2 


B27005A 

C35507L 

C35508M 

C43004A 

C45651A 

A74006A 

C83026A 

C97116A 

CC1223A 

AD1B08A 

CD2A41E 

CD4022D 

CD5111A 

AD7201A 

CD9005A 

CE2119B 

CE3411B 

CE3814A 


E28005C 

C35507N 

C35508N 

C45114A 

C46022A 

C7430aA 

B83026B 

C98003B 

BC1226A 

BD2A02A 

CD2A87A 

CD4024B 

CD7004C 

AD7201E 

CD9005B 

CE2205B 

CE3412B 

CE3902B 


B28006C 

C35507O 

C35702A 

C45346A 

B49008A 

B83022B 

C83041A 

BA2011A 

CC1226B 

CD2A21E 

CD2B15C 

CD4024C 

ED7005D 

CD7204B 

CDA201E 

CE2405A 

CE3607B 


C32203A 

C35507P 

C35702B 

C45612A 

B49008B 

B83022H 

B85001L 

CB7001A 

BC3009B 

CD2A23E 

BD3006A 

CD4024D 

CD7005E 

AD7206A 

CE21071 

CE3111C 

CE3607C 


C34006D 

C35508I 

C37310A 

C45612B 

A54B02A 

B83025B 

C86001F 

CB7001B 

BD1B02B 

CD2A32A 

BD4008A 

CD4031A 

AD7006A 

BD8002A 

CE2117A 

CE3116A- 

CE3607D 

i. 


C35507K 

C35508J 

B41308B 

C45612C 

C55B06A 

B83025D 

C94021A 

CB7004A 

BD1B06A 

CD2A41A 

CD4022A 

CD4051D 

CD7006E 

BD8004C 

CE2117B 

CE3118A 

CE3812A 


INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives vdiich are irrelevant 
for a given Ada iiqpleioentation. Reasons for a test's inapplicability may be 
sxipported by documents issued by the ISO and the AJPO known as Ada 
Comoentaries and comnonly referenced in the format AlHidddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



INPLEKEN7ATICM DEPENDENCIES 


The following 201 ♦■ssts have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..i (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35e02L..Z (15 tests) 
C4532lL..y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type LONGFLQAT; 

for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
inplementation, there is no such type. 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
NACHINEjOVERFLCMS is FALSE for floating point types and the results of 
various'* floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINEJOVERFLONS is TRUE. 

% 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 




INPLEMENTATION DEPENDENCIES 


CD2AB4A, CD2A84E, CD2AS4I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following teU^le check that USE ERPOR is raised 
if the given file operations are not sui^rted for the gTven combination 
of mode and access method; this inplementation su{^rts these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

GlEATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SBQUn^IAL 10 

CE2102F 

CREATE 

INCXJT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT '•TLE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

text“io 

CE3102G 

DELETE 


TEXT 10 

CE31021 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cemnot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for Bie external fils; there are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
inpractical. 






INPLEMENIATIGN DEFENDmCIES 


2.3 TEST MOIIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVD. The compiler rejects the use of the range FLOAT'FIRST. .FWAT'LAST as 
the range constraint of a floating-point type declaration because the boxinds 
lie outside of the range of safe nuni)ers (cf. LRM 3.5.7:12). 

CD1009A, CD10091, CD1C03A, CD2A22J, and CD2A31A..C were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECT, which uses 
Unchecked Conversion according to the interpretation given in Al-00590. The 
AVO rule3 that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LlNGTHjCHECK—i.e, the allowed Report.Failed messages have the 
general form; 

" * CHECK ON REPRESENTATION FOR <TyPE_ID> FAILED.” 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprogr^; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was m^ified by ccxnnenting out line 36 and 
40; the modified test was passed. 


1 


2-4 








CHAPTER 3 


PROCESSZNS INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada in^ilementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada iioplementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Conpton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada In^lementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Progranming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92j. 

For all processed tests (inapplicable and aj^licable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the mmober of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 










PROCESSING INFORMATION 


a) Total Number of i^licable Tests 3796 

b) Total Number of Hithdravm Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c-Ki+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a-t-b^-f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. Hie contents of the 
magnetic tape were loaded onto a Sim SPARCcenter 2000 and then copied to the 
host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system. The 
executable images were then downloaded via a serial port and executed on the 
target. The results were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
review^ by the validation team. See ^^;pendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, ccmpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examdned on-site by the 
validation team were also archived. i, 


3-2 








APPENDIX A 


MACRO PARAMETTEltS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the meucimum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, vrtiere "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$BIG_ID1 {1..V-1 -> 'A', V-> '1') 

$BIG_1D2 (1..V-1 -> 'A', V-> '2') 

$BIG ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" ' 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 »> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 ) 

$NAX LEN INT BASED LITERAL 

" ~ ~ "2;" & (l,.V-5 -> '0') & "11:" 

$HAX LEN REAL BASED LITERAL 

" ~ ~ "16;" & (1..V-7 -> '0') & "F.E;" 


A-1 







MACRO PARMIETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

64 

$ALIGNHENT 

4 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SyS_NAME 

S«V860_PARAGON 

$DELTA_DOC 

0.0000000004566612873077392578125 

$ENTRy_AIX)RESS 

SYSTEM. "+'’(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$EMTRY_ADDRESS2 

SYSTEM.’V(16#100#) 

$FIELD_LAST 

2147483647 

$FILEjrERMINATOR 

f f 

$FIXED_NAME 

NO_SUCH_TyPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$PORM_S!ERING 

nn • 

$FORM_STRING2 

’’CANNOT_RESTRICT_FILE_CAPACITY” 

$GREATER THAN DURATION ^ 

100000.0 


$GREATER IHAN DURATION BASE LAST 

TOOOOTJOO.O 

$GREATER THAN FLOAT BASE LAST 

- l.lE+308 

$GREATER THAN FLOAT SAFE LARGE 

“ 5.TyE307 

A-2 







MACRO PARAMETERS 


$GREATER_THAN SHORT FLOAT SAFE_LARGE 

9.0E37 

$HICH_PRIORITY 99 

$IIJ;JXyVLJE3CTERNAL FILE NAMEl 

/illegal/file_naine/2} ]$%FILE1 .DAT 

$ILLH]AL_EXTERNAL FILE MAME2 

/illegal/f ile_naine/2} ] $%FILE2. DAT 

$INAPPROPRIATE_LINE_LeJGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGHA2 PRAGMA INCLUDE ("B28006D1.TST”) 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$1NTBGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESSJIHAN_DURATIGN -100000.0 

$LESS THAN DURATION BASE FIRST 
“ “ ” -llfOOOOOO.O 

$LINE_TERMINATOR ASCII. LF 

$LOW_PRIORITY 0 

$MACHINE_C(X)E_STATEMEWT 

CODE_0MOP -> NOP); 

$MACHINE_CODE_TWE CODE_0 ' 

$MANTISSA_DOC 31 

$MAX_D1GITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME TINY_INTEGER 

A-3 









MACRO PARAMETERS 


$NAME_LIST 

SySV860__PARAGON 

$NAME_SPECIFICAT10N1 

/sparky/vc/test_suites/acvcjparagon_da/c/e/X2120A 

$NAME_SPECIFICAT10N2 

/sparky/Vc/test_suites/acvcjparagon da/c/e/OC2120B 

$NAME_SPECIFICAT1QN3 

/sparky/Vc/test_suites/acvcjparagon_da/c/e/X3119A 

$NEG_BASED_INT 

16#F000000E« 

$NEW_MEM_SIZE 

16777216 

$NBM_STORJJNIT 

8 

$NEW_SYSJIAME 

SYSV860_PARAGQN 

$PAGE_TERMINATOR 

ASCII.LF & ASCII.FF 

$REC0RD_DEFINIT10N 

RECORD SUBP: OPERAND; END RECORD; 

$RECORD_MAME 

C(»E_0 

$TASK_SI2E 

64 

$TASK_STORAGE_SI2E 

1024 

$TICK 

0.01 

$VARIABLE_AK)RESS 

VAR_1'AM>RESS 

$VARIABLE_ADDRESS1 

VAR_2'ADDRESS 

$VARlABLE_AroRESS2 

VAR_3'ADDRESS 

$YOUR PRAGMA 

PRAGMA PASSIVE 



APPENDIX B 


CC3MPILATI0N SYSTEM OPTIONS 


The conpiler options of this Ada inplementation, as described in this 
i^^ndix, are provided by the customer, unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 



COMPIIATICN SYSTEM OPTIONS 


ada Coomand Reference ada 

ada - invoke the Ada compiler 

Syntax 

ada [options] [source_file1... {object_file.o)... 

Arguments 

object_file.o ncxi-Ada object file names. These files will be passed 
on to the linker and will be linked with the specified 
Ada object files. 

options options to the conpiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
coopiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body {defatilt). 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "filejname.das" 
s Disassemble the \init spec. 

-a file name 

(arBiive) Treat file name as an object archive file created 
by ar. Since some arrive files end with .a, -a is used to 
distinguish archive files tz<m Ada source files. 

-Bstatic/dynamic (SPARConpiler Ada only) 

(static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dynamic. 

-c s\;ippress the control messages generated when pragma PAGE 
an^or pragma LIST are encountered. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the conpiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DAl.l) (HP PA-RISC only) 

-d (dependencies) Analyze for dependencies only. Do not do 

B-2 







CX3MPI1ATICN SYSTEM OPTIONS 


semantic analysis or code generation. Ujpdate the library, 
marking any d'fined units as unconpiled. Ihe -d option is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source^file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -€ or -E option should be used. 

-e (error) Process conpilation error messages using a.error and 
send it to stzmdard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out while the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to stan^rd output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usir&g a.error, 
emised them in the source file and call the environment editor 
ERRC^ EDITOR. If EBBOR_EDITOR is defined, the environment 
variaEle ERROR_pattern should also be defined. ERRQR_PATTERN 
is an editor search ccxmand that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable EE(POR_TABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 

B-3 





CXX1PIIAT10N SYSTEM OPTIONS 


trinned so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or conpilation information). Hie trimming 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the MINj5VAS_AI»R 
and MAX_GVAS_ADOR INFO directives. 

-K {keep) Keep the intermediate language (IL) file produced 
the ccmqpiler front end. The XL file will be placed in 
the .objects directory with the file name Acla_source. 

-L libraryjname 

(library) Operate in VADS library library_name. 

[Default; current worliing directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(NO space between the -1 and the file edsbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unit^name must alrea^ be 
compiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VADSself) or a.vox 
(VADScross) unless overridden with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assumed to be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be nam^ a.out (VADSself) or a.vox 
(VADScross) unless overridden with the -o option. 

-N (no code sharing) Compile all generic instantiations 
without sharing code for their bodies. This optton 
overrides the SHARE_BQDy INFO directive and the SHARE_CODE 
or SHAREJBCX)Y pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries. 
This option is valid only if the -M option has also been invoked. 

(Sun SPARC «■> Paragon only) 


-O[0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 




COMPIIATION SYSTEM OPTIONS 


-O fxill optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsvnning moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global cannon stibexpression elimination 
-04 add hoisting invariants frcmt loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suf^ressed. 

Note that using the -OO option can alleviate some problems vhen 
debugging. For exanple, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in vdiich the 
recompilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file and exits.. This allows recovery from 
"GVAS exhausted" without reconpiling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

B-5 




COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (verbose) Print conf>iler version number, date and time of 
•coo^ilation, name of file caif>iled, command input line, 
total compilation time and error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

Ihe ada command executes the Ada coopiler and ccsopiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
ccxnpiled. 

^ default, ada produces only object and net files. If the -M option 
is used, the coopiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files conpatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Ccxnmand line options may be specified in any order but the order of 
coopilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS conpilers may be simultaneously available on a single 
system. Because the ada connend in any VADS_locatiorvbin on a system 
will execute the correct coopiler conponents based upon visible 
library directives, the option -sh is provided to print the name of 
the conponents actiially executed. ^ 

Program listings with a disassembly of machine code instructions 
are generated ^ a.db or a.das. 

NOTE: If two files of the same name from different directories are 
conpiled in the same ada library using the -L option (even if the 
contents and iinit names are different), the second coopilation will 
overwrite the first. For exanple, the coopilation of 
Aisr/directory2/foo.a -L /MsrAads/test will overwrite the 
coopilation of Aisr/directoryl/foo.a -L A>srAads/test in the 
VADS library /usrAads/test. 



COMPILATION SYSTEM OPTIONS 


NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TEMPDIR 
is not set, /tmp is used. If the path specified by IMTOIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 


The lirdter options of this Ada implementation, as described in this Appendix, 


are provided 
references in 
report. 


by the customer, 
this appendix are 


Unless specifically noted otherwise, 
to linker documentation and not to this 


i. 


B-7 




C0MPIIATIC3N SYSTEM OPTIONS 


a.Id Conmaind Reference a.Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id [options! unit_name (linker_options] 

Arguments 

linkerjoptions 

All arguments after xjaiit_name are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id consnand. These are: 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on seme hosts 
(including ULTRIX, HP-UX aixi System V). (VADSself only) 

-DT (time) Displays how long each {^se of the prelinking process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies'used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases whene linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present v^en many object 


B-8 









CXMPILATION SYSTEM OPTIONS 


files are being linked. 

“L library_naiDe 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

'NX (NX) Link with NX Startup copde and with the NX archive libraries. 
(Sun SPARC «> Paragon only) 

-o executable^file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

'Sh (show) Display the name of the tool executable but do not 
execute it. 

-*T (table) List the symbols in the elaboration table to standard 
output. 

'U (xmits) Print a list of dependent units in order and 
suppress linking. 

-v (verbose) Print the linker ctxmnand before executing it. 

'V (verify) Print the linker ccmnand but sxqjpress execution. 

'W (warnings) Suppress warning messages, 
xmitjname 

name of an Ada unit. It must name a non-generic siibprogram. 

If unit_naine is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make vnitjname a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada ccnpiler to check dependency information, a. Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also incltide WITHn 
directives that allow the autcxnatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any nusdser of WITHn 

B-9 








CX3MPILATIC3N SYSTEM OPTIONS 


directives may be placed into a library but they must be 
nisnbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK;object_file: 

WITH2:LINK;archive_f ile: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Con??uter Systems, the 
USE_LMT_LlNK^INPO directive speeds relinking by retaining a list 
of units, theTr types, seals dependencies. 

VADS_location/bin/a.Id is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The ~sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) defaijlt output file 

•nets Ada OXANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

I 

Diagnostics ^ 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linkeu.. 


B-10 




APPEIIDIX C 

APPENDIX F OF THE Ada STANDAPD 


Itie only allowed iiif)leinentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to conpiler documentation axid not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of ^>pendix F, are: 


package STANDARD is 


type INTEX3ER is range -2147483648 .. 2147483647; 
type TINy_iNTECT» is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 












APPENDIX F OF THE Ada SIANDAJRD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. Hiis pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are sxibject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. lNLINE_ONLy Pragma 

The INLINEjONLY pragma, \Aien used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine vdiich saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGBAN_ERROR will be rais^ at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is ’ 
used only to implement code bodies for which no actual Ada' 
body can be provided, for exanple the MACHINE_CODE package. 

1.4. SHARE_(X»E Pragma <. 

The SHAPE_CCX)E pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a ccmpilation, but before 
any stibsequent compilation unit. 

Nhen the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu- 







APPENDIX F OF THE Ada STANDARD 


ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
vhich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BCX)Y is also recognized by the inple- 
mntation and has the same effect as SHAREjCOOE. It is 
included for ccxnpatediility with earlier versions of VADS. 

1.5. N0_IMAGE Pragma 

The pragma sujpresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type v^ose image array has been suppressed will result in a 
compilation warning and PPOGRAMJERROR raised at run time. 

1.6. EXTERNALJAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity frcxn other languages. The pragma is allowed at the 
place of a declarative item in a package specificaticxi and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or- 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name wi^ an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 







APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CX»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
ccmnpiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to generated. 
The default is ON. 


1.9. OPTIMIZE_CX»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inqplemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RH. 


2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms ceui be either functions or procedures. The 
types of parameters and the resxilt type for functions must 
be scalar, access or the predefined type AIX>RESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the AIX>RE5S attribute. 

2.5. LIST 

This pragma is inplemented as described in AppeT)dix B of the 
Ada RN. 


2.6. MEMORY_SIZE 

This pragma is recognized by the in{>leroentation. The imple- 


C-4 






APPENDIX F OF THE Ada STANDARD 


mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 

2.7. NONJREENTRANT 

This pragma takes one argument which can be the name of 
either a library s\ibprogram or a svibprogram declared imnedi- 
ately within a library package spec or body. It indicates 
to the compiler that the sut^rogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the' 
Ada RM. 


2.12. PASSIVE 

t, 

The pragma has three forms : 

PRACaiA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE( INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 


C-5 




APPEM)IX F OF THE Ada STANDARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at conpile time and will 
raise TASK1NG_ERP0R at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in ^jpendix B of the 
Ada RN. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 

2.15. STORAflEJUNIT 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be mtsdified by means of 
pragmas, the SYSTEM package must be recoopiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK euid in some cases OVERFLCWjCHECR cauinot be 
supressed. 

2.17. SYSTEMJJAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address ofthe 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_C(X>E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.6 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 




APPENDIX F OF THE Ada STANDARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX>RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNEDJTVPES; 
package SYSTEM is 

pragma suppress(ALL_CHECRS); 
pragma suppress(EXCEPTIQN_TABLES); 
pragma notjelaborated; 

type NAME is ( sysv860jparagon ); 

SYSTEMJNAME : constant NAME sysv860jparagon; 

STORAGEJUNIT : constant 8; 

MEMORY_SIZE ; constant 16_777_216; 

— System-Dependent Named Numbers 

M1N_1NT j constant -2 147 483 648; 

MAX_1NT : constant 2 T47 783 ^47; 

MAX_D1GITS : constant 1?; 

MAX_MANTISSA : constant 31; 

FINE_DELTA ; constant 2.0**(-31); 

TICK : constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; J 

MAX_REC_SIZE : integer 1024; 

type ADDRESS is private; * 

function ">" (A: AIX3RESS; B: ADDRESS) return BOOLEAN; 

function "<" (A: AIX)RESS; B: AIDRESS) return BOOLEAN; 

function ">«"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<-"(A: AIX>RESS; B: ADDRESS) return BOOLEAN; 

function (A: AIX»ESS; B: AEX3RESS) return INTEGER; 

function (A; ADDRESS; I: INTEC2M) return ATORESS; 

function (A: AIX)RESS; I: INTEGER) return AIX)RESS; 

function (I: UNSIGNED TYPES.UNSIGNED INTECXR) return AIX>RESS; 


C-7 



APPENDIX F OF THE Ada STANDARD 


function MEnORY_ADDRESS 

(I: UNSIGNED_TyPES.UNSIGNED_INTEGER) return ADDRESS renames "+" 

NO_AM)R ; constant AI»RESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

N0_PASS1VE_TASK_ID : constant PASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SIZE: constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID ; constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIAN 

); 

BYTEjORDER; constant BYTEjORDERJT BIG_ENDIAN; 
type LONG_ADDRESS is private; 

NO_LONG_ADDR ; constant LQNG_ADDRESS; 

function (A: LCNG_ADDHESS; 1; INTEGER) return LC3NG_ADDRESS; 

function (A; LONG_ADDRESS; I: INTEGER) return LONG_ADDRESS; 

function MAKE^LONGJUXJRESS (A: ATORESS) return LCNG_AIX)RESS; 

fmction LOCALIZE(A: LOMGJUXDRESS ; BYTE_SIZE : INTEGER) return ADDRESS 

function STATION_OF(A; LONGJVDDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is the julian day. 
siJbtype DAYJT is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPC»TS_INVOCATION_BY_AI»RESS : constant BOOLEAN TRUE; 

SUPPORTS_PREELABORATION ; constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPORTED : constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPT_TASK. 

type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

fiinction RETURN_ADDRESS return ADDRESS; 

private 

type AIX)RESS is new UNSIGNED__TYPES.UNSICa4ED_INTEGER; 

C-8 




APPENDIX F OF 1HE Ada STANDARD 


N0_A1X3R : constant AIX)R£SS 0; 

pragma BUILT_1N(">"); 
pra^ BUILT_IN("<"); 
pragma BUILT_IN( 
pragma BUILT_IN( 
pragma BUILT_IN(; 
pragma BUILT_IN{; 

type TASK_1D is new 0NSIC2ffiD_TYPES.UNSIGNED_INTBGER; 
N0_TASK_ID : constant TASK_ID 0; 

type PASSIVE_TASK_ID is new ONSIC2®D_TYPES.UNSI(a«ED_INTEGER; 
NO_PASSIVE_TASK_ID : constant PASSIVE_TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID :• 0; 

type LQNG_AIX)RESS is 
RECORD 

Station : UNSIGNED_TyPES.UNSIGNED_INTEGER; 
addr : AIX)RESS; 

END RECORD; 

N0_LC3NG_ADDR ; constant LC]NG ADDRESS (0, 0); 


pragma BUILT_IN(MAKE_IXI«3JiJ»RESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

pragma BUILT_IN(RETURN_ADDRESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record ccmponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding vdiere possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 



APPENDIX P OP THE Ada STANDARD 


clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of confx^nents only when the coo^nent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables v^ich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement vAiere the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are inposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RN 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. <i 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It sinply specifies the 
interrupt vector nundber. For passive ISRs, the nnn of the 
passive(internet,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 





APPE^IDIX F OF THE Ada STANDARD 


The A1X)RESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are sxipported. 

The general definition of the package MACHINE_CC»E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
.statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CCX)E_n'( opcode, operand {, operand} ); 

vAiere n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a sxibaggregate. The format 
is as follows: 

CC»E_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

COOE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINEjCCXfe or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CWE must be static expressions, string literals, or 
the functions defined in MACHINEjCCE)E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is siipported. 

6. Conventions for Implementation-generated Names 


C-11 




APPENDIX F OF IHE Ada STANDARD 


Ihere are no iiqpleinentation-generated names. 

7. Interpretation of Eixpressions in Address Clauses 

Address expressions in an address clause are interpreted as 
{^ysical addresses. 

8. Restrictions on unchecked Conversions 
None. 

9. Restrictions on unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX REX:_SIZE as 
the record size (expressed in STORAGEJUNITS) ^en the size 
of ELENENTJTYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string \diere ELEHENTjrypE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_REOORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 x STORAGEJUNIT bits. DIRECT_IO will raise USE_EP'K)R 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SBQUENTIAL_IO use the value MAK_RECJ5IZE 
as the record size (expressed in STORAGEJUNITS) vAien the 
size of ELEHENTjryPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
NAX_RECORD SIZE is define? in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO inposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to inply that resourcee up to or 
even near these limits are availei)le to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including Ihe end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE UNITS. The maximum size of a statically 



APPENDIX F OF THE Ada STANDARD 


sized record type is 4,000,000 x STC»AGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE^SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STQRAGEJUNITS. This is the value 
returned by T'ST0RAGE_S1ZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGEjSIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_SIZE for an access type T. 

11.5. Limit on Declared CX)jects 

There is an absolute limit of 6,000,000 x STORAGEJJNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 








