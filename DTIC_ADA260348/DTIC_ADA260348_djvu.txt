Pubkc raponing burdwi 
nMd*d. and rcvtawing I 
Haadquantra Sarvica. 1 
Managamant and Budgbi. 


AD-A260 348 



LA,/ AJOO-i. 


»N PAGE 


Form Approved 
OPMNo. 0704 0188 


1 ^ 


:ludng Hta dnia tw ra«iM>ii^lrWfuctio(w^Mj^ing axiBling^^ourca^«i«rin^n^nainiaininc^^^^i 
any dinar aspaa al Iha colaclion ol inlotmalion. aicludng auggaationa lor raducing the burden, lo Washington 
ray. Suta 1204. Adinglon. VA 22202-4302. and to the Ollica ol Moimaiion and Ragulatory Attaira Otlica ol 


12, REPORT DATE 


13, REPORT TYPE AND DATES COVERED 


1. AGENCY USE ONLY (Leave Blank) 


Final: 15 Dec 92 


4. TITLE AND SUBTITLE 

Validation Summary Report; Software Leverage, Inc., Stratus Ada. Version 6.1, 
XA/R20 under FTX, 2.0.1 (Host & Target), 921015W1.11294 

5. FUNDING NUMBERS 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 

USA 


7. PERFORMir^ ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB. Dayton, OH 45433 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-557.1092 

9. SPONSORINGyMONITORING AGENCY NAME(S) AND ADDRESS{ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 


Software Leverage, Inc., Stratus Ada, Version 6.1, XA/R20 under FTX, 2.0.1 (Host & Target), ACVC 1.11. 



14 SUBJECT TERMS / 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 

Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17 SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18. SECURITY CLASSIFICATION 

UNCLASSIFED 

19. SECURITY CLASSIFICATION 

OF ABSTRACT 

UNCLASSIFIED 

20. LIMITATION OF ABSTRACT 


NSN 7540-01 -280-550 Standard Form 298. (Rev 2-89) 

Prescribed by ANSI Std 239-128 

J 


















AVF Control Number; AVF-VSR-557.1092 
Date VSR Completed: 15 December 1992 

92-07-09-SWL 


Ada CC»!PILE3l 
VALIDATIC«a SUMMARY REPORT: 
Certificate Number: 921015W1.11294 
Software Leverage, Inc. 
Stratus Ada, Version 6.1 
XA/R20 under FIX, 2.0.1 


(FINAL) 


Prepared By: 

Ada Validation Facility 

645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 


93-01447 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 15 October 1992. 

Compiler Name and Version: Stratus Ada, Version 6.1 

Host Conputer System: XA/R20 

londer FTX, 2.0.1 

Target Computer System: XA/R20 

under FTX, 2.0.1 

Customer Agreement Number: 92-07-09-SWL 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
921015W1.11294 is awarded to Software Leverage, Inc. This certificate 
expires two years after the ANSI adoption of ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 


645 C-CSG/SCSL 


Wright-Patterson AFB OH 45433-6503 


Ada \2lMation Org^ization 

Directofy\doirputer and Software Engineering Division 
Institute tor Defense Analyses 
Alexeuidria VA 22311 



Dr. John Solomond, Director 


Department of Defense 
Washington Ex: 20301 




DECLARATION OF CONFORMANCE 


The following declaration of confornance was supplied by the customer. 

Declaration of Conformance 
Customer: Software Leverage, Inc. 

Certificate Awardee: Stratus Computer, Inc. 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
.^da Implementation: 

Ada Compiler Name and Version: Stratus Ada, Version 6.1 

Host Computer System: XA/R20 

under FTX, 2.0.1 

Target Conputer System: XA/R20 

under FTX, 2.0.1 

Declaration: 

We, the undersigned, declare that we have no 
knowledge of deliberate deviations from the Ada Language 





TABLE OF CONTEigTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATICW SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Steindard [AdaSB] using the 
current Ada Compiler Validation CapaJDility (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating coiintry, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the con^iuters, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate euid conplete, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INTRC®UCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programninq Language, 

ANSI/MIL-STI>-1815A, February 1983 and ISO 8652-1987. 

{Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by meams of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, cind L. The first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B cind 
class L tests are expected to produce errors at compile time cind link time, 
respectively. 

The executable tests are written in a self-checking memner eind produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library xanits, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity fxinctions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately conpiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTIW 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
treunsformation of Ada programs into executeible form and 
execution thereof. 

Ada Compiler The means for testing con^jliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation sixnmary 

(ACVC) report. 

Ada An Ada compiler with its host computer system eind its 

Implementation target computer system. 

Ada Joint The part of the certification body vrfiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers cind 

System associated software, that uses common storage for all or 

part of a program eind also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations emd logic operations; and that cein execute 
programs that modify themselves during execution. A 
computer system may be a stamd-alone unit or may consist of 
several inter-connected units. 


1-3 





INTROTUCTiaa 


Conformity 


Customer 


Declaration of 
Confornance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LPM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF v^iich specifies the terms and 
conditions for AVF services (of euiy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inplementation for 
vrtiich validation status is realized. 

A computer system vdiere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelev€mt for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Leuiguage Reference rtenual, published as 
ANSI/MIL-STI>-1815A-1983 and ISC 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, eund data nanagement. Usually, 
operating systems are predominantly software, but partial or 
complete hardware inplementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 








CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C4565LA 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

B04008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA20lE 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicedale if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries eind commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION Dr.ENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LC»JG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLOAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLOAT, or SHORT_FLClAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MAaiINE_OVERFLCiWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACMlNEjOVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this in?)leroentation, there is no such type. 

C96005B uses values of type DURATICXJ's base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause cam specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 


IMPLEMENTATIC3N DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following tcible check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3i02F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE___LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds G3UNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 




IMPLEMENTATION DEPENDEITCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 14 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Steu:idard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 

A35801E was graded inapplicedale by Evaluation Modification as directed by 
the AVO. The conpiler rejects the use of the range 
FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the reuige of safe numbers 
(cf. LRM 3.5.7:12). 


2-4 





CHAPTE31 3 


PROCESSING INFORMATICS 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada in^lementation, contact: 

Daniel Grosshams 
Software Leverage, Inc. 

485 Massachusetts Ave. 

Arlington, MA 02174-5103 
(617) 648-1414 


For sales information about this Ada implementation, contact: 

Lisa Ludwig 

Stratus Computer, Inc. 

55 Fairbanks Blvd. 

Marlboro, MA 01752-1298 
(508) 460-2695 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 


PROCESSING INFORMATIW 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicaible; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Progranmiing Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that vrere withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicable Tests 3805 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTIOl 

A magnetic tape containing the customized test suite (see section 1.3) was 
ta)cen on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link described above, and run. The results 
were captured on the host conpjter system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 

OPTIONS Effect 

-el Intersperse error messages among source 


3-2 



PROCESSING INFORMATIOJ 


lines and direct to standard output. 

-M unitjname Produce an executable program by linking 
the named unit as the main program. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Ihe listings examined on-site by 
the validation team were also archived. 


3-3 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the m 20 cinium input-line length, vrtiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$BIG_ID1 (1..V-1 => 'A% V -> '1') 

$BIG_ID2 (1..V-1 «> 'A', V «> '2') 

$BIG_ID3 (1..V/2 »> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 «> 'A') & '4' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 »> '0') & "298” 

$BIG_REAL_L1T (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 »> 'A') & '1' & 

$BLANKS (1..V-20 ) 

$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16;" & (1..V-7 -> '0') & "F.E;" 


A-1 


MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following tcible lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_S1ZE 

32 

$ALIGNMENT 

8 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT__SYS_NAME 

I860_SYSTEM_V 

$DELTA_DOC 

0.000000000465612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(2) 

$ENTRY_ADDRESS1 

SYSTEM.'‘+"(3) 

$ENTRY_ADDRESS2 

SYSTEM."+"(18) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

$ 9 

$FIXED_NAME 

NO_SUCH__TYPE 

$FIiOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

If fl 

$F0RM_STRING2 

"CANNOT__RESTRICT_FILE_CAPACITY 

$GREATER THAN DURATION 

100_000.0 

$GREATER THAN DURATION BASE LAST 

To_ooiy_ooo.o 

$GREATER_THAN_FLOAT 

BASE LAST 

1.?E+308 

$GREATER_THAN_FLOAT_ 

SAFE LARGE 
■ 5.'ffE307 


A-2 






MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE__LARGE 
~ ~ 9.0E37 

$HIGH_PRIORITY 99 

$ ILLEGAL EJCTERNAL FILE NAMEl 

7illegal/f ile_naine/2} ] %2102c .dat" 


$ILLEGAL EXTERNAL FILE NAME2 

7i 1legal/fi1e_name/CE2102C*.dat" 

$INAPPROPRIATE LINE LENGTH 

-1 


$INAPPROPRIATE PAGE LENGTH 

-1 


SINCLUDE_PRAGMA1 

$INCLUDE_PRAGMA2 

$INTEGER_FIRST 

$INTEGER_LAST 

$INTEGER_LAST_PLUS_1 2147483647 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATIC»} -100_000.0 

$LESS THAN DURATIW BASE FIRST 

" ~ ~ 000 000.0 


PRAGMA INCLUDE ( "A28006D1-TST") 
PRAGMA INCLUDE ("B28006D1.TST") 
-2147483648 
2147483647 


$LINE_TERMINATOR 
$LOW PRIORITY 


ASCII.LF 

0 


$MACHINE CODE_STATEMENT 

~ CODE 0'(OP •=> NOP); 


$MACHINE_CCX)E_TyPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NANE 


CODE_0 

31 

15 

2147483647 

2147483648 

-2147483648 

TINY_INTEGER 

A-3 





MACRO PARAMETERS 


$NAME_L1ST 

$NAME_SPECI FI CATIOJl 

$NAME_SPECIFICATICN2 

$NAME_SPECI FI CATIC»J3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITiaN 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$YARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOOR_PRAGMA 


I860_SYSTEM_V 

/net/pr j7/860-sysv/acvc-l.ll/ce/X2120A 
/net/pr j7/860-sysv/acvc-l.ll/ce/X2120B 
/net/pr j7/860-sysv/acvc-l.ll/ce/X3119A 
16F00000E# 

1234567 

8 

I860_SYSTEM_V 

ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CALL_0 

32 

1024 

0.01 

FCNDECL.VAR_ADDR 
FCNDECL.VAR_ADDR1 
FCNDECL.VAR_ADDR2 
PRAC^IA PASSIVE 


A-4 





APPENDIX B 


COMPILATIOI SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


ada - invoke the Ada compiler 
SYNTAX 

ada (options] (source_file]... (object_file.o]... 

OPTIONS 

-a file_name (archive) Treat file_name as an object 

archive file created by ar. Since some archive 
files end with .a, -a is used to distinguish 
archive files from Ada source files. 

-A (disassemble) disassemble the units in the source file 

after conpiling them. -A can be followed by arguments that 
further define the disassembly display (e.g. -Aa, -Ab, -Ad, 
-Af, -Al, -As); 

a add hexadecimal display of instruction bytes to 
disassembly listing 

b disassemble the unit body (default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file__name.das" 

s disassemble the unit spec 

-D identifier type value (define) Define an identifier of a 
specified type euid value. See VM)S ADA 
PREPROCESSOR REFERENCE. 

-d (dependencies) Analyze for dependencies only. Do not 
do semantic analysis or code generation. Update the 


B-1 


CXJMPILATION SYSTEM OPTIONS 


library, marking any defined units as uncompiled. The 
-d option is used ty a.make to establish dependencies 
among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 

argument, ada processes error messages using a.error and 
directs a brief output to stauidard output; the raw error 
messages are left in ada_source.err. If a file pathname 
is given, the raw error messages are placed in that file. 
If a directory argument is supplied, the raw error output 
is placed in dir/source.err. The file of raw error 
messages can be used as input to a.error. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file, euid call the environment 
editor ERROR_EDITOR. (If ERROR_EDITOR is defined, the 
environment variable ERROR_PATTERN should also be defined. 
ERROR_PATTERN is an editor search command that locates the 
first occurrence of '###' in the error file.) If no editor 
is specified, vi(l) is invoked. 

-F (full DIANA) Do not trim the DIANA tree before outpuit to 
net files. To save disk space, the DIANA tree will be 
trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled (unless 
those nodes are part of the body of an inline or generic or 
certain other values needing to be retained for the debugging 
or compilation information). Ibe trimming generally removes 
initial values of variables and all statements. 

-K (keep) Keep the intermediate language (IL) file produced by 
the conpiler front end. The IL file will be placed in the 
.objects directory, with the file name Ada_source. 

-L library_name (library) Operate in VADS library library_name. 

(Default: current working directory] 

-lfile_abbreviation (library search) This is an option passed to 

the ld(l) linker telling it to search the 





CCWPILATION SYSTEM OPTIWS 


specified library file. (No space between 
the -1 and the file abbreviation.) (self-host 
only) 

For a description of the file abbreviations, 
see also Operating System documentation, 
ld(l). 

-M unit_name (main) Produce an executable program by linking 

the named unit as the main progreun. unit_name must 
already be compiled. It must be either a 
parcuneterless procedure or a parameterless 
fxanction returning an integer. The executable 
program will be named a.out (self-hosted) or a.vox 
(cross-development) unless overridden with the -o 
option. 

-M source_file (main) Produce an executable program by compiling 
eind linking source_file. The main unit of the 
program is ass\jmed to be the root name of the 
.a file (for foo.a the unit is foo). Only one 
.a file may be preceded by -M. The executable 
program will be named a.out (self-hosted) or 
a.vox (cross-develofHnent) unless overridden with 
the -o option. 

-o executable_file (output) This option is to be used in 

conjunction with the -M option. executable_file 
is the name of the executable rather than the 
default. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level 
of optimization. The default is -04. 

-O full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common sxibexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction 

scheduling and one pass of reducing induction 
expressions 

-06 no change and instruction scheduling 
-07 add one more pass of induction expression 
reduction and instruction scheduling 
-08 add one more pass of induction expression 
reduction and instruction scheduling 
-09 add one more pass of induction expression 


B-3 



COMPIIATIOJ SYSTEM OPTIONS 


reduction, instruction scheduling and hoisting 
expressions common to the then and else parts of 
if statements. 

Hoisting from branches (and cases alternatives) can 
be slow and does not always provide significant 
performance gains so it can be suppressed. 

For more information about optimization, see 
CCX1PILING ADA PROGRAMS, Compiler Optimizations and 
pragma OPTIMIZE_CODE(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis of 
all generic instantiations, causing 
reinstantiation of emy that are out of date. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. (See also 
pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conpiler version number, date and time of 
compilation, name of file compiled, coninand input line, 
total compilation time and error summary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

The command ada executes the Ada conpiler and compiles the 
named Ada source file, ending with the .a suffix. The file must 
reside in a VADS library directory. The ada.lib file in this 
directory is modified after each Ada xmit is compiled. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invokes a.Id 
and builds a conplete program with the named library unit as 
the main progreun. 

NOn-Ada object files (.o files produced by a conpiler for 
another language) may be given as arguments to ada. These files 
will be passed on to the linker and will be linked with the 
specified Ada object files. 

Ccmmand line options may be specified in emy order, but the 
order of ccxnpilation and the order of the files to be passed 


B-4 




COMPILATIW SYSTEM OPTI(»]S 


to the linker caui be significeuit. 

Several VADS compilers may be simultaneously availeible on a 
single system. Because the ada command in any VADS_location/bin 
on a system will execute the correct conpiler conponents based 
upon visible library directives, the option -sh is provided to 
print the name of the conponents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

DIAGNOSTICS 

The diagnostics produced by the VADS compiler are intended to 
be self-explematory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 

RELATED TOPICS 

a.app, a.das, a.db, a.error, a.help, a.Id, a.make, a.map, a.pr 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a.Id - prelinker 
SYNTAX 

a.Id (options) unit_naroe [linker_optionsl 
OPTIONS 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including Ultrix, HPUX and System V). 

-DX (debug) Debug memory overflow (use in cases where linking a 
large number of units causes the error message "local symbol 
overflow" to occur). 

-E unitname (elaborate) Elaborate unit name as early in the 
elaboration order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 


B-5 



COMPILATION SYSTEM OPTIONS 


-L library_name (library) Operate in VADS library library_ncime. 

[Default: current working directory] 

-o executable_file (output) Use the specified file name as the 

naune of the output rather than the default 
(a.out (self-hosted) or a.vox 
(cross-development)). 

-sh (show) Display the naune of the tool executaible but do not 
execute it. 

-U (units) Print a list of dependent xonits in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker commauid but suppress execution. 

(linker options] All arguments after unit_name are passed 

to the linker. These may be options for the 
linker, archive libraries, library abbreviations 
or object files. 


DESCRIPTION 

a.Id collects the object files needed to make unit_name a 
main program and calls the ld(l) linker to link together all 
Ada and other language objects required to produce an executable 
image in a.out (self-hosted) or a,vox (cross- development). 
unit_name is the main program and must name a non-generic 
subprogram. If unit_naroe is a function, it must return a value 
of the type STANDARD.INTEGER. This integer result will be passed 
back to the shell as the status code of the execution. The utility 
uses the net files produced by the Ada compiler to check 
dependency information, a.Id produces an exception mapping table 
and a unit elaboration table and passes this information to the 
linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that cam raise an exception will no 
longer have exception taJales. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. Besides 
information generated by the compiler, these directives also 
include WITHn directives that allow the automatic linking of 
object modules ccmipiled from other languages or Ada object 
monies not named in context clauses in the Ada source. Any 
number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The 
directives are recorded in the library's ada.lib file eind have 
the following form. 


WITHl:LINK:object_file: 


B-6 






COMPILATION SYSTEM OPTIONS 


WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list- 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same nvnnbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to chamge or report library directives in 
the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
edDbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable 
file. 


FILES AND DIRECTORIES 


a.out/a.VOX 
.nets 

.objects/* 

VADS location/standard/* 


default output file 

Ada DIANA net files directory 

Ada object files 

startup and standard library routines 


DIAGNOSTICS 


Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 

RELATED TOPICS 

ada, a.make, a.info 


B-7 





APPEMDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada in^jlementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINy_INTEGER is range -128 .. 127; 

type FLOAT is 

digits 15 range -1.79796313486232E+308..1.79769313486232E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E38 .. 3.40282E+38; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


C-1 





APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1 . Implementation-Dependent Pragmas 

1.1. INLINE CM.Y Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma 
INLINE, indicates to the conjjiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINE_(»ILY subpro¬ 
gram recursive a warning message will be emitted euid am 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bodies for which no actual Ada 
body cam be provided, for exan^jle the MACHINE_CODE package. 

1.3. SHARE CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma euid the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.4. NO IMAGE Pragma 






APPENDIX F OF TOE Ada STANDARD 


The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atten?>t to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
coiqpilation warning eurid PROGRAM_ERROR raised at rm time. 

^.5. EXTERNAL NAME Pragma 

The EXTERNAL NAME pragma takes the name of a sii)program or 
variable defined in Ada 2 uid allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification emd 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or stijprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 

1.8. OPTIMIZE CODE Pragma 

Takes one of the identifiers or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vdiether the code should be optim¬ 
ized by the compiler. The default is CXI. When OFF is 
specified, the compiler will generate the code as specified. 


C-3 




APPENDIX P OF THE Ada STANDARD 


2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is implemented as described in i^pendix B of the 
Ada RN. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have nxxie IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.6. MEMORY SIZE 

This pragma is recognized b^ the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack- 


C-4 





APPENDIX F OF THE Ada STANDARD 


age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.1^. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.n. PAGE 

This pragma is implemented as described in i^pendix B of the 
Ada RN. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time emd will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.1A. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.13. STORAGE UNIT 

Ihis pragma is recognized by the implementation. The inple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 


C-5 



APPENDIX F OF TOE Ada STANDARD 


2.]^. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISION CHECK emd in some cases OVERFLCW_CHECK cannot be 
supressed. 

2.n. SYSTEM NAME 

This pragma is recognized by the in^ilementation. Itie imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program vuiit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a sxabprogram, pack¬ 
age, task unit, or ledbel, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for v^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CCX)E, The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T' TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 

Specification Of Package SYSTEM 


— Copyright 1987, 1988, 1989, 1990 Verdix Corporation 

— Preserve line numbers as they are reported in ACVC tests. 

with unsigned_types; 
package SYSTEM is 

pragma suppress(ALL_CHECKS) ,* 


C-6 




APPENDIX F OF THE Ada STANDARD 


pragma suppress(EXCEPTIC»I_TABLES); 
pragma not elaborated; 


type NAME is ( i860_System_V ); 

SYSTEM_NAME : constant NAME ;» i860_System_V; 

STORAGE_UNIT : constant :» 8; 

MEMORY SIZE : constant 16 777 216; 


— System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
: constant 
; constant :» 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 ■?83 ^47; 
15; - - 

2.0**(-31); 

:= 0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE ; integer ;* 64*1024; 
type ADDRESS is private; 

function ">" (A: ADDRESS; B; ADDRESS) return BOOLEAN; 

function "<" (A: ADDRESS; B; ADDRESS) return BOOLEAN; 

function ’’>»"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function "+" (A; ADDRESS; I; INTEGER) return ADDRESS; 

fxaiction (A: ADDRESS; I: INTEGER) return ADDRESS; 

function "+" (I: UNSIGNED TYPES.UNSIC34ED INTEGER) return ADDRESS; 


function MEMORY_ADDRESS 

(I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS rename , "+"; 


N0_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

type PROGRAM_ID is private; 

NO PROGRAM ID : constant PROGRAM ID; 


private 


type AM)RESS is new UNSIGNED_TYPES.l^SIGNED_INTEGER; 
NO AIX}R : constant ADDRESS 0; 


C-7 



APPEM)IX F OF THE Ada STANDARD 


pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN(">-"); 
pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_TASK_ID : constant TASK_ID := 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID ;= 0; 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the 2 ±)sence of pragma PACK record conponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of con^nents; em explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only >^en the conponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.2* Address Clauses 

Address clauses are only su{^rted for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 


C-8 







APPENDIX F OF THE Ada STANDARD 


^.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneuroonics, 
a set of register definitions, and a set of addressing mode 
fmctions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE n*( opcode , operand {, operand } ); 

v^iere n indicates the number of operands in the aggregate. 

A special case arises for a variable nxxmber of operands. 
Ihe operands are listed within a subaggregate. ihe format 
is as follows: 

CODE_N'( opcode , ( operand {, operand )) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

The OTCode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CC»E must be static expressions, string literals, or 
the functions defined in MACHINE_CW)E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 


C-9 





APPENDIX F OF THE Ada STANDARD 


6. Conventions for Implementation-generated Names 

Ttiere are no implementation-generated names. 

2* Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10 . Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEMENr_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENr_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SlZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X ST0RAGE_UN1T bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_I0 use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) when the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string v4iere ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUEin'IAL_IO in^xjses no limit on 
MAX_REC_SIZE. 

11 . Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to in?)ly that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a meuciimim line length of 500 


C-10 






H APPENDIX F OF THE Ada STANDARD 


characters including the end of line character. 

^.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 


In the absence of an explicit ST0RAGE_SI2E length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

^.4. Default Collection Size 

In the absence of ein explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

n.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the comp¬ 
ilation of the unit with a FATAL error message. 


C-11 







