
REPORT DOCUMENTATION PAGE 

AD-A285 104 ■Stimated to average 1 hour per response, indudmg the ti 

! Ilf "lllF |j if^ ooliecdon ol informaaon. Send comments 


Form Approved 
0PM No. 


■samated to average i hour per response, indudmg the dme for reviewing instructions, searching exisang nata 
eviewing me ooiiecdon ol informaaon. Send comments regading this burden, to Washington Headqua'te'S 
s. 1215 Jefferson Davis Highway, Suite 1204, Arlington, VA 22202-4302. and to the Office of Information and 
ington. DC 20S03. 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND; VADS Sun4 => PowerPC Simulator, Product #2100-01455, 
Version 6.2 

Host: Sun SP/iRCstation 2 (under SunOS 4.1.2) 

Target" VADS PowerPC Instruction Set Simulator, executing on the Host 


6. AUTHORS: 

Wright-Patterson AFB, Dayton, OH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB. Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office. Defense Information System Agency 
Code TXEA, 701 S. Courthouse Rd., Arlington, VA 
22204-2199 \ ^ \ ^ 



I V...... 




12a. DISTRIBUTION/AVAILABIUTY; Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


(Maximum 200 


Rational Software Corporation. 940630W1.11370 


14. SUBJECT: Ada Programming Language. Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 


15. NUMBER OF 


16. PRICE 


17 SECURITY 

CLASSinCATlON 

UNCLASSIFIED 


18. SECURITY 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


20. LIMITATION OF 



UNCLASSIFIED 


UNCLASSIFIED 
































•.v^. ;v. 


AVF Control, Number*: AVF-VSR-598.06S4 
Date VSR Completed: July 21, 1994 

94-05-12-RAT 




Ada COMPILER 
VALIDATIOl SUMMARY REPORT: 

Certificate Number: 940630W1.11370 
Rational Software Corporation 

VADS Sun4 => PowerPC Siimulator, Product Number: 2100-01455, Version 6.2 
Sun 4 Model SPARCstation2 under SunOS 4.1.2 *> 

VADS PowerPC Instruction Set Simulator 
{executing on the host computer) 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


' *'* ' er' ■' 


iv 


0 ^^ 






9430982 


i. t ■ V k^. ^ “'-.t 




94 










Certificate Information 


The following Ada implementation was tested eind determined to pass ACVC 1.11, 
Testing was completed on 30 June 1994. 

Conpiler Neune and version; VADS Sun4 -> PowerPC Simulator, 

Product Number: 2100-01455, Version 6.2 

Host Conpjter System; Sun 4 Model SPARCstation2 under SunOS 4.1.2 

Target Computer System: VADS PowerPC instruction Set Simulator 

(executing on the host computer) 

Customer Agreement Number; 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11370 
is awarded to Rational Software Corporation. This certificate expires two 
years after MIL-STD-1815B is approved by ANSI. 












DECLARATION OF CONFORMANCE 


Customer: Rational Software Corporation 

Ada Validation Facility; 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version; VADS Sun4 -> PowerPC Simulator, 

Product # 2100 01455, Version 6.2 


Host Computer System: Sun 4 Model SPABC3tation2 ur.ier SunOS 4.1.2 


Target Computer System: VADS PowerPC 601 Instruction Set Simulator 

running on above Host Computer System 


Declaration: 

I, the undersigned, declare tnat i have no knowledge of deiiuei.oLe 
deviations from the Ada Language Standard ANSI /MlL-STD-iei5A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 



Beaverton, Oregon 97006 






TABLE OF COTTENTS 


CHAPTER 1 INTRODUCri(»J 

1.1 USE OF THIS VALinATIC»J SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMQ'TrATION DEPENDEI4CIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COIPILATICX4 SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTE31 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures (Pro92] against the Ada Standard (Ada83) using the 
current Ada CoRipiler Validation Capability (ACVC). This Validation Suncnary 
Report (VSR) gives account of the testing of this Ada in?>leJBentation. For 
any technical terms used in this report, the reader is referred to (Pro921. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide (UG89). 


l.l USE OF THIS V7U,inATI0N SUKWARY REPORT 

Consistent with the natioriol lows of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. 1552), The results of this validation apply only 
to the computers, operating systems, emd coin>iler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other tlum those presented. Copies of 
this report are available to the public from the AVF which perform^ this 
validation or from: 

National Technical information Service 
5205 Port Royal Road 
Springfiel* VA 22161 

Questions regarding this report or the validation test results should be 
directed to the A\T which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INTRODUCTICW 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1583 and ISO 8652-1587. 

(Pto92] Ada Ccmpiler Validation P ro cedures , Version 3.1, Ada Joint 
Program Office, August 19?2. 

[UG891 Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE rassage indicating the result when they are 
executed. Three Ada library xmits, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed bi' the Ada starxiard that would cireuinverit a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the “Class C tests for Chapter 14 of the Ada 
Standard. the operation of RETORT arxl CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

I 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors ate 
expected at link time, and execution is attempted. 

In scxne tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for exanple, the largest intege-, A list 
of the values tised for this implementation is provided in Appendix A. in 
addition to these anticipated test modifications, additional changes may be 
requited to remove vmforeseen conflicts between the tests and 
in^lementation-dependent characteristics. The modifications required for 
this iirplementation are described in section 2.3. 








INTRODUCTKXI 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of itadting the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (r^e section 2.2 and (UG89]). 

In order to pass an ACVC an Ada y, ementation must process each test of the 
customized test suite according ^ the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada compiler The software zind any needed hardware that have to be added to 
a given host and target computer system to allow 

trzinsformation of Ada progreuns into executzOole form euid 
execution thereof- 

Ada Compiler The meams for testing com^diance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 
Program giiidance for the Ada certification system. 

Office (AJPC) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification bodi' that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Implementation 

I 

Computer A functional unit, consisting of one or more conputers and 

System associated software, that uses coomon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, inclxiding arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 





INTRODUCTION 


Cor.fonnity Fulfillment by a prcjduct, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an agreement 

with an AVF vrtiich speciiiies the terms and conditions for AVF 
services (of einy kind) to be performeo. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada in^'lementation for which 
validation status is realized. 

Host Computer A confuter system where Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Lzinguage Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form '‘<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 

System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or coiiplete 
hardware iipiementations are possible. 

Target A conputer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that nas been validated successfully 
Implementation either by AVF testing or by registration [PrQ?2]. 

Validation The process of checkir.g the conformity of an Ada coipiler to 

the Ada programning langxiage and of issuing a certificate for 
this iiplementation. ' 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be in~orrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada progra'^ng language. 


1-4 






CHAPTER 2 

IMPLEMENTATICX4 DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdra^vn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 


publication date 

for this 

list of withdrawn tests 

is 22 November 

1993. 

B27005A 

E28005C 

c28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35509M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C4d612B 

C45612C 

C45651A 

C46022A 

B4yt)0BA 

b49008B 

A54BC2A 


A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C03O26A 

B33026B 

C83041A 

B85001I. 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB700iB 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1D02B 

BD1B06A 

AD1B08A 

B02A(J2A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD720‘'E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE391j2B 






2.2 INAPPLICABiJ. TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation, reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the fjllowing >-ests were determined to be inapplicable for 
the reasons indicated; references to Ada Conanentaries are included as 
appropriate. 







IMPLEMENTATICN Drj>ENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYS'1’EM.MAX_DIGITS; 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C3b706L..Y (14 tests; C3b707L..Y (14 tests) 

• C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y vl4 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 20 tests check for the predefined type LONG_lNTEGER; for 
this inplementation, Urece is no such type: 

C35404C C45231C C453C4C C45411C C45412C 

C45502C C45503C C45504C C45504F C45611C 

C45613C C45614C C45631C C45632C B52004D 

C55B07A B55B09C B86001W CB6006C CD7101F 

C35713C, B86001U, and C86006G check for the predefined type LONG^FLQAT; 

for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FliQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35S01E checks that FLOAT'FIRST. .FLCiAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe mrnbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 

types that require a SYSTEM. MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINFjOVERF'LOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE_OVERFLOWS is TRUE. 

>, 

B86001Y uses the name of a predefined fixed-point type other them type 
DURATICX4; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks whether a length clause ceui specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 






\ ' ■ 


IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), amd CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following table check that USE E?®OR is raised 
if the given file operations ate net supported for the given combination 
of mode euid access method; chis implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Met 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT' 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL. 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAI. 10 

CE2a02Q 

RESET 

our FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT"10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

out”FILE 

DIRECT 10 

CE31C2E 

CREATE 

IN_FILE 

TE)CT_i6 

CE3i62F 

RESCT 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

CUT FILE 

text”10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_I0. 


CE2203A checks that WRITE raises USE_ERROB if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. ^ 

CE3304A checks that SET_LINE^LENGTH and SET PAGE_LENGTK raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this” implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
inpractical. 


2-3 










IMPLEMENTATia'I DEPEJ^ENCiES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report tlie violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B3B003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2303A BD2d03a 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The compiler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C were graded pjassed b^' Evaluation 
Modification as directed by the AVO. These tests use instantiations of the 
support procedure LENGTH CHECK, which uses Unchecked_Conversion according to 
the- interpretation given In Ai-00590. The AVO ruled that this interpretation 
is not binding under ACVC 1.11; the tests are ruled to be passed if they 
produce Failed messages only from tlie instances of LENGTH_(rHECK—i.e, the 
allowed Report.Failed messages have the general form: 

" * CHECK ON REPRESENTATICXJ FOR <TYPE_ID> FAILED." 

AD9001& was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are rec[uired for interfaced subprograms; among the 
procedures that it uses is one with a parauoeter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by coramentinc out line 36 eind 
40; the modified test was passed. 




2-4 




CHAPTER 3 


PROCESSING II'JFORMATIQN 


3.1 TESTING ENVIRCWMENT 


The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales infoimation about this Ada implementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW CO.Tipton Dr., Suite 357 
Aloha, OR 97006-1992 
03) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AW. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Stemdard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92). ' 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inplementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 




PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3796 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c+d+e) 


g) Total Number Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and then copied to the 
host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were cort^iiled, linked and executed on the host computer system. 
The results were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix a for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG891. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximuni input-line length, which is 
the value for $MAX_IN_LEN —also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$i‘iAX__IN_LEi'5 499 — Value of V 

9BIG_ID1 (1..V-1 => 'A', V -> '1’) 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

SBIG_ID3 (1..V/2 »> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_1D4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$1IG_INT_LIT (1..V-3 »> '0') & "298" 

$BIG_REAL_LIT (1..V-5 «> '0') & "690.0" 

SBIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_5TRING2 '"' (l.,V-l-V/2 «> 'A') & '1' & 

SBLANKS (1..V-20 ) 

$MAX_LEN INT BASED LITERAL 

"2:" & (l,.V-5 -> '0') & "11:" 

$MAX_LEN REAL_aASED LITERAL 

" "16:" S. (1..V-7 -> '0') & "F.E:" 


A 1 










MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

■ Macro Parameter Macro Value 

$ACC_SIZ£ 32 

$AL10^MENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$DEFAULT_STOR_«JNIT 8 

$DEFAULT_SYS_NAHE SUN4_CROSS_NEW_PPC601 

SDELTA_DOC 0.000000000456S612873077392578125 

$ENTRY_ADDRESS SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 SYSTEM."+"(16#80#) 

SENTRY_ADDRESS2 SYSTEM."+"{16#100#) 

SFIELD_LAST 2147483647 

$FILE_TERMINAT0R ' ' 

$FIXED_^^A^tE NO_SUCH_TyPE 

$FLaAT_NAME NO_SUCH_TYPE 

SFORM_STRING 

$F0RM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATIOI t, 

100000.0 

SGREATER THAN_DURATION BASE LAST 

TooooUoo.o 

SGREATER THAN FLOAT BASE LAST 

1.'5e+308 

SGREATER THAN FLOAT SAFE LARGE 

B.IJESOT 

A-2 




MACRO PARAMETERS 


$GREATER_THAN_SHORT FLOAT SAFE_LARGE 

9.0E37 

§HIGH_PRIORITY 99 

$ILLEGAL_EOTERNAL_FILE_NAME1 

/illegal/file_naine/2)1S%FILE1.DAT 

$IIiEGAL_E3aERNAL_FILE__NAME2 

/illegal/file_naiDe/2} l$%FlLE2.nAT 

$INAPPR0PPIATE_L1NE LENGTH. 

-1 

$INAPPROPRIATE PAGE LE3«3TH 



-1 


SlNa.UDE_PRAGMAl 

PRAGMA INCL'JDE 

("A20C06D1.TST") 

$INCLUDE_PRAGMA2 

PRAI34A INCLUDE 

("B28006P1.TST") 

SINTEGER FIRST 

-2147483648 


$INTEGER_LAST 

2147483647 


$INTEGER_LAST_PLUS_1 

2147483648 


$ INTERFACE_LANGIIAGE 

C 


$LESS_THAN_DURATICX4 

-100000.0 


$LESS_THAN_DURATICW_ 

BASE FIRST 
-1^000000.0 



$LINE_TERMINATOR ASCII.LF 

§LOW_PRIORITY 0 

$MACHINE CODE STATEMENT 


$MACHINE_CODE_'m>E 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_IOT_PLUS_1 

$MIN_II'IT 

$NAME 


CODE_0'(OP -> NOP); 

CODE_0 

'31 

15 

2147483647 
2147483648 
-2147483648 
TINY INTEGER 


•v 


A-3 











MACRO PARAMETE3^ 


$NAME_LIST SUN4_CBOSS__NEW_PPC601 

$NAME_SPECIFICATI0N1 /ust/acvcl.ll/c/e/X2120A 
$NAME__SPECIFICATIO 12 /usr/acvcl. ll/c/e/X2120B 
$NAME_SPECIFICATI0N3 Aisr/acvcl - ll/c/e/X3119A 
$NEG_BASED_INT 16#FOOOOOOE# 

$NEW__MEM_SIZE 16777216 

$NEW_STOR_UNIT 8 

$NEW_SYS_NAME SUN4_CROSS_NEW_PPC601 

$PACEXTERMINATOR ASCII.LF £ ASCII.FF 

$RECORD_DEFINITION RECORD SUSP: OPERAND; END RECORD; 

$R£CORD_NAME CODE_0 

$TASKxSIZE 32 

$TASKxSTORAGE_SIZE 2048 

$TICK 0.01 

$VARIABLE_ADDRESS VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 VAR_3'ADDRESS 

$YOUR_PRAGMA PRAGMA PASSIVE 


A-4 







APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The conpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation eund not to this 
report. 



B-1 








COMPILATION SYSTEM OPTIONS 


ada Comnand Reference ada 

ada - invoke the Ada compiler 

Syntax 

ada (opticnsl (source_fileI... (object_file.o|... 

Arguments 

object_file.o non-Ada object file names. Hiese files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
cortpiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body (default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das" 
s Disassemble the unit spec. 

-a file_nam6 

(archive) Treat file_naine as an object archive file created 
by ar. Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCon?5iler Ada only) 

(statii ) If static is indicated, tJie Ada program is conpiled 
and lirJred statically. The default is dynamic. 

-c suppress the control messages generated when pragma PAGE 
and/or pragma LIST are encountered. i 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 

-d (dependencies) Analyze for dependencies only. Do not do 

B—2 








COMPIL«^TION SYSTEM OPTIONS 


senantic zuialysis or ccxJe gen* ration. Update the ]'hrary, 
marking any defined units as uncompiled. The -d op .Jn is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. Tnis should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
steuidard output; the raw error messages are left in 
source__file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. Ihe file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process con^jilation error messages using a.error and 
send it to standard output. Only tlie source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated By error_file. Note that there is 
no space between the -Ef and error file. 


4 V V ww «> 2 

(error listing) Same as the ~E option, except that a source 
listing with errors is produced. Note that the source listing is 
direct^ to standard out while the raw errors are placed in 
source_£ile.err. 

(error listing) Intersperse error messages among source 
lines euid direct to standard outp)ut. 

-Elfercor file source__file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced auid directed to stamdard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntaix error messages usiqg a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If E21P0R_EDIT0R is defined, the environment 
variaEle E31R0R_PATTERN should also be defined. ERROR_PATTERN 
is am editor search commauid that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERROR_TABS, if set, 
is used instead of the default ted> settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 


-El 

-t-'i 


-el 




CX)KPIIATIQN SYSTEM OPTIONS 


trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are pact of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or compilation information). The trimming 
generally removes initial values of variables and all 
• statements. 

-G (GVTVS) Display suggested values for the MIN_GVAS_ADDR 
aiKl MAXjGVAS_AI®R INFO directives. 

-K ()teep) Keep the intermediate language (IL) file produced 
by the conpiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_Eource. 

-L library_name 

(library) Operate in VADS library library_name. 

[Default: current working directory] 

"Ifile ehbreviation (VADSself only) 

(library search) This is zin option passed to the ld(l) 
lirtker, telling it to search the specified library file. 

(No space between the -1 2 ind the file ^d>breviation.) 

-H unit name 

(main) Produce an executable program by linking the named 
unit as the main program. unit_name must already be 
compiled. It must be either a narameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VADSself) or a.vox 
(VZ\DScross) unless overridden with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking sourcefile. The main unit of the program is 
assumed to be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be named a.out (VADSself) or a.vox 
(VADScross) unless overridden with the -o option. 

-N (no code sharing) Conpile all generic instantiations 
without sharing code for their bodies. This optipn 
overrides the SHARE_BCX)Y INFO directive and the SHARE_CODE 
or SHARE_BODY pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries 
This option is valid only if the -M option has also been invoked 
(Sun SPARC »> Paragon only) 


-O[0-9] 

(optimize) Invoke the code optimizer. An optional digit 
Uhere is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 




CajPirATIGN SYSTEM OPTIONS 


-O full optimization 
-OO no optimization 

-01 copi' propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions conroon to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performzmce gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For example, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -oO option. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option. executable_file is the name of the executaible 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(reconcile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of amy that are out 
of date, VADS library is the library in which the 
reconpilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's G'k’AS_TABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without reconciling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

B-5 






CC81PIIATI0N SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with. a.trace only) 

-V (verbose) Print conpiler version number, date and time of 
compilation, name of file coitpiled, command input line, 
total compilation time and error suiiinary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning di'ignostics. 

source_file name of the source file to ite con^siled. 

Description 

The ada concnemd executes the Ada compiler auid compiles the named Ada 
source file. The file must reside in a VRDS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
che host linker in VOX format. The VOX format is discussed in 
Appei'idix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
conpilation cind the order of the files to be passed to the linker can 
be significant. 

Several VADS coitpilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin oh a system 
will execute the correct conpiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. ^ 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second conpilation will 
overwrite the first. For example, the compilation of 
/ust/directory2/f 00 .a -L /usr/vads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L AisrAads/test in the 
V?iDS library /usr/vads/test. 






COMPILATION SYSTEM OPTIONS 


NOTE; It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TEMPDIR 
is not set, /trap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 

The linker options cf this Ada iuplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


B-7 






COMPILATION SYSTEM OPTIONS 


a.Id Comnand Reference a.Id 

a.Id - build am executable program from previously conpiled units 
Syntax 

a.Id [options] unitjname [linketjoptions] 

Arguments 

linker_options 

All arguriients after unit_naxte are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id conttand. These are: 


-DAl.O 

-DAl-l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as em intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (tinve) Displays how long each phase of the prelinking process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the eladjoration dependencies'used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases wherte linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E Uiiit_nane 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present when many object 




COMPIIATICN SYSTEM OPTIONS 


files are being linked. 

-L library_nam8 

(library) Collect information for linking in library name instead 
of the current directory. However, place the execut^le in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC -> Paragon only) 

-0 executablefile 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress lirtking, 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_name 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit name a uiain 
program and calls the ld(l) linker to link togeche'r all Ada and 
other lemguage objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada conpilsr to chorh dependency iniormation. a’.Id produces 
an exception mapping table amd a unit elaboration teujle and passes 
this ir.xonr.<''.tion to the linker. The elaboration list generated by 
a.Id will not .’.nclude library level packages that do not need 
eladxDration. Similarly, packages that contain no code that ca.i raise 
an exceptitn will nc longer have ex'-^eption tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VAJDS libraries on the search list. Besides infonracion 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object laodules 
compiled tron other languages or /'\da object modules not named 
in context clauses in the Ada source. Any number of WITHn 



CCWPILATION SYSTEM OPTIONS 


directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the follovdng form. 

WITHl:LINK:obj ect_file; 

WITH2:LINK:archive_file; 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computet Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the directory tor ten?x3iaty files by- 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /trap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a,vox (cross) default output file 

.nets Ada DIANA net files directory 

•objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker'. 


B-10 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Staundard, and to certain allowed 
restrictions on representation clauses. The ioplenrntation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix ace to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY INTEGER is range -128 .. 127; 
type SKORf_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+30R .. 1.79769313486231E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type DURATION is delta 0.0001 reunge -214748.3648 .. 214748.3647; 


end STANDARD; 




C-1 








APPE3TOIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINE_ONLY Pragma 

The iNLli'iE_CA'}LY pragiTia, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERFOR will be raised at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bexiies tor which no actual Ada 
body can be provided, for exaiiple the MACHINE_CODE package. 

1.4. SHARE_CODE Pragma * 

The SHARECODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument . This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
ai>y subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instajatiations of that generic. When the first argu- 


C-2 








APPENDIX F OF THE Ada STANDARD 


ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation witlr code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHAREJBODY is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. It is 
included for compateRjility with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe- 
cutaible image. An attempt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning 2 u:id PROGRAM_ERROR raised at run time. 

1.6. EXTERMAL RA.ME Pragma 

The EXTERNAL NAME pragma takes tlie name of a subprogram or 
variable delined in Ada and allows the user to specify a 
different external name that nay be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or' 
subprogram defined in another language emid allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name witn an 
external reference to the second, link_argument. The pragma 
is allcjwed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 





APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
con^iiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.9. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vrtiether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Implementation of Predefined Pragtaas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELA20PATE 

This pragma is implemented as described in Appendix B of the 
Ada BK. 

2.3. INLINE 

This pragma is in^lemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The iraple- 


C-4 







APPENDIX F OF THE Ada STANDARD 


mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENTRAtTr 

This pragma takes one argument which can be the name of 
either a library subprogram or a stibprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. it indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

vs pragma will cause the compiler to choose a non-aligned 
iresentation for conposite types. It will not causes 
ects to be packed at the bit level. 

2.-1. PAGE 

This nragma is inplemented as described in Appendix B of the 
Ada . 

2. ■. PASSIVE 

f 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 



C-5 








APPENDIX F OF THE Ada STANDARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at corpile time eind will 
raise TASKING_ERR0R at runtime, 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM, 


2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.15. STOPAGEJUNIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM oackage inust be reconciled. 

2.16. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK camnot be 
supressed. 

2.17. SySTEM_NAME 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3, Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of ,^the 
machine code associated with the corresponding body or 
statement. For an entry for vdiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPES^AND defined in the 
package MACHINE_C0DE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 


C-6 







APPENDIX F OF THE Ada STANDARD 


not supported.) 


3.2, T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; 
package SYSTEM is 


pragma suppress (ALL__CHECKS); 
pragma suppress(EXCEPTIC»4_TABLES); 
pragma not_elabotated; 


type NAME is ( sun4_cross_new_ppc601 ); 


SYSTEM_NAKE : consteuit NAME sun4_cross_new_ppc601; 

STORAGE_UNIT : constant 8; 

MEMORY SIZE ; constant 16 777 216; 


— Sy...tem-Dependent Named Numbers 

MIN_INT ; constant 

MAX_INT ; constant 

MAX_DIGITS ; constant 

MAX_MANTISSA : constant 31; 
FINE_DELTA : consteuit 

TICK : constauit 


-2 147 483 648; 
2 T47 ^47; 

IS; - - 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGE31 range 0 .. 99; 


MAX_REC_SIZE ; integer 1024; 

type ADDRESS is private; ^ 

function ">" (A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<" (A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<-"(A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function "+" (A; ADDRESS; I: INTEGER) return ADDRESS; 

function (A; ADDRESS; I: INTEGER) return ADDRESS; 

function (I: UNSIO^ TYPES.UNSIGNED INTEGER) return ADDRESS; 


C-7 





APPENDIX F OF THE Ada STANDARD 


function «EMORY_ADDBESS 

(I: UNSIGNED_TYPES.UNSIGNED_1NTEGER) return ADDRESS renames 

NO_ADDR ; constant ADDRESS; 

type TASK_1D is private; 

NO_TASK_ID : constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID : constant PASSIVE_TASK ID; 

subtype SIG_STATUS T is INTEGER; 

SIG_STATUS_SIZE: constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type BYTE_ORDER__T is ( 

LITTLE_ENDIAN, 

BIG_END1AN 

); 

BYTEjORDER: constant BYTE__ORDER_T :* BIG_ENDIAN; 
type LONG_ADDRESS is private; 

NO_Larc_ADDR : constant LONG_ADDRESS; 

fujictiuii "-i-” (A; La«3 ADDRESS; I: IinEGER) return L0MG_ADDPFSS; 
function (A; LCNGJVDDRESS; I: INTEGER) return LONG_ADDRESS; 

function MAKE_LCWG_ADDRESS (A; ADDRESS) return LONG_ADDRESS; 

function LOCALIZE(A; LCING_ADDRESS ; BYTE_SIZE ; INTEGER) return ADDRESS; 

function STATI':»J_OF(A; LONG_ADDRESS) return INTEGER; 

— internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype nAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVDCATION_BY_ADDRESS : constant BOOLEAN' TRUE; 
SUPPORTS_PREELABORATIW : Constant BOOLEAN TRUE; 

hAKE_ACCESS_SUPPORTED ; constant BOOLEAN ;» TRUE; 

— Arguments to the CIFO pragma INTERRUPT_TASK. 
type INTERRUPTjrASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETURN_ADDBESS return ADDRESS; 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 









APPEM)IX F OF THE Arfa STANDARD 


NO_ADDR : consteuit ADDRESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN( ) ; 
pragma BUILT_IN; 
pragma BUILT_IN; 
pragma BUILT_IN(); 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNEDjnrPES.UNSIGNED_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type PASSIVE_TASK_ID is new UNSIGNED_TyPES.UNSl(34ED_INTEGER; 
KK:_PASSIVE_TASK_ID : constant PASSIVEjrASK_ID 0; 

type PROGRAM_ID is new UNSIC24ED_TyPES.UNSIC3aED_INTEGER; 
NO_PROGRAH_ID ; constant PROGRAM_ID := 0; 

type LC»IG_ADDRESS is 
RECORD 

Station : UNSIC2^_TYPES.UNSlQreD_INTEGER; 
addr ; ADDRESS; 

END RECORD; 

NO LCMG ADDR ; constant LONG ADDRESS :• (0, 0); 


pragma BUILT_IN(MAKE_IX»iG ADDRESS); 
pragma BUILT_IN(LOCALIZE )T 
pragma BUlLT_IN{STATION_OF); 

pragma BUILT_IN(RETURN_ADDRESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record conponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 


C-9 






APPES^IX F OF THE Ada SXANIIAFD 


clause must be given to specify the packing of the com- 
pone.ts. A size clause applied to a record type will cause 
packing of cotnponents only vAien the conponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variadsles. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the varizdale. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task sust be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see tlie last sentence of Ada RM 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative euid an accept, 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). - 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. ^ 

interrupts are not queued. 

The address clause for an interupt entry does not specify 
the priority of the interrupt. It sinply specifies the 
interrupt vector numlaer. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5-5. Representation Attributes 


C-10 







APPENDIX F OF THE Ada STANDARD 


The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_C0DE provides 
an assembly language interface ..or the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration cype of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand) ); 

vhere n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. Ihe format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enuraeiration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_C0DE' or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as em argument in any of these functions. 

Iiiline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 


C-11 










APPENDIX F OF THE Ada STANDARD 


There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX_R£C_S12E as 
the record size (expressed in STOPAGEJUNITS) when the size 
of ELEKENT_TYPE exceeds that value. For exaiiple for uncon¬ 
strained arrays such as string vhere ELEMENT_TYPE'SI2E is 
very large, MAX_REC_SI2E is used instead. MAX_RECORD_SI2E 
is defined in SYSTEM euid caui be chauiged by a program before 
instantiating DIRECT_IC to provide an upper limit on the 
record size. In any case che maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_SRROR 
if MAX_REC_SI2E exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) when the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string vhere ELEMENT_T'fPE'Sl2E 
is very large, MAX REC_S1ZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_I0 to provide an upper 
limit on the record size. SEQUENTIAL_I0 imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

Thj implementation supports a naximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJJNITS. The maximum size of a statically 


C-12 





APFFl'DIX F OF THE Ada STANDARD 


sized record type is 4,000,000 x STOFAGS UNITS. A record 
type cr array type declaration that exceeds these limits 
will generate a warning message. 

11.3, Default Stack Size for Tasks 

In the absence of an explicit STORAGE SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size sta'-k of 10,240 STORAGEJJNIT.S. 'Ihis is the value 
returned by T'STOrtAGE SiZE for a task type T. 

11.4, Default Collection Size 

In tlie absence ot am explicit STORAGE SIZE length attribute 
rhe default collection size for an access type is 100 times 
the size of the designated type. Th.is is the value returned 
by T'STOPAGE_SIZE for an access type T. 

11.5, Limit on Declared Objects 

Th^'re is an absolute limit of 6,000,000 x .S'I05v'GE_LJNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the ccreiler will tenni.iate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 








