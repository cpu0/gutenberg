AD-A221 047 


UNCLASSIFIED 


st cu»: T t CfssHic^’io*. o f this rage (whenpet* entered) _ 

REPORT DOCUMENTATION PAGE 

1. REPORT MlWeER |2 . 60V1 ACCESSION HO. |3 ItClflUrs CATALOG MlWbER 


m 


«. title (waivbvtit) i. tyre of *tPo«T i n»io: ccveaeo 

Ada Compiler Validation Summary Report sTeieSoft, 26 Nov. 1989 to 26 Nov. 1990 

TeleGen2 Ada Devlepment System, Sun-4 (SPARC) (Host) to . ., ,,„ - —- 

MVME133a-20 (Target), 89112611.10222 *• «" f °««lM&*&R&. REPORT Mu*BER 


7. avthoru; 

IABG4, 

Ottobrunn, Federal Republic of Germany. 


I. REAfORMlMG ORGANIZATION AND ADORESS 

IABG, 

Ottobrunn, Federal Republic of Germany. 


11. CONTRO.lIMG OffICE MAM£ and ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 


14. HOMTORIMG AGENCt KANE t AODRESSpf different from Controlling Office) 

IABG, 

Ottobrunn, Federal Republic of Germany. 


16. 0ISTR1BJTI0N STATEMENT (of tnu Ktpoa) 


COAT AAC T OA GRANT MKMcE R«J 


10. PROGRAM ELEMENT. PROJECT. TASa 
AREA t MORa UMT MUMBERS 


12. REPORT DATE 


15. SECuRITt Class (oftM report) 

UNCLASSIFIED 


15*. DJC^ASSjfJCATIOA 'OONSSRA5ING 

N/A 


Approved for public release; distribution unlimited. 


17. 01STRIB.U0K STATEMENT (of tht tbritci rntr-eb :n B'sch iC If d fff'ent from Rtpon) 


UNCLASSIFIED 


DTIC 

fELECTE 



16 . tETMORDS (Contmuf on reverie l‘dt if neteuery end identify by fe/o<* number) 

Ada Programming language, Ada Compiler Validation Summary Repcrt, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. ABSTRACT (Continue on reverie iidt ifneceuery end identify by bloci number) 

TeleSoft, TeleGen2 Ada Development System, Ottobrunn West Germany, Sun Microsystem 
Sun-4/260 Workstation (SPARC Prodessor)(Host) to Motorola MVME133A-20 (Target), ACVC 

1 . 10 . 


1473 EDIT ION 0' 1 MOV 65 IS OBSOLETE 
73 S/M 0102-17*614-1601 

90 04 PA 084’ 


UNCLASSIFIED _ 

SECURITY ClASSlf 1CAT10M Of THIS RAGE (*vn*n0«T« entered) 

























AVF Control Number: 


-IABG-054 


.-.da COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: #89112611.10222 
TeleSoft 


TeleGen2 Ada Development System for 
Sun-4 i SPARC; :< MVMEl?3a-20 


Completion of On-site Testing: 
26 November 1989 


Prepared By: 
I.ABG ,:bH, Abt. SET 
Einsteinsrra«se 10 
D-3012 Ottobrnnn 
Vest Germany 


Prepared For: 

Ada Joint Program Office 
United States Deparr~-nt of r-ef--nse 
Washington r»C ~0Sol-sos- 





Ada Compiler Validation Summary Report: 

Compiler Name: TeleGen2 Ada Development System 
Version 1.4 

Certificate Number: #89112611.10222 

Host: Sun Microsystema Sun-4/260 Workstation (SPARC Processor) 

under Sun UNIX Version 4.2, Release 4.0 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 

Testing Completed 26 November 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



IABG mbH, Abt. SZT 
Dr. S. Heilbrunner 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 




Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria, VA 22311 



Ada Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 












TABLE OF CONTENTS 


INTRODUCTION 


PURPOSE OF THIS VALIDATION S™MARV »E?os 
v~~ op THIS VALIDATION SNT'A.RV a-PORT 

REFERENCES.. ... 

DEFINITION OF TERNS 

AC’-'C "EST CLASSES. 


MH.APTER 2 roNFIOURATION INFORMATION . 

2.1 CON?J.OUR.ATION vp^'r,._ri .... 

2.2 IMPLEMENTATION CHARACTERISTICS 


TEST INFORMATION 


TESi r.^ouuTS 


SUMMARY OF TEST RESULTS RV CHAPTER.16 

WITHDRAWN TESTS . 16 

INAPPLICABLE TESTS . 16 

TEST, PROCESSING.. AND EVALUATION MODIFICATIONS . .10 
ADDITIONAL TESTING INFORMATION . 20 

3.7.1 Pra^alidation.20 

3.7.2 Test Method.20 

3.7.3 Test Site.21 


; ENDIa A DECLARATION op CONFORMANCE 


APPENDIX 3 APPENDIX E OF "HE Ada STANDARD 


APPENDIX C TEST PARAMETERS 


■FPENDIX D WITHDRAWN TEST' 


AR2"Nn r X F 


oOMPILF? AND LINKER. O-riCN: 



























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report (VSRF describes "he -xtent to which a 
specific Ada compiler conforms to the Ada Standard, ANST/MIL-3TD-1815A. 
This report explains all technical t^rms used within > and thoroughly 
reports the results of tasting this compiler using the Ada Compiler 
Validation Capability . (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation—Impendent features 
must conform to the requirements of t-he Ada Standard. "he Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. , 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood chat some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies — for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from rhe characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of "-sting this compiler are 
given in this report, j 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardised tests, the ACVC, as inputs to an Ada •'cmpiler and 
evaluating the results. The purpose of validating is "n ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These rests ue designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents "he results of the lidat ion testing performed on an 
Ada compiler. Testing was carried our for the following purposes: 









by t-brr 


T,i r 1 r l e !i f 1 f v .‘<n v ’ in'J'R‘7'? .’opcrrirf^ c i| nnn r T en 

compiler that r 'o no* - ’mfnp to the .VI \ 7 ! -Midard 

To attempt to identity any language constructs not ~unported by 
the compiler but reqt.u>4 by the Via standard 

7~> determine that the implementation-d-pendent b-nevi^r is allowed 
by the Ida Standard 


Testing of this compiler was conducted by - h ••> according ' o 

procedures established by the Ada Joint Program Office and administered by 
the Ada "alidation Organization 'AVO). 

1.2 USE OF THIS VALIDATION SUM!'ARY REPORT 

Consistent with the national laws of the originating country. ‘■he AVO '■vay 
make full and free public disclosure of this report, in the United Stares, 
this is provided in accordance with the "Freedom of Information Act" 
i*5 U.3.C. 3552) . The results of this '-alidation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconform!ti~s 
to the Ada Standard other than those presented. Copies of this report =>re 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D—139 'Fern Street) 

Washington DC 20301-1051 

or frooi 

IASG mbH, Abt. SZT 
Einsteinstr. 20 
D-3012 °ttobrunn 
West Germany 

Questions regarding this report or the validation test results <=houlu be 
directed to the AVF listed above or to: 

Ada validation organization 
Institute for Defens- Analyses 
1301 North Beauregard Street 
Alexandria VA 22311 









1.3 vefEPFMCES 


1. Refer ones Manual for the Ada Programming Language, 
nIJSI/"!IL-STD-1315A, February 19 3 3 and ISO 8652-1937. 

2. id a Compiler Validation Procedures and "uidelmes. id a Joint 
Program Office, 1 January 1937. 

3. ida Compiler Validation Capability Implementors' Guide, ScfTech, 
Inc., December 1936. 

4. Ada Compiler Validation Capability i.iser'= Guide, Oece^ber 1'So. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs '"hat rests the conformity of an Ada oomnil-r ro the 
Ada programming language. 

An Ada Commentary contains all information relevant to “he 
point addressed by a comment on the Ada Standard. "h-rse 
comments are given a unique identification number having r he 
form Al-ddddd. 

Ada Standard ANSI/HIL-STD-1315A, February 1983 and ISO 3652-1937. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The «v? is reoronsible in- 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for th- purpose of 
maintaining a uniform process for validation of Ada 
compilers. The A.vq provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. T n “he oon'eyt of this 

report, a compiler is any language processor, including 
oross-cornpilers, translators, and interpreters. 

Fail —d “est An AC VC lest for ••»hich rhe compiler generates a result “has 

demonstrates nonconformity to the Ada Standard. 

"he computer on vhv-h the ••■osnnil-r resides. 


Ada 

C o r n ro. c n tci r y 


Host 










Tnapplicable 
■-sr 


An ACAT test that uses features of the language that a 
compiler is not required to support or may legitimately 
support in a wav other than the one expected hy the test. 


-Vs..-; r-sr 


An AC’T test for ,r hich 
res u 1 1 . 


compiler generates the expected 


Target 


The computer which executes the code generated, hy 
compiler. 


Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features ~o the Ada 
Standard. Tn the context of this i_ enort, the "anti is used to 
designate a single test, whi-*’-* may comprise one or more 
files. 


Withdrawn 

test 


An A.cvc test found to be incorrect ana not used to check 
conformity to the Ada standard. A test .av be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or errop'-onQ use of t-'ne 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACvr. The ACT 
contains both legal and illegal Ada programs structured into six test 
classes: A, 3, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce ■-omniia^ion errors. 
Class L tests are expected to produce errors because of the wav in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to ^heck 
semantics. For example, a Class A. t-st checks tnat reserved a-»rds of 
another language (other than those already reseT’-ad in the Ada ’snguage} 
are not treated as reserved words by an Ada compiler. A. class A fact is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class 3 rests check that a compiler detects illegal language usage. 
class B tests are not executable. Each test in this class is co^pil—1 and 
the resulting compilation listing is examined to verify that every ~ynr=y 
or semantic error in the test is defected. A Class 3 test is passed if 
every illegal construct that it contains is detected by “he -compiler. 








■'I’s'; r ‘•-s r s ■-h<-■:k Hie r»n time 'vst-w to ->is 11 re that logs! Ada nroan^s 
•'an he 'orrecrlv cors^Hed and executed. Each 'lass 0 test is self-checking 
and produces a FA.SSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Cl-tss D ~ -sts check the comoilation and -xecution capacities of compiler. 
Since there are no capacity requirements placed on a c^pi'-T 'ey the Ada 
Standard for some parameters — for exa,-...le, tt>e number of identifiers 
permitted in a compilation or the number of units in a library— 3 compiler 
ay refuse to commie a Class n test and still be a con terming -ompiier. 
Therefore, if a Class D test fails to oompil- because capacity of the 

eompii-r is exceeded, the test is classified as inapplicable. If - class 7 
test compiles successfully, it is self-checking and produces a P’SSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully =na ’heck 
implementation-dependent options and resolutions of ambiguities in the Ad 3 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by class E tests during compilation. 
Therefore, a Class E test is passed by a ocmpii-r if it is compiled 
successfully and executes to produce a PASSED message, or if ;t is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs invoicing 
multiple, separately compiled units are detected and uoc allowed to 
execute. Cl a ss L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message be for* 3 any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the t-rst. 

two library units, the package REPORT and the procedure CKEC”_FTLE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report -ARCED, FAILED.. 3 r 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_EILE is used fn 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECE_"!LE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is nor attempted. 

The t-xt of each tc-st in the A.CVC follows conventions that »re in r -*nded 
ensure that the rests are reasonably portable without modification, "v 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters. "se snail mu-eric -alues, and 
tests. However, some tests contai” values that require the t-«r to h,. 










•'llsrO' 1 '.!7r'i according "o 
illegal fil ^ p a r* *-» . 
provided in Appendix C. 


V f ’. n i'r , 'VnT‘ 1 

list - f 


i e n - s p ~ n ’ f i ? ’' 1111 r ? - - f o r 

"he "?.lu-s used for *hi? 


-■■•’■'pi-. in 
•alidation is 


A compiler "’usr correctly process -ach of r he rests n the sui te and 
demonstrate conformity to "he Ada 'tanda»-u by -ltv,-r etoi.M i,- pass 


criteria giver, for the test or b v showing that -v - test is inaorlicable to 
"he irplerenration. The applicability or , r-«r "o »« irol--entation is 


considered each lime ’■he implementation is '’lidat-d. A "e= r do.t is 
inapplicable for one validation 13 not eo -csari!y •n = ppl i>--bi- for a 
subsequent validation, Any test "hat vas d »r*»*~ivied "o -ontain an illegal 


language construct or 


ftC”C a nd . 
w 11 h d r a w ii 


therefore.. 
at the ti;">( 


an erroneous language 
is not e sed in tes» 
of this validation a 1 ',. 


r iIn r av;n f 70 a t] , e 

• popi 1 -f r p ~ r — «5 r c 

,i uOpi.no i v ?*• 





■ n o. 6 


."nr 1 :f 


COMFIGUP AT I Or* 


COMFIGUPAXIOM ~SS7ED 

nd 1 date •'•T’pilation system. rot this "alidat-.on w-,« re«r-d 
owing configuration: 


Compiler: TeleGenI Ada Develoo sent ?v«te» 

" - r ; i o n 1.4 

AC”C Version: 1.10 

Certificate Humber: #o91126Il.10222 

Host Computer: 

Machine: Sun Microsystems Sun-4/260 Vnr'-:staf 

(SPARC Processor) 

Operating System: Sun : ’UI X Version 4.2, Pcl-.-ase 4.0 

Memory Sice: 16 Mega5yt.es 


Target Cooout®t: 
Machine: 


Operating System: 
Memory Size: 


Motorola MVME1 
bare machine 
1 Meg a By re 


"20 (' 








2 ~”?LE”E"TAT70m CHARACTERI"TTC3 

e of the purposes of validat 1 ’ng •-oonii-r « _s r•-> .:-* , -ro , . r . '-'-hav*.or of 

oo npiler in those areas of the Ada "laniard S^ r p-> --i ' *pi -i>-r ; fsfinns 

differ. 'lass j and E fa«t? «p-r: fa ally -.<■ -.-pi- -nr a t ion 

ff-rences. However, tests in or her •' •• = ?-« -].-•> -i,a. .-i-i- a n 

plementation. The tests demonstrate the foii.M-,-- .g '-ii v-a.-r - - -« ; 

a. Capacities. 


■ ne compile: 
containing 7 2 
test D2?002K.} 


correct iv •'recesses a -onni t ?.r i on 

■enables mi :]>•.• d--’l-rati"~ oar*-. '7-e 


2) The compiler correctly nrrr-<-,-s : 
loop statements nested to 65 I-vels. ' ~- 
'3 tests) .) 


• in i; 


The compiler correctly processes tests containing 
block statements nested to s 5 l-nns '1-^ *--st **$001?.} 


The compiler correctly piocesses t ; sts 
recursive procedures separately eo'noi'-d j s snhn 
17 ie’ ; eis . 'See tests OS 400 5 E. . '1 13 tests'. 


cent a:nr/ 

: -'ie = ted '■' 


Predefined types. 


1) This implementation supports the additional predefin—i 


LO?’G_INTEGER and L0"G_vb0A7 in the package 
tests 33G001T..Z (.7 tests).) 


iRO. 


V r ,^ c; 
( ?ci 


Expression evaluation. 

The order in whi :h expressions are evaluated and *-he time at which 
constraints are checked are not defined by ft- ’ennuag^. '.’HM 
"he AC VC tests do no* specifically attempt to det ?r~? re “he order 
of evaluation cf expressions, test results indicate rh- following: 

1) Some of the default initialization expressions 
for record components are evaluated before any -alu- is 
checked for -lembership in a component's subty™-. ■ < s r e test 
C32117A.) 


Assignments for subtypes are performed with th- 
precision as the base type. (3-e test C3" 7 !23.1 


sai >e 


This implementation uses no extra bits 
and ’ises no extra bits for extra range. 


-y.tr a pi -•'■> u. on 
(See- test C77PC7A. i 











i) "U:'ERIC_"P' , On i s raised for largest integer comparison And 
membership tests and no exception is sen for pre-defined 
integer comparison and membership tests when an integer 
literal operand in a comparison or '■"embership * .st is outside 
the range of the base type. (See *»st C45232A.) 



tUIMEE T C_ER RGR is raised when a li 
fixed-point comparison or •»en > hership te« 
of the base type. 'See test C45252A.5 


era I •' ne r a n d in a 
in outside the range 


•>) Underflow is gradual. 'See — ? f 3 cjsspii. ,z i-.-sts).‘ 


Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the hC"C t-sts do not specifically 
attempt to determine the method of rounding, "he test results 
indicate the following: 

1' the method used for rounding to integer is round to j»en. 
{See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is -cnnd 
to even. (See tests C46012A..Z (26 tests).' 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTF.AINT_EP.ROR for an array hawing a 'LENGTH that exceeds 
STANDARD. INTEGER ’LAST and/or SYSTEM.MAXJEN7. ~or this 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises TDJMERIC_EFR.GR for » 
two dimensional array subtype where the large dimension is the 
second one. ^See test C36003A) 

2) CCNS?RAINT_ERPOR is raised when 'LENGTH is applied to an 

array type with INTEGER'LAST + 2 components. ^See test 

C36202A.) 

3’ ”UMEPIC_EFROR is raised when an array type with 

SYSTEM.MAX TNT + 2 component? is declared. (See test 

C36202B.) 














4) A racked ?~OLE.'” arr’v having a 'b~NGTH exceeding INTEGER'LA^T 
r a i s e = no ->:C" n tion. 'See ra$r C5/103X.) 

5) A packed ■"o-^i: n ensional ROOLEtv array with acre than 

INTEGER’LAST 'o.nponents raises CONSTRAIN7_ERROR when the 

length of a dimension is calculated and -xcends Tim EGER’LAST. 
(Sec ^ear r5?M»v. 5 

6) In assigning one-dimensional array types ; the expression is 

evaluated in •ts -ncirety before CONST?ATNT_y"?OR is 

raised when checking whether "he -xoression’s subrvoe is 

conpatible with the target's subtype. 'See t-st •"5201i: ) 

7) In assigning two-dinensicnai array types.. the -ypression 

is not evaluated in its entirety before CONS"?A!”7_“”RO" is 
raised when checking whether the expression's subtype is 

compatible with the target's subtype. (See rest "5?0i3A.) 

8) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC .ERROR or CONST?AIN7_ERR0R 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no -xcepticn. 'See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CGNS7RAINT_ERR0R is raised 
when checking whether the expression’s subtype is compatible 
with the target's subtype. (See test C52013A.) 


Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
aade as choices are evaluated. (S-e tests C41227A and 
C 4 3 2 0 7 B.} 

2' In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
1 dent leal bounds. 1 Va t-ct ”432123.) 

') CONST?AIN7_ERRCR is raised after all 'hoicks -re 
evaluated when a bound in a non-null range of a non-null 
segregate does not belong r o an index subtype. test 










CONFIGURATION INFORMATION 


h. Pragmas. 

1) The pragma INLINE is supported for procedures and for non¬ 
library functions. (See tests LA3004A..B (2 tests), EA3004C..D 
(2 tests), and CA3G04E..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by IA-40S/11, if 

the body is compiled after a unit that instantiates it, then that 

unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 

be compiled in separate compilations. (See test 

CA1012A.) 

4) Generic non-library package bodies as subunits can 

be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 

7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests CA2009C, 









COT 


5C3204C, and ?OV?050.' 

3) Generic library package specifications and 
be compiled in separate .-ompi let ions. 

30320-0 and BC3205D.) 

3) Generic unit bodies and their subunits can 
compiled in separate compilations . (Gee test gj 'C," I.; .' 


bodies can 
("ee tests 


j. Input and output. 

1) The package SEQUENTI?.L_I0 cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101C, ZE2201!>, and EE2201E.) 

2) The package DIR.ECT_TG cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (Gee tests AE2101H, EE2401P, ana EE2401G.) 

3) Nodes IN_FILE and 0NT_~TLE are supported for 5EQUENTIAL_I0. 
(See tests CE2102D..E, 0E21021T, and"CE2102?.' 

4) Nodes IN_FILE, 0NT_EILZ, and IN0UT_"ILE are supported. for 
DIRECT_I0. (See tests OE2102F, 0521021..J [7 tests) , CS210.2F., 
OE2102T, and CE2102V.) 

5) Nodes IN_FILE and OtJT_FILE are supported for text files. 
(See tests CE3102F and CE3102I..K (3 test?).) 

6) RESET and DELETE operations are supported for 
SEQ*JENTIAL_IO. (S^e tests CE2102G and CE2102".)* 

7 ) RESET and DELETE operations ar._- supported for DIREC7_!0. 
(See tests CE2102K and CE2102Y.) 

3) RESET and DELETE operations are supported tor text 
files. (See tests CE3102F..G (2 tests), CE*3104C, CE3110A, and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

10) Temporary sequential files are given names and not 
deleted when closed. f See test CE2108A.) 

11) Temporary direct files are given names and not deleted when 
closed. (See test CE2103C.) 

12) Temporary text fil^s <re given names and not d-leted 








■'See test CE3112A.) 


when closed. 

More than one internal file can be associated with 
each external file for sequential files when reading 
only. 'See tests CE2107A..S (5 tests), CE2102L. CE2110B, and 
CE21UD.) 

More than one internal file can be associated with 
each external file for direct files when reading only. (See 
tests CE2107F..H (3 tests), CE21107) and CE2!11H.^ 

More than one internal file cap be associated with 
-acn external file for text files when reading only (See 
tests CE3111A..E 15 tests).. CE3114B, and CE3113A.) 



" ;■ l 


OHAPTFR 1 


TEST 


■irnsv; 


’ION 


3.1 TEST RESULTS 

'■-rsion 1.10 of the ACVC co-nrises 371” tests. '•'hen this compile 
tested, 44 tests had been withdrawn because of test errors. The 
determined that 314 tests were inapplicable to this implement 

-.11 inapplicable tests were processed during walidation t-^ting -xcep 
101 executable tests that use floating-point precision -xc 

that supported by the implementation. Modifications to the 

processing, or grading for 13 tests were required to «ucc*s 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate ace® 
conformity to the Ada Standard. 


SUMMARY OF TEST RESULTS BY CLASS 


FESUL7 


TEST r LASS 

grp 


"OTAL 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


127 112? 2012 


0 207 


35 


17 

0 

0 


■ 30 1 ■ in a 351' 


23 45 “359 




‘O 1,1 


r was 
AVF 

•n t. i v ■*>. 
r f nr; 

c n i n fj 

rnt]a , 

cfully 

nr ably- 










~TT 


'.3 SIT' 

PESTTLT 

’'’Pv np 

3 

4 

JLT5 

5 

?Y CH 

6 

AFTER 

e*» ^ m 

1 

CHI 

3 

pTTP 

r» 

1 0 

11 


- O 

A. 

14 

TOTA1 

P 3 ? ? tird 

198 

573 

P 44 

245 

- •y r\ 

1 ' 4, 

79 

s 

v o 1 ./ 

T “5 0 

S ”> -» 

^ r. 

250 

340 

278 

3 0 5 9 

:t/S 

?4 

/ 0 

13 6 


0 

n 

la 

0 

5 

0 

<*» 

79 

4 3 

314 

vdrn 

i 

i 

0 

p; 

0 

•J 

u 

- 

0 

n 

* 

3 5 

4 

44 

TOT A.l 

213 

5 50 

530 

243 

172 

?9 

166 

? "a il 

137 

36 

25 3 

404 

3 25 

3717 


3.4 vtthOSAVN -"ESTS 


The following 

44 tests were 

withdrawn fr 

om ACVC "ersion 1.10 


at the time of 

this validation: 



E2S005C 

A39005G 

B97102E 

C97116A BC3009B 

C02A62D 

CD2.-.6 3 A 

CD2A638 

CP2A63C 

CP2n63r< CD2A66 A 

C52A66S 

CD2A66C 

CD2A66D 

CP2A.73A 

C02.A73B CD2A770 

CD2A73D 

CD2A76A 

CD2A768 

CD2A76C 

CD2A75D CD2A31C- 

CDS A3 3*7 

CD2A34H 

CD2A84M 

CD5011O 

CD2B150 C97205C 

CD2B11B 

CD5007B 

ED7004B 

ED7005C 

ED7005D ED7006C 

e r> 7 0 0 8 p 

CB7105A 

CD7203B 

C07204B 

CD7205D CE2107T 

CE3111C 

CE3301A 

CE3411B 




See Appendix D 

for the reason that each 

of these tests was withdrawn. 

3.5 IMAFP1ICA 

B1E TESTS 




Some tests do 

not apply to 

all compilers 

: because they make use 

of f.-at 

that a compile 

r is not required by the A 

:da Standard to support. 

Others 


depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 314 tests were inapplicable for 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring -ore digits than 
SYSTEM. MAX_DTGITS : * * 

C 2 41 13 1 . .Y f 14 tests) 0157011. .y (14 test-") 

r35inflL..Y (14 tests) '357071..y f 14 tests) 













C35703L. 

y 

(1A 

tests' 

■'** 3 ^ ?• 0 ?. L . 

7 

' \ 7 

r r crc ;) 

C45241L. 

# V 

•14 

tests/ 

C45?2i:«. 

# y 

•14 

t -r « t $ ) 

C45421L. 

. Y 

(14 

tests' 

C45521L. 

7 

(15 

rests) 

C45524L. 

- L. 

(15 

tests' 

0 A 8 6 21L . 

7 

(15 

tests' 

C 4 5 6 41L. 

y 

(14 

tests) 

r 46G12L. 

*7 

(1 5 

t -■ s r ?' 


b. C35508I, C33508J. C35508*:, and 735503N are not applicable because 

they include enumeration representation clauses for BOOLEAN f ypes 
in which the representation '-olues are other than (FALSE = > 0, 

TRUE =v 1). Under the terms of A.I-00325, ;_ his implementation is 
not required to support such representation clauses. 

c. C35702A and 3860017 are not applicable because this i r.pler-cntation 
supports no predefined type 3nORT_FLOA7. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type iK0RT_IU7EGER: 

C452313 C45304B C45502B 0 A 8 5 0 3 3 0455OAR 

C45504E 0456113 C45613B C43G1AB 0456"!? 

C45532B 352004E 055B07R 8853033 3Y6001” 

CD7101E 

a. C45531M..? (4 tests) and >7455321!..F <i tests) are rot appl:cable 
because they acquire a value of 3YS7EM.MAX_”ANTIS3A greater than 
32. 

f. C36001F is not applicable because, for this implementation, the 

package 7EXT_I0 is dependent upon package SYSTEN. these tests 

recompile package 3YSTE!', making package 7EX7_I0, and 
hence package REPORT, obsolete. 

g. S86O01X, 0452310.. and CD710IG are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_TNTEGERor SK0R7_TNTEGER. 

h. B86001Y is not applicable because this i-plementation supports no 
predefined fixed-point type other than 0URATI0N. 

i. B36001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SHORT_FLOAT. 

j. GA2009C, 7A2009F, 3C3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 1.2.1 and 
Appendix F of the Ada Standard'. 

k. LA3004B, EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for library 
functions. 






•V j i 


tt t ro!? 'lATion 


1. CD1009C, CD2A41A. .B (? tests), CD2A41 E mnd CT52A42A. .J f 10 rests) 

are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

a. CD2A51I..J >2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

n. CD2A34B..I (3 tests) and CD2A34K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length .’lenses fcr access types. 

o. CD4041A is not applicable because of restrictions n ••ecord 
representation clauses with 32 bit -lignment. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are reacted 

by this compiler. 

q. AE2101H, EE2401D, and EE24C1G use instantiations of package 

DIRECT_T0 with unconstrained array types and -ecord type® with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

r. CE2102D is inapplicable because this implementation supports 

CREATE with IN_FILE mode for SE0UENTIAL_I0. 

s. CE2102E is inapplicable because this implementation supports 

CREATE with CU7_?ILE mode for SEQUENTIAL,_I0. 

t. CE2102F is inapplicable because this implementation supports 

CREATE with INOUT_FILE mode for DIREC7_70. 

u. CE2102I is inapplicable because this implementation supports 

CREATE with IN_FTLE mode for DIREC?_!0. 

v. CE2102J is inapplicable because this implementation supports 

CREATE with 0UT_EILE mode for DIFECT_I0. 

w. CE2102N is inapplicable because this implementation supports OPEN 
with IH_FILE mode for SEQUENTIAL_IO. 

x. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUEN7IAL_I0. 

y. CE2102P is inapplicable because this implementation supports OPE” 
with OUT_ETLE mode for SEQUENTIAL_TO. 

c. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_EILE mode for SEQUENTIAL_IO. 








k”?TTO'T 


ia. "E2102?. is inapplicable VcausT ♦■his imilement 3 r fnn ?imnorts OPEN 
with T">~"T "7LE mode for DIREC7_IQ. 

ab. <"22102S is inapplicable because th’s implementation supports RESET 
with Ii’0UT_"ILE lode for DTREC7_T0. 

ac. "E21027 is inapplicable because this '■ 'plementarion support" OPE” 
■with TURTLE lode for niREC7_T0. 

ad. CE2102 : 1 is inapplicable because this -iple-ientation supports RESET 
with IN_EIT.'E .lode fop “IREC7_T0. 

a.e. CE2102V is inapplicable because this implementation supports OPE!? 
•nth 0U7_FILE node for niREC7_T0. 

af. CE2102V is inapplicable because this implementation supports RESET 
with 0UT_E!LE mode for niRECT_I". 

ag. CE21073..E (4 tests), CE210"L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file “hen on* or "ore files is writing 

for sequential files. The proper exception is raised when 

multiple access is attempted. 

ah. CE2107G..H <2 tests), CE2110D. and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because text file CREATE with IN_E!LE mode 
is supported by this implementation. 

aj. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

ak. CE3102G is inapplicable because text filr- deletion of an external 
file is supported by "his implementation. 

al. CE3102I is inapplicable because text file CREATE with 0<I7_ETLE 
mode is supported by this implementation. 

am. CE3102J is inapplicable because text file OPEN with 7”_F7LE -.ode 
is supported by this implementation. 

an. CE3102K is inapplicable because text file OPE” with 0U7_F7LE "od- 
is supported by this implementation. 

ao. CE31113, CE3111D..E (2 tests). 7E3114B. and CE3113A a>-e not 
applicable because multiple internal files cannot be associated 
with the «ame external file when one or -ore file? is writing for 
text f i 1 — s . The n roper exception is ••ai s<-d when 'iiltiple i.-.v.s;s 






attemoted. 


??OCESSI?TG, AND EVALUATION MODIEIC 


:ons 


It is expected r hat some “rests will require oodif i-aH i~-ns of -ode, 
processing, or -valuation in order to compensate for ’-gif irate 
implementation behavior, modifications are made by the A*’" in cases '-'here 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection: splitting 
a Class B test into subtests so that all errors at- u-ate'-ted; and 
confirming that messages produced hv an executable test demonstrate 
conforming behavior that was not anticipated by the test 'such as raising 
one exception instead of another). 

Modifications were required for 13 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E B71001K 571001Q B71001N BASOO^A BAIOOGB 

3A3007B BA3003A BA3003B BA3013A (6 and 71') 

Tests C34005G, C34GQ5J and C34006D returned the result FAILED because of 
false assumptions that an element in an array or a record type- may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T’SIZE due to the above assumptions (T is the array type). 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Frevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by :he TeleGen2 Ada Development System for a computing -vstem based on 
the same instruction set architecture was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
TeleGen2 System successfully passed all applicable tests, and it 
exhibited the expected behavior on all inapplicable tests, the applicant 
certified that testing results for the computing system of "his validation 
would be identical to the ones submitted for review prior to validation. 


3.7.2 m est Method 

Testing of the Tel-Gen.2 Ada Development System using icvr Version 1.10 
was conducted on-site by » validation i'-am *rom the 4V“. The 







n i ±'.' 1 * 


configuration in which the testing was performed is describe'] by t he 
following designations of hardware and software components: 

Host: Sun Microsystems Sun-4/?K0 Workstation (SPARC Processor) 

under Sun UNIX Version 4 2, Release 4.0 

Target: Motorola HVKE133A-20 (”C6S020) 

bare machine 

Communication network: PS 232 

A cartridge containing the customized test suite was loaded onto a SUN-3 
and transferred ”ia Ethernet to an intermediate computer whose disks were 
accessible ”ia Ethernet for the host computer. Results were collected on 
the host computer and transferred via Ethernet to yet another computer 
for evaluation ana archiving. 

The compiler was tested using command script? provided bv T^leSoft 
and reviewed by the validation team. The tests were compiled using the 
com mand 

ada -0 D <"filename) 
and linked with th* command 

aid -a ^options file) O.ain unit) 

The -L qualifier was added to the compiler call for class D expanded and 
modified tests. See Appendix E for explanation of co^pil-r and linkrc 
switch.es. The ('options file) contained a specification of memory address-? 
for the target computer. 

Tests were compiled, linked, and executed (as appropriate) using one com¬ 
puter. Test output, compilation listings, and job log? were captured on 
cartridge and archived at the A ,J F. The listings examined 'Vi-?i r e by the 
validation team were also archived. 

3.7.3 Test Site 

Testing was conducted at TeleSoft, San Diego, USA, and was c^-pl-ted on 
26 November 1939. 










TeleSoft has 
“he TeieGen2 


DECLARATION 0" •''OMFOR"i”rr 


submitted the following Declaration of Conformance 
Ada Development System. 


concerning 









DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG. Dept. SZT. D-8012 Ottobrunn 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Corfiguration 

TeleGen2 Ada Development System 
1.4 

Sun Microsystems Sun-4/260 Workstation 
(SPARC Processor) 

Sun UNIX Version 4.2. Release 4.0 

Motorola MVME133A-20 (MC68020) 

Bare machine 

Implementor's Declaration 

1, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/M1L-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All -* r tifica.t eS and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner's corporate 
name. 



TELESOFT / I 

t - ./ i 

f Raymond A. Parra, Vice- President and General Counsel 


Base Compiler Name: 
Version: 

Host Architecture ISA: 

OS & VER #: 

Target Architecture ISA: 
OS & VER «: 


Owner’s Declaration 


I. the undersigned, representing TELESOFT. lake bill responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. 1 declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANSI / .MI L-STD-1815A. 


/} 



„_-CAT G 

^ TELESOFT | 

Raymond A. Parra, Vice President and General Counsel 

I 


Dai.: 




The only allowed implementation dependent’ es .-or»*espond to 
implementation-dependent pragmas, to certain oachine-d ?pendent '’inventions 
as mentioned in chapter 13 of the Ada Standard, and to o^rta 1 n allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleC-en2 Ada Development System, as described in 
this Appendix. are provided by TeleSoft. Unless specifically noted 
otherwise, references in this appendix are '■o compiler documentation =nd 
not to this report. Implementation-specific portions of the package 
""AI’DARD, which are not a part of Appendix ?, 


package STANDARD is 


type INTEGER is range -32763 .. 32767* 

type LONG_INTEGER is range -2147433648 .. 2147433647; 

type FLOAT is digits 6 range -1.701412+3$ .. 1.70141E+33r 
type L0NG_?L0AT is digits 15 

range -3.9384656743115SE+ 307 .. 3 . ?3«4666743113E-307; 

type DURATION is delta 2#1.0#E-14 range -36400.0 .. 26400 








CHAPTER 3: LRM ANNOTATIONS 
CHAPTER CONTENTS 


3 LRM ANNOTATIONS . 3-1 

3.1 LRM Chapter 2 - Lexical Elements . 3-1 

3.2 LRM Chapter 3 - Declarations and Types . 3-1 

3.3 LRM Chapter 4 - Names and Expressions . 3-3 

3.4 LRM Chapter 9 - Tasks . 3-3 

3.5 LRM Chapter 10 - Program Stmctnre and Compilation Issues . 3-3 

3.6 LRM Chapter 11 - Exceptions... 3-3 

3.7 LRM Chapter 13 - Implementation-Dependent Features . 3-4 

Table: Summary of LRM Chapter 13 Features . 3-4 

3.7.1 Pragma Pack. 3-5 

3.7.2 (LRM 13.2j Length Clauses. 3-7 

3.7.2.1 (a) Specifying Size: T’Size. 3-7 

3.7.2.2 (b) Specifying Collection Size: T’Storage_Size. 3-8 

3.7.2.3 (c) Specifying Storage for Task Activation: T’Storage_Size. 3-9 

3.7.2.4 (d) Specifying ’Small for Fixed Point Types: T’Small. 3-9 

3.7.3 [LRM 13.3) Enumeration Representation Clauses. 3-10 

3.7.4 (LRM 13.41 Record Representation Clauses. 3-10 

3.7.5 (LRM 13.5j Address Clauses. 3-11 

3.7.6 [LRM 13.61 Change of Representation. 3-12 

3.7.7 (LRM 13.7J The Package System. 3-12 

3.7.8 (LRM 13.7.2) Representation Attributes. 3-12 

3.7.9 (LRM 13.7.3) Representation Attributes of Real Types. 3-12 

3.7.10 )LRM 13.8) Machine Code Insertions. 3-12 

3.7.11 [LRM 13.9) Interface to Other Languages. 3-13 

3.7.12 (LRM 13.10| Unchecked Programming. 3-13 

3.8 LRM Appendix F for TeleGen2 . 3-13 

Table: LRM Appendix F Summary . 3-14 

3.8.1 Implementation-Defined Pragmas. 3-15 

3.8.1.1 Pragma Comment. 3-15 

3.8.1.2 Pragma Linkname. 3-16 

3.8.1.3 Pragma Images. 3-16 

3.8.1.4 Pragma No_Suppress. 3-17 

3.8.2 Implementation-Dependent Attributes. 3-17 

3.3.2.1 'Address and 'Offset. 3-17 

3.3.2.2 Extended Attributes for Scalar Types. 3-17 

3.8.2.2.1 Integer Attributes . 3-19 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 












































CHAPTER 3: LRM ANNOTATIONS 


CHAPTER CONTENTS 

3.8.2.2.2 Enumeration Type Attributes . 3-22 

3.8.2.2.3 Floating Point Attributes . 3-25 

3.8.2.2.4 Fixed Point Attributes. 3-27 

3.8.3 Package System... 3-31 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 







LRM ANNOTATIONS 


3. LRM ANNOTATIONS 

TeleGen2 compiles the full ANSI Ada language as defined by the Reference Manual for the 
Ada Programming Language (LRM) (ANSI/MIL-STD-1815A). This chapter describes the 
portions of the language that are designated by the LRM as implementation dependent for the 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully implemented by the current release of 
TeleGen2 or that require clarification are included. The features that are optional or that are 
implementation dependent, on the other hand, are described in detail. Particularly relevant are 
the sections annotating LRM Chapter 13 (Representation Clauses and Implementation- 
Dependent Features) and Appendix F (Implementation-Dependent Characteristics). 


3.1. LRM Chapter 2 - Lexical Elements 

[LRM 2.1] Character Set. The host and target character set is the ASCII character set. 

[LRM 2.2] Lexical Elements,Separators, and Delimiters. The maximum number of 
characters on an Ada source line is 200. 

[LRM 2.8] Pragmas. TeleGen2 implements all language-defined pragmas except pragma 
Optimize. If pragma Optimize is included in Ada source, the pragma will have no effect. 
Optimization is implemented by using pragma Inline and the optimizer. Pragma Inline is not 
supported for library-level subprograms. Pragma Priority is not supported for main programs. 

Limited support is available for pragmas Memory_Size, Storage_Unit, and System_Name: 
that is, these pragmas are allowed if the argument is the same as the value specified in the 
System package. 

Pragmas Page and List are supported in the context of source/error listings; refer to the 
Compiler/Linker chapter of the TeleGen2 User Guide for more information. 


3.2. LRM Chapter 3 - Declarations and Types 

[LRM 3.2.1] Object Declarations. TeleGen2 does not produce warning messages about the 
use of uninitialized variables. The compiler will not reject a program merely because it contains 
such variables. 

[LRM 3.5.1] Enumeration Types. The maximum number of elements in an enumeration 
type is 32767. This maximum can be realized only if generation of the image table for the type 
has been deferred, and there are no references in the program that would cause the image table to 
be generated. Deferral of image table generation for an enumeration type, P, is requested by the 
statement: 

pragma Images (P, Deferred); 

Refer to “Implementation-Defined Pragmas,” in Section 3.8.1. for more information on pragma 
Images. 


31JTJL39 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-1 








TeleGen2 Reference Information for UNEC/68K Hosts 


[LRM 3.5.4] Integer Types. There are two predefined integer types: Integer and 
Long_Integer. The attributes of these types are shown in Table 3-1. Note that using explicit, 
integer type definitions instead of predefined integer types should result in more portable code. 

Table 3-1. Attributes of Predefined Types Integer and Long In teger 


Attribute 

Type 

Integer 

Long-Integer 

’First 

-32768 

-2147483648 

’Last 

32767 

2147483647 

’Size 

16 

32 

’Width 

6 

11 


[LRM 3.5.8] Operations of Floating Point Types. There are two predefined floating point 
types: Float and Long-Float. The attributes of types Float and Long—Float are shown in Table 
3-2. This floating point facility is based on the IEEE standard for 32-bit and 64-bit numbers. 
Note that using explicit real type definitions should lead to more portable code. 

The type Short-Float is not implemented. 

Table 3-2. Attributes of Predefined Types Float and Long—Float 


Attribute 

Type 

Float 

Long-Float 

’Machine—Overflows 

TRUE 

TRUE 

’Machine—Rounds 

TRUE 

TRUE 

’Machine-Radix 

2 

2 

’Machine-Mantissa 

24 

53 

’Machine—Emax 

127 

1023 

’Machine—Emin 

-125 

-1021 

’Mantissa 

21 

51 

’Digits 

6 

15 

’Size 

32 

64 

’Emax 

84 1 

204 

’Safe_Emax 

125 

1021 

’Epsilon 

9.53674E-07 

8.88178E-16 

’Safe—Large 

4.25253E+37 

2.24711641857789E+307 

’Safe-Small 

1.17549E-38 

2.22507385850721E—308 

’Large 

1.93428E-r25 

2.57110087081438E+61 

’Small 

2.58494E-26 

1.99469227433161E—62 


3-2 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 















LRM ANNOTATIONS 


3.1. LRM Chapter 4 - Names and Expressions 

[LRM 4.10] Universal Expressions. There is no limit on the accuracy of real literal 
expressions. Real literal expressions are computed using an arbitrary-precision arithmetic 
package. 


3.2. LRM Chapter 9 - Tasks 

[LRM 9.6] Delay Statements, Duration, and Time. This implementation uses 32-bit 
fixed point numbers to represent the type Duration. The attributes of the type Duration are 
shown in Table 3-3 


Table 3-3. Attributes of Type Duration 


Attribute 

Value 

'Delta 

'First 

'Last 

0.000061035156250 

-86400.0 

86400.0 


[LRM 9.8] Priorities. Sixty-four levels of priority are available to associate with tasks 
through pragma Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..63; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority’First + System.Priority’Last) / 2 

[LRM 9.11] Shared Variables. The restrictions on shared variables are only those specified 
in the LRM. 


3.3. LRM Chapter 10 - Program Structure and Compilation Issues 

[LRM 10.1] Compilation Units - Library Units. All main programs are assumed to be 
parameterless procedures or functions that return an integer result type. 


3.4. LRM Chapter 11 - Exceptions 

[LRM 11.lJ Exception Declarations. Numeric_Error is raised for integer or floating point 
overflow and for divide-by-zero situations. Floating point underflow yields a result of zero without 
raising an exception. 

Program-Error and Storage-Error are raised by those situations specified in LRM Section 
11.1. Exception handling is also discussed in the Programming Guide chapter. 


04JAN90 


REF-1347N-Vl,2a(U/68) © 1990 TeJeSoft 


3-3 








TeleGen2 Reference Information for UNDC/08K Hosts 


3.7. LRM Chapter 13 - Implementation-Dependent Features 

As shown in Table 3-4, the current release of TeleGen2 supports most LRM Chapter 13 
facilities. The sections below the table document those LRM Chapter 13 facilities that are either 
not implemented or that require explanation. Facilities implemented exactly as described in the 
LRM are not mentioned. 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 - 
13.5). Pragma Pack is supported, except for dynam¬ 
ically sized components. For details on the 
TeleGen2 implementation of pragma Pack, see Sec¬ 
tion 3.7.1. 

13.2 Length Clauses 

Supported: 

’Size 

’Storage_Size for collections 
’Storage_Size for task activation 
’Small for fixed-point types 

See Section 3.7.2 for more information. 

13.3 Enumeration Rep. Clauses 

Supported, except for type Boolean or types derived 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 3.7.4 for a full discussion 
of the TeleGen2 implementation. 

13.5 Address Clauses 

Supported for: objects (including task objects). 

Not supported for: packages, subprograms, or task 
units. 

See Section 3.7.5 for more information. 

13.5.1 Interrupts 

For interrupt entries, the address of a TeleGen2- 
defined interrupt descriptor can be given. See “In¬ 
terrupt Handling” in the *Programming Guide 
chapter for more information. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

- Continued on the next page —— 


3-4 


REF-1347N-Vl.l(U/08) (c) 1989 TeleSoft 


31JUL89 







LRM ANNOTATIONS 


Table 3-4. Summary of LRJM Chapter 13 Features for TeleGen2 (Contd) 


- Continued from the previous page - 

13.T Package System Conforms closely to LRM model. Refer to Section 

3.7.7 for details on the Te!eGen2 implementation. 

13.7.1 System-Dependent Named Refer to the specification of package System (Sec- 

Numbers tion 3.7.7). 

13.7.2 Representation Attributes Implemented as described in LRM except that: 

’Address for packages is unsupported. 

’Address of a constant yields a null address. 

13.7.3 Representation Attributes of See Table 3-2. 

Real Types 

13.3 Machine Code Insertions Fully supported. The TeleGen2 implementation 

defines an attribute, ’Offset, that, along with the 
language-defined attribute ’Offset, allows addresses 
of objects and offsets of data items to be specified in 
stack frames. Refer to “Using Machine Code Inser¬ 
tions” in the Programming Guide chapter for a full 
description on the implementation and use of 
machine code insertions. 

13.9 Interface to Other Pragma Interface is supported for Assembly, C, 

Languages UNIX, and Fortran. Refer to “Interfacing to Other 

Languages” in the Programming Guide chapter for 
a description of the implementation and use of prag¬ 
ma Interface. 

13.10 Unchecked Programming Supported except as noted below (LRM 13.10.2). 

13.10.1 Unchecked Storage Deallo- Supported, 
cation 

13.10.2 Unchecked Type Conver- Supported except for unconstrained record or array 

sions types. 


3.7.1. Pragma Pack. This section discusses how pragma Pack is used in the TeleGen2 
implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiler allocates 16 bits for a single Boolean, 8 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array; the one below that illustrates a packed Boolean array: 


31JUL89 


RJEF-1347N-Vl.l(U/68) (c) 1989 TeleSoft 


3-5 

























TeleG«n2 Reference Information for UNEC/88K Hosts 


-Unpacked Boolean array:- 

Unpacked_Bool_Arr_Type is array (Natural range 0..1) of Boolean 
U_B_Arr: Unpacked_Bool_Arr_Type := (True,False); 

MSB LSB 

7 0 

Element 0 
Element 1 


0 

I 

0 

11 


Packed Boolean array: 


Packed_Bool_Arr_Type is array (Natural range 0..6) of Boolean; 
pragma Pack (Packed Bool_Arr_Type); 

P_B_Arr: Packed_BooX_Arr_Type := (P_B Arr(O) => True, 
P_B_Arr(5) => True, others => FalseY; 


Bit: 


Element: 


MSB 

15 


LSB 

0 


E 

E 

E 

E 

0 

1 | 0 

□ 

□ 

□ 

L_ 

E 

□ 

E 

E 

□ 


0 1 2 3 4 5 6 


(unused) 


b. With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

1. The total size of the record is a multiple of 8 bits. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure, Rep_Proc, that defines three records of different 
lengths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits; that is, it is maximally packed. 


5-6 


REF-1347N-Vl.l(U/88) © 1989 TeieSoft 


31JUL89 



LR-M ANNOTATIONS 


procedure Rep_Proc is 

type A1 is array (Natural range 0 .. 8) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 .. 3) of Boolean; 
pragma Pack (A2); 

type A3 is array (Natural range 0 .. 2) of Boolean; 
pragma Pack (A3); 

type A_Rec is 
record 

One : Al; 

Two : A2; 

Three : A3; 
end record; 
pragma Pack (A_Rec); 

Rec : A_Rec; 

begin 

Rec.One := ( 0 => True, 

3 => False, 

6 => False, 

Rec.Two (3) := True; 

Rec.Three (1) := True; 
end RepL_Proc; 

3.7.2. [LRM 13.2] Length Clauses. A length clause specifies an amount of storage 
associated with a type. The sections below describe how length clauses axe supported in this 
implementation of TeleGen2 and how to use length clauses effectively within the context of 
TeleGen2. 

3.7.2.I. (a) Specifying Siae: T’Sixe. The prefix T denotes an object. The size specification 
must allow for enough storage space to accommodate every allowable value of these objects. The 
constraints on the object and on its subcomponents (if any) must be static. For an unconstrained 
array type, the index subtypes must also be static. 

For this implementation, MIn_Size is the smallest number of bits logically required to hold 
any value in the range; no sign bit is allocated for non-negative ranges. Biased representations 
are not supported; e.g., a range of 100 .. 101 requires 7 bits, not 1. Warning; in the current 
release, using a size clause for a discrete type may cause inefficient code to be generated. For 
example, given... 

type Nibble is range 0 .. 15; 
for Nibble’Size use 4; 

...each object of type Nibble will occupy only 4 bits, and relatively expensive bit-field instructions 
will be used for operations on Nibbles. (A single declared object of type Nibble will be aligned on 
a storage-unit boundary, however.) 

For floating-point and access types, a size clause has no effect on the representation. (Task 
types are implemented as access types). 


1 => False, 
4 => True, 

7 => False, 


2 => False, 

5 => False, 

8 => True ); 


31JUL89 


HTVP.isaTTM.Vi i ill Mai ioao 






TeleGen2 Reference Information for UNXX/68K Hosts 


For composite (array or record) types, a size clause acts like an implicit pragma Pack, 
followed by a check that the resulting size is no greater than the requested size. Note that the 
composite type will be packed whether or not it is necessary to meet the requested size. The size 
clause for a record must be a multiple of storage units. 

3.7.2.2. (b) Specifying Collection Size: T’Storage_Size. A collection is the entire set of 
objects created by evaluation of allocators for an access type. 

The prefix T denotes an access type. Given an access type Acc_Type, a length clause for a 
collection allocated using Acc_Type objects might look like this: 
for Acc_Type’Storage Size use 64; 

In Te!eGen2, the above length clause allocates from the heap 64 bytes of contiguous memory for 
objects created by Acc_Type allocators. Every time a new object is created, it is put into the 
remaining free part of the memory allocated for the collection, provided there is adequate space 
remaining in the collection. Otherwise, a storage error is raised. 

Keeping the objects in a contiguous span of memory allows system storage reclamation 
routines to deallocate and manage the space when it is no longer needed. Pragma Controlled can 
prevent the deallocation of a specified collection of objects. Objects can be explicitly deallocated 
by calling the Unchecked_Deallocation procedure instantiated for the object and access types. 

Header Record 

In this configuration of TeleGen2, information needed to manage storage blocks in a collection is 
stored in a collection header that requires 20 bytes of memory, adjacent to the collection, in 
addition to the value specified in the length clause. 

Minimum Size 

When an object is deallocated from a collection, a record containing link and size information for 
the space is put in the deallocated space as a placeholder. This enables the space to be located 
and reallocated. The space allocated for an object must therefore have the minimum size needed 
for the placeholder record. For this TeleGen2 configuration, this minimum size is the sum of the 
sizes of an access type and a integer type, or 6 bytes. 

Dynamically Sized Object* 

When a dynamically-sized object is allocated, a record requiring 2 bytes accompanies it to keep 
track of the size of the object for when it is put on the free list. The record is used to set the size 
field in the placeholder record since compaction may modify the value. 

Size Expressions 

Instead of specifying am integer in the length clause, you can use an expression to specify storage 
for a given number of objects. For example, suppose an access type Dict_Ref references a record 
Symbol_Rec containing five fields: 


8 


REF-I347N-Vl.l(U/68) © 1989 TeleSoft 


31JXJL89 






LBLM ANNOTATIONS 


type Tag is String(l..8); 
type SyaboLJiec; 

type Dicd-Ref is access SyaboLJiec; 

type SymboLJlec is 
record 


Left 

Dict_Ref; 

Right 

Dict_Ref; 

Parent 

Dict_Ref; 

Value 

Integer; 

Key 

Tag; 


end record; 


To allocate 10 Symbol_Rec objects, you could use an expression such as: 

for Dict_Re£’Storage_Size use ((SyaboLJiec’Size * 10)+20); 

where 20 is the extra space needed for the header record. (Symbol_Rec is obviously larger than 
the minimum size required, which is equivalent to one access type and one integer.) 

In another implementation, Symbol_Rec might be a variant record that uses a variable 
length for the string Key: 

type SymboL_R.ec(Last : Natural :=Q) is 
record 

Left : DictJBLef; 

Right : Dict_Ref; 

Parent : Dict_Ref; 

Value : Integer; 

Key : String(l..Last); 
end record; 

In this case, Symbol_Rec objects would be dynamically sized depending on the length of the 
string for Key. Using a length clause for Dict_Ref as above would then be illegal since 
Symbol_Rec’Size cannot be consistently determined. A length clause for Symbol_Rec objects, as 
described in (a) above, would be illegal since not all components of Symbol_JEtec are static. As 
defined, a Symbol_R.ec object could conceivably have a Key string with Integer’Last number of 
characters. 

3.7.2.3. (c) Specifying Storage for Task Activation: T’Storage_Sixe. The prefix T 
denotes a task type. A length clause for a task type specifies the number of storage units to be 
reserved for an activation of a task of the type. The TeieGen2 default stack size is 8192 bytes. 

3.7.2.4. (d) Specifying ’Small for Fixed Point Types: T'Small. Small is the absolute 
precision (a positive real number) while the prefix T denotes the first named subtype of a fixed 
point type. Elaboration of a real type defines a set of model numbers. T’Small is generally a 
power of 2, and model numbers are generally multiples of this number so that they can be 
represented exactly on a binary machine. All other real values are defined in terms of model 
numbers having explicit error bounds. 

Example: 

type Fixed is delta 0.25 range -10.0 .. 10.0; 


3-9 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 









TeleGen2 Reference Information for UNIX/68K Hosts 


Here... 


Fixed’Smal] = 0.25 — .4 power of 2 

S.O = 12 * 0.25 — A model number but not a power of 2 

The value of the expression of the length clause must not be greater than the delta of the 
first named subtype. The effect of the length clause is to use this value of ’Small for the 
representation of values of the fixed point base type. The length clause thereby also affects the 
amount of storage for objects that have this type. 

If a length clause is not used, for model numbers defined by a fixed point constraint, the 
value of Small is defined as the largest power of two that is not greater than the delta of the fixed 
accuracy definition. 

If a length clause is used, the model numbers are multiples of the specified value for Small. 
For this configuration of TeleGen2, the specified value must be (mathematically) equal to either 
an exact integer or the reciprocal of an exact integer. 

Examples: 

1.0, 2.0, 3.0, 4.0, . . . are legal 
0.5, 1.0/3-0, 0.25, 1.0/3600.0 are legal 
2.5, 2.0/3.0, 0.3 are illegal 

3.7.3. [1RM 13.3] Enumeration Representation Clauses. Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the 'Pos, ’Pred, or ’Succ attributes for values of the 
type. 

3.7.4. [LRA1 13.4] Record Representation Clauses. Since record components are subject 
to rearrangement by the compiler, you must use representation clauses to guarantee a particular 
layout. Such clauses are subject to the following constraints: 

• Each component of the record must be specified with a component clause. 

• The alignment of the record is restricted to mods 1 and 2, byte and word aligned. 

• Bits are ordered right to left within a byte. 

• Components may cross word boundaries. 

Here is a simple example showing how the layout of a record can be specified by using 
representation clauses: 

package Repspec-Exaaple is 
Bits : constant := 1; 

Word : constant := 4; 

type Five is range 0 .. 16#1F#; 

type Seventeen is range 0 .. 16#1FFFF#; 

type Nine is range 0 .. 511; 

type Record_Layout_Type is record 
Eleaentl : Seventeen; 


3-10 


REF-1347N-V l.l{U/68) © 1989 TeleSoft 


31JUL89 








LRM ANNOTATIONS 


Element2 : Five; 

Element3 : Boolean; 

Element-* : Nine; 
end record; 

for Record Layout—Type use record at mod 2; 
Eleaentl at 0*Word range 0 . . 16; 
Eleaent2 at 0»Word range 17 .. 21; 
Eleaent3 at 0*Word range 22 .. 22; 
Eleaent4 at 0*Word range 23 .. 31; 
end record; 

Record—Layout : Record—Layaut-Type; 
end Repspec—Example; 


3.7.5. [LRM 13.5] Address Clauses. The Ada compiler supports address clauses for 
objects, subprograms, and entries. Address clauses for packages and task units are not 
supported. 

Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address clauses is affected by the fact that the 
:■ stem.Address type is private. For the MC680x0 target, literal addresses are represented as 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For example, in the examples in this document the 
following declaration is often assumed: 

function Addr is new Unchecked_Conversion (Long Integer,System.Address); 

Thb function Is invoked when an address literal needs to be converted to an Address type. 
Naturally, user programs may implement a different convention. Below i 3 a sample program that 
uses address clauses and this convention. Package System must be explicitly withed when using 
address clauses. 

with System; 

with Unchecked—Conversion; 

procedure Hardware-Access is 

function Addr is new Unchecked-Conversion (Long_[nteger, System.Address); 

Hardware—Register : integer; 

for Hardware.Register use at Addr (16#FF0000#); 

begin 

end Hardware-Access; 

When using an address clause for an object with an initial value, the address clause should 
immediately follow the object declaration: 

Obj: Some-Type := <init_expr>; 

for Obj use at <addr_expr>; 

This sequence allows the compiler to perform an optimization wherein it generates code to 
evaluate the <addr^expr> as part of the elaboration of the dec: ration of the object. The 
expression <init-expr> will then be evaluated and assigned directly to the object, which is stored 
at <aadr_expr>. If another declaration had intervened between the object declaration ard the 
address clause, the compiler would have had to create a temporary object to hoid 'he 
initialization vaiue before copying it into the object wfien the address clause is elaborated. If the 


ill 


S1JUL89 


REF-1347N-V l.l (U/08) © 1989 TeieSoft 





TeleGen2 Reference Information for UNDC/08K Hosts 


object were a large composite type, the need to use a temporary could result in considerable 
overhead in both time and space. To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

As mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (8 bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by MC68QxO byte instructions. The following example indicates 
how these facts allow access to hardware byte registers: 

with System, 

with Unchecked—Conversion; 
procedure Wain is 

function Addr is new Unchecked-Conversion (Long-Integer, System.Address); 
type Byte is range -128..127; 

ETW—Regs : array (0..1) of Byte; 
for HW_Regs use at Addr (16#FFF310#); 

Status_Byte : constant integer := 0; 

Next Block-Request: constant integer := 1; 

Bequest-Byte : Byte := 119; 

Status : Byte; 

begin 

Status := HW_£egs(Statu3L_Byte); 

HW-Begs(Nextt_Blodc Request) := Request-Byte; 
end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16*FFF31Q# and the next block request byte is at location 16^FFF3ll#. 

Function Addr takes a long integer as its argument. Long_Integer’Last is 16#7FFFFFFF#, 
but there are certainly addresses greater than Long—Integer’Last. Those addresses with the high 
bit set, 3uch as FFFA0000, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set, the address should be computed as the negation of the 2’s complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr(-16#00060000#). 

3.7.6. [LRM 13.6] Change of Representation. TeleGen2 supports changes of 
representation, except for types with record representation clauses. 

3.7.7. (LRM 13.7] The Package System. The specification of TeleGen2’s implementation 
of package System is presented in the LRM Appendix F section at the end of this chapter. 

3.7.8. [LRM 13.7.2] Representation Attributes. The compiler does not support ’Address 
for packages. 

3.7.9. [LRM 13.7.3] Representation Attributes of Real Types. The representation 
attributes for the predefined floating point types were presented in Table 3-2. 

3.7.10. [LRM 13.8] Machine Code Insertions. Machine code insertions, an optional 
feature of the Ada language, are fully supported in TeleGen2. Refer to the “Using Machine Code 
insertions'' section in the Programming Guide chapter for information regarding their 


3-12 


REF-1347N-V l.l(U/08) © 1989 TeieSoft 


31JUL89 



LRM ANNOTATIONS 


implementation and for examples on their use. 

3.7.11. (LRM 13.9] Interface to Other Languages. In pragma Interface is supported for 
Assembly, C, UNIX, and Fortran. Refer to “Interfacing to Other Languages” in the 
Programming Guide chapter for for information on the use of pragma Interface. TeleGen2 does 
not currently allow pragma Interface for library units. 

3.7.12. [LRM 13.10] Unchecked Programming. Restrictions on unchecked programming 
as it applies to Te!eGen2 are listed in the following paragraphs. 

[LRM 13.10.2j Unchecked Type Conversions. Unchecked conversions are allowed 
becween types (or subtypes) Tl and T2 as long as they are not unconstrained record or array 
types. 


3.8. LRM Appendix F for TeleGen2 

The Ada language definition allows for certain target dependencies. These dependencies 
must be described in the reference manual for each implementation, in an “Appendix F” that 
addresses each point listed in LRM Appendix F. Table 3-5 constitutes Appendix F for this 
implementation. Points that require further clarification are addressed in sections refererenced in 
the table. 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-13 







TeleGen2 Reference Information for UNEC/68K Hosts 


Table 3-5. LRM Appendix F for TeleGen2 


lr" = " -- 

(1) Implementation-Dependent Pragmas 

(a) Implementation-defined pragmas: Comment, 
Linkname, Images, and No—Suppress (Section 
3.8.1). 

(b) Predefined pragmas with implementation- 
dependent characteristics: 

* Interface (assembly, UNIX, C, and Fortran- 
see “Interfacing to Other Languages.” 

Not supported for library units. 

* List and Page (in context of source/error 
compiler listings.) (See the User Guide.) 

* Pack. See Section 3.7.1. 

* Inline. Not supported for library-level 
subprograms. 

* Priority. Not supported for main programs. 

Other supported predefined pragmas: 

Controlled Shared Suppress 

Elaborate 

Predefined pragmas partly supported (see Sec¬ 
tion 3.1): 

Memory-Size Storage-Unit System-Name 

Not supported: Optimize 

(2) Implementation-Dependent Attri¬ 

butes 

’Offset. Used for machine code insertions. 

The predefined attribute ’Address is not supported 
for packages. See “Using Machine Code Insertions” 
earlier in this chapter for information on ’Offset and 
’Address. 

’Extended-Image 
'Extended—Value 
’Extended—Width 
’Extended—Aft 
’Extended-Digits 

Refer to Section 3.8.2 for information on the 
implementation-defined extended attributes listed 
above. 

(3) Package System 

See Section 3.7.7. 

(4) Restrictions on Representation 

Clauses 

Summarized in Table 3-4. 

....... Continued on the next page —- 


3-14 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JTJL89 





















LRM ANNOTATIONS 


Table 3-5. LRM Appendix F for TeleGen2 (Contd) 


——- Continued from the previous page -- 

(5) Implementation-Generated Names 

None 

(6) Address Clause Expression Interpre¬ 
tation 

An expression that appears in an object address 
clause is interpreted as the address of the first 
storage unit of the object. 

(7) Restrictions on Unchecked Conver¬ 
sions 

Summarized in Table 3-4. 

(8) Implementation-Dependent Charac¬ 
teristics of the I/O Packages. 

1. In Text_IO, the type Count is defined as follows: 
type Count is range 0..System.Max Text_IO_Count; 

- or O..Max_Int-l OR O..2_147_483_048 

2. In Text_IO, the type Field is defined as follows: 

subtype Field is integer range 

System.Max_T ext_IO .Field; 

3. In Text_IO, the Form parameter of procedures 
Create and Open is not supported. (If you sup¬ 
ply a Form parameter with either procedure, it 
is ignored.) 

4. SequentiaI_JO and DirectJO cannot be instan¬ 
tiated for unconstrained array types or discrim¬ 
inated types without defaults. 

5. The standard library contains preinstantiated 
versions of Text_IO.Integer_iO for types Integer 
and Long_Integer and of Text_IO.Float_IO for 
types Float and Long_Float. We suggest that 
you use the following to eliminate multiple in¬ 
stantiations of these packages: 

IntegerJText _IO 

Long_Integer_Text_IO 

FIoat_Text JO 

Long_Float_Text_IO 


3.8.1. Implementation-Defined Pragmas. There are four implementation-defined pragmas 
in TeleGen2: pragmas Comment, Linkname, Images, and No_Suppress. 

3.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <atring_literal> ); 





















TeleGen2 Reference Information for UNTX/68K Hosts 


where “<string_literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
Any number of comments may be entered into the object code by use of pragma Comment. 

3.8.1.2. Pragma Linkname. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by sr Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 
exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly, <snbprogram_name> ); 
pragma Linkname ( <snbprogram_name>, <string_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Dummy-Access( Dummy—Arg : System.Address ); 
pragma Interface (assembly, Dummy—Access ); 
pragma Linkname (Dummy—Access, '—access*); 

3.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the image table. The length of the index table is therefore the sum 
of the lengths of the literals of the enumeration type; the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Images(<enumeration —type>, Deferred); 

— or — 

pragma Idagea(<enumeration_type>, Immediate); 

The default, Deferred, saves space in the literal pool by not creating image and index tables for 
an enumeration type unless the ’Image, ’Value, or ’Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. In this case, 
using 


pragma Ima ges (< enumera tion typo, Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 

For a very large enumeration type, the length of the image table will exceed Integer’Last 
(the maximum length of a string). In this case, using either 


3-16 


REF-1347N-Vl.l(U/08) © 1989 TeleSoft 


31JUL89 


LRM ANNOTATIONS 


pragma Images(<emimeration_type.>, Immediate); 

or the ’Image, ’Value, or ’Width attribute for the type will result in an error message from the 
compiler. 

3.8.1.4. Pragma No_Suppress. No_Suppress is a TeleGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. No_Suppress is particularly useful when you have a section of code that 
relies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 
the compilation unit for performance reasons. 

Pragma No_Suppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_Suppress (<identifier> (, [ON =>] <name>j); 

where <identifier> is the type of check you want to suppress (e.g., access_xheck; refer to 
LRM11.7) 

<name> is the name of the object, type/subtype, task unit, generic unit, or subprogram 
within which the check is to be suppressed; <name> is optional. 

If neither Suppress nor No_Suppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the -i(nhibit 
motion and specifying with that option the type of checks you want to suppress. For more 
information on -i(nhibit, refer to your TeleGen2 Overview and Command Summary document. 

If either Suppress or Nojfiuppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
NoJSuppress are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or No_Suppress in the source takes precedence over an —i(nhibit 
option provided during compilation. 

3.8.2. Implementation-Dependent Attributes. 

3.8.2.1. ’Address and ’Offset. These were discussed within the context of using machine 
code insertions, in the Programming Guide chapter. 

3.8.2.2. Extended Attributes for Scalar Types. The extended attributes extend the 
concept behind the Text_IO attributes 'Image, 'Value, and ’Width to give the user more power 
and flexibility when displaying values of scalars. Extended attributes differ in two respects from 
their predefined counterparts: 

1. Extended attributes take more parameters and allow control of the format of the output 
string. 

2. Extended attributes are defined for all scalar types, including fixed and floating point 
types. 


31JUL89 


REF-I347N-Vl.l(U/08) © 1989 TeleSoft 


3-17 





TeleGen2 Reference Information for UNDC/68K Hosts 


Extended versions of predefined attributes are provided for integer, enumeration, floating point, 
and fixed point types: 


Integer: 
Enumeration: 
Floating Point: 
Fixed Point: 


’Extended-Image, 
’Extended-Image, 
’Extended-Image, 
’Extended—Image, 
’Extended—Aft 


’Extended—Value, 
’Extended—V alue, 
’Extended—Value, 
’Extended—V alue, 


'Extended-Width 
’Extended—Width 
’Extended-Digits 
’Extended_F ore, 


The extended attributes can be used without the overhead of including Text—IO in the 
linked program. Below is an example that illustrates the difference between instantiating 
Text_IO.Float_IO to convert a float vaiue to a string and using Float’Extended-Image: 


with Text—IQ; 

function Canvert_To_String ( FI : Float ) return String is 
Teap-Str : String ( 1 .. 6 Float'Digits ); 
package Fit TO is new Text— 10 .Float— 10 (Float); 
begin 

Flt_I0.Put ( Temp_Str, FI ); 
return Teap_Str; 

end Convert-Ta-String; 

function Convert-To-String-Ncx-Text-IO( FI : Float ) return String is 
begin 

return Float’Extended—Iaage (FI ); 
end Convert_To_String—Na_Text—IQ; 


with Text_IQ, Convert—Ta_String, Convert-To—String-No—Text—10; 
procedure Show-Different—Conversions is 

Value : Float := 10.03376; 

begin 

Text—TQ.Put-Line ( "Using the Convert—To—String, the value of the variable 
is : * k Convert-Ta-String ( Value ) ); 

Text—10.Put-Line ( "Using the Convert—To—String_Na_Text_IO, the value 
is : * fe Convert—To_String—No—Text—10 ( Value ) ); 

end Show—Different-Conversions; 


3-18 


REP-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 


LRM ANNOTATIONS 


3.8.2.2.1. Integer Attributes 
’Extended-Image 


Usage: 

X’Extended _Image(Itein,Widtli,Ba8e,Based,Space_IF-Positive) 

Returns the image associated with Item as defined in Text—10.Integer—10. The Text—IO 
definition states that the value of Item is an integer literal with no underlines, no exponent, no 
leading zeros (but a single zero for the zero value), and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters, leading spaces are first 
output to make up the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype: this attribute is a function that may have 
more than one parameter. The parameter Item must be an integer value. The resulting 3tring is 
without underlines, leading zeros, or trailing spaces. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in base notation or not. If no preference is specified, the de¬ 
fault (false) is assumed. Optional 

Space—If_Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the following subtype were declared: 

subtype X is Integer Range -10..18; 

Then the following would be true: 


X’Extended -Image(5) = *5* 

X’Extended-Image(5,0) = *5" 

X’Extended.-Image(5,2) = * 5* 

X’Extended-Image(5,0,2) = *101* 

X’Extended-Image(5,4,2) = * 101* 

X’Extended-Image(5,0,2,True) = *2#101#* 

X’Extended—Image(5,0,10,False) = *5* 

X’Extended_Image(5,0,10,False,True) = * 5* 

X’Extended-Image(-1,0,10,False,False) = "-1" 

X’Extended—Image(-1,0,10,False,True) = ’-l* 

X’Extended-Image(-1,1,10,False ,True) = *.1" 


31JUL89 


R£F-1347N-Vl.l(U/68) © 198 9 TeleSoft 


S_1Q 





TeleGen2 Reference Information for UNDC/68K Hosts 


X’Extended-Image(-1,0,2,True,True) = "-2#1# * 

X’Extended-Image(-1,10,2,True,True) = " -2#1#* 


’Extended-Value 


Usage : 

X’Extended_Valne(Item) 

Returns the value associated with Item as defined in Text_IO.!nteger_IO. The TextJlO definition 
states that given a string, it reads an integer value from the beginning of the string. The value 
returned corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint_Error is raised. 

Parameter Description: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type X. Required 


Examples: 

Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended-Value("5*) = 5 
X’Extended-Value(■ S«) =5 
X’ExtendedLValue( , 2#101#*) = S 
X’Extended-Value(»-l«) = -1 
X’Extended-Value(* -1*) * -1 


’Extended-Width 
Usage: 

X’Extended-Width (Baae,£*8ed,Space_If—Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype: this attribute is a function that may have multiple 
parameters. This attribute yields the maximum image length over all values of the type or 
subtype X. 


20 


REF-1247N-Vl.l(U/08) © 1989 TeleSoft 


31JUL89 









LRM ANNOTATIONS 


Parameter DescnDtions: 


Base 

The base for which the width will be calculated. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether the subtype is stated in based no¬ 
tation. If no value for based is specified, the default (false) 
is assumed. Optional 

Space—If_Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


ExamDlea: 


Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 


Then the following would be true: 

X’Extended-Width 
X ’Extended-Width(10) 
X’ExtendedLWidth(2) 
X’ExtendedLWidth(10,True) 
X’ExtendedLWidth(2,True) 

X ’ Extended-Width(10,False,True) 
X ’ Extended-Width(10,True,False) 
X ’ Extended-Width(10,True,True) 

X’Extended-Width(2,True,True) 

X’Extended-Width(2,False,True) 


= 3 - n -icr 

= 3 - "-io" 

* S - "ioooct 
= 7 ~ ”.104104" 

= 8 - ” 2 * 100004 ” 
= 3 ~” its” 

= 7 - ”. 104104 " 

= 7 - n 10*164" 
=9 - n 24100004 ” 

= 6 - ” iflflOO" 


31JUL89 


REF-1347N-V1.KU/681 (ci 1989 TeleSoft 







TeleGen2 Reference Information for UNEC/68K. Hosts 


3.8.2.2.2. Enumeration Type Attributes 
’Extended-Image 


X’Extended..Image(Item, Width,Uppercase) 

Returns the image associated with Item as defined in Text_IO.Enumeration_IO. The Text_IO 
definition states that given an enumeration literal, it will output the value of the enumeration 
literal (either an identifier or a character literal). The character case parameter is ignored for 
character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more that one parameter. The parameter Item must be an enumeration value. The image of an 
enumeration value is the corresponding identifier, which may have character case and return 
string width specified. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. If the Width specified is larger than the image of 
Item, the return string is padded with trailing spaces. If the 
Width specified is smaller than the image of Item, the de¬ 
fault is assumed and the image of the enumeration value is 
output completely. Optional 

Uppercase 

An indication of whether the returned string is in uppercase 
characters. In the case of an enumeration type where the 
enumeration literals are character literals. Uppercase is ig¬ 
nored and the case specified by the type definition is taken. 

If no preference is specified, the default (true) is assumed. 
Optional 


3-22 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 








LRM ANNOTATIONS 


Examples: 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Y is (’a’, ’B\ ’c’, ’D’); 

Then the following would be true: 

X*Extended-Jmage(red) 

X'Extended-.Inage(red, 4) 

X’Extended_Iaage(red,2) 

X’Extended-Image(red, 0,false) 

X’Extended-Image(red, 10,false) 

Y’Extended.,. Image (’a’) 

Y ’ Extended- Image (’ B ’) 

Y’Extended-Image(’ a ’, 6) 

Y’Extended-Image(’a’,0,true) 

’Extended—Value 
Usage: 

X’Extended—Value {Item) 

Returns the image associated with Item as defined in Text_IO.Enumeration_IO. The Text-IO 
definition states that it reads an enumeration value from the beginning of the given string and 
returns the value of the enumeration literal that corresponds to the sequence input. (LRM 
14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is reused. 


= "RED" 

= ‘RED ■ 
= 'RED" 
= 'red' 

= 'red 
_ • 1 _ ) s 

_ ». 3 >* 
= * ’a’ 

_ »> a >» 


31JTJL39 


REF-1347N-V1.KU/681 Cc) 1989 TeleSaft 


a 


ai 





TeleGen2 Reference Information for UNDC/68K Hosts 


Parameter DescriDtions: 


A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of X. Required 


Examples: 

Suppose the following type were declared: 

type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended—ValueCred") = red 

X’Extended_Value(" green") = green 

X’Extended-Value(" Purple") = purple 

X’ExtendecL.Value^* GreEn ") = green 


’Extended_Width 



X’Extended-Width 


Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. This attribute 
yields the maximum image length over all values of the enumeration type or subtype X. 


Parameter Descriptions: 


There are no parameters to this function. This function returns the width of the largest (width) 
enumeration iiteral in the enumeration type specified by X. 


Examples: 


Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Z is (XI, X12, X123, X1234); 

Then the following would be true: 

X’ExtendecLWidth =6 -- " purple " 

Z’Extended_Width =5 ~"X12S4” 


3-24 


RZF-1347N-Vl.l(U/68) (c) 1989 TeleSoft 


31JUL89 











LRM ANNOTATIONS 


3.8.2.2.3. Floating Point Attributes 
’Extended-Image 


X’Extended_Image(Item Fore T Aft r Exp,Base.Based) 

Returns the image associated with Item as denned in Text_IO.F!oat_IO. The Text_IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.3:13, 14.3.8:15) 

Item must be a Real value. The resulting string is without underlines or trailing spaces. 
Parameter Descriotions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the deita of 
the type or subtype is greater than 3.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-l) is assumed. If based 
notation is specified, the trailing ’#’ is included in Aft. Op¬ 
tional 

Exp 

The minimum number of digits in the exponent. The ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base that the image is to be displayed in. If no base is 
specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


31JUL89 


REF-1347 N-V 1.1 (U/08) © 1989 TeleSoft 


-•MS- 










TeleGen2 Reference Information for UNIX/68K Hosts 


Examples : 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended—Image (5.0) 

X *Extended-Image(5.0,1) 

X’Extended-Image(-5.0,1) 

X 1 Extended-Image(5.0,2,0) 

X’Extended—Image(5.0,2,0,0) 

X’Extended—Image(5.0,2,0,0,2) 

X’Extended-Image(5.0,2,0,0,2,True) 

X’Extended—Image(5.0,2,2,3,2,True) 


* 5.0000E-00" 
*5.OOOOE+OO* 

* - 5. OOOOE+OO" 

* 5.QE+00" 

* 5.0" 

• 101 . 0 * 
" 2 # 101 . 0 #" 
*2#1.1#E+Q2" 


’Extended_V alue 


Usage: 

X’Extended_Valne(Item) 

Returns the value associated with Item as defined in Text_IO.Float_IO. The Text_IO definition 
states that it skips any leading zeros, then reads a plus or minus sign if present then reads the 
string according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that Is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Descriotions: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of the input string. Required. 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended_Value( , 5.0*) = 5.0 

X’Extended—Value(*0.5E1*) = 5.0 

X ’Extended—Value (*2#1.01#E2") = 5.0 


3-28 


REF-1347N-V l.l(U/68) © 1989 TeleSoft 


31JUL89 






LJLM ANNOTATIONS 


’Extended—Digits 
Usage : 

X’Ext ended— D i gi ta (B a se) 

Returns the number of digits using base in the mantissa of model numbers of the subtype X. 
Parameter Descriotions: 


Base 

The base that the subtype is defined in. If no base is 


specified, the default (10) is assumed. Optional 


Examples : 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X’Extended—Digits • = 5 

3.8.2.2.4. Fixed Point Attributes 

’Extended-Image 

Usage: 

XTlxtended—Image (Item J ore, Aft,Exp,-Based) 

Returns the image associated with Item as defined in Text_IO.Fixed_IO. The Text—IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13, 14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more than one parameter. The parameter Item must be a Real vaiue. The resulting string is 
without underlines or trailing spaces. 


31JUL89 


R£F-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-27 



TeleGen2 Reference Information for UNIX/68K Hosts 


Parameter DescriDtions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the ’#’ if based notation is specified. If the integer 
part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-l) is assumed. If 
based notation is specified, the trailing is included in 

Aft. Optional 

Exp 

The minimum number of digits in the exponent; the ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base in which the image is to be displayed. If no base 
'is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 
Then the following would be true: 

X’ExtendedLIoage(5.0) 

X ’ExtendedULoage (5.0,1) 

X’Extended_Image(-5.0,1) 

X ’Extended_L&age (5.0,2,0) 

X ’Extended__Ioage (5.0,2,0,0) 

X’Extended .Image(5.0,2,0,0,2) 

X’Extended Tmage(5.0,2,0,0,2,True) 
X’Extended Tmage(5.0,2,2,3,2,True) 


17.0; 


= * 5.00E+00* 

= *5. OOE+OO* 

= •-5.00E+00* 

= ■ 5.OE+00* 

= • 5.0* 

= • 101 . 0 * 

= * 2 # 101 . 0 #* 

= *2#1.l#E+02* 


28 


REF-1347N-Vl.l(U/88) © 1989 TeleSoft 


31JUL89 







LRM ANNOTATIONS 


’Extended—V altie 
Usage: 

X’Extended—Value(Image) 

Returns the value associated with Item as defined in Text—IO.Fixed—10. The Text_IO definition 
states that it skips any leading zeros, reads a plus or minus sign if present, then reads the string 
according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.3:9, 14.3.3:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Descriotions: 


Image 

Parameter of the predefined type string. The type of the re- 


turned value is the base type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended-Value(■5.0*) 

X’Extended—Value(*0.SE1") 

X’Extended-Value(*2#1.01#E2") 

’Extended—F ore 
Usage: 

XTbctended—ForefBaae .Based) 

Returns the minimum number of characters required for the integer part of the based 
representation of X. 


= 5.0 
= 5.0 
= 5.0 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSofl 


3-29 




TeIeGen2 Reference Information for UNIX/68K Hosts 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples : 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Fore =3 -- *-10* 

X’Extended_Pore(2) = 6 -- * 10001* 

’Extended-Aft 


Usage: 

X’Extended_Ait (Base .Based) 

Returns the minimum number of characters required for the fractional part of the based 
-•presentation of X. 

Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 
Then the following would be true: 

X’ExtendeiLAft =1 - "J" from 0.1 

X’ExtendecL-Ait (2) =4 - "0001” from 2*0.0001# 


5-20 


R£F-1347N-Vl.l{U/68) © 1989 TeleSoft 


31JUL89 




LRM ANNOTATIONS 


3.8.3. Package System. The current specification of package System is provided below, 
package System is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System-Name : constant name := TeleGen2; 

Storage—Unit : constant := 8; 

Memory—Size : constant := (2 •• 31) -1; 

-- System-Dependent Named Numbers: 

— See Table 3-2 far the value* far attribute * of 
— type* Float and Long-Float 

Min_Int : constant := -(2 ** 31); 

Max—Int : constant := (2 »» 31) -1; 

Max—Digits : constant : = 15; 

Max Mantissa : constant := 31; 

Fine-Delta : constant := 1.0 / (2 •* Max—Mantissa); 

Tick : constant :» 10.0E-3; 

-- Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 63; 

Max-Object—Size : constant := Max—Int; 

Max—Record—Count : constant := Max—Int; 

Max,Text—10-Count : constant := Max,-Int -1; 

Max. Text_I0,-Field : constant := 1000; 

•private 

end System; 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeieSoft 


3-31 






1 - » » rt.' E.; 


AFmEI’DI” C 
rvgm PARAMETERS 


Certain tests in the AC' r C make use of implementation-dependent ■•allies, 
as the maximum length of an input line and invalid file names. A test 
makes use of such "allies is identified by the extension .757 'n its 
name. Actual values to be substituted are represented bv names that 
with a dollar sign. A value must be substituted for -ach of these 
before the test is run. The values used for this validation are 
below: 


Marne and Meaning ' J a 1 ite 

SACCJ3IZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

S3TG_ID1 1?? * 

An identifier the size of th- 
maximum input line length which 
is identical to S5IG_!32 except 
for the last character. 


33IG_ID2 199 * ’A' A 

An identifier the sire of the 
maximum input line length which 
is identical to $3TG_ID1 except 
for the last character. 


331G ID3 


An identifier the s 
~aximurn input line 
is identical to $31'* 


^ nf f- h ^ 

noth which 
nz -y.-ept 


IQ < 


such 

that 

file 

begin 

names 

gi"en 







Marne and 'leaning 


value 


vs 


for a character near the middle. 


33IG_ID4 

An identifier the size of the 
•maximum input line length which 
is identical to $BTG_TB3 except 
for a character near the middle. 


00 -* 1 ' 1 ' iv 1 4 ' ‘x 99 


1 07 * ' 


> I - 11/10 0 11 


An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$3IG_REAL_LIT 

A universal real literal of 
T -'alue 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 


19S * ■ rv ,t : "£90.0" 


$3IG_STRING1 

A string literal which when 
catenated with 3IGJ5TRIHG2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BlG_STRII«Gi yields the image of 
BIG ID1. 


v. i 0 Q * “ y 


z 99 * ’ s, • i* 


SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 


130 * ' ' 


$COUNT_LAST 

A universal 

literal 'nose 

TEXT 10. COUIJT' LAST. 


integer 


2 147 433 £46 


$ DEFAULT JIEMJIIZE 

An integer literal whose value 
is SYSTEM.MEMORY SIZE. 


2147-33647 


$DEFAULT_3T0R_U”IT 

An integer literal whose "alue 
is SYSTEM.STORAGE MUTT. 





'lame and Meaning 


$DEFAUL7_SYS_NAUE 7ELEGEN2 

The ,f al\ie of the constant 
5YS7EII. SYS7EU_NA"E. 

3DEL7A_DOC 

A real literal vhc 
SYSTEM. FINE_PEL7A. 

$FIELD_LAST 

A universal 

literal whose 
TEXT_IO.FIELD’LAST. 

3FIXEDJJSME N0_SUCH_T7?E 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME NOJSUCH T V ?E 

The name of a predefined 
floating-point type other than 
FLOAT, SH0R7_FL0AT, or 

LONG_FLOAT. 

$GREATER_THAN J3URATI0N 100_000.0 

A universal real literal that 
lies between DURATION’BASE’LAST 
and DURATION’LAST or any value 
in the range of DURATION. 

$ GR E ATER_TH ANJDUR ATI0N_B AS E_L A S T 131JVT3.0 

A universal real literal that is 
greater rhan DURATION’BASE’LAST. 

SKIGH_?RIORTTY S3 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

SxLLcenL_tA7ERNAL_RrLE_NAMEl BADOKAR* 

An external file name which 
contains invalid characters. 

SILLEGAL_EXTERNAL_FILE_NAUE2 
An external file name 
is *'oo long. 







Name and Meaning 


■ ame 


3INTEGER_FIRST -32763 

A universal integer literal 

whose value is INTEGER 1 FIRST. 

$INTEGER_LAST 32767 

A universal integer literal 

whose value is INTEGER 1 LAST. 

$ INTEGER_LAST_”LUS_1 S276S 

A universal integer literal 

whose value is INTEGER*LAST + 1. 

$ L E S S _T H AIJ _D U R A T10N -IO0J3O0.0 

A universal real literal that 
lies between DURATION’BASE’FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_3ASE_FIRST -131_073.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOW_?RIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$NANTIS3A_D0C 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

3MAXJ3IGITS 15 

Maxirum digits supported for 
floating-point types. 

3MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147433647 

A universal integer literal 
whose value is SYSTEM.MAXJCNT. 

$MAX_INT_?LUS_1 ?_147_433_S43 

A universal integer literal 
whose value is SYSTEM.MAX IN?*'. 




Name and Meaning ''aloe 

$MAX_nEM_IHT_BASED_LITERAL ”2:" * 195 

A universal integer based 
literal whose value is 2 #11# 
with enough leading -eroes in 
the mantissa to be MAX_TN_LEN 
long. 


$UAX_LEN_REAL_SASED_LITERAL "In:" 9 193 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be HAX_IN_LEN long. 

$MAX_STRING_LI7EFAL H 1°3 * 

A string literal of =ize 
MAX_IN_LEN, including the quote 
characters. 


SKINJMTT -2147483643 

A universal integer literal 
whose value is SYSTEM.MIN_TN7. 

$MIN_TASK_3IZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 


$NAME N0_SUCH_7Y? 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT.FLOAT, SHOP7_TNTEGFR, 

LONG FLOAT, or LONG INTEGER. 


$NAME_LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 


$NEG_BASED_INT 16#FFFFFFFE 

A based integer literal whose 
highest order nonzero bit 
falls in r he sign bit 
position cf ("he ••* e presentafion 
for SYSTEM.MAX INT. 








TEST PARAMETERS 


Name and Meaning 
$WEW_HEH_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma HEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 

$NEV_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE.UNIT. 

$NEW_SYS_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

2147481A47 


8 


TELEGEN2 

32 


0.01 









APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string "— TOP OF PAGE. 

63" of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 

follows the pragma, and it is this that must appear at the top 
of the page. 

b. A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGING- 
_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object's srze 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137) . 







WITHER A WIJ TF37F 


j. CD2A63A. . D. CD2A.66A . . ?>,. CD2A73A. .?, CD2A76A..D [18 tests] These 
!"t sts wrongly attempt *■«> ohecV the size of objects of a derived 
t-ype (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute. whose interpretation is 

considered problematic by the VG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84N & M, & CD5011O [5 tests] these tests 

assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that simply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 36 £ 96, 86 & 96, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'STORaGE_STZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. CD2D11B This test gives a SMALL representation clause for a 

derived fixed-point type (at line 30) that defines a set of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303). 

l. ED7004B, ED7005C & D, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 

p. CE2107T This test requires that objects of two similar scalar 
types be distinguished when read from a file--DATA_ERROR is 








uttF^RhU'” 


TESTS 


rxnri’t't'i fii ’i- rs i «r-F by an a t tempt to read one object as of 
the other type. Howe'er, it i« not clear exactly how the Ana 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid. 'line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the sa*e external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_Or_LINE & 
END_OF_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STANDARD_INPUT (lines 103, 
107, 113, 132, & 136). 

s. CE3411B This test requires that a text file's column number be 

set to COUNT'LAST in order to check that LAYOUT_EPROF is raised 
by a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 





APPENDIX E 

COMPILER AND LINKER OPTIONS 

References and page numbers in this appendix are 
consistent with compiler documentation and not with this 
report. 







COMPILATION TOOLS 


2. COMPILATION TOOLS 


This chapter discusses the commands to invoke the TeleGen2 components that are 
associated with the process of compilation. The components are the compiler (invoked bv the 
ada. command: see Section 2.1) and the linker (invoked by the aid command: see Section 2.2). 

Optimization is part of the compilation process as well. In the TeleGen2 documentation 
set. however, optimization is discussed separately from compilation. In this volume, the 
commands associated with optimization (ada -O; aopt) are discussed in the “Other Tools” 
chapter. (One exception is the Option Summary table below, where aopt options are included for 
comparison.) 

Table 2-1 summarizes the options that are used by the compilation tools. Note that several 
options are common to the commands shown. 


04SEP89 ets 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


2-1 








TeleCen2 Command Summary for UNDC-Based Cross Compilers 


Table 2-1. Compilation Tools Option Summary 


Option 

Command 

ada 

aid 

a opt 

— l(ibfile 

X 

X 

X 

—t(emplib 

mm 

X 

X 

- V(space_si 2 e 

■5 

X 

X 

—v(erbose 

X 

X 

X 

—a(dditionai-options 


X 


-B(ase 


X 


-b(ind_only 

X 

X 


-C(ontext 

X 



-c(pu_type 

m 

1 

X 

-d(ebug 

mm 

X 


-E(rror_abort 

X 



—e(rrors_only 

X 



— F(ile_only jerrs 

X 



—f(ormat 


X 


-G(raph 

X 


X 

-generate _ofm 


X 


-I(nline 

X 


X 

—i(nhibit 

X 



-k(eep 

X 


X 

-L(ist 

X 



-M(ap 


X 


—m(ain 

X 



-N(ame 



X 

-Optimize 

X 


X 

-o(utput Joad 


mm 


-S* 

X 

Ml 

X 

c -s(oftware_float 

X 

X 

X 

-T(raceback 


X 


-ul pdatejib 

X 



-X(r.eption_show 


X 


- x(ecution _profiie 

X 

X 

X 

- Y and -v 


X 



« 


The functionality of the - S option of ada and the -S option of a U ii aomewhat different. Refer to the text. 


2-2 


INTRO-1459N-V 1.1 (UNDC-C) © 1989 TeleSoft 


04SEP89 













































2.1. The Ada Compiler (“ada”) 


The Te!eCen2 Ada Compiler is invoked by the ada command. Unless you specify otherwise, 
the front end, middle pass, and code generator are executed each time the compiler is invoked. 

Before you can compile, you must (1) make sure you have access to TeieGen2, (2) create a 
library file, and (3) create a sublibrary. These steps were explained in the Getting Started section 
of the Overview. We suggest you review that section, and then compile, link, and execute the 
sample program as indicated before you attempt to compile other programs. 

This section focuses specifically on command-level information relating to compilation, that 
is. on invoking the compiler and using the various options to control the compilation process. 
Details on the TeleGen2 compilation process and guidelines for using the compiler most 
effectively are in the Compiler chapter of the User Guide volume. (You might want to look at 
Figure 3-1 in thac volume now, to give you insight into the TeleGen2 compilation process and to 
see how the options mentioned in this Command Summary volume relate to the actual 
compilation process.) 

The syntax of the command to invoke the Ada compiler is: 


ada (<“common_option”>} {<option>} <mput_apec> 


where: 


<*‘common_option”> 

None or more of the following sec of options that are com¬ 
mon to many TeleGen2 commands: 

-l(ibfile or -t(emplib 

-V(space_size 

-v(erbose 

These options were discussed in Chapter 1. 

<option> 

None or more of the compiler-specific options discussed 
below. 

<input_spec> 

The Ada source file(s) to be compiled. It may be: 

* One or more Ada source files, for example: 

/ user/john /example 

Prog_JV.text 
ciosrc/calc_mem.ada 
calcio.ada mvprog.ada 
‘.ada 

* A file containing names of files to be compiled. Such a 
file must have the extension “.ilf. You can find de¬ 
tails for using input-list files in the User Guide portion 
of your TeleGen2 documentation set. 

* A combination of the above. 


Please note that the compiler defaults are set for your convenience. In most cases you will 
not need to use additional options: a simple “ada -tinput_spec>" is sufficient. However, options 


04SEP89 


LNTRO-1459N-Vl.l(UNDC-C) © 1989 TeieSoft 


2-3 








are included to provide added flexibility. You can, for example, have the compiler quicklv check 
the source for syntax and semantic errors but not produce object code (-e(rrors_only) or vou can 
compile, bind, and link an main program with a single compiler invocation (-m(ain). Other 
options are provided for other purposes. 

The options available with the ada command, and the relationships among them, are 
illustrated in the following figure. Remember that each of the options listed is identified bv a 
dash followed by a single letter (e.g., **-e"). The parenthesis and the characters following the 
option are for descriptive purposes only; they are not part of the option. 


• i 

-l(ibfile <libname> -t(emplib <sublib>{,„.} 


-V(space_size 2000 
1 

-v(erbose 


-e(rrors_only 


compile to object 

-,- 

-c(pu_type 20 
I 

-d(ebug 

I 

-i(nhibit <keyf> 


-0(ptimize <keyt> 

I 

-S(ource_asm 

» 

-u(pdate_lib <keyt> 
I 

-x(ecution_profile 


-b(ind_only 


—L(ist 


-F(iIe_only_errs 


-C(ontext 1 
l 

-E(rror_abort 999 
I 

-m(ain <unit> 
l 

Z -s(oftware_float 

_ I 

<-input_spec> I 


f (11 <k*y> for - O-. refer to aeyl. (2) <key > for -a: i or »; • i« the default. (2) < key > for -i: a or certain combination* of 


2-4 


INTRO-1459N-Vl.l(UNtX-C) © 1989 TeleSoft 


04SEP89 






The options available with the ada command are summarized in Table 2-2. The default 
situation (that is. what happens if the option is not used) is explained in the middle column. 
Each option is described in the paragraphs that follow the table. 


Table 2-2. Summary of Compiler Options 


Option 

Default 

Discussed 
in Section 

Common options: 

-l(ibfile <libname> 

Use libist.alb as the library file. 

1.4.1 

-t(emplib <sublib...> 

None 

1.4.1 

- V(space_size <value> 

Set size to 2000 Kbytes. 

1.4.2 

-v(erbose 

Do not output progress messages. 

1.4.3 

-b(ind_only 

Bind and link. 

Dm 

-c(pu_type <value> 

Consider CPU type to be MC68020. 

mw 

-d(ebug 

Do not include debug information in 

ms 

-E(rror_abort <value> 

object code. (~d sets —k(eep.) 

Abort compilation after 999 errors. 

2.1.4 

-e(rrors_only 

Run middle pass and code generator. 

2.1.5 

-i(nhibit <key>f 

not just front end. 

Do not suppress run-time checks, source 

2.1.6 

-k(eep 

line references, or subprogram name 
information in object. 

Discard intermediate representations of 

2.1.7 

-m(ain <unit> 

secondary units. 

Do not produce executable code 

2.1.8 

-0(ptimize <key>t 

(binder/linker not executed). 

Do not optimize code. 

2.1.9 

C -s(oftware_float 

Use hardware floating-point support. 

2.1.10 

-u(pdate_lib <key>t 

Do not update library when errors are 

2.1.11 

-x(ecution_profiIe 

found (multi-unit compilations). 

Do not generate execution-profile code. 

2.1.12 

Listing options: 

-C(ontext <value> 

Include 1 line of context with error 

2.1.13.1 

-L(ist 

message. 

Do not generate a source-error listing. 

2.1.13.2 

-F(ile_only_firrs 

Do not generate an errors-only listing. 

2.1.13.3 

-S(ource_asm 

oniy. 

Do not generate assembly listing. 

2.1.13.4 


f (11 <k«y > for - O. r»(er 10 ttpt. (2) <key > for - i or ■: » it the default. (2) <k«y> for -c « or certain combination! of 

lac. 


04SEP89 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


















TeleGen2 Command Summary for UNIX-Based Cross Compilers 


2.1.1. -b(Lnd_only - Bind without Linking. The -b(ind_onlv option instructs the 
compiler to not invoke the link phase. This option is useful when you have adapted your own 
linker and want to use the adapted linker instead of the linker provided, —b is valid only when 
the -m(ain option is specified. 

2.1.2. -c(pu_type - Specify the Target Machine. This option specifies the target CPU 
in the MC680X0 family. The format of the option is: 

-c < value > 

where <value> is either 00, 10, or 20, which corresponds to MC68000, MC68010, and MC68020, 
respectively. The default is 20. If the — c option is used, <value> must correspond to your target 
processor, which in turn must correspond to the sublibraries you’ve “installed” in your library 
list. Note: for MC68030 targets, use “20”. 

Refer to “Selecting the Correct Run-Time Sublibrary” in the Overmew portion of your 
TeleGen2 documentation set for details on selecting the correct sublibraries for your 
configuration. Remember that not all sublibraries are provided on all TeleGen2 systems. Refer 
to the Programming Guide chapter of your Reference Information volume for the names of 
sublibraries provided. 

2.1.3. -d(ebug - Generate Debugger Information. The code generator must generate 
special information for any unit that is to be used with the TeleGen2 symbolic debugger. The 
generation of this information is enabled by use of. the -d option. The use of — d automatically 
sets the -k(eep option. This to make sure that the High Form, Low Form, and debugger 
information for secondary units are not deleted. 

To see if a unit has been compiled with the -d(ebug option, use the als command with the 
-X(tended option. Debugger information exists for the unit if the "dbg_info” attribute appears 
in the listing for that unit. The default situation is that no debugger information is produced. 

Performance note. While the compilation time overhead generated by the use of -d(ebug is 
minimal, retaining this optional information in the Ada library increases the space overhead. 

2.1.4. -E(rror_abort - Set an Error Count for Aborting Compilation. The compiler 
maintains separate counts of all syntactic errors, semantic errors, and warning messages detected 
by the front end during a compilation. 

A large number of errors generally indicates that errors in statements appearing earlier in 
the unit have “cascaded” through the rest of the code. A classic example is an error occurring in 
a statement that declares a type. This causes subsequent declarations that use the type to be in 
error, which further causes all statements using the declared objects to be in error. In such a 
situation, only the first error message is useful. Aborting the compilation at ar. early stage is 
therefore often to your advantage; the -E option allows you to do it. 

The format of the option is: 

-E <value> 

where <vaiue> is the number of errors or warnings allowed. The default value is 999. The 
minimum value is 1. Caution: If you do not use the -E option, it is possible to have 999 
warning messages plus 999 syntax errors plus 999 semantic errors without aborting compilation, 
since each type of error is counted separately. 


2-6 


INTRO-14S9N-Vl.l(UNIX-C) © 1989 TeleSoft 


04SEP89 






yj 1.W1X- 1_LAi iU IUULS 


2.1.5. -e(rTors_ocdy - Check Source But Don’t Generate Code. This option instructs 
the compiler to perform syntactic and semantic analysis of the source program without 
generating Low Form and object code. That is, it calls the front end only, not the middle pass 
and code generator. (This means, of course, that only front end errors are detected and that only 
the High Form intermediates are generated.) This option is typically used during early code 
development where execution is not required and speed of compilation is important. 

Note: Although High Form intermediates are generated with the -e option, these intermediates 
are deleted at the end of compilation. This means that the library is not updated. 

The —e option cannot be used with -S(ource_asm. since the latter requires the generation of 
object code. If -e is not used (the default situation), the source is compiled to object code (if no 
errors are found). The -e option is also incompatible with -k(eep. -d(ebug, -0(ptimize, and 
other options that require processing beyond the front end phase of compilation. 

2.1.6. -i(nhibit - Suppress Checks and Source Information. The —i(nhibit option 
allows you to suppress, within the generated object code, certain run-time checks, source line 
references, and subprogram name information. 

The Ada language requires a wide variety of run-time checks to ensure the validity of 
operations. For example, arithmetic overflow checks are required on all numeric operations, and 
range checks are required on all assignment statements that could result in an illegal value being 
assigned to a variable. While these checks are vital during development and are an important 
asset of the language, they introduce a substantial overhead. This overhead may be prohibitive 
in time-critical applications. 

Although the Ada language provides pragma Suppress to selectively suppress classes of 
checks, using the pragma requires you to modify the Ada source. The -i(nhibit option provides 
an alternative mechanism. 

The compiler by default stores source line and subprogram name information in the object 
code. This information is used to display a source level traceback when an unhandled exception 
propagates to the outer level of a program; it is particularly valuable during development, since it 
provides a direct indication of the source line at which the exception occurs and the subprogram 
calling chain that led to the line generating the exception. 

The inclusion of source line information in the object code, however, introduces an overhead 
of 6 bytes for each line of source that causes code to be generated. Thus, a 1000-line package 
may have up to 6000 bytes of source line information. For one compilation unit, the extra 
overhead (in bytes) for subprogram name information is the total length of all subprogram names 
in the unit (including middle pass-generated subprograms), plus the length of the compilation 
unit name. For space-critical applications, this extra space may be unacceptable; but it can be 
suppressed with the — i(nhibit option. When source line information is suppressed, the traceback 
indicates the offset of the object code at which the exception occurs instead of the source line 
number. When subprogram name information is suppressed, the traceback indicates the offsets of 
the subprogram calls in the calling chain instead of the subprogram names. (For more 
information on the traceback function, refer to the Programming Guide chapter in your 
Reference Information volume.) 

The format of the — i( nhibit option is: 

-i <suboption> { <suboption> } 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeieSoft 




A eJev^en2 Command Summary for UNIX-Based Cross Compilers 


where <suboption> is one or more of the single-letter suboptions listed below. Combinations of 
subopcions are possible. When more than one suboption is used, the suboptions appear together 
with no separators. For example. i Inc”. 


11 line_info} 

Suppress source line information in object code. 

njame_infoj 

Suppress subprogram name information in object 
code. 

cihecksj 

Suppress run-time checks — elaboration, overflow, 
storage access, discriminant, division, index, length, 
and range checks. 

ajll| 

Suppress source line information, subprogram name 
information, and run-time checks. Ln other words, a 
(=inhibit all) is equivalent to Inc. 


As an example of use, the command... 

ada —v —i 1c my_file.ada 

...inhibits the generation of source line information and run-time checks in the object code of the 
units in my-.filc.ada. 

2.1.7. -k(eep — Retain Intermediate Forms. As a default, the compiler deletes the High 
Form and Low Form intermediate representations of ail compiled secondary units from the 
working sublibrary. Deletion of these intermediate forms can significantly decrease the size of 
sublibraries ~ typically 50% to 80% for multi-unit programs. On the other hand, some of the 
information within the intermediate forms may be required later. For example. High Form is 
required if the unit is to be referenced by the Ada Cross-Referencer (air). In addition, 
information required by the debugger and the Global Optimizer must be saved if these utilities 
are used. For these reasons, the — k option is provided with the ada command. The -k option: 

■ Must be used if the compiled unit is to be optimized later with aopt: otherwise, aopt 
issues an error message and the optimizer aborts. 

» Should be used if the unit is to be cross-referenced later: otherwise, an error message is 
issued when the Ada Cross-Referencer attempts to cross-reference that unit. 

* Need not be used with -d(ebug, since -fcis set automatically whenever -d is used. 

To verify that a unit has been compiled with the -k(eep option (has not been “squeezed”), 
use the aU command with the -X(tended option. A listing will be generated that shows whether 
the intermediate forms for the unit exist. A unit has been compiled with -k(eep if the attributes 
high_form and lowJorm appear in the listing for that unit. 

2.1.8. -m(ain - Compile a Main Program. This option tells the compiler that the unit 
specified with the option is to be used as a main program. After all files named in the input 
specification have been compiled, the compiler invokes the Ada prelinker (the binder program) 
and the linker to bind and link the program with its extended family. An “execute form” (EF) 
load module named <.unit>.ef is left in the current directory (unless otherwise specified by user 
option). The binder and linker may also be invoked via the aid command. 


2-8 


INTRO- 1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 

















The format of the option is: 

— m <imit> 

where <unit> is the name of the main unit for the program. If the main unit has already been 
compiled, it does not have to be in the input file. However , the body of the main unit, if 
previously compiled, must be present in the current working sublibrary. 

Note: Options specific to the linker (invoked via aid) may be specified on the ada command line 

when the -m option is used. With -m, the compiler will call aid when compilation is compiece. 
passing to it aid- specific options specified with the ada command. For example... 

ada —v -m welcome -T 2 —o new.ef -a vmel33.opt sample.ada 

...instructs the compiler to compile the Ada source file, sample.ada , which contains the main 
program unit Welcome. After the file has been compiled, the compiler calls the Ada linker, 
passing to it the -T, -o, and -a options with their respective arguments. (The -a option tells 
the linker to use the commands specified in the options file vmelSS.opt to direct the linking 
process; an options file is required for linking.) The linker produces an “execute form” load 
module of of the unit, placing it in file new.ef as requested by the linker’s -o option. 

2.1.9. — 0(ptimixe — Optimize Object Code. This option causes the compiler to invoke 
the global optimizer to optimize the Low Form generated by the middle pass for the unit being 
compiled. The code generator takes the optimized Low Form as input and produces more 
efficient object code. The format of this option is: 

-O <key> 

where <kev> is at least one of the optimizer suboption keys discussed in the Global Optimizer 
chapter. Please refer to that chapter for all information regarding the use of the optimizer. The 
chapter discusses using the optimizer as a standalone tool for collections of compiled but 
unoptimized units and using the -0(ptimize option with the ada command. The latter topic 
includes a definition of the -0(ptimize suboption key values plus a presentation of two other ada 
options (-G(raph and -I(nline_list, not shown on the ada chart) that may be used in 
conjunction with the -0(ptimize option. Note: We strongly recommend that you do not 
attempt to use the optimizer until the code being compiled has been fully debugged and tested. 

2.1.10. -3(oftware_J0oat — Use Software Floating-Point Support. This option may 
not be available with your TcleGen2 system: please consult the Overmew portion to see if it is 
provided. The Ada linker selects hardware floating-point support by default. If you do hot have 
hardware floating point support or if you wish to generate code compatible with such machines, 
use the -s option. In addition: If you use the -s option, the library file you use for compilation 
must contain the name of one of the software floating point run-time sublibraries, for example. 
s2Qrt.sub. Refer to the Library Manager chapter in your User Guide volume for information on 
the various sublibraries supplied with TeleGen2. 

2.1.11. -u(pdate_lib - Update the Working Sublibrary. The -u(pdace_lib option tells 
the compiler when to update the library. It is most useful for compiling multiple source files. 
The format of the option is: 

-a <key> 


04SEPS9 


INTRO-1459N-Vl.l(UNEC-C) © 1989 TeleSoft 


2-9 













j.eie^»en^ Command Summary for UNIX-Based Cross Compilers 


where <key> is either “s’’ (source) or “i” (invocation). 

i “i” tells the compiler to update the working sublibrary after all files submitted in that 
invocation of ada have compiled successfully. If an error is encountered, the librarv is 
not updated, even for source files that compile successfully. In addition, all remaining 
source files will be compiled for syntactic and semantic errors only. Implications: (1) 
If an error exists in any source file you submit, the library will not be updated, even if 
all other files are error free. (2) Compilation is faster, since the library is updated 
only once, at the end of compilation. 

s (This is the default; it is equivalent to not using the -u(pdate_lib option at all.) “s” 
tells the compiler to update the library after all units within a single source file 
compile successfully. If the compiler encounters an error in any unit within a source 
file, all changes to the working sublibrary for the erroneous unit and for all other units 
in the file are discarded. However, library updates for units in previous or remaining 
source files are unaffected. Implications: (1) You can submit files containing possible 
errors and still have units in other files compile successfully into the library. (2) 
Compilation is slightly slower, since the library is updated once for each file. 

Therefore: 

Use “u s” (or no -u(pdate option) when: 

You’re not sure all units will compile successfully. 

Compilation speed is not especially important. 

Use “u i” when: 

You are reasonably certain your files will compile successfully. 

Fast compilation is important. 

2.1.12. -x(ecution_ 4 Jrofile - Generate Profile Information. The -x(ecution_profile 
option uses the code generation phase of compilation to place special information in the generated 
code that can be used to obtain a “profile” of a program’s execution. This information is 
generated by a facility known as “the profiler.” Refer to your User Guide volume for information 
on how to use the profiler to obtain execution timing and subprogram call information for a 
program. 

Important : If any code in a program has been compiled with the -x(ecution_profile option, 

that option must also be used with aid when the program is bound and linked. In addition, the 
linker options file must be modified to include the appropriate profiling environment modules, for 
example, cnv 133..profile. For more information on which environment module to include in the 
linker options file, refer to Chapter 4. 

2.1.13. Listing Options. The listing options specify the content and format of listings 
generated by the compiler. .Assembly code listings of the generated code can also be generated. 

2.1.13.1. -C(ontext - Include Source Lines Around the Error. When an error 
message is sent to stderr , it is helpful to include the lines of the source program that surround the 
line containing the error. These lines provide a context for the error in the source program and 
help to clarify the nature of the error. The -C option controls the number of source lines that 
surround the the error. 


2-10 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 






The format of the option is: 

—C <valu«> 

where < value > is the number of source context lines output for each error. The default for 
<value> is I. This parameter specifies the total number of lines output for each error (including 
the source line that contains the error). The first context line is the one immediately before the 
line in error; other context lines are distributed before and after the line in error. Let’s sav that 
trialprog.ada, which consists of the following text- 

package P is 

type Tl is range 1..10; 
type T2 is digits 1; 

type Arr is array (1..2) of integer; type T3 is new Arr; -- OK. 
package Inner is 

type Ini is new Tl; -- ERROR: Tl DERIVED, 

type In2 is new T2; -- ERROR: T2 DERIVED, 

type In3 is new T3; -- ERROR: T3 DERIVED, 

type Inarr is new Arr; -- OK. 

end Inner; 

end P; 

...were compiled as follows: 

ada —e —C 2 trialprog.ada 

(The -e option here is used for error checking and -C(ontext is set to 2 to display two lines of 
source.) The output produced would look like this: 



04SEP89 


INTRO-1459N-V l.l(UNDC-C) © 1989 TeleSoft 


2-11 














'jumjiuuu wiujujiiary lor ui^pv-oasea t^ross compilers 


2.1.13.2. -L(ist - Generate a Source Listing. This option instructs the compiler to 
output a listing of the source being compiled, interspersed with error information (if any). The 
listing is output to <file_spec>.l. where <fi!e_spec> is the name of the source file (minus the 
extension). If <file_spec>.l already exists, it is overwritten. 

if input to the ada command is an input-list file (<file_spec>.ilf), ; separate listing fiie is 
generated for each source fiie listed in the input fiie. Each resulting listing file has the same name 
as the parent fiie, except that the extension “.I** is appended. Errors are interspersed with the 
listing. If you do not use -L (the default situation), errors are sent to stdoxit only; no listing is 
produced. -L is incompatible with -F. 

2.1.13.3. — F(ile_onIy_errs - Put Only Errors in Listing File. This option is used to 
produce a listing containing only the errors generated during compilation; source is not included. 
The output is sent to <file_spec>.l. -F is incompatible with -L. 

2.1.13.4. -S(ource_asm — Generate a Source/Assembly Listing. This option instructs 
the compiler to generate an assembly listing and send it to <unit>.src, where <unit> is the name 
of the unit in the user-supplied so tree file. The listing consists of assembly code intermixed with 
source code as comments. If input to the ada command is an input-list file (<file_spec>.ilf), a 
separate assembly listing file is generated for each unit contained in each source rile listed in the 
input file. If -5 is not used (the default situation), an assembly listing is not generated. 


2-1. 


HVTRO-1459N-Vl.i(UNDC-C) © 1989 TeleSoft 


04SEP89 





2.2. The Ada Linker (“aid”) 

The TeleGen2 Ada compiler produces object code from Ada source code and stores it in the 
Ada sublibrary. The TeleGen2 Ada linker takes Ada object code and non-Ada imported object 
code from Ada sublibraries and creates either linked output modules or partially linked object 
form modules (OFMs) that can be used as input to subsequent linking operations. 

The linker operates in two phases: the binding phase and the linking phase. The binding 
phase “binds"’ together all of the necessary Ada units and creates elaboration code that is stored 
in the subiibrary. The linking phase combines the elaboration code, the appropriate Ada object 
modules, and any OFM, environment, or imported non-Ada objects specified in the user’s linker 
options file to produce either an executable load module or a new OFM. 

The linker is invoked with the aid command; it can also be invoked with the -m(ain option 
of the ada command. In the latter case the compiler passes appropriate options to the linker, to 
direct its operation. 

In the simplest case, aid takes two arguments - the name of the main unit of the Ada 
program structure that is to be linked and the name of a linker option file - and produces one 
output file, the complete load module produced by the linking process. The load module is placed 
in the directory from which aid was executed, under the name of the main unit used as the 
argument to aid. For example, the command 

aid —a vme!33.opt main 

links the object modules of all the units in the extended family of unit Main, including any user- 
specified modules in the linker options file vmelSS.opt. The resulting load module will be named 
“main.ef”, which is in the TeleGen2 proprietary output format that can be used as input to the 
downloader (adwn command). Important: when using aid, the body of the main unit to be 
linked must be in the working sublibrary. 

The general syntax of the aid command is: 


aid {<“common_option”>} {<option>} <unit> 


where: 


OtSEPSQ 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


2-13 






reie*j»en2 Uommand bummary for UNIX-Based Cross Compilers 


<“common_option ”> 

None or more of the following sec of options that are 
common to many TeleGen2 commands: 

-l(ibfile or -t(emplib 
- V(space_si 2 e 
-v(erbose 

These options were discussed in Chapter 1. 

<option> 

None or more of the options discussed in the following 
sections. 

<unit> 

The name of the main unit of the Ada program to be 
linked. If the name of the unit is not provided on the 
command line, the unit is specified with the INPUT op¬ 
tion in a linker options file. For information on linker 
options files, refer to the User Guide portion of your 
TeleGen2 documentation set. 


The options available with the aid command and the relationships among them are illustrated 
below. 


2-14 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


04SEP39 











OUMP1LATI0N tools 


ai 

d 


i'. 1 " 

l(ibfile <libname> 
i 

i 

-t(empiib <sublib>{,...} 

_1 


— V(space_size 2000 


I 

-v(erbose 

I 

-a(dditional_options <file> 

I 

-B(ase 0 

I 

-b(ind_only 

I 

-c{pu_type 20 

I 

-d(ebug 

I 

-f(ormat <keyf> 


-g(enerate_ofm <lib_entity > 


-o(utput_load <file> 


—M(ap {<suboptionf>} 

I 

-S(“asm_listing” 

I 

a -s(oftware_float 

I 

-T(raceback 15 

I 

-x(ecution_profile 

I 

—X(ception_show 

I 

— Y ^096 |byte»-loBf| 

I 

—y 256 jbyte»-aaiaraij 


<unic> 


f Notes 

<key>: S(record or E(xecute_form or 
I(E££ (E is the default) 

<subopuon^: i(mage. excluded, and/or l(ocals 

Linker directives are communicated to the linker as options on the command line or as 
options entered via an options file. Command-line options are useful for controlling options that 
you are likely to change often. The default option settings are designed to allow for the simplest 
and most convenient use of the linker. Command-line options are discussed below. 


04SEP39 


INTRO- 1459N-V 1.1( UNDC-C) © 1989 TeleSoft 


2-15 





^uimnuuu tmundx y luru niA-uaaeo v^ross compilers 


Options-file options are for specifying more complicated linker options, such as the 
specification of memory locations for specific portions of the code or data for a program. 
Options-file options are discussed in the Te!eGen2 User Guide. 

2.2.1. -a(dditional_options — Include Additional Options. The -a option specifies that 
the linker is to process additional options obtained from a linker options file. The format is: 

— a <file> 

where <file> is a valid file specification and represents a file containing linker options. The 
format of the options in the options file is described in the Linker chapter of the TeleGen2 User 
Guide. If no extension is present, the linker uses the default extension “.opt”. 

2.2.2. — B(ase — Start at Specified Location. This option is used to specify the start 
location of the linked output. The linker will locate non-absolute control sections in consecutive 
memory locations. All control sections are word aligned on the MC68QX0. The format is: 

-B <address> 

where <address> is a valid MC680X0 address. The address can be specified as a decimal, 
hexadecimal (%Xhex), or a hexadecimal-based literal in Ada syntax (I6#hex#). The default is 
hexadecimal (%Xhex). 

If you specify neither the — B option nor an options file LOCATE command and the link is 
complete, the linker uses the default location value of address 0. 

The -B option governs the location for any code, constant, or data section not covered by 
an options file LOCATE. This option does not supercede any LOCATE options. -B(ase is 
equivalent to a LOCATE option with no control section or entity name specified. 

2.2.3. -b(ind_only - Bind without Linking. This option instructs the compiler to not 
invoke the link phase, in other words, to generate elaboration code only. This option is 
particularly useful when you have adapted your own linker and want to use it in place of the 
TeleGen2 linker. 

2.2.4. -c(pu_type - Select Processor Type. This option specifies the CPU of the target 
on which the program is to run. The format of the option is: 

-c <value> 

where <value> is 00. 10, or 20, representing MC68000. MC68010. or MC68020 (use 20 for the 
MC68030). The default is 20. 

If you use the -c(pu_type option when compiling a main program, you must use the option 
when linking. In addition; the library list you use for compiling and linking must specify the 
correct target-specific run-time sublibraries. For information on the various sublibraries provided 
with TeleGen2. refer to “Sublibraries Provided with TeleGen2” in Chapter 2 of the User Guide. 

2.2.5. -d(ebug - Produce Debug Symbol Information. This option controls the 
generation of debug symbol information for use with the Source-Level Debugger. A program that 
is to be run with the debugger must be linked with the —d(ebug option. If supported by the 
chosen load module format. -d(ebug may also cause symbol information to be output in the load 


2-16 


INTRO- 1459N-Vl.l(UNIX- C) © 1989 TeleSoft 


04SEP89 




COMPILATION tools 


module. The option is ignored if -g(enerate_ofm is selected. In the standard configuration of the 
Te!eGen2 system, none of the outputs support symbol information in the load module. 

The default situation is that no debug information is produced. Subprograms are not 
excluded when -d(ebug is specified. 

2.2.6. -o(utput_load - Specify Load Module Output. This option is used primarily to 
specify the file name for the load module output created by the linker. The format is: 

-o <file> 

where <file> is the file specification for the output. If <file> does not include an extension, the 
linker will append an extension appropriate to the chosen load module format (.sr or .ef. for 
S(records or E(xecute_form). 

The -o option may be used with the -a(dditional_options option, which directs the linker 
to use the options in an options file. Any output file specification present in the options file is 
superceded by the specification on the command line. If -o is used with -g(enerate_ofm. both 
formats will be produced. 

2.2.7. —f(ormat — Specify an Output Format. The —f(ormat option specifies the format 
of the output module. The format of the option is: 

-f <key> 

where <key> is E (for Execute Form) or S (for S_Record) or I (for IEEE). <key> is required. 
If -/is not used. E(xecute_form is produced. E is used to specify that the load module output of 
the linker is to be Execute Form. Execute Form is the default output format generated by the 
linker and is suitable for use as input to the downloader/'receiver. S(records is used to specify 
that the output of the linker should be Motorola S-records. I(EEE is used to specify tht the 
output of the linker is to be IEEE-695 modules. This output format is suitable for use as input to 
Motorola-compatible simulators and monitors. 

2.2.3. -g(enerate_ofxn - Specify OFM Output. This option specifies that one output of 
the linker is to be linked OF. Linked OF is suitable for incomplete modules and can be used 
subsequently as input to the Ada linker. The linked OF is put into the library as an object form 
module (‘’ofm”) entity. The format of the option is: 

-g < lib .entity > 

where <lib_entity> is the name of a library entity. NOTE: The object form module of 

<main_unit> is a library entity separate from that of the specification or body of the unit. 

If an object form module library entity with the specified name already exists in the current 
working sublibrary, that entity is deleted and replaced by the new output. 

The -g option may be used with the -a(dditional_options option. Any format or name 
present in the options file is superceded by the format and name specified on the command line. 
You may request an OF module (via -q) instead of the default Execute Form or in addition to a 
load module format. To obtain both an OF module and a load module, use both the -g and -o 
options. 


04SEP39 


INTRO-1459N-V l.l(UNDC-C) © 1989 TeleSoft 


2-IT 




wuiiuiiary lor ui’iL.v.-oaseu ^ruas ^umpu^rb 


2.2.9. -M(ap - Produce Link Map Listing. This option is used to request and control a 
link map listing. The link map listing is sent to: 

<unit> .map 

where <unit> is the name of the main program unit (if present), the name specified as the 
command line parameter, or the name specified as the first INPUT option, modified as necessary 
to form a valid UNIX file specification. The format of the link map listing file is described in the 
Linker chapter of the TeleGen2 User Guide. The format of the option is: 

-M {<suboption>} 

where <suboption> is one or more of the following: 


i 

(image) Generates a memory image listing in addi¬ 
tion to the map listing. The linker writes the image 
listing to the same file as the link map listing. This 
is the only optional section of the listing. 

e 

(excluded) Inserts a list of excluded subprograms 
into the link map listing. 

1 

(locals) Includes local symbols in the link map sym¬ 
bol listing. 


If more than one of the above suboptions is used, they must appear together, with no spaces. For 
example: 

-M iel 

Note: a -M(ap option specified on the command line supercedes a MAP command in an options 
file. 

2.2.10. -S(“aamJli3tmg” - Produce an Assembly Listing. The -5 option is used to 
output an assembly listing from the elaboration process. The output is put in a file, 
<filo.obm.src, where <file> is the name of the main unit being linked. (The file extension may 
be different on your system.) 

2.2.11. -s(oftware_float - Use Software Floating-Point Support. This option may 
not be available on your TeleGen2 system. Please consult the Overview portion of this volume to 
see if it is provided. The Ada linker currently selects hardware floating-point support by default. 
This default situation is provided for users of systems with an arithmetic coprocessor. If you do 
not have hardware floating point support or if you wish to generate code compatible with such 
machines, use the -s option. In addition: if you use the -s option, the library file you use for 
compiling and linking must contain the name of the software floating point run-time sublibrary. 
s20rt.sub. Refer to the Library Manager chapter in your User Guide volume for more 
information on the run-time sublibrary. 

2.2.12. -T(raceback - Set Levels for Tracing Exceptions. When a run-time exception 
occurs (and is not handled by an exception handler), the name and line number of the unit when* 
the exception occurred is displayed along with a recursive history of the units which called tha: 
unit. (See the “Exception Handling” section in the Programming Guide chapter of your 


2-18 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


04SEP89 







Reference Information volume for a more complete explanation of exception reports.) The — T 
option allows you to set the number of levels in this recursive history. For example, the 
command 

aid -T 3 main 

specifies that traceback histories will be three levels deep. The default value for this option is 15. 

When an exception occurs, the run-cime support system stores the history in a preallocated 
block of memory. Since the size of this block is determined by the -T option, setting this value 
to a large number can introduce objectionable overhead in deeply nested, time-critical code. You 
may wish to make this value smaller for well-tested programs. 

2.2.13. -x(ecution_profile - Bind and Link for Profiling. This option is used for units 
that have been compiled with the -z option. Use of -z with ada causes the code generator to 
include, in the object, special code that will later be used to provide a profile of the program^ 
execution. 

If -z is used with ada, it must be used with aid as well. The -z option of aid instructs the 
linker to link in the profiling run-time support routines and generate a subprogram dictionary, 
pro file.die, for the program. The dictionary is a text file containing the names and addresses of 
all subprograms in the program. The dictionary can be used to produce a listing showing how 
the program executes. 

To link a program with profiling, you need to instruct the linker to use the profiling 
environment module provided for your target board. This environment module will perform the 
run-time profiling for your application. For the vmelSSa board, this module is env 133^profile: it 
must be specified by using an INPUT/OFM command in the linker options file. 

The run-time support routines record the profiling data in memory during program 
execution and then write the data to a host file, profile.out . via the serial download line as part of 
program termination. The files {profile.die and profile.oat) can then be used to produce a listing 
showing how the program executes. 

Note : Profiling environments for targets other than the vmelSSa board are also provided, and 
need to be specified in your linker options file if you are linking for profiling. Sample linker option 
files, one for each target, are provided in the $TELEGEN2/examples directory. You can edit the 
appropriate file (< target'- .opt), to include profiling support for your target, and use the edited file 
when linking. 

Refer to the Ada Profiler chapter in your User Guide volume for a full discussion of the 
profiler. 

2.2.14. Tasking Options. The following aid options are binding options used for task 
execution. They are therefore useful only for linking programs that contain tasking code. 

2.2.14.1. -X(ception_3how - Report Unhandled Exceptions. By default, unhandled 
exceptions that occur in tasks are not reported: instead, the task terminates silently. The -X 
option allows you to specify that such exceptions are to be reported. The output is similar to 
that displayed when an unhandled exception occurs in a main program. 


04SEP39 


INTRO- 1459N-V1.1(UNIX-C) © 1989 TeleSoft 


2-19 






2.2.14.2. -Y and —y - Alter Stack Size. In the absence of a representation specification 
for task storage_size. the run time will allocate 4096 bytes of storage for each executing task. 
You can change the amount of space allocated for tasking by using the - Kand — y options. 

-Y specifies the size of the basic task stack. The format of the option is: 

— Y <valne> 

where <value> is the size of the task stack in 32-bit (iong_integer) bytes. The default is 4096. 

—y specifies the stack-guard size. The stack-guard space is the amount of additional space 
allocated per task to accommodate interrupts and exception-handling operations. The format of 
the option is: 

—y <valne> 

where <value> is the size of the stack-guard size in 16-bit (natural) bytes. The value given must 
be greater than the task-stack size. The default is 256 bytes; this is the amount allocated unless 
otherwise specified. 

A representation specification for task storage size overrides a value supplied with either 
option. 


2-20 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 




