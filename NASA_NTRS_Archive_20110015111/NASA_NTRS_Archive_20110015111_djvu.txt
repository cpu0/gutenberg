computers, databases, and instruments.) 
A user of yourSkyG can specify parame- 
ters describing a mosaic to be con- 
structed. yourSkyG then constructs the 
mosaic on the IPG and makes it available 
for downloading by the user. The com- 
plexities of determining which input im- 
ages are required to construct a mosaic, 
retrieving the required input images 
from remote sky-survey archives, upload- 
ing the images to the computers on the 
IPG, performing the computations re- 
motely on the Grid, and downloading 
the resulting mosaic from the Grid are 
all transparent to the user. 

This program was written by Joseph Jacob, 
James Collier, Loring Craymer, and David 
Curkendall of Caltech for NASA’s Jet 
Propulsion Laboratory. Further informa- 
tion is contained in a TSP ( see page 1 ). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(818) 393-2827. Refer to NPO-407 61. 


ANTLR Tree Grammar 
Generator and Extensions 

A computer program implements two 
extensions of ANTLR (Another Tool for 
Language Recognition) , which is a set of 
software tools for translating source 
codes between different computing lan- 
guages. ANTLR supports predicated- 
LL(A) lexer and parser grammars, a no- 
tation for annotating parser grammars 
to direct tree construction, and predi- 
cated tree grammars. [“LL(&)” signifies 
“left-right, leftmost derivation with k to- 
kens of look-ahead,” referring to certain 
characteristics of a grammar.] One of 
the extensions is a syntax for tree trans- 
formations. The other extension is the 
generation of tree grammars from anno- 
tated parser or input tree grammars. 
These extensions can simplify the 
process of generating source-to-source 
language translators and they make pos- 
sible an approach, called “polyphase 
parsing,” to translation between comput- 
ing languages. The typical approach to 
translator development is to identify 


high-level semantic constructs such as 
“expressions,” “declarations,” and “defi- 
nitions” as fundamental building blocks 
in the grammar specification used for 
language recognition. The polyphase 
approach is to lump ambiguous syntactic 
constructs during parsing and then dis- 
ambiguate the alternatives in subse- 
quent tree transformation passes. 
Polyphase parsing is believed to be use- 
ful for generating efficient recognizers 
for C++ and other languages that, like 
C++, have significant ambiguities. 

This program was written by Loring 
Cray mer of Caltech for NASA’s Jet Propul- 
sion Laboratory. Further information is 
contained in a TSP (see page 1). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(818) 393-2827. Refer to NPO-30565. ' 


Generic Kalman Filter Soft- 
ware 

The Generic Kalman Filter (GKF) 
software provides a standard basis for 
the development of application-specific 
Kalman-filter programs. Historically, 
Kalman filters have been implemented 
by customized programs that must be 
written, coded, and debugged anew for 
each unique application, then tested 
and tuned with simulated or actual 
measurement data. Total development 
times for typical Kalman-filter applica- 
tion programs have ranged from months 
to weeks. The GKF software can simplify 
the development process and reduce the 
development time by eliminating the 
need to re-create the fundamental im- 
plementation of the Kalman filter for 
each new application. The GKF software 
is written in the ANSI C programming 
language. It contains a generic Kalman- 
filter-development directory that, in 
turn, contains a code for a generic 
Kalman filter function; more specifically, 
it contains a generically designed and 
generically coded implementation of 
linear, linearized, and extended Kalman 
filtering algorithms, including algo- 


rithms for state- and covariance-update 
and -propagation functions. The mathe- 
matical theory that underlies the algo- 
rithms is well known and has been re- 
ported extensively in the open technical 
literature. Also contained in the direc- 
tory are a header file that defines 
generic Kalman-filter data structures 
and prototype functions and template 
versions of application-specific subfunc- 
tion and calling “navigation/ estimation” 
routine code and headers. Once the 
user has provided a calling routine and 
the required application-specific sub- 
functions, the application-specific 
Kalman-filter software can be compiled 
and executed immediately. During exe- 
cution, the generic Kalman-filter func- 
tion is called from a higher-level “naviga- 
tion” or “estimation” routine that 
preprocesses measurement data and 
postprocesses output data. The generic 
Kalman-filter function uses the afore- 
mentioned data structures and five im- 
plementation-specific subfunctions, 
which have been developed by the user 
on the basis of the aforementioned tem- 
plates. The GKF software can be used to 
develop many different types of unfac- 
torized Kalman filters. A developer can 
choose to implement either a linearized 
or an extended Kalman filter algorithm, 
without having to modify the GKF soft- 
ware. Control dynamics can be taken 
into account or neglected in the filter- 
dynamics model. Filter programs devel- 
oped by use of the GKF software can be 
made to propagate equations of motion 
for linear or nonlinear dynamical sys- 
tems that are deterministic or stochastic. 
In addition, filter programs can be made 
to operate in user-selectable “covariance 
analysis” and “propagation-only” modes 
that are useful in design and develop- 
ment stages. 

This program was written by Michael E. 
Lisano II and Edwin Z. Crues of LinCom for 
Johnson Space Center. For further infor- 
mation, contact the Johnson Technology 
Transfer Office at (281 ) 483-3809. 
MSC-23006 


18 


NASA Tech Briefs, September 2005 


