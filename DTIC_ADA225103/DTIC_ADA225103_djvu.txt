H-A225 103 


REPORT DOCUMENTATION PAGE 






1. AGENCY USE ONLY (lm*» Um*) 


2. REPORT DATE 


TAliVil 

tXBUa.9 


2. REPORT TYPE A» OATES COVERED 

Final 02 Nov 1939 to 02 Nov 1990 


ATnUEANtMVtM l AAt l eomWL^^Validation Summary Report : Msvs Alsy *■ R*®***NUMBERS 
COMP_012, Version 5.1, HP 9000 S 370 (Host) to Motorola MVME121 

(68010)(Target), 8911202A1.10195 


tAimoHS) 

AFNOR, Paris, FRANCE 




DTIC 


AFNOR 

V JUL 

Tour Europe, Cedex 7 

F-92080 Paris la Defense 


FRANCE 




I SPONSOR NG/MONfTORMG AGENCY NAME(S) AND AOORESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Washington, D.C. 20301-3081 


S. PERFORM*** ORGANIZATION 
REPORT NUNBER 

AVF-ASR-AFNOR-89-09 


10. SPONSORNG/MOMTORMG AGENCY 



11. SUPPLE IB NTARY NOTES 

12a. OBTRBUTIOMAMALABIJTY STATEMENT 

12b. NSTRBUTION OOOE 

Approved for public release; distribution unlimited. 


13. ABSTRACT (UudmumSOO wank) 


Alsys, AlsyCOMP 012, Version 5.1 Paris, France, HP 9000 S 370 under HP-UX, Version 6.5 

(Host) to Motorola MVME121 (68010) with ARTK, Version 5.1 (bare 

machine)(Target), ACVC 

1.10. 


/ 



14. SUBJECT TERMS Ada programming language, Ada Compiler Validation 
Summary Report, Ada Compiler Validation Capability, Validation 
Testing, Ada Validation Office, Ada Validation Facility, ANSI/MIL 
Ada Joint Program Office 


UNCLASSIFIED 


N8N7S4041-280-8600 



IS. NUMBER OF MGES 


IS. PRICE OOCE 


20. UMTTATCN OF ABSTRACT 




































AVF Control Number: AVF-VSR-AFN0R-89-09 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 

Certificate Number: 891102A1.10195 
Alsys 

AlsyCOMP_012, Version 5.1 

HP 9000 S 370 Host and Motorola MVME121 (68010) Target 


Completion of On-Site Testing: 
02 November 1989 


Prepared By: 

AFNOR 

Tour Europe 
Cedex 7 

F-92049 Paris la D6fense 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 











Ada Compiler Validation Summary Report: 

Compiler Name: AlsyCOMP_012, Version 5.1 
Certificate Number: 891102A1.10125 

Host: HP 9000 S 370 under HP-UX, Version 6.5 

Target: Motorola MVME121 (68010) with ARTK, Version 5.1 (bare machine) 
Testing Completed 02 November 1989 Using ACVC 1.10 
This report has been reviewed and is approved. 


-4- 




AFNOR 


Fabrice Gamier de Labareyre 
Tour Europe 
Cedex 7 

F-92049 Paris la Defense 


\-~TiJ *±±1- 

j 7 / _ 

Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 


2 


AVF-VSR-AFNOR-89-09 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT.4 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.5 

1.3 REFERENCES. 6 

1.4 DEFINITION OF TERMS.6 

1.5 ACVC TEST CLASSES.7 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.9 

2.2 IMPLEMENTATION CHARACTERISTICS.9 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.14 

3.2 SUMMARY OF TEST RESULTS BY CLASS.14 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.14 

3.4 WITHDRAWN TESTS.-.15 

3.5 INAPPLICABLE TESTS.15 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS.17 

3.7 ADDITIONAL TESTING INFORMATION.19 

3.7.1 Prevalidation.19 

3.7.2 Test Method.19 

3.7.3 Test Site.20 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B TEST PARAMETERS 

APPENDIX C WITHDRAWN TESTS 

APPENDIX D APPENDIX F OF THE Ada STANDARD 


3 


AVF-VSR-AFNOR-89-09 





















INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


^This Validation Summary Report —fVSK£. describes the extent to which a specific 
Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. This report 
explains all technical terms used within it and thoroughly reports the results 
of testing this compiler using the Ada Compiler Validation Capability (ACVC). An 
Ada compiler must be implemented according to the Ada Standard, and any 
implementation-dependent features must conform to the requirements of the Ada 
Standard. The Ada Standard must be implemented in its entirety, and nothing can 
be implemented that is not in the Standard.y 

Even though all validated Ada compilers conform to the Ada Standard, it must be 
understood that some differences do exist between implementations. The Aca 
Standard permits some implementation dependencies—for example, the maximum 
length of identifiers or the maximum values of integer types. Other differences 
between compilers result from the characteristics of particular operating 
systems, hardware, or implementation strategies. All the dependencies observed 
during the process of testing this compiler are given in this report. 


The information in this report is derived from the test results produced during 
validation testing. The validation process includes submitting a suite of 
standardized tests, the ACVC, as inputs to an Ada compiler and evaluating the 
results. The purpose of validating is to ensure conformity of the compiler to 
the Ada Standard by testing that the compiler properly implements legal language 
constructs and that it identifies and rejects illegal language constructs. The 
testing also identifies behavior that is implementation dependent, but is 
permitted by the Ada Standard. Six classes of tests are used. These tests are 
designed to perform checks at compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 



t . . A ' 
' - - • , ( ' , 


This VSR documents the results of the validation testing performed on an Ada 
compiler. Testing was carried out for the following purposes: 


4 


AVF-VSR-AFNOR-89-09 





INTRODUCTION 


To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

To attempt to identify any language constructs not supported by the 
compiler but required by the Ada Standard 

To determine that the implementation-dependent behavior is allowed by 
the Ada Standard 


Testing of this compiler was conducted by Alsys under the direction of the AVF 
according to procedures established by the Ada Joint Program Office and 
administered by the Ada Validation Organization (AVO). On-site testing was 
completed 02 November 1989 at Alsys SA, in La Celle Saint Cloud, FRANCE. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may make 
full and free public disclosure of this report. In the Unitt-d States, this is 
provided in accordance with the "Freedom of Information Act” (5 U.S.C. #552). 
The results of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are accurate 
and complete, or that the subject compiler has no nonconformities to the Ada 
Standard other than those presented. Copies of this report are available to the 
public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 

AFNOR 

Tour Europe 
cedex 7 

F-92049 Paris la Defense 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


5 


AVF-VSR-AFNOR-89-09 



INTRODUCTION 


1.3 REFERENCES 


1. Reference Manual for the Ada Programming Language . ANSI/MIL-STD-1815A, 
February 1983, and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and , Ada Joint Program Office, 

May 1989. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, Inc., 
December 1986. 


4. Ada Compiler Validation Capability User's Guide. January 1989 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada programs 

that tests the conformiv. of an Ada compiler to the Ada 
program. ?. 

Ada Commentary An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These comments 
are given a unique identification number having the form 
Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 

contained in the Ada Compiler Validation Procedures . 

AVO The Ada Validation Organization. The AVO has oversight authority 

over all AVF practices for the purpose of maintaining a uniform 
process for validation of Ada compilers. The AVO provides 
administrative and technical support for Ada validations to 
ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this report, 

a compiler is any language processor, including cross-compilers, 
translators, and interpreters. 

Failed test An ACVC test for which Ihe compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable test An ACVC test that uses features of the language that a 
compiler is not required to support or may legitimately support 
in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected result. 

Target The computer which executes the code generated by the compiler. 


6 


AVF-VSR-AFNOR-89-09 










INTRODUCTION 


Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more files. 

Withdrawn An ACVC test found to be incorrect and not used to check test 

conformity to the Ada Standard. A test may be incorrect because 
it has an invalid test objective, fails to meet its test 
objective, or contains illegal or erroneous use of the language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC contains 
both legal and illegal Ada programs structured into six test classes: A, B, C, 
D, E, and L. The first letter of a test name identifies the class to which it 
belongs. Class A, C, D, and E tests are executable, and special program units 
are used to report their results during execution. Class B tests are expected to 
produce compilation errors. Class L tests are expected to produce errors because 
of the way in which a program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run time. 
There are no explicit program components in a Class A test to check semantics. 
For example, a Class A test checks that reserved words of another language 
(other than those already reserved in the Ada language) are not treated as 
reserved words by an Ada compiler. A Class A test is passed if no errors are 
detected at compile time and the program executes to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the resulting 
compilation listing is examined to verify that every syntax or semantic error in 
the test is detected. A Class B test is passed if every illegal construct that 
it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs can be 
correctly compiled and executed. Each Class C test is self-checking and produces 
a PASSED, FAILED, or NOT APPLICABLE message indicating the result when it is 
executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers permitted 
in a compilation or the number of units in a library—a compiler may refuse to 
compile a Class D test and still be a conforming compiler. Therefore, if a Class 
D test fails to compile because the capacity of the compiler is exceeded, the 
test is classified as inapplicable. If a Class D test compiles successfully, it 
is self—hecking and produces a PASSED or FAILED message during execution. 


7 


AVF-VSR-AFNOR-89-09 






INTRODUCTION 


Class E tests are expected to execute successfully and check implementation- 
dependent options and resolutions of ambiguities in the Ada Standard. Each Class 
E test is self-checking and produces a NOT APPLICABLE, PASSED, or FAILED message 
when it is compiled and executed. However, the Ada Standard permits an 
implementation to reject programs containing some features addressed by Class E 
tests during compilation. Therefore, a Class E test is passed by a compiler if 
it is compiled successfully and executes to produce a PASSED message, or if it 
is rejected by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving multiple, 
separately compiled units are detected and not allowed to execute. Class L tests 
are compiled separately and execution is attempted. A Class L test passes if it 
is rejected at link time—that is, an attempt to execute the main program must 
generate an error message before any declarations in the main program or any 
units referenced by the main program are elaborated. In some cases, an 
implementation may legitimately detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support the 
self-checking features of the executable tests. The package REPORT provides the 
mechanism by which executable tests report PASSED, FAILED, or NOT APPLICABLE 
results. It also provides a set of identity functions used to defeat some 
compiler optimizations allowed by the Ada Standard that would circumvent a test 
objective. The procedure CHECK_FILE is used to check the contents of text files 
written by some of the Class C tests for Chapter 14 of the Ada Standard. The 
operation of REPORT and CHECK_FILE is checked by a set of executable tests. 
These tests produce messages that are examined to verify that the units are 
operating correctly. If these units are not operating correctly, then the 
validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For example, 
the tests make use of only the basic set of 55 characters, contain lines with a 
maximum length of 72 characters, use small numeric values, and place features 
that may not be supported by all implementations in separate tests. However, 
some tests contain values that require the test to be customized according to 
implementation-specific values—for example, an illegal file name. A list of the 
values used for this validation is provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and demonstrate 
conformity to the Ada Standard by either meeting the pass criteria given for the 
test or by showing that the test is inapplicable to the implementation. The 
applicability of a test to an implementation is considered each time the 
implementation is validated. A test that is inapplicable for one validation is 
not necessarily inapplicable for a subsequent validation. Any test that was 
determined to contain an illegal language construct or an erroneous language 
construct is withdrawn from the ACVC and, therefore, is not used in testing a 
compiler. The tests withdrawn at the time of this validation are given in 
Appendix D. 


8 


AVF-VSR-AFNOR-89-09 







CONFIGURATION INFORMATION 


CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: AlsyCOMP_012, Version 5.1 
ACVC Version: 1.10 
Certificate Number: 891102A1.10195 
Host Computer: 

Machine: HP 9000 S 370 

Operating System: HP-UX, Version 6.5 

Memory Size: 8 Mb 


Target Computer: 

Machine: 

Board: Motorola MVME121 (68010) 

CPU: Motorola MC68010 

Bus: VME 

1/0: Motorola MPCC68560 

Timer: Motorola MC68901 

Run-Time System: ARTK, Version 5.1 

Memory Size: 1 Mb 

Communications Network: RS 232 serial connection 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of a 
compiler in those areas of the Ada Standard that permit implementations to 
differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


9 


AVF-VSR-AFNOR-89-09 






CONFIGURATION INFORMATION 


a. Capacities. 

(1) The compiler correctly processes a compilation containing 723 

variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop statements 
nested to 65 levels. (See tests D55A03A..H (8 tests).) 

(3) The compiler correctly processes a test containing block statements 
nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 

procedures separately compiled as subunits nested to 17 levels. (See 
tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types, 
SHORT_INTEGER, LONG_INTEGER, LONG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 


c. Based literals. 

(1) An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINTJERROR when a value exceeds SYSTEM.MAX_INT . This implemen¬ 
tation raises CONSTRAINT_ERROR during execution. (See test E24201A.) 


d. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While the ACVC 
tests do not specifically attempt to determine the order of evaluation of 
expressions, test results indicate the following: 


(1) Apparently no default initialization expressions for record 

components are evaluated before any value is checked to belong to a 
component's subtype. (See test C32117A.) 

(2) Assignments for suctypes are performed with the same precision as the 
base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision. This 

implementation uses all extra bits for extra range. (See test 

C35903A.) 

(4) NUMERIC_ERROR is raised when an integer literal operand in a 

comparison or membership test is outside the range of the base type. 
(See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a fixed-point 
comparison or membership test is outside the range of the base type. 
(See test C45252A.) 

(6) Underflow is not gradual. (See tests C45524A..Z.) (26 tests) 


10 


AVF-VSR-AFNOR-89-09 







CONFIGURATION INFORMATION 


e. Rounding. 

The method by which values are rounded in type conversions is not defined by 
the language. While the ACVC tests do not specifically attempt to determine 
the method of rounding, the test results indicate the following: 


(1) The method used for rounding to integer is apparently round to even. 
(See tests C46012A..Z.) (26 tests) 

(2) The method used for rounding to longest integer is apparently round 
to even. (See tests C46012A..Z.) (26 tests) 

(3) The method used for rounding to integer in static universal real 
expressions is apparently round to even. (See test C4A014A.) 


f. Array types. 

An implementation is allowed _aise NUMERIC_ERROR or C0NSTRA1. 3RROR for 
an array having a 'LENGTH that exceeds STANDARD.INTEGER'LA.' * 

SYSTEM.MAX_INT. For this implementation: 

(1) Declaration of an array type or subtype declaration with more than 
SYSTEM.MAX_INT components raises CONSTRAINT_ERROR . (See test 
C36003A.) 

(2) CONSTRAINT_ERROR is raised when ’LENGTH is applied to an array type 
with INTEGER’LAST + 2 components. (See test C36202A./ 

(3) CONSTRAINT_ERROR is raised when an array type with SYSTEM.MAX_INT + 2 
components is declared. (See test C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST raises 
no exception. (See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than INTEGER'LAST 
components raises CONSTRAINT_ERROR when the length of a dimension is 
calculated and exceeds INTEGER'LAST. (See test C52104Y.) 

(6) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised when 
checking whether the expression's subtype is compatible with the 
target's subtype. (See test C52013A.) 

(7) In assigning two-dimensional array types, the expression is not 
appear evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible with the 
target's subtype. (See test C52013A.) 


g. A null array with one dimension of length greater than INTEGER'LAST may 
raise NUMERIC_ERROR or CONSTRAINT_ERROR either when declared or assigned. 
Alternatively, an implementation may accept the declaration. However, 
lengths must match in array slice assignments. This implementation raises no 
exception. (See test E52103Y.) 


11 


AVF-VSR-AFNOR-89-09 








CONFIGURATION INFORMATION 


h. Discriminated types. 

(1) In assigning record types with discriminants, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised when 
checking whether the expression's subtype is compatible with the 
target's subtype. (See test C52013A.) 


i. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all choices 
appear to be evaluated before checking against the index type. (See 
tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, not all 
choices are evaluated before being checked for identical bounds. (See 
test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated when a 
bound in a non-null range of a non-null aggregate does not belong to 
an index subtype. (See test E43211B.) 


j. Pragmas. 

(1) The pragma INLINE is supported for functions or procedures, but not 
functions called inside a package specification. (See tests 
LA3004A..B, EA3004C..D, and CA3004E..F.) 


k. Generics. 

(1) Generic specifications and bodies can be compiled in separate 

compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, and 

BC3205D.) 

(2) Generic subprogram declarations and bodies can be compiled in 
separate compilations. (See tests CA1012A and CA2009F.) 

(3) Generic library subprogram specifications and bodies can be compiled 
in separate compilations. (See test CA1012A.) 

(4) Generic non-library package bodies as subunits can be compiled in 
separate compilations. (See test CA2009C.) 

(5) Generic non-library subprogram bodies can be compiled in separate 
compilations from their stubs. (See test CA2009F.) 

(6) Generic unit bodies and their subunits can be compiled in separate 
compilations. (See test CA3011A.) 

(7) Generic package declarations and bodies can be compiled in separate 
compilations. (See tests CA2009C, BC3204C, and BC3205D.) 

(8) Generic library package specifications and bodies can be compiled in 
separate compilations. (See tests BC3204C and BC3205D.) 


12 


AVF-VSR-AFNOR-89-09 










CONFIGURATION INFORMATION 


(9) Generic unit bodies and their subunits can be compiled in separate 
compilations. (See test CA3011A.) 


Input and output. 

(3) Th director, AJPO, has determined (AI-00332) that every call to OPEN 
and CREATE must raise USE_ERR0R or NAME_ERROR if file input/output is 
not supported. This implementation exhibits this behavior for 
SEQUENTIAL_IO, DIRECT_IO, and TEXT_IO. 


13 


AVF-VSR-AFNOR-89-09 








TEST INFORMATION 


CHAPTER 3 

TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was tested, 44 
tests had been withdrawn because of test errors. The AVF determined that 538 
tests were inapplicable to this implementation. All inapplicable tests were 
processed during validation testing except for 201 executable tests that use 
floating-point precision exceeding that supported by the implementation. 
Modifications to the code, processing, or grading for 54 tests were required. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable conformity to 
the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT TEST CLASS TOTAL 



A 

B 

C 

D 

E 

L 


Passed 

129 

1133 

1794 

17 

16 

46 

3135 

Inapplicable 

0 

5 

521 

0 

12 

0 

538 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

555 

248 

172 

99 

161 

332 

137 

36 

252 

292 

76 

3135 

Inappl 

14 

72 

125 

0 

0 

0 

5 

0 

0 

0 

0 

77 

245 

538 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


14 


AVF-VSR-AFNOR-89-Oy 













TEST INFORMATION 


3.4 WITHDRAWN TESTS 


The following 44 tests were withdrawn from ACVC Version 1.10 at the time of this 
validation: 


A39005G 

B97102E 

BC3009B 

C97116A 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2D11B 

CD2B15C 

CD5007B 

CD50110 

CD7105A 

CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 

CE3411B 

E28005C 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 



See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 538 tests were inapplicable for the reasons indicated: 


The following 201 tests are not applicable because they have floating-point 
type declarations requiring more digits than System.Max_Digits: 


C24113L..Y (14 
C35706L..Y (14 
C35708L..Y (14 
C45241L..Y (14 
C45421L..Y C4 
C45524L..Z (15 
C45641L..Y (14 


tests) C35705L 
tests) C35707L 
tests) C35802L 
tests) C45321L 
tests) C45521L 
tests) C45621L 
tests) C46012L 


..Y (14 tests) 
..Y (14 tests) 
..Z (15 tests) 
..Y (14 tests) 
..Z (15 tests) 
..Z (15 tests) 
..Z (15 tests) 


C35702A and B86001T are not applicable because this implementation supports 
no predefined type Short_Float. 

C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable because 
the value of System.Max_Mantissa is less than 32. 

C86001F, is not applicable because recompilation of Package SYSTEM is not 
allowed. 


B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a name 
other than Integer, Long_Integer, or Short_Integer. 

B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than Duration. 

B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than Float, Long_Float, or 
Short Float. 


15 


AVF-VSR-AFNOR-89-09 






TEST INFORMATION 


BD5006D is not applicable because address clause for packages is not 
supported by this implementation. 

The following 10 tests are not applicable because size clause on float is 
not supported by this implementation: 

CD1009C CD2A41A..B (2 tests) 

CD2A41E CD2A42A..B (2 tests) 

CD2A42E..F (2 tests) CD2A42I..J (2 tests) 

CD2A84B..I (8 tests), CD2A84K..L (2 tests) are not applicable because size 
clause on access type is not supported by this implementation. 

CD2A42C..D (2 tests), CD2A42G..H (2 tests) are not applicable because the 
only size that can be specified for a floating point type or first named 
subtype using a size specification is its usual size (32 or 64 bits). 

The following 29 tests are not applicable because of the way this 
implementation allocates storage space for one component, size 
specification clause for an array type or for a record type requires 
compression of the storage space needed for all the components (without 
gaps). 

CD2A61A..D (4 tests) CD2A61F 

CD2A61H..L (5 tests) CD2A62A..C (3 tests) 

CD2A71A..D (4 tests) CD2A72A..D (4 tests) 

CD2A74A..D (4 tests) CD2A75A..D (4 tests) 

CD4041A is not applicable because alignment "at mod 8" is not supported by 
this implementation. 

The following 21 tests are not applicable because address clause for a 
constant is not supported by this implementation: 

CD5011B,D,F,H,L,N,R (7 tests) CD5012C,D,G,H,L (5 tests) 
CD5013B,D,F,H,L,N,R (7 tests) CD5014U,V (2 tests) 

CE2103A is not applicable because USE_ERROR is raised on a CREATE of an 

instantiation of SEQUENTIAL_IO with an ILLEGAL EXTERNAL FILE NAME. 

CE2103B is not applicable because USE_ERROR is raised on a CREATE of an 

instantiation of DIRECT_I0 with an ILLEGAL EXTERNAL FILE NAME. 

CE3107A is not applicable because USE_ERROR is raised on a CREATE of a file 
of type TEXT_IO.FILE_TYPE with an ILLEGAL EXTERNAL FILE NAME. 

The following 242 tests are inapplicable because sequential, text, and 
direct access files are not supported: 

CE2102A..C (3 tests) CE2102G..H (2 tests) 

CE2102K CE2102N..Y (12 tests) 

CE2103C..D (2 tests) CE2104A..D (4 tests) 

CE2105A..B (2 tests) CE2106A..B (2 tests) 

CE2107A..H (8 tests) CE2107L 

CE2108A..H (8 tests) CE2109A..C (3 tests) 

CE2110A..D (4 tests) CE2111A..I (9 tests) 

CE2115A..B (2 tests) CE2201A..C (3 tests) 

EE2201D..E (2 tests) CE2201F..N (9 tests) 

CE2204A..D (4 tests) CE2205A 

CE2208B CE2401A..C (3 tests) 


16 


AVF-VSR-AFNOR-89-09 


TEST INFORMATION 


EE2401D 



EE2401G 



CE2401E..F 

(2 

tests) 

CE2401H..L 

(5 

tests) 

CE2404A..B 

(2 

tests) 

CE2405B 



CE2406A 



CE2407A..B 

(2 

tests) 

CE2408A..B 

(2 

tests) 

CE2409A..B 

(2 

tests) 

CE2410A..B 

(2 

tests) 

CE2411A 



CE3102A..B 

(2 

tests) 

EE3102C 



CE3102F..H 

(3 

tests) 

CE3102J..K 

(2 

tests) 

CE3103A 



CE3104A..C 

(3 

tests) 

CE3107B 



CE3108A..B 

(2 

tests) 

CE3109A 



CE3110A 



CE3111A..B 

(2 

tests) 

<-11D. .E 

(2 

tes* 

CE3112A..D 

(4 

tests) 

CE3114A..B 

(2 

tests) 

CE3115A 



EE3203A 



CE3208A 



EE3301B 



CE3302A 



CE3305A 



CE3402A 



EE3402B 



CE3402C..D 

(2 

tests) 

CE3403A..C 

(3 

tests) 

CE3403E..F 

(2 

tests) 

CE3404B..D 

(3 

tests) 

CE3405A 



EE3405B 



CE3405C..D 

(2 

tests) 

CE3406A..D 

(4 

tests) 

CE3407A..C 

(3 

tests) 

CE3408A..C 

(3 

tests) 

CE3409A 



CE3409C..E 

(3 

tests) 

EE3409F 



CE3410A 



CE3410C..E 

(3 

tests) 

EE3410F 



CE3411A 



CE3411C 



CE3412A 






EE3412C 



CE3413A 



CE3413C 



CE3602A..D 

(4 

tests) 

CE3603A 



CE3604A..B 

(2 

tests) 

CE3605A..E 

(5 

tests) 

CE3606A..B 

(2 

tests) 

CE3704A..F 

(6 

tests) 

CE3704M..0 

(3 

tests) 

CE3706D 



CE3706F..G 

(2 

tests) 

CE3804A.-P 

(16 

i tests) 

CE3805A..B 

(2 

tests) 

CE3806A..B 

(2 

tests) 

CE3806D..E 

(2 

tests) 

CE3806G..H 

(2 

tests) 

CE3905A..C 

(3 

tests) 

CE3905L 



CE3906A..C 

(3 

tests) 

CE3906E..F 

(2 

tests) 





3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 


17 


AVF-VSR-AFNOR-89-09 







TEST INFORMATION 


Modifications were required for 54 tests. 

The following 27 tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

B23004A B24007A B24009A B28003A B32202A B32202B B32202C B33001A B36307A B37004A 

B49003A B49005A B61012A B62001B B74304B B74304C B74401F B74401R B91004A B95032A 

B95069A B95069B BA1101B BC2001D BC3009A BC3009C BD5005B 

The following 21 tests were split in order to show that the compiler was able to 
find the representation clause indicated by the comment 
--N/A =>ERROR : 

CD2A61A CD2A61B CD2A61F CD2A61I CD2A61J CD2A62A CD2A62B CD2A71A CD2A71B CD2A72A 

CD2A72B CD2A75A CD2A75B CD2A84B CD2A84C CD2A84D CD2A84E CD2A84F CD2A84G CD2A84H 

CD2A84I 

The test EA3004D when run as it is, the implementation fails to detect an error 
on line 27 of test file EA3004D6M (line 115 of "cat -n ea3004d*"). This is 
because the pragma INLINE has no effect when its object is within a package 
specification. However, the results of running the test as it is does not 
confirm that the pragma had no effect, only that the package was not made 
obsolete. By re-ordering the compilations so that the two subprograms are 
compiled after file D5 (the re-compilation of the "with"ed package that makes 
the various earlier units obsolete), we create a test that shows that indeed 
pragma INLINE has no effect when applied to a subprogram that is called within a 
package specification: the test then executes and produces the expected 
NOT_APPLICABLE result (as though INLINE were not supported at all). The 
re-ordering of EA3004D test files is 0-1-4-5-2-3-6. 

BA2001E requires that duplicate names of subunits with a common ancestor be 
detected and rejected at compile time. This implementation detects the error at 
link time, and the AVO ruled that this behavior is acceptable. 

Modified version was produced for C87B62B, in order to have the test run to 
completion and fully exhibit the test behavior: 

An explicit STORAGE_SIZE clause was added for the access type declared at line 
68. This allows the test to execute without raising STORAGE_ERROR and to meet 
its objective (test overloading resolution in expression within length clause). 
The test then produces the expected PASSED result. 

Modified versions were produced for CD2C11A and CD2C11B, in order to have the 
test run to completion and fully exhibit the test behavior: 

Because the given STORAGE_SIZE is too small for the implementation, the length 
clause was changed from 1024 to 4096 at line 43 and 46, respectively, . The same 
change was made also at line 95 a..d 98 on the identity function IDENT_INT. This 
allows the test to execute without raising STORAGE_ERROR and to meet its 
objective (test if a task storage size specification can be given for a task 
type). The test then produces the expected PASSED result. 

Modified version was produced for CC1223A in order to have the test run to 
completion and fully exhibit the test behavior: 

This test uses an expression within a generic body that cause the test to raise 
an NUMERIC_OVERFLOW unexpected exception at line 262. The expression 
"2**T'MANTISSA -1” on line 262 was changed to the equivalent form 
"( 2**(T'MANTISSA-l)-1 + 2**(T'MANTISSA-l) )" in order to avoid generating the 

exception-raising value 2**31. The test then produces the expected PASSED 
result. 


18 


AVF-VSR-AFNOR-89-Q9 






TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
AlsyCOMP_012, Version 5.1 compiler was submitted to the AVF by the applicant for 
review. Analysis of these results demonstrated that the compiler successfully 
passed all applicable tests, and the compiler exhibited the expected behavior on 
all inapplicable tests. 


3.7.2 Test Method 


Testing of the AlsyCOMP_012, Version 5.1 compiler using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in which 
the testing was performed is described by the following designations of hardware 
and software components: 


Host computer: 

Host operating system: 
Target computer: 
Compiler: 

Pre-linker: 

Linker: 

Loader/Downloader: 
Target Run-Time System: 


HP 9000 S 370 
HP-UX, Version 6.5 
Motorola MVME121 (68010) 
AlsyCOMP_012, Version 5.1 
built-in and Alsys proprietary 
Microtec Research Lod68K v6.4 
built-in and Alsys proprietary 
ARTK, Version 5.1 


The host and target computers were linked via RS 232 serial connection. 


A data cartridge containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the data cartridge. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the data cartridge. 


The contents of the data cartridge were not loaded directly onto the host 
computer. The loading was made using a network composed of Ethernet and NFS. 

After the test files were loaded to disk, the full set of tests was compiled 
and linked on the HP 9000 S 370, then all executable images were transferred to 
the Motorola MVME121 (68010) via RS 232 serial connection and run. Results were 
printed from the host computer. 

The compiler was tested using command scripts provided by Alsys and reviewed by 
the validation team. The compiler was tested using all default option settings 
except for the following: 

OPTION EFFECT 

CALLS=INLINED Allow inline insertion of code for subprograms and take 

pragma INLINE into account 

REDUCTION=PARTIAL Perform some high level optimizations on checks and loops 


19 


AVF-VSR-AFNOR-89-09 


TEST INFORMATION 


REDUCTION=PARTIAL Perform some high level optimizations on checks and loops 
OBJECT=PEEPHOLE Local optimization during code generation is made. 
GEN£RICS=INLINED Generics are inlined 

EXPRESSION=PARTIAL Perform some low level optimizations on common subexpressions 

and register allocation 

FLOAT=SOFTWARE Use a software emulation for floating point operations. 


Tests were compiled, linked, and executed (as appropriate) using a single host 
and target computer. Test output, compilation listings, and job logs were 
captured on data cartridge and archived at the AVF. The listings examined on¬ 
site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Alsys SA, in La Celle Saint Cloud, FRANCE and was 
completed on 02 November 1989. 


20 


AVF-VSR-AFNOR-89-09 




TEST INFORMATION 


APPENDIX A 

DECLARATION OF CONFORMANCE 


Alsys has submitted the following Declaration of Conformance 
concerning the AlsyCOMP_012, Version 5.1 compiler. 


21 


AVF-VSR-AFNOR-89-09 





DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 
Compiler Implementor: Alsys 

Ada Validation Facility:. AFNOR, Tour Europe Cedex 7, 

F-92080 Paris la Defense 

Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

Base Compiler Name: AlsyCOMP_012, Version 5.1 

Host Architecture: HP 9000 S 370 

Host OS and Version: HP-UX, Version 6.5 

Target Architecture: Motorola MVME121 (68010) 

Target OS and Version: ARTK, Version 5.1 (bare machine) 

Implementor's Declaration 

I, the undersigned, representing Alsys, have implemented no deliberate 
extensions to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) 
listed in this declaration. I declare that Alsys is the owner of record of the 
Ada language compiler(s) listed above and, as such, is responsible for 
maintaining- said compiler(s) in conformance to ANSI/MIL-STD-1815A. All 
certificates and registrations for Ada language compiler(s) listed in this 
declaration shall be made only in the owner's corporate name. 


_'__ Date: 

Alsys 

Etienne Morel, Managing Director 


Owner's Declaration 

I, the undersigned, representing Alsys, take full responsibility for 
implementation and maintenance of the Ada compiler(s) listed above, and agree to 
the public disclosure of the final Validation Summary Report. I declare that all 
of the Ada language compilers listed, and their host/target performance, are in 
compliance with the Ada Language Standard ANSI/MIL-STD-1815A. 


_ Date: 

Alsys 

Etienne Morel, Managing Director 


22 






TEST PARAMETERS 


APPENDIX B 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such as 
the maximum length of an input line and invalid file names. A test that makes 
use of such values is identified by the extension .TST in its file name. Actual 
values to be substituted are represented by names that begin with a dollar sign. 
A value must be substituted for each of these names before the test is run. The 
values used for this validation are given below. 


Name and Meaning Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (254 * 'A') & ’1' 

Identifier the size of the 
maximum input line length 
with varying last character. 

$BIG_ID2 (254 * ’A) & '2' 

Identifier the size of the 
maximum input line length 
with varying last character. 

$BIG_ID3 (126 * 'A') & ’3' & (128 * 'A') 

Identifier the size of the 
maximum input line length 
with varying middle character. 

$BIG_ID4 (126 * 'A') & ’4’ & (128 * ’A’) 

Identifier the size of the 
maximum input line length 
with varying middle character. 


23 


AVF-VSR-AFNOR-89-09 








:?s 


Name and Meaning Value 


$BIG_INT_LIT (252 * ’O') & '298' 

An integer literal of value 
298 with enough leading zeroes 
so that it is the size of the 
maximum line length. 

$BIG_REAL_LIT (250 * ’O’) & ’690.0’ 

A universal real literal of 
value 690.0 with enough 
leading zeroes to be the size 
of the maximum line length. 

$BIG_STRING1 & (127 * ’A’) & ”” 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 & (127 * 'A') & '1'" 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image 
of BIG_ID1. 

SBLANKS (235 * ' ') 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 2147483647 

A universal integer literal whose 
value is TEXT_IO.COUNT’LAST. 

$DEFAULT_MEM_SIZE 2**32 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 8 

An integer literal whose value 
is SYSTEM.STORAGEJJNIT. 

$DEFAULT_SYS_NAME ARTK 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 2#1.0fE-31 

A real literal whose value is 
SYSTEM.FINE DELTA. 


24 


AVF-VSR-AFNOR-89-09 







TEST PARAMETERS 


Name and Meaning Value 


$FIELD_LAST 255 

A universal integer literal whose 
value is TEXT_IO.FIELD'LAST. 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME NO_SUCH_FLOAD_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT_FLOAT, or 
LONG_FLOAT. 

$GREATER_THAN_DURATION 100_000.0 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE. LAST 100_000_000.0 
A universal real literal that is 
greater than DURATION*BASE'LAST. 

$HIGH_PRIORITY 24 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 /'/*/f1 

An external file name specifying 
a non existent directory 

$ILLEGAL_EXTERNAL_FILE_NAME 2 /~/*/f2 

An external file name different 
from $ILLEGAL_EXTERNAL_FILE_NAME1 

SINTEGERJFIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 

$INTEGER_LAST 32767 

A universal integer literal 
whose value is INTEGER'LAST. 

SINTEGER_LAST_PLUS_1 32768 

A universal integer literal 
whose value is INTEGER*LAST + 1. 


25 


AVF-VSR-AFNOR-89-09 


V 








TEST PARAMETERS 


Name and Meaning 


Value 


$LESS_THAN_DURATION -100_000.0 

A universal real literal that 
lies between DURATION’BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -100_000_000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$LOW_PRIORITY 1 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 255 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INTJPLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL '2:' & (250 * 'O' 

A universal integer based 
literal whose value is 2:11: 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 

$MAX_LEN_REAL_BASED_LITERAL '16:' & (248 * 'C 

A universal real based literal 
whose value is 16: F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 


) & 'll: 


') & 'F.E:' 


26 


AVF-VSR-AFNOR-89-09 












TEST PARAMETERS 


Name and Meaning 


$MAX_STRING_LITERAL 
A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
NULL;" as the only statement in 
its body. 

SNAME 

T name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 
LONG_FLOAT, or LONG_INTEG£R. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit falls 
in the sign bit position of the 
representation for SYSTEM.MAX_INT 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma memory_size, other than 
DEFAULT_MEM_SIZE. If there is 
no other value, then use 
DEFAULT_MEM_SIZE. 

$NEW_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma storage_unit, other than 
DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 


Value 


& (253 * ’A’) & 


-2147483648 


32 


NO SUCH TYPE 


ARTK 


16#FFFFFFFE# 


2**32 


27 


AVF-VSR-AFNOR-89-09 







TEST PARAMETERS 


Name and Meaning 


$NEW_SYS_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one inout 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 


ARTK 


32 


28 


AVF-VSR-AFNOR-89-09 









WITHDRAWN TESTS 


APPENDIX C 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the Ada 
Standard. The following 44 tests had been withdrawn at the time of validation 
testing for the reasons indicated. A reference of the form Al-ddddd is to an Ada 
Commentary. 

E28005C 

This test expects that the string "— TOP OF PAGE. —63" of line 204 will 
appear at the top of the listing page due to a pragma PAGE in line 203; but 
line 203 contains text that follows the pragma, and it is this that must 
appear at the top of the page. 

A39005G 

This test unreasonably expects a component clause to pack an array component 
into a minimum size (line 30). 

B97102E 

This test contains an unitended illegality: a select statement contains a 
null statement at the place of a selective wait alternative (line 31). 

C97116A 

This test contains race conditions, and it assumes that guards are evaluated 
indivisibly. A conforming implementation may use interleaved execution in 
such a way that the evaluation of the guards at lines 50 & 54 and the execu¬ 
tion of task CHANGING_OF_THE_GUARD results in a call to REPORT.FAILED at one 
of lines 52 or 56. 

BC3009B 

This test wrongly expects that circular instantiations will be detected in 
several compilation units even though none of the units is illegal with re¬ 
spect to the units it depends on; by AI-00256, the illegality need not be 
detected until execution is attempted (line 95). 

CD2A62D 

This test wrongly requires that an array object's size be no greater than 10 
although its subtype's size was specified to be 40 (line 137). 

CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] 

These tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a derived sub¬ 
program (which implicitly converts them to the parent type (Ada standard 
3.4:14)). Additionally, they use the 'SIZE length clause and attribute, whose 
interpretation is considered problematic by the WG9 ARG. 

CD2A81G, CD2A83G, CD2A84N & M, & CD50110 [5 tests] 

These tests assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that simply tests for task termination; this is not the 
case, and the main program may loop indefinitely (lines 74, 85, 86 & 96, 86 & 
96, and 58, resp.). 


29 


AVF-VSR-AFNOR-89-09 








WITHDRAWN TESTS 


CD2B15C & CD7205C 

These tests expect that a 'STORAGE_SIZE length clause provides precise con¬ 
trol over the number of designated objects in a collection; the Ada standard 
13.2:15 allows that such control must not be expected. 

CD2D11B 

This test gives a SMALL representation clause for a derived fixed-point type 
(at line 30) that defines a set of model numbers that are not necessarily 
represented in the parent type; by Commentary AI-00099, all model numbers of 
a derived fixed-point type must be representable values of the parent type. 

CD5007B 

This test wrongly expects an implicitly declared subprogram to be at the the 
address that is specified for an unrelated subprogram (line 303). 

ED7004B, ED7005C 4 D, ED7006C & D [5 tests] 

These tests check various aspects of the use of the three SYSTEM pragmas; 
the AVO withdraws these tests as being inappropriate for validation. 

CD7105A 

This test requires that successive calls to CALENDAR.CLOCK change by at least 
SYSTEM.TICK; however, by Commentary AI-00201, it is only the expected 
frequency of change that must be at least SYSTEM.TICK—particular instances 
of change may be less (line 29). 

CD7203B, & CD7204B 

These tests use the 'SIZE length clause and attribute, whose interpretation 
is considered problematic by the WG9 ARG. 

CD7205D 

This test checks an invalid test objective: it treats the specification of 
storage to be reserved for a task's activation as though it were like the 
specification of storage for a collection. 

CE2107I 

This test requires that objects of two similar scalar types be distinguished 

when read from a file—DATA_ERROR is expected to be raised by an attempt to 

read one object as of the other type. However, it is not clear exactly how 
the Ada standard 14.2.4:4 is to be interpreted; thus, this test objective is 
not considered valid, (line 90) 

CE3111C 

This test requires certain behavior, when two files are associated with the 

same external file, that is not required by the Ada standard. 

CE3301A 

This test contains several calls to END_OF_LINE 4 END_OF_PAGE that have no 
oari-. -se calls were intended to specify a file, nor to refer to 

STANDARD_INPUT (lines 103, 107, 118, 132, 4 136). 

CE3411B 

This test requires that a text file's column number be set to COUNT’LAST in 
order to check that LAYOUT_ERROR is raised by a subsequent PUT operation. But 
the former operation will generally raise an exception due to a lack of 
available disk space, and the test would thus encumber validation testing. 


30 


AVF-VSR-AFNOR-89-09 



APPENDIX F OF THE Ada STANDARD 


APPENDIX D 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to implementation- 
dependent pragmas, to certain machine-dependent conventions as mentioned in 
chapter 13 of the Ada Standard, and to certain allowed restrictions on 
representation clauses. The implementation-dependent characteristics of the 
AlsyCOMP_012, Version 5.1 compiler, as described in this Appendix, are provided 
by Alsys. Unless specifically noted otherwise, references in this appendix are 
to compiler documentation and not to this report. Implementation-specific 
portions of the package STANDARD, which are not a part of Appendix F, are: 

package STANDARD is 


type SHORT_INTEGER is range -128 .. 127; 
type INTEGER is range -32_768 .. 32J767; 

type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 

type FLOAT is digits 6 range 
-2#1.111_1111_1111_1111_1111_1111#E+127 

2#1.111_1111_1111_1111_1111_1111#E+127; 

type LONG_FLOAT is digits 15 range 

-211.1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111#E1023 
2 #1.1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111#E1023; 
type DURATION is delta 2.0**(-14) range -86_400.0 .. 86_400.0; 

end STANDARD; 


31 


AVF-VSR-AFNOR-89-09 





Alsys Ada 


APPENDIX F 

for Cross Compilers to 680x0 


Alsys S-A. 

29, Avenue Lucien-Reni Duchesne 
78170 La Celle St. Cloud, France 


Alsys Inc. 

67 South Bedford Street 
Burlington, MA 01803-5152, U.S^A. 


Alsys Ltd 

Partridge House, Newtown Road 
Henley-on-Thames, 
Oxfordshire RG91EN, U.K. 






Copyright 1989 by Alsys 


All rights reserved. No part of this document may be reproduced in any form or by any 
means without permission in writing from Alsys. 


Printed: February 26,1990 

Alsys reserves the right to make changes in specifications and other information 
contained in this publication without prior notice. Consult Alsys to determine whether 
such changes have been made. 






TABLE OF CONTENTS 


1 INTERFACING THE LANGUAGE ADA WITH OTHER 


LANGUAGES 1 

2 IMPLEMENTATION-DEPENDENT PRAGMAS 3 

3 IMPLEMENTATION-DEPENDENT ATTRIBUTES 5 

4 PACKAGES SYSTEM AND STANDARD 6 

5 TYPE REPRESENTATION CLAUSES 10 

5.1 Enumeration Types 10 

5.2 Integer Types 11 

5.3 Floating Point Types 12 

5.4 Fixed Point Types 13 

5.5 Access Types 14 

5.6 Task Types 15 

5.7 Array Types 16 

5.8 Record Types 17 

6 ADDRESS CLAUSES 20 

6.1 Address Causes for Objects 20 

6.2 Address Causes for Program Units 20 

6.3 Address Causes for Entries 20 

7 UNCHECKED CONVERSIONS 21 

8 INPUT-OUTPUT CHARACTERISTICS 22 

22 


iii 


8.1 


Introduction 







8.2 The FORM Parameter 


23 




Section 1 


INTERFACING THE LANGUAGE ADA WITH OTHER 

LANGUAGES 


Programs written in Ada can interface with external subprograms written in another 
language, by use of the INTERFACE pragma. The format of the pragma is: 

pragma INTERFACE ( language_name , Ada_subprogram_name ) ; 

where the longue , e_name can be any of 

■ ASSEMBLER 

* C 

The convention used for C parameter passing should be compatible with most 
C standard compilers. 

The Adasubprogram jxame is the name by which the subprogram is known 
in Ada. For example, to call a subprogram known as FAST_FOURIER in 
Ada, written in C, the INTERFACE pragma is: 

pragma INTERFACE (C, FAST_FOUR IER); 

To relate the name used in Ada with the name used in the original language, 
the Alsys Ada compiler converts this name to lower case and truncates it to 
32 significant characters. 

To avoid naming conflict with routines of the Alsys Ada Executive, external 
routine names should not begin with the letters alsy (whether in lower or 
upper case or a combination of both). 

To allow the use of non-Ada naming conventions, such as special characters, 
or case sensitivity, an implementation-dependent pragma 
INTERFACE_NAMF. has been introduced: 

pragma INTERFACE_NAME ( Ada_subprogram_name, name_string ) ; 


1 








so that, for example. 


pragma INTERFACE_NAME (FAST_FOURIER, "fft"); 

will associate the FAST_FOURIER subprogram in Ada with the C 
subprogram fft. 

The pragma INTERFACE_NAME may be used anywhere in an Ada program where 
INTERFACE is allowed (see [13.9j). INTERFACE_NAME must occur after the 
corresponding pragma INTERFACE and within the same declarative part. 

For example: 


package SAMPLE LIB is 

function SAMPLE_DEVICE (X: INTEGER) return INTEGER; 
function PROCESS_SAMPLE (X: INTEGER) return INTEGER; 
private 

pragma INTERFACE (ASSEMBLER, SAMPLEDEVICE); 
pragma INTERFACE (C, PROCESS SAMPLE); 
pragma INTERFACE NAME (SAMPLE DEVICE, "devlO"); 
pragma INTERFACE_NAME (PROCESS_SAMPLE, 'sample'); 
end SAMPLE LIB; 






Section 2 


IMPLEMENTATION-DEPENDENT PRAGMAS 

Pragma INTERFACE 

This pragma has been described in detail in the previous section. 

Pragma IMPROVE and Pragma PACK 

These pragmas are discussed in detail in sections 5.7 and 5.8 on representation clauses 
for arrays and records. 

Note that packing of record types is done systematically by the compiler. The pragma 
pack will affect the mapping of each component onto storage. Each component will be 
allocated on the logical size of the subtype. 

Example: 

type R is 

record 

Cl: BOOLEAN; C2 : INTEGER range 1.. 10; 
end record; 
pragma PACK(R); 

— the attribute R’SIZE returns 5 

Pragma Indent 

This pragma is only used with the Alsys Reformatter, this tool offers the functionalities of 
a pretty-printer in an Ada environment. 

The pragma is placed in the source file and interpreted by the Reformatter, 
pragma INDENT(OFF) 

The Reformatter does not modify the source lines after the pragma, 
pragma INDENT(ON) 

The Reformatter resumes its action after the pragma. 


3 




Pragmas not Implemented 

The following pragmas are not implemented: 


CONTROLLED 

MEMORY_SIZE 

OPTIMIZE 

SHARED 

STORAGE_UNIT 

SYSTEM NAME 


4 





Section 3 


IMPLEMENTATION-DEPENDENT ATTRIBUTES 


In addition to the Representation Attributes of [13.7.2] and [13.7.3], there are four 
attributes which are listed under F.5 below, for use in record representation clauses. 


Limitations on the use of the attribute ADDRESS 

The attribute ADDRESS is implemented for all prefixes that have meaningful addresses. 
The following entities do not have meaningful addresses and will therefore cause a 
compilation error if used as prefix to ADDRESS: 

■ A constant that is implemented as an immediate value i.e., does not have any space 
allocated for it. 

■ A package specification that is not a library unit. 

■ A package body that is not a library unit or a subunit. 


5 






Section 4 


PACKAGES SYSTEM AND STANDARD 


This section contains information on two predefined library packages: 

■ a complete listing of the specification of the package SYSTEM 

■ a list of the implementation-dependent declarations in the package STANDARD. 


The package SYSTEM 

The specification of the predefined library package SYSTEM is as follows: 
package SYSTEM is 
-- Standard Ada definitions 
type NAME is (ARTK); 

SYSTEM_NAME : constant NAME :» ARTK; 

STORAGE_UNIT : constant :* 8 ; 

MEMORY SIZE : constant > 2**32 ; 

MIN_INT: constant :=-(2**31) ; 

MAX INT : constant >W*31 -1 ; 

MAX_DIGITS : constant := 15 ; 

MAX_MANTISSA : constant := 31 ; 

FINE_DELTA: constant :* 2#i.0#e-31 ; 

TICK : constant := 1.0 ; --unused 

- The real basic clock cycle depends on the current hardware 

- and corresponding board support package. 

type ADDRESS is private ; 

NULL_ADDRESS : constant ADDRESS ; 

subtype PRIORITY is INTEGER range 1..24 ; -- 1..248 for VRTX 


6 







ill I 


procedure COPY (FROM: ADDRESS; TO: ADDRESS;SIZE: NATURAL); 
-- Copies SIZE storage units. The result is undefined if the two areas 

— overlap. 

-- Direct memory access 

generic 

type ELEMENT_TYPE is private ; 
function FETCH (FROM : ADDRESS) return ELEMENT TYPE ; 

-- Returns the bit pattern stored at address FROM, as a value of the 

— specified ELEMENT_TYPE. This function is not implemented 

— for unconstrained array types. 

generic 

type ELEMENT_TYPE is private ; 
procedure STORE (INTO : ADDRESS ; OBJECT : ELEMENT TYPE) ; 
-- Stores the bit pattern representing the value of OBJECT, at 

— address INTO. This function is not implemented for 
-- unconstrained array types. 

end SYSTEM ; 


The package STANDARD 

The following are the implementation-dependent aspects of the package 
STANDARD: 


SHORT_INTEGER is range -( 2 ** 1 ) .. (2**7 -1); 
INTEGER is range -(2** 15) .. (2**15 -1); 
LONG_INTEGER is range -(2**31) .. (2**31 -1); 

FLOAT is digits 6 range 
-(2.0 - 2.0**(-23)) * 2.0**127 .. 

+(2.0 - 2.0**(-23)) * 2.0**127 ; 


8 



type LONG_FLOAT is digits 15 range 
-(2.0 - 2.0**(-51)) * 2.0**1023 .. 

+<2.0 - 2.0**(-51)) * 2.0**1023; 

type DURATION is delta 2.0**(-14) range -86_400.0 .. 86_400.0; 












Section 5 


TYPE REPRESENTATION CLAUSES 


The representation of an object is closely connected with its type. For this reason this 
section addresses successively the representation of enumeration, integer, floating point, 
fixed point, access, task, array and record types. For each class of type the representation 
of the corresponding objects is described. 


5.1 Enumeration Types 


Minimum size of an enumeration subtype 

The minimum size of an enumeration subtype is the minimum number of bits that is 
necessary for representing the internal codes of the subtype values in normal binary 
form. 


Size of an enumeration subtype 

When no size specification is applied to an enumeration type or first named subtype, the 
objects of that type or first named subtype are represented as signed machine integers. 

When a size specification is applied to an enumeration type, this enumeration type and 
each of its subtypes has the size specified by the length clause. 

The Alsys compiler fully implements size specifications. Nevertheless, as enumeration 
values are coded using integers, the specified length cannot be greater than 32 bits. 


Size of the objects of an enumeration subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of an enumeration subtype has the same size as its subtype. 


Alignment of an enumeration subtype 

An enumeration subtype is byte aligned if the size of the subtype is less than or equal to 8 
bits, it is otherwise even byte aligned. 


Address of an object of an enumeration subtype 

Provided its alignment is not constrained by a record representation clause or a pragma 
PACK, the address of an object of an enumeration subtype is even when its subtype is 
even byte aligned. 


5.2 Integer Types 

Minimum size of an integer subtype 

The minimum size of an integer subtype is the minimum number of bits that is necessary 
for representing the internal codes of the subtype values in normal binary form. 


Size of an integer subtype 

The sizes of the predefined integer types SHORT_INTEGER, INTEGER and 
LONG_INTEGER are respectively 8,16 and 32 bits. 

When no size specification is applied to an integer type or to its first named subtype (if 
any), its size and the size of any of its subtypes is the size of the predefined type from 
which it derives, directly or indirectly. 

When a size specification is applied to an integer type, this integer type and each of its 
subtypes has the size specified by the length clause. 

The Alsys compiler fully implements size specifications. Nevertheless, as integers are 
implemented using machine integers, the specified length cannot be greater than 32 bits. 


Size of the objects of an integer subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of an integer subtype has the same size as its subtype. 


11 




Alignment of an integer subtype 

An integer subtype is byte aligned if the size of the subtype is less than or equal to 8 bits, 
it is otherwise even byte aligned. 


Address of an object of an integer subtype 

Provided its alignment is not constrained by a record representation clause or a pragma 
PACK, the address of an object of an integer subtype is even when its subtype is even 
byte aligned. 


5 3 Floating Point Types 


Minimum size of a floating point subtype 

The minimum size of a floating point subtype is 32 bits if its base type is FLOAT or a 
type derived from FLOAT; it is 64 bits if its base type is LONGFLOAT or a type 
derived from LONG_FLOAT. 


Size of a floating point subtype 

The sizes of the predefined floating point types FLOAT and LONG FLOAT are 
respectively 32 and 64 bits. 

The size of a floating point type and the size of any of its subtypes is the size of the 
predefined type from which it derives directly or indirectly. 

The only size that can be specified for a floating point type or first named subtype using a 
size specification is its usual size (32 or 64 bits). 


Size of the objects of a floating point subtype 

An object of a floating point subtype has the same size as its subtype. 


12 



Alignment of a floating point subtype 
A floating point subtype is always even byte aligned. 


Address of an object of a floating point subtype 

Provided its alignment is not constrained by a record representation clause or a pragma 
PACK, the address of an object of a floating point subtype is always even, since its 
subtype is even byte aligned. 


5.4 Fixed Point Types 


Minimum size of a fixed point subtype 

The minimum size of a fixed point subtype is the minimum number of binary digits that 
is necessary for representing the values of the range of the subtype using the small of the 
base type. 


Size of a fixed point subtype 

The sizes of the predefined fixed point types SHORT FIXED, FIXED and 
LONG FIXED are respectively 8,16 and 32 bits. 

When no size specification is applied to a fixed point type or to its first named subtype, 
its size and the size of any of its subtypes is the size of the predefined type from which it 
derives directly or indirectly. 

When a size specification is applied to a fixed point type, this fixed point type and each of 
its subtypes has the size specified by the length clause. 

The Alsys compiler fully implements size specifications. Nevertheless, as fixed point 
objects are represented using machine integers, the specified length cannot be greater 
than 32 bits. 


13 






Size of the objects of a fixed point subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of a fixed point type has the same size as its subtype. 


Alignment of a fixed point subtype 

A fixed point subtype is byte aligned if its size is less than or equal to 8 bits, and is 
otherwise even byte aligned. 

Address of an object of a fixed point subtype 

Provided its alignment is not constrained by a record representation clause or a pragma 
PACK the address of an object of a fixed point subtype is even when its subtype is even 
byte aligned. 


5.5 Access Types 


Minimum size of an access subtype 

The minimum size of an access subtype is 32 bits. 


Size of an access subtype 

The size of an access subtype is 32 bits, the same as its minimum size. 

The only size that can be specified for an access type using a size specification is its usual 
size (32 bits). 


Size of an object of an access subtype 

An object of an access subtype has the same size as its subtype, thus an object of an 
access subtype is always 32 bits long. 


14 





Alignment of an access subtype. 

An access subtype is always even byte aligned. 

Address of an object of an access subtype 

Provided its alignment is not constrained by a record representation clause or a pragma 
PACK, the address of an object of an access subtype is always even, since its subtype is 
even byte aligned. 

5.6 Task Types 

Storage for a task activation 

This attribute is described in the chapters 2 and 3 of the Application Developer’s Guide. 

Encoding of task values. 

Encoding of a task value is not described here. 

Minimum size of a task subtype 

The minimum size of a task subtype is 32 bits. 

Size of a task subtype 

The size of a task subtype is 32 bits, the same as its minimum size. 

A size specification has no effect on a task type. The only size that can be specified using 
such a length clause is its minimum size. 

Size of the objects of a task subtype 

An object of a task subtype has the same size as its subtype. Thus an object of a task 
subtype is always 32 bits long. 


15 














Alignment of a task subtype 

A task subtype is always even byte aligned. 


Address of an object of a task subtype 

Provided its alignment is not constrained by a record representation clause, the address 
of an object of a task subtype is always even, since its subtype is even byte aligned. 


5.7 Array Types 


Size of an array subtype 

The size of an array subtype is obtained by multiplying the number of its components by 
the sum of the size of the components and the size of the gaps (if any). If the subtype is 
unconstrained, the maximum number of components is considered. 

The size of an array subtype cannot be computed at compile time 

■ if it has non-static constraints or is an unconstrained array type with non-static 
index subtypes (because the number of components can then only be determined at 
run time). 

■ if the components are records or arrays and their constraints or the constraints of 
their subcomponents (if any) are not static (because the size of the components and 
the size of the gaps can then only be determined at run time). 

The consequence of packing an array type is thus to reduce its size. 

If the components of an array are records or arrays and their constraints or the 
constraints of their subcomponents (if any) are not static, the compiler ignores any 
pragma PACK applied to the array type but issues a warning message. Apart from this 
limitation, array packing is fully implemented by the Alsys compiler. 

A size specification applied to an array type or first named subtype has no effect. The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of an array is as expected by 
the application. 


16 



Size of the objects of an array subtype 

The size of an object of an array subtype is always equal to the size of the subtype of the 
object. 


Alignment of an array subtype 

If no pragma PACK applies to an array subtype and no size specification applies to its 
components, the arTay subtype is even byte aligned if the subtype of its components is 
even byte aligned. Otherwise it is byte aligned. 

If a pragma PACK applies to an array subtype or if a size specification applies to its 
components (so that there are no gaps), the alignment of the array subtype is as given in 
the following table: 



relative displacement of components 

even mntoer 
of bytes 

odd nunber 
of bytes 

not a whole 
muter of bytes 

Component 

subtype 

alignment 

even byte 

even byte 

byte 

bit 

byte 

byte 

byte 

bit 

bit 

bit 

bit 

bit 


Address of an object of an array subtype 

Provided its alignment is not constrained by a record representation clause, the address 
of an object of an array subtype is even when its subtype is even byte aligned. 


5.8 Record Types 


Size of a record subtype 

Unless a component clause specifies that a component of a record type has an offset or a 
size which cannot be expressed using storage units, the size of a record subtype is 
rounded up to the a whole number of storage units. 


17 
















The size of a constrained record subtype is obtained by adding the sizes of its 
components and the sizes of its gaps (if any). This size is not computed at compile time 

■ when the record subtype has non-static constraints, 

■ when a component is an array or a record and its size is not computed at compile 
time. 

The size of an unconstrained record subtype is obtained by adding the sizes of the 
components and the sizes of the gaps (if any) of its largest variant. If the size of a 
component or of a gap cannot be evaluated exactly at compile time an upper bound of 
this size is used by the compiler to compute the subtype size 

A size specification applied to a record type or first named subtype has no effect. The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of a record is as expected by 
the application. 


Size of an object of a record subtype 

An object of a constrained record subtype has the same size as its subtype. 

An object of an unconstrained record subtype has the same size as its subtype if this size 
is less than or equal to 8 kb. If the size of the subtype is greater than this, the object has 
the size necessary to store its current value; storage space is allocated and released as the 
discriminants of the record change. 


Alignment of a record subtype 

When no record representation clause applies to its base type, a record subtype is even 
byte aligned if it contains a component whose subtype is even byte aligned. Otherwise the 
record subtype is byte aligned. 

When a record representation clause that does not contain an alignment clause applies 
to its base type, a record subtype is even byte aligned if it contains a component whose 
subtype is even byte aligned and whose offset is a multiple of 16 bits. Otherwise the 
record subtype is byte aligned. 


18 





When a record representation clause that contains an alignment clause applies to its base 
type, a record subtype has an alignment that obeys the alignment clause An alignment 
clause can specify that a record type is byte aligned or even byte aligned. 


Address of an object of a record subtype 

Provided its alignment is not constrained by a representation clause, the address of an 
object of a record subtype is even when its subtype is even byte aligned. 


19 








Section 6 


ADDRESS CLAUSES 


6.1 Address Clauses for Objects 

An address clause can be used to specify an address for an object as described in RM 
13.5. When such a clause applies to an object no storage is allocated for it in the program 
generated by the compiler. The program accesses the object using the address specified 
in the clause. 

An address clause is not allowed for task objects, for unconstrained records whose size is 
greater than 8 kb. or for a constant. 


6.2 Address Clauses for Program Units 

Address clauses for program units are not implemented in the current version of the 
compiler. 


6.3 Address Clauses for Entries 

Address clauses are supported 


20 







Section 7 


UNCHECKED CONVERSIONS 

Unconstrained arrays are not allowed as target types. Unconstrained record 
types without defaulted discriminants are not allowed as target types. 

If the source and the target types are each scalar or access types, the sizes of 
the objects of the source and target types must be equal. 

If a composite type is used either as source type or as target type this 
restriction on the size does not apply. 

If the source and the target types are each of scalar or access type or if they 
are both of composite type, the effect of the function is to return the 
operand. 

In other cases the effect of unchecked conversion can be considered as a 
copy: 

■ if an unchecked conversion is achieved of a scalar or access source type 
to a composite target type, the result of the function is a copy of the 
source operand: the result has the size of the source. 

■ if an unchecked conversion is achieved of a composite source type to a 
scalar or access target type, the result of the function is a copy of the 
source operand: the result has the size of the target. 


21 



Section 8 


* 


* 


INPUT-OUTPUT CHARACTERISTICS 


In this part of the Appendix the implementation-specific aspects of the 
input-output system are described. 


8.1 Introduction 

In Ada, input-output operations (10) are considered to be performed on 
objects of a certain file type rather than being performed directly on external 
files. An external file is anything external to the program that can produce a 
value to be read or receive a value to be written. Values transferred for a 
given file must be all of one type. 

Generally, in Ada documentation, the term file refers to an object of a 
certain file type, whereas a physical manifestation is known as an external 
file. An external file is characterized by 

■ Its NAME, which is a string defining a legal path name under the 
current version of the operating system. 

■ Its FORM, which gives implementation-dependent information on file 
characteristics. 

Both the NAME and FORM appear explicitly in the Ada CREATE and 
OPEN procedures. Though a file is an object of a certain file type, ultimately 
the object has to correspond to an external file. Both CREATE and OPEN 
associate a NAME of an external file (of a certain FORM) with a program 
file object. 

Ada 10 operations are provided by means of standard packages [14], 

SEQUENTIALJO A generic package for sequential files of a single 

element type. 

directjo A generic package for direct (random) access files. 






text_io A generic package for human-readable (text, ASCII) 

files. 

Io_EXCEPTIONS A package which defines the exceptions needed by the 

above three packages. 

The generic package LOW_LE VEL_IO is not implemented in this version. 

The upper bound for index values in DIRECT_IO and for line, column and 
page numbers in TEXT_IO is given by 

COUNTLAST = 2**31 -1 

The upper bound for fields widths in TEXT_IO is given by 
FIELD’LAST - 255 

8.2 The FORM Parameter 

The FORM parameter to both the CREATE and OPEN procedures in Ada 
specifies the characteristics of the external file involved. 

The CREATE procedure establishes a new external file, of a given NAME 
and FORM, and associates it with a specified program FILE object. The 
external file is created (and the FILE object set) with a certain file MODE. If 
the external file already exists, the file will be erased. The exception 
USE_ERROR is raised if the file mode is IN_FILE. 

The OPEN procedure associates an existing external file, of a given NAME 
and FORM, with a specified program FILE object. The procedure also sets 
the current FILE mode. If there is an inadmissible change of MODE, then an 
Ada USE_ERROR is raised. 

The FORM parameter is a string, formed from a list of attributes, with 
attributes separated by commas (,). The string is not case sensitive (so that, 
for example, HERE and here are treated alike). The attributes specify: 

■ File sharing 

■ File structuring 

■ Buffering 


23 





I 


■ Appending 

The general form of any attribute is a keyword followed by => and then a qualifier. The 
qualifier may sometimes be omitted. The format for an attribute specifier is thus either 
of 


KEYWORD 

KEYWORD = > QUALIFIER 


24 








