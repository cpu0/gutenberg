



AD-A268 377 



US Army Information Systems Engineering Command 
Fort Huachuca, AZ 85613-5300 


U.S. ARMY INSTITUTE FOR RESEARCH 
IN MANAGEMENT INFORMATION, 
COMMUNICATIONS, AND COMPUTER SCIENCES 


SAMeDL: 

Technical Report Appendix C - 
Developmental Environment Test Plan 



DTIC 

electe ASQB-GI-92-016 

AUG IG 1993 i I 

A September 1992 


Thif document has been approved 
for public release and sole; its 
distribution is unlimited 


as 


AIRMICS 

115 O’Keefe Building 
Georgia Institute of Technology 
Atlanta, GA 30332-0800 


93-18743 

I mil mu mu mil lu,...... ■ w 









ECURITY CLASSIFICATION OF THIS PAGE 


REPORT DOCUMENTATION PAGE 


orm Approvea 
OMB No. 0704-0iaa 
Exp. Date: Jun 30. 1986 


. SECURITY CLASSIFICATION AUTHORITY 
N/A 


. DECLASSIFICATION/DOWNQRADINQ SCHEDULE 




PERFORMING ORGANIZATION REPORT NUMBER(S) 


3. DISTRIBUTION/AVAILABILITY OF REPORT 
N/A 


S. MONITORING ORGANIZATION REPORT NUMBER(S) 


N/A 


1 . NAME OF PERFORMING ORGANIZATION I 6b. OFFICE SYMBOL 7a. NAME OF MONITORING ORGANIZATION 

I (If applicable) 

I N/A 


I. ADDRESS (CKy. State, and Zip Code) 17b. ADDRESS (City, State, and ZIP Code) 


N/A 


9. PROCUREMENT INSTRUMENT IDENTIFICATION NUMBER 


10. SOURCE OF FUNDING NUMBERS 


PROGRAM 


PROJECT 

TASK 

NO. 

NO. 


I. NAME OF FUNDING/SPONSORING 
ORGANIZATION 

ioftware Technology Branch, ARL 


!. ADDRESS (City, State, and ZIP Code) 

115 O'Keefe Bldg. 

Georgia Institute of Technology 
Atlanta, GA 30332-0800 


I. TITLE (Include Security Classification) 

SAMeDL: Technical Report Appendix C - Development Environment Test Plan 


!. PERSONAL AUTHOR(S) 
MS. Deb Waterman 


Sa. TYPE OF REPORT 
Technical Paper 


S. SUPPLEMENTARY NOTATION 



13b. TIME COVERED 114. DATE OF REPORT {Year, Month, Dayi 15. PAGE COUNT 

FROM Apr 91 TO Sept 92 I sept 15, 1992 I 174 


COSATI CODES 


GROUP 


SUBGROUP 


18. SUBJECT TERMS (Continue on reverse if necessary and identify by block number) 

Ada Database Access, SAMeDL, Ada extension mod¬ 
ule, SQL 


). ABSTRACT (Continue on reverse If necessary and Identify by block number) 


This report details the research efforts into the SQL Ada Module Data¬ 
base Description Language (SAMeDL). Pour compilers are presented 
(Oracle, Informix, XDB, and Sybase) that allow Ada application programs 
to access database using a standard SQL query language. Copies of the 
compiler can be obtained from the DoD Ada Joint Program Office 
703/614-0209. 


3. DISTRIBUTION/AVAILABILITY OF ABSTRAC 
El UNCLASSIFIED/UNLIMITEDD same as RPT. □ DTIC USERS 






RACT SECURITY CLASSIFICATION 
UNCLASSIFIED 


LTC David S. Stevens 


D FORM 1473, 84 MAR 





AMSRL-CI-CD 


83 APR edition may be used until exhausted. 
All other editions are obsolete. 






























This research was performed by Statistica Inc., contract number DAKFll-91- 
C-0035, for the Army Institute for Research in Management Information, 
Communications, and Computer Sciences (AIRMICS), the RDTE organization of 
the U. S. Army Information Systems Engineering Command (USAISEC). This final 
report discusses a set of SAMeDL compilers and work enviomment that were devel¬ 
oped during the contract. Request for copies of the compiler can be obtained from 
the DoD Ada Joint Program Office, 703/614/0209. This research report is not to 
construed as an official Army or DoD Position, unless so designated by other 
authorized documents. Material included herein is approved for public release, 
distribution unlimited. Not protected by copyright laws. 


TfflS REPORT HAS BEEN REVIEWED AND IS APPROVED 



Glenn E. Racine, Chief 
Computer and Information 
Systems Division 








^ames D. Gantt, Ph.D. 
Director 
AIRMICS 


QUALITY IWSPE'JTKD 3 


Accesion For 


NTIS CRA&I 
DUG TAB 
Und'iiiOiJ.'ced 
J'Jatitication 





Avdilability Codes 


Dist 




Avail 3ii0/or 
Special 


□ □ 




SAMeOL.TR.10.15 Sep 92 


APPENDIX C 

SAMeDL Development Envlroxu&ent 
Test Plan 


C-1 


SAMeDL Development Environment 

Test Plan 


Intermetrics, Inc. 

Document IR-VA-014 

Date 03-March-1992 




Published by 
Intermetrics, Inc. 

733 Concord Avenue, Cambridge, Massachusetts 02138 
Copyright (c) 1992 by Intermetrics, Inc. 

This material may be reproduced by or for the U.S. Government pursuant to the copyright license 
under the clause at DEARS 252.227-7013 (Oct. 1988). 




Table Of Contents 


Chapter 1 About This Manual..... 1 

1.1 Puipose.1 

1.2 Organization.1 

1.3 References.1 

Chapter 2 Module Manager Testing PitKxdure .............................................................3 

2.1 sde.cle2^b.3 

2.2 sde.creatlib.3 

2.3 sde.creatar.4 

2.4 sde.ls.4 

2.5 sde.mkscript.5 

2.6 sde.purge. 5 

2.7 sde.rm.5 

2.8 sde.rmlib.6 

Chapter 3 Compiler Testing Procedure.................................^......................-......^7 

3.1 Introduction.7 

3.2 Correct Tests.7 

3.3 End-to-End Tests.7 

3.4 Error Tests.8 

Chapter 4 Compiler Testing Cross Reference-...............—.........— -9 

4.1 Diagram 1 

Correct Testing Cross Reference.10 

4.2 Diagram 2 

End-to-End Testing Cross Reference.13 

4.3 Diagram 3 

Error Testing Cross Refeence. 14 

Appendix A Compiler Test Suite Source Code— 15 

A. 1 Correct Tests.15 

A. 1.1 tl/ci.sme.15 

A.1.2 tl/cii.sme.15 

A.1.3 tl/ciii.sme.17 

A. 1.4 tl/civ.sme.19 

A. 1.5 tl/cv.sme. 23 

A. 1.6 tl/cvi.sme. 28 

A. 1.7 tl/cvii.sme.32 

A. 1.8 tl/cviii.sme.36 

A.1.9 tl/cix.sme.40 

A.1.10 tl/ctl.sme.44 

A.1.11 tl/ct2.sme.46 

A.1.12 tl/ct3.sme.47 

A. 1.13 tl/ct4.sme.59 

A. 1.14 tl/ct5.sme.60 

A.1.15 tl/ct6.sme.62 

A. 1.16 tl/ct7.sme.63 

A. 1.17 tl/ct8.sme.64 

A. 1.18 tl/ct9.sme.65 

A.1.19 tl/ctlO.sme.66 

















































A.1.20 tl/ctll.sme. 

A. 1.21 tl/ctl2.sme. 

A. 1.22 tl/ctl3.sme. 

A. 1.23 tl/ctl4.sme. 

A.1.24 tl/ctl5.sme. 

A.1.25 tl/ctl6.sme. 

A. 1.26 t3/tl.sme. 

A. 1.27 t3/t2.sme. 

A. 1.28 t3/t3.sme. 

A. 1.29 t3/t4.sme. 

A. 1.30 t3/t5.sme. 

A. 1.31 t3/t6.sme. 

A.1.32 t3/t7.sme. 

A. 1.33 t3/t8.sme. 

A. 1.34 t3/t9.snie. 

A. 1.35 t3/tl0.sine. 

A.1.36 t3/tll.snic. 

A.1.37 t3/tl2.sme. 

A. 1.38 t3/tl3.sine. 

A. 1.39 t3/tl4.sme. 

A. 2 End-to-End Tests. 

A.2.1 t2/t2.sme. 

A.2.2 t2/driver.a. 

A.2.3 t2Anitbank.sql. 

A.2.4 t2/miti.sql. 

A.3 Error Tests. 

A.3.1 tl/etl.sme. 

A.3.2 tl/et2.sme. 

A.3.3 tl/et3.sme. 

A.3.4 tl/et4.sme. 

A.3.5 tl/et5.sme.. 

A.3.6 tl/etO.smc. 

A.3.7 tl/et7.sme. 

A.3.8 tl/et8.sme.. 

A.3.9 tl/et9.sme. 

A.3.10 tl/etlO.sme.... 
A.3.11 tl/etll.sme.... 

A.3.12 tl/etl2.sme. 

A.3.13 t3/el.sme.. 

A.3.14 t3/e2.sme- 

A.3.15 t3/e3.sme. 


.66 

.67 

.68 

.70 

.72 

.75 

..77 

..81 

..82 

..83 

..87 

..90 

..91 

..93 

..94 

..96 

..97 

..99 

..99 

101 . 

101 

101 

114 

137 

138 
138 
138 
140 
140 
140 
142 

147 

148 
157 

159 

160 
161 
165 
168 
170 
.171 













































Chapter 1 About This Manual 

1.1 Purpose 

The purpose of this manual is to describe the test plan for the SAMeDL Development 
Environment (SDE), consisting of the SAMeDL compiler and the Module Manager. These tools 
and their features are documented in the SAMeDL Development Environment User Manual 
[User]. The language supported by the SAMeDL compiler is defined in the SAMeDL Language 
Reference Manual [LRM]. 

1.2 Organization 

The organization of this document is as follows: 

• Chapter 2, Module Manager Testing Procedure, outlines the testing process to be 
followed in testing the SDE Module Manager commands. 

• Chapter 3, Compiler Testing Procedure, contains an overview of the testing strategy 
to be followed for the SAMeDL compiler. 

• Chapter 4, Compiler Testing Cross Reference, provides a cross reference of compiler 
testing objectives (in terms of [LRM] section numbers) against test source files. 

• Appendix A, Compiler Test Suite Source Code, contains a listing of the source code 
files that comprise the SAMeDL compiler test suite. 

1.3 References 

1. [DSC]Daraf>ase5ysremCo/icepte, Korth and Silbcrschatz, McGraw-Hill, 1986. 

1. [LRM] SAMeDL Language Reference Ma/iua/, Intermetrics, Inc., IR-VA-011, 28 
February 1992. 

2. [SAMEGuide] Guidelines for the Use of the SAME, Marc Graham: Software 
Engineering Institute/Camegie Mellon University, Technical Report CMU/SEI-89- 
TR-16, May 1989. 

3. [User] SAMeDL Development Environment User Manual, Intermetrics, Inc., IR-VA- 
012,28 February 1992. 


Intermetrics, Inc. 


1 



Chapter 2 - Module Manager Testing Procedure 


Chapter 2 Module Manager Testing Procedure 

Testing of the Module Manager consists of invoking each of the commands (sde.cleanlib, 
sde.creatar, sde.creatlib, sde.ls, sde.mkscript, sde.purge, sde.rm, and sde.rmlib) in a variety 
of scenarios and manually inspecting the results. The process to be followed for each of the tools 
is outlined below. 

2.1 sde.cleanlib 

1. No arguments (i.e., default current directory). 

2. Pathname argument 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 

5. No samedl.lib directory in current directory and call with no arguments (error). 

6. No samedl.lib directory in specified pathname directory (error). 

7. On a locked library (simulate by creating ./samedl.lib/samedi.lock) (error). 

8. No permission to write in samedl.lib (error). 

9. No permission to write in the directory containing samedl.lib. (error). 

2.2 sde.creatlib 

1. No arguments (i.e., default current directory). 

2. Pathname argument 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 

5. samedl.lib directory already exists in current directory (error). 

6. samedl.lib directory already exists in specified directory (error). 

7. On a locked library (simulate by creating ./samedLlib/samedLlock) (error). 

8. No permission to write in samedl.lib (error). 

9. No permission to write in the directory where to create samedl.lib (error). 


Intermetrics, Inc. 


3 




SAMeDL Development Environment - Test Plan _ 

23 sde.creatar 

1. No arguments (error). 

2. Only archive name specified (error). 

3. Only archive name and non-abstract module name specified (error). 

4. Only archive name and abstract module name specified. 

5. Add library Pathname argument. 

6. Incorrect options (error). 

7. samedLlib directory does not exists in current directory (error). 

8. samedLlib directory does not exist in specified directory (error). 

9. On a locked library (simulate by creating ysamedl.lib/samedl.lock) (error). 

10. No permission to write in samedLlib (error). 

11. No permission to write in the directory where to create archive (error). 

12. Non-existent modules ( error). 

13. Specify multiple modules. 

2.4 sde.ls 

1. No arguments (i.e., default current directory). 

2. Pathname argument 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 

5. No samedLlib directory in current directory and call with no arguments (error). 

6. No samedLlib directory in specified pathname directory (error). 

7. On a locked library (simulate by creating ./samedl.lib/samedLlock) (error). 

8. No permission to write in samedLlib (error). 

9. No permission to write in the directory containing samedLlib (error). 

10. Different permutations of the -i -a and -v options (error). 

11. Multiple module names as arguments (error). 

12. Non-existent modules names as arguments (error). 


4 


Intermetrics, Inc. 




__ Chapter 2 - Module Manager Testing Procedure 

2.5 sde.mkscript 

1. No pathname argument (current directory default) + def/abs module name. 

2. Pathname argument + def/abs module name 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 

5. No samedl.lib directory in current directory and call with no arguments (error). 

6. No samedl.lib directory in speciAed pathname directory (error). 

7. On a locked librar> (simulate by creating ./samedl.lib/samedl.lock) (error). 

8. No permission to v/rite in samedl.lib (error). 

9. No permission to write in the directory containing samedl.lib (error). 

10. Multiple module names as arguments. 

11. Non-existent modules as arguments (error). 

2.6 sde.purge 

1. No arguments (i.e., default current directory). 

2. Pathname argument 

3. Incorrect number of arguments (error). 

4. Inconect options (error). 

5. No samedl.lib directory in current directory and call with no arguments (error). 

6. No samedl.lib directory in specified pathname directory (error). 

1. On a locked library (simulate by creating ./samedl.lib/samedl.lock) (error). 

8. No permission to 'Arite in samedl.lib (error). 

9. No permission to write in the directory containing samedl.lib. (error). 

2.7 sde.riii 

1. No pathname argument (current directory default) + module name. 

2. Pathname argument + module name 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 


Intermetrics, Inc. 


5 




SAMeDL Deve lo pment Environment - Test Plan _ 

5. No samedllib directory in current directory and call with no arguments (error). 

6. No samedl.lib directory in specified pathname directory (error). 

I. On a locked library (simulate by creating ./samedl.lib/samedlJock) (error). 

8. No permission to write in samedl.lib (error). 

9. No permission to write in the directory containing samedLlib (error). 

10. Multiple module names as arguments. 

II. Non-existent modules names as arguments ( error). 

12. Interactive option (test yes/no). 

2.8 sde.rinlib 

1. No arguments (i.e., default current directory). 

2. Pathname argument. 

3. Incorrect number of arguments (error). 

4. Incorrect options (error). 

5. No samedl.lib directory in cuTcnt directory and call with no arguments (error). 

6. No samedl.lib directory in specified pathname directory (error). 

7. On a locked library (simulate by creating 7samedl.lib/samedi.lock) (error). 

8. No permission to write in samedLlib (error). 

9. No permission to write in the directory containing samedLlib (error). 


6 


Intermetrics, Inc. 





Chapter 3 - Compiler Tesfing Procedure 


Chapter 3 Compiler Testing Procedure 

3.1 Introduction 

Testing of the SAMeDL compiler will be divided into three basic areas: 

1. Verify that the SAMeDL compiler recognizes and processes proper (as defined by 
[LRM]) syntactical and semantic constructs submitted to it. These tests will be 
known as the Correct Tests. 

2. Verify that the output of the SAMeDL compiler will functionally (as defuied by 
[LRM]) interface with the target database. These tests will be known as the End-to- 
End Tests. 

3. Verify that the SAMeDL compiler identifies improper syntactical and semantic 
constructs (as defined by [LRM]) as errors. These tests will be known as the Error 
Tests. 

3.2 Correct Tests 

Proper syntactic and semantic constructs will be tested using a series of SAMeDL program 
modules that will contain all facets of the SAMeDL language described in the LRM. Diagram 1 
in Chapter 4 shows the tests and which sections of the LI^ are validated after the successful 
compilation of the program module. 

A correct test is said to pass if: 

1. The SAMeDL source code for the test can be compiled by the SAMeDL compiler 
without issuing an error message; and 

2. Where interface Hies should be generated (see [LRM], [User]), the interface files are 
correctly generated and can be compiled without error by the appropriate compiler 
and/or pre-compiler (i.e., Ada compiler, C^ESQL pre-compiler, C compiler, Ada/SQL 
Module Language compiler) without error. {Note: depending on the specitic 
configuration of the SAMeDL compiler, not all of the above compilers/pre-compilers 
may be applicable, or if applicable, may be invoked transparency by the SAMeDL 
compiler. Refer to [User] to determine the situation that applies.) 

Otherwise, a correct test is said to fail. 

3.3 End-to-End Tests 

To test the output of the SAMeDL compiler for proper interfaces with the database management 
system, a program will be written in Ada that will exercise all the Procedure and Cursor 
definitions from the SAMeDL modules. Upon its execution, the program will initialize the 
database and start the testing procedures. The initialization and veiiflcation routines will set up 
the database for the following tests while testing the data structure interface and basic SAMeDL 
procedure and cursor functionality. The more complex cursor and procedure tests will then be 
run individually. The Ada application program will be written such Ciat it is self-checking. 

At the conclusion of each step of initialization and testing the driver will: 


Intermetrics, Inc. 


7 





SAMeDL Development Environment - Test Plan 


1. Report on the outcome of the test. 

2. If the test has completed successfully, the driver will progress to the next test (if any). 

3. If the test has failed, the driver will exit the testing procedure. 

This area is covered by the single t2 test (see Section A.2) which consists of 6 subtests for 
procedures and 11 subtests for cursors. Diagram 2 in Chapter 4 shows the cross-reference matrix 
of the tests to the portions of the LRM they are testing. LRM Chapters 2 through 4 are not 
explicitly tested for functionality, but are implicitly tested during the other tests. 

The database design used in the test suite was based on an example database from [DSC]. It 
consists of 5 tables defining basic banking information: 


CUSTOMER TABLE 


j Name 1 Street | City 

1 State Zip 

|SSN 

n 

S AVINGS_ACCOUNT TABLE 

1 Account # 1 Balance 

1 Customer SSN 

1 Branch ID 

□ 

CHECKING.ACCOUNT TABLE 

• 



1 Account # 1 Balance 

1 Customer SSN 

1 Branch ID 

n 

LOAN^ACCOUNT TABLE 

Account# [Balance Payment | Customer SSN 

1 Branch Id 


BRANCHJNFO TABLE 

1 Branch ID 

1 Assets 


I] 


This design was chosen because the full range of SAMeDL data types and data manipulation 
statements could be implemented in a meaningful fashion. 

3.4 Error Tests 


An error test consists of a single SAMeDL source code file containing one or more errors; errors 
will be marked in the source code through SAMeDL comments. These tests will be said to pass 
if the marked errors are appropriately detected when compiled by the SAMeDL compiler. 

Diagram 3 in Chapter 4 shows the cross-reference matrix of the error tests to the portions of the 
LRM they are testing. 


8 


Intermetrics, Inc. 
























Chapter 4 - Compiler Testing Cross Reference 


Chapter 4 Compiler Testing Cross Reference 

This chapter provides a cross reference of compiler testing objectives (in terms of [LRM] section 
numbers) against test source files. 


Intermetrics, Inc. 


9 




SAMeDL Development Envi ro nment - Test Plan _ 

4.1 Diagram 1: Correct Testing Cross Reference 



10 


Intermetrics, Inc. 

























































































































SAMeDL Development Environment - Test Plan 



12 


Intermetrics, Inc. 







































































Chmter 4 - Compiler Testing Cross R^erence 






























Intermetrics, Inc. 









































































Appendix A - Compiler Test Suite Source Code 


Appendix A Compiler Test Suite Source Code 

A.1 Correct Tests 

A.1.1 tl/ci.sme 

— *** Test I 

__ **********************•******************************'**•**•******••* 

DEFINITION MODULE D_cl IS 

-- the previous line tests the newline separator 

-- testing full character set 

DOMAIN Character_set_domain IS 
NEW SQL_CHAR(length => 43); 

CONSTANT letters : character_set_domain 

IS ■ the quic)c brown fox jumps over the lazy dog' ; 

CONSTANT all_caps ; character_set_doinain 

IS ‘THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG'; 

CONSTANT digit_as_char : character_set_domain 
IS '1234567890'; 

CONSTANT digits_as_nvmi 
IS 1234567890; 

DOMAIN integer_doinain IS 
NEW SQL_INT; 

DOMAIN real_doinain IS 
NEW SQL_REAL; 

CONSTANT integer_literal : integer_doinain 
IS (12-4+5*2); 

CONSTANT real_literal ; real_doinain 
IS 12.456/.09 + 1. ; 

CONSTANT float_literal 

IS (O.lEl) + (lO.E-i) + ( .lE+1) ; 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

DOMAIN Loan_type_doinain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 

CONSTANT personal_loan ; loan_type_domain 
IS personal ; 

END D_cl; 

A.1.2 tl/cii.sme 

-- Test II 


Intermetrics, Inc. 


IS 





SAMeDL Development Environment - Test Plan 


DEFINITION MODULE D_cII IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_doroain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length =>25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_n 2 une_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW SQL_INT{ FIRST => 0, LAST => 999999999); 
DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_number_doroain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 
DOMAIN Account2_number_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 
DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL (FIRST => 0.0, LAST => 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Loan2_type_domain IS 


l.OE+10); 


16 


Intermetrics, Inc. 




Appendix A - Compiler Test Suite Source Code 


NEW SQL_ENUMERATION_^_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Branch_nuinber_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => pranches, MAP => POS); 
DOMAIN Branch2_nuinber_doinain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches. MAP => POS); 

-- record definitions 


RECORD Customer_record IS 

Cust_Neune : Customer_naine_doinain; 

SSN : SSN_doroain; 

Street : Addr_doinain NOT NULL; 

City : City_domain; 

State : State_domain; 

ZIP ; ZIP_code_domain; 

END customer_record; 


END D_cII; 

A.1.3 tl/cui.sine 


__ ******************************************************************** 
__ *** Test III 

_ ********************************************************************* 


DEFINITION MODULE D_cIII IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

E3JUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_neune_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 
EXJMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_neune_domain IS 
NEW SQL_CHAR(length => 25); 


Intermetrics, Inc. 


17 






SAMeDL Development Environment - Test Plan 


domain integer declarations 

DOMAIN ZIP_code_doinain IS 

NEW SQL_INT( FIRST => 0. LAST => 999999999); 

DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_nuinber_doinain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 

DOMAIN Account2_number_doinain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL (FIRST => 0.0. LAST => l.OE+10); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan.types, MAP => IMAGE); 

DOMAIN Branch_number_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

DOMAIN Branch2_number_domain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record IS 

Cust_Name : Customer_name_doroain; 

SSN : SSN_doroain; 

Street : .Addr_domain NOT NULL; 

City : City_domain; 

State : State_domain; 

ZIP ; ZIP_code_domain; 

END customer_record; 

END D_cIII; 

WITH D_cIII; 

USE D_cIII; 

SCHEMA MODULE T1_III IS 

Basic customer information 
TABLE Customer IS 

Cust_Name : Customer_name_domain, 


18 


Intermetrics, Inc. 




Appendix A - Compiler Test Suite Source Code 


SSN not null 
Street_addr : 
City_addr : 
State_addr 
ZIP_addr : 
END Customer; 

-- Savings account 


: SSN_domain , 
Addr_domain, 
addr_doinain, 

Stat e_doinain, 
ZIP_code_domain 


TABLE Savings_account IS 

SBranch_nuinber : Branch_nuinber_domain, 
SAccount_nuinber : Account_nuinber_doinain , 
SBalance : Balance_doinain, 

SCustomer_SSN not null : SSN_domain 
END ; 


-- Checking account 

TABLE Checking_account IS 

CBranch_number : Branch_nuinber_domain, 

CAccount_number : Account_number_domain , 

CBalance : Balance_domain, 

CCustomer_SSN not null : SSN_domain 
END Checking_account; 

-- loan account 


TABLE loan_account IS 

LBranch_nuinber ; Branch_number_domain, 
LAccount_number ': Account_nuinber_domain , 
LBalance : Balance_domain, 

LPayment not null : Loan_Payment_domain, 
LCustomer_SSN not null : SSN_domain 
END loan_account; 

-- Branch information 

TABLE Branch_info IS 

Branch_neune : Branch_name_doinain , 
Branch_number ; Branch_number_domain , 

Assets not null : Branch_assets_domain 
END Branch_info; 

END T1_III; 

A.1.4 tl/civ.sme 


_ *♦*♦♦■*♦**♦**♦•**♦****♦**♦♦♦***♦■****♦♦♦*♦*♦*♦♦♦**♦♦*♦♦**♦****★*♦★**♦♦* 

-- *** Test IV 

_ ******************************************************************** 


DEFINITION MODULE D_cIV IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 


Intermetrics. Inc. 


19 



SAMeDL Development Environment - Test Plan 


Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length .=> 2); 

DOMAIN Branch_name_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW SQL_INT( FIRST => 0, LAST => 999999999); 

DOMAIN 2IP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_num)3er_domain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 

DOMAIN Account2_number_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => l.OE+10); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Branch_number_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

DOMAIN Branch2_numJ3er_doroain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 


20 


Intermetrics, Inc. 










Appendix A - Compiler Test Suite Source Code 


(ENUMERATION => Branches, MAP => POS); 
— record definitions 


RECORD Customer_record IS 

Cust_N^une ; Custoiner_naine_doinain; 
SSN : SSN_domain; 

Street_addr : Addr_doinain; 
City_addr : City_domain; 
State_addr : State_doinain; 

ZIP_addr : ZIP_code_domain; 

END customer_record; 

END D_CIV; 

WITH D_cIV; 

USE D_cIV; 

SCHEMA MODULE T1_III IS 

Basic customer information 


TABLE Customer 
Cust_Name' : 

SSN not null 
Street_addr : 
City_addr : 
State_addr : 
ZIP_addr : 
END Customer; 


IS 

Customer_n^une_domain , 
: SSN_domain , 
Addr_domain, 
City_domain, 
State_domain, 

ZIP_code_domain 


-- Savings account 


TABLE Savings_account IS 

SBranch_number ' : Branch_number_domain, 

SAccount_number : Account_number_domain , 
SBalance : Balance_domain, 

SCustomer_SSN not null; SSN_domain 
END ; 


-- Checking account 

TABLE Checking_account IS 

CBranch_number : Branch_number_domain, 

CAccount_number : Account_number_domain , 

CBalance : Balance_domain, 

CCustomer_SSN not null: SSN_domain 
END Checking_account; 

— loan account 


TABLE loan_account IS 

LBranch_number : Branch_number_domain, 

LAccount_number : Account_niamber_domain , 

LBalance : Balance_domain, 

LPayment not null: Loan_Payment_domain, 
LCustomer_SSN not null: SSN_domain 
END loan_account; 


Intermetrics, Inc. 


21 




SAMeDL Development Environment - Test Plan 


— Branch information 

TABLE Branch_info IS 

Branch_name : Branch_neune_doinain , 

Branch_number : Branch_number_doniain , 

Assets not null : Branch_assets_domain 

END Branch_info; 

END T1_III; 

WITH D_cIV; 

USE D_cIV; 

ABSTRACT MODULE A_cIV IS 
AUTHORIZATION T1_III 

ENUMERATION Bool IS 
{ true, 
false); 

STATUS Stat_Mapl USES Bool IS 
(0 => true, 100 => false); 

STATUS Stat_Map2 NAMED Stat_Map2_Renamed USES Bool IS 
(0 => true, 100 => false); 


-- procedures 


commit statement 

PROCEDURE Commit_work IS 

COMMIT WORK STATUS Stat_Mapl; 

delete statement 

PROCEDURE Delete_customer_loan (loan_number_in : 
Account_number_domain) IS 
DELETE FROM 

T1_III.Loan_account 

WHERE 

T1_III.Loan_account.LAccount_nuinber = loan_number_in 
STATUS Stat_Mapl NAMED Stat_Mapl_Renamed; 

PROCEDURE Delete_customers IS 
DELETE FROM 

T1_III.customer 
STATUS Stat_Map2; 

rollbac)c statement 

PROCEDURE rollbac)c_work IS 

ROLLBACK WORK STATUS Stat_Map2 NAMED Standard_Map; 

update statement 

PROCEDURE Update_savings_account_balance 


22 


Intermetrics, Inc. 








(account_nuinber_in NAMED acct : account_nuniber_doinain NOT 

NULL; 

transaction : balance_doinain ) 

IS 

UPDATE 

T1_III.savings_account 

SET 

Tl_III.savings_account.Sbalance = 

T1_III.savings_account-Sbalance + transaction 

WHERE 

Tl_III.savings_account.Saccount_nuinber = account_nuinber_in ; 

PROCEDURE Savings„and_loan_transaction IS 
UPDATE 

T1_III.loan_account 

SET 

T1_III.loan_account.Lbalance = 0.0; 

insert statement (query) 

PROCEDURE move_checking_to_savings 

(account_num_in : account_number_domain) 

IS 

INSERT INTO 

T1_III.savings_account 
SELECT * 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Caccount_number >= account_num_in; 

insert statement (values) 

PROCEDURE New_custpmer IS 
INSERT INTO 

T1_III.customer 

FROM 

New_customer_info : customer_record 
VALUES; 

select statement 

PROCEDURE Get_customer_profile (SSN_in : SSN_domain) IS 
SELECT * 

INTO 

Customer_Profile : customer_record 

FROM 

customer 

WHERE 

customer.SSN = SSN_in; 

END A_cIV; 

A.1.5 tiycv.siiie 


-- *** Test V 



Intermetrics, Inc. 


23 







SAMeDL Development Environment - Test Plan 


DEFINITION MODULE D_cV IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS _ 

NEW SQL_CHAR(length*=> 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_name_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW SQL_INT( FIRST => 0, LAST => 999999999); 
DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_number_domain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 
DOMAIN Account2_number_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST'=> 0.0, LAST => 1.0); 
DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 


l.OE+10); 


24 


Intermetrics, Inc. 






DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Branch_nuinber_doinain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches. MAP => POS); 
DOMAIN Bremch2_nuinber_doinain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record IS 

Cust_Naine : Customer_naine_doinain; 

SSN ; SSN_domain; 

Street_Addr ; Addr_domain NOT NULL; 
City_Addr : City_domain; 

State_addr : State_domain; 

ZIP_addr : ZIP_code_doinain; 

END customer_record; 

END D_cV; 

WITH D_cV AS Def_Mod; 

USE Def_Mod; 

SCHEMA MODULE T1_III IS 

— Basic customer information 
TABLE Customer IS 

Cust_Neune : Def_Mod.Customer_name_domain 
SSN not null : SSN_domain , 

Street_addr : Addr_domain, 

City_addr : addr_domain, 

State_addr : State_domain, 

ZIP_addr ; ZIP_code_doroain 
END Customer; 

— Savings account 

TABLE Savings_account IS 

SBranch_number : Branch_number_domain, 

SAccount_numJ3er : Account_number_domain 

SBalance : Balance_domain, 

SCustomer_SSN not null : SSN_doroain 
END ; 

-- Checlcing account 

TABLE Chec)cing_account IS 

CBranch_number : Branch_number_domain, 

CAccount_number : Account_nximber_domain 

CBalance : Balance_domain, 

CCustomer_SSN not null : SSN_doroain 
END Chec)cing_account ; 

-- loan account 


Intermetrics. Inc. 









SAMeDL Development Environment - Test Plan 


TABLE loan_account IS " 

LBranch_nuinber : Branch_nuinber_doinain, 

LAccount_nuinber : Account_nmnber_domain , 

LBalance ; Balarice.doinain, 

LPayment not null : Loan_Payin6nt_doinain, 

LCustomer_SSN not null : SSN_domain 
END loan_account; 

— Branch information 

TABLE Branch_info IS 

Branch_name : Branch_naine_domain , 

Branch_nuinber : Branch_number_domain , 

Assets not null : Branch_assets_domain 

END Branch_info; 

END T1_III; 

WITH D_cV AS Def_Mod; 

USE Def_Mod; 

ABSTRACT MODULE A_cV IS 
AUTHORIZATION T1_III 

-- cursors 

CURSOR List_customers FOR 
SELECT * 

FROM 

T1_III.Customer 
ORDER BY 

T1_III.Customer.SSN ; 

-- cursors with different predicates in the WHERE statement 


-- compound comparison predicate = 

CURSOR custoroer_accounts(SSN_in : SSN_domain) FOR 
SELECT 

T1_III.customer.cust_name, 

T1_III-customer.street_addr, 

T1_III.customer.city_addr, 

T1_III.customer.state_addr, 

T1_III.customer.ZIP_addr, 

T1_III.savings_account.Saccount_number, 

T1_III.savings_account.Sbalance, 

T1_III.checking_account.Caccount_nuinber, 

T1_III.checking_account.Cbalance 

FROM 

T1_III-Customer, 

T1_III.Savings_account, 

T1_III.Checking_account 

WHERE 

T1_III-customer-ssn = ssn_in AND 

T1_III.savings_account.Scustomer_ssn = ssn_in AND 

Tl_III.checking_account.Ccustomer_ssn = ssn_in ; 


26 


Intermetrics, Inc. 





Appendix A • Compiler Test Suite Source Co 


coiiq;>arison predicate >= 

CURSOR loans_over(loan_balance_in : balance_domain) FOR 
SELECT 

T1_III.Loan_account.Laccount_number, 

T1_111. Loan_account. Lbranch_nuinber, 

T1_III.Loan_account.Lcustomer_ssn, 

T1_III.Loan_account.Lbalance 

FROM 

.Loan_account 

WHERE 

.Loan_account.Lbalance >= loan_balance_in 


comparison predicate <= 

CURSOR loans_under(lo^m_balance_in : balance_domain) FOR 
SELECT 

T1_111. Loan_account. Laccount_nuinber, 

T1_111. Loan_account. Lbr 2 mch_nvunber, 

T1_III.Loan_account.Lcustomer_ssn, 

T1_III.Loan_account.Lbalance 

FROM 

T1_III.Loan_account 

WHERE 

T1_III.Loan_account.Lbalance <= loan_balance_in 


comparison predicate > 

CURSOR checking_balance_over ( account_bal_in : Balance_domain ) FOR 
SELECT 

T1_III.checking_account.Caccount_number, 

T1_III.checking_account.Ccustomer_ssn, 

T1_III.checking_account.Cbalance 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Cbalance > account_bal_in 


comparison predicate < 

CURSOR savings_balance_under ( account_bal_in : Balance_domain ) FOR 
SELECT 

T1_I1I.savings_account.Saccount_number, 

T1_III.savings_account.Scustomer_ssn, 

T1_III.savings_account.Sbalance 

FROM 

T1_III.savings_account 

WHERE 

T1_III.savings_account.Sbalance < account_bal_in 



Intermetrics, Inc. 


27 






SAMeDL Development Environment - Test Plan 


comparison predicate o 

CURSOR other_branch_names ( branch_n^une_in : branch_neune_domain) FOR 
SELECT 

T1_III.branch_info.branch_name 

FROM 

.branch_info 

WHERE 

T1_III.branch_info.branch_name <> branch_name_in 


END A_cV; 

A.1.6 tl/cvi^me 

__ ******************************************************************** 
-- *** Test VI 

__ ********************************************************************* 

DEFINITION MODULE D_cVI IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_neune_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_doroain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_name_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW SQL_INT( FIRST => 0, LAST => 9P9999999); 

DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_nvmvber_domain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 

DOMAIN Account2_number_domain IS 


28 


Intermetrics, Inc. 




•ndix A - Compiler Test Suite Source Code 



NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

I30MAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST s> 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => l.OE+10); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Branch_number_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

DOMAIN Branch2_number_domain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record IS 

Cust_Naroe ; Customer_naune_domain; 

SSN ; SSN_domain; 

Street : Addr_domain NOT NULL; 

City : City_domain; 

State : State_domain; 

ZIP : ZIP_code_domain; 

END customer_record; 

END D_cVI; 

WITH D_cVI; 

USE D_cVI; 

SCHEMA MODULE T1_III IS 

Basic customer information 
TABLE Customer IS 

Cust_N^une : Customer_naroe_domain, 

SSN not null ; SSN_domain , 

Street_addr : Addr_domain, 

City_addr .- addr_domain, 

State_addr : State_domain, 

ZIP_addr : ZIP_code_domain 
END Customer; 

-- Checking account 


Intermetrics, Inc. 


29 









SAMeDL Development Environment - Test Plan 


TABLE Checking_account IS 

CBranch_number : Branch_number_doroain, 

CAccount_number : Account_nuinber_domain , 

CBalance : Balan<;e_domain, 

CCustomer_SSN not null ; SSN_domain 
END Checking_account; 

— loan account 

TABLE loan_account IS 

LBranch_number : Branch_number_domain, 

LAccount_nuinber : Account_number_domain , 

LBalance : Balance_domain, 

LPayment not null : Loan_Payinent_domain, 
LCustomer_SSN not null : SSN_domain 
END loan_account; 

— Branch information 

TABLE Branch_info IS 

Branch_n 2 une : Branch_name_doinain , 

Branch_number : Branch_number_domain , 

Assets not null ; Branch_assets_domain 

END Branch_info; 

END T1_III; 

WITH D_cVI; 

SCHEMA MODULE T1_III_2 IS ' 

— Savings account 

TABLE Savings_account IS 

SBranch_number ; D_cVI.Branch_number_domain, 

SAccount_number : D_cVI.Account_number_doinain , 

SBalance ; D_cVI .Balance_doinain, 

SCustomer_SSN not null : D_cVI.SSN_domain 
END ; 

END T1_III_2; 

WITH D_cVI; 

WITH SCHEMA T1_III_2; 

USE D_cVI; 

ABSTRACT MODULE A_cVI IS 
AUTHORIZATION T1_III 

-- cursors 


between predicate 

CURSOR large_deposits -FOR 
SELECT * 

FROM 

T1_III_2.savings_account 

WHERE 

T1_III_2.savings_account.Sbalance 


30 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


BETWEEN AVG{T1_III_2.savings_account.Sbalance) 

AND MAX(Tl_IIl_2.savings_account.Sbalance) 


not between predicate 

CURSOR large_loans FOR 
SELECT 

T1_I1I.loan_account.Laccount_nuinber, 

T1_III.loan_account-Lcustomer_ssn, 

T1_III.loan_account.Lbalance 

FROM 

T1_III.loan_account 

WHERE 

T1_III.loan_account.Lbalance 

NOT BE*IWEEN AVG(T1_III.loan_account.Lbalance) 
AND MIN(T1_III. loan_account. Lbalance) 


in predicate 

CURSOR Loan_count ( Branch_in: branch_nun>ber_domain ) FOR 
SELECT 

•* 

FROM 

T1_I1I.Loan_account 

WHERE 

T1_111. Loan_account. LBranch_n\imber IN (Branch_in) 


not in predicate 

CURSOR customer_count FOR 
SELECT 

* 

FROM 

T1_III.customer 

WHERE 

T1_III.customer.ssn 

NOT IN (SELECT T1_III.loan_account.Lcustomer_ssn 
FROM Tl_III.loan_account) 


li)ce predicate 

CURSOR find_customer (name_in : customer_name_dCTnain) FOR 
SELECT 

T1_111. customer. cust_neune 

FROM 

T1_III.customer 

WHERE 

T1_III.customer.cust_niune LIKE name_in 


null predicate 


Intermetrics, Inc. 


31 










SAMeDL Development Environment - Test Plan 


CURSOR f ind_einpty_account FOR 
SELECT 

T1_I1I.checking_account.Caccount_nuinber, 
T1_III.checking_account.Ccustomer_SSN 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Cbalance IS NULL 


exists predicate 

CURSOR find_joint_accounts FOR 
SELECT 

T1_I1I_2.savings_account.Scustomer_ssn, 

T1_III_2.savings_account.Saccount_nuinber, 
checking_account. Caccount_nujnber 

FROM 

T1_III_2.savings_account,T1_III.checking_account 

WHERE 

EXISTS 
(SELECT * 

FROM 

T1_III_2.savings_account,T1_III.checking_account 

WHERE 

T1_111_2. savings_account. Scustoiner_ssn = 

T1_III.checking_account.Ccustomer_ssn) 


END A_cVI; 

A.L7 tl/cvii^me 

— *** Test VII 

__ ******************************************************************** 

DEFINITION MODULE D_cVII IS 

envuneration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_neurie_domain IS 
NEW SQL_CHAR(length => 50); 

DC»IAIN SSN_domain IS 


32 


Intermetrics, Inc. 






Appendix A - L,ompuer 


NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_donvain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_neune_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_doinain IS 

NEW SQL_INT( FIRST => 0. LAST => 999999999); 
DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_number_doinain IS 

NEW SQL_SMALLINT{ FIRST => 0, LAST => 9999); 
DOMAIN Account2_nvunber_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_domain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => 1 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Branch_number_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

DOMAIN Branch2_number_domain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches, MAP => POS); 

-- record defin tions 


RECORD Customer_record NAMED Cust_Rec_Ren^uned IS 
Cust_Name : Customer_neune_domain; 

SSN : SSN_domain; 

Street ; Addr_domain NOT NULL; 

City : City_domain; 

State : State_domain; 

ZIP : ZIP_code_domain; 

END customer_record; 


esi iuiie ^iource K,oae 


.OE+IO); 


Intermetrics, Inc. 


33 







SAMeDL Development Environment - Test Plan 


END D_cVII; 

WITH D_cVII; 

USE D_cVII; 

SCHEMA MODULE T1_III IS 

Basic customer information 

TABLE Customer 
Cust_Name 
SSN not null 
Street_addr 
City_addr 
State_addr 
ZIP_addr 
END Customer; 

-- Savings account 

TABLE Savings_account IS 

SBranch.number : Branch_number_domain, 

SAccount_nuinber : Account_number_domain , 

SBalance : Balance_domain, 

SCustomer_SSN not null : SSN_domain 
END ; 

-- Checking account 

TABLE Checking_account IS 

CBranch_number : Branch_number_domain, 

CAccount_number : Account_number_domain , 
CBalance : Balance_domain, 

CCustomer_SSN not null : SSN_domain 
END Checking_account; 

-- loan account 

TABLE loan_account IS 

LBranch_number : Branch_number_domain, 

LAccount_number : Account_number_doroain , 

LBalance : Balance_doinain, 

LPayment not null : Loan_Payment_domain, 
LCustomer_SSN not null : SSN_domain 
END loan_account; 

-- Branch information 

TABLE Branch_info IS 

Branch_name : Branch_name_domain , 
Branch_nurober : Branch_number_domain , 

Assets not null : Branch_assets_domain 

END Branch_info; 

END T1_III; 

WITH D_cVII; 

USE D_cVII; 

ABSTRACT MODULE A_cVII IS ' 


IS 

: Customer_name_domain, 
: SSN_domain , 
Addr_domain, 
addr_domain, 

State_domain, 

ZIP_code_domain 


34 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Code 


AUTHORIZATION T1_III 
-- cursors 


quantified predicate = ALL 

CURSOR List_Bethesda_checking FOR 
SELECT * 

FROM 

T1_III.checking_account 

WHERE 

T1_111. checking_account. Cbranch_nviinber = ALL 

— (SELECT * — GDT: Result expr can't be * 

(SELECT Cbranch_nuinber 
FROM T1_III.checking_account 

WHERE T1_III .checking_account .Cbranch_n\iinber = 

bethesda) 

IS 

procedure Open_Cursor IS OPEN; 

END List_Bethesda_checking; 

quantified predicate <> ALL 

CURSOR checking_only FOR 
SELECT 

T1_III.checking_account.Ccustomer_ssn 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Ccustomer_ssn 

<> ALL (SELECT T1_III.savings_account.Scustonier_ssn 
FROM T1_III.savings_account) 


IS 

procedure Open_Curs IS OPEN checking_only; 

END checking_only; 

quantified predicate > ALL 

CURSOR large_checking FOR 
SELECT * 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Cbalance > 

ALL (SELECT T1_III.savings_account.Sbalance 
FROM Tl_III.savings_account) 


quantified predicate < ALL 

CURSOR sinall_checking FOR 
SELECT * 

FROM 

T1_III.checking_account 


Intermetrics, Inc. 


35 







SAMeDL Development Environment - Test Plan 


WHERE 

.checking_account.Cbalance < 

ALL {SELECT T1_III.savings_account.Sbalance 
FROM T1_III.savings_account) 


quantified predicate >= ALL 

CURSOR largest_savings FOR 
SELECT * 

FROM 

T1_III.savings_account 

WHERE 

Tl_III.savings_account.Sbalemce >= 

ALL (SELECT T1_I1I.savings_account.Sbalance 
FROM Tl_lII.savings_account) 


quantified predicate <= ALL 

CURSOR sroallest_savings FOR 
SELECT * 

FROM 

T1_III.savings_account 

WHERE 

T1_III.savings_account.Sbalance <= 

ALL (SELECT T1_I1I.savings_account.Sbalance 
FROM T1_III.3avings_account) 


qu^mtified predicate = ANY 

CURSOR loan_and_save FOR 
SELECT 

T1_III.savings_account.Scustomer_ssn 

FROM 

T1_I1I.savings_account 

WHERE 

Tl_IlI.savings_account.Scustoiner_ssn = ANY 

(SELECT T1_III.loan_account.Lcustomer_ssn 
FROM T1_III.loan_account) 


quantified predicate <= SOME 

CURSOR all_checking FOR 
SELECT 

T1_III.checking_account.Ccustomer_ssn 

FROM 

T1_III.checking_account 

WHERE 

T1_III.checking_account.Cbalance <= 

SOME (SELECT T1_III.checking_account.Cbalance 
FROM T1_III.checking_account) 

END A_cVII; 


36 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


A.1.8 tl/cviii^me 


__ *** Test VIII 

_ ******•******************•«****•****•****•************«'****•**••**** 

DEFINITION MODULE D_cVIII IS 

eniiineration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr.domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS ‘ 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

EWMAIN Branch_neune_domain IS 
NEW SQL_CHAR(length => 25); 

domain integer declarations 

DOMAIN ZIP_code_d6main IS 

NEW SQL_INT( FIRST => 0, LAST => 999999999).; 

DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_number_domain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 

DOMAIN Account2_number_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_asset3_domain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => l.OE+10); 


Intermetrics, Inc. 


37 








SAMeDL Development Environment - Test Plan 


domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 
DOMAIN Iioan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loari_types, MAP => IMAGE); 
DOMAIN Branch_nuinber_doroain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches. MAP => POS); 
DOMAIN Branch2_number_domain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record NAMED Cust_Rec IS 
Cust_N^une : Customer_neune_doroain; 

SSN : SSN_domain; 

Street : Addr_domain NOT NULL; 

City : City_domain; 

State : State_domain; 

ZIP : ZIPi.code_domain; 

END customer_record; 

END D_cVIII; 

WITH D_cVIII; 

USE D.cVIII; 

SCHEMA MODULE T1_III IS 

Basic customer information 

TABLE Customer IS 

Cust_Name : Customer_name_domain, 

SSN not null ; SSN_doroain , 

Street_addr : Addr_domain, 

City_addr ; City_doroain, 

State_addr : State_domain, 

ZIP_addr : ZIP_code_doinain 

END Customer; 

-- Savings account 

TABLE Savings_account IS 

SBranch_number : Branch_number_domain, 

SAccount_number : Account_number_doroain , 

SBalance : Balance_domain, 

SCustomer_SSN not null : SSN_domain 
END ; 

-- Checking account 

TABLE Checking_account IS 

CBranch_number : _Branch_number_domain, 

CAccount_number : Account_number_domain , 

CBalance : Balance_domain, 


38 


Intermetrics, Inc. 






Appendix A - Ctmpiler Test Suite Source Code 


CCustomer_SSN not null : SSN.domain 
END Checking_account; 

-- loan account 

TABLE loan_account IS 

LBranch_nuinber : Branch_nuinber_domain, 

LAccount_nuniber : Account_nuinber_doinain , 

LBalance : Balance_doinain, 

LPayment not null ; Loan_Payinent_doinain, 
LCustomer.SSN not null : SSN.domain 
END loan_account; 

— Branch information 

TABLE Branch_info IS 

Branch_name : Branch_name_domain , 
Branch_number : Branch_number_doroain , 

Assets not null : Branch_assets_domain 

END Branch_info; 

END T1_III; 

WITH D_cVIII; 

USE D_cVIII; 

ABSTRACT MODULE A_cVIII IS 
AUTHORIZATION T1_III 

cursors 


cursor procs 

CURSOR customer_list FOR 
SELECT * 

FROM 

T1_III.customer 
ORDER BY 

T1_III.customer.ssn; 

IS 

PROCEDURE open_customer IS 
OPEN customer_list; 

PROCEDURE close_custoroer IS 
CLOSE customer_list; 

PROCEDURE fetch_customer IS 

FETCH customer_list INTO : new customer_record; 

PROCEDURE update_customer{ new_name : customer_name_domain ; 

new_ssn : ssn_domain ; 
new_street : addr_domain ; 
new_city : city_doroain ; 
new_state : state_domain ; 

new_zip : 2 ip_code_domain) IS 
UPDATE T1_III.customer 

SET Tl_Iir.customer.cust_n^une = new_name. 


Intermetrics, Inc. 


39 










SAMeDL Development Environment - Test Plan 


.customer.ssn = new_ssn, 

.customer.street_addr = new_street, 

.customer.city_addr = new_city, 

.customer.state_addr = new_state, 

Tl_III.customer. 2 ip_addr = new_zip 
WHERE CURRENT OF customer_list ; 

PROCEDURE delete_customer IS 
DELETE FROM T1_III.customer; 

END customer_list; 

END A_cVIII; 

A. 1.9 tl/cix.siiie 

__ ******************************************************************** 
-- *** Test IX 

_ *********************'********«*************'****•*****«•**«********** 

DEFINITION MODULE D_cIX_l IS 

enumeration declarations 

ENUMERATION Branches IS 
{ Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
{ mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_name_domain IS 
NEW SQL_CHAR(length => 25); 

END D_cIX_l; 

with D_cIX_l; use D_cIX_l; 

DEFINITION MODULE D_cIX_2 IS 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW S(3L_INT( FIRST => 0, LAST => 999999999); 


40 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Code 


DOMAIN ZIP2_code_domain IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_nuinber_domain IS 

NEW SQL_SMALLINT( FIRST => 0, LAST => 9999); 

DOMAIN Account2_nLunber_doinain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_d<Mnain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => l.OE+10); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types. MAP => IMAGE); 

DOMAIN Loan2_type_domain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types, MAP => IMAGE); 

DOMAIN Branch_number_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

DOMAIN Branch2_nuraber_domain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(ENUMERATION => Bramches, MAP => POS); 

-- record definitions 


RECORD Customer_record IS 

Cust_Neune : Customer_ncune_domain; 

SSN ; SSN_domain; 

Street : Addr_domain; 

City ; City_domain; 

State : State_domain; 

ZIP : ZIP_code_domain; 

END customer_record; 


END D_cIX_2; 

WITH D_cIX_l,D_cIX_2; 

USE D_cIX_l,D_cIX_2; 
SCHEMA MODULE S_cIX_l IS 


Basic customer information 


TABLE Customer IS 

Cust_Name : Customer_name_domain, 
SSN not null : SSN_domain , 

Street_addr : Addr_domain, 

City_addr : City_domain, 
State_addr : State_domain, 


Intermetrics, Inc. 







SAMeDL Development Environment - Test Plan 


ZIP_addr : ZIP_code_domain 

END Customer; 

— Savings account 

TABLE Savings_account IS 

SBranch_nuinber ; Branch_nuinber_domain, 

SAccount_nuinber : Account_nuinber_doinain , 

SBalance : Balance_domain, 

SCustomer_SSN not null : SSN_domain 
END ; 

— Checking account 

TABLE Checking_account IS 

CBranch_nuinber : Branch_nuraber_doroain, 

CAccount_number ; Account_number_domain , 

CBalance : Balance_domain, 

CCustomer_SSN not null : SSN_domain 
END Checking_account; 

END S_cIX_l; 

WITH D_cIX_l,D_cIX_2; 

USE D_cIX_;l,D_cIX_2; 

SCHEMA MODULE S_cIX_2 IS 

— loan account 

TABLE loan_accovmt IS 

LBranch_number ; Branch_nurober_domain, 

LAccount_nuinber : Account_nuinber_domain , 

LBaleuice : Balance_domain, 

LPayroent not null : Loan_Payn>ent_domain, 
LCustomer_SSN not null ; SSN_domain 
END loan_account; 

— Branch information 

TABLE Branch_info IS 

Branch_n^une : Branch_name_doroain , 
Branch_nuinber ; Branch_number_doroain , 

Assets not null : Branch_assets_domain 

END Branch_info; 

END S_cIX_2; 

WITH D_cIX_l,D_cIX_2; 

USE D_cIX_l; USE D_cIX_2; 

WITH SCHEMA S_cIX_2; 

ABSTRACT MODULE A_cIX_l IS 
AUTHORIZATION S_cIX_l 

-- procedures 


commit statement 


42 


Intermetrics, Inc. 








Appendix A - Compiler Test Suite Source Code 


PROCEDURE Coinmit_work IS 
COMMIT WORK; 

delete statement 

PROCEDURE Delete_customer_loan (loan_nuinber_in : 
Aocount_number_doinain) IS 
DELETE FROM 

S_cIX_2.Loan_account 

WHERE 

S_cIX_2 .Loan_account .Laccount_nuinber = loan_nuinber_in; 

PROCEDURE Delete_customers IS 
DELETE FROM 

S_cIX_l.Customer; 

rollback statement 

PROCEDURE rollbac);_work IS 
ROLLBACK WORK; 

update statement 

PROCEDURE Update_savings_account_balance 

(account_number_in ; account_niimber_domain; 
transaction : balance_domain ) 

IS 

UPDATE 

S_cIX_l.Savings_account 

SET 

S_cIX_l.Savings_account.Sbalance 

= S_cIX_l.Savings^account.Sbalance + transaction 

WHERE 

S_cIX_l.Savings_account.Saccount_number = account_number_in; 

END A_cIX_l; 

WITH D_cIX_l,D_cIX_2; 

USE D_cIX_l; 

USE D_cIX_2; 

WITH SCHEMA S_cIX_l; 

ABSTRACT MODULE A_cIX_2 IS 
AUTHORIZATION S_cIX_2 

PROCEDURE Savings_and_loan_transaction IS 
UPDATE 

S_cIX_2.loan_account 

SET 

S_cIX_2.loan_account.Lbalance = 0.0; 

insert statement (query) 

PROCEDURE move_checking_to_^savings 

(account_num_in : account_number_domain) 

IS 

INSERT INTO 

S_cIX_l.savings_account 
SELECT * 

FROM 


Intermetrics, Inc. 


43 







SAMeDL Development Environment - Test Plan 


S_cIX_l•checking_account 

WHERE 

S_clX_l.checking_account.Caccount_nun±>er >= account_num_in; 

insert statement (values) 

PROCEDURE New_customer IS 
INSERT INTO 

S_cIX_l.Customer 

FROM 

New_customer_info : new cust_record 
VALUES; 

select statement 

PROCEDURE Get_customer_profile (SSN_in : SSN_domain) IS 
SELECT * 

INTO 

Customer_Profile ; customer_record 

FROM 

S_cIX_l.Customer 

WHERE 

S_cIX_l.Customer.SSN = SSN_in; 

END A_cIX_2; 


A.1.10 tl/ctl^me 

definition module d_ctl is 
— Member Information 

domain MemName is new SQL_CHAR Not Null (Length s> 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

MAP => POS, ENUMERATION => SexEnum); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 
domain Sum_Domain is new SQL_SMALLINT Not Null; 
domain Count_Domain is new SQL_INT; 

end d_ctl; 


with d_ctl; use d_ctl; 
schema module s_recdb is 
table Meml>ers is 

MemberNeune not null : MemName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 


44 


Intermetrics, Inc. 









fuiix A - Compiler Test Suite Source Code 


MenberAge : Age. 

MemberSex : Sex. 

MemberPhone : Phone, 
MeinberStreet : Street, 
MemberCity ; City, 

MemberCnty not null : County 
end Members; 

end s_recdb; 


with d_ctl; use d_ctl; 
abstract module a_ctl is 
authorization s_recdb 

record MemberRec is 

R^emberName : MemNeune; 

R_Sum : Sum_Domain; 

R_Count : Count_Domain; 

end; 

procedure P_>iemberSelect (Req_MemberSSN : SSN) is 
select MemberNeune, SUM(MemberAge), COUNT(*) 
into Row : MemberRec 
from s_recdb.Members 

where s_recdb.Members.MemberSSN = Req_MemberSSN ; 

procedure MP_MemberSelect (Req_MemberSSN : SSN) is 
select MemberName, Sum_Domain(SUM(MemberAge)), 

Count.Domain(COUNT(*)) 

into Row : MemberRec 
from s.recdb.Members 

where s_recdb.Members 1 MemberSSN = Reg_>leii>berSSN ; 

procedure MPD.MemberSelect (Req_MemberSSN : SSN) is 

select MemberName, Sum.Domain(SUM(MemberAge)) neuned too, 
Count.Doma in (COUNT (*)) n 2 uned ct 
from s.recdb.Members 

where s.recdb.Members.MemberSSN = Req_MemberSSN ; 

cursor M.MemberSelect (Req_MemberSSN : SSN) for 

select MemberName, Sum_Domain(SUM(MemberAge)) named too, 
Count_Domain(COUNT(*)) neuned ct 
from s.recdb.Members 

where s.recdb.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 

fetch into Row ; new MemRec; 
end M_MemberSelect'; 

cursor MD_MemberSelect (Req_MemberSSN : SSN) for 

select MemberNeune, Sum_Domain(SUM(MemberAge)) named foo, 
Count_Domain(COUNT(*)) named ct 
from s.recdb.Members 

where s.recdb.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 
fetch; 


Intermetrics, Inc. 


45 





SAMeDL Development Environment - Test Plan 


end MD_MeinberSelect; 
end a_ctl; 

A.1.11 tl/ctl^me 

— This test is the simple demo (input.sme) 

definition module d_ct2 is 
— Member Information 

domain Memj'l 2 une is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_.CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION^AS_INT ( 

MAP => POS, ENUMERATIC»I => SexEnum); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street.is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Num]3er is new SQL_SMALLZNT Not Null; 

end d_ct2; 


with d_ct2; use d_ct2; 
schema module s_ct2 is 
table Members is 

MeroberName not null : MemName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

Mem)7erStreet : Street, 

MemberCity ; City, 

MemberCnty not null ; County 

end Members; 

end s_ct2; 


with d_ct2; use d_ct2; 
abstract module a_ct2 is 
authorization s_ct2 

record MemlserRec is 

MemberName : MemName; 
MemberSSN : SSN; 
ClubNumber : Club_Number; 
MemberAge : Age; 
MemberSex : Sex; 

MemberPhone : Phone; 
MemberStreet : Street; 


46 


Intermetrics. Inc. 










rndix A - Compiler Test Suite Source Code 


MemberCity ; City; 

MemberCnty : County; 

end; 

procedure CommitWork is 
commit work; 

procedure Memberinsert is 

insert into s_ct2.Members 
from Row : MemberRec 
values; 

cursor MemberSelect (ReqJlemberSSN : SSN) for 
select * 

from s_ct2.Members 

where s_ct2.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 

fetch into Row : new MemRec; 

end MemberSelect; 

end a_ct2; 

A. 1.12 tl/ct3.snie 

— The big demo test (T2) 

DEFINITION MODULE d_ct3 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_neune_domain IS 
NEW SQL_CHAR{length => 15); 

DOMAIN Addr.domain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN City_doroain IS 

NEW SQL.CHAR(length => 15); 

DOMAIN State.domain IS 

NEW SQL.CHAR(length => 2); 

domain integer declarations 

DOMAIN SSN.domain IS 

NEW SQL.INT NOT NULL ( FIRST => 0, LAST => 999999999); 


Intermetrics, Inc. 


47 








SAMeDL Development Environment - Test Plan 


DOMAIN acct_nuitL.domain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0, LAST = 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 
DOMAIN Loan_payment_doinain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_doinain IS 
NEW SQL_REAL; 


> 9999) ; 


48 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Code 


domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
(MAP => POS, ENUMERATION => Loan_types); 
IXJMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(MAP => POS, ENUMERATION => Branches); 

— record definitions 

RECORD Customer_record IS 

Cust_Name : Customer_name_domain; 

SSN : SSN_domain; 

Street : Addr_dc«nain; 

City : City_donvain; 

State : State_domain; 

END custoraer_record; 

RECORD Savings_entry IS 

branch_num : branch_num_doroain; 
acct_num ; acct_num_doroain; 

Balance . : Balance_domain; 

cust_ssn ; SSN_domain; 

END Savings_entry; 

RECORD Chequeing_entry IS 

branch_num : branch_nuro_domain; 
acct_n\am : acct_num_doroain; 

Balance : Balance_domain; 

cust_ssn ; SSN_doroain; 

END Chequeing_entry; 

RECORD loan_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_nuro_domain; 

Balance : Balance_domain; 

Loan_type : Loan_type_domain; 
cust_3sn : SSN_domain; 

END loan_entry; 

RECORD Branch_entry IS 

branch_num : branch_num_domain ; 

Assets : Branch_assets_domain; 

END Branch_entry; 

END d_ct3; 


Intermetrics, Inc. 


49 







SAMeDL Development Environment - Test Plan 


WITH d_ct3; 

USE d_ct3; 

SCHEMA MODULE s_ct.3 IS 

Basic customer information 
TABLE Cust IS 

Cust_Neune : Customer_naine_domain, 

SSN not null : SSN_domain, 

Street_addr ; Addr_domain, 

City_addr : City_domain, 

State_addr : State_doinain 
END cust; 

-- Checking account 
TABLE cheque IS 

branch_num : branch_num_domain, 
acct_num not null : acct_num_domain. 
Balance : Balance_domain, 

cust_ssn not null ; SSN_domain 
END cheque; 

-- Savings account 
TABLE Save IS 

branch_niim : branch_num_doinain, 
acct_num not null : acct_num_domain. 
Balance .* Balance_doroain, 

cust_ssn not null : SSN_domain 
END Save; 

-- loan account 
TABLE loan IS 

branch_num : branch_num_domain, 
acct_num not null : ■acct_num_Jdomain, 
Balance : Balance_doroain, 

Loan_type : loan_type_doroain, 
cust_ssn not null : SSN_domain 
END loan; 

-- Branch information 
TABLE Branch IS 

num : branch_num_domain , 

Assets : Branch_asset5_domain 

END Branch; 

END s_ct3; 


50 


Intermetrics, Inc. 






WITH 4_ct3; 

USE d_ct3; 

ABSTRACT MODULE a_ct3 IS 
AUTHORIZATION s_ct3 

— procedures 


coRsnit statement 

PROCEDURE Commit_work IS 
COMMIT WORK; 

delete statement 

PROCEDURE Delete_customer_loan 

(loan_number_in : acct_num_domain) IS 
DELETE FROM 

s_ct3.Loan 

WHERE 

s_ct3 .Loan.acct_num = loeui_number_in; 


rollback statement 

PROCEDURE rollback_work IS 
ROLLBACK WORK; 

update statement 

PROCEDURE Up_save_acct_bal 

(acct_num_in ; acct_num_domain; 
transaction : balemce_doroain ) 

IS 

UPDATE 

s_ct3.save 

SET 

s_ct3.save.balance = 

s_ct3.save.balemce + transaction 

WHERE 

s_ct3.save.acct_num = acct_num_in; 

PROCEDURE S_and_L IS 
UPDATE 

s_ct3.Loan 

SET 

s_ct3.Loan.balance = 0.0; 

insert statement* (query) 

PROCEDURE move_cheque_to_save 

(account_num_in : acct_num_domain) 

IS 

INSERT INTO 

s_ct3.save 
SELECT * 

FROM 


Intermetrics, Inc. 


51 








SAMeDL Development Environment - Test Plan 


WHERE 


i_ct3.cheque 

i_ct3 .cheque .acct_nuin >= account_nuin_in; 


52 


Intermetrics, Inc. 









Appendix A - CompiterTest Suite Source Code 


insert statement (values) 


select statement 

PROCEDURE Get_cust_profile (SSN_in ; SSN_domain) IS 
SELECT * 

INTO 

Customer_Profile : customer_record 

FROM 

s_ct3.cust 

WHERE 

s_ct3.cust.SSN = SSN_in; 
insert statement (values) 


select statement 

PROCEDURE Get_save_record 

(acct_num_in : acct_num_domain) IS 
SELECT * 

INTO 

savings_record : savings_entry 

FROM 

s_ct3.save 

WHERE 

s_ct3 . save. acct_nvim = 

acct_num_in; 

cursors 


cursors with different predicates in the WHERE statement 


-- comparison predicate = 

CURSOR customer_accounts(SSN_in : SSN_domain) FOR 
SELECT 

s_ct3.save.cust_ssn, 
s_ct3.save.acct_num, 
s_ct3 .save. Isa lance 

FROM 

s_ct3.save 

WHERE 

s_ct3.save.cust_ssn = ssn_in 


Intermetrics, Inc. 


53 







SAMeDL Development Environment - Test Plan 


comparison predicate >= 

CURSOR loans_over(loan_balance_in : balance_domain) FOR 
SELECT 

s_ct3.Loan.acct_num, 
s_ct3 . Loan. branch_nuni, 
s_ct3.Loan.cust_ssn, 
s_ct3.Loan.balance 

FROM 

s_ct3.Loan 

WHERE 

s_ct3.Loan.bal'ance >= loan_balance_in 


con^arison predicate <= 

CURSOR loans_under(loan_balance_in : balance_domain) FOR 
SELECT 

s_ct3 . Loan. acct_nuin, 
s_ct3.Loan•branch_num, 
s_ct3,Loem.cust_ssn, 
s_ct3.Loan.balance 

FROM 

s_ct3 .Loan 

WHERE 

s_ct3.Loan.balance <= loan_balance_in 

I 

comparison predicate > 

CURSOR cheque_bal_over { account_bal_in : Balance.domain ) FOR 
SELECT 

s_ct3.cheque.acct_num, 
s_ct3.cheque.balance 

FROM 

s_ct3.cheque 

WHERE 

s_ct3.cheque.balance > account_bal_in 


comparison predicate < 

CURSOR save_bal_under ( account_bal_in : Balance_domain ) FOR 
SELECT 

s_ct3.save.acct_num, 
s_ct3. save .balance 

FROM 

s_ct3.save 

WHERE 

s_ct3.save.balance < account_bal_in 


54 


Intermetrics, Inc. 








Appendix A - Compiler Test Suite Source Code 


comparison predicate <> 

CURSOR other_branches 

( branch_nuin_in : branch_num_domain ) FOR 

SELECT 

s_ct3.Branch.num 

FROM 

s_ct3.Branch 

WHERE 

s_ct3.Branch.num <> br^mch_num_in 


between predicate 
CURSOR large_deposits 

( lower_bound : balance_doinain; upper_bound :balance_domain) FOR 
SELECT * 

FROM 

s_ct3.save 

WHERE 

s_ct3.save.balance 

BETWEEN lower_bound 
AND upper_bound 


not between predicate 
CURSOR large_loans 

( lower_bound : balance_domain; upper_bound :balance_domain) FOR 
SELECT 

s_ct3. Loan. acct_num, 
s_ct3.Loan.balance, 
s_ct3.Loan.cust_ssn 

FROM 

s_ct3.Loan 

WHERE 

s_ct3.Loan.balance NOT BETWEEN lower_bound AND upper_bound 


Intermetrics, Inc. 


55 




SAMeDL Development Environment - Test Plan 


like predicate 

CURSOR find_customer (naine_in : custoner_n 2 une_domain) FOR 
SELECT 

s_ct3 . oust. cust.neune 

FROM 

s_ct3 .oust 

WHERE 

s_ct3. cust. cust.naine LIKE neune_in 


in predicate 

CURSOR Loan_count ( Branch_in: branch_nuin_doinain ) FOR 
SELECT 

* 

FROM 

s_ct3.Loan 

WHERE 

s_ct3 .Loan.Branch_nuin IN (Brancl\_in) 


cursor procs 

CURSOR custoiner_list FOR 
SELECT * 

FROM 

s_ct3.cust 


IS 

PROCEDURE open_customer IS 
OPEN customer_list; 

PROCEDURE close_customer IS 
CLOSE custoraer_list^ 

PROCEDURE fetch_customer IS 

FETCH customer_list INTO next_custoroer : new c_record; 

PROCEDURE update_customer (new_street : Addr_domain) IS 
UPDATE s_ct3.cust 

SET s_ct3.cust.street_addr = new_street 
WHERE CURRENT OF customer_list; 

PROCEDURE delete_customer IS 
DELETE FROM S_ct3.cust; 

END customer_list; 


56 


Intermetrics, Inc. 







Appendkc A - Compiler Test Suite Source Code 


procedures and cursors used to initialize the database and 
verify the contents of tables after test transactions 


PROCEDURE New_customer IS 
INSERT INTO 

s_ct3.oust 

FROM 

New_customer_info : new cust_record 
VALUES; 

PROCEDURE New_chequeing IS 
INSERT INTO 

s_ct3.cheque 

FROM 

New_chequeing_info : chequeing_entry 
VALUES; 

PROCEDURE New_savings IS 
INSERT INTO 

s_ct3.save 

FROM 

New_savings_info ; savings_entry 
VALUES; 

PROCEDURE New_loan IS 
INSERT INTO 

s_ct3.Loan 

FROM 

New_loan_info : loan_entry 
VALUES; 

PROCEDURE New_branch IS 
INSERT INTO 

s_ct3.Branch 

FROM 

New_branch_info ; new b_entry 
VALUES; 

PROCEDURE Delete_custoiners IS 
DELETE FROM 

s_ct3.cust; 

PROCEDURE Delete_chequeing IS 
DELETE FROM 

s_ct3.cheque; 

PROCEDURE Delete_savings IS 
DELETE FROM 

s_ct3.save; 

PROCEDURE Delete_loans IS 
DELETE FROM 

s_ct3.Loan; 

PROCEDURE Delete_Branches IS 


Intermetrics, Inc. 


57 






SAMeDL Development Environment - Test P lan 

DELETE FROM 

s_ct3.Branch; 


58 


Intermetrics, Inc. 







Appendix^ - Compiler Test Suite Source Code 


CURSOR List_customers FOR 
SELECT * 

FROM 

s_ct3.cust 
ORDER BY 

set 3.cus t.SSN 


CURSOR List_chequeing FOR 
SELECT * 

FROM 

s_ct3.cheque 
ORDER BY 

s_ct3 . cheque. acct_nuin 


CURSOR List_3avings FOR. 
SELECT * 

FROM 

s_ct3. save 
ORDER BY 

s_ct3. save.. acct_nuin 


CURSOR List_loans FOR 
SELECT * 

FROM 

s_ct3 .Loan 
ORDER BY 

s_ct3 .Loan.acct_nuin 


CURSOR List_branches FOR 
SELECT * 

FROM 

s_ct3.Branch 
ORDER BY 

s_ct3.Branch.num 


END a_ct3; 

A.1.13 tl/ct4.sme 

-- Test named as phrases on status declarations 
-- Test generation of status code and pareun names 

definition module d_ct4 is 

domain MemName is new SQL_CHAR Not Null (Length => 30); 

enumeration SQL_Code_Enum is (Ok, Bad, WhoKnows); 
status SQL_Statusl uses SQL_Code_Enum is ( 

0 => ok, 

1 => bad, 

3 => WhoKnows); 

status SQL_Status2 neuned Status2 uses SQL_Code_Enum is ( 


Intermetrics, Inc. 


59 




SAMeDL Development Environment - Test Plan 


0 => ok, 

1 => bad, 

3 => WhoKnows); 

end d_ct4; 


with d_ct4; use d_ct4: 
schema module s_ct4 is 
table Members is 

MemberName not null : MemName 
end Members; 
end s_ct4; 


with d_ct4; use d_ct4; 
abstract module a_ct4 is 
authorization s_Gt4 

procedure CommitWorkl_l is 
commit work 
status SQL. Status1; 

procedure CommitWorkl_2 is 
commit work 

status SQL_Statusl named CW1_2; 

procedure CommitWork2_l is 
commit work 
status SQL_Status2; 

procedure CommitWork2_2 is 
commit work 

status SQL_Status2 named CW2_2; 
end a_ct4; 

A.1.14 tl/ctS^me 

-- Tests AS PHRASES on context clauses 

definition module d_ct5 is 
-- Member Information 

domain MemName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

MAP => POS, ENUMERATION => SexEnum); 

domain Phone is new SQl,_CHAR (Length => 8) ; 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAP (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 


60 


Intermetrics, Inc. 









Her Test Suite Source Code 


end d_ct5; 

with d_ct5 as SM; 
use SM; 

definition module d_ct5_2 is 

constant C_Name : SM.MemName is •123456789012345678901234567890*; 

constant C_SSN : SM.SSN is •123456789‘; 

constant C_Club_Number ; SM.Club_Nuinber is 10; 

constant C_Age : SM.Age is 39; 

constant C_Sex : SM.Sex is SM.F; 

constant C_Phone : SM.Phone is '12345678'; 

constant C_Street : SM.Street is '123456789012345678901234567890'; 
constant C_City : SM.City is '123456789012345'; 
constant C_County : SM.County is 'MO*; 
end d_ct5_2; 


with d_ct5 as SM; 
use SM; 

scheroa module s_ct5 is 
table Members is 

MemberName not null : MemN^une, 

MemberSSN not null : SSN, 

ClubNumber not. null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 

table Members2 is 

MemberNeune2 not null : SM.MemName, 

MemberSSN2 not null : SM.SSN, 

ClubNumber2 not null : SM.Club_Number, 
MemberAge2 : SM.Age, 

MemberSex2 : SM.Sex, 

MemberPhone2 : SM.Phone, 

MemberStreet2 : SM.Street, 

MemberCity2 : SM.City, 

MemberCnty2 not null : SM.County 
end Members2; 

end s_ct5; 


with d_ct5 as SM; 
use SM; 

schema module Qs_ct5 is 
table QMembers is 

QMemberN^une not null ; MemN 2 une, 
QMemberSSN not null : SSN, 
QClubNumber not null : Club_Number, 
QMemberAge : Age, 

QMemberSex : Sex, 

QMemberPhone : Phone, 

QMemoerStreet : Street, 


Intermetrics, Inc. 


61 











SAMeDL Development Environment - Test Plan 


QMemberCity : City, 
QMemberCnty not null : County 
end QMentbers; 

end Qs_ct5; 

with d_ct5; use d_ct5; 

with schema Qs_ct5 as QQ; 

abstract module a_ct5 is 
authorization s_ct5 

procedure CommitWorkl^l is 
commit work; 

procedure Meroberinsert is 
insert into QQ.QMembers 
values; 

end a_ct5; 

A.1.15 tl/ct6,sine 


DEFINITION MODULE D_ct6 IS 

DOMAIN Character_set_domain IS 
NEW SQL_CHAR(length => 43); 

DOMAIN integer_doroain IS 
NEW SQL_INT; 

DOMAIN sm_integer_domain IS 
NEW SQL_SMALLINT; 

DOMAIN real_domain IS 
NEW SQL_REAL; 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, map => image); 

CONSTANT personal_loan : loan_type_domain 
IS personal ; 

CONSTANT one IS 1; 

CONSTANT Domc_one IS integer_domain(one); 

CONSTANT one_dot_zero IS 1.0; 

CONSTANT one_float IS lO.OE-1; 

CONSTANT D_one : sm_integer_domain IS 1; 

CONSTANT D_Domc_one : integer_domain IS integer_domain(one); 

CONSTANT D_one_dot_zero : real_domain IS 1.0; 

CONSTANT D_one_float : real_domain IS lO.OE-1; 

CONSTANT ul IS -1; 

CONSTANT u2 IS +1; 

CONSTANT u3 IS -1.0; 

CONSTANT u4 IS +1.0; 


62 


Intermetrics. Inc. 









CONSTANT u5 IS -l.OE+00; 

CONSTANT u6 IS +1.0E-00; 

CONSTANT pi IS (-1); 

CONSTANT p2 IS (+1); 

CONSTANT p3 : real_doinain IS (-1.0); 

CONSTANT p4 IS (+1.0); 

CONSTANT p5 IS (-1.0E+00); 

CONSTANT p6 : real_domain IS (+1.0E-00); 

CONSTANT al IS l+(-l); 

CONSTANT a2 IS pl+(+l); 

CONSTANT a3 IS 1.OE0+(-1.0); 

CONSTANT a4 IS p3+(+1.0); 

CONSTANT a5 IS 1.0+(-1.OE+00); 

CONSTANT a6 IS p5+(+1.OE-OO); 

CONSTANT a7 IS real_donvain(1.0) + real_domain({-1)); 

—## 

CONSTANT a8 IS p6 + real_doinain( ( + 1)) ; 

CONSTANT a9 IS real_doinain(1.0E0) + real_doinain ((-1)) ; 
CONSTANT aO IS real_domain(p3) + real_doinain((+1)); 

CONSTANT si IS l-(-l); 

CONSTANT s2 IS pl-(+l); 

CONSTANT s3 IS 1.OEO-{-1.0); 

CONSTANT s4 IS p3-(+1.0); 

CONSTANT s5 IS 1.0-(-1.OE+OO); 

CONSTANT s6 IS p5-(+1.OE-OO); 

CONSTANT s7 IS real_doiMiin(1.0) - real_doroain((-1)); 

CONSTANT s8 IS -p6 - real_doinain (( + 1)) ; 

CONSTANT s9 IS real_domain(1.0E0) - real_domain((-1)); 
CONSTANT sO IS real_domain(p3) - real_donuiin((+1)); 

CONSTANT ml IS (4 - (-6))*(+5 + 5); 

CONSTANT dl IS (4 - (-6))/(+5 + 5); 

CONSTANT m2 IS (4.0 - (-6.0))*(+5 + 5); 

CONSTANT d2 IS (4.0 - (-6.0))/{+5 + 5); 

CONSTANT m3 IS (4 - (-6))*(+5.0 + 5.0); 

CONSTANT d3 IS real_domain(4 - (-6))/real_domain(+5.0 + 5.0); 
CONSTANT m4 IS (4.0 - {-6.0))*(+5.0 + 5.0); 

CONSTANT d4 IS (4.0 - (-6.0))/(+5.0 + 5.0); 

CONSTANT m5 IS (4.OEO - (-6.0))*(+5.OEO + 5.0); 

CONSTANT dS IS (4.0 - (-6.OEO))/(+5.0 + 5.0E0); 

CONSTANT m6 IS (4.0 - (-6.0))*(+5.OEO + 5.0); 

CONSTANT d6 IS (4.0 - (-6.0))/(+5.0 + 5.0E0); 

CONSTANT m7 IS (4.OEO - (-6.0))*(+5.0 + 5.0); 

CONSTANT d7 IS (4.0 - (-6.OEO))/(+5.0 + 5.0); 

END D_ct6; 

A.1.16 tl/ct7.sine 

DEFINITION MODULE D_ct7 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 


Intermetrics, Inc. 


63 








SAMeDL Development Environment - Test Plan 


Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage,, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 50); 

DOMAIN SSN_domain IS 

NEW SQL_CHAR NOT NULL (length => 9); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 25); 

DOMAIN State_doroain IS 

NEW SQL_CHAR(length => 2); 

DOMAIN Branch_name_domain IS 
NEW SQL_CHAR(length => 25); 

END D_ct7; 

A.1.17 tl/ct8.snie 

--Ireference d_ct7 
with D_ct7; use D_ct7; 

DEFINITION MODULE D_ct8 IS 

domain integer declarations 

DOMAIN ZIP_code_domain IS 

NEW SQL_INT( FIRST => 0, LAST => 999999999); 
DOMAIN ZIP2_code_domai’n IS 
NEW SQL_INT NOT NULL; 

DOMAIN Account_nurober_domain IS 

NEW SQL_SMALLINT( FIRST => 0. LAST => 9999); 
DOMAIN Account2_number_domain IS 
NEW SQL_SMALLINT NOT NULL; 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_doroain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 
DOMAIN Loan_payment_domain IS 
NEW SQL_REAL NOT NULL; 

DOMAIN Branch_assets_doraain IS 

NEW SQL_REAL NOT NULL ( FIRST => 0.0, LAST => 

domain enumeration declarations 

DOMAIN Loan_type_doroain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 


l.OE+10); 


64 


Intermetrics. Inc. 






Appendix A • Compiler Test Sifite Source Code 


DOMAIN IiOan2_type_doiBain IS 

NEW SQL_ENUMERATION_AS_CHAR NOT NULL 
(ENUMERATION => Loan_types. MAP => IMAGE); 
DOMAIN Branch_nviinber_doinain IS 
NEW SQL_ENUMERATION_AS_INT 
(MAP => POS, ENUMERATION => Branches); 
DOMAIN Branch2_nuinber_don)ain IS 

NEW SQL_ENUMERATION_AS_INT NOT NULL 
(MAP => POS, ENUMERATION => Branches); 

— record definitions 

RECORD CustcMner_record IS 

Cust_N^une : Customer_name_doinain; 

SSN : SSN_doroain NOT NULL; 

Street : Addr_doinain; 

City : City_domain; 

State : State_doinain; 

ZIP : ZIP_code_doinain; 

END customer_record; 

END D_ct8; 

A.1.18 tl/ct9^me 

—!reference d_ct7 
—(reference d_ct8 
WITH D_ct7,D_ct8; 

USE D_ct7,D_ct8; 

SCHEMA MODULE S_ct9 IS 

— Basic customer information 

TABLE Customer IS 

Cust_N^une : Customer_neuBe_domain, 

SSN not null : SSN_domain , 

Street_addr : Addr_domain, 

City_addr ; City_doroain, 

State_addr : State_domain, 

ZIP_addr : ZIP_code_domain 
END Customer; 

— Savings account 

TABLE Savings_account IS 

SBranch_number : Branch_number_domain, 

SAccount_number : Account_num)Der_domain , 

SBal^nce ; Balance.dcnnain, 

SCustcaner_SSN not null : SSN_domain 
END ; 

— Chec)cing account 

TABLE Checlcing_account IS 

CBranch_number ; Branch_nuroJoer_domain, 

CAccount_number : Account_number_domain , 

CBalance : Balance_doniain, 

CCustomer_SSN not null : SSN_domain 


Intermetrics, Inc. 


65 





SAMeDL Development Environment ~ Test Plan 


END Checking_account; 

END S_ct9; 

A.1.19 tl/ctlO^me 

—!reference s_ct9 

WITH D_ct7,D_ct8; 

USE D_ct7,D_ct8; 

SCHEMA MODULE S_ctlO 

— loan account 

TABLE loan_account IS 

LBranch_nuinber : Branch_nuinber_domain, 

LAccount_number : Account_niiinber_doniain , 

LBalance : Balance_domain. 

LPayment not null : Loan_Payment_doinain, 
LCustomer_SSN not null : SSN_doinain 
END loan_account; 

— Branch information 

TABLE Branch_info IS 

Branch_name : Branch_name_domain , 
Branch_nuinber : Branch_nuinber_doroain , 

Assets not null : Branch_assets_doniain 

END Branch_info; 

END S_ctlO; 

A.U0 tl/ctll^me 

—!reference s_ctlO 

WITH D_ct7,D_Ct8; 

USE D_ct7; USE D_ct8; 

WITH SCHEMA S_ctlO; 

ABSTRACT MODULE A_ctll IS 
AUTHORIZATION S_ct9 

-- procedures 


IS 


commit statement 

PROCEDURE Coramit_work IS 
COMMIT WORK; 

delete statement 

PROCEDURE Delete_customer_loan (loan_number_in : 
Account_number_domain) IS 
DELETE FROM 

S_ct10.Loan_account 

WHERE 

S_ctlO.Loan_account.Laccount_number = loan_number_in; 
PROCEDURE Delete_customers IS 


66 


Intermetrics, Inc. 







A.1.21 


Appendix A - Compiler Test Suite Source Code 


DELETE FROM 

S_ct9.Customer; 

rollback statement 

PROCEDURE rollback_work IS 
ROLLBACK WORK; 

update statement 

PROCEDURE Updat e_savings_account_balance 

(account_number_in : account_number_domain; 
transaction : balance_dc»nain ) 

IS 

UPDATE 

S_ct9.Savings_account 

SET 

S_ct9.Savings_account.Sbalance 

= S_ct9.S«vings_account.Sbalance + tremsaction 

WHERE 

S_ct9.Savings_account.Saccount_number = account_number_in; 

END A_ctll; 

tl/ctl2^me 

--Ireference a_ctll 
WITH D_ct7,D_Ct8; 

USE D_ct7; 

USE D_ct8; 

WITH SCHEMA S_ct9; 

ABSTRACT MODULE A_ctl2 IS 
AUTHORIZATION S_ctlO 

PROCEDURE Savings_and_loan_transaction IS 
UPDATE 

S_ctlO.loan_account 

SET 

S_ct 10. loem_account. Lbaleuice = 0.0; 

insert statement (query) 

PROCEDURE move_checking_to_savings 

(account_num_in : account_number_domain) 

IS 

INSERT INTO 

S_ct9.savings_account 
SELECT * 

FROM 

S_ct9.checking_account 

WHERE 

S_ct9.checking_account.Caccount_number >= account_num_in; 

insert statement (values) 

PROCEDURE New_customer IS 
INSERT INTO 

S_ct9.Customer 

FROM 


Intermetrics, Inc. 


67 





SAMeDL Development Environment • Test Plan 


New_customer_info ; new c_rec 
VALUES; 

select statement 

PROCEDURE Get_customer_profiie (SSN_in : SSN_domain) IS 
SELECT * 

INTO 

Customer_Profile : customer_record 

FROM 

S_ct9.Customer 

WHERE 

S_ct9.Customer.SSN = SSN_in; 

END A_ctl2; 


A.1.22 tl/ctl3.siiie 

definition module D_ctl3 is 
— Member Information 

domain MemName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERAT10N_AS_INT ( 

MAP => POS, ENUMERATION => SexEnum); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 
domain Sum_Doroain is new SQL_SMALLINT Not Null; 
domain Count_Domain is new SQL_INT; 

end D_ctl3; 


with D_ctl3; use D_ctl3; 
schema module RecDB is 
table Members is 

MemberNeune not null : MemName, 

MemberSSN not null : SSN, 

ClubNumber not null ; Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 

end Members; 

table Members2 is 

MemberNeune2 not null : MemName, 


68 


Intermetrics, Inc. 








Appendix A • Compiler Test Suite Source Code 


MeiaberSSN2 not null : SSN, 
ClubNuinber2 not null : Club_Nuinber, 
MemberAge2 : Age. 

MemberSex2 : Sex, 

MemberPhone2 : Phone, 

MemberStreet2 : Street, 

MemberCity2 ; City, 

MemberCnty2 not null ; County 
end Members2; 

end RecDB; 


with D_ctl3; use D_ctl3; 
abstract module JV_ctl3 is 
authorization RecDB 

record MemberRec is 

R_MeinberName : MemName; 

R_Sum : Sum_0(xnain; 

R_Count : Count.Domain; 

end; 

procedure P_MemberSelect (Reg_MemberSSN : SSN) is 
select MemberName, SUM(MemberAge), COUNT(*) 
into Row : MemberRec 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 

procedure MP_MemberSelect (Req_MemberSSN ; SSN) is 
select MemberName, Sum_Domain(SUM(MemberAge)), 
Count_Domain(COUNT(*)) 

into Row : MemberRec 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 

procedure MPD^emberSelect (Req_MemberSSN : SSN) is 

select MemberName, Sum_Domain(SUM(MemberAge)) named x, 
Count_Domain(COUNT(*)) n 2 uned too 
from RecDB.Members 

where RecDB.Members.MemberSSN = Reg_MemberSSN ; 

cursor M_MemberSelect (Req_MemberSSN : SSN) for 

select MemberName, Sum_Domain(SUM(MemberAge)) named sm, 
Count_Domain(COUNT(*)) named ct 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 

fetch into Row : new MRec; 
end M_MemberSelect; 

cursor MD_MemberSelect (Req_MemberSSN : SSN) for 

select MemberN^une, Sum_Domain(SUM(MemberAge)) named msum, 
Count_Domain{COUNT(*)) n 2 uned foo 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 
is 


Intermetrics, Inc. 


69 



SAMeDL Development Environment - Test Plan 


A.1J3 


procedure Fetchit is 
fetch; 

end MDJMernberSelect; 
end A_ctl3; 

tl/ctl4^ine 

-- Check replacement of constants and enum literals in embedded 
C-code 

DEFINITION MODULE d_ctl4 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg < 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERAT10N_AS_int 
(MAP => POS, ENUMERATION => Loan_types); 

DOMAIN branch_num_doroain IS 
NEW SQL_ENUMERATION_AS_Char 
(ENUMERATION => Branches, MAP => IMAGE); 

constant Cl ; loan_type_doroain is mortgage; 

constant C2 : loan_type_domain is loan_type_domain (loan_type_domain 


constant C3 : branch_num_domain is Bethesda; 
constant C4 : branch_num_domain is branch_num_domain 
(branch_num_domain ( 

Silver_Spring)); 


END d_ctl4; 


70 


Intermetrics, Inc. 







WITH d_ctl4; 

USE d_ctl4; 

SCHEMA MODULE s_ctl4 IS 


TABLE Cust IS 

Coll : loan_type_doinain, 
Col2 : loan_type_doinain, 
Col3 : branch_nuin_doinain. 
Col 4 : branch_nuin_doinain, 
Col5 : loan_type_doinain. 
Col 6 : branch_nuin_domain 
END cust; 

END s_ctl4; 


Intermetrics, Inc. 


71 








SAMeDL Development Environment - Test Plan 


WITH d_ctl4; 

USE d_ctl4; 

ABSTRACT MODULE a_ctl4 IS 
AUTHORIZATION s_ctl4 

PROCEDURE New_custoiner IS 
INSERT INTO 

s_ctl4.oust 

VALUES (Cl, C2, C3, C4, personal, Gaithersburg); 

PROCEDURE Sel_Cust IS 
SELECT * 

PROM s_ctl4.cust . 
where Coll = Cl and 
Col2 = C2 and 
Col3 = C3 and 
Col4 = C4 and 

Col5 = loan_type_dotQain(personal) and 
Col6 = Gaithersburg; 

PROCEDURE Upd_Cust IS 
UPDATE s_ctl4.cust 
SET 

Coll a Cl, 

Col2 = C2, 

Col3 a C3, 

Col4 a C4, 

ColS a personal, 

Col6 a Gaithersburg; 

END a_ctl4; 

A.1,24 tl/ctl5,sine 

— Various insert values tests 

DEFINITION MODULE d_ctl5 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 15); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR( length a> 15); 


72 


Intermetrics Inc. 








Appendix A • Compiler Test Suite Source Code 


DOMAIN City_doinain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

domain integer declarations 

DOMAIN SSN_domain IS 

NEW SQL_INT NOT NULL ( FIRST => 0, LAST => 999999999); 
DOMAIN acct_nun\_domain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0, LAST => 9999); 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

I30MAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_domain IS 
NEW SQL_REAL; 


domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
(MAP => POS, ENUMERATION a> Loan.types); 
DOMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(MAP => POS, ENUMERATION => Branches); 
RECORD Customer_record IS 

Cust_Name : Customer_naroe_domain; 

SSN : SSN_domain; 

Street : Addr_domain; 

City : City_domain; 

State : State_domain; 

END customer_recordj 

END d_ctl5; 

WITH d_ctl5; 

USE d_ctl5; 

SCHEMA MODULE s_ctl5 IS 

Basic customer information 
TABLE Oust IS 

Cust_NAme : Customer_neune_domain, 

SSN not null • ; SSN_domain, 

Street_addr : Addr_domain, 

City_addr : City_domain, 

State_addr : State_domain 
END cust; 


-- Savings account 


Intermetrics. Inc. 


73 











SAMeDL Development Environment - Test Plan 


TABLE Save IS 

branch_num : branch_nuin_domain, 
acct_nuin not null : acct_nun^_domain. 
Balance : Balance_doinain, 

cust_ssn not null : SSN.domain 
END Save; 


END s_cti5; 

WITH d_ctl5; 

USE d_ctl5; 

ABSTRACT MODULE a_ctl5 IS 
AUTHORIZATION s_ctl5 


RECORD customer_record_jninas is 

Cust_NAine ; Customer_naine_domain; 

SSN : SSN.domain; 

City : City_domain; 

State : State.domain; 

END custom6r_record_;ninus; 


PROCEDURE New_customer IS 
INSERT INTO 

s_ctl5.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_customer_info : new c_record 

VALUES; 

PROCEDURE New_custoinerl IS 
INSERT INTO 

s_ctl5.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_cus tomer_inf o 

VALUES {Cust_Neune, SSN, Street_addr, City_addr, State_addr); 

PROCEDURE New_customer2 IS 
INSERT INTO 

s_ctl5.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_cus t oiner_i n f o2 

VALUES (Cust_N 2 une, SSN, NULL, City_addr, State_addr); 

PROCEDURE New_customer3 IS 
INSERT INTO 

s_ctl5.cust (Cust_N^une, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_cu s t ome r _ i n f o 3 

VALUES {Cust_Name, SSN, •11261 Col Pike’, City_addr, 

State_addr); 

PROCEDURE New_customer4 IS 
INSERT INTO 


74 


Intermetrics, Inc. 








*€ndix A - Compiler Test Suite Source Code 


s_ctl5.cust (Cust_N^une, SSN, Street_addr, City_addr, 

State_addr) 

FROM : new row_typel 
VALUES; 

PROCEDURE New_custon\er5 IS 
INSERT INTO 

s_ctl5.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM : new row_type2 

VALUES (Cust_Name, SSN, Street_addr, City_addr, State_addr); 

PROCEDURE New_customer6 IS 
INSERT INTO 

s_ctl5.cust (Cust_N«une, SSN, Street_addr, City_addr, 

State_addr) 

FROM : new row_type3 

VALUES (Cust_Naine, SSN, NULL, City_addr, State_addr); 

PROCEDURE New_customer7 IS 
INSERT INTO 

s_ctl5.cust (Cust_Neune, SSN, Street_addr, City_addr, 

State_addr) 

FROM : new row_type4 

VALUES (Cust_Naine, SSN, *11261 Col Pike', City_addr, 
State_addr); 

PROCEDURE New_custoiner8 IS 
INSERT INTO 

s_ctl5.cust (Cust_N£une, SSN, Street_addr, City_addr, 

State_addr) 

FROM : new row_type5 

VALUES (Cust.Name, SSN, NULL, City_addr, State_addr); 

END a_ctl5; 

A.1.25 tl/ctl6^me 

definition module d_ctl6 is 
-- Member Information 

domain MemNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

MAP => POS, ENUMERATION => SexEnum); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

constant C_Name : MemName is •123456789012345678901234567390*; 
constant C_SSN : SSN is •123456789*; 


Intermetrics, Inc. 


75 









SAMeDL Development Environment - Test Plan 


constant C_Club_Nuinber : Club_Nuinber is 10; 
constant C_Age : Age is 39; 
constant C_Sex : Sex is F; 
constant C_Phone : Phone is *12345678'; 

constant C_Street : Street is *123456789012345678901234567890*; 
constant C_City : City is *123456789012345'; 
constant C_County : County is *MO'; 
end d_ctl6; 


with d_ctl6; use d_ctl6; 
schema module RecDB is 
table Members is 

MemberName not null : MemNeune, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity ; City, 

MemberCnty not null : County 

end Members; 

end RecDB; 


with d_ctl6; use d_ctl6; 
abstract module a_ctl6 is 
authorization RecDB 

record MemberRec n^uned N^uned_MemberRec is 
-- record MemberRec is 

R_MemberNaune : MemName; 

R_MemberSSN : SSN; 

R_ClubNumber : Club_Number; 

R_MemberAge : Age; 

R_MemberSex : Sex; 

R_MemberPhone : Phone; 

R_MemberStreet : Street; 

R_MemberCity : City not null; 

R_MemberCnty : County ; 

end; 

cursor MemberSelect2 (Req_MemberSSN named Req_MemberSSN : SSN) for 
select 

MemberName neuned NS_MemberName, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet named NS_MemberStreet Not Null, 

MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 


76 


Intermetrics. Inc. 








Appendix A - Compiler Test Suite Source Code 


select 

MemberNzune n 2 uned NS_MeiDberN 2 une, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet neuned NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberNeune named NS_MemberName, 

MemberSSN, 

ClubNvunber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet neuned NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberName named NS_MemberNeune, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet named NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Keq_MemberSSN; 
is 

procedure Fetchit is 

— fetch into Row_Name : MemberRec; 

-- fetch into : MemberRec; 

-- fetch into Row_Name; 

fetch ; 

— fetch into Row_Neune : new New_Row_'IVpe ; 

-- fetch into : new New_Row_Type; 

end MemberSelect2; 

end a_ctl6; 

A.1.26 t3/tl.sme 

definition module t_4 is 
-- Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 


Intermetrics, Inc. 


77 








SAMeDL Development Environment - Test Plan 


enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, 

Map '=> Pos) ; 

domain Phone is new SQ‘L_CHAR (Length => 8) ; 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)c, SQL_Fail); 

status £etch_map neuned is_£ound uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise record_not_£ound); 

status bool_map uses boolean is 
(100=>true, 0=>£alse); 

end t_4; 

with t_4; use t_4; 
schema module s_4 is 
table Members is 

MemberName not null : MemberN^une, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity ; City, 

MemberCnty not null : County 
end Members; 
end s_4; 

with t_4; use t_4; 
abstract module a_4 is 
authorization s_4 

record memberec2 named insertrec is 
MemberNeune : MemberName; 

MemberSex : Sex not null; 

end memberec2; 

record memberec3 is 

junk dblength named neuneind : MemberNeune; 

MemberSex : Sex; 
end memberec3; 

record memberec is 


78 


Intermetrics, Inc. 








Appendix A - Compiler Test Suite Source Code 


MenberNeune : MemberName; 

MemberSex : Sex; 

end menberec; 

procedure DeleteMemberl ( Input_n 2 uae : meinbernaine) is 
delete from members 
where Membern 2 une = Input_Name 
status bool_jnap; 

procedure DeleteMember2 ( Input_n 2 une : membername) is 
delete from members 
where Memberneune = Input_Name 
status bool_|nap neoned delete_status; 

procedure DeleteMember3 ( Input_name : membername) is 
delete from members 
where Memberneune = lnput_N 2 une 
status fetch_piap; 

procedure DeleteMember4 ( Input_neune : memberneune) is 
delete from members 
where Memberneune = Input_Neune 
status fetch_n>ap neuned delete_status; 

procedure DeleteMeroberS ( Input_name neuned Delete_Me : memberneune) 
is 

delete from members 

where Memberneune = Input.JIeune 

status bool_jnap; 

procedure SelectMeroberl is 

select membersex not null, memberneune from s_4.Members; 

procedure MemberInsertO is 

insert into s_4.Members Values; 

procedure MemberInsert1 is 

insert into s_4.Members (memberneune, membersex) Values; 

procedure Memberlnsert2 is 

insert into s_4.Members (Memberneune neuned myneune, membersex 

named 

mysex not null) Values; 

procedure Membe'*Insert3 is 

insert into s_4.Members (Memberneune neuned myneune, membersex 

neuned 

mysex) Values (memberneune,membersex); 

procedure Memberlnsert4 is 

insert into s_4.Members (Membername neuned jun)c, membersex) 
from :memberec3 Values (memberneune,membersex); 

procedure MemberInsert5 is 

insert into s_4.Members (Memberneune , membersex ) 
from the_row : memberec Values (memberneune,membersex); 

procedure MemberInsert6 is 


Intermetrics, Inc. 


79 








SAMeDL Development Environment • Test Plan 


named 


insert into s_4.Members (Membername neuned n^^name, membersex 
mysex) from the_row Values (membername,membersex); 


procedure Memberlnsert? is 

insert into s_4.Members (Membername neuned myname, membersex 

named 

mysex) from : new rec7 Values (memberneune,membersex); 


procedure Memberlnsert8 is 

insert into s_4.Members (s_4.members.Membername , membersex 

named 

mysex) from the.row : new rec8 Values (membername,membersex); 


procedure MeroberlnsertS is 

insert into s_4.Members (Membername, membersex) 
from :roemberec2 Values (membername,membersex); 

procedure MemberlnsertlO is 

insert into s_4.Members (s_4.members.Memberneune , membersex ) 
from the_row : memberec2 Values (membername,membersex); 

procedure Memberlnsert11 is 

insert into s_4.Members (Membername neuned myname, membersex 

named 

mysex) from : new recll Values (membern 2 une,membersex); 
procedure Memberlnsertl2 is 

insert into s_4.Members (Membern 2 une named myname, clubnumber 

named 

mycounty) from the_row : new recl2 Values (membername,clubnumber); 

cursor MemberSelect (Req_MemberSSN : SSN) for 

select s_4.members.membernjune , membersex neuned mysex, 
clubnumber * 6 named club, 
memberssn neuned myssn 
from s_4.Members 

where memberssn = Req_MemberSSN; 

cursor MemberSelect2 (RecL_MemberSSN neuned myssn : SSN) for 

select s_4.members.memberneune neuned junk dblength named nameind, 
membersex 
from s_4.Members 

where memberssn = Req_MemberSSN; 
is 

procedure Fetchit is 

fetch into :memberec3 
status standard_map ; 

procedure updateit is 
update members 

set s_4.members.membersex = null 
where current of memberselect2; 
end MemberSelect2; 

end a_4; 


80 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


A.1.27 t3/t2^me 

definition module t_10 is 
— Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, 

Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_NDt_Found; 

enumeration FailType is (Not_Logged_ln, SQL_01c, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_0)t, 

100 s> raise record_not_found); 

status bool_map uses boolean is 
(100=>true, 0=>false); 

end t_10; 

with t_10; use t_10; 
schema module s_10 is 
table Members is 

MemberNeune not null : MemberNeune, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone ; Phone, 

MemberStreet : Street, 

MeratjerCity City, 

MemberCnty not null : County 
end Members; 

end s_10; 

with t_10; use t_10; 
abstract module a_10 is 
authorization s_10 

record memberec2 named insertrec is 
MemberN 2 une : MemberName; 


Intermetrics, Inc. 


81 










SAMeDL Development Environment - Test Plan 


MemberSex : Sex not null; 
end meinberec2; 

record memberecl is 

junk dblength named nameind : MeinberN 2 une; 

MemberSex : Sex; 
end memberecS; 

record memberec is 

MemberNeune : MemberNeune; 

MemberSex : Sex; 

end memberec; 

cursor MemberSelect2 (Req_MemberSSN named myssn : SSN) for 
select s_10 .members .memberneune named junk dblength neuned 

nameind, 

membersex 
from s_10.Members 

where memberssn = Re<i_MemberSSN 

union 

select members.membername neuned junk dblength named nameind, 
membersex 
from s_10.Members; 
is 

procedure Fetchit is 

fetch into :memberec! 
status standard_map ; 

procedure updateit is 
update members 

set s_10.members.membersex = null 
where current of memberselect2; 
end MemberSelect2; 

end a_10; 

A.lJtS t3/t3.sme 


definition module t_ll is 
— Member Information 

domain MemberNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

ENUMERATION => SexEnum, Map => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 


82 


Intermetrics, Inc. 







>ndix A - Compiler Test Suite Source Code 


enumeration FailType is {Not_Logged_In, SQL_Ok, SQL_Fail); 

status fetchjnap named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise record_not_found); 

end t_ll; 


with t_ll; use t_ll; 
schema module s_ll is 
table Members is 

MemberName not null : MemberNeune, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet ; Street, 

MemberCity ; City, 

MemberCnty not null : County 

end Members; 

end s_ll; 


with t_ll; use t_ll; 
abstract module a_ll is 
authorization s_ll 

record MemberRec is 

MemberNeune : MemberName; 

MemberSSN : SSN; 

ClubNumber ; Club_Number; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet : Street; 

MemberCity : City; 

MemberCnty : County; 

end; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select MemberSSN, MemberName 
from s_ll.Members as tl 

where tl.MemberSSN = '012345678'; 

end a_ll; 

A.1.29 t3/t4.sine 

definition module t_8 is 
-- Member Information 

domain MemberNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 


Intermetrics, Inc. 


83 







SAMeDL Development Environment - Test Plan 


domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnvim, 

Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is Tiew SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)c, SQL_Fail); 

status fjnap named is_found is 

( 100 => raise record_not_found); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299,.-298 => Not_Logged_In, 

0 => SQL_0)c, 

100 a> raise record_not_found); 

status booljmap uses boolean is 
(100s>true, 0=>fal3e); 

end t_8; 

with t_8; use t_8; 
schema module s_8 is 

table mytable is 
unique(ssn) 
end mytable; 

table Members is 

MemberName char(30) default 'jennifer' not null primary )cey: 
MemberName, 

MemberSSN character default user not null ; SSN, 

ClubNumber int not null : Club_Number, 

MemberAge references mytable : Age, 

MemberSex chec)c(MemberSex of) ; Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null unique : County, 
foreign )cey (memberAge,memberneune) references anothertable 
(age,mname), 

primary key (memberssn), 
unique (membername,memberphone), 
check (membercnty <> *PG‘) 
end Members; 


84 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


grant all privileges on jc.anothertable to jc, gdt, 2 un with grant 
option; 

grant select, insert, delete on informix.customer to jc; 
end s_8; 

with t_8; use t_8; 
abstract module a_8 is 
authorization s_8 

record memberec2 named insertrec is 
MemberName : MemberName; 

MemberSex : Sex not null; 

end memberec2; 

record memberecl is 

junk dblength named nameind : MemberName; 

MemberSex : Sex; 

end memberecl ,- 

record memberec is 

MemberName : MemberName; 

MemberSex : Sex; 

end meuberec; 

procedure DeleteMemberl ( lnput_neune : membername) is 
delete from members 
where Membername = Input_Name 
status bool_map; 

procedure DeleteMember2 ( Input_name : membername) is 
delete from members 
where Membername = Input_Name 
status bool_map neuned delete_status; 

procedure DeleteMemberl { Input_name : memberneune) is 
delete from members 
where Memberneune = Input_Neune 
status f_map; 

procedure DeleteMember4 ( Input_name ; membername) is 
delete from members 
where Memberneune = Input_Neune 
status fetch_map named delete_status; 

procedure DeleteMeroberS ( Input_name neuned Delete_Me : membername) 
is 

delete from members 

vhere Membername = Input_Neune 

status bool_map; 

procedure SelectMemberl is 


Intermetrics, Inc. 


85 






SAMeDL Development Environment - Test Plan 


select membersex not null, memberneune from s_8.Members; 

procedure MemberInsertO is 

insert into s_8.Members Values; 

procedure Memberlnsertl is 

insert into s_8.Members (membername, membersex) Values; 
procedure Memberlnsert2 is 

insert into s_8.Members (Membername named Inyn^une, membersex 

neuned 

mysex not null) Values; 
procedure Memberlnsert3 is 

insert into s_8.Members (Membername named nyname, membersex 

named 

mysex) Values (membern^une,membersex); 
procedure Memberlnsert4 is 

insert into s_8.Members (Membername n 2 uned junk, membersex) 
from :memberec3 Values (membername,membersex); 

procedure MemberInsert5 is 

insert into s_8.Members (Membern 2 une , membersex ) 
from the_row : memberec Values (membername,membersex); 

procedure MemberInsertS is 

insert into s_8.Members (Membername neuned myname, membersex 

ncimed 

mysex) from the_row Values (membername,membersex); 
procedure MemberInsert? is 

insert into s_8.Members (Membername named myname, membersex 

named 

mysex) from : new rec7 Values (membername,membersex); 
procedure MemberInsert8 is 

insert into s_8.Members (s_8.members.Meraberneune ,'membersex 

named 

mysex) from the_row : new rec8 Values (membername,membersex); 

procedure MemberInsertS is 

insert into s_8.Members (Memberneune, membersex) 
from :memberec2 Values (memberneune,membersex); 

procedure MemberInsert10 is 

insert into s_8.Members (s_8.members.Membername , membersex ) 
from the_row : memberec2 Values (memberneune,membersex); 

procedure Memberinsertll is 

insert into s_8.Members (Memberneune neuned myneune, membersex 

named 

mysex) from : new recll Values (memberneune,membersex); 
procedure Memberlnsertl2 is 

insert into s_8.Members (Memberneune neuned myneune, clubnumber 

named 


86 


Intermetrics, Inc. 




iJUiL 


ndix A • Compiler Test Suite Source Code 



mycounty) from the_row : new recl2 Values (membername,clubnumber); 

cursor MemberSelect (ReqL-MemberSSN : SSN) for 

select s_8.members.membername , membersex named mysex, 
clubnumber * 6 named club, 
memberssn hamed myssn 
from s_8.Members 

where memberssn = a_8.memberselect.Req_MemberSSN; 

cursor MemberSelect2 (Req_MemberSSN n^uned myssn : SSN) for 

select s_8 .members .membernzune named junk dblength nauned nameind, 
membersex 
from s_8.Members 

where memberssn s Req_MemberSSN; 
is 

procedure Fetchit is 

fetch into :memberec3 
status f.jnap ; 

procedure updateit is 
update members 

set s_8.members.membersex = null 
where current of memberselect2; 
end MemberSelect2; 

end a_8; 

A.1.30 t3/t5.sine 

definition module t_9 is 
— Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnxim, 

Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0k, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise record_not_found); 


Intermetrics, Inc. 


8 : 









SAMeDL Development Environment - Test Plan 


status bool.map uses boolean is 
(100=>true, 0=>false); 

end t_9; 

with t_9; use t_9; 
schema module s_9 is 
table Members is 


MemberNeune not 

null : 

MemberNeune, 

MemberSSN not 

null : 

SSN, 

ClubNumber not 

null : 

Club_Number 

MemberAge : 

Age. 


MemberSex 

Sex, 


MemberPhone : 

Phone, 


MemberStreet : 

Street, 


MemberCity : 

City, 


MemberCnty not 

null : 

County 

Members; 

• 



end s_9; 

with t_9; use t_9; 
abstract module a_9 is 
authorization s_9 

record memberec2 neuned insertrec is 
MemberName : MemberName; 

MemberSex : Sex not null; 

end memberec2; 

record memberecS is 

junk dblength named nameind : MemberName; 
MemberSex : Sex; 

end memberecS; 

record memberec is 

MemberN 2 une : MemberNeune; 

MemberSex : Sex; 

end memberec; 

procedure DeleteMemberl ( Input_neune : memberneune) is 
delete from members 
where Memberneune = Input_Name 
status bool_map; 

procedure DeleteMember2 ( Input_name : memberneune) is 
delete from members 
where Membername = Input_Naroe 
status bool_map neuned delete_status; 

procedure DeleteMemberl ( Input_name : memberneune) is 
delete from members 
where Membername = Input_Neune 
status fetch_map; 

procedure DeleteMember4 ( Input_name : memberneune) is 
delete from members 
where Memberneune = Input_Neune 


88 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Code 


status fetch_inap n 2 U(ned delete_status; 

procedure DeleteMemberS ( Input_ndune neuned Delete_Me : merobername) 
is 

delete from members 

where Membernzune = Input_Name 

status bool_map;. 

procedure SelectMemberl is 

select membersex not null, membernaune from s_9.Members; 


procedure MemberInsertO is 

insert into s_9.Members Values; 

procedure Memberlnsertl is 

insert into s_9.Members (roembername, membersex) Values; 
procedure Memberlnsert2 is 

insert into s_9.Members (Merobername neuned myneune, membersex 

neuned 

mysex not null) Values; 
procedure MemberInsertB is 

insert into s_9.Members (Memberneune neuned myneune, membersex 

neuned 

mysex) Values (memberneune,membersex); 
procedure Memberlnsert4 is 

insert into s_9 .Members (Memberneune neuned jun)c, membersex) 
from :memberec3 Values (memberneune,membersex); 

procedure MemberInhertS is 

insert into s_9.Members (Memberneune , membersex ) 
from the_row ; memberec Values (memberneune,membersex); 


procedure Memberlnsert6 is 

insert into s_9.Members (Memberneune neuned myname, membersex 

neuned 

mysex) from the_row Values (memberneune,membersex); 
procedure Memberinsert? is 

insert into s_9.Members (Memberneune named myneune, membersex 

neuned 

mysex) from : new rec7 Values (memberneune,membersex); 
procedure MemberInsert8 is 

insert into s_9.Members (s_9.members.Memberneune , membersex 

neuned 

mysex) from the_row : new rec8 Values (memberneune,membersex); 

procedure MemberInsert9 is 

insert into s_9.Members (Membername, membersex) 
from :memberec2 Values (memberneune,membersex); 

procedure MemberlnsertlO is 

insert into s_9.Members (s_9.members.Memberneune , membersex ) 
from the_row memberec2 Values (memberneune,membersex); 


Intermetrics, Inc. 


89 




SAMeDL Development Environment - Test Plan 


procedure MemberInsertll is 

insert into s_9.Members (Membern^une neuned myname, membersex 

ncuned 

mysex) from : new recll Values (membername,membersex); 
procedure MemberInsert12 is 

insert into s_9.Members (Membername named myname, clubnumber 

named 

mycounty) from the_row : new recl2 Values (membername,clubnumber); 

cursor MemberSelect (Req_MemberSSN : SSN) for 

select s_9.members.membername , membersex named mysex, 
clubnumber * 6 named club, 
memberssn named myssn 
from s_9.Members 

where memberssn = a_9.memberselect.Req_MemberSSN; 

cursor MemberSelect2 (Req_MemberSSN named myssn : SSN) for 

select s_9 .members .membername named jun)c dblength neuned nameind, 
membersex 
from s_9.Members 

where memberssn = Req_MemberSSN 

union 

select s_9.members.membername named junlc dblength named nameind, 
membersex 
from s_9.Members; 
is 

procedure Fetchit is 

fetch into ;memberec3 
status standard_map ; 

procedure updateit is 
update members 

set s_9.members.membersex = null 
where current of memberselect2; 
end MemberSelect2; 

end a_9; 

A. 131 t3/t6.sme 

definition module t_12 is 
-- Member Information 

domain MemberNeune is i>ew SQL_CHAR Not Null (Length => 30) ; 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is hew SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, Map => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 


90 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_Ok, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise record_not_found); 

end t_12; 


with t_12; use t_12; 
schema module s_12 is 
table Members is 

MemberName not null : MemberNeune, 

MemberSSN not null : SSN, 

ClubNvimber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 

table Members2 is 

MemberName not null ; MemberName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number 

end Members2; 

end s_12; 


with t_12; use t_12; 
abstract module a_12 is 
authorization s_12 

record MemberRec is 

MemberName ; MemberNeune; 

MemberSSN : SSN; 

ClubNumber : Club_Number; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet : Street; 

MemberCity : City; 

MemberCnty ; County; 

end; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select MemberSSN, s_12.Members.Memberneune 
from s_12.Members 

where MemberSSN = {select MemberSSN 
from Members2 


Intermetrics, Inc. 


91 










SAMeDL Development Environment - Test Plan 


where s_12.ineR>bers2.memberneune = 'John'); 


end a_12; 

A.1J2 t3/t7.sme 

definition module t_13 is 
— Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, Map => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new S0L_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0k, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 *> SQL_Fail,‘ 

-299, -298 => Not_Logged_In, 

0 => SQL_0k, 

100 => raise record_not_found); 


end t_13; 


with t_13; use t_13; 
schema module s_13 is 
table Members is 

MemberNcune not null 
MemberSSN not null 
ClubNumber not null 
MemberAge ; Age, 
MemberSex : Sex, 
MemberPhone : Phone, 
MemberStreet : Stfeet, 
MemberCity : City, 
MemberCnty not null 
end Members; 


MemberName, 
SSN, 

Club_Number, 


County 


table Members2 is 

MemberName not null 
MemberSSN not null 
ClubNumber not null 
end Members2; 


MemberName, 

SSN, 

Club_Number 


end s_13; 


92 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Code 


with t_13; use t_13; 
abstract module a_13 
authorization s_13 

record MemberRec 
MemberNeune 
MemberSSN 
ClubNumber 
MemberAge 
MemberSex 
MemberPhone 
MemberStreet 
MemberCity 
MemberCnty 

end; 


is 


MemberName; 
SSN; 

Club_Nuinber ; 
Age; 

Sex; 

Phone; 
Street; 

City; 

County; 


cursor MemberSelect {Req_MeinberSSN ; SSN) for 
select MemberSSN, Members.Membername 
from s_13.Members 

where MemberSSN = (select MemberSSN 
from Members2 

where s_13.members2.membern 2 une = 'John'); 


end a_13; 

A.1.33 t3/t8.sme 

definition module t_14 is 
-- Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Eniimeration => SexEnum, Map => POS) ; 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)c, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise record_not_found); 


end t_14; 


Intermetrics, Inc. 


93 







SAMeDL Development Environment - Test Plan 


with t_14; use t_14; 
schema module s_14 is 
table Members is 

MemberNeune not null ; MemberNeune, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Nvimber, 

Member Age : Age, 

MemberSex : Sex, 

MemberPhone ; Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 

table Members2 is 

MemberNeune not null : MemberName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number 

end Members2; 

end s_14; 


with t_14; use t_14; 
abstract module a_14 is 
authorization s_14 

record MemberRec is 

MemberName ; MemberName; 

MemberSSN : SSN; 

ClubNumber ; Club_Number; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet ; Street; 

MemberCity : City; 

MemberCnty : County; 

end; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select MemberSSN, Members.Merobername 
from s_14.Members 

where MemberSex = (select MemberSex 
from Members 

where s_14.members.membersex = 
t_14.f ); 

end a_14; 

A. 1.34 t3/t9.sine 

definition module t_15 is 
-- Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 


94 


Intermetrics, Inc. 










Appendix A - Compiler Test Suite Source Code 


enumeration SexEnum is (F. M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enimneration => SexEnum, Map => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)t, SQL_Fail); 

status £etch_map named is_£ound uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_01c, 

100 => raise record_not_found); 


end t_15; 


with t_15; use t_15; 
schema module s_15 is 
table Members is 

MemberN^e not null 
MemberSSN not null 
ClubNumber not null 
MemberAge : Age, 
MemberSex : Sex, 
MemberPhone : Phone, 
MemberStreet : Street, 
MemberCity : City, 
MemberCnty not null 
end Members; 


MemberName, 
SSN, 

Club_Number, 


County 


end s_15; 


with t_15; use t_15; 
abstract module a_15 is 
authorization s_15 


record MemberRec 
MemberName 
MemberSSN 
ClubNumber 
MemberAge 
MemberSex 
MemberPhone 
MemberStreet 
MemberCity 
MemberCnty 

end; 


MemberName; 
SSN; 

Club_Number; 
Age; 

Sex; 

Phone; 

Street; 

City; 

County; 


Intermetrics, Inc. 


95 











SAMeDL Development Environment - Test Plan 


procedure CommitWork is 
commit work; 

procedure Memberinsert is 

insert into s_15.Members 
from Row : MemberRec VALUES; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select * 

from s_15.Members 

where s_l5.Members.MemberSSN = Req_MemberSSN; 
is 

procedure Fetchit is 

fetch into Row : new MemberRec 
status Fetch_Map named Rec_Status; 

end MemberSelect; 

end a_15; 

A.1J5 ta/tlO^me 

definition module t_5 is 
-- Member Information 

domain MemberNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_:CHAR Not Null (Length => 9) ; 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, Map => Pos); 

domain Phone is new SQL_CHAR (Length *> 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_Ok, SQL_Fail); 

status fetch_map named is_found uses Boolean is 
( -999 .. -300 => False, 

0 => True, 

100 => raise record_not_found); 


end t_5; 


with t_5; use t_5; 
schema module s_5 is 
table Members is 

MemberN£ime not null : MemberNcune, 

MemberSSN not null ; SSN, 


96 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


ClubNumber not null : Club.Number, 
MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 

end s_5; 


with t_5; use t_5; 
abstract module a_5 is 
authorization s_5 

record MemberRec is 

MemberNeune : MemberN 2 une; 

MemberSSN : SSN; 

ClubNumber ; Club_Number; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet : Street; 

MemberCity : City; 

MemberCnty : County; 

end; 

procedure CommitWork is 
commit work; 

procedure Memberinsert is 
insert into s_5.Members 
from Row : MemberRec VALUES; 

cursor MemberSelect (ReqJMemberSSN : SSN) for 
select * 

from s_5.Members 

where s_5.Members.MemberSSN = Req_MemberSSN; 
is 

procedure Fetchit is 

fetch into Row : new MemberRec 
status Fetch_Map neuned Rec_Status; 

end MemberSelect; 

end a_5; 

A.1.36 t3/tll.snie 

definition module t_6 is 
-- Member Information 

domain MemberNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 


Intermetrics, Inc. 


97 









SAMeDL Development Environment - Test Plan 


Enumeration => SexEnum, Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15) ; 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0k, SQL_Fail); 

status fetch_map named is_found uses Boolean is 
( -999 .. -300 => False, 

0 => True, 

100 => raise record_not_found); 

end t_6; 


with t_6; use t_6; 
schema module s_6 is 
table-Members is 


Member Neune not 

null : 

MemberName, 

MemberSSN not 

null : 

SSN, 

ClubNumber not 

null : 

Club_Number 

MemberAge : 

Age, 


MemberSex : 

Sex, 


MemberPhone : 

Phone, 


MemberStreet : 

Street, 


MemberCity : 

City, 


MemberCnty not 

null : 

County 


end Members; 
end s_6; 


with t_6; use t_6; 
abstract module a_6 is 
authorization s_6 


record MemberRec 
Member Neune 
MemberSSN 
ClubNumber 
MemberAge 
MemberSex 
MemberPhone 
MemberStreet 
MemberCity 
MemberCnty 

end; 


Member Neune; 
SSN; 

Club_Number; 
Age; 

Sex; 

Phone; 

Street; 

City; 

County; 


procedure CommitWorlc is 
commit wor)c; 


98 


Intermetrics, Inc. 










Appendix A - Conmiler Test Suite Source Code 


procedure Metnberinsert is 
insert into s_6.Members 
from Row : MemberRec VALUES; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select * 

from s_6.Members 

where s_6.Members.MemberSSN = Req_MemberSSN; 


end a_6; 

A.1.37 t3/tl2^ine 

-- •*** Test I 

DEFINITION MODULE D_cl IS 

-- the previous line tests the newline separator 

-- testing full character set 

DOMAIN Character_set_domain IS 
NEW SQL_CHAR(length => 43); 

CONSTANT letters : character_set_domain 

IS 'the quic)c brown fox jumps over the lazy dog’; 

CONSTANT all_caps : character_set_domain 

IS •THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG'; 

CONSTANT digit_as_char : Character_3et_domain 
IS '1234567890'; 

CONSTANT digits_as_num 
IS 1234567890; 

EX)MAIN integer_domain IS 
NEW SQL_INT; 

DOMAIN real_domain IS 
NEW SQL_REAL; 

CONSTANT integer_literal : integer_domain 
IS (12-4+5*2); 

CONSTANT real_literal : real_domain 
IS 12.456/.09 + 1. ; 

CONSTANT float_literal 

IS (O.lEl) + ’(lO.E-1) + ( .lE+1) ; 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_CHAR 
(ENUMERATION => Loan_types, MAP => IMAGE); 

CONSTANT personal_loan : ioan_type_domain 
IS personal ; 

END D_cl; 


Intermetrics, Inc. 


99 








SAMeDL Development Environment - Test Plan 


A.l t3/tl3^me 


definition module t_16 is 
-- Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_:CHAR Not Null (Length => 9) ; 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEniam, MAp => pos) ; 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL.CHAR Not Null (Length => 2); 

domain Club_Number is new SQL.SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0k, SQL_Fail); 

status fetch_map neuned is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL.Ok, 

100 *> raise record_not_found); 


end t_16; 


with t_16; use t_16; 
schema module s_16 is 
table Members is 

MemberName not null 
MemberSSN not null 
ClubNumber not null 
MemberAge : Age, 
MemberSex : Sex, 
MemberPhone : Phone, 
MemberStreet : Street, 
MemberCity : City, 
MemberCnty not null 
end Members; 


MemberName, 
SSN, 

Club_Number, 


County 


end s_16; 


with t_16; use t_16; 
abstract module a_16 is 
authorization s_16 

record MemberRec is 

MemberN«une : MemberN^une; 

MemberSSN : SSN; 


100 


Intermetrics, Inc. 













Appendix A - Compiler Test Suite Source Code 


1 


i 


T 

i . 


I 


I 


L- 


ClubNvunber 

MenO?erAge 

MemberSex 

MemberPhone 

MemberStreet 

MemberCity 

MemberCnty 

end; 


C lub_Nuinber; 
Age; 

Sex; 

Phone; 
Street; 

City; 

County; 


cursor MemberSelect (Req_MeTnberSSN : SSN) for 
select tl.MemberSSN. t2.MemberNeune 
from s_16.Members as tl, s_16.Members as t2 
where tl.MemberSSN = t2.MemberSSN; 


end a_16; 

A.1.39 t3/tl4.sme 


definition module t_7 is 
— Member Information 

domain MemberN 2 une is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERAT10N_AS_INT ( 

Enumeration => SexEnum, 

Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL..SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)c, SQL_Fail); 

status fetch_map neuned is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_0)c, 

100 => raise record_not_found); 

status bool_map named not_found uses boolean is 
(100=>true, 0=>false); 

end t_7; 

A.2 End-to-End Tests 


The end-to-end tests are comprised of the SAMeDL file t2.sine and the Ada application program 
file driver.a. Also included for convenience are the database schema files initbank.sql and 
initi.sql used for initially setting up the database. 


Intermetrics, Inc. 


101 








SAMeDL Development Environment - Test Plan 


A.2.1 t2/t2^ine 

DEFINITION MODULE Bank_def IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 15); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR{length => 15); 

LX3MAIN City_domain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

domain integer declarations 

DOMAIiC SSN_domain IS 

NEW SQL_INT NOT NULL ( FIRST => 0, LAST *> 999999999); 
DOMAIN acct_num_domain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0, LAST => 9999); 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_domain IS 
NEW SQL_REAL; 


102 


Intermetrics, Inc. 





'ndixA - Compiler Test Suite Source Code 


domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
{ENUMERATION => Loan_types, MAP => POS); 

DOMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

-- record definitions 

RECORD Customer_record IS 

Cust_Nzune : Customer_name_domain; 

SSN : SSN_domain; 

Street : Addr_domain; 

City : City_dpmain; 

State : State_domain; 

END custoraer_record; 

RECORD New_Custome*r_record IS 

New_Name : Customer_name_domain; 

New_SSN : SSN_domain; 

New_Street : Addr_domain; 

New_City : City_domain; 

New_State : State_domain; 

END new_customer_record; 

RECORD Fetch_C\istomer_record IS 

Bank_Cust_Cust_Name : Customer_name_domain; 

Bank_Cust_SSN : SSN_domain; 

Bank_Cust_Street_Addr : Addr_domain; 

Bank_Cust_City_Addr : City_domain; 

Bank_Cust_State_Addr : State_domain; 

END fetch_customer_record; 

RECORD Savings_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_nuro_domain; 

Balance : Balance_domain; 

cust_ssn : SSN_domain; 

END Savings_entry; 

RECORD Chequeing_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_num_domain; 

Balance : Balance_domain; 

cust_ssn : SSN_domain; 

END Chequeing_entry; 

RECORD loan_entry IS 

branch_num : branch_num_doroain; 
acct_num : acct_num_domain; 

Balance : Balance_domain; 

Loan_type : Loan_type_domain; 
cust_ssn : SSN_domain; 

END loan_entry; 


Intermetrics, Inc. 


103 



SAMeDL Development Environment - Test Plan 


RECORD Br 2 Uich_entry IS 

branch_num : branch_nviin_<3oniain ; 

Assets : Branch_assets_domain; 

END Branch_entry ; 

RECORD new_Branch_entry IS 
num : branch_nuin_doinain ; 

Assets : Branch_assets_doniain; 

END new_Branch_entry; 

ENUMERATION sqT_enuin IS (SQL_Found, SQL_Not_Found, SQL_Error); 
STATUS fail_type NAMED Is_Found USES sql_enuin IS 

(-999..-1 => SQL_Error, 

0 => SQL_Found, 

100 => SQL_Not_Found); 

END Bank_def; 


104 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


WITH Bank_def; 

USE Bank_def; 

SCHEMA MODULE Bank IS 

Basic customer information 

TABLE Cust IS 

Cust_Name : Customer_name_domain, 

SSN not null : SSN_domain, 

Street_addr ; Addr_domain, 

City_addr : City_domain, 

State_addr : State_domain 
END cust; 

— Checking account 

TABLE cheque IS 

branch_num : branch_num_domain, 
acct_num not null : acct_num_domain. 
Balance : Balance_domain, 

cust_ssn not null : SSN_domain 
END cheque; 

— Savings account 

TABLE savings IS 

branch_num : branch_num_domain, 
acct_num not null ; acct_num_domain, 
Balance : Balance_domain, 

cust_ssn not null : SSN_domain 
END savings; 

-- loan account 

TABLE loan IS 

branch_num : branch_nuro_domain, 
acct_num not null : acct_num_domain. 
Balance : Balance_domain, 

Loan_type : loan_type_domain, 
cust_ssn not null ; SSN_domain 
END loan; 

-- Branch information 
TABLE Branch IS 

num : brfinch_num_domain , 

Assets : Branch_assets_domain 

END Branch; 

END Bank; 


Intermetrics, Inc. 


105 




SAMeDL Development Environment - Test Plan 


WITH Bank_def; 

USE Bank_def; 

EXTENDED ABSTRACT MODULE Bank_proc IS 
AUTHORIZATION Bank 

-- procedures 


commit statement 

PROCEDURE Commit_work -IS 
COMMIT WORK; 

delete statement 

PROCEDURE Delete_customer_loan 

(loan_number_in : acct_num_domain) IS 
DELETE FROM 

Bank.Loan 

WHERE 

Bank.Loan.acct_num = loan_number_in; 


rollback statement 

PROCEDURE rollback_work IS 
ROLLBACK WORK; 

update statement 

PROCEDURE Up_save_acct_bal 

(acct_num_in : acct_num_domain; 
transaction : balance_domain ) 

IS 

UPDATE 

Bank.savings 

SET 

Bank.savings.balance = 

Bank.savings.balance transaction 

WHERE 

Bank.savings.acct_num = acct_num_in; 

PROCEDURE S_and_L IS 
UPDATE 

Bank.Loan 

SET 

Bank.Loan.balance =0.0; 

insert statement (query) 

PROCEDURE move_cheque_to_save 

(account_num_in ; acct_num_domain) 

IS 

INSERT INTO 

Bank.savings 
SELECT * 

FROM 


106 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


WHERE 


Bank.cheque 

Bank.cheque.acct_nuin >= account_nuin_in; 


Intermetrics, Inc. 


107 






SAMeDL Development Environment - Test Plan 


insert statement (values) 


select statement 

PROCEDURE Get_cust_profile (SSN_in : SSN_domain) IS 
SELECT * 

INTO 

Customer_Profile : customer_record 

FROM 

Bank.cust 

WHERE 

Bank.cust-SSN = SSN_in; 
insert statement (values) 


select statement 

PROCEDURE Get_save_record 

(acct_num_in : acct_niim_domain) IS 
SELECT * 

INTO 

savings_record : savings_entry 

FROM 

Bank.savings 

WHERE 

Bank.savings.acct_nuro * 

acct_num_in; 

-- cursors 


-- cursors with different predicates in the WHERE statement 


-- comparison predicate = 

CURSOR customer_accounts(SSN_in : SSN_domain) FOR 
SELECT 

Bank.savings.cust_ssn. 

Bank.savings.acct_num. 

Bank.savings.balance 

FROM 

Bank.savings 

WHERE 

Bank.savings.cust_ssn = SSN_in ; 
comparison predicate >= 

CURSOR loans_over(loan_balance_in : balance_domain) FOR 
SELECT 

Bank.Loan.acct_num. 

Bank.Loan.branch_num. 

Bank.Loan.cust_ssn. 


108 


Intermetrics, Inc. 




Appendix A - Compiler Test Suite Source Code 


Bank. Loan. baleuxce 

FROM 

Bank.Loan . 

WHERE 

Bank.Loan.balance >= loan_balance_in ; 


comparison predicate <= 

CURSOR loans_under (loan_balemce_in s balance_doinain) FOR 
SELECT 

Bank.Loan.acct_num. 

Bank. Loan. br 2 uich_nuro. 

Bank.Loan.cust_ssn. 

Bank.Loan.balance 

FROM 

Bank.Loan 

WHERE 

Bank.Loan.balance <= loan_balance_in ; 
comparison predicate > 

CURSOR cheque_bal_over ( account_bal_in : Balance_domain ) FOR 
SELECT 

Bank.cheque.acct_num. 

Bank.cheque.balance 

FROM 

Bank.cheque 

WHERE 

Bank.cheque.balance > account_bal_in ; 


comparison predicate < 

CURSOR save_bal_under ( account_bal_in ; Balance_domain ) FOR 
SELECT 

Bank.savings.acct_num. 

Bank.savings.balance 

FROM 

Bank.savings 

WHERE 

Bank.savings.balance < account_bal_in ; 

comparison predicate <> 

CURSOR other_branches 

( branch_num_in : branch_num_domain ) FOR 

SELECT 

Bank.Branch.num 

FROM 

Bank.Branch 

WHERE 

Bank.Branch.num <> branch_num_in ; 
between predicate 
CURSOR large_deposits 

( lower_bound : balance_domain; upper_bound ;balance_domain) FOR 


Intermetrics, Inc. 


109 









SAMeDL Development Environment - Test Plan 


SELECT * 

FROM 

Bank.savings 

WHERE 

Bank.savings.balance 

BETWEEN lower_bound 
AND upper_bound ; 

not between predicate 

CURSOR large_loans 

( lower_bound : balance_domain; upper_bound :balance_doinain) FOR 
SELECT 

Bank. Loan. acct_nuin. 

Bank.Loan.balance, 

Bank. Loan. cust>_ssn 

FROM 

Bank.Loan 

WHERE 

Bank.Loan.balance NOT BETWEEN lower_bound AND upper_bound ; 
like predicate 

CURSOR find_customer (naine_in : customer_neune_domain) FOR 
SELECT 

Bank. cust. cust_naine 

FROM 

Bank.cust 

WHERE 

Bank.cust.cust_naine LIKE neune_in 
ORDER BY 

Bank. cust. cust_neune ; 

exists predicate/null predicate/subquery/quantified predicate 

CURSOR Cust_Null_Count FOR 
SELECT 

ssn 

FROM 

Cust tl. Savings t2 

WHERE 

tl.street_addr IS NULL AND 
tl.ssn = t2.cust_ssn AND 

t2.balance > SOME (SELECT balance FROM bank.savings) AND 
EXISTS (SELECT * FROM loan WHERE loan.cust_ssn=tl.ssn) 


in predicate 

CURSOR Loan_count ( B'ranch_in: branch_nuin_domain ) FOR 
SELECT 


no 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


it 

FROM 

Bank.Loan 

WHERE 

Bank. Loan. Branch_nuin IN (Branch_in) ; 
cursor procs 

CURSOR customer_list FOR 
SELECT * 

FROM 

Bank.oust ; 

IS 

PROCEDURE open_customer IS 
OPEN custoiner_list; 

PROCEDURE close_customer IS 
CLOSE customer_list; 

PROCEDURE fetch_custoiner IS 
FETCH customer_list 

INTO next_customer : fetch_customer_record 
STATUS fail_type; 

PROCEDURE update_customer (new_street : Addr_domain) IS 
UPDATE Bank.oust 

SET Bank.oust.street_addr = new_street 

WHERE CURRENT OF_customer.list; 

PROCEDURE update_customer_null IS 
UPDATE Bank.cust 

SET Bank.cust.street_addr = null 
WHERE CURRENT OF customer_list; 

PROCEDURE delete_custoiner IS 
DELETE FROM Bank.cust; 

END custoiner_list; 


Intermetrics, Inc. 


Ill 






SAMeDL Development Environment - Test Plan 


procedures and cursors used to initialize the database and 
verify the contents of tables after test transactions 

EXTENDED PROCEDURE Connect_Bank is 
CONNECT Bank ; 

PROCEDURE New_customer IS 
INSERT INTO 

Bank.oust (cust_naine named new_n^une, 
ssn n 2 uned new_ssn, 
street_addr neuned new_street, 
city_addr neuned new_city, 
state_addr named new_state) 

FROM 

New_customer_info : new_customer_record 
VALUES; 

PROCEDURE New_chequeing IS 
INSERT INTO 

Bank.cheque 

FROM 

New_chequeing_info : chequeing_entry 
VALUES; 

PROCEDURE New_savings IS 
INSERT INTO 

Bank.savings 

FROM 

New_savings_info : savings_entry 
VALUES; 

PROCEDURE New_loan IS 
INSERT INTO 

Bank.Loan 

FROM 

New_loan_info : loan_entry 
VALUES; 

PROCEDURE New_branch IS 
INSERT INTO 

Bank.Branch 

FROM 

New_branch_info ; new_branch_entry 
VALUES (num,assets); 

PROCEDURE Delete_customers IS 
DELETE FROM 

Bank.cust; 

PROCEDURE Delete_chequeing IS 
DELETE FROM 

Bank.cheque; 

PROCEDURE Delete_savings IS 
DELETE FROM 

Bank.savings; 


112 


Intermetrics, Inc. 




Appendix A - Compiler Test Suite Source Code 


PROCEDURE Delete_loans IS 
DELETE FROM 

Bank.Loan; 

PROCEDURE Delete_Branches IS 
DELETE FROM 

Bank.Branch; 


Intermetrics, Inc. 






SAMeDL Development Environment - Test Plan 


CURSOR List_customers FOR 
SELECT * 

FROM 

Bank.cust 
ORDER BY 

Bank.cust.SSN 


CURSOR List_chequeing FOR 
SELECT * 

FROM 

Bank.cheque 
ORDER BY 

Bank. cheque. acct_nuin 


CURSOR List_savings FOR 
SELECT * 

FROM 

Bank.savings 
ORDER BY 

Bank.savings.acct_num 


CURSOR List_loans FOR 
SELECT * 

FROM 

Bank.Loan 
ORDER BY 

Bank. Loan. acct_nuin 


CURSOR List_branches FOR 
SELECT * 

FROM 

Bank.Branch 
ORDER BY 

Bank.Branch.num 


END Bank_proc; 

A.2J, t2/driver.a 

with text_io; 
with Bank_def; 
with Bank_proc; 

procedure Test_driver is 

use text_io; 
use Bank_def; 
use Bank_proc; 

use customer_neune_doinain_ops ; 
use addr_domain_ops; 
use city_domain_ops; 
use state_domain_ops; 


114 


Intermetrics, Inc. 





Appendix A - Compiler Test Suite Source Code 


use balance_domain_ops; 
use branch_assets_domain_ops; 


I/O declarations 

subtype proinpt_length is integer range 1..60; 
subtype proinpt_line is string (1. .proinpt_length‘last) ; 
subtype proinpt_index is integer range 1..9; 
type test_count is range 1..18; 

type prompt_array is array(prompt_index) of proinpt_line; 
beginning : constant string := "Beginning SAMeDL T2 test program*; 
heading : constant string := 

•TEST DESCRIPTION TEST DESCRIPTION*; 

test_list ; constant prompt_array := prompt_array’( 


( *PT1 

CT4 

•) , 

(*PT2 

CT5 

•) . 

{*PT3 

CT6 

*) . 

(*PT4 

CT7 

•) , 

(*PT5 

CT8 

■), 

("pre 

CT9 

■) , 

("CTl 

CTIO 

■) , 

(■CT2 

CTll 

■) , 

(*CT3 


■)) ; 

promptl: constant string : 

= 


•Enter starting test 

number or A to run entire test 

set;*; 

answer: string(1..80):= 

• 



■ . 

line; prompt_index; 




prompt2: constant string := * Try again (test letters must be 
caps):*; 

prompt_count ; integer range 1..10 := 1; 
length: natural range 0..80; 
test_number : test_count := 1; 
found : boolean := false; 


database interaction declarations 


type customer_index is range 1..16; 
type chec)cing_index is range 1..14; 
type savings_index is range 1..17; 
type loan_index is range 1..12; 
type branch_index is range 1,.4; 
type customer_rec is 
record 

neune : customer_neune_domain_not_null ; 

ssn : ssn_domain_not_null; 

street : addr_domain_not_null; 

city : city_domain_not_null; 

state : state_domain_not_null; 

end record; 


type Savings_rec is 
record 

acct_num 
balance : 


: acct_num_domain_not_null; 

balance_domain_not_null; 


IntermeP’ics, Inc. 


115 







SAMeDL Development Environment - Test Plan 


cust_ssn : ssn_doinain_not_null; 

branch_nuin : branch_nuin_doinain_not_null; 

end record; 

type Checking_rec IS 
record 

acct_nuin : acct_nuin_doinain_not_null; 

balance : balance_doinain_not_null; 

cust_ssn : ssn_doniain_not_null; 

branch_num : branch_niiin_donvain_not_null; 

end record; 

type loan_rec IS 
record 

acct_nuin 
balance : 
loan_type 
cust_ssn 
branch_nun\ 
end record; 

type Branch_rec IS 
record 

branch_nuin : branch_niiin_domain_not_null; 

assets : branch_assets_domain_not_null; 

end record; 

type custoiner_array is array (custoiner_index) of customer_rec; 
type checking_array is array (checking_index) of checking_rec; 
type savings_array is array (savings_index) of savings_rec; 
type loan_array is array (loan_index) of loan_rec; 
type branch_array is array {branch_index) of branch_rec; 


customers ; 

constant customer_array := 

customer_array’( 

(“Scarlett 

", 111111111,'Byrd 

",■Potomac 

","Md*), 



('Smith 

",111345678,'North 

","Gaithersburg 

*,'Md'), 



('Glenn 

", 123456789,"Sand Hill 

",'Potomac 

'Md'), 



("Green 

",123546789,"Walnut 

","Bethesda 

","Md"), 



("Brown 

",123987654,"Chestnut 

", "Alexandria 

a 

a 



("Plum 

",132549876,'Bethesda 

","Bethesda 

", "Md") , 



("Mustard 

",222222222,"Spice 

","Hyattsville 

","Md"), 



(“Jones 

',222345678,"Main 

“,"Arlington 

","Va"), 



("Hayes 

^333345678,"Bridge 

","Potomac 

","Md"), 



("Curry 

',444345678,"Tree 

", "Columbia 

","Md"), 



{"Lindsay 

", 555345678,"Park 

","Bethesda 

","Md"), 



(“Turner 

",666345678, "Putneun 

“,"Fairfax 


", "Va') , 


: acct_nuin_doinain_not_null ; 

balance_domain_not_null; 

: loan_type_doinain_not_null; 

: ssn_domain_not_null; 

: branch_nvun_domain_not_null; 


116 


Intermetrics, Inc. 






Appendix A - CompHfr Test Suite Source Code 


('Williams 
","Md*), 

(• Ad^lms 
"Md'), 

('Brooks 
'."DC'), 

("Johnson 
',"Md")): 


',777345678,'Nassau 
",888345678,'Spring 
', 987654321,'Senator 
',999345678,'Alma 


',"Gaithersburg 
','Silver Spring 
','Washington 
',"Silver Spring 


checking_list : constant checking_array := checking_array'( 
(1,1000.0,222345678,bethesda), 

(2,50.0,111345678,gaithersburg), 

(3,50000.0,333345678,potoroac), 

(4,300.0,444345678,silver_spring), 

(5,2500.0,555345678,bethesda), 

(6,500.0,777345678,gaithersburg), 

(7,1500.0,888345678,3ilv6r_spring), 

(8,15000.0,123456789,potomac), 

(9,1250.0,987654321,bethesda), 

(10,-10.0,123546789,silver_spring), 

(11,150.0,123546789,gaithersburg), 

(12,350.0,123987654,potomac), 

(13,4500.0,132549876,bethesda), 

(14,40000.0,222222222,gaithersburg) ); 

savings_list : constant savings_array := savings_array'( 
(101,3000.0,222345678,bethesda), 

(102, 4000.0,111345678,gaithersburg), 

(103,2000.0,111345678,potomac), 

(104,50.0,333345678,potomac), 

(105,1500.0,444345678,silver_spring), 

(106, 50000.0,555345678,bethesda), 
(107,50000.0,555345678,silver_spring), 

(108, 50000.0,555345678,potomac), 

(109,200.0,666345678,gaithersburg), 

(110,300.0,777345678,gaithersburg), 

(111,200.0,777345678,silver_spring), 

(112,4000.0,999345678,silver_spring), 

(113,200.0,123456789,potomac), 

(114,60000.0,987654321,bethesda), 

(115,10000.0,123546789,bethesda), 

(116,50000.0,132549876,potomac), 

(117,20.0,222222222,gaithersburg)); 

loan_list : constant loan_array := loan_array'( 

(201,3000.0,personal,111345678,gaithersburg), 
(202,300000.0,mortgage,333345678,potomac), 

(203,32000.0,auto,444345678,bethesda), 

(204,150000.0,mortgage,555345678,bethesda), 

(205,1500.0,personal,777345678,gaithersburg), 

(206,1500.0,personal,999345678,potomac), 

(207,50000.0,mortgage,123456789,potomac), 

(208,320000.0,mortgage,987654321,bethesda), 

(209,180000.0,mortgage,123546789,bethesda), 

(210,5000.0, auto, 123987654,potomac), 

(211,240000.0.mortgage,132549876,potomac), 

(212,14000.0,auto,111111111,silver_spring)); 


Intermetrics, Inc. 


117 








SAMeDL Development Environment - Test Plan 


branch_list : constant branch_array := branch_array'( 
(bethesda,814250.0), 

(silver_spring,71490.0), 

(gaithersburg,49720.0), 

(potomac,764100.0)) ; 


fetch_results : boolean := false; 
test_results : boolean := false; 
current_test ; string(1..4) := * ■; 

procedure init_customer_db is 

customer_row : custoiner_index; 
next_customer: customer_rec; 
new_cust : new_custoiner_record; 

begin 

init_customer: for custoiner_row in custoiner_index loop 
next_custonier := customers (customer_row) ; 
assign (new_cust.new_name,with_null(next_customer.name)); 
new_cust.new_ssn := next_customer.ssn; 

assign (new_cust.new_street,with_null(next_customer.street)); 
assign (new_cust;.new_city,with_null{next_customer.city)); 
assign (new_cust.new_state,with_null{next_customer.state)); 
new_customer (new_cust); 
end loop init_customer; 
commit_work; 
end init_customer_db; 

procedure verify_customer_db(verified: out boolean) is 
function verify_customer_db return boolean is 

customer_row : customer_index; 
db_custoroer; list_customers.row_type; 
in_customer: customer_rec; 
is_S2une ; boolean ;= true; 

begin 

list_customers.open; 

check_customer: for customer_row in customer_index loop 
list_customers.fetch(db_customer,fetch_results); 
in_customer := customers(customer_row); 
is_same := is_same and 

(db_customer.bank_cust_cust_name 

= with_nul1(in_customer.name)) and 
(db_customer.bank_cust_ssn = in_customer.ssn) and 
(db_customer.bank_cust_street_addr 

=■ with_null(in_customer.street)) and 
(db_customer.bank_cust_city_addr 

= with_null(in_customer.city)) and 
(db_customer.bank_cust_state_addr 

= with_null(in_customer.state)); 
end loop check_customer; 
verified := is_s^une; 
list_customers.close; 
commit_work; 
return is_same; 


118 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


end verify_customer_db; 

Procedure init_checking_db is 
input_entry : checking_rec; 
db_entry : chequeing_entry; 
checking_row : checking_index; 
begin 

init_checking: for checking_row in checking_index loop 
input_entry := checking_list(checking_row); 
db_entry.acct_num := input_entry.acct_nuin; 
db_entry.cust_ssn := input_entry.cust_ssn; 

assign (db_entry.balance , with_null(input_entry.balance)); 
assign (db_eptry.branch_nuin , 

with_null (input_entry .branch_niiin)) ; 
new_chequeing (db_entry); 
end loop init_checking; 
coininit_work; 
end init_checking_db; 


procedure verify_ch6cking_db {verified : out boolean ) is 
function verify_checking_db return boolean is 

checking_row : checking_index; 
db_checking; list_chequeing.row_type; 
in_checking: checking_rec; 
is_saine ; boolean := true; 

begin 

1is t_chequeing.open; 

check_checking: for checking_row in checking_index loop 
in_checking := checking_list(checking_row); 
list_chequeing.fetch(db_checking,fetch_results); 
is_same ;= is_seuiie and 

(db_checking.bank_cheque_acct_nuin = in_checking.acct_nuin) and 
(db_checking.bank_cheque_cust_ssn = in_checking.cust_ssn) and 
(db_checking.bank_cheque_balance = with_null(in_checking.balance)) 

and 

(db_checking. bank_cheque_branch_nuin 

= with_null(in_checking.branch_nuin) ) ; 
end loop check_checking; 
verified := is_saine; 
list_chequeing.close; 
coirani t_work ; 
return is_same; 
end verify_checking_db; 

procedure init_savings_db is 

input_entry ; savings_rec; 
db_entry : savings_entry; 
savings_row : savings_index; 
begin 

init_savings: for savings_row in savings_index loop 
input_entry := savings_list(savings_row); 
db_entry .acct_nunv := input_entry .acct_nuin; 
db_entry.cust_ssn ;= input_entry.cust_ssn; 

assign (db_entry.balance , with_null(input_entry.balance)); 


Intermetrics, Inc. 


119 








SAMeDL Development Environment - Test Plan 


assign (db_entry.breuich_nuin , 

witb_null(input_entry.branch_nuin)) ; 
new_savings (db_entry); 
end loop init_savings; 
connnit_work; 
end init_savings_db; 

procedure verify_savings_db (verified : out boolean ) is 
function verify_savings_db return boolean is 

savings_row ; savings_index; 
db_savings: 1ist_savings.row_type; 
in_savings: savings_rec; 
is_S2une : boolean := true; 

begin 

1ist_savings.open; 

check_savings: for savings_row in savings_index loop 
in_savings ;= savings_list(savings_row); 
list_savings.fetch(db_savings,fetch_results); 
is_s 2 une := is_saine and 

(db_savings .bank_savings_acct_nuin = in_savings .acct_nuin) and 
(db_savings.bank_savings_cust_ssn = in_savings.cust_ssn) and 
(db_savings.bank_savings_balance = with_null(in_savings.balance)) 

and 

(db_savings.bank_savings_branch_nuin = 
with_null (in_savings .branc‘h_num)) ; 
end loop check_savings; 
list_savings.close; 
conimit_work ; 
return is_seune; 
end verify_savings_db; 


procedure init_loan_db is 

input_entry : loan_rec; 
db_entry : loan_entry; 
loan_row : loan_index; 
begin 

init_loan: for loan_row in loan_index loop 
input_entry := loan_list(loan_row); 
db_entry .acct_nuin ;= input_entry.acct_nuin; 
db_entry.cust_ssn := input_entry.cust_ssn; 
assign (db_entry.loan_type, 

with_null(input_entry.loan_type)); 
assign (db_entry.balance , with_null(input_entry.balance)); 
assign (db_entry.branch_num , 

with_null (input_entry .branch_nuin)) ; 
new_loan (db_entry); 
end loop init_loan; • 
coimni t_wor k; 
end init_loan_db; 

procedure verify_loan_db (verified : out boolean ) is 
function verify_loan_db return boolean is 

loan_row : loan_index; 


120 


Intermetrics, Inc. 





Appendix A - Compiler Test Suite Source Code 


db_loan: list_loans.row_type; 
in_loan: loan_rec; 
is_saine : boolean := true; 

begin 

list_loans.open; 

check_loan: for loan_row in loan_index loop 
in_loan ;= loan_list(loan_row); 
list_loan3.fetch(db_loan,fetch_results); 
is_saine := is_s 2 une and 

(db_loan.bank_loan_acct_niiin = in_loan.acct_nuin) and 
(db_loan.bank_loan_cust_ssn = in_loan.cust_ssn) and 
(db_loan.bank_loan_loan_type = with_nul1(in_loan.loan_type)) and 
(db_loan.bank_loan_balance = with_null(in_loan.balance)) and 
(db_loan.bank_loan_branch_num = with_null(in_loem.branch_nuin)); 
end loop check_loan; 
list_loans.close; 
connni t_wor k; 
return is_saine; 
end verify_loan_db; 


procedure init_branch_db is 

input_entry : branch_rec; 
db_entry : new_branch_entry; 

branch_row : branch_index; 

begin 

init_branch: for branch_row in branch_index loop 
input_entry := branch_list(branch_row); 
assign (db_entry.nuin, 

with_null(input_entry .branch_nuin)) ; 
assign (db_entry.assets, with_null(input_entry.assets)); 
new_branch { db_entry); 
end loop init_branch; 
commit_work; 
end init_branch_db; 

procedure verify^branch_db (verified : out boolean) is 
function verify_branch_db return boolean is 

branch_row : branch_index; 
db_branch: 1ist_branches.row_type; 
in_branch: branch_rec; 
is_seune : boolean := true; 

begin 

list_branches.open; 

check_branch: for branch_row in branch_index loop 
in_branch := branch_list(branch_row); 
list_branches.fetch(db_branch,fetch_results); 
is_saine := is_saine and 

(db_branch. bank_branch_nuin = 
with_null (in_branch.branch_nuin)) 

and 

(db_branch.bank_branch_assets = 
with_null(in_branch.assets)); 


Intermetrics, Inc. 


121 









SAMeDL Development Environment - Test Plan 


end loop check_branch; 
verified := is_same; 
list_branches.close; 
coirani t_wor k; 
return is_seune; 
end verify_branch_db; 

procedure PT_1 ( results : out boolean) is 

-- verify delete procedure 

subtype PTl_index is loan_index range 1..11; 
type PTl_array is array (PTl_index) of loan_rec; 
loan_list : constant PTl_array := PTl_array'( 

(201,3000.0,personal,111345678,gaithersburg), 

(202,300000.0,mortgage,333345678,potomac), 

(203,32000.0,auto,444345678,bethesda) , 

(204,150000.0,mortgage,555345678,bethesda), 

(206,1500.0,personal,999345678,potomac), 

(207,50000.0,mortgage,123456789,potomac), 

(208,320000.0,mortgage,987654321,bethesda), 

(209,180000.0,mortgage,123546789,bethesda), 

(210,5000.0,auto,123987654,potomac), 

(211,240000.0,mortgage,132549876,potomac), 

(212,14000.0,auto,111111111,silver_spring)); 
loan_number : acct_num_domain_not_null ;= 205; 
in_loan : loan_rec; 
db_loan ; list_loans.row_type; 
loan_row : PTl_index ;= 1; 
good_check : boolean :=true; 
begin 

delete_customer_loan (loan_number); 
commit_work; 
list_loans.open; 

while good_check and (loan_row < PTl_index'last) loop 
in_loan := loan_list(loan_row); 
list_loans.fetch(db_loan,fetch_results); 
good_check := good_check and 
(db_loan.bank_loan_acct_num = in_loan.acct_num) and 
(db_loan.bank_loan_cust_ssn = in_loan.cust_ssn) and 
(db_loan.bank_loan_loan_type = with_null(in_loan.loan_type)) and 
(db_loan.bank_loan_balance = with_null(in_loan.balance)) and 
(db_loan.bank_loan_branch_nuro = with_null(in_loan.branch_num)); 

loan_row := loan_row + 1; 
end loop; 
list_loans.close; 
delete_loans; 
commit_work; 
init_loan_db; 
results := good_check; 
end PT_1; 

procedure PT_2 (results: out boolean) is 

-- verify rollback procedure 

begin 

delete_customers; 


122 


Intermetrics, Inc. 







Appendix A ~ Compiler Test Suite Source Code 


rollback_work; 

results := verify_customer_db; —(results); 
end PT_2; 

procedure PT_3 (results: out boolean) is 

-- verify select procedure 

SSN : SSN_domain_not_null := 123456789; 
in_profile : customer_rec := 

(“Glenn 123456789,“Sand Hill “,“Potomac 

“,“Md“); 

db_customer : customer_record; 
begin 

get_cust_profile (SSN, db_customer); 

results := (db_customer.cust_n^une = with_null(in_profile.name)) 

and 

(db_customer.ssn = in_profile.ssn) amd 

(db_customer.street = with_null(in_profile.street)) and 
(db_customer.city = with_null(in_profile.city)) and 
(db_customer.state = with_null(in_profile.state)) ; 

rollback_work; 
end PT_3; 

procedure PT_4 (results: out boolean) is 

— verify update procedure (single row) 

acct_num ; acct_num_domain^not_null := 103; 
transaction ; balance_domain_not_null := 100.0; 
savings_record : savings_entry; 

new_balance : balance_domain_not_null := 2100.0; 
begin 

Up_save_acct_bal(acct_num, with_null(transaction)); 
get_save_record(acct_num, savings_record); 

results := with_null(new_balance) = savings_record.t>alance; 
rollback_work; 
end PT_4; 

procedure PT_5 ( results : out boolean ) is 
-- verify update procedure (entire table) 


loan_record : list_loans.row_type; 
zero : balance_donvain_not_null := 0.0; 
is_zero : boolean := true; 

begin 
s_and_l; 

1ist_loans.open; 

verify : for loan_row in loan_index loop 

list_loans.fetch(loan_record,fetch_results); 
is_ 2 ero := is_zero and (loan_record.bank_loan_balance 
= with_null(zero)); 
end loop verify; 


Intermetrics, Inc. 


123 







SAMeDL Development Environment - Test Plan 


results := is_zero; 
rollback_work; 
end pt_5; 

procedure PT_6 ( results : out boolean ) is 
-- verify insert procedure (query) 
type PT6_index is range 1..20; 

type PT6_array is array (PT6_index) of savings_rec; 
answer_array : constant PT6_array := PT6_array'( 

(12,350.0,123987654,potomac), 

(13,4500.0,132549876,bethesda), 

(14,40000.0,222222222,gaithersburg) , 

(101,3000.0,222345678,bethesda), 

(102,4000.0,111345678,gaithersburg), 

(103,2000.0,111345678,potomac), 

(104,50.0,333345678,potomac), 

(105,1500 1 0,444345678,silver_spring), 

(106, 50000.0,555345678,bethesda), 

(107,50000.0,555345678,silver_spring), 

(108, 50000.0,555345678,potomac), 

(109,200.0,666345678,gaithersburg), 

(110,300.0,777345678,gaithersburg), 

(111, 200.0,777345.678, silver_spring), 

(112,4000.0,999345678,silver_spring), 

(113,200.0,123456789,potomac), 

(114,60000.0,987654321,bethesda), 

(115,10000.0,123546789,bethesda), 

(116,50000.0,132549876,potomac), 

(117,20.0,222222222,gaithersburg)); 
lower_bound : acct_nunl_domain_not_null := 12; 
row_index : PT6_index; 
is_scune : boolean := true; 
db_savings : list.:_savings. row_type; 
in_savings : savings_rec; 

begin 

move_cheque_to_save (lower_bound); 
list_savings.open; 

verify : for row_index in PT6_index loop 
in_savings := answer_array(row_index); 
list_savings.fetch(db_savings,fetch_results); 
is_same ;= is_same and 

(db_savings.bank_savings_acct_num = in_savings.acct_num) and 
(db_savings.bank_savings_cust_ssn = in_savings.cust_ssn) and 
(db_savings.bank_savings_balance = with_null(in_savings.balance)) 

and 

(db_savings.bank_savings_branch_num = 
with_null(in_savings.branch_num)); 
end loop verify; 
list_savings.close; 
rollback_work; 
results := is_same; 
end PT_6; 

procedure CT_1 ( results: out boolean) is 


124 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


-- verify cursor select with comparison predicate 

type CTl_index is range 1..2; 
type CTl_row is 
record 

ssn : ssn_domain_not_null; 
account_num : acct_num_domain_not_null; 

* balance : balance_domain_not_null; 

end record; 

type CTl_array is array (CTl_index) of CTl_row; 
answer_array : constant ctl_array := ctl_array'( 
(111345678,102,4000.0), 

(111345678,103,2000.0)); 
row_num ; CTl_index; 

db_row : customer_accounts.row_type; 
in_row : CTl_row; 

ssn : ssn_domain_not_null := 111345678; 

■ verified : boolean := true; 

begin 

* customer_accounts.open(ssn); 

verify : for row_num in CTl_index loop 
' customer_accounts.fetch(db_row,fetch_results); 

in_row := answer_array(row_num); 
verified := verified emd 

(db_row.cust_ssn = in_row.ssn) and 
(db_row.acct_num = in_row.account_nvun) and 
» (db_row.balance = with_null (in_row.)3alance) ) ; 

end loop verify; 

> results := verified; 

customer_accounts.close; 
rol lbac)c_wor)c ; 
end CT_1; 

procedure CT_2 ( results : out Isoolean) is 

— verify cursor select with >= predicate 

type CT2_index is range 1..5; 
type CT2_row is 

: record 

i acct_num : acct_nuro_domain_not_null; 

‘ t)alance : l5alance_doinain_not_null ; 

ssn : ssn_domain_not_null; 
branch_num : branch_num_doinain_not_null; 
j, end record; 

type CT2_array is array (ct2_index) of CT2_row; 
answer_array : constant ct2_array := ct2_array'( 

(202,300000.0,333345678,potomac), 

» (204,150000.0,555345678,bethesda), 

(208,320000.0,987654321,bethesda), 

(209,180000.0,123546789,bethesda), 
i (211,240000.0,132549876,potomac)); 

row_num : ct2_index; 
in_row : ct2_row; 

I db_row ; loans_over.row_type; 

j verified : (boolean := true; 

lower_ix>und : k>alance_domain_not_null := 150000.0; 

i 

i 


Intermetrics, Inc. 


125 








SAMe D L Development Environment - Test Plan 


begin 

loans_over.open(with_null{lower_bound)); 
verify : for row_nuin in CT2_index loop 

loans_over.fetch(db_row,fetch_results); 
in_row : = answer_array ( row_nuin ) ; 
verified := verified and 

(db_row.acct_num = in_row.acct_nuin) and 
(db_row.balance = with_null(in_row.balance)) and 
(db_row.cust_ssn = in_row.ssn) and 

(db_row.branch_num = with_null (in_row.branch_n\iin)) ; 
end loop verify; 
results := verified; 
loans_over.close; 
ro1lback_work; 
end CT_2; 

procedure CT_3 (results : out boolean) is 

— verify cursor select with <= predicate 

type CT3_index is range 1..4; 
type CT3_row is 
record 

acct_nuin : acct_nuin_doroain_not_null; 
balance : balance_dcanain_not_null; 

ssn : ssn_domain_not_null; 
branch_nuin : branch_nuin_doinain_not_null; 
end record; 

type CT3_array is array (ct3_index) of CT3_row; 
answer_array : constant ct3_array := ct3_array‘( 
(201,3000.0,111345678,gaithersburg), 

(205,1500.0,777345678,gaithersburg), 

(206,1500.0,999345678, potoinac), 

(210,5000.0,123987654,potoroac)); 
verified : boolean := true; 
row_nuin : ct3_index; 
db_row : loans_under.row_type; 
in_row : ct3_row; 

upper_bound : balance_doniain_not_null := 5000.0; 
begin 

loans_under.open(with_null(upper_bound)); 
verify : for row_nuin in CT3_index loop 

loans_under.fetch(db_row,fetch_results); 
in_row := answer_array (row_nuni) ; 
verified := verified and 

(db_row.acct_nuin = in_row.acct_nuin) and 
(db_row.balance = with_null(in_row.balance)) and 
(db_row.cust_ssn = in_row.ssn) and 

(db_row.branch_nuin = with_null (in_row.branch_nuin) ) ; 
end loop verify; 
results := verified; 
loans_under.close; 
rollback_work; 
end CT_3; 

procedure CT_4 (results : out boolean) is 


126 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


-- verify cursor select with > predicate 

type CT4_index is range 1..7; 
type CT4_row is 
record 

acct_nuin : acct_nuin_<ion>ain_not_null; 
balance : balance_doinain_not_null; 
end record; 

type CT4_array is array (ct4_index) of CT4_row; 
answer_array : constant ct4_array := ct4_array'( 
(3,50000.0), 

(5,2500.0) , 

(7,1500.0), 

(8,15000.0), 

(9,1250.0), 

(13,4500.0), 

(14,40000.0) ); 

db_row : cheque_bal_over.row_type; 
in_row : ct4_row; 
row_nuin ; ct4_index; 
verified : boolean := true; 

lower_bound ; balance_doinain_not_null := 1001.0; 
begin 

cheque_bal_over.open(with_null(lower_bound)); 
verify : for row_nuin in CT4_index loop 
in_row := answer_array (row_nuin) ; 
cheque_bal_over.fetch(db_row,fetch_results); 
verified := verified and 

(db_row.acct_nuxn = in_row.acct_nuin) and 
(db_row.balance = with_nul1(in_row.balance)); 
end loop verify; 
results := verified; 
cheque_bal_over.close; 
rol lback_wor)c ; 
end CT_4; 

procedure CT_5 (results ; out boolean) is 

— verify cursor select with < predicate 

type CT5_index is range 1..6; 
type CT5_row is 
record 

acct_nuin : acct_nuin_domain_not_null ; 
balance : balance_doinain_not_null; 
end record; 

type CT5_array is array (ct5_index) of CT5_row; 
answer_array ; constant ct5_array ;= ct5_array*{ 
(104,50.0), 

(109,200.0) , 

(110,300.0), 

(111,200.0), 

(113,200.0), 

(117,20.0)) ; 

db_row : save_bal_under.row_type; 
in_row : ct5_row; 
row_nuin ; ct5_index; 


Intermetrics, Inc. 


127 






SAMeDL Development Environment - Test Plan 


verified : boolean := true; 

upper_bound : balance_domain_not_null := 1500.0; 
begin 

save_bal_under.open(with_null(upper_bound)); 
verify ; for row_nuin in CT5_index loop 
in_row := answer_array (row_nuin) ; 
save_bal_under.fetch(db_row,fetch_results); 
verified := verified and 

(db_row.acct_nuin = in_row.acct_num) and 
(db_row.balance = with_null(in_row.balance)); 
end loop verify; 
results := verified; 
save_bal_under.close; 
rollback_work; 
end CT_5; 

procedure CT_6 (results : out boolean) is 

— verify cursor select with <> predicate 

type CT6_index is range 1..3; 
type CT6_array is array (ct6_index) of 
branch_nuin_domain_not_null ; 

answer_array ; constant ct6_array := ct6_array'( 
(bethesda), 

(silver_spring), 

(gaithersburg)); 

db_row ; other_branches.row_type; 
in_row : branch_nujn_doinain_n6t_null; 
row_num : ct6_index; 
verified : boolean := true; 

branch ; branch_nuin_doinain_not_null ;* potomac; 
begin 

other_branches.open(with_null(branch)); 
verify : for row_nuni in CT6_index loop 

other_branches.fetch(db_row,fetch_results); 
in_row := answer_array (row_nuin); 
verified := verified and 

(db_row.num = with_null(in_row)); 
end loop ver .fy; 
results := verified; 
other_branches.close; 
ro1lback_work; 
end CT_6; 

procedure CT_7 (results : out boolean) is 
-- verify cursor select with between predicate 
type CT7_index is range 1..5; 

type CT7_array is array (ct7_index) of savings_rec; 
answer_array : constant ct7_array := ct7_array'( 

(106, 50000.0,555345678,bethesda), 
(107,50000.0,555345678,silver_spring), 

(108, 50000.0,555345678,potomac), 

(114,60000.0,987654321,bethesda), 


128 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


(116,50000.0*, 132549876,potomac) ) ; 
db_row : large_deposits.row_type; 

upper_bound : balance_donvain_not_null := 60000.0; 
lower_bound : balance_domain_not_null := 40000.0; 
in_row : savings_rec; 
row_nuin : ct7_index; 
verified : boolean := true; 

begin 

large_deposits.open(with_null(lower_bound),with_null(upper_bound)) 

verify : for row_num in CT7_index loop 
in_row ;= answer_array (row_nuin) ,* 
large_deposits.fetch(db_row,fetch_results); 
verified := verified and 

(db_row.bank_savings_acct_nuin = in_row.acct_num) and 

(db_row.bank_savings_cust_ssn = in_row.cust_ssn) and 

(db_row.bank_3avings_balance = with_null(in_row.balance)) and 

{db_row.bank_savings_branch_nuin = with_null (in_row.branch_nuin) ) • 

end loop verify; 

results := verified; 

large_deposits.close; 

rollback_work; 

end CT_7; 

procedure CT_8 (results : out boolean) is 

-- verify cursor select with NOT BETWEEN predicate 

type CT8_index is range 1..5; 
type CT8_row is 
record 

acct_nuin : acct_nuni_domain_not_null ; 
balance : balance_doinain_not_null; 
ssn : 3sn_doinain_not_null ; 
end record; 

type CT8_array is array (ct8_index) of CT8_row; 
answer_array : constant ct8_array := ct8_array'( 
(202,300000.0,333345678), 

(204,150000.0,555345678), 

(208,320000.0,987654321) , 

(209,180000.0,123546789) , 

(211,240000.0,132549876)); 
upper_bound : balance_doroain_not_null := 60000.0; 
lower_bound : balance_doinain_not_null := 20.0; 
db_row : large_loans.row_type; 
in_row ; CT8_row; 
row_nuin : ct8_index; 
verified : Jaoolehn ;= true; 

begin 

large_loans .open (with_null (lower_bound) , with_null (upper_)x3und) ) ; 
verify : for row_nuin in CT8_index loop 
in_row := answer_array {row_num); 
large_loans.fetch(db_row,fetch_results); 
verified := verified and 
(db_row.acct_nuin = in_row.acct_nuin) and 


Intermetrics, Inc. 


129 





SAMeDL Development Environment - Test Plan 


(db_row.cust_ssn = in_row.ssn) and 

(db_row.balance = with_null(in_row.balance)); 

end loop verify; 

results ;= verified; 

large_loans.close; 

rollback_work; 

end CT_8; 

procedure CT_9 (results : out boolean) is 
-- verify cursor IN predicate 
type CT9_index is range 1..5; 

type CT9_array is array (ct9_index) of loan_rec; 
answer_array : constant ct9_array := ct9_array'( 

(202,300000.0,mortgage,333345678,potomac), 

(206,1500.0,personal,999345678,potomac), 

(207,50000.0,mortgage,123456789,potomac), 

(210,5000.0,auto,123987654,potomac), 

(211,240000.0,mortgage,132549876,potomac)); 
verified : boolean := true; 
in_row : loan_rec; 
db_row ; loan_count.row_type; 
row_num : ct9_index; 

branch : branch_niim_domain_not_null := potomac; 
begin 

loan_count.open(with_null(branch)); 
verify : for row_num in CT9_index loop 
in_row :» answer_array (row_nv>m) ; 
loan_count.fetch(db_row,fetch_result3) ; 
verified := verified and 

(db_row.bank_loan_acct_num = in_row.acct_num) and 

(db_row.bank_loan_cust_ssn = in_row.cust_ssn) auid 

(db_row.bank_loan_loan_type = with_nul1(in_row.loan_type)) and 

(db_row.bank_loan_balance = with_null(in_row.balance)) and 

(db_row.bank_loan_branch_num = with_null(in_row.branch_num)); 

end loop verify; 

results := verified; 

loan_count.close; 

rollback_work; 

end CT_9; 

procedure CT_10 (results ; out boolean) is 

-- verify cursor like predicate 

type CT10_index is range 1..2; 
type CT10_array is array (ctl0_index) of 
customer_neune_domain_not_null; 

answer_array : constant ctl0_array := ctl0_array'( 

('Johnson '), 

('Jones ' ) ) ; 

db_row : find_customer.row_type; 
in_row .- customer_neune_domain_not_null ; 
row_num : ctl0_index; 
verified ; boolean := true; 

naroe_in : customer_neune_doroain_not_null := 'J% ' ; 


130 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


neui»e_in : customer_naine_doinain_not_null ;= *J_ 

begin 

£ind.customer.open(with_null(naune_in)); 
verify : for row_nuin in CT10_index loop 

find_custoiner.fetch(db_row,fetch_results); 
in_row ;= answer_array {row_nuin) ; 
verified := verified and 

(db_row.cust^naine = with_null (in_row)) ; 
end loop verify; 
results := verified; 
find_customer.close; 
rolIback^work; 
end CT_10; . 

procedure CT_11 (results : out boolean) is 

— verify cursor procedures 

new_record : constant customer_rec := customer_rec• 

("Smith •,111345678,"South ","Gaithersburg 

","Md"); 

search_ssn : ssn_domain_not_null := 111345678; 
db_street : addr_d<Mttain_type; 

new_street : addr_domain_not_null ;= "South "; 

customer_row ; customer_index := 1; 

verified ; boolean := false; 

db_row ; fetch_customer_record; 

sqlval : sql_enum; 

begin 

customer_list.open_customer; 

customer_list.fetch_customer(db_row,sqlval); 

-- Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval = SQL_FOUND then 

customer_row ;= customer_row +1; 

else 

results := false; 
return; 
end if; 

while (db_row.bank_cust_ssn /= search_ssn) and 
(customer_row < custoiner_index* last) loop 
customer_list.fetch_customer(db_row,sqlval); 

— Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval- = SQL_FOOND then 

customer_row ;= customer_row + 1; 
else 

results := false; 
return; 
end if; 
end loop; 

if db_row.bank_cust_ssn = search_ssn then 


Intermetrics, Inc. 


131 







SAMeDL Development Environment - Test Plan 


assign {db_street,with_null(new_street)); 
customer_list .update_custonier (db_street) ; 
custoiner_list. close_customer; 
commit_work; 

customer_list .open_custoiner; 
custon»er_row ;= 1; 

customer_list.fetch_customer(db_row,sqlval); 

-- Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROfi then 
results false; 
return; 

elsif sqlval = SQL_FOUND then 
null; 
else 

results := false; 
return; 
end if; 

while (db_row.bank_cust_3sn /= search_ssn) and 
{custoiner_row < customer_index*last) loop 
customer_list.fetch_custoiner(db_row,sqlval); 

— Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval = SQL_FOUND then 

customer_row := custoiner_row + 1; 
else 

results false; 
return; 
end if; 
end loop; 

verified := (db_row.bank_cust_ssn = search_ssn) and 

{ db_row.bank_cust_street_addr = db_street ); 
customer_list. close_custonver; 

else 

verified := false; 
end if; 

-- Update the customer street addr to null 
if verified then 

customer_list.open_customer; 

customer_list.fetch_customer(db_row,sqlval); 

-- Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval = SQL_FOUND then 

customer_row := customer_row + 1; 
else 

results := false; 
return; 
end if; 

while (db_row.bank_cust_ssn /= search_ssn) and 
(customer_row < customer_index'last) loop 
customer_list.fetch_customer(db_row,sqlval); 

-- Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 


132 


Intermetrics, Inc. 









Appendix A - Compiler Test Suite Source Cod e 




/ 


I * 


■1 

I 




1 

i . 



! ■' 
i. 


elsif sqlval * SQL_FOUND then 

custoiner_row ;= customer_row + 1; 
else 

results false; 
return; 
end if; 
end loop; 

if db_row.bank_cust_ssn = search_ssn then 
custoiner_list .update_customer_null ; 
custoiner_list .close_custoiner; 
commit_work; 

customer_list-open_customer; 
customer_row := 1; 

custoiner_list .fetch_custoiner (db_row,sqlval) ; 

— Check Status Code 

if sqlval = SQL_NOT_FOOND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval * SQL_FOUND then 
null; 
else 

results := false; 
return; 
end if; 

while (db_row.bank_cust_ssn /= search_ssn) emd 
{customer_row < customer.index'last) loop 
customer_list.fetch_customer(db_row,sqlval); 

— Check Status Code 

if sqlval = SQL_NOT_FOUND or sqlval = SQL_ERROR then 
results := false; 
return; 

elsif sqlval = SQL_FOUND then 

custoioer_row ;= custoiner_row + 1; 
else 

results := false; 
return; 
end if; 
end loop; 

verified ;= (db_row.bank_cust_ssn = search_ssn) and 
is_null(db_row.bank_cust_street_addr); 
custoiner_list .close_customer; 
else 

verified := false; 
end if; 
end if; 

if verified then 
declare 

cust_row : cust_null_count.row_type; 
isok : boolean; 
begin 

cust_null_count.open; 

cust_null_count.fetch(cust_row,isok); 
if isok s FALSE then 
results := false; 
return; 
end if; 

results := (cust_row.ssn = search_ssn); 

end; 


Intermetrics, Inc. 


133 














SAMeDL Development Environment - Test Flan 


else 

results := false; 
end if; 

rollback_work; 
end CT_11; 


begin 

put_line(beginning); 
put_line (heading) ; 

loopl: for line in prompt_index loop 
put_line(test_list(line)); 
end loop loopl; 
put(prompt1); 

while not found and (prompt_count < 10) loop 
prompt_count ;= prompt_count + 1; 
get_line(answer,length); 
case length is 
when 1 => 

case answer(1) is 

when 'a' I 'A* => 
found := true; 
test_number := 1; 
when others => 
put(prompt2); 
end case; 
when 2 => 

if (answerd. .2) = “al") or 
(answer(1..2) = "Al*) or 
(answer(1..2) = “aL*) or 
(answerd. .2) * ‘AL*) then 
found:= true; 
test_number ;= 1; 

else 

put(prompt2); 
end if; 

when 3 => 

if answerd..3) = 'PTl* then 
found := true; 
test_number ;= 1; 
elsif answerd..3) = •PT2* then 
found ;= tx;ue; 
test_nuinber := 2; 
elsif answerd-.3) = •PT3" then 
found:= true; 
test_nuraber := 3; 
elsif answerd..3) = "1^4* then 
found::: true; 
test_nuinber ;= 4; 
elsif answerd..3) = "PT5* then 
found:= true; 
test_number := 5; 
elsif answerd..3) = "PT6* then 
found:= true; 
test_number := 6; 
elsif answerd..3) = *CT1* then 
found:= true; 
test_nuinber := 7; 


134 


Intermetrics, Inc. 




Appendix A - Compiler Test Suite Source Code 


elsif answer(1..3) 
found:= true; 

s 'CT2' 

then 

test_nurober := 

8; 


elsif answer(1..3) 
found:= true; 

= 'CT3' 

then 

test_number := 

9; 


elsif answer(1..3) 
found:= true; 

= •CT4' 

then 

test_nuinber : = 

10; 


elsif answer(1..3) 
found:s true; 

= 'CTB' 

then 

test_nuiDber : = 

11; 


elsif answer(1..3) 
found:s true; 

= ’CT6* 

then 

test_number := 

12; 


elsif answer(1..3) 
foundtrue; 

= 'CT7* 

then 

test_nuinber : = 

13; 


elsif euiswer (1.. 3) 
found:= true; 

= 'CT8' 

then 

test_number := 

14; 


elsif answer(1..3) 
found:a true; 

_ -CT9' 

then 

test_nuinber : = 

15; 



else 

put (prompt2); 
end if; 


when 4 => 

if Jinswer (1.. 4) = *CT10‘ then 
found ':= true; 
test_nunvber := 16; 
elsif answer(1..4) = 'CTll* then 
found := true; 
test_number := 17; 

else 

put (prompt2); 
end if; 

when others => 
put (proitipt2); 
end case; 
end loop; 

if prompt_count >= 10 then 

put_line('exceeded attempt limit: try again later'); 
else 

connect_bank; 

init_customer_db; 

test_results := verify_customer_db; —{test_results); 
if test_results then 
init_chec)cing_db; 

test_results := verify_checking_db; —(test_results); 
if test_results then 
init_savings_db; 

test_results ;= verify_savings_db; —(test_results); 
if test_results then 
init_loan_db; 

test_results := verify_loan_db; —(test_results); 
if test_results then 


Intermetrics, Inc. 


135 







/ 


SAMeDL Development Environment - Test Plan 


init_branch_db; 

test_results verify_bremch_db; —(test_results); 
if test_results then 
put_line 

(* databases initialize successfully*); 

else 

put_line 

(* Branch dated^ase failed to initialize*); 
end if; 

else 

put_line 

(*Loan database failed to initialize*); 
end if; 

else 

put_line 

(*Savings database failed to initialize*); 
end if; 
else 

put_line (*Checking database failed to initialize*); 
end if; 

else 

put_line (*Custoiner database failed to initialize*); 
end if; 

if test_results = true then 

while test_nuinber < test_count•last loop 
case test_nuinber is 
when 1 => 

current_test :* 'PTl *; 

PT_1(test_resuits); 
when 2 ®> 

current_test := •PT2 *; 

PT_2(test_results); 
when 3 => 

current_test ;= *PT3 *; 

PT_3(test_results); 
when 4 => 

current_test ;= * PT4 *; 

PT_4(test_results); 
when 5 => 

current_test := *PT5 *; 

PT_5(test_results); 
when 6 => 

current_test := * PT6 *; 

PT_6(test_results); 
when 7 => 

current_test := *CT1 *; 

CT_1(test_results); 
when 8 => 

current_test := *CT2 *; 

CT_2(test_results); 
when 9 => 

current_test ;= *CT3 *; 

CT_3(test_results); 
when 10 => 

current_test := *CT4 *; 

CT_4(test_results); 
when 11 => 


136 


Intermetrics, Inc. 










Appendix A - Compiler Test Suite Source Code 


current_test := "CTS *; 

CT_5(test_results); 
when 12 => 

current_test := "CTe *; 

CT_6(test_results); 
when 13 => 

current_test := "CT? ■; 

CT_7(test_results); 
when 14 => 

current_test := ‘CTS *; 

CT_8(test_results); 
when 15 => 

current_test := *^9 *; 

CT_9(test_results); 
when 16 => 

current_test := "CTIO"; 

CT_10(test_results); 
when 17 => 

current_test : = CTl 1" ; 

CT_11(test_results); 
when others => 

put_line ("we should not be here"); 
end case; 


put (current_test); 
if test_results = false then 
put_line(" has failed"); 
exit; 

else 

put_line(" has passed"); 
test_nuinber :s test_nuinber +1; 
end if; 
end loop; 

put_line (" the test set is complete"); 
end if; 
end if; 

end Test_driver; 


A^.3 t2/initbank^l 


INTEGER NOT NULL, 
CHAR(15), 

CHAR(15) , 

CHAR{15)); 


create tABLE cust 

(cust_neune CHAR(15), 

SSN 

Street_addr 
City_addr 
State_addr 
create tABLE savings 

(Branch_nuin SMALLINT, 

acct_nuin SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

cust_ssn INTEGER NOT NULL); 

create tABLE cheque 

{Branch_n\ain SMALLINT, 

acct_num SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

cust_ssn INTEpER NOT NULL); 

create tABLE loan 

(Branch_num SMALLINT, 


Intermetrics, Inc. 


137 







SAMeDL Development Environment - Test Plan 


acct_nuin SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

Loan_type SMALLINT, 

cust_ssn INTEGER NOT NULL); 

create tASLE branch 

(Num SMALLINT, 

Assets DECIMAL(12,2) ); 


A.2.4 t2/initi,sql 

create tABLE ban)c.cust 

(Name CHAR(15), 

SSN INTEGER NOT NULL, 

Street_addr CHAR(15), 

City_addr CHAR(15), 

State_addr CHAR(15)); 

create tABLE ban)c. savings 

(Branch_num SMALLINT, 

acct_nxan SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

cust_ssn INTEGER NOT NULL); 

create tABLE banlc.cheque 

(Branch_nvun SMALLINT, 

acct_num SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

cust_san INTEGER NOT NULL); 

create tABLE bank.loan 

(Branch_n\an SMALLINT, 

acct_num SMALLINT NOT NULL, 

Balance DECIMAL(12,2), 

Loan_type SMALLINT, 

cust_ssn INTEGER NOT NULL); 

create tABLE bank.branch 

(Num SMALLINT, 

Assets DECIMAL(12,2) ); 

A.3 Error Tests 

A.3.1 tl/etl,sine 

definition module d_etl is 
-- Member Information 

domain MemNeune is new •SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

t 

domain Club_Nuinber is new SQL_SMALLINT Not Null; 


138 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


domain Sum_Domain is new SQL_SMALLINT Not Null; 
domain Count_Domain is new SQL_INT; 

end d_etl; 


with d_etl; use d_etl; 
schema module s_recdb is 
table Members is * 

MemberName not null : MemNeune, 

MemberSSN not null : SSN, 

ClubNumber not null ' : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStrect : Street, 

MemberCity : City, 

MemberCnty not null ^ : County 

end Members; 

end s_recdb; 


with d_etl; use d_etl; 
abstract module a_etl is 
authorization s_recdb 

record MemberRec is 

R_MemberN 2 une : MemNeune; 

R_Sum : Sum_Domain; 

R_Count : Count_Domain; 

end; 

— Check row record confomumce 

procedure PD_MeinberSelect (Req_MemberSSN : SSN) is 
select MemberName, SUM(MemberAge), COUNT(*) 

— ERR ^ 

from s_recdb.Members 

where s_recdb.Members.MemberSSN = Req_MemberSSN ; 

cursor MemberSelect (ReqiMemberSSN : SSN) for 
select MemberName, SUM(MemberAge), COUNT(*) 

— ERR 

from s_recdb.Members 

where s_recdb.Members .MemberSSN = Req_MeinberSSN ; 
is 

procedure Fetchit is 

fetch into Row ; MemberRec; 

— ERR 

end MemberSelect; 

cursor D_MemberSelect (Req_MemberSSN : SSN) for 
select MemberName, SUM(MemberAge), COUNT(*) 

-- ERR 

from s_recdb.Members 

where s_recdb.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 


Intermetrics, Inc. 


139 










SAMeDL Development Environment - Test Plan 


fetch; 

end D_MeinberSelect; 
end a_etl; 

A.3^ tl/etl^me 

DEFINITION MODULE d_et2 IS 

DOMAIN Branch_assets_doinain IS 

NEW SQL_REAL NOT NULL (L => 0.0, R => lE+10); 

— Illegal Literal 

END d_et2; 

A.3J tiyet3.sine 

DEFINITION MODULE E_et3 IS 

DOMAIN Customer_n^e_doinain IS 
NEW SQL_CHAR(length => 50); 

RECORD Custoiner_record IS 

CNeune : Custo^ner_n^une_do^nain; 

END custon\er_record; 

END E_et3; 

WITH E_et3; 

USE E_et3; 

SCHEMA MODULE T1_III IS 

TABLE Customer IS 

CNeune : Customer_neune_doinain 

END Customer; 

END T1_III; 

WITH E_et3; 

USE E_et3; 

ABSTRACT MODULE A_et3 IS 
AUTHORIZATION Tl^III 

CURSOR find_customer (name_in ; customer_neune_domain) FOR 
SELECT 

T1_III.customer.Cname 

FROM 

T1_III.customer 

WHERE 

name_in LIKE T1_III.customer.Cname 

— only be input parm, 

-- literal, or USER 


END A_et3; 

A.3.4 tl/et4.snie 


definition module D_et4 is 
-- Member Information 


140 


Intermetrics, Inc. 









domain MeinNeune is new SQL_CMAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => l.LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, MAP => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 
domain Sum_0omain is new SQL_SMALLINT Not Null; 
domain Count_Doroain is new SQL_INT; 

end D_et4; 


with D_et4; use D_et4; 
schema module RecDB is 
table Members is 

MemberName not null : MemNeune, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 

end Members; 

table Members2 is 

MemberN2une2 not null : MemN 2 UDe, 

MemberSSN2 not null : SSN, 

ClubNumber2 not null ; Club_Number, 

MemberAge2 : Age, 

MeroberSex2 : Sex, 

MemberPhone2 : Phone, 

MemberStreet2 : Street, 

MemberCity2 ; City, 

MemberCnty2 not null : County 

end Members2; 

end RecDB; 


with D_et4; use D_et4; 
abstract module A_et4 is 
authorization RecDB 

record MemberRec is 

R_MemberName : MemNeune; 

R_Sum : Sum_Domain; 

R_Count : Count_Domain; 


Intermetrics, Inc. 


141 









SAMeDL Development Environment - Test Plan 


end; 

procedure PD_MeinberSelect (Req^emberSSN : SSN) is 
select MemberNeune, SUM(MemberAge), COUNT(*) 

-- May not be NO_DOMAIN ^ 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 

cursor MemberSelect (Req_MemberSSN : SSN) for 
select MemberName, SUM(MemberAge), COUNT(*) 

-- May not be NO_DOMAIN '' 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure Fetchit is 

fetch into Row : MemberRec; 
end MemberSelect; 

cursor D_MemberSelect (Req_MemberSSN : SSN) for 
select MemberName, SUM(MemberAge), COUNT(*) 

-- May not be NO_DOMAIN ^ 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN ; 
is 

procedure FetchltT is 
fetch; 

end D_MemberSelect; 
end A_et4; 

tl/etS^sme 

— Chec)t for various type/domain inconsistencies 

DEFINITION MODULE d_et5 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

EXDMAIN Customer_naune_domain IS 
NEW SQL_CHAR(length => 15); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN City_domain IS 

NEW SQL_CHAR(length => 15); 

EXJMAIN State_domain IS 


142 


Intermetrics, Inc. 





Appenttix A - Compiler Test Suite Source Code 


NEW SQL_CHAR(length => 2); 
domain integer declarations 
DOMAIN SSN_domain IS 

NEW SQL_INT NOT NULL ( TIRST => 0, LAST => 999999999); 
DOMAIN acct_num_domain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0, LAST => 9999); 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_domain IS 
NEW SQL_REAL; 


domain enumeration declarations 

IX)MAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
(ENUMERATION => Loan_types, MAP => POS); 
DOMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record IS 

Cust_Name : Customer_n 2 une_domain; 

SSN : SSN_domain; 

Street : Addr_domain; 

City : City_domain; 

State ; State_domain; 

END customer_record; 

RECORD Savings_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_num_domain; 

Balance : Balance_domain; 

cust_ssn : SSN_domain; 

END Savings_entry ; 

RECORD Chequeing_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_num_domain; 

Balance : Balance_domain; 

cust_ssn : SSN_domain; 

END Chequeing_entry; 

RECORD loan_entry IS 

branch_num : branch_num_domain; 
acct_niam : acct_num_domain; 

Balance : Balance_domain; 


!ntermetric5, Inc. 


143 







SAMeDL Development Environment - Test Plan 


Loan_type : Loan_type_doinain; 

cust_ssn : SSN_domain; 

END loan_entry; 

RECORD Branch_entry IS 

branch_nuin : branch_nuin_domain ; 

Assets ; Branch_assets_doinain; 

END Branch_entry; 

END d_et5; 

WITH d_et5; 

USE d_et5; 

SCHEMA MODULE s_et5 IS 

Basic customer information 

TABLE Cust IS 
Cust_Name 
SSN not null 
Street_addr : 

City_addr : 

State_addr : 

END cust; 

-- Checking account 

TABLE cheque IS 

branch_num ; branch_num_domain, 
acct_num not null ; acct_nuin_domain. 

Balance : Balance_domain, 

cust_ssn not null : SSN_domain 

END cheque; 

-- Savings account 

TABLE Save IS 

branch_num : br^mch_num_doroain, 
acct_num not.null : acct_ntun_domain. 

Balance : Balance_domain, 

cust_ssn not null : SSN_domain 

END Save; 

-- loan account 

TABLE loan IS 

branch_num : branch_num_domain, 
acct_num not null : acct_num_domain. 
Balance : Balance_domain, 

Loan_type : loan_type_domain, 
cust_ssn not null : SSN_domain 
END loan; 

-- Branch information 
TABLE Branch IS 

num : branch_num_domain , 

Assets ; Branch_assets_domain 


: Customer_neune_domain, 
: SSN_domain, 
Addr_doma in, 

City_domain, 

State_domain 


144 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


END Branch ; 
END s_et5; 


WITH d_et5; 

USE d_et5; 

ABSTRACT MODULE a_et5 IS 
AUTHORIZATION s_etS 


CURSOR large_depositsl 

( upper_bound :balance_doinain) FOR 
SELECT * 

FROM 

s_et5.3ave 

WHERE 


— ERR 


s_et5.save.balance = (SELECT Cust_SSN FROM s_et5.save 

where s_et5.save.balance = 


0 . 0 ) 


CURSOR large_deposits2 

( upper_bound :balance_doiaain) FOR 
SELECT * 

FROM 

s_et5.save 

WHERE 


-- OK 


s_et5.save.balance = (SELECT balance FROM s_et5.save 

where s_et5.save.balance = 0.0) 


CURSOR large_deposi.ts3 

( upper_bound :l)alance_do>nain) FOR 
SELECT * 

FROM 


s_et5.save 

WHERE 

s_et5.save.balance 


-- ERR 


(SELECT * FROM s_et5.save 

where s_et5.save.tjalance 


0 . 0 ) 


CURSOR large_deposits4 

( upper_bound ;balance_doroain) FOR 
SELECT * 

FROM 

s_et5.save 

WHERE 

s_et5.save.balance 

BETWEEN 0 — ERR 

AND upper_bound 


CURSOR large_deposits5 

( upper_Jx)und :balance_doinain) FOR 
SELECT * 

FROM 

s_et5.save 


Intermetrics, Inc. 


145 









SAMeDL Development Environment - Test Plan 


WHERE 

s_et5.save.balance 

BETWEEN interest_rate_doinain (0.0) — ERR 
AND upper_bound 


PROCEDURE Delete_customer_loan 

(loan_n\anber_in : acct_nuin_doinain) IS 
DELETE FROM 

s_et5.Loan 

WHERE 

SSN_doroain{s_et5.Loan.acct_nuin) = loem_nuinber_in; — ERR 


CURSOR loans_over{loan_balance_in : balance_doinain) FOR 
SELECT 

s_et5. Loan. acct_nuin, 
s_et5. Loan. branch_nuin, 
s_et5.Loan.cust_ssn, 
s_et5.Loan.balance 

FROM 

s_et5 .Loan 

WHERE 

s_et5.Loan.balance >= Bethesda — ERR 


CURSOR loans_under(loan_balance_in ; balance_domain) FOR 
SELECT 

s_et5. Loan. acct_nuin, 
s_et5. Loan. branch_nuni, 

3_etS.Loan.cust_ssn, 
s_et5.Loan.balance 

FROM 

s_et5.Loan 

WHERE 

branch_nuin <= Bethesda — OK 


CURSOR large_loans 

( lower_bound ; balance.domain; upper_bound :balance_don»ain) FOR 
SELECT 

s_et 5. Loan. acct_nuin, 
s_et5.Loan.balance, 
s_et5.Loan.cust_ssn 

FROM 

s_et5.Loan 

WHERE 

Bethesda NOT BETWEEN Bethesda AND Bethesda -- ERR 


like predicate 

CURSOR find_custon>er {neune_in : customer_neune_domain) FOR 
SELECT 

s_et5. cust. cust_naine 

FROM 

s_et5.cust 


146 


Intermetrics, Inc. 







fndixA - Compiler Test Suite Source Code 




WHERE 

s_et5.cust.cust_naine LIKE 2.0 — ERR 


in predicate 

CURSOR Loan_count { Branch_in; br 2 mch_niiiiL.<^oinain ) FOR 
SELECT 

* 

FROM 

s_et5.Loan 

WHERE 

s_et5.Loan.Branch_nuin IN (Branch_in, Bethesda, Potomac) 


CURSOR Loan_count2 ( Branch_in: branch_nunL.d<»nain ) FOR 
SELECT 

* 

FROM 

s_et5 .Loan 

WHERE 

s_et5.Loeui.Branch_mam IN (Branch_in, Bethesda, auto) — ERR 

t 

END a_et5; 

AJ.6 tl/et6.sine 

— Tests error checking on constant decls 

definition module d_et6 is 
— Member Information 

domain MemNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new ^QL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 
enumeration SexEN is (Female, Male); 
domain Sex is new SQL_ENOMERATION_AS_INT ( 

Enumeration => SexEnum, Map => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Niunber is new SQL_SMALLINT Not Null; 
domain Money is new SQL_REAL; 

constant C_Namel: MemName is •1234567890123456789012345678901'; -- 

ERR 

constant C_SSN ; SSN is 123456789; -- ERR 

constant C_Club_Number ; Club_Number is 10.0; 

constant C_Club_Numberl: Club_Number is lO.OE+0; -- ERR 

constant C_M1 : Money is 39; 

constant C_M2 ; Money is 39.0; 

constant C_M3 : Money is 39.E+0; 


Intermetrics, Inc. 


147 











u ' i'-, ' 


SAMeDL Develotment Environment - Test Plan 


constant C_Sex is F; — ERR 
constant C_Sexl: Sex is Female; — ERR 
end d_et6; 

A.3.7 tiyetT^me 

— Check assignment conformance on selects 

DEFINITION MODULE d_et7 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Si1ver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 15); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN City_domain IS 

NEW SQL.CHAR(length => 15); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2); 

domain integer declarations 

DOMAIN SSN_domain IS 

NEW SQL_INT NOT NULL ( FIRST => 0, LAST => 999999999); 
DOMAIN acct_nuro_doroain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0, LAST => 9999); 

domain real declarations 

DOMAIN Balahce_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST .=> 0.0, LAST => 1.0); 

DOMAIN Loan_payroent_domain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_domain IS 
NEW SQL_REAL; 


148 


Intermetrics, Inc. 






rndixA - Compiler Test Suite Source Code 


domain enumeration declarations 

DOMAIN Loan_type_doroain IS 
NEW SQL_ENUMERATION_AS_int 
(ENUMERATION => Loan_types, MAP => POS) ; 
DOMAIN branch_num_domain IS 
NEW SQL_EN0MERA'TT0N_AS_INT 
(ENUMERATION => Branches, MAP => POS); 
RECORD Customer_record IS 

Cust_Name : Customer_neune_domain; 

SSN : SSN_domain; 

Street : Addr.domain; 

City : City.domain; 

State : State.domain; 

END customer.record; 

END d_et7; 


Intermetrics, Inc. 


149 






SAMeDL Development Environment - Test Plan 


WITH d_et7; 

USE d_et7; 

SCHEMA MODULE s_et7 IS 

Basic customer information 
TABLE Oust IS 

Cust_N«une : Customer_name_domain, 

SSN not null : SSN_domain, 

Street_addr : Addr_domain, 

City_addr : City_domain, 

State_addr ; State_domain 
END oust; 


-- Savings account 
TABLE Save IS 

branch_num : branch_nunv_domain, 
acct_num not null : acct_num_domain. 
Balance : Jalance_domain, 

cust_ssn not null : SSN_domain 
END Save; 

END s_et7; 


150 


Intermetrics, Inc. 







Appendix A zXompiler Test Suite Source Code 


WITH d_et7; 

USE d_et7; 

ABSTRACT MODULE a_et7 IS 
AUTHORIZATION s_et7 

RECORD Savings_entry IS 

branch_nuin : branch_nuin_doinain; 
acct_nuin : acct_nuin_doinain; 

Balance . ; Balance_doinain; 

cust_ssn : SSN_domain; 

END Savings_entry; 

RECORD Savings_entry2 IS 

branch_n\inv : branch_nuin_doinain; 
acct_niain : acct_nuin_domain; 

Balance : Balance_domain; 

cust_ssn : SSN_doinain; 
cust_ssn2 : SSN_doinain; 

END Savings_entry2; 

RECORD Savings_entry3 IS 

branch_nuin : branch_nuin_doinain; 
acct_num ; acct_nuin_doinain; 

Balance : Balance_doniain; 

END Savings_entry3; 

RECORD Customer_record_plus IS 
branch_num : branch_num_doinain; 
acct_nuin ; acct_nuin_domain; 

Balance : Balance_doinain; 

cust_ssn : SSN_doinain; 

Cust_Name ^ : Custoiner_nanie_doinain; 

SSN ; SSN_doinain; 

Street : Addr_don>ain; 

City ; City_doinain; 

State ; State_don»ain; 

END customer_record_plus; 

RECORD Custon\er_record_plusl IS 
branch_nuin : branch_num_doinain; 
acct_nuin : acct_nuin_doinain; 

Balance : Balance_domain; 

cust_ssn : SSN_domain; 

Cust_Naune : Customer_naine_doroain; 

SSN ; SSN.domain; 

Street : Addr_don>ain; 

City : City_donvain; 

State : State_doinain; 

Statel : State_doinain; 

END custon\er_record_plusl; 

RECORD Custon>er_record_plus2 IS 
branch_num : branch_nuin_doroain; 
acct_nuin : acct_nuin_dojnain; 

Balance : Balance_dotnain; 


Intermetrics, Inc. 


151 








SAMeDL Development Environment - Test Plan 


cust_ssn 


: SSN_don«ain ; 


Cust_Naine : Customer_name_domain; 

SSN : SSN_domain; 

Street : Addr_doinain; 

City : City_domain; 

END customer_record_plus2; 


RECORD customer_record_minus is 

Cust_Naine : Custoiner_naume_doinain; 

Addr : Addr_Doinain; 

City : City_domain; 

State : State_doinain; 

END customer_record_minus ; 

PROCEDURE Get_save_record 

(acct_num_in : acct_nuin_doinain) IS 
SELECT * 

INTO 

savings_record : savings_entry 

FROM 

s_et7. save 

WHERE 

s_et7.save.acct_num = 

acct_num_in; 


PROCEDURE Get_save_racordl 

(acct_nuin_in : acct_num_domain) IS 
SELECT * -- ERR 

INTO 

savings_record : savings_entry2 

FROM 

s_et7.save 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in; 


PROCEDURE Get_save_record2 

(acct_num_in ; acct_nuro_donwiin) IS 
SELECT * -- ERR 

INTO 

savings_record : savings_entry3 

FROM 

s_et7.save 

WHERE 

s_et7 , save. acct_nuin = 

acct_num_in; 


PROCEDURE Get_save_record3 

(acct_nuin_in : acct_nuin_domain) IS 
SELECT * 

INTO 

savings_record : custoroer_record_plus 

FROM 

s_et7.save, oust 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in ; 


152 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


PROCEDURE Get_save_record4 

(acct_nunuin : acct_nunL.doinain ) IS 
SELECT * — ERR 

INTO 

3avings_record : customer_record_plusl 

FROM 

s_et7.save, cust 

WHERE 

s_et7 , save. acct_n\an = 

acct_nuin_in; 


PROCEDURE Get_savel.record5 

(acct_num_in : acct_nuin_domain) IS 
SELECT * -- ERR 

INTO 

savings_record : customer_record_plus2 

FROM 

s_et7.save, cust 

WHERE 

s_et7. save. acct_nuin = 

acct_nuin_in ; 

PROCEDURE Get_save_record6 

{acct_num_in : acct_nuit_domain) IS 
SELECT branch_nuin, acct_num. Balance, cust.ssn 
INTO 

savings_record ; savings_entry 

FROM 

s_et7,save 

WHERE 

s_et7.save.acct_nuffl = 

acct_nuin_in ; 


PROCEDURE Get_save_record7 

(acct_num_in : acct_nuin_doinain) IS 
SELECT branch_num, acct_nuin. Balance, cust_ssn —ERR 
INTO 

savings_record : savings_entry2 

FROM 

s_et7. save 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in ; 


PROCEDURE Get_save_record8 

(acct_nuin_in : acct_nuin_doinain) IS 
SELECT branch_nuin, acct_nuin. Balance, cust_ssn —ERR 
INTO 

savings_record ; savings_entry3 

FROM 

s_et7.save 

WHERE 

s_et7 . save. acct_nuin = 

acct_nurn_in; 


Cursor CGet_save_record 

(acct_nuin_in : acct_nuin_domain) FOR 


Intermetrics, Inc. 


153 






SAMeDL Development Environment - Test Plan 


SELECT * 

FROM 

s_et7.save 

WHERE 

s_et7 . save. acct_nuin = 

acct_nun\_in; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
savings_entry; 

END; 

Cursor CGet_save_recordl 

(acct_nvun_in : acct_num_doinain) FOR 
SELECT * -- ERR 

FROM 

s_et7.save 

WHERE 

s_et7. save. acct_niiin = 

acct_nuin_in; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
savings_entry2; 

END; 

Cursor CGet_save_record2 

(acct_nuin_in acct_nuin_domain) FOR 
SELECT * — ERR 

FROM 

s_et7. save 

WHERE 

s_et7.save.acct_num = 

acct^nuin_in ; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
savings_entry3; 

END; 

Cursor CGet_save_record3 

(acct_nuiti_in ; acct_nun»_domain) FOR 
SELECT * 

FROM 

s_et7.save, oust 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
custoiner_record_plus ; 

END; 

Cursor CGet_save_recofd4 

(acct_nuin_in : acct_nun\_domain) FOR 
SELECT * -- ERR 

FROM 

s_et7.save, oust 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in ; 


154 


Intermetrics. Inc. 






Appendix A - Compiler Test Suite Source Code 


T 


IS 

procedure CFETCH IS FETCH INTO savings_record : 
custoiner_record_plusl ; 

END; 

Cursor CGet_save_record5 

(acct_nuin_in : acct_nuin_doinain) FOR 
SELECT * -- ERR 

FROM 

s_et7.save, cust 

WHERE 

s_et7.save.acct_num = 

acct_nuin_in ; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
custonier_record_plus2; 

END; 

Cursor CGet_save_record6 

(acct_niiin_in : acct_niiin_doinain) FOR 
SELECT branch_nuin, acct_nviin, Balemce, cust_ssn 
FROM 

s_et7.save 

WHERE 

s_et7. save. acct_nvim = 

acct_nuin_in; 

IS 

procedure CFETCH IS FETCH INTO savings_record ; 
savings_entry; 

END; 

Cursor CGet_save_record7 

(acct_nuni_in : acct_nuin_domain) FOR 
SELECT branch_nuin, acct_nuro. Balance, cust_ssn —ERR 
FROM 

s_et7.save 

WHERE 

s_et7 . save. acct_nuin = 

• acct_nuin_in ; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
savings_entry2; 

END; 

Cursor CGet_save_record8 

(acct_nuin_in : acct_nuin_doinain) FOR 
SELECT branch_nuin, acct_nuin. Balance, cust_ssn —ERR 
FROM 

s_et7. save 

WHERE 

s_et7 . save. acct_nuin = 

acct_nuin_in ; 

IS 

procedure CFETCH IS FETCH INTO savings_record : 
savings_entry3; 

END; 


Intermetrics, Inc. 


155 




SAMeDL Development Environment - Test Plan 


PROCEDURE New_customeir IS 
INSERT INTO 

s_et7.cust — ERR 

FROM 

New_customer_info : customer_record_ininus 
VALUES; 

PROCEDURE New_custoinerl IS 
INSERT INTO 

s_et7.cust -- ERR 

FROM 

New_customer_info : customer_record 
VALUES (Cust_Naine, SSN, City_addr, State_addr); 

PROCEDURE New_custoiner2 IS 
INSERT INTO -- ERR 

s_et7.cust (Cusc_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_custoiner_info : custoiner_record_ininus 
VALUES (Cust_Neune, NULL, Street_addr, City_addr, State_addr); 

PROCEDURE New_custonier3 IS 
INSERT INTO -- ERR 

s_et7.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_customer_info : customer_record_ininus 
VALUES (Cust_Naine, SSN, *11261 Col Pike*, City_addr, 
State_addr); 

PROCEDURE New_customer4 IS 
INSERT INTO -- ERR 

s_et7.cust (Cust_Naine, Street_addr, City_addr, State_addr) 
VALUES (Cust_N£une, City_addr, Street_addr, State_addr); 

PROCEDURE New_customer5 IS 
INSERT INTO -- ERR 

s_et7.cust (Cust_Neune, SSN, Street_addr, City_addr, 

State_addr) 

VALUES (Cust_Naine, SSN, Street_addr, City_addr,' ‘The State of 

MD* ) ; 

PROCEDURE New_customer6 IS 
INSERT INTO -- ERR 

s_et7.cust (Cust_Neune, SSN, Street_addr, City_addr, 

State_addr) 

VALUES (Cust_Naroe, SSN, NULL, City_addr); 

PROCEDURE New_customer7 IS 
INSERT INTO -- ERR 

s_et7.cust (Cust_Naine, SSN, Street_addr, City_addr, 

State_addr) 

FROM 

New_customer_info : custoiner_record_minus 
VALUES ; 

END a_et7; 


156 


Intermetrics, Inc. 





Appendix A - Compiler Test Suite Source Code 


AJ.8 tl/et8.snie 


-- Check Assign conformance for set clauses 
DEFINITION MODULE d_et8 IS 


enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain enumeration declarations 


DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
(ENUMERATION => Loan_types, MAp => POS); 

DOMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_Char 
(ENUMERATION => Branches, MAP => IMAGE); 


constant Cl ; loan_type_do»ain is mortgage; 

constant C2 ; loan_type_domain is loan_type_domain (loan_type_domain 


auto)); 

constant C3 : branch_num_domain is Bethesda; 
constant C4 : branch_num_doroain is branch_num_domain 
(branch_num_domain ( 


Silver_Spring)); 


END d_et8; 


Intermetrics, Inc. 


157 



SAMeDL Development Environment - Test Plan 


WITH d_et8; 

USE d_et8; 

SCHEMA MODULE s_et8 IS 

TABLE Cust IS 

Coll : loan_type_domain, 
Col2 : loan_type_domain, 
Co 13 : branch_nuin_doinain, 
Col4 : branch_num_doinain, 
Col5 : loan_type_domain, 
Co 16 : branch_num_doniain 
END cust; 

END s_et8; 


158 


Intermetrics. Inc. 






WITH d_et8; 

USE d_et8; 

ABSTRACT MODULE a_et8 IS 
AUTHORIZATION s_et8 

PROCEDURE Upd_Cust IS 
UPDATE s_et 8.cus t 
SET 

Coll = Cl. 

Col2 = C3, — ERR 

Col3 = C3, 

Col4 = C4, 

Col5 = Gaithersburg, — ERR 
Col6 = Gaithersburg; 

CURSOR Curs 

FOR SELECT * FROM s_et8.cust ; 

IS 

PROCEDURE Upd (val : breuich_nuin_doinain) IS 
update s_et8.cust 

SET 

Coll = val, — ERR 

Col2 = C3, — ERR 

Col3 = val, 

Col4 = C4, 

Col5 = Gaithersburg, — ERR 
Col6 = Gaithersburg; 

END; 

END a_et8; 

A3.9 tl/et9.sine 

-- Check misc 

DEFINITION MODULE d_et9 IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring,. 

Gaithersburg, 

Potonwic) ; 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain enumeration declarations 

DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERATION_AS_int 
(ENUMERATION => Loan_types, MAP => POS); 

DOMAIN branch_num_domain IS 


Intermetrics, Inc. 


159 










SAMeDL Development Environment - Test Plan 


NEW SQL_ENUMERATION_AS_Char 
(ENUMERATION => Branches, MAP => IMAGE); 

record Rec is 

cl : branch_nuin_donvain; 
end Rec_Name; — ERR: neune must match 

status Stat uses bran<;h_num_domain — ERR 
is ( 1 => mortgage, 

2 => auto ); 

status Stat2 uses branches 
is ( 1 => mortgage, 

2.0 => auto ); — ERR 

status Stat3 uses boolean 
is ( 1 => true, 

2 => false ); 

END def_et9; — ERR: neune must match 

A.3.10 tl/etlO,sine 

definition module d_etl0 is 
— Member Information 

domain MemName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, map => pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 
domain Sum_Domain is new SQL_SMALLINT Not Null; 
domain Count_Domain is new SQL^INT; 

end d_etl0; 


with d_etl0; use d_etl0; 
schema module s_recdb is 
table Members is 

MemberName not null : MemName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

Member Age : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 


160 


Intermetrics, Inc 






Appendix A - Compiler Test Suite Source Code 



end Members; 
end s_recdb; 


with d_etlO; use d_etlO; 
abstract module a_etlO is 
authorization s_recdb 

record MemberRec is 

R_MemberN 2 une : MemName; 

R_Sum ; Sum_Doroain; 

R_Count ; Count_Domain; 

end; 

procedure P_Del (Req_MemberSSN : SSN) is 
delete from MemberRec; — ERR 

procedure P_Upd {ReqJMemberSSN : SSN) is 
update MemberRec — ERR 

set MemberName = Req_MemberRec; 

procedure P_Ins is 

insert into MemberRec — ERR 
VALUES; 

end a_etlO; 

AJ.ll tl/etll^me 

— Check conformance on insert subquery statements 

DEFINITION MODULE d_etll IS 

enumeration declarations 

ENUMERATION Branches IS 
( Bethesda, 

Silver_Spring, 

Gaithersburg, 

Potomac); 

ENUMERATION Loan_types IS 
( mortgage, 
auto, 

personal); 

domain character declarations 

DOMAIN Customer_name_domain IS 
NEW SQL_CHAR(length => 15); 

DOMAIN Addr_domain IS 

NEW SQL_CHAR(length => 15); 

DOMAIN City_domain IS 

NEW SQL_CHAR{length => 15); 

DOMAIN State_domain IS 

NEW SQL_CHAR(length => 2 ); 


Intermetrics, Inc. 


161 







SAMeDL Development Environment - Test Plan 


domain integer declarations 
DOMAIN SSN_domain IS 

NEW SQL_INT NOT NULL ( FIRST => 0, LAST => 999999999); 
DOMAIN acct_num_domain IS 

NEW SQL_SMALLINT NOT NULL ( FIRST => 0. LAST => 9999); 

domain real declarations 

DOMAIN Balance_domain IS 
NEW SQL_REAL; 

DOMAIN Interest_rate_domain IS 

NEW SQL_REAL( FIRST => 0.0, LAST => 1.0); 

DOMAIN Loan_payment_domain IS 
NEW SQL_REAL; 

DOMAIN Branch_assets_domain IS 
NEW SQL_REAL; 


162 


Intermetrics, Inc. 









domain enumeration declarations 


DOMAIN Loan_type_domain IS 
NEW SQL_ENUMERA7‘I0N_AS_int 
(ENUMERATION => Loan_types, MAP => POS); 
DOMAIN branch_num_domain IS 
NEW SQL_ENUMERATION_AS_INT 
(ENUMERATION => Branches, MAP => POS); 

— record definitions 

RECORD Customer_record IS 

Cust_N^une : Customer_name_domain; 

SSN : SSN_domain; 

Street : Addr^domain; 

City : City_domain; 

State : State_domain; 

END customer_record; 

RECORD Savings_entry IS 

branch_num : branch_num_doraain; 
acct_num : acct_nuin_domain; 

Balemce : Bal 2 Uice_dcanain; 

cust_ssn : SSN_domain; 

END Savings_entry; 

RECORD Chequeing_entry IS 

branch_num : branch_num^domain; 
acct_num : acct_nunL.doroain; 

Baleuice : Balance_domain; 

cust_ssn : SSN_domain; 

END Chequeing_entry; 

RECORD loan_entry IS 

branch_num : branch_num_domain; 
acct_num : acct_num_domain; 

Balance : Balance_domain; 

Loan_type : Loan_type_domain; 
cust_ssn : SSN_domain; 

END loan_entry; 

RECORD Branch_entry IS 

branch_num ; branch_num_domain ; 

Assets : Branch_assets_domain; 

END Branch_entry; 

END d_etll; 


Intermetrics, Inc. 


163 











SAMeDL Development Environment - Test Plan 


WITH d_etll; 

USE d_etll; 

SCHEMA MODULE s_etll IS 

Basic customer information 

TABLE Cust IS 
Cust_Neime 
SSN not null 
Street_addr ; 

City_addr : 

State_addr : 

END cust; 

-- Checking account 

TABLE cheque IS 

branch_num : branch_num_domain, 
acct_num not null : acct_niim_domain. 
Balance ; Baleuice_domain, 

cust_ssn not null : SSN_doroain 
END cheque; 

— Savings account 

TABLE Save IS 

branch_num ; branch_num_domain, 
acct_num not null : acct_num_domain. 
Balance : Balance_domain, 

cust_ssn not null : SSN_domain 
END Save; 

-- loan account 

TABLE loan IS 

branch_num ; branch_num_domain, 
acct_num not null : *acct_num_domain. 
Balance ; Balance_domain, 

Loan_type ; loan_type_domain, 
cust_ssn not null ; SSN_domain 
END loan; 

— Branch information 

TABLE Branch IS 

num : branch_num_domain , 

Assets : Branch_assets_domain 

END Branch; 

END s_etll; 


: Customer_neune_domain, 
: SSN_domain, 
Addr_domain, 

City_domain, 

State_domain 


164 


Intermetrics, Inc. 







Appendix A - Compiler Test Suite Source Code 


WITH d_etll; 

USE d_etll; 

ABSTRACT MODULE a_etll IS 
AUTHORIZATION s_etll 

insert statement (query) 

PROCEDURE move_loan_to_save 

(account_nuJH_in : acct_nuin_doinain) 

IS 

INSERT INTO 

s_etll.save 
SELECT * 

FROM 

s_etll.loan — ERR 

WHERE 

s_etll.loan.acct_num >= account_num_in; 

PROCEDURE Inove_lo^ul_to_save2 

{account_num_in : acct_num_domain) 

IS 

INSERT INTO 

s_etll.save 

SELECT branch_nvim, acct_num, Balemce, cust_ssn 
FROM 

s_etll.loan 

WHERE 

s_etll.loan.acct_num >= account_nxim_in; 

PROCEDURE move_loan_to_save3 

(account_num_in : acct_nuin_clomain) 

IS 

INSERT INTO 

s_etll.save 

SELECT branch_num, acct_num, cust_ssn, cust_ssn —ERR 
FROM 

s_etll.loan 

WHERE 

s_et11.loan•acct_num >= account_num_in; 


END a_etll; 

AJ.12 tl/etl2^nie 

definition module d_etl2 is 
— Member Information 

domain MemN 2 une is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL.SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, MAP => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 


Intermetrics, Inc. 


165 






SAMeDL Development Environment - Test Plan 


doRiain County is new SQL_CHAR Not Null (Length => 2) ; 

domain Club_Nuinber is new SQL_SMALLINT Not Null; 

constant C_Name : MemName is ■123456789012345678901234567890*; 

constant C_SSN : SSN is •123456789•; 

constant C_Club_Nuinber : Club_Nxiinber is 10; 

constant C_Age ; Age is 39; 

constant C_Sex : Sex is F; 

constant C_Phone : Phone is *12345678*; 

constant C_Street : Street is *123456789012345678901234567890*; 
constant C_City : City is *123456789012345*; 
constant C_County : County is *M0*; 
end d_etl2; 


with d_etl2; use d_etl2; 
schema module RecDB is 
table Members is 

MemberName not null : MemName, 

MemberSSN not null : SSN, 

ClubNumber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null ; County 

end Members; 

end RecDB; 


with d_etl2; use d_etl2; 
abstract module a_etl2 is 
authorization RecDB 

record MemberRec named Neuned_MeroberRec is 
— record MemberRec is’ 

R_MemberName : MemN 2 une; 

R_MemberSSN : SSN; 

R_ClubNumber : Club_Number; 

RJdemberAge : Age; 

R_MemberSex ; Sex; 

R_MemberPhone : Phone; 

R_MemberStreet : Street; 

R_MemberCity : City not null; 

R_MemberCnty : County ; 

end; 

cursor MemberSelect2 (Req_MemberSSN neuned Req_MemberSSN : SSN) for 
(select 

MemberName named NS_MemberN 2 une, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 


166 


Intermetrics, Inc. 








Appendix A - Compiler Test Suite Source Code 


MemberPhone Not Null, 

MemberStreet named NS_MeiQberStreet Not Null, 

MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberName named NS_MemberNeune, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet named NS_MemberStreet Not Null, 

MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN) 

UNION 

(select 

MemberSSN, 

ClubNumber,- 
MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet named NS_MeroberStreet Not Null, 

MemberCj.ty, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberNeune neuned NS^emberName, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet neuned NS_MemberStreet Not Null, 

MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN); 

cursor MemberSelectS (Req_MemberSSN named Req_MemberSSN : SSN) for 
(select 

MemberNeune neuned NS_MemberNeune, 

MemberSSN, 


Intermetrics, Inc. 


167 







SAMeDL Development Environment - Test Plan 


ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone , 

MemberStreet named NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberN 2 UDe neumed NS_MemberName, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStree't named NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN) 
UNION 
(select 

MemberNeune named NS_MemberName, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, 

MemberPhone Not Null, 

MemberStreet neimed NS_JMemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 

where RecDB.Members.MemberSSN = Req_MemberSSN 
UNION 
select 

MemberNeune neuned NS_MemberName, 

MemberSSN, 

ClubNumber, 

MemberAge, 

MemberSex, * 

MemberPhone Not Null, 

MemberStreet neuned NS_MemberStreet Not Null, 
MemberCity, 

MemberCnty 
from RecDB.Members 


168 


Intermetrics, Inc. 








Appendix A - Compiler Test Suite Source Code 


where RecDB.Members.MemberSSN = Req_MeinberSSN) ; 
end a_etl2; 

AJ.13 t3/el^ine 


definition module t_l is 
— Member Information 

domain MemberName is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT (FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEnum, MAP => Pos); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Number is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)c, SQL_Fail); 

status fetch_map neuned is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 s> Not_Logged_In, 

0 => SQL_0)c, 

100 => raise samplemod.record_not_found); 


end t_l; 


with SampleMod; use SeunpleMod; 
schema module RecDB is 
table Members is 


MemberName not 

null : 

MemberName, 

MemberSSN not 

null : 

SSN, 

ClubNumber not 

null : 

Club_Niimber 

MemberAge : 

Age, 


MemberSex : 

Sex, 


MemberPhone : 

Phone, 


MemberStreet : 

Street, 


MemberCity ; 

City, 


MemberCnty not 

null ; 

County 


end Members; 
end RecDB; 


with SeunpleMod; use SampleMod; 
abstract module RecDML is 


Intermetrics, Inc. 


169 









SAMeDL Development Environment - Test Plan 


authorization RecDB 

record MemberRec is 

MemberNeune : MentberNeune ; 

MemberSSN : SSN; 

ClubNumber : Club_Nuinber; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet : Street; 

MemberCity : City; 

MemberCnty : County; 

end; 

cursor MemberSelect (Req_MeinberSSN : SSN) for 
select tl.MemberSSN, t2.Dummy 
from RecDB.Members as tl, RecDB.Members as t2 
where tl.MemberSSN = t2.MemberSSN; 

end RecDML; 

A.3.14 t3/e2^me 

definition module t_2 is 
— Member Information 

domain MemberN 2 une is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnvun is (F, M); 

domain Sex is new SQL_ENUMERAT10N_AS_INT ( 

Enumeration => SexEnum, Map => POS); 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 
domain City is new SQL_CHAR (Length => 15); 

domain County is new SQL_CHAR Not Null (Length => 2); 

domain Club_Niimber is new SQL_SMALLINT Not Null; 

exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_0)t, SQL_Fail); 

status fetch_map named is_found uses Failtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_0)c, 

100 => raise s 2 unplemod.record_not_found); 

end t_2; 


with t_2; use t_2; 
schema module RecDB is 
table Members is 

MemberN 2 une not null : MemberNcime, 


170 


Intermetrics, Inc. 






Appendix A - Compiler Test Suite Source Code 


MemberSSN not null : SSN, 

ClubNumber not null : Club_Nuinber, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 


table Members2 is 

MemberName not null 
MemberSSN not null 
ClubNumber not null 
end Members2; 


MemberN 2 une, 
SSN, 

Club_Number 


end RecDB; 


with t_2; use t_2; 
abstract module RecDML is 
authorization RecDB 


record MemberRec 
MemberName 
MemberSSN 
ClubNumber 
MemberAge 
MemberSex 
MemberPhone 
MemberStreet 
MemberCity 
MemberCnty 

end; 


is 

: MemberName; 

: SSN; 

: Club_Number; 
: Age; 

: Sex; 

; Phone; 

; Street; 

: City; 

County; 


cursor MemberSelect {Req_MemberSSN ; SSN) for 

select tl.MemberSSN, Recdb.Members.Memberneune 
from RecDB.Members as tl, Recdb.members as t2 
where tl.MemberSSN = (select MemberSSN 
from t2 

where Recdb.members.membername = 'John'); 


end RecDML; 

AJ.15 t3/e3.sme 

definition module t_3 is 
— Member Information 

domain MemberNeune is new SQL_CHAR Not Null (Length => 30); 
domain SSN is new SQL_CHAR Not Null (Length => 9); 
domain Age is new SQL_SMALLINT ( FIRST => 1, LAST => 199); 

enumeration SexEnum is (F, M); 

domain Sex is new SQL_ENUMERATION_AS_INT ( 

Enumeration => SexEniam, Map => POS) ; 

domain Phone is new SQL_CHAR (Length => 8); 
domain Street is new SQL_CHAR (Length => 30); 


Intermetrics, Inc. 


171 








SAMeDL Development Environment - Test Plan 


domain City is new SQL_CHAR (Length => 15); 
domain County is new SQL_CHAR Not Null (Length => 2); 
domain Club_Number is new SQL_SMALLINT Not Null; 
exception Record_Not_Found; 

enumeration FailType is (Not_Logged_In, SQL_Ok, SQL_Fail); 

status fetch_map n 2 uned is_found uses Pailtype is 
( -999 .. -300 => SQL_Fail, 

-299, -298 => Not_Logged_In, 

0 => SQL_Ok, 

100 => raise saunplemod.record_not_found); 

end t_3; 

with t_3; use t_3; 
ichema module RecDB is 
table Members is 

MemberName not null : MemberNeune, 

MemberSSN not null : SSN, 

ClubNtimber not null : Club_Number, 

MemberAge : Age, 

MemberSex : Sex, 

MemberPhone : Phone, 

MemberStreet : Street, 

MemberCity : City, 

MemberCnty not null : County 
end Members; 

table Members2 is 

MemberNeune not null : MemberNfune, 

MemberSSN not null : SSN, 

ClubNurober not null : Club_N\imber 

end Members2; 

end RecDB; 


with t_3; use t_3 ; 
abstract module RecI^IL is 
authorization RecDB 

record MemberRec is 

MemberN 2 une : MemberNeune ; 

MemberSSN : SSN; 

ClubNumber : Club_Number; 

MemberAge : Age; 

MemberSex : Sex; 

MemberPhone : Phone; 

MemberStreet : Street; 

MemberCity : City; 

MemberCnty : County; 

end; 


172 


Intermetrics, Inc. 









• John•); 


cursor MemberSelect (Req_MeinberSSN : SSN) for 
select MemberSSN, Recdb.Members.Membername 
from RecDB.Members2 as tl, Recdb.members as t2 
where tl.MemberSSN = (select MemberSSN 
from t2 

where Recdb.members.memberneune = 


end RecDML; 


Intermetrics, Inc. 


173 


















