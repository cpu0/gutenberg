REPORT DOCUMFNTATION PAGE 

Form Approved \ J 

OPM No. 0704-0188 ^ J 

hour per responee loctuotng ome for rev«e«tnng r«iructori«. learchrg eiMng <}aia 3o<jrc« Qiihenng and rnari&TVy ffte ( 3 ia 
b'jroen estimaia or any other aspect of ths cottsctior of mtormatcn. fctuding sugQeetiors tor reducng th« burden, to Wasr«ngK)n 

Oav« Highway. Sort* 1204. A/iir^ori. VA 22202<»2. and to the Office of trrtormaoon and RegUalOfy Attirt, O*loi of 

■1111 

lIHlMHi 'ORTDATE 3. REPORT TYPE AND DATES COVERED 

llllillilill Final: 30 Jul 1991 to 01 Jun 1993 

_» 

4 . ouo 11 i Lt: 

Ada Compiler Validation Summary Report:U.S. NAVY Ada/L, Version 4.0 
(/OPTIMIZE), VAX 8550 (Host) to AN/UYK-43 (EMR)(Bare Board)(Target), 
910626S1.11173 

5 FUNDING NUMBERS 

6, AUTHORIS) 

National Institute of Standards and Technology 

Gaithersburg, MD 

USA 

7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

National Institute of Standards and Technology 

National Computer Systems Laboratory 

Bldg. 255, Rm A266 

Gaithersburg, MD 20899 USA 

8 PERFORMING ORGANIZATION 

REPORT NUMBER 

NIST90USN510_6_1.11 

9 SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, RM 3E114 

Washington, D.C. 20301-3081 

10 SPONSORINGVMONITORING AGENCY 
REPORT NUMBER 

11 SUPPLEMENTARY NOTES 

12a. DISTRIBUTION/AVAIUVBILITY STATEMENT 

Approved for public release: distribution unlimited. 

12b DISTRIBUTION CODE 

13 ABSTRACT (Maximum 200 words) 

U S. NAVY, Ada/L, Version 4,0 (/OPTIMIZE), Gaithersburgh, MD, VAX 8550, running VAX/VMS Version 5.3 (Host) to 
AN/UYK-43 (EMR)(Bare Board)(Target) ACVC 1.11. 

OTIC 

^ SEP 19 1391 91“ "^iiiijjl^ 

14 SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MiL-STD-1815A, AJPO. 

15 NUMBER OF PAGES 

16 PRICE CODE 

17 SECURITY CLASSIFICATION 

un'clXssified 

18 SECURITY CLASSlFiCATlON 19 SECURITY CLASSIFICATION 

UNCLASSIFED UNCLASSIFIED 

20. LIMITATION OF ABSTRACT 


NSN 7540-01 280-550 


9 i 


standard Form 298, (Rev 2-89) 
Prescribed by ANSI Sid 239-128 



















AVF Control Number: NIST90USN510_6_1.11 
DATE COMPLETED 

BEFORE ON-SITE: 1991-04-05 
AFTER ON-SITE: 1991-06-26 
REVISIONS: 1991-07-30 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 910626S1.11173 
U.S. NAVY 

Ada/L, Version 4.0 (/OPTIMIZE) 

VAX 8550 => AN/UYK-43 (EMR) (Bare Board) 


Prepared By: 

Software Standards Validation Group 
National Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 





AVF Control Number: NIST90USN510_6_1.11 
Certificate Information 


The following Ada implementation was tested and determined to pass 
ACVC 1.11. Testing was completed on 1991-06-26. 

Compiler Name and Version: Ada/L, Version 4.0 (/OPTIMIZE) 

Host Computer System: VAX 8550, running VAX/VMS Version 

5.3 

Target Computer System: AN/UYK-43 (EMR) (Bare Board) 

A more detailed description of this Ada implementation is found in 
section 3.1 of this report. 

As a result of this validation effort. Validation Certificate 
910626S1.11173 is awarded to U.S. NAVY. This certificate expires 
on 01 March 1993. 


This report has been reviewed and is approved. 




Ada Validation ^icilitV Ada Validation Facility 

Dr. David K. JeHersgn^ Mr. L. Arnold Johnson 

Chief, Information Systems Manager, Software Standards 

Engineering Division (ISED) Validation Group 

Computer Systems Laboratory (CLS) 

National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, MD 20899 



Ada^^feyi^a^ion Organization 
Directorj/Computer & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 






Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the 
customer. 


DECLARATION OF CONFORMANCE 


Customer: 


U.S. NAVY 


Certificate Awardee: U.S. NAVY 


Ada Validation Facility: National Institute of Standards and 

Technology 

Computer Systems Laboratory (CSL) 
Software Validation Group 
Building 225, Room A266 
Gaithersburg, Maryland 20899 


ACVC Version: 


1.11 


Ada Implementation: 

Compiler Name and Version: 
Host Computer System: 


Ada/L, Version 4.0 (/OPTIMIZE) 

VAX 8550, running VAX/VMS Version 
5.3 


Target Computer System: AN/UYK-43 (EMR) (Bare Board) 

Declaration: 


I the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A ISO 
8652-1987 in the implementation listed above. 


' .' -'.-/ani — 

^ 

v- . . V ' jJk. 

2A^ 


Customer Signature 
Company U.S. Navy 
Title-. 


Da"te 

1 \ 

: '1 1 



lC\ n ! 

Certificate Awardee 
Company U.S. Navy 

signature 

Date 



Title 






TABLE OF CONTENTS 


CHAPTER 1 .1-1 

INTRODUCTION . 1-1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .... 1-1 

1.2' REFERENCES.1-1 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 


CHAPTER 2.2-1 

IMPLEMENTATION DEPENDENCIES . 2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 


CHAPTER 3.3-1 

PROCESSING INFORMATION . 3-1 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A.A-1 

MACRO PARAMETERS.A-1 

APPENDIX B.B-1 

COMPILATION SYSTEM OPTIONS . B-1 

LINKER OPTIONS . B-2 

APPENDIX C.C-1 

APPENDIX F OF THE Ada STANDARD.C-1 


























CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the 
Ada Validation Procedures [Pro90] against the Ada Standard [Ada83j 
using the current Ada Compiler Validation Capability (ACVC). This 
Validation Summary Report (VSR) gives an account of the testing of 
this Ada implementation. For any technical terms used in this 
report, the reader is referred to [Pro90]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG39]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure of 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U.S.C. #552) . The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the subject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 

Ada Validation Organization 
Computer and Software Engineering Division 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311-1772 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


1-1 






[Pro90] Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office-, August 1990. 


[UG89] Ada Compiler Validation Capability User's Guide , 21 June 
1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, D, E, and L. The first letter of a test 
name identifies the class to which it belongs. Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK_FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECK_FILE is used to check the contents 
of text files written by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. If these units are not 
operating correctly, validation testing is discontinued. Class B 
tests check that a compiler detects illegal language usag?'. Class 
B tests are not executable. Each test in this class is compiled 
and the resulting compilation listing is examined to verify that 
all violations of the Ada Standard are detected. Some of the class 
B tests contain legal Ada code which must not be flagged illegal by 
the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values — for example, the 
largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is produced by 


1-2 




the AVF. This customization consists of making the modifications 
described inS'lrhe preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [UG89]) . 

In order to pass an ACVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to 

be added to a given host and target computer 
system to allow transformation of Ada programs 
into executable form and execution thereof. 

The means for testing compliance of Ada 
implementations. Validation consisting of the 
test suite, the support programs, the ACVC 
Capability user's guide and the template for 
the validation summary (ACVC) report. 

Ada An Ada compiler with its host computer system and 

Implementation its target computer system. 

Ada The part of the certification body which carries 

Validation out the procedures required to establish the 

Facility (AVF) compliance of an Ada implementation. 

Ada The part of the certification body that provides 

Validation technical guidance for operations of the Ada 

Organization certification system. 

(AVO) 

Compliance of The ability of the implementation to pass an ACVC 
an Ada version. 

Implementation 

Computer A functional unit, consisting of one or more 

System computers and associated software, that uses 

common storage for all or part of a program and 
also for all or part of the data necessary for 
the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including 
arithmetic operations and logic operations; and 
that can execute programs that modify themselves 
during execution. A computer system may be a 
stand-alone unit or may consist of several 
inter-connected units. 


Ada Compiler 
Validation 
Capability 
(ACVC) 


1-3 





Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 


Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of 
all requirements specified. 

An individual or corporate enuity who enters into 
an agreement with an AVF which specifies the terms 
and conditions for AVF services (of any kind) to 
be performed. 

A formal statement from a customer assuring that 
conformity is realized or attainable on the Ada 
implementation for which validation status is 
realized. 

A computer system where Ada source programs are 
transformed into executable form. 

A test that contains one or more test objectives 
found to be irrelevant for the given Ada 
implementation. 

Software that controls the execution of programs 
and that provides services such as resource 
allocation, scheduling, input/output control, 
and delta management. Usually, operating systems 
are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada 
programs are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated 
successfully either by AVF testing or by 
registration [Pro90]. 

The process of checking the conformity of an Ada 
compiler to the Ada programming language and of 
issuing a certificate for this implementation. 

A test found to be incorrect and not used in 
conformity testing. A test may be incorrect 
because it has an invalid test objective, fails 
to meet its test objective, or contains erroneous 
or illegal use of the Ada programming language. 


1-4 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Some tests are withdrawn by the AVO from the ACVC because they do 
not conform to the Ada Standard. The following 94 tests had been 
withdrawn by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for 
this list of withdrawn tests is 91-05-03. 


E28005C 

B28006C 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

E49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

Ba3026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A4lA 

CD2A41E 

CD2A87A 

CD2B15C 

ED3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 




2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are 
irrelevant for a given Ada implementation. The inapplicability 
criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Issues and commonly referenced in the 
format Al-dddd. For this implementation, the following tests were 
inapplicable for the reasons indicated; references to Ada Issues 
are included as appropriate. 

The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 
C35706L..Y (14 tests) C35707L..Y (14 tests) 
C35708L..Y (14 tests) C35802L..Z (15 tests) 




C45241L..Y (14 tests) 
C4S^t±...Y (14 tests) 
C455w4L..Z (15 tests) 
C45641L..Y (14 tests) 


C45i21L..Y (14 tests) 
C45521L-.Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C24113H..K (4 tests) use a line length greater than iyL?.X_IN_LEN. 


C35713B, C45423B, B86001T, and C86006H check for the predefined 

type SHORT_FLOAT; for this implementation, there is no such type. 


The following 21 tests check for the predefined type SHORT_INTEGER; 
for this implementation, there is no such type: 


C35404B 

C45412B 

C45611B 

B52004E 

CD7101E 


B36105C 

C45502B 

C4561JB 

C55BC7B 


C45231B 

C45503B 

C45614B 

B55B09D 


C45304B 

C45504B 

C456313 

B86001V 


C45411B 

C45504E 

C45632B 

C86006D 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a 
predefined integer type with a name other than INTEGER, 
LONG_INTEGER, or SHORT_INTEGER; for this implementation, there is 
no such type. 


C35713D and B86001Z check for a predefined floating-point type with 
a name other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for 
this implementation, there is no such type. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINE_OVERFLOWS is TRUE. 

B86071Y uses the name of a predefined fixed-point type other than 
DURATION; for this implementation, there is no such type. 


CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
implementation does not support such sizes. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected 
by this compiler. 


2-2 




AE2101H, EE2401D, and EE2401G use instantiations of package 
DIRECT_IO unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected 
by this compiler. 

The tests listed in the following table are not applicable because 
the given file operations are supported for the given combination 
of mode and file access method. 


Test File Ope: 

ration Mode 

Fil'^ Access Method 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT :^0 

CE2102N 

OPEN 

IN FILE 

sequential 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

S'-^QUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT iO 

CE2102S 

RESET 

INOUT FILE. 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIREC'^ 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT_FILE 

TEXT_I0 

tests listed 

in the 

following table 

are not applicable because 

given file 

operations are not 

supported for the given 


combination of mode and file access method. 


Test 


File Operation Mode 


File Access Method 


CE2105A 

CE2105B 

CE3109A 


CREATE 

CREATE 

CREATE 


IN_FILE SEQUENTIAL_IO 

IN_FILE DIRECT_IO 

IN FILE TEXT 10 


The following 19 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the 
same external file; USE_ERR0R is raised when this association is 
attempted. 


CE2107A.,H CE21U7L CE2110B CE2110D CE2111D 

CE2111H CE3111A..B CE3111D..E CE3114B CE3115A 


CE2203A checks that WRITE raises USE_ERR0R if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 


2-3 








CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external dx?sct file is exceeded; this implementation cannot 
restrict file capacity. 

CE3304A checks that SET_LINE_LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3 413B checks that PAGE raises LAy0UT__ERR0R when the value of the 
page number exceeds COUNT'LAST. For this implementation, the value 
of COUNT'LAST is greater than 150000 making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 


Modifications (see section 1.3) were required for 44 tests. 


The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in 


the way expected by the 

original 

tests. 



B22003A 

B22004A 

B23004A 

B24005A 

B24005B 

B28003A 

B33201C 

B33202C 

B33203C 

B33301B 

B37106A 

B37301I 

B38003A 

B38003B 

B38009A 

B38009B 

B44001A 

B44004A 

B54A01L 

B55A01A 

B61005A 

B85008G 

B85008H 

B95063A 

B97103E 

BB1006B 

BC1102A 

BC1109A 

BC1109B 

BC1109C 

BC1109D 

BC1201F 

BC1201G 

BC1201H 

BC1201I 

BC1201J 

BC1201L 

BC3013A 

BE2210A 

BE2413A 




C83030C and C86007A were graded passed by Test Modification as 
directed by the AVO. These tests were modified by inserting 
"PRAGMA ELABORATE (REPORT);" before the package declarations at 
lines 13 and 11, respectively. Without the pragma, the packages 
may be elaborated prior to package Report's body, and thus the 
packages' calls to function REPORT.IDENT_INT at lines 14 and 13, 
respectively, will raise PROGRAM_ERROR. 


C34005P and C34005S were graded passed by Test Modification as 
directed by the AVO. These tests contain expressions of the form 
"I - X'FIRST + Y'FIRST", where X and Y are of an array type with a 
lower bound of INTEGER'FIRST; this implementation recognizes that 
"X'FIRST + Y'FIRST" is a loop invariant and so evaluates this part 
of the expression separately, which raises NUMERIC_ERROR. These 
tests were modified by inserting parens to force a different order 
of evaluation (i.p., to force the subtraction to be evaluated 
first) at lines 187 and 262/263, respectively; those modified lines 
are: 


[C34005P, line 137] 


2-4 





IF NOT EQUAL (X (I), Y ((I - X'FIRST) + Y'FIRST)) THEN 

[C34005S, lines 261..4 (only 262 & 263 were modified)] 

IF NOT EQUAL (X (I, J), 

Y ((I - X'FIRST) + Y'FIRST, 

(J - X'FIRST(2)) + 

Y'FIRST(2))) THEN 


2-5 








CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is 
described adequately by the information given in the initial 
pages of this report. 

For a point of contact for technical information about this 
Ada implementation system, see: 

Mr. Christopher T. Geyer 
Fleet Combat Directions Systems Support Activity 

Code 81, Room 30ID 
200 Catalina Blvd. 

San Diego, California 92147 
619-553-9447 


For a point of contact for sales information about this Ada 
implementation system, see: 

NOT APPLICABLE FOR THIS IMPLEMENTATION 

Testing of this Ada implementation was conducted at the 
customer's site by a validation team from the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 3772 

b) Total Number of Withdrawn Tests 94 

c) Processed Inapplicable Tests 304 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 0 


3-1 







f^Total Number of Inapplicable Tests 304 (c+d^e) 
g) Total Number of Tests for ACVC l.ll 4170 (a+b+f) 


When this implementation was tested, the tests listed in section 
2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 417 0 tests. When this 
compiler was tested, the tests listed in section 2.1 had been 
withdrawn because of test errors. The AVF determined that 304 
tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing. 
In addition, the modified tests mentioned in section 2.3 were 
also processed. 

A magnetic tape containing the customized test suite (see 
section 1.3) was taken on-site by the validation team for 
processing. The contents of the magnetic tape were loaded 
directly onto the host computer. 

After the test files were loaded onto the host computer, the 
full set of tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system 
and executed on the target computer system. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation team. See Appendix B 
for a complete listing of the processing options for this 
implementation. It also indicates the default options. The 
options invoked explicitly for validation testing during this 
test were: 


T^OR /OPTIMIZE the options were: 

/SUMMARY /OPTIMIZE /SOURCE /EMR /0UT=<filename> 


The options invoked by default for validation testing during 
this test were: 


FOR /OPTIMIZE the options were: 

NO_MACHINE_CODE NO_ATTRIBUTE NO_CROSS_REFERENCE 

NO DIAGNOSTICS NO NOTES PRIVATE LIST CONTAINER GENERATION 


3-2 






CODE_ON_WARNING NO_MEASURE DEBUG CHECKS NO EXECUTIVE 
NO_RTE^€)NiY TRACE_BACK 

Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. Selected 
listings■examined on-site by the validation team were also 
archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for 
customizing the ACVC. The meaning and purpose of these 
parameters are explained in [UG89]. The parameter values are 
presented in two tables. The first table lists the values 
that are defined in terms of the maximum input-line length, 
which is I the value for $MAX_IN_LEN—also listed here. 
These values are expressed here as Ada string aggregates, 
where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

120 



$BIG_ID1 

(1..V-1 => 'A', V => ' 

1* ) 


$BIG_ID2 

(1..V-1 => 'A', V => ' 

2’) 


$BIG_ID3 

(1..V/2 => 'A*) & '3' & 

(1..V-l-V/2 => 

'A' ) 

$BIG_ID4 

(1..V/2 => 'A') & '4' & 

(1..V-1-V/2 => 

'A' ) 


$BIG INT LIT (1..V-3 => '0') & "298" 


$BIG_REAL_LIT (1..V-5 => '0') & "690.0" 

$BIG__STRING1 "" & (1..V/2 => 'A') & "" 

$BIG_STRING2 "" & (1..V-1-V/2 => 'A') & '1' & "" 

$BLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => *0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 

$MAX STRING_LITERAL "" & (1..V-2 => 'A') & "" 


A-1 




The fjati-owing table contains the values for the remaining 
macro parameters. 

Macro Parameter Macro Value 


$ACC_SIZE 
$ALIGNMENT 
$COUNT_LAST 
$ DEFAULl_MEM_SIZ E 
$DEFAULT_STOR_UNIT 
$ DEFAULT_S YS_NAME 
$DELTA_DOC 

$ENTRy_ADDRESS 

$ENTRY_ADDRESS1 

$ENTRY_ADDRESS2 

$FIELD_LAST 

$FILE_TERMINATOR 

$FIXED_NAME 

$FLOAT_NAME 

$FORM_STRING 

$F0RM_STRING2 

$ GREATER_THAN_DURATION 

$GREATER_THAN_DUP ^TION_BASE 

$GREATER_THAN_FLOAT_BASE_LA 


32 
4 

2_147_483_647 
1_043_576 
32 

ANUYK43 

2 # 0 . 0000 _ 0000 _ 0000 _ 0000 _ 0000_0 

000 _ 0000 _ 001 # 

SYSTEM.CLASS_I_UNHANDLED_ADDRE 

ss 

SYSTEM. CLASS__II_UNHANDLED_ADDR 
ESS 

SYSTEM.CLASS_III_UNHANDLED_ADD 
RESS 

2_147_483_647 

I I 

NO_SUCH_FIXED_TYPE 
NO_SUCH_FLOAT_TYPE 

IIII 

''CANNOT_RESTRICT_FILE_CAPACITY" 
131071.5 
LAST 131_073.0 
T 7.5E+75 


$GREATER THAN FLOAT SAFE LARGE 7.5E+75 


A-2 




$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 0.OEO 
$HIGH_PRIORITY 15 

$ILLEGAL_EXTERNAL_FILE_NAME1 \NODIRECTORY\FILENAME\ 

$ILLEGAL_EXTERNAL_FILE_NAME2 THIS-FILE-NAME-IS-TOO-LONG-FOR- 

MY-SYSTEM 

$INAPPROPRIATE_LINE_LENGTH -1 

$INAPPROPRIATE PAGE LENGTH -1 


$INCLUDE PRAGMAl 


PRAGMA INCLUDE ( "A28006D1. TST" ) 


$INCLUDE PRAGMA2 


PRAGMA INCLUDE ( "B28006F1. TST" ) 


$INTEGER FIRST 


-2147483647 


$INTEGER LAST 


2147483647 


$INTEGER LAST PLUS 1 


2147483648 


$INTERFACE LANGUAGE 


MACRO NORMAL 


$LESS THAN DURATION 


-131071.5 


$LESS THAN DURATION BASE FIRST 


-131 073.0 


$LINE TERMINATOR 


ASCII.LF 


SLOW PRIORITY 


SMACHINE CODE STATEMENT 


formati'(f_lb,0,0,0,0,0,0) 


SMACHINE CODE TYPE 


formati 


$MANTISSA_DOC 
$MAX DIGITS 


$MAX INT 


9223372036854775807 


$MAX INT PLUS 1 


9223372036854775808 


$MIN INT 


-9223372036854775807 


$NAME 


NO SUCH TYPE AVAILABLE 


$NAME LIST 


ANUYK43 


A-3 




X2120A 


$NAME_SPECIFICATI0N1 
$NAME_SPECIFICATI0N2 X2120B 

$NAME SPECIFICATI0N3 X3119A 


$NEG_BASED_INT 

16#FFFFFFFFFFFFFFFD# 


$NEW_MEM_SIZE 

1_048_576 


$NEW_STOR_UNIT 

32 


$NEW_SYS_NAME 

ANUYK43 


$PAGE_TERMINATOR 

ASCII.FF 


$RECORD_DEFINITION 

record f:i6_bit; a:i3 

k:i3_bit; b:i3_bit; i:il 
s:i3_bit; y:il3_bit; 

record; 

bit; 
_bit ; 
end 

$RECORD_NAME 

formatii 


$TASK_SIZE 

3 2 


$TAS K_STCRAGE_SIZ E 

1024 


$TICK 

0.000048828125 


$VARIABLE_ADDRESS 

16#0020# 


$VARIABLE_ADDRESS1 

16#0021# 


$VARIABLE_ADDRESS2 

16#0023# 


$YOUR_PRAGMA 

EXECUTIVE 



A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically 
noted otherwise, references in this appendix are to compiler 
documentation and not to this report. 





Ada/L ?SS Handbook 


Version 3.5 
29 March 1991 


H--- 

i Option Function 


EXECUTIVE Enables pragma EXECUTIVE and allows I 

visibility to units which have been i 

compiled with the RTE_ONLY option. j 

Default: NO_EXECUTIVE ' | 

! 

MEASURE Generates code to monitor execution | 

frequency at the subprogram level for j 

the current unit. Default: NO_MEASURE i 

I 

NO_CHECKS NO_CHECKS suppresses all run-time i 

error checking. CHECKS provides i 

run-time error checking. | 

Default: CHECKS 1 

I 

NO_CODE_ON_WARNING I 

NO_CODE_ON_WARNING means no code is I 

generated when there is a diagnostic | 

of severity WARNING or higher. ! 

CODE_ON_WARNING generates code i 

only if there are no diagnostics 1 

of a severity higher than WARNING. I 

Default: CODE ON WARNING 1 

~ “ I 

I 

NO_CONTAINER_GENERATION i 

NO_CONTAINER_GENERATION means that no I 

container is produced even if there ! 

are no diagnostics. I 

CONTAINER_GENERATION produces a | 

container if diagnostic serverity i 

permits. I 

Default: CONTAINER GENERATION 


Table F-4a - Special Processing Options 


F.14 Compiler Options 


F-47 









Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option 

Function 

NO_DEBUG 

If NO DEBUG is specified, only that 
information needed to link, export 
and execute the current unit is 
included in the compiler output. 


With the DEBUG option in effect, 
internal representations and 
additional symbolic information are 
stored in the container. 

Default: DEBUG 

NO_TRACE_BACK 

Disables the location of source 
exceptions that are not handled by 
built-in exceotion handlers. 

Default: TRACE_aACK 

OPTIMIZE 

Enables global optimizations in 
accordance with the optimization 
pragmas specified in the source 
program. If the pragma OPTIMIZE is 
not included, the optimizations 
emphasize TIME over SPACE. 

When NO_OPTIMIZE is in effect, no 
global optimizations are performed, 
regardless of the oragmas specified. 
Default: NO_OPTIMIZE 

RTE_ONLY 

Restricts visibility of this unit 
only to those units compiled with 
the EXECUTIVE option. 

Default: NO_RTE_ONLY 


Table F-5b 


Special 


Processing Options 


(Continued) 


F-48 


F.14 Compiler Options 











Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


1 Option Function 


1 ATTRIBUTE Produces a Symbol Attribute Listing. | 
i (Produces an attribute cross-reference | 
I listing when both ATTRIBUTE and i 
I CROSS_REFERENCE are specified.) I 
I Default: MO_AT'^Rr BUTE. | 

I CROSS_REFERENCE Produces a Cross-Reference Listing. ( 
1 (Produces an attribute cross-reference | 
! listing when both ATTRIBUTE and | 
I CROSS_REFER£NCE are specified.) | 
I Default: NO_CROSS_REFERENCE. j 

I DIAGNOSTICS Produces a Diagnostic Summary Listing. I 
1 Default: NO_DIAGNOSTICS. 1 

1 MACHINE_CODE Produces a Machine Code Listing if 1 
I code is generated. Code is generated | 
I when CONTArNER_GENERATION option is I 
I in effect and (1) there are no I 
I diagnostics of severity ERROR, SYSTEM, | 
I or FATAL, and/or (2) NO_CODE_ON_WARNING | 
I option is in effect and there are no 1 
1 diagnostics of severity higher than I 
I NOTE. A diagnostic of severity NOTE j 
' is reported when a Machine Code I 
I Listing is requested and no code is I 
i generated. OCTAL is an additional | 
1 option that may be used with | 
I MACHINE_CODE to output ocatal values j 
I on the listing instead of hex values. j 
I Default: NO_MACHINE_CODE. j 

I NOTES Includes diagnostics of NOTE severity I 
I level in the Source Listing. | 
j Default: NO NOTES. 


SOURCE Produces listing of Ada source i 

statements. Default: NO_SOURCE. j 

SUMMARY Produces a Summary Listing; always I 

produced when there are errors in the | 
ccmoilation. Default: NO_SUMMARY. 1 

I 

- + 


Table F-5 - Ada/L Listing Control Options 


F.14 Compiler Options 


F-49 









Version 3.5 

29 March 1991 

Ada/L PSE Handbook 

Option 

Function | 



i MSG 

1 

1 

1 

1 

1 

Sends error messages and the ! 

Diagnostic Summary Listing to the i 

file specified. The default is to 
send error messages and the Diagnostic I 
Summary Listing to .Message Output i 

(usually the terminal). i 

1 

OUT 

1 

1 

j 

Sends all selected listings to a ! 

single file specified. The default 
is to send listings to Standard i 

Output (ususally the terminal). I 

Table F-7 

- Gontrol Part (Redirection) Options 


F-50 


F.14 Compiler Options 








LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation 
and not to this report. 


B-2 







Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.16 Lin^r’Options 


Option 

Function 

DEBUG 

Produces a linked container to be 
debugged. Default: NO DEBUG. 

MEASURE 

Produces a linked container to be 
analyzed. Default: NO MEASURE. 

PARTIAL 

Produces an incomplete linked 
container with unresolved references. 
Default: NO_PARTIAL. 

RTL_SELECTIVE 

Similar to the SELECTIVE option 
except that is only refers to RTLIB 
units. This option is not supported 
during phase links. 

Default: NO_RTL_SELECTIVE. 

SEARCH 

Explicitly searches for the units to 
be included in the linked container. 
Default: SEARCH for final links; 
NO_SEARCH for phase links. 

SELECTIVE 

Maps into the program only the 
subprograms called by the main 
subprogram. Default: SELECTIVE 
for final links; NO SELECTIVE 
for phase links. 


Table F-10 


Ada/L Linker 


Special 


Processing Options 


F.16 Linker Options 


F-53 













Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option 

Function 

No option 

Linker summary listing always 
produced. 

DEBUGMAP 

Generates a debugmap listing. 
Default: NO_DEBUGMAP. 

ELAB_LIST 

Generates an elaboration order 
listing. Default: NO ELAB LIST. 

LOADMAP 

Generates a loadmap listing. 

Default:NO_LOADMAP. 

LOCAL_SYMBOLS 

Generates a symbols listing with 
all internal as well as external 
definitions in the program. 

LOCAL SYMBOLS is to be used in 
conjunction with the SYMBOLS 
option. If LOCAL_SYMBOLS is 
specified with NO_SYMBOLS, a 

WARNING is produced and the SYMBOLS 
option is activated. 

Default: NO_LOCAL_SYMBOLS 

SYMBOLS 

Produces a Linker symbols listing. 
Default: NO_SYMBOLS. 

UNITS 

Produces a Linker units listing. 
Default: NO_UNITS. 


Table F-11 


Linker Listings Options 


Linker Options 


F-54 


F. 16 











Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


— 

Option 

Function 

MSG 

Sends error messages to the file 
specified. The default is to send 
error messages to Message Output 
(usually the terminal). 

OUT 

Sends all selected listings to the 
single file specified. The default 
is to send listings to Standard 

Output (usually the terminal). 


Table F-12 - Control_Part (Redirection) Options 


F.16 Linker Options 


F-55 











Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.17 ExporteiT^S^ions 


Option 

Function 

DEBUG 

Permits the generation of a load 
module with all debugging facilities 
available. When NO_DEBUG is 
specified or is in effect by default, 
no debugging facilities are made 
available. Export the program for 
debugging with either the Run-Time 
Debugger (RTD) or the Embedded Target 
Debugger (ETD). 

Default: NO_DEBUG. 

DYNAMIC 

Deferred. 

LOAD 

Deferred. 

MEASURE 

Permits the generation of a load 
module with all performance ■ 
measurement facilities available. 

When NO_MEASURE is specified or is in 
effect by default, no performance 
measurement facilities are made 
available. Default: NO_MEASURE 

REVO 

In conjunction with the SIM IMAGE 
argument to the IMAGE named parameter, 
this option specifies production of a 
Target System File suitable for input 
to Revision 0 of SIM/L and PORTAL/43. 


Table F-13 - Ada/L Special Processing Options 


F-56 


F.17 Exporter Options 











Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


Option 

Function 

MSG 

Sends error messages to the file 
specified. The default is to send 
error messages to Message Output 
(usually the terminal). 

OUT 

Sends all selected listings to the 
single file specified. The default 
is to send listings to Standard 

Output (usually the terminal). 


Table F-14 - Control_Part (Redirection) Options 


F.17 Exporter Options 


F-57 










Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option 

Function 

DEBUGMAP 

Generates a segment-by-segment listing 
that describes how the units are mapped 
onto hardware. Default: NO DEBUGMAP. 

LOADMAP 

Generates a listings that describes how 
the units are mapped onto the hardware. 
Default: NO_LOADMAP. 

LOCAL_SYMBOLS 

As an option in addition to SYMBOLS 
listing, causes the symbols listing to 
include all internal as well as external 
definitions in the program. 

Default: NO_LOCAL_SYMBOLS 

NO_DETAILED 

Suppresses the listing of subprograms 
contained within each EXEC psect in 
the DEBUGMAP and LOADMAP listings. 
Default: DETAILED. 

RTEXEC 

Produces executive listings instead 
of application listings. It can only 
be used with the LOADMAP and DEBUGMAP 
options (e.g., /LOADMAP/RTEXEC). 

Default: NO_RTEXEC 

SYMBOLS 

Generates a symbols listing of all 
external definitions in the program. 
Default: NO_SYMBOLS. 

UNITS 

Generates a listing of all units. 

Default: NO_UNITS. 


Table F-15 - Ada/L Exporter Listing Options 


F-58 


F.17 Exporter Options 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iinplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 

package STANDARD is 

type INTEGER is range -2_147_483_647 .. 2_147_483_647; 
type LONG_INTEGER is range 

-9_223_372_036_854_775_807 .. 9_223_372_036_854_775_807; 
type FLOAT is digits 6 range 

-(16#0,FF_FFF8#E63) .. (16#0.FF_FFF8#E63); 

type LONG_FLOAT is digits 15 range 

-(16#0.FF_FFFF_FFFF_FFE0#E63) .. (16#0.FF_FFFF_FFFF_FFE0#E63); 
type DURATION is delta 2.0 ** (-14) range 
-131_071.0 131_071.0; 

end STANDARD; 


C-1 







Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


Appendix F 

The Ada Language for the AN/UYK-43 Target 


The source language accepted by the compiler is Ada, as 
described in the Military Standard, Ada Programming Language, 
ANSI/MIL-STD-1815A-i983, 17 February 1983 ("Ada Language 
Reference Manual"). 

The Ada definition permits certain implementation 
dependencies. Each Ada implementation is required to supply a 
complete description of its dependencies, to be thought of as 
Appendix F to the Ada Language Reference Manual. This section is 
that description for the AN/UYK-43 target. 


P.l Options 

There are several compiler options provided by all ALS/N 
Compilers that directly affect the pragmas defined in the Ada 
Language Reference Manual. These compiler options currently 
include the CHECKS and OPTIMIZE options which affect the SUPPRESS 
and OPTIMIZE pragmas, respectively. A complete list of ALS/N 
Compiler options can be found in Section 9. 

The CHECKS option enables all run-time error checking for the 
source file being compiled, which can contain one or more 
compilation units. This allows the SUPPRESS pragma to be used in 
suppressing the run-time checks discussed in the Ada Language 
Reference Manual, but note that the SUPPRESS pragma(s) must be 
applied to each compilation unit. The NO_CHECKS option disables 
all run-time error checking for all compilation units within the 
source file and is equivalent to SUPPRESSing all run-time checks 
within every compilation unit. 

The OPTIMIZE option enables all compile-time optimizations 
for the source file being compiled, which can contain one or more 
compilation units. This allows the OPTIMIZE pragma to request 
either TIME-oriented or SPACE-oriented optimizations be 
performed, but note that the OPTIMIZE pragma must be applied to 
each compilation unit. If the OPTIMIZE pragma is not present, 
the ALS/N Compiler's Global Optimizer tends to optimize for TIME 
over SPACE. The NO_OPTIMIZE option disables all compile-time 
optimizations for all compilation units within the source file 
regardless of whether or not the OPTIMIZE pragma is present. 

In addition to those compiler options normally provided by 
the ALS/N Common Ada Baseline compilers, the Ada/L compiler also 
implements the EXECUTIVE, DEBUG, and MEASURE options. 


F.l Options 


F-01 



Version 3.5 
29 March 1991 


Ada/L PSE Kandbco< 


The £XECIIXIJ{E compiler option enables processing of PRAGMA 
EXECUTIVE an^ allows WITH of units compiled with the RTE_ONLY 
option. If NO_EXECUTIVE is specified on the command line, the 
pragma will be ignored and will have no effect on the generated 
code. 


The DEBUG compiler option enables processing of PRAGMA DEBUG 
to provide debugging support. If NO_DEBUG is specified, the 
DEBUG pragmas shall have no effect. Program units containing 
DEBUG pragmas and compiled with the DEBUG compiler option may be 
linked with program units containing DEBUG pragmas and compiled 
with the N0_DE3UG option; only those program units compiled with 
the /DEBUG option shall have additional DEBUG support. 


The /MEASURE compiler option enables run-time calls to 
Run-Time Performance Measurement Aids (RTAids) to record the 
entrance into all subprograms whose bodies are in the 
compilation. Program units compiled with the /MEASURE option may 
be linked with program units not compiled with the /MEASURE 
option; at run-time, only those subprograms in program units 
compiled with the /MEASURE option shall have this additional 
MEASURE support. 


F-02 


F.l 


Options 



Ada/L PSE Handbooi< 


Version 3.5 
29 March 1991 


F.2 Pragmas 

Both implementation-defined and Ada language-defined pragmas 
are provided by all ALS/N compilers. These paragraphs describe 
the pragmas recognized and processed by the Ada/L compiler. The 
syntax defined in Section 2.8 of the Ada Language Reference 
Manual allows a pragma as the only element in a compilation unit, 
before a compilation unit, at defined places within a compilation 
unit, or following a compilation unit. Ada/L associates pragmas 
with compilation units as follows: 

a. If a pragma appears before any compilation unit in a 
compilation, it will affect all following compilation units, 
as specified below and in section 10.1 of the Ada Language 
Reference Manual. 

b. If a pragma appears inside a compilation unit, it will be 
associated with that compilation unit, and with the listings 
associated with that compilation unit, as described in the 
Ada Language Reference Manual, or below. 

c. If a pragma follows a compilation unit, it will be associated 
with the preceding compilation unit, and effects of the 
pragma will be found in the container of that compilation 
unit and in the listings associated with that container. 

The pragmas MEMORY_SIZE, STORAGE_UNIT, and SYSTEM_NAME are 
described in Section 13.7 of the Ada Language Reference Manual. 
They may appear only at the start of the first compilation when 
creating a program library. In the ALS/N, however, since program 
libraries are created by the Program Library Manager and not by 
the compiler, the use of these pragmas is obviated. If they 
appear anywhere, a diagnostic of severity level WARNING is 
generated. 


F.2 Pragmas 


F-03 






Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.2.1 Langu^^H^efined Pragmas 

The following notes specify implementation-specific changes 
to those pragmas described in Appendix B of the Ada Language 
Reference Manual. Unmentioned pragmas are implemented as defined 
in the Ada Language Reference Manual. 

pragma INLINE (arg {,arg}); 

The arguments designate subprograms. There are three 
instances in which the INLINE pragma is ignored. Each 
of these cases produces a warning message which states 
that the INLINE did not occur. 

a. If the compilation unit containing the INLINEd 
subprogram depends on the compilation unit of its 
caller, a routine call is made instead. 

b. If the INLINEd subprogram's compilation unit 
depends on the compilation unit of its caller (a 
routine call is made instead). 

c. If an immediately recursive subprogram call is made 
within the body of the INLINEd subprogram (the 
pragma INLINE is ignored entirely). 

pragma INTERFACE (language_name, subprogram^name); 

The language_name specifies the language and type of 
interface to be used in calls used to the externally 
supplied subprogram specified by subprogram_name. The 
allowed values for language name are MACRO_NORMAL and 
MACRO_QUICK. MACRO__NORMAL Indicates that parameters 
will be passed on the stack and the calling conventions 
used for normal Ada subprogram calls will apply. 

MACRO_QUICK is used in RTLIB routines to indicate that 
parameters are passed in registers. See Section 7 
"Parameter Passing" for details on the space required 
to pass various types of parameters. 

You must ensure that an assembly-language body 
container will exist in the program library before 
linking. 


F-04 


F.2.1 


Language-Defined Pragmas 





Ada/L PSE Har.dbooK 


Version 3.5 
29 Marc.n 1991 


pragma O^IMIZE (arg); 

The argument is either TIME or SPACE. If TIME is 
specified, the optimizer concentrates on optimizing 
code execution time. If SPACE is specified, the 
optimizer concentrates on optimizing code size. T.he 
default 13 If the OPTIMIZE option is enabled and pragma 
OPTIMIZE is not present, global optimization is still 
performed with the default argument, SPACE. Program 
units containing OPTIMIZE pragmas and compiled with the 
OPTIMIZE option may be linked with program units 
containing OPTIMIZE pragmas and compiled with the 
NO_OPTIMIZE option; but only those program units 
compiled with the OPTIMIZE option will have global 
optimization support. 

pragma PRIORITY (arg); 

The argument is an integer static expression in the 
range 0..15, where 0 is the lowest use-specifiable task 
priority and 15 is the highest. If the value of the 
argument is out of range, the pragma will have no 
effect other than to generate a WARNING diagnostic. A 
value of zero will be used if priority is not defined. 
The pragma will have no effect when not specified in a 
task (type) specification or the outermost declarative 
part of a subprogram. If the pragma appears in the 
declarative part of a subprogram, it will have no 
effect unless that subprogram is designated as the main 
subprogram at link time. 

pragma SUPPRESS (arg {,arg}); 

This pragma is unchanged with the following exceptions: 

Suppression of OVERFLOW_CHECK applies only to integer 
operations; and PRAGMA SUPPRESS has effect only within 
the compilation unit in which it appears, except that 
suppression of ELABORATION_CHECK applied at the 
declaration of a subprogram or task unit applies to all 
calls or activations. 


F.2.1 


Language-Defined Pragmas 


F-05 







Version 3.5 
29 March 1991 


Ada/L ?SE HandocoK 


F.2.2 ImpleaMMi^tion-Defined Pragmas 

This paragraph describes the use and meaning of those p 

recognized cy Ada/L which are not specified in Appendix 3 o 

Ada Language Reference Manual. 

pragma DEBUG; 

This pragma enables the inclusion of full symbolic 
information and support for the Embedded Target 
Debugger. The DEBUG PRAGMA is enabled by the /DEBUG 
command line option and has no effect if this option is 
not provided. This pragma must appear within a 
Compilation unit, before the first declaration or 
statement. 

pragma EXECUTIVE [(arg)]; 

This pragma allows you to specify that a compilatior. 
unit is to run in the executive state of the machine 
and/or utilize privileged instructions. The pragma has 
no effect if the Compiler option NC_EXECUTIVE is 
enabled, either explicitly or by default. 

If PRAGMA EXECUTIVE is specified without an argument, 
executive state is in effect for the compilation unit 
and the code generator does not generate privileged 
instructions for the comoilation unit. If PRAGMA 
EXECUTIVE (INHERIT) is specifitd, a subprogram in the 
compilation unit inherits the state of its caller and 
the code generator does not generate privileged 
instructions for the compilation unit. If PRAGMA 
EXECUTIVE (PRIVILEGED) is specified, the executive 
state is in effect and the code generator may generate 
privileged instructions for the compilation unit. 
Currently, the Ada/L compiler does not generate such 
instructions. In the absence of PRAGMA EXECUTIVE, the 
compilation unit executes in task state and the code 
generator does not generate privileged instructions. 

If PRAGMA EXECUTIVE (INTERRLPT_CMR) is specified, the 
Ada/L compiler generates code which uses executive 
state registers instead of task state registers (i.e. 
SCI instead of SCT). 

PRAGMA EXECUTIVE is applied once per compilation unit, 
so its scope is the entire compilation unit. PRAGMA 
EXECUTIVE may appear between the context clause and the 
outermost unit. If there is no context clause, PRAGMA 
EXECUTIVE must appear within that unit before the first 
declaration or statement. The placement of the pragma 
before the context clause has no effect on any or all 
following compilation units. If PRAGMA EXECUTIVE 
appears in the specification of a compilation unit, it 


=•-06 


F.2.2 Implementation-Defined Pragmas 


th 




Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


musiisr^lso appear in the body of that unit, and vice 
versa. If the pragma appears in a specification but is 
absent from the body, you are warned and the pragma is 
effective. If the pragma appears in the body of a 
compilation unit, but is absent from the corresponding 
specification, you are warned and che pragma has no 
effect. PRAGMA EXECUTIVE does not propagace to 
subunits. If a subunit is compiled without PRAGMA 
EXECUTIVE and the parent of the subunit is compiled 
with PRAGMA EXECUTIVE, you are warned and PRAGMA 
EXECUTIVE has no effect on the subunit. 

pragma FAST_INTERRUPT_ENTRY (entry_name, IMMEDIATE); 

This pragma provides for situations of high interrupt 
rates with simple processing per interrupt, (such as 
adding data to a buffer), and where complex processing 
occurs only after large numbers of these interrupts 
(such as when the buffer is full). This allows for 
lower overhead and faster response capability by 
restricting you to disciplines that are commensurate 
with limitations normally found in machine level 
interrupt service routine processing. 

pragma MEASURE (extraction_set, [arg {,arg})); 

This pragma enables one or more performance measurement 
features. Pragma MEASURE specifies a user-defined 
extraction set for the Run-Time Performance Measurement 
Aids and Embedded Target Profiler. The user-defined 
extraction set consists of all occurences pragma 
MEASURE throughout the program. Extraction_set is a 
numeric literal, which is an index into a user-supplied 
table. Arg is a varl.ble or a list of variables whose 
values are reported at this point in the execution. 
These values describe the nature (TYPE) of the values 
collected to an independent data reduction program. 
Pragma MEASURE is enabled by the /MEASURE command line 
option and has no effect if this option is not 
provided. This pragma should be applied to a package 
body rather than a package specification. 

pragma STATIC (INTERRUPT_HANDLER_TASK); 

The pragma STATIC is only allowed immediately after the 
declaration of a task body containing an immediate 
interrupt entry. The argument is 

INTERRUPT_HANDLER_TASK. The effect of this pragma will 
be to allow generation of nonreentrant and nonrecursive 
code in a compilation unit, and to allow static 
allocation of all data in a compilation unit. This 
pragma shall be used to allow for procedures within 
immediate (fast) interrupt entries. The effect will be 


F.2.2 Implementation-Defined Pragmas 


F-07 




Version 3.5 
29 March 1991 


Ada/L PSE HandbocK 


for the-co»piler to generate nonreentrant code for the 
affected procedure bodies. If a STATIC procedure is 
called recursively, the program is erroneous. 

pragma TITLE (arg); 

This is a listing control pragma. It takes a single 
argument of type string. The string specified will 
appear on the second line of each page of the source 
listing produced for the compilation unit within which 
it appears. The pragma should be the first lexical 
unit to appear within a compilation unit (excluding 
comments). If it is not, a warning message is issued. 

pragma TRIVIAL_ENTRY (NAME: entry_simple_name); 

This pragma is only allowed within a task specification 
after an entry declaration and identifies a 
Trivial_Entry to the system. A trivial entry 
represents a synchronization point, contained in a 
normal Ada task, for rendezvous with a fast interrupt 
entry body. The body of a trivial entry must be null. 

pragma UNMAPPED (arg {,arg}); 

The effect of this pragma is for unmapped (i.e., not 
consistently mapped within the virtual space) 
allocation of data in a compilation unit. The 
arguments of this pragma are access types to be 
unmapped. If a program tries to allocate more UNMAPPED 
space than is available in the physical configuration, 
STORAGE^ERROR will be raised at run-time. PRAGMA 
UNMAPPED must appear in the same declarative region as 
the type and after the type declaration. 


F-08 


F.2.2 


Implementation-Defined Pragmas 






Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.2.3 Sflope of Pragmas 

The scope for each pragma previously described as differing 

from the Ada Language Reference Manual is aiven belowr 

DEBUG Applies to the compilation unit in which the pragma 

appears. 

EXECUTIVE Applies to the compilation unit in which the pragma 
appears, i.e., to all subprograms and tasks within 
the unit. Elaboration code is not affected. 

The pragma is not propagated from specifications 
to bodies, or from bodies to subunits. The pragma 
must appear consistently in the specification, 
body, and subunits associated with a library unit. 

FAST_INTERRUPT_ENTRY 

Applies to the compilation unit in which the pragma 
appears. 

INLINE Applies only to subprogram names in its 

arguments. If the argument is an overloaded 
subprogram name, the INLINE pragma applies to 
all definitions of that subprogram name which 
appear in the same declarative part as the 
INLINE pragma. 

INTERFACE Applies to all invocations of the named 
imported subprogram. 

MEASURE No scope, but a WARNING diagnostic is 

generated. 

MEMORY_SIZE No scope, but a WARNING diagnostic is 
generated. 

OPTIMIZE Applies to the entire compilation unit in 

which the pragma appears. 

PRIORITY Applies to the task specification in which it 

appears, or to the environment task if it 
appears in the main subprogram. 

STATIC Applies to the compilation unit in which the pragma 

appears. 

STORAGE_UNIT No scope, but a WARNING diagnostic is 
generated. 

SUPPRESS Applies to the block or body that contains 

the declarative part in which the pragma 
appears. 


F.2.3 Scope of Pragmas 


F-09 




Version 3.5 
29 March 1991 


Ada/L PSE Handboolc 


SYSTEM_NAME ^ 
TITLE 

TRIVrAL_ENTRY 

UNMAPPED 


Ala scope, but a WARNING diagnostic is 
generated. 

The compilation unit within which the pragma 
occurs. 

Applies to the compilation unit in which the pragma 
appears. 

Applies to all objects of the access type 
named as arguments. 


F-10 


F.2.3 Scope of Pragmas 






Ada/L PSE Handbook 


Version . 5 
29 March 1991 


F.3 Att^^utes 

The following notes augment the language-required definitions 
of the predefined attributes found in Appendix A of the Ada 
Language Reference Manual. 


T'MACHINE_EMAX 
T'MACHINE_EMIN 
T'MACHINE_MANTISSA 
T'MACHINE_OVERFLOWS 
T’MACHINE_RADIX 
T'MACHINE ROUNDS 


is 

63. 

is 

-64. 

is 

6. 

is 

TRUE. 

is 

16. 

is 

FALSE 


F.3 Attributes 


F-ll 



Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.4 Predefiaad.Language Environment 

The predefined Ada language environment consists of the 
packages STANDARD and SYSTEM, which are described below. 


F.4.1 Package STANDARD 

The package STANDARD contains the following definitions in 
addition to those specified in Appendix C of the Ada Language 
Reference Manual. 

TYPE boolean IS (false, true); 

FOR boolean'SIZE USE 1; 

TYPE integer IS RANGE -2_147_483_647 .. 2_147_483_647; 

TYPE long_integer IS RANGE 

-9_223_372_036_854_775_807 .. 9_223_372_036_854_775_807; 

TYPE float IS DIGITS 6 RANGE 

-(16#0.FF_FFF8#E63) .. {16#0.FF_FFF8#E63); 
TYPE long_flaat IS DIGITS 15 RANGE 

-{16#0.FF_FFFF_FFFF_FFE0#E63) .. 
(16#Q.FF_FFFF__FFFF_FFE0#E63) ; 

SUBTYPE natural IS integer RANGE 0 .. integer'LAST; 

SUBTYPE positive IS integer RANGE 1 .. integer'LAST; 

SUBTYPE long_natural IS long_integer 

RANGE 0 .. long_integer’LAST; 

SUBTYPE long_positive IS long_integer 

RANGE 1 .. long_integer'LAST; 

FOR character'SIZE USE 8; 

TYPE string IS ARRAY (positive RANGE <>) OF character; 
PRAGMA PACK(string); 

TYPE duration IS DELTA 2.0 ** (-14) 

RANGE -131_071.0 .. 131_071.0; 

— The predefined exceptions; 

constraint^error : exception; 

numeric_error ; exception; 

prograra_error ; exception; 

storage~error : exception; 

tasking_error ; exception; 


F-12 


F.4.1 Package STANDARD 







Ada/L PSE Handbook 


Version J.5 
29 Marcn 1991 


F. 4.2 E^Jcage SYSTEM 

The package SYSTEM for Ada/L is as follows: 

TYPE name IS (anuyk43); 

system_name : CONSTANT system.name := system.anuyk43; 
storage_unit : CONSTANT ;= 32; 

memory_size : CONSTANT := 1_048_576; 

TYPE address IS RANGE 0..system.memory_si 2 e - 1; 

— System Dependent Named Numbers 

min_int : CONSTANT := -((2**63)-1); 

max_int : CONSTANT := (2**63)-l; 

max_digits ; CONSTANT := 15; 

max_mantissa ; CONSTANT := 31; 

fine_delta : CONSTANT 

:= 2 # 0 . 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 001 #; 
tick ; CONSTANT := 4.8828125e-05; 

— 1/20480 seconds is the basic clock period. 
null_addr ; CONSTANT address := 0; 

— Other System Dependent Declarations 

SUBTYPE smaller_integer IS 

integer RANGE (integer'FIRST/64)..(integer'LAST/64); 

SUBTYPE priority IS integer RANGE 0..15; 

TYPE entry_kind is (normal, immediate); 

physical_memory__si 2 e ; CONSTANT ;= 2**31; 

TYPE physical_address IS 

RANGE 0..system.physical_memory_3i2e - 1 ; 

null_phys_addr ; CONSTANT physical_addre3s := 0; 

TYPE word IS NEW INTEGER; 


— Address clause (interrupt) addresses 

; CONSTANT 
address := 16#0800# 
; CONSTANT 
address := 16#ia00# 
; CONSTANT 
address ;= 16#1000# 
: CONSTANT 
address := 1611100# 
; CONSTANT 
address := 16#1200# 
; CONSTANT 
address ;= 16#1300# 
: CONSTANT 


Class_I__Unhandled_addres3 

Clas3_II_Unhandled_address 

CP^Ope r and^Memo r y_Re s ume_add r e s s 

CP_IOC_Command_Resume_address 

CP_In3truction_Memory_Resume_addres3 

CP_I0C_Interrupt_Code_Resurae_addres3 

CP_Ope r a nd__Memo ry_Error_addres3 


F.4.2 Package SYSTEM 


F-13 






Version 3.5 Ada/L PSE Handbook 

29 March 1991 


CP_Instruction_Memory_Srror_address 
CP_IOC_Command_Operand_Error_address 
IOC_Memory_Error_address 
IPI_Fault_address 
IOC_Memo ry_Hesume_address 
Intercomputer_Timeout_address 
Confidence_Test_Fault_address 
CPU_I0C_Microprocessor_Stop_addres3 
Module_Interrupt_addres3 
Power_Tolerance_rnterrupt_address 
Class_III_Unhandled_address 
CP_Illegal_Instruction_Error_address 
Privileged_Instruction_Error_address 
Data__Pattern_Breakpoint_address 
Operand_Breakpoint__Match_address 
Operand_Read_address 
DCU_Status__Interrupt_address 
Operand^Write_Protection_addres3 
0perand_Limit_Protection_addre33 
In3truction_Breakpoint Match_addres3 


address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address ;= 
; CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
; CONSTANT 
address := 
: CONSTANT 
address ;= 
: CONSTANT 
address :~ 
: CONSTANT 
address := 
: CONSTANT 
address 
: CONSTANT 
address ;= 
; CONSTANT 
address := 
: CONSTANT 
address := 
; CONSTANT 
address := 
; CONSTANT 
address := 


16#1400#; 

16#1500#; 

16#1600#; 

I6#1700#; 

16(^1900#; 

16#1A00#; 

16#1B00#; 

16#1C00#; 

16#1D00#; 

16#1E00#; 

16#1F00#; 

16#2800#; 

16#2200#; 

16#2300#; 

16#2400«; 

16#2500#; 

1612600#; 

16#2700#; 

1612900#; 

16#2A00#; 

16#2B00#; 


F-14 


F.4.2 Package SYSTEM 








Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


— RT^_interrupt addresses (16#2B01# .. 16#2B1F#) 
rtde55gjpseudo_in*;errupt : CONSTANT address := 16#2301#; 
PMAids_pseudo address : CONSTANT address := 16#2B10#; 


RPD_Underflow_address 

Instruccion_Execute_Protection_address 
Instruction_Linii t_Protection_address 
Precisely_Timed_Interrupts_address 


: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 


16#2C00#; 

16#2D00#; 

i6#2E00#; 

16#2F004; 


once_only_pti : CONSTANT duration := 0.0; 

— Used to indicate that a PTI is not to be periodic. 
SUBTYPE pti_address IS address RANGE 16#2F01#..16#2F1F#; 
TYPE pti_state IS (active,inactive,unregistered); 


IOC_I1legal_CAR_Instruction 
IOC_Memory_Protection 
IOC_Channel_Function_Error 
IOC_I1legal_Chain_Instruction 
IOC_Conf idence__Test_Fault 
IOC_Breakpoint~Match 
IOC_CP_Interrupt 
IOC_External_Interrupt_Monitor 
IOC_External_Function__Monitor 
IOC_Output__Data_Monitor 
IOC_Input__Data_Monitor 


CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 


16#3000# 

16#3100# 

16#3300# 

16#3400# 

16#3800# 

16#3900# 

16#3B00# 

16#3C004 

16#3D00# 

16#3E00# 

16#3FOO# 


SUBTYPE IO_interrupts IS address RANGE 

IOC_Illegal_CAR Instruction..IOC_Input_Data_Monitor; 
SUBTYPE channel numbers IS INTEGER RANGE 0..63; 


— The following exceptions are provided as a "convention" 

— whereby the Ada program can be compiled with all implicit 

— checks suppressed (i.e. pragma SUPPRESS or equivalent), 

— explicit checks included as necessary, the appropriate 

— exception raised when required, and then the exception is 

— either handled or the Ada program terminates. 


ACCESS CHECK 

DISCRIMINANT_CHECK 

INDEX_CHECK 

LENGTH_CHECK 

RANGE_CHECK 

DIVISION_CHECK 

OVERFLOW_CHECK 

ELABORATION_CHECK 

STORAGE CHECK 


EXCEPTION, 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 


F.4.2 Package SYSTEM 


F-15 







Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


— imDleme»tation-defined exceptions. 

UNRES6lVED_REFERENCE : EXCEPTION; 

SYSTEM_ERROR : EXCEPTION; 

CAPACITY_ERROR : EXCEPTION; 

— The exception CAPACITY_ERROR is raised by the RTExec when 

— Pre-RunTime specified resource limits are exceeded. 


FUNCTION ADDRESS_OF 

— returns the system.address of the given Class III 

— interrupt for the specified channel 
(interrupt : IN IO_interrupts; 

for_channel ; IN channel_numbers 
) RETURN address; 

— The address to be used in the 
— representation (address) clause. 

PRAGMA INTERFACE (MACRO NORMAL,ADDRESS OF); 


FUNCTION "AND'' 

— returns the logical 32 bit 'AND* between two integers. 
(operand_a : IN integer; 

operand_b ; IN integer 
) RETURN integer; 

PRAGMA INTERFACE (MACRO_NORMAL, "AND”); 

FUNCTION "NOT" 

— returns the logical 32 bit ’NOT’ of an integer. 
(operand_a : IN integer 

) RETURN integer; 

PRAGMA INTERFACE (MACRO_NORMAL, "NOT"); 

FUNCTION "OR" 

— returns the logical 32 bit ’OR’ between two integers. 
(operand_a ; IN integer; 

operand_b : IN integer 
) RETURN“integer; 

PRAGMA INTERFACE (MACRO NORMAL, "OR"); 


F-16 


F.4.2 Package SYSTEM 







Ada/L ?SE Handbook 


Version 3 
29 March 19 


P.5 Chaleter Set 

Ada compilations may be expressed using the 
characters in addition to the basic character se 

lower case letters: 

abcdefghijklmnopqrstuvwxyz 

special characters: 

!$%?@[ ]"'{}■ 

The following transliterations are permitted: 

a. Exclamation point for vertical bar, 

b. Colon for sharp, and 

c. Percent for double-quote. 


F.5 


Character Set 


F 


UJ -1.) 





Version 3.5 
29 March 1991 


Ada/L ?SE Handbook 


F.6 Declaray^cuand Representation Restrictions 

Declarations are described in Section 3 of the Ada Language 
Reference Manual, and representation specifications are described 
in Section 13 of- the Ada Language Reference Manual and discussed 
here. 


In the following specifications, the capitalized word SIZE 
indicates the number of bits used to represent an object of the 
type under discussion. The upper case symbols D, L, R, 
correspond to those discussed in Section 3.5.9 of the Ada 
Language Reference Manual. 


P.6.1 Integer Types 

Integer types are specified with constraints of the form: 
RANGE L..R 


where: 


R <= SYSTEM.MAX_INT & L >=* SYSTEM.MIN_INT 

For a prefix "t” denoting an integer type, length specifications 
of the form: 

FOR t'SIZE USE n ; 

may specify integer values n such that n in 2..64, 

R <= 2**(n-l)-l & L >= -(2**(n-l)-l) 
or else such that 

R <= (2**n)-l 4 L >= 0 
and 1 < n <= 31. 

For a stand-alone object of integer type, a default SIZE of 32 is 
used when: 

R <= 2**31 - 1 4 L >= -(2**31 - 1) 

Otherwise, a SIZE of 64 is used. 

For components of integer types within packed composite 
objects, the smaller of the default stand-alone SIZE and the SIZE 
from a length specification is used. 


F-ia 


F.6.1 Integer Types 




Ada/L PSE Handboo:^ 



F.6.2 £ioa.ting Types 

Floating types are specified with constraints of the forT.: 
DIGITS D 

where D is an integer in the range 1 through 15. 

For a prefix "t" denoting a floating point type, length 
specifications of the form: 

FOR t'SIZE USE n; 

are permitted only when the integer value n = 32 for D <= 5 or N 
= 64 for 7 <= D <= 15. 


P.6.3 Fixed Types 

Fixed types are specified with constraints of the form: 
DELTA D RANGE L..R 

where: 


MAX (ABS(R), ABS{LM 

- <= 2**31 - 1. 

actual delta 

The actual delta defaults to the largest integral power of 2 less 
than or equal to the specified delta D. (This implies that fixed 
values are stored right-aligned.) 

For fixed point types, length specifications of the form: 
for T'SIZE use N; 

are permitted only when N in 1 .. 32, if: 

R - actual_delta <= 2**(N-1)-1 * actual_delta, and 
L + actual_delta >- -2**(n-l) * actual)delta 

or 


R - actual_delta <= 2**{N)-1 * actual_delta, and 
L >= 0 


F-19 


F.6.3 Fixed Types 






Version 3.5 
29 Marcn 1991 


Ada/L ?SE Har.dbcok 


For 3tand-ai^e,ubjects of fixed point type, a default size of 32 
is used. For components of fixed point types within packed 
composite objects, the size from the length specificacion will be 
used. 

For specifications of rhe form: 

FOR t'SMALL USE n; 

are permitted for any value of X, such that X <= D. X must be 
specified either as a base 2 value or as a base 10 value. Mote 
that when X is specified as other than a power of 2, actual_delta 
will still be the largest integreal power of two less than X. 


F.6.4 Enumeration Types 

In the absence of a representation specification for an 
enumeration type "t," the internal representation of t'FIRST is 
0. The default size fo” a stand-alone object of enumeration type 
"t" ia 32, so the internal representations of c'FIRST and t'LAST 
both fall within the range: 

-'2**31 - 1) .. 2**31 - 1. 

For enumeration types, length specifications of the form: 

FOR t'SIZE USE n; 

and/or enumeration representations of the form: 

FOR t USE <aggregace>; 

are peruitted for n in 2..32, provided the representations 
and the SIZE conform to the relationship specified above. 

Or else for n in 1..32, is supported for enumeration 
types and provides an internal representation of: 

t'FIRST >= 0 .. t'LAST <= 2**(t’SIZE) - 1. 

For components of enumeration types within packed composite 
objects, the smaller of the default stand-alone SIZE or the SIZE 
from a length specification is used. 

Enumeration representations for types derived from the 
predefined type STANDARD.BOOLEAN will not be accepted, but length 
specifications will be accepted. 


F-20 


F.6.4 Enumeration Types 





Ada/L PSE Handbook 


Version 3.5 
29 Marc.n 1991 


F.6.5 Access Types 

For access type, "t," length specifications of the forT.: 

FOR t'SIZE USE n; 

will not affect the runtime implementation of "t," therefore n = 
32 is the only value permitted for SIZE, which is the value 
returned by the attribute. 

For collection size specifications of the form: 

FOR t'STORAGE_SIZE USE n; 

for any value of "n" is permitted for STORAGE_SIZE (and that 
value will be returned by the attribute call). The collection 
size specification will affect the implementation of "t" and its 
collection at runtime by limiting the number of objects for type 
"t" that can be allocated. 

The value of t'STORAGE_SIZE for an access type "t" specifies 
the maximum number of storage_units used for all objects in the 
collection for type "t.” This includes all space used by the 
allocated objects, plus any additional storage required to 
maintain the collection. 


F.6.6 Arrays and Records 

For arrays and records, a length specification of the form: 

FOR t'size USE n; 

may cause arrays and records to be packed, if required, to 
accommodate the length specification. If the size specified is 
not large enough to contain any value of the type, a diagnostic 
message of severity ERROR is generated. 

The PACK pragma may be used to minimize wasted space between 
components of arrays and records. The pragma causes the type 
representation to be chosen such that the storage space 
requirements are minimized at the possible expense of data access 
time and code space. 

A record type representation specification may be used to 
describe the allocation of components in a record. Bits are 
numbered 0..31 from the right. Bit 32 starts at the right of the 
next higher numbered word. Each location specification muse 
allow at least n bits of range, where n is large enough to hold 
any value of the subtype of the component being allocated. 
Otherwise, a diagnostic message of severity ERROR is generated. 
Components that are arrays, records, tasks, or access variables 
may not be allocated to specified locations. If a specification 


F.6.6 Arrays and Records 


F-2i 








'■.rsion 3.5 
.9 March 1991 


Ada/L PSE Handbook 


of this forn^3_entered, a diagnostic message of severity ERROR 
is generated. 

For records, an alignment clause of the form: 

AT MOD n 

specify alignments of 1 word (word alignment) or 2 words 
(doubleword alignment). 

If it is determinable at compile time that the SIZE of a 
record or array type or subtype is outside the range of 
STANDARD.INTEGER, a diagnostic of severity WARNING is generated. 
Declaration of such a type or subtype would raise NUMERIC_ERROR 
when elaborated. 


P.6.7 Other Length Specifications 

Length Specifications are described in Section 13.2 of the 
Ada Language Reference Manual. 

A length specification for a task type "t," of the form: 

FOR t'STORAGE_SIZE USE n; 

specifies the number of SYSTEM.STORAGE__UNITS that are allocated 
for the execution of each task object of type "t." This includes 
the runtime stack for the task object but does not include 
objects allocated at runtime by the task object. If a 
t' STORAGE_SIZE is not specified for a task type ''t,” the default 
I value is 2K (words). 

I A length specification for a task type "t" of the form: 

I FOR t’SrZE USE n; 

I is allowable only for n = 32. 


F-22 


F.6.7 Other Length Specifications 








Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.7 Generated Names 

Refer to Section 13.7 of the Ada Language Reference Manual 
and the section above on the Predefined Language Environment for 
a discussion of package SYSTEM. 

The system name is chosen based on the targec(s) supported, 
but it cannot be changed. In the case of Ada/L, the system name 
is ANUYK43. 


P.8 Address Clauses 

Refer to Section 13.5 of the Ada Language Reference Manual 
for a description of address clauses. All rules and restrictions 
described there apply. In addition, the following restrictions 
apply. 

An address clause may designate a single task entry. Such an 
address clause is allowed only within a task specification 
compiled with the EXECUTIVE compiler option. The meaningful 
values of the simple_expression are the allowable interrupt entry 
addresses as defined in Table F-1. The use of other values will 
result in the raising of a PROGRAM_ERROR exception upon creation 
of the task. 

If more than one task entry is equated to the same interrupt 
entry address, the most recently executed interrupt entry 
registration permanently overrides any previous registrations. 

At most one address clause is allowed for a single task 
entry. Specification of more than one interrupt address for a 
task entry is erroneous. 

Address clauses for objects and code other than task entries 
are allowed by the Ada/L target, but they have no effect beyond 
changing the value returned by the 'ADDRESS attribute call. 


F.8 Address Clauses 


F'23 




Version 3.5 
29 March 1991 


Ada/L ?SE HandbooK 


■AN/UYK-43(V) Interrupt 

Summary 

i 


ISC 

Interrupt 

i 

Target-Computer Interrupt 

CODE 

Entry Address 

Registration ' 

CLASS 

0 



Class I Unhandled Interrupt 

None 

16#0800# 


CLASS 

I 


1 

Class II Unhandled Interrupt 

None 

16#1800# 

1 

1 

CP-Operand Memory Resume 

16#0# 

16#1000# 


CP-IOC Command Resume 

16#1# 

16#1100# 

j 

CP-Instruction Memory Resume 

16#2f 

1611200# 


CP-IOC Interrupt Code Resume 

16#3# 

16#1300# 


CP-Operand Memory Error 

16#4# 

16#1400# 


CP-Instruction Memory Error 

16#5# 

16#1500# 


CP-IOC Command/Operand Error 

16#6# 

16#1600# 


IOC Memory Error 

16#7# 

16#1700# 


IPI Fault 

16#9# 

16#1900# 

1 

IOC Memory Resume 

16#A# 

16#1A00# 

I 

Intercomputer Timeout 

16#B# 

16#1B00# 


CP Confidence Test Fault 

16#C# 

16#1C00# 


CPU/IOC Microprocessor Stop 

16#D# 

16#1D00# 


Module Interrupt 

16#E# 

16#1£00# 


Power Tolerance 

16#F# 

16#1F00# 

1 

t 

CLASS 

II 


( 

1 

Class III Unhandled Interrupt 

None 

16#2800# 


Interprocessor Interrupt 

16#0# 

16#2000# 

UNDEFINABLE 

Floating Point Error 

16#1# 

16#2100# 

UNDEFINABLE 

Illegal Instruction 

16#2# 

16#2200# 


Privileged Instruction Error 

16#3# 

16»2300» 


Data Pattern Breakpoint 

16#4# 

16#240C# 


Operand Address Breakpoint 

16#5# 

16#2500# 


Operand Read or 




Indirect Addressing 

16#6# 

16#2600# 


DCU Status Interrupt 

16#7# 

16#2700# 


Operand Write 

16#9# 

16#2900# 


Operand Limit 

16#A# 

16#2A00# 


Instruction Address Breakpoint 

16#B# 

16#2B00# 


RPD Underflow 

16#C# 

16#2C00# 


Instruction Execute 

16#D# 

16#2D00# 


Instruction Limit 

16#E# 

16#2EOO# 


Monitor Clock 

16#F| 

16#2F00I 

UNDEFINABLE 

PTI 

None 

16#2F01# .. 

16#2F1F# 


Table F-la - Interrupt Entry Addresses 


F-24 


F.8 Address Clauses 














Ada/L PSE Handbook 


Version 
29 March 1 


AN/UYK-43(V) Interrupt Summary 


ISC Interrupt 

Target-Computer Interrupt CODE Entry Address Registration 


CLASS III 


IOC Illegal CAR Instruction 16#0# 16#30I0# 

IOC Memory Protection 16#1# 16#31IC# 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be 
translated to Class II Unhandled. 

UNDEFINED 16#2# 16#3200# UNDEFINABLS 

Channel Function Error 16#3# 16#33IC# 

IOC Illegal Chain Instruction 16#4#.. 16#34IC# 

16#7# 

IOC Confidence Test Fault 16#8# 16#38IC# 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be 
translated to Class II Unhandled. 

IOC Breakpoint Match 16#9# 16#39IC# 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be 
translated to Class II Unhandled. 

IOC Monitor Clock 16#A# !■' ^3AI0# UNDEFINABLE 

IOC Processor Interrupt 16#B# 1 -381^ 

External Interrupt Monitor 16#C# 16#3CIC# 

External Function Monitor 16#D# 16#3DIC# 

Output Data Monitor 16#E# 16#3EIC# 

Input Data Monitor 16#F# 16#3FIC# 

For class III interrupts, the following interpretations apply: 

IC *> IOC, channel number where 

16#00#..16#1F# indicates IOC 0, channel 16#00..16#1FI, 
16#20#..16#3F# indicates IOC 1, channel 16#00..16#1F# 


Table F-lb - Interrupt Entry Addresses (Continued) 


F.8 Address Clauses 


F-25 








Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.9 Onchecke^^onversions 

Refer to’Section 13.10.2 of the Ada Language Reference Manual 
for a description of UNCHECKED_CONVERSION. It is erroneous if 
your Ada program performs UNCHECKED_CONVERSION when the source 
and target objects have different sizes. 


F.IO Restrictions on the Main Subprogram 

Refer to Section 10.1 (8) of the Ada Language Reference 
Manual for a description of the main subprogram. The subprogram 
designated as the main subprogram cannot have parameters. The 
designation as the main subprogram of a subprogram whose 
specification contains a formal_part results in a diagnostic of 
severity ERROR at link time. 

The main subprogram can be a function, but the return value 
will not be available upon completion of the main subprogram's 
execution. The main subprogram may not be an import unit. 




F-26 


F.IO Restrictions on the Main^Subprogram 





Ada/L PSE Handbook 


Version 3.5 
29 Marc.b 1991 


F.ll Inpu^/Output 

Refer to Section 14 of the Ada Language Reference Manual for 
a discussion of Ada Input/Output and to Section 12 of the Ada/L 
Run Time Environment Handbook for more specifics on the Ada/L 
Input/Output subsystem. 

The Ada/L Input/Output subsystem provides the following 
packages: TEXT_rO, SEQUENTIAL_IO, DIRECT_IO, and L0W_L£VEL_:0. 
These packages execute in the context of the user-written Ada 
program task making the I/O request. Consequently, all of the 
code that processes an I/O request on behalf of the user-written 
Ada program executes sequentially. The package IO_EXCEPTIONS 
defines all of the exceptions needed by the packages 
SEQUENTIAL_IO, DIRECT_IO, and TEXT_ro. The specification of this 
package is given in Section 14.5 of the Ada Language Reference 
Manual. This package is visible to all of the constituent 
packages of the Ada/L I/O subsystem so that appropriate exception 
handlers can be inserted. 

I/O in Ada/L is performed solely on external files. No 
allowance is provided in the I/O subsystem for memory resident 
files (i.e./ files which do not reside on a peripheral device). 
This is true even in the case of temporary files. With the 
external files residing on the peripheral devices, Ada/L makes 
the further restriction on the number of files that may be open 
on an individual peripheral device. 

Section 14.1 of the Ada Language Reference Manual states that 
all I/O operations are expressed as operations on objects of some 
file type, rather than in terms of an external file. File 
objects are implemented in Ada/L as access objects which point to 
a data structure called the File Control Block. This File 
Control Block is defined internally to each of the high-level I/O 
packages; its purpose is to represent an external file. The File 
Control Block contains all of the I/O-specific information about 
an external file needed by the high-level I/O packages to 
accomplish requested I/O operations. 


F.11.1 Naming External Files 

The naming conventions for external files in Ada/L are of 
particular importance to you. All of the system-dependent 
information needed by the I/O subsystem about an external file is 
contained in the file name. External files may be named using 
one of three file naming conventions: standard, temporary, and 
user-derived. 


F.11.1 Naming External Files 


F-27 





Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F. 11.1.1 StatfSiard File Names 

The standard external file naming convention used in Ada/L 
identifies the specific location of the external file in terms of 
the physical device on which it is stored. For this reason, you 
should be aware of the configuration of the peripheral devices on 
the AN/UYK-43 at your particular site. 

Standard file names consist of a six character prefix and a 
file name of up to twenty characters. The six character prefix 
has a predefined format. The first and second characters must be 
either "DK," "MT,” or "tt,'* designating an AN/UYH-3(V) 
Recorder/Reproducer Set Magnetic Disk, the RD-358 Magnetic Tape 
Subsystem, or the AN/USQ-69 Data Terminal Set, respectively. 

The third and fourth characters specify the channel on which 
the peripheral device is connected. Since there are sixty-four 
channels on the AN/UYK-43, the values for the third and fourth 
positions must lie in the range "OQ" to ’’63.” 

The range of values for the fifth position in the prefix (the 
unit number) depends upon the device specified by the characters 
in the first and second positions of the external file name. If 
the specified peripheral device is the AN/UYH-3 magnetic disk 
drive, the character in the fifth position must be one of the 
characters "O," "1," "2," or ”3.” This value determines which of 
the four disk units available on the AN/UYH-3 is to be accessed. 
If the specified peripheral device is the RD-358 magnetic tape 
drive, the character in the fifth position must be one of the 
characters "O,” "I," '*2,'* or '’3." This value determines which of 
the four tape units available on the RD-358 is to be accessed. 

If the specified peripheral device is the AN/USQ-69 militarized 
display terminal, the character in the fifth position depends on 
the channel type- If the channel type is parallel then this 
character must be a ''O.” Ihis is tn^ only allowable value for 
the unit number when the AN/USQ-69 is connected to a parallel I/O 
channel. This is because the AN/USQ-69 may have only one unit on 
a parallel channel. If the channel type is serial then the 
character in the fifth position must be one of the characters 
”0," "I," "a,” ''3," "4,” "5,” ’•6,’’ ''7," or "8" (the character "8" 
will be used to specify a broadcast mode transmission). The 
AN/USQ-69 allows up to eight terminals to be daisy chained 
together v.^en running on a serial channel. 

The colon (":") is the only character allowed in the sixth 
position. If any character other than the colon is in this 
position, the file name will be considered non-standard and the 
file will reside on the default device defined during the 
elaboration of CONFIGURE__IO. 

Positions seven through twenty-six are optional to your Ada 
program and may be used as desired. These positions may contain 
any printable character you choose in order to make the file name 


F-28 


F.11.1.1 Standard File Names 






Ada/L PSE Handbook 


Version 3.5 
29 March 199i 


more intangible. Embedded blanks, however, are not allowed. 

The location of an external file on a peripheral device is 
thus a function of the first six characters of the file name 
regardless .of the characters that might follow. For example, if 
the external file "MTOGO;01d_Data" has been created and not 
subsequently closed, an attempt to create the external file 
"MTOOO:New_Data" will cause the exception DEVICE_ERROR (rather 
than NAME_ERROR or USE_ERROR) to be raised because the peripheral 
device on channel ”00'' and cartridge "0" is already in use. 

You are advised that any file name beginning with "xxxxx:” 
(where x denotes any printable character) is assumed to be a 
standard external file name. If this external file name does not 
conform to the Ada/L standard file naming conventions, the 
exception NAME_ERROR will be raised. 


F.11.1.2 Temporary File Names 

Section 14.2.1 of the Ada Language Reference Manual defines a 
temporary file to be an external file that is not accessible 
after completion of the main subprogram. If the null string is 
supplied for the external file name, the external file is 
considered temporary. In this case, the high level I/O packages 
internally create an external file name to be used by the lower 
level I/O packages. The internal naming scheme used by the I/O 
subsystem is a function of the type of file to be created (texc, 
direct or sequential) and the current date and time. This scheme 
is consistent with the requirement specified in the Ada Language 
Reference Manual that all external file names be unique. 

The first two characters of the file name are "TX," ''D_," or 
''S_." The next eight characters are the date (four characters 
for the year, two characters for the month, and two characters 
for the day). The remaining ten characters are the time (five 
for seconds and five for the fraction part of a second). For 
instance, the temporary external file name ''D_198803311234598765'' 
would be a DIRECT__IO file created March 31, 1988 at 12,345.98765 
seconds. "" 


F.11.I.3 aser-Oerived File Names 

A random string containing a sequence of characters of length 
one to twenty may also be used to name an external file. 

External files with names of this nature are considered to be 
permanent external files. You are cautioned from using names 
which conform to the scheme used by the I/O subsystem to name 
temporary external files (see list item "b”). 

It is not possible to associate two or more internal files 
with the same external file. The exception USE_ERROR will be 


F.11.1.3 User-Derived File Names 


F-29 






Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


raised if thfff-restriction is violated. 


P.11.2 The FORM Specification for External Files 

Section 14.2.1 of the Ada Language Reference Manual defines a 
string argument called the FORM, which supplies system-dependent 
information that is sometimes required to correctly process a 
request to create or open a file. In Ada/L, the string argument 
supplied to the FORM parameter on calls to CREATE and OPEN is 
retained while the file is open, so that calls to the function 
FORM can return the string to your Ada program. FORM options 
specified on calls to CREATE have the effects stated below. FORM 
options specified on calls to OPEN have no effect. 

Ada/L only allows a FORM parameter when a file is open or 
created on the RD-358 tape drive. A USE_ERROR will be raised 
when a FORM parameter is associated with any other Ada/L system 
device. The FORM parameter specifically controls the positioning 
and formatting of the tape prior to tape I/O operations. This 
section identifies the arguments of the FORM parameter. Refer to 
Section 14.2.1 of the Ada Language Reference Manual and to 
Section 12 of the Ada/L Run-Time Environment Handbook for more 
detail on the use of the FORM parameter. 

The FORM parameter is a string literal of which a maximum of 
twenty characters is processed. If the supplied FORM string is 
longer than the maximum allowed (20 characters), the exception 
USE_ERROR will be raised. The string literal is interpreted as a 
sequence of arguments. If you wish to utilize the default 
arguments, a FORM parameter need not be supplied. 

Only the first two arguments within the string are processed. 
All following characters or arguments will cause the USE_ERROR to 
be raised. The arguments are not case sensitive. The arguments 
must be separated by at least one delimiter. A legal delimiter 
consists of a comma or blank. Extra delimiters are ignored. Of 
the recognized arguments, at most one formatting and one 
positioning argument are allowed. If conflicting arguments are 
used, the exception USE_ERROR will be raised. 

Positioning arguments allow control of tape before its use. 
The following positioning arguments are available; 

a. REWIND - specifies that a rewind will be performed prior to 
the requested operation. 

b. NOREWIND - specifies that the tape remains positioned as is. 

c. APPEND - specifies that the tape be positioned at the logical 
end of tape (LEOT) prior to the requested operation. The 
LEOT is denoted by two consecutive tape_marks. 


F-30 


F.11.2 The FORM Specification for Ex-ternal Files 



Ada/L PSE HandbooK 


Version 3.5 
29 March 1991 


Thematting argument specifies information about tape 
format. If~a formatting argument is not supplied, the file is 
assumed to contain a format header record determined by the ALS/N 
I/O system. The following formatting arguments are available: 

a. NOHEAD - specifies that the designated file has no header 
record. This argument allows the reading and writing of 
tapes used on computer systems using different header 
formats. 

b. DENSITY_800 - specifies that the tape is written/read with a 
density of 800 B?I. This is the default density. Attempting 
to write/read files of different density on the same tape 
will cause unpredictable results. 

c. DENSITY_1600 - specifies that the tape is written/read with a 
density of 1600 BPI. Attempting to write/read files of 
different density on the same tape will cause unpredictable 
results. 


F.11.3 File Processing 

Processing allowed on Ada/L files is influenced by the 
characteristics of the underlying device. The following 
restrictions apply; 

a. Only one file may be open on an individual RD-358 tape drive 
at a time. 

b. The attempt to CREATE a file with the mode IN FILE is not 
supported since there will be no data in the Jile to read. 


F.11.3 File Processing 


F-31 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


P.11.4 TextLjJkiput/Output 

TEXT 10 is invoked by your Ada program to perform sequential 
access l7o operations on text files (i.e., files whose content is 
in human-readable form). TEXT_T0 is not a generic package and, 
thus, its subprograms may be invoked directly from your program, 
using objects wich base type or parent type in the 
language-defined type character. TEXT_I0 also provides the 
generic packages INTEGER_IO, FL0AT_I0, FIXED_I0, and 
ENUMERATI0N_I0 for the reading and writing of numeric values and 
enumeration values. The generic packages within TEXT_ro require 
an instantiation for a given element type before any of their 
subprograms are invoked. The specification of this package is 
given in Section 14.3.10 of the Ada Language Reference Manual. 

The implementation-defined type COUNT that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows: 


type COUNT is range 0 ... INTEGER'LAST; 

The implementation-defined subtype FIELD that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows; 


subtype FIELD is INTEGER range 0... INTEGER’LAST; 

At the beginning of program execution, the STANDARD_INPUT 
file and the STANDARD_OUTPUT file are open, and associated with 
the files specified by you at export time. Additionally, if a 
program terminates before an open file is closed (except for 
STANDARD__INPUT and STANDARD_OUTPUT), the last line you added to 
the file^may be lost; if the file is on magnetic tape, the file 
structure on the tape may be inconsistent. 

A program is erroneous if concurrently executing tasks 
attempt to perform overlapping GET and/or PUT operations on the 
same terminal. The semantics of text layout as specified in the 
Ada Language Reference Manual, Section 14.3.2, (especially the 
concepts of current column number and current line) cannot be 
guaranteed when GET operations are interweaved with PUT 
operations. A program which relies on the semantics of text 
layout under those circumstances is erroneous. 

For TEXT_I0 processing, the line length can be no longer than 
1022 characters. An attempt to set the line length through 
SET_LINE_LENGTH to a length greater than 1022 will result in 
USE ERROR. 


F-32 


F.11.4 Text Iflput/Output 




Ada/L PSE Handbool< 


Version 3.5 
29 March 1991 


P.11.5 Sequential Input/Output 

SEQUENTIAL_IO is invoked by your Ada program to perform I/O 
on the records of a file in sequential order. The SEQUENTIAL_:o 
package also requires a generic instantiation for a given element 
type before any of its subprograms may be invoked. Once the 
package SEQUENTIAL_IO is maae visible, it will perform any 
service defined by the subprograms declared in ’ts specification. 
The specification of this package is given in Section 14.2.3 of 
the Ada Language t^eference Manual. 

The following restrictions are imposed on the use of the 
package SEQUENTIAL_IO: 

a. SEQUENTIAL_IO cannot be instantiated with an unconstrained 
array type. 

b. SEQUENTIAL_IO cannot be instantiated with a record type with 
discriminants with no default values. 

c. Ada/L does not raise DATA_ERROR on a read operation if the 
data input from the external file is not of the instantiating 
tyoe (see the Ada Language Reference Manual, Section 14.2.2). 


F.11.6 Direct Input/Output 

DIRECT__IO is invoked by ycur Ada program to perform i/0 of 
the records of a file in an arbitrary order. The package 
DIRECT_IO requires a generic instantiation for a given element 
type before any of its subprograms may be invoked. 3nce the 
package DIRECT_IO is made visible, it will perform any service 
defined by the subprograms declared in its specification. The 
specification of this package is given in Section 14.2.5 of the 
Ada Language Reference Manual. 

The following restrictions are imposed on the use of the 
package DIRECT_IO; 

a. DIRECT 10 cannot be instantiated with an unconstrained array 
type. 

b. DIRECT__I0 cannot be instantiated with a record type with 
discriminants with no default values. 

c. Ada/L does not raise DATA_ERROR on a read operation if the 
data input from the external file is not of the instantiating 
type (see the Ada Language Reference Manual, Section 14.2. 


F.11.6 Direct Input/Output 


F-33 




Version 3.5 
29 Marc.h 1991 


Ada/L ?SE HandbcoK 


P,11.7 Low Level Input/Output 

LOW_LEVEL_IO is invoked by your Ada program to initiate 
physical operations on peripheral devices, and thus executes as 
part of a program task. Requests made to LOW_LEVEL_IO from your 
program are passed through the RTEXEC_GATEWAY to the channel 
programs in CHANNEL^IO. Any status check or result information 
is the responsibility of the invoking subprogram and can be 
obtained from tht. subprogram RECEIVE_CONTROL within LOW_LEVEL_IO. 

The package LOW_LEVEL_IO allows your Ada program to send I/O 
commands to the I/O devices (using SEND_CONTROL) and to receive 
status information from the I/O devices (using RECEIVE_CONTROL). 

A program is erroneous if it uses LOW LEVEL_IO to access a device 
that is also accessed by high-level l7o packages such as 
SEQUENTIAL_I0 and TEXT_IO. The following is excerpted from the 
package LOW_LEVEL_IO. 

SUBTYPE channel_range IS INTEGER RANGE 0..63? 

— Range of values allowed for channel number. 

SUBTYPE device_str IS STRING; 

— To be passed to CHANNEL_IO for future implementations 

— of logical path name. The string will be ignored until 

— logica^ path name support is added. 

SUBTYPE btc_int IS INTEGER RANGE 0..16383; 

— Passes transfer counts to/from IO_MANAGEMENT/RTEXEC. 

SUBTYPE io functions IS INTEGER RANGE 0,.20; 

— Specifies the I/O function to be performed by LoW_LEVEL_IO. 

— The following table shows the values associated with device 

— and device functions available. 


F-34 


F.11.7 Low Level Input/Output 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


— VALUE — DEVICE -- FUNCTION 


0 RD-35a Normal Read 

1 RD-35a Read with Search data 

2 RD-35a Normal Write 

3 RD-35a Send EF Command 

4 RD-35a Initialize Channel 

0 UyH-3 Read with 2 word EF 

1 UYH-3 Read with 1 word EF 

2 UYH-3 Write 

3 UYH-3 Send 1 word EF Command 

4 UYH-3 Send 2 word EF Command 

5 UYH-3 Send 1 word EF Command (Same as function 3) 

6 UYH-3 Initialize Channel 


0 USQ-69 Read 

1 USQ-69 Write 

2 USQ-69 Write (Same as function 1) 

3 USQ-69 Send Command 

4 USQ-6^ Initialize Channel 


TYPE cap_block IS 

— Information that can be found in IOC control memory on 
— a per channel/ per function basis. 

RECORD 


cap : INTEGER 

instruct_base ; INTEGER 
index : INTEGER 

accumulator ; INTEGER 
status : INTEGER 

buffer_base : INTEGER 
bcw ; INTEGER 

operand^base : INTEGER 
END RECORD; 


— CAP register. 

— CAP instruction base. 

— CAP index register. 

— CAP accumulator register. 

— CAP status register. 

— CAP buffer base. 

— CAP buffer control word. 

— CAP operand base. 


TYPE 3hort_rec_control_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 
-- when calling subprogram RECEIVE_REQUEST. 

RECORD 

channel ; low_levei_io.channel_range; 

— Specifies channel of interest. 
ei_word : INTEGER; 

— External interrupt returned by the peripheral device. 
END RECORD; 


F.11.7 Low Level Input/Output 


F-35 











Version 3.5 
29 March 1991 


Ada/L PSE Handboo< 


TYPE receive_GQA^rol_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 

— when calling subprogram RECEIVE_REQUEST. 

RECORD 

data : low_level_io.short_rec_control_block; 

— Channel and ei_word. 
ef : low_l?vel_io.cap_block; 

— External Function CAP information, 
output ; low_level_io.cap_block; 

— Output CAP information, 
ei : low_level_io.cap_block; 

— External Interrupt CAP information, 
input : low_level_io.cap_block; 

— Input CAP information. 

END RECORD; 

TYPE send_control_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 

— when calling subprogram SEND_REQCJEST. 

RECORD 

function pos : low_level_io.io_functions; 

— Indicates which I/O function is to be requested 

— of LOW_LEVEL_IO. 

channel : low__level__io. channel_range; 

— Specifies channel number. ~ 

transfer count : low_level_io.btc int; 

— SuFfer transfer count for l7o operation. 
buffer_addr : system.address; 

— Address of data buffer. 

command_l : INTEGER; 

— Holds the first word of the external 

— function for the device. 

command_2 ; INTEGER; 

— Holds the second word of the external 

— function for the device. 

filler_l ; INTEGER; 

— Passes additional information to 
— CHANNEL_IO (such as the terrainal_address 

— for the USQ-69 device). ~ 

END RECORD; 


F-36 


F.11.7 Low Level Input/Output 









Ada/L PSE Handbook 


Version 2.5 
29 March 1991 


PROCEDUgE_ SEND_CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to send data to the 

— specified device. 

(device : IN low_level_io.device_str := 

— This string will be ignored until 
— logical path names are implemented, 
data : IN low_level_io.send_control_block 

— I/O control block for send request. 

) ; 


PROCEDURE RECEIVE_CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to obtain the status of 

— the I/O operation. 

(device : IN low_level_io.device_str := 

— This string will be ignored until 
— logical path names are implemented, 
data : IN OUT low_level_io.receive_control_block 
— I/O control block for receive request. 

) ; 


PROCEDURE RECEIVE^CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to obtain the status of 

— the I/O operation. 

(device : IN low_level io.device_str := ; 

— This string will be ignored until 
— logical path names are implemented, 
data ; IN OUT low_level_io.short_rec control_block 
— I/O control block for receive request. 

) ; 


P.12 System Defined Exceptions 

In addition to the exceptions defined in the Ada Language 
Reference Manual, this implementation pre-defines the exceptions 
shown in Table F-2 below. 


P.12 System Defined Exceptions 


F-3 7 







Version 3.5 
29 March 1991 


Ada/L PSE Handbooic 


Name 

Significance 1 

CAPACITY_ERROR 

j 

Raised by the Run-Time Executive when ! 
Pre-Runtime specified resource limits ! 
are exceeded. j 

PAST_PTI_TIME 

I 

Raised by the PTI support paclcage if j 

the PTI start time is greater than the j 
current CALENDAR.CLOCK . i 

1 

SYSTEM_ERROR 

Serious error detected in underlying | 

AN/UYK-43 operating system. 

UNREGISTERED_PTI 

Raised by the PTI support package if 
the PTI's state is returned as 
"unregistered". 

UNRESOLVED_REFEHENCE 

Attempted call to a subprogram whose 
body is not linked into the executable 
program image. 


Table F-2 - System Defined Exceptions 


F-38 


F.12 System Defined Exceptions 






Ada/L PSE Handbook 


Version 3. 
29 March 199 


F.^3 M^Mne Code Insertions 

The Ada language permits machine code insertions as defined 
in Section 13.8 of the Ada Language Reference Manual. This 
section describes the specific details for writing machine code 
insertions as provided by the predefined package MACHINE_CODE. 

You may, if desired, include AN/UYK-43 instructions within an 
Ada program. This is done by including a procedure in the 
program which contains only record aggregates defining machine 
instructions. The package MACHINE_CODE, included in the system 
program library, contains type, record, and constant declarations 
which are used to form the instructions. Each field of the 
aggregate contains a field of the resulting machine instruction. 
These fields are specified in the order in which they appear in 
the actual instruction. Since the AN/UYK-43 has several 
different formats for instructions, package MACHINE_CODE defines 
different types for each of these formats. For each of the 
fields which must have a certain value for a given instruction 
(i.e., part of the opcode), package MACHINE_CODE defines a 
constant to use for that field. 

The following procedure implements a floating point 
exponential. Note that this actual procedure would not be used, 
because package MATH__PACK implements the same operation in a more 
efficient manner. " 

with machine__code; use machine_code; 
procedure floatingjpoint_exponential 
(X : FLOAT; 
ex : OUT FLOAT) is 


BEGIN 

formatI'(f LA,l,3,6,0fO,O); 

— LA Al,B6+0 

formatV'(f FEX,l,f2_FEX,2,0,0,0,f6 FEX); 

— FEX A1,A2 

formatI'(f=>f_SA,a=>2,k=>3,b=>6,i=>0,3=>0,y=>l); 

— SA A2,B6+1 

END; 

Note that either positional or names aggregates may be used. 
Whenever a field does not appear in the MACRO/L instruction, it 
must be filled in with 0, since no missing fields are allowed. 

For formatl instructions, when k=0, the s and y field are 
collapsed and used together. For your convenience, an additional 
record type, formatli, for immediate, can be used to define the s 
and y fields as a single 16-bit quantity. This quantity is 
defined as an unsigned integer, so if a negative number x is 
desired, one should instead put the number x + 65535. 


F.13 Machine Code Insertions 


F-39 


in r-4 




Version 3.5 Ada/L PSE Handbcck 

29 March 1991 

Table F-3L^c^ntains a list of MACRO/L instructions and their 
Ada/L raachin'^ code equivalents, sorted by MACRO/L mnemonic. 


F-40 


F.13 Machine Code Insertions 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 



AA 

a,y,k,b,s 

format I'{f_AA,a,k,b,i,s,y); 

AS 

a, y, k, b, s 

formatI'(f_AB,a,k,b,i,s,y); 

AEI 

a,sy,b 

formatli'(f_AEI,a,k_AEI,b,i,sy); 

ALP 

a,y,b,s 

formatI'(f_ALP,a,k_ALP,b,i,s,y); 

ANA 

a,y,k,b,s 

formatI'(f_ANA,a,k/b,i,s,y); 

ANB 

a,y,k,b,s 

formatI’(f ANB,a,k,b,i,s,y); 

ATSF 

a,b 

formatV’(f_ATSF,a,f2_ATSF,b,0,0,0,f6_ATSF); 

ac 

ak,y,b,s 

formatia’(f_BC,a,k,b,i,s,y); ~ 

BS 

ak,y,b,s 

formatla'(f_BS,a,k,b,i,s,y); 

BZ 

ak,y,b,s 

formatla*(f_BZ,a,k,b,i,s,y); 

C 

a,y,k,b,s 

formatI'(f C,a,k,b,i,s,y); 

C3 


formatIVA'(f CB,a CB,0,i CB ); 

CBN 

a,n 

formative(f_CBN,a,f4_CBN,n); 

CBR 

a,b 

formatV(f CBR,a,f2 CBR,b,0,0,0,f6 CBR ); 

CCT 

a,b 

formatIVA'(e CCT,a,b,i CCT); 

CE 


formatlVA*{f_CE,a_CE,0,i_CE ); 

CG 

a,y,k,b,s 

formatI'{f_CG,a,k7b,i,s,y); 

CHCL 

a,y,b, s 

formatI'(f_CHCL,a,k_CHCL,b,i_CuCL,a,y); 

CL 

a/y,k,b,s 

formatI'(f_CL,a,k,b,i,3,y); 

CM 

a,y,k,b,s 

formatI'(f CM,a,k,b,i,s,y); 

CMPS 

a,b 

formatV(f_CMPS,a,f2_CMPS,b,0,0,0,f6_CMPS ); 

CNT 

a,y,b,s 

formatl’if CNT,a,k CNT,b,i,s,y); ~ 

CRB 

a,b 

formatV(f_CRB,a,f2_CRB,b,0,0,0,f6_CRB ); 

CXI 

a,y,k,b<s 

formatl'(f_CXI,a,k,b,i,s,y); 

D 

a,y,k,b,s 

formatI'(f_D,a,k,b,i,s,y); 

DA 

ary,b,s 

formatl’(f_DA,a,k_DA,b,i,s,y); 

DAN 

a,y,b,s 

formatl’(f_DAN,a,k_DAN,b,i,s,y); 

DC 

a,y,b,s 

formatl’(f~DC,a,k_DC,b,i,s,y); 

DJNZ 

a,y,kfb,s 

formatin’ (f_DJNZ7a,f3_DJNZ,k,b,i,s,y) ; 

DJZ 

a,y,k,b,s 

formatin' (f”DJZ,a,f3_DJZ,k,b,i,s,y) ; 

DL 

a,y,b,3 

formatl'(f_DL,a,k_DL,b,i,3,y); 

DS 

a,y,b,3 

formatl’if DS,a,k OS,b,i,s,y); 

DSP 

a f b f IQ 

formatV(f DSP,a,F2 DSP,b,0,0,m,f6 DSP ); 

EECM 


formatIVA’(f EECM,a EECM,0,i EECM ); 

ESCM 


formatIVA’(f ESCM,a ESCM,0,i ESCM ); 

ETCM 


formatIVA’(f_ETCM,a_ETCM,0,i_ETCM ); 

PA 

a,y,b,s 

formatl'(f FA,a,k FA,b,i,3,y); 

FAC 

a,b 

formatV(f_FAC,a,l2_FAC,b,0,0,0,f6_PAC ); 

PAN 

a,y,b,3 

formatl’(f_FAN,a,k_FAN,b,i,s,y); 

FANR 

a,y,b,3 

formatl’(f_FANR,a,k_FANR,b,i,s,y); 

FAR 

a,y,b,s 

formatl’(f FAR,a,k FAR,b,i,3,y); 

FAS 

a,b 

formatV(f FAS,a,f2 FAS,b,0,0,0,f6 PAS ); 

FAT 

a,b 

formatV(f_FAT,a,f2_FAT,b,0,0,0,f6_FAT ); 

FD 

a,y,b,3 

formatl’{f_FD,a,k_FD,b,i,3,y); 

FDR 

a,y,b, 3 

formatl’(f_FDR,a,k_FDR,b,i,3,y); 


Table F-3a - Machine Code Instructions 


F.13 Machine Code Insertions 


F-41 









Version 3.5 
29 March 1991 


Ada/L PSE Handbook 



FEX 

a,b 


formatV'lf FEX,a,f2 FEX,b,0,0,0,£6 FEX ); 

FLN 

a,b 


formatV'(f FLN,a,f2 FLN,b,0,0,0,f6 FLN ); 

FLTF 

a, n 


formatv(f_FLTF,a,f2_FLTF,n,0,0,0,f6_FLTF); 

FM 

a,y, 

b, s 

formatI'(f_FM,a,k_FM,b,i,s,y); 

FMR 

a,y, 

b,s 

format I' ( f_FMR,a,ic_FMR,b, i , s ,y) ; 

FPA 

a,b 


formatV(f FPA,a,f2 FPA, b, 0,0,0 , f 6 FPA); 

FPD 

a,b 


formatV'lf FPD,a,f2 FPD,b,0,0,0,f6 FPD); 

FPM 

a,b 


formatV(e FPM,a,f2 FPM, b, 0,0,0 , f 6 FPM ); 

FPS 

a, b 


formatV'(f FPS,a,f2 FPS,b,0,0,0,f6 FPS ); 

FSA 

a,b 


fQrmatV’{f FSA,a,f2 FSA,b,0,0,0,f6 FSA); 

FSC 

a,b 


formatV(f FSC,a,f2 FSC,b, 0,0,0 , f 6 FSC ); 

FSD 

a,b 


formatV(f FSD,a,f2 FSD,b,0,0,0,f6 FSD); 

FSM 

a, b 


formatV(£ FSM,a,f2 FSM, b, 0,0,0, f 6 FSM); 

FSS 

a,b 


formatVMf FSS,a,f2 FSS, b, 0,0,0 , f 6 FSS); 

FTSL 

a,b 


formatV(f_FTSL,a,f2_FTSL,b,0,0,0,f6_FTSL); 

HA 

a,b 


formatIVA'(f HA,a,b,0); 

HAEI 

HAI 

HALT 

arb 


formatIVA'{f HAEI,a,b,i HAEI ); 
formatrVA'(f HAI,0,0,0); 
formatlVA*{f_HALT,0,0,i_HALT ); 

HAN 

a,b 


formatIVA'(f EIAN,a,b,0); 

HAND 

a,b 


formatIVA*(e HAND,a,b,i HAND ); 

HC 

a,b 


formatrv\'(f'HC,a,b,0); 

HCB 

a,b 


formatlVA*(f~HCB,a,b,0); 

HCL 

a, b 


formatIVA' ( f'”HCL,a,b,0); 

HCM 

a,b 


formatlVA'(f~HCM,a,b,0); 

HCP 

a 


formatlVA'(f HCP,a,0,0); 

HCRC 

a, b 


formatlVA'(f HCRC,a,b,i HCRC ); 

HD 

a,b 


formatlVA'(f HD,a,b,0); 

HDCP 

a 


formatlVA’(f_HDCP,a,0,0); 

HDLC 

a,m 


formatIVB'(f_HDLC,a,m); 

HDRS 

a,m 


forraatIVB'(f HDRS,a,m); 

HDRZ 

a,ia 


formatIVB'(f HDRZ,a,m); 

HDSF 

a,b 


formatlVA'(f_HDSF,a,b,0); 

HLB 

a,b 


formatlVA’(f HLB,a,b,0); 

HLC 

a,m 


formatIVB’(f HLC,a,m); 

HLCA 

a,b 


formatlVA'(f aLCA,a,b,i HLCA ); 

HLC I 

a£4. 

b 

formatlVA l’{f HLCI,af4,b,i HLCI); 

HLCT 

a£4. 

b 

formatlVA l’(f HLCT,af4,b,i'HLCT); 

HLTC 

a,b 


formatlVA'(f aLTC,a,b,i HLTC ); 

HM 

a,b 


formatlVA’(f HM,a,b,0);'" 

HOR 

a,b 


formatlVA'(f HOR,a,b,0); 

HPEI 
HP I 

a,b 


formatlVA'(f HPEI,a,b,i HPEI ); 
formatlVA*(f HPI,0,0,0)T 

HR 

a^ b 


formatV(f_HR,a,f2_HR,b,0,0,0,f6_HR); 

HRS 

a,m 


formatIVB'(f_HRS,a,m); 


Table F-3b - Machine Code Instructions (Continued) 


F-42 


F.13 Machine Code- Insertions 











Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


MACRO/L 

Ada/L 

i 

HRT 

a,b 

formatIVA' ( f HRT,a,b,0); 

; 

HRZ 

a,in 

formatIVB’(f HRZ,a,m); 

I 

HSCA 

a, b 

formatIVA' {f HSCA,a,b,i HSCA ); 


HSCI 

af 4, b 

formatIVA l'(f HSCI,af4,b,i HSCI); 

i 

HSCT 

af 4, b 

formatIVA l'(f HSCT,af4,b,i HSCT); 


HSF 

a, b 

formatIVA'(f HSF,a,b,0); 

i 

HSIM 

a, b 

formatIVA'(f HSIM,a,b,i HSIM ); 

; 

HSTC 

HSTl 

HST2 

HST3 

HST4 

a, b 

formatIVA'(f HSTC,a,b,i HSTC ); 
formatIVA'(f HSTl,a HSTl,b HSTl,i HSTl); 

formatIVA'(f HST2,a HST2,b HST2,i HST2); 

formatIVA'(f HST3,a HST3,b HST3,i HST3); 

formatIVA'(f HST4,a HST4,b HST4,i HST4); 

[ 

1 

i 

i 

HSTD 

a, b 

formatIVA'(f HSTD,a,b,i HSTD ); 


HSTV 

a, b 

formatIVA'(f HSTV,a,b,i HSTV ); 

1 

HV 

HWFI 

a, b 

formatV'(f HV,a,t2 HV,b,0,0,0,f6 HV); 
formatIVA'(f HWFI,0,0,i HWFI ); 


HXOR 

a,b 

formatIVA’(f HXOR,a,b,0); 


lasc 

a 

formatIVA'(f IBSC,a,0,i IBSC ); 


IILM 

a 

formatIVA'(f IILM,a,0,i IILM ); 


10 

a,y,b,s 

formatI'(f 10,a,k IO,b,r,s,y); 


lOCL 

a 

formatIVA'(f IOCL,a,0,i lOCL ); 


lOCR 

a 

formatIVA'(f IOCR,a,0,i lOCR ); 

1 

IOCS 

a 

formatIVA’(f IOCS,a,0,i IOCS ); 

i 

lOT 

a/ b,m 

formatV'(f I0T,a,f2 lOT, b, 0,0,m,f6 lOT ); 

j 

IPI 

IR 

y f b,s 

formatl'(f_IPI,a_IPI,k_IPI,b,i,s,y) ; 
formatl ’ (f~IR,0,k IR,o70,0,0 ); 


IRMMS 

a,b 

formatIVA'(f IRMMS,a,b,i IRMMS); 


IRMSR 

arb 

formatIVA’(f“lRMSR,a,b,i IRMSR ); 


ISMSR 

a/b 

formatIVA'(f ISMSR,a,b,i ISMSR ); 


ISP 

3 f f HI 

formatV'(f ISP,a,f2 ISP,b,0 , 0,m,f6 ISP ); 


J 

yrk,b,s 

formatIII’{f J,a J,r3 J,k,b,i,3,y); 


JBNZ 

a,y,k,b,3 

formatin’(f JBNZ,a,f3 JBNZ,k,b, i,s,y); 


JC 

a,y,k,b,3 

formatlll'jf JC,a,f3 JC,k,b,i,s,y); 


JE 

yfk,b,3 

forraatIII’{f JE,a JE7f3 JE,k,b,i,s,y); 


JEP 

a,y,k,b,3 

formatin'(f JEP,a,f3 JEP,k,b,i,3,y); 


JG 

y,k,h,3 

formatni ’ ( f“jG,a JG,F3 JG,k,b,i,3,y); 


JGE 

y,k,b,3 

formatin’{f“JGE,a JGE,f3 JGE,k,b, i,s,y); 


JL 

yrk,br3 

formatni’(f JL,a,F3 JL,k,b, i,s,y); 


JLE 

yfkrbrs 

formatin'(f JLE,a JLE,f3 JLE,k,b, i,s,y) ; 


JLT 

y#k,b,3 

formatin’(f JLT,a JLT,f3 JLT, k , b, i , s , y) ; 


JN 

a,y,k,b,3 

formatin'(f JN,a,F3 JN,k,b,i,s,y) ; 


JNE 

y,krb,3 

formatin’(f JNE,a JNE,f3 JNE,k,b, i,s,y) ; 


JNF 

yrk,b,3 

formatin'(f JNF,a JNF,f3 JNF,k,b, i,s,y) ; 


JNW 

y»k,b,3 

formatin’(f JNW,a JNW,f3 JNW,k,b, i ,s,y) ; 


JNZ 

a,y,k,b,3 

formatlll'(f_JNZ,a,f3_JNZ,k,b,i , s,y) ; 



Table F-3c - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-43 











Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


MACRO/L 


Ada/L i 

JOF 

yr 

k,b,s 

formatlll’(f JOF,a JOF,f3 JOF,k,b,i,s,y); 

JOP 

a. 

y/k,brS 

formatIII'(f JOP,a,f3 JOP,k,b,i,s,y); 

JP 

a, 

y,k,b,s 

formatlll’(f JP,a,f3 JP,k,b,i,s,y); 

JS 

sy 

or 

formatIII'(f JS,0,f3 JS,k,b,i,s,y); 

JSC 

a. 

y/k,b,s 

formatIII'(f JSC,a,f3 JSC,k,b,i,s,y); 

JW 

7/ 

k ,b,s 

formatin'(f JW,a JW,f3 JW,k,b, i,s,y) ; 

JZ 

a. 

y^k,b,s 

formatIII'(f JZ,a,f3 JZ,k,b,i,s,y); 

LA 

a. 

y/k,b,s 

formatI'(f LA,a,k,b,i,s,y); 

LB 

a. 

y/k,b,s 

formatl'jf LB,a,k,b,i,s,y); 

LBJ 

a. 

y/k,b,s 

formatIII'{f LBJ,a,f3 LBJ,k,b,i,s,y); 

LBMP 

a, 

y »b,s 

formatI'{f LBMP,a,k LBMP,b,i,s,y); 

LCI 

ak 

»y ,b,s 

formatIa'(f LCI,ak,b,i,s,y); 

LCMl 

'it 

b»s 

formatI'{f LCMl,a LCMl,k LCMl,b,i LCMl,s,y); 

LCM2 

it 

b,s 

formatI'{f LCM2,a LCM2,k LCM2,b,i LCM2,s,y); 

LCM3 

it 

b,s 

formatI'(f LCM3,a LCM3,k LCM3,b,i LCM3,s,y); 

LCM4 

it 

b,s 

formatI'(f LCM4,a LCM4,k LCM4,b,i LCM4,s,y); 

LCMA 

it 

b,s 

formatI'(f LCMA,a LCMA,k LCMA,b,i LCMA,s,y); 

LCMP 

it 

b,s 

formatI'(f LCMP,a LCMP,k LCMP,b,i,s,y) ; 

LCMT 

it 

b , s 

formacI‘(f LCMT,a LCMT,k LCMT,b,i LCMT,s,y); 

LCPA 

a. 

y»b,s 

formatI'(f LCPA,a,k LCPA,b,i,s,y); 

LCRA 

a. 

y,b,s 

formatI'(f LCRA,a,k LCRA,b,i,s,y); 

LCT 

ak 

.yfb,s 

forraatIa'(F LCT,ak,b,i,s,y); 

LDIF 

LECM 

a, 

y»k,b,s 

formatI'(f LDIF,a,k,b,i,s,y); 
formatIVA'(f LECM,a LECM,0,i LECM ); 

LIBP 

a, 

yfb,s 

formatI'(f LIBP,a,k“LIBP,b,i7s,y); 

LIM 

St, 

sy,b 

formatIi'(F LIM,a,k LIM,b,i,sy); 

LIMP 

A, 

yrb,s 

formatI'(f LIMP,a,k LIMP,b,i,s,y) ; 

LISR 

a. 

b 

formatIVA'(f LISR,a,b,i LISR ); 

LLP 

a. 

y^b,s 

forraatI'(f LLP,a,k LLP,b,i,3,y) ; 

LLPN 

a. 

y^b,s 

formatI'(£ LLPN,a,k LLPN,b,i,s,y) ; 

LM 

a. 

y,k,b,3 

formatI'(f LM,a,k,b,i,3,y ); 

LMA 

a. 

y»k,b,s 

formatI'(f LNA,a,k,b,i,3,y); 

LRR 

a. 

m 

£ormatV'(£ LRR,a,f2 LRR,0,0,0,m,f 6 LRR); 

LRRA 

LSCM 

a. 

b, i 

formatIVA'(f LRRA,a,b,i); 
forraatIVA'(f LSCM,a LSCM,0,i LSCM); 

LSDM 

LTCM 

a. 

y»k,b,3 

formatI'(f LSUM,a,k,b,i,s,y); 
forraatIVA'(£ LTCM,a LTCM,0,i LTCM ); 

LXB 

a, 

y»lCfb,3 

forinatI'(f LXB,a,k,b,i,3,y); 

M 

a, 

y,k,b,3 

formatI'(£ M,a,k,b,i,s,y); 

MS 

a, 

yfb,3 

formatI'{f MS,a,k MS,b,i,3,y); 

NLP 

a. 

y»b,3 

forraatI'(f NLP,a,k NLP, b ,i,s, y ); 

OR 

a, 

y,b,3 

formatI'(f OR,a,k 0R,b,i,3,y); 

PEI 

PFCD 

PFCE 

a. 

sy ,b 

formatIi'(? PEI,a,k PEI,b,i,sy); 
formatIVA’(F PFCD,070,i PFCD ); 
formatlVA*(f“PFCE,0,0,i_PFCE ); 


Table F-3d - Machine Code Instructions (Continued) 


F-44 


F.13 Machine Code Insertions 













Ada/L PSE Handbook 


Version 3.5 
29 Marc.b 1991 


MACRO/L 

Ada/L 

PFR 

a,y,b,s 

formatI'{f PFR,a,k ?FR,b,i ?FR,s,y); 

PIE 


formatIVA’(e PIE,0,0,i PIE); i 

PMM 

y/b,s 

formatI'(f PMM,a PMM,k P.MM,b, i ,s ,y) ; 

PMR 

yf b,s 

formatI'(f PMR,a PMR,k PMR,b,i,s,y); j 

POP 

a, b 

formatV{f POP, a, f 2 POP, b, 0,0,0 , f 6 POP); 1 

PUSH 

a,b 

formatV*(f PUSH,a,f2 PUSH,b,0,0,0,f6 PUSH ); ; 

RA 

a,y,k,b,s 

formatI'(f HA,a,k,b,i,s,y); 

RALP 

a,y,b,s 

formatI'(f RALP,a,k RALP,b,i,s,y); | 

RAN 

a,y,k,b,s 

forinatI'(f RAN, a, k , b, i , s, y) ; 

RCCR 

y,b,3 

formatI‘(f RCCR,a RCCR,k RCCH,b,i,s,y); 

RD 

a,y,k,b,3 

formatI’(f RD,a,k,b,i,s,y); 

RI 

a,y,k,b,3 

formatI’(f RI,a,k,b,i,3,y); 1 

RIOAS 

a,b 

formatIVA’(f RIOAS,a,b,i RIOAS); 

RISR 

a,b 

formatIVA’(f RISR,a,b,i RISR ); 

RJ 

y,k,b,s 

formatin'(f RJ,a RJ,f3 RJ, k, b, i , s, y); 

RJC 

a,y,k»b,3 

formatIII’{f RJC,a,f3 RJC,k,b,i,s,y); | 

RJSC 

a,y,k,b,3 

formatIII’{f RJSC,a,f3 RJSC,k,b,i,s,y); 1 

RLP 

a,y,b,s 

formacI’(f RLP,a,k RLP,b,i,s,y); j 

RMMS 

a, bi 

formatIVA’(f RMMS,a,b,i); ! 

RMS 

a,y,b,s 

formatI’(f RMS,a,k RMS,b,i,s,y); ! 

RMSR 

y.b,s 

formatI’(f RMSR,a RMSR,k RMSR,b,i,s,y); i 

RNLP 

a,y ,b,s 

formatI’{f RNLP,a7k RNLP,b,i,s,y); ! 

ROR 

a,y,b,s 

formatI’(f ROR,a,k ROR,b,i,s,y); ! 

RP 

a, sy ,b 

formatIi'{F RP,a,k RP,b,i,sy); j 

RPD 

y,l<fb,3 

formatI’{f RPD,a RPD,k,b,i,s,y); 

RRR 

a,m 

formatV'(f RRR,a,f2 RRR,0,0,0,m,f6 RRR ); | 

RSC 

a,y,b,s 

formatl'jf RSC,a,k RSC,b,i,s,y); | 

RSD 

a 

formatIVA’(f RSD,a,0,i RSD); 

RXOR 

a,y,b,3 

formatI’(f RXOR,a,k RXOR,b,i,s,y); 

SA 

a,y,k,b,3 

formatl'if SA,a,k,b,i,s,y); 

SB 

a,y,k,b,3 

forraatI’(f SB,a,k,b,i,3,y); 

SBN 

a, n 

formative(f SBN,a,f4 SBN,n); 

SBPC 

a,y,k,b,3 

forraatI'(f SBPC,a,k,b,i,3,y); 

SC 

a,y,b,3 

formatl’if SC,a,k SC,b,i,s,y); 

SCI 

ak,y,b,3 

formatla'cF SCI,ak,b,i,s,y); 

SCMA 

yfb,3 

formatI'(f SCMA,a SCMA,k SCMA,b,i SCMA,s,y); 

SCMP 

YfbfS 

formatI’(f SCMP,a SCMP,k SCMP,b,i,s,y); 

SCMT 

y,b,3 

formatl'if SCMT,a SCMT,k SCMT,b,i SCMT,3,y); 

SCMl 

y»b,3 

formatl'{f”SCMl,a SCMl,k SCMl,b,i SCMl,s,y); 

SCM2 

y, b,3 

formatl’if SCM2,a SCM2,k SCM2,b,i SCM2,s,y); 

SCM3 

yfb,3 

formatl’if SCM3,a SCM3,k SCM3,b,i SCM3,s,y); 

SCM4 

yf b,3 

formatl’if SCM4,a SCM4,k SCM4,b,i SCM4,s,y); 

SCPA 

a,y,b,3 

formatl’if SCPA,a,k SCPA,b,i,s,y); 

SCRA 

a,y,b,3 

formatl'If”SCRA,a,k SCRA,b,i,3,y); 

SCSR 

y, b,3 

formatI’(f_SCSR,a_SCSR,k_SCSR,b,i,s,y); 


Table F-3e - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-45 












Version 3.5 
29 March 1991 


Ada/L ?SE HandbooK 


1 MACRO/L 

Ada/L 1 

SCT 

ak,y,b,s 

formatla'if SCT,ak,b,i,3,y); 

SDIF 

a,y,b,3 

formatI'(f SDIF,a,k SDIF,b,i,s,y); ! 

SDMC 

a 

formatIVA'(f SDMC,a,0,i SDMC ); 

SIBP 

a,y,b,3 

formatI'(f SIBP,a,k SIBP,b,i,3,y); 

SI.HC 

a,b 

formatlVA’Cf SIMC,a,b,i SIMC ); 

SIMP 

fit 

cr 

(A 

formatI'(f SIMP,a,k SIMP,b,i,3,y); 

SIRC 

a,b 

formatIVA*(£ SIRC,a,b,i SIRC ); 

SITC 

a, b 

formatIVA'(f SITC,a,b,i“SITC ); 

SLP 

a,y,b,3 

formatI'(f SLP,a,k SLP,b,i,s,y); ' 

SM 

a,y,k,b,3 

formatIMf SM,a,k,b,i,s,y); 

SMCC 

a 

formatIVA'(f SMCC,a,0,i SMCC ); 

SMSR 

y/b,3 

formatlMf SMSR,a SMSR,k SMSR,b, i,3,y); ‘ 

SNA 

a,y,lc,b,3 

formatI‘(f SNA,a, ic, b, i, s, y); 

SRRA 

a,b, i 

formatlVA*(f SRRA,a,b,i); i 

SSUM 

a,y,b,3 

formatI'{f SSUM,a,k SSUM,b,i ,3 ,y); 

STAF 

a,b 

formatV’(f STAF,a,fI STAF,b,0,0,0,f6 STAF); ' 

STSB 

ak,y,b,3 

formatla'(f STSB,ak,b,i,3,y); 

SXB 

a,y,k,b,3 

formatI'(f SXB,a,k,b,i,3,y); j 

TBN 

a, n 

formative*(f TBN,a,f4 TBN,n); 1 

TR 

a,b 

formatV'(f TR,a,f2 TR,b,0,0,0,f6 TR); i 

TSBN 

a , n 

formative*(f TSBN,a,f4 TSBN,n); 

TSF 

y»b,3 

formatI*(f TSF,0,k TSFTb,i,3,y); 

TSM 

bi 

formatIVA’Te TSM ,a TSM,b,i); ' 

TV 

a,b 

formatV'(f T^,a,f2 fv,b, 0,0,0,f6 TV); ! 

WFBP 

a,y,b,s 

formatI*(f WPBP,a,k WFBP,b,i WFBP,3,y); 

WFM 

a,y,b,3 

formatI’(f WPM,a,k WFM,b,i WFM,3,y); 

XOR 

a,y,b,s 

formatI*(f XOR,a,k”XOR,b,i7s,y ); 

XR 

y»b,3 

formatI*(£ XR,0,k XR,b,i,3,y); 

XRL 

y»b, 3 

formatl*(f”XRL,0,k XRL,b,i,3,y) ; 

XS 

3y/b 

formatI '( f_XS,a_XS7k_XS,b,i,3y ); i 


Table F-3f - Machine Code Instructions (Continued) 


F-46 


F.13 Machine Code Insertions 










