HANDY REFERENCE CARD 

valFORTH 1J 

T.M 


•.tack inputs and outputs are shown; top of stack on right. 
I'm-; card follows usaqe of the Forth Interest Group 
{ . . * a . Area); usage aligned with the Forth 78 
inti (-national Standard. 

,.;c:re info; Forth Interest Group 
P.0. Box 1105 
fan Carlos, CA 94070. 


Iperand key: n,n 1,. , 

16- bit signed numbers 

d,dl, . , 

, . 32-bit signed numbers 

u 

16-bit unsigned number 

addr 

address 

•b 

8-bit byte 

c 

7-bit ascii character value 

f 

boolean flag 

fp 

floating point number 

3 

string 


Stack Manipulation 

( n __ n n ) 

DROP •; n — ) 

SWAP ( hi n2 -- n2 nl ) 

OVER ( nl n2 — nl n2 nl ) 

ROT ( nl n2 n3 -- n2 n3 nl ) 

<•80 T ( nl n2 n3 -- n3 nl n2 ) 

- D1IP ( n — n 7 ) 

>R ( n — ) 

R> ( -- n ) 

R ( - n ) 


Number Bases 

DECIMAL [ - i 

HEX ( - ) 

BASE { — addr ) 


Arithmetic and Logical 



( nl n2 — sum ) 

D+ 

( dl d2 — sum ) 


( nl n2 -- diff ) 

* 

( nl n2 — prod ) 

/ 

( nl n2 -- quot^ ) 

MOD 

( nl n2 -- rem ) 

/MOD 

( nl hi -- rem quot ) 

*/M0D 

( nl n2 n3 -- rem quot) 

*/ 

( nl n2 n3 -- quot ) 

MAX 

( nl n2 — max ) 

MIN 

( nl n2 -- min ) 

ABS 

( n -- absolute ) 

DABS 

( d -- absolute ) 

MINUS 

( n — -n ) 

DMINUS 

( d — -d ) 

AND 

( nl n2 -- and ) 

OR 

( nl ri2 -- or ) 

XOR 

( nl n2 -- xor ) 

NOT 

( n - f ) 

Comparison 

< 

( nl h2 - f ) 

> 

( nl n2 — f ) 

<- 

( nl n2 -- f ) 

>= 

( nl n2 -- f ) 

= 

( nl n2 — f ) 

<> 

( nl n2 - f ) 

o< 

( n - f ) 

o> 

( n- f ) 

0= 

( n -- f ) 

0? 

( n -- f ) 

Memory 



( addr -- n ) 


( n addr -- ) 

Cia 

{ addr b ) 

Cl 

( b addr -- ) 

? 

( addr -- ) 

G? 

( addr -- ) 

UV ! 

( addr — ) 

+ ! 

( n addr -- ) 

CMOVE 

( from to u -- ) 

<CM0VE 

( from to u — ) 

FILL 

( addr u b -- ) 

ERASE 

( addr u -- ) 

BLANKS 

( addr u -- ) 


Duplicate top of stack. 

Throw away top of stack. 

Reverse top two stack items. 

Make copy of second item on top. 

Rotate third item to top. 

Rotate top item to third. 

Duplicate only if non-zero. 

Move top item to "return stack" for temporary 
storage (use caution). 

Retrieve item from return stack. 

Copy top of return stack onto stack. 


Set decimal base. 

Set hexadecimal base. 

System variable containing number base. 


Add. 

Add double-precision numbers. 

Subtract (nl-n2). 

Multiply-. 

Divide (nl/n2). 

Modulo (i.e. remainder from division). 

Divide, giving remainder and quotient. 
Multiply, then divide (nl*n2/n3), with double- 
precision intermediate. 

Like */M0D, but give quotient only. 

Maximum. 

Minimum. 

Absolute value. 

Absolute value of double-precision number. 
Change sign. 

Change sign of double-precision number. 

Logical AND (bitwise). 

Logical OR (bitwise). 

Logical exclusive OR (bitwise). 

True if top number zero (i.e. reverses 
truth value). 


True if nl less than n2. 

True if nl greater than n2. 

True if nl less than or equal to n2. 
True if nl greater than or equal to n2. 
True if top two numbers are equal. 

True if nl does not equal n2. 

True 'if top number negative. 

True if top number positive. 

True if top number zero (i.e. reverses 
truth value. 

True if n does not equal zero. 


Replace word address by contents. 

Store second word at address on top. 

Fetch one byte only. 

Store one byte only. 

Print contents of address. 

Print byte at address. 

Print unsigned contents of address. 

Add second number on stack to contents of address 
on top. 

Move u bytes in memory from head to head. 

Move u bytes in memory from tail to tail. 

F'ilTgjiu bytes in memory with b, beginning at 
add|ps . 

Fill u bytes in memory with zeroes, beginning at 
address. 

FilVu bytes in memory with blank's, beginning at 
address. 


Control Structures 

DO.. .LOOP do; ( end+1 start -- ) 
I ; -- index ) 

( -f index ) 

( -- index 

LEAVE { -:- ) 

?EXJT ; — ) 

DO... -‘•LOOP do: ( end+1 start — ) 
+loop: i , n -- ) 

DO... /LOOP do: ( end+1 start -- ) 
/loop: ( u -- ) 

IF. . . (true) if: ( f -- ) 

ENDIF 

IF, . . (true) 

...ELSE if: (f - ) 

...(false) 

. . .ENDIF 

BEGIN... until: ( f — ) 

UNTIL 

BEGIN... while; (f — ) 

WHILE 

...REPEAT 


% 

Set up loop, given index range. 

Place current index value on stack. 

Used to retrieve index after a >R. 

Place index of outer DQ-L00P on stack. 

Terminate loop at next LOOP, +LO0P, or /LOOP. 

LEAVE if 7TERMINAL is true (i.e. pressed). 

Like DO... LOOP, but adds stack value (instead of 
always 1 1 1 ) to index. 

Like DO... +L00P, but adds unsigned value to 
i ndex . 

If top of stack true (non-zero), execute. (Note: 
Forth 78 uses I F... THEN.) 

Same, but if false, execute ELSE clause. (Note: 
Forth 78 uses IF. . .ELSE. . .THEN. } 

Loop back to BEGIN until true at UNTIL. (Note: 
Forth 78 uses BEGIN. . .END. ) 

Loop while true at WHILE;REPEAT loops uncondition- 
ally to BEGIN. (Nome: Forth 78 uses BEGIN. ..IF 

. ..AGAIN. ) 


Terminal 

Input - Output 


( n — ) 

*R 

( n fieldwidth — ) 

D- 

( d - ) 

D.R 

( d fieldwidth — ) 

CR 

( „ ) 

SPACE 

i -- ) 

SPACES 

( n -- ) 

DUMP 

V ) 

( addr u -- ) 

TYPE 

( addr u -- ) 

COUNT 

( addr -- addr+1 u ) 

TTERMINAL 

( - f ) 

KEY 

l ~ c ) 

EMIT 

( c - ) 

EXPECT 

( addr n — ) 

WORD 

( c - ) 


Print number. 

Print number, right-justified in field. 

Print double-precision number 

Print double-Drecision number, right-justified in 
field. 

Do a carriage return. 

Type one space. 

Type n spaces. 

Print message (terminated by "). 

Dump u words starting at address. 

Type string of u characters starting at address. 
Change length-byte string to TYPE form. 

True if terminal break request present. 

Read key, put ascii value on stack. 

Type ascii value from stack. 

Read n characters (or until carriage return) from 
input to address. 

Read one word from input stream, using given 
character (usually blank) as delimiter. 


Input - Output Formating 


NUMBER 

( addr -- d ) 

<p 

( - ) 

* 

( d - d ) 

?S 

( d — 0 0 ) 

SIGN 

( n d — d ) 


{ d -- addr u ) 

HOLD 

( c - ) 

Disk 

Handling 

LIST 

( screen -- ) 

LOAD 

( screen — ) 

BLOCK 

( block — addr 

B/BUF 

( - n ) 

BLK 

( -- addr ) 

SCR 

( — addr ) 

UPDATE 

( « ) 

FLUSH 

( - ) 

EMPTY- 

( - ) 


BUFFERS 


Convert string at address to double-precision number. 
Start output string. 

Convert next digit of double-precision number and 
add character to output string. 

Convert all significant digits of double-precision 
number to output string. 

Insert sign of n into output string. 

Terminate output string (ready for TYPE). 

Insert ascii character into output string. 


List a disk screen. 

Load disk screen (compile or execute). 

Read disk block to memory address. 

System constant giving disk block size in bytes. 
System variable containing current block number. 
System variable containing current screen number. 
Mark last buffer accessed as updated. 

Write all updated buffers to disk. 

Erase all buffers. 


Defining Words 


VARIABLE xxx ( n — ) 

xxx : l addr } 
CONSTANT xxx ( n — ) 

xxx: ( -~ n ) 
CODE xxx ( - ) 

;C0DE ( - ' ) 


<BUILDS. . . does: ( -- addr ) 

D0ES> 

LABEL xxx ( — addr ) 


Begin colon definition of xxx. 

End colon definition. 

Create a variable named xxx with initial value n; 
returns address when executed. 

Create a constant named xxx with value n; returns 
value when executed. 

Begin definition of assembly-language primitive 
operative named xxx. 

Used to create a new defining word, with execution- 
time "code routine" for this data type in assembly. 
Used to create a new defining word, with execution- 
time routine for this data type in higher-level Forth. 
Creates a header xxx which when executed returns its 
PFA. 


Software and Documentation 
©Copyright 1982 
Valpar international 


HANDY REFERENCE CARD 

i mSFQBTH 1.1 

T.M 


Vocabularies 


CONTEXT { — add r ) 


CURRENT { — ad dr ) 
r ORTH ( ) 


EDITOR ( - ) 
ASSEMBLER ( ) 
DEFINITIONS ( - ) 
VOCABULARY ( - ) 

XXX 


Returns address of pointer to context vocabulary 
(searched first). 

Returns address of pointer to current vocabulary 
(where new definitions are put). 

'Main Forth vocabulary (execution of FORTH sets 
CONTEXT vocabulary/. 

Editor vocabulary; sets CONTEXT. 

Assembler vocabulary; sets CONTEXT. 

Sets CURRENT vocabulary to CONTEXT. 

Create new vocabulary named xxx. 

Print names of all words in CONTEXT vocabulary. 


Miscellaneous and System 


( 

( - ) 

Begin comment, terminated by right paren on same 
line; space after { . 

FORGET xxx 

( -- 

Forget all definitions back to and including xxx. 

ABORT 

( - ) 

Error termination of operation. 

'Xxx 

{ -- addr ) 

Find the address of xxx in the dictionary; if used 
in definition, compile address. 

HERE 

( -- addr ) 

Returns address of next unused byte in the 
dictionary. 

PAD 

( -- addr ) 

Returns address of scratch area (usually 128 bytes 
beyond HERE). 

IN 

( — addr ) 

System variable containing offset into input buffer, 
Used, e.g., by WORD. 

SPO 

{ -- addr ) 

Returns address of top stack item. 

ALLOT 

( n - ) 
( n - ) 

Leave a gap of n bytes in the dictionary. 
Compile a number into the dictionary. 


valFORTH" Memory Map 


STANDARD DISPLAY 
MEMORY AREA 


GENERAL BUFFER 


DP 


LIMiT 


FIRST 

$0700 

$0600 



WORD BUFFER 

] 


DICTIONARY 






DISK BUFFERS 
2112 BYTES DECIMAL 
(RELOCATABLE) 



(TASK) 

KERNEL 



BOOT CODE 



PAD 

$0080 BYTES 


USE 

PREV 

0 +ORIGIN 


$G5FF 

$057E 


At ARI FLOATING POINT 


USER AREA 


$0480 

$01FF 

RP 

$0100 

$OOFF 

$00D4 


RETURN STACK 

^L-r^rT^ RM5NAL buffer 


i 

1 ATARI FLOATING POINT 


UP 

RO 

IN 

TIB 


Z PAGE 


UP N IP W 


SO 

SP 


STACK $QQBC--$0080 


SP IS X REGISTER 
RP IS STACK POINTER 
OF CPU 


Atari is a trademark ot Atari. Inc., a division of Warner Communications. 


Software and Documentation 
©Copyright 1982 
Valpar Internationa! 


HANDY REFERENCE CARD 


valFORTH 1.1 

T.M. 

Graphics and Color Debugging Utilities 


SETC0L0R 

, *nl n2 n3 -- ) 


Color •-eg is ter nl ( 0 ... 3 and 4 for background) 

OECOMP 

xxx 




is set to hue n2 (Q to 15) and luminance n3 
(0-14, even). 

CDUMP 

( addr n ) 

SE. 

( nl n2 n3 — ) 


Alias *or SETC0L0R. 



GR. 

( n -- ; 


_ . ntical to GR. in BASIC. Adding 16 . 
suppress split display. Adding 32 will suppress 
display oreclear. In addition, -his GR. will 

=DUMP 

( addr n -- ) 




not disturb player/missiles. 

(FREE) 

( — n ) 

PCS. 

( < y - i 


Same as BASIC POSITION or P0S. Positions the 
invisible cursor if in a split display mode, 
and the text cursor if in 0 GR. . 

FREE 

1 ** . 

POSIT 

( X y — ) 


Positions and updates the cursor, similar to 

H. 

( n -- } 




PLOT, but without changing display data. 

STACK 

( flag — ) 

PLOT 

( * y - - ) 


Came as 3ASIC PLOT. PLOTs point of color in 





register specified by last COLOR command, at 
point x y. 

.S 

( ... & ) 

DRAWT0 

1; X y— ) 


Same as BASIC DRAWT0. Draws line from last 
PLOT' ted, DRAWTO'ed or PCSIT'ed point to x y, 
using color in register specified by last COLOR 
command. 

'll. S 


DR. 

( x y -- ) 


Alias for DRAWTO. 

3? 

( „ •) 

FIL ^ 

( b -- ) 


"ills area between last PLOT'ted, DRAWTO'ed or 
POSIT' ed point to last oosition set by P0S., 

CFALIT 

xxx ( -- cfa (executing) 




using the color in register b. 


xxx ( -- (compiling) 


-- ) 


Used in the form G" ccccc". Senas text cccc to 
text area in non-0 Graphics mode, starting at 






current cursor position, in color of register 

Moating point 




specified by last COLOR command prior to cccc 
being output. 

FCONSTANT 

xxx ( fp -- } 
xxx ( -- fp ) 

GTYPE 

( addr count -- ; 


Starting at addr, output count characters to 





text area in non-0 Graphics mode, starting at 

FVARIA6LE 

xxx (fp -- ) 




current cursor position, in color of register 
:ommand. 


xxx: ( addr -- ) 

LCC. 

X y -- b ) 


Positions the cursor at x y and fetches the 
data i r '-on display at that position. Like 

FDUP 

| fpl - fpl fpl ) 




BASIC LOCATE and L0C. . 

FDROP 

( fp — ) 

(G" ) 



Run-time code compiled in by G" . 

FOVER 

( fp2 fpl - fp2 fpl fp2 

PQ>S@ 

( — x y ) 


Leaves the x and y coordinates of the cursor 

• 

FLOATING 

xxx ( -- fp ) 

CPUT 

( b - ) 


Outputs the data b to the current cursor 





posi tion. 

FP 

xxx ( -- fp ) 

CGET 

( - b ) 


Fetches the data b from the current cursor 
pos i ti on . 

F(a 

( addr -- fp ) 

>SCD 

( cl -- c2 ) 


Converts cl from ATASCII to its display screen 
code, c2. Example: ASCII A >SCD 88 @ C ! 

F! 

( fp addr -- ) 




will put an "A" into the upper left corner of 

F. 

( fp -- ) 




the display. 


SCD> 

>BSCD 

( cl - c2 ) 


Converts cl from display screen code to ATASCII 
c2 . See >SCD. 

F? 

( addr -- ) 

( addrl addr2 count -- 


Moves count bytes from addrl to addr2, 

F+ 

( fp.2 fpl -- fp3 } 

BSCD> 



translating from ATASCII to display screen 
code on the way. 

F- 

( fp2 fpl — fp3 ) 

( addrl addr2 count -- 


Moves count bytes from addrl to addr2. 





translating from display screen code to 
ATASCII on the way. 

F* 

( fp2 fpl - fp3 ) 

COLOR 

( b — ) 


Saves the value b in the variable CLRBYT. 

F/ 

! fp2 fpl -- fp3 ) 

CLRBY7 

( -- addr ) 


Variaole that holds data from last COLOR 




command. 

FLOAT 

( n -- fp ) 

GREY 

- 0 PINK 

4 

BLUE - 8 GREEN -- 12 



GOLD 

1 LVNDR 

5 

LTBL'UE — 9 YLWGRN - 13 

FIX 

( fp (non-neg, less 

0RNG 

- 2 BLPRPL - 

6 

TURQ — 10 ORNGRN — 14' 


than 32767.5) -- n ) 

RD0RNG 

- 3 PRPLBL -- 

7 

GRNBL — 11 LTORNG -- 15 

LOG 

( fpl - fp2 ) 



(CONSTANTS) 

LOG 10 

SOUND 

( chan freq dist vol — 

) 

Sets up the sound channel chan" as indicated. 

( fpl -- fp2 } 




Channel: 0-3 

Frequence: 0-255, 0 is highest pitch. 

EXP 

( fpl - f P 2 ) 




Distortion: 0-14, evens only. 
Volume: 0-15. 

EXP 10 

( fpl — fp2 ) 




Suggested mnemonic: CatFish Don't Vote 

F0~ 

( fp -- flag ; 

SO. 

( chan freq dist vol -- 


Alias of SOUND. 

FILTER! 

; n - ; 


Stores n in the audio control register and into 
the valFORTH shadow register, AUDCTL. Use 

F- 

( fp2 fpl - flag ) 




AUDCTL when doing bit manipulation, then do 
FILTER!. 

F> 

( ■ p2 fpl -- flag ) 

AUDCT _ 

’( -- addr ) 


A variable containing the last value sent to the 
audio control register by FILTER!. 

F< 

( fp2 fpl - flag ) 

XSND' 

XSND4 

( n -- ) 

- - ) 


Silences channel n. 
Silences all channels. 

FL I TERAL 

( fp — ; 

Text Output and Disk Preparation 

Operating System 

P: 

; flag — ) 


If flag is true, enables handler that sends 
text to text screen. If false, disables the 
handler. (See PFLAG in main glossary.) 

OPEN 

( addr nO nl n2 -- n3 ) 

•: flag -- ) 


If flag is true, enables handler that sends 
text to printer. If false, disables the 

CLOSE 

( n — ) 





handler. (See PFLAG in main glossary) 

PUT 

( bl n -- b2 ) 

S’q'ES 



Makes a raucous noise from the keyboard. 



AS C 1 1 

c, -- n (executing) 


Converts next character in inout stream to 

GET 

( n — bl b2 ) 


( c, — (compiling) 


ATASCII code. If executing, leaves on stack. 
If compiling, compiles as literal. 

GETREC 

( addr nl n.2 — n3 )' 

EJECT 

~~ 


Causes a form feed on smart printers if the 
printer handler has been enabled by ON P:. 

PUTREC 

( addr nl n2 -- n3 ) 




May need adjustment for dumb or nonstandard 
printers. 

STATUS . 

( n — b ) 

LISTS 

( start count -- ) 


From start, lists count screens. May be aborted 
by CONSOLE button at the end of a screen. 

DEVSTAT 

( n - bl b2 b3 ) 

PL I ST 

( scr — ) 


Lists screen scr to the printer, then restores 

SPECIAL 

; bl b:2 b3 b4 b5 b6 




former printer nandler status. 


b7 b8 — 59 ) 

PL I STS 

( start cnt -- ) 


From start, lists cnt screens to printer th^ee 
to a page, then restores former printer handler 
status. May be aborted by CONSOLE button at 
the end of a -screen. 

RS232 

( I; ) 

-0RMAT 

( -- 1 


With prompts, will format a disk in drive of 




your choice. 


1 


Does a decompilation of the word xxx if it can 
be found in the active vocabularies. 

A character dumo from addr for at least n 
characters. (Will always do a multiple of 15.) 

A numerical dump in the current base for at 
Toast n characters. -Will always do a multiple 
of 8. ; 

_eaves number of bytes between bottom of display 
list and PAD. 

Does ;FREE) and then prints the stack and 
"bytes' 1 . 

Prints n in HEX, leaves BASE unchanged. 

If flag is true, turns on visible stack. 

If flag is false, turns off visible stack. 

Does a signed, nondestructive stack printout, 

70S at right. Also sets visible stack to do 
signed printout. 

Does unsigned, nondestructive stack printout, 

70S at right. Also sets visible stack to do 
unsigned printout. 

Prints the current base, in decimal. Leaves 
BASE undisturbed. 

Gets the cfa (code field address) of xxx. If 
executing, leaves it on the stack; if compiling, 
compiles it as a literal. 


The character string is assigned the constant 
value fp. When xxx is executed, fp will be 
out on the stack. 

7he character string xxx is assigned the 
initial value fp. When xxx is executed, the 
addr (two bytes) of the value of xxx will be 
put on the stack. 

Copies the fp number at top-of-stack. 

Discards the fp number at top-of-stack.) 

Copies the fp number at 2nd-on-stack to 
top-of-stack. 

Attempts to convert the following string, xxx, 
to a fp number. 

Alias for FLOATING. 

Fetches the fp number whose address is at 
top-of-stack. 

Stores fp into addr. Remember that the. 
operation will take six bytes in memory. 

Type out the fp number at top-of-stack. 

Ignores the current value in BASE and uses 
base 10. 

Fetches a fp number from addr and types it out. 
Replaces the two too-of-stack fp items, fp2 and 
fo'l, with their fp sum, fp3.. 

Replaces the two too-of-stack fp items fp2 and 
fpi, with their difference, fp3=fp.Z-fpl. 

Replaces the two tOD-of-stack fp items fp2 and 
fpl, with their product, fp3. 

Replaces the two top-of-stack fp items fp2 and 
fpl, wi th -their quotient, fp3,=fp2/fpl. 

Replaces number at top-of-stack with its fp 
equi valent. 

Replaces fp number at top-of-stack, constrained 
as indicated, with its integer equivalent. 
Replaces fpl with its base e logarithm, fD2. 

Not defined for fpl negative. 

Reolaces fpl with its base 10 decimal logarithm, 
fn2. Not defined for fpl negative. 

Replaces fpl with fp2, which equals e to the 
power fpl. 

Replaces fpl with fp2, which equals 10 to the 
power fpl. 

If fp is equal to floating-point 0, a true 
flag is left. Otherwise, a false flag is left. 
If fp2 is equal to fpl, a true flag is left. 
Otherwise, a faise flag is left. 

If fp2 is greater than fpi, a true flag is 
left. Otherwise, a false flag is left. 

If fp2 is less than fpl, a true flag is left. 
Otherwise, a false flag is left. 

If compiling, then compile the fp stack value 
as a fp 1 i teral . 


This word opens the device whose name is at 
addr. The device is opened on channel nO with 
AUX1 and AUX2 as nl and n2 respectively. The 
device status byte is returned as n3. 

Closes channel n. 

Outputs byte bl on channel n, returns status 
byte b2. 

Gets oyte bl from channel n, returns status 
byte b2. 

Incuts record from channel r,2 up to length nl. 
Returns status byte n3. 

Outputs nl characters starting at addr through 
channel n2. Returns status byte n3. 

Returns status byte b from channel n. 

From channel nl gets device status bytes bl and 
b2, and normal status byte b3. 

Implements the Operating System "Special" 
command. AUX1 through AUX6 are bl through b6 
respectively, command byte is b7, channel number 
is b8. Returns status byte b9. 

Loads the Atari 850 drivers into the dictionary 
(approx 1.3K). 


Software and Documentation 
©Copyright 1982 
Valpar Internationa! 


HANDY REFERENCE CARD 

valFORTH 1.1 


L-d 


valFORTH 6502 Assembler 


ASSEMBLER 

( ) - 

CODE xxx 


' C; 

\ — ) 

END- CODE 

( wfc ) 

SUBROUTINE 

xxx ( ) 

;( . DE 

♦ — ) 

Control Structures 

IFv 

1 flag -~ addr 2 ; 

ELSE, 

( addr 2 — - addr 3 ) 

ENDIF, 

( addr 2/3 — ) 

BEGIN, 

( — addr 1 ) 

UNTIL, 

{ addr 1 flag — ) 

WHILE, 

( addr 1 flag — addr 

REPEAT, 

{ addr 4 — ) 

AGAIN, 

( addr 1 -— ) 

Parameter Passing (These 

NEXT 

( — addr ) 

PUSH 

( — addr ) 

PUSHOA 

( --- addr ) 

P'JT 

{ — addr ) 

PUTOA 

| --- addr ) 

BINARY 

( — addr ) 

POP and 
PORTWO 

( — - addr ) 

SETUP 

( — addr ) 

N 

( — addr ) 

Opcodes 

( various — various ) 

Aliases 

NXT , = NEXT JMP, 

PSH, = PUSH JMP, 

PUT, = PUT JMP, 

PSHA, = PUSHOA JMP, 
PUTA, = PUTOA JMP, 
POP, = POP JMP, 


Calls up the assembler vocabulary for subsequent 
assembly language programming. 

Enters the new word “xxx‘' into the dictionary 
as machine language word and call's up the 
assembler vocabulary for subsequent assembly 
' anguage programming. 

"ermi nates an assembly language definition by 
performing a security check and setting the 
CONTEXT vocabulary to the same as the CURRENT 
vocabulary. 

A commonly used synonym for the word C; above. 
The word C; is recommended over END-CODE. 

Enters the new word "xxx" into the dictionary 
as machine language subroutine and calls up 
the assembler vocabulary for subsequent assembly 
language programming. 

When the assembler is loaded, puts the system 
into the assembler vocabulary ^or subsequent 
assembly language programming. See main 
glossary for furtnor explanation. 


Begins a machine language control structure 
based on the 6502 status c, :ag on too of the 
stack. Leaves an address and a security :heck 
value for the ELSE, or END IF, clauses below. 

"fl acf' can be EQ , NE , CC , CS , VC , fS , 

MI or PL. . Command forms: 

.. .flag. . I F, . . i f-true. . ENDIF, ...all... 

. ...flag. . IF, . . i f-true. . 

ELSE,. .if-false. .ENDIF,. .all... 

Used in an IF, clause to allow for execution 
of code only if IF, clause is false. If the IF, 
clause is true, this code is bypassed. 

Used to terminate an IF, control structure 
clause. Additionally, ENDIF, resolves all 
forward references,. See IF, above for command 
form. 

Begins machine language control structures of 
the following forms: 

...BEGIN,... AGAIN 

... BEGIN,... Haq.. UNTIL,... 

SIN flag,. . WHILE, ..while-true. .REPEAT,, . . 

where "flag" is one of the 5502 statuses: EQ , 

NE , CC , .CS ,.V( . VS , MI , £ n 
Used to terminate a post-testing BEGIN, clause 
thus allowing for conditional looping of a 
program segment while “flag'' is false, 
i Used to begin a pre-testing BEGIN, clause thus 
allowing for conditional looping of a program 
segment while "flag" is true. 

Used to terminate a pre-testing BEGIN,. .WHILE, 
clause. Additionally, REPEAT, resolves all 
forward addresses of the current WHILE, clause. 
Used to terminate an unconditional BEGIN, 
clause. Execution cannot exit this loop unless 
a JMP, instruction is used. 

tines must be jumped to.) 

Transfers control to the next FORTH word to be 
executed. The parameter stack is left unchanged. 
Pushes a 16 bit value to the parameter stack 
whose low byte is found on the 6502 return 
stack and whose high byte is found in the 
accumul ator. 

Pushes a 16 bit value to the parameter stack 
whose low byte is found in the accumulator and 
whose high byte is zero. 

Replaces the value currently on top of the 
parameter stack with the 16 bit value whose 
low byte is found on the 6502 stack and whose 
high byte is in the/accumulator. 

Replaces the value currently on top of the 
parameter stack with the 16 bit value whose 
low byte is in the accumulator and whose high 
byte is set to zero. 

Drops the top value of the parameter stack 
and then performs a PUT operation described 
above. 

POP drops one value from the parameter stack. 
P'OPTWO drops two values from the parameter 
stack. 

Moves one to, four values to the N scratch area 
in the zero page and drops all values moved 
from the parameter stack. 


Points 

; to 

a nine 

-bvt.e 

scratch 

area 

in th.e 

zero 

page beginning a 

t N-l 

and goii 

so to 

N+7-. 


ADC, 

AND. 

, ASL, 

:B I T, 

, BRK, 

CLC, 

CLD, 

CLI, 

CLV , 

CMP. 

, CPX, 

•iCPY , 

, DEG , 

D'EX, 

DEY, 

EOR, 

INC, 

INX. 

, I NY, 

JSR, 

, JMP, 

LDA, 

LDX, 

LDY, 

LSR, 

NOP. 

, ORA, 

PHA, 

, PHF, 

PLA, 

PEP , 

ROL, 

ROR, 

RTI . 

, RTS, 

SBC, 

, SEC, 

SED, 

SCI , 

STA, 

six. 

TAX, 

, TAY, 

IS A , 

, rxA, 

TXS, 

TV A, 


■POP2 , 


POP TWO 






XL, 


XSAV.E 






xs. 


XSAVE 

STX , 





THEN, 


ENDIF, 






END, 

= 

UNTIL, 









Software and Documentation 
©Copyright 1982 
Valpar international 


HANDY REFERENCE CARD 

valFORTH 

T.M. 

SOFTWARE SYSTEM 

EDITOR 1.1 COMMAND SUMMARY 


Below is a quick reference list of all the commands which the video editor 
recognizes. 


Entering the Edit Mode (executed outside of the edit mode) 


V 

( scr= -■ 

L 

( — ) 

WHERE i 

( — ) 

LOCATE CCCC i 

( — ) 

LOCATOR i 

; ON/OFF 

-BUFS ( 

' ?lines 


* Enter the edit mode and view the specified screen. 

* Re-view the current screen. 

* Enter the edit mode and position the cursor over 
the word that caused a compilation error. 

Enter the edit mode and position the cursor over 
the word "cccc" where it is defined. 

When ON, allows all words compiled until the next 
OFF to be locatable using the LOCATE command above. 
Sets the length (in lines) of the storage buffer. 
The default is five. 


Cursor Movement (issued within the edit mode) 


Ctrl 

T 

Ctrl 


Ctrl 

<r 

Ctrl 


RETURN 


TAB 



* Move cursor up one line, wrapping to the bottom line 
if moved off the top. 

* Move cursor down one line, wrapping to the top line 
if moved off the bottom. 

* Move cursor left one character, wrapping to the 
right edge if moved off the left. 

* Move cursor right one character, wrapping to the 
left edge if moved off the right. 

Position the cursor at the beginning of the next 
line. 

Advance to next tabular column. 


Editing Commands (issued within the edit mode) 


Ctrl 

INS 

Ctrl 

DEL 

shift 

INS 

shift 

Ctrl 

DEL 

I 

BACKS 


Ctrl 

H 


Insert one blank at cursor location, losing the 
last character on the line. 

Delete character under cursor, closing the line. 

* Insert blank line above current line, losing the 
last line on the screen. 

* Delete current cursor line, closing the screen. 
Toggle insert-mode/replace-mode. 

(see full description of ctrl-I). 

* Delete last character typed, if on the same line 
as the cursor. 

Erase to end of line (Hack). 


Buffer Management (issued within the edit mode) 


Ctrl T 

Ctrl F 

Ctrl K 

Ctrl U 

Ctrl R 

Ctrl B 

Ctrl C 


Delete current cursor line sending 
it to the edit buffer for later use. 

Take the current buffer line and insert it 
above the current cursor line. 

Copy current cursor line sending it to the 
edit buffer for later use. 

Take the current* buffer line and copy it 
to the current cursor line. 

Roll the buffer making the topmost buffer 
line current. 

Roll the buffer backwards making the fourth 
buffer line on the screen current. 

Clear the current* buffer line and performs 
a ctrl-B. 


*Note: The current buffer line is bottommost on the video display. 


Changing Screens (issued within the edit mode) 


Ctrl P 

Ctrl N 

Ctrl S 

Ctrl Q 


Display the previous screen saving all 
changes made to the current screen. 

Display the next screen saving all changes 
made to the current screen. 

* Save the changes made to the current screen 
and end the edit session. 

* Quit the edit session forgetting all changes 
made to the current screen. 


Special Keys (issued within the edit mode) 


ESC 


Ctrl A 

Ctrl J 

Ctrl 0 


* Do not interpret the next key typed as any 
of the commands above. Send it directly to 
the screen instead. 

Put the arrow ("next screen") in the 

lower-right-hand corner of the screen unless 
it is already there, in which case remove it. 

Split the current line into two lines at the point 
where the cursor is. 

Corrects any major editing blunders. 


Screen Management (executed outside of the edit mode) 


FLUSH 

( - ) 


* 

Save any updated FORTH screens to disk. 

EMPTY- 

( - ) 


* 

Forget any changes made to any screens not yet 

BUFFERS 



FLUSHed to disk. 

COPY 

( from 

to -- ) 

* 

Copies screen #from to screen #to. 

CLEAR 

( scr# 

- ) 

* 

Blank fills specified screen. 

CLEARS 

( sc r# 

^screens -- ) 


Blank fills the specified number of screens start- 
ing with screen sc r#. 

SMOVE 

( from 

to #screens — 

) 

Duplicate the specified number of screens Starting 
with screen number "from". 





Software and Documentation 





©Copyright 1982 

* 

EDITOR 1.0 

COMMAND 


Valpar International 


