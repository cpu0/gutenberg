AD-A247 599 


ATiON PAGE 


Form Approved 
OPM No. 0704-0188 



m retpanu. Including ttw Urn* Iw rmimnng ninjctloni. SMrcttlng Mining data aourcaa gathanng and manajm tna,^aia 
ten animaia or any o<lw aapad ol this coiaction of Momiatlon. Including augganions lor raducing the bunterrlft'viMtnit^ 
•on Dave Highway. Suia 1204. Adinglon. VA 22202-4302. and to the OHica o* Inlomiation and Ragulalory Allan. Ollica ot 


3. REPORT TYPE AND DATES COVERED 


Final: 20 Sept 1991 to 01 Jun 1993 


4. TITLE AND SUBTITLE 

Validation Summary Report; Verdix Corporation, VADS IBM RS/6000 => MIPS 
R3000. Version 6.1, VAda-110-71620, IBM RS/6000 Model 530 (Host) to IDT 
7RS302 (Target). 910920W1.11202 


6, AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-492.0292 


9. SPONSORINGAilONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Off ice 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


10 SPONSORINGA^ONITORING AGENCY 
REPORT NUMBER 


DT 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS IBM RS/6000 => MIPS R3000, Version 6.1, Wright-Patterson AFB, OH, VAda-110-71620, IBM 
RS/6000 Model 530 (Host) to IDT 7RS302 (Target). ACVC 1.11. 



14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17, SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18. SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std 239-128 















Certificate Information 


Ttie following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 20 September 1991. 

Compiler Name and Version: VADS IBM RS/6000 => MIPS R3000, Version 6.1, 

VAda-110-71620 

Host Computer System: IBM RS/6000 Model 530 (AIX 3.1) 

Target Computer System: IDT 7RS302 (R3000 bare board) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

910920W1.11202 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 

This report has been reviewed and is approved. 


^a Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Organization 

Dired^or,'-'6Qjnputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Dr. John Solomond, Director 


Department of Defense 
Washington EX: 20301 


92-06983 





AVF Control Number: AVF-VSR-492.0292 

18 February 1992 
91-07-16-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 910920W1-11202 
VERDIX Corporation 

VADS IBM RS/6000 -> MIPS R3000, Version 6.1, VAda-110-71620 
IBM RS/6000 Model 530 => IDT 7RS302 


Prepared By; 
Ada_Validation_Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



A' 






I 

I 


r 





I 

L 


Di^t 




t 

4 


I 

■i 


I 

-i 


I 










Certificate Information 


The following Ada inplementation was tested cind determined to pass ACVC 
1.11. Testing was conpleted on 20 September 1991. 

Compiler Name and Version; VADS IBM rs/ 6000 => MIPS R3000, Version 6.1, 

VAda-110-71620 

Host Conputer System: IBM RS/6000 Model 530 (AIX 3.1) 

Target Conputer System; IDT 7RS302 (R3000 bare board) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information eibout the testing 
environment. 

As a result of this validation effort, Validation Certificate 

910920W1.11202 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 



Ada Validation Facili'ty 


Steven P. 
Technical 


Wilson 

Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada 

Dire^tc _ 

Institute for Defense Analyses 
Alexandria VA 22311 


organization 

ter eund Software Engineering Division 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 





DECLARATION OF CONFORMANCE 


Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VADS IBM RS/6000 -> MIPS R3000, Version 6.1, 

VAda-110-71620 

Host Computer System: IBM RS/6000 Model 530 (AIX 3.1) 

Target Computer System: IDT 7RS302 

(MIPS R3000 bare board) 


Customer's Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
Jcnowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 






TABLE OF OKTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS .1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTRODUCTION 


The Ada implementation described eibove was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For ciny technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1,1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating coiantry, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
rnformation Act" (5 U.S.C. #552). The results of this validation apply 
only to the con^ters, operating systems, and compiler versions identified 
in this report. 

The orgeuiizations represented on the signatuie page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject inplementation has no 
nonconformities to the Ada Standard other them those presented. Copies of 
this report are availedale to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF v^ich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexcindria VA 22311-1772 


1-1 







INTRODUCTiai 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1^87. 

(Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Conpiler Validation Capability User's Guide , 21 Jione 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner eind produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result v^en they 
are executed. Three Ada library units, the packages REPORT eind SPPRT13, 
and idle procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_F1LE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 





INTRODUCTICW 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software euid any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the ten?)late for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guideince for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations eind logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTICW 


Conformity 


Customer 


IDeclaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Wi thdrawn 
test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A computer system where Ada source programs are transformed 
into executcible form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
con^Jlete hardware inplementations are possible. 

A conputer system where the executable form of Ada programs 
are executed. 


The conpiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 


The following 

tests have 

been withdrawn by the AVO 

The rationale for 

withdrawing each test is 

available from 

either the 

AVO or the 

AVF. The 

publication date for this list of withdrawn tests 

is 2 August 

1991. 

E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD511IA 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA20lE 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and common"'y referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 








IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..y (14 tests) 
C35706L..Y (14 tests) 
C35708L..y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this inplementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLQAT; for this inplementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper e;.ception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE_CfVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATIW's base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks vstiether a length clause can specify a non-default size 
for a floating-pK)int type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 


2-2 




IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this iitplementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3J.02E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LEircTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify am Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater them 150000, making the checking of this 
objective impractical. 


2-3 




IMPLEMENTATICXa DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 20 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 


CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A..C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instemtiations of the support procedure LENGTH_CHECK, vdiich uses 
Unchecked_Conversion according to the interpretation given in Al-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 





CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

David Nomura 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 

For sales information about this Ada inplementation, contact: 

Stephen F. Zeigler 

Verdix Corporation 

1600 NW Conpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 









PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable eind applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), eind those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of i^plicable Tests 3806 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 68 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 269 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTIC»J 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host conpater. 


The tests were compiled eind linked on the host conputer system, as 
appropriate. The executable images were transferred to the target conpjter 
system by the communications link described above, and run. The results 
were captured on the host conputer system. 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 






PROCESSING INFORMATICS 


Option/Switch 

-w 


Effect 

suppress generation of warning messages 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 







APPEM)IX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vdiere "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 

$B1G_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V => ' 2 ') 

$BIG_ID3 (1..V/2 => 'A') & '3' & 

(1..V-1-V/2 => 'A') 

$BIG_ID4 (1..V/2 => 'A') & ' 4 ' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (l,.V-3 => '0') & "298" 

$BIG_REAL_LIT (1..V-5 => '0') & "690.0" 

$BIG_STRING1 & (1..V/2 => 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'A') & '1' & 

$BLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MftX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 => 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALI(2^MENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

IBM RS_6000_CROSS_MIPS 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM,"+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"{16#80#) 

$ENTRY_ADDRESS2 

SYSTEM.”+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r f 

$FIXED_NAME 

NO_SUCH_TyPE 

$FLCIAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

•1 If 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN IXJRATION 

100_000.0 

$GREATER THAN DURATION BASE LAST 

T0_00U_000 


$GREATER_THAN_FLOAT_BASE LAST 

1.Ie+308 

$GREATER THAN_FLOAT_SAFE LARGE 

B.'^ESO? 


A-2 







MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLOAT SAFE_LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

"Villegal/file_name/2}]%2102c.dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

''^/illegal/file_name/CE2102C*.dat" 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRLATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1,TST") 

$INCLUDE_PRAGMA2 PRAOIA INCLUDE {"B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

SINTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN_DURATIW_BASE FIRST 

- 1 ^_ 000 _ 000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITy 0 

$MACHINE_CODE_STATEMENT 

CODE_0'(OP => NOP); 

$MACHINE_CODE_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME TINY_INTEGER 

A-3 





MACRO PARAMETERS 


$NAME_LIST 

IBM_RS_6000 CROSS MIPS 

$NAME_SPECIFICATIONl 

/usr/test suites/inips_acvc.ll/c/e/X2120A 

$NAME_SPECIFICATION2 

/usr/test suites/mips acvc.ll/c/e/X2120B 

$NAME_SPECI FI CATiaiS 

/usr/test suites/mips acvc.ll/c/e/X3119A 

$NEG_BASED_INT 

16#fOOOOOOE# 

$NEW_MEM_SIZE 

16_777_216 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

IBM_RS_6 0 0 0_CROSS_MIPS 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITION 

RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME 

CODE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

$TICK 

0.01 

$VAR1ABLE_ADDRESS 

VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 

VAR__2'ADDRESS 

$VAR1ABLE_ADDRESS2 

VAR_3'ADDRESS 

$YOLIR_PRAGMA 

PRAGMA PASSIVE 


A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The coitpiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation eind 
not to this report. 


ada 


Ada compiler 
Syntax 

ada [options] (source_file].,. Clinkec_optionsl 
[object_file.o]... 

Options 

-# identifier typ)e value (define) Define an identifier of a 
specified type and value. See Chapter , VADS ADA PREPROCESSOR 
REFERENCE. 

-a file_name (archive) Treat file_name as ein object 
archive file created by ar. Since some archive files end 
with .a, -a is used to distinguish archive files from Ada 
source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
maricing any defined units as unconpiled. The -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-E 

-E file 


B-1 




COMPILATiaa SYSTEM OPTICWS 


-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source. 

err. The file of raw error messages can be used as input to 
a.error 

-el (error listing) Intersperse error messages eimong source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variable ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search command that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invoked. 

-K (keep) Keep the intermediate language (IL) file 

produced by the coirpiler front end. The IL file will be 

placed in the .objects directory, with the file name Ada_source.i 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-lfile_abbreviation (library search) This is ein option 
passed to the UNIX linker, id(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l). 

-M unit_name (main) Produce an executable program by 
linking the named unit as the main program.. unit_name must 
already be compiled. It must be either a parameterless 
procedure or a parameterless function returning ein . nteger. 

The executcible program will be ncuned a.out unless overridden 
with the -o option. 

-M source_file (main) Produce an executable program by 
compiling and linking source_file. The main unit of the 

B-2 






COMPILATION SYSTEM OPTICWS 


program is assumed to be the root name of the .a file (for 
foo.a the unit is foo). Only one .a file may be preceded by 
-M. The executable program will be named a.out unless 
overridden with the -o option. 

-o executc±)le file (output) This option is to be used in 
conjunction wTth the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-O[0-9] (optimize) Invoke the code optimizer (0PTIM3). An 
optional digit (there is no space before the digit) provides 
the level of optimization. The default is -04. 

-0 full optimization 

-OO prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting from loops with maximum passes 

-07 hoisting from loops cind branches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and breinches, maximum passes 

Hoisting from branches (auid cases alternatives) can lae slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For more information about optimization, see COMPILING ADA 
PROGRAMS, Conpiler Optimizations on page. See also pragma 
OPTIMIZE_CODE(OFF) on page. 

-P Invoke the Ada Preprocessor. See Chapter , VADS ADA 
PREPROCESSOR REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) /^ply pragma SUPPRESS to the entire 
compilation for all suppressible checks. (See also pragma 
SUPPRESS(ALL CHECKS) on page. 


B-3 










COMPILATION SYSTEM OPTIONS 


-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date cuid time 
of compilation, name of file compiled, commcind input line, 
total coir^ilation time, and error summary line. Storage 
usage information about the object file is provided. With 
0PTIM3 the output format of conpression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 

-w (warnings) Suppress warning diagnostics. 

Description 

The command ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invoices a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of conpilation and the order of the files to be passed 
to the linker ceui be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
con^jTler components based upon visible library directives, 
the option -sh is provided to print the name of the 
con^nents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

See also a.das on page ; a.db on page ; a.error on page ; 
a.Id on page ; a.mklib on page ; and Operating System 
reference documentation for the ld(l) utility. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended 
to be self-explcinatory. Most refer to the RM. Each RM reference 


B-4 



COMPILATION SYSTEM OPTIONS 


includes a section number and optionally, a paragraph number 
enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a. Id 


prelinker 

Syntax 

a.Id (options] unit_name [ld_options] 

Options 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit ncime (elaborate) Elaborate unit_name as early in 
the elaboration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the neune of the output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order emd 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 
Description 

a.Id collects the object files needed to make unit_name a 
main program and calls the UNIX linker ld(l) to link together 


B-5 





COMPILATION SYSTEM OPTIONS 


all Ada and other language objects required to prc lU an 
executable image in a.out.unit_name is the main pi^^i-cuu and 
must name a non-generic subprogram. If unit_name is a 
function, it must return a value of tlie type STANDARD.INTEGER. 
This integer result will be passed back to the UNIX shell as 
the status code of the execution. The utility uses the net 
files produced by the Ada compiler to check dependency 
information, a.Id produces am exception mapping tcible aind a 
unit elcdDoration teible and passes this information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 

Besides information generated by the compiler, these 
directives also include WITHn directives that allow the 
automatic linking of object modules coirpiled from other 
lemguages or Ada object modules not named in context clauses 
in the Ada source. Any number of WITHn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at WITHl. The directives are recorded 
in the library's ada.lib file eind have the following form. 

WITHl:LINK:object_file; 

WITH2:LINK:archive_file; 

WITHn directives may be placed in the loca'’ ’'da libraries or 
in any VADS library on the search list 

A WITHn directive in a local .ADS library or earlier on the 
library search list will hide the same numbered WITHn 
directive in a library li.ter in ♦■he library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VADS compilers to exist 
on the same host. The -sh option prints the name of the 
actual executable file. 


Files 

a.out default output file 

VADS_location/standard/* startup and standard library routines 

See also Operating system documentation, ld(l). 


B-6 




COMPILATION SYSTEM OPTIONS 


Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. A’ditional messages are produced by the UNIX linker Id. 


B-7 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of ^pendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is -128 .. 127; 

type FLOAT is digits 6 range -3.40282E+38 .. 

3.40282E+38; 

type La4G_FLClAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type DURATION is delta 0.0001 range -214748.3648 .. 

214748.3647; 


end STANDARD; 


C-1 




APPENDIX F OF THE Ada STANDARD 


ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_C»ILY Pragma 

The INLINE_0NLY pragma, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprograun must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine v^ich saves code 
space. If a user erroneously makes an INLINE_0NLY subpro¬ 
gram recursive a warning message will be emitted eind an 
PROGRAM_ERROR will be raised at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e, statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
j-nitialized statically, code will be generated to initialize 
the object eind a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bodies for which no actual Ada 
body can be provided, for example the MACHINE_C0DE package. 

1.4. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 


C-2 








APPENDIX F OF THE Ada STANDARD 


declarative item in a declarative part or package specifica¬ 
tion, or after a library lonit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atten^t to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The EXTE3y'lAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other leunguages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or sxibprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 


C-3 






APPENDIX F OF THE Ada STANDARD 


object cannot be any of the following: 
a loop variable, 
a constant, 

cin initialized variable, 
an array, or 
a record. 

1.8. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is W. 

1.9. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies v^ether the code should be optim¬ 
ized by the coitpiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CCmROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in ^pendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C and FORTRAN functions. The 
Ada subprograms can be either fractions or procedures. The 
typ)es of parameters eund the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in appendix B of the 


C-4 





APPENDIX F OF THE Ada STANDARD 


Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. I«:w_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma cam be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or cin Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the coitpiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in ^pendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


C-5 



APPENDIX F OF THE Ada STANDARD 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at conpile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inplemented as described in i^pendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION_CHECK and in some cases OVERFLCW_c:hecK cannot be 
suppressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

3. Inclementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes cin object, a program unit, a 
leJDel, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 


C-6 










APPENDIX F OF THE Ada STANDARD 


See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 


with UNSIGNED_TYPES; 
package SYSTEM is 


pragma suppress(ALL_CHECKS); 
pragma suppress(E3(CEPTI0N_TABLES); 
pragma not_el 2 ±>orated; 

type NAME is ( IBM_RS_6000_CROSS_MIPS ); 

SYSTEM_NAME : constant NAME := IBM_RS_6000_CROSS_MIPS; 

STORAGE_UNIT : constant := 8; 

MEMORY_SIZE : constant := 16_777_216; 

— System-Dependent Named Numbers 


MIN_INT : constant 
MAX_INT : constant 
MAX_DIGITS : constant 
riAX_MANTISSA : constant 
FINE_DELTA : constant 
TICK ; constant 


-2_147_483_648; 
2 147 483 647; 
1 ^; ‘ “ 

31; 

2.0**(-31) ; 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE : integer := 1024; 
type ADDRESS is private; 


function ">" (A: ADDRESS; 
function "<" (A: ADDRESS; 
function ">*"(A: ADDRESS; 
function "<=»"(A: ADDRESS; 
function (A: ADDRESS; 
function "+" (A: ADDRESS; 
function (A: ADDRESS; 


B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
I: INTEGER) 
I: INTEGER) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
return ADDRESS; 
return ADDRESS; 


C-7 










APPENDIX F OF THE Ada STANDARD 


function "+" (I: UNSIC3^_TYPES.UNSIGNED_INTEGER) 
return ADDRESS; 

function MEMORY_ADDRESS 

(I; t)NSia^_TYPES.UNSIGNED_INTEGER) return ADDRESS 
renames 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SIZE: constant := 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type LC»4G_ADDRESS is private; 

NO_LCX4G_ADDR : constant LONG_ADDRESS; 

function (A: LaJG_ADDRESS; I: INTEGER) return LC8SIG_ADDRESS 

function (A: LCWG_ADDRESS; I: INTEGER) return LCWG__ADDRESS 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LC»IG_ADDRESS; 

function LOCALIZE(A: LONG_ADDRESS ; BYTE_SIZE : INTEGER) 
return ADDRESS; 

function STATICX4_0F(A: LONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 

NO_ADDR ; constant ADDRESS := 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">="); 
pragma BUILT_IN("<="); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIC34ED_INTEGER; 
NO_TASK_ID : constant TASK_ID := 0; 

type PROGRAM_ID is new UNSIG;NED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID := 0; 

type LWG_ADDRESS is new UNSIGNED_TYPES.UNSI(34ED INTEGER; 


C-8 





APPENDIX F OF THE Ada STANDARD 


NO_LiONG_ADDR : constant LONG_ADDRESS := 0; 

pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the a±>sence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record corrponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a •'epresentation clause will pack to the 
number of bi*- aquired to represent the range of the sub- 
type. A size r* ause applied to a record type will not cause 
packing o' jmponents; an explicit record representation 
clause musc be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packiiig of conponents only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a varieible requires evaluation of 
the variable address elaboration ordering requirements 
prohibit initialization of variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation cind restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 


C-9 





APPENDIX F OF THE Ada STANDARD 


either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to cin interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Lcibels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
cin assembly leinguage interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mnemonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand (, operand} ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 


C-10 






APPEM)IX F OF THE Ada STANDARD 


The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op => opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_C0DE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_C0DE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expeinsion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Inplementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as 
the record size (expressed in STOPAGE_UNITS) when the size 
of ELEMENT_TYPE exceeds that value. For exairple for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX REC SIZE exceeds this absolute limit. 


C-11 


APPEM)IX F OF THE Ada STANDARD 


Instantiations of SEQLJENTIAL_I0 use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) vdien the 
size of ELEMENT_TYPE exceeds that value. For exainple for 
unconstrained arrays such as string where ELEIMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the inplemen- 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the adDSence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for cin access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SlZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x 5TORAGE_UNITS for 
objects declared statically within a coitpilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 





