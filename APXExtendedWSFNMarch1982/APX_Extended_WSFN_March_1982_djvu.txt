ATARI® PROGRAM EXCHANGE 



t 



Harry Stewart Inarch 1982 

EXTENDED WSFN 

CASSETTE (APX-10026) DISKETTE (APX-20026) 

REQUIRES: 16K RAM REQUIRES: 2^K RAM 



User-Written Software for ATARI Home Computers 









Harry Stewart March 1982 


EXTENDED WSFN 

CASSETTE (APX-10026) 

REQUIRES: 16K RAM 


DISKETTE (APX-20026) 
REQUIRES: 24K RAM 



EXTENDED WSFN 



Harry Stewart 


Progran and Manual Contents © 1982 ATARI * Inc* 

Copyright notice * On receipt of this computer program and associated documentation (the 
software)* ATARI* Inc# grants you a nonexclusive license to execute the enclosed software# 
This software is copyrighted# You are prohibited from reproducing* translating* or 
distributing this software in any unauthorized manner# 


TRADEMARKS OF ATARI 


The following are trademarks of Atari, Inc. 
ATARI® 

ATARI 400” Home Computer 
ATARI 800‘" Home Computer 
ATARI 410 Program Recorder 
ATARI 310"' Disk Drive 
ATARI 820"" 40-Column Printer 
ATARI 822 tm Therrnal Printer 
ATARI 825"* 80-Column Printer 
ATARI 830"" Acoustic Modem 
ATARI 350*"Tnterface Module 



4 ■ 


t 


c 



Distributed by 


The ATARI Program Exchange 
P* O* Box 427 

155 Moffett Park Drive* B-l 
Sunnyvale* C A 94086 

To request an APX Software Catalog* write to the address above* or call toll-free* 


800/538-1862 (outside California) 
800/672-1850 (within California) 



Or call our Sales number* 408/745-5535* 

********************#**m********************************************************* 








w * 


n 




<* n 


* 



u. r ; 



IMPORTANT ! 



This APX diskette is unnotched to protect the software against 
accidental erasure. However, this protection also prevents a program 
from staring information on the diskette. The program you've 
purchased involves storing information. Therefore, before you can use 
the program, you must duplicate the contents of the diskette onto a 
notched diskette that doesn't have a write-protect tab covering the 
notch. 

To duplicate the diskette, call the Disk Operating System (DOS) menu 
and select option J, Duplicate Disk. You can use this option with a 
single disk drive by manually swapping source (the APX diskette) and 
destination (a notched diskette) until the duplication process is 
complete. You can also use this option with multiple disk drive 
systems by inserting source and destination diskettes in two separate 
drives and letting the duplication process proceed automatically. 
(Note. This option copies sector by sector. Therefore, when the 
duplication is complete, any files previously stored on the 
destination diskette will have been destroyed.) 







&>■ 





' ■ ' 

* * L ■ ^ 

•* •* V W 

r .. c 


« 



•*» .# » ^r* ■•'»««» ^ 

'-*»*' <W- •%. .' , ■ '«*.'•. 



*» 

* f * 

• — — >• 














* 


*. • , v *’ 


















WSFN (TURTLE) was originally planned for release in cartridge form. This version is either on 
diskette or cassette. Therefore, please substitute the word applying to the version you have 
whenever you read the word "cartridge" in these instructions. 


Two documents accompany TURTLE. ATARI WSFN (TURTLE) is a tutorial. EXTENDED WSFN (TURTLE) 
is a reference manual. 


REQUIRED ACCESSORIES 

16K RAM for cassette version 
24K RAM for diskette version 
ATARI 410 Program Recorder for cassette 
ATARI S10 Disk Drive for diskette 


GETTING STARTED 

If vou have the cassette version of TURTLE ) 

1. Have your computer turned OFF. 

2. Insert the TURTLE cassette in the program recorder, press REWIND, and then press PLAY. 

3. Turn on your computer while holding down the START key. 

4. When you hear the beep, release the START key and press the RETURN key. TURTLE will 
load into RAM and you'll see the TURTLE display screen. 

If vou have the diskette version of TURTLE ! 

1. Turn on your disk drive, insert the TURTLE diskette, and power up your computer. 

2. When the READY prompt displays, type DOS to call up the menu. 

3. Enter menu selection L (Binary Load). 

4. To the LOAD FROM WHAT FILE? prompt, enter TURTLE and press the RETURN key, TURTLE 
will load into RAM and you'll see the TURTLE display screen. 




































TABLE OF CONTENTS 


1. Turtle overview 

1.1 Turtle's domain 

1.2 Drawing 

1.3 Control of turtle 

1.4 Keyboard control- 

1.5 User defined commands 

2. Command forms 

2.1 Single letter 

2.2 Testing commands 

2.3 Iteration 

2.4 Nesting 

2.5 Command/value 

2.5 Definition 

3. Specific commands 

3.1 Turtle position & orientation 

3.2 Turtle "senses" 

3.3 Turtle manifestations 

3.4 Turtle world 

3.5 Turtle arithmetic 

3.6 Iteration 

3.7 Nesting commands & clauses 

3.8 User defined commands & variables 

3.9 Random test 

3.10 Mode control & options 

3.11 No-ops 

4. Examples 

4.1 Set ACC = 0 
Set ACC = 23 

4.2 Set ACC = ACC *2 

4.3 Set ACC = ACC *7 

4.4 Set ACC = ACC / 7 

4.5 Set pen color to 1 without altering ACC 

4.6 Find upper right corner of screen 

4.7 Recurse by number in ACC 

4.8 Sierpinski Curve 

4.9 Hilbert Curve 

4.10 Tr inary tree structure 


TABLE OF CONTENTS (coot.) 


4. Examples (continued) 

4.11 Spirals 

4.12 Super spirals 

4.13 Diagonal plaid 

4.14 Random pattern #1 

4.15 Random pattern #2 

4.16 Random pattern #3 

4.17 Koch Curve 

4.18 Hilbert Cruve (written in Pascal) 


APPENDICES 


Appendix A 
Appendix B 
Appendix D 
Appendix E 
Appendix F 
Appendix G 
Appendix H 


List of commands 
Error status codes 
Pen selects (by screen mode) 
Color register values 
Joystick trigger tests 
ROM resident user commands 
Audio select options 


1 . TURTLE OVERVIEW 


The turtle package provides the user with the ability to generate 
screen graphics using a few simple keyboard commands. The drawing 
element is called a turtle, which may move around the screen leaving 
"tracks" (or not, at the user's discretion). His motion and direction 
are controlled with five commands, each of which is a single keystroke: 
H - Place turtle on home position (center of screen). 

N - Point turtle north (up). 

R - Rotate turtle 45° clockwise. 

L - Rotate turtle 45° counterclockwise. 

F - Move turtle forward one unit. 

These commands are sufficient to draw pictures of any degree of com- 
plexity, when coupled with other commands and capabilities. Beyond 
the command set provided by the turtle package, the user may define 
additional commands which are conglomerations of other system or user 
commands. Nested and/or recursive command structures may be defined 
which behave very much like programs in more procedure-oriented lang- 

\ 2 

uages. 

1 TURTLE'S DOMAIN 

The turtle's domain consists of two regions: (1) the visible region and 
(2) the invisible region. The domain is fixed in size as a 65536 by 
65536 "sphere" with the visible region being variable in size, depending 
on the current display mode and resolution. The turtle may be confined 
to the visible region or not, at the user’s discretion. 


THE TURTLE 


PAGE 2 


TURTLE'S DOMAIN 


NORTH 




units 


32768 units 


SOUTH 


EAST 


Note that the domain is "spherical" in that the East & West 
edges are joined as are the North & South edges . 



THE TURTLE 


PAGE 3 


The turtle is always defined by his position and orientation. From 
his position, he may move to any of 8 adjacent "cells" based upon his 
orientation, as shown below. 


\ 

J 


/ 


\ 

7 



/ 

\ 

> 

7 

> 


\ 


In addition to moving to an adjacent cell, the turtle may also "sense" 
whether a cell is in the visible region or not, and detect the presence 
of a "track" in an adjacent cell. 

1.2 DRAWING 

The turtle draws by leaving "tracks" with a magic marker which is con- 
trolled with three commands. 

U--which stands for pen this allows the turtle to move without 
leaving tracks. 

P — is the pen select command; this selects one of three colors for 
the pen, or erase (which removes tracks that the turtle crosses). 

D — which stands for pen down ; this causes the turtle to leave 
tracks of the current pen color. 



THE TURTLE 


PAGE 4 


The turtle can also detect tracks that are already in his region with the 
"S" (sense) command. 

1.3 CONTROL OF THE TURTLE 

The turtle is controlled by keyboard commands, which are executed as 
they are entered. Command execution may be deferred, however, by using 
the nesting capability provided by the () andCD matched sets. Thus, if 
(CHNR999F) is entered, none of the commands within the parens will be exe- 
cuted until the matching right paren is entered — at which time the string 
of commands will be executed at full speed. The command string above does 
the following: 

C - Clear the screen 
H - Home the turtle 
N - Face him North 

R - Rotate him to the right (now facing NE) 

999F - Move forward 999 times (each time leaving a track, if 
the pen is down). 

This example illustrates another feature, that of repetition (or iteration); 
a number preceding a command indicates that the command is to be executed 
as many times as indicated by the number. This feature also applies to the 
nesting brackets; thus, the example below includes nested iterations: 

4(2R 4(10F2R) ) 

Draws a square 


Draws 4 squares with a common corner: 



THE TURTLE 


PAGE 5 


1.4 KEYBOARD CONTROL 

The keyboard is monitored at all times, even while a command is being exe- 
cuted; if a key is pressed, the current command is temporarily suspended, 
the newly entered command is executed, and then the prior command is re- 
sumed. This command interruption may actually be accomplished to any num- 
ber of levels (commands interrupting commands interrupting commands, etc.). 

t 

The BREAK key will stop all command activity and put the turtle into an 
idle state. 

1.5 USER DEFINED COMMANDS 

The user may define unused keys to be "macro" commands — conglomerates of 
intrinsic and/or user defined commands. These commands may recurse, if 
desired, and may also, in turn, define other commands or redefine themselves 


THE TURTLE 


PAGE 6 


2. COMMAND FORMS 

Turtle commands fall into one of six forms, as will be described in 
the paragraphs that follow. 

2.1 SINGLE LETTER 

^command> ^name> 

Many commands are of this form, where a single key stroke 

(the name ) is the command. Examples are: H (Home), C (Clear), 

F (Forward). 

2.2 TESTING COMMANDS 

<command> ::* ^name> <then> <,else^ 

There are four commands of this form, where a test is made and 
either the <then> clause or the <else> clause is executed, (but 
not both). Examples are: T (Test Acc.), E (Edge test) and ? (Ran- 
dom test) . 

2.3 ITERATION 

<command^ ::= ^value^ <£clause^ 

There are three commands of this form, where a numeric value is 
used to iterate a following clause. Examples are: A (Iterate by 
ACC), #v (Iterate by variable), and n (Iterate by number). 





THE TURTLE 


PAGE 7 


2.4 NESTING 

<^comman^> <nesting bracke^4 lause X< clause X matching bracket / 

—————— — — — — — * 

There are two nesting bracket sets: (...) and Q • • J • 

2.5 COMMAND/VALUE 

^ommanc^ : :* <name)> <va1ue^ 

2.6 DEFINITION 


^command^ • • - ^name^ DQ^clause^ 

. .- <name> # 





THE TURTLE 


PAGE 8 


3. SPECIFIC COMMANDS 

3.1 TURTLE POSITION & ORIENTATION 
- Home Turtle - 

Puts turtle to the center of the screen and leaves his "track" 
if the pen is down; does not alter turtle orientation. 



- Point Turtle North - 



Faces the turtle towards the top of the screen without altering 
his position. 



- Turtle Forward - 


Moves the turtle forward one unit and leaves his "track" if the 
pen is down; does not alter turtle orientation unless the screen 
edge is hit in reflect mode. 


Rotate Turtle Right - 


Rotates the turtle clockwise 45 . 



- Rotate Turtle Left - 


Rotates the turtle counterclockwise 45 



3.2 TURTLE "SENSES" 

- Sense Color Value - 

Reads the color of the square in front of the turtle and puts it 



into the turtle accumulator (ACC). Background is read as zero, 
turtle tracks are read just as they were written, and squares 
beyond the screen edge are read as zero. 



THE TURTLE 


PAGE 9 


3.2 TURTLE "SENSES" (continued) 

- Joystick/Triqger Sense - $-^>elect^><£on^ ^bfl^ 

Tests the selected joystick position, joystick trigger and 
executes either the <or^ clause or <off> clause, based 
upon the result of the test. See Appendix F for a list of 
the select codes for the various sensible items. 

Joystick position and triggers are continuously sensed; 
there is no edge detection or reset logic. 


$-^elec^>-<on^ <bft^>j 



- Pot Controller Read - 
Reads the selected pot controller and puts its value in the 
accumulator; the controller range is from 0 (full counter- 
clockwise) to 228 (full clockwise). The <select^> values 
range from 0 to 7 corresponding to the 8 pot controllers. 


- Orientation Sense 
Sets the accumulator to one of 
on the current orientation: 

0 - N 

1 - NE 

2 - E 

3 - SE 

4 - S 

5 - SW 

6 - W 

7 - NW 


the values shown below, based 





THE TURTLE 


PAGE 10 


3.2 TURTLE "SENSES" (continued) 


- Edge Test - 



Tests to see if the square in front of the turtle is at or beyond 
the screen edge; if so, the ^true^ clause is executed; otherwise 
the ^false^ clause is executed. 


3.3 TURTLE MANIFESTATIONS 



- Beep - 

Generates an audible tone using the television sound system 



- Pen Up - 

Allows the turtle to move without leaving tracks; this command 
is countermanded by the "D“ command described below. 



- Pen Down - 

Lowers the pen, which means that the turtle will leave tracks 
(or erase), depending upon the current pen color selected. 


- Audio Control 



Allows sounds to be generated as manifestations of internal 
registers of the turtle program, as shown in Appendix H. 


- Wait 



Causes the turtle to wait for the next 30 HZ clock tick before 
resuming execution of turtle commands. See also 3.10 for a 
description of the speed control command. 



THE TURTLE 


PAGE 11 


3.3 


TURTLE MANIFESTATIONS (continued) 


- Pen Select 



The value of the turtle accumulator modulo 128 is used as 


the color select for turtle tracks, until changed. Zero is 
background (erase) and is not the same as issuing a "PEN UP" 

command. 



- Turtle Representation - 
Selects or de-selects a turtle overlay that nondestructive^ 

shows turtle position and orientation at all times. 

<number> = 0, de-selects the overlay; 


<number> 


1, selects an arrow overlay; 


<numbei> = 2, selects a turtle overlay; 
<0iumbe!> = 3, selects a point overlay. 


3.4 TURTLE WORLD 

- Clear Screen - 
Clears all turtle tracks from the screen without altering the 

turtle position or orientation. 




- Edge Rule Select - 
Selects one of four rules to follow when the turtle encounters 


the edge of 

the 

screen. 




number 

= 

0, 

turtle 

stops; 



number 

= 

1, 

turtle 

wraps to opposing 

edge; 


number 

= 

2, 

turtle 

bounces (reflects) 

off 

edge; 

number 


3, 

turtle 

goes off edge but 

does 

not leave 


tracks until he gets back in screen boundary. 



TURTLE 


PAGE 12 


3.4 TURTLE WORLD (continued) 

If the turtle is not in the screen boundaries when an edge 
rule is selected, he will be put to the home position. 



- Display Mode Select - 
Preselects one of the eight display modes available (see Appen- 
dix C for descriptions of each mode). The mode change takes 
place with the next operating mode select (CTRL-M, see 3.10). 


- Color Register Values 


& <s elect)! 


Allows the hardware color register selected to be updated with 
the value in the turtle accumulator. See Appendix D for the 
utilization of the color registers for each screen mode and 
see Appendix E for color register values to use to get the 


desired colors and luminescence. 


3.5 TURTLE ARITHMETIC 

- Increment Turtle Accumulator 
Adds one to the four-digit ACC; will not increment it past all 
nines . 



- Decrement Turtle Accumulator 

Subtracts one from the four-digit ACC; will not decrement it 

past zero. 



- Test ACC for i Zero 



Tests to see if the ACC is greater than zero; 
clause is executed; otherwise, the <^false^> 


if so, the <^true^> 
clause is executed. 


- Set ACC to Zero- 



Sets the ACC to zero. 



THE TURTLE 


PAGE 13 


3.6 ITERATION 

- Iterate by Constant 

Iterates the ^clause> by the number indicated in the constant. 
If the constant is zero, the <fclause> is not executed at all. 
If <^constant> exceeds four digits in length, the last four 
digits are used. 


^constant) 1 ^clause)> 



- Iterate by Variable - 
Same as above, except current value of the indicated variable 


is used instead of a constant. 



- Iterate by Turtle Accumulator - 
Same as for CONSTANT, except current value of the ACC is used 
instead of a constant. The ^ clause^ may modify the ACC without 
changing the iteration count. 


- Stop Iteration - ! 

When executed, makes the current iteration the last iteration 
(set the iteration count to zero) within the current iteration 
level. This command will not affect outer level iteration counts. 


Increment Iteration Count - ^ 

When executed, increments the current iteration count. Has 
no effect if not executed within an iteration. 


3.7 NESTING COMMANDS & CLAUSES 

- Basic Nest - (^clause^ ... ^clause^ ) 

Any number (including zero) of ^clauses^ may be nested together 
creating a single new clause, using matched parentheses. Parens 
may exist within other parens to any level desired. 





THE TURTLE 


PAGE 14 


3.7 NESTING COMMANDS & CLAUSES (Continued) 


- Accumulator Save/Restore Nest 



Behaves the same as above except that the turtle accumulator 
is saved and restored by the C an< 0 commands. 


3.8 


USER DEFINED COMMANDS & VARIABLES 


Define User Command 


= <name^ ^clause > 
= *<name><c1ause> 


Creates a definition in memory whereby the clause^ may be 
invoked merely be using the ^name>; the optional * allows 
^name^to be the same as one of the turtle intrinsic commands. 

If the ^clause > consists of a blank character (NOP), the <^hame^» 
will be removed from the user command directory. 


- Invoke User Command 


<(n ame^> 
*<name^ 


Once defined, a user command may be used exactly as an intrinsic 

% 

command is used; however, if <name> is the same as an intrinsic 
command, the * must be used, as intrinsic commands have a higher 
priority in the name search. 



- Get User Command Definitions 


This command clears the current set of user commands and reads in 
a new set from the indicated device. The device name is in the 
standard format, e.g., "C:", "D:HILBERT'', etc. 



- Put User Command Definitions - 
This command writes the current set of user commands to the indi- 
cated device. The device name is in the standard format, e.g., 
"C: B , "P:", "D: HILBERT", etc. 



THE TURTLE 


PAGE 15 



3.8 USER DEFINED COMMANDS & VARIABLES 

- Load ROM Resident Command Definitions - 
This command clears the current set of user commands and reads 
a new set from ROM. The character following the command indi- 
cates which of several sets to load. See Appendix G for a list 
of command sets and their content. 



- Run ROM Resident Command - 
This command performs all of the functions of the LOAD command 
described above, and in addition, executes one of the commands 
loaded. See Appendix G for more information. 


- Clear User Variables 


Removes all user variables from memory 



- Define User Variable 


= # <name^ 


Creates a definition in memory whereby the current value of the 


turtle accumulator is assigned to the indicated <^name^> . Any 
character may be used as a ^name^. See section 3.6 for the 

use of variables. 




THE TURTLE 


PAGE 16 


3.9 RANDOM TEST 

- Random Test - 
Randomly executes either the ^then> or the ^else^* clause, 
using a hardware random bit generator. 



3.10 MODE CONTROL & OPTIONS 


- Edge Rule - 

CTRL-E 0 
CTRL-E 1 
CTRL-E 2 
CTRL-E 3 

- Speed Control 

CTRL -S 0 
CTRL -S 1 



Stop at edge; 

Wrap at edge; 
Reflect at edge ; 

★ 

Disappear at edge. 



Run full speed ; 

Single step (press CTRL-4 to step); 


CTRL-S 2*7 = Run with delays: 

2 = 30 commands/sec. 

3 = 15 commands/sec. 

» . 

7 22 1 command/ sec. 


power-up default 



THE TURTLE 


PAGE 17 


3.10 


MODE CONTROL & OPTIONS (continued) 


Operating Mode 


CTRL-M <number> 


CTRL-M 0 
CTRL-M 1 
CTRL-M 2 
CTRL-M 3 


Draw mode (full screen graphics) ; 

Debug mode (full screen text); 

Splitscreen with internal registers; 

Normal mode (Split screen with input echo only) 


DRAW MODE : In draw mode, the entire screen is dedicated to 
turtle graphics. Commands are executed as they are entered 
and the user is typing "blind" (the commands are executed, 
but there is no echoing of the command name to the screen). 

9 

DEBUG MODE : In debug mode, the entire screen is dedicated to 
text data. Commands to be executed must be entered using the 
RETURN KEY and line editing may be performed upon input com- 
mand lines. The screen shows the internal workings of the 
turtle and also shows all user defined variables and command 
definitions. 

SPLIT-DEBUG MODE : In split-debug mode, the upper portion of 
the screen is dedicated to turtle graphics and the lower por- 
tion contains four text lines. The first two text lines show 
the turtle registers as in debug mode and the other two text 
lines are for command entry. 


★ 


power-up default 



THE TURTLE 


PAGE 18 


NORMAL MODE : Normal mode is similar to split-debug except 
that the text portion of the screen is used solely for com- 
mand entry. When one complete command has been entered, the 

0 

cursor will move to the beginning of the next line (this may 
cause the text to scroll); when the command has finished the 
execution, the cursor will move to the beginning of the next 
line. 


DRAW MOPE SCREEN (MODE 0): 



Graphics data 


Turtle accepts inputs as typed without echoing them to the 
screen; no line editing is allowed. 



THE TURTLE 


PAGE 19 


r t 


D EBUG MODE SCREEN (MODE 1) 

Execution data 
User input line 
Previous command line 
User defined variables 

User defined commands 


(1) ACC = Turtle accumulator value 

NUMBER = Iteration counter value 

LEVEL = User defined command "call" level 
CHAR = Current (or last) executed command 
ERROR * Command error code (see Appendix B) 

(2) Turtle accepts inputs when ’’> " is present; ">" disappears 

while a correnand is executing. Input lines must be termin- 

. * 

ated by the RETURN key; line editing is allowed. 



r i 

L J 



THE TURTLE 


PAGE 20 


SPLIT-DEBUG MODE SCREEN (MODE 2) 


Graphics data 


Execution data 
User input line 

(1) See prior page for explanation. 

(2) Turtle accepts inputs when ">" is present; disappears 
while a command is executing. Commands are executed as 
input and no line editing is allowed. 




the turtle 


PAGE 21 


NORMAL MODE SCREEN (MODE 3) 



(1) Commands are scanned as input and no line editing is 
allowed. The cursor moves to the beginning of the 
line below the input line (or the input line srolls 
upward) when a command is accepted and does the same 
again when command execution is complete. 


- Display Mode 


CTRL-D <number> 


CTRL-D 0-7 = Map to O.S. display modes 

1-8, where higher numbers 
represent increasingly 
higher resolution display. 

The system defaults to CTRL-D 6 (Display Mode 7). 

This command acts as a pre-select; the mode change actually 


occurs at the next CTRL-M command. 


3.11 


NO-OPS 

Blank, underscore, and all unassigned keys are treated as no- 
operation codes. 




THE TURTLE 


PAGE 22 


4. EXAMPLES 

4.1 Set Acc = 0 

A- 


4.1 Set Acc 3 23 


A-23+ 


4.2 Set Acc = Acc * 2 


A+ 


4.3 Set Acc 3 Acc * 7 


A(6+) 


4.4 Set Acc 3 Acc / 7 


3 ZT( 7-Z+) 
(+Z-) 


4.5 Set pen color to 1 without altering Acc 


CA-+PJ 


4.6 Find upper right corner of screen 


=XE_(FX) 

(UNX2RXD) 


4.7 Recurse by number in Acc 


~ZT( -Z+) 

imm 



THE TURTLE 


PAGE 23 


4.8 Sierp inski Curve 

=IT(-I2FI3LG3LI2FI+)2R 

=G4F 

=Y(HNU44F2R44FRCCA-+P34(2FI)) 

# 

After these are defined, one sets the accumulator to the 
desired order and types "Y" to draw the curve. Again, "G" 
can be redefined to a smaller number of "F"s to draw the 
higher order "Y"s. For "DGOF," the accumulator can be 
set to 5. 

The Sierpinski curve is closed and consists of four iden- 
tical sides arranged in different directions and connected 
by a short line "2F." The sides are defined (recursively 
again) in the macro "I" and the closed curve itself is de- 
fined in the last part of the macro "Y," namely: "4(2FI)." 



Siftpinui curve of (A) order 1, and (II order ]. 



THE TURTLE 


PAGE 24 


4.9 Hilbert Curve 

=ZT(-VG2LZ2RGZG2LV+)2L 
* VT ( -Z2RGVG2L VZRGZ+ ) 2R 
=G4F 

=J(HNU44F2R44FC2RDZ) 

After these are defined, one sets the accumulator to the 

desired order and types "J" to draw the curve. "G" can 

% 

be redefined to a smaller number of "F"s to draw higher 
order curves. 



Milavrt ew«« •€ IM •«<•« 1. •"< l»l *t*mt S. 





THE TURTLE 


PAGE 25 



4.10 


Tr inary Tree Structure 


=G(-T( ++Z-AF2R3 ( G2R ) AFA+ ) ( +4R ) ) 
=ZT(2-Z+)_ 

= J ( CHNA-4+99 (4(G2R)A+) ) 


Type "J" to Start drawing; press the BREAK key to stop. 



4.11 Spirals 


=I(T( — 2(2LAF)Z) J 
=V(++2(2RAF) ) 
=0[#IY4RU2FD4RZ] 


To run: Set accumulator = 0. (Type "A-”). 

Set #1 to spiral iteration count. 

(Type M (n+=#I"}" — try n=13 first) 

Type “Q". 





THE TURTLE 


PAGE 26 


4.11 Spirals (continued) 



4.12 Super Spiral 

=Q (2RIT(LIT(LIT(LIT(LITZJJJJJ 
■I ( UFA-2L5TR( SR ) RTFD4R ) 

=Z (B2LY) — initiate backtrack 
*Y (2RJT (LJT(LJT(LJT(LJT5BJJJJJ 
=0 (ST(FY)I) 

To run: Put obstacles on screen. 

Type (HN9999Q) 

The command will produce a clockwise spiral figure which 
avoids all obstacles in its path. It is basically an edge 
follower with a backtrack algorithm which is invoked when 
there are no forward moves possible. 

4.13 Diagnonal Plaid 

(HR999(10F+P)] I 




THE TURTLE 


PAGE 27 


4.14 Random Pattern #1 

(100(8?R2F10F) ) 

4.15 Random Pattern #2 

9997RF 

4.16 Random Pattern #3 

100(8?2R_10?F_) 

4.17 A Koch Curve 

=ZT ( -ZG4L3 ( 2RGZG ) 3 ( GZG2L ) 4RGZ+) 

=G2F 

=J4(GZG2R) 

After those are defined, one sets the accumulator to the desired 
order and types "J" to draw the curve. "G" can be redefined to 
a smaller number of "F"s to draw higher order curves. 





THE TURTLE 


PA6E 28 


Ibert Curve (written in Pascal) 


PROGRAM HILBERT; 

VAR SIZE, DELTA , N : INTEGER ; 

ORDER: INTEGER; 

PROCEDURE HIL(I: INTEGER); 

VAR A, B: INTEGER; 

PROCEDURE HIL1; 

BEGIN 

TURN(A); HILC-B); TURN(A), 

end chili*); 

PROCEDURE HIL2; 

BEGIN 

MOVE(SI2E); 

HILCB) ; rtiou^ 

TURN(-A) ; MOVE(SIZE); TURN(-A), 

. HILCB) ; 

MOVE(SIZE); 

END CHIL2*); 

BEGIN CHIL*) 

IF 1=0 THEN TURN (180) 

ELSE 

BEGIN 

IF I>0 THEN 
BEGIN 

A:=90; B: =1-1 J 
END 
ELSE 
BEGIN 

A: =-90; B:*If1; 

END; 

HIL1 ; HIL2; HIL1; 

END; 

END CHIL*); 

BEGIN (‘MAIN PROGRAM*); 

WRITECSIZE: ’); n FFN* 1 

READLN(SIZE); CENTER SIZE FOR JOUR SCREEN 

WRITEC 'ORDER: ') ; READLN (ORDER ) , 

PENCOLOR(NONE); 

N:=0RDER-1; 

DELTA: =SIZE; 

BEGIN N C COMPUTE STARTING CX.Y) POSITION *) 
DELTA :=DELTA*2; 

N:=N-1; 

END; 

HOVETOC-DELTA , -DELTA ) ; 

PENCOLOR(WHITE); 

HIL(ORDER); 

END. 


L A 


VHE TURTLE 


PAGE 29 


APPENOIX A - LIST OF COMMANDS 


Command 

Character 


Command Syntax 
A<tommand> 


E^thenXel se> 


T^then><else)> 


(blank^ <blank> 


#<v ar i ab 1 e^omman c 
$<^selec£Ktheri)<£ls 
%<se1ect^ 
i^select^ 

(<£ommand;>. . . . ) 


Command Semantics 
Iterate command by value of ACC 
Beep 

Clear screen 
Pen down 

Tests for turtle at screen edge 
Turtle forward one unit 
Turtle to home position 
Rotate turtle left 45° 

Point turtle north 

Value in ACC is pen color select 

Rotate turtle right 45° 

Color select in front of turtle to ACC 
Test ACC for non-zero 
Pen up 

Wait for next 30 HZ CLOCK TICK 
No-op 

Stop innermost iteration 

Iterate command by value of variabl 

Test selected joystick position 

Read selected pot controller to ACC 

Value in ACC goes to selected color 
register 

Binds command as a unit 


Paragraph 


L A 


9 


Set ACC to zero 

Sense orientation to ACC 


THE TURTLE 


PAGE 30 


Command 

Character 


APPENDIX A - LIST OF COMMANDS 

(continued) 


^number^ 


Command Syntax 


Viumber^command^ 
= <n ame)<comman d^ 
* # <name^ 

? <then><else,> 
£<command >. . . J 


( mode.> 

< rule> 
"^device^" 
^name^ 
^mode^ 
"<device^" 
(name^ 
<option> 
<option> 


Command Semantics 


Paragraph 


ACC 3 ACC + 1 
ACC 3 ACC - 1 

Iterates <fcommand)> by value of ^numbei^ 
Defines user command 

Defines user variable 3 ACC value 
Random test 

Same as () except ACC saved & restored 
No-op 

Increment current iteration count 
Audio select 

Clear (remove) all user variables 

o 

Select display mode 
Select edge rule 

Get user definitions from device 
Load user definitions from ROM 
Select operating mode 
Put user definitions to device 
Load it run user command from ROM 
Command execution speed select 
Select turtle representation 


THE TURTLE 


PAGE 31 


APPENDIX B - ERROR STATUS CODES 

A - Operator Abort (BREAK key) 

D - Device name error 

F - User command definition area full 

I - Systems I/O error 

L - Load/Run argument undefined 

N - Nesting error (unmatched right bracket) 

0 - Overlength command line input 

P - Incomplete (partial) line input 

R - Reserved name for user command 

S - Stack overflow 

U - Undefined user variable name used 


THE TURTLE 


PAGE 32 


APPENDIX D - PEN SELECTS (BY SCREEN MODE) 


Mode 

Pen Range 

Color Registers Used 

0 

0 - 127 

- 

1 

0 - 127 


2 

0-3 

0 = background 

1 = PFO 

2 = PF1 

3 = PF2 

3 

0 - 1 

j 0 = background 

1 = PFO 

4 

0-3 

i 

\ 

0 = background 

1 = PFO 

2 = PF1 

3 = PF2 

5 

0-1 

0 = background 

1 = PFO 

6 

0-3 

0 = background 

1 = PFO 

2 .= PF1 

3 = PF2 

7 

0-1 

0 = PF2 

1 PFl (luminescence only) 


60 = PFO 

61 = PF1 

62 = PF2 

63 = PF3 

(&4 = background — someday) 












THE TURTLE 


PAGE 33 


APPENDIX E - COLOR REGISTER VALUES 


Range 
0-15 
16 - 31 
32 - 47 
48 - 63 
64 - 79 
80 - 95 
96 - HI 
112 - 127 
128 - 143 
144 - 159 
160 - 175 
176 - 191 
192 - 207 
208 - 223 
224 - 239 
240 - 255 


Mid-Bright 

8 

24 

40 

56 

72 

88 

104 

120 

136 

152 

168 

184 

200 

216 

232 

248 


Color 


THE TURTLE 


PAGE 34 


APPENDIX F - JOYSTICK TRIGGER TESTS 


Select 

Code 


Direction* 

Trigger 


Device 


A 

B 

C 

D 


B 


JOYSTICK 

JOYSTICK 

JOYSTICK 

JOYSTICK 


E 

F 

G 

H 


F 

R 

B 

L 


JOYSTICK 

JOYSTICK 

JOYSTICK 

JOYSTICK 


I 

J 

K 

L 


F 

R 

B 

L 


JOYSTICK 

JOYSTICK 

JOYSTICK 

JOYSTICK 


M 

N 

0 

P 


F 

R 

B 

L 


JOYSTICK 

JOYSTICK 

JOYSTICK 

JOYSTICK 


Q 

R 

S 

T 


T 

T 

T 

T 


POT 

POT 

POT 

POT 



Select 

Code 

U 

V 
W 
X 

Y 
Z 

C 

\ 

* 

F = 
R = 
B = 
L = 
T s 


Direction 

Trigger 

T 

T 

T 

T 

T 

T 

T 

T 

Forward 

Right 

Backward 

Left 

Trigger 


Device 
POT 4 
POT 5 
POT 6 
POT 7 

JOYSTICK 0 
JOYSTICK 1 
JOYSTICK 2 
JOYSTICK 3 







THE TURTLE 


PAGE 35 


APPENDIX G - ROM RESIDENT USER COMMANDS 


(See p . 1 5) 


Load/Run 

Name 



Content 


SIERPINSKI CURVE 
HILBERT CURVE 


Runs 


Reference 


= TRIMARY TREE 
= SIMPLE SPIRAL 


K = SUPER SPIRAL 


Y = DRAW (CARTESIAN) 
J = DRAW (POLAR) 


Y = WALL BANGER 

X- F-.. • - 



= HOLLYWOOD SQUARES 


= KOCH CURVE 


= THE ZAPPER 


= DRAW 


= POSIES 


* SUPERTURTLE 


COLORPOWER 


See 4.8, 4.9 


See 4.10, 
4.11 


See 4.12 



See 4.17 



FROM 

"ATARI 

WSFN" 

MANUAL 


Y - 


f-. c r - 



THE TURTLE 


PAGE 36 


APPENDIX H - AUDIO SELECT OPTIONS 

0 - audio off 

A - LSB of horizontal position") re]ative t0 upper 1eft corne r 
B - LSB of vertical position ) 

C - MSB of software stack pointer 

0 - Pot controller 0 
E _ Pot controller 1 

F - value in CHAR (current command) 

G - (internal) - TEMP 
H - (internal) - TEMP + 1 

1 - (internal) - COUNT 

J - hardware stack pointer 

K - MSB of horizontal position) 

s. relative to screen center 

L - MSB of vertical position J 
M - LSB of software stack pointer 
N - (internal) - INPT +2 
0 - LSB of turtle accumulator 


ATARI 

WSFN 



AN INTRODUCTION.... 



ATARI wsfn introductory manual 

Prepared by: Gregory Yob 

PREFACE (General remarks that are unlikely to appear in the final 

version of this manua •; 

ATARI WSFN is subject to changes which may require ^ nges 
W this manual- for example, the representation of the 

turtle might change- 

, . a fh a t the user is familiar with the ATARI 

21 kUar”Tnd k^wTo manipulate the SHiFT and CTRL 

keys. 

3) Entry of key, -ill he as typed with these exceptions: 

Letter ^ means CTRL~Letter 
Letter s means SHIFT-Letter 

- I-, m c ?T c 1HCN is equivalent to: 

For example, n Inuf1 M 

rToi -m ? CTRL-T 1 H C N 


WHAT 1 S WSFN 7777 

• a Win i h a house out of toothpicks? Or 
to ban V out°a battleship with a teaspoon? That's the situation 
that the first computer hobbyists were faced with 

_ . . , H _ n Q i d davs" of personal computers, you would buy 

Back , n the old days o a soldering j ron , a lot of 

some kits t h F° u 9 h 'he U ,„d up with your very own 

^“'co^ t was only half the story - £ 

; T s7S! r ffl , OT^t'£ — 

ATAR _____ and Jt would sit there and do nothing 

vour computer on ana it wuu 


n _ inside every computer is the electronic equivalent of a. 

• u u it, a nH P ra?ed others, you can draw letters - and then 
«55.»l k ; "«!.«" «“«"U y |. takes hundreds of little spuares 

to write a short sentence 


When a computer Is turned on f it looks at its memory (that s 
the blackboard), and the pattern of ones and zeroes (white or black 
squares) contains the instructions that tell it to do something. Sfn 
It is easier and cheaper to build computers that recognize binary 
patterns" that to make computers that understand English sentences, 
the computer's memory will look very strange to you and me. 

Now, back in the "old days", the people with big computers had 
already solved this problem - patterns of ones and zeroes were made 
which let humans use typewriters and English-like sentences to tell 
the computer what to do. (This is called programming.) But!! The 
poor fellow with his personal computer didn't have these computer 
languages - and his personal computer's memory was very small. In 
fact, the memory was too small to hold the languages that big 

computers were used to. 





Computer hobbyists soon got tired of flipping switches 
thousands of times to make their programs - so "tiny" languages 
were invented. A tiny language couldn't do as much as the . 
languages on big comuters, but you can still do a lot more in 
a tiny language, and do it a lot faster, than making up the 

ones and zeroes by hand. 


In 1977, Lichen Wang, who had already made a Tiny BASIC, 
decided to make a tiny language for controlling robots with his 
computer. When he shared it with his friends, they started to 
call it different things ~ since Lichen hadn't given the language 
a name. When Lichen was asked what to call the language, he 
said: "If everything has to have an acronym, I would rather 
call it WSFN (Which Stands For Nothing)." 

When Lichen had WSFN ready, he didn't have a robot - but 
he did have a TV set, and WSFN could be made to draw pictures 
with the Turtle. (You can think of the Turtle as a video robot 
if you want to.) Well, lets plug in our ATARI LOO 
put in the WSFN cartridge, and see what turtles cai 



v i aeo ruou u 

(or ATARI 800) , 

j - 





2 


THE TURTLE 


Getting Started 

Plug in the WSFN cartridge, and turn on the TV and your ATARI 
400 (or ATARI 800) . The TV should look like this: 




WSFN when the power is turned on. 

The top part of the screen will be black, with a bright dot in 
the center. The bottom part will be light blue, with a bright square 

near the left side. 

The top half is the world of the turtle, and here is where pictures 
can be made. To draw pictures, you must enter commands with the keyboard, 
and the blue area will show your last entry and the line you are entering 
(Nothing is shown when you start since nothing has been entered.; 

How to See the Turtle 

When WSFN starts up, the turtle is the bright dot - which doesn't 
look like a turtle! To see a better turtle, enter on the keyboard: 


CTRL-T 2 


Press the CTRL key, and while it is down, press the T key. Then press 
the 2 key (after releasing the CTRL key.) 


NOTE: Instead of spelling SHIFT or CTRL for keystrokes, we 
use s or c like this: M s V c - these mean SHIFT-M and CTRL-V. 
turtle command shown above becomes T 2 . 


wi 1 1 
The 


3 


Now the screen will look like this: 



Turtle 


You entered T c 2 


Making the Turtle appear. 

The little animal on (the screen is the turtle. If you look in the 
blue area, you will see a • 2. The T c is a graphics character,®, so 
this represents the command you just typed in. 

(If you have used a computer before, an unusual thing is going on 
here: WSFN DOES A COMMAND AS SOON AS IT RECOGNIZES IT. You don't have 
to press RETURN - WSFN is awares of what you type in as each key is 
pressed. ) 




The pen i s up 


- 5 - 






% 



Sometimes the turtle might walk off the paper - and you'll have to 
pick him up and put him back in the middle, if you want, you can tell 
the turtle to point towards the living room window 


And, of course, when a drawing 
clean sheet of paper on the floor. 


is finished, it's time to put a 


The WSFN turtle can do all of these things. The commands are: 


U - UP 
0 - DOWN 
F - FORWARD 
R - RIGHT 
L - LEFT 
H - HOME 
N - NORTH 
C - CLEAR 

Using the WSFN Turt 


Lift the pen off the floor. 

Put the pen on the floor. 

Move one step forward. 

Turn right one half-turn. 

Turn left one half-turn. 

Put the turtle in the middle of the screen. 
Point the turtle North (up on the screen). 
Clear the screen. 

1 e 


Press the F key (FORWARD) a few times - if you do it enough, 
the turtle will move upward and a line appears beneath him: 




(Here you entered FFFFFFFFFFFFFFF. ) 

If you hold the F key down for a while, the ATARI will repeat 
the key (with beeps for each repeat.). The turtle will travel up the 

screen and disappear off the top edge. 


7 




The Turtle walked off the top of the screen 


To get him back, use H (HOME) - and the turtle will reappear in 
the center again. 


(Each time you press a turtle 
This leaves only one letter as the 
area on the screen.) 


command key, WSFN does 
last command shown in 


it immediatel 
the bottom 



Now press R (RIGHT). The turtle will rotate a half-turn to the 
right. If you hold R down, the turtle will spin like a top! (Try it 
and see.) 


Pressing L (LEFT) turns the turtle to the left by a half-turn. 

Here is a challenge for you: See if you can draw the picture shown 
be Vow : 




/ 



8 








(When the turtle goes into the blue area, the turtle is visible, 
but the line it draws isn't shown.) 

To erase the screen, press C (CLEAR). The picture goes away, 
with the turtle remaining where it was before. Clear the screen and 
see If you can draw this picture: 


r 




Another challenge for the drawing expert 
and a small mystery. 


9 



How did the turtle get awey fro. the dr awing wi 

Simple! He lifted his pen up - 'J ^^f you can do the drawing and 
be moved without making a line. Now see y 

leave the turtle In the spot shown. 


meet in the center » 
i t 1 s easy. Counting 


(Hint- If you have a hard time making the lines 
just count the number of F's you entered - and then 
is very important in WSFN.) 

TO make the turtle draw again, us. D (DOWN), and the pen wi 1 1 now 
make a line on the screen. 

hake the turtle spin around by holding down the R key. Then press 
N (NORTH) and see what happens. Try this several times. 


So me Optional Ex ercises^ 

try the so 

5«1 free to skip them if you want to go on. 

know'how^any^* f oo t s t eps"^* i gh^ and^w i de Screen is. 

. . it in by walking 

2) Draw a square 15 steps on a side, and fill Y 

around inside in a spiral. 


3 ) Draw this figure: 



Spend some time making pictures with the turtle, and then go 
on with the next section. 


10 


getting fancier 

Suppose you wanted to draw a ct ?*f *^ 3 ^ * j' t wi WVake a^ot 
draw it one step at a time by pressing F d L , 1# look at 

of effortl WSFN has several ways to save etrort 

a few of these. 

Repet i t i on 

, . < „ anv WSFN command, WSFN will repeat 

If you enter a nu f er jj*a° r ® h * screen, home the turtle, po.nt 
the command. For example, clear the sere , 

north, and enter: 

25F 

The turtle will move 25 un its ^°^rd^ to do nothing, 

andTfHyo^enterls'blank) , WSFN will do nothing - 25 times!) 


Making a square is easy! Try entering: 


HCN25F2R25F2R25F2R25F 


If you did that right, you wi 


ill 



To twirl the turtle, enter: 


9999R 

(NOTE: 9999 is the largest 
a bigger number, WSFN will 

repet i t i on va 1 ue • ) 


number that WSFN understands, 
take the four rightmost digits 


| f you en tsr 
as the 



Parenthes i s 


When you drew the square, did you notice that a square could be 
made by repeating this command four times? 


four of: 25F2R 

In WSFN, groups of commands can be put inside pairs of parenthesis 
and then repeated just like one command. Let's draw that square again: 

HCN (set up the screen) 

4(25F2R) (make the square) 

If you look carefully at the screen, the turtle is now pointed 
up instead of pointing to the left. Why7 (Hint: The first time you 
made the square, was there a 2R at the end?) 


The blue area has another surprise - the entire sequence was 
entered, and then WSFN did the command. WSFN didn't do each step as 
you typed them in. 

When you enter a parenthesis, WSFN will wait until you enter the 
other parenthesis before doing the command. When you are doing a long 
set of commands, a parenthesis will let you see the entire line before 
WSFN executes it - if you make a mistake, the BACK S key can be used 
to erase letters. Let's try an example: 

(The object is to make a rectangle 20 units high and 10 units 
wide.) 


I 

<JV»W • 


HCN 


( 20 F 2 R 1 0F2R20F3R1 OF oops! you want 2R last time 

enter 5 BACK-S , and then enter: 

2R10F) 



(As an exercise, take a look at the picture that would result if 
you didn't correct the error - that's a mighty strange rectangle!) 



Nesting Parenthes ? s 



« 


c 


Pairs of parenthesis can be used to build bigger and better 
commands out of smaller ones. WSFN will wait until all the 
parenthesis are "balanced" - that is, the number of 1 matches 
the number of (. For example, try: 

((((((((( (20F) ))))))))) 

The 20F won't be done until the last ) is entered. 

Here is a nicer kind of square: 

8 (A (20F2R) R) 

Once this picture is on your screen (You have to actually do 
this one - we won't put the picture in this manual!), let's seeTf 
it can be figured. out. 

The way to understand lines with parenthesis is to work from the 
inside out, starting with the innermost pair. In this case, this is: 

(20F2R) 

This draws one side of a square, and turns the turtle 90° to the 
right. Now lets build up the next layer: 

4 (20F2R) R 

The first part draws the four sides of the square. Then the turtle 
is turned once to the right. This means that the next time a square is 
drawn, it will be tilted diagonally. 

Now, the entire thing is done eight times: 

8(A(20F2R)R) 

If you trace this out by hand, the turtle ends up at the Home 
spot after each square - but the turtle is turned once to the right 
each time. When the square was drawn the first time, the home spot 
is the lower left corner 

WSFN tends to draw its pictures rather rapidly - to see how a 
picture is constructed maeans you have to slow WSFN down in some 
manner. The W command tells WSFN to wait for 1/30 second. Let's 
add this to the fancy square and see how the square is made: 

8 (A U0F2R30V)R) 

After each side of a square is drawn, the turtle waits for one 
second - and it's much easier to see how the picture is made! 



“'.k S“- 

parenthesis (like we did with the fancy square). 


8(3(10FR)R) 

8(8(5FR)20FR) 

8(8(5FR)20FL) 

8(6(5FR)R) 

8(7(5FR)R) 


(stained glass window) 

(super eight) ... i\ 

(different for such a small change.; 


You 
a really 


can see that small change, can make big differences! Here Is 
Iona line to try: 


8(8(8(6(5FR) 1 OFL) 1 5FR) 20 FL) 


Tru f: r st few of these to see how complicated shapes can 

be maK li SU «I. It is Hui te di f f i cui t to type a lo 

these in correctly, so feel free to quit when you get frustratea 

Th- series of entries shown below shows how to construct 
The ser es , an( j then adding more and more 

a checkerboard by making a square * t" Vrocess some mistakes (which 

until a checkerboara is a ar - a nd then they will 

computer programmers call b g ) ... nictures of your own, 
be fixed. If you try to make complicated pictures or your 

you will ma ke mistakes too. 

The new parts of each entry will be underlined. 




1 ) 4(8F2R) 

2) (4 (8F2R) 8 F) 


This draws a square 

Once a square is made, move the 
turtle to start a new square. 


3 ) 8(4(8F2R)8F) Do eight squares in a row 


4) (HCN40F4R8 (4(8F2R)8F))_ 

The eight squares ran off the top of 
the screen, so put the turtle near the 
top and point him downward. Then do the 

row of squares. 


5) (hCN40F4r8(4(8F2R)8F)2RT6F2R64£.) 

After doing a row of squares, put the 
turtle in position to start a new row 



(HCN40F2R32F2R8(4 (8F2R) 8 F) 2R1 6F2R64F) 


Just putting the 
right to center 
screen . 


turtle over to the 
the checkerboard on the 


7) (iHCNUA0F2R32F2R0)_8(i,(8F2R)8F)_(U2R16 F 2R6AFD)) 


When the turtle Is being put into position, 
it shouldn't draw a line. The pen is lifted 
before a move and put down afterward. The 
new parenthesis separate the positioning 
moves from the square drawing and help make 
the entry easier to read. 


(Note: If you have got this far, your entry will appear on two 
lines of the screen's lower area. WSFN can accept up to 
character lines.) 

8) ( (HCNU40F2R32F2RD) 8_(8 (4 (8F2R) 8F) (U2R16F2R64FD ) }) 

To make a checkerboard , just repeat the 
row of squares and the move to the next 
row eight times - but it doesn't work! 
(When a row is started, the turtle must 
point down , and we left it pointing up. ) 

9) ((HCNU40F2R32F2RD)8(8(4(8F2R)8F) (U2R!6F2R64f4RD) ) ) 

With the turtle's direction fixed, we 
get a checkerboard , but with the rows 
too far apart - a new row starts 8 steps 
to the left instead of 16. Let's fix 
this and try again. 

1 0) ( (HCNU40F2R32F2RD) 8(8 (4 (8F2R) 8F) (U2R8F2R64F4RD) ) ) 

Wow! It works this time!!!! 


MAKING YOMR OWN COMMANOS 


Each time you want to draw a wM P ctu ^ Jquar „ 

the commands for the turtle for example, 
means you have to repeat: 


4(12F2R) 


(draw the square) 

(move the turtle to the next spot) 


0 f or each time the square is drawn. A design with 
f ofTquares could take a ,lot of typing 

- and it will remember the 

WSFN lets you make turned on (or until you change 

command as long as the AT ' a "Square" command: 

the command's meaning). Here s how to 

«*S4(12F2R) 

: <- he i nq named. The name of 

tne c^/n'Crnd'S: the command is *(.«*> 

draws a square. 


Drawing the square is easy now - just enter: 


*S 


and the square appears. You can 
other WSFN lines - for example. 


also put your new conmand into 


8(*SR) 

4(8(*SR)24F2R) 

,f yo u have been doinp the examples, you surely have en 
this one a lot: 


tered 


HGN 


Why 


not make it a cotmiand as we 
-*C (HCN) 


- *c , for example: 


include commands that^you lnto a command: 

commands • Lst. s 

(*C4 (8(*SR) 2kf2R) ) 


You can ms». desi9 „ and turn 


Now by pressing 


just two keys, a complete pic 


t u r e is dr awn ! 


(Notes: 1) WSFN uses the * to tell if a command Is already In 
he canned commands that It already knows or if you invented it. 

' An invented command will end in the same way a normal WSFN conmand 
does - for example, if you want *Z to mean 4F3R, you should put some 
parenthesis around it like this: -*Z(4F3R) If you don't, WSFN will 
think that *Z means 4F. 3) WSFN doesn't actually do the command 
until you tell it to - the - is a command to record new commands. 

Use the command (such as *S or *Z) to make WSFN perform.) 

A Command That La sts Forever (Al most) 

Let's make *Q a command with its own name included (This should 
drive WSFN nuts!) : 

=*Q(*SR4F*Q) 


The turtle draws the design below, and then does it over, and over 
over, and 


I 

t 



and 


The command *Q tells WSFN to draw the square *S , move the turtle 
and turn it a Metis , and then, do *Q again! This is called an 
infinite loop - the same thing gets done forever.. •• 




(Note: Actually, WSFN will do * 0 . for several minutes, and then, 
auit. The reasons for this are beyond the scope of this manual. It is 
possible to make true infinite loops in WSFN - again, using features 

that aren't covered here.) 

To make WSFN stop, press the BREAK key - BREAK will always stop 
WSFN no matter what it is doing. 

Enter *Q. again, and while it Is going, press the R or L keys 
now and then - the figure will move around. WSFN will stop in t e 
middle of a command to do one that you just typed in (in this case, 

R or L) , and then continue doing the old command. 

Looking at Your Commands 

Now that we have several new commands, how do we look at them 
if changes are needed. Just enter: 

M C] (That's CTRL-M and l) 


The screen will change to: 



The Debug Mode Screen 



This is called the "debugging mode". The four lines in the 
middle are the four commands you entered. 

If you want to change a command, you can either type it in 
again, or use the cursor movements £ screen editor to change the 
command 1 s line directly. (This manual assumes that you know how 
to use the screen editor.) 

There is one big difference in debugging mode - to make WSFN 
do a line, you must press the RETURN key. 

To leave debugging mode, enter: 

M c 3 RETURN (CTRL-M, 3, and press RETURN) 

(Note: WSFN's debugging mode has many features which won't be 
discussed in this manual. For the present, just use debugging mode 
to see your library of special commands, and to make changes to your 

special commands.) 


19 


THE ACCUMULATOR 


WSFN has an "accumu 1 ator JI - which is a counter which can be 
used to keep track of what you are doing. For exampl Cf suppose 
you want to draw a spiral square like this: 



Each side of the square is one step 
If you try to do this with the WSFN 
and harder to do: 

(3F2R) 

((3F2R)F(3F2R)) 

»*S(3F2R) 


larger than the previous one. 
you already know, it gets harde 

(one side done) 

(two sides done) 

(make a side a special 
command) 

(once around) 


(*SF*S2F*S3F*S4F) 


etc 

The accumulator can be used to solve this problem. In WSFN, 
the commands: 

+ adds one to the accumulator. 

- subtracts one from the accumulator. 

A repeats the next command as many times as indicated 
by the number in the accumulator. 

Let's see how this works in practice. Starting with the turtle 
at home, and pointing north, enter: 

-H-H+-H-H-+ (press + ten times) 

AF 

The turtle will move up 10 steps - that's the number in the 
accumulator. If you repeat: 


the turtle will move another 10 steps forward. 

Try entering several and then the AF. Now the turtle will 
move a shorter distance. If you press - enough times, the accumulator 
will have a zero in iit. Now the turtle won’t move at all. 

The smallest number in the accumulator is zero (and the largest 
is 9999). If you enter too many the accumulator will just stay 
20 i*o. Try pressing • 15 times, and then AF — the turtle stays 

still. 


The commands + and • can be repeated 1 ike any others. For example, 

15+ adds 15 to the accumulator 

23- subtracts 23 from the accumulator 

If you use A to tell how many + or - to use, you will get: 

A- sets the accumulator to zero 

A+ doubles the number in the accumulator 

(Be sure you understand the A+ and A". A- is used a lot to "make 
things ready" - it is easy to enter a command which leaves some junk 
in the accumulator — and when you try the command again , WSFN will 
do something different! (and usually not very nice).) 

If you want to see what's in the accumulator, go into debug mode 
and play a bit with the + and - commands. The accumulator is shown 

in the line that says: 

ACO0000 

in the upper left corner. + and -will change this value, for example, 

* » t- M -++ RETURN 

will make the accumulator look like this: 

ACC=0007 

(Note: M C 1 gets you into debug mode, and M c 3 gets you out.) 

Now, back to the square spiral - each side is one unit longer 
than the previous one, so: 

will draw a side A units long, and add one to 
the accumulator. 


(AF2R+) 


Here Is the spiral : 

HCNA-40 (AF2R+) 

HCN sets up the screen. A- removes any leftover Junk, and 40(AF2R+) 
draws 40 sides to the spiral. 

To fill up the screen, enter: 

120(AF2R+) 

Note that the spiral continues from where it stopped before - we didn't 
zero the accumulator or home the turtle! 


Just for fun, try these variations on spirals - and see if you 
understand what they do. (The really serious student is asked to 
visualize the picture before trying them out.) 

Squares : 

40(4(AFRR)+) 

40((4(AFRR))+) 

40 ( (4 (AFRR) )++) 

4o ( (4 (afrr) )++rr) 

It is useful to define this command to set up the screen between 
pictures : 


=*R(HCNA-) 

Octagons : 

40( (8(AFR) )+) 
40 (AFR+) 

40(7 (AFR)+) 

40 (6 (AFR)+R) 


Remember that you can insert some delay if you put a 30W inside the 
innermost parenthesis, for example, 


40(4(AFRR30V)+) 


Single Step Mode 


Sometimes WSFN will do things much too fast 
have a closer look at what's happening. (If you 
skip this part until later.) 


, and you will need to 
are just learning WSFN, 


There are two commands that can help you look more closely 


M c 2 


This puts the upper part of the debug mode disp * 
into the blue area - If you try some of the previous 
examples, you can see the value of the accumulator 

change. The line called: 


CHAR«_ 

displays the current character that WSFN is looking at 


If you enter M c 3 you will return to the usual mode. 

(If you want a screen without any blue area, use M fr . ) 

This is single-step mode. WSFN will do one action each 
time you press CTRL-k. For example, enter: 

10 + (get into debug mode first) 

and the accumulator will increment by one each time you 
press 4 C . 

gc (^35 some other options also: 


S c 0 

S c 7 


returns WSFN to normal speed 

makes WSFN do about 1 action per 
second. 


When you are in 
more slowly - it has 
and this takes some 


either debug mode (M c 2 or M C 1), WSFN will run 
the job of writing the debug data on the screen, 

time to do. 


Try some of the simpler examples 
with these new commands • and you will 
understand complicated commands. 


that you al ready understand 
see how they can help you 


2 3 


TESTING AND DECISIONS 


VSFN has several commands which will select between two 
commands. For example, if the accumulator is zero, one command 
will be performed. If the accumulator isn't zero, the other 
command will be done. These commands are known as tests, and 
they al 1 look like: 

(test something) (if the result is true, do this one) 

(if the result is false, do this one instead) 

The test for the accumulator looks like this: 

T(10F) ( 1 OR) 

If the accumulator isn't zero, the first action (10F) is chosen. If 
the -accumulator is zero, the second action (10R) is done instead. 

In both cases, the action that isn't chosen is ignored. 

Let's look at some of these in more detail: 

The Random Test ( ? ) 

The command ? wi 1 1 select one of the two commands following it 
with 1:1 odds (You can think of WSFN flipping a coin - if the coin 
is heads, the first command is done, and if it is tails, the second 
command is done.) 

Try the following entry on your ATARI - do i t several times. 
Each time you enter this command, the turtle either moves forward 
5 units or turns to the right: 

?5FR (Remember that T c 2 sets up your turtle.) 

Repeating this can make some nice squiggles: 

100075FR 

Note: If you can't get the ? to work, remember that ? is a shifted 
character - you must press SHIFT to get a ?. 

Parenthesis can be used to build more complicated tests: 

100? (U5?5FR) (D8(5FR) ) 

Try it out, and then let's analyze what this expression does. 
First, there is 100 repetitions of the expression: 


7TU575FR) (D8(5FR) ) 

The first action is USTSFR which is selected i of the t i«e. Th 1 » 
lifts the pen, and moves the turtle randomly f.ve times. ( 
previous examples with the pen up.) 

The other action is D8(5FR) which draws an octagon on the screen 

Here are a few other random patterns to play with: 

100?(10F7RL) (8 (3FL) 2R) 

100? (H2075F7RL) (2R8(2FR)2L) 

100? (H2075F7RL) (10? (2R8 (AFU) 2L) 12F) 


The Accumulator Test ( T ) 

The command T checks the accumulator. If the accumulator is 
not zero , ° the first action after the T is performed. If the 
accumulator is zero, the second action takes place. 

Bv setting the accumulator, you can make your conwands more 
respond ive^" 1 they can check the accumulator and select different 

actions if the accumulator is zero. 

Here is an example: 

»*ET (20F2R) (4 (5F2R) ) 

HCNA- 

Entering *E will draw a small square (That's the M5F2R) when 
the accumulator is zero.) 

If you do a *E now moves the turtle 10 units and turns it 
right - doing this four times makes a larger square. 


Counting the nunber in the accumulator can be handy 
see what can be done with spirals: 


- let's 


:*$T(AF2R-*S) (sp) 


(sp means SPACE) 


if something is In the accumu I. .tor, , *! rt S" or 

is zero. 

Try setting the accumulator to different values and see the 
spirals that can be drawn. 


25 


If you want to check If the accumulator is larger than 32, 


use: 


32-T (etc) 

First, subtract 32, and then test the accumulator. 


The Use of Brackets 

If you enclose some WSFN commands in brackets [ ], an 
interesting thing happens - the accumulator is saved, and 
no matter what you do to the accumulator inside the brackets, 
it will be restored to its old value when you come outside. 

The brackets also work like parenthesis for grouping commands 
together. 

Here is an example • we will move the turtle forward by 
the number in the accumulator, draw the spiral with *S , turn right, 
subtract 5 from the accumulator, and repeat until the accumulator 
is empty. 

If we used parenthesis around *S , only one spiral would be 
drawn - why? - the command *S leaves the accumulator at zero. 

The cure is to put brackets around *S which preserves the accumulate 
while *S is performed. Let's try it: 

(be sure *S is already entered) 

-*QT(AF[*S]2R5-*Q) (sp) 

To try this out, enter: 

HCNA-30+*Q 

It's fun to try different values of the accumulator and see what 
does . 


Some Last Optional Exercises 

1) Change *S to some of the other spirals and octagons 
in the section on the accumulator. 

2) Change *Q, to move about randomly, and then to set the 
accumulator at random (from 2 to 20) and call *S - and do 
this 20 times. 

3) Look at the optional exercises that draw a checkerboard. 
Break the expressions down into several * commands which 

A) draw the square, B) move the square one unit, C) draws 
a row of squares, D) moves to the next row, and E) does 
the entire board. Notice how much easier it is to check 
each part and to fix bugs (mistakes that you made, being 
a fallible human being). 


SOME FINAL COMMENTS 


Now that you have survived this introduction to WSFN, there's 
a lot more to cover. (Get the reference manual for details.) 

WSFN can: 


1 ) 

2 ) 

3 ) 

5 ) 

6 ) 

7 ) 

8 ) 

9 ) 

10 ) 
ID 
12 ) 


Check the joysticks position and triggers. 

Check the paddle pots and triggers. 

Make sounds - both beeps and via the TV set. 

Change the colors in the display. 

Check if the square in front of the turtle has been 
d rawn on . 

Save and load your commands from discs and tapes. 

Load "canned" commands from the cartridge ROM. 

Control repetition in several other ways. 

Represent the turtle - or make it go away in different 
ways . 

Control how the turtle treats the edge of the display. 
Save the accumulator in "variables" for later use. 
Report some errors in debug mode. 


SOME DEMONSTRATION PROGRAMS 


The following demonstrations illustrate some of the extra 
features in WSFN and are fun to play with. 


Please take care to see that you have entered them correctly - 
an error in entry usually means the program won't work. Each group 
is separate unless stated otherwise. 


The Zapper 

The Zapper illustrates the use of sound and color options 
in WSFN. Three procedures^_ s *A, *C, and *0 are required. 



Variations of the Zapper involve changes to *0: 

■*D(? (3R2F2L) (3L2F3L)) 

«*D[?7(AFR-) (L)] 

»*0(T(7(AF2R)FR-)sp] sp means SPACE 

Several of the shapes in the manual , such as the octagonal and square 
spirals, can be used. Enclose these procedures in square brackets (j 
to preserve the accumulator. 


2 7 - 


Some Joystick Exercises 


WSFN can look at the joysticks, 
possibilities. The joystick is to be 
most port in front.) 


and these examples show a few 
plugged into Port 0 (the left - 


Each of these joystick programs are started with *J 


Draw Program 

This makes the joystick like a turtle. UP moves the turtle 
forward, RIGHT turns the turtle R, LEFT turns the turtle L, and 
DOWN puts the turtle at home (H) . 

«*J(M C 0T C 21 (*K a )) , % . 

**K($ft(FB)sp$g(RB)sp$p(lB)sp$£(H5B)sp) 


Planting Posies 

»*J (M C 0T C 2HN1 (*KyO ) 

-*K(U$£Fsp$gRsp$5Lsp$C(D*PB)sp2V) 

-^8(8(3FR)3L6F) 

^Here, DOWN plants a "posie", and the other controls move 
the turtle around with the pen up. An alternate "posie is: 


% 



£p (8 (8 (3FRA«=AW) 3L6F2RA C 0) ) 


and each "posie" makes a sound! 


The Superturtle 

Since the WSFN turtle has only 8 directions, here is a 
"high resolution" turtle with 24 directions. The commands 
*F *R, and *L perform the Superturtle equivalents of F,R, and 
L ' *F will move the turtle about 4 units hor i zont i al ly/vert i cal 1 y 
and about 3 units diagonally. (Surely you have noticed that F 
on the diagonal is longer than F off the diagonal. -F tries to 

correct this distortion.) 


The Superturtle commands will not change the accumulator and 
can be substituted into other figures, (ie, change F to -F, etc.; 

qCj^Cjj w j j U p a high resolution display (2 colors only) 

in which Superturtle can be used nicely. 


-*U4F 

-*V (2FRFLF) 
-*W(FR2FLF) 
=*X(R3FL) 

=*Y (2RFL2FRF2L) 
(2R2FLFRF2L) 


*U to *Z draw in each Superturtle 
di rect ion . 



When the turtle is pointed North, 
the procedures *U to *Z will 
move as shown. The turtle 
remains pointed North* 

To move in the other 
directions involves 
using 2R or 2L to 
get into the next 
quadrant • 


Superturtle Directions 

The individual directions should be checked by homing the 
turtle and enter! ng 8 or 10 repetitions for each line. For 
example, H8*V to check *V. 

**Fj"A“#Z+T (-T (“T (-T (-T (-Tsp*Z) *Y) *X) *W) *V) *U] 

-*R[A-#Z+4-T(A— #Z2R) (#z++-#z) J 
-*L[A-#Z+T (— #Z) (5WZ2L) ] 

If the six' direction primitives are correct, this expression 
will d raw a n i ce c i rcl e • 


S 


£ 




y 


(Be sure Turtle is not on a diagonal.) 


rK^*U*V*W*X*Y*Z2R) 

^ Here are some pictures to do with Superturtle - most are 
variations of the same idea: 

24(H*R12*F) 

24(H4(*R3*F)3*L) - 

24(H12(*R*F)11*L) 

24(12*F11*R) 

(A"30 (24 (A*F*R)+*R) ) 

24(24 (*F*L) *R) 

3 (24 (24 (*F*L) *R) 3*F) 

4(6(H12(*L*F)+P1 1*R) ) 


Vi 


A x 

*'<? * 

C V 

V 


f* 


•s 

* 


The Superstick 


If you have the Superturtle entered, here is a superjoystick 
which does the Superturtle's version of the draw program. -J will 

get things going. ^ 

m 


Ispa2V^ 


«*J (HCNM c 0 1 ($pf Fsp$g*Rsp$0*Lsfe^.- r ,,--^ 
The Superstick can be "flown" quite nicely. 




N/ 


2 9 - 


Colorpower Machine 


Control of the color registers can create some nice effects. 
The procedures offered here permit the use of two joysticks to 
control the colors in a drawing. 


■*A(A-M++ 
■*8(A-#B++ 

■*C (A-M+- 

‘*0(A-#B+- 

! *E (a-#c++ 

'*F(A-#D++ 

'*G (A~irC+— : 

■ *H(A-#D+-=i?0s3) 


#AS1 ) 

#B&2) 

#A&1) 

«# D&0) / ' 

,#c ir 


Note: If WSFN had @1 mean load acc 
with color in color reg 1, these 
procedures Qould be much shorter, 
(ie, -*A(@1+61) .) 


A nice test figure is drawn by invoking *M: 

-*M(M c 0T c 0HCNA-»#A=#B-#C=#D*N) 

=*N8(3+P[32(8(AFR)+)]R) 

If you enter the joystick control, invoke *M and then *J , the 
joysticks will change the cilors. Opposite directions (UP - DOWN, 
RIGHT-LEFT) change a single color. 

=*J 1 ($A*Asp$8*Bsp$C*Csp$D*Dsp$E*Esp$F*Fsp$G*Gsp$H*Hsp3W/0 

The color control routines can make some nice effects by being 
included in other WSFN expressions. Change *N as follows, invoke with 
*M, and then try: (You might want to use M c 3 in *M instead) 


=»*N0 50?(+PH) (20(3F?RL))) 


1 (7 (7*A*B) (?*C*D)Wa) 

(A- 1 (A[*A]+A[*B]+A[*C]+A[*D] a ) ) 

1 (???7?77?*A*8*C*D*E*F*G*HspspspspA) 

1 (y\7 (7 (?*A*B) (?*C*D) ) (7 (7*E*F) (7*G*H) ) ) 
1 ( a 7 (.7 ( 1 6 *A) ( 1 6*8) ) (7 (1 6*C) (16*0)6W)) 


NOTES FOR DEMONSTRATIONS 

These brief notes will help explain how the various demonstrations 
operate and the special features used. 


The Zapper: *A sets up the screen in full graphic mode (M c 0) 

and turns on the sound (A C G) and zeroes the accumulator. It 
then repetitively calls *C. The caret increments the iteration 
counter. When this is inside a parenthesis preceded by 1 or 
more,-rthe result is a true infinite loop. The command P sets 
the turtle's pen color to the value in the accumulator - in 
WSFN, this is the b values selected by the 2 LS8 of the 
accumul ator . 


*c plays with the color registers 60, 61, 62, and &3« 

The 6 sets the indicated color register to the accumulator s 
value. Each color register may have a value from 0 to 255, 
the color selected will appear on any lines drawn with t 
corresponding pen selection (P) . *C then moves the turtle 
A units, invokes *0, and then invokes itself recursively. Whe 
the accumulator zeroes, the turtle is homed, and C is at 

finished. 

*0 is used to draw any convenient figure to embellish 
the plot. 

i„ Y «* ink. Exercises *J sets up the screen with a turtle and 
"repeatedly calls“K with the caret trick. 

tests each position of the joystick and then the 
turtle is moved appropriately (ie, FB, RB. «tc). The beep 
is included to provide feedback, and to slow things 
human speed. Home gives a longer beep. 

In the posies, *J is a little better with setup of the 
screen.. *K lifts the pen and moves the turtle - except wit 
the DOWN option which puts the pen down and draws the posie. 

The 2W is needed to slow things down. 

The first *P is clear enough. The second one turns the 
sound on, and then off. (A c followed with A-P makes some artifact 
sounds with the letter selecting the artifact. A 0 turns the 
sound off.- Try it with other WSFN drawings.) 


$ followed by a letter tests a joystick position and 
does the first command if the joystick is moved, and the 
second if it is not. For example, $EFH would move the turtle 
if the joystick is UP, and home the turtle if the joystick 

wasn't UP. 


The joystick positions are: 


UP 

RIGHT 

DOWN 

LEFT 


p 

F 

G 

H 

— 

Port 0 

( A 

B _ 

C 

Pj 

Port l 


N 

0 

P 

Port 2 

Qizi: 

j— 

K 

Lj 

Port 3 


SuDerturtle: *U to *1 draw one of the 6 direct 

quadrant. Turning the turtle 30 degrees permits 
procedures in the three other quadrants. 


ions in each 
re-use of these 


*F tests the value of a variable til which stores the 
superturtle's "direction" which is from 0 to 5. It then 
calls the appropriate drawer from *U-*Z. 


*R checks # Z, and does one of: 

If & Z is 5, set #2 to sero and turn the turtle 
right 90 degrees. 

Else add 1 to #Z. 

*L checks #Z, and does one of: 

IF #Z is sero, set Z to 5 and turn the turtle 
left 90 degrees. 

Else subtract one from HZ. 

WSFN permits the storage of the accumulator’s value 
into variables, identified by # (#A to # Z) . The two operations 
on variables are: 

«#va r Set var to value in accumulator 

A-#var+ Set accumulator to variable’s value 

Variables can also be used for repetitions (as shown in setting 
the accumulator above.) 

Superst ? ck: Done by substituting the Superturtle *F, *R and *L 

into the draw program and putting* the loop & setup into also. 

Colorpower Machine: Procedures *A through increment or 
decrement the color registers. Variables #A to #D hold the 
color register values. 

*M is used to set up the screen - and! to initially define 
the variables used. *N draws an abstract pattern which has many 
textures. 

is an extended version of the usual joystick text - 
now handling two joysticks in Port 0 and Port 1. When running, 
three of the colors will be changed. One set is the background, 
and cannot change (at present). As the values in #A to # D 
increase, the program runs more slowly due to the #A+ (etc) 
needed to set up the accumulator. The colors in the color registers 
are arranged in a way that changes brightness faster than hue 
which takes getting used to. 

The various expressions randomly change the color values 
by different ruses and will run indefinitely. *N was changed 
for the heck of it. 


LIMITED WARRANTY ON MEDIA AND HARDWARE ACCESSORIES* 


We, Atari, Tnc*, guarantee to you, the original retail purchaser, that the medium on 
which the APX program is recorded and any hardware accessories sold by APX are free from 
defects for thirty days from the date of purchase* Any applicable implied warranties, 
including warranties of merchantability and fitness for a particular purpose, are also 
limited to thirty days from the date of purchase* Some states don't allow limitations on 
a warranty's period, so this limitation might not apply to you* If you discover such a 
defect within the thirty-day period, call APX for a Return Authorization Number, and then 
return the product along with proof of purchase date to APX* We will repair or replace 
the product at our option* 

You void this warranty if the APX product: (1) has been misused or shows signs of 
excessive wear} (2) has been damaged by use with non— ATARI products, or (o) has been 
serviced or modified by anyone other than an Authorized ATARI Service Center* Incidental 
and consequential damages are not covered by this warranty or by any implied warranty* 
Some states don't allow exclusion of incidental or consequential damages, so this 
exclusion might not apply to you* 


DISCLAIMER OF WARRANTY AND LIABILITY ON COMPUTER PROGRAMS* 

Most APX programs have been written by people not employed by Atari, Inc* The programs we 
select for APX offer something of value that we want to make available to ATARI Home 
Computer owners* To offer these programs to the widest number of people economically, we 
don't put APX products through rigorous testing* Therefore, APX produts are sold "as is", 
and we do not guarantee them in any way* In particular, we make no warranty, express or 
implied, including warranties of merchantability and fitness for a particular purpose. We 
are not liable for any losses or damages of any kind that result from use of an APX 
product* 



REVIEW FORM 


We're interested in your experiences with APX programs and documentation * both favorable and 
unfavorable* Many software authors are willing and eager to improve their programs if they know 
what users want* And* of course* we want to know about any bugs that slipped by us* so that the 
software author can fix them* We also want to know whether our documentation is meeting your needs 
You are our best source for suggesting improvements! Please help us by taking a moment to fill in 
this review sheet* Fold the sheet in thirds and seal it so that the address an the bottom of the 
back becomes the envelope front* Thank you for helping us! 

1* Name and APX number of program 

2* If you have problems using the program* please describe them here* 


3* What do you especially like about this program? 


4* What do you think the program's weaknesses are? 


5* How can the catalog description be mare accurate and/or comprehensive? 


6* On a scale of 1 to 10* 1 being "poor” and 10 being "excellent"* please rate the following 
aspects of this program? 

Easy to use 

User-oriented (e*g** menus* prompts* clear language) 

Enjoyable 

Self-instructive 

Useful (non-game software) 

Imaginative graphics and sound 


7* Describe any technical errors you found in the user instructions (please give page numbers)* 


3* What did you especially like about the user instructions? 


?♦ what revisions or additions would improve these instructions 


10* On a scale of 1 to 10, 1 representing "poor" and 10 representing "excellent”, how would 
rate the user instructions and why? 


11* Other comments about the software or user instructions* 


I I 

ISTAMFt 
I I 


ATARI Program Exchange 
AttnJ Publications Dept* 
P*0* Box 50047 
60 E* Plumeria Drive 
San Jose, CA 95150 


[seal here] 






