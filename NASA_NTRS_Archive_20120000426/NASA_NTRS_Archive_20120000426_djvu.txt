idly plotted or re-plotted against differ- 
ent interpretations just by changing 
pointers to columns. 

A key advantage is taking data on a 
carefully controlled grid, which allowed 
a single data set to be post-analyzed 
many different ways. Another innova- 
tion was building a software tool to pro- 
vide very tight coupling between the 
generator and the recorded data prod- 


uct, and the operator’s worksheet. To- 
gether, these allowed the operator to 
sweep the jitter stimulus quickly along 
any of three dimensions and focus on 
the response of the system under test 
(response was jitter transfer ratio, or per- 
formance degradation to the symbol or 
codeword error rate). Additionally, man- 
aging multi-tone and noise waveforms 
automated a tedious manual process, 


and provided almost instantaneous deci- 
sion-making control over test flow. The 
code was written in LabVIEW, and calls 
Agilent instrument drivers to write to 
the generator hardware. 

This work was done by Chatwin Lans- 
doxune and Adam Schlesinger of Johnson 
Space Center. Further information is con- 
tained in a TSP (see page 1). MSC- 24814-1 


** jiShell Minimalist Shell for Xilinx Microprocessors 

NASA’s Jet Propulsion Laboratory, Pasadena, California 


pShell is a lightweight shell environ- 
ment for engineers and software devel- 
opers working with embedded micro- 
processors in Xilinx FPGAs. (pShell has 
also been successfully ported to run on 
ARM Cortex-Mi microprocessors in 
Actel ProASIC3 FPGAs, but without 
project-integration support.) pShell de- 
creases the time spent performing ini- 
tial tests of field-programmable gate 
array (FPGA) designs, simplifies run- 
ning customizable one-time-only experi- 
ments, and provides a familiar-feeling 
command-line interface. The program 
comes with a collection of useful func- 
tions and enables the designer to add 
an unlimited number of custom com- 
mands, which are callable from the 
command-line. The commands are pa- 
rameterizable (using the C-based com- 
mand-line parameter idiom) , so the de- 
signer can use one function to exercise 
hardware with different values. Also, 


since many hardware peripherals instan- 
tiated in FPGAs have reasonably simple 
register-mapped I/O interfaces, the en- 
gineer can edit and view hardware pa- 
rameter settings at any time without 
stopping the processor. 

pShell comes with a set of support 
scripts that interface seamlessly with Xil- 
inx’s EDK tool. Adding an instance of 
pShell to a project is as simple as mark- 
ing a check box in a library configura- 
tion dialog box and specifying a software 
project directory. The support scripts 
then examine the hardware design, 
build design-specific functions, condi- 
tionally include processor-specific func- 
tions, and complete the compilation 
process. For code-size constrained de- 
signs, most of the stock functionality can 
be excluded from the compiled library. 

When all of the configurable options 
are removed from the binary, pShell has 
an unoptimized memory footprint of 


about 4.8 kB and a size-optimized foot- 
print of about 2.3 kB. Since pShell allows 
unfettered access to all processor-accessi- 
ble memory locations, it is possible to 
perform live patching on a running sys- 
tem. This can be useful, for instance, if a 
bug is discovered in a routine but the sys- 
tem cannot be rebooted: pShell allows a 
skilled operator to directly edit the bi- 
nary executable in memory. With some 
forethought, pShell code can be located 
in a different memory location from cus- 
tom code, permitting the custom func- 
tionality to be overwritten at any time 
without stopping the controlling shell. 

This work was done by Thomas A. Werne 
of Caltech for NASA’s Jet Propulsion Labo- 
ratory. Further information is contained in 
a TSP (see page 1). 

This software is available for commercial li- 
censing. Please contact Daniel Broderick of 
the California Institute of Technology at 
danielb@caltech.edu. Refer to NPO-47495. 


® Software Displays Data on Active Regions of the Sun 

Lyndon B. Johnson Space Center, Houston, Texas 


The Solar Active Region Display Sys- 
tem is a computer program that gener- 
ates, in near real time, a graphical dis- 
play of parameters indicative of the 
spatial and temporal variations of activ- 
ity on the Sun. These parameters in- 
clude histories and distributions of 
solar flares, active region growth, coro- 
nal mass ejections, size, and magnetic 
configuration. 

By presenting solar-activity data in 
graphical form, this program acceler- 
ates, facilitates, and partly automates 
what had previously been a time-con- 
suming mental process of interpretation 
of solar-activity data presented in tabular 
and textual formats. Intended for origi- 


nal use in predicting space weather in 
order to minimize the exposure of astro- 
nauts to ionizing radiation, the program 
might also be useful on Earth for pre- 
dicting solar-wind-induced ionospheric 
effects, electric currents, and potentials 
that could affect radio-communication 
systems, navigation systems, pipelines, 
and long electric-power lines. 

Raw data for the display are obtained 
automatically from the Space Environ- 
ment Center (SEC) of the National 
Oceanic and Atmospheric Administra- 
tion (NOAA). Other data must be ob- 
tained from the NOAA SEC by verbal 
communication and entered manually. 
The Solar Active Region Display System 


automatically accounts for the latitude 
dependence of the rate of rotation of 
the Sun, by use of a mathematical 
model that is corrected with NOAA 
SEC active-region position data once 
every 24 hours. The display includes 
the date, time, and an image of the Sun 
in Ha light overlaid with latitude and 
longitude coordinate lines, dots that 
mark locations of active regions identi- 
fied by NOAA, identifying numbers as- 
signed by NOAA to such regions, and 
solar-region visual summary (SRVS) in- 
dicators associated with some of the ac- 
tive regions. 

Each SRVS indicator is a small pie 
chart containing five equal sectors, each 


38 


NASA Tech Briefs, September 2011 


