Form Approved 
OPM No. 0704-0168 


AD-A260 718 ion page 


Pubic rtpofting 
nawM, indwv 
Haadquamn S 
Managamant ar 

1. AGENCY uoc (^> 11.1 (Leave tuann) 


■a. Including lha Wna lor rawawl ng Inatrucilona. aaaicMng axWng dMa aoureaa gaHiaring and mairtainng 
ala or any ottw aapad ol Ala Golactian 0* Mormation. Including auggaaiiona Iw fadudng mia burdan. 10 Waamngen 
Highway. Suia 1204. Aiinglon. VA 22202-4302. and lo Aa OAca ol Atonnation and Ragulalory AHaira. Ollica ol 


2. REPORT DATE 


3. REPORT TYPE AND DATES COVERED 

Final: i8Nov 1992 


4. TITLE AND SUBTITLE 

Validation Summary Report: Verdix Corporation, VADS IBM RISC System/6000 
VAda-110-7171, Version 6.2, IBM RS/6000 Model 530H under AIX 3.2 (Host & 
Target), 921004W1.11279 


6. ALrrHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 




9. SPONSORING/r*' ^4lTORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a DISTRIBUTION/AVAILABILITY STATEMENT 

/Approved for public release; distribution unlimited. 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-549-1092 


10. SPONSORINGAilONITORING AGENCY 
REPORT NUMBER 



12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS IBM RISC System/6000 VAda-110-7171, Version 6.2, IBM RS/6000 Model 530H under AIX 3.2 
(Host & Target), ACVC 1.11. 


14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540-01-280-550 


18. SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. UMITATION OF ABSTRACT 


Standard Form 268. (Rev 2-89) 
Prescribed by ANSI Sttt 239-128 


























AVF Control Number: AVF-VSR-549-1092 
Date VSR Conplete; 18 November 1992 

92-06-23-VRX 


Ada COMPILER 
VALIDATI(»J SUMMARY REPORT: 

Certificate Number: 921004W1.11279 
Verdix Corporation 

VADS IBM RISC SysteiV6000 VAtia-110-7171, Version 6.2 
IBM RS/6000 Model 530H imder AIX 3.2 


(FINAL) 


DTIC 


^ L./ In' 


iijD 3 


Prepared By: 
Ada_Validation_Facility 
645 C-CSG/SCSL 

Wright-Patterson AFB OT 45433-6503 


Accesion For 

NTIS CRA&I 

DTIC TAB 

Unannounced □ 

Justification___ 

By 

Oistrib 


jtion / 

Availability Codes 

Oist 

Sd 

Avail and/or 

Speciat 


93 T ^52 


93-01440 

liilillill 





Certificate Information 


The following Ada in^lementation was tested and determined to pass ACVC 
1.11. Testing was completed on 4 October 1992. 

Coitpiler Name and Version: VADS IBM RISC Systenv/6000 

VAda-110-7171, Version 6.2 


Host Computer System: 
Target Conputer System: 
Customer Agreement Number: 


IBM RS/6000 model 530H under AIX 3.2 
IBM RS/6000 model 530H under AIX 3.2 
92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

921004W1.11279 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/MIL-STD-1815B. 

This report has been reviewed and is approved. 



3a Validation Tacility 
Steven P. Wilson 
Technical Director 


645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 




Ada V^IcfeSijStTbrganization 

DirecTOr,^om^ter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 




Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 


Hie following declaration of confornanc* was supplied by the custaner. 

Declaration of Confonoance 
Customer: Verdix Corporation 
Certificate Awardee; Verdix Corporation 

Ada Validation Facility: ASC/SC2L, Wright-Patterson AFB (M 45433-6503 
ACVC Version: 1.11 
Ada Inplementation: 

Ada Compiler Name and Version: '/ADS IBM RISC Systei^/6000 

’.7Wda-110-7171, Version 6.2 

Host Computer System; IBM RS/6030 model 530H under AIX 3.2 
Target Computer System; IBM RS/oOOO model 530H under AIX 3.2 
Declaration: 

We, the undersigned, declare tli.it we have no 

knowledge of deliberate deviations from the Ada Language 

Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the implementation 

Date 












TABLE OF C0NTE2JTS 


CHAPTER 1 INTROTUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATIOJ DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATIOI 

3.1 TESTING ENVIRCMffiNT.3-1 

3.2 SUMMARY CF TEST RESULTS.3-1 

3.3 TEST EXECUTiaa.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B CCXIPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 


1 


iNnmjCTiai 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capeibility (ACVC). This Validation Summary 
Report (VSR) gives an accovuit of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATIOa SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedwn of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRODUCTION 


1.2 REFERENCES 

(Ada83] Reference Manual for the Ada Programidnq Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Congiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by meems of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, euid L. The first letter of a test name identifies the class to 
v Kch it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used ty many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHeck_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code v^ich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inpleraentation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this implementation is provided in A{^ndix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 




INTRCXXJCTION 


For each Ada iroplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), euid 
possibly removing some inapplicedsle tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing con^sliance of Ada iinjlementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide eind the template for the validation simmary 

(ACVC) report. 

Ada An Ada compiler with its host computer system euid its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guid 2 uice for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the progreun; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inappliccible 

test 

ISO 

LRM 


Operating 

System 


Target 

Conputer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a oroduct, pucess, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF v^ich specifies the terms emd 
conditions for AVF services (of amy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A conputer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Orgeuiization for Standardization. 

The Ada steindard, or Lainguage Reference Mauiual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution ^.-ograms and that 
provides services such as resource cation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware implementations are possible. 

A conputer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada progreunming language euid of issuing a certificate 
for this implementation. 

A test found to be incorrect euid not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
lemguage. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is availcible from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

Be3022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives v^ich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO 2 md the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this inplementation, there is no such type: 


C35404C 

C4b23lC 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLCAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLClAT, or SHORT_FLClAT; for this 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less thzm 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S laase type that are outside the 
reunge of type DURATICX4; for this inplementation, the reuiges are the 
same. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this in^jlementation does not support such 
sizes. 


2-2 





IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following t2d3le checlc that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode cind access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEffJENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL iO 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OJT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN__FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 

— 

TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks tha*" WRITE raises USE_ERROR if the capacity of ein 
external sequential file is exceeded; this inplementation c 2 uinot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2-3 






IMPLEMENTATION DEPE34DENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tefts. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BO2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the reuige 

FLOAT'FIRST..FLOAT'LAST as the reinge constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A..C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENG'ra_CHECK, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form; 

" * CHECK ON REPRESENTATiai FOR <TYPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograuns; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 


2-4 





CHAPTER 3 


PROCESSING INFORMATIOI 


3.1 TESTING ENVIRCMIENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical emd sales information e^out this Ada inqplementation, contact; 

Sam Quiring 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Stamdard, whether the test is applicadble or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds tlie implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 





PROCESSING INFORMATION 


a) Total Number of i^plicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of InapplicedDle Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+b4-f) 


3.3 TEST EXECUTIW 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host coirputer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inpleroentation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Option/Switch Effect^ 


-w 


suppress generation of warning messages 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for custcxnizing the ACVC. 
The meeuiing and purpose of these parameters are explained in [UG89]. Ihe 
parameter values are presented in two tad^les. The first table lists the 
values that are defined in terms of the meucimum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_1D2 

$BIG_ID3 

$BIG_ID4 


499 — Value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V «> '2') 

(1..V/2 -> 'A') & '3' & 
{1..V-1-V/2 »> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 

$MAX_LEN_INT_BASED 


(1..V-3 »> '0') & 
(1..V-5 -> '0') & 
& (1..V/2 -> 

& (1..V-1-V/2 
(1..V-20 «> ' ') 
LITERAL 

"2;" & (1..V-5 -> 


"298" 
"690.0" 
'A') & 

-> 'A') & 


' 0 ') & "11 


1 ' & 


ri 


r It f 


$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (’..V-7 -> '0') & "F.E;" 


A-1 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SI2E 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

IBM_RS_6000 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRy_ADDRESS 

SYSTEM. "+''(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"{16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r f 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLQAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

ff If 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER IHAN DURATION 

100_000.00 

$GREATER THAN DURATIOJ BASE LAST 

To_ooiy_ooo 


$GREATER_THAN_FLQAT_BASE LAST 

1.?E+308 

$GREATER_THAN_FLCIAT_SAFE LARGE 

5.TJE307 


A-2 



MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLQAT SAFE_LARGE 

9.0E37 

$HIC2i_PRI0RITY 99 

$ILLEGAL_E3nERNAL_FILE NAMEl 

■^/illegal/file_ruune/2{ ]$%FILEl.DAT" 

$ILLEGAL_EXTERNAL_FILE NAME2 

■^/illegal/file_naine/2{ l$%FILE2.nAT" 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAaiAl PRAOIA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAaiA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATICX4 -100_000.0 

$LESS_THAN_DURATI(»J_BASE FIRST 

-1T)_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LCIW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CC»E_0'(OP -> NOP); 

$MACHINE_CODE_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME TINy_INTEGER 

A-3 






N^CRO PARAMETERS 


$NAME_LIST 

IBM_RS_6000 

$NAME_SPECIFICATI0N1 

/usr/test_suites/acvcl.ll/c/e/X2120A 

$NAME_SPEC1 FICATIC»I2 

/us r/test suites/acvcl.ll/c/e/X2120B 

$NAME_SPECI FI CATIC»43 

/usr/test suites/acvcl.ll/c/e/X3119A 

$NEG_BASED_INT 

16#F000000E# 

$NEW_MEM_SIZE 

16#FFFFFFD# 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

IBM_RS_6000 

$PAGE_TERM1NAT0R 

ASCII.LF & ASCII.FF 

$RECORD_DEFINITiai 

RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME 

CODE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

$TICK 

0.01 

$VARIABLE_ADDRESS 

VAR_1 'ADDRESS 

$VARIABLE_ADDRESS1 

VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 

VAR_3 'ADDRESS 

$YCXJR_PRA(aiA 

PRAOIA PASSIVE 


A-4 





APPEM)IX B 


COMPILATIOJ SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Iftiless specifically noted 
otherwise, references in this appendix are to compiler documentation eund 
not to this report. 


Syntax 

ada [options] (source_file].,. [linker_options] 
[object_file.o]... 

Description 

The command ada executes the Ada conpiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
substituted for .a. The -o option can be used to produce an 
executable with a name other than a.out, the default. For 
cross compilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invokes a.Id 
cind builds a complete program with the named library unit as 
the main program. 

Ncn-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 


B-1 



COMPILATION SYSTEM OPTIONS 


Several VAOS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
conpTler components based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat file_naroe as an ar file. 

Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. The -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages 
can be used as input to a.error. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variable ERROR PATTERN should also 


B-2 





COMPILATION SYSTEM OPTIONS 


be defined. ERROR_PA'ITERN is an editor search coninand that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, call vi(l). 

-K (keep) Keep the intermediate language (IL) file 
produced by the conpiler front end. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l) 

-M unit_name (main) Produce ein executable program using 
the named unit as the main program. The unit must be either 
a parameterless procedure or a parameterless fmction 
returning am integer. The executable program will be left in 
the file a.out unless overridden with the -o option. 

-M source_file (main) This option is like -M unit_name, except 
that the unit name is assumed to be the root 

name of the .a file (for foo.a the unit is foo. Only one .a file 
may be preceded by -M. 

-o executable file (output) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 


-O[0-9] (optimize) Invoke the code optimizer (0PTIM2). An 
optional digit (there is no space before the digit) limits 
the number of passes by the optimizer: 



no -0 option, make one pass 


-0 

no digit, optimize as far as possible 


-oo 

prevents optimization 


-01 

no hoisting 


-09 

full optimization 


The addition of the INFO directive, 0PTIM3:INFO:TRUE, to the 
ada.lib will cause the compiler to use a new optimizer (0PTIN3) 
that generates faster code. 

The default level of optimization for 0PTIM3 
that optimization levels for 0PTIM3 are more 

is 04. Note 
than simply 


additional iterations: 


B-3 





COMPILATION SYSTEM OPTIONS 


-O full optimization (same as OPTIM2 ada -09) 

-OO prevents optimization 

-01 no hoisting (same as 0PTIM2 ada -Ol) 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting from loops with maiximum passes 

-07 hoisting from loops and brauiches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, m 2 ucimum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significamt pierformauice gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIDE, 
INFO Directive Neunes on page 

a.info on page , and for more information about 
optimization, see USER'S GUIDE, Conpiler Optimizations on 
page . 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstauitiation of 
any that are out of date. 

-S (suppress) i^ply pragma SUPPRESS to the entire 
conpilation for all suppressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conpiler version number, date and time 
of conpilation, name of file compiled, ccxnnand input line, 
total conpilation time, and error summary line. Storage 
usage information about the object file is provided. Wi'Ji 
0PTIM3 the output format of conpression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 


B-4 





CX»1PILATI0N SYSTEM OPTIONS 


-w (warnings) Suppress warning diagnostics. 

See also a.das on page ; a.db on page ; a.error on page ; 
a.Id on page ; a.mklib on page ; and Operating System 
reference documentation for the ld(l) utility. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 


LINKER OPTICNS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


Syntax 

a.Id [options] \jnit_name [ld_options) 

Options 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unit_name as early in 
the elaBoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executed^le but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command l^efore executing it. 


B-5 



CC»1PILATI0N SYSTEM OPTICX^S 


-V (verify) Print the linker connnand but suppress 
execution. 

Description 

a.Id collects the object files needed to make iinit_naine a 
main program and calls theUNIX 
linker ld(l) to link together all Ada and other language 
objects required to produce ein executcdsle image in a.out. 
unit_neime is the main program auid must name a non-generic 
subprogram. If unit_naine is a function, it must return a 
value of the type STANDARD.INTEGER. This integer result 
will be passed back to the UNIX 

shell as the status code of the execution. The utility uses 
the net files produced by the Ada compiler to check 
dependency information, a.Id produces eui exception mapping 
table and a unit eladaoration ta±)le cind passes this 
information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 
Besides information generated by the compiler, these 
directives also include WlTHn directives that allow the 
automatic linking of object modules conpiled from other 
languages or Ada object modules not named in context clauses 
in the Ada source. Any number of WiTHn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at WITHI. The directives are recorded 
in the library's ada.lib file and have the following form. 

WITHI;LINK;obj ect_file: 

WITH2:LINK:archive_file: 

WiTHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WiTHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WiTHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 
These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VADS conpilers to exist 
on the same host. The -sh option prints the name of the 
actual executable file. 




APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteriatics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486231E+308..1.79769313486231E+J08; 
typc SHORT_FLOAT is digits 6 reuige -3.40282E+38 .. 3.40282E+38; 

type DURATION is delta 0.0001 .ange -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 







APPE2<IDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_C»JLY Pragma 

The INLlNE_CMiY pragma, vhen used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an 1NLINE_0NLY subpro¬ 
gram recursive a warning message will be emitted and ein 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bodies for vdiich no actual Ada 
body can be provided, for example the MACHINE_C0DE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the inple- 


C-2 





APPENDIX F OF THE Ada STANDAPD 


mentation and has the same effect as SHARE_CCX)E. It is 
included for conpateibility with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atten¥)t to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PR0C2yiM_ERR0R raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in ainother language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to eui object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following; 
a loop varicible, 
a constant, 

cin initialized varicible, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and einy implicit code needs to be generated. 
The default is CXJ. 


1.8. 0PTIMIZE_C0DE Pragma 

Takes one of the identifiers or OFF as the single argu- 


C-3 






APPENDIX F OF THE Ada STANDARD 


merit. This pragma is only allowed within a machine code 
procedure. It specifies v^ether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. COJTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is implemented as described in ^pendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORy_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by meems of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared inanedi- 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 


C-4 








APPENDIX F OF THE Ada STANDARD 


2.8. NOT_ELABORATED 

This pragma Cein only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other thaui Ada. The presence of this pragma suppresses the 
generation of eleJxjration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at die bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAOIA PASSIVE; 

PRAOIA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <numbe r >); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
body. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task b^y will prevent the intended optimization, in these 
cases a warning will be generated at conpile time emd will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 


C-5 



APPENDIX F OF THE Ada STANDARD 


2.15. STORAGE_UNIT 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISIW CHECK and in some cases OVERFLCW_CHECK cannot be 
supressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inclementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccmipiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for v^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIC24ED_TYPES; 
package SYSTEM is 


C-6 







APPEIOIX F OF THE Ada STANDARD 


pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTION_TABLES); 
pragma not_el 2 dx)rated; 


type NAME is ( ibm_rs_6000 ); 


SYSTEM NAME 


: constant NAME ibm rs 6000; 


STORAGc._UNIT 
MEMORY SIZE 


; constant 8; 

: constant := 16 777 216; 


— System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
: constemt 
constant :» 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 183 ?47; 
1 ^; ~ ■ 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer := 64*1024; 
type ADDRESS is private; 


function ">” (A: ADDRESS; B 
function "<" (A; ADDRESS; B 
function ">*”(A: ADDRESS; B 
function "<="(A: ADDRESS; B 
function (A: ADDRESS; B 
function "+" (A; ADDRESS; I 
function (A: ADDRESS; I 


ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return INTEGER; 
INTEGER) return ADDRESS; 
INTEGER) return ATORESS; 


function "+" (I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


function MEMORY_ADDRESS 

(I; UNSIGNED_TYPES.UNSI(J1ED_INTEGER) return ADDRESS 
renames "+"; 


NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

Slibtype SIG_STA'IUS_T is INTEGER; 
SIG_STATUS_SIZE: constant :» 4; 

type PROGRAM_ID is private; 

NO PROGRAM ID : constant PROGRAM ID; 


C-7 





APPEIIDIX F OF THE Ada STANDARD 


type L(DNG_ADDRESS is private; 

NO_LC»rc_ADDR : constant LONG_ADDRESS; 

function "+" (A; LC»IG_ADDRESS; I: INTEGER) return LONG_AM)RESS 
function (A: LONG_ADDRESS; I: INTEGER) return LONG_AI®RESS 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LONG_AE»RESS; 

function LOCALIZE(A: LONG_ADDRESS ; BYTE_SIZE : INTEGER) 
return ADDRESS; 

function STATION OF(A; LONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 

NO_ADDR : constant ADDRESS :* 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN("<-"); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIC3^_TYPES.UNSIGNED_INTEGER; 
NO_TASK_ID : constant TASK_ID := 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO PROGRAM ID : constant PROGRAM ID := 0; 


type LONG_ADDRESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 
NO LC»IG ADDR : constant LONG ADDRESS 0; 


pragma BUILT_IN(MAKE_LC»}G_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATI(»I_OF) ; 

end SYSTEM; 


5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 


C-8 






APPEiroiX F OF IHE Ada STANDARD 


hardware, pragma PACK applied to a record eliminate the pad¬ 
ding vrtiere possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conponents; an explicit record representation 
clause must be given to specify the packing of the ccan- 
ponents. A size clause applied to a record type will cause 
packing of con^xanents only when the coB^wnent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space alljcated. Itie SIZE attribute is not suj^rted 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variadDle requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CC®E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 


C-9 







APPENDIX F OF THE Ada STANDARD 


The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand (, operamd} ); 

where n indicates the number of opereoids in the aggregate. 

A special case arises for a variedale number of operautids. 
The operauids are listed within a subaggregate. The format 
is as follows: 

CX)DE_N'( opcode, (operemd {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to einy of the fxanctions defined in 
MACH1NE_C0DE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Uncheclced Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECTIO use the value MAX_REC_SIZE as 
the record size (expressed in STORAGEUNITS) when the size 


C-10 







APPEiroiX F OF THE Ada STANDARD 


of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM eind cein be cheinged by a prograun before 
instcuntiating DIRECT_IO to provide aui upper limit on the 
record size. In auiy case the mzocintum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECr_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) vdien the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string vrtiere ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is define3 in SYSTEM and cam be chamged by a 
program before instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQtIENTIAL_IO inposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to inply that resources up to or 
even near these limits are availaible to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X ST0RAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main progreun is allocated a fixed 
size stack of 10,240 STORAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit ST0RAGE_SI2E length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'S'roRAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 


C-11 






APPENDIX F OF THE Ada STANDARD 


There is an adjsolute limit of 6,000,000 x STORAGEJUNITS for 
objects declared statically within a coitpilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 







