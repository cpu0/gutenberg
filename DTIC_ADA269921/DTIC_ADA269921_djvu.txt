[p[E(BF(c)®N®W(C 


NI®Si®[EM[EN? (I[E(E[FNII 

Advanced Avionics Subsystems and Technology 






















Best 

Available 

Copy 






PHASE II, Version 2.1 




Advanced Avionics Subsystems & Technology (AAS&T) Program 


Embedded Ccnputer Perfornanoe lyfeasurerrent (ECPM) 
MIL-STD-1553 Interface Definition 

t 


10 June 1993 


prepared by: 

Naval Air Warfare Center, Indianapolis 
6000 E. 21st. Street 
Indianapolis IN 46219-2189 





June 93 


FINAL (Oct 90 to Jun 93) 


Embedded Computer Performance Measurement (ECPM) Advanced C-N00163-90-C-0165 
Avionics Subsystems and Technology Multiprocessor ECPM 
Software Documentation 

Diane Kohalmi, John Newport, Chuck Roark, Diane Paul, 

Dave Struble 


Naval Air Warfare Center, Aircraft Division, Indpls 
Indianapolis, Indiana 


NONE 


Naval Air Systems Command (xMP.-j^o-TD) 

Washington, DC 20361-0001 NONE 


Unlimited Distribution 


The report consists of software documentation for a new computer performance 
measurement tool written in Ada. The tool is designed for easy portability between 
computer systems. Included are a MIL-STD-1553B Interface Definition, A DoD-STD-2167 
Systems Requirements Specification, and a DoD-STD-2167 Interface Requirements 
Specification. 




Unclassified 


Unclassified 


Unclassified 













CXKTEKrS 


I. INTRCDUCTICN 




II. MIL-SID-ISSS MESSAGE MIX 


6 


A. Message and Word Counts Definitions.8 

B. Details of Word Fonnats. 14 

C. Bit Packing Algorithms.35 

D. Word Packing Procedure Calls . ^ 


III. OMXUSICNS 


39 


IV. NOTES .39 

A. Acronyms.39 

B. Other AAS&T ECPM Documents.39 

C. AAS&T Patch Panel Configuration . 41 

A. Message and Word Counts Definitions.8 

B. Details of Word Formats.14 

C. Bit Packing Algorithms.35 

D. Word Packing Procedure Calls.38 

LIST OF TABLES 

TABLE I. Message Summary.7 

TABLE II. jyfessage Sheets .9 

TABLE III. Word Definitions.15 

TABLE IV. Constant Values.34 

TABLE V. Binary, Hex, and Decimal Values For Packed 

Words.37 


LIST OF FIGURES 


1 MIL-STD-1553 Message Formats . 4 

2 MIL-SID-1553 Word Formats . 5 


2 



























V 


\ 


1 


I. INTRCDUCTION 

The Naval Air Warfare Center (NAWC), Indianapolis, AciyancxvJ 
Avionics Subsystems and Technology (AAS&T) Ccrrputers and Software 
element has developed a software tool to be used in the 
measurement of embedded conputer system reserve recniirements. 

This tool, the Embedded Conputer Performance Neasurcment (ECrM), 
is written in Ada and is designed to provide input/output and 
scheduling requirements similar to those of operational software. 

This document defines the details of the AAS&T ECPM software 
interface for MIL-STD-1553 data transfers used for the multiprocessor 
Engineering Change Proposal (ECP). This interface permits communication 
between the Digital Avionic System Laboratory (DASL) vAX coputers and 
the coputer under test. These communications involve transfer of 
simulated sensor data to the unit under test, and transfer of navigation 
solutions and performance information from the unit under test. 

Military standard data conventions are assumed. For exaple, the 
Most Significant Bit (MSB) of all digital quantities must be transmitted 
first, as required by MIL-STD-1553. Also, the MSB is assum,ed to be the 
sign bit, in accordance with MIL-STD-1750 (VAX data conventions are 
consistent with this assuption) . 

All transactions are Bus Controller (BC) to Remote Terminal (RT) 
or RT to BC, as defined in MIL-STD-1553. Each message is coposed of 
command, status, and data words, as specified by the MIL-STD-1553 (see 
Figure 1). Figure 2 illustrates corrmand, status, and data word formats. 
The actual transmissions are controlled by the EC, v;hich in the case of 
the ECPM is the DASL VAX. ptional MIL-STD-1553 features, such as 
dynamic bus control, mode codes, or broadcast, are not used for this 
interface (apropriate bits set to zero in command and status words) . 

RT 31 is not to be used as this is reserved for broadcast. Similarly, 
subaddresses 0 and 31 are not to be used since they are reserved for 
mode codes. 

The next section provides detailed descriptions of all message 
formats and data words to be used in this interface. 


3 






BC TO RT TRANSFER 


TRANSMIT 


STATUS 

DATA 

DATA 


DATA 

COMMAND 


WORD 

WORD 

WORD 


WORD 


RT TO BC TRANSFER 


•RESPONSE TIME 


Figure 1. MlL-STD-1553 Message Formats 



4 




















V 


i 


\ 


BITS: 


01234567 


9 10 i; 


±<Li 


13 14 15 


COM^C\ND WORD: 


RT # 
(0-4) 


Subaddress Word Count 
(6-10) (11-15) 


COfyMAND BIT 5: Transmit/Receive 


DATA WORD (s): I- 

(0-15) 


STATUS WORD: I-1 j I I I-1 

RT # reserved 

(0-4) (8-10) 


STATUS BIT 5; Message Error 

STATUS BIT 6: Instrumentation 

STATUS BIT 7: Service Request 

STATUS BIT 11: Broadcast Command Received 

STATUS BIT 12: Busy 

STATUS BIT 13; Subsystem Flag 

STATUS BIT 14: Dynamic Bus Control 

STATUS BIT 15: Terminal Flag 


NOTE: Each word is actually 20 bits in length, but the initial 3 
synchronization bits and final parity bit have been deleted for clarity. 


Figure 2. MIL-STD-1553 Word Formats. 









‘ i 


II. MIL-STD-1553 MESSAGE MIX 

Table I provides an overview of the message structures and word 
counts of all messages used in this interface. The Unit Under Test 
(UUT) is designated RTS. The first column indicates the message number, 
which corresponds with a subaddress number. The second column indicates 
the number of words sent in that message. The "T/R" column indicates 
whether RT5 transmits or receives the message. The update rate in Hertz 
is indicated for each message. The last column gives a high level 
description of the contents of the message. 


6 



TABLE I. T'CSSAGE SUT-MARY 


V 




MESSAGE/SA WORD 

OOUNT 


1,7,14,25 

5* 

3,9,21,17 

16* 

4,11,22,18 

31* 

5R 

15 

ST 

17 

6 

17 

7 

7 

2,8,20,16 

2* 

10,12,23,29 

5* 

15,13,24,30 

11* 


* Word Count For Each bfessage. 


T/R RAIE DESCRIPTiaJ 

(Hz.) 


T 

20 

Angular solution 

T 

20 

Translational 

Solution 

T 

20 

Lat./Long./Alt. 

R 

20 

Sensor Inputs 

T 

20 

Benchmark CaTirand 
Echo 

T 

20 

Results Output 

R 

20 

Benchmark Commands 

T 

20 

Constant 

T 

20 

Constant 

T 

20 

Constant 


7 





/ 




A. Message and Word Counts Definitions 

Table II contains a description of each word for all the messages. 
The RT subaddress is programmed as the message namber. Tiierefore, 
according co the MIL-STD-1553 protocol, the message nuriber must bs 
between 1 and 30. The word count must be between 1 and 32. The 
"CaSTTENTS" column indicates the benchmark software data base variable 
name for RTS and RT7 outputs, or value of constants. RTS and RT7 
inputs must be declared in the input/output package specification, 
fbny of these inputs are assumed to be 32 bit precision (tv;o sixteen bit 
words). As usual with MIL-STD-1553 message structures, the most 
significant word is transmitted first. The final column indicates 
whether the word is a variable or a constant. Finally, message numbers 
or words within a message which are zero are not presented. 

-All messages are outputs from the navigation benchmark except for 
messages 5 and 7. Therefore, the "contents" column of Table II contains 
the name of the local variable in the navigation benchmark which 
contains the value of this output. These names must not be confused 
with the simulation data base names, many of which are identical. 

^tessage 5 contains the sensor inputs to the navigation benchnark which 
are needed to execute the update equations. Nfessage 7 contains the 
benchmark control and performance information. 

The details of the word formats are provided in Table III. The 
number in parentheses after the "CONTENTS" in Table II refers to the 
detailed word format entry in Table III for words with variable content. 


8 





MESSAGE, 

1 

1 

1 

1 

1 

2 

2 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 

3 


> 




TABLE II. MESSAGE SHEETS 


WORD CONTENTS TYPE 


1 

PSI (18) 

^'yARIABIil 

2 

THETA (19) 

WIABIE 

3 

PHI (20) 

VARIABLE 

4 

Message 1 Status (35) 

VTiRIABIJi 

5 

Module Identification (38) 

'ARIABIE 

1 

45056.0 

OONSTAMT 

2 

Module Identification (35) 

V7WIABLE 

1 

32768.0 

CONSTANT 

2 

32768.0 

COTSTANT 

3 

4576.0 

OONSTT'NT 

4 

PSI (18) 

\ARIABLE 

5 

MW VEL X (15) 

\ARIA3LE 

6 

NAV VEL Y (16) 

7ARL3BLE 

7 

NAV VEL Z (17) 

'ARIABIE 

8 

PIATFOPM X ACCELERATION (1) 

WIIABLE 

9 

PLATFORM Y ACCELERATION (2) 

VZT^IABIE 

10 

VERTICAL ACCELEFATION (3) 

^/ARIABLE 

11 

RATE X (7) 

VARIABLE 

12 

RATE Y (8) 

VARIABLE 

13 

RATE Z (9) 

VARIABIE 

14 

NAV BARQMETRIC_RATE (14) 

VARIABIE 

15 

Hfessage 3 Status (36) 

VARIABIE 

16 

Module Identification (38) 

VARIABLE 


9 



TABLE II. MESSAGE SfEETS (continue) 


MESSAGE 


CONTENTS 


TYPE 


3 

4 

5 

6 

7 

8 
9 

10 

11 

12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29, 30 


32768.0 (XNS'IAMl 

32768.0 OONSTAirr 

49139.0 Ca^SlANT 

PSI (18) VmiP^lE 

PSI (18) IT^IABLE 

THETA (19) VARIABLE 

PHI (20) VARIABIE 

PHI (20) VARIABLE 

NAV_VEL__Y (16) VARIABLE 

NAV_VEL_X (15) VARIABLE 

NAV_VEL_Z (17) VARIABLE 

NAV_ALTITUDE_1 (23) VARIABLE 

NAV_ALTITUDE_2 (23) VARIABIE 

NAV_LATITUDEj:)EG (21) VARIABLE 

LAV_LCNGITUDE_DEG (22) VARIABLE 

2050.0 OCNSTANT 

PLATFORM_Y_ACCELERATICN (2) VARIABIE 
PLATFORM__X_ACCFI£RATION (1) VARIABLE 
VERTICAL_ACCEL£PATION (3) VARIABIE 
1.0 OONSTAMT 

1.0 CaJSTA^JT 

0.0 OSIBTAET 

0.0 CdlSTAiri' 

0.0 OCIJSLA\T 

RATE_X (7) VARIABLE 

RATE_Y (8) VARIABLE 

RATE_Z (9) VARIABLE 

20.0 OSLJSTAMT 

Ifessage 4 Status (37) VARIABIE 

Module Identification (38)VARIABLE 





TABLE II. MESSAGE Sl-iEETS (continued) 


MESSAGE 

WORD 

QOMTENTS 

TYPE 


5R 

1 

PLATFORM X ACCELERATION 1 (4) 

VARIABLE, 


5R 

2 

PLATFORM X ACCELERATION 2 (4) 

VARIA3IE, 

LSW 

5R 

3 

PLATFORM Y ACCELERATION 1 (5) 

varia: 

MSW 

5R 

4 

PLATFORM Y ACCELERATION 2 (5) 

VARIABLE, 

iuO* * 

5R 

5 

VERTICAL ACCELERATiaJ 1 (6) 

\7LRIABIE, 

i. * 

5R 

6 

VERTICAL ACCELERATION 2 (6) 

VARIABIE, 

L5W 

5R 

7 

RATE X 1 (10) 

VARIABLE, 

N!SW 

5R 

8 

RATE X 2 (10) 

VARIABIE, 

LSW 

5R 

9 

RATE Y 1 (11) 

VARIABIE, 


5R 

10 

RATE Y 2 (11) 

VARIABLE, 

LSW 

5R 

11 

RATE Z 1 (12) 


MSW 

5R 

12 

RATE Z 2 (12) 

VARIABLE, 

LSW 

5R 

13 

BARQ^ETRIC ALTITUDE 1 (13) 

^AIRIABLE, 

MEW 

5R 

14 

BAROMETRIC_ALTITUDE_2 (13) 

TRIABLE, 

LSW 


15 

Module Identification (38) 

COIJSTAI''n 

(-1) 




TABLE II. MESSAGE SHEETS (continued) 


5T, 6 

1 

ECPM Control Word (24) 

VARIABLE 

5T, 6 

2 

Benchmark Duration Counter (25) 

VARIABLE 

5T, 6 

3 

Input/Output Iterations (26) 

Per Frame 

VARIABLE 

5T,6 

4 

Status Word (27) 

VARIABLE 

5T,6 

5 

Spare Processing Time,Integer (28) 

VARIABLE 

5T,6 

6 

Spare Processing Time, 

Fraction (29) 

VAPJABLE, 

5T,6 

7 

Maximum Throughput DASL Loop 

Counts, Most Significant Half (31) 

VARIABLE 

5T,6 

8 

Maximum Throughput DASL Loop 

Counts, Least Significant Half (31) 

VAEIABLE 

5T,6 

9 

Pfeximum Throughput Time in 

Seconds, Integer Part (32) 

VARIABLE 

5T,6 

10 

P^imum Throughput Time in 

Seconds, Fractional Part (33) 

VARIABLE 

5T,6 

11 

Additional 10 DASL Loop Count, 

Most Significant Half (34) 

VARIABLE 

5T,6 

12 

Additional 10 DASL Loop Count, 

Least Significant Half (34) 

VARIABLE 

5T,6 

13 

Plaximum Input/Output Count (30) 

VARIABLE 

5T,6 

14 

ECPM Plode (40) 

\ARIABLE 

5T,6 

15 

Pbdule Identification for 10 

Mix Slave (38) 

VARIABLE 

5T,6 

16 

Navigation Results Output Set (39) 

VARIABLE 

5T,6 

17 

Pbdule Identification (38) 

VARIABLE 


1 2 


LSV*! 





TABLE II. MESSAGE SHEETS (continued) 


7 

1 

ECPM Control Word (24) 

W\RIABLE 

7 

2 

Benchmark Duration Counter (25) 

WtRIABLE 

7 

3 

Input/Output Max Iterations 

Per Frame (26) 

VARIABIi: 

7 

4 

ECPM Mxie (40) 

VARIABLE 

7 

5 

Module Identification to receive 
Additional 10 Mix Slave (38) 

VAPJA3LE 

7 

6 

Navigation Results Output Set (39) 

VARIABLE 

7 

7 

Module Identification (selects 
module which performs 
calculations)(38) 

VARIABLE 


10 

1 

892.0 

OOISTANT 

10 

2 

13184.0 

OCNSTAT^rr 

10 

3 

540.0 

OCNSTANT 

10 

4 

37840.0 

QCNSTANT 

10 

5 

Module Identification (38) 

VARIABLE 

15 

1 

1.0 

OOnISTANT 

15 

2 

30.0 

CCNSTANT 

15 

3 

0.0 

CCKSTAMT 

15 

4 

0,0 

C3CNSTANT 

15 

5 

0.0 

OCNSTAIT 

15 

6 

65397.0 

CCNSTANT 

15 

7 

2214.0 

OOISTANT 

15 

8 

8160.0 

CCNSTANT 

15 

9 

0.0 

CONSTANT 

15 

10 

2114.0 

CCNSTANT 

15 

U 

Module Identification (38) 

VARIABLE 


1 3 




B. Details of Word Formats 


Table III provides a detailed e>planation of each word v;hich is a 
variable in the message mix. Constant values are given in Table II for 
the words which are constants. Constant values in both decimal, hex, 
and binary are given in Table IV. 

The "SOURCE" entry indicates whether the UUT or the DASL ''y7\X 
transmits this word. Since the DASL VZ\X acts as the flission Conputer 
(MC), the source may be indicated as "MC". Specific source software 
applications may be indicated when the source is the UUT. Several vrards 
generated by the UUT merely echo back the sensor inputs, therefore 
mux_io is indicated as the procedure of origin. 

The "DEST" indicates the corputer which receives the word. If the 
MC is the receiver and the word is used as input to the display 
software, this fact is so indicated in the table entry. 

The "TYPE" entry indicates whether the variable is symmetric, non- 
symmetric, or discrete. In the case of non-symmetric variables, the 
offset is part of the entry. This information indicates the encoding 
and decoding algorithms used to convert the real variable into a 16-bit 
integer. These algorithms, together with variables "OFFSET", "MAX", 
"MIN", and "RESOLUTION" will be discussed in the last section of this 
document. 

"MAX" and "MIN" refer to the maximum and minimum values of the 
MIL-STD-1553 word. The minimum is offset by the resolution ("RES") 
because of the bit packing method discussed in the next section of this 
document. The value of the resolution is the same as the "scaling 
factor" which is also discussed in the next section. 

All outputs are 16 bit (two byte) packed integers. Entries 
identified as 32 bit values consist of two sixteen bit v/ords. The most 
significant word is first. 

"UNITS" identifies the unit of mmeasure for the variable. 

"RESOLUTION" identifies the numerical difference of adjacent bit 
values of the packed word due to the algorithm used. This is also the 
value of the Least Significant Bit (LSB). Calculation of this value is 
discussed in the next section. 








TABLE III. Word Definitions. 


1. PLATFORM X ACCELERATION 


SOURCE: UUT (NAV, 

DEST: MC (V7\X), 

TYPE: SYMMETRIC 

mux io) 

used by displays 


MAX MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+720.0 -720.0 - RES 

16 

ft/sec**2 

720/32767 

2. PLATFORM_Y_ACCELERATION 



SCDURCE: UUT (NAV, 
DEST: MC (VAX), 
TYPE: SYMMETRIC 

mux io) 

used by displays 


MAX MIN 

WORD 

SIZE 

UNITS 

RESOLUTICN 

+720.0 -720.0 - RES 

16 

ft/sec**2 

720/32767 

3. VERTICAL ACCELERATICN 




SCXJRCE: UUT (NAV, 

DEST: MC (VAX), 

TYPE: SYMMETRIC 

mux io) 

used by displays 


MAX MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+720.0 -720.0 - RES 

16 

ft/sec**2 

720/32767 





TABLE III. Word Definitions (continued). 


4. PLATFOPM_X_ACCELERATiaSI_l, PIATroRMJ<J\CCEI£RATI0N_2 

SOURCE: MO (VAX acceleration sensor model) 

DEST: UUT (NAV) 

TYPE: SYMyETRIC, two sixteen bit words 

RAX MIN WORD UNITS RESOLUTIOl 

SIZE 

+720.0 -720.0 - RES 32 ft/sec**2 720.0/2147483647.0 

5. PIATFORMJ/_ACCELERATION_l, PLATEX)RM_Y_ACCELERATION_2 

SOURCE: MO (VAX acceleration sensor model) 

DEST: UUT (NAV) 

TYPE: SYMyETRIC, two sixteen bit words 

MAX MIN WORD UNITS RESOLUTICN 

SIZE 

+720.0 -720.0 - RES 32 ft/sec**2 720.0/2147483647.0 

6. VERTICAL ACCELERATI0N_1, VERTICAL_ACCELERATION_2 

SOURCE: MS (VAX acceleration sensor model) 

DEST: UUT (NAV) 

TYPE: SYRMETRIC, two sixteen bit words 

MAX MIN WORD UNITS RESOLUTICN 

SIZE 

+720.0 -720.0 - RES 32 ft/sec**2 720.0/2147483647.0 



TABLE III. Word Definitions (continued). 


7. RATE X 


SOURCE 

: UUT (WAV, 

mux io) 



DEST: 

MO (VAX) 




TYPE: 

SYMMETRIC 




MAX 

MIN 

WORD 

UNITS 

RESOLUTICN 



SIZE 



+20.0 

-20.0 - RES 

16 

rads/sec 

20/32767 

8. RATE Y 






SOURCE: UUT (NAV, mux io) 


DEST: 

TYPE: 

MO (VAX) 
SYMyETRIC 




MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+20.0 

-20.0 - RES 

16 

rads/sec 

20/32767 

9. RATE_Z 





SOURCE 

DEST: 

TYPE: 

: UUT (NAV, 

MO (VAX) 
SYMMETRIC 

mux io) 



MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+20.0 

-20.0 - RES 

16 

rads/sec 

20/32767 



TABLE III. Word Definitions (continued). 


10. RATE__X_1, RATE_X_2 

SOURCE: MS (VAX rate sensor model) 

DEST: UUT (NAV) 

TYPE: SYMyETRIC/ two sixteen bit words 

MAX MIN WORD UNITS RESOLUTIOJ 

SIZE 

+20.0 -20.0 - RES 32 rads/sec 20.0/2147483647.0 

11. RATE_Y__1, RATE_Y_2 

SOURCE: MC (VAX rate sensor model) 

DEST: UUT (NAV) 

TYPE: SYMMETRIC, two sixteen bit words 

MAX MIN WORD UNITS RESOLUTION 

SIZE 

+20.0 -20.0 - RES 32 rads/sec 20.0/2147483647.0 

12. RATE_Z_1, RATE_Z_2 

SOURCE: MZ (VAX rate sensor model) 

DEST: UUT (NAV) 

TYPE: SYMMETRIC, two sixteen bit words 

MAX MIN WORD UNITS 

SIZE 

+20.0 -20.0 - RES 32 rads/sec 


RESOLUriCH 

20.0/2147483647.0 



TABLE III. Word Definitions (continued). 


13. BARCMETRIC ALTITUDE 1, BAROMETRIC ALTITUDE_2 


SOURCE: MO (VAX Air Data Coirputer model) 


DEST: 

TYPE: 

UUT (NAV) 

NONSYMMETRIC, OFFSET 

= 39,250, 

two sixteen bit words 

MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+80,000.0 

-1500.0 - RES 

32 feet 

40750.0/2147483647.0 

14. NAV_BARCMETRIC RATE 




SOURCE: UUT(NAV, v 

DEST: MO (VAX) 

TYPE: SYMMETRIC 

barom) 



MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+32767 

-32767 - RES 

16 

feet/sec 

1 

15. NAV_VEL_X 




SOURCE: UUT (NAV, horiz_nav) 

DEST: MO (VAX used by displays) 

TYPE: SYMMETRIC 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+2500.0 ■ 

-2500.0 - RES 

16 

feet/sec 

2500/32767 






TABLE III. Word Definitions (continued). 


16. NAVVEL__Y 

SOURCE: UUT (NAV, hori 2 _nav) 

DEST: MS (VAX used by displays) 

TYPE: SYMMETRIC 


MAX MIN 

WORD 

UNITS 

RESOLUTION 



SIZE 



+2500.0 -2500 

.0 - RES 

16 

feet/sec 

2500/32767 

17. NAV_VEL_Z 





SOURCE: 

UUT (NAV, 

vert nav) 


DEST: 

MS (VAX used by displays) 


TYPE: 

SYMMETRIC 




MAX MIN 

WORD 

UNITS 

RESOLUTION 



SIZE 



+2500.0 -2500 

.0 - RES 

16 

feet/sec 

2500/32767 

18. PSI 





SOURCE: 

UUT (NAV, 

nav att) 



DEST: 

MS {VPX used by displays) 


TYPE: 

SYMMETRIC 




MAX MIN 

WSRD 

UNITS 

RESOLUTICN 



SIZE 



+180.0 -180. 

0 - RES 

16 

degrees 

180/32767 

19. THETA 





SOURCE: 

UUT (NAV, 

nav att) 



DEST: 

MS (VAX used by displays) 


TYPE: 

SYMMETRIC 




MAX MIN 

WORD 

UNITS 

RESOLUTION 



SIZE 



+90.0 -90.0 - RES 

16 

degrees 

90/32767 






TABLE III. Word Definitions (continued). 


20. PHI 

SOURCE: UUT (NAV, nav_att) 

DEST: MC (VAX used by displays) 

TYPE: SYMMETRIC 


MAX 

MIN 

WORD 

UNITS 



SIZE 


+180.0 

-180.0 - RES 

16 

degrees 

21. NAVJLATITUDE_DEG 



SOURCE: UUT (NAV, 

nav horiz) 

DEST: 

MC (VSX used by displays) 

TYPE: 

SYPMETRIC 



MAX 

MIN 

WORD 

UNITS 



SIZE 


+90.0 

-90.0 - RES 

16 

degrees 

22. NAV_LCNGITUDE_DEG 



SOURCE: UUT (NAV, 

nav horiz) 

DEST: 

MC (VAX used by displays) 

TYPE: 

SYMMETRIC 



MAX 

MIN 

WORD 

UNITS 



SIZE 


+180.0 

-180.0 - RES 

16 

degrees 


RESOLUTION 

180/32767 

RESOLUTION 

90/32767 

RESOLUTION 

180/32767 



TABLE III. Word Definitions (continued). 


23. NAV_ALTITUDE 1 , NAV ALTITUDE 2 


SOURCE: UUT (NAV, nav_vert) 

DEST: MO (VAX used by displays) 

TYPE: NONSYM^TRIC, OFFSET = 39,250, two sixteen bit words 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

+80,000.0 

-1500.0 - RES 

32 

feet 

40750.0/2147483647.0 


22 



TABLE III. Word Definitions (continued). 

24. ECPM Control Word (discrete word) 


SOURCE: 

UUT 

[Ifessage 6] 


MC 

[Message 7] 

DEST: 

MC 

[I^ssage 6] 


UUT 

[ftessage 7] 

TYPE: 

DISCRETE 


MAX MIN WDPD UNITS RESOLUTION 

SIZE 

- - 16 (none) 

Bit 13 Bit 14 Bit 15 

000 Command to Configure System 

001 Start ECPM for configuration selected 

010 Stop navigate only mode 

oil Measure Maximum 10 

10 0 ffeasure Maximum Throughput 

101 Transmit Benchmark Results 

110 Reserved 

111 Reserved 

Bits 12-0: Reserved, ignored by UUT, error for MC 


NOTE: Set by MC, read by UUT 


TABLE III. Word Definitior 


vj) 


25. Benchmrk Duration Counter 

SOURCE: UUT [Message 6] 

MS [Ifessage 7 ] 
DEST: MC [f^ssage 6] 

UUT [f-fessage 7] 


TYPE: 

UNSICMD 

INTEGER 

(0 to 65535) 


MAX 

MIN 

WORD 

UNITS 

RESOLunai 



SIZE 



65535 

0 

16 

SBOCMDS 

1 


NOTE: Set by MS, read by UUT 

26. Input/ Output Maximum Iterations Per Frame 

SOURCE: UUT (Message 6] 

MC [lyfessage 7 ] 

DEST: MC [Pfessage 6] 

UUT [lyfessage 7] 

TYPE: UNSIGNED INTEGER (0 to 65535) 

MAX MIN WORD UNITS RESOLUTION 

SIZE 

65535 0 16 NINE 1 

NOTE: Set by MC, read by UUT; 

This word is the number of iterations per 50 msec, minor frame 
comnanded. 




TABLE III. Word Definitions (continued). 


27. Status Word 

SOURCE: LUT 

DEST: MS 

TYPE: DISCRETE 

WORD UNITS RESOLUTION 

SIZE 

16 - 


MAX MIN 


Bit 15 : 0/1 Indicates OK/Not OK ECPM Control Word see 

word 24, Table III) 

Bit 14 : 0/1 Indicates Can/Cannot Run This Input/Output 

Mix With The Benchmark (This is a Timeout) 

Bit 13 : 0/1 indicates results valid/invalid due to 

Stop Connand during recording (see word 24, 
Table III) 

Bit 12 : 0/1 indicates that valid/invalid navigation 

data subaddress was set (see word 39, Table 
III) 

Bit 11 : 0/1 indicates valid/invalid slave module 

identifier (see words 24 and 38, Table III) 

Bit 10 : 0/1 indicates valid/invalid ECPM mode (see 

word 40, Table III) 

Bit 9 : 0/1 indicates valid/invalid master module 

identifier (see words 24 and 38, Table III) 

Bits 0-8 : Reserved, ignored by UUT, error for M2 if non¬ 

zero 


2 5 




TABLE III. Word Definitions (continued). 


28. Spare Processing Tiire, Integer Part 

SOURCE: UUT 

DEST: M: 


TYPE: 

UNSIOSED 

INTEGER 

(0 to 65535) 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

65535 

0 

16 

SEOCNDS 

1 

29. Spare Processing Time, Fractional Part 


SOURCE 

DEST: 

UUT 

m: 




TYPE: 

UNSIGNED 

INTEGER 

(0 to 65535) 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTIOJ 

65534/65535 0 

16 

Seconds 

1/65535 

* 

30. M^imum Input/Output Count 



SOURCE 

DEST: 

: UUT 

MS 




TYPE: 

UNSIGNED 

INTEGER 

(0 to 65535) 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

65535 

0 

16 

NONE (ITERATiaiS) 1 


26 



TABLE III. Word Definitions (continued). 


31. Maximum Throughput DASL Loop Counts 

SOURCE: LOT 

DEST: MS 

TYPE: UNSIGNED INTEGER (0 to 2**32-l) 

MAX MIN WORD UNITS RESOLdTIC^J 

SIZE 

2**32-l 0 32 NCNE (I'lERATICNS) 1 

32. Maximum Throughput Time in Seconds, Integer Part 

SOURCE: UUT 

DEST: MS 


TYPE: 

UNSIC3^ 

INTEGER 

(0 to 65535) 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

65535 

0 

16 

SEOCNDS 

1 

33. Lfeximum Throughput Time in Seconds, Fractional Part 

SOURCE: UUT 

DEST: MS 

TYPE: 

UNSIGNED 

INTEGER 

(0 to 65535) 


MZ\X 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

65534/65535 

0 

16 

Seconds 

1/65535 


27 







TABLE III. Word Definitions (continued). 


34. Additional 

10 DASL Loop Count 

SOURCE: UUT 



DEST: 

; MS 



TYPE: 

LTJSIGJM) ELTEGER (0 to 2^^ 

MAX 

MIN 

WORD 

UNITS 



SIZE 


2**32-l 

0 

32 

MEJE 

35. Message 1 

Status 


SOURCE: UUT 



DEST: 

m: 



TYPE: 

DISCRETE WORD 


MAX 

MIN 

WORD 

UNITS 



SIZE 


65535 

0 

16 

ICNE 

Bit 

lyfeaning 



0 

Word 1 of Message 1 

Truncated 

1 

Word 2 of Message 1 

Truncated 

2 

Word 3 of Message 1 

Truncated 

3-15 

Not Used 




32-1) 

RESOLUTION 

(ITERATIONS) 1 

RESOLUTION 

1 


28 




e K p 


TABLE III. Word Definitions (continued). 


36. Message 3 Status 

SOURCE: UUT 

DEST: MS 


TYRE: DISCRETE WORD 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTION 

65535 

0 

16 

NONE 

1 


Bit Rfeaning 

0 Word 1 of ffessage 3 Truncated 

1 Word 2 of Message 3 Truncated 

2 Word 3 of Message 3 Truncated 

3 Word 4 of Message 3 Truncated 

4 Word 5 of lyfessage 3 Truncated 

5 Word 6 of Message 3 Truncated 

6 Word 7 of Rfessage 3 Truncated 

7 Word 8 of Message 3 Truncated 

8 Word 9 of Ltessage 3 Truncated 

9 Word 10 of Message 3 Truncated 

10 Word 11 of ffessage 3 Truncated 

Word 12 of lyfessage 3 Truncated 
Word 13 of Mtessage 3 Truncated 
Word 14 of Lfessage 3 Truncated 
14-15 Not Used 



TABLE III. Word Definitions (continued). 

37. Message 4 Status 

SOURCE: UUT 

DEST: MS 

TYPE: DISCRETE WORD 


MAX 

MIN 

WORD 

SIZE 

UNITS 

RESOLUTIOI 

2**32-l 

0 

32 

rCNE 

1 


Bit Nfeaning 


0 

1 

2 

3 

4 

5 

6 

7 

8 
9 

10 

n 

12 

13 

14 

15 


Word 1 of Ifessage 4 Truncated 
Word 2 of Ifessage 4 Truncated 
Word 3 of Message 4 Truncated 
Word 4 of I^ssage 4 Truncated 
Word 5 of lyfessage 4 Truncated 
Word 6 of Mfessage 4 Truncated 
Word 7 of Nfessage 4 Truncated 
Word 8 of I^ssage 4 Truncated 
Word 9 of Ifessage 4 Truncated 
Word 10 of Message 4 Truncated 
Word 11 of Message 4 Truncated 
Word 12 of Ntessage 4 Truncated 
Word 13 of Message 4 Truncated 
Word 14 of Pfessage 4 Truncated 
Word 15 of Rfessage 4 Truncated 
Word 16 of Ifessage 4 Truncated 


30 








TABLE III. Word Definitions (continued). 
37. Itessage 4 Status (continued) 


16 

17 

18 


28-31 


Word 17 of Lfessage 4 
Word 18 of Message 4 
Word 19 of Lfessage 4 
Word 20 of Lfessage 4 
Word 21 of Message 4 
Word 22 of Message 4 
Word 23 of Ifessage 4 
Word 24 of Lfessage 4 
Word 25 of Ifessage 4 
Word 26 of Message 4 
Word 27 of Lfessage 4 
Word 28 of Mfessage 4 
Not Used 


Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 

Truncated 


3 1 





TABLE III. Word Definitions (continued). 

38. Module Ictentification 

SOURCE: UUT (lyfessages 1,2,3,4,6,10,15) 

MS (Message 7) 

BEST: MC (IVfessages 1,2,3,4,6,10,15) 

UUT (Ltessage 7) 


TYPE: Integer 


PAX 

PUN 

WTO 

SIZE 

UNITS 

RESOLUTIOJ 

32767 

-1 

16 

None 

1 


NOTES: [1] The value -1 indicates that the message applies to 

all modules. 

[2] Normal values are 0 to 32767 

[3] Negative values (other than -1) are illegal 

[4] Values 10, 11, 12 are typical for the TI MDP 

39. Navigation Solution Output Select 

SOURCE: UUT (lyfessages 5T, 6) 

MS (lyfessage 7) 

BEST: MC (IVfessage 5T, 6) 

UUT (Pfessage 7) 

TYPE: DISCRETE 

Bit 14 Bit 15 Pfeaning 

0 0 Set 0 (outputs to subaddresses 1,2,3,4,10,15) 

0 1 Set 1 (outputs to subaddresses 7,8,9,11,12,13) 

1 0 Set 2 (outputs to subaddresses 

14,20,21,22,23,24) 

1 1 Set 3 (outputs to subaddresses 

25,26,27,28,29,30) 

Bits 0-13: Not Used 


32 




TABLE III. Word Definitions (continued). 


40. ECPM Mode 


SOJRCE: 

UUT (Ptessage 6) 

ME (t^ssage 7) 

DEST: 

ME (I^ssage 6) 

UUT (Message 7) 

TYPE: 

DISCRETE 

Bit 15 

Meaning 

0 

Navigate Only Mode 

1 

Record Results Mode 

Bits 0-14: 

Not Used 


33 





TABLE TV. Constant Values. 


MESSAGE/WORD VZV.UE 

(DEC) 


VALUE (BINARY) 


VALUE (LEX) 





MSB 




LSB 


2/1 

45056 

★ 

[-20480] 

1 

oil 

000 

000 

000 

000 

BOOO 

3/1 

32768 

★ 

[-32768] 

1 

000 

000 

000 

000 

000 

8000 

3/2 

32768 

ic 

[-32768] 

1 

000 

000 

000 

000 

000 

8000 

3/3 

4576 



0 

001 

000 

111 

100 

000 

llEO 

4/1 

32768 

•k 

[-32768] 

1 

000 

000 

000 

000 

000 

8000 

4/2 

32768 

k 

[-32768] 

1 

000 

000 

000 

000 

000 

8000 

4/3 

49139 

k 

[-16397] 

1 

oil 

111 

111 

110 

oil 

BFF3 

4/16 

2050 



0 

000 

100 

000 

000 

010 

0802 

4/20 

1 



0 

000 

000 

000 

000 

001 

0001 

4/21 

1 



0 

000 

000 

000 

000 

001 

0001 

4/22 

0 



0 

000 

000 

000 

000 

000 

0000 

4/23 

0 



0 

000 

000 

000 

000 

000 

0000 

4/24 

0 



0 

000 

000 

000 

000 

000 

0000 

4/28 

20 (LEVER_ARM) 

0 

000 

000 

000 

010 

100 

0014 

10/1 

892 



0 

000 

001 

101 

111 

100 

037C 

10/2 

13184 



0 

oil 

001 

110 

000 

000 

3380 

10/3 

540 



0 

000 

001 

000 

oil 

100 

021C 

10/4 

37840 

*[ 

-27696] 

1 

001 

001 

111 

010 

000 

93D0 

15/1 

1 



0 

000 

000 

000 

000 

001 

0001 

15/2 

30 



0 

000 

000 

000 

oil 

110 

OOIE 

15/3 

0 



0 

000 

000 

000 

000 

000 

0000 

15/4 

0 



0 

000 

000 

000 

000 

000 

0000 

15/5 

0 



0 

000 

000 

000 

000 

000 

0000 

15/6 

65397 

★ 

[-139] 

1 

111 

111 

101 

110 

101 

FF75 

15/7 

2214 



0 

000 

100 

010 

110 

010 

08A6 

15/8 

8160 



0 

001 

111 

111 

100 

000 

IFEO 

15/9 

0 



0 

000 

000 

000 

000 

000 

0000 

15/10 

2114 



0 

000 

100 

001 

000 

010 

0842 


* MIL-STD-1750 does not provide an unsigned integer v;ord format. The 
values in brackets are equivalent MIL-STD-1750 values for the defined 
bit settings. 


34 




C. Bit Packing Algorithms 


Two types of packing algorithms are reqi:ired to generate the 
entries of Table III. The first type is "Symmetric", which is defined 
as the case when the entry for "MAX" is equal to the absolute value of 
"MIN" (MAX = [MINI - RESOLUTICN) . The second type is 
"Nonsymmetric",which is defined as the case when "MAX" is not equal to 
the absolute value of "MIN". Each type of algorithm is needed for 16- 
bit words (single precision) and for 32-bit words (double precision). 

The single precision symmetric case assumes that bit 0 (leftmost) 
is the sign bit and that bit 15 (rightmost) is LSB. This gives a range 
to the resulting packed integer (1553_word) of -32768 to +32767. For 
the sixteen bit signed integer format, the bit pattern "1 000 000 000" 
is defined as -32768. Other exanples are shown in Table V. 

This permits the resulting real number to be unpacked easily with 
a scaling factor: 

[1] real := scaling_factor * FLOAT(1553_word) 

where 

real -> 4 byte real variable, 

scaling_factor -> four byte real, value = MAX/32767.0, 

1553_word -> decoded two byte integer input, 

+32767 > value > -32768. 

In a similar fashion, a symmetric, single precision real 
variable can be packed into an integer output (1553_word): 

[2] 1553_word := real/scaling__factor. 

The double precision symmetric case is very similar, except that 
the scaling factor is 31 bits. The two sixteen bit words are unpacked 
into a 32 bit real variable as below: 






[3] real := scaling_factor * (65536.0 * worci__l + worci_2 ); 


real -> four byte real variable, 
scaling_factor -> scaling factor, MAX/(2**31 -1), 
worci_l -> rrrast significant word (transmitted first on the 
MIL-STD-1553 bus), two byte integer, 
word_2 -> least significant word (transmitted second on the 
MIL-STD-1553 bus), two byte integer. 

The inverse of the double precision representations can be 
corrputed as follows. 

[4] scaled_real = real/scaling_factor 

ms_word = INTEGER ( scaled__real/65536.0), 

Is word = INTEGER ( scaled real - FLOAT (65536 * ms word) ), 


vihere: 


scaled__real -> four byte real; 

nis_word -> two byte integer (packed value), most 

significant word; 

ls_word -> four byte integer (packed value, needed to 

prevent overflow), least significant word; 

INTEGER : Integer function of real (truncates, not rounds). 

Two points of caution must be observed regarding this algoritiim. 
First, if ls_word is larger than or equal to 32768, then the two byte 
integer MIL-STD-1553 least significant word will be equal to ls_word - 
65536. In a similar fashion, if ms_word is negative, then the value of 
the output two byte integer corresponding to ls_word will be the same as 
calculated above, except that the MIL-STD-1553 output will equal ls_word 
+ 65535. The second point is that the function "INTEGER" must truncate, 
not round. This is especially critical in the calculation of rrs__word. 

The nonsymmetric case is also quite similar, except that a 
mic^int offset is required: 

[5] OFFSET (MAX + MIN)/2; 

real := real_input - offset. 


36 



At this point, the shifted value (real) is a symmetric real variable and 
the single precision symmetric packing algorithm can be used. 





TABLE V. Binary, 

buniary 

0 111 111 111 111 111 
0 100 000 000 000 000 
0 001 000 000 000 000 
0 000 000 000 000 001 
0 000 000 000 000 000 
1 111 111 111 111 111 
1 111 000 000 000 000 
1 100 000 000 000 000 
1 000 000 000 000 001 
1 000 000 000 000 000 


Hex, and Decimal Values For Packed Words. 
HEX DBCD-'AL 

EEFF scaling__factor * 32767 

4000 scaling_factor * 16384 

2000 scaling_factor * 4096 

0001 seal ing_factor * 1 

0000 0.0 

FFFF scaling__factor * -1 

FOOO scaling_factor * -4096 

COOO scaling_factor * -16384 

8001 scaling_factor * -32767 

8000 sealing_factor * -32768 


scaling_factor = Scaling Factor 


3 8 







D. Word Packing Procedure Calls 


Procedures will be needed to pack and unpack the 16-bit integers 
from the MIL-STD-1553 interface into benchmark software data base 
variables and VAX variables. It is assumed that the tkiver routine 
automatically transmits the word to the RT output device, with no 
further intervention from the application. This transmission may 
involve a backplane bus transaction. The MIL-STD-1553 interface 
scheduling is controlled by the bus controller (V?V(). In a similar 
fashion, the application is assumed to receive the most recent input 
value. Therefore, bit packing and unpacking routines may be machine 
dependent since some machines potentially use the LSB for the sign bit. 
However, the interfaces must be standardized to assure code portability 

The calling procedure for the single precision routines is a 
follows; 

UNPACK (local_real , 1553_word , scaling_factor, offset) ; 


PACK ( local_real, 1553_word , scaling_factor, offset); 

local_real => benchmark software variable, 

1553 word => MIL-STD-1553 16-bit integer output, 
scalTng_factor, offset [see section D., these are real numbers]. 

The offset for a symmetric variable will be 0.0. 

A symmetric variable can also be easily encoded or decoded in the 
application by dividing or multiplying by the scaling factor. Hov/ever 
MIL-STD-1750 bit conventions must be observed (MSB is sign bit) . 




III. OMIUSICNS 


This paper has presented the data conventions, message formats, 
and word formats for the MS&T EICPM for multiprocessors. 

V. NGTES 

A. AOCNYMS 

AAS&T Advanced Avionics Subsystems & Technology 

DASL Digital Avionic Syst^ Laboratory 

ECPM Ehibedded Carputer Performance Measurement 

EEP Engineering Change Proposal 

lEB Least Significant Bit 

LSW Least Significant Word 

fEB Most Significant Bit 

Most Significant Word 
N?!WC Naval Air Warfare Center 

RT Renote Terminal 

scaling_factor Scaling Factor 

TT Texas Instruments 

UJI Unit Under Test 

B. OTHER AAS&T ECPM DOCUMENTS 

Further information on the ECPM benchmark code can be found in 
other documents produced as part of the Phase I effort. A complete 
listing of such documents is provided below. 

- Software Requirements Specification for the AAS&T ECPM CSCI 

- Interface Requirements Specification for the AAS&T ECPM 


40 


AAS&T ECPM MIL-STD-1553 Interface Definition (this document) 
AAS&T ECPM Ada Source Code Listing 

AAS&T ECPM MIL-STD-1750A Assembly Language Code Listing 
AAS&T Real-Tiire Simulation Overview, MAC Technical Report 2458 



C. AAS&T PATCH PANEL CCNFIGURATIOSf 


The MIL~STD-1553 hardware connection in DASL to the simulation 
corputers is accoirplished with two patch panels. One patch panel is 
located in the computer room and the second is near the cockpit. Refer 
to the Software User’s I^^ual for cable connections. 









SOFTWAPvE REQUIREMENTS SPECIFICATION 


FOR THE 

ADVANCED AVIONICS TECHNOLOGY DEMONSTRATION (AATD) CSCI 

OF 

AATD SYSTEM 
09/19/P0 


PREPARED BY: 


SOFTWARE TECHNOLOGY DEPARTMENT 
DEFENSE SYSTEMS 6 ELECTRONICS GROUP 
TEXAS INSTRUMENTS INCORPOPA.TED 
6550 CHASE OAKS DRIVE 
FLAJJO, TEXAS “50 P 6 


PREPARED Ei: 


APPROVED BY; 


CHUCK ROARK 



APPROVED BY: 



DAVE STRUBLC 

AATD PROGRAM MANAGER 










TABLE of Contents 


* ■ 


TABLE of CONTENTS 

Paragraph Title Page 


1. SCOPE 1 

1.1 IDENTIFICATION . 1 

1.2 CSCI Overview.1 

1.3 DOCUMENT OVERVIEW . 1 

2. REFERENCED DOCUMENTS 3 

2.1 GOVERNMENT DOCUMENTS . 3 

2.2 NON-GOVERNMENT DOCUMENTS . 3 

3. ENGINEERING REQUIREMENTS 4 

3.1 CSCI EXTERNAL INTERFACE REQUIREMENTS . 4 

3.1.1 External Interface Diagrams . 4 

3.1.2 AATD/ECPM I/F - AATD. IRS . ECPM . -.6 

3.1.3 TI Messaging I/F - AATD. IRS.MSG.6 

3.1.4 Timer I/F - AATD. IRS. TIM.6 

3.2 CSCI CAPABILITY REQUIREMENTS . 6 

3.2.1 Control AATD Capability - AATD.SRS.CTL . 9 

3.2.1.1 Seq Control AATD - AATD.SRS.CTL.01 . 11 

3.2.1.2 Init AATD - AATD. SRS. CTL. 02.15 

3.2.1.3 Control Timer - AATD.SRS.CTL.03 16 

3.2.2 Execute Nav Capability - AATD. SRS. NAV.16 

3.2.3 Execute I/O Capability - AATD.SRS.I/O . 17 

3.2.4 Measure Spare Capability - AATD.SRS.MSP . 18 

3.2.5 Determine Results Capability - AATD.SRS.RES ... 19 

3.2.6 Interface To OS Services - AATD. SRS.OS.20 

3.2.7 Measure Total lO - AATD.SRS.TOT10 21 

3.3 CSCI INTERNAL INTERFACES.21 

3.4 CSCI DATA ELEMENT REQUIREMENTS.24 

3.5 ADAPTATION REQUIREMENTS . 27 

3.5.1 Installation-Dependent Data . 27 

3.5.2 Operational Parameters . 27 

3.6 SIZING AND TIMING REQUIREMENTS.27 

3.7 SAFETY REQUIREMENTS.2 7 

3.8 SECURITY REQUIREMENTS.2 7 

3.9 DESIGN CONSTRAINTS.28 

3.10 SOFTWARE QUALITY FACTORS . 28 

ii 


































ijj-oi ui c iourur-o 


LIST of FIGURES 


Figure Title Page 

3-1 AATD CSCI Context Diagram. 5 

3-2 CSCI Capabilities DFD.8 

3-3 Control AATD Capability DFD.10 

3-4 Control AATD Subcapability STD.12 

3-5 CSCI Internal Interface Diagram . 22 








APPENDIXES 


Paragraph Title Page 

APPENDIX I AATD Benchmark Source 39 

APPENDIX II AATD Benchmark Spare Processing Mix 40 

APPENDIX III AATD Benchmark I/O Mix 41 



SCOPE 


AATD SW CSCI SRS 
September 19, 1990 




1. SCOPE 


1.1 IDENTIFICATION 

This Software Requirements Specification (SRS) establishes the 
requirements for the Computer Software Configuration Item (CSCI) 
identified as the Advanced Avionics Technology Demonstration (AATD), 
CSCI#1, of the AATD program under the terms of Contract Number 
N00163-09-C-0165 and in accordance with the AATD Statement of Work 
(SOW). 


1.2 CSCI Overview 


The AATD Program objective is to measure embedded computer system 
reserve recjuirements. It also has an objective of being able to 
compare different embedded computers with regards to processing and 
input/output (I/O) throughput. The Naval Avionics Center (NAC) has 
developed a VAX-hosted navigation benchmark. TI is to port this 
benchmark to its ITSOA-based Mission Data Processor (MDP) and 
demonstrate the benchmark at NAC. TI is also to enhance the benchmark 
by adding a mechanism to measure reserve I/O and reserve processor 
throughput. A goal of the enhanced benchmark is that it be "easily" 
portable to other vendor computers. The benchmark will be controlled 
by NAC software hosted on their Digital Avionic System Laboratory 
(DASL) VAX computers. This software will interface to the TI MDP via a 
1553B interface. The application level software protocol is described 
in the accompanying AATD Interface Requirements Specification (IRS). 

This CSCI consists of the NAC navigation b%nchmark ported to the 
TI MDP, together with enhancements to measure spare l/O and spare 
processor throughput. 


1.3 DOCUMENT OVERVIEW 

This SRS documents the requirements for programming design, 
adaptation, quality factors, and traceability of the AATD Software 
CSCI. This SRS specifies the requirements allocated to the AATD 
Software CSCI and enables AATD Systems Engineering to assess whether or 
not the completed CSCI complies with those requirements. Upon AATD 
Systems Engineering approval and authentication, this SRS becomes the 
allocated baseline for the AATD Software CSCI. This SRS is used by the 
AATD software development staff as the basis for development and formal 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


- 1 - 


AATD 



Ktl; tKh.NCt;U UOCUMfciN l b 


AATD SW CSCI SRS 
September 19, 1990 


r , 


2. REFERENCED DOCUMENTS 

The following documents, of the exact issue shown, form a part of this 
specification to the extent specified herein. 


2.1 GOVERNMENT DOCUMENTS 


DOD-STD-2167A 


Defense System Software Development - 
29 February 1988 


MIL-STD-1815A 

AATD SOW 


AATD ECPM 


Ada Programming Language - 
17 February 1983 

Statement of Work for Embedded Computer 
Performance Measurement - 
26 February 1990 

AATD Program Embedded Computer Performance 
Measurement (ECPM) MIL-STD-1553 Interface 
Definition - 
15 Aug 1990 


2.2 NON-GOVERNMENT DOCUMENTS 


SP15-25 

AATD SQPP VI.0 
AATD IRS 
AATD DN 


TI Software Engineering Standards - 
19 November 1989 

TI AATD Software Quality Assurance Plan 

TI AATD Interface Requirements Specification 

TI AATD Design Note: Benchmark Measurement - 
7 August 1990 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-3- 


AATD 



ENGINEERING REQUIREMENTS 


► 


AATD SW CSCI SRS 
September 19, 1990 



Figure 3-1 AATD CSCI Context Diagram 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-5- 


AATD 










KixwuiirUbMbN i s AATD SW CSCI SRS 

September 19, 1990 


* Calculating (Benchmark Results) 

The 

AATD 

CSCI 

is not 

executing the navigation benchmark 
calculating the benchmark results. 

but 

is in 

the 

process of 

The AATD CSCI capabilities map into the AATD 
Table I. 

CSCI 

modes 

as 

shown in 


Table I AATD CSCI Capabilities vs. CSCI Modes 


Mode 


Capability 

1 Init 

1 

Idle 1 

Execution 

1 

Calculating 

1 Nav Only 

Control 

AATD 

1 X 

1 

1 

1 

X 1 

1 

X 

1 

1 

X 

1 X 

1 

Execute 

Nav 

1 

1 

1 

1 

1 

1 

X 

1 

1 


1 X 

1 

Execute 

I/O 

1 

1 

1 

i 

1 

I 

X 

1 

1 


1 

1 

Measure 

Spare 

1 

1 

1 

1 

1 

1 

X 

1 

1 


1 

1 

Determine 

1 

1 

1 


1 

X 

i 

Results 

1 

1 

1 


1 

- 

1 


The AATD CSCI executes entirely within the 1750A processing 
module (s) contained in the TI Mission Display Processor (MDP) . 

The following paragraphs define the capability requirements of the 
AATD CSCI. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-7- 


AATD 














ENGINEERING REQUIREMENTS 


AATD SW CSCI SP.S 
ptember 19, 1990 


3.2.1 Control AATD Capability - AATD.SRS.CTL 

The purpose of the Control AATD capability is to control the 
sequencing of execution of the benchmark. In particular, this 
capability is responsible for initializing the AATD CSCI, interfacing 
with the ECPM for invocation of the benchmark and returning results, 
causing the Determine Results capability to execute upon completion of 
the Execute Nav capability, and awaiting reinvocation of the benchmark 
while idle. Figure 3-3 shows the DFD for the Control AATD capability. 
The following subparagraphs define the requirements for the Control 
AATD capability. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


- Q_ 


AATD 






AAiU ijW 

September 19, 1 


3.2.1.1 Seq Control AATD 


AATD.SRS.CTL. 01 


The purpose of the Seq Control AATD subcapability is to control 
execution of the benchmark. The State Transition Diagram for Seq 
Control AATD is shown in Figure 3-4. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


- 11 - 


AATP 


Vi Ch 









AAXD SW CSC I SRS 
Septen\ber 19, 1990 


The requirements for Sequence Control AATD are: 

* (AATD.SRS.CTL.01-1] Sequence Control AATD shall place itself in 
the initialization mode and invoke the Init AATD capability. 

* [AATD.SRS.CTL.01-2] Upon completion of Init AATD (as signified 
by Init_Complete), Sequence Control AATD shall place itself in 
the idle mode and await benchmark commands from the ECPM. 

* (AATD.SRS.CTL.01-3] While in the idle mode, upon reception of a 
Nav_Only benchmark command. Sequence Control AATD shall place 
itself in the Nav Only mode and invoke Execute Nav (via 
Nav_Start). 

* [AATD.SRS.CTL.01-4] While in the idle mode, upon reception of a 
Benchmark benchmark command. Sequence Control AATD shall place 
itself in the Execution mode and set up the benchmark timeout 
by invoking Control Timer (via Start_Timer). Upon completion 
of the benchmark timer setup (as signified by Timer_Started) , 
Sequence Control AATD shall invoke Execute Nav (via Nav Start), 
Execute lO (via IO_Start) , and Measure Spare (via Spare_Start) . 

* (AATD.SRS.CTL.01-5] While in the idle mode, upon reception of a 
Stop benchmark command, Sequence Control AATD sha'C remain in 
the idle mode and ignore the command. 

* [AATD.SRS.CTL.01-6] While in the idle mode, upon reception of a 
Measure_IO benchmark command. Sequence Control AATD shall start 
the measurement of total I/O by invoking the Measure Total 10 
capability (via MeasureIO_Start). Upon completion of the 
measurement of total I/O (as signified via MeasureIO_Complete) , 
Sequence Control AATD shall return to the idle mode. 

* (AATD.SRS.CTL.01-7) While in the Nav Only mode, upon reception 
of a Stop benchmark command. Sequence Control AATD shall halt 
the execution of Execute Nav (via Nav_Stop) and return to the 
idle mode, awaiting a benchmark command. 

* (AATD.SRS.CTL.01-8] While in the Execution mode, upon reception 
of the benchmark timeout (as indicated via Timeout), Sequence 
Control AATD shall halt the execution of Execute Nav (via 
Nav_Stop), Execute 10 (via IO_Stop), and Measure Spare (via 
Spare_Stop), invoke Determine Results (via Determine_Results) , 
and enter the Calculating mode. 

* (AATD.SRS.CTL.01-9] While in the Execution mode, upon reception 
of an error indication (via Nav_Error) from Execute Nav, 
Sequence Control AATD shall halt the execution of Execute Nav 
(via Nav_Stop), Execute 10 (via I0_Stop), and Measure Spare 
(via Spare_Stop), signal the occurrence of the error (via 
Bench_Error) to the ECPM, and return to the idle mode, awaiting 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-13- 


AATD 





September 19, 1990 


Table II Control AATD Inputs/Outputs 


NAME 

I/O 

DESCRIPTION 

Nav Error 

IN 

Navigation error indication 

Bench Cmd 

IN 

Benclimark command 

MeasureIO_Complete 

IN 

Signal indicating Total I/O 
has been measured 

Results_Complete 

IN 

Signal indicating results have 
been calculated and transferred 

Timeout 

IN 

Benchmark timeout indication 

Timer Started 

IN 

Signal signifying Benchmark timeout 
setup 

Init Complete 

IN 

Initialization complete indication 

Start_Init 

OUT 

Signal for Init AATD to begin 
execution 

MeasurelO Start 

OUT 

Signal to start measuring Total I/O 

Spare_Start 

OUT 

Command for Measure Spare 
to begin executing its 
spare execution loop 

Spare_Stop 

OUT 

Command for Measure Spare 
to stop executing its 
spare execution loop 

Nav Start 

OUT 

Signal for Execute Nav 

to begin executing navigation 

algorithm 

Nav_Stop 

OUT 

Command for Execute Nav to 
stop executing navigation 
algorithm 

Bench Error 

OUT 

Benchmark error indication 

Start Timer 

OUT 

Signal to setup benchmark timer 

IO_Start 

OUT 

Signal for Execute I/O to 
begin executing I/O mix 

IO_Stop 

OUT 

Command for Execute I/O to 
stop executing I/O mix 

Determine_Results 

OUT 

Command for Determine Results 
to calculate Measure Spare 
execution time 


3.2.1.2 Init AATD - AATD.SRS.CTL.02 

The purpose of the AATD subcapability is to initialize the AATD 

CSCI . 


The requirements for Init AATD are: 

[AATD.SRS.CTL.02-1] Init AATD shall initialize the AATD CSCI. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-15- 


AATD 



September 19, 1990 


The inputs and outputs for Execute Nav are shown in Table V. 
Table V Execute Nav Inputs/Outputs 


NAME 

I/O 

DESCRIPTION 

Nav Start 

IN 

Signal for Execute Nav 

to begin executing navigation 

algorithm 

Nav Input 

IN 

Navigation algorithm input 

Nav Stop 

IN 

Command for Execute Nav to 



stop executing navigation 
algorithm 

Nav Output 

OUT 

Navigation algorithm output 

Nav Error 

OUT 

Nav error indication 


3.2.3 Execute I/O Capability - AATD.SRS.1/0 

The purpose of the Execute I/O capability is to execute the I/O 
mix specified for the current benchmark execution. 

The requirements for Execute I/O are: 

* [AATD.SRS.I/O-lI Execute I/O shall cause the requested I/O mix 
to execute during (Benchmark) Execution mode. Refer to 
Appendix III for a description of the base I/O mix. 


The inputs and outputs for Execute I/O are shown in Table Vi. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-17- 


AATD 








tWljXlNtE-KlINHj i 


AATD SW CSCI SRS 
September 19, 1990 


Table VII Measure Spare Inputs/Outputs 


NAME 

I/O 

DESCRIPTION 

Spare Start 

IN 

Command for Measure Spare 
to begin executing its 
spare execution loop 

Spare Stop 

IN 

Command for Measure Spare 
to stop executing its 
spare execution loop 

<Updated>Loops_Executed 

OUT 

Number of loops executed in 
Measure Spare 

.5 Determine Results Capabi 

litv - 

AATD.SRS.RES 


The purpose of the Determine Results capability is to determine 
the spare processing results for the benchmark executed with the given 
I/O mix. 

The requirements for Determine Results are: 

* [AATD.SRS.RES-1] Determine Results shall determine the 

processing time that Measure Spare executed during the 

execution of the benchmark based on the information stored in 
Loops_Executed by Measure Spare. 

* [AATD.SRS.RES-2] Determine Results shall initiate a transfer to 
ECPM of the calculated time that Measure Spare Executed. 


The inputs and outputs 
Table VIII. 


for Determine Results are 


shown in 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-19- 


AATD 




September 19, 1§90 


Table IX Determine Results Inputs/Outputs 


NAME 

I/O 

Timer_Status 

IN 

Msg Results 

IN 

Msg Cmd 

OUT 

Timer Cmd 

OUT 


DESCRIPTION 


Timer related status 

Results from a message command 

Message command 

Command to invoke timer function 


3.2.7 Measure Total 10 - AATD■SRS■TOTIO 


The purpose of the Measure Total lO capability is to measure the 
total I/O available for the computer system under test. 

The requirements for Measure Total lO are: 

* (AATD.SRS.TOTIO-1] Measure Total 10 shall measure the total 10 

available for the system under test. The results shall be 
returned in terms of the base I/O mix. Refer to Appendix III 
for a description of the base I/O mix. 


The inputs and outputs for Measure Total 10 are shown in Table X. 
Table X Measure Total lO Inputs/Outputs 


NAME 

I/O 

DESCRIPTION 


MeasurelO Start 

IN 

Signal to start measuring Total I/O 

MeasurelO Complete 

OUT 

Signal indicating Total 
measured 

I/O 

Total_I0 

OUT 

Total I/O available for 
under test 

system 


3.3 CSCI INTERNAI, INTERFACES 

The AATD CSCI is shown with its logical internal interfaces in 
Figure 3-5. These logical interfaces are identified and described 
below. Detailed information concerning the data elements transmitted 
across each interface is contained in paragraph 3.4 CSCI Data Element 
Requirements. 


SOFTWARE REQUIREMENTS -21- AATD 

SPECIFICATION 









ENGINEERING REQUIREMENTS 


AATD SW CSCI SRS 
September 19, 1990 


Control AATD/Execute Nav interface (IF_CTL_NAV). This interface 
is used to pass control commands between Control AATD and 
Execute Nav. The summary information transmitted over this 
interface consists of the following: 

Data Element Source Destination 


Nav_Start CTLOl NAV02 
Nav Stop CTLOl NAV02 
Nav~Error NAV02 CTLOl 


* Control AATD/Execute 10 interface <IF_CTL_I0). This interface 
is used to pass control commands between Control AATD and 
Execute lO. The summary information transmitted over this 
interface consists of the following: 


Data Element 


Source Destination 


I0_Start CTLOl 1003 

I0_Stop CTLOl 1003 

* Control AATD/Measure Spare interface (IF_CTL_MSP). This 
interface is used to pass control commands between Control AATD 
and Execute Nav. The summary information transmitted over this 
interface consists of the following: 

Data Element Source Destination 


Spare_Start CTLOl MSP04 

Spare_Stop CTLOl MSP04 

* Control AATD/Determine Results interface (IF_CTL_RES). This 
interface is used to pass control commands between Control AATD 
and Determine Results. The summary information transmitted 
over this interface consists of the following: 

Data Element Source • Destination 


Determine_Results '"TLOl RES05 

Results_Complete RES05 CTLOl 

* Control AATD/Measure Total lO Interface (IF_CTL_MEASIO). This 
interface is used to pass control commands between Control AATD 
and Measure Total lO. The summary information transmitted over 
this interface consists of the following: 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-23- 


AATD 











SOFTWARE REQUIREMENTS 
SPECIFICATION 


-25- 


AATD 

























L\i^ v; ^ X'U.^l'iX.t^'* Ji. o 


AAiU bW CiiCI SRS 
September 19, 1990 


Table XI AATD CSCI Data Element Requirements 


Identifier 

1 Description 

1 

Units 

+- 

1 

Range 

1 

-+ 

Res 1 

Timer Started 

1 Signal indicating 

1 timer setup. 

1 

1 

N/A 

1 

1 

N/A 

[ 

1 

N/A 1 

1 

Timer Status 

1 Timer status 
[indication. See IRS 

1 

. 1 

N/A 

[ 

1 

N/A 

I 

1 

N/A 1 

1 

Total_I0 

[Total 10 available 
[target. See IRS. 

for[10 
1 

mix/sec[ 

1 

-+ - 

[tbd] 

1 

1 

-- + - 

[tbd] 1 

1 


3.5 ADAPTATION REQUIREMENTS 

This paragraph specifies the requirements for adapting the CSCI to 
site-unique conditions and to changes in system environments. 


3.5.1 Installation-Dependent Data 
None. 


3.5.2 Operational Parameters 
None. 

3.6 SIZING AND TIMING REQUIREMENTS 

The AATD CSCI has no sizing and timing requirements, except those 
which can be inferred from executing the AATD demonstration. In 
particular there are no reserve sizing and timing requirements. 


3.7 SAFETY REQUIREMENTS 
None. 


3.8 SECURITY REQUIREMENTS 


None. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-27- 


AATD 
















ENGINEERING REQUIREMENTS 


AATD SW CSCI S.RS 
September 19, 1990 


3.12 REQUIREMENTS TRACEABILITY 


Table XII Requirements Traceability Table 


Requirement Name 

1 SRS Para 

1 Ref. Doc. 

t 

1 Ref. Para 


AATD.SRS.CTL.01-1 

13.2.1.1 

1 SOW 

1 3.1.4 


AATD.SRS.CTL.01-2 

13.2.1.1 

1 AATD DN 

1 1.0 


AATD.SRS.CTL.01-3 

13.2.1.1 

i SOW 

1 3.1.4 


AATD.SRS.CTL.01-4 

13.2.1.1 

I AATD DN 

1 2,3,4 


AATD.SRS.CTL.01-5 

13.2.1.1 

1 Customer 

1 N/A 


AATD.SRS.CTL.01-6 

13.2.1.1 

1 Customer 

1 N/A 


AATD.SRS.CTL.01-7 

13.2.1.1 

I Customer 

1 N/A 


AATD.SRS.CTL.01-8 

13.2.1.1 

1 AATD DN 

1 2.0, 3.0, 

4.0 

AATD.SRS.CTL.01-9 

13.2.1.1 

1 AATD DN 

1 2.0, 3.0, 

4.0 

AATD.SRS.CTL.01-10 

13.2.1.1 

1 Customer 

1 N/A 


AATD.SRS.CTL.01-11 

13.2.1.1 

1 AATD DN 

( 2.0, 3.0, 

4.0 

AATD.SRS.CTL.02-1 

13.2.1.2 

1 AATD DN 

1 1.0 


AATD.SRS.CTL.03-1 

13.2.1.3 

1 Customer 

! N/A 


AATD.SRS.NAV-1 

13.2.2 

1 SOW 

1 3.1.4 


AATD.SRS.NAV-2 

(3.2.2 

1 AATD DN 

1 4.0 


AATD.SRS.I/O-l 

13.2.3 

1 AATD DN 

1 3.0 


AATD.SRS.MSP-1 

13.2.4 

1 AATD DN 

1 2.0 


AATD.SRS.MSP-2 

13.2.4 

1 AATD DN 

I 2.0 


AATD.SRS.MSP-3 

13.2.4 

1 AATD DN 

1 2.0 


AATD.SRS.RES-1 

13.2.5 

t AATD DN 

1 2.0 


AATD.SRS.RES-2 

13.2.5 

1 AATD DN 

1 2.0 


AATD.SRS.OS-1 

13.2.6 

1 SOW 

1 3.1.2 


AATD.SRS.OS-2 

13.2.6 

1 AATD DN 

1 2.0 


AATD.SRS.TOTIO-1 

13.2.7 

1 Customer 

1 N/A 



SOFTWARE REQUIREMENTS -29- AATD 

SPECIFICATION 












AAXU bw CSCI SRS 
September 19, 1990 


4.1.1.4 Qualification Methods 

The methods for validating the identified recjuirements are listed 
in the Test Phases fields, and are defined below: 

a. Demonstration (D). Demonstration is a method whereby the 
performance of the software product is tested by visual 
observation. Demonstration shall be used when detailed 
qualitative measurement is not required, or a requirement 
allocation is not meaningful below the system level. 

b. Inspection (I). Inspection of a software product shall use 
physical examination of the product to verify conformance to 
the requirements of the product. 

c. Analysis (A). Analysis is the use of recognized techniques 
to explain or illustrate the performance of the software 
product. Analysis shall include the use of test drivers to 
emulate input and output activities and the interpretation or 
extrapolation of test data. 

d. Additional Qualification Methods - None. 


NOTE 

For some of the test phases, the qualification 
methods are marked as AID (analysis (A) or 
demonstration (D)) or I|D (inspection (I) or 
demonstration (D)). In such cases, the method will 
be demonstration if the testing is performed on 
AATD hardware and no software stubbing is 
necessary. Otherwise, in such cases, the method 
will be analysis or inspection, as appropriate. 
The "+" operator means "and”. N/A means not 
applicable. 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-31- 


AATD 






.-'REPARATION FOR DELIVERY 


AATD SW CSCI SRS 
September 19, 1990 


5. PREPARATION FOR 
Reference the AATD 


DELIVERY 

SDP for a discussion of preparations for delivery. 


* 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-33- 


AATD 




on ^Oo± Ot\o 


September 19, 1990 


of our system, and where possible, we have decided to think logically 
of where we get our data and control, and not physically. That is why 
we have information coming into our system from the "OPERATOR" and 
"VIDEO INTERFACE", rather than the physical hardware that we directly 
interface with. We want to concentrate on what data and control our 
system has to handle, and not how we physically receive that data and 
control. That way if some piece of hardware is redesigned, our 
requirements model should not have to change, if the interface remains 
constant. 

The next step in our modelling process is to define the major 
capabilities of our system. The major capabilities are at a very high 
level and will need more detail at a lower level. As we define the 
major capabilities, we need to define what types of data and control 
need to be passed between these capabilities. We also need to make 
sure that the data and control that we defined in the context diagram 
is present. If we need to add or take away any of these, we should 
consider it now. 

Again, this is an abstract model of our system, not a physical 
design. It is possible for our physical design to change many times 
without affecting the requirements. One of the main assumptions of the 
philosophy that encourages us to step back from the physical is that 
each process is assumed to be instantaneous, that is, as soon as each 
process gets its required inputs, it produces the required outputs. 
This is obviously not characteristic of any physical design. 

From here, we define deeper and deeper levels in the model, we 
keep checking all our inputs and outputs, and interactively work all 
levels of our model until we decide that we have a "complete" set of 
requirements. Throughout this process, we are careful to keep design 
decisions out of our model to avoid placing unnecessary constraints on 
the designer. 

The following pages give a brief description of the major visual 
pieces of the modelling philosophy, a sample Context Diagram, and Data 
Flow Diagram (DFD). 


SOFTWARE REQUIREMENTS 
SPECIFICATION 


-35- 


AATD 



sample Context 



Context Diagram 


The Context Diagram shows the boundary of the system being modeled. It also shows the 
objects that the system Interacts with. These objects are external to the system, and are 
referred to as Hs environment. 


The Context Diagram contains only one process, numbered ’O', representing the highest level of 
data flow and control flow for the system. (Note that Hatley end PIrbhal separate the data 
and control context diagrams.) Inside Process 0 Is the top-level Data Flow Diagram (DFD), also 
referred to as DFD 0. The diagram below shows the relationship between tire Context Diagram 
and DFD 0. 








APPENDIX I 


AATD SW CSCI SRS 
Septemtier 19, 1990 


APPENDIX I 

AATD Benchmark Source 


k 


S O F T W.APX PX Q O' I FX ME N 
SFECIFI^ATIO'N 


_ T a_ 


AAXr. 





tv| 


4^ 



oi 


o 


^ - 


itx 

QC W' 


■DTJ 

« « 


j,* 

>'>' 

* c 


II 11 —> 


— w O 

U.t w 

O O ^ 


5 5 

\ i 


i 

I 

c 


♦ ♦ 
9i 

« I 

it 

Ir 


)5 

IS 


« 

I I 

Is 


1-9 

Is 


ii u «S^""S 


. a8 


M O tl 




I ll 


■C z? zz 


go 1 

« t 

3 S •- »- 


“,“<BS:=S 


*^zzEZ 

3 5 o <5 -/o 




f f 

> > 
«c r 
c c 


.r::88>? 

- - 

i oe I c 2 IS I 
«<>> >wOO>> > 

— —— — 

I SX — 2 I SX^X 

>> </>o 

e<w ^ x<e<u. ^ X 

CX— ui ujCX>- ui ku 


> 

c 

c 


? 

4) 


P . 
S 


m 

i 

O tf) 
«/> 
Ig 

s* 

c 

«n • 

tfi ^ 

ii 

ii 


a- 

3 


C 4 i 

Ji? 

4 > - 

X i/t 

4- 

IX 
> — 

• c 
X o 


o 

o 


I§ 

JC S o' 
tr e £ o 




I 


> 

> 

> > fc- 

> > o • 

4 V> 

11 


• 

c 

«< OO '• 

C X o * • 

c < o *0 c 

C» »2® • 

? i 


w ^ ^ uC 

: • M. AC — 


1 

ii U II 

V <> Ui •• 

o 

V «« Ui •* 

a 

OO lO 

f| 

« 

s 

• y 

ti 


O O R3 

UJ Ui Ui UJ 

Ui Ui Ui Ui 

A A O A 


X 

m •<■ 


o o 
r u X 
C < I 

4 14 

» l« 
*# 4 X k. 

. 

itk- O 

'"i5° 
X " 

> — * K 

4 C I 

— 404 

??o C 

4 4 

A « 

4 X IP 
4 O • 

<Si 

> « • 
OC t\t 


_ Ui M 

4 « LJ 
4^ — X 

• 3 « O 


O 

i- 


i 

r c® 

4 O w 

I.. 




O i 
— o 


« M 

USX 

s^; 

_ UJ • 

•— >- u o 
«- < o • 
c ^ « o 
Aa I 

-i M 

> > 4 « 

^ a o o 

Q. C H- — 1 

4 

4 C •o X 

4 Ui « 
»- U. > u 


i: 


O • 
— O 


sg 


o • 
o 


PS 

^ s 


I 


o 

o 


(J — 


u o o < 


4 

4 

4 

j: 

4 

4 

ft 

U 

4 

O 


u u ^ 

o u hW 

« « o 

I K-I 
X >► < 

< 1 I 

z X 

X X < XX 

00«->>cvfs*Z5;j 

u. u. — I I n/i ir. 

X4CK^^*-LkrU> 

-i->u.<<<XX 

x.a.>ftxxcix 


oo * 

^ «C UJ 

w X o 


— X 
•- X 

I lUi Ui 

X X 

►- 

Ui Ui Q P 

ss|f 

Ui Ui 

— — o o 


_ III 

►-*-XX—-i-^-> 

I I I I I I I i 

>>>>>>>> 

xxxxxxxx 






c 

O' 


ii 


rsj 

O' 

o 

r<j 


I 


a 


4 

4>< 

I 

4 

c 

to 



4 

i 


a 


4 

4' 

I 

4 

s 


2 

S. 



X 

3 


I 

4 

a 

c 

i 

4 


f I 


4 

O 


s. 

4 


o o 

5 - 


LU IC 

»0 X 


k = ^ 

Q. Vi *> 1 — 

— 14 I 

Vi 4 “C — 

-“>"6 5 « 

X « 5 — 4 

•- C - 4 

^ r. a 

o - « o « o 

4 — —^ P— It 
AC i I M JK 
C X > > -J -J 4 

C « Ui IC 

c uj c c o 4 a 

C a 

oo 

4 Ui 

to o 

o 


CA 

8 

C 




i : 


K 

I 

4 

> 

I 

> 

I 

H 


X 

s 


>* 


4 

> 

1 

> 

C 

c 



3 

4 

? 

c 

> 

IS 

4 

A 


O 

rv 


4 


O 

QD 

f\i 


O iNi 
O • 
•C 
K> 




m 

> 

>■ 

4 

C 



I 

tr, 

4 

•w 

« 

C 

o 

KO 


C 

o 

s 

u 

X 


X 

>€ 

Z 






«MUJIUUiUJUiU(Ui 

P55r>r333=> 

ttaSCOSODODOD 
I I i i > ) i I 

2SE2SRSE. 

8888888B 

88888888 

^1 I • I I I I I 

000*-^*-rwK5 

<<<<<<<< 

f/> </n/) ir> in ty) t/i 
( ( ^ I ' I I I 
fcA4rkU^ir>»,r\inLr't/'- 

ocotocaeoeeKxoe 


« 

9 

> 

« 

C 


O 

o 

A 

II «-V <*H <>N ^ 

oooooo 
1 . O ’3 o d o o 

4) 

£ A A A A A A 
w II l( li II U M 

o 

Ui iA 1/! V) Vi m 
U U U L. L. L. 
ti 4i 4^ 41 4i 4i 

>* £ £ X £ X f 

4^ ^ ^ ^ ^ 

Oe OOOOOO 
UJ w w w w V 
u. 

1' II II II n It 

i .. 

Me oe oe « Of CK 

O ^U.IUJUJUJUiUi 

8 P lA. u. kfe u. «*. u. 

& U. u. u. u. u. 4*. 

*-* *332033 

UJ ^ ,00 n cB ec CD CB 

or. ( 4 I I I I I 

f »J ►- k- ►- 4- ►- #- 

►- -J333333 

3 <0.00.0.0.0. 

a(A irzxzarzx 

^C. (A — — — M 

8£ . 

zzacaezzz 

o "lTC"C 

8 4.^ •- ^N.co>®o 

3 ooooorsiKt 

OC. <<<<<<< 

U.'C 40e/></)</'00;Al/*. 

tt - f f I I I I 1 

t i/> lA fcA u** tA kTv 

i- ae. ae Qc at oc a: at 

3 c 

4^ — 

U; U 

O: 4 

O 


“52 

\ 

UJ < 

< k. U < 
►- W • * 

< < o — 
o o; ^ 

^ I • 
X * O 
3i*J3 — 
a X I 
* •• X 

••<g.. 

< o 

k- ►- tA 

< flC < - 

o o ^ 

»/> 3 3 

3 * X ^ 


u. O 

d I 

>c 

^ Ui 
X »- 


s 

«» 

c 

u 

I 

m 

C 


I 

I. 

a 

L. 

X 

w 

o 

4i 


W. «4 

tfi 

3 
M O 


ti o t 

w4i4i4i4l4i4»4>4>Ci.^^ 

.L.I.UU^St«S> x'oi 

-- 


«.! < 

< •- 
X < 

— a 
u, I 
»— 

c “ 

T.g 

*D C 
1.. 

O 

(j •• 

tJ 

C ID 
!♦- 

*>' M 

_.o.. 


O >ij o 

..^ u. — 
U. w I 
wO Of 

O •-• UJ 
— lU 

>- UJ 

2^2 

^o'2 
O— ^ I 


• 4>«>ir«i4^ti4>or *-uw 

<4'< 

-^ -- .. ^ t;, ^ 


2 


Kl > X 

-« < > (A < — 
w X < tA — tr I- X 

< 4*jc 3-1 < i- k- O 
IOOO<<« 

k-^k-tA— OC M UJ 

^oexzoear &ibox»- 
SOujujO—> o< ILJ Lu 
~X>(AU<OZ>>i-<J 


vi> 

^ I- < 

w> » 

< I 

Of Z U) 

I •-. 


»- » 
» ? 

V 3 t« 

<A ^ C • 

« 

•4- cn O 

"" O 
O — K 


UJ -> 

..I u. o 

— 1 
U. ^ V, 


<*• (. i. u 


3033333303ro 

Vuwuut^ou-uuuo 

OOOOOCOOOCOC 

l.i.Wk.WUi.l.UI.UU 

Q.aQ.aaaQ.o.aaaa 


*0 

4 


O 

k, 

a 


t> • 
wO 

u >> 

I' 

*^*o 


c 


<A 

€i 

%> 

w 

o> 

o 

o 


o 

« 

lA 

o 


3 

O 

Vi 

I 


(C 

I 


« 

■c 


■X X 

g o o 

o o 

« lA 

J A.' U W 4* O 

: 3 3 

. r «J 4JW.- 

S > > C C 

C ^ — > > 

*.» k* IT 

^ D 3 u U 4> 

« ^ fr i 

41 4j E e jD 

O X O 

4l k' aj 


& 

O 


I 

8 

u 

% 


O 

Z •€ 


X X 


£& 

IOC 


o 

d 

fi 

© '• 

d k- 

D S 

•• .J 
u 
►- I 

-gs 


W k- </) 

5>2 

* < O 

< or < 

© o or 

I i I 

> > > 

< < X 

z z z 


41 

.t 




’• 



kj 

c 



O 

o 











0 




o 

d 







II 

b 



4.^ 




• » 





•« 







c 




k- 

N- 

• « 

, ^ 


o 



2 

2 

o 

o 

' 

o 



.J 








»k 

u. 


o 


n 





m 


* * 

*• 



» • i< 

% «. 

*‘ 

• 

o 

k- 



♦AfOKl 

UI 

k- 



< 



k-A»K> 

p 

< 

k- 

v^ 

o 



uu u 

3 

o 

< 


w 

Ik^ kA 

KMO kA 

o o o 

k— 


o 


kk 

k- r>j»o 

k“ rsjkA 


PM 

u- 


II 


< < < 

u o u 

• * » 

k. 








—J 







Al A; AJ 

< 



k> 

— 



••“ A, PA 

1 

X 


< 

z 

rvj Aj rvj 

<^J Al Aj 

O LJ O 

o 

z 

X >• PM 

o 

o. 

k- rsi pA 

k- Aj jA 

O O O 

— o 

< 

1 f 1 

-J 


< < < 

U U U 


oe oj 

1 

V) cn tn 

u. 

• 



» 1. » 

u. 

z 

•— —« M. 



« » • 

» • 


UJ 0. 

UJ 

-J mI W 

‘ • 

< 




X ^ 

> 

o o o 





¥-“ ^ 

O 1 

UJ 



UJ 

k- T— 


IP- no *A 

z z 

.J 

z z z 

v*. 

X 

A, 

•- A# kA 

o u u> 

< — 

1 

o o o 

a. 

k- 

< X X 

U O O 

o o o 

z < 

ksi 

U UJ UI 


oooooo 
' • • • ^ ^ 
OO O O o V.J 

M If II II II li 


SSSSS^l^ 


^ INI 
1 1 
lu UJ 

X X 


- I I 

» UJ UJ 

t> > 

^ o — — 

UJ k- »- 

«/» 3 3 
a cj u 
< u. u. 7 O 

_j X X O -j 

O U4 UJ UJ z O 


8 

o 


i 

k« 

g 

*» 

3 

O 

4) 

L. 

« 


3 

CD 


OfzoecroeeifCKCrerzKOfttttcxttaz 

UJUJUjUJU/UJUJUJUJUJUJUJUJUJUJUJUJUJ 

UU.kkU.U,.U.ikU.U.U.^U.U.U.U.U.U.tk 

UUU.U.U.U.U..U.U.U.|kkkUfckU.U.U.U. 

333333333333333333 

GDaDaBecasaPcrooDOflDODQDODCOcecca: 

I I I I I I I I I I I r I I I I ‘ • 


i \ 


o.aaaaa.&£&a.Sa.cikao.o.ao. 

8S8S888S88S8888888 


888SS888888S888S88 

t I I t ' I i I i j I I i ( I 1 I I 

OOC’OO*- 

X<<<X<<X<<X4C<<<-' - - 

I J I I f I I f I I I ( I f 

kAfcr‘»/'ir'kr'fcr'iAiAiAir»r'iA 


lA V. lA 
. . . / f I < 

' ^ (A iA- lA lA 

Ck^ocorZCkD:Oczcxa3roruczarQr<kOc: 


z z 

UJ OJ 

"D kk u 

u 3 3 

O CC CD 
U i I 

‘11 

HI k- ♦“ 

-88 

O 

Q£ '■ •• 
O 

«S8 

i I t 
3C C. 

a < < 

►- lA tr 

5 ' ' 

O iT' yT- 

C Z CX 


N. 

o 



















































0| 


f 


1 


! 


e 


I 


i 

R 

8 

m 

pn 

uy 


X 


9i 

D 


•- « 

8 € 

X c 

iE 


o 

r\j 


atoeoeoeaeetoeacaeotoeocxosaexocot 

W Ui W UJ W M U ^ W UJ W UJ ^ ^ ^ M i4J 
U.U.I^U.U.WW«*>ifeU.U.WW.U.U.4*.WU.. 

1*1*1 r I I II t 1*1 11 I I 1*1*1 


— o 


— tr 
3 3 


£ SSiSiiSSSSSSSSSgSi 

W ►“ ^ ^ ^ ^ H* ^ ^ ^ ^ ^ ^ ^ ►“ ►“ 

• 885883388888838888 


^ r>j m fcTv t 
OOOOO* ^ 

<<<<<««<<<«<<<<<<< 

I I r i I I 1 I I I ( I t i I I I 1 

^ ^ ^ ^ ^ ^ ^ i/^ kA i/y %/> 


s 

< 

u 

< 

a 


8 


W^te.k^kkWuhkWWuk^«LU.W^4khk.M.W 

333333333330333333 
AnnCDCDSCDBCbBSflDCDttlSDfiDCBflO 
I I I I I I I I I I I I I I I I I I 

^333333333333333333 

ioSSQ.&&acLO.ek.&Q.o.a.Saaa& 

8888B888B8S88883888 

4f 

L. *• ■• *• •• •> •• *• •> *.. 

•'888B8S88888S8888B8 

« i I I t I I I I i I t t I I I i I I 

<OOOC-C»-«-*-*-»“r\;<\.rs,A.rMiA»AK^ 
0<<<<<<<<<4C<<<<<<^«; •<» 

fc«vit/»t/vi/. t/y t/> "D 

^ I > t 1 I t I I I I I I I I I I i <i^ 
<»A»/N(lAkAiA|/*. tTikAiAkAiAlAiAiAiAl/MAlA O 

—^ttoc&aracatcKfieeKOcaeacttttttettfQr ft> 


c c c c 

o o o o 


888 

< < — 

• or oct^ 

W UJ < •• 
^ w ac 
« W Ui UJ 4.* 

^ u> o ^ c 

< o u UJ o 

o < < u — 

I I IUt-‘ 
O K >« < 
ai_,f I I- 
^ X X -4 

^ S S ^ 

^ O C U K 
3 w w — I 
C> It 

^ «c < « 

< ^ -j u; « 

u a a > u 

I 


c «• 

o o 


:S 

■I 

I I 

«/ ftt 

4. i. 

3 3 


>>■ 

I It/’ M' < 

Ct c a v* H- 

*•■ <1/ 


o 

Ui 

o 


5 S 
^ ►- 
O 

8=:^ 

< 

^ o I 

>o > 

s 3 « 


ti II II 


(* 


!•- I 

■mi 

UJ 

> 


O Ul U; 

' > > 

8 1 I I 

>o >o > 

O < ' < • < 

•“ » o a o a 


X X 

'W' ^ (/)</> X X 

o o a a a. 
»/> a ^ w 
0—0900 
u ^ a (/) a 
. o — 

O flP U (A u (A 
^ ~>.CB CD 0 OD 

I — — — 

X X mJ mi mi mJ 

till 

5 < X X X X 

.*.*r 


. Hr < < < 

n ti It II M II ^ ^ a a X a 

1111 


ss. 

=f=^SSSg 


w w 

a a 

O «- O 

< — < 

V) C (A 
t I i 
ir > tr 

a C fie 


K 

'V 

|A< 

— 0 

_ 

w 

c < 

c 4r 

c 

> 4A 

> v*. 

> 

1 

> ija' 

> iTt 

1 

> 

C •- 

« 

c 

C 0 

C oc 

c 


V) *- 
Q. Ui 
CC 

8^1 
W (A •• 

o 

« u < 

•- 

<« 4U 


a.: 

I ^ 
<A a < 
O — 
U 1/1 

11 II I 


f/t — 
O. <A 

&. 


m~ »^Q, 
X — I 
a. X a 
0 . — 
(A kA 

O V) 

Do« 

« u 

<A — 

a <A UJ 

ICL X 

a k- 

— ^ I 
<A O <A 
. U O 
w w e_> 


X X 4A lA X X 

a & a a 

(fill 
f/y iT. X 

O—O—C— 
tj t/? cj lA ej to 


iM rw rsj 

« < < 


» 4A 

(A a 
a I 
ra 

8 ^ 


lA a V) 

a 10 
ca u 
a — 

— «A « 

<A • 

* —< 

— «A I- 
X fr UJ 

a Cr 
kA ►- 

a o I 

—> U lA 
tA • O 

w w U 

11 II It 


OOO 

•“ 00 

II II Ji 


000 
o —d 


000 

o d — 

It II II 


000 

odd 

11 l! It 


•- rvjfO ^ iM^i 


fO Ki ^ ^ 


000 O O O 


000 
o c d 


T- rv 

rv rv 

O (mi '_ 

c. o o 


000 

ddo 


IN.’ K^ 

»»N HA K*i 
C^- U O 

000 


I 


5R 

E tji 
i.^ u 

Sc 


•* ^ 








«o ^ 



0 

X — 

X 



Q. X 

X CL 


d 

IC 

a i 


0 

a 1 



%fy 

— a 

v> 0 


(NJ 

«A — 

0 u 

4 •• 

K> 

•• «A 

(J « 



4 C« 

« < 


>*. 

>- < 

< *- 

a >> 


UJ »- 

^ UJ 

1 ( 

C 

X UJ 

UJ X 


’© 

>0 X 

X >- 

c c 

5 

►- 

►- 1 

> > 


a 1 

ta 

f 1 


— a 

a ^ 

> > 

«p' 

<A — 

— <A 

« c 


♦ <A 

Vt ♦ 

c c 

m 

* 

« — 


i 


■c > 

S -L' 

5 ij Cl 

> > 

!• 
> ►- 
« OC 

c 0 

Vi 

H II 0 


I .2 


S 


r\i 

O' 


2 R 


U Cl 

I? 

l8 

1 C. 


c 

c 


01 
































I 


v> 

8 

o* o' 
*"1 ""1 

i i 

S 9 


8 

c ^ 

« ii 


c 

c 

k! 

K 

t> 

I 

> 

2 


I ill i 


I 

8 

tf} 


ir\ 

o 

o 


c!'o»* 

fe.-'-s 

^'ES 

•» t. o 
X « • I 

^ ' I 

u — 

'S-feS 

Q> ^ 

C 4 w 
— — C 


♦- 
iT > 

— <e 


o a 
o C X> 


a* i. 
4 c 
a > 


- t. 


. ( 


14 ^ 
> e 

>'>' 

ft ft 

c c 


c 

o> 

a 


o 

p 




4 i 
4 P 4 ^ 
X « 
^ u 

«.? 
M ^ 

•- c 

i C 
(- 4 / 
O X 


m 

o 


o 

o 


m 

k. 

o 

o 


> 


4 > 

o 

o 

• 


I I 

!■!■ 
M » 


4 > O 
> > 

1 « 
> > 
ft 0 

c c 


♦ * 1 ^ 


• 0 

I 1 

> > 

?£ 

H fl 


^ If 

« MM • ^ 

X 1 » _ 4 r — - 

«v ^ 

*- 4» ft» 5 — — 


ft ft 

t I 

> > 


> 

1 


U ft 

s? 

jr 

— ft 

cr I 

o > 

8^ 

— l/i 

t;g 

ft-- 

U 

n 

■®3 

ft U 


ft 

ft ft 

Ih 

M 

ft ft 

•o 

C ft 
• X 
X «>- 

i- X 
£> 
ft 

> e T 3 

B Ift 
r u t/* 

I O 3 


ft 

f 


ft 

ft 

i 

8 

a 


C --S 

— OX 

f s - 

ft ««- 

M c OK 

c c 

ft w 


•“ fVI >0 
Ml ft> ft) o 

& o o o 


■ 6*0 TO 
I I I 
rsifs, fNi 

»- rv. Kt 
X U ft) ftJ 

a o o o 


S 00 c 
€, * 0*0 X) 

I t : f 

u ^ ^ ^ 

*0 ^ rs; »<'> 

X ft) ft) u 

uj a o o o 


0 D) o 

ft ft U) 

£ “ S 


c 

O' 

1 


588 


58 


ft) ft) 
Ul Ul 

at oc 

88 

U ft) 


J •— 

ft- 

0 

0 


>UI ft-ft-ftZMft 

v> 

X 

X 


>Q^UUft) 0 .-l-J 

X </> 

Ul 

Ul 

0 

-Dxuiuiu)-**- — 

0 — 

Ml 

Ml 

X 


•-ft. — aeacOT'-'ft-ft^ 

2 ::S 8 SSiix^ 

O -J uj ft) ft) ft) oc 

-I < X ^ ^ ^ 

>- ft- >• O ift UJ 
UJU)UI*-)-K-ft>>> 
uuu — — — ftiUi 

lAI U 4 U) O o o X 

UlUlli>IU)UiUIO<< 

u.u.M.>>>«UW 
111 Ul Ul Ul O O 

orxxx>-iMX.-i..^ 


o < 

• s/i 
O i 
ir> 

A »- 
I) ot 

«/) II 


S8 

w I 


ft- i 

toe 


f j t ( r I t t I 

1 ^ ll^ * 1 ^ «/> kA kT* kT- 

xxorocaocorora 


*“ i/> 

< •- 

O 
kr» </5 
— yu 
OC 


w* 

«c 

> 

X 


8 

■v 

o < 

»«/> 
O I 
!/> 


.. 8 

u 

^8 5 


ooooooooo 
ooddoodoo 

M II U i> ft it M U M 

888888888 

I I I » I I I I I ^ 


O < 

• vt 
O I 
11 ^ 
A ^ 
N X 

(/I M 


8 

•• I 

O- 

o «c 
• </) 
O I 
m 


O 

X 


8 

•* I 

•— 

O X 

• tfl 
O I 
%/> 


rv 

<-*rM 

o < 

• </> 
O I 
IT' 
A ft- 
N X 

V) » 


O _ 

w I 
K 
II ^ 


»- (/) 
< •- 

D 

«/> </» 
ft- u) 

X X 


8 S? 



Ul 

X 

Ul 

u 

Ul 

0 

Ul 

0 

Ul 

S 

X 

X ft 

0 

X ft 


X ft 


X ft 


X ft 

S 

Ul 

►" 2 

X 

ft 3 

ft 

►- 2 

rv 

^ 2 

-# 

*“ 2 


ft 

0 0 

X 

00 

< 

00 


0 0 


0 0 

X 


w I 

Ul 

w 1 


1 

0 

w 1 

0 

w 1 

ft 

M 

CO 


0 - 

a 


X 

rv 

X 

Ki 

X 

w 

11 ft- 

ft 

II ft 

(A 

ti rv 

« 

II rv 

X 

N rv 

0 


•• X 

ft 

•• < 


•• < 


•• X 


«• X 


X 

</> 

mm 

to 

0 

tn 

ft 

in 

KV 

m 

ft 

< 

ft } 

8 

ft 1 


ft J 


ft 1 


ft- 1 

s 

z 

OkA 

Ok^ 

< 

2 *'^ 

Ul 

St' 

Ui 

2 ‘^ 

•J 

0 ft 

•1 

0 •“ 

ft 

0 ft 

X 

X 

0 ft 

X 

< 

IX 

U) 

IX 

< 

IX 

— 

lx 


lx 

UJ 


to • 

> 

. 

0 


ft 

rv • 


KK • 

z 


ft- in 


ft lA 


rv in 


fv xn 


rv tn 



< ft 


X ft 

•. 

X 1“ 


X ft 


X ft 


cd 

U> -j 

o> 

1/) -J 


(r> w 

rv 

(/> ft 


tn ft 

d 


0 

ft 

to 

rv 

0 

rv 

D 

rv 

D 

rv 


kTi U) 


kT tA 


t/\ it. 


iT' l/T 


in' on 


U) 

ft yj 

Ul 

ft bki 

Ul 

ft Ul 

Ul 

ft UJ 

cu 

ft U-i 

Ul 

0 

X or 

0 

X X 

0 

X X 

0 

X X 

C 

X X 

t-T 

< 


< 


< 


X 


X 


X 

«/> 


V) 


in 


1 /) 


in 


tn. 

</) 


<n 


in 


</» 


in 


tn 

Ul 


u 


Ul 


Ui 


Ul 


UJ 

z 


Z 


z 


Z 


Z 


Z 


-8 

f 

rv 

O < 

* i/> 
O I 
tn 


O 

o 


58, 

O- 

II fVj 


O 

• 00 o 

K . . 

o > >jr o -ijf 

o • o o o po »->0 o *- 

. O • • * kA' <V •“ • •— 

•-KiOOO-^rftflDOry 


•■c, 

ir- 

c < 

• l/> 

O J 
kr 
A ft 
• 11 a 


o« 


o 

X 

s 


tA 

(A 


s 

w 

O 



















o 

o 

rsi 


i 


I .2 


S 


R: 


S m 


1 


•g 

K 

f/i 

I 

U 

m 


f\) 

MO 

S 

8 M« 


O • CM 

mJ ^ C* i/> 

U. M T) ^ * 


«J 

3 

v; 

0) 

c. 

a 


( 0.0 


o 

4-) 

I 

CA 

3 


1 

O 


> 

«0 


«3 

i 


o 

w 


4; 

i. 

Oi 


O. 


8*0 


3 


C Ui 

« i*. 

•^33 


IK oe ae (k oe or 

^ UJ Ui Ui Ui Ui 
O 4^ (k Ilk (k 
£ Ilk Ilk 14 . 4 ^ 

^ ^ 0 CD K B CD CD 

o I i I I I I I 


u. 4/-*pp3p03 

^ b.<££a.£a&. 


oo •• 
doo 
« II o 


o o 

CC s 


o 

d 


o 

—'OOO 


w « * 

• oo 
• o — 

H 


'oS 

H O iU _J 


U. o 
y- 6. 
O 2 
m — 

t I 

a 

2 X 

—1/> 


• CO O- CO O '« 
> O O O iv 1-^ 'D 


2 I I ( 1 I \ lO 

“»r»4r**A4r»4r*»r'ir' o 


o 

O 2 2 . . . > 

4) O O OOO 

C.«-.2000 •• 

O • * * It H n •-< 

«<<^OOOa>.O 

K K p • O < 

uj4ki<ii II > 

^ ^ -j oc ** »< m • (C'^o 

^UJtuuj •-»000 ‘‘UJOhk 

'x'—'ll ti o I 

OOUUjMCIB^*^'^'^ «• ^ ^ .. 

M<O000< «U.<p 

o I —— I. ^*^op5x 

c« — 5k-ac 

►- I J I ^X>.ts»00'^»-. — 

oxx-j. ae [ I k-'-' —o I 

200CJ>C>>rNJLUU.LklUil 2CUJL. 

I I IX>>>‘'*-<_.^>0 
X^-^“^*UJUJik»0 I I } ►- ( fcx<u 

UJ<<2*-*-»—2>>> — — u;>>w t- 



£ 

41 

II 

«222222K 

1 ■? 

1 

3 

< 

»a2>222Cfi222C.a4-'22fM 

1 1 

c 

O 


*•* 4i 

2 

4 


C 

u 

« 

a 


o 

•»UJ 
< »- 
►- u 

K < 

OK 


2“ 

2 

-8 

8.S 


SS 

ft/> 
3 2 


o 

•C 2 

O 2 


-8 

85 


5°, 

S3 

D/> 

3 2 
« w 

2 VI 


", 8 


i ", 


2 

o 

in 

1 

Ui 

» 

O 

8 

B 

X 

u> 


2 

hU 

5 

1 

X 

UJ 

K 

3 


v> 

o 

Ui 

i 

O 

2 

O 

UJ 

2 


8 

O 

X 

U 

8 

o 


K 

& 

2 

« 

o. 

2 

a 

u.< 

B 


OOO 

o o d 


O 

> 


« 4 « 

»0 •- rg 

« 4 « 

fO *- INI 

4 4 4 

po*-rg 

k“ ^ 

rg rg rg 

rorom 

u u u 

O U U 

u u u 

OOO 

OOO 

OOO 

rg X >• 

rg X >• 

X >• 

2 2 0. 

2 2 2 

2 a. 2 

fg^Ok- 

(SitO’T- 

k- 


oj rgfg 


u u u 

U U U 

UUU 

OOO 

OOO 

OOO 

II II 11 

ii II IJ 

4 II II 


^rsi>r» ^rgKI 
^ r- rursico 

u u u o u u 

OOO OOO 

4 ♦ 4 4 4 ♦ 

^ w «-> w ^ ^ 

TO'O'D 


'D'D’O •D'O'O 


OOO 
*0^3*0 
I \ i 

U O U 
OOO 


I I I 
*- f\tr^ 
rstrsjrsj 

u u u 
OOO 

It It II 


I I i 
INlKI 

K^KIKi 

ouo 

OOO 


tl 

M 

3 


8 

l_ 

a 

c 


8. 

M- 

c 



jC 

COO 
■D T3 73 

1 i 1 

OOO 
T3 t5 TD 

1 1 1 

O O C 
■0 *0 'C 

1 J ' 

%i 





U 

k- rg g*! 


k- rg Ki 


k- rgro 

k- fVrO 

k- rg*k\ 


3 


rg rv 

K^ K' 

e 


rg rg rg 

rC rk, 

>■ fg 

u 

W U 

O g; U 

U 'w o 


O VJ u 

o o 

o gj o 

2 2 

iT 

c c o 

O C O 

OOO 

B 

4> 

o c o 

OOO 

OOO 


^ C) 


» 

u 

■D 

? 


It 

a 


E 

u 

O 

c 

a 


8 

Oi 


U C 

1 .^ o 
m ■- 
I— 


E ^ 

O C; 


v, u 


o rj 

O INI 


§g 

• «•» 

U 4-> 
« 


4> Cl ^ 


OO 

o o 


u 

X 


C It 


K >- <0 


II 

11 


4i 


V 



1 1 1 

y 




X 


k. 

o— 

c 

E E ^ 

4> 




4/ 


o 

c 

o 

i. g 9 

tit 




( 

o 

V. 

• u 


O O U 

(C 

X 

> 

rx 

> 


c 

o - 


g- »k- — 


! 



O 

B 

c 

-— w 

« 

*>> 4-> 


4.- 

C 

4 


4j — t* C 

— a a > ^ 

U 3 

u er 

u c 


o 

Dr 

a 


i! 



























i- - 


I • 

■ • O-ut 

w C 


c a. a. & 

— t t v> 

OB *« « (j L> 

- z c/> O O 

K « & & tt K «- 

- I MC « « 

IE. UU i lO i 

K t O O t/> (/) — (A 
9 OCKGDCDC/^a.^ 

a 


s ^ 

< — 

N* X *- 




Vi 

lO — — 

U. (fi 

a ^ 

^ Q c. 

UI z 


Z| 



O u X tA 

(A ^ 

t: 

<J 19 0 

2 

• • A> 


ct 


o a 

fit 

2 s 

UJ > 

wO 

U 

g 



* • II 


0 0 

X < 0. I 

oe u 


K 

«•« 

tA CO 



i 1C < 

> *- - o 

• *< UJ _l 


*- 4 kk 4 < w*- *- Q at 

<aro ttr. 
4»05—'►-••* 
'wO_UJX 
> w u C -wo^tr*- 

_«wo® —-c c 

‘OC.OuS.O‘3 ®*o- 

c is Si C > 

A> (A O. JD %> • 


B X (/> o o 
I O. a fie tt 


►-5 I M « c 

Z & i/l i/> i O - 

— fi. 004/>t/>— CA 

to aocxffixu>o 

cl^ «<<<auu 


p-» f*-! I F^ pri ^ 

»-rgKt 

u.u. 1 ^ oraeee 0.0.0. 

oeoeoe «<« <XZ 


fSiruro 
O O O 

c/> (/> (/) •• fVf*^ 
Z S Z u. u. u. 

oe oe fie 


^ rv ♦*-» 

•- C- o o o 

•- rs, W-) (,««✓'«/> 

z z z z z z 


- • • 1 I I 

rwfsjrsj 

< <c < 

^ r\jKi 

oe ae K « • « 


»- rv 

fie fie O •- <x N-i 

« < < « « « 


>- > 

gSJ 

i/»^ < 

'* Qi 

H- 

^ Oe V) oc 
O O < UJ 
WZ W > 


p « < < ^ ^ 

o oo*-ooo 

X i M W w w 

o 3 o z z z 

u < < ^ 

« fie 3 III 

fit < ^ ^ 

Ui M l> « O O O 

*- .» .. <c < 4C 

V> l» </) CO 

< Z Z <* III 

Z O O 

8 ^ »>~ S o K oe 
« * ^ . 
oe oe or « 

hu Ui Utf ^ ^ ^ ^ 

-ii ^ O 4C < «c 
CA UJ U4 U./ O O O 
O U U ^ 111 

ec U U Ui 3 3 3 

9 < « u < < < 

3 I oe or O' 

K >' < 

i i H‘ ti 1. 

p z z .. 

z 5 w ^ * I*" 

^ u. u,’ u» 

>0 <t<OC*-«-»- 

^ a. < < o: 

*• o a > fic o: o 

«€<<<*<< 

^ ^ p... f. k. ^ 

o « < < < < ^ 

< O C O O O Ci 

£ s'?'?'*'?*' 

* tA w'- V'- cr. t'- 

z z z z z z 

« t/> uo t" V t/) V 


o •- 

U) 

Ky u^ >0 
»r> o O o 

or z z z 

sZCC' 

< o o o 

o « « « 

KA CO </) 

3 111 

< 1/^ k/O 

O u- 

oe tt or 


CkX <( < 

O 0,0 o. 

*“ 3 33 

— < < < 

»- fie fie or 

Mi 

« M It II 


U 

— K >- l^i 

or I I I 

»- ..j «j 
yj Ui u> Uj 

5 > > > 

I I I 

fie > > > 
< < < 
ee z z z 

< < < < 

« < « < 

o o o o 

I I ! i 

ssss 

CO CO l/i CO 

z z z z 


lO 9 

u* u Q. 

3 3 *- O 

O O 1’ 

2 28? 

f lu — 

O O C *- 

I I lO 

X X > t- 


Nf NO rw ^ 
o lit 

c ^ ^ ^ 

Vi c c 'e *ft 

a; tl M M II It 


•- <NJ N-i ^ U-* Q. 

I I I I «E 


barometric altitude 

















0//ii//Wv\i M.zz _ riteoainc: BENCHMAR.ADA _ Page 19 07/0//1990 \7-.ZZ _ filename; BEWCHM^R.ADA _ Page ZO 












•• 






























#*0 







»» IM NO 

•- CM NO 







1^ 






PPO PO Kt 

NOHONO 

CONOCO 







< 






< < « 

< < < 

< < < 






o 

w 







« • « 

« • 4 







o 







#40 KMO 

NO NO NO 






Ul 

z 







rgfMfsj 

NO NO #40 









■5 


^ ^ ^ 



w u. t*. 

U. U. tN. 








o 

c 


Ot O' Of Oj 


oe « oe 

oe o; Qc 

ae oe fie 











X X X X 












o 















u# 



». t 1 1 


•-rsiKi 

»- rsj ro> 

^ CM NO 






< 


o 

■g. 





fOJAJPV 

PM CM CM 













< < < 

< « < 

< < < 







X 

mJ 






* * * 

fi « « 








1 

0 

c 

0000 



oaPNirv 

CM CMPM 







« 

X 


Of 

u u u u 



CM fVfSJ 

Ki #o #0 


•- CM»*0 

4-fM#0 

4- CM NO 


••0 

X 


01 

X 




tk u. 

tk tk 



PM CM PM 

f-ONONO 


4— 

1 

« 

c 


NO NO •- rv 




oe OK QC 

X 

U U U 

U U U 

uuu 



►- 

X 



NO ru •- 4- 






ooo 

OOO 

ooo 


t 

< 

1 

i/t 


« < < < 



4 ♦ 4- 

•4 4 4 







C o 


0 








4 4 4 

4 4 4 

4 4 4 


£ 

9 ^ 

< 

u 

0 




f“ CMK^ 

4- PM NO 

c 





9 

X U. 

o 



M ti H 11 





E 

o. & a 

o. a O. 

A. a Q. 



v* 1 





u. 

4C «c < 

« < < 

< < < 


XXX 

XXX 

XXX 


C 



C 

*s^ 







^ 

^ N- 

►- N- N- 












fii 

1 t i 

1 1 i 

1 f 1 

9 

••vX 


II 


c 

Z Z (/) to 

i 



NO #40 NO 


4- rsiNO 

4 - AJ NO 

^ PM #»0 


NO ^ 



0> 

*.> 

A a Q. Q. 




4^ tk 4^ 

3 


AJ CM AJ 

#n N0»4O 

4> 


< 


c 

0; 

■ ill 

9 


fie Qc o: 

fie fie fie 

UJ 

< < < 

< < < 

< « < 

X 

<o 

V N- 

<0 


X 

0 t/0 0 to 









w 


tu 


ec: 


(3000 

9 

II ft u 

It M M 

II II II 

9 

u u u 

II II 11 

» ir M 


II o 

#40 X 

01 


f 

OP CK z fie 





■£ 




4>> 

V 




c 

JC 4C ^ 

1 


Hi 

£&£ 

9 




« 

#40 

4 - NO 

i 

V u- 

J 

9 

tc 

V. 










3 

< 4- 

X — 

c 

3 





i 1 > 

{ i 1 

9 




u 

K 



u 

u 



fV po 

^ PSJ Ki 

^ PW NO 

■o 

PMNO 

4- PM NO 

4- PM N^ 


V. 

o 

V 




c 


rv i\i PM 

NO NO NO 

o. 


PM PM PM 

NO NO NO 

9 

£ N. 

u. Z 

o 

9 




< « < 

« < < 

< < < 

3 

< < < 

< < < 

< < < 

O 

C — 

•- UJ 

u 

0 

*— 




o o c 

* oe 


• O 

o 


tn — </> 

a c/) fik ee 
IQ. (/) < 
</> t 


c/> 

a OD 

< — 


o U. 
Of — 

o 

. u. at 

) — UJ 


9 

& 

C 


9 


oe 

o* 


'•W 

X i J 
« • « 

E E E 

m 

9 9 9 
.M ^ 

I t t 

= 

tr. tt vt 

♦ ♦ 4 

•- ru 

o o o 

l/> «/) CO 

XXX 




t>T3X> • 


&) 

X 

« 

~D 


X 

i 1 t 

1 0 . c 


» or 

I 


lO 

r- « 

< ►- 
C Z 


4AO 
O •-* 
It II 


E E 

I i 


° 11=^ 
o c <c 

II I I 

u u 
^ C V. 

E - O 
O 

« 

& 


X 

«; 

X 

4^ 

O 

c 


o — 

O tt 


nu o 

X c 


— >0X00 

I *- AJ . 

a X X o 


X fv- 'V 

« X X 

fM ♦ « 

rvj 


•- Kv 
X 

fM ♦ X 

PV ♦ 
O •- <>4 
CO X 

X ^ X 


« « o 

M 

I I I 
o u u 

^ V. (0 

o o o 
u o u 


»“ r\!*<0 

fNJ PS. »% 

XXX 


E E E 

I I I 

e c c 

&£& 
9 9 9 
M ^ M 

I I I 
u u u 
C C C 

Vi 9 lA 


»-r«4PP> 
<V rsj PS; 

o o o 

t/> to 1/) 

XXX 

« « « 

E E E 

t I 1 

III 

c c a 

JK .aC JM( 
t I I 
u u u 

V V V. 

o o o 

u u u 


E E E 

1 \ I 

e < c 

l£S 

e c c 

M ^ M 

I i I 
w c u 
c c c 


o o o 

to to to 

XXX 


E E E 

) ) [ 

c «r c 

&£& 
« « C 
M M ^ 

t 1 I 
u t. u 
•0 <0 V 
O C' O 
U <J u 


rsj 

o •-> 
to T 


X 

c 


f ... . 

3 

<c 

t 1 

PC 

_ 

3 




’ 4- PM NO 

Aj N-, 

•— p’s. 


A 






c. 




M 




X .-a- — 

PM 'M 



Q 

4- A. K 5 

A. NS 

a- A, — 



a 

c 


0 


PM NO 

•- Ai NO 

a- PS. •P' 

OOO 

OOO 

0 0 

0 

£ 

4^ a- •— 

PM Ai A. 

NO N' N“- 


C 

(C 

0 *- 


z 

S 


PM PS. PM 

NSNS**^ 

— V> V' 

c/*. --r. 

tr ty 

o” 

c 

u. w 

W. w s*. 


0. 0 z 

u. 


U V 


u. 

(3 

X Z X 

X Z X 

XXX 

^ X X z 

XXX 

X X 

X 

0 

Z Z Z 

z z z 

z z z 


































S 3 

•-0 

^ 01 


8 3 


- O C 3 

X a. — a 

" 8 d ft d 

a u — u.- — 

C ar KT 

C U, *~w- 

—' C X •“ X 

ar — w » w 

? d jc ^ 

c- o a 


-da: ’'I'.i 

H- w Q. < 
►- ►> O cr ■ 

< — 2 C u. 

2ig-5. 

C tw> 


aSr 2 

O t !•*— • 

O ^o- w w 

^ j . 

O = *- 

1/1 t/3 _J • %< 

XI *LU i: I 

x> Qf • • 1/1 Ui > 

►- w U.I ar: 
V a; w. ^ (CK — : 

S p5 

.or w S K 

k- ►- -*^33 

• >- 3 O ? a ( 
a; ft Sl • z ' 

8 - l-O- 
C ce C — C c 


C X *- X C X 
— u. a u- -i u- 


■• 5x3:: 2 

" 8«U'-- ' 

O S 

*QC 1/) «/) -J ■ *< 

UJ XI »r I, 

• *~- x» kO a • • ^/) u» * 

z ►“ s-' u; z : 

8 v CK » : 

s => = ^ 

*u •.» wa w»- K 

UJ o 3 

I •- fc- D o 3 ft ft I 
a ft — ft * a 
.. h p • I « C ' 
or ’•OOocO — Oe 

ft>CL ft — UJ— K«li 

►- O or to ►- ► 

aoft ►-uj>-<»-3 

8 — *- oxH-xCx: 

a — waft-JujC 

C ft I 


8 1 l,^— •- 

O- ^ ft 

—■ •- /-s I ♦ 

o s >“ 

^ »/) 1/1 -J • *OC 

XI ku M I? UJ 

X lA a • • c/) UJ *- 


-Of wft w»- %j 

ft ►- •»- r> 3 

•ft30^ftuj" 
a ft — ft • a - 

8 . } . o ' •» *1 

O a O — O a »• 

(_> — UJ — ^ ft Q 

: w IU3 p- ►“ C a 

> »~ft^< — aouj 

tx»- xOxp—»►“ 

; — ftaft—<ftO a 

» 3 C ft 


&SF..- 

O ^ X 4 

—- (M ft ^ 

< s > 

«/) 

X ^ •« t 
X lA a •• c 
ft w k 

V a ft j-' c 
= 3 = ' 
-a >- ft ► 

ft ft •»- : 

- ►- 3 o 3 c 
a ft — ft 

8 - I • ( 

O a o - 

UJ ^ UJ —. 

: w K3 ► 


.. 

— O a 
to- u.' a 
►- *- c a 

< K- a c 

C X 3 — — 

ft ft O a 


3 S ft 

»--</)«/> —’ • « 
X Ift M D 
X iT a ■ • 1/1 ft 
•-ft ft a 
V at-'^a — 
2 3 = 

-a ftft ft^ . 

ft — • ft ^ 3 

••-303ftft 
a ft — ft • a 

• S d Of 'o’ — o' 


C X — X O X 


counTfr ::= Counter 

<pnd 1 oop ; 

^r»d WfflTF NAV DATA 


APPENDIX II 


AATD SW CSCI SRS 
September 19, 1990 


AFFENDIX II 

AATD Benchmark Spare Processing Mix 


C'FTWAF-E 

FE^IFICATICN 


-4 0- 


AATD 





APPENDIX III 


AATD SW CSCI SP.S 
September 19, 1990 


APPENDIX III 
AATD Benchmark I/O Mix 


SOFTWARE REQfJIPXMENTG 
SPECIFICATION 


-41- 


AATD 




NAC'ECPM-Pl-iRS-000312 January 1991 


INTERFACE REQUIREMENTS SPECIFICATION 
FOR THE 

ADVANCED AVIONICS TECHNOLOGY DEMONSTRATION 
EMBEDDED COMPUTER PERFORMANCE MEASUREMENT PROGRAM 

(AATD ECPM) 

CONTRACT NO. N00163-09-00165 
CDRL SEQUENCE NO. A002 


PREPARED FOR: 

Naval Avionics Center 
Code 826 


PREPARED BY: 


Software Technology Department 
Defense Systems & Electronics Group 
Texas Instruments Incorporated 
6550 Chase Oaks Drive 
Piano, Texas 75086 


Authenticated by: 


Approved by: 


Date: 


Date: 


(Naval Avionics Center) 


(Texas instruments Inc.) 







NAOECPM-P1-iRS-000312 January 1991 


Table of Contents 

1. Scope. 1 

1.1. Idendfication. . I 

1.2. System Overview. 1 

U. Document Overview. 1 

1.4. Conventions...2 

2. Applicable Documents .. 3 

2.1. Government Documents.3 

2.2. Non-Government Documents .3 

3. Interface Specification.4 

3.1. Intwface Diagrams.5 

3.2. AATD to ECPM Interface-AATD.tRS.ECPM.5 

3.2.1. Interface Requirements.5 

3.2.2. Data Requirements.6 

3 J. AATD to Message Interface - AATD.IRS.MSG.6 

3 J.l. Interface Requirements.7 

3J.l.l.INmALIZE_1553_COMMUNlCATION Procedure.8 

3 J.1.2. INITIALIZE.NAVJO Procedure.9 

3.3.U.WAIT_F0R_BENCHMARK_C0MMAND Procedure.9 

3J.1.4.GET_NAV_DATA Procedure.9 

3J.I.S.WRrrE_NAV_DATA Procedure .9 

3-3.1.6. WRrrE_BENCHMARK_RESULTS Procedure. 10 

2- 3.1.7.BUILD_MESSAGE.GROUP Procedure . 11 

3- 3.U.SEND_MESSAGE_GROt;P Procedure. 1! 

3J.1.9. INITIALIZE,ADDinONALJO Procedure. II 

3 J. 1.10. DISABLE_N A VJO Procedure. 12 

3.3.I.11.ENABLE_NAV JO Procedure. 12 


li 





























_ NAC-ECPM-P1-IRS-0003 l2‘January 1991 _ 

3 J.2. Data Requirements. 12 

3.4. AATD to TIMERS Interface - AATD.mS.TIM. 12 

3.4.1. Interface Requirements. 12 

3.4.1.1. INITIALIZE.TIMERS Procedure. 13 

3.4.1.2. CLOCK Funcuon. 13 

3.4.1 J. WAIT Procedure. 14 

3.4.2. Data Requirements. 14 

3.5. Machine Dependent Types Package. 14 

3i:.l.WORD_SIZE Constant. 14 

35.2. PACKED_INTEGER_TYPE Type. 14 

3.5 J. NORMAL.PRIORITY Constant. 14 

3.6. MACHINE_DEPENDENT_PROCEDURES Package. 15 

3.6.1. RETAIN_EXCLUSIVE_CPU_CONTROLFhocedure. 15 

3.6.2. RELEASE_EXCLUSIVE_CPU_CONTROL Procedure. 15 

3.7. NUMERIC.CONVERSION.PROCEDURES Package. 15 

3.7.1. PACK Procedure. 15 

3.7.2. UNPACK Procedure. 16 

3.7 J. PACK.DOUBLE Procedure. 16 

3.7.4. UNPACK_DOUBLE Procedure. 17 

3.75. ROUND_TO_NEAREST_INTEGER Funcuon. 17 

3.7.6. TRUNCATE_TO_0 Funcuon ... 18 

35. Compiler Pragma Considerauons . 18 

3.9, Representation Specifications for Message Types. 18 

3.9.1. Message Type 1. 18 

3.9.2. Message Type 2. 18 

3.95. Message Type 3. 19 

3.9.4. Message Type 4. 19 

3.9.5. Message Type 5.20 


Hi 






































NAC-ECPM-Pi-IRS-OOOS 12 January 1991 


3.9.6. Message Type 6.20 

3.9.7. Message Type 7.20 

3.94. Message Type 10.20 

3.9.9. Message Type 15.21 

4. Quality Assurance Provisions.22 

5. Preparations for Delivery.23 

6. General Information .24 

6.1. Notes.24 

6.2. MIL-STD-1750A Configuration Information.24 

6 J. Additional lA) Task Details .25 

6.4. Comment on 1750 to 1553B I/O.25 

64. List of Acronyms.26 

Appendix A. Machine Dependent Types Package for MIL-STD-1750A .A-1 

Appendix B. I/O Services Package for MIL-STD-1750A .B-1 


List of Figures 


Figure 1. AATD ECPM Execution Profile.4 

Figure 2. AATDCSC.5 


List of Tables 


Table 1. AATD.IRS.MSG Data Elements.12 

Table 2. AATD.IRS.TIM Data Elements.14 

Table 3. Message Mix Used in Additional I/O Task.25 


Iv 

























NAC-ECPM-P1-IRS-0003 12 January 1991 


1. Scope 

1.1. Identification 

This document is the Interface Requirements Specification (IRS) for the Advanced Avionics Technology 
Demonstration (AATD) Embedded Computer Perfonnance Measurement (ECPM) Software and applies to 
the interface designated as AATD CSCI (Computer Software Configuration Item). Hus document was 
prepared for Uie Naval Avionics Center (NAQ under Contract No. N00163-09-C-0165. 

1.2. System Overview 

The puipose of the ECPM software is to provide a highly portable, advanced performance measuiement 
facility for future avionic systems. Motivation for the ECPM comes from realizing that existing evaluation 
methods do not support direct performance comparisons using reserve processor and I/O throughput. The 
ECPM is the first known attempt to provide this capability. 

The core of the ECPM is a six Degree-of-Freedom (6-DOF) simulation that accepts data from a MIL-STD- 
1SS3B interface as input and provides latitude and longitude, as well as other navigational datu, as output. 
The nature and complexity of the ECPM is such that it cannot be delivered as a standalone product for 
immediate retargeting to a new architecture. Rather, it is partitiotted in a way to facilitate its movement to 
novel architectures and backplanes. This generality places some additional requirenients on the end user to 
provide a mechanism that allows the modular components of the ECPM to communicate with the AATD 
CSCI. 

Hooks have been added to the ECPM to allow it to calculate reserve processor and I/O throughput in addition 
to positional data. The calculation of reserve throughput data allows the performance of different processors 
to be compared. To facilitate collection of this performance data, a set of calls to an underlying Network 
Operating System (NOS) have been defined to allow inter-task communication. The semantics and protocol 
of there supporting NOS procedures is one of the principal subjects of this document. 

1.3. Document Overview 

This puipose of this document is to define the interfaces between the AATD CSCI and other major 
components of the ECPM. These components have been developed to allow transportability of the software 
to new operating environments. The style of this document is intended to serve as much as a tutorial on how 
to port the ECPM as it is to document its technical details. 

This document describes the Ada specifications and supporting data structures needed to implement a set of 
primitive communications procedures. These procedures are needed to implement an interface between the 
ECPM software and a given avionic processor testbed. The first release of this demonstration software was 
implemented for MIL-STD-1750A targets communicating via a Pi bus backplane. Input to the ECPM is in 
the form of messages received over a MIL'STD-1553B interface. By convention, each message type carries 
a unique numerical designation that equates to the 1553B subaddress through which the message is routed, 
For example, message type 5 is always routed through subaddress 5. Output from the ECPM is delivered to 
an extern^ device via this same 1553B iiuerface. The low-level details associated with the reading and 
writing of these messages is handled by the NOS that underlies the ECPM software. To execute this program 
on a given processor, the user must develop a set of Ada package bodies. These bodies implement the 
semantics and protocol assumed by the NOS primitives that will implement the desired interprocessor 
communications. 


1 






NAOECPM-P1-IRS-000312 January 1991 


This section of the IRS provides an overview of the system and of this IRS. 

Section 2 of this document lists all other applicable documents. 

Section 3 of this document defines the interface requirements for the AATD CSCI. 

Section 4 of this document describes the quality assurance provisions and is not applicable. 

Section 5 of this document describes the preparations for delivery and is not applicable. 

Section 6 of this document contains general information pertaining to the requirements defined in this IRS 
and a list of acronyms. 

Section 7 of this document contains the appendices. 

This document has been produced in the format explicitly required by Data Item Description (DID) 
DI-MCCR-8(X)26A. 

1.4. Conventions 

References to the "ICD" shall be interpreted as referring to the AATD ECPM MIL-STD-1553 Interface 
Control Document, Reference [1] of Section 2.1. 

References to the "SRS" shall be interpreted as referring to the Software Requirements Specification for the 
AATD CSCI. Reference [ 1] of Section 2.2. 

References to the "IRS" shall be interpreted as referring to the Interface Requirements Specification for the 
AATD ECPM, which is this document. 


2 





NAC-ECPM-P1-IRS-000312 January 1991 


2. Applicable Documents 

2.1. Government Documents 

The following documents of the exact issue shown forni a part of this specification to the extent specified 
herein. In the event of conflict between the documents referenced herein and the contents of this specification, 
the contents of this specification shall be considered a superseding requirement. 

1. Advanced Avionics Technology Demonstration (AATD) Program. Embedded Computer 
Performance Measurement (ECPM) MIL-STD-1553 Interface Drfinition, Version 3.6: 

10 October 1990, Naval Avionics Center, Branch 826. 

2. Ada Language Reference Manual, Department of I>efense, ANS1/MIL-STD-1815A- 
1983; February 17,1983. 

Copies of specifications, standards, drawings, and publications required by suppliers in connection with 
specified procurement functions should be obtained from the contracting agency or as directed by the 
contracting officer. 

2.2. Non*Government Documents 

The following document of the exact issue shown forms a part of this specification to the extent specified 
herein. In the event of conflict between the document referenced herein and the contents of this specification, 
the contents of this specification shall be considered a superseding requirement. 

Software Requirements Specification for the Advanced Avionics Technology Demon¬ 
stration (AATD) CSC! cf AATD System; 9/19/90, Software Technology Department 
(STD), Defense Systems and Electronics Group (DSEG), Texas Instruments Incorpo¬ 
rated. This document can be obtained by contacting Software Configuration Manage¬ 
ment, Texas Instruments Incorporated, P.O. Box869305,MS 8435, Plano, Texas, 75086. 


3 



NAC-ECPM>P1»IRS-000312 January 1991 


3. interface Specification 


The following paragraphs describe the three principal interfaces to the AATD CSCI. Recall that the main 
objective of the ECPM is to measure reserve processor and I/O throughput, although raw throughput and I/O 
bandwidth can be deduced as well, 'fhe former is accomplished by calculating the number of iterations of a 
contrived (whetstone variant) instruction mix that can be executed concurrently, along with normal 6-DOF 
simulation processing, in a specified period of lime. The latter is accomplish^ by calculating the number 
of iterations of the Input/Output Built-In-Test Interface Description Specification (lOBIDS) message mix 
that can be executed in the same period. The state diagram describing the overall flow of control in this 
process is shown in Figure 1. 



Figure I. AATD ECPM Execution Profile. 


To summarize the flow of the benchmark depicted in Figure 1, the start of a benchmark event is triggered by 
receipt of a start benchmark message from the Master Computer (MC). During execution of the benchmark, 
navigational data messages continue to arrive from the Master Computer at the rate of one message every 50 
milliseconds or 20 Hz. For a single 20 Hz period, the ECPM will begin by iterating on the additional I/O 
message mix. The number of executions of the I/O mix per 50 millisecond period is specified to the ECPM 
program via a conunand word (reference word 26 in Table HI of the ICD). For each iteration of this mix, a 
counter is incremented by one. When the task controlling the additional I/O mix becomes blocked, control 
will be tnmsferred to the main portion of the benchmark responsible for the 6-DOF simulation. The 
simulation processes the navigational data and generates solutions in the form of positional data. 

When the additional I/O task becomes unblocked, it again receives control. If the simulation task blocks 
first, control will be sent to the additional processing task (this is the instruction mix based on the whetstone 
varianL) Depending on which of the two currently blocked tasks is first to become unblocked, control wiU 
then be switched to either the additional I/O task or the simulation task. The interaction between these three 
tasks continues until either the 20 Hz period expires, the overall benchmark event time has expired, or the 
simulation task misses its timeline. A missed timeline indicates that too much overhead I/O or processing 
(or both) is taking place concurrently with the simulation task. Consequently, the navigational solutions can 
no longer be delivered to the Master Computer at the required rate. When this happens, the benchmark 
essentially "breaks". 











NAC-ECPM-P 1 -IRS-000312 January 1991 


By driving the benchmaik toward this breaking point, it is possible to quantify the reserve I/O and processing 
capabilities of the unit under test In the most general tenns, this is the objective of the ECPM. By obtaining 
hard measurements of this type, the Navy can avoid the risk associated with selecting a computer that does 
not meet the performance requirements for a given program. 

3.1. Interface Diagrams 

The remainder of this document discusses procedures used in connection with the sending of messages 
between the AATD CSQ, its three principal interfaces, the Pi bus backplane, and the MIL-STD-1553B bus. 
The format and contents of the various messages are described in detail in Reference {1] of Section 2.1. 

Figure 2 shows the AATD CSQ context diagram and the external interfaces to this CSCI. The following 
subparagraphs describe each external interface associated with the AATD CSCI. 



Figure 2. AATD CSCI. 

3.2. AATD to ECPM Interface • AATD.IRS.ECPM 

The purpx)se of the interface between the ECPM and the AATD CSQ is to provide operator control and 
ECPM control of execution of the AATD CSCI and to provide a communications path for returning 
benchmark results to the ECPM. This interface contains the Benchmaik_Input and Benchmark_Output data 
flows shown in Figure 2. The associated data elements for this interface are documented in the AATD 
Software Requirements Specification (SRS) (Reference (1], Section 2.2). 

3.2.1. Interface Requlreniants 

a. CSQ Synchronization - The AATD CSQ and the ECPM will execute concurrently. The ECPM 
transmits sensor data to the AATD CSQ and receives navigation solutions and performance information 
from the AATD CSCI at a rate of 20 Hz. 

b. Communication Protocol - The ECPM will send a message to the AATD CSQ directing it to perform 
one of three possible operations: NAV_Only, Record_Results, orMeasurc_Max_IO. The format of each 
message is as described in the AATD Program ECPMMIL-STD-1553 Interface Definition referenced in 
Section 2.1 of this IRS. 


5 



NAOECPM-P1-IRS-000312 January 1991 


The purpose of each of the three functional modes is as follows: 

1. Af'AV'Onfy- Executes only the navigation (6-DOF simulation) portion of the benchmark. 

This is the code responsible for reading navigation data messages from the Master 
Computer at the 20 Hz rate and computing navigational solutions. 

2. Record_Results - Executes the additional processing instruction mix (Digital Avionic 
Systems Laboratory or DASL mix) in a standalone mode to calculate the total time 
attributable to spare processing. This function is performed after the benchmark has 
executed for some programmed duration. During execution of the benchmark, a counter 
is incremented to reflect the number of times the instruction mix was executed in the 
presence of navigational processing and additional I/O. At completion of the benchmark. 
the additional processing mix is executed by itself, for the number of iterations just 
computed, to calculate the total reserve processing time. 

3. Measure_MaxJO - Executes the additional I/O (lOBIDS) message mix in standalone 
mode to calculate the maximum possible reserve I/O time. 

c. Priority Level - The ECPM will execute independently of the AATD CSCI. No priorities are associated 
with this interface. 

3.2.2. Data Requirements 

The data elements for the ECPM Interface are described in Reference (1 ] of Section 2.1. 

3.3. AATD to Message interface • AATD.IRS.MSG 

This interface contains the Msg_Cmd and Msg_Result data flows shown in Figure 2. The purpose of the 
interface between the AATD CSCI and the Message Interface is to provide 1553B and backplane bus 
communications capability between the ECPM application program and external hardware or instrumentation 
(such as a VAX). The implementation of the messaging interface is target dependent. The configuration of 
the system under test is assumed to contain a MIL-STD-1553B Bus Interface Module (BIM) which connects, 
along with the desired processor module of interest, to a common backplane. For example, the first prototype 
of the NAC AATD software was implemented for a MIL-STD-1750A processor module and 1553B bus 
interface module connected to a Pi bus backplane. These communications capabilities were provided by the 
Texas Instruments (TI) Network Operating System (NOS). The NOS provides intertask and intermodule 
communications capabilities based on a message passing paradigm. Only a subset of the TI NOS capabilities 
were required to implement the ECPM. Equivalent functionality must be implemented by end users of the 
system to utilize the program with different architectures. The requirements for the basic set of primitives 
needed by the ECPM are described in the following paragraphs. In general terms, however, the end user 
must supply a simple message passing scheme, a 1SS3B bus driver, and a driver that supports the common 
backplane (e.g., VMEbus, Pi bus, etc.) 

In the current version of the ECPM, there are nine message types supported. Each of these messages is 
described in detail in Reference (IJ of Section 2.1. 




6 




NAC-ECPM-P1»IRS-000312 January 1991 


3.3.1. Interface Requirements 

a. CSCI Synchronization - The Message Interface will execute synchronously in response to calls from the 
AATD CSCI. Ada procedures described in the previous paragraphs implement the required messaging 
semantics and comprehend the protocol of the particular backplane bus and MIL-STD-1553B. 

b. Communication Protocol - The AATD CSCI communicates with the Message Interface using the Ada 
procedures described in the following paragraphs. 

c. Priority Level - There is no priority associated with the Message Interface. 

The nine procedures that implement the messaging interface, referred to hereafter as the IO_SERVICES 
package, are as follows: 

• INITIALIZE_1553_COMMUNICATION 

• INITIALlZE_NAV_IO 

• WAIT_FOR_BENCHMARK_COMMAND 

• GET_NAV_DATA 

• WRITE_NAV_DATA 

• WRITE_BENCHMARK_RESULTS 

• BUILD_MESSAGE_GROUP 

• SEND_MESSAGE_GROUP 

• INITIALIZE.ADDITIONALJO 

The functional behavior of each of these procedures is described in the following paragraphs. Users of the 
ECPM must keep in mind that there is an entire message passing paradigm and a set of bus control functions 
that allow the components of the ECPM to communicate. The functional software that implements the 
message passing and bus control is not delivered with the ECPM. Software to support each functional area 
must be written uniquely for each processor architecture to be measured. Fortunately, the code has been 
packaged in a way that facilitates rapid design of these supporting components. 

The ECPM consists of five Ada tasks; 

Timer Task - Performs all timing measurements associated with the ECPM. 

Additional HO Task - Generates additional message traffic to be used to quantify the 
reserve I/O capacity of the processor under test. The current implementation of this task 
is based on executing the message mix, defined for use in the lOBIDS, for some number 
of times given as input. 

AATD Control Task - Handles processing of control messages that govern the operation 
of the AATD CSa. 

NAVJEXEC Task - This is the root component of the ECPM that implements a 6-DOF 
simulation. 


1 . 

2 . 

3. 

4. 


7 




NAOECPM.pi-tRS-000312 January 1991 


5. Additionai Processing Task - Generates additional processing overhead by iterating on 
a variation of the synthetic whetstone benchmark. This modified instruction mix is 
referred to as the DASL mix. 

The Timer Task is the highest priority (most urgent) task and the Additional Processing Task is the lowest 
priority (least urgent) task. Refer to the Software Requirements Specification for a complete description of 
the various states and control modes associated with each of these tasks. 

The following paragraphs describe the parameters and functional behavior needed for each of the procedures 
required by the Message Interface. The exact format of messages referred to in the following sections are 
shown in section 3.9 

3.3.1. 1 . iNmALiZE_i553_COMMUNiCATiON Procedure 

The INITIALIZE_1553_COMMUNICATION procedure initializes the interface to the MIL-STD-1553B 
and establishes an access mechanism to the buffers through which messages will be passed between the 
AATD CSCI, external devices connected to the 1553 BIM. and any other devices connected via the common 
backplane. INmALI2[E_1553_COMMUNICATION must be implemented to do the following: 

1. Establish a cormection to the 1553B BIM that will send and receive messages to/from 
an external device (for.example, a VAX host serving as the Master Computer). The 
connection process will include any activities required to verify that the BIM is 
operational, that it is configured for use with the specific backplane and external device 
communications characteristics, and any other one-time hardware and software setup 
activities that must precede execution of the ECPM. This routine will be called exactly 
once following system power-up. 

2. Establish a buffer or pool of buffers through which messages will be passed. Depending 
on the actual configuration of the text fixture, the BIM and target processor may be 
implemented on separate modules. In this case, a buffer must be established on both the 
BIM and the target processor board. INrnALIZE_1553_COMMUNICATION ar¬ 
ranges for the allocation of a buffer at each end of the communications path. The 
addresses of these buffers will be stored in variables that are local to the IO_SER VICES 
package and known to the underlying implementation. 

Note that one possible approach to implementing the message buffers, which is the one used by the 1750A 
implementation of the ECPM, is to use the notion of a message label. Using this approach, an object called 
a label is associated with some arbitrary number of buffers. The underlying routine that manages this object 
arranges for a message to be allocated to the next available buffer. The caller of the routine that reads or 
writes a message is freed from the responsibility for managing individual buffers and instead simply routes 
messages to/from a particular label. The code implementing the label object (actually just a queue of message 
buffers) provides the functionality needed to manage the individual buffers. This approach works well for 
the ECPM which associates a unique message type with a unique 1553B subaddress. 

The lNITIALIZE_ 1553_COMMUNICATION procedure is part of the IO_SERVICES package. This 
procedure has no parameters. 


8 



NAOECPM-P1-IRS-0003 12 January 1991 


3.3.1.2. iNrriALIZE.NAV JO Procedure 

The INrnALIZE_NAV_IO procedure is used in connection with the NAV_EXEC portion of the ECPM. 
This procedure is responsible for allocating buffers to receive Type 5 messages on 1553B subaddress 5 (SA5). 
Type 5 messages contain navigational data such as acceleration, altitude, etc. Recall from section 1.3 that 
there is a one-to-one correspondence between 1553B subaddresse.*- and message types, i.e.. Type 5 messages 
are always sent via SA5, Type 2 messages via SA2. etc. 

The ENTTIALIZE_ NAVJO procedure is part of the IO_SERVICES package. This procedure has no 
parameters. 

3.3.1.3. WAIT_FOR_BENCHMARK_COMMAND Procedure 

The ECPM Interface Definition (Reference [1] Section 2.1) describes a set of messages, sent by the Master 
Computer, used to control the behavior of the ECPM. The WAIT_FOR_BENCHMARK_COMMAND 
procedure simply posts a read (with wait) to the appropriate message buffer and returns the next benchmark 
command message. Note that all benchmark command messages are delivered via 1553B SA7. This 
procedure basically suspends the encompassing task until a benchmark command is received. 

The WAIT_FOR_BENCHMARK_COMMAND is part of the IO_SERVICES package The Ada specifica¬ 
tion for this procedure is as follows: 

procedura NA1T_FOR_BEKCHMARK_COMMAND ( 

BENCHKARK_C«4MAi£_ACCESS : out 

MESSAGB^.TWBS . BENCHMAIWJ20HMAND_ACCKSS_TyPE ) ; 

The variable BENCHMARK_COMMAND_ACCESS returns a pointer to a record (buffer) containing aType 
7 message. 

3.3.1.4. GET_NAV_DATA Procedure 

The GET_NAV_DATA procedure returns an Ada access value to the caller that points to the next logical 
data message received from the MC. Navigation data messages are delivered via 1553B SA5. 

This procedure suspends the encompassing task until aType 5 message becomes available. Type 5 messages 
supply navigation^ information such as acceleration and rate data and are described in Reference [1] of 
Section 2.1. 

The GET_NAV_DATA procedure is part of the IO_SERVICES package. The Ada specification for this 
procedure is as follows: 

procodura GET_NAVJDATA ( 

RAIf_DATA_ACaESS : out 

*fflSSAGE_Tin?ES.RAirj3ATA_ACCESS_TYPE ); 

The variable RAW_DATA_ACCESS returns a pointer to a record (buffer) containing a Type 5 message. 

3.3.1.5. WRITE_N AV_DATA Procedure 

As navigation solutions are computed by the ECPM, the results are transmined back to the MC via the 155 3B 
bus using WRJTE_NAV_DATA. These results could consist of any message tyjje other than Type 5, 6, or 


9 




NAC-ECPM-P1-IRS-000312 January 1991 


7. The caller of this procedure will supply the address of the message to be sent, the length of the message 
in bytes, and the 1553B subaddress to which the message will be sent. The actual implementation of the 
write wUl vary between testbeds. In the 1750A test scenario, for example, the write is implemented as a Direct 
Memory Access (DMA) transferio the BIM. The transferred message is then routed from the BIM to external 
instrumentation via the 1553B. 

The WR1TE_NA V_DATA procedure is part of the IO_SER VICES package. The Ada specification for this 
procedure is as follows: 

procedure WR1TE_NAV__DATX ( 

RZStrLTS_ADDRBSS T In SYSTEM.address ; 

BYTB_COUNT : in positive ; 

SUBACDRESS : in SnBADDRSSSjm>B ) ; 

The variable RESULTS_ADDRESS is the address of the message to be transferred. The message contained 
at this address will be something other than Type 5, 6, or 7. The actual memory address of the message is 
obtained with Ada’s ADDRESS representation attribute (as in X’ADDRESS where X is defuied as any object, 
program unit, label, or entry). If X is defined as the data structure containing the message to be transferred, 
the RESULTS_ADDRESS parameter can be passed to this procedure by coding the parameter as: 

RESULTS_ADDRESS O X'ADDRESS 

The ADDRESS representation attribute always returns a value of the type ADDRESS defined in the package 
SYSTEM (refer lo paragraph 13.7.2 in Reference P] of Section 2.1 for more information on Ada anribuies.) 
This technique of assigning an object’s address to a variable can be used, in general, for any parameter 
declared as type SYSTEM.ADDRESS. 

The variable B YTE_COUNT is the number of bytes in the message to be transferred. For example. Type I 
messages are 6 bytes long. Type 2 messages are 28 bytes long. etc. Consult Reference [ 11 of Section 2.1 for 
a complete description of all message types. Byte counts for each message type are defined as constants in 
package MESSAGE_TYPES. For example, the BYTE_COUNT parameter for a type 7 message could be 
coded as follows: , 

BYTE__COUNT => KESSAGE_TYPES .MESSAGE__7_BrrE_COUNT 

The variable SUB ADDRESS is the 1553B subaddress to which the message will be transferred. Note that 
there is a one-to-one correspondence between 1553B subaddresses and message types, i.e.. Type 1 messages 
are always sent via SAl, Type 2 messages via SA2, etc. 


3.3.1.6. WRITE_BENCHMARK_RESULTS Procedure 

The WRITE_BENCHMARK_RESULTS procedure operates similar to WRITE_NAV_DATA. but only 
writes messages of Type 7. These messages cany the results of the benchmark and include measurements of 
spare processor and I/O throughput. The procedure uses low-level. NOS specific primitives to transfer 
benchmark results across the common backplane to the 1553B BIM. 

The WRITE_BENCHMARK_RESULTS procedure is part of the lO.SERVICES package. The Ada 
specification for this procedure is as follows: 


10 






NAC-ECPM-Pl-iRS-000312 January 1991 


procadur* 1«RITE__BENCHMAKK_R25ULTS ( 

BENCHMJa«_I(ESULTS_ADDRESS : in SYSTEM. addzass ; 

BYTE_COUNT : in pcaitiva ) ; 

The variable BENCHMARK_RESULTS_ADDRESS is the address of the Type 7 message lo be transferred. 

The variable B YTE_COUNT is the number of bytes in the message to be transferred. This b>te count will 
always be six for Type 7 messages. 

3.3.1.7. BUILO_MESSAGE_GROUP Procedure 

The BUILD_MESSAGE_GROUP procedure is part of the IO_SER VICES package and builds the Commu¬ 
nications Control Block (CCB) chain containing the messages in the lOBlDS message mix. The exact 
contents of the lOBIDS message mix. defined in Ada package AATD_DATA, is known internally to the 
BUILD_MESSAGE_GROUP procedure. At runtime, the data structure corresponding to the lOBIDS 
message mix is loaded by BUILD_MESSAGE_GROUP. via assignments to each individual record field or 
aggregate, using data supplied by the AATD_DATA package. If the message mix were to be redefined at a 
later date, the contents of AATD_DATA would have to be updated to reflect this. 

The Ada specification for BUILD_MESSAGE_GROUP is as follo'^'s: 

procadur« BUILO_MESSAGE_GROUF < 

MESSJlGE__GROtn?_ID : in MESSAGE_GROUP_ip_TYl»E > ; 

The variable MESSAGE_GROUP_ID is an integer identifier associated with the message mix. For Phase 
One of the AATD ECPM program, there is only one message mix and the value assigned to this identifier is 
superfluous. This parameter facilitates future changes to the message mix. 


3.3.1.8. SENO_MESSAGE_GROUP Procedure 

The SEND_MESS AGE_GROUP procedure is part of the IO_SER VICES package and transmits the message 
chains built by BUILD_MESSAGE_GROUP. The Ada specification for this procedure is as follows. 

procedure SEND_KESSAGE_GROUP ( 

MESS*GE_GROUP_ID : in MESSAGE_GROUP_ID_TYPE ) ; 

The variable MESSAGE_GROUP_ID is an integer identifier associated with the message mix. For Phase 
One of the AATD ECPM program, there is only one message mix and the value assigned to this identifier is 
superfluous. This parameter facilitates future changes to the message mix. 

3.3.1.9. INITIALIZE.AODITIONALJO Procedure 

The INlTIALIZE_ADDrnONAL_IO procedure is part of the IO_SERVICES package and establishes 
communication with the NOS. Part of this process includes identifying the additional I/O task to the 
underlying NOS communications procedures and reserving buffers through which messages will be passed. 
The actual mecharucs of "connecting" to a NOS will be machine dependent. 

The INTnALI2E_ADDrnONAL_IO procedure has no parameters. 


11 








NAC-ECPM-P1-IRS-000312 January I99i 


3.3.1.10. OISABLE.NAVJOProcedura 

The DISABLE_NAV_IO procedure is pan of the IO_SERVICES package and is used to prevent the 
NAV_EXEC task from receiving navigational data from the MC. The MC continuously sends input data to 
the UUT, even when the UUT is not processing the data and producing output data. Since a finite number of 
buffers are reserved for input data, the result is that overflow can occur. The DISABLE_NA V_IO procedure 
allows the NAV_EXEC task to indicate that it no longer wishes to receive navigational data. The body of 
this procedure is target-specific. For TI’s MIL-STD-1750A implementation, the procedure consists of 
sending a message to the MIL-STD-1553B BIM indicating thatdau received via subaddress 5 (SA5) should 
no longer be routed to the MIL-STD-1750A module. 

The DISABLE_NAV_IO procedure has no parameters. 

3.3.1.11. ENABLE.NAV JO Procedure 

The ENABLE_NAV_IO procedure is part of the IO_SERVICES package and enables the NAV_EXEC task 
to receive navigational data from the MC. The body of this procedure is target-specific. For TI's MIL-STD- 
1750A implementation, the procedure consists of sending a message to the MIL-S''D- 1553B BIM indicating 
that data received via subaddress 5 (SA5) should be routed to the MIL-STD-1750A module. 

The ENABLE_NAV_IO procedure has no parameters. 

3.3.2. Data Requirements 


Table 1 defines the data elements for the Message Interface: 


IDENTIFIER 

DESCRIPTION 

SRC 

DEST 

DATA TYPE 



BENCHMAFIK.COMMANO.ACCESS 

Po»H«r to Typo 7 nvotopo buffor. 

NOS 

ECPM 

ACCESS 10 

BENCHMARK.COMMANO.TYPE. 

N/A 

0.65535 

HAW_DATA_ACCESS 

Pontor to Typo 5 rrMOOpo buftor 

ECPM 

NOS 

ACCESS to RAW_OATA_TYI»E. 

N/A 

0 65535 

nESULTS_ADOflESS 

Motoogotobotfonolocpod (othorthon 

ECPM 

NOS 

SYSTEMJUX)RESS 

N/A 

0,-65535 

BVTE.COUNT 

Nurrte of byloo to banofor 

ECPM 

NOS 

POSfTiVE 

Bytes 

1.65535 

SUBACX)nESS 

1563 •ubaAdriM to «Mi friMMg* K 
ttinolorTod. 

NOS 

ECPM 

SuaAOORESS.TYPE 

N/A 

17, 10. 

15 

8ENCHMARK_RESU.TS_AOOneS$ 

at T|fpo 7 moougo m Iranolor. 

ECPM 

NOS 

1 III 

SVSTEMJtOORESS 

N/A 

0 65535 


Table 1. AATD.IRS.MSG Data Elements. 


3.4. AATO to TIMERS fmerface • AATD.IRS.TIM 
3.4.1. Interface Requirements 

a. CSCI Synchronization - The Timer Interface is called synchronously from the AATD CSCI. 


12 


















































NAC-ECPM-P1-IRS-000312 January 1991 


b. Communication Protocol - Communication with the Timer Interface is achieved with Ada procedure 
calls documented in the following paragraphs. 

c. Priority Level - There is no priority level associated with the Timer Interface. 

The AATD.IRS.TIM interface contains the Timer_Cmd. Timer_Status, and Timeout data flows shown in 
Figure 2. The purpose of the interface between the TIMERS and the AATD CSC! is to provide a mechanism 
for retrieving the time-of-day and for forcing delays. The Phase One implementation of the ECPM uses Ada 
package CALENDAR to implement this functionality. However, not all implementations of package 
CALENDAR provide the same degree of timer granularity. If the particular runtime implementation of 
package CALENDAR being used to implement a new version of the ECPM does not provide iiic desired 
resolution, the user may need to implement bodies in assembly language (or using package MA- 
CHINE_CODE) to achieve equivalent timing capabilities. 

The following paragraphs describe the parameters and functional behavior required for each of the procedures 
required by the TIMERS interface. 

3.4.1 .1. INrnAUlZE_TIMERS Procedure 

The INmALIZE_TlMERS procedure wiU be called once following power-up. The purpose of this routine 
is to provide any setup or initial configuration required for the panicular hardware timer to be used. For 
example, many timer devices, such as the Intel 8254, have several functional modes. An aj^ropriaie mode 
must be selected that implements the desired timer functionality. When taking this approach to implementing 
a timer, care must be taken to insure that reprogramming of the timer will not conflict with assumptions made 
by the Ada runtime to implement its tasking semantics. 

The INrnALI2E_TlMERS procedure is part of the TIMER package. This procedure has no parameters. 

3.4.1.2. CLOCK Function 

The CLOCK function, defined in Ada package CALENDAR, returns a single value of type CALEN- 
DAR.DAY_DURATION. The Ada specification for the CLOCK function is as follows; 

function CLOCK 

return CALEra)AR.DAY_DtJRATION; 

The function CLOCK is defined in package TIMER. 

An alternate approach to implementing this capability without package CALENDAR has been used 
successfully in other benchmark applications. This method requires the use of assembly language or package 
MACHINE_CODE to implement START, STOP, and READ functions for an available timer. Use of these 
auxiliary functions takes advantage of knowing the maximum period of the timer and assumes that an interrupt 
can be triggered each time the maximum period of the timer is reached. The START procedure essentially 
zeroes the timer and associates an interrupt with the timer event. The clock begins to increment or decrement 
with the first call to START. When a timer interrupt occurs signalling that the maximum period of the timer 
has been reached, control is transferred to an interrupt handler that simply increments a global variable by 
one and returns control to the interrupted program. At the end of the event to be measured, the STOP function 
is called and then a READ is issued to retrieve the instantaneous value of the timer. This value is then added 
to the produa of the maximum clock period and the value in the global variable. This calculation will provide 
the number of clock ticks in the event just measured. Multiplying this value by the time for one clock cycle 


13 









NAC-ECPM-P1-iRS-000312 January 1991 


gives the total event time. This approach is a bit more cumbersome, but is a reasonable alternative to package 
C.\LENDAR functions with poor resolution. 

3,4.1.3. WAIT Procedure 

The WAIT procedure implements an Ada delay statement, suspending the calling process for some specified 
number of seconds. The Ada specification for procedure WAIT is as follows: 

procedure WAIT 

( SECOKOS ; in CALENDAR.DAT_DURATXON ) ; 

3.4.2. Data Requirements 

The following data items arc called out for the Timer Interface in the Software Requirements Specification 
fortheAATDCSCI: 


IDENTIFIER 

DESCRIPTION 

SRC 

DEST 

DATA TYPE 

UNITS 

RANGE 

CALENOAR.OAV_CXJRATION 

Current Ivna. 

ECPM 

MC 

DAY DURATION 

~ 

_ 

Seconds 

0.0 . 86400 0 


Table 2. AATD.IRS.TIM Data Elements. 

3.5. Machine Dependent Types Package 

The following paragraphs describe additional machine dependent considerations for porting the ECPM to 
new backplanes and processor architectures. 

Ada package MACHINE_DEPENDENT_TYPES contains declarations for data types which are dependent 
on the specific target processor to be evaluated. Refer to Appendix A for a sample definition of this package 
for the MIL-STD-1750A target. 

3.5.1. WORD.SIZE Constant 

The constant WORD_SIZE defines the number of bits in a word as defined for the target processor. For 
example, WORD_SIZE would be 16 for the MIL-STD-1750A and 32 for processors like the Intel 80386. 
MIPSCo R3000. and the Motorola 68020. 

3.5.2. PACKEDJNTEGER.TYPE Type 

The Ada type PACKED_INTEGER_TYPE is an integer subtype that defines the length of data transferred 
between the Master Computer and the target processor under test. 

3.5.3. NORMAL_PRlORITY Constant 

The constant NORMAL.PRIORITY defines the priority of the main AATD CSCI task and the priority of 
the navigation benchmark itself Recall from Section 3.3.1 that the Timer Task is the most urgent task 


14 




















_ NAC-ECPM-Pl-tRS-000312 January 1991 _ 

(NORMAL_PRIORJTY+2) and the Additional Processing Task is the Jeasr urgent task (NORMAL_PRI- 
ORITY-1). The Additional VO Task is assigned a priority of NORMAL_PRIORrrY+1. 

3.6, MACHINE_DEPENDENT_PROCEDURES Package 

Two procedures are defined in Ada package MACHINE_DEPENDENT_PROCEDURES that allow the 
EQPM to obtain or release exclusive control of the target processor. Mutual exclusion is required in the 
ECPM when calculating maximum reserve processing throughput The precise mechanism for gaining 
mutual exclusion will vary from one testbed to the next For the MIL-STD-1750A implementation developed 
in Phase One, mutual exclusion is achieved by locking the DP module’s memory bus and disabling iniemipis. 
For other targets, instructions may be available to disable and enable interrupts explicitly. 

3.6.1. RETAIN_EXCLUSIVE_CPU_CONTROL Procedure 

A call to this parameterless procedure ensures that the caller will maintain exclusive control of the Central 
Processing Unit (CPU) until the RELEASE_EXCLUSIVE_CPU_CONTROL procedure is called. 

3.6.2. RELEASE_EXCLUSIVE_CPU_CONTROL Procedure 

A call to this parameterless procedure allows the calling procedure to be pre-empted by other tasks. 

3.7. MUMERIC_CONVERSION_PROCEOURES Package 

The Phase One implementation of the ECPM uses packing and unpacking procedures to move data in and 
out of the various message type fields. The packing is done to facilitate the transmission of 32-bit floating 
point values to the Master Computer via the 1553B without loss of accuracy. In contrast, unpacking 
procedures arc used to convert packed integers received from the Master Computer to machine dependent 
floating point values. 

3.7.1. PACK Procedure 

The PACK procedure is defined in Ada package NUMERIC_CONVERSION_PROCEDURES and has the 
following specification: 

procedure PACK ( 

IXX:ai._REAI. ; in float ; 

PACKED_VALUE : out MACHIKE_'ncPES. PACKED_INTEGER_TYPE ; 

SCALING_PACTOR : in float ; 

OnrSET : in float ) ; 

The variable LOCAL_REAL is the machine dependent floating-point value to be packed. 

The variable PACKED_VALUE is the packed integer equivalent of the LOCAL_REAL input value. The 
LOCAL_REAL value is packed using the scheme described in Reference [ 11 of Section 2.1. 

The variable SCALING_FACTOR is the machine dependent floating-point value equivalent to the resolution 
variable referred to in section B of Reference (I ] in Section 2.1. The scaling factor is used to pack a range 
of floating point numbers into a 16-bit field. 


15 


NAC-ECPM-P1-IRS-000312 January 1991 


The variable OFFSET is the machine dependent floating-point value used to shift a floating point input value 
with a nonsymmetric value range into a symmetric value range. Refer to Reference [1] in Section 2.1 for 
descriptions of the packing and unpacking algorithms. 

3.7.2. UNPACK Procedure 

The UNPACK procedure is defined in Ada package NUMERIC_CONVERSION_PROCEDURES and has 
the following specification; 

procedure UKPACK ( 

rOCAL_RZAL : out float ; 

PACKED_VALOB ; in MACHIME_TYPES.PACKED_rNTEGER_TYPE ; 
SCALING_FACTOR : in float ; 

OFFSET : in float ) ; 

The variable LOCAL_REAL is the machine dependent floating-point number generated from the 
PACKED_VALUE input parameter. 

The variable PACKED_VALUE is the packed integer value to be converted to a machine dependent floating 
point and returned via the LOCAL_RE.AL parameter. The LOCAL_REAL value is unpacked using the 
scheme described in Reference (11 of Section 2.1. 

The variable SCALING_FACTOR is the floating-point value equivalent to the resolution variable referred 
to in section B of Reference [1] in Section 2.1. The scaling factor is used to pack and unpack a range of 
floating point numbers to/from a 16-bit field. 

The variable OFFSET is the floating-point value used to dtift a floating point input value with a nonsymmetric 
value range into a symmetric value range. Refer to Reference {1) in Section 2.1 for descriptions of the packing 
and unpacking algorithms. 

3.7.3. PACK_DOUBLE Procedure 

The PACK_DOUBLE procedure is defined in Ada package NUMERIC_C0NVERS10N_PR0CEDURES 
and has the following specification: 

procedure PACXJXJUBLE ( 

LOCAIjJREAL : in float ; 

P*C1CED_VALUE_MS : out MACHINE_TTPES.PACKED_INTEGER_TyPE ; 

PACKED_VW:.tJE_LS : out MACH1NE_TYPES. PACKED_INTEGER_TYPE ; 

SCALING^FACTOR : in float ; ~ 

OFFSET “ : in float ) ; 

The variable LOCAL_REAL is the floating-point value to be packed. 

The variable PACKED_VALUE_MS will be the most significant 16-bits of the packed integer equivalent 
of the LOCAL.REAL input value. The LOCAL_REAL value is packed using the scheme described in 
Reference (1 ] of Section 2.1. 

The variable PACKED_VALUE_LS will be the least significant 16-biis of the packed integer equivalent of 
the LOCAL_REAL input value. The LOCAL_REAL value is packed using the scheme described in 
Reference [ 1 ] of Section 2.1. 


16 







NAC-ECPM-Pl-IRS-OOOS 12 January 1991 


The variable SCALING_FACrOR is the floating-point value equivalent to the resolution variable referred 
to in section B of Reference [1] in Section 2.1. The scaling factor is used to pack a range of floating point 
numbers into a 16-bit field. 

The variable OFFSET is the floating-point value used to shift a floating point input value with a nonsynvnetric 
value range into a symmetric value range. Refer to Reference (1 ] in Section 2.1 for descriptions of the packing 
and unpacking algorithms. 

3.7.4. UNPACK_DOUBLE Procedure 

The UNPACK_DOUBLE procedure is defined in Ada package NTUMERIC.CONVERSION.PROCE- 
DURES and has the following specification: 

procadura UNPACK_DOtJBI<S ( 

LOCAL_R£AZ. : out float ; 

PACKED_VALUE_MS : in MACHINB_TYPES.PACKED_INTBGER_TYPE ; 

PACKED_VALOE__LS : in MACHIlJB_T1tPES. PACiaEt>_INTEGER_TYPE ; 

SCALING_FACTOR : in float ; 

OFFSET : in float ) ; 

The variable LOCAL_REAL is the machine dependent floating-point value to be unpacked. 

The variable PACKED_VALUE_MS will be the most significant 16 bits of the packed integer equivalent of 
the LOCAL_REAL output value. The LOCAL_REAL value is unpacked using the scheme described in 
Reference [ 1 ] of Section 2.1. 

The variable PACICED_VALUE_LS will be the least significant 16 bits of the packed integer equivalent of 
the LOCAL_R£AL output value. The LOCAL_REAL value is unpacked using the scheme described in 
Reference (1 ] of Section 2.1. 

The variable SCALING_FACTOR is the machine dependent floating-point value equivalent to the resolution 
variable referred to in section B of Reference [1] in Section 2.1. The scaling factor is used to pack a range 
of floating point numbers into a 16-bit field. 

The variable OFFSET is the machine dependent floating-point value used to shift a floating point input value 
with a nonsymmetric value range into a symmetric value range. Refer to Reference (1) in Section 2.1 for 
descriptions of the packing and unpacking algorithms, 

3.7.5. ROUND_TO_NEARESTJNTEGER Function 

During the creation of fields in certain message types, it is necessary for the ECPM to convert floating point 
values to the packed integer format described in Reference [1] of Section 2.1. The Ada language does not 
specify the precise manner in which this conversion must take place and different compilers will not handle 
truncation and rounding urufoimly. To provide consistent handling irrespective of compiler implementation, 
the ECPM provides its own internal functions to perfonn rounding and truncation. 

The ROUND_TO_NEAREST_INTEGER function returns a packed integer that is the value of its floating 
point argument (VALUE) rounded to the nearest whole number. If VALUE is exactly halfway between two 
whole numbers, the result is the number with the greatest absolute magnitude. The Ada specification for 
ROUND_TO_.NEAREST_INTEGER is as foUows: 


17 






NAOECPM-P1-IRS-000312 January 1991 


function ROUm>_TO_NEAMST INTBGBR 
( VALOT : in float ) roturn 

KACHINEJDBPENDENT_TYPES.PACKED_INTEGER_7rPE ; 

3.7.6. TRUNCATE_TO_0 Function 

This function returns a packed integer that is the value of its floating point argument truncated toward zero. 
The Ada specification for TRUNCATE_TO_0 is as follows: 

function TmJNCATE_TO_0 

( VALUE : in float ) ratum 

MACHXNE_DBPBNDBNT__TYPES.PACKSO_ZNTEGKR_TYPE ; 

3.8. Compiler Pragma Considerations 

Use of compiler pragmas for implementations of the ECPM should be avoided as much as possible. The 
1750A implemeniafion of the ECPM for TTs MDP uses the PACK and PRIORITY pragmas. The pragma 
PACK is the only language-defined representation pragma. 

Consistent with guidelines published in the Ada Language Reference Manual (LRM), pragma PRIORITY 
is used in the ECPM only to indicate relative degrees of urgency and not for task synchronization. 

3.9. Representation Specifications for Message Types 

This paragraph describes the Ada representation specifications for the nine message types used by the ECPM. 
These specifications must be tailored for each target processor to accommodate differences in addressing 
modes ^yie vs. word) and bit ordering Gittle endian vs. big endian). For example, the MIL-STD-1750A 
places bit 0 on the left (big endian) and the VAX places bit 0 on the right (little endian). The record 
descriptions for the messages are shown here for demonstration purposes and correlate to the definitions in 
Reference [ 11 of Section 2.1. 


3.9.1. MessageTypei 

for KESSAGE_l_TirPE use 
record 

PSZ et 0 range 0 .. 15; 

THETA at 1 range 0 .. 15; 

PHI at 2 range 0 .. 15; 

end record; 

3.9.2. Message Type 2 

for MBSSAGE_2_T1tPE use 
record 

COMSTANTl at 0 range 0 .. 15; 
end record; 


18 






NAOECPM-P1-IR&<X)0312 January 1991 


3.9.3. Massage Type 3 

fox MESSAGE 3 TYPE use 


record 


CONSTANTl 

St 

0 

range 

0 

. . 15 

CONSTANTa 

St 

1 

range 

0 

. . 15 

CONSTANT3 

St 

2 

range 

0 

. . 15 

PSI 

St 

3 

range 

0 

. . 15 

NAV_VEL_X 

St 

4 

range 

0 

. . 15 

KAV_VEL_Y 

St 

5 

range 

0 

. . 15 

NAV_VEI._Z 

St 

6 

range 

0 

. . 15 

PLATFORM_X_ACC3eiJERATZON 

at 

7 

range 

0 

. . 15 

PIJkTFORM3r_ACCEI.ERAT ION 

St 

8 

range 

0 

. . 15 

VERTICAI._ACCZZ.ERATZON 

St 

9 

range 

0 

. . 15 

RATE_X 

St 

10 

range 

0 

. . 15 

RATa_Y 

St 

11 

range 

0 

. . 15 

RATE_2 

St 

12 

range 

0 

. . 15 

NAV_BAROMBTRIC_RATB 
end record; 

Message Type 4 

St 

13 

range 

0 

. . 15 


for MESSAGE 4 TYPE use 


record 

CONSTAKTl 

at 

0 

range 

0 

. . 15 

CONSTAirP2 

at 

1 

range 

0 

. . 15 

CONSTAirr3 

at 

2 

range 

0 

. . 15 

PSZl 

at 

3 

range 

0 

. . 15 

PSZ2 

at 

4 

range 

0 

. . 15 

THETA 

at 

5 

range 

0 

. . 15 

PKZl 

at 

6 

range 

0 

. . 15 

PHZ2 

at 

7 

range 

0 

. . 15 

NAV_VEL_Y 

at 

8 

range 

0 

. . 15 

NAV_VEL_X 

at 

9 

range 

0 

. . 15 

NAV_VEL_Z 

at 

10 

range 

0 

. . 15 

KAV_ALT1TUDE_1 

at 

11 

range 

0 

. . 15 

nav]altztude_2 

at 

12 

range 

0 

. . 15 

nav_iatztodb3)eg 

at 

13 

range 

0 

. . 15 

NAy_LONGZ TUDE_DEG 

at 

14 

range 

0 

. . 15 

CONSTANT4 

at 

15 

range 

0 

. . 15 

PlATFORM_Y_ACCELERATZON 

at 

1€ 

range 

0 

. . 15 

PLATFOHM_X_ACCEUERATZON 

at 

17 

range 

0 

. . 15 

vertzcazTacceleratzoh 

at 

18 

range 

0 

15 

CONSTANTS 

at 

19 

range 

0 

. . 15 

CONSTANTS 

at 

20 

range 

0 

. . 15 

CONSTANT? 

at 

21 

range 

0 

. . 15 

CONSTANTS 

at 

22 

range 

0 

. . 15 

CONSTANTS 

at 

23 

range 

0 

. . 15 

RATE_X 

at 

24 

range 

0 

. . 15 

BATE_Y 

at 

25 

range 

0 

. . 15 

RATE_Z 

at 

2€ 

range 

0 

. . 15 

CONSTANT10 

at 

27 

range 

0 

. . 15 


end record; 


19 







NAOECPM-PviRS-000312 January I99i 


3.9.5. Message Type 5 

for RAIfJJATAjnnPE use 
record 


PIATFORM_X_ACCEMi< 4.I0N_ 

1 

et 

0 

range 

0 

. IS 

PLATrORI<_X_ACCB'' 

~2 

Mt 

1 

range 

0 

. 15 

PIATrORM_y_ACaELERATIOM^ 


at 

2 

range 

0 

. 15 

platform”y_acc«leratiom“ 

~2 

at 

3 

range 

0 

. 15 

VERTICXL_ACaSl«RATION_l" 


at 

4 

range 

0 

. 15 

VKRTICAL“ACCEIiBATION_2 


at 

5 

range 

0 

. 15 

Hf XS_X_l” 


at 

6 

range 

0 

. 15 

RATB_X~2 


at 

1 

range 

0 

. 15 

RATB~Y_1 


at 

8 

range 

0 

. 15 

RATBI~Y_2 


at 

9 

range 

0 

. 15 

RATB_Z~1 


at 

10 

range 

0 

. 15 

RATB_2~2 


at 

11 

range 

0 

. 15 

BAROMETRIC_ALTrTODE_l 


at 

12 

range 

0 

. 15 

aAROMETRlC_XLTITUDE_2 


at 

13 

range 

0 

. . 15 


end record; 

3.9.6. Message T ype 6 

for BENCHMARK_RKSULTS_TyPE use 
record 


INPUTjCCaetAND 

at 

0 

range 

0 . . 

83 

STATUS 

at 

4 

range 

0 . . 

15 

ADD1TIONAL_PROCESSING_T1MB 

at 

5 

range 

0 . . 

31 

MAX XO COUNT 

at 

7 

range 

0 . . 

15 


end record; 

3.9.7. Message Type 7 

for BENCRMARX_CQNMAND_TyPB use 
record 


ECPMjCONTBOL_l*ORD 

at 

0 

range 

0 . . 

15 

TYPE^OFjCOMKAND 

at 

1 

range 

0 . . 

15 

BENCHMARK_DURATION_COUNTER 

at 

2 

range 

0 . . 

15 

10_MIX_ITERATIONS_PER_SECOND 

at 

3 

range 

0 . . 

15 


end record; 

3.9.8. Message Type 10 


for MESSAGE_10, 

TYPE 

use 



record 






COHSTAMTl 

at 

0 

range 

0 

. . 15; 

CONSTANT2 

at 

1 

range 

0 

. . 15; 

CONSTANTS 

at 

2 

range 

0 

.. 15; 

CONSTANT4 
end record; 

at 

3 

range 

0 

.. 15; 


20 










NAC<ECPM>PMRS-000312 January 1991 


3.9.9. Message Type 15 

for »IESSAGE_15_TrPE use 
record 

CONSTANTl et 0 range 0 .. 15 

CONSTANT2 at 1 range 0 . . 1.*^ 

CONSTANTS at 2 range 0 .. 15 

C0NSTANT4 at 3 range .0 .. 15 

CONSTANTS at 4 range 0 .. IS 

CONSTANTS at 5 range 0 .. 15 

CONSTANT? at S range 0 .. IS 

CONSTANTS at 7 range 0 .. 15 

CONSTANTS at 8 range 0 .. 15 

CONSTANTIO at 9 range 0 .. 15, 

end record; 


21 






NAC*ECPM-P1-tRS>000312 January 1991 


4. Quality Assurartce Provisions 

NONE. 


22 










_ NAOECPM-P1«IRS-0003 12 January 1991 

5. Preparations for Delivery 

NONE. 


23 




NAC-ECPM-P1-IRS-000312 January 1991 


6. General Information 

6.1. Notes 

The following assumptions were made during development of the ECPM for the MIL-STD- 1750A and will 

apply to future implementations of the program unless contrary guidance is received from NAC. 

1. When the ECPM is measuring the maximum number of iterations of the I/O message 
mix, all commands from the Master Computer will be ignored until the measurement is 
completed. When running the ECPM. users should be aware that the time required to 
process and ignore commands during a measurement event should invalidate that event 
(i.e., additional overhead has been introduced). 

2. When the ECPM is measuring the maximum spare processor reserve, all commands 
from the Master Computer will be ignored until the calculation is completed. 

3. When a stop command is received from the Master Computer while the ECPM is 
executing in N A V_ONL Y or RECORDING_R£SULTS mode, the ECPM will continue 
executing until the end of the current 50 millisecond period. At that time, a benchmark 
results message will be returned to the Master Computer. If the ECPM was in RECORD- 
ING_RESULTS mode, the status word in the benchmark results message will indicate 
that the results are invalid due to the receipt of a command while recording. 

4. A prioritized, preemptive scheduler will be used. 

5. Inputs to the navigation equations (i.e., data received via 1553B subaddresses 1,2, 3.4, 

10, and 15) are not checked for accuracy in the ECPM. 

6. If the ECPM is restarted, all navigation variables defined in the package NAV_DATA 
will be re-initialized. 

7. If a second start command is received while the ECPM is executing, it will be ignored. 

The program will continue executing until a timeout occurs or a stop command is 
received. 

6.2. MIL-STD'1750A Configuration Infomiatlon 

1. There is no requirement for the ECPM code to run in a specific address state. However, 
the Communications Services package, which is unique to TTs implementation, must 
execute from address state 0 on the MIL-STD-1750A. 

2. The size of the ECPM object module, excluding the machine dependent code needed to 
support TI’s messaging scheme, is 9006 16-bit words. The default stack size and 
pre-defined storage for access collections allocated by the Tartan compiler were suffi¬ 
cient to run the benchmark. The Tartan runtime required 7724 words of storage. The 
total memory required for all components including the ECPM, TI NOS, and Tartan Ada 
runtime was 21167 words. 


24 








NAOECPM-P1-IRS-000312 January 1991 


6.3. Additional I/O Task Detail s 

Spare I/O is measured in terms of an additional I/O mix. This mix consists of sending six identical Pi bus 
chains where each chain consists of sending 10 type 16, single slave, block Pi bus messages which use label 
addressing. For a particular experiment, all the block messages used in the additional I/O mix are either 
extended headers or short headers. The label table entries (unique to TI’s NOS) in the Slave are configured 
so as not to cause an interrupt on delivery of a message. The Slave ID field (bits 0 - 7 in HWA, where 0 is 
LSB) is implementation dependent. The value of the data associated with a message is superfluous, but the 
amount of data associated with a message (H WB) is important. The number of 16-bit words of data associated 
with each message is shown in Table 3. The value of the label field (HWCO) is implementation specific, and 
for extended headers, the value of the extended header fields (H WDO-H WD6) is implementation dependent. 
Pi bus control is vendor specific, but should allow for the Master to be interrupted on completion of a chain 
being sent. _ 


PI BUS MESSAGE 

NUMBER OP WORDS 

OP DATA 

1 

120 

2 

120 

3 

120 

4 

15 

5 

15 

6 

7 

7 

48 

6 

48 * 

9 

48 

_ 

10 

48 


Table 3. Message Mix Used in Additional I/O Task. 

6.4. Comment on 1750 to 1553B I/O 

For messages sent to the 1553B module. Pi bus block messages are to be used. Whether these messages use 
shon or extended headers, or whether label or direct addressed messages are used, is implementation 
dependent However, the structure of the dau and size of the data to be transferred in the data phase of the 
Pi bus message must be as defined in the ICD. The TI implementation uses type 16, single slave, extended 
header block Pi bus messages and label addressing. 


25 










NAC*ECPM-PMRS-000312 January 1991 


6.5. List Of Acronyms 

6-DOF 

6 Dcgrees-of-Freedom 

AATD 

Advanced Avionics Technology Demonstration 

BIM 

Bus Interface Module 

CCB 

Communications Control Block 

CSCI 

Computer Software Configuration Item 

CPU 

Central Processing Unit 

DASL 

Digital Avionic Systems Laboratory 

DID 

Data Item Eiescription 

DMA 

Direct Memory Access 

DSEG 

Defense Systems and Electronics Group 

ECPM 

Embedded Computer Performance Measurement 

ICD 

Interface Control Document 

lOBIDS 

Input/Output Built-In-Test Interface Description Specification 

IRS 

Interface Requirements Specification 

LRM 

Language Reference Manual (for Ada) 

MC 

Master Computer 

NAC 

Naval Avionics Center 

NOS 

Network Operating System 

SAx 

Subaddress X on MIL-STD-1553B (x = 1..31) 

STD 

Software Technology Department 

SRS 

Software Requirements Specification 

TI 

Texas Instruments Incorporated 

VMEbus 

VersaModule Europe bus 


26 









NAC-ECPM-PI-iRS'OOOa 12 January 1991 


Appendix A. Machine Dependent Types Package for MIL-STD>17S0A 

with SYSTEM; 

pmckege MACHINEJDEPEiroENT_TYPES is 

WORD_SIZE : constant positive 16; 

— Type of data transferred between the target 
— and master computer. 

type PACKED_INTEGER_TYPE is new integer range -32768 .. 
for PACEED_1NTEGER_TYPE'sire use 16; 

-- This is the priority of the MRIN and MAV_EXEC tasks. 
— It is iiif>lamantation-dependent. 

N0RM*I,_PR10RITY : constant SYSTEM.PRIORITY :* 11; 
end MACHINE DEPENDENT TYPES; 


32767; 







NAC>ECPM-P1-IRS>000312 January 1991 


Appendix B. i/0 Services Package for MIL-STO-1750A 


— TITLE: 1/0 Services Package 

— PURPOSE: 

This package contains procedures which allow the transfer of data 
between the target and the master computer. 

-- PROCESSING; 

N/A 

-- INPUTS: 

None 

-- OUTPUTS: 

None 

-- DEPENDENCIES; 

SYSTEM 

MESSAGE_TYPES 

— GLOBAL VARIABLES DECLARED: 

None 

-- GLOBAL VARIABLES ACCESSED: 

None 

-- EXCEPTIONS RAISED: 

None 

-- CALLED BY: 

N/A 

— CALLS: 

N/A 

-- SIDE EFFECTS: 

N/A 

-- TARGET PROCESSOR; 

inplementation-dependent 

-- DESIGN MATERIALS: 

Software Requirements Specification for the Advanced Avionics 
Technology Dexnonstration (AATD) CSCI of the AATD System, 

Advanced Avionics Technology Demonstration (AATD) Program Embedded 
Coiqputer Performance Measurement (ECPM) MIL-STD-1553B Interface 
Definition 

-- HISTORY; 

Original - 8/30/90 Diane Paul 












NAC-ECPM-P1-IRS-(XX>312 January 1991 


with SYSTEM; 
with MBSSAGE_TYI>BS ; 

package ZO_SERVICBS is 

-- Declare the subaddresses used by the benchmark. 

type SUBADDRESS_TYPE is (SAl, SA2, SA3, SA4, 1NPOT_DATA_SA, 

PEM*_DATA_SA, BENCH_aCD_SA, SAIO, SAl 5) 

for SUBADDRESS_TYPE use (SAl * 1, ~ 

SA2 « 2, 

SA3 « 3, 

SA4 a 4, 

INPOT_DATA__SA « 5, 

PERF_DATA_SA « 6, 

BENCH_CMD_SA » 7, 

SAIO « 10, 

SA15 * 15); 

— Declare the procedures used to cotamunicate with the MC. 

procedure INIT1ALIZE_1553_C0MMUNICATI0N; 

procedure INITIAL1ZE_NAV_I0; 

procedure WAIT_FOR_BENan4ARK_C(»!MAND ( 

BENCHMARK_COMMAND_ACCESS~: out 

HESSAGi_TYPES.BENCHMARK_COMMAND_ACCBSS_TYPE); 

procedure GET__NAVJ5ATA ( 

RAM_DATA_XcCESS : out MESSAGE_TYS'ES .RAM_DATA_ACCESS_TYPE) ; 

procedure WRITE_NAV_DATA (RESUI.TS_ADDRESS : in SYSTEM.address; 

BYTE_CODNT : in positive; 

SXreADDRESS : in SUBADDRESS_TYPE); 

procedure WRITE_BENCHMARK_RESUI.TS ( 

BENCHMARK_RESULTS_ADDRESS : in SYSTEM.address; 

BYTE_COUNT : in positive); 

end 10 SERVICES; 


B-2 










NAC-ECPft*-Pl->RS-000312 January 1991 


— TITLE; I/O Services Package 

-- PURPOSE: 

This package contains procedures which allow the transfer of data 
between the target and the master cos^uter, as well as data structures 
used by the separate procedures. 

— PROCESSING: 

N/A 

-- INPUTS; 

None 

— OUTPUTS; 

None 

— DEPENDENCIES; 

SYSTEM 

VHSIC_1750A_DEPENDENT_TYPES 

P IBUS__INTERrACE_TYPES 

COM_TYPES 

MESSAGE_SERVICZ3 

MDP_COMM_PROCEDURES 

MDP_COMMUNICATIONS 

MACHINE_DEPENDENT_TYPES 

-- global VARIABLES DECLARED: 

None 

-- GLOBAL VARIABLES ACCESSED: 

None 

* 

-- EXCEPTIONS RAISED: 

None 

— CALLED BY; 

N/A 

-- CALLS: 

N/A 

-- SIDE EFFECTS; 

N/A 

-- TARGET PROCESSOR: 

implementation-dependent 

-- DESIGN MATERIALS: 

Software Requirements Specification for the Advanced Avionics 
Technology Demonstration (AATD) CSCI of the AATD System, 

Advanced Avionics Technology Deausnstration (AATD) Program Embedded 
Computer Performance Measurement (ECPM) MIL-STD-1553B Interface 


B-3 









NAC-ECPM-P1-IRS-000312 January 1991 


D«finltion 
— HISTORY: 

Original - 8/30/90 Diane Paul 


with SYSTEM; 

with VHSIC_1750X_DEPENDENT_TYPES; 

with MACH1NE_DBPENDENT_TYPES; 

with PIBUS_lNTERrACE_TYPES; 

with MDPJCOMMONICATIONS; 

with MDP_COMM_PROCEDURES; 

with COMJTYPES; 

with MBSSAGE_SERVICES; 

with V1750_UTILITIES; 

with UNCHECTEDJCONVERSIOK; 

package body IO_SERVICES is 

package MACHINE_TYPES renames MACHIME_DBPEMDB)rr_TYPES; 
package V17_TYPES renames VHSIC_1750X_DEPENDE»rr_TYPES; 
package PIBUS_TYPES renames PIBUS_INTERrACE_TYPES; 

function CONVERT_INTEGER_TO_SYSTEM_ADDRESS is new 
UNCHXCXED_COMVERSION( 
source = integer, 
target - SYSTEM.address); 

function CONVERT_LOGlCAl._ADDRESS_TO__SYSTEM_*DDRESS is new 

unchecked_conversionT " 

source = V17_TYPES.LOGICAL_ADDRESS_TYPE, 
target » SYSTEM.address); 

function CONVERT_SYSTEM_ADDRESS_TO_LOGICAL_ADDRESS is new 
UNCKECKEDjCONVERSION( 

source = SYSTEM.address, 

target = V17_TYPES .I,OGICya._ADDRESS_TYPE) ; 

function CONVERT_SYSTEM_M)DRESS_TO_TASK_BUrFER_ACCESS is new 
UNCHECXEOJCONVERSION ( 

source * SYSTEM.address, 

target « C0M_TYPES.TASK_BUFFER_ACCESS_TYPE); 

function C0HVERT_S0BADDRESS_T0_SA is new ONCHECKED_CONVERSION( 
source « SUBADDRESS_TYPE, 
target * MDPjCOMMDNICATIONS.SA_TYPE); 

function C0NVERT_INTEGER_T0_1X)G1CAL_ADDRESS is new 
UNCaiECKED_CONVBRSION ( 
source - integer, 

target « V17_TYPES.LOGICAL_ADDRESS_TYPE); 

function CONVERT_BENCHMARK_COMMAND_ACCESS_TO_IiOGICAL_ADDRESS is new 
UNCHECKED CONVERSION ( ~ 


B-4 







source * MESSAGE_TyPES.BENCHMARK_COMMAND_ACCESS_TYPE, gCODE A = 
target = V17_TYPES.LOGICAL_ADDRESS_TyPB); 0CODE A * 

function C<aiVKRT_LOGICAL__ADDRESS_TO_BEIICHMARK_COMMAND_ACCESS is new 
UNCHECiaBD_CONVERS IOnT 

source = VI7_TT£PES .LOGICALJM5DRESS_TYPE, 

target = HESSAGS_m>BS .B£KaiMARXjCOMHAND_ACCESS_TrE>E) ; 

function CONVERT_SYSTEM_ADDRESS_TO_8ENCHMARK_COMMAND_ACCESS is new 
0NCHECKED_C0NVERS10N{ 

source » SYSTEM.address, 

target = MESSAGE_TYPES .BENCHMARK_COMMAiro__ACCESS_TYPE) ; 

function COKVERT_ADDRESS_TO_MSG_BUrPER_ACCESS is new 
UNCHECKED_CONVERSIOnT 

source - SYSTEM.address, 

target = COM_TYPES.MSG_BUFFER_ACCESS); 

function CONVERT_SYSTEM__ADDRESS_TO_RAW_DATA_ACCESS is new 
UNCHEC1CED_C0NVERSI0N ( 

source s SYSTEM.address, 

target = MESSAGE_TYPES.RAW_DATA_ACCESS_TYPE), 

function CONVERT_MSG_BVFFER_ACCESS_TO__RAW_DATA_ACCESS is new 
UNCHECKED_CONVERSION ( ” 

source = COM_TYPES.MSG_BOTrER_ACCESS, 
target = MESSAGE_TYPES .RAM_DATA_JU:CESS_TYI>E) ; 

NOMBER_OF_BENCHMARK_COMMAND_BUPFERS : constant :* 2; 
BENCHM*5 k_C 0MMAND_BUFFERS : array (1 . . N0MBER_0FJ9ENCHMARK_C0MMAND_BUrPERS) 

of MESSAGE_TYPES . BENCHMARK_C0MMAND_TYF8; 

— Set up the array containing pointers to the buffers for the benchmark 
-- command messages. 

BENCHMARK_COMMAND_BUFFER_PTRS_ACCESS ; COM_TYPES . TASK_BUFFER_ACCESS_TYI>E ; = 
new COM_TYPES.TASK_BUFFER_TYPE' 

(1 = CONVERT_SYSTEM_AE>ORESS_TO_LOGICAL_ADDRESS( 

BENCHMARK_COMMAND_BUFFERS(1).ECPM__CON- 

TROL__WORD' address), 

2 » CONVERT_SYSTEM_ADDRESS_TO_LOGICAL_ADDRESS( 

BENCHMARK_COMMANr)_BUFFERS (2) .ECPM_COK- 

TROLJHORO' address), 

~ others a CONVERT_IHTEGERjrO_LOGICAL_ADDRESS{0) ); 

— Declare a local variable into which the massage can be copied so that 
-- the buffer can be released. 

LOCAL_BENCRMARX__COMMAMD ; KBSSAGE_TYPES.BBNCHMARK_COMMAND_TYFE; 
LOCAL_BENCHMARKjCMD_S*TR : MESSAGEJTYPES .BE»CHMARK_COMMAND_ACCESS_TYPE ; = 
CONVERT_SYSTEM_ADDRESS_TO_BENCHMARK_CC»IMAKD_ACCESS( 

LOCAL_BBMCHMARKjCONMAMD.ECPM_CONTROL_WORD' address); 

— Declare the input buffer into which the raw (packed) nav data will 
-- be placed. 

INPOT_BUFFER : MESSAGE_TYPES.RAW_DATA_TYPE; 

INPUT_MSG_BUFFER_ACCESS : COM_TYPES.MSG_BOFFER_ACCESS := 

CONVERT ADDRESS TO MSG BUFFER ACCESS( 








NAC-ECPM-PMRS-0003 12 January 1991 


rNPtrr_BOrPBIR. PtATF0RM_X_ACC*LERAT10N_l' «ddr«as) ; 

— Declar* thm buffar into which tha input data is copied. 

RAW_OATA : MESSAGE TYPiS.RAW_DATA_IYPE; 

RAW_DATA__PTR : MESSAGE_^TVPES. RAw“dATA~ACCESS_TYPE 

'”cOMVERT__SySTEM_ADDRESS__TO_RAMJ>ATA_ACCESS( 

RAMJ3ATA.p£A!rP0»M__X__ACCEUtRA'ri0N_l' address) ; 

— Ijeclara the table which maps aubaddresses to HIM labels to which 
messages destined for the MC are to be sent. 

SA_TO_I*ABEL__MAPPING_TABIJB : array (SUBADDRESS_TVPE) of 
lffiP_COMS0NICATIONS. aiM_SEND_IABEI._TYPE; “* 

NUI.L_SYSTEM_ADDRESS ; SYSTEM.address ; = 
CONVERT~INTEGER_TO_SYSTEM_ADDRESS(0); 

procedure INIT1ALI2E_1553_C0MMUNICATI0N is separata; 
procedure XNXTlALXZE_NAy_ZO is separate; 

procedure WAXT_FOR_BENCHMARK_COMMAND ( 

BENCHHARK_COMMAND_ACCESS : 

out MESSAGE_T»ES.BEMCKK1UUC_C0MMAMD_ACCXSS_TYPE) is separate, 
procedure GET_MAV_DATA ( 

BAM_DATA__ACCESS : out MESSAGE_^TYPES .RA»r__DATA_ACCESS^TyPE) is separate; 

procedure MRlTE_NAy_DATA (RESULTS_ADDRESS : in SYSTEM.address; 

BYTE_COUNT : in positive; 

SOBADORESS : in SUBADDRESS^TYPE) is separate. 

procedure MRITB_BENCHMARK_RESin4TS { 

BBNCKMARX_B£SULTS__ADDRBSS ; in SYSTEM.address; 

BYTE__COUNT : in positive) is separate ; 


end 10 CERVICES; 




