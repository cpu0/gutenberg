I 

' ^ TTT^i UVA DEPARTNCNT OF COMPUTER SQENCE 


N87- 29159 


k 


R 


A 


PROGRAMMING FAULT-TOLERANT 


DISTRIBUTED SYSTEMS IN Ada 


Susan J. Voigt 

Computer Science And Applications Branch 
Langley Research Center 

For Presentation At 

The Computer Science/Data Systems Technical Symposium 

Leesburg, Virginia 

April 18, 1985 


PRECEDING PAGE BLANK NOT FILMED 





2-257 


UVA DEPARTMENT OF COMPUTER SQENCE 



PROJECT GOALS 


• Examine Use And Implementation Of Ada On 
Distributed Systems 

• Programming Of Systems With “Fail- Stop” Components 

• Analyze Tolerance To Loss Of Processors 

• Propose Solutions To Language Inadequacies 

• Implement These Solutions 

• Perform Validation Experiments 

• Suggest Long-Term Changes To Ada 







DEPARTMENT OF COMPUTER SCENCE 



WHY Ada ON DISTRIBUTED SYSTEMS? 


• Ada Will Be Used Extensively In Embedded Systems 

• Embedded Systems Will Be Distributed 

• Many Applications Will Be Crucial 

— Spacecraft Systems 
— Aircraft Systems 
— Industrial Process Control 

• Distributed Systems Should Support Graceful Degradation 

— Partial Power Failure 
— Physical Damage 
— Component Failure 

• Ada Permits Distributed Targets Explicitly 


2-259 



m 


UVA DEPARTMENT OF COMPUTER SCIENCE 


Ada RENDEZVOUS 


Processor 1 Processor 2 


Task A 


Task B 



ACCEPT E DO 

B . E 

1 



END ACCEPT; 




Communications Network 


• Task A Suspended K Processor 2 Fails During ACCEPT 


2-260 








UVA department of computer soence 




Ada DIFFICULTIES 


• Language Elements That Cause Difficulty: 

— All Forms Of Rendezvous 

— Shared Variables 

— Task Elaboration And Termination 

— Loss Of Context 

— Distribution Control 

— Processor Loss - Detection And Signaling 

• Complete Lack Of Distribution Semantics 

• Complete Lack Of Failure Semantics 



2-261 




DEPARTMENT OF COMPUTER SQENCE 


SOLUTIONS 


• Short Term: 

— Define Simple Distribution Semantics 

• What Can Be Distributed 

• Where It Can Be Distributed 

• Control Of This Distribution 

• Necessary Restrictions On Program 
Structure 

— Define Failure Semantics As Equivalent To 
“ABORT” 


Long Term: 

— Complete Redefinition Of Tasking Semantics 

— Partial Replacement Of Tasking Syntax 

— Language Support For Distributed Systems 
Using Fail- Stop Components 


2-262 





DEPARTMENT OF COMPUTER SOENCE 



STATUS OF SOLUTIONS 


• Language Review Complete 

• Short Term Solution: 

— Distribution Semantics Complete 

— Failure Semantics Complete 

— Implementation Design Complete 

— Implementation Complete And Under Test 

— Realistic NASA Application Required For 
Evaluation Of All The Ideas 

• Long Term: 

— Several Proposals Being Examined 
— Radical Changes To Ada Required 
— U.Va’s Ada-2 Design Expected Soon 



2-263 






UVA department of computer soence 



OTHER ISSUES IN DISTRIBUTED SYSTEMS 


• Concurrency Implies Nondeterminism 

• Difficulties With “What K” Questions Of Language 
Semantics 

• Difficulties With “What If” Questions Of Fault-Tolerance 
Strategy 

• Require “Complete” Demonstration Of Fault Tolerance 

• Systematic, Repeatable Experiments 


2-264 





DEPARTMENT OF COMPUTER SQENCE 



TESTBED REQUIREMENTS 


• Model Arbitrary Physical Architectures 

• Represent Any Logical Organization 

• Provide Parallel Execution (The Illusion At Least) 

• Control Interprocessor Communication 

• Control Process Execution 

• Fail And Restart Processors At Well-Defined Points 

• Maintain Time Correctly 

• Provide Monitoring Facilities 


2-265 



UVA department of computer sqence 


VIRTUAL PROCESSORS 


• Key Component Of The Testbed 

• LiteraUy Ada “Virtual Machines” 

• One Virtual Processor For Each Ada Task In A Program 

• Designed To “Implement” Ada Tasking And Exception 
Handling 

• Several Different “Memories” - Whatever Is Convenient 

• “Hardware” Implemented Entry Queues 

• “Rendezvous” And Similar Instructions 


• Implemented By Simulation 




DEPARTMENT OF COMPUTER SQENCE 


ABSTRACT PROCESSORS 


Correspond To “Real” Equipment Required By 
Experimenter 


Each Abstract Processor Implements Any Number Of 
Virtual Processors 


Abstract Processors Are “Ideal” Also - E.G. Suspended, 
Failed, Etc 


Abstract Processors Communicate Via An Abstract 
Communications System 


Testbed Supports An Arbitrary Number Of Abstract 
Processors 



2-267 






UYA department of computer sqence 


EXPERIMENTAL STRUCTURE 



Abstract Communications Network 


• View Seen By Experimenter 


• AP’s Represent Ultimate Target He Has In Mind 


Lil«1 






UVA department of computer sqence 



PHYSICAL PROCESSORS 


• Correspond To “Actual” Equipment Available To 
Experimenter 

• Each Physical Processor Implements Any Number Of 
Abstract Processors 

• Physical Processors Are “Real” 

• Physical Processors Communicate Via A “Real” 
Communications System 

• Single Abstract Processor Can Run On Each Physical 
Processor 



2-269 





UVA DEPARTMENT OF COMPUTER SOENCE 







UV A department of computer sqence 


CONTROLLER 


Start, Stop, Single-Step Ada Tasks 


Control Communication At The Message Level 


Manage Breakpoints On A Per-Task Basis 


Arrange Failure Of Abstract Processors 


CoUect And Display Information For Experimenter 



2-271 






UVA departvent of computer soence 


TESTBED CONTROL 


Physical Processor 


Physical Processor 












UVA DEPARTMENT OF COMPUTER SQENCE 



2-273 















Ml 


i JJYA department of computer sqence 



CONCLUSIONS 


• ANSI Ada Does Not Support Processor Failures Well 

• ANSI Ada Can Cope Given: 

— Minor Semantic Enhancements 
— No Syntax Changes 

— Major Additions To Execution-Time System 


• Demonstration Implementation Being Developed At The 
University Of Virginia 

— A Feasibility Study 

— Not Suitable For Production Use 

• Realistic Application Needed For Evaluation Purposes 

• Ideal Solution Requires Extensive Language Changes 



jck.ada (slide 16 ) 


2-274 




