/) P-4 HO 9^. 


A VP Control Number: AVF-VSR-265.0589 

89-01-25-TEL 


Ada COMPILER 

VALIDATION SUMMART REPORT: 

Certificate Number: 890409W1.10060 
TeleSoft 

TeleGen2 Ada Development System, Version 1.4 
Sun Microsystems Sun-3/280 Worlestatlon Host and 
Motorola MVHE101 (MC68000) Target 


Completion of On-Site Testing: 
9 April 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


t 


I 


i 

I 

i 

i 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 



Accesion For 

NTIS CRA&J 
OTIC Tab 
U nannounced 
Justification 


By_ 

Distribution/ 



A\/aliability Codes 

Qist 

Avail 

Spe 

ind/or 

cal 


I 



DISCLAIMS! NOTICE 



THIS DOCUMENT IS BEST 
QUALITY AVAILABLE. THE COPY 
FURNISHED TO DTIC CONTAINED 
A SIGNIFICANT NUMBER OF 
PAGES WHICH DO NOT 
REPRODUCE LEGIBLY. 


Ada Compiler Validation Summary Report 


Compiler Name: TeleCen2 Ada Development System, Version 1.4 
Certificate Number: 890409W1.10060 

Host: Sun Microsystems Sun-3/200 Workstation under 

Sun UNIX, Version 4.2, Release 3*5 

Target: Motorola MVME101 (MC68000) 

(bare machine) 

Testing Completed 9 April 1989 Using ACVC 1.10 
.This report has been reviewed and is approved. 



Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 




mem 


a validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 



Ada Compiler Validation Summary Report 


Compiler Name: TeleGen2 Ada Development System, Version 1.4 
Certificate Number: 890409W1.10060 


Rost: Sun Microsystems Sun-3/280 Workstation under 

Sun UNIX, Version 4.2, Release 3.5 

Thrget: Motorola MVME101 (MC68000) 

(bare machine) 


Testing Completed 9 April 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson APB OH 45433-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMART REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMART REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMART OF TEST RESULTS BT CLASS.3-1 

3.3 SUMMART OF TEST RESULTS BT CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS. ..3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Preralidstion.3-6 

3.7.2 Test Method ..3-6 

3.7.3 Test Site ..3-7 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ads STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 


















CHAPTER 1 
INTRODUCTION 


\ 

This Validation Summary Report (- V3TU 0 - describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSX/MXL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results o f testing this compiler using the Ada Compiler 
Validation Capability ^tTCV&^a-T An Ada compiler must be implemented 
according to the Ada 'standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard.^ 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report.-j 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as Inputs to an Ada compiler and 
evaluating the results.-^The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
Illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


: & 


1-1 


INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to Identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organisation (AVO). 
Cn-site testing was completed 9 April 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 30-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH **5433-6503 


1-2 



INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1901 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language . 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987• 

3. Ada Compiler Validation Capability Laplementers 1 Guide, SofTeeh, 
Inc., December 1986. 

V. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


AC7C The Ada Compiler Validation Capability. The set of Ada 

programs tnat tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


Applicant The agency requesting validation. 


AVF The Ada Validation Facility. The AYF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation ' Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for »da validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context or this 
report, a compiler is any language processor, including 


1-3 




INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 


Host 


The computer on which the compiler resides. 


Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support or say legitimately 

support in a way other than the one expected by the test. 


Passed test An ACTC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A progr a m ths.c checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn 

test 


An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
a'.*e not treated as reserved words by an Ada compiler. A Class A test is 
pcssed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests cheek that a compiler detects illegal language usage. Class 
B teats ere not exeoutable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 




INTRODUCTION 


illegal 3onstruct that it contains is detected by the compiler. 

Class C tests check the run tine system to ensure that legal Ada programs 
can be correctly comoiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests checlc the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Claas D test fails to compile because the capacity of the 
compiler is exceed'd, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are e:cpected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Claas E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L testa ch.jk that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in thj main program or any units referenced by the main 
program are elaborated. In same esses, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a tast objective. The procedure CHECKJFILE is used to 
check the contents of taxt files written by some of the Class C tests for 
chapter 14 of the Ads Standard. The operation of REPORT and CHECK_FILE is 
checked by s set f executable testa. These tests produce messages that 
are examined to verify that the units are operating correctly. If whese 
units are not operating correctly, then the validation is not attempted. 

The text of emch test in the ACVC follows conventions thst are Intended to 
ensure thst the tests are reasonably portable without modification. For 
example, the teats asks use of only the basic set of 55 characters, contain 
lines with s maximum length of 72 characters, use small numeric values, and 
place features thst may not be supported by all implementations in separate 


1-5 



INTRODUCTION 


testa. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the testa in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A teat that is 
Inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined tc contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 




CHAPTER 2 

CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: TeleGen2 Ada Development System, Version 1.4 

ACVC Version: 1.10 

Certificate Number: 890409W1.10060 

Host Computer: 

Machine: Sun Microsystems Sun-3/280 Workstation 

Operating System: Sun UNIX 

Version 4.2, Release 3*5 

Memory Size: 24 megabytes 


Target Computer: 

Machine: 

Board: 

CPU: 

Bus • 

I/O: 

Timer: 

Operating System: 
Memory Size: 


Motorola HVME101 (MC68000) 

MC68000 

VME 

MC68661 

MC6840 

(bare machine) 

One megabyte 


2-1 






CONFIGURATION INFORMATION 


Communications Network: RS232 serial line 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers Is to determine the behavior of 
a compiler In those areas of the Ada Standard that permit Implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
Implementation. The tests damonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables In the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
teats).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D6M005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined type-. 
LONG_INTEGER and LONG FLOAT in package STANDARD. (See tests 
B66001T..Z (7 tests).) ~ 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Some of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 


2-2 



1 


CONFIGURATION INFORMATION 


i 

i 

t 

I 

i 



f 

I 

i 

i 


i 

( 


I 


i 

I 

i 


(3) This implementation uses no extra bits for extra precision and 
uses no extra bits for extra range. (See test T35903A.) 

(4) Sometimes NUMERIC_ERROR is raisec when an integer literal 
operand in a comparison or membership test is outside the 
range of tne base type. (See test C45232A.) 

(5) NUMERIC__ERROP is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is not gradual. (See tests C45524A..Z.) 


d. Rounding. 

the method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to Integer is round away from 
zero. (See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round away 
from zero. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUM£RIC_ERROR or 

CONSTRAINT_ERROR for an array having a ’LENGTH that exceeds 

STANDARD.INTEGER’LAST and/or STSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with mov-* 
than STSTEM .MAX_INT components raises NUMERICJERROR foi a 
two-dimensional "array subtype when the big dimension is the 
second one. (See test C3&003A.) 

(2) NUMERIC_ERROR is raised when 'LDfGTH is applied to a null 


array type with INTEGER'LAST + 
C36202A.) 

2 

components. 

(See 

test 

(3) NUMERIC_ERROR is raised when 

a 

null array 

type 

with 

STSTEM.MAX INT ♦ 2 components 

C36202B.) 

is 

declared. 

(See 

test 


2-3 





CONFIGURATION INFORMATION 


(*») A packed BOOLEAN array having a ’LENGTH exceeding INTEGER’LAST 
raises no exception. (See test C52103X*) 

(5) A packed two-dimensional BOOLEAN array with more than 

INTEGER'LAST components raises CONSTRAINT_ERROR when the 

length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104?.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_EHROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103T.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with t>e target's subtype. (See test C52013A.) 

(3) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
CU3207A and CA3207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test EM3211B.) 


2-« 


CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for procedures and for 
non-library functions. (See tests LA3004A..B, EA3004C..D, and 
CA3004E..F.) 


i. Generics 

(1) Generic unit declarations, bodies, and subunits can be 

compiled in separate compilations. (See tosts CA1012A and 

CA3011A.) 

(2) If a generic unit body or one of its subunits is compiled or 
recompiled after the generic unit is instantiated, the unit 
instantiating the generic is made obsolete. The obsolescence 
is recognized at binding time, and the binding is stopped. 
(See tests CA2009C, CA2009F, BC3204C, and BC3205D.) 


J. Input and output 

(1) The package SEQUENTIAL_I0 cannot be instantiated with 

unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN FILE and OUT FILE are supported for SEQUENTIAL 10. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT IOT (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN FILE and OUT FILE are supported for text files. (See 
tests CE3102E and CE3~02I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_I0. 

(See tests CE2102G and CE2102Z.) ™ 

(7) RESET and DELETE operations are supported for DIRECT 10. (See 
tests CE2102K and CE2102T.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file docs not truncate the file. 
(See test CE2208B.) 


2-5 





CONFIGURATION INFORMATION 


(10) Temporary sequential files are given names and not deleted 
when closed. (See test CE2108A.) 

(11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and not deleted when 
closed. (See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files when reading only. (See 
tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when reading only. (See tests 
CE2107F..H (3 tests), CE2110D, and CE2111R.) 

(15) More than one internal file can be associated with.each 

external file for text files when reading only. (See tests 
CE3111A..E, CE3H4B, u»d CE3H5A.) 


2-6 







CHAPTER 3- 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 371? tests. When this compiler was 
tested, A3 tests hsd been withdrawn because of test errors, the AVF 
determined that 31A tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 231 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for nine tests were required to successfully demonstrate the test 
objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SDMMART OF TEST' RESULTS BT CLASS 


RESULT 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


_K _B_ 

127 1129 
2 9 

1 2 
130 11AO 


TEST CUSS TOTAL 

C P E L _ 

2019 17 23 A5 3360 

297 0 5 1 31 A 

3A 0 6 0 A3 

2350 17 3* A6 3717 


3-1 



TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

_2_ 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 

Passed 

198 

573 

544 

245 

172 

99 

160 

333 

132 

36 

250 

340 

278 3360 

Inappl 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

29 

. 43 314 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 43 

TOTAL 

213 

650 

680 

«o 

st 

<M 

172 

99 

166 

334 

137 

36 

253 

404 

325 3717 


3.4 WITHDRAWN TESTS 

The following 43 testa were withdrawn from ACVC Version 1.10 at the tine of this 
validation: 


E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that Is either inapplicable or withdrawn. The 
applicability of a test to an Implementation Is considered each time a 
validation Is attempted. A test that Is inapplicable for one validation attempt 
Is not necessarily Inapplicable for a subsequent attempt. For this validation 
attempt, 314 tests were Inapplicable for the reasons Indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y 

C35708L..Y 

C45421L..Y 

C45641L..Y 


C35705L..T 
C35802L..Z 
C45521L..Z 
C46012L..Z 


C35706L..Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 
C45321L..Y 
C45621L..Z 


3-2 




TEST INFORMATION 


b. C35508I, C35508J, C35508M, and C35508N are not applicable because this 

implementation does not support enumeration representation clauses for 
BOOLEAN types. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this implementation 
does.not support a predefined type SHORT_INTEGER: 

C45231B C4530UB C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B BS2004E C55B07B B55B09D B86001V 

CD7101E 

e. C45231D, B86001X, and CD7101G are not applicable because this 

Implementation does not support any predefined integer type with a name 
other than INTEGER, LONG_INTEGER, or SHORTJtNTSGER. 

f. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of STSTEM.MAXJttNTISSA is less than 47. 

g. C86001F is not applicable because, for this implementation, the package 

TEXT_IO is dependent upon package STSTEM. These tests recompile 

package STSTEM, making package TEXT_IO, and hence package REPORT, 
obsolete. 

h. B8600TT is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

I. B86001Z is not applicable because this Implementation supports no 

predefined floating-point type with a name other than FLOAT, 

LONGJFLOAT, or SHORT_FLOAT. 

J. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable because this 

implementation does not support separate compilation of generic 
specifications, bodies, and subunits, if an instantiation is given 
before compilation of its bodies or subunits. The created dependency 
is detected st bind time. 

k. LA3004B, EA3004D, and CA300UF are not applicable because this 

Implementation does not support pragma INLINE for library functions. 

l. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 
clauses for floating point types using less than 32 bits. 

m. CD2A61I and CD2A61J are not applicable because this implementation4oes 
not support size clauses for array types, which imply compression, with 
component types of composite or floating point types. 

n. CD2A84B..1 (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 


3-3 







TEST INFORMATION 


types using lass than 32 bits. 

o. CD4041A is not applicable because this Implementation does not support 
record representation clauses with 32 bit alignment. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected by 
this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 

with unconstrained array types and record types with discriminants 
without defaults. These Instantiations are rejected by this compiler. 

r. CE2102D is inapplicable because this implementation supports CREATE 

with IN_FILE mode for SEQUENTIAL_IO. 

s. CE2102E is inapplicable because this implementation supports CREATE 

with OOT_FIL£ mode for SEQTJENTIAL_IO. 

t. CE2102F is inapplicable because this implementation supports CREATE 

with INOUT_FILE mode for DIRECT_IO. 

u. CE2102I is inapplicable because this Implementation supports CREATE 

with IN_FILE mode for DIRECT_IO. 

v. CE2102J is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for DIRECT_IO. 

w. CE2102N is inapplicable because this implementation supports OPEN with 
IN_FILE mode for SEQUENTIAL_IO. 

z. CE21020 is inapplicable because this implementation supports RESET with 
IN_FILE mode for SEQUENTIAL _I0. 

y. CE2102P is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for SEQUENTIAL^0. 

z. CE2102Q is inapplicable because this implementation supports RESET with 
00T_FILE mode for SEQUENTIAL_I0. 

aa. CE2102R is inapplicable because this implementation supports OPEN with 
INOUT_FILE mode for DIRECT_I0. 

ab. CE2102S is inapplicable because this implementation supports RESET with 
INOUT_FILE mode for DIR£CT_I0. 

ac. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mode for DIRECT_I0. 

ad. CE2102U is inapplicable because this implementation supports RESET with 
IN FILE mode for DIRECT 10. 


3-4 












TEST INFORMATION 


ae. CE2102V is inapplicable because this implementation supports open with 
OOT_FILE mode for DIRECT_IO. 

af. CE2102W is inapplicable because this iaplenentation supports RESET with 
OUT_FILE mode for DIRECT_I0. 

ag. CE21073..E (H tests), CE2107L, CE2110B, and CE2111D are not applicable 
because multiple internal files cannot be associated with the saae 
external file when one or more files is writing for sequential files. 
The proper exception is raised when multiple access is attempted. 

ah. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable because 

multiple internal files cannot be associated with the saae external 
file when one or more files is writing for direct files. The proper 
exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because this implementation supports CREATE 
with IN_FILE mode for text files. 

aj. CE3102F is inapplicable because this implementation supports RESET for 
text files. 

ak. CE3102S is Inapplicable because this implementation supports deletion 
of an external file for text files. 

al. CE31021 is inapplicable because this implementation supports CREATE 
with OUT_FTLE mode for text files. 

am. CE3102J is inapplicable because this implementation supports OPEN with 
IN_FILE mode for text files. 

an. CE3102K is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for text files. 

ao. CE3H1B, CE3111D..E (2 teats), CE3114B, and CE3115A are not applicable 
because multiple internal files cannot be associated with the sane 
external file when one or more files is writing for text files. The 
proper exception is raised when multiple access is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that same tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 


3-5 




TEST INFORMATION 


Modifications were required for nine tests. 

The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

BA3006A BA3006B BA3007B BA3006A BA3008B 3A3013A 

C34005G, C34005J, and C34006D required evaluation modifications because the 

tests wrongly expect that an element of an array will not be represented more 
compactly within an array than a single object of that type• These tests output 
failed messages for the attribute 'SIZE. 

3.7 ADDITIONAL TESTING INFORMATION 


3-7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
TeleGen2 Ada Development System was submitted to the AVF by the applicant for 
review. Analysis of these results demonstrated that the compiler successfully 
passed all applicable tests, and the compiler exhibited the expected behavior on 
all inapplicable tests. 


3.7.2 Test Method 

Testing of the TeleGen2 Ada Development System using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in which 
the testing was performed is described by the following designations of hardware 
and software components: 

Host computer: Sun Microsystems Sun-3/280 Workstation 

Host operating system: Sun UNIX, Version 4.2, Release 3-5 
Target computer: Motorola MVME101 (MC68000) 

Target operating system: (bare machine) 

Compiler: TeleGen2 Ada Development System, Version 1.4 

The host and target computers were linked via an RS232 Serial Line. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the magnetic tape. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host computer. 


3-6 






TEST INFORMATION 


After the teat files were loaded to disk, the full set of tests was compiled and 
linked on the Sun Micros?stems Sun-3/280 Workstation, thr* all executable images 
were transferred to the Motorola MVME101 (MC68000) via a Serial line and run. 
Results were printed from the host computer. 


The compiler was tested using command scripts provided by TeleSoft and reviewed 
by the validation team. The compiler was tested using all default option 
settings except for the following: 

OPTION EFFECT 


ads 

-s 

-c 00 


-R 


-I 

-A 

-0 D 
aid 


Invoke TeleGen2 Ada cross compiler. 

Ose software floating point routine calls. 

Generate code for 68000 processor. 

Invoke TeleGen2 Ada linker. 

Generate interspersed error listing. 

Ose additional options from the named linker options 
file. 

Indicates that one or more of the subprograms being 
optimized may be called from parallel tasks. 

Indicates that one or more of the subprograms interior 
to the unit/collection being optimized could be called 
recursively by an exterior subprogram. 

Enables inline expansion of those subprograms marked 
with an inline pragma or generated by the compiler, 
tables automatic inline expansion of any subprogram 
called from only one place, as well as those marked by 
an inline pragma or generated by the compiler. 
Optimizer switch which is equivalent to "-P -R -I -A". 
Invoke the TeleGen2 Ada Cross Linker. 


Tests were compiled, linked, and executed (as appropriate) using a single host 
and target computer. Test output, compilation listings, and Job logs were 
captured on magnetic tape and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at San Diego CA and was completed on 9 April 1989 . 



m. 


3-7 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TaleSoft has submitted th« following Declaration of 
Conforaaseo concerning the TeleGen2 Ada Development System. 


A-1 






DECLARATION OF CONFORMANCE 


Compiler Implemented TELESOFT 

Ada Validation Facility: ASD'SCEL, Wright-Patterson ATB OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

Base Compiler Name: TeleGen2 Ada Development System 

Version: 1.4 

Host Architecture ISA: Sun Microsystems Sun-3/280 Workstation 

OS tc VER #: Sun UNDC, Version 4.2, Release 3.5 

Target Architecture ISA: Motorola MVME101 (MC68000) 

OS & VER #: bare machine 

Impiementer’s Declaration 


1, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler)s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
comformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall oe made only in the owner’s corporate 



TELESOFT , . 

Raymond A. Parra. Director, Contracts/Legal 


Date: /O 



Owner’s Declaration 

1, the undersigned, representing TELESOFT take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANSI/M1L-STD-1815A. 



A-2 




AFPENDIX B 


APPENDIX F OF THE Adi STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses* The implementation-dependent 
characteristics of the TeleGen2 Ada Development System, Version 1.4, as 
described in this Appendix, are provided by TeleSoft. Unless specifically 
noted otherwise, references in this Appendix are to compiler documentation 
and not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG^INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1 ..70141E+38; 
type LONG_FLOAT is 

digits 15 range -8.98846567431153E«-307 .. 8.98846567431158E+307; 
type DURATION is delta 2#1.0#E-14 range -86400.0 .. 86400.0; 


end STANDARD; 







APPENDIX F 


1. lmr lementation Depenoeni Pragmas 

pragma COMMENT; < siring _literal>): 

It rr«a> oni> appear within a compilation unit. 

The pragma comment has the effect of embedding the given 
sequence of characters in the object code of the compilation unit. 

pragma LINKNAME(<subprogram_name>, <string JiteraJ>); 

It may appear in any declaration section of a unit. 

This pragma must also appear directly after an interface pragma 
for the same <subprogram_name>. The pragma linkname has the 
effect of making string literal apparent to the linker. 

pragma INTERRUPT(Function_Mapping); 

It may only appear immediately before a simple accept statement, 
a while loop directly enclosing only a single accept statement, 
or a select statement that includes an interrupt accept alternative. 
The pragma interrupt has the effect that entry calls to the 
associated entry, on behalf of an interrupt, are made with a 
reduced call overhead. 

pragma IMAGES(<enumeration_type>,Deferred) or 
pragma IMAGES(<enumeration_type>.Immediate); 

It may only appear within a compilation unit. 

The pragma images controls the creation and allocation of 
the image table for a specified enumeration type. The 
default is Deferred, which saves space in the literal pool 
by not creating an image table for an enumeration type 
unless the 'Image. ’Value, or 'Width attribute for the type 
is used. If one of these attributes is used, an image table 
is generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in 
more than one compilation unit, more than one image table is 
generated, eliminating the benefits of deferring the table. 

pragma SUPPRESS_ALL; 

It may appear anywhere that a Suppress pragma may appear as 
defined by the Language Reference Manual. The pragma 
Suppress All has the effect of turning off all checks 
defined in section 11.7 of the Language Reference Manual. 

The scope of applicability of this pragma is the same as 
that of the predefined pragma Suppress. 


B-2 




2. Implementation Dependent Attributes 


’Offset Attribute 

’Offset along with the attribute ’Address, facilitates machine code 
insertions. For a prefix P that denotes a declared parameter 
object, P’Offset yields the statically known portion of the 
address of the first of the storage units allocated to P. Ths 
value is the object’s offset relative to a base register and is 
of type Long_lnteger. 


INTEGER ATTRIBUTES 


’Extended_lmage Attribute 


Usage: X’Extended_Image(Item, Width,Base,Baaed,Space_IF_Positive) 

Returns the image associated with Item as per the Text_Io definition. 
The Textlo definition states that the value of Item is an integer 
literal with no underlines, no exponent, no leading zeros 
(but a single zero for the zero value) and a minus sign if negative. 

If the resulting sequence of characters to be output has fewer than 
Width characters then leading spaces are first output to make up 
the difference. (LRM 14.3.7:10,14.3.7:11) 

7or a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 


B-3 



Parameter Descriptions: 


Item — The user specifies the item that he wants the 

image of and passes it into the function. This 
parameter is required. 

Width — The user may specify the minimum number of 

characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 

Base - The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 

Based — The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X'Ex tended 
X'Ex tended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X’Extended 
X’Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 


_lmage(5) 

_Image(5,0) 
image(5,2) - 

mage(5.0.2) « 

mage(5.4.2) * 

mage( 5.0,2, True) 
mage(5.0.10,False) 
mage(5.0,10,False,True) 
mage(-l .0,10,F alse,F alse) 
mage(-1.0,10.False,True) 
mage(-l,1.10,False,True) 
mage(-1,0,2,T rue,True) 
mage(-1,10,2,True,True) 


"5" 

"5" 

" 5" 

" 101 " 

" 101 " 

= " 2 # 101 #" 

- "5" 

- » 5" 

* 

*■ W .] W 

- "- 2#1 #" 

- " - 2 # 1 #" 


B-4 




'Extended Value Auribuu 


Usage: X’Extended Value (Item) 

Returns the value associated with Item as per the Text_Io definition. 
The Text lo definition states that given a string, it reads an 
integer value from the beginning of the string. The value returned 
corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, ‘hie attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAlNT_ERROR is raised. 

Parameter Descriptions: 

ltem — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended Value("5") 

“ 5 

X’Extended Value{" 5") 

« 5 

X’Extended Vafue(”2*l01#") 

— 

X’Extended Value("-1") 

- -1 

X’Extended"Value(" -1") 

- -1 


B-5 



’Extended Width Attribute 


Usage: X'Exlended Width(Base.Based,Space_lf_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute 
is a function that may have multiple parameters. This attribute 
yields the maximum image length over all values of the type 
or subtype X. 

Parameter Descriptions: 

Base — The user specifies the base for which the width 

will be calculated, if no base is specified 
then the default (10) is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for baaed is 
specified then the default (false) is assumed. 

Space_lf_Poeitive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 


Examples: 


Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 

Then the following would be true: 


X’Extended Width 


X’Extended_Width{10) 
X’Extended Width(2) 
X’Extended~Width( 10,True) 
X’Extended _Width (2,T rue) 
X’Extended _Width( 10.F alse,True) 
X’Extended _ Width (10.T rue,F else) 
X’Extended Width(10,True,True) 
X’Extended~Width(2,True,True) 
X’Extended_Width(2,False,True) 


- 3 - "-10" 

- 3 - MO" 

- 5 - "10000" 

- 7 - M0# 10#" 

- 8 - " 2 # 10000 #" 

- 3 - " 16" 

- 7 - ”-10#10#" 

- 7 - " 10#16#" 

- 9 - " 2 # 10000 #" 

- 6 - " 10000 " 


B-6 




ENUMERATION ATTRIBUTES 


’Extended _lmage Attn -ate 

Usage: X’Extended_Iriage(ltem,Width,Uppercase) 

Returns the image associated with Item as per the Text_lo definition. 
The Textlo definition states that given an enumeration literal, 
it will output the value of the enumeration literal (either an 
identifier or a character literal). The character case parameter 
is ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more that one parameter. The parameter 
Item must be an enumeration value. The image of an enumeration 
value is the corresponding identifier which may have character case 
and return string width specified. 


Parameter Descriptions: 

Item - The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Width — The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) is assumed. If the Width 
specified is larger than the image of Item, then the 
return string is padded with trailing spaces; if the 
Width specified is smaller than the image of Item then 
the default is assumed and the image of the enumeration 
value is output completely. 

Uppercase - The user may specify whether the returned string is in 
uppercase characters. In the case of an enumeration 
type where the enu.neration literals are character 
literals, the Uppercase is ignored and the case 
specified by the type definition is taken. If no 
preference is specified then the default (true) is 
assumed. 


B-7 





Examples: 

Suppose ihe following types were declared: 


TypeX is (red, green, blue, purple); 
Type Y is (V, 'B\ V. ’D’); 

Then the following would be true: 


X’Extended_lmage(red) — "RED" 

X'Extended Image (red. 4) — "RED " 

X’Extended_lmage(red,2) * "RED" 

X ’ Extended _lm age (red, 0 .false) — "red" 

X’Extended _Image(red,10/alse) “ "red 

Y’Extended lmage(V) - "’a’" 

Y’Extended ~Image( ’B’) - "’B’" 

Y’Extended jmage(V.6) - "V " 

Y’Extended_Image( V.O.true) ■> ”’a’" 


’Extended_Value Attribute 
Usage: X’Extended_Value(Item) 

Returns the image associated with Item as per the Text lo definition. 
The Text_Io definition states that it reads an enumeration value 
from the beginning of the given siring and returns the value of 
the enumeration literal that corresponds to the sequence input. 

(LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAlNT_ERROR is raised. 


B-8 










Parameter Descriptions: 


Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of X. 

Examples: 

Suppose the following type was declared: 

Type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended_Value("red") “■ red 

X’Extended_Value(" green") — green 

X’Extended Value(" Purple") — purple 

X’Extended Value(" GreEn ") — green 


’ExtendedWidth Attribute 
Usage: X’Extended Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute 
is a function. This attribute yields the maximum image length over 
all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function 
returns the width of the largest (width) enumeration literal 
in the enumeration type specified by X. 


B-9 







Examples: 

Suppose the following types were declared: 


Type X is (red, green, blue, purple); 

Type Z is (XI, X12. X123, X1234); 

Then the following would be true: 

X’Extended_ Width — 6 — "purple" 

Z’Extended'Width - 5 - "X1234" 


FLOATING POINT ATTRIBUTES 
’Extended_Image Attribute 

Usage: X’Ex tended _lmage( Item,Fore ,Aft.Exp,Base,Based) 

Returns the image associated with Item as per the Text_lo definition. 
The Text_Io definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


B-10 






Parameter Descriptions: 

Item — The user specifier the item that itr wanu the image of anc 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer par: of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the ’#’ if b a s ed 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-l) is assumed. If based notation is 
specified the trailing is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is C then no exponent 
is used. 

Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-1I 







Examples: 


Suppose the following type was declared: 


Type X is digits 5 range -10.0 .. 1C.0; 


Then the following would be true: 


X’Extended _lmage( 5.0) 
X’Extended_lmage(5.0,l) 

X ’Extended _Image(-5.0.1) 
X’£xtended~lmage(5.0,2,0) 
^’Extended _lmage( 5.0,2,0,0) 

X’ExtendedJmage(5.0,2,0,0,2) 

X’ExtendedJmage(5.0,2,0,0,2,True) 

X’Extended_Image{5.0,2,2,3,2,True) 


- " 5.0000E+00" 

- "5.0000E-t-00" 

- "-5.0000E+00" 

- " 5.0E+00" 

- " 5.0" 

- " 101 . 0 " 

- " 2 # 101 . 0 #" 

- "2#1.1# E-r-02" 


B-12 




'Extended Value Attribute 


Usage: X'Extended Value (Item) 

Returns the value associated with Item as per the Text_lo definition. 
The Textlo definition states that it ships any leading 2 eros, 
then reads a plus or minus sign if present then reads the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAJNT_ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0: 

Then the following would be true: 

X’Extended_Value("5.0") -■ 5.0 

X’Extended_Velue("0.5El") - 5.0 

X’Extended”Va)ue( "2 # 1.01 #E2") - 5.0 





'Extended Digits Attribute 
Usage: X’Extended_Digits(Base) 


> 


Returns the number of digits using base in the mantissa of modeJ 
numbers of the subtype X. 


Parameter Descriptions: 


Base — The user may specify the base that the subtype is 
defined in. If no base is specified then the default 
(10) is assumed. 

Examples: 

Suppose the following type was declared: 


Type X is digits 5 range -10.0 .. 16.0: 


Then the following v-ould be true: 
X’Extended Digits — 5 


FIXED POINT ATTRIBUTES 
'Extended Image Attribute 

Usage: X’Exter.ded_lmage(ltem,Fore.Aft.Exp.Base.Based) 

Returns the image associated with Item as per the Text Io definition. 
The Text_Io definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 1*1.3.8:13, 
14.3.8:15) 


For a prefix X that is a discrete type or subtype: this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the ’#’ if baaed 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The’user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X'Digits-1) is assumed. If based notation is 
specified the trailing ’#’ is included in aft. 

Exp - The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 

Base - The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-I5 




Examples: 


Suppose the following type was declared: 
Type X is delta 0.1 range -10.0 .. 17.0; 


Then the following would be true: 


X’Extended 
X'Extended 
X’Ex tended 
X'Extended 
X’Extended 
X'Extended 
X'Extended 
X'Extended 


Image(S.O) 
lmage( 5.0,1) 
lmage(-5.0,l) 
lmage(5.0,2.0) 
lmage(5.0,2,0,0) 
lmage( 5.0.2,0,0,2) 
lmage(5.0,2,0,0,2,True) 
Image(5.0,2,2,3,2,True) 


- " 5.00E+00" 

- "S.00E+00" 

- B -5.00E-t-OO n 

- " 5,GE-t-00" 

- " 5.0" 

- ” 101 . 0 " 

- " 2 # 101 . 0 #" 

- "2#l.l#E+02" 


'Extended_Value Attribute 
Usage: X’Extended_Value{lmage) 

Returns the value associated with Item as per the Textlo definition. 
The T’xt_lo definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then read the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype: this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAJNTJERROR is raised. 

Parameter Descriptions: 

Image — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 



Examples: 


Suppose the following type was declared: 

Type X is delta 0.1 range >10.0 .. 17.0; 

Then the following would be true: 

X , Extended_Value("5.0") - 5.0 

X , Extended_Value("0.5El") - 5.0 

X’Extended_Value("2# 1.01 # E2 M ) - 5.0 


'Extended_Fore Attribute 
Usage: X'Extended_Fore(Base.Based) 

Returns the minimum number of characters required for the integer 
part o: the based representation of X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the siring returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-17 




Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’ExtendedFore - 3 - MO" 

X’Extended_Fore(2) - 6 - " 10001" 


’ExtendedAft Attribute 
Usage: X’Extended_Aft(Base,Based) 

Returns the minimum number of characters required for the fractional 
part of the based representation of X. 


Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended Aft * 1 — "1" from 0.1 

X'Extended ~Aft(2) - 4 - "0001" from 2#0.0001# 


B-18 




3. SDecification of Package SYSTEM 

PACKAGE System IS 

TYPE Address is Access Integer; 

TYPE Subprogram_VaIue is PRIVATE; 

TYPE Name IS (TeleGen2); 

System_Name : CONSTANT name :• TELEGEN2 

Storage_Unit : CONSTANT :*• 8; 

Memory"_Sise ; CONSTANT :« (2 ** 31; - 1; 

— System-Dependent Named Numbers: 

Min Int : CONSTANT -(2 ** 31); 

Max” Int : CONSTANT :« (2 “ 31) - 1; 

MaxDigits : CONSTANT IS; 

MaxMantissa : CONSTANT :** 31; 

Fine_Delta : CONSTANT 1.0 / (2 “ Max Mantissa); 
Tick” : CONSTANT 10.0E-3; 


— Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63; 
PRIVATE 

TYPE Subprogram Value IS 
RECORD 

Proc_addr : Address: 

Static Jink : Address: 

Global Jrame : Address; 

END RECORD; 

END System; 


B-19 



4. Restrictions on Representation Clauses 


The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer type? 'SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for access types ’STORAGE_SlZE attritube (LRM13.2(b)) 
Length Clauses: for tasks types ’STORAGE_SIZE attribute (LRM 13.2(c)) 
Length Clauses: for fixed point types 'SMALL attribute (LRMl3.2(d)) 
Enumeration Clauses: for character and enumeration types other than 
boolean (LRM 13.3) 

Record representation Clauses (LRM 13.4) with following constraints: 

- Each component of the record must be 
specified with a component clause. 

• The alignment of the record is restricted to 
mod 2, word (16 bit) aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries, and external subprograms 

(LRM 13.5(a)(e)) 

This compiler does NOT support the following representation clauses: 

Enumeration Clauses: for boolean (LRM 13.3) 

Address Clauses for packages, task units, or non-external Ada 
subprograms (LRM 13.5(b)) 


5. Implementation dependent naming conventions 

There are no implementation-generated names denoting 
implementation dependent components. 


6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted 
as the first storage unit of the object. 


B-20 






7. Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between any types or subtypes unless 
the target type is an unconstrained record or array type. 


8. I/O Package Characteristics 

Sequential lO and Direct_10 cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXT_IO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2_147_483_645; 

In TEXT_IO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..1000; 

According to the latest interpretation of the LRM, during a 
TEXT_IO.Get_Line call, if the buffer passed in has been filled, 
the call is completed and any succeeding characters and/or 
terminators (e.g., line, page, or end-of-file) will not be read. 

The first Get_Line call will read the line up to but not 
including the end-of-line mark, and the second Get_Line will read 
and skip the end-of-line mark left by the first read. 


B-21 






APPENDIX C 
TEST PARAMETERS 


Certain tasta in the ACVC sake uae of implementation-dependent values, aueh 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
naan. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning Value 

AACC.SI2E 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


ABIGJDI 

(1..199 —> ’A’, 200 *> 

•V) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 



ABIGJI3>2 

(1..199 => 'A', 200 *> 

»2‘) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 



$BIGJ3>3 

Cl..99 => 'A’, 100 s> ' 

3’, 

An Identifier the size of the 

101..200 «> ’A’) 



maximal input line length which 
is identical to $BIG_ID4 except 
for a character near - the middle. 


C-1 





TEST PARAMETERS 


Marne and Meaning _ Value _ 

♦BIG_U>4 (1..99 *> 'A*, 100 *> '«*, 

An Identifier the size of the 101..200 s> 'A') 
maximum input line length which 
is identical to *BIG_ID3 except 
for a character ne»r"the middle. 


♦BIG_INTJ.IT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the aize of the 
maximum line length. 

♦BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

♦BIG_STRING1 

A string literal which when 
catenated with BIG STRING2 
yields the image of BIG_ID1. 

♦BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STHIHG1 yields the image of 
BIG_31. 

♦BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

♦COUNT_LAST 

A universal integer 

lit eral whose value is 
TEXT_I0.COUNT»LAST. 

♦DEPAULT_MEM_SIZE 

An integer literal whose value 
ia STSTEM.MSCRT_SIZE. 

♦DEPAULT_STOR_UNIT 

An integer literal whose value 
ia STSTEM.STORAGE UNIT. 


(1..197 s> 'O', 198 ..200 => "298") 

(1..195 *> *0', 196..200 s> "690.0") 

(1 2..101 s> 'A*. 102 s> *"») 

(1 => "",2..100 => 'A’,101 => *1', 
102 => '«*) 

(1..180 s> » ») 

2147483646 

2147483647 

8 


C-2 





test parameters 




Name and Meaning _ 

*DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM.SYSTEM_MAME. 

IDELTAJ50C 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

lit eral whose value is 
TEXT_IO. FIELD * LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAM£ 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT FLOAT, or 

LONG_FLOAT. 

*GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE’LAST 
and DURATION * LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 
A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTB*.PRIORITY. 

%ILLEE AL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE NAME2 

An external file name which 
is too long. 

$INTEOER_FIRST 

A universal integer literal 
wtiose value is INTEGER'FIRST. 


C-3 


Value _ 

TELEGEN2 

2#1.0#E-31 

1000 

N0_SUCH_TYPE 

N0_SUCH_TYPE 

100000.0 

131073.0 

63 

"BADCHAR»~/J" 

"/N0NAME/DIRECT0RY" 

-32768 



TEST PARAMETERS 


Name and Meaning 


Value 


♦:nteser_last 3276 ? 

• A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGEP_LAST_?LUS_1 32768 

A universal integer literal 

whose value is INTEGER'LAST * 1. 


$LESS_THAN_DURATION 

a' universal real literal that 
lies between DURATION*BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE*FIRST. 

$LOW_PRIORITT 

An integer literal whose value 
is the lower bound of the range 
for the subtype STSTDi.PRIORITT. 


.100000.0 


-131073.0 


0 


$MANTISSA_DOC 3*. 

An integer literal whose value 
is STSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

*MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 


$MAX_INT 2147483647 

A universal integer literal 
whose value is STSTQ4.MAX XNT. 


$MAX_INT_PLUS_1 2147483648 

A universal Integer literal 
whose value is 5TSTS4.MAX XNT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 *> "2:",3..197 *> *0', 

A universal integer based 198..200 s> "11:") 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


H 






TEST PARAMETERS 


Kane and Meaning 

$MAX_L£NJ?EAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAXJ5TRING_LXTERAL 

A string literal of size 
MAX_IN_LEN, including the qucte 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An Integer literal whose value 
is the masher of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORTJFLOAT, SHO RT_INTEGER, 

L0NG_FL0AT, or LONG_INTSGER. 

<NAME_LIST 

A list of enumeration literals 
in the type SYSTEM. NAME, 
separated by commas. 

*NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SI3TEM.MAX_INT. 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_S:ZE. If there is 
no other value, then use 
*DEFAULT_MEM_SIZE. 


Value __ 

(1..3 => "16:",4..196 => 'O', 

19?..200 => "F.Es") 

(1 s> 2..199 = > ’A’, 200 => •"») 

-2147433648 

32 

N0_S0CH_TYPE 

TELEGEN2 

16#FFFFFFFE# 

2147483647 


C-5 






TEST PARAMETERS 


Name and Meaning _Value 


iNEW_STOR_UNIT 8 

An Integer literal whose value 
is a permitted argument for 
Pragma STORAGE UNIT, other than 
$DEFAUL?_S TOR_UNIT. If there is 
no other permitted value, then 
use value of STSTQ4.STORAGE UNIT. 


$ NEW_ST S_NAME TELEGEN2 

A value of the type STSTQ4.NAME, 
other than *D£FAOLT_SYS_NAME. If 
there is only one value of that 
typs, then use that value. 

STASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 


STICK 

A real literal whose value is 
SYSTEM. TICK. 


0.01 


C-6 


•v ' 





APPENDEC D 


WITHDRAWN TESTS 


Some testa are withdrawn from the AC7C because they do not conform to the 
Ada Standard. The following 43 teats had been withdrawn at the time of 
validation testing for the reasons Indicated. A reference of the fora 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE In line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component Into a minimum size (line 30 ). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31 )• 

d. BC300CB: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on: by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

e. CD2A62D: This test wrongly requires that an array object’s size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D 06 tests): These 

tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subpro g ram (which implicitly aonverts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 AEG. 


D-1 





WITHDRAWN ‘.ESTS 


g. CD2A81G, CD2A8BG, CD2A8UM..N, and CD50110 (5 testa): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely 'lines ?4, 85* 
86, 96, and 58, respectively). 

h. CD2B15C and CD7205C: These tests expect that a 'STQRAGE_SIZE length 
clause provides precise control over the manber of designated objects 
iii a collection; the Ada standard 13*2:15 allows that such control 
must not be expected. 

i. CD2DHB: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

J. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

k. ED700&B, H)7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three STSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

l. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least STSTEH.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
STSTS4.TXCK—particular instances of change may be less (line 29). 

m. CD7203B and CD7204B: These tests use the 'SIZE length elruse and 
attribute, whose interpretation is considered problematic by the WG9 
ARC. 

n. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

o. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2. 1 *:!; is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 

p. CE31HC: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

q. CE3301A: This test contains several calls to END_0F_LINE and 
END_0F_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD INPUT (lines 103, 107, 118, 


D-2 







WITHDRAWN TESTS 


132, and 136). 

r. CE3 1 ( 11B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LATOUT_ERROR is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


0-3 




