REPORT DOfliiMCMTA-noN p AGE 

Form Approved l 

OPM No. 0704-0188 ' 

Pubfcuport ponw. tidudtogtixmttwm'lwdnqlwtngdom, n>W<tm«>>dlngdai»oure»«g«htHrQi«) wmnMrtngtKdt 

WM.M ___ Hw»omi»o«»r««p»aolWieelMllDnollnle»iiilDftt<dudng»uggMile(»lBfr«duelng«*bi»dw.iDWMt»n«un 

H—dQUW(l ^8 000 (Y / g< wl» Wgh«y, Su»» 1 J 0 *. Mki 0 on,VA 22902-4302, and le tM ORIo* ol Mwmaion and AigUaory MUt, Ono> <d 

1 AGEn6 intMlIllllR ^ 3. REPORT TYPE AND OATES COVERED 

HHHIIHmII Final: 09 Jan 1991 to 01 Mar 1990 

_ 1 _ 

4. TITLE ANO SUBTITLE - 

Tartan Inc., Tartan Ada Sun/96MC, Version 4.0, Sun3/60 (Host) to Intel ICE960/25 
on an SunOS vers 4.0.3 (Target), 90121011.11122 

„ I1UI1 nTir 

5. FUNDING NUMBERS 

6. AUTHORS) Lf I I VwA 

iabg-avf ELECTE 

Ottobrunn, Federal Republic of Germany q 0 i ; r. J S 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS<Es]^Jr 

IABG-AVF, Industrieanlagen-Betriebsgeselschaft !■ 

Dept. SZT/ Einsteinstrasse 20 

D-8012 Ottobrunn - ' 

FEDERAL REPUBLIC OF GERMANY 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

IAGB-VSR 081 

9. SPONSORING/MONITORING AGENCY NAME(S) ANO ADDRESSES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 

11 SUPPLEMENTARY NOTES 

_ 

112a. OISTRIBUTION/AVAILABIUTY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 wonts) 

Tartan Inc, Tartan Ada Sun/96MC Version 4.0, Sun 3/60 (Host) to Intel ICE960/25 on an SunOS vers 4.0.3 (Target), ACVC 
1.11. 

91-03867 

IHHI1HEMH 

TTsubjecTTerms 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16 . PRICE cA6E 

17. SECURITY CLASSIFICATION 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF REPORT OF ABSTRACT 

UNCLASSIFIED UNCLASSIFED UNCLASSIFIED 

20. LIMITATION OF aSSTRAcT 


MSN 7540-01-280-590 


9 1 < ()I 0 36 


Sfcndart Form 2W, (Rav. 2-80) 
ProMribed by ANSI Std 230-128 



Certificate Information 


Che following Aaa implementation was tested and determined to pass ACVC 
1.11. Testing was completed on December 1C, 19 90. 

Compiler Name and Version: Tartan Ada Sun/960MC version 4.0 
Host Computer System: Sun 3/60 SunOS version 4.0.3 

Target Computer System: Intel ICE960/25 on an Intel EXV8C960MD ccari 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
90121011.11122 is awarded to Tartan Inc. This certificate expires or. 
1 March, 1993. 

This report has been reviewed and is approved. 



Michael Tonndorf 
Einsteinstr. 20 
9 C12 Crtobrur.n 
Germany 



Aca Joint Program. Office 
Or. John Solcmcnd, Director 
Department cf Defense 
Washington DC 2C3C1 







AVF Control Number: 


IA3G-VSR 081 
9 January, 1991 


based on TEMPLATE Version 90-08-15 -« 


Ada COMPILER 
VALUATION SUMMARY REPORT: 
Oertrficate Number: 90121011.11' 


Tartan In:. 

Tartan Ada Sun 960MC version 4.0 
ur. 3/60 => Intel ICE960/25 on an 

ur.OS vers 4.0.3 Intel EXV8C96CMC board 


Precared 3y: 




DECLARATION OF CONFORMANCE 


Customer: _ 

Certificate Awardee: _ 
Ada Validation Facility: 
AC VC Version: 


Tartan, Inc. 


Tartan, Inc. 


IABG 


1.11 


Ada Implementation: 

Ada Compiler Name and Version: 

Host Compiler System: _ 

Target Computer System: _ 


Tartan Ada Sun/960MC Version 4.0 


Sun 3/60 SunOS Version 4.0.3 


Intel ICE960/25 on an Intel EXV80960MC Board 


Declaration: 


[l/we] the undersigned, declare that [l/we] have no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the implementation listed above. 



Date: 


" Customer Signature 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 


CHAPTER 2 IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 


CHAPTER 3 PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 

















U. iu 


CHAPTER 1 
INTRODUCTION 


The Ada imclementation described above was rested according :: the Ada 
Validation Procedures [Pro90' against the Ada Standard [Ada®;; using the 
current Ada Compiler Validation Capability (ACVC) . This da.idation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For anv technical terms used ir. this report, the reader is referred to 
;?rc9C]. A detailed description of the ACVC may be found m the current 
ACVC User's Suide [UG89]. 


1.1 USE CF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 ’J.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified in 
this report. 


The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

uestic.os retarding this report or the validation test resu_ts should be 
irected to the AVF which performed this validation or to: 


Ada Validation Organization 
Institute for Defense Analyses 
1SC1 North 3eauregard Street 
Alexandria VA 22311 , 






INTRODUCTION 


1.2 REFERENCES 

Ada33; Reference Manual for -he Ada Prooramninc Lansuace . 

ANSI/MIL-STD-1815A, February 1983 and ISC 8632-15.9". 

;?r c 9 31 Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office, August 1990. 

;U3S9; Ada Compiler Validation Capability User's Guide . 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The AC VC 
contains a collection of test programs structured into six test classes: 

A, E, C, 0, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, C, and E tests are executable. Class 3 
and class L tests are expected to produce errors at compile time ar.d link 
time, respectively. 

The exeoutacie tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set cf identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
Objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class E tests check that a compiler uetects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 


Class L tests check that an Ada implementation correctly detects violation 
of cr.e Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implen.entaticn-speoifio values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and implementation- 
dependent characteristics. The modifications required for this 

implementation are described in Section 2.3. 









INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of malting the modifications described in the 
preceding paragraph, removing withdrawn tests (see Section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In _rder tc pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
tc a given host and target computer system tc allow 


srmation of Ada programs into executable 


' r 2 r. 5. 


execution thereof. 


ant 


Ada Compiler 
Validation 
Capability 
(ACVC) 


The means for testing compliance of Ada implementations, 
consisting cf the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 


Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 


Ada 

Validation 
Facility (AVF) 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 


Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 


Compliance cf The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
o.nemselves during execution. A computer system may oe a 
stand-alone unit or may consist cf several inter-connected 


Conformity 


Fulfillment 

requirements 


by a product, 
specified. 


process 


or 


service 


1-3 











INTRODUCTION 


Customer 


Declaration of 
Ccnforrr.ar.ee 

Host Computer 
System 

Inapplicable 

test 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


An individual or corporate entity who enters into an agreement 
with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output centre!, and data management. Usually, operating 
systems are predominantly software, but partial cr complete 
hardware implementations are possible. 

A computer system, where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


CHAPTER 2 

IMPLEMENTATION DEPENDENCIES 


WITHDRAWN TESTS 


The following tests have 

been withdrawn 

by the AVC. 

The rationale for 

withdrawing each 

test is 

available from 

either the 

AVO or the 

AVF. The 

publication date 

for this 

lost of withdr; 

awn tests is 

November 21 

, 1990. 

E29005C 

328C06C 

C34006D 

C35702A 

B41308B 

C43004A 

C45114A 

C4S34SA 

C456123 

C45651A 

C46022A 

B49008A 

A740C6A 

C74-3C3A 

3830223 

B83022H 

B83025B 

B83025D 

3630263 

385001L 

C93026A 

C83041A 

C97116A 

C98003B 

3A2011A 

C370C1A 

C370C1B 

CB7004A 

CC1223A 

3C1226A 

CC1226B 

3C30093 

AD1B08A 

BD1B02B 

BD1B06A 

BD2A02A 

C02A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2315C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD70C5E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD80C2A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE24 05A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 


2.2 INAPPLICABLE TESTS 





A test is ir.appli 


ot contains test objectives which are 

irrelevant 

for a given Ada implementa 

.toon. Reasons 

for a test's 

i inapplicab 

ility may 

oe supported by 

do current 

;s issued by 

ISO and the 

ACPO known as Ada 

Ccrrzter.t a::es and 

ocmmonlv 

referenced in 

tr.e format 

Al-ddddd. 

“or this 


implementation, the follcwrr.g tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


1 







IMPLEMENTATION DEPENDENCIES 


The following 159 tests have floating-point type declarations requiring more 
digits than SYSTEM.MAX_DIGITS: 


C241131 . . Y 

(11 tests) 

C357C5C..Y 

(ii 

tests) 

C 3 5 ”* r 6 C Y 

(11 tests) 

C35TC7C..Y 

(ii 

tests) 


(11 tests) 

C35S22C..2 

(12 

tests) 


(11 tests) 

C45321C..Y 

(11 

tests) 

4 = - “ ■ *■* v 

(11 tests) 

C45521C..2 

(12 

tests) 

C 4 o o 2 4 C . . Z 

(12 tests) 

C45621C..2 

(12 

tests) 

C456412 . .Y 

(11 tests) 

C46C12C. . 2 

(12 

tests) 

C35713B, C454233, 

B86001T, and 

C86005H check 

for the predefined 

SHORT_FLOAT. 





C45531M .? 4 

) and C45532M 

.? (4 tests) 

check fixed-point opera 

for types that req 

lire a SYSTEM 

. MAX_MANT13 SA 

cf 

47 or greater; for 

implementation, tr.e 

re is no such 

tvoe. 




C4SS36A, C46-2123, C460313, C46033B, and C46034B contain 'SMALL 

representaticn clauses which are not powers of two or ten. 

C45624A and 14:614= are not applicable as MACHINE_0VERFLOWS is TRUE for 
floating-point types. 

396CC1Y checks for a predefined fixed-point type other than DURATION. 

CA2C09A, CA2223E..D (2 tests), CA2C09F and 3C3209C instantiate generic units 
before their cocoes are compiled; this implementation creates a dependence on 
generic units as allowed by AI-C04C8 4 AI-00S06 such that the compilation of 
the generic unit bodies makes the instantiating units obsolete, (see 2.3.) 

CD1CC9C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A53A checks operations of a fixed-point type for which a length clause 
specifies a power-of-ten type'small; this implementation does not support 
decimal smalls, (see 2.3.) 

CD2A84A, CI2A84E, CD2AS4I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

CD2315E checks that :TDRAGE_ERROR is raised when the storage size specified 
for a collection i? too small to hold a single value of the designated type; 
this implementation allocates more space than what the length clause 
scecifieo/ 22 _ _ z w-zz. cv AI-0C55 8 . 


The foil 

owr 

r. cr 

264 tests check for sequential. 

text, 

and dir- 

ect 

acre 

2E21C2A. 

_ g 

(3 i 

- 2E2112C-..H (2) CE21C2K 


CE21C2N 

. . Y 

(12) 

CE21C3C. 

.D 

(2 j 

2E2124A..D (4) CE2105A..B 

(2) 

CE2106A 

. .B 

(2) 

2E21C7A. 

. H 

'■ :) 

2E2127L CE2108A..H 

(8) 

CE21C9A 

. .C 

(3) 


2- 



















IMPLEMENTATION DEPENDENCIES 


CE2110A 

,2 

(4) 

CE2111A. 

. I 

(9) 

CE21I5A 

■ B 

(2) 

CE2120A.. 

B 

(2) 

CE2201A 

.c 

(3) 

EE2201D 

.E 

(2) 

CE2201F 

. N 

(9) 

CE2203A 



CE2204A 

.D 

(4) 

CE2205A 



r*«r» 



13 se 



CE2401A 

.C 

(3) 

EE2401D 



CE24 CIE 

• F 

(2) 

EE2 4C1C- 



ZZ2 4 C »H 

■ -o 

(5) 

CE2403A 



CE2 4 C 4A 

.B 

(2) 

CE24C5S 



ZZ2 *4 2 i A 



CE2407A. 

.B 

(2) 

CE24C8A 

.B 

(2) 

CE24C9A.. 


, 2 ' 

ZZ2 41 'A 

. s 

(2) 

CE2411A 



CE3102A 

. c 

(3) 

CE2-1C2F.. 

K 

{ 3) 

CE3 222 Z 

. E 

(2) 

CE3103A 



CE3I04A 

• C 

(3) 

CE31CSA.. 

B 

(2) 

CS31073 



CE3108A. 

.B 

(2) 

CE3109A 



CE311CA 



CE3I11A. 

. B 

(2) 

CE3111D. 

• E 

(2) 

CE3112A 

-D 

(4) 

CE3114A.. 

E 

(2) 

DE31I3A 



CE3119A 



EE32C3A 



EE32C4A 



CE32CA 



CE3208A 



CE33C1A 



EE33C1B 



CESS 3 2A 



CE3304A 



CE3305A 



CE34C1A 






EE3402B 



CE3 4C2C 

. D 

(2) 

CE3 4 C 3 A. . 


{ “ ; 

ZZ2A 2 3E 

# r 

: 2 s 

CE3404B. 

rs 

(2 ) 

CE340SA 



EE34C53 



ZZ 3 4 C 2 C . 

. Z 

(2) 

CE3406A. 

. 2 

(4; 

CE34C7A 

.0 

(3) 

CE3 4 C 6 A.. . 

C 

(3) 

CE34 C 9 A 



CE3409C. 

. E 

; 3) 

EE3 4 C 9? 



CE341CA 



CE2412C. 

. E 

; 3) 

EE3410F 



CE3411A 



CE3411C 



CE3412A 



EE3412C 



CE3413A 

■ C 

(3) 

CE3414A 



CE36C2A. 


(4) 

CE3603A 



CE3604A 

■ B 

(2) 

CE36C5A.. 

E 

(5) 

CE36CSA. 

•= 

(2) 

CE37C4A. 

.F 

(6! 

CE3"C 4M 

.0 

(3) 

CE37C5A.. 

- 

(5) 

^ 2 -- • „ *s_ 



CE37C6F. 

.G 

(2) 

CE38C4A 

.? 

(16) 

CE3305A.. 

2 

(2) 

CE3SC6A. 

. 3 

(2) 

CE3806D. 

. E 

(2) 

CE38 C6G 

• H 

(2) 

CE3904A. 

3 

(2) 

CE3SC5A. 


(3) 

CE3905L 



CE3906A 

• C 

(3) 

CE3906E. 

«r 

(2) 

ZZ2222a, 


211 ^ ^ 

and CE31 

C ~ A 

requ 

if0 NAME 

ERROR to 

be raised 

w 

hen an attempt 

is made 

tc 

crea: 

e a file 

wit. 

n an 

illegal name 

; this implener 


ation does not 


support external files and so causes USE ERROR, (see 2.3.) 


2.3 TEST MODIFICATIONS 

Modifications (see Section 1.3) were required for 114 tests. 


following 

tests were split int 

0 two or 

more tests 

because this 

ementat icn 

did not report the viol 

ations of 

the Ada Standa 

rd in the wav 

:oted by the 

original 

tests. 




B22C22A 

324007A 

3240C9A 

325CC2S 

S 3 2 2 2 1A 

33 32 0 4A 

B33225A 

335701A 

S3 c 1"* 1A 

33 6201A 

bs^icia 

53"1I2A 

337201A 

H372C2A 

33~223A 

337302A 

S3 6 22 3A 

2380033 

3 it . ; z A 

=33:osa 

338CC 9A 

538009B 

B j 2 1. J A 

538103B 


=381030 

S38103E 

3432020 

34 4 0 2 2A 

21 c C 0 2 A 

i 2 

=460020 

B4 ^ 1 2 l. E 

B4 9 0 023 

345C 2 3E 

5- 4 9 0 2 0 A 

B n ? , . - 

B49006A 

3492265 

3490C7A 

54922"= 

B4SCC9A 

5 4 A „ - -<2 

354A2CA 

3S4A23A 

358002A 

B5 9 2 22B 

3 5 9 0 0 1A 

acr/* ~ 

359C01I 

5620C6D 

B67001A 

Be"C013 

3670 01C 

B67C2ID 

374103E 

37 410 4A 

B74307B 

B83EC1A 

B83EC1B 

BS5 

BS5C08G 

355C03K 

B91004A 

B91CC5A 

B95003A 

39 = 2:73 

395031A 

3 95 2"4E 

BC1002A 

BC11C9A 

3C1109C 














IMPLEMENTATION DEPENDENCIES 


BC1206A 

BD4003A 

BC20C1E 

BD4006A 

BC3005B 

BD8003A 

BD2A06A 

BD2BC3A BD2D03A 

63223 was 

graded mappi 

icable by 

Evaluation 

Test m c ci i. f i c a 1 . 1 r. as 


directed by the AVC. This test checks that pragmas may have unresolvacie 
arguments, and it includes a check tnat pragma LIST has the required effect, 
cut for this implementation, pragma LIST has no effect if the compilation 
results in errors or warnings, which is the case when the test is processed 
without modification. This test was also processed with the pragmas at lines 
it, 5S, ~0 and 71 commented out sc that pragma LIST had effect. 


Tests C45524A..N (14 tests) were graded passed by Test Modification as 
directed by the AVC. These tests expect that a repeated division will result 
or. cere; but the standard only requires that the result lie in the smallest 
safe interval. Thus, the te-;s were modified to check that the result was 
within the smallest safe interval by adding the following code after line 
141; the modified tests were passed: 

ELSIF VAL <- F'SAFE_SMALL THEN COMMENT ("UNDERFLOW SEEMS GRADUAL"); 

CS3C30C and CB€Z0~k were graded passed by Test Modification as directed by 
the AVC. These tests were modified by inserting "PRAGMA ELABORATE (REPORT);" 
before the package deo.arations at lines 13 and 11, respectively. Without the 
pragma, the packages may be elaborated prior to package report's body, and 
thus the packages' calls to function Report. Ider.t_Int at lines 14 and 13, 
respectively, will raise ?ROGRAM_ERROR. 


5S3EC1B was graded passed by Evaluation Modification as directed by the AVO. 
This test checks that a generic subprogram's formal parameter names (i.e. 
both generic and subprogram formal parameter names) must be distinct; the 
duplicated names within the generic declarations are marked as errors, 
whereas their recurrences in the subprogram bodies are marked as "optional" 
errors—except for the case at line 122, which is marked as an error. This 
implementation does r.ot additionally flag the errors in the bodies and thus 
the expected error at line 122 is not flagged. The AVO ruled that the 
implementation's behavior was acceptable and that the test need not be split 
'such a split would simply duplicate the case m 56 3E31A at line 15). 


2A.2C3JA, CA2CC32..2 >2 tests), CA20C9F and 3C3CC92 were graded inapplicable 
cy Evaluation Meuification as directed by the AVC. These tests instantiate 
generic units before those units' bodies are compiled; this implementation 
creates dependences as allowed by AI-004C8 4 AI-C0506 such that the 
ccmpilaticn of the generic unit bodies makes the instantiating units 
ccsclete, and the co;eotives of these tests car.r.ct be met. 







IMPLEMENTATION DEPENDENCIES 


BC3204C and BC3205D were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic actual parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, toe 
generic bodies are compiled after the units that contain the instantiations, 
and this implementation creates a dependence of the instantiating units or. 
the generic units as allowed by AI-004C8 4 AI-00506 such that the compilation 
of the generic bodies makes the instantiating units obsolete--no errors are 
detected. The processing of these tests was modified by compiling the 
seperate files in the following order (to aiiow re-compilation of obsolete 
units), ar.d all intended errors were then detected by the compiler: 


3C3234C: DC, C-, C2, CBM, C4, C5, C6, CBM 
BC32C5D: DC, D3, DIM 

3C3204D and BC3205C were graded passed by Test Modification as directed by 
the AVC. These tests are similar to 3C3204C and 3C3205D above, except that 
all compilation units are contained in a single compilation. For these two 
tests, a copy of the main procedure (which later units make obsolete) was 
appended tc the tests; all expected errors were then detected. 

CD2A53A was graded inapplicable by ^valuation Modification as directed by the 
AVO. The test contains a specification of a power-cf-ten value as small for 
a fixed-point type. The AVO ruled that, under ACVC 1.11, support of decimal 
smalls may be emitted. 

AD90013 and AD9004A were graded passed by Processing Modification as directed 
by the AVO. These tests check that various subprograms may be interfaced to 
external routines (and hence have no Ada bodies). This implementation 
requires that a file specification exists for the foreign subprogram bodies. 
The following command was issued- to the Librarian to inform it that the 
foreign bodies will be supplied at link time (as the bodies are not actually 
needed-by the program, this command alone is sufficient: 


adalib96C> interface -sys -L-library AD9004A 


CE21C3A, CE21133 ar.d CE3107A were graded inapplicable by Evaluation 
Modification as oirected by the AVO. The tests abort with an unhar.dled 
exception w.-.er. VIE Er.P.DR is raised on the attempt to create an external file. 
Tr.is is accepter!* cehavicr because this implementation does net support 
external files '.cf. AD-13332) . 


-5 





CHAPTER 3 


PROCESSING INFORMATION 


TESTING ENVIRONMENT 


The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

“or a point of contact for technical information about this Ada 
implementation system, see: 

Mr Ron Ouursma 
Director of Ada Products 
Tartan Inc. 

303, Oxford Drive, 

Monroeville, PA 15146, 

USA. 

Tel. (412) 856-36C0 

Per a point of contact for sales information about this Ada implementation 
system, see: 

Mr Bill Geese 
Director of Sales 
Tartan Inc. 

300, Oxford Drive, 

Monroeville, PA 15146, 

USA. 

Tel. (412) 856-3600 

Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 

- . ,r IicT r.ESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
language Standard, whether the test is applicable or inapplicable; 
otherwise, tne Ada Implementation fails the ACVC [Prc9C]. 




PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms, to the Ada Programming Language Standard. 


a) 

Total Number of Applicable Tests 

- 62 8 

b) 

Total Number of Withdrawn Tests 

83 

c) 

Processed Inapplicable Tests 

3 6 

d) 

Non-Prccessed I/C Tests 

2 6 4 

e) 

Non-Processed Floating-Point 



Precision Tests 

159 

f) 

Total Number of Inapplicable Tests 

459 (c+d+e) 


Total Number cf Tests for ACVC 1.11 

41?C (a-b^f) 


The above number of I'C tests were not processed because this impiementaticn 
does not support a file system. The above number of floating-point tests were 
net processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in Section 2.1 had been withdrawn because cf test errors. 

3.3 TEST EXECUTION 


Version 1.11 cf the ACVC comprises 4170 tests. When this compiler was 
tested, the tests listed in Section 2.1 had been withdrawn because of test 
errors. The AVF determined that 459 tests were inapplicable to this 
implementation. . All inapplicable tests were processed during validation 
testing except for 159 executable tests that use floating-point precision 
exceeding that supported by the implementation and 264 executable tests that 
use file operations not supported by the implementation. In addition, the 
modified tests mentioned in Section 2.3 were also processed. 

A 1/4" Data Cartridge containing the customized test suite (see Section 1.3) 
was taken on-site by the validation team for processing. The contents of the 
tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by toe communications link, an RS232 interface, and run. The results 
were captured or. tr.e host computer system. 

Testing was performed using command scripts provided by the customer an 
reviewed by the validation team. See Appendix B for a complete listing o 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 


th y). 





M H 


PROCESSING INFORMATION 


Options used for compiling: 

-f forces the compiler to accept an attempt to compile a unit imported 

from another library, which is normally prohibited. 

-c quiet, steps output of all compiler phase names. Net documented in 

product version as it is the default setting. Option -v was the 
default setting for the validation run. 

-c normally the compiler creates a registered copy of the user's source 

code in the library directory for proper operation of the remake and 
make subcommands to Adalib. 

-la forces a compiler to produce a listing even if nc errors were found. 

No explicit Itr.ker Options were used. 

est output, compiler and linker listings, and job logs were captured on a 
/4" Data Cartridge and archived at the AVF. The listings examined cn-Site 

by the validation team were also archived. 


•3 _ -5 




APPENDIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in 'OG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V” represents the maximum input-line 
length. 

Macro Parameter _ Macro Value _ 


SSIG_ID1 

(1 . 

. V-l «> ' A' , V «=> ' 

1 ' ) 

SBIG_ID2 

(1 . 

• V-l -> ' A' , V «> ' 

2' ) 

S3IG_ID3 

(1. 

. V/2 -> ' A' ) & '3' 
(1..V-l-V/2 «> 'A' 

& 

) 

S3IG_ID4 

(1. 

.V/2 -> ' A' ) & '4' 
(1..V-l-V/2 «> 'A' 

& 

) 

S3IG_INT_LIT 

(1. 

. V-3 -> 'O' ) & "2 98 

ft 

331G_REAL_LIT 

(1 . 

.V-5 -> ' O' ) S "690 

.0” 

$BIG_STRING1 

t M f 

& (1..V/2 -> 'A' ) 

& ' "' 

SBIG_STRING2 

t »» t 

& (1..V-l-V/2 -> ' 

A' ) & 

33LANKS 

(1. 

. V-20 »> ' ') 



3 MAX_L£N_INT_3AS EC_L I TEFAL 

i (1. .V-5 -•>':* i "11 

S MAX_LEN_REA1_3AS ED_1I TEFAL 

”16:" S (1..V-7 -> '0') S "F.E:" 

SMAX STRING LITERAL & (1..V-2 -> 'A') & 


A- 





MACRO PARAMETER 


he following table lists ail of the other macro parameters and their 
espective values. 

Macro Parameter_Macro Value_ 


smax_:n_ien 

240 



SACC_3I2E 

32 



SALIGNMENT 

4 



$COUNT_LAST 

2147483646 



sdefavit_mem_s: ze 

2097152 


• 

SC EF A1”T_S7 OR_UN77 

8 



SDEFAGLT_SYS_NAME 

I960MC 



5EELTA_ECC 

2 #1.0#E-31 



SEN7RY_AEERESS 

SYSTEM.ACTRESS'( 

16#0000_ 

_0 0C8 #) 

$ENTRY_ADORE331 

SYSTEM.ADDRESS'( 

16#0000_ 

00C9#) 

$ENTF.Y_AEORE3S2 

SYSTEM.ACTRESS' ( 

16#0000_ 

00CA#) 

SFIEL0_1AS7 

20 



SFILE_TERMINATOR 

f r 



sf:xee_name 

NO_SUCH_TYPE 



$FLOAT_NAME 

EXTENDED_FLOAT 



sform_str:ng 

»» tl 



sform_str:ng2 

"CANNOT_RESTRICT 

_F IL E_C AP AC IT Y " 

SGREATER THAN EURAT 

ICN 




100_00C.0 

$ GREAT E ? _7 HAN_DVRATI0N_3AS E_LAS 7 

ioo_ooo_:co c 

S3REATER_THA::_ri*AT_3ASE_LAST 

1.80141E-33 

$greater_t:-:an_flcat_safe_large 

1.0E+38 






MACRO PARAMETERS 



t SGREATER_THAN_SHORT_Fl.OAT_SAFE_I.ARGE 

1.0E*36 

SKL3H PRIORITY 17 


SILLS 3AL_EXTERNAL_F I LE_NAME 1 

10 LE 3AL._EXTERNAI._F I LE_M AMS L 

SILLE3AL_EXTERNAL_FXLE_NAME2 

ILLEGAL_EXTERNAL_FILE_NAME2 

SINAPPROPRIATE_L1NE_LENGTH 
3 IN A? ? RCP RI ATE_? AGE_LEN'3TH 

3IN0LOOE_PRAGMA1 "PRAGMA INCLUDE ("A28006DL.TST"1" 

31.VCLVDE_?RAGMA2 "PRAGMA I .VOL COE ("BZ9006F1. TST") " 

SINTE3S?._FIRST -2L474S3S48 

SINTE3ER_LAST 2147433647 

3INTE3ER_LA3T_PL0S_: 214 _ 4S3648 

3 INTERSACE_LANGUAGE 'Jse_Oaii 

SLESS_THAN_DURATION -100_000.0 

SLESS_THAN_DURATION_BASE_FIRST 

-:oc_ooo_oco.o 

$LINE_TERMINATOR ' ' 

3L0W_?RI0RITY 2 

3 MACHINE_CODE_S TATEMSNT 

Two_Forrr.at' (MOV, (Reg_Lir, 31 , (Reg,R3l 1 ; 

SMASH:ne_ 2CCE_TYPE Mnemonic 

3MANTISSA DOC 31 






MACRO PARAMETERS 


SNAME BYTE_INTEGER 

SNAME_LIST I9SCMC 

3N'AME_SPECIFICATICN'l /tlsuna2/acvcl 11/valibacior. x2120a 
3NAME_SPECIFICATION2 'tlsunaZ/acvcl-ll/validaticr., x2120b 
$NAME_SPECIFICATION3 / tlsuna2/acvcl_Xl/validacion/x31I9a 
SNEG_3ASED_INT i6 #FFFFFFFFFFFFFFFE# 

SNEW_MEM_SI2E 2092152 

$new_stor_un:t s 

$NEW_$YS_NAME 196 CMC 

SPAGE_TERMINATOR ' ' 

3R.ECORD_DEFINITICN record Operation: Mnemonic; 

Operand_l: Operand; Operand_2: Operand; 
end record; 

3R£CCRD_NAME Two Format 

STASK_SIZE 32 

STASK_STORAGE_SIZE 4096 

STICK C.C15625 

SVARIABLE_ADDRESS SYSTEM.ADDRESS' (16 # 0 0 0 0_10 C 0 #) 

SVARIABLE_ADDRESS: SYSTEM.ADDRESS' (16#0C00_10C4 *) 

$VARIABLE_ADDRESS2 SYSTEM.ADDRESS' C6#0000 IOCS#) 


3YOUR PRAGMA 


NC SUCH PRAGMA 


u. ** 



be compiler options of "'is Ada 
e^dix, are provided cy o^e c -st.crr.e 
erences in tbis appendix are to 


impienencat ion, as described 
r. Unless specifically noted othe 
compiler documentation and not t 


se, 

bis 



Compilation switches for Tartan Ada Sun 960. 


-A 


-c 


Cl 


-CS 


-d 


-e=<integer> 


-f 


-9 


Generate an assembly cod* fil*. Th* assembly 
cod* fil* has an extension .s for a body or 
.ss for a specification (s*« Section 
FILES-LEFT). 

Generate an assembly cod* fil* with 
interleaved sourc* cod*. Th* assembly cod* 
fil* has an extension .s for a body or .ss 
for a specification. 

Normally, th* compiler creates a registered 
copy of the user's sourc* cod* in th* library 
directory for proper operation of the remake 
and make subcommands to AL960. 

This option suppresses the creation of this 
copy. 

Controls the type of calls generated by the 
conpiler through the option supplied. With 
this option, the compiler generates all long 
calls in the compiled code. With the default, 
the cospiler generates* short calls within ap¬ 
plication cod* and long calls from applications 
to runtime routines. 

Controls th* type of calls generated by th* 
compiler through the option supplied. With 
this option, th* compiler generates all short 
calls in th* compiled cod*. Inappropriate us* 
of this switch will cause a failur* at link 
time. With th* default, th* compiler generates 
short calls within application cod* and long 
calls from applications to runt iso* routines. 

Whan compiling a library unit, d*t*rmine 
whether th* unit is a refinement of its 
previous version and, if so, do not make 
dependent units obsolete. This check is not 
done by default. 

Stop compilation and produce a listing after 
n errors are encountered, where n is in the 
rang* 0..255. The default value for n is 
255. Th* -* qualifier cannot be negated. 


Forces th* compiler to accept an attempt to 
coapil* a unit imported from another library, 
which is normally prohibited. 

Compile with debugging information for 
AdaScope. 


-i 


Cause compiler to omit data segments with the 





2 


text of enumeration literals. This text is 
nonnally produced for exported enumeration 
typas in ordar to support tha taxt attributes 
('IMAGE, 'VALUE and ‘WIDTH). You should usa 
-i only whan you can guarantee that no unit 
that will import tha enumeration type will 
usa any of its taxt attributes. However, if 
you are compiling a unit with an enumeration 
type that is not visible to other compilation 
units, this option is not needed. Tha 
compiler can recognise when the text 
attributes are not used and will not generate 
the supporting strings. 

L*[project:]library Select library and/or project for this 

compilation. This option takes effect after 
all commands from the .adalibrc file have 
been executed, thereby possibly overriding 
its effects. 

La Generate a listing, even if no errors were 

found. The default is to generate a listing 
only if an error is found. 

Ln Never generate a listing. The default is to 

generate a listing only if an error is found. 

-He When package MACHINE_CODE is used, controls 

whether the compiler attempts to alter operand 
address modes when those address inodes are used 
incorrectly. With this option, The compiler 
does not attempt to fix any machine code insertion 
that has incorrect address modes. An error 
message is issued for any machine code insertion 
that is incorrect. With the default, the compiler 
attempts to generate extra instructions to fix 
incorrect address modes in the array aggregates 
operand field. 

-Mw 

The compiler attempts to generate extra 
instructions to fix incorrect address modes. A 
warning message is issued if such a ''fixup'' 
is required. With the default, the compiler 
attenpts to generate extra instructions to fix 
incorrect address modes in the array aggregates 
operand field. 

Op*n Control the level of optimization performed 

by the cospiler, requested by n. The 
optimization levels available are: 

n ■ 0 Minimum - Performs context 

determination, constant fold¬ 
ing, algebraic manipulation, 
and short circuit analysis. 






3 


n * 1 Low - Performs level 0 op- 

timications plus cosnon sub¬ 
expression elimination and 
equivalence propagation within 
basic blocks. It also op¬ 
timizes evaluation order. 

n ■ 2 Best tradeoff for space/time - 
the default level. Performs 
level 1 optimisations plus flow 
analysis which is used for 
common subexpression elimina¬ 
tion and equivalence propaga¬ 
tion across basic blocks. It 
also performs invariant expres¬ 
sion hoisting, dead code 
elimination, and assignment 
killing. Level 2 also performs 
lifetime analysis which is used 
to improve register allocation. 
It also performs inline expan¬ 
sion of subprogram calls in¬ 
dicated by Pragma INLINE, if 
possible. 

n * 3 Time - Performs level 2 

optimizations plus inline ex¬ 
pansion of subprogram calls 
which the optimizer decides are 
profitable to expand (from an 
execution time perspective). 
Other optimizations w h i ch im¬ 
prove execution time at a cost 
to image size are performed 
only at this level. 

n ■ 4 Space - Performs those 

optimizations w hi c h usually 
produce the smallest code, 
often at the expense of 
speed. This optimization 
level may not always produce 
the smallest code, however, 
another level may produce 
smaller code under certain 
conditions. 

-RS Causes the conyiler to accept non-Ada input, 

necessary to replace package SYSTEM. This 
qualifier should not be used for compiling 
user-defined packages containing illegal 
code. Changes of package SYSTEM must fully 
conform to the requirements stated in ARM 4-5 
13.7 and 13.7.1, and must not change the 
given definition of type ADDRESS, in order to 
preserve validatability of the Ada system. 






4 


-r For internal us* only, this option is used by 

AL960 when it invokes the cot^iier in 
(re)make mode. 

-S[ACDEILORSZ] Suppress the given set of checks: 

A ACCZS S_CHECK 

C CONSTRAINT_CHECK 

D D Z SCRIMZNANT_CHECK 

E ELABORATZONjCHECK 

I INDEX_CHECK 

L LENGTH_CHECK 

0 OVERFLCW_CHECK 

R RANGE_CHECK 

S STORAGE_CHECK 

Z "ZERO"DIVZSZON_CHECK 

The -S option has the same effect as an 
equivalent pragma SUPPRESS applied to the 
source file. Zf the source program also 
contains a pragma SUPPRESS, then a given 
check is suppressed if either the pragma or 
the switch specifies it; that is, the effect 
of a pragma SUPPRESS cannot be negated with 
the cosanand line option. See LRM 11.7 for 
further details. Supplying the -S option 
significantly decreases the sire and execu¬ 
tion time of the compiled code. Examples 
are: 

-SOZ Suppress OVERFLOHjCHECK and 

"ZERO”DIVXSION_CHECK. 

-S Suppress all checks. 

-SC Suppress CONSTHAINT_ERROR, equiv¬ 
alent to -SADZliR. (Note that -SC 

is upward compatible with version 

2 . 0 ) 

-s Parses a unit and reports syntax errors, then 

stops compilation without entering a unit in 
the library. 


b 


-x 


Print out compiler phase names. The compiler 
prints out a short description of each 
compilation phase in progress. 

Suppress warning messages. 

Include cross reference information for the 
source in the object file. 


Zn addition, the output from the compiler may be redirected using the 
redirection facility including for stderr; for exasple 


% tada960mc tax_spec.ada >4 tax_spec.txt 





LINKER OPTIONS 


The linker options of this Ada implementation, as described in this Appendix 
are provided by the customer. Unless specifically noted otherwise 
references in this appendix are to linker documentation and not to the 
report. 


B-2 




Linker switches for Sun hosted Tartan Ada compilers. 


COMMAND QUALIFIERS 

This section describes the command options available to a user who directly 
invoices the linker. The option names can be abbreviated to unique prefixes; 
the first letter is sufficent for all current option naxses. The option names 
are not case sensitive. 


-CONTROL file 


-OUTPUT file 


-ALLOCATIONS 

-UNUSEDSECTIONS 

-SYMBOLS 

-RESOLVEMODULES 


The specified file contains linker control commands. 
Only one such file may be specified, but it can 
include other files using the CONTROL command. Every 
invocation of the linker must specify a pontrol file. 

The specified file is the name of the first output 
object file. The module name for this file will be 
null. Only one output file may be specified in this 
manner. Additional output files may be specified in 
the linker control file. 

Produce a link map showing the section allocations. 

Produce a link map showing the unused sections. 

Produce a link map showing global and external 
symbols. 

This causes the linkmc to not perform unused section 
elimination. Specifying this option will generally 
make your program larger, since unreferenced data 
within object files will not be eliminated. Refer to 
Sections RXSOLVXJCMD and US*_PROCESSING for infor¬ 
mation on the way that unused section elimination 
works. 


-MAP Produce a link map containing all information except 

the unused section listings. 

Note that several listing options are permitted. This is because link maps 
for real systems can become rather large, and writing them consumes a 
significant fraction of the total link time. Options specifying the contents 
of the link map can be combined, in which case the resulting map will contain 
all the information specified by any of the switches. The name of the file 
containing the link map is specified by the LIST command in the linker control 
file. If your control file does not specify a name and you request a listing, 
the listing will be written to the standard output stream. 



n ». 


APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The ;r._y alleged implementation dependencies correspond to implementation- 
epende.nt pragmas, to certain machine-dependent conventions as mentioned in 
hapter 13 of the Ada Standard, and to certain allowed restrictions on 
representation clauses. The implementation-dependent characteristics of this 
Ada implementation, as described in this Appendix, are provided by the 
customer. Unless specifically noted otherwise, references in this Appendix 
are to compiler documentation and not to this report. implementation- 
specific portions of the package STANDARD, which are not a part of this 
Appendix F, are: 

package STANDARD is 


type BYT£_INT£GER is range -128 .. 127; 

type SHCRT_INTEGER is range -32768 .. 32767; 

type INTEGER is range -2147483648 .. 2147483647; 

type LCNG_INTEGER is range -9223372036854775808 .. 9223372036854775807; 

type FLOAT is digits 6 range 

-2*1.11111111111111111111111#e!26 .. 2#1.11111111111111111lillll#el26; 


type 


FLOAT 


is digits 15 range 


-2#1.11111111111111111111111111111111111:1111111111111111*e1022 
2*1.1111111111111111111111111111111111111111111111111111*elC22; 


type EXTENDED_FL3AT is digits 18 range 

11111111111111111111111111111111111111111111111111111111111111*el6282 .. 
1111111111111 mill 111 11111111111111111111111111111111 111 11111 *e 16382 ; 


type DURATION is delta 0.C0C1 range -86400.0 


8 640 0 .; 


e.nc 


■2 a ri.. _/ , 


















Chapter 5 

Appendix F to MIL-STD-1815A 


This chapter contains the required Appendix F to the LRM which is Military Standard. Ada Programming 
Language, ANSI/MEL-STD-1815A ^ American National Standards Institute, Inc.. February 17,1983). 

5.1. PRAGMAS 

5.1.1. Predefined Pragmas 

This section summarizes the effects of and restrictions on predefined pragmas. 

• Access collecuons are not subject to automatic storage reclamation so pragma CONTROLLED has no effect. 
Space deallocated by means of UNCHECKED_DEALLOCAriON will be reused by the allocation of new 
objects. 

• Pragma ELABORATE is supported. 

• Pragma INLINE is supported. 

• Pragma interface is supported. A particular Ada calling sequence is associated with a subprogram 
whose impiementanon is provided in the form of an object code module. Languag»_Nam* may be 
either Use_Call or Use_BaL as described in Section 5.1.2.2. Any other Language_Name will be 
accepted, but ignored, and the default. 'Jse_Cali will be used. 

• Pragma LIST is supported but has the intended effect only if the command qualifier LIST-ALWAYS was 
supplied for compilation, and the listing generated was not due to the presence of errors and/or warnings. 

• Pragma MEMORY_SIZE is accepted but no value other than that specified in Package SYSTEM (Section 
53) is allowed. 

• Pragma OPTIMIZE is supported, but on a subprogram basis only. It does not affect code at the block 

leveL ' 

• Pragma PACK is supported. 

• Pragma PAGE is supported but has the intended effect only if the command qualifier list-always was 
supplied for compilation, and the listing generated was not due to the presence of errors and/or warnings. 

• Pragma PRIORITY is supported. 

• Pragma STORAGEJJNIT is accepted but no value other than that specified in Package SYSTEM (Section 

5.3) is allowed. 

• Pragma shared is not supported. No warning is issued if it is supplied. 

• Pragma SUPPRESS is supported. 

• Pragma SYSTEM_NAME is accepted but no value other than that specified in Package SYSTEM (Section 

5.3) is allowed. 


USER MANUAL FOR TARTAN ADA SUN 960 


5.1.2. Implementation-Defined Pragmas 

Implementation-defined pragmas provided by Tartan are described in the following sections. 

5.12.1. Pragma LINKAGE_NAM£ 

The pragma linkage_name associates an Ada entity with a string that is meaningful externally; e.g., to a 
linkage editor. It takes the form 

pragma LINKAGE_NAM£ {Ada-simple-name, string-constant) 

The Ada-simple-name must be the name of an Ada entity declared in a package specification. This entity must be 
one that has a runtime representation; e.g., a subprogram, exception or object. It may not be a named number or 
string constant. The pragma must appear after the declaration of the entity in the same package specification. 

The effect of the pragma is to cause the string-constant to be used in the generated assembly code as an 
external name for the associated Ada entity. It is the responsibility of the user to guarantee that this string 
constant is meaningful to the linkage editor and that no illegal linkname clashes arise. 

This pragma has no effect when applied to a library subprogram or to a renames declaration; in the latter case, 
no warning message is given. 

When determining the maximum allowable length for the external linkage name, keep in mind that the 
compiler will generate names for elaboration flags simply by appending the suffix #GOTO. Therefore, the 
external linkage name has 5 fewer significant characters than the lower limit of other tools that need to process 
the name (e.g., 40 in the case of the Tartan Linker). 

5.122. Pragma FORElGN_BODY 

In addition to Pragma interface. Tartan Ada supplies Pragma FOREIGN_body as a way to access 
subprograms in other languages. 

Unlike Pragma INTERFACE, Pragma FOREIGN_BODY allows access to objects and exceptions (in addition 
to subprograms) to and from other languages. 

Some restrictions on Pragma FORE I GN_BODY that are not applicable to Pragma INTERFACE are: 

• Pragma FOREIGN_BODY must appear in a non-generic library package. 

• All objects, exceptions and subprograms in such a package must be supplied by a foreign object module. 

• Types may not be declared in such a package. 

Use of the pragma FORE I GN_BOD Y dictates that all subprograms, exceptions and objects in the package are 
provided by means of a foreign object module. In order to successfully link a program including a foreign body, 
the object module for that body must be provided to the library using the AL960 foreign command described 
in sections 3.3.3 and 13.5.5. The pragma is of the form: 

pragma FOR£IGN_BODY ( Language_name [, elaboration_routine_name]) 

The parameter Language_name is a suing intended to allow the compiler to identify the calling convention used 
by die foreign module (but this functionality is not yet in operation). Currently, the programmer must ensure that 
the calling convention and data representation of the foreign body procedures are compatible with those used by 
the Tartan Ada compiler. Subprograms called by tasks should be reentrant. 

The optional elaboration joudnejtame string argument is a linkage name identifying a routine to initialize 
the package. The routine specified as the elaboration joutinejwne , which will be called for the elaboration of 
this package body, must be a global routine in the object module provided by the user. 

A specification that uses this pragma may contain only subprogram declarations, object decarations that use 
an unconstrained type mark, and number declarations. Pragmas may also appear in the package. The type mark 
for an object cannot be a task type, and the object declaration must not have an initial value expression. The 
pragma must be given prior to any declarations within the package specification. If the pragma is not located 
before the first declaration, or any restriction on the declarations is violated, the pragma is ignored and a warning 
is generated. 








APPENDIX F TO MIL-STD-U15 A 


The foreign body is entirely responsible for initializing objects declared in a package utilizing pragma 
for£IGN_body. In particular, the user should be aware that the implicit initializations described in LRM 3.2.1 
are not done by the compiler. (These implicit initializations are associated with objects of access types, certain 
record types and composite types containing components of the preceding kinds of types.) 

Pragma linkage_name should be used far all declarations in the package, including any declarations in a 
nested package specification to be sure that there are no conflicting link names. 

In the following example, we want to call a function plan which computes polynomials and is written in C. 

package MATH_FUNCTIONS is 
pragma FOR£IGN_BODY ("C"); 

function POLYNOMIAL (X: INTEGER) return INTEGER; 

—Ada spec matching the C routine 
pragma LINKAGE_NAME (POLYNOMIAL, "plain"); 

—Force compiler to use name "plain” when referring to this 
— function 
end MATH_FUNCTIONS; 

with MATH_FUNCTIONS; use MATH_FUNCTIONS; 
procedure MAIN is 

X:INTEGER :- POLYNOMIAL(10); 

— Will generate a call to "plmn" 

begin ... 
end MAIN; 

To compile, link and run the above program, you do the following steps; 

1. Compile MALFUNCTIONS 

2. Compile MAIN 

3. Obtain an object module (e.g. math. TOF) containing the compiled code for plmn. 

4. Issue the command 

AL960 foreign math_functions math.TOF 

5. Issue the command 

AL960 link main 

Without Step 4. an attempt to link will produce an error message informing you of a missing package body for 
MALFUNCTIONS. 

Using an Ada body from another Ada program library. The user may compile a body written in Ada for a 
specification into the library, regardless of the language specified in the pragma contained in the specification. 
This capability is useful for rapid prototyping, where an Ada package may serve to provide a simulated response 
for the functionality that a foreign body may eventually produce. It also allows the user to replace a foreign body 
with an Ada body without recompiling the specification. 

The user can either compile an Ada body into the library, or use the command AL960 foreign (see 
Sections 3.3.3 and 13.5.5) to use an Ada body Grom another library. The Ada body from another library must 
have been compiled under an identical specification. The pragma LINKAGE_NAM£ must have been applied to 
all entities declared in the specification. The only way to specify the linkname for the elaboration routine of an 
Ada body is with the pragma foreign_body. 

5.123, Pragma INTERFACE 

The pragma interface associates a particular Tartan Ada calling sequence with a subprogram whose 
implementation is provided in the form of an object code module. 

The form of the pragma is: 

pragma INTERFACE [LanguageJiarn, SubprogramJlame) 




USER MANUAL FOR TARTAN ADA SUN 960 


Language_Name may be either Use_Call or Use_Bal as described in Section 5.1.2.2. Any other 
Language_Name will be accepted, but ignored, and the default, Use_Call will be used. 

While the BAL calling convention is faster than the standard calling convention, be aware that BAL must be 
used carefully. In particular, when a routine is called with BAL: 

• No new stack frame is allocated. This means that the called routine must not change the stack pointer, or 
must at least ensure that the stack pointer is restored before the routine returns. 

• No new local registers are allocated. 

• The called routine must return via a bx (reg) instruction. The BAL instruction will automatically store 
the return address in register gl4. 

• If a called routine has more than 12 words worth of parameters, the compiler will store the argument block 
pointer in gl4. Since the BAL instruction will place the return address in gl4, the called routine could 
find that its argument block pointer has been crashed. 

Please see Chapter 6 for a complete list of BAL calling convention restrictions. 


52. IMPLEMENTATION-DEPENDENT ATTRIBUTES 

No implementation-dependent attributes are currently supported. 


S3. SPECIFICATION OF THE PACKAGE SYSTEM 


The parameter values specified for the 80960MC in package SYSTEM [LRM 13.7.1 and Appendix C] are: 

package SYSTEM is 

type ADDRESS is new Integer; 
type NAME is (I960MC); 


SYSTEM NAME : 

constant 

name I960MC; 

STORAGE UNIT : 

constant 


8; 

MEMORY_SIZE : 

constant 

i m 

2_097_152; 

MAX INT : 

constant 

i m 

9 223 372 036 854 775 807; 

MIN_INT : 

constant 


-MAX_INT - 1; 

MAX_DIGITS : 

constant 


CD 

H 

MAX MANTISSA : 

constant 

. _ 

31; 

FINE DELTA : 

constant 


2#1.0#e-31; 

TICK : 

constant 

• m 

0.015625; 

subtype PRIORITY 

IS INTEGER 

range 2 .. 17; 


end 


DEFAULT_PRIORITY 

RUNTIME_ERROR 

SYSTEM; 


constant PRIORITY 
exception ; 


PRIORITY'FIRST; 


5.4. RESTRICTIONS ON REPRESENTATION CLAUSES 

The following sections explain the basic restrictions for representation specifications followed by additional 
restrictions applying to specific kinds of clauses. 

5.4.1. Basie Restriction 

The basic restriction on representation specifications {LRM 13.1] is that they may be given only for types 
declared in terms of a type definition, excluding a g#neric_typa_definition (LRM 12.1) and a 
privatn_typn_dnfi.ni.tion (LRM 7.4). Any representation clause irTviolation of these rules is not obeyed 
by the compiler; an error message is issued. 






APPENDIX F TO ME.-STD-1815A 


Further restrictions are explained in the following sections. Any representation clauses violating those restric¬ 
tions cause compilation to stop aid a diagnostic message to be issued. 

5.42. Length Clauses 

Length clauses [LRM 13.2] are, in general, supported. For details, refer to the following sections. 

5.42.1. Size Specifications for Types 

The rules and restrictions for size specifications applied to types of various classes are described below. 

The following principle rules apply: 

1. The size is specified in bits and must be given by a static expression. 

2. The specified size is taken as a mandate to store objects of the type in the given size wherever feasible. 
No attempt is made to store values of the type in a smaller size, even if possible. The following rules 
apply with regard to feasibility: 

• An object that is not a component of a composite object is allocated with a size and alignment that 
is referable on the target machine; that is, no attempt is made to create objects of non-referable size 
on the stack. If such stack compression is desired, it can be achieved by the user by combining 
multiple stack variables in a composite object; for example 

type My_Enum is (A,B); 
for My_enum'size use 1; 

V, W: My_enum; — will occupy two storage 

— units on the stack 

— (if allocated at all) 
type rec is record 

V, W: My_enum; 
end record; 
pragma Pack(rec); 

0: rec; — will occupy one storage unit 

• A formal parameter of the type is sized according to calling conventions rather than size 
specifications of the type. Appropriate size conversions upon parameter passing take place 
automatically and are transparent to the user. 

• Adjacent bits to an object that is a component of a composite object, but whose size is 
non-referable, may be affected by assignments to the object, unless these bits are occupied by other 
components of the composite object; that is, whenever possible, a component of non-referable size 
is made referable. 

In all cases, the compiler generates correct code for all operations on objects of the type, even if they are 
stored with differing representational sizes in different context'.. 

Note: A size specification cannot be used to force a certain size in value operations of the type; for 
example 

type my_int is range 0..65535; 
for my_Int'size use 16; — o.k. 

A,B: tny_int; 

...A + B... — this operation will generally be 
—• executed on 32-bit values 

3. A size specification for a type specifies the size fa objects of this type and of all its subtypes. For 
components of composite types, whose subtype would allow a shorter representation of the component, 
no attempt is made to take advantage of such shorter representations. In contrast, fa types without a 
length cl au se , such co m ponents may be represented m a lesser number of bits than the number of bits 
required to represent all values of the type. Thus, in the example 





USER MANUAL FOR TARTAN ADA SUN 960 


type MY_INT is range 0..2**15-1; 
for MY_INT'SIZE use 16; -- (1) 
subtype SMALL_MY_INT is MY_INT range 0..255; 
type R is record 

X; SMALL_MY_INT; 
end record; 

the component R.x will occupy 16 bits. In the absence of the length clause at (1), R,x may be 
represented in 8 bits. 

Size specifications for access types must coincide with the default size chosen by the compiler for the type. 

Size specifications are not supported for floating-point types or task types. 

5.422. Size Specification for Scalar Types 

The specified size must accommodate all possible values of the type including the value 0 (even if 0 is not in 
the range of the values of the type). For numeric types with negative values the number of bits must account for 
the sign bit No skewing of the representation is attempted. Thus 
type my_int is range 100..101; 
requires at least 7 bits, although it has only two values, while 
type my_int is range -101..-100; 
requires 8 bits to account for the sign bit. 

A size specification for a real type does not affect the accuracy of operations on the type. Such influence 
should be exerted via the accuracy_def inition of the type (LRM 3.5.7, 3.5.9). 

A size specification for a scalar type may not specify a size larger than the largest operation size supported by 
the target architecture far the respective class of values of the type. 

5.4 2J. Size Specification for Army Types 

A size specification for an array type must be large enough to accommodate all components of the array under 
the densest packing strategy. Any alignment constraints on the component type (see Section 5.4.7) must be met. 

The size of the component type cannot be influenced by a length clause for an array. Within the limits of 
representing all possible values of the component subtype (but not necessarily of its type), the representation of 
components may, however, be reduced to the minimum number of bits, unless the component type carries a size 
specification. 

If there is a size specification for the component type, but not for the array type, the component size is 
rounded up to a referable size, unless pragma PACK is given. This applies even to boolean types or other types 
that require only a single bit for the representation of all values. 

5.42.4. Size Specification for Record Types 

A size specification for a record type does not influence the default type mapping of a record type. The size 
must be at least as large as the number of bits determined by type mapping. Influence over packing of com¬ 
ponents can be exerted by means of (partial) record representation clauses or by Pragma pack. 

Neither the size of component types, nor the representation of component subtypes can be influenced by a 
length clause for a record. 

The only implementation-dependent components allocated by Tartan Ada in records contain dope information 
for arrays whose bounds depend on discriminants of the record or contain relative offsets of components within a 
record layout for record components of dynamic size. These implementation-dependent components cannot be 
named or sized by the user. 




APPENDIX F TO MIL-STD-1815A 


A size specification cannot be applied to a record type with components of dynamically determined size. 

Note: Size specifications for records can be used only to widen the representation accomplished by padding at 
the beginning or end of the record. Any narrowing of the representation over default type mapping must be 
accomplished by representation clauses or pragma PACK. 

S.42J. Specification of Collection Sizes 

The specification of a collection size causes the collection to be allocated with the specified size. It is 
expressed in storage units and need not be static; refer to package SYSTEM for the meaning of storage units. 

Any attempt to allocate more objects than the collection can hold causes a STORAGE_error exception to be 
raised. Dynamically sized records or arrays may carry hidden administrative storage requirements that must be 
accounted for as pan of the collection size. Moreover, alignment constraints on the type of the allocated objects 
may make it impossible to use all memory locations of the allocated collection. No matter what the requested 
object size, the allocator must allocate a minimum of 2 words per object This lower limit is necessary for 
administrative overhead in the allocator. For example, a request of 5 words results in an allocation of 5 words; a 
request of 1 word results in an allocation of 2 words. 

Furthermore, the allocator must round non-word sized requests up to the nearest word. For example, a 
request of 11 bytes is rounded up to 12 bytes (3 words). 

In the absence of a specification of a collection size, the collection is extended automatically if more objects 
are allocated than possible in the collection originally allocated with the compiler-established default size. In tins 
case, storage_error is raised only when the available target memory is exhausted. If a collection size of 
zero is specified, no access collection is allocated. 

5.42.6. Specification of Task Activation Size 

The specification of a task activation size causes the task activation to be allocated with the specified size. It 
is expressed in storage units; refer to package SYSTEM for the meaning of storage units. 

If the storage specified for a task activation (T' Storage_Size) is not a multiple of 4096 (one page), the 
compiler allocates the next higher multiple of 4096, as permitted by the language. 

Any attempt to exceed the activation size during execution causes a STORAGE_ERROR exception to be 
raised. Unlike collections, there is no extension of task activations. 

5.42.7. Specification of ' SMALL 

Only powers of 2 are allowed for ' SMALL. 

The length of the representation may be affected by this specification. If a size specification is also given for 
tlie type, the size specification takes precedence; the specification of ' small must then be accommodatable 
within the specified size. 

5.4.3. Enumeration Representation Clauses 

For enumeration representation clauses [LRM 13.3], the following restrictions apply: 

• The internal codes specified for the literals of the enumeration type may be any integer value between 
INTEGER' first and INTEGER' LAST, It is strongly advised to not provide a representation clause that 
merely duplicates the default mapping of enumeration types, which assigns consecutive numbers in as¬ 
cending order starting with 0, since unnecessary runtime cost is incurred by such duplication. It should be 
noted that the use of attributes on enumeration types with user-specified encodings is costly at run time. 

• Amy types, whose index type is an enumeration type with noncontiguous value encodings, consist of a 
contiguous sequence of components. Indexing into the array involves a runtime translation of the index 
value into the corresponding position value of the enumeration type. 





USER MANUAL FOR TARTAN ADA SUN 960 


5.4.4. Record Representation Clauses 

The alignment clause of record representation clauses [LRM 13.4] is observed. 

Static objects may be aligned at powers of 2 up to a page boundary. The specified alignment becomes the 
minimum alignment of the record type, unless the minimum alignment of the record forced by the component 
allocation and the minimum alignment requirements of the components is already more stringent than the 
specified alignment 

The component clauses of record representation clauses are allowed only for components and discriminants 
of statically determinable size. Not all components need to be present Component clauses for components of 
variant pans are allowed only if the size of the record type is statically determinable for every variant 

The size specified for each component must be sufficient to allocate all possible values of the component 
subtype (but not necessarily the component type). The location specified must be compatible with any alignment 
constraints of the component type; an alignment constraint on a component type may cause an implicit alignment 
constraint on the record type itself. 

If some, but not all, discriminants and components of a record type are described by a component clause, then 
the discriminants and component' wi 'iout component clauses are allocated after those with component clauses; 
no attempt is made to utilize gap* L it by the user-provided allocation. 

5.4.5. Address clauses 

Address clauses [LRM 13.5] are supported with the following restrictions: 

• When applied to an object, an address clause becomes a linker directive to allocate the object at the given 
address. For any object not declared immediately within a top-level library package, the address clause is 
accepted but meaningless. Please refer to section 8.10 for details on how address clauses relate to linking; 
refer to section 12.2 for an example. 

• Address clauses applied to local packages are not supported by Tartan Ada. Address clauses applied to 
library packages are prohibited by the syntax; therefore, an address clause can be applied to a package only 
if it is a body stub. 

• Address clauses applied to subprograms and tasks are implemented according to the LRM rules. When 
applied to an entry, the specified value identifies an interrupt in a manner customary for the target 
Immediately after a task is created, a runtime call is made for each of its entries having an address clause, 
establishing the proper binding between the entry and the interrupt Refer to section 10.17 for more 
details. A specified address must be an Ada static expression. 

• Address clauses specify virtual, not physical, addresses. 

• When specifying absolute addresses, please note that the compiler will treat addresses as an INTEGER 
type. This means that specifications of addresses may raise arithmetic overflow errors; i.e., addresses must 
be in the range integer' FIRST.. INTEGER'LAST. To represent an address greater than 
INTEGER' LAST, use the negated radix-complement of the desired address. For example, to express 
address 16#C000_000, specify instead -16#4000_000. 

5.4.6. Pragma PACK 

Pragma PACK [LRM 13.1] is supported. For details, refer to the following sections. 

5.4.6. J. Pragma PACK for Arrays 

If pragma pack is applied to an array, the densest possible representation is chosen. For details of packing, 
refer to the explanation of size specifications for arrays (Section 5.4.2.3). 

If, in addition, a length clause is applied to 






APPENDIX F TO MIL-STD-l 815 A 


1. The array type, the pragma has no effect, since such a length clause already uniquely determines the array 
packing method. 

2. The component type, the array is packed densely, observing the component’s length clause. Note that the 
component length c lause may have the effect of preventing the compiler from packing as densely as 
would be the default if pragma pack is applied where there was no length clause given for the com¬ 
ponent type. 

5.4.62. The Predefined Type String 

Package STANDARD applies Pragma PACK to the type string. 

However, when applied to character arrays, this pragma cannot be used to achieve denser packing than is the 
default for the target: 4 characters per 32-bit word. 

5.4.6J. Pragma PACK for Records 

If pragma pack is applied to a record, the densest possible representation is chosen that is compatible with 
the sizes and alignment constraints of the individual component types. Pragma PACK has an effect only if the 
sizes of some component types are specified explicitly by size specifications and are of non-referable nature. In 
the absence of pragma PACK, such components generally consume a referable amount of space. 

It should be noted that the default type mapping for records maps components of boolean or other types that 
require only a single bit to a single bit in the record layout, if there are multiple such components in a record. 
Otherwise, it allocates a referable amount of storage to the component. 

If pragma pack is applied to a record for which a record representation clause has been given detailing the 
allocation of some but not all components, the pragma PACK affects only the components whose allocation has 
not been detailed. Moreover, the strategy of not utilizing gaps between explicitly allocated components still 
applies. 

S.4.7. Minimal Alignment for Types 

Certain alignment properties of values of certain types are enforced by the type mapping rules. Any represen¬ 
tation specification that cannot be satisfied within these constraints is not obeyed by the compiler and is ap¬ 
propriately diagnosed. 

Alignment constraints are caused by properties of the target architecture, most notably by the capability to 
extract non-aligned component values from composite values in a reasonably efficient manner. Typically, restric¬ 
tions exist that make extraction of values that cross certain address boundaries very expensive, especially in 
contexts involving array indexing. Permitting data layouts that require such complicated extractions may impact 
code quality on a broader scale than merely in the local context of such extractions. 

Instead of describing the precise algorithm of establishing the minimal alignment of types, we provide the 
general rule that is being enforced by the alignment rules: 

• No object of scalar type including components or subcomponents of a composite type, may span a target- 
dependent address boundary that would mandate an extraction of the object's value to be performed by two 
or more extractions. 

SS. IMPLEMENTATION-GENERATED COMPONENTS IN RECORDS 

The only implementation-dependent components allocated by Tartan Ada in records contain dope information 
for arrays whose bounds depend on discriminants of the record. These components cannot be named by the user. 






USER MANUAL FOR TARTAN ADA SUN 960 


5.6. INTERPRETATION OF EXPRESSIONS APPEARING IN ADDRESS CLAUSES 

Section 13.S.1 of the Ada Language Reference Manual describes a syntax for associating interrupts with task 
entries. Tartan Ada implements the address clause 

for TOENTRY use at intID; 

by associating the intemipt specified by intID with the toentry entry of the task containing this address 
clause. The interpretation of intID is both machine and compiler dependent. 

The Ada runtimes provide interrupts that may be associated with task entries. These interrupts are of type 
System.Address in the ranges 8..243,2S2..255,264..499, and 508..511. 

5.7. RESTRICTIONS ON UNCHECKED CONVERSIONS 

Tartan supports UNCHECK£D_CONVERSION with a restriction that requires the sizes of both source and 
target types to be known at compile time. The sizes need not be the same. If the value in the source is wider than 
that in the target, the source value will ue truncated. If narrower, it will be zero-extended. Calls on instantiations 
of unchecked_convers I ON are made inline automatically. 

5.8. IMPLEMENTATION-DEPENDENT ASPECTS OF INPUT-OUTPUT PACKAGES 

Tartan Ada supplies the predefined input/outpul packages DIRECT_I0, SEQUENTIAL_I0, TEXT_I0, and 
lo w_LEVEL_lo as required by LRM Chapter 14. However, since 80960MC processor is used in embedded 
applications lacking both standard I/O devices and file systems, the functionality of DIRECT_I0, 
SEQUENTiAL_I0, and TEXT_io is limited. 

direct_io and SEQUENTIAL_I0 raise USE_ERROR if a file open or file access is attempted. TEXT_io 
is supported to CURRENT OUTPUT and from CURRENT_INPUT. A routine that takes explicit file names raises 
USE_ERROR. LOW_LEVEL_IO for 80960MC processor provides an interface by which the user may read and 
write from memory mapped devices. In both the SEND_CONTROL and RECEIVE_CONTROL procedures, the 
device parameter specifies a device address while the data parameter is a byte, halfwerd, word, or doubleword of 
data transferred. 

5.9. OTHER IMPLEMENTATION CHARACTERISTICS 

The following information is supplied in addition to that required by Appendix F to MIL-STD-1815A. 

5.9.1. Definition of a Main Program 

Any Ada library subprogram unit may be designated the main program for purposes of linking (using the 
AL960 link command) provided that the subprogram has no parameters. 

Tasks initiated in imported library units follow the same rules for termination as other tasks [described in 
LRM 9.4 (6-10)]. Specifically, these tasks are not terminated simply because the main program has terminated. 
Terminate alternatives in selective wait statements in library tasks are therefore strongly recommended. 

5.92. Implementation of Generic Units 

All instantiations of generic units, except the predefined generic UNCHECKED_CONVERSlON and 
UNCHECKED_DEALLOCATI on subprograms, are implemented by code duplications. No attempt at sharing 
code by multiple instantiations is made in this release of Tartan Ada. 

Tartan Ada enforces the restriction that the body of a generic unit must be compiled before the unit can be 
instantiated. It does not impose the restriction that the specification and body of a generic unit must be provided 
as part of the same compilation. A recompilation of the body of a generic unit will casue any units that 
instantiated this generic unit to become obsolete. 





APPENDIX F TO MIL-STD-1815A 


5.9.3. Attributes of Type Duration 

The type DURATION is defined with the following characteristics: 


Attribute 

Value 

DURATION'DELTA 

0.0001 sec 

DURATION'SMALL 

0.000061 sec 

DURATION' FIRST 

-86400.0 sec 

DURATION'LAST 

86400.0 sec 


5.9.4. Values of Integer Attributes 

Tartan Ada supports the predefined integer type INTEGER. The range bounds of the predefined type 
INTEGER are: 

INTEGER' FIRST is -2**31 
INTEGER' LAST is 2**31-1 

LONG_INTEGER' FIRST is -2**63 
LONG_INTEGER' LAST is 2**63-l 

SHORT_INTEGER' FTRST is -2** 15 
SHORT_INTEGER' LAST is 2**15-1 

BYTE_INTEGER' FIRST is -128 
BYTE_INTEGER' LAST is 127 

The range bounds for subtypes declared in package TEXT_IO are: 

COUNT' FIRST is 0 

COUNT' LAST is INTEGER' LAST - 1 

POSITIVE_COUNT' FIRST is 1 
POSITIVE_COUNT'LAST is INTEGER'LAST - 1 

FIELD'FIRST is 0 
FIELD' LAST is 20 

The range bounds for subtypes declared in packages DIRECT_IO are: 

COUNT' FIRST is 0 

COUNT' LAST is INTEGER' LAST 

POSITIVE_COUNT' FIRST is 1 
POSITIVE_COUNT'LAST is COUNT' LAST 

5.9.5. Ordinal Types 

Ordinal types are supported via a separate package, which is included with the standard packages. Package 
Ordinal_Supporc provides support for unsigned arithmetic, including functions which convert between 
Integer and Ordinal types, and a complete set of Ordinal arithmetic operadons. The specification of package 
Ordinai_Support may be found in the appendix. 






USER MANUAL FOR TARTAN ADA SUN 960 


5.9.6. Values of Floating-Point Attributes 

Tartan Ada supports the predefined floating-point types FLOAT, LONG_FLOAT, and EXTENDED_FLOAT. 
Attribute Value for FLOAT 


DIGITS 

MANTISSA 


EMAX 


6 

21 

84 


EPSILON 

approximately 

SMALL 

approximately 

LARGE 

approximately 

SAFE_EMAX 

SAFE_SMALL 

approximately 

SAFEJLARGE 

approximately 

FIRST 

approximately 

LAST 

approximately 
MACHINE_RADIX 
MACHINE_MANTIS SA 
MACHINE_EMAX 
MACHINE EMIN 


16#0.1000 000#E-4 
9.536743E-07 

16#0.8000_000#E-21 
2.58494E-26 

16#0.FFFF_F80#E+21 
1.93428E+25 

126 

16#0.2000_000#E-31 

5.87747E-39 

I6#0.3FFF_FE0#E+32 

8.50706*37 

-16#0.7FFF_FFC#E+32 

-1.70141E+38 

16#0.7FFF_FFC#E+32 
1.70141E+38 

2 

24 

126 

-126 


MACHINE ROUNDS 


TRUE 


MACHINE OVERFLOWS 


TRUE 





APPENDIX F TO MIL-STD-1815A 


Attribute 


Value for LONG FLOAT 


DIGITS 


15 


MANTISSA 


51 


EMAX 


204 


EPSILON 

approximately 


16#0.4000 0000_0000_000#E-12 
8.8817841970013E-16 


SMALL 

approximately 


16#0.8000_0000_0000_000#E-51 

1.9446922743316E-62 


LARGE 

approximately 


16#0.FFFF_FFFF_FFFF_E00#E+51 
2.5711008708143E+61 


SAFE EMAX 


1022 


SAFE_SMALL 

approximately 


16#0.2000_0000_0000_000#E-255 

1.1125369292536-308 


SAFE_LARGE 

approximately 


16#0.3FFF FFFF FFFF_F80#E+256 
4.4942328371557E+307 


FIRST 

approximately 


-16#0.7FFF FFFF_FFFF_FE#E+256 
-8.988465674312E+307 


LAST 

approximately 


16#0.7FFF_FFFF_FFFF_FE0#E+256 
8.9884656743115E+307 


MACHINE RADIX 


2 


MACHINE MANTISSA 


51 


MACHINE_EMAX 1022 
MACHINE_EMIN -1022 
MACHINE ROUNDS TRUE 


MACHINE OVERFLOWS 


TRUE 



USER MANUAL FOR TARTAN ADA SUN 960 


Attribute 


DIGITS 

MANTISSA 

EMAX 

EPSILON 

approximately 

SMALL 

approximately 

LARGE 

approximately 

SAFE_EMAX 

SAFE_SMALL 

approximately 

SAFE_LARGE 

approximately 

FIRST 

approximately 

LAST 

approximately 
MACHINE_RADIX 
MACHINE_MANTISSA 
MAC HI NE_EMAX 
MACHINE_EMIN 
MACHINE ROUNDS 


Value for EXTENDED FLOAT 
18 
61 
244 

16#0.1000 0000_0000_0000_0#E-14 
8.67361737988403547E-19 

16#0.8000 0000_0000_0000_0#E-61 
1.76868732008334226E-74 

16#0.FFFF FFFF_FFFF_FFF8_0#E+61 
2.82695530364541493E+73 

16382 

16#0.2000_0000 0000_0000_0#E-4096 
1.68105157155604675E-4932 

16#0.3FFF FFFF_FFFF_FFFF_0#E+4096 
2.97432873839307941E+4931 

-16#0.7FFF FFFF_FFFF_FFFF_8#E+4096 
-5.94865747678615883E-+4931 

16#0.7FFF_FFFF_FFFF_FFFF_8#E+40% 
5.94865747678615883E+4931 

2 

63 

16382 

-16382 

TRUE 


MACHINE OVERFLOWS 


TRUE 







APPENDIX F TO MIL-STD-1815A 


5.10. SUPPORT FOR PACKAGE MACHINEjCODE 

Package MACHINEjCODE provides the programmer with an interface through which to request the genera¬ 
tion of any instruction that is available on the 80960. The Tartan Ada Sun 960 implementation of package 
MACHINEjCODE is similar to that described in Section 13.8 of the Ada LRM, with several added features. Refer 
to appendix A of this manual for the specification for package machine_code. 

5.10.1. Basic Information 

As required by LRM, Section 13.8, a routine which contains machine code inserts may not have any other 
kind of statement, and may not contain an exception handler. The only allowed declarative item is a use clause. 
Comments and pragmas are allowed as usual. 

5.102. Instructions 

A machine code insert has the form TYPE_MARK' RECORD_AGGREGATE, where the type must be one of the 
records defined in package machine_CODE. Package MACHlNE_CODE defines four types of records. Each 
has an opcode and zero to 3 operands. These records are adequate for the expression of all instructions provided 
by the 80960. 

5.10.3. Operands 

An operand consists of a record aggregate which holds all the information to specify it to the compiler. All 
operands have an address mode and one or more other pieces of information. The operands correspond exactly to 
the operands of the instruction being generated. 

5.103.1. Address Modes 

Each operand in a machine code insen must have an Address_Mode_Name. The address modes provided in 
package MACHINEJCODE provide access to all address modes supported by the 80960. 

In addition, package MACHINL_CODE supplies the address modes Symbolic_Address and 
Symbolic_Value which allow the user to refer to Ada objects by specifying Object' ADDRESS as the value 
for the operand. Any Ada object which has the ' ADDRESS attribute may be used in a symbolic operand. 
Symbolic_Address should be used when the operand is a true address (that is, a branch target or the source 
of an LDA instruction). Symbolic_Value should be used when the operand is actually a value (that is. one of 
the source operands of an ADD instruction). 

When an Ada object is used as a source operand in an instruction (that is, one from which a value is read), the 
compiler will generate code which fetches the value of the Ada object When an Ada object is used as the 
destination operand of an instruction, the compiler will generate code which uses the address of the Ada object as 
the destination of the instruction. See section 5.10.10 for further details. 

5.10.4. Examples 

The Tartan Ada Sun 960 implementation of package MACHINE_C0DE makes it possible to specify 
both simple machine code inserts such as 

two_format'(MOV, (Reg_Lit, 5), (Reg, R5>) 
and more complex inserts such as 
three_format'(MULI, 

<Symbolic_Value, Array_Var(X, Y, 27)'ADDRESS), 

(Lit, 123456), 

(Symbolic_Address, Parameterjl' ADDRESS)) 

In the first example, the compiler will emit the instruction mov 5, r5. In the second example, the compiler 
will first emit whatever instructions are needed to form the address of Array_Var (x, Y, 27) , load the 
value found at that address into a register, load 123436 into a register, and thenemit the MULX instruction. If 
Parameter 1 is not found in a register the compiler will out the result of the multiplication in a temoorarv 



USER MANUAL FOR TARTAN ADA SUN 960 


register and then store it to Paramecer_l' ADDRESS. Note that the destination operand of the MULI instruc¬ 
tion is given as a Symbolic_Address. This holds true for all destination operands. The various error checks 
specified in the LRM will be performed on all compiler-generated code unless they are suppressed by the 
programmer (either through pragma SUPPRESS, or through command qualifiers). 

5.10.5. Incorrect Operands 

Under some circumstances, the compiler attempts to correct incorrect operands. Three modes of operation 
are supplied for package MACHlNE_CODE: -Fixup-None, -Fixup-Warn and -Fixup-Quitet. These 
modes of operation determine whether corrections are attempted and how much information about the necessary 
corrections is provided to the user. -Fixup-Quiet is the default. 

In -Fixup-None mode, the specification of incorrect operands for an instruction is considered to be a fatal 
error. In this mode, the compiler will not generate any extra instructions to help you to make a machine code 
insertion. Note that it is still legal to use ' ADDRESS constructs as long as the object which is used meets the 
requirements of the instruction. 

In -Fixup-Quiet mode, if you specify incorrect operands for an instruction, the compiler will do its best 
to fix up the machine code to provide the desired effect For example, although it is illegal to use a memory 
address as the destination of an add instruction, the compiler will accept it and try to generate correct code. In 
this case, the compiler will allocate a temporary register to use as the destination of the ADD, and then store from 
that register to the desired location in memory. 

In -Fixup-Harn mode, the compiler will also do its best to correct any incorrect operands for an instruc¬ 
tion. However, a warning message is issued stating that the machine code insert required additional machine 
instructions to make its operands legal. 

The compiler will always emit the instruction named in the machine code insert - even if it was necessary to 
fix up all of its operands. In extreme cases this can lead to surprising code sequences. Consider, for example, the 
machine code insert 

Two_Format'(MOV, <Reg_Ind, GO), (Reg_Ind_Disp, Gl, 128)) 

The MOV instruction requires two registers, but both operands are memory addresses. The compiler will generate 
a code sequence like 

Id <g0), gl2 

mov gl2, gl3 

st gl3, 128(gl) 

Note that the mov instruction is generated even though a ld ST combination would have been sufficient. As a 
result of always emitting the instruction specified by the programmer, the compiler will never optimize away 
instructions which it does not understand (such as SENDSERv), unless they are unreachable by ordinary control 
flow. 

5.10.6. Assumptions Made in Correcting Operands 

When compiling in /Fixup- [WARN, QUIET] modes, the compiler attempts to emit additional code to 
move “the right bits” from an incorrect operand to a place which is a legal operand for the requested instruction. 
The compiler makes certain basic assumptions when performing these fixups. This section explains the assump¬ 
tions the compiler makes and their implications for the generated code. Note that if you want a correction which 
is different from that performed by the compiler, you must make explicit machine_code insertions to perform 
it. 

For source operands: 

• Symbolic_Addr«as means that the address specified by the 'address expression is used as the 
source bits. When the Ada object specified by the ' ADDRESS instruction is bound to a register, this will 
cause a compile-time error message because it is not possible to “take the address" of a register. 

• Symbolic_Value means that the value found at the address specified by the' ADDRESS expression will 
be used as the source bits. An Ada obiect which is bound to a register is correct here, because the contents 



APPENDIX F TO MIL-STD-1815A 


• Label indicates that the address of the label will be used as the source bits. 

• Any other non-register means that the value found at the address specified by the operand will be used as 
the source bits. 

For destination operands: 

• Symbolic_Address means that the desired destination for the operation is the address specified by the 
' ADDRESS expression. An Ada object which is bound to a register is correct here; a register is a legal 
destination on the 960. 

• Symbolic_Value means that the desired destination for the operations is found by fetching 32 bits horn 
the address specified by the ' ADDRESS expression, and storing the result to the address represented by the 
fetched bits. This is equivalent to applying one extra indirection to the address used in the 
Symbolic_Address case. 

• All other operands are interpreted as directly specifying the destination for the operation. 

Table 5-1 below describes the correction attempted for each possible instruction-operation combination. The 
actions shown in the table have the following meanings: 

Load to Register 1 The operand given represents a memory location, but the instruction requires a register. 

The operand is used as a source. The compiler will load from the operand to a tem¬ 
porary register. 

Load to Register 2 The operand given represents a register, but the instruction requires a memory location. 

The operand is a destination. The compiler will store the result value to a scratch 
memory location, and then load it into the specified register. 

Store to Memory 1 The operand given represents a register, but the instruction requires a memory location. 

The operand is a source. The compiler will store the value to a scratch memory location 
so that it will be in the proper place for the instruction. 

Store to Memory 2 The operand given represents a memory location, but the instruction requires a register. 

The operand is a destination. The compiler will allocate a scratch register, use that as 
the destination for the instruction, and then store the result value to the specified 
memory address. 

Store to Memory 3 The operand given is not the address of a label The operand will be stored to a scratch 
memory location, and then used as the indirect branch target 

Error 1 Hie only incorrect operand for the source of an LDA is a register. It is not possible to 

take the address of a register on the 960. 

Error 2 The operand must be a Label'Address. 



Table 5-1: Machine_Code Fixup Operations 








bbc, bbs 


BRANCH IF 



ciassr, classrl 


cmpi, cmpo 


cmpdeci, cmpdcco 


cmpinci, cmpinco 


cmpor, cmporl 


cmpr, cmprl 


cmpstr 


COMPARE AND 
BRANCH 


concmpi, concmpo 


condrec 


condwait 


cost, cosrl 


cpyrsrc, cpysre 



divo, divi, divi, divri 


Opndl 


Error 2 


Store to Memory 3 


Error 2 


Store to Memory 3 


Load to Register 1 


Error 2 


Error 2 


Load to Register 1 


Store to Memory 3 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 (64 
bits) 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 



Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register I 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store ip Memory 2 


Store to Memory 2 (64 
bin) 


Store to Memory 2 


Store to Memory 2 (64 
bits) 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 



Store to Memory 2 


Store to Memory 2 










































































































APPENDIX F TO MIL-STD-18I5A 



dmovt 



expr, exprl 


extract 


FAULT IF 


inspacc 


LOAD 


logbnr. logbnrl 


logepr. logeprl 


logr, logrl 


marie 


modac 


modi 


modify 


modpc 


modtc 


MOVE 


movqstr, movstr 


mulo, muli, mulr, 
mulrl 


Opndl 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Opnd2 


Store to Memory 2 


Load to Register 1 


Opnd3 


Store to Memory 2 


Load to Register 1 (64 Store to Memory 2 (64 


Store to Memory 2 (64 
bits) 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Load to Register 1 Load to Register I 






Load to Register 1 


Store to Memory 1 


Error 1 


Load to Register 1 


Store to Memory 2 


Load to Register I 


Load to Register I 


Load to Register I 


Load to Register 1 


Load to Register I 


Load to Register I 


Load to Register 1 


Load to Register I 


Load to Register I 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Sun to Memory 2 


Store to Memory 2 


Store to Memory 2 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register I 


Store to Memory 2 


Load to Register I 


Load to Register 1 


Load to Register 1 


Load to Register I 


Store to Memory 2 


Load to Register 1 


Load to Register 1 



Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Suae to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Table 5-1: Macbine.Code Fixup Operations 
















































































































USER MANUAL FOR TARTAN ADA SUN 960 


Inst 

Opndl 

Opnd2 

Opnd3 

notor 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

or, omot 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

recieve 

Load to Register 1 

Load to Register 1 


remo, remi, remr, 
remrl 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

resumprcs 

Load to Register 1 



ret 




rotate 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

rotindr, roundrl 

Load to Register 1 

Store to Memory 2 


saveprcs 




scaler, scalerl 

Load to Register I 

Load to Register 1 

Store to Memory 2 

scanbit 

Load to Register 1 

Store to Memory 2 


scanbyte 

Load to Register 1 

Load to Register 1 


schedprcs 

Load to Register 1 



send 

Load to Register 1 

Load to Register 1 

Load to Register 1 

sendserv 

Load to Register 1 



setbit 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

SHIFT 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

signal 

Load to Register 1 



sinr.sinrl 

Load to Register 1 

Store to Memory 2 


spanbit 

Load to Register 1 

Store to Memory 2 


sqrtr, sqrtrl 

Load to Register 1 

Store to Memory 2 


STORE 

Load to Register 1 

Load To Register 2 


subo, subi, subc, subr, 
subrl 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

syncf 




synld 

Load to Register 1 

Store to Memory 2 


synmov, synmovl, syn- 
movq 

Load To Register 1 

Load to Register 1 


tanr, tanri 

Load to Register 1 

Store to Memory 2 


TEST 

Store to Memory 2 



wait 

Load to Reg 1 



xnor, xor 

Load to Register I 

Load to Register 1 

Store to Memory 2 


Table 5*1: Machine.Code Fixup Operations 




































































































APPENDIX F TO MU.-STD-181SA 


5.10.7. Register Usage 

Since the compiler may need to allocate registers as temporary storage in machine code routines, there are 
some restrictions placed on your register usage. The compiler will automatically free all the registers which 
would be volatile across a call for your use (that is, g0..g7, gl3, and gl4). If you reference any other register, the 
compiler will reserve it for your use until the end of the machine code routine. The compiler will not save the 
register automatically. This means that the first reference to a register which is not volatile across calls should be 
an instruction which saves its value in a safe place. The value of the register should be restored at the end of the 
machine code routine. This rule will help ensure correct operation of your machine code insert even if it is inline 
expanded in another routine. 

The compiler may need several registers to generate code for operand fixups in machine code inserts. If you 
use all the registers, fixups will not be possible. If a fixup is needed, the compiler may require up to three 
registers to guarantee success. In general, when more registers are available to the compiler it is able to generate 
better code. 

5.10.8. Inline Expansion 

Routines which contain machine code inserts may be inline expanded into the bodies of other routines. This 
may happen under programmer control through the use of pragma inline, or at Optimization Level 3 when the 
compiler selects that optimization as an appropriate action for the given situation. The compiler will treat the 
machine code insert as though it was a call; volatile registers will be saved and restored around it, etc. 

5.10.9. Unsafe Assumptions 

There are a variety of assumptions which should not be made when writing machine code inserts. Violation 
of these assumptions may result in the generation of code which does not assemble or which may not function 
correctly. 

• Do not assume that a machine code insert routine has its own set of local registers. This may not be true if 
the routine is inline expanded into another routine. Explicitly save and restore any registers which are not 
volatile across calls. If you wish to guarantee that a routine will never be inline expanded, you should use 
an Ada separate body for the routine and make sure that there is no pragma inline for it. 

• Do not attempt to move multiple Ada objects with a single long instruction such as movl or STT. 
Although the objects may be contiguous under the current circumstances, there is no guarantee that later 
changes will permit them to remain contiguous. If the objects are parameters, it is virtually certain that 
they will not be contiguous if the routine is inline expanded into the body of another routine. In the case of 
locals, globals, and own variables, the compiler does not guarantee that objects which are declared tex- 
tually “next" to each other will be contiguous in memory. If the source code is changed such that it 
declares additional objects, this may change the storage allocation such that objects which were previously 
adjacent are no longer adjacent. 

• The compiler will not generate call site code for you if you emit a call instruction. You must save and 
restore any volatile registers which currently have values in them, etc. If the routine you call has out 
parameters, a large function return result, or an unconstrained result, it is your responsibility to emit the 
necessary instructions to deal with these constructs as the compiler expects. In other words, when you emit 
a call, you must follow the linkage conventions of the routine you are calling. For further details on call 
site code, see Sections 6.4, 65 and 6.6. 

• Do not assume that the ' ADDRESS on Symbolic_Addr«3s or Symbolic_Value operands means 
that you ate getting an ADDRESS to operate on. The Address- or Value-ness of an operand is determined 
by your choice of Symbolic_Addrass or Symbolic_value. This means that to add the contents of 
X to r3, you should write 

Three Format'(ADDX, (Symbolic Value, X'ADDRESS), 

(Reg, R3)7 (R«g, R3>); 







USER MANUAL FOR TARTAN ADA SUN 960 


Three_Format'(ADDI, (Symbolic_Address, X'ADDRESS), 

(Reg, R3>7 (Reg, R3)); 

• The compiler will not prevent you from writing register r3 (which is used to hold the address of the current 
exception handler). This provides you the opportunity to make a custom exception handler. Be aware, 
however, that there is considerable danger in doing so. Knowledge of the details on the structure of 
exception handlers will help; see the Tartan Ada Runtime Implementor's Guide. 

5.10.10. Limitations 

• When specifying absolute addresses in machine.code inserts, please note that the compiler will treat 
addresses as an INTEGER type. This means that specifications of addresses may raise arithmetic overflow 
errors; i.e., addresses must be in the range integer'FIRST..INTEGER'LAST. To represent an 
address greater than INTEGER' LAST, use the negated radix-complement of the desired address. For 
example, to express address 16#COOO_000, specify instead -16#4000_000. 

• The current implementation of the compiler is unable to fully support automatic fixup of certain kinds of 
operands. In particular, the compiler assumes that the size of a data object is the same as the number of 
bits which is operated on by the instruction chosen in the machine code insert This means that the insert: 

Three_Format'(ADDO, (Symbolic Value, Byte_Variable'ADDRESS), 

(Reg, R0>7 (Reg, Rl>) - 

will not generate correct code when Byte_Variable is bound to memory. The compiler will assume 
that Byte_Variable is 32 bits, when in fact it is only 8, and will emit an ld instruction to load the 
value of Byte_variable into a register. If, on the other hand, Byte_variable was bound to a 
register the insertion will function properly, as no fixup is needed. 

• The compiler generates incorrect code when the BAL and BA LX instructions are used with symbolic 
operands which are not of the form Routine' ADDRESS. To get the effect of an unconditional branch, 
use the B or BX instructions instead. 

• Note that the use of X' ADDRESS in a machine code insert does not guarantee that x will be bound to 
memory. This is a result of the use of ' ADDRESS to provide a ‘'typeless” method for naming Ada objects 
in machine code inserts. For example, it is legal to say to (Symbolc_Value, X'address) in an 
insert even when x is a formal parameter of the machine code routine (and is thus found in a register). 

5.10.11. Example 

package fittest is 

typa ary_type is array(1..4) of integer; 

procedure iniine_into_me; 
end mtest; 


with machine_code; 
use machine_code; 
package body mtest is 

own_var : integer :« -1; 

procedure mach_test(x, y, z: in integer; ary: in out ary_type> is 
begin 

— The next instruction is only OK if this routine is not INLINED. 

— If the routine is inlined, there is no guarantee that parm X will 

— be either A) in an even numbered register, or B) "next to" parm 
— Y. If the programmer uses an instruction like MOVLp here, he is 

— assuming too much about the generated code; his program is 

— erroneous. On the other hand, the use of x'ADDRESS does guarantee 

— that the instruction will use X even when this routine is inline 

— exoanded Into a caller. 




APPENDIX F TO MIL-STD-1815A 


Two_Format'(MOVE, !Symbolic_Value, x'ADDRESS), (Reg, G6) ) ; 
Two_Format'(MOV, (Symbolic_Value, x'ADDRESS), (Reg, G6) ) ; 
Two_Format'(MOV, (Symbolic_Value, y'ADDRESS), (Reg, G7)); 
Two_Format'(MOV, (Symbolic_Value, z'ADDRESS), (Reg, G8)); 
Three_Format'(ADDI, (Symbolic_Value, x'ADDRESS), (Reg, G8), 


(Reg, GDI; 


Three_Format'(MULI, 

(Reg, G7), 

(Symbolic_Vaiue, y'ADDRESS), 
(Reg, G12)); 


— Note the use of a complicated Ada object in this instruction. 
Two_Format'(ST, 

(Reg, G12), 

(Symbolic_Address, ary(1)'ADDRESS)); 


— In this instruction, note that ary(1)'ADDRESS is NOT kept in a 

— register and is thus NOT a legal source for XORp. That's OK, 

— because the compiler can fix it up for the user. 

Three_Format'(XORi, (Symbolic_Value, ary(1)'ADDRESS), 

(Symbolic_Value, ary(2)'ADDRESS), (Reg, G12)); 


Two_Format'(ST, 

(Reg, G12), 

(Symbolic_Address, ary 13) 'ADDRESS)); 

Two_Format'(ST, 

(Reg, G12), 

(Symbolic^Address, ary(x)'ADDRESS)); 
Two_Format'(ST, 

(Reg, GO), 

(Symbolic_Address, own_var'ADDRESS)); 


Two_Format'(LDA, 

(Symbolic Value, own_var'ADDRESS), 
(Reg, G14T); 


One_Format'(CALLX, (Symbolic_Address, inline_into_me'ADDRESS)); 
end macn_test; " 

pragma inline(mach_test); 


procedure mtestl(first, second, third: in integer; fourth: out ary_type) is 
begin 


-- Note the use of fourth(l)'ADDRESS as the destination of the MOV 
-- instruction. The compiler will understand that the user "really 

— wanted" something moved to fourth(1)'ADDRESS, and will make sure 

— that the bits get there. The compiler does NOT assume that it 

— knows enough to second guess the user’s choice of instructions. 
-- we generate the MOV, followed by a store to memory. 

Two_Format'(MOV, 

<Symbolic_Value, First'Address), 

(Symbolic_Address, fourth(1)'ADDRESS)); 

end mtestl; 

procedure inline_into_me is 

arrayl : ary_type T- (1, 2, 3, 4); 
begin 

if arrayl(3) >- 0 then 

— note that mach_test is inline expanded 
mach test(22, 41,“arrayl(4), arrayl); 

else 

-- but mtest is not at Op-2 (No pragma inline) 
mtestl (1, 2, 3, arrayl); 



USER MANUAL FOR TARTAN ADA SUN 960 


end inline_into_me; 


end mtest; 




APPENDIX F TO MDL-STD-1815A 


Assembly code output: 

# Generated from USERO1:(SMITH]MTEST.ADB;1 

# by TARTAN Ada Compiler VMS 80960MC, Version Pre-Release 

• data 
.align 2 

ADA.OWN: .space 4 

.align 2 

ADA.GLOBAL: .space 1 

.giobi xxmtestSinline_into_me$00 
.giobl xxmtestSdeciare 
.giool xxmtestSbody 

.seto own_var$00,ADA.OWN, 0 

.giobl xxmtest$inline_into_meSgoto$00 

. st-to xxmtestSiniine_into_me$gotoSOO, ADA. GLOBAL, 0 


. text 
•align 4 


mov 

' C,r3 



St 

sp,40(sp) 



Ida 

40(sp),sp 



St 

012,100(fp) 



Ida 

.L19,r3 



mov 

l,g!3 # 


line 74 

St 

gl3,80(fp) 



mov 

2,gl3 



St 

gl3, 84(fp) 



mov 

3,gl3 



St 

gl3, 88(fp) 



mov 

4, g 13 



St 

gl3,92(fp) 



Idq 

80(fp),g4 



stq 

g4,64(fp) 



la 

72 (fp) ,g!3 

# 

line 76 

cmpibg 

0,gl3,.L17 



Id 

"■S (fp) , g!3 

$ 

line 78 

mov 

22, r4 



addc 

31,10, r5 



me v 

913,r6 



Ida 

64(fp),r8 



movl 

r4 , g6 



mov 

r4, g6 



mov 

r5,g7 



mov 

r6, g8 



addi 

r4,g8,gl 



mull 

g7, r5, gl2 



St 

gl2,96(fp) 



id 

96(fp),gl3 



St 

gI3, (r8> 



Id 

4 <r8),r7 



xor 

g!3,r7,gl2 



St 

gl2,8 <r8) 



subi 

1,r4,gl3 

# 

line 46 

emoo 

gl3, 3 






USER MANUAL FOR TARTAN ADA SUN 960 


faultg 


St 

gl2,-4 (r8) (r4*4) 



st 

gO,ADA.OWN 



Ida 

ADA.OWN,gl4 



callx 

xxmtestSinline into 

_meS00 


b 

.L19 # 

line 

76 

mov 

l.go # 

line 

81 

mov 

2,gl 



mov 

3,g2 



Ida 

64 (fp) ,g3 



bal 

mtestlSOO 



Id 

IOC(fp),gl2 



ret 





# Total bytes of code in the above routine = 216 

.align 4 

mach_test$00: 

mov 
st 

addo 
st 
Ida 

movl 
mov 
mov 
mov 
addi 
muii 
st 
Id 
st 
•Id 
xor 
st 

subi 

cmpo 
faultg 
st 
st 
Ida 
callx 

. 121 : 

Id 
ret 

# Total bytes of code in the above routine » 124 

.align 4 
mtestlSOO: 


mov 

gi4, 

g4 

mov 

0, gl 

4 

mov 

g0,gl3 

st 

gi3. 

(g3) 

by 

tn* t 



0, r3 
sp,8(sp) 

8,so,sp 
gl2, 68(fp) 

.L21,r3 

gO, g6 
gO, g6 
gl,gl 
g2, g8 
gO,g8,gl 
g7, gl, gl2 
gl2, 64(fp) 

64(fp),gl3 
gl3,(g3) 

4(g3),g5 
gl3,g5,gl2 
gl2,8(g3) 

1, g0,gl3 # 

gi3,3 

gl2,-4(g 3) ig0*4) 
gO,ADA.OWN 
ADA.OWN,gl4 

xxmtestSinline into meSOO 


68(fp),gl2 


line 46 





APPENDIX F TO MIL-STD-181JA 


J 


# Total bytes of code in the above routine = 20 
.align 4 
xxmtestSdeclare: 

stob gl4,ADA.GLOBAL 


ret 

# Total bytes of code in the above routine = 12 
.align 4 
xxmtestSbody: 


not 

0,gl3 # 

line 

5 

St 

g!3,ADA.OWN 



mov 

i»gl3 



stob 

gl3,ADA.GLOBAL 



ret 




# Total bytes 

of code in the above 

routine = 

28 

.text 





.align 2 
.align 2 

♦ Total bytes of code « 400 

# Total bytes of data » 5 



CHAPTER 1 
INTRODUCTION 


Thi* Validation Suaaary Raport daseribas tha extent to vhich a 
apaeific Ada coapilar confora* to tha Ada Standard, ANSI/HIL-STD-1815A. 
Thi* raport explain* all technical term* uaad vithin it and thoroughly 
reports tha results of__Jtggting this coapilar using tha Ada Coapilar 
Validation Capability ^tCTCfi An Ada coapilar aust be iaplaaented 
according to tha Ada Standard, and any iaplaaentation-dapandant features 
aust confora to tha requirements of tha Ada Standard. Tha Ada Standard 
aust be iaplaaented in its entirety, and nothing can be iaplaaented that is 
not in tha Standard. \ 


Even though all validated Ada coapilers confora to the Ada Standard, it 
aust be understood that soaa differences do exist between iaplaaentations. 
The Ada Standard peraits soaa inpleaantation dependencies—for exaaple, the 
aaxiaua length of identifiers or the naxlaua values of integer types. 
Other differences between coapilers result froa the characteristics of 
particular operating systeas, hardware, or iaplaaentation strategies. All 
the dependencies observed during the process of testing this coapilar are 

r*p\ 


The lnforaatipn in this report is derived froa the test results produced 
during validation testing. The validation process includes subaitting a 
suite of standardised tests, the ACVC, as inputs to an Ada coapilar and 
evaluating the results .^\The purpose of validating is to ensure conforaity 
of the coapilar to the Ada Standard by testing that the coapilar properly 
iaplaaants legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
lapleaantatioa-dependant bud is permitted by the Ada Standard. Six classes 
of tests are used. These\tests are designed to perfora checks at compile 
tlae, at link tlae, and durlgg execution. 








