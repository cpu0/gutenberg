AD-A221 763 


AVF Control Number: AVF-VSR-90502/54 



Ada COMPILER 

VALIDATION SUMMARY REPORT: 

Certificate Number: #890920N1.10170 
SD-Scicon pic 

XD Ada MEL-STD-1750A T1.0-05A 

VAX Cluster Host and Fairchild F9450 on a SBC-50 board (MIL-STD-1750A) (Bare machine) 


Completion of On-Site Testing: 
20 September 1989 


Prepared By: 

Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester Ml 7ED 
England 


Prepared For 
Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


AVF-VSR-90502/54 
Page i of ii 



Validation Summary Report 

SD-Sckoo pic XD Ada MIL-STD-1750A 



90 05 n 


023 





DISCLAIMER NOTICE 



THIS DOCUMENT IS BEST 
QUALITY AVAILABLE. THE COPY 
FURNISHED TO DTIC CONTAINED 
A SIGNIFICANT NUMBER OF 
PAGES WHICH DO NOT 
REPRODUCE LEGIBLY 













^'WASHINGTON. DC 20301 


1 P npp <ov 


&AT) . 




/..V. MEMORANDUM FOR Director/ Directorate of^Database Services, 

Defense Logistics Agency" 

SUBJECT: Technology Screening'''^ Unclassified/Unlimited Reports 

, v ja 

Your letter of *2 February 1990 to the Commander, Air Force'i 
Systems Command, Air . Force Aeronautical Laboratory, 
Wright-Patterson Air Force Base stated that the Ada Validation 
- Summary report for Meridian Software Systems, Inc. contained 
.technical data that should be denied public disclosure according to 
- ; 1 . DoD Directive 5230.25 _ . 




'■■■ - We do not agree with this opinion that the contents of this/, 

/--particular Ada Validation Summary Report or the contents .of,the..; 
.1- several hundred of such reports produced each year to document‘the 
conformity testing results of Ada compilers. Ada is not used 

exclusively for military applications. The language is an ANSI 
Military Standard, a Federal Information Processing Standard, and 
an International Standards Organization standard. Compilers are 
■ tested for conformity to the standard as the-basis for obtaining an 
. Ada Joint Program Office certificate of conformity. The results of 
: this testing are documented in a standard form in all Ada 
-.Validation Summary Reports which the compiler vendor agrees to make - 
^/pjjblic as part of his contract with the testing facility. 

/ ■* , 

”-/- On 18 December- 1985, the Commerce Department issued Part y 

379 Technical Data of the Export Administration specifically 
listing Ada Programming Support Environments (including compilers)^" 
as items controlled by the Commerce Department. The AJPO complies 
with Department of Commerce export control'-regulations. When 
Defense Technical Information Center receives an Ada Validation 
-.-Summary Report, which-may be produced by any of the five U.S. and 
European Ada Validation Facilities, the content should be made 
available to the public. 

If you have any further questions, please feel free to contact 
the undersigned at (202) 694-0209. 




John P. Solomond 
Director 

Ada Joint Program Office 
























P . 0 3 


MAY 15 ’90 11:24 


I IT RESEARCH INST 


URPt CLA5SIHQATION OF THIS M(( (*Vh*^D#t# (Wrt(f) 


REPORT DOCUMENTATION PAGE 


I. AEPQRT NUM&tR 


no wpmvcness 

Iff on cpvPLfTC.-vc roF.v 


|2. SORT ACCESSION NO. 13. RECIPIENT'S CATALOG NDMStA 


4. TJTU (tnaivbutit) S. TYPE OF REPORT A PERIOD COVERED | 

Ada Compiler Validation Summary Report : S d-sc icon 20 sepc. 1989 to 20 Sept. 1990 1 

X ? 4 fj 3 *.ft?eZ STI) " 1750A T1 ' 0_05A * VAX Cluster (Host) to Fair- 6 . krfoR»INC*6rg. REPORT number 
child F9450 on a SBC-50 board (Target), 890920N1.10170 


7, AOtHORrt) 

National Computing Centre United, 
Manchester, United Kingdom. 


I. CONTACT 0* ARanT NUM Bl*(s) 


I. PERFORMING OACANIZATION AND ADDRESS 

National Computing Centre Limited, 
Manchester, United Kingdom. 


11. CONTROLLING office name and address 
Ada Joint Program Office 
United States Department of Defense 
Washington, DC 2u301~3081 


14. MONITORING AGENCY NAME A ADORES$pFd.fF#r«nt from Controlling Off,it) 

National Computing Centre Limited, 

Manchester, United Kingdom. 


16. DISTRIBUTION STATEMENT (of this Report! 


JO. PROGRAM ELEMENT, project. tasr 
AREA A NDRK UNIT NUMBERS 


W. REPORT DATE 


IS. SECuRiT* Class (of thurtpon) 

UNCLASSIFIED 


ISA. gJC^RS^FlCATlON’DOMSGRAClNS 

N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STA7£Mi*T (of iht sbsxrict onto -*d <n B'oik 20 tfb'Htrtnt from Aeport; 

UNCLASSIFIED 



19. KEYWORDS (Conf.nu, on rt*«r:* yttf .fr*tltu*ry ondkhnjify by b'otk nvmbtr) 


1815A, Ada Joint Program Office# AJPO 


2 P. AISTtACT (C orttinut oft rfrfri* ltd* ifnoitttory identify by b^Oik fnimbtr) 

SD-Scicon pic, XD Ada MIL-STD-1750A T1.0-05A, Manchester, United Kingdom, VAX Cluster 
(Comprising of a VAX 8600 and 7 MicroVAX II’s) to Fairchild F9450 on a SBC-50 board (MIL- 
STD-1750A)(bare machine)(Target), ACVC 1.10 


IJMIS 


EDITION OF 1 NOv AS IS OBSOLETE 
S/N 0l02*lF*0l4-#60l 


UNCLASSIFIED _ 

securitt classification or this pace <**«{>#»# Enter 












Ada Compiler Validation Summary Report: 


Compiler Name: XD Ada MIL-STD-1750A T1.0-Q5A 
Certificate Number: #890920N1.10170 


Host: VAX Cluster (Comprising of a VAX 8600 and 7 Micro VAX ITs) 
Target: Fairchild F9450 on a SBC-50 board (MIL-STD-1750A) (bare machine) 


Testing Completed 20 September 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


Jane Pink 

Testing Services Manager 

The National Computing Centre Limited 

Oxford Road 

Manchester Ml 7ED 

England 



Director AJPO 
Department of Defense 
Washington DC 20301 



Validation Summary Report 
SD-Sdcoo pic XD Ada MIL-STD-1750A 


Page ii of ii 


□ □ 










1 — 

» 

TABLE OF CONTENTS 


TABLE OF CONTENTS 


CHAPTER 1 

INTRODUCTION . 1 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT _ 1 

1.2 USE OF THIS VALIDATION SUMMARY REPORT. 2 

1.3 REFERENCES. 2 

1.4 DEFINITION OF TERMS . 3 

1.5 ACVC TEST CLASSES . 4 


CHAPTER 2 

CONFIGURATION INFORMATION . 1 

2.1 CONFIGURATION TESTED. 1 

2.2 IMPLEMENTATION CHARACTERISTICS . 1 


CHAPTER 3 

TEST INFORMATION. 

3.1 TEST RESULTS. 

3.2 SUMMARY OF TEST RESULTS BY CLASS. 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER . 

3.4 WITHDRAWN TESTS. 

3.5 INAPPLICABLE TESTS. 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . . 


1 

1 

1 

2 

5 


3.7 ADDITIONAL TESTING INFORMATION . 6 

APPENDIX A 

DECLARATION OF CONFORMANCE . 1 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


1 


APPENDIX C 

TEST PARAMETERS 


1 


APPENDIX D 

WITHDRAWN TESTS 


1 


AVF-VSR-9050Z/S4 


Validation Summary Report 
SD-Sricon pic XD Ada MIL-STD-1750A 


Table of Contents - Page i of i 

































INTRODUCTION 


(' 


CHAPTER 1 
INTRODUCTION 


1 

s This Validation Summary Report (VSR) describes the extent to which a specific Ada compiler 
conforms to the Ada Standard, ANSI/MIL-STD-1815A. This report explains all technical terms 
used within it and thoroughly reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC), An Ada compiler must be implemented according to the Ada 
Standard, and any implementation-dependent features must conform to the requirements of the 
Ada Standard. The Ada Standard must be implemented in its entirety, and nothing can be 
implemented that js jnot in the Stand ard. ^ 

Even though all validated Ada compilers conform to the Ada Standard, it must be understood that 
some differences do exist between implementations. The Ada Standard permits some 
implementation dependencies -- for example, the maximum length of identifiers or the maximum 
values of integer types. Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All the dependencies 
observed during the process of testing this compiler are given in this report. ( 

The information in this report is derived from the test results produced during validation testing. 
The validation process includes submitting a suite of standardized tests, the ACVC, as inputs to an 
Ada compiler and evaluating the results. The purpose of validating is to ensure conformity of the 
compiler to the Ada Standard by testing that the compiler properly implements legal language 
constructs and that it identifies and rejects illegal language constructs. The testing also identifies 
behavior that is implementation dependent, but is permitted by the Ada Standard. Six classes of 
tests are used. These tests are designed to perform checks at compile time, at link time, and 
during execution. 


Li PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an Ada compiler. Testing 
was carried out for the following purposes: 

o To attempt to identify any language constructs supported by the compiler that do 
not conform to the Ada Standard 

o To attempt to identify any language constructs not supported by the compiler but 
required by the Ada Standard 

o To determine that the implementation-dependent behavior is allowed by the Ada 
Standard 


Testing of this compiler was conducted by The National Computer Centre Limited according to 
procedures established by the Ada Joint Program Office and administered by the Ada Validation 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcoo ptc XD Ada MIL-STD-1750A Chapter 1 - Page 1 of 5 










INTRODUCTION 


Organization (AVO). On-site testing was completed 20 September 1989 at SD-SCICON pic, 
Pembroke House, Pembroke Broadway, Camberley, Surrey, GUIS 3XD, UK. 


12 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may make full and free 
public disclosure of this report. In the United States, this is provided in accordance with the 
"Freedom of Information Act" (5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not represent or warrant 
that all statements set forth in this report are accurate and complete, or that the subject compiler 
has no nonconformities to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 


Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 
Washington DC 20301-3081 


or from: 


Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester Ml 7ED 
England 


Questions regarding this report or the validation test results should be directed to the AVF listed 
above or to: 


Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


L3 REFERENCES 

1. R eference Manual for the Ada Programming Language . 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines. 

Ada Joint Program Office, 1 January 1987. 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcoo ptc XD Ada MIL-STD-1750A Chapter 1 - Page 2 of 5 













INTRODUCTION 


3. Ada Compiler Validation Capability Implementers’ Guide. 
SofTech, Inc., December 1986. 

4. Ada Compiler Validation Capability User’s Guide . 
December 1986. 


1.4 DEFINITION OF TERMS 


AC VC 


Ada Commentary 

Ada Standard 

Applicant 

AVF 

A VO 


Compiler 

Failed test 

Host 

Inapplicable test 

Passed test 


The Ada Compiler Validation Capability. The set of Ada programs 
that tests the conformity of an Ada compiler to the Ada 
programming language. 

An Ada Commentary contains all information relevant to the point 
addressed by a comment on the Ada Standard. These comments 
are given a unique identification number having the form Al-ddddd. 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible for 
conducting compiler validations according to procedures contained 
in the Ada Compiler Validation Procedures and Guidelines . 

The Ada Validation Organization. The AVO has oversight 
authority over all AVF practices for the purpose of maintaining a 
uniform process for validation of Ada compilers. The AVO 
provides administrative and technical support for Ada validations to 
ensure consistent practices. 

A processor for the Ada language In the context of this report, 
a compiler is any language processor, including cross-compilers, 
translators, and interpreters. 

An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

The computer on which the compiler resides. 

An ACVC test that uses features of the language that a compiler 
is not required to support or may legitimately support in a way 
other than the one expected by the test. 

An ACVC test for which a compiler generates the expected result. 


Validation S ummar y Report AVF-VSR-90502/54 

SQ Sckxm ptc XD Ada MIL-STD-1750A Chapter t - Page 3 of S 














INTRODUCTION 


Target The computer which executes the code generated by the compiler. 

Test A program that checks a compiler’s conformity regarding a 

particular feature or a combination of features to the Ada Standard. 
In the context of this report, the term is used to designate a single 
test, which may comprise one or more files. 

Withdrawn test An ACVC test found to be incorrect and not used to check 

conformity to the Ada Standard. A test may be incorrect because 
it has an invalid test objective, fails to meet its test objective, or 
contains illegal or erroneous use of the language. 


L5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC contains both legal and 
illegal Ada programs structured into six test classes: A, B, C, D, E, and L. The first letter of a 
test name identifies the class to which it belongs. Class A, C, D, and E tests are executable, and 
special program units are used to report their results during execution. Class B tests are expected 
to produce compilation errors. Class L tests are expected to produce errors because of the way 
in which a program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada programs with certain 
language constructs which cannot be verified at run time. There are no explicit program 
components in a Class A test to check semantics. For example, a Class A test checks that reserved 
words of another language (other than those already reserved in the Ada language) are not treated 
as reserved words by an Ada compiler. A Class A test is passed if no errors are detected at 
compile time and the program executes to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class B tests are not executable. 
Each test in this class is compiled and the resulting compilation listing is examined to verify that 
every syntax or semantic error in the test is detected. A Class B test is passed if every illegal 
construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs can be correctly 
compiled and executed. Each Class C test is self-checking and produces a PASSED, FAILED, or 
NOT APPLICABLE message indicating the result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. Since there are no 
capacity requirements placed on a compiler by the Ada Standard for some parameters - for 
example, the number of identifiers permitted in a compilation or the number of units in a library - 
- a compiler may refuse to compile a Class D test and still be a conforming compiler. Therefore, 
if a Class D test fails to compile because the capacity of the compiler is exceeded, the test is 
classified as inapplicable. If a Class D test compiles successfully, it is self-checking and produces 
a PASSED or FAILED message during execution. 


Validation Summary Report AVF-VSR-90502/54 

SD Sckxm pic XD Ada MIL-STD-1750A Chapter I - Page 4 of 5 














INTRODUCTION 


Class E tests are expected to execute successfully and check implementation-dependent options and 
resolutions of ambiguities in the Ada Standard. Each Class E test is self-checking and produces 
a NOT APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs containing some features 
addressed by Class E tests during compilation. Therefore, a Class E test is passed by a compiler 
if it is compiled successfully and executes to produce a PASSED message, or if it is rejected by the 
compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving multiple, separately compiled 
units are detected and not allowed to execute. Class L tests are compiled separately and execution 
is attempted. A Class L test passes if it is rejected at link time - that is, an attempt to execute 
the main program must generate an error message before any declarations in the main program 
or any units referenced by the main program are elaborated. In some cases, an implementation 
may legitimately detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support the self- 
chccking features of the executable tests. The package REPORT provides the mechanism by which 
executable tests report PASSED, FAILED, or NOT APPLICABLE results. It also provides a set 
of identity functions used to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada Standard. The operation 
of REPORT and CHECK FILE is checked by a set of executable tests. These tests produce 
messages that are examined to verify that the units are operating correctly. If these units are not 
operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to ensure that the tests 
are reasonably portable without modification. For example, the tests make use of only the basic 
set of 55 characters, contain lines with a maximum length of 72 characters, use small numeric 
values, and place features that may not be supported by all implementations in separate tests. 
However, some tests contain values that require the test to be customized according to 
implementation-specific values -- for example, an illegal file name. A list of the values used for 
this validation is provided in Appendix C. 

A compiler must correctly process-each of the tests in the suite and demonstrate conformity to the 
Ada Standard by either meeting the pass criteria given for the test or by showing that the test is 
inapplicable to the implementation. The applicability of a test to an implementation is considered 
each time the implementation is validated. A test that is inapplicable for one validation is not 
necessarily inapplicable for a subsequent validation. Any test that was determined to contain an 
illegal language construct or an erroneous language construct is withdrawn from the ACVC and, 
therefore, is not used in testing a compiler. The tests withdrawn at the time of this validation 
are given in Appendix D. 


AVF-VSR-90502/54 


Validation Summary Report 

SD-Sdcoo ptc XD Ada MIL-STD-1750A 


Chapter 1 - Page 5 of 5 













CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2 A CONFIGURATION TESTED 

The candidate comnilation system for this validation was tested under the following configuration: 
Compiler: XD Ada MDL-STD-1750A T1.0-05A 

ACVC Version: 1.10 

Certificate Number: #890920N1.10170 

Host Computer: 

Machine: VAX Cluster (comprising of a VAX 8600 and 7 MicroVAX 

IPs) 

Operating System: VMS 5.1 

Memory Size: VAX 8600 - 20Mbytes 

MicroVAX ITs- lx 16 Mbytes 

6x9 Mbytes 

Target Computer: 

Machine: Fairchild F9450 on a SBC-50 board (MIL-STD-1750A) (bare 

machine) 

Memory Size: 1 Mb 

Communications Network: RS232 link 

22 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of a compiler in those 
areas of the Ada Standard that permit implementations to differ. Class D and E tests specifically 
check for such implementation differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 

Validation Summary Report 
SD-Sdcon pic XD Ada MIL^STD-1750A 


AVF-VSR-90502/54 
Chapter 2 - Page 1 of 5 











CONFIGURATION INFORMATION 


a. Capacities. 

(1) The compiler correctly processes a compilation containing 723 variables in the same 
declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop statements nested to 65 
levels. (See tests D5SA03A..H (8 tests).) 

(3) The compiler correctly processes tests containing block statements nested to 65 
levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive procedures separately 
compiled as subunits nested to 17 levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types LONG_INTEGER 
and LONGJFLOAT, in the package STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which constraints are checked 

are not defined by the language. While the ACVC tests do not specifically attempt to 

determine the order of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record components are evaluated 
before any value is checked for membership in a component’s subtype. (See test 
C32117A.) 

(2) Assignments for subtypes are performed with the same precision as the base type. 
(See test C35712B). 

(3) This implementation uses no extra bits for extra precision and uses all extra bits 
for extra range. (See test C35903A) 

(4) NUMERIC_ERROR is raised when an integer literal operand in a comparison or 
membership test is outside the range of the base type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a fixed-point comparison 
or membership test is outside the range of the base type. (See test C45252A.) 

(6) Underflow is not gradual. (See tests C45524A..Z (26 tests).) 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcoo pic XD Ada MIL-STD-1750A Chapter 2 - Page 2 of 5 








CONFIGURATION INFORMATION 


d. Rounding. 

The method by which values are rounded in type conversions is not defined by the 
language. While the ACVC tests do not specifically attempt to determine the method of 
rounding, the test results indicate the following: 

(1) The method used for rounding to integer is inconsistant. (See tests C46012A..Z 
(26 tests).) 

(2) The method used for rounding to longest integer is round away from zero. See 
tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal real expressions is 
round to odd. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or CONSTRAINT_ERROR 

for an array having a ’LENGTH that exceeds STANDARD.INTEGER’LAST and/or 

SYSTEM.MAX_INT. For this implementation: 

(1) Declaration of an array type or subtype declaration with more than 
SYSTEM.MAXJNT components raises NUMERIC_ERROR. (See test C36003A.) 

(2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an array type with 
INTEGER’LAST + 2 components. (See test C36202A.) 

(3) CONSTRAlNT_ERROR is raised when an array type with SYSTEM.MAX_INT 
+ 2 components is declared. (See test C36202B.) 

(4) A packed BOOLEAN array having a ’LENGTH exceeding INTEGER’LAST raises 
no exception. (See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than INTEGER’LAST 
components CONSTRAINT_ERROR when the length of a dimension is calculated 
and exceeds INTEGER’LAST. (See test C52104Y.) 

(6) In assigning one-dimensional array types, the expression is evaluated in its entirety 
before CONSTRAINT_ERROR is raised when checking whether the expression’s 
subtype is compatible with the target’s subtype. (See test C52013A.) 

(7) In assigning two-dimensional array types, the expression is not evaluated in its 
entirety before CONSTRAINT_ERROR is raised when checking whether the 
expression’s subtype is compatible with the target’s subtype. (See test C52013A.) 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcon pic XD Ada MIL-STD-1750A Chapter 2 - Page 3 of 5 


j 









CONFIGURATION INFORMATION 


f. A null array with one dimension of length greater than INTEGER’LAST may raise 
NUMERIC_ERROR or CONSTRAINT_ERROR either when declared or assigned. 
Alternatively, an implementation may accept the declaration. However, lengths must match 
in array slice assignments. This implementation raises no exception. (See test E52103Y.) 


g. Discriminated types. 

(1) In assigning record types with discriminants, the expression is evaluated in its 
entirety before CONSTRAINT_ERROR is raised when checking whether the 
expression’s subtype is compatible with the target’s subtype. (See test C52013A.) 


h. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, the test results indicate that all 
choices are evaluated before checking against the index type. (See tests C43207A 
and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, all choices are evaluated 
before being checked for identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated when a bound in 
a non-null range of a non-null aggregate does not belong to an index subtype. (See 
test E43211B.) 


i. Pragmas. 

(1) The pragma INLINE is supported for functions or procedures. (See tests 
LA3004A..B (2 tests), EA3004C..D (2 tests), and CA3004E..F (2 tests).) 


j. Generics. 

(1) Generic specifications and bodies can be compiled in separate compilations. (See 
tests CA1012A CA2009C, CA2009F, BC3204C, and BC3205D.) 

(2) Generic subprogram declarations and bodies can be compiled in separate 
compilations. (See tests CAI012A and CA2009F.) 

(3) Generic library subprogram specifications and bodies can be compiled in separate 
compilations. (See test CA1012A.) 

(4) Generic non-library package bodies as subunits can be compiled in separate 
compilations. (See test CA2009C.) 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcon ptc XD Ada MIL-STD-1750A Chapter 2 - Page 4 of 5 













CONFIGURATION INFORMATION 


(5) Generic non-library subprogram bodies can be compiled in separate compilations 
from their stubs. (See test CA2009F.) 

(6) Generic unit bodies and their subunits can be compiled in separate compilations. 
(See test CA3011A.) 

(7) Generic package declarations and bodies can be compiled in separate compilations. 
(See tests CA2009C, BC3204C, and BC3205D.) 

(8) Generic library package specifications and bodies can be compiled in separate 
compilations. (See tests BC3204C and BC3205D.) 

(9) Generic unit bodies and their subunits can be compiled in separate compilations. 
(See test CA3011A) 


k. Input and output. 

(1) The package SEQUENTIAL_IO can be instantiated with unconstrained array types 
and record types with discriminants without defaults. (See tests AE2101C, 
EE220ID, and EE2201E.) 

(2) The package DIRECT_IO can be instantiated with unconstrained array types and 
record types with discriminants without defaults. (See tests AE2101H, EE2401D, 
and EE240IG.) 

(3) The director, AJPO, has determined (AI-00332) that every call to OPEN and 
CREATE must raise USE_ERROR or NAME_ERROR if file input/output is not 
supported. This implementation exhibits this behavior for SEQUENTlAL_IO, 
DIRECTJO, and TEXT_IO. 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcoo ptc XD Ada MIL-STD-1750A Chapter 2 - Page 5 of 5 













TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 

31 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was tested, 44 tests had been 
withdrawn because of test errors. The AVF determined that 641 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation testing except for 285 
executable tests that use floating-point precision exceeding that supported by the implementation. 
Modifications to the code, processing, or grading for 11 tests were required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable conformity to the Ada Standard. 
3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST CLASS 

C D 

E 

L 

TOTAL 

Passed 

129 

1131 

1693 

17 

16 

46 

3032 

Inapplicable 

0 

7 

622 

0 

12 

0 

641 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


33 SUMMARY OF TEST RESULTS BY CHAPTER 

RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

192 

547 

496 

245 

172 

99 

160 

331 

137 

36 

252 

287 

78 

3032 

Inapp 

20 

102 

184 

3 

0 

0 

6 

1 

0 

0 

0 

82 

243 

641 

Withdrawn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 


AVF-VSR-90502/54 


Validation Summary Report 
SD-Scicoa pic XD Ada MILrSTD-1750A 


Chapter 3 - Page 1 of 7 







TEST INFORMATION 


The following 44 tests were withdrawn from ACVC Version 1.10 at the time of this validation: 


E28005C 

C97116A 

CD2A63A.D (4 tests) 
CD2A76A..D (4 tests) 
CD2A84M..N (2 tests) 
CD5007B 

ED7005C..D (2 tests) 
CD7203B 
CD7205D 
CE3301A 


A39005G 
BC3009B 

CD2A66A.D (4 tests) 
CD2A81G 
CD2B15C 
CD5011O 

ED7006C..D (2 tests) 
CD7204B 
CE2107I 
CE3411B 


B97102E 

CD2A62D 

CD2A73A..D (4 tests) 

CD2A83G 

CD2D11B 

ED7004B 

CD7105A 

CD7205C 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


I 

3.5 INAPPLICABLE TESTS 


Some tests do not apply to all compilers because they make use of features that a compiler is not 
required by the Ada Standard to support. Others may depend on the result of another test that 
is either inapplicable or withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one validation attempt is not 
necessarily inapplicable for a subsequent attempt. For this validation attempt, 641 tests were 
inapplicable for the reasons indicated: 


a. 


b. 


c. 


The following 285 tests are not applicable because they have floating-point type 
declarations requiring more digits than SYSTEM.MAX_DIGITS: 


C24113F..Y (20 tests) 
C35707F..Y (20 tests) 
C45241F..Y (20 tests) 
C45521F..Z (21 tests) 
C45641F..Y (20 tests) 


C35705F..Y (20 tests) 
C35708F..Y (20 tests) 
C45321F..Y (20 tests) 
C45524F..Z (21 tests) 
C46012F..Z (21 tests) 


C35706F..Y (20 tests) 
C35802F..Z (21 tests) 
C45421F..Y (20 tests) 
C45621F..Z (21 tests) 


C35702A and B86001T are not applicable because this implementation supports no 
predefined type SHORT_FLOAT. 

The following 16 tests are not applicable because this implementation does not 
support a predefined type SHORT_INTEGER: 


C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

C55B07B 

B55B09D 

B86001V 


CD7101E 


Validation Summary Report AVF-VSR-90502/54 

SD-Sdcoo pte XD Ada MIL-STD-1750A Chapter 3 - Page 2 of 7 













TEST INFORMATION 


d. C45531M..P (4 tests) and C45532M..P (4 tests) are all inapplicable because this 
implementation has a ’MAX_MANTISSA of 31 and these tests require the compiler 
to support a greater value. 

e. C86001F is not applicable because, for this implementation, the package TEXT_IO 
is dependent upon package SYSTEM. This test recompiles package SYSTEM, 
making package TEXT_IO, and hence package REPORT, obsolete. 

f. B86001X, C45231D, and CD7101G are not applicable because this implementation 
does not support any predefined integer type with a name other than INTEGER, 
LONGJNTEGER, or SHORTJNTEGER. 

g. B86001Y is not applicable because this implementation supports no predefined 
fixed-point type other than DURATION. 

h. B86001Z is not applicable because this implementation supports no predefined 
floating-point type with a name other than FLOAT, LONG FLOAT, or 
SHORTJFLOAT. 

i. C96005B is not applicable because there are no values of type DURATION’BASE 
that are outside the range of DURATION. 

j. CD1009C, CD2A41A..B (2 tests), CD2A41E and CD2A42A..J (10 tests) are not 
applicable because ’SIZE representation clauses for floating-point types are not 
supported. 

k. CD1C04C is inapplicable because this implementation does not support model 
numbers of a derived type that are not representable values of the parent type. 

l. CD2A52C..D (2 tests), CD2A52G..H (2 tests), CD2A54C..D (2 tests) and CD2A54H 
are not applicable because for this implementation the legality of a ’SIZE clause 
for a derived fixed point type can depend on the representation chosen for the 
parent type. 

m. CD2A52J and CD2A54J is not applicable because this tests require an unsigned 
representation for a fixed point type; this implementation does not support unsigned 
fixed point representation. 

n. CD2A53C, and CD2A54G are not applicable because within these tests the SMALL 
specified for a derived fixed point is finer than the SMALL for the parent type. 
As a result some model numbers of the derived type are not representable values 
of the parent type which this implementation does not allow. 

o. The following 23 tests are not applicable because this implementation does not 
support packing by means of a length clause for an array type: 

CD2A61A..L (12 tests) CD2A62A..C (3 tests) CD2A64A.D (4 tests) 


AVF-VSR-90502/54 


Validation Summary Report 
SD-Scicofi pic XD Ada MIL-STD-1750A 


Chapter 3 - Page 3 of 7 














TEST INFORMATION 


CD2A65A..D (4 tests) 

p. The following 16 tests are not applicable because this implementation does not 
support packing by means of a length clause for a record type: 

CD2A71A.D (4 tests) CD2A72A..D (4 tests) CD2A74A.D (4 tests) 

CD2A75A..D (4 tests) 

q. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable because this 
implementation only accepts length clause for access types, if the default size (32 
bits) is specified. These tests specify sizes other that 32 bits. 

r. CD2A91A..E (5 tests) are not applicable because this implementation does not 
support SIZE representation clauses for task types. 

s. The following 241 tests are inapplicable because sequential, text, and direct access 
files are not supported: 

CE2102A.C (3 tests) 

CE2102N..Y (12 tests) 

CE2105A.B (2 tests) 

CE2107L 

CE2110A.D (4 tests) 

CE2201A.C (3 tests) 

CE2204A..D (4 tests) 

CE2401A.C (3 tests) 

EE2401G 
CE2405B 

CE2408A..B (2 tests) 

CE2411A 

CE3102F..H (3 tests) 

CE3104A..C (3 tests) 

CE3109A 

CE3111D..E (2 tests) 

CE3115A 
EE3301B 
CE3402A 

CE3403A..C (3 tests) 

CE3405A 

CE3406A..D (4 tests) 

CE3409A 
CE3410A 
CE3411A 
CE3413A 
CE3603A 

CE3606A..B (2 tests) 

CE3706D 


AVF-VSR-90502/54 


CE2102G..H (2 tests) 
CE2103C..D (2 tests) 
CE2106A..B (2 tests) 
CE2108A.H (8 tests) 
CE2111A..I (9 tests) 
EE2201D..E (2 tests) 
CE2205A 
EE2401D 

CE2401H..L (5 tests) 
CE2406A 

CE2409A..B (2 tests) 
CE3102A.B (2 tests) 
CE3102J..K (2 tests) 
CE3107B 
CE3110A 

CE3112A..D (4 tests) 
EE3203A 
CE3302A 
EE3402B 

CE3403E..F (2 tests) 
EE3405B 

CE3407A..C (3 tests) 
CE3409C..E (3 tests) 
CE3410C..E (3 tests) 
CE3411C 
CE3413C 

CE3604A..B (2 tests) 
CE3704A..F (6 tests) 
CE3706F..G (2 tests) 


CE2102K 

CE2104A.D (4 tests) 
CE2107A.H (8 tests) 
CE2109A.C (3 tests) 
CE2115A.B (2 tests) 
CE2201F..N (9 tests) 
CE2208B 

CE2401E..F (2 tests) 
CE2404A.B (2 tests) 
CE2407A.B (2 tests) 
CE2410A.B (2 tests) 
EE3102C 
CE3103A 

CE3108A.B (2 tests) 
CE3111A.B (2 tests) 
CE3114A.B (2 tests) 
CE3208A 
CE3305A 

CE3402C..D (2 tests) 
CE3404B..D (3 tests) 
CE3405C..D (2 tests) 
CE3408A.C (3 tests) 
EE3409F 
EE3410F 
CE3412A 

CE3602A.D (4 tests) 
CE3605A.E (5 tests) 
CE3704M..O (3 test^ 
CE3804A.P (16 tests) 


Validation S ummar y Report 
SD-Sdcoo ptc XD Ada MIL-STD-1750A 


Chapter 3 - Page 4 of 7 














TEST INFORMATION 


CE3805A.B (2 tests) CE3806A..B (2 tests) CE3806D..E (2 tests) 

CE3806G..H (2 tests) CE3905A..C (3 tests) CE3905L 

CE3906A..C (3 tests) CE3906E..F (2 tests) 

t. CE3901A is not applicable because this implementation raises NAME_ERROR if 
a filename parameter to TEXT_IO.CREATE is non-null. This test assumes that 
USE_ERROR will be raised. 

u. EE3412C is not applicable for this implementation because their implementation 
of the body of the package report does not use TEXT_IO. 


M TEST. PROCESSING. AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, or evaluation in order 
to compensate for legitimate implementation behaviour. Modifications are made by the AVF in 
cases where legitimate implementation behaviour prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: adding a length clause to alter 
the default size of a collection; splitting a Class B test into subtests so that all errors are detected; 
and confirming that messages produced by an executable test demonstrate conforming behaviour 
that was not anticipated by the test (such as raising one exception instead of another). 

Modifications were required for 11 tests. 

C34006D is classified as passed if the test fails with messages "INCORRECT TYPE’SIZE" 
or "INCORRECT OBJECT’SIZE". This test assumes that the space allocated for objects 
must be less than or equal to the minimum needed by the (sub) type. This is not true for 
this implementation. 

C45524A..E (5 tests) were modified because these tests expect that the result of continued 
division of a real number will be zero; the Ada Standard, however, only requires that the 
result be within the type’s SAFE_SMALL of zero. Thus, these tests were modified to 
include a check that the result was in the smallest positive safe interval for the type. The 
implementation passed the modified tests. Each test was modified by inserting the following 
code after line 138; 

ELSIF VAL <= FSAFE SMALL THEN 

COMMENT ("UNDERFLOW IS GRADUAL") 

C64103A and C95084A were classified as passed although the following messages were 
output 

*054103A EXCEPTION NOT RAISED AFTER CALL - P2(B) 

*C95084A EXCEPTION NOT RAISED AFTER CALL - T2(A) 

’C95084A EXCEPTION NOT RAISED AFTER CALL - T2(B) 


AVF-VSR-90502/54 


Validation Summary Report 
SD-Sdcoo pic XD Ada MIL-STD-1750A 


Chapter 3 - Page 5 of 7 







TEST INFORMATION 


This is accepted because for this implementation the range of FLOAT and LONG_FLOAT 
is the same and it is only the accuracy of the types that is different. 

C64201C contains 12 tasks and at execution time the memory required for these exceeds 
that available for task activation on the target computer - STORAGE_ERROR IS RAISED. 
A modified version of the test using representation clauses to decrease the task size to 2K 
bytes was prepared and executed successfully. The compiler will also allow the default task 
size to be altered using a compiler option. This facility was tested and resulted in a test 
which executed successfully. 

AD7006A is graded as passed as it compiles without error. The test attempts to convert 
SYSTEM.MEMORY_SIZE to type INTEGER. This result is accepted by the AVO. 

The following test was split because syntax errors at one point resulted in the compiler not 
detecting other errors in the test: 

B97103E 


11 ADDITIONAL TESTING INFORMATION 

3.7,1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the XD Ada MILr 
STD-1750A T1.0-Q5A compiler was submitted to the AVF by the applicant for review. Analysis 
of these results demonstrated that the compiler successfully passed all applicable tests, and the 
compiler exhibited the expected behaviour on all inapplicable tests. 


3.7.2 Test Method 


Testing of the XD Ada MJL-STD-1750A T1.0-05A compiler using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in which the testing was 
performed is described by the following designations of hardware _andrSoftwaf© components: 


Host computer 

Host operating system 
Target computer 

Compiler 

Pre-linker 

Assembler 

Linker 

Loader/Downloader 
Runtime System 


: VAX Cluster (comprising of a VAX 8600 and 7 Micro VAX 
ITs) 

: VMS 5.1 

: Fairchild F9450 on a SBC-50 board (MIL-STD-1750A) 
(bare machine) 

XD Ada MIL-STD-1750A Tl.0-05 
XD Ada MIL-STD-1750A Tl.0-05 
XD Ada MIL-STD-1750A Tl.0-05 
XD Ada MIL-STD-1750A Tl.0-05 
XD Ada MIL-STD-1750A Tl.0-05 
XD Ada MIL-STD-1750A Tl.0-01 


Validation Summary Report 

SD-Scicoo pic XD Ada MILSTD-1750A 


AVF-VSR-90502/54 
Chapter 3 - Page 6 of 7 












TEST INFORMATION 


The host and target computers were linked via a RS232 link. 

A magnetic tape containing all tests except for withdrawn tests and tests requiring unsupported 
floating-point precisions was taken on-site by the validation team for processing. Tests that make 
use of implementation-specific values were customized before being written to the magnetic tape. 
Tests requiring modifications during the prevalidation testing were not included in their modified 
form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host computer. 

After the test files were loaded to disk, the full set of tests was compiled and linked on the VAX 
Cluster, then all executable images were transferred to the MIL-STD-1750A target via the RS232 
link and run. Results were printed from the host computer. 

The compiler was tested using command scripts provided by SD-Scicon pic and reviewed by the 
validation team. The compiler was tested using all the following option settings. Details of these 
settings are given at the end of Appendix B. 

Tests were compiled, linked, and executed (as appropriate) using 8 computers and a single target 
computer. Test output, compilation listings, and job logs were captured on magnetic media and 
archived at the AVF. The listings examined on-site by the validation team were also archived. 

3.7,3 Test Site 

Testing was conducted at SD-Scicon pic, Pembroke House, Pembroke Broadway, Cambcrlcy, Surrey, 
GU15 3XD, UK and was completed on 20 September 1989. 


Validation Summary Report 

AVF-VSR-90502/54 

SD-Sdcoo pic XD Ada MIL-STD-1750A 

Chapter 3 - Page 7 of 7 













DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 

SD-Scicon pic has submitted the following Declaration of Conformance 
concerning the XD Ada MIL-STD-1750A T1.0-05A compiler. 


AVF-VSR-90502/54 


Validation Summary Report 

SD Sdcoo pic XD Ada MIL-STD-1750A 


Appendix A - Page 1 of 3 















DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 


Compiler Implementor: SD-Scicon pic 

Ada Validation Facility: The National Computing Centre Limited 

Oxford Road 
Manchester 
Ml 7ED 

Ada Compiler Validation Capability (ACVC) Version: 1.10 
Rase Configuration 

Base Compiler Name: 

Host Architecture: 

Host OS and Version: 

Target Architecture: 


Implementor’s Declaration 

I, the undersigned, representing SD-Scicon pic, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that SD-Scicon pic is the owner of record of the Ada language 
compiler(s) listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada language 
compiler(s) listed in this declaration shall be made only in the owner’s corporate name. 

Dale : K 4 OoZLs 

Bill Davison 

WORLDWIDE CUSTOMER SERVICES MANAGER 



XD Ada MIL-STD-1750A T1.0-05A 

VAX Cluster (comprising of a VAX 8600 and 7 
MicroVAX II’s) 

VMS 5.1 

Fairchild F9450 on a SBC-50 board (MIL-STD- 
1750A) (bare machine) 


Validaiion Summary Report AVF-VSR-90502/54 

SD-Scicon pic XD Ada MiL-STD-l750A Appendix A - Pag* 2 o( 3 



DECLARATION OF CONFORMANCE 


Owner’s Declaration 

I, the undersigned, representing SD-Scicon pic, take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure 
of the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance, are in compliance with the Ada Language 
Standard ANSI/MIL-STD-1815A. 



Bill Davison 

WORLDWIDE CUSTOMER SERVICES MANAGER 


Validation Summary Report AVF-VSR-90502/54 


SD-Scicon pic XD Ada MIL-STD-HSOA 


Appendix A ■ Page 3 of 3 













APPENDIX F 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to implementation-dependent pragmas, 
to certain machine-dependent conventions as mentioned in chapter 13 of the Ada Standard, and 
to certain allowed restrictions on representation clauses. The implementation-dependent 
characteristics of the XD Ada MIL-STD-1750A T1.0-05A compiler, as described in this Appendix, 
are provided by SD-Scicon pic. Unless specifically noted otherwise, references in this appendix are 
to compiler documentation and not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2**15 .. (2**15)-1; 
type LONGJNTEGER is range -2**31 .. (2**31)-1; 

type FLOAT is digits 6 range -(2**128-2**106) .. (2**128-2**106) 
type LONG_FLOAT is digits 9 range -(2**128-2**96) .. (2**128-2**96) 

type DURATION is delta 1.0E-4 range -131072.0000 .. 131071.9999; 


end STANDARD; 


AVF-VSR-90502/54 


Validation Summary Report 
SD-Sdcon pic XD Ada MIL-STD-1750A 


Appendix B 












Appendix F 

Implementation-Dependent 
_ Characteristics 

NOTE 

This appendix is not part of the standard definition of the 
Ada programming language. 

This appendix summarizes the following implementation-dependent 
characteristics of XD Ada: 

• Listing the XD Ada pragmas and attributes. 

• Giving the specification of the package SYSTEM. 

• Presenting the restrictions on representation clauses and unchecked 
type conversions. 

• Giving the conventions for names denoting implementation- 
dependent components in record representation clauses. 

• Giving the interpretation of expressions in address clauses. 

• Presenting the implementation-dependent characteristics of the 
input-output packages. 

• Presenting other implementation-dependent characteristics. 


Implementation-Dependent Characteristics F-l 







F.1 Implementation-Dependent Pragmas 

XD Ada provides the following pragmas, which are defined elsewhere 
in the text. In addition, XD Ada restricts the predefined language 
pragmas INLINE and INTERFACE, provides pragma VOLATILE in 
addition to pragma SHARED, and provides pragma SUPPRESS.ALL in 
addition to pragma SUPPRESS. See Annex B for a descriptive pragma 
summary. 

• CALL_SEQUENCE_FUNCTION (see Annex B) 

• CALL_SEQUENCE_PROCEDURE (see Annex B) 

• EXPORT_EXCEPTION (see Section 13.9a.3.2) 

• EXPORT.FUNCTION (see Section 13.9a.1.2) 

• EXPORT_OBJECT (see Section 13.9a.2.2) 

• EXPORT.PROCEDURE (see Section 13.9a.1.2) 

• IMPORT.EXCEPTION (see Section 13.9a.3.1) 

• IMPORT_FUNCTION (see Section 13.9a.1.1) 

• IMPORT.OBJECT (see Section 13.9a.2.1) 

• IMPORT_PROCEDURE (see Section 13.9a.l.l) 

• LEVEL (see Section 13.5.1) 

• LINK_OPTION (see Annex B) 

• SUPPRESS_ALL (see Section 11.7) 

• TITLE (see Annex B) 

• VOLATILE (see Section 9.11) 


F.2 Implementation-Dependent Attributes 

XD Ada provides the following attributes, which are defined elsewhere 
in the text. See Appendix A for a descriptive attribute summary. 

• BIT (see Section 13.7.2) 

• MACHINE_SIZE (see Section 13.7.2) 

• TYPE_CLASS (see Section 13.7a.2) 


F-2 Implementation-Dependent Characteristics 










F.3 Specification of the Package System 


The package SYSTEM for the MIL-STD-1750A is as follows: 


F.3.1 Package System for the MIL-STD-1750A Target 

package SYSTEM is 

type NAME is (MIL_STD_1750A); 


SYSTEM^NAME 

: constant 

NAME : — MI L_STD_ 

STORAGE_UNIT 

: constant 

:* 

16; 

MEMORY_SI2E 

: constant 


2**17; 

MIN_INT 

: constant 


-(2**31); 

MAX”INT 

: constant 

: * 

2**31 — 1; 

max”digits 

: constant 


9; 

max”MANTISSA 

: constant 


31; 

finI^delta 

: constant 

:« 

2.0**(-31); 

tick” 

: constant 


100.0E-6; 


subtype PRIORITY is INTEGER range 0 .. IS; 
subtype LEVEL is INTEGER range 0 .. 7; 
Address type 


type ADDRESS is private; 

ADORESS — ZERO : constant ADDRESS; 


type ADDRESS_INT is 

range -3 

2768 .. 32767; 




function 

T0 — ADDRESS 

(X 

: ADDRESS INT) 


return 

ADDRESS; 

function 

TO_ADDRESS 

(X 

: {universal integer}) 

return 

ADDRESS; 

function 

TO_ADDRESS_INT (X 

: ADDRESS) 


return 

ADDRESS_INT 

function 

"*■ (LEFT : 

ADDRESS 

; RIGHT : 

ADDRESS_INT) 

return 

ADDRESS; 

function 

(LEFT : 

ADDRESS 

_INT; RIGHT : 

address' 

return 

ADDRESS; 

function 

(LEFT : 

address' 

; RIGHT ! 

ADDRESS) 

return 

ADDRESS^INT 

function 

(LEFT : 

ADDRESS 

; RIGHT : 

ADDRESS_INT) 

return 

address! 

function 

(LEFT, 

RIGHT : 

ADDRESS) return BOOLEAN; 



function 

••/ = " (LEFT, 

RIGHT : 

ADDRESS) return BOOLEAN; 



function 

"<" (LEFT, 

RIGHT : 

ADDRESS) return BOOLEAN; 



fu-.ction 

*<-" (LEFT, 

RIGHT : 

ADDRESS) return BOOLEAN; 



function 

">■ (LEFT, 

RIGHT : 

ADDRESS) return BOOLEAN; 



function 

">=" (LEFT, 

RIGHT s 

ADDRESS) return BOOLEAN; 




Note that because ADDRESS is a private type 
the functions and "/•" are already available 


Implementation-Dependent Characteristics F-3 










— Generic functions used to access memory 

generic 

type TARGET is private; 

function FETCH_FROM_ADDRESS (A : ADDRESS) return TARGET; 
generic 

type TARGET is private; 

procedure ASSIGN_TO_ADDRESS (A : ADDRESS; T : TARGET I; 

type TVPE_CLASS is (TYPE_CLASS_ENUMERATION, 

TYPE~CLASS_INTEGER, 

type~class”fixed_point, 

type~class”floating_point, 

TYPE~CLASS_ARRAY, 

TYPE~CLASS_RECORD, 

TYPE~CLASS~ACCESS, 

type'class'task, 

TYPe3cLASS_ADDRESS) ; 


XD Ada hardware-oriented types and functions 

type BIT_ARRAY is array (INTEGER range <>) of BOOLEAN; 
pragma PACK(BIT_ARRAY); 

subtype BIT_ARRAY_16 is BIT_ARRAY (0 .. 15); 
subtype BIT^ARRAY^ is BIT~ARRAY (0 .. 31); 


type UNSIGNED_WORD is range 0 .. 65535; 

for UNSIGNEd”w0RD'SIZE use 16; 


function "not 
function "and 
function “or" 
function "xor 


( LEFT 

(LEFT, RIGHT 
(LEFT, RIGHT 
(LEFT, RIGHT 


UNSIGNED_WORD) return 
UNSIGNED_WORD) return 
UNSIGNED_WORD) return 
UNSIGNED_WORD) return 


UNSIGNED^WORD; 
UNSIGNED_WORD; 
UNSIGNED~WORD; 

unsigned'word; 


function T0_UNSIGNED_WORD (X ; BIT_ARRAY_16) return UNSIGNED_WORD; 

function T0~BIT_ARRAY_16 (X : UNSIGNED_WORD) return BIT_ARRAY_16; 


type UNSIGNED_WORD_ARRAY is array (INTEGER range <>) of UNSIGNED_WORD; 


type UNSIGNED_LONGWORD is range MIN_INT .. MAX_INT; 
for UNSIGNED_LONGWORD'SIZE use 32; 


function "not" 
function "and" 
function "or" 
function "xor" 


( LEFT 
(LEFT, 
(LEFT, 
(LEFT, 


: UNSIGNED_ LONGWORD) 
RIGHT : UNSIGNED_L0NGWORD) 
RIGHT ; UNSIGNED”LONGWORD) 
RIGHT I UNSIGNED_LONGWORD) 


return UNSIGNED_LONGWORD; 
return UNSIGNED_LONGWORD; 
return UNSIGNED_LONGWORD; 
return UNSIGNED_LONGWORD; 


function TO_UNSIGNED_LONGWORD (X ! BIT_ARRAY_32) return UNSIGNED_LONGWORD; 
function T0”siT_ARRAY_32 (X i UNSIGNED_WORD) return BIT_ARRAY_32; 


type UNSIGNED_LONGWORD_ARRAY is array (INTEGER range <>) of UNSIGNED_LONGWORD 


F-4 Implementation-Dependent Characteristics 











Conventional names for static subtypes of type UNSIGNED_LOHGWORD 


subtypa 

UNSIGNED_ 

1 

is 

unsigned. 

LONGWORD 

rang* 

0 . 

. 2 * * 1-1 

subtypa 

UNSIGNED^ 

2 

is 

unsigned’ 

LONGWORD 

rang* 

0 . 

. 2** 2-1 

subtypa 

unsigned" 

3 

is 

unsigned’ 

LONGWORD 

range 

0 . 

. 2** 3-1 

subtypa 

unsigned" 

4 

is 

unsigned. 

LONGWORD 

range 

0 . 

. 2** 4-1 

subtypa 

UNSIGNED^ 

5 

is 

unsigned’ 

LONGWORD 

range 

0 . 

. 2** 5-1 

subtypa 

unsigned" 

6 

is 

unsigned’ 

LONGWORD 

range 

0 . 

. 2** 6-1 

subtypa 

UNSIGNED’ 

7 

is 

UNSIGNED, 

LONGWORD 

range 

0 . 

. 2** 7-1 

subtypa 

unsigned’ 

8 

is 

unsigned’ 

LONGWORD 

range 

0 . 

. 2** 8-1 

subtypa 

unsigned" 

9 

is 

unsigned" 

LONGWORD 

range 

0 . 

. 2** 9-1 

subtypa 

UNSIGNED_ 

10 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**10-1 

subtype 

unsigned’ 

11 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2* * 11-1 

subtypa 

unsigned’ 

12 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**12-1 

subtypa 

unsigned" 

13 

is 

unsigned. 

LONGWORD 

range 

0 . 

. 2**13-1 

subtypa 

unsigned’ 

14 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**14- 1 

subtypa 

unsigned" 

15 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**15-1 

subtypa 

unsigned’ 

16 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**16-1 

subtypa 

unsigned" 

17 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**17-1 

subtypa 

unsigned" 

18 

is 

unsigned. 

LONGWORD 

range 

0 . 

. 2**18-1 

subtypa 

unsigned’ 

19 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2* * 19-1 

subtypa 

unsigned’ 

20 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**20-l 

subtypa 

unsigned^ 

21 

is 

unsigned. 

LONGWORD 

range 

0 . 

. 2** 21-1 

subtypa 

unsigned’ 

22 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**22-l 

subtypa 

unsigned" 

23 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**23-1 

subtypa 

UNSIGNED^ 

24 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**24-l 

subtype 

UNSIGNED^ 

25 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**25-1 

subtypa 

unsigned" 

26 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**26-l 

subtypa 

unsigned" 

27 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**27-l 

subtypa 

unsigned. 

28 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**28-1 

subtypa 

unsigned’ 

29 

is 

unsigned. 

LONGWORD 

range 

0 . 

. 2**29-1 

subtypa 

unsigned’ 

30 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**30-1 

subtypa 

unsigned’ 

31 

is 

unsigned] 

LONGWORD 

range 

0 . 

. 2**31-1 


private 

— Not shown 
and SYSTEM; 


F.4 Restrictions on Representation Clauses 

The representation clauses allowed in XD Ada are length, enumeration, 
record representation, and address clauses. 


Implementation-Dependent Characteristics F-5 












F.5 Conventions for Implementation-Generated Names 
Denoting Implementation-Dependent Components in 
Record Representation Clauses 

XD Ada does not allocate implementation-dependent components in 
records. 

F.6 Interpretation of Expressions Appearing in Address 
Clauses 

Expressions appearing in address clauses must be of the type ADDRESS 
defined in package SYSTEM (see Section 13.7a.l and Section F.3). 

XD Ada allows address clauses for variables (see Section 13.5). For 
address clauses on variables, the address expression is interpreted as a 
MIL-STD-1750A 16-bit logical address. 

XD Ada supports address clauses on task entries to allow interrupts to 
cause a reschedule directly. For address clauses on task entries, the 
address expression is interpreted as a MIL-STD-1750A interrupt number 
in the range 0 .. 15. 

In XD Ada for MIL-STD-1750A, values of type SYSTEM.ADDRESS are 
interpreted as integers in the range -2 15 .. 2 J5 -1. As SYSTEM.ADDRESS 
is a private type, the only operations allowed on objects of this type are 
those given in package SYSTEM. 


F.7 Restrictions on Unchecked Type Conversions 

XD Ada supports the generic function UNCHECKED_CONVERSION 
with the restrictions given in Section 13.10.2. 


F-6 Implementation-Dependent Characteristics 












F.8 Implementation-Dependent Characteristics of 
Input-Output Packages 

The packages SEQUENTIAL_IO and DIRECT_IO are implemented as 
null packages that conform to the specification given in the Reference 
Manual for the Ada Programming Language. The packages raise the ex¬ 
ceptions specified in Chapter 14 of the Reference Manual for the Ada 
Programming Language. The three possible exceptions that are raised by 
these packages are given here, in the order in which they are raised. 


Exception 

When Raised 

STATUS.ERROR 

Raised by an attempt to operate upon or close a file 
that is not open (no files can be opened). 

NAME.ERROR 

Raised if a file name is given with a call of CREATE 
or OPEN. 

USE.ERROR 

Raised if exception STATUS.ERROR is not raised. 


MODE_ERROR cannot be raised since no file can be opened (therefore 
it cannot have a current mode). 

The predefined package LOW_LEVEL_IO is provided. 


F.8.1 The Package TEXTJO 

The package TEXT_IO conforms to the specification given in the 
Reference Manual for the Ada Programming Language. String input- 
output is implemented a» defined. File input-output is supported to 
STANDARDJNPUT and ST AND ARD_OUTPUT only. The possible 
exceptions that are raised by package TEXTJO are as follows: 


Implementation-Dependent Characteristics F-7 















When Raised 


Exception 

STATUS_ERROR Raised bv an attempt to operate upon or close a file 

that is not open (no files can be opened). 

NAME_ERROR Raised if a file name is given with a call of CREATE 

or OPEN. 

MOD.E_ERROR Raised by an attempt to read from, or test for 

the end of, STANDARD_OUTPUT, or to write to 
STANDARD JNPUT. 

END_ERROR Raised bv an attempt to read past the end of 

standArdjnput. 

USE_ERROR Raised when an unsupported operation is attempted, 

that would otherwise be legal. 

The type COUNT is defined as follows: 

type COUNT la range 0 .. INTEGER'LAST; 

The subtype FIELD is defined as follows: 

type FIELD ia INTEGER range 0 .. 255; 


F.8.2 The Package IO_EXCEPTIONS 

The specification of the package IO_EXCEPTIONS is the same as that 
given in the Reference Manual for the Ada Programming Language. 


F.9 Other Implementation Characteristics 

Implementation characteristics associated with the definition of a main 
program, various numeric ranges, and implementation limits are sum¬ 
marized in the following sections. 


F.9.1 Definition of a Main Program 

Any library procedure can be used as a main program provided that it 
has no formal parameters. 


F-8 Implementation-Dependent Characteristics 










F.9.2 Values of Integer Attributes 

The ranges of values for integer types declared in package STANDARD 
are as follows: 

INTEGER -2 13 .. 2' s -1 ( -32768 .. 32767) 

LONG.INTEGER -2” .. 2 " -1 (-2147483648 .. 2147483647) 

For the package TEXTJO, the range of values for types COUNT and 
FIELD are as follows: 

COUNT 0 .. 2 1S -1 (0 .. 32767) 

FIELD 0 .. 255 

F.9.3 Values of Floating-Point Attributes 

Floating-point types are described in Section 3.5.7. The representation 
attributes of floating-point types are summarized in the following table: 


Implementation-Dependent Characteristics F-9 











FLOAT 

LONGJFLOAT 

DIGITS 

6 

9 

SIZE 

32 

48 

MANTISSA 

21 

31 

EMAX 

84 

124 

EPSILON 

2 -:o 

2-30 

SMALL 

2 -s; 

2- 1:5 

LARGE 

2^4 2* 3 

2 ,:4 2 y3 

SAFE.EMAX 

127 

127 

SAFE.SMALL 

2~I2* 

2 -i> 

SAFE. LARGE 

2127 2 106 

2 127 -2‘ > ' s 

FIRST 

-(2 i 2R -2" w ’) 

-(2 ,2 ‘ , -2'*) 

LAST 

212H 2UV> 

2128 2^ h 

MACHINE.RADIX 

2 

2 

MACH1NE.MANTISSA 

23 

39 

MACHINE.EMAX 

127 

127 

MACHINE.EMIN 

-128 

- 128 

MACHINE.ROUNDS 

FALSE 

FALSE 

MACHINE.OVERFLOWS 

FALSE 

FALSE 


F-10 Implementation-Dependent Characteristics 









F.9.4 Attributes of Type DURATION 


The values of the significant attributes of type DURATION are as 
follows: 


DURATION'DELTA 
DURATION'SMALL 
DURATION'FIRST 
DURATION'LAST 


l.E-4 

(10- 4 ) 

2*l,OE-14 

l2~ u ) 

-131072.0000 

t-2’ 7 ) 

131071.9999 

(2 17 -' DELTA) 


F.9.5 Implementation Limits 


Limit 

Description 


255 

Maximum identifier length (number of characters) 


255 

Maximum number of characters in a source line 


2"’ 

Maximum number of library units and subunits in 
closure’ 

a compilation 

2 ,: 

Maximum number of library units and subunits in 
closure 7 

an execution 

2 1 " -1 

Maximum number of enumeration literals in an enumeration 
type definition 

2"' -1 

Maximum number of lines in a source file 


2 15 x 16 

Maximum number of bits in any object 


2 1 " -1 

Maximum number of exceptions 



The compilation closure of a given unit is the total set of units that the given unit 
depends on. directly and indirectly. 

'The execution closure of a given unit is the compilation closure plus all associated 
secondary units. 


Implementation-Dependent Characteristics F-11 















COMPILE 


COMPILE 


Forms the closure ot one or more specified units Compile* Irom 
external source tiles nnv unit m the closure ‘except entered units) that 
was revised since that unit was last compiled into the current program 
library Recompiles. Irom external copied source files nnv unit in the 
closure that needs to be made current Completes nnv incomplete 
generic instantiations 


Format COMPILE unit-name[,...J 

Command Qualifiers 
/AFTER = time 

/(NO|ANALYSIS_DATA[ - file-spec) 
/0ATCH_LOG = file-spec 
/(NQ)CHECK 
/CLOSURE 

/COMMAND) = file-spec) 
/[NOjCCNFIRM. 
/[NO)COPY_SOURCE 
/[NO|DEBUG[ = (option). ))| 

/) NO) DIAGNOSTICS) = file-spec) 
/[NO|ERROR_LlMIT| =n| 

/(NO)KEEP 
/[NO)UST[ = file-spec| 

/(NO)LOG 

/(NO)MACHINE_CODE 
/NAME = job-name 
/[NO)NOTE_SOURCE 
/(NO)NOTIFY 

/(NO)OPTIMIZE) = (option) ))) 
/OUTPUT = file-spec 
/(NO|PRELOAD 
/(NOjPRINTER) = queue-name) 
/QUEUE = queue-name 
/(NO)SHOW) = option) 
/SPECIFICATION ONLY 


Defaults 

/AFTER = TODAY 
/NOANALYSIS.DATA 
See text 
See text 
See text 
See text 
NOCONFIRM 
/COPY_SOURCE 
/DEBUG = ALL 
NODIAGNOSTICS 

■ ERROR_LIMIT = 30 
KEEP 

■ NOLIST 
/NOLOG 

/NOMACHINE_CODE 
See text 

■ NOTE_SOURCE 

■ NOTIFY 
See text 

OUTPUT = SYSSOUTPUT 

NOPRELOAD 

NOPRINTER 

QUEUE = XDADA$BATCH 
SHOW = PORTABILITY 
See text 


A-6 XDACS Command Dictionary 










COMPILE 


/SUBMIT 

/[NO]SYNTAX_ONLY 

/WAIT 

/(NO|WARNINGS(= (Optionj. |)| 


/SUBMIT 

/NOSYNTAX_ONlY 

/SUBMIT 

See text 


Positional Qualifiers 

/BODY 

/(NO|DATE.CHECK 

/FORCE_BODY 


Defaults 

See text 
/DATE_CHECK 
See text 


Prompt 

Unit 


Command Parameters 

unit-name 

Specifies one or more units in the current program library the closure 
't which to be processed with the COMPILE command 'tou must 
express subunit names using selected component notation as follows: 

inr 00 ’ ■ *: - . p.ii »*n * - :n : ’ - . . . J ! . • ■ .-l:;;; 1 ’ - »i ^ r> 

The unit names mav include percent signs ( % I and asterisks ( * t as 
wildcard characters Refer to the VAIS PCI. Concepts Miimml for more 
detailed information on wildcard characters. 


Description 

The XDACS COMPILE command is useful for compiling and recompil 
ing units as vou revise the source files t'f an existing Ada program 

For each set ot units specified, the COMPILE command performs the 
following steps 

! Forms the closure of the specified units 

2. Looks up the source file for each unit in the closure that has been 
compiled or copied (not entered) into the current program li¬ 
brary Unless otherwise specified with the XDACS SET SOURCE 
command, the source file-directory search order is as follows: 

a SYSSDISK 11 (the current default directoryi 


XDACS Command Dictionary A -T 








COMPILE 

b (I (flic directorv that contained the file when it was last com¬ 
piled). or node .1) (if the tile specification of the source tile 
being compiled contains a node lumci 

I'lie search order takes precedence over the version number or 
revision date time it different versions ol a source file exist m 
two or more directories Within anv one directorv. the version 
of a particular tile that lias the highest number i« considered for 
compilation 

T Compares the revision date-time of each source tile with that of the 
version last noted in the program librarv bv the NOTI'.SOURCP 
compiler qualifier (the qualifier is used with the COMPILE. 
RECOMPILE and DCL XDAPA commands) 

4. Notes for compilation anv source file with a revision date-time later 
than that noted in the program library 

5. Notes anv unit in the closure that had to be. or will have to be. 
recompiled to make all units in the closure -urrent. 

Note that the compiler recompiles obsolete units from copied 
source tiles < ADC'). If a needed copied source tile is missing, the 
file is identified and no recompilations are done Copied source 
files are created when the /COPY SOURCE qualifier is m effect 
(the default tor the COMPILE. RECOMP1I E and DCI. XDADA 
commands) 

If the closure \ ou are recompiling includes an obsolete entered 
unit, that unit is not affected by the COMPII.I: command an error 
diagnostic is issued and the COMPILE command is not executed 
You should recompile an obsolete entered unit in its own program 
librarv and then reenter it into the current program library before 
you try to recompile its dependent units in the current library 

6. Creates a PCI command file for the compiler The file contains 
commands to compile the appropriate units from source files and 
to recompile anv obsolete units from copied source files, in the 
proper order Pilfered units are not considered for compilation or 
recompilation The command file is deleted uer the COMPILE 
command is terminated, unless you specified the /COMMAND 
qualifier If vou specified the /COMMAND qualifier the command 
file is retained for future use. and the compiler is not invoked 

7 If vou did not specifv the /COMMAND qualifier the appropriate 
XD Ada compiler is invoked as follows 

a. Bv default tCOMPILE/SUBMITL the compiler command file 
generated in step r> is submitted as a batch 10 b 


A-8 XOACS Command Dictionary 





COMPILE 


b II vou specified the W AIT qualifier, the command tile i< e\ 
ecuted in a subprocess Ahi must wait tor the compilation to 
terminate before i««uinq another command Note that when 
vou specify tlii' C( All’ll TA\ Al L command, process logical 
names arc propagated to the subprocess generated to execute 
the command tile 

XIVu'S output originating beti’re the compiler is invoked is repotted 
to vour terminal bv default, or to a tile specified with the 'OUTPUT 
qualifier Compiler diagnostics are reported to a lop file bv default or 
tc' the terminal if the COMPIL1; command is executed in a subprocess 
(COMPII.K/WAIT) 

See C hapter ? for more information on the i'OXtl’li.l: command 


Command Qualifiers 

/AFTER = time 

Requests that the batch |ob be held until after a specific time when the 
C'OMPII.I- command is executed in batch mode (the default model If 
the specified time has alrcadv passed i'r it the 'AITF-R qualifier is not 
specified, the job is queued tor immediate processing. 

You can specitv either an absolute time or a combination ot absolute 
and delta time. See the I'MS PCI. Concept? Af iwwtl (or use HHI.P Specify 
Patc_ l ime at the I H I. prompt) for complete information on specifying 
time values. 

/ANALYSIS _DATA( = file-spec] 

INOANALYSIS_DATA (D) 

Controls whether a data analvsis file containing source code cross- 
reference and static analvsis information is created The data analysts 
file is supported only for use with DIGITAL layered products, such as 
the VAX Source Code Analwcr 

One data analysis file is created for each source file compiled and for 
each copied unit that is recompiled The default directory tor data 
analysts files is the current default directory The default file name is 
the name ot the source file being compiled I'he default tile type is 
ANA No wildcard characters are allowed in the file specification 

bv default, no data analysis file is created 


XDACS Command Dictionary A-9 





COMPILE 


/BATCH _LOG = tile-spec 

Provides a file specification tor the batch lot; tile when the COMPII.F 
command is executed in batch mode (the default mode). 

If vou do not give a director, specification with the /t/e-sper option 
the batch log tile is created b\ default in the current default directors- 
If vou do not t;ive a file specification, the default file name is- the 10 b 
name specified with the <NAMli = |ob name qualifier If no |ob name 
has been specified the program librarv manager creates a file name 
comprising up to the first ' u characters of the lirst unit name specified 
If no |ob name has been specified and there is a wildcard character in 
the first unit specified, the program librarv manager uses the default file 
name \PA(.'S_(.'OMPU.K The default file tvpe is I.OC. \o wildcard 
characters are aifoued in (he file specification. 

/CHECK 
/NOCHECK 

C ontrols whether all run time checks are suppressed. Ihe MX } 1IX K 
qualifier is equivalent to having all possible SUPPRF’SS pragmas m the 
source code. 

Explicit use of the CHIsCK qualifier overrides anv occurrences i't the 
pragmas SUPI’RI SS and SL’!TRKSS_AI.I. in the source code without 
the need to edit the source code. 

Hv default, run time checks are onlv suppressed in cases where a 
pragma SUPPRFSS or SUPPRFSS. ALL appears in the source code. 

See the XP Aihi MIL RTP /."'I'.-l Siifplt’iticnl /<’ the Aiht I itii^iniyc 
Rclaemc Mamml tor more information on the pragmas Sl’PPRLSS 
and SUITRLSS.AI i 

/CLOSURE 

Forces the compilation of all units in the closure of the set of units 
named in the POMI’II.E command, can be used onlv with the 
NOIMTIi.C HIX'K qualifier See the description of the |M l|PA I L 
CHLCK qualifier in (lie list of positional qualifiers 

ICOMMAND( = file-spec] 

Controls whether the compiler is invoked as a result of the COMPII.F. 
command, and determines whether the command file generated to 
invoke the compiler is saved If vou specifv the -COMIU A NIP qualifier. 
XDACS does not invoke the compiler, and the generated command file 
is saved for s ou to invoke or submit as a batch job 


A-10 XDACS Command Dictionary 










COMPILE 


I'he li'w ■'.'••.v option allows vou to enter a tile specification for the gen¬ 
erated command file File default directory for the command tile is 
the current default directory liy default. \PACS provides a tile name 
comprising up to the first 19 characters <>t the first unit name specified 
If there i-- a wildcard character in the first unit specified, the compiler 
uses the default tile name YPACS COMPILE I'he default tile type is 
COM \o wildcard characters are allowed m the tile specification 

IK detauit it you do not specify the n/e spec option the program library 
manager deletes the generated command file when the COMPILE 
command completes normally or is terminated 

/CONFIRM 
/NOCONFIRM (0) 

Controls whether the COMPILE command asks you for confirmation 
befoie performing a possibly length) operation If you specify the 
/CONFIRM qualifier, the possible responses arc as follows: 

• Affirmativ^esponses are YES, TRUE, and I 

• Negative responses are NO, FALSE, 0, and the RETURN key 

foil can use any combination of upper and lowercase letters for word 
responses Word responses can be abbreviated to one or more letters 
(for e*ample. V YE, or YES). If you type a response other than one of 
those m the list, the prompt is reissued. 

Hy detauit no confirmation is requested. 

ICOPY_SOURCE (D) 

I NOCOPY_SOURCE 

Controls whether a copied source file ( .MX ) is created in the current 
program library when a compilation unit is compiled without error. 
Recompilation requires that a copied source tile exist in the current 
program library for any unit that is to be recompiled. 

Bv default a copied source tile is created in the current program library 
when a unit is compiled without error 

IDEBUG( = (option(,...])] (D) 

/NODEBUG 

Controls which debugger compiler options are provided You can 
debug \P Ada programs with the XP Ada Pcbuggcr (see Chapter I It 
You can request the following options 


XDACS Command Dictionary A-11 






COMPILE 


Ml. 

NONI 

IMOIS'I MUCH S 
|N()| I I' M I !< V k 


Pto\nice t'dih ‘SYMIUM S and rt’MTHM k 

1’nmdes neither SVMBOIS nur 1RAC I li,\l k 

t t>nlre|s whether a debugger "-vmhdl table is i mated 
lor tl'i j iil'iri i tile 

i ontrols whether tr.neh.nl i.t --iih'-et ot the debugger 
nthel mlerm.itii'ni mlormation is nit hided m the 
dhieit tile 


Hv default, both debugger symbol records arid traceback mtormatK'n are 
included in the ohiect tiles i PT.HUC', - AI.L. i'r equivalently PT.Rl’Cu 

/DIAGNOSTICS! = file-spec} 

/NODIAGNOSTICS (D) 

Controls whether a diagnostics tile containing compiler messages and 
diagnostic information is created The diagnostics tile i> supported onlv 
for use with PIC,IT.M. lavered products such as the V AX I anguage 
Sensitive liditor. 


A diagnostics tile is created for each source file compiled The default 
directory for diagnostics hies is the current default directory t he 
default file name is the name of the source tile being compiled The 
default file type ol a diagnostics tile is PI.A Mo wildcard characters are 
allowed in the tile specification 

Hv default, no diagnostics tile is created 


/ ERROR _UM!T[ = n] 

INOERROR_LIMIT 

Controls whether execution ot the COMI’II.T. command lor a given 
compilation unit is terminated upon the occurrence ot the nth I level 
error within that unit 

F.rror counts are not accumulated across a sequence of compilation 
units If the /l-RRORJ.IMIT-n option is specified each compilation 
unit may have up to n 1 errors without terminating the compilation 
When the error limit is reached within a compilation unit, compilation ot 
that unit is terminated, but compilation ot subsequent units continues 

The /l:RROR_I.IMIT = ll qualifier is equivalent to HRROKJ IMP = 1 

Rv default execution ot the COMm.F. command is terminated for a 
given compilation unit upon the occurrence of the 30th T level error 
within that unit (equivalent to /FRROR LIMIT = 'll) 


A-12 XDACS Command Dictionary 





COMPILE 


/KEEP (D) 

INOKEEP 

( ontrols whether the batch log hit' generated is deleted alter it is 
printed when tlu' i (All’ll 1 n'mm.iiui is executed m batch mode itlu’ 
default mode) 

by default the log tile is not deleted 

iUST[ = file-spec) 

INOL1ST (D) 

( ontrols whether a listing tile is created (hie listing tile is created 
tor each compilation unit (no! tile) compiled or recompiled bv the 
('(All’ll li command 

I he default directory tor listing tiles is the current detault directory 
I he detault tile name ot a listing tile corresponds to the name of its 
compilation unit and uses the \P Ada tile-name conventions described 
m Appendix C I'he detault tile type ot a listing tile is LIS. No wildcard 
characters are allowed in the tile specification 

by default, the COMI’II L. command does not create a listing tile. 

/LOG 

INOLOG (D) 

(. ontrols whether a list ot all the'-mntgrtha t m ust be compiled or recom¬ 
piled is displayed 

by detault. a list of the units that must be compiled or recompiled is not 
displayed 

/MACHINE_C0DE 
/NOMACHINE_CODE (D) 

( ontrols whether generated machine code (approximating assembly 
language notation) is included in the listing tile 

by default, generated machine code w not included in the listing tile 

/NAME = job-name 

Specifies a string to be used as the |ob name and as the tile name 
tor the batch log tile when the c (All’ll !■ command is executed in 
batch mode (the default model I'he |ob name can have from I to 
characters 


XDACS Command Dictionary A-13 











COMPILE 


Bv default if you do ni>t specify the NAME qualifier the program 
library manager creates ,1 |ob name comprising up (o the lust V> charac¬ 
ters ot the first unit name specified If von do not specify the iMAMli 
qualifier but use a wildcard character in the first unit name specified 
the compiler uses the default name \PACS _Cl All’ll I In these cases 
the job name is also the tile name ot the batch log die 

INOTE_SOURCE (D) 

INONOTE ^SOURCE 

Controls whether the tile specification ot the source file is noted in the 
program library when a unit is compiled without error Ihe l i All’ll.1\ 
command uses this information to locate revised source tiles 

By default, the tile specification of the source file is noted in the current 
program library when a unit is compiled without error 

/NOTIFY (D) 

INONOTIFY 

Controls whether a message is broadcast when the Cl All’ll.h command 
is executed in batch mode (the default mode). I he message is broadcast 
to any terminal at which you are logged in. notifying you that your job 
has been completed or terminated 

By default, a message is broadcast 

/ OPTIMIZE[ = (optlonf,...])] 

INOOPTIMIZE 

Controls the level of optimization that is applied in producing the 
compiled code You can specify one ot the following primary options: 

mil; I ’rmiilts lull optimization with time as the primary 

optimization criterion Overrides any o»»urreners of 
the pragma OPTIMIZElSP \C II' in the source lode 

SPACE Provides full optimization with spate as the primary 

optimization criterion. Override- anv otmrremes ot 
the pragma OPTIMIZE! TIME' m the source tode 


A-14 XDACS Command Dictionary 










COMPILE 


PI'VI'I Ol’Ml'N 1 Suggested uhi'ii ac live development ot a program 

is in progress Provides some optimization hut 
development c onsiderations and iw ot debugging 
lake prctereiu e mrr optimization llm upturn 
■ >v iTrulis pragmas th.it establish .1 dependent e on .1 
■uPprogram it ho pragma INI INI ‘1 .mil tlui>> reduces 
the need lor recompilations 11 hen such bodies .ire 
modified. 

NONL Provides no optimization. Suppresses expansions in 

lino ol subprograms ini Killing those specified hv tho 

pragma INLINE. 

The -NOOI’TIMI/T qualifier is equivalent to /OITIMIZF. = NONE. 

Hv default, the COMPILE command applies full optimization with space 
as the primary optimization criterion (like /OPTIMIZE = STACF-. but 
observing lisps of the pragma OPTIMIZE). 

Che /< XTIMI/i: qualifier also has a set of secondary options that you 
can use separately or together with the primary options to override the 
default behavior for expansion in line 

I he INI.INIi secondary option can have the following values ispe the 
\7) .Wit ,\l/f S I I >• I7:~0A Kim-l ime Kclavncc Mnniml for more information 
about expansion in line) 

INLINILNONE Disables suhprogtam expansion in line. I his option 

overrides anv occurrences of the pragma INI INI: 
m the soune code without vour having to edit the 
source (ile. Il also disables implicit expansion in 
line ol subprograms t Implicit expansion in line 
means that the compiler assumes a pragma INI.INIi 
tor certain subprograms as an optimization. 1 A call 
to a subprogram in another unit is next expanded in 
line, regardless of other OPTIMIZE options in effect 
when that unit was compiled. 

INLINE'NORMAI Provides normal subprogram expansion in line 

Subprograms to which an explicit pragma INI INI: 
applies are expanded in line under certain condi¬ 
tions In addition some subprograms arc* implicitly 
expanded in line. I he compiler assumes a pragma 
INLINE for calls 10 some small local subprograms 
isubprograms that are declared in the same unit as 
the unit in which the call occurst 


XDACS Command Dictionary A-15 








COMPILE 


INLlNEiSUBPROC.RAMS Provides maximal ■•ubprogr.im expansion in line 

In addition to the normal subprogram expansion in 
line that occurs when INI.INE:NORMAI. is specified 
this option results in implicit expansion in line of 
some small subprograms declared in other units 
The* compiler assumes a pragma INI.INI' for am 
subprogram ii it imrnnes execution speed and 
reduc es code «t/c this option mac establish a 
dependence on the bode of another unit as would be 
the' case if a pragma INI.INF. were specified explicitlc 
in the source code 

INLINE:MA.YIMAt, Provides maximal subprogram expansion in line 

Maximal subprogram expansion in line occurs as lor 
INLINE: SUBPROGRAMS. 

By default, the /OPTIMIZE qualifier primary options have the following 
secondary-option values: 

OPTIMIZE - TIME = (INLINE: NORMAL) 

OP TIMIZE = SPACE -(INLINE: NOR MALI 

OPTIMIZE = PEVEI.OPMEN I -tlNI.INH:NO\Ei 
OPTIMIZE - NONE -i INLINE: NONE i 

See Chapter 3 of Version 2 l) of Uavlofun^ Atia Pnynmiii on VAIS St/slews 
for more information on the /OPTIMIZE qualifier and its options. 

/OUTPUT = file-spec 

Requests that anv XDAC'S output generated before the compiler is 
invoked be written to the file specified rather than to SYSSOUTPUT. 
Any diagnostic messages are written to both SYSSOUTPUT and the file. 

The default directory is the current default directory. If you specifv a 
file type but omit the file name, the default file name is XDAL S The 
default file type is LIS. No wildcard characters are allowed in the file 
specification. 

By default, the COMPILE command output is written to SYSSOUTPUT. 


A-16 XOACS Command Dictionary 






COMPILE 


/PRELOAD 
/NOPRELOAD (D) 

i ontrol« whether the COMI’U.K command processes external source 
files so that new compilation units or unit dependences introduced in 
those tiles or am new source tiles previously processed bv the PCI. 
XDAPA command, are accounted tor 1’ieload processing involves the 
partial compilation and syntax checking ot the following tiles 

• Any external source tiles with a creation date time Liter than that 
noted in the program library 

• Any new units introduced into the closure of units specified bv 
way ot modifications to the known external source tiles (preload 
processing does not include new external source files that arc not 
already accounted for in the program library) 

Preload processing is done immediately, after the creation date time 
of each external source file is checked, and before the usual COMI’II.F 
compilations and recompilations are performed. If you have also 
specified the /CONFIRM qualifier, you are prompted for confirmation 
for each external file to be prcloadcd. 

Bv default, the COMI’ll.li command docs not process external source 
files to account lor new compilation units or unit dependences 

IPRINTER[ = queue-namef 
INOPRINTER ID) 

Controls whether the batch job log tile is queued for printing when the 
COMFII.I-: command is executed in batch mode (the default mode) 

The /TRINTFR qualifier allows you to specify a particular print queue 
The default print queue for the log file is SYSJPRINT 

By default, the log file is not queued for printing. If you specify the 
/NOFRINTF.R qualifier, the /KlIHT qualifier is assumed. 

/QUEUE = queue-name 

Specifies the batch job queue in which the job is entered when the 
COMPII.I- command is executed in batch mode (the default mode) 

Bv default, if the iQUUL'E qualifier is not specified. XDACS first checks 
whether the logical name XPAPASBATCH is defined If it is, XDACS 
enters the job in the queue specified Otherwise the job is placed in the 
default system batch job queue, 5YS5BATCH 


XDACS "ommand Dictionary A-17 











COMPILE 


ISHOW[ = option] (D) 

/NOSHOW 

C ontrols the listing tile options included when .1 listing tile 1- provided 

Non can specitv one ol the following options 

M I. I’rnvutes all listmc tile option'. 

|NO|l'OR I M'llll'i ( onlrols u hot her a program poriapiliU summary 

is in* lulled in the li'-tinu tile l<\ detanll the 
( OMI’ll.r ii'ninund pro\ ides a p'rtahilily sum¬ 
mary ( StlcnV-rORI AHII MN 1 ''re \ppemiix l : 
tor details ol uhal win appear m a portahilitv 'urn- 
marv. See Chapter ” of Version •* ot Pi■.■riepinv 
\iln l'h\ni>'i* t'n l US S|/<(, n|< |or more intoimalion 
on program portability 

NONIi I’rovides none ot the li'-tinu the enhons isanie as 

NOSI KHV1 


/SPECIFIC A TION_ONLY 

Causes onlv the specifications ot the units specified to he consid¬ 
ered for compilation. You can use the /CI.OSL RK qualifier with the 
/SPI'CIRCA MONi.ONIA qualifier tr» torce onlv the specifications 
in the execution closure of the specified units to be considered tor 
compilation 

By default, it the /SRiXIIlCA TION.ONIA qualitiei is omitted, all ol the 
specifications bodies, and subunits in the execution closure ol the units 
specified are considered for compilation 

/SUBMIT 

Directs XDAC S to submit the command file generated tor the compiler 
to a batch queue, iou can continue to issue commands m vour current 
process without waiting for the batch job to complete 1 he compiler 
output is written to a log file 

Bv default. XPAC'S submits the command file generated tor the com¬ 
piler to a batch queue 

ISYNTAX_ONLY 
/NOSYNTAX _ONLY (D) 

Controls whether the source file is to be checked onlv for correct syntax 
If vou specify the /SYNTAX_ONLY qualifier other compiler checks are 
not performed (for example, semantic analysis. t\pe checking, and so 
on), and the program library is not updated 

Bv default, the compiler performs ail checks 


A-18 


XDACS Command Dictionary 





COMPILE 


/WAIT 

Directs \OACS ti' execute the comnund file generated fur (lie compiler 
m ,1 subprocess Execution ot vour current process is suspended until 
the subprocess completes The compiler output is written directly to 
vi'ur terminal. Note that process logical names are propagated to the 
subprocess generated to execute the command tile 

Bv default. NDACS submits the command file generated tor the com¬ 
piler to a batch queue (COMI’ILE/SUHMIT). 

/ WARNINGS( = (message-optlon[.. .])] 

INOWARNINGS 

Controls which categories of informational (I level) and warning (W- 
Icvel) messages are displayed and where those messages are displayed. 
You can specify anv combination of the following message options: 

WARNINGS (</i'stiii(ifK>ri|, |) 

NOWAUNINOS 

WEAK.WARNINGS: Ulcstuiahon\, |) 

NOWLAK.WARNINGS 

SUITLEMLN TAL. (i/cstiim/inii|. |) 

NOSUITLLMKN TAL 

COMPILATION NOTES ukstmution\. \) 
NOCOMni.ATION.NOTES 

STATUS: (i/rs/imi/i<"i|, |) 

NOSTATUS 

The possible values of destination are ALL, NONL. or any combi¬ 
nation of TERMINAL (terminal device), LISTING (listing file), and 
DIAGNOSTICS (diagnostics file) The message categories are sum¬ 
marized as follows (see Chapter f of the Version 2 0 of Developing Ada 
I'ro^rn ms t>n LAIS Si/stems tor more information) 


XDACS Command Dictionary A-19 









COMPILE 


WARNINGS 

WP.AK WARNINGS 


sum r.Mi-N r a i 


COMI’ll-A I ION NO ITS 


STATUS 


W-lcvel: Indicates a definite problem in ,1 icg.il 
progi.im for example an unknown pragma. 

l-lexel: Indicates a potential prohlem m 
a legal program for example a possible 
( ONSTR AINT ERROR at run time I hose 
are the onlv kind of l-lexel messages that are 
counted m the Mimmarv statistics at the end ol 
a compilation 

l-lexel’ Additional information associated with 
preceding P-lexei or VV-lexel diagnostic' 

l-level; Information about how the iemptier 
translated a program, such as reiord l.nout 
parameter-passing meihanisms. or decisions 
made (or the pragmas INI INP. IN PPRPAGP. or 
the import -subprogram pragmas 

l-level: Pnd ot cnmpil.ition stalistus and other 
messages 


The defaults are as follows: 

WARN T Non I WARN: A!.;.. ;-.SAS: At.:.. : :Tf'i A!.;., "I':N fJE.: 

If vou specify onlv some of the message categories with the 
/WARNINGS qualifier, the default values for the other categories arc 
used. 


Positional Qualifiers 

/BODY 

Forces the compilation of the Liodv and subunits (if any! of a specified 
compilation unit, without forcing the compilation of the specification. 
You can use the /BODY qualifier only with the /NODATE_CHECK 
qualifier 

By default, if vou use the /NODATE_CHECK qualifier without the 
/BODY qualifier, the COMPILE command forces the compilation ot the 
specification, as well as the body and any subunits. 

/DATE_CHECK (D) 

/NODATE _CHECK 

Controls whether the COMPILE command checks the creation date 
and time of source files to determine whether anv source (ties have 
been revised but not compiled into the current program librarv If 
you specify the iNODATE_CHECK qualifier, the COMPILE command 


A-20 XDACS Command Dictionary 












COMPILE 


forces tlu* compilation i't every unit specified cu'ii though the source 
file has not been revised since the unit was last compiled bodies and 
subunits ot the specified units are also recompiled as necessary to 
make them current I altered units are not considered lor compilation or 
recompilation u hen the NIOPAIF (. UFA k quainter i«- m ettect 

It vou specitv the Ni( )PA I I t lilt k t 'I.OSL’KF qualifier the 
COMPILE command lorces the compilation ot every unit in the closure 
of the units specified 

If you specify the -NOPATF ( Hl'.Ck IIOPY qualifier the t OMPII.F 
command forces the compilation ot the body and subunits nl anvi ot a 
c('mpilatii>n unit without lorcing the compilation i't the specification 

You can use the \'OL>ATF.CI fFCk qualifier to force the compilation ot 
a set of units using a particular combination of compiler qualifiers 

Hv default the COMI’ll F command checks the creation date and time 
ot source tiles i PA I F.CHECK) and compiles only the source tiles that 
were revised but not compiled into the current program library. 

/FORCE _BODY 

Forces the compilation or recompilation of the bodies ot the specified 
compilation units, regardless of whether or not the external source tiles 
have been modified or the bodies are obsolete 

The 'FORCE JH ")OY qualifier can have different effects depending on its 
position m the command line, and its interaction with other qualifiers: 

• If you append the /FORCF.BOP'i qualifier to the C l All’ll.F. com 
mand string tas opposed to appending it to an individual unit 
parameter) the COMPILE command forces the compilation of the 
bodies ot each unit specified on the command line. 

• If you append the /l ; ORCF_BOb>Y qualifier to an individual unit 
parameter, the COMPILE, command forces the compilation of the 
body of only that unit. 

• If vou specify the /EORCE_HOP> qualifier with the CLOSURE 
qualifier, the COMPILE command forces the compilation ot the 
bodies of all the units in the execution closure of the units specified. 

Bv default if the FORCEJIOLA qualifier is omitted, the specifications, 
bodies and subunits ot all the units m the execution closure ot the units 
specified are considered for compilation or recompilation 


XDACS Command Dictionary A-21 









COMPILE 


Examples 


vacK.iuo ' i'( v : 11; -j.ir : 

••pep* ' ; PM' . \' 7 J- ; p ■ 

;mck.vj»» : viy 

'T>EP : i rEM' . .*JTP !. L -p ■ m 

'AS-:- !._*•.?’ ’ ! I.F I , -?■.« ! '•* 1 1 :w 

M VF_T**nE~ 

prO‘"^'l'j !-n •»-r«y 

r 'Sir: p_t--pe 

! ;n<~ - : *n : •^'ly 

V A?S-: . ''P^ITTFP, M -PFI. * NTFFVA V • .«>:«• A! i‘AT M # ••?!» jy 

"V: KAST__PAT'*M 

The COMPILE command with the I OCi qualifier lists all units in 
the closure of unit MOPHI..INTETACH that need to be compiled 
and recompiled, then submits the compiler command file generated 
by XDACS as a batch |ob 

■ L'A'T 

This command forces the compilation i N'OPATE CI II CK) of the 
entire closure (/CLOSURE) of unit CONTROL LOOP with the 
OPTIMIZE = SPACE qualifier 




A-22 XDACS Command Dictionary 













TEST PARAMETERS 


APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such as the maximum 
length of an input line and invalid file names. A test that makes use of such values is identified 
by the extension .TST in its file name. Actual values to be substituted are represented by names 
that begin with a dollar sign. A value must be substituted for each of these names before the test 
is run. The values used for this validation are given below: 


Name and Meaning 

$ACC_SIZE 

An integer literal whose value is the number of bits 
sufficient to hold any value of an access type. 

$BIG_ID1 

Identifier the size of the maximum input line length with 
varying last character. 

$BIG_ID2 

Identifier the size of the maximum input line length with 
varying last character. 

$BIG_ID3 

Identifier the size of the maximum input line length with 
varying middle character. 

$BIG_ID4 

Identifier the size of the maximum input line length with 
varying middle character. 

$BIG_INT_LIT 

An integer literal of value 298 with enough leading 
zeroes so that it is the size of the maximum line length 

$BIG_REAL_LIT 

A universal real literal of value 690.0 with enough 
leading zeroes to be the size of the maximum line length. 

$BIG_STRING1 

A string literal which when catenated with 
BIG_STRING2 yields the image of BIG_ID1. 


Value 


(1..254= >’A\ 255=>1) 


(1-254= >*A\ 255=>2) 


(1-127=>’A', 128= >3, 
129-255=>’A’) 


(1-127=>’A\ 128=>4, 
129-255=>’A’) 


(1-252= >0, 
253-255=>298) 


(l-249=>0, 
250-255=>69.0E1) 


(1-127= >’A’) 


Validation Summary Report 
SD-Sdcoo ptc XD Ada MIL-STD-1750A 


AVF-VSR-9050Z/54 
Appendix C - Page I of 5 














TEST PARAMETERS 


$BIG_STRING2 (1..127=>’A\ 128=>1) 

A string literal which when catenated to the end of 
BIG_STRING1 yields the image of BIG_ID1. 

SBLANKS (l.-235=>’ ’) 

A sequence of blanks twenty characters less than the size 
of the maximum line length. 

$COUNT_LAST 32767 

A universal integer literal whose value is 

TEXTJO.COUNT’LAST. 

$DEFAULT_MEM_SIZE 131072 

An integer literal whose value is 

SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 16 

An integer literal whose value is 

SYSTEM.STORAGE_UNIT. 

$DEFAULT_SYS_NAME MILSTDJ750A 

The value of the constant SYSTEM.SYSTEMNAME. 

$DELTA_DOC 2.0**(-31) 

A real literal whose value is SYSTEM.FINE_DELTA. 

SFIELDLAST 255 

A universal integer literal whose value is 

TEXTJO.FIELD’LAST. 

$FIXED_NAME NO_SUCH_TYPE 

The name of a predefined fixed-point type other than 
DURATION. 

SFLOATNAME NO_SUCH_TYPE 

The name of a predefined floating-point type other than 
FLOAT, SHORT_FLOAT, or LONG_FLOAT. 

$GREATER_THAN_DURATION 75000.0 

A universal real literal that lies between 

DURATION’BASE’LAST and DURATION’LAST or any 
value in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 131073.0 

A universal real literal that is greater than 
DURATION’BASE’LAST. 


AVF-VSR-90502/54 


Validalioo Summary Report 

SD-Scicoo pic XD Ada MIL-STD-17S0A 


Appendix C • Page 2 of 5 













TEST PARAMETERS 


$HIGH_PRIORITY 15 

An integer literal whose value is the upper bound of the 
range for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 BADCHAR®.! 

An external file name which contains invalid characters. 


$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which is too long. 


THIS ISAFILENAMEWITH 

MORE_THAN_70_CHARACTER 

SINITTOALLOWTHEMAC 


$INTEGER_FIRST 

A universal integer 
INTEGER’FIRST. 


literal 


whose 


-32768 

value is 


SINTEGERLAST 

A universal integer 
INTEGER’LAST. 


literal whose value 


32767 

is 


$INTEGER_LAST_PLUS_1 

A universal integer literal whose value is 32768 
INTEGER’LAST+1. 


SLESSTHANJDURATION -75000.0 

A universal real literal that lies between 

DURATION’BASE’FIRST and DURATION’FIRST or 
any value in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -131073.0 

A universal real literal that is less than 

DURATION’BASE’FIRST. 


SLOWPRIORITY 0 

An integer literal whose value is the lower bound of the 
range for the subtype SYSTEM.PRIORITY. 

SMANTISSAJDOC 31 

An integer literal whose value is 
SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 9 

Maximum digits supported for floating-point types. 

$MAX_IN_LEN 255 

Maximum input line length permitted by the 
implementation. 


Validation Summary Report A VF-VSR-90502/54 

SD-Scicon pic XD Ada MILSTD-1750A Appendix C - Page 3 of 5 















TEST PARAMETERS 


$MAX_INT 2147483647 

A universal integer literal whose value is 

SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal whose value is 

SYSTEM.MAXJNT+1. 

$MAX_LEN_INT_BASED_LITERAL 

A universal integer based literal whose value is 2#11# 
with enough leading zeroes in the mantissa to be 
MAX_IN_LEN long. 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal whose value is 16:F.E: with 
enough leading zeroes in the mantissa to be 
MAX_IN_LEN long. 

$MAX_STRING_LITERAL (1=>’**, 2-254= >’A’, 

A string literal of size MAX_IN_LEN, including the 255=>’"’) 
quote characters. 

$MIN_INT -2147483648 

A universal integer literal whose value is 
SYSTEM.MINJNT. 

$MIN_TASK_SIZE 64 

An integer lit al whose value is the number of bits 
required to hold a task object which has no entries, no 
declarations, and "NULL;" as the only statement in its 
body. 

$NAME NO_SUCH_TYPE_AVAJDLABLE 

A name of—a- predefined numeric type other than 
FLOAT, INTEGER, SHORT FLOAT, 

SHORT_INTEGER, LONG FLOAT, or 
LONGJNTEGER. 

$NAME_LIST M1LSTD1750A 

A list of enumeration literals in the type 
SYSTEM.NAME, separated by commas. 

$NEG_BASED_INT 16#FFFFFFFE# 

A based integer literal whose highest order nonzero bit 
falls in the sign bit position of the representation for 
SYSTEM.MAXJNT. 


Validation Summary Report 

AVF-VSR-90502/S4 

SD-Sdcoo pk: XD Ada MIL-STD-1750A 

Appendix C - Page 4 of 5 


( 1 . 2 = >’ 2 :’, 
3.252=>’0’, 
253.255=>’H:’) 


(1.3=>T6:’ 

4.251=>’0\ 
252.255=^RE:’) 









TEST PARAMETERS 


$NEW_MEM_SIZE 131072 

An integer literal whose value is a permitted argument 
for pragma memory_size, other than 

SDEFAULT MEM_SIZE. If there is no other value, 
then use $DEFAULT_MEM_SIZE. 

$NEW_STOR_UNIT 16 

An integer literal whose value is a permitted argument 
for pragma storage_unit, other than 

$DEFAULT_STOR_UNIT. If there is no other 
permitted value, then use value of 
SYSTEM.STORAGEJJNIT. 


$NEW_SYS_NAME MILSTD 1750A 

A value of the type SYSTEM.NAME, other than 
$DEFAULT_SYS_NAME. If there is only one value of 
that type, then use that value. 

$TASK_SIZE 16 

An integer literal whose value is the number of bits 
required to hold a task object which has a single entry 
with one inout parameter. 

STICK 0.0001 

A real literal whose value is SYSTEM.TICK. 


i 


AVF-VSR -90502/54 
Appendix C - Page 5 of 5 

i 


Validation Summary Report 
SD-Sdcoa pic XD Ada MDL-STD-1750A 













WITHDRAWN TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the Ada Standard. 

The following 44 tests had been withdrawn at the time of validation testing for the reasons 

indicated. A reference of the form Al-ddddd is to an Ada Commentary. 

E28005C This test expects that the string TOP OF PAGE. -63” of line 204 will appear 
at the top of the listing page due to a pragma PAGE in line 203; but line 203 
contains text that follows the pragma, and it is this that must appear at the top of 
the page. 

A39005G This test unreasonably expects a component clause to pack an array component into 
a minimum size (line 30). 

B97102E This test contains an unitended illegality: a select statement contains a null 
statement at the place of a selective wait alternative (line 31). 

C97116A This test contains race conditions, and it assumes that guards are evaluated 
indivisibly. A conforming implementation may use interleaved execution in such 
a way that the evaluation of the guards at lines 50 & 54 and the execution of task 
CHANGING_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

BC3009B This test wrongly expects that circular instantiations will be detected in several 
compilation units even though none of the units is illegal with respect to the units 
it depends on; by AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

CD2A62D This test wrongly requires that an array object’s size be no greater than 10 although 
its subtype’s size was specified to be 40 (line 137). 

CD2A63A.D, CD2A66A..D, CD2A73A.D, CD2A76A..D [16 tests] 

These tests wrongly attempt to check the size of objects of a derived type (for 
which a ’SIZE length clause is given) by passing them to a derived subprogram 
(which implicitly converts them to the parent type (Ada standard 3.4:14)). 
Additionally, they use the ’SIZE length clause and attribute, whose interpretation 
is considered problematic by the WG9 ARG. 

CD2A81G, CD2A83G, CD2A84N & M, & CD5011O [5 tests] 

These tests assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not the case, and the 
main program may loop indefinitely (lines 74, 85, 86 & 96, 86 & 96, and 58, resp.). 


AVF-VSR-90502/54 


Validation S ummar y Report 
SD-Sdcon pic XD Ada MIL-STD-1750A 


Appendix O - Page 1 of 2 










WITHDRAWN TESTS 


CD2B15C & CD7205C 

These tests expect that a ’STORAGE_SIZE length clause provides precise control 
over the number of designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

CD2D11B This test gives a SMALL representation clause for a derived fixed-point type (at 
line 30) that defines a set of model numbers that are not necessarily represented 
in the parent type; by Commentary AI-00099, all model numbers of a derived 
fixed-point type must be representable values of the parent type. 

CD5007B This test wrongly expects an implicitly declared subprogram to be at the the address 
that is specified for an unrelated subprogram (line 303). 

ED7004B, ED7005C & D, ED7006C & D [5 tests] 

These tests check various aspects of the use of the three SYSTEM pragmas; the 
AVO withdraws these tests as being inappropriate for validation. 

CD7105A This test requires that successive calls to CALENDAR.CLOCK change by at least 
SYSTEM.TICK; however, by Commentary AI-00201, it is only the expected 
frequency of change that must be at least SYSTEM.TICK-particular instances of 
change may be less (line 29). 

CD7203B, & CD7204B 

These tests use the ’SIZE length clause and attribute, whose interpretation is 
considered problematic by the WG9 ARG. 

CD7205D This test checks an invalid test objective: it treats the specification of storage to 
be reserved for a task’s activation as though it were like the specification of storage 
for a collection. 

CE2107I This test requires that objects of two similar scalar types be distinguished when read 
from a file--DATA_ERROR is expected to be raised by an attempt to read one 
object as of the other type. However, it is not clear exactly how the Ada standard 
14.2.4:4 is to be interpreted; thus, this test objective is not considered valid. (line 
90) 

CE3111C This test requires certain behavior, when two files are associated with the same 
external file, that is not required by the Ada standard. 

CE3301A This test contains several calls to END_OF_LINE & END_OF_PAGE that have 
no parameter: these calls were intended to specify a file, not to refer to 
ST AND ARD_INPUT (lines 103, 107, 118, 132, & 136). 

CE3411B This test requires that a text file’s column number be set to COUNT’LAST in order 
to check that LAYOUT_ERROR is raised by a subsequent PUT operation. But 
the former operation will generally raise an exception due to a lack of available disk 
space, and the test would thus encumber validation testing. 


AVF-VSR-90502/54 


Validation Summary Report 
SD-Sdcon pic XD Ada MIL-STD-1750A 


Appendix D - Page 2 of 2 








