REPC 


PiMc l•porllng budwi lor N» oolK 
HMdid, and fMlMNng tlw oolMlIon 
HtadquMn Swvin, DtacMraM to 
ltanigiffl«i(indBudig|«t Wuht^c 


AD-A246 585 


^GE 


Form Approved 
OPM No. 0704-0188 






Y USE ONLY (iMve 



2. REPORT DATE 


I tor ladMlng Mnjakmi, iMRMig axIUng dM> aoiRw gtotarkig and intfenMng tw d«a 
« a( M oolaeltoi o( Hotmallon, Mudhg auggaattona tor radudng M budan. to Waahi^glon 
>, Ailnpkm, VA 22202-4302. and to tia OHoa ol htoimaion and RaguMory Aflaka. Olioa oi 




Rnal: 02 Oct 1991 to 01 Jun 1993 


4. TITLE AND subtitle 

Meridian Ada, Version 4.1, Sun Microsystenis 4/110 (SunOS, Version 4.1)(Host & 
Target). 911002W1.11221 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton. OH 
USA 


ERPORMING ORGANIZATION NAME(S) AND ADDRESSEES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-515-0991 


9. SPONSORINGA40NITORING AGENCY NAME(S) AND ADDRESSEES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBUnON/AVAILABIUTY STATEMENT 

Approved for public release; distribution unlimited. 


DTIC 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Meridian Ada, Version 4.1, Wright-Patterson AFB, Sun Microsystems 4/110 (SunOS, Version 4.1)(Host & Target), ACVC 
1 . 11 . 


14. SUBJECT TERMS 


Ada programming language, /Via Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility. ANSI/MIL-STD-1815A, AJPO. 


i7.sEcunrrY classification 
OF REPORT 
UNCLASSIFIED 


NSN 754001-280-550 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19, SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. UMITATION OF ABSTRACT 


Standa. J Fom* 298, ER«v. 2-89) 
Prescribed by ANSI Std. 239-128 
















AVF Control Number; AVF-VSR-515-0991 

4 December 1991 
91-08-15-MSS 


Ada COMPILER 
VALlDATiaa SUMMARY REPORT: 

Certificate Number: 911002W1.11221 
Meridian Ada, Version 4.1 
Sun Microsystems 4/110 «> Mercury MC860 VM 

(SvinOS, Version 4.1) (MC/OS, Version 2.0) 


Prepared By: 

Ada_Validation_Pacility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


92-04667 

liiliiilii 


92 2 24 001 




Certificate information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 2 October 1991. 

Compiler Name and Version: Meridian Ada, Version 4.1 

Host Computer System: Sun Microsystems 4/110, 

SunOS, Version 4.1 

Target Computer System: Mercury MC860 VM, 

MC/DS, Version 2.0 

Customer Agreement Number; 91-08-15-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
911002W1.11221 is awarded to Meridian Computer Systems, Inc. This 
certificate expires on 1 June 1993. 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 





A3a'"\^¥d5E^Fofgahi2atiorr 
DirectoCCTputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 












DECLARATION OP CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Fadlity: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1,11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1 

Host Computer System: Sun Microsystems 4/110 

SunOS, Version 4.1 

Target Computer System: Mercury MC860 VM 

MC/OS, Version 2.0 


Customer’s Declaration 


I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/M1L-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 


StovTO Boyd, Vice President ol 


Stov^ Boyd, Vice Presideht of Engineering 
Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine,- CA 92718 


Date: 


(IL, 



j!±LL 



TABLE OF CCOTENTS 


CHAPTER 1 INTRODUCTIC»I 


1.1 USE OF THIS VALIDATIC^I SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATICW DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIOaS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATiaa SYSTEM OPTIC»JS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 

















CHAFIER 1 


INTRODUCTIOJ 


The Ada iirplementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capad>ility (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada in^jlementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATICSJ SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedcan of 
Information Act" (5 U.S.C. #552). The resxilts of this validation apply 
only to the conputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate amd complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vhich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions* regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Coitputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 


INT®M)UCTION 


1.2 REFERENCES 

[Adia83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

[UGd9] Ada Coapiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inpleinentations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
\^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at‘compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vhen they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coirpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code v^ich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving rmjltiple, sep?r?telY compiled units. Errors 
are expected at link time, cuid execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 









INTRODUCTICW 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof- 

Ada Compiler The mecuis for testing conpliance of Ada iirplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host conputer system euid its 

Implementation target coitpater system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body v^ich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Orgeunization 
(AVO) 

Conpliance of The ability of the inqplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conpjter A functional unit, consisting of one or more conpaters and 

System associated software, that uses conmon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conpjter system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTIOJ 


Conformity 


Customer 


Declaration of 
Conformance 


Host Con^ter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

COTpiter 

System 

Validated Ada 
Conpiler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inplementation for 
which validation status is realized. 

A conpiter system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevcuit for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system vdiere the executable form of Ada programs 
are executed. 


Ihe compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or ^ registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect erd not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATICW DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 







INPLEMENT^TIO} DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 

C24113L..y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

. C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

C35713B, C45423B, B86001T, and C86006H checlt for the predefined type 

SHORT_FLQAT; for this inplementation, there is no such type. 

C35713C, B86001U, and C86006G checlc for the predefined type 

LCM5_FU3AT; for this inplementation, there is no such type. 

C35713D amid B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCWG_FrQAT, or SHORT_FLQAT; for this 

inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 

implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 

raised if MACHINE^^OVERFICWS is TRUE and the results of various 
floating-point operations lie outside the remge of the base type; for 
this inplementation, MACHINE_OVERFLOWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAXJIANTISSA of 47 or greater; for this 
in^lementation, HAXJMANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA2009F check v^ether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
inplementation creates a dependence on generic units as allowed by 
AI-00408 euid AI-00506 such that the cor^ila.tion of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 

for procedures and functions; this implementation does not support 
pragma INLINE. 

0310090 checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 




IMPLEMENTATIC»I DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and ADS01 lA use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SE®JENTIAL_IO with \inconstrained array types and record types with 
discriminants without defaults; these instcintiations are rejected by 
this conpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT” 10 

C:E2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_10 

CE3102E 

CREATE 

IN_FILE 

TEXT_I0 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

C:e3102G 

DELETE 

teXt_io 

CE3102I 

CREATE 

OUT FILE 

TEIXT 10 

CE3102J 

OPEN 

IN FILE 

text" 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


2-3 







IMPLEMENTATION DEPENDENCIES 


Hie following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised vdien this association is attenpted- 


CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIOJS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The conpiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the ranae of safe numbers 
(cf. LRM 3.5.7:12). 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that \init's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic \init bodies makes the compilation 
linit that contains the instantiations obsolete. 


2-4 






IMPLEMENTATIC»J DEPENDENCIES 


EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks vdiether legal units of a compilation are accepted 
if one of the con^jilation \inits is illegal- This test was processed with 
the conpiler option "-fl", vdiich forces the conpiler to generate code for 
legal units of a conpilation. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the units that contain the 
instantiations, and this in 5 )lementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the conpilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 


2-5 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIROMENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada inplementation, contact: 

Meridian Software Systems 
Technical Support 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 

For sales information about this Ada iiqjlementation, contact: 

Meridian Software Systems 
Attn: Jim Smith 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 


Testing of this Ada inplementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3-1 






PROCESSING INFORMATICS 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vrtiether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of i^plicable Tests 3786 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 289 

g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun-3 system and then transferred to the 
Sun Microsystems 4/110 system via an NFS etheirnet connection. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 


3-2 










PROCESSING INFORMATiaq 


The tests were coitpiled and linked on the host coirputer system, as 
appropriate. The executcdjle images were tremsferred to the target computer 
system by a VME bus driver download utility/file access server, and run. 
Testing was performed using command scripts provided the customer and 
reviewed by the validation team. See ^jpendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Program 

Switch 

Effect 

ada 

-fE 

Generate error f^e for the Ada listing utility (alu). 

ada 

-fl 

Ignore conpilation errors and continue generating 
code for legal units within the same conpilation 
(for test EA1003B). 

ada 

-fQ 

Suppress "added to .library" and "Generating code for" 
information messages. 

ada 

-fw 

Suppress informative warning messages. 

alu 

-c 

Produce continuous form Ada listings (no page 
headers). 

alu 

-P 

Obey PRAOIA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

alu 

-s 

Output Ada listing to the standard output file instead 
of to a disk file. 

banp 

-s 200000 

Link program with a maximum task stack area of 

200000 b^es. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 





APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MAX_1N_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 200 — Value of V 

$BIG_ID1 (1..V-1 -> 'A', V •> '1') 

$BIG_ID2 (1..V-1 »> 'AS V»> '2') 

$BIG_ID3 (1..V/2 «> 'A') & '3' & 

(l..V-l-y/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 «> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1. & (1..V/2 *> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 •> 'A') & '1' & 

$BLANKS (1..V-20 »> ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 «> 'A') & 

The following tekble lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

SALICMIENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 1024 

$DEFAULT_ST0R_UN1T 8 

$DEFAULT_SYS_NAME MERCURY 

$DELTA_DOC 2.0**(-31) 

$ENTRY_ADDRESS 16#0# 

$ENTRY_ADDRESS1 16#1# 

$ENTRY_ADDRESS2 16#2# 

$FIELD_LAST 2_147_483_647 

$FILE_TERMINAT0R ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FL0AT_NAME N0_SUCH_FLQAT_TYPE 

$FORM_STRING 

$FORM_STRING2 "CANI«7rj^STRICT_FILE_CAPACITY" 

$GREATER THAN DURATIOJ 

90_000.0 

■ $GREATER THAN DURATION BASE LAST 

T0_00TJ_000.0 

$GREATER THAN FLOAT BASE LAST 

l.^E+308 

$CaiEATER THAN FLOAT SAFE LARGE 

l.ZrE308 

A-2 








MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLQAT SAFE LARGE 

1.0E308 

$HIGH_PRIORI'IY 20 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAMEl 

$IIiEGAL_EXTERNAL_Fir£_NAME2 

/IKMDIRECTORY/FILENAME2 

$INAPPR0PR1ATE_LINE_LENGTH 

-1 

$INAPPR0PR1ATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRA(3IA INCLUDE(”A28006Dl.ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE!"B28006F1.ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DUFATION -90_000.0 

$LESS THAN DURATION BASE FIRST 

“ ~ “ -1T^_000_000.0 

$LINE_TERMINATOR ASCI I. LF 

$LCIW_PRI0R1TY 1 

$MACHINE_CODE_STATEMENT 

NULL; 

$MACHINE__CODE_TYPE INSTRUCTIOI 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 • 

$MIN_INT -2147483648 

$NAME BYTE_INTEGER 

A-3 







MACRO PARAMETERS 


$NAME__LIST 

$NAME__SPECIFICATIC»I1 

$NAME_SPECIFICATIC»J2 

$NAME__SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SyS_NAME 

$PAGE__TERMINATOR 

$RECORD_DEFINITICX^ 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


MERCURY 

/\isr/World/val/X2102A 
/usrArorld/val/X2102B 
Ais r/WDrld/Val/X3119A 
16#FFFFFFFE# 

1024 

8 

MERCURY 

ASCII.LF & ASCII.FF 
NEW INTEGER; 

NO_SUCH_MACHINE_CODE_TYPE 

32 

2048 

1.0 

FCNDECL.VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL.VAR_ADDRESS2 
NO SUCH PRAGMA 


A-4 






APPENDIX B 


COMPILATIOI SYSTEM OPTIC»IS 


The compiler options of this Ada implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to conpiler documentation and 
not to this report. 


MERIDIAN ADA COMPILER OPTIONS 


-fD Generate debugging output. The -fD option causes the 
conpiler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the conpiler to annotate an assembly language 
output file. The output is supplemented comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-fE Generate error log file. The -fE option causes the 

conpiler to generatte a log file containing all the error 
messages and warning messages produced during conpilation. 
The error log file has the same name as the source file, 
with the extension .err. For exanple, the error log file 
for sinple.ada is sinple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore conpilation errors and continue generating code 
for legal units within the same conpilation file. 

-fL Generate exception location information. The -fL option 


B-1 




COMPILATION SYSTEM OPTIONS 


causes location information (source file names and line 
numbers) to be maintained for internal checlts. This 
information is useful for debugging in the event that an 
"Exception never handled" message appears when an 
exception propagates out of the main program. This flag 
causes the code to be somevdiat larger- if -fL is not 
. used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire coitpilation: 
division check and overflow check. These checks are 
described in section 11.7 oT the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including nun^ric checking. This 
flag is equivalent to using pragma suppress on all checks. 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the conpiler. Note that there is a related ada option, 

-fN to suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjunction with the -S 
option. Certain restrictions apply to use of this option. 

-fv Conpile verbosely. The compiler prints the name of each 
subprogram, package, or generic as it is compiled. 
Information about the symbol table space remaining 
following compilation of the named entity is also printed 
in the form "[nK]". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler to run an additional 
optimization pass. The optimizer removes comnnon 
srfc-expressions, dead code and xmnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Cptimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 


B—2 






COMPIIATiaa SYSTEM OPTIWS 


-linodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional m^ifiers can be given to 
affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -Ip is only 
meaningful if -Ic has also been given. Normally -Ic 
suppresses all pagination, \f*ereas -Icp suppresses 
all pagination except v^ere explicitly called for 
within the source file with a pragma page directive. 

s Use standard output. The listing by default is 
written to a file with the same name as the source 
file and the extension .1st, as in single.1st from 
single.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead. 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages and warning messages. 
Specifying -It causes the compiler to list only the 
source lines to vhich error messages or warning 
messages apply, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For example, 
the default listing file produced for simple.ada has the 
name single.1st. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -fE option. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No conpile. This option causes the ada command to do a 
•^dry run" of the conpilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

-P Print compile. This option causes the ada command to 
print out the command invoked for each processing step 
as it is performed. 


B-3 






COMPILATION SYSTEM OPTIONS 


~S Produce assembly code. Causes the code generator to 
produce an assembly language source file and to halt 
further processing. 


B-4 





COMPILATION SYSTEM OPTIC»rS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


MERIDIAN ADA LINKER OPTIONS 


-A Aggressively inline. This option instructs the optimizer 
to aggressively inline subprograms vdien used in addition 
to the -G option, lypically, this means that subprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for which pragma inline 
has been specified are inlined. 

-c compiler-program-name 

Default: (as stored in program library) 

Use alternate conpiler. The -c option specifies the 
conplete (non relative) directory path to the Meridian 
Ada conpiler. This option overrides the coitpiler 
program name stored in the program library. The -c 
option is intended for use in cross-conpiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 
suppresses the creation and additional code generation 
steps for the temporary main program file. The -f option 
can be used v^en a sinple change has been made to the 
body of a conpilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 

bamp to invoke the global optimizer on yo’jr program. 
Compilation units to be optimized globally must have been 
conpiled with the ada -K option. 

-G Perform global and local optimization. Ihe -G option 

causes banp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, conpilation units to be optimized 
must have been conpiled with the ada -K option. 


B-5 







COMPILATION SYSTEM OPTIONS 


-I Link the program with a version of the tasking rian-time 

v^ich supports pre-enptive task scheduling. This option 
produces code vdiich handles interrupts more quickly, but 
has a slight negative impact on performance in general. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies the name 
of the program library to be consulted by the banp 
program. Ihis option overrides the default library name. 

-n No link. Hie -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. Hie -N option causes the bamp command to 
do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
ty the banp command. This option overrides the default 
output file name. 

-P Print operations. Hie -P option causes the baitp command 
to print out the actions it takes to generate the 
executable program as the actions are performed. 

-s task-stack-size 
Default: 

o 20K if tasking used 
o Zero if tasking not used 

Use alternate tasking stack size. The -s option 
s^cifies the number of bytes (in decimal) to be 
allocated to all the tasks to be activated in the Ada 
program. Hiis option overrides the default task stack 
size. The size of individual task activation stacks 
can be specified with a length clause. 

-V Link verbosely. The -v option causes the banp command to 
print out information about what actions it takes in 


B-6 










COMPIIATICN SYSTEM OPTIOJS 


-W 


building the main program. 

Suppress warnings. This option allows you to suppress 
warnings from the optimizer. 


B-7 










APPEMDIX C 


APPENDIX F OF THE Ada STANDARD 


Ihe only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer, unless specifically noted otherwise, 
references in this ^pendix are to conpiler documentation and not to this 
report. In^lementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type SHORT_INTEGER is range -32_768 .. 32_767; 
type BYTE_INTEGER is range -128 .. 127; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 

end STAND^; 


C-1 







Appendix F Implementation-Dependent Characteristics 


This appendix lists unplementadonHlependent characteristics of Meridian Ada. Note that there are no pre¬ 
ceding a{^ndices. This af^jendix is c^ed Appendix F in order to comply with the Reference Manual for 
the Ada Programming Language* (LRM) ANSI/MIL-STI>-18 IS A which sutes that this appendix be named 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration representation clauses, record repre¬ 
sentation clauses, address clauses, imerrupts, package system, machine code insertions, pragma inter¬ 
face, and unchecked programming. 

F.l Pragmas 

The implemented pre-defined pragmas are: 

elaborate See the LRM section 10.5. 

Interface See section F. 1.1. 
list See the LRM Appendix B. 

pack See section F. 1 2. 

page See the LRM Appendix B. 

priority See the LRM Appendix B. 
suppress See section F. 1.3. 

inline See the LRM section 6.32. This pragma is not acmally effective unless you compile^ink 
your program using the global optimizer. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled optisdxe system_name 

shared storagejonit 

aBeniory_^size 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at cornice time, the compiler issues a warning message radrer 
than an error, as required by the Ada language definition. Refer to the LRM Appendix B for additional infor¬ 
mation about the pre-defi^ pragmas. 

F.1.1 Pragma Interface 

The form of pragma intsrf auss in Meridian Ada is: 

pragma intorf SCO (fongusge, subprogram link-name" \ ); 

where: 

language Thisistheinterfacelanguage,oneofthenamesassenibly,buntin,c.orintemal. Thenames 
builtin and internal are reserved for use by Meridian compiler maintainers in nm-time sup¬ 
port packages. 

subprogram This is the ruune of a subprogram to which the pragma intorf aca applies. 

*A11 future references to the Reference Manual for the Ada Prograrruning Language appear as the LRM. 


149 


Meridian Ada Compiler User’s Guide 






Appaidix F 


Unkr^ume This is an optional string literal spedfying the name of the non-Ada subprogram correspond¬ 

ing to the Ada subprogram named in the second parameter. If link-name is omitted, then 
link-name defaults to the value of subprogram translated to lowercase. Depending on the 
language spedfied. some automatic modirications may be made to the link-name to produce 
the actual object code symbol name that is generated whenever references are made to the 
corresponding Ada subprogram. 

It is ^lopriate to use the optional link-name parameter to pragma Int srf aca only when 
the interface subprogram has a name that does not correspond at all to its Ada identifier or 
when the interface subprogram name cannot be given using rules for constructing Ada identi¬ 
fiers (e.g. if the name contains a *$* character). 

The characteristics of objea code symbols generated for each interface language are: 
assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same as link-name, but prefixed with two underscore charac¬ 
ters (“_ "). This language interface is reserved for special interfaces defined by Meridian 

Software Systems, Inc. The builtin interface is presently used to declare certain low-level 
rurr-time operations whose names must not conflict with progranuner-defined or language 
system defined names. 

c The object code symbol is the same as link-name, but with one imderscore character (*_’) 

prepended. This is the convention used by the C compiler. 

internal No object code symbol is generated for an internal language interface; this language inter¬ 
face is reserved for special interfaces defined by Meridian Software Systems, Inc. The inter¬ 
nal interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to the pro¬ 
grammer to ensure that calling conventions match and that any necessary dau conversions take place vdien 
calling interface subprograms. 

A pragma iat axfaca may i^rpear within the same declarative part as the subprogram to whidi the pragma 
Int er faca applies, following the subprogram declaration, and prior to the first use of the subprogranL A 
pragma int ar £aca that applies to a subprogram declared in a package specification must occur within the 
same package specification as the subprogram declaration; the pragma intarfaca may not appear in the 
package body in this case. A pragma Intarfaca declaration for either a private or nonprivate sul^rogram 
declaration may .i 4 )pear in the private part of a package specification. 

Pragma intarfaca for library units is not supported. 

Refer to the LRM section 13.9 for additional information about pragma Intarfaca. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that the 
pragma occurs within the same declarative part as the composite type declaration, before any objects or emn- 
ponents of the composite type are declared. 

Note that the dedaradve part restriction means that the type declaration and accompanying pragma pnek 
cannot be s(dit across a package specificadon arxl body. 

The effea of pragma pack is to minimize storage consumption by discrete component types whose ranges 
permit packing. Use of pragma pack does not defeat allocations of alignment storage gaps for some record 
types. Pragma pack does not affect the representations of teal types, pte-defined integer types, and access 
types. 


Meridian Ada Compiler User’s Guide 


150 









Appendix F 


F.13 Pragma Suppress 

n^gma siippxnss is implemented as described in tbe LRM section 11.7, with these differences: 

• Presently, division_chedc and overflow_cfaeck must be suppressed via a compiler 
flag, -fN; pragma stappxnss is ignored for these two numeric di edts. 

• The optional “ON «>*’ parametername notation forpragma Kopprmmm is ignored. 

• The optional second parameterto pragma snpprass is ignored; the pragma always 
^lies to the entire scope in which it appeals. 

F.2 Attributes 


All attributes described in the LRM Appendix A are supponed. 

¥3 Standard I^pes 


Additional standard types are defined in Meridian Ada: 


• by^a__lnt«9«x 

• «hort_iate 9 ar 

• lon 9 __lntag«r 

The standard numeric types are defined as: 

type byta^lntagax la rang# -128 .. 127; 

typa short^lntagar is rang# -32768 .. 32767; 

typa intagax is sanga -2147483648 2147483647; 

typa longjLntagas is xanga -2147483648 .. 2147483647; 

typa float is digits 15 

xanga -1.79769313486231E+308 .. 1.79769313486231Z-I'308; 

typa duxation is dalta 0.0001 xanga -86400.0000 86400.0000; 

F.4 Package System 


The qiecification of package sy at am is: 

paekaga systam is 

typa addxass is naw intagar; 

typa naaaa is (maxcoxy); 

systaa^nasia : constant naioa maxcoxy; 

stoxagajonit : constant :* 8; 
mamoxy_siza : constant 1024; 

— Systamr-Oapandant Namad Nuabars 


min_iat 

max_iat 

maxjdigits 

aax^mantissa 

finajdalta 

tick” 


constant 

constant 

constant 

constant 

constant 

constant 


:« -2147483648; 
2147483647; 
15; 

31; 

:* 2.0 ** (-31); 

1 . 0 ; 


151 


Meridian Ada Compiler User’s Guide 









Appendix F 


— Othnr Systnn-Dnpnndnnt Dnclnxations 
snbtypn priority is iatogor raago 1 .. 20; 

The value of systom.aMUBory^sixo is piesently meaningless. 

F.5 Restrictions on Representation Clauses 
F.5.1 Length Clauses 

A size specification (t' riso) is rejected if fewer bits are specified than can accommodate the type. The 
minimum size of a composite type may be subject to ^>plication of pragma pack. It is pemiitted to spedfy 
precise sizes for unsign^ integer ranges, e.g. 8 for the range 0.. 255. However, because of requirements 
imposed by the Ada language definition, a full 32-bit range of unsigned values, i.e.O.. (2**32)-!, cannot 
be defined, even using a size specification. 

The specification of collection size (t' s t or age_jB Ire) is evaluated at nin-time when the scope of die type 
to wUch the length clause applies is entered, and is therefore subjea to rejection (via storagajarror) 
based on available storage at the time the allocation is made. A collection may include storage used foriun- 
dme administration of die collection, and therefore should not be expected to acemnmodate a ^cific number 
of objects. Fuithennore. certain classes of objects such as unconstrained discriminant array components of 
records may be allocated outside a given collection, so a collection may accommodate more objects dian 
might be expected. 

The specification of storage for a task activation (t'storagajalza) is evaluated at nin-time when 
a task to which the length clause applies is activated, and is therefore subjea to rejection (via at or agajar- 
ror) based on available storage at the time die allocation is made. Storage reserved for a task activi[^n is 
separate from storage needed for any collections defined within a task body. 

Thespecificationofsmallforafixed pointtype(t' aaalljissubjeaonlytorestrictionsdefinedindieLRM 
section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an emuneration type named in an enumeration representation clause must 
be in the range of standard, intagar. 

The value of an internal code may be obtained by applying an appropriate instantiation of un- 
chackadjeonvarslon to an integer type. 

F,53 Record Representation Clauses 

The storage unit ofisa (the at static_simple_expression pan) is given in terms of 8-bit storage units and must 
be even. 

A bit position (the range pan) applied to a discrete type component may be in the range 0. .15,with0 being 
the least significant tnt of a componeiiL A range specification may not specify a size sniaii<>r than can accom* 
modate the componenL A range specification for a component not accommodating Int packing may have 
a higher upper bound as appn^riate(e.g. 0. .31 fora discriminant string component). Refer to the inter¬ 
nal data rei»esentation of a given component in detennining the component size and assigning offsets. 

Components of discrete types for which bit positions are specified may not straddle 16-bit word boundaries. 

The value of an alignmem clause (the optional at mod part) must evaluate to 1,2,4. or 8, and may not be 
smaller than the highest alignment required by any component of the record. 


Meridian Ada Compiler User’s Guide 


152 




AppoidixF 


:> 

R5.4 Address Clauses 

An address clause may be supplied for an object (whether constant or variable) or a task entry, but not for a 
sut^rogram, package, or task unit The meaning of an address clause supplied for a task entry is given in sec¬ 
tion F.5,5. 

An address expression for an object is a 32-bit memory address of ^pe syvtom. address. 

F.5.5 Interrupts 

A task entry’s address clause can be used to associiue the entry with a UNIX signaL Values in the range 0. .31 
are meaningful, and represent the signals corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversiotL 

F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependent compements. 

F.7 Unchecked Conversions 

There are no restrictions on the use of unchadcadjeonvttxslon. Conversions between objects whose 
sizes do not conform may result in storage areas with^undefined valties. 

F.8 Input-Output Packages 

A summary of the implementation-dependent input-ou^ut characteristics is: 

• Incallstoopen and exeat •.the/omi parameter must be the emp^ string (the de¬ 
fault value). 

• More than one internal file can be associated with a single external file for reading 
oidy, For writing, only one internal file may be associated with an external file; Do 
not use xeset to get around this rule. 

• Temporary sequential and direa files are ^ven names. Temporary files are deleted 
when they are closed. 

• File I/O is buffered; text files associated with terminal devices are line-buffered. 

• The packages saquantlal^lo and dlx«et_JLo carmot be instantiated with un¬ 
constrained composite types ot record types widi discriminants Midiout defaults. 

F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


153 


Meridian Ada Compiler User’s Guide 



