Army Research Laboratory 


Reading, Writing, and Analyzing ZDATA Files Using C++ 



by Robert J. Yager 



ARL-TN-541 


October 2013 


Approved for public release; distribution is unlimited. 





NOTICES 

Disclaimers 

The findings in this report are not to be construed as an official Department of the Army position unless 
so designated by other authorized documents. 

Citation of manufacturer’s or trade names does not constitute an official endorsement or approval of the 
use thereof. 


Destroy this report when it is no longer needed. Do not return it to the originator. 



Army Research Laboratory 

Aberdeen Proving Ground, MD 21005-5066 


ARL-TN-541 


October 2013 


Reading, Writing, and Analyzing ZDATA Files Using C++ 


Robert J. Yager 

Weapons and Materials Research Directorate, ARL 


Approved for public release; distribution is unlimited. 








REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-0188 


Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering 
and maintaining the data needed, and completing and reviewing the collection information. Send comments regarding this burden estimate or any other aspect of this collection of information, 
including suggestions for reducing the burden, to Department of Defense, Washington Headquarters Services, Directorate for Information Operations and Reports (0704-0188), 1215 Jefferson 
Davis Highway, Suite 1204, Arlington, VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to any penalty for failing to 
comply with a collection of information if it does not display a currently valid OMB control number. 

PLEASE DO NOT RETURN YOUR FORM TO THE ABOVE ADDRESS. 


12. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution is unlimited. 

13. SUPPLEMENTARY NOTES 

14. ABSTRACT 

ZDATA files can be used to store information about the fragments produced by fragmentation weapons. This report presents a 
set of functions, written in C++, that can be used to read, write, and analyze ZDATA files. 


15. SUBJECT TERMS 

ZDATA, C++, analyze, read, write 

17. LIMITATION 18. NUMBER 
OF ABSTRACT OF PAGES 

UU _ 20 

Standard Form 298 (Rev. 8/98) 

Prescribed by ANSI Std. Z39.18 


19a. NAME OF RESPONSIBLE PERSON 

Robert J. Yager 

19b. TELEPHONE NUMBER (Include area code) 

410-278-6689 


16. SECURITY CLASSIFICATION OF: 


a. REPORT 

b. ABSTRACT 

C. THIS PAGE 

Unclassified 

Unclassified 

Unclassified 


1. REPORT DATE (DD-MM-YYYY) 

2. REPORT TYPE 

October 2013 

Final 


4. TITLE AND SUBTITLE 

Reading, Writing, and Analyzing ZDATA Files Using C++ 


6. AUTHOR(S) 

Robert J. Yager 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

U.S. Army Research Laboratory 

ATTN: RDRL-WML-A 

Aberdeen Proving Ground, MD 21005-5066 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 


3. DATES COVERED (From - To) 

June 2012-March 2013 

5a. CONTRACT NUMBER 


5b. GRANT NUMBER 


5c. PROGRAM ELEMENT NUMBER 


5d. PROJECT NUMBER 

AH80 

5e. TASK NUMBER 


5f. WORK UNIT NUMBER 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

ARL-TN-541 


10. SPONSOR/MONITOR’S ACRONYM(S) 


11. SPONSOR/MONITOR'S REPORT 
NUMBER(S) 


11 



































Contents 


Acknowledgments iv 

1. Introduction 1 

2. ZDATA File Format 1 

3. ZDATA Structs 3 

4. Creating ZDATA Files 4 

4.1 ZdataToStringO Function.4 

4.2 Example: Creating a Sample ZDATA File.5 

5. Reading ZDATA Files 6 

5.1 StringToZdata() Function.6 

5.2 Example: Reading a Sample ZDATA File.7 

6. ZSTATS Structs 8 

7. Analyzing ZDATA Files 9 

7.1 AnalyzeZdata() Function.9 

7.2 Example: Analyzing a Sample ZDATA File.9 

8. Summary 10 

Appendix. yZdata Summary 11 


iii 


Distribution List 


13 










Acknowledgments 


The author would like to thank Mary Arthur of the U.S. Army Research Laboratory’s Weapons 
and Materials Research Directorate. Ms. Arthur provided technical and editorial recommendations 
that improved the quality of this report. 




1. Introduction 


ZDATA files can be used to store information about the fragments produced by fragmentation 
weapons. This report presents a set of functions, written in C++, that can be used to read, write, 
and analyze ZDATA files. Functions from the ylo namespace 1 are used in examples. A summary 
sheet is provided at the end of this report. It presents the yZdata namespace, which contains the 
two structs and three functions that are described in this report. 


2. ZDATA File Format 


With respect to ZDATA files, fragmentation weapons, and thus their fragment patterns, are 
assumed to be axially symmetric. Fragment characteristics are grouped by angular zones (see 
figure 1 inset). Within each angular zone, initial fragment speeds, as well as mass and count 
distributions, are documented. Figure 1 presents an annotated sample ZDATA file that is in 
standard format. 2 


1 Yager. R. J. Reading, Writing, and Parsing Text Files Using C++; ARL-TN-545; U.S. Army Research Laboratory: 
Aberdeen Proving Ground, MD, June 2013. 

O 

“Joint Technical Coordinating Group for Munitions Effectiveness. Computer Program for General Full Spray Personnel 
MAE Computations: Volume 1 - Users Manual, 61 JTCG/ME-79-6-1; U.S. Army Materiel Systems Analysis Activity: Aberdeen 
Proving Ground, MD, April 1991. 


1 






| lower, upper, and midpoint zone angles (degrees) | 

jdr 


| initial fragment speeds for lower, upper, and midpoint angles (ft/s) | 


ZDATA 


|o . oo o| 


/500 


|15 . 000 |300Q.25ofpll2.717| |3 0 38 . 661| 


80.874 

Xl . 987 

89.596 

74 . 660 

85.894 

51.353 

1.498 \ 


36.445 

/ 16.590 

44.569 

* 





5.850 / 

3.503 

8.228 

1 .7/1 

7.105 

3.040 

0 . 914 


1 .4]/ 

9.885 

1.191 







22.500 

60.176 

30.000 

16.6 
53^35 

/COO .934 
45.079 

3 0 0>>s782 
5.7^ 

3075.576 

78.332 ! 



number of angular 
zones (50 max) 

number of mass groups in this 
particular angular zone (25 Max) 



95.590 






7.267 


average mass of fragments in 


30 

000 

37 

500 

45 

000 

3092 

416 

3047 

066 

3172 

448 


10 

20 

960 

84 

365 

99 

969 

39 

244 

29 

728 

2 

374 

9 

262 

5 

622 

91 

879 

27 

290 









7 

797 

9 

968 

6 

115 

2 

662 

8 

401 

3 

759 

6 

772 

0 

088 

2 

759 

5 

879 









45 

000 

52 

500 

60 

000 

3138 

237 

3167 

522 

3145 

299 


10 

48 

494 

74 

374 

45 

796 

74 

444 

59 

905 

73 

501 

57 

241 

15 

155 

42 

515 

51 

711 









2 

054 

4 

685 

9 

492 

1 

083 

3 

852 

6 

090 

3 

613 

2 

251 

8 

029 

9 

900 










Warheads (and thus fragment 
distributions) are assumed to be 
axially symmetric. 



243 

53.258 

16.019 





532 

1.138 

7.522 

5.434 

4.367 

6.962 

4.367 

779 

6.287 

5.041 







| intermediate zones have been removed 

] 


000 

172.500 

180 . 000 

3122.410 

3124 . 076 

3138.224 

10 

453 

57.604 

91.156 

72.768 

66.778 

31.501 

30.583 

855 

85.122 

15 .488 





491 

8 . 677 

6.147 

0.432 

9.765 

5.692 

1.739 

690 

7.443 

3.269 






"j shape factor (ft 2 gr 1/3 /lb), used for computing drag | 


different 
angular zones 
(color 

discriminated) 


Figure 1. Annotated sample ZDATA file with inset visual of an angular zone. 


2 























































3. ZDATA Structs 


ZDATA structs can be used to store the information contained in ZDATA files. They can be 
created and populated either directly or through the use of the StringToZdata() function (see 
section 5.1 for more information). 

The user is free to store the values of a ZDATA struct in whatever units he/she chooses. If a 
ZDATA struct is created using the StringToZdata() function, the units from the source character 
array will be retained. 

ZDATA-Struct Code 


Struct ZDATA{//<=====STORES THE INFORMATION CONTAINED IN A STANDARD ZDATA FILE 

std: :vector<double>AL;//< .LOWER ANGLES [ANGLE INDEX] 

std: :vector<double>AM;//< ..-.MIDPOINT ANGLES [ANGLE INDEX] 

std: :vector<double>AU;//< .UPPER ANGLES [ANGLE INDEX] 

std: :vector<double>VL;//< .SPEEDS FOR LOWER ANGLES [ANGLE INDEX] 

std:: vector<double>VM; //<.SPEEDS FOR MIDPOINT ANGLES [ANGLE INDEX] 

std: :vector<double>VU;//< .SPEEDS FOR UPPER ANGLES [ANGLE INDEX] 

std::vector<std:: vector<double> >M;//--MASS VALUES [ANGLE INDEX][MASS INDEX] 

std::vector<std:: vector<double> >N;//< .COUNTS [ANGLE INDEX][MASS INDEX] 

double sf; //<.SHAPE FACTOR (USED FOR COMPUTING DRAG) 

* I/ <v/v/viYAGENAUT^)GF1AXL* COFl /v,vjfvrurwfv,v,>jrv,v,v,v,>j,v,Nj,v,v,v/v,v,v,v,v,v,v LAST^LJPDATED' v, 16SEP201 


ZDATA-Struct Members 

AL AL stores all of the lower-angle values for a ZDATA file (one per angular bin). 

AM AM stores all of the midpoint-angle values for a ZDATA file (one per angular 

bin). 

AU AU stores all of the upper-angle values for a ZDATA file (one per angular bin). 

VL VL stores all of the speeds that are associated with the lower-angle values. 

VM VM stores all of the speeds that are associated with the midpoint-angle values. 

YU VU stores all of the speeds that are associated with the upper-angle values. 


3 















M M stores all of the fragment-mass values from a ZDATA file, indexed first by 

angular bin, then by mass bin. The number of mass bins per angular bin can 
vary between angular bins. 

N N stores all of the fragment-count values from a ZDATA file, indexed first by 

angular bin, then by mass bin. The number of mass bins per angular bin can 
vary between angular bins. Since the fragment-count values in a ZDATA file 
represent expected values, they are not required to be integer values. 

sf sf stores the shape factor for a ZDATA file. 


4. Creating ZDATA Files 


Creating ZDATA files using the yZdata namespace is a two-step process. First, the 
ZdataToStringO function is used to create a character array from information that is stored in a 
ZDATA struct. Once the character array has been created, it can be written to a file in a variety 
of ways. The example included at the end of this section uses the WriteTextFile() function from 
the ylo namespace. 

4.1 ZdataToStringO Function 

The ZdataToStringO function creates a character array that contains the information contained in 
a ZDATA struct. Character arrays that are created using the ZdataToStringO function retain the 
units from the source ZDATA struct. 

Note that the ZdataToStringO function uses the “new” command to allocate memory for the 
character array that is pointed to by the return value. Thus, to avoid memory leaks, each use of 
the ZdataToStringO function should be accompanied by a use of the “delete[]” operator. 


4 





ZdataToStringO Code 


inline char*ZdataToString(//<=========CREATES A CHAR ARRAY FROM A ZDATA STRUCT 

const ZDATA&Z, / /<.-.-A ZDATA STRUCT 

int d=3){//<-THE NUMBER OF DIGITS AFTER THE DECIMAL POINT FOR NON INTEGERS 
int m=Z.M.size(),1=32; /*<-*/for(int i=0;i<m;++i)l+=73+142*Z.M[i].size()/7; 
char*s=new char[l+l]; 

s+=sprintf(s, "ZDATA %10d\n”,m);// .header line 

for (int i=0jn=Z.M[0].size();i<m;++ijn=Z.M[i].size()){ 

s+=sprintf(Sj " %9.*f %9.*f %9.*f %9.*f %9.*f %9.*f%10d\n" J d J Z.AL[i] ,d, 

Z.AM[i],d,Z.AU[i],d,Z.VL[i],d,Z.VM[i],d,Z.VU[i],Z.M[i].size()); 
for(int j=0;j<n;++j) 

s+=sprintf(s, " %9.*f%s",d,Z.M[i] [j],j%7==6||j==n -l?"\n" : "" ); //_masses 

for(int j=0;j<n;++j) 

s+=sprintf(s, " %9.*f%s",d,Z.N[i] [j],j%7==6||j==n -l?"\n" ..counts 

s+=sprintf (s, " %9.*f \n",d,Z. sf); //.shape factor 

return s-1;// .note that s points to newly allocated memory 

}// YAGENAUT@GMAIL.COM-LAST~UPDATED~16SEP2013- 


ZdataToStringO Parameters 

Z Z specifies a ZDATA struct. 

d d specifies the number of digits to the right of the decimal for non-integer 

values in the output character array. The default value is 3. 

ZdataToStringO Return Value 

The ZdataToStringO function returns a pointer to a character array that contains the information 
from the input ZDATA struct. 

4.2 Example: Creating a Sample ZDATA File 

The following example was used to create the sample file “zdata.txt,” which is presented in 
figure 1. The example begins by creating a ZDATA struct that contains randomly drawn masses, 
counts, and speeds. The example then uses the ZdataToStringO function to create a character 
array that contains the information from the newly created ZDATA struct. The WriteTextFile() 
function, borrowed from the ylo namespace, is then used to create the file “zdata.txt.” Finally, 
the “delete[]” operator is used to deallocate the memory that was allocated by the 
ZdataToStringO function. 


5 









#include <cstdlib>// .rand(),RAND_MAX 

#include "y_zdata.h ''// .yZdata,<vector> 

#include "y_io.h"// .ylo 

int main(){ 

using std::vector; 

int m=12,n=10; //number of angular bins and number of mass bins per angular bin 
yZdata::ZDATA Z={vector<double>(m) , vector<double>(m) , vector<double>(m) , //setup 
vector<double>(m) , vector<double>(m) , vector<double>(m) , // a 

vector<vector<double> >(mjVector<double>(n)),// ZDATA 

vector<vector<double> >(m, vector<double>(n) ),.5}; // struct 

for(int i=0;i<m;++i){// .populate the ZDATA struct 

Z.AL[i]=i*180./m,Z.AM[i]=(i+.5)*180./m,Z.AU[i]=(i+l)*180./m; 

Z .VL[i] =3000+rand()*200. /RAND_MAX; //.set upper., middle, & lower 

Z.VM[i]=3000+rand()*200./RAND_MAX; // speeds to random values 

Z.VU[i]=3000+rand()*200./RAND_MAX; // between 3000 and 3200 

for (int j=0;j<n;++j){ 

Z.M[i][j]=rand()*100./RAND_MAX; //.set masses to random values 0 to 100 

Z.N[i][j]=rand()*10./RAND_MAX;}}// .set counts to random values 0 to 10 

char* s=yZdata::ZdataToString(Z,3); 
ylo::WriteTextFile( "zdata.txt", s); 
delete[ ]s; 

^ j / iv/vivm/viviY AG E N AUT ^GMA XL* C 01^°^ ^ ^ ^ ~ ^ nu rv r«j ^ rv rv rv /%-* rv rv IV/V rv LAST ^ LJ P DAT E D ^ 2.GSEP201. 


5. Reading ZDATA Files 


ZDATA files can be read and interpreted by first reading a file into a character array and then 
using the StringToZdata() function to create a ZDATA struct. 

5.1 StringToZdata() Function 

The StringToZdata() function uses a character array that contains text formatted as shown in 
figure 1 to create a ZDATA struct. The input character array is modified in the process. ZDATA 
structs that are created using the StringToZdata() function retain the units from the source 
ZDATA character array. 

The formatting standard for ZDATA files allows for cases where there is no white space between 
numbers (the numbers are column aligned). However, the StringToZdata() function can only 
correctly read files that have white space between numbers. Thus, if the user wishes to use the 
StringToZdata() function to read a ZDATA character array that does not have white space 
between numbers, the user will be responsible for inserting white spaces. 


6 












StringToZdataQ Code 


inline ZDATA StringToZdata(//<======CREATES A ZDATA STRUCT FROM A ZDATA STRING 

char*s){//< .-A POINTER TO A STRING READ FROM A ZDATA FILE 

char d[6] = "\n\r\f \t";// .delimiting characters used in ZDATA file 

strtok(Sjd); 

int m=atoi(strtok(NULL,d)); //.number of angular bins 

ZDATA Z={std:: vector<double> (m),std: :vector<double>(m), 

std:: vector<double>(m) ,std: :vector<double>(m),std: : vector<double>(m) , 
std: :vector<double>(m),std: :vector<std:: vector<double> >(m), 
std::vector<std:: vector<double> >(m)}; 
for(int i=0;i<m;++i){ 

Z.AL[i]=atof(strtok(NULL,d))jZ.AM[i]=atof(strtok(NULLjd)), 

Z.AU[i]=atof(strtok(NULL,d)),Z.VL[i]=atof(strtok(NULL J d)), 

Z.VM[i]=atof(strtok(NULL,d)),Z.VU[i]=atof(strtok(NULL,d)); 

int n=atoi(strtok(NULLjd));//. ..number of mass bins in the jth angular bin 

for (int j=0;j<n;++j)Z.M[i].push_back(atof(strtok(NULL J d))); //.masses 

for (int j=0;j<n;++j)Z.N[i].push_back(atof(strtok(NULL,d)));}// .counts 

Z.sf=atof(strtok(NULL,d)); //.shape factor 

return Z; 

^ j j rw/v/vru y AG E N AU T ^GMA XL* C ON Ajfwrwfvrw,v,v,Njrvrw,vfv,Nj,vrw,v,v,Njrwrvrw,vrv,Njrw LAST ^ LJ P DAT ED^lGSEP^Ol 3''"'"'"'"'"'' 


StringToZdata() Parameters 

s s points to a character array that contains the text that will be used to create a 

ZDATA struct. 

StringToZdata() Return Value 

The StringToZdata() function returns a ZDATA struct. 

5.2 Example: Reading a Sample ZDATA File 

The following example first uses the ReadTextFile() function from the ylo namespace to read the 
file “zdata.txt,” presented in figure 1, into a character array. The character array is then used to 
create a ZDATA struct using the StringToZdata() function. Finally, the first five counts from the 
first angular bin are printed to the screen. 


#include "y_zdata . h” //.yZdata, <cstdio>{printf()} 

#include "y_io.h"// .ylo 

int main(){ 

char*s=yIo: :ReadTextFile( "zdata.txt" ); 
yZdata::ZDATA Z=yZdata::StringToZdata(s); 
for(int j=0;j<4;++j)printf( "%f , ",Z.N[0][j]); 
printf ("%f\n" ,Z.N[0][4]); 
delete[ ]s; 

^ j j /v/v/ivfv/vivY AG E N AUT (o)GMA XL* G 0M ru,v,v,v,>j,v,v,,vru/vrv,v,v,>j/vfv,v,Nj/vru,vrvrw,v,v LAST ^ LJ P DAT E D ^ 1GSEP2013 


OUTPUT: 

8.087400 , 4.798700 , 8.959600 , 7.466000 , 8.589400 


7 















6. ZSTATS Structs 


ZSTATS structs can be used to hold a set of variables that summarizes the contents of a ZDATA 
file. The AnalyzeZdata() function can be used to create a ZSTATS struct (see section 7.1 for 
more information). Note that the user is free to store the values of a ZSTATS struct in whatever 
units he/she chooses. If a ZSTATS struct is created using the AnalyzeZdata() function, then the 
units from the source ZDATA struct will be retained. 

ZSTATS Struct Code 


struct ZSTATS{//<==============A SET OF VARIABLES THAT SUMMARIZES A ZDATA FILE 

double M; //<.TOTAL MASS OF FRAGMENTS 

double N; //<.TOTAL NUMBER OF FRAGMENTS 

double KE; //<.TOTAL FRAGMENT ENERGY 

double m_avg; //<.AVERAGE MASS OF FRAGMENTS 

double v_avg; //<.AVERAGE FRAGMENT SPEED 

^ * 11 YAG E N AU T^)GMA IL . rnM |viviviv| N" N|iviviviviv, '' ,v,uiviiviv,> ' iv,uft " viiviviv I IPDAT FD^I 


ZSTATS Struct Members 


M 


M is the total mass of all of the fragments that are specified in a ZDATA file. M 
is calculated by summing the product of count and mass values for all mass bins 
and all angular bins. 


N 


N is the total number of fragments that are specified in a ZDATA file. Since the 
counts in a ZDATA file represent expected values, N is not required to be an 
integer value. N is calculated by summing all counts for all mass bins and all 
angular bins. 


KE 


KE is the total fragment kinetic energy for an entire ZDATA file. For a given 
angular bin, the average of the squares of the upper, midpoint, and lower speeds 
is used to calculate KE. 


m_avg m_avg is the average fragment mass for an entire ZDATA file. m_avg is 

calculated by dividing M by N. 


v_avg v_avg represents a weighted average fragment speed for an entire ZDATA file. 

v_avg is calculated using the equation KE=.5Mv_avg 2 . 


8 












7. Analyzing ZDATA Files 


7.1 AnalyzeZdataO Function 

The AnalyzeZdataO function can be used to get an overview of the general characteristics of the 
fragments that are specified in ZDATA structs. The parameters that are calculated using the 
AnalyzeZdataFile() function are far from exhaustive; rather, they are meant to serve as a core set 
of descriptive values. Users may desire additional parameters, such as standard deviations, 
minimum and maximum values, median values, etc. Although the AnalyzeZdataO function does 
not calculate those parameters, its code can be used as a template for writing custom functions 
that further analyze the data found in ZDATA structs. 

AnalyzeZdataO Code 

inline ZSTATS AnalyzeZdata(//<======CREATE A ZSTATS STRUCT FROM A ZDATA STRUCT 

const ZDATA&Z){//< .CREATE USING ReadZdataFile() 

ZSTATS S={0,0,0,0,0}; //.initialize values 

for(int i=0 J m=Z.M.size();i<m;++i){// .loop through angular zones 

double v_avg_2=(Z.VL[i]*Z.VL[i]+Z.VM[i]*Z.VM[i]+Z.VU[i]*Z.VU[i])/3; 

for(int j=0, n=Z.M[i]. size(); j<n;++j){// .loop through mass bins 

S.N+=Z.N[i][j] ;// .total fragment count 

S.M+=Z.N[i] [ j]*Z.M[i] [j];// .total fragment mass 

S.KE+=.5*Z.M[i][j]*Z.N[i][j]*v_avg_2;}}// .total kinetic energy 

S.m_avg=S.M/S.N;// .average fragment mass 

S.v_avg=sqrt(2*S.KE/S.M);// .average fragment speed 

return S; 

J j I y AG E N AUT @GMA XL* G 0N rv,v,Njrv,v,,v,v,Njrwfv,v,v,Nj,vfv,v,,vrv,vfvrv,v,vrw,v LAST ^ LJ P DAT ED^lGSEP^Ol 3 


AnalyzeZdataO Parameters 
Z Z specifies a ZDATA struct. 

AnalyzeZdataO Return Value 

The AnalyzeZdataO function returns a ZSTATS struct. 

7.2 Example: Analyzing a Sample ZDATA File 

The following example first uses the ReadTextFile() function from the ylo namespace to read the 
file “zdata.txt,” presented in figure 1, into a character array. The resulting character array is then 
used to create a ZDATA struct using the StringToZdata() function. Next, the newly created 
ZDATA struct is used to create a ZSTATS struct using the AnalyzeZdataO function. Finally, the 
contents of the ZSTATS struct are printed to the screen. 


9 
















#include "y_zdata. h” //.yZdata, <cstdio>{printf()} 

#include "y_io.h"// .ylo 

int main(){ 

char*s=yIo: :ReadTextFile( "zdata.txt" ); 
yZdata::ZDATA Z=yZdata::StringToZdata(s); 
yZdata::ZSTATS S=yZdata::AnalyzeZdata(Z); 

printf("M=%f grains\nN=%f\nKE=%f grains*feet A 2/second A 2\nm_avg=%f grains\n" 
"v_avg=%f feet/second \n",S.M J S.N J S.KE J S.m_avg J S.v_avg); 
delete[ ]s; 

^ I j »v/viv<nhv»\/Y AG E N AUT ^)GMA XL* C LAS T^U P DAT ED ,v 16SEP2013 iv/vivfv/viv 


OUTPUT: 


M=29738.329240 grains 
N=581.116400 

KE=142875248760.490690 grains*feet A 2/second A 2 
m_avg=51.174479 grains 
v_avg=3099.810999 feet/second 


8. Summary 


A summary sheet is provided as an appendix in this report. It presents the yZdata namespace, 
which contains the two structs and three functions that are described in this report. Also included 
is an example that incorporates the three examples presented in this report. 


10 









11 




yZdata Summary 


y_zdata.h 


#ifndef Y_ZDATA_GUARD// See Yager, R. D. "Reading, Writing, and Anaylzing 

ftdefine Y_ZDATA_GUARD// ZDATA Files Using C++" 

ftinclude <cmath>// .sqrt() 

#include <cstdio>// .sprintfQ 

#include <cstdlib>// .atoi(),atof() 

#include <cstring>// .strtok() 

#include <vector>// .vector 

namespace yZdata{// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
struct ZDATA{//<=====STORES THE INFORMATION CONTAINED IN A STANDARD ZDATA FILE 

std: :vector<double>AL;//<- LOWER ANGLES [ANGLE INDEX] 

std: :vector<double>AM;//<- MIDPOINT ANGLES [ANGLE INDEX] 

std: :vector<double>AU;//<- UPPER ANGLES [ANGLE INDEX] 

std: : vector<double>VL;//<- SPEEDS FOR LOWER ANGLES [ANGLE INDEX] 

std: :vector<double>VM;//<- SPEEDS FOR MIDPOINT ANGLES [ANGLE INDEX] 

std:: vector<double>VU;//<- SPEEDS FOR UPPER ANGLES [ANGLE INDEX] 

std::vector<std:: vector<double> >M;//--MASS VALUES [ANGLE INDEX][MASS INDEX] 

std::vector<std: :vector<double> >N;//<- COUNTS [ANGLE INDEX][MASS INDEX] 

double sf;//<- SHAPE FACTOR (USED FOR COMPUTING DRAG) 

};// -YAGENAUT@GMAIL.COM-LAST-UPDATED-16SEP2013- 

struct £STATg{//<==============A SET OF VARIABLES THAT SUMMARIZES A ZDATA FILE 

double M;//<-- TOTAL MASS OF FRAGMENTS 

double N;//<- TOTAL NUMBER OF FRAGMENTS 

double KE;//<- TOTAL FRAGMENT ENERGY 

double m_avg; //<-AVERAGE MASS OF FRAGMENTS 

double v_avg; //<-AVERAGE FRAGMENT SPEED 

};// -YAGEN AUT@GMAIL.COM -LAST~UPDATED~16SEP2013- 

inline char*ZdataToString(//<=========CREATES A CHAR ARRAY FROM A ZDATA STRUCT 

const ZDATA&Z, //<-----A ZDATA STRUCT 

int d=3){//<-THE NUMBER OF DIGITS AFTER THE DECIMAL POINT FOR NON INTEGERS 
int m=Z.M.size(),1=32; /*<-*/f or (int i=0;i<m;++i)l+=73+142*Z.M[i].size()/7; 
char*s=new char[l+l]; 

s+=sprintf(s, "ZDATA %10d\n",m);// .header line 

for(int i=0,n=Z.M[0].size();i<m;++i,n=Z.M[i].size()){ 

s+=sprintf(s," %9.*f %9.*f %9.*f %9.*f %9.*f %9. *f%10d\n",d,Z.AL[i],d, 

Z.AM[i],d,Z.AU[i],d,Z.VL[i],d,Z.VM[i],d,Z.VU[i],Z.M[i].size()); 
for(int j=0;j<n;++j) 

s+=sprintf(s, " %9. *f%s",d,Z.M[i][j],j%7==6||j==n-l?"\n" .masses 
for(int j=0;j<n;++j) 

s+=sprintf(s, " %9. *f%s",d,Z.N[i][j],j%7==6||j==n-l?"\n" counts 

s+=sprintf(s, " %9.*f\n",d,Z.sf);// .shape factor 

return s-1;// .note that s points to newly allocated memory 

}// -YAGENAUT@GMAIL.COM~-LAST-UPDATED-16SEP2013- 

inline ZDATA StringTo Zdata(//<======CREATES A ZDATA STRUCT FROM A ZDATA STRING 

char*s){//<.. A POINTER TO A STRING READ FROM A ZDATA FILE 

char d[6]="\n\r\f \t";// .delimiting characters used in ZDATA file 

strtok(s,d); 

int m=atoi(strtok(NULL,d));// .number of angular bins 

ZDATA Z={std:: vector<double>(m) ,std: :vector<double>(m). 


std 


: vector<double>(m), std:: vector<double>(m), std: :vector<double>(m) , 


std: :vector<double>(m),std: :vector<std:: vector<double> >(m), 
std::vector<std:: vector<double> >(m)}; 
for(int i=0;i<m;++i){ 

Z.AL[i]=atof(strtok(NULL,d)),Z.AM[i]=atof(strtok(NULLjd)), 

Z.AU[i]=atof(strtok(NULL,d)),Z.VL[i]=atof(strtok(NULL,d)), 

Z.VM[i]=atof(strtok(NULL,d)),Z.VU[i]=atof(strtok(NULL,d)); 

int n=atoi(strtok(NULL,d));//. ..number of mass bins in the jth angular bin 

for (int j=0;j<n;++j)Z.M[i].push_back(atof(strtok(NULL,d))); //.masses 

for (int j=0;j<n;++j)Z.N[i].push_back(atof(strtok(NULL,d)));}// .counts 

Z.sf=atof(strtok(NULL,d)); //.shape factor 

return Z; 

}// -YAGENAUT@GMAIL.COM-LAST~UPDATED~16SEP2013- 


inline ZSTATS AnalyzeZ data(//<======CREATE A ZSTATS STRUCT FROM A ZDATA STRUCT 

const ZDATA&Z){// <-CREATE USING ReadZdataFile() 

ZSTATS S={0,0,0,0,0}; //.initialize values 

for(int i=0,m=Z.M.size();i<m;++i){// .loop through angular zones 

double v_avg_2=(Z.VL[i]*Z.VL[i]+Z.VM[i]*Z.VM[i]+Z.VU[i]*Z.VU[i])/3; 

for(int j=0,n=Z.M[i] .size(); j<n;++j){// .loop through mass bins 

S.N+=Z.N[i] [j];// .total fragment count 

S.M+=Z.N[i] [j]*Z.M[i] [j];// .total fragment mass 

S.KE+=.5*Z.M[i][j]*Z.N[i][j]*v_avg_2;}}// .total kinetic energy 

S.m_avg=S.M/S.N;// .average fragment mass 

S.v_avg=sqrt(2*S.KE/S.M);// .average fragment speed 

return S; 

}// -YAGENAUT@GMAIL.COM-LAST~UPDATED~16SEP2013- 

}/ /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

#endif 


Example 


#include <cstdlib>// .rand(), RAND_MAX 

#include "y_zdata.h"// .yZdata,<vector> 

#include "y_io.h"// .ylo 

int main(){ 
using std::vector; 

int m=12,n=10; //number of angular bins and number of mass bins per angular bin 
yZdata::ZDATA Z={vector<double>(m),vector<double>(m),vector<double>(m), //setup 
vector<double>(m),vector<double>(m),vector<double>(m), // a 

vector<vector<double> >(m,vector<double>(n)),// ZDATA 

vector<vector<double> >(m,vector<double>(n)),.5};// struct 

for(int i=0;i<m;++i){// .populate the ZDATA struct 

Z.AL[i]=i*180./m,Z.AM[i]=(i+.5)*180./m,Z.AU[i]=(i+l)*180./m; 

Z.VL[i]=3000+rand()*200./RAND_MAX;// .set upper, middle, & lower 

Z.VM[i]=3000+rand()*200./RAND_MAX;// speeds to random values 

Z.VU[i]=3000+rand()*200./RAND_MAX; // between 3000 and 3200 

for(int j=0;j<n;++j){ 

Z.M[i][j]=rand()*100./RAND_MAX; //.set masses to random values 0 to 100 

Z.N[i][j]=rand()*10./RAND_MAX;}}// .set counts to random values 0 to 10 

char*s=yZdata::ZdataToString(Z,3); 
ylo::WriteTextFile( "zdata.txt", s); 
delete[]s; 

char*s2=yIo::ReadTextFile( "zdata.txt" ); 
ylo::WriteTextFile( "zdata2.txt" ,s); 
yZdata::ZDATA Z2=yZdata::StringToZdata(s2); 
yZdata::ZSTATS S=yZdata::AnalyzeZdata(Z2); 

printf("M=%f grains\nN=%f\nKE=%f grains*feet A 2/second A s\nm_avg=%f grains\n" 

"v_avg=%f feet/second\n" ,S.M,S.N,S.KE,S.m_avg,S.v_avg); 
delete[ ]s2; 
return 0; 

} II -YAG E NAUT@GMAI L. COM-LAST-U PDAT ED-16SE P 2013- 


Example Output 


M=29738.329240 grains 
N=581.116400 

KE=142875248760.490690 grains*feet A 2/second A 2 
m_avg=51.174479 grains 
v_avg=3099.810999 feet/second 

































































NO. OF 

COPIES ORGANIZATION 


1 DEFENSE TECHNICAL 
(PDF) INFORMATION CTR 
DTIC OCA 

1 DIRECTOR 

(PDF) US ARMY RESEARCH LAB 
IMAL HRA 

1 DIRECTOR 

(PDF) US ARMY RESEARCH LAB 
RDRL CIO LL 

1 GOVT PRINTG OFC 
(PDF) AMALHOTRA 


ABERDEEN PROVING GROUND 


1 DIR USARL 
(PDF) RDRL WML A 
R YAGER 


13 



Intentionally left blank. 


14 



