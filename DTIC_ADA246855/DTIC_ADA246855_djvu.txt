NAVAL POSTGRADUATE SCHOOL 
Monterey, California 



Af^noved for public release; distribution is unlimited. 


92 2 28 008 


92-05192 

lllllllll 





UNCLASSIFIED 

SECUMfV eUMSnCATKM OF IMS MGE 


I m: i 4 : I *--1 IJ:! I r.VS-i I a I i 


REPORT DOCUMENTATION PAGE 


UNCLASSIFIED 





1: 11 j I 7AVJ ! 1 ■ I 4;' 


Approved for public release; 
distribution is unlimited 





uter 



Naval Postgraduate School 


6c. ADDRESS (d^. SUM, and ZIP Code) 

Monterey, CA 93943-5000 


(UappScabla) 

cs 



I an: M TI a r, >: ^ 1 1 («:: 11: [cT»:: if : i i [»:: 


Naval Postgraduate School 


7b. ADDRESS (Chy. Sme. and 20* Cede) 

Monterey, CA 93943-5000 



11. TITLE (tnciud9 Security CiMttHiGtIhn) 

A GRAPHICAL USER INTERFACE FOR THE LOW COST COMBAT DIRECTION SYSTEM 





views expressed in this thesis are 
policy or positimi of the Department of Defense at die United States GovemmenL 


notretiect 


RlI'rl'tliiRni 


C06ATI COOES 


SUB-QROUP 


18. SuBXCilZPMBlCcndnueenfmmeeeneaeeeaiyendidenUybyeleeknuntee^ 

Combat Direction Center, Software Enguieering, User Interface, Graphics 


19. ABSTRACT (Contnua on immaeKnaeeeeaa end IdentfytyUeeK number) 

A technology vacuum exists in the small combatant and support ship units of the U.S. Navy. Newer combatant 
vessels are typically outfitted with state of the art Combat Dir^tm and information processing systems, while didr 
older sisters in the fleet are still using manual methods to do the same tasks. 

These shipboard tasks, which include contact management, moving geometry calculations, intelligrace cmnpila- 
tkxi, area plotting and navigation, are all pofonned manually on-board older fleet units. These manual methods are 
extremely slow, are subject to potentially disastrous er ror s and require intensive training to petftmn correcdy. The 
current level of conqNiter technology allows die automation of these tasks, providing an instant solution to the user, 
with afar smaller enor rate than could be expected of manual methods. 

The prime objective of diis thesis. The L^ Cost Combat Direction System (LCCDS) User Interface, is to define 
the frictional gods, constraints and general system design of a graphical user interface suioble for use aboard U.S. 
Navy votscls. Particular emphasis is placed on the design and inqilementation of a gnqihical display system, in die 
Ada programming language, necessary to interface the user to the capabilities of the LCCDS as a whole. 




OOFOmi147S,6«MM) 


83 APR adHion nMqr b* UMd (Ml fMmM 
AN ollwr GdHions ira obtotoii 




UNCLASSIFIED 






























Af^roved for public release; distribution is unlimited 


A GRAPHICAL USER INTERFACE 
FOR 

THE LOW COST COMBAT DIRECTION SYSTEM 


by 

Michael Grey Stockwell 
Lieutenant, USN 
B.S.. ChiqMnan College, 1983 


Submitted in partial fiilfillmMit of the 
requirements for the degree of 


MASTER OF SCIENCE IN COMPUTER SCIENCE 


fimnthe 

NAVAL POSTGRADUATE SCHOOL 
Sq)tember 1991 


Author 


Approved By: 



Michael Grey Stockwell 



n 




ABSTRACT 


A technolc^ vacuum exists in the small cmnbatant and sui)port ship units of die U^. 
Navy. Newer combatant vessels are typically mitfitted widi state of the art Combat Direc- 
ti<Mi and informatitm processing systems, while dieir older sisters in the fleet are still using 
manual methods to do the same tasks. 

These shipboard taitlrs, which include ccmtact management, moving geometiy calcula- 
ticms, intelligence compilation, area plotting and navigation, are all pe rfo rmed manually 
on-board older fleet units. These manual methods are extreme^ slow, are subject to poten¬ 
tially disastrous errors and require intensive training to perform correcdy. The current 
level of computer technology allows die automation of diese tasks, providing an instant 
scdution to the user, with a far smaller eirorrtte than could be etqiected of manual medi- 
ods. 


The prime objective ctf this thesis. The Low Cost Combat Direction System (LCCDS) 
User biterfaoe, is to define the functional ^lals, ccmstraints and general system design of a 
grqdiical user interface suitable for use aboard U.S. Navy vessds. Particular enqdiasis is 
placed on die design and inqilemoitation of a gnqihical di^lay system, in die Ada pro¬ 
gramming language, necessary to interface the user to the ctqiabilities ci the L CCDS as a 
whole. I tMM**"* —X 


Copy 

, INsptcri p 


HTIS GRAftI 


DTIC TAB 

□ 

Unannounced 

□ 

Justification— 


By-—- 


^ Dlatr IbuU on/__ 

Availability Codes 
■ ivair and/or 
Diet Speolai. 


TABLE OF CONTENTS 


L INTRODUCTION.1 

A. Background..1 

1. Low Cost Combat Direction System.1 

2. Ada nrogramming Language.1 

3. Xll ^ii^ndowingSystem .2 

4. Software Techntdogy For Ad^nable. Reliable Systems.2 

5. Transportable Applications Environment Plus. 2 

6. Gra]riiical User Interface .3 

B. Statement Of The Problem .3 

C. Summary Of Previous Work. 4 

1. Seveney/Steinberg 1990 ..4 

2. Sun 1990.4 

3. Goskun/Kesoglu 1990 .4 

4. BoUck/Irwinl991. 4 

D. Research Approach.5 

1. Requirements Study.5 

2. Design Of The Infonnation Di^lay.S 

3. Survey Of Available hiqilementation Totds. 5 

4. Inqilementation And System hitegratioa .6 

n. INTERFACE REQUIREMENTS.7 

A. Plotting Functions.7 

l.Stationy Screen And Formation notting. 7 

2.0petating Area And Grid Plotting .7 

3. Anqddbioos Warfare Area Plotting. S 

4. Misc.PlottingFonctkms ..8 

B. Drawing Functions.t 



































1. User Defined line Drawing Functions.8 

C. Recommendation Functions .9 

1. Qwitact Avmdance Or fateicept Recommendations .9 

2. AirOperations Recomnoendations .9 

3. Hme And Distance Recommendations.9 

D. Intelligence Functions.9 

1. Object Offensive And Defensive Capabilities.9 

E. Listing And Teat Entry/Recall Functkms.10 

1. Routine And Emeigency Checklists.10 

2. Watchbills And Daily Routine Summaries.10 

F. Encoding And Decoding Functions.10 

1. Allied Tactical Publication Signal Encoding/Decoifing .10 

m. USER INTERFACE DESIGN .12 

A. F^motionalRetiuiremcnts Classification.13 

B. Functional Category Analysis .14 

1. Track Functions Analysis.15 

a. Add A New Track.15 

(1) Position.16 

b. Detete Tie Selected Tack.19 

c. Modify The Selected Tack.19 

2. Plotting Functions Analysis.20 

a. Mqis And Grids .21 

b. Zones And Areas .22 

c. Secton And Formations.23 

3. Alert Functions Analysis.24 

a. Visual Alerts Only .24 

b. Audio And >^saal Alerts .25 

c. Disable AU Alerts .25 

































4. Display Hlteiing Functkms. 25 

a. Disable All Display liters.26 

b. Activate Default Display Hlteis .26 

5. Inteltigence Functions Analysis.26 

a. Use Nanae For Intel Seaich .27 

b. Use Countiy And Platfonn For Intel Seaich .27 

c. Use Comments Fcv Intel Search .27 

d. Edit The Intel Database .28 

6. List Input And Retrieval Functions Analysis.28 

a. View A list.29 

b. EditAUst.30 

7. Coding /Decoding Functions Analysis.30 

8. System Input And Display Defaults Analysis .31 

a. Set SystonFilten.32 

(1) Set Tactical Database Hlieis.33 

(2) Set Screen Display Filters.34 

b. Set Akrt P aram e te rs.34 

(1) Alert on all close CPA situations .34 

(2) Alert on all Low Flyer detections.34 

(3) Alert on all System status changes.34 

(4) Alert on all Shallow Wator detections .36 

(5) Alert on unusual Seafkxir zanqnng.36 

c. Set External System Inputs .37 

d. Set Custom System Configurations.38 

(1) Save die cunentoonfiguiation .38 

(2) Recall a saved configuration.38 

9. Navigation Functions.39 

































a. Plot A Great Qicle PaA..39 

b. Ovenide Navigatkm Equipment Inputs .40 

c. Plot An foteicept Course .40 

d. Plot An Avoidance Course.41 

C. Informatioii Display Analysis .41 

» 1. The Graphical Track Display Window.42 

2. The Track Inftmnation \^^n(k>w.43 

f 3. The System Alerts lli^ndow.45 

4. The System Recommendations Window .46 

5. Hie System bitelligenoe l^dow.47 

6. The System Status Window.47 

7. The System Menu Bar.48 

8. The Title Window .48 

D. Window Szing And Positional Analysis.49 

1. The Prototype Display Model.49 

IV. INTERFACE IMPLEMENTATION.51 

A. Ada Tools And Graphics Support Rei4ew.51 

1. TAE+.51 

2. STARS .51 

B. Progranuning The Interface .52 

1. Opra Interface Displays Package .52 

2. Monitor Displays Package.52 

a. Monitor Update Intervals Task .53 

b. Test System Status Procedure .53 

3. Process Interface Displays Ptadcage .53 

a. Process Tacplot Objects Procedure.53 

b. Process Hook Position .53 

^ 4. Draw Di^lay Grqihics Package.54 































5. Taq>lot Set Package. 

6. Menu Package. 

Clnterfece Testing . 

1. System IntegraticMi. 

2. System Uming Results . 

a. STARS Reqx»se Times . 

b. TAE+ Resptmse Times. 

V. CONCLUSIONS . 

A. Summary. 

1. STARS ... 

2. TAE+. 

B. Rcoonunendations . 

C Summary Of Contribution... 

APPENDIX A: OPEN INTERFACE DISPLAYS ... 

APPENDIX B: MONITOR DISPLAYS . 

APPENDIX C: PROCESS INTERFACE DISPLAYS 

APPENDIX D: DRAW DISPLAY GRAPHICS. 

APPENDIX E: TACPLOT SET PACKAGE. 

APPENDIX F:MAINPROGRAM. 

APPENDIX G: LCCDS USER MANUAL . 

LIST OF REFERENCES. 

INITIAL DISTRIBUnON LIST . 


54 

55 
55 
55 
55 

55 

56 


... 58 
...58 
...58 
... 60 
... 60 
...62 
... 82 
...87 
.. 110 
.. 153 
.. 156 
.. 236 
.. 252 
.. 254 


A 


viii 




























1. INTRODUCTION 


This thesis addxesses the design and implementation of a user interface, in Ada, for 
a near>real-tiine tactical information system. It is a part of ongoing research for the 
development of a Low Q>st Combat Direction System (LCCDS) at the Naval 
Postgraduate School. 

A. BACKGROUND 

1. Low Cost Combat Direction System 

Development of the LCCDS is sponsored by the Naval Sea Systems Command 
(NAVSEA) as an economical alternative for providing Onnbat Direction System (CDS) 
o^bilities to ntm-combatant ships. LCCDS requires a platftmn independent system 
supporting gnqrhical windowing capabilities implemented on commercially available 
workstations. The ultimate goal of the system is to provide enhanced informatitm support 
resources to commanders of naval non-combatant ships [SOW88]. 

2. Ada Programming Language 

The United States Department of Defense (DOD), recognizing die need for a 
single high level language for its sponsored applications, has mandated the use of Ada for 
all Defense related projects. Although Ada is an ulmirable language for embedded 
systems, it has no direa capability to provide windowing or die grajAiical support 
necessary to implement an effective user interface. 


1 



3. Xll Windowing System 

The Xll windowing system, develq)ed by die Massachusetts Institute of 
Technology (MIT), is the most widely supported graphical window system meeting die 
platfmm intfependence requirements of the LCCDS project The Xll Systran, currently 
on revisitm 4, provides a very versatile envircmment for a programmer to inqilement an 

t 

effective user interface to any application. As Xll is written in the C programming 
language, there are difficulties when trying to merge an Ada application which calls the 
C functions necessary to provide the graphics involved in a typical user interface. 

4. Software Tedinology For AdaptaUe» Reliable Systems 

The Software Technology for Adaptable, Reliable Systems (STARS) program 
is a US Air Force Systems Command sponsored project develcqwd by Unisys Defense 
Systems, which provides the necessary interfiu:e between an Ada ^iplication and the C 
language functions into the Xll Protocol. The Ada/Xlib bindings developed under die 
STARS program provide an Ada data structure allowing the Innding of Ada subroutines 
to their C equivalents. The bindings provide a complete mapping to all the X11R4 
window primitives. 

5. Dransportable AppUcatkms Environment Plus 

The Transportable Applications &ivironment Plus (TAE+) is a National * 

Aeronautics and Space Admistration (NASA) sponsored project developed by Century » 

Conqiuting , Inc. TAE-f is a conqilete graphics qiplication environment providing a 
suite of tools and programming aids allowing the developer to define a grqihics 


2 







q^lication directly on the display screen. After conq)leti<ni of an application design, 
TAE-i- will automatically generate either C or Ada ctmapilable code , which can either 
stand alone as a running application or may be subdivided into packages for inclusitm 
into another program. 

6. Graphical User Interface 

A user interface for a CDS environment must present the user with a wide 
variety of information f<»r each display item encmiqrassing elements of pcjidtm, 
identification, classification and the attributes of course, speed etc. The wide variety of 
these items make a text based information display too difficult for the user to 
comprehend at a glance. A graphical interface can represent multiple items of 
information within a single symbol, presenting the user with a con^hensive display of 
information, easily understood with even a brief glance at the display screen. 

B. CTATEMENT OF THE PROBLEM 

A graphical interface to the LCCDS is required to present the system user with a 
symbolic representation of informatitm, easily understood with even a brief glance at the 
display. The functions of data input and retrieval must be simple and easy enou^ to be 
understood witiiout resorting to technical manuals or help displays. Rnally, but certainly 
not the most minar ctMisitteration, is the speed of system response. The intmface must be 
able to respond immediately to user requests, changes in the system envircMunnit and 


3 






new infomiation entering the system. This near-real-time response reue places significant 
timing constraints on the interface that cannot be under-emphasized. 

This thesis implements a design of a real time system, using off the shelf hardware 
and readily available Ada software resources, for a typical CDS. The methodology used 
in this project, and the implementation structure employed to present the user interface 
can be readily transferred to any project requiring a gnq>hical user interface requiring 
rapid response times. 

C. SUMMARY OF PREVIOUS WORK 

1. Seveney/Steinberg 1990 

A joint project describing the display and timing requirements for the LCCDS. 
Full details are available in [SS90]. 

2. Sun 1990 

Research into the various tools utilizing the XI1 Protocol, with enq>hasis on C 
language toolkits. Full details are available in [SUN90]. 

3. Coskun/Kesoglu 1990 

A design and implementation of a text based C3I system utilizing die TAE-t- 
application genoator. Full details are available in [CK90]. 

4. Bdick/lrwin 1991 

A design and implementation of a Tactical Database for the LCCDS, 
researched in parallel with this project Full details are described in [B91]. 


4 






D. RESEARCH APPROACH 


1. Requirements Study 

This research began with a comprehensive study regarding the elements of 
infoimation required to present a CDS user with all the support necessary for an effective 
system. Extensive conversations with prospective users and surveys of Naval Officers 
with non-combatant ship experience provided a detailed list of items desirable in a 
typical CDS for shipboard use. A summary of those items is given in Ch^ter H 

2. Design Of The biformation Display 

Using the list of items desirable in a CDS, a design to inqrlement all functitms 
required for the user to access the necessary information was devised. Those items 
determined to be of immediate importance were assigned display screens and those 
screens kept up to date without any user intnaction. The items of secondary inqrortanoe 
were assigned to menu options allowing the user to call those functiems as required. A 
surrmiary of the methodology and the final design decisions made is described in Chapter 

m. 

3. Survey Of Available Implementation Tools 

Afto* ccnnpletion of the initial design, a survey of the tools available to 
impleroent that design was made. Only a very narrow range of tools currently exist to 
port Ada applications into the XI1 Protocol. A summary of those tools is given in 
Cba}MerIV. 


5 



4. Implementatimi And System Integration 

Implementation of the final interface design was made utilizing the STARS 
Ada/Xlib bindings and the NASA TAE+ application generator. The interface was then 
linked with the Bolick/Irwin LCCDS Tacdcal Database described in section C Uming 
and response tests were performed with the results described in Chapter IV. 


A 


6 






n. INTERFACE REQUIREMENTS 


An effective interface reflects the needs of the end users. To ensure that the initial 
design specification detailed in the Seveney/Steinberg thesis [SS90] accurately depicts 
the needs of the Naval Surface Forces, a survey was taken of 35 Surface Warfare Naval 
Officers. Fifteen of these officers had prior experience in surface non-combatant units. 
As a result of this survey, a number of areas not previously mentimied in 
Seveney/Steinberg were raised. The issues raised are presented in summary form, 
grouped by function. 

A. PLOTTING FUNCTIONS 

1. Station, Screen And Formation HtMing 

It is often necessary for a ship underway, particulariy when qrerating with 
other ships, to be positioned in one particular area of the ocean. This area is often moving 
along with another unit and is called a station. The ability to plot the boundaries of these 
stations, allowing the user to see at a glance if the ship is "on station" was highly 
recoitunended as an addition to the interface. 

2. Operating Area And Grid Plotting 

When qrerating in normal fashion, ships ate often assigned large areas of 
ocean to cmiduct their operations. There ate several different predefined areas, known as 
Operating Areas or Grids, a ship may be assigned to. Ships ate typically tasked to be in a 


7 





particular operating area, or assigned to meet another unit in another area. The ability to 
plot these areas was desired by the users as a convenience to deteimine the necessary 
course and speed requirements to transit in and out of these areas. 

3. Amphibious Warfare Area Plotting 

It is a primary task of non-combatant ships tt> provide support to combatant 
units engaged in Amphibious Assault Elabtnate diagrams, detailing the proper position 
of all units required for the q)eration are currently drawn up by hand and must be 
referred to often. The ability to plot the diagram on the display screen was highly 
encouraged. 

4. Misc Plotting Ftincttons 

Several other plotting type fiincticms were recommended, including PIM 
tracks, great circle voyage planning, lines of demarcation, anchoring tqrproach diagrams, 
aircraft conidOTS, c omm erc i al air lanes and nuclear attack avoidance rones. Most of die 
items discussed were met with wide acceptance with the majority of the user group. 

B. DRAWING FUNCTIONS 

1. User Defined Line Drawing Functions 

It is t^ten necessaiy for a ships officer to draw lines to delineate areas or to 
singly provide a frame of reference to conduct an operation. The oqiability to draw tines 
on the display screro, either anchored to geogiiqdiical locations or to other moving 
objects was stressed as vitally important 


8 






"T 








C. RECOMMENDATION FUNCTIONS 

1. Contact Avoidance Or Intercept Recommendations 

The ability to have an immediate course and speed recommendation to either 
avoid another object or to intercept that ob^ was deemed as extremely helpful to the 
user. 

2. Air Operations Recommendations 

Flight operadons from a surface ship generally require a minimum relative 
wind speed and direction in relation to ownship to ensure the safety of the fli^t crew 
and platfona Ibe ability to generate a course and speed recommendation to achieve the 
necessary wind ctmdititHis was mentitmed as being very advantageous. 

3. Time And Distance Recommendations 

It is always die case that a surface ship is tasked widi being at a particular spot 
at a particular time. The ability to get a recommended course and speed to reach a certain 
location at a given time was stressed as being of great importance. 

D. INTELLIGENCE FUNCTIONS 

1. Object Offensive And Defensive Capabilities 

There is an information gap, particulariy among junior officers, as to the 
amiabilities of the warships of odier nations. The ability to call up die dunracteristics of 


9 





any identified object from a central database was unanimously agreed upon as a desirable 
attribute of the LCXIDS. 

E. USTING AND TEXT ENTRY/MXIAlXnJNCnONS 

1. Routine And Emergency Checklisfs 

Every ship in the U.S. Navy has certain procedures defined to reqMmd to both 
routine operations and basic emergencies. Hiese procedures are generally kqn in written 
form as a series of checklists. The ability to nuintain Aese checklists on line and record 
completion of each list item was regarded highly by die majority of the gro up . 

2. Wntchbttb And Daily Routine Summaries 

The ability to maintain on line the ship's daily schedule and the waidibills in 
effect for the various shqiboard dep a rtme n ts was desired by the usen as a convenient 
reference lo the OfRcer of die Deck aboard my surfime sh^. 

F. ENCODING AND DECODING FUNCnONS 

L ABM Ihctical Publication Sgnal Encoding/Decoding 

Any time ships are communicating with eadi other over non-secnre voice 
radio, particularly concerning movement orders or imentions, a set of signals defined by 
the ABM Tactical Publication 1 (ATP-1) are enqiloyed to niiniini«i> die diance of a 
signal being misnndersiood. These signals are cryptic and must be enooded/deooded 


10 










using numual procedures at every occunence. AlAougli not dbought of die groq) as 
being necessary, it was generally agreed upon as a "nice to have” feature for die LXXDS. 




in. USER INTERFACE DESIGN 


Since the requirements for this inoject specified a windowed design, the design was 
tailored to fit the maximum number of functional requirements into a set of windowed 
displays. The process began by analyzing all requirements for two items: user interaction 
and infonnadon display. 

The requirements needing user interaction were sqMrated into one logical grouping 
and those requiring information display into anodier. It became immediately qiparent 
that most requimnrats have elements of bod) interaction and duplay as die two 
groupings were virtually identical. 

The effort, however, was not wasted. The two logical groupings became the basis 
for later decisions regarding menus and displays. The requirements needing user 
interaction led to menu options and those needing infonnation diq>lay were assigned a 
di^lay window. 

Due to the close relationship betweoi the required user interaction and the 
infonnation diqilay, categorizing die design process as a series of phases is difficult The 
method used to conplete the design can best be described as having four pans, widi each 

of the parts requiring frequent excursions into the odien. 

* Furictional requireiiients classification 

* Fimctional category analysis 

* hiformation disitiay arulysis 

* ^K^ndow sizing and position analysis 





T 








The figures shown in this chapter tefiect the final design decisions made for the 
inq)leinentation of the various menu and inficumation display items. 


A. FUNCTIONAL REQUIREMENTS CLASSmCATION 


The design phase of this project was begun by analyzing the initial lequiranents 
described in Seveney/Steinbeig [SS90] and the additional fiinctional lequiranents 
described in Chapter n. A list (rf overall requirements, witii an attendant list of operations 
required to inqrlement them, was develqjed and classified into logical, top level 
categories combitung function, operations uid requited user interaction. A total of nine 

categories emerged from this phase. 

^ Track functions 

* Plotting functions 

* User alert parameters 

* Diqrlay filtering parameters 

* Intelligence input and display functions 

* List input and retrieval functions 

* CodingAkcoding functitms 

* Range scaling functions 

* Systmn ininit and display default parameters 

* Navigation functions 

Each d tiiese categories contain elements of botii user interaction and infomuttion 
diiq)lay. To handk the required user interaction, one atomic label, to be used as a menu 
tide, was drawn fiom each category. 



At this point, the number of menu items forced a decision regarding menu 
presentation. A single menu bar, as shown in Hgiue 3-1, with 9 pulldown type items was 


decided upon as the best presentation for the end user. 







II Tracks | | Puts | | AUrU | Plllcrc | |D«raalta| | laid | 

1 1 

1 Llilf 1 

1 II 






Figure 3-1. The Menu Bar 

One additional menu item, allowing the capability to exit cleanly from the 
Information System, was placed into the title window shown in Figure 3-2. 


Tactical lafornatioB System 

Pratotyi^ VtniM 1.1 
I Silt 

Figure 3-2. TIS Title Window 

B. FUNCTIONAL CATEGORY ANALYSIS 

Each of the atomic menu options was analyzed to determine the minimal set oi 
operatkxis required to fulfill all elements of the requirements as classified in section A. 
Each set of operations within a menu qititm was limited to a size oH five items to 
minitniae menu congestion. 



























lllfplwplll .p? 






1. Track Functions Analysis 

This category covers all requirements dealing with the Track type objects. 
There are only three primary operations a user must be able to perform on objects of this 

type to meet all the requirement objectives. 

* Add a new track object 

^ Delete an existing track object 

* Modify the attributes of an existing track object 

These three operations became the qrtitMis for the Menu Bar pulldown button 
Track shown in Figure 3-3. 


Track 



Add a New Track 

Delete the selected Track 
Modify the selected Track 


Figure 3-4. Track Pulldown Options 
a. Add A New Truck 

In order to define a new track, all the attributes of a track object must be 

input by the user. The attributes defined for a track in the prototype system are: 

* Position 

* Course 

* Speed 

* Category (Track, Point) 

* Classification (Hostile, Friendly, Neutral, Unknown) 

* Type (Surface, Air, Sub-Surface) 

* Height (or Depth) 

* Mentiltettion (Country, Platform type. Name) 

* Misc. comments 


15 





(1) Position. Position can be input in 3 different ways. 

* Entering the position in Latitude/Longitude figures 

* Entering the position as a Bearing and range from Ownship 

* Entering the position by selecting a point on the display screen 

To handle the three possible cases, a separate menu window was 
constructed with radio butttms denoting tlw three mutually exclusive cases as shown in 
Figure 3-4. 


Enter Position by what Method? 

O 

Latitude and Ltmgitude 

O 

Bearing and Range 

o 

Pick a screen position 


L... .J 


Figure 3-4. Enter Position Method 


Figures 3-S and 3-6 handle the frm two position entering 
possibilities and Figure 3-7 appears when the third is selected. 



Latitude EZ 

-1 ON 

-los 

Longitude 

■X- 


1 Ester 1 

1 Casoel 1 


Figure 3-5. Enter Lat/Long Position 


16 








Enter Bearina and Ranse 


Bearing |_ 

- 1 ^ 1 rue 

—) O Relative 

Range i 

-1 O Yards 

-1 O Miles 

1 Enter 1 

Cancel I 


Figure 3 - 6 . Enter Bearing/Range Position 


Cursor Position 

Bearing: 

Range: 

Lat: 

Long: 


Figure 3*7. Cursor Tracking Window 
The Cursor Tracking window will rehim the virtual bearing and 
range of the cursor fiom Ownship and the position of the cursor in Latitude and 
Longitude coordinates, disappearing when a screen position is selected. 

After the positioning method is selected, and the position input, a 
series of additional menu windows are presented to the user to input and/or selea the 
remaining attributes. Figures 3-8 through 3-12 show the renuuning sequence of menu 
screens. 



17 







Figure 3-9. Counti^ and Fbitfonn Attributes 



U SurfaceOsub-SnrfaccO Air 

O WayyolBt ONirHaiMTd 
O Naa-DlaplarableOMaBlBWaUi 

I Flnter I I CiaPCCll 


Figure 3-10. Misc Attributes 


Track CtasBificianB 

OFHaadly 

ONaatral 

OHastUc 

O Vakaawa 

1 Eater | j 

Caacal | 

_1 


Figure 3-11. Classification Attribute 


Tkack CoaiBMiUi aad Hdght 
Halfbt a— 


r Caiateau -1 


S 

s 

later 


Caacal | 


Figure 3-12. Connnents and Height Attributes 


18 


























b. Delete The Selected Track 

When this option is selected, the system will delete the selected, (or 
"hooked") track. In the event that no track is selected, a prompt will appear to instruct the 
user to pick the track to be deleted. A window will appear ctmtaining the informatitMi on 
the selected track and asking the user to confirm the operation. Figures 3-13 and 3-14 
illustrate the progression of windows presented to the user for this operation. 



Figure 3-13. Select Warning 



Figure 3-14. Delete Confirm 


c. Modify The Selected Track 

This option will allow the user to modify any parameter of the selected 
Track. If no Track is "hotdted" the user will be prompted to do so as in Hgure 3-13. A 
menu window, as shown in Figure 3-lS, containing checkboxes will appear asking the 
user to select the parameters to be changed. Hie user will choose the different parameter 
categories to be changed and upon selecting the Enter button, a selective progression of 


19 







data input windows from Figures 3-4 through 3-12 will be presented to reflect the 
choices the user has made. 


_ Modgy which attributes? 

□ ThKkPofiitioD 

□ ThKkAtliiwles 

□ ThdcCUfication 
D Flalfbmil>pe 

D Gonmenls 


Big- I 




Figure 3>15. Modify Select 
2. Plotting Functions Analysis 


The myriad of different plotting functions defined in the requiremnits called 
for a different design approach. All the plotting requirements were studied and classified 

into duee logical categories. 

* Miq)S and Grids 

* 2Sones and Areas 

* Sectors and Fornuttions 

These three categories became the q)tions for the Menu Bar pulldown button 
Hots as shown in Figure 3-16. 


20 

















Figure 3*16. Plots Pulldofwn Options 


a. MapsAndGrids 

There are two requirements specified for this area, one for diq>laying 
shore line na 4 )s and (me for displaying UTM grid lines. Of course, if the ability exists tt> 
activate the nuqis and grids, there must be the coiresponding capability to deactivate 

theoL The four operations defined for this opticm are: 

* Activate Shoreline Mappings 

♦ Deactivate Slrareline Mqipings 
^ Activate UTM Grid Lines 

^ Deactivate UTM Grid Lines 

The four operations translated to 2 ccnre^KXiding check b(» options as 
shown in Hgure 3-17. As the shoreline miq)ping and grid displays are not supported in 
the prototype, no functitmality was attached to these (^ti(ms but was included for future 
development 


21 




Figure 3-17. Maps and Grids Options 
b. Zones And Amu 

There are three kinds of zones and two types of areas defined in the 
requirements. Two of the zone types were compressed to (me entry as the plotting 

mechanics are identical. The operaticms defined for this category are: 

* P1(K a Missile Engagement/Hghter Engagement Zone 

* P1<K a "Keep out" Zone 

* Plot an Operating Area 

* P1(K an Aiiq>hibious Assault Area Diagram 

The four operaticms were displayed as radio button choices in a sub-menu 
to the Zones and Areas pulldown t^titm as shown in Hgure 3-18. No fiirdier 
functionality was defined for diese operaticms as they are not sui^mited in the prototype. 







Figure 3-lS. Zones and Areas Options 


c. Sectors And Formations 

There are two requirements specified for this categmy, one for sectors 


and one for formatitms. The operations required are: 

* Sector Screen Plotting 

* Formation Diagram Plotting 

The two operations were included in a sub-mmu to die Sectors and 
Formations pulldown button as shown in Bgure 3-19. No foidier functionality was 



Figure 3-19. Sectors and Formations Options 


23 








3. Alert Fundioiis Aisalyais 


All active alerts are defined in die System Setup menu so the only opentkns 

required for this category are the fidlowing: 

* Afisual Alerts only 

* Audio and Visual Alerts 
« Disable aU Alerts 

The dute operations became die pulldown menu options fixr die button Alsrft 
as riiown in Hgure 3*20. 



fignre 3-21. Alcrta PnOdown Optfona 


«. VUmlAkrtiOmfy 

This option will disable die audio portion of the Alert functions. The only 
indicarion of an alen will be the text in dre Alerts INqriqr wiiidow. The Alert status will 
also be passed to the Scram Di^kj and will result in the messsge "Akrtt : VtamT 
being diiqilayBd on the bodom left side of the diqilay. 


24 





I ■' I j ^ 




h. AuMo AndVinud Akrtt 

This is the system default status and win result in bodi audio and visual 
cues when an >lleff occurs. The Sereen Dispkcf wiU contain the message "Akrtt : On” at 
the bottom left side of the display, 
c. DUabUAOAkrtM 

This option wUl disable bodi the audio cues and die iiqrat to the Akrtt 
DUfiaj window. No aktts wUl be generated. The message ”Akrti : DUaUef' wiU 
appear at the bottom left side of the Scntem Dbflay. 

4. Display Filtering Functions 

like the Alert parameten, die INqriQr Fitter paranaeters are selected in die Set 
Syriem D^niOtt menu section. Recognizing that the user may want to tempor a rily 

override the predefined filter values, two operations have been provided. 

* Disable aU Diqilay Filien 

* Activate Default Diqday Hheis 

The two operadons became the options for die pulldown button FOten as 
shown in Rgure 3-21. 

Filters I _ 

DinUe an Diaiday FDtcn 
Activate DcCuilt Display FBtcra 


Figure 3-2L FUtcra Pull down Optkms 




a. DisiMeABDi^tb^ Filters 

This option will result in the overriding of all Dteftay Filters selected in 
the Site System DiftuUte menu section. All objects arriving into die Integration System 
Database will be processed and displayed. The message "Dispb^ FOters: DIssMteT will 
qipear at the top the Senem Dteptey to remind die user of the Rlter status. 

b. AeBmte Diifittilt Display Filters 

This option will restore the system Dbplay Filters to die defiuilt 
condition as prescribed in die Saf System DsftaUte menu section. The message "IMapk^ 
Fiftfre: wiU qipear at die ttq> the Screen IMqriQr. 

5. IntcUitence Fttnctkiiis Analyaia 

The Inidligence system works via a system of keyword entries into an 
httelUgence d a t a b a s e. The only operadons lequiied to siqiport this system are 
m ec h a n is m s to specify which of die Trick attributes to use as the keywonl entries to the 
da t abase, and die abiliQf to edit the database cunendy in use. The operations defined for 

this category are: 

* Use Name for Intel Search 

* Use Gimments for Intel Search 

* Use Country and Platform Type for Intel Search 

* Edit hiiBl Database 

The four operations formed die options for die Intel pulldown b u tton as shown 
in Hgure 3-22. No fiirdier functionality was included in dus area as the protot y pe does 
not support Intelfigence functions. 





□ 

Intel 



Use Nawc for laid Sauxh 

Um Coaaliy aad Ptatfom Type for bid Search 
Uic for bid Search 

Edit btelliamce Database 


Figure 3-22. Intd PuUdown Optioiis 


a. Vu Name For Intel Search 

Name is the default Intel search paiameter. The Track atnibute ”Name" 
will be pa^ed to the Intel search routine each time a Track is selected finom tiie Screen 
Display. The results of the search will be displayed in die ItUeOigeHee window. 

The message "Intel: Name” wiU appear in the lower ri^t comer of the Screen JHaflay 
to remind the user of die Intel search criterion. 

h. Use Country And Platform Forint^ Search 

I^th this option selected, the Tradt attributes "Country” and "Platform 
Type" will be passed to die btel search routine each time a Track is selected. The results 
cd the search will be displayed in die IriteUiienceINtplayrnBdtyn. The message "Intd: 
Platform" will qipear in die lower right comer of die ScrwnDlqpley. 
e. Use Conunertts For Intd Search 

This option will pass die Tirade attribute "CMmMnlr" to die Intel Search 
routine. Each word in the Comments string will be passed individually and scanned 
separately. Doe to the cooqiarative slowness of diis operation, it will only act iqpon die 


27 





Track selected at the tune this option is selected and tl^- search operation will be forced 
to terminate at the next mouse / trackball button event The results of the search will be 
displayed in the Intettigenee Dhplay window. The message "tntel: SearchiHg” will be 
displayed in the Screen Display. At the termination of the search, the Intel message in the 
Senem Display will revert to the last default selected. 
d. EdU The Intel Database 

This option will allow die usct to edit the Intelligence database. The 
location of the editing screen and the mechanics of the data input will be determined by 
the database implementor. ^ 

6. List Input And Retrieval Functions Analysis 

This category covers all the requirements dealing with display and editing of 
text objects, such as Ship's Bills, Checklists, Watchbills and die like. There are two 

operations required for this category. 

• View a List 
^ Edit a List 

The two operations became the entries for die lists pulldown menu as shown 
in Figure 3-23. 


Lists 



ViewaList 

EditaList 


Figure 3*23. Lists Pulldown Optkms 


28 














0 . ViewAUst 

This option will present the user with a list of radio buttrai t^tions 
craitaining the names of all the text objects currently in the systenL Selecting one of tiie 
options will cause a text window, ontaining the desired text, to ^pear txi tiie right side 
of the screen, overlaying the various infomation display windows. Hgures 3-24 and 
3-25 show the text select and display windows respectively. 


Select a File 

O Unrep CbeckI 

O Underway Ch 
O PlanoftlieDi 
O Aviation Cheti 
# Ship's Roster 
O GQChecfclist 

ist 

ecklist 

ty 

klist 

Cancel 


Figure 3-24. File Select Window 



29 













b. Edit A Ust 


This operation will duplicate the form of the "View a list* option. The 
File Select window will contain the additional option "New File" and the Text Display 
window will bectxne a Text Edit window allowing a user to edit the text within the 
window. 

7. Coding / Decoding Functions Analysis 

This category covers all the functicmality set by die ATP-1 tactical signal 

coding/decoding requirements. The operaticms required to support this category are: 

* Decode an ATP-1 Signal 

* Encode an ATP-1 Signal 

The two operations became the entries for the pulldown menu button CoMng 
as shown in Hgure 3-26. No further functionality was provided as die coding/decoding 
operations are not suf^ioited in the prototype. 


Decode an ATP-1 Signal 
Encode an ATP-1 Signal 


Figure 3-26. Coding Pulldown Options 


30 










w 






8. System Input And Display Defaults Analysis 

This category covers a wide range of required data input and system 
configuration issues. To keep the screen display manageable, only (me operaticm was 

setected, with sub-menus as required to provide the necessary range of functicmality. 

* Set System Defaults 

This operation, shown in Figure 3-2, leads the user to a series of menu 
windows which provide the interface into the addidtmal trperaticms required for this 
category. 

* Set System Filters 

* Set Alert Parameters 

* Set External System Inputs 

* Set CusttMn System Configurations 

These five operations became the basis for die pulldown selecticm window 
shown if ngure 3-27. 



Figure 3<27. Defaults Pulldown Options 


31 




a. Set System Filters 

'laere are two types of filters defiiied in the lequirements. Tactical 
Database Filters and Screen Dispb^ Filters. There are bodi conceptual and operadtHial 
differences between the two filter types. 

Database filters will affect the number of objects to be inxx^ssed by the 
Integration system. Those objects not meeting the filter parameters will be ignored and 
remain unprocessed. 

Display filters will affect mily the number of objects to be displayed on 
the screen. The objects not meeting the filter parameters will not be displayed on die 
screen, but will continue to be processed by the Integration system ready for instant 
display. The Menu Bar option Filters, as discussed in section B.6, allows the user to 
override the defined display filters, in which case all objects in the Tactical Database diat 
meet the screen range scale limit will be passed to the Screen Display. 

The two filter types require two separate operations to inqilemenL 

* Set Tactical Database Filters 

* Set Screen Display Filters 

The two filter operations became the entries into anodier radio button 
selea window as shown in Figure 3-28. 

08«t Tactical Dalabaaa FUlara 
O Sat Scraaa Diaplajr Plltara 
r Caacal I 

F1ginY3-28. Select Filter Type 


32 










(1) Set Tactical Database Filters. The Tactical Database contains 
objects of varying types and attributes. Each object type can be filtered separately based 
on its attributes. For Track and Point type objects it is also possible to filter separately on 
categories of the object The object types, categories and allowed filtoing attributes are 
shown in Table 3-1. 

To allow the user to make filtering choices within (me conqxKite 
screen, a partitioned checkbox window, shown in Figure 3-29 was (xmstnicted. The 
system default configuration has been selected for illustration purposes. 

Selection of an item indicates that it should be included in the 
database processing. In the example shown, the colored items indicate a selectitm. The 
example will instruct the database to include all object types, of all categories and 
classifications. The blank Range, CPA, Class and Height boxes indicate that no filters for 
those items should be applied 

The AndA3r selectcn- buttons allow the user to define atomic 
filter entities, which will permit multiple filter attributes on a single object type. For 
example, if the user wishes to see surface friendlies within 30 nautical miles and 
surface hostiles within 50 nautical miles, the And selector would be eitq>loyed to 
concatenate the filters within the single surface objea type. 

The Or selector allows filter concatenadtm within object types. If 
the user wishes to see all surface fiiendlies (n* all air hostiles or navigatitm hazards within 
50 nautical miles, die Or selector would be used to define the multiple filter object types. 


33 





(2) Set Screen Display Hlters. The Screen Display Hlters are 
virtually identical to those of die Tactical Database. The <»ie difference is that the Range 
parameter is set by the Range Scaling function and cannot be adjusted in this operadtm. 
A screen identical to Hgure 3-29 will be presented to the user with all Range selecdm 
areas "grayed out", allowing no Range parameter inputs. 
b. Set Alert Parameters 

Alerts notify the user that there has bem some ctmdition or event 
detected that either places the ship in dango* or adversely affects the operation oi the 

system. There are five cases where an Alert is ^ipropiiate. 

^ Qose CPA Detected 

* Low Flyer Detected 

* External System Status Changes 

* Shallow Water Detected 

* Unusual Sea Floor Ranqiing Detected 

These five cases formed the entries for the checkbox window shown in 
Hgure 3-30. The system defaults have been entered for iUustntion purposes. 

(1) Alert on all close CPA situations. The system will alert the user 
if any Tracks are detected with CPA ranges less duui die CPA alert value. 

(2) Alert on all Low Hyo-detections. The system will issue an alert 
for all cases of Air Tracks with a Height attribute less than die alert height value. 

(3) Alen on all System status changes. The system will akn the 
user oi all status changes in external system inputs. 


34 






Table 3*1. System Filter Table 







Figure 3-29. Database Filter Sdection 



_ Set Alert Parameters _ 

H Alert on ail dose CPA dtuations .>^1 mm I ym** 
H Alert on all Low Flyer ddectkms - -y-j —iHrm 
I Alert on all System status dianges 
I Alert on Shallow Water detections m T rtet 

I Alert on unusual Seafloor ramping -^-| f fa rt/stc 

I Eater ~| I Cnod I 



Figure 3-30. Set Alert Parameters 


(4) Alert on all ShaUow Water detections. The system will issue an 
alert when the fathometer inputs drop below the alert depth thieshtdd. 

r 

(5) Alert on unusual Seaflotar ranqnng. The fiadioaieter iiqnits are 
monitored continuously and compared over time. Any drop in fiithometer readings in 
excess of the alot slope threshold will result in an alert 


36 





































c. Set Extenud System Inputs 

The Tactical Inforaiadm System cannot provide accurate displays 
without the information inputs extmal equipment provide. This operation allows the 
user to specify which units will act as infcmnation feeds into the system, b will also 
allow the user to designate equipment as inq)erative, which will act as a reminder to 
overall ships equipment status. 

All selections made in this area will be reflected in the System Status 
window located in the lower right comer of tlw display. Figure 3-31 is a chedcbox 
window formed to implement this operation. 


Select 

Inop 

□ Radar#! 

□ 

□ Link System 

□ 

□ Aft Gyro 

□ 

□ Windbirds 

□ 

□ Pit Sword 

□ 

□ Fathometer 

□ 

1 Enter I Cancell 



Figure 3>31. Equipment Select Window 


37 






d. Sh Custom Sj^toKCot^figaratiatu 


It is recognized that different individiials have varying prefermces. This 
opendcm will allow a user to save a set of predefined system defiuilts and recall diem at 
a later date. Hgure 3-32 shows the radio button window that will appear when diis option 
is se^ected. 

_ Custom Confignratioiis _ 

O Save the current configuration 

O Recall a saved configuration 
Cancel 

Figure 3-32. Custom Configurations 

(1) Save the current configuration. This option will read in all 
configurable system options, widi the excqition of the external equ^unent selections, and 
save the information to a disk file. The user will be pranopied for a configuration 
nameprior to die save. The option to cancel the oper ati on will also be provided. 

(2) Recall a saved configiBatkn. This option will p r esent the user 
with a scrolling text window containing the names of all the confignrttions currently in 
die system. Selecting a oonfigutation will cause the system to reset all configuraUe 










9. NairigitfiQii FVmctkw 

This categcxy oicoaqMsses all the requtrements coaoenuiig padi fdamuiif and 

Ownshq) navigatkn functions. Theie are four operations required for diis option. 

* Plot a Great ChclePidi 

* Ovenide Navigation Equipment Inputs 

* Plot an ImereqM Coarse 

* Plot an Avoidance Oouise 

Hgure 3-33 is a radio button window containing the four operations defined 
for this category. 


NavigatioB Ftoctlona 

O Plot a Great ardePhth 
O Override Navigation Eq ui pme nt Inpnte 
O Plot an IntcrcqM Course 
O Plot an Avoidance Coarse 

iriMirfl 

Flfnre 3-33. Naviption tactions 
0 . notAGrmtC^rtkFtA. 

It is often die case duu ship bo a rd navigation officers imm plot c o u tse s 
fiom one ]dace to another by diismediod. This oqwbilitX is leladvely easy to imidement 
baaed on the components and types that are already pen ci the proio^pe systena. This 
option wu included for future development as no Padi plotting capability is planned for 
the prototype. 


39 







A. Override NMvigatioM Equipment 


Not aU equipment is as Rdiable as one desires. This operation was 
insened to allow die user to place any and all Navigation systons in "Manual” mode, and 
make all Navigation inputs from the keyboard. 

All manual inputs made from diis option will pass into die Tactical 
Database and iqplace die automatic Navigation equqment inputs. A message, 
"Navigation: Manual", will be diqdayed in the System Status window alerting die user 
dutt at least one navigation input is in manual mode. Hgure 3-34 is the cheddiox t^on 
window designed for diis operation. 


te Mmaal Nafipaian tapali 

□ Mtioit 

□ Course 

Q Speed 

O Depth 

l^hadc LomMi 

rie ZUhiTtaK 

L _J8B 

l> 1 DfarMiTriH! 

^ 1 bets 

B 1 Feet 

□ 81^ EZ~~I 

1 EMer 

1 

1 Cancel | 


F^iire5>34. Set Mamml fopato 


e. PMAutrUereeptCmme, 

This option will perfonn die moving geometry calculations required to 
determine a course and speed from one object to intercept anodier. The user will be 
p rompted, (widi die Warning Select window riiown in Hgure 3-20), to sdera two screen 


40 











objects. The calculations will then be p e rfo rmed and die results di^layed in die 
Recommendations display window. 

d. PlotAmAvoUbmet Course. 

This qition is the conceptual opposite of inteicqiting an object The 
system will compute the necessaiy course and speed to avoid an object by a specified 
distance. The user will be prompted to selea two screen objects and dien asked for an 
avoidance distance. The system will display the results of the ensuing calculation in die 
Recommendations display window. 

C. INFORMATION DISPLAY ANALYSIS 

In this phase of the design all categories, requirements, pperatkms and other 
refieience documents were examined for imns of informadon dutt were eidier required or 
available for display. A large list of information items wu compiled and dien ^it into 
twosectitns. 

The first section the list contained informadon items diat, based on die system 
requiiements, were required to be displayed. Items such as Tiadt and Point objects, 
menus, recommendations and alerts made up the majority oi this list 

The second section contained items duu were not speci fi call y called out in die 
requiremnits, but were available in the system. These "nice to have" items consisted erf 
configuration and system status selections, dme and exieiiud equipment inputs. 


41 





The required items list was studied widi the objective of minimiang die number of 
display windows needed to i»esent all infonnadon elements. This analysis resulted in die 

definidon of six primary informadon windows and two menu windows. 

* Orqihical Track Display Window 

* lYack Informadon ^K^idow 

* System Alerts Window 

* Syaem Recommendadons M^ndow 

* System Intelligence Window 

* System Status Window 

* System Menu Bar 

* Title \i^ndow 

The decisitm regarding which elements of "nice to have" informadon to include in 
die design was posqxmed pending the final design of the required windows. 

1. The Graphical Track Display Window 

This, die largest of die informadon display windows, contains graphical 
rep rese n tations ci all track objects defined in die system. Tlacks are diqiiayed in die 
ciicular area as standard NTDS symbols, identified by die text appearing below die 
symbcds. The circular display closely approximates standard radar repeater form and was 
chosen to ease the users transition fiom standard shipboard systems to die Information 
IM^fday. 

The drcular di^Hay also provides usable space to provide many elonnits of 
die "nice to have" informadon in a clean and easy to read format Oonqmted information, 
such as TVue Wind qieed and dnection and Set direction and Drift speed were induded 
as woe die direct system inputs of Depdi and Tlnne. Additional system status information 


42 















was included to provitte the user with the cunrent default values of system filters, alerts 
and Intel. 

The capability to scale the range display to user defined dimensions was 
included as a slider bar. Each selection of the range scaling function will double/halve 
the current scale selected to a minimum of 2000 yards and a maximum of 512 nautical 
miles. Figure 3-35 shows a representation of the final design including a sample of 
typical system (Miqtuts. 

2. The Track Information Window 

This window required a text display of all predefined objea attributes as well 
as computed attributes such as CPA. As the display was to be text based, a scrolling text 
window was selected as the interface. Figure 3-36 shows the final design form and a 
selection of typical infornutitm items found in the window. 




Figare 3^ Track fafonnatioii 




















This window design serves track objects of all types. The title Track 
biformation was selected after a considerable amount of discussion with the proposed 


end-users of this system. 

The pressed end-user, an American Naval Officer, was found to be more 
comfortable with the term Track vs. the term Object As tire field of Object Oriented 
Design is still in its infancy, and not all users could be expected to understand what an 
object meant the title Track InformatitMi was adt^ted. 

Another benefit of the discussions with the eml users was the discovery that 
most informational reports, generally passed verbally, are fonnatied fairly specifically. 
The verbal reports generally begin with the name of the object followed by the gioiq) 
bearing and range, and concluding with the group course, speed and CPA. 

The placement of infoimadon within this window attempts to duplicate dre 
verbal report fbnnat grouping the bearing and range attributes into me ’’block” and the 
CPA is prominently featured in the middle of the window. The odier attributes, judged 
less critical by the end-users, were placed at the bottom of the window, course and speed 
attributes into another. The name is centered in the tq) of the display. 

3. The Systems Alerts Window 

This window displays warnings to the user based on the alert parameters 
defined in the Alert Parameters sectim of the System Defaults. The display is 
scrollable to allow the user to review all alerts generated by dre system during dre current 
mission. Figure 3-37 shows the final window design. 


45 





Alerts 


Cortact'C: CPA 000 /1000 Yds @ 1530 




m 


Figure 3>37. System Alerts Window 


4. The System Recommendations Window 

This window provides course and speed lecramoendations to tte user based on 
the alert threshold defined in the System Defaults section. The conoputed course and 
speed necessary to avoid any track by the aleit dueshold will be displayed in diis 
window, paired with each CPA alert in the alerts window. Hgure 3-38 shows dw win^w 
with a typical reccHmnendaticm. 



Figure 3-38. The System Reomnmendations Window 


46 













5. The System InteHigence Window 


This window, provided for future development, will present all pertinent Intel 
information available for the selected track. Figure 3-39 shows a projected represratatitn 
of the final design. 



Figure 3-39. The System Intdligoioe Window 


6. The System Status Window 

This window presents the user widi a conaptehensive view of the cunrat status 
of all system inputs. Reverse video is eti^loyed to distinguish degraded or inopmative 
system inputs to the user. Figure 3-40 depicts the window containing a set of system 
inputs typical to die system. 


47 






Figure 3-40. The System Status Window 
7. The System Menu Bar 

This Menu bar presents die user with the nine pulldown mran operations to 
exercise the different cqiabilities of die Infonnadim System. Hgnre 3-41 shows die final 
design of die Menu bar, reprinted firom Hgure 3-1 shown eariier. 



Figure 341. The System Moiu Bar 

8. The Titie Window 

The Ude window serves a dual purpose. As die final systnn design 
oioonqiasaes die entire screen di^lay, some area of the screen was needed to prmoit die 
suh-mran items. This window was Found to be die Meal position For all sub-menus and 
intermediaie infbnnadon presentations. A select button was added into this window to 


48 































allow the user to exit cleanly firom the system. Figure 3-42 shows die window in its final 
design form, reprinted from Figure 3.2 presented earlier. 


Tactical laforaiatioB Syttea 
Prctotyip* Vcraira 1.1 

Figure 3^2. The Title Window 
D. WINDOW SIZING AND POSITIONAL ANALYSIS 
1. The Prototype Display Model 

This, the last design stage, required die sizing and positioning of the different 
windows and menu items in a manner easily readable at a ^ance by die user. Ihe final 
design is shown in Figure 3-43. 





Figure 343. The Prototype Display 


50 


















IV. INTERFACE IMPLEMENTATION 


A. ADA TOOLS AND GRAPHICS SUPPORT REVIEW 

One of the research goals defined for diis thesis was to ascertain if a viable graphic 
user interfisce could be conqrleted in Ada. The inq)lementation i^uae of diis ptqject was 
started with a review of die tools available to port Ada into X11R4. Tbe number of diose 
available uxds is very small; only two prodi^ currendy exist 

L TAE+ 

Transportable Applications Environment Plus (TAE-f) was developed die 
National Aeronautics and Space Administration (NASA) on behalf of the Goddard Space 
Flight Center. TAE-f is a conqilete programming and design package wbkdi siqipons 
sevend widgets (display types, sudi as slider bars, text boxes, buttons, daeck boxes, etc.) 
and is cqiable of generating Ada code ditecdy from a defined screen application. 

A conqilete description of the TAE-f package is available in [TAE90]. 

2. STARS 

The Strftware Technology for AdaiKable, Reliable Systems (STARS) program 
is an ongoing progea sponsored by the U.S. Air Force to provide Ada programming 
support in the form of Ada libraries and toolkits. The Ada/Xlib libnries provided by 
STARS give an Ada programmer direct access to all low level X ftotocol primitives. An 


51 






■ABtinmil STARS ttx^ piovidiiig an Ada/3b widfet loolldt and an Ada/Modf widfet 
ttxdkit are under development and win be available soon. 


B. PROGRAMMING THE INTERFACE 

The iniBffiMe was completed as a set of six Ada padones. dividing the necessary 

functionality into logical groups. 

* Open Biieffine Diqilays Package 

* MonitorDi^laysPadoige 

* Process Interface DiqiliQrs Package 

* Ibcidot Set Package 

* DiawDis|riayQrqiliicsPadcage 

* TAE bfoiu/Main ftogram 

L OpcnlatcrftreeDisplayaPiidKate 

This package contains aU the declarations and p arame te rs required to open 
each of die six information dqday windows defined in dm design. A separate procedure 
was included fbr eadi window type. Comidete program Usdnp are available in Appendix 
A. 

2. Monitor DbplayiPKkafe 

HdS pw*%g f fnmaitif one m ff lim r task and one test p rocedore. Complete 
program listings are avaUiMe in Appendix B. 


52 






a. Monitor Update IntcnrabTMk 

This task simply keeps track of the amoont of time elqned betwemi 
screen refreshes. The timing requirements in [SS90] require a maximum of four seamd 
delays between screen updates so the task will call the process to r^esh die s cre en every 
four seconds. 

b. Test System Status Procedure 

This infrequendy called procedure is initiated by pressing the mouse 
button in the System Status display window. This procedure polls the Bolick/frwin Status 
package to determine current system status and displays that information within the 
System Status window. 

X Process InterfSMe Displays Package 

This package contains procedures and functions which process information 
related to the screen diqilays. Conqdeie program listings are available in Appendix C 

a. Process TmploC Objects Procedure 

This procedure takes each olqect defined in die Tactical Plot Set Padcage 
and compotes all the required elements ci information to be diqilj^ed on die screen. 
Each object is processed individually and the screen drawing and writing processes are 
called m prqject the information onto the diqday screen. 

b. Process Hook Position 

Each time the mouse button is pressed within die Tactical Plot window, 
this procedure is called to deten nin e the position of die ausor at the time the button was 


S3 






pressed. Various screen positions are predefined as either ownsh^ or screm scaling 
functions and this procedure checks to see if the mouse button was pressed in one of 
diose locations. 

If die mouse was not pressed in a predefined location, a stale variaUe is 
set and die location of each incoming object is compared to die "hook" position to 
detennine if an olqect was in die vicinity of the hook location. If the values of die hook 
podtion and die location of any track object correqiond, die hook will be diqilayed 
surrounding the otyect 

4. Draw Dbplay Graphica Package 

This package contains all the screoi drawing and writing procedures for bodi 
ot]!ject and information displays. The symbtdogy used to diqilay die trade objects was 
taken fiom (QOTS91]. Conqilete {xogram listings are provided in Appendix D. 

5. IkcpIoC Set PiBcfcage 

TUs package is the primary link betwemi the Bolidt/bwin Integration System 
and the diqilay process. A generic set package was used to i m pl em e n t a trade data 
structure and p roce du res were provided to enyQf the set, fill the set and retrieve the data. 
Each data ob j ect in the set is sent to the Process Diq^ys package individnally for 
processhig prior to display on die screen. Rdl program listings are avaihdile in Appendix 
E 


54 






iipfyiiiiif 






6. Menu Package 

This package contains the code generated by TAE+, heavily modified to 
iiiq)lement the menuing system described in Chapter IH The system starts by t^iraing all 
windows defined by both TAE+ and STARS, loading an Ownship track object and 3 test 
tracks, and entering an endless event mcmitOTing loop. Complete program listings are 
available in Appendix F. 

C INTERFACE TESTING 

1. Syston Integration 

Upon completion of each program module package* Ae naodule was linked 
into die Bolick/Irwin Tactical Database project and tested both independently and widi 
the other Interface packages. Informal timing tests were conducted at each stage to detea 
any uiuKceptable system lespoise times. 

2. Syateni Timing Results 

Timing tests were conqileted for die packages containing die STARS code 
meeting with great success. The package containing the TAE+ code initially provided 
unacceptable system response times when integrated widi the system as a vdxde. and was 
successfully modified to give acceptable response results. 

n. STARS Response Times 

Widi the STARS code fully integrated into die system, die re^wnse times 
for an objea base of four tracks given five rqnd button presses averaged less than 0.1 


55 



seconds per display update. An object base of 20 tracks was provided widi die results 
remaining essentially identical. 

b. TAE4> Response Times 

)^th die TAE+ code integrated unmodified into die system, die response 
times for the same test of four track objects given five rapid button clicks averaged dnee 
seconds per display update. An object base of 20 track was ptovided widi die timing 
results degenerating to four seconds per display update. 

TAE+code is generated rerun as a main procedure. The code contains a 
display opening procedure, an event mcxiitning loop and a siqiport package containing 
the actions re be taken when an event is detected. 

The event mraitoring loop is constructed as a single IF-THEN clause 
vdiich monitors every objea on every dinned display once per loop cyde. This 
inefficient method oi event momreiing must be modified b e fo re accqitable timing results 
can be obtained. Racing the event monitoring loop into a task structure is not possible as 
TAE-*-uses die Ada pragnui Interface re access die XI1 functions. 

The modifications made re the TAE-f code included chang in g die single 
IF-THEN clause re a nested structure, which monitors only the defined windows, adding 
a top level IF-THEN clause, (using die TAE-t- directive "WFT.FENDING'Ot to isolaie 
die TAE-i- event loop unless an event has takm place in a TAE-t- window and pladng all 
STARS event handkn into die same loop as the TAE-t-event handlers. 


56 







These changes resulted in timing results similar to dxMe recofded for die 
STARS packa^ alone. The speed at which TAE+ t^mis and closes windows is noticibly 
slower than STARS but is transparent to the display updating process due to die changes 
made to the event handling loop. 


57 


V. CONCLUSIONS 


A. SUMMARY 

This thesis |»esented the design and in^lementation of a grqrfiical uso* interface for 
a near-ieal-tiine system. Two Ada grairfiical interface tools were te^ed and evaluated for 
acceptaUe system response times. 

L STARS 

The STARS Xlib bindings are a wonderful tool for building windows* line art, 
pixmaps and static text displays. There are* however* no proviaons for any standard 
widget types such as scroll bats, text input boxes, view ports or dialog boxes. The 
inqilementation at an Ada qrplication using STARS is quite strai^tforward* aldiou^ 
knowledge of X Protocol primitives is voy helpful to a novice progr am mer. 

The XUb bindings are extremely fost and hi^y suitable for a teal time 
application. 

2 . TAE* 

The TAE-k application generator is a very useful tod for any non-time critical 
aiqtiication. All standard widget types are suiqxxted and die user interfoce into die 
program is very sim|de. 

Oonstraints can be {daced on all data input streams and are checked by TAE-i' 
at execution time* relieving the prograimner of the task buikfing constraint die» 1 


58 








routines. The executicm time of the program can be improved by reducing the number of 
defined windows (called panels in TAE-f-) and by placing the window event handlers inro 
a nested IF-THEN clause with the TAE fiincdcm WPT_PENDING used as an isolatitm 
device. However, even with the mentioned modifications to the TAE+ code, the speed at 
which TAE-i- opens and closes display windows makes the execution time of die 
generated program application is comparatively slow, and unacceptable for a real-time 
graphical information display application. However, for rapidly prototyping menuing 
functicms which link into a fast display process such as the STARS XLib libnuy, it is an 
invaluable tool. 

The Ada to XI1 bindings for TAE-t* are different from those used by STARS, 
and when used in conjunction with a STARS applicaticm, results in linking two sqMuate 
sets of Ada to Xll bindings into the final executable. This dual linking effectively 
increased the size of the final Interface program by a factor of approximately 2.5 (1.2 
megabytes to 2.9 megabytes) which may affect the transportablity of the final applicatitm 
dur to memory constraints. 

TAE+ currently has an upgraded package (Version 4.2) under test and many of 
the problems discussed in this chi^ter may have been addressed in the new edition. 


59 






B. RECOMMENDATIONS 


Any graphical user interface requiring text or numeric data input requires a numbo' 
of different widget types to present the user with an easily understood interface. A widget 
toolkit, called Ada/Xt, for Ada applicatitms has recently been introduced by STARS as 
an ”A" test release and is available via antmymous FIP from host 
"stars.rosslyn.unisys.com‘' in the "pub" directory. This widget toolkit runs on top of the 
Ada/Xlib bindings and is omfigured for the VADS or Telesoft Ada cmnpilers. Due to die 
display speed constraints encountered in the TAE+ package, I recraunend duu any 
further research into Ada user interfaces obtain and test diis new STARS package for 
interface development Full details of the Ada/Xt widget toolkit are available in 
[ADAXT]. 

C. SUMMARY OF CONTRIBIJTION 

This project was completed entirely in the Ada programming language, and 
employed a number of tools representing the current "state of the art" in Ada gnq)hics 
processing. I^liminary research into Ada grtqrhics iq>plicati(ms produced no data on any 
odta- programming attempts of this scale. 

The design iqiproach and the inq^lementatitm methods used for the project are 
entirely tranq)arent and can be iqiplied to any other user interface project using Ada.The 


60 







modificaticms made to the TAE-t- generated code, and die mediods used to link diat code 
into a larger applicatirat is entirely pwtable for any application using the TAE+ package. 


<1 








APPENDIX A 


OPEN INTERFACE DISPLAYS 


Author: Michael G. Stockwell 
Date : 21 September 1991 

— Description: Handles the declarations and opening procedures for 

all windows defined in the IiCCDS program 

with System; with Key_Syms; with Text_Io; with X_Llb; 

package Open_Znterface_Displays is 
use X_Lib; 
use Events; 

General Declarations 
Dlsplay_Mot_Open : Exception; 

— Declarations for the Tactical Plot Window 


Tacplot_Buf fer 
Tacplot_Gc_Value_Mask 

Tacplot_Gc_Value_Rec 

Tacplot_Main_Attrs 

Tacplot_Main_Screen 

TacplotJWindow 

Tacplot_Root_Wind 

Tacplot_BorderJWidth 

Tacplot_Drawlng_Space 


: X_Lib.String_Polnter :■ new String'(* *); 
: X_Lib.6raphic_0utput.Gc_Mask_Type 

:“ GraphicjOutput.Gc_Font; 
: X_Lib. 6raphic_0utput. 6c_yalue_Record; 

: X_Lib. SetJNindow_Att ributes_Record; 

: X_Lib.Screen_Number; 

: X_U.b.Window; 

: X_Lib.Window; 

: X_Lib.Coordinate 2; 

: X Lib.Drawable; 


62 








TacplotjDisplay 

Tacplot_Dlsplay_Context 

Tacplot_llindow__X 

TacplotJllindow__Y 

TacplotJWindowJMidth 

Tacplot_Window__Height 

Tacplot_Status 

Tacplot_Wa_Valuea 


: X__Llb.Display; 

: X_Lib.Graphlc_Output.GraphlcjContezt; 

: X_Llb.Coordinate 0; 

: X_Lib.Coordinate 0; 

: X_Lib.Pixel 700; 

; X_Lib.Pixel 700; 

; X__Lib. Events.Coiiipose_Status_Record; 

: x_Lib.l»a_Mask_Type:- Wa_Background_Plxel or 
Na_Border_Plxel or 
NajCursor or 
WajDverride__Hedirect or 
Na_Bvent_Mask or 
Wa_Bit_Gtavity or 
l*a_Win_Gravity; 


- Declarations for the Track Information Window 


Track_lnfo_Buffer : X_Lib.String_Pointer new String'(* *); 

Track_,InfoJDisplay : X_Llb.Display; 

Track_^Znfo_Drawing_Space: X_l<ib. Drawable; 

Track_Info_Gc_ValueJMask: X_Lib.Graphic_Output.Gc_Mask_Type 

; ■ GraphicjOutput. GcJFont; 

Track_Info__Gc_Value_Rec : X_Lib.Graphic_Output.Gc_Value__Record; 
Track_Info__Border_Width ; X_Iilb.Coordinate 2; 

Track_Info_Display_Context ; X_Lib.GraphicjOutput.GraphicjContext; 
Track_InfoJllindowJK ; X_Lib.Coordinate 0; 

Track_lnfoJWlndow_Y : X_Lib.Coordinate ;« 0; 

Track_lnfoJWindow_Width ; X_Llb.Pixel ;• 600; 

Track_lnfoJWlndow_Helght ; X_Llb.Pixel 102; 

Track_lnfo_Main__Xttr8 : X_Lib.Set_Window_Attribute8jRecotd; 

Track Info Main Screen : X Lib. Screen Muayt>er; 


69 




Track Info Window 


X Lib.Window 


Track_Info_Root_Wind 
Track_lnfo_Statu8 
Track Info Wa Values 


: X_Lib.Window; 

: X__Iiib.Events.Coinpo8e_Statu8_Hecord; 

: X_Lib.Wa_Ma8k_Type:- 

WaJBackground^Pixel or 
Wa_Border_Plxel or 
WajCursor or 
WajOverrldeJRedirect or 
Wa_Event_Mask or 
WaJBitjSravlty or 
Wa_Win_Gravlty; 


— Declarations for the Alerts Info Window 


Alerts_Buffer 

: X^Llb.StringjPointer :■ new String' (• **) 

Alert8_6c_ValuejMa8k 

: X_Lib.Graphic jOutput.Gc JHa8k_Type 


GraphicjOutput.Gc_Font 

Alert8_Gc_yalue__Rec 

: X_Lib.GraphicjOutput.Gc_yalue_Record; 

Alert8jHaln_Attr8 

: X_ldb. Set_Window_Att ributesJRecord; 

Alert8^llain_Screen 

: X_Lib.Screen__Nuaiber; 

AlertsJWindow 

: X_Lib.Window; 

Alert8_Root_wind 

: X_Lib.Window; 

Alert8_BorderJWldth 

: X_Lib.Coordinate 2; 

Alerts_prawln 9 __Space 

: X_Lib.Drawable; 

Alerts^pisplay 

: X_Llb.Display; 

Alert8jDl8play_Contest 

: X_lilb.GraphicjOutput.Gre^iicjContext; 

Alert s_Window_X 

: X_Lib.Coordinate :• 0; 

Alert8jWindow_Y 

: X_ldb.Coordinate :■ 0; 

AlertsJWlndowjWidth 

: X_Lib.Pixel 433; 

Alert 8JWindow__Height 

: X_Lib.Pixel 90; 

Alerts^Status 

: X__Lib.Events.Coeipo8e_Statu8_Recoxd; 








Alert8jNa_Valutt8 : X_Llb.Na_Ma8k_Type:~ Wa_Background_Pixel or 

lla__Border_Pixel or 
Na^Curoor or 
Wa__Overrld«_R«dlrect or 
Na_Bvent_Ma8k or 
Wa_Blt_Gravity or 
WaJWinjGravity; 

’ Declarations for the ReconiBendations Info Nindow 


Recoiimendation8_Buffer 

Recoiiinendatlon8_Gc_Value_Ma8k 

Becoiinendatlons_Gc_Value_Rec 

Reconnendatlon8_Main_Attrs 

Reconnendatlon8_Main_.Screen 

Reconnendationsjirindow 

Recomnendat ions^RootJNlnd 

Recoanendatlon8_Borderjiridth 

Recaiinendatlon8_Drawing^Space 

Reconiiiendation8_0l8play 

Reconmendations^DlsplayjContext 

RecoimBendation8_Nindow_X 

Recoamendation8jNlndow__Y 

ReconnendationsJNlndowjNldth 

ReconmendationsjNlndow^Height 

Rec«inendations_Status 

Reconmendations Na Values 


String_Pointer new String'(• *) 
X_Lib.6raphic_0utput.Gc_Ma8k_Type 
• 6raphic_0utput.Gc_Font; 
6raphlc_0utput. 6c_Value__Record; 
Set_Nindow_Att rlbutes_Record; 
X_Lib. Screen__Muinber; 

X_Lib.Window; 

X_Lib.Window; 

X_Llb.Coordinate :■> 2; 

X_I«lb. Drawable; 

X_Lib.Display; 

GraphicjOutput.GraphicjContext; 


X_Llb.Coordinate 0; 

X_Llb.Coordinate :» 0; 
X_Llb.Pixel 433; 

X Lib.Pixel 90; 


Events.Coap 08 e_Status_Record; 
X_Lib. Wa_Ma8k_Type: - 

WaJBackground_Plxel or 
Wa__Border__Pixel or 
Wa Cursor or 


Wa Override Redirect or 









N« Bv«nt Mask or 


— Ooclaratlons for tha 

Intal_Buffar 

XnteljSc_yalua_Maak 

Intalj6c_yalua_nac 

lntal_Maln_Attra 

Iiital_Maln_Scraan 

Xntal_Nlndow 

Xntal_Root_Nliid 

Xntal_BordarJNidth 

Xntal_prawlfig_Spac« 

Xntal^piaplay 

Xntal^DlaplayjContast 

XntalJliiulow_X 

IntaljNlndowjr 

XntaljRlndowJlldth 

XntoljNindow^Halght 

Xntal^Statua 

Xntal Na Valuaa 


ira__Bitj6ravity or 
lla_llin_Gravity; 

Xntal Xnfo Nlndoa 

: X_Ub.8trlng_Polntar :« naw String'(* '*); 
: X__Llb. GraphicjOutput. Gc_Maak__Typa 

GraphicjOutput.Gc_ront; 
: X^Lib.Graphic jOutput.Gc_Valua_Bacord; . 

: X_liib. 8at_MiadoajAt t ributaajRaeord; 

: X__ldb.Scraan_lhaBbar; 

: X_Lib.Nindow; 

: X_Lib.Mindow; 

: X_ldb.Coordinate :■ 2; 

: X^itib.Orawabla; 

: X^ldb.Oiaplay; 

: X^ltib. GraphicjOutput. GraphicjContaat; 


X_ldb.Coordinate :* 0; 

X_idb. Coordinate :■ 0; 

X_Lib.Bixal 433; 

X Lib.Pixel 175; 


X_Lib. Bvent a. Coaipoae_8tatua_nacord; 

X_idb.ila_liaak_Type:» ffajBackground^Pixel or 
Na_Border_Pixel or 
lla_Curaor or 
WajOeerride_J<edirect or 
lia_BeentJlaak or 
lla_BitjBraTity or 
NaJfinjSraTity; 





’ Declarations fox the System_,Status Info Window 

System_Statu8_Buffer : StringjPointer new String''*); 


Sy8teffl_Status_Gc_Value_Ma8k 

Sy8tem_Statu8_6c_yalue_Rec 

Sy8tem_Statu8_Nain_Attr8 

Sy8tem_Statu8_Hain_Screen 

Sy8tem_Statu8jMindow 

Sy8tem_Statu8_Root_wind 

Sy8tem_Statu8_BorderjWidth 

Sy8tem_Statu8_prawing_Space 

System_Statu8_Di8play 

System^Status^DisplayjContext 

Sy8tem_Statu8_Window__X 

System_8tatusjNindow_Y 

Sy8tem_Statu8jNindowJNidth 

Sy8t«a_StatusjWindow_Height 

Sy8tem_Statu8_Statu8 

Sy8te8i_Statu8jWa_Value8 


X_Lib. GraphicjOutput. 6cjHa8k_Type 

:* GraphicjOutput.Gc_Font 
GraphicjOutput.Gc_Value_Record; 
X_Lib. Set_WindowjAtt ributesJRecord; 
X_Lib. ScreenJNuaber; 

X_Lib. Window; 

X_Lib.Window; 

X_Lib.Coordinate 2; 

X_Lib.Drawable; 

X_Lib.Display; 

GraphicjOutput.Graphic jContezt; 


X^XdLb. Coordinate :• 0; 

X_Lib. Coordinate :• 0; 

X_Lib.Pixel 433; 

X Lib.Pixel 254; 


X_Llb. Events. Coapo8e__St8tu8_Record; 
X_Lib. Wa_lU8k_Type:- 

Wa_Background_Plxel or 
Wa_Border_Pixel or 
Wa_^Cur8or or 
WajOverrideJRedirect or 
Wa Event Mask ox 


procedure Open^TacplotjDisplay; 
procedure 0pen_Track_Info_Di8play; 


Wa_BitjGravlty or 
WaJWinjGravity; 


procedure Open_Intel_Display; 


<7 






procedure 0pen_Sy8teB_Statu8_Diaplay; 
procedure 0pen_Alert8jDl8plaY; 
procedure 0pen_Reci3i—encl■tloaaJDlaplay; 

end 0pMi_Interface_pi8playa; 


package body 0pen__lnterface_Dl8play8 ia 
procedure 0pen__Tacplot_Dl8play la 
begin 

Opening the dlaplay, get the new Tacplot_piaplay, get the default 

— acreen, aet up the bo un da of the panel, get the root window Id 

— and then create a window with our new defaulta for the acreen. 

Tacplot.Olaplay :• X.Ub.XjSpenJDiaplay (**); 

if (TacplotJDlaplay - X^Llb.NulljDlaplay) then 
ralae DiaplayJKotjOpen; 
end If; 

TaeplotjHaln__8creen :• X__Llb.Default_8creen (TacplotJDlaplay); 

Ta^lotjRootJWlnd :* RootJXlndow (TacplotJDlaplay, 

Tacplotjllaln_8creen); 

Ta^lotjNalnjhttra.CarrentjCuraor :■> Curaor8.XjCreate_Font_Cttraor 

(Ta^lotjDlaplay, XjLlb.Curaora .XcjCroaa) 
TacplotjNalnJittra.BorderjPlxel X_Lib.BlaekjPlMl 

(Ta^lotjDiaplay, Ta^lot_llainj,8creen); 

TacplotJMaln_Attra.BaekgroundjPlxel :• 8; 

Tabletjllaln_Attr a. BltjOrawlty CenterjSrawity; 







Tacplot_Maln_Attrs.Nindow_Gxavlty Cantar_6ravlty; 

Tacplot_Maln_jKttrs.Bvant_Ma8k Events.Ejqwaura^Nask or 

Events. Button__Press_Mask or 
Events.Structure_Change_Mask 

— With siany of the parameters that we have just populated 

— we now create the window. The parameter Tacplot_Nlndow will 

— be the new wlndow_ld associated with this new window. 

Tacplotjlflndow : > 

X_Llb.X_Create J»lndow 
(Tacplot_0l8play, 

Tacplot^RootJXlnd, 

TacplotJNlndow^X, 

Tacplot_lllndow_Y, 

TacplotJNlndowJNldth, 

Tacplotjirindow^^Helght , 

Tacplot_BorderJlfldth, 

X_Llb.DefaultJDepth (Tacplot^Dlsplayr Tacplot_Haln_8creen), 
X_Llb.Znput_Output, 

X__l»lb.I>efault_Vlsual (Tacplot_Dl8play, Tacplot_Naln_Screen) 
Tacplot_lfa_Value8, 

Tacplot_Haln_Attrs); 

Event8.X_Select_lnput (Tacplot_pisplay, Tacplot_Wlndow, 

Tacplot_Maln_Attr8.Event_lla8k); 
X_Set_Icon_Nasw (Tacplot_Dl8play, TacplotJNlndow, *Tacplot*); 
X_Store_Naaw (Tacplot_Dl8play, Ta^lotJNlndow, '‘Tactical Plot*); 
X_Llb.Cursors.X_I>e£lnejCursor (Tacplot_J}lsplay, TacplotJEindow, 

<9 




Tacplot_Maln_Attrs.Curx«nt_Cursor); 
Tacplot_pr«i(ing_Spac« Drawabla (Tacplot_lfindoir); 

— Hare we set the text font to a 8X13 bold size and 

— create a GraphlcjContext for the specified drawable 
~ window. * 

Tacplot_6c_Value_Hac.Font_Id Fonts.X_Load_Font 

<TacplotJDisplay, *8xl3bold*); 

Tacplot_Display_Context Graphic_Output.X_Createj6c 

(Taeplot_Display, 
TacplotJDrawing^Space, 
Tacplot j6c_Value_Mask , 
Ta^lotj6c_Value_nec); 

—* Now we are going to Map the TacplotJNindow to the specified display 

X_Llb.X_MapJNlndow (TacplotJDisplay, Tacplot_Nindow); 

X^Lib.Events.X_Flush (Tacplot_Dlsplay); 

— This sets the text foreground color to be white 

— and the background color to be blue 

X_^Iiib. Gra^ic^Outpot .X^Set^Background 

(TacplotJDisplay, Taeplot_pisplayjContext, 8); 
X^liib. GraphicjOtttput. X_Set_Foreground 

(TacplotjDisplsyr TacplotJDisplayjContextr 0); 


70 








exception 


when Dlsplay_Not_Open -> 

Text_lo.Put_Line ('‘Could not open Display*); 
end (^n_Tacplot_Dlsplay; 


procedure 0pen_Track_Info_0l8play is 
begin 

— Opening the display, get the new Track__lnfo_Dlsplay, get the default 

— screen, set up the bounds of the panel, get the root window id 

— and then create a window with our new defaults for the screen. 

Track_,Xnfo_pisplay X^Llb.X_0pen_pi8play ('*’*); 

if (Track_Znfo_pi8play * X_Lib.MullJDi8play) then 
raise Display^Not^Open; 
end if; 

Track_Info_Main_Screen X_lJ.b.Oefault_Screen (Track_lnfo_Display); 

Track_Info_RootJifind X^Lib.RootJXindow (Track_lnfo_pi8play, 

Track^lnfo_Nain_Screen); 

Track^Znfo_Main_Attrs.Current_Cur8or: Cursors. X_Create_Font_Cur8or 

(Track_Znfo_Di8play, 

X_bib.Cursors.Xc_Box_Spiral); 
Track__lnfojMain_Attrs.Border_Pixel :■ 12; 

Track_Znfo__Main_Attrs. Background^Pixel :« 7; 

Track^Info_Main_Attr8.BitjGravity CenterjGravity; 

Track^Znfo_Main_Attrs.1Vlndowj6raTlty CenterjGravity; 


71 






Txack__Info_Maln_Attr8.Bvent_Mask Events.StructurejChang«_Ma8k; 

Track__In£o_lfindoi» :■ 

X_Lib.XjCraatajHlndow 

(Txack_In£o_J>iaplay, 

Track_In£o_Root_Mlnd, 

Track^InfoJXindow^X, 

Track_In£o_Wln<low_y, 

Track_Xn£oJNlndow_lfldth, 

Traek^XnfoJNlndoif^Halght , 

Track_XnfoJBoxderJNidth, 

X__Llb. I)a£ault_Dapth (Track_Xnfo_Di8play# 

Track_Xn£o_Maln_Screan), 

X^ldb. XnputjOutputf 

X_Llb.Dafault^Visual (Track_Xn£oJDi8play, 

Track_Xn£o_Hain^ScxMn), 

Track_Xn£oJXa_yalu«8 , 

Traok^Xnf oJNain_Attx8); 

Xv«nt8.X_Sel«ct_Xnput (Txack__Xn£o_0i8play, Txack_XnfoJNlndo«r, 

Txack_Xn£p_Maln_Attxs.Ev«nt_lla8k); 
X_S«t^Xcon_Maaw (Txack__Xn£o_Display, Txack__Xnfo_1findowr 
•Txack_Xn£o''); 

X_StoxejNaaM (Txack_Xn£o_pi8play^ Txack_Xn£oJltindoirr 
"Txack XnfoxaatlQn"); 

X_Llb.Cuxsoxs.X_De£ina_Cuxsox (Txack_Xn£ojDi8play, Txaek_Xn£ojirlndow, 

Txack_Xnf o_Maln_Att X8. CuxxentjCuxsox); 
Txack_Xn£o_Dxawlng_Spac« Dxawabla (Txack_XD£oJfflndow); 
Txack_Xn£p_6c__Valu8{_n8C.ront_Xd :• Fonts.X^Load^Fmit 

<Txack_Xn£o_pi8play, 'ExlSbold"); 
Txack_Xnfp_Di8playjCont«xt GxaphicjOutput.XjCreatajGc 

(Txack_Xn£o_Dlsplay, rxack_Xnfo_prawittg_Spac«r 


72 







TracJt_Info___Gc__Value_Ma8k,Track_Info_Gc_Value__Rec) 
X__Lib.X_Map_Window (Track_lnfo_Dlsplay# Track_Info_JI»indow); 

X_Lib. Events. X_Flush (Track__Info_Display) ; 

X_Ijib. Graphic_Output.X__Set_Background (Track_Info_Display, 

Track_Info_Di8play_Context, 7); 
X_Lib.Graph!c_Output.X_Set_Foreground (Track_InfoJDisplay, 

Track_Info_DisplayjContext, 1); 


exception 

when Display_Not_Open -> 

Textile.Put_l«ine (*Could not open Display"); 
end Open_Track_In£o_Diaplay; 


procedure Open^Alerts^Display is 
begin 

Alerts^Display :« X__Lib.X_0pen_Dl8play (*•); 
if (Alerts_Di8play > X_Lib.Mull_pisplay) then 
raise Di8play_Mot_0p>en; 
end if; 

AIerts__Hain_Screen :* X__Lib.Oefault_Screen (Alerts_Di8play); 
AIercs__Root_Nind :•* RootJNindow (Alerts_Display, Alerts_Main__Screen) 
Alert8__Nain_Attrs.Current_Cur8or :■ Cursors.X_Cre8te_Font_Cursor 

(AlertsJDisplay, X_Llb.Cursors.Xc_Man); 
AlertsjHain_Attr8.Border_Pixel 12; 

Alerts_Main_Attrs.Background_Pixel 4; 

Alerts_Main_Attrs.Bit_Gravity :■ Center^Gravity; 

Alert8_Main_Attr8.IfindowjGravity CenterjGravity; 

Alerts_Maln_Attrs.Event_Mask Events.Structure_Change_Mask; 

Alert8_Nindow 

X Lib.X Create Window 


73 







(Alerts_Display, 

Ale rt s_Root_Wind, 

Alert s_Window_X , 

Alerts_Window_Y, 

AlertsJWindowJMidth, 

AlertsJHlndow_Height, 

Alerts_Border_Hidth, 

X_Iilb.Default_Depth (Alerts_Di8play, Alerts_Maln_Screen), 
X_Lib.InputjOutput, 

X_Llb.Default_Vlsual (Alert8_plsplay, Alert8_Maln__Screen), 
Alert8_,Wa_Value3, 

Alerts Main Attrs); 


Eventa.X_Select_Input (AlertaJDlaplay, AlertaJWlndow, 
X_Set_Icon_Name (Alerts^piaplay, Alert8_lflndow, "Alerta"); 
X_Store_Naiiie (Alert8_Dl8play, AlertajWindow, "Alerts"); 

X__Llb.Cursors.X_Deflne_Cursor <Alerts_Dlsplay, AlertsJNindow, 

Alerts_Main_Attrs.CurrentjCursor); 
Alerts__Drawln 9 _Space : Drawable (Alerts^Nlndow); 

Alerts_Gc_Value_Rec.Font_ld :■ Fonts.X_Load_Font 

(AlertsJDlsplay, "SxlSbold"); 

Alerts_Display_Context Graphic__Output.X_Create_Gc (AlertsJDlsplay, 

Alerts_Drawin 9 _Space, Alerts_Gc_Value_Mask, 
Alerts_Gc_Value_Rec); 

X_Lib.X__MapJMlndow (Alerts_Display, AlertsJXindow); 

X__Llb. Events. X_Flush (Alerts_Display); 

X_Lib.Graphlc_Output.X_Set_Back 9 round (Alerts_Di8play, 

Alert8_Dlsplay_Cont«Kt:, 12); 
X_Lib.Graphic_Output.X_Set_Fore 9 round (Alerts_Di8play, 

Alerts^plsplayjContext, 1); 


exception 






74 



when Display_Not_Open -> 

Text_Io.Put_Line (*Could not open Display"); 
end Open_Alerts_Display; 


% 


procedure Open_Recoinroendatlons_Display is 
begin 

Recoimnendations_Display X^Lib.X_0pen_Di8play (**); 

if (Recoimendations_Display - X_Lib.Null_Display) then 
raise Display^Not_Open; 
end if; 

Recoinnendations_Main_Screen X_^Lib.Default_Screen 

(RecoiiiDendations_Display); 
Recoiiinendations_Root_Hind :• X_Lib.Root_Nindow 

(Recomnandat ionsJDi splay , 
RecoiinendationsJMain_Screen); 
Recoiiinendations_Hain_Attr8.CurrentjCursor :■■ 

Cursors.X_Create_Font_Cursor 

(Recoinmendations_Dlsplayr X_Lib.Cursors.Xc_6obbler); 
Recoiinendations_Main_Attrs.Border_Pixel :• 12; 

Recoinmendations_Main_Attrs.Background^Plxel 6; 
Reconniendations_Maln_Attrs.Blt_Gravity :• CenterjSravity; 

Recoiiniendations_Maln_Attrs.Window_Gravity :•> CenterjSravity; 

Recoiiinendations_Main_Attrs. Event_Maslc : ■■ 

Events. Structure__Change_Mas)c; 

RecomnendationsJBindow :• 

X_Lib.XjCreateJHindow 

(RecomnendationsJDisplay, 

Recaiiinendations_RootJWindr 
Recoomendations lfindow_X, 


75 





Recoinnen(iatlons_Hinclow_y, 

Recoinnendations_Wlndow_Hidth, 

Recoinmendatlons_Wlndo%i’_Height, 

ReconBnendation3_BorderJNidth, 

X_Llb.Default_Depth (Reconmendatlons_Display, 

Recoinmendations_Main_Screen ), 

X_Lib.Input_Output, 

X_Lib.I>e£ault_Vi3ual (ReconBMndation3_Di8play, 

Recoimnendation3_Main_Screen), 
R«coinnendation3jWa_Value8, 

Racoinnendation8_Main_Attr8); 

Event8.X_Select_Input (RecoinBendation8_Di8playr 

Reconraendation8_Wlndoif, 
Recoinmendatlon8_Main_Attr8.Event_Ma8lc); 
X_S«t_Icon_NaiM (ReconnendatlonsjDisplay, ReconnendationsJNindow, 

"Recomnendations*); 

X_Store_Naine (Recomnendatlons^Dlsplayr ReconnendatlonsJNindoWr 

"Raconmendations*); 

X_Xiib. Cursora.X_D«£lne_Cur8or (Recoiiinendations_Di8play, 

RacoimendationsJNindow, 

Reconnendatlons_Maln_Attr8.CurrentjCursor); 
R«connwndatlon3_Drawing_Space Drawable (Racomnendatlonsjirindow); 
R«coamendation8_Gc_Value_Rec. Font_Id : - 

Fonts.X_I<oad_Font (Recoiimendation8_Dl8play, '‘BxlSbold"); 
R«coanendation8jDl3play_Context 

Graphic^Output.X_Creat«_Gc (RacomnendationsJDisplayr 

R«c«iiBendations_Drawlng_Space, 
R«coiimndation8jQc_Valu«JHask, 
RecoaMndation8__6c_Valua_R«c); 

X_Lib.X_MapJlfindotr (Racoanendatlons_Display, RacoaniandatlonsJNlndow); 


76 










,.1!U 




X_Lib. Events. X_Flush (Recoinmendations_Display); 

X_Lib. GraphicjOutput. X_Set_Background (RecomnendationsJDlsplay, 

RecoBBnendations_Dl8play_^Context, 6); 
X_Lib. GraphicjOutput .X_Set_Foreground (RecoaonendatlonsJDlsplay, 

Reconmendatlons_Dl8playjContext, 0); 


exception 

when Di8play_Not_0pen »> 

Text_lo.Put_Line ("Could not open Display"); 
end Open__Recoinmendations_Display; 


procedure 0pen__Intel_Dl8play is 
begin 

Intel_Oisplay X_Lib,X_OpenJDisplay ("•); 

if (Intel_Display - X_^Lib.Null_pi8play) then 
raise Display_Not_Open; 
end if; 

lntel_Main_Screen X_Lib.Default_Screen (Intel_Di8play); 
lntel__Root_Wind RootjXindow (lntel_Display, Zntel_Maln_Screen); 
Intel__Main_Att rs. Current__Cursor : ■ 

X_Lib.Cursors.X_Create_FontjCur8or 
<Intel_Display, X_Ijib.Cursors.Xc_Que8tion_Arrow); 
Intel_Main_Attrs.Border_Pixel 12; 

Zntel_^Hain_Attrs.Bacliground_Pixel 13; 

Intel_Main_Attrs.BitjGravity :■ CenterjGravity; 

Intel_Maln_Attrs.llindow_Gravity ;■ CenterjGravity; 

Intel_Main_Attrs.Event_Mask Events. Structure_Change_Ma8)c; 


77 





IntelJWindow 

X__Llb. x_Create_NlndoH 
(Intel_0l8play, 

Intel__Root_Mlnd, 
lnteljlfindow_X, 
lntel_Window_Y , 
lntel_lfindOM[_iridth, 

IntelJNlndow_Helght , 

Zntel_BorderJNldth, 

X_Llb.Default_Depth (Zntel_Display, Intel_Main_Screen), 

X^Llb.Input_Output , 

X_Lib.De£ault_Vi3ual (Zntel_Dlsplay, Intel_Maln_Screen), 
InteljWa_Value8 , 

Intel_Main_Attr8); 

Events.X__Select_Znput (Intel JDlaplay^ ZntelJNlndow, 

Intel_Nain_Attrs.Bvent^Mask); 
X_Set_Icon_NaBie (ZntelJDlsplayr ZntelJNlndow, ''Intel'); 

X_Store_Maa» (Intel_pi8play, intelJWindow, ''Intelligence'); 

X_Iiib.Cursors.X_De£lnejCur8or (IntelJDlsplay, Intel_Nlndowr 

Intel_Maln_Attrs.Current jCursor); 
Intel_Ora«ring_Space Orawable (IntelJKindow); 
Intel_Gc_Value_Rec.Font^Id :■ ront8.X__Load_Font 

(Intel_pi8playr *8xl3bold'); 

Intel_DlsplayjContext GraphlcjOutput.X^CreatejSc (IntelJDlsplay, 

lntel_prawing_Space, Intel^GCjValuejMasIc, 
InteljGc_yalue_Rec); 

X_Lib.XjMapJNlndo«r (IntelJDlsplay, IntelJNlndow); 

Xj,Llb. Events. X^Flush (IntelJDlsplay); 

6raphlc_0utf»it. X_Set_Bac)cground 

(IntelJDlsplay, InteljDispleyjCMitext, 13); 


78 






% 


X_l<lb. Graphic_Output. X_Set_^Foregrouncl 

(IntelJDlsplay, Xntel_Display_Context, 1); 

exception 

when Diaplay_Not_Open -> 

Text_Zo.Put^Llne <'‘Could not open Display*); 
end 0pen_Zntel_Dl8play; 


procedure 0pen_Syatem_Status_J>l8play is 
begin 

Sy8tem_,Status_Display :■ X_Lib.X_Open_Display {***); 
if (Sy8tem_Statu8_Display - X_Lib.Null_Display) then 
raise Di8play_Not_Open; 
end if; 

Sy8tem_Statu8_Main_Screen :■ Default_Screen (Systen^StatusJDisplay); 
System_Statu8_RootJlflnd X_Lib.RootJWindow (Systen^StatusJSisplay, 
System^Status^Main^Attrs.CurrentjCursor :- 

X_^Lib. Cursors. XjCreate_Font_Cur8or 
(Sy8tem_Status_Display, X_Lib.Cursors.Xc_Bogo8lty); 
SySternestatu8_Maln_Attrs.Border_Pixel 12; 

Sy8tem_StatusJHain_Attrs.Background_Pixel 14; 

Sy8tem_Status_Main_Attrs.Blt_6ravity CenterjSravity; 

Sy8tem_Statu8_Main_Attr8.irindow_Gravity CenterjGravlty; 

Sy8ta8i_Statu8_Main_Attrs. Event^Nask : - 

Events.StructurejChange_Mask or 
Events.Expo8ure_Na8k or 
Events.Eutton^PressjMask; 

Systeei_8tatu8jNindow 
X_Lib. Xj:reateJfindow 

(Systoni_StatttS_Dlsplay, 


7f 




System_Status_Root_Hind, 

Systam_StatusJMlndotf_X, 

Sy8t«m_Statu8_Nindo«'_y, 

Sy8t8m_Statu8_lflndoM_irldth, 

Sy8tem_Statu 8 _Nlndow_Hei 9 ht , 

Sy8tam_Statu8_Border_Nldth, 

OefaultjDepth 

(Syataai^StatuaJDiaplay, Sy8tem_Statu8_Nain_Scx««n ), 
X_ltlb. InputjOutput t 
X_Llb.Oafault_Vl8ual 

(Sy8tan_Statu8_pi8play, Sy8taai__Statu8jMaln_Sexaan), 
Sy8ta8i_Statu8jNa_Valua8, Sy8tan_Statu8_Maln_Attr8); 

Evant8.X_Salaet_Ii^t (Syatam^StatuajDiaplay, Sy8tam_Statu8_Nindow 

Sy8taaijStatu8_Maln_Attr8. BvantJMaak); 

X_Sat_XconjMaaw (8yataai_8tatus_plsplay, SyBtmm^SttusjUindom, 

'*8ystaai_8tatu8*); 

X_8tota_llaa8 (8ystaa(_8tatu8j>l8play, 8y8taai_Statu8jrindow, 

*8y8taai Statua*); 

X_l<lb. Curaora. XjDafInajCuxaor (8yat8a_8tatu8_pisplay, 

8y8taai_8tatua_lllndow, 
8ystaa_Statu8jNaln_Att ra. CurrantjCuraor) 

Sy»ta«_StatuajDrawiiig_8paoa Drawabla (8y8ta«_8tatuaJllindoir); 

8y8taai__StatttajGc_Valua_n8c.ront_Xd :• 

ronta .X_Load_ront (8y8t8ai_8tatua_Diaplay, 'SxlSbold*) 

8y8taai_StatuajDi8playjContast ;• OraphicjOutput.XjCxaatajSc 

8y8taai_8tatua_Di^lay, 
8y8taai_Statua_prattiiig[j8paoaf 
Sy8taai_8tatuaj9e_yalua_llaak, 
Systaai_8tatus_6c_yalua_llac); 

X_Xdb.X_llapJlliidow <Syataai_Stataa_Di^lay, 8ystaai_StatusJliBdoii); 

X.Xdb.Bvmta.X_riu8h (Sy8taai_8tatua_Dl^ay); 







.a?r* 





X_Lib.Graphic^Output.X_Sat_Background 

(Sy8teai_Status_Display, Syst«m_Statu8_Dl8playjContaxt, 14) 
X_Llb.Graphlc_Output.X_Set_Foreground 

(Sy8tam_Statu8jDi8playr Sy8tan_Statu8jDl8play_Contaxtr 1); 

axception 

whan Dl8play_Motj0pan -> 

Taxt__Io.Put_Llne ('‘Could not open Dloplay*); 
and 0pan_Sy8tam_Statu8jDl8play; 


and 0pan_lntarfaca_Dl8play8; 




81 






APPENDIX B 


MONITOR DISPLAYS 


Author: Michael 6. Stockwell 
Date : 12 September 1991 


Oeacrlption: Timers and Update Tasks for all displays. 


with X_lib, Xntegration_System_Pkg« Tacplot_Pkg, 

Open^Znterface_^Displays, Process_Inter£ace_pisplays, 
Draw_pisplay_6raphies, System_,Status_Pkg; 
use X_lib, Integration_System_Pkg, Tacplot_Pkgr 

0pen_ZnterfacejDisplay8, Proce8S_lnter£ace_pl8plays, 
DrawJDl8play_6raphics , System^Status_Pkg; 


package Monitor^Oisplays is 

procedure Te8t_Sy8tem_Statu8; 
task Monltor_Update_Znterval8; 


end Monitor^plsplays; 










package body Monitor_Oisplays is 
use Graphic_Output; 
procedure Test_Systeni_Status is 

Eqpt_Status : Status DOWN; 

begin 

X_ClearJlfindow (System_Status_Display, System_StatusJNindow); 
X_Draw_Inage_St ring 

(System_Status_Display, System_Statu8jDrawing__Space, 
System_Status_Display_Contezt, 

5, 15, 

"GPS System: 

INTBGRATION_SYSTEM.GET_SENSOR_STATUS ( GPS, Eqpt_Status ); 
if Eqpt_Status « DOWN then 
Hrite_Gps_Status_Do»m ; 

else 

llrite_Gps_Status__Up; 
end if; 

X__Draw_Ziiiage_St ring 

(System_Statu8_Display, System_Status_Drawing_Space, 
Sy8teffl_Status_Di8play_Context, 

5, 45, 

•U-nk 11 : *); 

IllTEGRATION_SySTEM.GET_SENSOR_STATUS ( LINK, Eqpt_Status ); 
if Bqpt_Statu8 ■ OONN then 
Write_Link__Statu8jDoen; 

else 

1frite_Link__Status_Up; 
end if; 


83 


X_DraM_,Image^St ring 

(System_Status_pisplay, Sy8tem__Status_Drawing_Space , 
Sy3tem_Status_Diaplay_Context, 

5, 30, 

•Radar 1 : •); 

ZMTEGRATION_SySTEM.GET_SEMSOR_STATUS ( Radar, Eqpt_Status ); 

If Bqpt_Statu8 * DONN then 
Nrlte_Radar_Statua_Do«n; 

else 

Nrlte_Radar_Statu8jOp; 
end if; 

XJDraw_Iinage_St ring 

(Sy8tem_Statue^pieplay, Sy8tem_Statu8_prairing_Space, 
Sy8tem_Statu8_J>i8play_Context, 

250, 15, 

•Fathoneter: *); 

ZNTEGRATIC»l_SYSTEM.GET_SENSOR_STATUS ( FathooMter, Bqpt_StatU8 ); 
if Bqpt_Statu8 * OONN then 
llrite_Fath_Statu8_Do«ra; 

elae 

llrite_Fath__Statu8_Up; 
end if; 

X_praw__Z8uige_String 

(Sy8t«B_Statu8jDi8play, Sy8teim_Statu8_Drawing__Space, 
Syaten^Statu8_pi8play_Contezt, 

250, 30, 

•Gyro ; •); 

Zim(»ATZON_SYSTEM.GBT_SCMSOR_STATUS ( Gyro, Eqpt_StatU8 ); 
if Iqpt^Status • DONN then 
Write_Gyro_8tatu8jDoim; 


else 



lfrite_Gyro__StatU8_Up; 
end if; 

X_Draw_Iinage__St ring 

(System__Status_pi8play, System_Status_prawing_Space , 
Systein_Status_Display_Context, 

250, 45, 

'‘Pitaword ; *); 

ZNTEGRATION_SYSTEM.GET_SENSOR_STATUS ( Pitsword, Eqpt_StatU8 ); 
if Eqpt_Statu8 - DONN then 
l(rite_Sword__Statu8_Down; 

elae 

llrite_Sword_Status_Up; 
end if; 

end Te8t_Sy8tem_Statu8; 

taak body Monitor_Update_Intervala ia 

SECONDS : conatant DURATION :• 1.0; 

INTERVAL : conatant DURATION :•* 4 * SECONDS; 

begin 

delay (Interval); 
loop 
begin 

delay (Interval); 

1NTEGRATIC»I_SYSTEM.riLL_TACPLOT; 

DISPLAY_TACPLOT; 

exception 

when othera ~> PUT_LINE ('"Exception in Tiaier Taalc"); 
end; 

end loop; 

end Honitor__Update_Interval8; 


85 



begin 

null; 

end Monitor_pisplays 









w 


.1 1 11;; I ■■■‘■^■' 


APPENDIX C 

PROCESS INTERFACE DISPLAYS 

Author: Michael G. Stockwell 
— Date : 21 September 1991 

Description: Handles all information processing prior to writing 
that information to the screen. 

with Track_Plcg, Cpa_Pkg, Absolute_Time_Pkg, Global_Observation_Pkg, 
X_Lib« VStrings, Calendar, System_Status_Pkg, Draw_pisplayjSraphics, 
Vector_2_Pkg, Text_IO, Angle_Pkg, Speed_Pkg, Velocity__Pkg, 
Giobal_Posltlon_Pkg, Relative_Positlon_Pkg, Relative__Timo_Pkg, 
Distance_Pkg; 

use Track^Pkg, Cpa_Pkg, Absolute_Tirae_Pkg, Global_Observation_Pkg, 
X_Llb, Velocity_Pkg, Draw_Display_Graphics, Vector_2_Pkg, Text_IO, 
Angle_Pkg, Speed_Pkg, Calendar, System_Status_Pkg, 61obal_Position_Pkg, 
Relatlve_Posltion_Pkg, Relatlve_Time_Pkg; 

package Process_Interface_Displays is 

package APKG renames TRACK^PKG.ANP_STR; 
use APKG; 

package VPKG renames TRACK_PKG.V_ANDjC_STR; 
use VPKG; 


«7 





package Te8t_Float_I0 ia nee Float_IO (Float); 
package Teat_.Integer_IO is new Integer_ZO (Integer); 
use Te8t_Float_lO, Test__lnteger_lO; 

procedure Process_Tacplot_Objects (Current^Track: In 

procedure Process_Hook_Position (Hook_Positlon_X: in : 

Book_Position_Y: in X, 

procedure Set_Ay_Xlerts; 
procedure Set_yi8ual_Jllerts; 
procedure Disable_Alert8; 

procedure SetjCPA_Alert_Range (Alert_Range: in Float); 
procedure Set_Fllter_Status (Stat : in String); 

function Get_Ownship__Track return Track; 
function (3et_Hooked_Track_Nuinber return Natural; 
function Get_Hooked_Track_Object return Track; 


package body Proces8_Znterface_Display8 is 
subtype Coord is X_Lib.Coordinate; 


Ownship^^Track 

Ownship^Name 

Hooked_Track__Flag 

No_Alert_Flag 

Vi 8__Alert_Flag 

Filter__Set_Flag 

Nav_Nan_Flag 

CPA_Alert_lUnge 

Hooked__Track 

Hooked Track No 


Track; 

String (1..12) :> 
Boolean :■ False 
Boolean False 
Boolean False 
Boolean False, 
Boolean :■ True; 
Float 3000.0; 
Track; 

. Natural; 


Track); 

;_lib. Coordinate; 
lib.Coordinate); 


"USS Spanagel*; 


Hook X 


Coord 0 








Hook_Y 

Screen_Scale_^Factor 

Target_Position_Scale__Factor 

Surface_Velocity__Scale__Factor 

Air_Velocity__Scale__Factor 

Scale_Selector_Up_Center_^X 

Scale_Selector_up__Center__Y 

Scale_SelectorjDown__Center_X 

Scale__Selector__Do%m__Center_Y 

procedure Proces8^Tacplot_0 
Current_Traclc_Category 
Point_Category 
CBDR_Alert^Range 
Target^Identlty 
Target_Poaition__X 
Target_Position_Y 
Target_Coordinate_X 
Ta rgetjCoordlnate_Y 
Target_Relatlve_Po8ltion 
0«mship_RelatlveJPositlon 
Velocity^X 
Velocityjr 
Tlme^Now 
VES 
AMP 

TrackJMo 

Tgt_Cpa 

TgtjCpa_Range 

TgtjQpa_^Bearlng 

IgtjCpa^Hours 


Coord 

• m 

0; 

Float 


32000.0 

Float 

;■ 

91.43; 

Coord 

:* 

3; 

Coord 

:• 

10; 

Coord 

:■ 

65 ; 

Coord 

;» 

40; 

Coord 


25 ; 

Coord 


40; 


(Current_Trac)c; in Track) is 
TrackjCategozy; 
Special^PointjCategory; 
; Float :» 500.0; 

; Identityjrype; 

: Coord; 

: Coord; 

: Float; 

Float; 

Relative_Position; 

RelativejPoaition; 

: Coord; 

: Coord; 

Absolute^Tine; 

String (1..B0); 

String (1..80); 

Natural; 

Cpa^Type; 

Float; 

Float; 

Natural; 


89 






Tgt_Q>a__Min8 

T<jt_L8tjDeg 

Tgt_I.at_Min 

Tgt__liat_Sec 

Tgt_Lat_Dir 

Tgt_liong_Deg 

Tgt_Long_Min 

Tgt_Long_Sec 

Tgt_Ijong_Dir 


Natural; 

Natural; 

Natural; 

Natural; 

North__South 

Natural; 

Natural; 

Natural; 

East llaat; 


function Coiiipute__Sur£ace_Valocity_X ( Currant_Track: in Track) 
ratum Coord is 
begin 
return 

((Coord(Integer(XjCoordinate(True^Velocity(Current^Track))))) 

* Sur£ace_Velocity_ScaleJFactor); 

end Coiig)ute_Surface_VelocityJX; 
function CoiBpute_Air^Velocity_X ( Current_Track: in Track) 
return Coord is 
begin 
return 

((Coord(Integer(XjCoordinate(True_Velocity(Current_Track))))) 

/ Air_Velocity_Scale_Pactor); 

end Coaipute_Air_yelocity_X; 

function Coe 9 ute_Surface_yelocity_Y ( Current_Track: in Track) 
return Coord is 
begin 
return 

((Coord(Integer(YjCoordinate(True_yelocity(Current_Track))))) 

* Surface_yelocity_ScaleJPaetor); 
end Coapute_Surface_yelocity^Y; 





90 






function Coiipute_Air_Velocity_X ( Current__Track: in Track) 
return Coord is 
begin 
return 

((Coord(Integer(Y_Coordinate(True_Velocity(Current_Track))))) 

/ Air^Velocity_Scale_Factor); 

end Coiiipute_Air_Velocity_Y; 
begin 

Time_NOW ABSOLOTE_TIME_PKG.HOII; 
if Track_ID_Nunber(Current_Track) • 0 then 
Clear_Interface_Displays; 

DrawJDisplay^Attributes; 

if Nav__Man_Flag then 
Write_Nav_Status ("Manual "); 

else 

WritejHay_Statas ("Automatic”); 
end if; 

if Filter_Set_Flag then 
Write_Filters_Status ("Set”); 

else 

lfrite_Fllter8_Statu8 ("None”); 
end if; 

if No_Alert_Flag then 
Nrlte_Alert8_Statu8 ("None”); 
elsif Vis__Alert_Flag then 
Nrite_Alerts_Statu8 ("Visual”); 

else 


91 



Write_Alerts__Status ("Both"); 
end if; 

Write_Range_Scale 

(Natural'Image(Natural(Screen_Scale_Factor/2000.0))); 
Nrite_Hours (Natural' Image (Hours (Time_of_Day (Tline_NOlf)))); 
Nrite_Mins (Natural'Image(Minutes(Time_of_Day(Tiine_N0W)))); 
0«fnship_Trac)c :■ Current_Track; 

Velocity_X ;« Coiig)ute_Surface_Velocity_X (CurrentJTrack); 
Velocity:jr :■ Coin)ute_Sur£ace_velocity_Y (Current_Track); 
Draw_Tacplot_Speed_Iieader (Centerpoint_X, Centerpoint_y, 

VelocityJC, Velocityjf) ; 

if Hooked_Track_Flag and (Hooked_Track_No *0) then 
Draw_Tacplot_Hook (Centerpoint_X, Centerpoint_y); 

Write_Tgt_Cse (Natural'Image(Natural(Radian8__toJDegrees 
(True_Courae(0»m8hip_Track))))); 

Nrlte_Tgt_Spd (Natural'Image(Natural(Speed_ln_Knot8 
(True_Speed(0wn8hip_Track))))); 

1lrite_Tgt_Id ('FRIENDLY') ; 

Wrlte__Tgt_Update_Hour8 (Natural'Image(Hours 

(Time_of_Day (Mo8t_Recentj0b8ereation 
(Ownshlp_Track).Observation_Time)))); 

Write_Tgt_Update_Mins (Natural'Image(Minutes(Time_of_Day 

(Mo8t_Recent_(^8ervation 
(Oim8hip_Track) .(^servation^^Time)))); 
llrite_Tgt_Cla88 ('OMNSHIP') ; 

Nrite_Tgt_Mame ("USS SPANA6EL'); 

Get_Latitude ((Current_Po8ition(Ownship^Track)), 

Tgt_Lat_Dir, Tgt_Lat_Deg, Tgt^Lat_Min, Tgt__Lat_Sec); 
(3et_Iiongitude ((Current^Position (Ownship^Track )), 


92 






Tgt_I.ong_Dit, Tgt_I.ong_Deg, Tgt_Long_Min, 
Tgt_IiOng_Sec); 

llrite_Tgt_Lat_Position (Natural'Image(Tgt_LatJDeg), 

Natural'Image(Tgt_Lat_Mln ), 

Natural' Image (Tgt_Lat_^Sec ), 
North^South'Image(Tgt_I.at_Dir)) ; 
Write__Tgt_Long_Poaition(Natural'Image(Tgt_Long_Deg), 

Natural'Image(Tgt_Long_Min), 
Natural'Image(Tgt_Long_Sec), 
EaatJNest'Image(Tgt_Long_plr)); 

end if; 
return; 
elae 

C>tm8hip_Relative__Po8itlon : - Flnd_Relatlve_Po8ition 
((Current_P 08 ition(Oim 8 hlp_Track )), 
(Current_Po8ition(Current_Track))); 

Target^Relatlve_Po8ltlon FlndjEtelatlvejPosition 
((Current^Poaition(Current_Track )), 
(Current_P 08 ition(OwnshipJTrack))); 

if (RANGE__OF ( Target_Relatlve_Position)) 

> Screen_Scale_Factot then 
return; 
end if; 
end if; 

TrackJHo :* Natural(Track_Id_Nunber(Current_Track)); 

Tgt_Cpa Find_CPA (Current_Track, (}im8hlp_Track); 

TgtjCpa__Range ;■ Iiength(Tgt_CPA.CPA_Bearlng_and_Range); 
TgtjCpa_Bearing :* fUdian8_toJDegree8 


93 







(Direction(T 9 t_CPA.CPA_Bearin 9 _and_Ran 9 e)); 
Tgt_Cpa_Hour8 :■ Hours (Tiaie__o£_Day(Tgt_CPA.Tiine_of jCPA)) ; 
Tgt_Cpa_Mins Minutes (Tiine_o£_Day (TgtjCPA.TimsjofjCPA)); 

if not No_Alert_Fla 9 and (T 9 tjCpa_Ran 9 e < CPA_Alert_Ran 9 e) then 

Write_CPA_Alert ((Natural' Istage (TrackjNo )), 

(Natural*Image(Natural(T 9 t_Cpa_Bearin 9 ))), 
(Natural*Image(Natural(Tgt_Cpa_Range))), 

(Natural*Image(Tgt_Cpa_Hour8)), 

(Natural*Image(Tgt^CpaJMins))); 
if not Vis_Alert_Flag then 
put (character*val(7)); 
end if; 
end if; 

Target_Coordinate_X ;• (XjCoordinate(Target^Relative^Position)) 

/ Target_Po8ition_Scale_Factor; 

Target_Coordinate_Y :■ (YjCoordinate(Target JRelativeJPosition)) 

/ Target_P 08 ition_Scale_Factor; 
Target_Po8ition_X Centerpoint_X + 

(Coord(Integer(Target_Coordinate_X))); 
Target_Po8ition_Y :■ Centerpoint^Y - 

(Coord(Integer(Tar 9 et_Coordinate_Y))); 

if (Hooked__Track_Flag • True) and 

(Hooked_Track_No - Natural(Track_ld_Nunber(Current^Track))) then 

Draw_Tacplot_Hook (TargetjPositionjCr Target_Po8ltlon_Y); 
WritejTgt jCse (Natural * Image (Natural (NadiansjtoJDegreee 
(True_Cour8e(Current Track))))); 


94 




Wrlte_Tgt_Spd (Natural'Image(Natural(Speed_in_Knots 
(True__Speed(Current_Track))))); 

Wrlte_Tgt_Brg 

(Natural'Image(Natural(Radian8__to_Degrees(TrueJBearlng 
(Ownshlp_Track, Current^Track))))); 

Wrlte_Tgt_Range (Natural'Image(Natural 

(Range_of(Target_Relative_Position)))); 

Write_Tgt_No 

(Natural' Image (Natural (Track__Id_NuJBber (Current__Track)))) ; 
lfrite_Tgt_Ctl_Type (Control_Type'Image(Control(Current_Track))) 
Write_Tgt_Update_Hours (Natural'Image(Hours 

(Time__of_Day (Most_Recent_Observation 
(Current_Track) .0b8ervation_Tiine)))); 
irrlte_Tgt_Update_Min8 (Natural'Image(Minutes 

{Time^of_J>ay (Most_ltecent__Observation 
(Current_Track).0b8ervation_Time)))); 
6 et_Latitude ((Current.Position(Current_Track )), 

Tgt_I.atJDir, Tgt_I.atJDeg, Tgt_I»at_Min, Tgt__Lat_Sec) 
Get_I«ongltude ((Current^Position (Current_Track)), 

Tgt_Long_Dir, Tgt_Long_Deg, Tgt_Long_Min, 
Tgt_Iiong_Sec); 

Write_Tgt_Lat_Position (Natural' Image (Tgt__I.at_peg ), 

Natural'Image(Tgt_Lat_Min ), 

Natural' Image (Tgt_Lat_Sec ), 

North_South' Image (Tgt__Lat_Dir)); 
Nrlte_Tgt__IiOng_Po8ition (Natural' Image (Tgt__Long__peg ), 

Natural'Image(Tgt_Long_Mln ), 

Natural' laiage (Tgt_Long_Sec), 

EastJNest' Image (Tgt__Long_Dir)); 
Nrite__Rel_Brg (Natural' Image (Natural (Radlans^to^Degrees 

(Relatlve_Bearlng(0wn8hlp_Track, Current_Track))))); 


95 








Nrlte_Rel_Spd (Natural'Image(Natural(Speed_Zn_Knot8(Spd 

(Target_Relative_Velocity (Oimship__Track, Current_Track)))))) 
Wrlte_Tgt_Angle (Natural'Image(Natural(Radians_to_Degrees 

(Relative_Bearing(Current_Track,OHnship__Track))))); 
Mrite__Tgt_An?)_In£o (APKG. STR (Rmpl_Inf o (Current_Track>)); 

if ((Trk_Category(Current_Track)) » Surface_Plat£orm) or 

((TrkjCategory(CurrentJTrack)) - Subsur£ace_Plat£orm) then 
Nrlte_Tgt_Cla88 (VPKG.STR(Plat£orm_Cla88(Current_Track))); 
Nrite_Tgt_Id 

(Identity_Type'Image(Track_Identity(Current_Track))); 
Nrite_Tgt_Name (VPKG.STR(Ve88el_Name(Current_^Track))); 
end 1£; 

if ((TrkjCategory (Current_Track)) - Rir__Plat£orm) then 

Write_Tgt__Cla8a (VPKG. STR (Platform^Claaa (Current__Track))) ; 
Nrlte__Tgt_Id 

(ldentity_Type'Image(Track_Identity(Current_Track))); 
Nrlte_Tgt_Height (Integer'Image(Integer 

((Altitude(Current_Track)* 3.0)))); 

end If; 

if (Tgt__CPA.Time_of_CPA) < ABSOLUTE_TIME_PKG.NON then 
Nrite_Tgt_CPA_PNO; 
elalf TgtjCpa_Range < 500.0 then 
Nrlte_Tgt_CPA_CBDR; 

elae 

Wrlte_Tgt_CPA_Bearlng (Natural'Image(Natural(TgtjCpaJBearlng))) 
*»rlte_Tgt_CPA_Range (Natural'Image(Natural(Tgt_ppa_Range))); 

Wrlte__Tgt jCPA_Hour8 (Natural' Image (TgtjQpa^Houra)); 

Nrlte_Tgt_CPA_Mln8 (Natural' Image (Tgt_Qpa_Min8)); 







end if; 
end If; 

if Hooked_Track_Flag * False and 

(abs{Hook_X - Target_Position_X)) < 10 and 
(abs(Hook_Y - Target_Position_Y)) <10 then 
Hooked_Track_Flag :■ True; 

Hooked_Track :■ Current_Track; 

Hooked_Tzack_No Natural(Track_Id_Nuinber(Current_Track)); 
Ora«r_Tacplot_Hook (Target_Position_X, Target__Position_Y); 
Nrite_Tgt_Cse (Natural' Image (Natural (Radians__to_J>egrees 
(True_Courae(Current_Track))))); 

Write_Tgt_Spd (Natural'Image(Natural(Speed_in_Knots 
(True__Speed(Current_Track))))) ; 

Hrite_Tgt_Brg 

(Natural' Image (Natural (Radians^tojDegrees (True_Bearing 
(Ownship_Track, Current_Track))))); 

Nrite_Tgt_Range (Natural'Image(Natural 

(Range_of(Target_Relative_Position)))); 

Nrite_Tgt_No 

(Natural'Image(Natural(Track_Id_Number(Current^Track)))); 
Wrlte_Tgt_Ctl_Type (Control_Type'Image(Control(CurrentJTrack))); 
Nrite_Tgt_Update__Hours (Natural' Image (Hours 

(Tims_of_pay (Most_Recent_Observation 
(Current_Track).Observatlon_Time)))); 
Wrlte_Tgt^Update_^Mins (Natural' Image (Minutes (TiiBe_of JDay 

(Most_Recent_Observation 
(Current^Track).Observatlongtime)))); 
Get^Latitude ((Current_Positlon(Current_Tracfc )), 

Tgt_Lat_Dir, Tgt_Lat_I>eg, Tgt_Iiat__Min, Tgt_I.at_Sec); 
<3et_l>ongitude ((Current_Position (Current_Track )), 

Tgt_Long_Dir, Tgt_Long_Deg, Tgt_Long_Min, 


91 





Write_Tgt_Lat_Position (Natural • Image{Tgt_Lat_Deg), 

Natural'Image(Tgt^Lat_Mln ), 

Natural' Image (Tgt_Iiat_Sec), 

North_South' Image (Tgt_Iiat_Dir)); 
Mrite_Tgt_Long_Poaition(Natural'Image(Tgt_Long_Deg ), 

Natural' Image (Tgt_IiOng_Min), 

Natural' Image (Tgt_I>ong_Sec ), 

BastJWest'Image(Tgt_Long_Dir)); 

Write_Rel_Brg (Natural'Image(Natural(Radians^toJDegrees 

(Relative_Bearing (Ownship_Trac]c, Current^TracIc))))); 
Wrlte_Rel_Spd (Natural'Image(Natural(Speed_In_Knots(Spd 
(Target_Relative_Velocity (Oimship_Trac)c, 
Current_Track}))})); 

Write_Tgt_Angle (Natural' Image (Natural (Radian8_^to__Degreea 

(Relative__Bearing(Current_Track,Ownship_TracIc))))) 
Write_TgtjMig)_ln£o (APK6. STR (An?>l_In£o (Current_Track))); 

if ((Trk_Category(Current_Track)) - Sur£ace_Plat£otm) or 

((Trk_Category(Current_Track)) - Subsurface_Plat£orm) then 
lfrite_Tgt_Class (VPKG.STR(Platform_Cla88(Current_Track))); 
irrite_Tgt_Id 

(Identity_Type'Image(Track_Identity(Current_Track))); 
Nrlte_Tgt_Naaie (VPKG. STR (Ves8el_Na]ne (Current_Track))); 
end if; 

if ((TrkjCategory (Current^^Track)) - Air_Platf orm) then 

Mrite_Tgt_Clas8 (VPKG.STR(PlatformjClass(Current_Track))); 
lfrlte_Tgt_Id 

(I(tentity_Type'Image(Track_ldentity(CurrentJTrack))); 
irrite_Tgt_Height (Integer'Image(Integer 








{(Altitude(Current_Track)* 3.0)))); 

end If; 

if (Tgt_CPA.Time_of_CPA) < ABSOLUTE_TIME_PKG.NOI» then 
Write_Tgt_CPA_PNO; 
elsif Tgt_Cpa_Range < 500.0 then 
Write_Tgt_CPA_CBDR; 
else 

lfrite_Tgt_CPA_Bearin9 (Natural'Image(Natural(Tgt_Cpa_Bearing))) 
Write_Tgt_CPA_Range (Natural'Image(Natural(Tgt_Cpa_Range))); 
Write_Tgt_CPA_Hours (Natural'Image(Tgt_Cpa_Hours)); 
Wrlte_Tgt_CPA_Mins (Natural'Image(Tgt_Cpa_Mins)); 
end if; 
end if; 

Current_Trac)t_Category :«■ Tr)c_Category (Current_Track); 

Case Current_Track_Category is 
when Unknotm *> 

Velocity_X Coiqpute_Surface_Velocity_X (Current_Track); 
Velocity_Y :- Cong>ute_Surface_Velocity_y (Current_Track); 
Draw__Tacplot_Unknown (Target_Position_X, Target__Position_y) 
Draw_Tacplot_Speed__Iieader 

(TargetJPositionjX, Target_^Position_Y, 
VelocityJC, Velocityjf) ; 

Draw_Tacplot_Track_No (Target_Position_X, Target_Position_y 

Natural'Image(Track_No)); 

when Surface_Platform -> 

Target_Identity Track_Identity (CurrentJTrack); 

Case Target_Identlty is 
when Friendly ■■> 

VelocityJC Coapute_Surface_Veloclty_X (Current_Track) 
velocity_Y C«Bpute_Surface_Veloclty_Y (Current_Track) 


99 











Draw_Tacplot_Friendly_Sutface (Target_Position__X, 

Target_Position_Y); 

Draw_Tacplot_Speed_Leader 

(Target_Position_X, Targot__Po8ition_Y, 
Velocity_X, Velocity_Y); 
Draw_Tacplot_TrackJNo (Target_Positlon_X, 

Target_Position_Y, 

Natural'Image(Track_No)); 


when Hostile «> 

Velocity_X : ■ Conpute_Surface_Velocity_X (Current_Track); 
Velocity_Y :- Conpute_Sur£ace_Velocity_Y (Current_Track); 
Draw_Tacplot_Hostile_Surface (Target_Position_X, 

Target__Po8ition_Y); 

Draw__Tacplot_Speed__Iieader 

{Target_Po8ition_X, Target_Position__Y, 
Velocity_X, Velocityjf); 
Draw_Tacplot_TrackjNo {Target_Position_X, 

Target_Position_Y , 

Natural'Image(Track^No)); 

when Neutral ■> 

Velocity_X :■ Coii^ute_Surface_Velocity_X (Current_Track); 
Velocity_Y ;■ Compute_Surface_Veloclty_Y (Current_Track); 
Draw_Tacplot_Neutral__Surface (Target_P 08 ition_X, 

Target_Position__Y); 

Draw_Tacplot_Speed_lieader 

(Target;_Position_X, Target_Position_Y, 
Velocity_X, Velocityjr); 
Draw_Tacplot_Track_No (TargetJPosltion_X, 

Target__Po8ition_Y, 

Natural'Image(Track_No)); 


100 








when Unknown ■> 

Veloclty_X Coii?)ute_Surface_Velocity_X (Current_Track) ; 
Velocity_Y Con?>ute_Surface_Velocity_y (Current_Track); 
Draw_Tacplot_Unknown__Surface (Target_Position_X, 

Target_Position_y); 

Draw_Tacplot_Speed_Leader 

(Target_Position_X, Target_Position_Y, 
Velocity__X, Velocity_Y) ; 
Draw_Tacplot_Track__No (Target__Position_X, 

Target_Position_Y, 

Natural'Image(Track_No)); 

when others -> null; 
end case; 

when Subsur£ace__Platform «> 

Target__Identity Track^Identity (Current_Track)/ 

Case Target^ldentity is 
when Friendly ■> 

Velocity__x :• Con^ute^Surface_Velocity_X (Current Track); 
Velocity__Y :■ Con^ute__Sur£ace__yelocity_Y (Current Track); 
Draw_Tacplot_Friendly__SubSurface (Target_Position X, 

Target_Position_y); 

Draw__Tacplot_Speed_l,eader 

(Target_Po8ition_X, Target_Position_Y, 
Velocity_X, Velocity_Y); 
Dtaw__Tacplot_Track_No (Target_Position__X, 

Target_Position_Y, 

Natural'Image(Track_No)); 


101 



when Hostile »> 

Velocity_X :> CoiBpute_Sur£ace_Veloclty_X (Current__Track); 
Velocity__y Coiif>ute_Surface_Velocity;_y (Current_Track); 
Draw_Tacplot_Hostile__SubSur£ace (Target_Po8itlon_X, 

Target_Position_Y); 

Draw_Tacplot_Speed_,I>eader 

(Target_Position__X, Target_Po8ition_Y, 
Velocity_X, VelocityJY); 
Draw_Tacplot_Track_No (Target_Po8itlon_X, 

TargetJPositionjy, 

Natural'Image(Track_No)); 

when Neutral -> 

Velocity_X : - Coii?)ute_Sur£ace_Veloclty_X (Current_Track); 
Velocity__Y : ■ Compute_Sur£ace__Velocity_Y (Current_Track); 
Oraw__Tacplot^Neutral_SubSur£ace (Target_Position_JC, 

Target_Po8ition_Y); 

Draw_Tacplot_Speed_ljeader 

(Target^Position_X, Target^P08ition_JYr 
VelocltyJC, Velocityjf); 
Oraw_Tacplot_Track_No <Target_P 08 ition_Xr 

Target_Po8ition_Y, 

Natural'Image(Track_No)); 

when Unknown «> 

Veloclty^X Coiapute_Sur£ace_VelocltyJX (Current^Track); 
Velocity_Y :• Compute_Sur£ace_yelocity_Y (CurrentJIrack); 
Draw_Tacplot_Unknown__SubSur£ace (Target_Po8ltlon_X, 

Target_PositionJY); 

Draw_Tacplot_Speed_Leader 

(Target_Po8ition_X, Target_P 08 ltion_Y, 
Velocity_X, Veloclty_Y); 
Draw^Tacplot_Track_No (Target_Po8ltlon X, 


102 








Target_Position_Y, 

Natural'image(Track_No)); 

when others *> null; 
end case; 

when Air_Plat£orm -> 

Target_Identity Track_Identity (Current_Track); 

Case Target_Zdentity is 
when Friendly -> 

Velocity^X ;■ Conpute_Air_Veloclty_X (Current_Track); 
velocity__Y :■ Coii?>ute_Air_Velocity__Y (Current_Track); 
Draw_Tacplot_Friendly_Air (Target_Position_X, 

Target_Position_Y>; 

Draw_Tacplot__Speed_Iieader 

{Target_Position_X/ Target_Position_Y, 
Velocity_X, Velocity_Y); 
Draw_Tacplot^Track_No <Target_Position_jX, 

Target_Posltion_Y, 

Natural'Image(Track_No)); 

when Hostile 

Velocity_X :• Compute_Air_Velocity__X (Current^Track); 
Velocity_Y ;» Conpute_Air_Velocity__Y (Current^Track); 
Drawjracplot_,Ho8tile_Air (Target_Position_X, 

Target_Po8ition_JY); 

Draw_Tacplot_Speed_Ijeader 

(Target_Position__X, Target_Position_Y, 
VelocityJK, Velocity_Y); 
Draw__Tacplot_TrackjNo (Target^Positlon^X, 

Target_Po8ition__Y, 

Natural'Image(Track_No)); 


103 





when Neutral -•> 


Velocity_X Coii*>ute_Air_Velocity_X (Current_Track) ; 
Velocity_Y :■ Coin>ute_Air_yelocity_Y (Current_Traclc); 
Draw_Tacplot_Neutral_Air (Target_Po8ition_X, 

TargetJPo3ition_Y); 

Draw_Tacplot_Speed_,Leader 

{TargetJPosition_X, Target_Position_y , 
Veloclty_X, Velocity_Y); 
Draw_Tacplot_Track_No (Target__Posltion_Xr 

Target_Po8ition_Y, 


Natural'Image(Track_No)); 


when Unknown -> 


Velocity_X Compute__Air_Velocity_X (Current_Track) ; 
Velocity_Y :■ CoBpute_Air_Velocity_Y (Current_Track); 
Draw_TacplotJUnknown^Alr (Target__Po8itionJXr 

Target_Po8ition_Y); 

Oraw_Tacplot_Speed_Leader 

(Target_Po8ition^X, Tai:get_Po8ition_Y , 
Velocity__X, Velocity_Y); 
Draw_Tacplot_Track_No (Target_Po8ltlon_Xr 

Target_Po8ition__Y, 

Natural'Image(Track_No)); 

when othera ■■> null; 
end ca8e; 

when Region •■> null; 
when Path ■> null; 
when Special^Polnt >> 

PointjCategoty :• Spec_Point_Category (Current^Track); 
case Polnt^Category is 
when General ■> 

Velocity^X :> Coapute_,Surface_Veloclty_X (Current_Track); 


1<M 





velocity_Y :■ CoiBpute_Surface_Velocity__Y (CurrentJTraclc) ; 
Draw_Tacplot_Ref_Point (Target_Posltlon_Xr 

Target__P 08 ition_Y); 
DraN_,Tacplot_Speed_l<eader 

(Targat^Position_X, Targttt_Po8ltlon_Y , 
VelocityJC, Velocltyjf) ; 
Draw__Tacplot_Track_No (Target__Po8ition_X, 

Targttt_Po8ltlon_Y , 

Natural' Ia»g» (Traek_Mo)); 

when Waypoint ■> 

Velocity_X Con¥)ute_Surface_Velocity_X (Current_Track); 
Voloclty_Y ;- Conpute^Surface_yeloclty_y (Current_Track); 
Draw__TacplotJWayPoint (Target_P 08 ition_X, 

TargetJPoaitionjY); 
Draw_Tacplot_Speed_Leader 

(Target_Po8ltion_X, Target^Poaitlon^Y, 

Velocity^X/ Veloclty__Y); 

Draw__Tacplot__Track_No (Target__Po8itlon_X, 

TargetJPo8ition_Y , 

Natural'Xnage(Track_Ho)); 

when Nav_Hazard *> 

Veloclty_X C<Hnpute__Surface_Velocity_X (Current_Track); 
Velocity_Y Coiig)ute_Sur£ace_Velocity_y (Current_Track); 

Draw_Tacplot_Nav_Hazard (Target^Po8ition_X, 

Target^Po8ition_Y); 

Draw_Tacplot_Speed_I«ader 

(Target_Po8ition_X, Target__Po8ition_Y, 
velocity_X, Veloclty_y); 
Draw__Tacplot__Track_No (TargetJPo8ition_X, 

Target_P 08 ition_Y, 

Natural'Image(Track_No)); 


105 




when Others •> null; 
end case; 

when Man_injlfater -> 

Velocity_X Coiiipute_Surface_Velocity_X (Current_Traclc); 

Veloclty_Y Conpute_Surface_Velocity_Y (Current_Track); 

Draw_Tacplot_Speed__l<eader 

(Tar 9 et_Position_X, Tar 9 et_Position_Y, 
Velocity__X, Velocity__Y); 
Draw_Tacplot_Man_lnjKater (Tar 9 et_Posltlon_X, 

TargetjPositlon_Y); 

Draw_Tacplot_Track_No (Target_Position_X, Target_Positlon_Y, 

Natural'Image(TraekjNo)); 


when others *> null; 
end case; 

end Process^TacplotjObjects; 

procedure Process_Hook_Posltion(Hook_PositionJX: In X_lib.Coordinate; 

Hook_Position Y: In X lib.Coordinate) Is 


begin 

If (abs (HookjPosltion_X ■> Scale_SelectorjlJpjCenterJK)) < 15 and 
(abs(Scale_Selector_Up_Center_Y • Hook__Posltlon_Y)) < 15 and 
(Screen_Scale_Factor < (512.0 * 2000.0)) then 
Screen_Scale_Factor :> (Screen_Scale_Factor * 2.0); 

TargetJPosltlon__ScalejFactor 

(Target_Posltion_Scale_Factor * 2.0); 


Return; 

elslf 

(abs (HookJPositloa_X - Scale_SelectorJDownjCenterjX)) < 15 and 
(abs(Scale_Selector_pownjCenter_Y - HookjPo8ltlon_Y)) < 15 and 
(Screen_,Scale_Factor > 2000.0) then 
Screen_Scale_Factor (Screen__Scale Factor / 2.0); 






TargetjPosltion_ScalejE‘actor 

(Target_Po3ltion_Scale_Factor / 2.0); 

Return; 

else 

Hooked_Tracle_Fla 9 :* False; 

Hoo)ce<l_Track_No 9999; 

Hook_X :■ Hook_Position_X; 

Hook_Y Hook_Po8ltlon_Y; 

if (abs (Hook__Po8itlon_X - (^nterpolntjX)) < 10 and 
(abs(Centerpolnt_Y - Hook__Po8ition__y)) < 10 then 
Hooked_^Track_Flag True; 

Hooked^Track :■ Ownahlp^Track; 

Hooked_Track_Mo 0; 
end if; 
end if; 

end Proee88_llook_Position; 

procedure Set_AV_Alert8 is 
begin 

Vi8_Alert_Flag False; 

No_AlertjFlag False; 

end Set_AV_Alert8; 

procedure Set_yi8ual_Alert8 is 
begin 

Vis_Alert_Flag :■ True; 

Mo_Alert__Flag :* False; 
end Set Visual Alerts; 


107 





procedure Dlsable^Alerts is 
begin 

Ho_Alert_Flag :■ True; 
end Di8able_Alerts; 

procedure Set_CPA_Alert_IUnge (Alert_IUnge: in Float) is 
begin 

CPA_Alert_Range :• Alert_Range; 
end Set_CPA_Alert_Range; 

procedure Set_Filter_Statu8 (Stat: in String) is 
begin 

if Stat - then 

Filter_Set_Flag :■ True; 

else 

Filter_Setjriag ;■ False; 
end if; 

end Set_Filter_Statu8; 

function Get_0im8hip_Track return Track is 
begin 

return Ownship^Track; 
end Get_0wn8hip_Track; 

function Get_flooked_Track_NuBiber return Natural is 
begin 

if llooked_Track_Flag then 

return Track_XOJNuaber (HookedJTrack); 
else return 9999; 
end if; 

end Oet Hooked Track Nuaber; 







function Get_Hooked_Track_Object return Track la 
begin 

return Hooke<l_Track; 
end Get_Hooked_Track_Object; 

end Proceaa^ZnterfaceJDlaplaya; 




APPENDIX D 


DRAW DISPLAY GRAPHICS 


— Author: Michael G. Stockwell 
Date : 21 September 1991 

— Description: Handles all screen drawing and writing functions 

with X_Lib, Open_Inter£ace_Displays; 
use X_Lib, Open_lnter£ace_Displays; 

package DrawJDisplayjSraphics is 


use Graphic_Output; 

BoxjNidth 


X_Ub. Pixel 

o 

M 

1 

Box__Height 


X_Lib.Pixel 

:- 20; 

Centerpoint_X 


X_Lib.Coordinate 

350; 

Centerpoint^Y 


X_Lib.Coordinate 

:- 350; 

Hookjlidth 


X_Lib.Pixel 

:-40; 

Hook__Height 


X_Lib.Pixel 

:-40; 

Neut ral_Syinbol 


String (1..1) 

:- "H"; 


— Initializing Display Procedures 

procedure Clear__Inter£ace_Displays; 
procedure DrawjDisplay_Att ributes; 


110 








— Tacplot General Symbol Drawing Procedures 

procedure Draw_Tacplot_Hook (Track_Location_X : in Coordinate; 

Track Location Y : in Coordinate) 


procedure Draw_Tacplot_Speed_Leader 

(Track_Location_X : in Coordinate; 
Track_Location_y : in Coordinate; 
Speed_Leader_X : in Coordinate; 
Speed_Leader_y : in Coordinate) 
procedure Draw_Tacplot_Track_No 

(Track_Location_X : in Coordinate; 
Track_Location_y : in Coordinate; 
Track_No_String : in String); 

— Tacplot Track Symbol Drawing Procedures 
procedure Draw^Tacplot^Unknom 

(Track_Location_X : in Coordinate; 

Track_Location_Y : in Coordinate) 
procedure Draw_Tacplot_Friendly_Air 

(Trsck_Location_X : in Coordinate; 

Track_Location_Y : in Coordinate) 
procedure Draw_Tacplot_Hostile_JU.r 

(Trsck_,IiOcation_X : in Coordinate; 

Track_,Location_Y : in Coordinate) 
procedure Draw__Tacplot_Unknown_Alr 

(Track_Location_X : in Coordinate; 

Track^Location_Y : in Coordinate) 
procedure Draw_Tacplot_Neutral_Air 

(Track Location X : in Coordinate; 


Track_Location Y : in Coordinate) 


111 



procedure Draw_Tacplot_H03tile_Sur£ace 

(Track__Location_X 

TracJc__Location_Y 

procedure Draw_Tacplot_Friendly_Surface 

(Traclc__Location_X 

Track_Location__Y 

procedure Draw_Tacplot_Unkno»m_Surface 

(Track_Location_X 

Track__Location_Y 

procedure Draw_Tacplot_Neut ral_Surface 

(Track__Loca t i on__X 
Track__Location_Y 

procedure Draw_Tacplot_Hostile_SubSur£ace 

(Track__IiOcation__X 

Track__IiOcation_Y 

procedure Draw_Tacplot_Neutral_SubSur£ace 

{Track__Location_X 

Track_Location_Y 

procedure Draw_Tacplot_Frlendly_^SubSur£ace 

{Track_Locatlon_X 

Track__Location_Y 

procedure Draw_Tacplot_Unknown_SubSurface 

{Track__Location_X 
Track__IiOcation_Y 
procedure Draw_Tacplot_DLRP (Track_IiOcation_X 

Track Location Y 


in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 

in Coordinate; 
in Coordinate); 
in Coordinate; 
in Coordinate); 


procedure Draw_Tacplot_Re£_Point 

<Track_I<ocation_X 
Track Location Y 


in Coordinate; 
in Coordinate); 


112 




procedure Draw_Tacplot_WayPoint 



(Track_Location_X 


in Coordinate; 


Track_Location_Y 

5 

in Coordinate) 

procedure Draw_Tacplot_Nav_Hazard 




(Track_Location_X 

: 

in Coordinate; 


Track__Location_y 

: 

in Coordinate) 

procedure Draw_Tacplot_Man_in_Water 




(Track__Location_X 

: 

in Coordinate; 


Track_Location_Y 

; 

in Coordinate) 

■Track Info Write Procedures 




procedure Write_Tgt_Cae 

(Course 


in String); 

procedure Write_Tgt_Spd 

(Speed 


in String); 

procedure Write_Tgt_ld 

(Id 


in String); 

procedure Write__Tgt_Update__Hours (Hours 

• 

in String); 

procedure Write_,Tgt_Update_Mins 

(Minutes 


in String); 

procedure Wrlte_Tgt^Brg 

(Bearing 

• 

» 

in String); 

procedure Hrite^Tgt^Range 

(Tgt_Range 


in String); 

procedure Write_TgtJHo 

(Munber 


in String); 

procedure Write_Tgt_Ctl_Type 

(Ctl_Type 


in String); 

procedure Hrite_Tgt_CPA__Bearing 

(Bearing 


in String); 

procedure Write_Tgt_CPA_Range 

(Tgt__Range 


in String); 

procedure Write_TgtjCPA__Hours 

(Hours 


in String); 

procedure Write_TgtjCPA_Mins 

(Minutes 


in String); 

procedure Write_Tgt_CPA_PNO; 




procedure Wrlte_Tgt__CPA_CBDR; 




procedure Wrlte_Tgt_lfat_Posltion (];iat_De 9 


in String; 


LatJMin 


in String; 


l.at_Sec 


in String; 


LatJJir 


in String); 


113 














procedure Write_Tgt_Long_Position 

(Long_Deg 


in String; 


l<ong_Min 


in String; 


l<ong_Sec 


in String; 


Long_Dir 


in String); 

Tacplot Write Procedures 




procedure Write_Hours 

(Hours 


in String); 

procedure Write_Mins 

(Minutes 


in String); 

procedure Write_Range_Scale 

(Scale 


in String); 

procedure Write_Filters_Status 

(Stat 


in String); 

procedure Write_Alerts_Status 

(St at 

: 

in String); 


Syst«n Status Write Procedures 
procedure Write_Link_Status_Down; 
procedure Wrlte_Gps_Status_Down; 
procedure Write_Radar_StatusJDown; 
procedure Write__Sword__Statua_Down; 
procedure Write_Gyro_Status_Do«n; 
procedure Write__Fath_Status_Down; 
procedure Write__Link__Status_Up; 
procedure Wrlte_Gps_Statu8_Up; 
procedure Wrlte__Radar_Status_Up; 
procedure Wrlte_Seord_Status_Up/ 
procedure Hrite_Gyro_Status_Up; 
procedure Write_Fath_Statua_Up; 


procedure Write_Mav_Status 

(Stat ; 

in String); 

Intel Write Procedures 



procedure Write_Rel_Spd 

(Rel_Spd 

in String); 

procedure Write_Rel_Brg 

(Rel_Brg 

in String); 

procedure Write^Tgt_Angle 

(Tgt_Angle: 

in String); 

procedure Write_Tgt_Naine 

(Tgt_NaiBe ; 

in String); 

procedure Write_Tgt_Aiiip__lnfo 

(Info ; 

in String); 

procedure Write_Tgt_Class 

(Class 

in String); 


114 









(Alt 


: in String); 


procedure Write_Tgt_Height 

— Alerts Write Procedures 

procedure Write_CPA_Alert (Target_ID : in String; 

CPA_Brg : in String; 
CPA^tog : in String; 
CPA_Hrs : in String; 
CPAJMins : in String); 

— Recomnendations Write Procedures 

procedure Wrlte_Intercept_Hecoinmendatlon (Target_No : in String; 

Rec_Cse : in String; 
Rec_Spd : in String; 
Rec_Hrs : in String; 
Rec_Mlns : in String); 

end Draw^DisplayjGraphics; 
package bo<i^ Draw_Dlsplay_Graphlcs is 
procedure Clear_lnterface_Oisplays is 
begin 

XjClearjNindow (Tacplot_Display, TacplotJRindow); 

XjClearJHindow (Trac)t__Infoj&isplay, Traclc_Info_Window); 
X_Clear_^Window (Alerts_Display, AlertsJWindow); 

X_Clear_Window (Intel_Dlsplay, intelJWindow); 
end Clear_ZnterfaceJDisplays; 

procedure Draw_Tacplot_Hook 

(Track:__LocationJX : in Coordinate; 

Track_liocation__Y : in Coordinate) is 

begin 

X_Dra»»_Arc (Tacplot_Dlsplay, TacplotJDrawing_Space, 
Tacplot_Oisplay_Context , 

(Track_Location_X > 20), 

(Track_Location_Y - 20), 



: in Coordinate; 

: In Coordinate; 

: In Coordinate; 

: in Coordinate) la 

X_Draw_Llne 

(Tacplot^Display, Tacplot_Drawing__Space, 
Tacplot_pisplay_Context, 

Track_Locatlon_X, Trac)c_Locatlon_yr 
(Track_IiOcation_X * Speed_Leader_X), 

(Track__Locatlon_Y - Speed_Leader^y)); 
end Draw_Tacplot_Speed_Iieader; 
procedure Dra«__Tacplot_Track_No 

(Track_Locatlon_X : in Coordinate; 

Track__Location_Y : in Coordinate; 

TrackJKo^String ; in String) la 

begin 

X_Draw_lBiage_String 

(Tacplot_piaplay, Tacplot_Drairing__Space, 
Tacplot_piaplayjContextr 
(Track_Location_X - 8), 

(Track__IiOcation_Y 20), 

Track_No__Strlng) ; 
end Draw_Tacplot_Track_Mo; 


HookjNldth, Hook_Helght, 

0, 23039); 

end Draw_Tacplot_Hook; 

procedure Draw_Tacplot__Speed_I<eader 

{Track_l>ocation_X 

Track_I.ocation_Y 

Speed_lieader_X 

Speed_lieader_y 


116 



procedure Draw^Display_Attributea is 
begin 

X_Set__Foreground 

(Tacplot^Display, Tacplot_pisplayjContext, 1); 
X_Draw_Arc 

(Tacplot_Dlaplay, Tacplot_Draeing_Spacer 
TacplotJDlaplayjContext, 

TacplotJXindoe__X, TacplotJ»indox_Y, 

(Boxjfldth 4 676), (Boxjlelght 4 678), 0, 23039); 
X__Pill_Arc 

(TacplotJDlsplay, Tacplot_Drawlng_Space, 
Tacplot_DlsplayjContext, 

TacplotJMindow__x, TacplotJWindow_Y, 

(Box_lfidth 4 678), (Box_Helght 4 676), 0, 23039); 
Tacplot Text Defaults 

X_Draw_Ia»age_Strlng 

(TacplotJDlsplay, Tacplot_Drawlng_Space, 
TacplotJDlaplayjContext, 

5, 15, 

"Scale: *); 

XjDraWjImagejString 

(TacplotjDlsplay, TacplotjDrawlngjSpece, 

Tacplot jDlsplsyjContext, 

575, 15, 

"Alerts : "); 

XjDrawjiaiagejSt ting 

(TacplotjOisplay, Tacplot_prawlng_Spece, 

TacplotjDisplayjContext, 

575, 30, 

"Filters: "); 


117 


X_Draw_Iiaag«_^Strln 9 

(Tacplot_Dlsplay, TacplotDrawlnaSpacar 
Tacplot_Dlaplay_Context , 

575, 45, 

"Intel : Name"); 

X_Draw_Ima 9 e_St ring 

(Tacplot_Display, Tacplot_l>rawln 9 _Space, 
Tacplot_pl8play_Context, 

5, 690, 

•Set / Drift: 250 6 1.5"); 

X^Draw_Iina 9 e_String 

(TacplotjDiaplay, Tacplot_Drawlng_Space, 
Tacplot^plaplayjContext, 

5, 675, 

•True Wind : 186 8 6"); 

X_Draw_lma 9 e_S t ring 

(Tacplot^piaplay, TacplotJDrawing_Space, 
Tacplot_Di8play_Context, 

5, 660, 

•Depth : 2721 Ft"); 

X_praw_Iniage_S t ring 

(Tacplot_Display, Tacplot_Drawing_Space, 
Tacplot_pi8play_Context, 

575, 690, 

•Time: •); 

X_Set_Foreground (Tacplot_pi8play, Tacplot_pi8play_Context, 0); 
X_pra»»_Arc 

(TacplotjDiaplay, Tacplot_prawlng_8paoe, 
Tacplot^piaplayjContext, 

(Centerpoint^X - 10), (CentezpointJT - 10), 


118 









Box_Hidth, Box_Height, 0, 23039); 

X_Draw_^Iiine 

(Tacplot_plsplay, Tacplot_Drawin 9 _Space, 
Tacplot_pl8playjContext, 

(Centexpolnt_X - 10) f (Centarpolnt^Y - 0), 

(CenterpointJX + 10), (Cantexpolntjsr - 0)) ; 

X_Draw_Line 

(Tacplot_pi8play, Tacplot_ptawlng_Spac«, 
Tacplot_Dl8playjContaxt , 

(CenterpointJX + 0), (Centexpoint^Y - 10), 

(Centerpolnt_X + 0), (Centerpoint^Y + 10)); 

—Draw Scale Selector Up/Down 
X_DraWj_Rectan9le 

(Tacplot_Di8play, Tacplot_Drawing_Spaee, 
Tacplot_pl8playjContext, 

5, 25, 40, 30); 

X_rilljRectangle 

(TacplotjDlaplay, Tacplot_Drawing_jSpace, 
Tacplot_pl8playjContext, 

5, 25, 40, 30); 

XjjDraWj^Rectangle 

(TacplotjDlaplay, TacplotJDrawlng_Space, 
Tacplot_Dl8playjContext, 

45, 25, 40, 30); 

Xj,Set_Foreground (Tacplot_Display, Taeplot_Di8play_Context, 4); 
Xj.rlllj_Rectangle 

(TacplotjDlaplay, TacplotJDrawlng__Space, 

TacplotjPlsplayjContext, 

45, 25, 40, 30); 

XjjSetj^Foreground (TacplotjDlaplay, TacplotJDlsplayjContext, 0); 


119 







iiui^ ‘(j I'l 




X_Draw_Ziugtt__Strln 9 

(Tacplot^Display, TacplotJ)rawing__Spac«, 
Tacplot^OlaplayjContext, 

57, 45,-Up-); 

X-S«t_For«ground (TacplotJJiaplay, TacplotJDisplay_Cont«*t, 1); 
X_Draw__lBiaga_String 

(Tacplot_Dl8play, Tacplotj>ra«ing_Spac«, 

TacplotjDlaplayjContaxt, 

9, 45, "Down-); 

System Status Defaults 

X_Draw_Image_St ting 

(Sy8tem_Statu8_Display, Sy8tem_statU8_Dra«ing_Space, 
Sy8tem_Statu8_Dl8play_Context, 

5. 242, 

'‘Navigation: '•); 
end 0rae_Diaplay_Attribute8/ 

— Tacplot Drawing Procedurea 

procedure Draw_Tacplot_Unknown 

(^rack_Location_X : in Coordinate; 

^**®K_*^*tion_Y ; in Coordinate) la 

begin 

XjDtaw_Atc 

(Tacplot^Display, Tacplot^Drawing^Space, 

Tacplotj}i8playjContext, 

(Track_ZfOcation_x - 10), (Track__Location_Y - 5 ), 
Box_Width, (Box_Helght - 10), 0, 23039); 

XJDraw_Arc 

(Tacplot_Display, Tacplot_Drawlng_Space, 
TacplotjDisplayjContext, 

(Track_Location_X - 5), (Track__i,ocation_Y - 10), 
(Box_iridth - 10 ), Bos_Height, 0, 23039); 


120 



end Draw_Tacplot_Unknown; 
procedure Draw__Tacplot_Friendly_Air 

(Track_Location_X : in Coordinate; 

Track_Location_y : in Coordinate) Is 

begin 

X_Draii_Arc 

(Tacplot^pisplay, Tacplot_Drawing__Spacef 
TacplotJDlsplayjContext , 

(Track_Locatlon_X - 10), (Track_LocatlonJir - 10), 
BoxjNldth, Bos_8elght, 

0. 11520); 

end DrawjTacplot_frlendly_Alr; 
procedure OraM_Tacplot_Ho8tlle_Alr 

(Track_Locatlon_X : In Coordinate; 

Track^Locatlon^y : In Coordinate) Is 

begin 

X_Draw_Une 

(TacplotjDlsplay, Tacplot_Drawing_8pace, 
TacplotJDlsplayjContext, 

(Track_IiOcatlon_X o 10), (Track^IiOcation_r 4- 10), 
Track_liOcatlon_X, (Track_Loeation_T - 10)); 

XjDraw_,Itlne 

(TaqplotJDlsplay, TacplotJDrawlng_Space, 

TacplotJDlsplayjContest, 

Trsok_XiOcatlon_X, (Track^Locatloa_Y - 10), 

(Track_Iiocatlon__X -*■ 10), (Track_Locatlonjr * 10)); 
end Draw_Tacplot_Hostlle_Air; 
procedure Oraw_Taeplot_t)bkBoim_Alr 

(Track_Locatlon_X : In Coordinate; 

Track Location Y : in Coordinate) is 


121 




begin 

X_DrawJLine 

(Taeplot_Dlaplay , Tacplot_prawlngjSpace , 
Tacplot_0l8playjContext, 

(Track__Locatlon_X - 10), (Trac)c_Location_Y + 10), 
(Trac)c_Location_X - 10), (Track_Loeatlon_y - 10)); 
X_Draw_Line 

(TacplotJDlaplay, Tacplot_pxawlng_Space, 
TacplotJOlaplayjContext, 

(Track_Locatlon_X > 10), (Track_Locatlon_y - 10), 
(Track_Iiocatlon_X + 10), (Track_^Location_y - 10)); 
X^Draw^Line 

(TacplotJOlaplay, TacplotJDrawlng_Space, 
TacplotJOiaplayjContext, 

(Traek_iiOGatlon_x ♦ 10), (Tcaek_,Xiocatlon_y - 10), 
<Track_iiOcation_x + 10), (Track_Locatlon_y ♦ 10)); 
end Oratr_Taoplot_unknown_Air; 
procedure Ora«_TacplotjNeutral_Jklr 

(Traek_i,ocation_X : In Coordinate; 

Traek_Location_Y : in Coordinate) is 

begin 

X^praw^Line 

(TacplotJDlaplay, Tacplot_Drawing_Spaee, 
TacplotJOiaplayjConteat, 

(Track_IiOcation_X - 10), (Track__Iiocation_Y + 10), 
(Track_X.ocation_X - 10), (Track^Locatlonjr - 10)); 
X^Draw^Line 

(TacplotJDlaplay, Tacplot^Drawing_^Space, 
Tacplot^DiaplayjContext, 

(Track_liOcation_x - 10), (Track_Location_Y - 10), 
(Track_X.ocationj( + 10), (Track_Location_y - 10)); 



122 



X_Draw_Line 

(Tacplot_Diaplay, Tacplot_Dtawing_Space, 

Tacplot_DisplayjContext, 

(Track_Locatlon_X + 10), {Track_Location_y - 10), 
(Track_Location_X + 10), (Ttack_Location_Y + 10)); 
X_Draw_iinage_S t ring 

(TacplotJJisplay, TacplotJDrai#ing_Space, 
Tacplot_Dl8playjCont«xt, 

Track_Locatlon_X, Track_Locatlon_y, 
Neutral_Syiiibol); 
end Draw_Tacplot_Neutral_Air; 
procedure Oraw_Tacplot_Hostlle_Surface 

(Track_I<ocatlon^X : in Coordinate; 

: in Coordinate) is 

begin 

X_,Draw^Llne 

(Tacplot_Dl8play, TacplotJDrawing^Space, 
Tacplot_pi8playjContext, 

(Track_l>ocatlon_X - 10), (Ttack_Locetion_y + 0), 
(Track__I<ocation_X - 0), (Track__Location_Y - lO)); 
XJDraw_U.ne 

(TacplotJ)i8play, Tacplot_Drawing_Space, 
Tacplot_0l8playjContext, 

(Track__Location_X - 0), (Track^Locetlon^y - lo), 
(Track_Locationjc + 10), (Irack_Location_y - 0)); 
X_Draw__Line 

(Tacplot_Di8play, Tecplot_Drewing_Spece, 
Tacplot_Di8playjContext, 

(Track^Locationjt ♦ 10), <rreck_Loeation_y - 0), 
(Track_I.ocation_X + 0), (Track__Location__y + 10)); 


123 



X_Draw_Line 

(Tacplot_Dlsplay, TacplotJDrawlng_Space, 
Tacplot_Dl8playjContext, 

(Traclc_Location_X + 0), (Trac)c_IiOcatlon_y + 10), 
(Track_liOcation_X - 10), (Track_Location_Y + 0)); 
and Draw__Tacplot__Hostile_Surface; 
procedure Draw_Tacplot_Friendly_Surface 

(Track_Location_X : in Coordinate; 

Track__Location_Y : in Coordinate) is 

begin 

X__Draw_Arc 

(TacplotJDisplay, TacplotJD rawing_Space, 
Tacplot_Display_Context, 

(Track_I.ocation_X - 10), (Track_Location_Y - 10), 
BoxjNldth, Box_Height, 

0, 23039); 

end Draw_Tacplot_FriendIy_Sur£ace; 

procedure Draw_Tacplot_Unknown_Sur£ace 

(Track_Location_X : in Coordinate; 

Track_Iiocation_y : in Coordinate) is 

begin 

X_j>raw_liectangle 

(Tacplot^Display, TacplotJDrawlng_Space, 

Tacplot JDisplayjContext, 

(Txack_Location_X - 10), (Track_Location_Y - 10), 
BoxJNidth, BoxjHeight); 
end Draw_Tacplot_Un)cno«m_Surface; 


124 








: in Coordinate; 


procedure Draw_Tacplot_Neutral_Surface 
(Trac)c__Location_x 
Track_Location_Y : in Coordinate) is 

begin 

X_Draw_Rectangle 

(Tacplot_Display, Tacplot_Dra%ring_Space, 
Tacplot_Di8play_Context , 

(Track_Location_X - 10), (Traclc_Location_Y - 10), 
BoxjNidth, Box_Height); 

X_Dra«_Iinage_String 

(Tacplot_Display, Tacplot_Drawing_S 5 «e, 
TacplotJDisplay_Context, 

Track_Location_X, Trac)t_Location_Y, 
Neutral_Syinbol); 

end Dratr_Tacplot_Neutral_Surface; 
procedure Draw_Tacplot_Hostile_SubSurface 

(Trac)c_LocationJX : in Coordinate; 

Trac)c_Location__Y : in Coordinate) is 

begin 

X^Ora«r_Line 

(Tacplot_Di8play, TacplotJDrawing_Space, 
Tacplot_Di8playjContext, 

(Tracli_I*ocation_X - 0), (Trac)c__I.ocation_Y + 10), 
(Trac)c_Location_X - 10), (Trac]c_Location_jr - 10)) 
X_praw_I<ine 

(Tacplot_Display, Tacplot_Drawing_Space, 
TacplotJDisplay jContext, 

(Track_Location_X -t- 0), (Track_IiOcation_Y 4 10), 

(Track__Locatlon_X + 10), {Track_Location_Y - 10)) 
end Drair_Tacplot_N 08 tile_SubSurface; 


125 



pi|^l,lipi»'w.!.pi|.J,..Hii 




procedure Dra»r_Tacplot_Neutral_SubSur£ace 

(Traclc_Locatlon_X : in Coordinate; 

TracJc_I.ocation_y : in Coordinate) is 

begin 

X_Draw_Line 

(TacplotJDisplay, Tacplot_Drawing_Space, 
Tacplot_Display_Context, 

(Track_Location_X - 10), (Trac)c_Location_Y - 10), 
(Track_Location_x - 10), (Track_Location_Y + lO)); 
XJDraw_liine 

(Tacplot_Display, Tacplot_Drawing_Space, 
Tacplot_Dlsplay_Context, 

(Track_Location_x - 10), (Track_Locatlon_Y + 10), 
(Track__Location_x + 10), (Track_Locatlon_Y + 10)); 
X_Draw__Line 

(Tacplot_Dlsplay, Tacplot_Dtawing_Space, 
Tacplot_DisplayjContext, 

(Track^LocationjC + 10), (Ttack_Location_Y + 10), 
(Track_Locatlon_x +10), (Track_Location_Y - 10)); 
X__Dra w_IiBage_St ring 

(TacplotJDisplay, Tacplot_Drawing_Space, 
TacplotJDisplay_Context, 

^'•ck_Locatlon_x, Track_Locatlon_Y, 

Meutral^Synbol); 

end Dcaw_Tacplot_Neut«al_SubSurface; 
procedure Draw_TacplotJFriendly_SubSurface 

(Track^Location^X : in Coordinate; 

Track_Location_y : in Coordinate) is 

begin 

XjDraw__Arc 

(Tacplot_Display, Tacplot_Drawing_Space, 


126 





TacplotJDiaplayjContext, 

(Track_Location_X - 10), {Traclc_Location_Y - 10), 
Box^Width, Box_Height, 

11520, 11520); 

end Draw_Tacplot_Friendly_SubSur£ace; 
procedure Draw_Tacplot_Unlcno<m_SubSurface 

(Traclc__Location_X : in Coordinate; 

Track_IiOcation_Y : in Coordinate) is 

begin 

X_Draw_Line 

(Tacplot__Display, Tacplot_Drawing_Space, 
Tacplot_Display_^Context, 

(Track_Location_X - 10), (Track_Location__Y - 10), 
(Track_Location_X - 10), {Track__liOcation__Y + 10)); 
X_Draw_Line 

(TacplotJDisplay, TacplotJDrawing^Space, 
facplot_DisplayjContext, 

(Track__liocation_X - 10), {Track_Location_Y + 10), 
(Track__Location_X + 10), (Track_I,ocation_Y + 10)); 
X_Draw_Llne 

(Tacplot_Oisplay, Tacplot_prawing_Space, 
Tacplot_Display_Context, 

<Track_I,ocation_X + 10), (Track_I,ocation_Y + 10), 
(Track_Location_X + 10), (Track_l,ocation_Y - 10)); 
end Draw_Tacplot^Un)cnotm_SubSur£ace; 
procedure Draw__TacplotjDIiRP 

(Track__Location_X : in Coordinate; 

Track_Location_Y : in Coordinate) is 

begin 

X_praw_Rectangle 

(TacplotJDisplay, Tacplot_prawingjSpace, 


127 




Tacplot_Display_^Context, 

(Track_I.ocation_X - 10), (Track_IiOcation_Y - 10), 
Box_Width, Box_Helght); 

X_Draw_Line 

(Tacplot_Di spl ay, Tacplot_Drai#ing_Space, 
Tacplet_Display_Context, 

{Track_Location_X - 10), (Track_Location_Y - 10), 
(Track_Location_X + 10), (Track_Location_Y + 10)); 
X_Draw_Line 

(Tacplot_Display, Tacplot_Drawing_Space, 
Tacplot_Display_Context, 

(Track_I»ocation_X - 10), (Track_IiOcation_Y + 10), 
(Track_Location_X + 10), (Track_Location_Y - 10)); 
end DraM_Tacplot__DUtP; 
procedure Draw__Tacplot__Ref_Point 

(Track_Locatlon_X : in Coordinate; 

Track_Location_Y : in Coordinate) is 

begin 

X_Draw_Line 

(Tacplot_Display, Tacplot_Drawing__Space, 

TacplotJDisplayjContext, 

(Track_Location_X - 10), (Track__Location_Y - 10), 
(Track_Location_X + 10), (Track_Location_Y + 10)); 
X_Draw_Llne 

(Tacplot^Oisplay, Tacplot_Drawing_Space, 
Tacplot_Display_Context, 

(Track_liOcation_X - 10), (Track_Location_Y + 10), 
(Track_Locatlon_X + 10), (Track_Location_Y - lO)); 
end Draw_Tacplot_Ref_Point; 


128 


4 




procedure DrawjTacplotJllayPoint 

(Track_Location__X : in Coordinate; 

Track^Locatlon_Y : in Coordinate) ia 

begin 

X_Draw_Line 

(Tacplot_Dlsplay, TacplotjDrawing_Space, 
Tacplot_DlsplayjContext/ 

(Track_Location_X - 10), (Track_IiOcation_y - 10), 
(Track_l.ocation_X + 10), (Track_Locatlonjir + 10)) 
X_Draw_Line 

(TacplotJDisplay, Tacplot_Drawlng_Space, 
Tacplot_Display^Context, 

(Track_Location_X - 10), (Track__Location_Y + 10), 
(Track_Location_X + 10), (Track__Location_Y - 10)) 
XjDraw__Llne 

(Taeplot^Oiaplay, Tacplot_Drawing_Space, 

TacplotJDiaplayjContext, 

(TracK_Locatlon_X + 10), 

(Track__Iiocation_X + 0), 

end Draw^TacplotJNayPoint; 
procedure Draw_TacplotJMay_Hazard 
(Track_Iiocatlon_X 
Track__Iiocation_y 

begin 

XJDrai»_Line 

(TacplotJDisplay, TacplotJDrawlng_Space, 
Tacplot_Dl8play_Context, 

(Track^liocatlonjx - 10), (Ttack^LocstionjT - 0), 

(Tzack_IiOcation_X + 10), (TrackJbocation_Y -f 0)) 
X_J>zaw_I<lne 

(TacplotJDisplay, Tscplot_prawing_Space, 


(Track_Locationjf - 10), 
(Track_Location_y - 10)) 

: in Coordinate; 

: In Coordinate) is 


12f 



Tacplot_Dlsplay_Cont«xt, 

(Track_LocatlonJX - 10), (Track_Locatlon_Y - 0), 

(Track_Location_X - 5), (Track_IiOcation_Y - 5)) 
X_Draw_Line 

(Tacplot_Dl8play, Tacplot_prawlng_Space, 
Tacplot_DlsplayjContext , 

(Track_Location_X + 10), (Ttack_Location_Y - 0), 

(Track__Location_X + 5), (Track_Location_Y + 5)); 

end Draw_Tacplot_Nav_Hazaxd; 
procedure Dratr_Tacplot_Man_ln_Nater 

(Track__Locatlon_X : In Coordinate; 

Track__Locatlon_y : in Coordinate) is 

begin 

X_Draw_Arc 

(Tacplot_Display, Tacplot_Drawing_Space, 

Tacplot JDisplayjContext, 

(TrackjLocation_X - 10), (Track_Location_y - 10), 

BoXjNidth, BoXjHeight, 0, 23039); 

XJDraWjArc 

< TacplotjDlsplay, Tacplot_Drawlng_Space, 
TacplotjDisplayjContext, 

(TrackjliOcationjX - 5), (Track__Location_y - 5), 

(Boxjiridth / 2), (BoXjHelght / 2), 0, 23039); 
end DraWjTacplotjManjinJWater; 

Track Information Write Procedures 

procedure Write_TgtjCse (Course: in String) is 

begin 

X_Draw_lmage_Strlng 

(TrackjInfOjOisplay, Trackjlnfo_Drawlng_Space, 
Trackjinfo jDisplayjContext, 

415, 15, 


130 





"Target Course: T"); 

X_Draw_lraage_Strlng 

(Track_lnfOnDisplay, Track_In£o_Drawing_Space, 
Track_Info_Dlsplay_jContext» 

527, 15, Course); 

•nd llrite_Tgt_Cse; 

procedure l»rlte_Tgt_Spd (Speed: in String) is 

begin 

X_Oraw_lfflage__String 

(Track__In£o__Display, Track_ln£ojDrawing_Space, 
Track_Info_Display_Context, 

415, 30, 

"Target Speed : Kts"); 

X_Drae_Iiiiage_St ring 

(Track__In£o_piaplay, Track_ln£o_prai»ing_Space, 
Track_ln£o_Diaplay_Context, 

527, 30, Spe«d); 

•nd l»rit«_Tgt_Spd; 

procedure Writ«_Tgt_Id (Id: in String) is 

begin 

X_Drae_Iinage_String 

(Track_ln£o_Display, Track_ln£oJDrawing_Spac«, 
Track_ln£o_pisplayjContext, 

5, 80, 

"Target ID;*); 

X_Oratr_liiiag«_String 

(Track__info_0i8play, Track_^Info_Draifing__Spac«, 
Track__lnf o_pi8play_Context, 

93, 80, Id); 

•nd llrite_Tgt_ld; 


131 





procedure lfrite_T 9 t_(^>date_Hours (Hours: in String) is 
begin 

X_Draw_Iiiiage_St ring 

(Tracle_lnfo_Dlsplsy, Track_Info_prairing_Space, 
Traclt__Inf o_Display_,Context , 

5, 95, 

"Last Update:"); 

XJDraw_linage_St ring 

(Track_ZnfOnDisplay, Trac)c_Znfo_prswlng_Space, 
Track_Zn£o_Display_Context, 

109, 95, Hours); 
end •lrite_Tgt_Opdate_Hours; 

procedure Nrite_Tgt_Update_Mins (Minutes: in String) is 

begin 

X_praM_Iauige_String 

(Track_ln£ojDisplay, Track^InfoJOrawlng^Space, 
Track_ZnfojDisplsy_Context, 

133, 95, Minutes); 
end Nrite_TgtJUpdate_Mins; 

procedure Nrite_Tgt_Brg (Bearing: in String) is 

begin 

X_Draw^ZaMge_8tring 

(Track_ZnfojDisplay, Track_In£o__Drawing_Space, 
Track_Info_DlsplayjContezt, 

5, 15, 

"Target Bearing: T"); 

X_Draw_Iange_8tring 

(Track_ZnfojDi8play, Track_lnfoJDrawing_Space, 
Track_InfojDi8play_Context, 

125, 15, Bearing); 
end Write_Tgt_Brg; 


132 





in String) is 


procedure Write_Tgt_Range (Tgt_Range: 
begin 

X_Draw_lniage__String 

<Trac)i__In£o_Display, Track__In£o_Drawing_Space/ 
Track_Info_Display_Context , 

5, 30, 

"Target Range: Yards*); 

X_Draw_lBiage_String 

(Track_Xn£o_pisplay, Track__Info_Drawing_Space, 
Track_ln£o_pisplay_Context, 

125, 30, Tgt_Range); 
end Nrite_Tgt_Range; 

procedure Nrite_Tgt_No (Mundder: in String) is 

begin 

X_Draw_Iinage_,St ring 

(Track_Zn£o_Displsy, Track_ZnfoJDrawing__Space, 
Track_In£ojDisplayjConte*t, 

259, 15, 

"Contact: "); 

X_Dra«_Iaiage_St ring 

(Track_In£oJDisplay, Track_Xn£o_Drawing_Space, 
Track_Xn£ojDisplayjContext, 

339, 15, Nua^r); 
end llrlte_Tgt_No; 

procedure Nrite_Tgt_Ctl_Type (Ctl^Type: in String) is 

begin 

X_Drair_Xiiiage_String 

(Track_Zn£o_J}isplay, Track_In£oJDrawing_Space, 
Track_XnfoJDispIayjContext, 

328, 95, 


Control Type:*); 



X_Draw_lmag«_Strlng 

(Track__lnfo_DiapIay/ rrack__lnfojDrawlng_Space, 
Track_info_Dlaplay_Context , 

440, 95, Ctl__Iype); 
and Writa__Tgt_Ctl_rypa; 

procedure Write_Tgt_CPA_Bearlng (Bearing: In String) la 

begin 

X_Draw_lBiage_Strlng 

(Track__Xnfo_pi8play, Track_lnfo_Drawlng_Spaee, 
Track__in£o_piaplayjConte*t, 

183, SO, 

'“Target CPA: / at “); 

X__Draw__lMge_St ring 

(Track_In£o_pi8play, Track_ln£oJDrairlng_Space, 
Track_In£o_pi8playjContext, 

271, 50, Bearing); 
end Nrlte_Tgt^CPA_Bearlng; 

procedure Nrlte_Tgt_CPA_Range (Tgt_lUnge: In String) is 

begin 

XJDra«_IaMge_S t ring 

(Track_ln£o_pi8play, Track_Zn£o_Drawing_Space, 
Track_In£o_Di8playjContest, 

318, 50, Tgt_Range); 
end lfrite_TgtjCPA_Range; 

procedure Nrlte_Tgt_CPAjloors (Hours: in String) is 

begin 

X_Draw_laM9e_8trlng 

(Traek_Zn£ojDisplay, Track_In£o_ Pratrina_8pace» 
Track^In£oJDisplayjCmttext, 

398, 50, Hours); 
end lfrite_Tgt__CPA_Hours; 


134 





in String) is 


procedure Nrlte_Tgt_CPA_Min8 (Minutes: 
begin 

X_Drew_ZMge_Strlng 

(Treek_Znfo_pi8play, Track_ZnfoJDrawing_Space, 
Track_Znf o_I)i8play_Context , 

423, 50, Minutes); 
end Nrlte_Tgt_CPA_Min8; 
procedure Nrlte_TgtjCPA_PlK} is 
begin 

X_Set_Background (Track_Infc_Display, 

Track^ZnfpJOisplayjContest, 14); 
X_Draw_ZMge_St ring 

(Track_lnfo_Di8play, Track_lnfo_prawing_Space, 
Track_InfojDisplayjContext, 

231, SO, '‘Passed and Opening*); 
X_Set_Background (Track^XnfoJDlsplay, 

Track^InfoJiisplayjContext, 7); 
end Write_Tgt_CPA_PMO; 
procedure WrltejTgtjCPAjCBDR is 
begin 

X_Set_Background (Track_,Znfo_Di8play, 

Track_lnfOjDisplayjContext, 12); 
X_Draw_ZaMge_String 

(Trackj_Info_pisplay, Track_Znfo_Drairing_Space, 
Track_Zn£oJDl8playjContext, 

231, 50, • **** CBDR **** •); 

X_Set_Background (Trackj,ZnfojDlsplay, 

TrackjjinfOjDisplayjContext, 7); 
end llrite_TgtjCPA_CBDR; 


135 






procedure Nrit«__T 9 t_Ii«t_Po 8 ition (Lat_Deg: in String; 

I>atjHin: in String; 
Iiat_Sec: in String; 
LatJDlr: in String) is 

bttgin 

X_DraM^Ziiiag«_String 

(Track__lnfojDiaplsy# Trsc)c_lnfo__Drawing_Space, 
Track^InfoJDisplayjContext, 

142, C5, 

*Targ«t Position: *); 

X_Draw_laiag«_String 

(Track_Znfo_Display, Track_Info_Drawlng__Spac«, 
Track_Zn£o_pi8play_Contaxt , 

278, 65, l,at_0«g); 

X^Draw_Zmag®__St ring 

(Track_Zn£ojDi8play, Track_ZnfojDrawing_Spac8, 
Track^ZnfoJdisplayjContoxt, 

302, 65, Lat_Min); 

X_Draw_ZMgo_String 

(Track_,Zn£oJDi8play, Track_Znfo_pr8wlng_Spac8, 
Track_Zn£o_Di8playjCont8xt, 

326, 65, Lat_S«c); 

X_Draw_Zaiag8__Strlng 

(Track_Znfo_Di8play, Track_Zn£ojDrawing_Space, 
Track_Znfo_Oi8playjContest, 

356, 65, Lat_Dlr); 

•nd Nrit8_Tgt_I,at_Position; 

prooodur* lfrlt«_Tgt_IiOng_Po8ition (Long^Deg: in String; 

Z«ng_Min: in String; 
Long_S«c: in String; 
UmgJDir: in String) is 


IM 





begin 

X_Draw_lioage_String 

(Track__In£o_Displey, Track_In£oJDrawing_Space, 
Track_ln£o_DisplayjContext , 

372, 65, */-); 

X_Draw_liiiage_St ring 

(Track__Zn£oJDlsplay, Track_In£o_prawlng_Space, 
Track_ln£o_DlaplayjContext, 

386, 65, LongjDeg); 

X__Oraw__liBage_String 

(Track_In£o__Display, Track_In£o_prawing_Space, 
Track_In£o_Diaplay_Context, 

420, 65, Long_Mln); 

X_praw^Iiaage__S t ring 

(Track__Zn£o_Display, Track__zn£o_prawing_Space, 
Track_zn£oJDi8playjContext, 

444, 65, Long^Sec); 

X_praw_Z8iage^String 

(Track_Info_Dl8play, Track_lnfoJDrawing_Space, 
Track_In£o_DlsplayjContext, 

476, 65, Long_plr); 
end irrite_Tgt_Long__Position; 

Tacplot Write Procedures 

procedure Write^Hours <Hour8: in String) is 

begin 

X_Set_Foreground 

(TacplotjDisplay, Tacplot_pi8play_Context, 1); 
XJDrae_l*age^String 

(Tacplot_Display, Tacplot_prawing_Space, 
Tacplot_pi8playjContext, 

617, 690, Hours); 


137 




X_Set__^Por«ground 

(Tacplot_Display, Tacplot_Display_Context, 0); 
end Nrite_Houra; 

procedure Hrlte_Mins (Minutes: in String) is 

begin 

X_Set_Foreground 

(Tacplot_Oisplay, TacplotJDisplayjContext, 1); 
X__Draw__lnage_St ring 

(Tacplot_plsplay , Tacplot JDrawing^Space , 

TacplotJDisplayjContext, 

641, 690, Minutes); 

X_Set_Foreground 

(Tacplot_Display, Tacplot_Display_Context, 0); 
end NritejHins; 

procedure Nrite_Range_Scale (Scale: in String) is 

begin 

X_Draw_ZBiage_String 

(Tacplot_Display, Tacplot_Drawing__Space, 

TacplotJDisplayjContext, 

53, 15, Scale); 

X_Draw_Zinage_St ring 

(TacplotJDisplay, Tacplot_Drawlng_^Spaee, 
Tacplot_DisplayjContext, 

101, 15, -Miles*); 
end Write_Range_Scale; 

procedure Nrite_rilter8_Status (Stat: la String) is 

begin 

X_Draw_laiage_St ring 

(Tacplot_Display, Taeplot_Drawing_8paoe, 
Tacplot_Display_Context, 

647, 30, Stat); 


13B 





In String) is 


end llrite_Filter8__Status; 
procedure Write_Alerta_Statu8 (Stat: 
begin 

XJDra>i_Iiiiage_String 

(TacplotjDisplay, Tacplot_Drawing_Space, 
Tacplot_Display_Context, 

647, 15, Stat); 
end Nrite_Alert8_Statu8; 

— System Status Write Procedures 

procedure WritejSp8_Statu8_Down is 
begin 

X_Set_Background 

(Systeffl_Status_Display, System_Status_pi8play_Context, 1); 
X__Set__Foreground 

(System^StatusJDisplay, System^Status^Display^Context, 12); 
X_Draw__lmage__St ring 

(Sy8tem_Statu8_Di8play, System^StatusjDrawing^Space, 
System_Status_Di8play_Context, 

101, 15, 

'•DOWN*'); 

X_Set_Bac)cground 

(System^StatusjDisplay, System^StatusJDisplayjContext, 14); 
X_Set_Foreground 

(System_Status_pi8plsy, Sy8tem_Statu8jDi8play_Context, 1 ); 
end WritejGps_Status_pown; 
procedure Wrlte_Radar_Statu8_Down is 
begin 

X_Set_Background 

(Systm_Statu8_Di8play, Sy8tem_Stattt8_Dl8playjContezt, 1); 
X_Set_Foreground 

(Sy8t«k_StatusJ>i8play, Sy8tem_Stetu8_Di8playj:ontext, 12); 


139 














XJDraw_liBag«_St ting 

(Sy8tem_Statua_Dlaplay, Syat«m_Statua_Drawing_Space, 
Sy ateai_S tat u3 _D1 aplay__Context , 

101, 30, 

•DOWN"); 

X_Sat_Background 

(Syatam_Statua_Diaplay, Syatein_Statu8j>iaplay_Context, 14 ); 
X_Sat__Foreground 

(Sy8t«n_Statu8_pi8play, Sy8tem_Statu8_pi8play_Context, 1 ); 
and Nrlte_Radar_^Statu8^Do%m; 
procedure Wrlte_Link_StatU8_Down ia 
begin 

X_Set_Background 

(Syatein_Statuaj5iaplay, Sy8tem_Statu8_Di8play__Context, 1 ); 
X_Set__Foregtound 

(Syatem_Statu8j)i8play, Sy3tem_Statu8_Di8play_Context, 12 ) ; 
X_Draw_Image_String 

(Sy a tem^Stat u8_Diaplay, Sya t«n_St a t uajDrawing^Space, 
Sy8tem_StatuajDi8playjContext, 

101, 45, 

•DOWH''); 

X_Set^Background 

(Sy8tem_Statu8_Di8play, Sy8tem_Statu8_Di8play_Context, 14 ); 
X_Set_Foreground 

(Syateai_Statu8_Di8play, Sy8tem_Statu8_Di8play_Context, 1 ); 

•nd Write_Link__Statu8_Down; 
procedure l»rite_Fath_statu8_Do»m ia 
begin 

X_Set^Background 

(Syatem^Statua.Diaplay, Syatem^StatuajDiaplayjContejct, 1 ); 
X_Set^Fore9round 


140 



(System_Status_Display, Sy8tem_Status_Display_Context, 12) ; 
X_Draw_Iinage_String 

(Sy8tea»_Status_Display, Systein_Status_Drawing_Space, 
Sy 8tein_status_Diaplay_Context, 

346, 15, 

"DOWN"); 

X_Set_Bacltgtound 

(System^Status_Dl8play, Sy8tein__Status_Di8play__Context, 14); 
X__Set__Foreground 

(Syatem_Statua_Diaplay, Syatem_Statu8j>l8play_Context, 1 ); 
end Write_Fath__Statua_Down; 
procedure Write__Gyro_Statua_Down ia 
begin 

X_Set_Background 

(Sy8tem_Statua_Diaplay, Syatem^Statua^Diaplay^^Context, 1 ); 
X_Set__Foreground 

(Syatein_Statua_Di8play, Syatem_Statu8_Diaplay_Conte*t, 12); 
X__Drae_Iaage_String 

(Sy8tem_StatU8j)i8play, Syatem_StatU8j)rawing_Space, 

Systen^StatusjDisplayjContext, 

346, 30, 

'•DOWN") ; 

X_Set__Bac)tground 

(Syatem_Statua_,Di8play, Sy8tem_Statua_J>i8playjContext, 14 ) ; 
X^Set_Foreground 

(Sy8tem_Status_Dl8play, Sy8tem__Status_pi8play__Context, 1); 
end Write_Gyro_StatuaJDown; 
procedure Write_S«»ord_Statu8_Down ia 
begin 

X_Set__Bac)cground 

(Sy8tem_Statu8_piaplay, Sy8teai_Stat:u8_Di8play_Context, 1 ); 


141 



X_Set_Foreground 

(System_Status_Dlsplay, Sy8tem_Status_Di8play_Context, 12) ; 
X_Draw_Iinage_String 

(Sy8tem_Statu8_Di8play, Sy8teiii_Statu8_Drawlng_Space, 

Sy 8tein_St atu8_Di 8play_Context , 

346, 45, 

•DOWN"); 

X_Set_Background 

(Sy8tem_Statu8_Di8play, Sy8tem_Statu8_Di8play__Context, 14); 
X_Set_Foreground 

(Sy8tein_Statua_Di8play, Sy8tein_Statu8_Di8play_Context, 1); 
end Write_Sword_Statu8_Do%m; 
procedure Write_Gp8_Statu8_Up ia 
begin 

X_Set_Background 

(Sy8tem_Statu8_Di8play, Syatem^StatuaJDisplay^ContCMCt, 13); 
X_Set_Foreground 

(Sy8tein_Statu8_0l8play, Sy8tem_Statu8_Dl8play_Context, 1); 
X_Draw_Image_String 

(Syatem_Statu8_pi8play, Sy8tein_Statu8_Drawing_Space, 

Sy a t e]n_S t at u8_Di aplayjContext, 

101, 15, 

•OP"); 

X_SetJBaclcground 

(Sy8tem_Statu8_Dl8play, Sy8tem_Statu8_I>laplayjContext, 14); 
X_Set_Foreground 

(Sy8tem_,Statu8_Di8play, Sy8tein_Statu8_Di8play_Context, 1); 
end Hrite_Gp8_Statu8_Up; 
procedure Nrite_Radar_Statu8_0p la 
begin 

X_Set_Bac)cground 


142 




(Systein_Status_Display, System_Status_Display_Context, 13); 
X__Set__Foreground 

(Syatem_Status_Diaplay, Syatem_StatusJ)i8play_Context, 1); 
X_Draw_lmage__St ring 

(Syatem_Statua_Dlaplay, Syatem_Statua_prawing__Space, 
Syatem_Statua_piaplayjCont«xt, 

101, 30, 

"UP"); 

X_Set__Background 

(Syatem_Statua_Diaplay, System_Statu8j)i8play_Contejtt, 14); 
X_Set_Foreground 

(Syatem_Statua_Di8play, Sy8tem__Statu8j)l8play_Conteatt, 1); 

«nd Write_Radar_Statua_Up; 
procedure l»rite_Link_Statua_Op ia 
begin 

X_Set__Background 

(Sy8tem__Statu8_Diaplay, Sy8tem^Status_0i8play_Context, 13); 
X_Set^Foreground 

<Sy8tem__StatU8_Di8play, Sy8tem_statu8_pi8play_Context, 1 ); 
X__prae^linage_String 

(Sy8teiii_Statu8_Di8play, Sy8tem__Statu8J>rawing__Space, 
Systein_Statu8_pi8play_Context, 

101, 45, 

'•UP*') ; 

X_Set_Background 

(Sy8tem_statu8_pisplay, Sy8t«n_Statu8j>isplay_Context, 14); 
X_Set_roreground 

(Sy8t«n_Statu8_pi8play, Sy8tem_Statu8_Di8play Ij. 

end 1lrite_Link__Statu8_l^; 


143 




■w? 






procedure Write_Fath_Status_Up Is 
begin 

X_SetjBackground 

(System_Status_Display, System_Statu8_Display_Context, 13); 
X_Set_Foreground 

(Systeiii_Statu8_Dlsplay, System_Statu8_pi8playjContext, 1); 
X_Draw__Iiiiage_S t ring 

(Systein_Status_Display, Sy8tem_StatusJDrawlng_Space, 
Sy8tem_Status^Dl8play_Context , 

346, IS, 

"UP"); 

X_Set_Background 

(System_Statu8_Dl8play, System_StatusJDisplayjContext, 14); 
X_Set_Foreground 

(System^StatusjDlsplay, Sy8tem_StatusJ>isplayjContext, 1); 
end Write_Fath_Statua_Up; 
procedure l»rite_Gyro_Statu8_Up is 
begin 

X_Set__Background 

(Sy8tejn_Statu8_Dlsplay, Sy8tein_Statu8_Dl8playjContext, 13) ; 
X_Set_Foreground 

(System_Statu8_Di8play, Sy8tem_Statu8_Di8playjContext, 1); 
X_Draw_linage_St ring 

(Sy8tem_Status_Dlsplay, System_Statu8_Drawing_Space, 
Sy8tem__Status_Di8play_Context, 

346, 30, 

*UP"); 

X_Set_Background 

(Sy8tem_Statu8_pi8play, Systen^StatusJDlsplayjContext, 14); 
X_Set_Foreground 

(Sy8tem_Statu8_pi8play, System_Statu8jDi8play_Contezt, 1); 


144 




end Write_Gyro_Status_Up; 
procedure Write_Sword_Status_Up is 
begin 

X_SetJBackground 

(Systes&^Status^pisplay, Sy8tem_Statu8_I>i8play_Context, 13); 
X_Set_Foreground 

(Sy8teiB_Statu8_pi8play, Sy8tem_,Statu8_Di8play_Contextr 1); 
XjDra%r_XiBage_String 

(SysternestatU8_pi8play, Sy8tem_Statu8_Drawing_Space, 
System_Statu8_pi8play_Context, 

346, 45, 

’•OP*') ; 

X_Set__Background 

(Sy8tem_Statu8_Display, Sy8tem_Statu8_pisplayjContext, 14); 
X_Set_Foreground 

(Sy8tem_Statu8_Di8play, Sy8tem_^Statu8_Di8playjContext, 1); 
end lfrite_Sword_Statu8jl^; 
procedure NriteJNay_Statu8 (Stat: in String) is 
begin 

X_Set_^Background 

(System_StatusJDisplay, Sy8teia_Statu8_Di8play_Context, 13); 
X_SetJForeground 

(System_Statu8_Dlsplay, Sy8tem_Statu8_pi8playjContext, 1); 
XJDraw_linage_String 

(Sy8tem_Statu8_pl8play, Sy8tea_Statu8jDrawing__Spacer 
System_Status_Dl8playjContext, 

101, 242, Stat); 

X_Set_Background 

(System^StatusJDisplay, Sy8te«_Stattt8_Dl8play_Context, 14); 
X__Set_Poreground 

(Sy8tem__Statu8jDi8play, Sy8t«m_StatusJ0ieplayjContext, 1); 


145 



•nd Nrite_Nav__Status; 

Intel Write Procedures 

procedure Write_Rel_Brg (ReljBrg: in String) is 

begin 

X_Draw_Image_St ring 

(Intel_Displayf lntel_prawing_Space, 
IntelJDisplayjContext, 

5, 15, 

"Contact Relative Bearing: "); 

X_Oraw_lmage_String 

(IntelJDisplay, lntel_Drawing_Space, 
Zntel_pisplay_Context, 

213, IS, ReljBrg); 

X_Drawjlnage_S t ring 

(Zntel_Display, intel_prawing_Space, 
IntelJDisplayjContext, 

253, 15, "Degrees'); 
end Write_Rel_Brg; 

Intel / Relative Contact Info 

procedure Write__Rel_Spd (Rel_Spd: in String) is 
begin 

X_praw_ZBiage_St ring 

(IntelJDisplay, lntel_Drawing_Space, 
ZnteljDisplayjContext, 

5, 30, 

"Contact Relative Speed "); 
XjDra«jIiBage_String 

(ZnteljDisplay, Intel jDrawing_Space, 
InteljDieplayjContext, 

213, 30, Rel_Spd); 

XjDraejIaMigejString 


m 





(Int«l_Dlsplayt lntel_Drawing_Spacer 
Intel_Di8play_Context, 

253, 30, •Knots'); 
end Write_Rel__Spd; 

procedure Wrlte_Tgt_Angle (Tgt_Angle: in String) is 
begin 

X_Draw_Iatage_Strlng 

(intelJDlsplay, lntel_prawlng_Space, 
Xntel_pi8play_Context, 

S, 160, 

•Target Angle: •); 

X_Draw_Ia«ge_,Strlng 

(Zntel_pl8play, Intel_prawlng_Space, 
intelJDlsplayjContext, 

117, 160, Tgt__Angle); 

XJDraw_l«Mige_Sti - 

(Intel_0l8play, ZntelJDrawlng^Space, 
Intel^DlsplayjContest, 

157, 160, •Degrees'); 
end lfrlte_Tgt_Angle; 

procedure Nrlte_TgtJNaaM (Tgt^Maa* : In String) Is 
begin 

XJDraw_Iaage_St ring 

(IntelJDlsplay, IntelJDra«lng_Space, 
IntelJDlsplayjContext, 

5, 60, •Trade Haaie: •); 

X_praw_Iaiage_8t ring 

(IntelJDlsplay, Intel_prawlng_8paoe, 
inteljOlsplayjContext, 

109, 60, Tgtjfaaw); 
end Nrlte_Tgt_Naa»; 


147 




pxoc«dar« Nrlt«_TgtjClaas (Class : In String) is 
begin 

XJDra«f_Iiiiage_String 

(IntelJDisplay, lntel_Oxawing_Space, 
Intel_Display_Context, 

5, 75, •Track Class: •); 

X_prair_Iaa 9 e_String 

(Intel^pisplay, lntel_prawlng_8paee, 
Intel_pisplay__Context, 

110, 75, Class); 
end Nrite^TgtjClass; 

procedure Nrlte_Tgt_Anp_Info (Info : in String) is 
begin 

XJDra w_la«ge_S t ring 

(IntelJDisplay, IntelJDrawing_Spaee, 
IntelJDisplayjContext, 

5, 90, Track Info: •); 

XjDraw_lnage_String 

(Intel_Display, lntel_Orawing_Space, 
Intel_Dlsplay_Context, 

109, 90, info); 
end 1frite_Tgt_JUBp_Info; 

procedure Write__Tgt_Height (Alt : in String) is 
begin 

X_l>ra«_IiMge_S t ring 

(lntel_Display, lntel_prawing_Space, 
IntelJDisplay_Contest, 

5, 105, •Track Altitude: •); 

X_praw_lawge_Strlng 

(IntelJDisplay, IntelJDra«ing_.Space, 
IntelJDisplayjContext, 


14S 





136, 105, Alt); 

X_J5t*t»_lBia9«__Strixig 

^l®t*l_pi*pl«y, lnt«l_prawlng, 
Xnt«l_Ol8playjCont«xt, 

192, 105, 

•nd Nrlt«_Tgt_Hai^t; 

Marts Nrlts Procsdusas 

pxocMlura 1lrita_CPA_M«rt (Targat_ID 

CPAJBsg 
CPA_Jtog 
CPA__Hts 
CPAjllns 

bagln 

X_S«t^Forsground 

(Marts^Oisplay, Mart8_Di8playjCMt*xt, 12); 

X_Flll_fUictan9l« 

(MsrtsjDisplay, Mart8j>rawing__Spac«, 
^•rtsjDisplayjContaat, 

0, 0, 433, 90); 

X_S«t_Fosagrouiid 

(Marts^pisplay, Mazt8_I>i8play_Contast, 1 ); 
X_Dzaw_Xattg«i_8trliig 

(Mazts^Dlsplay, M«rt8_Drawing_Spaoa, 
Mart sjDl^ay_Cont«st, 

1, 45, * Contact*); 

XjDra«_XMiga_Stsing 

^^•xts^Olaplay, Mazt8jDrawlng_jSpaoa, 
MaztsjDisplay__Coataxt, 

65, 45, Targat_XD); 

XJ>raw_XMga_Strlag 

(Marts.Dl^play, Marts_Orawlng_8paoa, 


Spaca, 


: in String; 

: in String; 

: in String; 

: in String; 

: in String) is 


149 




Al«cts_piq»lay_CoBtwtt, 

81, 45, • : CPA*); 

X_Draw_laBg«_strlng 

(Alarts^Dlsplay, Alart8jDrawing_Space, 
Alarta_0l8playjCoDtaxt, 

139, 45, CPA_Brg); 

X_praif_iBMga__Strlng 

(Alarts_J)i8play, Alaxt8_pratrlng_Spaca, 

Alart8_Dl8playjContttxt, 

l*)9, 45, '/•); 

X__Dra»»_l«ag8i_St ring 

(AlartajDlaplay, Alart8jDEawlng_Spaca, 
Alart8_pi8play_Contaxt, 

187, 45, CPA_^Rng); 

X_Dratf_Xmg«_St ring 

<Al8rt8jDi8play, AlartajDrawing^Spaca, 
Alart8jDi8playjCont8*t, 

245, 45, "Yarda at Tia» ;•); 

X_praw_l8nga__String 

(Al8rt8_pi8play, Alart8jDrairing_Spaca, 
Alart8_Di8play_Cont«*t, 

355, 45, CPA^Hra); 

Xj)raw_lang«jString 

(AlartaJDiaplay, AlartaJDrawing^Spac*, 
Alart8_pi8playjConta*t, 

379, 45, CPA^Nina); 

•nd Writ* CPA Alart; 


ISO 



procedure Nrite__Xntercept_Reconmendetlon 

(Targetjlo : in String; 

Rec_Cse ; in String; 

Rec^Spd ; in String; 

Rec_Hrs : in String; 

Rec_Mins ; in String) is 

begin 

X_pratr__Inage_String 

(ReconBiendation8_Di8play, RecoanendationsjDrawing^Space, 
Raconmendation8_0i8play_Conteat, 

5, 15, 

"Intercept to Target f”); 

XjDraw__Inage_String 

(Reconiiendation8_pi8play, Recoaaendations Drawin e S pace. 
Recomnendat ionsjDisplayjContext, 

181, IS, 

Target_No); 

XJDraw_laMge_String 

(Recoanendations^Display, Reca—iindationajrawing^Space, 
Recoonendatlon8_Di8play_Context, 

5, 30, 

• - - - ; 

X_Draw__lnage_St ring 

(Recoonendations^pisplay, Recoenendation8j>rawing_Spaee, 
Recoomndat ionsjDisplayjContext, 

5, 45, 

"Intercept Course:*); 

X_praw_I»age_St ring 

(Recnmsndations.Display, RecoesnndationsJlrawing^Spaee, 
RecoanendationsJDisplay^Context, 

149, 45, 


151 









Rec_C8e); 

X_Draw_Iinage_String 

(ReconnendatlonsjDlsplay, Recoiiiiiandations_Drawlng__Space, 
Racomandat lonsJDlsplayjContext , 

5, 60, 

"Zntarcapt Spaed :*); 

X_Draw_lmage_Stting 

(Racaaitandatlona^pisplay, Racoaiiiandatlon8jDrawing__Space, 
Reconnanda t ion8_pl8play__Contaxt, 

149, 60, 

Rac_Spd); 

X_Dxaw__Zfliage_St ring 

(Raconaandationa^piaplay, RacoiiiBandatlon8jDrawlng_Space, 
Raconnandationa^plaplay^Context, 

5, 75, 

"Intareapt Tima 
X_Draw_lnaga_St ring 

(Racoanandationa^Diaplay, Racoianandation8_J>rawing_Space, 
Recoonendat iona^piaplayjContaxt, 

149, 75, 

Rec_Hr8); 

X_Draw_Zaiage_St ring 

(Raco8nandation8__Di8play, Raconnandation8__Drawing_Space, 
RacoeBMndationaJDiaplayjContaxt, 

173, 75, 

RacJHina); 

end llrlte_Zntercept_Recoanendation; 
end Draw_Di8play_6raphic8; 


152 







APPENDIX E 


TACPLOT SET PACKAGE 


Author: Michael G. Stockvell 
Date : 12 September 1991 

Description: Opens and reads generic set package for Track 
objects 


with TRACK_PKG; use TRACK_PKG; 

with PROCESS_Znterface_Displays; use PROCESS^Znterface^Displays; 
with GENER1C_SET_PKG; 

package TACPI.OT_PKG is 

type TACPLOT is private; 

procedure EMPTY_TACPLOT; 

procedure ADD_TACPLOT_ELEMBNT (Element: in Track); 

procedure DISPLAY_TACPLOT; 

package TACPI.0T_ELEMENT_SET_PK6 is 

new 6ENEIIIC_SET_PKG (T -> TRACK, Block_Sise -> 2) ; 

private 

type TACPLOT is 
record 


153 




S : TACPIiOT_ELBMENT_SBT_PIC(3.SBT; 
end record; 
end TACPI.0T_PK6; 
package body TACPliOT_PKG ia 

tacplot_8et : tacplot; 
element : track; 

procedure ORAN_TACPI<OT_BLBMBNTS (Current_Track : in Track) la 
begin 

Proce88_TacplotjC%jecta (Current_Track); 
end ORAN_TACPI.OT_BLBMENTS; 

procedure SCAN_TACPI.OT la new TACPL0T_BLmiBHT_SBT_PK6.^NBRIC_SCAN 

(generate *> draw^^tacplotjaleamnta); 


procedure BMPTY^TACPLOT la 
begin 

If TACPL0T_BLBMBNT_SBT_PK6.SIZB(tacplot_8et.8) /- 0 then 
TACPI.OT_BI.EMBl«T_SBT_PKG. BHPTY (tacplot^set. 8) ; 
end If; 

end BMPTY_TACPI.OT; 

procedure ADD_TACPLOT_BUEHBNT (element: In Track) la 
begin 

TACPl.OT_BXJMnfT_SBT_PKG.ADO (element, tacplot_aet.8); 
end ADD_TACPI.OT_BI.BMnfT; 

procedure DX8PLAX_TACPI.0T Is 
begin 

SCAN_TACPLOT (tacplot_set .8); 


154 





end DISPLAy_TACPLOT; 

end TACPLOT PKG; 



APPENDIX F 


MAIN PROCEDURE 


with X_lib; use X_Lib; 
with tae; use tae; 
with XjNlndows; 

with TEXT_10, TRACK_PKG, GI.0BA1._P0SITION_PKG, GI.OBAL_OBSERVATION_PKG, 

VELOCITY_PKG, AMGLE_PKG, SPEED_PKG, REIATIVE_TIME_PKG, TACPLOT_PKG, 
ABSOLUTE_TIME_PKG, DISTANCE_PKG, D1RECT_10, TRACK_DATABASE_PKG, 
CPA_PKG, BELATIVE_P0S1TI0N_PKG, VECT0R_2_PKG, FILTER_PKG, 
SYSTEM_STATUS_PKG, NAV1GATI0N_PKG, IOTBGRATIOM_SySTEM_PKG, 
MONITOR_DISPLAYS, OPEN_INTERFACE_DISPIAyS, 
PROCESS_XNTERFACE_DXSPLAyS, 

0RA1f_DXSPLAy_GRAPHXCS, SySTEM_STATUS_PXG, XIITERCBPT_PKG; 

use TEXT_I0, TRACK_PKG, GI.0BAL_P0SXTI0N_PKGr GLOBAL_OBSERVATXOM_PKG, 
VELOCXTy_PKG, ANGLE_PKG, SPEE0_PXG, RELATXVE_TIMB_PKG, TACPLOT_PKG, 
ABSOLUTE_TXME_PKG, OXSTANCE_PKG, TRACK_I>ATABASE_PKG, CPAJPKG, 
BELATXVE_POSXTXON_PKG, VECT0R_2_PKG, FILTER_PKG, 

SySTEH_STATUS_PKG, 1IAVXGATX0N_PKG, XNTE6RATI0N_SySTEM_PKGr 
MONXTORJDX SP LAYS, OPEN_XNTERFACE_DXSPLAYS, 

PR0CESS_XMTERFACE_D1SPLAYS, 

DRAM DISPLAY GRAPHICS, SYSTEM STATUS_PKG, INTERCEPT PKG; 


156 






procedure menu is 


OWN^OBS 

OWN^CRS 

OWN__SPD 

0»INjCRS_SPD 

ADD_TRACK_FIAG 

mod__track_fiag 

mod__track 

DELETE_TRACK 

TAR6ET_BEARIHG 

TAR6ET__RANGE 

TARGET_OBS 

TGT_BRG_RNG 

TRK 

ONNSHIP 

IAT_DEG 

lATjMIN 

IAT__SBC 

IAT_DIR 

LONG_DEG 

L<»fG_MlN 

LOHG_SEC 

I.ONG_DIR 

ALERT^RAMGE 

Gps_sys 

RADAR__SYS 

l.INK_SYS 

GYRO^SYS 

FATH_SYS 

PIT_SYS 

BQPT_STATUS 


: GL0BAL_0BSERVATI0N; 
: Angle_Pkg.ANGLE; 


: SPEED; 


: VELOCITY; 


: BOOLEAN 

FALSE; 

: BOOLEAN 

FALSE; 

: NATURAL 

9999; 

: NATURAL 

9999; 

: ANGLE_PKG.ANGLE 

0.0; 

: DISTANCE 

5000.0 

: GLOBAL_OBSERVATION; 


: RELATIVE_POSlTION; 


: TRACK; 


TRACK; 


NATURAL 

0; 

NATURAL 

0; 

NATURAL 

0; 

NORTH_SOUTH 

N; 

NATURAL 

:• 0; 

NATURAL 

0; 

NATURAL 

0; 

EASTJNEST 

;• E; 

FLOAT 

3000.0; 

BOOLEAN 

FALSE; 

BOOLEAN 

FALSE; 

BOOLEAN 

FALSE; 

BOOLEAN 

FALSE; 

BOOLEAN 

FALSE; 

BOOLEAN 

FALSE; 

STATUS; 



157 








TRA(»_1D 


IDENTITY_TYPE; 



TRACKjCkT 


TRAC»_CATEGORY; 



TRACKjCSE 


AMGI£_PKG.ANGLE; 



TRACK_SPD 


SPEED; 



STATION_TIME 


NATURAL 


15; 

STATION_SPEEO 


FLOAT 


25.0; 

INTERCBPT_TRACK_NO 


NATURAL 


9999; 

INTERCEPT_TRACK 


TRACK; 



INTBRCBPT_BY__TIME 


BOOLEAN 


TRUE; 

ZNTERCEPT_BY_SPEED 


BOOLEAN 


FALSE; 

T_CAT 


TRACK_CATEGORY 


AIRJPLATFORM; 

RID 


RELATION_ID 


LESS_pR_EQQAL; 

RG 


DISTANCE 


100000.0; 

FC 


FILTER_CATEGORY; 



DA 


DISTANCE_ATTRIBUTE 



PID 


IDBNTITY_TYPE; 



EQ 


EQDALITY_RELATION_ 

ID EQUAL; 


p«ck«9« aanu_8upport Is 

package tae£loat__io is new text_lo.£loat_lo (taefloat); 
procedure inltlallzePanels (file : in string); 

— BEGIN EVENT_HANDLERs 

procedure iiienu_track__button (info : in taejwpt.event_contextjptr); 
procedure iiienu_plots_iaenu (info : in tae_wpt.event_contezt_ptr); 
procedure iDenu_alertsJbutton (info : in taejwpt.event_context_ptr); 
procedure aienu_filters_button(info : in taejHpt.event_contezt_ptr); 
procedure nenu_^defaults_button 

(info : in tae_wpt.event_context_ptr); 
procedure aenu_intelJt>utton (info : in taejwpt.event_contextjptr); 
procedure nenu__navJbutton (info : in taejwpt.event_context_ptr); 
procedure Mnu_lists_btttton (info : in taejNpt.event_conte3ct_ptr); 


158 








procedure nienu_coding_button (info 

procedure Sorry_OK_Button (Info 

procedure Sorry_OK__2 (Info 

proceduire trlc__selJKoNa]iie01 (Info 

procedure trlc_sel^tr]c_sel_cancel 

(Info 

procedure t rk.__ael_t rk_sel_lat_lon 

(info 

procedure trk;_sel_trk_ael_brg_mg 

(info 

procedure trk_sel__trk_sel_8creen 

(info 

procedure selJbrg__tgt_bearing (info 
procedure 8el_brg_ael_brg_canx__l 

(info 

procedure 8el_brg_Enter_pat8 (info 
procedure seljbrg_,aeljbrg_canx 

(info 

procedure sel_brg_tgt_range (info 
procedure glob_po8_latjnin (info 
procedure glob_po8__lat_8ec (info 
procedure globjpo8_long_deg (info 
procedure glob_po8_long_nin (info 
procedure glob_po8_long_8ec (info 
procedure glob_po8_lat_deg (info 
procedure glob_po8_8pacer (info 
procedure globjpo8_Spacer_l (info 
procedure globjpo8_lat_dir (info 
procedure glob_jpo8_long_dir (info 
procedure confirm__conf_continue 

(info 


: in tae_wpt.event_context_ptr); 
; in tae_wpt.event_context_ptr); 
: in tae_wpt.event_context_ptr); 
: in taejHpt.event_context_ptr); 

: in taejHpt.event_context_ptr); 

: in taejHpt.event_context_ptr); 

: in taejHpt.event_jconteztjptr); 

: in tae_wpt.event_context_ptr); 
: in taejwpt.event_context_ptr); 

: in tae_ifpt.event_conte]ttjptr); 
: in taejMpt.event_context_ptr); 

: in taejwpt.eventjcontextjptr); 
: in taejwpt.event_context_ptr); 
: in taejwpt.event_context_ptr); 
; in tae__wpt.event_context_ptr); 
; in taejwpt.eventjcontext_ptr); 
: in tae_wpt.event_jcontext_ptr); 
: in tae_«fpt.event_context_ptr); 
: in tae_wpt.event_contextjptr); 
; in taejiipt.event_contextjptr); 
: in tae_wpt.event_context_ptr); 
: in taejwpt.event_context_ptr); 
: in taejwpt.event_context_ptr); 

: in taejwpt.event^contextjptr); 


159 






procedure confinn_conf_cancel 

(info : in taejwpt.event_context_ptr); 

procedure alrt_sel__enter_data 

(Info : in tae_»ipt.event_contextjptr); 
procedure alrt_sel_cpa_alrt_range 

(info : in taejHpt.event_context_ptr); 
procedure alrt_sel_alrt_canjt_l 

(info : in tae_wpt.event_context_ptr); 
procedure alrt_sel_alrt_canx__2 

(info : in taejwpt.eventjcontext^ptr); 
procedure eqpt__sel_gp3_sel (info : in taejwpt .event__contezt_ptr); 
procedure eqpt_8el_radar_sel (info : in tae_i#pt.event_context_ptr); 
procedure eqpt_sel_link_sel (info : in tae_wpt.event_context_ptr); 
procedure eqpt_8el_gyro_ael (info : in taejMpt.event_context_ptr); 
procedure eqpt^sel^fath^ael (info ; in taejwpt. event__contejtt__ptr); 
procedure eqpt_sel_j>it_8el (info : in taejwpt.event^contextjptr); 
procedure eqpt_8el_enter_data(info : in taejwpt.event_context_ptr); 
procedure title^exit^ayatem (info : in taejwpt.event_context_ptr); 
procedure exit_ok_exit_,continue 

(info : in taejwpt.eTent_context_ptr); 
procedure exit_okjexit_cancel (info ; in taejwpt.e7ent_context_ptr); 
procedure trk_inod_trk_identity 

(info : in tae_wpt.event_context_ptr); 
procedure trk_niod_trk_control (info : in tae_wpt.event_context_ptr); 
procedure trkjmod_trk_point_type 

(info : in taejwpt.event^contextjptr); 
procedure trk_mod__trk_category 

(info : in taejwpt.event_contextjptr); 
procedure trk_inod_trk_j>o8ition 

(info : in taejwpt.event_context_ptr); 
procedure trkjDod_trk_aapjinfo 


IfO 





(Info 

procedure trkjmod_trk_naine (info 
procedure trk_inod_trk_course (info 
procedure trk_inod_trk_speed (info 
procedure trkjnod_trk_hei 9 ht (info 
procedure trk_mod_trk_iiiod_enter 

(info 

procedure trk_inod^trk_plat_cla8S 

(info 

procedure filt_8el_canx_filter 

(info 

procedure filt_8el_type_aelect 

(info 

procedure filt_8el_filter_coiDplete 

(info 

procedure filt_8el_add_filter(info 
procedure mg_filt_^mg_type (info 
procedure mg_£ilt_mg_liinit (info 
procedure mg_filt_h 9 t_liiiilt (info 
procedure mg_£ilt_operator (info 
procedure mg_filt_conplete (info 
procedure mg_filt_cancel (info 
procedure cat_filt_cancel (info 
procedure cat_filt_cat_type (info 
procedure cat_filt_operator (info 
procedure id_filt_id_type (info 
procedure id_filt_cancel (info 
procedure id_fiIt_pperatox (info 
procedure int_cept_awthod (info 
procedure int_cept_tiiiie (info 

procedure int_cept_speed (info 


: in taejifpt.event_context_ptr); 
: in tae__ifpt.event_contezt_ptr); 
; in taeji(pt.event_context_^r); 
: in tae_Hpt.event_contezt_ptr); 
: in taejwpt.event_contextjptz); 

: in taejHpt.event_contezt_ptr); 

: in taejiipt.event_context_ptr) ; 

: in taejHpt.event_context_ptr); 

: in taejMpt.event_conteact_ptr); 

in tae_ifpt.event__context_ptr); 
in taejwpt.event_context_ptr); 
in tae_«pt.event_contextjptr); 
in cae_wpt.event_context_ptr); 
in tae_wpt.event_contezt_ptr); 
in taejwpt.eveDt_context_ptr); 
in taejwpt.eventjcontextjptr); 
in taejwpt.event_contezt_ptr); 
in tae_wpt.eTent_context_ptr); 
in tae_wpt.event_^contezt_jptr); 
in taejifpt.eTent_contezt_ptr); 
in taejifpt.event_contezt_ptr); 
in tae_jifpt.event_context_ptr); 
in taejiipt.event_contezt_ptr); 
in taejwpt.event_conte3tt_ptr); 
in taejwpt.eventjcontextjptr); 
in tee_wpt.event_conteztjptr); 


161 





proe«dux« lnt_e«pt_jconpute (Info : in tn«jMpt.*v*nt_cont«xt_ptr); 

procodur* int_c«pt_canc«l (info : in ta«jifpt.«vant_contttxtjptr); 

— EMD BVEIIT_HAIIDLBR8 
end nenu^aupport; 

—> Program Daclarationa 


uae amnu__aupport; 
uae ta«.taa_miac; 
uaa Bvanta; 
ua« GraphicjOutput; 

Tacplot^Bttffar : X_Lib.String_Pointar now String'(* *) 

Taeplot^Syabol : XJLib.Kayboard.Kay_Sym; 

Tacplot_Statua : Coapoa«_Stattta_Raeord; 

: Evant :■ naw Baanta.Xvant_Raeord; 

: Evant :• naw Evanta.BvantJRaeord; 

: Evant :• naw Branta.Bvwit^Raeord; 

: Evant naw Bvanta.Bvaat_llacord; 

: Evant :* naw Bvanta.Bvant_Eacord; 

: Evant :* naw Bvanta.BvantJRacord; 

: Evant :• naw Svanta.Evant Raeord; 


thaDiaplay 

uaar_ptr 

mantt_info 

Sorry^info 

trk_aal_info 

aal_brg_info 

glob_poa_info 

confirm info 


: XjEindowa.Diaplay; 

: taajiipt.avant_contast_ptr; 
: taajifpt.avant_contantjptr; 
: taaji^.avant_contast_ptrf 
: taa_wpt.avant_eontaxt_ptr; 
: taajapt.avant_contast_ptr; 
: taa_wpt.avwit_oontaxt_ptr; 
: taajvpt.avant_contaxt ptr; 


TaeplotJK_Evant 

8yataiB^Info_X^Evant 

Traek__Znfo^X_Svant 

Elart aJXjBvant 

R a c omam n d a tiooa^XjEvant 

Zntal^X_Bvant 

8yatam_8tatua_X__Xvant 





alrt_sel_info 

: taejwpt.event_context_ptr; 

eqpt__ael_info 

: taejwpt.event^contextjptr; 

title_info 

: tae_wpt.event_context_^r; 

exit_ok__info 

: tae_wpt.event_context_ptr; 

trk__nod_info 

: taejwpt.event__context_ptr; 

filt_sel__info 

: taejwpt. event_context_pt r; 

mg_filt__info 

: taejwpt.event_contextjptr; 

cat_filt_info 

: taejwpt.eventjcontext_ptr; 

id_filt_info 

: taejwpt. event_context_ptr; 

int_cept__info 

: taejwpt.event_context_ptr; 

•type 

: wpt_eventtype; 

wptEvent 

: taejwpt.wpt_eventptr; 


package bo<j^ menu^aupport is 

procedure InitlalizePanels (file : in string) is 
use tae.tae_co; 
use tae.taejnisc; 

tinp__info ; taejwpt .event^contextjptr; 
begin 

— do one Co_New and Co^ReadFile per resource file 
tag>_.info new taejwpt.event_context; 

Co_New (0/ tnp_lnfo.collection); 

— could pass P_ABORT if you prefer 
Co_ReadFile (taip_info.collection, file, PjC(^); 

pair of Co_Finds for each panel in this resource file 

Bwnu_info :• new tae_wpt.event_contest; 
aMnu_info.collection :* ta[p_info.collection; 

Co_Find (annu_info.collection, '^nu_y'', a»nu_info.view); 


la 





Co_Find < 0 Mnu_ln£o.collttctioiif '^Mnu_t*, aMnu_info.targ«t); 

Sorry_^info n«w ta«jMi»t.«v»st_context; 

Sorry__info.collection :* t]Bp_lnfo.collection; 

Co_Flnd (Sorty_lnfo.collection, '*Sorry_y'*, Sorxy_ln£o.vlew); 

Co__Find (Sorry_ln£o.collection, •Sorryjt*, Sorxy_in£o.target) 

trk_8el_in£o new taejwpt.event^context; 

trk_ael_in£o.collection t8ip__in£o.collection; 

Co__Find (trkj8el_in£o. collection, 

•trk_8el__v*', trk__8el_in£o. view); 

Co_Find (t rk_8el_in£o.collection, 

“trk_8el__t*, trk_8el_in£o. target); 

8eljorg^in£o :• new taejHpt.event_eontext; 

8el_brg_in£o.collection :• tap_in£o.collection; 

Co_Find (eelJbrg_in£o.collection, 

•aeljftrgjv'’, 8elJt>rg_,in£o.view); 

Co^Find (8elJbrg_in£o.collection, 

''8eljbrg_t‘', 8elJt>rg_in£o.target); 

glob_po8_in£o :* new tae_wpt.event_context; 

glob_j> 08 _in£o.collection :* tap_in£o.collection; 

Co_Find (glob,_po8_in£o. collection, 

•glob_po8_v", glob_po8__ln£o.view); 

CO|_Find (glob_poa_in£o.collection, 

•glob_j) 08 _t •, gl^_j>o8_in£o. target); 

eon£ir8i__in£o new taejwpt.event_context; 

con£ixm_in£o.collection :* taip__ln£o.collection; 

CojFind (con£irai_in£o.collection, 

•con£irai__v*, con£lxa__in£o.vlew); 

Co_Find (con£in_in£o. collection. 


144 




'*conflxn_t'*f confintt_info. target); 
alrt_sel_ln£o :* new taejwpt.avent_cont«xt; 
alrt_3el_in£o.collection :•* tiBp_info.collection; 

Co__Flnd (alrt_8el_in£o.collection/ 

"alrt_8el_v‘', alrt_8el_in£o.vietf); 

Co^Find (alrt_8el_lnfo.collection/ 

*alrt_8el_t''/ alrt_ael_in£o. target); 
eqpt_ael_ln£o :■ nee taejwpt.event_context; 
eqpt_8el_in£o.collection :• tii 9 _ln£o.collection; 

Cojrind (eqpt_8el_in£o.collection/ 

’•eqpt__8el_v‘’ / eqpt_8el_ln£o. view); 

Co__Flnd (egpt_8el_in£o.collection/ 

*eqpt_8el_t “, eqpt_8el_ln£o.target); 
title_ln£o :> new tae_«ipt.event_context; 
title_in£o.collection :■* tnp^^info.collection; 

Co_Flnd (tltle_info.collection/ '‘tltle_v*/ title_info.view); 
Co_Flnd (title_info.collection/ *title_t*/ title^info.target); 
e*lt_olc^ln£o :« new tae_wpt.event_contezt; 
exitjok._in£o. collect ion :« tap_in£o. collection; 

Co^Find (exlt_o)e_in£o.collection/ 

*e*lt__ok__v*’/ exit_olc_info.view); 

Co_Flnd (exit_o)e_in£o. collection/ 

•e*it_ok_t * / exit_o)c_in£o. target); 
trk_aod_in£o new taejwpt.eventjcontezt; 
trk_nod_ln£o.collection :• tap_in£o.collection; 

Co_Find (trk_mod_info.collection/ 

•trkjBOd^^v*/ trkjox>d_in£o.view); 

Co_Find (trk_aod_,in£o.collection/ 

•ttkjeod_t"', trkjeod_in£o.target); 

£ilt^8el_in£o :■ new tae_wpt.event_context; 
filt^sel^info.collection :• tap_info.collection; 

liS 

















Co__Pind (£ilt_8el_in£o. collection, 

’•£ilt_sel_v'', £ilt_50l_in£o.viow) ; 

Co_rind (£ilt_8«l_in£o.collection, 

'*£ilt_8el_t*’, £ilt_sel_in£o. target) ; 
mg_£ilt_in£o :■ new taejwpt.event_context; 
mg_£ilt_in£o.collection :■ tii^_in£o.collection; 

Co__Find (mg_£ilt__in£o. collection, 

*mg_£ilt__v*', mg_£ilt_in£o-view); 

Co_Find (mg_£ilt_in£o.collection, 

•mg^iilt^t", mg_£ilt_in£o.target); 
cat_£ilt_in£o new tae_wpt.event__context; 
cat_£ilt_in£o.collection ta?>_in£o.collection; 

Co_Find (cat__£ilt_in£o.collection, 

•cat_£ilt_v'', cat_filt_in£o. view); 

Co_Find (cat_£ilt__in£o. collection, 

•cat_£ilt_t •, cat_£ilt_in£o.target); 
id__£ilt_in£o ;« new taejwpt.event_conte*t; 
id_£ilt_in£o.collection tiqp_in£o.collection; 

Co^^Find (id_£ilt_in£o. collection, 

'"id_£ilt_v‘’, id_£ilt_in£o. view) ; 

Co__Find (id_£ilt_in£o. collection, 

"id_£ilt_t'', id_£ilt_in£o.target) ; 
int_cept_in£o new tae_wpt.event_context; 
int_cept_in£o.collection :• tnp_in£o.collection; 

Cg_Find (int_cept_^in£o. collection, 

*int__cept_v'', int__cept_in£o. view) ; 

Co_Find (int_cept_in£o.collection, 

*int_cept_t", int_cept_in£o. target); 

— Since there can now be MULTIPU INITIAL PANELS de£ined £ron 
—* within the TAE WorkBench, call Npt_NewPanel £or each panel 

— de£ined to be an initial panel (but not uaually all the panela 


m 





— which appear in the resource file). 
taejwpt.lfpt_NewPanel C", title_info.target, title_info.view, 
XJWindows.NulljHindow, title_info, taejwpt.ifPTJDEFAULT, 
title_info.panel_id); 

taejwpt.Npt^NewPanel ('*'', iBenu_^info.target, iiienu__info.view, 
XJNindows.NullJNindow, iaenu_info, taejwpt.NPTJDEFAULT, 
nenu_in£o.panel_id); 
end initializePanels; 

-BEGIN EVENT_HANDLER8 

procedure awnu_track__button (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae__taeconf.STRIMGSIZE); 
count : taeint; 
begin 

tae_yiB.Vm_Extract_Count (info.pamjptr, count); 
if count <* 0 then 
null; 

else 

tae_vm.VSjBxtract_SVAL (info.pazinjptr, 1, valued)); 
end if; 

ONNSHIP GET_OIINSHIP_TBACK; 
if sjequal (value (1), "Add a New Trac)i*) then 
ADD_TRACK_FLAG :> TRUE; 
tae_wpt.Npt_NewPanel 

("*, tr)c_sel_info.target, tr)c_sel_info.view, 
X_Nindows.Null_Nlndow, trk_sel__info, taejwpt.NPTJDEFAULT, 
trk__sel_info.panel_id) ; 

elsif s_equal (valued), "Delete the Selected Track*) then 
DELETE_TRACK GET^HOOKEDJTRACKjnBffiER; 
if Dfil£TE_TRACK /» 9999 then 
tae__wpt .Npt.NewPanel 


(*"*, eonfim_in£o.targ«t, conflxm^lnfo.vlaw, 
XjNindows.MullJirlndow, conflnn^lnfo, ta«i_iipt.1lPT_j>EFAULT, 
con£ixiB_lnfo.panal__ld); 
elsa 
null; 
and If; 

alslf s_aqual (value (1)/ '‘Modify the Selected Track*) then 
M0D_TRACKjriA6 TRUE; 

MOD_TRACK GET_R001CED_TItACK_IIIBffiER; 
if MQDJTRACK /- 9999 then 

tae_wpt.Npt^NewPanel 

trk_iBod__lnfo.target, trk_aod_lnfo.vietf, 
XJNindows.NullJNindow, 

trk_»od_info, tae_ept.llPT_pBrAULT, 
trk_mod_lnfo.panel_id); 

else 

null; 
end if; 
end if; 

end nenu_trackjE>utton; 

procedure oenu^plota^aenu (info : in taejwpt.event_contest_ptr) is 
value : array (1..1) of string (1..tse__taeconf.STR1N6S1ZE); 
count : taeint; 
begin 

tae_yai.Vte_Sxtract_Count (info.pam_ptr, count); 
if count <- 0 then 
null; 

else 

tae_va.Vle_Bxtract_SVAL (info.parsi_j>tr, 1, value(l)); 
end if; 


m 







if s_equal (valued), "Mapa and Grids") then null; 

tae_wpt.Wpt_NewPanel (**, Sotry_info.target, Sorry_info.view, 
XJHindows.NullJNindow, Sorry_ln£o, tae__»#pt.MPT_DEFAULT, 
Sorry_^in£o.panel_id); 

elsif s_equal (value(1), "Zones and Areas") then null; 

tae_Hpt.Wpt_NewPanel (*", Sora:y__in£o.target, Sorry_info-view, 
X_l(indows.NullJHindow, Sorry_info, tae_wpt.WPT_DEFAULT, 
Sorry_in£o.panel_id); 

elsif s_equal (value(1), "Sectors and Formations") then null; 
tae_t(pt.Wpt_NewPanel <"", Sorry_info.target, Sorry_info.view, 
XJNindows.NullJHindoe, Sorry_info, tae_iipt.WPTJDEFAULT, 
Sorry_info.panel_id); 

end if; 

end aenu^lots_menu; 

procedure awnu_alerts_button (info ; in tae_»»pt.event_context_ptr) is 
value : array (1..1) of string (1..tae__taeconf.STRINGSIZE); 
count : taeint; 
begin 

tae_vm.Vta_Extract_Count (info.parm_j>tr, count); 
if count <■• 0 then 
null; 

else 

tae_vm.Vm__Exttact__SVAL (info.parm_ptr, 1, valued)); 
end if; 

if s_equal (valued), "Visual Alerts Only") then 
SET_VISUAL_AI.ERTS; 

elsif s_equal (valued), "Audio and Visual Alerts") then 
SET_AV_ALERTS; 

elsif s_equal (valued), "Disable all Alerts") then 
DZSABLE^ALERTS; 
end if; 


169 







end menu_axerts_button; 

procedure inenu_£ilters_button (Info : in taejwpt.event_context_ptr) Is 
value : array (1..1) of string (1..tae_taeconf.STRINGSZZE); 
count : taeint; 
begin 

tae_vm.V«_Extract^Count (info.pannjptr, count); 
if count <* 0 then 
null; 
else 

tae_vm.Vni_Extrsct_SVAL (info.parm_ptr, 1, valued)); 
end if; 

if s^equal (valued), "Disable all Display Filters") then 
ZNTEGRATION_SySTEM.CLEAR_FILTER; 

SET_FILTER_STATUS ("OFF"); 

elsif s_equal (value(1), "Activate Default Display Filters") then 
INTEGRATION_SySTEM.CLEAR_FILTER; 

SET_FILTER_STATUS ("OFF"); 
end if; 

end inenu_filters_button; 

procedure inenu_defaultsJbutton (info ; in taejifpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 
begin 

tae_vm.Vta__Extract_Count (lnfo.par]n_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vin.VBi_Extract_SVAL (info.panii_ptr, 1, valued)); 
end if; 

if s__equal (valued), "Set Systm Filters") then null; 
taejwpt .Npt_Ne«fPanel 


170 





filt_sel_info.target, filt_sel_info.view, 
X_Hindows.Null_Window, 

filt_sel_info, tae_wpt. l*PT_pEFAULT, 
£ilt_sel_info.panel_id); 

elsif s_equal (value(1), "Set Alert Parameters") then null; 
tae_wpt.Wpt^NewPanel 

alrt_sel_lnfo.target, alrt_sel_in£o.view, 
X_Hindows.Null_HindOM, 

alrt_ael_info, taejwpt .WPT__pEFAULT, 
alrt_sel_info.panel_id); 

elsif s_equal (value(1), "Set External System Inputs") then null; 
tae_wpt .l*pt__Ne»iPanel 

("", eqpt_sel_info.target, eqpt_sel_in£o.view, 
X_Hindows.Null_Hindow, eqpt_sel_in£o, 
tae_wpt.WPT_DEFAUIiT, eqpt_sel_in£o .panel_^id); 
elsif s_equal (valued), "Set Custom System Configurations") then 
null; 

tae_wpt.Hpt_Ne«Panel ("", Sorry_,in£o.target, Sorry_,info.view, 
XJWindows.NullJWindow, Sorry_info, tae_i»pt.WPT_DEFAULT, 
Sorry_info.panel_id); 

end if; 

end menu_defaults_button; 

procedure menu_intel_button (info : in tae__wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 
loegin 

tae_vm.'WBi_Extract__Count (info.parm_ptr, count); 
if count <« 0 then 
null; 

else 

tae_vm.Vm_Extract_SVAIi (info.parm_ptr, 1, value(l)); 


171 







•nd if; 

if s_equal (value(1), "Use Naaie for Intel Search*) then null; 
tae__wpt.ffpt^NewPanel ("'*/ Sorry_info.targets Sorry_info.view, 
XJNindows.Mull_Window, Sorry_lnfo, tae^%;pt.IIPT__DEFAULT, 
Sorry_info.panel_id); 
elsif 8_equal (value(1)« 

"Use Country and Platform Type for Intel Search*) then null; 
tae_wpt.llptJMewPanel (**, Sorry_info.target, Sorry_info.vlew, 
XJNindotrs.HullJWindow, Sorry_info, taejwpt.MPT^OEFAULT, 
Sorry_lnfo.panel_ld); 
elsif s_equal (valued), 

"Use Comnents for Intel Search*) then null; 
tae_wpt.Npt_MewPanel ("", Sorry_info.target, Sorry_info.view, 
XJNindows.Null_Nindow, Sorry_lnfo, taejwpt.llPT_J)EFAUl»T, 
Sorry_info.panel_ld); 

elsif s_eq:ual (valued), "Edit Intelligence Database*) then null 
tae_wpt.ifpt_NewPanel (*", Sorry__info.target, Sorty_info.view, 
X_Nindo«f8.Null_lflndow, Sorry_info, tae_wpt.1IPT_J>EFAULT, 
Soxxy_info.panel_id); 

end if; 

end nenu_intel_button; 

procedure inenu_nav_button (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 
begin 

taejvm.VmJExtractjCount (info.paxm_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vm.Vm_Extract_SVAL (info.parm^ptr, 1, valued)); 
end if; 


172 





if 8_equal (valued), "Plot a Great Circle Path*) then null; 
tae__%;pt.Wpt__NewPanel (*", Sorry_in£o.target, Sorry_in£o.view, 
XJHindows.NullJNindow, Sorry_lnfo, taejwpt.WPTJDEFAULT, 
Sorry__in£o.panel_id); 
elalf s_equal (value(1), 

"Override Navigation Equipment Inputs*) then null; 
tae_iipt.llptjMewPanel ("", Sorry_info.target, Sorry_in£o.viee, 
X_irindows.NullJNindow, Sorry_ln£o, taejHpt.NPT__DEFAULT, 
Sorry_in£o.panel_id); 

elsif s_equal (value(1), "Plot an Intercept Course*) then 
ONNSHIP GETjONNSHIP_TRACK; 

INTERCEPT_TRACK_NO GET_HOOKED__TRACKJMUMBER; 
if INTERCEPT_TRACK_NO /- 9999 then 

INTERCEPT__TRACK :« GET_HOOKED_TRACKjOBJBCT; 
tae_wpt.Npt_NewPanel 

("", int_cept_in£o.target, lnt_cept_ln£o.view, 
XjNindows .NullJNindow, int^cept^^info, 
tae__wpt. WPT_DEFAULT, int_cept_inf o. panel__ld); 

else null; 
end if; 

elsif 8_equal (valued), "Plot an Avoidance Course*) then null; 
tae_wpt.NptJNewPanel ("", Sorry_in£o.target, Sorry_ln£o.vlew, 
X_Windows. Null__Nindow, Sorry__info, tae_wpt.WPTJDEFAOLT, 
Sorry_info.panel_id); 

end if; 

end menu_nav_button; 

procedure menu_listsJbutton (info : in tae__wpt.event_context_ptr) is 
value : array d..l) of string d..tae_taecon£.STRXN6SlZE); 
count : taeint; 


173 




begin 

tae^vm.VtakjBxtractjCount (ln£o.parm_ptr, count); 
if count <- 0 then 
null; 
else 

tae_vin.Vm_Extract_SVAL (lnfo.paxin_ptr, 1, valued)); 
end if; 

if 8_equal (valued)# *View a Iiist*) then null; 

taejHpt.Wpt_MewPanel (*"# Sorry_info.target, Sorxy^info.view, 
XjNindows.NulljHindow, Sorry_info, taejept.UPTJDBFAULT, 
Sorry_lnfo-panel_ld); 

elsif s^jsgual (value (1), "Edit a List*) then null; 

taejwpt.WptJHewPanel ('"‘, Sorry^info.target, Sorry^info.view, 
XJNindows.NullJNindow, Sorry^info, taejwpt.NPTJDEFAULT, 
Sorry_lnfo.panel_id); 

end if; 

end nenu^listsjbutton; 

procedure nenu_coding_button (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STR1N6SIZE); 
count : taeint; 

begin 

tae__vm.Vte_^Extract_Count (info.paxai_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vBi.VSi_Bxtract_SVAL (info.parai_ptr, 1, valued)); 
end if; 


174 





if s_equal (valued), "Decode an ATP-1 Signal") then null; 

tae^wpt.NptjNewPanel (*", Sorry_in£o.target, Sorry_info.view, 
XjNindowa.NulljMindow, Sorxy__info, taejwpt.lfPT_DEFAULT, 
Sorry__info.panel^id); 

elsif s_equal (valued), "Encode an ATP-1 Signal") then null; 
taejept.NptJNewPanel ("", Sorxy_ln£o.target, Sorry^info.view, 
XjNindowa.NulljMindow, Sorry__in£o, taejwpt.1IPT_DEFAULT, 
Sorry^in£o.panel__id); 

end if; 

end Bienu__coding_button; 

procedure SorryjOK__Button (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vin.VnjExtract_Count (in£o.]f>annj>tr, count); 
if count <• 0 then 
null; 

else 

tae_va.Vta_Eztract_SVAL iin£o.parm_ptr, 1, valued)); 
end if; 

tae^wpt.Wpt_NewPanel ("", ownu^info.target, awnu_info.view, 
XJNindows.NullJfindow, awnu^info, taejwpt.NPTjDEFAULT, 
aenu__in£o.panel_id); 
tae_wpt.Npt^PanelErase(info.panel_id); 
end Sorry_OK_Button; 

procedure Sorry_0K_2 (info : in taejwpt.event_context_ptr) is 
value : array d..l) of string (1..tae_taeconf.STRIIRSSISB); 
count : taeint; 


175 



begin 

tae_vm.Viii_ExtractjCount (lnfo.patm_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vm.Vni_Extract_SVAL (lnfo.pam_^r, 1, valued)); 
end if; 

taejirpt.Npt_NewPanel (**, aMnu_info.tatget» eenu^info.view, 
XJNindowa.MullJNindow, nenu_infO/ taejHpt.llPT_DBFADLT, 
Mnu_info.panel_id); 
tae_ifpt .Mpt^PanelErase <info.panel_id); 
end SorryjOK_2; 

procedure tr)c_sel_NoHaaie01 (info : in tae_wpt.event_cohtextjptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIMGSIZE); 
count : taeint; 

begin 

tae_vm.Vm__ExtractjCount (info.pam_ptr, count); 
if count 0 then 
null; 

else 

tae_vm.VSi_Extract_SVAL (info.pam_ptr, 1 , valued)); 
end if; 

taejwpt.Npt^NewPanel aMnu_info.target^ Mnu^info.view, 

XjNindows.HulljEindow, awnu_info, taejiipt.llPT_DEPAULT, 
a»nu_info.panel_id); 
tae_Mpt.Npt_PanelErase(info.panel_id); 
md trlt sel NoNaawOl; 


m 





procedure trk_sel__trk__8el_brg_mg 

(info : in tae_wpt.event_contextjptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_jvm.Vte_^Extract__Count (info.parai_ptr, count); 
if count <«■ 0 then 
null; 

else 

tae_vm.Vta_Extract_SVAL (info.parm_ptr, 1, valued)); 
end if; 

taejwpt.Npt^HeePanel 8el_btg_info.target, seljbrg^info.view, 
Xjirindoes.NullJNindow, 8elJbrg_info, tae_irpt.l(PT_DBFA.ULT, 
seljbrg^info.panel^id); 
taejwpt.Npt_PanelEra8e(info.panel.id); 
end trk_sel_trk_aeljbrg_mg; 

procedure trk__8el_trk__8el_8creen 

(info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_vm.V)B_Bxtract_Count (info.parai_ptr, count); 
if count <■> 0 then 
null; 

else 

tae_ym.Vn_Extract_SVAL (info.panajptr, 1, value(1)); 
end if; 

tae_ept.lipt_lfewPanel ("•, 8orry_info.target, Sorry_info.vlew, 


177 


XJNlndows.Nulljlflndow, Soxry_infOr taejwpt.lfPT_DBFAiniT, 
Sorry_lnf o. paiMl_ld); 

•nd txk_8ttljtrk_sel_scre«n; 

procedure trk_8el_trk_sel_cancel 

(info : In tae__ifpt.event_context_ptr) ia 
value : array (1..1) of atrlng (1..tae_taeconf.STR1M6SIZE); 
count : taelnt; 

begin 

tae_vni.Vm_Extract_Count (info.parmjptr, count); 

if count <~ 0 then 
null; 

elae 

tae_vn.Vta_Extract_SVAL (info.paxm_ptr, 1, value (1)); 

end if; 

taejwpt.Npt^MewPanel (**, flMinu_info.targetr 8Mmu_info.view, 
XJfindowa.Nulljirindow, aenu_infOr tae_ifpt.1fPT_pBrAULT, 
nenu^info.panel^id); 

tae_tfpt. Npt_PanelEra8e (inf o. panel_id); 
end trk_8el_trk__ael_cancel; 

procedure trk_8el_trk_8el_lat_lon 

(info : in tae_wpt.event_context_ptr) ia 
value : array (1..1) of atring (1..tae^taeconf.STRUKSSIZE); 
count : taeint; 

begin 

tae_vai.Vta_E3itractjCount (info.paxa^ptr, count); 

if count <* 0 then 
null; 


ITS 





else 


tae_vin.Vn_Extrsct__SVAL (info.pexn_ptr, 1, value (1)); 
end If; 

taejwpt.Npt_NewPanel 

(•*, glob_po8_info.target, glob_pos_in£o.vlew, 

XJNlndows.NullJMlndow, glob_pos_lnfo, tae_wpt. IIPT_pEFAULT, 
glob_pos__info.panel_id); 
tae_wpt .Wpt__PanelErase (lnfo.panel__id); 
end trk_sel_trk_8el_lat_lon; 

procedure 8el_8crn_8el_8crn_canx 

(info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIM6SIZE); 
count : taeint; 

begin 

tae_via.Vln_Extract_Count (info.para_ptr, count); 
if count <* 0 then 
null; 

else 

tae_vin.Vte_Extract__SVAL <info.pann_ptr, 1, valued)); 
end if; 

tae_Mpt.llpt_NntrPanel ('*’*, trk_sel_info.target, trk_8el_info.vie»», 
XJNindow8.Null_Nindow, trk__8el_info, taejwpt.NPTJDEFAULT, 
trk_8el_info.panel_id); 
taejMpt .Npt_PanelErase (info.panel_id); 
end 8el_8cm__8el_8Cin\_canx; 

procedure 8el_brg_tgt_bearing (info : in tsejifpt.event_context_ptr) is 
value : array (1..1) of taeint; 
count : taeint; 


179 



begin 

tae_vm.VtaJBxtract_Count (Info.parmjptr, count); 
if count <~ 0 then 
null; 

else 

tae_vm.Vta_Extcact_IVAL (ln£o.patm_ptr, 1, value(1)); 
Target_Bearlng DE6REES_T0_RADIAMS(FLOAT(value(1))); 

end if; 

end 8 el_br 9 _tgt_bearlng; 

procedure 8eljbrg_tgt^range (Info : in tae__wpt.event_context_ptr) is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

tae_vai.Vta_KxtractjCount (info.pam__ptrr count); 
if count <■* 0 then 
null; 

else 

tae_vm.V)n_Extract_IVAL (info.parmjptr, 1, value(1)); 
TargetjRange FLOAT(value(1)); 
end if; 

end seljbrg__tgtjrange; 

procedure sel_brgj8el_brgjCanXjl 

(info : in taejwpt.event_contextjPtr) is 
value : array (1..1) of string (1. .tae_taeconf .STRINGSISB); 
count : taeint; 


begin 





taejvm.Vta_BxtractjCount (Info.parm^ptr/ count); 
if count <■ 0 then 
null; 

else 

tae_vm.Vta_Extract_SVAL (in£o.paxin_ptr, 1, value (1)); 
end if; 

tae_wpt.WptJNewPanel trk_8el__info.target, trk_8el_lnfo.view, 

XJNindoes.HullJNindow, trk_sel_info, taejwpt.NPT'JDEFAULT, 
trk__8el_info.panel^id); 
taejwpt .Npt_PanelEra8e (info.panel_id); 
end sel__brg_8el_brg_canx_l; 

procedure 8el_brg_Enter_Data (info : in taejifpt.event_context_j>tr) is 
value : array (1..1) of string (1..tae__taeconf.STR1N6SIZB); 
count : taeint; 

begin 

tae_vin.Vta_Extrsct_Count (info.pann_j>tr, count); 
if count <* 0 then 
null; 

else 

tae_vm.Vta_E*tract_SVAL (info.parn,ptr, 1, value (1)); 
end if; 

TGT_BRG_M»G REIATIVE_P0SIT10N 

(MA1CE_P0IAR_VECT0R_2 
(TARGETJtAMGE, TAR6BT_BBARZHG)); 

TAIU»T_OBS MAKEJ3I.OBALJ>BSERVATX(X) 

(ONNSHIP, TRR, T6T_BR6_RN6); 

IIITB6RATICEf_SySTEM.C:REATE_TRACK (TAR6ET_0BS, Track_pkg.UNKMOim) ; 
A1>D_TRACX_FLA6 FALSE; 

tae_wpt.Npt_IfewPanel awnu^info.target, aenu^info.view, 


181 



Xjlflndows. NullJNlndow, munujinfO/ taejwpt. NPTJDEFAULT, 
iiienu_info.panel_ld); 
tae^wpt .N]pt_PanalEra8e (Inf o.panel^id); 
and sal_brg__Enter_Data; 


procedure sal_brg_sel_brg_canx (info : in tae_wpt.avent__context^tr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vra.VSi^Extract_Count (info.parm_ptr, count); 
if count <■■ 0 then 
null; 

else 

tae_vin.Vta_Extract_SVAI< (info.pamjptr, 1 , value (1)); 
end if; 

taejwpt<Npt_NewPanel (’*’*, trk_8el_info.targetr ttk__8el_info.vieif, 
XJNindows.Null_Window, trk^sel^info, taejwpt.NPTJDEFAULT, 
trk__8el_info.panel_id) ; 
taejwpt.Npt_PanelEra8e(info.panel_id); 
end 8el_brg_sel_brg_canx; 


procedure globjpos__long_deg (info : in tae_wpt.event_contezt_ptr) is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

taejvB.vai_Xxtract_Count (info.parai_ptr, count); 
if count <• 0 then 


m 





null; 


elae 

tae_vm.Vm_Extract_IVAL (info.parmjptr, 1, valued)); 
LONG_DEG:- HATURAL(VALUE(1)); 
end if; 

end 9 lob_po 8 _,long_de 9 ; 


procedure 9 lobjpo 8 _long_mln (Info : in tae_wpt.event_context_ptr) Is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

tae_vin.Vm_Extract_Count (lnfo.panft_ptr/ count); 
if count <" 0 then 
null; 

elae 

tae_vm.Vta_Extract_IVAL (info.pamjptr, 1, value(l)); 
LCmGJHIN:- NATURAL(VALUE(1)); 
ond if; 

end glob_po8_long_inin; 

procedure glob_po8__long_8ec (info ; in tae_wpt.event_context_ptr) la 
value : array (1..1) of taeint; 
count : taeint; 

begin 

tae_vm.Vta_Extract_Count (info.pam^tr, count); 
if count <■• 0 then 
null; 

elae 


183 



tae_vin.A^_Extract_IVAL (Info.paxmjptrr 1, value (1)); 
LONG_SEC;- NATURAL(VALUE(1)); 
end if; 

end glob_po8_long_sec; 

procedure glob_pos_long_dir (info : In tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae^taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_ym.Vm_Bxtract_Count (info.pann_j>tr, count); 
if count <• 0 then 
null; 
else 

tae_vBi.Vin_Extract_SVAL (info.pannj>tr, 1 , valued)); 
if s_equal (valued) «”£")then 
LONG^DIR E; 
else 

LONG_DIR ;• W; 
end if; 
end if; 

end globj>os_long_dir; 

procedure glob_pos__lat_deg (info : in tae_^ifpt.event_context^tr) is 
value : array d..l) of taeint; 
count : taeint; 

begin 

tae__vm.Vta__Extract_Count (info.parm_ptr, count); 
if count <» 0 then 
null; 


184 




else 

tae_vin.Vm_Extract_ZVAL (lnfo.paxin_j>tr, 1, value(1)); 
LAT_DE6:- KATURAL(VALUE(1)); 
end if; 

end glob__po8_lat_deg; 

procedure 9 lob_pos_lat_iiiln (info : in taejwpt .event__context_j>tr) Is 
value : array (1..1) of taelnt; 
count : taelnt; 

begin 

tae_vm.Vm_Eztract_Count (in£o.parm_ptr, count); 
if count <•■ 0 then 
null; 

else 

tae_vin.Vlm__Extract_IVAL (info.pamjptrf 1, value (1)); 
LAT_MIN:- HATURAL(VALUE(1)); 
end if; 

end glob_po8_lat_niin; 

procedure globjpo8_lat_sec (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of taelnt; 
count : taelnt; 

begin 

tae_vm.Vta__ExtractjCount (Info.parmjptrr count); 
if count <- 0 then 
null; 

else 

tae_vm.Vn__Extract_IVAL (Info.parmjptr, 1, value (1)); 

LAT SEC:- HATURAL(VALUE(1)); 


185 





end if; 


end globjpos_lat_sec; 

procedure globjpos_lat_dlr (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIMGSZZE); 
count : taeint; 

begin 

tae_vm.Vta_Extract_Count (in£o.panB_ptr, count); 
if count <* 0 then 
null; 

else 

tae_vm.Vm_Extract_SVAL (info.panD_ptr, 1, value(l)); 
if s_equal (valued) ("N")then 
lAT_piR N; 
else 

IATJ)IR S; 
end if; 
end if; 

end glob_j)OS__lat_dir; 

procedure glob_po8__spacer (info : in tae_wpt .event_contcuct_ptr) is 
value : array (1..1) of string (1..tae__taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vm.Vin_ExtractjCount (info.parmjptr, count); 
if count <> 0 then 
null; 

else 

tae_vm.Vn_Extract_SVAL (info.parm_ptrr 1# valued)); 

m 







•nd if; 

tae_ifpt.NptJNewPan«l (**, trlc_8«l_ln£o.target, trk_8el__lnfo.vieM/ 
XJNlndows.NullJNindow, trk_sel_in£o, taejwpt.WPTJDEFAULT, 
trk__sel_ln£o.panel__id); 
taejwpt .N]pt_PanelEra3e (ln£o.panel_ld); 
end 9 lob_pos_spacer; 

— global position Enter Data button 

procedure glob_p 08 _Spacer_l (info : in taejwpt.event_eontext_|>tr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

NEN_POSZTZON : GLOBAL_POSZTZOK; 

NEir_,OBSERVATZOM : 6L0BAL_0BSERVATZC»f; 

begin 

tae_ym.Vta_EstractjCount (info.paxnjptrr count); 
if count <■■ 0 then 
null; 

else 

tae_vm.V)ni_Extract_SVAI. <lnfo.parm_ptr, 1, valued)); 
end if; 

if Mod_Track__riag then 

NEIf_POSZTZON MAKEj8Ii0BAL_P0SZTZa( 

(LATJ>IR, LAT_DE6r LAT.MIN, ZAT_SBC, 
IiCBfG_pZR, UXIG_ptG, LOMGJMZH, I<(»6_SBC); 

ZMTEGRATZON_SY8TEM.CHA)l6B_6ZiOBAL_POSZTZON 

(NOD.TRACK, 1IBII_POSZTION) ; 

Hod_Track_Flag False; 

Hod Track :*9999; 


1«7 




else 


NEW_OBSERVATION.POSITION MAKEJ3LOBAL_POSITION 

(IAT_DIR, IAT_DEG/ IAT_MIN, 1AT_SEC, 
LONG_DIR, LONG_DEG, LONG_MIN, IiONG_SEC); 
NEW_OBSERVATION.OBSERVATION_TIME :- 

ABSOLDTE_TIME_PKG.NOW; 
NEW_OBSBRVATION.COURSE_AND_SPEED :- 

(MAKE_CARTESIAN_VECT0R_2 (0.0, 0.0)); 
INTEGRATION_SySTEM.CREATE_TRACK 

(NEW_OBSERVATI(»l, TRACK_PKG.UNKNOWN); 
Add_Traclc_Flag False; 
end If; 

tae_wpt.Npt_NewPanel ("*, menu_lnfo.target, aenu^lnfo.vlew, 
XJHindows.NulljWindow, inenu_in£o, taejifpt.NPT_pEFAULT, 
iiienu__ln£o.panel_ld); 
tae_«pt.Wpt.PanelErase(in£o.panel_id); 
end globjpos__Spacer_l; 

procedure exit_olc_exit_continue (info : in taejwpt.event_context_ptr) Is 
value : array (1..1) of string (1..tae_taecon£.STRINGSIZB); 
count : taeint; 

begin 

tae_vn.Vte_^Bxtract_Count (info.paxiB_ptr, count); 
if count <» 0 then 
null; 

else 

tae_vin.V>a_Extract_SVAX. (in£o.pam__ptr, 1, valued)); 
end if; 

end exit o)c exit continue; 


188 



procedure exlt_ok_jexlt_cancel (Info : in taejHpt.event_contezt_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIMGSIZE); 
count : taeint; 

begin 

tae_viB.vjn_ExtractjCount (info.pam_ptr, count); 

if count <■ 0 then 
null; 

else 

tae_vm.Vm_Extract_SVAL (info.parm^ptr, 1, valued)); 

end if; 

tae_wpt.)^t_MwPanel aienu_info.target, aienu_info.view, 

X_Nindows.MulljNindow, nenu_info, taejwpt.NPTjDBFAULT, 
aienu_info.panel_^id); 

tae_ifpt .lfpt_PanelBrase (info.panel.id); 
end exit_o)e_exit_cancel; 

procedure tr)e_BK>d_tr)c__ldentity (info : in taejwpt.eventjBontext_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZB); 
count : taeint; 

TRACK_ID; IDBOTITY^TfPB; 

begin 

tae_va.V)B_Extract_Count (info.parm_ptr, count); 

if count <• 0 then 
null; 

else 

tae_ym.V)a_Bstract_SVAIi (info.panD_ptrr Ir value(l)); 
if sjaqual (valued), 'Friendly”) then 
TRACK ID FRiraDLY; 


189 





elaif s_equal (value (1), '‘Hostile*’) then 
TRACK_ID HOSTILE; 

elsif s_equal (value(1), "Neutral') then 
TRACK_ID NEUTRAL; 

elsif s_equal (value (1), "UnJcnown') then 

TRACK_ID :• TRACK_PKG.UNKNOI(N; . 

end if; 

A 

1NTEGRATI0N__SYSTEM.SET_TRACK_IDBNTITT (NOD_TRACK, TRACK_1D); 
end if; 

end trk_iiiod_tr)t_identity; 

procedure trlc_inod_tr)c_control (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZB); 
count : taeint; 

TRACK_CONTROL: CONTROL^TYPE; 

begin 

tae_yn.Vta__ExtractjCount (info.parm_ptr, count); 
if count <■ 0 then 
null; 

else 

tae_,vm.Vta_Extract_SVAL (info.parajptrr Ir value(l)); 
if sjequal (valued), "LINK") then 
TRA(»_CONTROL LINK; 

else 

TRACK_C(NITROL LOCAL; 
end if; 
end if; 

INTBaUkTICWLSYSTEM.SBT_CONTROL (NOD^TRACK, TRACKjCONTROL); 
end trie wod tr)c control; 


190 



proc«dur« trk_iiiod_trk_point_typ« 

(info : in taejifpt.«vent_eontezt_ptr) is 
value : array (1..1) of string (1..taa_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_v]n.Vn__Bxtract_Count (info.panii_j>tr, count); 
if count <■ 0 then 
null; 

else 

tae_vm.Vta_Extract_SVAL (info.parm_ptr, 1, value(1)); 
end if; 

end trkjBod_trk_point__type; 

procedure trk_jBOd_trk^category (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

TRACK_CAT: TRACK_CATEGORT; 

begin 

tae_vm.Vta_Extract__Count (info.parm_ptr, count); 
if count <~ 0 then 
null; 

else 

tae_vm.Vto_Estraet_SVAL (info.parajptr, 1, value(1)); 
if s_equal (valued), "Unknown*) then 
TRACK_CAT TRACK^PKG.WXNONN; 

elsif 8_equal (valued), "Surface_Platform*) then 
TRACK_CAT SURFACEJPLRTrORM; 

elsif s^equal (valued), "SubSurface_Platform*) then 
TRACE CAT SUBSURFACE PXATFCNVI; 


Ifl 






elslf sjequal (valued), '*Alr_Platform‘') then 
TRACK_CAT AIR_PIATFORM; 
elslf 8_equal (valued), '*Man_InjHater*) then 
TRACK_CAT MMI_IN_*fATER; 
elslf s_equal (valued), '*Speclal_Polnt*) then 
TRACK__C»T SPECIAL_P01IIT; 
end If; 
end If; 

INTEGRATION_SySTEM.CHANGE_TRA(nc_CATEGORY (MOD_TRACK, TRACKjCAT); 
end tck_nod_trk_categozy; 

procedure trk_mod_trk_posltlon (Info : In taejwpt.event__context_ptr) Is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count ; taelnt; 

begin 

tae_vin.Vtn_Extract_Count (lnfo.parm_j>tr, count); 

If count <* 0 then 
null; 

else 

tae_vm.Vn__Extract_SVAL (Info.pamyptr, 1, valued)); 
end If; 

tae_wpt.Npt_MewPanel 

("'*, glob_pos__lnfo.target, glob_pos_lnfo.vlew, 

XJflndotrs.Nulljrlndow, glob_po8_lnfo, tae_wpt.NPT^DEFAULT, 
glob,_pos__lnfo.panel_ld); 
taejwpt .ilpt_PanelEra8e (trkjnod_lnfo.panel_ld); 

end trkjBod_trk_posltlon; 


192 







procedure trlcjtnod_trk_ainp__info (Info : in tae__wpt. event_context_ptr) is 
value : array (1..1) of string (1..S6); 
count : taeint; 

TRACK_AMP : STRING (1..56); 
begin 

tae_vin.Vln_Extract_Count (info.parsi_ptrr count); 
if count <~ 0 then 
null; 

else 

tae_vm.Vn_Extract_SVAL (info.parm_j>tr, 1, value (1)); 
TRACK_AMP VALUE(1); 
end if; 

1NTEGRATI0N_SYSTEM.SET_AMPL_INP0 (MOD_TRACK, TRACK_AHP); 
end trk_mod_trk_amp_info; 

procedure trk_inod_trk_naaie (info : in tae_%;pt.event_context_ptr) is 
value : array (1..1) of string (1..32); 
count : taeint; 

TRACKJNAME : STRING (1..32); 

begin 

tae_vni.Vte_Extract_Count (info.pann_j>tr, count); 
if count <• 0 then 
null; 

else 

tae_viii.Vta_Extract_SVAL (info.panB_ptr, 1, value(l)); 
TRACK_NAME VALUE(1); 
end if; 

INTB(»ATI(X(_SYSTEM.SET_VESSEL_NAMB (MOD_TRACK, TRACSCJOME); 
end trk siod trk naaw; 


193 




procedure trk_mod_trk_course (info : in tae_wpt.event_contextjptr) is 
value : array (1..1) of taeint; 
count : taeint; 

TARGETjCSE : ANGLE_PKG.AMGI<E; 

begin r 

tae_vm.Vta_Bxtract_Count (info.pann_ptr, count); 
if count <- 0 then 
null; 

else 

tae__vm.Vta_Extract_IVAL (info.pann_ptr, 1, value(l)); 

TARGET_CSE OEGREBS_TO_RADXANS(FLOhT(VALUE(1))); 
end if; 

IMTEGRATIOM_SYSTEM.CHAMGE_COURSE (MOD_TRACK, TARGETjCSE); 
end trkjDOd^trk^course; 

procedure trkjmod_trk__speed (info ; in tae_wpt.event_context^tr) is 
value : array (1..1) of taeint; 
count : taeint; 

TARGET_8PD : SPEED; 

begin 

tae_via.V)BjExtract_Count (info.par]B_^trr count); 
if count <* 0 then 
null; 

else 

taejvn.VlnJBxtract_IVAL (info.parm_ptr, 1, valued)); 

TAR6BT_SPD MAKE_SPEEO(FLOAT(VALUE(1))); 
end if; 

IMTBGRATION_SYSTEM.CHANGE_SPEED (MCX>_TRA(3R, TAR(3TjSPD); 
end trkjwd^trk^speed; 


194 








procedure trk_jnod_trk__height (info : in tae_%ipt .event_context_ptr) is 
value : array (1..1) of taeint; 
count : taeint; 

TARGET_HEIGHT : DISTANCE; 

begin 

tae_vin.Vln_Extract_Count (info.pamjptr, count); 

if count <“ 0 then 
null; 

else 

tae_vm.VJn_Extract_IVAL (info.parm_ptr, 1, value(l)); 
TARGET_HEIGHT (FLOAT(VALUE(1))/3.0); 

end if; 

lNTEGRATION__SySTEM.SETJUiTITUDE (MOD_TRACK, TARGET_HEXGHT); 
end trkjBod_trk__height; 

procedure trk_inod__trk_mod_enter (info : in taejiipt.event__context_jtr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_vin.Vta__Extract_Count (info.pann_ptr, count); 

if count 0 then 
null; 

else 

tae__vm.vn_Extract_SVAL (info.pann_ptr, 1, value (1)); 

end if; 

MOD^TRACKJFLAG FALSE; 

MOO_TRACK 9999; 

tae_«pt.ltptjNewPanel (""f iiienu_lnfo.targetr laenu^info.view. 


195 





X_W.-ndows.Null_Window, inenu_lnfOr taejwpt.WPTJDEFAULT, 
inenu_info.panel_id); 

taejwpt.Wpt_PanelErase(in£o.panal_id); 
end trJc_inod_trk_mod_enter; 

procedure trlc_mod_trk_plat_class 

(info : in taejwpt.event_context_ptr) is 
value : array of string (1..32); 

count : taeint; 

TRACK_CIASS : STRING (1..32); 

begin 

tae_ym.Vlm_Extract_Count (info.pamjptr, count) ; 

if count <•■ 0 then 
null; 

else 

tae_vin.vai_Extract_SVAL (info.pamjptr, 1, valued)); 
TRACKj:iASS VALUE (1); 

end if; 

INTEGRATION_SYSTEM.SET_PLATFORM_CLASS (MOD_TRACK, TRACK_CLASS); 
end trk_mod_trk_plat_class; 

procedure confim_conf_continue (info : in tae_wpt. event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae__vin.Vn_Extract__Count (info.pamjptr, count); 

if count <* 0 then 

INTEGRATI<W_SYSTEM.DEI.ETE_TRACK_AND_SEND_Tq_HISTORY 

(DELETE_TRACK); 

MOD TRACK FLAG :« FALSE; 


196 








MOD_TRACK 9999; 
end if; 

tae_wpt.Wpt_PanelErase(info.panel_id); 
end con£inn_con£_contlnue; 

procedure con£irni_con£_cancel (ln£o : in tae_’i»pt.event_contextj>tr) is 
value : array (1..1) o£ string (1..tae_taecon£.STRIN6SIZE); 
count : taelnt; 

begin 

tae_vm.Vm_Extract__Count (in£o.parm_ptr, count); 
i£ count <•■ 0 then 
null; 
else 

tae_vm.Vm__Extract_SVAL (in£o.parm_ptr, 1, valued)); 
end i£; 

MOD_TRACK_FLAG FALSE; 

MOD_TRACK 9999; 

tae_wpt.Npt_NewPanel inenu_in£o.targetr nenu_in£o.view, 
XJNindows.NullJNlndow, inenu_in£o, tae_wpt.l»PT_pEFAULT, 
inenu_in£o.panel_id); 
tae_Hpt.Npt_PanelErase(in£o.panel_id); 
end con£lnn_con£_cancel; 

procedure alrt_8el_cpa_alrt_range 

(in£o : in taejwpt.eventjcontextjptr) is 
value : array (1..1) o£ taelnt; 
count : taelnt; 
begin 

tae^vm.VteJExtract^Count {ln£o.pann_ptr, count); 
i£ count <> 0 then 


197 




null; 

else 

tae_vin.Vm_Extract_IVAL (Info.parmjptrr valued)); 
end If; 

Alert_Range :> float(value(1)); 
end alrt_sel_cpa_alrt_range; 

procedure alrt_sel_alrt_canx_l (info : in taejwpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIM6SIZB); 
count : taeint; 

begin 

tae_vni.Vm_Extract_Count (info.parm_ptr, count); 
if count <* 0 then 
null; 

else 

tae_vm.Vin__Bxtract_SVAL (info. pann_ptr/ 1 , value (1)); 
end if; 

tae_wpt.NptJNewPanel ("**, aienu_info.targetr iRenu_info.view, 
X__Nindows. NullJNindow, aenu__lnfo, taejwpt. NPTJDEFAULT, 
Bienu_info.panel_ld) ; 
tae_ept .lfpt_PanelErase (lnfo.panel_id); 
end al rt__sel_al rt_canx_l; 

procedure alrt_sel_enter_data (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_via.Vta_Extract_Count (info.parmjptr, count); 
if count <•■ 0 then 


198 










text_io. put_^line ('•none*'); 
else 

tae_vm.^nn_Extract_SVAL (info.parmjptr, 1, value(1)); 
end if; 


SET__CPA_AI.ERT_RANGE (Alert_Range) ; 

tae_wpt.Wpt_NewPanel ('•*, B)enu_ln£o.target, nienu__in£o.view, 
X_Windows.NulljNindow, menu^info, tae_wpt.llPT_DEFAULT, 
inenu__in£o. panel_id); 
taejwpt.Npt_PanelErase(in£o.panel_id); 
end alrt sel enter data; 


procedure alrt_sel_alrt_canx_2 (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taecon£.STRINGSZZE); 
count : taeint; 


begin 

tae_vin.Vm_Extract_Count (info.pamjptr, count); 
if count <« 0 then 
null; 

else 

tae_vm.Vm_Extract_SVAL (in£o.par]n_ptr, 1, value (1)); 
end if; 

taejwpt.Npt_NewPanel nienu_info.target, menu_info.view, 

XjNindows.NullJNindow, inenu_info, tae_wpt.lfPT_DEFAULT, 
aienu_info.panel_id); 
taejwpt.Npt^PanelErase(in£o.panel_id); 
end al rt_sel_al rt_canx__2; 

procedure eqpt__sel_gps_sel (info : in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taecon£.STRIll6SIZE); 
count : taeint; 


199 





begin 

tae_va.Vin__Extract_Count (info.paxm_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vin.V!m_Extract_SVAL (lnfo.pam_ptr, 1, value (1)); 
if not 6PS_SYS then 
GPS_SYS:- True; 

else 

GPS_SYS False; 
end if; 
end if; 

end eqpt_8el_gps_ael; 

procedure eqpt_sel_radar_8el (info : in tae_wpt.event_contextjptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZB); 
count : taeint; 

begin 

tae_vn.Vln_Extract_Count (info.pamjptrr count); 
if count <-> 0 then 
null; 

else 

tae_yin.V)B_Extract_SVAL (info.pam_ptr, 1, valued)); 
if not RADAR^SYS then 
RADAR_SYS:- True; 

else 

RADAR_SYS False; 
end if; 


200 










•nd if; 

end •qpt_8el_radar_9el; 

procedure eqpt_sel_link_sel (info : In tae_tipt.event_context_ptr) is 
value : array (1..1) of atring (1..tae_taeconf.STRIN6SIZE); 
count : taelnt; 

begin 

tae_vm.Vln_Bxtract_Count (info.parm_ptr, count); 
if count <» 0 then 
null; 

else 

tae_vn.Vm_Extract_SVXL (lnfo.pann_ptr/ 1, value(1)); 
if not I.ZNK_sys then 
LINK_SYS True; 

else 

LZNK_SYS False; 

end if; 
end if; 

end eqpt_sel_link_8el; 

procedure eqpt_8el_gyro_8el (info : in tae_wpt.event_contezt_j>tr) is 
value : array (1..1) of string (1..tae_taeconf.STRIMGSIZE); 
count : taeint; 

begin 

tae_vm.Vm_Extract_Count (info.parmjptr, count); 
if count <• 0 then 
null; 

else 

tae_vm.vm_Estract_SVAL (info.panajptr, 1, value(1)); 




if not GYRO_SYS then 
GYRq_SyS True; 

else 

GYRO_sys False; 

end if; 
end if; 

end eqpt_ael_gyro__sel; 

procedure eqpt_ael_fath_8el <info : in taejMpt.event_context_ptr) ia 
value : array (1..1) of string (1..tae_taeconf.STRIN6SXZE); 
count : taeint; 

begin 

tae_va.Vin_Estraet_Count (info.parm_ptr, count); 
if count 0 then 
null; 

else 

tae^va.VtajBxtract^SVAI. (info.paxn_ptr, 1« valued)); 
if not FATH_SYS then 
rATH_srs True; 

else 

rATH_SYS False; 

end if; 

end if; 

end eqpt_sel_fath_sel; 

procedure eqpt_8el^it_sel (info : in taejNpt.event_contest_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRZMGSXSB); 
count : taeint; 



202 


begin 

tae_vm.V!m_Extract_Count (info.parmjptr, count); 
if count <“ 0 then 
null; 

else 

tae_vin.Vin__Extract_SVAL (info.pazm_ptr, 1, value(l)); 
if not PlT_syS then 
PIT__SYS :■ True; 

else 

PXT_SYS :• False; 
end if; 
end if; 

end eqpt_sel_pit_sel; 

procedure eqpt_sel_enter_data (info : in taejMpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taelnt; 

begin 

tae_vm.Vta_Extract_Count (info.parmjptr, count); 
if count 0 then 
null; 

else 

tae_va.V)B_Extract_SVhL (info.pam_ptrr Ir valued)); 
end if; 

IIITB6RATX0N_SYSTEM.6ET_SENS0R_STATa8 ( LXNK, B(^_STATDS ); 
if EQPT_STATUS - OONN and X.I1IK_8Y8 • TRDB then 

XMTB^UiTX0N_8Y8TIM.8BT_8XN80R_8TATD8 ( LINK, OP ); 
elsif BQPT_8TATU8 - OP and LXNR.SYS - FALSE then 

X)ITB(»ATI0N_8Y8TEM.8ET_8BNSOR_8TATO8 ( LINK, DONN ); 
end if; 


2t3 





INTEGRATION_SySTEM.GET_SENSOR_STATUS ( GPS, EQPT_STATaS ); 
if EQPT_STATUS - DOWN and GPS_SyS - TRDE than 
INTEGRATION_SySTEM.SET_SENSOR_STATOS ( GPS, OP ); 
alsif EQPT_STATUS - UP and GPS_SyS - FALSE than 
INTEGRATION_SySTEM.SET_SENSOR_STATUS ( ©PS, DOWN ); 
and If; 

INTEGRAT10N__SySTEM.GET_SENS0R_STATUS ( RADAR, EQPT_STATUS ); 
if EQPT STATUS ■ DOWN and RADAR_SyS ■ TRUE than 
INTEGRATIC»l_SySTBM.SET_SENSOR_STATOS ( RADAR, UP ); 
alalf EQPT_STATOS - UP and RADAR^SYS ■ FALSE than 
INTEGRATI<»*__SySTEM.SET_SENSOR_STATUS ( RADAR, DOWN ); 
and if; 

INTEGRATION__SySTEM.GET_SENSOR^STATUS ( PITSWORD, BQPT_STATUS ); 
if EQPT__STATUS - DOWN and PIT_SyS « TRUE than 

INTEGRATI<»»_SySTBM.SET_SENSOR_STATOS ( PITSWORD, OP ); 
alsif EQPT_STATUS « UP and PIT_SyS - FALSE than 

INTEGRATION_SySTEM.SET_SENSOR_STATUS ( PITSWORD, DOWN ); 
and if; 

INTBGRATION_SySTlM.GET_SENSOR_STATDS ( GYRO, EQPT_STATOS ); 
if EQPT_STATUS - DOWN and GyRO_SyS ■ TRUE than 
INTEGRATIC»l_SySTEM.SET_SENSOR_STATUS ( GYRO, UP ); 
alsif EQPT_STATUS - UP and GYRO^SYS - FALSE than 
INTEGRATION_SYSTBM.SET__SENSOR_STATOS ( GYRO, DOWN ); 
and if; 

lNTB(a<ATI(M»__SYSTEM.GET__SENSt»_STATUS ( FATHOHBTER, EQPT_STATDS ) 
if EQPT_STATUS - DOWN and FATH_SYS - TRUE than 

INTE6RATI0N_SYSTBM.8BT_SENS0R_STATUS ( FATHOHBTER, UP ); 
alsif B(^T_STATUS - UP and FATH_STS • FALSE than 

1MTB6RAT10N_SYSTEM.SET_SENS0R_STATUS ( FATHOMBTBR, DOWN ); 
and if; 

test system STATUS; 













ta«_wpt.1lpt_N«wPanttl iMnu_info.target/ nenu_lnfo.view/ 

XjNlndows.NullJIfindoH, nenu_lnfO/ tae_ifpt.NPT_DEPAULT, 
Mnu_info.panel_id); 
tae_wpt. N]pt_PanelEra8e (info. panel_ld); 
end eqpt_8el_enter_data; 

procedure tltle_exlt_8y8tem (info : in tae_ifpt. event__context_ptr) ie 
count : taeint; 

begin 

tae_vn.VtajBxtractjCount (info.pacm_ptr/ count); 
if count <* 0 then 
null; 
end if; 

taejwpt.Npt^NewPanel ("*'/ exit_ok__info.target/ exit_ok_info.vlew/ 
XJNindows. NullJNindow/ e*it_ok_infO/ taejept. IIPTJDEFAUI.T/ 
e*lt^ok_lnfo.panel__id); 
end title_exit_8y8tem; 

procedure filt_8el_canx_fliter (info : in tae_wpt.event_context_ptr) ia 
value : array (1..1) of atring (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_ym.VBjBxtract_Count {info.pann_ptr/ count); 
if count <* 0 then 
null; 

elae 

tae_vai.VM_Xxtract_8VAXi (info.parm_ptr/ 1/ valued)); 
end if; 

taejwpt.Npt^NewPanel (**/ awnu^lnfo.target/ aMnu^lnfo.view/ 


205 



XjNindows.NullJNindow, inenu_lnfo, tae_wpt.WPT_DEFAULT, 
inenu_in£o. panel__id); 
taejHpt .tfpt_PanelEraae (in£o.panel_id); 
end £ilt_sel_canx_£ilter; 

procedure £ilt_8el_type_8elect (in£o : in tae_wpt.event_context_ptr) i8 
value : array (1..1) o£ atring (1..tae_taecon£.STRINGSZZE); 
count : taelnt; 

begin 

tae_vni.Vta__Extract_Count (in£o.pann_ptr, count); 
i£ count <- 0 then 
null; 

elae 

tae^vn.Vte^Extract^SVAL (ln£o.pam_ptr, Ir valued)); 
end i£; 

i£ 8_equal (valued), "Baaed on Range/Height') then null; 

FC:- DISTAMCE_FILTER; 
tae__wpt. Npt_NewPanel 

mg_£ilt_in£o.target, mg_£llt_in£o.view, 
XJWindowa.NulljBindoe, mg_£ilt_info, taejwpt.NFTJDEFAULT, 
mg_£ilt_ln£o.panel_ld); 
tae^wpt .Wpt_PanelEra8e (ln£o.panel__id); 
el8l£ 8_equal (value(1), "Baaed on Trac)c Category') then null; 
tae_«rpt. lllpt_HeePanel 

("", cat_£ilt_in£o.target, cat_£ilt__info.view, 
XjNindowa.MulljNindow, cat_£ilt_in£o, taejwpt.llPT_DBFAULT, 
cat_£ilt_in£o.panel_id); 
tae_wpt.l^_PanelEra8e (info. panel_id); 
elaif 8_equal (valued), "Baaed on PlatZozn Identity") then null; 
tae_wpt.Npt^NewPanel 


206 






('*'*, id_£ilt_in£o.target, id_£llt_in£o.view, 

X__Windowa. Null_Nlndow, id_£ilt_in£o, tae__wpt. lfPT__DEFAULT, 
id_£ilt_in£o.panel_ld); 
tae^wpt. Wpt^PanelEraae (in£o.panel_^id); 
end i£; 

end £ilt_sel_type_select; 

procedure £llt_8el_add_£llter (in£o : In taejwpt.event_conte3ct_ptr) la 
value : array (1..1) o£ string (1..tae_taecon£.STRIN6SZZE); 
count : taelnt; 

begin 

tae_vm.vm_Extract_Count (in£o.pann_ptr, count); 
i£ count <■ 0 then 
null; 

else 

tae_vm.Vlm_Extract_SVAL (in£o.pann_ptr, 1, valued)); 
end i£; 

INTBGRATIOM^SYSTBM.ADD_AND_riLTER_TO_PILTER; 

SET__riLTER_STATUS ('"ON"); 
end £llt_8el_add_£llter; 

procedure £llt_8el_£llter_coiit>lete 

(in£o : in taejwpt.event_context_ptr) is 
value : array (1..1) o£ string (1..tae_taecon£.STRIllGSIZB); 
count : taeint; 

begin 

taejna.Vta^BstractjCount (in£o.parmjptr, count); 
i£ count <* 0 then 
null; 


207 




else 


tae_viQ.Vm_Extract_SVAL (info.paxin_ptr, 1, valued)); 
end if; 

lNTEGRATION_SySTEM.WRITE_FILTER; 

tae_wpt.Wpt^NewPanel ('*"/ menu_info.target, inenu_info.view, 
X_WindOHS.NullJNindow, inenu_lnfo, taejwpt.WPTJDEFAULT, 
inenu_in£o. panel_id); 
tae_Hpt.Npt_PanelErase(in£o.panel_id); 
end £ilt_sel_£ilter_coii¥>lete; 

procedure mg_£ilt_mg_type (info ; in tae_wpt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_vai.Vm_Extract_Count (info.pamjptr, count); 
if count <- 0 then 
null; 

else 

tae_v]n.Vta_Extract_SVAI< (lnfo.pann_j>tr, 1, valued)); 
if s_equal (valued), "Height”) then 
DA ALTITUDE; 

else 

DA RANGE_FROM_REFERENCE_TRACK; 
end if; 
end if; 

end mg_filt_mg__^type; 

procedure mg_filt__mg_liadt (info : in taejwpt.event_contezt_ptr) is 
value : array d..l) of taeint; 
count : taeint; 


208 


begin 

tae_vin.Vta_Extract_Count (info.parm_ptr, count); 
if count <- 0 then 
null; 
else 

tae_vin.Vm_Extract_IVAL (in£o.pann_ptr/ 1, value(l)); 

RG FLOAT(VALUE(1)); 
end if; 

end rng__filt_rng_limit; 

procedure rng_filt_hgt_liniit (info : in tae_»#pt .event_context_ptr) is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

tae_vin.vm_Extract_Count (info.parmjptr, count); 
if count <- 0 then 
null; 

else 

tae_viii.Vtn_Extract_IVAL (info.pann_ptr, 1, value (1)); 

RG:- FLOAT(VALUE(1)/3); 
end if; 

end mg_£ilt_hgt_liiiiit; 

procedure mg_,£ilt_operator (info : in tae_wpt.event_context_j>tr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae_vn.VlB_ExtractjCount (info.parmjptr, count); 


209 



if count 0 then 

null; 
else 

tae_vin.Vm__Extract_SVAL (in£o.paxin_j>tr, 1, value (1)); 
if s_equal (valued)« *>■'*) then 
RID GR£ATER_0R_E(3UAL; 

else 

RID LESS_OR_EQUAL; 

end if; 
end if; 

end rng_£ilt_operator; 

procedure mg_filt_coin)lete (info : in tae_%ipt.event_context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSZZE); 
count : taeint; 

begin 

tae_via.vm_Extract_Count (info.pano_ptr^ count); 
if count <■■ 0 then 
null; 

else 

tae_vm.Vta_Extract_SVAL (info.pam_ptr, 1, value(l)); 
end if; 

INTEGRATICMI_SYSTBM.MAKE_DISTANCE_ATQMIC_FILTER (DA, R6, 0, RID) ; 
taejifpt .Wpt_NewPanel 

('*", filt__sel_info.target, filt__sel__info.view, 
X__lfindows.Null_»lindo»f, filt_sel_info, tae_iipt.llPT_pEFAOLT, 
filt_8el_in£o.panel_ld); 
taejwpt .l^t_PanelErase (info.panel_id); 
end mg_fllt_conplete; 


210 






procedure mg_£llt_cancel (info : In taejwpt.event_context_ptr) ia 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vm.Vn_Extract_Count (in£o.parm_ptr, count); 
if count <- 0 then 
null; 

else 

tae_vm.Vta_Extract_SVAL (info.pamjptr, 1, valued)); 
end if; 

tae_wpt.WptjNewPanel 

{'*’*, filt_sel_info.target, filt__8el__info.view, 

XjNindows.NulljNindow, £ilt_sel_info, taejapt.lfPT_DBFAULT, 
£ilt_8el__lnfo.panel_ld); 
tae_wpt.Npt^PanelErase(info.panel_id); 
end mg__filt__cancel; 

procedure cat_£ilt_cancel (info : in taejwpt.event_contextjptr) is 
value : array (1..1) of string (1..tae_taeconf.STRINGSIZE); 
count : taeint; 

begin 

tae__v]ii.Vm_Extract_Count (info.parmjptr, count); 
if count <• 0 then 
null; 

else 

tae_vm.Vn_Extract_SVAL (info.parm_ptr, 1, valued)); 
end if; 

taejapt.NptjNeePanel 

{•*, filt_8el_info.target, filt^sel.info.view. 


211 






XJWlndows.NullJWindow, filt_8el_info, tae_*ipt.WPT_pEFAULT, 
filt_sel_info.panel__id); 
tae_wpt.Wpt_PanelErase(ln£o.panel_id); 
end cat_filt_cancel; 

procedure cat_filt_cat_type (info : in tae_wpt.event__context_ptr) is 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vni.VBi_Extract__Count (info.pann_ptr, count); 
if count <■■ 0 then 
null ; 

else 

tae__vm.Vin_Exttact_SVAL (info.parmjptr, 1^ value(1)); 
end if; 

if 8_equal (valued), "Unlcnown*') then 
T_CAT TRACKJPKG.UNKNOWN; 

elsif s__equal (valued), "Surface Platform*') then 
T_CAT SURFACE_PLATPORM; 

elsif s_equal (valued), "Subsurface Platform') then 
TjCAT SUBSURFACEJPLATFORM; 

elsif s_equal (valued), "Air Platform") then 
TjCAT AIRJPLATFORM; 

elsif s_equal (valued), "Special Point") then 
T_CAT SPECIAL_POINT; 

elsif s_equal (valued), "Man in Water") then 
T_CAT MAN_INJWATER; 

end if; 

end cat__£ilt_cat_type; 


212 





procttdure cat_filt_operator (Info : In tae_wpt.ev«nt__context_ptr) la 
value : array (1..1) of string (1..tae_taeconf.STRIN6SIZE); 
count : taelnt; 

begin 

tae_vm.Vln_Extract_Count (info.parm_ptr, count); 
if count <■• 0 then 
null; 

else 

tae_vm.Vn_Extract_SVAL (info.pannj>tr, 1 , valued)); 
end if; 

if 8_equal (valued), "Equal*) then 
EQ EQUAL; 

INTEGRATION^SYSTEM.MAKE_TRACK_CATEGORy_ATOMlC_FILTER 

(TJ»T, EQ); 

tae_wpt. iipt_HewPanel 

("", fllt_8el_info.target, fllt_8el^lnfo.vle«», 
XjNindows.MullJHindow, filt_8el_lnfo, taejwpt.NPT.DBFAULT, 
fllt_8el_lnfo.panel_ld); 
tae_wpt.Npt_PanelEra8e(info.panel_id); 
elsif sjequal (valued), "Mot Equal*) then 
EQ NOT_EQUAL; 

INTE6RATI(XI_S YSTEM. MAICE_TRAC:K_CATEG0RY_AT0HIC_FILTER 

(T_CAT, EQ); 

tae_wpt.NptJNewPanel 

("", fllt_8el_info.target, filt_8el_info.view, 

XJNindows.Nulljfindow, filt_8el_lnfo, tae_«pt.NPT_DEFAULT, 
filt__8el_info.panel_id); 
tae__Mpt .Npt^PanelErase (info.panel^id); 
end if; 

end cat_filt__operator; 


213 




procedure ld_£llt_id_type (info : in tae^wpt.event_context jptr) ia 
value : array (1..1) of string (1..tae_taeconf.STRIMGSIZE); 
count : taeint; 

begin 

tae_vm.Vn_Extract_Count <info.pann__ptr, count); 
if count <■• 0 then 
null; 

else 

tae__vm.V)n__Extract_SVAL (info.pam_j>tr, 1, valued)); 
end if; 

if s_equal (valued), "Unknotm") then 
PIO TRACaC.PKG.UMKNONN; 
elslf s_equal (value(1), '‘Friendly*') then 
PZD FRIENDLY; 

elsif s_equal (valued), 'Hostile*') then 
PZD HOSTILE; 

elsif s_equal (value(1), 'Neutral') then 
PZD NEUTRAL; 
end if; 

end ld_£llt_ld__type; 

procedure id_fllt_cancel (info : in taejifpt.event_context_ptr) is 
value : array d..l) of string (1..tae_taeconf.STRIN6SIZE); 
count : taeint; 

begin 

tae_vm.VjnjBxtract_Count (Info.pamjptr, count); 
if count <■> 0 then 
null; 


214 







elsa 

ta«_vm.VBi_Extract_SVAL (info.panii_j>tr, 1, valued)); 
end If; 

t ae_ifpt. lfpt_MewPanel 

(*’*# filt_sel_lnfo.target, £ilt_8el_lnfo.vlew, 
XJMindows. Hulljlindow, £ilt_8el_in£o, taejept. IIPT_DEFAOLT, 
£ilt_8el_ln£o.panel_id); 
taejwpt .1fptJPanelEra8e (Info.panel^ld); 
end ld_£llt_cancel; 

procedure ld_£llt_C^rator (info : in tae_wpt.event_eontext_ptr) ie 
value : array (1..1) of atrlng (1..tae_taecon£.STRIM6SIZB); 
count : taelnt; 

begin 

tae_yn.Vm_Extraet_Count (info.parajptr, count); 
if count <■■ 0 then 
null; 

elae 

tae_vm.Vta_Extract_SVAL (ln£o.parBi_ptr, 1, valued)); 
end If; 

if 8_equal (valued), "Equal*') then 
EQ EQUAL; 

IIITE6RATXON_SYSTEM.MAKEJPLATF(»M_IDS1ITITY_ATOMZC_FILTBR 

(PID, EQ); 

t aejNpt. lfpt_llewPanel 

(*", fllt_8el_lnfo.target, filt__8el_lnfo.view, 
XJNlndowa.NullJNlndotf, filt__8el__info, taejifpt.1IPT_DXPAnLT, 
filt_8el_info.panel_id); 
taejwpt .Npt^PanelEraae (Inf o.panel_id); 
elaif 8_equal (valued), "Mot Equal*) then 


215 





EQ NOT_EQUAL; 

INTEGRATION_SYSTEM.MMCE_PlATFORM_IDENTITy_ATOMIC_FILTER 

(FID, EQ); 

ta«_Mpt.Npt_M«wPan«l 

filt_8ttl_lnfo.target, £ilt_8«l__in£o.vl*w, 

XJWlndotfs. Nulljlindow, £ilt_8el_in£o, taejupt. l»PT_DEFAOLT, 
£ilt_88l_in£o.panel_ld); 
taejwpt. l^_PanelEra8e (in£o. pan8l_ld); 

•nd 1£; 

•nd ld_,fllt_0p8rator; 

procadura Int^eaptjaathod (ln£o : in taa_wpt.avant_contaxt_ptr) ia 
valua : array (1..1) o£ atring (1..taa_taacon£.STRINGSIZE); 
count : taalnt; 

bagin 

taa_vm.Vii_ExtractjCount (ln£o.pam_ptrr count); 

1£ count <• 0 than 
null; 

alsa 

taa_vm.Vln_Bstract_SVAL (ln£o.pam_ptr, 1, valua (1)); 

i£ 8_aqual (valua(1), "Tisw to Station*) than 
11ITBRCEPT_BY_SPEED FAJ^E; 

I1ITBRCBPT_BY_TIIIE TRUE; 

al8i£ 8_aqual (valua(1), 'Spaad to Station*) than 
IllTERaEPT_BY_TIlfB FALSE; 

XlfTSRCBPT_BY_SFBED TROE; 

and if; 
and if; 

and int_oapt_a»thod; 


IH 







procedure lnt_cept_tliae (info : in taejwpt.event^contextjptr) is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

tae_vn.VlB_ExtractjCount (info.pam_ptr, count); 
if count <<" 0 then 
null; 

else 

tae_vm.VBi_Bxtract_ZVAL (info.parmjptr, 1, value(l)); 
STAT1CM(_TIME :• HATURAL (VALUE (1) ) ; 
end if; 

end int_cept_tiaie; 

procedure int_cept_8peed (info : in taejwpt.event^contextjptr) is 
value : array (1..1) of taeint; 
count : taeint; 

begin 

taejvm.VSiJBxtractjCount (info.parmjptrr count); 
if count <<" 0 then 
null; 

else 

tae__va.VSi_Bstract_IVAL (lnfo.parBi_ptrr 1, valued)); 
STATXON_SPBBD FLOAT(VALUE(1)); 
end if; 

end int_cept_speed; 

procedure Intjceptjcoa^pute (info : in taejwpt.a(v«ntjeontezt_ptr) is 
value : array (1..1) of string (1..taejtaeeonf.STEZMQSZSB); 


217 





count : taoint 


Z1ITERCEPT_REC0R0 : ZllTERCBPT_TyPB; 

ZNTERCBPT_SPBED : SPEED; 

ZNTERCEPT_TZME : ABSOLUTE_TZME; 

ZNTERCEPTJCOURSE : ZMTE(SR; 

ZMTERCEPTjnBL : ZHTEOER; 

ZNTERCEPT_HOURS : KETURAL; 

ZMTERCEPTJMZMS : KETDREL; 

bogln 

ta«_vB.Vto_ExtractjCount (info.pazm_ptr, count); 
if count <* 0 than 
null; 

alaa 

taa_««.Vta_Bxtract_SVAL (info.paxa_ptr, 1, valua(l)); 
and if; 

ZMTBRCEPT^SPESD :• MEKE_8PEED <8TATZ0II.8PEBD); 

Z1ITERCBPT_TZNE :• MOW + RELETZVE^TZMB(PLOET(8TEriOW_TIMB * 60}); 
If INTERCEPT_BY_8PEED than 

ZMTERCBPT_RBCORD INTERCEPT(ZMTBRCBPT_TRECKr ONNSHIP, 

RSLETZVE_P0S1TZQN 

(MEiaBjCERTE8ZAN_yBCTOR_2 (0.0, 0.0)), 
ZMTERCEPT_8PEED); 

alaa 

INTERCEPT JUtCORD :• INTERCEPT 

<ZMTSRCEPT_TRECX, 0NN8BIP, RBLETIVE_PO8ZTZ0N 
(IIEiai_CERTE8ZAN_VBCTOR_2 (0.0, 0.0)), 
1 N T ERCEP T _ TZME); 

md if; 

ZHTERCEPT ft 8PtlD PAUE; 


21S 









IIITBRCEPT_By_TIMB TRUE; 

ZNTBRCEPT_COURSE INTEGER(RADIANS_T0_DE6REES(COURSE 

{INTERCEPT_RECORD.lNTBRCEPT_CRS_JaiD__SPD))) ; 
XNTERCEPT_VEI. INTEGER(SPEED_1N_KN0TS(SPD 

(INTERCEPT^RECORD.INTERCBPT_CRS_AND_SPD))); 
INTERCEPT_HOURS HOURS(TIME_Or_DAY 

(INTBRCEPT__RBCORD.TIME_TO_INTBRCEPT)) ; 
INTERCEPT_MINS MINUTES (TIMEJ>P_DAY 

(INTERCEPT_RBCORD.TIME_TO_INTBRCEPT)); 
1IRITE_ZMTERCEPT_RECOMlENDATION 

(NATURAL'IMAGE(INTBRCEPT_TRACaC_NO), 
INTEGER'IMACT(INTBRCEPT_COURSE), 
INTEGER'IMAGE(IMTERCEPT_VEL), 
NATURAL'IMAGE(INTERCEPT^HOURS), 
NATURAL'IMACT(INTERCEPT_MIMS)); 

t««_«fpt.Npt_N«wPan«l {**, iiMnu_info.targ«t, menu^info.viaw, 
XjNlndows.NullJNlndotf, nenu__in£Or taajifpt.ltPT^DBFAULT, 
■aau_in£o.panal_id); 
taajMpt.Npt^PanalErasa(ln£o.pan 0 l_id); 
and lnt_capt_coa[puta; 

procadura lnt_capt_cancal (Info : in taajwpt.avantjeontaxt_ptr) la 
▼alua : array (1..1) of string (1..taa_taaconf.STRIMGSIZE); 
count : taaint; 

bagin 

taa_vBi.vai_Bxtraet_Count (info.pam_j>tr, count); 
if count <* 0 than 
null; 

alsa 


219 





tae_viii.Vm_Bxtract_SVAL (Info.pann^trr If valued)); 
end if; 

taejMpt.Npt_NewPanel ('‘"f menu_info.target, aienu__lnfo.vieir, 
XJHindowa.NullJNlndou, nenu_in£o, taejHpt.WPT_pEFAULT, 
inenu_in£o.panel_ld); 
tae__wpt .Npt^PanelEraae (Info.panel^ld); 
end int_cept_cancel; 
end iDenu_support; 

begin 

£_£orce_lower (FALSE); — permit upper/lowercase file nainee 

taejept.llpt__Init (*•,theDisplay); 
taejwpt.Wpt^NewEvent (wptEvent); 

initialisePanels (^ownu.res*); — single call 

Open^TacplotJDisplay; 

0pen_Trac)c_InfoJDl8play; 

Open_AlertsJDlsplay; 

Open_RecomnendationsJDisplay; 

Open_Intel_Display; 

Open_Syst«a_Status_Dlsplay; 


aMN_OBS.OBSERVATXON_TZME NOW; 

OWN JOBS. POSITlCm :» HAXEJSLOBALJPOSITZON 

(N, 15f 44f Of Ef 65f 23, 0) ; 

0WN_CRS DE6REES_T0_RADZANS (90.0); 

ONN_SPD MAKE^SPEED (20.0); 

ONN_(»S.COORSE_AND_SPEXD MAXEJVELOCZTY ( 0WN_8PD, ONNjCRS ); 
INTEGRATION SYSTEM. CRBATE_TRACK ( OmijmS, SOBFttCE PLATFCBVf ); 


220 





ONN_OBS.OBSERVATION_TZME NON; 

ONN_OBS.POSITION MAKE_GLOBAI._POSITION 

(M, 

ONN_CRS :« DE(^ES_TO_RADIANS (45.0); 
ONN_SPO MAKE_SPEEO (600.0); 
ONN_OBS.COURSE_AND__SPEED MAKE_VELOCITT 
INTE6RATI0N_SYSTEM.CREATE_TRACK ( ONN_OBS, 

ONNjOBS.OBSERVATION jriME NON; 

ONN_OBS.POSITION MAKE_G1.0BAL_POSITION 

(N, 

CmtjCRS DEGREES_TO_RADIANS (235.0); 

ONN_SPD MAKE_SPEED (20.0); 
ONN_OBS.COURSE_AND_SPEED MAKEjnSLOCITY 
INTEGRAT10N_SYSTEM.CREATE__TRACK ( ONN__OBS, 

ONN_OBS.OBSBRVATION_TIMB :« NON; 

ONN_OBS.POSITION MAKE_GIiOBAL_POSITIC»( 

(N, 

cmjams degrees_to_radians (170.0); 

ONN_SPD MAKE_SPEED (20.0); 
ONN_OBS.COURSE_AND_SPEED MAKE_VELOCITY 
INTEGRATI(»I_SYSTEM.CRBATE_TRACK ( ONN_OBS, 

INTBGRATION_SYSTBM. FIU._TACPLOT; 

DISPLAY TACPLOT; 


15, 46, 0, E, 65, 20, 0) 

( ONN_SPD, ONN_CRS ); 
AIR PLATFORM ); 


15, 40, 0, E, 65, 26, 0) 

( ONN_SPO, omtJCRS ); 
SURFACE PLATFORM ); 


15, 35, 0, E, 65, 17, 0) 

( ONN_SPD, ONN_CRS ); 
SURFACE PLATFORM ); 


221 




loop 

if X_Pending (Tacplot_Dlsplay) > 0 then 
X_Lib.Events.x_Next_Event 

(TacplotJDisplay, Tacplot_X_Event); 
case Tacplot_X__Event. Kind is 
when Expose ■> 

if (Tacplot_X_Event.Expose_Notify.Co\int - 0) then 
mTEGRhT10N_SYSTEM.FILLJPACPLOT; 

DISP1AY__TACPL0T; 
end if; 

when Button_Press ~> 

Process_Hoolc_Position (Tacplot_X_Event.Button.X, 

Tacplot_X_Event.Button.Y); 
INTBGRATION_SYSTEM. FXI.L_TACPLOT; 

D1SPLAY_TACPL0T; 
when others •> null; 
end case; 
end if; 

if X_Pending (Track__lnfo_Display) > 0 then 
X__l>ib. Events. X_Next_Event 

(Txack_Xnfo_Display, Track_Info_X_Event); 
case Track_Info_X_Event.Rind is 
when others •> null; 
end case; 
end if; 

if X_Pending (Alerts^Display) > 0 then 

X__Lib.Events.X_llext_Event (Alerts_Display, Alerts_X_Event); 
case Alerts_X_Event.Kind is 
when others •> null; 


222 










end case; 
end if; 

if X^Pending (Reconntendations^Display) > 0 then 
X_Lib.Events.X_Next_Event (Reconimendations_Display, 

RecoiRnendations_X_Event); 
case Recoininendations_X_Event. Kind is 
when button_press -> X_Clear_Window 

(Reconmendations^Display, RecomoendationsJMindow); 

when others -> null; 
end case; 
end if; 

if X_Pending (Intel^Display) > 0 then 

X__I.ib.Events.X_Next_Event {lntel_Display, Intel_X_Event); 
case lntel_X_Event.Kind is 
when others *> null; 
end case; 
end if; 


if X_Pendin 9 (System^StatusJDisplay) > 0 then 
X_Lib.Events.X_Next_Event (System_Status_Display, 
Systein_Status_X_Event); 

case SysteiD__Status_X_Event.Kind is 

when button_press -> Test_Systen)_Status; 
when expose *> Test_Syste]n_Status; 
when others •■> null; 
end case; 
end if; 


223 


if TAE_WPT.WPT_PENDING - TRUE then 

tae_»fpt.*«nt_NextEvent (tiptEvent, etype); 

case etype is 

when wpt_eventtype'first .. -1 »> null; 

— iterate loop on Wpt_NextEvent error 

when tae_wpt. WPT_PARM__EVEOT -> 

tae_wpt.Npt_ExtractjContext (wptEvent, user_ptr); 
tae_wpt .Hpt_Extract_Parm (wptEvent, user_ptr.pann_naiiie); 
tae_wpt.l^t_Extract_^Data (wptBvent, user_ptr.datavm_ptr); 
tae_vm.Vm_Find (user_ptr.<latavm_ptr, user_j>tr.parm_nane, 

uaer_ptr.pann_ptr); 


MENU PANEL EVENTS 


if tae_wpt.(user_ptr, nenu^info) then 
if s_equal ("trackjbutton", user_ptr.parm_naine) then 
inenu_track_button (user_j>tr); 
elsif s_equal 

(''plots_nenu''r user_j>tr.parm_naine) then 
inenu_plots_inenu (user_ptr); 
elsif s_equal 

("alerts_button"/ user^tr.parm__nane) then 
aienu_alertsJbutton (user_ptr); 
elsif s_equal 

("filters_button", user^tr.pam_naine) then 
menu_filtersJbutton (u8er_ptr) ; 
elsif s_equal 


224 











("defaultsjbutton*, u8erjptr.parm_n<une) then 
inenu_de£aults_button (user_ptr); 
elsif 8_equal 

('*intel_button'', u8erjptr.pazxn_naiiie) then 
menu_intel_button (ueerjptr); 
elsif s_equal 

("navjbutton", U8er_ptr.pazm_naiiie) then 
aienu_nav_button (U8er_ptr); 
elsif s_equal 

("listsjbutton*, u8er_ptr.panii_naine) then 
iBcnu_lists_button (user_ptr); 
elsif s_equal 

(''coding_button'', u8er_ptr.pann__name) then 
inenu_coding_button (user_ptr); 
end if; 


— SORRY PANEL EVENTS 


elsif tae_ept. (user_ptr, Sorty_info) then 

if s_equal ("OKJButton", user_ptr.paxiii_name) then 
Sorry^OK^Button (user^ptr); 
elsif sjequal {*OK_2", user_ptc.parm_name) then 
Sori:y_OK__2 (userjptr); 
end if; — END panel Sorry 

» TRACK SELECT PANEL EVENTS 


elsif taeji»pt. (user_ptr, trk._8el_in£o> then 

if 8_equal (''NoNaiQe01''r U8er_ptr.pam_nane) then 
trk_8el_NoNaiiie01 (user^ptr); 
elsif Sjequal 


225 



(*trk_8el_brg_rng'', user_ptr.parni_naiiie) then 
trk_sel_trlc_5el_brg_rng (u8er_ptr); 
elslf 8_equal 

(*trk_8el_8creen'', u8er_ptr.pann_naiiie) then 
trk_8el_trk_8el_8creen (u8er_ptr); 
elaif 8_equal 

(*trk_8el_cancel'', U8er_ptr.parm_naine) then 
trk_8el_trk_8el_cancel (U8er_ptr); 
elaif 8_equal 

(*trk_ael__lat_lon*', U8er_ptr.paxm_naiiie) then 
trk_ael_ttk_8el_lat_lon (u8er_ptr); 
end if; — END panel trk_8el 

- INPUT BEARING AND RANGE PANEL EVENTS 

elsif tae_wpt.(uaerjptr, 8el_brg__info) then 
if 8_equal 

("tgtjsearing", U8er_ptr.paxm_naiiie) then 
8el_brg__tgt_bearing (uaerjptr); 
elaif 8_equal 

<'*tgt_range'', u8er_ptr.patiB__naiiie) then 
sel_brg_tgt_range (U8er_ptr); 
elaif ajequal 

('"sel_brg_canx_l"', U8er_ptr.patm_naine) then 
8el_brg_8el_brg_canx_l (uaerjptr); 
elaif ajequal 

("EnterJData", uaerjptr.pam_name) then 
ael_brgjEnter_l>ata (U8er_ptr); 
elaif ajequal 

(•8eljbrg_canx", uaerjptr.parm_naaie) then 
8el_brg_8eljprg_canx (u8er_ptr); 


226 




end if; — END panel 8 el_br 9 

ENTER GLOBAL POSITION PANEL EVENTS 

elsif tae_wpt. (user_ptr, glob_j> 08 _lnfo) then 
if s_equal ('lat^min", u8er_ptr.pann_naiiie) then 
glob_j>os_lat__inin (u8er_ptr); 
el8lf a_equal 

("lat^eec*, u8er_ptr.paxia_naiiie) then 
glob_po8_lat_8ec (U8er_j>tr) ; 
elsif s_equal 

(*long_deg'', u8er_ptr.parm_naiiie) then 
glob_pos_long_deg (user_j>tr) ; 
elsif s_equal 

("longjnin", user_ptr.parm_naxBe) then 
glob_pos^long_ioin (userjptr); 
elsif sjequal 

("long^sec^r user^tr.pam_naiiie) then 
glob_j>os_long_8ec (user_ptr); 
elsif sjequal 

('*lat_deg‘'r userjptr.paxm_na]ne) then 
glob_pos_lat_deg (user_ptt); 
elsif sjegual 

("spacer", userjptr.parm_naaie) then 
glob__pos__spacer (u8er_ptr); 
elsif sjsqual 

("Spacer_l", userjptr.pann_naB») then 
glob_pos^Spacer__l (userjptr); 
elsif sjsqual 

("latjdir", userjptr.pam^nasM) then 
glob_po8__lat_dir (U8er_ptr); 


227 






elsif Bjequal 

(’•longjdit", user_ptr.paxm_naiiie) then 
glob_po8^1ong_dir (user^ptr); 

end If; — END panel glob_j>os 

MODIFY TRACK PARAMETERS PANEL EVENTS 

elalf taejiipt."-*' (user_ptr, trk_iiiod_info) then 
If sjequal 

("trk^identlty", uset_ptr.patm__naae) then 
trk._»od_trk_identity (user_ptr); 
elsif s_equal 

{*trk_^control'', user_ptr.par«a_naaie) then 
trk^mod_trk_control (userjptr); 
elsif s_equal 

(*trk_polnt_type'’» user^ptr.pam^naae) then 
trk_modjtrkjpolnt^type (user_ptr); 
elsif sjegual 

("trkjcategory'f userjptr.parmjnaaw) then 
trfc_nod_trk_category (user_ptr); 
elsif sjsqual 

(*trkjpo8ltion‘'r user_ptr.pasm_naaM) then 
trk_a»djtrk_po8itlon (user_ptr); 
elsif s^equal 

("trkjuBp^lnfo'r user_ptr.pam__naM) then 
trk_«odjtrk_a*ip_lnfo (user_ptr); 
elsif sjaqual 

('*trk_nam‘’t user^ptr.pamjnaae) then 
trk_mod_trk_name (u8er_ptr); 
elsif sjsqual 


228 


<*trk_cour8®'’, u8erjptr.paxm_naM) then 
trk_niod_trk_cour8e (U8er_ptr); 
el8lf 8_equal 

(*trk_8pee<l'', u8er_ptr.paxm__nane) then 
trk_iBo<ijtrk_8peed (u8er_ptr); 
elelf 8_equal 

<'*ttk_height'', userjptr.pamjname) then 
trk_ttod^trk_height (uaer^ptr); 
elslf a_eqaal 

("trk_inod_enter*, userjptr.pam^naaie) then 
trk_niod^trk_inod_enter (u8er_j>tr); 
elaif 8_equal 

('*trk_jjlat_clas8*', u8erjptr.pam_name) then 
trk_inod__trk_plat__cla88 (U8er_ptr); 
end if; — END panel trkjnod 

- CONFIRM DELETE PANEL EVENTS 

elaif tae^wpt. (uaer_ptr, conflrm^info) then 

if 8_equal 

("conf^continue", uaerjptr.parm^naiae) then 
confimjconfjcontinue (uaerjptr) ; 
elaif 8_equal 

(*conf_cancel'’, uaerjptr.paxin_naiiie) then 
confinn_conf jcancel (u8er_ptr); 
end if; — END panel confirm 

CONFIRM EXIT PANEL EVENTS 

elaif tae^ept.<u8 er_ptr, exit_ok_info) then 
if a^egual 


229 




('*exlt_continu«'', u8er_ptr.paxn_najBe) then 
abort Monltor_Update_Interval8; 
Zntegratlon__Sy8tem. Shutdown; 
lfrlte_Tracfc_Archlvea_To_Text_Flle; 
llrite_Filter_Archive8_To_Text_File; 
abort Integratlon_Sy8tem; 

Exit; 

~ exlt_gkjaxit_contlnue (user_ptr); 
elalf 8_equal 

(*‘exlt_cancel*r uaerjptr.pam^name) then 
exit_ok_exit_cancel (uaer_ptr); 
end if; 

INPUT ALERT PARAMETERS PANEL EVENTS 

elaif tae^ept."-" (uaerjptr, alrt_8el_ln£o) then 
If s_equal 

(*cpa_alrt_range*, user_ptr.pam_naae) then 
alrt_8el_epa_alrt_range (U8er_ptr); 
elslf s_equal 

(*alrt_canx__l*, ueerjtr. pana^naiaa ) then 
alrt_8el__alrt_canx_l (U8er_ptr); 
elslf sjequal 

('‘enterjdata*, user_ptr.paxB_naae) then 
alrt_8eljenter_data (user__ptr); 
elslf sjegual 

("alrt^canx^E*, user_ptr.pBsai_naaM) then 
alrt_sel_alrt_eaiix__2 (user^ptr); 
end If; 

BOOIPMENT SELECTION PANEL EVENTS 


230 






•Isif ta«_*rpt. (u8«r_ptr, aopt^sal^lnfo) • than 
if 8__equal 

u8er_ptr.p«xai_naiM) tlum 
•qpt_ 88 l_gp 8 _ 80 l (u88r_ptt); 

•l8i£ 8_j8qtt8l 

(*rad8r_88l''r U8«r_ptr.p8a_na8») than 
8qpt_8«l_r8d8r_88l (U88r_ptr); 

•l8if 8_8qu8l 

(*llnk_ 88 l*r U80rjptr.p8ai_aa8w) th«n 
8 qpt_ 88 l_link_ 88 l (U 88 r_ptr); 

•l8i£ 8j8qo8l 

(*gyro_8«l''» u8«r_ptr.p8XB_naB8> then 
•qpt_8«i_gyto_88l (u88r_ptr); 

•l8lf 8j8qu8l 

(*f8th_8«l*'» U8«rjptr.p8mjaaa») than 
•qpt_ 80 l_f 8 th_ 88 l <u 80 rjptr); 

•l8if 8_«qttal 

U8«r_j»tr.p8tai_nww) tlm 
•qpt_8«l^it_8«l (U8«r_ptr); 

•l8lf 8_8qaal 

('•Btvrjdata'r U8«rjtr.paxmjni—) than 
•qptjB«ljsnt«rjdata (U8«r_j>tr); 

•nd If; 


— TITLE PANEL EVENTS 

•laif taajwpt.*'** (u 8 «rjptr, tltl«_iii£o) then 
if 8 _«qaal 

(*«xit_ 8 y 8 t 8 a*r U80Cjptr .pam^iMM) than 
titl«j 8 xit_ 8 y 8 t«a (us«r 


231 






end if; — END pansl title 

FILTER SELECT EVENTS 


eleif teejwpt.(tt8 er_ptr, filt_8el_info) then 
if 8_equ8l 

('*C8nx_filter‘*, u8er_ptr.paxai_name) then 
filt_8eI_C8nn_filter (U8er_ptr); 
eleif ejeqoel 

(*type_8elect*, U8er_ptr.paxajiaae) then 
filt_8el_type__8elect (ueer^ptr); 
eleif 8_equel 

('filterjcooplete”, u8er_^r.petB_iuu8e) then 
filt_8el_filter_cae[plete (ueer^ptr); 
eleif 8_eqael 

(''edd_filter', ueerjptr.pamjnaaw) then 
filt_eel^edd[_filter (ueerjptr); 
end if; » END panel filt^eel 


<— RANQE FILTER EVENTS 

eleif taejupt.*"** (ueerjptr, xiig_filt_info) then 
if ejequal 

<*rng_type*, ueer^ptr.panMoaaM) then 
rng_filt__rng__type (ueer_ptr); 
eleif ejequal 

('*rng_liait'r ueer_ptr.patajaaaM) then 
xng_filt_xng__liait (ueer,ptr); 
eleif 8_eqaal 

(*bgt_liad.t*, ueer_ptr.paxmjnaM) then 
xng_filt_b 9 t_llait (ueer_ptr); 


m 

















•lalf s^jaqual 

("op^Mtor", tt8«r_ptr.parm_naiiia) then 
tng_£llt_op«r«tor (U8«r_ptr ); 

•laif 8 _«qual 

(‘conpleta”, U88r_ptr.pam_n8ne) then 
rn9_filt_coaplete (U8er_ptr); 
el8lf 8_equ8l 

{•cancel-, u8er_i>tr.pam_naaM) then 
*ng_£llt_cancel (userjptr); 
end 1£; — END panel tng_£lit 

— CATEGORY FILTER EVENTS 

elalf tae_wpt.--- (u8er_j>tr, cat_£llt_in£o) then 
if ajequal 

(•cancel-, userjptr.pam^naae) then 
c«t_£ilt^cancel (userjptr); 
elalf 8_^equal 

U8er_j>tr.paxa_^naiiie) then 
cat__£ilt_,cat_type (U8er_ptr); 
elalf a^equal 

(•operator-, U8er_ptr.parm_^naaie) then 
cat_fllt_,operator (U8er_ptr); 
end If; — END panel cat_£llt 

- IDENTITY FILTER EVENTS 

elalf tae_wpt.--- (u8er_ptr, ld_fllt_ln£o) then 
If a^equal 

(•ld_type-, U8er_ptr.parmjaaaM) then 
id_fllt_ld_type (uaer^ptr); 


233 


elslf s_equal 

("cancel”, user_ptr.pam_naiiie) then 
id_£ilt_cancel (user_ptr); 
elslf 8_equal 

("Operator”, U8er_ptr.panii_naiiie) then 
id_£ilt_Operator (userjptr); 
end if; — END panel id_fllt 


INTERCEPT EVENTS 


elslf taejMpt.”*” (u8er_ptr, lnt_cept__lnfo) then 
If s_equal 

("method”, userjptr.parm_naiiie) then 
lnt_cept_inethod (u8er__ptr); 
elslf s_equal 

("time”, userjptr.parmjnaaie) then 
lnt_eept^tiffle (userjptr); 
elslf s_equal 

("speed”, U8er_ptr.parm_name) then 
lnt_cept__8peed (user_ptr); 
elslf 8_equal 

("coopute”, user^ptr.parajname) then 
Int^cept^coopute (user_^tr); 
elslf 8_equal 

("cancel”, userjptr.permjname) then 
lnt_cept_cancel (u8er_ptr); 
end if; — END panel int__cept 

else 

null; 

— or raise an exception, but coapller warns if no exit 
end If; 


234 





— TAE FILE EVENTS STUB 

when tae_wpt.WPT_FILE_EVENT •> 

text_io.put_line ("STUB: Event 1IPT_FILE_BVENT''); 

— TAE TIMEOUT EVENT STUB 

when tae_wpt.llPT_TIMEOUT^EVENT -> 

text_io.put_line ("STUB; Event NPT_TIMEOUT_EVBNT*) 
" MISC TAE EVENTS 

when tae_wpt.NPT_NIMDOW_BVENT -> null ; 
when tae_wpt.NPT_HELPjEVENT -> null ; 
when tae_wpt.llPT_lNTEBRUPT_EVENT «> null ; 
when OTHERS -> null; 
end case; 
end if; 
end loop; 
end menu; 


235 





APPENDIX G 


LCCDS USERS MANUAL 

A. STARTING THE SYSTEM 

To invoke the system from the command line simply type lccds.out at any 
command prompt. XI1R4 and a window manager (such as Open Lode or TWM) must be 
running prior to calling LCCDS. 

The program will start by opening all the display windows, the Menu bar and die 
System Information box. The display windows can then be moved to any location desired 
by the user by "dragging" the display box with die naouse. The Menu bar and die System 
Information box are static and cannot be moved. 

The prototype model pre-loads a^ ownship track and 3 target test tracks for 
demonstradon purposes. These test tracks can be modified or deleted as die user desires. 
The ownship track may be modified, but cannot be deleted. 

B. OPERATING THE SYSTEM 

1. Ihctkal PloC Display Funedoos 

The Tactical Plot di^lay window, shown in Hgure G-1, contains a number of 
mfixmation items, and a graidiical representation oi all tracks cunendy in die system. 







Each track in the system will be displayed as a standard GOTS symbol with a "speed 
leader", or line, emanating from the center of the symbol denoting true course and speed. 
The system track number will be shown in a box direcdy below the symbol. 

Most user interaction with the system will occur in this window. Tliere are 2 

interactive functions built into this window: 

^ Track Selection 
* Display Range Scaling 

a. Track SeiectioH 

To select an existing track, move the mouse cursor over the gn^hical 
object and press any mouse button. The display will immediately update and a "hocdc", or 
circle, will appear surrounding the object All infoimatitm currently available in the 
system cmiceming the hooked object will appear in the Track Lrfonnaticm and 
Intelligence displays, shown in Figures G-2 and G-S respectively. 
t. Range Seating 

The upper left comer of the Tactical Plot display contains a button pair 
labelled "DOWN" and "UP". Moving the mouse cursor to dther of these buttons, and 
{Messing any noouse button will immediately update the Tactical Plot display and eittor 
halve or double die range representation of the screen, depending on the button selected. 
The Scale information item above the butttxis will reflect the current range scale of die 
display screen. 


237 





2. Aftaiu Bar Functions 


In the current configuration there are S menu pulldown Inittons widi active 

functions: 

* Tracks Buttcm 

* Alerts Butttm ^ 

* Defaults Butum 

* Hlters Button 

* Nav ButUMi 

Sdection of an inactive mrau functicni will result in die diq)lay of a dialog box 
message in die u^ier right cmna of the display, infcnning die user that die item selected 
was included for future development 
a. Tnek Functions 

The options available in this pulldown option include adding a Trade, 
deleting a hooked Track and modifying a hooked Track. Selection of die latter 2 options 
widxnit a track actively hodoed will result in no action. 

Selection of the Add a Trade qitiem results in a dialog bene, shown in 
Hgure G-4, opening asking die user for die add mediod desired. The mediods available 
are add by bearing and range or add by global position. Additional dialog boxes, tiiown 
in Hgures G-S and G>6 will appear to accqn die user iiqnit for those mediods. 

Selection of the Delete die Hooked Trade option will, if a trade is 
emrendy hooked, display a dialog box asking die user to confirm the ddetion. If the 
"Continue'* box is selected, die *Dade wiU be deleted on the next screen update. The 
"Canod" option wiU dismiss die dialog box widi no action takwi. 


236 






Selection of the Modify the Hooked lYack qjdtm will result in die dialog 
box, shown in Figure G-7, opening to allow the user to input die attribute changes 
desired. Any changes made will take effect immediately and will be displayed on the 
next screen update. The "Enter Data" button will dismiss the dialog box and return the 
user to the normal display. 

b. Alerts Functions 

The 3 pulldown cpdtxis. Visual Alois Only, Audio and Visual Alois and 
Disable all Alerts will take the i^ipropriate action immediately upon selection. The Alerts 
informatitMi item in the uppo right como of die Tactical Plot will reflect die current 
status of alerts. The default omfiguration is bodi audio and visual alerts enabled, widi 
any alert conditicms detected by the system shown in die Alerts display box in Hgure 
0-8, acconqianied by a "beep" at every alert detecticm. 




239 






Figure (i-l. Tactical Plot Display Window 









£j Intelligence 

Contaot Relative Bearing: 82 Desrees 
Contaot Relative Spe e d 28 Knots 

Traok Naee: Tokyo Haru 

Traok Class: Japanese Car Carrier 

Traok Info: Lots of Toyotas 


Target Angle: 3S2 D eg r ees 


Figure G*2. Intelligence Display Window 


£j Track Information 

rariot Bow'iiif! 156 T Contaot: 2 Targot Co 

rargot Rwgpot 5623 Vardo Targot Sf 

Targot CM: 162 / 5560 at 20 8 
Targot Position: 15 35 408/ 65 25 31 E 


: 20 Kta 


Targot 10: IRMOUN 
Last IMato: 20 6 


20 6 Control Tigm: LOCM. 


Figure'G-3. IVack Infomnition Display Window 



Figure G«4. Add a IVack Dialog Box 















Enter Tw Tiyt Bwrlng md Ranga in Vante 

Owcil| 

TaiyM Be w twg: |p | Targst Hangs: ^ 


Figure G-5. Enter Bearing and Range Data Entry Box 






Figure G<6. Enter Global Position Data Entry Box 



amfSHytagMa ||jata ef Toystas 


»aa< I Oww Hal»t I j| BHw>Drt« 

Figure G*7. Modify IVadt Parameters Data Entry Box 


242 



























c. FWtn Ptmethiu 


Selectioii of eidwr optioa widun this puUdown will nmnediatBly discard 
any diqilay filter conditions set by the user. 
dL DtfantaFumetiom 

(1) Set Di^layHliers. Selection of the Set Diq>layHlters tuition widiin 
this fNilUown will piesent the user widi the dialog box shown in Hgme G-8. 

The set filter operas is a lecurrive routine allowing the user to 
define multiide atomic filters within a single coo^KMite filter object An atomic filter is 
defined on the attributes of range, height category or identity. A aeries of data input 
boxes, shown in Hgures G*9 dirough G-11 allow the user to define a single atomic filler, 
always returning the user to the dialog box at die conqiletion of eadi data entry item. 

Setection of die Add Hirer Ekmrat button in the dialog hox will 
add the atomic filter to the conqiosite filter object and reset the atomic entry routiiie, 
allowing the user to define another atomic filter. 

Selection die Atomic Hlter Conqdeted button will cloae the filler, 
and return the user to die main display. Any fur t h er filter additions can be made by 
reinitializing the process. 

All system filters can be cleared immediately by sdection of either 
option widiin die Hlten menu pulldown. 

C2) Set Alert P a r am e t e n . Selection of die Set Akrt rteame i eri pulldown 
item will present the user with die data emry box riiown in Hgure 0-12. Input of a valne 


243 






into die entry box and die sekcdon of Enter Data will immediately qiply the new CPA 
alert value into the system. Any Track with a CPA niife less than the alen range will 
generate an Alert in die Alerts di^^y window shown in Hgme &13, provided die 
Alerts are not disaMed by an Alerts menu button action. 

(3) Set External System Inputs. Sdecdon of dus option will piesent the 
user widi die checkbox option window diown in Hgme G-14. Selection of an item will 
place an X imo the chedcbox. signifying die acdvadon of that piece of eq uip me n t’s inputs 
into the system. Gonvenely. the deselecting (rf a checked box will remove the X and 
signify the deactivatian duu equqimenf s inputs into die system. 

The Enter Data button will dismiss the window and make the 
necessary system modifications. The System Status disph^ window, diown in Hgme 
G-IS, will reflect any changes nuKle to the system inputs on die next display tqxlate. 


244 









Figure G-8. Build an Atomic Filler Dialog Box 






llmiiiMl 




Flture BUM a DMancc FBtcr 




245 



















Figure (MO. Build a Track Category Filter 



Figure G>ll. Build a Platform ID Filter 










Select Alert Parameters 


CPA Alert Range IsOOO 


Cancel 


Enter Data 


Figure 0-12. Select Alert Parameters 


Figure G-13. Alerts Display Window 


« 


1 


247 















248 























e. Nav Functions 

The only active function within this menu pulldown is Plot an bteicept 
A Thick must be hooked prim* to activating this fiinctitxi or no actitm will occur. 
Selection of this option will present the user with a data entry box, shown in Hgure 

i 

G-16, allowing the user to compute an Intercq>t to the hodced track by 2 different 
medKxls. 

(1) Hme to Station Mediod. This, the default mediod, will coDq>utB an 
intercept to the hooked track based cm time. Entering of the number of minutes to 
intercept by the user, and die selection of the Compute button, will return the course and 
speed necessary to effea the intercept in the desired interval. All intmcept 
recommendations will appear in the Recommendadmis diqilay window shown in Hgure 
G-17. 

(2) Speed to Station hfethod. This method will take a projected speed 
input firom the user and return the course necessary for die intercqtt and die esdmaied 
time the intercept will take place. 

The Compute button will initiate all computations. The Cancel button 
will return the user to the default display. Any active rec ommen da t ion widun the 
Reconunendations Display \^^ndow can be dismissed by moving die cursor to die 
window and clicking any mouse button. 

« 


249 







compute an Intercept 


Umo to Station 
Speed to Station 


Kinutes to Intercept js I 

Intercept Speed Knots 


Compute Intercept) 


Figure C-16. Compute an Intercept 


Intercept to Torget 
-- 

Intercept Course: ; 
Intercept Speed : 
Intercept Tine : i 


205 

34 

20 25 


Figure (f-lT. Recommendations Display Window 


C. EXITING THE SYSTEM 

An Exit System button is provided on the System Information window shown in 
Figure 0-18. Selection of the button will present the user with the confirmation dialog 
box shown in Figure G-19. Selection of the Continue option within the dialog box will 
shut the system down and write all Track Histories, Filter Histories and Observations to 
text files within the current sub-directory. Selection of the Cancel option will result in 
dismissal of the dialog box and no system action taking place. 


250 













Law ca«t CBrobat Diwctlon System 

Tactical Information System 


Vmian 1J9 ^ 16 aiptamlMr 1991 



Figure C-18. System Information Window 


■ 

Exit Gonfinmation Required 

■ 

Continue 

Cancel 


Figure G*]9. Exit Confirmation Dialog Box 













LIST OF REFERENCES 


[ADAXn 

[BI91] 

[CK90] 

(GOTS91] 

[SOW88] 

[SS90] 

[SUN90] 


Unisys Defense Systems Lk.. Resun, VA; 

Venfeff Deseripdtm Docwnentfm tike Softwan 
TeehmoU^fw Adaptable, ReUaUe Systems 
(STARS); AdsJXt Toolkit. Version 3.1. Sun OS. 
STARS'SC-03716AX)1/00. 

Publication No. GR-7670-1239(NP). May 1991. 

Bolick. W. & bwin. R; The Taetieal Database for Ae 
Low Coa Combat Direetion System; 

Masters Thesis. Naval Postgraduate School. 

Monterey, CA, September 1991. 

Coskun. V. & Kesoglu. C; A Software ProtatePt 
for a Command, Control, Commadeations and 
Intettigenee (C3I) Workstation; 

Masters Thesis. Naval Postgraduate School. 

Monterey. CA. December 1990. 

Commander. Space and Naval Warfere Systems Command; 
GOTS Version 1.0JS Technical Manual, (series); 

Januaiy 1991. 

Commander. Naval Sea Systems Command; 
UNCLASSIFIED letter 9410. OPR:61 Y. Serial 61Y1036 
to Superintendent. Naval Postgraduate School. Monterey. 
CA. Subject* Statement of Work for Low Cost 
Combat LHrection System, 20 December 1988. 

Seveney. J. & Stdnbeig. G.; Requirements Analysis 
for a Low Cost Combat Direction System; 

Masters Thesis, Naval Postgraduate School. 

Mtmterey, CA, June 1990. 

Sun, C; Developing Pmtable User Intmfsees fur 
Ada ConunandCotitrMSoft¥rare;lAsataxs’Vbatis, 

Naval Postgraduate School, Monter^, CA. June 1990. 


252 








[TAE] 


[XUB] 






National Aenmautics and Space Adnunistradoi, 
Goddard Space Flight Cento; 

Tmn^fwkMe AfpOcaHons EnHnmmmU 
(TAE) Pbu Teeknieai Manualt (uria); 

Januaiy 1990. 

Unisys Defense Systnns Inc.. Reston* VA; 
VenionDeser^itioHDocumeiiifmrAe Software 
Teekmotogf/orAdt^taUet ReBaUe Systems 
(STARS); Ada/Xlib Bindings, ^^srsion 1.0. Sun 05. 
STARS-SS-022007A)01/00. 

Publication No. GR-7670-1181(NP). Januaiy 1991. 





INITIAL DISTRIBimON LIST 


Defense Technical Infonnadon Center 
Cameron StatKMi 
Alexandria, VA 22304 

Dudtey Knox Ubraiy 2 

Code 1424 

Naval Postgraduate School 
Monterey, CA 93943 

Director of Research Administration 1 

Code 012 

Naval Postgraduate School 
Monterey, CA 93943 

Office (rf Naval Research 1 

800 N. Quincy Street 
Arlington, VA 22217 

Office of die Chwf of Naval Operations 1 

CbdeQP-941 

Washington, DC 20350 

Commander 1 

Naval Sea Systems Command 

ATTN: LCDR Scott KeUy 

Code06D3131 

Washington, DC 20362 

Assistant Secretary of the Navy 1 

Reaeaidi, Develoipment and Acquiritions 
Washington, DC 20350 



fVum nM Mter 1 

Naval Ocean Systems Center 
Cbde451 

San Diego, CA 92152 


254 






Commander 

Naval Ocean Systems Center 
Code 431 

ATTN: Dan Edwards 
San Diego. CA 92152 

Commander 

Naval Sea Systems Command 
ATTN: William L. Wilder 
PMS-4123H 
Arlington. VA 22202 

Dr. Valdis Bendns 
GodeS2Be 

Cooqniter Science Department 
Naval Postgraduate School 
Monterey. CA 93943 

Dr. Luqi 
Code52Lq 

Conqniter Sdenoe Department 
Naval Postgraduate School 
Monterey. CA 93943 

LT Michael G. Stockwell 
121 Rome Drive 
Vallejo. CA94S89 



