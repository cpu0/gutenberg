AD-A285 111 MTATION PAGE 


Form Approved 


OPM'No. 


aie<J 10 average i hour per fesponse, induding lo-g orr.e to.' 'eviewing instajct'ons. searcfting ©jusong data 
»/ing the collection of mlofmation. Send comments regadmg th s burden, to Washington Headquaners 
15 Jefferson Davis Highway. Suite i204. Arlington. VA 22202-4302. and to the Off»ce oi Information and 
n, OC 20503 


1. AGENCY USE (Leave 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND Compiler:VADS PowerPC SELF, Product #2100-01445, Version 
6.2 

Host/Target; IBM PS/6000 Model 250 (under AIX 3.2.5) 


5. FUNDING 


rn T i r 


6. AUTHORS; 

Wright-Patterson AFB, Dayton, OH 

19941 ^ 

7. PERFORMING ORGANIZATION NAME (S) AND 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. 
135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office, Defense Information System Agency 

CodeTXEA, 701 S. Courthouse Rd., Arlington, VA 

22204-2199 

10. SPONSORING/MONITORING 
AGENCY 


11. SUPPLEMENTARY 


12a. DISTRIBUTION/AVAILABILITY; Approved for public release; distribution 
unlimited 

12b. DRISTRIBUTION 

13. (Maximum 200 

1. 


Rational Software Corporation, 940630W1.11365 


14. SUBJECT; Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Oftice, Ada Val. Facility 


15. NUMBER OF 


ANSI/Mil-STD-1815A 


17 SECURITY 
CLASStncATlON 


18 SECURITY 


UNCLASSIFIED 


16. PRICE 


19. SECURITY 
CLASSinCATlON 

UNCLASSIFIED 


20, LIMITATION OF 


UNCLASSIFIED 


UNCLASSIFIED 




























Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 

Compiler Name and Version: VADS PowerPC SELF, 

Product Number: 2100-01443, Version 6.2 


Host Ccffl^wter System: 

Target Computer System; 
Customer Agreement Number: 


IBM RS/6000 Model 250 
under AJX 3.2.5 

Same as host 

94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 94063QW1.11365 
is awarded to Rational Software Corporation. This certificate expires two 
ysjars after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


Ada i^lidation Facili 
Dale E. Lange 
Technical Director 



645 CCSG/SCSL 
Wright-Patterson AFB OH 


45433-5707 



Ada VajEldiWon Or'^anization 

Director,'"vaB^te, and Software Eligineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



'^Joint P^ra 
J. reifer 
Director, ftOPO 
Defense Information Systems Agency, 
Center foe Information Management 


loooi.?lcu For 

J-.V . . 


n 

□ 


Dint 









AVF Control Number: AVF-VSR-593.0694 
Date VSR Completeo: July 21, 1994 

94-05-12-RAT 


Ada COMPILER 
VALIDATICW SUMMARY REPORT: 

Certificate Number: 940630W1.11365 
Rational Software Corporation 

VADS PowerPC SELF, Product Number: 2100-01443, Version 6.2 
IPM RS/6000 Model 250 under AIX 3.2.5 


(Final) 


Prepared By: 

Ada Validation Facility 

645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 




DUG QUAUTY IN^FElTflD 3 


9 28 085 

^94-31048 






Certificate Information 


The following Ada irnplementation was tested auad determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 

Compiler Name eind Version: VMS PowerPC SELF, 

Product Number; 2100-01443, Version 6.2 

Host ''cmputer System: IBM RS/6000 Model 250 

under AIX 3.2.5 

Target Computer System; Same as host 
Customer Agreement t'Jumber: 94'05-12-RAT 


See section .3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11365 
is awarded to Rational Software Corporation. This certificate expires tw-o 
years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed auid is approved. 


r\ n 



Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 



Donald J. Reifer 
Director, AJPO 

Defense Information Systems Agency, 
Center for Information Management 






ATTACHMENT 1 


DECLARATION CF CONFORMANCE 

Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5'707 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version; VADS PowerPC SELF, Version 6.2 

Product # 2100 01443 

Host Computer System: IBM RS/6000 Model 250 (AIX 3-2.5) 

Targ..-t Computer System: IBM RS/6000 Model 250 (AIX 3.2.5) 


Customer's Declaration; 


[I/wej, the undersigned, declare that [I/we] have no 
)cnowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 



Stephen Zeigler 

1600 N W Compton Drive 

Suite 357 

Beaverton, Oregon 97006 








TABLE OF CWTENTS 



CHAPTE3^ 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPE2TOENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESUI.TS.3-1 

3.3 TEST EXECUTION.3-2 


appemjix a macro parameters 


APPENDIX B COMPILATION SYSTEM OPllONS 

APPENDIX 0 APPENDIX F OF THE Ada STANDARD 


i 
















CHAPTER 


1 


INn.ODUCTION 


The Ada intplementation described above was tested according to the Ada 
Validation Procedures (Pro921 against the Ada Standard [AdaS3] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Sumnary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to (Pro921. 
A detailed description of the ACVC may be foui^d in the current ACVC User's 
Guide (UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full aiKi free jxiblic disclosure of this report. 
In the United States, this Is provided In accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and conpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth ir this report are 
accurate and conpletc, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presthted. Copies of 
this report are available to the public from the AVT which performed this 
validation or from: 

National Technical Information Service * 

5285 Port Royal Road 
Springfield YA 22161 

Questions regarding this report or tlie ■> lidation test results should be 
directed to the AVT which performed tnis validation or to: 

Au* Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







INTRODUCTION 


1.2 REFERENCES 

[AdaSS] Reference Manual for the Ada Programming Lan<^uaqe, 

ANSl/Mil.^STr>-16lSA, i “.-uary 19fl? and ISO 8652^87. 

[Pro921 Ada Compiler Validation Procedures # Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inpleroentations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes; A, 
B, C, D, E, 2 «‘id L. The first letter of a test neune identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B auid 
class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking niaiuier and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Ihree Ada library units, the packa^ts REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package report also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that y»ou1u circumvent a test 
objective. The package SPPFT13 is used by many tests for Chapter 13 of the 
Ada Starxlard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHBCK_FILE is checked by a set of 
executeible tests. It these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal lzu)guage usage. Class B 
tests are not executadile. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that *.11 violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code which nwst not ue flagged illegal by the coii(>iler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Starxlard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, tlie largest integer. A list 
of the values used for this implementation is previd^ in Apperrdix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 







INTRODUCTICW 


For each Ada implementation, a customized test suite is produced b\‘ the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdravm tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 emd (UG89]). 

In order to pass an ACVC am Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEF1NITI(X4 OF TEEU1S 


Ada Compiler 


Ada Compiler 
Validation 
Capability 
(ACVC) 


The software and auiy needed hardware that have to be added to 
a given host and target ccmiputet system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 


Ada An Ada compiler with its host coiaputer system and its 

Implementation target computer system. 


Ada Joint 
Pro'^ram 
Office (AJPO) 


The part of the certification body which provides policy and 
guidance for tiie Ada certification system. 


Ada The part of the certification body v4iich carries out the 

Validation procedures required to estaJalish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part cf the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation ^ 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses coireron storage for all or part 

of a program and also for all or part of the data necessary 
for the execution cf the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that cem execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 




INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an agreement 

with an AVF viiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for which 
validation status is realized. 

Host Computer A computer system vdiere Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Orgainization for StJMidardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<s\±isection>:<paragraph>," 

Operating Software that controls the execution of programs and that 

System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
iiardwaie impleuientations are possible. 

Target A con^ter system where the executable form of Ada programs 

Confuter are executed. 

System 

Validated Ada The conpiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration [PrcS2). 

Validation The process of checking the conformity of em Ada compiler to 
the Ada progr^u^ming language and of issuing a certificate for 
this implementation. ^ 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 








> 


CHAPTER 2 

IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVD or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508T 

C35508M 

C35508N 

C35702A 

C357C2B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45512C 

C4565iA 

C46022A 

B4900SA 

• 4 ^ A A 

anyuvoc 

» C >• A A 1A 
rwMuvA-n 

r'CCoOCn 

A74006A 

C74308A 

B83022B 

B83022H 

B03O25B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CDSlllA 

CD7004C 

FD7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CDS005B 

CDA201E 

CE2107I 

CE2117A ■ 

CE2117B 

CE2119B 

CE22G5B 

CE240bA 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 








2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO auid the AJPO known as Ada 
Commentaries and coinmonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IHPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
mote digits them SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L.-Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..2 (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 

C35404C C45231C C45304C C45411C C45412C 

C45502C C45503C C45504C C45504F C45611C 

C45613C C45614C C45631C C45632C B52004D 

C55B07A B55B09C B86001W C86006C CD7101F 

C35713C, B86001U, und C86006G check for tf.e predefined type LOt'JG_FLOAT; 

for this implementation, there is no such type. ~ 

C35713D and B36001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FLaAT, or SHORT_FLQAT; for this 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may )De used as a range 
constraint in a floating-point type declaratiori,' for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTIS.SA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 

MACHINE_OVERFLCWS is FALSE for floating point types euid the results of 
various floating-point operations lie outside the range of the base 
type; tor this in 5 )lementation, HACHINEjOVERFLO'O is TRUE. 

B86001Y uses the name of a predefined fixed-point type other them type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATICN's base type that are outside the 
range of type DURATION; for this implementation, the remges are the 
same. 

CD1009C checks v^rether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 







IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non--default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following taJDle chec)? that USE ERROR is raised 
if the given file operations are not supported for the given combination 
of mode and access method; this implementation supports these 
operations. 

Test File Operation Mode File Access Metliod 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 


CE2102E 

CREATE 

OUT FILE 

SEQUENTIAI. 10 


CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 


CE2102I 

CREATE 

IN FILE 

DIRECT 10 


CE2102J 

CREATE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUEtTTIAL. 10 


CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 


CE2102P 

OPEN 

aiT FILE 

SEQUENTIAL 10 


CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 


CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 


CE2102S 

RESET 

INOUT FILE 

DIRECT 10 


CE2102T 

OPEN 

IN FILE 

DIRECT 10 


CE2102U 

RESET 

IN FILE 

DIRECT 10 


CE2102V 

OPEN 

OUT FILE 

DIRECT 10 


CE2102W 

RESET 

OUT FILE 

DIRECT 10 


i-V«*>»«. 


TM PTT r 

TEXT 10 


CE3102F 

RESET 

Any Mode 

TEXT~10 


CE3102G 

DELETE 


TEXT 10 


CE3102I 

CREATE 

OUT FILE 

TEKr 10 


CE3102J 

OPEN 

IN FILE 

TEXT_I0 


CE3102K 

OPEN 

OUT FILE 

TEXT_I0. 


CE2203A checks 

that 

WRITE raises USE ERROR if the 

capacity of an 

external sequential 

file is exceeded; this implementation cannot 

restrict file capacity. 



CE2403A checks 

that 

WRITE raises USE_ERROR if the 

capacity of an 

externa’ direct file 

is exceeded; this implementation 

cannot restrict 

file capacity. 



1 


CE3304A checks 

that SET LINE LENG'PH and 

SET PAGE LENGTH 

raise USE ERROR 


if they specify ein inappropriate value for the external file; there are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUl^ERROR wiien the value of the page 
number exceeds COU^^^'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 





IMPLQtENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3009B BD2303A BD2D03A 
BD4003A 

A35801E was graded inappliczdole by Evaluation Modification as directed by the 
AVO. The con?>iler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03.A, and CD2A3iA..C were graded passed by Evaluation 
Modification as directed by the AVO. These tests use instemtiations of the 
support procedure LENGTH CHECK, vrtiich uses Unchecked_Conversion according to 
the interpretation given Tn AI-00590. The AVO ruled that this interpretation 
is not binding under ACVC 1.11; the tests are ruled to be passed if they 
produce Failed messages only from the instances of LENGTH_CHECK—i.e, the 
allowed Report.Failed messages have the general form: 

” * CHECK CN REPRESENTATION FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting o.. . line 36 and 
40; the modified test was passed. 




2-4 






CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The - Ada irtplementaticn tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information adaout this Ada implementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Compton Dr,, Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Staridard, whether the test is applicable or inapplicable? otherwise, the Ada 
Implementation fails the ACVC [Pro92J. i 

For all processed tests (iriapplicable amd applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e? see 
section 2.2), aind those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, belov/). 


3-1 




PROCESSING INFORMATION 


a) Total Number of Applicedjle Tests 3796 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Iruipplicable Tests 270 (c-t-d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 


A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and then copied to the 
host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled, linked and executed on the host computer system. 
The results were captured on ttte host computer system. 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix b for a complete listing of 
the proces.sing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 

Option/Switch Ef*'ect 

-w Sut-press warning diagnostics. 


Test outi ut, compiler and linker listings, and job logs'were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The roeauiing and purpose of these parameters are explained in [IJG891. The 
parameter values are presented in two tables. The first tadsle lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MAX_IN_LE1I—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 


$BIG_ID1 

(1..V-1 -> 'A', V -> '1' ) 


$BIG_1D2 

(1..V-1 -> 'A', V -> '2') 


$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 


$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

{1..V-3 -> '0') & "298" 

- 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 


5BIG_STRING1 

S (1..V/2 -> 'A') & 

r 

$BIG_STR1NG2 

& (l.,V-l-V/2 "> 'A') 

i '1' & 

$BLANKS 

(1..V-20 »> ' ') 


$MAX_LEN_INT_EASED_ 

LITERAI, 

"2:" & (1..V-5 -> '0') & " 

11:" 

$MAX LEN REAL BASED LITERAL 

”16;'' 6. (1..V-7 «> '0') & 

"F.E;" 


A-1 









MACRO PARAMETERS 


$MAX STRING LITERAL 


& (1..V-2 -> 'A' ) & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 


Macro Value 


§ACC_SIZE 

SALIGNMENT 


SCOUNT LAST 


2147483647 


$nEFAULT MEM SIZE 


16777216 


$DEFAULT STOR UNIT 8 


$DEFAULT SYS NAME 


POWER SELF 


$DELTA DOC 


0.000000000456661287307739257812b 


SENTRY ADDRESS 


SYSTEM. •■+"(16#40#) 


SENTRY ADDRESSl 


SYSTEM."+"(16180#) 


S’aTTRY ADDRESS2 


SYSitH.”+”(16#i00i() 


SFIELD LAST 


2147483647 


SFILE TERMINATOR 


SFIXED_NAME 

Sfloat name 


NO SUCH TYPE 


NO SUCH TYPE 


SFORM STRING 


SFORM S'rRING2 


"CANNOT RESTRICT FILE CAPACITY" 


SGREATER IIIAN DURATION 


lOOCOO.O 


SGREATER_THAN DURATION BASE LAST 

looooroo.o 

SGREATER_THAN_FLQAT_BASE LAST 

1.8E+308 

$GREATER_THAN FLQAT_SAFE LARGE 

b.'Oeso? 




MACRO PARAMETERS 


$GREATER THAN SHORT FLCAT SAFE_LARGE 

9.0E37 

$HICai_PR10RITY 99 

SILLEGAL EXTERNAL FILE_NAME1 

/illegal/f ile_naine/2) 1 $%FILE1. DAT 

SILLEGAL EXTERNAL FILE NANE2 

7illegal/f ile_nain8/2})$%FILE2.DAT 

$ INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE PAGELENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAGMA2 pragma include ("B28006D1.TST") 

SINTEGER_FIRST -2147403648 

$INTEGER__LAST 2147483647 

$INTBGER_LAST_PLUS_1 2147483648 

5INTERFACE_LAriGUAGE C 

$LESS_THAN_D»jnRAT10N -100000.0 

Sless than duration_base first 

-ICOOOOOO.O 

$LINE_TERM1NAT0R ASCII.LF 

$L0W_PR10PTTY 0 

SMAtiailNE CCX)E_STATEMENT 

CC»E_0'(OP ~> NOP); 

SMACHINE_CXX)E_TYPE COCiE_0 i 

SMANITSSAJXX: 31 

SMAX_DIGITS 15 

SMAX_INT 2147483647 

SMAX_INT_PLUS_1 2147483648 

SMIN_INT -2147483648 

SNAME TI14Y_INTEGER 

A-3 



MACRO PARAMETERS 


$NAME_LIST 

SNAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPEri FI CATI(»I3 

SNEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

SRECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 


PCWER_SELF 

/usr/acvcl.ll/c/e/X2120A 
/usr/acvcl.ll/c/e/X2120B 
/us r/acvc1.il/c/e/X3119A 
16#FOOOOOOE# 

16777216 

8 

POWER_SELF 

ASCII.LF & ASCII.FF 

RECORD SUSP: OPERAND; END RECORD; 

CODE_0 

32 

2048 

0.01 


$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR_PRAGMA 


VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3 'ADDRESS 
PRAGMA PASSIVE 


A-4 







APPENDIX B 


COMPILATION SYSTEM OPTIONS 


•nie conpiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to conpiler docuaentation and not to this 
report. 


I 


B-1 





CCMPILATia'I SYSTEM OPTIONS 


ada 


Conmand Reference 


ada 


ada - invoke the Ada compiler 
Syntax 

ada [options] [source_file) 
Arguments 

object_file.o 


(object_£ile.ol.. 


options 


non-Ada object file names. These files will be passed 
on to the linker zuid will be linked with the specified 
Ada object files. 

options to the conpiler. These are: 


-A (disassemble) Disassemble the units in the source file after 
compiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 
-Al, -As). 


b 

d 

£ 

1 

s 


Add hexadecimal display of instruction bytes to 
disassembly listing. 

Disassemble the unit body [default]. 

Print the data section (if present) as well, 
use tiie alternative format for output. 

Put the disassembly output in file "file_naaie.da6’' 
Disassemble the unit spec. 


-a file_name 

(archive) Treat file name as 2 in object archive file created 
by ar. since some arrive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCorapiler Ada only) 

(static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dynamic. 

-c suppress the control messages generated when pragma PAGE 
euvd/or pragma LIST are enccnantered. i. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 




COMPILATION SYSTEM OPTIONS 


seinaintic analysis or code generation. Update the library, 
marking any defined units as uncompiled. 'rtie -d option is 
used by a.make to establish dependencies among new files. 
This option will atten^Jt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation eord reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/sourcefile.err. The file of 
raw error messages C 2 ui be used as input to a.error. Only 
one ~e or -E option should be used. 

-e (error) Process cotH5ilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror file source file 

(error) Process source file emd place emy error messages 
in the file indicated ^ errorfile. Note that there is 
no space between the -Ef and error_file. 

-El 

-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the saurce listing is 
directed to standard out while the raw errors are placed in 
source_f ile.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usin^ a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERROR_EDITOR is defined, the environment 
variafile ERROR PATTERN should also be defined. ERROR_PATTERl'l 
is an editor search ccmtnand that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERROR_TABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 


B-3 



COMPIIATION SYSTEM OPTIONS 


trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
genetic or certain other values needing to be retained for 
the debugging or compilation information). The trimming 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the MIN_GVAS_ADDR 
and MAX_GVAS_ADDR INFO directives. 

-K (Iteep) Keep the intermediate language (IL) file produced 
by the conpiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L libraryjname 

(library) Operate in VADS library library_name. 

(Default; current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file abbreviation.) 

-M imit name 

(main) Produce an executable program by linking the named 
unit as the main program. unit_namc must already be 
coiiipiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(main! Produce an executable program by compiling and 
linking source_file. The main unit of the progreun is 
assumed tc be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be neuoed a.out unless overridden 
with the -o option, 

-N (no code sharing) Con^jile all generic instantiations 
without sharing code tor their bodies. This option 
overrides the SHARE_BODY INFO directive emd the SHARE_CXDDE 
or SHARE_BODY pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries 
This option is valid only if the -M option has also been invoked 
(Sun SPARC -> Paragon only) 


-0(0-91 

(optindze) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 



COMPILATION SYSTEM OPTIONS 


-O 

-OO 


-02 

-03 

-04 

-05 

-06 

-07 

-08 

-09 


full optimization 
no optimization 

copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variedjles 

add common svibexptession elimination within 
basic blocks 

add global common subexpression elimination 
add hoisting invariants from loops and address 
optimizations 

add range optimizeitions, instruction scheduding 
euid one pass of reducing induction expressions 
no change 

add one more pass of induction expression reduction 
add one more pass of induction expression reduction 
add one more pass of induction expression 
reduction and add hoisting expressions common to 
the then and the else parts of if statements 


Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significemt performance gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For exan^ile, using a higher level of optimization, 
you may receive a message that a varizdsle is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -CO option. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option. executable_file is tlie name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiation) Force emalysis of all generic 
instemtiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
recon^iilation Ts to occur. If it is not specified, the 
recon 5 )ilation occurs in the current working dire6tory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"(3VAS exhausted" without recompiling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 


-T (timing) Print timing information for the compilation. 

B-5 




CCMPILATION SYSTEM OPTIONS 


-tcb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (verbose) Print compiler version number, date and time of 
compilation, name of file compiled, command input line, 
total compilation time zind error sunmary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

The ada command executes the Ada compiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
conpiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id amd builds a complete 
program with the named library unit as the main program. 

For cross systems, the conpiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a conpiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options mc.y be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS compilers may be simultaneously available on ii single 
system. Because the ada command in any VADS_location/bin oh a system 
will execute the correct coit^jiler ccxnponents based upon visible 
library directives, the option -sh is provided to print the name of 
the coitponents actually executed. ‘ 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second compilation will 
overwrite the first. For example, the conpilation of 
/usr/directory2/foo.a -L /usr/Vads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L /usrAads/test in the 
VADS library /usr/vads/test. 


B-6 






COMPIIATION SYSTEM OPTIC»4S 


NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TEMPDIR 
is not set, /tmp is used. If the path specified by TMPDIR aoes not exist 
or is not vriteable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS conqpiler are intended to be 
self-expleu)atory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 


The linker options of this Ada implementation, as described in this Appendix, 


are' provided 
references in 
report. 


by the cijistomer. 
this appendix are 


Unless specifically noted otherwise, 
to linker documentation and not to this 





CCMPILATiai SYSTEM OPTIONS 


a.Id Comraemd Reference a,Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id toptions] unit_naine [linker_optionsl 
Arguments 

linker_options 

All arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

• options options to the a.Id command. These are: 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
snould generate code for. These options override the ARCTITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intenoediate file if the entire list of objects coiuiot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du unit list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays ttie elziboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. 

-UX (debug) Debug memory overflow (use in cases wher'e linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit_name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present when many object 



COMPILATION SYSTEM OPTIOIS 


files are being linked. 

-L library_naine 

(library) Collect information for linking in library_neune instead 
of the current directory. However, place the execute±)le in the 
current directory. 

-NX (NX) Link with NX startup copde and witli the NX archive libraries. 
(Sun SPARC -> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the .linker commauid but suppress execution. 

-w (warnings) Suppress warning messages. 
unit__naine 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STAJ'^DARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unitjiame a jsain 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada compiler to check dependency information, avid produces 
eui exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WiTHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WiTHn 


B-9 



COMPILATIOJ SYSTEM OPTIONS 


directives may be placed into a library but they inust be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_file: 

WiTHn directives may be placed in the local Ada libraries or in 
emy VADS library on the search list. 

A WITHn directive iu a local VADS library or earlier on the 
library search list will hide the same numbered WiTHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VT^Sself on Silicon Graphics Computer Systems, tlte 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a.Id is a wrapper program that executes the 
correct executzible based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the director^' for teir^^rary files by 
setting the environment variable TMPDIR to the desired path. If HtPDIR 
is not set, /tsag is used. If the path specified by IWPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup emd standard library routines 

Diagnostics 

Self-explzuiatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker'. 


B-10 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


Tne only allowed iii?>lementation dependencies correspo to 
implementation-dependent pragmas, to certain machine-dependent convene:._ins as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otiierwise, 
references in this Appendix are to compiler documentation £uid net to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix f, are: 


package STA.‘.-iA«D is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY IN'IEGER is range -128 .. 127; 
type SHORf_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLQAT is digits 6 range -3,40282E+38 .. 3.40282E+38; 
type DURATION is delta 0.0001 range -214748,3648 .. 214748.3647; 


end STANDARD; 




c-a 




APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Itnpleroentation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINE_ONLy Pragma 

The lNLlNE_Cf-lLy pragt’a, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a calledale version of the routine which saves code 
space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning iressage will be emitted and on 
PROGRAM_ERROR will be raised at run time. 

1.3. BUILT_1N Pragma 

The BUILT IN pragma is used in the inpleroentation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code b^ies for which no actual Ada 
body can be provided, for example the MACHINE_{XX)E package. 

1.4. SHARE_CODE Pragma ^ 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument euad one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that genetic. When the first atgu- 


C-2 





APPEM)IX F OF THE Ada STANDARD 


mgnt is the name of a generic instantiation the 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the conpiler will t^ to 
share code generated for a generic instantiation with c^e 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the imple¬ 
mentation and has the same effect as SH^_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.5. t«_lHAGE Pragma 

The pragma suppresses the generation of the image array 
for. the IMfJSE attribute of enumeration types. Tnis elim¬ 
inates the overhead required to store the array ®*®“ 

cutable inage. An attempt to use the IMAGE attribute on a 
type vrtiose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.6. externa:.JNAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variadDle deTined in Ada arwi allows the user to specify a 
different external name that may be used to reference ^e 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE NAME pragma takes the name of a a vari^le ^ 
subprogram defined in another language and allows it to 
referenced directly in Ada. Tne pragma will replace all 
occurrences of the variable or subprogram narc wit.,t an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification eind must apply to an object or subprogr^ 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

eui initialized variable, 
an array, or 
a record. 


C-3 


APPECCIIX F OF THE Ada STANDARD 


1.8. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argij- 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is ON. 


1.9. OPTIMI2E_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies v^ether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CC^TTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is iit^ilemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

Tiiis pragma is inplemented as described in Appendix B of the 
da RM. 

2.4. INTERFACE 

Tl s pragma supports cal's to 'C' and FORTRAN functions. The 
Ada subprograms caur be either functions or procedures. The 
of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. I.IST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The imple- 


C-4 




APPENDIX F OF THE Ada STANDARD 


mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recortpiled. 

2.7. NONJREENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsai within a package spec or pack¬ 
age body. 

2.8. NCIT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela- 
^ration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the , 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms ; ' 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHIRE); 

PRAGMA PASS I VEdtTTERRUPT, <number>); 


This pragma Pragma passive cam be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 


C-5 




APPENDIX F OF THE Ada STANDARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERR0R at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGEJJNIT 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the system package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK cannot be 
supresseHo 

2.17. SYSTEM _NAME 

This pragma is recognized by the iit?)leroentatiori. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. iii?)lementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, c program unit, a 
label, or ain entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of , the 
machine code associated with the corresponding body or 
statement. For am entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE . The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 


C-6 


APPENDIX F 01 THE Ada STANDARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id-associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


with UNSIQJED_TYPES; 
package SYSTEM is 

pragina suppress (ALL_CHECKS); 
pragma suppress (EXCEPTION_TABLF.S); 
pragma not_elaborated; 

type NAME is ( ’'ov.'ur_self ); 

SYSTEM NAME J constant NAME 5“ power_self; 

STORAGE UNIT : constant 8; 

MEMORY SIZE ! constant :* 1 o_777_zid; 


System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAXJDIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant -2 147 483 648; 
: constant 2 T47_?83_?47; 

: constant :■ 1?; 
constant 31; 

: constant 2.0**(-31); 

: constant 0.01; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


P 1 AX_REC_SIZE ; integer 64*1024; 
type ADDRESS is private; 


function ">" (A: ADDRESS; B 
function (A; ADDRESS; B 
function ">-"(A; ADDRESS; B 
function "<-”(A: ADDRESS; B 
function (A; ADDRESS; B 
function "+" (A: AIX)RESS; I 
function (A: ADDRESS; I 


ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return INTEGER; 
1NTE(3ER) return ADDRESS; 
INTEGER) return ADDRESS; 


function "+" (I: UNSlGNED_TYPES.UNSIGNED__INrEGEK) return ADDRESS; 


C-7 





APPENDIX F OF THE Ada STANDARD 


function MEMORy_ADDRESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS renames 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_1D; 

type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID ; constant PASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INl'EGEIl; 

SIG_STATUS_SIZE: constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID ; constant PROGRAM__ID; 

type BrxE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIAN 

) ; 

BYTE_ORDER: constant BYTEjOPDER T BIG__ENDIAN; 
type L(»}G_ADDRESS is private; 

NO_LONG_ADDR ; constant LQNG_ADDRESS; 

xuiiiirtdvii +** (A; ADDRESS; I; INTEGER) return LONG_ADDRESS; 

function (A: LONG_ADDRESS; I: INTEX3EK) return L0i4G_ADDRES3; 

function MAKE_LONG_ADDRESS (A; ADDRESS) return LONG_ADDRESS; 

function LOCALIZE(A: LONG_ADDRESS } BYTE_S1ZE ; INTEGER) return ADDRESS; 

function STATI0N_0F(A; L0NG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the Julian day. 
subtype DAY_T is INTEGER; 

— Constants describing the configuration of the CIFO ado-on product. 
SUPPORTS_INVOCATia'I_BY_ADDRESS ; constant BOOLEAN. TRUE; 
SU?PORTS_PREEuABORATION ; constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPORTED ; constant BCXJLEAN TRUE; 

— Arguments to the CIFO pragma INTERRIIPT_TASK. 
type INTERRIJPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETURN_ADDRESS return ADDRESS; 

private 

type ADDRESS is new UNSI(34ED_TYPES.UNSI®JED_INTEGER; 


C-8 




APPENDIX F OF THE Ada STANDARD 


NO_ADDR : constant ADDRESS :« 0; 

pragma BUILT IN(">"); 
pragma BU1LT”IN("<"); 
pragma BUILT_IN(); 
praama BU1LT_IN( ) ; 
pragma BU1LT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
N0_TASK_ID : constant TASK_ID 0; 

type PASSIVE_TA£K_ID is new UNSIGNED_TYPES.UNSIC2^ED_INTEGE3^; 
N0_PASSIVE_TASK_1D ; consta it PASSTV£_TASK_ID 0; 

type PR0GRAM_ID is new UNSIGNED_TYPES.UNSIGNED_ItrrEOER; 
NO_PROGBAM__iD : constant PROC3Utf1_ID 0; 

type LONG_ADDRESS is 
RECORD 

station : UNSiaJED_TYPES.UNSIGNED_INTEGER; 
addr : ADDRESS; 

END RECORD; 

^0_LC»^G_ADDR ; constant LONG^ADDRESS !- (0, 0); 


pragma BUILT_1N(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT__1N(STAT10N_0F) ; 

pragma BU1LT_IN(RETURN_ADDRESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the tatget 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
n’jmber of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; em explicit record representation 


C-9 





APPENDIX F OF THE Ada STANDARD 


clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record typo will cause 
packing of conponents only when the COTiponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, accens, or floating point types. 


5.3. Address Clauses 

Address clauses ate only supported for variables. Since 
default initialization of a variable requires evalvation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 
either am accept for the entry (if there is only one) or a 
select statement vdiere the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal iSRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. ' 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It singly specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 







APPENDIX F OF THE Ada STANDARD 


The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of tlie package MACHINE_CODE provides 
aui assembly language interrace for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand) )} 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follcT/^s: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

rODE_0'( op «> opcode ); 

The opcode must be an enumeration literal (i.e. it cauinot be ' 
object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE' or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an arguiient in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 


C-11 




APPENDIX F OF THE Ada STANDARD 


There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

instantiations of DIRECT_I0 use the value MAXJREC_SIZE as 
the record size (expressed in STORAGEJUNITS) v^en the size 
of ELEMElTr_TYPE exceeds that value. For example for uncon¬ 
strained arravs such as string vhere ELEMENT_TYPE'SIZE is 
very large, MAX_PEC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed tay a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size, in auiy case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits, D1RECT_I0 will raise USE_ERROR 
if M.AX_Pi:c_SIZE exceeds this absolute liudt. 

Instantiations of SEQUENTIAL_IO use the value MAX_R£C_SIZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELEME3fr_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEIlENTjrYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_I0 to provide an upper 
limit on the record size. SEQUENTIAL 10 inqposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen- 
taticn. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character, 

11.2. Record and Array Sizes 

Tile maximum size of a statically sized array type is 
4,000,000 X ST0R»J3E_UNITS. The maximum size of a statically 


C-12 








APPENDIX F OF THE Ada STANDARD 


sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for lasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STQRAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SI2E length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for aul access type T. 

11.5. Limit on Declared Objects 

There is an cibsolute limit of 6,000,000 x STORAGE UNITS for 
objects declared statically within a compilatibn unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 








