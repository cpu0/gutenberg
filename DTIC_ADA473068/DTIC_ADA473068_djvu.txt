REPORT DOCUMENTATION PAGE AFR1 

L-SR-AR-TR-07-0411 

the 

ang 

er% 

Publtc reporting burden for this collection of information >1 estimated to average 1 hour per response, including tho time for re viewing 
data needed, and comptehng and renewing this collection of infarmaUon Send comments regard.ng this burden estimate or any ■ oth. 
this burden to Department of Detense. Washington Headquarters Services. Directorate for Information Operations and Reports {07O< 

4302 Respondents should be aware thart notwithstanding any other provision of taw. no person shall be subject to any penalty for fa 
valid 0MB control number PLEASE DO HOT RETURN YOUR FORM TO THE ABOVE ADDRESS. 

1. REPORT DATE (DD-MM-YYYY) 2. REPORT TYPE 

15/01/2007 Final Report 

3. DATES COVERED (From - ToJ 

01/12/2005---30/11/2006 

4. TITLE AND SUBTITLE 

Algorithm and Implementation of P-adic Cyclic Codes Using 

Exact Arithmetic Library Developed for Quantum Computing 

5a. CONTRACT NUMBER 

6b. GRANT NUMBER 

FA 9550-06-1-0039 

5c. PROGRAM ELEMENT NUMBER 

6. AUTHOR(S) 

Chao Lu 

Computer & Information Sciences 

Towson University 

Sd. PROJECT NUMBER 

5e. TASK NUMBER 

Sf. WORK UNIT NUMBER 

7. PERFORMING ORGANIZATION NAME(S) AND APDRE5S(ES] 

Towson University 8000 York Road 

Towson, MD 21252 

8. PERFORMING ORGANIZATION REPORT 

NUMBER 

9, SPONSORING / MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Dr. Jon Sjogren 4015 Wilson Blvd, Room 713 

AFOSR/NM Arlington, VA 22203-1954 

10. SPONSOR/MONITOR'S ACRONYM(S) 

11. SPONSOR/MONITOR'S REPORT 

NUMBER(S) 


12, DISTRIBUTION I AVAILABILITY STATEMENT ~ 

V^htio — 


13. SUPPLEMENTARY NOTES 


I ®f + i nlJ^^iW■ ■ _ 

Summary: The first part of the research is that we have expanded the Exact Scientific Computational Library (ESCL), and Dixon’s 
algorithm on rational N by N matrix inverse was implemented, We studied and experimented the relation of required length M ot p-adic 
expansion and the prime p, and the possible use of the length of periodicity of a rational number’s />-adic expansion in determining the 
length of required M in rational matrix operations. 

The second part of the work is to develop and implement computational algorithms for p- adic cyclic code generation, which is based on the 
results of the paper, Modular andp-adic cyclic codes, by A.R.Calderbank andN.J.A. Sloane. Algorithms and software have been developed 
to give an alternative solution to factorize the polynomial Y-I over the ring of integers modulo p", where p is a prime not dividing «, and it 
can generate the table of cyclic codes using the divisors of Y-l as their generator polynomials. 

All the implementation of ESCL is in C++, as well as the software to generate /vadic cyclic codes, 

IS. SUBJECT TERMS 


16. SECURITY CLASSIFICATION OF: 

17. LIMITATION 

OF ABSTRACT 

18. NUMBER 

OF PAGES 

19a. NAME OF RESPONSIBLE PERSON 

Chao Lu 

a. REPORT 

b. ABSTRACT 

c. THIS PAGE 



19b. TELEPHONE NUMBER (include area 
code) 

410-704-3701 


Standard Form 298 (Rev; 8-98) 

Proscribed by ANSI 5td. 139.IS 










































Algorithms and Implementation for />-adic Cyclic Codes Using Exact 

Arithmetic Library Developed for Quantum Computing 

Final Report (Grant # FA9550-06-1-0038) 

Chao Lu 

Computer & Information Sciences 
Towson University 

January 16, 2007 



TOWSON 


UNIVERSITY 


20071016432 




1. Summary 


The first part of the research is that we have expanded the Exact Scientific Computational Library (ESCL), 
and the Dixon’s algorithm [I] on rational N by N matrix inverse was implemented. We studied the relation 
of required length A/ofp-adic expansion and the prime p by experiments, and the possible use of the length 
of periodicity of a rational number’s p-adic expansion in determining the length of required M in rational 
matrix operations. 

The second part of the work is to develop and implement computational algorithms for p-adic cyclic code 
generation, which is based on the results of the paper, Modular andp-adic cyclic codes, by A.R.Calderbank 
and N.J.A. Sloane [2], Algorithms and software have been developed to give an alternative solution to 
factorize the polynomial X"-l over the ring of integers modulo p a , where p is a prime not dividing n, and it 
can generate the table of cyclic codes using the divisors of )C-I as their generator polynomials. 

All the implementation of ESCL is in C++, as well as the software to generate p-adic cyclic codes. 

2. Progress on ESCL Using P -adic Arithmetic 

In the design of ESCL we employ several developing tools and a specific library--NTL. We use Visual C++ 
6.0 and MFC to develop and debug the codes. MATLAB Symbolic is used for comparison. We adopt the 
NTL library to process the input and output of arbitrary long integers, which are the numerator and 
denominator of a rational NTL, written by Shoup [3], a high-performance, portable C++ library for number 
theory that provides both data structures and algorithms for arbitrary length integers. NTL allows 
manipulation of integers for vectors, matrices, and polynomials over finite fields, and arbitrary precision 
floating-point arithmetic* 

Our ESCL has the following operations; 

1) Converting rational to p-adic number and via verse. 

2) Single rational number’s calculation: addition, subtraction, multiplication and division. 

3) The addition, subtraction and multiplication of two rational matrixes, 

4) The inverse of a single rational N by N matrix. 

In order to improve the efficiency of ESCL, a proper prime p and the length M ofp-adic expansion need to 
be determined. We did experiments on a random rational matrix with different prime numbers and record 
the execution time. Our experiments show that the running time is more related to the length Mofp- adic 
sequence, where “AT can be calculated based on the prime p: 

m = 2[log(&T')/ log p\, (l) 

where the S = f"[ X, and X t is the Euclidean length of the ith column. 

The process of choosing/? and M can be done as follows. Suppose that for certain "p'\ we can get “AT very 


2 




smalt. If we choose a small M t then use (1) to calculate prime p. Thus we will get a relatively big prime and 
a theoretic smallest M, and some adjustment is needed during the process. The flow chart is shown in 
Figure l. 



Figure I- Estimating the prime number 

Dixon's algorithm for matrix inverse from u Exact Solution of Linear Equations Using P-adic Expansions" 
[1] was implemented, which is the newly added function since the last report. To get the A'\ for which 
AjcA J ~/ f we take the following three steps, 

1) Get the nxn matrix C t whose entries lie in [0, p-I] 

AA‘ i= I*> AA' 1 mod p = I mod p=>AC = I mod p; => C - A' 1 mod p. 

2) Compute a p-adic approximat ion x 1 to A' 1 , x 1 is a nxl column of A' 1 . 

flt-1 JW-I 

x'=Ys X iP' = ^ Cb ‘ m0d P^P' 

j -0 1-0 

3) Transfer x* to rational field. 


Repeat doing 2) 3), until bi=bn-] t 



T 


'o' 


"O' 

and b 0 = 

0 

b,= 

1 

... b n .i= 

0 


_o_ 


_0_ 


_1 


3 















Figure 2 shows an example for this operation. 


Please enter tlie operation numher<such as 1 or 2>: 10 
Please input the division of the ssquare matrix: 


Please input ROD i elements: 
L,5,2 


Please input ROU 2 elements: 

Li,7 

Please input ROU 3 elements: 
3,8,2 

[he prime number is: 5 
Result: 

[9/8,-1/8,-11/16 
L/24,-1/24,5/48 
-1/6,1/6,1/121 


Figure 2, Matrix inverse example 

Our system is capable of carrying out exact arithmetic operations for rational numbers using the finite 
segmented p-adic numbers. The representation of the rational numbers has several appealing properties. 
Given the usual representation of the positive integers, it is, in a genuine sense, the natural extension to the 
rational. The algorithms for addition, subtraction, and multiplication are those of the usual integer 
arithmetic; the division algorithm is truly the analogue of multiplication. 

When two p-adic rational numbers are added, subtracted, multiplied, or divided, the result is an infinite but 
eventually repeating sequence of digits (periodicity). 

Despite the advantages of finite segment p-adic arithmetic and exact representation, there are certain issues 
need to be addressed: 

1) Improve the EstimatcMQ. Currently, the A/estimation does not always work well. In some situation, it 
cannot give the sufficient number of digits for p-adie sequence for exact computation. To avoid this 
kind of errors, we have increased its size to 30 and more. 

2) A more efficient method for prime number selection for the given rational. 

3. The Length of Periodicity for the P-adic Expansion 

To determine what is the sufficient length AY of p-adic expansion for a rational number in the matrix 
operation is not a trivial problem. Let us observe what happens after the arithmetic operations of two p-adic 


4 



sequences. 


All rational numbers can be uniquely written in the form of a = . 

We know that a real number is rational if and only if its decimal expansion is periodic. Similarly, a p -adic 
number is rational if and only if its /7-adic expansion is periodic. Consequently, since we are primarily 
interested in the p-adic expansions of rational numbers we will be dealing only with /vadic expansions 
which are periodic. 

The expansion eventually repeats to the right. That is, if a is a rational number, then it has a repeating 
pattern of djP J in its P-adic expansion, Le., it is of the form 

a=,A ft ...A s a 0 ...a^ i 
For example: 
i = .231(p=5) 

| = .4l3(p=5) 

The operation of addition, subtraction, multiplication and division in the set of p-adic numbers are quite 
similar to the corresponding operations in decimals. The main difference, however, is that we proceed from 
“left to right" rather than from “right to left” as we do with decimals. 

Addition/subtraction 

Assume that we have two P-adic sequences: (s<t) 


a = ,A t 

...A s a,...a 


b = A 


Line up these two sequences 

A X A V . 

■A r d\ . ..cjj-j 


4 

■A 



Set a,_, +l =Ct 

‘ • ^l + ft = C l 


5 






c r ..c n c v ..c„... 


A^...A x a v .n,_ t 
B, ... B, 


VAW 


Let’s consider the right side of the vertical stroke line 

C[ C 2 C 3 ... Cj| c, . c n ... 

+ b| b 2 b 3 ... .. b m b| ... b m ... 


C|+b| c 2 +b 2 c 3 +b 3 ... Ck+bi,... 

Suppose two integer x,y satisfy the condition that x ^ y and c x +b x = c y +b y 
V c* and by can be any number 

in the worst case, we must make sure that c, = a y = a, and c x = b y = b, 
x = kJ*n + i= k2xm +j 
y = Uxn + /= k4 x m + j 
=> x-y = (kl‘k3) x n = (k2-k4) x m 
*.■ x * y 

kl-k3 and k2-k4 are nonzero integers 

x-y must be exactly divisible by n and m, the smallest integer which satisfies this requirement is LCM(n.m), 

The carry digits 1 modification 

We only need to consider the (t+l)th cany digit, because it will cause the exception of the periodic part. 
Since the maximum carry digit of the addition of two numbers is 1, we can classify the following numbers 
into three types and they have different effects. 

Type One; The (t+l)th digit is less than p-l, assume the (t+l)th digit is q: 

\'q<p-\-=>q + l<p 

=> .q... +1 (the carry digit) = .{q +1)... 
so only one digit will be affected. 

Type Two: The next r digits following the t th digit have the value p-l 
Assume the (t+r+1 )lh digit is q, and q < p — 1 

_ r _ r 

{p -!)...(/? -1 )q... +1... = .0...0(g +1)... 

r +1 digits will be affected. 

In addition, r < LCM(n,m) 


Because if r= LCM(n, m), then it belongs to the type three. 

Type Three: The digits following the \(h digit are rotation numbers of p-l 


6 





.p -1 +1 = .0 = 0 

The result is 0. 


We can draw a conclusion that the maximum length of the p-adic expansion is: 

2 x LCM («, m) + max(5, t) -1. 

Multiplication 


axb = .A l ...A s a l ...a n x.B x ...B l b l ...b m 


= .A t ...A I a i :..a n x.B l ...B,+.A i ...A,a, ...a„x .0...06, ...b K 


= .A l ...A I a i ...a„x.B l ...B, +.A i ...A s x.0...0b ] ...b m +.0...0a i ...a„x,Q...0b i ...b m 

^ ___v---v-“ — * v -—v - # 


Let's analyze the three parts separately, 
Part 1: 



Z 


*** — A s . * * d n x * * - B t — .Cj *.. C u Cj.,. c n 

That is, the result is a/?-adic sequence, which has a periodic part of n digits. 


Part 2: 

v ...B f e Z 


.Af...A s x .0„.06 t ...b„=.Df..D v d x ...d m 

That is, the result is a p-adic sequence, which has a periodic part of m digits. 


Part 1 + Part 2: 


.At... A s a,.. ,a„ x .5,... B, +.A t ... A, x .0...06, ...b m 

' -*- y '-v--' 

1 2 

According to the previous conclusion we get from the Addition part. 


=> x.B, „ a B t k.0,.-0^ * + - .E { ...E w e j 

This is a j^adie sequence which has a periodic part of LCMfn.m) digits. 


Part 3: 


7 


























...a„ x.0.,.06, ...b m 

= (.a,.,.a n )x(l + p” + p 2n + ... +p'°)x(jb i ...b m )x(\ +p m + p 2m +... + p° )x/r s+ ' 
= (.a l ...a„)x(.b l ...b m )x p’*‘ x(l + p n + p 2n + ... + p“)x(l + p m + p 2m + ... + /?") 

t^- * *-—-V---- 

4 5 


Part 4 {.a ] ..,a n )x(J> r ..b m )x p'" eZ. 


Part 5 is the one we need to focus on. 


0 + A 

' + p 2n +, 

.. + p*‘)x(\ + p m + p 

2m + 

. + #>•) 


n- 

■] n T t 

m- 

1 n-1 





*5.10.. 

.010...0... 

X.10...010...0. 

- 




a \ 

<*2 

<*1 

«4 

«s 

«6 

a , a* 

a k ... 

xft, 

A 

A 

A 

A 

A 

bj b K 

A- 

a \ h \ 

<*A 

a A 

<*A 

aA 

<*A 

a ib\ a %b x 

aA-- 



a At 

a A 

a Ai 

a s b 2 

Qffii Qjbj 

a k -1 A ■ ■ 



aA 

aA 

a, by 

a As 


a k ~Ai • • * 


«A- 

Ignore the carry, the k//i products digit is a k b t + o i _ [ b 2 +... + Q\b k 

Set (k'+l)x LCM(n,m)> k > k'xLCM{n,m) let LCM(n,m) = £ , 

a k b\ + a k _ t b 2 + ... + a k _ t+l b t + a k _ t b l+1 + o k _ t _A+ 2 +... + a k-it+Au +... + Qk-kAk-t+x + ■ + a iA 

s—-- v —-' ^- v-——' r ' 

\ 2 3 

**' Q k +1 = a k-t+i — = Qk-k'i+t ^ bf = = ”■ ” ^k-f+t 

.■.part lean be rewrite as a k _ k ,b\ +o k _ k . l _ l b 1 + ... + aA- k - t + a f b k - k 7+ , +... + a k _ t . M b, 
part 2 can also be rewrite as a k _ t . f b x + a k . k - t -Ai + ... + £*A -*7 +a f b k _ k . f+ , + ... + a 1 _*., + ,6, 
part 3 can be rewrite as a k ^ k .,b\ + a k _ k f _ l b 2 +,.. + a t b k _ k . t 
We can find that part 1 equal to part 2, and because there are LCM(n.m) items in this part, we must get 

a, X ft, once, which is the only item has the value 1, and all other items’ value is 0, that is the result of pan 

1 is 1, so far as part 2. 

Part 3 is the actually the front part of part t, that means the value of part 3 may be 1 or 0. 

Base on this discovery, we can divide the configuration \n\o LCM(n,m) x LCM(n,m) modules. Let’s 

take 100100100...x 101010, ..(p- 5) as an example. 


8 












LCM(2,3)=6, so we divide the module in 6 x 6 
.100100100100100100100100100100100100 



r* 

.10101010. 

1OIOI01010101010101010101010 

1 0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 


1 

0 

0 

I 

0 

0 

] 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 



0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 




1 

0 

0 

1 

0 

0 

l 

0 

0 

\ 

0 

0 

1 

0 

0 

I 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 





0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 






1 

0 

0 

J 

0 

0 

] 

0 

0 

1 

0 

0 

1 

0 

0 

I 

0 

0 

1 

0 

0 

I 

0 

0 







0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

a 

0 

0 








1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

I 

0 

0 

1 









0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 










1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

t 

0 











0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

a 

0 












] 

0 

0 

1 

0 

0 

I 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 













0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 














I 

0 

0 

1 1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 















0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 
















i 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

0 

1 

0 

















0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 


















1 

0 

0 

1 

0 

0 

1 

0 

0 

\ 

0 

0 



















0 

0 

0 

0 

0 

0 

0 

0 

0 

0 

0 




















] 

0 

0 

1 

0 

0 

1 

0 

0 

1 





















0 

0 

0 

0 

0 

0 

0 

0 

0 






















l 

0 

0 

1 

0 

0 

1 

0 























0 

0 

0 

0 

0 

0 

0 
























1 

0 

0 

1 

0 

0 

























0 

0 

0 

0 

0 


























I 

0 

0 

1 



























0 

0 

0 




























\ 

0 





























0 

] 0 

1 

\ 

I 

l 

2 

1 

2 

2 

2 

2 

3 

2 

3 

3 

3 

3 

4 

3 

4 

4 

4 

4 

5 

4 

5 

5 

5 

5 


We can find two type of modules here, one is: 

10 0 10 0 

0 0 0 0 0 

10 0 1 

0 0 0 

1 0 
0 


9 














This one is corresponding to the part3; 

The other one is: 

10 0 10 0 

0 0 0 0 0 0 

0 0 1 0 0 1 

0 0 0 0 0 0 

0 10 0 10 

0 0 0 0 0 0 

This one is corresponding to the parti part2 and so on, we can accumulate every line of this module, the 
result is always I, which is the previous conclusion we draw for part l. 

Ignore the carry, assume that c k is the kth digit of the product, we can find that c i+ , — c k +1 


Now let’s continue to get the result: 

101111 212222 323333 434444 545555 656666 767777 878888 989999... 

101111 212222 323333 434444 001111 212222 323333 434444 001111... 

100100100...xioioio... 

=1011112122223233334344440 

Conclusion: In multiplication, the length of periodic part of the product is: 

LCM(m,n)x(p -1), (2) 

where m and n are the length of periodic part of the two multipliers, p is the prime. 

The length of periodicity of the resulting p-adic sequence can be very large from (2). But if we should 
represent all the p-adic sequences with a complete period during all the calculations, we will definitely 
carry out all the arithmetic operations exactly. 

4. Computational Algorithm and Software for Generating P-adic Cyclic Codes 

A.R.Calderbank and N.J.A. Sloane [2] "Modular and p-adic cyclic codes ", studied how to lift from binary 
cyclic Hamming code of length 7 to octacode, which is equivalent to the binary nonlinear 

Mordstrom-Robinson code, and provided a general structure of cyclic codes over Z 6 , Z\ b .then to the 

2-adic integers Z : °o. That is to say, all the cyclic codes share a common generator polynomial X 1 + x : + 
(Jt-l)x - 1 , which satisfies X 1 - X + 2 = 0, X is a 2-adic number. 

The purpose of our study is to provide an alternative solution to generate the p-adic cyclic codes, which can 
be implemented efficiently using computer science methodology, and we developed software to generate 
p-adic cyclic codes. 

Theoretical Background 


10 



According to the definition of cyclic code, a subset S of Z q n is cyclic if (a n .|,ao,ai.£^ 2)6 S whenever 

(a 0 ,a, ! ...,a fl . 2 ,a n .|) e S. A linear code C is called a cyclic code if C is a cyclic set. 

We also know that, R = Z q [X]/(X n -1) forms a polynomial ring. By defining the following map between Z q n 
and Z,[X]/(X"-!), 

it: Z q " Z„[X]/(XM), (ao.a,.a,.,) |-> ao+a^x+..,+a fl . 1 x n • , (3) 

We can set up a one to one correspondence between an element of space Z q n and an element polynomial of 
ring Zq[X]/{XM). 

Connect ideals of ring Z q [X]/(X n -l) and cyclic codes contained in Z q n by the following theorem; 

Theorem 1 Let ti be the linear map defined in (3). Then a nonempty subset C of Z q n is a cyclic code if and 
only if n(C) is an ideal of Zq[X1/(XM). (Proof in [4], p.136). 

For the convenience of our discussion, we give the following definition of the generator polynomial of a 
cyclic code. 

Definition 1 The unique monic polynomial of the least degree of a nonzero ideal / of Zq[X]/(X n -l) is called 
the generator polynomial of /. For a cyclic code C, the generator polynomial of tt(C) is also called the 
generator polynomial of C 

By using this definition, we can set up an one-to-one correspondence between the cyclic codes in Z q " and 
the monic divisors of XM e Z q [x], 

To be precise, each monic divisor of is a generator polynomial of a cyclic code in Z q 

For example, by factorizing the polynomial x 6 - l e Z 2 [x]: 

X 6 - 1 =(! +x) 2 (l + x + x 2 ) 2 

We can list all the monic divisors of x 6 - 1: 

1 , I+x, l+x + x\ 

(1+x) 2 , (I +x)(l + x + x 2 ), (1 + x) 2 (l +X + X 2 ), 

(1+x + x 2 ) 2 , (1+x)(l +X + X 2 ) 2 , l+x 6 . 

These nine monic divisors are related to nine ideals of ring Z}[x]/^-l, and thus related to nine cyclic codes 
of length 6 . Based on the map ?i, we can generate all these cyclic codes. 

For instance, we can get the cyclic code corresponding to the polynomial (I + x + x')' as its generator by 
the following way: 

Step I. Expand the generator polynomial, (1 + x + x 2 ) 2 = I + x 2 + x 4 . 

Step 2. Multiply the generator polynomial with all the polynomials within the ring Z^xJ/X 6 -!, and get the 
following ideal /. 

{0, I + x 2 + X 4 , X + x 3 + X s , I + X + x 2 + x 3 + X 4 + X s }. 

Step 3. Using map n, we get the corresponding cyclic code: 

{000000, 101010,010101, 111111}. 


11 


In general, we denote [n.k,dj to describe a linear code and naturally a cyclic code, where n is the length of 
the codeword, k is the number of the base vectors, and d is the least distance between any two code words. 

The following theorem can relate [n.k.d] of a cyclic code to the features of the generator polynomial of an 
ideal I of ring Z q [X]/(X-i). 

Theorem 2 Letgfx) be the generator polynomial of an ideal of 2 q [X])(X'-l). Then the corresponding cyclic 
code has dimension k if the degree of g(x) is n-k, and the length of the codeword is n. 

In the above example, the generator polynomial is g(x) = / + + x 4 , and n = 6, k = 6-4 =2. 

This relates to a [6.2,3] cyclic code. The length of the codeword is 6, and this cyclic code will have 2 k = 2 2 
= 4 code words. 

The following theorem decides the number of cyclic codes: 

Theorem 3 Let x" -1 e Z q [x] have the factorization 

r 

x B -1 =n Pj d <x), 

i=l 

where pi(x). p 2 (x),.... p/x) are distinct monic irreducible polynomials and e, £ 1 for all i = 1.2, . r. Then 

there are 17, ,] (e,+i) cyclic codes of length n overZ,. 

The key point of finding all the cyclic codes over Z” is the factorization of X'-i over Z q . We will discuss 
our method to factorize the polynomial X'-l over Z H . 

Mechanism to Generate/>-adic Cyclic Codes 

The idea of generating p- adic cyclic codes is given by the following theorem : 

Theorem 4 Let q = p a . I £a<oo. lfg,(x) e Z p [x] is a monic irreducible divisor of x”-l over Z p , then there 
is a unique monic irreducible polynomial g„(x) e Z q [x] which divides x n -l over Z q and is congruent to gi(x) 
mod p. 

The complete proof can be found in [2], If we define a cyclic code of length n over Z r , we can get another 
cyclic code of Z pl whose generator polynomial is obtained by lifting the generator polynomial of the first 
cyclic code to Z p2 . And then we can continue this way to get the cyclic code over where ! <a <x 

An Alternative Algorithm for the Generation ofp-adic Cyclic Codes 
Our algorithm has two steps: 

a) Factorization of X'-l over Z 2 ; 

b) Lifting the generator polynomial over Z 2 r and then to Z 2 r+i. 

Step a) is the foundation of our implementation. In order to simplify our situation, we will let n be a prime, 
which has the form 8m-1, so that X-l can always be factorized over Z 2 in the following form; 

x n -l =(x- l)x t (x)ft 2 (x) 

where all the factors are irreducible. 


12 



Factorization of A"-/ over Z 2 
Since 

x n -l =(x- l)ni(x)n 2 (x) 
jii(x) = ao + a]X + a 2 x 2 + ... + an.^x"' 1 ' 2 
Jt 2 (x) = b 0 + b|X + b 2 x 2 + ... + b n .t/ix"‘ l,: 


a„ b, e Z 2 (0 < i < n-I/2 ), 

So 

x n -1 =(x- 1)( I + x + x 2 + ... + x"'’) = =(x- 1)JI,(x)7I 2 (x) 


Let 


aob 0 = 1 (mod 2), 
aob| + a|b 0 = I (mod 2), 


aob„.i/ 2 + aib(n-i/i>.) + ... + a^i^bo - 1 (mod 2), 
a|b„.i /2 + ajb (n .|/ 2 ).i + ... + an-i/ 2 bi = 1 (mod 2), 


an.i/jbn .,/2 = 1 (mod 2). 

And the vector (aO,al,..„an-l/2,bO,bl,...,bn-l/2) which satisfies all the equations above will be the 
coefficients of irreducible polynomials Jt t (x) and x 2 (x). 

Therefore, it is easy for computers to enumerate from (0,0,0,...,0) to (1,1,1.1); and because x"-l has the 

unique factorization, so the computer can stop wherever it finds a solution. 

Lifting the Generator Polynomial over Z 2 r to Z^r+l 

From theorem 1, we know that for every monic irreducible divisor h,(x) of A"-/ over Z p , there is a unique 
monic irreducible polynomial in Z^xJ which divides A"-/ over Zp, and is congruent to h,(x) mod p. Let 

x"-l = (x- l)7i,(x)7t3(x); 

Assume 

ttj(x) “ f 2 1 (x), 7 t 2 (x) = g 2 !(x); 


Let 


f : 2(x) = f 2 l(x) + 2*{c 0 + c t x + ... + c n . IQ x n ' l/2 ), 


gj2(x) = g 2 l(x) + 2*(do + d,x + ... + d„. l / 2 x n ' ia ). 


0 < ci, di < 1,0 5 i £ n*l/2. 


We have 


f 2 2(x) = f 2 1 (x) (mod 2), g>2(x) a g 2 l(x) (mod 2). 


Let 


13 



fj2(x) = c’d + c’,x + ... + c , n .iaX B ' l,2 1 
gj2(x) = d’ 0 + d']X + ... + d’n.i/jx'" 12 . 

Again, we can use computer to enumerate vector (Co,C|,...,c n .|/ 2 ,do,d[,...,d n .|,i) from (0,0,...,0) to {1.1,..., I > to 
find a value which can satisfy the following equation group: 

c’nd’o = 1 (mod 2 2 ), 
c’od’i + c’|d’o= I (mod 2 2 ), 

t- od’n-t/ 2 + c'id’(„.|/ 2 ).| + ... + c’n.i.id’g = 1 (mod 2"), 
c’id’n.i .2 + C ':d'( n .|/ 2 >| + ... + cVt/jd’i = 1 (mod 2~), 

cVi/ 2 d 5 n -u 2 = 1 (mod 2 ! ). 

The solution will be the unique factorization of x"-I over 2‘, and after getting/:.if.*) and g } 2(x), we can 
continue this step to get fja(x) and g 2 a(x), ( 2 < a < o° ). 

Software 

The following are some screenshots, which can demonstrate our programs: 



Figure 4 is the screenshot when p = 2. n = 7, r = 8; p should be a prime number, n should be a prime 
number which has the form 8m-1, r could be any integer larger than zero. We can find that it has the same 
result as in A.R.Calderbank's paper. 


14 








c * C:\Docuftien1s and SetMng3\himter\My Document&Whiifll StiiUin ProJectsVlhesisVleteaseMhe.,, HE3B 


Command>>1 

Input prime number p ae > 2 

Input the dei/rett of polynomial X A n-l V 

Input tl m powef to uhich the polynomial X A n-l he lifted ”> 8 

jp - 2 P n * 7, i 4 3 8 

Got one solution!!? 

The value of xl M I mod 2 ist 1 + 1 k a 2 + lx A 3 
The value of *2141 mod 2 is: 1 + ix A l + lx A 3 


Cot one solution!?! 

[Ihe value of x!141 mod 4 is; 

[The value of x2141 nod 4 is: 

Col one solution?!? 

The value of xll41 nod 8 is: 

The value of x2!4) mod 8 is: 


- l * 2x a 1 - lx A 2 + lx A 3 
* 1 # lx A l * 2x A 2 * lx A 3 


- 1 * 2x A l + 3x A 2 + lx A 3 

- 1 - 3x A i - 2x A 2 + ix A 3 


k]ot one solution!tt 

The value of xlMl nod 18 is: - 1 — 8x l -* 5x 2 + lx 3 
The value of x2141 nod 16 is: - 1 * 5x A l * 6x A 2 + lx A 3 


Got one solution!!? 

The value of xil4l nod 32 is: 

The value of x2f4l nod 32 is: 

Got one solution!?! 

The value of xl 141 mod 64 is: 

The value of x2!41 mod 64 is: 

Got one solution!!? 

The value of xl(41 nod 128 is 

Tlie value of x2 (41 mod 128 is 

Got one solution!!! 

The value of xl141 nod 256 is 

[fhe value of x2l41 nod 256 is 


1 - 6x A l - Sx A 2 + ix A 3 
1 * 5x A l * 6x A 2 + ix A 3 


1 + 26>T1 + 27x A 2 + lx A 3 
t - 27x A l - 26x A 2 + lx A 3 


1 - 38x A l - 37* A 2 + lx A 3 
1 + 37x A l + 38x A 2 + lx A 3 


1 * 9llx A l * 91x A 2 * lx A 3 
1 - Vlx^i - 90x~2 ♦ lx A 3 


Figure 4. Output When p = 2, n = 7, r = 8 
Figure 5 is the screenshot when p = 3, n = l J, r = 8: 






Figure 6 is the screenshot when p = 2, n = 23, r - 8: 









kjat one solutioitfff 

frhc «.>lu<T »r »1 ri21 nod 256 i=: 1 * 2Zx*l • 25x'2 . 4x~3 ~ 19x~d - 13x"5 - 47x‘G - 2f.x*7 - 4**8 • 2flx“9 • 23x“18 • Ix''ll 
[tlit «ol«e of x2f 121 nod 2S6 is: 1 - 23x'*l - 2fix*2 - 4x~3 ■ 2tx'4 ♦ -i7x^ * ISn't • 19x~? - 4x~8 - 25x*9 - 22x*10 * lx^ll 


C C Q 
* it - 
~ ~ ft 
' f 
rt c* v. 
P 

P P i- 

■*» -*» £ 

X X H- 

to *- o 

*- f* = 


3 § 

u. a. 


tC EC 
CC X 


€ C P 

& & P 

I— l-J fl 

ff P 
P fl 11 
0 

C 0 r- 


X X H* 
M ** Q 

r-t ft P 


£ 1 

& & 

CS ps 

A 


cco 

IP P 3 

—» —* ff 

fl » 

o 

3 3 l- 

"> £ 

rt 

XX*. 

jo -t © 

^ ^ 3 


i 3 

p* a. 

u> to 
fO SO 


P c c 

£ P s- 

ET ET 15 

a n » 

o 

© c i— 
i ^ E 

11 S 

p—» — 

►* H ■* 

tO fO 

w t-i ** 

8 2 

Co & 


H* H* 

» t: 
I* H 


© © O 
fr P P 

«J i-i « 

£ £ 

0 O rt 
3 

G □ — 


X X 
IO •** 3 
ft 3 


§ £ 

a. a. 


c « c 

p 2 

f ^ n 
ST £ 

9 H « 

C 

P O *- 
■*> £ 

f ft 2 

b* b* ■*• 

M IC "* 


3 £ 

a t* 


e c 3 

P & 3 

M M 9 

s c 

(I .-I 11 
□ 

G O P-i 
■*i *** £ 

IT 

XX**- 

1C ~ 0 

ft ft © 


1 3 

3. Q. 


□ PS 

B 11 I 

is} rt rt rt 


rt n t & 

ft 3- v 

3 


ET St 


■3 $» 

FJ O H 
40 S <£ S 
» f* T £ 
*i ce 3 

hoot 


►**1 It 
n m n 

^ 3 ^ 
rt © EC 

I l 


1* I* 

1 1 

1 i 

1 1 

* 1 

1 t 

4* 4* 

5 

rt* X 

J f 




4* 44 

>4 4* 

* * 

1 ^ 


rt* ►* 

• rt* M- 

h» H 




f-h M 

1 * 

4 1 

1 4 

4 1 

4 4 

4* rt* 

X X 

P 1 

3 4* 

1 + 




4* tS> 

** ESS 

> 4 

M> 


to to 

O! — 

-0 O' 

K 

x > x . 

4- tO 

fin M 

(C TO 

Ur N 

x d 

X X 

> > 


rt* U 

W tv 

X X 

> X 

> > 

44 44 

4* H 

4 * 

V 

X X 

> ? 

<-* > 

1— ►* 




5C 

} > 

V* ►* 

1 4 

P* 

4 

| 

1 t 

4 4 

A ** 

4 4 

EO 44 

|rt *— 

X X 
> > 

> M 
P 40 

1 

1 + 


H 

4k S3 

X X 

X X 

m oi 

4* 


to to 

SO -0 

X X 

> > 

> > 


ir 

rt* 

to EO 

d in 

X x t 

> 

to to 

A to 

4 4 

s tn 

X X 
v > 

to to 


ISJ to 

4 4 

4 4 

t 4 

1-* 4* 

X X 

to to 


4 4 

*tk «x 

A A 

X X 

4* 

X X 

> > 
oi m 

IP 

rti 

+ + 

*4 Js 

A ^ 

X X 

X X 
> > 

> > 
to to 

> > 
os Jt 

* + 

rt 

(1 

Ji Ov 

X X 

> > 

OJ w 




Pu 

X X 
> > 
w w 

» > 
w w 

u> u 

( 4 

1 1 

4 1 

(S3 tO 

I 4 

h~ 44 

4* 4* 

X X 
> > 

4 

4 

* I 


Os Ul 

X X 

X X 

CS 

V 

4 1 


©S 1-t 

X X 

> > 

> > 




to ►* 

X w 

> * 

fX .Sk 

ff* tn 

• * 

90 

EO — 


> X 

^ -3k 





Os sG 

M X 

Ok > 


I i 

) 4 

4* 4* 


x X 
> 

*i 

> > 

A *x 

tb 

4 

( 4 

4* tn 

4* 40 

X X 

►* H* 

X . X v 

X X 
» } 

■O 4* 



I * 


x X 

> } 


a 


4 1 


tfl *4 

* > 

lh tn 

si? 9 s 

* 



1* SO 

X 

tn tn 



+ 


< LC 

X X 

S3 £- 
x X 
} > 

> X 

1 • 

4 4 

Ul ►* 

1 4 

4* tO 

4* 

X ►* 

4 X 


<A tn 

(/I LTS 

4 t 

W H 

X X 

X X 
> > 

X X 
> > 

4* > 

M 4-* 


i 4 


> > 

os PS 

to S3 

H- 


4 1 

10 ►* 

-*■ rtt 

x tn 

P' CS 

4 I 

4 1 



a a 

uJ *0 

p* S3 

X X 

> X 
os > 

4 4 

U SO 

tO H 



X x 

> > 

o> 

to cs 

X X 

X X 



> > 

C* cs 

i 

X X 

> } 

> > 



ers O' 

4 1 

4 

44 


s3 < 

M 4* 

s cc 



4 \ 

H tO 

U> OS 

X X 

t 1 

4 4 

4 *4 



M tO 

O ST' 

> % 


<1 -X 




^3 

X X 

sa < 

A A 

x X 

4* 4* 



X x 

J > 


X X 

* > 

X x 



4 J 

S3 ^ 

1 t 

> > 

CC os 

co m 

> ) 

Irt 4* 




1 1 

41 41 


I + 

M. 4* 





Figure 6. Output When p = 2. n = 23, r ft 


17 


a C:\Documents and SettiitRsVJUiritef Wy OocomentsWKual Studfo Pro jet: is \1hesis\Re lease Vi be% H.exe 




The main function of our software is the factorization of polynomial ofX'-l. From the coding theory, we 
know that cyclic codes have many good characteristics for error-correction and cryptography. It may have 
some merit to investigate the p -adic cyclic codes. In this study, by setting up a one-to-one correspondence 
between cyclic codes and ideals of a polynomials ring, we can use algebraic methods to explore the 
features of /?-adic cyclic codes. 

In the future, we may use this software as a tool to study the features of p -adic cyclic codes, and/or use the 
software to auto-generate cyclic codes in any application. 

References 

[1] Dixon, J. “Exact Solution of Linear Equations Using P-adic Expansions”, Numerische Mathematik 40, 
137-141 (1982) Springer-Verlag. 

[2] A.R.Calderbank and N.J.A.Sloane, “Modular and p-adic cyclic codes", arXiv:CO/0311319vl, 18 Nov 2003. 

[3] Shoup, V NTL library at: http://shoup.net/ntl/ 

[4] San Ling and Chaoping Xing, “Coding Theory: a first course”, Cambridge University Press. 2004 

[5] Komerup, P. and Gregory, R.T. “Mapping Integers and Hensel Codes onto Farey Fractions", BIT 23 (1983), 
9-20. 

[6] Krishnamurthy, F. V. “Matrix Processors Using P-adic Arithmetic for Exact Linear Computations”, IEEE 
Transactions on Computers, vol. C-26, No. 7, July 1977. 

[7] Vladimirov, V.S., Volovich, l.V. and Zelenov, E.I. P-adic Analysis and Mathematical Physics, Series on 
Soviet & East European Mathematics - Vol. 1.World Scientific 1993. 

[8] Lu, C. and An, M. “Final Report of Simulation of Quantum Time-Frequency Transform Algorithms”, 
(FA9550-04-1-0406), 2004. 

[9] Lu, C. and An, M. “Final Report of A Computational Library Using /’-adic Arithmetic for Exact Computation 
with Rational Numbers in Quantum Computing”, (FA9550-05-1-0363), 2005, 


18 



