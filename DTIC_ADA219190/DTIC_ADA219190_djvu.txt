Technical Report 
CMU/SEI-89-TR-5 
ESD-TR-89-! 005 






Technical Report 
CMU/SEI-89-TR-5 
ESD-TR-89- 005 
February 1989 


An Object-Oriented Solution Example: 
A Flight Simulator Electrical System 


Kenneth J. Lee 
Michael S. Rissman 

Domain Specific Software Architectures Project 


Approved for public release. 
Distribution unlimited. 


Software Engineering Institute 

Carnegie Mellon University 
Pittsburgh, Pennsylvania 15213 










This report was prepared for the 


SEI Joint Program Office 
ESD/AVS 

Hanscom APB. MA 01731 

The ideas and findings in this report should not be construed as an official DoD position. It is pub* 
lished in the interest of scientific and technical information exchange. 


Review and Approval 

This report has been reviewed and is approved for publication. 

FOR THE COMMANDER 



Karl Shingler 

SEI Joint Program Office 


This work is sponsored by the U.S. Department of Defense. 
Copyright © 1989 Carnegie Mellon University 


This document is available through the Defense Technical Information Center. DTTC provides access to and transfer of scientific and 
technical information for DoD personnel. DoD contractors and potential contractors, and other U.S. Government agency personnel 
and their contractors. To obtain a copy, please contact DTIC directly: Defense Technical Information Center. Attn: FDRA, Cameron 
Station, Alexandria, VA 22304-6145. 

Copies of this document are also available through the National Technical Information Service. For information on ordering, please 
contact NT1S directly: National Technical Information Service, U.S. Department of Commerce, Springfield. VA 22161 


Use of any trademarks in this report is not intended in any way to infringe on the rights of the trademark holder 



Table of Contents 


1. An Aircraft Electrical System 1 

1.1 Overview 1 

1.2 The DC Power System 2 

1.2.1 Sources - TRUs 2 

1.2.2 Passive Components - Circuit Breakers 2 

1.2.3 Wires - Buses 4 

2. An Object-Oriented Solution 5 

2.1 Introduction 5 

2.2 A Design Specification 6 

2.3 Connections 8 

2.3.1 System-Level Connections 8 

2.3.2 Executive-Level Connections 8 

2.4 Objects and Aggregates 9 

3. Objects 11 

3.1 Introduction 11 

3.2 Global Types 12 

3.3 The Circuit Breaker Object Manager 14 

3.4 Other Objects 21 

3.4.1 Bus_Object_Manager 21 

3.4.2 TRU_Object_Manager 21 

4. Connections, Systems, and Executives 23 

4.1 DC Power System Aggregate 23 

4.2 DC Power System and Its Connections 24 

4.3 DC Power System Software Architecture 27 

4.4 Flight Executive and Its Connections 28 

4.5 Flight Executive Software Architecture 30 

4.6 Overall Software Architecture 32 

References 35 

Appendix A. Electrical Concepts 37 

Appendix B. Software Architecture Notation 39 

Appendix C. Object Manager Template 43 


CMU/SEI-89-TR-5 I 









Appendix D. DC Power System Ada Code 63 

D.1 Package Electrical_Units 64 

D.2 Package Global_Types 66 

D.3 Package Flight_System_Names 67 

D.4 Package Cb_Object_Manager 68 

D.5 Package Body Cb_Object_Manager 73 

D.6 Package Tru_Object_Manager 82 

D.7 Package Body Tru_Object_Manager 86 

D.8 Package Bus_Object_Manager 93 

D.9 Package Body Bus_Object_Manager 97 

D.10 Package Dc_Power_System_Aggregate 107 

D.11 Package Dummy_System_Aggregate 113 

D.12 Package Ac_Power_System_Aggregate 115 

D.13 Package Cb_Linkage_lnterface 117 

D.14 Package Body Cb_Linkage_lnterface 119 

D.15 Package Dc_Power_System 123 

D.16 Package Body Dc_Power_System 125 

D. 17 Package Flight_Executive 143 

D.18 Package Body Flight_Executive 144 

D.19 Package Body Flight_Executive_Connections 150 

D.20 Procedure Main - Test Driver 160 


II 


CMU/SEI-89-TR-5 



List of Figures 


Figure 1: DC Power Circuit Diagram 3 

Figure 2: DC Power Design Specification 7 

Figure 3: Package ElectricaMJntts 13 

Figure 4: Cb_Object_Manager Package Specification 15 

Figure 5: CB_Object_Manager Package Body 17 

Figure 6: Alternative Cb_Representation 19 

Figure 7: Alternative Give_Power_info_To Procedure 19 

Figure 8: Alternative Give_Positfc>n_To Procedure 20 

Figure 9: Alternative Get_Power_From Function 20 

Figure 10: DC Power System Aggregate Package Fragment 23 

Figure 11: Connection Data Structure 24 

Figure 12: System Update Routine 25 

Figure 13: Connection Processing Routine 26 

Figure 14: System-Level Software Architecture 27 

Figure 15: Executive Schedule Table 28 

Figure 16: Update_Fiight_Executive Procedure 29 

Figure 17: Executive-Level Software Architecture 30 

Figure 18: Executive-Connection-Levei Software Architecture 31 

Figure 19: Overall Software Architecture 32 

Figure 20: Object, Subsystem, and Dependency Notation 40 

Figure 21: Package Notation 41 

Figure 22: Subprogram Notation 42 


CMU/SEI-89-TR-5 iii 












CMU/SEI-89-TR-5 



Preface 


This report describes an implementation of a subset ot an aircraft flight simulator electrical system. It 
is a result of work on the Ada Simulator Validation Program (ASVP) carried out by members of the 
technical staff (MTS) at the Software Engineering Institute (SEI). The MTS developed a paradigm for 
describing and implementing flight simulator systems in general.’ The paradigm is a model for imple¬ 
menting systems of objects. The objects are described in a form of design specification called an 
object diagram. The first report on this paradigm [3] defined package specifications, but not bodies, 
for an engine system. This report has been prepared to demonstrate a full implementation of a sys¬ 
tem: package specifications and bodies. The intent is to provide an example: the code is functional, 
but there is no assurance of robustness. 

Chapter 1 presents the characteristics of an aircraft electrical system and focuses on the direct cur¬ 
rent (DC) system. Chapter 2 provides an overview of the solution by presenting the design specifica¬ 
tion and discussing the symbols used for its construction. Chapter 3 details the implementation of the 
objects, the focus for this report, in the DC power system example. Chapter 4 describes the imple¬ 
mentation of the software, which allows construction of a system from a collection of objects, i.e., the 
connections, systems, and executives The last part of the chapter explains the overall software ar¬ 
chitecture and the relationships between the DC system and the other systems in the simulator. 

Appendix A defines the electrical concepts used in the report. Appendix B explains the software ar¬ 
chitecture diagram notation. Appendix C shows an example of a code template for object managers 
Appendix D contains a complete listing of the Ada code for this example. 


1 A full description can be found in the SEI Technical Report An OOD Paradigm for Flight Simulators, 2nd Edition, see 

13] 


CMU/SEI-89-TR-5 


v 











Vi 


CMU/SEI-89-TR-5 



Abstract 


This report describes an implementation of a subset of an aircraft flight simulator electrical system. It 
is a result of work on the Ada Simulator Validation Program (ASVP) carried out by members of the 
technical staff (MTS) at the Software Engineering Institute (SEI). The MTS developed a paradigm for 
describing and implementing flight simulator systems in general. The paradigm is a model for imple¬ 
menting systems of objects. The objects are described in a form of design specification called an 
object diagram. This report has been prepared to demonstrate a full implementation of a system: 
package specifications and bodies. The intent is to provide an example; the code is functional, but 
there is no assurance of robustness 


1. An Aircraft Electrical System 


This chapter sets the context for the report by presenting the characteristics of an aircraft electrical 
system and focusing on the direct current (DC) system. 

1.1 Overview 

Electrical power is generated from aircraft engines by a drive shaft connected to generators. In one of 
the aircraft observed by the MTS, there are two generators attached to each aircraft engine. Each 
generator produces a constant 28 volts. 

The electrical system is used to provide electrical power to devices in other systems, such as fuel 
pumps and valves in the fuel system, hydraulic pumps in the hydraulic system, and air conditioning in 
the environmental control system. The devices in the systems are able to function only if power is 
available. They, in turn, put their toad, i.e., the amount of current they require, back onto the electrical 
system. The toad is transferred back to the generators, along the electrical system buses, where a 
determination of possible overloading takes place. In this report, an assumption is that the genera¬ 
tors in the electrical system and the toad consumption devices in other systems are the ground points. 

The electrical system on many aircraft can be divided into four systems; DC power, alternating cur¬ 
rent (AC) power, emergency power, and ground power. The AC power system consists of the gen¬ 
erators, driven by the engines, and several AC power buses. It is connected to the other three electri¬ 
cal systems via relays and circuit breakers. The DC power system consists of transformer rectifier 
units (TRUs), which convert AC power to DC power, and several DC power buses. DC power is also 
connected to the emergency power system. The emergency power system is connected to both the 
AC and the DC systems. It has battery charging, storage, and power conversion capability between 
AC and DC. The ground power system connects the AC power system to ground control when the 
aircraft is parked. It is used for starting the engines and providing power during ground operations. 

There are several components common to all the systems, e.g., buses and circuit breakers. In addi¬ 
tion, each system has some unique components. The DC power system has TRUs, which convert 


CMU/SEI-69-TR-5 


1 










incoming AC power into DC power. The emergency power system has relays, batteries, an inverter 
for converting DC power into AC power, lights, and switches. The ground power system has relays, 
bus power control units, and power contactors 

1.2 The DC Power System 

The example used in the rest of this report is a generalized view; it was synthesized from experience 
with several simulator projects. Some projects had systems more complex than this example, some 
less complex. DC power was chosen because it is intermediate in complexity among the four electri¬ 
cal systems. AC power is generally simpler. Emergency power is usually more complex. DC power 
provides enough detail to demonstrate the advantages of the paradigmatic approach. 

The DC power system provides voltage to any device driven by a direct current source. DC voltage is 
generated from AC system voltage by six TRUs, see Figure 1. The six TRUs are powered by six AC 
power buses. TRUs 1,2, and 3 are connected to the three main DC buses. The three main buses are 
connected together by Tie Bus 1. A tie bus maintains power to the main DC buses in the event of a 
failure in a TRU or an AC bus. TRUs 4, 5, and 6 are connected at Tie Bus 2. The two tie buses are 
connected through circuit breaker Cb_TB_1.2. 

There are a total of ten DC power buses, in this example. The power output of the three main DC 
buses is divided between six DC power buses. Tie Bus 1 provides power to one DC power bus and 
Tie Bus 2 provides power to three DC power buses. These ten buses typically provide power to nearly 
300 devices in the actual aircraft. 

1.2.1 Sources-TRUs 

A rectifier is a component for converting alternating current into direct current. In this example, the 
TRUs are considered the source of voltage and current for the DC power system. The system has no 
knowledge of any other external source of power. 

The software TRUs represent components that exist in the real aircraft. The TRUs are not part of the 
aircraft simulator hardware; they are completely simulated in software. The TRUs have a load con¬ 
version factor (LCF) which represents the effectiveness of the conversion from AC to DC. For the 
purposes of this example, the load conversion factors of all the TRUs are considered to be equivalent. 
The TRUs also are active components which add some load to the AC buses. 

1.2.2 Passive Components - Circuit Breakers 

A circuit breaker is a switch that automatically interrupts an electrical circuit under abnormal condi¬ 
tions, usually current overloading. An assumption of this example is that passive components are 
ideal, i.e., there is no loss of current through a component due to the impedance of the component. 

The circuit breakers model hardware components in the simulator cockpit. The instructor, at the In¬ 
structor Operator Station (IOS), has the option to trip a circuit breaker. When the instructor trips a 
breaker, the effect is transferred through a buffer to the simulator hardware where the breaker 
changes its physical position. The changed position is detected and stored in the software linkage 
buffer. During the update of the software system the software circuit breaker position is updated to 
reflect the state in the linkage buffer. 


2 


CMU/SEI-89-TR-5 




Figure 1: DC Power Circuit Diagram 


CMU/SEI-89-TR-5 


3 








































Current ratings are defined for each circuit breaker The only software generated circuit breakerfault, 
in this implementation, is an electrical short. In the event of an overload condition, specified by the 
instructor, a circuit breaker will trip, interrupting the flow of current. 

1.2.3 Wires - Buses 

Wires, called buses, connect all components in electrical systems. In this example, there is a bus 
between all other connected components. 

Information flows through the components and along the buses. The software implementation of the 
buses imple ments Kirchoff’s current law and voltage law (see Appendix A). Each bus has a minimum 
of two connections to other components. 


4 


CMU/SEI-89-TR-5 



2. An Object-Oriented Solution 


This chapter provides an overview of the solution by presenting the design specification and discuss¬ 
ing the major symbols, e.g., objects and connections, used for its construction. 


2.1 Introduction 

A design specification for a recurring problem is specified by an instantiation of the structural model 
forthat problemclass. A structural model is a graphic representation of a canonical solution to a prob¬ 
lem that recurs in an application. A structural model consists of a set of symbols and rules of composi¬ 
tion for the symbols. The model is a structural model because each symbol stands for a software 
template. Each instance of a symbol in the design specification is labeled to reflect the entity in the 
problem space it denotes. The labels are used to fill in engineering points in the templates corre¬ 
sponding to the symbols. Often the template for a symbol will be affected by labels on adjacent sym¬ 
bols and by labels of nested symbols. The design specification is implemented by effecting the map¬ 
ping between symbols and templates. Implementations, built by generating instances of the tem¬ 
plates, of a design specification to a recurring problem are then similar in structure, behavior, and 
functionality. 

The recurring problem addressed by this report is the description of aircraft systems in terms of ob¬ 
jects, connections, and control mechanisms. The systems may be part of one executive running on a 
single processor or several executives on several processors. 


CMU/SEI-89-TR-5 


5 















2.2 A Design Specification 

Figure 2 is the design specification for the DC power system described in this report. It is a represen¬ 
tation of the circuit diagram shown in Figure 1 } The design specification shows 

♦ The DC power system. 

♦ The AC power system, which is the voltage and current source for this example. 

♦ A dummy system which represents all the load devices in other systems. 

Each component, in Figure 1 (the TRUs, circuit breakers, and buses), is an object in Figure 2 and is 
represented as a rectangle. Arrows between the rectangles represent the connections between the 
objects. A double-headed arrow stands for two single-headed arrows, one arrow pointing in each 
direction. Two conventions are followed in this design specification: 

1. There is a bus object between every other pair of connected objects. 

2. Each connection has two, and only two, connection points; one on a bus object 
and one on another object. 

All other meanings of the symbols are equivalent to the meanings defined in [3]. The templates, 
which map between the symbols and the implementation, are also the same. The use of the tem¬ 
plates for this system will be discussed in Chapters 3 and 4. 

This solution models the flow of information directionally. Voltage and LCF flow from voltage sources, 
such as generators and batteries, through passive objects to voltage sinks, such as motors and lights. 
Load flows from the voltage sinks back to the voltage sources. Because of this directionality, objects, 
such as circuit breakers and TRUs, are defined with two sides. Each side contains the information 
flowing through the circuit to that point. The transfer of information through an object means: obtain 
the stored information from the opposite side of the object. This convention maintains the proper flow 
through the system. Bus objects, which may be connected to any number of other objects, have as 
many sides as they do connection points. 

The rest of this chapter briefly describes the connections and objects. 


2 The buses labeled DC_Maln_x in Figure 1 are labeled Main x in Figure 2. 

The buses labeled DC_Power_Bu#_x in Figure 1 are labeled DC x in Figure 2 


6 


CMU/SEI-89-TR-5 





Figure 2: DC Power Design Specification 


CMU/SEI-89-TR-5 


7 




























































































































2.3 Connections 


Connections are procedures which read the state ot one object and write that state to another object. 
In Figure 2 a connection is represented by an arrow. The convention is that the labeled information is 
read from the object at the tail of the arrow and written to the object at the head of the arrow. For 
example, voltage, V, and LCF are read from AC power system bus objects and written to the TRUs in 
the DC power system. Current, I, is read from each TRU and written to the AC power system buses. 

Connections are classified as either executive or system level connections. Executive level connec¬ 
tions are those between systems, such as the connections between the AC power system and the DC 
power system. System level connections are those between objects within a system. 

2.3.1 System-Level Connections 

System level connections read state information from an object in the system and write the informa¬ 
tion to another object in the system. The connections are owned by the system. When the system is 
called to update itself, all the system level connections are gated; when complete, the system is con¬ 
sidered to be updated. 3 Section 4.2 discusses the details of the implementation of the system con¬ 
nections. 

Each system level connection, in Figure 2, has two connection points, one to a bus object and one to 
another object. Thus, even though Figure 2 may appear to have one connection between TRUs 4,5, 
6, and Tie Bus 2, the arrow represents three separate connections, one from each TRU to the tie bus. 

2.3.2 Executive-Level Connections 

Executive level connections read state information from an object in one system and write the infor¬ 
mation to an object in another system. In this example, the connections are owned by the flight execu¬ 
tive. When the DC power system is updated, the flight executive connections to the system are gated, 
then the system is called to update itself. Section 4.4 details the implementation of the executive con¬ 
nections. 

The DC power system has connections to AC power buses in the AC power system, which are fully 
implemented in this example, connections to sink devices in other systems, which are implemented 
as connections to objects in the dummy system, and connections to objects in the emergency power 
system, which are not part of this implementation. The ten DC power buses, which provide DC power 
to the rest of the simulator, represent all the DC buses. The connections to the dummy system ob¬ 
jects, however, only represent ten of the hundreds of connections to actual devices that are part of a 
full simulator implementation. Each DC power bus would normally have dozens of connections to it, 
one from each device in the other systems. 


5 Some connections may need to be gated more than once dunng each system update to guarantee that the system is 
consistent, see Section 4 2 


8 


CMU/SEI-89-TR-5 




2.4 Objects and Aggregates 

Objects correspond to real-world entities, e.g , buses, circuit breakers, TRUs, batteries, relays, lights, 
switches, etc. 

Some of the objects in the electrical systems are represented by physical components in the simula¬ 
tor cockpit as well as by software. Examples are lights, circuit breakers, and switches. A linkage 
buffer is available for storing the physical component state so the state is available for transfer be¬ 
tween the cockpit and the software representation. 

The otherobjects model physical components, but are only represented in software, e.g., TRUs and 
generators don’t exist in the simulator cockpit. 

Each object is represented by an object manager. There is a single object manager for all instances 
of the object. 4 The object manager def ines the attributes of the object. The attributes are invariant 
characteristics defined at elaboration, e.g., a current rating of a circuit breaker. 

The object manager defines the operational state of the object. The operational state refers to those 
characteristics which may change with time, e.g., the degree of charging or discharging of a battery, 
the setting of a switch, malfunctions, or aging effects on various components. 

The object manager allows the object’s environmental effects to be placed on the object. The envi¬ 
ronmental effects are external object states which are required by the object to determine its state. 

The object manager implements the math model for the object. The math model is implementation 
dependent. The object managers use the math models to map the object's inputs to its outputs. The 
object manager produces the outputs available from the object. The outputs are generated by the 
math model, using the environmental effects placed on the object and any additional constraints im¬ 
posed by the attributes and the operational state of the object. The math model may be invoked when 
environmental effects are placed on the object or when outputs are read from the object. This is an 
implementation level decision left to the system designer; it is not defined by the paradigm. 

The actual instances of the objects are stored in system aggregates. An aggregate allows named 
access to the objects in a system; no procedure call is required to retrieve the object. The aggregate 
is not denoted on design specifications, but is an essential part of the implementation of a system and 
its objects. 

The flight executive queries the DC power system's objects directly, using the DC power system ag¬ 
gregate, to obtain state information needed for input to other systems. The executive also queries the 
other systems to get the environmental effects and operational state required by the DC power sys¬ 
tem. The information is then written directly to the DC power system’s objects. The DC power system 
uses its system aggregate to obtain state information needed for input to the other objects in the sys¬ 
tem. 


4 The term manager is used because all access to each object is administered through the interlace defined by the ob- 
ject manager 


CMU/SEI-89-TR-5 


9 






10 


CMU/SEI-89-TR-5 




3. Objects 


This chapter provides the details for the implementation of the objects, the focus for this report. The 
circuit breaker object manager will be discussed in detail. The bus and TRU object managers will be 
covered in less detail 

3.1 Introduction 

In the previous report [3], the implementation of the connections, systems, and executives was de¬ 
scribed in some detail; however, only the package specif ications of the objects were presented. The 
example in this report concentrates on the bodies of the objects. 

A structural model, as described in Chapter 2, consists of symbols and rules for their composition. 
Each kind of symbol has a software code template associated with it. The template abstracts the 
implementation of the symbol. An instance of a symbol is created by instantiating the template with 
the appropriate substitutions for the placeholders. Placeholders are replaceable snippets of code in 
templates which stand for Ada types, names, and values. There are two types of placeholders: 

1. The first is of the form {Object} or (Attribute), i.e., a phrase enclosed in brackets 
The entire phrase (including the brackets) must be replaced. For example, (Ob- 
ject)_Object_Managerbecomes TRU_Objecl_Manager for all instances of {Ob - 
ject}_Object_Manager in a file when (Object) is replaced by “TRU". 

2. The second form is the double question mark, ??. This form means that some 
special action must be taken by the user. For example, this form is used for those 
places in the code that the user needs to supply a function body, supply test 
cases, or remove some lines from the template, e.g., the instructions at the be¬ 
ginning of each template. 

Appendix C contains a code template for object managers. The template allows the production of 
object managers that are similar in appearance and documentation. Much of the documentation for 
the object manager is contained in the template and is filled in at the time the placeholders are re¬ 
placed. Some specific comments must be added to customize an instance of the template for a par- 
ticularobject manager. Also, the bodies of the procedures, which provide the mapping of the inputs to 
the outputs, must be supplied, since each object manager implements the math model for a different 
kind of object. A template also contains a test routine which allows some unit testing of the object 


CMU/SEI-89-TR-5 


11 










manager. The test routine is filled in during replacement of the placeholders and is ready to use once 
the object manager is compiled. 


3.2 Global Types 

The object managers, produced from the template, are only dependent on global types. For the DC 
power system, the global types package is called Electrlcal_Unlts (Figure 3). 

The package ElectrlcalJJnlts provides the voltage, current, and LCF definitions. It also declares 
common constant values for those types. Voltage is an enumerated type. Current and LCF are real 
values. 

The aggregate record, Powerjnfo, contains components for voltage, current, and LCF. Powerjnfo 
is used in most object processing routines for accessing the electrical values of an object. 


12 


CMU/SEI-89-TR-5 



package ElectricaMJnits Is 

type Voltage Is (Floats ng_Voltage, Zero_Voltage, Available_VoKage); 
No_VoKage : constant Voltage :« Zero_Voltage; 

— Devices like relays need to know if 

— voltage is available without concern for the level. 

Energizing_Voftage : constant Voltage > Available_VoKage; 

type Current is new Float; 

No_Current: constant Current > 0.0; 

type Load_Conversk>n_Factor Is new Float; 

No_Load_Conversion : constant Load_Conversion_Factor > 0.0; 

— Needed when device shorts out when current passes the wrong way. 
Max_Load_Conversion : constant LoadConversionFactor > 10_000.0; 

— Permits a function to return all three values. 

type PoweMnfo is 
record 

V : Voltage > Floating_Vo!tage; 

I: Current > No_Current; 

Lcf: Load_Conversbn_Factor > No_Load_Con vers ion; 

end record ; 

end Electrical_Units; _ 

Figure 3: Package ElectricaMJnits 


CMU/SEI-89-TR-5 


13 





3.3 The Circuit Breaker Object Manager 

Figure 4 shows a package specification for the Cb_Object_Manager. Type Cb is implemented as a 
private type. A new instance of the type Cb is returned by the function New_Cb. The Cb's attribute, 
Rating, and operational state, Position, definitions are shown as well. The definitions are part of the 
specification and may be accessed by the system aggregates and connection routines. Operations 
are defined for providing the external state information, voltage, LCF, and current, to a circuit breaker 
and for reading the state, the Power Info, of the circuit breaker. Operations are also defined for setting 
and reading the value of the operational state, Position. All the operations take a named instance of 
the Cb as a parameter. In the private part of the package specification, the breaker's private type is 
declared as an access pointer to a data type which will be the actual representation of the object. The 
data type is an incomplete type, the details of which are delayed until the package body. 


14 


CMU/SEI-89—TR-5 



I 


with ElectricaMJnits; 
package Cb_Object_Manager Is 

package Eu renames ElectricaMJnits; 

type Cb is private; 

type Cb_PositK>n Is (Open, Closed); 

type Cb_Rating Is new Float; 

type Cb_Side_Names is (Side_t, Side_2): 

function New_Cb (Position ; In Cb_Poshfc>n; 

Rating : in Cb_Rating) 
return Cb; 

procedure Give_VoltageJ_cMo (A_Cb : in Cb; 

A_Cb_Side : In Cb_Side_Names; 

Volts : In Eu.Voltage; 

Load_Conversion : In Eu.Load_Conversion_Factor); 

procedure Give_Current_To (A_Cb : In Cb; 

A_Cb_Side : In Cb_Side_Names; 

Load : In Eu.Current); 

procedure Give_Power_lnfo_To (A_Cb : In Cb; 

A_Cb_Side : In Cb_Side_Names; 

External_PowerJnfo : in Eu PoweMnfo); 

function Get_PowerJnfo_From (A_Cb : in Cb; 

A_Cb_Side : in Cb_Side_Names) 
return Eu.PowerJnfo; 

procedure Give_Position_To (A_Cb : In Cb; 

Position : In Cb_Position); 

function Get_Position_From (A_Cb : in Cb) return Cb_Position; 

pragma Inline (New_Cb, 

G ive_Volt ag e_Lcf_To, 

G ive_Cu rre nt_To, 

Give_Power_info_To, 

Get_Power_lnfo_From, 

Give^Position^To, 

Get_Posrtion_From); 

private 

type Cb_Repre$entation; — incomplete type, defined in package body 

type Cb is access Cb_Representation; — pointer to an Cb representation 

end CbJDbjeci^Manager; 


Figure 4: Cb_Object_Manager Package Specification 




CMU/SEI-89-TR-5 


15 








Figure 5 contains the package body for the Cb_Object_Manager. The record representing the cir¬ 
cuit breaker object is called Cb_Representation. The record contains components for the attribute, 
Rating, the operational state, Position, and the external environmental effects, Points The Points 
component is an array of Powerjnfo records, indexed by the side names of the circuit breaker. 

The function Opposite_Side returns the Power Info record for the opposite side of a circuit breaker. 
Recall from Chapter 2, this example models the flow of information directionally. Because of this di¬ 
rectionality, objects, such as circuit breakers, are defined with two sides. Each side contains the infor¬ 
mation flowing through the circuit to that point. The transfer of information through a object means: 
obtain the stored information from the opposite side of the object. This convention maintains the 
proper flow through the system. 

The function New_Cb creates a new instance of a circuit breakerobject and returns an access pointer 
to the private type. In addition, the function sets values for the circuit breaker’s current rating and 
physical position. The new instance is named and stored in the system aggregate, see Chapter 4. 

The implementation of the subprogram bodies for reading and writing external effects is not specified 
within the paradigm. The math models will be specific to each kind of object The behavior of the 
subprograms will be that they update the object’s state on a write operation or on a read operation. 
The implementation of function Get_Power_lnfo_From calculates the circuit breaker’s state when the 
output is read, i.e., when the circuit breaker is closed the Power Info record from the opposite side of 
the circuit breaker is returned, otherwise a zeroed Power Info record is returned. Because this ver¬ 
sion of the Cb_Object_Manager determines state on a read operation, the write operations, 
Give_Position_To, Give_Voltage_lcf_To, and Give_Current_To, simply write values to the Cb_Rep- 
resentation record 

A more complete solution for an object manager would include symmetrical ”Give_” and "Get_" pro¬ 
cedures. For example, Cb_Object_Manager has a Give_Voltage_Lcf_To procedure but no 
Get_Voltage_Lcf_From procedure. The Get_Power_lnfo_From procedure is used in all cases when 
any part of the Power_lnfo record needs to be accessed. 

Time effects would be placed on an object by the flight executive in the same way as other external 
environmental effects. For example, if a battery had to charge (or discharge) over time, during each 
system update the battery object would receive a value of the current time. The battery state would 
then be a reflection of the rate of charging (or discharging) over time. 


16 


CMU/SEI-89-TR-5 



package body Cb_Object_Manager is 

type Point_Representation is array (Cb_Side_Names) of Eu.Power_lnfo; 

type Cb_Representatk)n is 

record 

Points: Point_Representation; 

Position: Cb_Posrtion> Closed; 

Rating: Cb_Rating:« 50.0; 

end record; 

function Opposite Side (This Side: in Cb Side Names) return Cb Side Names is 

—/. 

The_Side: Cb_Side_Names> Side_1; — one of the sides 

begin 

— select opposite side based on what this side is. 
if This_Side - Side_1 then 

The_Side> Side_2; — the other side 

end if; 

RETURN The_Side; 
end Opposite_Side; 

function New Cb (Position : in Cb_Position; 

Rating : in Cb_Rating) return Cb Is 

—/. 

The_New_Object: Cb> new Cb_Representation; 

begin 

The_New_Object.Posrtion-« Position; 

The_New_Object.Rating> Rating; 

RETURN The_New_Object; 
end New_Cb; 

procedure Give_Voltage_Lcf_To (A_Cb . in Cb; 

A_Cb_Side : in Cb_Side_Names; 

Votts : in Eu.Voltage; 

Load_Conversion : in Eu.Load_Conversion_Factor) is 

begin 

A_Cb Points (A_Cb_Side).V> Volts; 

A_Cb Points (A_Cb_Side).Lcf:« Load_Convers(on; 
end Give_Vohage_Lcf_To; 

procedure Give_Current_To (A_Cb : in Cb; 

A_Cb_Side : in Cb_Side_Names; 

Load : in Eu.Current) is 

—/. 

begin 

A_Cb.Points (A_Cb_Side).l> Load; 
end Give_Current_To; 


Figure 5: CB_Object_Manager Package Body 




CMU/SEI-89-TR-5 


17 










procedure Give_PowerJnfo_To (A_Cb : In Cb; 

A_Cb_Side : In Cb_Side_Names; 
Extemal_Power_lnfo : In Eu.PowerJnfo) Is 

—I . 

begin 

A_Cb.Points (A_Cb_Side)> External_PowerJnfo; 
end Give_Power_lnfo_To; 

function Get_PoweMnfo_From (A_Cb: In Cb; 

A_Cb_Side : In Cb_SkJe_Names) 
return Eu.PowerJnfo Is 

—I . 

The_PowerJnfo: Eu.PowerJnfo; 
begin 

If A_Cb.Position « Closed then 

The_PowerJnfo> A_Cb.Points (Opposite_Side (A_Cb_Side)); 
end If; 

RETURN The_PowerJnfo; 
end Get_PowerJnfo__From; 

procedure Give_Position_To (A_Cb : In Cb; 

Position : In Cb_Position); 

—I . 

begin 

A_Cb.Position> Position; 
end Give_Position_To; 

function Get_Position_From (A_Cb : In Cb) 
return Cb_Position; 

—I . 

begin 

RETURN A_Cb.Position; 
end Get_Position_From; 
end Cb Object Manager; 


Figure 5: CB_Object_Manager package body - concluded 


18 


CMU/SEI-89-TR-5 









T 


An alternative implementation of the package body would determine the output state during a write 
operation For this math model, a new component, Output_State, would be added to the (^Repre¬ 
sentation record, see Figure 6. 


type Cb_Representation Is 
record 

Points: Point_Representation; 

Position : Cb_Position> Closed, 

Rating : Cb_Rating> 50.0; 

Output_State: Po in ^Representation; 

end record; _ 

_ Figure 6: Alternative Cb_Representation 


The procedures Give_Power_lnfo_To, Glve_Position_To, Give_VoltageJ_cf_To, and Give_Cur- 
rent^To write the external environmental effects. In addition to writing the effects, these procedures 
must now determine the output state and write the Output_State component in the Cb_Representa- 
tion record. Implementations of Give_PowerJnfo_To and Give_Position_To are shown in Figure 7 
and Figure 8, respectively. 


procedure Give_Power_lnfo_To (A_Cb: In Cb; 

A_Cb_Side: In Cb_Side_Names; 

ExternaLPoweMnfo: In Eu.PowerJnfo) Is 
The_PoweMnfo: Power_lnfo; 

begin 

A_Cb.Points (A_Cb_Side):« External_Power_lnfo; 

If A_Cb,Position - Closed then 

A_Cb.Output_State (Opposite_Side(A_Cb_Side))> External_Power_lnfo; 

else 

A_Cb.Output_State (Opposrte_Side(A_Cb__Side))> The_Power_1nfo; 
end If; 

end Give PowerJnfo To; _ 

Figure 7: Alternative Give_Power_lnfo_To Procedure 


CMU/SEI-89-TR-5 


19 











procedure Give_Posltion_To (A_Cb: In Cb; 

Position: In Cb_Position) Is 
The_PoweMnfo: Power_info; 

begin 

A_Cb.Position> Position; 

If A_Cb.Position ~ Open then 

for A_Side in Cb_Side_Names loop 

A_Cb.Output_State (A_Side)> The_Power_lnfo; 

end loop; 
end if; 

end Give_Positbn_To; _ 

Figure 8: Alternative Give_Position_To Procedure 


For this alternative implementation, the function Get_Power_lnfo_From must return the Out- 
put_State, see Figure 9. Thus, the math model may be invoked when outputs are read from the ob¬ 
ject, as in Figure 5, or when environmental effects are placed on the object, as in Figure 6, Figure 7, 
and Figure 8. This is an implementation level decision left to the system designer; it is not defined by 
the paradigm. 


function Get_Power_lnfo_From (A_Cb: In Cb; 

A_Cb_Side: In Cb_Side_Names) 
return Power Info Is 


begin 

RETURN A_Cb.Output_State (A_Cb_Side); 
end Get Power lnfo From; 

Figure 9: Alternative Get_Power_From Function 


20 


CMU/SEI-69-TR-5 







3.4 Other Objects 

This section will briefly describe the object managers for the bus objects and TRU objects. The struc¬ 
ture of the object managers is the same as the Cb_Object_Manager. The behavior of the object 
managers is the same, i.e., object states are updated on read operations. The functionality reflects 
the math models of the particular objects. 

3.4.1 Bus_Object_Manager 

Electrical buses connect all other components. The details of how voltages, LCFs, and loads are 
propagated are contained in the subprogram bodies of the Bus_Object_Manager. The Bus_Repre- 
sentation record, see Appendix D, Section D.9, saves the input state of each connection, the output 
state of each connection, a dirty bit for voltage, and a dirty bit for current. The subprogram bodies 
calculate the output states during read operations. During a write operation, a dirty bit is set to true 
only if the value of voltage or current being written is different than the current output state of the bus. 5 
During a read operation, output states are recalculated only if a dirty bit is set. If recalculation is nec¬ 
essary, the output states for all connections are determined and all dirty bits are set to false. 

3.4.2 TRU_Object_Manager 

The TRUs are directional components. They transmit voltage from the AC side to the DC side and 
transmit load from the DC side to the AC side. The TRU_Representation record, see Appendix D, 
Section D.7, contains the attributes of the TRU, Tru_LCF and Tru_Load, and the input states of both 
sides. There is no transformation of voltage or current within a TRU in this implementation. Thus, the 
DC side of the TRU provides the voltage that arrives from the AC side of the TRU, to the rest of the DC 
power system. Also, the AC side of the TRU provides the load, which is the sum of the load to the DC 
side of the TRU and the TRU's own contribution, to the AC power system. 


5 There is no dirty bit for LCF A changed value of LCF affects current. So, if a new LCF value is written to a bus 
the dirty bit for current is set 


CMU/SEI-89-TR-5 


21 







22 


C M U/S EI-89-TR-5 



4. Connections, Systems, and Executives 


This chapter describes the implementation of the software that allows construction of a system from a 
collection of objects, i.e., the connections, systems, and executives. The last part of the chapter ex¬ 
plains the software architecture and the relationships between the DC system and the other systems 
in the simulator. 

4.1 DC Power System Aggregate 

The DC power system aggregate package, see Appendix D, Section D. 10, defines the instances of all 
the objects within the system. The objects are named and the names are used to reference an array 
of pointers to the instances. Figure 10 shows part of the aggregate package; the definition of a few 
circuit breakers. 


type Cb_Name$ is ( 

— CB’s between TRUs and dc_tie_bus 

Cbjljl, Cb_2_1, Cb_3_1_); 

— define a table in which the objects are instantiated and can be referenced by the name. 
Named_Cbs : constant array (Cb_Names) of Cb_Object_Manager.Cb :« ( 

Cb_1_1 «> Cb_Object_Manager New_Cb 

Position => Cb_Object_Manager.Ciosed, Rating => 50.0), 

Cb_2_1 «> Cb_Object_Manager.New_Cb 

(Position «> Cb_Object_Manager.Cbsed, Rating «> 50.0), 

Cb_3_1 -> Cb_Object_Manager.New_Cb 

(Position -> Cb_Ob]ect_Manager.Closed, Rating «> 50.0),.. .); 

Figure 10: DC Power System Aggregate Package Fragment 


The New_{object} function in each object manager is used to create the instances. 6 The names are 
used by connection packages to access the objects directly using the constant arrays. The aggregate 


* The us© ofwithin subprogram names, type names, or text refers to a general case of the item. 

For example, New_{obj©ct} is a general form representing all instances of the procedure name, e.g., New_Cb, 
New_Tru, and New_Bus. See the template in Appendix C for a more complete example 


CMU/SEI-89-TR-5 


23 














package is referenced by both the DC power system connection procedures and the connection pro¬ 
cedures in the flight executive connection package. 


4.2 DC Power System and Its Connections 

The DC power system owns all connections between the TRUs, circuit breakers, and the buses within 
its boundary. The connections move information between bus objects and other objects. The proc¬ 
essing of the connections results in the movement of the voltages, currents, and LCFs through the 
system. 

The data structure defined for the connections is Dc_Power_System_Connections, shown in 
Figure 11. The structure maps enumerated connection names to contact points on objects. Each 
connection has two contact points. 


The_Dc_Pow©rjSyst*mjConnectk>ns : constant DcJ 3 ower_System_Connectk)ns > ( 
Connection_7 «> ( 

1 «> (Element «> Global_Types.A_Tru, 

Tru_Element «> Dcpa.Tru_1, 

Tru_Side «> Tm_Object_Manager.Dc_Side), 

2 «> (Element «> Global_Types.A_Bus, 

busJElement «> Dcpa.Dc_Main_1, 
bus_Side «> 1)), 

Connection^ *> ( 

1 «> (Element *> Global_Types.A_Tru, 

Tru_Element => Dcpa.Tru_2, 

Tru_$ide «> Tru_Object_Manager.Dc_Side), 

2 «> (Element *> Global_Types.A_Bus, 

bus_Element -> Dcpa.Dc_Main_2, 
bus_Side «> 1)), 

Connection_9 -> ( 

1 «> (Element «> Global_Types.A_Tru, 

Tru_Element ■> Dcpa.Tru_3, 

Tru_Side -> Tru_Object_Manager.Dc_Side), 

2 «> (Element -> Global_Types.A_Bus, 

bus_Element «> Dcpa.Dc_Main_3, 
bus_Side => 1)), 


); _ 

Figure 11: Connection Data Structure 


For voltage and LCF, the connections are processed in order from the voltage sou rces to the voltage 
sinks. The enumerated connection names are defined in this order. For load, the connections are 
processed in reverse order. The DC power system has two main tie buses. The tie buses maintain 


24 


CMU/SEI-89-TR-5 





power to all the DC buses in the event ot a failure inaTRUor an AC bus. Voltage and current move in 
both directions around the tie buses. As a result, the connections to the tie buses need to be proc¬ 
essed more often than the other connections Procedure Update_Dc_Power_System, in Figure 12, 
shows the order of processing of the system level connections and the extra processing required for 
the tie bus connections. 


procedure Update_Dc_Power_System Is 

—/. 

—/ Description: 

—/ Upon completion of the execution of this procedure, all objects within DC power will be updated and 
—/ in a consistent state. At this level of DC power the connections between objects are all that need to 
—/ be processed. 

—1 . 

begin 

— Process all connections which are internal to Dc_Power_System for voltage and Icf 

for A_Connection In Dc_Power_System_Connection_Names’First.. 

Dc_Power_System_Connection_Names’Last loop 
Process_Voltage_Ld_For_Connection (A_Connection); 

end loop ; 

for A_Connection In reverse The_Tie_Bus_1_Connections’First.. 

The_Tie_Bus_1_Connections’Last loop 

Process_Tie_Bus_Voltage_Ld (A_Connection); 

end loop ; 

for A_Connection In reverse The_Tie_Bus_2_Connections’First.. 

The_Tie_Bus_2_Connections’Last loop 

Process_Tie_Bus_Vottage_Lcf (A_Connection); 

end loop ; 

— Process all connections which are internal to Dc_Power_System for load 

for A_Connection In reverse Dc_Power_System_Connection_Names , First. 
Dc_Power_System_Connection_Names’Last loop 

Process_Load_For_Connection (A_Connection); 
end loop ; 

for A_Connection In The_Tie_Bus_1_Connections’First..The_Tie_Bus_1_Ck)nnections’Last loop 
Process_Tie_Bus_Load (A_Connection); 

end loop ; 

for A_Connection In The_Tie_Bus_2_ConnectKDns , First..The_Tie_Bus_2_Connections , Last loop 
Process_Tie_Bus_Load (A_Connection); 

end loop ; 

end Update Dc Power System; 


Figure 12: System Update Routine 




CMU/SEI-89-TR-5 


25 











Each connection is processed in turn, The first step is to gather the information from one side of the 
connection, convert the information if necessary, then write the information to the other side of the 
connection. The system aggregate is used to access the object's state information. Figure 13 shows 
part of a typical connection processing routine. Converting the information is unnecessary for this 
routine. 


procedure Process_Voltage_Lcf_For_Connectbn 

(This_Connection: Dc_Power_System_Connectbn_Names) Is 

—I . 

—/ Description: 

—/ This procedure processes the voltage and Icf state variables for the specified connection. 

-I 

—/ Parameter Description: 

—| This connection is the connection to be updated 

—I . . 

The_PowerJnfo : Electrbal_Units.PowerJnfo; 

begin 

declare 

The_Connection : A_Dc_Power_System_Connectbn 

renames The_Dc_Power_System_Connectbns (Th ^Connection); 

begin 

— handle a connection; obtain power information from dc power object 
case The_Connectbn (l).EIement Is 
when Global_Types.A_Cb «> 

The_PowerJnfo > Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb -> Dcpa.Named_Cbs (The_Connection (1).Cb_Element), 

A_Cb_Side *> The_Connection (1).Cb_Side); 


end case; 

— restore new Voltage and Lcf states to an object 
case The_Connectbn (2).EIement Is 
when Global_Types.A_Wire «> 

Wi re_Object_Man ag e r. G ive_Vo Itag e_Lcf_To ( 

A_Wire «> Dcpa.Named^Wires (The_Connection (2).Wire_Element), 
A_Wire_Side «> The_Connectbn (2).Wire_Side t 
Volts *■> The_Power_lnfo.V, 

Load_Conversion ■> The_Power_lnfo.Lcf); 

end case; 

end; 

end Process Vortage Lcf For Connection; 

Figure 13: Connection Processing Routine 


26 


CMU/SEI-89-TR-5 







4.3 DC Power System Software Architecture 

Figure 14 shows the software architecture from the perspective of the DC power system Objects in a 
system are created and named by the {system_name}_System_Aggregate package. Objects are 
managed by {object_name}_Object_Manager (OM) packages The system level connections are 
in the body of the system package, rather than in a separate connection package. The separate pack¬ 
age is drawn for notational simplicity. See Appendix B for a description of the icons used. The arrows 
represent Ada (withing) dependencies. The shaded portion of each icon represents the package 
body, the white portion represents the package specification. Note that all dependencies originate 
within the package bodies. This reduces the need for widespread recompilation in the event of a 
change. 


DC_ Pow®f_Syst©m 



DC Power_System_ Aggregate DC_ Power Systom_Conn©ct>ons 



OM « Object Manager 


Figure 14: System-Level Software Architecture 


CMU/SEI-89-TR-5 


27 




















































4.4 Flight Executive and Its Connections 

The flight executive level consists of two packages. The first is the Flight_Executlve package. The 
body of the Fiight_Executive package contains a tabular schedule of systems to update. The names 
of the systems are declared in the package Fiight_System_Names, the sole purpose of which is to 
enumerate the names. Figure 15 shows a typical schedule table. In this schedule table, the AC 
power system is updated during frame 2, the DC power system during frame 4, and the dummy sys¬ 
tem during frame 6. 


— Define the allocation of processing relative to frame execution 

hs_Time_To_Do : constant array (Global_Types.Execution_Sequence) of Active_ln_Frame > ( 

Global_Types.Frame_1_Modules_Are_Executed «> 

(Fsn.Engine_1 => (True), others «> (False)), 

Global_Types.Frame_2_Modules_Are_Executed «> 

(Fsn.Ac_Power «> (True), others «> (False)), 

Global_Types.Frame_3_Modules_Are_Executed »> 

(Fsn.Engine_2 «> (True), others -> (False)), 

Global_Types.Frame_4_Modu!es_Are_Executed «> 

(Fsn.Dc_Power «> (True), others => (False)), 

Global_Types.Frame_5_Modules_Are_Executed -> 

(Fsn.Engine_3 *> (True), others «> (False)), 

G!obal_Types.Frame_6_ModuIes_Are_Executed «> 

(Fsn.Dummy «> (True), others -> (False)), 

Global_Types.Frame_7_Modules_Are_Executed -> 

(Fsn.Engine_4 *> (True), others «> (False)), 

Global_Types.Frame_8_Modules_Are_Executed «> 

(others «> (False))); 

Figure 15: Executive Schedule Table 


28 


CMU/SEI-89-TR-5 





The procedure Update_Flight_Executive updates systems based on the schedule table, see 
Figure 16. Updating a system means to gate all executive level connections to the system and then 
call the system’s Update_{system}_System procedure. For the DC power system, the state of the 
circuit breakers in the software must be updated to reflect the state in the simulator hardware on each 
cycle. This update is handled by the procedure Process_Cb_Linkages. 


procedure Update_F1ight_Executive 

(Frame : In Global_Types.Execution_Sequence) Is 

—I . 

—/ Description: 

—/ flight systems executive. Processes connections and updates for each system atomically. 

—I 

—/ Parameter Description: 

—/ frame is the current frame 

—I . 

begin 

for A_System In Fsn.Name_Of_A_F1ight_System loop 
If lts_Time_To_Do (Frame) (A_System) then 

case A_System Is 

when Fsn.Dc_Power «> 

— update CB linkages - from simulator hardware 
Flight_Execirtive_Connections.Process_Cb_Linkages; 

— Process Connections 

Flight_Execirtive_Connecttons.Process_ExternaI_Connections_To_Dc_Power; 
— Update system 

Dc_Power_Sy stem. Update_Dc_Power_Sy stem; 

when others «> 
null; 

end case; 
end If; 
end loop; 

end Update Flight Executive; 

Figure 16: Update_Flight_Executive Procedure 


CMU/SEI-89-TR-5 


29 









4.5 Flight Executive Software Architecture 

Figure 17 shows the executive level software architecture. In this case, we assume an executive 
level called Flight_Executive. Each system is represented by a package called {sys- 
tem_name}_System. The specification of each system package exports a single procedure, Up- 
date_{system_name}_System, which is called by the flight executive to update the system. 



Right_E*«xit»v«_Cooo®c1ion6 Enghe_System 



DC_Power System 


Fuel_ System 



Figure 17: Executive-Level Software Architecture 


30 


CMU/SEI-89-TR-5 

















The flight executive handles all connections between the DC power system and the other systems in 
the simulator, e.g.,the engine system, the AC power system, the fuel system, and soon. The execu¬ 
tive level connections are managed by an {executlve_name}_Connectlons package, in this case, 
Fllght_Executlve_Connectlons. The architecture from the perspective of the connection package 
is shown in Figure 18. 


FIight_Executive Connections 



DC_Power System Aggregate 

i 


<— 

—) 

_ 

< 

-) 


Cb_OM TRUJDM Wir6_OM 


i 



i - 

I 


h— ; 

t — i — > ! 

i i 







1 


OM - Object_ M ana g« r 

Figure 18: Executive-Connection-Level Software Architecture 


The body of the connection package is a series of separate procedures, one for each system under 
the control of the executive. Each separate procedure is responsible for gating all the executive level 
connections to a system 

The data structure in the flight executive connection package, see Appendix D, Section D.19, will re¬ 
semble the connection data structure for the DC power system in Figure 11. The enumerated con¬ 
nection names map to contact points on objects. 

The order of executive level connection processing may be important in some implementations. For 
this example, the order is not important. As with the system connections, each connection is proc¬ 
essed in turn. The first step is to gather the information from an object in one system, using the sys¬ 
tem aggregate forthat system, convert the information, if necessary, then write the information to an 
object in a second system using the system aggregate for the second system. 


CMU/SEI-89-TR-5 


31 






















































4.6 Overall Software Architecture 


The overall software architecture is shown in Figure 19. The executive level consists of the 
Fllght_Executlve package and the Fllght_Executlve_Connectlons package. The system level 
consists of 

♦ {system_name}_System packages 

♦ {system_name}_System_Connectlons packages 

♦ {system_name}_System_Aggregate packages 

The complete system level architecture of the DC power system is shown. The architecture of the 
other systems, e g., the fuel system and the engine system, would be similar. 


Flight.Executlva 



OM - Obf*d Manager 


Figure 19: Overall Software Architecture 


32 


CMU/SEI-89-TR-5 



















































Each connection package is "nested" within the corresponding system or executive packages. Each 
connection within the connection packages is distinct, embodied within a separate procedure. 

There is one object manager package per kind of object. The object manager packages have no de¬ 
pendency on other compilation units, except perhaps global types packages, e .g., Electricai JJnits. 
The instances of the objects are created in the system aggregate package using the facilities of the 
object manager packages. 

Finally, as is evident from Figure 19, compilation dependencies are limited to a system. The scope of 
a system does not propagate beyond the Fiight_Executive_Connections package body. Thus a 
change, or complete replacement, of a system only affects the system level packages and the body of 
the executive connections package. No other systems are affected. The effects of changes will be 
transferred correctly by the executive connections during system update. 


CMU/SEI-89-TR-5 


33 





34 


CMU/SEI-89-TR-5 



References 


[1] Booch, Grady. 

Software Components with Ada. 

The Benjamin Cummings Publishing Company, Inc., Menlo Park, CA, 1987. 

[2] Booch, Grady. 

Software Engineering with Ada. 

The Benjamin Cummings Publishing Company, Inc., Menlo Park, CA, 1987. 

[3] Lee, K.J., Rissman, M.S., D’lppolito, R., Plinta, C., Van Scoy, R. 

An OOD Paradigm for Flight Simulators, 2nd Edition. 

Technical Report, CMU/SEI-88-TR-30, Software Engineering Institute, Pittsburgh, PA, 
1988. 


CMU/SEI-89-TR-5 


35 









36 


CMU/SEI-89-TR-5 



Appendix A. Electrical Concepts 


The relevant concepts for this report are: 

Current (I) The transferof electric charge. In direct current (DC) circuits, this transfer is 

unidirectional: in alternating current (AC) circuits, the transfer alternates on 
a periodic basis according to the frequency of the impressed voltage. The 
units for current are amperes 


Klrchoff’s Current Law 

The algebraic sum of the currents into a node is zero. For this report, cur¬ 
rents into a node are defined as positive and currents out of a node as nega¬ 
tive. 


Klrchoff’s Voltage Law 

The algebraic sum of the element voltages in a closed circuit is zero. For 
this report, voltage increases (from sources such as generators and batter¬ 
ies) are defined as positive and voltage decreases (from sinks such as mo¬ 
tors or lights) as negative. 

Load The power consumption of a device. It is the device's requirement for cur¬ 

rent at its rated operating voltage. 

Load Conversion Factor (LCF) 

An indication of the relative ability of a TRU to share a common load. 

The current through a passive circuit element is equal to the impressed volt¬ 
age divided by the element impedance. In DC circuits, the impedance is 
simply the resistance. 

A measure of electromotive force, or electrical potential: the ability to do 
electrical work. The units for voltage are Volts. 


Ohm’s Law 


Voltage (V) 


CMU/SEI-89-TR-5 


37 









CMU/SEI-89-TR-5 



Appendix B. Software Architecture Notation 


The notation used to describe the software architecture in this report is a modified form of the notation 
expounded by Grady Booch in his book on software engineering with Ada [2] and his book on reus¬ 
able software components with Ada [1]. The notation used is true to the intent of Booch’s notation. 
The variations are: 

♦ The use of reduced package and subprogram icons inside larger icons rather 
than the object (or blob) icon. 

♦ The use of object dependency arrows, more subtly, to distinguish different types 
of dependencies. 

♦ Internal details of any reusable subsystem, package, subprogram or task are not 
shown. 

One final note about the notation: The figures do not need to show all the fine-grained detail of a pack¬ 
age or subprogram. When the code of a package (or subprogram) is compared to a figure associated 
with that package (or subprogram) there maybe nested procedures or packages not shown on a par¬ 
ticular picture, or it may depend on a package not explicitly shown in the figure. The guidelines for 
these cases are: 

♦ Utility packages or services are not shown (this includes things like textjo, reus¬ 
able data structure packages, math libraries, etc.) 

♦ Figures are meant to show the significant details at a particular level, not all the 
details 

♦ Definition of “a significant detail” is solely at the discretion of the designer 

Based on these ideas, Figure 20, Figure 21, and Figure 22 explain the meaning of each of the icons 
available using this notation. 


CMU/SEI-69-TR-5 


39 










Object 


Subsystem 


Object 

Dependency 


( 




if] 

K 

J 



Figure 20: Object, Subsystem, and Dependency Notation 

The object (or blob) icon, shown above in Figure 20 (a), represents an identifiable segment of a sys¬ 
tem, about which there is no implementation information. This icon is not used in this report. 

The subsystem icon, shown above in Figure 20 (b), represents a major system component that has a 
clearly definable interface, yet, which is not representable as a single Ada package. This icon is not 
used in this report. 

The object dependency symbol, shown above in Figure 20 (c), indicates that the object at the origin of 
the arrow is dependent on the object at the head of the arrow. The origin of the arrow indicates where 
the dependency occurs. If the origin is in the white area of an icon (shown in subsequent figures), it 
indicates a specification dependency. If the origin is in the shaded area, it indicates a body depend¬ 
ency. 


40 


CMU/SEI-89-TR-5 







Package 
Specification & 
Body 


Package Package 

Specification Body 



a 


b 


c 


Package with 
separate subpackages 


Package with Generic 

separate subprograms Package 



d 


e 


f 


Figure 21: Package Notation 


The package specification and body icon, shown above in Figure 21 (a), represents an Ada package 
specification, the white area, with an associated package body, the shaded area. This icon can be 
broken apart to show a package specification, Figure 21 (b), or a package body, Figure 21 (c). 

Figure 21 (d) and Figure 21 (e) are variations on the package icon which show greater detail. 
Figure 21 (d) is used to represent packages which have nested subpackages within the body; if the 
small package icon were placed within the specification, it would indicate visible nested packages. 
Similarly, Figure 21 (e) illustrates the notation used for separate subprograms within the body of a 
package. 

Finally, Figure 21 (f) illustrates the icon used for generic packages. Everything discussed above in 
regard to regular packages can also be applied to generic packages. 


CMU/SEI-89-TR-5 


41 






























































Subprogram 
Specification & 
Body 


Subprogram 

Body 



a 


b 


Subprog ram with Subprog ram with 

nested subprograms nested subpackages 




C d 

Figure 22: Subprogram Notation 


Generic 

Subprogram 




e 


Much of what was discussed previously in regard to packages also applies to subprograms. The sub¬ 
program specification and body icon, shown above in Figure 22 (a), represents an Ada subprogram 
specification and body. The white area represents the specification; the shaded area, the body. This 
icon can be broken apart to show a separate subprogram body, Figure 22 (b). 

Figure 22 (c) and Figure 22 (d) are variations on the subprogram icon and show greater detail. 
Figure 22 (c) is used to represent subprograms which have nested subprograms within the body. 
Similarly, Figure 22 (d) illustrates the notation used for separate subpackages within the body of a 
subprogram. 

Finally, Figure 22 (e) illustrates the icon used for generic subprograms. Everything discussed above 
in regard to regular packages can also be applied to generic subprograms. 


42 


CMU/SEI-89-TR-5 












































Appendix C. Object Manager Template 


— The following are instructions regarding the use of this template. 

— The template does not encompass every procedure, 

— however with alterations to the existing 

— procedures one can easily affect the neccessary changes. 

— Perform global substitutes on the following placeholders: 

— {object} gets the name of the object being created 

— ie. {object} «> Cb 

— {attribute_n} are the attributes of an object you wish to modify. 

— Note: n can take on values 1 to 3 

— ie. {attributed} ~> spark 

— do a search now for all instances of ?? and fill in the 

— neccessary information 

— Finally the user should remove all unwanted code and comments 

—I . 

—/ Module Name: 

—/ {object}_Object_Manager 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package implements the type manager for objects 
—/ which simulate the electncal system {object}. 

—/ This management entails creation of {object} object’s 
—/ update, maintenance of its state, and state 
—/ reporting capabilities. 

—/- 

—/ Module Description: 

—/ The {object} object manager provides a means to create 
—/ an {object} object via the New_{object} operation and returns 
—/ an identification for the {object}, which is to be used when 


CMU/SEI-89-TR-5 


43 












—/ updating/accessing the {object} object's state as described below 

—I 

—/ The external states of {object} are {attribute_ 1}, {attribute_2}, 

—/ {attribute_3}, and {attribute_4}. 

—/ Operations are available to get and set these states. 

-i 

—/ The {object} object manager provides a means to update the 
—/ state of the object via the: 

—/ 1) Give_{attributeJ}JTo 

—/ 2) Give_{attribute_2}_To 

—/ 3) GiveJattribute_3}_To 

—i 

—/ operations, requiring the following external state information: 


—/ 

1) {attributeJ} 

{object}Jattribute_ 1} 

—/ 

2) {attribute_2} 

{ object}Jattribute_2} 

—/ 

3) {attribute_3} 

{object}_ {a ttribute_3} 

—/ 




—/ The {object} object manager provides a means of obtaining 
—/ state information via the: 

—/ 1) Get_{attribute_ 1}_From 

—/ 2) GetJatXributeJ2}JFrom 

—/ 3) Get_{attribute_3}_From 

—I 

—/ operations, yielding the following internal state information: 


-i 

1) {attributej} 

{object}_{attribute_ 1} 

—i 

2) {attribute_2} 

{object}Jattribute_2} 

—i 

3) {attribute_3} 

{object}_{attribute_3} 

—i 




—/ There are also four functions that are common to every object: 

—I 

—/ procedure GiveJVoftage_Lcf_To 
—/ (A_{object} : in {object}; 

—/ A_{object}_Side : in {object}_Side_Names; 

—/ Volts : in EU. Voltage; 

—/ Load_ Con version : in EU. Load_ Conversion i Factor); 

—I 

—/ procedure Give_Current_To (A_{object} : in {object}; 

—/ A_{object}_Side : in {object}_Side_Names; 

—/ Load : in EU.Current); 

—I 

—/ procedure G/ve_Power_ lnfo_ To 
—/ (A_{object}: in {object}; 

—/ A_{object}_Side : in {object}_Side_Names; 

—/ Extemal_Power_lnfo: in EU.PowerJnfo); 

—I 

—/ function Get_Power_ !nfo_ From 
—/ (A_{object} : in {object}; 

—/ A_{object}_Side : in {object}_Side_Names) 

—/ return EU.PowerJnfo; 

—I 

—/ Notes: 

—/ {object} is an element of an electrical circuit. Elements are 


44 


CMU/SEI-69-TR-5 



—/ connected to connections. Connections read state information from 
—/ an element on one side and write to an element on their other side 

—I 

—/ One attribute every electrical system object has is Side_Names. 

—/ In order to simulate energy flow in a system, the sides 
—/ of an object hold the flow through the system to that point: 

—I 

—/ volts - volts 

—/ -> X an Y -> 

—/ <- X object Y < - 

—/ bad - bad 

—/ 

—I The voltage flow through the system to the object is stored at side X. 
—I The bad flow through the system to the object is stored at side Y. 

—I The object operatbn GetJPowerJrifoJFrom (AJSide -> Y) returns the 
—I value of powerJnfo from side X. 

—I 

—I . 

with ElectricaMJnlts; 

package {Object}_Object_Manager is 

package Eu renames ElectricalJJnits; 

type {Object} is private; 
type {Object}_{Attribute_1} is ??; 
type {Object}_{Attribute_2} is ??; 
type {Object}_{Attribute_3} is ??; 

type {Object}_Side_Names is ??: 

function New_{Object} 

({Attribute^} : in {Object}_{Attribute_1}; 

{Attribute_2} : in {Object}_{Attribute_2}; 

{Attribute_3} : in {Object}_{Attribute_3}) 
return {Object}; 

-/. 

—/ Description: 

—/ Creates a new {object} as a private type. 

—/ This function returns a pointer to a new {object} object 
—/ representation. This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

-I 

—/ Parameter Description: 

—/ {attribute^ 1} the default state of the {attribute_1} 

—/ {attribute_2} the default state of the {attribute_2} 

—/ {attribute_3} the default state of the {attribute_3} 

—/ {object} is the access to the private data representaion 

—I 

—I . 


CMU/SEI-69-TR-5 


45 
















procedure Grve_Voftage_Lcf_To 
(A_{Object}: In {Object}; 

A_{Object}_Side : In {Object}_Side_Names; 

Volts : In Eu.Vottage; 

Load_Conversion : In Eu.Load_Conversion_Factor); 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a {object}. 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} being acted on. 

—I A_{object}_side is the side of the {object} to be updated 
—/ Volts is the Voltage to be given to the {object} 

—/ Load_Conver$bn is the LCF to be given to the {object} 

—I . 

procedure Give_Current_To (A__{Object}: In {Object}; 

A_JObject}_Side : In {Object}_Side_Names; 
Load : In Eu.Current); 

—I . 

—/ Description: 

—/ Places Current on a specific side of a {object}. 

-I 

—/ Parameter Description: 

—I A_{object} is the {object} being acted on. 

—I A_{object}_side is the side of the {object} to be updated 
—/ Current is declared in Electrical_Units 

-I . 

procedure Gh/e_PoweMnfo_To 
(A_JObject}: In {Object}; 

A_JObject}_Side : In {Object}_Side_Names; 

External_Power_Jnfo: In Eu.Power_lnfo); 

—I . 

—/ Description: 

—/ Places Power_info on a specific side of a {object}. 

—I 

—/ Parameter Description: 

—/ A_{object} is the {object} being acted on. 

—/ A_{object}_side is the side of the {object} to be updated 
—/ Power_info is declared in Electrical_Uhits 

—I . 

function Get_Power_lnfo_From 
(AJObject}; In {Object}; 

A_{Object}_Side : In {Object}_Side_Names) 
return Eu.PowerJnfo; 

-/... 

—/ Description: 

—/ Returns Powerjnfo associated with a specific side of an {object}. 

-i 

—/ Parameter Description: 


46 


CMU/SEI-89-TR-5 










—I A_ {object} is the {object} being acted on 
—I A_{object}_side is the side queried 
—/ Power_lnfo is declared in Electrical_Units 

—I . 

procedure Give_{Attribute_1}_To 
(A_{Object} . In {Object}; 

{Attribute^} : In {Object }J Attributed}); 

—I . 

—/ Description: 

—/ Updates the state of {attribute_ 1} to correspond to current 
—/ external conditions 

-I 

—/ Parameter Description: 

—I A_{object} is the {object} to be updated 
—/ {attribute__ 1} is a new {object}_{attribute_ 1} 

—I 

—I . 

function Get_{Attributed}_From 
(A__{Object} in {Object}) 
return {Object}_{Attributed}; 

—I . 

—/ Description: 

—/ Returns the state of {attribute_ 1} 

—I 

—/ Parameter Description: 

—/ A_{object} is the {object} queried 
—/ {object}_{attribute_ 1} is the state of the {attribute _ 1} 

—I 

—I . 

procedure GivedAttribute_2}_To 
(A_{Object}: in {Object}; 

{Attributed) * in {Object}JAttribute_2})i 

—I . 

—/ Description: 

—/ Updates the state of {attribute_2} to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—/ A_{object} is the {object} to be updated 
—/ {attribute__2} is a new {object}_{attrbute_2} 

—I 

—I . 

function Get_{Attribute_2LRom 
(AJObject}: in {Object}) 
return {Object}_{Attribute_2}; 

—I . 

—/ Description: 

—/ Returns the state of {attribute_2} 


CMU/SEM39-TR-5 


47 













—I 

—/ Parameter Description: 

—I A_{object} is the {object} queried 
—/ {object}_{attribute_2} is the state of the {attribute_2} 

—I 

—I . 

procedure Give_JAttribute_3}_To 
(A_{Object}: In {Object}; 

{Attribute_3} : In {Object}_{Attribute_3}); 

I *********••••*•*********■*»•***••*•**•*•• »*»»»»»»»»»»»»»»♦»♦»♦»»♦• 

—/ Description: 

—/ Updates the state of {attribute_3} to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} to be updated 
—/ {attribute_3} is a new {object}_{attribute_3} 

—I 

—I . 

function Get_{Attribute_3}_From 
(AJObject}: In {Object}) 
return {Object}_{Attrlbute_3}; 

—I . 

—/ Description: 

—/ Returns the state of {attribute_3} 

—I 

—/ Parameter Description: 

—/ A_{object} is the {object} queried 
—/ {object}_{attribute_3} is the state of the {attribute_3} 

—I 

—I . 

pragma Inline ( 

New_{Object}, 

G rve_Vo It ag e_Lcf_To, 

Give_Current_To, 

Give_PoweMnfo_To, 

Get_Po werJ nfo_Fro m, 

Give_{Attribute_1 }_To, 

Get_J Attribute^ }_From 
Give_{ Att ribute_2}_To, 

Get_JAttribute_2}_From 

Give_{Attribute_3}_To, 

Get_{ Att r ibut e_3}_Fr o m 

); 


private 

type {Object}_Representation; 

— incomplete type , defined in package body 


48 


CMU/SEI-89-TR-5 







type {Object} is access (Object}_Representat>on; 
— pointer to an {object} representation 


—I . 

—/ Modification History: 

—/ 21Apr87 kl changed connection arguments to {object} arguments 

—/ 28Apr87 kl Updated to include power Jnfo routines 

—/ 20Mar87 kl Created 

-I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—/ The Software engineering Institute (SEI) is a federally funded research 
—/ and development center established and operated by Carnegie Mellon 
—/ University (CMU). Sponsored by the U.S. Department of Defense under 
—/ contract FI9628-85-00003, the SEI is supported by the services and 
—/ defense agencies, with the U.S. Air Force as the executive contracting 
—/ agent. 

-i 

—/ Permission to use, copy, modify, or distribute this software and its 
—/ documentation for any purpose and without fee is hereby granted, 

—/ provided that the above copyright notice appear in all copies and that 
—/ both that copyright notice and this permission notice appear in 
—/ supporting documentation. Further, the names Software engineering 
—/ Institute or Carnegie Mellon University may not be used in advertising 
—/ or publicity pertaining to distribution of the software without 
—/ specific, written prior permission. CMU makes no claims or 
—/ representations about the suitability of this software for any purpose. 

—/ This software is provided m as is" and no warranty, express or implied, 

—/ is made by the SEI or CMU, as to the accuracy and functioning of the 
—/ program and related program material, nor shall the fact of distribution 
—/ constitute any such warranty. No responsibility is assumed by the SEI 
—/ or CMU in connection herewith. 

—I . 

end {Object}_Object_Manager; 

pragma Page; 


CMU/SEI-89-TR-5 


49 









—I . 

—/ Module Name: 

—/ {objeci}_Ob]ect_Manager 

—I 

—/ Module Type: 

—/ Package Body 

— - 

—/ Module Description: 

—/ Manipulates private data structures that represent 
—/ a {object}, and contact points on a {object}. 

—I 

—/ Notes: 

—/ none 

package body {Object}_Object_Manager Is 

type Point_Representation is array ({Object}_Side_Names) of Eu.PowerJnfo; 
— representation of a {object} 

type {Object}_Representation is 

record 

Points: Point_Representation; 

{Attribute^}: {Object}_jAttribute_1}> ??; 

{Attribute^}: {0bject}_{Attribute_2}> ??; 

{Attribute_2}: {0bject}_{Attribirte_3}> ??; 

end record; 

pragma page; 


50 


CMU/SEI-89-TR-5 








function Opposite_Side (This_Side in {Object}_Side_Names) 
return {Object}_Side_Names Is 

—I . 

—/ Description: 

—/ A function to find the opposite side of a {object} 

—I 

—/ Parameter Description: 

—I Tbis_Side is the side for which the opposite is sought. 

—/ Side_Names is the opposite side. 

—I 

—/ Notes: 

—I USED FOR CONTROL ELEMENTS SUCH AS {object}S t RELA YS AND 
—I SWITCHES: 

—I . 

The_Side: {Object}_Side_Names> ??; — one of the sides 
begin 

— select opposite side based on what this side is. 

If Thi$_Side « ?? then 

The_Side> ??; — the other side 

end If; 

RETURN The_Side; 
end Opposite_Side; 
pragma Page; 


CMU/SEI-69-TR-5 


51 







function NewJObject} 

({Attribute_1} : in {Object}_JAttribute_1}; 

{Att ri bute_2} : in {Object}_{Attrib ute_2}; 

{Attribute^} : in {Object}_{Attribute^}) 
return {Object} is 

—I . 

—/ Description: 

—/ Creates a new {object} as a private type . 

—/ This function returns a pointer to a new {object} object 
—/ representation. This pointer will be used to identify 
—/ the object for state update and state reporting purposes. 

—I 

—/ Parameter Description: 

—/ {attribute_ 1} the defauit state of the {attribute_ 1} 

—/ {attribute J2} the default state of the {attribute_2} 

—/ {attribute_3} the default state of the {attribute_3} 

—/ {object} is the access to the private data representaion 

—I 

—I . . .. 


The_New_Object: {Object}:- new {Object}_Representation; 
begin 

The_New_Object.{Attribu1e_1}:- {Attribute^}; 
The_New_Object.{Attribute_2}> {Attribute_2}; 
The_New_Object.{Attribute_3}> {Attribute_3}; 

RETURN The_New_Object; 
end New_{Object}; 

pragma page; 


52 


CMU/SEi-89—TR-5 






procedure Give_Voltage_Lcf_To 
(A_{Object} : in {Object}; 

A_{Object}_Side : In {Object}_Side_Names; 

Volts : In Eu.Voltage; 

Load_Conversion : in Eu.Load_Conversion_Factor) is 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a {object}. 

—I 

—/ Parameter Description: 

—I A_(object} is the {object} being acted on. 

—I A_{object}_side is the side of the {object} to be updated 
—/ Volts is the Voltage to be given to the {object} 

—/ Load_Conversbn is the LCF to be given to the {object} 

—I . 

begin 

A_{Object}.Points (A_{Object}_Side).V> Volts; 

AJObject}.Points (A_{Object}_Side).Lcf> Load_Conversion; 
end Give_Voltage_Lcf_To; 

pragma Page; 


CMU/SEI-€9-TR-5 


53 





procedure Give_Current_To (A_{Object} : in {Object}; 

A_{Object}_Side : In {Object}_Side_Names; 
Load : In Eu.Current) is 

-I . 

—/ Description: 

—/ Places Current on a specific side of a {object}. 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} being acted on. 

—/ {object}_side is the side of the {object} to be updated 

—/ Current is declared in Electrical_Units 

-I . 

begin 

A_JObject}.Points (A_{Object}_Side).l:= Load; 
end Gfve_Current_To; 

pragma Page; 


54 


CMU/SEI-89-TR-5 





procedure Give_PowerJnfo_To 
(A_{Object} : in {Object}; 

AJObject}_Side : in {Object}_Side_Names; 
External_Power_info : in Eu.PoweMnfo) is 

—I . 

—/ Description: 

—/ Places Power_info on a specific side of a {object}, 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} being acted on. 

—I A_{object}_side is the side of the {object} to be updated 
—/ Power_lnfo is declared in Eledrical_Units 

—I . 

begin 

A_{Object}.Points (A_{Object}_Side):- Externai_Power_info; 
end Give_PowerJnfo_To; 
pragma Page; 


CMU/SEI-89-TR-5 


55 







function Get_Power_lnfo_From 
(A_{Object}: In {Object}; 

A_{Object}_Side : In {Object}_Side_Names) 
return Eu. PowerJnfo Is 

—I . 

—/ Description: 

—/ Returns Power Jnfo associated with 
—/ a specific side of an {object}. 

—/ Parameter Description: 

—I AJobject} is the {object} being acted on. 

—I AJobject}jside is the side queried 
—/ Power Jnfo is declared in Electncal_Units 

—I . 

The_Power_!nfo: Eu.PoweMnfo; 

begin 

If A_JObject}.{Attribute^} - Closed then 

The_Power_lnfo:- A_{Object}.Points (Opposite_Side (A_JObject}_Side)); 
end If; 

RETURN The_Power_Info; 
end Get_Power_Info_From; 

pragma Page; 


56 


CMU/SEI-89-TR-5 





procedure Give_{Attribute_1}_To 
(A_{Object) : In {Object}; 

{Attribute_1} : in {Object}_{Attribute_1}) is 

—I . 

—/ Description: 

—/ Updates the state of {attribute_ 1} to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} to be updated 
—/ {attribute_1} is a new {object}_{attribute_1} 

—I 

—I . 

begin 

A_JObject}.{Attribute_1}> {Attributed}; 
end Give_{Attributed }_To; 

pragma Page; 


CMU/SEMJ9-TR-5 


57 







function Get_{Attributed}_From 
(A_{Object} : in {Object}) 
return {Object}_JAttribute_1} is 

—I . 

—/ Description: 

—/ Returns the s fate of {attribute_ 1} 

-I 

—/ Parameter Description: 

—I A_{objoct} is the {object} queried 
—/ {object}_{attribute_ 1} is the state of the {attribute_ 1} 

—I 

—I . 

begin 

RETURN AJObject}.{Attribute_1}; 
end Get_{Attribute_1}_From; 

pragma Page; 


58 


CMU/SEI-89-TR-5 





procedure Give_{Attribute_2}_To 
(A_{Object}: in {Object}; 

{Attribute^}: in {Object}_{Attribute_2}) is 

—I . 

—/ Description: 

—/ Updates the state of {attributeJ2] to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} to be updated 
—/ {attribute_2} is a new {object}_{attribute_2} 

-i 

-i . 

begin 

A_{Object}.{Attribute_2}> {At1ribute_2}; 
end Give_{Attribute_2}_To; 

pragma Page; 


CMU/SEI-89-TR-5 


59 







function Get_{Attribute_2}_From 
(A_{Object} : in {Object}) 
return {Object}_JAttribute_2} is 

—I . 

—/ Description: 

—/ Returns the state of {attribute_2} 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} queried 
—/ {object}_{attribute_2} is the state of the {attribute_2} 

—I 

—I . 

begin 

RETURN AJObject}.{Attribute_2}; 
end Get_{Attribute_2}_From; 

pragma Page; 


60 


CMU/SEI-89-TR-5 





procedure Give_JAttribute_3}_To 
(A_{Object} : in {Object}; 

{Attribute_3}: in {Object}_{AttributeJ3}} Is 

—I . 

—/ Description: 

—/ Updates the state of (attribute_3) to correspond to current 
—/ external conditions 

-I 

—/ Parameter Description: 

—I A_(object} is the {object} to be updated 
—/ {attribute^} is a new (object}_{attribute^} 

-I 

-I . 

begin 

A_JObject).{Attribute_3)> {Attribute_3}; 
end Give_{Attribute_3}_To; 

pragma Page; 


CMU/SEMJ9-TR-5 


61 







function Get_{Attribute_3}_From 
(A_{Object) : In {Object}) 
return {Object}_(AttribLrte_3} Is 

—I ...*. 

—/ Description: 

—/ Returns the state of {attribute_3} 

—I 

—/ Parameter Description: 

—I A_{object} is the {object} queried 
—/ {object}_{attribute_3} is the state of the {attribute_3} 

—I 

-I .*. 

begin 

RETURN A_JObject}.{Attribute^}; 
end Get_{Attribute_3}_From; 


—I . . . 

—/ Modification History: 

—/ 30AprS7 kl Updated read routines to reflect operation of an {object}. 

— 128Apr87 kl Added powerJ\nfo routines 
—/ 20Mar87 kl Created 

-I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—/ The Software engineering Institute (SEI) is a federally funded research 
—/ and devebpment center established and operated by Carnegie Mellon 
—/ University (CMU). Sponsored by the U.S. Department of Defense under 
—/ contract FI9628-85-C-0003, the SEI is supported by the services and 
—/ defense agencies, with the U.S. Air Force as the executive contracting 
—/ agent. 

—I ' 

—/ Permission to use, copy, modify, or distribute this software and its 
—/ documentation for any purpose and without fee is hereby granted, 

—/ provided that the above copyright notice appear in all copies and that 
—/ both that copyright notice and this permission notice appear in 
—/ supporting documentation. Further, the names Software engineering 
—/ Institute or Carnegie Mellon University may not be used in advertising 
—/ or publicity pertaining to distribution of the software without 
—/ specific, written prior permission. CMU makes no claims or 
—/ representations about the suitability of this software for any purpose. 

—/ This software is provided "as is m and no warranty, express or implied, 

—/ is made by the SEI or CMU, as to the accuracy and functioning of the 
—/ program and related program material, nor shall the fact of distribution 
—/ constitute any such warranty. No responsibility is assumed by the SEI 
—/ or CMU in connection herewith. 

—I . 

end {Object}_Object_Manager; 


62 


CMU/SEI-89-TR-5 








Appendix D. DC Power System Ada Code 


The Ada code that follows implements a subset of a typical aircraft simulator DC power system. The 
implementation includes package specifications, bodies and a test driver. The following disclaimer 
applies to all the code in this appendix and throughout the rest of this report: 

—I Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I The Software Engineering Institute (SEI) is a federally funded research 
—I and development center established and operated by Carnegie Mellon 
—I University (CMU). Sponsored by the U.S . Department of Defense under 
—I contract FI9628-85-0-0003, the SEI is supported by the services and 
—I defense agencies, with the U.S. Air Force as the executive contracting 
—I agent. 

—I 

—/ Permission to use, copy, modify, or distribute this software and its 
—/ documentation for any purpose and without fee is hereby granted, 

—I provided that the above copyright notice appear in all copies and that 
—I both that copyright notice and this permission notice appear in 
—/ supporting documentation. Further, the names Software Engineering 
—I Institute or Carnegie Mellon University may not be used in advertising 
—I or publicity pertaining to distribution of the software without 
—I specific, written prior permission. CMU makes no claims or 
—/ representations about the suitability of this software for any purpose. 

—I This software is provided "as is m and no warranty, express or implied, 

—/ is made by the SEI or CMU, as to the accuracy and functioning of the 
—/ program and related program material, nor shall the fact of distribution 
—/ constitute any such warranty. No responsibility is assumed by the SEI 
—I or CMU in connection herewith. 


CMU/SEI-89-TR-5 


63 









D.1 Package ElectricalUnits 


—/. 

—/ Module Name: 

—/ ElectricalUnits 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package provides basic electrical types: current, voltage and load 
—/ conversion factor (LCF). It also declares common constant values 
—/ for those types. Also provides the agregate record power Jnfo, 

—/ which contains fields for voltage , current , and LCF. 

—/- 

—/ Module Description: 

—/ Voltage is an enumerated type. Current and LCFs 
—/ are real values. 

—I 

—/ Notes: 

—/ This package has no body. 

—I . 

package ElectricanJnrts Is 

type Voltage is (Floating_Voltage f 
Zero_Voltage, 

Available_Voltage); 

No_Voltage : constant Voltage > Zero_Voltage; 

— Devices like relays need to know if 
— voltage is available without concern for the level. 

Energizing_Voltage : constant Voltage > Available_Voltage; 

type Current is new Float; 

No_Current: constant Current > 0.0; 

type Load_Conversion_Factor is new Float; 

No_Load_Conversion ; constant Load_Conversion_Factor0.0; 

— Needed when device shorts out when current passes the wrong way. 

Max_Load_Conversion : constant Load_Conversion_Factor > 10_000.0; 

— Permits a function to return all three values. 

type Powerjnfo is 
record 

V : Voltage > Fk>ating_Voltage; 

I: Current > No_Current; 


64 


CMU/SEI-89—TR-5 






Lcf: Load_Conversion_Factor := No_Load_Conversion, 

end record; 

/. 

/ Modification History: 

■/ OSOct87 tac Deleted body to this spec. Deleted function 


—/ 02May87 
—/ 23AprQ7 
—/ 03Mar87 
—/ 27Feb87 
—/ 17Feb87 

kl added function 

kl added floating voltage; made it default for powerjnfo 
mmr added powerjnfo 
kl added constants 
kl initial version 


—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA 

—I . 

end Electrical_Units; 

pragma Page; 


CMU/SEI-89-TR-5 


65 








D.2 Package Global_Types 


—/. 

—I Module Name: 

—I Global Types 

—I 

—/ Module Type: 

—I Package Specification 

—I 

—I Module Purpose: 

—/ This package provides global types for use throughout the simulator code. 

—t - 

—I Module Description: 

—I This package provides global types for use throughout the 
—/ simulator code. 

-I 

—/ Type Execution_Sequence defines the frames to be used by the 
—/ executives during the cyclic execution of the code. 

—I 

—I Notes: 

—/ This package has no body. 

-I . 

package G1oba1_Types is 

type Execution_Sequence Is (Frame_1_Modules_Are_Executed, 

Frame_2_Modu!es_Are_Executed, 

Frame_3_Modules_Are_Executed, 

F ram e_4_Modu!es_Are_Executed, 
Frame_5_Modules_Are_Executed, 
Frame_6_Modules_Are_Executed l 
Frame_7_Modules_Are_Executed, 
Frame_8_Modu!es_Are_Executed); 

type Element_Class is (A_Cb, A_Tru, A_Bus); 

—I . 

—/ Modification History: 

—/ 28Feb89 kl changed "wire* to "bus' 

—I 14Nov88 kl removed wire_point, object_point 
—I 17Jun88 der Added constants wire_point, object_point. 

—I 14Jun88 der A_Wire added to Element_C!ass. 

—/ 09Oct87 tacMoved Element_Class into this package from the aggregates. 
—/ 24Apr87 kl created 

—I 

—l - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh , PA. 

—I . 

©nd Global_Types; 


66 


CMU/SEI-89-TR-5 











I 


D.3 Package Flight_System_Names 

—/. 

—/ Module Name: 

—/ Flight System Names 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package names all systems under the flight executive 

—/- 

—/ Module Description: 

—/ This package names all systems under the flight executive 

—I 

—/ Notes: 

—/ This package has no body. 

—I . 

package Flight_System_Names is 

type Name_Of_A_Flight_$ystem is ( 

Dc_Power, 

Ac_Power, 

Engine_1 t 

Engine_2 t 

Engine_3, 

Engine_4, 

Dummy); 


—I . 

—/ Modification History: 

—/ 30Sep87 tac added dummy to System names 
—/ 21Aug87 kl created 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA 

end Flight_System_Names; 

pragma Page; 


CMU/SEI-89-TR-5 


67 










D.4 Package Cb_Object_Manager 


-i . 

—/ Module Name: 

—I Cb_Object_Manager 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package implements the type manager for objects 
—/ which simulate the Electrical system circuit breaker (Cb). 

—/ This management entails creation of Cb objects, 

—/ update, maintenance of its state, and state 
—/ reporting capabilities. 

—t - 

—/ Module Description: 

—/ The Cb_Objed_Manager provides a means to create 
—/ a Cb object via the New_Cb operation and returns 
—/ an identification for the Cb, which is to be used when 
—/ updating/accessing the Cb object's state as described below. 

-I 

—/ The external states of Cb are Positbn and Rating 
—/ Operations are available to get and set these states. 

—I 

—/ The Cb_Object_Manager provides a means to update the 
—/ state of the object via the: 

—/ 1) Give_Positbn_To 

—/ operation, requiring the following external state information: 

—/ 1) Position: Cb_Position 

—I 

—/ The Cb_Object_Manager provides a means of obtaining 
—/ state information via the: 

—/ 1) Get_Position_From 

—/ operation, yielding the following internal state information: 

—/ 1) Position: Cb__Position 

-i 

—/ There are also four functions that are common to every object: 

—I 

—/ procedure Give_Voltage_Lcf_To (A_Cb : in Cb; 

—/ A_Cb_Side: in Cb_Side_Names; 

—/ Volts : in EU. Voltage; 

—/ Load_Conversbn : in EU.Load_Conversion_Factor); 

-I 

—/ procedure Give_Current_ To (A_Cb : in Cb; 

—/ A_Cb_Side : in Cb_Side_Names; 

—/ Load: in EU. Current); 

-I 

—/ procedure Give_Power_lnfo_To (A_Cb: in Cb; 


68 


CMU/SEI-89-TR-5 





—/ A_Cb_Side : in Cb_Side_Names; 

—/ Extemal_Power_lnfo : in EU.Powerjnfo); 

-I 

—/ function Get_Power_lnfo_From (A_Cb : in Cb; 

—I A_Cb_Side : in Cb_Side_Names) 

—/ return EU.Power_lnfo; 

—I 

—/ Notes: 

—/ Cb is an element of an electrical circuit. Elements are 
—/ connected to connections. Connections read state informatbn from 
—/ an element on one side and write to an element on their other side 

-I 

—/ One attribute every electrical system object has is Side_Names. 

—/ In order to simulate energy flow in a system, the sides 
—/ of an object hold the flow through the system to that point: 

-I 

—/ volts - volts 

—I -> X an Y -> 

—I 

—/ load - bad 

—I 

—/ The voltage flow through the system to the object is stored at side X 
—/ The bad flow through the system to the object is stored at side Y. 

—/ The object operation Get_Power_lnfo_From (a_side -> Y) returns the 
—/ value of powerJnfo from side X. 

—I 

—I . 

with El 0 Ctrical_Unrts; 

package Cb_Object_Manager Is 

package Eu renames EledricaMJnits; 

type Cb Is private; 

type Cb_Position Is (Open, Closed); 

type Cb_Rating Is new Float; 

type Cb_Side_Names Is (Side_1, Side_2); 

function New_Cb (Position : In Cb_Position; 

Rating : In Cb_Rating) 
return Cb; 

—I . 

—/ Description: 

—/ Creates a new Cb as a private type. 

—/ This function returns a pointer to a new Cb_Representatbn. 

—/ This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

-i 

—/ Parameter Description: 

—/ Position the default state of the Position 


CMU/SEI-89-TR-5 


69 










—/ Rating the default state of the Rating 
—/ Cb is the access to the private data representaion 

—I 

—I . 

procedure Give_Voltage_Lcf_To (A_Cb : In Cb; 

A_Cb_Side : in Cb_Side_Names; 

Volts : In Eu.Voitage; 

Load_Conversion : In Eu.Load_Conversion_Factor); 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Cb. 

—I 

—/ Parameter Description: 

—I A_Cb is the Cb being acted on. 

—I A_Cb_Side is the side of the Cb to be updated 
—/ Volts is the Voltage to be given to the Cb 
—/ Load_Conversion is the LCF to be given to the Cb 

—I ... . 

procedure Give_Current_To (A_Cb : In Cb; 

A_Cb_Side : in Cb_Side_Names; 
Load : In Eu.Current); 

-I . . . . . 

—/ Description: 

—/ Places Current on a specific side of a Cb. 

—I 

—/ Parameter Description: 

—I A_Cb is the Cb being acted on. 

—/ A_Cb_Side is the side of the Cb to be updated 
—/ Current is declared in Eiectrical_Units 
—I . 

procedure Give_Power_lnfo_To (A_Cb : In Cb; 

A_Cb_Side : in Cb_Side_Names; 

External_Power_lnfo : In Eu.PowerJnfo); 

—I . 

—I Description: 

—/ Places Power_lnfo on a specific side of a Cb. 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb being acted on. 

—/ A_Cb_Side is the side of the Cb to be updated 
—/ Power_lnfo is declared in Electrical_Units 

—I . 

function Get_PowerJnfo_From (A_Cb : In Cb; 

A_Cb_Side : in Cb_Side_Names) 
return Eu.PoweMnfo; 

—I . 

—/ Description: 

—/ Returns Power_info associated with a specific side of a Cb 


70 


CMU/SEI-89-TR-5 











—I 

—/ Parameter Description: 

—I A_Cb is the Cb being acted on. 

—I A_Cb_Side is the side queried 
—/ Power_lnfo is declared in Eledrical_Units 

—I . . 

procedure Give_Posrtion_To (A_Cb : In Cb; 

Position : In Cb_Posit*on); 

-/. 

—/ Description: 

—/ Updates the state of Position to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb to be updated 
—/ Position is a new Cb_Position 

-i 

—i . 

function Get_Position_From (A_Cb : In Cb) return Cb_Position; 

—I . 

—/ Description: 

—/ Returns the state of Position 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb queried 
—/ Cb_Position is the state of the Position 

—I 

—I . . 

pragma Inline ( 

New_Cb, 

G ive_ Vo It ag e_Lcf_To, 

Give_Current_To, 

Give_Power_Info_To, 

Get_PowerJnfo_From, 

Give_Posrtion_To, 

Get_Position_From 

); 


private 

type Cb_Representation; — incomplete type, defined in package body 
type Cb Is access Cb_Representation; — pointer to an Cb representation 


—I 


—/ Modification History: 

—1 21Apr87 

ki 

changed connection arguments to Cb arguments 

—/ 28Apr87 

kl 

Updated to include powerjnfo routines 

—/ 20Mar87 

kl 

Created 

— / 




+ 


CMU/SEMJ9-TR-5 


71 











—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Cb_Object_Manager; 
pragma Page; 


72 


CMU/SEI-69-TR-5 




D.5 Package Body Cb_Object_Manager 


—/. 

—/ Module Name: 

—I CbjObject_Manager 

—I 

—/ Module Type: 

—/ Package Body 

—I 

—/- 

—/ Module Description: 

—/ Manipulates private data structures that represent 
—/ a circuit breaker (Ob), and contact points on a Ob. 

—I 

—/ Notes: 

—/ none 

—I . 

package body Cb_Object_Manager Is 

type Point_Representation Is array (Cb_Side_Names) of Eu.PowerJnfo; 

— representation of a Cb 

type Cb_Representation Is 
record 

Points: Point_Repre$entation; 

Position: Cb_Position> Closed; 

Rating: Cb_Rating> 50.0; 
end record; 

pragma Page;; 


CMU/SEI—89-TR-5 


73 







function Opposite_Side (This_Side: in Cb_Side_Names) return Cb_Side_Names is 

—I . 

—/ Description: 

—/ A function to find the opposite side of a Cb 

—I 

—/ Parameter Description: 

—/ This_Side is the side for which the opposite is sought 
—/ Side_Names is the opposite side. 

—I 

—/ Notes: 

—I USED FOR CONTROL ELEMENTS SUCH AS ChS, RELAYS AND 
—I SWITCHES. 


The_Side: Cb_Side_Names> Side_1; — one of the sides 

begin 

— select opposite side based on what this side is. 

if This_Side ■ Side_1 then 

The_Side> Side_2; — the other side 

end If; 

RETURN The_Side; 
end Opposite_Side; 

pragma Page;; 


74 


CMU/SEI-69-TR-5 







function New_Cb (Position : In Cb_Posrtion; 

Rating : In Cb_Rating) 
return Cb Is 

—I . 

—/ Description: 

—/ Creates a new Cb as a private type. 

—/ This function returns a pointer to a new Cb object 
—/ representation. This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

-I 

—/ Parameter Description: 

—/ Position the default state of the Position 

—/ Rating the default state of the Rating 

—/ Cb is the access to the private data representabn 

—I . 

The_New_Object: Cb> new Cb_Representation; 
begin 

Th e_N ew_Obj ect. Pos itio n > Pos rt io n; 

The_New_Object.Rating:* Rating; 

RETURN The_New_Object; 
end New_Cb; 

pragma Page; 


CMU/SEI-89-TR-5 


75 






procedure Give_VoltageJ_cf_To (A_Cb : In Cb; 

A_Cb_Side : In Cb_Side_Names; 

Volts : In Eu.Voltage; 

Load_Con vers Ion : In Eu.Load_Conversion_Factor) Is 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Cb. 

—I 

—/ Parameter Description: 

—I A_Cb is the Cb being acted on. 

—I A_Cb_Side is the side of the Cb to be updated 
—/ Volts is the Voltage to be given to the Cb 
—/ Load_Conversion is the LCF to be given to the Cb 

—I . 

begin 

A_Cb.Points (A_Cb_Side).V> Volts; 

A_Cb.Points (A_Cb_Side).Lcf> Load_Con vers ion; 
end Give_Vo!tage_Lcf_To; 

pragma Page; 


76 


CMU/SEI-89-TR-5 





procedure Give_Current_To (A_Cb : In Cb; 

A_Cb_Side : In Cb_Side_Names; 
Load : In Eu Current) Is 

—I . 

—/ Description: 

—/ Places Current on a specific side of a Cb . 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb being acted on. 

—I A_Cb_Side is the side of the Cb to be updated 
—/ Current is declared in Electrical_Units 

—I . 

begin 

A_Cb.Points (A_Cb_Side).l> Load; 
end Give_Current_To; 

pragma Page; 


CMU/SEI-89-TR-5 


77 






procedure Give_Power_lnfo_To (A_Cb : In Cb; 

A_Cb_Side : in Cb_Side_Names; 
External_Power_lnfo : In EuPowerJnfo) Is 

—I . 

—/ Description: 

—/ Places Power_!nfo on a specific side of a Cb. 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb being acted on. 

—/ AjCb_Side is the side of the Cb to be updated 
—/ Power Jnfo is declared in Electrical^Units 

—I . 

begin 

A_Cb.Points (A_Cb_Side)> External_Power_lnfo; 
end Give_PowerJnfo_To; 

pragma Page; 


78 


CMU/SEI-89-TR-5 





function Get_Power_lnfo_From (A_Cb . in Cb; 

A_Cb_Side : In Cb_Side_Names) 
return Eu.PowerJnfo Is 

—I . 

—/ Description: 

—/ Returns Powerjnfo associated with a specific side of an Cb. 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb being acted on. 

—/ A_Cb_Side is the side queried 
—/ Powerjnfo is declared in ElectricalJUnits 

—I . . 

The_Power_lnfo: Eu.PowerJnfo; 
begin 

If A_Cb.Position - Closed then 

The_PowerJnfo> A_CbPoints (Opposite_Side (A_Cb_Side)); 

end If; 

RETURN The_PowerJnfo; 
end Get_PowerJnfo_From; 

pragma Page; 


CMU/SEl—89-TR-5 


79 






procedure Give_Position_To (A_Cb : In Cb; 

Position : In Cb_Position) Is 

—I . 

—/ Description: 

—/ Updates the state of Position to correspond to current 
—/ external conditions 

—I 

—/ Parameter Description: 

—I A_Cb is the Cb to be updated 
—/ Position is a new Cb_Position 

—I 

—I . 

begin 

A__Cb.Position:* Position; 
end Give_Position_To; 

pragma Page; 


80 


CMU/SEI-89-TR-5 





function Get_Position_From (A_Cb : in Cb) return Cb_Position is 

—I . 

—/ Description: 

—/ Returns the state of Position 

—I 

—/ Parameter Description: 

—/ A_Cb is the Cb queried 
—I Cb_Position is the state of the Position 

-I 

—I . 

begin 

RETURN A_Cb.Position; 
end Get_Position_From; 

-/... 

—/ Modification History: 

—/ 05Oct87 tac Replaced all occurances of -connection- with 
—i "Point-. 

—/ 30Apr87 ki Updated read routines to reflect operation of a Cb. 

—/ 28Apr87ki Added powerJnfo routines 
—/ 20Mar87kl Created 
—i 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—i . 

end Cb_Object_Manager; 
pragma Page; 


CMU/SEI-89-TR-5 


81 








D.6 Package Tru_Object_Manager 


-/. 

—I Module Name: 

—I Trv_ Object_Manager 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package implements the type manager for objects 
—/ which simulate the electrical system Tru . 

—/ This management entails creation of Tru objects, 

—/ update, maintenance of its state, and state reporting capabilities. 

—/- 

—/ Module Description: 

—/ The Tru_Object_Manager provides a means to create 
—/ an Tru object via the New_ Tru operation and returns 
—/ an identification for the Tru, which is to be used when 
—/ updating/accessing the Tru object’s state as described below. 

-i 

—/ There are four functions that are common to every object: 

—I 

—/ procedure Give_Voftage_Lcf_To (A_Tru: in Tru; 

—/ A_ Tru_Side: in Tru_Side_Names; 

—/ Volts: in EU. Voltage; 

—/ Load Conversion : in EU.Load_Conversion_Factor); 

—I 

—/ procedure Give_Current^To (A_Tru : in Tru; 

—/ AJTru_Side: in Tru_Side_Names; 

—/ Load: in EU. Current); 

—I 

—/ procedure Give_Power_Info_To (A_Tru : in Tru; 

—/ A_Tru_Side : in Tru_Side_Names; 

—/ Extemal_Power_lnfo : in EU.Power_lnfo); 

—I 

—/ function Get_Power_In fo_From (A_ Tru: in Tru; 

—/ A_Tru_Side: in Tru_Side_Names) 

—/ return EU.PowerJnfo; 

—I 

—/ Notes: 

—/ Tru is an element of an electrical circuit. Elements are 
—/ connected to connections. Connections read state information from 
—/ an element on one side and write to an element on their other side 

—I 

—/ One attribute every electrical system object has is Side^Names. 

—/ In order to simulate energy 1k>w in a system, the sides 
—/ of an object hold the flow through the system to that point: 

—I 


82 


CMU/SEI-89-TR-5 





volts 


volts 


—I 

—I -> X an Y -> 

—I 

—I load - load 

—I 

—I The voltage flow through the system to the object is stored at side X 
—I The load flow through the system to the object is stored at side Y. 

—I The object operation Get_Power_ lnfo_ From (a_side -> Y) returns the 
—I value of powerJnfo from side X. 

—I 

—I . 

with Electrical_Units; 
package Tru_Object_Manager Is 

package Eu renames ElectricalJJnits; 
type Tru is private; 

type Tru_Side_Names Is (Ac_Side, Dc_Side); 

function New_Tru (Lcf: In Eu.Load_Conversion_Factor; 

Load : in Eu.Current) 
return Tru; 

—I . 

—/ Description: 

—/ Creates a new Tru as a private type 
—/ This function returns a pointer to a new Tru object 
—/ representation. This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

—I 

—/ Parameter Description: 

—/ Lcf the default state of the Lcf 
—/ Load the default state of the Load 
—/ Tru is the access to the private data representaion 
—/ 

procedure Give_Vottage_Lcf_To (A_Tru : in Tru; 

A_Tru_Side : In Tru_Side_Names; 

Volts : In Eu.Voltage; 

Load_Conversion : In Eu.Load_Conversion_Factor); 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Tru. 

—I 

—/ Parameter Description: 

—/ A_Tru is the Tru being acted on. 

—/ A_ Tru_Side is the side of the Tru to be updated 
—/ Volts is the Voltage to be given to the Tru 
—/ Ljd ad_Conversion is the LCF to be given to the Tru 

—I . 


CMU/SEI-S9-TR-5 


83 














procedure Give_Current_To (A_Tru : in Tru; 

A_Tru_Side : in Tru_Side_Names; 
Load : in Eu.Current); 

—I . 

—/ Description: 

—/ Places Current on a specific side of a Tru. 

-I 

—/ Parameter Description: 

—/ A_ Tru is the Tru being acted on. 

—/ A_Tru_Side is the side of the Tru to be updated 
—/ Current is declared in Electncal_Unhs 

—I . 

procedure Give_PowerJnfo_To (A_Tru : in Tru; 

A_Tru_Side : in Tru_Side_Names; 

ExternaI_Power_info : in Eu.PowerJnfo); 

—I . 

—/ Description: 

—/ Places Power_lnfo on a specific side of a Tru. 

—I 

—/ Parameter Description: 

—/ A_Tru is the Tru being acted on. 

—/ A_Tru_Side is the side of the Tru to be updated 
—/ Power__ Info is declared in Electrical^ Units 

-I . 

function Get_Power_info_From (A_Tru : in Tru; 

A_Tru_Side : in Tru_Side_Names) 
return Eu.PowerJnfo; 

—I . 

—/ Description: 

—/ Returns Power_lnfo associated with a specific side of an Tru. 
—I 

—/ Parameter Description: 

—/ A_Tru is the Tru being acted on. 

—/ A_Tru_Side is the side queried 
—/ Power_lnfo is declared in Electrical_Units 

-I . 

pragma Inline ( 

NewJTru, 

G ive_Vo Hag e_Lcf_To, 

G rve_Cu rre nt_To, 

Give_PowerJnfo_To, 

G et_Po we rJ n f o_F ro m 

); 


private 

type Tru_Representation; — incomplete type, defined in package body 
type Tru is access Tru_Representation; — pointer to an Tru representation 


84 


CMU/SEI-S9-TR-5 









-/. 

—/ Modification History: 

—/ 21Apr87 kl changed connection arguments to Tru arguments 
—/ 28Apr87 kl Updated to include powerjnfo routines 
—/ 20Mar87 kl Created 

—I 

—t - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

-i . 

end Tru_Object_Manager; 
pragma Page; 


CMU/SEI-89-TR-5 


85 








D.7 Package Body Tru_Object_Manager 


-i . 

—/ Module Name: 

—/ TrujObject_Manager 

—I 

—/ Module Type: 

—/ Package Body 

—I 

—f - 

—/ Module Description: 

—/ Manipulates private data structures that represent 
—/ a Tru § and contact points on a Tru. 

—I 

—/ Notes: 

—/ none 

—I . 

package body Tru_Object_Manager is 

type Point_Representation is array (Tru_Side_Names) of Eu PowerJnfo; 

— representation of a Tru 

type Tru_Representation is 
record 

Points: Point_Representation; 

Lcf: Eu.Load_Conversion_Factor> Eu.No_Load_Conversion; 
Load: Eu.Current:* Eu.No_Current; 
end record; 

function "+"(A_Current: in Eu.Current; 

Another_Current: in Eu.Current) 
return Eu.Current renames Eu.V; 


pragma Page; 


86 


CMU/SEI-89-TR-5 






function Opposite_Side (This_Side: in Tru_Side_Names) return Tru_Side_Names is 

—I . 

—/ Description: 

—/ A function to find the opposite side of a Tru 

—I 

—/ Parameter Description: 

—I This_Side is the side for which the opposite is sought. 

—/ Side_Names is the opposite side. 

-i 

—/ Notes: 

—I USED FOR CONTROL ELEMENTS SUCH AS TruS, RELAYS AND 
—I SWITCHES. 

-I . 

The_Side : Tru_Side_Names > Ac_Side; — one of the sides 

begin 

— select opposite side based on what this side is. 

if This_Side * Ac_Side then 
The_Side > Dc_Side; 

end if; 

RETURN The_Side; 
end Opposite_Side; 

pragma Page; 


CMU/SEI-89-TR-5 


87 





function NewJTru (Lcf: In Eu.Load_Conversion_Factor; 

Load : In Eu.Current) 
return Tru is 

-I . 

—/ Description: 

—/ Creates a new Tru as a private type. 

—/ This function returns a pointer to a new Tru object 
—/ representation. This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

—I 

—/ Parameter Description: 

—/ Lcf the default state of the Lcf 

—/ Load the default state of the Load 

—/ Tru is the access to the private data representahn 

—I . 

The_New_Object: Tru> new Tru_Representation; 
begin 

The_New_Object.Lcf> Lcf; 

The_New_Object.Load> Load; 

RETURN The_New_Object; 
end New_Tru; 

pragma Page; 


88 


CMU/SEI-89-TR-5 





procedure Give_Voltage_Lcf_To (A_Tru : In Tru; 

A_Tru_Side: In Tru_Slde_Names; 

Volts : In Eu.Voltage; 

Load_Conversion : In Eu.Load_Conversion_Factor) Is 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Tru. 

—I 

—/ Parameter Description: 

—/ A_Tru is the Tru being acted on. 

—/ A_Tru_Side is the side of the Tru to be updated 
—/ Volts is the Voltage to be given to the Tru 
—/ Load_Conversion is the LCF to be given to the Tru 

—I . . . 

begin 

A_Tru.Points (A_Tru_Side).V > Volts; 

A_Tru.Points (A_Tru_Side).Lcf > Load_Ck)nversion; 
end Give_Voltage_Ld_To; 

pragma Page; 


CMU/SEI-S9-TR-5 


89 






procedure Give_Current_To (A_Tru : in Tru; 

A_Tru_Side : In Tru_Side_Names; 
Load : In Eu.Current) Is 

—I ... 

—/ Description: 

—/ Piaces Current on a specific side of a Tru. 

—I 

—/ Parameter Description: 

—/ A_ Tru is the Tru being acted on. 

—/ A_Tru_Side is the side of the Tru to be updated 
—/ Current is deciared in Electricai_Units 

—I . 

begin 

A_Tru.Points (A_Tru_Side).l> Load; 
end Give_Current_To; 

pragma Page; 


90 


CMU/SEI-89-TR-5 





procedure Give_Power_info_To (ATru : in Tru; 
A_Tru_Side : in Tru_Side_Names; 
External_PowerJnfo : in Eu.PowerJnfo) Is 

—I . 

—/ Description: 

—/ Places Power_lnfo on a specific side of a Tru. 

—I 

—/ Parameter Description: 

—/ A_Tru is the Tru being acted on. 

—I A_Tru_Side is the side of the Tru to be updated 
—/ Power_lnfo is declared in Electrical Units 

—I . 

begin 

A_Tru.Points (A_Tru_Side)> Externai_Power_lnfo; 
end Give_Power_lnfo_To; 

pragma Page; 


CMU/SEI-89-TR-5 


91 








function Get_Power_lnfo_From (A_Tru : In Tru; 

A_Tru_Side : In Tru_Side_Names) 
return Eu.Power_lnfo Is 

—I . 

—/ Description: 

—/ Returns Power_lnfo associated with a specific side of an Tru. 

-I 

—/ Parameter Description: 

—I A_Tru is the Tru being acted on. 

—I A_ Tru_Side is the side queried 
—/ Power_lnfo is declared in Electrical_Units 

—I . 

The_Voltage : Eu.Voltage :« Eu.Fk>ating_Voltage; 

The_Current: Eu.Current > Eu.No_Current; 

The_Lcf : Eu.Load_Conversion_FactorEu.No_Load_Con vers ion; 
The_PowerJnfo : Eu.PowerJnfo; 

begin 

case A_Tru_Side Is 
when Ac_Side »> 

The_Current > 

A_Tru.Points (Opposite_Side (A_Tru_Side)).l + A_Tru.Load; 
when Dc_Side -> 

The_Lcf > A_Tru.Ld; 

The_Voltage > A_Tru.Points (Opposite_Side (A_Tru_Side)).V; 

end case; 

The_Power_lnfo.V > The_Voltage; 

The_Power_lnfo.l > The_Current; 

The_Power_lnfo.Lcf > The_Lcf; 

RETURN The_Power_lnfo; 
end Get_Power_lnfo_From; 

-/. 

—/ Modification History: 

—/ 09Oct87 tac Reinstated enumeration types Tru_side_names. 

—/ 05Oct87 tac Replaced all occurances of *connection ” with 
—I Toint m . 

—/ 30Apr87 kl Updated read routines to reflect operation of a Tru. 

—/ 28Apr87 kl Added power_info routines 
—/ 20Mar87kl Created 

—I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Tru_Object_Manager; 
pragma Page; 


92 


CMU/SEI-89-TR-5 








D.8 Package Bus_Object_Manager 


-I . 

—/ Module Name: 

—/ Bus_Object_Manager 

-I 

—/ Module Type: 

—/ Package Specification 

—I 

—I Module Purpose: 

—/ This package implements the type manager for objects 
—/ which simulate the electrical system Bus. 

—/ This management entails creation of Bus objects, 

—/ update, maintenance of its state, and state 
—/ reporting capabilities. 

—/- 

—/ Module Description: 

—/ The Bus_Object_Manager provides a means to create 
—/ an Bus object via the New_Bus operation and returns 
—/ an identification for the Bus f which is to be used when 
—/ updating/accessing the Bus object's state as described below. 

—I 

—/ The Bus_Object_Manager provides a means of obtaining 
—/ state information via the: 

—/ 1) Get_Number_Of_Points_From 

—/ operation, yielding the following internal state information: 

—/ 1) Number_Of_Points: Integer 

—I 

—/ There are also four functions that are common to every object: 
—I 

—/ procedure Give_ Voltage_Lcf_ To (A_Bus : in Bus; 

—/ A_Bus_Side : in Bus_Side_Names; 

—/ Volts : in EU. Voltage; 

—/ Load_Conversion : in EU.Load_Conversion^actor); 

—I 

—/ procedure Give_Current_To (A_Bus : in Bus; 

—/ A_Bus_Side : in Bus_Side_Names; 

—/ Load: in EU. Current); 

—I 

—/ procedure Give_Power_lnfo_To (A_Bus : in Bus; 

—/ A_Bus_Side : in Bus_Side_Names; 

—/ Extemal_Power_lnfo : in EU.Power_lnfo); 

-I 

—/ function Get_Power_Info_From (A_Bus : in Bus; 

—/ A_Bus_Side : in Bus_Side_Names) 

—/ return EU.Po wer_lnfo; 

—i 

—/ Notes: 

—/ Bus is an element of an electrical circuit. A bus object exists 


CMU/SEI-89-TR-5 


93 








—/ between every other pair of connected objects. A bus object may 
—/ have any number of connections. The bus object operations implement 
—/ Kirchoffs current and voltage laws. 

—I . 

with Electrical_Unrts; 
package Bus_Object_Manager Is 

package Eu renames ElectricalJJnits; 
type Bus Is private; 

Maximum_Points_On_A_Bus : constant Integer > 50; 

subtype Bus_Side__Names Is Integer range 1 .. Maximum_Points_On_A_Bus; 
function New_Bus (Number_Of_Points : In Integer) return Bus; 

—I . 

—/ Description: 

—/ Creates a new Bus as a private type. 

—/ This function returns a pointer to a new Bus object 
—/ representation. This pointer will be used to access 
—/ the object for state update and state reporting purposes. 

—I 

—/ Parameter Description: 

—/ Number_Of_Points the default state of the Number_Of_Points 
—/ Bus is the access to the private data representaion 

—I 

—I . 

procedure Give_Voitage_Lcf_To (A_Bus : In Bus; 

A_Bus_Side : In Bus_Side_Names; 

Votts : In Eu.Voitage; 

Load_Conversion : In Eu.Load_Conversion_Factor); 

—I . 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Bus. 

—I 

—/ Parameter Description: 

—/ A_Bus is the Bus being acted on. 

—/ A_Bus_Side is the side of the Bus to be updated 
—/ Volts is the Voltage to be given to the Bus 
—/ Load_Conversion is the LCF to be given to the Bus 

—I . 

procedure Give_Current_To (A_Bus : In Bus; 

A_Bus_Side : In Bus_Side_Names; 

Load : In Eu.Current); 

—I . 

—/ Description: 

—/ Places Current on a specific side of a Bus. 

—I 

—/ Parameter Description: 


94 


CMU/SEI-89-TR-5 









—I A_Bus is the Bus being acted on, 

—I A_Bus_Side is the side of the Bus to be updated 
—/ Current is declared in Eledrical_Units 

-I . 

procedure Give_Power_lnfo_To (A_Bus : In Bus; 

A_Bus_Side : In Bus_Side_Names; 

Extemal_Power_lnfo : In Eu.Power_lnfo); 

—I . 

—/ Description: 

—/ Places Power_lnfo on a specific side of a Bus. 

—I 

—/ Parameter Description: 

—/ AJBus is the Bus being aded on. 

—I AJBusJSide b the side of the Bus to be updated 
—/ Power_!nfo is declared in EledricalJUnits 

—I . 

function Get__Power_lnfo_From (A_Bus : In Bus; 

A_Bus_Side : In Bus_Side_Names) 
return Eu.PowerJnfo; 

-I . 

—/ Description: 

—/ Returns Power_lnfo associated with a specific side of an Bus. 

—I 

—/ Parameter Description: 

—/ A_Bus is the Bus being acted on. 

—/ A_Bus_Side is the side queried 
—/ Power info is declared in EledricalJUnits 

—I . 

function Get_Number_Of_Points_From (A_Bus : In Bus) return integer; 

—I . 

—/ Description: 

—/ Returns the state of Number_Of_Points 

-I 

—/ Parameter Description: 

—/ AJBus is the Bus queried 
—/ Integer is the state of the Number_Of_Points 

-I 

—I . 

pragma Inline ( 

New_Bus, 

Give_Voftage_Ld_To, 

Give_Cu rrent_To, 

G i ve_Po we r_lnf o_To, 

G et_Po w e rJ nfo_Fro m, 

Get_N u mberjOf__Points_From 

); 


CMU/SEI-89-TR-5 


95 











private 

type Bus_Representation (Number_Of_Points:Bus_Side_Names); 

— incomplete type , defined in package body 

type Bus Is access Bu$_Representation; — pointer to an Bus representation 


—I . 

—/ Modification History: 

—I 28Feb89 kl changed all occurances of "wire" to ’bus" 

—/ 21Apr87 kl changed connection arguments to wire arguments 
—/ 28Apr87 kl Updated to include power Jnfo routines 
—/ 20Mar87 kl Created 

—I 

-/ - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Bus_Object_Manager; 
pragma Page; 


96 


CMU/SEI-89-TR-5 






D.9 Package Body Bus_Object_Manager 


—/. 

—/ Module Name: 

—/ Bus_Objec1_Manager 

-I 

—/ Module Type: 

—/ Package Body 

-I 

—/- 

—/ Module Description: 

—/ Manipulates private data structures that represent 
—/ a Bus , and confacf po/nfs on a Sus. 

—I 

—/ Notes: 

—/ none 

-I . 

package body Bus_Object_Manager Is 

type Bus_Va!ues Is array (Bus_Side_Names range 
) of Eu.Power_lnfo; 


— representation of a Bus 

type Bus_Representation (Number_Of_Pomts: Bus_Side_Names)ls 

record 

Inputs : Bus_Va!ues (1 .. Number_Of_Points); 

Outputs : Bus_Values (1 .. Number_Of_Points); 

Load_Values_Have_Changed; Boolean > False; 
Vottage_Values_Have_Changed: Boolean:** False; 

end record; 

— functions required for operations on EU values 

— without using a USE clause, these functions are not 

— available, so they have to be explicitly renamed 

function (A_Lcf: In Eu.Load_Conversion_Factor; 

Another_Lcf: In Eu.Load_Conversion_Factor) 
return Eu.Load_Conversion_Factor renames Eu. - + - ; 
function (A_Ld: In Eu.Load_Conversion_Factor; 

Another_Lcf: In Eu.Load_Conversion_Factor) 
return Eu.Load_Ck)nversion_Factor renames Eu."-’; 
function T (A_Lcf: In Eu.Load_Conversion_Factor; 

Another_Lcf: In Eu.Load_Conversion_Factor) 
return Eu.Load_Conversion_Factor renames Eu.T; 
function (A_Lcf: In Eu.Load_Conversion_Factor; 

Another_Lcf: In Eu.Load_Conversion_Factor) 
return Boolean renames Eu."-"; 


CMU/SEI-89-TR-5 


97 








function (A_Current: in Eu.Current; 

Another_Current; in Eu.Current) 
return Boolean renames Eu. - -"; 
function "+" (A_Current: in Eu.Current; 

Another_Current: in Eu.Current) 
return Eu.Current renames Eu. V; 
function *-* (A_Current: in Eu.Current; 

Another_Current: in Eu.Current) 
return Eu.Current renames Eu.V; 
function (A_Voltage: in Eu.Vottage; 

Another_Voltage: in Eu.Vottage) 
return Boolean renames Eu.’V; 
function ">■ (A_Vottage: in Eu.Voltage; 

Another_Voltage: in Eu.Vottage) 
return Boolean renames Eu.’V; 


pragma Page; 


98 


CMU/SEI-89-TR-5 



function NewBus (Number_Of_Points ; In Integer) return Bus Is 

—I . 

—/ Description: 

—/ Creates a new Bus as a private type. 

—/ This function returns a pointer to a new Bus object 
—/ representation This pointer will be used to identify 
—/ the object for state update and state reporting purposes. 

—I 

—/ Parameter Description: 

—/ Number_OfJPoints the default state of the Number_Of_Points 
—/ Bus is the access to the private data representaion 

—I 

—I . 


The New Object: Bus:- new Bus_Representatbn (Number_Of_Points); 


begin 

RETURN The_New_Object; 
end New_Bus; 


pragma Page; 


CMU/SEI-S9-TR-5 


99 







function (A_Current: In Eu.Current; 

A_Lcf: in Eu.Load_Conversion_Factor) 
return Eu.Current is 

—I . 

—/ Description: 

—/ Function m * m is used for determining current propagation. 

—I 

—/ Parameter Description: 

—/ A_Current and AJLcf are values that need to be multiplied 
—/ in the determination of a current value for propagation. 

—I 

—/ return value of Current will be propagated to other 
—/ connections. 

-I 

—/ Notes: 

—/ none 

—I . . 

begin 

RETURN Eu.Current (Float (A_Current) * Float (A_Lcf)); 

end 

pragma Page; 


100 


CMU/SEI-89-TR-5 







procedure Give_Voltage_Lcf_To (A_Bus : In Bus; 

A_Bus_Side : In Bus_Side_Names; 

Volts : In Eu.Voltage; 

Load_Conversion : In Eu.Load_Conversion_Factor) Is 

-/. 

—/ Description: 

—/ Places Voltage and LCF on a specific side of a Bus. 

—I 

—/ Parameter Description: 

—/ A_Bus is the Bus being acted on. 

—/ A_Bus_Stde is the side of the Bus to be updated 
—/ Volts is the Voltage to be given to the Bus 
—/ Load_Conversion is the LCF to be given to the Bus 

—I . 

begin 

If A_Bus.lnputs(A_Bus_Side).V /* Volts then 

A__Bus.Voftage_Values_Have_Changed > True; 
A_Bus.1nputs(A_Bus_Side).V > Volts; 

end If; 

If A_Bus.lnputs(A_Bus_Side).Lcf /« Load_Conversion then 
A_Bus.Load_Values_Have_Changed > True; 

A_Bus lnputs(A_Bus_Side).Lcf :« Load_Corvvers ion; 

end If; 

end Give_Voltage_Lcf_To; 
pragma Page; 


CMU/SEMJ9-TR-5 


101 







procedure Give_Current_To (A_Bus : in Bus; 

A_Bus_Side : in Bus_Side_Names; 
Load : in Eu Current) Is 

—I . 

—/ Description: 

—/ Places Current on a specific side of a Bus. 

—I 

—/ Parameter Description: 

—/ A_Bus is the Bus being acted on. 

—/ A_Bus_Side is the side of the Bus to be updated 
—/ Current is declared in Electhcal_Units 

—I . . 

begin 

If A_Bu$Jnputs(A_Bus_Side).l /« Load then 

A_Bus.Load_Values_Have_Changed > True; 
A_Bus.input$(A_B us _Side).i > Load; 

end if; 

end Give_Current_To; 
pragma Page; 


102 


CMU/SEI-B9-TR-5 





procedure Give_Power_lnfo_To (A_Bu$ : In Bus; 

A_Bus_Side * In Bus_S»de_Names; 

External_Power_lnfo : In Eu.PowerJnfo) Is 

—I . 

—/ Description: 

—/ Places Power Jnfo on a specific side of a Bus. 

—I 

—/ Parameter Description: 

—/ A_Bus is the Bus being acted on. 

—/ AJBus_Side is the side of the Bus to be updated 
—/ Power_lnfo is declared in Electrical Units 

—I . 

begin 

If A_Bus.lnputs(A_Bus_Side).V /« External_Power_lnfo.V then 
A_Bus.Voftage_Values_Have__Changed > True; 
A_Bus.lnputs(A_Bus_S»de).V Extemal__PoweMnfo.V; 
end If; 

If A_J3us.lnputs(A_Bus_Side).l /- External_Power_lnfo.l or 
A_Bus.lnputs(A_Bus_Slde).Lcf /« Extemal_Power_lnfo.Lcf then 
A_Bus.Load_Values_Have_Changed > True; 
A_Bus.lnputs(A_Bus_S»de).l > External_Power_lnfo.l; 
A_Bus.lnputs(A_Bus_SkJe).Lcf > External_Power_lnfo Lcf; 
end If; 

end Give_Power_lnfo_To; 
pragma Page; 


CMU/SEI-89-TR-5 


103 







function Get_Power_lnfo_From (A_Bus . In Bus; 

A_Bus_Side : In Bus_Side_Names) 
return Eu.PoweMnfo Is 

—I . 

—/ Description: 

—/ Returns Power_lnfo associated with a specific side of an Bus. 

—I 

—/ Parameter Description: 

—/ AJBus is the Bus being acted on. 

—/ A_Bus_Side is the side queried 
—/ PowerJinfo is declared in Electrical_Units 

—I . 

The_Vottage: Eu.VoUage; 

The_Lcf: Eu.Load_Conversion_Factor > Eu.No_Load_Conversion; 
TheJDurrent: Eu.Current:« Eu.No_Current; 

begin 

If A_Bus.Voltage_VaIues_Have_Changed then 
for A_Side In A_Bus.Inputs*First.. A_Bus.Inputs'Last loop 
The_Voltage > Eu.Floating_Voltage; 

for A_Point In A_Bus.lnputs’First.. A^Bus.lnputs’Last loop 
If A_Point /« A_Side then 
If A_Bus.Inputs (A_Point).V > The_VoKage then 
The_Voltage > A_Bus.Inputs (A_Point).V; 

end If; 
end If; 
end loop; 

A_Bus.Outputs(A_Side).V := The_Voltage; 

end loop; 

A_Bus.Vottage_Values_Have_Changed := False; 

end if; 

If A_Bus.Load_Values_Have_Changed then 
for A_Point In A_Bus.lnputs’First.. A_Bus.Inputs’Last loop 
The_Lcf > The_Lcf + A_Bus.lnputs(A_Point).Lcf; 

end loop; 

for A_Side In A_Bus.Outputs’First.. A_Bus.Outputs*Last loop 
The_Current:« Eu.No_Current; 

for A_Point In A_Bus.Outputs’First.. A_Bus.Outputs'Last loop 
If (A_Point /- A_Side) and then 

(The_Lcf - A_Bus.Inputs(A_Point).Lcf /- 0.0) then 
The_CurrentThejCurrent + (A_Bus.Inputs(A_Point).l * 
(A_Bus.Inputs(A_Side).Lcf / 

(TheJ_cf - A_Bus.Inputs(A_Point).Lcf))); 


104 


CMU/SEI-89-TR-5 






end if; 
end loop; 


A_Bus.Outputs(A_Side) i:« The_Current; 

A_Bus.Outputs(A_Side).Ld > The_Lcf - A_Bus.lnputs(A_Side).Lcf; 

end loop; 

A_Bus.Load_Values_Have_Changed > False; 

end if; 

RETURN A_Bus.Outputs(A_Bus_Side); 
end Get_Power_lnfo_From; 

pragma Page; 


CMU/SEI-89-TR-5 


105 






function Get_Number_Of_Points_From (A_Bus : In Bus) return Integer is 

—I . 

—/ Description: 

—/ Returns the state of Number_Of_Points 

-I 

—/ Parameter Description: 

—/ A_Bus is the Bus queried 
—/ integer is the Number_Of_Points 

—I . 

begin 

RETURN A_Bus.Number_Of_Points; 
end Get_Number_Of_Points_From; 

—I . 

—/ Modification History: 

—/ 28Feb89 kl changed all occurances of "wire" with "bus" 

—/ 09Oct87 tac Reinstated enumeration types Bus_side_names. 

—/ 05Oct87 tac Replaced all occurances of m connection " with 
—I m Point\ 

—/ 30Apr87 kl Updated read routines to reflect operation of a wire 
—/ 28Apr87 kl Added powerJnfo routines 
—/ 20Mar87 kl Created 

—I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I ... 

end Bus_Object_Manager; 


106 


CMU/SEI-89-TR-5 









D.10 Package Dc_Power_System_Aggregate 


—/. 

—/ Module Name: 

—/ Dc_Power_System_Aggregate 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package establishes the object aggregates which represent the bwest 
—/ level of dc power. 

—I 

—/- 

—/ Module Description: 

—/ The structures which form the aggregate of object information 
—/ are defined here. Instantiation of the objects 
—/ occurs in a set of constant arrays. 

—I 

—/ Notes: 

—/ This package has no body 

—I . 


— For the private type CB, the NewjCb operation, 

— and the types of its parameters. 

with Cb_Object_Manager; 

— For the private type TRU, the New_Tru operation, 

— and the types of its parameters. 

with Tru_Object_Manager; 

— For the private type Bus, the New_Bus operation, 

— and the types of its parameters. 

with Bus_Object_Manager; 
with Global_Types; 

package Dc_Power_System_Aggregate Is 

type Cb_Names Is ( 

— CB's between TRUs and tie_bus_ 1 

Cb_1 J, 

Cb_2_1, 

Cb_3_1, 

— CB between tie_bus_ 1 and tie_bus_2 
Cb_Tb_i_2, 


CMU/SEI-89-TR-5 


107 






— CB between tie_bus_2 and dc_main_4 
Cb_Tb_2_1 1 

— CBs tied to dc_main_1 

Cb_1_2, 

Cb_1_3, 

— CB tied to dc_main_2 
Cb_2_2, 

— CBs tied to dc_main_3 

Cb_3_2, 

Cb_3_3, 

Cb_3_4, 

— CB between tie_bus_ 1 and dc_power_bus_7 
Cb_Tb_1 _1, 

— CBs between dc_main_4 and dc jx>wer_bus S, 9, and 10 
Cb_4_1, 

Cb_4_2, 

Cb_4_3 

); 


— define a table in which the objects are instantiated and 

— can be referenced by the name . 

Nam 0 d_Cbs : constant array (Cb_Names) of Cb_Object_Manager.Cb :« ( 
Cb_1_1 -> Cb_Object_Manager.New_Cb 

(Position *> Cb_Object_Manager.Clos 0 d t Rating *> 50.0), 

Cb_2_1 «> Cb_Obj0Ct_Manag©r.Now_Cb 

(Position -> Cb_Obj 0 Ct_ManagorCbsod, Rating «> 50.0), 

Cb_3_J *> Cb_Objoct_Manag 0 r.Now_Cb 

(Position *> Cb_Object_Managor.Clos 0 d, Rating -> 50.0), 

Cb_Tb_1 _2 «> Cb_Objoct_Managor.N 0 w_Cb 

(Position «> Cb_Obj 0 Ct_Managor.Clos 0 d, Rating «> 50.0), 
Cb_Tb_2_1 *> Cb_Object_Managor.Now_Cb 

(Position -> Cb_Obj 0 ct_Manag 0 r.Closod, Rating -> 50.0), 

Cb_1 _2 -> Cb_Objoct_Managor.N 0 w_Cb 

(Position -> Cb_Obj 0 Ct_Managor.Cios 0 d, Rating -> 50.0), 

Cb_1_3 -> Cb_Obj 0 Ct_Managor.Now_Cb 

(Position *> Cb_Obj 0 Ct_Managor.C(osod, Rating -> 50.0), 

Cb_2_2 -> Cb_Objoct_Managor.N 0 w_Cb 

(Position -> Cb_Object_Managor.Closod, Rating -> 50.0), 

Cb_3_2 «> Cb_Object_Managor.N 0 w_Cb 

(Position *> Cb_Object_Manag 0 r.Closod, Rating «> 50.0), 


108 


CMU/SEM39-TR-5 



Cb_3_3 -> Cb_Object_Manager.New_Cb 

(Position -> Cb_Object_Manager.Ck>sed, Rating -> 50.0), 
Cb_3_4 «> Cb_Object_Manager.New_Cb 

(Position -> Cb_Object_Manager.Ck>sed, Rating «> 50.0), 
Cb_Tb_1_1 -> Cb_Object_Manager.New_Cb 

(Position -> Cb_Object_Manager.Closed, Rating «> 50.0), 
Cb_4_1 -> Cb_Object_Manager. New_Cb 

(Position -> Cb_Object_Manager. Closed, Rating «> 50.0), 
Cb_4_2 -> Cb_Object_Man ager. N ew_Cb 

(Position -> Cb_Object_Manager.Closed, Rating -> 50.0), 
Cb_4_3 -> Cb_Object_Manager.New_Cb 

(Position «> Cb_Object_Manager.Closed, Rating -> 50.0) 

); 


type Tru__Names Is ( 

Tru_1, 

Truj2, 

Tru_3, 

Tru_4, 

Tru_5, 

Tru_6); 

— define a table which instantiates TRU objects and allows them 

— to be referenced by name. 

Named_Trus : constant array (Trujslames) of Tru_Object_Manager.Tru > ( 
Tru_1 -> TruJDbject_Manager.New_Tru (Let «> 1.0, Load ■> 1.5), 

Tru_2 -> TrujObject_Manager.New_Tru (Let ■> 1.0, Load «> 1.5), 

Tru_3 -> Tru_Object_Manager.New_Tru (Lcf ■> 1.0, Load ■> 1.5), 

Tru_4 «> Tru_Object_Manager.New_Tru (Lcf -> 1.0, Load ■> 1.5), 

Tru_5 -> Tru_Object_Manager.New_Tru (Lcf -> 1.0, Load ■> 1.5), 

Tru_6 -> TrujObject_Manager.New_Tru (Lcf «> 1.0, Load -> 1.5)); 


type Bus_Names Is ( 

— Buses between TRUs and tie__bus_ 1 

Dc_Main_1, 

Dc_Main_2, 

Dc_Main_3, 

Tie_Bus_1, 

— Bus between tie_bus__ 1 and dc_main_4 
Tie_Bus_2, 

Dc_Main_4, 


CMU/SE1-89-TR-5 


109 





— Dc Power Buses 


Dc_Pow©r_Bus_1, 
Dc_Pow©r_Bus_2 t 
Dc_Pow©r_Bus_3, 
Dc_Po w©r_Bu s_4, 
Dc_Pow©r_Bus_5, 
Dc_Pow©r_Bus_6, 
Dc_Pow©r_Bus_7, 
Dc_Power_B u s_8, 
Dc_Po w©r_Bu s_9, 
Dc_Pow©r_Bus_10 
); 


— define a table which instantiates Bus objects and allows them 

— to be referenced by name. 

Nam©d_Bus©s : constant array (Bus_Nam©s) of Bus_Obj©ct_Manag©r.Bus > ( 
Dc_Main_1 -> 

Bus_Obj©ct_Manager.N©w_Bus (Numb©r_Of_Points -> 4), 

Dc_Main_2 ■> 

Bus_Obj©ct_Manag©r.New_Bus (Numb©r_Of_Points «> 3), 

Dc_Main_3 ■> 

Bus__Obj©ct_Manager.New_Bus (Numb©r_Of_Points -> 5) t 
Ti©__Bus_1 ■> 

Bus_Obj©ct_Manager.N©w_Bus (Numb©r_Of_Points -> 5), 

Ti©_Bus_2 ■> 

Bus_Obj©ct_Manag©r.New_Bus (Number_Of_Points *> 5), 

Dc_Main_4 ■> 

Bus_Obj©ct_Manag©r.N©w_Bus (Number_Of_Points -> 4), 
Dc_Power_Bus_1 -> 

Bus_Obj©ct_Manager.New_Bus (Number_Of_Points *> 2), 
Dc_Pow©r_Bus_2 -> 

Bus_Object_Manager.New_Bus (Numb©r_Of_Points *> 2), 
Dc_Pow©r_Bus_3 -> 

Bus_Obj©ct_Manager.N©w_Bus (Number_Of_Points -> 2), 
Dc_Pow©r_Bus_4 «> 

Bus_Obj©ct_Manag©r.N©w_Bus (Number_Of_Points -> 2), 
Dc_Pow©r_Bus_5 -> 

Bus_Object_Manager.New_Bus (Number_Of_Points «> 2), 
Dc_Power_Bus_6 -> 

Bus_Obj©ct_Manager.N©w_Bus (Numb©r_Of_Points -> 2), 

Dc_P o w © r_B u s_7 «> 

Bus_Obj©ct_Manag©r.New_Bus (Number_Of_Points -> 2), 
Dc_Pow©r_Bus_8 -> 

Bus_Obj©ct_Manag©r.New_Bus (Numb©r_Of_Points ■> 2), 
Dc_Power_Bus_9 ■> 

Bus_Obj©ct_Manag©r.N©w_Bus (Numb©r_Of_Points «> 2), 
Dc_Pow©r_Bus_10 -> 

Bus_Obj©ct_Manager.N©w_Bus (Numb©r_Of_Points -> 2) 

); 


110 


CMU/SEI-89-TR-5 



— matches an element kind with an element name and side 


type Element_Point 

(Element: Global_Types.Element_Class > Global_Types.A_Cb) Is 
record 

case Element Is 

when Global_Types.A_Cb «> 

Cb_Element: Cb_Names; 

Cb_Side : Cb_Objetf_Manager.Cb_Srte_Names; 
when Global_Types.A_Tru *> 

Tru_Element: Tru_Names; 

Tru_Side : Tru_Object_Manager.Tru_Side_Names; 
when Global_Types.A_Bus -> 

- Bus_Element: Bus_Names; 

Bus_Side : Bus_Object_Manager.Bus_Side_Names; 

end case; 
end record; 


—I . 

—/ Modification History: 

—/ 01 Mar89 kl changed all instances of "wire" to "bus"; 

—/ removed contractor specific names of components 

—/ 22Jun88 der removed Jnput_Point and included the 
—/ point information in the Bus side. 

—/ 16Jun88 der added InputJPoirrt to the Element point record 
—/ definition to support the Bus object . 

—/ 14Jun88 der Buses added to dc_power_agg regate definition . 

—/ 09Oct87 tac Eliminated Enumeration type Points in all 
—/ aggregates, and combined arrays which used it. 

—/ Reinstated enumeration types tru_skfe_name$, and 

—/ cb_side_names. Made changes to support modification to 

—/ element_class. 

—/ 01Sep87 tac removed packaging around dc_power_node_names, 

—/ dc_power_cb_names, dc_power_tru_names; deleted tru_no_2_cb, 

—/ tru_no_4_cb, and tru_no_8_cb from list of cb names enumerated 

—/ type; deleted tru_2_node, tru_4_node, and tru_8_node from 

—/ node_names enumerated type; adjusted cb_ * connection names 

—/ after deleting cb_ 1..cb_6 from connections enumerated type; 

—/ made changes to the_node_connections because of type 

—/ connections change; deleted entries for cb_ 1.. cb_6 in 

—/ the_connections constant array; added type side_names 

—/ from node_object_manager package; removed node from type 

—/ element_dass; removed node case option from type 

—/ connection_between_elements 

—/ 21Jul87 kl renamed package to dc_power_aggregate; 

—/ added dc_power_node_names, dc_power_cb_names, and 

—/ dcjx)wer_tru_names as subpackages 

—/ 04May87 kl removed class node; they are redundant 

—/ 03May87 kl removed class terminus; they can be modeled with 

—/ node connections 

—/ 02May87 kl updated element names used in 

—/ the_node_connections and the_connections. 


CMU/SE1-89-TR-5 


111 





—/ 24Apr87 kl created with element classes: cb, tru, terminus, 

—/ and node 

—I - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I .*. 

end Dc_Power_System_Aggregate; 
pragma Page; 


112 


CMU/SE1-89-TR-5 





D.11 Package Dummy_System_Aggregate 


—/. 

—/ Module Name: 

—/ Dummy_System_Aggregate 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package establishes the object aggregates which represent the bwest 
—/ level of a dummy system. 

—I 

—l - 

—/ Module Description: 

—/ The structures which form the aggregate of object information 
—/ are defined here. Instantiation of the objects 
—/ occurs in a set of constant arrays. 

—I 

—/ Notes: 

—/ This package has no body 

—I .*. . . . 

— For the private type Cb , and the New_Cb operation and 

— the types of its parameters. 

with Cb_Object_Manager; 
with Global_Types; 

package Dummy_System_Aggregate is 

— Dummy Cb names 

type Cb_Names is ( 

Dummy_Cb_1, 

Dummy_Cb_2, 

Dummy_Cb_3, 

Dummy_Cb_4, 

Dummy_Cb_5, 

Dummy_Gb_6, 

Dummy_Cb_7, 

Dummy_Cb_8, 

Dummy_Cb_9, 

Dummy_Cb_10); 

— instantiate Cbs for dummy system 

Named_Cbs : constant array (CbJMames) of Cb_Object_Manager.Cb > ( 
Dummy_Cb_1 -> Cb_Object_M an a g e r. N e w_C b 

(Position -> Cb_Object_Manager.Closed, Rating «> 50.0), 


CMU/SEI-89-TR-5 


113 







Dummy_Cb_2 «> Cb_Object_M anag g r.N g w_Cb 

(Position «> Cb_Object_Manager.Ck>sed, Rating «> 50.0), 
Dummy_Cb_3 -> Cb_Object_M an ag g r. N ew_Cb 

(Position -> Cb_Object_Manager. Closed, Rating *> 50.0), 
Dummy_Cb_4 «> Cb_Object_M an ag e r. N ow_Cb 

(Position -> Cb_Object_Manager.Ck>sed, Rating *> 50.0), 
Dummy_Cb_5 -> Cb_Object_Manager.New_Cb 

(Position «> Cb_Object_Manager.Closed, Rating «> 50.0), 
Dummy_Cb_6 -> Cb_ObjGCt_ManagGr.NGW_Cb 

(Position «> Cb_Object_Manager.Closed, Rating «> 50.0), 
Dummy_Cb_7 «> Cb_Ob j ect_M an ag g r. N g w_Cb 

(Position «> Cb_Object_Manager.Ck>sed, Rating «> 50.0), 
Dummy_Cb_8 «> Cb_ObjGd_M an ag or. N ow_Cb 

(Position *> Cb_Object_Manager.Ck>sed, Rating *> 50.0), 
Dummy_Cb_9 «> Cb_Ob j GCt_M an ag g r. N e w_Cb 

(Position «> Cb_Object_Manager.Closed, Rating «> 50.0), 
Dummy_Cb_10 «> Cb_Object_Manager.New_Cb 

(Position «> Cb__ObjGct_ManagGr.CbsGd, Rating *> 50.0)); 

— matches an element kind with an element name and side 

type Elem6nt_Point 

(Element: Global_Types.Element_Class > Global_Types.A_Cb) is 

record 

case Element is 

when Global_Types.A_Cb 
Cb_ElGment: Cb_Names; 

Cb_Side: Cb_Object_ManagGr.Cb_Side_Names; 
when others -«> 
null; 

end case; 

end record; 


—I . 

—I Modification History: 

—/ 03Nov88 kl Changed objects from wires to CBs 
—/ 22Jun88 der Deleted ebs, and removed InputJPoint 
—/ from the element point type. 

—/ 16Jun88 der Added wires to the dummy aggregate. 

—/ Added lnput_Point to the Element point record 

—/ definition to support the wire object 

.—/ 09Oct87 tac Eliminated Enumeration type Points in all 
—/ aggregates , and combined arrays which used it. 

—/ 25sep87 tac created 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA 

—I . 

end Dummy_System_Aggregate; 
pragma Page; 


114 


CMU/SEI-89-TR-5 






D.12 Package Ac_Power_System_Aggregate 


—/. 

—/ Module Name: 

—I Ac_Power_System_Agg regate 

—I 

—/ Module Type: 

—/ Package Specification 

-I 

—/ Module Purpose: 

—/ This package establishes the object aggregates which represent the lowest 
—/ level of AC power. 

—I 

—/- 

—/ Module Description: 

—/ The structures which form the aggregate of object information 
—/ are defined here. Instantiation of the objects themselves 
—/ occur in a set of constant arrays. 

—I 

—/ Notes: 

—/ This package has no body 

—I . 

— For the private type Bus, the New_Bus operation, 

— and the types of its parameters. 

with Bus_Object_Manager, 
with Global_Types; 

package Ac_Power_System_Aggregate is 

— Buses which provide ac source to dc power 

type Bus_Names Is ( 

Ac_Bus_1, 

Ac_Bus_2, 

Ac_Bus_3, 

Ac_Bus_4, 

Ac_Bus_5, 

Ac_Bus_6 

); 


— Instantiate the Bus objects and collect them so they can 

— be referenced by Bus name. 

Named_Buses : constant array (Bus_Names) of Bus_Object_Manager.Bus :« ( 
Ac_Bu$_l «> Bus_Object_Manager.New_Bus (Number_Of_Points «> 2), 
Ac_Bus_2 -> Bus_Object_Manager.New_Bus (Number_Of_Points *> 2), 
Ac_Bus_3 «> Bus_Object_Manager.New_Bus (Number_Of_Points «> 2), 
Ac_Bus_4 «> Bus_Object_Manager.New_Bus (Number_Of_Points «> 2), 


CMU/SEI-B9-TR-5 


115 








Ac_Bus_5 «> Bus_Object_Manager.New_Bus (Number_Of_Points -> 2), 
Ac_Bus_6 «=> Bus_Object_Manager.New_Bus (Number_Of_Points => 2) 
); 


— matches an element with its element name and side. 
type Element_Point 

(Element: Global_Types.Element_Class > Global_Types.A_Bus) Is 
record 

case Element Is 

when Global_Types.A_Bus *> 

Bus_Element: Bus__Names; 

Bus_Side : Bus_Object_Manager.Bus_Side_Names; 
when others *> 
null; 

end case; 
end record; 


—I . 

—/ Modification History: 

—/ 01 Mar89 kl changed all occurrences of “wire * to "bus * 

—/ 22Jun88 der deleted Cbs from ac_power_aggregate. 

—/ 14Jun88 der added wires to ac_power_aggregate definition 
—/ 09Oct87 tac Eliminated Enumeration type Points in all 
—/ aggregates, and combined arrays which used it. 

—/ 25sep87 tac Created 

—I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Ac_Power_System_Aggregate; 
pragma Page; 


116 


CMU/SEI-89-TR-5 






D.13 Package Cb_Linkage_lnterface 


-/. 

—/ Module Name: 

—/ Cb_Unkage_intorface 

—I 

—/ Module Type: 

—/ Package Specification 

-I 

—/ Module Purpose: 

—/ This package provides scaffolding for testing Dc_Power 

-/- 

—/ Module Description: 

—/ This package provides names for CBs in the software representation of the 
—/ linkage buffer. When CBs are updated relative to the linkage 
—/ buffer, these names would be used to determine the current 
—/ value of the a CB position. 

—I 

—/ The names are chosen to match the CB names used in dc_power. 

—I 

—/ Notes: 

—/ none 

—I . 

with Cb_Object_Manager; 

with Dc_Power_System_Aggregate; 

package Cb_Linkage_lnterface Is 

package Dcpa renames Dc_Power_System_Aggregate; 

typo Cb_Linkage_kis Is ( 

Link_For_Cb_1_1, 

Link_For_Cb_2_1, 

Link_For_Cb_3_1, 

Link_For_Cb_Tb_1 _2, 

Lin k_For_Cb_Tb_2_1, 

Lin k_Fo r_Cb_1 _2, 

Link_For_Cb_1_3, 

Li n k_Fo r_Cb_2_2, 

Li n k_Fo r_Cb_3_2 1 
Li n k_Fo r_Cb_3_3, 

L i n k_Fo r_Cb_3_4, 

Link_For_Cb_Tb_1 _1, 

Link_For_Cb_4_1 # 

L i n k_Fo r_Cb_4_2. 

Link_For_Cb_4_3 

); 


CMU/SEI-69-TR-5 


117 









function Get_Hardware_Cb_Posrtion (Hardware_Link : in Cb_Linkage_lds) 

return Cb_Object_Manager.Cb_Position; 

—I . 

—/ Description: 

—/ Returns the current value of the linkage buffer CB position. 

—I 

—/ Parameter Description: 

—/ HardwareJUnk is the name of CB linkage 
—/ Returns current state of CB position from the linkage buffer 

—I . 

procedure Set_Hardware_Cb_Position ( 

HardwareJJnk : In Cb_Linkage_lds; 

A_Position: in Cb_Object_Manager.Cb_Position); 

—I . 

—/ Description: 

—/ Sets the current value of the linkage buffer CB position . 

—I 

—/ Parameter Description: 

—/ HardwareJUnk is the name of CB linkage 
—I AJPoshion is a new state of CB position 

—I . 

function Get_A_Dc_Cb_Link (A_Dc_Cb: In Dcpa.Cb_Names) return CbJJnkage_lds; 

—I . 

—/ Description: 

—/ Gets the linkage ID for a Dc Power CB 

—I 

—/ Parameter Description: 

—/ A_Dc_Cb is the Dc Power CB 
—/ Returns a CB linkage ID 

—I . 

—pragma in!ine(Get_Hardware_CbjPosition, 

— Set_Hardware_ Cb_Position f 

— Get_A_Dc_ Cb_Link); 


—I . 

—/ Modification History: 

—/ 14Nov88 kl added procedure Set_Hardware_Cb_Position 
—/ 12Mar87 kl created 

—I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Cb_Linkage_lnterface; 
pragma Page; 


118 


CMU/SEI-89-TR-5 












D.14 Package Body Cb_Linkage_lnterface 


—/. 

—/ Module Name: 

—I CbJLinkage_interface 
—I 

—/ Module Type: 

—/ Package Body 

—I 

—/- 

—/ Module Description: 

—/ This package provides scaffolding for testing Dc_Power 

—I 

—/ Notes: 

—/ none 

—I . 

package body Cb_LinkageJnterface Is 

— Define tables for cross referencing Cb linkages 

Dc_Power_Cb_Linkage_lds : constant array (Dcpa.Cb_Names) of 
Cb_Linkage_lds > ( 

Dcpa.Cb_1_1 «> Link_For_Cb_1_1, 

Dcpa.Cb_2_1 «> Link_For_Cb_2_1, 

Dcpa.Cb_3_1 *> Link_For_Cb_3_1, 

Dcpa.Cb_Tb_1_2 -> Link_Fo r_Cb_Tb_ 1 _2, 

Dcpa.Cb_Tb_2_1 *> Link_For_Cb_Tb_2_ 1, 

Dcpa.Cb_1_2 -> Link_For_CbJ_2, 

Dcpa.Cb_1_3 «> Link_For_Cb_1_3, 

Dcpa.Cb_2_2 «> Link_For_Cb_2_2, 

Dcpa.Cb_3_2 -> Link_For_Cb_3_2, 

Dcpa.Cb_3_3 -> Link_For_Cb_3__3, 

Dcpa.Cb_3_4 -> Link_For_Cb_3_4, 

Dcpa.Cb_Tb_1_1 *> Link_For_Cb_Tb_1_1, 

Dcpa.Cb_4_1 -> Link_For_Cb_4_ 1, 

Dcpa.Cb_4_2 -> Link_For_Cb_4_2, 

Dcpa.Cb_4_3 -> Link_For_Cb_4_3 

); 


type Cb_Linkage Is array (Cb_Lmkage_lds) of 
Cb_Object_Man ager Cb_Pos‘rt ion; 

The_Cb_Linkage: Cb_Linkage:- (others -> Cb_Object_Manager.Closed); 

function Get_Hardware_Cb_Position (Hardware_Link : In Cb_Linkage_lds) 

return Cb_Object_Manager.Cb_Position Is 

—I . 

—/ Description: 


CMU/SEMJ9-TR-5 


119 








—/ Returns the current value of the linkage buffer CB position . 
-/ 

—/ Parameter Description: 

—/ Hardware_Link is the name of CB linkage 
—/ Returns current state of CB position from the linkage buffer 

-I 

—/ Notes: 

—/ none 

—I . 

begin 

RETURN The_Cb_Linkage(Hardware_Link); 
end Get_Hardware_Cb_Position; 

pragma Page; 


120 


CMU/SEI-89-TR-5 




procedure Set_Hardware_Cb_Position (HardwareJjnk : in CbJJnkageJds; 
A_Position: in Cb_Object_Manager.Cb_Position) is 

-I . 

—/ Description: 

—/ Sets the current value of the linkage buffer CB position. 

—I 

—/ Parameter Description: 

—/ Hardware_Unk is the name of CB linkage 
—/ A_Position is a new state of CB position 

—I 

—/ Notes: 

—/ none 

—I . 

begin 

The_Cb_Linkage(Hardware_Link) > A_Positbn; 
end Set_Hardware_Cb_Position; 

pragma Page; 


CMU/SEI-89-TR-5 


121 






function Get_A_Dc_Cb_Link (A_Dc_Cb: In Dcpa.Cb_Names) 
return Cb_Linkage_lds Is 

—I . 

—/ Description: 

—/ Gets the linkage ID for a Dc Power CB 

-I 

—/ Parameter Description: 

—/ A_Dc_Ct> is the Dc Power CB 
—/ Returns a CB linkage ID 

—I 

—/ Notes: 

—/ none 

—i . 

begin 

RETURN Dc_Power_Cb_Linkage_lds(A_Dc_Cb); 
end Get_A_Dc_Cb_Link; 


—I . 

—I Modification History: 

—/ 14Nov88 kl added procedure set_hardware_cb_position 
—I 11Apr87 kl created 

—I 

—f - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Cb_Linkage_lnterface; 
pragma Page; 


122 


CMU/SEI-89-TR-5 








D.15 Package Dc_Power_System 


—/. 

—/ Module Name: 

—/ Dc_Power_System ; 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ 77i/s package contains the top-level procedure call to update the 
—/ simulation of DC power generation. It is the sole 
—/ interface to DC power from the perspective of the flight executive . 

—/- 

—/ Module Description: 

—/ This package exports a procedure call, Update_DC_Power 
—/ Update_Dc_Power abstracts all processing necessary to 
—/ update the DC power system. During the call all connections 
—/ between objects in DC power are processed . Since the objects 
—/ are already at the lowest level, there is no further call to 
—/ any nested level. Prior to issuing the (Jpdate_Dc_Power call 
—/ all outside affects on DC power objects should have been placed on the 
—/ objects by the flight executive. 

—I 

—/ Notes: 

—/ none 

—I . 

package Dc_Power_System is 

procedure Update_Dc_Power_System; 

—I . 

—I 

—/ Description: 

—/ This procedure causes all connections within DC power to be processed. 
—/ It establishes the order in which connections are processed, 

—/ and how many times they are processed. 

—I 

—/ Parameter Description: 

—/ None 

—I 

—I . 

—pragma inline (Update_Dc_ Power_System); 

—I . 

—/ Modification History: 

—I 

—/ 20Feb87 mmr initial version 


CMU/SEWJ9-TR-5 


123 












—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Dc_Power_System; 
pragma Page; 


124 


CMU/SEI-89-TR-5 





] 


D.16 Package Body Dc_Power_System 

—/. 

—/ Module Name: 

—I Dc_Power_System 

—I 

—/ Module Type: 

—/ Package Body 

—I 

—/- 

—/ Module Description: 

—/ This package containes a set of subprograms to process 
—/ connections between DC power objects. Subprograms have been 
—/ defined to process connections with respect to voltage and Lcf, 

—/ and load. A single procedure , Update_Dc_Power t abstracts 
—/ updating of DC power objects which have already had outside 
—/ effects put on them by the flight executive. 

—I 

—/ Notes: 

—/ none 

—I . 

with Global_Types; 
with Electrical_Units; 

with Cb_Object_Manager; 
with Tru_Object_Manager; 
with Bus_Object_Manager; 

with Dc_Power_System_Aggregate; 

package body Dc_Power_System Is 

package Dcpa renames Dc_Power_System_Aggregate; 

type Dc_Power_System_Connection_Names Is ( 

— Connections from TRUs to dc_mains 1, 2, and 3 

Connection_7 f Connectk>n_8, Connection^, 

— Connections from Dc_Main_ 1 to power bus CBs 

Connection_10, Connectk>n__11, 

— Connection from Dc_Main_2 to power bus CB 

Connect ion_12, 


CMU/SEI-89-TR-5 


125 








— Connections from Dc_Main_3 to power bus CBs 
Connection^ 3, Connection^ 4, Connection_15, 

— Connections from dc_mains 1, 2, and 3 to tie_bus_1 CBs 
Connection^6, Connection^! 7, Connection_18, 

— Connections from tiejbus_1 CBs to Tie_Bus_1 

Connection^9 t Connection_20, Connection_21, Connection_22, Connection_23, 

— Connections to Tie_Bus_2 

Connection_24, Connection_25, Connection_26, Connection_27, Connection_28, 

— Connections to the Dc_Main_4 

Connection_29, Connection_30, Connection_31, Connection_32, 

— Connections to DC power buses 

Connection_33, Connection_34, Connection_35, Connection_36, Connection_37, 
Connection_38, Connection_39, Connection_40, Connection^ 1, Connection_42 
); 

subtype The_Tie_Bus_l_Connections Is Dc_Power_System_Connection_Names 
range Connection^O..Connection_23; 

subtype The_Tie_Bus_2_Connections Is Dc_Power_System_Connection_Names 
range Connection_24..Connection_28; 

— structure for each Connection 

type A_Dc_Power_System_Connection Is array (Integer range 1 .. 2) of 
Dcpa.Element_Point; 

type Dc_Power_System_Connect»ons Is array (Dc_Power_System_Connection_Names) of 
A_Dc_Power_System_Connection; 

pragma Page; 


126 


CMU/SEI-69-TR-5 



— table which provides a cross reference between each Connection 

— and information on each Point on it. 

The_Dc_Power_System_Connections : constant Dc_PowGr_SystGm_Connections > ( 
ConnGCtion_7 -> ( 

2 ■> (Element «> Global_Types.A_Bus, 

Bus_Elemerrt -> Dcpa.Dc_Main_1, 

Bus_Side -> 1), 

1 -> (Element «> Gk>bal_Types.A_Tru, 

Tnj_Element -> Dcpa.Tru_1 t 

Tru_Side -> Tru_Object_Manager.Dc_Side)) t 

Connection_8 «> ( 

2 -> (Element -> Global_Types.A_Bus t 

Bus_Element -> Dcpa.Dc_Main_2, 

Bus_Side «> 1), 

1 -> (Element «> Gtobal_Types.A__Tru, 

Tru_Element -> Dcpa.Tru_2, 

Tru_Skje «> Tm_Object_Manager.Dc_Side)) f 

Connection_9 -> ( 

2 «> (Element -> Gk>bal_Types.A_Bus t 

Bus_Element -> Dcpa.Dc_Main_3, 

Bus_Side -> 1), 

1 ■> (Element «> Global_Types.A_Tru, 

Tru_E!ement -> Dcpa.Tru_3, 

Tru_Side -> Tru_Object_Manager.Dc_Side)), 

Connection^0 «> ( 

1 -> (Element -> G!obal_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Main_1, 

Bus_Side -> 2), 

2 «> (Element -> Gk>bal_Types.A_Cb, 

Cb_Element «> Dcpa.Cb_1_2, 

Cb_Side -> Cbj0bject_Manager.Side_1)), 

Connect»on_11 «> ( 

1 -> (Element «> Global_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Main_1, 

Bus_Side -> 3), 

2 «> (Element «> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_1_3, 

Cb_Side -> Cb_Object_Manager.Side_1)) p 

Connection_12 -> ( 

1 «> (Element -> Gtobal_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Main_2, 

Bus_Side «> 2), 

2 «> (Element -> Gk>bal_Types.A_Cb, 


CMU/SEI-89-TR-5 


127 





Cb_Elemerit -> Dcpa Cb_2_2, 

Cb_Side -> Cb_0bject_Manager.Side_1)) f 

Connectton_i3 *•> ( 

1 «> (Element -> Gk>bal_Types.A_Bus f 

Bus_Element ■> Dcpa.Dc_Main_3, 
Bus_Side «> 2), 

2 »> (Element -> Globally pes.A_Cb, 

Cb_Element »> Dcpa.Cb_3_2, 

Cb_Side -> Cb_Object_Manager.Side_1)), 

Connection_14 -> ( 

1 -> (Element -> Gk)bal_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Main_3, 
Bus_Side «> 3), 

2 »> (Element -> Gk>bal_Types.A_Cb, 

Cb_Element ■> Dcpa.Cb_3_3, 

Cb_Side »> Cb_Object_Manager.Side_t)) t 

Connect ion_15 *> ( 

1 »> (Element »> Gk)bal_Types.A_Bus, 

Bus_Element ■> Dcpa.Dc_Main_3, 
Bus_Side ~> 4), 

2 -> (Element -> Global_Types.A_Cb, 

Cb_Element *> Dcpa.Cb_3_4, 

Cb_Side => Cb_Object_Manager.Side_1)), 

Connection_16 -> ( 

1 «> (Element => Global_Types.A_Bus t 

Bus_Element ®> Dcpa.Dc_Main_t, 
Bus_Side -> 4), 

2 -> (Element «> Global_Types.A_Cb, 

Cb_Element «> Dcpa.Cb_1_1, 

Cb_Side -> Cb_Object_Manager.Side_1)), 

Connection_17 -> ( 

1 -> (Element «> Global_Types.A_Bus, 

Bus_Element => Dcpa.Dc_Main_2, 
Bus_Side »> 3), 

2 -> (Element «> GlobaMTypes.A^Cb, 

Cb_Element -> Dcpa.Cb_2_1, 

Cb_Side -> Cb_Object_Manager.Side_1)) f 

Connection^! 8 -> ( 

1 »> (Element ■> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Main_3, 
Bus_Side *> 5), 

2 -> (Element «> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_3_t, 

Cb_Side »> Cb_Object_Manager.Side_t)) t 


128 


CMU/SEI-89-TR-5 



Connection^ 9 «=> ( 

2 -> (Element -> Gbbal_Types.A_Bus, 
Bus_Element -> Dcpa.Tie_Bus_1, 

Bus_Side -> 1), 

1 «> (Element -> Gbbal_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_1_1 ? 

Cb_Side «> Cb_Object_Manager.Side_2)), 

Connection_20 -> ( 

2 -> (Element -> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Tie_Bus_1, 

Bus_Side -> 2), 

1 -> (Element «> Gbbal_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_2_1, 

Cb_Side -> Cb_Object_Managei\Side_2)), 

Connectbn_21 -> ( 

2 «> (Element «> Gbbal_Types.A_Bus, 

Bus_Element -> Dcpa.Tie_Bus._1, 

Bus_Side -> 3), 

1 -> (Element -> Gbbal_Types.A_Cb, 
Cb_Element ■> Dcpa.Cb_3_1, 

Cb_Skje -> Cb_Object_Manager.Sbe_2)), 

Connectbn_22 ■> ( 

1 -> (Element «> Gbbal_Types.A_Bus, 

Bus_EIement «> Dcpa.Te_Bus_1, 

Bus_Side -> 4), 

2 «> (Element -> Gbbal_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_Tb_1_1, 

Cb_Side -> Cb_Object_Manager.Side_1)) ( 

Connection_23 -> ( 

1 -> (Element -> Gbbal_Types.A_Bus, 

Bus_Element -> Dcpa.Tie_Bus_1, 

Bus_Side -> 5), 

2 -> (Element -> Gbbal_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_Tb_1 _2, 

Cb_Side -> Cb_Object_Manager.Side_1)), 

Connection__24 -> ( 

2 «> (Element -> Gbba!_Types.A_Bus, 
Bus_Element -> Dcpa.Tie_Bus_2, 

Bus_Side -> 2), 

1 -> (Element «> Gbbal_Types.A_Tru, 

Tru_Element -> Dcpa.Tru_4, 

Tru_Side -> Tru_Object_Manager.Dc_Side)), 

Connectbn_25 -> ( 

2 -> (Element -> Gbbal_Types.A_Bus, 

Bus_Element -> Dcpa.Tie_Bus_2, 

Bus_Side -> 3), 


CMU/SEWJ9-TR-5 


129 




1 *> (Element «> Gk)bal_Types,A_Tru, 

Tru_Element -> Dcpa.Tru_5, 

Tru_Side *> Tru_Object_Manager.Dc_Side)), 

Connection_26 -> ( 

2 «> (Element => Gk>bal_Types.A_Bus, 

Bus_Element «> DcpsLTie_Bus_2, 

Bus_Side «> 4), 

1 «> (Element «> Global_Types.A_Tru, 

Tru_Element «> Dcpa.Tru_6, 

Tru_Side -> Tru_Object_Manager.Dc_Slde)) f 

Connect ion_27 -> ( 

2 «> (Element -> Global_Types.A_Bus, 

Bus_Element «> Dcpa.Tie_Bus_2, 

Bus_Side -> 1), 

1 -> (Element ■> Global_Types.A_Cb, 
Cb_Element -> Dcpa.Cb_Tb_1_2, 

Cb_Side -> Cb_Object_Manager.Side_2)) t 

Connection_28 -> ( 

1 «> (Element -> Global_Types.A_Bus, 

Bus_Element «> Dcpa.Tie_Bus_2, 

Bus_Side -> 5), 

2 «> (Element «> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_Tb_2_1, 

Cb_SkJe «> Cb_Object_Manager.Side_1)) ( 

Connection_29 -> ( 

2 «> (Element -> Gk>baI_Types.A_Bus, 
Bus_Element -> Dcpa.Dc_Main_4, 

Bus_Side -> 1), 

1 *> (Element *> Gk>bal_Types.A_Cb, 
Cb_Element «> Dcpa.Cb_Tb_2_1, 

Cb_Side «> Cb_Object_Manager.Side_2)), 

Connection_30 «> ( 

1 «> (Element «> Gk>baLTypes.A_Bus, 

Bus_Element «> Dcpa.Dc_Main_4, 

Bus_Side «> 2), 

2 «> (Element «> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_4_1, 

Cb_Side -> Cb_Object_Manager.Side_1)), 

Connect ion_31 -> ( 

1 «> (Element «> Gk>bal_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Main_4, 

Bus_Side «> 3), 

2 -> (Element -> Gk>bal_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_4_2, 

Cb_Side «> Cb_Object_Manager.Side_1)) f 


130 


CMU/SEI-S9-TR-5 



Connection_32 => ( 

1 -> (Element -> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Main_4, 
Bus_Slde «> 4), 

2 -> (Element -> Global_Types.A_Cb, 

Cb_Element «> Dcpa.Cb_4_3, 

Cb_Slde -> Cb_Object_Manager.Side_1)), 

Connection_33 -> ( 

2 -> (Element -> GlobaI_Types.A_Bus, 
Bus_Element «> Dcpa.Dc_Power_Bus_1, 
Bus_Slde «> 1), 

1 -> (Element -> Global_Types.A_Cb, 

Cb_Element «> Dcpa.Cb_1_2, 

Cb_Side -> Cb_Object_Manager.Side_2)) f 

Conn act ion_34 -> ( 

2 -> (Element «> Gk)bal_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Power_Bus_2, 
Bus_Side *> 1), 

1 «> (Element «> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_1_3, 

Cb_Side -> Cb_Object_Manager.Side_2)) f 

Connect io n_35 *> ( 

2 -> (Element *> Global_Types.A_Bus, 

Bus_Element -> DcpaDc_Power_Bus_3, 
Bus_Side -> 1), 

1 «> (Element «> GIobal_Types.A_Cb, 

Cb_Element «> Dcpa.Cb_2_2, 

Cb_S»de -> Cb_Object_Manager.Side_2)), 

Connection_36 -> ( 

2 -> (Element «> Gk>bal_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Power_Bus_4, 
Bus_Side -> 1), 

1 -> (Element -> Global_Types.A_Cb, 

Cb_Element «> Dcpa Cb_3_2, 

Cb_Side -> Cb_Object_Manager.Slde_2)), 

Connection_37 -> ( 

2 -> (Element «> Global_Types.A_Bus, 

Bus_Element ■> Dcpa.Dc_Power_Bus_5, 
Bus_Side «> 1), 

1 «> (Element -> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_3_3 t 
Cb_Side -> Cb_Object_Manager.Side_2)), 

Connectk>n_38 «> ( 

2 «> (Element -> GlobaI_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Power_Bus_6, 
Bus_Side «> 1), 


CMU/SEI-89-TR-5 


131 




1 => (Element => Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_3_4, 

Cb_Side -> Cb_Object_Manager.Side_2)) l 

Connection_39 -> ( 

2 «> (Element -> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Power_Bus_7, 
Bus_Slde -> 1) t 

1 -> (Element -> Global_Types.A_Cb t 

Cb_Element -> Dcpa.Cb_Tb_1_1, 

Cb_Side -> Cb_Object_Manager.Side_2)) t 

Connection_40 «> ( 

2 -> (Element «> Gk>bal_Types.A_Bus, 

Bus_E1ement -> Dcpa.Dc_Power_Bus_8, 
Bus_Side -> 1), 

1 -> (Element -> Global__Types.A_Cb, 

Cb_Element -> Dcpa.Cb_4_1, 

Cb_Side -> Cb_Object_Manager.Side_2)), 

Connection_41 -> ( 

2 -> (Element -> Gtobal_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Power_Bus_9, 
Bus_Side -> 1), 

1 «> (Element -> Global_Types.A_Cb, 

Cb_Element -> Dcpa.Cb_4_2, 

Cb_Side «> Cb_Object_Manager.Side_2)) t 

Connection_42 -> ( 

2 «> (Element -> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Power_Bus_10, 
Bus_Side -> 1), 

1 -> (Element -> Global_Types.A_Cb, 
Cb_Element -> Dcpa.Cb_4_3, 

Cb_Side «> Cb_Object_Manager.Slde_2)) 


); 


pragma Page, 


132 


CMU/SEI-89-TR-5 



procedure Process_Voltage_Lcf_For_Connection 

(This_Connection : Dc_Power_System_Connection_Names) Is 

—I . 

—/ Description: 

—/ This procedure processes the voltage and Lcf state 
—/ variables for the specified connection . 

—I 

—/ Parameter Description: 

—/ This Connection is the Connection to be updated 

—I 

—/ Notes: 

—/ none 

—I . ### 

The_Power_lnfo : Electrical_Unlts.PowerJnfo; 

begin 

declare 

The_Connection : A_Dc_Power_System_Connection 

renames The_Dc_Power_System_Connections (This Connection); 
begin 

— handle a dc power Point 

— obtain power information from dc power object 

case The_Connection (1).Element Is 
when Global_Types.A_Cb «> 

The_Power_!nfo > 

Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb -> Dcpa.Named_Cbs (The_Conn action (1).Cb_Element), 
A_Cb_Side -> The_Ck)nnection (1).Cb_Side); 

when Global_Types.A_Tai -> 

The_Power_lnfo > 

Tru_Object_Manager.Get_PowerJnfo_From ( 

AJTru -> Dcpa.Named_Trus (The_Connection (1).Tru_Element), 
A_Tnj_Side => The_Connection (1).Tru_Side); 

when Global_Types,A_Bus «> 

The_Power_lnfo > 

Bus_Object_Manager.Get_Power_lnfo_From ( 

A_Bus -> Dcpa.Named_Buses (The_Connection (1).Bus_Element), 
A_Bus_Side -> The_Connection (1).Bus_Side); 

end case; 

— restore new Voltage and Lcf states to an object 

case The_Connection (2).EIement Is 
when G!obal_Types.A_Cb -> 

Cb_Object_Manager.Glve_Voltage_Lcf_To ( 

A_Cb «> Dcpa.Named_Cbs (The_Connection (2).Cb_Element), 


CMU/SEI-89-TR-5 


133 







A_Cb_Side «> The_Conn action (2).Cb_Side, 

Volts «> The_Power_lnfo.V, 

Load_Conversion «> The_Power_lnfo.Lcf); 

when Global_Types.A_Tru => 

Tru_Object_Man ager.G i ve_Vo It age_Lcf_To ( 

A_Tru *> DcpaNamed_Trus (The_Connection (2).Tru_Element), 
A_Tru_Side -> The_Conn action (2).Tru_Side, 

Volts «> The_PowerJnfo.V t 
Load_Conversion *> The_Power_lnfo.Lcf); 

when Giobal_Types.A_Bus -> 

Bus_Object_Manager.Give_Voltage_Lcf_To ( 

A_B US ■> Dcpa.Named_Buses (The_Connection (2).Bus_Element), 
A_Bus_Side -> The_Connection (2).Bus_Side i 
Volts -> The_Power_lnfo.V, 

Load_Con version «> The_Power_lnfo.Lcf); 
end case; 
end; 

end Process_Voltage_Lcf_For_Connection; 
pragma Page; 


134 


CMU/SEI-69-TR-5 



procedure Process_Load_For_Connection 

(This_Connection : Dc_Power_System_Connection_Names) is 

-I . . . 

—/ Description: 

—/ This procedure processes the current for the specified connection. 

—I 

—/ Parameter Description: 

—/ This Connection is the Connection to be processed. 

—I 

—/ Notes: 

—/ none 

—I . 

The_Power_lnfo : Electrical_Unrts.Power_lrrfo; 

begin 

declare 

The_Connection : A_Dc_Power_System_Connection 

renames The_Dc_Power_System_Connections (This_Connection); 

begin 

— obtain the power information from an Dc Power object. 

case The_Connection (2).Element Is 
when Global_Types.A_Cb «> 

The_Power_lnfo > 

Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb *> Dcpa.Named_Cbs (The_Connection (2).Cb_E!ement), 
A_Cb_Side «> The_Connection (2).Cb_Slde); 

when Global_Types.A_Tru -> 

The_Power_lnfo > 

Tru_Object_Manager.Get_PoweMnfo_From ( 

A_Tru -> Dcpa.Named_Trus (The_Connection (2).Tru_E!ement), 
A_Tru_Side «> The_Connection (2).Tru_Side); 

when Global_Types.A_Bus -> 

The_Power_lnfo > 

Bus_Object_Manager.Get_Power_lnfo_From ( 

A_Bus -> Dcpa.Named_Buses (The_Connection (2).Bus_Element), 
A_Bus_Side -> The_Connection (2).Bus_Side); 

end case; 

— restore new load state to the Dc Power object 

case The_Connection (1).Element Is 
when Global_Types.A_Cb «> 

Cb_Object_Manager.Glve_Current_To ( 

A_Cb -> Dcpa.Named_Cbs (The__Connection (1).Cb_Element), 
A_Cb_Side -> The_Connection (1).Cb_Side l 
Load -> The_Power_lnfo.l); 


CMU/SEI-89-TR-5 


135 






when Global_Types.A_Tru «> 

Tru_Object_Manager.Give_Current_To ( 

A_Tru => Dcpa.Named_Trus (The_Connection (1).Tru_Element), 
A_Tru_Side => The__Connection (1).Tru_Side, 

Load *=> The_PowerJnfo.l); 

when Global_Types.A_Bus «> 

Bus_Object_Manager.Give_Current_To ( 

A_Bus «> Dcpa.Named_Buses (The_Connection (1).Bus_Element), 
A_Bus_Side The_Connection (1).Bus_Side, 

Load «> The_PowerJnfo.l); 
end case; 
end; 

end Process_Load_For_Connectbn; 
pragma Page; 


136 


CMU/SEI-89-TR-5 



procedure Process_Tie_Bus_Voltage_Lcf 

(This_Connection : Dc_Power_System_Connection_Names) Is 

—I . 

—/ Description: 

—/ Process voltage and Lcf for the specified Tte Bus Connection. 

—I 

—/ Parameter Description: 

—/ This Connection is the Connection to be processed. 

—I 

—/ Notes: 

—/ none 

—I ... 

The_PowerJnfo: Electrical_Units.Power_lnfo; 

begin 

declare 

The_Connection : A_Dc_Power_System_Connection 

renames The_Dc_Power_System_Connectlons (This_Connection); 
begin 

case The_Connaction (2).EIement Is 
when Global_Types.A_Cb -> 

The_Power_lnfo > 

Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb -> Dcpa.Named_Cbs (The_Conn action (2).Cb__E!ement), 
A_Cb_Side -> The_Connection (2).Cb_Side); 

when Global_Types.A_Tru -> 

The_Power_lnfo > 

Tru_Object_Manager.Get_Power_lnfo_From ( 

A_Tru «> Dcpa.Named_Trus (The_Connection (2).Tru_Element), 
A_Tru_Side «> The_Connection (2).Tru_Side); 

when Global_Types.A_Bus -> 

The_Power_lnfo > 

Bus_Object_Manager.Get_Power_lnfo_From ( 

A_Bus ■> Dcpa.Named_Buses (The_Connection (2).Bus_Element), 
A_Bus_Side -> The_Connaction (2).Bus_Side); 
end case; 

— restore new Voltage and Lcf states to an object 

case The_Connection (1).Element Is 
when GlobaMTypes.A_Cb -> 

Cb_Obj ect_M a n ag e r. G ive_Vohage_Lcf_To ( 

A_Cb -> Dcpa.Named_Cbs (The_Connection (1).Cb_Element), 
A_Cb_Side -> The_Connectbn (1).Cb_Side f 
Volts «> The_Power_lnfo.V, 

Load_Conversion «> The_Power_lnfo.Lcf); 


C M U/S E1-89-T R-5 


137 









when Global_Types.A_Tru «> 

Tru_Object_Manager.Give_Voltage_Ld_To ( 

A_Tru *> DcpauNamed_Trus (The_Connection (1).Tru_Element), 
A_Tru_Side «> The_Connection (1).Tru_Side, 

Volts *> The_PoweMnfo.V, 

Load_Co aversion -> The_Power_lnfo.Lcf); 

when Global_Types.A_Bus -> 

Bus_Object_Manager.Give_Voltage_Ld_To ( 

A_Bus -> Dcpa.Named_Buses (The_Connection (1).Bus_Element), 
A_Bus_Side -> The_Connection (1).Bus_Side, 

Volts -> The_Power_lnfo.V, 

Load_Conversion -> The_Power_lnfo.Lcf); 
end case; 
end; 

end Process_Tie_Bus_Voltage_Ld; 
pragma Page; 


138 


CMU/SE1-89—TR-5 



procedure Process_Tie_Bus_Load 

(This_Connection : Dc_Power_System_Connection_Names) Is 

—I . 

—/ Description: 

—/ Process bad for the specified Tie Bus Connectbn 

—I 

—/ Parameter Description: 

—/ This Connectbn is the Connectbn to be processed, 

—i 

—/ Notes: 

—/ none 

—I . 

The_Power_lnfo : Electncal_Units.Power_lnfo; 

begin 

declare 

The_Connection : A_Dc_Power_System_Connection 

renames The_Dc_Power_System_Connections (This_Connection); 
begin 

case The_Connection (1).Element Is 
when Global_Types.A_Cb «> 

The_PowerJnfo > 

Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb «> Dcpa.Named_Cbs (The Connection (1).Cb_Element), 
A_Cb_Side -> The_Connection (1).Cb_Side); 

when Global_Types.A_Tru «> 

The_Power_lnfo :■ 

Tru_Object_Manager.Get_Power_lnfo_From ( 

A_Tru ■> Dcpa.Named_Trus (The_Connection (1).Tru_Element), 
A_Tru_Side *> The_Connection (1).Tru_Side); 

when Global_Types.A_Bus => 

The_Power_lnfo > 

Bus_Object_Manager.Get_Power_lnfo_From ( 

A_Bus -> Dcpa.Named Buses (The_Connection (1).Bus_Element), 
A_Bus_Side «> The_Connection (1).Bus_Side); 

end case; 

— restore new Voltage and Lcf states to an object 

case The_Connectlon (2).Element Is 
when Global_Types.A_Cb «> 

Cb__Object_Manager.Give_Current_To ( 

A_Cb -> Dcpa.Named_Cbs (The_Connection (2).Cb_Element), 
A_Cb_Side -> The_Connection (2).Cb_SkJe, 

Load -> The_PowerJnfo.l); 

when Global_Types.A_Tru -> 

Tm_Object_Manager.Gfve_Current_To ( 


CMU/SEI-89-TR-5 


139 









A_Tru «> Dcpa.Named_Trus (The_Connection (2).Tru_Element), 
A_Tru_Side «> The_Connaction (2).Tru_Side t 
Load => The_PowerJnfo.l); 

when Global_Types.A_Bus «> 

Bus_Object_Manager.Give_Current_To ( 

A_Bus «> Dcpa.Named_Buses (The_Connection (2).Bus_Element), 
A_Bus_Side «> The_Connection (2).Bus_Side, 

Load «> The_PowerJnfo.l); 
end case; 
end; 

end Process_Tie_Bus_Load; 
pragma Page; 


140 


CMU/SEI-69-TR-5 



procedure Update_Dc_Power_System is 

—I . 

—/ Description: 

—/ Upon completion of the execution of this procedure 
—/ all objects within DC power will be updated and in a 
—/ consistent state. At this level, for DC power ; the 
—/ connections between objects are all that need to be 
—/ processed. 

—I 

—/ Parameter Description: 

—/ None 

—I 

—/ Notes: 

—/ None 

—I . 

begin 

— Process all Connections which are internal to Dc_Power_System 

— for voltage and Lcf 

for A_Connection In Dc_Power_System_Connectbn_Names , First.. 
Dc_Power_System_Connection_Names'Last loop 
Process_VoftageJ_d_For_Connection (A_Connection); 

end loop; 

for A_Connection in reverse The_Tie_Bu$_1_Connections , First.. 
The_“ne_Bus_1_Connectlons’Last loop 
Process_Tie_Bus_Voltage_Lcf (A_Connection); 

end loop; 

for A_Connection In reverse The_TTe_Bus_2_Connections , First.. 
The_Tie_Bus_2_Connect ions'Last loop 
Process_Tle_Bus_Vo!tage_Lcf (A_Connaction); 

end loop; 

— Process all Connections which are internal to Dc_Power_System 

— for load 

for A_Connection In reverse Dc_Power_System_Connection_Names'First.. 
Dc_Power_System_Connection_Names'Last loop 
Process_Load_For_Connection (A_Connection); 

end loop; 

for A_Connection in The_Tie_Bus_1_Connections , First.. 
The_T»e_Bus_1_Connections'Last loop 
Process_Tie_Bus_Load (A_Connection); 

end loop; 

for A_Connection in The_Tie_Bus_2_Ck)nnections , First.. 
The_Tie_Bus_2_Connectrons’Last loop 


CMU/SEI-89-TR-5 


141 






Process_Tie_Bus_Load (A_Connaction); 

end loop; 

end Update_Dc_Power_System; 

—I . 

—/ Modification History: 

—/ 01Mar89 kl changed all occurrences of "wire” to "bus"; 

—/ generalized component names as in dc_power_aggregate 

—/ 14Nov88 kl added procedures Process_Tie_Wire_Voftage_Lcf and 
—/ Process_ Tie_ Wire_Load which gate the tie Wire connections 

—/ in the direction counter to their normal "flow" 

—/ 20Mar87 kl created 

—I 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Dc_Power_System; 
pragma Page; 


142 


CMU/SEI-89-TR-5 






D.17 Package Flight_Executive 


—/. 

—/ Module Name: 

—I Flight Executive 

-I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ Executive for flight systems 

—/- 

—/ Module Description: 

—/ This executive is responsible for updating all flight systems . 

—/ Processing involves handling all connections between the flight 
—/ systems and processing each system. 

-I 

—/ Notes: 

—/ none 

-I . 

with Global_Types; 

package Flight_Executive Is 

procedure Update_F!ight_Executive ( 

Frame : in GlobaLTypes.Execution_Sequence); 

—I . . 

—I Description: 

—/ Executive which updates all flight systems 
—I 

—I Parameter Description: 

—/ Frame is the current executing frame 

—I . 

—pragma inline(Update_Flight_Executive); 

—I . 

—/ Modification History: 

—/ 21Aug87 kl created 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA 

-i . 

end Flight_Executive; 
pragma Page; 


CMU/SEI-89-TR-5 


143 











D.18 Package Body Flight_Executive 


—/. 

—/ Module Name: 

—/ Flight Executive 

—I 

—/ Module Type: 

—/ Package Body 

—I 

—/- 

—/ Module Description: 

—/ This executive is responsible for updating all flight systems. 

—/ Processing involves handling all connections between the flight 
—/ systems and processing each system. 

-i 

—/ Notes: 

—/ none 

—I . 

pragma Page; 


144 


CMU/SEI-89-TR-5 






with Flight_System_Names; 

— all systems to be updated would be m withed m here 
with Dc_Power_System; 
package body Flight_Executive is 

package Fsn renames Flight_System_Names; 

type ActiveJn_Frame Is array 

(Fsn.Name_Of_A_Flight_System) of Boolean; 

— Define the allocation of processing relative to frame execution 

fts_Time_To_Do : constant array (Global_Types.Execution_Sequence) of 

Actrve_in_Frame > ( 

G lo bai_Ty pes. F r a m e_1 _Modules_Are_Executed -> 

(Fsn.Engine_1 -> (True), others «> (False)), 
Gk>baLTypes.Frame_2_Modules_Are_Ex ecuted -> 

(Fsn.Ac_Power «> (True), others «> (False)), 
Global_Types.Frame_3_Modules_Are_Executed «> 

(Fsn.Engine_2 «> (True), others «> (False)), 
Global_Types.Frame_4_Modules_Are_Executed -> 

(Fsn.Dc_Power •> (True), others «> (False)), 
GlobaLTypes.Frame_5_Modules_Are_Executed *> 

(Fsn.Englne_3 «> (True), others »> (False)), 
Global_Types.Frame_6_Modules_Are_Executed «> 

(Fsn.Dummy *> (True), others «> (False)), 
Global_Types.Frame_7_Modules_Are_Executed «> 

(Fsn.Engine_4 -> (True), others «> (False)), 
Global_Types.Frame_8_Modules_Are_Executed -> 

(others «> (False))); 

pragma Page; 


CMU/SEI-69-TR-5 


145 




package Right_Executive_Connections is 

—I . 

—/ Module Name: 

—/ FHght_Executive_Connections 

—I 

—/ Module Type: 

—/ Package Specification 

—I 

—/ Module Purpose: 

—/ This package establishes procedures to systematically process 
—/ connections between objects in flight executive's systems. 

—I 

—t - 

—/ Module Description: 

—/ Procedures are declared for processing groups of connectbns 
—/ which are associated with the update of a system. 

-i 

—/ Notes: 

—/ none 

-I . 

procedure Process_Cb_Unkages; 

—I . 

—/ Description: 

—/ This procedure processes linkages between the 
—/ linkage buffer and CB's in DC power 

—I 

—/ Parameter Description: 

—I none 

—I . 

procedure Process_External_Connections_To_Dc_Power; 

—I . 

—/ Description: 

—/ This procedure processes all connections between 
—/ the DC power system and the other systems 
—/ at the flight executive level. Processing of 
—/ connections means to make the system consistent 
—/ with its environment. 

—I 

—/ Parameter Description: 

—/ none 

—I . 

—i . 

—/ Modification History: 

—/ 15Sep87 tac Created 

—t - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 


146 


C M U/S EI-89-TR-5 












—I . 

end Flight_Executive_Connections; 

package body Flight_Executive_Ck)nnections Is separate; 

—I . 

—/ Module Type: 

—/ Separate Package Body 

—I 

—/ Module Description: 

—/ Provides subprograms for processing connections to/from systems 
—/ under the control of the flight executive 

—I 

—I Notes: 

—/ none 

—I . 

pragma Page; 


CMU/SEI-S9-TR-5 


147 






procedure Update_Flight_Executive 

(Frame : In Global_Types.Execution_Sequence) is 

—I . 

—/ Description: 

—/ Flight executive top-level procedure. Processes connections 
—/ and updates each system atomically. 

—I 

—/ Parameter Description: 

—/ Frame is the current frame 

-I 

—/ Notes: 

—/ none 

—I . 

begin 

for A_System In Fsn.Name_Of_A_Flight_System loop 
If lts_TimeJTo_Do (Frame) (A_System) then 

case A_System Is 

— Dc power is the only system implemented 
when Fsn.Dc_Power «> 

— update CB linkages - from simulator hardware 

FI ig ht_Execut ive_Con n ect io ns. P roce ss_Cb_Li nkag e s; 

— Process Connections 

Fhght_Executive_Connections. 

P rocess_Exte rn al_Co n nect Io ns_To_Dc_Po we r; 

— Update system 

Dc_Power_Sy st e m. U pd ate_Dc_Po wer_Sy st e m; 

when others «> 
null; 

end case; 
end If; 
end loop; 

end Update_Flight_Executive; 


—I . 

—/ Modification History: 

—/ 160ct87 tac Add procedure to update cb linkages. 

—/ 21Aug87 ki created 

—t - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 


148 


CMU/SEI-89-TR-5 







—I . 

end Flight_Executive; 

pragma Page; 


CMU/SEI-89-TR-5 


149 







D.19 Package Body Flight_Executive_Connections 


—/. 

—/ Module Name: 

—/ Flight_Executive_Connections 

—I 

—/ Module Type: 

—/ Separate Package Body 

—I 

—I - 

—/ Module Description: 

—/ This package provides a set of subprograms for processing 
—/ connections between systems under the control of the flight executive. 
—/ Connections for a specific system are processed at the same time. 

-I 

—/ Notes: 

—/ none 

—I . 

with Dc_Power_System_Aggregate; 
with Ac_Power_System_Aggregate; 
with Dummy_System_Aggregate; 

with Cb_Object_Manager; 
with Tru_JDbject_Manager; 
with Bus_Object_Manager; 

with CbJJnkageJnterface; 
with ElectricaMJnits; 

separate (Flight_Executive) 

package body FIight_Executive_Connections is 

package Dcpa renames Dc_Power_System_Aggregate; 
package Acpa renames Ac_Power_System_Aggregate; 
package Dsa renames Dummy_System_Aggregate; 
package Cbi renames Cb_Linkage_interface; 

— required to gain access to functions implicit in Cb_Object_Manager 

function "«"(A_Position: in Cb_Object_Manager.Cb_Position; 

Another_Position: in Cb_Object_Manager.Cb_PosKion) 
return Boolean renames Cb_Object_Manager."«"; 

— Connections between DC power and the Dummy system 

— and between DC power and AC power 

type FIight_Executive_Connection_Names is ( 


150 


CMU/SEI-B9-TR-5 






— AC Power to DC Power connections 


Connection_1, 

Connect ion_2, 

Connect ion_3, 

Connection_4, 

Connect ion_5, 

Connect ion_6, 

— DUMMY system to DC Power connections 

Connection_43, 

Connection_44, 

Connection_45, 

Connection_46, 

Connection_47, 

Connect ion_48, 

Connect ion_49, 

Connect ion_50, 

Connect ion_51, 

Connect ion_52); 

subtype Ac_Power_Dc_Power_Connection_Names Is 

Flight_Executive_Connection_Names range Connection_I..Connection_6; 

subtype Dummy_System_Dc_Power_Connection_Names Is 

Flight_Executive_Connectbn_Names range Connection_43..Connection_52; 

type System_Point (A_System : Fltght_System_Names.Name_Of_A_Flight_System > 
Flight_System_Names.Dc_Power) Is 

record 

case A_System Is 

when Flight_System_Names.Dc_Power *> 

Dc_Element: Dcpa.Element_Point; 
when Flight_System_Names.Dummy *> 

Dummy_Element: Dsa.Element_Point; 
when Flight_System_Names.Ac_Power *> 

Ac_Element: Acpa.Element_Point; 
when others => 
null; 

end case; 
end record; 

— each Connection's information is maintained in this kind of 

— structure. 

type A_Flight_Executive_Connection Is 

array (Integer range 1 .. 2) of System_Point; 

type Flight_Executive_Connectbns Is 

array (Flight_Executive_Connection_Names) of A_Flight_Executive_Connection; 


CMU/SEI-89-TR-5 


151 




— The following table defines the executive connections 

— between DC power and other systems 

The_Flight_ExecutivG_ConnGCtions : 
constant Flight_ExGCutivG_ConnGctions > ( 

Connection^ -> ( 

1 -> (A_SystGm -> Right_System_Names.Ac_Power, 

Ac_ElGmGnt «> (ElGmGnt -> Global_Typos.A_Bus t 
Bus_ElGmGnt -> Acpa.Ac_Bus_1, 

Bus_SidG -> 2)), 

2 -> (A_System -> Flight_System_Names.Dc_Power, 

Dc_ElGmGnt *> (ElGmGnt -> Gk)bal_Types.A_Tru, 

Tru_Element -> Dcpa.Tru_1, 

Tru_Side -> Tru_ObjGCt_ManagGr.Ac_SidG))) f 


ConnGCtion_2 -> ( 

1 -> (A_System -> Right_System_Names.Ac_Power, 

Ac_Element -> (ElGmGnt -> Globa!_Types.A_Bus, 
Bus_ElGmGnt **> Acpa.AcJ3us_2, 
Bus_SidG -> 2)), 


2 -> (A_SystGm -> Flight_System_Names DcPower, 

Dc_ElGmGnt *> (ElGmGnt -> Global_Types.A_Tru, 

Tru_ElGmGnt -> Dcpa.Tru_2, 

Tru_SidG -> Tru_Object_Manager.Ac_Side))) ( 


Connection_3 «*> ( 

1 -> (A_SystGm -> Right_System_Names.Ac_Power, 

Ac_ElemGnt -> (Element -> GlobaMTypes.AJBus, 
Bu$_Element «> Acpa.Ac_Bus_3, 

Bus_Side 2)), 

2 -> (A_System «> Flight_System_Names.Dc_Power, 

Dc_ElGment -> (Element -> Global_Types.A_JTru, 

Tru_Element -> Dcpa.Tru_3, 

Tru_Side -> Tru_Object_ManagGr.Ac_SldG))), 


Connection^ *> ( 

1 -> (A_System -> Right_System_Names.Ac_Power, 

Ac_EIement -> (Element -> Global_Types.A__Bus, 
Bus_Element *> Acpa.Ac_Bus_4, 

Bus_Side «> 2)), 

2 -> (A_System «> Flight_System_Names.Dc_Power, 

Dc_Element -> (Element «> Global_Types.A_Tru t 
Tru_Element -> Dcpa.Tru_4, 

Tru_Side -> Tru_Object_Manager.Ac_Side))) ( 


152 


CMU/SEI-89—TR-5 



Connoction_5 -> ( 

1 -> (A_System -> Right_System_Names.Ac_Power, 

Ac_Element -> (Element «> Global_Types.A_Bus, 
Bus_Element *> Acpa.Ac_Bus_5, 

Bus_Side *> 2)), 

2 *> (A_System -> Flight_System_Names.Dc_Power, 

Dc_Element *> (Element -> Gbbal_Types.A_Tru, 

Tru_Elament *> Dcpa.Tru_5, 

Tru_Side *> Tru_Object_Manager.Ac_Side))), 


Connection_6 -> ( 

1 ■> (A_System *> Right_System_Names.Ac_Power, 

Ac_Element -> (Element *> Gbbal_Types.A_Bus, 
Bus_Element *> Acpa.Ac_Bus_6, 

Bus_Side -> 2)), 

2 «> (A_System *> Flight_System_Names.Dc_Power, 

Dc_Element -> (Element -> Gbbal_Types.A_Tru, 

Tru_Element *> Dcpa.TruJS, 

Tru_Side -> Tru_Object_Manager.Ac_Side))) ( 


Connection_43 ( 

1 -> (A_System *> Flight_System_Names. Dummy, 

Dummy_Element ■> (Element «> Global_Types.A_Cb, 
Cb_Element «> Dsa.Dummy_Cb_1, 
Cb_Side -> Cb_Object_Manager.Side_1)), 

2 *> (A_System ■> Flight_System_Names.Dc_Power, 

Dc_Element «> (Element *> Gbbal_Types.A_Bus, 

Bus_Element •> DcpaDc_Power_Bus_J, 
Bus_Side «> 2))). 


Connection_44 -> ( 

1 -> (A_System -> Flight_System_Names.Dummy, 

Dummy_Element -> (Element -> Global_Types.A_Cb, 
Cb_Element -> Dsa.Dummy_Cb_2, 
Cb_Sbe -> Cb_Object_Manager.Side_1)), 

2 ■> (A_System -> Flight_System_Names Dc_Power, 

Dc_Element -> (Element -> Gbbal_Types.A_Bus, 

Bu$_Element -> DcpaDc_Power_Bus_2, 
Bus_Slde «> 2))), 


Connectlon_45 -> ( 

1 -> (A_System -> Flight_Sy$tem_Names.Dummy, 

Dummy_Element *> (Element *> Global_Types.A_Cb, 
Cb_Element -> Dsa.Dummy_Cb_3, 
Cb_Slde «> Cb_Object_Manager.Side_1)), 

2 *> (A_System «> Flight_System_Names.Dc_Power, 

Dc_Element *> (Element *> Gbbal_Types.A_Bus, 

Bus_Element -> Dcpa Dc_Power_Bus_3, 
Bus_Side *> 2))), 


CMU/SEI— 89-TR-5 


153 





Connoction_46 «> ( 

1 «> (A_System «> Flight_SystGm_NamGs.Dummy, 

Dummy_Element *> (Element -> Global_TypGS.A_Cb, 
Cb_ElGmGnt -> Dsa.Dummy_Cb_4, 
Cb_SldG «> Cb_ObjGCt_ManagGr.SidG_1)), 

2 *> (A_System *> Flight_System_Names.Dc_Power, 

Dc_Element «> (Element -> Gk>bal_Types.A_Bus, 

Bus_ElGmGnt «> DcpaDc_Power_Bus_4, 
Bus_Side -> 2))), 


Connoction_47 «> ( 

1 *> (A_SystGm -> Flight_System_Names.Dummy, 

Dummy_ElGmGnt *> (Element «> Global_Types.A_Cb, 
Cb_ElGmGnt «> Dsa.Dummy_Cb_5, 
Cb_Side *> Cb_Object_ManagGr.SidG_1)) ( 

2 «> (A_SystGm «> Flight_System_Names.Dc_Power, 

Dc_ElGmGnt «> (ElomGnt «> Global_Types.A_Bus ( 

Bus_Element ~> Dcpa.Dc_Power_Bus_5, 
Bus_Side *> 2))), 


Connection_48 -> ( 

1 *> (A_System -> Fljght_SystGm_NamGs.Dummy, 

Dummy_Element *> (Element *> Global_TypGS.A_Cb, 
CbJElement Dsa.Dummy_Cb_6, 
Cb_Side «> Cb_Object_Manager.Side_1)), 

2 *> (A_System *> Flight_System_Names.Dc_Power, 

Dc_Element «> (Element *> GlobaI_Types.A_Bus, 

Bus_Element «> Dcpa.Dc_Power_Bus_6, 
Bus_Side *> 2))), 


Connection_49 -> ( 

1 «> (A_System *> Flight_System_Names.Dummy, 

Dummy_Element -> (Element *> Global_Types.A_Cb, 
Cb_Eiement ~> Dsa.Dummy_Cb_7, 
Cb_Side *> Cb_Object_Manager.Side_1)) f 

2 «> (A_System -> Fhght_System_Names.Dc_Power, 

Dc_Element *> (Element «> Global_Types.A_Bus, 

Bus_Element *> Dcpa.Dc_Power_Bus_7, 
Bus_Side -> 2))), 


Connection_50 *> ( 

1 *> (A_System *> FIight_System_Names.Dummy, 

Dummy_Element *> (Element *> Global_Types.A_Cb, 
Cb_Element *> Dsa.Dummy_Cb_8, 
Cb_Side *> Cb_Object_Manager.Side_1)), 


154 


CMU/SEI-89-TR-5 



2 «> (A_System -> Flight_System_Names.Dc_Power, 

Dc_Element «> (Element Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Power_Bus_8, 
Bus_Side «> 2))), 


Connection_51 -> ( 

1 -> (A_System -> F1ight_Sy$tem_Names.Dummy, 

Dummy_Element «> (Element -> Global_Types.A_Cb, 
Cb_Element «> Dsa.Dummy_Cb_9, 
Cb_SkJe -> Cb_Object_Manager.Side_1)), 

2 «> (A_System «> Flight_System_Names.Dc_Power, 

Dc_Element -> (Element «> Global_Types.A_Bus, 

Bus_Element -> Dcpa.Dc_Power_Bus_9, 
Bus_Side «> 2))), 

Connection_52 -> ( 

1 «> (A_System -> Flight_System_Names.Dummy, 

Dummy_Element -> (Element -> Global_Types.A_Cb, 
Cb_Element «> Dsa.Dummy_Cb_10, 
Cb_Side -> Cb_Object_Manager.Side_1)), 

2 -> (A_System -> Flight_System_Names.Dc_Power, 

Dc_Element ■> (Element -> Gtobal_Types.A_Bus t 

Bus_Element *> Dcpa.Dc_Power_Bus_10, 
Bus_Side «> 2)))); 

pragma Page; 


CMU/SEI-89-TR-5 


155 





procedure Process_Voltage_Lcf_For 

(This_Connection : Flight_Executive_Connection__Names) is 

—I . 

—/ Description: 

—/ Process voltage and Lcf for a specific flight executive connection. 

—/ Given a Connection to process , the power info 
—/ is extracted from the object at one side of the connection, 

—/ filtered if necessary, and then placed on the object on the 
—/ other side of the connection. 

—I 

—/ Parameter Description: 

—I ThisjConnectbn is the connection to be processed. 

-I 

—/ Notes: 

—/ none 

—I . 

The_Power_lnfo : Electrlcal_Units.PowerJnfo; 

begin 

declare 

The_Connection : A_Flight_Executive_Connection 

renames The_Flight_Executive_Connections (This_Connection); 

begin 

The_Power_lnfo :■ 

Bus_Object_Manager.Get_Power_lnfo_From ( 

A_Bus -> Acpa.Named_Buses 

(The_Connection (1).Ac_Element.Bus_Element), 
A_Bu$_Side -> The_Connectlon (1).Ac_Element.Bus_Side); 

Tru_Object_Manager.Give_Voltage_Lcf_To ( 

A_Tru «> Dcpa.Named_Trus 

(The_Connection (2).Dc_Element.Tru_Element), 

A_Tru_Slde -> The_Connection (2).Dc_Element.Tru_Side, 

Volts «> The_PoweMnfo.V, 

Load_Conversion «> The_PowerJnfo.Lcf); 

end; 

end Process_Voltage_Lcf_For; 
pragma Page; 


156 


CMU/SEI-89-TR-5 





procedure Process_Load_For 

(This_Connection : Flight_ExecLrtive_Connectlon_Names) Is 

—I . 

—/ Description: 

—/ Process load for a specific flight executive connection. 

—/ Given a Connection to process, the power info 
—/ is extracted from the object at one side of the connection, 

—/ filtered if necessary, and then placed on the object on the 
—/ other side of the connection. 

-I 

—/ Parameter Description: 

—I ThisjConnaction is the Connection to be processed. 

—I 

—/ Notes: 

—/ none 

—I . 

The_Power_lnfo : Electrical_Units.Power_lnfo; 

begin 

declare 

The_Connection : A_Flight_Executive_Connection 

renames The_Flight_Execirtive_Connections (This_Connection); 

begin 

The_Power_lnfo > 

Cb_Object_Manager.Get_Power_lnfo_From ( 

A_Cb «> Dsa.Named_Cbs 

(The_Connection (1 ).Dummy_El 0 ment.Cb_Element) 1 
A_Cb_Side «> The_Connection (1).Dummy_Element.Cb_Side); 

Bus_Object_Manager.Give_CurTent_To ( 

A_Bus -> Dcpa.Named_Buses 

(The_Connection (2).Dc_Element.Bus_Element) l 
A_Bus_Side -> The_Connection (2).Dc_Element.Bus_Side t 
Load «> The_Power_lnfo.l); 

end; 

end ProcessLoadFor; 
pragma Page; 


CMU/SEI-89-TR-5 


157 












procedure Process_Cb_Linkages Is 

—I . 

—/ Description: 

—/ This procedure processes the linkage between a 
—/ hardware linkage buffer and CB's in DC power. 

—I 

—/ Parameter Description: 

—/ none 

—I 

—/ Notes: 

—/ None 

—I . 

Hardware_Position : Cb_Object_Manager.Cb_Position > Cb_Object_Manager.Closed; 
A_Cb_Unk: Cbl.CbJJnkageJds; 

begin 

for Cb_Name In Dcpa.Cb_Names loop 

A_Cb_Link> Cbl.Get_A_Dc_Cb_Link (Cb_Name); 

Hardware_Position > Cb_Object_Manager.Closed; 

If Cbl.Get_Hardware_Cb_Posrtlon (A_Cb_Llnk) - 
Cb_Object_Manager.Open then 
Hardware_Position > Cb_Object_Manager.Open; 
end If; 

Cb_Object_Manager.Give_Position_To 

(Dcpa. N am ed_Cbs (Cb_Nam e) ( H ardware_Position); 
end loop; 

end Process_Cb_Linkages; 
pragma Page; 


158 


CMU/SEI-89-TR-5 





procedure Process_External_Connections_To_Dc_Power Is 

—I . 

—/ Description: 

—/ This procedure processes seiected connections between the 
—/ DC Power system and the other systems at the flight 
—/ executive level. Processing of connections makes 
—/ the DC Power system consistent with its environment. 

-I 

—/ Parameter Description: 

—/ none 

—I 

—/ Notes: 

—/ none 

—I . 

begin 

for A_Cormection In Ac_Power_Dc_Power_Connection_Names’First.. 
Ac_Power_Dc_Power_Connection_Names’Last loop 
Process_VoltageJ_cf_For (A_Connection); 

end loop; 

for A_Connection In Dummy_System_Dc_Power_Connection_Names’First.. 
Dummy_System_Dc_Power_Connection_Narnes’Last loop 
Process_Load_For(A_Connection); 

end loop; 

end Process_External_Connectlons_To_Dc_Power; 


—I . 

—/ Modification History: 

—/ 01 Mar89 kl changed ail occurrences of "wire ” to "bus * 

—/ 22JunQ8 der Final revisions of procedures to process 
—/ Voltage Lcf and Load, made to include the addition of 

—/ Wires and the changes made in the connection. 

—/ 17Jun88 der Connections changed and now include the 
—/ connections to Wires. 

—/ 01 Sep87 tac made separate from package Flight_Executive 
—/ 21Aug87 kl Created 

—/- 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Flight_Exeajtive_Connectk)ns; 

pragma Page; 


CMU/SEI-89-TR-5 


159 








D.20 Procedure Main - Test Driver 


—/. 

—/ Module Name: 

—/ Main 

—I 

—/ Modulo Type: 

—/ Main Procedure 

-I 

—/ Module Purpose: 

—/ Test driver for testing flight executive and DC Power system 

-I 

—/- 

—/ Module Description: 

—/ This procedure is a test driver for testing the flight executive and the DC Power system. 

—I The procedure inputs the number of processing iterations. The user may then set one of the 
—I circuit breakers to dosed and the procedure runs the same number of iterations again. 

-I 

—/ Parameter Description: 

—/ None 

—I 

—/ Notes: 

—/ none 

—I ... 

with Global_Types; 
with Electrical_Units; 

with Ac_Power_System_Aggregate; 
with Dummy_System_Aggregate; 
with Dc_Power_System_Aggregate; 

with Flight_Execirtive; 

with Bus_Object_Manager; us© Bus_Object_Manager; 
with CbjObject_Manager; 
with Tnj_Object_Manager; 

with Cb_LinkageJnterface; 
with Textjo; 

procedure Main Is 

package Eu renames Electrical_Units; 

package Dcpa renames Dc_Power_System_Aggregate; 

package lnt_lo is new Textjo.IntegeMo(lnteger); 

package Voltagejo Is new TextJo.EnumerationJo(Eu.Voltage); 


160 


CMU/SEI-89-TR-5 






package Currentjo is new Textjo Flo at Jo(Eu. Current); 

package LcMo Is new Textjo.Floatjo (Eu.Load_Conversion_Factor); 

package Ac_BusJo Is new Text Jo. Enumeration Jo 
(Ac_Power_System_Aggregate.Bus_Names); 

package Dummy_CbJo Is new Textjo. Enumeration Jo 
(D urn my_System_Aggregate.Cb Joannes); 

package Dc_Cb_lo Is new Text^lo.Enumeration lo 
(Dc_Power_System_Aggregate.Cb_Names); 

package DcJ3usJo Is new TextJo.EnumerationJo 
(Dc_Power_System_Aggregate.Bus_Names); 

package Trujo Is new TextJo.EnumerationJo 
(Dc_Power_System_Aggregate.Tru_Names); 


Ac_PowerJnfo : Eu.PowerJnfo :- 
(V -> Eu.Available_Voltage t 
I «> Eu.No_Current, 

Let -> 1.0); 

Dummy_PowerJnfo : Eu.PowerJnfo :- 
(V -> Eu.Zero_Voltage, 

I -> 10.0, 

Let -> 0.0); 

Frame : Global_Types.Execution_Sequence :- 

Globa l_Types.FrameJ Jdodules_Are_Executed; 

A_Power_lnfo : Eu.PowerJnfo; 

Number_Of_Loops: Integer:- 1; 

Print_AII: Integer:- 0; 

A_Dc_Cb: Dc_Power_System_Aggregate Cb_Names; 

procedure Write_PowerJnfo (Thejnfo: In Eu.PowerJnfo) Is 

begin 

VoltageJo.Put (Thejnfo.V); 

Textjo.Put f "); 

CurrentJo.Put (Thejnfo.l, 3, 3, 0); 

Textjo.Put (" "); 

Lcf Jo.Put (TheJnfo.Lcf, 3, 3, 0); 

TextJo.NewJJne; 

end Write_PowerJnfo; 

procedure Print_The_Stuff is 
Some_Points: Integer; 


CMU/SEI-89-TR-5 


161 





begin 

TextJo.Put ("AC Power System values:'); 

TextJo.NewJJne; 

for a_wire in ac_power_systom_aggregato. wire_names loop 

a_power_info wire_object_manager.get_pow9r_info_from ( 

ajwire -> ac_powar_syst9m_aggregat9.named_wires(a_wira), 
a_wir9_sid9 -> 1); 
ac_ wir9_b.put (a_ wira); 
taxtjo.put ( m : 7 ; 

write_pow9r_info(a_pow9r_info); 

a_power_info > wire_object_manager.get_powar_info_from ( 

ajwira -> ac_powor_syst9m_aggragate.named[_wires(a__wiro), 
a_wire_sbe -> 2); 
ac_wire_b.put (a_wire); 
textjo.put ( m : 7 ; 

write_powerJnfo(a_power_info); 

end loop; 

Text_lo.Put ("Dummy System values:"); 

T e xt_b. N e w_Li ne; 

for a_cb in dummy_system_aggr eg ate.cb__names bop 

a_power_info > cb_object_manager.get_power_info_from ( 
a_cb »> dummy_system_aggregate.named_cbs(a_cb), 
a_cb_sbe «> cb_object_manager.side_ 1); 
dummy_cbJo.put (a_cb); 
textjo.put (“; 7; 

write_power_info(a_power_info); 

a_power_info > cb_object_manager.got_power_info_from ( 
a_cb -> dummy_system_aggregate.named_cbs(a_cb), 
a_cb_side cb_object_manager.side_2); 
dummy_cb_io.put (a_cb); 
textjo.put ( m : 7; 

write_power_info(a_powerJnfo); 

end bop; 

TextJo.Put ("DC Power System values:"); 

T ext_lo. N ew_Line; 

for A_Tru In Dcpa.Tru_Names loop 

A_Power_lnfo > Tru_Object_Manager.Get_Power_lnfo_From ( 
A_Tru -> Dcpa.Named_Trus(A_Tru), 

A_Tru_Side -> Tru_Object_Manager.Ac_Side); 

TruJo.Put (A_Tru); 

TextJo.Put (":"); 

Wrrte_Power_lnfo(A_Power_lnfo); 

A_Power_lnfo > Tru_Object_Manager.Get_Power_lnfo_From ( 
A_Tru *> Dcpa.Named_Trus(A_Tru), 

A_Tru_Side *> Tru_Object_Manager.Dc_Side); 

TruJo.Put (A_Tru); 

TextJo.Put f:"); 

Write_PowerJnfo(A_PowerJnfo); 
end loop; 

Te xt Jo. N ewJJne; 


162 


CMU/SEI-69-TR-5 



for A_Ebus In Dcpa.Bus_Names loop 

A_PoweMnfo Bus_Object_Manager.Get_PowGr_lnfo_From ( 
A_Bus -> Dcpa.Named_Buses(A_Bus), 

A_Bus_Side -> 1); 

DcJ3usJo.Put (A_Bus); 

Text_lo.Put (”:"); 

Write_Power_lnfo(A_Power_lnfo); 

A_Power_lnfo > Bus_Object_Manager.GGt_PowGr_lnfo_From ( 
A_Bus -> Dcpa.NamGd_BusGs(A_Bus), 

A_Bus_SidG -> 2); 

Dc_Bus_lo.Put (A_Bus); 

TGXtJo.Put f: *); 

WritG_PowGr_lnfo(A_PowGrJnfo); 
end loop; 

TextJo.NewJJne; 

for A_Cb In Dcpa.CbJslames loop 

A_PowGr_lnfo > Cb_ObjGd_ManagGr.GGt_PowGr_lnfo_From ( 
A_Cb -> Dcpa.NamGd_Cbs(A_Cb), 

A_Cb_Side -> Cb_Objed_Manager.Side_1); 

Dc_CbJo.Put (A_Cb); 

TextJo.Put f:"); 

WriteJ^werJ nfo (A_PowgM nfo); 

A_PowGrJnfo > Cb_ObjGct_ManagGr.GGt_PowGr_lnfo_From ( 
A_Cb «> Dcpa.Named_Cbs(A_Cb), 

A_Cb_Side -> Cb_Object_Manager.SideJ2); 

Dc_Cb_lo Put (A_Cb); 

TGXtJo.Put (":"); 

WritG_PowGrJnfo(A_PowGrJnfo); 

end loop; 

Gnd Print_ThG_Stuff; 
begin 

— initialize ac_power connection points names 

for A_Bus In Ac_PowGr_System_AggrGgatG.Bus_NamGs loop 
Bus_ObjectJdanager.Give_VoltageJ_d_To ( 

A_Bus -> Ac_PowGr_SystGm_AggrGgate.Named_BusGS (A_Bus), 
A_Bus_Side -> 1, 

Volts ■> Ac_PowerJnfo.V, 

Load_Conversion -> Ac^PowerJnfo.Ld); 
end loop; 


— initialize dummy connection point names 

for A_Cb In Dummy_System_Aggregate.CbJJames loop 
Cb_ObjGct_ManagerGrve_CurrGnt_To ( 

A_Cb -> Dummy_System_Aggregate.Named_Cbs (A_Cb), 
A_Cb_Side -> Cb_Object_Manager.Side_2, 


CMU/SEI-89-TR-5 


163 






Load «> DummyJ’owerJnfo.l); 

end loop; 

TextJo.Put (Tlow many Iterations? "); 
lnt_lo.Get (Number_Of_Loops); 

If Number_Of_Loops > t then 

TextJo.Put ("Print all Iteration results? (0«no, t*yes) "); 
lnt_k>.Get (Print_AII); 
end if; 

TextJo.Put ("_"); 

TextJo.NewJJne; 

for I In 1 .. Number_Of_Loops loop 

for FrameJJumber In Global_Types.Execution_Sequence loop 
Flight_Executive.Update_Flight_Executive (Frame_N umber); 

end loop; 

If Print_AII * 1 then 
Print_The_Stuff; 
end If; 
end loop; 

If Print__AII = 0 then 
TextJo.Put ("After"); 
lntJo.Put(Number_Of_Loops,4); 

TextJo.Put (" Iterations:"); 

TextJ o. N e w_Li n e; 

Print_The_Stuff; 
end If; 

Text Jo Put ("Which DC Power CB do you want to break? "); 

Dc_CbJo.Get (A_Dc_Cb); 

Cb_LinkageJnterface.Set_Hardware_Cb_Position ( 

Hardware_Link «> Cb_Linkage_lnterface.Get_A_Dc_Cb_Link(A_Dc_Cb), 
A_Position «> Cb_Object_Manager.Open); 

for I In 1 .. Number_Of_Loops loop 

for Frame_Number In GlobalJypes.Execution_Sequence loop 
Flight JExecutive.UpdateJ^ightJixecutive (Frame_Number); 

end loop; 

If Print_AII « 1 then 
PrintJTie_Stuff; 

end If; 
end loop; 

If Print_AII - 0 then 
TextJo.Put ("After"); 
lntJo.Put(Number_Of_Loops,4); 

Text_lo.Put C Iterations:"); 

TextJo.NewJJne; 


164 


CMU/SEI-89-TR-5 





Print_The_Stuff; 

end if; 

—I . 

—/ Modification History: 

—/ 01Mar89 kl changed all occurrences of 'wire* to ”bus m 
—/ 22Jun88 der modified to test the inclusion of wires 

—/ 02Oct87 tac Created 

—/ - 

—/ Copyright (C) 1989 by the Carnegie Mellon University, Pittsburgh, PA. 

—I . 

end Main; 


CMU/SEI-89-TR-5 


165 









166 


CMU/SEI-89-TR-5 




_j JN t LlM _ri£D,_lINCI .ASSI Fi-FID_ 

fCCUHlTY CLASSI^CATIQn Of TmiS PAGE 


REPORT DOCUMENTATION PAGE 


1. fitPORT SECURITY CLASSIFICATION 

UNCLASSIFIED 


lb RESTRICTIVE MARKINGS 

NONE 


7m SECURITY CLASSIFICATION AUTHORITY 

N/A 


?b OECLASSlFiCATlON/OOWNGRAOiNG SCHEDULE 

N/A 


3 OISTRI8UTION/AVAILABILITV of repofit 

APPROVED FOR PUBLIC RELEASE 
DISTRIBUTION UNLIMITED 


PERFORMING ORGANIZATION REPORT NUMBER(S) 

CMU/SEI-89-TR-5 


5. MONITORING ORGANIZATION REPORT NUMBER(S) 

ESD-TR-89-005 


6« name OF PERFORMING ORGANIZATION 6b. OFFICE SYMBOL 

(If applicable l 

SOFTWARE ENGINEERING INSTITUTE! SEI 


7*. NAME OF MONITORING ORGANIZATION 


SEI JOINT PROGRAM OFFICE 


6c ADDRESS (City. State and ZIP Code l 

CARNEGIE MELLON UNIVERSITY 
PITTSBURGH, PA 15213 


7b. AOORESS (Ctty. State and ZIP CodeI 

ESD/XRS1 

HANSCOM AIR FORCE BASE, MA 01731 


U NAME OF FUNOING/SPONSORINC 
ORGANIZATION 

SEI JOINT PROGRAM OFFICE 


0b. OFFICE SYMBOL 
(If applicable I 

SEI JPO 


9. PROCUREMENT INSTRUMENT IDENTIFICATION NUMBER 

F1962885C0003 


Sc. AOORESS {Cify, Stale and ZIP Code) 


10 SOURCE OF FUNOING NOS 

CARNEGIE MELLON UNIVERSITY 

SOFTWARE ENGINEERING INSTITUTE JPO 
PITTSBURGH. PA 15213 


PROGRAM 

element no 

PROJECT 

NO 

N/A 


TASK 

NO. 

N/A 

WORK UNIT 

NO 

N/A 

11 TITLE (Include Security Classification) 

AN 00D SOLUTION EXAMPLE: A FLIGHT 

SIMULATOR 

ELECTRICAL S 

rSTEM 





13*. TYPE OF REPORT 1 13b. TIME COVERED 

14 OATE of REPORT (Yr . Mo . Day) 

15 PAGE COUNT 


FINAL 


FROM 


TO 


16. supplementary notation 


17 C OS AT 1 COOES 

FIELD 

group 

SUB CR 








18 SUBJECT TERMS tCon tinue on reverge if necessary and identify by bloc 4 niim6frj 

FLIGHT SIMULATORS, OBJECT ORIENTATION, PARADIGMS, SOFTWARE 
DESIGN 


19 ABSTRACT (Continue on reverte if necessary and identify by bloc 4 numbert 

THIS REPORT DESCRIBES AN IMPLEMENTATION OF A SUBSET OF AN AIRCRAFT FLIGHT SIMULATOR 
ELECTRICAL SYSTEM. IT IS A RESULT OF WORK ON THE ADA SIMULATOR VALIDATION PROGRAM 
(ASVP) CARRIED OUT BY MEMBERS OF THE TECHNICAL STAFF (MTS) AT THE SOFTWARE ENGINEERING 
INSTITUTE (SEI). THE MTS DEVELOPED A PARADIGM FOR DESCRIBING AND IMPLEMENTING FLIGHT 
SIMULATOR SYSTEMS IN GENERAL. THE PARADIGM IS A MODEL FOR IMPLEMENTING SYSTEMS OF OBJECTS. 
THE OBJECTS ARE DESCRIBED IN A FORM OF DESIGN SPECIFICATION CALLED AN OBJECT DIAGRAM. 

THIS REPORT HAS BEEN PREPARED TO DEMONSTRATE A FULL IMPLEMENTATION OF A SYSTEM: 

PACKAGE SPECIFICATIONS AND BODIES. THE INTENT IS TO PROVIDE AN EXAMPLE; THE CODE IS 
FUNCTIONAL, BUT THERE IS NO ASSURANCE OF ROBUSTNESS. 


20 OISTRI BUTION/AVAILABI LIT Y OF ABSTRACT 

UNCLASSIFIEO/UNLIMITEO Q SAME as RPT. □ OYIC USERS £5 


21. ABSTRACT SECURITY CLASSIFICATION 

UNCLASSIFIED, UNLIMITED 


77m name OF RESPONSIBLE individual 

KARL SHIKCLER 


22b TELEPHONE NUMBER 
llnctude Area Code t 

(412) 268-7630 


22c OFFICE Symbol 

SEI JPO 


DO FORM 1473, 83 APR 


COITION OF 1 JAN 73 IS OBSOLETE. 


UNLIMITED. UNCLASSIFIED 

SECORiT v classic ication o f t«,spa. 
















































