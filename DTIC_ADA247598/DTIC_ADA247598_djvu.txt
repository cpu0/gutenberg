AD-A247 598 


NTATION PAGE 


Form Approved 
OPMNo. 0704-0188 


1 houf p*r rMponu. includingiim«for roviowinginUfuctions. MarchingaxatingdatalourcMgatharingandmarainingmadata 
this txjrdan aatimale or any othar aapaci of thia colaction of information. Incfuding auggaationa for raducing thie burdan. to WashingKtn 
5 Jaffaraon Davis Highway. Suita 1204. Artingtan. VA 22202-4302. and to lha Offica of Intotmatfon and Ragutatory Affairs. Offica of 


I PORT DATE 

1 ^__ 

3. REPORT TYPE AND DATES COVERED 

Final: 20 Sept 1991 to 01 Jun 1993 

4. TITLE AND SUBTITLE 

Validation Summary Report; Verdix Corporation, VADS VAX/VMS => 68040, 

VAda-110-03140, Version 6.0, MicroVAX 3100 (Host) to Motorola MVME165 
(Target), 910920W1.11201 

5. FUNDING NUMBERS 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton. OH 

USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-491.0292 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 |j 

T! 

r 

10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release: distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS VAX/VMS => 68040, VAda-110-03140. Version 6.0, Wright-Patterson AFB, OH, MicroVAX 
3100 (Host) to Motorola MVME165 (Target), ACVC 1.11. 


14 SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capabiirty, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/^IL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16 PRICE CODE 


20 LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 





















Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 20 Septebmer 1991. 

Compiler Name and Version; VADS VAX/VMS=>68040, VAda-110-03140, 

Version 6.0 

Host Computer System: MicroVAX 3100 (VMS V5.3) 

Target Computer System: Motorola MVME165 (Motorola 68040 bare board) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910920W1.11201 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada v; 

Di re 
Institute 
Alexandri 


anization 

ter and Software Engineering Division 
Defense Analyses 
22311 



3a Joint Program office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


92-06984 






AVF Control Number: AVF-VSR-491.0292 

18 February 1992 
91-07-16-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 910920W1-11201 
VERDIX Corporation 

VADS VAX/VMS->68040, VAda-110-03140, Version 6.0 
MicroVAX 3100 => Motorola MVME165 


Prepared By: 

Ada_Val i da t i on__Faci 1 i ty 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


! Accior. for 



By 


A.ji''! r 


DirA i 


to') 










Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was coiqpleted on 20 Septebmer 1991. 

Conpiler Name and Version: VADS VAX/VMS=>68040, VAda-110-03140, 

Version 6.0 

Host Conputer System: MicroVAX 3100 (VMS V5.3) 

Target Conputer System: Motorola MVME165 (Motorola 68040 bare board) 

Customer Agreement Number; 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910920W1.11201 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 


Ma Validation Facility 
Steven P. Wilson 
Technical Director 



— 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Va^dAti^n Organization 

Direcjpr^^mputer and Software Engineering Division 
Institute Tor Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 
Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version: VADS VAX/VMS=>68040, VAda-110-03140 

Version 6.0 

Host Computer System: MicroVAX 3100 (VMS V5.3) 

Target Computer System: Motorola MVME165 

(Motorola 68040 bare board) 


Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 







TABLE OF CCOTENTS 


CHAPTER 1 INTRODUCTIOJ 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERI'IS.1-3 

CHAPTER 2 IMPLEMENTA.TIOJ DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS .3-2 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The orgeinizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INTRODUCTIC»I 


1.2 REFERENCES 

[Ada83I Reference Manual for the Ada Programming Lan^age, 

ANSI/MIL-STI>-1815A, February 1963 and ISO 8652-1^87. 

[Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, cind E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking mcinner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT euid SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity fmctions used to defeat some compiler 
optimizations allowed by the Ada Steindard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executeible. Each test in this class is compiled euid the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code v^ich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these einticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIC»^ OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
treuisformation of Ada programs into executadDle form eind 
execution thereof. 

Ada Compiler The means for testing compliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body \diich provides policy eind 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The eibility of the implementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A fxinctional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone vinit or may consist of 
several inter-connected units. 


1-3 




INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into ein 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inplementation for 
which validation status is realized. 

A computer system vrtiere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevcint for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form ’’<section> .<subsection> :<paragraph>. " 

Software that controls the execution of programs eind that 
provides services such as resource allocation, scheduling, 
input/output control, eind data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

"D9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vdiich are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L.-Y (14 tests) 
C35708L..Y U4 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests; 
C35802L..Z (15 tests) 
C45321L.,Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests checlt for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

0453040 

0454110 

0454120 

C45502C 

0455030 

0455040 

O45504F 

0456110 

C45613C 

0456140 

0456310 

0456320 

B52004D 

C55B07A 

B55B09O 

B86001W 

08600dC 

OD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this implementation, there is no such type. 


C35713D cind B86001Z check for a predefined floating-point type with a 
name other them FLOAT, LONG_FLQAT, or SHORT_FLOAT; for this 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of che 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 







IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), cind CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The following 19 tests check operations on sequential, direct, and 
text files vdien multiple internal files are associated with the same 
external file; USE_ERROR is raised when this association is attempted. 


CE2107A..H CE2107L CD2110B CE2110D CE2111D 
CE2111H CE3111A..B CE3111D..E CE3114B CE3115A 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 

TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 


2-3 




IMPLEMENTATION DEPENDENCIES 


CE3304A checks tJiat SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Tiiplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
in^lementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H B91001H BC1303F BC3005B BD2B03A 

BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 


CD1009A, CD1009I, CD2A24A, CD2a 31A..C (3 tests) were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
Unchecked_Conversion according to the interpretation given in Al-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form; 

" * CHECK C»I REPRESENTATION FOR <TyPE ID> FAILED." 


2-4 






CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

Sam Quiring/Kim Patterson 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 

For sales information eibout this Ada implementation, contact: 

Stephen F. Zeigler 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 




PRCXTESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vrfiether the test is applicable or inappliceible; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's mcixinium 
precision (item e; see section 2.2), 2 u\d those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of i^plicable Tests 3787 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicc±ile Tests 87 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 288 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
talcen on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host coitputer. 


The tests were compiled euid linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link described above, and run. The results 
were captured on the host computer system. 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 



PROCESSING INFORMATICS 


Option/Switch Effect 


/NCWARNING suppress generation of warning messages 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 



APPEM)IX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first :able lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 

$BIG_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V => '2') 

$BIG_ID3 (1..V/2 •=> 'A') & '3' & 

{1..V-1-V/2 => 'A') 

$BIG_ID4 (1..V/2 => 'A') & '4' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 => '0') & "298" 

$BIG_REAL_LIT (l..V-5*> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 => 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'A') & '1' & 

SBLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') "F.E:" 


A-1 








MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 => 'A') & 

The following table lists all of the other macro pareimeters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_647 

$DEFAULT_MEM_SIZE 16_777_216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME VAX_CROSS_680X0 

$DELTA_DOC 0.0000000004656612873077392578125 

$ENTRY_ADDRESS SYSTEM,16#40#) 

$ENTRY_ADDRESS1 SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 SYSTEM."+"(16#100#) 

$FIELD_LAST 2_147_483_647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLQAT_NAME NO_SUCH_TYPE 

$FORM_STRING 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION 

100_000.0 

$GREATER_THAN_DURATia^ BASE LAST 

T 0_00^_000 

$GREATER_THAN_FLQAT_BASE LAST 

1.'5e+308 

$GREATER_THAN FLOAT_SAFE LARGE 

1.701411837E+38 

A-2 






MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLQAT SAFE_LARGE 

1.7TJ1415E+38 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'^/illeqal/tile_name/2} l%2102c.dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

''^/illegal/file_naine/CE2102C* .dat" 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMAl PRAOIA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAO^ INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN_DURAT10N_BASE FIRST 

- 1 ^_ 000 _ 000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CODE_0'(OP => NOP); 

$MACHINE_CODE_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

TINY_INTEGER 

A-3 


$NAME 





MACRO PARAMETERS 


$NAME_LIST 

VAX_CROSS_680X0 

$NAME_SPECIFICATIONl 

DKBIOO:[ACVC1_11.C.E]X2120A.; 

$NAME_SPECIFICATION2 

DKBIOO:[ACVC1_11.C.E]X2120B.; 

$NAME_SPECIFICATICW3 

DKBIOO: [ACVC1_11.C.E]X3119A. ; 

$NEG_BASED_INT 

16#FOOOOOOE# 

$NEW MEM_SIZE 

16_777_216 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

VAX_CROSS_680X0 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITION 

RECORD SUBP: OPERAND; END RECORD 

$RECORD_NAME 

CODE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

STICK 

0.01 

$VARIABLE_ADDRESS 

VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 

VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 

VAR_3'ADDRESS 

Syour pragma 

PRAGMA PASSIVE 





APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to coiroiler documentation and 
not to this report. 


ADA 

Ada compiler 
Syntax 

VADS ADA source_file_name [, ...] 

Command_Qualifiers 
/DEPENDENCIES 

Analyze for dependencies only; no link will be performed if this 
option is given (/MAIN and /OUTPUT options must not be used with 
this qualifier). 

/ERRORS 

/ERRORS[=(option[,...])] 

Process conpilation error messages using the ERROR tool and direct 
the output to SYS$OUTPUT; the parentheses can be omitted if only 
one qualifier is given (by default, only lines containing errors 
are listed) 

Options: 

LISTING 

List entire input file 
EDITOR!-"editor"] 

Insert error messages into the source file and call a text 
editor (EDT by default). If a value is given as a quoted 
string, that string is used to invoke the editor. This allows 
other editors to be used instead of the default. 


B-1 






COMPILATION SYSTEM OPTIONS 


OUTPUTf =file_name ] 

Direct error processed output to the specified file name; 
if no file name is given, the source file name is used with 
a file extension .ERR. 

BRIEF 

List only the affected lines.[default] 

Only one of the BRIEF, LISTING, OUTPUT or EDITOR options 
can be used in a single command. 

For more information about the /ERRORS option, see also [Users 
Guide, Compiler], Compiler Error Message Processing. 

/EXECUTABLE 
/EXECUTABLE= fi1e_name 

Provide an explicit name for the executable when used 

with the /MAIN qualifier; the file_name value must be supplied 

(if the file type is omitted, .EXE is assumed.) 

/KEEP_IL 

Keep the intermediate language (IL) file produced by the compiler 
front end. 

/LINK_ARGUMENTS 
/LINK_ARGUMENTS="value" 

Pass command qualifiers and parameters to the linker. 

/MAIN 

/MAIN* [ uni t_name ] 

Produce an executable program using the named unit as the main 
program; if no value is given, the name is derived from the 
first Ada file name parameter, (the .A suffix is removed); 
the executable file name is derived from the main program name 
unless the /EXECUTABLE qualifier is used. 

/NOWARNINGS 

Suppress warning diagnostics. 

/OPTIMIZE 
/OPTIMIZE[»numbe r] 

Apply the specified level of optimization to the compilation. 
Options: 

1..9 Limit the number of optimization passes to the specified 
nximber; the default is /OFTir!IZE=l 

/NOOPTIMIZE 

do not optimize 

/OUTPUT 

/OUTPUT* fi1e_name 

Direct the output to file_name.(the default is SYS$OUTPUT) 


/RECOMPILE LIBRARY 



COMPILATION SYSTEM OPTIONS 


/RECOMPILE_LIBRARY=VADS_1ibra ry 

Force analysis of all generic instantiations causing reinstantiation 
of any that are out of date. 

/SUPPRESS 

Apply pragma SUPPRESS for all checks to the entire compilation. 
/TIMING 

List timings for phases of the compilation process. 

/VERBOSE 

Print information for the compiler. 

Description 

The command ADA executes the Ada compiler and compiles the named 
Ada source file, ending with the .A suffix. The file must reside 
in a VADS library directory. The ADA.LIB file in this directory 
is modified after each Ada unit is conpiled. 

The object for each compiled Ada unit is left in the [.OBJECTS] 
subdirectory in a file with the same name as that of the source 
with .01, .02, etc substituted for the .A.The executable file is 
left in ♦•he VADS library and has the name of the 'main' unit 
with the extension .EXE. For cross compilers, the file extension 
is .VOX. The /EXECUTABLE qualifier can be used to produce an 
executable with some other name. 

By default, ADA produces only object and net files. If the /MAIN 
option is used, the compiler automatically invokes LD and builds 
a complete program with the named library unit as the main program. 

Non-ada object files may be given as arguments to ADA. These files 
will be passed on to the linker and will be linked with the 
specified Ada object files. 

Command line options may be specified in any order, but the order 
of compilation and the order of the files to be passed to the 
linker can be significant. 

Several VADS compilers may be simultaneously available on a single 
system.The ADA command within any version of VADS on a system 
will execute the correct compiler components based upon visible 
library directives. 

It is often useful to see a disassembly of the machine instructions 
generated by the compiler. On cross targets, use DB or DAS. 

On self target compilers, use DB. 

See Also 


B-3 




COMPILATION SYSTEM OPTIONS 


[VADS Reference] DB, ERROR, LD, MKLIB and DAS 
Diagnostics 

The diagnostics produced by the VADS con^iler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes 
a section number and optionally, a paragraph number enclosed in 
parentheses. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker docmentation and not 
to this report. 


LD 


prelinker 

Syntax 

VADS LD unit_name 

Command_Oualifiers 
/t:arly 

/EARLY= "\ani t_name " 

Force the given unit to be elaborated as early as possible. 
(unit_name must be enclosed in double quotes.) 

/EXECUTABLE 

/EXECUTABLE[=fi1e_name1 

Put the output in the named file instead of the default .EXE. 
/FILES 

Print a list of dependent files in elaboration order and 
suppress linking. 

/T,IBRARY 

/LIBRARY= fi1e_name 

Search the named library for compilation units with which to build 
the executable image file. 


B-4 





COMPILATION SYSTEM OPTIONS 


/LINK_OPTIONS 

/LINK_OPTIONS="object_file_or_qualifier 

Link foreign object files into the image and/or add linker qualifiers. 
/UNITS 

Print a list of dependent units in order and suppress linking. 
/VERBOSE 

Print the VMS linker command prior to execution 
/VERIFY 

Print the VMS linker command but suppress execution. 

Description 

LD collects the objects files needed to make unit_name a mai.n program 
and calls the VMS linker to link together all Ada and other 
language objects required to produce an executable. Unit_name must be 
a non-generic subprogram that is either a procedure or a function 
that returns an Ada STANDARD.INTEGER (the predefined type INTEGER). 
The utility uses the net files produced by the Ada compiler to check 
dependency information. LD produces an exception mapping table, a 
xinit elaboration table, and passes this information to the linker. 

LD reads instructions for generating executables from the 
ADA.LIB file in the VADS libraries on the search list. Besides 
information generated by the compiler, these directives also include 
WITHn directives that allow the automatic linking of object modules 
compiled from other leinguages or Ada object modules not named in 
context clauses in the Ada source. Any number of WITHn directives may 
be placed into a library, but they must be numbered contiguously 
beginning at WITHl. The directives are recorded in the library's 
ADA.LIB file and have the followi.ng form. 

WITHlI LINK 1object_fileI 
WITH2I LINK Iarchive_file| 

With directives mc;y be placed in the local Ada. libraries or in any 
VADS library on the search list. 

A WITH directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITH directive in a library 
later in the library search list. 

Use INFO to change or report library directives in the current 
library. 


B-5 



COMPILATION SYSTEM OPTIONS 


All arguments after unit_name are passed on to the linker. These 
may be options for it, archive libraries, library abbreviations,or 
object files. 

Diagnostics 

Self explanatory diagnostics are produced for missing files,etc. 
Occasional additional messages are produced by the linker. 


B-6 



APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, emd to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, vdiich 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type SHORT_FLQAT is digits 6 range -3.42082E+38 .. 

3.40282E+38; 

type DURATION is delta 0.001 reinge -2147483.648 .. 

2147483.647; 


end STANDARD; 


C-1 






APPENDIX F OF THE Ada STANDARD 


ATTACHMENT I 


APPENDIX F. In^lementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE_ONLY pragma, vdien used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine vdiich saves code 
space. If a user erroneously makes an INLINE_CMSILY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefines Ada packages, but provides no user access. It is 
used only to inclement code bodies for which no actual Ada 
body ceui be provided, for exeimple the MACHINE_CODE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic insteintia- 
tion or a generic unit as the first argument eind one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
ciny subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 


C-2 





APPENDIX F OF THE Ada STANDARD 


When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
\4iich code is shared between insteintiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. It is 
included for compatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification cund 
must apply to an object declared earlier in the seime package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification eind must apply to an object or si±)progreun 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be einy of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers W or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 


C-3 



APPENDIX F OF THE Ada STANDARD 


OFF is used and any inplicit code needs to be generated. 
The default is CX^. 

1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies v^ether the code should be optim¬ 
ized by the conpiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CCKTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in i^pendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTELM package must be recompiled. 

2.7. NCX4_REENTRANT 

This pragma takes one argument vrfiich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 


C-4 





APPENDIX F OF THE Ada STANDARD 


to the coit^iler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or cu. Ada package that is referenced from a language 
other them Ada. The presence of this pragma suppresses the 
generation of elciboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in ;^pendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAOIA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and wi]l 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


C-5 




APPEM)IX F OF THE Ada STANDARD 


2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION_CHECK cind in some cases OVERFLCW_CHECK cannot be 
suppressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recoitpiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or l2d5el, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MAG1INE_C0DE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'FEF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


C-6 




APPEM)IX F OF THE Ada STANDARD 


4. Specification Of Package SYSTEM 

with UNSI(34ED_TyPES; 
package SYSTEM is 

pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTION_TABLES); 
pragma not_elaborated; 

type NAME is ( VAX_CROSS_680X0 ); 

SYSTEM_NAME : constant NAME ;= VAX_CROSS_680X0; 

STORAGE_l)NIT : constant := 8; 

MEMORY_SIZE : constant := 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant :>= -2 147 483 648; 

MAX_INT : constant :-= 2 T47_?83_^47; 

MAX_DIGITS : constant := l"?; 

MAX_MftNTISSA ; constant := 31; 

FINE_DELTA : constant := 2.0**(-31); 

TICK : constant := 0.01; 

— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE ; integer ;= 1024; 

type ADDRESS is private; 

function ">" (A: ADDRESS; B; ADDRESS) return BOOLEAN; 

function "<" (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<**"(A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function "+" (A: ADDRESS; I: INTEGER) return ADDRESS; 

function (A: ADDRESS; I: INTEGER) return ADDRESS; 

function "+" (I: UNSIC2^ED_TYPES.L)NSIC3^_INTEGER) return ADDRESS; 

function MEMORY_ADDRESS 

(I: UNSIGNED_TYPES.UNSIGNED_irrrEGER) return ADDRESS renames 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

type PROGRAM_ID is private; 

NO PROGRAM ID : constant PROGRAM ID; 


C-7 







APPEM)IX F OF THE Ada STANDARD 


private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 

NO_ADDR : constant ADDRESS := 0; 

pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN(">="); 
pragma BUILT_IN("<»"); 
pragma BUILT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSI(3^_TYPES.UNSIGNED_INTEGER; 
NO_TASK_ID : constant TASK_ID := 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIC3aED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID := 0; 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; eui explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of conponents only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point tr'pes. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit initialization of variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 


C-8 





APPENDIX F OF THE Ada STANDARD 




i 


5.4. Interrupts 

Interrupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, eui enumeration type of all the opcode mnemonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

(rODE_0' ( op => opcode ) ; 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MAOTINE CODE. The 'REF attribute 


C-9 





APPENDIX F OF THE Ada STANDARD 


may not be used as an argument in any of these functions. 
Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as 
the record size (expressed in STORAGE_UNITS) when the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENT1AL_I0 use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) when the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a maixintum line length of 500 






APPEM)IX F OF THE Ada STANDARD 






characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4 , 000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 ST0RAGE_UNITS. This is the value 
returned by T'ST0RAGE_SI2E for a task type T. 

11.4. Default Collection Size 

In the cibsence of an explicit ST0RAGE_SI2E length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-11 




