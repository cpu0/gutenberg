N87-2833 5 


APPENDIX -- Concurrent Simulation of a Parallel Jaw^d Effector 

CONCURRENT SIMULATION OF A PARALLEL JAW END EFFSaOR 



by 

Bill Bynum 

Department oS Computer Science 
College of William and Mary 
Williamsburg. VA 23183 


ABSTRACT 

This paper is an initial report on a system prc^rams developed to aid in the design 
and development oi the command/response protocol between a parallel jaw end effector and 
the strategic planner program controlling it. The system executes concurrently with the LISP 
controlling program to generate a graphical image of the end effector that moves in 
approximately real time in response to commands sent from the controlling program. 
Concurrent execution of the simulation program is useful for revealing flaws in the 
communication command structure arising from the asynchronous nature of the message 
traffic between the end effecKx* and the strategic planner. Software simulation helps to 
minimize the number of hardware changes necessary to the microprocessw driving the end 
effector because of changes in the communication protocol. The simulation other actuatcx' 
devices can be easily incorporated into the system of prc^rams by using the underlying 
support that has been developed for the concurrent execution dT the simulation process and 
the communication between it and the controlling program. 


APPENDIX — Concurrent Siaulntion of a Parallel Jaw End Effector 6 

INTRODUCTION 

One of the current research projects in the Automation and Technoiogy Branch at the 
NASA/Langley Research Center on remote teleoperator control of robotic manipulators is the 
Distributed Artificially Intelligent System for Interacting with the Environment (DAISIE) 
{1,2.3). a system developed by Nancy Orlando of NASA that combines artificially intelligent, 
goal-structured robot planning algorithms with traditional control methods for mechanical 
equipment. In the DAISIE system, communication between the strategic planner and the 
various sensors and devices (tf the system is of paramount importance. When a new device is 
incorpOTated into the system, the set of commands that the device will accept and the 
responses that it will return must be specified, and then this command protocol has to be 
encoded in a form usable by the processor that controls the device. In the case of an end 
effector, the specification of the command protocol is straightforward, but conveying the 
protocol to the processor controlling the end effector consists of burning the communcation 
protocol program into Um ROM of the processor. Unfortunately, it is impossible to forsee 
every eventuality when specifying a command protocol, and this leads to frequent 
modifications. Also, the subsequent inox'paration of other devices into the DAISIE system 
could require changes in existing protocols. Modification of command protocols leads to the 
iteration the previously desaibed two-step process several times in developiQg a 
satisfaaory command struaure. The associated expense and effOTt of this process justify the 
use of s(tftware simulation to design and develop command protocols between the devices in 
the DAISIE system and the strategic planner. 

The DAISIE system is housed in the Intelligent Systems Research Laboratory at 
NASA/Langley. The equipment in the laboratory includes a VAXl 1-750 (VMS), two PDPl 1- 
based workstations, two Unimate PUMA six -joint robotic manipulators equipped with either 
vacuum operated or parallel jaw end effectors, a vision system, and a data acquistion system. 
The equipment in the Lab is interccmnected through an RTNET communication network and 



APPENDIX — Concurrent Simulition of a Parallel Jaw End Effector 7 

can also be linked via analog channels to a GTBER 173 real-time control system. A more 
complete description of the Lab is contained in (IL 

The graphics display of the end effectcM* is generated on a DEC VSl 1 graphics terminal. 
Acceptable refresh rates are (Stained by associated VSl 1 memmy plane hardware, which 
overlaps storage of a future image in RAM with display df the current image. Movement of 
the end effectm* from one gap opening to another is portrayed by subdividing the total gap 
into smaller parts and showing the end effector in each of the intermediate positions. The 
speed of the movement is directly related to the number of subdivisions chosen and can be 
varied from barely perceptible to almost instantaneous. The user interacting with the LISP 
controlling program can be located at any terminal connected to the VAX and need not be 
using the VSl 1 terminal. 

Interprocess communication and the simulation concurrency is implemented 
through the use of the VAX/VMS system subroutines, accessible from FORTRAN [4l. These 
routines provide concurrently executing processes in the system the capability of 
communication through ‘'mailboxes ' and of synchronization through "event flags. " 
Additionally, there is a system subroutine with which a process can “create” (or, initiate 
execution of) another process. 

The strategic planner for the DAISIE system is being written in the version oi LISP 
used on the ISRL VAX. Franz LISP. This LISP provides the facility to incorporate dynamically 
into the LISP environment separately compiled FORTRAN subroutines and functions, callable 
as LISP functions. This feature allows a LISP program to control the graphics, concurrency, 
and communications capabilites described above. 


STIUCTUXB OF THE SIMULATION STSTBM 


The simulation system is composed oi three main parts: 


APPENDIX — Concurremt Sinuiation of a Parallel Jaw'End Effector 


S 


• the co&troliing LISP program. 

• a collection oi FORTRAN subroutines impcx-ted by the LISP program to initiate 
execution of. and then to communicate with, the third part of the system. 

• the FORTRAN program fm* the overaii control of the communications and graphics 
subroutines which produce the simulation of the end effector. 


To begin a simulation session, the user must ioad the file of LISP control functions into 
Franz LISP and initiate the master function at the top level. This function begins an 
initialization sequence that imports the necessary FORTRAN subroutines into the LISP 
environment. 

One of these imported FORTRAN subroutines is called to start the simulation. This 
subroutine initializes tte graphics display, the interprocess mailboxes, and event flag clusters, 
and then creates, as a separate process, the FORTRAN program that generates the graphics 
and simulates the end effector. Two mailboxes are created, one fw commands sent from the 
controlling LISP program to the simuUition program and the other for responses g(^ the 
other way. Because VMS has a wait-for-offspring rule, this initialization subroutine executes 
to completion, but cannot terminate until the process that it created, the end effeaor 
simulation process, terminates. This ensures that the event flag cluster and the mailboxes 
that it (Teates continue to exist. Creating "permanent” mailboxes is another alternative, but 
the method chosen requires less privilege from VMS. At termination oi the initialization 
subroutine, control returns to the calling LISP program, unlocking the keyboard and allowing 
additional LISP functions to be invoked. 

The command and response information exchanged by the LISP strategic planner 
program and the actual end effector has the format of a five character field accompanied by a 
six-vector 6[ real numbers. Each device in the DAISIE system communicates using this same 


APPENDIX — G>ncurrent Siaulmtion of m Parallel Jaw iBad Effector 9 

command/response this is one of the strengths oS the design the system. The 

character field gives the source and destination of the command or response, as well as the 
basic command or response. The six-vector of real numbers contains modifying information. 
For example, in the case a move command, this information would include the type 
move (ratchet, positional, etc.), and the end condition desired, along with any necessary 
parameters, such as rate gains, desired jaw gap or maximum jaw force at termination. In the 
case of a response to a status request, the six-vector contains the current and target jaw gaps, 
position and rate gains, and information from proximity and cross-fire detectors located on 
the end effector. 

As a convenience to the user, each of the commands sent to the end effector simulator 
is embodied as a LISP function. This relieves the user of the burden real-time parenthesis 
matchii^ and oi having to memoize the exact command fomats and the encoding of their 
fields. Bach of these LISP functions transforms its command into the DAISIE format and 
invokes one of the imported FORTRAN subroutines to place the command message into the 
command mailbox and set an associated event flag. The process simulating the end effector 
is waiting on this event flag. When the flag is set, the process retrieves the command from 
the mailbox and acts on it. 

The move and initialize commands are enqueued by the simulation program fcx* 
subsequent action, wl^eas the quit, status request, and debug commands receive an 
immediate reply. Commands involving movement of the end effector are enqueued because, 
in general, they require a longer time to complete than a status request. With this program 
structure, it is possible f<x‘ the LISP driver program to issue a sequence of move commands 
and then to monitor their progress through s series of status requests. 

When a command has been completed, the simulation process sends a reply to the LISP 
program by placing an appropriately formatted message in the reply mailbox and setting the 
associated event flag. At present, the simulation program assumes that all commands 



APPENDIX -- CoAcurrent Simulation of a Parallel Jaw End Effector 


10 


complete successfully, although random failure reports could be easily introduced into the 
simulation program in the future. The quit command causes the release of the system 
mailboxes and event flag cluster, as well as the termination (tf the LISP driver function, the 
graphics program, and the initialization process that created it. 

The debug command is not really a part d the DAISIE command structure, but was 
added to be able to obtain debugging information during the development the simulation 
system. With it, the user can toggle the display of four different types of debugging 
information: event fli% behavior, interprocess communication, end effector control, and 
graphics information. 


DISCUSSION 

This simulation system has been useful in revealing places where changes might be 
needed in the command struaure. For example, since the response to the completion of a 
command, particularly a move command, can be widely separated in time from the command 
that was sent, it is difficult for the LISP program to associate the responses received with the 
command that was given. This indicates that perhaps the format of the DAISIE command 
should be expanded to include a sequence number to aid the LISP program in associating the 
response with the command sent. 

It is a straightforward matter now to add simulators for the other devices used by the 
DAISIE system, such as force-torque or tactile sensors. The graphical representation of the 
state of device being simulated, although ustf ul in the case d the end effector, is not essential 
to be able to inax-pcMrate the device into the simulation system fcx* the purpose of developing 
and testing its command/response protocol. Incorporating additional devices into the 
simulation system will be useful in pinpointing situations where the responses from different 
devices present conflicting, ambiguous, or redundant information to the LISP constrolling 
program. It is antkipated that the capability of successively enlarging the collection of 



APPENDIX — Omcumnt Simulation of a Parallel Jaw Ind Effector 1 1 

command/repty protocols with which the LISP controlling program must deal will be a 
valuable tool in isolating unforseen problems in the command structure well in advance of 
the final coding for the strategic planner. 


R] 


lENCES 


1 . Harrison, F.W. and Orlando. N.E.. “A Systems-Level Approach to Automation Research". 
Proceedings of the 1984 Robotics Conference at the University of Alabama at Huntsville. 
HunUville. Alabama. April 1984. 

2. Orlando, NX.. "A System fa* Intelligent Teleoperator Research", presented at the AIAA 
Computers in Aerospace IV Conference, Hartford, Connecticut, October 1983. 

3. C^lando. N.E., "An Intelligent Rdbotics Control Scheme", presented at the American 
Controls Conference, San Diego, California, June 1984. 

4. VAX/ VMS System Services Reference Manual. Digital Equipment Corporation. Maynard. 
Massachusetts. 


