REI?0RT DOCUMENTATION PAGE 

g\ 1 islitnaied lo avorafle 1 houi per response, including me ti 

I V/-^ -eviewing me coilecton o! inlormaion. Send comments 


Form Approved 
OPM No. 


istjmaied lo average 1 hou' per response, including me time to- reviewing instructions, searching existing data 
•eviewmg me coilecton o! intormaion. Send comments regadng m'S burden, to Washington Headquaners 
s, 1215 Jeflerson Davis Highway, Suite 1204, Arlington. VA 2t202-4302. and to the Office of In'o'matjon and 
mgion. DC 20503 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND : Compiler; VADSself for Dec Alpha AXP OSF/1. Product 
#2100-01439. Version 6.2 

Hosl/Target; DEC 4000 Model 610 AXP (under OFS/1. V2.0) 


6. AUTHORS: 


5. FUNDING 


Wright-Patterson AFB, Dayton, OH 


J 




7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility. Language Control Facility ASB/SCEL. Building 676. Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Ptoyram Oftice, Defense Information System Agency 
Code TXEA, 701 S. Courthouse Rd., Arlington, VA 
22204-2199 

11. SUPPLEMENTARY ' ^ 


10. SPONSORING/ltflONITORING 
AGENCY - ^ 


12a. DISTRIBUTION/AVAILABILITY; Approved for public release; distribution 12b. CRISTRIBUTION 
unlimited 


(Maximum 200 


Rational Software Corporation, 940630W1.11359 


14. SUBJECT: Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 


15. NUMBER OF 


16. PRICE 


17 SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


20. LIMITATION OF 



UNCLASSIFIED 


UNCLASSIFIED 



























AVF Control Number: AVF--VSR-587.0694 
Date VSR Completed: July ^1, 1994 

94-05-12-RAT 


Ada CCWPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940630W1.11359 
Rational Software Corporation 

VADSself for dec Alpha AXP OSF/1, Product Number: 2100-01439, Version 6.2 
DEC 4000 Model 810 AXP under OSF/1, V2.0 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


I, 


94-31021 





^4 9 2 8 


) Q 










Certificate Infonnation 


The following Ada implementation was tested and determined to pass ACvc 1.11. 
Testing was completed on 30 June 1994. 

Conpilet Name and Version: VADSself for DEC Alj^ AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 

Host Ccmputer System; DEC 4000 Model 610 AXP 

under OSF/1, V2.0 

Target Computer System: Same as host 

CustOTter Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort, Validation Certificate 940630W1.11359 
is awarded to Rational Software Corporation. This certificate expitjs two 
years after MIL-STD-1815B is aj^roved by ANSI. 


This report has been reviewed and is approved. 



Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 



Ada id^Tbn 'XDrganization 

DireptotXcpwputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria ^lA 22311 



Defense infonnation Systems Agency, 
Center for Infonnation Management 






» 


DECLARATION OF CONFORMANCE 

The following declaration of confonrance was supplied by the customer. 


Declaration of Conformance 
Customer; Rational Software corporation 


Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: VADSself for DEC Alpha AXP OSF/‘. 

Product Number: 2100-01439, Version 6.2 

Host CoBputer System: DEC 4000 Model 610 AXP 

uivler OSF/1, V2.0 

Target Computer System: Same as host 
Declaration: 

I, the xu'iuetsigned, declare that I have no 

knowledge of deliberate deviations from the Ada Language 

Standard ANSI/MIL-STD-ISISA ISO 8652-1987, FIPS 119 as tested 

in this validation and documented in the Validation Sunnary Report. 








■EABLE OF CONTENTS 


CHAPTER 1 INTRODUCTICW 


IJ USE OF THIS VALIDATIOI SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING EN\/IRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


1 
















r 


CHAPTER 1 
INTRODUCTION 


The Ada ioplenientation described above was tested according to the Ada 
Validation Procedures (Pro921 against the Ada Standard [Ada83] using the 
current Ada Coopiler Validation Capability (ACVC). This Validaticr. Sumnary 
Report (VSR) gives an account of the testing of this Ada irapleicentation. For 
any technical terras used in this report, the reader is referred to lPro92i. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPCWT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided In accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the cooputers, operating systems, and compiler versions Identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and cooplete, or that the subject inplenmntation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report ace avai]able to the public from the AVF which pecfonaed this 
validation or from: 

National Technical Information Service ' 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or th3 validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Orgetnization 

COQputer and Software Engineering Division 

institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCnCJN 


1.2 REFER2NCES 

[Ada83] Reference Manual fo r the Ada Proqreuaninq Language , 

ANSI/MIL-STD-1815A, February 1^83 and ik) 86§2~r987. 

lPro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program o£fice, August 1992. 

(UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 'fhe ACVC 
contains a collection of test programs structured Into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests ate expected to produce errors at con^ile time and l.nk time, 
respectively. 

The executable tests are written in a self-checking manner eind produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECR_FIL£ are used for this purpose. The package REPORT also 
prov'idas a set of identity functions us^ to defeat sane conpiler 
optimiTiations allowed by the Ada Standard that would ciroffisvent a test 
objective. 'Ihe package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CBBCK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coo^iler detects illegal language usage. Class B 
teste are not executable. Each test in this class is conpiled and the 
resulting coiqpilation listing is examined to verify that all violations of 
the Ada stan^cd are detected. Some of the class B tests 'contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

I, 

Class 1. tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately coinpiled units. Errors are 
expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain roacLo strings have to be replaced by 
implementation-spiecific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. in 
addition to these emticipiated test modifications, additional changes nay be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The ncdifications required for 
this implementation are described in section 2.3. 














I 


INTRODUCTION 


For each Ada iirplementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing witlidrawn tests (see section 2.1), and possibly 
removing some inapplicable teov.s (see section 2.2 and (UG89]). 

In crder to pass an ACVC ar; «. implementation must process each test of the 
customized test suite r-ccc -ng to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Conpilet 


Ada Compiler 
Validation 
Capability 
(AO^C) 

Ada 

Implementation 

Ada Joint 
Program 


Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliance of 
an Ada 

Inplementation 

Compute r 
System 


The software and any needed hardware that have tc be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada inplementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 

An Ada compiler with its host computer system euid its 
target computer system. 

The part of the certification body which provides policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the conpliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


Ttie ability of the inplementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and 
associated software, that uses ccmtnon storage for ail or part 
of a program and also fcr all or pact of the data npoessaiv 
for the execution of the program; executes user-wiitten mi 
user-designated programs; perforins user-designated data 
manipulation, including arithmetic operations and logic 
operations; euid that can execute programs that modi tv 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 







INTRODUCTiai 


Confomity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inappliceible 

test 

ISO 

LRM 


Operating 

System 


Target 

Compter 

System 

Validated Ada 
Con^iler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into ein agreement 
with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for which 
validation status is realized. 

A counter system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelev 2 unt for the given Ada iii?)lementation. 

International Organization for Standardization. 

The Ada standard, or Lauiguage Reference Manual, publitned as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<secticn>.<Bubsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware irapietuentations ace possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Prd92]. 

The process of checking the conformity of am Ada compiler to 
the Ada programiming lang'jage and of issv.ing a certificate for 
this implementation. •' 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneoi's or illegal use of the Ada programming language. 


1-4 






aiAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITKDBAWM TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the avf. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35b07L 

C35507N 

C35507O 

C35507P 

C3550ei 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A. 

C4!>il4A 

C45346A 

C4S612A 

'in 

C45612C 

C45551A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83C22B 

B83022H 

B83025B 

B83025D 

C83026A 

8830268 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD300eA 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7C05E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BDB002A 

BD8004C 

CD9005A 

CD9005B 

CnA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






I. 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inappliczdsility may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format ^.I-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM,MftX_DIGITS; 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..2 (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L,.Y (14 tests) C45521L..2 (15 tests) 

C45524L..2 (15 tests) C45621L..2 (15 tests) 

r:4S64lL,.Y (14 tests) C46012L..2 (15 tests) 

C35713C, BaeoOlU, and C86006G check for the predefined type LONG_Fri3AT; 
for this impleinentation, there is no such type. 

C35713D and B860012 check for a predefined floating-point type with a 
name other than FLOAT, LCNGFLQAT, or SH0RT_F10lAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used f.o a range 
constraint in a floating-point type declaration; for this 
implementation, that rauige exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45624A..B (2 tests) check that the proper exception is raised if 

MACHINEJTVERFLCT'JS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINEjCfVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), emd CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following table check that USE ERROR is raised 
if the given file operations are not supported for the gTven combination 
of inode and access method; this implementation supports these 
operations. 

Test File Operation Mode File Access Method 

CE2102D CREATE INFILE SBtUENTIAL_IO 

C:e2102E create OUT FILE SEQUENTIAL 10 


1-2 







Bl 


IMPLEMENTATION DEPENDENCIES 


CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

C3^TE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SBC3UENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENl-lAL 10 

CL21C2R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102O 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT^IO 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TPXT 10 

CE3102G 

DELETE 

TEXT 10 

CE31021 

CREATE 

arr file 

TE>vr_IO 

CE3102J 

OPEN 

IN file 

TEXT 10 

C:E3102K 

OPEN 

OUT file 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERR0R if the capacity of an 
external sequential file is exceeded; this implementation carinot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LEIfIGTH 2 md SET PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYQtJT_ERBOR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TEST 1TODIFICATIC»1S 

Modifications (see section 1.3) were required for 22 tests. 

t, 

The following tests were split into two or more tests because this 
implementation did not report the violations of tiie Ada Standard in the way 
expected by the original tests. 

324009A B33301B B38003A B38003B B3B009A B38009B 
B85008G B85008H BC1303F BC3005B BD2a03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The conpiler rejects the use of the rzmge FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the boimds 


2-3 









IMPLeHENTATICN DEPENDENCIES 


lie outside of the range of safe numbers (cf. LEM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, and CD2A31A. .C were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LE1JGTH_CHECK, which uses 
Unchecked Conversion according to the interpretation given in AI-00590. The 
AVO rule3 that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK W REPRESENIATICN FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
impleraenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was ratified by conmenting out line 36 and 
40; the modified test was passed. 


2-4 










CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sam Quiring 

Rational software Corpocation 
1600 NW Compton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from tiie AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Prograiwnina Language 
Standard, vhether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC lPro92]. 

For all processed tests (inapplice±>le and applicable), a result was obtained 
that conforms to the Ada Programming Language Stemdard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 







PROCESSING INFORMATICS 


a) Total Number of Applicaible Tests 3824 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 41 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 242 (c+d+e) 


g) Total Numbe*" of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containi.ig the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and copied to the host 
machine. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were conpiled, linked and executed on the host conpjter system. 
The results were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, coitpiler and linker listings, and job logs were captureo on 
magnetic tape and archived at the AVF. The listings ex?dnined on-site by the 
validation team were also archived. ‘ 


3-2 









APPE2TOIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing r-.s ACVC. 
The meaning and purpose of these parameters are explained in (UG59). The 
parameter values are presented in two tedsles. The first table ‘.ists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$KAX IN LEt^ 499 — Value of V 


$BIG_ID1 

(1..V-1 -> 'A', 

V 

•> '1') 

$BIG_ID2 

(1..V-1 -> 'A', 

V 

-> '2') 

SBIG__ID3 

(1..V/2 -> 'A') 

& 

'3' & 


(1..V-1-V/2 


> 'A') 

i; BIG_ID4 

(1..V/2 -> 'A') 

& 

'4' & 


(1..V-1-V/2 

**< 

> 'A') 

$B1G_1NT_HT 

(1..V-3 -> '0') 

& 

"298" 

$BIG_REAL_L1T 

(1..V-5 -> '0') 

& 

"69p.O" 

$BIG_STRING1 

& (1..V/2 

> 

'A') & 

$BIG_STRING2 

& (1..V-1-V/2 

-> 'A') & '1' & 

$BLAI'IKS 

(1..V-20 -> ' ' 

) 


$MAX LEN INT BASED LITERAL 




"2:" & (1..V-5 ' 

-> 

'0') & "11:" 

$MAX_LEN_REAL_BASED 

LITERAL 




"16;" & (1..V-7 

- 

> '0') & "F.E:" 








MACRO PARAMETERS 


$MAX STRING LITERAL 


& (1..V-2 => 'A') & 


The follcwing table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 


Macro Value 


$ACC_SIZE 
SALICa^MENT 
$COUNT_LAST 
SDEFAULT_MEM_SIZE 
$DEFAULT_STOR_UNIT 
$DEFAULT SYS NAME 


64 

4 

2147483647 

16777216 

8 

AXP SELF 


$DELTA DOC 

0.00^000000000000000108420217248550443400745280086994171142578125 


$ENTRY_ADDRESS 
$ENTRY_ADDRESS1 
$ENTRY_ADDRESS2 
$FIELD_LAST 
SFILE__TERMINATOR 
$FIXED_NAME 
$FLOAT_NAME 
$FORM_STRING 
$FORM__STRING2 
$GREATER THAN DURATIOI 


SYSTEFi."+''(16#2#) 
SYSTEM.'V'(16#31#) 
SYSTEM."+"(16#32#) 
2147483647 

# 9 

NO_SUCH_TYPE 
NO SUCH TYPE 


"CANNOT_RESTRlCT_FILE_^ACITY'' 


100000.0 

$GREATER_THAN_DUFATICW BASE LAST 

TOOOOUOOOOO.O 

$GREATER_THAN_FLOAT_BASE LAST 

i.'Se+sob 

$GREATER__THAN_FLCIAT_SAFE LARGE 

5.TJE307 


A-2 






MACRO PARAMETERS 

$GRLATER_THAN_SHORT_FLQAT_SAFE_LARGE 

9.0E37 

$HIGH_PR10RITY 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/illegal/file_naroe/2}]%2102c.dat 

$ILLEGiAL_EXTERNAL_FILE_NAME2 

/illegal/f ile_naine/CE2102C*. dat 

$INAPPR0PRIATE_LINE_LE1IGTH 

-1 

$ INAPPROPRIATE_PAGE__LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAOIA include (''B28006D1.TST") 

$INTEGER FIRST -2147483648 

$INTEGER_LAST 2147483647 

§INTEGER_LAST_PLUS_1 2147483648 

$INrERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100000.0 

$LESS_THAN_DURATION RASE FIRST 

^ - 1 ^ 000000000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

§LOW_PRIORITY 0 

$MACHINE_C0DE_STATEMENT 

CODE_0'(UP -> NOP); 

$MACHINE_C0DE_TYPE CODE_0 ^ 

$MANTISSA_D0C 63 

$MAX_DIGITS 15 

$MAX_INT 9223372036854775807 

$MAX_INT_PLUS_1 9223372036854775808 

$MIN_INT -9223372036854775808 

$NAME TINY INTEGER 


A-3 







MACRO PARAMETERS 


$NAME_LIST 

$NAMe_SPECi FICATlONl 

§NAME_SPECI FICATION2 

§NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

SNEW_STORJJNIT 

$NEW_SYS_NAKE 

$PAGE_TERMINATOR 

$RECORD_DEFINlTION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
SyOUR_ PBAC21A 


AXP_SELF 

A>sr/vc/tst/acvcl. ll/c/e/X2120A 
/usr/vc/tst/acvcl.ll/c/e/X2120B 
/usr/vc/tst/acvcl. ll/c/e/X3119A 
16 #FOOOOOOOOOOOOOOE# 

16777216 

8 

AXP_SELF 

ASCll.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

64 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


t. 


A-4 




APPE34DIX B 


COKPILATION SYSTEM OPTIC3NS 


The compiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted r-rserwise, 
references in this appendix are to compiler documentation and nc- to this 
report. 




B-1 







COMPIIATIW SYSTEM OPTIONS 


ada CocB&and Reference ada 

ada - invoke the Ada compiler 

Syntax 

ada (optionsl (source_filel •.• iobject_file.o) — 

Arguments 

object_file.o non-Ada object file names. These files will be passed 
on to the linker and will be Jinked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the tmits in the source file after 
compiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the xmit body [default], 
d Print the data section (if prenent) as well, 
f Use tiic alternative format for outp"Jt, 

1 Put the disassembly output in file "filejname.das" 
s Disassemble the unit spec. “ 

-a filejname 

(archive) Treat file name as an object archive file created 
^ ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARConpiler Ada only) 

(rtatic) If static is indicated, the Ada program is tompiled 
and linked statically. The default is dy'namic. 

-c suppress the control messages generated when pragma PAGE 
and/or pragma LIST are encountered. - 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default; -DAl.l) (HP PA-RISC only) 


-d (dependencies) Analyze for dapeiidencies only. Do not do 







CUMPIIATION SYSTEM OPTIONS 


seMzmtic analysis or code generation. Update ; > library, 
marking any defined units as xmcompiled. The -a option is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages car. be used at- input to a.error. Only 
one -e or -E option should be used. 

-o (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containinc 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated % error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Sane as the -E option, except that a sourca 
listing with errors is produced. Note tJhat the source listing is 
directed to standard out while the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elterror_fi]e source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntzui error messages usirig a.error, 
emlied them in the source file euid call the environment editor 
E3<»OR EDITOR. If ERROR_EDITOR is defined, the environment 
variaBle E3W0P_PATTERN should also Ise defined. EPROR_PA'rr£RN 
is an editor search comnand that locates the first occurrence 
of ’###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERROR_TRBS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 


B-3 



COMPIIATION SYSTEM OPTIONS 


trlnned so that all pointers to nodes that did not involve 
a subtree that define a symbol tedsle will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or compilation information). The trimming 
generally removes initial values of variables and all 
statements. 

-<; (GWAS) Display suggested values for the MIN_GVAS_AIX)R 
and MAXjGVAS_ADDR INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the compiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L library_naine 

(library) Operate in VADS library library__name. 

[Default: current working directory] "" 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 2 uid the file abbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjname must alrea^ be 
can^iled. It isust be either a paraastsrless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking Eource_file. The main unit of the program is 
assumed to be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be named a.out unless overri,dden 
with the -o option. 

-N (no code sharing) Cou^ile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHAREJBODY INFO directive and the SHABE_CODE 
or SHARE_BC»Y pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries. 
Ttiis option is valid only if the -M option has also been invoked. 

(Siin SPARC »> Paragon only) 

-010-9) 

(optimize) invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 







COMPILATION SYSTEM OPTIONS 


-0 full optimization 
-OO no optiniization 

-01 copy propagation, constant folding, removing 
dead variables, srjbsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global comnon subexpression elimination 
-04 add hoisting invariants from loops eind address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 add unrolling of innermost loops 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction euid add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

Note that using the -OO option C 2 m alleviate some problems when 
debugging. For exanple, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option. executzible_file is the name of the execittable 
rather than the default, a.out (self) or a.vox (cross). 

-P invoke the Ada Preprocessor. 

-R VADSlibrary 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that ’are out 
of date. VADS library is the library in which the 
recoup)!lation Ts to occur. If it is not specified, the 
recoitpilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire con^iilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the conpilation. 


C(»1PILAT10N SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-trc 

(trace calls) Generate code to trace calls and returns (for use 
with a.trace only) 

-V (verbose) Print conpiler version number, date 2ind time of 
compilation, name of file <~oiq>iled, canmand input line, 
total co^ilation time anu error sunsnaty line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

-xlicinfo 

(license) Indicates if FLEXlro is running and its status if it is 
operational. If it is not operational, a message indicating this 
is displayed. 

source_file name of the source file to be coiq)iled. 

Description 

The ada coranand executes the Ada compiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
co!tpiled. 

By default, ada produces only object and net files. If the -M option 
is used, the con?)iler automatically invokes a.Id and louilds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object tiles compatible with 
the host linker in VOX format. The VOX format is discussed in 
^^pendix A of the Programmer's Guide, 

Non-Ada object files (,o files produced by a compiler for another 
language) may be given as arguments to ada. These files will loe passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significeu:it. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada coinnand in emy VADS_location,'bin on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine code instructions 
ate generated by a.db or a.das. 







COMPIIATTON SYSTEM OPTIONS 


NOTE: If two files of the seune name from different directories ate 
coitpiled in the same ada library using the -L option (even if the 
contents emd unit names are different), the second compilation will 
overwrite tiie first. For example, the coinpilation of 
/usr/dJrectory2/foo.a -L /usr/vads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L A>srAads/test in the 
VADS library /usr/vads/test. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TEMPDIR 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with eui error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 


a.app, a.oas, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKr.tv OPTIONS 

The linker options of this Ada implementation, as described in this ^pcndix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation euid not to this 
report. 




B-7 


a»lPILATIC»l SYSTEM OPTIONS 


a.Id Command Reference a‘Id 

a.Id - build an executable program from previously compiled units 
Synteuc 

a.Id [options] unit_naiae [linkerjoptions] 

Arguments 

linker_options 

All arguments after unit_naine are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id conmand. These are: 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DAl.lJ (HP PA~R1SC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate tile if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinkir j process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for eletboration. 

-DX (debug) Debug memory overflow (use in cases where linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit_naroe 

(elaborate) Eleiborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present when many object 


B-8 




COMPILATION SYSTEM OPTIONS 


files are being linked. 

-L library_neune 

(library) Collect information for linking in libraryneime instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde eind with the NX archive libraries. 
(Sun SPARC -> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of ttie output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the eladxitation table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_n 2 ime 

name of an Ada unit. It ioist name a non-generic subprogram. 

If unit_naroe is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a main 
progreun and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada compiler to checit dependency information. A.Id produces 
an exception mapping teible and a unit elaboration table and passes 
this information to the linker. The elad^oration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that csui raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WiTHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WlTHn 


B-9 









COMPIIATION SYSTEM OPTIONS 


directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHI:LINK:object_file: 

WITH2;LINK:archive_f ile: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same nimbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LINK___INFO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a.Id is a wrapper program that executes the 
correct executzhle based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE; It is possible to specify the directory for tenporary files by 
setting the environment variaibie UlPDIR to the desired path. If TMPDIR 
is not set, /trap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 


a.out (self), a.vox (cross) 
.nets 

.objects/* 

VADS location/standard/* 


default output file 

Ada DIANA net files directory 

Ada object files 

startup and standard library, routines 


Diagnostics 


Self-explanatory diagnostics are produced for missing^files, 
etc. Additional messages are produced by the Id linker. 


I 

I 

I 


B-10 



APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allofwed inplementation dependencies correspond to 
in^jlemei.tation-dependeiit pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as desciibed in this Appendix, 
are provided by the customer. Unless specifically noted otlierwise, 
references in this Appendix are to compiler documentation and not to this 
report. Irnpleroentation-specific portions of the package STANDARD, which ate 
not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTEGER is range -128 .. 127; 
type SHORT INTEGER is range -32768 .. 32767; 

type LONG^INTEGER is range -9223372036854775808 .. 92233720.’6854775807; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 1.79769313486232E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+36 .. 3.40282E+38; 

type DURATION is delta l.OOOOOOOOOOOOOOE-009 

range -9.22337203685478E+009 .. 9.22337203685478E+009; 


end STANDARD; 


1 


C-1 










APPENDIX F OF THE Ada STANDftRD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLIMEjCXILy pragma, when used in the same way as pragma 

INLINE, indicates to the compiler that the sutqprogram must 

always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which savr^ code 

space. If a user erroneously makes an INLINE CNLY subpr . 
gram recursive a warning message wiTl be emittea and an 

PPOGRAM ERROR will be raised at run time. 


1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 

argument. This pragma is only allowed within a library- 

level package spec or bo^. It specifies that all objects 
in the package be initialized as requested by the pragma 

(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 

within procedures are always (by definition) dynamic. If 

pragma INITIALIZE (STATIC) is used, and an object cannot be 

initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 


1.3. BUILT_IN Pragma 


The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 

used only to inplement code bodies for which no actual Ada 

body can be provided, for example the MACHINEjCODE package. 


1.4. SHARE CODE 


Pragma 


The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 

identifiers TRUE or FALSE as the second argument. This 

pragma is only allowed immediately at the place of a 

declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 

any sxjbsequent compilation unit. 


When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 


C-2 





APPENDIX F OF THE Ada STANDARD 


applies only to the specified instantiation, or overloaded 

instantiations. 

If the second argument is TRUE the compiler will try to 

share code generated for a genetic insteuitiation with code 
generated for other instantiations of the sane generic. 

V^en the second argument is FALSE each instauitiation will 
get a unique copy of the generated code. The extent to 

which code is shared between instantiations depends on this 
pragma and the kind of genetic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODy is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. it is 

included for compatability with earlier versions of VADS. 

1.5 NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 

inates the overhead required to store the array in the exe- 
cutadsle image. An attempt to use the IMAGE attribute on a 

type vdiose image array has been suppressed will result in a 

compilation warning and PROGRAM_ERROR raised at run time. 

1.6. E3CTEENAL_NAME Pragma 

The EXTERNALJNAME pragma takes the name of a subprogram or 

variable ” defin^ in Ada and allows the user to specify a 
different external name that may be used to reference the 

entity from other languages. The pragma is allowed at the 

place of a declarative item in a package specification and 

must apply to an object declared earlier in the same package 

specification. 

1-7. INTE21FACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 

subprogram defined in einother language emd allows it to be 

referenced directly in Ada. The pragma will replace all 

occurrences of the variable or subpro-jram name with an 

external reference to the second, link_argument. The pragma 

is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 

declared earlier in the same package specification. The 

object must be declared as a scalar or an access type. The 

object cannot be any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 






APPENDIX F OF THE Ada STANEWID 


1.8. IMPLICIT__CODE Pragma 

Takes one of the identifiers CW or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 

procedure. It specifies that implicit code generated by the 

compiler be allowed or disallowed. A warning is issued if 

OFF is used cind any implicit code needs to be generated. 

The default is 

1.9. OPTIMIZEjCODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 

procedure. It specifies \hether the code should be optim¬ 
ized ^ the conpiler. The default is ON. VJhen OFF is 

specified, the compiler will generate the code as specified. 

1.10. NON_REQTrRANT 

This pragma takes one argument \diich cam be the name of 

either a library subprogram or a subprogram declared iinnedi- 

ately within a library package spec or body. It indicates 
to the compiler that the siabprogram will not be called 

recursivaly allowing the compiler to perform specific optiift- 

izations. The pragma can be applied to a subprogram or a 

set of overloaded subprograsm within a package spec or pack¬ 
age body, 

1.11. NOr_ELABORATED 

This pragma can only af^ar in a library package specifica¬ 

tion. It indicates that the package will not be eledxrated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 

other than Ada. The presence of this pragma suppresses the 

generation of elaboration code amd issues warnings if ela¬ 
boration code is required. 

1.12. BIT_PAQ^ pragma 

Indicates to the compiler that packing dowr. to the bit level 

is desired. pragma BIT_PACK can be used interchangeably 

with pragma PACK and pragma BYTE_PACK 

1.13. BYTE_PACK pragma 

Indicates to the compiler that packing down to the byte 

level is desired. Components at least as large as, or 

larger than, a byte, are packed at byte boundaries. pragma 

BYTE_PACK can b)e used interchangeably with pragma PACK and 

pragma bit_pack. 

1.14. link_with pragma 


C-4 




APPENDIX F OF THE Ada STANDARD 


Can be used to pass arguments to the target linker, it may 

appear in any declarative part and accepts one argument, a 

constant string expression. This argranent is passed to the 

target linker whenever the \init containing the pragma is 

included in a link. Note that the linker uses selective 

linking; it will include only those objects required to com¬ 

plete the link. 

For UNIX systems, if the constant string expression begins 

with the string is left untouched. However, if the 

string begins with neither nor then the string is 

prefixed with 

1.15. PASSIVE Pragma 

This pragma has five forms: 

pragma PASSIVE 

pragma PASS1VE(AB0RT_UNSAFE); 
pragma PASSIVE (ABORT_SAFE); 

pragma passive(AB 0RT_UNSAFE, mutex_attr'address); 
pragma FASSIVE(AB0RT SAFE, mutex attr'address); 


This pragma can be applied to a task or task type declared 
immediately within a library package specification or body. 

It directs the compiler to optimize certain tasking opera¬ 
tions. It is possible that the statements in the task bexiy 
will prevent the intended optimization, in these cases a 

warning will be generated at coopile time zmd will raise 

TASKING_ERROR at run time. 

1.16. RTS_INTERFACE pragma 

Take the name of an RTS routine emd the name of a user- 

defined routine. Allows for the replacement cuf the default 

calls made implicitly at run-time to the underlying RTS rou¬ 

tines. You C 2 L -1 cause the compiler to generate calls to any 
routine of your choosing as long as it's pvarameters and 

RETURN value match the original. Use this pragijja with cau¬ 
tion. 


1.17. TASK_ATTRIBUTES Pragma 

This pragma has two forms; 

pragma TASK_ATTRIBUTES(task_atttr'address); 

pragma TASK_ATTRlBUTES(task_object, task_atttr'address); 


The first form of this pragma is only allowed with the 

specification of a task tjnit. It specifies the task attri- 

C-5 







APPENDIX F OF THE Ada STANDARD 


butes of the task or tasks of the task type. The second 

form is applicable to any task object. It takes precedence 

over the task attributes specified for the task's type. 

The address of an AnA_KBN_DEFS-TASK_ATrR_T record is the 

argument of the pragma and is passed to the underlying 

microkernel at task creation. 

The task attributes are microkernel dependent. See 

ada_krn_defs.a in standard for the type definition of 

TASK_ATTR_T and the different options supported. When there 

isn't a TASK_ATTOIBUTES pragma for a task, the 

DEFAULT TASK_ATTRIBUTES found in v_usr_conf_f.a's configura¬ 

tion taEle are used. 

All variations of the TASK_ATTR_T record contain at least 

the prio field. prio specifies the priority of the t-.sk. 

If the task also has a pragma PRIORITY(PRIO), the _:tio 

specified in the TASK_ATTR_T record takes precedence. 

The optional first argument is the name of a task object. 

This allows task objects of the same task type to have dif¬ 

ferent task attributes (including different task priori¬ 
ties). ada_krn_defs.a has overloaded versions of the fol¬ 
lowing subprogram for initializing the task attributes: 

function task__attr_init( 
prio priority; 

OS dependent fields 

) return address; 


1.18. VOLATILE pragma 

Takes one arguement vhich identifies an object. Guarantees 

that loads and stores to the neaned object will be performed 
as expected after optimization. The object declaration eind 

the pragma roust both occur (in this order) iitroediately 

within the same declarative part or package specification. 

1.19. WARNINGS pragma Takes one of the identifiers ON or 

OFF as the single argument, selectively suppress warnings 

on a single statement or a group of statements. 

pragma warnings (off); 

statement(s) that generate warnings; 
pragma warnings (on); 

2. Implementation of Predefined 

2.1. CONTROLLED 


C'6 


pragmas 









APPENDIX F OF THE Ada STANDARD 


This pragma, is recognized by the implementation but has no 

effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 

Ada subprograms can be either fmctions or procedures. The 

types of parameters and the result type for functions must 

be scalar, access or the predefined type ADDRESS in SYSTEM. 

All parameters must have mode IN. Record and array objects 

can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is iitplemented as described in Appendix B of the 

Ada RM. 

2.6. MEMDRY_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled, 

2.7. OPTIMIZE 

This pragma is recognized by the implementation but has no 

effect. 

2.8. PACK 

This pragma will cause the compiler to choose a non-aligned 

representation for conqxisite types. It will not causes 

objects to be packed at the bit level. 

2.9. PAGE 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.10. RIORITY 

This pragma is implemented as described in Appendix B of the 


C-7 


APPENDIX F OF THE Ada STftNDftFD 


Ada BM. 

2.11. SHARED 

This pragma is recognized by the inplementation but has no 

effect. 

2.12. STORAGEJUNIT 

Itiis pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

2.13. SUPPRESS 

This pragma is implemented as described, except that 

DIVISION CHECK and in some cases OVERFLCWjCHECK cannot be 

supresseH. 

2.14. SYSTEMNAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

Por a prefix tiiat denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogreun, pack¬ 
age, task unit, or label, it refers to the address of the 

machine code associated with the corresponding body or 

statement. For an entry for which an address clause has 

been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND ilefin^ "in the 

package MACHINE_CODE. The attribute is only allowed within 

a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 

not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 

task id associated with a task. The value of this attribute 

is of the type ADDRESS in the package SYSTEM. 


C-8 





APPENDIX F OF THE Ada STANDARD 


4. Specification Of Package SYSTEM 


with UNSI(34ED_TyPES; 
package SYSTEM is 


pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTIONJEABLES); 
pragma not_elaborated; 

type NAME is ( 20 cp_self ); 

SYSTEM NAME : constant NAME axp__self; 


STORAGE_tJNIT : constant 8; 

MEMORY SIZE : constant 16 777 216; 


— System-Dependent Named Nxombets 

MIN_INT : constant 

MAX_INT ; constant 

MAXJDIGITS ; constant 

MAX_MANTISSA : constant 63; 
FINE_DELTA : constant 

TICK : constant 


-9 223 372 036 854 775 808; 
9 I23 I72 ^36 ^54 775 ?07; 
ll; - - - - - 

2.0**(-63); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer 64*1024; 
type ADDRESS is private; 


function 

If ^ ft 

(A: 

ADDRESS; 

function 

II ^ II 

(A: 

ADDRESS; 

function 

II 

(A: 

ADDRESS; 

function 

II ^^1 

(A: 

ADDRESS; 

function 


(A: 

ADDRESS; 

function 

Il_j_ll 

(A; 

ADDRESS; 

function 


(A; 

ADDRESS; 


B; ADDRESS) return BOOLEAN 
B: ADDRESS) return BOOLEAN 
B: ADDRESS) return BOOLEAN 
B: ADDRESS) return BOOLEAN 
B: ADDRESS) return INTEGER 
I; INTEGER) returh ADDRESS 
I; INTEGER) return ADDRESS 


function "+" (I; UNSIC34ED TYPES.UNSIGNED LCNG INTEGER) return ADDRESS; 


function memory_ADDRESS 

(I; UNSIGNED TYPES.UNSIGNED LONG INTEGER) return ADDRESS renames "+” 


NO_ADDR ; constant ADDRESS; 

type TASK_ID is private; 

NO TASK ID ; constant TASK ID; 


C-9 






APPENDIX F OF THE Ada STANDARD 


type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID : constant PASSrVEJIASK_ID ; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATOS_SIZE: constzmt 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID ! constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIAN 

); 

BYTEJORDER: constai t BYTE_ORDER_T ;■ LnTLE_ENDIAN; 
type LONG_ADDFFSS is private; 

NO_LONG_ADDR : constant La«G_ADDRESS; 

function "+" (A: LONGJVTORESS; I; INTEGER) return LCNG ADDRESS; 
function (A: LONG_ADDRESS; I: INTEGER) return LCNGJ>J)DRESS; 

function MAKE_L0NG_ADDRESS (A: AI»RESS) return LCNGJVDDRESS; 

finction LOCALIZE!A: L0NG_ADDRESS ; BVTE_SIZE S INTEGER) return ATORESS; 

function STATION_OF(A; LONGJUXJRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype nAY_T is INTEX3ER; 

— Constants describing the configuration of the CIFO add-on product. 
5UPPOBTS_INVDCAT10N_BY_ADDRESS : constant BOOLEAN TRUE; 

SUPPORTS_PRnELABORATION ; constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPOBTED : constant BOOL^ TRUE; 

— Arguments to the CIFO pragma INTERBUPT__TASK. 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETURN_AI»RESS return ADDRESS; '■ 

private 

type ADDRESS is new 11NSIGNED_TYPES.UNS1GNED_L0NG_INTEGER; 

NO_ADDR : constant ADDRESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN( "<’’); 
pragma BUILT_IN(); 
pragma BUILT_IN(); 


C-10 






APPENDIX F OF THE Ada STANDARD 


pragma BU1LT_1N(); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNEDJIYFES.UNSIGNED_L0N3_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type PASSIVE_TASK_1D is new UNSIGNED_TyPES.l)NSlGNEDJX)NG_INTFGER; 
NO_PASSIVE_TASK_ID : constant PASSIVE_TASK_ID 0; 

type PPOGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_LCNG_INTEGER; 
NO_PROGRAM_ID ; constant PROGRAM_ID 0; 

type LONGJVDDRESS is 
RECORD 

tation ; UNSIGNED_TYPES.UNSIGNED__LONG_INTBGER; 
addr : AIH}RESS; 

END RECORD; 

N0_L0NG_ADDR : constant L0NG_AK)RESS (0, 0); 

pragma BUILT_IN(HAKE_LQNG_ADDRESS); 
pragma BUILT_IN( LOCALIZE); 
pragma BUILT_IN(STAT10N_OF) ; 

pragma BUILT_IN(RETURN_AI»RESS); 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 

so as to provide for efficient access by the target 

hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 

storage allocated for record conponents a record ; representa¬ 
tion is required. ' 

5.2. Size Clauses 

«, 

For scalar types a representation clause will pack to the 

nxjmber of bits required to represent the range of the sxib- 

type. A size clause applied to a record type will not cause 

packing of components; an explicit record representation 

clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 

packing of components only when the component type is a 

discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 

for task, access, or floating point types. 


C-11 





APPENDIX F OF THE Ada STANDRFD 


5.3. Address Clauses 

Address clauses are only supported for varieUsles. Since 

default initialization of a variaible requires evaluation of 

the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 

clauses. The specified address indicates the physical 

address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 

tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 

must always be trying to accept each interrupt entry, unless 

it is handling the interrupt. The task must be executing 

either an accept for tlie entry (if there is only one) or a 

select statement vrtiere the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 

restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 

13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept 

alternative for an interrupt entry (see Ada FM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 

allowed and are treated as a normal task rendezvous. 

Interrupts ate not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 

interrupt vector number. For passive ISRs, the nnn of the 

^ssive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. < 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 

entities; 

Packages 

Tasks 

Labels 

Entries 


C-12 






APPfcWDIX F OF THE Ada STANDARD 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CC®E provides 
an asseiobly language interface for the target machine, it 

provides the necessary record type(s) needed in the code 

statement, an enumeration type of all the opcode mnexjmonics, 

a set of register definitions, and a set of addressing mode 

functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


C(X)E_n'( opcode, operand {, operand) ); 

where n indicates the nximber of operands in the aggregate. 

A special case arises for a variable number of operands. 

The operands are lioted within a sijbaggregate. The format 

is as follows! 

COOE_N'( opcode, (operand {, operand)) ); 

For those opcodes that requite no operands, named notation 
iuust be used (cf. RM 4.3(4)). 

CC®E_0' ( op ■> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 

the 'REF attribute. 

The arguments to aity of the functions defined in 

MACHINE_CODE must be static expressions, string literals, or 

the functions defined in MACHINE_CODE. The 'REF attribute 

may not be used as an argument in any of these functions. 

Inline expansion of machine code procedure* is supported. 


6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 

physical addresses. 


C-13 







0 


APPENDIX F OF THE Ada STANDARD 


8. Restrictions on Unchecked Conversions 

None. 

9. Restrictions on Unchecked Deallocations 

None. 


10. Inplementation Characteristics of I/O Packages 

Instamtiations of DIRECT_I0 use the value MAX REC_SIZE as 

the record size (expressed in STORAGE_UNITS) v^en the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string v^ere ELEMENT_TVPE'SI2E is 

very large, MAX_REC_SIZE is used instead. I1AX_REC0RD_SIZE 

is defined in SYSTEM and caui be chamged by a program before 

instantiating DIRECT_I0 to provide an upper limit on the 

record size. In any case the maximum size supported is 1024 

X 1024 X STORAGEJJNIT bits. D1RECT___I0 will raise USE_ERROR 

if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 

as the record size (expressed in STORAGEJUNITS) when the 

size of ELEMENT_TYPE exceeds that value. For exanple for 

unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SI2E is used instead. 

MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 

program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUE2TriAL_I0 imposes no limit on 

MAX REC SIZE. 


11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 

even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 

characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 

32,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 32,000,000 x &TORAGE_UNITS. A record 

type or array type declaration that exceeds these limits 

will generate a warning message. 

11.3. Default Stack Size for Tasks 


C-14 





r 


APPENDIX F OF THE Ada STANCARD 




0 


in the absence of an explicit STORft(^_SlZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 

returned by T'STORACE_SI2E for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE^SIZE length attribute 
the default collection size for “ an access type is 100 times 
the size of the designated type. This is the value returned 

by T'ST0RAGE_SI2E for an access type T. 

11.5. Limit on Declared C&jects 

There is an eibsolute limit of 6,000,000 x ST0RAGE_UNITS for 

objects declared statically within a coopilation \init. if 

this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 




