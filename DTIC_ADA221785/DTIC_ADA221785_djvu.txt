ta 


pDsU fnfered) { / 

TION PAGE 

Ua£ WnU'CTlONS J 

■fORf :ov?urTt:sDronv 

AD-A221 785 accession no. 

3. mcipunrs catalog 

A 

10.1 \wna>uovvel 

MVME133a-20 (Target), 89112611.10221 

i. tyre of report a period covered 

27 T ov . 1989 to 27 Nov. 19,90 

8. PERFORMINGTrG . REPORT NUMBER 

1. author^; 

IABGi 

Ottobrunn, Federal Republic of Germany. 

6. contract or brant NUMBER^; 

1. PERFORMING ORGANIZATION AND ADDRESS 

IABG, 

Ottobrunn, Federal Republic of Germany. 

10. PROGRAM element. PROJECT. TASA 
AREA A WORK UNIT NUMBERS 

11. CONTROLLING OFFICE NAME AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 

12. REPORT DATE 

1J. NuMdlH Of PAuli 

14. MONITORING AGENCY NAME A ADDRt55(if different from Controlling Office) 

IABG, 

Ottobrunn, Federal Republic of Germany. 

IB. SECURITY CLASS (ofth,trepan) 

UNCLASSIFIED 

IS*. g£C£»S^FKATION/DOw\:RADlNG 

U N/A 

16. DISTRIBUTION STATEMENT (of thit Report) 

Approved for public release; distribution unlimited. 




17. DlSTRIBjTlOs STATEMENT (of the tbiuect entered mB>Ock 20 If d'Here nr from Report) 

UNCLASSIFIED DTIC 

ELECTE 
A P R 2 6 1990 


18. SUPPLEMENTARY NOTES 


Q_ 

O 

C-D 

LU 

rH 

L..C 


■urnro 

fours 



(b D 



18. KEYWORDS (Continue on reverie tide if neteueiy end identify by block number) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1B15A, Ada Joint Frogram Office, AJPO 


20. ABSTRACT (Continue onre*e'te Hdt if neteuery $nd identify by block numpec) 


I 

Telji-Soft, TeleGenZ Ada Development System, Ottobrunn West Germany, Hewlett-Packard 9000/j 
340 under HP/UX 6.5 (Host) to Motorola MVMEl33a-20 (MC68020) bare machine (Target), 

ACVC 1.10. 


"DO rosa 1473 edition or t nov ss is obsolete 

1 AA» JJ S/N 0102-LF-014-8601 


UNCLASSIFIED 


SECURITY CLASSIFICATION Of y*1S RACE (HhtnDtte lnie>ed) 


24 087 




•VF Control number: AVF-IABG-053 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Humber: #«91126I1.10221 
TeleSoft 

TeleGen2 Ada Development System for 
HP 9000/340 x MVME133a-20 


Completion of On-Site Testing: 
26 November 1989 


Prepared By: 
IABG mbH, Abt. 3ZT 
Hinsteinstrasse 20 
D-8012 Ottobrnnn 
vest Germany 


Prepared For: 

Ada Joint Program Office 
United States Department - of Defense 
Washington DC 203C1-3G31 







Ada Compiler Validation Summary Report: 

Compiler Name: TeleGen2 Ada Development System 
Version 1.4 

Certificate Number: 189112611.10221 

Host: Hewlett-Packard 9000/340 

under HP/UX 6.5 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 

Testing Completed 26 November 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Dr. S. Heilbrunner 
Einsteinstr. 20 
”>-8012 Ottobrunn 
'•t Germany 


(W Ada 
( Dir 


Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria, VA 22311 




Ada Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 


I Copy 
yNsp£cr f0 


J^CWsioTTTor 

NTIS CRA 
one MB 

E tfn/ioi .‘iced 
MfC.ltl..., 

By 

BistnUiitior i 


_Codes 

Dist AVf !!' J-rf/oT" 

Spc rciel 




□o 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION . 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT . . . . 
i.J USE OF THIS VALIDATION SUKHRFY REPORT . 

1.3 REFERENCES . 

1.4 DEFINITION OF TERMS . 

1.5 AC-’C TEST CLASSES. 


CHAPTER 2 CONFIGURATION INFORMATION , . 

2.1 CONFIGURATION TESTED .... 

2.2 IMPLEMENTATION CHARACTERISTICS 


CHAPTER 3 TEST INFORMATION . 1 

3.1 TEST RESULTS.1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.1 

3.4 WITHDRAWN TESTS.16 

3.5 INAPPLICABLE TESTS . 16 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . 20 

3.7 ADDITIONAL TESTING INFORMATION . 20 

3.7.1 Prevalidation.20 

3.7.2 Test Method.20 

3.7.3 Test Site.21 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX 3 APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAW TESTS 


APPENDIX E 


COMPILER AND LINKER OPTIONS 


c<* c~* *4* cc co <r> in in ip tc* 
























iBTRODUC*IOP 



CRAFTS? 1 
INTRODUCTION 

This validation Summary Report ( V SP.) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/UIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. -) 

— Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report.^ 

^ The information in this report is derived from the test results produced 
"" during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 


evaluating the results. \ The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language construct^. The testing also identifies behavior that is 
implementation dependent,\ but is permitted by the Ada Standard. Six 
classes of tests are used.\ These tests are designed to perform checks at 
compile time, at link time,\and during execution. 


1.1 PURPOSE OF THIS VALIDATION' SUI'HARY REPORT 



This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 






“??7annrjrTT0W 


. To attempt to identify any language construct? -unported by t-he 
compiler that do not conform to the Ad.- standard 

. To attempt to identify any language construct? not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by rb« w? according to 
procedures established by the Ada Joint Program office and administered by 
the Ada validation Organization (AVO). 


1.2 USE OF THIS VALIDATION SUHKARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free pitblic disclosure of this report. In the United States, 
this is provided in accordance with the " v reedom of Information Act" 
(5 U.S.C. 1552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject coapiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3031 

or from: 

IABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 






INTRODUCTION 


1.3 REFERENCE^ 


1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February (983 and TSO 8652-1987, 

2. Ada Compiler Validation Pr3cedures and Guidelines. Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability I?.-.ple"enters' Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique id .ntification number having the 
form Al-ddddd. 

Ada Standard ANSI/HIL-STD-1815A, February 1983 and ISO 3652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 

contained in the Ala Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The A v 0 has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and echnical 

support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 


Host 


The computer on which the compiler resides. 







Trrrsrr.UC'fTnN 


Inapplicable An ACVC test that uses features >f the language that a 

test compiler is not required to support or "pay legitimately 

support in a way other than tha one expected by the test. 

Passed test An ACV 1 ^ test for which a compiler generates the -xpected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler’s conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, S, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and S tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detect? illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to '--erify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 







IMTP.ODUCTIOU 


Class C tests check the run time system to ensure •‘hat legal Ada programs 
can be correctly compiled and executed. Each Class C test :.s self-checking 
and produces a PASSED, FAILED, or MOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number cf identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a MOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejecter', at link time—that is, an attempt 
to execute the main program, must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the packags REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
MOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedura CHECKJFILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CH£CK_FILB is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the AC’-tr follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a suucimum. length of ?2 characters, use small numeric values, ar.d 
tests. However, ■some tests contain values that require the test to be 








-?;-^nnT.;r?Tow 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language <'onstrvct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix B. 





CHAPTER 2 

COMF1GURATIOH INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: TeleGen2 Ada Development System 
Version 1.4 

ACVC Version: 1.10 

Certificate Number: *89112611.10221 

Host Computer: 

Machine: Hewlett-Packard 9000/340 

Operating System: HF/UM 6.5 
Memory Size: 16 HegaBytes 

Target Computer: 

Machine: Motorola MVHE133A-20 (MC68020) 


Operating System: bare machine 
Memory Size: 1 MegaBytes 








"fWI*“WA?TON T” T fi7MATT0N 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 

a. Capacities. 

1) The compiler correctly processes a compilation 
containing 723 variables in the same declarative part. (See 
test D29002K.) 

2) The compiler correctly processes tests containing 

loop statements nested to 65 levels. (See tests D55A03A..H 
(8 tests).} 

3) The compiler correctly processes tests containing 

block statements nested to 65 levels. (See test D56001B.) 

4) The compiler correctly processes tests containing 

recursive procedures separately compiled as subunits nested to 
17 levels. (See tests D64005E..G (3 tests).) 

b. Predefined types. 

1) This implementation supports the additional predefined types 
LONG.INTEGER and LONG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 

c. Expression evaluation. 

' The order in which expressions arfr evaluated and the time at}*which 

constraints are ■ checked are not defined by'the language.. While 

the ACVC tests do not specifically attempt to determine the order 

of evaluation of expressions, test results indicate the following: 

1) Some of the default initialization expressions 
for record components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 






•■"CtfFTGURATIOH TMFOFMATTOU 


4) NUMERIC JBRROR is raised for largest integer comparison and 

membership tests and no exception is raised for pre-defined 

integer comparison and membership tests when an integer 

literal operand in a comparison or -'emhership test is outside 
the range of the base type. 'See fast 0<15232A.) 

5) HUHERIC_ERROR is raised when a literal operand in a 

fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.5 

6) Underflow i? gradual. (See fresr? C4552^A.. 7 (?6 tests).) 


d. Rounding. 

The method by which values are rounded in *ype conversions is not 
defined by the language. While the ACVC '.ests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

2) The method used for rounding fro longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX JEST. For cnis 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.HAX_INT components raises ?iUMERIC_ERROR for a 
two dimensional array subtype where the large dimension is the 
second one. (See test C36003A) 

2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an 
array type with INTEGER’LAST + 2 components. (See test 
C36202A.) 

3) NUMERIC_ERROR is raised wnen an array type with 
SYSTEM.MAX INT + 2 components is declared. (See test 
C362G2B.) 







•'ONFTOriRATTCIJ •'TfOPKATTOP 


4) \ packed BOOLEAN array having a * r "NOTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

5) A packed two-dimensional BOOLEAN array with 'ore than 
INTEGER'LAST components raises COHSTRAINTJSRRAP when the 
length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

6) In assigning one-dimensiona’ array types, the expression is 
evaluated in its entirety before CONSTRAIHT^ERPOR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression 
is not evaluated in its entirety before CO?fSTFAINT_ERROP. is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 

3) A null array with one dimension of length greater than 
INTEGER'LAST may raise HUMERIC_EFROR or r.OTJSTRAINT.ERROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINTJERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates.. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
made as choices are evaluated. (See tests C43207A and 
C432073.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

3) COHSTRAINTJERROR is raised after all choices are 

evaluated when * bound in a non-null range of a non-null 
aggregate does not belong to an index subtype. (s*- test 

E43211B.) 



CONFIGURATION INFORMATION 


h. Pragmas. 

1) The pragma INLINE is supported fpr .procedures and for non¬ 
library functions. (See test3 LA3004A..B (2 tests), EA3004C..D 
(2 tests), and CA3004E..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by IA-408/11, if 

the body is compiled after a unit that instantiates it, then that 

unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 
compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 
be compiled in separate compilations. (See test 
CA1012A.) 

4) Generic non-library package bodies as subunits can 
be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can he 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests. CA2009C, 


'"ONFTOHRATIOM ’"FORMATION 


BC3204C, ft.id BC2205D.) 

8) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC3204C and BC3205D.) 

9) Generic unit bodies ?nd their «ub»nits can be 
compiled in separate compilations. (See test CA3011S.) 


j. Input and output. 

1) The package SEQUEWTIAL_IO cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

2) The package DIRECT_I0 cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101R, EE2401D, and EE2401G.) 

3) Modes IHJILE and OUTJILE are supported for SEQUEHTIAL_IO. 
(See tests CE2102D..E,“CE2102H, and CE2102P.) 

4) Modes IN FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT 10. (See tests CE2102F, CE2102I..J (2 tests), CE2102F, 
CE2102T, and CE2102V.) 

5) Modes IN_FILE and OUT_FILE are supported for text files. 
(See tests CE3102E and CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported . for 
SEQUENTIAL^. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT_.ro. 
(See tests CE2102K and CE21027.) 

8) RESET and DELETE operations are supported for text 
files. (See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

10) Temporary sequential files . are given names and not 
deleted when closed. (See test CE2108A.) 

ID Temporary direct files are given names and not delated when 
closed. (See test CE2108C.) 

12) Temporary text files are given names and not ^elefed 





rrMPTr,KPATinrt t"?ORKATIOM 


when closed. (See test CE3112A.5 

13) More than one internal file can be associated with 

each external file for sequential files when reading 

only. (See tests CE2107A..E (5 tests), CE2102L, CE2110B. and 
CE2111D.) 

14) More than one internal file >'an be associated with 

each external file for direct file*, when reading only. fSee 
teats CE2107F..H (3 tests), rE2110n and CS2111H.) 

15) More than one internal file can be associated with 

each external file for text files when reading only (See 

tests CE3111A..E (5 tests), <"53114B, and TE3115A.) 










TTS7 'TlrT.PVATTOtJ 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests, when this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 314 tests were inapplicable to this implementation. 
All inapplicable tests were processed during •-•alidation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation. Modifications to the code, 
processing, or grading for 13 tests ware required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 

2018 

17 

23 

45 

3359 

Inapplicable 

2 

9 

297 

0 

5 

1 

314 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 





TEST trcFttSWTTGK 






3.3 SUHHARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

TEST 

7 

CHAPTER 

'A * 

‘0 

11 12 

* <* 

y 

14 

TOTAL 

Passed 

198 

573 

544 

245 

172 

99 

160 

N> 

132 

C 

€'•« 

\c 

r 

340 

278 

3359 

N/A 

14 

76 

136 

3 

0 

n 

6 

0 

5 

0 2 

29 

43 

314 

Vdrn 

1 

« 

1 

0 

0 

0 

0 

0 

A 

0 

0 1 

>5 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn from ACVC Version 1.10 
at the time of this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

3C300°8 

CL2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A86S 

CP2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CS2A73B 

CD2A73C 

CD2AT3D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A33G 

CD2A84N 

CD2A84H 

CD5011O 

CD2B15C 

CD7205C 

CD2D11B 

CD5007B 

ED7004B 

ED7005C 

ED7005D 

E07006C 

ED7006P 

CD7105A 

CE3301A 

CD7203B 

CE3411B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others nay 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 314 tests were inapplicable for 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX.DIGITS: 

C35705L..Y (14 tests) 

C357077... .7 (14 tests) 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 






TEST TNTOPMa.TTOK 



C35708L..Y {14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..2 (15 tests) 
C45641L..Y (14 tests) 


C35802L..2 (15 tests) 
C45321L..Y (14 tests) 
C45521L..2 (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


b. C35508I, C35508J, C35508M, and C3550SN »re not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE *> 0, 

TRUE *> 1). Under the terras o£ AT-^0325, i-his implementation is 

not required to support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SH0RT_FL0AT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORTJTNTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B36001Y 

CD7101E 

e. C45531M..? (4 tests) and C45532M..P (4 tests) are not applicable 

because they acquire a value of SYSTEM.MAX MANTISSA greater than 
32. 

f. C86001F is not applicable because, for this implementation, the 
package TEXT.IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT.IO, and 
hence package REPORT, obsolete. 

g. B86001X, C45231D, and CD71016 are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a narae other than FLOAT, 
LONG.FLOAT, or SHORT.FLOAT. 

j. CA2009C, CA2009F, BC3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 2.2.i and 
Appendix F of the Ada Standard). 

k. LA3004B. EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for library 







TEST INFOSNATION 


functions. 


1. CD1009C, CD2A41A..B (2 tests), CD2A41E and CD2A42A..J t 10 tests) 
are not applicable because of restrictions on 'SIZE l-ngth clauses 
for floating point types. 

m. CD2A611..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

n. CD2A84B..I (8 tests) and C'>2A34K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length clauses for access types. 

o. CD4041A is not applicable because of restrictions on record 
representation clauses with 32 bit alignment. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL JO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECTJO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

r. CE2102D is inapplicable because this implementation supports 

CREATE with IN JILL mode for SEQUENTIAL JO. 

s. CE2102E is inapplicable because this implementation supports 

CREATE with OUTJILE mode for SEQUENTIAL JO. 

t. CE2102F is inapplicable because this implementation supports 

CREATE with INOUTJILE mode for DIRECT JO. 

u. CE2102I is inapplicable because this implementation supports 

CREATE with INJILE mode for DIRECTJO. 

v. CE2102J is inapplicable because this implementation supports 

CREATE with OUTJILE mode for DIRECTJO. 

w. CE2102H is inapplicable because this implementation supports OPEN 
with INJILE mode for SEQUENTIAL JO. 

x. CE21020 is inapplicable because this implementation supports RESET 
with INJILE mode for SEQUENTIAL JO. 

y. CE2102P is inapplicable because this implementation supports OPEN 
with OUTJILE mode for SEQUENTIAL JO. 

2 . CE2102Q is inapplicable because this it-plementation supports PE3ET 





tps? TFORt'ATTON 


with OUTJTCLE mode for SEQNENTTAL_IO. 

aa. CE2102R if inapplicable because this implementation supports OPEN 
with INOOT.FILE mode for DIRECTJTO. 

ab. CE2102S is inapplicable because this implementation supports RESET 
with INOOT.FILE mode for OIRECT_IO. 

ac. CE2102T is inapplicable because this implementation supports OPEN 
with IN.FILE mode for DIRECT_IO. 

ad. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DTRECTJTO. 

ae. CE2102V is inapplicable because this implementation supports OPEN 
with OUTJILE mode for DIRECT_T0. 

af. CE2102N is inapplicable because this implementation supports RESET 
with OUTJ’ILE mode for DIRECT.IO. 

ag. CE21072..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 

for sequential files. The proper exception i* raised when 

multiple access is attempted. 

ah. CE21076..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because text file CREATE with XN_FI*jE mode 
is supported by this implementation. 

aj. CE3102F is inapplicable because text file RESET i« supported by 
this implementation. 

ak. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

al. CE3102I is inapplicable because text file CREATE with 0UT_FIL3 
mode is supported by this implementation. 

am. CE3102J is inapplicable because text file OPEN with IN_FTIE mode 
is supported by this implementation. 

an. CE3102K is inapplicable because text file OPEN with ONT_FILE node 
is supported by this implementation. 

ao. CE3111B, CE3111B.,E (2 tests), CE3114B, and CE3113A are not 
applicable because multiple internal files cannot be associ-ited 











with the same external file when one or more files is writing for 
text files. The proper exception is raised when "ultipl* access 
is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will r»quir<» modifications of code, 
processing, or evaluation in order to .-.-'mnensate for 'egitimate 
implementation behavior. Modifications »re made hy the A"F in •■*«»*« ‘here 
legitimate implementation behavior prevents the ^nccessfn’ completion of an 
(otherwise) applicable test. Examples of such -'edifications include: 
adding a length clause to alter the default sise of a collection; splitting 
a Class B test into subtests so that all errors -*re detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such ns raising 
one exception instead of another). 

Modifications were required for 13 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E B71001K B71001Q 871001V BA30D6A BA3006B 

BA3007B BA3008A BA3008B BA3013A (6 and 7H) 

Tests C34005G, C34005J and C34006D returned the result FAILED because of 
falre assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T'SIZE due to the above assumptions (T is the array type). 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the TeleGen2 Ada Development System for a computing vyatem based on 
the same instruction set architecture was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
TeleGen2 System successfully passed all applicable tests, and it 
exhibited the expected behavior on all inapplicable tests. The applicant 
certified that testing results for the computing system of this validation 
would be identical to the ones submitted for review prior to validation. 


3.7.2 Test Method 

Testing of the TeleGen2 Ada Development System using ACVC Version 1.10 
was conducted on-site by a validation team from the A V F. Tin 1 








TEST TUPOPHATIfllf 


configuration in which the testing was performed is described by the 
following designations of hardware and software components: 


Host: Hewlett-Packard 9000/340 

under HP/UX 6.5 

Target: Motorola HVHE133A-20 (MCS8020) 

bare machine 

Communication Network: RS 232 

A cartridge containing the customized test suite was loaded onto a SUN-3 
and transferred via Ethernet to an intermediate computer whose disks were 
accessible via Ethernet for the host computer. Results were collected on 
the host computer and transferred Ethernet to yet another computer 
for evaluation and archiving. 

The compiler was tested using command scripts provided by TeleSoft 
and reviewed by the validation team. The tests were compiled using the 
command 

ada -0 1) (filename) 
and linked with the con- - 5 nd 

aid -a (options fii«> (main unit> 

The -L qualifier was added to the compiler call for class 3, expanded and 
modified tests. See Appendix E for explanation of compiler and linker 
switches. The (options file> contained a specification of memory addresses 
for the target computer. 

Tests were compiled, linked, and executed (as appropriate) using one com¬ 
puter. Test output, compilation listings, and job logs weft* captured on 
cartridge and archived at the AV?. The listings examined on-site by the 
validation team were also archived. 

3.7.3 Test Site 

Testing was conducted at TeleSoft, San Diego, USA, and was completed on 
26 November 1989. 









•~cia?attotj of ooi?*yiWAifCE 


k 


i 



appendix a 

DECLARATION OF CONroRWANCF 


TeleSoft has submitted the following Declaration of Conformance concerning 
the TeleGen2 Ada Development System. 







DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG. Dept. SZT, D-8012 Ottobrunn 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Compiler Name: 
Version: 

Host Architecture ISA: 
OS & VER #: 

Target Architecture ISA: 
OS & VER #: 


Base Configuration 

TeleGen2 Ada Development System 
1.4 

Hewlett-Packard 9000/340 
HP/UX 6.5 

Motorola MVME133A-20 (MC68020) 
Bare machine 

Implementor’s Declaration 


I, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner’s corporate 
name. 





TELESOFT 


Raymond A. Parra, Vice President and Genera! Counsel 


Date: ~ /— ^ 


Owner’s Declaration 


I, the undersigned, representing TELESOFT, take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANSI/MIL-STD-1815A. 




.. - / 
/V. rtf 


■ Mecca 
TELESOFT / 

1Raymond A. Parra, Vicp/President and General Counsel 


Date: /=^ - /"" 





i?PF?U>Ia ? n ? T«F 'da c ?'*tnARD 


APPENDIX 3 

APPENDIX F 07 THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain -achin.e-dependent convention* 
as mentioned in chapter 13 of the Ada standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleGen2 Ada Development System, as described in 
this Appendix, are provided by TeleSoft. Unless specifically noted 
otherwise, references in this appendix are t-o compile*- . documentation ana 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32763 .. 32767; 

type LONG_INTEGER is range -2147483643 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141S+38; 
type LONG FLOAT is digits 15 

range -3.93846567431158E+307 .. 3.9884656743115SE+307; 

type DURATION is delta 2#1.0#E-14 range -36400.0 .. 36400.0; 


end STANDARD; 








CHAPTERS: LRM ANNOTATIONS 
CHAPTER CONTENTS 

3 LRM ANNOTATIONS . 3-1 

3.1 LRM Chapter 2 - Lexical Elements .. 3-1 

3.2 LRM Chapter 3 - Declarations and Types ... • 3-1 

3.3 LRM Chapter 4 - Names and Expressions . 3-3 

3.4 LRM Chapter 9 - Tasks. 3-3 

3.5 LRM Chapter 10 - Program Structure and Compilation Issues . 3-3 

3.0 LRM Chapter 11 - Exceptions. 3-3 

3.7 LRM Chapter 13 - Implementation-Dependent Features. 3-4 

Table. Summary of LRM Chapter 13 Features. 3-4 

3.7.1 Pragma Pack. 3-5 

3.7.2 (LRM 13.2] Length Clauses. 3-7 

3.7.2.1 (a) Specifying Size: T’Size. 3-7 

3.7.2.2 (b) Specifying Collection Size: T’StoragejSize. 3-8 

3.7.2.3 (c) Specifying Storage for Task Activation: T’StorageJSize. 3-9 

3.7.2.4 (d) Specifying ’Small for Fixed Point Types: T’Small. 3-9 

3.7.3 (LRM 13.3| Enumeration Representation Clauses. 3-10 

3.7.4 [LRM 13.4j Record Representation Clauses. 3-10 

3.7.5 (LRM 13.5( Address Clauses. 3-11 

3.7.6 [LRM 13.6j Change of Representation. 3-12 

3.7.7 [LRM 13.7] The Package System. 3-12 

3.7.8 [LRM 13.7.2] Representation Attributes. 3-12 

3.7.9 (LRM 13.7.3] Representation Attributes of Real Types. 3-12 

3.7.10 [LRM 13.8] Machine Code Insertions. 3-12 

3.7.11 [LRM 13.9] Interface to Other Languages. 3-13 

3.7.12 [LRM 13.10] Unchecked Programming. 3-13 

3.8 LRM Appendix F for TeleGen2 . 3-13 

Table. LRM Appendix F Summary . 3-14 

3.8.1 Implementation-Defined Pragmas..’. 3-15 

3.8.1.1 Pragma Comment..... 3-15 

3.5.1.2 Fragma Linkname... 3-16 

3.8.1.3 Pragma Images. 3-16 

' 3.8.1.4 Pragma NoJSuppress. 3-17 

3.8.2 Implementation-Dependent Attributes. 3-17 

3.8.2.1 ’Address and ’Offset. 3-17 

3.8.2.2 Extended Attributes for Scalar Types. 3-17 

3.8.2.2.1 Integer Attributes . 3-19 


31JTJL89 


' &2U- REF-1347N-Vl.l(U/68) © 1989 TeleSoft 









































CHAPTER 3: LRM ANNOTATIONS 


CHAPTER CONTENTS 

3.5.2.2.2 Enumeration Type Attributes . 3-22 

3.8.2.2.3 Floating Point Attributes . 3-25 

3.8.2.2.4 Fixed Point Attributes. 3-27 

3.8.3 Package System... 3-31 


REP-134TN-Vl.l(U/68) © 1989 TeleSoft 31JUL89 










LRM ANNOTATIONS 


3. LRM ANNOTATIONS 

TeleGen2 compiles the full ANSI Ada language as defined by the Reference Manual for the 
Ada Programming Language (LRM) (ANSI/MIL-STD-1815A). This chapter describes the 
portions of the language that are designated by the LRM as implementation dependent for the 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully implemented by the current release of 
TeleGen2 or that require clarification are included. The features that are optional or that are 
implementation dependent, on the other hand, are described in detail. Particularly relevant are 
the sections annotating LRM Chapter 13 (Representation Clauses and Implementation- 
Dependent. Features) and Appendix F (Implementation-Dependent Characteristics). 


3.1. LRM Chapter 2 - Lexical Elements 

[LRM 2.1] Character Set. The host and target character set is the ASCII character set. 

[LRM 2.2] Lexical Elements,Separators, and Delimiters. The maximum number of 
characters on an Ada source line is 200. 

[LRM 2.8] Pragmas. TeIeGen2 implements all language-defined pragmas except pragma 
Optimize. If pragma Optimize is included in Ada source, the pragma will have no effect, 
^"'timization is implemented by using pragma Inline and the optimizer. Pragma Inline is not 
■ oported for library-level subprograms. Pragma Priority is not supported for main programs. 

Limited support is available for pragmas Memory .Size, Storage.Unit, and System_Name; 
that is, these pragmas are allowed if the argument is the same as the value specified in the 
System package. 

Pragmas Page and List are supported in the context of jource/error listings; refer to the 
Compiler/Linker chapter of the TeleGen2 User Guide for more information. 


3.2. LRM Chapter 3 - Declarations and Types 

[LRM 3.2.1] Object Declarations. TeleGen2 does not produce warning messages about the 
use of uninitialized variables. The compiler will not reject a program merely because it contains 
such variables. 


[LRM 3.5.1] Enumeration Types. The maximum number of elements in an enumeration 
type is 32767. This maximum can be realized only if generation of the image tame for the type 
has been deferred, and there are no references in the program the>. would cause the image table to 
be generated. Deferral of image table generation for an enumeration type, P, is requested by the 
statei. ,ent: 

pragma Images (P, Deferred); 


Refer to “Implementation-Defined Pragmas,” in Section 3.8.1, for more information on pragma 
Images. 


31JUL89 


REF-1347N-V 1.1(U/68) © 1989 TeleSoft 


3-1 




TeleGen2 Reference Information for UNIX/68K Hosts 


[LRM 3.S.4] Integer Types. There are two predefined integer types: Integer and 
Long_Integer. The attributes of these types are shown in Table 3-1. Note that using explicit 
integer type definitions instead of predefined integer types should result in more portable code. 

Table 3-1. Attributes of Predefined Types Integer and Long-Integer 


Attribute 

Type 

Integer 

Long Integer 

’First 

-32768 

-2147483648 

’Last 

32767 

2147483647 

’She 

16 

32 

’Width 

6 

11 


(LRM 3.5.8] Operations of Floating Point Types. There are two predefined Boating point 
types: Float and Long-Float. The attributes of types Float and Long-Float are shown in Table 
3-2. This Boating point facility is based on the IEEE standard for 32-bit and 64-bit numbers. 
Note that using explicit real type definitions should lead to more portable code. 

The type Short—Float is not implemented. 

Table 3-2. Attributes of Predefined Types Float and LongJFloat 


Attribute 

Type 

Float 

Long-Float 

’Machine-Overflows 

TRUE 

TRUE 

’Machine-Rounds 

TRUE 

TRUE 

’Machine-Radix 

2 

2 

’Machine-Mantissa 

24 

53 

’MachineJEmax 

127 

1U23 

’Machine-Emin 

-125 

-1021 

’Mantissa 

21 

51 

’Digits 

6 

15 

’Size 

32 

64 

’Emax 

84 

204 

’Safe-Emai. 

125 

1021 

’Epsilon 

9.53674E-07 

8.88178E-16 

’Safe-Large 

4.25253E-r37 

2.24711641857789E+307 

’Safe-Small 

1.17549E-38 

2.22507385850721E-308 

’Large 

1.3342oE-f25 

2.57110087081438E+61 

’Small 

2.58494E-26 

1.99469227433161E—62 


3-2 


REF-1347N-VI.1(U/68) © 1989 TeleSoft 


S1JUL89 














LRM ANNOTATIONS 


3.1. LRM Chapter 4 - Names and Expressions 

(LRM 4.10] Universal Expressions. There is no limit on the accuracy of real literal 
expressions. Real literal expressions are computed using an arbitrary-precision arithmetic 
package. 


3.2. LRM Chapter 9 - Tasks 

(LRM 9.6] Delay Statements, Duration, and Time. This implementation uses 32-bit 
fixed point numbers to represent the type Duration. The attributes of the type Duration are 
shown in Table 3-3. 


Table 3-3. Attributes of Type Duration 


Attribute 

Value 

’Delta 

’First 

’Last 

0.000061035156250 

-86400.0 

86400.0 


[LRM 9.8] Priorities. Sixty-four levels of priority are available to associate with tasks 
through pragma Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..63; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority’First -f System.Priority’Last) / 2 

[LRM 9.11] Shared Variables. The restrictions on shared variables are only those specified 
in the LRM. 


3.3. LRM Chapter 10 - Program Structure and Compilation Issues 

[LRM 10.1] Compilation Units - Library Units. All main programs are assumed to be 
parameterless procedures or functions that return an integer result type. 


3.4. LRM Chapter 11 • Exceptions 

[LRM 11.l] Exception Declarations. Numeric-Error is raised for integer or floating point 
overflow and for divide-by-zero situations. Floating point underflow yields a result of zero without 
raising an exception. 

Program-Error and Storage-Error are raised by those situations specified in LRM Section 
11.1. Exception handling is also discussed in the Programming Guide chapter. 


04JAN90 


REF-1347N-V1.2a(U/68) © 1990 TeleSoft 


S-3 





TeleGenZ Reference Information for UNIX/68K Hosts 


3.7. LRM Chapter 13 - Implementation-Dependent Features 

As shown in Table 3-4, the current release of TeleGen2 supports most LRM Chapter 13 
facilities. The sections below the table document those LRM Chapter 13 facilities that are either 
not implemented or that require explanation. Facilities implemented exactly as described in the 
LRM are not mentioned. 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 — 
13.5). Pragma Pack is supported, except for dynam¬ 
ically sized components. For details on the 
TeleGen2 implementation of pragma Pack, see Sec¬ 
tion 3.7.1. 

13.2 Length Clauses 

Supported: 

'Size 

’Storage-Size for collections’ 

’Storage-Size for task activation 
’Small for fixed-point types 

See Section 3.7.2 for more information. 

13.3 Enumeration Rep. Clauses 

Supported, except for type Boolean or types derived 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 3.7.4 for a full discussion 
of the TeleGen2 implementation. 

13.5 Address Clauses 

Supported for: objects (including task objects). 

Not supported for: packages, subprograms, or task 
units. 

See Section 3.7.5 for more information. 

13.5.1 Interrupts 

For interrupt entries, the address of a TeleGen2- 
defined interrupt descriptor can be given. See “In¬ 
terrupt Handling” in the 'Programming Guide 
chapter for more information. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

—— Continued on the next page -- 


3-4 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 






LRM ANNOTATIONS 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 (Contd) 


- Continued from the previous page - 

13.7 Package System 

Conforms closely to LRM model. Refer to Section 
3.7.7 for details on the TeleGen2 implementation. 

13.7.1 System-Dependent Named 
Numbers 

Refer to the specification of package System (Sec¬ 
tion 3.7.7). 

13.7.2 Representation Attributes 

Implemented as described in LRM except that: 
'Address for packages is unsupported. 

’Address of a constant yields a null address. 

13.7.3 Representation Attributes of 
Real Types 

See Table 3-2. 

13.8 Machine Code Insertions 

Fully supported. The TeleGen2 implementation 
defines an attribute, ’Offset, that, along with the 
language-defined attribute ’Offset, allows addresses 
of objects and offsets of data items to be specified in 
stack frames. Refer to. “Using Machine Code Inser¬ 
tions” in the Programming Guide chapter for a full 
description on the implementation and use of 
machine code insertions. 

13.9 Interface to Other 

Languages 

Pragma Interface is supported for Assembly, C, 
UNIX, and Fortran. Refer to “Interfacing to Other 
Languages” in the Programming Guide chapter for 
a description of the implementation and use of prag¬ 
ma Interface. 

13.10 Unchecked Programming 

Supported except as noted below (LRM 13.10.2). 

13.10.1 Unchecked Storage Deallo¬ 
cation 

Supported. 

13.10.2 Unchecked Type Conver¬ 
sions 

Supported except for unconstrained record or array 
types. 


3.7.1. Pragma Pack. This section discusses how pragma Pack is used in the TeleGen2 
implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiler allocates 16 bits for a single Boolean, 8 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array; the one below that illustrates a packed Boolean array: 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 





















TeleGen2 Reference Information for UN1X/68K Hosts 


■ - Unpacked Boolean array:- 

Unpacked Bool_Arr_Type is array (Natural range 0..1) of Boolean 
U_B_Arr: Unpacked^Bool_Arr_Type := (True,False); 

MSB LSB 

7 0 

Element 0 
Element 1 


0 

1 

0 

o’ 


-Packed Boolean array:- 

Packed Bool_ArrJType is array (Natural range 0..6) of Boolean; 
pragma Pack (Packed Bool_Arr_Type); 

P_B_Arr: Packed_BooI_Arr_Type := (P_B Arr(O) => True, 
""P~B__Arr(5) =>~True7 others => FalseJ; 


MSB 
Bit: 15 


LSB 

0 


Element: 


0 1 2 3 4 5 6 


(unused) 


b. With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

1. The total size of the record is a multiple of 8 bits. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure, Rep_Proc, that defines three records of different 
lengths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits; that is, it i3 maximally packed. 


3-6 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 









LRM ANNOTATIONS 


procedure Rep_Proc is 

type A1 is array (Natural range 0 .. 8) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 .. 3) of Boolean; 
pragma Pack (A2); 

type A3 is array (Natural range 0 .. 2) of Boolean; 
pragma Pack (A3); 

type AJlec is 
record 

One : Al; 

Two : A2; 

Three : A3; 
end record; 
pragma Pack (AJlec); 

Rec : A_Rec; 

begin 

Rec.One := ( 0 => True, 1 => False, 

3 => False, 4 => True, 

6 => False, 7 => False, 

Rec.Two (3) :** True; 

Rec.Three (1) :* True; 

end Rept_Proc; 

3.7.2. (LRM 13.2] Length Clauses. A length clause specifies an amount of storage 
associated with a type. The sections below describe how length clauses are supported in this 
implementation of TeleGen2 and how to use length clauses effectively within the context of 
TeleGen2. 

3.7.2.1. (a) Specifying Sise: T’Slze. The prefix T denotes an object. The size specification 
must allow for enough storage space to accommodate every allowable value of these objects. The 
constraints on the object and on its subcomponents (if any) must be static. For an unconstrained 
array type, the index subtypes must also be static. 

For this implementation, Min_Size is the smallest number of bits logically required to hold 
any value in the range; no sign bit is allocated for non-negative ranges. Biased representations 
are not supported; e.g., a range of 100 .. 101 requires 7 bits, not 1. Warning: in the current 
release, using a size clause for a discrete type may cause inefficient code to be generated. For 
example, given 

type Nibble is range 0 .. 15; 
for Nibble’Size use 4; 

...each object of type Nibble will occupy only 4 bits, and relatively expensive bit-field instructions 
will be used for operations on Nibbles. (A single declared object of type Nibble will be aligned on 
a storage-unit boundary, however.) 

For floating-point and access types, a size clause has no effect on the representation. (Task 
types are implemented as access types). 


2 => False, 

5 => False, 

8 => True ); 


31JUL89 


REr-1347N-Vl.lfU/681 ra 1989_Ial*Safti 







TeleGen* Reference Information for UNIX/68K Hosts 


For composite (array or record) types, a size clause acts like an implicit pragma Pack, 
followed by a check that the resulting size is no greater than the requested size. Note that the 
composite type will be packed whether or not it is necessary to meet the requested size. The size 
clause for a record must be a multiple of storage units. 

S.7.2.2. (b) Specifying Collection Size: T’Storage_Size. A collection is the entire set of 
objects created by evaluation of allocators for an access type. 

The prefix T denotes an access type. Given an access type Acc_Type, a length clause for a 
collection allocated using Acc_Type objects might look like this: 

for Acc-Type*Storage-Size use 64; 

In TeleGen2, the above length clause allocates from the heap 64 bytes of contiguous memory for 
objects created by AccJType allocators. Every time a new object is created, it is put into the 
remaining free part of the memory allocated for the collection, provided there is adequate space 
remaining in the collection. Otherwise, a storage error is raised. 

Keeping the objects in a contiguous span of memory allows system storage reclamation 
routines to deallocate and manage the space when it is no longer needed. Pragma Controlled can 
prevent the deallocation of a specified collection of objects. Objects can be explicitly deallocated 
by calling the Unchecked-Deallocation procedure instantiated for the object and access types. 

Header Record 

In this configuration of TeleGen2, information needed to manage storage blocks in a collection is 
stored in a collection header that requires 20 bytes of memory, adjacent to the collection, in 
addition to the value specified in the length clause. 

Minimum Size 

When an object is deallocated from a collection, a record containing link and size information for 
the space is put in the deallocated space as a placeholder. This enables the space to be located 
and reallocated. The space allocated for an object must therefore have the minimum size needed 
for the placeholder record. For this TeleGen2 configuration, this minimum size is the sum of the 
sizes of an access type and a integer type, or 6 bytes. 

Dynamically Sized Objects 

When a dynamically-sized object is allocated, a record requiring 2 bytes accompanies it to keep 
track of the size of the object for when it is put on the free list. The record is used to set the size 
field in the placeholder record since compaction may modify the value. 

Size Expressions 

Instead of specifying an integer in the length clause, you can use an expression to specify storage 
for a given number of objects. For example, suppose an access type Dict_Ref references a record 
SymbolsRec containing five fields: 


5- 8 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 





LRM ANNOTATIONS 


type Tag is String(l..8); 
type SymboUlec; 

type DictJlef is access SymboUlec; 

type SymboUlec is 
record 

Left : DictJlef; 

Eight : DictJlef; 

Parent : DictJlef; 

Value : Integer; 

Key : Tag; 
end record; 

To allocate 10 Symbol Jlec objects, you could use an expression such as: 

for DictJlef’StorageJSize use ((SymboUlec’Size * 10)+20); 

where 20 Is the extra space needed for the header record. (Symbol_R.ec is obviously larger than 
the minimum size required, which is equivalent to one access type and one integer.) 

In another implementation, Sy mbol Jlec might be a variant record that uses a variable 
length far the string Key: 

type SymboL_Eec(Last : Natural :=0) is 
record 

Left : Dict_Eef; 

Right : DictJlef; 

Parent : DictJlef; 

Value : Integer; 

Key : String(1..Last); 
end record; 

In this case, SymboLBec objects would be dynamically sized depending on the length of the 
string for Key. Using a length clause for DictJlef as above would then be illegal since 
Symbol Jlec’Size cannot be consistently determined. A length clause for Symbol Jlec objects, as 
described in (a) above, would be illegal since not all components of Symbol Jlec are static. As 
defined, a Symbol Jlec object could conceivably have a Key string with Integer’Last number of 
characters. ' 

3.7.2.3. (c) Specifying Storage for Task Activation: T’StorageJSixe. The prefix T 
denotes a task type. A length clause for a task type, specifies the number of storage units to be 
reserved for an activation of a task of the type. The TeIeGen2 default stack size is 8192 bytes. 

5.7.2.4. (d) Specifying ’Small for Fixed Point Types: T’Smai], Small is the absolute 
precision (a positive real number) while the prefix T denotes the first named subtype of a fixed 
point type. Elaboration of a real type defines a set of model numbers. T’Small is generally a 
power of 2, and model numbers are generally multiples of this number so that they can be 
represented exactly on a binary machine. All other real values are defined in terms of model 
numbers having explicit error bounds. 

Example: 

type Fixed is delta 0.25 range -10.0 .. 10.0; 


31JUL89 


REF-1347N-Vl.l(U/08) © 1989 TeleSoft 


5-9 






TeleGen2 Reference Information for UNIX/68K Hosts 


Here... 


Fixed’Small = 0.25 — A power of 2 

S.O = 12 * 0.25 — A model number but not a power of 2 

The value of the expression of the length clause must not be greater than the delta of the 
first named subtype. The effect of the length clause is to use this value of ’Small for the 
representation of values of the fixed point base type. The length clause thereby also affects the 
amount of storage for objects that have this type. 

If a length clause is not used, for model numbers defined by a fixed point constraint, the 
value of Small is defined as the largest power of two that is not greater than the delta of the fixed 
accuracy definition. 

If a length clause is used, the model numbers are multiples of the specified value for Small. 
For this configuration of TeleGen2, the specified value must be (mathematically) equal to either 
an exact integer or the reciprocal of an exact integer. 

Examples: 

1.0, 2.0, 3.0, 4.0, . . . are legal 
0.5, 1.0/3.0, 0.25, 1.0/3600.0 are legal 
2.5, 2.0/3.0, 0.3 are illegal 

3.7.3. [LRM 13.3] Enumeration Representation Clauses. Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the ’Pos, ’Pred, or ’Succ attributes for values of the 
type. 


3.7.4. [LRM 13.4] Record Representation Clauses. Since record components are subject 
to rearrangement by the compiler, you must use representation clauses to guarantee a particular 
layout. Such clauses are subject to the following constraints: 

* Each component of the record must be specified with a component clause. 

* The alignment of the record is restricted to mods 1 and 2, byte and word aligned. 

* Bits are ordered right to left within a byte. 

* Components may cross word boundaries. 

Here is a simple example showing how the layout of a record can be specified by using 
representation clauses: 

package Repspec-Exaaple is 
Bits : constant':= 1; 

Word : constant :- 4; 

type Five is range 0 .. 16#1F#; 

type Seventeen is range 0 .. 16#1FFFF#; 

type Nine is range 0 .. 511; 

type Record_Layout_Type is record 
Elementl : Seventeen; 


5-10 


REF-1347N-Vl.l{U/68) © 1989 TeleSoft 


31JUL89 




- LRM ANNOTATIONS 


Element2 : Five; 

Element3 : Boolean; 

Element4 : Nine; 
end record; 

for Record_Layout_lype use record at nod 2; 
Eleoentl at 0*Word range 0 .. 16; 
Eleoent2 at 0*Word range 17 .. 21; 
Element3 at 0*Word range 22 .. 22; 
Eleoent4 at 0*Word range 23 .. 31; 
end record; 

Record_Layout : Record_Layout_Type; 
end Repsp,"-_Exaaple; 


3.7.5. [LRM 13.5] Address Clauses. The Ada compiler supports address clauses for 
objects, subprograms, and entries. Address clauses for packages and task units are not 
supported. 

Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address clauses is affected by the fact that the 
System.Address type is private. For the MC680x0 target, literal addresses sure represented as 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For example, in the examples in this document the 
following declaration is often assumed: 

function Addr is new Unchecked-Conversion (Long_Integer,System.Address); 

This function is invoked when an address literal needs to be converted to an Address type. 
Naturally, user programs may implement a different convention. Below is a sample program that 
uses address clauses and this convention. Package System must be explicitly urithed when using 
address clauses. 

with System; 

with UncheckecLConversion; 

procedure Hardware-Access is 

function Addr is new Unchecked-Conversion (Long-Integer, System.Address); 

Hardware-Register : integer; 

for Hardware-Register use at Addr (I6#FFOOOO#); 

begin 
• • • 

end Hardware-Access; 

When using an address clause for an object with an initial value, the address clause should 
immediately follow the object declaration: 

Obj: Some-Type := <init_expr>; 

for Obj use at <addr_expr>; 

This sequence allows the compiler to perform an optimization wherein it generates code to 
evaluate the <addr.jexpr> as part of the elaboration of the declaration of the object. The 
expression <init_expr> will then be evaluated and assigned directly to the object, which is stored 
at <addr_expr>. If another declaration had intervened between the object declaration and the 
address clause, the compiler would have had to create a temporary object to hold the 
initialization value before copying it into the object when the address clause is elaborated. If the 


31JUL89 


REF-1347N-Vl.l(U/68) ® 1989 TeleSoft 


3-11 




TeleG«n2 Reference Information for UN1X/68K Hosts 


object were a large composite type, the need to use a temporary could result in considerable 
overhead in both time and space. To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

As mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (8 bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by MCS80x0 byte instructions. The following example indicates 
how these facts allow access to hardware byte registers: 

with System; 

with Unchecked-Conversion; 
procedure Main is 

function Addr is new Unchecked_Conversion (Long_Integer, System.Address); 
type Byte is range -128..127; 

HW_Regs : array (0..1) of Byte; 
for HW-Regs use at Addr (16#FFF310#); 

Status-Byte : constant integer := 0; 

Next-Block-Request: constant integer 1; 

Request^Byte : Byte := 119; 

.Status : Byte; 

begin 

Status HW-Regs(StatusuByte); 

HW_Regs(Next_BlodLRequest) :» Request-Byte; 
end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16#FFF310# and the next block request byte is at location 16#FFF311#. 

Function Addr takes a long integer as its argument. Long_Integer’Last is 16#7FFFFFFF#, 
but there are certainly addresses greater than Long_Integer’Last. Those addresses with the high 
bit set, such as FFFA0000, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set, the address should be computed as the negation of the 2’s complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr(-16#00060000#). 

3.7.6. [LRM 13.6] Change of Representation. TeleGen2 supports changes of 
representation, except for types with record representation clauses. 

3.7.7. [LRM 13.7] The Package System. The specification of TeleGen2’s implementation 
of package System is presented in the LRM Appendix F section at the end of this chapter. 

3.7.8. [LRM 13.7.2] Representation Attributes. The compiler does not support ’Address 
for packages. 

3.7.9. [LRM 13.7.3] Representation Attributes of Real Types. The representation 
attributes for the predefined floating point types were presented in Table 3-2. 

3.7.10. [LRM 13.8] Machine Code Insertions. Machine code insertions, an optional 
feature of the Ada language, are fully supported in TeieGen2. Refer to the “Using Machine Code 
Insertions” section in the Programming Guide chapter for information regarding their 


3-12 


REF-1347N-Vl.l(U/68) © 1989 TeleSofi 


31JUL89 






-LRM ANNOTATIONS 


implementation and for examples on their use. 

3.7.11. (LRM 13.9] Interface to Other Languages. In pragma Interface is supported for 
Assembly, C, UNIX, and Fortran. Refer to “Interfacing to Other Languages” in the 
Programming Guide chapter for for information on the use of pragma Interface. TeleGen2 does 
not currently allow pragma Interface for library units. 

3.7.12. (LRM 13.10] Unchecked Programming. Restrictions on unchecked programming 
as it applies to TeleGen2 are listed in the following paragraphs. 

[LRM 13.10.2] Unchecked Type Conversions. Unchecked conversions are allowed 
between types (or subtypes) Tl and T2 as long as they are not unconstrained record or array 
types. 


3.8. LRM Appendix F for TeleGen2 

The Ada language definition allows for certain target dependencies. These dependencies 
must be described in the reference manual for each implementation, in an “Appendix F” that 
addresses each point listed in LRM Appendix F. Table 3-5 constitutes Appendix F for this 
implementation. Points that require further clarification are addressed in sections refererenced in 
the table. 




31JULS9 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-13 







TeleGen2 Reference Information for UNDC/68K Hosts 


Table 3-5. LEM Appendix F for TeleGen2 


(1) Implementation-Dependent Pragmas 


(2) Implementation-Dependent 
butes 


(3) Package System 


(a) Implementation-defined pragmas: Comment, 
Linkname, Images, and No_Suppress (Section 
3.8.1). 

(b) Predefined pragmas with implementation- 
dependent characteristics: 

« Interface (assembly, UNIX, C, and Fortran- 
see “Interfacing to Other Languages." 

Not supported for library units. 

* List and Page (in context of source/error 
compiler listings.) (See the User Guide.) 

* Pack. See Section 3.7.1. 

* Inline. Not supported for library-level 
subprograms. 

* Priority. Not supported for main programs. 

Other supported predefined pragmas: 

Controlled Shored Suppress 

Elaborate 

Predefined pragmas partly supported (see Sec¬ 
tion 3.1): 

Memory-Size Storage-Unit System-Name 

Not supported: Optimise 


’Offset. Used for machine code insertions. 

The predefined attribute ’Address is not supported 
for packages. See “Using Machine Code Insertions’’ 
earlier in this chapter for information on ’Offset and 
’Address. 

’Extended-Image 
'Extended_V alue 
’Extended-Width 
’Extended_Aft 
’Extended-Digits 

Refer to Section 3.8.2 for information on the 
implementation-defined extended attributes listed 
above. 


See Section 3.7.7. 


(4) Restrictions on Representation Summarized in Table 3-4. 
Clauses 


——- Continued on the next page 



3-14 


EEF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 















--- LRM ANNOTATIONS 


Table 3-5. LRM Appendix F for TeleGen2 (Contd) 


- Continued from the previous page —-— 

(5) Implementacion-Generated Names 

None 

(6) Address Clause Expression Interpre¬ 
tation 

An expression that appears in an object address 
clause is interpreted as the address of the first 
storage unit of the object. 

(7) Restrictions on Unchecked Conver¬ 
sions 

Summarized in Table 3-4. 

(8) Implementation-Dependent Charac¬ 
teristics of the If 0 Packages. 

1. In Text_IO, the type Count is defined as follows: 
type Count is range 0..System.Max Text JO_Count; 

- or O..M*x_Int—1 OR 0..2_147ll83 J54« 

2. In Text JO, the type Field is defined as follows: 

subtype Field is integer range 

System.Max-Text JO-Field; 

3. In Text_IO, the Form parameter of procedures 
Create and Open is not supported. (If you sup¬ 
ply a Form parameter with either procedure, it 
is ignored.) 

4. Sequential-JO and Direct_IO cannot be instan¬ 
tiated for unconstrained array types or discrim¬ 
inated types without defaults. 

5. Thi* standard library contains preinstantiated 
versions of Text_IO.Integer_IO for types Integer 
and Long_Integer and of Text_JO.Float.JO for 
types Float and Long-Float. We suggest that 
you use the following to eliminate multiple in¬ 
stantiations of these packages: 

Integer-Text JO 

LongJnteger-TextJO 

FlostJTextJO 

Long_Float_Text JO • 


3.8.1. Implementation-Defined Pragmas. There are four implementation-defined pragmas 
in TeieGen2: pragmas Comment, Linkname, Images, and No_Suppress. 

3.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <string_literal> ); 


REF-1347N-Vl.l(U/68) © 1989 TeieSoit 


31JULS9 


3-15 















TeieGen2 Reference Information for UNTX/08K Hosts 


where “<string_literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
Any number of comments may be entered into the object code by use of pragma Comment. 

5.8.1.2. Pragma Linksame. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 
exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly, < subprogram-name > ); 
pragma Linkname ( <snbprogram_name>, <string_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Dusmy-Access ( Dcamy-Arg : System.Address )'; 
pragma Interface (assembly, Iiuamy-Access ); 
pragma Linkname (Dunmy-Aceess, "-access*); 

3.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
legation of each literal within the image table. The length of the index table is therefore the sum 
cf the lengths of the literals of the enumeration type; the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Images(<enumeration-type>, Deferred); 

— or — 

pragma Images (<enumeration_type>, Immediate); 

The default, Deferred, saves space in the literal pool by not creating image and index tables for 
an enumeration type unless the ’Image, ’Value, or ’Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating she benefits cf deferring the table. In this case, 
using 


pragma Images(<enumeration_type>, Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 

For a very large enumeration type, the length of the image table will exceed Integer’Last 
(the maximum length of a string). In this ca&*, using either 

REF- 1347 N-V 1.1 (U/68) © 1989 TeleSoft 


3-16 


31JUL89 





LRM ANNOTATIONS 


pragma Images(<enmneration_t'ype>, Immediate); 

or the ’Image, ’Value, or ’Width attribute for the type will result in an error message from the 
compiler. 

3.8.I.4. Pragma NoJSuppress. NoJSuppress is a TeleGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. NoJSuppress is particularly useful when you have a section of code that 
relies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 
the compilation unit for performance reasons. 

Pragma NoJSuppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma NoJSuppress (<identiller> [, [ON =>j <name>j); 

where <identifler> is the type of check you want to suppress (e.g., access_check; refer to 
LRM 11.7) 

<nam«> is the name of the object, type/subtype, task unit, generic unit, or subprogram 
within which the check is to be suppressed; <name> is optional. 

If neither Suppress nor NoJSuppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the —i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on -i(nhibit, refer to your TeleGen2 Overview and Command Summary document. 

If either Suppress or NoJSuppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
NoJSuppress are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or NoJSuppress in the source takes precedence over an —i(nhibit 
option provided during compilation. 

3.8.2. Implementation-Dependent Attributes. 

3.8.2.1. ’Address and ’Offset. These were discussed within the context of using machine 
code insertions, in the Programming Guide chapter. 

5.8.2.2. Extended Attributes for Scalar Types. The extended attributes extend the 
concept behind the Text_IO attributes ’Image, ’Value, and ’Width to give the user more power 
and flexibility when displaying values of scalars. Extended attributes differ in two respects from 
their predefined counterparts: 

1. Extended attributes take more parameters and -How control of the format of the output 
string. 

2. Extended attributes are defined for all scalar types, including fixed and Soaring point 
types. ■ 


31JUL89 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


3-IT 






TeleGenS Reference Information for UNIX/68K Hosts 


Extended versions of predefined attributes are provided for integer, enumeration, floating point, 
and fixed point types: 


Integer: 
Enumeration: 
Floating Point: 
Fixed Point: 


’Extended-Image, 
’Extended-Image, 
’Extended-Image, 
’ Extended-Image, 
’Extended—Aft 


’Extended-Value, 
’Extended—Value, 
’Extended-Value, 
’Extended—Value, 


’Extended-Width 

’Extended-Width 

’Extended-Digits 

’Extended-Fore, 


The extended attributes can be used without the overhead of including Text-IO in the 
linked program. Below is an example that illustrates the difference between instantiating 
Text_IO.Float_IO to convert a float value to a string and using Float’Extended-Image: 


with Text_I0; 

function Convert-To-String ( FI : Float ) return String is 
Temp_Str : String (1 .. 6 + Float’Digits ); 
package Flt-IO is new Text-IO.Float—10 (Float); 
begin 

Flt-IO .Put ( Teopu_Str, FI ); 
return TeapJStr; 

end Convert-To—String; 


function Convert ..To. .String-No-Tcxt-IQ ( FI : Float ) return String is 
begin 

return Float’Extended-Image ( FI ); 
end Convert-To-String-Na-Text—IO; 


with Text_I0, Convert-To_String, Convert_Ta_String_Na_Text_10; 
procedure Show-Different—Conversions is 

Value : Float := 10.03376; 

begin 

Text-IO.Put_Line ( "Using the Convert-To-String, the value of the variable 
is : " t Convert—To-String ( Value ) ); 

Text_I0.Put-Line ( "Using the Convert_Ta_String_Na_Text_IO, the value 
is : " k Convert-To-String-No-Text-IO ( Value ) ); 

end Show-Different—Conversions; 


3-18 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 




LRM ANNOTATIONS 


3.8.2.2.I. Integer Attributes 
’Extended Image 


Usage: 


X’Extended _Image(Item,Width3ase3 aBe diSp*ce_IF-Positive) 

Returns the image associated with Item as defined in Text_IO. Integer_IO. The Text_IO 
definition states that the value of Item is an integer literal with no underlines, no exponent, no 
leading zeros (but a single zero for the zero value), and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters, leading spaces are first 
output to make up the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype: this attribute is a function that may have 
more than one parameter. The parameter Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in base notation or not. If no preference is specified, the de¬ 
fault (false) is assumed. Optional 

Space_If—Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the following subtype were declared: 

subtype X is Integer Range -10..15; 

Then the following would be true: 


X’Extended- Image(5) = *5* 

X’Extended-Image(5,0) = *5* 

X’Extended-Image(5,2) = * 5* 

X’Extended—Emage(5,0,2) = *101* 

X’Extended-Image(5,4,2) = ' 101* 

X’Extended-Image(5,0,2,True) = *2#101f* 

X’Extended—Image(5,0,10,False) * *5* 

X’Extended-Image(5,0,10,False,True) = * 5* 

X’Extended—Image(-1,0,10,False,False) = *-l* 

X’Extended—[mage(-1,0,10,False,True) = *-l* 

X’Extended—Image(-1,1,10,False,True) = *-l" 


3-l£ 


31JUL89 


JLEF-1347N-Vl.l(U/68) © 1989 TeJeSoft 






TeleGenZ Reference Information for UNDC/68K Hosts 


X’Extended_Image(-l,0,2,True,True) = 

X’Extended-Image(-1,10,2,True,True) = " -2#1#* 

’Extended-Value 


Usage ; 

X’Extended-V alue (Item) 

Returns the value associated with Item as defined in Text_IO.Integer_IO. The Text_JO definition 
states that given a string, it reads an integer value from the beginning of the string. The value 
returned corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint—Error is raised. 

Parameter Description: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type X. Required 


Examples: 

Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended—ValueCS*) = 5 
X’ Extended-Value (■ 5") =5 
X’ExtendecLValue(*2#101#*) = 5 
X’ExtendecLValue( , -i , ) = -1 
X * Extended-Yalue(* -1") * -1 


’Extended-Width 


Usage: 


X’Ext ended—Width(Base,BaBed,Space_lf_Positive) 


Returns the width for subtype of X. 

For a prefix X that is a discrete subtype: this attribute is a function that may have multiple 
parameters. This attribute yields the maximum image length over all values of the type or 
subtype X. 


3-20 


■ REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 





LEM ANNOTATIONS 


Parameter Descriptions: 


Base 

The base for which the width wiil be calculated. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether the subtype is stated in based no¬ 
tation. If no value for based is specified, the default (false) 
is assumed. Optional 

Space_If_Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 


Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 
Then the following would be true: 


X*Extended_Yidth = 3 
X’Extended_Width(10) a 3 
X’Extended_Width(2) a 5 
X’Extended_Width(10,True) a 7 
X’Extended_Width(2,True) a 8 
X’Extended_Width(10,False,True) a 3 
X’Extended-Width(10,True,False) a 7 
X’BxtendecLWidth(10,True,True) a 7 
X’Extended_Width(2,True,True) = 9 
X’ExtendedJfidth(2,False,True) a 6 


— "- 10 " 

-i<r 

-"loootr 
-* 

- "emoooo #'» 

-»itf" 

- n -mw” 

- » 

- " 2 # 10000 $ 1 ' 
- " iflflflfl" 


3UTJL89 


REr-1347N-V 1.1 (U/68) @ 1989 TeleSofit 







TeleGen2 Reference Information for UNDC/68K Hosts 


S.8.2.2.2. Enumeration Type Attributes 

’Extended-Image 

Usage: 

X’Extended_Image(Item,Width,Uppercafle) 

Returns the image associated with Item as defined in Text_IO.Enumeration_IO. The Text_IO 
definition states that given an enumeration literal, it will output the value of the enumeration 
literal (either an identifier or a character literal). The character case parameter is ignored for 
character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more that one parameter. The parameter Item must be an enumeration value. The image of an 
enumeration value is the corresponding identifier, which may have character case and return 
string width specified. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. If the Width specified is larger than the image of 
Item, the return string b padded with trailing spaces. If the 
Width specified is smaller than the image of Item, the de¬ 
fault b assumed and the image of the enumeration value is 
output completely. Optional 

Uppercase 

An indication of whether the returned string is in uppercase 
characters. In the case of an enumeration type where the 
enumeration literab are character literals, Uppercase b ig¬ 
nored and the case specified by the type definition is taken. 
If no preference b specified, the default (true) is assumed. 
Optional 


3-22 


REF-1347N-Vl.l(U/68) © 1989 TdeSoft 


31JUI89 






LRM ANNOTATIONS 


Examples; 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Y is (*a’, *B’, *c’, ’D*); 

Then the following would be true: 

X’Extended-Image(red) = *B 

X’Extended—Iaage(red, 4) » *B 

X’Extended_Jmage(red,2) = *B 

X’Extended-Image (red, 0 , false) 3 *r 

X’Extended Tmage(red,10,false) 3 *r 

Y’Extended-Image(’a’) 3 »’ 

Y ’ Extended-Image(’B’) = *’ 

Y’Extended -Image(’a 1 ,6) ~ *’ 

Y’Extended Jmage(*a’,0,true) 3 ■ 1 


■RED* 
■BED ’ 
■RED* 
■red* 

■red 
> >* 

■ *B” 

■ » 


■ ’a’ * 


'Extended—V alue 


Usage: 

X’Extended—'Value (Item) 

Returns the image associated with Item as defined in Text-IO.Enumeration-IO. The Text-IO 
definition states that it reads an enumeration value from the beginning of the given string and 
returns the value of the enumeration literal that corresponds to the sequence input. (LRM 
14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 


3UUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3- 





TeleGen2 Reference Information for UNDC/88K Hosts 


Parameter Descriptions: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of X. Required 


Examples: 

Suppose the following type were declared: 

type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended-Value("red") = red 

X’Extended-Value(" green") = green 

X’Extended-Value(" Purple") = purple 
X’Extended_Value(* GreEn ") * green 

’Extended-Width 

Usage: 

X’Ext ended—Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. This attribute 
yields the maximum image length over all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function returns the width of the largest (width) 
enumeration literal in the enumeration type specified by X. 

Examples: 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Z is (XI, X12, X123, X1234); 

Then the following would be true: 

X’ExtendecLWidth *6 ~ "purple" 

Z ’Extended-Width =5 ~”Xl£S4" 


3-24 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 




LRM ANNOTATIONS 


3.8.2.2.3. Floating Point Attributes 
’Extended-Image 


Usage; 

X , Extended_Image(Item,Fore r Aft r Exp,Base,Based) 

Returns the image associated with Item as defined in Text_IO.Fioat_IO. The Text_IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13, 14.3.8:15) 

Item must be a Real value. The resulting string is without underlines or trailing spaces. 
Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required. 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-l) is assumed. If based 
notation is specified, the trailing is included in Aft. Op¬ 

tional 

Exp 

The minimum number of digits in the exponent. The ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base that the image is to be displayed in. If no base is 
specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


31JUL89 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


3-25 






TeleGen2 Reference Information for UNIX/68K Hosts 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended.,Inage (5.0) 

X’Extended .Image(5.0,1) 

X’Extended-Image(-5.0,1) 

X’Extended_Image(5.0,2,0) 

X’Extended_Image(5.0,2,0,0) 

X’Extended-Image(5.0,2,0,0,2) 

X’Extended—Image(5.0,2,0,0,2,True) 

X ’Extended-Image(5.0,2,2,3,2,True) 


" 5.0000E+00" 
*5.0000E+00 B 
B -5.0000E+00 B 
B 5.0E+00" 

B 5.0" 

"101.0" ■ 
"2#101.0# B 
"2#1.1#E+02 B 


’Extended—Value 


Usage: 

X’Extended—V alue(ltem) 

Returns the value associated with Item as defined in Text_IO.Float_IO. The Text-IO definition 
states that it skips any leading zeros, then reads a plus or minus sign if present then reads the 
string according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
oarameter. The actual parameter Item must be of predefined type string. Any leading or 
■ '.iiing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Con3traint_Error is raised. 


Parameter Descriptions: 


Item 


A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended—Value(*5.0*) =5.0 

X ’Extended-Value (*0.5E1 *) = 5.0 

X’Extended_Value( B 2#1.0ip2") =5.0 


3-26 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 






LRM ANNOTATIONS 


Extended—Digits 
Usage; 

X’Extended_Digita(Base) 

Returns the number of digits using base in the mantissa of model numbers of the subtype X. 


Parameter Descriptions: 


Base 

The base that the subtype is defined in. If no base is 


specified, the default (10) is assumed. Optional 


Examples; 

Suppose the following type were declared: 

type X is digits 5 range <10.0 .. 16.0; 
Then the following would be true: 

X ’ Extended_Digits * = 5 


S.8.2.2.4. Fixed Point Attributes 

’Extended-Image 

Usage: 

X’Extended_Image(Itexa,Fore,Aft,Exp,Base,Ba8ed) 

Returns the image associated with Item as defined in Text_IC.Fixed_IO. The Text_IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13,14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more than one parameter. The parameter Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


REF-1347N-V 1.1(U/08) © 1989 TeleSoft 


31JUL89 


3-27 






TeleGen2 Reference Information for UNDC/68K Hosts 


Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-1) is assumed. If 
based notation is specified, the trailing is included in 

Aft. Optional 

Exp 

The minimum number of digits in the exponent; the ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the defat'It (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 


Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.0; 


Then the following would be true: 

X ’ Ext ended_Image (5.0) 

X’Extended ,Image(5.0,1) 

X *Extended-Image(-5.0,1) 

X’Exteuded ..Image (5.0,2,0) 

X’ExtendedLIoage(5.0,2,0,0) 

X’Exterdsd_Image(5.0,2,0,0,2) 

X * ExtendecLIaage (5.0,2,0,0,2 ,.True) 
X’Extended-Jnage(5.0,2,2,3,2,True) 


• 5.00E+00* 
•5.00E+00* 
■-5.00E+00* 

• 5.0E+00* 

• 5.0* 
* 101 . 0 * 
* 2 # 101 . 0 #* 
*2#l.l#E+02" 


3-28 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 







LR-M ANNOTATIONS 


’Extended—V alue 
Usage: 

X , Extended_Vaine(Image) 

Returns the value associated with Item as defined in Text_IO.Fixed_IO. The Text_IO definition 
states that it skips any leading zeros, reads a plus or minus sign if present, then reads the string 
according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.S:9, 14.3.3:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint_Error is raised. 

Parameter Descriptions: 


I Image I Parameter of the predefined type string. The type of the re- 

I_ | tur ned value is the base type of the input string. Required, 

Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range .10.0 .. 17.0; 

Then the following would be true: 

X’Extended_Value( , 5.0*) = 5.0 

X ’Extended—Yalue(*0.5E1 *) - 5.0 

X ’Extended-Value ("2#1.01#E2 " ) = 5.0 

’Extended-Fore . ... 

Usage: *' .* 

X’Extesded—1Fore(Baee,Based) 

* , • 

Returns the minimum number of characters required for the integer part of the based 
representation of X. 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3>29 


31JTJL89 




TeleGen2 Reference Information for UNIX/08K Hosts 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.U .. 17.1; 

Then the following would be true: 

X’Extended_Fore = 3 

X’Extended_Fore(2) = 6 

’Extended-Aft 
Usage: 

X’Extended-Aft (Base3ased) 

Returns the minimum number of characters required for the fractional part of the based 
representation of X. 

Parameter Descriptions; 


-- "- 10 " 

» 10001 " 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’ExtendedAft =1 - " l " from 0.1 

X’ExtendecLAft(2) =4 - "0001" from 2#0.0001§ 


3-30 


REF-I347N-V 1.1 (U/68) © 1989 TeieSoft 


31JUL89 







LRM ANNOTATIONS 


3.8.3. Package System. The current specification of package System is provided below, 
package Systea is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System-Name : constant naae := TeleGen2; 

Storage-Unit : constant := 8; 

Memory—Size : constant := (2 ** 31) -1; 

-- System*Dependent Named Numbers: 

— See Table S~2 for the values for attributes of 
— types Float and Lanq^Float 

Min_Int : constant := -(2 ** 31); 

Max—Int : constant := (2 •» 31) -1; 

Max—Digits : constant ;a IS; 

Max-Mantissa : constant :» 31; 

Pine-Delta : constant 1.0 / (2 ** Max-Mantissa); 

Tick : constant :* 10.OB-3; 

-- Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 63; 

Max-Qbject-Size : constant Max. Int; 

Max-Record-Count : constant := Max-Int; 

Max-Text-IQ-Count : constant := Max—Int -1; 

Max-Text-IQ-Field : constant := 1000; 

-private 
• • • • • 
end Systea; 


31JUL89 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-31 



777? 


APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_I!)2 except 
for the last character. 


$BIG_ID2 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_TD1 except 
for the last character. 


199 * ’A’ * '2' 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $B!G tru except 


mo * 'A' •' ’3' *99 



Name and Meaning 


v*lu-» 


for a character near the middle. 
$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_TD3 except 
for a character near the middle. 


$BIG_IBTJiIT 

in integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$8IG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRIMG2 
yields the image of BIG_TD1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG STRING1 yields the image of 
BIG.IDl. 

$BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

, literal whose value is 
TEXT_I0.COUNT'LAST. 

SDEFAULT _HEM_SIZE 

An integer literal whose value 
is SYSTEM.MEKORY_SIZE. 

$default_storj;nit 

An integer literal whose value 
is SYSTEM.STORAGE WIT. 


\r \o * *v :• • i' 




135 * *0’ a, "fioo 


'”* -A 100 * 'A' 


-••• & * ' a ' a 


130 * ' ’ 


2_147_483_«46 


2147433647 


3 



Name and ’leaning 


Value 


$DEFAULTJ5YS_NAME 

The walue of the constant 
SYSTEM. SYSTEM JtJffiS. 

SDELTAJ50C 

A real literal whose value is 
SYSTEM.FINEJ3EL7A. 

SFIELO.LAST 

A universal integer 

literal whose value is 
TEXT.IO.FIELD'LAST. 

SFIXEDJNAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT FLOAT, or 

LONG_FLOAT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE*LAST 
and DURATION*LAST or any value 
in the range of DURATION. 

$GREATER_THANJ)URATION_BASE_LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

SHIGHJPRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

SILLEGAL.EXTERNAL.FILEJJAMEl 

An external file name which 
contains invalid characters. 

$ILLEGALJ5XTERKAL_FTLE_NAnE2 

An external file name which 
is too long. 


TELEGEM2 

2#? .0SE-31 

1000 

NO_SUCHJTYPE 

MOjSUCHJTFE 

100J300.0 

131_073.0 

63 

3ADCHAR*’/*! 

/NONAME/DIRECTORY 



Name and Meaning 


*'alue 


$INTEGER_FIRST 

A universal integer literal 

whose value is INTEGER *"TRST. 

$IHTEGER_LAST 

A universal integer literal 

whose value is INTEGER * L AST. 

$INTEGERJ.ASTJ>LUS_1 

A universal integer literal 

whose value is INTEGER’LAST + 1. 

$LESSJTHAN_DURATIOM 

A universal real literal that 
lies between DURATION’BASE’FIRST 
and DURATION’FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION^BASE_?IRST 

A universal real literal that is 
less than DURATION*BASE’FIRST. 

$LOVJ>RIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSAJDOC 

An integer literal whose value 
is SYSTEM.MAXJ1ANTTSSA. 

$MAXJDIGITS 

Maximum digits supported for 
floating-point types. 

$HAX_INJLEN 

Maximum input line length 
permitted by the implementation. 

$1!AX_THT 

A universal integer literal 
whose value is SYSTEM.HAX_IMT. 

$MAX_IHT_FLUS_t 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


-32768 

*"767 

3276P 

- 100 _ 000.0 

-131_O7?.0 

n 

31 

15 

200 

2147487647 

7 . 147 48? 6 









Marne and Meaning 


value 


$HAX_LEN_INTJBASEDJjITERAL ”2:" 4 195 * ’O’ 4 "11:" 

A universal integer based 
literal whose value is 2311# 
with enough leading zeroes in 
the mantissa to be MAX_INJjEN 
long. 

$HAXJLENJ>EAL_8ASED_LI7EP.AL "16:" 4 193 * *n* A "F.S:" 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$HAX_$TRINGJLITERAL A 198 * ‘A* 4 MM 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT -2147-33648 

A universal integer literal 
whose value is SYSTEM.MINJlNT. 

5MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME NO_SUCH_TYPEJVAILABLE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORTJLOAT, SHORT INTEGER, 

LONG_FLOAT, or. LONG ^INTEGER. 

$NAHEJ,IST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$MEGJJASED_INT 16IFFFFFFFEI 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of •'he representation 
for SYSTEM.MRX^TMT. 









?*ST PARAMETERS 


Marne and Meaning 
$BEVJiEK_SIZE 

An integer literal whose ”*lue 
is a permitted argument for 
pragma MEMORY SIZE, other than 
$DEFAULTJ'fEMJSIZ2. If there is 
no other value, then use 
$DEFAULTJ-!EM_SIZE. 

$MEV_STORJ.TTTIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE UNIT, other than 
$DEFAUIiT_STOR_UHIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJMIT. 

$NEV_SYS_HAME 

A value of the type SYSTEM.NAME, 
other than $DEFAUITJ5YS_MAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IK OUT’ 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

2147483647 


TELEGEN2 

32 


0.01 






APPEKDIX D 


WITHDRAW TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string ”— TOP OF PAGE. 

63" of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 
follows the pragma, and it is this that must appear at the top 
of the page. 

b. A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum si 2 » 'line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative {line 31). 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGIHG- 
JSFJTHEJJUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object’s size 
be no greater than 10 although its subtype's size w*s specified 
to be 40 (line 137). 






"TTrfJW !'-U TESTS 


g. CD2R63A. .D, CD2A66A..D, CD2A73A..D, CP2A76A..D [16 tests] These 
tests wrongly attempt to check the sire of objects of a derived 
type (for which a 'SIZE length clause is given) by rassing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problematic by the -G9 ARG. 

h. ("D2A31G, CU2A83G, C132A84H 4 ", 4 <W 510 [5 r^gts] These tests 

assume that dependent tasks win *r-> , .nriate while the -^ain pro¬ 
gram executes a loop that simply tests t 0 r task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 36 & 96, 86 & 96, and 58, resp.). 

i. CD2B15C 4 CD7205C These tests expect that a ’STORAGS^STZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. CD2D11B This test gives a SHALL representation clause for a 

derived fixed-point type (at line 30) that defines a set of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must bn representable values of the 
parent type. 

k. CD50073 This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303). 

l. ED7004B, ED7005C t 0, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEH pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEH.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEH.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD72048 These tests use the ’SIZE length clause and 
attribute, whose interpretation is considered oroblematic by 
the VG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task’s 
activation as though it were like the specification of storage 
for a collection. 

p. CE2107I This test requires that objects of two similar scalar 
types be distinguished when read from a file—n^TAjtRROR is 










"TTHTRA-N TESTS 


expected to be raised by an attempt to read one object as of 
the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid, (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_ ? jIUE & 
END_OF_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STAHDARD_INPUT (lines 103, 
107, 118, 132, & 136). 

s. CE3411B This test requires that a text file’s column number be 

set to COUNT'LAST in order to check that LAYOUT_ERROR is raised 
by a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 



APPENDIX " 


COMPILER AND LINKER OPTIONS 


References and page numbers in this appendix 
consistent with compiler documentation and not with 
report. 


are 

this 






COMPILATION TOOLS 


2. COMPILATION TOOLS 

This chapter discusses the commands to invoke the TeieGen2 components that are 
associated with the process of compilation. The components are the compiler (invoked by the 
a da command: see Section 2.1) and the linker (invoked by the aid command: see Section 2.2). 

Optimization is part of the compilation process as well. In the TeieGen2 documentation 
set. however, optimization is discussed separately from compilation. In this volume, the 
commands associated with optimization (ada - 0 ; aopt) are discussed in the u Other Tools” 
chapter. (One exception is the Option Summary table below, where aopt options are included for 
comparison.) 

Table 2-1 summarizes the options that are used by the compilation tools. Note that several 
options are common to the commands shown. 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-1 





TeleGen2 Command Summary for UNIX-Based Cross Compilers 


Table 2-1. Compilation Tools'Option Summary 


Option 

Command 

ada 

aid 

aopt 

-l(ibfile 

X 

X 

X 

-t(emplib 

mm 

X 

X 

— V(space_size 

B 

X 

X 

-v(erbose 

■ X 

X 

X 

—additional-options 


X 


-B(ase 


X 


-b(ind_only 

X 

X 


-C(ontext 

X 



-c(pu_type 

X 

X 

X 

— 

X 

X 


-E(rror_abort 

El 



-e(rrors_only 

mm 



-F(ile_only_errs 

X 



-f(ormat 


X 


-G(raph 

X 


X 

-g(enerate_jofm 


X 


-I(nline 

X 


«• 

> 1 

-i(nhibit 

X 


mm 

-k(eep 

X 


B 

-L(ist 

X 



-M(ap 

— 

X 


-m(ain 

B 

1 


-N(ame 


I 

X 

-0(ptimize 

X 


X 

-o(utputJoad 


X 


-S* 

X 


X 

G -s(oftware_float 

X 

X 

X 

-T(raceback 


X 


-ulpdateJib 

X 



-X(ception-snow 

1 



-x(ecution .profile 

!B 

B 

■ 

-Y and -v 


X 



The functionality of the - S option of ada and the -S option of a/d it lomewhat different. Refer to the text. 


INTR.O-1459N-V 1.1 (UNIX-C) © 1989 TeleSoft 


04SEP89 






































COMPILATION TOOLS 


2.1. The Ada Compiler (“ada”) 

The TeleGen2 Ada Compiler is invoked by the ada command. Unless you specify otherwise, 
the front end, middle pass, and code generator are executed each time the compiler is invoked. 

Before you can compile, you must (1) make sure you have access to TeleCen2, (2) create a 
library file, and (3) create a sublibrary. These steps were explained in the Getting Started section 
of the Overview. We suggest you review that section, and then compile, link, and execute the 
sample program as indicated before you attempt to compile other programs. 

This section focuses specifically on command-level information relating to compilation, that 
is. on invoking the compiler and using the various options to control the compilation process. 
Details on the TeieGen2 compilation process and guidelines for using the compiler most 
effectively are in the Compiler chapter of the User Guide volume. (You might want to look at 
Figure 3-1 in that volume now, to give you insight into the TeleGen2 compilation process and to 
see how the options mentioned in this Command Summary volume relate to the actual 
compilation process.) 

The syntax of the command to invoke the Ada compiler is: 


ada {<“common_option”>} {<option>} <input_spec> 


where: 


<“common_option”> 

None or more of the following set of options that are com¬ 
mon to many TeleGen2 commands: 

-l(ibfile or -t(emplib 

-V(space_size 

-v(erbose 

These options were discussed in Chapter 1. 

<option> .. 

None or more of the compiler-specific options discussed 
below. 

<input_spec> 

The Ada source file(s) to be compiled. It may be: 

* One or more Ada source files, for example: 

/user/john/’example 

Prog_A.text 
ciosrc/cajc_mem.ada 
calcio.ada myprog.ada 
’'.ada 

* A file containing names of files to be compiled. Such a 
file must have the extension u .ilf\ You can find de¬ 
tails for using input-list files in the User Guide portion 
of your TeleGen2 documentation set. 

■ A combination of the above. 


Please note that the compiler defaults are set for your convenience. In most cases you will 
not need to use additional options: a simple ‘‘ada >:input_spec>** is sufficient. However, options 


04SEP89 


INTR0-1459N-V1.1(UNIX-C) © 1989 TeleSoft 


2-3 








TeleGen2 Command Summary for UNDC-Based Cross Compilers 


are included to provide added flexibility. You can, for example, have the compiler quickly check 
the source for syntax and semantic errors but not produce object code (-e(rrors_only) or you can 
compile, bind, and link an main program with a single compiler invocation (-m(ain). Other 
options are provided for other purposes. 

The options available with the ada command, and the relationships among them, are 
illustrated in the following figure. Remember that each of the options listed is identified by a 
dash followed by a single letter (e.g., “-e"). The parenthesis and the characters following the 
option are for descriptive purposes only; they are not part of the option. 



-C(ontext 1 
I 

-E(rror_abort 999 
I 

-m(ain <unit:« 

Z -s(oftware_float 



t (1) <k*y> for - 0 -. refer to «ep(. (2) <key> for i or c i i» the default. (2) <key> for -i: a or certain combination* of 

lac. 


2-4 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


CMS EPS 9 





compilation tools 


3 


The options available with the ada command are summ<arized in Table 2*2. The default 
situation .(that is. what happens if the option is not used) is explained in the middle column. 
Each option is described in the paragraphs that follow the table. 


Table 2-2. Summary of Compiler Options 


Option 

Default 

Discussed 
in Section 

Common options: 

-l(ibfile <libname> 

Use liblst.alb as the library file. 

m 

-t(emplib <subiib...> 

None 

Kita 

-V(space_size <value> 

Set size to 2000 Kbytes. 

1 

-v(erbose 

Do not output progress messages. 

lB39i 

-b(ind_only 

Bind and link. 

■ ■ 

-c(pu_type <vaiue> 

Consider CPU type to be MC68020. 

I 'iffl 

-d(ebug 

Do not include debug information in 

IIb 

-E(rror_abort <value> 

object code, (-d sets -k(eep.) 

Abort compilation after 999 errors. 

2.1.4 

-e(rrors_only 

Run middle pass and code generator, 

2.1.3 

-i(nhibit <key>f 

not just front end. 

Do not suppress run-time checks, source 

2 .1.6 

-k(eep 

line references, or subprogram name 
information in object. 

Discard intermediate representations of 

2.1.7 

-m(ain <unit> 

secondary units. 

Do not produce executable code 

2 .1.8 

-0(ptimize <:key>t 

(binder/linker not executed). 

Do not optimize code. 

2.1.9 

c ~s(oftware_float 

Use hardware floating-point support. 

2 .1.10 

-u(pdatejib <key>f 

Do not update library when errors are 

2 .1.11 

-x(ecution_profile 

found (multi-unit compilations). 

Do not generate execution-profile code. 

2 .1.12 

Listing options: 

-C(ontext <value> 

Include 1 line of context with error 

2.1.13.1 

-L(ist 

message. 

Do not generate a source-error listing. 

2.1.13.2 

-F(ile_only_errs 

Do not generate an errors-only listing. 

2.1.13.3 

-S(ource_asm 

only. 

Do not generate assembly listing. 

2.1.13.4 


t (1) <k«y> for -O. refer to *»?<■ (2) <key> for -v i or •: » i» the default. (2) <key> for -c • or certain combination! of 
lac. 


2-5 


04SEF89 


INTR0-1459N-VI.I(UNIX-C) © 1989 TeleSoft 
















TeleGen2 Command Summary for UNDC-Based Cross Compilers 


2.1.1. -b(ind_only - Bind without Linking. The -b(ind_only option instructs the 
compiler to not invoke the link phase. This option is useful when you have adapted your own 
linker and want to use the adapted linker instead of the linker provided, —b is valid only when 
the -m(ain option is specified. 

2.1.2. -c(pu_type - Specify the Target Machine. This option specifies the target CPU 
in the MC680X0 family. The format of the option is: 

-c <value> 

where <value> is either 00, 10, or 20, which corresponds to MC68000, MC68010, and MC68020, 
respectively. The default is 20. If the -c option is used, <value> must correspond to your target 
processor, which in turn must correspond to the sublibraries you’ve “installed” in your library 
list. Note: for MC68030 targets, use “20”. 

Refer to “Selecting the Correct Run-Time Sublibrary” in the Overview portion of your 
TeleGen2 documentation set for details on selecting the correct sublibraries for your 
configuration. Remember that not all subiibraries are provided on all TeleGen2 systems. Refer 
to the Programming Guide chapter of your Reference Information volume for the names of 
sublibraries provided. 

2.1.3. -d(ebug - Generate Debugger Information. The code generator must generate 
special information for any unit that is to be used with the TeleGen2 symbolic debugger. The 
generation of this information is enabled by use of. the -d option. The use of -(/ automatically 
sets the -k(eep option. This to make sure that the High Form, Low Form, and debugger 
information for secondary units are not deleted. 

To see if a unit has been compiled with the -d(ebug option, use the als command with the 
-X(tended option. Debugger information exists for the unit if the "dbg_info” attribute appears 
in the listing for that unit. The default situation is that no debugger information is produced. 

Performance note. While the compilation time overhead generated by the use of -d(ebug is 
minimal, retaining this optional information in the Ada library increases the space overhead. 

2.1.4. -E(rror^abort - Set an Error Count for Aborting Compilation. The compiler 
maintains separate counts of all syntactic errors, semantic errors, and warning messages detected 
by the front end during a compilation. 

A large number of errors generally indicates that errors in statements appearing earlier in 
the unit have “cascaded” through the rest of the code. A classic example is an error occurring in 
a statement that declares a type. This causes subsequent declarations that use the type to be in 
error, which further causes all statements using the declared objects to be in error. In such a 
situation, only the first error message is useful. Aborting the compilation at an early stage is 
therefore often to your advantage; the -E option allows you to do it. 

The format of the option is: 

-E < value > 

where <value> is the number of errors or warnings allowed. The default value is 999. The 
minimum value is 1. Caution: If you do not use the -E option, it is possible to have 999 
warning messages plus 999 syntax errors plus 999 semantic errors without aborting compilation, 
since each type of error is counted separately. 


2-6 


INTRO-1459N-V l.i (UNDC-C) © 1989 TeleSoft 


04SEP89 



COMPILATION TOOLS 


2.1 j>. -e(rrors_only - Check Source But Don’t Generate Code. This option instructs 
the compiler to perform syntactic and semantic analysis of the source program without 
generating Low Form and object code. That is, it calls the front end only, not the middle pass 
and code generator. (This means, of course, that only front end errors are detected and that only 
the High Form intermediates are generated.) This option is typically used during early code 
development where execution is not required and speed of compilation is important. 

Note: Although High Form intermediates are generated with the -e option, these intermediates 
are deleted at the end of compilation. This means that the library is not updated. 

The -e option cannot be used with -S(ource_asm. since the latter requires the generation of 
object code. If —e is not used (the default situation), the source is compiled to object code (if no 
errors are found). The — e option is also incompatible with — k(eep. -d(ebug, -0(ptimize. and 
other options that require processing beyond the front end phase of compilation. 

2.1.6. -i(nhibit - Suppress Checks and Souree Information. The -i(nhibit option 
allows you to suppress, within the generated object code, certain run-time checks, source line 
references, and subprogram name information. 

The Ada language requires a wide variety of run-time checks to ensure the validity of 
operations. For example, arithmetic overflow checks are required on all numeric operations, and 
range checks are required on all assignment statements that could result in an illegal value being 
assigned to a variable. While these checks are vital during development and are an important 
asset of the language, they introduce a substantial overhead. This overhead may be prohibitive 
in time-critical applications. 

Although the Ada language provides pragma Suppress to selectively suppress classes of 
checks, using the pragma requires you to modify the Ada source. The -i(nhibit option provides 
an alternative mechanism. 

The compiler by default stores source line and subprogram name information in the object 
code. This information is used to display a source level traceback when an unhandled exception 
propagates to the outer level of a program; it is particularly valuable during development, since it 
provides a direct indication of the source line at which the exception occurs and the subprogram 
calling chain that led to the line generating the exception. 

The inclusion of source line information in the object code, however, introduces an overhead 
of 6 bytes for each line of source that causes code to be generated. Thus, a 1000-line package 
may have up to 6000 bytes of source line information. For one compilation unit, the extra 
overhead (in bytes) for subprogram name information is the total length of all subprogram names 
in the unit (including middle pass-generated subprograms), plus the length of the compilation 
unit name. For space-critical applications, this extra space may be unacceptable; but it can be 
suppressed with the —i{nhibit option. When source line information is suppressed, the traceback 
indicates the offset of the object code at which the exception occurs instead of the source line 
number. When subprogram name information is suppressed, the traceback indicates the offsets of 
the subprogram calls in the calling chain instead of the subprogram names. (For more 
information on the traceback function, refer to the Programming Guide chapter in your 
Reference Information volume.) 

The formal of the -i(nhibit option is: 

-i <suboption>{<suboption>} 


04SEP89 


INTRO-I459N-VI.l(UNIX-C) © 1989 TeleSoft 






TeleGen2 Command Summary for UNIX-Based Cross Compilers 


where <suboption> is one or more of the single-letter suboptions listed below. Combinations of 
suboptions are possible. When more than one suboption is used, the suboptions appear together 
with no separators. For example. u -i Inc”. 


lUine_infoj 

Suppress source line information in object code. 

njameJnfoj 

Suppress subprogram name information in object 
code. 

ci hecks j 

Suppress run-time checks — elaboration, overflow, 
storage access, discriminant, division,' index, length, 
and range checks. 

alii] 

Suppress source line information, subprogram name 
information, and run-time checks. In other words, a 
(“inhibit all) is equivalent to Inc. 


As an example of use, the command... 
ada —v -i 1c my_iUe.ada 

...inhibits the generation of source line information and runtime checks in the object code of the 
units b my^ple.ada. 

2.1.7. -k(eep — Retain Intermediate Forms. As a default, the compiler deletes the High 
Form and Low Form intermediate representations of all compiled secondary units from the 
working sublibrary. Deletion of these intermediate forms can significantly decrease the size of 
sublibraries *“ typically 50% to 80% for multi-unit programs. On the other hand, some of the 
information within the intermediate forms may be required later. For example. High Form is 
required if the unit is to be referenced by the Ada Cross-Referencer (air). In addition, 
information required by the debugger and the Global Optimizer must be saved if these utilities 
are used. For these reasons, the -k option is provided with the ada command. The -k option: 

* Must be used if the compiled unit is to be optimized later with aopt: otherwise, aopt 
issues an error message and the optimizer aborts. 

> Should be used if the unit is to be cross-referenced later; otherwise, an error message is 
issued when the Ada Cross-Referencer attempts to cross-reference that unit. 

* Need not be used with -d(ebug, since —is set automatically whenever -dis used. 

To verify that a unit has been compiled with the -k(eep option (has not been “squeezed"’), 
use the ala command with the -X(tended option. A listing will be generated that shows whether 
the intermediate forms for the unit exist. A unit has been compiled with -k(eep if the attributes 
high_form and lowjbrm appear in the listing for that unit. 

2.1.8. -m(ain - Compile a Main Program. This option tells the compiler that the unit 
specified with the option is to be used as a main program. After all files named in the input 
specification have been compiled, the compiler invokes the Ada prelinker (the binder program) 
and the linker to bind and link the program with its extended family. An “execute form” (EF) 
load module named <unit>.ef is left in the current directory (unless otherwise specified by user 
option). The binder and linker may also be invoked via the aid command. 


2-8 


INTRO-1459N-Vi.i(UNIX-C) © 1989 TeleSoft 


04SEP89 














COMPILATION TOOLS 


The format of the option is: 

—m <Tmit> 

where <unit> is the name of the main unit for the If the main unit has already been 

compiled, it does not have to be in the input fi' .v .ver , the body of the main unit, if 
previously compiled, must be present in the current weeing sublibrary. 

Note: Options specific to the linker (invoked via old) may be specified on the ada command line 
when the -m option is used. With -m, the compiler will call aid when compilation is complete, 
passing to it old- specific options specified with the ada command. For example... 

ada —v —m welcome —T 2 -o new.ef —a vmel33.opt sample.ada 

...instructs the compiler to compile the Ada source file, sample.ada, which contains the main 
program unit Welcome. After the file has been compiled, the compiler calls the Ada linker, 
passing to it the - T , -o, and -a options with their respective arguments. (The -a option tells 
the linker to use the commands specified in the options file t rmelSS.opt to direct the linking 
process; an options file is required for linking.) The linker produces an “execute form” load 
module of of the unit, placing it in file new.ef as requested by the linker’s - o option. 

2.1.9. -0(ptixnixe - Optimize Object Code. This option causes the compiler to invoke 
the global optimizer to optimize the Low Form generated by the middle pass for the unit being 
•.'jmpiled. The code generator takes the optimized Low Form as input and produces more 
emcient object code. The format of this option is: 

-O <key> 

where <key> is at least one of the optimizer suboption keys discussed in the Global Optimizer 
chapter. Please refer to that chapter for all information regarding the use of the optimizer. The 
chapter discusses using the optimizer as a standalone tool for collections of compiled but 
unoptimized units and using the -0{ptimize option with the ada command. The latter topic 
includes a definition of the -Optimize suboption key values plus a presentation of two other ada 
options (-G(raph and -I(nIine_Jist, not shown on the ada chart) that may be used in 
conjunction with the -0(ptimize option. Note: We strongly recommend that you do not 
attempt to use the optimizer until the code being compiled has been fully debugged and tested. 

2.1.10. -s(oftware_float - Use Software Floating-Point Support. This option may 
not be available with your TeleGen2 system: please consult the Overview portion to see if it is 
provided. The Ada linker selects hardware floating-point support by default. If you do not have 
hardware floating point support or if you wish to generate code compatible with such machines, 
use the -s option. In addition: If you use the -s option, the library file you use for compilation 
must contain the name of one of the software floating point run-time sublibraries, for example, 
s20rt.sub. Refer to the Library Manager chapter in your User Guide volume for information on 
the various sublibraries supplied with TeleGen2. 

2.1.11. -u(pdate_lib - Update the Working Sublibrary. The -u(pdate_lib option tells 
the compiler when to update the library. It is most useful for compiling multiple source files. 
The format of the option is: 

-a <key> 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-9 




TeleGen2 Command Summary for UNIX-Based Cross Compilers 


where <key> is either “s” (source) or “i” (invocation). 

i “i” tells the compiler to update the working sublibrary after all files submitted in that 
invocation of ada have compiled successfully. If an error is encountered, the library is 
not updated, even for source files that compile successfully. In addition, all remaining 
source files will be compiled for syntactic and semantic errors only. Implications: (1) 
If an error exists in any source file you submit, the library will not be updated, even if 
all other files are error free. (2) Compilation is faster, since the library is updated 
only once, at the end of compilation. 

s (This is the default; it is equivalent to not using the -u(pdate_lib option at all.) “s" 
tells the compiler to update the library after all units within a single source file 
compile successfully. If the compiler encounters an error in any unit within a source 
file, all changes to the working sublibrary for the erroneous unit and for all other units 
in the file are discarded. However, library updates for units in previous or remaining 
source files are unaffected. Implications: (1) You can submit files containing possible 
errors and still have units in other files compile successfully into the library. (2) 
Compilation is slightly slower, since the library is updated once for each file. 

Therefore: 

Use “u s” (or no -u(pdate option) when: 

You’re not sure all units will compile successfully. 

Compilation speed is not especially important. 

c “ 

Use “u i” when: 

You are reasonably certain your files will compile successfully. 

Fast compilation is important. 

2.1.12. -x(ecution_profile - Generate Profile Information. The -x(ecution_profiie 
option uses the code generation phase of compilation to place special information in the generated 
code that can be used to obtain a “profile" of a program's execution. This information is 
generated by a facility known as “the profiler.” Refer to your User Guide volume for information 
on how to use the profiler to obtain execution timing and subprogram call information for a 
program. 

Important : If any code in a program has been compiled with the -x(ecution_profile option, 

that option must also be used with aid when the program is bound and linked. In addition, the 
linker options file must be modified to include the appropriate profiling environment modules, for 
example. cnvlSS-profile. For more information on which environment module to include in the 
linker options file, refer to Chapter 4. 

2.1.13. Listing Options. The listing options specify the content and format of listings 
generated by the compiler. Assembly code listings of the generated code can also be generated. 

2.1.13.1. -C(ontext - Include Source Lines Around the Error. When an error 
message is sent to stderr, it is helpful to include the lines of the source program that surround the 
line containing the error. These lines provide a context for the error in the source program and 
help to clarify the nature of the error. The - C option controls the number of source lines that 
surround the the error. 


2*10 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 




COMPILATION TOOLS 


The format of the option is: 

-C <value> 

where <value> is the number of source context lines output for each error. The default for 
<value> is 1. This parameter specifies the total number of lines output for each error (including 
the source line that contains the error). The first context line is the one immediately before the 
line in error; other context lines are distributed before and after the line in error. Let’s say that 
Irialprog.ada. which consists of the following text... 

package P is 

type T1 is range 1..10; 
type T2 is digits 1; 

type Arr is array (1..2) of integer; type T3 is new Arr; -- OK. 
package Inner is 

type Ini is new Tl; -- ERROR: Tl DERIVED, 

type In2 is new T2; -- ERROR: T2 DERIVED, 

type In3 is new T3; -- ERROR: T3 DERIVED, 

type Inarr is new Arr; -- OK. 

end Inner; 

end P; 

...were compiled as follows: 

ada -e -C 2 trialprog.ada 

'The -e option here is used for error checking and -C(ontext is set to 2 to display two lines of 
source.) The output produced would look like this: 



04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-11 










TeleGen2 Command Summary for UNIX-Based Cross Compilers 


2.1.13.2. -L(ist - Generate a Source Listing. This option instructs the compiler to 
output a listing of the source being compiled, interspersed with error information (if any). The 
listing is output to <file..spec>.l, where <fiie_spec> is the name of the source file (minus the 
extension). If <file_spec>.l already exists, it is overwritten. 

If input to the ada command is an input-list file (<file_spec>.ilf), a separate listing file is 
generated for each source file listed in the input file. Each resulting listing file has the same name 
as the parent file, except that the extension k \l” is appended.' Errors are interspersed with the 
listing. If you do not use -L (the default situation), errors are sent to stdoat only; no listing is 
produced. -L is incompatible with -F. 

2.1.13.3. -F(ile_only_errs - Put Only Errors in Listing File. This option is used to 
produce a listing containing only the errors generated during compilation; source is not included. 
The output is sent to <file_spec>.l. -F is incompatible with -L. 

2.1.13.4. -S(ouree_aam - Generate a Source/Assembly Listing. This option instructs 
the compiler to generate an assembly listing and send it to <unit>.src, where <unit> is the name 
of the unit in the user-supplied source file. The listing consists of assembly code intermixed with 
source code as comments. If input to the ada command is an input-list file (<file_spec>.ilf), a 
separate assembly listing file is generated for each unit contained in each source file listed in the 
input file. If -Sis not used (the default situation), an assembly listing is not generated. 


2-12 


INTB.O-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP89 






COMPILATION TOOLS 


2.2. The Ada Linker (“aid”) 

The TeleGen2 Ada compiler produces object code from Ada source code and stores it in the 
Ada sublibrary. The TeleGen2 Ada linker takes Ada object code and non-Ada imported object 
code from Ada subiibraries and creates either linked output modules or partially linked object 
form modules (OFMs) that can be used as input to subsequent linking operations. 

The linker operates in two phases: the binding phase and the linking phase. The binding 
phase “binds” together all of the necessary Ada units and creates elaboration code that is stored 
in the sublibrary. The linking phase combines the elaboration code, the appropriate Ada object 
modules, and any OFM, environment, or imported non- ‘ ’ objects specified in the user’s linker 
options file to produce either an executable load module or a new OFM. 

The linker is invoked with the old command; it can also be invoked with the -m(ain option 
of the ada command. In the latter case the compiler passes appropriate options to the linker, to 
direct its operation. 

In the simplest case, old takes two arguments - the name of the main unit of the Ada 
program structure that is to be linked and the name of a linker option file - and produces one 
output file, the complete load module produced by the linking process. The load module is placed 
in the directory from which aid was. executed, under the name of the main unit used as the 
argument to aid. For example, the command 

aid —a vmelSS.opt main 

links the object module? of all the units in the extended family of unit Main, including any user- 
specified modules in the linker options file vmelSS.opL The resulting load module will be named 
“main.ef’, which is in the TeleGen2 proprietary output format that can be used as input to the 
downloader (adwn command). Important: when using aid, the body of the main unit to be 
iinkH must be in the working sublibrary. 

Xh general syntax of the aid command is: 


aid {<‘*common_option”>} {<option>} <uxiit> 


where: 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-13 








TeleGen2 Command Summary for UNIX-Based Cross Compilers 


<“common_option M > 

None or more of the following set of options that are 
common to many TeieGen2 commands: 

—l(ibfile or -t(emplib 
—V(space_size 
—v(erbose 

These options were discussed in Chapter 1. 

< option > 

None or more of the options discussed ii> the following 
sections. 

<unit> 

The name of the main unit of the Ada program to be 
linked. If the name of the unit is not provided on the 
command line, the unit is specified with the INPUT op¬ 
tion in a linker options file. For information on linker 
options files, refer to the User Guide portion of your 
TeieGen2 documentation set. 


The options available with the aid command and the relationships among them are illustrated 
below. 


2-14 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


04SEP39 











COMPILATION TOOLS 


aid 


-l(ibfile <libname> 


-t(empHb <soblib>{,...} 


-V(space_jsize 2000 

I 

•-v(erbose 

I 

—a(dditional_options <file> 

I 

-B(ase 0 

I 

-b(ind_only 

I 

-c(pu_type 20 

I 

-d(ebug 

I 

-f(ormat <keyf> 


-g(enerate_ofm < lib-entity > 


-o(utput_load <file> 
_I • 


-M(ap {<subopciont>} 

I 

-S(“asm_Iisting” 

I 

a -s(oftware_8oat 

I 

-T(raceback 15 

I 

-x(ecution_profiIe 

I 

-X(ception._show 

I 

— Y 4096 |by«w-loBjj 
1 

—y 256 !byt«*-na»«r»l| 


<unic> 


f Notes 

<key>: S(record or E(xecuce_form or 
I{EEE (E is the default) 

Cuboption.?: i(mage. e(xeluded, and/or I(ocals 

Linker directives are communicated to the linker as options on the command line or as 
options entered via an options file. Command-line options are useful for controlling options that 
you are likely to change often. The default option settings are designed to allow for the simplest 
and most convenient use of the linker. Command-line options are discussed below. 


04SEF89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-15 






TeleGen2 Command Summary for UNIX-Based Cross Compilers 


Options^file options are for specifying more complicated linker options, such as the 
specification of memory locations for specific portions of the code or data for a program. 
Options-file options are discussed in the TeleGen2 User Guide. 

2.2.1. -a(dditional_options — Include Additional Options. The -a option specifies that 
the linker is to process additional options obtained from a linker options file. The format is: 

-a <file> 

where <file> is a valid file specification and represents a file containing linker options. The 
format of the options in the opcions file is described in the Linker chapter of the TeleGen2 User 
Guide. If no extension is present, the linker uses the default extension “.opt”. 

2.2.2. -B(ase — Start at Specified Location. This option is used to specify the start 
location of the linked output. The linker will locate non-absolute control sections in consecutive 
memory locations. All control sections are word aligned on the MC680X0. The format is: 

—B <address> 

where <address> is a valid MC680X0 address. The address can be specified as a decimal, 
hexadecimal (%Xhex), or a hexadecimal-based literal in Ada syntax (16#hex#). The default is 
hexadecimal (%Xhex). 

If you specify neither the -B option nor an options file LOCATE command and the link is 
complete, the linker uses the default location value of address 0. 

The -B option governs the location for any code, constant, or data section not covered by 
an options file LOCATE. This option does not supercede any LOCATE options. -B(ase is 
equivalent to a LOCATE option with no control section or entity name specified. 

2.2.3. -b(ind_oniy - Bind without Linking. This option instructs the compiler to not 
invoke the link phase, in other words, to generate elaboration code only. This option is 
particularly useful when you have adapted your own linker and want to use it in place of the 
TeleGen2 linker. 

2.2.4. -c(pu_type - Select Processor Type. This option specifies the CPU of the target 
on which the program is to run. The format of the option is: 

-c <value> 

where <value> is 00. 10, or 20. representing MC68000. MC68010, or MC68020 (use 20 for the 
MC68030). The default is 20. 

If you use the -c(pu_type option when compiling a main program, you must use the option 
when linking. In addition; the library list you use for compiling and linking must specify the 
correct target-specific run-time subiibraries. For information on the various sublibraries provided 
with TeleGen2. refer to “Sublibraries Provided with TeleGen2” in Chapter 2 of the User Guide. 

2.2.5. -d(ebug - Produce Debug Symbol Information. This option controls the 
generation of debug symbol information for use with the Source-Level Debugger. A program that 
is to be run with the debugger must be linked with the -d(ebug option. If supported by the 
chosen load module format. -d(ebug may also cause symbol information to be output in the load 


2-16 


INTRO-1459N-Vl.l{UNIX-C) © 1989 TeleSoft 


04SEP89 




COMPILATION TOOLS 


module. The option is ignored if -g(enerate_ofm is selected. In the standard configuration of the . 
TeieGen2 system, none of the outputs support symbol information in the load module. 

The default situation is that no debug information is produced. Subprograms are not 
excluded when -d(ebug is specified. 

2.2.6. -o(utput_load - Specify Load Module Output. This option is used primarily to 
specify the file name for the load module output created by the linker. The format is: 

—o <file> 

where <file> is the file specification for the output. If <file> does not include an extension, the 
linker will append an extension appropriate to the chosen load module format (.sr or .e/, for 
S(records or E(xecute_iorm). 

The -o option may be used with the -a(dditional_options option, which directs the linker 
to use the options in an options file. Any output file specification present in the options file is 
superceded by the specification on the command line. If -o is used with — g(enerate_ofm. both 
formats will be produced. 

2.2.7. — format — Specify an Output Format. The —f(ormac option specifies the format 
of the output module. The format of the option is: 

-f <iey> 

where <key> is E (for Execute Form) or S (for S-Record) or I (for IEEE). <key> is required. 

If —/Is not used. E(xecuteJorm is produced. E is used to specify that the load module output of 
the linker is to be Execute Form. Execute Form is the default output format generated by the 
'inker and is suitable for use as input to the downloader/receiver. S(records is used to specify 
that the output of the linker should be Motorola S-records. I(EEE is used to specify tht the 
output of the linker is to be IEEE-695 modules. This output format is suitable for use as input to 
Motorola-compatible simulators and monitors. 

2.2.8. -g(enerate.ofm - Specify OFM Output. This option specifies that one output of 
the linker is to be linked OF. Linked OF is suitable for incomplete modules and can be used 
subsequently as input to the Ada linker. The linked OF is put into the library as- an object form 
module ( l *ofm”) entity. The format of the option is: 

-g <lib .entity> 

where <lib_entity> is the name of a library entity. NOTE: The object form module of 
<main_unit> is a library entity separate from that of the specification or body of the unit. 

If an object form module library entity with the specified name already exists in the current 
working sublibrary, that entity is deleted and replaced by the new output. 

The -g option may be used with the -a(dditional_options option. Any format or name 
present in the options file is superceded by the format and name specified on the command line. 
You may request an OF module (via -g) instead of the default Execute Form or in addition to a 
load module format. To obtain both an OF module and a load module, use both the -g and -o 
options. 


04SEPS9 


INTRO-1459N-Vl.l(UNDC-C) © 1989 TeleSoft 


2-17 





TeieGen2 Command Summary for UNIX-Based Cross Compilers 


2.2.9. -M(ap - Produce Link Map Listing. This option is used to request and control a 
link map listing. The (ink map listing is sent to: 

<nnit>.map 

where <unit> is the name of the main program unit (if present), the name specified as the 
command line parameter, or the name specified as the first INPUT option, modified as necessary 
to form a valid UNIX file specification. The format of the link map listing file is described in the 
Linker chapter of the TeleGen2 User Guide. The format of the option is: 

-M { <suboption>} 

where <suboption> is one or more of the following: 


1 

(image) Generates a memory image listing in addi¬ 
tion to the map listing. The linker writes the image 
•listing to the same file as the link map listing. This 
is the only optional section of the listing. 

B 

(excluded) Inserts a list of excluded subprograms 
into the link map listing. 

i 

(locals) Includes local symbols in the link map sym¬ 
bol listing. 


If more than one of the above suboptions is used, they must appear together, with no spaces. For 
example: 

—M iel 

Note: a -M(ap option specific 1 the command line supercedes a MAP command in an options 
file. 

2.2.10. -S(“a8ra_listing” - Produce as Assembly Listing. The -5 option is used to 
output an assembly listing from the elaboration process. The output is put in a file, 
<file>.obm.src, where <file> is the name of the main unit being linked. (The file extension may 
be different on your system.) 

2.2.11. -s(oftware_float - Use Software Floating-Point Support. This option may 
m.t be available on your TcleGen2 system. Please consult the Overview portion of this volume to 
see / it is provided. The Ada linker currently selects hardware floating-point support by default. 
This default situation is provided for users of systems with an arithmetic coprocessor. If you do 
not have hardware floating point support or if you wish to generate code compatible with such 
machines, use the -s option. In addition: if you use the -s option, the library file you use for 
compiling and linking must contain the name of the software floating point run-time sublibrary. 
sSOrt.sub. Refer to the Library Manager chapter in your User Guide volume for more 
information on the run-time sublibrary. 

2.2.12. -T(raceback - Set Levels for Tracing Exceptions. When a run-time exception 
occurs (and is not handled by an exception handler), the name and line number of the unit where 
the exception occurred is displayed along with a recursive history of the units which called that 
unit. (See the '‘Exception Handling" section in the Programming Guide chapter of your 


2-18 


INTRO-14S9N-Vl.l(UNIX-C) © 1989 TeieSoft 


04SEP89 










COMPILATION TOOLS 


Reference Information volume for a more complete explanation of exception reports.) The -T 
option allows you to set the number of levels in this recursive history. For example, the 
command 

aid —T 3 main 

specifies that traceback histories will be three levels deep. The default value for this option is 15. 

When an exception occurs, the run-time support system stores the history in a preallocated 
block of memory. Since the size of this block is determined by the - T option, setting this value 
to a large number can introduce objectionable overhead in deeply nested, time-critical code. You 
may wish to make this value smaller for well-tested programs. 

2.2.13. -x(ecution_profile — Bind and Link for Profiling. This option is used for units 
that have been compiled with the -z option. Use of -z with ada causes the code generator to 
include, in the object, special code that will later be used to provide a profile of the program’s 
execution. 

If -z is used with ado, it must be used vith aid as well. The -z option of aild instructs the 
linker to link in the profiling run-time support routines and generate a subprogram dictionary, 
profile.dic , for the program. The dictionary is a text file containing the l.ames and addresses of 
all subprograms in the program. The dictionary can be used to produce a listing showing how 
the program executes. 

To link a program with profiling, you need to instruct the linker to use the profiling 
environment module provided for your target board. This environment module will perform the 
run-time profiling for your application. For the tmelSSa board, this module is envlSS^profilr. it 
must be specified by using an INPUT/OFM command in the linker options file. 

The run-time support routines record the profiling data in memory during program 
execution and then write the data to a host file, profile.out. via the serial download line as part of 
program termination. The files (profile.die and profile.out) can then be used to produce a listing 
showing how the program executes. 

Note : Profiling environments for targets other than the vmelSSa board are also provided, and 
need to be specified in your linker options file if you are linking for profiling. Sample linker option 
files, one for each target, are provided in the $TELEGEN2/examples directory. You can edit the 
appropriate file (< target'.- .opt), to include profiling support for your target, and use the edited file 
when linking. 

Refer to the Ada Profiler chapter in your User Guide volume for a full discussion of the 
profiler. 

2.2.14. Tasking Options. The following aid options are binding options used for task 
execution. They are therefore useful only for linking programs that contain tasking code. 

2.2.14.1. -X(ception_ahow - Report Unhandled Exceptions. By default, unhandled 
exceptions that occur in tasks are not reported: instead, the task terminates silently. The -.Y 
option allows you to specify that such exceptions are to be reported. The output is similar to 
that displayed when an unhandled exception occurs in a main program. 


04SEP89 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


2-19 




TeleG«n2 Command Summary for UNIX-Based Cross Compilers 


2.2.14.2. — Y and — y - Alter Stack Size. In the absence of a representation specification 
for task storage_size. the run time will allocate 4096 bytes of storage for each executing task. . 
You can change the amount of space allocated for tasking by using the — Y and — y options. 

—Y specifies the size of the basic task stack. The format of the option is: 

-Y <value> 

where <value> is the size of the task stack in 32-bit (long_integer) bytes. The default is 4096. 

—y specifies the stack-guard size. The stack-guard space is the amount of additional space 
allocated per task to accommodate interrupts and exception-handling operations. The format of 
the option is: 

-y <value> 

where <value> is the size of the stack-guard size in 16-bit (natural) bytes. The value given must 
be greater than the task-stack size. The default is 256 bytes; this is the amount allocated unless 
otherwise specified. 

A representation specification for task storage size overrides a value supplied with either 
option. 


2-20 


INTRO-1459N-Vl.l(UNIX-C) © 1989 TeleSoft 


04SEP89 



