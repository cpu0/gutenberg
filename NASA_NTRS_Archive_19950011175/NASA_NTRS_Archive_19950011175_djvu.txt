N95- 17590 


- r •; 

f ;■ i •= \ 

f i 6 s V* 


A New Communication Protocol Family for a Distributed f 

Spacecraft Control System 

Andrea Baldi, ESA/ESOC/FCSD 
Marco Pace, Vitrociset Space Division 


Abstract 

In this paper we describe the concepts 
behind and architecture of a communication 
protocol family, which was designed to fulfil 
the communication requirements of ESOC’s 
new distributed spacecraft control system 
SCOS II. 

A distributed spacecraft control system 
needs a data delivery subsystem to be used for 
telemetry (TLM) distribution, telecommand 
(TLC) dispatch and inter-application commu- 
nication, characterised by the following prop- 
erties. reliability, so that any operational 
workstation is guaranteed to receive the data it 
needs to accomplish its role; efficiency, so that 
the telemetry distribution, even for missions 
with high telemetry rates, does not cause a deg- 
radation of the overall control system perform- 
ance, scalability, so that the network is not the 
bottleneck both in terms of bandwidth and 
reconfiguration; flexibility, so that it can be effi- 
ciently used in many different situations. 

The new protocol family which satisfies the 
above requirements is built on top of widely 
used communication protocols (UDP and 
TCP), provides reliable point-to-point and 
broadcast communication (UDP+) and is 
implemented in C++. 

Reliability is achieved using a retransmis- 


Andrea Baldi (abaldi@esoc.bitnet) works within the Flight Con- 
trol Systems Department at the European Space Operations 
Centre (ESOC), Robert Bosch Strasse 5, D-64293 Darmstadt, 
Germany. Marco Pace (mpace@esoc.bitnet) works for Vitrociset 
Space Division, Via Salaria 1027, 1-00138 Rome, Italy. The work 
described in this article was carried out at ESOC under a con- 
tract with the European Space Agency. 


sion mechanism based on a sequence number- 
ing scheme. Such a scheme allows to have 
cost-effective performances compared to the 
traditional protocols, because retransmission is 
only triggered by applications which explicitly 
need reliability. This flexibility enables appli- 
cations with different profiles to take advantage 
of the available protocols, so that the best rate 
between speed and reliability can be achieved 
case by case. 

Introduction and Context 

SCOS II is a generic mission control sys- 
tem, providing a collection of buildings blocks 
upon which a custom control system can be 
implemented with moderate effort (ref. [1]). 
Basic services are provided by the Distributed 
Access Service layer (DAS) responsible for 
distribution, local caching, and retrieval of 
mission information (e.g. TLM and TLC) over 
the network. An Application layer (APP) pro- 
vides basic building blocks for implementing 
mission applications. 

A SCOS II system is distributed and is com- 
posed by several Unix workstations connected 
on a local area network. Each workstation or 
node has a role with associated communication 
requirements determined by the mission con- 
figuration. The role of a node and consequently 
its. communication requirements are deter- 
mined by the applications running on it. The 
following classification is useful to understand 
the different roles a node might play: 

• server, a node that provides services, usu- 
ally data to be consumed by clients. 


1187 



pmm&m PAGf BUNK WOT BLMSD 



• replica : a node that provides services, like a 
server, but is only available when the pri- 
mary server is down. 

• client: a node that makes use of the services 
provided by servers or replicas, usually data 
to be consumed. 

Servers, replicas and clients can be classified as 
Reliable ; in case of a server or replica Reliable 
means that the node supports reliable delivery 
of data; in case of a client it means that it 
requires reliable delivery of data. 

A workstation may play more than one role 
at the same time (e.g. server and client, replica 
and client), therefore the communication 
requirements may change over time. Commu- 
nication and information distribution is 
achieved using the services provided by the 
Inter Process Communication layer (IPC) 
which is part of the DAS. 

The IPC services are used by the DAS when 
communication is required, but also by the 
APP layer directly as shown in Figure- 1 . 



The IPC layer has an important role because 
it supports the bulk of the information 
exchange among the different system compo- 
nents. 

A typical SCOS II configuration (See Fig- 
ure-2) will be composed by a number of serv- 
ers, clients and replica nodes. The number of 
nodes may change dynamically according to 
the mission phase and configuration, to contin- 
gency conditions, and to the number of interac- 
tive users connected to the system. 

TLM data is received at a central node and 
distributed to all the nodes by means of the 


IPC. TLC are dispatched using the IPC to a 
central node for uplink. 



In a such context, where applications have 
different communication requirements, classi- 
cal protocols like UDP and TCP are not able to 
cope efficiently with all the possible situations. 
The IPC tries to fill in the gap existing between 
UDP, a fast but not reliable protocol, and TCP, 
a reliable but not efficient protocol, defining 
the UDP+ protocol. 

The protocol family available to SCOS II 
users extends the IP family and provides: 

1. a reliable broadcast service (UDP+), with 
performance not too far from UDP. 

2. an integrated environment where applica- 
tions with different communication require- 
ments can coexist without imposing 
overhead to each other. 

3. the possibility to select the protocol that best 
fits the application’s communication 
requirements. 

4. compatibility with the already existing IP 
protocols. 

5. support for fast local communication 
(FIFO). 

Requirements 

As introduced before, the IPC layer has to 
cope with many different situations and it is 


1188 





clear that no unique protocol can be designed 
to fulfil all the application requirements simul- 
taneously. A protocol family in fact best satis- 
fies multiple and sometimes conflicting needs. 
The following considerations describe the 
trade-offs made in order to satisfy as many 
requirements as possible. 

Communication Schemes 

Allowing different communication schemes 
to coexist in an integrated environment is fun- 
damental for achieving flexibility so that appli- 
cations can use different approaches to data 
distribution such as point-to-point and broad- 
cast. 

The IPC layer supports all these schemes 
providing a single unified abstraction called 
Channel available for any supported protocol. 
A Channel can be seen as an endpoint for com- 
munication which an application can use to 
send or receive data. 

Protocol Scalability 

Scalability is another key requirement and 
the IPC layer fully scales with respect to the 
communication data volume by means of the 
broadcast communication schema. Moreover it 
tries to avoid situations where the unreliability 
of the used IP services, which triggers packet 
retransmission requests, might cause a network 
congestion. 

The retransmission algorithm already tries 
to optimize the policy of lost packets retrans- 
mission using the most appropriate communi- 
cation scheme; broadcast is used for instance in 
the case it is detected that a lost packet is 
requested by several applications. The algo- 
rithm is tunable and it is driven by application 
Hints and information piggy-backed into 
retransmission requests. 

Hints are used to instruct a server about the 
application reliability requirements. They can 
be used to avoid or force retransmission of data 
case by case as well as determine the number 
of attempts the IPC layer carries out before giv- 
ing up the retransmission. 


Protocol Reliability and Speed 

The reliability of the protocol together with 
the speed necessary to cope with a high TLM 
delivery rate is a primary issue for SCOS II 
applications. Reliability and speed are tightly 
related and an effort to meet both the require- 
ments is made. 

Within the IP family, TCP is a fully reliable 
protocol where the speed is inversely propor- 
tional to the network load, while UDP is a fast 
one with a reliability inversely proportional to 
the network load. 

UDP+ stays in between, is highly tunable 
and tries to fill in the gap existing between TCP 
and UDP (See Figure-3). 



Figure-3 Speed vs Reliability Diagram 


Transparent Reliable Data Delivery 

Giving the user the responsibility of retrans- 
mitting or receiving data lost due to a network 
problem is not acceptable for client applica- 
tions. The recovery of lost data is managed 
automatically by the IPC, without forcing the 
application to use any recovery policy. 

Asynchronous Communication 

When applications are data driven an asyn- 
chronous communication mechanism is very 
useful. 

The IPC layer provides the concept of a 
Notify Channel : a channel marked as Notify 
does not require the attention of the applica- 
tion; the application only needs to define the 
handler to be called on data arrivals. 

The IPC automatically gives control to the 


1189 




To keep this risk at a minimum a piggy- 
backed acknowledgement of the already 
received packets is used in the retransmission 
requests. It is important to note that for broad- 
cast communication the piggy-backed informa- 
tion provides just an indication and there is no 
guarantee that a packet will not be requested in 
the future. 

Under normal operation, when a packet is 
received the client protocol verifies that its 
sequence number is correct and then it delivers 
it to the application. The following anomalous 
situations are recognised and handled by the 
client side of the protocol: 

• loss of packets', when a gap in the sequence 
is detected the retransmission of the missing 
packets is requested. In the meantime out of 
order packets can be received; they are dis- 
carded or stored in the client buffer accord- 
ing to their sequence number. 

• duplication of packets : duplicated packet 
are always discarded. 

• delay in packet delivery : if a delayed packet 
is received before the retransmitted one, it is 
returned immediately to the application, 
otherwise it is discarded. 


Protocol Family Design 

This section provides the description of the 
architecture of the IPC layer. The architecture 
described is a simplified one showing the main 
classes relevant to the problem domain. Some 
implementation classes have been omitted for 
the sake of simplicity and clarity. 

The description uses a Rumbaugh Object 
Diagram (ref. [6]) where classes have been 
grouped into 3 subjects (Data Handling, Trans- 
port Mechanism and Statistics ) according to 
the responsibilities they fulfil in the problem 
domain, as shown in Figure-5. 

Data Handling Subject 

Data handling groups together the classes 
dealing with the SCOS II transfer unit (STU). 
They implement respectively the header and 
the data part of an STU, the fragmentation and 
reassembly of STUs and the storage of STUs 
for the client and server side of the reliable pro- 
tocol. 

The StuHeader class specifies the informa- 
tion needed by the IPC layer to perform the 
transport of the packets on the network, the 
sequence number used by the UDP+ protocol, 


Transport Subject 


Data Handling Subject 


Flfo 


+send<STU> 

+rcv<STU> 


loChan 


StuHeader 

#localAddress 

#remoteAddress 


#<headerFie!ds> 


+get<headerField> j 
+set<tieaderField> j 



Frags2Stu j 



+fragment 


A 


TcpChan 


+send<STU> 

+rcv<STU> 

+sendStream 

+rcvStream 


UdpChan 


#broadcastAddr 


+send<STU> 

+broadcast<STU> 

+rcv<STU> 


Statistics 

Subject 




Stu2Frag» 


+compact 


TcpCIlentChan 


+connect 


TcpServChan 


+accept 


i 


m 


UdpPlusServChan 


-purgeHBuffer 

-retransmit<STU> 


UdpPlusCllentChan 


-requestLost<STU> 



Figure-5 IPC Object Oriented Model 


1192 
































the fragmentation information and client hints. 
Services for getting and setting the value of the 
header fields are used by the IPC internally, but 
can also be used by applications to manipulate 
fields containing application-defined values. 
Those fields allow the STU to be tagged as 
belonging to a specified category. 

The StuData class contains the application 
data, of whatever type. Such data are appended 
to the header and sent over the network when a 
send operation is performed. 

The fragmentation layer (. Frags2Stu and 
Stu2 Frags) takes care of the splitting of large 
packets into smaller ones and of their reassem- 
bly at the destination. In this way the IPC layer 
is able to support the transmission of packets of 
virtually any size. 

The HistoryBuffer and ClientBuffer classes 
implement data structures used by the UDP+ 
transport classes for the storage and retrieval of 
STUs. In particular, ClientBuffer is used to 
temporary store packets which cannot be deliv- 
ered to the application because the retransmis- 
sion of a lost packet is in progress; the 
HistoryBuffer is used to store transmitted pack- 
ets which might be requested when a packet is 
lost. 

Transport Mechanism Subject 

Transport mechanism groups together the 
classes which deal with data delivery for the 
IPC layer protocol family. With the exception 
of the Fifo class introduced for fast local com- 
munication all the classes support remote com- 
munication. 

The Channel class defines attributes and 
services which are common to all the sup- 
ported communication schemes in the IP 
domain. Channel specializes into two branches 
respectively responsible for a TCP-based and 
an UDP-based communication. New IP based 
protocols can be derived from the Channel 
class specialising it at the most suitable level of 
the hierarchy. 

Inheriting from the TcpChan class, two spe- 
cific classes are defined to model the client and 
server side of a connection based communica- 


tion. Both of them provide services for sending 
and receiving STUs and byte streams: the Tcp- 
Client adds connection establishment capabil- 
ity and the TcpServer adds connection 
acceptance capability. 

Also inheriting from Channel , the class 
UdpChan provides services for receiving and 
sending STUs, both with point-to-point and 
broadcast connectionless transmission. 

Classes UdpPlusServChan and UdpPlusCli- 
entChan , reliable components of the IPC layer, 
are derived from the UdpChan class. In princi- 
ple, they could have been grouped together in a 
single UdpPlusChan class because they pro- 
vide the same interface as UdpChan. The rea- 
sons for such separation are: 

• typically applications behave either as cli- 
ents or as servers, not as both. 

• the resulting implementation is less com- 
plex and easier to maintain. 

• the resulting application overhead is 
reduced because applications will only 
include the minimal amount of data struc- 
tures instantiated by the relevant classes, 
being such data structures different in the 
two cases. 

Class Fifo, at last, supports fast local communi- 
cation of STUs through a UNIX FIFO, main- 
taining a similar interface to the one provided 
by the remote communication classes. 

Statistics Subject 

Statistics groups the classes responsible for 
gathering information on volume of data sent 
and received on any UDP based channel. They 
have been introduced to tune and debug the 
internals of the IPC layer, since they provide a 
complete snapshot of the behaviour of the pro- 
tocol including all the information on lost and 
retransmitted STUs. 

Moreover, the Statistics classes have been 
used to implement a performance monitoring 
tool which reports on data and packet rate. Sta- 
tistics are also available to an application for 
any possible usage it envisages. 


1193 



Building Applications 

The IPC layer offers application writers a 
flexible solution for the exchange of data. 
Applications can in fact exchange STUs using 
the protocol that best fits their communication 
requirements. Moreover applications using one 
of the UDP based protocols can select the relia- 
bility level as they like. It is important to notice 
that applications can be configured to use any 
of the available UDP based protocols, and still 
be able to communicate with each other. 

Data transmitted by an application using a 
reliable server channel ( U dpPlusServChan ) 
can be received by an application using a non 
reliable channel ( UdpChan ) with the only dif- 
ference that lost packets will not be detected 
and consequently not requested. 

Reliable clients ( UdpPlusClientChan ) can 
also receive data sent over a non reliable chan- 
nel, but in this case the protocol does not per- 
form any check on the sequence number, and 
just delivers the data it receives to the applica- 
tion. 

The following list shows some of the SCOS 
II applications or system components together 
with their communication requirements (see 
also Figure-2): 

• TLM Receiver and Broadcaster: it receives 
the telemetry from the ground station and 
broadcasts it to the system. It is a reliable 
server and satisfies retransmission requests 
coming from reliable clients. 

• History File Archiver (HFA ): it archives the 
received telemetry and retrieves it on appli- 
cation demand. As a consequence that all 
the telemetry coming from the ground sta- 
tion need to be archived, the HFA is a relia- 
ble client. At the same time, it satisfies 
retrieval requests on the network, so it is a 
reliable server. 

• TLM Cache : it receives real time telemetry 
and makes it locally available to the applica- 
tions. It can be configured either as a relia- 
ble or a non reliable client according to the 
role the node has in the system. 


Conclusion 

The use of the IPC layer for more than one 
year in the SCOSII system has shown that the 
initial objectives have been achieved: 

• the retransmission approach together with 
the almost full reliability of the network 
hardware make the degree of reliability high 
enough to guarantee that any node receives 
the data it needs to accomplish its role. 

• UDP+ efficiency compares favourably with 
UDP and definitely well with TCP. The 
overhead introduced by the retransmission 
mechanism is a fraction of the benefits 
obtained, especially when considering relia- 
ble broadcast. The results collected using 
the IPC statistics are summarized in Figure - 
6 where the data rates achieved are shown. 
Such figures may vary, however, depending 
on the dynamic tuning the applications per- 
form on the IPC using hints. 


IPC Statistics 

KHts/sec 



Ftotood 


I B LDP+ Large FKfe H UCPf Small Pkts H LCP Large Fkts 
| 1 UCPSmaiFtts B TCP 

Figure-6 Protocols Statistics for a Typical 
Mission Configuration Consisting 
of 20 Nodes. 

• the protocol scalability guarantees that add- 
ing new client workstations does not require 
any reconfiguration and does not impose 
unacceptable network overhead. 

• the protocol family has shown to be flexible 
enough to satisfy different communication 
requirements for a wide range of applica- 
tions that need to exchange the same data 


1194 




using different protocols. This is achieved 
by the IPC layer through the introduction of 
a common exchange data unit (the STU) 
together with a continuous range of per- 
formances both for point-to-point and 
broadcast communication. It is important to 
note that SCOS II applications can commu- 
nicate even with already existing software 
not supporting a STU based data exchange. 
The IPC layer is now complete and stable in 
the interfaces, although its implementation 
evolves as a result of a continuous life cycle 
which includes analysis of statistics, tuning and 
test. 

New generations of Unix already support 
multiprocessor hardware and the time to make 
the IPC layer fully reentrant is mature as multi- 
threaded SCOS II applications are under devel- 
opment. To have a full coverage of commonly 
used protocols the IPC layer will be augmented 
in the future to support non IP based protocols, 
like Unix datagram, streams and X25. 

References 

[11 K.Keyte. SCOS II - A distributed Architecture for 
Ground System Control - International Symposium 
on Spacecraft Ground Control and Flight Dynam- 
ics SCD1 - Feb. 94 - Sao Jose dos Campos - Brazil. 

[2] M. Frans Kaashoek et al. - An Efficient Reliable 
Broadcast Protocol - Operating System Review- 
Volune 23 Num. 4, October 1989. 

[3] T.A. Joseph and K.B. Birman - Reliable broadcast 
protocols - Lecture Notes of Artie 88, Tromso, 
Norway, July 1988. 

[4] Douglas E.Comer - Internetworking with TCP/IP - 
Vol.I - Prentice Hall. 

[5] W.Richard Stevens - UNIX Network Programming- 
Prentice Hall - 1 990. 

[6] Rumbaugh et al. - Object Oriented Modelling and 
Design - Prentice Hall -1991. 


1195 



