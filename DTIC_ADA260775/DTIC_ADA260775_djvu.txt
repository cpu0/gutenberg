Pubicfipor 
ti M did. «no 
HMdquulMi 

MinigMTwm 

1.AGENC 


AD- Ai260 775 

llWllMIvi ill *" >*«■••• 

\ llllinllll If I VlW '*** ' llmiM or trrf olhor upod of Ihk co 


Form Approvad 
OPM No. 0704-018S 


pom*, nduding th* imo lor l o womin g Mructiono. oovcbing oiMing dm ioucM guhoring and mainuining pia dau 
llmiM or any olhor aapod oi thk colacllon ol Mormalion. including auggactiona lor raducing ihs burdan. to Wasl«n|^ 
via Highway, SUla 1204. Aifnglon. VA 22202-4302. and to lha Odica ct hdormation and Ragulalory Altairs. Ollica ol 


... iLMave Blank) 


12. REPORT DATE 


3 REPORT TYPE AND DATES COVERED 

Final: 03 Nov 92 


4. TITLE AND SUBTITLE 

Validation Summary Report; TeleSoft, TeieGen2 Ada Cross Development System 
Version 4.1.1 for Sun-4 to eMIPS, Sun-4/690 Workstation (Host) to IDT7RS301 
System (IDTR3000/R3010 bare machine)(Target). 92102911.11295 


6. ALrTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

lABG-VSR 111 


9 SPONSORING/MONITORING AGENCY NAME{S) AND ADDRESS(E 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 



10. SPONSORINGAilONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

TeleSoft, TeleGen2 Ada Cross Development System Version 4.1.1 for Sun-4 to eMIPS, Sun-4/690 Workstation (Host) to 
IDT7RS301 System (IDTR3000/R3010 bare machine)(Target), ACVC 1.11. 


14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


10. SECURITY CLASSIFICATION 

UNCLASSIFED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298. (Rev 2-89) 
Prescribed by ANSI Std 239-128 














AVF Control Number; XABG-VSR 111 
November 03, 1992 


Ada COMPILER 

VALIDATION SDNMARY REPORT: 
Certificate Muaber: 92102911.11295 
TeleSoft 

TaleOen2''^ Ada Cross Development System 
Version 4.1.1 for Sun-4 to eNIPS 
Sun-4/690 Workstation Host 
ZDT7RS301 System Target 
(IDTR3000/R3010 bare machine) 


Accesion For 


NTJS CRA&I 
OTIC TAB 
Ui .announced 
Justification 


□ 


By... 

Dist ibution/ 


Availability Codes 


Dist 


m 


Avail and/or 
Special 


Dxic 




SD 5 


Prepared By: 
lABG mbH, Abt. ITE 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 


O 









Certificate Inforeation 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on October 29, 1992. 


Coapiler Naee and Version: TeleOen2^ Ada Cross Development System 

for Sun-4 to eMIPS, Version 4.1.1 

Host Computer System: Sun Microsystems Sun-4/690 

under St:nOS Release 4.1.2 


Target Computer System: XDT7RS301 System (IDTR3000/3010, 

bare machine) 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
92102911.11295 is awarded to TeleSoft. This certificate 
expires 24 months after ANSI approval of ANSI/M1L-STD-1815B. 


This report has been reviewed and is approved. 


lABG, Abt. ITS 
Michael Tonndorf 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 



Ada ValidMn^n Organization 

DirMtoI^( C^puter & Software Engineering Division 
Institute'-for Defense Analyses 
Alexandria VA 22311 



Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 








Declaration Of Conformance 


Customer: 

Certificate Awardee: 

Ada Validation Facility: 

ACVC Version: 

Ada Implementation 

Ada Compiler Name and Version: 

Host Computer System: 

Target Computer System: 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA USA 92121 

TeleSoft 

lABG, Dept. ITE 
W-8012 Ottobrunn 
Germany 

1.11 


Tel©Gen2™ Ada Cross Development 
System for Sun-4 to ©MIPS, 

Version 4,1.1 

Sun Microsystems Sun-4/690 
SunOS Release 4.1.2 

iDT7RS301 System 
{R3000/ R3010 bare machine) 


Declaration: 

I the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/^^L-STD-1815A, 
ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 


/ -■ . ... / 

_ ■ • ■ Date: 

Raymond A. Parra 
TeleSoft 

V. P., General Counsel 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro92]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and comjpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard orher than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 



INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Proarammino Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures . Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User's Guide . 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable teste are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library unite, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of *the class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units ^re not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is exeunined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some teste of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the teste and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 







INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described 
in the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable teste (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version. 

an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Cub^omer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Software that controls the execution of progreuns and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial 
or complete hardware implementations are possible. 

A computer system where the execut . form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro92). 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 02 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

B01B02B 

B01B06A 

AD1B08A 

B02A02A 

CD2A21E 

C02A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

A07006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Conmentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following teste were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






IMPLEMENTATION DEPENDENCIES 


The f'-'' owing 201 tests have floating-point type declarations requiring more 
digits -han SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y 
C35707L..Y 
C35S02L..Z 
C45321L..Y 
C45521L..Z 
C45621L..Z 
C46012L..Z 


(14 tests) 
(14 tests) 
(15 tests) 
(14 tests) 
(15 tests) 
(15 tests) 
(15 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for this 
implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001H 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SHORT_FLOAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a name 
other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this implementation, there 
is no such type. 

C45531M..P (4 tests) and C45532M..P (4 tests) check fixed-point 
operations for types that require a SYSTEM.MAX_MANTISSA of 47 or 
greater; for this implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y checks for a predefined fixed-point type other than DURATION; for 
this implementation, there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

CD1009C uses a representation clause specifying a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


CD2A84A, CD2A84E, CD2A841..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types; this implementation 
does not support such sizes. 


2-2 






IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given combination 
of mode and access method; this implementation supports these operations. 

Test File Operation Mode _ File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL lO 

CE2102F 

CREATE 

INOUT FILE 

DIRECT lO 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL_IO 

CE21020 

RESET 

IN FILE 

SEQUENTIAL_IO 

CE2102P 

OPEN 

OUT FILF 

SEQUENTIAL_IO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL_IO 

CE2102R 

OPEN 

INOUT FILE 

DIRECT lO 

CE2102S 

RESET 

INOUT FILE 

DIRECT lO 

CE2102T 

OPEN 

IN FILE 

DIRECT lO 

CE2102U 

RESET 

IN FILE 

DIRECT lO 

CE2102V 

OPEN 

OUT FILE 

DIRECT lO 

CE2102W 

RESET 

OUT FILE 

DIRECT lO 

CE3102E 

CREATE 

IN FILE 

TEXT lO 

CE3102F 

RESET 

Any Mode 

TEXT lO 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT lO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised when this association is attempted. ~ 

CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 

CE2111D CE2111H CE3111B CE3111D..E CE3114B 

CE3115A 

CE2203A checks that WRITE raises tJSE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This implementation does 
not restrict'file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT_IO. This implementation does not 
restrict file capacity. 

CE3304A checks that USE_ERROR is raised if a call to SET_LINE_LENGTH or 
SET_PAGE_LENGTH specifies a value that is inappropriate for the external 
file. This implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAy0UT_ERR0R when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2-3 





IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 24 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B71001Q BAIOOIA BA2001C BA2001E BA3006A 

BA3006B BA3007B BA3008A BA3008B BA3013A 

C52008B was graded passed by Test Modification as directed by the AVO. This 
test uses a record type with discriminants with defaults; this test also has 
array components whose leng^.h depends on the values of some discriminants of 
type INTEGER. On elaboration of the type declaration, this implementation 
raises NUMERIC ERROR as it attempts to calculate the maximum possible size 
for objects of the type. The AVO ruled that this behavior was acceptable, 
and that the test should be modified to constrain the subtype of the 
discriminants. Line 16 was modified to create a constrained subtype of 
INTEGER, and discriminant specifications in lines 17 and 25 were modified to 
use that subtype; these lines are given below: 

16 SUBTYPE SUBINT IS INTEGER RANGE -128 .. 127? 

17 TYPE REC1(D1,D2 : SUBINT) IS 

25 TYPE R£C2(D1,D2,D3,D4 : SUBINT 0) IS 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a gerieric unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies ma)(es the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC32050 were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 

CD1009A, CD1009I, CD1C03A, C02A21C, CD2A22J, CD2A24A, and CD2A31A..C (3 
tests) use instantiations of the support procedure Length_Check, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. The 
AVO ruled that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instantiations of Length_Check—i.e., the allowed Report.Failed messages 
have the general form: 

- * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 




CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort ia described 
adequately by the information given in the initial pages of this report. 

For information about this Ada implementation system, see: 

TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 92121, USA 
Tel; (619) 457-2700 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Progreunming Language Standard. 


3-1 




PROCESSING INFORMATION 


The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point precision 
that exceeds the implementation's maximum precision (item e; see section 2.2), 
and those that depend on the support of a file system — if none is supported 
(item d). All teste passed, except those that are listed in sections 2.1 and 
2.2 (counted in items b and f, below). 


a) Total Number of Applicable Tests 3788 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 86 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 287 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (atb-ff) 

All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point teste were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A magnetic data cartridge with the customized test suite (see section 1.3) 
was taken on-site by the validation team for processing. The contents of the 
data cartridge were loaded to the host computer using networking facilities. 


After the test files were loaded onto the host computer, the full set of 
teste was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system in two 
parallel streams. The executable images were transferred to two identical 
target computer systems by a serial communications link, and run. The 
results were captured from the host computer system onto a magnetic data 
cartridge. 

Test output, compiler and linker listings, and job logs were captured on a 
magnetic data cartridge and archived at the AVF. The listings examined on¬ 
site by the validation team were also archived. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test are given in the following section, which was supplied by 
the customer. 


3-2 







SUN-4/d^flFS FREVALIDmON 


ATIACHMENTG 


Compiler Option Information 
B TESTS: 

ada -u -O D -q -L <test_name > 


Option 

Description 

•da 

invoke Ada con^iler 

-« 

iq)date library a^ each source 

-OD 

p^orm optiiaizations 

-q 

■tqipreas information messages 

-L 

generate interspersed aource-error listing 

<te8t_name> 

name of Ada source Hie to be coiiq>iled 


Non-B Non-Family TESTS: 

ada -u -O D -q -m <mam_unit> -a <options_file> <test_name> 


Option 

Description 

ada 

invoke Ada conq>iler 

-u 

iqxiate library uher each source 

-OD 

p^orm optimizations 

-q 

siqrpress information messages 

-m 

produce executable code for <main_unit> 

<main_unit> 

name of main Ada con^nlation unit 

•« 

specify linker options file 

<options_jSle> 

name of linker options file 

<test_nanie> 

name of Ada source file to be cosqnled 


Non-B Family TESTS: 

ada -u -O D -q <test_name> 
aid -a <options_file> <mainjunit> 


Option 

Description 

ada 

invdce Ada compiler 

•u 

update library a^ each source 

•OD 

perform optimizations 

-q 

suppress information messages 

<test name> 

name of Ada aource file to be oonq>iled 

aid 

invoke linker 

*« 

qjecify linker options file 

<optiona_file> 

name of linker options file 

<iiigio unit> 

name of main Ada compilation unit 


30SEI92 


Fl«e22 








SUN-4/eMIPS PREVALIDifflON 


ATTACHMENT G 


Compiler Option Information continued 
UNK; 


aid -a <options_file> <maia_unit> 


Option 

Desciiptioa 

aid 

-a 

<options_£le> 

<Qiain_inut> 

invoke Linker 

specify linker options file 

name of linker options file 

name of main Ada compilation unit 


! Linker Options file for as Ada application linked against the phantom. 

I 

TARGET MIPS 
! 

! Defme the phantom to link against. 

j 

Input/OFM/Phantom Phantom 

I 

RegionA4>w*%xA0040000/High»%xA00FFF^ PROGRAM^ALL 

I 

« 

! Place everything here ( implies that bind code will be first ). 

! 

LOCATE/AT- %xA0040000 

I 

! Specify the map details. 

; 

!Map/Local 


30SEm 


page 23 







SUN-4/eMIPS FREVALIDAION 


ATIACHMENTG 


Optimization Lei'd D: 

The optimizer switch ”*0 D” turns on full optimization within the compiler. The 
foUowing list is a set of optimizations performed: 

Removal of umieceaaaiy temporaries 

Emcieat catenation operations 

Null array compariaon 

Optimized conqtatibility check 

Iiqnoved record layout 

Variant record sizes in arrays 

Aggregate literal initialization for composites 

Out transformations 

Initialization ten^lates for qwcial record variants 

Optimal basic block ordering 

^timized usage of expression intermediates 

Direct utilization of scalar targets 

Calculate sizes in storage units 

Optimize overlap setting 

Parameter reordering 

Aiidunetic strength reduction 

Optimized con^msite operations 

Case statement generati<m 

Object code emission 

Full use of addressing modes 

Reach reduction 

Small confKMite values 

Boolean expression reduction 

Optimal subprogram ordering 

s^-open inlininj 

Interprocedural analysis 
Sub|»Ogiam inlinim 
Collection optimization 
Value propagation 
Range analysis and substitution 
Check removal 
Test Pushing 

Control flow and unreachable code eliminatian 
Check test pushing 
Dead code elimiiiatian 
Constant folding 

Common subexpression recognitioo 
Register allocadan 
Reach reductian 
LifetilllB 

Loop invariant code motion 
Strength reduction of loop induction variables 
Loop counter reduction 
Tail recursion elimination 


30SEF92 


Phgc24 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V represents the maximvim input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_1N_LEN 

200 — Value of V 


$BIG_ID1 

(1..V-1 *> 'A', V 

=> '1' ) 

SBIG_ID2 

(1..V-1 => 'A', V 

*> '2') 

$B1G_ID3 

(1..V/2 => 'A') & 

'3' & 


(1..V-1-V/2 »> 

'A' ) 

SB1G_ID4 

(1..V/2 *> 'A') & 

'4' & 


(1..V-1-V/2 *> 

'A' ) 

$BIG_INT__LIT 

(1..V-3 *> '0') & 

"298" 

SBIG_REAL_LIT 

(1..V-5 *> '0') & 

"690.0" 

SBIG_STRING1 

& {1..V/2 -> 'A') & 

SBIG_STRING2 

& (1..V-1-V/2 

* 

V 

> 

$BLANKS 

(1..V-20 «> ' ') 



SMAX LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "11: 


SMAX LEN REAL BASED_LITERAL 

"16;" & (1..V-7 »> '0') & -F.E:- 

SMAX_STRING_LITERAL "CCCCCCC10CCCCCCCC2 0CCCCCCCC3 0CCCCCCCC40 

“ “ CCCCCCCC50CCCCCCCC60CCCCCCCC70CCCCCCCC80 

CCCCCCCC90CCCCCCC100CCCCCCC110CCCCCCC120 
CCCCCCC13OCCCCCCCl4OCCCCCCC15 OCCCCCCC160 
CCCCCCCl7 OCCCCCCC18OCCCCCCC19 OCCCCCCl99" 


The following table lists all of the other macro parameters and their 
respective values. 


A-1 




MACRO PARAMETERS 


Macro Parameter 


Macro Value 


$ACC_SIZE 

SALIGNMENT 

SCOUNT_LAST 

$DEFAULT_MEM_SI2E 

SDEFAULT_STOR_UNIT 

$DEFAULT_SYS_NAME 

$DELTA_DOC 

$ENTRy_ADDRESS 

$ENTRY_ADDRESS1 

SENTRY_ADDRESS2 

SFIELD_LAST 

SFILE_TERMINATOR 

SF1XED_NAME 

$FLOAT_NAME 

Sform_string 

$FORM_STRING2 
SGREATER THAN DURATION 


32 

4 

2_147_483_646 

2147483647 

8 

TELEGEN2 

2#1.0#E-31 

INTERROPTl 

INTERRUPT2 

INTERRUPT3 

1000 

ASCII.EOT 

NO_SUCH_TYPE 

NO_SOCH_TYPE 

•t M 

"CANNOT RESTRICT FILE CAPACITY" 


100_000.0 

$GREATER THAN DURATION BASE_LAST 

l31_073.0 

$GREATER_THAN_FLOAT_BASE_LAST 

3.9E+39 

SGREATER_THAN_FLOAT_SAFE LARGE 

l.OE+38 

SGREATER THAN SHORT_FLOAT SAFE LARGE 

0 . 0 ~ 


SHlGH_PRIORITY 255 

$ILLEGAL_EXTERNAL_FILE_NAME1 

iADCHAR*"/% 

$ILLEGAL_EXTERNAL_FILE_NAME2 

7noname/directory 

$INAPPROPRIATE_LINE LENGTH 

-1 


A-2 




MACRO PARAMETERS 


$INAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.ADA") 

$INCLXn3E_PRAGMA2 PRAGMA INCLUDE ("B28006E1.ADA”) 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

S1NTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

SLESS THAN DURATION_BASE FIRST 

-131_073.0 

$LINE_TERMlNATOR ASCII.CR 

$LOW_PRIORITY 0 

SMACHINE_CODE_STATEMENT 

mci'(addi,rO,rO,rO); 

$MACHINE_CODE_TYPE mci 

SMANTISSA_DOC 31 

$MAX_DIGITS 15 

SMAX^INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

SMIN_INT -2147483648 

$NAME SHORT_SHORT_INTEGER 

$NAKE_LIST TELEGEN2 

SNAME_SPECIFICATIONl /tmp/X2120A 

SNAME_SPECIFICATION2 /tmp/X2120B 

SNAME_SPECIFICATION3 /trop/X3119A 

SNEG_BASED_INT 16#FFFFFFFE# 

$NEW_MEN_SIZE 2147483647 

$NEW_SYS_NAME TELEGEN2 

$PAGE_TERMINATOR ASCII.FF 

SRECORD DEFINITION RECORD NULL; END RECORD; 


A-3 







MACRO PARAMETERS 


$RECORD_NAME NO_SUCH_MACHINE_CODE_TyPE 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 4096 

STICK 0.01 

$VARIABLE_AODRESS ADDRESSl 

$VARIABLE_AOORESSl AODRESS2 

SVARIABLE ADDRESS2 AODRESS3 


A-4 




APPENDIX B 


COMPILATION SYSTEM AND LINKER OPTIONS 


The compiler and linker options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and not to 
this report. 


B-1 




Command Summary 


(Ada Compiler) ada 


2.4. ada (Ada Compiler) 

The ada command invokes the TeleGen2 Ada Compiler. Unless you sf)ecify 
otherwise, the compiler’s front end, middle pass, and code generator are executed 
each time the compiler is invoked. You may, however, invoke the front end only, 
to check for syntax and semantic errors. 

Before you can compile, you must make sure you have access to TeleGen2 and 
have a working sublibrary and libraiy file available. This was explained in the 
“Getting started” section of the Overview. We suggest you review that section, 
and then compile, link, and execute the sample program as indicated before you 
attempt to compile other programs. During compilation, you may invoke the 
optimizer and the linker. 

Compilation errors as well as compiler driver errors (e.g. “file not found”) are 
output to stderr. Informational ou^ut will also be directed to stderr. Banner 
messages such as those as provided by the •v(erbose option are examples of 
informational ou^ut. 

The syntax of the ada command is shown below. 


ada [<optlon>...] <input> 


<optlon> One of the options available with the command. Compiler options 
fall into four categories. 


Librttfy search -l(ibfile, *t(emph'b 


Execution/ou^ut Enable debugging: •d(ebug 

Abort after errors: -E(rror_abort 

Run front end only: .-e(rrors_only 

S^>press checks: •i(nhibit 

Keep source: -K(e^_source 

Keq> intermediates: •k(eep_intermediates 

Conq>0e, then Unk: •m(ain 

Optimize code: -0(ptimize, -G(raph, -I(nline 

Update library for mult4)le files: -u(pdate_invoke 

Include execution profile: -x(ecutionj3rofile 


Listing Output source plus errors: >L(ist 

Output errors: -F(ile_only_errs, -j(oin 

Error context: -QonFext 

Output assembly: -S(“asm_listing” 


CMD-2044N-V1J(SPARCMIPS) 22SEP92 


2-13 








ada (Ada Compiler) 


TeieGen2 for SPARC-MIPS 


Other -q(uiet, -V(space_size, -v(erbose 

<input> The Ada source file(s) to be compiled. It may be: 

• One or more Ada source files, for example: 

/us er/j ohn/ezamp1e 
Prog_A.text 
ciosrc/calc_!ne&. ada 
calcic.ada myprog.ada 
*.ada 

If more than one file is specified, the names must be separated 
by a space. 

• A file containing names of files to be compiled. Such a file 
must have the extension “.ilfeach name in the file must be on 
a sqsarate line. It is generally wise to limit the number of files 
in the input list to 10 — 20 if all files contain specifications and 
to no more than 5 if all contain bodies (assuming one unit per 
file). You can find more information on using input-list files in 
the TeleGenl User Guide. 

• A combination of the above. 


Compiler defaults. Compiler defaults are set for your convenience. In most 
cases you will not need to use additional options; a single “ada <input> " is 
sufficient However, options are included to provide added flexibility. You can, 
for example, have the compiler quickly check the source for syntax and semantic 
errors but not produce object code [-e(rrors_only] or you can compile, bind, and 
link a main program with a single compiler invocation [•m(ain]. Other options are 
provided for other purposes. 

The options available with the ada command, and the relationsh^s among them, 
are illustrated in the following figure. 


2*14 


CMD-2044N-V1.1 (SPARC.MIPS) 


22SEP92 





Command Summary 


(Ada Compiler) ada 



-l(ibffle <fae> 


-t(empb'b <subb'b 


•V(space_size 4000 
-v(erbose 




e(rrors_only 


-i(nhibit <suboption >[...] 

I 

-ni(ain <umt> 

__ 1 ‘- 1 

do not optimize ) - 0 (ptinu 2 e <subopuon >[...] 

-G(raph 

I 

-I(nbne_bst <file> 

- \ - ' 

-S(“asm bsting” < suboption > 

“ I 

-u(pdate__invoke 


-x(ecution profile 



Below are some basic examples that show how the command is used. 

1. (No options) The following command compiles the file sornp/e.oda, 
producing object code that is stored in the working sublibrary. 

ada sample.ada 

In this example, the working subbbrary is the first sublibrary Usted in 
liblstalb. No listings are produced, no progress messages are output, no 


CMD-2044N-V1.1(SPARC.M1PS) 22SEP92 


2-15 










ada (Ada Compiler) 


TeleGen2 for SPARC-MIPS 


intermediate forms are retained, and so forth. In other words, it’s the 
simplest example of compilation. 

2. The following command compDes sample.ada as above, but because we 
used the -L option, a listing fUe, sample. I, is output to the working 
directory. The listing file shows the source code, errors (if any), the 
number of lines compiled, plus other information. 

ada -L -v sample.ada 

Progress messages are output during compilation because we used the -v 
option. 

The options available with ada appear below in alphabetical order. 


-C(ontext 

When an error message is sent to stderr, it is helpful to see the lines of the 
source program that surround the line containing the error. These lines 
provide a context for the error in the source program and help to clariiy the 
nature of the error. The -C option contr'^’ ‘ j number of source lines that 
surround the error. The format of tl:: option is 

-C <n> 

where <n> is the rumber of source context lines output for each error. The 
default for <n> is 1. This parameter specifies the total number of lines 
output for each error (including the source line that contains the error). The 
first context line is the one immediately before the line in error; other context 
lines are distributed before and after the line in error. 


•d(ebug 

To use the debugger, you must compile and link with the -d(ebug option. 

This is to make sure diat a link map and debugging information are put in the 
Ada library for use by the debu^er. Using -d(ebug ensures that the 
intermediate forms and debugging information required for debugging are 
not deleted. 

Performance note: 

While the compilation time overhead generated by the use of •d(ebug is 
minimal, retaining this optional information in the Ada library increases 
the space overhead. To see if a unit has been compiled with the •d(ebug 
optioa use the ah command with the •X( tended option. Debugger 
information exists for the unit if the “dbg_info” attribute appears in the 
listing for that unit. 


2-16 


CMD.2044N-VU(SPARC3IIPS) 22SEP92 




Command Summary 


(Ada Compiler) ada 


-E(rror_abort 

The -E(rror_abort option allows you to set the maximum number of errors 
(syntax errors and semantic errors) that the compiler can encounter before it 
aborts. This option can be used with all other compiler options. 

The format of the option is 
-E <n> 

where <n> is the maximum number of errors aUowed (combined counts of 
syntax errors and semantic errors). The default is 999; the minimum is 1. If 
the number of errors becomes too great during a compilation, you may want 
to abort the compilation by typing < Ctrl > -C. 

-e(iTors_only 

The -e(rrors_only option instructs the compiler to perform syntactic and 
semantic analysis of the source program without generating Low Form and 
object code. That is, it calls the front end only, not the middle pass and code 
generator. This means that only front end errors are detected and that only 
the High Form intermediates are generated. Unless you use the 
-k(eep_intermediates option along with -e, the High Form intermediates are 
deleted at the end of compilation; in other words, the library is not updated. 

The -e(rrors_only option is typicaUy used during early code development 
where execution is not required and speed of compilation is in^rtant. Since 
only the front end of the compiler is invoked when -e is used, -e is 
incompatible with ada options that require processing b^ond the front end 
phase of compilation. Such options include, for example, -0(ptimize and 
•d(ebug. If -e is not used (the default situation), the source is conqiiled to 
object code (providing no errors are found). Object code is generated for the 
specification and body and inserted into the working sublibraiy. 


•F(He_only_errs 

The -F option is used to produce a listing containing only the errors 
generated during compilation; source is not included. liie ouqiut is sent to 
<fiie> J, where <file> is the base name of the input file. If input to the ada 
command is an input-list file (< file > .ill), a separate listing file is g^ierated 
for each source file listed in the input file. Each resulting listing file has the 
same name as the parent fOe, except that the extension “.1” is appended. -F 
is incompatible with -L. 

i 

I 

-G(raph 

The -G(raph option is valid only with -0(ptimize. 

This option generates a call graph for the unit being optimized. The graph is 
a file containing a textual representation of the call graph for the unit being 
optimized. For each subprogram, a list is generated that shows every 


CMI>-2044N-Vl.l(SPARCJVfIPS) 22SEP92 


2-17 




ada (Ada Compiler) 


TeieGen2 for SPARC-MIPS 


subprogram called by that subprogram. By default, no graph is generated. 

The graph is output to a file named <unit>.grf, where <unit> is the name of 
the unit being optimized. The structure and interpretation of call graphs is 
addressed in the Global Optimizer chapter of the TeleGenl User Guide. 


•i(ntlnejist 

The -I(nline_list option is valid only with -0(ptimize. 

This option allows you to inline subprograms selectively. The format of the 
option is 

-1 <flle> 

where <file> is a file that contains subprogram names. The file must contain 
subprogram names in a specific form as noted below. 

— A list of subprograms to be inlined, each separated by a comma or 
line feed then 

— A semicolon or a blank line dten 

— A list of subprograms that are not to be inlined, each sqiarated by a 
comma or line feed 

Tabs and comments are not allowed. If there is no semicolon or blank line, 
the subprograms are considered to be visible. If you have no visible units to 
inline, use a semicolon to mark the beginning of the hidden-subprogram list. 
Inline lists are commonly set iq} with one name per line. 

Each subprogram name'in the list is in the form shown below. 

[<unlt>. ]<subprogr«ii> 

The unit name indicates the location of the subprogram declaration, not the 
location of its body. If a unit name is not supplied, any matching subprogram 
name (regardless of the location of its declaration) will be affected. For 
example, the list 

test; testing.test 

indicates that all sut^ograms named Test should be marked for inlining 
excqit for those decked in either the specification or the body of the 
compilation unit Testing. 

The first list of subprograms will be processed as if there had been a pragma 
Inline in the source for them. The second list of subprograms will negate any 
I^e pragmas (including those applied the first list) and wOl also prevent 
any listed subprograms from being automaticaUy inlined (see A/a sub^tion 
pair, in the discussion of •0(ptimize). 

The ability to exempt otherwise qualified subprograms from automatic 


2-18 


CMD-2044N-V1.1(SPARC.MIPS) 22SEP92 




uommana nummary 


(Ada Compiler) ada 


inlining gives you greater control over optimization. For example, a large 
procedure called from only one place within a case statement might overflow 
the branch ofiset lintitation if it were inlined automatically. Including that 
subprogram’s name in the second list in the list file prevents the problem and 
still allows other subprograms to be inlined. 

Since the IjOw Form contains no generic templates, pragma Inline must 
appear in the source in order to affect all instantiations. However, specific 
instantiations can be affected by the inline lists. The processing of the names 
is case insensitive. 

If you do not use -/, the optimizer automatically inlines any subprogram that 
is: (1) called from only one place, (2) considered small by the optimizer, or 
(3) tail recursive. Such optimizations are explained in detail in the Global 
Optimizer chapter of the TeleCen2 User Guide. 


-i(nhibit 

The -i(nhibit option allows you to suppress, within the generated object code, 
certain run-time checks, source line references, and subprogram name 
information. The ^(nhibit option is equivalent to adding pragma Suf^ress to 
the beginning of the declarative part of each compilation unit in a file. 

The format of the option is _ 

-1 <suboptioii>[... ] 

where < suboption > is one or more of the single-letter suboptions listed 
below. When more than one suboption is used, the suboptions appear 
together with no sqiarators; for exan^le, “-i In”. 

1 [line_info] Suj^ess source line information in object code. 

By default, the compiler stores source line information in the 
objea code. However, this introduces an overhead of 6 bytes for 
each line of source that causes code to be generated. Thus, a 
1000-line package may have up to 6000 bytes of source line 
information. 

When source line information is suppressed, exception tracebacks 
indicate the offret of the object code at which the excq)tion occurs 
instead of the source line number. 

n [name_info] Suppress subprogram name information in object 
code. 

By default, the compiler stores subprogram name information in 
object code. For one compilation unit, the extra overhead (in 
l^es) for sul^rogram name information is the total length of all 


CMD-2044N.Vl.l(SPARC.AfIPS) 22SEP92 


2-19 






ada (Ada Compiler) 


TeleGen2 for SPARC-MIPS 


subprogram names in the unit (including middle pass-generated 
subprograms), plus the length of the compilation unit name. For 
space-critical applications, this extra space may be unacceptable. 

When subprogram name information is suppressed, the traceback 
indicates the ofEsets of the subprogram calls in the calling chain 
instead of the subprogram names. 

c [checks] Suppress run-time checks — elaboration, overflow, 
storage access, discriminant, division, index, length, and range 
checks. 

While run-time checks are vital during development and are an 
important asset of the language, they introduce a substantial 
overhead. This overhead may be prohibitive in time-critical 
applications. 

a [all] Suppress source line information, subprogram name 

information, and run-time checks. In other words, a (= inhibit all) 
is equivalent to Inc. 

Below is a coiiunand that tells the compiler to inhibit the generation of 
source line information and run-time checks in the object code of the units in 
sample.ada. 

ada -v -i Ic saaple.ada 


•j(oin 

The •j(oin option writes errors, warning messages, and information messages 
that are generated during compflation back into the source file. Such errors 
and messages appear in the file as Ada comments. The comments thus 
generated can help facilitate debugging and commenting your code. Unlike 
the other listing options (-L, -5, and ~F), the -/ option does not produce a 
separate listing, since the infcnmation generated is written into the source 
file. 


•K(eep_source 

This option tells the compiler to take the source file and store it in the Ada 
library. When you need to retrieve your source file later, use the axt 
command. 

-k(eepjntermediates 

Tbe -k(eq}_intermediates option allows you to retain certain intermediate 
code forms that the conpiler otherwise discards. 

By default, the compiler deletes the High Form and Low Form intermediate 


2-20 


CMD-2044N-V1.1(SPARC.MIPS) 22SEP92 





Command Summary 


(Ada Compiler) ada 


rq)resentations of all compiled secondary units from the working subUbrary. 
Deletion of these intermediate forms can significantly decrease the size of 
subhljraries — typically 50% to 80% for multi-unit programs. 

Some of the information within the intermediate forms may be required later, 
which is the reason -k(eep_intermediates is available with ada. For example. 
High Form is required if the unit is to be referenced by the Ada cross- 
referencer (axr). In addition, both the debugger and optimizer require 
information that is saved within intermediate forms. 

To verify that a unit has been compiled with the -k(e^_intermediates option, 
use the als command with the •X(tended option. If the unit has been 
con^)iled with -k, the listing will show the attributes high_form and low_form 
for the unit. 

-L(ist 

The -IXist option instructs the con^iler to output a listing of the source being 
compiled, interspersed with error i^ormation (if any). The listing is output 
to <file>.l, where <file> is the name of the source ffle (minus the 
extension). If <file>.l already exists, it is overwritten. 

If ii^ut to the ada command is an iiq>ut-list file (< file > .ilf), a sq)arate listing 
file is generated for each source file listed in the input file. Each resulting 
listing file has the same name as the parent file, except that the extension “.1” 
is appended. Errors are interspersed with the listing. If you do not use-L 
(the default situation), errors are sent to stdout only, no listing is produced. 

-L is incompatible with -F. 


-i(ibriie 

The •l(ibfUe option is one of the two libraxy-search options; the other is 
-t(en:^xlib. Both of these options allow you to specify the name of a hbrary 
file other than the default, Ublstalb. The two options are mutually exclusive. 

The format of the ^(ibfiie option is 
-1 <flle> 

where <file> is the name of a Ubrary file, which contains a list of 
sublibraries and optional comments. The fUe must have the extension “.alb”. 
The first sublibrary is always the working sublibrary; the last subUbraiy is 
generally the basic run-time sublibrary (rt_r30(X).sub). Note that comments 
may be included in a library file and that each sublibrary listed must have the 
extension “.sub”. For example, an alternate Ubrary file, worklib.alb, might 
contain the following lines. 


CMD-2044N-V1.1(SPARCMIPS) 22SEP92 


2-21 






ada (Ada Compiler) 


TeieGen2 for SPARC-MIPS 


: in 3 rvork. sub 

-- For the Remco Database project 
Naae: calcproj/calclib.sub 
Name: $TELEGEN2/lib/idt301/env 301.sub 
Name: $TELEGEN2/lib/r3000/rt_r3000.sub 

Then to use worklib.alb instead of the default, Ublstalb, you would use; 

-1 worklib.alb 


•m(ain 

This option tells the compiler that the unit specified with the cation is to be 
used as a main program. After all files named in the input spc^cation have 
been con^iled, the con^iler invokes the the Ada linker to bind and link the 
program with its extended family. By default an “execute form” (EF) load 
module named < unit> .ef is left in the current directoiy. 

The format of the option is 
-D <unit> 

where <unit> is the name of the main unit for the program. If the main unit 
has already been compiled, make sure that the body of the main unit is in the 
current working sublibrary. 

Note: You may specify options that are specific to the binder/linker on the 
ada command line if you use the 'mCain option. In other words, if 
you use -m, you may also use -o, -a, or any of the other aid options 
except -Z(“link_on^’. For example, the command 

ada -▼ *m welcome >0 new.ef -a IdtSOl.opt sample.ada 

instructs the compiler to compfle the Ada source file san^le.ada, 
which contains the main program unit Welccnne. After the file has 
been con^iled, the con^Oer calls the Ada linker, passing to it the -o 
and <i options with their respective arguments. The -a option tells 
the linker to use the commands specified in the c^don file idiSOl.opt 
to direct the linking process; an opdon file is required for linking. 

The linker produces an “execute form” load mo^e of of the unit, 
placing it in file new.^ as requested by the linker’s -o opdon. 

If you use an option with -m(ain that is common to both ada and old, 
the opdon serves for both compiling and linking. For exanple, using 
-5 with “ada -m” produces two assembly listings~one ft-om 
compOadon, one from elaboradon. 


•0(ptimize 

The optimizer operates on Low Form, the intermediate code representadon 
that is ou^ut by the middle pass of the compiler. 


2-22 


CMD-2(M4N-Vl.l(SPARCJVfIPS) 22SEP92 






Command Summary 


(Ada Compiler) ada 


When used on the ada command line, -0(ptimize causes the compiler to 
invoke the global optimizer during compilation; this optimizes the Low Form 
generated by the middle pass for the unit being compiled. The code 
generator t^es the optimized Low Form as input and produces more 
efficient object code. 

Note: We recommend that you do not attempt to compile with optimization 
until the code being coti^iled has been fully debugged and tested, 
because using the optimizer increases compilation time. Please refer 
to the TeleGenl User Guide for information on optimizing strategies. 

The format of the option is 
-0 <suboptlons> 

where < suboptions > is a string composed of one or more of the 
single-letter suboptions listed below. < suboptions > is required. 

The subqjtions may ^jpear in any order (later suboptions supersede 
earlier suboptions). Ilie subt^tion string must not contain any 
characters (including spaces or tabs) that are not valid suboptions. 
Examples of valid subc^tions are: 

-0 pRlA 
•0 pa 


CMD-2044N.V1J(SPARC.MIPS) 22SEP92 


2-23 







ada (Ada Compiler) 


TeleGen2 for SPARC-MIPS 


Table of optimizer suboptions 


p 

[optimize with parallel tasks] Guarantees that none of subprograms 
being optimized will be called from parallel tasks. P allows data 
mapping optimizations to be made that could not be made if multiple 
instances of a subprogram were aaive at the same time. 

p 

[optimize without parallel tasks] Indicates that one or more of the 
subprograms being optimized rnight be called from parallel tasks. 

This is a “safe” suboption. DEFAULT 


[optimize with external recursion] Guarantees that no interior 
subprogram will be called recursively by a subprogram exterior to the 
unit/collection being optimized. Sulprograms may call themselves or 
be called recursively by other subprograms interior to the 
unit/collection being optimized 

r 

[cptimize without external recursion] Indicates that one or more of 
the subprograms interior to the unit/collection b)eing optimized could 
lie call^ recursively b^ an exterior subprogram. This is a “safe” 
suboption. DEFAULT 

T“ 

[enable inline expansion of subprograms] Enables inline expansion of 
those subprograms marked with an Inline pragma or introduced by 
theconpiler. DEFAULT 

i 

[disable inline expansion] Disables all inlining. 

T" 

[enable automatic Inline espansion] If the I subxption is also in effect 
(I is the default), A enables automatic inline expansion of any 
subprogram not marked for inlining; that is, any subprogram that is 
(1) called from only one place, (2) considered to b>e small by the 
optimizer, or (3) tail recursive. If i is used as well, inlining is 
probtibited and A has no effect DEFAULT 

a 

[disable automatic inline expansion] Disables automatic inlining. Ifi 
is used as well, inlining is prolu'bited and a bias no effect. 

“m" 

[perform maximum cptimization] Specifies the maximum level of 
optimization; it is equivalent to “PRIA”. Tbiis subxption assumes tliat 
the program has no subprograms tbiat are called recursively or bjy 
parallel tasks. 


^lerform safe optimizations] Specifies the default “safe” level of 
optimization; it is equivalent to “prlA”. It represents a combination of 
optimizations tbiat is safe for all compilation units, including those with 
subprograms that are called recursively or biy parallel tasks. 


2-24 


CMD-2044N-V1.1(SPARC^IPS) 22SEP92 





Command Summary (Ada Compiler) ada 


Below are some examples showing the use of ada with -0(ptimize. 

1. The command below compiles and optimizes a single unit in file 
optimize.ada. 

ada -0 D -v optimize.ada 

It uses “safe” optimization (D), since the unit may have subprograms 
called recursively or by parallel tasks. 

2. The command below compiles and optimizes individually a series of 
units listed in the input list protypel.ilf. 

ada -0 Pria -v protypel.ilf 

This command tells the compiler that the units have subprograms 
called recursively (r) but none called by parallel tasks (P). It also tells 
the compiler that pragma Inline marks subprograms to be inlined (I), 
but that automatic inlining is not desired (a). 

3. The command below requests maximum optimization (M), because the 
one-unit program in alpha jortada has no subprograms called 
recursively or by parallel tasks. 

ada -0 M -v alpha__sort. ada 


•q(uiet 

By default, information messages are output even if the -v(erbose option is 
not used The-q(uiet option allows you to si^ress such messages. Using 
•v(erbose alone gives error messages, banners, and information messages. 
Using -v(erbose with -q(uiet gives error messages and banners, but 
suppresses information messages. The option is particularly useful during 
(^timization, when large numbers of information messages are likely to be 
ouq>ut 

-S(“asmjisting” 

The -5 (^tion instructs the compiler to generate an assembly listing. The 
listings are generated in the working directory. If more than one unit is in the 
file, sq)arate listings are generated for each unit The format of the cation is 

-S <suboptioQ> 

where < suboption > is either “a” or “e”. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. The assembly file is named <unit>.s if it is a body or 
<unit>_.s if it is a specification. 

e [extended] Generate a paginated extended assembly listing that 
includes ctxie ofEsets and object code. The assembly file is named 


CMD-2044N-V1.1(SPARCMIPS) 22SEP92 2-25 







ada (Ada Compiler) 


TeleGen2 for SPARC-MIPS 


<uiiit>.e if it is a body or <unit> .e if it is a specification. 

The listing generated consists of assembly code intermixed with 
source code as comments. If input to the command is an 
ii^jut-list file (<file>.iif), a separate assembly listing file is 
generated for each unit contained in each source file listed in the 
input file. Since -5 is also an aid option, if you use -5 along with 
-m(ain, an assembly listing is also ou^ut during the binding 
process. 


-tCempltb 

The -t(en^lib cation is one of the two library-search options; the other is 
*l(ibfile. ^th of these options allow you to select a set of sublibraries for use 
during the time in which the command is being executed. The two t^tions 
are mutually exclusive. 

The format of the -t(emplib q>tion is 
-t <subllb>I,...] 

where <sublib> is the name of a sublibrary. The name must be prefaced by 
a path name if the subUbrary is in a directory other than the current 
directory. The first sublibrary listed is the working sublibrary by definition. 

If more than one sublibrary is listed, the names must be sqiarated by a 
comma. Single or double quotes may be used as d elimit ers. 

The argument string of the •t(enq)lib option is logically equivalent to the 
names of the sublibraries listed in a library file. So instead of u-sing 

-1 vorkllb.alb 

you could use •t(eitq}lib and specify the names of the sublibraries listed in 
woridib.alb (sqrarated by commas) as the argumoit string. 

•u(pdateJnvoKe 

The -u(pdate_invoke (short for “-u(pdate_after_invocation”) option tells the 
compiler to update the workir^ sublibrary only after all files submitted in that 
invocation of ada have compfled successfully. The cation is therdore useful 
onfy ^en conqriling multiple source files. 

If the oonqiiler encounters an error while -u is in effect, the library is not 
tqxiated, even for files that compile successfully. Furthermore, all source 
files that follow the file in error are compQed for syntactic and semantic 
errors onfy. 

If you do not use the •u(pdate_]ib option, the library is iqxlated each time one 
of the files submitted has compiled successfully. In other words, if the 
compiler encoimters an error in any unit within a single source file, all 
changes to the working sublibrary for the erroneous unit and for all other 


2-26 


CMD-2044N-V1.1(SPARCM1PS) 22SEP92 







Command Summary 


(Ada Compiler) ada 


units in that file are discarded However, library updates for units in previous 
or remaining source files are unaffected. 

Since using -u means that the library is iqxlated only once, a successful 
compilation is faster with -u than without it. On the other hand if the 
compiler finds an error when you’ve used ~u, the library is not ipdated even 
when the other source Hies compile successfully. The implication is that it is 
better to avoid using -u unless your files are likely to be error free. 


-V(8pace_si2e 

The •V(pace_size cption allows you to specify the size of the working space 
for TeleGen2 components that operate on library contoits. The format of 
the option is 

-V 

where the option parameter is specified in 1-Kbyte blocks; it must be an 
int^er value. Tfre default value is 4000. The ipper limit is 2,097,152. 
Larger values goierally improve performance but increase physical memory 
requirements. Please read the section on adjusting the size of the virtual 
pace in Chapter 2 of TeleCenl Programmer’s Refererux Mamial for more 
i^ormation. 

-v(erbose 

The >v(erbose option is used to diplay messages that inform you of the 
progress of the cominand’s execution. Such messages are prefaced a 
banner that identifies the component being executed If -v is not used the 
banner and progress messages are not ouput However, information 
messages st^ as those ouput by the optimizer may still be ouput whether 
•v(erbose is used or not 

•x(ecution_profile 

The >x(ecution_profile option is used to obtain a profile of how a program 
executes. Tbe option is available with ads, old, and oopr. Using-x with oda 
or aopt causes t^ code generator to insert special run-time code into the 
generated object Using -x with aid causes the binder to link in the run-time 
sipport routines that will be needed during execution. 


CMD-2044N-V1J (SPARC^IPS) 


22SEP92 


2-27 






ada (Ada Compiler) 


TeleGen2 for SPARC-MIPS 


Important: If you have compiled any code in a program with the 

•x(ecution_profile option, you must also use ~x when you bind 
and link the program. Refer to the Profiler chapter of the 
TeleGen2 User Guide for more information on profiling. 


2-28 


CM1>.2044N-V1JI(SPARC^IPS) 22SEP92 





Command Summary 


(Ada Linker) aid 


2.8. aid (Ada Linker) 

The Ada Linker is a component of the TeleGen2 system that allows you to link 
compiled Ada programs in preparation for target execution. The linker resolves 
references within the Ada program, the bare target run-time support library, and 
any imported non-Ada object code. To support the development of embedded 
triplications, the linker is designed to operate in a variety of modes and to handle 
many types of ouqiut format. 

The linker links together Ada object code and non-Ada imported object modules 
from the Ada Ubrary, and constructs executable load modules. The linker can also 
ou^ut symbol location information that is used by the debugger as well as 
information used by the profiler. All unused sul^rograms are eliminated from 
the executable image. 

The linker operates in two phases: the binding phase and the linking phase. In 
the binding phase, the linker binds together all necessary Ada units, creating 
elaboration code that is stored in the sublibraiy. In the linking phase, the link pr 
combines the elaboration code, the appropriate Ada object modules, and any 
environment or inerted non-Ada objects specified in the linker option file, to 
produce either an executable load mo^e or a new objea form m^ule. For this 
phase of linking, an options file is required. 

The linker is invoked by the aid command; it can also be invoked with the •m(ain 
option of the ada command. In the latter case the conqjila' passes appropriate 
options to the linker to direct its operation. The syntax of the aid command is 
shown below. 


aid [<optloii>...} unit 


<optlon> One of the options available with the conunand 

<unlt> The name of the main unit of the Ada program to be linked. 

In^xrrtant: When using the old command the body of the main 
unit to be linked must be in the working sublibraiy. 

In the simplest case, old takes two arguments — the name of the main unit of the 
Ada program structure that is to be linked and the name of a linker option file — 
and produces one output file, the complete load module produced by the linking 
process. The load module is placed in the directory from which old was executed, 
under the name of the main unit used as the argument to old. 

Linker directives are communicated to the linker as options on the command line 
or as options entered via an option file. Command-line options are useful for 


CMI>-2044N-V1.1(SPARC.MIPS) 22SEP92 


2-53 








aid (Ada Linker) 


TeleGen2 for SPARC-MIPS 


controlling options that you are likely to change often. The default option settings 
are designed to allow for the simplest and most convenient use of the linker. 
Command-line options are discussed below. Option-file options are for specifying 
more complicated linker options, such as the specification of memory locations for 
specific p>ortions of the code or data for a program. Option-file options are 
discussed in the TeleGenl User Guide. 

The options available with the command, and the relationships among them, are 
shown in the figure below. 


al? 


■l(ibfile <file> 

1 

1 

-t(emplib <sublib >[,...] 
1 

-V(space 

1 

-v(er 

1 

-A(rra) 

1 

-a(dditioiuil_q 

“ 1 
-B(a 

s,izje4000 

r 

bose 

1 

’ size 2 

r 

ptions <file> 

1 

iseO 

-b(ind only 

C_ 

-Z(“link_only” 

1 * 


•d(ebug 


-f(ortnat < suboption > 

-M(ap < suboption >[...] 

I 

-S(“asm listing” n 

1 

-s(ymbol file 

I ■ 

-T(raceback 15 

I 

-w(“timeslice” 0 
I 

-x(ecutionjprofile 

I 

-X(cq}tion show 
I 

-Y(“task stack” 4096 
~ I 

-y(“stack^guard” 1024 
~‘<unit> I 


2-54 


CMD-2044N-V1.1(SPARC3IIPS) 22SEP92 








Command Summary 


(Ada Linker) aid 


Below are some basic examples that show how the command is used. 

1. The following command links the object modules of all the units in the 
extended family of unit Welcome, including any user-specified modules 
in the linker option file idtSOl.opt. 

aid -a IdtSOl.opt welcome 

The resulting load module is named “welcome.efwhich is in the 
TeleGen2 proprietary output format that can be used as input to the 
downloader command). 

2. The following command links the object modules of all the units in the 
extended family of unit Welcome as above, but produces the load 
module new.ef. 

aid -a idtSOl.opt -S a -v -o new welcome 

In addition, an assembly listing, new.s, is produced as well. Progress 
messages are output as the command executes. 

The options available with aid appear below in alphabetical order. 

-A(iTay_size 

This option specifies the amount of internal buffer space, in Kbytes, to be 
allocated for the linker. The format of the option is 

-A <valua> 

where <value> is a value betweoi 1 and 10. The default is 2. Use this 
option only as recommended by Customer Support. 


•a(clclitional_option8 

The -a option specifies that aid is to process additional options obtained from 
a linker option file. The format of the option is 

-a <£lle> 

where <file> is a valid file specification and represents a file containing 
linker options. If no extension is given, the extension is considered to be 
“.opt”. A sample linker option file is provided for each board supported in 
the product; it is named <board>.opt and exists in the respective 
examples/ <board> subdirectory of $TEL£GEN2. An option file is 
necessary for linking; it is not necessary for binding. 

An option file is set up with one command per line, with each command line 
having the form 

<cominan<l> [<parameter>] 

-or- <coimnand>/<optlon> [<parameter>] 

-or- <command>/<option>»<parameter> 

Commands and options are case-insensitive. Comment characters (-) are 


CMD-2044N-V1.1(SPARC.MIPS) 22SEP92 


2-55 







aid (Ada Linker) 


TeleGen2 for SPARC-MIPS 


allowed. Some Qpical command/option pairs are 

define/■dame>- locate/at« output/complete 

Note that some commands allowed in an option file can be esqpressed at the 
command level. Command-line q)tions always siqiercede option-file options. 
The conimands in a linker option file are shown bdow. 


define 

/<syinboljnane>—<value> 

[/address] 

input 

[/ezport_definitions] 

[/main | /spec | /body | /ofm] 

[/phantom | /irorklng_sublib] 

[/nosearch] <unlt> 
locate 

[/control_section- 

constant | code | data | udata | map] 
[ /component_name-<unlt> 

[/spec I /body | /ofm]] 

[/at«Kaddres s>] 

[/in-<reglon>] 

[/afteixcsect_name | comp_unit>] 

[/al ignfflent-<value> ] 

map 

[/image] -‘Alt:-Mi 
[/ineIude_Iocals ] -Alt- -MI 
[/excluded] -Alt:-Me 
[/wldth»<132 I 8C»] -AJt -Mn 
[/height»<50 I <value»] 

[<file>I 

output 

[/obJect_for»»[<unlt>] ] -Alt: -o 
[/complete | /incomplete] 
[/loadjmodule*><file>] 
region 

/hlgh_bound»<address> 

/lov_botmd<-<addr e s s> 

[/unused] [^egion>] 
no exception tables 
exit 
quit 


For more information on the syntax of the commands available in the linker 
option file, please refer to the linker chapter of the TeleGenl User Guide. 


2-56 


CMI>-2044N-V1.1(SPARCMIPS) 22SEP92 






Command Summary 


(Ada Linker) aid 


•B(a8e 

This option is used to specify the start location of the linked output. The 
linker will locate non-absolute control sections in consecutive memory 
locations. All control sections are word aliped on the MIPS. The format is 

-B <addr> 

where <addr> is a valid MIPS address. The address can be specified as a 
decimal (%Ddecimal), a hexadecimal (%Xhex), or a hexadecimal-based 
Uteral in Ada syntax (16#hex#). The default is hexadecimal (%Xhex). 

If you specify neither the -B option nor an option file LOCATE command 
and the link is complete, the linker uses the default location value of address 
0 . 

The -B option governs the location for any code, constant, or data section not 
covered by an option file LOCATE conunand. This option does not 
si^)ercede any LOCATE qitions. -B(ase is equivalent to a LOCATE cation 
with no control section or con^nent name specified. 


•b(ind__only 

The -b(ind_only option instructs the linker to not invoke the link phase—in 
other words, to generate elaboration code only. This option is particularly 
useful when you have adapted your own linker and want to use it in place of 
the TeleGen2 linker. The option is incon^)atible with -Z(“link_only." 

-d(ebug 

This option controls the generation of d^ug symbol information for use with 
the debugger. A program that is to be run with the dd>ugger must be linked 
with the -d(ebug option. If su^^rted by the diosen load module format, 
•d(ebug may also cause symbol information to be output in the load module. 
In the standard configuration of the TeleGen2 ^tem, none of the ouq)uts 
siqiport symbol information in the load module. 

•f(ormat 

The -f(onnat option specifies the format of the ouq>ut module. The syntax of 
the option is 

-f <suboptlon> 

where <suboption> is one of the following; <subq}tion> is required 

C [Custom] The C suboption is reserved for modules the linker has 
been ad^ted to suj^rt See your target’s Board Suf^rt Guide 
for information on adaptation. 

E [Execute Form] This suboption tells the linker that the object 
module to be generated is in TeleSoft Execute Form (the default). 


CMD-2044N-V1.1(SPARC.MIPS) 22SEP92 


2-57 




aid (Ada Linker) 


TeieGen2 for SPARC-MiPS 


The default extension for such an ou^ut file is “.ef 

S [S-record] This suboption tells the linker that the object module 
to be generated is in Motorola S*record format. The default 
extension for such an output file is “.sr”. 

If -/is not used, E(xecute_foim is produced. Execute Form is the default 
output format generated by the linker and is suitable for use as input to the 
doWoader/receiver. 

-I(lbfiie 

The ^(ibfQe option is one of the two library-search options; the other is 
-t(eii^lib. Both of these options allow you to specify the name of a library 
file other than the default, liblstalb. The two options are mutually exclusive. 

The format of the -l(ibfile option is 
-1 <flle> 

where <Ele> is the name of a library file, ^idiich contains a list of 
sublibraries and optional comments. The file must have the extension “.alb”. 
The first sublibrary is always the working sublibrary; the last sublibrary is 
generally the basic run-time sublibrary (rt_r3000.st^). Note that comments 
may be included in a library file and that each sublibrary listed must have the 
extension “.sub”. For example, an alternate Ubrary file, worklib.alb, might 
contain the following lines. 

Naae: ntjnrork. sub 

-• For the Remco Database project 

Nane: calcproj/calcllb.sub 

Name: $TELEGEN2/lib/ldt301/env 301.sub 

Naae: $TEUEGEN2/Iib/r3000/rt_r3000.sub 

Thai to use workIib.alb instead of the defoult, liblstalb, you would use: 

-1 worklib.alb 


•M(ap 

This option is used to request and control a link m^ listing. The link map 
listing is sent to 

<unlt>.inap 

where <unit> is the name of the main program unit (if presort), the name 
^lecified as the command line parameter, or the name ^jedfied as the first 
D^UT option, modified as necessary to form a valid UNIX file 
specification. The format of the link map listing fUe is described in the 
linko chapto of the TeleGen2 User Guide. The format of the option is 

-M [<8ubopclon>[...1] 

where <suboption> is one or more of the following: 


2-58 


CMI>-2044N-V1J(SPARCMIPS) 22SEP92 






Command Summary 


(Ada Linker) aid 


e [excluded] Insert a list of excluded subprograms into the link map 
listing. 

i [image] Generate a memory image listing in addition to the map 
listing. The linker writes the image listing to the same file as the 
link m^ listing. 

1 [locals] Include local symbols in the link msq? symbol listing. 

n [narrow] Limit the width of the link mq} to 80 characters (the 
default is 132). 

If more than one of the above suboptions is used, they must ^^lear together, 
with no spaces. For example: 

-M ell 

A -M(^ option specified on the command line siq)ercedes a MAP command 
in an option file. 


•o(utputJoad 

l^e •o(u^ut_load option is used primarily to specify the file name for the 
load module ou^ut created the linker. The format is 

-o <file> 

where <file> is the specification for the output file. If <file> does not 
include an extension, the linker wiU append an extension appropriate to the 
load module format chosen via the -f(ormat option. 

. ef — ExfOiff Form (the default) 

. sr - S’fecord 

. <othez> - Qutom 


You may use the -o option in conjunction with the •a(dditional_q>tions 
option, which directs the linker to use the cations in the option file specified. 
However, any output file specification present in the option file is siq)erceded 
a CQmmand*line specification. 

-S(“a8mjisttng” 

The S option is used to output an assembly listing from the elaboration 
process. The format of the option is 

-S <auboptloi» 

sriiere < suboption > is either “a” or “e”. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. The assembly file is named < unit >_M.s. 


CMD-2044N-V1J(SPARCMIPS) 22SEP92 


2-59 







aid (Ada Linker) 


TeleGen2 for SPARC-MIPS 


e [extended] Generate a paginated, extended assembly listing that 
includes code o&ets and object code. The assembly file is named 
<unit>_M.e. 

-s(ymbol_fiie 

This option produces a file that contains all of the global symbols used in the 
link. The name of the symbol file prodticed is <main>.sym, where <main> 
is the name of the main program unit The symbol file provides you with a 
single means of obtaining information about symbol names and values. 

The symbol file is an ASCII file that contains one entry per Une. Each entry 
has the format 

MKtnnnnmAiuuuuuuuuu 

where 

NNNMNNNN An 8-character ASCII rq)resentation of the value of the 

symbol. 

T A l-characto- ASCII rq}resention of the type of unit in 
which the symbol was located. Three characters are 
allowed; 

Ada Dnlt 
-> Ofa’tJnlt 

*> Link tlae defined S3rBbol 

AAAAAAAA The ASCII rq>resentation of the symbol (truncated, if 
necessary). A maximum of 200 characters is allowed. 

-T(rao6back 

The •T(racd)ack option allows you to specify the callback level for tracing a 
run«time eccqrtion that is not handled by an a[cq>tion handler. The format 
of the option is 

-T ■«i> 

where <n> is the number of lev^ in the tracd»ck caU chain. The default is 
15. The -T(raoebadc option is useful only if you receive an Unexpected Error 
Condition message. This information may he4> you diagnose the problem. 

-t(Mnplib 

The -t(eniplib option is one of the two library-search options; the other is 
•l(ibfile. Both erf these options allow you to select a set of sublibraries for use 
during the time in which the command is being executed. The two options 
are mutually exclusive. 

The format of the •t(emplib option is 


240 


CMI>-2044N-V1J(SPARCMIPS) 22SEP92 







wm 


ommand Summary 


(Ada Linker) aid 


-t <8Ublib>l,...] 

where <sublib> is the name of a sublibrary. The name must be prefaced by 
a path name if the sublibrary is in a directory other than the current 
directory. The first subUbrary listed is the working sublibrary by definition. 

If more than one sublibrary is listed, the names must be separated by a 
comma. Single or double quotes may be used as delimiters. 

The argument string of the •t(emplib option is logically equivalent to the 
names of the sublibraries listed in a library file. So instead of using 

-1 vorkllb.alb 

you could use •t(en^lib and specify the names of the sublibraries listed in 
woHdib.alb (sqiarated commas) as the argument string. 

•w(“timeslice'’ 

The -w qition allows you to ^)ecify the slice of time, in milliseconds, in which 
a task is allowed to execute before the run time switches control to the first 
ready task having equal priority. This timeslicing activity allows for periodic 
round>robin scheduling among equal-priorify tasks. 

The format of the option is 
-w <vmlu«> 

where <value> is the timeslice quantum in milliseconds. If the value 
specified is 15, for otan^le, the run time will check each IS milliseconds to 
see if any tasks with a priority equal to that of the executing task are available 
to execute. If there are, the run time effects a context s;vitch to the first such 
task. 

The default is 0 (Le., timeslicing is disabled). Please note that no run-time 
overhead is incurred when timeslidng is disabled. 

•V(sp«ce_tize 

The •V(^)ace_size c^on allows you to q>ecify the size of the working space 
for TeleGen2 components that operate on library contents. The format of 
the option is 

-V <valu«> 

^ere the option parameter is specified in 1-Kbyte blocks; it must be an 
int^er value. The default value is 4000. The upper limit is 2,097,152. 

Larger values generally improve performance but increase physical memory 
requirements. Please read the section on actuating the size of the virtual 
space in Chapter 2 of TekGen2 Programmer's Refaence Manual for more 
information. 


CMD-2(M4N-V1J(SPARCMIPS) 22SEP92 


2-61 






aid (Ada Linker) 


TeieGen2 for SPARC-MIPS 


-v(erbose 

The •v(erbose cation is used to display messages that inform you of the 
progress of the command’s execution. Such messages are prefaced by a 
banner that identifies the component being executed. If -v is not used, the 
banner and progress messages are not output. 


•X(ception_8how 

By default, unhandled excq)tions that occur in tasks are not rqx)rted; 
instead, the task terminates silently. The -X option allows you to specify that 
such exceptions are to be rqxjrted. The output is similar to that displayed 
when an unhandled excqjtion occurs in a main prc^am. 

•x(ectition_praflle 

The -x(ecution_profne option is used to obtain a proHle of how a program 
executes. The option is avaflable with ada, aid, and aopt. Using -x with ada 
or aopt causes the code generator to insert special run-time code into the 
generated object Using -x with old causes the binder to link in the run-time 
si^jport routines that will be needed during execution. These run-dme 
support routines record the profiling data in memory during program 
execution and then write the data to two host files, profUe,out and pn>fUe.dic, 
via the download line as part of program terminatioit The files can then be 
used to produce a listing that shows how the program executes. 

Important: If you have compiled any code in a program with the 

•x(ecution_profile option, you must also use -x when you bind 
and link the program. Refer to the Profiler ch^ter of the 
TeleCml User Guide for more information on profiling. 


•Y(“ta8k_tttck" 

The -Y optkm allows you to alter the size of the task stack. In the absence of 
a r^esentadon speclficadon for task storage_size, the run time will allocate 
4096 bytes of storage for each executing task. -Y specifies the size of the 
basic task stadL The format of the q}don is 

-Y <vmlu«> 

vhere <value> is the size of the task stack in 8-bit bytes. The default is 
4096. A rqiresentadon specificadon for task storage size overrides a value 
supplied with this opdon. 

•y(“atack_guard" 

The -y opdon is used to ^)ecify the size of the stack guard The stack-guard 
space is the amount of space located per task, from the task stack, to 
acconunodate interrupts and excepdon-handling operadons. The format of 
the opdon is 

-y <vmlu«> 


2-62 


CMI>-2044N-V1.1(SPARC.MIPS) 22SEP92 





Command Summary 


(Ada Linker) aid 


where < value > is the size of the stack-guard size in 8-bit bytes. The value 
given must be less than the task-stack size. The default is 1024 bytes; this is 
the amount allocated unless otherwise specified. 


-Z(“llnk_only" 

This option tells the linker to skip the binding phase and go directly to the 
link step. It is useful for generating phantom links where the main proram 
may not yet exist Note: unlike other link options, the -Z option cannot be 
passed with “ada -m”. The cation is incompatible with -b(ind_only. 


CMD-2044N-Via(SPARCMIPS) 22SEP92 


2-63 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are given on the following page. 


C-1 





ATTACHMENT F: PACKAGE STANDARD INFORMATION 

For this target system the numeric types and their properties are as follows: 
INTEGER: 


size = 32 

first = -2147483648 

last = +2147483647 


SHORT_INTEGER: 

size = 16 
first = -32768 
last = +32767 


SHORT_SHORT_INTEGER: 

size = 8 
first = -128 
last = +127 

FLOAT; 


size = 32 
digits - 6 

Yirst » -1.70141E+38 
last =+1.70141E+38 
machine_radix = 2 
machine_mantissa ^ 24 
macfaine_emin = -125 
machine_emax = +127 

LONG_FLOAT: 


size = 64 
digits = IS 

Ttrst = -8S8846567431158E+307 
last =+858846567431158E+307 
machine_radix = 2 
machine_mantissa - 53 
madiine_emin «-1021 
machine_emax = +1023 

DURATION: 

size «32 

delta s 6.103S1S62S00000E-005 
first * -86400 
last B +86400 


30SEF92 


ftwel 







LRM Annotations 


TeleGen2 pragmas 


6.10. Appendix F - Impiementation-Dependent Characteristics 

The Ada language deHnition allows for certain target dependencies. These 
dq>endencies must be described in the reference manual for each implementation. 
This section addresses each point listed in LRM Appendix F. Topics that require 
further clarification are addressed in the sections referenced in the summary. 

6.10.1. (1) Impiementation-dependent pragmas 

TeleGen2 has the following implementation-dependent pragmas: 

pragma Comment 
pragma Ejqx)rt 
pragma Im^es 
pragma Interf^^Information 
pragma Internet 
pragma Linkname 
pragma No_Siq)press 
pragma Preserve_Layout 
pragma Su{^ress_All 

6.10.1.1. Pragma Commant 

Pragma Comment is used for embedding a comment into the object code. The 
syntax is 

pragma Comment ( <strlng_llteral> ); 

where <string_literal> rqnresents the diaracters to be embedded in the object 
code. Pragma Comment is allowed onfy within a declarative part or immediately 
within a package ^)eciflcaticn. Any number of comments may be entered into the 
object code use of pragma Comment 

6.10.1.2. Pragma Export 

Pragma Eiqxnt enable you to e9qx}rt an Ada subprogram or object to assembly. 
The pragma is not sappoxved for C, Pascal or FORTRAN. The syntax is 

pragma Export ( [ Name -> ] <subprograffl__or_obJect_name> 

[. [ Llnk_Name >> ] <string_literal> ] 

[, [ Language j <ldentifier> ] ); 

The ^tax and use of the pragma is explained in detail in Section 4.3.3. 

6.10.1.3. Pragma Imagat 

Pragma Image controls the creation and allocation of the image and index table 
for a q)ecified enumeration ^pe. The^taxis 

pragma Images(<anuaeration_t 7 pe>. Deferred|Immediate); 

The syntax and use of the pragma is described in detail in Section 4.2.3. 


REF-2049N-V1J(SPARCJMIPS) lOCTO 


6-11 




TeleGen2 pragmas 


TeleGen2 for SPARC-MIPS 


6.10.1.4. Pragma Intertacejnformation 

Pragma Interfacc_Infonnation provides information for the optimizing code 
generator when interfacing non-Ada languages or :IoLng machine code insertions. 
Pragma Interface_Information is always associated with a pragma Interface except 
for machine code insertion procedures, which do not use a preceding pragma 
Interface. The syntax of the pragma is 

pragma Interfaca_Informatlon 

(Name, -- Ada aubprogram, required 

Llnk^Name, -- string, default - 

Mechanism, -- string, default - 

Parameters, -- string, default - ”” 

Regs_Clobbered); -- string, default > 

Section 4.32.2 explains the syntax and usage of this pragma. 

6.10.1.5. Pragma Interrupt 

Pragma Interrupt is used for fiinction-nuipped optimizations of interrupts. The 
syntax is 

pragma Interrupt (Function_Mapping); 

The pragma has the effect that entry calls to the associated entry, on behalf of an 
interrupt, are made with a reduced call overhead This pragma can only appear 
inunediately before a simple aocqst statement, a while loop directly enclosing only 
a single accept statement, or a select statement that includes an interrt^t accept 
alternative. 

Pragma Intemqit is eiqjiained more fully in Sections 5 J, 53.72, and 53.7.4. 

6.1 ai.6. Pragma Unknam* 

Pragma Linkname was fonnerfy used to provide inter&ce to any routine whose 
name cannot be ^)ecified by an Ada string literal Pragma Interface^Information 
should now be us^ for this fiinctionaliQr. Pragma Linkiuune is desoibed here 
only in support of older code that may still use it 

Pragma Linkname takes two arguments. The first is a subprogram name that has 
been previous^ ^)eci£ied in a pragma Interface statement The second is a string 
literal ^)ecifying the exact link name to be employed by the code generator in 
emitting calls to the associated subprogram. The syntax is 

pragma Incarfaca ( <languaga>, <aubprog> ); 
pragma Llnknama ( <8ubprog>, <acrlng_litaral> ); 

If pragma Linkname does not immediately follow the pragma Interface for the 
assoeiated subprogram, a warning will be issued saying that the pragma has no 
effect 


6-12 


REF-2049N-VlJ(SUN4aMIPS) 10CT92 





LRM Annotations 


TeleQen2 pragmas 


A simple example of the use of pragma Linlcname is 

procedure I>uimny_Access( Dunmy^Arg : System.Address ); 
pragma Interface (assembly, Dummy^Access ); 
pragma Linkname (Dufflmy_Access, ''_access"); 

6.10.1.7. Pragma No_Suppress 

Pragma No_SuH)ress is a TeleGen2-defined pragma that prevents the suppression 
of checks within a particular scope. It can be used to override pragma Suppress in 
an enclosing scope. The pragma uses the same syntax and can occur in the same 
places in the source as pragma Si^ress. The syntax is 

pragma No^Suppress (<ldentlfier> [. [ON ->] <tiame>]); 

<idendfisr> The type of che^k you do not want to suppress. 

<name > The name of the object, type/subtype, task unit, generic unit, or 

subprogram within which the check is to be suppressed. <name> 
is option:^. 

Section 2.2.2. 2 esqplains toe use of this pragma in more 

6.10.1.8. Pragma PrM«rvt_Layout 

The TeleGen2 compiler reorders record con^xments to minimiz e gaps within 
records. Pragma Preserve^Layout forces the compiler to maintain the Ada source 
order of conmonents of a given record type, ther^y preventing the compiler from 
performing record layout optimization. 

The syntax of diis pragma is 

Pragma Prasarva^Layout ( ON -> <racord_t 7 pa> ); 

^eserveJLayout must appear before any forcing occurrences of the record type 
and must be in the same declarative part, package ^>ecification, or task 
^jecification. This pragma can be ^lied to a record type that has been packed. 

If Preseive_Lqrout is ^jplied to a record type that has a record rqiresentation 
clause, the pragma onty i^iplies to the components that do not have con^nent 
clauses. These components will appear in Ada source order after the components 
with coimxment clauses. 

6.10.1.9. Pragma Suppr»M_AII 

S^)press_All is a TeleGen2>defined pragma that s^jpresses all checks in a given 
scope. Pragma Suppress_All takes no arguments and can be placed in the same 
scc^>es as pragma Suppress. 

In the presence of pragma Simpress_All or any other Suppress pragma, the scope 
that contains the pragma will have checking turned off This pragma should be 
used in a safe piece of time-critical code to allow for better performance. 


REF-2049N-Vl.l(SUN4xMIPS) 10CT92 


6-13 




Tel«Qen2 attributes 


TeleGen2 for SPARC-MIPS 


6.10.2. (2) Implementation-dependent attributes 

TeleGen2 has the following implementation-dependent attributes: 

’Offset (in MQ) 

’Subprogram_Value 

’Extended_Image 

’Extended Value 

’Extended'Width 

’Extended_Aft 

’Extended_Digits 

’Extended_Fore 

6.10.2.1. ’Oflk0t 

’O&et yields the offset of an Ada object from its parent frame. This attribute 
siq)ports machine code insertions as described in Section 5.42.2. 

6.10.2.2. 'Subprogram_VlBlue 

This attribute is used by the TeleGai2 implementation to facilitate calls to 
intenxpt support subprograms. The attribute returns the value of the record type 
Subprogram_Value defined in padcage Systent 

6.102.3. Extended attrlbutM for scalar typ«s 

The attended attributes extend the concq>t bdiind the text attributes ’Image, 
’Value, and ’V^dth to give the user more power and flodbility when displaying 
values of scalars. Extended attributes di^ in two respects from their predefined 
counterparts: 

1. Extended attributes take more parameters and allow control of the 
format of the output string. 

2. Extended attributes are defined for all scalar types, including fixed and 
floating point ^pes. 

Named parameter associations are not currently supported for the extended 
attributes. 


6-14 


REF-2049N-V1J(SPARCJMIPS) 10CT92 






LRM Annotations 


TeleGen2 attributes 


Extended versions of predefined attributes are provided for integer, enumeration, 
floating point, and fixed point types: 


Integer 

’Extended_Image 
’Extended Value 
’Extended'Width 


Enumeration 

’Extended_Image 

’Extended_Value 

’Extended_Width 


Floating Point 

’Extended_Image 

’Extended_Value 

’Extended_Digits 


Fixed Point 

’Extended Image 
’Extended_Value 
’Extended_Fore 
’Extended Aft 


For integer and enumeration types, the ’Extended_Value attribute is identical to 
the ’Value attribute. For enumeration types, the ’Extended_Width attribute is 
identical to the ’Width attribute. 


The attended attributes can be used without the overhead of including Text lO in 
the linked program. The following examples illustrate the difference betwera 
instantiating Text__IO.Float_IO to convert a float value to a string and ating 
FloafExtended_Image: 


vlth Taxt_IO; 

function Conv«rt_To_Strlng ( FI : Float ) return String is 
Tenp^Str : String (1 .. 6 -f Float'Digits ); 
package Flt_,IO it neu Text_IO.Float__IO (Float); 
begin 

Flt_IO.Pttt ( Teup^Str, FI ); 
return Taaqp_,Str: 
end Convert^To_String: 


function Convert_To__Strlng_No_Text_10( FI : Float ) return String is 
begin ' 

return Float'Extended_Iaage ( FI ); 
end Convert_To_String_Ro_Text_IO; 


vith Text_IO, Convert_To_String, Convert__To_String_No_Text_IO; 
procedure Shov Different Conversions is ~ 

Value ; Float 10.03376; 
begin 

Text_IO.Put_Line ( "Using the Convert_To_String, the value of 
the variable is : " & Convert_To_String ( Value ) ); 

Textile.Put_Llne ( "Using the Convert_To_Strlng_No_^Text_IO, 
the value is ; " fc Convert_To_String_No__Text_IO ( Value ) ); 
end Shov Different Conversions; 


REF.2049N*V11(SUN4«MIPS) 10CT92 


6-15 






Integer attributes 


TeieGen2 for SPARC-MIPS 


6.10^3.1. integer attributes 
’Extendedjmage 

Z' Extended_IiD«ge (Item. Vldth, Base, B«sed, Space_^If_Pos it ive ) 

Returns the image associated with Item as defined in Tact_IO.Integer_IO. 
The Tett_IO definition states that the value of Item is an integer liter^ with 
no underlines, no exponent, no leading zeros (but a single zero for the zero 
value), and a minus sign if negative. If the resulting sequence of characters 
to be ouqjut has fewer than Width characters, leading spaces are first 
ouq>ut to make up the difference. (LRM 143.7:10,143.7:11) 

For a prefix X that is a discrete type or subtype, this attribute is a function 
that may have more than one parameter. The parameter Item must be an 
int^er value. The resulting string is without underlines, leading zeros, or 
trailing ^>aces. 

Raremeters 

Item The item for which you want the image; it is passed to the 
function. Required. 

WidA The minimum number of characters to be in the string 

that is r^umed. If no width is ^)ecified, the default (0) is 
assumed. Optional 

Base The base in «hich the image is to be dh^layed. If no base 
is ^>ecifled, the default (10) is assumed. Optional. 

Based An indication of whether you want the string returned to 

be in base notation or not If no preference is specified, 
the default (false) is assumed. O^onaL 

Space Jf^Positive An indication of whether or not a positive integer should 

be {n-efixed with a space in the string returned. If no 
preference is ^Mciffed, the defoult (false) is assumed. 
Optional. 

ExamplM 

subtype Z Is Integer Range -10..16; 

Values yielded for selected parameters: 


Z'Extended__Iaage(5) - ”5" 

Z'Eztended_Iawge(5,0) - ”5" 

Z'Extended lBage(5,2) > " 5” 

Z'Extended~Iaage(5.0.2) - "101" 


6*16 


REF-2049N-V13(SUN4.cMIPS) 10CT92 




LRM Annotations 


Integer attributes 


Z' Ext«nded_I]nag« (5,4,2) 

Z'Extended^Image(5,0,2,True) 

Z' Eztended__Image ( 5.0,10, False ) 
Z'Extended^Image(5,0,10,False,True) 

Z'Extended^Iaage(-1,0,10,False,False) 
Z’Extended_Image(-1,0,10,False,True) 
Z' Extended_^Iisage ( -1,1,10, False, True ) 
Z'Eztended^Image(-1,0,2,True,True) 

Z' Extended_,Iinage ( -1,10,2, True, True ) 


- " 101 " 

- " 2 # 101 //" 

m 

* ** 5" 

m •• • 1" 
m *• -1** 
m • I** 

- ”-2m” 

-" -2inir 


’Extand«d_Valu« 

Z' Extended_Value (Item) 

Returns the value associated with Item as defined in Text_IO.Integer_IO. 
The Text_IO definition states that given a string it reads an int^er value 
from the beginning of the string. The value returned correqxnds to the 
sequence iiqjut. (LRM 143.7:14) 

For a prefix X that is a discrete ^pe or subtype, this attribute is a function 
widi a single parameter. The actual parameter Item must be of predefined 
type string. leading or trailing q>aces in the string X are ignored. In 
the case where an ill^al string is passed, a Constraint_Error is raised. 

P8rain«t«r 

Item A parameter of the predefined type string it is passed to 

the function. The type of the returned value is the base 
^peX Required. 

ExamplM 

subtype Z Is Integer Renge -10..16; 


Values yielded for selected parameters: 


Z'Eztended yslue(”5”) « 5 

Z'SKtended^Vsluef” 5") - 5 

Z'Extended''Vslue("2#101#") - 5 

Z'Extended''Vslue("-l") - -1 

Z'Extended”Vslue(" -1") - -1 


REF-2049N-VU(SUN4.eMIPS) 10CT92 


6-17 







Integer attributes 


TeieGen2 for SPARC-MIPS 


6-18 


’E}(t»ndad_Width 

X'Extended_Vidth(B«se,Based,Spece_If_Fosltive) 

Returns the width for subQrpe of X. For a prefix X that is a discrete 
subtype, this attribute is a hinction that may have multiple parameters. This 
attr^ute yields the maximum image length over all values of the type or 
subtype X 

Parameters 


Base The base for which the width wQl be calculated. If no base 
is qjedfied, the default (10) is assumed. Optional. 

Based An indication of whether the sub^pe is stated in based 
notation. If no value for based is ^)ecified, the default 
(false) is assumed Optional 


Space JfJ^ositive An indication of whether or not the sign bit of a positive 

int^er is included in the string returned If no preference 
is ^)ecified the default (false) is assumed Optional. 


Examplas 

subtype Z Is Intsgsr*Bangs -10..16; 


Values yielded for selected parameters: 

Z'Extended Vldtb 
Z' Extended*'Vidth(lO) 

Z' Extended*~Wldtb(2 > 

Z'Extended~Vldtb(10.True) 
Z'Excended~¥idtb(2.True) 
Z'Extended_Yidth(10.False.True) 
Z' ExtendedJiridtbdO. True. False ) 
Z'ExtendedJFldtb(10.True.True) 
Z'Extended'vidthCE.True.True) 

Z'Extended^WldthCZ.False,True) 


- 3 -W 

- 3 -'-Jir 

- 5 -"lOOOOr 

• 7 -"-10*10*- 

- 8 -" 2 * 10000 *" 

-3 -"16" 

m 7 -"-10*10*" 

- 7 -"10*16*" 

- 9 -" 2 * 10000 *" 

- 6 -" 10000 " 


REF-2049N-Vl.l(SUN4aMIPS) 10CT92 








LRM Annotations 


Enumeration type attributes 


6.10.2.3.2. Enumeration type attributes 
’Extendedjmage 

X'Eztended_lB«ge(Iten.Width,Uppercase) 

Returns the image associated with Item as defined in 
Text_IO.Enumeration_IO. The Tcxt_IO definition states that given an 
enumeration literal, it will output the value of the enumeration literal (either 
an identifier or a charaaer literal). The character case parameter is 
ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
that may have more that one parameter. The parameter Item must be an 
enumeration value. The image of an enumeration value is the 
corresponding identifier, which may have character case and renim string 
width ^)ecified 

Paramoters 

Item The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of characters to be in the string 

that is returned. If no width is specified, the default (0) is 
If the Width q)ecified is larger than the image 
of Item, the return string is padded with trailing spaces. If 
the Width ^)eci£ied is smaller than the image of Item, the 
default is assumed and the image of the enumeration value 
is output con^etefy. Opdcmal. 

Uppercase An indication of whether the returned string is in upper 

case characters. In the case of an enumeration type where 
the enumeration literals are character literals, Uppercase 
is ignored and the case specified by the type definition is 
taken. If no preference is specified, the default (true) is 
assumed Optional. 

ExamplM 

typ* X is (rsd, grssn, blue, purple); 
type Y is ('a', 'B', 'c', 'D'); 

Values yidded for selected parameters: 


X'Extended_Zaage(red) - "RED" 

X'Extended_Iaage(red. 4) - "RED " 

X'Extended_Iaage(red,2) - "RED" 

X'Eztended_Iaage(red,0,false) - "red" 

X'Extsndad_LBage(red.10,false) « "red " 

T'Extanded laage('a’) - 

Y'E*tended"lBage('B') - "'B'" 

Y'Extandad_Iaage('a'.6) - "'a' " 

Y'Extendad_Iaage(’a',0,true) - 

REF.2(M9N-Vl.l(SUN4.eMIPS) lOCTW 6*19 






Enumeration type attributes 


TeieGen2 for SPARC-MiPS 


’Ext»nci«d_ViBlue 

X' Extende(l_Value (Item) 

Returns the image associated with Item as defined in 
Text_IO.Enumeration_IO. The Text_IO definition states that it reads an 
enumeration value from the beginning of the given string and returns the 
value of the enumeration literal that corre^nds to the sequence ii^ut. 
(LRM 143.9:11) 

For a prefix X that is a discrete type or subtype, this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading cr trailing ^>aces in the string X are ignored In 
the case where an illegal string is passed, a Constraint_Error is raised 

Paramtter 

Item A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of X Required 

ExamplM 

type X la (rad, graan, blua, purpla); 

Values yielded for selected parameters: 

X'Extandad_Valua(”rad”) - rad 

X'Estandad_Valua(” graan") ■ graan 

X'Eztandad_Valua(” Purpla") - purpla 
X'Estandad^VaiuaC” GraEn ") • graan 


6 ^ 


REF-2049N-V1J(SUN4^IPS) 10CI92 






LRM Annotations 


Enumeration type attributes 


’Extended_Width 

X'Extended^Vidth 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. 
This attribute yields the maximum image length over all values of the 
enumeration type or subtype X. 

Parameters 

There are no parameters to this function. This function returns the width of 
the largest (width) enumeration literal in the oiumeration type specified by 
X. 

Examples 

type X la (red. green, blue, purple); 
type Z Is (XI. Z12. Z123. X1234); 

Values yielded: 

X'Extended Vldth • 6 -yurple’ 

2'Extended“width - 5 •‘VC1234' 


REF*2049N-Vl.l(SUN4xMIPS) 10CT92 


6-21 





Floating point attributes 


TeleGen2 for SPARC-MIPS 


6.10^.3.3. Floating point attributes 
’Extendedjmage 

X' Extended_Iinage (Item, Fore. Af t, Exp, Base, Based) 

Returns the image associated with Item as defined in Text_IO.Float lO. 

The Te9Ct_IO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If the 
value is negative, a minus sign is included in the integer part of the value of 
Item. If Exp is 0, the int^er part of the output has as many digits as are 
needed to rqiresent the integer part of the >^ue of Item or is zero if the 
value of Item has no int^er part (LRM 143.8:13,143.8:15) 

Item must be a Real value. The resulting string is without underlines or 
trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed to the 

function. Required 

■Fore The minimum number of characters fOT the integer part of 
the decimal rqn-esentation in the return string. This 
includes a minus sign if the value is native and the base 
with the '#’ if based notation is specified If the integer 
part to be ouq)ut has fewer characters than ^)ecified by 
Fore, leading spaces are output first to make up the 
difiEerence. If no Fore is ^)e^ed the default '^ue (2) is 
assumed Optional 

Afi Tlie minimum number of decimal digits after the decimal 
point to accommodate the precision desired If the delta 
of the type or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified the defiiult (XDigits-1) is assumed. If 
based notation is qiecified the trailing ’#’ is included in 
Aft Optional 

Exp The minimum number of digits in the eqx)nent. The 

exponent consists of a sign and the eiqponent possibly with 
leading zeros. If no Bq) is ^>ecified the default (3) is 
assumed If Exp is 0, no eqwnent is used Optional 

Base The base that the image is to be displayed in. If no base is 
specified the default (10) is assum^ Optional. 

Based An indication of whether you want the string returned to 
be in based notation or not If no preference is specified 
the default (false) is assumed Optional. 


6-22 


REF*2049N.Vl.l(SUN4.cMIPS) 10CT92 







LRM Annotations 


Floating point attributes 


Examples 

type X Is digits 5 range -10.0 .. 16.0; 

Values yielded for selected parameters: 

- " 5.0000E+00" 

- "5.0000E+00" 

- "-5.0000E+00" 

- " 5.0E+00" 

- " 5.0" 

- " 101 . 0 " 

- " 2 # 101 . 0 #" 

- "2#l.l#E+02" 


X'Eztended_Iaage(5.0) 

X' Extended_Iinage ( 5.0.1) 

X'Extended_Zmage(-5.0.1) 

X'Eztended_lmage(5.0,2,0) 
X'Extended_laage(5.0,2,0,0) 

X'Extended~laage(5.0.2,0.0.2) 
X'Extended_laage(5.0,2,0.0,2.True) 
X'Eztended_Iinage(5.0,2,2,3,2 .True) 


'Extanded^Vaiue 

X'Extended^Value(Item) 

Returns the value associated with Item as defined in Text_IO.Float lO. 

The Text_IO definition states that it slt^ any leading zeros, then r^ds a 
plus or minus sign if present then reads the string according to the syntax of 
a real literal. The return value is that which corresponds to the sequence 
input (LRM 14.3.8:9,143.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading or trailing places in the string X are ignored. In 
the case where an filial string is passed, a Constraint^Error is raised. 

PBramtttr 

lum A parameter of the predefined ^pe string; it is passed to 
the function. The type of the returned value is the base 
type of the input string. Required. 

Exampldt 

type X is digits 5 range -10.0 .. 16.0; 


Values yielded for selected parameters: 

Z'Extended Value("5.0") - 5.0 

X'Extended-Value("0.5E1") - 5.0 

Z'Extended-Value("2fiil.01#E2") - 5.0 


REF-2049N-Vld(SUN4.eMIPS) 10CT92 


6-23 




Floating point attributes 


TeieGen2 for SPARC-MIPS 


’Extended_Digit8 

X'Extended^Dlgits(Base) 

Returns the number of digits using base in the mantissa of model numbers 
of the subtype X. 

Parameter 

Base The base that the subtype is defined in. If no base is 
specified, the default (10) is assumed. Optional. 

Examples 

t3rpe X is digits 5 range -10.0 .. 16.0; 

Values yielded: 

X'Extanded^Dlgits - 5 


6-24 


REF.2049N-Vl.l(SUN4,eMIPS) 10CT92 







LRM Annotations 


Fixed point attributes 


6.10.2.3.4. Fix«d point attributes 
’Extendadjmage 

X'Extended_Zfflage(IteB,Fore.Aft,Exp,Base,Based) 

Returns the image associated with Item as defined in Tejct_IO.Fixed_IO. 

The Text^IO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If the 
value is negative, a minus sign is included in tee integer part of tee value of 
Item. If Exp is 0, tee int^er part of tee output has as many digits as are 
needed to rq)resent tee int^er part of tee ^ue of Item or is zero if tee 
value of Item has no integer part (LRM 143.8:13,143.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
that may have more than one parameter. The parameter Item must be a 
Real value. The resulting string is without undvlines or trailing spaces. 

Paramotert 

Item The item for ^lich you want tee image; it is passed to tee 
fiincticm. Required. 

Fore The minim um number of characters for the integer part of 

the decimal rq>resentation in the return string. This 
includes a minus sign if the value is negative and tee base 
with the'#*ifbased notation is :q>ectfie(l If tee integer 
part to be ouq}Ut has fewer charters than q)ecified by 
Fore, leading ^>aces are output first to make up tee 
difference. If no Fore is q)e^ed, tee default ^ue (2) is 
asstimed. OptkmaL 

Aft The minimum number of dedmal digits after tee decimal 
point to accommodate the precision desired. If tee delta 
of tee type or subtype is greater than 0.1, teen Aft is 1. If 
no Aft is specified, tee de&ult (X’Digits-1) is assumed. If 
based notation is ^Mcified, tee trailing ’#’ is included in 
Aft. Optional 

Exp The minimum number of digits in the exponent; tee 

exponent consists of a sign and tee eoqxment, possibly with 
leading zeros. If no Ejqp is ^)ecified, tee default (3) is 
assumed IfExpisO, noeiqwnentisused Optional. 

Base The base in which tee image is to be displayed If no base 
is specified the default (10) is assumed Optional. 


REF-2(M9N*VlJ(SUN4.eMIPS) 10CT92 


6*25 




Fixed point attributes 


TeieGen2 for SPARC-MIPS 


Based An indication of whether you want the string returned to 
be in based notation or not. If no preference is specified, 
the default (false) is assumed. Optional. 


Examples 

type X is delta 0.1 range -10.0 .. 17.0; 


Values yielded for selected parameters; 

Z' Extended__Image (5.0) 

Z'Extended_Image(5.0,1) 

Z' Eztended__Iaage (-5.0,1) 

Z'Eztended_Iaage(5.0,2,0) 

Z'Extended_Iaage(5.0,2.0,0) 

Z' Eztended_^Image ( 5.0,2,0,0,2 ) 

Z' Ext ended_Iinage (5.0,2,0,0,2, True ) 
Z'Extended^Iaage(5.0.2,2,3,2,True) 


- " 5.00E+00" 

- "5.00E+00" 

- "-5.00E+00" 

- " 5.0E+00" 

- - 5.0" 

- " 101 . 0 " 

- "2f/101.0f/" 

- "2#l.lf/E+02" 


’Extended^Value 

Z'Excended_Value(Znage) 

Returns the value associated with Item as defined in Teit^IO J^ixed_IO. The 
Text_^IO definition states that it sk^ any leading zeros, reads a plus or 
minus sign if present, then reads the string according to the syntax of a real 
literal. The return value is that which corresponds to the sequence input 
(LRM 143.8:9,143.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a single parameter. Tbe actual parameter Item must be of predefined 
Qpe string. Any leadii^ or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint_Error is raised. 

Pararnttw 

Image Parameter of the predefined type string. The type of the 
returned value is the base Qpe of the input string. 
Required. 

ExamplM 

type Z la delta 0.1 range -10.0 .. 17.0; 

Values yielded for selected parameters: 

Z'Eztended Value("S.0") 5.0 

X'E*tended"value("0.5El") - 5.0 

Z'Eztended~Value(”2f/1.01#E2") - 5.0 


6-26 


REF.2(M9N.VlJ(SUN4.eMIPS) 10CT92 






LRM Annotations 


Fixed point attributes 


’Ext«nded_Fore 

X' E3ctended_Fore (Base, Based) 

Returns the minimum number of characters required for the integer part of 
the based representation of X. 

Parameters 

Base The base in which the subtype is to be di^layed. If no 
base is specified, the default (10) is assumed. Optional. 

Based An indication of whether you want the string returned to 
be in based notation or not If no preference is specified, 
the default (false) is assumed Optional. 

Examples 

type Z Is delta 0.1 range -10.0 .. 17.1; 

Values yielded for selected parameters: 

X'Extended Fore - 3 --"-10" 

X'Extended”Fore(2) - 6 -- " 10001" 

'Extended^Aft 

Z'£xtended_Aft(Base.Based) 

Returns the minimum number of characters required for the fractional part 
of the based rqjresentation of X. 

Parameters 

Base The base in which the subt^ is to be displayed. If no 
base is specified, the defat;dt (10) is assumed Optional. 

Based An indication of whether you want the string returned to 

be in based notation or not If no preference is specified, 
the default (false) is assumed Optional. 

Examplas 

type Z is delta 0.1 range -10.0 .. 17.1; 

Values yielded for selected parameters: 

Z'Extended Aft - 1 •'Tfrom 0.1 

Z'Extended"A£t(2) - 4 -"OOOrfrom 2*0.0001* 


REF-2049N-V1.1(SUN4,«MIPS) l(X7r92 


6-27 







Package System 


TeleGen2 for SPARC-MIPS 


6.10.3. (3) Package System 


with Unchecked_Conversion; 
package System is 


-- CUSTOMIZABLE VALUES 


type Name is (TeleCenZ); 


System^Name : constant name TalaGenZ; 


Memory Size 
Tick 


constant (2 ** 31) -1; --Available memory, in storage units 
constant :■> 1.0 / 100.0; --Basic clock rate, in seconds 


-- NON-CUSTOMIZABLE, IMPLEMENTATION-DEPENDENT VALUES 


Storage^Unit 

Min^Int' 

Max^Int 

Maz^Diglts 

Max_Mantissa 

Fine Delta 


constant 

constant 

constant 

constant 

constant 

constant 


8 ; 

.(2 31); 

<2 ** 31) - 
15; 

31; 

1.0 / (2 *♦ 


1 ; 


Max Mantissa); 


subtype Priority is Integer Range 0 .. 255; 


.. address type support 


type Memory is private: 
type Address is access Memory; 

-- Ensures compatibility between addresses and access types. 
-- Also provides implicit NULL initial value. 


Null_Address: constant Address null; 

-- Initial value for any Address object 


6-28 


REF-2049N-Vl.l(SUN4aMlPS) 10CT92 



LRM Annotations 


Package System 


type Address_Value is range -(2**31)..(2**31)-1; 

-- A numeric representation of logical addresses for use In address clause 

function Location Is new Unchecked__Converslon (Address_Value, Address); 

-- May be used In address clauses: 

Obj ect: Some_Type; 

-- ■ for Object use at location (16^/4000//); 


function Label (Name: String) return Address; 
pragma Interface (META. Label); 

-- The LABEL meta-function allows a link name to be specified as address 
-- for an Imported object in an address clause: 

-- Object: Some_Type; 

-- for Object use at Label("OBJECTS$LIMK_NAME"); 

-- System.Label returns Null_Address for non-literal parameters. 


-• Unsigned address coaparlsotvs 

function ">" (Left. Right: Address) return Boolean; 
pragma Interface (META, ">”); 

function "<" (Left. Right: Address) return Boolean; 
pragma Interface (META. ”<"); 

function ">«" (Left, Right: Address) return Boolean; 
pragma Interface (META. ”>-”); 

function "<■" (Left, Right: Address) ret\xm Boolean; 
pragma Interface (META. "■^”); 


- Unchecked relatlwe address calculations 


function "-f” (Left: Address; 

function (Left: Address_Value; 

pragma Interface (META, "-f”); 

function (Left: Address; 

function (Left: Address; 

pragma Interface (META, ”-”): 


Right: Address_Value) return Address; 
Right: Address) return Address; 


Right: Address__Value) return Address; 
Right: Address) return Address_Value; 


REF-2049N-Vl.l(SUN4.cMIPS) 10CT92 


6-29 





Package System 


TeleGen2 for SPARC-MIPS 


-- CALL SUPPORT 


type Subprogran_Value IS 
record 

Proc_addr : Address; 
Parent_frame : Address; 
end record; 


-- Value returned by the implementation-defined 'Subprogram_Value 
-- attribute. The attribute Is not defined for subprograms with 
-- parameters, or functions. 

procedxire Call (Subprogram: Subprogram_Value); 
procedure Call (Subprogram: Address); 

pragma Interface (META, Call); 


-- The CALL meta-functlon allovs indirect calls to subprograms 
-- given their subprogram value. The result of a call to a nested 
-- procedure whose parent frame does not exist (has been deallocated) 
--at the time of the call, is undefined. 

-- The second form allovs calls to a subprogram given its address, 
--as returned by the 'Address attribute. The call Is undefined If 
-- the subprogram it not a parameterless non-nested procedure. 


Max^Ob J ecc__Slse 
Max^Record^Count 
Max Text lo Count 
Max”Text”lo”Pield 


CONSTANT 

CONSTANT 

CONSTANT 

CONSTANT 


Max_Int; 
Max Int; 
Max"lnt-1; 
1000; 


private 

type Memory is 
record 
null; 

end record; 
end System; 


Syttmm.Labol 

The System.Label meta-functioo is provided to allow you to address objects by a 
linker-recognized label name. This function takes a single string literal as a 
parameter and returns a value of System Address. The function sin^)ly returns 
the run-time address of the appropriate resolved link name, the primary purpose 
being to address objects creat^ and referenced from other languages. 


6-30 


REF-2049N-Vl,l(SUN4aMIPS) 10CT92 







LRM Annotations 


Package System 


• When used in an address clause, System.Label indicates that the Ada 
object or subprc^am is to be referenced by a label name. The actual 
object must be created in some other unit (normally by another 
language), and this capability singly allows you to import that object and 
reference it in Ada. Ai^ esq^licit or default initialization will be applied 
to the object For example, if the object is declared to be of an access 
type, it will be initialized to NULL. 

• When used in an egression, System.Label provides the link time 
address of any name, such as a name for an object or a subprogram. 


R£F-2049N-VU(StJN4,cMIPS) 10CT92 


6-31 






T«leGen2 characteristics TeleGen2 for SPARC-MIPS 


6.10.4. (4) Restrictions on representation clauses 

Representation clauses are fully supported with the following exceptions; 

• Enumeration representation clauses are suppx>rted for all enumeration 
types excq)t Boolean types. 

• Record r^resentation clauses are supported excq)t for records with 
dynamicalfy-sized components. 

• Pragma Pack is siqjported excqjt for dynanucally-sized coii^)onents. 

6.10.5. (5) Implementation-generated names 

TeleGeo2 has no in^lementation'generated names. 

6.10.6. (6) Address ciause expression interpretation 

An expression that ^)pears in an object address clause is interpreted as the 
address of the first storage unit of the olqecL 

6.10.7. (7) Restrictions on unchecked conversions 

Unchecked progr amming is si^^rted exc^t for unchecked type conversions 
where the destination type is an unconstrained record or array type. 

6.10.8. (8) Implementation-dependent characteristics of the I/O 
packages 

Text^IO has the following implonentation-dependent characteristics: 
type Count is range 0..(2 ** 31)>2; 

subtype Field is integer range 0..1000; 


The standard run-time sublibraiy contains preinstantiated versions of 
Tesct_IO.Integ«-JO for types Shoit_Short_Integer, Short_Integer, and Integer, 
and of TesrtJ[OJioat_IO for types Hoat and Long_FloaL Use the following 
packages to eliminate mult4>le instantiations of the Text^^IO packages: 


Short_Sh<wt_Int^er_IO 

Short_Int^«’jrext_rO 

Integer_Testt_IO 

Float_T^_IO 

Long_Floa^Text_IO 


^32 


REF-2049N-VlJ(SPARC3fIPS) 10CT92 






