r • 




3 & S-S-S* 


(NASA-CR-1 37266 ) SOFTWARE ENGINEERING AND 
THE ROLE OF Aia: EXECUTIVE SEMINAR (Houston 
Univ.) 140 p CSCL 09R 


N91-13087 


Unci as 

G3/61 0308262 


So ftware Engineering and the Role of 

Ada 


<r 


Executive Seminar 


Glenn Freedman 

University of Houston - Clear Lake 


May 31, 1987 


Cooperative Agreement NCC 9-16 
~~ Research Activity No. ET.1 



Research Institute for Computing and Information Systems 
University of Houston - Clear Lake 



T EC H NIC • A ■ L REPORT 



If 


The 

RICIS 

Concept 


The University of Houston-Clear Lake established the Research Institute for 
Computing and Information systems in 1986 to encourage NASA Johnson Space 
Center and local industry to actively support research in the computing and 
information sciences. As part of this endeavor, UH-Clear Lake proposed a 
partnership with JSC to jointly define and manage an integrated program of research 
in advanced data processing technology needed for JSC’s main missions, including 
administrative, engineering and science responsibilities. JSC agreed and entered into 
a three-year cooperative agreement with UH-Clear Lake beginning in May, 1986, to 
jointly plan and execute such research through RICIS. Additionally, under 
Cooperative Agreement NCC 9-16, computing and educational facilities are shared 
by the two institutions to conduct the research. 

The mission of RICIS is to conduct, coordinate and disseminate research on 
computing and information systems among researchers, sponsors and users from 
UH-Clear Lake, NASA/JSC, and other research organizations. Within UH-Clear 
Lake, the mission is being implemented through interdisciplinary involvement of 
faculty and students from each of the four schools: Business, Education, Human 
Sciences and Humanities, and Natural and Applied Sciences. 

Other research organizations are involved via the “gateway” concept. UH-Clear 
Lake establishes relationships with other universities and research organizations, 
having common research interests, to provide additional sources of expertise to 
conduct needed research. 

A major role of RICIS is to find the best match of sponsors, researchers and 
research objectives to advance knowledge in the computing and information 
sciences. Working jointly with NAS A/ JSC, RICIS advises on research needs, 
recommends principals for conducting the research, provides technical and 
administrative support to coordinate the research, and integrates technical results 
into the cooperative goals of UH-Clear Lake and NASA /JSC. 


Software Engineering and the Role of 

Ada 

Executive Seminar 


Preface 


This research was conducted under the auspices of the Research Institute for 
Computing and Information Systems by Glenn Freedman, founding Director of the 
Software Engineering Education Center (SEPEC) of the University of Houston - 
Clear Lake. 

Funding has been provided by the Spacecraft Software Division, NASA/JSC 
through Cooperative Agreement NCC 9-16 between NASA Johnson Space Center 
and the University of Houston - Clear Lake. The NASA Technical Monitor for this 
activity was Steve Gorman, Deputy Chief of Space Station Office, Mission Support, 
NASA/JSC. 

The view's and conclusions contained in this report are those of the author and 
should not be interpreted as representative of the official policies, either express or 
implied, of NASA or the United States Government. 


SOFTWARE ENGINEERING 
AND THE ROLE OF ADA* 

EXECUTIVE SEMINAR 


UNIVERSITY OF HOUSTON- 
CLEAR LAKE 

SOFTWARE ENGINEERING 

AND ADA 

TRAINING PROJECT 


Ada is a registered trademark of the U.S. Government, AJPO 


PROGRAM AGENDA 


I. THE SOFTWARE CRISIS: 
PROBLEMS AND SOLUTIONS 

II. MANDATE OF THE SPACE STATION 
PROGRAM 

III. THE SOFTWARE LIFE CYCLE 

IV. SOFTWARE ENGINEERING 

V. ADA UNDER A SOFTWARE 
ENGINEERING UMBRELLA 



PROGRAM GOALS 


* Review the software life cycle 

* Apply the concepts of current 
software engineering to space 
station issues 

* Examine the role of Ada+ language 
in the software development 
environment 


+ Ada is a trademark of the US Government, 
Ada Joint Program Office 


THE SOFTWARE CRISIS 


PROBLEMS 

AND 

SOLUTIONS 


THE SOFTWARE CRISIS 


KEY ELEMENTS 


* Over budget and late 

# 

* Actual life cycle cost 

* Modification is difficult, 
time consuming and costly 

* The software invasion 



COST OF SOFTWARE = 


Original development cost 

+ 

Maintenance/Modification costs 

+ 

Unanticipated costs 



PERCENTAGE OF BUDGET 



HIGH PROJECT COSTS 


REASONS 


* Poor programming techniques 

* Poor design and specification 
techniques 

* Improper choice of language 
for job 


HIGH PROJECT COSTS 


PARTIAL SOLUTIONS 


* Structured programming (rnid '60s) 

* Software Engineering 

- Measurement tools: 

• Cohesion 

• Coupling 

• Fan-in/Fan-out 

• Factoring 

- Design Techniques 

• Top Down Design 

• Data Flow Design 

• "Structured" Design 

• Object Oriented Design 


HIGH PROJECT COSTS 


PARTIAL SOLUTIONS 


* Improvements In language 

» 

design and development of 
specialized languages 

- Pascal 

- "C" 

- Prolog 


MANDATE 
OF THE 

SPACE STATION 
PROGRAM 



* Large 

* Complex 

* Distributed Networks 


PROFILE OF SPACE STATION PROGRAM 


* Embedded Components 

- Parallel Processing 

- Real Time Control 

- High Reliability 

- Safety 

- Non-Stop Operation 

* Long-Term Life Expectancy 

* Over 100 million lines of code 


SOFTWARE CHALLENGE 


* Many needs initially 
undetermined and unknown 

9 

* Many requirements initially 
undefined 

* Personnel continuity an 
unrealistic goal 


* Vendor continuity an 
unrealistic goal 


SOFTWARE CHALLENGE 


* Many needs are never fully 
determined - always changing 

* Integration of new functions 
in an incrementally evolving 
system 


WHAT ARE THE SOFTWARE 
REQUIREMENTS ? 


* Modifiability 

* Efficiency 

* Reliability/Safety 

* Understandability 

* Correctness 

* Portability/Interoperability 
/Extensibility 


SOFTWARE 

MUST 

BE 

MODIFIABLE 

AND 

EFFICIENT 


DEFINITIONS 


MODIFIABILITY is the ability to control change within 
software, thus achieving new results without undesirable 
or disastrous side effects. 


EFFICIENCY is the extent to which software performs its 
intended functions with a minimum of consumption of 
computing resources. 


SOFTWARE 

MUST 

BE 

RELIABLE 

AND 

SAFE 



DEFINITIONS 


RELIABILITY is the ability of a program to perform a required 
function under stated conditions for a stated period of time. 


SAFETY is the ability of software to protect life apd 
property in the presence of "N" faults. 


SOFTWARE 

MUST 

BE 

UNDERSTANDABLE 

AND 

CORRECT 


DEFINITIONS 


UNDERSTANDABILITY is the extent to which the software's 
algorithms and data structures are easily perceived and 
easily interpreted. 


CORRECTNESS is the extent to which software is free from 
design defects and from coding defects - that is fault free, 
the extent to which software meets its specified requirements 
and the extent to which software meets user expectations. 


SOFTWARE 

MUST 

BE 

PORTABLE, • 
INTEROPERABLE AND 
EXTENSIBLE 



DEFINITIONS 


PORTABILITY is the ease with which software can be 

transferred from one computer system or environment 
to another. 


INTEROPERABILITY is the ability to "use" the entities. that 
are "ported" among systems and the properties of the 
entities, the relationships to other entities, and the 
properties of these relationships. 


DEFINITIONS 


EXTENSIBILITY is the result of models and rules which allow 
controlled changes with predictable effects to be made to 
both interfaces and the models of services and resources on 
any side of the interfaces. 


SOFTWARE 

LIFE 

CYCLE 



WHAT IS THE 
SOFTWARE LIFE CYCLE? 



DEFINITION 


SOFTWARE LIFE CYCLE 


A software engineer's model of the 
activities and phases involved in the 
processes of producing and sustaining 
a system's software products from 
conception through retirement. 


NASA SOFTWARE ACQUISITION 
LIFE CYCLE MODEL 


* Software Concept & Project 
Definition 

* Software Initiation 

* Software Requirements 
Definition 

* Software Architecture Design 

* Software Detail Design 



NASA SOFTWARE ACQUISITION 
LIFE CYCLE MODEL 


* Software Implementation 

* Software Systems Integration 
and Testing 

* Software Acceptance Testing 
and Delivery 

* Operation and Maintenance Transition 


SUSTAINING ENGINEERING 
ACTIVITIES 


* System Requirements Analysis 

* Software Requirements 
Analysis 

* Preliminary Design 

* Detailed Design 

* Coding and Unit Test 

* Computer Software Component 
Integration 


SUPPORTING ACTIVITIES 


* Documentation 

* Configuration Management and 
Integration Control 

* Quality Management 

* Review 

* Verification & Validation 

* Communication Through the 
Project Object Base 


SUPPORTING ACTIVITIES 


* Automated Support 

- Technical Tools 

- Management Tools 


IMPACT OF CHANGE ACROSS 

LIFE CYCLE 


PROBLEMS 


* Time 

* Money 


SOFTWARE ENGINEERING 


DEFINITION 


"SOFTWARE ENGINEERING IS THE ESTABLISHMENT, AND 
APPLICATION OF SOUND ENGINEERING CONCEPTS, PRINCIPLES, 
MODELS, METHODS, TOOLS AND ENVIRONMENTS TO SUPPORT 
COMPUTING WHICH IS: 

CORRECT 

MODIFIABLE 

RELIABLE 

EFFICIENT 

UNDERSTANDABLE 

THROUGH THE LIFE CYCLE OF THE APPLICATION." 

(C. MCKAY, 1985) 


IMPACT OF CHANGE ACROSS 

LIFE CYCLE 

SOLUTIONS 


* Early Error Detection 

* Reusable Components 

* High Quality Documentation 

* Automated Tools and Method 


DISCIPLINED APPROACH TO SOFTWARE 
DEVELOPMENT AND MAINTENANCE 
USING: 


* Proven Management Techniques 

* Proven Technical Methods 


COMPUTER SCIENCE 

* 

* 

I 

SOFTWARE ENGINEERING 



* Modifiability 


* Efficiency 


GOALS OF 

SOFTWARE ENGINEERING 

# 

* Reliability * Correctness 


* Understandability 


DEFINITION 


MODIFIABILITY 


Modifiability is the ability to control 
change within software, thus achieving 
new results without undesirable or 
disastrous side effects. 


MODIFIABILITY 


KEY ELEMENTS 


* Controlled change 

* Change without surprises 

* Change without unpredictable 
side effects 


MODIFIABILITY 


IMPLICATIONS 


* Encapsulation of Code and Design 

* Generic, Reusable Units 

* Time Requirements 


DEFINITION 


EFFICIENCY 


Efficiency is the extent to which 

9 

software performs its intended 

function with a minimum 

\ 

consumption of computing 


resources. 


EFFICIENCY 


KEY ELEMENTS 

* Producing the desired result 
with a minimum of effort 
or waste 

* Making optimal use of 
available resources: 
space, time, people, etc. 


EFFICIENCY 


IMPLICATIONS 


* Requires some compromises 

- Time/Space 

- Reliability/Time 


DEFINITION 


RELIABILITY 


Reliability is the ability of a 

9 

program to perform a required 
function under stated conditions 
for a stated period of time. 


RELIABILITY 


KEY ELEMENTS 

* Runs Well 

* Fails Gracefully 



RELIABILITY 


IMPLICATIONS 


* Need for enforced standards 


* Need for normal and exception 
modes of operation 


DEFINITION 


UNDERSTANDABILITY 


Understandability is the extent to 

0 

which the software's algorithms and 
data structures are easily perceived 
and easily interpreted. 


UNDERSTAND ABILITY 


KEY ELEMENTS 


* Systems can be understood in 
appropriate detail throughout 
the life cycle 

* Critical goal in management 
of complex systems 



UNDERSTAND ABILITY 


KEY ELEMENTS 

* Development engineers will not be the 
sustaining engineers 

* In a large, complex, non-stop, 
distributed system which evolves 
incrementally over more than 20 
years, a principal challenge will be 
integration control. 


UNDERSTAND ABILITY 


IMPLICATIONS 


* Design Decisions 

# 

* Documentation Standards 

* Language Selection 


DEFINITION 


CORRECTNESS 

Correctness is the extent to which: 

* software is free from desigruand 
coding defects - that is fault free 

* software meets its specified 
requirements 

* software meets user expectations 


CORRECTNESS 


KEY ELEMENTS 


* The software successfully meets 
the requirements as written 

- Functional Requirements 

- Non-functional Requirements 


CORRECTNESS 


IMPLICATIONS 

* Normal operations are considered 

* Exception conditions are considered 

* Software can be verified and validated 

- Verification - Are we building it 
right? 

- Validation - Did we build the right 
thing? 


SOFTWARE ENGINEERING 

PRINCIPLES 


SOFTWARE ENGINEERING 

PRINCIPLES 


* ABSTRACTION 

* INFORMATION HIDING 

* MODULARITY 

* LOCALIZATION 

* CONFIRMABILITY 

* COMPLETENESS 

* UNIFORMITY 


DEFINITION 


ABSTRACTION 


Abstraction Is an intellectual tool that 
allows one to deal with conceptual 
aspects of a software system apart 
from the implementation details 
allowing an overview of an entire 
system or its components. 


ABSTRACTION 


KEY ELEMENTS 


* Limit amount of detail 

* High Levels -- minimum detail 

* Top-down Design 

* Essential information only 

555 Focus on WHAT not HOW - separate 
the spec from implementation 



DEFINITION 

INFORMATION HIDING 


Information hiding is the process which 
removes all unnecessary details from a 
user's access thereby protecting the 
software system from unexpected or 
unwanted changes. 


INFORMATION HIDING 


KEY ELEMENTS 


* "What" is visible (in Spec) 

* "How" is hidden (in Implementation) 

* Makes certain details inaccessible 

* Protects implementation from 
accidental corruption 


DEFINITION 


MODULARITY 


Modularity is the purposeful structuring 
of elements (or software modules) 
that are integrated to satisfy 
system requirements (loosely coupled). 



MODULARITY 


KEY ELEMENTS 


* Logical division into stand alone units 

* Units have specific function and 
clearly defined interfaces 

* Discrete components 

* Change to one component has 
minimal impact on other components 



DEFINITION 


LOCALIZATION 


Localization is the process of creating 
strongly cohesive programming units, 
that is, locating elements which 
exhibit a high degree of functional 
relatedness within one unit. 


LOCALIZATION 

(Separation of Concerns) 


KEY ELEMENTS 

* Logically related pieces 

* Cohesive - internally tight 

* Loose connection between modules 

* Independent - loosely coupled 

* Allows firewalling of the effects 
of errors, i.e., prevents errors 
within one module from affecting 
other modules. 


DEFINITION 


CONFIRMABILITY 


Confirmability is the evaluation of the 
software system and its components 
from a requirements perspective or 
a design perspective. 


CONFIRMABILITY 


KEY ELEMENTS 


* Can be decomposed and tested 

0 

* Documentation through all of the 
life cycle phases, including 
design decisions and rationale 


DEFINITION 


COMPLETENESS 


Completeness is the process of 
ensuring that all design elements 
are present in the system. 


COMPLETENESS 


KEY ELEMENTS 


All important elements specified 
in the requirements and the design 
are present 


DEFINITION 


UNIFORMITY 


Uniformity is the degree to which 
consistent notation is used. 


UNIFORMITY 


KEY ELEMENTS 

* Consistency across life cycle 

* Standardization in: 

- Language 

- Documentation 

- Coding Style 

- Conventions 



SOFTWARE ENGINEERING 
TOOLS AND METHODS 


DEFINITION 


LIFE CYCLE 


The issues of creating, building 
and sustaining any system from 
conception to retirement. 


DEFINITIONS 


SOFTWARE ENGINEERING 
TOOLS AND METHODS 

TOOLS - APPLY AUTOMATION TO SOFTWARE DEVELOPMENT 
WITHIN THE CONTEXT OF THE METHOD. 


METHODS - PROVIDE A SYSTEMATIC APPROACH INDICATING HOW 
TO DEVELOP INTERMEDIATE SOFTWARE PRODUCTS WITHIN THE 
CONTEXT OF THE LIFE CYCLE MODEL. 



SOFTWARE ENGINEERING 

TOOLS 


SOFTWARE ENGINEERING 

TOOLS 


Program Design Language (PDL) 

# 

* Can be compiled 

- Early error checking 

- Early interface checking 

* Allows for decomposition of problem 

* Design is visible early 

- Limits risks 

* Flows naturally into code 

* Possible drawback: 

- Tendency to focus on detail 
not design 


SOFTWARE ENGINEERING 

TOOLS 


EXAMPLES OF OTHER TOOLS 

- Languages 

- Editors 

- File Managers 

- Debugging Tools 

- Complexity Analyzers 

- Report Generators 


SOFTWARE ENGINEERING 

METHODS 


SOFTWARE ENGINEERING METHODS 

STRUCTURED ANALYSIS AND DESIGN TECHNIQUE (SADT) 


DEVELOPED BY DOUG ROSS OF SOFTECH IN THE EARLY 70S. 
THIS IS A MANUAL SYSTEM WHICH COULD BE AUTOMATED. 


FEATURES: * FORMAL BLOCK DESIGN 

* SIMPLE 

* CLEAR 

* SUPPORTS MODULARITY 


DRAWBACK: * WITHOUT AUTOMATION IT IS 

TEDIOUS TO KEEP CURRENT 


SOFTWARE ENGINEERING METHODS 
STRUCTURED DESIGN 


* FOCUS IS ON ALGORITHMS AND 
OPERATIONS 

m 

* WIDELY USED IN FORTRAN 
APPLICATIONS 


SOFTWARE ENGINEERING METHODS 
JACKSON'S DATA FLOW DESIGN 


* Focus is limited to the data structure 

* Data driven design 

* Widely used in COBOL applications 


SOFTWARE ENGINEERING METHODS 
OBJECT ORIENTED DESIGN (OOD) 


* Method: 

- Select/Develop informal strategy 

- Identify objects and 
operations on those objects 

- Tool: Ada 


SOFTWARE ENGINEERING METHODS 
OBJECT ORIENTED DESIGN (OOD) 


* Approach 

- Considers data structures and 
algorithms as a unit - object 

- Separate WHAT from HOW 


ADA UNDER 

A SOFTWARE ENGINEERING 

UMBRELLA 


QUESTION: 


WHY WAS 
ADA 

DEVELOPED? 


SOFTWARE WAS: 


* COSTLY 

* UNRESPONSIVE 

* UNRELIABLE 

* LATE 

* UNMODIFIABLE 

* NON-PORTABLE 

* INEFFICIENT 

* POTENTIALLY UNSAFE 


ADA UNDER 

A SOFTWARE ENGINEERING 

UMBRELLA 


RATIONALE FOR DEVELOPMENT 


* Costs up 

* Quality down 

* Changing needs 


SOFTWARE ENGINEERING 
AND THE ROLE OF ADA 


* Overall life cycle costs must be 
reduced 

* New approaches are needed.to meet 
the software challenge of the future 
and growing life cycle issues 

* It is imperative to identify sound 
software engineering strategies 

* Software engineering techniques 
must be applied across the life 
cycle 


THE HISTORY OF ADA 

REQUIREMENT DEFINITION PHASE 


HOWLG: Higher Order Language Working Group (DOD) 

STRAWMAN: First draft of requirements for DOD's programming 
language * 

WOODENMAN: Comment on Strawman 

TINMAN: Comment on Woodenman 

IRONMAN: Comment on Tinman 
STEELMAN: Comment on Ironman 


THE HISTORY OF ADA 

REQUIKEMENT DEFINITION PHASE 


RFP's solicited to design language. 
4 Proposals selected to proceed. 


THE HISTORY OF ADA 

REQUIREMENT DEFINITION PHASE 


STEELMAN: Final language requirements document. 

DOD 5000.29: Use only DOD approved language in 
defense systems. # 


DOD 5000.51: Listed approved higher order languages. 


THE HISTORY OF ADA 

DESIGN TEAM SELECTION 


7/78 -- Blue Team: SofTech 

Yellow Team: SRI International 
Red Team: Intermetrics 
Green Team: Honeywell Bull 

11/78 -- Red Team: Intermetrics 

Green Team: Honeywell Bull 

5/79 -- Green Team: Honeywell Bull 
Team Leaders: J. Ichbiah 

J. Barnes 
R. Firth 


THE HISTORY OF ADA 

NAMING THE LANGUAGE (MAY 1979) 


* Ada Lovelace (1815-1851) 

- Worked with Charles Babbage on his 
difference and analytic engines 

- Considered the world's first 
programmer 

- Augusta Ada Byron, 

Countess of Lovelace, 

Daughter of poet Lord Byron 


C-X 


THE HISTORY OF ADA 

ENVIRONMENTAL REQUIREMENTS 


SANDMAN: Initial analysis of environment requirement. 
PEBBLEMAN: Revised environment requirement. 
STONEMAN: Final environment requirement. 


THE HISTORY OF ADA 

MILESTONES 


* ACV - Ada Compiler Validation 

* AJPO - Ada Joint Program Office 

* LRM - Language Reference Manual 
January 1983 

* ANSI MILSTD 1815A (February 1983) 


ADA UNDER 

A SOFTWARE ENGINEERING UMBRELLA 
DE LAUER PRONOUNCEMENT ( 1983 ) 


"...THE ADA PROGRAMMING LANGUAGE SHALL BECOME THE 
SINGLE, COMMON COMPUTER PROGRAMMING LANGUAGE FOR 
DEFENSE MISSION-CRITICAL APPLICATIONS. EFFECTIVE 
1 JANUARY 1984 FOR PROGRAMS ENTERING ADVANCED 
DEVELOPMENT AND 1 JULY 1984 FOR PROGRAMS ENTERING 
FULL-SCALE DEVELOPMENT, ADA SHALL BE THE PROGRAMMING 
LANGUAGE... ." 


ADA FEATURES 


* Strong Specification 

* Strong Typing 

* Tasks 

* Generics 

* Exception Handlers 

* Packages 



DEFINITION 


SPECIFICATION 

* "A specification is a document that 
prescribes in a complete, precise and 
verifiable manner the requirements, 
design, behavior or other 
characteristics of a system or 
system components." (IEEE, 1983) 


STRONG SPECIFICATION 


KEY ELEMENTS 

* All program units have a declared 
interface or specification. 


* Ada enforces compliance with 
this interface. 


DEFINITION 


TYPING 


A type characterizes both a set 
of values and a set of operations 
on those values. 



STRONG TYPING 


KEY ELEMENTS 


* Ada is a strongly typed language 

* All objects (variables and constants) 
in Ada must have a type 

* A type defines: 

- A set of values 

- A set of operations allowed 


DEFINITION 


TASK 

A task is a program unit that may 
execute in parallel with other 
program units. 


TASKS 


KEY ELEMENTS 

* An Ada task operates in parallel 
with other Ada program units 

* Tasking provides parallel processing 

- Single Processor Computers 

- Multi Processor Computers 

- Distributed Networks of Computers 



TASKS 


KEY ELEMENTS 

* An Ada task operates in parallel 
with other Ada program unit’s 

* Tasking provides parallel processing 

- Single Processor Computers 

- Multi Processor Computers 


DEFINITION 


GENERICS 

Generics are parameterized templates 
of a program unit that allow reuse 
of code and that allow libraries of 
programs to be built. 



GENERICS 


KEY ELEMENTS 


* Generic unit is a template or mold 

» 

for other program units - a set of 
subprograms or a set of packages 


* Generics are not executable 




GENERICS 


KEY ELEMENTS 


* Formal parameters (those in the 
template) are replaced with actual 
parameters when it is used 


DEFINITION 


EXCEPTION HANDLERS 

An exception handler is code that 

0 

tells the program what to do if an 
exceptional situation or error 


occurs. 


GENERICS 


KEY ELEMENTS 

* INSTANTIATION is what happens when 
a generic is used. An executable copy 
of the template is created and actual 
parameters substituted. An 
"instance" of the generic is created. 


EXCEPTION HANDLERS 


KEY ELEMENTS 


* Exception Handlers deal with software 
errors without operator intervention 

* Exception events considered 

* Execution abandoned 

* Handlers may restart under 
better conditions 


EXCEPTION HANDLERS 


KEY ELEMENTS 


* Allows for user-defined exceptions 

m 

* Allows for fault-tolerant programming 


DEFINITION 


PACKAGE 


A package is a group of logically 
related entities. 



PACKAGES 


KEY ELEMENTS 


* A package forms a collection of 

» 

logically related entities or 
computational resources 


* A package ENCAPSULATES (puts a wall 
around these resources) 


PACKAGES 


KEY ELEMENTS 

* Package parts: 

- SPEC: Contact between the 

m 

implementation and user, 
identifying visible parts of the 
package. This interface specifies 
which parts of the package may 
be used and how they are used. 

- BODY: implementation hidden 
from user. 


PROS AND CONS OF ADA 


PROS 

* Reduces overall life cycle costs 

* Best language tool available.to meet 
the Space Station needs 

* Improves productivity over the 
life cycle 

* Correctly used, Ada supports 
software engineering goals 
and principles 


PROS AND CONS OF ADA 


CONS 


* Harder to learn 

m 

* Availability of tools and trained 
personnel 

* Ada environments are not 
standardized and run time 
environments are loose 


CURRENT STATUS OF ADA 


* Increasing number of validated 
compilers 

* Over one billion dollars committed 
to Ada projects 


* Involvement across the government, 
industrial and academic sectors 
throughout the free world 


CURRENT STATUS OF ADA 


* The broadening commitment to Ada 
is producing a complement of 
reusable components, libraries of 
software building blocks and 
experienced people. 


SUMMARY OF 
KEY 
POINTS 


SOFTWARE 
MUST BE DESIGNED 
TO WORK CONTINUOUSLY 
FOR 15-30 YEARS 
AT MINIMUM 


2016 




SOFTWARE ENGINEERING 
PRACTICES HOLD 
PROMISE FOR 
MEETING • 

LIFE CYCLE 
NEEDS 


SPACE STATION 
SOFTWARE 
MUST 

SATISFY • 
THE 

SUPER MICE 


SUPER MICE 


SAFETY 

UNDERSTANDABIUTY 

PORTABILITY 

EXTENSIBILITY 

RELIABILITY 

MODIFYABLE 

INTEROPERABILITY 

CORRECTNESS 

EFFICIENT 



ADA WAS 
DESIGNED TO 
SUPPORT THE GOALS OF 
SOFTWARE ENGINEERING 


■inn- 






p - C .£5E! !T AT 1 0* 4 GLOSSARY 




~3-**-5£ - ~ h!..'S 1. rill.. STL- IGlLA. 


Ad:-. w?.3 {designed spec: -f i zs- 1 i / f 


;.j e d c ‘3- •_'< c q iTi p *. t t e r 


systems 


_ f ~ r - r ‘- ociT:3 : 'i L-t i^gc, rsc.l-::^e, 
Eooch, pg. ;;y> 


is a trademark of the US Government, AJF'j. 

ABSTRACTION is an intellectual tool that allrwa cne to 

d Esi ‘-'ith ccncsctual aspects cf a software s,stsin ap-art f rcn the 

in : 1 SiTi-mtati on details allowing an eve?* view of an. «:* * re - •=* = » , f- 

cc-.uccnents. ~ ' ‘ 


A Ci* 1 - Association fc 


□ r L o m d li ting Machinery 


AJfO - Ada Joint Program Office 


ANSI - American National St 

ANET/MI..-2TD lSlcA-l°S3 - t 
pr-cgrammi ng I snguaas. 


andsrds Institute 


approved standards f or* the Ad< 


CA 1 3 


rvda Programming Support Environment 
Common AFSE Interface Set 


CLHESIGN - new tightly bound or related its internal elements are to 
or.tr another.* within a moo u Is* f , G. Eooch , pq. 29’ 

C JMF LETENESo 10 the process cf ensuring that all design elements are 
present in the system. 

CC<w i r.. Ti-iP I L I ; r . is the evaluation of the software system a n d it 
Cw'i^onsr.ts from a requirements perspective or a design per sees 

COUPLING - a measure cf the strength cf i ntsr connect 1 or among mocule* 
' t - Epoch „ pg. 29) “ 

CL“- F , *E n - is the extent to* wnich software is free from ussio.n 
-Jo-: sets and f rom coding defects - that is -fault free - the o.tent to 
which software meets its specified requi remen t s and the extent to 
which software meets user er.pectat 1 ons. 

DcD - United States Department of Defense 


E* c *wIuNCy is the extent to which 5 of tware performs its intended 
functions with a minimum cf consumption of computing resources . 


ORIGINAL PAGE IS 
OF POOR QUALITY 


ft 1.1 1 


E^EFTIGN HAf Jr*LEF-:3 ~ An e;;c £ -i:n handler ; r, coae 
pr c y i* -iTi what to dc 1 f an Exceptional situation or 


that idle the 

error occur-. 


L " . iN:, EIl.IT/ 15 the result of models and rules which allot' c^-^roll 
changes with predictable effects to be made to both interfaces and t 
- ■ -- f ' ^ ^ =r.nd rescLircss on an/ side c* the inter -faces. 


m 


FAC TCP IMG is a or coses tf 


face or mg x e she 
pc. 149)" 


d i « t r i b u o as c on c r c I 


the point at which word: 




io :q ‘ i b u o t -o c . An e . . am;: is- o 
top-down approach to human organizations. (Fr gasman 


FAN- IN indicates how man y modules directly control a g; 
(Fressms n , pg . 150) 


1 - 


FAN -QIJT i 3 
- sn.tr cl 1 ed 


a measure of the nuir.tsr of modules 


a rt c t h e r mod u 1 e , ; F 


are dxrectl\ 


mreeoman, pg. 150) 


GENEFICG are parameter 1 z ed templates of a program -.mt that allow 
reuse cf code and that allow libraries of pr egram:: ce ouilt. 

INrCEMATION HIDING is the process which removes all unne; es ear > 
details from a user’s access thereby protecting the software system 
from unexpected or unwan ted changes. 

I NTEF:0*t“fcAE' XL I T r is the ability to "use' ! the entities that are 
"per tad 1 amen g systems and the properties cf the entities. 
rei atiGrsh: o» to other entities, and the properties cf these 

relationships. 

KhFoE - Kernel of the Ada Programming Support Environment 

LI^-L CvCLE - Creation, construction and maintenance cf anv system fr 
conception to retirement. 

UDCALIZ ^TICN is the process of creating strongly cohesive programmin 
uni-c, that is, locating elemsntsi which exhibit e. hi. gn degree of 
f unc t i o n a 1 r si atsdness- wi thi n one un it. 

MAP5E - Minimal Tocl Set of the Ada Programmi ng Support En . i ronment 
MIL-3TT 131 5A-1 933 - See ANS I ,'M I L-STE 181 5A - 1 73 £E 

h..-.- I r I. L I T is the ability to control change within ssftw-rs. thus 
ac.hi -v:ng nevi results without undesirable or disastrous side effects 

MODULE 17 I Ty is the purposeful structuring of elements (or software 

modules/ that are integrated to satisfy system recuirgments 'loosely 
coupled). 


0 E DECT - A n object in A d a 
const ant . 


s any kind cf data element, variable or 


ORIGINAL PAGE IS 
0F POOR QUALlf? 


0 b : Sw i --DF. I ENTE D Z E E I 0 N J f 


R ms thpqpi zz . that rs::(fiiosa 2 a pr - r • __ , _ 

£SS ~ upcn =a!-6fu.Ii . ccnsi aerad cssi-gV decisions A 


FY-iCf . ML" c. ” A 


a c ,ag e 1 s ' a group ;t 


: j.il> relate d otitis-;, 
:p'Jd-.':ade. 


f?::- - - 

r ~ I .1 >7- 1 T' 

. r / 

L. SH i u n r s v 



PDF. TAPI 

LIT Y s 

x. i- 

u 1 t 

= ease w 1 1 h 

uni ch 

•cr. - 

r. e c o mi 

puts r Sy 

■• cr +- 

em or envir 

on ment 

to 

PROJECT 

OBJECT 

BA 

SE - source 

cede 

and 


use . 


RELIABILITY is the ability cf a prcgrs 
ur-iber stated conditions -for a stated period or time 


m to c s r f o r m a requires f ■_; - ( 


SnRtiTN is the ability of software to protect 
presence of "N" -faults. 


"SOFTWARE ENGINEERING is ths 


life - 


•nd property m the 


® — —Tablishment. and application of c oLinP 
ena: nasrir.g concepts, principles, models, methods, tools and ' 
en . ironments along with standards, guidelines and practises to su-oor- 
■-.'imputing which is: correct, modifiable, reliable, efficient, and 

understandable, through the life cycle of the application.'' -- Chari e 


Nc'.ay, 193o 


SOFTWARE ENGINEERING METHODS - provide a systematic approach 
indiuating how to develop intermediate software products within the 
context of the life cycle model. 

SOFTWARE ENG PEERING TOOLS - apply automation to .oftw.r. d.-.lcpm.nt 
within the conte;;t of the software engineering method. 

SOFTWARE LIFE CYCLE - A software engineer’s model of the activities 
and phases involved in the processes of producing and sustaining a 
system s software products from conception through retirement. 

SFr-CIFICATION - "A specification is a document that prescribes in a 
complete, precise and verifiable manner the requi rsment s , desian. 

behavior or other characteristics of a system or system 'components. " 

(lthE, 19S-. ) 

TASK: - A task is a program unit that may execute in parall=l with 
Cuher program units. 

TYFINC - a type characterizes both a set of values and a set of 
operations on those values. 

UNDERS7 ANDABI L I TY is the extent to which the software's algorithms an. 
de.upr. structures are easi 1 . perceived and easil, interpreted. 


ORIGINAL PAGE IS 
OF POOR QUALITY 


UNIFC'FMIT 
the life 


s the degree ti_> which consistent notation 
c 1 e. 


L'.Sed through 




ORIGINAL PAGE fS 

OF POOR QUALITY 



QVEF'V JEW 


1 1 /?£ 


Solt w ars Engineering and the Fo ie of Ada 

u j e c t : v as: T o introd u c t- the basic te r it, : n c 1 a c ' and 

concepts of Software Engineering and Ada. 
In this seminar the participant will: 

* Rev lew the life c vc 1 e mod e 1 . 

* Observe the application of the goals 
and principles of software 

eng i neer i ng . 

* Gain an introductory under stand ; c of 
the features of Ada language. 

Recommended for: Managers dealing with Shuttle pr t ;scts. 

Space Station projects or any software 
related effort. 


Frs-requi sites: None 


Course Outline: 1. The Software Crisis: Problems and 

Sol u.t ions. 

2. The Mandate of the Space Station 
Pr ogr am 

3. The Software Life Cycle Model 

4. Software Engineering 

5. Ada Under the Software Engineering 
Umbrel 1 a 


Course Material: Notebook 


Format: Lecture using foils 

Duration: 2 hours 




EXECUTIVE SEMINAR 
OUTLINE 


1 


Software Engineering and the Role of Ada 

I. The Software Crisis: Problems and Solutions 

Discuss the "software crisis" environment. Identify 
the key elements and causes of this crisis. 

# Over budget and 1 ate 

# Actual life cycle cost 

# Modification is difficult, time consuming and costly 
i Tne Software Invasion 


II. Mandate of the Space Station Program 

1.0 Provide a brief profile of the Space Station 
pr ogr am: 

* Large 

* Complex 

* Di str i bated net war l:s 

* Embedded components 

* Long-term life expectancy 

* Non-stop operation 

* Over 100 million lines of code 


2,0 Describe the software challenge imposed by such 
projects: 

# Many needs initially undetermined and unknown 
% Many requirements initially undefined 

# Personnel continuity an unrealistic goal 
t Vendor continuity an unrealistic goal 

# Many needs are never fully determined - always 
changing 

# Integration of new functions in an 
incrementally evolving system 


3.0 Identify the software requirements imposed by 
this challenge. 

* MODIFIABILITY 

* EFFICIENCY 

* PEL I ABILITY /SAFETY 

* UNDER3T AND ABILITY 

* CORRECTNESS 

* PORTABILITY/ I NTEF DFEPAB I L I TY/EX TENS I B I L I TV 


ORIGINAL PAGE IS 
OF POOR QUALITY 


III. 


The Software Life Cycle 


1.0 Define Software Life Cycle. 


Briefly d i ccu.ee the componen t a of the 1 i f er cycle 
model pertinent to NASA/ JSC projects 

2.1 Acquisition Activities 

NASA Software Acquisition Life Cycle Model. 
(Software Management 2< Assurance Program) 

* Software Concept •!*. Project Definition 
i Sof t war e I n i t i at ion 

t Sof t w a r s R e q u i r e m e n t s D e f i n i t i on 
i Software Architecture Design 

* Software Detail Design 

% Software Implementation # 

* Software Systems Integration •!: Testing 

* Software Acceptance Testing & Delivery 

* Operation ?•: Maintenance Transition 


2-2 Sustaining Engineering Activities 

* System Requirements Analysis 

* Software Requirements Analysis 

* Preliminary Design 
t Detailed Design 

* Coding and Unit Test 

* Computer Software Component Integration 


2.3 Supporting Activates 


* 

* 

* 

* 

* 

* 

* 


Document at i on 

Conf i gurati on Management 

dual i ty Management 

Re vi ew 

Verification E« Validation 
Automated Support 

Communication through the Project Object 
Base 


ORIGINAL PAGE IS 
OF POOR QUALfTY 


Discuss the impact c-f change in terms of time and 
money across the life cycle. Include a specific 
reference to the current cost of the sustaining 
engineering or maintenance phase. Suggested 
so 1 ut ions: 

* Early error detection 

* R s u s a b 1 e c o mp o n e n e t s 

* High quality documentation 

* Automated tools and methods 


IV. Software Engineering 


1.0 Give working definitions of Software Engineering. 

1.1 Discuss the move from, traditional Computer 
Science to Software Engineering in industry 
and academia. 

1.2 Give examples of projects experiencing 
productivity increases and fewer errors with 
the application of software engineering 
methods. 


t- The goals of software engineering: 

* MODIFIABILITY 

* EFFICIENCY 

* RELIABILITY 

* UNDER5T AMD AB I L I T Y 

* CORRECTNESS 


U Identify' and briefly describe the principles of 
sof tware eng i nser i ng . 

* ABSTRACTION 

» INFORMATION HIDING 

* MODULARITY 

* LOCALIZATION 

* CONFIRMABILITY 

* COMPLETENESS * 

* UNIFORMITY 


ORIGINAL PAGE IS 
OF POOR QUALITY 


4 


Brief 1 v i dent i f y s o me c f t h e i; o c I s 
for applying software engineering 
principles to the life cycle phase 
the tools and methods discussed gi 
background, when it was developed, 
who uses it. 


and methods 
goals and 
s. For each 
v e a brief 
by whom, and 


of 


Methods: 

* Structured Analysis Z. Design Techniques (EAD7' 

* Structured Design 

* Jackson ’ = Data Flow Design 

t Object Oriented Design (00D) 


Tool s 

* Program Design Language (FDL) 
4 Other Tools 

- Languages 

- Editors 

- File Manager s 


Under a -Software Engineering Umbrella 


Introduce Ada language and environments with a 
brief historical overview, identifying the 
milestones of its development. 

1-1 Give the rationale for its development, the 
DOD study and findings. Identif. the design 
teams in the competition, the winning team' 
and team leaders (Jean Ichbiah. J.B.F. 
Barnes, F» . F i r t h ) . Explain h o w Ada was 
named . 

1.2 Review the milestones in the evolution cf 
requirements for Ada programming 
environments. Give a synopsis of the 
S t o n e m a n a r c.h itecture suggested for t h e s e 
environments, including KAFEE, MAFSE, APSE- 
Discuss the development o-f reusable, 
shar able libraries o-f tools. Be e~.pl i c i t 
about the current availability ot these 
tools. 


ORIGINAL PAGE IS 

OF POOR QUALITY 


■’ Briefly identify the unique Ada -features and its 
^slationship to sof t war e eng 1 neer ing. 

* STRONG SPECIFICATION 

* STRONG TYPING 

* TASKS 

* GENERICS 

* EXCEPTION HAfJDLERS 

* PACKAGES 


3.0 Summarize the prose and cons o-f Ada. 

PROS: 

* Reduces overall life cycle costs 

* Best procedural language tool available to meet 
Space Station needs 

* Improves productivity over the life c t cle 

* Correctly used, Ada supports software 
engineering goals and principles 

CONS: 

* Harder to learn 

* Availability of tools and trained personnel 

* Ada environments are not standardized and run 
time envi ronments are loose 

4.0 Summarize the current status of Ada 

* Increasing number of validated compilers. 

* Over one billion dollars committed to Ada 
projects. 

f Involvement across the military, industrial and 
academic sectors. 

* F'roduction of reusable components; building of 
libraries. 



5.0 Conclude the session by summarizing the points 
covered . 


% Overall life cycle costs must be reduced. 

* New approaches are needed to meet the software 
challenge of the future and growing life cycle 
i ssues. 

t It is imperative to identify sound software 
engineering strategies. 

* Software engineering techniques must be applied 
across the life cycle. 

* Ada, baselined for the Space Station, was 
designed to implement the goals and principles 
of software engineering. 


ORIGINAL PAGEJS 
OF POOR QUALITY 


