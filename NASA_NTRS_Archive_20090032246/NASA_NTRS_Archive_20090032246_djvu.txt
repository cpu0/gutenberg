Human-System Integration Scorecard Update to VB.Net 


Blaze D. Sanders 1 

NASA, Johnson Space Center, Houston, TX, 77058 

Mentor: 

Mihriban Whitmore Ph.D., Johnson Space Center, Habitability and Human Factors Branch 


Abstract 

The purpose of this project was to create Human-System Integration (HSI) scorecard 
software, which could be utilized to validate that human factors have been considered early in 
hardware/system specifications and design. The HSI scorecard is partially based upon the revised 
Human Rating Requirements (HRR) intended for NASA’s Constellation program. This software 
scorecard will allow for quick appraisal of HSI factors, by using visual aids to highlight low and 
rapidly changing scores. This project consisted of creating a user-friendly Visual Basic program 
that could be easily distributed and updated, to and by fellow colleagues. Updating the Microsoft 
Word version of the HSI scorecard to a computer application will allow for the addition of useful 
features, improved easy of use, and decreased completion time for user. One significant addition 
is the ability to create Microsoft Excel graphs automatically from scorecard data, to allow for 
clear presentation of problematic areas. The purpose of this paper is to describe the rational and 
benefits of creating the HSI scorecard software, the problems and goals of project, and future 
work that could be done. 




NASA Intern, Habitability and Human Factors Branch, Johnson Space Center, Johns Hopkins University. 



NASA MUST - Internship Technical Paper 


I. Introduction 

The first step in converting the Microsoft Word version of the HSI scorecard into computer 
software was choosing a programming language. C++, Java, and Visual Basic.Net (VB.Net) 
were considered. C++ program execution may have possibly been faster; however, development 
time would have been much longer. Java benefits include the ability to easily distribute program 
across many computer platforms and a shorter development time than C++. Conversely, because 
the HSI scorecard was to have an intricate graphical user interface (GUI) Java was not chosen. 
Ultimately Visual Basic.Net was chosen because of the following reasons: One, it can be 
distributed to any Windows computer where during installation process the .NET Common 
Language Runtime engine can be automatically installed from the web. And with the Mono 
Project framework, multi-platform distribution capability will be comparable to Java. Two, the 
Microsoft integrated development environment (IDE), is inherently designed to create complex 
GUI’s with relative ease. Thus greatly decreasing development time. Three, with Visual 
Basic.Net being produced by Microsoft, automation and communication between programs such 
as Word and Excel with HSI scorecard software was straightforward, and used object oriented 
programming methods. And Four, The simplicity of the VB.Net programming language should 
allow many members of the Habitability and Human Factors branch at NASA to effectively 
update, maintain, distribute, and make suggestions about code. 

The overall coding process was fairly straight forward and many new coding techniques 
pertinent to VB.Net were utilized. Techniques such as XML documentation, multi-control event 
handling sub procedures, and Window CE Registry control. XML documentation of code will 
permit future programmers to better debug and maintain the code, by producing a professional 
structured documentation library. Multi-control event handling sub procedures allow for quicker 


2 


Summer 2009 



NASA MUST - Internship Technical Paper 


code execution and more concise code. This in turn will make debugging and maintaining code 
easier too. Windows CE Registry control enables sections of a finite state machine to be stored, 
even when program is terminated or computer turned off. This ability will enable users to 
score/rate the system under analysis, quicker and with less effort. The end software product 
created this summer was a Beta version, which is developed sufficiently for user testing and 
reevaluation. Future work will involve creating a Menu system, improving data import 
capabilities, and enhancing user usability by creating shortcut keys for all functions. 

II. Goals and Purpose 

The optimization of the human-machine system will be of great important as NASA continues 
its Exploration System Mission Directorate. The combination of human ingenuity and computer 
hardware speed and reliability is what enabled Apollo. Human factors should be on the mind of 
every human space flight engineer, yet that isn’t always the case. As of today, incorporation of 
HSI practices are not formally mandated at NASA. The overall goal of this project was to 
improve interdisciplinary collaboration by designing a clearly defined, unified, and repeatable 
HSI process. The HSI scorecard can be used in baseline, preliminary and critical design reviews; 
allowing for tracking and assessment of specific systems and subsystems with respect to time in 
a consistent manner. The hope is that the HSI scorecard will benefit NASA by accelerating 
system design lifecycles and limiting modifications after system deployment, therefore reducing 
cost across the board. To do this a tool encompassing all segments of Human-System integration 
is needed. My role in this project was to convert the fantastic idea conceptualized by Dr. 
Mihriban Whitmore, Dr. Aniko Sandor, Debbie Berdich, Elkin Romero, Kritina Holden, and 
Kerry McGuire into software. Their Microsoft Word version was a great initial step; however, to 
fully exploit the increased productivity, decreased development cost, and increased collaboration 


3 


Summer 2009 



NASA MUST - Internship Technical Paper 


triggered by a HSI tool a better deployment method was needed. With moderate updates to the 
Beta version of code, a fully functional HSI tool can be created in the very near future. What 
follows are the basic features and benefits of the HSI scorecard at this point in time (Aug 2, 09). 


Main Tab: 

> Red error labels are displayed if user forgets to enter data. 

> Reviewer name, date, and from fields automatically fill in after user runs program once. 

> Program instructions are accessible with one button click. 

> When importing data from MS Word HSI scorecard progress bar is displayed. 

All these features keep user informed of program status and ensure that scorecard data will 
be complete when review occur. Program also includes an adjustable auto-save feature which 
allows work to be automatically saved at user defined intervals. 



Figure 1. Main tab of HSI scorecard software. 


Question Tabs: (Tabs #1 thru #10): 

> Status of question rating & comment completion is visually displayed on buttons to 
remind user of information entered. (See figure 2.) 


Button Visual 

Meaning 

Gray background 

Question hasn’t been rated or received rating above two with no user comment left. 


Informs user that question received rating of 2 or less and needs commenting. 

Yellow background 

User changed a rated question to “Not Rated”, and didn’t update comment. 
Or user clicked “Leave Comment” button and left no comment. 

Green Checkmark 

Rating and commenting of question is complete. 


Table 1. Leave Comment Button State 


4 


Summer 2009 







NASA MUST - Internship Technical Paper 


> Entire tab can be Not Rated with single click of button, decreasing completion time. 

> User can’t move to next tab until all “Leave Comment” buttons are green or gray. 



Figure 2. A question tab in HSI scorecard software. 


Acronym and Organization List Tab: 

> A simple web browser was inserted into the HSI scorecard to quickly view two important 
JSC websites; Acronym Central and JSC Organization List, without the need to open a 
full internet browser such as Mozilla Firefox, Internet Explorer, or Google Chrome. 



Figure 3. Tab Acronym and Organization List Tab HSI scorecard screenshot. 


j 


summer 2009 






NASA MUST - Internship Technical Paper 


III. Impact of the MUST Internship on My Career Goals 
The opportunity to work at Johnson Space Center and work on such an interesting and 
relevant project has no comparable metaphor. This summer has done nothing but strengthen my 
commitment to human exploration and reveal the multitude of ways an engineer can become 
involved in human space flight. Seeing the level of commitment, differing view points, and skills 
each JSC employee has intensified my wish to have multiple degrees in a variety of engineering 
and science fields. From computer science and chemical engineering to electrical engineering 
and geology. With extensive schooling and additional internship experiences I will understand an 
array of specific engineering details, and become a better JSC team member and thus a more 
competent Martian astronaut. 

This paper can’t do justice, the amount of new knowledge I have gained, but I will try. In 
a general knowledge sense I have discovered that one way human exploration of Mars solves 
much of the engineering challenges involved in such a trip. Imagine the exquisite spacecraft that 
could be built if the equipment used only for the return voyage didn’t have to be transported 
around for 2 Vi years. Struggling through portions of this project allowed me to retain new 
engineering concepts much better, because challenges require thought, while memorizing 
knowledge at school is useful but has its limits in producing a useful engineer. From a computer 
science/engineering approach I can say that I have discovered many new tools and methods for 
approaching problems, and that computer programming outside of school is much less stressful 
and something that I really enjoy doing. I described some computer science insight I gained in 
the introduction; however, there is so much more that I have learned. From creating backups of 
source code both locally and on a server, to the hidden automation of Microsoft Word and Excel 
within a program using COM communication. I have learned to control operating system 


6 


Summer 2009 



NASA MUST - Internship Technical Paper 


variables such as time, date, kill process events, form control events, and useable workspace 
pixel resolution. I understand how to add spell check, timer, and web browser capabilities to the 
programs I write. Yet the most important thing I learned this summer was the idea of modular 
code design. As I begin to work on bigger and bigger software projects being able to easily and 
efficiently interconnect different fragments of code will be vital. My mentor Dr. Whitmore did a 
fantastic job this summer. She clearly defined the problem at beginning of internship and gave 
encouraging pressure when necessary. She encouraged me to attend as many presentations, team 
meetings, and lectures as possible. And to volunteer at the High School Aerospace Scholars 
program at JSC. Dr. Whitmore introduced me to other agency wide NASA employees, where I 
gain insightful knowledge through one-on-one communication. Computer programming is 
something that requires little guidance and Dr. Whitmore did a good job leaving me to work 
independently. Nonetheless I always had engaging, interesting work to perform. I never felt like 
the intern of the office. I’m incredibly thankful for the opportunity M.U.S.T has given me, and I 
hope this program continues far into the future. Hopefully one day a Martian M.U.S.T staff 
member will be encouraging and inspiring students to explore the moons of Jupiter and Saturn. 

Acknowledgments 

I would like to thank John Pace who was a great source of quick and relevant programming 
information, along with Aniko Sandor and Kerry McGuire who gave critical suggestions about 
usability of HSI software. 

References 

Whitmore, M., Sandor A., McGuire K., Berdich D. (2009). Tools for Hum an -Systems Integration 
Assessment: HSI Scorecard. Johnson Space Center Houston, TX. 

Liberty, Jesse. Programming Visual Basic.NET. 2nd. Sebastopol, CA USA: O'Reilly & 
Associates. 2003. 

Foxall, James. Sams teach yourself Visual Basic 2008 in 24 hours: Complete Starter Kit. 
Indianapolis, IN. Sams. 2008. 


7 


Summer 2009 



