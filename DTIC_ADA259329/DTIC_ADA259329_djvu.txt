AD-A259 329 

lllllllllllllllllllllllllllllli 


SOFTWARE DESIGN DOCUMENT 


FOR THE 

GENERIC AVIONICS DATA BUS TOOL KIT 


Prepared For: 

Ada Joint Program Office 
Ada Technology Insertion Program 


Accesion For 

NTIS CRA&I 
OTIC TAB 
Uriannouiiced 


Distribution/ 


Availability Codes 

Oist 

fiaZ_ 

Avail 

Spc 

and/or 
dial 


Justification 




Prepared By: 

Computer Technology and Simulation Department 
Systems Engineering Test Directorate 
Flight Test Engineering Group 
Naval Air Warfare Center / Aircraft Division 
Patuxent River NAS, MD 20670 


f 

October 4, 1991 


92-33116 




A 



92 12 2C 


016 








REPORT DOCUMENTATION PAGE 


Form Approved 
OPMNo. 0704-0133 


m 


r>Liblic faponing burdtn tor me coioction ot Mormaiion e Miimalwj to 1 tour p*r rMponu. ndudmg m* tim tor nwurt n g itsirucliont. narctiing ustirrg dita sourcM gatonng and manaimrrg tto data 

I naadad. and raviawtng ttw ccladion at Mormalbn. Sand commants ragarding me burdan aatitnala or any ottor aapael of me colaclion at Inlonnaiion. includmg auggaatbna tor raduemg ma burdan to Wastangain 
Haadquartara Sarvica. Otractorala for Intonnatton Cbarabore and Rapora. 121$ Jatlaraon Dave Htgtway. Sula 1204. Artngion. VA 22202-4302. and lo ma Ollica of Mormabon and Ragulaiory Attaira. Ottica ot 
ManagamanI and Budgal Wasbmglon. DC 20503 


3 REPORT TYPE AND DATES COVERED 


1. AGENCY USE ONLY (Leave Blank) 

2 REPORT DATE 

Software Design Document for the 

October 4,1991 


4. TITLE AND SUBTITLE 

Software Design Document for the Generic Avionics Data Bus Tool Kit 




7 PERFORMING ORGANIZATION NAMEfSI AND ADDRFSStES) 
Computer Technology & Simulation Department 
Systems Engineering Test Directorate 
Flight Test Engineering Group 
Naval Air Warfare Center/Aircraft Division 
Patuxent River NAS, MD 20670 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 



10 SPONCORINGA^ONITORING AGENCY 
REPORT NUMBER 


11. SUPPLEMENTARY NOTES 


12a DISTRIBLmON/AVAILABILITY STATEMENT 



12b, DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

This Software Design Document describes the structure of the Generic Avionics Data Bus Tool Kit (GADBTK), which is 
part of the Ada Technology Insertion Program’s (ATIP) Ada binding project. The Computer Software Configuration Item 
(CSCI) described in this design document is a collection of related routines that will be combined to form a bus monitor 
application. The primary goal of the project is to produce reusable data bus software components. 


(USTRIBlrtiUN STATEMEJB' 


Approved for public xeleas4| 
Distcibu 




17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 


UNCLASSIFIED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 



16 PRICE CODE 


20 LIMITATION OF ABSTRACT 

UNCLASSIFIED 


tandarb Form 298, (Rev. 2-89) 
Prescrioeo by ANSI Std 239-128 


NSN 7540-01-280-550 























Table Of Contents 


LIST OF nCURES .viii 

1 SCOPE. 1 

1.1 Identification . 1 

1.2 System Overview . 1 

1.3 Document Overview. 1 

2 REFERENCED DOCUMENTS . 2 

2.1 Government Documents . 2 

2.2 Non-Government Documents. 2 

3 PRELIMINARY DESIGN . 3 

3.1 CSCI Overview. 3 

3.1.1 CSCI Architecture. 6 

3.1.1.1 Bus_Interface to Monitor_Exec. 7 

3.1.1.2 Bus_Interface to Activity_Monitor. 7 

3.1.1.3 Monitor_Exec to Activity .Monitor . 7 

3.1.1.4 Monitor.Exec to Input.Parser . 8 

3.1.1.5 Monitor.Exec to Output.Formattcr . 8 

3.1.1.6 Output.Formatter to Input.Parser. 9 

3.1.1.7 Output.Formatter to Activity.Monitor . 9 

3.1.2 System States and Modes . 11 

3.1.3 Memory and Processing Time Allocation. 12 

3.2 CSQ Design Description . 14 

3.2.1 Input.Parser . 14 

3.2.2 Output.Formatter . 16 

3.2.3 Activity .Monitor. 18 

3.2.4 Bus.Interfacc. 19 

3.2.5 Monitor.Executivc . 21 


II 





























4 DETAILED DESIGN . 23 

4.1 DD CSC Input Parser . 23 

4.1.1 IP_User_Conimand_Interfacc.Stan_Input. 24 

4.1.1.1 Start_Input Design Specification Constraints. 24 

4.1.1.2 Start_Input Design . 24 

4.1.2 IP_User_Coinniand_Interface.Shutdown_Input . 25 

4.1.2.1 Shutdown_Input Design Specification Constraints. 25 

4.1.2.2 Shutdown_Input Design . 25 

4.1.3 IP_User_Coinniand_Interface.Get_Next_Coinmand . 26 

4.1.3.1 Get_Next_Cominand E)esign Specification Constraints. 26 

4.1.3.2 Get_Next_Comniand Design . 26 

4.2 DD CSC Output_Formatter . 27 

4.2.1 OF_User_Output_Interface.Set_Mode . 29 

4.2.1.1 Set_Mode Design Specification Constraints. 29 

4.2.1.2 Set.Mode Design. 29 

4.2.2 OF_User_Output_Interface.Set_Fonnat . 30 

4.2.2.1 Set_Format Design Specification Cwstraints. 30 

4.2.2.2 Set_Format Design . 30 

4.2.3 OF_User_Output_Interface.Set_Update_Ratc . 30 

4.2.3.1 Set_Update_Rate Design Specification Constraints. 30 

4.2.3.2 Set_Updatc_Rate Design . 30 

4.2.4 OF_User_Output_Interface.Write . 31 

4.2.4.1 Write Design Specification Constraints. 31 

4.2.4.2 Write Design . 31 

4.2.5 OF._User_Ouq)ut_Interface.Request_Qiannel . 31 

4.2.5.1 Request_Qiannel Design Specification Constraints. 32 

4.2.5.2 Request_Channel Design . 32 


111 































4.2.6 OF_Uscr_Output_Interface.Rclease_Channel. 32 

4.2.6.1 Release_Channcl Design Specification Constraints. 32 

4.2.6.2 Release_Channel Design . 32 

4.2.7 OF_User_Output_Interface.Clear_Display. 33 

4.2.7.1 aear_Display Design Specification Constraints. 33 

4.2.7.2 Qear_Display Design . 33 

4.2.8 OF_Uscr_Output_Interface.Start_Display . 33 

4.2.8.1 Start_Display Design Specification Constraints. 33 

4.2.8.2 Start_Display Design . 34 

4.3 DD CSC Activity_Monitor. 35 

4.3.1 AM_Background_Monitor.Tum_Background_Monitor_On . 36 

4.3.1.1 Tum_Background_Monitor_On Design Specification Constraints. 36 

4.3.1.2 Tum_Background_Monitor_On Design . 37 

4.3.2 AM_Background_Monitor.Set_Interface_Unit_Numbcr . 37 

4.3.2.1 Set_Interface_Unit_Number Design Specification Constraints. 37 

4.3.2.2 Set_Interface_Unit_Nuniber Design . 37 

4.3.3 AM_Background_Monitor.Change_BM_ParaineieTS. 38 

4.3.3.1 Change_BM_Parameters IDesign Specification Constraints. 38 

4.33.2 Change_BM_Paramcters Design. 38 

4.3.4 AM_Background_Monitor.Get_Bus_Activity . 38 

4.3.4.1 Get_Bus_Activity Design Specification Constraints. 38 

4.3.4.2 Gct_Bus_Activity Design . 38 

4.3.5 AM_Background_Monitor.Tum_Background_Monitor_Off. 39 

4.3.5.1 Tuni_Background_Monitor_C)ff Design Specification Constraints. 39 

4.3.5.2 Tum_Background_Monitor_Off Design. 39 

4.3.6 AM_Background_Monitor.Kill_Background_Monitor_Task . 40 

4.3.6.1 Kill_Background_Monitor_Task Design Specification Constraints. 40 


IV 































40 


4.3.6.2 Kill_Background_Monitor_Task Design 

4.4DDCSCBus_Interface. 41 

4.4.1 BI_1553_Interface.Select_Unit . 43 

4.4.1.1 Select_Unit Design Specification Constraints. 43 

4.4.1.2 Select_Unit Design . 43 

4.4.2 BI_1553JNTERFACE.Stan_RT . 44 

4.4.2.1 Start_RT Design Specification Constraints. 44 

4.4.2.2 Start_RT E>esign . 44 

4.4.3 BI_1553_INTERFACE.Stop_RT . 45 

4.4.3.1 Stop_RT Design Specification Qinstraints. 45 

4.4.3.2 Stop_RT Design . 45 

4.4.4 BI_1553_INTERFACE.Start_BC . 46 

4.4.4.1 Start_BC Design Specification Constraints. 46 

4.4.4.2 Start_BC Design . 46 

4.4.5 BI_1553JNTERFACE.Stop_BC . 46 

4.4.5.1 Stop_BC Design Specification Constraints. 46 

4.4.5.2 Stop_BC Design . 47 

4.4.6 BI_1553_INTERFACE.Start_Monitor . 47 

4.4.6.1 Start_Monitor Design Specification Constraints. 47 

4.4.6.2 Start_Monitor Design . 47 

4.4.7 BI_1553_INTERFACE.Stop_Monitor . 48 

4.4.7.1 Stop_Monitor Design Specification Constraints. 48 

4.4.7.2 Stop_Monitor Design . 48 

4.4.8 BI_1553_IN7BRFACE.Transmit . 49 

4.4.8.1 Transmit Design Specification Constraints. 49 

4.4.8.2 Transmit Design. 49 

4.4.9 BI_1553_INTERFACE.Receive . 50 


V 
































50 


4.4.9.1 Receive Design Specification Constraints. 

4.4.9.2 Receive Design . 50 

4.4.10 BI_1553_INTERFACE.Monitor_RT . 50 

4.4.10.1 Monitor_RT Design Specification Constraints. 51 

4.4.10.2 Monitor_RT Design . 51 

4.5 DD CSC Monitor_Executive . 52 

4.5.1 Ex_1553_Monitor.Rotate . 57 

4.5.1.1 Rotate Design Specification Constraints. 57 

4.5.1.2 Rotate Design . 57 

4.5.2 Ex_1553_Monitor.Initializc . 57 

4.5.2.1 Initialize Design Specification Constraints. 57 

4.5.2.2 Initialize Design . 57 

4.5.3 Ex_1553_Monitor.Get_Selection_Data . 58 

4.5.3.1 Get_Selection_Data Design Specification Constraints. 58 

4.5.3.2 Get_Selection_Data Design . 58 

4.5.4 Ex_1553_Monitor.Deactivate . 59 

4.5.4.1 Deactivate Design Specification Constraints. 59 

4.5.4.2 Deactivate Design. 59 

4.5.5 Ex_1553_Monitor.Display_Data . 60 

4.5.5.1 Display_Data Design Specification Constraints. 60 

4.5.5.2 Display_Data Design. 60 

5 esa DATA . 61 

5.1 Intra Package Global Data . 61 

5.2 Inter Package Global Definitions. 68 

6 CSCI DATA FILES . 72 

6.1 Data File to CSC-CSU Cross Reference. 72 

6.1.1 PORTS_1553. 72 


VI 
































8 NOTES 


73 


8.1 Definition Of Terms and Abbreviations . 73 

APPENDIX A . 74 

10.1 Data Flows . 74 

10.2 Data Stores . 76 

10.2 Terminators. 76 

10.2 Processes . 76 

10.2 Control Flows . 78 

10.3 Primitives . 79 

APPENDK B . 89 

10 ADDITIONAL ADA STRUCTURE CHARTS FOR CSC’s . 89 

10.1 Daul Port Manager . 90 

10.2 Screen Manager . 91 

10.3 Asyncronous Input. 92 

10.4 UT Bit Manipulations . 93 

10.5 UT Variable String . 94 

APPENDIX C . 95 

10 PROGRAM DEPENDANCY CHART FOR MONITOR APPUCATION. 95 























List Of figures 


Figure 1 1553 Bus Interface System Boundaries . 3 

Figure 2 Bus Monitor Application System Boundaries . 5 

Figure 3 CSC - to - CSC Interface Relationships . . 6 

Figure 4 Monitor Application State Transition Diagram . 11 

Figure 5 Input_Parser Data Flow Diagram . 14 

Figure 6 Input_Parser Control Flow Diagram . 14 

Rgure 7 Output_Formatter Data Flow Diagram . 16 

Figure 8 Output_Formatter Control Flow Diagram . 17 

Figure 9 Activity .Monitor Data Flow Diagram. 18 

Figure 10 Activity.Monitor Control Flow Diagram. 18 

Figure 11 Bus.Interface Data Flow Diagram . 19 

Figure 12 Bus.Interface Control Flow Diagram . 20 

Figure 13 Monitor.Execudve Data Flow Diagram . 21 

Figure 14 Monitor.Executive Control Flow Diagram . 22 

Figure 15 Input Parser Ada Entity Diagram . 23 

Figure 16 Output Formatter Ada Entity Diagram . 27 

Figure 17 Activity.Monitor Ada Entity Diagram . 35 

Figure 18 Bus Interface Ada Entity Diagram. 41 

Figure 19 Monitor Executive Ada Entity Diagram . 52 

Table 1 Monitor Application State Transition Table. 12 

Table 2 Monitor Application State / CSC Table . 12 


viii 


























1 Scope 


1.1 Identification 

This Software Design Document describes the structure of the Generic Avionics Data Bus Tool 
Kit (GADBTK), which is part of the Ada Technology Insertion Program's (ATIP) Ada binding 
project The Computer Software Configuration Item (CSCI) described in this design document is 
a collection of related routines that will be combined to form a bus monitor application. The 
primary goal of the project is to produce reusable data bus software components. 

1.2 System Overview 

The Air Combat Environment Test and Evaluation Facility’s (ACETEF) Maned Flight 
Simulator (MFS) labcMaiory is a man in the loop high fidelity flight simulator that was designed to 
provide avionics system stimulation to actual aircraft hardware components while pilots arc flying 
simulated combat scenarios. Other ACETEF laboratories provide radio frequency (RF) 
simulation/stimulation axKl environment simulation. The output of the simulations at the various 
component laboratories can be combined to provide system stimulus to an actual aircraft which is 
suspended in an RF shielded anechoic chamber. Alternately individual subsystem can be 
stimulated and tested in a laboratory setting. The ACETEF is used to test the electronic systems of 
an aviation platform in a completely secure ground lest facility at substantial cost savings over 
conventional flight testing. The Generic Avionics Data Bus Tool Kit (GADBIK) CSQ will be 
used in the ACETEF to provide simulation software interface to the actual system data buses under 
test. It will also supply monitor and diagnostic tools to aid in evaluating the test equipment. 

Additional requirements for a robust Ada • 1553 binding were added because funding for this 
project was underwritten by the Ada Technology Insertion Program (ATIP) which is sponsored by 
the Ada Joint Program Office (AJPO) to promote Ada reuse in the DOD community. 

1.3 Document Overview 

This document will detail the preliminary and detailed design of each Computer Software 
Con^nent (CSC) / Computer Software Unit (CSU) that comprise the Generic Avionics Data Bus 
Tool Kit The preliminary design will focus on the object relationships that exist within the 
system. The documentation of these relationships will include pictorial information as well as text 
to support the design. The primary drawing convention used in the entity relationship diagrams is 
die Bohr method. The detailed design will specify the entire system in Ada. The document is 
intended to capture the rational of the design structure of the code. This document will also 
provide requirements traceability to show how each part of this design meets specific requirements 
analysis criteria. 


1 





2 REFERENCED DOCUMENTS 


2.1 Government Documents 

The following documents of the exact issue shown form a part of this speafication to the extent 
specified herein. In the event of conflict between the documents referenced herein and the contents 
of this specification, the contents of this specification shall be considered a superseding 
requirement. 


STANDARDS: 

Military 

MIL-STD-1553B, 8 September 1986 Digital Tunc Division Commaitd/Response Multiplex 

Data Bus 

MIL-STD-1815A, 22 January 1983 Ada Programming Language 
DOD-STD-2167A, 29 February 1988 Defense System Software Development 

2.2 Non-Government Documents 

The following documents of the exact issue shown form a part of this specification to the extent 
specified herein. In the event of conflict between the documents referenced herein and the contents 
of this specification, the contents of this specification shall be considered a superseding 
requirement. 


STANT)ARDS: 

AA-EF88A-TE, February 1985 
F-6/89-10M, 1988 

ISBN 0-442-23805-3, 1989 

MFS Users Manual, Volume 3 


VAX Ada Programmer’s Run-Tune Reference Manual 
MIL-STD-1553 Designer’s Guide, DDCILC Data 
Device Corporation 

Ada Quality and Style, The Software Productivity 
Consortium 

Software Style Guide and Configuration Management 


2 





3 PRELIMINARY DESIGN 


3.1 CSCI Overview 

The purpose of the Generic Avionics Data Bus Tool Kit CSCI is to provide the necessary 
interface building blocks for applications written in the Ada programming language to transfer data 
on the MIL.-STD-1553 multiplex data bus. The abstraction is to provide sufficient hardware 
independence that only the hidden low level hardware interface specific procedures need be 
modified to allow operation on different hardware platforms. The tool kit will provide all data 
structures and operators needed to interface with a standard 1553 implementation. In addition to 
bus primitives a sei of reusable units will be developed to facilitate building 1553 plications. 
These units will be used to build an engineering monitor/emulator application. The bus monitor 
application is the actual system that the design is focused on. Throughout this design the bus 
intenace is treated as a part of the monitor application however a separate context diagram is shown 
for tlie interface to emphasize the inde*^ undent nature of that component. 



• INTERFACE DEFINITIONS 
Configuration_Info = 

BNF: DefauIt_Bus_Number + Intcrface_Numbcr + Inierface_Address + Machine_Type 
Data_Received = 

BNF: {Bus.Word) 


3 







Data_Selection = 

BNF: RT_Num + (SA_Nuni) + (Tran_Rec) + (Bus_Num) + (Waich_Mask) 
Raw_Bus_Data = 

BNF: {Bus_Word) 

Transmit_Data = 

BNF: (Bus.Word) 

Status = 

BNF: [Normal + Bus_Error + Uscr_Error + Conrig_Error] 


4 





Figure 2 Bus Monitor Application System Boundaries 
• INTERFACE DEFINITIONS 


Bus.Data = 

BNF: [RT_Siatus I Bus_Message] 

Captured_Data = 

BNF; {Bus.Word) 

User_Data = 

BNF: [RT_Num I SA_Num I Tran_Rec I Bus_Num I Bus_Mcssage I Out_Filc I 
Updatc_Rate I Output_Mode I Watch_Mask] 

Command = 

BNF: (Character) 

Comments: Command input from user is an unformatted string that must match one of the 
valid commands. 

Data Type: String 

Data Representation: alpha.numeric 

Data Size: 80 bytes 


5 








3.1.1 CSCI Architecture 



6 








3.1.M Bus_In(erface to Monitor Exec 
TransiTUt_Data = 

BNF: {Bus_Word) 

Bus_Word = 

Data Type: Unsigned_Word 
Data Representation: numeric 
Data Size: 2 bytes 
Data Range: (0,65536) 

Bits: 16 
Status = 

BNF: [Normal + Bus_Error + Uscr_EiTor + Config_EiTor] 

Data_Received = 

BNF: {Bus_Word) 

Bus_Word = 

Data Type: Unsigned_Word 
Data Representation: numeric 
Data Size: 2 bytes 
Data Range: (0,65536) 

Bits: 16 

3.1.1.2 Bus_Interface to Activity_Monitor 

Data_Reccived = 

BNF: {Bus_Word} 

Bus_Word = 

Data Type: Unsigned_Word 
Data Representation: numeric 
Data Size: 2 bytes 
Data Range: (0,65536) 

Bits: 16 

3.1.1.3 Monitor_Exec to Activlty_Monitor 
C!uncnt_Mode = 

BNF: [Hex + Decimal + Octal + Binary + Fonnaned + Activity + Preferred_Data + Idle 
+ Logging] 

Data Type: Modc_Typc 


7 





3.1.1.4 Monitor_Exec to Input__Parser 

Command_Que = 

BNF: {CuiTent_Command) 

CuiTem_Command = 

BNF; [Select_RT + Select_SA + SelectJTR + Select_Bus + Set_Display_Modc 
+ Set_Log_Mode + Stan_Logging] 

Data Type: Command_Type 
Data Representation: Enumeration 
Next_Cominand = 

BNF: Current_Command 
CuiTent_Coinmand = 

BNF: [Select_RT + Select_SA + SelectJTR + Select_Bus + Sct_Display_Modc 
+ Set_Log_Mode + Stan_Logging] 

Data Type: Coinmand_Type 
Data Representation: Enumeration 
Valid_Data = 

BNF: [ Integer I String I Enumeration] 

Status = 

BNF: [Normal + Bus_Error + User_ETTor + Config_Error] 

3.1.1.5 Monitor_Exec to Output_Formatter 

Update.Rate = 

BNF: Seconds 

Comments: This message to the output formatter expresses how often to refresh the 

screen. 

Data Type: Integer 

Data Representation: numeric 

Data Range: (0,60) 

Default Value; 3 
Units of Measure: Seconds 
Accuracy: 1 
Message_Data = 

BNF; Message_ID_Block + Messagc_Contcnt 
Message_ID_Block = 

BNF: Message_Typc + (Window_Id) 

Messagc_C^ntent = 


8 





BNF: [ {Character) 1 (Bus_Word) ] 

Commenis: This field contains the text of the message to be displayed 
Data Type: String 
Data Representation: alphanumeric 
Message_Type = 

BNF: [Info + Error + Bus_Data + Prompt] 

Data Type: Output_Message_Type 
Data Representation: enumeration 
Window_Id = 

Data Type: Integer 
Data Representation: numeric 
Data Size: 1 byte 
Data Range: (1,4) 

Default Value: 1 
Current_Mode = 

BNF: [Hex + Decimal + Octal + Binary + Formatted + Activity + Preferred_Data + Idle 
+ Logging] 

Data Type: Mode_Type 

3.1.1.6 Output_Formatter to Input^Parser 
Screen_Id = 

Column + Line 
Line = 

Data Type: Integer 

Data Representation; numeric 

Data Range: (1,24) 

Default Value: 1 
Column = 

Data Type: Integer 

Data Representation: numeric 

Data Range: (1,80) 

Default Value: 1 

3.1.1.7 Output_Formatter to Activlty_Monitor 
Bus_Activity = 

BNF: (RT.Status) 


9 



RT_Status = 

BNF: [Active + Inactive + Unknown -f No_Response] 
Comments: Most recently observed status of a given RT 
Data Type: An_RT_Status 
Data Representation: enumeration 


10 




3.1.2 System Slates and Modes 


lnpu1_Detected 

Get_User_lnput 


T 


IDLE 


T 


Initialize Bus 


lniflalize_Complete 


-»- 

ACCEPT_USER 


■1 

Wait_ForJnput 

JNPLfT 


INITIALIZING 



Tertnlnale_Comniand 
Walt For Input 

_:.i:_ 


CXJTPUT_TO 

usm 


j 


Mode Read 


Recelva 


Read_Completa 

Wrtte_Message 



READING 

lnput_Detecled 

Get_UserJnpgt 



Wrtte_Complete 


Receive 


1 


Mode_Wrrte 


Transmit 
*— lnput_Detecled 
Get_User_lnput 


WRITING 


Write.CofT^ete 

TrantmM 
_I 


Transmlt_Compete 

WrIte.Message 


Figure 4 Monitor Application State Transition Diagram 


11 











STATE 

EVENT 

ACTION 

NEXT STATE 

ACCEPT_USER_INPUT 

Inp u l_Te rm in« (•d 

W«it_Fot_lttput 

CLE 


Mode_Wrila 

Trenemil 

WRmNG 


Mode.Read 

Receive 

REAOriG 


S«t_M ode_lnitializ« 

lnitialize_Bue 

INrriALIZING 

IXE 

lnput_D«l»ci*d 

Get_Ueer_lnput 

ACCEPT_USEn_INPUT 

MITIALIZING 

lnilializ«_Compi*i« 

Weit_For_lnpul 

Of 

OUTPUT TO 

U5ST 

T*nnin«t«_ConMnand 

W*it_Fof_liipul 

BLE 


Writ«_Compl«l« 

Receive 

READMG 


Writa_Cotnplet« 

Trenemit 

WRfTMG 

READNG 

R«ad_ComplgM 

Wrile_Mesuge 

OUTPUT TO 

UGB) 


loput_Detecied 

Get_Ueer_lnput 

ACCEPT_USER_WPUT 

WRITNG 

Transniit_Comp«t« 

Wrile_Me>sege 

OUTPUT TO 

USER 


Input Detected 

Get_User_lnput 

ACCEPT_US£R_WPUT 


Table 1 Monitor Application State Transition Table 



Table 2 Monitor Application State / CSC Table 

For infonnadon on data flow between the CSCs while operation in the given states see figure 

3. 

3.1.3 Memory and Processing Time Allocation 


12 





































































Not Applicable. 





3.2 CSCI Design Description 

The following diagrams detail the preliminary design of the CSCs identified in figure 3. 


3.2.1 Input_Parser 




14 







The input parser CSC meets the requirements identified as the user command interface in the 
SRS for the Generic Avionics Data Bus Tool Kit. These requirements are identified sp)ecifically in 
figure #2 and paragraph 3.8.1. 


IS 



3.2.2 Output_Formatter 



16 










The Output Formatter meets the requirements for the user output interface identified in figure 
#2 and paragraphs 3.2.2.2 and 3.8.4 of the SRS for the Generic Avionics Data Bus Tool Kit 


17 







3.2.3 Activity_Monitor 



Figure 9 Activity_Monitor Data Flow Diagram 



Figure 10 Activity_Monitor Control 
Flow Diagram 


The Activity Monitor will partially fulfil the requirements of paragraph 3.2.2,2 of the SRS for 
the Generic Avionics Data Bus Tool Kit 


8 












3.2.4 Bus Interface 



Figure 11 Busjnterface Data Flow Diagram 









The Bus Interface fulfills the requirements identified in 3.2.1 and the associated subparagraphs 
of the SRS for the Generic Avionics Data Bus Tool Kit. 


20 










3.2.5 Monitor Executive 


valid Data 


-Next Command- 


Interpreter 


Message_Data 


Update.Rato 


Co(nposad_Command * 


Data_S«lection' 


Command_History 


Message_Oata 


Log_rile_Nain« \ Dal* To_Tran$mll 


Commanded Mode 


Mode_ 

Control 


Dala_ 

Manager 


Message_Data 


'’Captured_Data 


Transmit Data 


• Current Mode 


Data Received 


Current Mode 


Figure 13 Monitor_Executive Data Flow Diagram 


21 










Figure 14 Monitor_Executive Control Flow Diagram 


The Monitor Executive meets the requirements derived from paragraph 3.2.2 trf the SRS for 
the Generic Avionics Data Bus Tool Kit The Monitor Executive is not a direct requirement of the 
referenced document Its requirement was derived from the need to coordinate the transfer of data 
and control information between the other CSC units. 


22 







4 DETAILED Design 

The following paragraphs present the detailed design of the CSG identified as the Generic 
A\’ionics Data Bus Tool Kit. The format followed will be to present the Ada entity diagrams for 
each CSC then any Ada entity diagrams necessary for each CSU finally the Ada specification for 
the unit and a textual description will be presented. For more Ada structure charts see appendix B. 

4.1 DD CSC Input Parser 


Text_ 

Utilities 


Unbounded 

_FIFO_ 

Queue 


Text_K) 


Asynaonous 

Jnput 


IP_U 5 er_Comfnand_lnterface 


A_Valkl_Com 


A_Om<i_Reco J i Verity_U 11 GelJJne 

scr_Data Umt 11 


Gei_Nert_Qnn 


Start_lnput 


CocTrfian(l_Qjeue 


Stop_lnput 


Parser 


Shutdown 


Figure 15 Input Parser Ada Structure Diagram 23 























package IP_USER_COMXAND_:nTERFACE Is 


type a_val:d_cowmand is 


SE1EC7_RT, SELECT_SA, SEIECT_TRANS, 

SELECT_B'JS, MCDE_HEX, MODE_DECIKAL, 

MODE_BINARY. MODE_CX:TAL, MODE_FORMATTED, 
MODE_ACTIVITY, MODE_STAT'JS, MODE_PREFERRED_DATA, 
MODE_LOGGING, MODE_RAW_DATA, START_L0GG1NG, 
SET_LOG_NAME, SET_SNAP_LEN, CAHCEL_SELECTION, 
RESET_D1SP. EXECUTE, QUIT, 


SEIECT RCV. 


stop_logg:ng. 


NONE); 


subtype A_COMMAND_DATA Is string (1..80); 

type A_VALID_COMMAND_RECORD is 
record 

Command :A_VAL:d_COMMAND; 

Command_Data :A_COMMAND_DATA; 
Data_Lenght INTEGER; 
end record; 


procedure Start_Input; 


procedure Get_Next_Comm.ar,d (COMMAND: out A_VA1,1D COMMAND RECORD); 


procedure Shutdown_Input; 
end IP_USER_C0MMAND_INTERFACE; 

4.1.1 IP_User_Coinmand_In(erface.Start_Input 

This control interface socket is used to start the input parser processor. All local data to the 
package body is initialized and asyncronous input is enabled. 

4.1.1.1 Start_Input Design Specification Constraints. 

The input parser depends on the output formatter so if the output fonnatter is not running when 
this call is made then input processing will block until the output formatter is staned. 

4.1.1.2 Start_Input Design 

a. Inputs: n.a. 


24 








b. Outputs: 


n.a. 


c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Parser entry Start.Parser: declared in local package body. 

4.1.2 IP_User_Command_Interface.Shutdown_Input 

Hiis procedure will allow the task Parser to end in an oderly manner. 

4.1.2.1 Shutdown_Input Design Specification Constraints, 
n.a. 

4.1.2.2 Shutdown_Input Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: TASKING.ERROR: If tasking enor is raised a diagnostic message 

is directed to the output screen. The error is 
not propagated since it most likely is raised if 
the Parser task has already exited. 

g. Used Elements: Task Parser entry Kill.Parser: declared in local package body. 


25 





4.1.3 IP_User_Cominand_Interface.Get_Next_Coinmand 

This procedure returns the next command the parser has read from the user. 

4.1.3.1 Get_Next_Command Design SpeciHcation Constraints, 
n.a. 

4.1.3.2 Get_Next_Command Design 

a. Inputs: n.a. 

b. Outputs: Command: A_VALID_OOMMAND_RECORD 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: If que empty return null command else return command. 

f. Error Handling: none. 

g. Used Elements: Function Que_Empty: declared in Command_Qucs. 

Function Next_Entry : declared in Command_Qucs. 


26 








27 













































with TD_MODE_DEFINITIONS; use TD_M0DE_DEFIN1TI0NS; 

with BI_1553_WORD_DEFINITIONS; use Bl_1553_WORD_DEEINITIOSS; 

with TD_T:KE_Tt?ES; use TD_TIME_TyPES; 

with 1 :T_VAR:ABEE_S:r:NG; use aT_VARIA3LE_STR:NC; 

package OF_USER_OUTPUT_INTERFACE is 

subtype MESSAGE_TEXT_TYPE is TEXT_TYPE(512); 
subtype ERROR_TEXT_TYPE is TEXT_TYPE(80); 

type A_MESSAGE_ARRAY is array (A_HORD_COONT) of A_DATA_WORD; 

type BUS_DATA_TYPE is 
record 

COMMAND : A_DATA_COMMAND_WORD; 

BUS_NUMBER : INTEGER; 

UNIT_NUMBER : INTEGER; 

RESPONSE : A_STATUS_WORD; 

BUS_DATA : A_MESSAGE_ARRAY; 

ACTIVE : BOOLEAN; 

end record; 

type A_DATA_MESSAGE_TYPE is (TEXT, BDS_DATA, ERROR); 

type A_MESSAGE_DATA_BLOCK (MESSAGE_TYPE : A_DATA_MESSAGE_TYPE) is 
record 

case MESSAGE_TYPE is 
when TEXT -> 

MESSAGE : MESSAGE_TEXT_TYPE; 
when ERROR «> 

ERROR_DATA : ERROR_TEXT_TYPE; 
when B0S_DATA -> 

BUS_DATA ; BUS_DATA_TYPE; 
end case; 
end record; 

type A_CORSOR_ADDRESS is 
record 

Column : POSITIVE; 

Line : POSITIVE; 
end record; 


28 





i.-cceduie Set._Kode (Mor,itor_Mode : in A_MOSITOR_MC':;':) ; 
procedure Sec_Format (Format_Mode : in A FCRMAT_MCDE); 
procedure Set_Update_Rate (Update_Interval : In SECONDS); 
procedure Write (Message : in A_MESSAGE_DATA_BUX:K); 
procedure Request_Channel(Cursor : out A_CORSOR_ADDRESS); 
procedure Release_Channel; 
procedure Clear_Display; 
procedure Start_Display; 
procedure Shutdown_Display; 

end OF_USER_OUTPUT_INTERFACE; 

4.2.1 OF_User_Output__Interface.Set_Mode 

Place the output formatter in the specified operational mode. 

4.2.1.1 Set_Mode Design Specification Constraints. 

n.a. 

4.2.1.2 Set_Mode Design 

a. Inputs: Monitor_Mode: A_MONITOR_MODE 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 


29 





c. Local Data: Rate_Changc: BOOLEAN 


d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Hmer entry Sct_Dclay : declared in local package body. 

4.2.4 OF_User_Output_Interface.Write 

This procedure causes the data passed through the interface to be displayed on the data portion 
of the output screen. 

4.2.4.1 Write Design Specification Constraints. 

If the time needed to display the data written is greater than the time til] the next all to this 
procedure there is no guarantee that the data will be displayed before the new data is displayed. 

4.2.4.2 Write Design 

a. Inputs: Message : A_MESSAGE_DATA_BLOCK 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Formatter entry Write_Data: declared in local package ^ody. 

4.2.5 OF_User_Output_Interface.Request_Channel 

When this procedure is called output processing is stopped and the coordinates of the input 
buffer area of the screen arc returned to the caller. Output remains suspended until the 




f. Error Handling: none. 


g. Used Elements: Task Formatter entry Set_Mode : declared in local package body. 

4.2.2 OF_l]ser_Output_Interface.Set_Format 

Define the data format the output will be displayed in by the output formatter task, 

4.2.2.1 Set_Format Design Specification Constraints, 
n.a. 


4.2.2.2 Set_Format Design 

a. Inputs: Format_Mode: A_FORMAT_MODE 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Formatter entry SeuFormat: declared in local package body. 

4.2.3 OF_User_Output_Interface.Set_Update_Rate 

This interface allows the rate for update of the RT status map portion of the display to be set. 

4.2.3.1 Set_Update_Rate Design Specification Constraints. 

Default rate will be set at 3 seconds. 

4.2.3.2 Set_Update_Rate Design 

a. Inputs: Updaic_Intcrval: SECONDS 

b. Outputs: n.a. 


30 





Release_Channcl interface is called. 


4.2.5.1 Request_Channel Design Specification Constraints, 
n.a. 

4.2.5.2 Request_Channel Design 

a. Inputs: n.a. 

b. Outputs: Cursor: A_CURSOR_ADDRESS 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Formatter entry Get_Channel: declared in local package body. 

4.2.6 OF_User_Output_Interface.Release_Channel 

This procedure causes the display processor to resume screen output after a call to 
Request_Channel has suspended output 

4.2.6.1 Release_Channel Design Specification Constraints, 
n.a. 

4.2.6.2 Release_Channel Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 


32 








f. Error Handling; none. 


g. Used Elements: Task Formatter entry Resume : declared in local package body. 

4.2.7 OF_User_Output_Interface.Clear_Display 

This procedure forces the display processor to reinitialize the display. This means the display 
is cleared and the background for the current noode and format arc repainted. Display of data will 
resume the next time new data is written to the formatter. 

4.2.7.1 Clear_Display Design Specification Constraints. 

The data on the display at the time the call is madpi will not be redisplayed unless the same data 
is placed in a subsequent write operation. 

4.2.7.2 Clear_Display Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Formatter entry Initialize_DispIay: declared in local package 

body. 

4.2.8 OF_User_Output_Interface.Start_Display 

This procedure enables screen output from the display processor. 

4.2.8.1 Start_Display Design Specification Constraints, 
n.a. 


33 







4.2.8.2 S(ar(_Display Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: Start Background_Monitor 

Enable Display_ProcesstM‘ output 

f. Error Handling: none. 

g. Used Elements: Procedure Tum_Background_Monitor_On : declared in package 

AM_Background_Monitor. 

Task Formatter entry Start: declared in local package body. 









4.3 DD CSC Aclivlty^Monitor 



35 




















with BI_1553_KORD_DEFISITIONS; 

with TD_Tiy£_TYPES; use TD_TIKE_TYPES; 

with Ir.Leriace_15£3; use Interface_1553; 

package AM_BACKGRC'JNE_MCN:TCR is 

package WDEF renames BI_1553_W0RD_DEF1NITI0NS; 

subtype AN_RT_ADDRESS is WDEF.A_REMOTE_TERMINAL_ADDRESS range 

WDEF.A_REMOTE_TERMINAL_ADDRESS'first.. 

WDEF.A_REMOTE_TERMINAL_ADDRESS•pred( 

WDEF.A_REMOTE_TERMINAL_ADDRESS * last) ; 

type A_REMOTE_TERM:nAL_STATE Is (ACTIVE_N0W. — RT responding. 

ACTIVE, — RT was active, but ceased. 

MC_ONLY, — MC commanding, no response. 

INACTIVE); — No activity observed. 

type AN_RT_STATE_ARRAY is array <AN_RT_ADDRESS) of A_R£MOTE_TERKINAL_STATE; 

procedure Turn_Background_Monitor_ON (History_Length : in SECONDS 120; 

Sample_Rate ; in SAMPLES_PER_SECOND 10); 

procedure Set_Intcrface_Unit_Number (Onlt_Number : in A_Interface_Unit); 

procedure Turn_Bac)«ground_Monitor_OFF; 

procedure Change_BM_Parameters (Hlstory_Length : in SECONDS 120; 

Sample_Rate ; in SAMPLES_PER_SECOND 10); 

procedure Get_Bus_Activity (Actlvity_Record : out AN_RT_STATE_ARRAy); 

procedure Klll_Background_Monitor_Task; 

end AM_BACKGROUND_MONITOR; 

4.3.1 AM_Background_Monitor.Turn_Background_Monitor_On 

This procedure will initialize the timers and starts the task to keq> the RT activity data. 

4.3.1.1 Turn_Background_Monitor_On Design Specification Constraints. 


36 





n.a. 

4.3. 1.2 Turn_Background_Monitor_On Design 

a. Inputs: Hisiory_Lcngth : SECONDS 

SampIe.Rate: SAMPLES_PER_SECOND 

b. Outputs: n.a. 

c. Local Data: Past.EKiration : SECONDS 

Thc_Sainplc_Raie: SAMPLES_PER_SECOND 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Activity_Monitor entry Tum_On : declared in local package 

body. 

4.3.2 AM_Background_Monitor.Sel_Interface_Unit_Number 

This procedure selects the CTSD MMBI interface unit that will be monitored 

4.3.2.1 Set_Interface_Unit_Number Design Specification Constraints, 
n.a. 

4.3.2.2 Set_Interface_Unit_Number Design 

a. Inputs: Unit_Number; A_UNIT_NUMBER 

b. Outputs: n.a. 

c. Local Data: Thc_1553_Intcrface_Unit : A_UNn'_NUMBER 

d. Signals: n.a. 

e. Algorithms: n.a. 


37 






f. Error Handling: none. 


g. Used Elements: n.a. 

4.3.3 AM_Background_Monitor.Change_BM__Parameters 

This procedure allows the operational parameters to be modified dynamicaUy during execution. 

4.3.3.1 Cbange_BM_Parameters Design Specification Constraints, 
n.a. 

4.3.3.2 Change_BM_Parameters Design 

a. Inputs: Histoiy_Length: SECONDS 

Sample_Rate: SAMPLES_PER_SECOND 

b. Outputs: n.a. 

c. Local Data: Past_Duration : SECONDS 

Thc_Sample_Rate: SAMPLES_PER_SECOND 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Activity_Monitor entry Change_Settings: declared in local 

package body. 

4.3.4 AM_Background_Monitor.Get_Bus_Activity 
Interface to take a snapshot of the current Bus Activity Map. 

4.3.4.1 Get_Bus_Activity Design Specification Constraints, 
n.a. 

4.3.4.2 Get_Bus_Activity Design 

a. Inputs: n.a. 


38 






b. Outputs: Activity_Record : AN_RT_STATE_ARRAY 

c. Local Data: Current_RT_State_Table : AN_RT_STATE_ARRAY 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Activity_Monitor cnny Rqx>rt_Activity: declared in local 

package body. 

4.3.5 AM_Background_Monitor.Turn_Background_Monitor_^Off 
Suspend background monitor. 

4.3.5.1 Turn_Background_Monitor_Off Design SpeciHcation Constraints, 
n.a. 

4.3.5.2 Turn_Background_Monitor_Off Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Activity_Monitor entry Tum_Off: declared in local package 

body. 


39 









4.3.6 AM_Background_Monitor.Kill_Background_Monitor_Task 

4.3.6.1 KiII_Background_Monitor_Task Design Specification Constraints. 

4.3.6.2 Kill_Background_Monitor_Task Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 

g. Used Elements: Task Activity_Monitor entry Kill: declared in local package body. 


40 






BL1553_lnterface 


Select_UnK 

Start_Rt 

Stopjtt 

Start_ftc 

StopJlc 

StarX_MonKor 

Transmit 




Monitorjtt 



41 













with BI_1553_W0SD_DEF:NITI0NS; use BI_1553_HORD_DEF2N2TIONS; 

racoge B:_1 3_:NT£RFACE is 

B'JS_DATA_FOSMAr_ERROR : exception; 

HARDWAR£_FAILURE : exception; 

KERNAi_SYSTEM_ERROR ; exception; 

RANGE_ERROR : exception; 

type MESSAGE_TYPE is (COMMAND,RESPONCE); 

type A_BUS_STATUS is (INITIALIZED. N0T_REIN1TIALIZED, 

NOT_INITIALIZED, OOT_OF_MEMORY, 

PARAMETER_ERROR); 

subtype AN_INTERFACE is INTEGER range 0..3- 
subtype A_MFS_BUS is INTEGER range 0 .. 1 ; 
subtype A_UNIBUS is INTEGER range 0..2; 

subtype A_TIME_TAG is INTEGER range INTEGER*first..INTEGER*last; 

procedure Select_Unit (Interface_Number : AN_INTERFACE :» 0; 

Bus_Number : A_MrS_B0S 0; 

Vnibus_Number : A_DNIBDS 0); 

procedure Start_RT (Remote_Terminal : in A_REM0TE_TERM1NAL_ADDRESS; 

Status : out A_BUS_STATUS); 

procedure Stop_RT {Remote_Terminal : in A_REMOTE_TERMINAL_ADDRESS); 

procedure Start_BC (Status : out A_B0S_STATUS); 

procedure Stop_BC; 

procedure Start_Monitor (Remote_Terminal ; in A_REMOTE_TERMINAL_ADDRESS 

Status ; out A_BUS_STAT0S); 

procedure Stop_Monltor (Reniote_Terminal ; in A_REMOTE_TERMINAL_ADDRESS) 

generic 

type A_TRANSMIT_MESSAGE_BUFFER is limited private; 
type A_B0S_0VERHEAD_W0RD is limited private: 


42 






prccedure Transmit (Data 


in A_TRANSy.IT_KESSAGE_B'JFFEK; 
Bus_Word : in A_EVS_CV£?^.EAD_WCRD ; 
Fonn : in MESSAGE_T!?E; 

Subaddress : in A_SJ3AGrrESS := 0); 


generic 


type A_RECEIVE_MESSAGE_BUFFER is private; 
type A_BUS_OVERHEAD_WORD is private; 
procedure Receive (Data : out A_RECEIVE_MESSAGE_BUFFEF; 

Bus_Word : out A_BUS_OVERHEAD_WORD; 


Time : out A_TIME_TAG; 


Form s in 
RT_Number ; in 
Subaddress : in 


MESSAGE_TyPE; 

A_REMOTE_TERMINAL_ADDRESS; 
A_SUBADDRESS); 


generic 

type A_M0N1T0R_MESSAGE_BUFFER is 
procedure Monitor_RT (Coiimand_Word 
Data 

Status_Word 

Time 

Form 

RT_Number 

SubaddresE 


private; 

: out A_DATA_COMMAND_WORD; 

out A_M0N1T0R_MESSAGE_BUFFER; 
out A_STATUS_WORD: 
out A_TIME_TAG; 
in MESSAGE.TYPE; 
in A_REMOTE_TERMINAL_ADDRESS; 
in A_SUBADDRESS); 


end BI_1553_INTERFACE; 


4.4.1 BI_1553_Interface.SeIect_Unit 

This procedure is used in an environment where multiple 1553 hardware interfaces exist in 
parallel to select the specific unit to operate on. The bus to default to is also selected with this 
procedure. Additionally for use on the CTSD MMBI interface adaptor the VAX Unibus number is 
needed to uniquely identify the unit 


4.4.1.1 Select_Unit Design Specification Constraints, 
n.a. 


4.4.1.2 Select_Unit Design 

a. Inputs: Interface.Numbo': AN_INTERFACE 

Bus_Numbcr: A_MFS_BUS 


43 




Unibus_Number: A_UNIBUS 


b. Outputs: n.a. 

c. Local Data; Interface : A_INTERPACE_UNTT 

RT.Table : AN_INTERFACE_TABLE 

d. Signals: n.a. 

e. Algorithms: if input parameters are in valid range assign to local cr^ies else raise 

RANGE.ERROR. 

f. Error Handling: none. 

g. Used Elements: n.a. 

4.4.2 81^1553JNTERFACE.Start_RT 

This procedure allocates memory, will initialize data structures, and activates the interface 
hardware for the specified RT. 

4.4.2.1 Start^RT Design Specification Constraints. 


4.4.2.2 Start_RT Design 

a. Inputs: Remote_Terminal: A_REMOTE_TERMINAL_ADDRESS 

b. Outputs: Status : A_BUS_STATUS 

c. Local Data; RT; A_REMOTE_TERMINAL_ADDRESS 

Stat: A_BUS_STATUS 
DP_Unibus_Address: NATURAL 
Data_Block_Si 2 c; INTEGER 

d. Signals: n.a. 


e. Algorithms: Verify interface usability. 



Create a data pointer offset table. 

Allocate memory. 

Initialize memory. 

Start 1553 processor. 

f. Error Handling: none. 

g. Used Elements: Procedure Verify_Intcrface : declared in local package body. 

Procedure Qcatc_Offset_Table: declared in local package body. 
Procedure Allocate_BufTers: declared in local package body. 
Procedure Queue_RT: declared in local package body. 

4.4.3 BI_lSS3_INTERFACE.Stop_RT 

This procedure is used to halt the interface processor and release allocated memory. 

4.4.3.1 Stop_RT Design Specification Constraints. 

n.a. 

4.4.3.2 Stop_RT Design 

a. Inputs: Remote.Terminal: A_REMOTE_TERMINAL_ADDRESS 

b. Outpjts: n.a. 

c. Local Data: Tbus_Address: A_TBUS_ADDRESS 

Tbus_Status: A_TBUS_STATUS 
RT_Offset: A_TBUS_ADDRESS 

d. Signals: n.a. 

e. Algorithms: Calculate the control register address for the interface. 

Write halt code to control register. 

Release allocated memory blocks. 

f. Error Handling: none. 

g. Used Elements: Procedure Write_Tbus: declared in package Interface.!553. 

Procedure Release: declared in package Dual_Port_Managcr. 


45 




4.4.4 BI_1553JNTERFACE.Start_BC 

This procedure is used to allocate memory, initialize data structures and start the interface 
processor in Bus Controller mode. 

4.4.4.1 Start_BC Design Specification Constraints, 
n.a. 

4.4.4.2 Start_BC Design 

a. Inputs: n.a. 

b. Outputs: Status: A_BUS_STATUS 

c. Local Data: BC_Data_Block : A_BUS_CONTROLER_DESCRIPTOR 

Tbus_Address: A_TBUS_ADDRESS 
Tbus.Status: A_TBUS_ERROR 

d. Signals: n.a. 

e. Algorithms: Verify hardware accessibility. 

Allocate memory. 

Initialize data structures. 

Calculate control register address. 

Write enable to control register. 

f. Error Handling: none. 

g. Used Elements: Procedure Read_Tbus: declared in package Interfacc_1553. 

Procedure Writc_Tbus: declared in package Inicrfacc_1553. 
Procedure Allocate: declared in package Dual_Port_Manager. 

4.4.5 BI_1553_INTERFACE.Stop_BC 
Procedure releases memory and halts interface. 

4.4.5.1 Stop_BC Design Specification Constraints, 
n.a. 


46 


r 








4.4.5.2 Stop_BC Design 

a. Inputs: n.a. 

b. Outputs: n.a. 

c. Local Data: Tbus_Address: A_TBUS_ADDRESS 

Tbus_Status: A_TBUS_STATUS 
RT_Offset: A_TBUS_ADDRESS 

d. Signals: n.a. 

e. Algorithms: Calculate the control register address for the interface. 

Write halt code to control register. 

Release allocated memory blocks. 

f. Error Handling: none. 

g. Used Elements: Procedure Write_Tbus: declared in package Interface.!553. 

Procedure Release : declared in package Dual_Port_Manager. 

4.4.6 BI_1553_INTERFACE.Start_Monitor 

This procedure is used to allocate memory, irutialize data structures, and stan monitoring all 
traffic associated with a particular RT. 

4.4.6.1 Start_Monitor Design Specification Constraints, 
n.a. 

4.4.6.2 Start_Monitor Design 

a. Inputs: Remotc.Tcrminal: A_RE>'OTE_TERMINAL_ADDRESS 

b. Outputs: Status : A_BUS_STATUS 

c. Local Data: RT: A_REMOTC_TERMINAL_ADDRESS 

Stat: A.BUS.STATUS 
DP_Unibus_Address: NATURAL 
Data.Block.Size: INTEGER 


47 









d. Signals: 


n.a. 


e. Algorithms: Verify interface usability. 

Create a data pointer offset table. 

Allocate memory. 

Initialize memory. 

Start 1553 processor. 

f. Error Handling: none. 

g. Used Elements: Procedure Verify.Inteiface: declared in local package body. 

Procedure Creatc_Offset_Table: declared in local package body. 
Procedure Allocate_Buffers : declared in local package body. 
Procedure Queue_RT: declared in local package body. 


4.4.7 BI_1553JNTERFACE.Stop_Monitor 

Procedure to release resources and halt interface processw allocated to monitoring operations. 

4.4.7.1 Stop_Monitor Design Specification Constraints, 
n.a. 


4.4.7.2 Stop_Monitor Design 

a. Inputs: Renx>tc_TerminaI: A_REMOTE_TERMINAL_ADDRESS 

b. Outputs: n.a. 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: n.a. 

f. Error Handling: none. 


48 








g. Used Elements: Procedure Stop_Ri: declared in local package specification. 


4.4.8 BI_1553_INTERFACE.Transmit 

This is a generic procedure to that will place the user defined data on the bus. The Generic 
formal parameter A_TRANSMrr_MESSAGE_BUhVtR is the user defined data buffer that 
contains the message data words of the bus message. The A_BUS_OVERHEAD_WORD is either 
a command word type or a status word depending on the interface type (RT or BC). The Form 
parameter indicates how the Bus_Word parameter is to be interpreted. The user sets the Form 
parameter to Command if the currently selected interface has been configured as a BC or Response 
if the currently selected interface is started as an RT. The Subaddness field is used if the Fwm is 
Response to find the correct buffer to place the message into for transmission. 

4.4.8.1 Transmit Design Specification Constraints, 
n.a. 

4.4.8.2 Transmit Design 

a. Inputs: Data : A_TRANSMrr_MESSAGE_BUFFER 

Bus_Word : A_BUS_OVERHEAD_WORD 
Form: MESSAGE.TYPE 
Subaddress: A_SUBADDRESS 

b. Outputs: n.a. 

c. Local Data: Command_Word: A_TRANSMrr_COMMAND 

Status.Word: A_STATUS_WORD 

d. Signals: Transmit_Complete: VAX asi 

e. Algorithms: if Form is Command then get command word aixi data 

else get status word and data 
send message 

f. Error Handling: none. 

g. Used Elements: Procedure Write.Status; declared in local package body. 

Procedure COpy_Block : declared in local package body. 


49 








4.4.9 Bl_1553_lNTERFACE.Receive 

This generic procedure reads data from the bus. The generic formal parameters are analogous 
to the ones in the Transmit procedure. In this RT number and the subaddress must be supplied as 
the input parameters to filter the desired data from the bus trafTic. The Time output is provided to 
give access to the clock on the interface at the time the data is read. 

4.4.9.1 Receive Design Specification Constraints, 
n.a. 

4.4.9.2 Receive Design 

a. Inputs: Form: MESSAGE_TYPE 

RT.Number: A_REMOTE_TERMINAL_ADDRESS 
Subaddress: A_SUBADDRESS 

b. Outputs: Data : A_RECEIVE_MESSAGE_BUFFER 

Bus_Word; A_BUS_OVERHEAD_WORD 
Time: A_TIME_TAG 

c. Local Data: Status_Word ; A_STATUS_WORD 

Base_Address: ADDRESS 
WC: INTEGER 

Command.Word: A_DATA_COMMAND_WORD 

Time_Valuc: A_TIME 

Status: A_INTERFACE_ERROR 

Direction: A_TRANSFER_DIRECnON 

d. Signals: Receivc_Complcte: VAX ast 

e. Algorithms: If interface running then copy bus data to user variables 

else signal error. 

f. Error Handling: if CONSTRAINT_ERROR signal data format error. 

g. Used Elements: ProccdureRead_Timer: declared in Interfacc_l 553 

4.4.10 BI_1553_INTERFACE.Monitor_RT 


50 






This procedure has only one formal generic parameter. This is because both Command and 
Sutus words are returned with the data. The concept with this procedure was not to capture all the 
data on the bus but rather to allow the hardw are to filter only the data of interest The Form 
parameter in this context is to add filtering by selecting the type of transfer to record; i.c. RT to BC 
or BC to RT. 

4.4.10.1 Monitor_RT Design Specification Constraints, 
n.a. 


( 


4.4.10.2 Monitor_RT Design 

a. Inputs: Form; MESSAGE_TYPE 

RT.Number: A_REMOTE_TERMINAL_ADDRESS 
Subaddress: A_SUBADDRESS 

b. Outputs: Command.Wotd: A_DATA_COMMAND_WORD 

Data: A_MONrrOR_MESSAGE_BUFFER 
Status.Word: A_STATUS_WORD 
Time; A_TIME_TAG 

c. Local Data: Data_Pnt: ADDRESS 

Data_Woid: UNSIGNED.WORD 
Words: INTEGER 

Command_Tn:p: A_DATA_COMMAND_WORD 
Direction: A_TRANSFER_DIRECTION 
Time_Value: A_TIME 
Status: A_INTERFACE_ERROR 


d. Signals: n.a. 

e. Algorithms: If interface is running get data and time stamp 

else signal error. 

f. Error Handling: none. 

g. Used Elements: Procedure Copy_BIock : declared in local package body. 


51 









4.5 DD CSC Monitor Executive 



52 













wit.t 

VT2CC_SPEC;AL_I0; 

use 

VT200_SPECIAL_10; 

w i t h 

i:t_var:able_5TRING; 

use 

UT_VARIABLE_STRING; 

w i t h 

td_mode_def:n:tions; 

use 

TD_MODE_DEFINIT1ON S ; 

with 

TD TIME TYPES* 

use 

TD_TIME_TyFES; 

with 

INTERFACE_1553; 

use 

INTERFACE_1553; 

with 

MICR0C0DE_1553; 

use 

MICROCODE_1553; 

with 

B:_1553_W0RE_DEFIN:t:0NS; 

use 

BI_1553_W0RD_DEFINITI0NS; 

with 

BI_1553_INTERFACE; 

use 

BI_1553_1NTERFACE; 

with 

OF_OSER_OUTPOT_1NTERFACE; 

use 

OF_USER_OUTPOT_INTERFACE; 

with 

IP_USER_COMMAND_INTERFACE; 

use 

IP_USER_C0MKAND_INTERFACE; 


procedure MONITOR_1553 is 

type AN_RT_SELECTION_TABLE is array(A_BEMOTE_TERMINAL_ADDRESS) of BOOLEAN; 


type A_SELECT10N_DESCRIPT0R is 


record 



RT 

: A_REMOTE_ 

_term:nal_address 

SA 

: A_SUBADDRESS; 

TR 

: A_TRANSFER_DIRECTION; 

BN 

INTEGER; 


UN 

INTEGER; 


Active 

BOOLEAN : 

FALSE; 


end record; 


subtype A_SELECTION_INDEX is INTEGER range 1..2; 

type A_SELECTION_ARBAy is array (A_5ELECTION_INDEX) of A_SELECTION_DESCRIPTOR; 

type AN_INTERFACE_ARRAy is array (A_INTERFACE_UN1T■pos(A_INTERFACE_UNIT'first).. 

A_INTERFACE_ONIT'pos(A_lNTERFACE DNIT'last)) of BOOLEAN 


MICROCODE ERROR 


: exception; 


Microcode Filename 


constant STRING 


"ISSaSDISK:|ATIP.DEV.MICROCODE)BUSMON3.LIS"; 


Monitor_RT 
Interface_Loaded 
Current_Sel 
Next Sel 


: AN_RT_SELECTION_TABLE (others -> FALSE); 
: AN_INTERFACE_ARRAY (others -> FALSE); 

; A_SELECTION_ARRAy; 

: INTEGER A SELECTION INDEX'first; 


53 






Last Sel 


: INTEGER A_SELECTION INDEX'first; 


New Sel 

: A_SELECTION_DESCRlPTOR; 

Mode 

: A_MONITOB_MODE B'JS_STATD; 

Format 

: A_FORMAT_MODE; 

Mode Change 

: BOOLEAN :« FALSE; 

Format_Change 

: BOOLEAN :■= FALSE; 

Exit_Loop 

: BOOLEAN FALSE; 

First_RT_Selected 

: BOOLEAN :« TRUE; 

Command_Rec 

: A_VALID_COMMAND_RECORD; 

Information 

: A_MESSAGE_DATA_BLOCK(TEXT) ; 

Error_Text 

: A_MESSAGE_DATA_BLOCK(ERROR) 

MicroCode_ID 

: A_MICROCODE_ID; 

Mic_Error 

: A_MICR(X:ODE_ERROR; 


function Get_Selection_Data (User_Data : STRING) 
return A_SELECTION_DESCRIPTOR is separate; 

procedure Rotate {Index : in out A_SELECT10N_INDEX) is separate; 

procedure Initialize (Active_RT : in out AN_RT_SELECTION_TABLE; 

Interface_Active : in out AN_INTERI'ACE_ARRAy; 

Microcode_Ident : in A_MICRCX:ODE_ID; 

New_Selection ; in A_SELECTION_DESCRIPTOR) is separate 

procedure Deactivate (Selection_List ; in out A_SELECTION_ARRAY; 

Selection : in A_SELECTION_DESCRIPTOR) is separate; 

procedure Monitor is new BI_1553_INTERFACE.MONITOR_RT(A_ME5SAGE_ARRAY); 

procedure Display_Data (Selection : in A_SELECTION_DESCRIPTOR) is separate; 

begin 

Start_Dlsplay; 

Put_At(24,1,"Reading microcode: " ( Microcode_Fllename); 

Read_Microcode(Mlcrocode_Fllename,MicroCode_ID,Mic_Error); 
if Mlc_Error /- SDCCESS then 
raise MICROCODEERROR; 
end if; 

Put_At(24,l," 

Start_Input; 


54 







Assign (I r,toriT.at ion . Message 
Write (Inf orrr.at ion) ; 


Waiting For Command"); 


loop 

Get Next_Ccr.-and (Cori.Tand_Rec) ; 
case Command_Rec.Comm.and is 
when NONE ■> 
null; 

when SELECT_RT -> 

New_Sel :■ Gct_Selection_Data (CoinrianeJ_Rec.Command_Data (1. .Command_Rec.Data_Lenght)) 
Initialize(Monitor_RT, Interface_Loaded, MicroCode_ID, New_Sel); 

If Monitor_RT(New_Sel.RT) and New_Sel.Active then 
If First_RT_Selected then 
Mode :« RAW_DATA; 

Mode_Change TRUE; 

Format HEX; 

Format_Change :• TRUE; 

First_RT_Selected FALSE; 
end if; 

Current_Sel(Next_Sel) :» New_Sel; 

Last_Sel :« Next_Sel; 

Rotate(Next_Sel); 
end If; 

when MODE_HEX => 

Format :• HEX; 

Forraat_Change :• TRUE; 
when MODE_DECIMAL -> 

Format :• DEC; 

Format Change :« TRUE; 
when MODE_BlNARf -> 

Format :■ BIN; 

Format_Change :« TRUE; 
when MODE_OCTAL -> 

Format OCT; 

Format_Changc :« TRUE; 
when MODE_PREFERRED_DATA -> 

Mode PRIORITY; 

Mode_Change TRUE; 

when MODE_RAW_DATA -> 

Mode RAWDATA; 

Mode_Change TRUE; 


55 






when RESET_D:SP -> 

CIear_DiEp;ay; 
when CANCEL_SELECTION -> 

Deactivate(Current_Sel, Get_Selection_Data( 

CoT.-ar.d_Rec .Com.’r,ar.d_Data (1 . .Command_Rec.Data_Ler.!;ht) ) ) ; 
when QUIT => 

Exit_Loop TRUE; 
when others •=> 

Put_At (23,1, ASCII .bel t 

"%MON1553-W-ONIMPL, that command la not currently supported.") 

end case; 

exit when Exit_Loop; 
if Mode_Change then 
Set_Mode(Mode) ; 

Mode_Change :■ FALSE; 
end if; 

if Format_Change then 
Set_Format(Format); 

Format_Char.ge FALSE; 
end if; 
case Mode is 

when RAW_DATA => 

for Sel in A_SELECTION_INDEX loop 
Display_Daia(Current_Sel(Sel)); 
end loop; 
when PRIORITY -> 

Display_Data(Current_Sel(Last_Sel)); 
when others »> 
null; 
end case; 
delay 0.1; 

end loop; 

Shutdown_Input; 

Shutdown_Dlsplay; 

exception 

when others «> 

Shutdown_Input; 

Shutdown_Display; 


56 











raise; 


e-d MONITOR 1553; 


4.5.1 Ex_1553_Monilor.Rotate 

This procedure is simply for implementing a binary up counter with roll over characteristic. 

4.5.1.1 Rotate Design Specification Constraints, 
n.a. 


4.5.1.2 Rotate Design 

a. Inputs: Index: A_SELECnON_INDEX 

b. Outputs: Index ; A_SELECnON_INDEX 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: if Index is less than last increment Index 

else set Index to first. 

f. Error Handling: none. 

g. Used Elements: n.a. 

4.5.2 Ex_1553_Monitor.Initialize 
Stans the monitoring of a specific RT. 

4.5.2.1 Initialize Design Specification Constraints, 
n.a. 

4.5.2.2 Initialize Design 

a. Inputs: Active_RT :AN_RT_SELECnON_TABLE 

Interfacc_Acdvc; AN_INTERFACE_ARRA Y 
MicTDCodeJdent: A_MlC3tOCODE_ID 
Ncw.Selection: A_SELECnON_DESCRIPTOR 


57 







b. Outputs: 


Active_RT :AN_RT_SELECnON_TABLE 
Inttrf‘ace_Activc: AN_D'1TERFACE_ARRAY 


c. Local Data: Mic.Error: A_MICROCODE_ERROR 

Mon_Statis: A_BUS_STATUS 

d. Signals: n.a. 

e. Algorithms: If New_Selection not Active_RT then... 

If not Interfacc_Active then Load Microcodcjdent 
S tart_Monitor(Ne w_Sclection) 

end if 

f. Error Handling: When Mic_Error report error. 

g. Used Elements: Procedure Start_Monitor: declared in package BI_1553_Interface. 

Procedure Write: declared in package OF_User_Output_InteTfacc. 
Procedure Assign : declared in UT_Variable_String. 
procedure Load_Microcode: declared in Micrcx:ode_1553. 

4.5.3 Ex_1553_Monitor.Get_SeIection_Data 

This function takes a text string containing the selection parrameters entered by a user and 
converts them to a selection record. 

4.5.3.1 Get_Selection_Data Design Specification Constraints. 

If the any parameters are out of range the a non active selection is returned arid an error 
message is printed in the Status Area of the output screen. 

4.5.3.2 Get_Selection_Data Design 

a. Inputs: User_Data : STRING 

b. Outputs: A_SELECnONJ)ESCRIPTOR 

c. Local Data: Pos.l: INTEGER 

Pos_2; INTEGER 


S8 








Arg: INTEGER 
Int.Data: INT.ARRAY 
More; BOOLEAN 

Selection : A_SELECnON_DESCRIPTOR 

d. Signals: n.a. 

e. Algorithms: parse String for 5 selection parameters 

f. Error Handling: When (X)NSTRAINT_ERROR write error message, return inactive 

default record. 

g. Used Elements: n.a. 

4.5.4 Ex_1553_Monitor.Deactivate 

This procedure sets the selected element of a display table to inactive. This stops all data 
display on this selection and makes it’s slot available for reuse. 

4.5.4.1 Deactivate Design Specification Constraints, 
n.a. 

4.5.4.2 Deactivate Design 

a. Inputs: Selection_List: A_SELECT10N_ARRAY 

Selection; A_SELECTION_DESCRIPTOR 

b. Outputs: Selection_List; A_SELECnON_ARRAY 

c. Local Data: n.a. 

d. Signals: n.a. 

e. Algorithms: If Selection in Sclection_List make inactive. 

f. Error Handling: none. 

g. Used Elements: n.a. 


59 


4.5.5 Ex_1553_Monitor.Display_Data 

Read the bus buffer associated with a selection and if new data is present display it on the data 
output display. 

4.5.5.1 Display_Data Design Specification Constraints, 
n.a. 


4.5.5.2 Display_Data Design 

a. Inputs: Selection : A_SELECnON_DESCRIPTOR 

b. Outputs: n.a. 

c. Local Data: Cominand_Word: A_DATA_COMMAND_WORD; 

Status_Word: A_STATUS_WORD 
Message_Form: A_MESSAGE_TYPE 
Bus_Message: A_MESSAGE_ARRAY 
Time_Tag: A_TIME_T/-iG 
Valid.Cmnd: BOOLEAN 


d. Signals: n.a. 

e. Algorithms: If Selection active then get bus data. 

If bus data current then ^^Tite data to display. 

f. Error Handling: none. 

g. Used Elements; Procedure Monitor_RT: declared in package 

BI_1553_INTERFACE 
Procedure Write : declared in package 

OF_USER_OUTPUT_INTERFACE 


60 








5 CSCIDATA 

The only global data shared between packages is in the fonn of constant definitions. The 
remainder of the global data in this CSCI is local to a particular package body. The folowing 
subparagaphs outline the inter and intra package global data. 

5.1 Intra Package Global Data 


DP_Memory 1 DUAL_PORT_MEMORY 

I Global structure to map BIT-3 into 
Section_Created I BOOLEAN 

I Set to true is section didn't preexist. 

Section_Mapped I BOOLEAN 

I Set to true if map function was successful 

Lock_Held I BOOLEAN 

I Set true if Init lock is aquired. 

Lock_Status_Block I STARLET.LOCK_STATUS_BLOCK_TyPE 

I Results of request to que Init lock. 

DP_Initialized I BOOLEAN 

I True after first call to Initiali 2 e_r._P. 

Next_Block_Pnt I SHORT_INTEGER 

I Used to keep place in Next_Block function 
MAX_DUAL_PORT_SIZE I constant 

I 64K Words 

BYTE I constant 

I 8 Bits 1 byte 

WORD I constant 

I 16 Bits 1 Word 

ALLOC_TABLE_SIZE I constant 

I IK Byte in bits 

ALLOC_TABLE_NAME I constant STRING 

"DP_ALLOCATION_TABLE'' 1 name of lock 
GSD_Name I constant STRING 

! ■DUAL_PORT- 

Test_Patern_l I constant UNSIGNED_BYTE 

Test Patern 2 I constant UNSIGNED BYTE 


FALSE 

FALSE 

FALSE 

FALSE 

128 * 1024 

8 

16 

1024 • BYTE 

-DUAL_PORT" 

16<AA« 

16*5S« 


61 







AM_BACKGRQUND^MQHITQR 

Current_RT_State_Table 
Past_Duration 
The_Sample_Rate 
The_1553_Interface_Unit 

Ml,I.miMg,FACi;AGB 

CONTEXT_ADR 1 | 

CONTEXT'ADDRESS 


I AN_RT_STATE_ARRAY I 
I SECONDS I 
I SAMPLES_PER_SECOND I 
I A Interface Unit I 


BI,1553,miaRFACB 

Offsets I AN_RT_OFFSET_P01NTER 

I Byte offsets to Subaddress Buffers 
Data I SYSTEM.ADDRESS 

I Begining address of dual port block 

Rec_SA I A_SUBADDRESS_POINTER_TABLE 

ADDRESS_ZERO) I Addresses of Receive SA buffers 

Trx_SA I A_SUBADDRESS_POINTER_TABLE 

ADDRESS_ZERO) | Addresses of Transmit SA buffers 

Status I A_STATUS_WORD 

Default_Status_Word I Current status responce for RT 

Time 1 A_SUBADDRESS_TIME_TABLE 

1 The relative time of the last message 
Runing I BOOLEAN 

I Flag true if Start_RT successful! 

Bus_Num I INTERFACE_1553.A_BUS_NUMBER 

RT_Num 1 AN_RT_DESCRIPTOR_TABLE 

RT_Table I AN_INTERFACE_TABLE 

I Struture to competely describe hardware environment. 

Interface 1 A_INTERFACE_UNIT 

I Globally visable object to hold interface number. 

Unit_Selected I BOOLEAN 

I I Flag to indicate if a call to Select 


null 

ADDRESS_ZERO 

(others ■> 

(others ■> 

(others •> 0) 

FALSE 


FALSE 

Unit has been 


62 









made. 

RT_Control_Block_Base 
control block base 
RT_Ctrl_Blk_ESW 
emulator status word offset 
RT_Ctrl_Blk_ECW 
emulator control word offset 
RT_Ct r1_B1k_La st_Cmd 
last comand offset 
RT_Ct rl_Blk_BJW 
bit jump word offset 
RT_Ctrl_Blk_VEC 
interrupt vector offset 
RT_Ctrl_Blk_BAP 
buffer address pointer offset 
RT_Ct rl_Blk_CAP 
chain address pointer 
RT_Ctrl_Blk_ATP 
address table pointer 
RT_Ctrl_Blk_STAT 
status word offset 
RT_Ctrl_Blk_OMD 
output mode data offset 
RT_Ct rl_Blk_MCW 
memory control word offset 
RT Ctrl Blk ATBA 


address table base address offset 


RT_Ctrl_Blk_IMD 
input mode data offset 
RT_Ct r1_B1k_MSGC 
message counter offset 
RT_Ctrl_Blk_MMl 
mode mask 1 offset 
RT_Ct rl_Blk_MM2 
mode mask 2 offset 
RT_Ct rl_Blk_UCBH 
UCB high offset 


constant 

1 

constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


constant 


I constant 


I 1610800# I rt 
I 1610000# I 
I 16#0001< I 
I 1610002# I 
I 16«0003# I 
I 16«0004« I 
I 16«0005# I 

I 16*0006# I 

I 16*0007* I 

I 16*0008* I 

I 16*0009* I 

I 16*000a* I 

I 16*000b* I 

I ie*000c* I 

I 16*000d* I 

I 16*000e* I 

I 16*000f* I 

I 16*0010* I 


63 















I constant 


I 16«0011l I 


RT_Ctrl_Bl)c_UCBL 
UCB low offset 


I 


RT_Ct rl_Blk_DLAY 

1 constant 

delay offset 

1 

RT_Ctrl_Blk_CMD2 

1 constant 

command word 2 offset 

1 

RT_Ctrl_Blk_SUBA 

1 constant 

subaddress offset 

1 

RT_Ct r1_B1k_MSGT 

1 constant 

message type offset 

1 

RT_Ct r1_B1k_BFHI 

1 constant 

buffer address high offset 1 

RT_Ct r1_B1k_BFLO 

1 constant 

buffer address low offset i 

RT_Ct r1_B1k_MCH1 

1 constant 

msg ctr high address offset 

RT_Ct r1_B1k_MCLO 

1 constant 

msg ctr low address offset 

RT_Ctrl_Blk_HSHK 

1 constant 

handshake flag offset 


RT__Ctrl_Blk_SYNC 

1 constant 

sync tyF>e msg flag offset 

RT_Ctrl_Blk_MCYC 

1 constant 

minor cycle offset 


RT_Ctrl_Blk_RBUF 

1 constant 

receive buffer offset 


RT_C tr1_B1k_CARB 

1 constant 

circular asynch. rev buffer offset 

RT_Ct r1_B1 k_TBUF 

1 constant 

transmit buffer offset 


RT_Ct r1_B1k_CATB 

1 constant 

circular asynch xmt buffer 

RT_Ctrl_Blk_RCBH 

1 constant 

receive circular buffer 

head offset 

RT__Ctrl_Blk_RCBT 

1 constant 

receive circular buffer 

tail offset 

RT_Ctrl_Blk_TCBH 

1 constant 


I 16#0012# I 

I 1610014# I 

I 16#0015# 1 

I 1610016# I 

I 16 « 00 ie« I 

I 16*0019# I 

I I6#001a« I 

I ie*001b* I 

I 16«001d* I 

I I6#001e« I 

I I6#001f# I 

I 16*0020# I 

I 16*0021* I 

I 16*0022* I 

I 16*0023* I 

I 16*0024* I 

I 16*0025* I 

I 16*0026* I 


64 









transmit circular 

buffer head 

offset 1 


RT_Ct r1_B1k_TCBT 

1 

constant 

1 16#0027# 1 

transmit circular 

buffer tail 

offset 1 


RT_Ctrl_Blk_INFl 

1 

constant 

1 16«0028« 1 

info 1 offset 


1 


RT_Ctrl_Blk_INF2 

1 

constant 

1 16«0028« 

info 1 offset 


1 


RT_Ct rl_Blk_SRCV 

1 

constant 

1 16«0029« 

synch rev count offset 

1 


RT_Ct r1_B1k_SXMT 

1 

constant 

I 16«002a< 

synch xmt count offset 

1 


RT_Ct r1_B1k_ARCV 

1 

constant 

1 16*002b« 

asynch rev count 

offset 

1 


RT_Ct r1_B1k_AXMT 

1 

constant 

1 16#002c# 

asynch xmt count 

offset 

1 


RT_Ctrl_Blk_QV0 

1 

constant 

1 16*0030« 

queued vector 0 offset 

1 


RT_Ct rl_Elk_SP3H 

1 

constant 

1 16«0038* 

synch rev buffer 

high offset 

1 


RT_Ctrl_Blk_SRBL 

1 

constant 

1 16#0039# 

synch rev buffer 

low offset 

) 


RT_Ct rl_Blk_STBH 

1 

constant 

1 16«003a« 

synch xmt buffer 

high offset 

1 


RT_Ct r1_B1k_S TBL 

1 

constant 

1 ie«003b« 

synch xmt buffer 

low offset 

1 


1NTERFACE_AT_BASE I 

constant 

1 16«1000« 

base address of offset table 

in interface local ram 


UNIBUS BASE ADDRESS I 

constant 

1 etoooooo# 


base address of dual port memory on the unibus 

Default_Status_Word I constant A_STATUS_WORD I 

(0,FALSE, FALSE,FALSE,FALSE, 

«X_1S53_M0MITQR 

Monitor_RT I AN_RT_SELECTION_TABLE I (others -> 

FALSE) 

Interface Loaded I AN INTERFACE ARRAY I (others -> 


65 








FALSE) 

Current_Sel 
Next_Sel 

A_SELECTION_INDEX'first 
Last_Sel 

A_SELECTION_INDEX’first 

New_Sel 

Mode 

Format 

Mode_Change 

Format_Change 

Exit_Loop 

First_RT_Selected 

Command_Rec 

Information 

Error_Text 

MicroCode_ID 

Mic Error 


I A_SELECTION_ARRAY 
I INTEGER 

I INTEGER 

I A_SELECTION_DESCRIPTOR 
1 A_MON1TOR_MODE 
1 A_FORMAT_MODE 
I BOOLEAN 
I BOOLEAN 
I BOOLEAN 
I BOOLEAN 

I A_VALID_COMMAND_RECORD 
I A_MESSAGE_DATA_BLOCK(TEXT) 

I A_MESSAGE_DATA_BLOCK(ERROR) 
( A_MICROCODE_ID 
I A MICROCODE ERROR 


Microcode_Filename I constant STRING 

"1553SDISKI(ATIP.DEV.MICROCODE)BUSMON3.LIS" 


BUS_STATUS 

FALSE 

FALSE 

FALSE 

TRUE 


IMIERFACB^5S3 

Registers 

Interface_Mapped 

Set up_File_Read 

Unit_Status 

(NOT_INSTALLED, 

Base_Address 

Base_CSR 

Unit_Num 

lnterface_Error 

Se t up_Pi le_Naine 

SOURCE_BASE_REG_ADDR 

DE S TINATION_BASE_REG_ADDR 

IO_BASE_ADDRESS 

BUS REGISTER PRIME 


A_Register_Map 

Boolean 

Boolean 

A_UNIT_STATUS 

A_BASE_ADDRESS 
A_CSR_ADDRESS 
A_INTERFACE_UNIT 
A_INTERFACB_ERROR 
constant string 
constant A_TBUS_ADDRESS 
constant A_TBUS_ADDRESS 
constant A_TBUS_VALUE 
constant A TBUS ADDRESS 


FALSE 

FALSE 


"PORTS_1553" 

l€f2007« 

16«200F« 

1 €« 2000 « 

16«2003l 


66 








BUS_REGISTER_ALTER 

HOST_DATA 

HOST_COMMAND 

HOST_REQUEST 

TIMER_ADDRESS 

IP_USER_CQMMAND_ 

Command_Que 

MICRQCODB„1553 

New_Id 

Microcode_Li3t 

OF_USER_OUTPUT_: 

Main_Display 

Message_Screen 

Error_Screen 

Raw_Data_Screens 

Priority_Screens 

RT_Activity 

Formated_Screen 

Logging_Screen 

Bus_Stat_Screen 

Data_Screen 

Display_Page3 

RATE_CHANGE 

SCREBNMANAGER 

Screen_Buffer 
Next_Buffer 
A_BUFFER_ID'first 
More_Buffers 
CSI 


constant A_TBUS_ADDRESS 
constant A_TBUS_ADDRESS 
constant A_TBUS_ADDRESS 
constant A_TBUS_VALUE 
constant A TBUS ADDRESS 


INTERFACE 

I A FIFO QUEUE 


I A_MICROCODE_ID 
I A MICROCODE LIST 


1 A_BUFFER_ID 
I A_BUFFER_ID 
I A_BUFFER_ID 
I A_RAM_DATA_SCREEN_TABLE 
I A_PRIORlTy_DATA_SCREEN_TABLE 
I A_BUFFER_ID 
1 A_BUFFER_ID 
I A_BUFFER_ID 
I A_BUFFER_ID 
I A_BUFFER_ID 
I A_DISPLAY_TABLE 
I BOOLEAN 


I A_SCREEN_MANAGEMENT_BUFFER 
I A_BUFFER_ID 

I BOOLEAN 
I constant STRING 


I 16f20CBf 
I 16I00I3* 
I 1€«0010« 
I 16#0001# 
I 16*2020# 


I 


I 0 


TRUE 


I 

I 

I TRUE 

I ASCII.esc « 


67 








M r tf 


POSLEN I constant INTEGER | CSI'length + 

2 I CSI length + length + f length 

ATRCHR I constant AN_ATTRIBUTE_TABLE | 

(’O', ’4’, '5', '7') 

DNBQUNDED_FIFO_OUEOB 

Master_Key | AN_ENTRy_KEY 1 

AN_ENTRY_KEY'first 

YT200_SPBCIAL TO 


ESC 

1 constant CHARACTER 

1 ascii.esc 

CTL 

1 constant STRING(1..2) 

1 ESC t • [ • 

Escape_Sequence 

1 constant SCREEN_CODES 

1 (INVERSE 

=> (6,4, CTL & "Tm ") , 



Attribute_On 

1 constant ATTRIBUTE_CODES 

1 (INVERSE_TXT 

«> (5,4, CTL & "7m ") , 



Attribute_Off 

1 constant ATTRIBUTE_CODES 

1 (INVERSE_TXT 

-> (5,5, CTL & "27m"), 



All_Of£ 

1 constant STRING 

1 CTL 6 

"022242527m" 



Tu rn_Cu r 3 o r_On 

1 constant STRING 

1 CTL ( "?25h" 

Turn_Cursor_Off 

1 constant STRING 

1 CTL & "7251" 

5.2 Inter Package Global Definitions 


QF^LOCALSPECS 



MAX_NUMBER_RT_DISPLAYS 

1 constant 

1 2 

MA1N_HEADER_R0W1 

1 constant NATURAL 

1 1 

HAIN_HEADER_COLl 

1 constant NATURAL 

1 1 

SEC_HEADER_ROWl 

1 constant NATURAL 

1 2 

SEC_HEADER_COLl 

1 constant NATURAL 

1 1 

SEC_HEADER_COL2 

1 constant NATURAL 

1 20 

SEC_HEADER_COL3 

1 constant NATURAL 

1 32 


68 









SEC_HEADER_C0L4 
SEC_HEADER_C0L5 
T HR1D_HEADER_ROW1 
THRID_HEADER_C0L1 
THR1D_HEADER_R0W2 
WORK_COMMAND_SEP_ROW 
WORK_COMMAND_SEP_COL 
DISP LAY_S TART_ROW 
DISPLAY_STOP_ROW 
DISPLAY_START_COL 
MAIN_HEADER_C0L1 
ACT_MON_ROW 
ACT_MON_COL 
TEXT_HEADER_ROW 
TEXT_HEADER_COL 
ERROR_HEADER_ROW 
ERROR_HEADER_COL 
TEXT_ROW 
TEXT_COL 
ERROR_ROW 
( ERROR_COL 

RT_ACT_R0W1 

THRID_HEADER_R0W1 

RT_ACT_R0W2 

THRID_HEADER_R0W2 

RT_ACT_COL 

THRID_HEADER_C0L1 + 6 

RT_OFFSET_ROW1 

RT_0FFSET_R0W2 

RT_SA_BN_COL 

RT_HEADER_ROW 

SA_HEADER_ROW 

BN_HEADER_ROW 

RT_RT_HEADER_OFFSET 

1I0RK_AREA_0FFSET 

BIN_WORK_AREA_OFFSET 

NUMBER OFFSET 


constant 

NATURAL 

1 51 

constant 

NATURAL 

1 71 

constant 

NATURAL 

1 3 

constant 

NATURAL 

1 1 

constant 

NATURAL 

1 4 

constant 

NATURAL 

1 22 

constant 

NATURAL 

1 1 

constant 

NATURAL 

1 4 

constant 

NATURAL 

1 21 

constant 

NATURAL 

1 

constant 

NATURAL 

1 2 

constant 

NATURAL 

1 10 

constant 

NATURAL 

1 8 

constant 

NATURAL 

1 30 

constant 

NATURAL 

1 8 

constant 

NATURAL 

1 30 

constant 

NATURAL 

1 10 

constant 

NATURAL 

1 1 

constant 

NATURAL 

1 10 

constant 

NATURAL 

1 1 

constant 

NATURAL 

1 

constant 

NATURAL 

1 

constant 

NATURAL 

1 

constant 

NATURAL 

1 4 

constant 

NATURAL 

1 3 

constant 

NATURAL 

1 6 

constant 

NATURAL 

1 6 

constant 

NATURAL 

1 7 

constant 

NATURAL 

1 8 

constant 

NATURAL 

1 35 

constant 

NATURAL 

1 14 

constant 

NATURAL 

1 30 

constant 

NATURAL 

1 8 


69 









AREA 


constant NATURAL 
constant NATURAL 
constant NATURAL 


constant 

OFFSET 

constant 

constant 

constant 

constant 

constant 

constant 

constant 

constant 

constant 


NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 

NATURAL 


START_AREA_WORK_ROW 

DATA_OFFSET 

W0RK_AREA_C0L1 

+ DATA_OFFSET 

W0RK_AREA_C0L2 

+ DATA_OFFSET + BIN_WORK 

RT_HEADER_COL 

HEADER_AREA_OFFSET 

RAW_DATA_BIN_OFFSET 

RAW_DATA_DEF_OFF SET 

PRIORITy_COL 

PRIORITy_ROW 

PRIORITy_HEADER_ROW 

PRIORITY_HEADER_COL 

PRIORITy_CMD_COL 

+ 25 

PRIORITY_CMD_ROW 
+ 9 

PR10RITy_STS_R0W 
PRIORITy_CMD_ROW + 1 
PRIORITY_CMD_OFFSET 
LOGGING_ROW 
LOGGING_COL 
BLANK_LINE 
') 

NORMAL_TEXT 
UNDERLINE_TEXT 
Atr(UNDERLINE) 

BOLD_TEXT 

BLINKING_TEXT 

INVERSE_TEXT 

BLINKING_INVERSE_TEXT 

INVERSE 

BOLD_UNDERLINE_TEXT 

UNDERLINE 

BLINKING_UNDERLINE_TEXT 

UNDERLINE 


constant NATURAL 

constant NATURAL 

constant NATURAL 
constant NATURAL 
constant NATURAL 
constant STRING(1..80) 

constant A_SCREEN_ATTRIBUTE 
constant A_SCREEN_ATTRIBUTE 

constant A_SCREEN_ATTRIBUTE 
constant A_SCREEN_ATTRIBUTE 
constant A_SCREEN_ATTR1BUTE 
constant A_SCREEN_ATTRIBUTE 

constant A_SCREEN_ATTRIBUTE 

constant A SCREEN ATTRIBUTE 


I RT_HEADER_ROW 
I 11 

I RT_SA_BN_COL 

I RT_SA_BN_COL 

I 3 
I 20 
I 23 
I 14 
I 2 
I 10 
I 6 
I 30 

I PRIORITy_COL 

I PRIORITY ROW 


I 10 
I 11 
I 30 

1 (others -> ' 

I Atr(NORMAL) 


I Atr(BOLD) 

I Atr(BLINKING) 
I Atr(INVERSE) 

I BLINKING and 

I BOLD and 

I BLINKING and 


70 








INVERSE_UNDERLINE_TEXT | constant A_SCREEN_ATTRIBUTE | INVERSE and 

UNDERLINE 

BOLD_INVERSE_TEXT | constant A_SCREEN_ATTRIBUTE | BOLD and 

INVERSE 

BOLD_INVERSE_UNDERLINE_TEXT | constant A_SCREEN_ATTRIBUTE I BOLD and 

INVERSE and UNDERLINE 

DATA_POSITION 1 constant A_DISPLAY_FORMAT_TABLE | 

PRIORITY_POS I constant A_PRIORITy_FORMAT_TABLE | 

BI 1553 WORDDEFI NITIONS 


Broadca3t_Address 
Mode_Coinmand_l 
Mode Command 2 


Iconstant A_REMOTE_TERMINAL_ADDRESSI 2#11111# 
I constant A_SUBADDRESS I 2#11111# 
I constant A SUBADDRESS I 2#00000# 


71 













6 CSCI Data Files 


6.1 Data File to CSC-CSU Cross Reference 
Data file PORTS_1553 used by INTERFACE_1553 

6.1.1 PORTS_1553. 

This file contains information on the type of CPU, number of UNIBUS channels, number of 
interfaces, and 10 register addresses for the target platform. The file is order dependent, the data 
may have any number of comments between it but each item must be a on a separate line, and must 
come in the specified order. The semicolon (;) is the comment character. 

IO_BASE_PAGE_ADDRESS - this is the VAX address of the io page buffer in hex 
Range: <implementation dependant> 

Units; UNSIGNED 

TOTAL_NUMBER_MMBI_INSTALLED - the number of interface adaptor units on this CPU 
Range : 1..4 
Units: UNSIGNED 

UNIT_ASSIGNMENTS - one defmitin per MMBI installed 

UNIT # CSR - octal representation of the control status register address for the interface 
Range: 7660008 •• 766100g 
Units: UNSIGNED 


72 








8 NOTES 


8.1 Definition Of Terms and Abbreviations 


AN/AYK - 

(Navy standard embedded mission processor) 

ATIP 

Ada Technology Insertion Program 

BC 

Bus Cbntroller 

CSCI 

Computer Software Configuration Item. 

CSU 

Computer Software Unit. 

crsD 

Computer Technology and Simulation DepartmenL 

DCL 

Digital Command Language 

DEC 

Digital Equipment C^cqxnation 

GADBTK - 

Generic Avionics Data Bus Tool Kit 

RT 

Remote Terminal 

UaRT 

Universal Asyncronous Receiver/Transmitter 

VAX 

Virtual Address Extension (DEC mini computer architecture) 

VMS 

Virtual Memory System (VAX operating system) 


73 







APPENDIX A 


10 Requirements Model Dictionary 

10.1 Data Flows 

Bus_Acavity = 

BNF: {RT_Status) 

Bus_Data = 

BNF: [RT_Status I Bus_Messagcl 

Bus_Message = 

BNF: (Bus.Word) 

Captured_Data = 

BNF: {Bus_Word} 

Composed_Command = 

BNF; CurKnt_Command + User_Data 

Conriguration_Info = 

BNF: Default_Bus_Number + Interface_Number + Interfacc_Addrcss 
+ Machinc_Type 

Data_Received = 

BNF: {Bus_Word) 

Data_Scalc_Derinition = 

BNF: {Messagc_Id + Word_Num + LSB + MSB + Sca]e_FactorJ 
Data_Selection = 

BNF: RT_Num + (SA_Num) + (Tran_Rec) + (Bus_Num) + (Watch_Mask) 

Data_To_Transmit = 

BNF: (Bus.Word) 


74 








I>evice_Parameiers = 

BNF: Num_Lines + Num_Cols + Esc_Clear + Esc_Pos + Esc_Line + Esc_Bold 
+ Esc_Hiliie + Esc_Blink 

Message_Data = 

BNF: Message_ID_Block + Message_Content 

Message_ID_Block = 

BNF: Message_Type + (Window_Id) 

Next_Command = 

BNF: Currcnt_Command 

Raw_Bus_Data = 

BNF: {Bus_Word) 

Scaled_Data = 

BNF: (Bus.Word) 

Screen.Layout = 

BNF: Elements + {Title + Line + Column + Units + Width) 

Text_Data = 

BNF: {Bus_Word_Srting} 

Transmit_Data = 

BNF: (Bus_Word} 

User_Data = 

BNF: [RT_Num I SA_Nura I Tran_Rec I Bus_Num I Bus_Message I Out_Filc 
I Update_Rate I Curreni_Mode I Watch_Mask] 

Verificd_Data = 

BNF: (Bus_Word} 


75 







10.2 Data Stores 


Command_Hisiory = 

BNF: {Composed_Command) 

Command_Que = 

BNF: {Current_Co!Tiinand) 

Data_Format_Table = 

BNF: {Valid_Input_Format} 

Data_Scaling_Table = 

BNF: {Data_Scale_Definition) 

Device_Parameter_Table = 

BNT: {Device_Nanie + Device_ParaiTieters) 

Output_Format_Table = 

BNF: {Screen_Layout) 

Valid_Command_Table = 

BNF: {Valid_Command) 

10.2 Terminators 

1553_Bus = 

Bus_Configuration_File = 

History _File = 

User = 

10.2 Processes 

Activity_Monitor = 


76 





Bus_Interface = 


Bus_Monitor = 
Bus_Receiver = 
Bus_Transmiter = 
Compare_Commands = 
Daia_Manager = 
Disable_Com_Finnware = 
Dispatch_Command = 
Format_Data = 
Get_Command = 
Get_User_Data = 
Initialize_Bus_Hardware = 
Ijiitiate_Com_FiiTOware = 
Input_Parser = 

Interpreter = 
Mode_Control = 


Monitor_EXEC = 







Output_Fomiaier = 


Output_Mc)de = 
ScaJe_Data = 
Screen_Inierface = 
Update_Qock = 
Upciate_Counter = 
Va]idate_Command = 

Verify_Data = 

10.2 Control Flows 

Get_Data = 

Init_Interface = 

Read_Data = 

Resume_Command_Entry 
Stan_Emu = 

Start_Log = 

Stop_Emu = 

Stop_Log = 
Update_Scrcen = 







10.3 Primitives 


Bus_Num = 

Data Type; Integer 
Data Representation: numeric 
Data Size: 4 bytes 
Data Range: (1,8) 

Default Value: 1 

Bus.Word = 

Data Type: Unsigned_Word 
Data Representation: numeric 
Data Size; 2 bytes 
Data Range: (0,65536) 

Bits; 16 

Bus_Word_Srting = 

BNF: (Character) 

Data Type: String 

Data Representation: alpha-numeric 

Column = 

Data Type: Integer 

Data Representation: numeric 

Data Range: (0,132) 

Default Value: 0 

Command = 

BNF: (Character) 

Comments; Command input from user is an unformated string that must match txie of 
the valid commands. 

Data Type: String 

Data Representation: alpha_numeric 

Data Size: 80 bytes 

Commanded_Mode = 


79 





BNF: [Hex + Decimal + Octal + Binary + Formated + Activity + PreferBd_Data + Idle 
+ Logging] 

Data Type: Mode_Type 
Current_Command = 

BNF: [Select_RT + Select_SA + Select_TR + Select_Bus + Set_Display_Mode 
+ Set_Log_Mode + Start_Loging] 

Data Type: Command_Type 
Data Representation: Enumeration 

Current_Mode = 

BNF: [Hex + Decimal + Octal Binary + Formated + Activity + Prcfered_Data + Idle 
+ Logging] 

Data Type: Mode_Type 

Default_Bus_Number = 

Comments: MFS data bus selection 

Data Type: Bus_Num 

Data Representation: enumeration 

Device.Name = 

BNF: [VTIOO + VT200 + UNKNOWN] 

Data Type: Terminal_Device_Type 
Data Representation: enumeration 
Default Value: VT200 

Elements = 

Comments: Number of Entries on the particular screen 

Data Type: Natural 

Data Representation: numeric 

Data Range: (0,3168) 

Esc_Blink = 

BNF: [Character) 

Comments: Output device escape sequence to set blinking atributre on chracters. 

Data Type: String 


80 






Data Representation: alpha-numeric 


Esc_Bold = 

BNF: (Character) 

Comments: Escape sequence to set bold atribute on output device. 

Data Type: String 

Data Representation: alpha-numeric 

Esc_Clear = 

BNF: (Character) 

Comments: Escape sequence to clear the screen on the output device 

Data Type: String 

Data Representation: alpha-numeric 

Esc_Hilite = 

BNF: (Character) 

Comments: Escape sequence to set the hilite atribute for the output device. 

Data Type: String 

Data Representation: alpha-numeric 

Esc_Line = 

BNF: (Character) 

Comments: Escape sequence to cause a line to be drawn on the output device. 

Data Type: String 

Data Representation: alpha-numeric 

Esc_Pos = 

BNF: (Character) 

Comments: Escape sequence to position the cursor on the output device. 

Data Type: String 

Data Representation: alpha-numeric 

Input_Command = 

BNF: (Character) 

Comments: Formated text string containing a user command 
Data Type: String 


81 








Data Representation: alpha-numeric 


Input_Data = 

BNF: (Character) 

Data Type; String 

Data Representation: alpha-numeric 

Interface_Address = 

Comments: CSR address of VAX 1553 interface card 

Data Type: Address 

Data Representation: numeric 

Interface_Number = 

Comments: MFS unibus interface number 
Data Type: Integer 
Data Representation: numeric 
Data Range: (1,4) 

Default Value: 1 

Line = 

Data Type: Integer 

Data Representation: numeric 

Data Range: (0,24) 

Default Value: 0 

Log_FiIe_Name = 

BNF: (Character) 

Data Type: String 

Data Representation: alpha-numeric 

Default Value: "BUS_LOG.OUT" 


LSB = 

Comments: Least Significant Bit of data 

Data Type: Integer 

Data Representation: numeric 


82 



Machine_Typc = 

BNF: [VS32(X) + MVII + V780 + V6X + V8X + AYK] 

Comments; Type of computer the software is exucuting on 
Data Type: A_Machine_Type 
Data Representation: enumeration 

Message_Content = 

BNF: [ {Character} I {Bus.Word}) 

Comments: This field contains die text of die message to be displayed 

Data Type: String 

Data Representation: alpha-numeric 

Messagejd = 

Comments: The message number associated with the descriptor 

Data Type: Integer 

Data Representation: numeric 

Message_Type = 

BNF: [Info + Error + Bus_Data + Prompt] 

Data Type: Output_Messagc_Type 
Data Representation: enumeration 


MSB = 

Comments; Most Significant Bit of the message data 

Data Type: Integer 

Data Representation: numeric 

Numeric_Data = 

BNF: (Integer) 

Data Type: Numeric_Display_Data 
Num_Cols = 

Comments: Maximum number of colomns on the output device. 

Data Type: Positive 

Data Representation: numeric 

Data Range: (1,1024) 


83 







Default Value: 80 


Nuni_Lines = 

Comments: Number of lines on output device. 

Data Type: Positive 
Data Representation: numeric 
Data Range: (1,768) 

Default Value: 24 

Out_File = 

BNF: (Character) 

Comments: File name of output stream 

Data Type: String 

Data Representation: alpha-numeric 

Receive_Buffer_Address = 

Comments: Virtual address of physical memory buffer 

Data Type: Address 

Data Representation: numeric 

RT_Num = 

Comments: Remote Terminal address 
Data Type: RT_Address_Type 
Data Representation: numeric 
Data Range: (0,31) 

Bits: S 

RT_Status = 

BNF: [Acctive + Inactive + Unknown] 

Comments: Most recently obscved status of a given RT 
Data Type: An_RT_Status 
Data Representation: enumeration 

SA_Num = 

Comments: Subaddress of selected RT 
Data Type: RT_Subaddress_Typc 


84 










Data Representation: numeric 
Data Range: (1,30) 

ScaJe_Factor = 

Q)mments: The multiplier to convert the raw data number to the internal representation 

Data Type: Float 

Data Representation: numeric 

Screen_Selcction = 

Comments: Integer to specify screen dislay format to use with current data 

Data Type: Integer 

Data Representation: numeric-coded 

Startup_Vector = 

Ci)mments: Microcode starting location 

Data Type: Address 

Data Representation: numeric 

Status = 

BNF: [Normal + Bus.Error + Uscr^Error + Conrig_Error] 

Status_Message = 

BNF; (Character) 

Comments: Errors, warnings, and information associated with the software not the 
actual bus trafic. 

Data Type: String 

Data Representation: alphabetic 

Title = 

BNF; (Character) 

(Comments: Text to associate with the screen field 

Data Type; String 

Data Representation: alpha-numeric 

Transmit_Buffer_Address = 

(Tomraents: Virtual memory address of physical buffer 


8S 






Data Type: Address 
Data Representation: numeric 


Tran_Rec = 

BNF: [Transmit + Receive] 
Comments: Direction of data transfer 
Data Type: Data_Direction_Type 
Data Representation: enumeration 


Units = 

BNF: [Seconds + Minutes + Hours + Inches + Feet + Miles + CcntiMcters + Meters 
+ KiloMeters + Degrees + Semicircles + In_Per_Sec + Ft_Per_Sec + Mi_PCT_H 
+ M_Per_Sec + F£_Per_Sec2 + M_Per_Sec2] 

Comments: Units to display screen field in. 

Data Type: Avionics_Units 
Data Representation: enumeration 

Update_Rate = 

BNF: Seconds 

Comments: TTiis message to the output fonnater expresses how often to refresh the 
screen. 

Data Type: Integer 

Data Representation: numeric 

Data Range: (0,60) 

Default Value: 3 

Units of Measure: Seconds 

Accuracy: 1 

Valid_Command = 

BNF: [Sclect_RT + Selcct_SA + SeIcct_TR + Selcct_Bus + Sct_Display_Mode 
+ Sct_Log_Mode + Set_Watch + Start_Loging] 

Data Type: Valid_Command_Type 
Data Representation: Enumeration 

Valid_Data = 

BNF: [ Integer I String I EnumerationJ 


86 








Comments: This flow contains data that has been verified to be of the format requested 
the values have not been tested 

Valid_Input_Format = 

Comments; Template of the input expected to check agaih.. actual input, 

Watch_Mask = 

BNF: {Bits} 

Comments: Bit mask to use as logging criteria, (i.e. when pattern is seen on bus log the 
message) 

Data Type: Bit_Array 
Data Representation: bolean 


Width = 

Comments: The number of spaces to use on the output for representing dj * field. 

Data Type: Natural 

Data Representation: numeric 

Data Range: (0,132) 

Windows = 

Comments: The number of data window s to show on the screen at one time. 

Data Type: Integer 

Data Representation: numeric 

Data Range: (1,4) 

Default Value: 1 

Window_Id = 

Data Type: Integer 
Data Representation: numeric 
Data Size: 1 byte 
Data Range: (1,4) 

Default Value: 1 

Word_Num = 

Comments: Subaddress word offset 
Data Type: An_RT_Word_NumbCT 


87 







Data Representation: numeric 
Data Range: (0,31) 




APPENDIX B 


10 ADDITIONAL ADA STRUCTURE CHARTS FOR CSC’s 


89 





10.1 Daul Port Manager 





















10.2 Screen Manager 








10.3 Asyncronous Input 
















10.4 UT Bit Manipulations 


Lrr_Bit_Mantpulations 


Bit_Operators 
^ Anonymous^ 

And 

1 

Shift^Left 

Or 


Shift^Right 

Xor 


Extract_Bits 

Not 


lnsert_Bits 





Binary 


A 




A_Binary_F 


93 
















10.5 LT Variable String 



94 






APPENDIX C 


10 Program Dependancy Chart for monitor application 


95 


































































































