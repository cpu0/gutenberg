REf AD-A242 279 PAGE 


Form Approved 
OPM No. 0704-0188 


Pubic npoiting buRhn for ttili 
ncodcd, and rmfowing Iho cot 
HaadquHiMtSaivfea, Okactoi 
ManigmwM and Budgtl Wai 


1. AGENCY USE ONLY (Leave Blank) 

i. Report date 




4.TITLEANDSUBTrr 

R.R. Software, Inc., Janus/Ada 2.2.0 Unix, Northgate 386/25 Unix 3.2 (Host & 
Target), 901129W1.11089. 


6 .AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND AOORESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


w imt for iwMng Inamictiona aaaRhing axWng (Ma aoutoac galhtilng and niakMining tfw data 
r aapaci of Ihia oolaclion of Monnalion, tndudhg auggaadm for radudng ihia budan, to Waahinglon 
. a 1204, Aringlon, VA 22202-4302, and to <10 Onea of Monnalion and Ragulalory Affairs, Offioa of 


3. REPORT TYPE AND DATES COVERED 

Rnal: 29 Nov 1990 to 01 Jun 1993 





RMING ORGANIZATION 
RT NUMBER 

AVF-VSR-437-0891 


9, SPONSORINGAflONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm3E114 
Washington, D.C. 20301-3081 


SS(ES) 




10. SPONSORlNGAilONITORING AGENCY 
REPORT NUMBER 




12a. 61 STRIBUTION/AVAIUBIUTY statement 

Approved for public release; distribution unlimited. 


112b. DISTRIBUTION ( 


13. ABSTRACT (Maximum 200 words) 

R.R. Software, Inc., Janus/Ada 2.2.0 Unix, Wright-Patterson AFB, OH, Northgate 386/25 Unix 3.2 (Host & Target), ACVC 

1 . 11 . 




.14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


1,8. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCUSSIFIED 


15. NUMBER OF PAGES- 

16. PRICE CODE 

20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 



AVF Control Number :AVF-VSR-437-0891 

1 August 1991 
90-08-02-RRS 


Ada COMPILER 
VALIDATICW SUMMARY REPORT; 

Certificate Number: 901129W1.11089 
R.R. Software, Inc. 

Janus/Ada 2.2.0 Unix 

Northgate 386/25 Uhix 3.2 ■> Northgate 386/25 Unix 3.2 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ao«4ta3loa For 


HUS OMkl 
VSIC tiB 
Uaaj'i.iD'UKiad 


/-• - 


It—:- 

Dlalrlbutlon/ 


AvailabilUy Co4*a’ 


Dist 


Avail aad/or 
Spscial 


□ D 







Certificate Information 


The follovd.n 9 Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 29 November 1990. 

Con^iler Name and Version: Janus/Ada 2.2.0 Unix 

Host Conpiter System: Northgate 386/25 (under SCO Unix 3.2) 

Target Computer System: Northgate 386/25 (under SCO Unix 3.2) 

Customer Agreement Number: 90-08-02-RBS 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

901129W1.11089 is awarded to R.R. Software, Inc. This certificate expires 

on 1 June 1993. 

This report has been reviewed and is approved. 







Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 




45433-6503 


J * r *•'* ' ■ 

Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 







Declaration of Conformance 


Compiler Implementor : R.R. Software, Xnc. 

Ada Validation Facility : Wright-Patterson AFB, Ohio 45433-6503 
Ada Compiler Validation Capability (ACVC) Version ; l.ll 

Base Configuration 

Ada Compiler Name : Janus/Ada Version : 2.2.0 Unix 

Host Architecture: Northgate 386/25 Host OS & Ver. :SC0 Unix 3.2 

Target Architectxire: Northgate 386/25 Target OS & Ver.:SCO Unix3.2 

Implementor's Declaration 

I, the undersigned, representing R.R. Software, Inc. have 
implemented no deliberate extensions to the Ada Language standard 
ANSI/MIL-STD-1815A in the compiler listed in this declaration. I 
declare that R.R. Software, Inc. is the owner of record of the Ada 
compiler listed above, and as such, is responsible for maintaining 
said compiler in conformance to ANSI/MIL-STD-1815A. All 
certificates and registration for Ada language compiler listed in 
this declaration shall be made only in the owner's corporate neune. 






mes A.'^ewart 
Vice President 
R.R. Software, Inc. 




Date 


Owner's Declaration 

I, the undersigned, representing R.R. Software, Ihc. take full 
responsibility for implementation and maintenance of the Ada 
compiler listed above, and agree to the public disclosure of the 
final Validation Summary Report. I declare that all of the Ada 
language compilers listed, and their host/target performance are 
in compliance with the ANSI/MIL-STD-1815A. 




ewarx 
esident, 
ftware, Inc 







TABLE OF CCKTENTS 


CHAPTER 1 INTRODUCTIOJ 

1.1 USE OF THIS VALIDATiai SUMMARY REPORT.1-i 

1.2 REFERENCES.. . ... 1-2 

1.3 ACVC TEST CLASSES.■.1-2 

1.4 DEFINITIOJ OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATIW DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . . ..3-1 

3.2 ...3-1 

. 3.3 TEST EXECUTICW.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 












CHAPTER 1 


INTRODUCTION 


The Ada inplementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conf>iler Validation Capability (ACVC). This Validation Sumnary 
Report (VSR) gives an account of the testing of this Ada iii^leinentation. 

Fpr any technical terms used in this report/ the reader is referred to 
tPro90]. A detailed description of the ACVC may lae found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conpiters, operating systems, and ccaipiler versions identified 
in this report. 

The orgemizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF \^ich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 


INTROXJCTION 


1.2 REFERENCES 


Reference Manual for the Ada Programming Language, [Ada83] 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Ada Con{>iler Validation Procedures, Version 2.1, [Pro90] 

Ada Joint Program Office, August 1990. 

[UG89] Ada Conpiler Validation Capability User's Guide, 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conf>liwce of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. '^le first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating tiks result vdien they 
are executed, 'fliree Ada library units, the packages RETOi^T and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ai^ Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Stai^rd. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests fqr Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected! Some of the class B tests contain legal Ada 
code vdiich must not be flagged illegal the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in ^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests- and 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 


iNumjcnoN 


For each Ada implementation, a customized test suite is produced the 
AVF. Hiis customization consists o£ making the modifitauiphs described in 
the preceding paragraph, removing withdravm tests (see Section 2.1) 
possibly some inapplicable tests (see Section 2.2 and [0089])■ 

In order to pass an ACVC an Ada in^lementation must process each test of 
the customized test suite according to t«ie Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Conpiler The software and any needed hardware that have to bt-- added 
to a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 


Ada Conpiler 
Validation 
Capability 
(ACVC) 


The means for testing compliance of Ada inplemehtatiohs, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the tenplate for the validation summary 
report. 


Ada An Ada conpiler with its host conputer system and its 

Inplementation target conputer system. 


Ada Joint The part of the certification body vdiich provides policy and 
Program guidwce for the Ada certification system. 

Office (AJPO) 


Ada The part of the certification body \d)ich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 


Conpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written ■ or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRCHXJCTICW 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LBN 


Operating 

System 


Target 

Conpiter 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service!- of all . 
requirements specified. 

An individual or corporate entity ^o enters into an 
agreement with an AVF \diich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A conputer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MII.-SI1>-1815A-1983 and ISO 8652-1987. Citations from 
ttie LRH take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data maxiagementi Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system >^ere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro901. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or ■ 
contains erroneous or illegal use of the Ada programming 
language. 







CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the A’/b. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 21 November 1990. 


E28005C 

B28006C 

C34006D > 

C35702A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

. C83041A 

B85001L 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BO1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given A^ in^lementation. Reasons for a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IHFLEHENT^TIOf DEPENDENCIES 


flie following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MftXJDIGITS; 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 21 tests check for the predefined type SHORT_lNTEGER; 


C35404B 

B36105C 

C45231B 

C45304B 

C45411B 

C45412B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

C55B07B 

B55B09D 

B86001V 

C86006D 


CD7101E 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LOMG_INTEGER, or 
SHOW_INTEGER. 

C35702A, C35713B, C45423B, B860C1T, and C86006H check for the predefined 
type. SHORT_FLOAT, 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG__FLCAT, or SHORT_PLCAT. 

C45531N..P (4 tests) and C45532H..P (4 tests) check fixed-point 
operations for types that require a SYSTEH.NAX_NANTISSA of 48 or 
greater. 

C45624A checks that the proper exception is raised if NACHINEJOVERFLCMS 
is FALSE for floating point types with digits 5. For this 
inplementation, HACHINEjOVERFLOWS is TRUE. 

C45624B checks that the proper exception is raised if NACHINEjOVERFLCKS 
is FALSE for floating point types with digits 6. For this 
in^lementation, NACHINEjOVERFLOWS is TRUE. 

D55A03E..H (4 tests) use 31 or more levels of loop nesting vdiich exceeds 
the capacity of the conpiler. 

D56()0lB uses 65 levels of block nesting v^ich exceeds the capacity of 
the compiler. 

D64005F..G (2 tests) use 10 or more levels of recursive procedure calls 
nesting vdiich exceeds the capacity of the compiler. 

B86001Y checks for a predefined fixed-point type other than DURATIOI. 


2-2 







IMPLEMENIATION DEFE3a)ENCIES 


C96005B checks for values of type DURATICW'BASE that are outside the 
range of DURATIOJ. There are no such values for this inplementation. 

IA3004A, 1A3004B, EA3004C, EA3004D, CA3004E, and CA3004F check for 
pragma INLINE for procedures and fmctions. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

BDSOOlA, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions. 

AD9004A uses pragma INTERFACE for overloaded subprograms; this 
inpleroentation rejects this use due to calling conventions. (See 
section 2.3.) 

CDA201C instantiates Unchecked Conversion with an array type with a 
non-static index constraint; tHis in^lementation does not support 
unchecked_Conversion for types with non-static constraints. 

Hie tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access iMthod. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

sbquential“io 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 “ 

CE2102I 

CREATE. 

IN FILE 

. DIRECT 10 

CE2102J 

CREATE' 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

' DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

• CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J • 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


2-3 


IMPLEMENTATION DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and text 
files vdien multiple internal files are associated with the same external 
file and one or more are open for writing; USE_Ei®OR is raised yihen this 
association is atteupted. - 


CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 

CE2111D CE2111H CE3111B CE3111D..E CE3114B 

CE3115A 

EE2201D uses instantiations of package SEQUENTIAL_IO with unconstrained 
array types; this inplementation raises USE_ERHOR on the atteiqpt to 
create a file of such type. 

CE2203A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This inplementation does 
not restrict file capacity. 

EE2401D uses instantiations of package DIRECT 10 with unconstrained 
array types; this implementation raises USE_EiROR on the attenpt to 
create a file of such type. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT^IO. This inplementation does not 
restrict file capacity. 

CE3304A checks that USE ERROR is raised if a call to SET LINE LENGTH or 
SETJPAGE LENC^ specifies a value that is inappropriate lot tHe external 
file. iKis implementation does not have inappropriate values for either 
line length or page length. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 80 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 


B22003A 

B24007A 

B24009A 

B29001A 

B37106A 

B51001A 

B53003A 

B55A01A 

B63001A 

B63001B 

B73004B 

B83003B 

B83004B 

B83004C 

B83004D 

B83004F 

B83030D 

B83E01C 

B83E01D 

B83E01E 

B83E01F 

B91001H 

BAIOOIA 

BAIOOIB 

BAIOOIC 

BAlOlOA 

BAIOIOD 

BAllOlA 

BAllOlE 

BA3006A 

BA3006B 

BA3007B 

BA3008A 

BA3008B 

BA3013A 

BC2001D 

BC2001E 

BC3005B 

BD2B03A 

BD2D03A 

BD4003A 



IMPLEMENTATION DEPENDENCIES 


C85006A. .E (5 tests) were graded passed by Test Modification as directed by 
the AVO. This inplenentation generates more object code for these tests 
than it can contain in a single compilation vinit. Each of these tests was 
split into five equivalent subtests. 

The tests below were graded passed ty Test Modification as directed by the 
AVO. These tests all use one of the generic support procedures, 
LengthjCheck or EnronjCheck (in support files LENCHECK.ADA & ENUMCHEK.ADA), 
whi^ use the generic procedure Unchecked_Conversibn. This implementation 
rejects instantiations of uncheckedjConversion with array types that have 
non-static index ranges. The AVO ruled that since this issue was not 
addressed AI-00590, \^ich addresses required support for 
uncheckedjConversion, and since AI-00590 is considered not binding under 
ACVC 1.11, the support procedures could be modified to remove the use of 
Unchecked_Conversion. Lines 40..43, 50, and 56..58 in LENCHECK and lines 
42, 43, and 58..63 in ENUHCHEK were commented out. 

CD1009A CD1009I CD1009M CD1009V CD1009W CD1C03A 

CD1C04D CD2A21A..C CD2A22J CD2A23A. .B CD2A24A CD2A31A..C 

CD2A81A CD3014C CD3014F CD3015C CD3015E..F CD3015H 

CD3015K CD3022A CD4061A 

BD4006A was graded inapplicable by Evaluation Modification as directed by 
the AVO. This test checks that non-static values in conponent and 
alignment clauses are rejected; but static alignment values of 8, 16, & 32 
are assumed to be supported. This inplementation supports only values 1 & 
2; it rejects the clauses at lines 42, 48, 58, and 63, which are not marked 
as errors. 

AD9001B was graded passed by Processing Modification as directed by the 
AVO. This test checks that, if pragma INTERFACE is supported, no bodies 
are required for interfaced subprograms. This implementation requires that 
some foreign bodies exist, even if the subprograms are not called. This 
test was processed in an environment in which implementor-supplied foreign 
bodies were present. 

AD9004A was graded inapplicable by Evalxxation Modification as directed by 
the AVO. This test uses a single INTERFACE pragma for several overloaded 
procedure and function subprograms; this implementation does not support 
the pragma in such circumstances due to the calling conventions of the 
interfaced language, and thus rejects the pragma. 

CDA201C was graded inapplicable by Evaluation Modification as directed by 
the AVO. This test instantiates Unchecked_Conversion with an array type 
with a non-static index constraint; this inplementation does not support 
Unchecked_Conversion for unconstrained types and so rejects the 
instantiation. The AVO ruled that various restrictions on 
Unchecked_Conversion may be accepted for validation under ACVC 1.11, 
because AI-00590, which addresses Unchecked_Conversion, did not show an ARG 
consensus at the time of ACVC 1.11's release. 


2-5 






IMPLEHEMTATION DEPENDENCIES 


CE2108B, CE2108D, and CE3112B were graded passed Test Modification as 
directed the AVO. These tests/ respectively, check t^t ten^rary files 
that were created ly (earlier-processed) CE2108A, CE2108C, and CE3112A are 
not accessible after the conpletion of those tests. However, these tests 
also create temporary files. This inplementation gives the same names to 
the tenporary files in both the earlier- and later-processed tests of each 
pair; thus, CE2108B, CE2108D, and CE3112B report failed, as though they 
have accessed the earlier-created files. The tests were modified to remove 
the code that created the (later) tenporary file; these modified tests were 
passed. Lines 45..64 ^re commented out in CE2108B and CE2108D; lines 
40..48 were commented out in CE3112B. 


2-6 






CHAPTER 3 


PROCESSING INFORMATIOI 


3.1 TESTING ENVIRONMENT 

The Ada inplementatlon tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
inplementation system, see: 

Isaac Pentinmaki 
R.R. Software, Inc. 

P.O. Box 1512 
Madison, WI 53701 

For a point of contact for sales information about this Ada inplementation 
system, see: 

Jim Stewart 
R.R. Software, Inc. 

P.O. Box 1512 
Madison, WI 53701 


Testing of this Ada inf>lementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3.2 Summary Of Test Results 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vrtiether the test is applicable or inapplicable; 
otherwise, the Ada Iii^jlementation fails the ACVC (Pro90]. 


3-1 






PROCESSING INFORMATIW 


For all processed tests (inapplicable and applicable), a result vas 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number *of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's>maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of -^plicable Tests 3773 

b) Total Number of Withdrawn Tests 83 

c) Processed Inapplicable Tests 113 

d) Non-Processed I/O Tests 0 

e) NOn-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 314 


g) Total Number of Tests for ACVC l-.ll 4170 


3.3 TEST EXECUTION 

The diskettes containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
diskettes were installed onto a Northgate 386 with DOS 3.30 and then 
archived for Installation onto a Unisys 386 with SCO Unix. Ihe files were 
restored onto a Unisys 386 with SCO Unix and then transferred from the 
Unisys 386 to the Northgate 386 running SCO Unix via the Unix Tar command. 


The files were transferred from the Unisys 386 to the Nor^gate 386 running 
SCO Unix via the Unix Tar command. 


After the test files were loaded onto the host conputer, the full set of 
tests was processed by the Ada inplementation. 


The tests were conpiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link described above, and run. The results 
were captured on the host computer system. 


3-2 







PROCESSING INFORNfVTK^ 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See ^pendix B for a con?)lete listing of 
the processing options for this inplementation. It also indicates the 
default -options. The options invoked explicitly for validation testing 
during this test were; 

The options used for Janus/Ada are: 

-Q - Quiet error messages - suppresses user pronpting on errors. 

Necessary for running B-Tests; otherwise every error would have 
to be responded to. 

-W ~ Warnings off - warnings were suppressed mainly because of the 
many confusing warnings the validation tests produce. Many 
validation tests have intentional errors (such as an expression 
vAiich always raises an exception, use of null ranges, unreachable 
code, etc.). The large volume of warnings produced made it 
difficult to grade the B-Tests in particular, so they were 
suf^ressed. 

-BS - Brief Statistics. This was also used to cut the amount of output 
produced ^ the conpiler-during con^ile time. 

All other options used their default values. 

Then, all of the non-B-Tests were linked with the options: 

-Q - Quiet error messages - suppresses user pronpting on errors. 

Necessary for running L-Testsj otherwise every error would have 
to be responded to. 


-T - Trim unused code - this option directs the linker to remove 
unused subroutines from the result file. This can make as much 
as a 30K space saving in the result file. 

-B - Brief Statistics. This was also used to cut the amount of output 
produced by the Linker. 

All other options used their default values. 


Test output, con 5 )iler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 


APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, \diich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, v^ere "V” represents the maximum input-line 
length. 

Macro Parameter ’ Macro Value 


$MAX_IN_LEN 200 

$BIG_ID1 (1..V-1 -> 'A', V-> '1') 

$BIG_ID2 (1..V-1 -> 'A', V-> ’V) 

$BIG ID3 ■ (1..V/2 -> 'AM & '3' & 

(1..V-1.-V/2 -> 'A') 

$BIG_ID4 (1..V/2 »> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (l..V-5-> '0') & "690.0" 

$BIG_STRING1 & {1..V/2 -> 'A')&- 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 »> ' ') 

$MAX_LEN INT_BASED_LITERAL 

"2:" & (l..V-5--> '0') & "11:" 

$MAX_LEN_REAL BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 







MJOO PARAMETERS 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SI2E 32 

$Al.IGNMENt 2 

$COUNT_LAST 32_767 

$DEFAULT_MEM_SIZE 65536 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NftME UNIX 

$DELTAJDOC 2#1.0#E-31 

$ENTRY_ADDRESS (0, 16#40#) 

$ENTRY_ADDRE3S1 (0, 16#05#) 

$ENTRY_ADDRESS2 • (0, 16#01#) 

$FIELp_LAST 32_767 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUC3J_FI.XED_TYPE 

$FLCAT_NAME NO_SUCH_FIl3AT_TYPE 

$FORM_STRING "" 

$F0RM_STRING2 CANNOT_RESTRICT_FILE_CAPACITY 

$GREATER_THAN_DURATIW 

300_000.0 

$GREATER THAN DURATION BASE LAST 

T.0E6 

$GREATER_THAN_FLCIAT_BASE LAST 

1.'(Je+40 

$GREATER_THAN_FLCIAT_SAFE LARGE 

1.UE38 

A-2 







H^OO PABAHETERS 


$(atEATER THAN SHORT FLOAT SAFE LARGE 
“ '1.0E308 

$HI(2i_PRI0RITY 0 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAME 

$ILLEGAL_EXrERNAL_FILE_NAME2 

<BAD/"'‘> 

$INAFFROPRIATE LINE LENGTH 
~ -1 

$INAPPROPRIATE PAGE LENGTH 
” -1 

$INCLUDE_PRAiGMAl PRAGMA INCLUDE ( "A28006D1.\DAI') 

$INCLUDE_PRAGHA2 PRAGMA INCLUDE (’'B28006E1 .ADA*') 

$INTEGER_FIRST -32768 

$INTEGER__LAST 32767 

$INTEGER_LAST_PLUS_1 32768 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -305_000.0 

$LESS THAN DURATION BASE FIRST 

-1T0E6 

.$LINE_TERMINATOR ASCII, LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

NULL; 

$MACHINE_CODE_TYPE NO_SUCH_TYPE 
$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT > -214783648 


A-3 








MACRO PARAMETERS 


$MAME 

NO_SUCH_INTEGERjrYPE 

$NAME_LiST- 

UNIX 

$NAME_SPECIFICATI0N1 

/\isr/ike/x2120a 

$NAME_SPECIPICATI0N2 

/\asr/ike/x2120b 

$NAME_SPECIPICATICW3 

Aisr/ike/x3119a 

$NEG_BASED_INT 

16#PPPP_PPPP# 

$NEW_MEM_SIZE 

65536 

$NEW_STORJJNIT 

8 

$NEW_SYSJJAME 

UNIX 

$PAGE_TERMINATOR 

ASCII.PP 

$RECORD_DEPINITION 

RECORD NULL; END RECORD; 

$RECORD_NAME 

NOJSUCH_MACHINE_CODE__TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

512 

$TICK 

0.01 

$VAR1ABLE_ADDRESS 

PCNDECL. Some_Var 'Address 

$VARIABLE_AI»3RESS1 

PCNDECL.Soine_Var2 'Address 

$VARIABLE_ADDRESS2 

PCNDECL. Soine_Var3 'Address 

$YOUR_PRAGMA 

ALL_CHECKS 


A-4 






APPENDIX B 


OMPILATICW SYSTEM OPTICKS 


The conpiler options of this Ada isplementation are provided by the 
customer and can be found in Appendix F, section F.9/ page F-14. 







COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada inplementation ace provided the customer 
and can be found in i^)pendix F, section F.9, page F-14. 


B-2 







JUnkMemual 


Jlink Manual 

The JnnuVAda tinker is used to combine a main program with system and 
user defined compiiatton units to create an executable program. Only object 
code flies • that is, JRL (Janus relocatable) and SRL (specification relocataUe) 
files • created by the Janus/Ada compiler, assembler, or other compatibie 
‘ products can be combined. For more information on SRL and JRL files, see 
Section 10,1 of tlie compiler manual. The linker only needs to be supplied 
with the name of thr'obj^t codefile for the main program. It will search disks 
(including a swap disk, if desired) for the required units. It determines the 
loading order of tlie units, and finaiiy produces an executable program. The 
liniwr is disk based, so any possible sized program may be linked with JUNK 
It may not be possible to produce an easier to use linker, 

Using the Linker 

The user only needs to type the command 
JUNK (d;|prOQjmma 

to run the linker. The disk name d; specifies the disk on which to look for the 
main program. The prog, name is the name of the object code file for the 
mein program, without the SRL or .JRL file name exhmsion. The result file 
Is placed into the file witii the same name as the main program object code, 
arid tire file name extension appropriate for your system (,COH or .EXE for 
MS'DOS). The result file is placed on the disk where the main program is 
found. 

Examples; 

JLINKTESTPROG 

•• Links Tasiproj lo make an exocutabte piogiam. 

JUNK B.QSORT 

- Links Qson (v»iiicri will bu touno on tna 8: disk) 

•• into an «A«cutabie piogrom. 

This is all of the infomiation needed to use the linker. More details about the 
operation of the linker will be found on succeeding pages. 


: n.iK.i 



Revition 4.6 







Jlink Manual 


Linker Operation 

The linker operates automattcaKy. However, to better understand die opera* 
lion of the linker options (below), a brief description of liie Uniter operation 
is given here. 

The following disk (drive) name detlnltions are used throughout the test of 
the linker manual. 

The de/oult disk is the one currently logged In on your^rstem. This Is the disk 
name which appears in the system prompt 

The source disk is the disk whicli Is specified on tlie command line as the, 
source of the main program. Unless a different disk is specified on the 
command line, it will be the default disk. 

The dettlncuion disk is the disk to which the output executable flic will be 
written. Unless a different disk b specified on the command line, it will be the 
source disk. 

The swop disk is a disk specified on the command Une which allows a whole 
set of di^ to be searched by swapping each disk Into a disk drive. Any disk 
other than the destination disk may be used for this purpose. There is no 
swap disk unless tire swap option is used. 

In many ca$«s. the default, source, and destination disks refer to the same 
hard disk, and the swap disk is not needed. 

There are two kinds of segments (memory areas) referred to In this manual. 
Physical segments are the segments inipo^ by the undeHying hardware. A 
logical segment Is the segmenting imposed by the Janui^Ada compiler and 
asKmblcr.-cach unit is divided into three logical segments • code, data, and 
constant Tire linker's Job is 10 combine many logical segments into the proper 
number of piiysicai segments. Whenever a segment Is referred to in the rest 
of this manual, it means a logical segment, unless otherwise noted. 

The mapping between phv'sical segments and logical segments is specified 
by the program's memory model. Many machines with modem architectures 
allow the mapping of the many logical segments into one laige physical 
segment These machines require only one memory model. Other machines 
(like the 8086 family) have an aichltecture which makes the mapping more 
difficult. The different models generate different amounts of code, run at 
different speeds, and have ditterent limits on the size of programs. 

UNK.2 

Copyrtjhi 1969. R R SchM'si;, (tic 






JUnk Manual 


On the 8086 (and chips In the same famltp), the default memoiy model WlU 
generally cause the linker to produce a COM fde. This memoiy n^el, called 
Model 0, has a maximum of 6dK of code In a program. To allow the use of 
more code in a program, one may use tlie /Ol (Model 1) option tn both the 
compiler and In the linker (see below). This option causes the linker to 
produce an EXE flic; the code size is restricted then only by your operating 
system and by the amount of memory available on your machine. Note titat 
some versions of the Janus/Ada compiler are sold without the libraries to 
allow the use of Model 1. 

All compilation units In a given program must be complied with the same 
memory model, and the program must be linked with that same model; the 
compile and ilte linker enforce this ntle. 

The linker operates tn three phases. The first phase loads the headers of all 
of the units, and thereby determines which units are needed. This phase also 
records the disks where the units are found (for later use) and creates a table 
of entry points (places where other units may access this one). The disks are 
search^ In the following order; fust the source disk, then the dehiuh disk, 
and titen the swap disk until alt of the units art found (or the linker Is aborted 
by the user). 

The second phase does not use the disks at all. The table of units to load 
created by the first phase 1$ used to deteimlne the loading order of the units. 
This step Is necessary due to the elaboration rules of Ada (See Section 10.5 
of the compiler manual), since .lanus/Ada loads units in the order In which 
they are to be elaborated. The load address of each unit Is determined in this 
step. The second phase, tries to minimize the amount of disk swapping that 
wiU be necessary in the third phase 

The third phase reads in each unit, fixes up all external references and 
relocatable items, and writes out the resulting executable file. (External 
references are usages of items declared outside of the unit being linked. The 
linkage information held In an external reference is replaced by actual' 
machiine addresses when it is ’fixed up' ] 

If the swap option is not used, as )s usually tire case when compiling from a 
hard disk, the fixing up is done wiihout any user intervention. A prompt is 
issued each time the swap disk needs to be changed, with a list of the units 
which should be on the disk inserted. The linker tries to be friendly about 
errors in this process - If the designated file Is not found, It Just asks again for 
the disk to be Inserted. 


* I' 


.'Iv3 


Rtvmion 4.6 





Jiliik Manual 


Linker Command Line and Options 

The linker command line looks like: 

JLINK (O:]prog_name{/uptiona} 

The pro 9 _name Is the name of the object code file (SRL or JRL fUe) of the 
main piogram, without the *.SRL* or *.JRL* extension. (We will refer to this 
simply as an SRL file from here on in this manual; however, everything said 
about the main program’s SRL file should be understood to apply if the main 
program Itas gmeraled a JRL [as It would if a separate spKlflcatlon was 
provided]). The optional disk name D allows the source di^ to be speclfled 
as sotiM other disk tlian the default disk. The main program's SRL file should 
be found on the source disk. The main program must be a JanuVAda 
parameierless procedure. 

Note: 

No file name extension is allowed. 

In general, the name ol the SRL file tor the main program corresponds to the 
first eight letters of tlw unit name for the nraln program. If that name had 
already been used by some other unit, however, tlren the SRL file name will 
vary. This can only happen If some other unit In the seme piogram library 
has the same first eighi l^ers as the main program. For more infonnallon on 
Janus/Ada file naming conventions, see Section 10.1 of the JanuVAda 
compiler manual. 

Many users will r\ever rreed any options; most that do wilt need only the /Ol 
option to allow for the larger memory model, the /F2 option to use hardware 
floatingpoint, the/Toption to reducethesizeoftheexecutable,oroeeaslonal* 
ly the/E,/L./Q, or/S options. However, all the fciiowlng options are provided 
to increase the flexibility of the linker 

Chhhh Set tne starting address of the code within the physical code 
segment to hhhh (hexadecimal). The physical code segment will 
still be allocated front zero by the operating system. The physical 
code segment can be loaded anywhere in special applications, so 
this option will be used veiy rarely. The resulting program will not 
worii under MS-DOS. ' 

Dhhhh Set the starting addiess of the data within the physical data 
segment to hhtih (hexadecimal). The p.hysical data segment will 
still be allocated from zero. The physical data segment aUocation 


UNK.4 


CopyriQht it It Ikiiiwoitf, Inc 


JUidc Manual 


address can be chnng(>d by modl^lng JL1B86. This option will 
only be used for very s]>fclal applications. The rasultlng program 
will not work under MS DOS unless JUS86 b modified. 

E Create an EXE file. This Is assumed if the/Ol option is given. This 

allows allow a somewhat larger total program size if memory 
model 0 is used, by using different physical segments for the logical 
constant segment and the logical code segment. 

Fn Usetheclassn iwherenls0or2) floatingpoint library. If a floating 

point library of the specified class already exists In the link, then It 
Is used. Otiiciwise. the default floating point library is used. If this 
option is not used, the clast 2 library Is used if any unit was 
complied with the /F (hardware floaiing point) compiler option, 
or otherwise contains hardware floating point operations; and the 
class 0 libraiy b used othciwlsc. The classes are; 

0 Universal somvare floating point (FLOATOPS). 

1 Nol supix^'ried in our Ada compilers. 

2 Unwersal haidware floaiing point (FLOATS? on the S086 
series). Wuriiing- In some versions of Janui/Ada, the 
hardware of the S0S7 chip can cause some surprising results 
when using this option. Clreck Apirendix Section L2 In the 
compiler manual io see If your version is affected. 

3 N(;t supported in our Ada compilers. 

This option allows tire use of different fonirs of floating point sup* 
poil without recompiling the ptogram. It also eliminates the pos* 
slblliiy of more tlran one floating point library being used In a 
single program (which docs not work!). An error Is generated If you 
try io use software' sup{jort wittr units complied with the /F option. 

L Turns on the listing option. The current unit being worked on Is 
printed, and a table of acidicsses for each unit is listed on the con¬ 
sole. These can be used for debugging. Ttre format of the table is; 

Pack-iwme Code-hhiin Data*hhhh Const-hhhh 
where hhhh is the hex value of the first address assigned to that 
unit’s data, or coiiiuuit segment. The order given for the 
units III tire secciia .'.nd' itrird passes of the linker specifies the 


U.NK.5 


R«vUion4.6 


Jlink Manual 


elaboitiUon oidcr of tlic various units (sas Section 10^ of the 
cotnpikir manual). 

Mhhhh Set the minimum see of the physical code segment plus the 
physical comtani segment. The size hhhh is In paragraphs (16 
byte incientents). This forces the start of the physical data segment 
to start I'.hhh0 {iieK) bytes after the start of the physteai code 
segment. If this option is used, and the physical code segment plus 
the physical constant segment slie exce^ the minimum slra, a 
warning message is produced. This option is primarily useful for 
programs which use the Chain procedure and wish to preserve 
the physical data .segment. The option essentially causes the 
physical data segment to be in the same absolute loeations In each 
program wlrlch uses it 

This opiion may only be used with the small memory model 
(model 0). 

On Use memory model n (when n is a number between 0 and 7). This 
option is used to specify an alternative memory model to the sntall 
model used by default. All Units linked must ba compiled or 
assembled with tire speclil.^ memory model. The memory models 
are: 

0 Small code. (64K code, 64K data, 64K constants). The 
default model, and the only one supported In the C-Pak. 
Tlris model gerierates a COM file, unless the /E qpftlon is 
spc^itled. A COM file is limited to 64K total for both code 
and constants. If more Is necessary, use the /E option, or 
model 1. 

1 Large code. (Unlimited code, 64K data, 64K constants). The 

code sUe is iunited by available memory. This model is 
appropriate for larger programs. Tlrls model generates a 
.EXE fik.'. Programs that use this model will typically be 
about ten to twenty percent bigger and slower than the 
equivale.'tl program using model 0. 

2*7 Unused. 

Q Produce quiet enor mc$»ges. In the normal mode of operation, 

the link waits after every error so that the user can see the error 
without it :«ro!ling off Ihe screen. This option suppresses those 
prompts. 


•UiNKd 


CopyrigMl 198V, ft.R Soflwai*. Im. 






Jllnk Manual 


Rpatl) Re-direct the linker out})iit io the tpecifled path, thft default is the 
same palh as fitertcsme. 

Spath Use the specified path as the swap disk. The linker will abort if all 
of the libraries needed in the current piogiam are not fouiid on 
the source or default disk when tto swap disk b specified. If a swap 
disk Is specified, a prompt will be issued.for the user to change the 
swap disk. ITte linking may be aborted at any time during a swap. 
The swap disk may not be the same as the destination disk. Any 
other path may be used This option Is most useful on systems 
with limited disk capacity (i.e. s^ms with less than 720K per 
disk). 

T Trim out unieacitabie subprograms from units that were compiled 

with the Qoinpller’s /T option (see Appendix Section H.1 of the 
compiler mamuil); this can slgnlfleanily reduce the site of the 
ex^table file, at the cost of slowing dewn the linking process. 
Using this option invokes an extra pass, between the flrst and 
second liniier passes, to do the requested trimming. We strongly 
recommend using this option on (at least) final versions of 
programs. 

Uhhhh Set the starting address of the constants within the physical 
constant segment to hhhli hexadecimal. The physical constant 
segment will siiii be allocated from zero. The phjwical constant 
segment allocation address can be changed by modilying JLIB86. 
This option will only be used for very special applications. The 
resulting program will not work under MS-DOS unless JUB86 is 
modified. 

X Produce an eXua deailcd link map for the program. This will be 
left in a file called <cprog^name>.LNK. where <prog_name> is 
the name or the mam program. This file Is mainly for the use of 
debuggers and otiici future tools. 


Examples: 

JUNK B:TESTPflOC/RO 

- Link Tesipiog tioin me B: disk, and put ths 

- result on the U. disk. 

JUNK C:CHA1N/SB/L 

•• Link Chain from tno C. ulsK, soarch the B. disk 
•• tor needed units 8i!o>ving the user to swap disks 


LlMK-7 


RtvUlon 4.6 







Jlink Manual 


•• whan nuadad. Put tha ieault onto tha C. disk, 

•• and display a lisllns of tha link addfassas. 

JLINK B:SAVE0ArA/M8000/P2 
- Link SaveData from tha B: disk, forcing tha coda aUa 
<• to be at laast 8000 Hax oytas. Uaa floating point 
•• modal #2. 

Error Messages 

All arrois axcapi warnings ate fatal. The linker will prompt tha user after an 
error so that the user is sure to notice the error. (These prompts may be turned 
off by the /Q option). Fatal errors abort the linker. 

Some error mcissagas mention a JRL file explicitly. The meaning may actually 
be for a SRL file; the error messages only mention JRL for brevity. 

Warnings 

Some units use Ploetlng Point Hardware, yet a Softwara unit waa specified 

The softwaie anrl hardware floating point should not be mixed. If 
you have a fluatlng point co-ptocassor on your target machine, we 
recommend using only hardware floating point; otltetwise, use 
only software ficaitiig point. 

Tha Code segment is larger than the minimum 
(See /M option, above, for explanation) 

The unit xxxx is obsolete because yyyy was racompiled 
It will be ignored 

The unit xxxx lias an optional body, and that body was made ob> 
solete by recompiling yyyy (one of the units wiUied by xxxx). 

Ada's rules state that xx>:x must be Ignored union It Is recompiled. 
The linker is Just letting you know that this happened; If you really 
want to havv the body of xxxx linked in, you should recompile it. 
This same message can ap^xrar ns an enor if xxxx Is anything other 
• than an optional body. 

Command Line Errors 

These are all causud by an inconect command line. 

Command Line Option Unknown 


CopvrigiU i98V. R R Sohxvnr*. Iik. 


UNK-B 






JUnk Manual 


An option follcHving a slash dtxs not conespond to any legal linker 
option. 

Dltk Namu too long 

The disk name In the command line may have at most one letter. 


Extension too long 

At most three letters aie allc.vcd In a file name extension. (Tills mes> 
sage comes from our standard command line parser. In fad, the 
linker does not allow any flic name extensions) 


.Extensions not Allowed in Linker 

The unit name given to link must not have a file name extension. 


File Name too long 

The file name In the command line .should tse at most eight letters 
long. This is no longer checked in most versions of the linker, so 
this error should not occur. 


Garbage on end of command line 

The linker cannot understand some or all of the command line. 
Make sure that the syntax of the command line matches that listed 
In the section called "Linker Command Line and Options,* above. 

Illegal Disk Name for Option 

A disk name for the /R or /S option was not In the range A.W. 
Illegal Valua for Option 

The value given <.v!th an optioti that needs one (/F, /O) is illegal or 
out of range. 

Missing Disk Name for Option 

An option requiring a di»k name (/R, /S) does not have one. 

Missing Value for Option 

A value was exjxicted toliowing an option (probably /F or /O). 


} T* IS • I\ 

ianr\-y 


RavUlon 4.6 





Jlink Manual 


. Multiple Colons In Fda Name 

The file name Ikied in the command line may not have muUlpie 
colons. 

Multiple Periods in I-lie Name 

TTie file name listed in the command line may not have multiple 
periods. (Tins message comes from our siandaid command line. 
parser. In fact, ilie linker does not allou; file name extensions, so no 
periods are allowed) 

No File Name Pressni 

No file nante was found on the command line. 

No Hex Numoar given for option 

An option requirhrg a hexadecimal number (/C, /D, or/M) does not 
have one. 

No option after slash on cortnnand .'ina 

There was a slash on the command line without anything following 
li 

Paths not allowed in Linker 

The file name In the connnand line may not tndude a path. 

The Swap disk cannot oe the same as the destination disk 

Most operaliiKj systems do not allow the changing of disks which 
are being written to: therefore the destination disk cannot be used 
as the swap disk. 

Too many digits In hex number 

A hex number specitled in llie /C, /D, or /M options may only have 
4 digits. 

Generic Unit Errors 

Illegal generic jnstantiatiori in xxxx 

The instantiation on Ihte number yyyy is indirectly circular. 

A unit may not instantiate a unit whicn instantiates the original unit. 

A generic una cannot Instantiaiv a generic unit which, directly or In* 
directly, causes att insiantlatlcn of the first unit. This error can 
sometimes be determined at compile time. In the case of sepamteiy 
compiled generics, however, It may not be detected until litik time. 

UNKIO 

Copyrislit 1989. PJ{ So.'r.v«i. Iw. 






Jllhk Manila! 


In this case, th;> enur niessstje gives the hstnie of the object code 
fUe that was puxluced when one of the offending instantiations 
was compiled, as well as the line number where that Instantiation 
occurred. 

Illegal generic instantiation in xxxx 

Parameter number yyyy in the Instantiation on lino number zzzz 

must not be an unconstrained type. 

Certain restrictions apply to generic actual types if the correspond¬ 
ing genetic formal type is used in certain ways in the body of the 
generic unit. In particular, the generic actual type may not be either 
an uncomtrainod attay subtype (see Section 3.6 of the compiler 
manual) ot a discriminated tecoid subiype with no defaults for the 
discriminants (sec Section 3.7.2 of the compiler manual) if the cor¬ 
responding generic foimal iype Is used In any of the following 
ways, as the type of a variable declaration; as the type of a com-' 
ponent declaration; or as the fult declarallon of a private type. This 
restriction prev'cnis using geneilcs to create objects that ne^ to be 
constrained but are not. This error can sometimes be deteimlned at 
compile time. In the case of separately complli<!d generics, however, 
it may not be detected until link time. In this case, the enror mes¬ 
sage gives the following infonnatlon: the name of the object code 
file that was prc/duccd when tire offending Instantiation was com¬ 
plied; the jraminmer number In the instantiation; and the line num¬ 
ber where the instantiation occurred. 

Link Errors 

Bad .JRLflle • illegal Oato £iemem 

The JRl. file or SRL tile f^os a bad data element. Recompile the indi¬ 
cated unit mul (if ii b a speclflcdtion) any units that depend on it. 

Cannot be a Mom Program 

A Main Program must be «< Parorneioriess Procedure. 

The unit that ends up buiug the main program must be a non- 
generic proceduie. v.ritti lio parametcis. 

Cannot uae a .COM liie tor this ptogron). 

The small model program has if>o much code and constants to fit in 
a COM iile. (MS-DOS puts a 6'IK limit on the size of COM files; 
latger ones will not load propeily.) You sitould either use the 
linker's /E anrl/or /T options if you ate not already doing so; 
decrease »iie size or t.ne units (perhaps by using the OP'HMIZE 


[JNK 11 


Ravision4.6 





Jlink Manual 


pmQma); or recompile and rdidc Ihe entire program with the large 
memory itKxlu! (model 1). 

Code Segment Ovedlow • Cannot be larger thon 64K 

You tiled to link a small memory model program (modd 0) which 
hoi.more than 64K of code You ehouki either use the linker's ft 
option If you ate nut already doing so; decrease the size of the 
units (perhaps by using the OPTIMIZE pragma); or recompile and 
rellfrk the entire program with the large memory model (m^d 1). 

Compilation Units yet to bo loaded • 

(Unit List] 

art not found on eiihor tbe source or default disks 

The flle(s) specified were not found on any of the disks, and are re* 
quited by thLs program. 

Constant Segment Overflow - Cannot be larger than 64K 

You tried to link a program with mote than 64K of constants. 
Janus^Ada only allows 64K of constants, due to the architedure of 
the 8086. 

Data Segment Overflow • Caritrot be larger than 64K 

You tried to link a program with more than 64K of statically alio* 
cated data. The maximum physiral segment size Is 64K. arid the 
present version of Janus/Ada does not allow more than one normal 
physical data segment. If you get this error, you must move enough 
data out of tire data segment to allow room both for the statically al* 
local^ data and for dynamic data, including local variables and 
objects allocated on the heap. If the package BIGARRAY was sup* 
pli^ with your compiler, you can use It to move some of your data 
into a special phirsiral data segment. 

Dependency Table Over flow 

The linker's Inicrnal table that MV'S which units are Interdependent 
has ov'erflowod. If ycru get this enor ntessage, your p r o g ram is too 
big for Janus/Ada to handle In one piece. Consider using the 
Janu!L'A;ia chuining itbrary (CHAiNUB) to break up your program 
into separate ixisse: (CHAiNUB is not provided with all Janus/Ada 
•packages). 

Disk Full 

Tlie output disk was full. 


Capyrlght 1989, K /{. S-jfiwaie. Im 


UNK 12 





Jlink Manual 


Entry Point Table Ovarflow 

The cntiy petnt bbie has uvedlowad. If you g«t this atrer mettaga, 
your piogrant Is too big for JnnuVAda to handle in one piece. 
eider using the Janu&^Ada chaining library (QiAINUB) to break 
up your program Into sepuraiz passes (CHAINUB is not provided 
udih all Janus/Ada packages). 

Error Number Incoirect 

The linker tried to use an unused error message. Please contact us 
with details; 

.JRLflle not the same urt tne second r^^ading 

This error can only occur if.you used two different swap disks on 
the first and second reading of a given unit’s JRL file or SRL file. 

Minimum Code Option can only be used with memoiy model 0 
The /M option is allowed only for small model programs. 

Missing External Item 

An external item was not found in the entry point table. The unit 
name In which the item was expected to be found Is listed with the 
error message. Tiie most likely reason for this error is an Incorrect 
compilation order. Another possible reason is that the JRL file or 
SRL flie for the gK>en unit has been damaged. Try recompiling the 
offending unit. If trmi (alls, then try recompiling the entire program 
(using COKDEK, if you have it. to insure that the order U correct). 
If tetii of these fall, please contact RR Software. 

Not a .JRL tile from tlio cunent version of Janus/Adi 

The JKL orSKL version number (In lire file) is not current. Recom¬ 
pile (he Indicated unit and (it it is a specification) any units that 
depend on it. 

Not enough RAM 

This message Indicates tiiat there Is not enough available random 
access menion/ in your machine to run ttie linker. Janus/Ada re¬ 
quires b4()K oi random access memory on your machine. If you 
tliink you have errough menioty. but you get this message, check 
whether you arc running any memoiy resident programs; such 
programs deciease the amount of available menrory on your 
maclilne. If you have enough memory and no memory resident 
programs, pk-ase contact H.K. Software. This message is usually 
printed with tne name of one of JUNK’S units; that Infoimation will 


LINK-13 


ktvuion 4.6 






JUnk Maiiuat 


help our supjMti staff let you knou/ how much more memoiy you 
will need to urn the linker. 

Obsoiuts Units (uuiici 

Some of the units that were to be linked are obsolete: that is, some 
of the units on which they depend have been recompiled more 
recently than they have. The offending units were listed before this 

' message came out. The appropriate units and any units that 

depend'on them should be recompiled. If you have COIU)ER, the 
Janus/Ada conipilailon order tool, you may wish to use it to recom' 
pile all obsolete units. 

The following compilation units could not ba loaded due to 

a mutual dependency (probably caused by Elaborate pragmas) 

[Unit List] 

The units lltiled below (it any) may also ba mutually dependant. 

[Unit Ust] 

The mutuel dapenduncy must be removed. 

The flist list of units shows a cycle of units that cannot be loaded. 
The last unit in the list is taquired to be elaborated before the first 
unit In the list, artd each other unit in the list is requited to be 
elaborated before the next unit in the list. Hence, there is no legal 
elaboration order. Tire reason (Irat each unit in the list fat required 
to be elaborated before another listed unit is one of the foU^lrig 
three reasons; the unit to be loaded first is a spedflcatbn and other 
unit is Its body; the unit to be loaded first is a specification man* 
tioned in a with clause of the other unit, or the unit 16 be loaded 
first IS a body ineiitloncd In an ELABORATE pragma of the other 
unit. The second list of units shows other unib that were not 
loadable; these may defend on (he units In the cycle, or there nuiy 
be another cy'le. 

In tlwoty, this error can only occur If an ELABORATE pragma b 
present, since otherwise the compilation order gives a proper ' 
elabomtion order. If you yet this enor and you have no 
ELABORATE pragmas In your program, then one of your SRL or 
JRL flies is proixibly damaged. Recompile your entire program In a 
. proiwr Older 

The unit xxxx lu obsulote because yyyy was recompiled 

Unit xxxx dc]x.'nds on unit yyyy, but yyyy was complied more 
recently than xxxx Recompile .xxxx and any untb that depend on 
it. This same message can appear as a warning if xxxx b an option¬ 
al body. 


UNK.14 

Copyrislit 1989. R R Smiiw'ik, lut 





Jlink Manual 


Too many Compilation Units In ona Program 

Ona piograrn may hava only 300 compilation untls. If you axeaad 
this limit, your piogram is too big for Janus/Ada to handle In one 
. plere. Consider using the Janus/Ada cliainlng library (CHAINUB) 
to break up your progiam into separate passes (CHAINUB it not 
provided with all Janus/Ada packages). 

Too many deletlori.s (or/T option 

Your program tcqulres the /T option to remove too many proce* 
duns. Reduce your use of unnceded procedures, compile some of 
your units without the /T compiler option, or do not use the /T op* 
tton. 

Too many exteinols for /T option 

Your program has so many external nfcronces that the Janui^Ada 
• linker cannot keep track of all of them for the purposes of the trim¬ 
ming done by the Pt upilon. Reduce the number of such references 
(possibly try suppressing checks), compile some of your units 
without the /T compiler option, or do not use the /T option. 

Too many generic check recoras 

Your program has more direct and indirect generic Instantiations 
than «lanus/Ada can handle; too much memoiy would be needed 
to check that the iiuitantialions are el! legal. Reduce your usage of 
generia. 

Too many relocatioim for /T option 

The program unit being loaded has so many relocations that the 
Janus/Ada linker cannot kei>p track of all of them for the purposes 
of the himining done by the /T option. Reduce the numbw of 
rekxatloiis by cempiling the offending unit with the optimizer on, 
compiling the unit withoul tire. /T compiler option, or do not use the 
fX option. 

Too much Code for otiu .JRL File 

The maxitnuiti amouni cl code (including constants) in one JRL 
file or SKL file !s 32000 t^es Tlie JRL file or SRL ^e is probably 
damaged. Recompile the indicated unit and (If It Is a specification) 
any units ttiat depetid on it 


lJHK-15 


fUvMbn4.0 







JUnk Manual 


Unit )000( has Memory Mod^ different than speciffed 

All units must be compiled with the same memory modd at that 
^jeciHed. If this massage appears wid) unit JUB^. then you are 
iKJt using ihu Jaiius/Ada libiarles for the correct model; that Is, your 
MS'DOS search path is not coaect 


Copyristil I 98 ii. K K ooiiwak, inc 


IJNK 16 



APPE3«DIX C 


APFl^IX F OF ms Ada STANDARD 


The only allowed inplementation dependencies correspond to 
iiqpleiiientation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this /appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ^pendix are to coipiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vAiich 
are not a part of ^pendix F, are: 


package STANDARD is 

type INTEGER is range -32768 .. 32767; 

type LONG__INTEGER is range -21474838648 .. 2147483647; 

type FLOAT is digits 6 range -{(2.0 ** 128) - (2.0 ** 104)) .. 

({2.0 ** 128) - (2.0 ** 104); 

type LONG FLOAT is digits 15 range -((2.0 ** 1024) - (2.0 ** 971)) .. 

■((2.0 ** 1024) - (2.0 ** 971)); 

type DURATION is delta 0.00025 range -((2.0 ** 31) - l)/4096.0 .. 

({2.0 ** 31) - l)/4096.0; 


end STANDARD; 


G-1 








Appendix F: linplenentatim Dependencies 


F Tapi me ntation Dependencies 

This appendix specifies certain system-dependent characteristics 
of the Janus/Ada, version 2.2.0 386 SCO Unix compiler. 

F.l I^plementatioii Dependent Pragmas 

In addition to the required Ada pragmas, Janus/Ada also provides 
several others. Some of these pragmas have a textual range . Such 
pragmas set some value of importance to the compiler,-usually a 
flag that may be On or Off. The value to be used by the compiler 
at a given point in a program depends on the parameter of the 
most recent relevant pragma in the text of the program. For 
flags, if the parameter is the identifier On, then the flag is 
on; if the parameter-is the identifier Off, then the flag is off; 
if no such pragma has occurred, then a default value is used. 

The range of a pragma - even a pragma that usually has a textual 
range - may vary if the pragma is not inside a compilation unit. 
This matters only if you put multiple compilation units in a 
file. The following rules apply: 

1) If a pragma is inside a compilation unit, it affects 
only that unit. 

2) If a pragma is outside a compilation unit. It affects 
• all following compilation units in the compilation. 

Certain required Ada pragmas, such as INLINE, would follow 
different rules; however, as it turns out, Janus/Ada ignores all 
pragmas that would follow different rules. 

The following system-dependent pragmas are defined by Janus/Ada. 
Unless otherwise stated, they may occur anywhere that a pragma 
may occur. 

ALL_CHECKS Takes one of’two identifiers On or Off as its 

argument, and has a textual range. If the argument 
is Off, then this pragma causes suppression of 
arithmetic checking (like pragma ARITHCHECK - see 
below), range checking (like pragma RANGECHECK - 
see below), storage error checking, and 
elaboration checking. If the argument is On, then 
these checks are all performed as usual. Note that 
pragma ALL_CHECKS does not affect the status of 
the DEBUG pragma; for the fastest run time code 
(and the worst run time checking), both ALL_CHECKS 
and DEBUG should be turned’ Off and the pragma 
OPTIMIZE (Time; should be used. Note also that 
ALL CHECKS does ucr affect the status of the 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 









App^ix F: iMplMientation Dependencies 


ARITHCHECK 


CLEANUP 


ENUMTAB pragma. Combining check suppressfion using 
the pragma ALL_CHECKS and using the pragma 
SUPPRESS may cause unexpected results; it should , 
not be done. However, ALL^CHECKS may be combined 
with the Janus/Ada pragmas^ARITHCHECK and 
RAN6ECHECK; Whichever relevant pragma has occurred 
mosft recently will determine whether a given check.^ 
is performed. ALL_CHECKS is on by default. Turning 
any checks off may cause unpredict 2 d}le results if 
execution wohld have caused the corresponding 
assumption to be violated. Checks should be off 
only in fully debugged and tested programs. After 
checks are turned off, full testing should again 
be done, since any program that handles an 
exception may expect results that will not occur 
if no checking is done. 

Takes one of the two identifiers On or Off as its 
argument, and has a textual range. Where ' 
ARITHCHECK is on, the compiler is pexrmitted to 
(and generally does) not generate checks for 
situations where it is permitted to raise 
NUMERIC_ERROR; these checks include overflow 
checking and checking for division by zero. 
Combining check suppression using the pragma 
ARITHCHECK and using the pragma SUPPRESS may cause 
unexpected results; it should not be done. 

However, ARITHCHECK may be combined with the 
Janus/Ada pragma ALL^CHECKS; whichever pragma has 
occurred most recently will be effective. 

ARITHCHECK is on.by default. Turning any checks 
off may'cause unpredictable results if.execution 
would have caused the corresponding assumption to 
be violated. Checks should be off only in fully 
debugged and tested programs. After checks are 
turned off, full testing should again be done, 
since any program that handles an exception may 
expect results that will not occur if no checking 
is done. 

Takes an integer literal in the range 0..3 as its 
argument, and has a textual range. Using this 
pragma allows the Janus/Ada run-time system to be 
less than meticulous about recovering temporary 
memory space it uses. This pragma can allow for 
smaller and faster code, but can be dangerous; 
certain constructs can cause memory to be used up 
very quickly. The smaller the parameter, the more 
danger is permitted. A value of 3 -the default 


F-2 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


DEBUG 


ENUMTAB 


Appandix F: iMplenentation Oepaiidencies' 

value-causes the run-time system to be its usual 
immaculate self. A value of 0 causes ho 
reclamation of temporary space. Values of 1.and 2 
allow compromising between "cleanliness” and 
speed. Using values other than 3 adds some risk 
of your program running out of memory, especially 
in loops which contain certain constructs. 

Takes one of the two identifiers On or Off as its 
argument, and has a textual range. This pragma 
controls the generation of line number code and 
procedure name code. When DEBUG is on, such code 
is generated. When DEBUG is off, no line number 
code or procedure names are generated. This 
information is used by the walkback which is 
generated after a run-time error (e.g., an 
unhandled exception). The walkback is still 
generated when DEBUG is off, but the line numbers 
will be Incorrect, and no subprogram names will be 
printed. DEBUG's initial state can be set by the 
command line; if no explicit option is given, then 
DEBUG is initially on. Turning DEBUG off saves 
space, but causes the loss of much of Janus/Ada's 
power in describing run time errors. 

Notes: 

DEBUG should only be turned off when the program 
has no errors. The information provided on an 
error when DEBUG is off is not very useful. 

If DEBUG is on at the beginning of a subprogram or 
package specification, then it must be on at the 
end of the specification. Conversely, if DEBUG is 
off at the beginning of such a specification, it 
must be off at the end. If you want DEBUG to be 
off for an entire compilation, then you can either 
put a DEBUG pragma in the context clause of the 
compilation or you can use the appropriate 
compiler option. 

Takes one of the two identifiers On or Off as its 
argument, and has a textual range. This pragma 
controls the generation of enumeration tables. 
Enumeration tables are used for the attributes' 
IMAGE, VALUE, and WIDTH, and hence to input and 
output enumera-ion values. The tables are 
generated when ZNUMTAB is on. The state of’the 
ENUMTAB flag is significant only at enumeration 
type definitions. If this pragma is used to 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


Apptndix. F: IiplaMntation Dependencies 


prevent generation a type's enumeration tables, 
then using the threa mentioned attributes causes 
an erroneous program, with impredictable results; 
furthermore, the type should not be used as a 
generic actual discrete type, and in particular 
TEXT_IO.ENUMERATION_Id should not be instantiated 
for the type. If the enumeration type is not 
needed for any of these purposes, the tables, 
which use a lot of space, are unnecessary. ENUMTAB 
is on by default. 

PA6E_LENGTH This pragma takes a single integer literal as its 
argument. It says that a page break should be 
added to the listing after each occurrence of the 
given number of lines. The default page length is 
32000, so that no page breaks are generated for 
most programs. Each page starts with a header that 
looks like the following: 

Janus/Ada Version 2.2.0 compiling file on date at time 

RANGECHECK Takes one of the two Identifiers On or Off as its 
argument, and has a textual range. Where 
RANGECHECK is off, the compiler is permitted to 
(and generally does) not generate checks for 
situations where it is expected to raise 
CONSTRAINT^ERROR; these checks include null 
pointer checking, discriminant checking, index 
checking, array length checking, and range 
checking. Combining check suppression using the 
pragma RANGECHECK and using the pragma SUPPRESS 
may cause unexpected results; it should not be 
done. However, RANGECHECK may be combined with the 
Janus/Ada pragma ALL_CHECKS; whichever pragma has 
occurred most recently will be effective. 

RANGECHECK is on by default. Turning any checks 
off may cause unpredictable results if execution 
would have caused the corresponding assumption to ■ 
be violated. Checks should be off only in fully 
debugged and tested programs. After checks are 
turned off, full testing should again be done, 
since any program that handles an exception may 
expect results that will not occur if no checking 
is done. 

OPTIMIZER Takes one of the identifiers On or Off, or an 
integer literal," as an argument. This pragma 
turns optimization on or off, either totally or 
partially. It has a textual range, except that if 




Copyright 1990, R.R. Software, Inc. 


Revision 4.6 



Appendix F: leplanentation Oependencice 



the global optimizer is turned oh for any part of 
a compilation unit^ then it is on for the entire 
compilation unit. If the identifier is On or Off, 
then Janus/Ada's optimizers are turned totally on 
or totally off, as appropriate. An integer 
literal as an arguement causes optimization to be 
turned partially on or off. 

The following integer literals are meaningful as 
an argument to this pragma: 

1) Turns check elimination optimizations on. 

2) Turns the basic block optimizer on. 

3) Turns the global optimizer on. If this is on 
anywhere in a compilation unit, it will be on 
everywhere in that unit. 

4) Turns peephole optimizations oh. 

5) Puts the optimizer in ’Space' optimization 
mode (the default). 

6) Puts the optimizer in 'Careful* optimization 
mode. The can take much longer than 'Quick' 
optimization, but will find‘more 
optimizations. 

7) Puts the compiler in 'Fastest alignment' 
mode. Data objects will be aligned for the 
fastest performance on the target (unless 
overridden by rep. clauses). ‘ This takes more 
data space. 

51) Turns check elimination optimizations off. 
Useful for finding uninitialized variables. 

52) Turns the basic block optimizer off. 

53) Turns the global optimizer off. 

54) Turns peephole optimizations off. 

55) Puts the optimizer in 'Time' optimization 
mode,. 

56) Puts the optimizer in 'Quick' optimization 
mode. This is faster than 'Careful' 
optimizations, and often will generate nearly 
the same code. 

57) Put the compiler in 'Smallest alignment' 
mode. Data is only aligned when required or 
when the performance penalty is severe; 

Takes less data space. 

Other integer liberals will be ignored. In 
general, this pragma should not be mixed with the 
OPTIMIZE pragma, since one has a textual arange 
and the other dcas not; this can lead to 
surprising situamions. However, the OPTIMIZE 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 







Appihdix F: Iif|l«Mntatian DepandcneiM 


pragma may be used inside a compilation unit for 
which pragma OPTIMIZ]^(On) has been listed before 
the start of the compilation unit. 

SYSLIB This pragma tells the compiler that the current 

unit is one of the standard Janus/Ada system 
libraries. It takes as a pareuneter an integer 
literal in the range i' .. 15; only the values 1 
through 4 are currently used. For example, system 
library number 2 provides floating point support. 
Do not use this pragma unless you are writing .a 
package to replace one of the standard Janus/Ada 
system libraries. 

VERBOSE Takes On or Off as its argument, and has a textual 

range. VERBOSE controls the amount of output on an 
error. If VERBOSE is on, the two lines preceding 
the error are printed, with an arrow pointing at 
the error. If VERBOSE is off, only the line number 
is printed. 

VERBOSE(Off); 

Line 16 at Position 5 

*ERROR* Identifier is not defined 

VERBOSE(On): 

15: if X « 10 then 
16: z :- 10; 

A 

*ERR0R* Identifier is not defined 

The reason for this option is that an error 
message with VERBOSE on can take a long time to be 
generated, especially in a large program. 

VERBOSE's initial condition can be set by the 
compiler command line. 

Pragma INTERFACE is supported for the language "C". Pragma 
INTERFACE__NAME can be used to specify a. name other than the Ada 
one as the name of the C function called. INTERFACE_NAME takes 
two parameters, the Ada subprogram name, and a string 
representing the C name for the function. Pragma INTERFACE__NAME 
is provided so that convienient Ada names can be used as ~ 
appropriate, including operator symbols, and so that foreign 
language names which are not legal Ada identifiers can be 
interfaced to. If pragma•INTERFACE is used in a program. 


F-6 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 







Appendix F.: Iiplcnentation Dependencies 

Jbind must be used to link it, and it must be linked with the 
Interface run-time. 

Several recjuired Ada pragmas may have surprising effects in 
Janus/Ada. The PRIORITY pragma may only take the value 0, since 
that is the only value in the range System.Priority. Specifying 
any OPTIMIZE pragma turns on optimization; otherwise, 
optimization is only done if specified on the compiler's command 
line. The SUPPRESS pragma is ignored unless it only has one 
parameter. Also, the following pragmas are always ignored: 
CONTROLLED, INLINE, MEMORY_SIZE, PACK, SHARED, STORAGE_DNIT, and 
SYSTEM_NAME. Pragma CONTROLLED is always ignored because 
Janus/Ada does no automatic garbage collection; thus, the effect 
of pragma CONTROLLED already applies to all access types. Pragma 
SHARED is similarly ignored: Janus/Ada's non-preemptive task 
scheduling gives the appropriate effect to all variables. The 
pragmas INLINE, PACK, and SUPPRESS (with two parameters) all 
provide recommendations to the compiler; as Ada allows, the 
recommendations are ignored. The pragmas MEMORY__SIZE, 
STORAGE_UNIT, and SYSTEM_NAME all attempt to make changes to 
constants in the System package; in each case, Janus/Ada allows 
only one value, 'so that the pragma is ignored. 

r.2 Zaplemantatio]i Dependent Attributes 

Janus/Ada does not provide any attributes other than the required 
Ada attributes. 

7.3 Specifioation of the Package SYSTEM 

The package System for Janus/Ada has the following definition. 

package System is 

— System package for Janus/Ada 

— Types to define type Address, 
type Offset_Type is new Long^Integer; 
type Word is range 0 .. 65536; 
for Word'Size use 16; 
type Address is record 
Offset : Offset_Type; 

Segment .: Word; 
end record; 

Function "+" (Left : Address; Right : Offset__Type) Return 

Address; 

Function "+" (Left : Offse-_Type; Right : Address) Return 

Address; 

Function (Left : Address; Right : Offset_Type) Return 


Copyright 1990, R.R. Software, Inc. 


Rtvision 4.6 


Appandix F: IiiplaMntation Oapendencie* 

Address; 

Function (Left, Right : Address) Return pffset_Type; 

type Name is (UNIX); 

Systeiii_Naine : constant Name :» UNIX; 

Storage_Unit : constant 8; 

Meinory_Size : constant :» 65536; 

— Note: The actual memory size of a program is 

—> determined dyneunically; this is the maximum number 
" of bytes in the data segment. 

~ System Dependent Named Numbers: 

Min_Int : constant :- -2__147__483_648; 

Max_lnt : constant :■ 2_147”483”647; 

Max_Digits : constant :-'"l5;” 

Max_Mantissa : constant :« 31; 

Fine_Delta : constant :* 2#1.0#E-31; 

— equivalently, 4.656612873077392578125E-10 
Tick : constant :« 0.01; - Some machines have less 

~ accuracy; for example, the IBM PC actually ticks 
— about every 0.06 seconds. 

— Other System Dependent Declarations 
subtype Priority is Integer range 0..0; 

type Byte is range 0 .. 255; 
for Byte'Size use 8; 

end System; 

The type Byte in the System package corresponds to the 8-bit 
machine byte. The type Word is a 16-bit Unsigned Integer type, 
corresponding to a machine word. 

F.4 Restrictions on Representation Clauses 

A length clause that specifies T'SIZE has the following 
restrictions: 

If T is a discrete type, or a fixed point type, then the 
size expression can given any value between 1 and 32 bits 
(subject, of course, to allowing enough bits for every 
possible value). Signed and unsigned representations are 
supported. 


r-8 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6. 



Appendix F: laplenentation Oependenciej 


If.T is a floating point type, sizes of 32 and 64 bits are 
supported (corresponding to Float and Long^Float 
respectively). 

If T is an array or record type, the expression must give 
enough room to represent all of the components of the type 
in their object representation. This can be smaller than 
the default size of the type. 

If T is an access type or task type, the expression must ' 
give the default size for T. 

A length clause that specifies T' STORAGE__SlZE for an access type 
is supported. 

Any integer value can be specified. ST0RA6E_ERR0R will be raised 
if the value is larger than available roemoryT no, space will be 
allocated if the value is less than or equal to zero.’ 

A length clause that specifies T'ST0RA6E_SIZE for a task type T 
is supported. Any integer value can be specified. Values 
smaller than 256 will be rounded up to 256 (the minimum 
T'Storage^Size), as the Ada standard does not allow raising an 
exception“"in this case. 

A length clause that specifies T'SMALL for a fixed point type 
must give a value (subject to the Ada restrictions) in the range 

2.0 ** (-99) .. 2.0 *■* 99, 

inclusive. 

enumeration representation- clause for a type T may give any■ 
integer values within the range System.Min_Int .. System.Max_Int. 
If a size length clause is not given for the type, the type's 
size is determined from the literals given. (If all of the 
literals fit in a byte, then Byte'Size is used; similarly for 
Integer and Long_Integer). 

The expression in an alignment clause in a record representation 
clause must equal 1 or 2 (to specify Byte or Word alignment 
respectively). The alignment value is respected for all object 
creations unless another representation clause explicitly 
overrides it. (By placing a component at a non-aligned address, 
for example). 

A component clause may give any desired storage location. The 
size of the record is adjusted upward if no representation clause 


"9 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 




Appendfx f: Inple^tation Dependencies 


has been given, and more space is needed for the specified 
storage location to be obeyed. 

The range for specifying the bits may specify any values within 
the following limitations (assuming enough bits are allowed for 
any value of the subtype): 

If the component type is a discrete or fixed point type, any 
value may be specified for the lower bound. The upper bound 
must satisfy the equation 

UB - (LB - (LB Hod System.STORAGE_UNIT_SIZE)) <= 32. 

If the component type is any other type, the lower bound 
must satisfy 

LB Mod System.ST0RAGE_UNIT_SI2E » 0. 

The upper bound must be 

UB :» LB + T'Size - 1; 

Tanus/Ada supports address clauses on most objects. Address 
clauses are not allowed on parameters, generic formal parameters, 
and' renamed objects. The address given for an object address 
cla^use may be any legal value of type System.Address. It will be 
Interpreted as an absolute machine address, using the segment 
part as a selector if in the protected mode. It is the user's 
responsibility to ensure that the value given makes sense (i.e., 
points jat memory, does not overlay other objects, etc.) No other 
address clauses are supported. 

F.5 Ii^leBentatioii Defined Names 

Janus/Ada uses no implementation generated names. 

F.6 Address Clause Bspressions 

The address given for an object address clause may be any legal 
value of type System.Address. It will be interpreted as an 
absolute machine address, using the segment part as a selector if 
in the protected mode. It is the user's responsibility to ensure 
that the value given makes sense (i.e., points at memory, does 
not overlay other objects, etc.) 

F.7 Unchecked__Conversion Restrictions 

We first make the following dsfinitions; 


=-10 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 






Appwidix F: lapleMntation Dependencies 


A type or subtype is said to be a simple type or a simple subtvpe 
(respectively) if it is a scalar (sub)type, an access (sub)type, 
a task (sub)type, or if it satisfies -^e following two 
conditions: 

1) If it is an array type or subtype, then it is 
constrained and its index constraint is static; and 

2) If it is a composite type or subtype, then all of its 
subcomponents have a simple subtype. 

A (stib)type which does not meet these conditions is called non- 
simple . Discriminated records can be simple; variant records can 
be simple. However, constraints which depend on discriminants 
are non-simple (because they are non-static). 

Janus/Ada imposes the following restriction on instantiations of 
Unchecked__Conversion: for such an instantiation to be legal, both 
the source actual subtype and the target actual subtype must be 
simple subtypes, and they must have the same size. 

r.8 Zi^lementatloii Dependencies of I/O 

The syntax of an external file name depends on the operating 
system being used. Some external files do not really specify disk 
files; these are called devices . Devices are specified by special 
file names, and are treated specially by some of the I/O 
routines. 


The syntax of an UNIX -filename is: 

[path]filename 

where "path" is an optional path consisting of directory 
names, each followed by a foreslash; "filename" is the 
filename (maximum 14 characters). See your UNIX manual for a 
complete description. In addition, the following special 
device names are recognized: 


/dev/sti 


/dev/sto 

/dev/err 


/dev/ekbd 


UNIX standard input. The same as 
Standard_Input. Input is buffered by lines, 
and all UNIX line editing characters may be 
used. Can' only be read. 

UNIX standard output. The same as 
Standard__Output. Can only be written. 

UNIX standard error. The output to this 
device cannot be redirected. Can only be 
written. 

The current terminal input device. Single 
character input with echoing. Due to the 


F-11 


Copyright 1990, R.R. Software, inc. 


Revision 4.6 





Appendix F: IipleMntation Dependencies 

design of UNIX, this device can be 
redirected. Can be read and written. 

/dev/kbd The current terminal input device. No 

character interpretation is performed, and 
there is no character echo. Agaiji, the input 
to this device can be redirected-, so it does 
not always refer to the physical keyboard. 

The UNIX device files may also be used. 

The UNIX I/O system will do a search of the default search 
path (set by the environment PATH variable) if the following 
conditions are met: 

1) No path is present in the file name; and 

2) The name is not that of a device. 

Alternatively, you may think of the search being done if the 
file name does not contain any of the characters ';• or '/'. 

The default search path cannot be changed while the program 
is running, as the- path is copied by the Janus/Ada program 
when it starts running. 

Note: 

Creates will never cause a path search as they must work in 
the current directory. 

Upon normal completion of a program, any open external files are 
closed. Nevertheless, to provide portability, we recommend 
explicitly closing any files that are used. 

Sharing external files between multiple file objects causes the 
corresponding external file to be opened multiple times by*the 
operating system. The effects of this are defined by-your 
operating system. This external file sharing is only allowed if 
all internal files associated with a single external file are 
opened only for reading (mode In_File), and no internal file is 
Created. Use__Error is raised if these requirements are violated. 
A Reset to a writing mode of a file already opened for reading 
also raise Use__Error if the external file also is shared by 
another internal file. 

Binary I/O of values of access types will give meaningless 
results and should not be dons. Binary I/O of types which are 
not simple types (see definition in Section F.7, above) will 
raise Use_Error when the file is opened. Such types require 


"12 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


Aipptndix F: Impleaentation Oependenciet 

specification of the block size in the form, a capability which 
.is not yet supported. 

The form parameter for Sequential_IO and Direct_IO is always 
expected to be the null string. 

The type Count in the generic package Direct_IO is defined to 
have the range 0 .. 2_147_483_647. ~ 

Ada specifies the existence of special markers called teiminators 
in a text file. Janus/Ada defines the line terminator to be <LF> 
(line feed ), with or without an additional <CR> (carriage 
return). The page terminator is the <FF> (form feed) character; 
if it is not preceded by a <LF>, a line terminator is also 
assumed. 

The file terminator is the end-of-file returned by the host 
operating system. If no line and/or page terminator directly 
precedes the file terminator, they are assxuned. The only legal 
form for text files is (the null string). All other forms 
raise USE_ERROR. 

Output of control characters does not affect the layout that 
Text_IO generates. In particular, output of a <LF> before a 
New_Page does not suppress the New_Line caused by the New_Page. 

The character <LF> is written to represent the line terminator. 

The type Text_IO.Count has the range 0 .. 32767; the type 
Text_IO.Field also has the range 0 ., 32767, 

IO_Exceptions.USE_ERROR is raised if something cinnot be done 
because of the external file system; such situations arise when 
one attempts: 

to create or open an external file for writing when the 
external file is already open (via a different internal 
file). 

to create or open an external file when the external 
file is already open for writing (via a different 
internal file). 

- to reset a file to a writing mode when the external 
file is already open (via a different internal file). 
to write to a full device (Write, Close); 

to create a file in a full directory (Create); 
to have more files open than the OS allows (Open, ■’ 
Create); 

to open a device with an illegal mode; 

- to create, reset, or delete a device; 

F-13 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


Appmdix F: IiqplWNntation Dependencies 


to create a file where a protected file (i.e., a 
directory or read-only file) already exists; 
to delete a protected file; 

- to use an illegal form (Open, Create); or 

- to open a file for a non-simple type without specifying 
the block size; 

- to open a device for direct I/O. 

IO_Exceptions.DEVICE^ERROR is raised if a hardware error other 
than those covered by USE_ERROR occurs. These situations should 
never occur, but may on rare occasions. For example, DEVICE_ERROR 
is raised when: 

- a file is not found in a Close or a Delete; 

- a seek error occurs on a direct Read or Write; or 

- a seek error occurs on a sequential End_Of_File. 

The subtypes Standard.Positive and Standard.Natural, used by some 
I/O routines, have the maximum value 32767. 

No package Low_Level_IO is provided. 

F.9 Sunning the eo^piler and linker 

The Janus/Ada compiler is invoked using the following format: 

janus filename (-option) 

where filename is an UNIX file name (including path) with 
optional compiler options {-option). 

The compiler options are: 

B Brief error messages. The line in error is not printed 

(equivalent to turning off pragma VERBOSE). 

BS Brief statistics. Few compiler statistics are printed. 

D Don't generate debugging code (equivalent to turning 

off pragma DEBUG) 

F Use in-line 80387 instructions for Floating point 

operations. By default the compiler generates library 
calls for floating point operations. The 80387 may be 
used to execute the library calls. A floating point 
support library is still required, ev^n though this ■ 
option is used. 


?-u 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


Appendix F: I^ileMntatioh Dependencies 


L Create a listing file with neune filename.PKN on the 

seune disk as filename. The listing file will be a 
listing of only the last compilation unit in a file. 

Ox Object code memory model. X is 0 for the 80386 system. 

Other memory models are not supported. (Since this 
model 'limits' a program to 4 Gigabytes of Code and 4 
Gigabytes of Data, this is not a concern). Memory 
model 0 is assumed if this option is not given. 

Q Quiet error messages. This option causes the compiler 

not to wait for the user to interact after an error. In 
the usual mode, the compiler will prompt the user after 
each error to ask if the compilation should be aborted. 
This option is useful if the user wants to take a 
coffee break while the compiler is working, since all 
user prompts are suppressed. The errors (if any) will 
not stay on the screen when this option is used; 
tlherefore, the console traffic should be sent to the 
printer or to a file. Be warned that certain syntax 
errors can cause the compiler to print many error 
messages for each and every line in the program. 

Rpath Route the SYM, SRL, and JRL files produced by the 

compiler to the specified path 'path'. The default is 
the same path as filename. 

Spath Route Scratch files to specified path. 

T Generate information which allows trimming unused 

subprograms from the code. This option tells the 
compiler to generate information which can be used by 
the remove subprograms from the final code. This 
option increases the size of the .JRL files produced. 

We recommend that it be used on reusable libraries of 
code (like trig, libraries or stack packages) - that is 
those compilations for which it is likely that some 
subprograms are not called. 

W Don't print any warning messages. For more control of 

warning messages, use the following option form (Wx). 

Wx Print only warnings of level less than the specified 

digit 'X'. The given value of x may be from 1 to 9. The 
more warnings you are willing to see, the higher the 
number you should give. 

X Handle extra symbol table information. This is for the 

use of debuggers and other future tools. This option ■ 

F-15 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 


Appendix F: InplcaMntetion Dependencies 


requires large quantities of memory and disk space, and 
thus should be avoided if possible. 

Z Turn on optimization. This has the same effect as if 

the pragma OPTIMIZE, were set to SPACE throughout your 
compilation. 

The default values for the command line options are: 

B Error messages are verbose. 

BS Statistics are verbose. 

D Debug code is generated. 

F Library calls are generated for floating point operations. 

L No listing file is generated. 

0 Memory model 0 is used. 

Q The compiler prompts for abort after every error. 

T No trimming code is produced. 

W All warnings are printed. 

X Extra symbol table Information is not generated. 

•Z Optimization is done only where so specified by pragmas. 

Leading spaces are disregarded between the filename and the call 
to JANUS. Spaces are otherwise not recommended on the command 
line. The presence of blanks to separate the options will be 
Ignored. 

Examples: 

janus test-Q-L 
janus test.run-W4 
janus test 

janus test .run -B -W-L 

The compiler produces a SYM (SYMbol table information) file when 
a specification is compiled, and a SRL or JRL (Specification 
ReLocatable or Janus ReLocatable) file when a body is compiled. 

To make an executable program, the appropriate SRL and JRL files 
must be linked (combined) with the run-time libraries. This is 
accomplished by running the Janus/Ada binder, JBIND. 

The Janus/Ada binder is invoked using the following format: 

jbind filename {-option} 

Here "filename" is the name of the SRL or JRL file created when 
the main program was compiled (without the .SRL or .JRL 
extension) with optional linJcer options (-option). The filename 
usually corresponds to the first ten letters of the name of your 
main program. See the linker/binder manual for more detailed 


F-16 


Copyright 1990, R.R. Software, Inc. 


Revision 4.6 



Appandix F: Iwptamntition Dapendan c iea 


directions. We summarize here, however, a few of the most 
commonly used linking options: 

FO Use software floating point (the default). 

F2 Use hardware (80387) floating point. 

L Display lots of information about the loading process. 

00 Use memory model 6 (the default); see the description of the 
/O option in the compiler, edsove. 

Q Use quiet error messages; i.e., don't wait for the user to 
interact after an error. 

B Use brief statistics. 

T Trim unused subprograms from the code. This option tells 

the linker to remove subprograms which are never called from 
the final output file. This option reduces space usage of 
the final file by as much as 30K. 

Examples: 

jbind test 
. jbind test -Q-L 
jbind test-L-F2 

Note that if you do not have a hardware floating point chip, then 
you generally will not need to use any binder options. 

The output of Jbind is a standard UNIX .o file. This file must 
be linked with the standard UNIX libraries using Id; see your 
UNIX manual for details. 


F-17 


Copyright 1990, R.R. Soft;w«re, Inc. 


Revision 4.6 




