<V: 



PASCAL NEWSLETTER 
May, 1974 Number 2 

FROM THE EDITOR 

The second newsletter marks the release of PASCAL 2 for CDC 
CYBER 70 and 6000 series computers under the KRONOS or SCOPE operating 
systems. Interested CDC users may place orders as explained in the 
section PASCAL 6000 - 3.4. Also, implementations of PASCAL for other 
machines have become known through recent correspondence. Further infor- 
mation about these implementations can be obtained by writing directly 
to the contact given with the description of each implementation. 

Please note the following important points. 

1) Dr. Wirth, the author of PASCAL, is negotiating with a pub- 
lisher to print a paperback edition of, "A User Manual for PASCAL" by 
Jensen and Wirth. People who have received a preliminary version of 
this manual should not make any further copies of it. 

2) The University of Colorado has offered in the past a $10 
discount on orders of PASCAL from previous recipients of the package, 
the discount has been dropped since the new release of PASCAL is more 
than merely a correction to prior versions. The extra money will be 
used to defray the cost of this newsletter. 

3) A short history of the development of PASCAL is given so 
that references can be made to the origin of PASCAL compilers on non- 
CDC computers. 

4) A limited number of copies of the first edition of the news- 
letter are available on request from the editor. 

Items of interest or requests for material can' be mailed to 
the editor: 

George H. Richmond 
University of Colorado 
Computing Center 
3645 Marine Street 
Boulder, Colorado 80302 

or phone: (303) 443-2211, ext. 6934. 

HISTORY OF PASCAL 

PASCAL is an ALGOL- like programming language with data structure 
facilities written by Dr. Niklaus Wirth at the Eidgenossische Technische 
Hochschule (ETH) in Zurich, Switzerland, tne original language defini- 
tion was made in November, 1970, in "The Programming Language PASCAL" 
published by ETH and later in Adta Informatica 1, 35-63 (1971). The 
last compiler of this version of PASCAL was released in August, 1972. 

In November, 1972, experience gained with the original language 
revealed certain details of the :i language that should be changed. This 



was done with the publishing of, "The Programming Language Pascal (Revised 
Report)" in November, "Ani Axiomatic Definition of the Programming Language 
Pascal" in December, and the release of an updated compiler dated Decem- 
ber, 1972. This compiler implemented all the specifications of the Re- 
vised Report except for class variables which conformed to the definition 
of the original report . 

Later, a preliminary version of the PASCAL-P compiler was developed 
and released .to a limited number of sites . Most of the PASCAL compilers 
implemented for non-CDC machines are based on ; thisocorapiler and are iden- 
tical in the form of PASCAL compiled by the December, 1972 release for 
CDC machines. 

May, 1974, brings the release of a completely new PASCAL compiler 
called PASCAL 2 for CDC machines. Details of the /changes .made; and a 
description of the materials available are given in the section, PASCAL 
6000 - 3.4. ■ , ; . .. ..-.. . ■, -., 

• .;:■■■■..■ Finally, /the 'PASCAL-- P compiler is being rewritten to bring it in 
line wit-h'sstaiidard' ; PASCAL r This portable compiler is expected to be 
available in July.' 

PASCAL FOR ,NQN : ,CDq.. MACHINES 

Several sites have implemented PASCAL compilers for computers 
other than CDC 6000 series machines. The machines represented are the 
CII IRIS 80, CII 10070, DEC System 10, IBM 360/370, : UN I VAC 1108, and 
XDS SIGMA 7. For further information on these projects, write the con- 
tacts given below. ■■ 



The; CII. IRIS 8Q, CII 10070, and XDS SIGMA 7 ; , share (the same machine 
language. Mr. Didier,Thibault and Mr. P. Mancel have, taken-, the December, 
1972 PASCAL compiler for the CDC machine and bootstrapped it for the CII 
IRIS 80. This compiler is currently being tested under -control of a 
monitor written for the SIRIS 7 - SIRIS 8 operating system-^ It generates 
relocatable binary object code which can be linked by the general linkage 
editor. It uses the character : set ordering as defined by PASCAL on the 
CDC computer. It allows procedures to be separately compiled and merged 
at linkage time.. It allows all 'file- management compatible with the SIRIS 
7 or SIRIS 8 operating system using the S.G'.F. assisted file management 
system distributed by the CII company. It accepts all features of the 
PASCAL language except the non- dynamic allocation of filess,.- . 

The compiler consists of 4500 lines of PASCAL code running under 
control of a monitor (assembly code). The PASCAL program consists of 
23, 000 machine instructions, and v the monitor 1000 machine instructions. 
It requires 40,000 thirty- two,. bi^ words to compile itself. To make this 
cpmpilex, available on, other operating systen^r&he'mottitjpr'Jias, to be 
'i;ewr4t,tep 1 f. 1 !-.th^s* l ^xaBspo,§ir'fcion would be easier,., if a file management r 
system ,. is . avai Ja j'j. e on the ...target machine. '.-. ,-,;' ;.■■ , : ■ i ■ 

The bootstrap of this compiler was done using the CII IRIS 80 
and a CDC machine in parallel. A simulator was not used. nUt took two 

^perienced; programmers .14 man months to complete. - '■ ■->■— 



~7- 



This compiler is currently being tested prior to its distribution 
People interested in receiving documentation can place their names on a 
mailing list by writing: 

S.F.E.R. /PASCAL 

IRIA 15-02 

B.P. 5 78150 Le Chesnay 

France 

Address other correspondence to: 

Mr. D. Thibault 
17 rue Mayet 
75006 Paris 
France 



The DEC System 10 implementation of PASCAL was developed at the 
University of Hamburg, Germany by Professor H. -H. Nagel. Work began 
in April, 1973 with receipt of the preliminary PASCAL-P compiler from 
ETH. By November, this version would compile itself. As of April, 1974, 
everything mentioned in the revised PASCAL report of July, 1973, including 
I/O formats, is implemented with the exception of procedures and functions 
as formal arguments, arithmetic procedures (SIN, COS, EXP, LN, ARCTAN, 
ROUND), and GO TO leaving a procedure body (the GO TO EXIT). Work on 
these areas is in progress. 

In particular, the following goals have been reached. The com- 
piler generates in one pass immediately executable (no loader run) re- 
entrant code, generating a sharable pure part and a separate LOW- file 
containing data. A new feature, INITPROCEDURE, has been implemented 
to initialize global variables. I/O is possible to standard as well as 
to declared files. ; Files may be declared only as global, variables. A 
standard file named TTY is introduced to allow communi cat ion with the 
user terminal. An optional file name may be given in READ/WRt'TE to use 
the formatting capabilities of these procedures for all files of CHAR. 
The actual file name may be indicated at execution time by an optional 
argument to RESET or REWRITE. The printable upper case ASCII character 
set is used as internal representation of characters. The appropriate 
procedures and attributes like READLN(f), WRITELN(f), EOLN(f), etc. 
have all been implemented. DEC line numbers are recognized, stored, and 
accessible with a special new procedure GETLINENR. Indexed access to 
PACKED ARRAY has been implemented. Constant indices are evaluated at 
compile time. To obtain a completely self-sufficient compiler, the re- 
entrant: runtime support is copied out of the compiler into the user's 
object code file. 

A preliminary version of this compiler has already been sent to 
several sites in the United States (Professor Terry Beyer at the Univer- 
site of Oregon, Dr. Donald I. Good at the University of Southern California, 
and Dr. Frederick A. Hosch at Louisiana State University). A bug contest 
has revealed several critical and about twelve minor errors in this ver- 
sion which have been corrected in the meantime. The compiler is currently 
being used in teaching undergraduate students and in small research pro- 
jects. For further information write: 



-3- 



Professor H. -H ? . Nag el 

Universitat Hamburg 

Inst i tut. fur Informatik ., 

2 Hamburg 13, Schluterstrasse 66-72 

Germany 



Two sites are working on PASCAL implementations for IBM 360 and 
370 series machines. Mr. Robert S. Deverill and Mr. Alfred C. Hartmann 
at the California Institute of Technology have a running version of the 
preliminary PASCAL-P compiler i^hieh will be ready soon, Also, Mr. J. M. 
Wells and Mr. W. Bruce Foulkes at the University of Manitoba are working 
on a PASCAL compiler for IBM machines which should be ready soon. 

Cal tech's version of PASCAL is implemented on an IBM 170/158 
running under the 0S/VS2 operating system. The environment will operate 
under any version of the OS operating system. About 270 kilobytes of 
memory are required to compile the compiler. ' The compiler uses the 're- 
cursive descent parsing technique to compile PASCAL programs -iri 'a 'single 
pass. Only two files, a standard input and output file, are- implemented 
in this version. File declarations are unimplemeftted, as aM*ebq>H : ^labels, 
formal parameter procedures and functions, and- the standard 'Mfic^iOn's 
"succ" and "pred."'- ' 

For further information write: 

Mr. Alfred. C. Hartmann . , 
California Institute .of Technology 
.'.;,.. ; Information Science 286-60 

Pasadena', California 91109. ., 

. The PASCAL compiler at the University of Manitoba had it genesis 
in 1971 at ETH in Zurich, Switzerland. An early paper, "A Pascal . ; C.om.r 
piler for the IBM 360/370 Computers/' was presented .last f al 1 at . the,. , : 
Third .Manitoba Conference on.. Numerical Mathematics; .reprints, should be 
available by now. .The first object programs should be running. -soon., and 
detailed documentation will be 'available later this., year. For, further 
information write: 

■• '.Professor' J. M, Wells ■ 

i ■ - ! . ■•■ .University of Manitoba '■'■■ 

■ ■ -• - . ; ; Department of Computer Science 
. :• ..Winnipegi Canada" .-.R3T 2N2 • 

The Univac 1108 implementation of PASCAL was done at^the Techni- 
cal University of Norway by Professor Tore Amble and two of his degree 
students, Mr. Terje Molster and Mr. Vernar Sundvor. The compiler is 
based on the preliminary version o£ the PASCAL-P compiler. All code" 
'generated is in the form-of "subroutine calls, so -'efficiency of compiled 
; programs is not very high. ^Packed records, packed arrays, files '(except 
for standard files), formal procedures. s - and formal ■ functions were' not ' 
implemented. For further---information , "*write:- : ] ' \ 



-4- 



Professor Tore Amble 

Computing Centre 

Technical University of Norway 

Department of SIN TEF 

N-7034 Trondheim-NTH 

Norway 



-5- 



PASCAL 6UUU-3.4 



by N . . W i r t h 



An entirely new compiler for the CDC oUUU series of computers 
has been under development at E TH Zurich for the last 1a months. 
As predicted last fall and announced in t h e first issue of the 
NEWSLETTER, it is released in Way 1V74. An important development 
is the definition of" a Standard £&§JIAL *• in the interest of 
portability of programs, we wish to make a clear distinction 
between Pascal and Pascal -like languarjes , as several of these 
have already been proposed. The new compiler adheres to this 
Standard, and includes some additional facilities clearly 
labelled as £ xJLgJISJUlllS. ( 3 . t> - - 3 . £> ) . This Standard also includes 
the definition of a program representation in terms of the ASQ.XI. 
J^O£iXLu&J&£iJL. SL.LJL • 

The new compiler i. s designed for use under the CDC SCOPE 3*4 
operating system with its 64-character set. The decision to 
adapt PASCAL to the ASCII set and to character sets without 
explicit control characters has made necessary some changes in 
the definition of the language. Of particular importance is the 
decision to eliminate the jgoJL character. It was felt that this 
change is in the interest of making Pascal less dependent on 
particular character sets and actual representations o.f 
textf iles . 

A summary of the changes and innovations of Pascal 60UO-3.4 
compared to Pascal 60 U 0-3.^ is presented below in an informal,, 
descriptive style. It is divided into the following parts : 

1. Notation (representation, character sets) 

<L , Differences between Pascal 6UQ0-3.4 and Pascal 60U0~3«2 

3. New facilities of Pascal 6uQU~~3„4 

4. New predefined, procedures and functions 
i? , Control statements (SCOPE 3*4) 



The new compiler generates relocatable binary code that can be 
loaded by the standard loader of the operating system. Before 
execution, the generated code must be linked by the loader with 
a set of subroutines for input/output handling. Each program 
operates on files that are declared as formal parameters in its 
heading, and are substituted with actual files that can be 
specified in the EXECUTE statement of the control statement 
record . 

Besides some new features, the major advantage of the new 
compiler is its improved code which makes compiled programs more 
efficient and more compact. The price for the expanded 
capabilities is a larger size of the compiler: for average 
programs, a field length of 6000U (octal) is needed. 

The Pascal 601)0-3*4 compiler can be ordered from 



Ms. Kathleen Jensen 
Institut fur Informntik 
Clausiusstr . bb 

aou6 Zurich 
Switzerland 



The c h arge for a minitape, tape handling, postage, and 
documentation is SFr . 100; if a tape is supplied by the 
requestor, the charge is SFr . 7i>. (Please send minitapes only!) 

In the ii SA and panada , orders must be directed to 

Mr, George H. Richmond 
University of Colorado 

uomputing Center 
3645 Marine Street 
Boulder, Colorado d0302 
USA 



The charge for a minitape, tape handling, postage (North American continent), 
and documentation is $30; if a tape is supplied by the requestor, the charge 
is $20. 

The system is available in two versions, namely for use with the 
ASCII character set (CDC-defined collating sequence) or with the 
CDC scientific character set. When ordering, please specify 

PASCAL 6000-3.4 ASCII or 
PASCAL 6000-3.4 CDC 



Along with the system, the following documentation is provided: 

1. A User-Manual, (copying prohibited, as we are currently in 
contact with a publisher who might possibly be able to 
provide" this manual along with the Revised Report in a 
moderately priced paperback edition.) 

2. A description of the contents of the tape with instructions 
on how to install the Pascal system. 



Note: the system also runs under SCOPE 3.2, 3.3, and 3.4 with 
the 63-character set, with the only restriction being that the % 
character cannot be used. 



1 - i^katipji 

1.1 Set union is denoted by + and set intersection by * 
(instead of ^ and ^). 

_7„ 



1 . Z The; symbols in the left '-hand* column m a. y b e 
those in the right-hand column. 



ub.st i tu ted for 



unt i 1 now 



new 



"• 


nut 


/v 


iul.Li..s&t 


V 


an 


1* 


<> 


<^ 


< = 


^ 


> = 


{ and ! 


( * a n d 



) 



NfiiH : * and ^ denote Boolean operations and cannot be used 
for set operations » 

The above table defines a unique,, context -independent 

corresponden c e between t h o s e P a seal s y m b o Is whic h a re no t 
available in the international standard of ISO (ASCII) and 
the ASCII character set. Hence there is a standard 
representation for a Pascal procjr a m in t h e A S C 1 1 c h a r a c t e r 
set , 



* . Di££ £££a£fe& liatmm £ a,s_£AL oO u 0^2^ ! aoii £&£££L MDO-i^ 



^-.1 End of lines in text files 



m ark e d t h e e rid of a 1 i n e „ 

i i ^ ,*, -r .-, n - t e x t f i 1 e 



The control, character jb.h1. which 

h as been eliminated. Instead , t h e foiiowm g 



eoln (f ) 



r e a b 


1 e to r e 


c o o n i z e an d 


g e n e r a t e 


1 1 n e 


ending 


3 • 


a predicate 


f u nation, e v a 1 u a 


ted w 


h lie 


reading a 


t e x t f 


i 1 e # w h i 


c h indicate 


s a> fie 


t ' i ^ r 


L he 


e n d of 


t he 


current line 


in t h..e. text 


f i 1 e 


f has 


b e e 


n re a c b 


ed . 


Suppo 


s e the 


buffer v a r i a b 1 e 


ft is 


pos 


it ionec 


at 


the 


charact e, 


r x and the 


t t h e 


proc 


edure "get ( 


f )" 


( or 


"r e a ri "..) 


is . called 


i n 


order 


to 


access 


t h e 


n e x t 


c h a r a c t e 


r . If x had 


b e e n 


t h e 


1 as t 


c h arac 


ter 


i n t 


h e 1 1 n e 


t h e n .f f , 


* 


' (h 


lank 


) .. . and 


t he 


value 


of e o 1 n 


(f) = true. 


T h p. 


n e x t 


call 


of g e t ( f } 


(or 


read) accesses th 


e f i r 


s t c h 


arac 


ter of 


t he 


next 


1 i n e , 


and e o 1 n ( f 


) * 


false 


(provided 


t he 


next 


line is 


not empty ) . 













writeln(f) a. standard procedure that terminates ..the current 
.line iWhen writing the text file f . 

readln(f ). a standard procerirue that skips to t he ' beginning 
of the next line; the buffer variable ff is 
equal to the first character of the new line. 



The usual program schema for sequential reading of a 
t e.fjt f I lev, f follows: (x is a ..variable of type char ; ,P 
denotes the processing of the (next) character , j 



reset (f ) ; 

MtJailfi. -eof (f ) &q. 

ll££L±a beginline; 

ML,b i,l.S -*eoln(f ) d.o_ 

read(f,x); {read from the textfile f : anri 

assign to x ; see section' J. 1j 
P(x) 

enii; 

end line; readln(f ) 



A line ending is represented by a blank. Notice that the 
fol lowing schema can be used when it is not necessary to 
recognize line en dings- -i.e. when no special action is 
required upon encountering an end of a line: 



reset (f ).; 

Eliils -eof(f) &a 

h&ELin. read (f ,x ) ; 

find. 



P(x) 



The following abbreviations may be used 
abbreviated^ f orm \ .e.xp,^ n ! d,e ! ci n f orrn 



write ln(f,x1 xn) b_ e_ain 

write(f,x 1 „ . . . ,xn) ; writeln(f) 

&DSL 



readln(f ,x 1, ,,,,xn) 



read(f ,x1 xn); readln(f) 

finxi 



Note : The first parameter names the relevant textfile (see 
section 3.1); when it is jxq£. of type text, then the file 
"input" is assumed by reading and the file "output" by 
writing . Hence , 



a nd 



wr iteln 



r eadl n 



stands for 



stands for 



writeln (output ) 
readln (input ) 



'<L ,'d The program heading 



PASCAL 60U0-3.4 requires the specification of a program 
heading. The form is: 

p.rQnram p(x1,x2, ... ,xn); 

where p-— is- the name 1 of the 'program and X 1 .. .xn are formal 
file parameters (ni>1). x1..,xn are available to the 
program, but also exist outside of the program; hence, they 
are called e xternal £iJLe.s_ (as opposed to local files). 



■9- 



be use d in the o o n trol statement; [ 



,p i 



f n 



w here f 1 8 . ,fn are file names , i.e. t h e actual parameters 
correspond inn to the formal parameters x1»« s xn.' 

The following rules h old: 

a } The program head inn fimaJt contain the formal parameter 

"ou tpu t "" , 

b ) As with a n y o t h e r v a r i a b 1 e , t h e files denoted by the 
names x1.,,xn must be declared as file? variables in the 
main program. The exception occurs with the files 
"input" and "output." which are automatically predeclared 
a s » 

Y.j3J£ input .output ; text ; 

c) If any actual parameter fi in the EXECUTE statement is 
left empty t the corresponding formal parameter xi in the 
program heading is then assumed as the actual ."logical 
f i 1 e n a rn e " , 

d) Only one "logical record" will :. be read from the actual 
file INPUT ~~i .e , r the next EOR mark appears as EOF in a 

Pascal program, ■. 

e) If a file xi is t c be opened for reading only, then this 
must he indicated by. an asterisk following the file 
parameter in the program 'heading. (This is necessary, if 
actual 

only,) 



IlQJLS : Rules a)--e) are .■ ■ specif icly for the CDC 

implementation* A consequence cf rule c) is that a program 

w i t h a p r o g r a m h e a cf i n a * 

»' „ t 

• E-IlflSXaJZL standard (i nput-.ou fcput ) { ; '" _ ,' ' 

can be called a imply with the control statement* 

execute .standard . 

or even . 

EXECUTE . :■•■'.■ 

when the standard SCOPE files IMPUT and OUTPUT are 
i n tend e d . No t e ; ..that t h e f i 1 e s p. e c ' i f i cM t i o ns 1 1 H ] and [ U T ] 
oT'PASCAL 600'0~3,2 are eliminated, '■-•■' 

3 The label declaration part 

Every label must be declared. Consequently /the symbol jsxjLt 
is eliminated from the Mtfl statements . If a label L (an 



1 o 



unsigned intener ) marks a sta-tement in the statement Dart 
of a block A , then L must he declared , i n the 1 a b e 1 

declaration part of A. 

Goto statements should be avoided whenever possible, 
thereby making the computational structure of the program 
more transparent. Jumps from outside of a structured 

statement into that statement are HflJL a How e d . 



'<L . 4 The: s t a n d a r d type "a 1 f a " 

Due to the introduction of packed arrays (see section 3.^}, 
the standard type a 1 f a can be explicitly d e c 1 a r e d a s 

£.*.&£ a If a - p_a£k£ll a£E.&* L 1 . . ! j fl£ char; 

Alfa values must, therefore, comply with the rules for 
packed arrays. In particular, assignments can be made only 
between identical types. That is, an assignment to an alfa 
variable a 

a :- <character string> 

is only allowed when the character string has exactly 1U 
characters. , 

Likewise, alfa may no longer he regarded as a scalar type. 
Consequently, a result type of a function cannot be of type 
alfa,' 'nor can the argument of the function qxA . •' 



<L.b Pointer types and class variables 

The concept of a class variable is eliminated. Instead of 

.fc,y J .p„.a pointer = f c lass variable ; 
Y_ax cl'assvariable: lilaas. Q.L T; 

is now simply 

i.Y.QL£. pointer « |T; 



Apart from this, the facilities for pointer handling remain 
the same. The modification affects only the declaration 
part . 



2 jrfe The value part 

PASCAL 6U0U-3.4 has no value part as did PASCAL 6000-3. ^ . 
(A more general substitute facility is under 
consideration.) 



.-11- 



3. Nej& £ja£jLli£i£& fi£ £A£C.al_ kk^H-l^A 



3.1 Read and Write 

The standard procedures rend and write can apply to a„nj£ 
textfile, not just to the files "input" and "output**. The 
first parameter names the textfile; when it is not a file 
variable, then the file "input" is assumed by read and the 
file "output" by write. For example, 

w r i t e ( x , y ) stands for write(output ,x ,y ) 

(Also see section d m 1 for readln and writeln.) 

j.^ Packed arrays 

The symbol packed before the symbol area/ ^•"ins that the 
storage requirements for the. array structure should be 
minimized. It has no other influence', on the meaning, of the 
p roc; ram. One should keep in mind that ace ess inn an element 
of a packed i^rray can take more time than accessing one 
from an unpacked array. However, the gain in storage can be 
very great (up to a factor of ou in the case of a Boolean 
array). For example, the variable x 

x : aa&Kjet* area*. M . .n] &£ u . .999 

requires 6 times Jjej=ls. storage than the same . variable would 
were it nui. packed (or if the component type had been 
specified as "integer"). ' The reason is that a number 
between U and 999 can be expressed with 10 binary digits,* 
hence, 6 such numbers can be stored in one 60-bit word. 

The packed array is especially important in connection with 
character strings, where each group of 1U 6-bit characters 
ere packed into one word. The standard type "a 1 f a " is a 
special case of a string (sec l 'dl4): an a 1 fa value fits 
exactly into one word,, 

A restriction common to all. packed structures is that no 
component of such a structure (e.g. an element of a packed 
array) may appear as an actual parameter when the 
corresponding formal parameter is specified as a najc 
parameter (variable parameter). 



3.3 Record types with a variant part but without a tag field 

Obligatory in PASCAL 6000-3.^ is the presence of a t a, g 
field when a record type has a variant part. For example, 
the tag field x was necessary in the following declaration. 

R :' nac'drd. a : t 1; iii; . 

fiLfiSS x : sex jq£ 
male * (bm : T d ) ; 
female: (bf: T3) 



* -12- " 



In PASCAL bUUU-j.H the tag field x miiy. be omit ted 
simplify inn the: above cnse-clnyse to: 



t h e v e b y 



;; £o.$j£ sex af . 

(where "sex" is a programmer -de f i ned type identifier). The 
advantage is that R then requires less storage; the 
disadvantage is that it is impossible to establish from the 
v a 1 u e of Ft alone which variant is present. ( e . g . o n e can no 
longer ask: "±£ R.x-male i.tiUH ^"5 Therefore, one should use 
t his n e. w f 1 e x i h i 1 i t y pnly w i. t h t h e great e s t of care. 



3.4 Values of type set 

Given is a scalar type \'i with the values w1,w^,,,,,wn.. The 

set m » Lwi,w(i + 1) w(j-1),wj] can be more simply 

expressed with the notation: 

m = [ wi . .w j J 

where wi and wj are arbitrary expressions' of type <V , and m 
is a variable of type s.ejL ii£ W . 



3 . 3 External procedures and functions 



In PASCAL 


separately 


only to in 


pseudo-dec 


Pascal" pr 


The user 


compiler 


correspond 


separate 


preparat io 


are not a 



i i U U - 3 . 4 it is possible 

compiled procedures and 

troriuce the name of "the proce 

laration in the program h 

og rammers to build and acces 

is however cautioned' to use 
no longer has the opportu 
ence between actual and f 

write-up documenting thi 
n. Note that external proc 
facility of Standard Pascal. 



to call external, 
functions. One needs 
dure (function) by a 
fiariing . This enables 
s program libraries. 
.&££&£. £2X£ . for the 
nity to check the 
ormal parameters. A 
s facility is in 
edures and functions 



3.6 Segmented files 



The CDC operating system allows a file to be subdivided 
into segments of varying lengths, where each segment, .is a 
"logical record" in CDC SCOPE terminology. In PASCAL 
6000-3.4 these divisions are transparent when the file is 
declared as segmented . Example: 



&3X f 



,Q,Q. X. m .J>> £, Q .1 , ' » 



A number of operations are available to end a segment when 
generating a file, and to recognize segments and their 
boundaries when reading a file --regardless of the component 
type . 

putseci (f ) completes the generation of the current segment 
when writing the file f. 



e o s ( f ) 



is a Boolean function indicating whether the 'find 



-13- 



j2,f a iegment has been reached while*, rending the 
file f. Ass'ume that the buffer variable ff - x 
(of type T), and that "get(f)" is called. If x 
was not the last element of the segment, ft is 
the value of the next element. If x was the last 
element of the segment, eos(f) is "true" and the 
value of ff is undefined. , 

getseg(f) initiates the reading of the next segment of the 
file f. ff is the first element of. the (new) 
segment. If there is no next segment, "eof (f ) " 
is "true". 



The following program schema illustrates the sequential 
reading of a segmented file f : 

reset (f ); 
tfJliliS. "eof (f ) jIq 
JLiSILLQ beginsegment ; 
XLhi±£L n Gos (f ) jla 

R(ft ); get (f ) 
end, ; 
endsegment ; getseg(f ) 

&dsL 

An advantage with segmented files is the possibility of 
positioning the reading anqi writing head (relatively) 
quickly to any segemnt in. the file. For the purposes of 
reading and (re)writing a segmented file, the standard 
procedures getseg and rewrite are extended to accept two 
arguments . 

getseg (f,n) initiates "the reading of the nth segment 
counting from the jkUXXfiilJt. position of the 
file. n>0 implies counting segments in the 
forward direction,* n<U means counting them 
backwards; and n-=0 indicates the current 
segment. Note: getseg (f.1) is equivalent to 
getseg (f } • 

rewrite (f,n) initiates the (re)writing of f at the 
beginning of the nth segment counting from 
the £UH££ii£' position. Note': rewrite (f,1) is 
HJlL equivalent to rewrite (f }. The latter 
causes initiation of (re)writing at the \/ery 
beginning of the entire file* 

Since files , are organized for sequential (forward) 
processing, one should not expect getseg and rewrite to be 
as efficient for n<~0 as they are for n>G* 



Observe, the following rules: 

1) eof(f) always implies eos (f ) • 

2) get(f) is ^applicable only when eos(f) = false 

3) put(f) is applicable only when eos(f) '- true. 



-14- 



4) getseg(f) is applicable only when eof(f) = false. 

K j) The procedures putsea'(f ). 'getseg(f), rewrite (f,n) and 

the function eos (f ) can only be applied to segmented 

files. 
6) Segmented files are not part of standard Pascal; they 

are an extension to the loncuane. and oriented towards 

the CDC operating system. 



4. Mew £r r e.d.e£laed Procedures 2ldA Function: 



4.1 Procedures 

readln(x1, ... ,xn) sea iiJ 

wr iteln (x 1 xn ) 

getseg (f ) . get.L,cc- ( r ,n ) 

p u tseg (f } see 3 .o 

rewrite (f ,n ) 

■linelimi. t(f,n) causes the profjram to terminate when the 

text file f has more than n lines. N q t. e : the 
call "1 i nel irnj t (ou t out „ 1 UUU ) " is 
auto m a t i c ally e x e r. u t e d a t t he b e ninn i nn of 
a program. 

page(f ) causes a jump to a new pane when' the 

t e x t f i 1 e f is being printer!. 

halt terminates the execution of the program and 

issues a post-mortem dump. 

message. (s ) writes the string s into the dayfile, 

time (a) assignes to the alfa variable a the current 

time in the form: ' hh.mm.ss .' 

riate(a) assignes to the alfa variable a the current 

d a t e . 

dispose(p) informs the memory management that the 

variable referenced through the pointer p 
will no longer be needed, "dispose (p)" is 
in a certain sense? the inverse of "new (p ) " . 



4. c! Functions 

e o 1 n ( f ) s e e 2 . 1 

eps (f ) see 3 .6 

card(G) equals the cardinality of the set S (i.e.' the 
number of elements contained in the set Sj. 

undefined (x) is a Boolean function. Its value is true when 
the value x (of type real) is "infinite" or 
"indefinite" (see CDC Manual). These values 
arise in the cases of overflow and division 



-15- 



expo (x ) 



by zero. 

is an jhtegor function yielding the exponent 
of the f 1 or 1 1 nn -p oi nt representation of the 
r eal ar gumen t x . 



clock 



is a 

gives trie 

m i 1 1 i s e c onds 



function without any p a r a m e t e r s . It 

f! ''° current process inn time in 



puts e n » 1 i n e 1 i m j t . h a 1 1 , m ess a g e , t i m e , d a t e . 



<-i£iL£ : nets e r ; , 

eos , card, u n d e fin e ri . e x p o , a n d 

Pascal, hut r e p r e s o n t a d c ! i t i o n a 1 

i m p 1 e m e ntation. ' H e n c e , they m u s t 

that a r e s u p p o s e d t o b e p or t a h 1 e . 



c 1 o c k a r e £ qJi S tan d a r d 
f e a t u r e s of t h e CDC 
b e a v o i d e d in p r o g r a m s 



■> . HiiniLIIilJL .LiiLSLJ 



LLLILei. 



I n installations w h i c h keep the: PA G C A L s y s t e m store ri a s a 
Permanent file, the compiler is. used through the following 
control statements . 

ATTACH .COIWP . 
COMP . 

ATTACH .Lin , 
LOAD .LGG .LIB . 
EXECUTE . 



The additional information needed to complete the ATTACH 
statements must be supplied by the individual computer 
installations which make PASCAL available. The instruction COW'P 
calls the compiler and can be provided with parameters as 
follows: 



COMP (x ,y ,z ) 

x = source program 

y = listing 

z - binary code 



(default - INPUT ) 
(default - OUTPUT ) 
(default = LCO } 



The instruction EXECUTE initiates the execution of the PASCAL 
program, which may call any subroutine in LIB . It has the 
general form : 

EXECUTE f p(f1, ... ,fn) 

where p is either empty or the name of the program given in the 
program heading. f1.«.fn are the actual external files (see 

A Standard Pascal job has the following parts: 



-16- 



control statements 
end of record 

program 

record 



PASCAL 
end of 
data 
end of 



file 



(7/o/V) 

(V/b/V) 

( = file INPUT) 

(6/7/tJ/V)- 



-n- 



PASCAL and Portability N .• flirt h 



Due to the interest expressed by several people to make Pascal 
available on other computers, the Pascal ~P system was developed 
by U. Ammann as a side-product of the 6UUU-3.4 compiler project. 
Its purpose was to provide with minimal effort the means to 
transport Pascal to other systems with also minimal effort on 
the part of the receiver. This resulted in the Pascal -P compiler 
which generates code for a hypothetical stack computer M. This 
computer is described as a short Pascal prooram that represents 
an interpreter. It is combined with a loader that loads the 
generated code, which is a string of printing characters (i.e. a 
text). The only effort on the part of a receiver of this system 
is then to code the loader /interpreter in an efficient manner on 
his available computer. Of course, the system obtained in this 
way is interpretive and inherently slow; however, for short 
programs its speed proved to be quite acceptable. 

Currently, the Pascal-P compiler is being modified in order to 

1. comply with Standard PASCAL, 

2. overcome some shortcomings of the present version, 

3. be expressed entirely in terms of ASCII characters. 

The new Pascal-P compiler is planned to be available in July 74, 

together with documentation. It processes (standard) Pascal with 

a few restrictions (e.g. no packed structures, no formal 

procedures and functions, no file declarations). 

The Pascal-P approach is quite adequate and convenient, if 
efficiency of program execution is of no great significance. 
However, if the development of a high-quality compiler is the 
objective, a bootstrapping process on the basis of an 
interpretive Pascal-P system is \/ery costly, and involves a 
large amount of reprogramming . It is clear that a different 
approach to the transportation of compilers themselves should be 
investigated . 




-18- 



ADDRESS CORRECTIONS 

Please help us keep our mailing list up to date by mailing this 
page back if your address is incorrect or you are no longer interested 
in PASCAL. Additional names of interested parties are welcome also. 



Drop my name. Correct address as indicated, 

Add the following names. 



Mr. George H. Richmond 
University of Colorado 
Computing Center 
364S Marine Street 
Boulder, Colorado 80302 
U.S.A. 



-19- 



George H. Richmond 
University of Colorado 
Computing Center 
3645 Marine Street 
Boulder, Colorado 80302 







.32 7500! 



PASCAL NEWSLETTER 



