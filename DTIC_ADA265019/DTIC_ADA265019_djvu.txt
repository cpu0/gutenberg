
REPORT DOCUMENTATION PAGE 


Foitv Approved 
QPMNo 0704-0138 


AD-A265 019 


• t tour p*r moon*. rciufcig *» Bm» kx rwmnng 4*rj«oto watering *i«Iing <UU smcm geto'iog tno the cau 

] Mt burtKi Ml (net or tny or tot up*3 ot ffi« otoocioti o t rtormojen ttokjdmg tugpMtont tor rMueng if* t*/a»n ts Wuiwpon 
‘IS JofWnon Otva Mgtorajt SU« 1204. KTwpor VA 22502-4302. one) to Ito Ode* at mtomuoon ire AiguHtory A",*n o' 


EPORT DATE 


I 3 REPORT TYPE AND DATES COVERED 


Final: i Apr93 


,. It I Lfc AND SUB III Lfc 

Validation Summary Report: Meridian Software Systems, Inc., Meridian Ada, Version 
4.1.3, Essence 486 under MS-DOS, 5.0 (host) => ADSP-21020 (bare machine) 
(target), 930401 Wl. 11314 


6. AUTHORS) 

Wright-Patterson AFB, Dayton, OH 
USA 


[5 FUNDING NUMBERS 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8 PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-564 0393 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a DtSTRIBUTION/AVAILABIUTY STATEMENT 

Approved for public release; distribution unlimited. 


>«r- % f 

\ K 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12b DISTRIBUTION CODE 


13 ABSTRACT (Maximum 200 words) 

Meridian Software Systems, Inc., Meridian Ada, Version 4.1.3, Essence 486 (under MS-DOS, 5.0) (host) to ADSP-21020 
(bare machine) (target). ACVC 1.11 




HUM in I .11635 


14. SUBJECT TERMS 


Ada programming language. Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


16 SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15 NUMBER OF PAGES 


16 PRICE CODE 


20 LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std 239 128 



















THIS DOCUMENT IS BEST 
QUALITY AVAILABLE. THE COPY 
FURNISHED TO DTIC CONTAINED 
A SIGNIFICANT NUMBER OF 
PAGES WHICH DO NOT 
REPRODUCE LEGIBLY. 







AVF Control Number: AVF-VSR-564.0393 
Date VSR Completed: 6 April 1993 

93-02-08-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 930401W1.11314 
Meridian Software Systems, Inc. 
Meridian Ada, Version 4.1.3 
Essence 486 under MS-DOS, 5.0 -> 
ADSP-21020 (bare machine) 


(FINAL) 


Prepared By: 

Ada Validation Facility 
Hq 645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-5707 






Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 1 April 1993. 

Compiler Name and Version: Meridian Ada, Version 4.1.3 


Host Computer System: 


Essence 486 
under MS-DOS, 5.0 


Target Computer System: ADSP-21020 (bare machine) 

Customer Agreement Number: 93-02-08-MSS 


See section 3.1 for any additional information about the testing 
environment. 


As a result of this validation effort. Validation Certificate 
930401W1.11314 is awarded to Meridian Software Systems, Inc.. This 
certificate expires two years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


V* N -4" 

Ada Validation Facility 
Dale E. Lange 
Technical Director 


Hq 645 C-CSG/SCSL 
Wright-Patterson AFB OH 


45433-5707 



7 ' *rl6 

Ada Valiqatlon Organization 

DirectorV' computer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Acop^si-n For j 

n"' : ” r 

U i » 

. u ■ 

• ■ • S: I 

,*^3 

s' 

□ 
i—» 







l \ *• 

‘ * .‘7 s ' 


r A- : 

, l * • ' 

■5 1 i 

Di.a 

A v; i 


r' 

i 

i 

i 








DECLARATION OF CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: Essence 486 

MS-DOS 5.0 

Target Computer System: ADSP-21020 

Bare Machine 


Customer’s Declaration 


I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 



Date: 


Stowem>yd, President 
Meridian Software Systems, Inc. 
10 Pasteur Street 
Irvine, CA 92718 



9 ^ 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT . 

1.2 REFERENCES. 

1.3 ACVC TEST CLASSES . 

1.4 DEFINITION OF TERMS . 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS . 

2.2 INAPPLICABLE TESTS. 

2.3 TEST MODIFICATIONS. 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 

3.2 SUMMARY OF TEST RESULTS . 

3.3 TEST EXECUTION. 


1-1 

1-2 

1-2 

1-3 


2-1 

2-1 

2-4 


3-1 

3-2 

3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89J. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 





INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1963 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECKJFILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG893). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF seivices (of ?ny kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration {Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 








CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

BQ3022H 

B83025B 

B83025D 

C83D26 A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C93003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






IMPLEMENTATION DEPENDENCIES 


Hie following 327 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113C..Y (23 tests) 
C35706C..Y (23 tests) 
C35708C..Y (23 tests) 
C45241C..Y (23 tests) 
C45421C..Y (23 tests) 
C45524C..Z (24 tests) 
C45641C..Y (23 tests) 


C35705C..Y (23 tests) 
C35707C..Y (23 tests) 
C35802C..Z (24 tests) 
C45321C..Y (23 tests) 
C45521C..Z (24 tests) 
C45621C..Z (24 tests) 
C46012C..Z (24 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713B, C45423B, B86Cj 1T, and C86006H check for the predefined type 

SHORT_FLQAT; for this implementation, there is no such type, 

C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLOAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLOAT? for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACKINE_OVERFLCWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_OVERFLOWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX^MANTISSA of 47 or greater; for this 
implementation, MAX__MANTISSA is less than 47. 

D64005G uses 17 levels of recursive procedure calls nesting; this 
level of nesting for procedure calls exceeds the capacity of the 
compiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 


2-2 




IMPLEMENTATION DEPENDENCIES 


CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation does not support 
pragma INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

The following 260 tests check operations on sequential, text, and 
direct access files; this implementation does not support external 
files: 


CE2102A..C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y 

(12) 

CE2103C..D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A. .B 

(2) 

CE2107A. .H 

(8) 

CE2107L 


CE2108A. .H 

(8) 

CE2109A.,C 

(3) 

CE2110A. .D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A. .B 

(2) 

CE2201A. .C 

(3) 

CE2201F..N 

(9) 

CE2203A 


CE2204A. .D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A..C 

(3) 

CE2401E..F 

(2) 

CE2401H..L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A. .B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A. .B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A. .B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE3401A 


CE3402A 


EE3402B 


CE3402C..D 

(2) 

CE3403A. .C 

(3) 

CE3403E..F 

(2) 

CE3404B.,D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE341LA 


CE3411C 


CE3412A 


EE3412C 


CE3413A..C 

(3) 

CE3414A 


CE3602A..D 

(4) 

CE3603A 


CE3604A..B 

(2) 

CE3605A..E 

(o) 

CE3606A..B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 

(3) 

CE3705A. .E 

(5) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3805A..B 

(2) 

CE3806A..B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3904A. .B 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C 

(3) 

CE3906E..F 

(2) 















IMPLEMENTATION DEPENDENCIES 


AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT 10 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 


2.3 TEST MODIFICATIONS 


Modifications (see section 1.3) were required for 16 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the A VO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 


C37213K, C85006B..C, and C85006E (4 tests) were graded passed by Test 
Modification as directed by the AVO. This implementation generates more 
object code for these tests than can be loaded into the target's memory 
(32K words). Each of these tests was split into two equivalent subtests. 


D64005G was graded inapplicable by Evaluation Modification as directed by 
the AVO. This implementation g .erates more object code for this test than 
can be loaded into the target's memory (32K words). 


EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks whether legal units of a compilation are accepted if 
one of the compilation units is illegal. This test was processed with 
compiler option "-fl", which forces the compiler to generate code for legal 
units of a compilation. 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
Al-00506, the compilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 


BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 


2-4 





IMPLEMENTATION DEPENDENCIES 


instantiating units on the generic units as allowed by AI-Q0408 and 
AI-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 

CE3806G was graded inapplicable by Evaluation Modification as directed by 
the AVO. This test is inapplicable to implementations that do not support 
external files. However, the test incorrectly continues execution after 
handling NAME_ERROR at line 42 (and calling REPORT.NOT_APPLICABLE), and the 
subsequent attempt to create a file results in the test aborting with an 
unhandled NAME_ERROR exception. 

CE3901A was graded passed by Test Modification as directed by the AVO. 
This test expects that implementations that do not support external files 
will raise USE_ERROR on the attempt to create a file at line 52; this 
implementation raises N-'JIEJERROR, as allowed by AI-00332. The test was 
modified by inserting '| NAME_ERROR' into the exception choice at line 55, 
and the modified test was passed. 


2-5 








CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

William E. Crosby 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 


For sales information about this Ada implementation, contact: 

Jim Smith 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 



PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90). 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3420 


95 


68 


260 


327 


655 

(c+d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun 3 system and then transferred to the 
host system via PC-NFS and diskettes. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the PC-NFS ethernet, and run. The results were captured on the 
host system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 






PROCESSING INFORMATION 


Option/Switch 

-fE 

-fl 


-fQ 

-fw 

-c 

-P 


-s 


Effect 

Generate error file for the Ada listing utility. 

Ignore compilation errors and continue generating 
code for legal units within the same compilation 
file (for test EA1003B). 

Suppress "added to library" and "Generating code 
for" information messages. 

Suppress informative warning messages. 

Produce continuous form Ada listings (no page 
headers). 

Obey PRAGMA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

Output Ada listing to the standard output file instead 
of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic media and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 





APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89}. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 200 — Value of V 

$BIG_ID1 (1..V-1 -> 'A', V -> '1') 

$BIG_ID2 (1..V-1 -> 'A', V »> '2') 

$BIG_ID3 (1..V/2 «> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & ' 4 ' & 

(1..V-l-V/2 «> 'A') 

$BIG_INT_LIT (1..V-3 »> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-l-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 -> f ') 

$MAX LEN INT BASED LITERAL 

“ ~ ~ “ "2:" & (1..V-5 -> '0') & "11:" 

$MAX LEN REAL BASED LITERAL 

” "16:" & (1..V-7 -> '0') & "F.E:" 

A-1. 








MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2147483646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

32 

$DEFAULT_SYS_NAME 

ADSP 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESSl 

16#1# 

$ENTRY_ADDRESS2 

16#2# 

$FIELD_LAST 

2147483647 

$FILE_TERMINATOR 

9 9 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLQAT_NAME 

NO_SUCH_FLOAT__TYPE 

$FORM_STRING 

ft ft 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY” 

$GREATER THAN DURATION 

90000.0 

$GREATER THAN DURATION BASE LAST 

Tooootfoo.o 

$GREATER THAN FLOAT BASE LAST 
~ l.lE+308 

$GREATER_THAN_FLOAT_ 

SAFE LARGE 
l.ffE+38 


A-2 




MACRO PARAMETERS 


$GR£ATER_THAN SHORT FLOAT SAFE LARGE 

1.0E+38 

$HIGH_PRIORITY 20 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/FI LENAMEl 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/NODIRECTORY/FILENAME2 

$ INAPPROPRIATE_LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMAl PRAGMA INCLUDE ("A28006D1.ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE {"B28006F1.ADA”) 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -90000.0 

$LESS_THAN_DURATION_BASE FIRST 

- 1 ^ 000000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 1 

$MACHINE__CODE_STATEMENT 

NULL; 

§MACHINE_CODE_TYPE NO_SUCH_TYPE 

§MANTISSAJDOC 31 

$MAX_DIGITS 6 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME BYTE_INTEGER 

A-3 





MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATION1 

$NAME_SPECIFICATION2 

§NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR PRAGMA 


ADSP 

C:\ACVC\TEST\X2120A 
C:\ACVC\TEST\X212 OB 
C: \ACVC\TEST\X3119A 
16#FFFFFFFE# 

1024 

32 

ADSP 

ASCII.LF & ASCII.FF 
NEW INTEGER; 

NO_SUCH_MACHINE_CODE__TYPE 

32 

2048 

1.0/1000.0 
FCNDECL ,VAR_ADDI -SS 
FCNDECL. VAR__ADDRESS1 
FCNDECL.VAR ADDRESS2 


NO SUCH PRAGMA 





APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


MERIDIAN ADA COMPILER OPTIONS 


-fD Generate debugging output. The -fD option causes the 
compiler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the compiler to annotate an assembly language 
output file. The output is supplemented by comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-fE Generate error log file. The -fE option causes the 

compiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the same name as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fL Generate exception location information. The -fL option 
causes location information (source file names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in the event that an 


B-l 




COMPILATION SYSTEM OPTIONS 


"Exception never handled" message appears when an 
exception propagates out of the main program. This flag 
causes the code to be somewhat larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division check and overflow check. These checks are 
describee! in section 11.7 61 the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler, 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all checks. 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the compiler. Note that there is a related ada option, 
-fN to suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjunction with the -S 
option. Certain restrictions apply to use of this option. 

-fv Compile verbosely. The compiler prints the name of each 
subprogram, package, or generic as it is compiled. 
Information about the symbol table space remaining 
following compilation of the named entity is also printed 
in the form "[nK]". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler to run an additional 
optimization pass. The optimizer removes common 
sub-expressions, dead code and unnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 

-lmodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional modifiers can be given to 


B-2 




COMPILATION SYSTEM OPTIONS 


affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-1c suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -lp is only 
meaningful if -lc has also been given. Normally -1c 
suppresses all pagination, whereas -lcp suppresses 
all pagination except where explicitly called for 
within the source file wi,_h a pragma page directive. 

s Use standard output. The listing by default is 
written to a file with the same name as the source 
file and the extension .1st, as in simple.1st from 
simple.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead. 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages and warning messages. 
Specifying -It causes the compiler to list only the 
source lines to which error messages or warning 
messages apply, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For example, 
the default listing file produced for simple.ada has the 
name simple,1st. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -fE option. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No compile. This option causes the ada command to do a 
"dry run" of the compilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

-P Print compile. This option causes the ada command to 
print out the command invoked for each processing step 
as it is performed. 

-S Produce assembly code. Causes the code generator to 
produce an assembly language source file and to halt 
further processing. 


B-3 









COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

MERIDIAN ADA LINKER OPTIONS 


-A Aggressively inline. This option instructs the optimizer 
to aggressively inline subprograms when used in addition 
to the -G option. Typically, this means that subprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for which pragma inline 
has been specified are inlined. 

-c compiler-program-name 

Default: (as stored in program library) 

Use alternate compiler. The -c option specifies the 
complete (non relative) directory path to the Meridian 
Ada compiler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-compiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 
suppresses the creation and additional code generation 
steps for the temporary main program file. The -f option 
can be used when a simple change has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 

bamp to invoke the global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. The -G option 

causes bamp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, compilation units to be optimized 
must have been compiled with the ada -K option. 

-I Link the program with a version of the tasking run-time 

B-4 





COMPILATION SYSTEM OPTIONS 


which supports pre-emptive task scheduling. This option 
produces code which handles interrupts more quickly, but 
has a slight negative impact on performance in general. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies the name 
of the program library to be consulted by the bamp 
program. This option overrides the default library name. 

-n No link. The -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. The -N option causes the bamp command to 
do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
by the bamp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the bamp command 

to print out the actions it takes to generate the 
executable program as the actions are performed. 

-v Link verbosely. The -v option causes the bamp command to 
print out information about what actions it takes in 
building the main program. 

-W Suppress warnings. This option allows you to suppress 
warnings from the optimizer. 


B-5 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. In??lementation-specif ic portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type BYTE_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 

type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 

end STANDARD; 


C-l 







Appendix F Implementation-Dependent Characteristics 


This appendix lists implementation-dependent characteristics of Meridian 
Ada. Note that there are no preceding appendices. This appendix is 
called Appendix F in order to comply with the Reference Manual for the 
Ada Programming Language’ (LRM) ANSI/MIL-STD-1815A which states 
that this appendix be named Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration 
representation clauses, record representation clauses, address clauses, 
interrupts, package system, machine code insertions, pragma interface, 
and unchecked programming. 




f w i*- 


F. 1 Pragmas 


The implemented pre-defined pragmas are: 

elaborate 

See the LRM section 10.5 

interface 

See section F.1.1 

list 

See the LRM Appendix B 

pack 

See section F.1.2 

page 

See the LRM Appendix B 

priority 

See the LRM Appendix B 

suppress 

See section F.1.3 

inline 

See the LRM section 6.3.2. This pragma is not actually effective 


unless you compile/link your program using the global 
optimizer. 

The remaining pre-defined pragmas are accepted, but presently ignored: 


controlled 

shared 


optimize system_name 

storage_unit memory_size 


Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at compile time, the 
compiler issues a warning message rather than an error, as required by 
the Ada language definition. Refer to the LRM Appendix B for additional 
information about the pre-defined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface in Meridian Ada is: 
pragma interface { language, subprogram [, " link-name ”] ); 


ADSP Compiler User's Guide 


Revised 3/12/93 


Page 179 







Implementation-Dependent Characteristics 


where: 

language This is the interface language, one of the names assembly, 
builtin, c, or internal. The names builtin and Internal are 
reserved for use by Meridian compiler maintainers in 
run-time support packages. 

subprogram This is the name of a subprogram to which the pragma 
interface applies. 

link-name This is an optional string literal specifying the name of the 
non-Ada subprogram corresponding to the Ada 
subprogram named in the second parameter. If link-name 
is omitted, then link-name defaults to the value of 
subprogram translated to lowercase. Depending on the 
language specified, some automatic modifications may be 
made to the link-name to produce the actual object code 
symbol name that is generated whenever references are 
made to the corresponding Ada subprogram. The object 
code symbol generated for link-name is always translated 
to upper case. 

It is appropriate to use the optional link-name parameter to 
pragma interface only when the interface subprogram 
has a name that does not correspond at all to its Ada 
identifier or when the interlace subprogram name cannot 
be given using rules for constructing Ada identifiers (e.g., if 
the name contains a '$’ character). 

The characteristics of object code symbols generated for each interface 
language are: 

assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same as link-name, but prefixed 

with two underscore characters (“_”). This language 

interface is reserved for special interfaces defined by 
Meridian Software Systems, Inc. The builtin interface is 
presently used to declare certain low-level run-time 
operations whose names must not conflict with 
programmer-defined or language system defined names. 

c The object code symbol is othe same as link-name, but with one 

underscore character prepended. This is the 
convention used by the C compiler. 

internal No object code symbol is generated for an internal language 
interface; this language interface is reserved for special 
interfaces defined by Meridian Software Systems, Inc. The 
internal interface is presently used to declare certain 
machine-level bit operations. 

No automatic data conversions are performed on parameters of any 
interface subprograms. It is up to the programmer to ensure that calling 
conventions match and that any necessary data conversions take place 
when calling interface subprograms. 


Page 180 


Revised 3/12/93 


ADSP Compiler User's Guide 








Attributes 


A pragma interface may appear within the same declarative part as 
the subprogram to which the pragma interface applies, following the 
subprogram declaration, and prior to the first use of the subprogram. A 
pragma interface that applies to a subprogram declared in a package 
specification must occur within the same package specification as the 
subprogram declaration; the pragma interface may not appear in the 
package body in this case. A pragma interface declaration for either a 
private or nonprivate subprogram declaration may appear in the private 
part of a package specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional information about pragma 
interface. 


F.1.2 Pragma Pack 


Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to 
which it applies, provided that the pragma occurs within the same 
declarative part as the composite type declaration, before any objects or 
components of the composite type are declared. 

Note that the declarative part restriction means that the type declaration 
and accompanying pragma pack cannot be split across a package 
specification and body. 

The effect of pragma pack is to minimize storage consumption by 
discrete component types whose ranges permit packing. Use of pragma 
pack does not defeat allocations of alignment storage gaps for some 
record types. Pragma pack does not affect the representations of real 
types, pre-defined integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as described in the LRM section 11.7, 
with these differences: 

• Presently, division_check and overflow_check must be 
suppressed via a compiler flag, -fN; pragma suppress is ignored 
for these two numeric checks. 

• The optional “on =>" parameter name notation for pragma 
suppress is ignored. 

• The optional second parameter to pragma suppress is ignored; the 
pragma always applies to the entire scope in which it appears. 


F.2 Attributes 




All attributes described in the LRM Appendix A are supported. 


ADSP Compiler User's Guide 


Revised 3/12/93 


Page 181 








ndix F Implementation-Dependent Characteristics 


F.3 Standard Types 


Additional standard types are defined in Meridian Ada: 

• bytejnteger 

• shortjnteger 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 
type ahort_lnteger is range -32768 .. 32767; 


type integer 


is range -2147463648 .. 2147483647; 




type float is digits 6 

range -3.40282E+38 .. 3.40282E+38; 

type duration is delta 0.0001 range -86400.0000 
86400.0000; 






F.4 Package System 


The specification of package system is: 

package system is 

type address is new integer; 

type name is (adsp); 

system_name : constant name :* adsp; 

storage_unit : constant ;■ 32; 
memory_size : constant :* 1024; 

- System-Dependent Named Numbers 


min_int : constant 
max_int s constant 
max_digits : constant 
max_mantissa t constant 
fine_delta : constant 
tick : constant 


- -2147483648; 

* 2147483647; 

* 6 ; 

» 31; 

* 2.0 ** (-31); 

* 1 . 0 / 1000 . 0 ; 


— Other System-Dependent Declarations 
subtype priority is integer range 1 .. 20; 

The value of system.memory_size is presently meaningless. 


Page 182 


Revised 3/12/93 


ADSP Compiler User's Guide 






Restric tio ns on Rep rese ntation Clauses 


F.5 Restrictions on Representation Clauses 

F.5.1 Length Clauses 


mm 


A size specification (t 'size) is rejected if fewer bits are specified than 
can accommodate the type. The minimum size of a composite type may 
be subject to application of pragma pack. It is permitted to specify 
precise sizes for unsigned integer ranges, e.g., 8 for the range o. .255. 
However, because of requirements imposed by the Ada language 
definition, a full 32-bit range of unsigned values, i.e. o.. (2**32) -l, 
cannot be defined, even using a size specification. 

The specification of collection size (t 'storage_size) is evaluated at 
run-time when the scope of the type to which the length clause applies is 
entered, and is therefore subject to rejection (via storage_error) 
based on available storage at the time the allocation is made. A collection 
may include storage used for run-time administration of the collection, 
and therefore should not be expected to accommodate a specific number 
of objects. Furthermore, certain classes of objects such as unconstrained 
discriminant array components of records may be allocated outside a 
given collection, so a collection may accommodate more objects than 
might be expected. 

The specification of storage for a task activation (t ' storage_size) is 
evaluated at run-time when a task to which the length clause applies is 
activated, and is therefore subject to rejection (via Btorage_error) 
based on available storage at the time the allocation is made. Storage 
reserved for a task activation is separate from storage needed for any 
collections defined within a task body. 

The specification of small for a fixed point type (t' small) is subject only 
to restrictions defined in the LRM section 13.2. 


F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an 
enumeration representation clause must be in the range of 
standard, integer. 

The value of an internal code may be obtained by applying an 
appropriate instantiation of unchecked_conversion to an integer type. 


F.5.3 Record Representation Clauses 

The storage unit offset (the at static_simple_expression part) is given in 
terms of 32-bit storage units and must be even. 

A bit position (the range part) applied to a discrete type component may 
be in the range 0.. 31, with 0 being the ieast significant bit of a 
component. A range specification may not specify a size smaller than can 
accommodate the component. A range specification for a component not 
accommodating bit packing may have a higher upper bound as 
appropriate (e.g., o .. 31 for a discriminant string component). Refer to 


ADSP Compiler User's Guide 


Revised 3/12/93 


Page 183 










Appendix F Implementation-Dependent Characteristics 


the internal data representation of a given component in determining the 
component size and assigning offsets. 

Components of discrete types for which bit positions are specified may 
not straddle 32-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must 
evaluate to 1, 2, 4, or 8, and may not be smaller than the highest 
alignment required by any component of the record. 


F.5.4 Address Clauses 

An address clause may be supplied for an object (whether constant or 
variable) or a task entry, but not for a subprogram, package, or task unit. 
The meaning of an address clause supplied for a task entry is given in 
section F.5.5. 

An address expression for an object is a 32-bit memory address of type 
system, address. 


F.5.5 Interrupts 


A task entry’s address clause can be used to associate the entry with a C 
signal. Values in the range 0.. 36 are meaningful, and represent the 
interrupts corresponding to those values. 

An interrupt entry may not have any parameters. 


F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means 
of type conversion. 


F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote 
implementation-dependent components. 


F.7 Unchecked Conversions 

There are no restrictions on the use of unchecked_conversion. 
Conversions between objects whose sizes do not conform may result in 
storage areas with undefined values. 


Pdge 184 


Revised 3/12/93 


ADSP Compiler User's Guide 











Source Line and Identifier L engths 



F.8 Input-Output Packages 


A summary of the implementation-dependent input-output characteristics 
is: 


• Standard input is not supported. 

• File_io is not supported for text_ io, ee<iuential_io and 
direct_io. 

• The packages se<juential_io and direct_io cannot be 
instantiated with unconstrained composite types or record types with 
discriminants without defaults. 


F.9 Source Line and Identifier Lengths 


Source lines and identifiers in Ada source programs are presently limited 
to 200 characters in length. 


ADSP Compiler User's Guide 


Revised 3/12/93 


Page 185 








