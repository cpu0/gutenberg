AD-A273 784 "^tiq n pa ge 

I MAtBy IBM MflU IMM MMI HUI Mill MM Mil IWmIQ# I VlOllr pSf IWpOnM, in® WIIV 


Form Afipfwati 
OPMNo. 


Hangsl hour pf iiw»e*i«». Including ttw tma far rawn in g inmictien*. —»ehim lirtna Ate tcuiew V>**< 
nkm. Sorrdaemrwont t ioaowhruthiibuidonootimAoflfOfiyothoroopoaoUhito n l l o Bl ionolinlDmmioixirwIudiiy 
ioi, DuodoiMo kf MomMlion Ohorolioni and Rooeilo, 121 ».loWfor» Poirio H ghoroir. Su»o iao«. Aili»iglon. VA 
oo ol MonoQOWofd and Budgol. Waohinglen, DC 10603. 


I WWkn 




VADS SYSTEM V/38 RELEASE 4 VAda-110-8080, Version 6.2 
Host: Motorola Delta 8640 under UNIX System V/88 Release 4.0 
930901W1.11326 


Authors: 

Wright-Patterson AFB 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 


SORING^MONITOAING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 



10 . SPONSORING/MONnrOfllNG 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 


3. (Maximum 200 

VADS SYSTEM V?88 RELEASE 4/VAda-110-8080, Version 6.2 Host; 
UNIX System V/88 Release 4.0, ACVC 1.11 



(Target: Same as Host) 


Motorola Delta 8640 under 


H»1 i 



pEC141983| 

til 


14. SUBJECT 


15. NUMBER OE 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp, 
W!F/M-sMiJMJa^ • Testing. Ada Val. Office, Ada Val. Facili^ ' 


CLASSIFtCA-nON 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFIED 


19. SECURITY 
CLASSIFICATiON 

UNCLASSIFIED 


20. LIMITATION C5F 
UNCLASSIFED 


ndard Form 296, ( 
Proscribed by ANSI Sid. 












AVr Control lAnber: AVF-VSR-573.0893 

Date VSR Conpleted: Septenber 28, 1993 

93-07-23-VRX 


Ada COMPILER 
\»^IDAnON SUMMARY REPORT: 

Certificate Number: 930901N1.11326 
Verdix Corporation 

VADS SYSTEM V/88 RELEASE 4/VAda-110-8080, Version 6.2 
Motorola Delta 8640 imder UNIX System v/88 Release 4.0 


(Pinal) 


Prepared By: 

Ada Validaticsi Facility 
645 C CSG/SCSL 

Wright-Patterson APB OH 45433-6503 


93-30180 


93 i2 13 02C 






Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 1, 1993. 

Compiler Name and Version: VADS S^TEM V/88 RELEASE 4 

VAda>110-8080, Version 6.2 


Rost Computer System: 

Target Computer System: 
Customer Agreement Number: 


Motorola Delta 8640 

under UNIX System V/88 Release 4.0 

Same as host 

93-07-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validatim effort. Validation Certificate 

930901W1.11326 is awarded to Verdix Corporation. This certificate expires 

two years after HIL-STD-1815B is approv^ by ANSI. 


This report has been reviewed and is approved. 


Ada Validation Filciliiy- 

Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-6503 


DUC QUAUTY HJSFEUTED 3 


Ada 

Direc^r, (Ommter and Software Engineering Division 
Institute fbr Defense Analyses 
Alexandria VA 22311 


Aoc3„'i!.on For 



Ada Joint Program Office 
H. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Washington DC 20301 


HTIS (J'r'Ail 

; DTIC TAB □ 

i Unarco'ji.red □ 

' Just. 3 3.A jat; on_ 


By- 

Dlstr lbutl 

Avf'l)f.!'j :.it •- j 


I 










DBCLABKTIGN OF CGNPOBMANCE 


The following declaration of conformance was supplied fay the customer. 


Declaration of Conformance 
Customer: Verdix Corporation 


Ada validation Facility: 645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1.11 
Ada Implementation: 

Ada Coop>iler Name and Version: VADS SYSTEM V/88 RELEASE 4 

VAda-110-8080, Version 6.2 

Host Computer System: Motorola Delta 8640 

vmder UNIX System V/88 Release 4.0 

Target Coaster System: Same as host 

Declaration: 

I, the undersigned, declare that I have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD->iei5A ISO 8652-1987 in the isplementation 
listed above. 



bomer Signa^re 


P- 








TABLE OF 


OOIITNTS 


CHAPTER 1 INTRUDUCTIGN 


1.1 USE OF THIS VALIDATION SUMKARY REPORT.1-1 

1.2 REFERENOES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 IXEFINITIQN OF TOWS.1-3 

CHAPTER 2 IHPLEHENIATIGN DEPENKMCIES 

2.1 WITRDRAMN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSINQ INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 


APPENDIX B OOMPILATIGN SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CBI^PTER 1 


INTROD O CTICN 


TlM Ada Inplanantatlon daacribad abova %iaa taated according to tha Ada 
Validation Procaducaa [Pco90] againat tha Ada Standard CAda63] using tha 
currant Ada Ccopilar Validation capability (ACVC). This Validation SusBury 
Raport (VSR) givas an account of tha tasting of this Ada ioplasvntation. 

For any tachnical taraa usad in this raport, tha raadar is rafarrad to 
(Pro90]. A datailad dascription of tha ACVC nay ba found in tha currant 
ACVC Usar's Ouida [UG89]. 


1.1 USE OF THIS \aVLlDATIQN SUMMARY REPORT 

Consistant with tha national laws of tha originating country, tha Ada 
Cartifieation Body nay naka full and fraa public disclosura of this raport. 
In tha Unitad Statas, this is providad in accordanca with tha "Fraadoai of 
Inforaation Act” (5 U.S.C. #552). Tha rasults of this validation ^ply 
only to tha coofaitars, oparating systams, and compilar varsions idantifiad 
in this raport. 

Tha organizations reprasantad on tha signatura paga of this raport do not 
raprasant or warrant that all statanents sat forth in this raport ara 
accurata and cooplata, or that tha subjact iaplansntation has no 
ntmconfonnitias to tha Ada Standard otlwr than those presented. Copies of 
this report ara available to tha public from the AVF which parfomed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questiois regarding this report or the validation test rasults should be 
directed to the AVF vAiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INIRQOUCnCN 


1.2 REFERENCZS 

[Adla83] Reference Manual for the Ada Prograaninq Language, 

ireb^ry 1983 and lid 66^-1987. 

[Pro90] Ada Coapiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 199in 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada iaplenentations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, c, D, E, and L. The first letter of a tost name identifies the class to 
which it belongs, class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link tine, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are iised for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
qptimisations allowed by the Ai^ Standard tiiat would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files written by some of the ^ass C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK__FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled and the 
resvilting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementatim correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and executicm is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific v^iies — for exanple, the largest integer. A list 
of the values us^ for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 








DUBOD O CT I OW 


For each Ada inplenentation, a custonizad test suite is produced by the 
AVF. This custonization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implonentation must process each test of 
the customized test suite according to tlw Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada prograam into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the stpport programs, the ACVC 
Capability xjser's guide and the tmiplate for the validaticm summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target oomputer system. 

Ada Joint The part of the certification bod^ which provides policy and 
Program guidance for the Ada certification system. 

Office (AJFO) 

Ada The part of the certification body vhich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVD) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer 
System 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic cperations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 







ZNIROOUCnON 


Confonnity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an 

agreement with an AVF %«hidi specifies the terms and 
coxiitions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a custoamr assuring that conformity 
Ccxiformance is realized or attainable on the Ada implementation for 
which validatioi status is realized. 

Host Computer A computer system vdiere Ada source programs are transformed 
Syst«B into executable form. 

Inapplicable A test that contains one or more test (^jectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LBN Itie Ada standard, or Language Reference Hanual, published as 

ANSI/MIL-STD-ISISA^ISSS and ISO 8652-1987. Citations from 
the LBN take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
^tem provides services such as resource allocation, scheduling, 

input/output control, and data managownt. Usually, 
qperating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

Target A cooputer system udiere the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The conpiler of a validated Ada isplementation. 

Cospiler 

Validated Ada An Ada inplementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


Withdrawn 

test 






CHAPTER 2 


IMPLEMEMIATZGN I«PEMDEMCIBS 


2.1 WITHDRAMN TESTS 

The following tests have been withdrawn by the AVD. The rationale for 
withdrawing each test is available froa either the AVO or the AVP. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B26006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508H 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

Be3025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

Ba226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024O 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD900SA 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vAiich are irrelevant 
for a given Ada implementation. Reascsis for a test's inapplicability may 
be svqpported ty documents issued by the ISO and the AJPO known as Ada 
Commentaries and coononly referenced in the format AI-<)dddd. For this 
implementaticHi, the following tests were ^tennined to be inapplicable for 
the reasons in^cated; references to Ada Commentaries are included as 
appropriate. 


2-1 










IHPLDIENDmai 0EPENDQ4CIES 


Titm follcwix^ 201 tects have floating-point type declarations 
requiring more digits than SYSTEH.MAX_DIGITS: 


C24113L..y (14 tests) 
C35706L..y (14 tests) 
C35708L..y (14 tests) 
C4524lL..y (14 tests) 
C45421L..y (14 tests) 
C45524L..Z (15 tests) 
C45641L..y (14 tests) 


C35705L..y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C4532lL..y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LCNG_INTBCXR; for 
this in{>leBentation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LGNG_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LGNG_FLQAT, or SHQRT^FLOAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIBST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532N..P (8 tests) check fixed-point operations for 
types that require a SySTEM.NAX^MANTISSA of 47 or greater; for this 
inplementation, NAXJMANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHiNEjQVERFLONS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHZNEJOVERFLOWS is TBUE. 

B8600ly uses the name of a predefined fixed-point type other than type 
DUBATION; for this inplementation, there is no such type. 

C96005B uses values of type DUBATIGN's base type that are outside the 
range of type CUBATIGN; for this inplementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not svpport such 
sizes. 


2-2 












implemduktign oepexobncies 


CD2A84A, CD2A84E, CD2A84Z..J (2 tests), and CD2A840 tise Imgth claxises 
to specify ncsv-default sizes for access types; this iscdenentation 
does not svqpport such sizes. 

The tests listed in the following table check that USE_ERR0R is raised 
if the given file operatiois are not svqpported for the given 
condsination of mode and access aettod; this iiopl«nentation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102O 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INCi^ FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT"FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXr__lS 

CE3102F 

RESET 

Any Mode 

text"10 

CE3102G 

DELETE 


TEXT"10 

CE3102I 

CREATE 

OUT FILE 

text”io 

CE3102J 

OPEN 

IN FILE 

TE3Cr_I0 

CE3102K 

OPEN 

OOT FILE 

TEXT_I0. 


CE2203A checks that WRITE raises USE_ERBOR if the capacity of an 
external sequential file is exceeded; this inplenentation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERRC3R if the crpacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENQTH raise 
USE_ERRCR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementsti<»i. 

CE3413B checks that PACS raises LAYOUT^ERROR vdien the value of the 
page mater exceeds CCXJNT'LAST; for this Implementation, the value of 
CXXJNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 








IHPLEHEMTmCN DEPENDENCIES 


2.3 TEST NOOIFZaiTIONS 

Hodificaticms (see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H Ba303F BC3005B BD2B03A BD2O03A 

BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The ccopiler rejects the \ise of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe m&nbers (cf. LRH 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, and CD2A31A..C (3 Tests) were 

graded passed by Evaluation Modification as directed 1:^ the AVO. These 
tests \ise instantiations of the s\jpport procedure LENCSTOjCHECK, vhich uses 
uncheclcedjConversicn according to the interpretation given in AI-00590. 
The AVO ruled that this interpretation is not binding xinder ACVC 1.11; the 
tests are rul« ^ to be passed if they produce Failed messages only from the 
instances '•! 1 ^lOnijCHECK—i.e, the allowed Report.Failed messages have the 
general f.irm: “ 

" * CHECK ON REPRESEl^TIQN FOR <TTPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one \idth a parameter of mode OUT (line 
36). This isplemenation does not support pragma INTERFACE for procedures 
with parameters of mode OUT. The test was modified by commenting out line 
36 and 40; the modified test was passed. 


2-4 









CBMTER 3 

PB0CESSIN5 INPORMATIGN 


3.1 TESTING ENVIRONMENT 

The Ada iaqplenentatlon tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Corey Ashford 
Verdix Corporation 
1600 N.W. Compton Drive 
Aloha, OR 97006-6905 


Testing of this Ada implementation vas conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is a^licable or inapplicable; 
otherwise, the Ada loplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the isplementation's maximum 
precision (item e; see section 2.2), and those that depend a the siqjport 
of a file system — if none is siqpported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 









PROCESSING INFOmATIGN 


a) Total Nufflber o£ ^jplicable Tests 3805 

b) Total Nunber of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) NMv-Processed l/t) Tests 0 

e) Non-Processed Floatingpoint 

Precisim Tests 201 

£) Total Nunber of Inapplicable Tests 270 (C4<l+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a44>ff) 


3.3 TEST EXEamCK 

A magnetic tape containing the customized test suite (see sectim 1.3) was 
taken on-site the validbticm team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host computer. 

After the test files were loaded onto the host cooputer, the full set of 
tests was processed by the Ada inplementation. 

Testing was performed tising command scripts provided 1:^ the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this isplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Si^ress warning diagnostics. 


Test output/ compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 










APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters tised for custosdzing the ACVC. 
The meaning and purpose of these parameters are e3q>lained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
valiies that are defined in terms of the maximum ii^t-line length, \diich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where 'V represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG__1D1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 ■— value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> »A', V -> »2') 

(1..V/2 -> "A') & & 

(I..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIGJREAL_LIT 

$BIG_STRING1 

$BIG_STRINS2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> S "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'AM & '1' & 
(1..V-20 


$MAXJLEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> 'OM & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16;" & (1..V-7 -> 'OM & "F.E;" 

A-1 









mCRO PARMOEIBRS 


$I«X_STRING_LITEFAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_S1ZE 

32 

$AL1GNHENT 

4 

$CXX]NT_LAST 

2_147_483_647 

$IXFAULT_MEH_SZZE 

16_777_216 

$I«FAULT_STOR_UNIT 

8 

$I«FAULT_SYS_NAHE 

BCS_SELF 

$l»LTA_OOC 

0.0000000004656612873077392578125 

$ENTRY_ADORESS 

SYSTEM."+"(16i40#) 

$ENTRY_ADDBESS1 

SYSTEM."+"(16#80#) 

$ENTR3rADDBESS2 

SYSTEM. ••+"( 16*100#) 

$PIELD_LAST 

2_147__483_647 

$FILEjrERHINATOR 

f 1 

$FIXEZ}J1AHE 

NO_SOCHjrYPE 

$FLOAT_NAHE 

NO_SOCH_TYPE 

$PORM_STRING 

fill 

$FQRN_STRING2 

"CANN0TJ«ESTRICT_F1LEJCAPAC1TY" 

$GREATER THAN DURATIGN 

100_000.0 


$CSEAIER THAN DURATION BASE LAST 

T0_00U_000.0 

$GREATER_THAN FLOAT BASE LAST 

1.7E4-308 

$GREATER THAN FLOAT SAFE LARGE 

“ 5.I5E307 

A-2 








MlOO PARMBIBtS 


$GRBMIER THAN SHORT FLOAT SAFE LARGE 
“ “ “ 9.0f37 “ 

$BIGH_PR10RITT 99 

$ILLBGAL EXTERNAL FILE NAMEl 

■Vill«gal/f ile_naiBB/2} 1 %2102c .dat" 

$ZLLBGAL EXTERNAL FILE NAf(B2 

^ ■Vill«9»l/^il«_naa»/CE2102C*.dat" 

$ZNAFFRQFRIA3E LINE LENGTH 

" -1 

$INAPPROPRIATE PA(Z LENGTH 

“ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( *'A2800601.TST” ) 

$INCLUDE_PRAGMA2 PRAGMA INCLUI« ("B2S006D1.TST'') 

$INTBGER_FIRST -2_147_483_648 

$INTBC®R_LAST 2_147_483_647 

$INTBGER_LAST_PLUS_1 2__147_483__648 

$INrERFACE_LANGUAGE C 

$LESSJIHAN_DURATION -100_000.0 

$LESS THAN DURATION BASE FIRST 

“ - ” -1T)[_000_000.0 

$LINE_TERMINATaR ASCII.LF & ASai.FF 

$LON_PRIORITY 0 

$HACHINE_OOOE_STATEHENT 

OODE_OMOP -> NOP); 

$HACHINEjOOIje;_i’ScPE OONiJ) 

$HANTISSA_DOC 3.1 

$NAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147__483_648 

$NAME 


T’TJy INTEGER 






mCRO PARMIEIERS 


$imfB_LIST 

BCS_SELF 

$NM1E_SPBCIP1C3^CN1 

yAisr/acvcl. ll/c/e/X2120A 

$NM1E_SPBCIPICMnGN2 

/UMt/acvcl. ll/c/e/X2120B 

$NMlE_SPBaFICP^GN3 

Aisr/acvcl.ll/c/e/X3119A 

^IB6_BASED_IMT 

16«P000000E« 

$NEHJ1EH_SIZE 

16_777_216 

$NEH_STORJUNIT 

8 

$NEH_SyS_tAME 

BCS_SELF 

$PAGE_TEiaaNKIOR 

ASCII.FF 

$BECXSD_OEPINITION 

RECORD SURF: CffERAND; DID RECORD, 

$BEOQRDJAHE 

C0DE_0 

$ThSK_SIZE 

32 

$1ASK_STC»AGE_SIZE 

1024 

$TICK 

0.01 

$VARIABLE_ADDRESS 

VAR_1'AI»RESS 

$VARZABLE_AD0RBSS1 

VAR_2'ADDRESS 

$VARIABLEJU]CBESS2 

VAR_3'AIX»ESS 

$YOUR PRAGMA 

PRAGMA PASSIVE 


A-4 


APPIMDIX B 

aXfPZlATIQN SYSTEM QPTZGNS 


Th« conpilcr options of this Ads inplsnsntatian, ss dsscribed in this 
Appsndlx, ars pcovidsd fay ths custonsr. unlsss spscifically notod 
othorwiss, rsfsrsncss in this appsndix ars to cosipilsr documsntation and 
not to this report. 


Syntax 

ada [c^ticais] [source_£ile]... [c^ject^file.o]... 

ArgisBsnts 

object_£ils.o non-Ada deject fils nanes. Thsss files will be passed 
~ on to the linker and will be linked with the specified 

Ada object files. 

options cations to the cotqpilf'X. These are: 

-A (disassMible) Disassemble the units in the source file after 
coo|)iling that. -A can be followed fay arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body {default], 
d Print the data section (if present) as well. 

£ Use the alternative format for output. 

1 Put the disassobly ou^t in file "file name .das" 
s Disassenble the unit spec. ' 

-a file name 

(ar^iive) Treat file name as an object archive file created 
fay ar. Since some arBiive files end with .a, -a is \ised to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPAKCoopiler Ada only) 

(static) If static is indicated, the Ada program is compiled 









OGHPIZATIGN SYSTEM OPTIGNS 


and linked etatically. The default is dynamic. 

-c st^ress the control messages generated when pragma PAGE 
and/or pra^aa LIST are encountered. 

^ identifier type value 

(define) Define an identifier of a specified type and value. 

-d (dependencies) Analyse for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined tmits as uncompiled. The -d option is 
used by a.make to establish dependencies among new files. 
This c^ion will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


<-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard ou^Mt; the raw error messages are left in 
source__file.err. If a directory name is given, the raw error 
output is placed in directory/source^file.err. The file of 
raw error messages can be us^ as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or ~E qption should be used. 

-Eferror file source^file 

(error) Process iburce file and place any error messages 
in the file indicated ^ error^file. Note that there is 
no space between the -Ef and e?ror_file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror file source__file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERROR_EDITQR is defined, the environment 
vari^le ERRQR__PATTERN should also be defined. ERROR_PATTERN 
is an editor search ccnmand that locates the first occurrence 
of 'til' in the error file. If no editor is specified, vi(l) 
is invoked. 









GCXlPIIAnON SYSTEH OPTIGMS 


Tht value of the environBent variable ERBOR_ThBS, if set, 
is used instead of the default tab settings (8). 

-F (full DIAHh) Do not trim the DIANh tree before output to 
net files. To save disk space, the DIANA tree will be 
trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table %dll be nulled 
(tmless those nodes are part of the bo(^ of an inline or 
generic or certain other values needing to be retained for 
the debugging or cospilation information). The trimming 
gmerally removes initial valties of variables and all 
statements. 

-G (GUAS) Display suggested values for the HIN_GVAS_ADDR 
and HAXjSVAS_ADOfl INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the compiler front end. The IL file %d.ll be placed in 
the .(Ejects directory with the file name Ada_source. 

-L library_name 

(library) Operate in VADS library library_name. 

(Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 
(No space between the -1 and the file abbreviation.) 

-H unit name 

(maTn) Produce an executable program by linking the named 
unit as the main program, unitjname must alrea^ be 
compiled. It must be either a parameterless procedure or 
a parameterless function retui^ng an integer. The 
executable program will be named a.out unless overridden 
with the -o <^tion. 

•41 source file 

(mainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assumed to be Ihe root name of the file (for foo.a the 
unit is foo). Only one file miy be preceded by -H. The 
executable program will be naai^ a.out unless overridden 
with the -o option. 

-N (no code sharing) Compile all generic instantiations 
\(d.thout sharing code for their bodies. This option 
overrides the SIiARE_BGDy INFO directive and the SHAREjCOKl 
or SHABE_BODY pragmas. 

—0(0—9] 

(optimize) Invoke the code optimizer. An optional digit 
(ttere is no space laefore the digit) provides the level of 

&-3 






OQKPIIATZGN SYSTEM OPTIGNS 


optimization. The default is -04. 

-O full optimization 

-OO no optimization (use for debugging) 

-01 cqpy propagatioi/ constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add r rmmtm subexpression elimination within 
basic blocks 

-03 add global coonon sidaexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 a^ range optimizations, instruction sdieduling 
and one pass of reccing induction e3q;>resslons 
-06 no change 

-07 add one more pass of induction expression reduction 
-06 add one more pass of induction eiqpression reduction 
-09 add one more pass of induction expression 

reduction and add twisting expressions c ommon to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not al%<ays provide significant performance gains so 
it can be srqppressed. 

-o executable file 

(output) Ihis option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiatim) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. \ADS library is the library in which the 
recompilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVAS_TkBLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GUAS exhausted" without recompiling all the files in the library. 

-S (srqppress) i^ly pragma SUPPRESS to the entire compilation 
for all si^ressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date and time of 
compilation, name of file compiled, comrand input line, 
total compilation time and error sumnary line. Storage iisage 

B-4 






CGMPIIATXGN SYSTEM OPTIONS 


inforaation about the c^ject file is provided. 

-w (warnings) Si^ress warning diagnostics. 
source_file name of the source file to be conpiled. 

Description 

The ada coanand executes the Ada conpiler and ecnpiles the naned Ada 
source file. The file must reside in a VAOS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
conpiled. 

By default» ada produces only object and net files. If the -M option 
is used, the conpiler autonatically invokes a.Id and builds a conplete 
program with the named library \mit as the main program. 

For cross systems, the conpiler generates object files coepatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
cm to the linker and will be linked with the specified Ada object files. 

Command line cations may be specified in any order but the order of 
coapilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada conmand in any VADS_locatioiVbin on a system 
will execute the correct conpiler conponents based upon visible 
library directives, the optim -sh is provided to print the name of 
the conponents actually executed. 

Program listings with a disassendsly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
coB()iled in the same ada library using the -L option (even if the 
contents and unit names are different), the secxxxl compilation will 
overwrite the first. For exaople, the compilation of 
/hsr/directory2/foo.a -L /XisrAads/test will overwrite the 
coaqpilation of /Aisr/directoryl/foo.a -L /osr/vadB/test in the 
VADS library /\isT/v9ids/tBst. 

Diagnostics 

The diagnostics produced by the VADS conpiler are intended to be 
self-explanatory. Most refer to the RH. Each RH reference inclxxles a 
secticm number and optionally, a paragra^dti number enclosed in 
parentheses. 


B-5 







OGMPZIAnON SYSTOl OPTIGNS 


LINKER OPTIONS 

Ttw linker qptions of this Ada inplenentaticm, as described in this 
Appendix, are provided by the custoaer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


Syntax 

a.Id [options] unit_name [linkerjc^ticais] 

Arguments 

linkerjoptions 

All arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

opticms optiois to the a.Id command. These are: 

-DO (objects) Use partially linked cd>jects instead of archives 
as an intermediate file if the Mitire list of (Ejects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver (xi some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-or (time) Displays how long each phase of the prelinking process 
takes. (VADSself only) 

-Du unit list 

(unil^s) Traces the addition of indirect dependencies to the named 
units. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. (VADSself only) 

-DX (debug) Debug memory overflow (use in cases vdiere linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 

-E \mit name 

(eliborate) Elaborate \jnit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
(^ject files to link. This file is only present vhen many object 
files are being linked. (SGI only) 

-L library_name 


B-6 








CQHPIIATZGN SYSTDl OPTIGNS 


(library) Collect infomation for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-o executable_file 

(output) Use the specified fielnane as the name of the output 
rather than the defaxilt a.out (self) or a.vox (cross). 

-sh (shoe) Display the name of the tool executable but do not 
execute it. 

-T (table) List the syabols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
express linking. 

-V (verbose) Print the linker coonand before executing it. 

-V (verify) Print the linker cconand but sxjppress execution. 

-w (warnings) St^ress warning messages, 
xjnitjrxame 

name of an Ada xoiit. Zt must name a non-generic sxxbprogram. 

If xmit name is a fxmction, it must return a x/alue of the 
type SISndabd. INTEGER. This integer resxilt will be passed back 
to the shell as the statxis code of the execution. 

Description 

a.Id collects the object files needed to make xinitjrxame a main 
program and calls the ld(l) linker to link together all Ada and 
other langxxage objects required to produce an executable image in 
a.out (self) or a.vox (cross). Ttxe utility xjses the net files produced 
by the Ada compiler to check dependency information, a.Id produces 
an excepticm mapping table and a xmit elaboration table and passes 
this information to the linker. Itie elaboraticm list generated by 
a.Id will not inclxide library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception vd.ll no longer have exception tables. 

a.Id reads instructions for generating executables frcn the ada.lib 
file in the VADS libraries on the search list. Besides informaticm 
generated by the compiler, these directives also inclxxle WIlHn 
directixws that allow the automatic linking of object modules 
conqpiled from other langxiages or Ada object modxiles not named 
in context claxises in the Ada source. Any number of WIIHn 
directives may be placed into a library but they must be 
nxfflibered contiguoxisly beginning at WII^. The direct!xres are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_f ile: 

B-7 




OCMPIIATIGN SYSTEM OPTXGNS 


WITBn directives may be placed in the local Ada libraries or in 
ai^ VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same lundbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems« the 
USE_LAST_LIMK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and dependencies. 

VADS_locatioiVbin/a.ld is a \^r^pger program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS^location/standard/* startiqp and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 


&-8 



APPES4DZX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iiq>lementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representatim clauses. The inplementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the custoomr. Unless specifically noted otherwise, 
references in this Appendix are to conpiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, v^ich 
are not a part of ^ipendix F, are: 


package STANDARD is 


type INTEGER is ra nge -2147483648 .. 2147483647; 
type SHORT lOTBCZR Is range -32768 .. 32767; 
type TINY_^1TEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E4-308 .. 

1.79769313486232Ef308; 

type SBORT_FLQAT is digits 6 range -3.40282Ef38 .. 3.40282Et-38; 
type OURATICN is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 











APPE34DIX F. Inplenentation-Oependent Characteristics 


1. loplanentation-Dependent Pragmas 

1.1. INLIMEJQNLY Pragma 

ItM IHLiNEjQNLY pragma, vthmi used in the sane \imy as pragma 
INLINE, indicates to the compiler that the subprogram sust 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves cods 
space. If a user erroneously makes an INLINBjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PR06RAM_ERROR will be rais^ at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is cmly allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
Ejects are sxibject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in tlw implementation of seme 
predefined Ada packages, but provides no user access. It is 
used only to implement code b^es for ^ch no actual Ada 
body can be provided, for example the HACHINEjCOOE package. 

1.4. SHAREjCXl^ Pragma 

The SHABE_OCX>E pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic vrdt the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 


C-2 









APPDIDIX F OP THE Ada STANDARD 


If tha second argunent is TBUE the coopiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiatiois of the sane generic. 
When the second argument is FALSE each instantiation will 
get a unique c<^ of the generated code. The extent to 
vdiich code is ^ared between instantiations depends on this 
pra^na and the kind of generic formal parameters (teclared 
for the generic unit. 

The name pragma SHARE BQOy is also recognized fay the imple¬ 
mentation and has Bie same effect as SHAREjOOOE. It is 
included for eospatability with earlier versions of VADS. 

1.5. N0_IMAC2; Pragma 

The pragma sr^resses the generatim of the image array used 
for the IMA^Z attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to \jse the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
coopilation warning a^ PROCStAHJERROR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the sane package 
specificaticxi. 

1.7. INTERFACE_NAME Pragma 

The INTEEIFACE__NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link argument. The pragma 
is adlowed at the place of a declaraHve item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLICIT_CGDE Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 










APFODIX F OP THE Ada STMIDABD 


■ant. This pragaa is only allowed within a aachine code 
procedure. It specifies that ioplicit code generated by the 
CQe|>iler be allowed or disallowed. A warning is issued if 
OFF is used and any iiqplicit oode needs to te generated. 
The default is ON. 

1.9. OPTIKIZE_aXffi Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vdMther the code should be optim¬ 
ized by the compiler. The default is ON. Mhen OFF is 
specified! the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

Ihis pragma is recognized by the implementation b ' has no 
effect. 

2.2. ELABCPATE 

This pragma is implemented as described in i^ipendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RH. 


2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have atode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in ippendix B of the 
Ada RH. 


2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does ix}t allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 


C-4 









APPEIS>IX F (V THE Ada STAICARD 


This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm %dthin a package spec or pack¬ 
age bod^. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. T^ presence of this pragma sxjppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized the iaf>lementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
(Ejects to be packed at the bit level. 

2.11. PAGE 

This pragma is iiqplemented as described in Appendix B of the 
Ada BH. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE( INTERRUPT, <nunber>); 

This pragma Pragma passive can be applied to a task or task 
type declared inanimately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task bod^ will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING ERRCXt at runtime. 


2.13. PRIORITY 



APPDOIX P OF THE Ada SThNCARD 


This pragoM is isfilsMiited as described in Appendix B of the 
Ada BM. 


2.14. SHARED 

This pragaa is recognized by the ioplesMntation but has no 
effect. 


2.15. STQBAGEJUNIT 

This pragaa is recognized by the izapleaentation. The iaple- 
■entation doe s no t allow SYSTEM to be aodified by neans of 
pragnas, the SYSTEM package zust be reccopiled. 

2.16. SUPPRESS 

This pragsM is ioplenented as described, except that 
DIVISION CHECK and in sosw cases OVERPLCN_CBECK cannot be 
supress^. 

2.17. SYSTEMJAHE 

This pragaa is recognized by the inplenentation. The inple- 
nentation does not allow SYSTEM to be aodified by means of 
pra^zas, the SYSTEM package must be recoapiled. 

3. lopleaentation-Dependent Attributes 

3.1. P'REP 

For a prefix that denotes an c^ject, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for whidi an address claiise has 
been given, it refers to the corre spon ding hardware inter¬ 
rupt. The attribute is of the type (ffERAND defined in the 
package MACHINEjOCXS:. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task tmit, or «itry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK ID yields the unique 
task id associated with a task. The value of this attribute 



APPENDIX F OP 1SE Ada STANDARD 


is of the type ADOSESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 

with UNSIGNED TYPES; 
package SYSTEK is 

pragna suppress (AL LjCHE CKS); 
pragna si4)press(EXC£PTIGN_IABLES); 
pragna notjslaborated; 

type NAME is ( bcs_self ); 

SYSTEM_NAHE : Constant NAME bcs_self; 

STORAGE UNIT : constant :• 8; 

MEM0Ry_Sl2E : constant 16_777_216; 

— Systoa-Dependent Named Nunrioers 

MIN INT : constant :• -2 147 483 648; 

MAJTint : constant :• 2 T47_T83jf47; 

HAX_DIGITS : constant :• 1?; 

MAX MANTISSA : constant :» 31; 

rnffi I«LTA : constant :• 2.0**(-31); 

TlCk~ : constant :* 0.01; 

Other SystesHdependent Declarations 

subtype PRIORITY is INTEXZR range 0 .. 99; 

HAX_REC_SIZE : integer :• 1024; 

type ADKtESS is private; 

function (A: ADDRESS; B: ADDRESS) return BOCXXAN; 

function "<” (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<-”(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function (A: ADDRESS; I: INTEGER) return ADDRESS; 

function (A: ADDRESS; I: INTEGER) return ADDRESS; 

function (I: UNSIGNEDjrYPES.UNSIGNED_IMTEGER) return ADDRESS; 

function MENORYJUXBffiSS 

(I: UNSIGNEDjrYPES.UMSIGMEp_INTEGER) return ADDRESS renames "-f" 

N0_ADDR : constant ADDRESS; 

type TASK ID is private; 

NO TASK ID : constant TASK ID; 


C-7 









APPENDIX P OP 1HE Ada STUCARD 


type PASSIVE xaSK ID is private; 

N0_PASSIVBJ]X»_i 15 : constent PASSIVE_TASK_ID; 

subtype SIG STATUS T is INTEGER; 

SIG_STAIUS_?IZE: constant :• 4; 

type PROGRAM ID is private; 

Np_PB0GRAH_l5 : constant PROGRAH_ID; 

type BYTE ORDER T is ( 

iJttle Aoian, 

BIG DCIAN 

); 

BTTEJORIXR: constant BYTEJSRKRJT BIG_ENDIAN; 
type LQNG_ADCRESS is private; 

Np_LaNG_ADOR : constant LCMG^ADORESS; 

function (A: LGNG_ADORESS; I: INTEGER) return LONG ADDRESS; 

function (A: LQNG_ADORESS; I: INTEGER) return LGNGJUX3RESS; 

function HAKE_LONQ_ADDRESS (A: ADDRESS) return LONQ_ADORESS; 

function LOCALIZE(A: LQN6_ADi:»ESS ; BYTE^SIZE : INTEGER) return ADIXtESS; 

function STAnON_OP(A: LONG_ADORESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is ^ julian day. 
subtype DAYjr is INTBGB31; 

— Constants describing the configuration of the CIPO add-on product. 
SUPFORTS_INVOCATION BY AKAESS : constant BOOLEAN TRUE; 
SUPF0RTS~FREELAB0RAK(j7 ; constant BOOLEAN :• TRUE; 

HAKE_ACC£SS_SUPP0RTED : constant BOOLEAN :■ TRUE; 

— Argunents to the CIPO pragma INTERRUPT_ZASK. 
type INTERRUPTJEASK_KIND is ( SIMPLE, SIGNALLING ); 

private 

type ADDRESS is new IJNSIGNEDJIYPES.IJNSIGNED_INIBCXR; 

NOJVDIA : constant ADDRESS 0; 

pra^Da BUILT_IN(''>"); 
pragma BUILT_IN("<"); 
pra^sa BUILT_IN( ">-"); 
pragma BUILT_IN("<-"); 
pragma BUILT IN("-"); 
pragma BUILT”lN("+"); 


C-0 





APPENDIX F OF ISE Ada STANDARD 


typa TASK ZD is new UNSIGNED TYPES.UNSIGNED INTBCZR; 
N0_TASK_i 5 ; constant TASK_l5 ;• 0; 

type PASSIVE TASK ID is new UNSI(21ED TyPES.UNSIGNED_INTECZR; 
NO_PASSIVE_lSSK_lC : constant PASSI\^_TASK_ID 0; 

type PROOtAH ID is new UNSIGNED TYPES.UNSIGNED INTEGER; 
NC}_PR0 GRAM_i 5 : constant PR0 GRaH_ID 0; 

type LONG_ADORESS is new UNSIGNEDJTYPES.UNSZGNED^INTBGER; 

N0__LCNG_AD0R : constant LCNG_ADORESS 0; 

pragna BUILT_IN(MAKE_LQNG_ADORESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUlLT_IN(STATZQN_OP); 

exid SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Claxises 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub¬ 
type. A size clatise applied to a record type will not cause 
packing of ccoponents; an «q>licit record representation 
clause must be given to specify the packing of the coat- 
ponents. A size clause applied to a record type will caiise 
packing of components only vAien the cosponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Claxises 

Address clatises are only supported for variables. Since 
defaxilt initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
pr^bit inititalization of a variables whidi have address 
clauses. The specified address indicates the pt^ical 
address associated with the variable. 

5.4. Interrupts 


C-9 








APPENDIX r OF THE Ada STANDMtD 


Intern^ entries are supported with the following interpre- 
tatioi and restrictions: 

An interrupt entry say not have any paraaeters. 

A passive task that contains one or more internet entries 
must always be trying to accept each interrupt entry, unless 
it is handU-ing the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement >dMre the interrupt entry accept alterna¬ 
tive is open as defined by Ada PM 9.7.1(4). This is not a 
restriction cm normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter- 
r\ 4 )ts are not quexied (see the last sentence of Ada RH 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment cmtaining both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt mtvf from another task are 
allowed and are treated as a notml task renclezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Macdiine Ccxle Inserticms 
Machine ccxie insertiois are sipported. 

The general definition of the package HACHINEjOQOE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the cocte 
statenmnt, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 


C-10 




APF NDZX F OF TBE Ada STANDARD 


The general syntax of a aachine code statement is as fol¬ 
lows: 


OCX>E__n'( opcode, operand {, errand) ); 

where n indicates the number of (grands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

GCX)E__N'( opcode, (operand (, errand}) ); 

For those opcodes that require no qperands, named notation 
must be lued (cf. RH 4.3(4)). 

OQDE_0’( op >> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in NACHINE_CQDE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE CODE must be static expressions, string literals, or 
the functions defined in machinEjOGOE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
pt^ical addresses. 

8. Restrictions on uncheciied Conversions 


Ns:me. 


9. Restrictions on unchecked Deallocations 


None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRBCT_lO use the value MAX recjSIZE as 
the record size (expressed in STORACSIJUNITS) v^n the size 


C-11 



APPQOIX P OF TBE Ada STANDARD 


of ELEMENT_TYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string where ELEMENT TYPE'SIZE is 
very large, MAX REC_SZZE is used instead. NI^_REC0RD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an reaper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STQSIAGEJUNIT bits. DIRECT 10 will raise USE_ERR0R 
if MAX_REC_SIZE exceeds this absolute limit. 

instantiations of SBQUENTIAL_lO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) when the 
size of ELEHENTjrvPE exceed that value. For exanple for 
xmconstrained arrays such as string vthere ELENENTjrypE'SIZE 
is very large, MAX RECJSIZE is used instead. 
MAX_RE0CRD SIZE is define? in SYSTEM and can be changed by a 
program beTore instantiating INTBSTO 10 to provide an upper 
limit on the record size. SEQUENTIXE lO inposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are acttially enforced by the inplemen- 
tation. It is not intended to iaply that resources \q> to or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a maximum line length of 500 
characters including ^le end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STQRACX UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STXXWGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Defaxilt Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica- 
tim every task except the main program is allocated a fixed 
size stack of 10,240 STORAOIJUNITS. This is the value 
returned by T'ST0RAC2;_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STQRAGE_SIZE length attribute 
the default collecticm size for an access type is 100 times 
the s ize of the designated type. This is the value returned 
by T'STX]BAGE_SIZE for an access ^pe T. 









APPENDIX P OF THE Ada STANDARD 


11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGEJUNITS for 
objects declared statically within a ccaf)ilation unit. If 
this value is exceeded the compiler will terminate the cxset- 
pilation of the unit with a FATAL error message. 




APPENDIX F OF THE Ada STANDARD 








