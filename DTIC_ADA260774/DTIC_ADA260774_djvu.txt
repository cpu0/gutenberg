AD-A260 774 


NTATION PAGE 


Form Approved 
OPM No. 0704-OieS 


Manigcnwnt and Budgat, Waaninglon. DC 20S03. 


1. AGENCY USE ONLY (Leave Blank) 


I hourpar rtapoma. IndudingitMtimator mMKfinginaituctiona. lairdilng ailMng dua tourcaa gattwng and mainaining ma data 
tiia butdan aallmala or any olhar aapaa ol Ihh colaaion ot Monnalion. Indudaig auggaatlona tor raducing this burdan. to Waaninga>n 
> JaHaraon Davia Highway. Suta 1204. Ahinglon, VA 22202-4302. and to lha Obica ol Mormation and Raguiaiory AKairt. Obica ol 


2. REPORT DATE 


3. REPORT TYPE AND DATES COVERED 

Final: 18 Nov 1992 


4. TITLE AND SUBTITLE 

Validation Summary Report: Verdix Corporation, VADSworks DEC-RISC=) MIPS 
R3000, VAda-115-61640, Version 2.0, DECstation 5000/200 under Ultrix V4.1 (Host) 
to Sanders STAR MVP board, running vxWorks 5.0 (Target), 921004W 1.11277 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton. OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8 PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-546-1092 


9 SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS<ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


10. SPONSORINGAilONITORING AGENCY 
REPORT NUMBER 



12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADSworks DEC-RISC=) MIPS R3000, VAda-115-61640, Version 2.0, DECstation 5000/200 under 
Ultrix V4.1 (Host) to Sanders STAR MVP board, running vxWorks 5.0 (Target), ACVC 1.11. 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20 LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298. (Rev 2-89) 
Prescribed by ANSI Std 239-128 




























AVF Control Nundser: AVF-VSR-546-1092 
Date VSR Cao(>lete: 16 November 1992 

92-06-23-VRX 


Ada CC»1PILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11277 
Verdix Corporation 

VADSworks DEC-RISC->MIPS R3000, VAda-115-61640, Version 2.0 
DECstation 5000/200 under Ultrix V4.1 -> 

Sanders STAR MVP board, running vxWorks 5.0 

DTIC QUALITY' li-iLriiCTED 5 

(FIN/v).) 


Prepared By; 

Ada_Validation_Paci1ity 
645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 


93-0^1437 



98 ' 1 0 55 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was con^leted on 4 October 1992. 

Con^iler Name and Version: VADSworks DEC-R1SC->HIPS R3000 

VAda-115-61640, Version 2.0 

Host Conputer System: DECstation 5000/200 under Ultrix V4.1 

Target Computer System: Sanders STAR MVP beard, running vs^rks 

Customer Agreement Number: 92-06-23-VRX 


5.0 


See section 3.1 for euiy additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

921004W1.11277 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/MIL-STD-1815B. 

This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
645 C-eSG/SeSL 

Wright-Patterson AFB OH 45433-6503 



AdaVVa^d^ion Organization 

Diractoff,/computer and Software Engineering Division 
InstituW for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John SolcKtiond, Director 
Department of Defense 
Washington DC 20301 




DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 


Customer: Verdix Corporation 

Certificate Awardee: Verdix Corporation 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: VADSworks DEC-RISC->MIPS R3000, Version 2.0 

VAda-115-61640 

Host Computer System: DECStation 5000/200 

Ultrix V4.1 

Target Computer System; Sanders STAR MVP board 

running vxWorks 5.0 


Customer's Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 


f 


J 


Customer Signature 









Certificate Awarde^^ Signature 



Date 






TftBLE OF CONTENTS 


CHAPTER 1 INTRWXJCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITIOJ OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATIOJ DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MC»IFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIROfllENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRCMXJCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures tPro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
tPro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation aK>ly 
only to the computers, operating systems, and compiler versions identified 
in this report. 

Itie organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to; 

Ada Validation Organization 

Ccmiputer emd Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 





INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manxial for the Ada Programming Language, 

ANSI/MIL-STD-1815a, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

[UG89] Ada Compiler Validation Capability User*s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coitpliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. Itie first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at conpile time and link time, 
respectively. 

The executedale tests are written in a self-checking manner euid produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library vmits, the packages REPORT euvi SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Adb Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these vmits are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is ccanpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the ccwpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately conpiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provided in appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inpleroentation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 






INTRODOCTIGN 


For each Ada inpleinentation, a custcmized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target ccmiputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inpleraentation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The edsility of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data mianipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected xonits. 


1-3 






INTWXXJCTION 


Conformity 


Customer 


Declaration of 
Conformzuice 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdravm 

test 


Fulfillment by a ^ 'oduct, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a custcxner assuring that conformity 
is realized or attainable on the Ada implementation for 
\diich validation status is realized. 

A computer system vdiere Ada source programs are transformed 
into executaible form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Orgeuiization for Standardization. 

The Ada st 2 mdard, or Language Reference Namual, published as 
ANSI/MIL-SlD-iaiBA-lSSS and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<s\dDsection>:<paragraf*i>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data meuiagement. Usu* 
operating systems are predominantly software, . partial or 
complete hardware implementations are possible. 

A computer system v^ere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect auTd not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. Hie rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402iA 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENIATION DEPE3^E34C1ES 


The following 201 tests have floating-point type declarations 
requiring more digits them SYSTEI1.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEX5ER; for 
this inplementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C4r"31C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLQAT; for this implementation, there is no such type. 

C35713D and B860012 check for a predefined floating-point type with a 
name other than FLOAT, LCM3_FLQAT, or SHORT_FLCAT; for this 
inplementation, there is no such type, floating-point type and must 
be rejected. (See section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the remge of the base 
type; for this inplementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inpleroentation, the reuiges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not suK>ort such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and (3>2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 


2-2 




inPLENENlATICN DEPENDENCIES 


The tests listed in the following tadjle check that USE_ERPOR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 “ 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of 

external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 

external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify am Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater them 150000, making the checking of this 
objective impractical. 


2-3 





IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Steuidard in the 
way expected by the original tests. 

B24009A B33301B B380J3A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A..C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. Ibese tests use 
insteintiations of the support procedure LENGTH_CHECK, v^ich uses 
Unchec)ced_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LEircTH_CHECK —i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK ON REPRESENTATION FOR <TVPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. 

This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 


2-4 






CHAPTER 


3 


PROCESSING INFORMATIOa 


3.1 TESTING ENVIROIMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical eind sales information about this Ada implementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada implementation was conducted at the custcxner's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Progranining 
Language Standard, vdiether the test is applicable or inappliced)le; 
otherwise, the Ada Inplementation fails the ACVC tPro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maxinum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is suf^rted (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 






PROCESSING INFORMATIOJ 


a) 

Total Number of Applicable Tests 

3805 


b) 

Total Number of Withdrawn Tests 

95 


c) 

Processed Inapplicable Tests 

69 


d) 

Non-Processed I/O Tests 

0 


e) 

Non-Processed Floating-Point 




Precision Tests 

201 


f) 

Total Number of Inapplicable Tests 

270 

(c+d+e) 

g) 

Total Number of Tests for ACVC 1.11 

4170 

(a+bff) 


3.3 TEST EXECUTIOJ 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada in^lementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, compiler and linker listings, euid job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vAich is 
the value for $MAX_1N_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$BIG_ID1 (1..V-1 => 'A', V -> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (l..V-5»> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 »> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1. .V-20 ) 

$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_L1TERAL 

"16:" & (1..V-7 -> »0') & "F.E:" 


A-1 


MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

SALIGNMENT 

4 

$COtJNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

DEC_CROSS_MIPS 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM. ••+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM.”+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

t 9 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

It If 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATIW 


100_000.00 

$GREATER THAN DURATION BASE LAST 

T0_00(j_000 

$GREATER THAN FLOAT_BASE LAST 

l.?E+308 

$GREATER THAN FLCIAT_SAFE LARGE 

5.iyE307 


A-2 





MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLCIAT SAFE LARGE 

9.0E37 ~ 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'Villegal/file_name/2}12102c.dat" & 
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" & 

"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy" & 

"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" 
$ILLEGAL_EXTERNAL_FILE NAME2 

'Villegal/file_naine/CE2102C*.dat" & 
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" & 

"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyy^^ & 

"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAaiAl PRAGMA INCLUDE (''A28006D1 .TST” ) 

$INCLUDE_PRA£»1A2 PRAGMA INCLUDE (’'B28006D1 .TST" ) 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DORATION -100_000.0 

$LESS_THAN_DURATION_BASE FIRST 

-1TJ_000_000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CC®E_0'(OP -> NOP); 

$MACHINE_C(®E_'m»E CC»E_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 


A-3 




MACRO PARAMETERS 


$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME TINY_INTEGER 

$NAME_LIST DEC_CROSS_MIPS 

$NAME_SPECIFICATIONl /usr/acvcl.ll/c/e/X2120A 
$NAME_SPECIFICAT1C»J2 Aisr/acvcl. ll/c/e/X2120B 
$NAME_SPECIFICATI0N3 /\isr/acvcl. ll/c/e/X3119A 
$NEG_BASED_INT 16#FOOOOOOE# 

$NEW_MEM_SIZE 16_777_216 

$NEW_STOR_UNIT 8 

$NEW_SYS_NAME DEC_CROSS_MIPS 

$PAGE_TERMINATOR ASCII.FF 

$RECORD_DEFINITIC»I RECORD SUBP: OPERAND; END RECORD; 
$RECORD_NAME CODE_0 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 1024 

$TICK 0.01 

$VARIABLE_ADDRESS VAR_1'ADDRESS 

$VARIABLE_AI®RESS1 VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 VAR_3'ADDRESS 


$yOUR_PRAGMA PRAC3MA PASSIVE 


A-4 







APPES^IX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada in^lementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


ada - invoke the Ada conpiler 
SYNTAX 

ada loptionsl lsource_file]... (object_file.oI... 

0PTI(»IS 

-a file_name (archive) Treat file_naine as an object 

archive file created by ar. Since scxne archive 
files end with .a, -a is used to distinguish 
archive files from Ada source files. 

-A (disassemble) disassemble the units in the source file 

after coupiling them. -A can be followed by arguments that 
further define the disassembly display (e.g. -Aa, -Ab, -Ad, 
-Af, -Al, -As); 

a add hexadecimal display of instruction bytes to 
disassendsly listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file_naine.das" 

s disassemble the unit spec 

-D identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA 
PREPROCESSOR REFERENCE. 


B-1 


COMPILATION SYSTEM OPTIONS 


-d (dependencies) Analyze for dependencies only. Do not 
do semantic analysis or code generation. Up^te the 
library, marking any defined units as uncompiled. The 
-d option is us^ a.make to esteiblish dependencies 

eunong new files. 

-e (error) Process ccmipilation error messages using a.error 
and send it to stauKiard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 

argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname 
is given, the raw error messages are placed in that file. 
If a directory argument is supplied, the raw error output 
is placed in dir/source.err. The file of raw error 
messages can be used as input to a.error. 

-el (error listing) Intersperse error messages eunong source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file, and call the environment 
editor ERROR_EDITOR. (If ERROR_EDITOR is defined, the 
environment variable ERROR_PATTERN should also be defined. 
ERROR_PATTERN is an editor search cranroand that locates the 
first occurrence of '###' in the error file.) If no editor 
is specified, vi(l) is invoked. 

-F (full DIANA) Do not trim the DIANA tree before outpuit to 
net files. To save disk space, the DIANA tree will be 
trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled (unless 
those nodes are part of the body of an inline or generic or 
certain other values needing to be retained for the debugging 
or compilation information). The trimming generally removes 
initial values of variables and all statements. 

-K (keep) Keep the intermediate language (IL) file produced by 
the compiler front end. The IL file will be placed in the 
.objects directory, with the file name Ada_source. 

-L library_name (library) Operate in VADS library library_naiue. 

(Default: current working directory] 




CX3MPILATI0N SYSTEM OPTIONS 


-lfile_abbreviation (library search) lliis is an option passed to 

the ld(l) linker telling it to search the 
specified library file. (No space between 
the -1 and the file aW3reviation.) (self-host 
only) 

For a description of the file abbreviations, 
see also Operating System documentation, 
ld(l). 

-M unit_name (main) Produce an executable program by linking 

the named lonit as the main program. unit_name must 
already be compiled. It must be either a 
parameterless procedure or a parameterless 
function returning an integer. The executable 
program will be named a.out (self-hosted) or a.vox 
(cross-development) unless overridden with the -o 
option. 

-M source_file (main) Produce an executedale program by compiling 
and linking source_file. The main unit of the 
program is assumed to be the root name of the 
.a file (for foo.a the unit is foo). Only one 
.a file may be preceded by -M. The executable 
program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with 
the -o option. 

-o executable_file (output) This option is to be used in 

conjunction with the -M option, executable file 
is the name of the executable rather than Bie 
default. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level 
of optimization. The default is -04. 

-O full optimization 
-OO no optimization 

-Ol copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops euid address 
optimizations 

-05 add range optimizations, instruction 

scheduling and one pass of reducing induction 
expressions 

-06 no change and instruction scheduling 
-07 add one more pass of induction expression 
reduction and instruction scheduling 
-08 add one more pass of induction expression 


B-3 







COMPILATiai SYSTEM OPTIONS 


reduction euid instruction scheduling 
-09 add one more pass of induction expression 

reduction, instruction scheduling euid hoisting 
expressions common to the then and else parts of 
if statements. 

Hoisting from branches (and cases alternatives) can 
be slow and does not always provide significant 
performeuice gains so it cem be suppressed. 

For more information 2 ibout optimization, see 
COMPILING ACA PROGRAMS, Ccsnpiler Optimizations and 
pragma OPTIMIZE_CODE(OFF). 

-P lnvo)ce the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis of 

all generic instantiations, causing 
reinstantiation of any that are out of date. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible chec)cs. (See also 
pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the conpilation. 

-V (verbose) Print compiler version number, date and time of 
conpilation, name of file conpiled, connand input line, 
total compilation time and error suimnary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

The command ada executes the Ada compiler and conpiles the 
named Ada source file, ending with the .a suffix. The file must 
reside in a VADS library directory. The ada.lib file in this 
directory is modified after each Ada unit is compiled. 

By default, ada produces only object and net files. If the 
-M option is used, the conpiler automatically invokes a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. Ihese files 
will be passed on to the linker and will be linked with the 
specified Ada object files. 


B-4 





CC3MPILATI0N SYSTEM OPTIONS 


Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any VM)S_location/bin 
on a system will execute the correct compiler components based 
upon visible library directives, the option -sh is provided to 
print the name of the conponents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

DIAC2«)STICS 

The diagnostics produced by the VADS conpiler are intended to 
be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a.Id - prelinker 
SYNTAX 

a.Id (options] unit_name [linker_options) 

0PTIM4S 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including Ultrix, HPUX eind System V). 

-DX (debug) Debug memory overflow (use in cases vdiere linking a 
large number of units causes the error message "local symbol 
overflow" to occur). 

-E unit_name (elaborate) Elaborate unit name as early in the 
elaboration order as possiEle. 

-F (files) Print a list of dependent files in order and suppress 


B-5 





COMPILATION SYSTEM OPTICNS 


linking. 

-L library_naine (library) Operate in VADS library library_najne. 

(Default: current working directory] 

-o executable_file (output) Use the specified file name as the 

name of the output rather them the default 
(a.out (self-hosted) or a.vox 
(cross-development)). 

-sh (show) Display the neune of the tool executable but do not 
execute it. 

-U (units) Print a list of dependent vmits in order amd 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

[linker options] All arguments after unit_name are passed 

to the linker. These may be options for the 
linker, archive libraries, library abbreviations 
or object files. 


DESCRIPTIC»I 

a.Id collects the object files needed to make unit_name a 
main program and calls the ld(l) linker to link together all 
Ada and other language objects required to produce an executable 
image in a.out (self-hosted) or a.vox (cross- development). 
unit_neime is the main program cind must name a non-generic 
subprogram. If unit_name is a function, it must return a value 
of the type STANDARD.INTEGEIR. This integer result will be passed 
back to the shell as the status code of the execution. The utility 
uses the net files produced by the Ada compiler to check 
dependency information, a.Id produces an exception mapping table 
and a unit elaboration table and passes this information to the 
linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no 
longer have exception ta±)les. 

a.Id reads instructions for generating executedsles from the 
ada.lib file in the VADS libraries on the search list. Besides 
information generated by the compiler, these directives also 
include WITHn directives that allow the automatic linking of 
object modules conpiled from other languages or Ada object 
monies not named in context clauses in the Ada source. Any 
number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The 
directives are recorded in the library's ada.lib file and have 
the following form. 



COMPILATION SYSTEM OPTIONS 


WITHl:LINK:Object_file: 

WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct execute±)le based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable 
file. 


FILES AND DIRECTORIES 


a.out/a.VOX 
.nets 

.objects/* 

VADS location/standard/* 


default output file 
Ada DIANA net files directory 
object files 

startup and standard library routines 


DIAOraSTICS 


Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 


B-7 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada irrplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation emd not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINy_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 remge -3.40282E+38..3.40282E+38; 
type LONG_FLQAT is digits 15 

range -1.79769313486232E+308..1.79769313486232E+308; 

type DURATICN is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 








APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_0NLY Pragma 

The iNLlNEjCMiY pragma, \i^en used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes em INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and am 
PROGRAM_ERROR will be raised at nm time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the in?>leinentation of srane 
predefineH Ada packages, but provides no user access. It is 
used only to inclement code bodies for which no actual Ada 
body can be provided, for exanple the MACHINE_CODE package. 

1.4. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu- 


C-2 








APPENDIX F OF THE Ada STANDARD 


merit is the name of a generic instauitiation the pragma 
applies only to the specified instemtiation, or overloaded 
inst 2 mtiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instamtiation with code 
generated for other instzuitiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instemtiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHAREJBODY is also recognized by the imple¬ 
mentation a«id has the same effect as SHARE_CODE. It is 
included for con^tability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe- 
cutcible image. An attempt to use the IMAGE attribute on a 
type vdiose image array has been suppressed will result in a 
compilation warning and PRCX3RAM_ERR0R raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The E3crE3NAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. Ihe pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argiiment. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to eui object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 







APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used auid any implicit code needs to be generated. 
The default is ON. 

1.9. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CC»JTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RN. 

2.4. INTERFACE 

This pragma supports calls to 'C' emd FORTRAN f\anctions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the inpleroentation. The inple- 
mentation does not allow SYSTEM to be modified by means of 


C-4 






APPENDIX F OF THE Ada STANDARD 


pragmas, the SYSTEM package must be reco!i 5 >iled. 

2.7. NC»J_REENTRANT 

This pragma takes one argument v^ich caui be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Aj^pendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <nunber>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the ccanpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 


C-5 





APPENDIX F OF THE Ada STANDARD 


cases a warning will be generated at caiq>ile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Af^ndix B of the 
Ada RN. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the inpleroentation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a suli^rogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


C-6 






APPENDIX F OF THE Ada STANDARD 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the mique 
task id associated with a task. Hie value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; 
package SYSTEM is 

pragma suppress (ALL_GiECKS); 
pragma suppress(EXCEPT10N_TABLES); 
pragma not_elaborated; 

type NAME is ( DEC_CROSS_MIPS ); 

SYSTEM_NAME : constant NAME DEC_CROSS_MIPS; 

STORAGE_UNIT : consteint 8; 

MEMORY_SIZE : constant 16_777_216; 

— System-Dependent Nauned Numbers 

MIN_INT : constant -2 147 483 648; 

MAX_INT : constant :« 2 T47_?83_&47; 

MAX_DIGITS : constant l"?; 

MAX_MANTISSA : constant 31; 

FINE_DELTA ; constant := 2.0**(-31); 

TICK : constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer 1024; 

type ADDRESS is private; 

function ">" (A; ADDRESS; B: AM)RESS) return BOOLEAN; 

function "<" (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A; ADDRESS; B: AE©RESS) return BOOLEAN; 

function "<-"(A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: AIXIRESS) return INTEGER; 

function "+" (A; AIX)RESS; I; INTEGER) return AI»RESS; 

function (A; AM)RESS; I; INTEGER) return ADDRESS; 

function "+" (I; UNSIGNED__TYPES.UNSIGNED_INTEGER) 
return ADDRESS; 

function MEMORY ADDRESS 


C-7 




APPEM>IX F OF THE Ada STANDARD 


(I: UNSIGNED_TyPES.UNSIGNED_INTEGER) 
return AI®RESS renames 

NO_ADDR : constant ADDRESS; 

type TASKID is private; 

N0_TASK_1D : constant TASK_ID; 

siabtype SIG_STATUS_T is INTEGER; 

SIG_STA'njS_SIZE: constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type LONG_ADDRESS is private; 

NO_LC»IG_ADDR : constant LCM;_ADDRESS ; 

function "+" (A: L0NG_ADDRESS; I: INTEGER) return LONG_AI»RESS 
function (A: LONG_ADDRESS; I: INTEGER) return LONG_ADDRESS 

function MAKE_LCWG_ADDRESS (A: ADDRESS) return LONG_ADDRESS; 

function LOCALIZE(A; LONG__ADDRESS ; ByTE_SIZE ; INTEGER) 
return ADDRESS; 

function STATION OF(A; LCWG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 

NO_ADDR : constant ADDRESS :« 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN{); 
pragma BUILT_IN(); 
pragma BUILT_IN(”-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TyPES.UNSIGNED_INTEX;ER; 
NO_TASK_ID : constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO PROGRAM ID : constant PROGRAM ID 0; 


type LONG_ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO LONG ADDR : constant LONG ADDRESS 0; 


C-6 




APPENDIX F OF THE Ada STANDARD 


pragma BUILT_IN(MAKE_LONG_AK)RESS); 
pragma BU1LT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the eibsence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; aui explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only when the con?»nent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the varied^le address eleiboration ordering requirements 
prohibit inititalization of a variables \diich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


C-9 





APPEMilX F OF THE Ada STANDARD 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CC®E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, opereuid {, operemd} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a varizdDle number of operzmds. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it caunnot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CC»E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINECODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Neunes 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 


C-10 






APPENDIX F OF THE Ada STANDARD 


None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. In^jlementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_S1ZE as 
the record s; 2 e (expressed in STORAGE_UNITS) when the size 
of EljEMENr_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string v^ere ELEMENr_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a prograun before 
insteintiating DIRECT_IO to provide an uM>er limit on the 
record size. In any case the maucimum size supported is 1024 
x 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) vdien the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEME34T_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineH in SYSTEM and can be changed by a 
program before instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to in^ly that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x 5T0RAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 


C-11 




APPENDIX F OF THE Ada STANDARD 


size stack of 10,240 STORAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 





