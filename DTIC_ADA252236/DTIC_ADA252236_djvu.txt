- AD-A252 236 



rATION PAG^ 


form Approved 
OPMNo. 


nd m 


■ 0 * 1 hour par rooponw, kwhjding lha dma lor raaiawl ng kiatiuoliona, aaaroNng oxMng data aouraaa gadiaring 
I. Sandoommaotaragaiding thia bwdanaalimalaof any olhar aapaeletthia collarilonoUntDntiation. indudit^ 
Oiraolarala tor Intomialton Oparattonaand R apoi l a. 121S Jaftoraon P a v la llghaiay. Suita ISM, Arltogtan, VA 


2202-«302.andtolha OtltoaodntonnalionarrdRaoulaloiy Allaira, Offtoa o( Managamanl and Budgal, Waahinglon. DC 20603. 



.TITLE AND 

Validation Summary Report: Verdix Corporation, VADSworks Sun4»>68k, 
'Ada-115-40800, Version 2.0, Sun4/20 under SunOS, 4.1.1 (Host) to 
lotorla MVME167A (68040 bare machine) under VxWorks, v5.0(Target) 

5. FUNDING 

(D 

Vright-Patterson AFB, Dayton, OH 

JSA 

. PERFORMING ORGANIZATION NAME(S) AND 

kda Validation Facility, Language Control Facility ASD/SCEL 

JIdg. 676, Rm 135 

Vright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

AVF-VSR-534.0492 

1 . SP0NS0RING440NrT0RING AGENCY NAME(S) AND 

Lda Joint Program Office 

Jnited States Department of Defense 

’entagon, Rm 3E114 .- 

Vashington, D.C. 20301 -3081 ^ | ^ 

10. SPONSORING/MONITORING 

AGENCY 

1. SUPPLEMENTARY 1 1 

A ELECTE 

WjULO 11992 1 1 

2a. DISTRIBUTION/AVAILABILITY ^ 0 ^ A Tfffff” 

\pproved for public release; distribution unlimited. 

12b. DISTRIBUTION 

3. (Maximum 200 I 


/erdix Corporation, VADSworks Sun4«a>68k, VAda-115-40800, Version 2.0, Sun4/20 under SunOS, 4.1.1 
Host) to Motorla MVME167A (68040 bare machine) under VxWorks, v5.0(Target), 920513W1.11256, ACVC 


1 . 11 . 


92-17188 


92 t) OriS 



4. SUBJECT 

\da programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
^ap^lity, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A 


15. NUMBER OF 


16. PRICE 




18. SECURI+Y 


CLASSIFICATION 


19. SECURlW 
CLASSIFICATION 


20. LIMITATION OF 


JNCLASSIFIED 


UNCLASSIFED 


UNCLASSIFIED 


ISN 


Suuviard Form 298. (Rev. 2-89) 
Prescribed by ANSI Std. 

















Certificate Information 


Ihe following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 13 Hay 1992. 


Compiler Name and Version: VADSworks Svin4»>68k, VAda-115-40800, 

Version 2.0 

Host Computer System: Sun4/20 

under SunOS, 4.1.1 

Target Ccxnputer System: Motorola MVME167A (68040 bare machine) 

under VxWOrks, v5.0 


Custcmier Agreement Number: 92-03-18-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
920513W1.11256 is awarded to VERDIX Corporatiwi. Tliis certificate expires 
on 1 June 1993. 


This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB C»J 45433-6503 


i 



Ada Va^d^Mn Organization 
Director, uZoogpoter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Accesion For 


NTIS 

CRA&I S 

OTIC 

TAB n 

Unannounced □ 

Justitication 

By. 


Distribution / 

A 

vailab'iiiv ' ■ ' ^ 


AVrlli lV r 

Dist 

bp... 

(\-\ 

i 

I 


—I 


Ada^^int ProgremOffice 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



\ 






AVF Control Number; AVF-VSR-534.0492 

1 June 1992 
92-03-18-VRX 


Ada CCMPILEK 
VALIDATIOI SUMMARY REPORT: 

Certificate Number: 920513W1.11256 
VERDIX Corporation 

VADSworks Svin4*>68k, VAda-115-40800, Version 2.0 
Siin4/20 under SunOS, 4.1.1 *> 

Motorola MVME167A (68040 bare machine) under VxWorks, v5.0 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Certificate Information 


The following Ada in^lementation was tested and determined to pass ACVC 
1.11. Testing was completed on 13 May 1992. 


Compiler Name and Version: VADSworks Sun4=>68k, VAda-115-40800, 

Version 2.0 


Host Computer System: Sun4/20 

under SimOS, 4.1.1 

Target Computer System: Motorola MVME167A (68040 bare machine) 

under VxWorks, v5.0 


Customer Agreement Number: 92-03-18-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

920513W1.11256 is awarded to ’'ERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 




ia Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Saii Vi 
Direc 


Organization 

ter and Software Engineering Division 


Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program office 
Dr. John Soloroond, Director 
Department of Defense 
Washington DC 20301 







ATTACHMENT 1 


DECLARATION OF CONFORMANCE 

The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 

Customer: Verdix Corporation 

Ada Validation Facility: Ada Validation Facility 

ASD/SCEL 

Wright Patterson AFB, Ohio 45433 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VADSworks Sun4«>68k, Version 2.0, 

VAda>llS-40800 

Operating System and Version: SunOS 4.1.1 
Host Computer System: Sun4/20 

Target Computer System: Motorola MVME167A (68040 bare machine), 

running vxWorks 5.0 


Customer's Declaration 

I, the undersigned, representing Verdix Corporation, declare that 
Verdix Corporation has no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A in the implementation listed in 
this declaration. I declare that the Verdix Corporation is the OWNER 
of the above implementation and the certificates shall be awarded in the 
name of the Verdix Corporation's name. 


C. Date: 

Philip C. Fester 
205 Van Buren Street 
Herndon, VA 22070 




DECLARATION OF Ca^FORMANCE 

The following declaration of conformance was supplied by the customer. 

Declaration of Conform 2 mce 
Custcaner: VERDIX Corporation 
Certificate Awardee: VERDIX Corporation 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB CH 45433-6503 
ACVC Version: 1.11 
Ada Inplementation: 

Ada Compiler Name and Version: VADSworks Sun4«>68k, VAda-115-40800, 

Version 2.0 

Host Computer System; Sun4/20 

lander SunOS, 4.1.1 

Target Computer System: Motorola MVME167A (68040 bare machine) 

under vxWorks, v5.0 

Declaration: 

We, the undersigned, declare that we have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the inplementation 
listed above. 

Customer Signature Date 


Certificate Awardee Signature 


Date 


TABLE OF CONTENTS 


chapter 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT . . 

1.2 REFERENCES.' * 

1.3 ACVC TEST CLASSES.i .*.*.*.*.'.*.* * 

1.4 DEFINITION OF TERMS.i !!!!!!! ! 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS. 

2.2 INAPPLICABLE TESTS. !!!!!***’ 

2.3 TEST MODIFICATIONS.i !!!!!!.* ! 

chapter 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT. 

3.2 SUMMARY OF TEST RESULTS. 

3.3 TEST EXECUTICN.. 


1-1 

1-2 

1-2 

1-3 


2-1 

2-1 

2-4 


3-1 

3-1 

3-2 


APPENDIX A MACRO PARAMETERS 


APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


The Ada inpleinentation described above was tested according to the Ada 
Validation Procedures (Pro901 against the Ada Standard (Ada63] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide IUG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the coitputers, operating systems, and ccapiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the siibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to; 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 


iNTRCMxxrriaa 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Prooramning Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 6652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Hiree Ada library units, the pack’jges REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. Ihe package REPORT 
also provides a set of Identity functions used to defeat scane compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. Ihe procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. Ihe operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. Ihe modifications required for 
this implementation are described in section 2.3. 


1-2 




INTRODUCTION 


For each Ada inf)leinentation, a custc^zed test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing scxne inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the custcmiized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler Ibe software and any needed hardware that have to be added 
to a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Conpiler The means for testing conpliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the teirplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host conputer system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 


INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Con^juter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Conputer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objecti’ 'S found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STEV-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predomdnantly software, but partial or 
complete hardware implementations ace possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro90]. 

Tbe process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C7430aA 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA20lE 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vrtiich are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly refertinced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS; 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


■Hie following 20 tests chec)c for the predefined type LONG_INrBGER; for 
this implementation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this inpleroentation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST xnay be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M,.P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX_MANTISSA is less them 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINEjOVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 


CD1009C checks vhether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 






IMPLENENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this in^ilementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not sup^rted for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_I0 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementati(xi. 

CE3413B checks that PAGE raises LAYOUT ERROR >dien the value of the 
p)age number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2-3 




IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 20 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD2A24A, and CD2A31A..C (3 tests) were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, vhich uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTHjCHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK ON REPRESENTATIW FOR <TWE ID> FAILED." 


2-4 


CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Ihe Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly VA 22021 

Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC {Pro90]. 

For all processed tests (inapplicable and a^^licable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the iopleroentation's maxiimmi 
precision (item e; see section 2.2), and those that depend on the su^^rt 
of a file system — if none is su^qported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 




PROCESSING INFORMATION 


a) Total Number of ^}plicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+bff) 


3.3 TEST EXECUTiai 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were not loaded directly onto the host ccmputer. The tape 
was loaded onto a Sun Workstation, and the tests were copied over Ethernet 
to the host machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Testing was performed using ccmraand scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The option invoked explicitly for validation testing 
during this test was: 

Option(s)/Switch Effect 

-w To suppress ccxnpiler warning messages. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 


APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for custcxnizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximxan input-line length, vdiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX__IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 — value of V 

{1..V-1 -> 'AS V »> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' & 
(1..V-20 


$MAX LEN INT BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11;" 


$MAX_LEN_REAL BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COONT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$default_storjunit 

8 

$DEFAULT_SYS_NAME 

SUN4_CROSS_68000 

$DELTA_D0C 

0.0000000004656612873077392578125 

$ENTRY_AK)RESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM.'‘+"(16#100#) 

$FIELD_LAST 

2147483647 

$FILE_TERMINATOR 

f 9 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_TXPE 

$FORM_STRING 

11 11 

$F0RM_STRING2 

"C»NNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATION 


100000.0 

$GREATER THAN DURATION BASE LAST 

TOOOOTTOO.O 

SOFTER THAN_FLGAT BASE LAST 

~ l.^E+308 

$(31EATER 'niAN_FLQAT SAFE LARGE 

s.Ueso? 


A-2 



MACRO PARAMETERS 


$GREATER_THAN SHORT FLOAT SAFE LARGE 

9.0E37 

$HiaH_PRIORITy 200 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'Villegal/file_naine/2{ J%2102c.dat" & 
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" & 

"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy" & 

"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" 

$ILLEX3AL_EXTERNAL_FILE NAME2 

‘Villegal/file_naane/CE2102C*.dat" & 
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" & 

"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy" & 

"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" 
$INAPPROPRIATE LINE LENGTH 

$INAPPROPRIATE PAGE LENGTH 

“ -1 

$INCLUDE_PRAGMAl PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAOIA INCLUDE ("B28006D1.TST") 

§INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THANJDURATION -100000.0 

$LESS_THAN_DURATION_BASE FIRST 

- 1 ^ 000000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CC»E_0'(OP -> NOP); 

$MACHINE_CODE_TyPE COT)E_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX INT 2147483647 




MACRO PARAMETERS 


$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 

$NAME_LIST 

$NAME_SPECIF1CAT10N1 

$NAME_SPECIFICATI0N2 

$NAME_SPECIFICATIGN3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SyS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 

$VARIABLE_AIX>RESS1 

$VARIABLE_A[X>RESS2 

$YOOR_PRAGMA 


2147483648 

-2147483648 

TINY_INTEGER 

SUN4_CROSS_68000 

/hoine/philk/acvcM68k/tape/tests/c/e/X2120A 

/horoe/philk/acvcM68k/tape/tests/c/e/X2120B 

/home/philk/acvcM68k/tape/tests/c/e/X3119A 

16#F000000E# 

16777216 

8 

SUN4_CROSS_68000 

ASCII.LF & ASCII.FF 

RECORD SUSP: OPERAND; END RECORD; 

CC»E_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 




APPENDIX B 


COMPIIATION SYSTEM OPTIONS 


The compiler options of this Ada in^lementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to conpiler documentation and 
not to this report. 


B-1 




COMPILATION SYSTEM OPTI»IS 


ada VADS Reference ada 

ada - invoke the Ada compiler 
SYNTAX 

ada [options! [source_filei... tobject_file.ol... 

OPTIONS 

-# identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA PREPROCESSOR REFEE^ENCE. 

-A (disassemble) disassemble the units in the source file after coivpiling 
them. -A can be followed by arguments that further define the 
disassembly display (e.g. -Aa, -Ab, -Ad, -Af, -Al, -As): 

a add hexadecimal display of instruction bytes to disassembly 
listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file_name.das" 

s disassemble the unit spec 

-a file_name (archive) Treat file_naine as an object 
archive file created by ar. Since some archive files end 
with .a, -a is used to distinguish archive files from Ada 
source files. 

-DG (debug flag) Force frong end to write out the gnrx.lib 
file in ASCII format. To use this option, you must 
con^ile a file that changes the gnrx.lib file. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncon^iled. Hie -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process ccxi^ilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada^source.err. If a file pathname is 
given, the raw error messages are placed in that file, if a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages can 
be used as input to a.error 


B-2 


COMPILATION SYSTEM OPTIONS 


-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variedble ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search command that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invoked. 

-K (keep) Keep the intermediate language (IL) file 
produced by the compiler front end. The IL file will be 
placed in the .objects directory, with the file name 
Ada_source.i 

-L library_naroe (library) Operate in VADS library 
library_name (Default: current working directory) 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system doomientation, ld(l). 

c 

-M unit_name (main) Produce an executable program by 
linking the named unit as the main program. unit_name must 
already be compiled. It must be either a parameterless 
procedure or a parameterless function returning an integer. 

The executable program will be named a.out unless overridden 
with the -o option. 

-M source_file (main) Produce an executable program by 
compiling and linking source_file. The main unit of the 
program is assumed to be the root name of the .a file (for 
foo.a the unit is foo). Only one .a file may be preceded by 
-M. The executable program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with the -o option. 

-o executable file (output) This option is to be used in 
conjunction wTth the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-3 





COMPILATION SYSTEM OPTIONS 


-O full optimization 

-OO prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes (and instruction 
scheduling, if available) 

-06 hoisting from loops with maximum passes (aixi instruction 
scheduling, if available) 

-07 hoisting fzam loops and branches (and instruction) 
scheduling, if available) 

-08 hoisting from loops and branches, more passes (and 
instruction scheduling, if available) 

-09 hoisting from loops and branches, maximum passes (and 
instruction scheduling, if available) 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suf^ressed. 

For more information about optimization, see COMPILING AEA 
PROGRAMS, Compiler Optimizations. See also pragma 
0PTIMI2E_C0DE(0FF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reccw?)ile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) Apply pragma SUPPRESS to the entire 
ccmqpilation for all suppressible checks. (See also pragma 
SUPPRESS (ALL_CHECKS). 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conpiler version nundber, date and time 
of compilation, name of file compiled, command input line, 
total conpilation time, and error sunmary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

ihe command ada executes the Ada conpiler and compiles the 
named Ada source file, ending with the .a suffix. Itie file 
must reside in a VADS library directory. Hie ada.lib file in 


B-4 



COMPILATION SYSTEM OPTIONS 


this directory is modified after each Ada unit is conpiled. 

By default, ada produces only object and net files. If the 
-M option is used, the conpiler automatically invokes a. Id 
and builds a coniplete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker 2 md will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada ccMnmand in any 
VADS location/bin on a system will execute the correct 
compiler conponents based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

See also a.das, a.db, a.error, a.Id, a.mklib, and Operating 
System reference documentation for the ld(l) utility. 

DIAC3N0STICS 

The diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM 
reference includes a section number emd optionally, a paragraph 
number enclosed in parentheses. 

Printed 3-20-91 VADS 


B-5 




COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a.Id VADS Reference a.Id 


a.Id - prelinker 
SYNTAX 

a.Id (options] unit_name (Idjoptions] 

OPTIONS 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unit_name as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather them the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress 
execution. 

DESCRIPTION 

a.Id collects the object files needed to make unit_name a main 
program and calls the UNIX linker ld(l) to link together all Ada 
and other language objects required to produce an executable image 
in a.out (self-hosted) or a.vox (cross- development), tmitjname is 
the main program and must name a non-generic subprogram. If unit_name 
is a function, it must return a value of the type STANDARD.INTEGER. 

This integer result will be passed back to the UNIX shell as the status 
code of the execution. The utility uses the net files produced by the Ada 



COMPILATION SYSTEM OPTIONS 


compiler to check dependency information, a.Id produces an exception 
mapping table and a unit elaboration table and passes this information 
to the linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no longer 
have exception tables. 

a.Id reads instructions for generating executables from the ada.lib file 
in the VADS libraries on the search list. Besides information generated 
by the conpiler, these directives also include WITOn directives that 
allow the automatic linking of object modules compiled from other 
languages or Ada object monies not named in context clauses in the Ada 
source. Any number of WITOn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITOl. The directives 
are recorded in the library's ada.lib file and have the following form. 

WITHl;LINK;obj ect_f ile: 

WITH2:LINK:archive file: 


WlTHn directives may be placed in the local Ada libraries or in any 
VZVDS library on the search list. 

A WiTHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITHn directive in a library 
later in the library search list. 


Use the tool a.info to change or report library directives in the 
current library. 


All arguments after unit_name are passed on to the linker. These may 
be options for it, archive libraries, library abbreviations, or 
object files. 

VADS_location/bin/a.ld is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS conpilers to exist on the same host. The -sh 
option prints the name of the actual executable file. 

FILES AND DIRECTORIES 


a.out/a.VOX 
.nets 

•objects/* 

VADS location/steuidard/* 


default output file 

Ada DIANA net files directory 

Ada object files 

startup and standard library routines 


DIAGNOSTICS 


Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced the UNIX linker Id. 

Printed 3-20-91 VADS 


B-7 




APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed inpleinentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ^pendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vrtiich 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINy_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 remge -1.797693134E+308 .. 1.797693134E+308; 
type SHORT_FLOAT is digits 6 range -3.4028E+38 3.4028E-I-38; 

type DURATICXJ is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 






APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINEjONLY pragma, v^en used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogreun must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE (STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code b^ies for ^ich no actual Ada 
body can be provided, for exanple the HACHINEjCCXDE package. 

1.4. SHARE_CCX}E Pragma 

The SHAREjCODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. lliis 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica- 


C-2 




APPENDIX F OF THE Ada STANDARD 


tion, or after a library unit in a crarpilation, but before 
any subsequent cc»tpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the conpiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic, 
l^en the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
vhich code is shared between instantiations depends cm this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the inple- 
mentation and has Bie same effect as SHAI£_CODE. it is 
included for con^tability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suj^resses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at nm time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occxirrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or sut^rogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 


C-3 




APPENDIX F OF THE Ada STANDARD 


a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLICIT_CC»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. Ihis pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is ON. 

1.9. OPTlMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vhether the code should be optim¬ 
ized by the conpiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type AIX)RE5S in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in ^pendix B of the 
Ada RM. 


C-4 




APPENDIX F OF THE Ada STANDARD 


2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recatpiled. 

2.7. N«»I_REENTRANT 

This pragma takes one argument ^ich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conpiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE (INTERRUPT, <nuna3er>); 


This pragma Pragma passive can be applied to a task or task 

C-5 



APPENDIX F OF TOE Ada STANDARD 


type declared immediately within a library package spec or 
b^y. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASK1NG_ERR0R at r\intiroe. 

2.13. PRIORITY 

This pragma is inplemented as described in ;^}pendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the in?>lementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is inqplemented as described, except that 
DIVI Slew OffiOC and in some cases OVERFLCWjCTffiCK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Inpleraentation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a Subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MAaiINE_CX)DE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 





APPEM>IX F OF THE Ada STANDARD 


attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_1D yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; 
package SYSTEM is 

pragma suppress(ALL_affia(S); 
pragma suppress(EXCEPTI<X4_TABLES); 
pragma not_elaborated; 

type NAME is ( SUN4_aiOSS_68000 ); 

SYSTEM_NAME : constant NAME :■ SUN4_CROSS_68000 ; 

STORAGEJUNIT : constant 8; 

MEMORY SIZE : constant 16_777_216; 

— Systeift-Dependent Named Numbers 

M1N_INT : constant :« -2 147 483 648; 

MAX_INT : constant :« 2 T47_?r83_?47; 

MAXJDIGITS : constant :» I"?; 

MAX_MANTISSA : constant :■ 31; 

FINEJDELTA : constant 2.0**(-31); 

TICK ; constant 0.01; 

— Other System-dependent Declarations 

sxibtype PRIORITY is INTEGER range 0 .. 200; 

MAX_REC_SIZE : integer :■ 1024; 

type ADDRESS is private; 

function ">" (A; ATORESS; B: ADDRESS) return BOOLEAN; 

function "<" (A; AI»RESS; B; Ar»RESS) return BOOLEAN; 

function ">-"(A: AE»RESS; B; ADDRESS) return BOOLEAN; 

function "<-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B; AK)RESS) return INTEGER; 

function (A: ATORESS; I; INTEGER) return AE©RESS; 

function (A: AI»RESS; I: INTEGER) return AODRESS; 

function "+" (I; UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


C-7 




APPENDIX F OF THE Ada STANDARD 


function MEMORY_AI»RESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTBGER) return ADDRESS renames "+" 

NO_ADDR : constant A£X)RESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

type PR0GRAM_1D is private; 

NO PKX^AM ID ; constant PROGRAM ID; 


private 


type AI»RESS is new IJNSIGNED_TYPES.UNSIGNED_INTEGER; 

NO_ADDR ; constant ADDRESS :» 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<") ; 
pragma BUILT_IN(; 
pragma BUILT_IN(); 
pragma BUILT_IN(; 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
N0_TASK_ID ; constant TASK_ID ;■ 0; 

type PBOGRAM_ID is new ONSIGNED_TypES.UNSIGNED INTEGER; 
NO_PROGRAM_ID : constant PI«X»AM_1D 0; 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record ccmiponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK aj^lied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record con^nents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the suJ>- 
type. A size clause a^^lied to a record type will not cause 
packing of ccxqx>nents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only when the conponent type is a 


C-8 



APPENDIX F OF IHE Ada STANDARD 


discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only sufported for variables. Since 
default initialization of a variable requires evalxiation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables \diich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINEjCODE provides 
an assembly language interface for the target machine, it 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand) ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a sxibaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 


C-9 



APPE2®IX F OF THE Ada STANDARD 


CODE_0'( op »> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CC»E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CCX)E must be static expressions, string literals, or 
the functions defined in MACHINE_CCX>E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no inpleraentation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 


8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX REC_SIZE as 
the record size (expressed in STORAGE_UNITS) ^en the size 
of ELEMENT_TYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string vdiere ELEMENT_TyPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECC»D_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT 10 will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEC!UENTIAL_IO use the value MAX_REC_S1ZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELEM1JJT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_REC0R0_SIZE is defined in SYSTEM and can be changed 1:^ a 


C-10 




APPENDIX F OF THE Ada STANDARD 


program before instantiating INTEGER^IO to provide an upper 
limit on the record size. SBQUENTIAL_I0 imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

Hie following limits are actually enforced by the inplemen- 
tation. It is not intended to iitply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

Hie inplementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The meocimum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0PAGE_SIZE for an access type T. 

11.5. Limit on Declared CXsjects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a con^ilation unit. If 
this value is exceeded the conqpiler will terminate the ccxm- 
pilation of the vinit with a FATAL error message. 


C-11 



