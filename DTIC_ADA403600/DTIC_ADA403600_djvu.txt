NAVAL POSTGRADUATE SCHOOL 
Monterey, California 



THESIS 

WEB-BASED DATABASE APPLICATIONS: 

AN EDUCATIONAL, ADMINISTRATIVE 
MANAGEMENT SYSTEM FOR MILITARY ACADEMIES 

by 

Rasim Topuz 
March 2002 

Thesis Co-Advisors: Thomas Otani 

William Haga 


Approved for public release; distribution is unlimited. 





THIS PAGE INTENTIONALLY LEET BLANK 



1 REPORT DOCUMENTATION PAGE 

Form Approved OMB No. 0704-0188 \ 

Public reporting burden for this collection of information is estimated to average 1 hour per response, including 
the time for reviewing instruction, searching existing data sources, gathering and maintaining the data needed, and 
completing and reviewing the collection of information. Send comments regarding this burden estimate or any 
other aspect of this collection of information, including suggestions for reducing this burden, to Washington 
headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 
1204, Arlington, VA 22202-4302, and to the Office of Management and Budget, Paperwork Reduction Project 
(0704-0188) Washington DC 20503. 

1. AGENCY USE ONLY (Leave blank) 2. REPORT DATE 3. REPORT TYPE AND DATES COVERED 

March 2002 Master’s Thesis 

1. TITLE AND SUBTITLE: Web-based Database Applications: An Educational, 
\dministrative Management System for Military Academies 

5. LENDING NUMBERS 

6. AUTHOR: Topuz, Rasim 

7. PEREORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Naval Postgraduate School 

Monterey, CA 93943-5000 

8. PERFORMING 

ORGANIZATION REPORT 
NUMBER 

9. SPONSORING / MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

N/A 

10. SPONSORING / MONITORING 
AGENCY REPORT NUMBER 

11. SUPPLEMENTARY NOTES The views expressed in this thesis are those of the author and do not reflect the official 
policy or position of the Department of Defense or the U.S. Government. 

12a. DISTRIBUTION / AVAILABILITY STATEMENT 

Approved for public release; distribution is unlimited. 

12b. DISTRIBUTION CODE 

A 

13. ABSTRACT (maximum 200 words) 

Not only does a military academy have all the information overload of a normal university but it also has the extra burden of 
the military environment. Without a reliable information system, administrative and educational functions cannot be performed. 

This thesis deals with the problem of administrative overload in managing student, faculty, regiment personnel and course 
data in a military academy. It proposes an Educational Administrative Management System (EAMS), a Web-based data 
management system, as a solution. With this goal in mind, existing client-server architectures, server side application 
development tools and database technologies are explored, and the best configuration of these tools is selected. Some of them 
are recommended. 

As a result of the study, Java Servlets and Java Server Pages are found as the optimal server-side programming tool for the 
application. A working prototype of the system is provided based on Oracle 8i DBMS, Apache Tomcat Web server, Java 
Servlets and Java Server Pages. 

Suggestions are provided for coping with change management issues during the implementation of the system. 

14. SUBJECT TERMS Internet, Web Based Architecture, Java, Java Servlets, Java Server Pages 
(JSPs), Structured Query Language (SQL), Java Database Connectivity (JDBC), Database and 
Military Academy 

15. NUMBER OF 
PAGES 267 

16. PRICE CODE 

17. SECURITY 
CLASSIEICATION OE 
REPORT 

Unclassified 

18. SECURITY 

CLASSIEICATION OE THIS 
PAGE 

Unclassified 

19. SECURITY 
CLASSIEICATION OE 
ABSTRACT 

Unclassified 

20. LIMITATION 

OF ABSTRACT 

UL 


NSN 7540-01-280-5500 Standard Form 298 (Rev. 2-89) 


Prescribed by ANSI Std. 239-18 


1 



























THIS PAGE INTENTIONALLY LEET BLANK 


11 



Approved for public release; distribution is unlimited. 


WEB-BASED DATABASE APPLICATIONS: 

AN EDUCATIONAL, ADMINISTRATIVE MANAGEMENT SYSTEM 
FOR MILITARY ACADEMIES 


Rasim Topuz 

Lieutenant Junior Grade, Turkish Navy 
B.S., Turkish Naval Academy, 1996 

Submitted in partial fulfillment of the 
requirements for the degrees of 


MASTER OF SCIENCE IN COMPUTER SCIENCE 

AND 

MASTER OF SCIENCE IN INFORMATION TECHNOLOGY MANAGEMENT 


from the 


NAVAL POSTGRADUATE SCHOOL 
March 2002 


Author: Rasim Topuz 

Approved by: Thomas Otani 

Co-Advisor 

William Haga 
Co-Advisor 

Chris Eagle 

Chairman, Department of Computer Science 
Dan Boger 

Chairman, Department of Information Sciences 


iii 



THIS PAGE INTENTIONALLY LEET BLANK 


IV 



ABSTRACT 


Not only does a military academy have all the information overload of a normal 
university but it also has the extra burden of the military environment. Without a reliable 
information system, administrative and educational functions cannot be performed. 

This thesis deals with the problem of administrative overload in managing 
student, faculty, regiment personnel and course data in a military academy. It proposes an 
Educational Administrative Management System (EAMS), a Web-based data manage¬ 
ment system, as a solution. With this goal in mind, existing client-server architectures, 
server side application development tools and database technologies are explored, and the 
best configuration of these tools is selected. Some of them are recommended. 

As a result of the study, Java Servlets and Java Server Pages are found as the 
optimal server-side programming tool for the application. A working prototype of the 
system is provided based on Oracle 8i DBMS, Apache Tomcat Web server, Java Servlets 
and Java Server Pages. 

Suggestions are provided for coping with change management issues during the 
implementation of the system. 


V 



THIS PAGE INTENTIONALLY LEET BLANK 


VI 



TABLE OF CONTENTS 


I. INTRODUCTION.I 

A. BACKGROUND.I 

1. Problem.1 

2. Solution Proposed by This Thesis.1 

3. Consequenee If the Problem Is Not Solved.1 

4. Speeifie Case.1 

B. OBJECTIVES.3 

C. EIMITATIONS.3 

D. METHODOEOGY.4 

E. ORGANIZATION OE THE THESIS.4 

IT PEANNING AND DESIGN.7 

A. HIGH EEVEE PERSPECTIVE.7 

1. Plan.7 

a. Mission.7 

b. Vision.8 

e. Values.8 

d. Goals.8 

2. Current Application.8 

a. History and Description.8 

b. Strengths and Weaknesses of the Current System.9 

B. INITIAL DIRECTION.10 

1. The Application.10 

2. The Database.10 

C. REQUIREMENTS.10 

1. General Application Architecture.10 

2. User Pro files.11 

3. Use Cases.11 

a. Eaculty.11 

b. Department Heads.12 

c. Regiment Personnel.12 

d. Students.13 

e. Administrative Office Personnel.13 

III. ARCHITECTURE EVALUATION.15 

A. DEEINITION.15 

B. TWO-TIER ARCHITECTURE.15 

C. THREE-TIER ARCHITECTURE.17 

D. CONCLUSION.20 

IV. EVALUATION OE SERVER-SIDE TECHNOLOGIES.23 

A. SERVER-SIDE TECHNOLOGIES.23 

1. Common Gateway Interface (CGI).25 

vii 











































2. Web Server APIs (ISAPI, NSAPI).26 

3. Aetive Server Pages (ASP).28 

4. Java Servlets and Java Server Pages.29 

B. COMPARISONS OF THE TECHNOLOGIES.31 

1. Seeurity Issues.31 

2. Performanee.32 

3. Platform Independenee.32 

4. Reusability and Ease of Maintenance.33 

D. CONCLUSION.33 

V. RELATIONAL DATABASES AND THE STRUCTURED QUERY 

LANGUAGE.35 

A. RELATIONAL DATABASES.35 

1. Database.35 

2. Database Management System.35 

3. DBMS vs. Eile Systems.36 

4. Data Models and Relational Data Model.36 

B. STRUCTURED QUERY LANGUAGE.39 

1. SQL Statements/Commands.39 

a. Data Definition Language (DDL).39 

b. Data Manipulation Language (DML).40 

2. How SQL is Used.41 

C. SUMMARY.42 

VI. SQL APPLICATION PROGRAMMING INTERFACES AND JAVA 

DATABASE CONNECTIVITY.45 

A. SQL APPLICATION PROGRAMMING INTERLACES.45 

B. JAVA DATABASE CONNECTIVITY.46 

1. JDBC Driver Types.46 

a. Type 1: Bridges.47 

b. Type 2: Direct Translation to the Native API.47 

c. Type 3. Network Bridges.48 

d. Type 4: Direct Translation over Sockets.48 

2. JDBC API.49 

a. Driver Manager.51 

b. Connection Interface.51 

c. Statement Interface.51 

d. ResultSet Interface.51 

C. BASIC STEPS IN USING JDBC.52 

1. Load the Driver.52 

2. Define the Connection URL.52 

3. Establish the Connection.53 

4. Create a Statement.53 

5. Execute a Query or Update.54 

6. Process the Results.54 

7. Close the Connection.55 

D. SUMMARY.55 

viii 














































VII. DESIGN AND IMPLEMENTATION.57 

A. DESIGN.58 

1. System Architecture.58 

2. EAMS Object Model.59 

3. EAMS Database Structure.60 

B. IMPLEMENTATION OE THE PROTOTYPE.61 

1. Implementation of Prototype Database.61 

2. Implementation of EAMS Application Prototype.62 

C. COMPONENTS OE THE MIDDLE TIER.63 

1. HTTP Server.64 

2. Login Page.64 

3. Academy Servlet.64 

a. Initialization.64 

b. Creating Database Connections.64 

c. Getting the User’s Parameters.65 

d. Session Tracking.65 

e. Executing User Request.66 

4. ConnectionPool and PoolManager Classes.66 

5. Communicator Java Bean Class.67 

6. JSP Piles.67 

a. Paculty JSP Pile.67 

b. Student JSP Pile.68 

c. Department Head JSP Pile.68 

d. Regiment JSP Pile.69 

7. Logger Class.70 

8. Database Properties Pile.70 

D. SCREEN SHOTS OP THE SYSTEM.70 

E. CONPIGURATION OP THE SYSTEM.96 

P. ASSESSING THE IMPACTS OP EAMS IN THE ACADEMY AND 

CHANGE MANAGEMENT.97 

1. Pind a Champion.98 

2. Emphasize the Need.98 

3. Porm a Powerful Guiding Team.99 

4. Recognize the Resistance and Deal with It.99 

5. Educate All Users.99 

6. Maintain Open Communications.99 

VIII. CONCLUSION.101 

A. SYNOPSIS.101 

B. PUTURE ENHANCEMENTS.102 

APPENDIX A. LIVE STYLES OP CLIENT/SERVER COMPUTING.105 

APPENDIX B. WEB ARCHITECTURE.107 

1. WebBrowser.108 

2. Webserver.109 

3. Sending a Request to the Web Server.109 


IX 














































4. Executing the Server Program.110 

5. Sending Back the Results to the Browser.110 

APPENDIX C. EAMS DATABASE REEATIONSHIP DIAGRAM AND SQE 

DDE CODE.Ill 

APPENDIX D. SOURCE CODE OE THE IMPEEMENTATION.119 

1. Source Code of the Academy Servlet.119 

2. Source Code of the Connection Pool Class.184 

3. Source Code of the Connection Pool Manager Class.188 

4. Source Code of the Communicator Java Bean Class.193 

5. Source Code of the Log Writer Class.201 

6. Source Code of the DepartmentHead JSP Eile.202 

7. Source Code of the Eaculty JSP Pile.211 

8. Source Code of the Regiment JSP Pile.220 

9. Source Code of the Student JSP Pile.233 

10. Source Code of the Login JSP Pile.243 

11. Source Code of the LogOff JSP Pile.244 

12. Properties Pile.245 

LIST OP REPERENCES.247 

INITIAL DISTRIBUTION LIST.249 


X 





















LIST OF FIGURES 


Figure 1. Two-Tier Arehiteeture.16 

Figure 2. Three-Tier Arehiteeture.17 

Figure 3. Comparison of Initial Development Effort (From Gallaugher, 1996).18 

Figure 4. Comparison of Subsequent Development Efforts (Erom Gallaugher, 1996) ..19 

Eigure 5. An Arehiteeture Design Example for an Enterprise Information System 

(After Goodyear, 2000).22 

Eigure 6. Database Conneetion with CGI. 25 

Eigure 7. Creation of an Entire New Proeess for Eaeh Request in CGI (Erom Ayers 

2000).26 

Eigure 8. Request-Response Elow Diagram for APIs.27 

Eigure 9. Request-Response Elow Diagram for ASP.28 

Eigure 10. Request-Respond Elow Diagram for Java Servlets.30 

Eigure 11. The Eirst Call Initializes the JSP and Subsequent Requests Invoke Its 

Output.31 

Eigure 12. Relationships Diagram for Sample Tables.38 

Eigure 13. An Example Arehiteeture Using Type 1 JDBC Driver (Erom Ayers, 2000)...47 

Eigure 14. An Example Arehiteeture Using Type 2 JDBC Driver (Erom Ayers, 2000)...48 

Eigure 15. An Example Arehiteeture Using Type 3 JDBC Driver (Erom Ayers, 2000)...48 

Eigure 16. An Example Arehiteeture Using Type 4 JDBC Driver (Erom Ayers, 2000)...49 

Eigure 17. The Classes and Interfaees of JDBC 2.1.50 

Eigure 18. The Relations of Most Important Classes and Interfaees of JDBC 2.1 API 

(Prom White & Hapner, 1999).50 

Eigure 19. A Simple Example Eoading a JDBC Driver.52 

Eigure 20. A Simple Example for Defining a URL.53 

Eigure 21. Simple Example for Establishing a Conneetion.53 

Eigure 22. Creating a Statement Objeet.54 

Eigure 23. Executing a Query.54 

Eigure 24. Processing the Results.54 

Eigure 25. Spiral Process Model for Web-Based Applications.57 

Eigure 26. EAMS System Architecture.59 

Eigure 27. EAMS Object Model.60 

Eigure 28. EAMS Database Structure.61 

Eigure 29. Screen Shot for Login Page.71 

Eigure 30. Screen Shot for My Home Page (for Students).72 

Eigure 31. Screen Shot for Courses (for Students).73 

Eigure 32. Screen Shot for Personal Information Page (for Students).74 

Eigure 33. Screen Shot for Class Schedule Page (for Students).75 

Eigure 34. Screen Shot for Grades Page (for Students).76 

Eigure 35. Screen Shot for Extra Information in Grades Page (for Students).77 

Eigure 36. Screen Shot for Company Information (for Students).78 

Eigure 37. Screen Shot for Peedback/Problems Page.79 


XI 



































Figure 38. Screen Shot for Logged Off Page.80 

Figure 39. Screen Shot for My Home Page (for Faculty Members).81 

Figure 40. Screen Shot for Courses Page (for Faculty Members).82 

Figure 41. Screen Shot for Class Schedule (for Faculty Members).83 

Figure 42. Screen Shot for Students (for Faculty Members).84 

Figure 43. Screen Shot for Grade Update (for Faculty Members).85 

Figure 44. Screen Shot for My Home Page (for Department Heads).86 

Figure 45. Screen Shot for Department (for Department Heads).87 

Figure 46. Screen Shot for Students (for Department Heads).88 

Figure 47. Screen Shot for Instructors (for Department Heads).89 

Figure 48. Screen Shot for My Home Page (for Regiment Personnel).90 

Figure 49. Screen Shot for Units-1 (for Regiment Personnel).91 

Figure 50. Screen Shot for Units-2 (for Regiment Personnel).92 

Figure 51. Screen Shot for Students-1 (for Regiment Personnel).93 

Figure 52. Screen Shot for Students-2 (for Regiment Personnel).94 

Figure 53. Screen Shot for Students-Officers (for Regiment Personnel).95 

Figure 54. Gartner Group’s Five Stages of Client/Server Computing (From 

Goodyear, 2000).105 

Figure 55. Simple Request and Respond Flow between a Browser and Web Server 107 

Figure 56. EAMS Database Relationship Diagram.111 


xii 






















LIST OF TABLES 


Table 1. The Comparison of Two-Tier and Three-Tier Arehitectures (From 

Edwards, 1999).20 

Table 2. Example Database Table for Books.37 

Table 3. Example Database Table for Publishers.38 

Table 4. A Eist of the Most Used SQE Commands of DDE.39 

Table 5. Examples on the Most Used SQL Commands of DDL (The Examples are 

Implemented on the Sample Tables of BOOKS and PUBLISHERS.).40 

Table 6. A List of the Most Used SQL Commands of DML.40 

Table 7. Examples on the Most Used SQL Commands of DML (The Examples are 

Implemented on the Sample Tables of BOOKS and PUBLISHERS.).41 

Table 8. JDBC Driver Categories.49 

Table 9. List of Data Subjects of EAMS Database.62 


xiii 












THIS PAGE INTENTIONALLY LEET BLANK 


XIV 



ACKNOWLEDGEMENTS 


This thesis, a result of my two years of graduate studies at the Naval Post 
Graduate School, is dedicated to my parents who encouraged me at every step of my life, 
to my brothers Rasih, Kazim and Ender who had more confidence in me than I had in 
myself, to my beautiful new baby daughter, Ilayda Nur—and most importantly to my 
dear wife, Fazilet, who unflaggingly supported and tolerated me while I prepared the 
research project. 

I would also like to express my sincerest thanks to all the people who have helped 
me along the way in preparation of this thesis. Among them I would like to thank Ron 
Russell for his editorial help. Finally, I would particularly like to thank my outstanding 
advisors; Professor Thomas Otani and William Haga, for their patience, assistance and 
guidance in helping me prepare this thesis. 


XV 



THIS PAGE INTENTIONALLY LEET BLANK 


XVI 



I. INTRODUCTION 


A. BACKGROUND 

1. Problem 

Not only does a military academy have all the information overload of a normal 
university, but it also has the extra burden of the military environment. Without a reliable 
information system, administrative and educational functions cannot be performed. 

Currently most academic organizations use an information system based on a 
database to handle this problem. But in most cases, because of the system architecture, 
only the administrative office personnel has access to the information, which wastes 
computer resources, manpower and time, and generates additional paperwork. 

2. Solution Proposed by This Thesis 

Even though all the information is in the system, as only the administrative office 
personnel has access to this system, any other users who need the information do not 
have access to the system. A solution is an Educational Administrative Management 
System (EAMS), which will provide access to all information on a need-to-know basis. 
All the users in the military academy, such as the students, faculty members, department 
heads, the command personnel as well as the administrative office personnel, will have 
access to the system, based on their privileges. 

3. Consequence If the Problem Is Not Solved 

Without implementing this system, duplicate files are kept in different locations in 
the organizations. As a result, one must update too many files or data for the same 
information, wasting much manpower. Moreover the safety of the information is 
jeopardized, currently a major concern of all organizations. 

4. Specific Case 

The Turkish Naval Academy is currently using an online Student Administrative 
Information System. This system is only accessible by the administrative office 
personnel. The officers in the regiment or the faculty members in the academic 
departments do not have direct access to the system and the information. The author 

believes that this kind of information infrastructure results in redundant and imprecise 

1 



data maintained at different field sites by different personnel. For example, if the 
department heads want to aceess the eurrent grades of the students, they need to request 
this information from the administrative office, and a written report will be submitted in 
response. This requires much time and extra paperwork. 

Another specific example is the regiment personnel who command a student unit 
in the academy. If an officer needs some particular information (such as the discipline 
points or a current address) the officer must request this information from the 
administrative offices in the regiment building. Once again the response will be 
submitted on paper. To reduce this extra time, most of the officers also keep extra files in 
their offices, which creates extra paperwork and requires extra time. Also as the 
administrative offices are only open during business hours, special extra files must be 
kept and updated in special offices or on computers for the faculty members working on a 
project late in the academy or any regiment officer on duty who wants to access 
information about the personnel. This wastes computer resources, manpower and time. 

The proposed solution to the academy is a new Educational Administrative 
Management System, which will enable the faculty members, command personnel, 
students, department heads and the administrative office personnel access to the system. 
In this system, the officers in the regiment, even the regiment or academy commander, 
can locate information about any student or person with a few mouse clicks. For the 
faculty members or the department heads seeing the level of the students is easy. Their 
grades, course and information about their instructors will be just a few mouse clicks 
away. 

As the system will be implemented as a Web-based system, which the users will 
access via their browsers, the system will also have an advantage of being portable. The 
system will be accessed anywhere and anytime, which is believed to enhance the 
productivity of the personnel. Even with the necessary security precautions, the users can 
access the system with their PDAs. The proposed system is aimed to be an intermediary 
between the user and the information. With the proposed system, most of the current 
problems will be eliminated, resulting in considerable savings of personnel power and 
time while proving the information to the users quickly. 


2 



B, OBJECTIVES 

The goal of this thesis is to design, implement and analyze a Web-based 
Edueational Administrative Management System (EAMS) for the Turkish Naval 
Aeademy. In keeping with this goal, the current architecture types, development tools and 
database technologies will be discussed and the best configuration of these tools will be 
selected. According to this selection, a prototype for the naval academy will be designed 
and implemented. 

The primary research objective of the thesis is to provide an object-oriented, 
Web-based, data-retrieval system for the naval academy that will enable access by the 
various users. In the research, the following questions will be addressed: 

• What are the initial requirements for the EAMS application for a military 
academy? 

• What are the existing information system architecture types, and what are 
the benefits of the three-tier client server architecture? 

• What is the appropriate tool for developing a Web-based application? 

• What are the possible impacts of implementing EAMS in the academy 
from the view of the change management? 


C. LIMITATIONS 

A Web-based EAMS application prototype will be implemented; however, to 
implement the prototype rapidly, the initial requirements of the system will not be 
defined in detail. According to the current official reports used in the academy, more 
detailed interfaces could be needed to generate system outputs directly as official reports. 
Erom the system manager perspective, the interfaces for auditing the system online, 
checking the user’s activities and other issues related with security will not be 
implemented in the initial prototype. Erom the database migration perspective, the 
migration problems, related to the original database and the EAMS, will not be covered 
in this thesis. 


3 



D, METHODOLOGY 


The thesis research will cover the following phases: 

• Requirements Analysis: The analysis of the current system and the initial 
requirements will be defined in this phase. 

• Architectural Design: The architecture of the system will be selected and 
designed in this phase. 

• Application Development Tools Evaluation: In this phase, the best 
development tool will be selected from the current development 
technologies. 

• Logical and Physical Database Design: The selection of the entities for 
the system and the related tables/relations will be defined and designed in 
this phase. Also for the implementation purposes, a database instance will 
be created and populated with data. 

• Application Design and Implementation: In this phase, the Web-based 
three-tier Educational Administrative Management System (EAMS) 
prototype for the Naval Academy will be designed and built. The 
configuration of the system and the possible impacts of the 
implementation, such as the resistance to change, will also be studied in 
this phase. 

• Analysis: In this phase, the benefits of the system will be identified and 
the screen snapshots of the prototype will be explained. Possible future 
enhancements will also be discussed. 

E. ORGANIZATION OF THE THESIS 

This thesis consists of four general parts. Each part is based on the previous one: 
Part I addresses the problem, analyzes the current situation, and lists the requirement for 
the proposed system. Part II gives the reader the necessary technological background 
information required to understand the other parts of the research. This part provides an 
overview of three-tier and multi-tier applications, server side programming technologies, 

4 



relational databases and Structured Query Language (SQL), Java and Java Database 
Connectivity (JDBC). Part III describes the design and implementation of the EAMS 
prototype. Part IV provides a conclusion to the reader. 

The following is a more detailed outline for each chapter: 

Chapter I. Introduction: This chapter introduces the problem to be addressed, 
gives a justification and purpose for this work and lists the basis structure of the thesis. 

Chapter II, Planning and Design: This chapter describes the mission and vision 
of the research, the current system, its strengths and weaknesses and the requirements of 
the proposed system. 

Chapter III. Architecture Evaluation: This chapter contains an overview of 
two-tier and three-tier architectures. 

Chapter IV. Evaluation of Server Side Technologies: In this chapter, the 
current server-side programming technologies and their advantages/drawbacks are 
discussed. 

Chapter V. Relational Databases and the Structured Query Language: This 
chapter gives an overview on Relational Databases and the Structured Query Language 
(SQL). 

Chapter VI. SQL Application Programming Interfaces and Java Database 
Connectivity: This chapter first gives a general overview on SQL Application 
Programming Interfaces and later gives detailed information on Java Database 
Connectivity (JDBC). 

Chapter VII. Design and Implementation of the EAMS: In this chapter, first a 
data model is built, and later it is transformed into a relational database. Then by going 
through the application design process, the prototype for the EAMS will be designed and 
implemented. Later the screen snapshots of the prototype are listed and commented on. 
Einally the impact of the implementation, such as the resistance to change, is identified in 
this chapter. 


5 



Chapter VIII. Conclusions: This chapter summarizes the lessons learned, and 
gives directions on how to enhance the applieation prototype and on how to guide the 
reader for future related work. 


6 



II. PLANNING AND DESIGN 


This chapter details the overall planning proeess used in the development and 
fielding of the applieation. This planning proeess ineorporates the projeet’s mission, 
vision, values and goals. The ehapter first summarizes the eurrent applieation and its 
strengths and weaknesses. Later, the requirements of the system are defined as the first 
step in the design of the applieation. 


A, HIGH LEVEL PERSPECTIVE 

1, Plan 

Information teehnology offers a variety of serviees for all stakeholders of a 
military aeademy. Implementing these serviees and applieations will help inerease the 
value of the system, reduce the paperwork and enhanee service. An “Edueational 
Administrative Management System” (EAMS) speeifieally designed for the military 
aeademy, ean meet all the stakeholders’ requirements. 
a. Mission 

Researeh, analyze, design, implement and doeument a Web-based 
“Edueational Administrative Management System” based on the defined requirements. 
This application will provide eurrent, aeeurate information, which will be available 
anywhere on a 24-hour basis in the following areas: 

• Eor Eaculty Personnel: to maintain, update and aecess the information 
about all eourses and all students. 

• Eor Department Heads: to maintain, update and aeeess information on the 
departments’ administrative tasks. 

• Eor Regiment Personnel: to maintain, update and aeeess information on 
the military and administrative tasks and the eommand of the regiment 
units. 

• Eor students: to aeeess information so they ean fulfill their aeademie 
duties and military training. 


7 



b. Vision 

The vision of the EAMS is to provide aceess to information about the 
speeific duties to reduee paperwork, wasted time and to improve the deeision-making 
proeess for the Naval Aeademy by enhancing the communication and allowing access to 
the data anytime and anywhere. 

c. Values 

The application will conform the highest standards of honesty, integrity, 
accuracy and professionalism. Information will be provided to the users in a manner that 
reflects the professional ethic of the Naval Academy with the highest reliability and 
security. 

d. Goals 

The goals of the EAMS can be summarized as follows: 

• Conveniently and consistently support the Naval Academy’s 
informational, educational, and administrative tasks and their 
requirements. 

• Providing the necessary information to the users on a need-to-know basis 
anytime and anywhere. 

• Giving value to the students by including them in the system as users, who 
will access the relevant information about their academic and military 
achievements and current situations. 

2. Current Application 

a. History and Description 

The Naval Academy started to use a LAN based, online Information 
Management system during the early 1980s. This system was a combination of small 
workstations connected to the mainframe computers. That system was so large that it 
covered the whole campus. During the mid-1990s, as the information requirements of the 
academy were changing, the system could not meet the academic and administrative 
needs. 


8 



For this reason in the late 1990s, the simple workstations were ehanged to 
Windows NT and Sun workstations, which were connected to the databases and servers. 
The workstations are stationed mostly in the registrar and administrative offices where 
the secretaries or administrative office personnel access and update the information and 
later the hardcopies are given to the related personnel per request. 

b. Strengths and Weaknesses of the Current System 

Since the information system was started during the mid-1980s, the Naval 
academy has an IT background on the educational and administrative system. The inner 
and the outer security of the information center were defined in details and maintained 
strictly. The accuracy and the consistency of the information were planned in a perfect 
manner so that no problems occurred from the beginning of the systems. 

The current system is accessed by a small number of users in specified 
locations. This ensures the security of the system. Even though all the data is available, 
only the administrative office personnel have access to the information online. Even 
though the data exists on the system, the printouts of the information are provided to 
other personnel. The need-to-know principle was achieved by minimum user access to 
the system, and minimum prints to the related personnel. 

Eor the safety of the sensitive information, such as students’ course 
grades, the faculty personnel have access to special workstations to enter the grades in the 
system. But this access is merely for entering the data. They do not possess a special 
account allowing them to receive personal information on the courses or students, such as 
the students’ photographs. The regiment personnel or the students do not have direct 
access to the system. To provide the information to the other personnel, such as regiment 
command personal or administrative faculty personnel, classic files and folders are also 
kept in the administrative offices, which creates an extra burden for the office personnel. 


9 



B, INITIAL DIRECTION 

1. The Application 

The academy is currently using Windows NT and Sun workstations. Because of 
this platform diversity in the academy, one of the main requirements of the application is 
to be implemented with a portable language, which must be platform independent. 

The new application will provide the following personnel access the system; 

• Faculty Personnel 

• Department Heads 

• Students 

• Regiment Personnel 

• Administrative Office Personnel 

The users will have specific user ID’s and passwords to access this system. Users 
will have specific privileges and according to these privileges their access and their 
system tools in the system will be different. 

2, The Database 

Even though the academy has a reliable database and no problems have occurred, 
in keeping with the project, the database technologies will be discussed and a sample 
database will be built and populated for the implementation purposes. The application 
will introduce new technologies to the academy but these technologies will work with the 
existing database. A new database is not necessarily needed. 

C. REQUIREMENTS 

1, General Application Architecture 

• The application should be designed on a Web-based architecture so that 
reliable access from anywhere on the campus can be achieved. 

• The language should be platform independent and must provide easy 

implementation of the Software Engineering concepts and principles. 


10 



providing the software reuse, objeet-oriented strueture, maintainability and 
reliability. 

• A prototype of the applieation should be provided. The later ehanges in 

the requirements and user interfaees will be made based on this prototype. 

2. User Profiles 

The applieation should provide aeeess to the following users; 

• Faeulty Members 

• Department Heads 

• Regiment Personnel 

• Students 

• Administrative Office Personnel 

3, Use Cases 

The application should perform the following use cases and functions. 
a. Faculty 

• The faculty user will access the system by entering their login ID and 
password on the login page. 

• A menu of available tools for the faculty user will be shown on the screen. 

• By selecting specific menu options, the users 

• Will see the courses that they are giving and the sections that are 
offered. 

• Will see personal information about themselves and will have the 
ability to update or change the data. 

• Will see the students taking their courses and their grades for the 
specific courses. 


11 



• Will have the ability to update the grades of the students. 

• Will see the class schedule for that semester. 

• Will see the specific announcements that are addressed to the 
faculty members. 

b. Department Heads 

The Department Heads will access the system by entering their login ID 
and password on the login page. 

A menu of available tools for the Department Heads will be shown on the 
screen. 

By selecting specific menu options, the users 

• Will see the courses offered in their department. 

• Will see the instructors in their department. 

• Will see the students who are taking the courses in their 
department. 

• Will see the grades of the students who are taking the courses from 
their department. 

• Will see their own personal information and will have the ability to 
update or change the data. 

• Will see the specific announcements that are addressed to the 
department heads. 

c. Regiment Personnel 

The Regiment personnel users will access the system by entering their 
login ID and password on the login page. 

A menu of available tools for the Regiment personnel users will be shown 
on the screen. 

By selecting specific menu options, the users 

12 



• Will see the units they are eommanding. 

• Will see the offieers’ information in their unit(s). 

• Will see the students’ personal, edueational (eourses and grades) 
and administrative (punishments, awards and the diseiplinary 
points) information in their unit(s). 

• Will see their own personal information and have the ability to 
update or change the data. 

• Will see the specific announcements that are addressed to the 
regiment personnel. 

d. Students 

• The Students will access the system by entering their login ID and 

password on the login page. 

• A menu of available tools for the Students will be shown on the screen. 

• By selecting specific menu options, the users 

• Will see the courses, they are taking and their corresponding 
faculty members. 

• Will see their grades for a specific semester. 

• Will see their company information, such as their commanders, 

punishments, awards and current disciplinary points. 

• Will see their own personal information and have the ability to 
update or change the data. 

• Will see the specific announcements that are addressed to the 
students. 

e. Administrative Office Personnel 

• These users will access the system by entering their login ID and password 

on the login page. 


13 



• A menu of available tools will be shown on the sereen. These menu 
options will be designed according to their office unit. 

• By selecting specific menu options, the user will access the necessary data 
and have the ability to update or change the information. 

• The administrative office personnel are responsible for official reports. In 
order to design these interfaces and system outputs, the requirements must 
be defined in more detail, which can only be done in the academy by 
looking at the format of the original official reports. For this reason, the 
interfaces of this user type will not be implemented in the prototype. 


14 



III. ARCHITECTURE EVALUATION 


This chapter defines the basie eoncepts of client/server arehitecture, describes the 
two-tier and three-tier arehitectures and analyzes their perspeetive benefits and 
limitations. 

A, DEFINITION 

The client/server model “entails two autonomous proeesses working together over 
a network; the elient proeesses request specific services which the server processes 
respond to and proeess” (Orfali, 1996). 

The majority of end-user applieations consist of three components: presentation, 
proeessing, and data. The elient/server architectures can also be defined by how these 
eomponents are split up among software entities and distributed on a network. Whitten 
(2001) defines the client/server arehiteeture as a solution in which the presentation, 
presentation logic, application logic, data manipulation, and data layers are distributed 
between client PCs and one or more servers. 

The term client/server dates baek to the 1980s and refers to personnel eomputers 
on a network. This arehiteeture is intended to improve usability, interoperability and 
scalability of enterprise information systems. 


B, TWO-TIER ARCHITECTURE 

Although a two-tier client/server ean be designed in several ways, we will focus 
on examining what is overwhelmingly the most common implementation. (Five styles of 
client-server arehitectures ean be found in Appendix A.) In this implementation, the three 
components of an application (presentation, processing, and data) are divided between 
two entities: the elient and the database server (Figure 1). 


15 



Services 


Request 


Services 



Figure 1. Two-Tier Architecture 

In this architecture, the presentation is handled exclusively by the client, 
processing is split between client and server, and data are stored and accessed via the 
server. The PC client assumes the bulk of the responsibility for the application 
(functionality) logic with respect to the processing component while the database engine 
handles the data intensive tasks. 

In such a data access topology, a data engine would process requests sent from the 
clients. Sending data process requests from client to server requires a tight linkage 
between the two layers. The client must know the syntax of the server, the location of the 
server, and how the data are organized and named. 

One of the advantages of a two-tier environment is the application development 
speed. In most cases, a two-tier system can be developed in a small fraction of time that it 
would take to code a comparable but less flexible legacy system. (Gallaugher, 1996) 

Since the bulk of the application logic exists on the PC client, the two-tier 
architecture faces a number of potential version-control and application-redistribution 
problems. A change in business rules would require a change to the client logic in each 
application portfolio, which is affected, by the change. Modified clients would have to be 

16 












redistributed through the network. This creates an extra burden for administrators and 
makes the update prone to error. The clients that fail to be updated will get incorrect 
information or in some cases may never get access to information on the server. 


C. THREE-TIER ARCHITECTURE 

The three-tier architecture attempts to overcome some of the limitations of the 
two-tier scheme by separating the business application into three logical components: 
presentation, application logic, and data management. These logical components are 
“clean layered” in such a manner that each runs on a different machine or platform and 
communicates with the other components via the network. (Goodyear, 2000) 

In this client/server model, all the presentation logic resides on the client, all the 
application logic resides on multiple back-end application servers, and all the data 
management logic resides on multiple back-end database servers. (Figure 2) 


Services 


User 

Interface 


Presentation 

Services 


CLIENT 
First Tier 



Second Tier 


Third Tier 


Figure 2, Three-Tier Architecture 


When a specific process or data access is required by the presentation client, a call 
is made to a middle-tier application server. This tier can perform the process or perform 
requests to the other servers as a client. 


17 















In addition to this openness stated above, several other advantages are presented 
by this arehiteeture. Having separate software entities ean allow for the parallel 
development of individual tiers by the applieation speeialists. Having experts foeus on 
eaeh of these layers ean inerease the overall quality of the final applieation. 

Modularly designed middle-tier eode components can be reused by several 
applications. Reusable logic can reduce subsequent development efforts, can minimize 
the maintenance workload, and can decrease migration costs when switching client 
applications. 

The three-tier architecture also provides for more flexible resource allocation 
(Edwards, 1999). Middle-tier application servers are portable and can be dynamically 
allocated and shifted as the needs of the organization change. Multiple server requests 
and complex data access can emanate from the middle tier instead of the client, further 
decreasing traffic. Also, since PC clients are now dedicated to just presentation, memory 
and disk storage requirements for PCs will potentially be reduced. 


a n Presentation 

P Application logic 
■ Data 

Two Tier Three Tier 


Figure 3. Comparison of Initial Development Effort (From Gallaugher, 1996) 

From the initial development effort perspective, the three-tier application takes 
longer to develop when compared with the two-tier application. (Figure 3) This is due to 
the complexity involved in coding the bulk of the application logic and the difficulties 
associated with coordinating multiple independent software modules on disparate 
platforms. In contrast, the two-tier scheme allows the bulk of the application logic to be 



18 




developed in a higher-level language within the same tool used to ereate the user 
interface (Gallaugher, 1996). 


□ Presentation 
P Application logic 
■ Data 


Two Tier Three Tier 


Figure 4, Comparison of Subsequent Development Efforts (From Gallaugher, 

1996) 

Subsequent development efforts may see three-tier applications deployed with 
greater speed than the two-tier systems. (Figure 4) This is entirely due to the amount of 
the middle-tier code, which can be reused from the previous applications (Gallaugher, 
1996). 

Table 1 shows a more detailed comparison of two-tier and three-tier applications 
(Edwards, 1999). 

When the middle tier is divided in two or more units with different functions, the 
architecture is often defined as multi-tier (N-tier). A Web-based computing system is an 
example for a multi-tier architecture. In these systems, presentation and the presentation 
logic layers are implemented in client-side Web browsers using the content downloaded 
from a Web server. The presentation logic layer then connects to the application logic 
layer that runs on an application server, which subsequently connects to the database 
server(s) on the backside. 




19 




COMPARISON OF TWO-TIER AND THREE-TIER ARCHITECTURE 

No 

Property 

Two-tier 

Three-tier 

1 

System 

administration 

Complex (more logic on the 
client to manage) 

Less complex (the application can be centrally 
managed on the server) 

2 

Security 

Low (data-level security) 

High (fine tuned at the service or method level) 

3 

Encapsulation 
of data 

Low (data tables are exposed) 

High (the client invokes services or methods) 

4 

Performance 

Poor (many SQL statements are 
sent over the network; selected 
data must be downloaded for 
analysis on the client) 

Good (only service requests and responses are sent 
between the client and server) 

5 

Scale 

Poor (limited management of 
client communications links) 

Excellent (concentrates on incoming sessions; can 
distribute loads across multiple servers) 

6 

Application 

reuse 

Poor (monolithic application on 
client) 

Excellent (can reuse services and objects) 

7 

Ease of 
development 

High 

Getting better 

8 

Server to server 
inffastracture 

No 

Yes (via server side middleware) 

9 

Legacy 

application 

integration 

No 

Yes (via gateways encapsulated by services or 
objects) 

10 

Internet support 

Poor (internet bandwidth 

limitations make it harder to 
download fat clients and 
exacerbate the already noted 
limitations) 

Excellent (thin clients are easier to download as 
applets or beans even as HTML pages; remote 
service invocations distribute the application load to 
the server) 

11 

Heterogeneous 
database support 

No 

Yes (three-tier applications can use multiple 
databases within the same business transactions) 

12 

Rich 

communication 

choices 

No (only synchronous, 

connection-oriented calls) 

Yes (supports connection oriented calls, 
connectionless messaging, queued delivery, publish- 
and-subscribe, and broadcast) 

13 

Hardware 

architecture 

flexibility 

Limited (one has a client and a 
server) 

Excellent (all three tiers may reside on different 
computers, or the second and third tiers may both 
reside on the same computer; with component-based 
environments, you can distribute the second tier 
across multiple servers as well) 

14 

Availability 

Poor (cannot fail over a backup 
server) 

Excellent (can restart the middle tier components on 
other servers) 


Table 1. The Comparison of Two-Tier and Three-Tier Architectures (From Edwards, 
1999) 

D, CONCLUSION 

In the year 2000, enterprise information systems require good performanee, high 
security, reliability, less complex administrative tasks, and better application reuse. 


20 




Contrary to two-tier architecture, in the three-tier architecture only service 
requests and responses are sent between the client and server. Instead of sending many 
SQL statements and downloading the whole selected data for analysis, three-tier 
architecture offers better performance. 

System security in the two-tier environment can be complicated since a user may 
require a separate password for each SQL server access. The proliferation of end-user 
query tools can also compromise database server security. But three-tier architecture 
enables us to develop more secure applications. Since the system is divided into parts, 
which can be developed separately, each component can use a unique protocol 
independent to other protocols. Even if unwanted users gains access to the Web server, 
they would not be able to get direct access to the database server and the confidential 
data. Also adding firewalls between the clients and the Web server will enhance the 
security. 

In the three-tier architecture, the experts can develop and maintain each 
component (tier) separately. As the data server was developed and configured by the 
database administrators, the Web masters can configure Web server. This reduces the 
complexity of administrative tasks. 

In the three-tier architecture, modularly designed middle-tier code components 
can be re-used by several applications. Reusable logic can reduce subsequent 
development efforts, minimize the maintenance workload, and decrease migration costs. 

At this point, the three-tier architecture is the best model that satisfies the needs 
for an enterprise information system. At a functional level, the architecture of an 
enterprise information system can be made of four components: client, Internet firewall, 
Web server (application server) and, database server. (Figure 5) 


21 




Figure 5. An Architecture Design Example for an Enterprise Information System 

(After Goodyear, 2000) 


The remote clients connect to the Web server via the internet/intranet. The Web 
browser downloads the necessary client software to the client. The Web browser (first 
tier) sends a Web page request or data request to the Web server. The Web server works 
as a middle tier, and it takes the page request and ships the data request to the server 
extension program. Then server extension program accepts the requests and converts 
them to a form that the database server (third tier) can interpret. For the next step, the 
database server performs the specified task, such as query, insert or update and returns a 
result set to the server extension program. The server extension program converts the 
database result to a form that the Web browser can accept (e.g.; HTML), and finally it 
passes the result set to the Web server, which passes the final result to the Web browser. 
(Goodyear, 2000) 


22 









IV. EVALUATION OF SERVER-SIDE TECHNOLOGIES 


This chapter defines the role of the server-side programs and the teehnologies 
used to ereate those programs. Later an evaluation of the eurrent technologies will be 
presented. 

A detail background on Web architecture and its components is available in 
Appendix B. 


A, SERVER-SIDE TECHNOLOGIES 

Many client requests can be satisfied by sending baek pre-built documents, and 
these requests would be handled by the server itself In many cases, however, a static 
result is not suffieient and a unique page/response must be generated for each request. 
Some of the reasons for this are 

• The Web page is based on data submitted by the user, sueh as the 
order/confirmation page. 

• The Web page is derived from data that changes frequently, sueh as new 
headlines generated on a daily or hourly basis. 

• The Web page uses information from a database or other server-side 
sources. 

In these eases, we must create the Web pages dynamically. At this point, server- 
side programs help us. 

In this section we will study the technologies that enable us to ereate these 
programs. These programs run on a Web server, acting as a middle layer between a 
request coming from a Web browser or other HTTP client and databases or applieations 
on the HTTP server. Their eommon responsibilities are 

• Read Any Data Sent by the User: These data are usually entered in a 
form on a Web page, but could come from a Java applet or a custom 
HTTP client. 


23 



• Look Up Any Other Information about the Request That Is 
Embedded in the HTTP Request: Details about browser capabilities, 
cookies, the host name of the requesting client are all included in this 
information. 

• Generate the Results: The process of generating the results may require 
talking to a database, executing a remote method invocation (RMI) or 
common object broker architecture (CORBA) call, invoking a legacy 
application, or computing the response directly. 

• Format the Results inside a Document: This function mostly involves 
embedding the information inside an HTML page. 

• Set the Appropriate HTTP Response Parameters: This tells the 
browser what type of document is being returned (e.g. HTML), setting 
cookies and caching parameters and other tasks. 

• Send the Document Back to the Client: This document may be sent in 
text format (HTML), binary format (e.g. GIF images), or even in a 
compressed format like gzip that is layered on top of another underlying 
format. 

Every program is not accessible to the Web server. In order to accomplish this, a 
program must have the following properties: 

• The program should be able to be invoked by the Web server. When a 
request is issued from a user, the Web server must be able to locate and to 
execute the requested program. 

• The Web server must be able to pass any form data to the program. When 
the Web server invokes the program, it needs a way to pass the HTTP 
request. 

• Once the program is invoked there must be a standard entry point. 


24 



• After the program has proeessed the input data, it has to paekage the 
results and send them baek to the Web server, whieh will, in turn, send 
them baek to the Web browser. 

The eurrent popular server-side teehnologies are Common Gateway Interfaee 
(CGI), Web Server Applieation Programming Interfaees (API), Active Server Pages 
(ASP), Java Servlets and Java Server Pages (JSP). (Ayers, 2000) 

1. Common Gateway Interface (CGI) 

The Common Gateway Interface (CGI) is a standard way for interfacing external 
applications with Web servers. A plain HTML document that the Web server retrieves is 
static, which means it exists in a constant state: a text file that does not change. A CGI 
program, on the other hand, is executed in real-time so that it can output dynamic 
information. (Comer, 2001) 



Figure 6, Database Connection with CGI 


For an example, assume that we want to connect our database to the World Wide 
Web to allow people to query it. (Figure 6) Basically, we need to create a CGI program 
that the Web server will execute to transmit information to the database engine and 
receive the results back again and display them to the client. This is an example of a 
gateway where the CGI originated. (NCSA, 1999) 


25 








A CGI program can be written in any language that allows it to be exeeuted on the 
system, sueh as C, C++, PERL, TCL, Unix shell. Visual Basic. 



Figure 7, Creation of an Entire New Process for Each Request in CGI (From 

Ayers 2000) 

The greatest disadvantage of the CGI is that for each client request, the Web 
server creates an entirely new process (Figure 7). Each process consists of its own set of 
environment variables, a separate instance of which runtime environment is required, a 
eopy of the program and an alloeation of memory for the program to use. It can be 
difficult to imagine what might happen to a server when a large number of requests are 
reeeived simultaneously. This will certainly affect the respond speed and the performanee 
of the hardware. (Ayers, 2000) 

2, Web Server APIs (ISAPI, NSAPI) 

Because of the ineffieieneies of the CGI, some firms developed their own 
Applieation Programming Interfaces (API) to allow developers to write server side 
programs as shared libraries. Mierosoft’s Internet Server API (ISAPI) and Netseape’s 
Netscape API (NSAPI) are well-known APIs. These libraries are designed to be loaded 
into the same proeess as the Web server and ean service multiple requests without 
ereating additional processes. (Ayers, 2000) 


26 





INTERNET 


HTTP Server 


HTTP request/response 

1. Browser makes a GET or POST request 

2. HTTP server receives the original request 

3. ISAPI filters process the HTTP server events 

4. If an ISAPI filter is required to process the URL, it 
is called and the ISAPI server returns a valid HTTP 
response 

5. Browser receives the data, parses it, and then 
displays the results. 


ISAPI Filter 


Q 


ISAPI Server 


Local / Remote 
File System / Data 


Figure 8. Request-Response Flow Diagram for APIs 


Instead of creating new processes, the ISAPI server creates a thread pool when the 
server is initialized. Creating a thread take much less memory than creating a new 
process. A free thread from this thread pool serves the incoming connection. If the 
threads in the thread pool are all in use, the server can create additional threads to handle 
the waiting connections. 

With ISAPI, the server calls the ISAPI DLL's entry point and leaves processing 
up to the extension or filter. Once processing is complete, the ISAPI DLL does any 
necessary cleanup and returns control of the thread to the server. 

While this approach provides an efficient extension to the Web server, the APIs 
also have a few problems. (Ayers, 2000) 

• Platform Dependent: Since these APIs are specific to a particular 
platform, any programs written using them can only be used on that 
platform. It would need extra tasks to move these programs into a different 
environment. 

• Thread Safe Requirement: Since these libraries are accessed by multiple 
users simultaneously, they must be thread-safe. This means that they must 
be carefully developed about accessing global and static variables. 


27 




• Access Violation Danger: If a server program causes an access violation, 
since it is within the same process as the Web server, it has the potential of 
crashing the entire Web server. 

3, Active Server Pages (ASP) 

Another Web technology from Microsoft is Active Server Pages (ASP). ASP 
combines HTML, scripting, and server side components in one file with asp extension. 

Such a file can be written using HTML, Jscript, and VBScript. The active server 
pages can also access the server components via the scripting. Such components can be 
written in any language as long as it presents a Microsoft’s Component Object Model 
(COM). Executing everything on the server ensures that the pages are browser- 
independent, limited only by what the server can do. 



The steps of running an ASP page can be summarized as follows: (Figure 9) 

• The Browser sends a request for the ASP file to the Web server. 

• The Web server recognizes the request for an ASP page. 

• The Web server retrieves the ASP file from the disk or memory. 

• The server sends the file to the ASP engine. 

• The ASP page is processed from top to bottom as the scripting code 

encountered is executed and the result is produced as an HTML fide. 


28 








• The resulting HTML file is sent baek to the client browser. 

• The HTML file including the result is interpreted by the Web browser and 
displayed. 

One real disadvantage of Active Server Pages is that they can only be used with a 
Microsoft Web server, Internet Information Server (IIS) or Personal Web Server (PWS). 
While there are ports to other platforms and Web servers, the lack of COM support 
reduces their effectiveness. (Ayers, 2000) 

4, Java Servlets and Java Server Pages 

Servlets are Java technology’s answer to Common Gateway Interface 
programming. A Java Servlet is a server-side program that services HTTP requests and 
returns results as HTTP responses. 

Servlets are quite similar to Java applets. A servlet is a non-visual applet that runs 
on the Web server. It has a lifecycle similar to an applet and also runs inside a Java 
Virtual Machine (JVM). But servlets are for the server side, not for browsing, and they 
have extended functionality and more security features than an applet. 

When a request for a specific servlet comes from a user, a server will use a 
different thread and then process the individual request. Since the threads use fewer 
resources, this gives servlets an advantage. Another benefit for the servlets is that because 
the servlet runs inside a JVM, it can easily be ported to other platforms supporting Java. 


29 



HTTP Request 



INTERNET 


HTTP Respond 


>• 


Web browser 


Web 

Server 


Request 

-► 




Dynamic 
HTML Files 



Figure 10, Request-Respond Flow Diagram for Java Servlets 


When a user makes a request via HTTP, the Web server receives the request and 
forwards it to the servlet. If this is the first time the servlet will be used, the Web server 
will load the servlet into a Java Virtual Machine and execute it. The servlet receives the 
HTTP request, reads input parameters, and processes them accordingly. A response will 
be created and sent back to the server. The Server forwards the response to the client. 

The Java Server Pages (JSP) is an extension of the Java Servlet technology. They 
are similar to Microsoft’s Active Server Pages (ASP). A Java Server Page contains 
HTML, Java code and Java beans components. When a user requests a JSP file, a Web 
server will first generate a corresponding servlet, unless one already exists. The Web 
server then invokes the servlet and returns the resulting content to the user. JSPs provide 
a powerful and efficient dynamic page assembly mechanism that benefits from the 
advantages of the Java platform. (Ayers, 2000) 


30 








Figure 11. The First Call Initializes the JSP and Subsequent Requests Invoke Its 

Output, 

By separating the page logic from its design and display, and by supporting a 
reusable component-based design, the JSP technology makes it faster and easier to build 
Web-based applications (Hall, 2001). 

B, COMPARISONS OF THE TECHNOLOGIES 

Until this point, each server-side technology was studied with its advantages and 
disadvantages. In this section we will compare these technologies from the view of 
security, performance, platform independence, reusability, and efficiency. 

1, Security Issues 

Security is an important issue in designing a Web-based application. The key 
security issues can be summarized as follows: 

• Can the server run untrusted code or prevent it from accessing other data 
on the server? 

• Is it possible to limit damage to the server caused by an application (such 
as wasting memory or causing a system crash) 

As traditional CGI programs are often executed by general purpose operating 
system shells, programmers must be careful to filter out characters (such as back quotes 
and semicolons) that are treated specially by the shell. Another security vulnerability is 


31 






that some CGI programs and ASP files are processed by languages that do not 
automatically check bounds (such as array or string bounds or memory 
allocation/reallocation as in C and C++). This is a security hole for most of the system 
crashes. (Ayers, 2000) 

For servlets, the Java Virtual Machine (JVM) can restrict the environment 
available to the servlet, so it cannot access other critical data from the Web server. Also, 
JVM provides a greater degree of control over application behavior than the other 
approaches because most of the memory-checking protection features and garbage 
collector are central parts of the Java programming language. This fills the gap against 
system crashes. (Hall, 2001) 

2, Performance 

With traditional CGI, a new process is started for each HTTP request. This means 
for “N” number of requests there will be again “N” number of CGI programs running in 
the memory. Also when a CGI program finishes handling a request, the program 
terminates. This makes it difficult to cache computations and to keep database 
connections open. If a communication with a database is needed, for each CGI request, a 
new connection is established. (Sun, 2000) 

Since servlets are developed using Java, they provide superior performance 
compared to ASP, which uses interpreted VBscript or Jscript languages. With servlets, 
the Java Virtual Machine keeps running and handles each request using a lightweight 
Java thread, not a heavyweight operating system process as in CGI. As the servlets 
remain in memory even after they complete a response, it is straightforward to store 
arbitrarily complex data between requests, and the connections can be kept open. As a 
result Java servlets use less system resources, scale better and provide improved 
performance. 

3. Platform Independence 

ASP and CGI are basically Microsoft technologies, and they rely on Microsoft, 
and APIs are dependent to their Web server manufacturer. Even though there are some 
commercial off-the-shelf (COTS) products on the market, they require extra software 
support. CGI is supported by different Web servers, but because it uses shell commands. 


32 



a CGI program that uses Unix shell eommand, must be redesigned if one wants to move 
it to a Windows maehine. 

In contrast Java servlets and Java server pages like their predecessor, Java 
programming language, are designed to be platform and server independent. One can 
easily transfer one’s application from one platform to another. (Hall, 2001) 

4, Reusability and Ease of Maintenance 

Code reuse is an important feature of software engineering and programming 
(Pressman, 2001). For most developers, it is easier to read someone else's Java code and 
determine what that person has done than to read a Perl script. Java portable application 
components (utility classes or Java Beans) that perform specific tasks can be reused. 
Developers can create customized JSP tag libraries to distribute reusable functions to 
page authors. 

Time spent maintaining an application contributes to its ongoing cost. Differences 
exist between Perl applications and the Java Servlet technology-based solutions. These 
differences are due to the nature of the Java language. As an inherently object-oriented 
language, Java is simpler to maintain than Perl and ASP (as a mixture of scripting 
languages and HTML) (Hall, 2001). 


D, CONCLUSION 

At this point we must ask, “What kind of a technology are we looking for? And 
what are the features that we want from a server-side program?” From this perspective, 
one determines that we need 

• A portable technology that provides the flexibility to change the 
application environment easily. 

• A reliable language that provides us trust and robustness, 

• A technology that is cost effective, 

• A technology that provides the needed level of security, 

• A technology that provides the needed performance. 


33 



As Java is built on the principle of “build once, run everywhere,” therefore it can 
overcome cross-platform obstacles. A future change in the configuration of the 
architecture or system environment can affect the application only at a minimum level. 
Thus Java is portable. (Hall, 2001) 

Java emphasizes early checking for possible problems, later dynamic checking 
and eliminates situations that are error-prone. In other languages, while many problems 
would show up at runtime, such problems are detected at compile time by the Java 
compiler. This makes Java reliable. (Ayers, 2000) 

Tools to develop a Java servlet application can be downloaded from the Sun 
homepage at no cost. Even though environments and products (Web server, database 
server) support Java as configured, adding Java-servlet support costs little. This is in 
contrast to many of the other competitors, such as Microsoft ASP, which require an initial 
investment to purchase a proprietary package. To increase the portability of these tools, 
one needs extra tools. Chilisoft is one example of a company offering such solutions for 
Microsoft ASP. But this also increases the cost. Therefore Java is cost effective. 

As there are no shell commands in Java servlets and the unique error and security 
protection features (such as memory protection) are a central part of the Java 
programming language itself, Java ensures that a programmer cannot write subversive 
code for applications. This makes Java secure. (Ayers,2000) 

By using threads, instead of system processes for each request, Java servlets use 
less system resources, scale better and provide improved performance. So Java is 
efficient. (Hall, 2001) 

Under these circumstances, Java servlets and JSP appear to be the best choice for 
a Web-based application. 


34 



V. RELATIONAL DATABASES AND THE STRUCTURED 

QUERY LANGUAGE 


This chapter provides a brief overview of Relational Databases and Struetured 
Query Language (SQL). 

A, RELATIONAL DATABASES 

1. Database 

A database is a eolleetion of data, deseribing the aetivities of one or more related 
organizations (Ramakrishnan, 2000). Databases are struetured to faeilitate the storage, 
retrieval, modifieation, and deletion of data in eonjunetion with various data-proeessing 
operations. A database is restrieted to some implieit properties; it represents real world 
aspect, consists of a coherent eolleetion of data that has inherent meaning, and is 
designed, built and populated for a speeifie purpose (Elmasri, 1994). For example, the 
data that are related to the inventory of a Naval Supply Center eould be stored in a 
database. 

2. Database Management System 

Database Management System or DBMS is an application, designed to assist in 
maintaining and using large eolleetions of data (Ramakrishnan, 2000). A DBMS enables 
the user to perform the following operations: 

• Define a Database: This involves speeifying data types, struetures, and 
eonstraints for the data to be stored in the database. 

• Construct a Database: This is the proeess of storing the data on a storage 
medium (sueh as magnetie disk, tape or optieal disk) eontrolled by the 
DBMS. 

• Manipulate a Database: This includes functions such as querying the 
database, updating the database and generating reports from the data. 


35 



3, DBMS vs. File Systems 

Database technology involved overcoming the limitations of traditional flat files. 
In a fiat file system, each user designs and implements the files needed for a specific 
application. In a DBMS, the database forms a single repository that is defined once and 
accessed by multiple users, each of whom may see a different view of the database. The 
data must also be restored to a consistent state if the system crashes while changes are 
being made. Neither the users nor the programmers need to worry about how data are 
physically stored in the database. 

By storing the data in a DBMS, rather than as a collection of operating system 
files, we can use the DBMS features to manage the data in a robust and efficient manner 
(Ramakrishnan, 2000). 

A DBMS provides several advantages by 

• Reducing data duplication, 

• Restricting authorized access, 

• Defining and enforcing integrity constraints, 

• Providing tools for backup and recovery, 

• Enabling the database administrator to enforce standards, 

• Reducing the application-development time, 

• Permitting changes to the structure as the requirements change, 

• Making the data available to the authorized users in an up-to-date state 
(Elmasri, 1994). 

4. Data Models and Relational Data Model 

A data model is a collection of high-level data description constructs that hide 
many low-level storage details. A DBMS allows a user to define data to be stored in 
terms of a data model (Ramakrishnan, 2000). 

Database engineers define five different types of databases: 

1. Relational, 


36 




2. Hierarchical, 

3. Network, 

4. Object-oriented 

5. Object-relational model. 

A popular type in use today is the relational model (Ramakrishnan, 2000). This is 
because they are built on a provable mathematical foundation that hastened the process of 
developing a generalized query language (Taylor, 1999). Therefore the focus of this 
chapter and the implementation of our prototype will be the relational database model. 

Elmasri (1994) defines a data model, as a set of concepts that can be used to 
describe the structure of the database. From this perspective, a relational-data model 
represents the database as a collection of relations, which can be thought of as a set of 
records. Each relation is defined as a “table of values.” Within a table, each row is called 
a tuple and represents a unique value in the database. 

In the relational model each table must have a unique column called a primary key 
that is used to identify tuples in the relation. Any column that is part of a primary key 
cannot be null. This rule is referred to as entity integrity. The following table illustrates a 
sample relational database table of a hypothetical bookstore to track books. 


BOOKS 

ISBN 

Title 

Author 

Publisher name 

Pubdate 

Price 

012-23001-34 

Database Management Sys. 

Ramakrishnan 

McGraw Hill 

2000 

$90.00 

023-23002-65 

JDBC and Java 

Reese 

O’Reilly 

2001 

$45.00 

982-30030-87 

XML databases 

Williams 

McGraw Hill 

2000 

$65.00 


Table 2, Example Database Table for Books 

In Table 2, each column represents a different attribute of a book. Each row 
represents a different book. An ISBN attribute is unique for each book. Therefore it is 
chosen as a primary key. 

Foreign keys are used to define relationships between tables. A foreign key in one 
table is a reference to a primary key in another table. A row that refers to another row 

37 




must refer to an existing row in that relation. This rule is referred as referential integrity 
(Ramakrishnan, 2000). Now consider the following table. 


PUBLISHERS 

Publisher name 

Phone 

Pubeity 

McGraw Hill 

407-3567484 

Los Angeles 

O’Reilly 

888-9082733 

Chieago 


Table 3, Example Database Table for Publishers 

In the BOOKS table, the foreign key was Publisher name, which refers to a 
unique row of data in the PUBLISHERS table. Publisher name is the primary key in the 
PUBLISHERS table. 

A relationship can be one of these forms; One-to-One, One-to-Many, and Many- 
to-many. “One-to-one” means that for every occurrence of an instant of data in a table, 
only one instance will occur in another. “One-to-Many” means that for every occurrence 
of an instant of data in a table, many instances of data may occur in the other table 
(Ramakrishnan, 2000). Eor example, if we look at the relationship between the 
PUBEISHERS and the BOOKS, we will see that for every Publisher name in 
PUBEISHERS, there may be several books in the BOOKS table. 



Figure 12, Relationships Diagram for Sample Tables 

Eigure 12 shows the relationship diagram for the sample tables created in MS 
Access. These diagrams are used to describe the relations of the tables visually. In this 


38 

























figure, we can see the primary keys of each table and the relationship between them 
(many-to-one). 

B, STRUCTURED QUERY LANGUAGE 

Structured Query Language (SQL) (pronounced sequel) was originally developed 
at IBM in the SEQUEL-XRM and System-R projects in 1977. Almost immediately, other 
vendors introduced DBMS products based on SQE. This made the SQL a standard for 
relational database industry (Ramakrishnan, 2000). 

SQL is a database language used to extract data from relational databases. 
Relational database users quickly learn this language because it expresses its logic with 
English-like syntax. SQE consists of a set of standard commands that can be understood 
by all compliant Relational Database Management Systems (RDMS). 

1. SQL Statements/Commands 

SQL commands are divided into categories. Data Definition Language (DDL) 
statements and Data Manipulation Language (DML) statements (White, 1999). 

a. Data Definition Language (DDL) 

This subset of SQL supports the creation, deletion, and modification of 


definitions for tables. The DDL also provides commands to specify access rights or 
privileges to tables or views. The following tables show the common commands to create 
or modify tables and other database objects (White, 1999). 


SQL Command 

Description 

CREATE TABLE 

Create a table with the name of the table and columns provided by the user. 

DROP TABLE 

Delete a table definition and all rows in the table. 

ALTER TABLE 

Change the definition of a table. It is also possible to add or drop a column, 

change a column definition or add/remove constraints defined for the table. 


Table 4. A List of the Most Used SQL Commands of DDL 


39 




SQL Command 

Syntax 

Example 

CREATE TABLE 

CREATE TABLE <tablename> 
(col-def, ...., col-def, tab-constr, 

.. .tab-constr); 

To create the BOOKS table: 

CREATE TABLE BOOKS ( 

ISBN number(5) primary key, 

Title char (30), 

Author char(30). 

Publisher name char (30), 

Pub date date. 

Price number(3,2)); 

DROP TABLE 

DROP TABLE <tablename> 

To delete the whole BOOKS table: 



DROP TABLE BOOKS; 

ALTER TABLE 

ALTER TABLE <tablename> 

To add a new column to the BOOKS table 
as book Book edition: 



ALTER TABLE BOOKS ADD 
Book edition char(20); 


Table 5. Examples on the Most Used SQL Commands of DDL (The Examples are 
Implemented on the Sample Tables of BOOKS and PUBLISHERS.) 

b. Data Manipulation Language (DML) 

This subset of SQL allows users to pose queries and to insert, delete, and 


modify rows. The following tables shows the eommon commands for these purposes 
(Reese, 2000). 


SQL Command 

Description 

SELECT 

This is the most frequently used SQL command and is used to query the database 

and to display selected data to the user. It mostly consists of three main clauses: 

SELECT, FROM, and WHERE. Normally SEEECT keyword is followed by a list 

of columns. FROM keyword is followed by a list of tables and WHERE keyword is 

followed by a list of search conditions. 

INSERT 

Used to add a row into a table that already exists. 

UPDATE 

Used to modify a record or more of data that meets a specified condition. 

DELETE 

Used to delete a row or more of data that meet the condition specified in the 

WHERE clause. 


Table 6, A List of the Most Used SQL Commands of DML 


40 





SQL Command 

Syntax 

Example 

SELECT 

SELECT <expression> 

FROM <TABLENAME> 
WHERE <search condition>; 

To list the name and the author of the books 
published by the “McGraw Hill”: 

SELECT Title, Author 

FROM BOOKS 

WHERE Publisher name = ‘McGraw Hill’; 

INSERT 

INSERT INTO <tablename> 
[(column,.. .column)] 

VALUES (expression, 

...expression); 

To add a new publisher to the publishers to the 
PUBLISHERS table: 

INSERT INTO PUBLISHERS 
(Publiher name,Phone,Pub city) 

VALUES (‘Wrox’, ‘800-786453’, ‘New York’; 

UPDATE 

UPDATE <tablename> 

SET <column> = <expression> 
[WHERE <search-condition>]; 

To change the price for the book with ISBN 
“012-23001-34”: 

UPDATE BOOKS 

SET Price = ‘$35’ 

WHERE ISBN = ‘012-23001-34’; 

DELETE 

DELETE FROM <tablename> 
[WHERE <search-condition>]; 

To delete the book record from the BOOKS 
with the name “XML databases”: 

DELETE FROM BOOKS 

WHERE Title = ‘XML databases’; 


Table 7. Examples on the Most Used SQL Commands of DML (The Examples are 
Implemented on the Sample Tables of BOOKS and PUBLISHERS.) 


2. How SQL is Used 

There are a variety of ways to use SQL to define and manipulate data in a 
Database Management System (Ramakrishnan, 2000). 

One way to define and manipulate data in a DBMS is to embed SQL statements in 
a high level programming language. This is called as Embedded SQL (ESQL). Embedded 
SQE allows programmers to place SQE statements into the host language. These 
statements are identified within the host language by marking their starting and ending 
points with special delimiters. When compiling a program with embedded SQE 
statements, a precompiler translates these statements into equivalent host language source 

41 




code. After this preeompiling, the host language eompiler eompiles the resulting souree 
eode (Ramakrishnan, 2000). 

Another way to exeeute SQL statements is ealled Stored Proeedures. A stored 
proeedure is a predefined and eompiled proeedure that is stored in the database and ean 
be used by the elienf s applieations and ean be called by name (Davidson, 2001). 

Stored proeedures have many benefits. For example, onee they are exeeuted for 
the first time, there is no need to parse, optimize, or eompile these stored proeedures 
again. For this reason, stored proeedures are fast in elient/server environment. The stored 
proeedures eontain multiple queries, but to execute these stored proeedures only one line 
is neeessary. The parameters are passed to a stored proeedure enabling different elients to 
aeeess the same stored proeedure. 

Sometimes instead of exeeuting predefined SQL queries, we ean need to obtain 
the query from the user at the run time. Sueh an application is also available with SQL. 
This is ealled Dynamie SQL. Dynamie SQL features allow a query to be eonstructed (and 
executed) at the run time (Ramakrishnan, 2000). 

Another alternative to embedded SQL is to use a eallable SQL Applieation 
Programming Interfaee (API) for database aeeess. An API does not require a preeompiler 
to eonvert SQL statements into a high-level language, which can then be eompiled and 
executed on the database. While embedded SQL is DBMS-independent only at the source 
level, applieations using SQL APIs are DBMS-independent both at the souree eode and 
executable level. The SQL Aeeess Group Call Level Interfaee (SAG CLI) speeifies a 
eommon API for aeeessing multiple databases (Ramakrishnan, 2000). Open Database 
Conneetivity (OBDC) and Java Database Conneetivity (JDBC) are some of the well- 
known APIs for aeeessing multiple databases. APIs and JDBC will be explained in 
Chapter V. 


C. SUMMARY 

A Database Management System is software that supports the management of 
large eolleetions of data. Sueh a system provides effieient data aeeess, data independenee. 


42 



data integrity, security, support for concurrent access, and recovery from system failures. 
Compared to using operating system files, using a DBMS has many advantages. 

SQL is a structured query language that enables high-level access and 
modification of the data. SQL is easy to learn and to use. The SQL can be used directly 
on top of a database, embedded in a high level language or predefined and compiled 
procedures stored in the database. 


43 



THIS PAGE INTENTIONALLY LEET BLANK 


44 



VI. SQL APPLICATION PROGRAMMING INTERFACES AND 
JAVA DATABASE CONNECTIVITY 


This chapter gives a brief explanation of SQL Applieation Programming 
Interfaces (API) and current APIs. Later a more detailed overview on Java Database 
Conneetivity is provided. 

A, SQL APPLICATION PROGRAMMING INTERFACES 

In Chapter IV, it was stated that another alternative to Embedded SQL was to use 
the eallable SQL Applieation Programming Interfaee (API) for database aeeess. In 
eontrast to embedded SQL, SQL APIs allow a single exeeutable to aeeess different 
DBMS without reeompilation (Ramakrishnan, 2000). 

To aeeess SQL from applieations, the SQL Aeeess Group (SAG) developed a 
standard Call-Level Interfaee (CLI). The CLI deseribes how SQL statements are issued 
from a programming language and how the results are bound to program variables. 

The SAG CLI speeifies a eommon API for aeeessing multiple databases. SAG 
APIs are based on dynamie SQL and support; Database eonneetion requests through a 
loeal driver, SQL preparation requests, execution requests, statement termination 
requests, connection termination requests. SAG merged with X/open in 1995 and still 
eontinues its aetivities as X/open SQL Aeeess Group. 

Open Database Conneetivity (ODBC) is a data-aeeess standard developed by the 
Mierosoft Corporation as an extended version of the SAG CLI. In addition to SAG CLI’s 
basie functionality, ODBC provides methods to retrieve information about the database 
and to handle multimedia data types, and can connect to multiple kinds of databases on 
different platforms. But as the applieations ereated using ODBC will not be portable to 
other platforms without eode modifications and as the ehanges in the driver software API 
may require reeompilation of eode, ODBC has some disadvantages. Beeause of these 
drawbaeks of ODBC, JDBC was developed by Sun Mierosystems as a low-level API for 
invoking SQL eommands direetly on different vendor databases. 


45 



Later Microsoft introduced new APIs beyond ODBC such as OLE (Object 
Linking and embedding) DB, ADO (ActiveX Data Objects), RDS (Remote Data 
Service), and UDA (Universal Data Access). Still the current version of JDBC, JDBC 2.0 
API contains extra features not found in these APIs (White, 1999). 


B, JAVA DATABASE CONNECTIVITY 

The JDBC is a high-level Application Programming Interface (API) for accessing 
any kind of tabular data. JDBC offers a generic SQL database access mechanism that 
provides a consistent interface to a variety of Relational DBMSs. JDBC abstracts the 
vendor specific details and generalizes the most common database access functions. The 
result is a set of methods formerly contained within the Java.sql and Java.text packages. 
This enables the developer to write database applications using a pure Java API. These 
methods can be used on any database providing JDBC connectivity through a vendor 
specific JDBC driver. If the developer needs a switch on a database, the written code can 
be kept as it is, one need only change the database driver (Ayers, 2000). 

A JDBC driver is what the Java Virtual Machine (JVM) uses to translate the 
generalized JDBC calls into the vendor specific database calls that the database will 
understand. These drivers are Java classes and are loaded at runtime. This allows for 
maximum flexibility when deploying applications that may access databases from 
multiple vendors. JDBC drivers exist for nearly most of the databases. Typically the 
database vendor supplies the JDBC driver, but third party JDBC drivers can also be used. 

1. JDBC Driver Types 

Based on the architectural relationship between the application and the data 
source, JDBC drivers are classified into four types: (Ramakrishnan, 2000). 

• Type 1: Bridges 

• Type 2: Direct Translation to the Native API 

• Type 3: Network Bridges 

• Type 4: Direct Translation over Sockets 


46 



a. Type 1: Bridges 

This type of driver translates JDBC function calls, into function calls of 
another API that is not native to the DBMS. An example is a JDBC-ODBC bridge. In this 
case, the application loads only one driver, namely the bridge. For instance, a Microsoft 
Access database can only be accessed using the JDBC-ODBC Bridge. 



According to Ayers (2000), accessing ODBC data sources using JDBC is 
not a very efficient solution. Not only must the system pass the database call through 
multiple layers, but it also limits the functionality of the JDBC code wherever the ODBC 
driver can handle this operation. 

b. Type 2: Direct Translation to the Native API 

This driver translates JDBC function calls directly to method invocations 
of the API of one specific data source. It is similar to the first type, but here it has one 
less layer (no ODBC translation layer is needed). The driver is dynamically linked and is 
specific to the data source. The database will translate the request and send its results 
back through the API, which will forward them back to the JDBC driver. The JDBC 
driver will format the results to conform to the JDBC standard and return them to the 
program. 


47 











Figure 14, An Example Architecture Using Type 2 JDBC Driver (From Ayers, 

2000) 

c. Type 3. Network Bridges 

The driver talks over a network to a middle-ware server that translates the 
JDBC requests into DBMS-speeifie method invoeations. The Java program sends a JDBC 
eall through the JDBC driver and straight to the middle tier without translation. The 
middle tier then handles the request using another JDBC driver to eomplete the request. 
The only problem with this is that the middle tier may be using a Type 1 or Type 2 
drivers to talk to the database (Ayers, 2000). 



Figure 15, An Example Architecture Using Type 3 JDBC Driver (From Ayers, 

2000) 

d. Type 4: Direct Translation over Sockets 

Here, instead of ealling the DBMS API directly, the driver communicates 
directly with the DBMS through sockets. According to Ayers (2000), this is the most 


48 







efficient method of accessing a database. All of the major database vendors provide Type 
4 JDBC drivers for their databases. 



Figure 16, An Example Architecture Using Type 4 JDBC Driver (From Ayers, 

2000) 

White (1999) summarizes these four types in a simple table. The table 
uses the following definitions for types of network connections 

• “Direct” is a connection that a JDBC client makes directly to the DBMS 
server, which may be remote. 

• “Indirect” is a connection that a JDBC client makes to a middleware 
process that acts as a bridge to the DBMS server. 


DRIVER CATEGORY 

ALL JAVA 

NETWORK CONNECTION 

Type 1 

No 

Direct 

Type 2 

No 

Direct 

Type 3 

Client Yes 

Indirect 


Server Maybe 


Type 4 

Yes 

Direct 


Table 8, JDBC Driver Categories 
2, JDBC API 

JDBC API is composed of the classes and interfaces found in the Java.sql and 
Java.text packages. The following figure shows all the classes and the interfaces of the 
JDBC 2.1. 


49 







JDBC 2.1 Core API 


NOTES 

- Interfaces use italics 

- Inheritance is specified as follows: Base class -7^ Derived class 



Figure 17, The Classes and Interfaces of JDBC 2,1 


According to Whitten & Hapner (1999) the most important classes and interfaees 
are the DriverManager class, Connection interface, Statement interface, 
PreparedStatement interface, CallableStatement interface, and ResultSet interface. The 
following figure shows these classes and their relations. 



Figure 18, The Relations of Most Important Classes and Interfaces of JDBC 2,1 

API (From White & Hapner, 1999) 


50 

































































































































































These classes and interfaces will be discussed in the following sections. 

a. Driver Manager 

The DriverManager class is the traditional management layer of JDBC, working 
between the user and the drivers. It keeps track of the drivers that are available and 
handles establishing a connection between the database and the appropriate driver 
(White, 1999). Keeping track of the drivers is done by the system property called 
“jdbc.drivers”. Creation of the connections are done by invoking getConnection() method 
on this interface. 

b. Connection Interface 

A connection object represents a session with a database. It provides an application 
with Statement objects (and its subclasses) for that session. The SQL statements that are 
executed, as well as the results that are returned over that connection, are included in this 
object. A single application can have one or more connections with a single database, or 
it can have connections with many different databases (White, 1999). 

c. Statement Interface 

This class represents an embedded SQL statement, which an application uses to 
perform database access (Reese, 2000). There are actually three kinds of Statement 
objects; Statement, PreparedStatement and CallableStatements. A Statement object is 
used to execute a simple SQL statement without any parameters, a PreparedStatement 
object is used to execute a precompiled SQL statement with or without parameters, 
CallableStatement object is used to execute a call to a database stored procedures (White, 
1999). 

d. ResultSet Interface 

A ResultSet object represents a database result set table, generated by executing a 
SQL statement. It provides an application with access to database queries one row at a 
time (Reese, 2000). A ResultSet maintains a cursor pointing to its current row of data 
being manipulated. The application then moves through results sequentially until all 
results have been processed or the ResultSet closed. 


51 



C. BASIC STEPS IN USING JDBC 

There are seven standard steps in querying databases (Hall, 2001): 

1. Load the JDBC driver. 

2. Define the eonnection URL. 

3. Establish the conneetion. 

4. Create a statement objeet. 

5. Execute a query or update. 

6. Process the results 

7. Close the connection. 

The following sections will discuss these steps and provide simple examples. 

1, Load the Driver 

To communicate with the database using JDBC, first a connection must be 
established through the appropriate loaded driver. To load the driver, the JDBC driver 
can be specified using the jdbc.drivers system property, or it can be set at runtime using 
the Class.forname(String driverName) method. The following is a simple example 

try { 

Clas s. forN am e (“ Orac 1 e. j db c. driv er. Orac 1 eD r ive r”; 

} catch (Clas sNotFoundEuc eption cnfe) { 

System.eiT.println("There is an error loading driver: " + cnfe); 

} 

Figure 19, A Simple Example Loading a JDBC Driver 

In this example we are loading the OracleDriver for our connection. As can be 
seen from the figure. Class.forname method, throws ClassNotEoundException if the 
driver cannot be found. 

2. Define the Connection URL 

Once the JDBC driver is loaded, the location of the database server must be 
specified. URLs referring to the databases use the jdbciprotocol and have the server host. 


52 




port, and database name embedded with the URL (Hall, 2001). The following is a simple 
example for defining a URL. 


String host = “dbhost.mycompany.com”; 

String dbName = “bookstore”; 

Intport= 1234; 

String OracleUrl = “jdbc:oracle:thin:@” + host + + port + + dbName; 

Figure 20, A Simple Example for Defining a URL 

If a jdbc-odbc bridge were used, our URL would be “jdbc:odbc:bookstore” 

3. Establish the Connection 

To make the connection, all we need is to pass the URL, the database user-name, 
and the password to the getConnection method of the DiverManager class. 

String userName = “System”; 

String password = “Manager”; 
try { 

Connection connectionOne = 

DriverManager.getConnection (OracleUrl, userName, password); 

} catch (SQLException sqle) { 

System.err.println(“There is an error creating connection: “ + sqle); 

} 

Figure 21, Simple Example for Establishing a Connection 

As we see from the example we need to catch the SQLException. As the 
SQLException is also thrown by the createStament and executeQuery methods, the try 
blocks will not be repeated for the next examples. 

By using the getMetaData method of connection, information about the database 
can also be accessed. 

4, Create a Statement 

A statement object is used to send queries and commands to the database. To 
create a statement, create Statement of the Connection will be used. 


53 







Statement statement = eonneetion.ereateStatement(); 

Figure 22. Creating a Statement Object 

5, Execute a Query or Update 

Onee a Statement objeet is ereated, SQL queries ean be sent by using the 
exeeuteQuery method , whieh returns an objeet of type ResultSet. 

String query One = 

“ SELECT Book_name, Author_name EROM Books "WHERE Publisher_name = ‘Wrox’ ” , 

E.esultSet resultOne = statement, executeQuery(queryOne); 

Figure 23. Executing a Query 

Instead of querying the database, we eould modify it by using the exeeuteUpdate 
method. In that ease, no results would be sent baek. 

6. Process the Results 

In the previous example, the result of our query was sent baek as a ResultSet 
objeet. To handle the results, ResultSet provides us multiple methods. One of them is the 
next() method. By using this method, we ean move the eursor from one row to the next 
row. Within a row, by using the getXXX method that takes an index or eolumn name as 
an argument, the results ean be gotten as a variety of different Java types (Hall, 2001). 

System.out.println (“Book Name Author Name”); 

System, out.println (“- -”); 

While (resultOne.next()){ 

String bookName = resultOne.getString(“Book_name”); 

String authorName = resultOne.getString(“Author_name”); 

System.out.println(bookName + “ “ + authorName); 

J_ 

Figure 24. Processing the Results 


54 











7. 


Close the Connection 


Closing the connection requires only connection.close( ) method. But this step 
should be postponed if additional database operations are expected because opening a 
connection usually has a large overhead. (Hall, 2001). 

D, SUMMARY 

JDBC is a low-level API that establishes a connection with a database, sends SQL 
statements, and processes the results. It overcomes some of the drawbacks of the ODBC. 

As Java Servlets were selected as the server-side programming technology, JDBC 
allows us to use pure Java code throughout our applications. 


55 



THIS PAGE INTENTIONALLY LEET BLANK 


56 



VII. DESIGN AND IMPLEMENTATION 


Pressman (2001) suggests the “spiral proeess model,” as a development strategy 
for Web-based applieations. The spiral model is an evolutionary software proeess model 
that eouples the iterative nature of prototyping with the eontrolled and systematie aspeets 
of the linear sequential model. 

Using the spiral model, software is developed in a series of ineremental releases. 
During early iterations, the ineremental release might be a prototype. During later 
iterations, inereasingly more eomplete versions of the engineered system are produeed. 



Figure 25, Spiral Process Model for Web-Based Applications 


From this perspective, the Web-based application process begins with a 
formulation—an activity that identifies the goals and objectives of the application and 
establishes the scope for the first increment. Analysis is a technical activity that identifies 
the data, functional and behavioral requirements for the application. 

The design phase has two parts as the engineering and the page generation. 
Engineering activity intends to design, to produce, and to acquire all data that are become 


57 




integrated in to the application. Page generation refers to a construction activity which 
combines all the data (content) and the necessary architectural, navigation, and interface 
designs. The middle-tier integration/implementation is also accomplished in this phase. 

The customer evaluation takes place at the end of the each increment where 
feedback is received and changes are requested. 

In Chapter II (Planning and Design), the motivation for the application and the 
initial requirements were defined. This was aimed to be the project’s formulation, 
planning and analysis phase for the first increment. Later with the engineering and the 
page generation phase, the application was designed and a prototype was implemented. 
This chapter explains this phase of the thesis. 

With the initial feedbacks from the customer (users), the other increment phases 
will continue. 

A, DESIGN 

The implementation was based on the initial requirements of the project defined 
in Chapter 2. The following assumptions were made for the simplicity of the initial 
prototype. 

• The users were believed to have computer competency ranging from 
novice to expert. 

• The user would have sufficient skills on using any Web browser. 

• As the specification of the database was not concrete, the database and its 
relational tables could be designed and modified according to the future 
needs. And the implementation was built DBMS independent so that the 
system could swap the back-end DBMS without requiring extensive 
modifications. 

1. System Architecture 

The Educational Administrative Management System (EAMS) prototype was 
built on a three-tier client/server architecture. The benefits of this choice were discussed 


58 



in Chapter 3. The client interface was simply a Web browser where the user connects to 
the system and retrieves the data. In this architecture, all the business logic was 
implemented on the middle tier. 



Figure 26, EAMS System Architecture 

While Apache/Tomcat 4.1 was configured as a Web server, for the middle tier 
application, Java Servlets and Java Server Pages were used. Hall (2001) defines the Java 
Servlets as very powerful tools for the application logic, and the JSPs as very helpful for 
the presentation logic. Based on these properties of Java servlets and JSPs, the whole 
application logic was implemented in the Java Servlet where the presentation logic was 
divided into the related JSPs. The connection between the middle tier and the database 
was established via Java Database Connectivity (JDBC). A relational database instance 
was created on Oracle 8i Database, and populated for the implementation purposes. 

2, EAMS Object Model 

According to the use cases defined in Chapter 2, the EAMS’ Object Model was 
developed. The basic objects in the system are defined and the interaction between the 
other objects determined. Figure 27 shows the simplified object model of the system. 


59 











Requests 


Responds 


Forwards 


Presentation logic 
Login JSP 
Faculty JSP 


Depart.Head JSP 
Regiment JSP 


Academy Servlet 


Initialize () 
ExecuteLogin() 
Execute....() 


Communicator Bean 


Sends Query 


Sends ResultSet 
Gets a 

L Connection 



Initialize 

pool 


SECOND TIER 



THIRD TIER 


Figure 27. EAMS Object Model 

The detailed explanation of the objeets and their responsibilities will be diseussed 


in later seetions. 


EAMS Database Structure 


The first step for designing a database model is to discover the candidate entities. 
For this reason, based on the use cases in Chapter 2, the main entities of the database 
were selected. According to these entities, the relations between them developed. The 
designed database structure has four logical subdivisions. These are academic, regiment, 
personnel and system. Each subdivision has its unique tables and relations. 


60 
























Figure 28. EAMS Database Structure 
B, IMPLEMENTATION OF THE PROTOTYPE 

In this section, the implementation of each tier will be discussed. As the client 
part is just a simple Web browser, implementation of the database was regarded as the 
first step during the implementation part. 

1. Implementation of Prototype Database 

The database for the EAMS prototype consisted of a database instance on an 
Oracle 8i database server. The structure of the database instance was explained in the 
design phase. According to the main entities, the related data subjects, tables and 
relations were created. The data subjects of EAMS database are listed in the following 
table. 


61 




EAMS Database Data Subjects 

No 

Name 

Definition 

1 

ANNOUNCECAT 

Each user has different announcements categories. These categories are recorded 
in this table. 

2 

ANNOUNCEMENTS 

Announcements are recorded in this table. 

3 

AWARDS 

The awards of students are recorded in this table. 

4 

CLASS_ENROLLMENT 

Courses, related sections, faculty members and the associated classrooms and as 
well as the scheduled dates are recorded in this table. 

5 

CLASSROOMS 

Classroom numbers and their associated places/buildings in the campus recorded 
in this table. 

6 

COMMANDPERSONAL 

The information about the personal related with the regiment is recorded in this 
table. 

7 

COURSE GRADES 

The course grades of the students are recorded in this table. 

8 

COURSES 

The detailed information about the courses are recorded in this table. 

9 

DEPARTMENTS 

The information about the departments are recorded in this table. 

10 

DORMITORY 

The dormitory room numbers and their associated places/buildings are recorded 
in this table. 

11 

FACULTY 

The information about the faculty personal is recorded in this table. 

12 

LOCKEDGRADES 

The dates of locking grades are recorded in this table. 

13 

LOGINRECORDS 

Each new login and its time is recorded in this table. 

14 

PROGRAMS 

The information about the programs in the academic department is recoded in 
this table. 

15 

PUNISHMENTS 

The punishments of the students and associated information is recorded in this 
table. 

16 

REGIMENT 

The regiment units in the academy are recorded in this table. 

17 

ROOMS 

The rooms and their location are recoded in this table. 

18 

SECTIONS 

The sections and their associated regiment units are recorded in this table. 

19 

STUDENTS 

The information about the student is recorded in this table. 

20 

USERS 

The users login Ids and their passwords are stored in this table. 


Table 9. List of Data Subjects of EAMS Database 

Once the tables and relations were formulated, the database instance was created 


by using SQL DDL (Data Definition Language). After creating the tables and relations, 
the instance populated with data for implementation purposes. To facilitate the 
understanding and documenting of the database, the relationship diagrams were also 
ereated. The relationships diagrams and the SQL DDL code for the database are provided 
in Appendix C. 

2. Implementation of EAMS Application Prototype 

The main purpose of this applieation is to support the Naval Aeademy’s 
informational, educational and administrative tasks and their requirements eonveniently 
and eonsistently. To aceomplish this task, legal users will be given access to the system 
and according to their privileges and responsibilities, related menu options will be 
provided to them. 


62 




Based on this initial concept, by using a login page, the user logons the system. 
The login ID and password information are sent to the Servlet. The Servlet verifies this 
information with the database and obtains the user privilege code from the database. 
According to this privilege, the Servlet forwards a JSP fide, which has the specific menu 
options for that type of user. Once users have accessed to this JSP page, by using related 
menu commands, they will access various operations in the system. 

To develop this system, the Java programming language, Java Servlets and Java 
Server Pages APIs were used. JDBC and SQL commands were applied to the system for 
database communication. While Apache/Tomcat 4.1 was configured as a Web server, a 
database instance was created in Oracle 8i DBMS. 

To have a better understanding of the application program, the components of the 
middle tier and the system operation scenario with the snapshots of the application will 
be discussed in the next section. The source code of the implementation is provided in 
Appendix D. 


C. COMPONENTS OF THE MIDDLE TIER 

The middle tier contains the following components. 

• Http Server 

• Login Page 

• Academy Servlet 

• ConnectionPool and PoolManager Classes 

• Communicator Java Bean Class 

• JSP Files 

• Logger Class 

• Database Properties File 

The detailed information about each component will be given in the following 

section. 


63 




1 . 


HTTP Server 


As mentioned in the previous sections, the Apache Tomcat 4.1 Web server was 
used for the HTTP server purposes. The Web server enables the clients to download the 
HTML and Java Server Pages. This Web server can be downloaded from 
www.apache.org . Tomcat was sufficient for the EAMS prototype, but for the actual 
implementation, the performance, security, scalability and other related issues must be 
considered before selecting the HTTP server. 

2, Login Page 

To access the system, this is the first entry point for the user. This page was a 
simple input form asking for the login Id and password. For the implementation, a special 
JSP file was written, on which special login messages were shown to the user without 
invoking any extra application logic. 

This page can be linked to any site that the user can call. Once the information is 
verified by the system, a new page will be displayed to the user. This page has the menu 
options for the specific functions of the system. It is important that, according to user’s 
responsibilities and privileges, the subsequent page is different from the other users’ 
pages. For example, if the user is a faculty member, after the login, he will reach a totally 
different page than students, regiment personnel, or department heads. 

3, Academy Servlet 

This is the main servlet that contains most of the application logic. All the user 
requests are addressed to this servlet where each one is forwarded to the appropriate 
method. After executing the appropriate function, the Servlet sends the results to the 
Communicator Java Bean, and forward a JSP file to the client. Fater the JSP file gets the 
necessary information from the Communicator Java Bean, and shows the contents to the 
user. 

Some of the main functions of the servlet can be summarized as follows: 

a. Initialization 

With the first call of the servlet, the servlets initializes itself. 

b. Creating Database Connections 


64 



Even though a special class (Connection Pool) is used to create 
connections, the servlet creates and initializes this class. More details about the 
connections and the Connection Pool class are discussed later. 

c. Getting the User’s Parameters 

When a user clicks on a menu option or a submit button, the command and 
the data are received by the Web server and sent to the Servlet. The servlet gets the 
information as a HTTP request parameter. 

One of the important parameter that was used throughout the servlet is the 
“action” parameter. This parameter includes the information about what kind of a 
function the user requested. Some of the actions are login, get Student Grades and 
others. 

d. Session Tracking 

HTTP is a “stateless protocol”. Each time a client retrieves a Web page, it 
opens a separate connection to the Web server, but the server does not automatically 
maintain contextual information about a client (Hall, 2001). This means that the Web 
server cannot easily remember previous transactions that the same user sent. This 
problem makes some applications like online shopping systems difficult. How can the 
system check and modify the user shopping chart? 

In EAMS, session tracking has two meanings. Who is sending the request, 
and is the sender a legitimate user? 

To solve the session tracking problem, cookies are used in EAMS. 
Whenever the user logs on the system, a cookie with some login information about the 
user is created. The same information is also recorded in the database. When a user sends 
a request to the servlet, the servlet gets this cookie from the user and verifies that the data 
matches the information in the database. If it is affirmative, the user request will be 
executed. If the user session does not contain the necessary criteria, the login page with 
an error is sent back to the user. The system wants the user to login one more time. Once 
the user logs off or closes the Web browser, the cookie terminates itself automatically. 


65 



More information on session traeking and eookies ean be found in the 
referenee (Hall, 2001). 

e. Executing User Request 

After the verifieation of the eookie, the request is sent to the appropriate 
method in the servlet. After the requested command is executed and the necessary data is 
taken from the database, the results are sent back to the user. 

Sending the information to the user is not easy. The information must be 
presented to the user in a user-friendly way; it must be wrapped in an HTML page. For 
this reason, servlet sends back the information in two steps. 

As a first step, the servlet loads the results into a Java Bean 
(Communicator). As a second step, the servlet checks the user type from the system, and 
then forwards the related JSP file to the user. 

For example, assume that the user is a faculty member requesting the 
students grade information about a course. After the results are taken from the database, 
the servlet loads the result into the Communicator Java Bean. And since the user is a 
faculty member, the servlet forwards the Faculty JSP file to the user. The Faculty JSP 
file, containing all the presentation logic inside, gets the necessary data from the 
Communicator Java Bean and generates a HTML page. The user will see a simple HTML 
page with the information he or she requested with the other related commands in the 
Web browser. 

More information about the Communicator Java Bean and JSP files will 

be given later. 

4, ConnectionPool and PoolManager Classes 

Creating a connection to a database is a highly time consuming since the database 
engine must allocate communication and memory resources as well as authenticate the 
user and establish a security context (Ayers, 2000). To solve this problem, systems share 
a set of already open connections between all clients. 

For this purpose, two classes, the ConnectionPool and the PoolManager classes 
were created for the EAMS. While the ConnectionPool contains all the currently open 


66 



connections, the PoolManager interacts with the ConnectionPool and assign connections 
to the clients. The client (here a servlet) does not contact the ConnectionPool directly. 
When a user wants to run a query, the manager of the connections (PoolManager) will 
obtain a connection from the pool and give it to the user in order for the user to execute 
the query. When the query has been executed by the user, the connection is returned to 
the pool. 

5, Communicator Java Bean Class 

This Java Bean was used for communication between the servlet and the JSP files. 
When a requests is sent to the servlet, the servlets executes the request and prepares the 
related result. The result is later loaded in the Communicator Java Bean instance where 
the JSP file get the result and presents it to the user as an HTML page. 

6. JSP Files 

For complicated application that may require several substantially different 
presentations (like EAMS), a servlet can handle the initial request, process the data, set 
up Java Beans, then forward the results to one of a number of different JSP files. 

In EAMS, after getting the results, the servlet forwards a JSP file to the user. All 
the presentation logic of the EAMS resides in these JSP files. The related JSP files 
receives the necessary information about the result from the Communicator Java Bean 
and creates a HTML page with it. The menu commands for each user is also kept in these 
JSP files and is shown to the user inside of the HTML page. 

As there are four different user types in EAMS, there are four JSP files that 
contain the presentation logic for each one. 

a. Faculty JSP File 

The Eaculty JSP file is used to present the faculty members’ requests. This 
file has the following menu options: 

• My Home Page: The initial page where the announcements related to the 
user will be shown can be reached via this option. 

• Courses: The information about the courses that the user is currently 
giving will be shown via this option. 


67 



• Personal Information: The personal information of the Faeulty member 
will be shown via this option 

• Class Schedule: This option shows the elass schedule. 

• Students: This option shows the information about the students. 

• Submit Grades: The user will use this option to submit grades to the 
students related to a course, which the user is currently giving. 

• Feedback/Problems?: Any feedback or problems can be reported via this 
option. 

b. Student JSP File 

The Student JSP fde is used to present the student requests. This fde has 
the following menu options: 

• My Home Page: The initial page where the announcements related to the 
user will be shown can be reached via this option. 

• Courses: The option shows the courses that the user is currently taking. 

• Personal Information: This option shows the personal information of the 
user. 

• Class Schedule: This option shows the class schedule of the user. 

• Grades: The user can see his grades by using this option. 

• Company Information: This option shows the information about the 
regiment unit, discipline points, awards/punishments and the student’s 
related commanders. 

• Feedback/Problems?: Any feedback or problems can be reported via this 
option. 

c. Department Head JSP File 

The Department Head JSP file is used to present the department head 
requests. This file has the following menu options: 


68 



• My Home Page: The initial page where the announeements related to the 
user will be shown ean be reaehed via this option. 

• Department: This option shows the information about the department that 
the user is heading. The information about the instructors and the courses 
related with the department can also be reached via this option. 

• Personal Information: This option shows the personal information of the 
user. 

• Students: This option shows the information about the students in this 
department. 

• Instructors: This option shows the information about the instructors in 
this department. 

• Feedback/Problems?: Any feedback or problems can be reported via this 
option. 

d. Regiment JSP File 

The Regiment JSP file is used to present the Regiment command 
personnel requests. This file has the following menu options: 

• My Home Page: The initial page where the announce-ments related to the 
user will be shown can be reached via this option. 

• Units: This option shows the information about the units commanded by 
the user. 

• Personal Information: This option shows the personal information of the 
user. 

• Students-Officers: This option shows the information about the personnel 
(officers/students) commanded by the user. 

• Feedback/Problems?: Any feedback or problems can be reported via this 
option. 


69 



7, Logger Class 

For administrative and debugging purposes, a speeial logger elass was used. This 
elass provides the following benefits: 

• Direeting the logs to a file (in the server) we want to use 

• Having more than one instanee of a logger objeet for different purposes at 
a given time. 

• Using time stamps for logging purposes 

• Setting error levels or masking for the future reeonfiguration of the 
system. 

• Logging user information for administrative purposes. 

8, Database Properties File 

The database eonfiguration parameters used for the ConneetionPool and the 
PoolManager elasses are stored in this file. The name of the driver, the number of the 
maximum eonnections and the name of the log file ean be stored in this file. 


D, SCREEN SHOTS OF THE SYSTEM 

In this seetion some of the sereen shots of the system are presented. The similar 
funetions and pages are not repeated for eaeh type of user. 


70 




Figure 29, Screen Shot for Login Page 

The first screen shot is for the login page, which is the only entry point for the 
system. All the users use the same login page. After entering the login Id and the 
password, the information is submitted to the servlet. 


71 














Done ^ Internet 

Figure 30, Screen Shot for My Home Page (for Students) 

After the verifieation of the login information, the related JSP file is forwarded to 
the user. In this example, since the user was a student, the Student.)sp fide was forwarded. 
The special menu options specific to the students can be seen at the left of the screen. 

After accessing the system, the announcements (my home page) are shown to the 
user. The user can see this information anytime by pressing the “My Home Page” button. 


72 





























Figure 31, Screen Shot for Courses (for Students) 


The users (student) ean see the eourses they are currently taking by using the 
“Courses” button in the menu. The courses are then shown on the screen. 


73 




















































Figure 32, Screen Shot for Personal Information Page (for Students) 

The users ean see and update their personal information by using the “Personal 
Information” button. While some of the information eannot be updated, some other 
information can be updated by using this page. The users can also change their passwords 
by using this form. 


74 
















































Figure 33, Screen Shot for Class Schedule Page (for Students) 


The course schedule for the users can be accessed by using the “Class Schedule” 
button. After the data is retrieved from the database, information is presented in the actual 
weekly program by using a special algorithm. The users can see the course names, the 
instructors’ name, and the classroom numbers. 


75 




























































Figure 34, Screen Shot for Grades Page (for Students) 

If the users want to see their grades for any or all semesters, they use the “grades” 
button to see the following page. From default, the eurrent semester grades and eourses 
are shown. As an unoffieial transeript, all grades can be seen via this option. 


76 








































































Figure 35, Screen Shot for Extra Information in Grades Page (for Students) 


On the grades page, the users can also obtain more information about the 
instructor or the course they took by pressing the related buttons. The arrows in Figure 35 
were used for explanation purposes of the screen shot. Pressing the related button will 
generate the output designated by the arrow. 


77 





























































Figure 36, Screen Shot for Company Information (for Students) 

Since the scope of the academy’s funetion entails military and aeademie training, 
data on both functions must be gathered and stored. Students belonging to various 
companies and battalions in the regiment ean see their awards, punishments or remaining 
disciplinary points by using the “Company Information” button. 


78 












































Figure 37, Screen Shot for Feedback/Problems Page 

As the development process of the EAMS was defined as a spiral process, the 
users’ feedback has greater importance. The feedback or problems can be reported to the 
project manager by using the related button. This button creates a new message instance 
where the user can easily report the problems or feedback. 


79 



























































Figure 38, Screen Shot for Logged Off Page 


The user can log off the system by pressing the “log off’ button. A page will 
verify that the user logged off the system successfully. Without using this button, just 
closing the Web browser will also terminate the HTTP session and log off from the 
system. 


80 









Facut^ - MicrosQft. Internet Explorer 


RIe Edit View Favorites Tools Help 



Figure 39, Screen Shot for My Home Page (for Faculty Members) 


Now a new user logged on the system. This user also used the same login page 
but since the user was a Faculty member, it can be easily understood that the menu 
options are different from the students’ menu options. Again the first page is the My 
Home Page and the announcements. 


81 





























Facut^ - MicrosQft. Internet Explorer 


RIe Edit View Favorites Tools Help 



Ketnal Yigit 

ThuFeb21 06:11:31 PST 2002 





You are cuiTently giving the following Courses 


Selection 

Course Id 

Course Name Explanation 

Credits 

Section 

Show j 

TE-476 

Linear discrete time systems and Z-transformation. Design of 
DIGITAL digital filters. Design of digital control systems using 

CONTROL transformation techniques and state space methods. Sampled 

SYSTEMS data systems. Controller and observer design state space 

methods, will be studied in this course. 

(3+140) 

4G 

Show 1 

TE.478 

DIGITAL Discrete-time sigrials. Discrete-time systems sampling. 

SIGNAL Correlation and convolution sum. FFT Frequency analysis of 

PROCESSING invariant systems. Digital filters are covered in this 

(24040) 

4G 


course. 


IlffliWllJBilBIBi 



[©Done 


^ Internet 


j 


Figure 40, Screen Shot for Courses Page (for Faculty Members) 


By pressing the “Courses” button, the users can see the courses they are currently 
teaching. 


82 




























Figure 41, Screen Shot for Class Schedule (for Faculty Memhers) 

The Class Schedule button shows the users’ schedule. Different colors distinguish 
between the empty slots and the filled time slots. The user can see the course number, the 
classroom number, and the section of the students taking the course. 


83 
























































Figure 42, Screen Shot for Students (for Faculty Members) 

If the users want to see the students’ information, they ean see all students’ grades 
by selecting the course name. As can be seen from the table, the user can sort the 
information by selecting any columns’ button (such as, sort by name or midterm exam 
grade). In the screen shot, the information was sorted according to the course grade. If the 
users want to see the students’ picture and email address, they can get this information, 
by pressing the related students’ numbers. 


84 








































































































gSBESHSi 







I© Done 



T^r. ' f U ~ •• 

[ '” ^ Local intranet 


1 J 

, 1601 1 

Ziya 

^Yilmaz 

_ [|90 

|73 

|[65 


1 1612| 

Hasan 

Mert 

|67 

|93 

|[88 

|0 

j 1812 I 

Usli 

Serengil 

|49 

|87 

jio 

F 

I 1824 1 

Yesiiti 

Aklurk 

|64 

|9B 

|[84 





Locked 

Locked 

Update 

Update 1 


[^ Done I P ^ Local intranet 

Figure 43, Screen Shot for Grade Update (for Faculty Members) 


To submit grades for the students for a specific course, the user simply changes 
the grades for the student (or enters them for the first time) and then presses the update 
button to update the grades for related exam. As can be seen in Figure 43, some of the 
grades, here first and second midterms, cannot be updated because they are locked. This 
locking mechanism automatically activated because of a predefined date in the database 
for each exam to provide the consistency of the grades. After that date, those grades 
cannot be changed by using the application. A written request must be sent to the grade 
center. 


85 
































































































































Department Head - Microaofl Internet Explorer 


RIe Edit View Favorites Tools Help 



Muzaffer Adem 
Thu Feb 21 06:13:45 PST 2002 


1 Aimouncements | 

Number 

Announcement 

Published Date 

1 

The second semestre for F Y2002 will start March 18,2002 

February 9, 2002 





® Done 




Internet 


Figure 44, Screen Shot for My Home Page (for Department Heads) 


The next user is a department head. The figure shows the My Home Page for the 
department Head. The unique menu options ean be seen at the left of the sereen. 


86 





















*3 Department Head - Microsoft Internet Explorer 


RIe Edft View Favorites Toois Heip 



MuzafEer Adem 
ThuFeb 21 06:14:25 PST 2002 


Department Info for Muaaffer Adem 


Department Name Electric/Electronics Engineering 




No 

Instmctor Degree 

Name 

Last Name 

jRaiik 

1 - Info 1 

PhD. 

Nese 

Aydin 

|Commander 

] 2 - Info 1 

Prof 

Kemal 

Yigit 

Civilian 

1 3 - Info 1 

MS. 

Selina 

Arslan 

Lieutenant 

1 A - Info 1 

PhD. 

Hakan 

Ozturk. 

Commander 

ICourses offered in this semester | 

No 

Coiuse Id 

Name 

Sections taking 

Instnictor giving 



POWER 

ELECTRONICS 



1 - Info 1 

TE-473 

4G 1 

Nese Aydin 







“electronic 

MEASUREMENT 

A’Krn 



2-Info 1 

TE-474 

4G 1 

Nese Aydin 



INSTRUMENTATION 





DIGITAL CONTROL 
SYSTEMS 



3 - Info 1 

TE-476 

4G 1 

Kemal Yigit 






I 


DIGITAL SIGNAL 


I ^ Internet 


d 


Figure 45, Screen Shot for Department (for Department Heads) 


By using the Department menu option, the user can see the department 
information and some basic information about the instructors, courses and sections 
related to that department. By pressing the info buttons, the user can receive extra 
information about the instructor, course or section. 


87 
















































Figure 46, Screen Shot for Students (for Department Heads) 


By selecting one of the sections corresponding to a course, the user can see the list 
of all the students and their grades for that specific course. If the user wants to see the 
photo of the student or wants to send an email to the student, he can get this information, 
by pressing the student number. 


88 






























^ iDepaitmeiit Head - Mici o»oft Intel net Exploi ei 


=Md 



Muzaffer Adem 
Thu Feb 21 06:15:20 PST 2002 


Depaiiment Name Electric/Electronics Engineering 



Department Info for MuzaiTer Adem 


3 Faculty info - Microsoft In... Q _ 


Kemal Yigit 
send mail to kvigit 

Close Window 


IS 

iNT 


TE-476 


AND 

INSTRUMENTATION 
DIGITAL CONTROL j 
SYSTEMS I 

DIGITAL SIGNAL 


4G I 


Last Name 

Rank 

Aydin 

Commander 

Yigit 

Civilian 

Arslan 

Lieutenant 

Ozturk 

Commander 


Instinctor giving 


Done 


Nese Aydin 

Nese Aydin 

Kemal Yigit 

^ Internet 


Figure 47, Screen Shot for Instructors (for Department Heads) 


Getting more information about the instructors is also very easy. By pressing the 
instructor’s related button, the user can see the photo of the instructor or send him an 
email. 


89 





















































Figure 48, Screen Shot for My Home Page (for Regiment Personnel) 


The next user type is a command personnel in the regiment. The home page is 
similar to the other, except for the menu options. 


90 


































Figure 49, Screen Shot for Units-1 (for Regiment Personnel) 

By using the units menu option, the users can see the units they command. As can 
be seen in Figure 49, the user was a company commander with only two units (in this 
case they are sections) under his command. 


91 































Figure 50, Screen Shot for Units-2 (for Regiment Personnel) 

In this example another regiment personnel’s units page is shown. This user is the 
regiment commander, who is commanding four battalions. The users can easily see 
information about any officer under their commands or by using the buttons for the 
battalion (or company), they can see the lower-level units and their personnel. 


92 


















































3 Regiment - Microsoft Internet Explorer 


RIe Edit View Favorites Tools Help 




Ibrahim Akturk. 

Thu Feb 21 06:16:45 PST 2002 






Done 


The Section Information for Lieutenant Ibrahim Akturk 

Company name: 


[Fourth Battalion Fourth Company j 

Section name; 


4G 


[Number of students in the section: 

25 


||Student No | 

iName 

jjLast Name 

[Discipline pomts 



IZeki 

Bas 

160 



jlhsan 

||Dogru 

152 

1 1045 


jZiya 

Akin 

152 

S 


Birol 

||Tan 

153 



Ender 

|Midik 

145 



[Levent 

[Ook 

|l56 

1 1183 


jlurgut 

|Turic 

158 



Yildirim 

||Zoriu 

145 

1207 


Barbaros 

llAlp 

145 

|j213j 


[Xazim 

||Tekm 

|l60 

1 1226 


|Huseym 

jjYildiran 

154 


0 Internet 


Figure 51, Screen Shot for Students-1 (for Regiment Personnel) 


The user can see the list of all students in a section by simply selecting the 
company/section button on the units page. The figure shows the list of all students in 
Section 4G, which is in the 4*^ company. Under the chain of command, all related 
regiment personnel can access this information. In the next figure, we will see that by 
using the students’ number button, more detailed information about the students can be 
accessed. 


93 
























































































^ Regiment - Microsoft Internet Explorer 



Ibrahim Akturk 
'niuFeb21 06:17:13 PST 2002 


My Home Page 



The Information about Student Rasim Topuz 




Students-Officers 


Name [Roslm m. | UstName |Topuz 

Section 

Department [Electric end Electronic Engineering-Confrol Syst@ms Option 
Regiment Unit [Fourth Battalion Fourth Company 



Feedback / Problems? 



AWARDS 

Award No 

Award Type 

Result 

Award Date 

1 

Best Student in 
2000 second 

semestrc 

Best student certificate 

2000-10-29 

2 

Best Student in 
2000 first 
semestre 

Best student certificate 

2000-03-29 

3 

Perfect 

Inspection 

Readiness 

Two fiidays early Eber^ 

2000-12-18 

PUNISHMENTS 

Punishment 

No 

Punishment 

Type 

Result 

Points Taken 

Punishment 

Date 

1 

Missing 

inspection 

readiness 

two weekends liberty cancellation 

4 

1998-11-10 


Current Remaining 
Points 

156 



I TB-.71 I ^ 

_ I . I MIIJTARV .. .. .. r. 



Figure 52, Screen Shot for Students-2 (for Regiment Personnel) 

As shown in Figure 52, the user can see more detailed information about a 
seleeted student. All the students’ academic, disciplinary, personal information ean be 
accessed by using the related buttons. 


94 





















































































































Figure 53, Screen Shot for Students-Officers (for Regiment Personnel) 

If the user is eommanding any offieer and wants to see detailed information, this 
information can be accessed by using the officer button on the units’ page. In this 
example, the regiment commander accesses information about the fourth battalion 
commander. 


95 













































E. 


CONFIGURATION OF THE SYSTEM 


Building a Web application is beyond merely writing code and running it. In order 
to configure the application successfully, the Web server must be successfully 
configured, both the application code and the images used in the pages must be located 
according to the configuration of the server. 

For the configuration of the Web server, one must look at the Web server 
specifications. Since Apache Tomcat 4.1 was used for this application, the necessary 
configuration and the binary files for the Web server can be downloaded via 
www.apache.org . 

For the implementation files, the JSP files have similar properties with the 
standard HTML files, so these files can be saved to any directory in the Web server. The 
servlets are Java files, so first they must be compiled and the binary code (class files) for 
the implementation files must be generated. And then these class files must be saved to 
the proper directory in the Web server. As Apache Tomcat automatically supports the 
servlets and Java, the class files for the servlets must be saved in the “WEB-INF/classes/” 
directory. It is important to note that only class files must be saved to this directory. It is 
better to save the source code somewhere else, not available from the outside. If any 
other Web server, other than Apache Tomcat, is used, it must be checked to determine if 
the server is supporting the servlets or not, otherwise, a servlet container application, such 
as JRun for windows must be used. In this case, the class files must be located at the 
appropriate location specified by the servlet container. 

The images used in the system can be saved anywhere in the Web server, but in 
this case, the implementation files must address them properly. Otherwise the relative 
location of the files can be used in the implementation, and they must be recorded in this 
relative directory. In the EAMS prototype, the image files were assumed to be saved in 
the “/src/webadmin/” relative directory. So all the images can be stored in this relative 
directory (for the servlets and JSP files). In addition, since the servlets and JSP files will 
need the Java Virtual Machine, the proper location for the Java platform must be located 
in the CLASSPATH. 


96 



F. ASSESSING THE IMPACTS OF EAMS IN THE ACADEMY AND 

CHANGE MANAGEMENT 

Even though the academy was using an online information system for a long time, 
enabling other users (students, faculty members and the regiment personnel) access to the 
system will change the way business has been conducted for many years. As this change 
involves people, there may be some reactions, even some resistance to the system despite, 
the support of the top-level management. 

Mabey and Salaman (1995) consider a number of perceptions about the 
management of change that affect reactions to it. Among these factors are whether 
change is perceived as “deviant or normal” and “threatening or desirable.” Perceptions 
about the nature of change and the need for it therefore affect reactions to it. The 
perceptions can be different, but in each case, the change management issues must be 
addressed during the process. 

Beckhard (1992) defines ten organizational requisites for the change management 
process. These are 

1. Ensuring senior management commitment to the proposed changes, which 
must be visible to all participants throughout the organization. 

2. Producing a written statement about the future direction of the organization 
that clarifies its objectives and values throughout the organization. 

3. Creating a shared awareness of conditions to produce a common perception 
that change must be implemented. 

4. Assembling a body of key managers and other important opinion-formers to 
gain their commitment to the change process so that this may be disseminated more 
widely. 

5. Generating an acceptance that this type of change will require much time to 
implement fully even though there may be short term, dramatic changes as part of the 
overall transformation. 


97 



6. Recognizing that resistance to change is part of the normal process of 
adaptation so the managers can be educated and made aware of this and equipped to 
manage this reaction. 

7. Educating participants about the need for the change and training them to be 
competent and effective and to overcome resistance and make commitments. 

8. Persevering with the change process and avoiding blame when an attempt to 
implement a facet of this process fails. Such negative action generates resistance and 
reduces the necessary risk-taking behavior. 

9. Facilitating the change process with necessary resources. 

10. Maintaining open communication about progress, mistakes, and subsequent 
learning. 

It is believed that the eagerness and good will of the personnel, the military 
structure of the academy, and the support of the academy commander will make it easier 
to implement the EAMS in the Naval Academy. 

Based on the previous requisites, the following steps should be followed during 
the implementation/configuration of EAMS in the academy: 

1. Find a Champion 

The first step in managing change is getting the support of a champion, (a top- 
level manager) who has the power and the authority to promote the project. 

A champion must be the highest-level line executive or commander who is 
willing to put his or her moral capital at risk to provoke enthusiasm of an IT system. An 
IT manager cannot be a champion (Haga, 2002). 

In the academy this champion is the academy commander. Without the 
commander’s support and authorization, such a system cannot be implemented. 

2. Emphasize the Need 

In order to produce a common perception that the change must be implemented, 
the problems with the old system, and the potential benefits of the new system must be 
made clear to all users. 


98 



3, Form a Powerful Guiding Team 

A team, including the key managers in each department, is also very important for 
the implementation. This team can organize and identify the healthy feedback and 
evaluations. 

4, Recognize the Resistance and Deal with It 

Recognizing the resistance as normal is another step in the change management. 
With this understanding, the middle managers, such as the department heads or regiment 
battalion commanders, can be informed and trained to manage this reaction. 

5, Educate All Users 

To overcome resistance, the users of the EAMS can be trained and educated for 
both the benefits and the efficient use of the system. This can be accomplished by a series 
of conferences where a demonstration for the system will be done for each user type. 

6, Maintain Open Communications 

The feedback from the users at any stage of the implementation has great 
importance. Not only usability issues but also any possible problems in the system can be 
identified. Also the user can be informed about the progress of the system or any future 
enhancements. 


99 



THIS PAGE INTENTIONALLY LEET BLANK 


100 



VIII. CONCLUSION 


A. SYNOPSIS 

With the introduction of the Internet, the information systems faced major 
changes. Accessing the information anywhere and anytime is one of the key benefits of 
the Web-based applications. Web-based applications are proven to be scalable, high 
performing, and easy to implement, to manage and to update. 

This thesis presented the design, development, implementation and analysis of the 
Educational Administrative Management System (EAMS) for the Turkish Naval 
Academy. EAMS will provide the academy with broader information availability, better 
performance, and a decrease in paperwork and manpower. 

The thesis also covered the current situation and the need for such a system. The 
main goal of EAMS is to reduce the loss of productivity by increasing the availability, 
accuracy, efficiency, and the consistency of the information related with both the 
administrative and educational data in the naval academy. This system is believed to 
eliminate most of the current drawbacks and to result in savings for personal power and 
time while quickly providing the required information to the users. 

Each step of the development cycle of the implementation was discussed in this 
thesis. Starting from the architecture evaluation, the middle-tier technologies, database 
connectivity tools and databases were studied. 

According to the studies, a Web-based three-tier architecture was found as the 
best model for the system. As the client tier was a simple Web browser at a PC or a PDA 
(personal digital assistant), the main emphasis was given to the middle tier and the 
database tier. 

Prom the comparison of the middle tier technologies, Java Servlets and Java 
Server Pages (JSP) were selected as the best combination for the system. While the 
application was designed in the servlet, all the presentation logic was defined in the JSPs. 


101 



As the spiral process model was used for the implementation, a prototype for the 
system was also implemented. According to the user feedbacks, future enhancements will 
be done in the next iterations. 

For the database tier, a relational database model was selected. With the 
definitions of objects and the relational schema, an instance of the database for the 
academy was created in an Oracle 8i database. The database instance was also populated 
for implementation purposes. 

Such a system can be implemented in various areas. From Naval Supply centers 
to personnel departments, such application can be used to reduce paperwork and 
manpower. 

B, FUTURE ENHANCEMENTS 

1. Adding More User Types to the System 

For the implementation purposes and to get accurate information from the 
academy, the administrative office users system interfaces were not defined in the 
requirements. These users must have special features that will enable them to print the 
academy’s official records and reports. According to the format of those reports and with 
the additional requirements, this user type can easily be added to the system. 

Another user type for the future enhancement is the system administrator who can 
be given the capability to see the current online users, their activities and to perform any 
online support/maintenance. 

2, Enhancing the Security Features 

Currently, the system uses cookies for session tracking. In this method, the user 
login Id and the login time stamp is compared with the original system records. For the 
security purposes, this information is verified each time the user makes a request to the 
system. As an additional security feature, the access to the system can be limited to the 
intranet. This can be easily done by checking the IP address of the client in the 
implementation or by configuring the Web server accordingly. 


102 



Even though each user has different privileges, the same database connection pool 
is used in the prototype. As the system can resolve this privilege issue by forwarding the 
special JSP files to present the information, however creating different connection pools 
for each user type can enhance the security. 


103 



THIS PAGE INTENTIONALLY LEET BLANK 


104 



APPENDIX A. FIVE STYLES OF CLIENT/SERVER COMPUTING 


In this thesis, client-server models were discussed under two-tier and three-tier 
client server architectures, and then compared. It is important to note here that this 
representation (2-tier or 3-tier) is not the only representation for the client-server 
architectures. 

Another model for client-server architecture is the Gartner Group Model of 
Client/Server Computing. (Goodyear, 2000) This model is based on dividing business 
processing into three distinct layers; database, application logic and presentation. 

In the following figure, the solid line labeled “Network” shows which of the five 
layers are allocated to the client and which are allocated to the server. The upper part of 
the “Network” designates the server side; the lower part of the “Network” designates the 
client side. 


Distributed 

Management 


Remote 

Presentation 


Distributed 

Function 


Remote Data 
Management 


Distribnted 

Database 


Data 

Management 


Application 

Fnnction 


Presentation 




Presentation 


M 




Presentation 


Data 


Data 

Management 


Management 

Application 


Application 

Fnnction 


Function 




Application 

Function 


Presentation 


Data 


Data 

Management 


Management 



-► ◄- 

Thin Client Fat Client Application Packaging 

Applieation Functionality Distribution 


Figure 54, Gartner Group’s Five Stages of Client/Server Computing (From 

Goodyear, 2000) 


105 


















THIS PAGE INTENTIONALLY LEET BLANK 


106 



APPENDIX B. WEB ARCHITECTURE 


To open a Web page in our browser, we usually either type in the URL or eliek a 
link to the URL. What happens after this point? How does the browser eonneet to the 
server? How do we see the Web page in our browser? 

This appendix was aimed to give the neeessary background to answer these 
questions about the Web architecture and its components. Before getting involved with 
details, we should examine the simple request and respond flow between a browser and a 
server. 



In the Figure 55, our URL is http://companv/welcome.htm . Once we submit this 
request and the Web server receives it, the Web server locates the Web page in its local 
file system and sends it back to the browser. The browser then displays the page. Each 
image in the page is also referenced by a unique URL, and the browser requests each 
image’s URL from the server in the same way that it request the main html file. 

At this point, we see that Web browser and the Web server are the main entities in 
the Web architecture. It is better to look at each of these entities. 


107 



































1 . 


Web Browser 


A browser is a computer program that resides on our computer and enables us to 
use the computer to view World Wide Web (WWW) documents and to access the 
Internet, taking advantage of text formatting, hypertext links, images, sounds, motion and 
various other features. The Web browser can be thought of as a universal user interface. 
Whether we are doing some simple Web browsing or the transacting online banking, the 
Web browser’s only responsibilities are that of presenting the Web content, issuing 
requests to the Web server, and handling any results generated by the request. 

Browsers cannot only show us the HTML pages but can also show others such as 
Extensible Markup Language (XML), dynamic HTML (DHTML) pages. It is important 
to clarify that all these markup languages were based on SGML (Standard Generalized 
Markup Language-IS08879), the international standard for defining descriptions of the 
structure and content of different type of electronic documents. 

The Web browsers can also execute applications within the same context as the 
document on view. The two popular examples for client-side Web applications are 
Microsoft’s ActiveX technology and Java applets (Ayers, 2000). ActiveX components 
are downloaded from the Web server, registered with the windows registry, and executed 
when called by other script elements. A Java applet is a small program also downloaded 
from the server and executed within the browser’s own Java Virtual Machine (JVM). 
Both ActiveX objects and Java applets have full access to the browser’s document object 
model and can exchange data between the browser and themselves. The main difference 
between them is the accessibility and security issues. ActiveX controls make it possible 
for a Web browser to interact with other desktop applications. Because of this, any 
possible security hole in the application can invite hackers to seize control of a computer 
system (Cert, 2000). Contrary to this, as the Java applets are running in JVM, their 
capabilities are restricted for security concerns. 

Two Web browsers dominate the Web browser market. These are the Microsoft 
Internet Explorer and the Netscape Navigator. 


108 



2 . 


Web Server 


The Web server is a program running on the server that listens for incoming 
requests and responds to those requests as they come in. The web server is assigned an IP 
address and is connected to the Internet so that it can provide documents via the World 
Wide Web. Once the Web server receives a request, it springs into the action. Depending 
on the type of request, the Web server might look for a Web page, or it might execute a 
program on the server. Either way, it will always return the results to the Web browser. 
Even if it cannot process a request, an error page is sent to the browser. Currently the 
leading Web servers are Apache Web Server and Microsoft Information Server (Netcraft, 
2001) 

3, Sending a Request to the Web Server 

In order for the Web server to respond to and to execute a server program, the 
Web browser must package up the user data and issue an HTTP request to the Web 
server. An HTTP request consists of the URL for the page. A request is typically 
generated by the browser, but we believe that it is still important to understand how a 
request is constructed and used. 

Each request must specify which method the request is to use. The three most 
important methods are HEAD, GET and, POST (Ayers, 2000) 

The HEAD method simply retrieves information about a document and not the 
document itself This method is often used to determine if a hypertext link is valid or to 
determine when a link was last modified. 

The GET and POST methods are used to issue requests to execute a Web 
program. Even though both of their functions seem to be similar, some major differences 
between them exist. 

The GET method is used if we want to retrieve some information from the server. 
POST is used whenever we want to send some information to change the contents of a 
file or database. GET requests are appended to the URL of the Web page. So the amount 
of data that can be sent to the server is limited. But the POST method allows us to send 


109 



more data. The GET method is also used as a default method for all Web browsers. 
Whenever we write an URL for a Web page request, the browser issues the request as a 
GET request. 

4. Executing the Server Program 

Whenever a request for a specifie program eomes to the server, it determines the 
necessary operating environment’s type. Web servers establish this task through mapping 
by looking at the extension of the requested file (or the directory in which the file is 
located). At the configuration phase of the Web server, how to handle specific file types 
is defined. Eor example, typically anything in the cgi-bin directory will be treated as a 
Common Gateway Interface (CGI) script, anything with a .jsp extension will be treated as 
a Java Server Page, or any file with the extension htm will be directly returned to the 
browser without any runtime environment. 

Once the type of the requested file is determined, the server then loads any 
required runtime environment for the file to be executed. The required runtime 
environment is dependent on the Web server and the technology. By directing the request 
to the right place, the Web server fulfills its responsibility. 

5. Sending Back the Results to the Browser 

The final step in a Web application is to make some kind of response to the 
operation and return that response to the browser. Mostly, the executed program (or 
script) specifies the content type and then writes the response to an output stream. When 
the Web browser receives the response, it will first look at the response header and 
determine the mime type so that it knows how to deal with the data. The most common 
type is “text/html”, but other types such as XML, unformatted text, GIFs and even stream 
audio, can also be sent by the Web server. 


no 



APPENDIX C. EAMS DATABASE RELATIONSHIP DIAGRAM 

AND SQL DDL CODE 


1, Relationship Diagram for EAMS Database 



Ready 


CAPS 


NUM 


Figure 56, EAMS Database Relationship Diagram 


2, SQL DDL Code for EAMS Database 


CREATE TABEE USERS 

( 

EOGIN ID VARCHAR(IO) NOT NUEE, 
PASSWORD VARCHAR(IO) NOT NUEE, 


111 











































































































USERCODE VARCHAR(IO) NOT NULE, 

USER ID VARCHAR(IO) NOT NULE, 

CONSTRAINT PK USERS PRIMARY KEY (LOGIN ID) 


CREATE TABLE STUDENTS 

( 

STUDENT ID NUMBER NOT NULL, 

SSN VARCHAR(IO) NOT NULL, 

NAME VARCHAR(IO) NOT NULL, 

MID NAME VARCHAR(IO) NOT NULL, 

LAST NAME VARCHAR(IO) NOT NULL, 

GENDER CHAR(I) NOT NULL, 

SECTION ID VARCHAR(IO) NOT NULL, 

PROGRAM ID VARCHAR(IO) NOT NULL, 

BIRTHDATE DATE NOT NULL, 

YEAR NUMBER NOT NULL, 

ADDRESS VARCHAR(40) NOT NULL, 

CITY VARCHAR(IO) NOT NULL, 

PROVINCE VARCHAR(IO) NOT NULL, 

LATHER NAME VARCHAR(IO) NOT NULL, 

REMAINING POINTS NUMBER(3) NOT NULL, 

EMAIL VARCHAR(30) NOT NULL, 

DORMITORY VARCHAR(IO) NOT NULL, 

CONSTRAINT PK STUDENTS PRIMARY KEY (STUDENT ID) 
CONSTRAINT LL STUDENTS I 

LOREIGN KEY (SECTION ID) RELERENCES SECTIONS 
CONSTRAINT LL_STUDENTS_2 

LOREIGN KEY (PROGRAM ID) RELERENCES PROGRAMS 
CONSTRAINT PL_STUDENTS_3 

EOREIGN KEY (DORMITORY) RELERENCES DORMITORY 


); 


CREATE TABLE SECTIONS 

( 

SECTION ID VARCHAR(2) NOT NULL, 

COMPANY NO NUMBER(4) NOT NULL, 

CONSTRAINT PK SECTIONS PRIMARY KEY (SECTION ID) 
CONSTRAINT EL SECTIONS I 

EOREIGN KEY (COMPANY NO) REEERENCES REGIMENT (UNIT ID) 


); 


CREATE TABLE ROOMS 

( 


II2 



ROOM NO VARCHAR(IO) NOT NULL, 

LOCATION VARCHAR(40) NOT NULL, 

EXPLANATION VARCHAR(IO) NOT NULL, 
CONSTRAINT PK ROOMS PRIMARY KEY (ROOM NO) 

); 


CREATE TABEE REGIMENT 

( 

UNIT ID NUMBER(3) NOT NUEE, 

UNIT NAME VARCHAR(40) NOT NULE, 

CONSTRAINT PK REGIMENT PRIMARY KEY (UNIT ID) 


CREATE TABEE PUNISHMENTS 

( 

STUDENT ID NUMBER(4) NOT NULE, 

PUNISHMENT NO NUMBER(3) NOT NULE, 

PUNISHMENT TYPE VARCHAR(IOO) NOT NUEE, 

RESUET VARCHAR(50) NOT NULE, 

POINTS TAKEN NUMBER(2) NOT NULE, 

PUNISHMENT DATE DATE NOT NULE 

CONSTRAINT PKPUNISHMENTS PRIMARY 

(STUDENT_ID,PUNISHMENT_NO) 

CONSTRAINT EE PUNISHMENTS I 

EOREIGN KEY (STUDENT ID) REEERENCES STUDENTS 


); 


CREATE TABEE PROGRAMS 

( 

PROGRAM ID VARCHAR(I5) NOT NULE, 

PROGRAM NO VARCHAR(60) NOT NULL, 

CONSTRAINT PK PROGRAMS PRIMARY KEY (PROGRAM ID) 

); 


CREATE TABEE EOGIN RECORDS 

( 

EOGIN ID VARCHAR(IO) NOT NULE, 

EOGIN TIME VARCHAR(40) NOT NULE, 

HOST NAME VARCHAR(90) NOT NULL, 

CONSTRAINT PKLOGINRECORDS PRIMARY KEY 
EOGINTIME) 

CONSTRAINT EE EOGIN RECORDS I 

EOREIGN KEY (EOGIN ID) REEERENCES USERS 


); 


KEY 


(EOGINID, 


II3 



CREATE TABLE LOCKED GRADES 

( 

NO NUMBER NOT NULL, 

EXAM NAME VARCHAR(20) NOT NULL, 

LOCKED DATE DATE NOT NULL, 

CONSTRAINT PK LOCKED GRADES PRIMARY KEY (NO) 


CREATE TABLE FACULTY 

( 

FACULTY ID VARCHAR(IO) NOT NULL, 

SSN VARCHAR(IO) NOT NULL, 

NAME VARCHAR(IO) NOT NULL, 

MID NAME VARCHAR(IO) NOT NULL, 

LAST NAME VARCHAR(IO) NOT NULL, 

DEGREE VARCHAR(30) NOT NULL, 

PROGRAM ID VARCHAR(IO) NOT NULL, 

RANK VARCHAR(IO) NOT NULL, 

EMAIL VARCHAR(30) NOT NULL, 

ROOM NO VARCHAR(IO) NOT NULL, 

TEL-NO VARCHAR(IO) NOT NULL, 

ADDRESS VARCHAR(IOO) NOT NULL, 

CITY VARCHAR(50) NOT NULL, 

PROVINCE VARCHAR(50) NOT NULL, 

CONSTRAINT PK FACULTY PRIMARY KEY (FACULTY ID) 
CONSTRAINT FL FACULTY l 

FOREIGN KEY (PROGRAM ID) REFERENCES PROGRAMS 
CONSTRAINT FL_FACULTY_2 

FOREIGN KEY (ROOM NO) REFERENCES ROOMS 

); 


CREATE TABLE DORMITORY 

( 

DORMITORY NO VARCHAR(IO) NOT NULL, 

LOCATION VARCHAR(40) NOT NULL, 

CAPACITY NUMBER(2) NOT NULL, 

EXPLANATION VARCHAR(90) NOT NULL, 

CONSTRAINT PK DORMITORY PRIMARY KEY (DORMITORY NO) 

); 


CREATE TABLE DEPARTMENTS 

( 

DEPARTMENT NO NUMBER(2) NOT NULL, 
DEPARTMENT NAME VARCHAR(40) NOT NULL, 
DHEAD ID VARCHAR(IO) NOT NULL, 


114 



CONSTRAINT PK DEPARTMENTS PRIMARY KEY (DEPARTMENT NO) 
CONSTRAINT EK DEPARTMENTS l 

EOREIGN KEY (DHEAD ID) REEERENCES EACUETY (EACULTY ID) 


CREATE TABEE COURSES 

( 

COURSE ID VARCHAR(6) NOT NULE, 

COURSE NAME VARCHAR(70) NOT NULE, 

CREDITS VARCHAR(7) NOT NULL, 

COURSE CREDIT NUMBER (2) NOT NULL, 

COURSE EXPLANATION VARCHAR(4000) NOT NULL, 
CONSTRAINT PK COURSES PRIMARY KEY (COURSE ID) 


CREATE TABLE COURSE GRADES 

( 

STUDENT ID NUMBER(4) NOT NULL, 

COURSE ID VARCHAR(IO) NOT NULL, 

EIRST MIDTERM NUMBER(3) NOT NULL, 

SECOND MIDTERM NUMBER(3) NOT NULL, 

EINAL NUMBER(3) NOT NULL, 

YEAR TAKEN NUMBER(6) NOT NULL, 

COURSE GRADE VARCHAR(2) NOT NULL, 

SEMESTRE TAKEN NUMBER(2) NOT NULL, 

CONSTRAINT PKCOURSEGRADES PRIMARY KEY (STUDENTID, 
COURSE ID, YEAR TAKEN) 

CONSTRAINT EK COURSE GRADES l 

EOREIGN KEY (STUDENT ID) REEERENCES STUDENTS 
CONSTRAINT EK_COURSE_GRADES_2 

EOREIGN KEY (COURSE ID) REEERENCES COURSES 


CREATE TABLE COMMAND PERSONEL 

( 

PERSON ID VARCHAR(IO) NOT NULL, 
SSN VARCHAR(IO) NOT NULL, 

NAME VARCHAR(IO) NOT NULL, 

MID NAME VARCHAR(IO) NOT NULL, 
LAST NAME VARCHAR(IO) NOT NULL, 
RANK VARCHAR(IO) NOT NULL, 
COMMAND UNIT NUMBER(4) NOT NULL, 
EMAIL VARCHAR(30) NOT NULL, 

ROOM NO VARCHAR(IO) NOT NULL, 
TEL-NO VARCHAR(IO) NOT NULL, 
ADDRESS VARCHAR(IOO) NOT NULL, 


115 



CITY VARCHAR(50) NOT NULL, 

PROVINCE VARCHAR(50) NOT NULL, 

CONSTRAINT PK COMMAND PERSONEL PRIMARY KEY (PERSON ID) 
CONSTRAINT EK COMMAND PERSONEE I 

EOREIGN KEY (COMMAND UNIT) REEERENCES REGIMENT 
CONSTRAINT EK_COMMAND_PERSONEE_2 

EOREIGN KEY (ROOM NO) REEERENCES ROOMS 


CREATE TABEE CLASSROOMS 

( 

CLASSROOM NO VARCHAR(IO) NOT NULL, 

LOCATION VARCHAR(60) NOT NULL, 

CAPACITY NUMBER (3) NOT NULE, 

EXPLANATION VARCHAR(90) NOT NULL, 

CONSTRAINT PK CLASSROOMS PRIMARY KEY (CLASSROOM NO) 


CREATE TABEE CLASS ENROEEMENT 

( 

COURSE ID VARCHAR(IO) NOT NULE, 

SECTION ID VARCHAR(IO) NOT NULE, 

SECTION YEAR VARCHAR(IO) NOT NULE, 

CLASSROOM NO VARCHAR(IO) NOT NULL, 

COURSETIME NUMBER(IO) 

COURSE DATE VARCHAR(IO) NOT NULE, 

EACUETY ID VARCHAR(IO) NOT NULE, 

CONSTRAINT PKCEASSENROEEMENT PRIMARY KEY (COURSEID, 
SECTION ID, SECTION YEAR, CEASSROOM NO) 

CONSTRAINT EK CEASS ENROEEMENT I 

EOREIGN KEY (COURSE ID) REEERENCES COURSES 
CONSTRAINT EK_CEASS_ENROEEMENT_2 

EOREIGN KEY (SECTION ID) REEERENCES SECTIONS 
CONSTRAINT EK_CEASS_ENROEEMENT_3 

EOREIGN KEY (CEASSROOM NO) REEERENCES CEASSROOMS 
CONSTRAINT EK_CEASS_ENROEEMENT_4 

EOREIGN KEY (COURSE ID) REEERENCES COURSES 
CONSTRAINT EK CEASSROOMS 

EOREIGN KEY (EACUETY ID) REEERENCES EACUETY 


CREATE TABEE AWARDS 

( 

STUDENT ID VARCHAR(IO) NOT NULE, 
AWARD NO NUMBER(2) NOT NULE, 
AWARD TYPE VARCHAR(60) NOT NULE, 


II6 



RESULT VARCHAR(60) NOT NULL, 

AWARD DATE DATE NOT NULL, 

CONSTRAINT PK AWARDS PRIMARY KEY (STUDENT ID, AWARD NO) 
CONSTRAINT LK AWARDS l 

LOREIGN KEY (STUDENT ID) REEERENCES STUDENTS 


CREATE TABLE ANNOUNCEMENTS 

( 

AN NUMBER NUMBER(IO) NOT NULL, 

ANNOUNCEMENT VARCHAR(4000) NOT NULL, 

CATEGORY NUMBER(IO) NOT NULL, 

PUB DATE VARCHAR(20) NOT NULL, 

CONSTRAINT PK ANNOUNCEMENTS PRIMARY KEY (AN NUMBER) 

); 


CREATE TABLE ANNOUNCE CAT 

( 

CATEGORY NUMBER(IO) NOT NULL, 

COVERAGE VARCHAR(IO) NOT NULL, 

CONSTRAINT PK ANNOUNCE CAT PRIMARY KEY (CATEGORY NUMBER) 


117 



THIS PAGE INTENTIONALLY LEET BLANK 


II8 



APPENDIX D. SOURCE CODE OF THE IMPLEMENTATION 


1, Source Code of the Academy Servlet 

!** 

* Title: Academy.]ava 

* Description: The main servlet that has all the application logic for the system 

* @author : Rasim Topuz, Ltjg, Turkish Navy 

* @version 1.0, February 2002 

*/ 

package webadmin; 

import javax.servlet.*; 
import javax.servlet.http. *; 
import java.io.*; 
import java.sql.*; 
import java.util.*; 

/* 

Class Decleration for Academy 

*/ 

public class Academy extends FIttp Servlet 

{ 


private PoolManager poolMgr; 
private Log Writer log Writer; 


/* 

Class initilization for Academy 

*/ 

public void init() throws ServletException 

{ 

//this is the connection pool manager that will be 
//used for the whole application 
poolMgr = PoolManager.getInstanceO; 

//this is the log fde to record all the activities done by servlet 
PrintWriter pw = new PrintWriter(System. err,true);// 
logWriter = new LogWriter("AcademyServlet",2,pw); 
try{ 

pw = new PrintWriter(new FileWriter("ServletActivityLogFile", true), tme); 

} 

catch(IOException e) { 
logWriter.log(e,"servlet initilized", 1); 


} 

logWriter. setPrintWriter(pw); 

logWriter.logC'servlet initilized",2);//2 means info for the log 

} 


/* 


119 




Method doPost: Used for handling user requests 

*/ 


public void doPost(HttpServletRequest req, HttpServletResponse res) 
throws lOException, ServletException 

{ 

getTheParameters(req,res); 

} 


/* 

Class destroy method for Academy 

*/ 

public void destroy() 

{ 

poolMgr.releaseO; 
super, destroy 0; 

} 


/* 

Method getTheParameters: handles the request. 

*/ 

public void getTheParameters(HttpServletRequest request,HttpServletResponse respond)) 
int count = 0; 

Hashtable myParameterValues = new Hashtable(); 

Enumeration paramNames = request.getParameterNames(); 

String value = 

//load all parameters into a hashtable. 
while(paramNames.hasMoreElements()) { 

String paramName = (String)paramNames.nextElement(); 
count++; 

logWriter.logC'post request & parameters received from " + request.getRemoteAddr(),2); 
String)] paramValues = 
request.getParameterValues(paramName); 
if (paramValues.length == 1) { 

String paramValue = paramValues[0]; 
if (paramValue.length() == 0){ 

//no value 
} else) 

value = paramValue; 

} 

} else ) 

for(int i=0; i<paramValues.length; i++) ) 

value = value + paramValues[i].toString(); 

}//end of for 

}//end of if 

Object val = myParameterValues.put(paramName,value); 

}//end of while 

//this part handles the user request according to the action parameter 
Object val = myParameterValues.get("action"); 
if (val != null) ) 

if (val.toString().equals("LOGIN"))) 

executeLogin(myParameterValues,request,respond); 

} else if (val.toString().equals("courses"))) 


120 



executeCourses(myParameterValues, request, respond); 

} else if (val.toString().equals("home_page")){ 

executeHomePage(myParameterValues, request, respond); 

} else if (val.toString().equals("schedule")){ 

executeSchedule(myParameterValues, request, respond); 

} else if (val.toString().equals("personal_update")){ 
executeUpdate(myParameterValues, request, respond); 

} else if (val.toString().equals("studentsForProf')){ 

executeStudentsForProf(myParameterValues, request, respond); 

} else if (val.toString().equals("gradesForStudent")){ 

executeGradesForStudent(myParameterValues, request, respond); 

} else if (val.toString().equals("gradeUpdate")){ 

executeGradeUpdate(myParameterValues, request, respond); 

} else if (val.toString().equals("change_Password")) { 

executeCliangePassword(myParameterValues, request, respond); 

} else if (val.toString().equals("companyInfoForStudent")){ 

executeCompanyInfoForStudent(myParameterValues, request, respond); 

} else if (val.toString().equals("department")){ 

executeDepartment(myParameterValues, request, respond); 

} else if (val.toString().equals("studentsForDepFlead")){ 

executeStudentsForDepFlead(myParameterValues, request, respond); 

} else if (val.toString().equals("unitsForRegiment")){ 

executeUnitsForRegiment(myParameterValues, request, respond); 

} else if (val.toString().equals("showCommanderInfo")){ 

executeShowCommanderInfo(myParameterValues, request, respond); 

} else if (val.toString().equals("showCompanyInfo")){ 

executeShowCompanyInfo(myParameterValues, request, respond); 

} else if (val.toString().equals("showSectionInfo")){ 

executeSectionInfoForRegiment(myParameterValues, request, respond); 

} else if (val.toString().equals("showStudentInfoForRegiment")){ 

executeStudentInfoForRegiment(myParameterValues, request, respond); 

} else if (val.toString().equals("personal_information")){ //personal information 
executePersonal(myParameterValues, request, respond); 

} else if (val.toString().equals("log_off')){ //personal information 
executeLogOff(myParameterValues, request, respond); 

} else { 

logWriter.logC'Unknown action requested from " + request.getRemoteAddr(),l); 
} //end of if 
}//end of if 

}//end of getParametersO 


Method executeLogOff:executes the log Off sequence for theuser, and sends a 
log off jsp fde 

*/ 

public void executeLogOff(Hashtable myParameterValues, 
FlttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'log off sequence requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the cookiecheck must be affirmative. 
Communicator myLogOff; 
myLogOff = new Communicator(); 


121 



doLogOff(request, respond); 

java.util.Date myDate = new java.util.Date(); 
myLogOff.setTime(myDate.toString()); 

myLogOff.setName(myUser.myName + " " +myUser.myLastName); 

HttpSession session = request.getSession(tme); 
session. putValue("myLogOff',myLogOff); 
gotoPage("/sre/webadmin/LogOff.jsp",request,respond); 

}else { 

logWriter.logC'eookie eheek is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of exeeute log off 


/* 

Method eheekCookie:eheeks if the eurrent request and the eookies are the same. 

*/ 

private void doLogOff(HttpServletRequest request, 

HttpServletResponse response) { 

Cookie)] myCookie = request.getCookies(); 

UserType myUser = new UserType(); 

//String user = 

String userTime = 

for(int i=0; i<myCookie.length; i++) { 

Cookie eookie = myCookie[i]; 
if (eookie.getName().equals("loginId")) { 
myUser.myLoginId = eookie.gefValue(); 

} 


}//end of for 


//delete the login information from the database 

Conneetion eonn = poolMgr.getConneetion("myThesis"); 
String user = myUser.myLoginId; 
boolean result = false; 
if (eonn == null) 

{ 

logWriter.logC'database eonneetion error",1); 

} 


ResultSetMetaData md = null; 

Statement stmt = null; 
try 

{ 

stmt = eonn.ereateStatement(); 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append("delete from login reeords where login_id="'); 
myQuery.append(user + ""'); 
stmt.exeeuteUpdate(myQuery.toString()); 


122 



stmt.closeQ; 

poolMgr. freeCormection(" myThesis", conn); 
}//end of try 
catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 

} 


}//end of do log off 


/* 

Method execute Studentinfo: executes Studentinfo request for regiment personnel 

*/ 

public void executeStudentInfoForRegiment(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 


logWriterdogC Student info for regiment requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 

if (myUser. state) {//the result of the cookiecheck must be affirmative. 
Communicator myFacuity; 
myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 

myFaculty = getStudentInfoForRegiment(myParameterValues,myUser); 

myFaculty.setLogin(myUser.myLoginld); 

myF acuity. setN ame (myUser .myN ame); 

myFaculty. setLastN ame(myU ser. myLastN ame); 

myF acuity. setOperation(" showStudentInformation"); 

myFaculty. setT ime(myDate .to StringO); 

FlttpSession session = request.getSession(true); 
session.pufValue("myRegiment",myFaculty); 

logWriter.logC'Student info for regiment sent to " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),2); 
gotoPage("/src/webadmin/Regiment.j sp" ,request,respond); 

} else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute student info for regiment. 


/* 

Method getStudentInfoForRegiment: gets the data from the database and sends 
the data to the proper jsp file. 

*/ 

public Communicator getStudentInfoForRegiment(Ftashtable myParameterValues, 

UserType myUser) { 

Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 

Communicator my Regiment = new Communicator(); 

123 



int commandUnit = 0; 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error", 1); 

//return false; 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

Object val = myParameterValues.get("student_id"); 

String studentid = val.toString().trim(); 

try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append(" select u.login id"); 
myQuery.append(" from users u, students s "); 
myQuery.append(" where u.user id = s.student id and "); 
myQuery.append(" s.student id^'" + studentid + 
rs = stmt.executeQuery(myQuery.toString()); 
rs.next(); 

String studentLogin = rs.getString(l); 

myRegiment = getStudentPersonal(studentLogin); 
myRegiment.setNamel(myRegiment.getName()); 
myRegiment. setLastNamel(myRegiment.getLastName()); 
myRegiment. setLogin 1 (myRegiment. getLoginQ); 

StringBuffer awardinfo = new StringBufferQ; 
awardInfo.append(" select distinct s.student id, "); 
awardInfo.append(" a.award_no,a.award_type,a.result,a.award_date"); 
awardInfo.append(" from students s, awards a, users u "); 
awardInfo.append(" where s.student id = u.user id and "); 
awardInfo.append(" s.student id = a.student id and "); 
awardInfo.append(" u.login id = "); 

StringBuffer punishmentinfo = new StringBufferQ; 
punishmentInfo.append(" select distinct s.student id, "); 
punishmentinfo.append(" p.punishment_no,p.punishment_type, "); 
punishmentinfo.append(" p.result,p.points_taken,p.punishment_date "); 
punishmentinfo.append(" from students s, punishments p, users u "); 
punishmentinfo.append(" where s.student id = u.user id and "); 
punishmentinfo.append(" s.student id = p.student id and "); 
punishmentinfo.append(" u.login id = "); 

awardinfo.appendC"" + studentLogin + 

rs = stmt. executeQuery (awardinfo. to StringO); 

String award = 
while(rs.next()){ 
rs.getString(l); 
award += " <tr> "+ 


124 



"<td width=\"84\" height=\"19\">"+ 
rs.getString(2) + "</td>"+ 

"<td width=\"98\" height=\"19\">"+ 
rs.getString(3) + "</td>"+ 

"<td width=\"248\" height=\"19\">"+ 
rs.getString(4) + "</td>"+ 

"<td width=\"231\" height=\"19\" colspan=\"2\">"+ 
rs.getString(5).substring(0,ll) + "</td>"+ 

" </tr>"; 


myRegiment.setAwards(award); 
punishmentlnfo.appendC"" + studentLogin + 

rs = stmt.executeQuery(puiiishmeiitInfo.toString()); 
String punishments = 
while(rs.next()){ 
rs.getString(l); 
punishments += " <tr> "+ 

"<td width=\"84\" height=\"19\">"+ 
rs.getString(2) + "</td>"+ 

"<td width=\"98\" height=\"19\">"+ 
rs.getString(3) + "</td>"+ 

"<td width=\"248\" height=\"19\">"+ 
rs.getString(4) + "</td>"+ 

"<td width=\"126\" height=\"19\">"+ 
rs.getString(5) + "</td>"+ 

"<td width=\"99\" height=\"19\" >"+ 
rs.getString(6).substring(0,ll) + "</td>"+ 

" </tr>"; 


} 

myQuery = new StringBufferQ; 
myQuery.append("select remaining_points "); 
myQuery.append("from students "); 
myQuery.append("where student id = + studentid + 

rs= stmt.executeQuery(myQuery.toString()); 
rs.next(); 

punishments += " <tr> "+ 

"<td width='400' colspan='3' height='19'>"+ 
"</td>"+ 

"<td width=\"126\" height=\"19\">"+ 

"Current Remaining Points" + "</td>"+ 

"<td width=\"99\" height=\"19\">"+ 
rs.getString(l) + "</td>"+ 

" </tr>"; 


myRegiment.setPunishments(punishments); 

String year = "2002";//current year and semester was assumed here 
String semesterValue = "2"; 

myQuery = new StringBufferQ; 

// - 

myQuery.append(" select distinct f name,f last name, c.course id, "); 
myQuery.append(" co.course_name,g.first_midterm, "); 
myQuery.append(" g.second_midterm,g.final,g.course grade, "); 
myQuery.append(" f email,co.credits,co.course explanation "); 

125 




myQuery.append(" from class enrollment c, faculty f, "); 
myQuery.append(" students s, course grades g,users u, "); 
myQuery.append(" courses co "); 

myQuery.append(" where u.user id = s.student id and "); 
myQuery.append(" s.student id = g.student id and "); 
myQuery.append(" s.section id = c.section id and "); 
myQuery.append(" c.course id = g.course id and "); 
myQuery.append(" c.faculty id = f faculty id and "); 
myQuery.append(" u.login id = + studentLogin + and "); 

myQuery.append(" c.course id = co.course id and "); 
myQuery.append(" g.year taken = + year + and "); 

myQuery.append(" g.semestre taken = + semesterValue + 


rs = stmt.executeQuery(myQuery.toString()); 
String fname = 

String fLname = 

String cld = 

String cName = 

String firstExam = 

String secondExam = 

String fmalExam = 

String courseGrade = 

String fmail = 

String courseExp = 

String courseCredit = 

String fid = 

String grades = 

while (rs.nextO) 

{ 

fname = rs.getString(l); 

fLname =rs.getString(2); 

cld = rs.getString(3); 

cName = rs.getString(4); 

firstExam = rs.getString(5); 

secondExam = rs.getString(6); 

fmalExam = rs.getString(7); 

courseGrade = rs.getString(8); 

fmail = rs.getString(9); 

fid = fname.substring(0,l).concat(fLname); 

courseExp = rs.getString(lO); 

courseCredit = rs.getString(l 1); 

String profName = fname + " " + fLname; 
for(int i=(l l-profName.length());i>=0;i—){ 
profName += " 

} 


grades += "<tr>"+ 

"<td width=\"86\" height=\"22\" bgcolor=\"#C0C0C0\" vahgn=\"middle\">" + 

"<p ahgn=\"center\">"+ 

"<INPUT onclick=\"javascript:facultyview("' + fname + 

"V" + fLname + + fid + + fmail + "',200,200)\" type^button value=\""+profName + "\">"+ 

"</p>"+ 

"</td>" + 


126 



"<td widths" 108\" height=\"22\" bgcolor=\"#COCOCO\">"+ 

"<p align=\"center\">"+ 

"<INPUT onclick=\"javascript:courseview("' + cld + 

"V" + cName + + courseExp + + courseCredit + "',400,300)\" type=button value=\""+cld + 

"\">"+ 

"</p>"+ 

"</td>" + 

"<td width=\"94\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<foiit size=\"2\">"+cName +"</font></td>"+ 

"<td widths" 106\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + firstExam + "</font></td>"+ 

"<td widths" 125\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + secondExam + "</foiit></td>"+ 

"<td width=\"63\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + finalExam + "</foiit></td>"+ 

"<td width=\"94\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + courseGrade + "</font></td>"+ 

" </tr>"; 

}//end of while 

myRegiment.setCourses(grades); 

myUser = new UserType(); 

myUser.myLoginId = studentLogin; 

myRegiment.setSchedule(getSchedule(myUser)); 

rs.closeO; 

stmt.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriterdog(e,"database connection error", 1); 

} 

finally 

{ 

poolMgr.freeConnection("myThesis", conn); 
logWriter.logC'student info retrieved",2); 
return myRegiment; 

} 


}//end of getsectioninfo 

/* 

Method executeSectionInforForRegiment: executes section info for regiment. 

*/ 

public void executeSectionInfoForRegiment(Flashtable myParameterValues, 
FlttpServletRequest request, 

FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'section info for regiment requested by " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),2); 
if (myUser.state) {//the result of the cookiecheck must be affirmative. 


Communicator myFaculty; 


127 



myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 

myFaculty = getSectionInfoForRegiment(myParameterValues,myUser); 

myFaculty.setLogin(myUser.myLoginld); 

myFaculty. setName(myUser.myName); 

myFaculty. setLastN ame(myU ser. myLastN ame); 

myFaculty.setOperation("sectionInfoForRegiment"); 

myFaculty.setTime(myDate.toString()); 

HttpSession session = request.getSession(true); 
session.putValue("myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.jsp",request,respond); 

}else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of execute units for regiment. 


/* 

Method getSectionInfoForRegiment: gets the data from the database and sends 
the data to the proper jsp file. 

*/ 

public Communicator getSectionInfoForRegiment(Hashtable myParameterValues,UserType myUser){ 
Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 

Communicator my Regiment = new Communicator(); 
int commandUnit = 0; 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 


} 

ResultSet rs = null; 
ResultSetMetaData md = null; 
Statement stmt = null; 


Object val = myParameterValues.get("section"); 
String section = val.toString().trim(); 
myRegiment.setSection(section); 


try 

{ 

stmt = conn, create Statement(); 

//first get the necessary info about the commander 
StringBuffer myQuery = new StringBuffer(); 
myQuery.append(" select r.rank,r.name,r.last_name, "); 
myQuery.append(" r.command_unit,c.unit_name "); 
myQuery.append(" from command_personel r, users u, regiment c "); 
myQuery.append(" where u.login id = + myUser.myLoginId + and "); 

myQuery.append(" u.user id = r.person id and "); 
myQuery.append(" r.command unit = c.unit id "); 

128 



rs= stmt. executeQuery(myQuery. toStringO); 
rs.next(); 

myRegiment.setRegComName(rs.getString(l) + " " + 
rs.getString(2) + " " + 
rs.getString(3)); 

myQuery = new StringBufferQ; 

myQuery.append(" select r.unit name "); 

myQuery.append(" from sections s, regiment r "); 

myQuery.append(" where s.section id = + section + and "); 

myQuery.append(" s.company no = r.unit id "); 

rs = stmt.executeQuery(myQuery.toString()); 

rs.next(); 

myRegiment.setCompanyName(rs.getString(l)); 
myQuery = new StringBufferQ; 

myQuery.append(" select student_id,name,last_name,remaining_points "); 
myQuery.append(" from students "); 
myQuery.append(" where section id = + section + "); 

myQuery.append(" order by student id "); 

rs= stmt. executeQuery(myQuery. toStringQ); 

String regiment = 

String sId = 
int count = 0; 
while(rs.next()) { 
count++; 

sld= rs.getString(l); 

regiment += "<tr>"+"<td width='20%' height='r>"+ 

"<form method='POST' style='word-spacing: 0; margin: O'"+ 

" action='/servlet/webadmin.Academy' onSubmit=">"+ 

" <p style='line-height: 100%; margin: 0'>"-l- 

"<input type='submit' value="'-l-sld-l-"'name='student_id'></p>"-l- 

"<input type='hidden' name='action' value='showStudentInfoForRegimenf>"-l- 

" </form></td>"-I- 

"<td width='20%' height='r>" -I- rs.getString(2) -I- "</td>"-l- 

"<td width='20%' height-1' colspan='2'>"-l- rs.getString(3) -l-"</td>"-l- 

"<td width='20%' height='r>"-l- rs.getString(4) -l-"</td> </tr>"; 

}//end of while 

myRegiment.setAwards(String.valueOf(count)); 

myRegiment.setRegiment(regiment); 

rs.closeQ; 

stmt.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error",1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return myRegiment; 

} 


129 



}//end of getsectioninfo 


/* 

Method executeShowCompanyInfo:executes Compnayinfo request for the regiment personnel 

*/ 

public void executeShowCompanyInfo(Hashtable myParameterValues, 

HttpServletRequest request, 

HttpServletResponse respond) { 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriterdogC'company info for regiment requested by " + myUser.myLoginid + 

" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the cookiecheck must be affirmative. 

Communicator myFaculty; 
myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
myFaculty = getCompanyInfo(myParameterValues,myUser); 
myFaculty.setLogin(myUser.myLoginld); 
myFaculty.setName(myUser.myName); 
myFaculty. setLastN ame(myU ser. myLastN ame); 
myFaculty. setOperation(" showCompany Info"); 
myFaculty.setTime(myDate.toString()); 

FIttpSession session = request.getSession(true); 
session.putValueC'myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.jsp",request,respond); 

{else { 

logWriter.logC'cookie check is in valid for " + myUser. my Loginid + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute company info for regiment. 

/* 

Method getCompanyInfo: gets the data from the database and sends 
the data to the proper jsp file. 

*/ 

public Communicator getCompanyInfo(FIashtable myParameterValues,UserType myUser) { 
Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 

Communicator my Regiment = new Communicator(); 
int commandUnit = 0; 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error", 1); 

//return false; 

{ 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 


130 



Object val = myParameterValues.get("battalioii_no"); 

Object val2 = new ObjectQ; 

String companyNo = 

String temp = 

if (myParameterValues.containsKeyC 1")) { 
temp = "1"; 

}else if (myParameterValues.containsKey("2")){ 
temp = "2"; 

}else if (myParameterValues.containsKey("3")){ 
temp = "3"; 

}else if (myParameterValues.containsKey("4")){ 
temp = "4"; 

}else{ 

logWriter.logC Parameter error",1); 

} 

companyNo = val.toString() + temp; 

try 

{ 

stmt = conn, create Statement(); 

//first get the necessary info about the commander 
StringBuffer myQuery = new StringBuffer(); 
myQuery.append(" select r.rank,r.name,r.last name, "); 
myQuery.append(" r.command_unit,c.unit_name "); 
myQuery.append(" from command_personel r, users u, regiment c "); 
myQuery.append(" where u.login id = + myUser.myLoginId + and 

myQuery.append(" u.user id = r.person id and "); 
myQuery.append(" r.command unit = c.unit id "); 

rs= stmt.executeQuery(myQuery.toString()); 
rs.next(); 

myRegiment.setRegComName(rs.getString(l) + " " + 
rs.getString(2) + " " + 
rs.getString(3)); 
myQuery = new StringBufferQ; 

myQuery.append(" select r.person_id,r.rank,r.name,r.last_name, "); 
myQuery.append(" c.unit_name,u.login_id "); 
myQuery.append(" from command_personel r,regiment c,users u "); 
myQuery.append(" where r.command unit = + companyNo + and " 

myQuery.append(" r.command unit = c.unit id and "); 
myQuery.append(" u.user id = r.person id "); 

rs= stmt. executeQuery(myQuery. toStringQ); 
rs.next(); 

myRegiment.setUserId(rs.getString(l)); 
myRegiment.setCompComName(rs.getString(2) + " " + 
rs.getString(3) + " " + 
rs.getString(4)); 

myRegiment.setCompanyName(rs.getString(5)); 

myRegiment.setLoginl(rs.getString(6)); 

myQuery = new StringBufferQ; 
myQuery.append(" select section id "); 
myQuery.append(" from sections "); 

131 



myQuery.append(" where company no = + companyNo 

rs= stmt. executeQuery(myQuery. toStringO); 

rs.next(); 

myRegiment.setSection(rs.getString(l)); 

rs.next(); 

my Regiment.setCourse(rs.getString( 1)); 

rs.closeO; 

stmt.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return myRegiment; 

} 


}//end of getCompanyInfo 


/* 

Method executeShowCommanderInfo:executes Commanderinfo request for 
regiment personnel 

*/ 

public void executeShowCommanderInfo(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 

myUser = checkCookie(request,respond); 

logWriter.logC'commander info for regiment requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 

if (myUser.state) {//the result of the cookiecheck must be affirmative. 

Communicator myFaculty; 

Object val = myParameterValues.get("person_loginid"); 

myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
myFaculty = getRegimentPersonal(val.toString()); 
myFaculty. setLogin(myUser.myLoginld); 
myFaculty. setName(myUser.myName); 
myFaculty. setLastN ame(myU ser. myLastN ame); 
myFaculty. setOperation("commanderInfoForRegiment"); 
myFaculty.setTime(myDate.toString()); 

FlttpSession session = request.getSession(tme); 
session.putValueC'myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.jsp",request,respond); 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 


132 



}//end of execute shoe commander info. 


/* 

Method executeUnitsForRegiment: executes units Info request for 
regiment personnel 

*/ 

public void executeUnitsForRegiment(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond) { 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'Units info for regiment requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty; 
myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
myFaculty = getUnitsForRegiment(myUser); 
myFaculty. setLogin(myUser.myLoginld); 
myFaculty.setName(myUser.myName); 
myFaculty. setLastN ame(myU ser. myLastN ame); 
myFaculty.setOperation("unitsForRegiment"); 
myFaculty.setTime(myDate.toString()); 

HttpSession session = request.getSession(true); 
session.putValueC'myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.jsp",request,respond); 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute units for regiment. 

/* 

Method getUnitsInfoForRegiment: gets the data from the database and sends 
the data to the proper jsp fde. 

*/ 

public Communicator getUnitsForRegiment(UserType myUser) { 

Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 

Communicator my Regiment = new Communicator(); 
int commandUnit = 0; 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

//return false; 

{ 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 


133 



try 

{ 

stmt = conn, create Statement(); 

//first get the necessary info about the commander 
StringBuffer myQuery = new StringBuffer(); 
myQuery.append(" select r.person_id,r.rank,r.name,r.last_name, "); 
myQuery.append(" r.command_unit,c.unit_name "); 
myQuery.append(" from command_personel r, users u, regiment c "); 
myQuery.append(" where u.login id = + myUser.myLoginId + and "); 

myQuery.append(" u.user id = r.person id and "); 
myQuery.append(" r.command unit = c.unit id "); 
rs= stmt.executeQuery(myQuery.toString()); 
rs.next(); 

myRegiment.setUserId(rs.getString(l)); 

myRegiment.setRegComName(rs.getString(2) + " " + 
rs.getString(3) + " " + 
rs.getString(4)); 
commandUnit = rs.getlnt(5); 
myRegiment.setCompanyName(rs.getString(6)); 

//check what is the command type. 

if (commandUnit == 2) {//he is the regiment commander 

myQuery = new StringBuffer(); 

myQuery.append(" select c.unit_name,r.rank,r.name,r.last_name, "); 
myQuery.append(" r.person id, u.login id , r.command unit"); 
myQuery.append(" from command_personel r,regiment c,users u "); 
myQuery.append(" where r.command unit <15 and "); 
myQuery.append(" r.command unit > 10 and "); 
myQuery.append(" r.command unit = c.unit id and "); 
myQuery.append(" u.user_id= r.person id "); 
myQuery.append(" order by r.command unit"); 

rs = stmt.executeQuery(myQuery.toString()); 
int number = 0; 

String regiment = 
while (rs.nextQ) { 
number = 0; 
regiment += " <tr> "+ 

" <td width='39%' height='19' bgcolor='#0000FF'><b><font color='#FFFFFF'>Battalion name:</font> 

</b></td>"+ 

" <td width='61%' height='19' bgcolor='#0000FF'><font color='#FFFFFF'>"+ 
rs.getString(l) + "</font></td> </tr> <tr>"+ 

" <td width='39%' height='64'><b>Battalion Commander: </b></td>"+ 

" <td width='61%' height='64'>"+ 

"<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit=">"+ 

" <p style='line-height: 100%; margin: O'xinput type='submit' value="'-l- 
rs.getString(2) -I-" " -I- rs.getString(3) -I-" " -I- rs.getString(4) -l- 
name='commander'></p>"-l- 

" <input type='hidden' name='person_id' value="'-l- rs.getString(5) -I- '">"-1- 
" <input type='hidden' name='person_loginid' value="'-l- rs.getString(6) -I- '">"-1- 
" <input type='hidden' name='action' value='showCommanderInfo'>"-l- 

134 



" </form> </td> </tr> <tr>"+ 

" <td width='39%' height='r><b>Companies in the battalion:</b></td>"+ 

" <td width='61%' height-r>"+ 

"<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit=">"+ 

" <p style='line-height: 100%; margin: 0'>"-l- 

"<input type='submit' value="'-l- -l-l-number -I-". Company' name='" -I- number -I- '">"-1- 
"<input type='submit' value='"-l- -l-l-number -I-". Company' name='" -I- number -I- '">"-1- 
"</p> <p style='line-height: 100%; margin: 0'>&nbsp;</p>"-l- 

"<p style='line-height: 100%; margin: 0'>"-l- 

"<input type='submit' value='"-l- -l-l-number -I-". Company' name='" -I- number -I- '">"-1- 
"<input type='submit' value='"-l- -l-l-number -I-". Company' name='" -I- number -I- '">"-1- 
"</p>"-r 

" <input type='hidden' name='battabon_no' value='" -I- rs.getString(7) -l-'">"-l- 
" <input type='hidden' name='action' value='showCompanyInfo'>"-l- 
" </form> </td> </tr>"; 

}//end of while 

myRegiment. setRegiment(regiment); 

} else if ((commandUnit >10) && (commandUnit < 15)) {//battalion commmander 
String regiment <tr> "-I- 

"<td width='39%' height='19' bgcolor='#0000FF'><b><font color='#FFFFFF'>Battabon name:</font> 

</b></td>"-^ 

"<td width='61%' height='19' bgcolor='#0000FF'><font color='#FFFFFF'>"-K 
myRegiment.getCompanyNameO -I- "</font></td> </tr> <tr>"-l- 
"<td width='39%' height='l'><b>Companies in the battalion:</b></td>"-l- 
" <td width-61%' height='l'>"-i- 

"<form method='POST' style='word-spacing: 0; margin: O' aetion='/servlet/webadmin.Academy' 
onSubmit=">"-l- 

" <p style='line-height: 100%; margin: 0'>"-l- 
"<input type='submif value='l.Company' name='" -I- 1 -I- '">"-1- 
"<input type='submif value='2.Company' name='" -I- 2 -I- '">"-1- 
"</p> <p style='line-height: 100%; margin: 0'>&nbsp;</p>"-l- 
"<p style='line-height: 100%; margin: 0'>"-l- 
"<input type='submif value='3.Company' name='" -I- 3 -I- '">"-1- 
"<input type='submif value='4.Company' name='" -I- 4 -I- '">"-1- 
"</p>"-r 

" <input type='hidden' name='battahon_no' value='" -I- commandUnit -l-'">"-l- 
" <input type='hidden' name='action' value='showCompanyInfo'>"-l- 
" </form> </td> </tr>"; 
myRegiment. setRegiment(regiment); 

{else if (commandUnit > 110) {//Company commmander 
myQuery = new StringBuffer(); 
myQuery.append(" select section id "); 
myQuery.append(" from sections "); 

myQuery.append(" where company no = '" -I- commandUnit -i-'""); 

rs= stmt. executeQuery(myQuery. toStringO); 

rs.next(); 

String si = rs.getString(l); 
rs.next(); 

String s2 = rs.getString(l); 

String regiment 
regiment -l-=" <tr> "-I- 


135 



"<td width='39%' height='19' bgcolor='#OOOOFF'><b><font color='#FFFFFF'>Company name:</font> 

</b></td>"+ 

"<td width='61%' height='19' bgcolor='#OOOOFF'><font color='#FFFFFF'>"+ 
myRegiment.getCompanyNameO + "</font></td> </tr> <tr>"+ 

"<td width='39%' height='l'><b>Sections in the company:</b></td>"+ 

" <td width-61%' height='l'>"+ 

"<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit=">"+ 

" <p style='line-height: 100%; margin: 0'>"-l- 

"<input type='submit' value=' " -I- si -I- " ' name='section'><p>"-l- 

"<input type='submit' value=' " -I- s2 -I- " ' name='section'>"-l- 

" <input type='hidden' name='action' value='showSectionInfo'>"-l- 
" </form> </td> </tr>"; 

myRegiment.setRegiment(regiment); 

} 

rs.closeO; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr.freeConnection("myThesis", conn); 
return myRegiment; 

} 

}//end of getUnitsForRegiment 


/* 

Method executeDepartment:executes department info request for dep.head 

*/ 

public void executeDepartment(F[ashtable myParameterValues, 

FlttpServletRequest request, 

FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'Department info for faculty requested by " -I- myUser.myLoginId -l- 
" from " -I- request.getRemoteAddr(),2); 
if (myUser.state) {//the result of the cookiecheck must be affirmative. 

Communicator myFaculty; 
myFacuity = new Communicator(); 

//—connect to the db and get-l-arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
myFaculty = getDepartmentlnfo(myUser); 
myFaculty. setLogin(myUser.myLoginld); 
myFaculty. setName(myUser.myName); 
myFaculty.setLastName(myUser.myLastName); 
my Faculty. setOperation(" department"); 
myFaculty.setTime(myDate.toString()); 

HttpSession session = request.getSession(true); 
session.put V alue(" myDepFlead" ,myF acuity); 

136 



gotoPage("/src/webadmiii/DepartmentHead.jsp",request,respond); 
}else { 

logWriterdogC'eookie eheek is in valid for " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of exeeute eourses. 

/* 

Method getDepartmentInfo: gets the data from the database and sends 
the data to the proper jsp fde. 

*/ 


publie Communieator getDepartmentInfo(UserType myUser) { 

Conneetion eonn = poolMgr.getConneetion("my Thesis"); 

String announeements = new String(); 

Communieator myFaeulty = new Communieator(); 
boolean result = false; 
if (eonn == null) 

{ 

logWriterdogC'database eonneetion error",1); 

//return false; 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = eonn.ereateStatement(); 

//here I ean get the announeement eategories. 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append(" seleet d.department name "); 
myQuery.append(" from departments d, faeulty f, users u "); 
myQuery.append(" where u.user id = f faeulty id and "); 
myQuery.append(" d.dhead id = f faeulty id and "); 
myQuery.append(" udogin id = "'+ myUser.myLoginId+"'"); 
rs= stmt.exeeuteQuery(myQuery.toString()); 
rs.next(); 

myFaeulty.setDepartment(rs.getString(l)); 
myQuery = new StringBufferQ; 

myQuery.append(" seleet distinet fl.faeulty id, fl.degree, fl.name, fl.last_name,fl.rank,fl.email 
i; 

myQuery.append(" from faeulty fl, elass enrollment el, eourses eol "); 
myQuery.append(" where (fl.faeulty id in ("); 
myQuery.append(" seleet f faeulty id "); 
myQuery.append(" from faeulty f"); 

myQuery.append(" where (fprogram id in (seleet d3.department_no "); 
myQuery.append(" from faeulty G,departments d3,users u "); 
myQuery.append(" where (G.faeulty id = u.user id) and "); 
myQuery.append(" (G.faeulty id = d3.dhead_id) and "); 
myQuery.append(" (u.login id = + myUser.myLoginId + "'))) "); 

myQuery.append(" minus "); 
myQuery.append(" seleet C.faeulty id "); 


137 



myQuery.append(" from faculty f2,users u2 "); 
myQuery.append(" where fZ.faculty id = u2.user_id and "); 
myQuery.append(" u2dogin_id = + myUser.myLoginId +"')) "); 

myQuery.append(" and "); 

myQuery.append(" (cl.faculty id = fl.faculty id) "); 
myQuery.append(" and "); 

myQuery.append(" (col.course id = cl.course id)"); 
rs = stmt.executeQuery(myQuery.toString()); 

String degree = 

String name = 

String Iname = 

String rank = 

String fid = 

String ftd2 = 

String mail = 
int count = 1; 
while (rs.nextO) 

{ 

fid = rs.getString(l); 
degree = rs.getString(2); 
name = rs.getString(3); 

Iname = rs.getString(4); 
rank = rs.getString(5); 
mail = rs.getString(6); 
fld2 = mail.substring(0,mail.indexOf('@')); 
announcements = announcements + 

"<tr>"+ 

"<td width=\"20\" height=\"19\" valign=\"middle\">" + 

"<INPUT onclick=\"javascript:facultyview("' +name + 

"V" + Iname + + ftd2 + + mail + "',200,200)\" type^button value=\""+count + " - 

Info" + "\">"+ 

"</td>" + 

"<td width='20%' height='19'>" + degree+ "</td>"+ 

"<td width='20%' height='19'>" + name + "</td>"+ 

"<td width='20%' height='19'>" + Iname + "</td>"+ 

"<td width='20%' height='19'>"+rank+"</td>"+ 

"</tr>"; 

count++; 

}//end of while 

myFaculty.setAnnouncements(announcements); 

announcements = 

myQuery = new StringBufferQ; 

myQuery.append(" select distinct fl.name, fl.last name, "); 
myQuery.append(" 

cl.course_id,col.course_name,cl.section_id,col.course_explanation,col.course_credit,fl.faculty id "); 
myQuery.append(" from faculty fl, class enrollment cl, courses col "); 
myQuery.append(" where (fl.faculty id in ("); 
myQuery.append(" select f faculty id "); 
myQuery.append(" from faculty f"); 

myQuery.append(" where (fprogram id in (select d3.department_no "); 
myQuery.append(" from faculty G,departments d3 "); 
myQuery.append(" where (G.last name = 'Adem') and "); 
myQuery.append(" (G.faculty id = d3.dhead_id))) "); 

138 



myQuery.append(" minus "); 
myQuery.append(" select f2.faculty id "); 
myQuery.append(" from faculty f2 "); 
myQuery.append(" where fZ.last name = 'Adem')) "); 
myQuery.append(" and "); 

myQuery.append(" (c 1.faculty id = fl.faculty id) "); 
myQuery.append(" and "); 

myQuery.append(" (col.course id = cl.course id)"); 


rs = stmt.executeQuery(myQuery.toString()); 

String courseld = 

String cname = 

String section = 

String instructor = 

String cexp = 

String ccredit = 
count = 1; 

while (rs.nextO) 

{ 

instructor = rs.getString(l) + " " + rs.getString(2); 

courseld = rs.getString(3); 

cname = rs.getString(4); 

section = rs.getString(5); 

cexp = rs.getString(6); 

ccredit = rs.getString(7); 

fid = rs.getString(8); 

announcements = announcements + 

"<tr>"+ 

"</td>" + 

"<td width=\"20\" height=\"19\" >"+ 

"<INPUT onclick=\"javascript:courseview("' + courseld + 

+ cname + + cexp + + ccredit + "',400,300)\" type=button value=\""+count + " - Info" + 

"\">"+ 

"</td>" + 

"<td width='20%' height='19'>" + 
courseId+ "</td>"+ 

"<td width='20%' height='19'>" + cname + "</td>"+ 

"<td width='20%' height='19'>" + 

"<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit=">" + 

"<p style='word-spacing: 0; margin: O'xinput type='submif value="' + " " + section + " " +"' 
name^'Bl' style='font-size: 8pf></p>"+ 

" <input type='hidden' name='action' value='studentsForDepHead'>"+ 

" <input type='hidden' name='course' value="' + courseld + 

" <input type='hidden' name='section' value="' + section + + 

" <input type='hidden' name='faculty_id' value="' + fid + 

+ "</td>"+ 

"<td width='20%' height='19'>"+instructor+"</td>"+ 

"</tr>" + " </form>"; 
count++; 

}//end of while 

myFaculty.setCourses(announcements); 


139 



rs.closeO; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return my Faculty ; 

} 


}//end of getdepartment info 

/* 

Method executeCompanyInfoForStudent:executes Companyinfo request for 
student 

*/ 

public void executeCompanyInfoForStudent(Flashtable myParameterValues, 
FlttpServletRequest request, 

FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriterdogC'company info for student requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 

if (myUser.state) {//the result of the cookiecheck must be affirmative. 

Communicator myFaculty; 
myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 

myFaculty = getCompanylnfoForStudents(myUser); 
java.util.Date myDate = new java.util.Date(); 
myFaculty.setLogin(myUser.myLoginld); 
myF acuity. setN ame (myU ser .myN ame); 
myFaculty .setLastN ame(myU ser. myLastN ame); 
myFaculty.setOperation("companyInfo"); 
myFaculty .setT ime(myDate. to StringO); 

FlttpSession session = request.getSession(true); 
session.putValue("myStudent",myFaculty); 
gotoPage("/src/webadmin/Student.jsp",request,respond); 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of executeCompanyInfoForStudent. 

/* 

Method getCompanyInfoForStudents: gets the data from the database and sends 
the data to the proper jsp file. 

*/ 


140 



public Communicator getCompanyInfoForStudents(UserType myUser) { 
Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 

Communicator my Student = new Communicator(); 
boolean result = false; 
if (conn == null) 

{ 

logWriterdogC'database connection error",1); 

//return false; 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

StringBuffer firstinfo = new StringBuffer(); 
firstInfo.append("select distinct s.student_id,s.name, "); 
firstinfo.append(" s.last_name,s.remaining_points,"); 
firstinfo.append(" r.unit name, "); 

firstInfo.append(" co.rank,co.name,co.last_name,co.command_unit"); 
firstInfo.append(" from students s, sections se, regiment r, users u,"); 
firstinfo.append(" command_personel co "); 
firstInfo.append(" where s.student id = u.user id and "); 
firstInfo.append(" s.section id = se.section id and "); 
firstInfo.append(" se.company no = r.unit id and "); 
firstinfo.append(" co.command unit = r.unit id and "); 
firstInfo.append(" u.login id = "); 

StringBuffer reginfo = new StringBuffer(); 
regInfo.append("select distinct co.rank,co.name,co.last_name "); 
regInfo.append(" from command_personel co where co.command unit = "); 

StringBuffer awardinfo = new StringBuffer(); 
awardInfo.append(" select distinct s.student id, "); 
awardInfo.append(" a.award_no,a.award_type,a.result,a.award_date"); 
awardInfo.append(" from students s, awards a, users u "); 
awardInfo.append(" where s.student id = u.user id and "); 
awardinfo.append(" s.student id = a.student id and "); 
awardInfo.append(" u.login id = "); 

StringBuffer punishmentinfo = new StringBuffer(); 
punishmentInfo.append(" select distinct s.student id, "); 
punishmentinfo.append(" p.punishment_no,p.punishment_type, "); 
punishmentinfo.append(" p.result,p.points_taken,p.punishment_date "); 
punishmentinfo.append(" from students s, punishments p, users u "); 
punishmentinfo.append(" where s.student id = u.user id and "); 
punishmentinfo.append(" s.student id = p.student id and "); 
punishmentinfo.append(" u.login id = "); 


try 

{ 

stmt = conn, create Statement(); 

//here I can get the announcement categories. 
firstlnfo.appendC"" + myUser.myLoginId + ""'); 

rs = stmt. executeQuery (firstinfo. to StringO); 


141 



rs.nextO; 


my Student. setU serld(rs. get String( 1)); 
myStudent.setName(rs.getString(2) + " " + rs.getString(3)); 
myStudent.setPoints(rs.getString(4)); 
myStudent.setCompanyName(rs.getString(5)); 

myStudent.setCompComName(rs.getString(6) + " " + rs.getString(7) + 
" " + rs.getString(8)); 
int eompany = rs.getlnt(9); 
int battalion = (int) eompany/10; 

rs = stmt.exeeuteQuery(regInfo.toString()+"'2"'); 
rs.nextO; 

myStudent.setRegComName(rs.getString(l) + " " + rs.getString(2) + 

" " + rs.getString(3)); 

regInfo.appendC"" + battalion + 

rs = stmt.exeeuteQuery(reglnfo.toString()); 

rs.nextO; 

myStudent.setBatComName(rs.getString(l) + " " + rs.getString(2) + 

" " + rs.getString(3)); 

awardInfo.appendC"" + myUser.myLoginId + 
rs = stmt.exeeuteQuery(awardlnfo.toStringO); 

String award = 
while(rs.nextO) { 
rs.getString(l); 
award += " <tr> "+ 

"<td width=\"84\" height=\"19\">"+ 
rs.getString(2) + "</td>"+ 

"<td width=\"98\" height=\"19\">"+ 
rs.getString(3) + "</td>"+ 

"<td width=\"248\" height=\"19\">"+ 
rs.getString(4) + "</td>"+ 

"<td width=\"231\" height=\"19\" eolspan=\"2\">"+ 
rs.getString(5).substring(0,ll) + "</td>"+ 

" </tr>"; 


my Student. set Awards (award); 

punishmentInfo.appendC"" + myUser.myLoginId + ""'); 
rs = stmt.exeeuteQuery(punishmentInfo.toString()); 
String punishments = 
while(rs.next()) { 
rs.getString(l); 
punishments += " <tr> "+ 

"<td width=\"84\" heighU\"19\">"+ 
rs.getString(2) + "</td>"+ 

"<td width=\"98\" heighU\"19\">"+ 
rs.getString(3) + "</td>"+ 

"<td width=\"248\" height=\"19\">"+ 
rs.getString(4) + "</td>"+ 

"<td width=\"126\" height=\"19\">"+ 
rs.getString(5) + "</td>"+ 

"<td width=\"99\" height=\"19\" >"+ 
rs.getString(6).substring(0,ll) + "</td>"+ 


142 



</tr>"; 


} 

myStudent.setPunishments(punishments); 

rs.closeQ; 

stmt.closeQ; 

}//end of try 

catch (SQLException e) 

{ 

logWriterdog(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return myStudent; 

} 


}//end of get company info for student 

/* 

Method executeChangePassword:executes change password request for user 

*/ 

public void executeChangePassword(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'change password requested by " + myUser.myLoginid + 

" from " + request.getRemoteAddr(),2); 

if (myUser.state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty; 

myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 

Object vail = myParameterValues.get("firstText"); 

Object val2 = myParameterValues.get("secondText"); 

if (vall.equals(val2)){ 

setNewPassword(myUser.myLoginId,myParameterValues); 


} 

String valueName = 

String pageName = 

FlttpSession session = request.getSession(tme); 
if (myUser.myType.equals("FACULTY")){ 

myFaculty = getProfPersonal(myUser.myLoginld); 

valueName = "myFaculty"; 

pageName = "/src/webadmin/Faculty.jsp"; 

{else if (myUser.myType.equals("STUDENT")){ 
myFaculty = getStudentPersonal(myUser.myLoginld); 
valueName = "myStudent"; 
pageName = "/src/webadmin/Student.jsp"; 

{else if (myUser.myType.equals("DEP_FlEAD")){ 

143 



myFaculty = getProfPersonal(myUser.myLoginld); 

valueName = "myDepHead"; 

pageName = "/src/webadmin/DepartmentHead.jsp"; 

}else if (myUser.myType.equals("COMMAND")){ 
myFaculty = getRegimentPersonal(myUser.myLoginld); 
valueName = "my Regiment"; 
pageName = "/src/webadmin/Regiment.jsp"; 

} 

myFaculty.setMessageC'The new passwords do not match, please try again"); 
if (vall.equals(val2)){ 

myFaculty.setMessageC'The new passwords are OK, password is UPDATED"); 

} 


java.util.Date myDate = new java.util.DateQ; 
myFaculty.setLogin(myUser.myLoginld); 
myF acuity. setN ame (myU ser .myN ame); 
myFaculty .setLastN ame(myU ser. myLastN ame); 
myFaculty.setOperation("Personal_information"); 
myFaculty.setTime(myDate.toString()); 

session.putValue(valueName,myFaculty); 

gotoPage(pageName,request,respond); 

}else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of execute change password 
/* 

Method setRegimentUpdate: updates the regiment info in the database. 

*/ 

public void setRegimentUpdate(String myUser,Flashtable myParameterValues){ 
Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 

if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

//return false; 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("select fperson id from command_personel f, users u "); 
myQuery.append("where u.user id = f person id and u.login_id="' + myUser +""'); 
rs = stmt.executeQuery(myQuery.toString()); 


144 



rs.nextO; 

String personid = rs.getString(l); 
rs.closeO; 

conn, set AutoCommit(false); 

StringBuffer myUpdate = new StringBuffer(); 
myUpdate.append("update command_personel"); 

myUpdate.append("set email-" + myParameterValues.get("email").toString() + 

myUpdate.append(" , room_no="' + myParameterValues.get("room").toString() + 

myUpdate.append(" , tel_no="' + myParameterValues.get("tel").toString() + 

myUpdate.append(" , address^'" + myParameterValues.get("address").toString() + 

myUpdate.append(" , city="' + myParameterValues.get("city").toString() + 

myUpdate.append(" , province^'" + myParameterValues.get("province").toString() + 

myUpdate.append(" where person id + person id + 

stmt.executeUpdate(myUpdate.toString()); 

conn.commit(); 

conn.setAutoCommit(tme); 

stmt.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 

} 


}//end of set regiment personal information 

/* 

Method setProfUpdate: updates the faculty info in the database. 

*/ 

public void setProfUpdate(String myUser,Hashtable myParameterValues){ 
Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

//return false; 

} 


ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

//here 1 can get the announcement categories. 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append("select f faculty id from faculty f, users u "); 

145 



myQuery.append("where u.user id = f.faculty id and u.login_id="' + myUser 
rs = stmt.executeQuery(myQuery.toString()); 

rs.next(); 

String faculty id = rs.getString(l); 
rs.closeO; 

StringBuffer myUpdate = new StringBuffer(); 
myUpdate.append("update faculty "); 

myUpdate.append("set email="' + myParameterValues.get("email").toString() + 
myUpdate.append(" , room_no="' + myParameterValues.get("room").toString() + 
myUpdate.append(" , tel_no="' + myParameterValues.get("tel").toString() + 
myUpdate.append(" , address^'" + myParameterValues.get("address").toString() + 
myUpdate.append(" , city-" + myParameterValues.get("city").toString() + 
myUpdate.append(" , province^'" + myParameterValues.get("province").toString() + 
myUpdate.append(" where faculty id + faculty id + 

stmt .executeUpdate (myU pdate. to S tring()); 
stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriterdog(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 

} 


}//end of set prof personal information 


/* 

Method setStudentUpdate: updates the student info in the database. 

*/ 

public void setStudentUpdate(String myUser,Hashtable myParameterValues){ 
Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

//return false; 

} 


ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

//here 1 can get the announcement categories. 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append("select s.student id from students s, users u "); 

146 



myQuery.append("where u.user id = s.student id and udogin_id="' + myUser 

rs = stmt.executeQuery(myQuery.toString()); 

rs.next(); 

String student id = rs.getString(l); 
conn.setAutoCommit(false); 

StringBuffer myUpdate = new StringBuffer(); 
myUpdate.append("update students "); 

myUpdate.append("set email="' + myParameterValues.get("email").toString() + 

myUpdate.append(" , dormitory="' + myParameterValues.get("room").toString() + 

myUpdate.append(" , address^'" + myParameterValues.get("address").toString() + 

myUpdate.append(" , eity="' + myParameterValues.get("eity").toString() + 

myUpdate.append(" , provinee="' + myParameterValues.get("provinee").toString() + " 

myUpdate.append(" where student id + student id + 

stmt. exeeuteUpdate(myUpdate .to StringO); 

eonn.eommit(); 

eonn. setAutoCommit(tme); 

rs.eloseQ; 

stmt.eloseQ; 

}//end of try 
eateh (Exeeption e) 

{ 

logWriter.log(e," Exeeption error", 1); 

} 

finally 

{ 

poolMgr. freeConneetion(" myThesis", eonn); 

} 


}//end of set student personal information 


/* 

Method exeeuteGradeUpdate:exeeutes grade update request for faeulty personnel 
and sends respond to the proper jsp file 

*/ 

publie void exeeuteGradeUpdate(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = eheekCookie(request,respond); 

logWriter.logC'grade update requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser.state) {//the result of the eookieeheek must be affirmative. 
Communieator myFaeulty; 
myFaeulty = new Communieator(); 

//—eonneet to the db and get+arrange the eourses for the user. 
setGradeUpdate(myParameterValues,myUser); 
myFaeulty = getStudentsForProf(myParameterValues,myUser); 
java.util.Date myDate = new java.util.Date(); 
myFaeulty. setLogin(myUser.myLoginld); 
myFaeulty. setName(myUser.myName); 
myFaeulty .setLastN ame(myU ser. myLastN ame); 
myFaeulty.setOperation("StudentsForProfessor"); 

147 



myFaculty.setTime(myDate.toString()); 

HttpSession session = request.getSession(true); 
session.putValue("myFaculty",myFaculty); 
gotoPage("/src/webadmin/F acuity jsp",request,respond); 

}else { 

logWriterdogC'cookie check is in valid for " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of execute grade update. 


/* 

Method setGradeUpdate: updates the grades in the database. 

*/ 

public Communicator setGradeUpdate(Ftashtable myParameterValues, 

UserType myUser){ 

Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

Connection conn2 = poolMgr.getConnection("my Thesis"); 

String information = new String(); 

String examStr 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

//return false; 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 
int examNo = 0; 

Object val = myParameterValues.get("First"); 

PreparedStatement stmtUpdate = null; 
try{ 

if (val != null){ 
examNo = 0; 
examStr = "First"; 

stmtUpdate = conn2.prepareStatement("update course grades set first midterm = ? where 
studentid = ?"); 

}else{ 

val = myParameterValues.get("Second"); 
if (val != null){ 
examNo = 1; 
examStr = "Second"; 

StmtUpdate = conn2.prepareStatement("update course grades set second midterm = ? where 
studentid = ?"); 

}else{ 

val = myParameterValues.get("Final"); 
if (val != null){ 
examNo = 2; 
examStr = "Final"; 

stmtUpdate = conn2.prepareStatement("update course grades set final = ? where student id = ?") 
}else{ 

val = myParameterValues.get("Grade"); 
if (val != null){ 


148 



examNo = 3; 
examStr = "Grade"; 

stmtUpdate = conn2.prepareStatement("update course grades set grade = ? where student id 


} 

}//second if 
[//first if 
[//end of try 

catch(SQLExceptioii e) { 
logWriter.log(e," Exception error",1); 

} 

String course = 

String section = 

String loginid = 

String order = 

val = myParameterValues.get("course"); 

course = val.toString(); 

val = myParameterValues.get("section"); 

section = val.toString(); 

loginid = myUser.myLoginId; 

//get the course and the section name from the parameters 

myFaculty.setCourse(course); 
myFaculty. setS ection(section); 

val = myParameterValues.get("order"); 

String tempOrder = 
if (val != null) { 
if(val.equals("student_no")) { 
order = "s.studentid asc"; 

[else if(val.equals("name")){ 
order = "s.name asc"; 

[else if(val.equals("last_name")){ 
order = "s.last name asc"; 

[else if(val.equals("first_midterm")){ 
order = "g.first midterm desc"; 

[else if(val.equals("second_midterm")){ 
order = "g.secondmidterm desc"; 

[else if(val.equals("final")){ 
order = "g.final desc"; 

[else if(val.equals("grade")){ 
order = "g.course grade asc"; 

} 

tempOrder = val.toString(); 

[else{ 

order = "s.student id desc"; 

tempOrder = "studentno"; 

} 


II— 

boolean firstExamLocked = false;//the default is not locked 
boolean secondExamLocked = false;// if they are locked you can 
boolean finalExamLocked = false;//not modify those results 


try 


149 



{ 

stmt = conn, create Statement(); 

//here I can get the students for the prof for the specific course and section 
StringBuffer myQuery = new StringBuffer(); 

myQuery.append("select distinct s.student_id,c.course_id, co.course name,"); 
myQuery.append(" s.section_id,p.program_name,s.email,s.name,"); 
myQuery.append("s.last_name,g.first_midterm,g.second_midterm,"); 
myQuery.append("g.final,g.coursegrade"); 

myQuery.append(" from class enrollment c, faculty f, students s,"); 
myQuery.append(" course grades g, courses co, programs p, users u"); 

myQuery.append(" where (f faculty id = c.faculty id and"); 

myQuery.append(" f faculty id = u.user id and u.login_id="'+myUser.myLoginId+""'); 
myQuery.append(" and (c.section id = s.section id) and"); 
myQuery.append(" (s.student id = g.student id) and (c.course id 
myQuery.append(" g.course id) and c.course id^'" + course + and"); 
myQuery.append(" co.course id = c.course id and s.program_id=p.program_id"); 
myQuery.append(" and s.section id = + section + "')"); 

myQuery.append(" order by " + order); 

//the students first 
int myld = 0; 

String myIdStr = 

rs = stmt.executeQuery(myQuery.toString()); 
while (rs.nextQ) 

{ 

myIdStr = rs.getString(l); 

conn2.setAutoCommit(false); 

val = myParameterValues.get(myIdStr+examStr); 

stmtUpdate.setString(l,val.toString()); 

stmtUpdate.setString(2,myIdStr); 

stmtUpdate.executeUpdateO; 

}//end of while 

conn2.commit(); 

conn2. setAutoCommit(true); 

/ / myF acuity. setCourse s(course s); 
rs.closeQ; 
stmt.closeQ; 
stmtUpdate.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
poolMgr. freeConnection("myThesis", conn2); 
return my Faculty ; 

} 


150 



}//end of set gradesUpdate(for prof) 


/* 

Method exeeuteStudentsForDepHead:exeeutes studentsinfo request for dep head 
and sends respond to the proper jsp file 

*/ 

publie void exeeuteStudentsForDepHead(Hashtable myParameterValues, 
FlttpServletRequest request, 

FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = eheekCookie(request,respond); 

logWriterdogCstudents info for dephead requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 

if (myUser. state) {//the result of the eookiecheek must be affirmative. 

Communieator myFaeulty; 
myFaeulty = new Communieator(); 

//—conneet to the db and get+arrange the eourses for the user. 
myFaeulty = getStudentsForDepFlead(myParameterValues,myUser); 
java.util.Date myDate = new java.util.Date(); 
myFaeulty.setLogin(myUser.myLoginld); 
myFaeulty.setName(myUser.myName); 
myFaeulty .setLastN ame(myU ser. myLastN ame); 
myFaeulty. setOperation(" Student sForDepFl ead"); 
myFaeulty .setT ime(myDate .to String))); 

FlttpSession session = request.getSession(true); 
session.putValue("myDepFlead",myFaeulty); 
gotoPage("/sre/webadmin/Departmentl-lead.jsp",request,respond); 

{else { 

logWriter.logC'eookie eheek is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of exeeute students for prof 

/* 

Method getStudentsForDepFlead: gets the data from the database . 

*/ 

publie Communieator getStudentsForDepFlead(Flashtable myParameterValues, 

UserType myUser) { 

Communieator myFaeulty = new Communieator(); 

Conneetion eonn = poolMgr.getConneetion("my Thesis"); 

String information = new String)); 

boolean result = false; 
if (eonn == null) 

{ 

logWriter.logC'database eonneetion error",1); 

{ 

ResultSet rs = null; 

ResultSetMetaData md = null; 

151 



Statement stmt = null; 


String course = 

String section = 

String order = 

//get the course and the section name from the parameters 

Object val = myParameterValues.get("course"); 
course = val.toString(); 
myF acuity. setCourse (course); 

val = myParameterValues.get("section"); 
section = val.toString(); 
myFaculty.setSection(section); 

val = myParameterValues.get("faculty_id"); 

String fid = val.toString(); 

//get the students data 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("select distinct c.course id, co.course name,"); 

myQuery.append(" s.section_id,p.program_name,s.email,s.student_id,s.name,"); 

myQuery.append("s.last_name,g.first_midterm,g.second_midterm,"); 

myQuery.append("g.final,g.coursegrade"); 

myQuery.append(" from class enrollment c, faculty f, students s,"); 

myQuery.append(" course grades g, courses co, programs p, users u"); 

myQuery.append(" where (f faculty id = c.faculty id and"); 

myQuery.append(" f faculty id = "'+ fid +""'); 

myQuery.append(" and (c.section id = s.section id) and"); 

myQuery.append(" (s.student id = g.student id) and (c.course id 

myQuery.append(" g.course id) and c.course id^'" + course + and"); 

myQuery.append(" co.course id = c.course id and s.program_id=p.program_id"); 

myQuery.append(" and s.section id = + section + "')"); 


try{ 

stmt = conn, create Statement(); 

rs = stmt.executeQuery(myQuery.toString()); 

String announcements = 

String temp = 
rs.next(); 

temp = rs.getString(l); 

announcements += "<table border=\"l\" width=\"688\" height=\"149\">" + " <tr> "+ 
" <td width=\"678\" colspan=\"4\" height=\"19\" bgcolor=\"#0000FF\">" + 

" <p ahgn=\"center\"><font color=\"#FFFF00\"><b>" + 

"THE STUDENTS TAKING THE COURSE " + course + " IN SECTION " + 
section +"</b></font></td> </tr> "+" <tr>"+ 

"<tdwidth=\"79\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 

"<b>Course No</b></td>"+ 

"<td width=\"93\" height=\"l\" bgcolor=\"#C0C0C0\">" + course + "</td>"+ 
"<td width=\"99\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 

"<b>Course Name</b></td>"+ 

"<td width=\"147\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 

152 



rs.getString(2) + "</td>"+ " </tr> " + " <tr> 
temp = rs.getString(3); 
announcements += 

"<td width=\"79\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<b> Section No</b></td>"+ 

"<td width=\"93\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 
section + "</td>" + 

"<td width=\"488\" height=\"19\" bgcolor=\"#C0C0C0\" colspan=\"2\">"+ 
"<b>This Section's Program is " +rs.getString(4) + "</b></td> "+ 

"</tr> </table> 

myFacuity. setAnnouncements(announcements); 
rs = null; 

rs = stmt.executeQuery(myQuery.toString()); 

String courses = 

String studentid = 

String mail=""; 
while (rs.nextO) 

{ 

mail = rs.getString(5); 
studentid = rs.getString(6); 
courses +=" <tr>"+ 

"<td width=\"89\" height=\"19\" bgcolor=\"#C0C0C0\" valign=\"middle\">" + 
"<p align=\"center\">"+ 

"<INPUT onclick=\"javascript:transferview("' + studentid + 

+ mail + "',200,200)\" type=button value=\""+studentld + "\">"+ 

"</p>"+ 

"</td>" + 

"<td width=\"107\" height=\"19\" bgcoloi=\"#C0C0C0\">" + 

"<font size=\"2\">" + rs.getString(7) + "</font></td>"+ 

"<td width=\"97\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + rs.getString(8) + "</font></td>"+ 

"<tdwidth=\"127\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + rs.getString(9) + "</font></td>"+ 

"<td width=\"127\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + rs.getString(lO) + "</font></td>"+ 

"<td width=\"55\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + rs.getString(l 1) + "</font></td>"+ 

"<td width=\"102\" height=\"19\" bgcolor=\"#C0C0C0\">" + 

"<font size=\"2\">" + rs.getString(12) + "</font></td>" 

+ " </tr> 

}//end of while 

myF acuity. setCourses (course s); 
rs.closeO; 
stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return my Faculty ; 


}//end of get students data 

153 



Method executeStudentsForProf:executes Studentinfo request for faculty personnel 
and sends respond to the proper jsp fde 

*/ 

public void executeStudentsForProf(Hashtable myParameterValues, 
FlttpServletRequest request, 

FlttpServletResponse respond) { 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'student info for faculty requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 

if (myUser. state) {//the result of the cookiecheck must be affirmative. 

Communicator myFaculty; 
myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 

myFaculty = getStudentsForProf(myParameterValues,myUser); 

java.util.Date myDate = new java.util.Date(); 

myFaculty.setLogin(myUser.myLoginld); 

myFaculty.setName(myUser.myName); 

myFaculty .setLastN ame(myU ser. myLastN ame); 

myFaculty.setOperation("StudentsForProfessor"); 

myFaculty .setT ime(myDate .to StringO); 

FlttpSession session = request.getSession(true); 
ses sion. put Value (" my Faculty", myFaculty); 
gotoPage("/src/webadmin/F acuity .jsp",request,respond); 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute students for prof 

/* 

Method getStudentsForRegiment: gets the data from the database . 

*/ 

public Communicator getStudentsForProf(Hashtable myParameterValues, 

UserType myUser) { 

Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 



String course = 

String section = 

String order = 

//get the course and the section name from the parameters 
Object val = myParameterValues.get("course"); 
course = val.toString(); 
myF acuity. setCourse (course); 

val = myParameterValues.get("section"); 

section = val.toString(); 

myFaculty.setSection(section); 

val = myParameterValues.get("order"); 

String tempOrder = 
if (val != null) { 
if(val.equals("student_no")) { 
order = "s.studentid asc"; 

(else if(val.equals("name")){ 
order = "s.name asc"; 

(else if(val.equals("last_name")){ 
order = "s.last name asc"; 

(else if(val.equals("first_midterm")){ 
order = "g.first midterm desc"; 

(else if(val.equals("second_midterm")){ 
order = "g.secondmidterm desc"; 

(else if(val.equals("fmal")){ 
order = "g.final desc"; 

(else if(val.equals("grade")){ 
order = "g.course grade asc"; 

( 

tempOrder = val.toString(); 

(else) 

order = "s.student id asc"; 
tempOrder = "studentno"; 

( 


II— 

boolean firstExamLocked = false;//the feault is not locked 
boolean secondExamLocked = false;// if they are locked you can 
boolean finalExamLocked = false;//not modify those results 

try 

{ 

stmt = conn, create Statement(); 

String exam = 

rs = stmt.executeQueryC'select locked date, no from locked grades "); 
while(rs.next()) { 

java.util.Date myDatel = new java.util.Date(); 
myDatel = rs.getDate(l); 

java.util.Date myDate = new java.util.Date(); 
exam=rs.getString(2); 

if (myDate.compareTo(myDatel)>0){//it means it is locked 
if (exam.equalsC 1")) { 
firstExamLocked = true; 

(else if (exam.equals("2")){ 
firstExamLocked = true; 


155 



secondExamLocked = true; 
}else { 

firstExamLocked = true; 
secondExamLocked = true; 
finalExamLocked = true; 

} 


} 

}//end of while 
rs = null;//rs reset 

//get the students for the prof for the specific course and section 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("select distinct c.course id, co.course name,"); 
myQuery.append(" s.section_id,p.program_name,s.email,s.student_id,s.name,"); 
myQuery.append("s.last_name,g.first_midterm,g.second_midterm,"); 
myQuery.append("g.final,g.coursegrade"); 
myQuery.append(" from class enrollment c, faculty f, students s,"); 
myQuery.append(" course grades g, courses co, programs p, users u"); 
myQuery.append(" where (f faculty id = c.faculty id and"); 
myQuery.append(" f faculty id = u.user id and udogin_id="'+ myUser.myLoginId 
myQuery.append(" and (c.section id = s.section id) and"); 
myQuery.append(" (s.student id = g.student id) and (c.course id 
myQuery.append(" g.course id) and c.course id^'" + course + and"); 
myQuery.append(" co.course id = c.course id and s.program_id=p.program_id"); 
myQuery.append(" and s.section id = + section + "')"); 

myQuery.append(" order by " + order); 

rs = stmt.executeQuery(myQuery.toString()); 

String announcements = 

String temp = 
rs.next(); 

temp = rs.getString(l); 

announcements += "<table border=\"l\" width=\"688\" height=\"149\">" + " <tr> "+ 

" <td width=\"678\" colspan=\"4\" height=\"19\" bgcolor=\"#0000FF\">" + 

" <p ahgn=\"center\"><font color=\"#FFFF00\"><b>" + 

"THE STUDENTS TAKING THE COURSE " + course + " IN SECTION " + 
section +"</b></font></td> </tr> "+" <tr>"+ 

"<tdwidth=\"79\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 

"<b>Course No</b></td>"+ 

"<td width=\"93\" height=\"l\" bgcolor=\"#C0C0C0\">" + course + "</td>"+ 
"<tdwidth=\"99\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 

"<b>Course Name</b></td>"+ 

"<td width=\"147\" height=\"l\" bgcolor=\"#C0C0C0\">"+ 
rs.getString(2) + "</td>"+ " </tr> " + " <tr> "; 
temp = rs.getString(3); 
announcements += 

"<td width=\"79\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<b> Section No</b></td>"+ 

"<td width=\"93\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 
section + "</td>" + 

"<td width=\"488\" height=\"19\" bgcolor=\"#C0C0C0\" colspan=\"2\">"+ 
"<b>This Section's Program is " +rs.getString(4) + "</b></td> "+ 

"</tr> </table>"; 


156 



myFacuity. setAnnouiicements(announcements); 
rs = null; 

rs = stmt.executeQuery(myQuery.toString()); 

String courses = 
courses += 

"<form metliod=\"POST\" "+ 

"style=\"line-height: 100%; margin: 0\" "-I- 
"action=\"/servlet/webadmin.Academy\" onSubmit=\"\">"-l- 
"<table border=\"l\" width=\"689\">" 

"<input type=\"hidden\" name=\"action\" value=\"gradeUpdate\">"-l- 
"<input type=\"hidden\" name=\"course\" value=\""-l-course-l-"\">"-l- 
"<input type=\"hidden\" name=\"section\" value=\""-l-section-l-"\">"-l- 
"<input type=\"hidden\" name=\"order\" value=\""-l-tempOrder-l-"\">"; 

String studentid = 

String mail=""; 
while (rs.nextO) 

{ 

mail = rs.getString(5); 
studentid = rs.getString(6); 
courses -i-=" <tr>"-i- 

"<td width=\"89\" height=\"19\" bgcolor%"#C0C0C0\" valign=\"middle\">" 
"<p align=\"center\">"-l- 

"<INPUT onclick=\"javascript:transferview("' -I- studentid -l- 
"V" + mail -I- "',200,200)\" type=button value=\""-l-studentld -I- 
"</p>"-r 

"</td>" 

"<td width=\"I07\" height=\"I9\" bgcoloi=\"#C0C0C0\">" 

"<font size=\"2\">" -I- rs.getString(7) -I- "</font></td>"-l- 
"<td width=\"97\" height=\"I9\" bgcolor%"#C0C0C0\">'% 

"<font size=\"2\">" -I- rs.getString(8) -I- "</font></td>"; 


if(firstExamLocked) { 

courses "<td width%"99\" height=\"I9\" bgcolor=\"#C0C0C0\">'% 

"<input readonly type=\"text\" name=\"" -I- studentid -l-"First\" size=\"5\" value=\""-l- 
rs.getString(9) -I- "\" styIe=\"background-color: #C0C0C0\"> </tr> "; 

}else{ 

courses "<td width%"99\" height=\"I9\" bgcolor=\"#C0C0C0\">'% 

"<input type=\"text\" name=\"" -I- studentid -l-"First\" size=\"5\" value=\""-l- 
rs.getString(9)-l-"\"></font></td>"; 

} 

if(secondExamLocked) { 

courses "<td width=\"I27\" height=\"I9\" bgcolor=\"#C0C0C0\">'% 

"<input readonly type=\"text\" name=\"" -I- studentid-l-"Second\" size=\"5\" value=\""-l- 
rs.getString(IO) -I- "\" style=\"background-color: #C0C0C0\"> </tr> " ; 

}else{ 

courses "<td width=\"I27\" height=\"I9\" bgcolor=\"#C0C0C0\">'% 

"<input type=\"text\" name=\"" -I- studentid -i-"Second\" size=\"5\" value=\""-i- 
rs.getString( 10)-l-"\"></font></td>"; 

} 

if(fmaIExamLocked) { 

courses "<td width=\"55\" height=\"I9\" bgcolor=\"#C0C0C0\">'% 

"<input readonly type=\"text\" name=\"" -I- studentid -l-"Final\" size=\"5\" value=\""-l- 
rs.getString(II) -I- "\" styIe=\"background-color: #C0C0C0\">"-l- 
"<td width=\"I02\" height=\"I9\" bgcolor=\"#C0C0C0\">" 

"<input readonly type=\"text\" name=\"" -I- studentid -l-"Grade\" size=\"5\" value=\""-l- 
rs.getString(I2) -I- "\" styIe=\"background-color: #C0C0C0\">"-l- 

157 



"</td>" + " </tr> 

}else{ 

courses += "<td width=\"55\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<input type=\"text\" name=\"" + studentid +"Final\" size=\"5\" value=\""+ 
rs.getString(l l)+"\"></font></td>" + 

"<td widths" 102\" height=\"19\" bgcolor=\"#C0C0C0\">" + 

"<input type=\"text\" name=\"" + studentid +"Grade\" size=\"5\" value=\""+ 
rs.getString(12)+"\"></font></td>" + " </tr> 

} 

}//end of while 
courses +=" <tr>"+ 

"<td width=\"89\" height=\"19\" bgcolor=\"#C0C0C0\" colspan=\"3\">" + 

"</td>"; 

if(firstExamLocked) { 

courses += "<td width=\"99\" height=\"19\" bgcolor=\"#C0C0C0\">Locked"+ 

"</font></td>"; 

}else{ 

courses += "<td width=\"99\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<input type=\"submit\" value=\"Update\" name=\"First\" style=\"font-size: 8pt\">"+ 
"</font><dd>"; 

} 

if(secondExamLocked) { 

courses += "<td width=\"127\" height=\"19\" bgcolor=\"#C0C0C0\">Locked"+ 
"</font></td>"; 

}else{ 

courses += "<td width=\"127\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<input type=\"submit\" value=\"Update\" name=\"Second\" style=\"font-size: 8pt\">"+ 
"</font><dd>"; 

} 

if(finalExamLocked) { 

courses += "<td width=\"55\" height=\"19\" bgcolor=\"#C0C0C0\">Locked"+ 
"</font></td>"+ 

"<td width=\"102\" height=\"19\" bgcolor=\"#C0C0C0\">Locked" + 

"</font></td>" + " </tr> 

}else{ 

courses += "<td width=\"55\" height=\"19\" bgcolor=\"#C0C0C0\">"+ 

"<input type=\"submit\" value=\"Update\" name=\"Final\" style=\"font-size: 8pt\">"+ 
"</font></td>" + 

"<td widths" 102\" height=\"19\" bgcolor=\"#C0C0C0\">" + 

"<input type=\"submit\" value=\"Update\" name=\"Grade\" style=\"font-size: 8pt\">"+ 
"</font></td>" + " </tr> 

} 

courses += "</table>" + "</form>"; 

myFaculty.setCourses(courses); 

rs.closeQ; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return my Faculty ; 


158 



}//end of get students data (for prof) 


/* 

Method exeeuteGradesForStudent:exeeutes grades info request for students 

and sends respond to the proper jsp fde 

*/ 

publie void exeeuteGradesForStudent(Hashtable myParameterValues, 
FfttpServletRequest request, 

FfttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = eheekCookie(request,respond); 

logWriterdogC'grades for students requested by " + myUser.myLoginId + 
" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the eookiecheek must be affirmative. 

Communieator myFaeulty; 
myFaeulty = new Commumeator(); 

//—conneet to the db and get+arrange the eourses for the user. 
myFaeulty = getGradesForStudent(myParameterValues,myUser); 
java.util.Date myDate = new java.util.Date(); 
myFaeulty.setLogin(myUser.myLoginld); 
myFaeulty.setName(myUser.myName); 
myFaeulty .setLastN ame(myU ser. myLastN ame); 
myFaeulty.setOperation("gradesForStudent"); 
myFaeulty .setT ime(myDate .to String))); 

FlttpSession session = request.getSession(true); 
session.putValueC'myStudent",myFaeulty); 
gotoPage("/sre/webadmin/Student.jsp",request,respond); 

{else { 

logWriter.logC'eookie eheek is in valid for " + myUser.myLoginld + 

" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of exeeute grades for student. 

/* 

Method getGradesForStudent: gets the data from the database . 

*/ 

publie Communieator getGradesForStudent(Ftashtable myParameterValues, 
UserType myUser) { 

Communieator myFaeulty = new Communieator(); 

Conneetion eonn = poolMgr.getConneetion("myThesis"); 

String information = new String)); 
boolean result = false; 
if (eonn == null) 

{ 

logWriter.logC'database eonneetion error", 1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

String eourse = 


159 



String section = 

String order = 

//get the course and the section name from the parameters 
Object val = myParameterValues.get("Semester"); 

String semester = 

String year = 

String semesterValue = 
if (val != null){ 

semester = val.toString(); 

if (semester.equals("Year 2002 semester lst")){ 
year = "2002"; 
semesterValue = "1"; 

(else if (semester.equals("Year 2002 semester 2nd")){ 
year = "2002"; 
semesterValue = "2"; 

(else if (semester.equals("Year 2001 semester lst")){ 
year = "2001"; 
semesterValue = "1"; 

(else if (semester.equals("Year 2001 semester 2nd")){ 
year = "2001"; 
semesterValue = "2"; 

(else if (semester.equals("Year 2000 semester lst")){ 
year = "2000"; 
semesterValue = "1"; 

(else if (semester.equals("Year 2000 semester 2nd")){ 
year = "2000"; 
semesterValue = "2"; 

(else if (semester.equals("Year 1999 semester lst")){ 
year = "1999"; 
semesterValue = "1"; 

( else if (semester. equals(" Year 1999 semester 2nd")){ 
year = "1999"; 
semesterValue = "2"; 

} 

( else { 

semester= "Year 2002 semester 2nd"; 

year = "2002"; 

semesterValue = "2"; 


} 

myFaculty. setS emester(semester); 
try 

{ 

stmt = conn, create Statement(); 

String exam = 

//here I can get the grades for the student for the specific semester 
StringBuffer myQuery = new StringBuffer(); 

myQuery.append("select s.student_id,s.name,s.last_name from students s,users u ") 

myQuery.append(" where u.user id = s.student id and "); 

myQuery.append(" u.login id ="' + myUser.myLoginId + 

rs = stmt.executeQuery(myQuery.toString()); 

rs.next(); 

String sId = rs.getString(l); 

String StudentName = rs.getString(2); 

String StudentLastName = rs.getString(3); 
myF acuity. setN ame (StudentN ame); 


160 



myFacuity. setLastName(StudentLastName); 
myFacuity.setUserld(sId); 
myQuery = new StringBuffer(); 

// - 

myQuery.append(" select distinct f.name,f.last_name, c.course id, "); 
myQuery.append(" co.course_name,g.first_midterm, "); 
myQuery.append(" g.second_midterm,g.final,g.course grade, "); 
myQuery.append(" f.email,co.credits,co.course explanation "); 
myQuery.append(" from class enrollment c, faculty f, "); 
myQuery.append(" students s, course grades g,users u, "); 
myQuery.append(" courses co "); 

myQuery.append(" where u.user id = s.student id and "); 
myQuery.append(" s.student id = g.student id and "); 
myQuery.append(" s.section id = c.section id and "); 
myQuery.append(" c.course id = g.course id and "); 
myQuery.append(" c.faculty id = f faculty id and "); 
myQuery.append(" u.login id = + myUser.myLoginId + and "); 

myQuery.append(" c.course id = co.course id and "); 
myQuery.append(" g.year taken = + year + and "); 

myQuery.append(" g.semestre taken = + semesterValue + 

rs = stmt.executeQuery(myQuery.toString()); 

String fname = 

String fLname = 

String cld = 

String cName = 

String firstExam = 

String secondExam = 

String fmalExam = 

String courseGrade = 

String fmail = 

String courseExp = 

String courseCredit = 

String fid = 

String grades = 

while (rs.nextQ) 

{ 

fiiame = rs.getString(l); 

fLname =rs.getString(2); 

cld = rs.getString(3); 

cName = rs.getString(4); 

firstExam = rs.getString(5); 

secondExam = rs.getString(6); 

fmalExam = rs.getString(7); 

courseGrade = rs.getString(8); 

fmail = rs.getString(9); 

fid = fname.substring(0,l).concat(fLname); 

courseExp = rs.getString(lO); 

courseCredit = rs.getString(l 1); 

String profName = fname + " " + fLname; 
for(int i=(l l-profName.length());i>=0;i-){ 
profName += " 

} 

grades += "<tr>"+ 

"<td width=\"86\" height=\"22\" bgcolor=\"#C0C0C0\" valign=\"middle\">" + 
"<p align=\"center\">"+ 


161 




"<INPUT onclick=\"javascript:facultyview("' + fname + 

"V" + fLname + + fid + + fmail + "',200,200)\" type^button value=\""+profName + "\">"+ 

"</p>"+ 

"</td>" + 

"<td width=\"108\" height=\"22\" bgcoloi=\"#C0C0C0\">"+ 

"<p aligii=\"center\">"+ 

"<INPUT onclick=\"javascript:courseview("' + cld + 

"V" + cName + + courseExp + + courseCredit + "',400,300)\" type^button value=\""+cld + 

"\">"+ 

"</p>"+ 

"</td>" + 

"<td width=\"94\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<foiit size=\"2\">"+cName +"</foiit></td>"+ 

"<td width=\"106\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<foiit size=\"2\">" + firstExam + "</font></td>"+ 

"<td width=\"125\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<foiit size=\"2\">" + secondExam + "</font></td>"+ 

"<td width=\"63\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<foiit size=\"2\">" + fmalExam + "</font></td>"+ 

"<td width=\"94\" height=\"22\" bgcolor=\"#C0C0C0\">"+ 

"<font size=\"2\">" + courseGrade + "</font></td>"+ 

" </tr>"; 

}//end of while 

myFaculty.setCourses(grades); 

rs.closeQ; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return my Faculty; 

} 


}//end of get grades data (for student) 


/* 

Method executeUpdate:executes update request for users 
and sends respond to the proper jsp file 

*/ 

public void executeUpdate(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'information update requested by " + myUser.myLoginid + 
" from " + request.getRemoteAddr(),2); 

if (myUser. state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty; 


162 



myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
if (myUser.myType.equals("FACULTY")) { 

setProfUpdate(myUser.myLoginId,myParameterValues); 
myFaculty = getProfPersonal(myUser.myLoginld); 
myFaculty.setMessage("The personal information updated"); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty .setT ime(myDate .to StringO); 
myFaculty.setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.putValueC'myFaculty",myFacuity); 
gotoPage("/src/webadmin/F acuity .jsp",request,respond); 

}else if (myUser.myType.equals("DEP_FtEAD")){ 

setProfUpdate(myUser.myLoginId,myParameterValues); 
myFaculty = getProfPersonal(myUser.myLoginld); 
myFaculty.setMessageC'The personal information updated"); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty.setTime(myDate.toString()); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(tme); 
session.putValueC'myDepFIead",myFaculty); 
gotoPage("/src/webadmin/DepartmentFIead.jsp",request,respond); 

}else if (myUser.myType.equals("COMMAND")){ 

setRegimentUpdate(myUser.myLoginId,myParameterValues); 
myFaculty = getRegimentPersonal(myUser.myLoginld); 
myFaculty.setMessageC'The personal information updated"); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty. setT ime(myDate .to StringO); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(tme); 
session.pufValue("myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.j sp" ,request,respond); 

} else {//student 

setStudentUpdate(myUser.myLoginId,myParameterValues); 
myFaculty = getStudentPersonal(myUser.myLoginld); 
myFaculty.setMessageC'The personal information updated"); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty. setT ime(myDate. toStringO); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.putValueC'myStudent",myFaculty); 
gotoPage("/src/webadmin/Student.jsp",request,respond); 

} 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddrQ,!); 

{//end of if 

{//end of execute update 

/* 

Method setNewPassword: updates the new password in the database 

163 



public void setNewPassword(String myUser,Hashtable myParameterValues){ 
Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 
if (conn == null) 

{ 

logWriterdogC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

//here I can get the announcement categories. 

Object vail = myParameterValues.get("firstText"); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("update users set password = + vall.toStringO); 

myQuery.appendC" where login_id="' + myUser +""'); 

conn, set AutoCommit(false); 

stmt. executeUpdate(myQuery .to StringO); 

conn.commit(); 

conn, set AutoCommit(true); 

rs.closeO; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeCormectionC myThesis", conn); 

} 


}//end of get prof personal information 


/* 

Method executePersonahexecutes personal info request for user 
and sends respond to the proper jsp file 

*/ 

public void executePersonal(Hashtable myParameterValues, 
HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriter.logC'personal info requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty; 


164 



myFaculty = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
java.util.Date myDate = new java.util.Date(); 
if (myUser.myType.equals("FACULTY")){ 

myFaculty = getProfPersonal(myUser.myLoginld); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty .setT ime(myDate .to StringO); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.putValueC'myFaculty",myFacuity); 
gotoPage("/src/webadmin/F acuity .jsp",request,respond); 

}else if (myUser.myType.equals("COMMAND")){ 
myFaculty = getRegimentPersonal(myUser.myLoginld); 
myF acuity. setN ame (myU ser .myN ame); 
myFaculty.setLastName(myUser.myLastName); 
myF acuity .setLogin(myUser. myLoginId); 
myFaculty. setT ime(myDate .toStringO); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.putValueC'myRegiment",myFaculty); 
gotoPage("/src/webadmin/Regiment.j sp",request,respond); 

}else if (myUser.myType.equals("DEP_FIEAD")){ 
myFaculty = getProfPersonal(myUser.myLoginld); 
myFacuity.setLogin(myUser.myLoginld); 
myFaculty.setTime(myDate.toString()); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.pufValue("myDepFIead",myFaculty); 
gotoPage("/src/webadmin/DepartmentFIead.jsp",request,respond); 

}else { 

myFaculty = getStudentPersonal(myUser.myLoginld); 
myF acuity. setLogin(myUser. myLoginId); 
myFaculty. setT ime(myDate .to StringO); 
myFaculty. setOperation("Personal_information"); 
myFaculty.setMessageC'To change the password use the bottom form"); 
FlttpSession session = request.getSession(true); 
session.putValue("myStudent",myFaculty); 
gotoPage("/src/webadmin/Student.jsp",request,respond); 

} 

}else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 

" at" + request.getRemoteAddrQ,!); 

}//end of if 

}//end of execute personal information. 

/* 

Method getRegimentPersonal: gets the data from the database . 

*/ 

public Communicator getRegimentPersonal(String myUser){ 

Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new StringO; 


165 



boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 
try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("SELECT distinct f.name,f.mid_name,flast_name,"); 
myQuery.append("r.unit_name,frank,f email,froomno,"); 
myQuery.append("ftel_no,faddress,fcity,f province"); 
myQuery.append(" from users u, command_personel f regiment r "); 
myQuery.append("where f command unit = r.unit id and "); 
myQuery.append("fperson_id = u.user id and u.login_id="'+myUser+""'); 

rs = stmt.executeQuery(myQuery.toString()); 

rs.next();// no while because there is only one result 

myFaculty.setLoginl(myUser); 

myF acuity. setN ame 1 (rs .getString( 1)); 

myFaculty.set]VlidNamel(rs.getString(2)); 

myFaculty.setLastNamel(rs.getString(3)); 

myFaculty.setCompanyName(rs.getString(4)); 

myF acuity. setRank(rs .getString(5)); 

myF acuity. setEmail(rs .getString(6)); 

myFaculty.setRoom(rs.getString(7)); 

myF acuity. setT el(rs.get String(8)); 

myFaculty. setAddress(rs .getString(9)); 

myF acuity. setCity(rs. get String( 10)); 

myFaculty.setProvince(rs.getString(ll)); 


rs.closeO; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error",1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return myFaculty; 

} 


}//end of get command personal information 

/* 

Method getProfPersonal: gets the data from the database . 

166 



public Communicator getProfPersonal(String myUser) { 

Communicator myFaculty = new Communicator(); 

Connection conn = poolMgr.getConnection("myThesis"); 

String information = new String(); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("SELECT distinct fname,f.mid_name,flast_name,"); 
myQuery.append("f degree,d.department_name,f rank,f email,froomno,") 
myQuery.append("ftel_no,faddress,fcity,f province"); 
myQuery.append(" from users u, faculty f, departments d "); 
myQuery.append("where fprogram id = d.department no and "); 
myQuery.append("f facultyid = u.userid and u.login_id="'+myUser+""'); 

rs = stmt.executeQuery(myQuery.toString()); 
rs.next();// no while because there is only one result 

myF acuity. setN ame(rs .getString( 1)); 
myFaculty.setMidName(rs.getString(2)); 
myFaculty.setLastName(rs.getString(3)); 
myFaculty.setDegree(rs.getString(4)); 
myFaculty.setDepartment(rs.getString(5)); 
myF acuity. setRank(rs .getString(6)); 
myF acuity. setEmail(rs .getString(7)); 
myFaculty.setRoom(rs.getString(8)); 
myF acuity. setT el(rs. get String(9)); 
myFaculty. setAddress(rs.getString( 10)); 
myF acuity. setCity(rs. get String( 11)); 
myFaculty. setProvince(rs.getString( 12)); 


rs.closeO; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr.freeConnection("myThesis", conn); 
return myFaculty ; 

} 


167 



}//end of get prof personal information 


/* 

Method getStudentPersonal: gets the data from the database . 

*/ 

publie Communieator getStudentPersonal(String myUser) { 

Communieator myFaeulty = new Communieator(); 

Conneetion eonn = poolMgr.getConneetion("myThesis"); 

String information = new String(); 
boolean result = false; 
if (eonn == null) 

{ 

logWriterdogC'database eonneetion error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = eonn. create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("SELECT distinct s.name,s.mid_name,s.last_name,"); 
myQuery.append("s.section_id,p.program_name,re.unit_name,s.email,s.dormitory,"); 
myQuery.append("do.location,s.address,s.city,s.province, s.student id "); 
myQuery.append(" from users u, students s, programs p, dormitory do,sections se ,"); 
myQuery.append(" regiment re "); 

myQuery.append("where s.program id = p.program id and "); 

myQuery.append("s.dormitory = do.dormitory no and s.section id = se.section id and "); 

myQuery.append("se.company_no = re.unit id and "); 

myQuery.append("s.student_id = u.userid and u.login_id="'+myUser+""'); 


rs = stmt.executeQuery(myQuery.toString()); 

rs.next();// no while because there is only one result 

myF acuity. setN ame(rs .getString( 1)); 
myFaeulty. setMidName(rs.getString(2)); 
myFaculty.setLastName(rs.getString(3)); 
myFaeulty. setSection(rs.getString(4)); 
myFaeulty. setDepartment(rs.getString(5)); 
myFaculty.setRegiment(rs.getString(6)); 
myF acuity. setEmail(rs .getString(7)); 
myF acuity. setRoom(rs. get String(8)); 
myFaeulty. setLocation(rs.getString(9)); 
myFaeulty. setAddress(rs.getString( 10)); 
myF acuity. setCity (rs.get String( 11)); 
myFaculty.setProvince(rs.getString(12)); 
myF acuity. setUserId(rs. get String( 13)); 


rs.closeO; 


168 



stmt.closeQ; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error",!); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return my Faculty ; 

} 


}//end of get student personal information 


/* 

Method executeFlomePageiexecutes home page request for user 
and sends respond to the proper jsp file 

*/ 

public void executel-lomePage(Hashtable myParameterValues, 
FlttpServletRequest request, 

FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

logWriterdogC'home page requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser. state) {//the result of the cookiecheck must be affirmative, 
if (myUser.myType.equals("FACULTY")) { 
handleFaculty(myUser,request,respond); 

{else if (myUser.myType.equals("STUDENT")){ 
handle Student(myU ser,request,respond); 

{else if (myUser.myType.equals("COMMAND")){ 
handleRegiment(myUser,request,respond); 

{else if (myUser.myType.equalsC'DEP HEAD"))) 
handleDepFlead(myUser,request,respond); 

} 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute prof home page. 


/* 

Method executeSchedule:executes schedule info for student and faculty personnel 
and sends respond to the proper jsp file 

*/ 


public void executeSchedule(Flashtable myParameterValues, 
FlttpServletRequest request, 
FlttpServletResponse respond)) 

UserType myUser = new UserType(); 
myUser = checkCookie(request,respond); 

169 



logWriter.logC Schedule info requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser.state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty, myStudent; 
myFaculty = new Communicator(); 
myStudent = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 
myFaculty.setSchedule(getSchedule(myUser)); 
java.util.Date myDate = new java.util.Date(); 
myFaculty. setLogin(myUser.myLoginld); 
myFaculty. setName(myUser.myName); 
myFaculty. setLastName(myUser.myLastName); 
myFaculty. setOperation("prof_schedule"); 
myFaculty.setTime(myDate.toString()); 
if (myUser.myType.equals("FACULTY")) { 

FlttpSession session = request.getSession(true); 
ses sion. put Value (" myFaculty", myFaculty); 
gotoPage("/src/webadmiti/F acuity .jsp",request,respond); 

}else{ 

myStudent = myFaculty; 

FlttpSession session = request.getSession(true); 

session.putValue("myStudent",myStudent); 

gotoPage("/src/webadmin/Student.jsp",request,respond); 

} 

{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),l); 

}//end of if 

}//end of execute professor schedule. 

/* 

Method getSchedule: gets the data from the database . 


public String getSchedule(UserType myUser) { 

Connection conn = poolMgr.getConnection("myThesis"); 
String schedule = new String(); 

String courseld = new String(); 

String sectionid = new String(); 

String classRoom = new String(); 

String courseName = new String(); 
int classTime,classDate; 
boolean isStudent = false; 
boolean result = false; 

if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

//here I can get the announcement categories. 


170 



CourseType myCourses[][]; 
myCourses = new CourseType[7][7]; 
CourseType thisCourse = new CourseType(); 
//initialize the array; 
for (int X = 1 ; X < 7 ; x++) { 
for (int y = 1 ; y < 7 ; y++) { 

myCourses[x][y] = new CourseType(); 

} 

} 


StringBuffer myQuery = new StringBuffer(); 
if (myUser.myType.equals("FACULTY")) { 

myQuery.append("SELECT distinct c.course id, c.section id 
myQuery.append(" c.classroom no, c.course time, course date,"); 
myQuery.append(" co.course name from class enrollment c, users u,"); 
myQuery.append(" courses co where c.faculty id = u.user id and"); 
myQuery.append(" u.login_id="' + myUser.myLoginId); 
myQuery.appendC" and c.course id = co.course id "); 

}else{ 

myQuery.append("SELECT distinct c.course id, f last name ,"); 
myQuery.append(" c.classroom no, c.course time, course date,"); 
myQuery.append(" f name from class enrollment c, users u,"); 
myQuery.append(" students s, faculty f,"); 

myQuery.append(" courses co where s.student id = u.user id and"); 
myQuery.append(" u.login_id="' + myUser.myLoginId); 
myQuery.appendC" and c.course id = co.course id "); 
myQuery.append(" and c.section id = s.section id "); 
myQuery.appendC and c.faculty id = f faculty id "); 
isStudent = true; 

} 


rs = stmt.executeQuery(myQuery.toString()); 
while (rs.nextQ) 

{ 

courseld = rs.getString(l); 

sectionid = rs.getString(2);//for students it means professor 
classRoom = rs.getString(3); 

classTime = Integer.valueOf(rs.getString(4)).intValue(); 
classDate = Integer. valueOf(rs.getString(5)).intValue(); 
courseName = rs.getString(6); 

myCourses[classTime][classDate].courseld = courseld; 
myCourses[classTime] [classDate]. sectionid = sectionid; 
myCourses[classTime][classDate].classRoom = classRoom; 
myCourses[classTime][classDate].courseName = courseName; 


[//end of while 

String myTime[] = {"0830","0930","1030","H30","1330","1430"}; 
for (int X = 1 ; X <= 6 ; x++) { 

schedule += " <tr> <td width=\"8%\" height=\"20\"> <p style=\"word-spacing: 0;" + 

" margin-top: 0; margin-bottom: 0\">"+ 

"<p align=\"center\" style=\"word-spacing: 0; margin-top: 0; margin-bottom: 0\">"+ 
"<font size=\"l\">" -I- x -l- 

"</font></td> <td width=\"8%\" height=\"20\">"+ 

171 



"<p align=\"center\" style=\"word-spacing: 0; margin-top: 0; margin-bottom: 0\">"+ 
"<font size=\"l\">" -I- myTime[x-l] -l- 
"</font></td>"; 
for (int y = 1 ; y <= 5 ; y++) { 

if (myCourses[x][y].courseId.equals(" ")){ 

schedule += " <td width=\"16%\" height=\"20\">" + 

"<p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">&nbsp;</font></p>"-l- 
"<p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">&nbsp;</font></p>"-l- 
"<p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">&nbsp;</font></td>"; 


} else { 

schedule += "<td width=\"16%\" height=\"20\" bgcolor=\"#00FF00\">"+ 
"<p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">"-l- 
"Course:&nbsp;"+ myCourses[x][y].courseId + 

"</font></p> <p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">"-l- 
"Room:&nbsp;&nbsp;" + myCourses[x][y].classRoom -l- 
"</font></p> <p style=\"word-spacing: 0; margin: 0\"><font size=\"l\">"; 
if (isStudent) { 

schedule += "Professor:" -i- myCourses[x][y].sectionId + + 

myCourses[x][y].courseName + " </font></td> 

}else{ 

schedule += "Section:" -i- myCourses[x][y].sectionId + 

"</font></td> 

} 

}//end if 

}//end of first for 
schedule -i-="</tr>"; 

} //end of second for 


rs.closeQ; 

stmt.closeO; 

}//end of try 
catch (Exception e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return schedule; 

} 


}//end of get schedule. 


/* 

Method executeCourses:executes course request for student and faculty personnel 
and sends respond to the proper jsp file 

*/ 

public void executeCourses(Flashtable myParameterValues, 

FlttpServletRequest request, 

FlttpServletResponse respond)) 


172 



UserType myUser = new UserTypeQ; 
myUser = checkCookie(request,respond); 

logWriter.logC'Course info requested by " + myUser.myLoginId + 

" from " + request.getRemoteAddr(),2); 
if (myUser.state) {//the result of the cookiecheck must be affirmative. 
Communicator myFaculty, myStudent; 
myFaculty = new Communicator(); 
myStudent = new Communicator(); 

//—connect to the db and get+arrange the courses for the user. 

java.util.Date myDate = new java.util.Date(); 
myFaculty.setLogin(myUser.myLoginld); 
myF acuity. setN ame (myU ser .myN ame); 
myFaculty .setLastN ame(myU ser. myLastN ame); 
myFaculty. setOp eration(" course s"); 
myFaculty.setTime(myDate.toString()); 
if (myUser.myType.equals("FACULTY")) { 

myFacuity.setCourses(getProfCourses(myUser)); 

FlttpSession session = request.getSession(true); 
session.putValueC'myFaculty",myFacuity); 
gotoPage("/src/webadmin/F acuity .jsp",request,respond); 

}else{ 

myFaculty. setCourses(getStudentCourses(myUser)); 
myStudent = myFaculty; 

FlttpSession session = request.getSession(true); 
session.putValueC'myStudent",myStudent); 
gotoPage("/src/webadmin/Student.jsp",request,respond); 

} 


{else { 

logWriter.logC'cookie check is in valid for " + myUser.myLoginId + 
" at" + request.getRemoteAddr(),l); 

{//end of if 

{//end of execute courses. 


/* 

Method getProfCourses: gets the data from the database . 

*/ 

public String getProfCourses(UserType myUser) { 
Connection conn = poolMgr.getConnection("myThesis"); 
String announcements = new String(); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

{ 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 


173 



StringBuffer myQuery = new StringBuffer(); 

myQuery.append("SELECT distinct c.course id, co.course name,"); 

myQuery.append("co.course_explanation, co.credits, c.section id from class enrollment c,"); 

myQuery.append(" users u, courses co "); 

myQuery.append(" where c.faculty id = u.user id"); 

myQuery.append(" and u.login_id="' + myUser.myLoginId + and c.course id = co.course id ") 
rs = stmt.executeQuery(myQuery.toString()); 

while (rs.nextQ) 

{ 

String courseld = rs.getString(l); 

String courseName = rs.getString(2); 

String courseExp = rs.getString(3); 

String courseCred = rs.getString(4); 

String sectionid = rs.getString(5); 

announcements = announcements + 

"<tr> <td width=\"8%\" bgcolor=\"#C0C0C0\" valign=\"middle\">"+ 

"<p ahgn=\"center\">"+ 

"<form method=\"POST\""+ 

"style=\"hne-height: 100%; margin: 0\""+ 

" action=\"" + 

"/servlet/webadmin. Academy\""+ 

"onSubmit=\"\" style=\"text-abgn: Center; text-indent: 0; margin: 0\">"+ 

"<p style =\"line-height: 100%; margin: 0\">"+ 

"<input type=\"Submit\" value=\"Show\" name=\"Bl\"></p>"-l- 
"<input type=\"hidden\" name=\"action\" value=\"studentsForProf\">"+ 

"<input type=\"hidden\" name=\"course\" value=\""+ courseld + 

"\"><input type=\"hidden\" name=\"section\" value=\"" + sectionid 

" </form>"-l- 

"</td>"+ 

"<td width=\"9%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">'%courseId+ "</td>"+ 

"<td width=\"l 1%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">'%courseName+ "</td>"+ 
"<td width=\"40%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">'%courseExp-K "</td>"+ 

"<td width=\"13%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">'%courseCred+"</td>"+ 

"<td width=\"9%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">'%sectionId+"</td>"+ 

"</tr>"; 

}//end of while 

rs.closeQ; 

stmt.closeQ; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 


finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return announcements ; 

} 


}//end of getcourses 

/* 

Method getStudentCourses: gets the data from the database . 

*/ 


174 



public String getStudentCourses(UserType myUser) { 

Connection conn = poolMgr.getConnection("myThesis"); 

String courses = new String(); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append("SELECT distinct c.course id, co.course name,"); 

myQuery.append("co.course_explanation, co.credits, f name , f last name from class enrollment 

c,"); 

myQuery.append(" users u, courses co , faculty f, students s"); 
myQuery.append(" where s.student id = u.user id and s.section id = c.section id "); 
myQuery.append(" and c.faculty id = f faculty id "); 

myQuery.append(" and u.login_id="' + myUser.myLoginId + and c.course id = co.course id "); 
rs = stmt.executeQuery(myQuery.toString()); 
int count = 0;//# of courses the student is taking, 
while (rs.nextO) 

{ 

count++; 

String courseld = rs.getString(l); 

String courseName = rs.getString(2); 

String courseExp = rs.getString(3); 

String courseCred = rs.getString(4); 

String profName = rs.getString(5); 

String profLastName = rs.getString(6); 
courses = courses + 

"<tr>"+ 

"<td width=\"9%\" bgcolor=\"#C0C0C0\" valign=\"middle\"> <font size=\"2\">"+count+ 

"</td>"+ 

"<td width=\"9%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">"+courseId+ "</td>"+ 

"<td width=\"H%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">"+courseName+ "</td>"+ 
"<td width=\"40%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">"+courseExp+ "</td>"+ 

"<td width=\"13%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">"+courseCred+"</td>"+ 

"<td width=\"9%\" bgcolor=\"#C0C0C0\"> <font size=\"2\">"+profName+"" 
+profLastName +"</td>"+ 

"</tr>"; 


}//end of while 

rs.closeO; 

stmt.closeO; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 


175 



} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return courses; 

} 

}//end of getStudentCourses 

/* 

Method executeLogin:executes first login for user 
and calls the the proper handler method 

*/ 

public void executeLogin(Hashtable myParameterValues, 

HttpServletRequest request, 

HttpServletResponse respond)) 

UserType myUser = new UserType(); 

//read time 

java.util.Date myTime = new java.util.Date(); 

String myStrTime = "" + myTime.getTimeQ; 

//get the login id and the password 

Object val = myParameterValues.get("loginId"); 

if (val != null) { 

myUser.myLoginId = val.toString(); 

} else { 

logWriter.logC loginid is not entered",!); 

} 

val = myParameterValues.get("password"); 
if (val != null) { 

myUser.myPassword = val.toString(); 

} else { 

logWriter.logC password not entered",!); 

} 

//check the database if the loginid+password are correct. 

if(checkLoginId(myUser)) {//login is OK.record the login,create cookie,give the usercode 
String host = request.getRemoteAddr().toString(); 
recordLogin(myUser.myLoginId,myStrTime,host); 

//create and save a cookie with the login id and time. 

Cookie cookie = new Cookie("loginId", myUser.myLoginId); 

respond.addCookie(cookie); 

cookie = new Cookie("time",myStrTime ); 

respond.addCookie(cookie); 

cookie = new Cookie ("name", myUser.myName); 
respond.addCookie(cookie); 

cookie = new Cookie ("lastName", myUser.myLastName); 
respond.addCookie(cookie); 

cookie = new Cookie ("userCode", myUser.myType); 
respond.addCookie(cookie); 

//get the userCode professor/student/department heads/commander 
if (myUser.myType.equals("FACULTY")) { 

//goto execute faculty function 
handleFaculty(myUser,request,respond); 


176 



} else if (myUser.myType.equals("COMMAND")){ 
handleRegiment(myUser,request,respond); 

} else if (myUser.myType.equals("DEP_HEAD")){ 
liandleDepHead(myUser,request,respond); 

} else if (myUser.myType.equals("STUDENT")){ 
handle Student(myU ser,request,respond); 

} 


} 

else {//login is false resend the login page 
// resendLogin(respond); 

logWriter.logC'sending the login page one more time to " + request.getRemoteAddr(),2); 
try { 

handleReLogin("Your loginid or password is wrong, please try again",request,respond); 
//gotoPage("/sre/webadmin/Login.jsp",request,respond); 
jeateh (Exeeption e){ 


} 

} 

}//end of exeeuteLogin 

/* 

Method handleDepHead: gets the announeements for the DepHead. 

*/ 

publie void handleDepHead(UserType myUser, 

HttpServletRequest request, 

HttpServletResponse respond)) 

Communieator myStudent; 
myStudent = new Communieator(); 

//—eonneet to the db and get+arrange the announeements for the user. 
myStudent.setAnnouneements(getAnnouneements(myUser)); 
java.util.Date myDate = new java.util.Date(); 
myStudent. setLogin(myUser.myLoginld); 
myStudent. setName(myUser.myName); 
myStudent.setLastName(myUser.myLastName); 
myStudent.setOperation("announeements"); 
myStudent. setTime(myDate.toString()); 

HttpSession session = request.getSession(tme); 
session.putValueC'myDepHead",myStudent); 
gotoPage("/sre/webadmin/DepartmentHead.jsp",request,respond); 

}//end of handleDepHead 

/* 

Method handleRegiment: gets the announeements for the Regiment. 

*/ 

publie void handleRegiment(UserType myUser, 

HttpServletRequest request, 

HttpServletResponse respond)) 

Communieator myStudent; 
myStudent = new Communieator(); 

//—eonneet to the db and get+arrange the announeements for the user. 
myStudent.setAnnouneements(getAnnouneements(myUser)); 
java.util.Date myDate = new java.util.Date)); 
myStudent. setLogin(myUser.myLoginld); 


177 



myStudent.setName(myUser.myName); 

myStudent.setLastName(myUser.myLastName); 

myStudent.setOperation("armouncements"); 

myStudent.setTime(myDate.toString()); 

HttpSession session = request.getSession(true); 
session.putValue("myRegiment",myStudent); 
gotoPage("/src/webadmin/Regiment.j sp",request,respond); 

}//end of handleRegiment 

/* 

Method handleStudent: gets the announeements for the Student. 

*/ 

publie void handleStudent(UserType myUser, 

HttpServletRequest request, 

HttpServletResponse respond)) 

Communieator myStudent; 
my Student = new Communieator(); 

//—eonneet to the db and get+arrange the announeements for the user. 
myStudent.setAnnouneements(getAnnouneements(myUser)); 
java.util.Date myDate = new java.util.Date(); 
myStudent. setLogin(myUser.myLoginld); 
myStudent. setName(myUser.myName); 
myStudent.setLastName(myUser.myLastName); 
myStudent.setOperation("announeements"); 
myStudent. setTime(myDate.toString()); 

HttpSession session = request.getSession(tme); 

session.pufValue("myStudent",myStudent); 

gotoPage("/sre/webadmin/Student.jsp",request,respond); 

}//end of handleStudent 

/* 

Method handleFaeulty: gets the announeements for the faeulty. 

*/ 

publie void handleFaeulty(UserType myUser, 

HttpServletRequest request, 

HttpServletResponse respond)) 

Communieator myFaeulty; 
myFaeulty = new Communieator(); 

//—eonneet to the db and get+arrange the announeements for the user. 

myFaeulty. setAnnouneements(getAnnouneements(myUser)); 

java.util.Date myDate = new java.util.Date)); 

myF aeulty. setLogin(myUser. myLoginId); 

myF aeulty. setN ame (myU ser. myN ame); 

myFaeulty.setLastName(myUser.myLastName); 

myFaeulty. setOperation("announeements"); 

myFaeulty. setTime(myDate.toString()); 

HttpSession session = request.getSession(tme); 
session.pufValue("myFaeulty",myFaeulty); 
gotoPage("/sre/webadmin/F aeulty .jsp",request,respond); 

}//end of handleDaeulty 

/* 

Method get Announeements: gets the announeements from the database. 

178 



public String getAnnouncements(UserType myUser){ 

Connection conn = poolMgr.getConnection("myThesis"); 

String announcements = new String(); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 

//get the announcements"); 

try 

{ 

stmt = conn, create Statement(); 

//get the announcement categories. 

StringBuffer myQuery = new StringBuffer(); 

myQuery.append( "SELECT aiuiouncement, category, pub date from announcements where "); 

if (myUser.myType.equals("FACULTY")){ 
myQuery.append(" (category = 3) or (category = 6) or (category = 1)"); 

(else if (myUser.myType.equals("COMMAND")){ 
myQuery.append(" (category = 1) or (category = 4) or (category = 7)"); 

} else if (myUser.myType.equals("STUDENT")){ 
myQuery.append(" (category = 1) or (category = 5) or (category = 7) or (category = 6) "); 

} else { 

myQuery.append(" (category = 1) or (category = 2)"); 

} 


rs = stmt.executeQuery(myQuery.toString()); 
int count = 1; 

while (rs.nextQ) 

{ 

announcements = announcements + 

"<tr> <td width=\"15%\" bgcoloM"#C0C0C0\">" + count + "</td>" + 

"<td width=\"51%\" bgcolor=\"#C0C0C0\">" + rs.getString("announcement") 
+ "</td>" + "<td width=\"34%\" bgcolor=\"#C0C0C0\">" 

+ rs.getStringC'pub date") + "</td> </tr>"; 
count++; 

}//end of while 

rs.closeO; 

stmt.closeO; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return announcements ; 


179 



} 

}//end of getannouncements 


/* 

Method chackLoginIdxhecks if the login is correct or not 

*/ 

public boolean checkLoginId(UserType myUser){ 

Connection conn = poolMgr.getConnection("myThesis"); 
boolean result = false; 
if (conn == null) 

{ 

logWriter.logC'database connection error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 
try 
{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 

myQuery.appendC'SELECT LOGIN ID,PASSWORD,USER_CODE,user_id"); 
myQuery.appendC FROM USERS WHERE LOGIN ID + myUser.myLoginId +.); 

rs = stmt.executeQuery(myQuery.toString()); 

while (rs.nextO) 

{ 

String newLogin = rs.getString("LOGIN_ID"); 

String newPassword = rs.getString("PASSWORD"); 

if (newLogin.equals(myUser.myLoginld) && (newPassword.equals(myUser.myPassword))){ 
myUser.myType = rs.getString("USER_CODE"); 
myUser.myUserld = rs.getString("user_id"); 
result = true; 

}//end of if 
}//end of while 


if (Iresult) { 

logWriter.logC'login has problems",!); 

}else{ 

myQuery = new StringBufferQ; 
myQuery.append("select name,last_name from"); 

if ((myUser.myType.equals("FACULTY")) || (myUser.myType.equals("DEP_HEAD"))){ 
myQuery.append("faculty where faculty id ="'+myUser.myUserId+""'); 

(else if ((myUser.myType.equals("STUDENT"))){ 
myQuery.append("students where student id ="'+myUser.myUserId+""'); 

(else if ((myUser.myType.equals("COMMAND"))){ 
myQuery.append("command_personel where person id ="'+myUser.myUserId+""'); 

} 

rs = null; 

rs = stmt.executeQuery(myQuery.toString()); 
while (rs.nextO) { 

myUser.myName = rs.getString(l); 
myUser.myLastName = rs.getString(2); 


180 



} 

} 

rs.closeO; 

stmt.closeQ; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 

poolMgr. freeConnection(" myThesis", conn); 
return result; 

} 

}//end of checkLoginId 

/* 

Method recordLogin:records the login and login time in to the database 

*/ 


public boolean recordLogin(String loginid, String myStrTime, String host) { 

Connection conn = poolMgr.getConnection("myThesis"); 
boolean result = false; 
if (conn == null) 

{ 

logWriterdogC'database connection error",1); 

} 

//ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 
try 

{ 

stmt = conn, create Statement(); 

StringBuffer myQuery = new StringBuffer(); 
myQuery.append("insert into login records values ("'); 
myQuery.append(loginld + + myStrTime+ + host + "')"); 

stmt.executeUpdate(myQuery.toString()); 

//rs.closeO; 

stmt.closeO; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error",1); 

} 

finally 

{ 

poolMgr. freeConnection("myThesis", conn); 
return result; 


}//end of recordLogin 

/* 

Method checkCookiexhecks if the current request and the cookies are the same. 

*/ 


181 



private UserType checkCookie(HttpServletRequest request, 
HttpServletResponse response) { 

Cookie)] myCookie = request.getCookies(); 

UserType myUser = new UserType(); 

//String user = 

String userTime = 

for(int i=0; i<myCookie.length; i++) { 

Cookie eookie = myCookie[i]; 
if (eookie.getName().equals("loginId")) { 
myUser.myLoginId = eookie.gefValue(); 

} else if (eookie.getName().equals("time")){ 
userTime = eookie.gefValue(); 

} else if (eookie.getName().equals("name")){ 
myUser.myName = eookie.gefValue(); 

} else if (eookie.getName().equals("lastName")){ 
myUser.myLastName = eookie.gefValue(); 

} else if (eookie.getName().equals("userCode")){ 
myUser.myType = eookie.gefValue(); 

} 


}//end of for 

if (eheekLoginldTime(myUser.myLoginld,userTime,request,response))] 
myUser.state = true; 

(else { 

myUser.state = false; 

} 

return myUser; 

}//end of eheekeookie 

/* 

Method eheekLoginldTimexheeks if the eookie is valid/same with the database 

*/ 

private boolean eheekLoginldTime(String user. String userTime, 
HttpServletRequest request, 

HttpServletResponse response)] 

Conneetion eonn = poolMgr.getConneetion("myThesis"); 
boolean result = false; 
if (eonn == null) 

{ 

logWriter.logC'database eonneetion error",1); 

} 

ResultSet rs = null; 

ResultSetMetaData md = null; 

Statement stmt = null; 
try 
{ 

stmt = eonn.ereateStatement(); 

StringBuffer myQuery = new StringBuffer(); 
myQuery.appendC'SELECT LOGlN_lD,LOGlN_TlME "); 
myQuery.appendC'FROM LOGIN RECORDS "); 
rs = stmt.exeeuteQuery(myQuery.toString()); 
while (rs.nextO) 

{ 


182 



String newLogin = rs.getString("LOGIN_ID"); 

String newTime = rs.getString("LOGIN_TIME"); 
if (newLogin. equals(user) && (newTime.equals(userTime))){ 
result = true; 

}//end of if 
}//end of while 
rs.closeO; 
stmt.closeO; 

poolMgr. freeConnection(" myThesis", conn); 
if (result) { 

return result;//it means everything is ok. 

} else { 

//login name and the time is not matching, it means fraud. 

//now 1 will close the connections and send the login page one more time 
//illegal access; 

handleReLogin("Access denied, Please login again", request, response); 
//send the login page write the login bean a message. 

}//end of if 
return false; 

}//end of try 

catch (SQLException e) 

{ 

logWriter.log(e," Exception error", 1); 

} 

finally 

{ 


return result; 

} 

}//end of checkLoginIdTime 

/* 

Method handleReLogin:send the login page to the user 

*/ 

public void handleReLogin(String message, 

HttpServletRequest request, 

HttpServletResponse respond)) 

Communicator myLogin; 
myLogin = new Communicator(); 
myLogin. setMessage(message); 

HttpSession session = request.getSession(true); 
session.putValueC'myLogin",myLogin); 
gotoPage("/src/webadmin/Login.jsp",request,respond); 

}//end of handlcRcLogin 

/* 

Method gotoPagedhis method used to send the proper jsp files as respond. 

*/ 

private void gotoPage(String address, 

HttpServletRequest request, 

HttpServletResponse response) 

{ 

try { 

183 



RequestDispatcher dispatcher = 
getServletContext().getRequestDispatcher(address); 
dispatcher.forward(request, response); 

} 

catch (Exception e) { 
logWriter.log(e," Exception error", 1); 

} 


}//end ofgotopage 

/* 

class UserType:has the attributes of the users. 

*/ 

class UserType { 

String myLoginId = "Rasim"; 

String myPassword = 

String myType= 

String myUserld = 

String myName 
String myLastName 

boolean state = false;//this is used for result. 

} 


/* 

Class CourseType:has the attributes of the courses 

*/ 

class CourseType{ 

String courseName=" "; 

String courseId=""; 

String sectionId=" "; 

String classRoom=" "; 

String classTime=" "; 

String classDate=" "; 

} 

}//end of the class Academy servlet 

2, Source Code of the Connection Pool Class 


* Title: ConnectionPool.java 

* Description: Creates a connection pool. Logs the activities 

* @version 1.0 

*/ 

package webadmin; 

import java.sql.*; 
import java.util.*; 
import java.io.*; 


public class ConnectionPool 

{ 


184 



private String name; 
private String URL; 
private String user; 
private String password; 
private int maxConns; 
private int timeOut; 
private Log Writer log Writer; 


private int checkedOut; 

private Vector freeConnections = new Vector(); 

public ConnectionPool(String name, String URL, String user. 
String password, int maxConns, int initConns, int timeOut, 
PrintWriter pw, int logLevel) 

{ 


this.name = name; 

this.URL = URL; 

this.user = user; 

this.password = password; 

this.maxConns = maxConns; 

this.timeOut = timeOut > 0 ? timeOut: 5; 

logWriter = new LogWriter(name, logLevel, pw); 
initPool(initConns); 

logWriter.logC'New pool created", LogWriter.INFO); 

String If = System.getPropertyC'line.separator"); 
logWriter.log(lf + 

" urU" +URL + lf + 

" user=" + user + If + 

" password^" + password + If + 

" initconns=" + initConns + If + 

" maxconns=" + maxConns + If + 

" logintimeouU" + this.timeOut, Log Writer.DEBUG); 
logWriter.log(getStats(), LogWriter.DEBUG); 

} 


private void initPool(int initConns) 

{ 

for (int i = 0;i< initConns; i++) 

{ 

try 

{ 

Connection pc = newConnection(); 
freeConnections .addElement(pc); 

} 

catch (SQLException e) 

{} 

} 

} 


public Connection getConnection() throws SQLException 

{ 

logWriter.logC'Request for connection received", LogWriter.DEBUG); 

185 



try 

{ 

return getConnectioii(timeOut * 1000); 

} 

catch (SQLException e) 

{ 

logWriter.log(e, "Exception getting connection", 
LogWriter.ERROR); 

throw e; 

} 


private synchronized Connection getConnection(long timeout) 
throws SQLException 


{ 


// Get a pooled Connection from the cache or a new one. 

// Wait if all are checked out and the max limit has 
// been reached. 

long startTime = System.currentTimeMillis(); 
long remaining = timeout; 

Connection conn = null; 

while ((conn = getPooledConnection()) == null) 

{ 

try 

{ 

logWriter.logC'Waiting for connection. Timeout^" + remaining, 
LogWriter.DEBUG); 
wait(remaining); 

} 

catch (InterruptedException e) 

{} 

remaining = timeout - (System.currentTimeMillis() - startTime); 
if (remaining <= 0) 

{ 

// Timeout has expired 

logWriter.log("Time-out while waiting for connection", 
LogWriter.DEBUG); 

throw new SQLException("getConnection() timed-out"); 

} 


// Check if the Connection is still OK 
if (!isConnectionOK(conn)) 

{ 

// It was bad. Try again with the remaining timeout 
logWriter.logC'Removed selected bad connection from pool", 
LogWriter.ERROR); 
return getConnection(remaining); 

} 

checkedOut-i-i-; 

logWriter.logC'Delivered connection from pool", LogWriter.INFO); 
logWriter.log(getStats(), LogWriter.DEBUG); 
return conn; 

} 


186 



private boolean isConnectionOK(Connection conn) 

{ 

Statement testStmt = null; 
try 

{ 

if (!conn.isClosed()) 

{ 

// Try to create Statement to see if it's really alive 
testStmt = conn.createStatement(); 
testStmt.closeO; 

} 

else 

{ 

return false; 


catch (SQLException e) 

{ 

if (testStmt != null) 

{ 

try 

{ 

testStmt.closeO; 

} 

catch (SQLException se) 

{} 

} 

logWriter.log(e, "Pooled Connection was not okay", 
LogWriter.ERROR); 
return false; 

} 

return tme; 

} 

private Connection getPooledConnection() throws SQLException 

{ 

Connection conn = null; 
if (freeConnections.sizeO > 0) 

{ 

// Pick the first Connection in the Vector 
// to get round-robin usage 

conn = (Connection) freeConnections.firstElement(); 
freeConnections.removeElementAt(O); 

} 

else if (maxConns == 0 || checkedOut < maxConns) 

{ 

conn = newConnectionQ; 

} 

return conn; 


private Connection newConnection() throws SQLException 

{ 

Connection conn = null; 
if (user == null) { 

conn = Driver]Vlanager.getConnection(URL); 


187 



} 

else { 

eonn = DriverManager.getConneetion(URL, user, password); 

} 

logWriter.logC'Opened a new eonneetion", LogWriter.INFO); 
return eonn; 

} 


publie synehronized void freeConneetion(Conneetion eonn) 

{ 

// Put the eonneetion at the end of the Veetor 
freeConneetions .addElement(eonn); 
eheekedOut—; 
notify All(); 

logWriter.logC'Retumed eonneetion to pool", LogWriter.INFO); 
logWriter.log(getStats(), LogWriter.DEBUG); 

} 


publie synehronized void releaseQ 

{ 

Enumeration allConneetions = freeConneetions.elements(); 
while (allConneetions .hasMoreElements()) 

{ 

Conneetion eon = (Conneetion) allConneetions.nextElement(); 
try 

{ 

eon.eloseO; 

logWriter.logC'Closed eonneetion", LogWriter.INFO); 

} 

eateh (SQLExeeption e) 

{ 

logWriter.log(e, "Couldn't elose eonneetion". Log Writer.ERROR); 

} 

} 

freeConneetions .removeAllElements(); 

} 


private String getStats() { 
return "Total eonneetions: " + 
(freeConneetions.size() + eheekedOut) + 
" Available: " + freeConneetions.size() + 
" Cheeked-out: " -i- eheekedOut; 


}//end of eonneetionPool 

3, Source Code of the Connection Pool Manager Class 

!** 

* Title: PoolManager.java 

* Deseription: USed to manage the Conneetion pool 

* @version 1.0 
*/ 

paekage webadmin; 


188 



import java.sql.*; 
import java.io.*; 
import java.util.*; 

public class PoolManager 

{ 


static private PoolManager instance; 
static private int clients; 

private Log Writer log Writer; 
private PrintWriter pw; 

private Vector drivers = new VectorQ; 
private Hashtable pools = new Hashtable(); 

private PoolManager() 

{ 

init(); 

} 


static synchronized public PoolManager getlnstance() 

{ 

if (instance == null) 

{ 

instance = new PoolManager(); 

} 

clients++; 
return instance; 

} 


private void init() 

{ 

// Log to System.err until we have read the logfde property 
pw = new PrintWriter(System.err, true); 

logWriter = new LogWriter("PoolManager", LogWriter.INFO, pw); 
InputStream is = getClass().getResourceAsStream("database.properties"); 
Properties dbProps = new Properties(); 
try 

{ 

dbProps.load(is); 

} 

catch (Exception e) 

{ 

logWriter.logC'Can't read the properties file. " + 

"Make sure database.properties is in the CLASSPATH", 

Log W riter. ERROR); 
return; 

} 

String logFile = dbProps.getProperty("logfile"); 
if (logFile != null) 

{ 

try 

{ 

pw = new PrintWriter(new FileWriter(logFile, true), true); 

189 



log Writer. setPrint Writer(pw); 

} 

catch (lOException e) 

{ 

logWriter.logC'Can't open the log file: " + logFile + 
Using System.err instead", LogWriter.ERROR); 


loadDrivers(db Props); 
createPools(db Props); 

} 


private void loadDrivers(Properties props) 

{ 

String driverClasses = props.getProperty("drivers"); 
StringTokenizer st = new StringTokenizer(driverClasses); 
while (st.hasMoreElementsQ) 

{ 

String driverClassName = st.nextToken().trim(); 
try 

{ 

Driver driver = (Driver) 

Class.forName(driverClassName).newInstance(); 
Driver]Vlanager.registerDriver(driver); 
drivers .addElement(driver); 

logWriter.logC'Registered JDBC driver " + driverClassName, 
LogWriter.INFO); 

} 

catch (Exception e) 

{ 

logWriter.log(e, "Can't register JDBC driver: " + 
driverClassName. LogWriter.ERROR); 

} 

} 


private void createPools(Properties props) 

{ 

Enumeration propNames = props.propertyNames(); 
while (propNames.hasMoreElementsO) 

{ 

String name = (String) propNames.nextElement(); 
if (name.endsWith(".url")) 

{ 

String poolName = name.substring(0, name.lastIndexOf(".")); 
String url = props.getProperty(poolName + ".url"); 
if(url==null) 

{ 

logWriter.logC'No URL specified for " + poolName, 

Log Writer. ERROR); 
continue; 

} 

String user = props.getProperty(poolName + ".user"); 

String password = props.getProperty(poolName + ".password"); 


190 



String maxConns = props.getProperty(poolName + 
".maxcorms", "0"); 
int max; 
try 
{ 

max = Integer. valueOf(maxConns).intValue(); 

} 

eateh (NumberFormatExeeption e) 

{ 

logWriter.logC'Invalid maxeonns value " + maxConns + 
" for " + poolName, LogWriter.ERROR); 

max = 0; 

} 


String initConns = props.getProperty(poolName + 
".initeonns", "0"); 

int init; 
try 

{ 

init = Integer.valueOf(initConns).intValue(); 

} 

eateh (NumberFormatExeeption e) 

{ 

logWriter.logC'Invalid initeonns value " + initConns + 
" for " + poolName, LogWriter.ERROR); 

init = 0; 

} 


String loginTimeOut = props.getProperty(poolName + 
".logintimeout", "5"); 
int timeOut; 
try 

{ 

timeOut = Integer.valueOf(loginTimeOut).intValue(); 

I 

eateh (NumberFormatExeeption e) 

{ 

logWriter.logC'Invalid logintimeout value " + loginTimeOut + 
" for " + poolName, LogWriter.ERROR); 
timeOut = 5; 

} 


String logLevelProp = props.getProperty(poolName + 

".loglevel", String.valueOf(LogWriter.ERROR)); 
int logLevel = LogWriter.INFO; 
if (logLevelProp.equalsIgnoreCase("none")) 

{ 

logLevel = LogWriter.NONE; 

} 

else if (logLevelProp.equalsIgnoreCase("error")) 

{ 

logLevel = LogWriter.ERROR; 

} 

else if (logLevelProp.equalsIgnoreCase("debug")) 

{ 

logLevel = LogWriter.DEBUG; 


191 



} 

ConnectionPool pool = 

new ConnectionPool(poolName, url, user, password, 
max, init, timeOut, pw, logLevel); 
pools.put(poolName, pool); 


} 

public Connection getConnection(String name) 

{ 

Connection conn = null; 

ConnectionPool pool = (ConnectionPool) pools.get(name); 
if (pool != null) 

{ 

try 

{ 

conn = pool.getConnection(); 

} 

catch (SQLException e) 

{ 

logWriter.log(e, "Exception getting connection from " + 
name, LogWriter.ERROR); 

} 

} 

return conn; 

} 


public void freeConnection(String name. Connection con) 

{ 

ConnectionPool pool = (ConnectionPool) pools.get(name); 
if (pool != null) 

{ 


pool. freeConnection(con); 

} 

} 


public synchronized void release() 

{ 

// Wait until called by the last client 
if (-clients != 0) 

{ 

return; 

} 


Enumeration allPools = pools.elements(); 
while (allPools.hasMoreElementsO) 

{ 

ConnectionPool pool = (ConnectionPool) allPools.nextElement(); 
pool.releaseO; 

} 

Enumeration allDrivers = drivers.elements(); 
while (allDrivers.hasMoreElementsO) 

{ 

192 



Driver driver = (Driver) allDrivers.iiextElement(); 
try 
{ 

DriverManager. deregisterDriver(driver); 
logWriter.logC'Deregistered JDBC driver " + 

driver.getClass().getName(), LogWriter.INFO); 

} 

catch (SQLException e) 

{ 

logWriter.log(e, "Couldn't deregister JDBC driver: " + 

driver.getClass().getName(), Log Writer.ERROR); 


}//end of connection pool manager 

4. Source Code of the Communicator Java Bean Class 


* Title: Communicator.)ava 

* Description: The special bean used for communicating between servlet and jps fdes 

* @author : Rasim Topuz, Ltjg, Turkish Navy 

* @version 1.0 

*/ 


package webadmin; 


public class Communicator { 
private String login = 

private String loginl = "" 

private String time ^ 

private String announcements 
private String operation = " 

private String courses = "" 
private String schedule = " 

private String name = "" 
private String lastName = ' 
private String midName = 

private String name 1 = " 

private String lastName 1 = 

private String midName 1 
private String degree = "" 
private String department = 
private String rank = 

private String email = ""■ 
private String room = "" 
private String tel = 
private String address = "" 
private String city = 
private String province = " 

private String course 
private String section 
private String message ="' 

private String location 
private String regiment 
private String userid 


193 



private String semester =""; 
private String points 
private String eompanyName 
private String regComName 
private String batComName 
private String eompComName 
private String awards 
private String punishments 

/**Aeeess operation property*/ 
publie String getPunishments() { 
return punishments; 

} 

/**Aeeess sample property*/ 
publie void setPunishments(String newValue) { 
if (newValue!=null) { 
punishments = newValue; 


/**Aeeess operation property*/ 
publie String getAwards() { 
return awards; 

} 

/**Aeeess sample property*/ 
publie void setAwards(String newValue) { 
if (newValue !=null) { 
awards = newValue; 


/**Aeeess operation property*/ 
publie String getCompComName() { 
return eompComName; 

} 

/**Aeeess sample property*/ 
publie void setCompComName(String newValue) { 
if (newValue !=null) { 
eompComName = newValue; 

} 

} 


/**Aeeess operation property*/ 
publie String getBatComName() { 
return batComName; 

} 

/**Aeeess sample property*/ 
publie void setBatComName(String newValue) { 
if (newValue !=null) { 
batComName = newValue; 


/**Aeeess operation property*/ 
publie String getRegComName() { 
return regComName; 

} 

/**Aeeess sample property*/ 

publie void setRegComName(String newValue) { 


194 



if (newValue!=null) { 
regComName = newValue; 


/**Access operation property*/ 
publie String getCompanyNameQ { 
return eompanyName; 

} 

/**Aeeess sample property*/ 
publie void setCompanyName(String newValue) { 
if (newValue !=null) { 
eompanyName = newValue; 


/**Aeeess operation property*/ 
publie String getPoints() { 
return points; 

} 

/**Aeeess sample property*/ 
publie void setPoints(String newValue) { 
if (newValue !=null) { 
points = newValue; 


/**Aeeess operation property*/ 
publie String getSemester() { 
return semester; 

} 

/**Aeeess sample property*/ 
publie void setSemester(String newValue) { 
if (newValue !=null) { 
semester = newValue; 

} 

} 


/**Aeeess operation property*/ 
publie String getUserId() { 
return userid; 

} 

/**Aeeess sample property*/ 
publie void setUserId(String newValue) { 
if (newValue !=null) { 
userid = newValue; 


/**Aeeess operation property*/ 
publie String getRegiment() { 
return regiment; 

} 

/**Aeeess sample property*/ 
publie void setRegiment(String newValue) { 
if (newValue !=null) { 
regiment = newValue; 

} 

} 


195 



/**Access operation property*/ 
publie String getLoeation() { 
return loeation; 

} 

/**Aeeess sample property*/ 
publie void setLoeation(String newValue) { 
if (newValue!=null) { 
loeation = newValue; 


/**Aeeess operation property*/ 
publie String getMessage() { 
return message; 

} 

/**Aeeess sample property*/ 
publie void setMessage(String newValue) { 
if (newValue !=null) { 
message = newValue; 


/**Aeeess operation property*/ 
publie String getSeetion() { 
return seetion; 

} 

/**Aeeess sample property*/ 
publie void setSection(String newValue) { 
if (newValue !=null) { 
seetion = newValue; 


/**Aeeess operation property*/ 
publie String getCourse() { 
return course; 

} 

/**Access sample property*/ 
public void setCourse(String newValue) { 
if (newValue !=null) { 
course = newValue; 

} 


/**Access operation property*/ 
public String getProvince() { 
return province; 

} 

/**Access sample property*/ 
public void setProvince(String newValue) { 
if (newValue !=null) { 
province = newValue; 


/**Access operation property*/ 
public String getCity() { 
return city; 

} 

/**Access sample property*/ 

196 



public void setCity(String newValue) { 
if (newValue!=null) { 
city = newValue; 


/**Access operation property*/ 
public String getAddress() { 
return address; 

} 

/**Access sample property*/ 
public void setAddress(String newValue) { 
if (newValue !=null) { 
address = newValue; 

// address.concat(newValue); 

//address = new String(); 

// address = new String(" ") 

// for (int i=0;i<=newValue.length()-1 ;i++) { 

// address += newValue.charAt(i); 

// } 

// System.out.println(address); 


// address = new String(newValue); 


/**Access operation property*/ 
public String getTel() { 
return tel; 

} 

/**Access sample property*/ 
public void setTel(String newValue) { 
if (newValue !=null) { 
tel = newValue; 


/**Access operation property*/ 
public String getRoom() { 
return room; 

} 

/**Access sample property*/ 
public void setRoom(String newValue) { 
if (newValue !=null) { 
room = newValue; 


/**Access operation property*/ 
public String getRank() { 
return rank; 

} 

/**Access sample property*/ 
public void setRank(String newValue) { 
if (newValue !=null) { 
rank = newValue; 

} 

} 


197 



/**Access operation property*/ 
public String getEmail() { 
return email; 

} 

/**Access sample property*/ 
public void setEmail(String newValue) { 
if (newValue!=null) { 
email = newValue; 


/**Access operation property*/ 
public String getDepartment() { 
return department; 

} 

/**Access sample property*/ 
public void setDepartment(String newValue) { 
if (newValue !=null) { 
department = newValue; 


/**Access operation property*/ 
public String getDegree() { 
return degree; 

} 

/**Access sample property*/ 
public void setDegree(String newValue) { 
if (newValue !=null) { 
degree = newValue; 


/**Access operation property*/ 
public String getMidName() { 
return midName; 

} 

/**Access sample property*/ 
public void setMidName(String newValue) { 
if (newValue !=null) { 
midName = newValue; 


/**Access operation property*/ 
public String getLastName() { 
return lastName; 

} 

/**Access sample property*/ 
public void setLastName(String newValue) { 
if (newValue !=null) { 
lastName = newValue; 

} 

} 


II—- 

/**Access operation property*/ 
public String getMidNamel() { 
return midName 1; 


198 




} 

/**Access sample property*/ 
public void setMidNamel (String newValue) { 
if (newValue!=null) { 
midNamel = newValue; 

} 

} 

/**Access operation property*/ 
public String getLastNamel() { 
return lastNamel; 

} 

/**Access sample property*/ 
public void setLastNamel (String newValue) { 
if (newValue !=null) { 
lastNamel = newValue; 


/**Access operation property*/ 
public String getLogin() { 
return login; 

} 

/**Access sample property*/ 
public void setLogin(String newValue) { 
if (newValue !=null) { 
login = newValue; 


/**Access operation property*/ 
public String getLoginl() { 
return login 1; 

} 

/**Access sample property*/ 
public void setLoginl(String newValue) { 
if (newValue !=null) { 
loginl = newValue; 


/**Access operation property*/ 
public String getSchedule() { 
return schedule; 

} 

/**Access sample property*/ 
public void setSchedule(String newValue) { 
if (newValue !=null) { 
schedule = newValue; 


/**Access operation property*/ 
public String getCourses() { 
return courses; 

} 

/**Access sample property*/ 
public void setCourses(String newValue) { 
if (newValue !=null) { 
courses = newValue; 

} 


199 



} 

/**Access operation property*/ 
public String getOperation() { 
return operation; 

} 

/**Access sample property*/ 
public void setOperation(String newValue) { 
if (newValue!=null) { 
operation = newValue; 

} 

} 


/**Access sample property*/ 
public String getName() { 
return name; 

} 

/**Access sample property*/ 
public void setName(String newValue) { 
if (newValue !=null) { 
name = newValue; 

} 

} 


/**Access sample property*/ 
public String getNamel() { 
return namel; 

} 

/**Access sample property*/ 
public void setNamel (String newValue) { 
if (newValue !=null) { 
namel = newValue; 


/**Access functiouType property*/ 
public String getTime() { 
return time; 

} 

/**Access functiouType property*/ 
public void setTime(String newValue) { 
if (newValue !=null) { 
time = newValue; 

} 

} 


public String getAnnouncements() { 
return announcements; 

} 

/**Access functiouType property*/ 
public void setAnnouncements(String newValue) { 
if (newValue !=null) { 
announcements = newValue; 


}// end of communicator Java bean 


200 



5, Source Code of the Log Writer Class 

!** 

* Title: LogWriter.java 

* Description: records the log activities. 

* @version 1.0 

*/ 

package webadmin; 

import java.io.*; 
import java.util.*; 

public class LogWriter 

{ 

public static final int NONE = 0; 
public static final int ERROR = 1; 
public static final int INFO = 2; 
public static final int DEBUG = 3; 

private static final String ERROR TEXT = "error"; 
private static final String INFO TEXT = "info"; 
private static final String DEBUG TEXT = "debug"; 

private PrintWriter pw; 
private String owner; 
private int logLevel; 

public LogWriter(String owner, int logLevel, PrintWriter pw) 

{ 

this.pw = pw; 

this.owner = owner; 

this.logLevel = logLevel; 

} 


public LogWriter(String owner, int logLevel) 

{ 

this(owner, logLevel, null); 

} 


public int getLogLevel() 

{ 

return logLevel; 

} 


public PrintWriter getPrintWriter() 

{ 

return pw; 

} 

public void setLogLevel(int logLevel) 

{ 

this.logLevel = logLevel; 

} 

public void setPrintWriter(PrintWriter pw) 


201 



{ 

this.pw = pw; 

} 

public void log(String msg, int severityLevel) 

{ 

if (pw != null) 

{ 

if (severityLevel <= logLevel) 

{ 

pw.println("[" + new Date() + "] " + 
getSeverityString(severityLevel) + ": " + 
owner + ": " + msg); 



public void log(Throwable t, String msg, int severityLevel) 

{ 

log(msg + " : " + toTrace(t), severityLevel); 

} 

private String getSeverityString(int severityLevel) 

{ 

switch (severityLevel) 

{ 

case ERROR: 

return ERROR TEXT; 
case INFO: 

return INFO_TEXT; 
case DEBUG: 

return DEBUG_TEXT; 
default: 

return "Unknown"; 

} 

} 

private String toTrace(Throwable e) 

{ 

StringWriter sw = new StringWriter(); 

PrintWriter pw = new PrintWriter(sw); 

e. print StackTrace (pw); 

pw.flush(); 

return sw.toString(); 

} 


6, Source Code of the DepartmentHead JSP File 

<!—File name: Faculty.jsp 

Purposes : To handle the Faculty users requests.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

202 



<HEAD> 

<jsp:useBean id="myDepHead" scope="session" class="webadmin.Commuiiicator" /> 
<jsp:setProperty name="myDepHead" property="*" /> 

<TITLE> 

Department Head 
</TITLE> 

<base target="_self'> 

<meta name="Microsoft Border" content="none"> 

</head> 

<body bgcolor="#C8C8C8"> 

<SCRIPT language=JavaScript> 

var width,height 
var image,ext,studentid 
var condl,cond2 

function facultyview(name,lastName,login,mail,width,height) { 
if (width==0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" 

else {cond2="height="+(height+70)+""}; 

var si ="<TITLE>Faculty info</TITLE>" 
varsll="<CENTER>"; 

var s2 ="<IMG SRC='/src/webadmin/" + login + "jpg' BORDER=0>" 
var sl4="&nbsp;</CENTER><p><CENTER><font size='2'>" + name + 

" " + lastName + "</font></a>" 

var sl5="&nbsp;</CENTER><p><CENTER><a href='mailto:"+ mail+ '"xfont size='2'>" + 
"send mail to " + login + "</font></a>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onClick='selfclose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,scrollbars="+scroll+",menubar=no,"+condl+","+cond2); 

Image Window.document.write(s 1 +s 11 +s2+s 14+s 15+s3+s4) 

ImageWindow.document.closeO 

} 

var width,height 
var image,ext,studentld 
var condl,cond2 

function transferview(studentld,mail,width,height) { 
if (width==0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" 

else {cond2="height="+(height+70)+""}; 

var si ="<TITLE>Student Picture</TITLE>" 
varsll="<CENTER>"; 

var sl5="&nbsp;</CENTER><p><CENTER><a href='mailto:"+ mail+ '"xfont size='2'>" + 
"send mail to " + studentid + "</fonfx/aXp>&nbsp;</p>" 

var s2 ="<IMG SRC='/src/webadmin/" + sfudenfid + "jpg' BORDER=0>" 


203 



var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onClick-self.close()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,scrollbars="+scroll+",menubar=no,"+condl+",''+cond2); 

Image Window.document.write(s 1 +s 11 +s2+s 15+s3+s4) 

ImageWindow.document.closeO 

} 

var width,height 

var eId,eName,eCredit,ext,studentId 
var eondl,eond2 

funetion eourseview(eId,eName,eExp,Credit,width,height) { 
if (width==0) eondl=" " 

else eondl="width="+(width+20)+""; 
if (height==0) {eond2=" 

else {eond2="height="+(height+70)+""}; 

var si ="<TITLE>Course info</TITLE>" 
varsll="<CENTER>"; 

var sl2 = "<table border-1' width=74%' height='106'> <tr>" 

var sl3 = "<td width='41%' height-47'><b>Course id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </b>"+ 
eld + "</td>" 

var sl4 = "<td width='59%' height='141' rowspan='3'><b>Course Explanation : </b>" +eExp + "</td> 
</tr> <tr>" 

var sl5 = "<td width='41%' height='47'><b>Course eredit: </b>" + eCredit + "</td> </tr> <tr>" 
var sl6 = "<td width='41%' height='47'><b>Course name: </b>" + eName + "</td> </tr></table>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onCliek='selfelose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,serollbars="+seroll+",menubar=no,"+eondl+",''+cond2); 

Image Window.doeument.write(s 1 +s 11 +s 12+s 13+s 14+s 15+s 16+s3+s4) 
ImageWindow.doeument.eloseO 

} 

</SCRIPT> 

<table border="0" width="100%" eellspaeing=" 1" height="0"> 

<tr> 

<td width="100%" eolspan="2" valign="bottom"> 

<p ahgn="eenter"><img border="0" sre="/sre/webadmin/aeademy.gif' width="770" 
height=" 100"></p></td> 

</tr> 

<tr> 

<td width="100%" eolspan="2" valign="bottom">&nbsp; 

<p style="text-indent: 0; word-spaeing: 0; margin: 0" ahgn="eenter"> 

<jsp:getProperty name="myDepHead" property="name" /> 

&nbsp; <jsp:getProperty name="myDepHead" property="lastName" /> 

&nbsp;</p> 

<p style="text-indent: 0; word-spaeing: 0; margin: 0" align="eenter"> 

<jsp:getProperty name="myDepHead" property="time" /> 

</p> 


204 



<p style="text-indent: 0; word-spacing: 0; margin: 0">&nbsp;</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="middle" nowrap> 

&nbsp; 

</td> 

<td width="79%" height="0" valign="top"> 

&nbsp; 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top" nowrap> 

<table border="0" width="100%"> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="home_page"> 

<input type="IMAGE" src= "/src/webadmin/myHomePage.gif > 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="department"> 

<input type="IMAGE" src= "/src/webadmin/department.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<input type="hidden" name="action" value="personal_information"> 
<input type="IMAGE" src= "/src/webadmin/personal.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="department"> 
<input type="IMAGE" src= "/src/webadmin/students.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<input type="hidden" name="action" value="department"> 

<input type="IMAGE" src= "/src/webadmin/instructors.gif'> 

</form> 

</td> 

</tr> 


205 



<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<p> 

<a href="mailto:ProjectManager@dho.edu.tr"><img border="0" src^'Vsrc/webadmin/feedback.gif 
widths" 190" height="30"></a></p> 


</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="log_off'> 

<input type="IMAGE" src= "/src/webadmin/log_off.gif'> 

</form> 

</td> 

</tr> 


<!- </tr>-> 

</table> 

</td> 

<td width="79%" height="0" valign="top"> 

<!— this is the special part that the jsp will fdl 
according to the operation value 

if operation is announcements excecute the announcements—> 
<% if (myDepHead.getOperation().equals("announcements")) {%> 
<!— this is the announcement part—> 


<table border="l" width="94%"> 

<tr> 

<td width="100%" bgcolor='#FF0000' colspan="3"> 


<p align="center"><font color='#FFFFOO'><b>Announcements</b></font></p> 
</td> 

</tr> 

<tr> 

<td widths" 15%" bgcolor="#C0C0C0">Number</td> 

<td width="51%" bgcolor="#C0C0C0">Aimouncement</td> 

<td width="34%" bgcolor="#C0C0C0">Published Date</td> 

</tr> 

<jsp:getProperty name="myDepFtead" property="announcements" /> 

</table> 

<!— end of announcement part—> 

<%} if (myDepFtead.getOperation().equals("department")) {%> 

<!— this is the department—> 

<table border="l" widths" 100%" height="112"> 

<tr> 


206 



<td widths" 100%" colspan="5" bgcolor="#FF0000" height="33"> 

<p align="center"><font color="#FFFF00"><b>Department Info for <jsp:getProperty 

name="myDepF[ead" property="name" /> <jsp:getProperty name="myDepF[ead" property="lastName" /> 

</b></font></td> 

</tr> 

<tr> 

<td width="20%" height="19"><b>Department Name</b></td> 

<td width="80%" height="19" colspan="4"> 

<jsp:getProperty name="myDepF[ead" property="department" /></td> 

</tr> 

<tr> 

<td width="100%" height="17" colspan="5" bgcolor="#0000FF"><font 

color="#FFFFOO"><b>Instructors</b></font></td> 

</tr> 

<tr> 

<td width="20%" height="19"><b>No</b></td> 

<td width="20%" height="19"><b>Instructor Degree</b></td> 

<td width="20%" height="19"><b>Name</b></td> 

<td width="20%" height="19"><b>Last Name</b></td> 

<td width="20%" height="19"><b>Rank</b></td> 

</tr> 

<jsp:getProperty name="myDepF[ead" property="aimouncements" /> 

<tr> 

<td width="100%" height="19" colspan="5" bgcolor="#0000FF"><font color="#FFFF00"><b>Courses 
offered in this semester</b></font></td> 

</tr> 

<tr> 

<td width="20%" height="19"><b>No</b></td> 

<td width="20%" height="19"><b>Course Id</b></td> 

<td width="20%" height="19"><b>Name</b></td> 

<td width="20%" height="19"><b>Sections taking</b></td> 

<td width="20%" height="19"><b>Instmctor giving</b></td> 

</tr> 

<jsp:getProperty name="myDepF[ead" property="courses" /> 

</table> 

<!— end of department head part—> 

<%} if (myDepF[ead.getOperation().equals("prof_schedule")) {%> 

<!—this is the class schedule part—> 


<table border="l" widths" 100%" cellspacing=" 1" height="390" bgcoloi="#00FFFF"> 

<tr> 

<td widths" 100%" colspan="7" height="19" bgcolor="#FF0000"> 

<font color="#FFFF00"> 

<p align="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><b>CLASS 
SCHEDULE</b></td> </font> 

</tr> 

<tr> 

<td widths" 16%" colspan="2" height="19" bgcolor="#0000FF"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</td> 

<td widths"84%" colspan="5" height="19" bgcolor="#0000FF"> 

<p ahgn="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="l" 
color="#FFFF00">DAYS</font></td> 

</tr> 


207 



<tr> 


<td width="8%" height="14" bgcolor="#OOOOFF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >No</font></td> 

<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >Time</font></td> 

<td widths" 16%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Monday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Tuesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2 "> Wednesday </font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Thursday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Friday</font></td> 


margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 

margin-bottom: 

0"><font 

color="#FFFF00" 


</tr> 

<jsp:getProperty name="myDepF[ead" property="schedule" /> 


</table> 


<!—end of the class schedule part —> 

<%} if (myDepFtead.getOperation().equals("Personal_information")) {%> 
<!— this is the prof personal information part —> 


<table border="l" width="100%"> 

<tr> 

<td width="491" height="41"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="name" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepFlead" property="name" />"> 

</span>&nbsp; 

M.&nbsp; 

<input readonly type="text" name="midname" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepFlead" property="midName" />"> 

</span>&nbsp; 

Last Name&nbsp; 

<input readonly type="text" name="lastname" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepFlead" property="lastName" />"> 

</span></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Degree&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="degree" size="20" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepFlead" property="degree" />"> 

</span></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"> 


208 



Department 

<input readonly type="text" name="program" size="32" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepHead" property="department" />"> 

</span></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2"> 
Rank&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="rank" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepHead" property="rank" />"> 

</ span>&nbsp;</font> 

</td> 

<td width="98" height="41" bgcolor="#FFFFFF"> 

<p align="center"> 

<img border="0" src="/src/webadmin/<jsp:getProperty name="myDepFlead" 

property="login"/>.jpg" width="70" height="70"> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2">&nbsp; 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="email" size="20" tabindex="l" 
value="<jsp:getProperty name="myDepFtead" property="email" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" tabindex="2" 
value="<jsp:getProperty name="myDepFtead" property="room" />"> 

Tel No <input type="text" name="tel" size="20" tabindex="3" 
value="<jsp:getProperty name="myDepFlead" property="tel" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" tabindex="4" 
value="<jsp:getProperty name="myDepFtead" property="address" />" 

>&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" tabindex="5" 
value="<jsp:getProperty name="myDepFtead" property="city" />" 

> Province <input type="text" name="province" size="20" tabindex="6" 
value="<jsp:getProperty name="myDepFtead" property="province" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"><input type="submit" value="Update" name="updateButton"></font></p> 

<input type="hidden" name="action" value="personal_update"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

</form> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2">&nbsp; 

<font color="#FF0000" size="2">Message : 

<jsp:getProperty name="myDepFtead" property="message" /></font> 


</td> 


209 



</tr> 


<tr> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<td width="595" colspan="2">&nbsp; 

<foiit size="2"><b>PASSWORD 
CHANGE</b></foiit> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2">Your Login 
Id is 

:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="midname" size="20" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myDepHead" property="login"/>"> </font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Enter the 

new Password:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="password" 
name="firstText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Conftrm 

your new Password: <input type="password" name="secondText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2"><input type="submit" value="Change 
Password" name="B 1 "></font></p> 

<input type="hidden" name="aetion" value="ehange_Password"> 

</td> 

</form> 

</tr> 

</table> 

<!— end of personal information part—> 


<!— end of personal information part—> 

<%} if (myDepHead.getOperation().equals("StudentsForDepHead")) {%> 


<jsp:getProperty name="myDepHead" property="announeements" /> 


<table border="l" width="689" height="99"> 

<tr> 

<td width="89" height="l" rowspan="2" bgeolor="#00FF00" valign="middle"> 

Student No 

</td> 

<td width="107" height="l" rowspan="2" bgeolor="#00FF00" valign="middle"> 
Name 
</td> 

<td width="97" height="l" rowspan="2" bgeolor="#00FF00" valign="middle"> 
Last Name 
</td> 

<td width="424" height="13" eolspan="4" bgeolor="#00FF00"> 

<p align="eenter">-Grades-</p> 

</td> 

</tr> 


210 





<tr> 

<td width="127" height="l" bgcolor="#OOFFOO" valign="middle"> 
First Exam 

</td> 

<td width="127" height="l" bgcolor="#OOFFOO" valign="middle"> 
Second Exam 

</td> 

<td width="55" height="l" bgcolor="#00FF00" valign="middle"> 
<p style="word-spacing: 0; margin: 0">Final 

</td> 

<td width="102" height="l" bgcolor="#00FF00" valign="middle"> 
<p style="word-spacing: 0; margin: 0">Course Grade 

</td> 

</tr> 

<jsp:getProperty name="myDepF[ead" property="courses" /> 
</table> 


<!— end of students for prof —> 

<%} %> 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp;</td> 

</tr> 

</table> 


</body> 

</html> 


7. Source Code of the Faculty JSP File 


<!—File name: Faculty.jsp 

Purposes : To handle the Faculty users requests.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

<HEAD> 

<jsp:useBean id="myFaculty" scope="session" class="webadmin.Communicator" /> 
<jsp:setProperty name="myFaculty" property="*" /> 

<T1TLE> 

Faculty 

</TITLE> 

<base target="_self'> 

<meta name="Microsoft Border" content="none"> 

</head> 


<body bgcolor="#C8C8C8"> 
<SCRIPT language=JavaScript> 


211 



var width,height 
var image,ext,studentid 
var eondl,eond2 

function transferview(studentld,mail,width,height) { 
if (width==0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" 

else {cond2="height="+(height+70)+""}; 

var si ="<TITLE>Student Picture</TITLE>" 
varsll="<CENTER>"; 

var sl5="&nbsp;</CENTER><p><CENTER><a href='mailto:"+ mail+ '"xfont size='2'>" + 
"send mail to " + studentid + "</font></a><p>&nbsp;</p>" 

var s2 ="<IMG SRC='/src/webadmin/" + studentid + ".jpg' BORDER=0>" 
var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onClick='selfclose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,scrollbars="+scroll+",menubar=no,"+condl+","+cond2); 

Image Window.document.write(s 1 +s 11 +s2+s 15+s3+s4) 

ImageWindow.document.closeO 

} 

</SCRIPT> 


<table border="0" width="100%" cellspacing=" 1" height="0"> 

<tr> 

<td width="100%" colspan="2" valign="bottom"> 

<p abgn="center"><img border="0" src="/src/webadmin/academy.gif' width="770" 
height=" 100"></p></td> 

</tr> 

<tr> 

<td width="100%" colspan="2" valign="bottom">&nbsp; 

<p style="text-indent: 0; word-spacing: 0; margin: 0" abgn="center"> 

<jsp:getProperty name=" my Faculty" property="name" /> 

&nbsp; <jsp:getProperty name="myFaculty" property="lastName" /> 

&nbsp;</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0" align="center"> 

<jsp:getProperty name="myFaculty" property="time" /> 

</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0">&nbsp;</td> 

</tr> 

<tr> 

<td width="21%" height="0%" vabgn="middle" nowrap> 

&nbsp; 

</td> 

<td width="79%" height="0" valign="top"> 

&nbsp; 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" vabgn="top" nowrap> 

212 



<table border="0" width="100%"> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="home_page"> 

<input type="IMAGE" src= "/src/webadmin/myHomePage.gif > 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="courses"> 

<input type="IMAGE" src= "/src/webadmin/courses.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="personal_information"> 
<input type="IMAGE" src= "/src/webadmin/personal.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="schedule"> 

<input type="IMAGE" src= "/src/webadmiii/classSchedule.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="courses"> 

<input type="IMAGE" src= "/src/webadmin/studeiits.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="courses"> 

<input type="IMAGE" src= "/src/webadmiii/submitGrades.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 


<p> 


213 



<a href="mailto:ProjectManager@dho.edu.tr"><img border="0" src^'Vsrc/webadmin/feedback.gif 
widths" 190" height="30"></a></p> 


</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="log_off'> 

<input type="IMAGE" src= "/src/webadmin/log_off.gif'> 

</form> 

</td> 

</tr> 

<!- </tr>-> 

</table> 

</td> 

<td width="79%" height="0" valign="top"> 

<!— this is the special part that the jsp will fdl 
according to the operation value 

if operation is announcements excecute the announcements—> 

<% if (myFaculty.getOperation().equals("announcements")) {%> 

<!— this is the announcement part—> 


<table border="l" width="94%"> 

<tr> 

<td width="100%" bgcolor='#FF0000' colspan="3"> 


<p align="center"><font color='#FFFFOO'><b>Announcements</b></font></p> 
</td> 

</tr> 

<tr> 

<td widths" 15%" bgcolor="#C0C0C0">Number</td> 

<td width="51%" bgcolor="#C0C0C0">Aimouncement</td> 

<td width="34%" bgcolor="#C0C0C0">Published Date</td> 

</tr> 

<jsp:getProperty name="myFacuity" property="announcements" /> 

</table> 

<!— end of announcement part—> 


<%} if (myFaculty.getOperation().equals("courses")) {%> 


<!— this is the courses part—> 


<table border="l" width="99%"> 

<tr> 

<td widths" 100%" bgcolor="#FF0000" colspan="6"> 

<p align="center"><font coloi^"#FFFF00" ><b>You are currently giving the 
following Courses</b></font></p> 

</td> 

</tr> 

<tr> 

<td width="8%" bgcolor="#C0C0C0"><font size="2">Selection</font></td> 
<td width="9%" bgcolor="#C0C0C0"><font size="2">Course Id</font></td> 

214 



<td width="l 1%" bgcolor="#COCOCO"><font size="2">Course Name</font></td> 

<td width="40%" bgcolor="#COCOCO"><font size="2">Explanation&nbsp;</foiit></td> 
<td width="13%" bgcolor="#COCOCO"><font size="2">Credits</font></td> 

<td width="9%" bgcolor="#COCOCO"><font size="2">Sectioii</font></td> 

</tr> 

<jsp:getProperty name="myFacuity" property="courses" /> 

</table> 


<!— end of courses part—> 

<%} if (myFaculty.getOperation().equals("prof_schedule")) {%> 
<!—this is the class schedule part—> 


<table border="l" widths" 100%" cellspacing=" 1" height="390" bgcoloi="#00FFFF"> 

<tr> 

<td widths" 100%" colspan="7" height="19" bgcolor="#FF0000"> 

<p align="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0">CLASS 
SCHEDULE</td> 

</tr> 

<tr> 

<td widths" 16%" colspan="2" height="19" bgcolor="#0000FF"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</td> 

<td widths"84%" colspan="5" height="19" bgcolor="#0000FF"> 

<p ahgn="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="l" 
color="#FFFF00">DAYS</font></td> 

</tr> 

<tr> 


<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >No</font></td> 

<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size="2">Time</font></td> 

<td widths" 16%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Monday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Tuesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Wednesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Thursday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Friday</font></td> 


margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 


</tr> 

<jsp:getProperty name="myFaculty" property="schedule" /> 


</table> 


215 



<!—end of the elass sehedule part —> 


<%} if (myFaeulty.getOperation().equals("Personal_information")) {%> 
<!— this is the prof personal information part —> 


<table border="l" width="100%"> 

<tr> 

<td width="491" height="41"> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="name" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="name" />"> 

</span>&nbsp; 

M.&nbsp; 

<input readonly type="text" name="midname" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="midName" />"> 

</span>&nbsp; 

Last Name&nbsp; 

<input readonly type="text" name="lastname" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="lastName" />"> 

</span></font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Degree&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="degree" size="20" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="degree" />"> 

</span></font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"> 

Department 

<input readonly type="text" name="program" size="32" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="department" />"> 

</span></font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font size="2"> 
Rank&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="rank" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myFaeulty" property="rank" />"> 

</ span>&nbsp;</font> 

</td> 

<tdwidth="98" height="41" bgeolor="#FFFFFF"> 

<p align="eenter"> 

<img border="0" sre="/sre/webadmin/<jsp:getProperty name="myFaeulty" property="login"/>.jpg" 
width="70" height="70"> 

</td> 

</tr> 

<tr> 

<td width="595" eolspan="2">&nbsp; 

<form method="POST" aetion="/servlet/webadmin.Aeademy" onSubmit=""> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="email" size="20" tabindex=" 1" 
value="<jsp:getProperty name="myFaeulty" property="email" />"> 

</font></p> 


216 



<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" tabindex="2" 
value="<jsp:getProperty name="myFaculty" property="room" />"> 

Tel No <input type="text" name="tel" size="20" tabindex="3" 
value="<jsp:getProperty name="myFaculty" property="tel" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" tabindex="4" 
value="<jsp:getProperty name="myFacuity" property="address" />" 

>&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" tabindex="5" 
value="<jsp:getProperty name="myFacuity" property="city" />" 

> Province <input type="text" name="province" size="20" tabindex="6" 
value="<jsp:getProperty name="myFacuity" property="province" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"><input type="submit" value="Update" name="updateButton"></font></p> 

<input type="hidden" name="action" value="personal_update"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

</form> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2">&nbsp; 

<font color="#FF0000" size="2">Message : 

<jsp:getProperty name="myFaculty" property="message" /></font> 


</td> 

</tr> 


<tr> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<td width="595" colspan="2">&nbsp; 

<font size="2"><b>PASSWORD 
CHANGE</b></font> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2">Your Login 
Id is 

:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="midname" size="20" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myFaculty" property="login"/>"> </font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Enter the 

new Password:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="password" 
name="firstText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Confirm 

your new Password: <input type="password" name="secondText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2"><input type="submit" value="Change 
Password" name="B 1 "></font></p> 

<input type="hidden" name="action" value="change_Password"> 

</td> 


217 



</form> 

</tr> 

</table> 

<!— end of personal information part—> 

<!— this is the students for prof part —> 

<%} if (myFaculty.getOperation().equals("StudentsForProfessor")) {%> 


<jsp:getProperty name="myFacuity" property="announcements" /> 


<table border="l" width="689" height="99"> 

<tr> 

<td width="84" height="l" rowspan="2" bgcolor="#00FF00" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><font size="3"><input type="submit" value="Student No" 
name="B2" style="font-size: 8pt"></font></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value=" studentno" > 

<input type="hidden" name="course" value="<jsp:getProperty name="myFaculty" property="course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFacuity" 
property=" section" />"> 

</form> 

</td> 

<td width="140" height="l" rowspan="2" bgcolor="#00FF00" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><font size="3"><input type="submit" value="Name" 
name="B2" style="font-size: 8pt"></font></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value="name"> 

<input type="hidden" name="course" value="<jsp:getProperty name=" my Faculty" property=" course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFaculty" 
property=" section" />"> 

</form> 

</td> 

<td width="99" height="l" rowspan="2" bgcolor="#00FF00" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><font size="3"><input type="submit" value="Last Name" 
name="B2" style="font-size: 8pt"></font></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value="last_name"> 

<input type="hidden" name="course" value="<jsp:getProperty name="myFaculty" property="course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFacuity" 
property="section" />"> 

</form> 

</td> 

<td width="424" height="13" colspan="4" bgcolor="#00FF00"> 

<p align="center">-Grades-</p> 

</td> 


218 





</tr> 

<tr> 

<td width=" 111" lieight="l" bgcolor="#OOFFOO" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><input type="submit" value="First Exam" name="Bl" 
style="font-size: 8pt"></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value="first_midterm"> 

<input type="hidden" name="course" value="<jsp:getProperty name=" my Faculty" property="course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFacuity" 

propcrty="section" />"> 

</form> 

</td> 

<td width="134" hcight="l" bgcolor="#00FF00" valign="middlc"> 

<form mcthod="POST" stylc="word-spacing: 0; margin: 0" action="/scrvlct/wcbadmin.Acadcmy" 
onSubmit=""> 

<p stylc="word-spacing: 0; margin: 0"><input typc="submit" valuc="Sccond Exam" namc="Bl" 
stylc="font-sizc: 8pt"></p> 

<input typc="hiddcn" namc="action" valuc="studcntsForProf'><input typc="hiddcn" namc="ordcr" 
valuc="sccond_midtcrm"> 

<input typc="hiddcn" namc="coursc" valuc="<jsp:gctPropcrty namc="myFaculty" propcrty="course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFacuity" 

property=" section" />"> 

</form> 

</td> 

<td width="65" height="l" bgcolor="#00FF00" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><input type="submit" value="Final" name="B2" style="font- 
size: 8pt"></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value=" final "> 

<input type="hidden" name="course" value="<jsp:getProperty name=" my Faculty" property=" course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFaculty" 
property=" section" />"> 

</form> 

</td> 

<td width="99" height="l" bgcolor="#00FF00" valign="middle"> 

<form method="POST" style="word-spacing: 0; margin: 0" action="/servlet/webadmin.Academy" 
onSubmit=""> 

<p style="word-spacing: 0; margin: 0"><input type="submit" value="Course Grade" name="Bl" 
style="font-size: 8pt"></p> 

<input type="hidden" name="action" value="studentsForProf'><input type="hidden" name="order" 
value="grade"> 

<input type="hidden" name="course" value="<jsp:getProperty name="myFaculty" property="course" 

/>"> 

<input type="hidden" name="section" value="<jsp:getProperty name="myFacuity" 

property="section" />"> 

</form> 

</td> 

</tr> 

</table> 


219 



<jsp:getProperty name="myFacuity" property="courses" /> 
<!— end of students for prof —> 

<%} %> 


<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp;</td> 

</tr> 

</table> 


</body> 

</html> 


8, Source Code of the Regiment JSP File 


<!—File name: Regiment.jsp 

Purposes : To handle the Regiment users requests.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

<HEAD> 

<jsp:useBean id="myRegiment" scope="session" class="webadmin.Communicator" /> 
<jsp:setProperty name="myRegiment" property="*" /> 

<TITLE> 

Regiment 

</TITLE> 

<base target="_self'> 

<meta name="Microsoft Border" content="none"> 

</head> 

<body bgcolor="#C8C8C8"> 

<SCRIPT language=JavaScript> 

var width,height 
var image,ext,studentid 
var condl,cond2 

function facultyview(name,lastName,login,mail,width,height) { 
if (width=0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" "}; 

else {cond2="height="+(height+70)+""}; 

var si ="<TITLE>Faculty info</TITLE>" 
varsll="<CENTER>"; 

var s2 ="<IMG SRC='/src/webadmin/" + login + ".jpg' BORDER=0>" 

220 



var sl4="&nbsp;</CENTER><p><CENTER><font size='2'>" + name + 

" " + lastName + "</font></a>" 

var sl5="&nbsp;</CENTER><p><CENTER><a href='mailto:"+ mail+ '"xfont size='2'>" + 
"send mail to " + login + "</font></a>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onCliek='self.elose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,serollbars="+seroll+",menubar=no,"+eondl+","+eond2); 

Image Window.doeument.write(s 1 +s 11 +s2+s 14+s 15+s3+s4) 

ImageWindow.doeument.eloseO 


var width,height 

var eId,eName,eCredit,ext,studentId 
var eondl,eond2 

funetion eourseview(eId,eName,eCredit,eExp,width,height) { 
if (width==0) eondl=" " 

else eondl="width="+(width+20)+""; 
if (height==0) {eond2=" 

else {eond2="height="+(height+70)+""}; 

var si ="<TITLE>Course info</TITLE>" 
varsll="<CENTER>"; 

var sl2 = "<table border-1' width=74%' height='106'> <tr>" 

var sl3 = "<td width='41%' height-47'><b>Course id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </b>"+ 
eld + "</td>" 

var sl4 = "<td width='59%' height='141' rowspan='3'><b>Course Explanation : </b>" +eExp + "</td> 
</tr> <tr>" 

var sl5 = "<td width='41%' height='47'><b>Course eredit: </b>" + eCredit + "</td> </tr> <tr>" 
var sl6 = "<td width='41%' height='47'><b>Course name: </b>" + eName + "</td> </tr></table>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onCliek='selfelose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,serollbars="+seroll+",menubar=no,"+eondl+","+eond2); 

Image Window.doeument.write(s 1 +s 11 +s 12+s 13+s 14+s 15+s 16+s3+s4) 
ImageWindow.doeument.eloseO 

} 

</SCRIPT> 

<table border="0" width="100%" eellspaeing=" 1" height="0"> 

<tr> 

<td width="100%" eolspan="2" valign="bottom"> 

<p ahgn="eenter"><img border="0" sre="/sre/webadmin/aeademy.gif' width="770" 
height=" 100"></p></td> 

</tr> 

<tr> 

<td width="100%" eolspan="2" valign="bottom">&nbsp; 

221 



<p style="text-indent: 0; word-spacing: 0; margin: 0" align="center"> 

<jsp:getProperty name="myRegiment" property="name" /> 

&nbsp; <jsp:getProperty name="myRegiment" property="lastName" /> 

&nbsp;</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0" align="center"> 

<jsp:getProperty name="myRegiment" property="time" /> 

</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0">&nbsp;</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="middle" nowrap> 

&nbsp; 

</td> 

<td width="79%" height="0" valign="top"> 

&nbsp; 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top" nowrap> 

<table border="0" width="100%"> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<p> 

<input type="hidden" name="action" value="home_page"> 

<input type="IMAGE" src= "/src/webadmin/myHomePage.gif'> 

</p> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<input type="hidden" name="action" value="unitsForRegiment"> 

<input type="IMAGE" src= "/src/webadmin/units.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<p><font size="l"> </font></p> 

<input type="hidden" name="action" value="personal_information"> 

<input type="IMAGE" src= "/src/webadmin/personal.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<p><font size="l"><input type="IMAGE" src= "/src/webadmin/studentsOfficers.gif'></font></p> 
<input type="hidden" name="action" value="unitsForRegiment"> 

<!—here the user asks for the class schedule—> 

</form> 


222 



</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<p> 

<a href="mailto:ProjectManager@dho.edu.tr"><img border="0" src^'Vsrc/webadmin/feedback.gif 
widths" 190" height="30"></a></p> 


</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="log_off'> 

<input type="IMAGE" src= "/src/webadmin/log_off.gif'> 

</form> 

</td> 

</tr> 


<!- </tr>-> 

</table> 

</td> 

<td width="79%" height="0" valign="top"> 

<!— this is the special part that the jsp will fdl 
according to the operation value 

if operation is announcements excecute the announcements—> 
<% if (myRegiment.getOperation().equals("announcements")) {%> 
<!— this is the announcement part—> 


<table border="3" width="94%" bordercolor="#0000FF"> 
<tr> 

<td width="100%" bgcolor='#FF0000' colspan="3"> 


<p align="center"><font color='#FFFFOO'><b>Announcements</b></font></p> 
</td> 

</tr> 

<tr> 

<td widths" 15%" bgcolor="#C0C0C0"><b>Number</b></td> 

<td width="51%" bgcolor="#C0C0C0"><b>AImouncement<^></td> 

<td width="34%" bgcolor="#C0C0C0"><b>Published Date</b></td> 

</tr> 

<jsp:getProperty name="myRegiment" property="announcements" /> 

</table> 

<!— end of announcement part—> 

<%} if (myRegiment.getOperation().equals("sectionInfoForRegiment")) {%> 

<!— this is the courses part—> 


<table border='3' width='100%' height='90' bordercolor='#0000FF'> 

223 



<tr> 

<td width='100%' height='40' bgcolor='#FFOOOO' colspan='5'> 

<p align^'center'xfont color='#FFFF00'><b>The Section Information for 
<jsp:getProperty name="myRegiment" property="regComName" />&nbsp;</b></font></td> 

</tr> 

<tr> 

<td width='39%' height='19' bgcolor='#0000FF' colspan='3'><font color='#FFFFFF'><b>Company 
name:</b></font> </td> 

<td width='61%' height='19' bgcolor='#0000FF' colspan='2'><font color='#FFFFFF'> 

<jsp:getProperty name="myRegiment" property="companyName" /></font></td> 

</tr> 

<tr> 

<td width='39%' height='19' bgcolor='#0000FF' colspan='3'><font color='#FFFFFF'><b>Section 
name:</b></font> </td> 

<td width='61%' height='19' bgcolor='#0000FF' colspan='2'><font color='#FFFFFF'> 

<jsp:getProperty name="myRegiment" property="section" /></font></td> 

</tr> 

<tr> 

<td width='39%' height='l' colspan='3' bgcolor='#0000FF'><font color='#FFFFFF'><b>Number 
of students in the section:</b></font></td> 

<td width='61%' height='l' colspan='2' bgcolor='#0000FF'><font color='#FFFFFF'> 

<jsp:getProperty name="myRegiment" property="awards" /></font></td> 

</tr> 

<tr> 

<td width='20%' height^'l' bgcolor='#COCOCO'><b>Student No</b></td> 

<td width='20%' height^'l' bgcolor='#COCOCO'><b>Name</b></td> 

<td width='20%' height='l' colspan='2' bgcolor='#C0C0C0'><b>Last Name</b></td> 

<td width='20%' height='l' bgcolor='#COCOCO'><b>Discipline points</b></td><b> 

</tr> 


<jsp:getProperty name="myRegiment" property="regiment" /> 
</table> 


<!— end of courses part—> 

<%} if (myRegiment.getOperation().equals("unitsForRegiment")) {%> 

<!—this is the regiment unit info part—> 

<table border="3" width="100%" height="153" bordercolor="#0000FF"> 

<tr> 

<tr> 

<td widths" 100%" height="40" bgcolor="#FF0000" colspan="2"> 

<p align="center"><font color="#FFFF00"><b>The Units Commanded by <jsp:getProperty 
name="myRegiment" property="regComName" />&nbsp; 

</b></font> 

<p ahgn="center"><font color="#FFFF00"><b>"Commander of the <jsp:getProperty 
name="myRegiment" property="companyName" />"</b></font></td> 

</tr> 


<jsp:getProperty name="myRegiment" property="regiment" /> 

224 



<table> 


<!—end of the regiment unit info part —> 

<%} if (myRegiment.getOperation().equals("Personal_information")) {%> 


<table border="3" width="100%" bordereolor="#0000FF"> 

<tr> 

<td width="491" height="41"> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="name" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="namel" />"> 

</span>&nbsp; 

M.&nbsp; 

<input readonly type="text" name="midname" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="midNamel" />"> 

</span>&nbsp; 

Last Name&nbsp; 

<input readonly type="text" name="lastname" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="lastNamel" />"> 

</span></font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"> 

Unit Commanded 

<input readonly type="text" name="program" size="40" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="eompanyName" />"> 

</span></font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font size="2"> 
Rank&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="rank" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="rank" />"> 

</ span>&nbsp;</font> 

</td> 

<td width="98" height="41" bgeolor="#FFFFFF"> 

<p align="eenter"> 

<img border="0" sre="/sre/webadmin/<jsp:getProperty name="myRegiment" 

property="loginl"/>.jpg" width="70" height="70"> 

</td> 

</tr> 

<tr> 

<td width="595" eolspan="2">&nbsp; 

<form method="POST" aetion="/servlet/webadmin.Aeademy" onSubmit=""> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="email" size="20" tabindex="l" 
value="<jsp:getProperty name="myRegiment" property="email" />"> 

</font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" tabindex="2" 
value="<jsp:getProperty name="myRegiment" property="room" />"> 

Tel No <input type="text" name="tel" size="20" tabindex="3" 
value="<jsp:getProperty name="myRegiment" property="tel" />" 

></font></p> 


225 



<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" tabindex="4" 
value="<jsp:getProperty name="myRegiment" property="address" />" 

>&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" tabindex="5" 
value="<jsp:getProperty name="myRegiment" property="city" />" 

> Province <input type="text" name="province" size="20" tabindex="6" 
value="<jsp:getProperty name="myRegiment" property="province" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"><input type="submit" value="Update" name="updateButton"></font></p> 

<input type="hidden" name="action" value="personal_update"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

</form> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2">&nbsp; 

<font color="#FF0000" size="2">Message : 

<jsp:getProperty name="myRegiment" property="message" /></font> 


</td> 

</tr> 


<tr> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<td width="595" colspan="2">&nbsp; 

<font size="2"><b>PASSWORD 
CHANGE</b></font> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2">Your Login 
Id is 

:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="midname" size="20" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="login"/>"> </font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Enter the 

new Password:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="password" 
name="firstText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Confirm 

your new Password: <input type="password" name="secondText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2"><input type="submit" value="Change 
Password" name="B 1 "></font></p> 

<input type="hidden" name="action" value="change_Password"> 

</td> 

</form> 

</tr> 

</table> 

<!— end of personal information part—> 

<%} if (myRegiment.getOperation().equals("commanderInfoForRegiment")) {%> 

226 



<table border="3" width="100%" bordercolor="#OOOOFF"> 

<tr> 

<td width="589" height="41" colspan="2" bgcolor="#FFOOOO"> 

<p align='center'> 

<foiit color="#FFFFOO"><b>Extra information about <jsp:getProperty name="myRegiment" 
property="rank" /> 

<jsp:getProperty name="myRegiment" property="namel" /> <jsp:getProperty 
name="myRegiment" property="lastNamel" /></b></font></p> 

</td> 

</tr> 

<tr> 

<td width="491" height="41"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="name" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="namel" />"> 

</span>&nbsp; 

M.&nbsp; 

<input readonly type="text" name="midname" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="midNamel" />"> 

</span>&nbsp; 

Last Name&nbsp; 

<input readonly type="text" name="lastname" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="lastNamel" />"> 

</span></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"> 

Unit Commanded 

<input readonly type="text" name="program" size="40" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="companyName" />"> 

</spatr></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2"> 
Rank&nbsp;&trbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="rank" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="rank" />"> 

</ span>&nbsp;</font> 

</td> 

<tdwidth="98" height="41" bgcolor="#FFFFFF"> 

<p align="center"> 

<img border="0" src="/src/webadmin/<jsp:getProperty name="myRegiment" 

property="loginl"/>.jpg" width="70" height="70"> 

</td> 

</tr> 

<tr> 

<td widtli="595" colspan="2">&nbsp; 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&trbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="email" size="20" style="background-color: #C0C0C0"tabindex="l" 
value="<jsp:getProperty name="myRegiment" property="email" />"> 

<a href="mailto:<jsp:getProperty name="myRegiment" property="email" />">sendMail</a> 
</font></p> 


227 



<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" style="background-color: #C0C0C0" 
tabindex="2" 

value="<jsp:getProperty name="myRegiment" property="room" />"> 

Tel No <input type="text" name="tel" size="20" style="background-color: #C0C0C0" 
tabindex="3" 

value="<jsp:getProperty name="myRegiment" property="tel" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" style="background-color: #C0C0C0"tabindex="4" 
value="<jsp:getProperty name="myRegiment" property="address" />" 

>&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" style="background-color: #C0C0C0"tabindex="5" 
value="<jsp:getProperty name="myRegiment" property="city" />" 

> Province <input type="text" name="province" size="20" style="background-color: 
#C0C0C0"tabindex="6" 

value="<jsp:getProperty name="myRegiment" property="province" />" 

></font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 


</td> 

</table> 

<!— end of commander info part—> 


<!— this is the showcompany info part —> 

<%} if (myRegiment.getOperation().equals("showCompanyInfo")) {%> 


<table border='3' width=T00%' height='90' bordercolor='#0000FF'> 

<tr> 

<td width=T00%' height='40' bgcolor='#FF0000' colspan='2'> 

<p align^'center'xfont color='#FFFF00'><b>The Company Information for 
<jsp:getProperty name="myRegiment" property="regComName" />&nbsp;</b></font></td> 

</tr> 

<tr> 

<td width='39%' height=T9' bgcolor='#0000FF'><b><font color='#FFFFFF'>Company 
name:</font> </b></td> 

<td width='61%' height=T9' bgcolor='#0000FF'><font color='#FFFFFF'> 

<jsp:getProperty name="myRegiment" property="companyName" /></font></td> 

</tr> 

<tr> 

<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit="> 

<td width='39%' height='l'><b>Company Commander: </b></td> 

<td width='61 %' height^' 1 '> 

<input type='submit' value='<jsp:getProperty name="myRegiment" property="compComName" />' 
name='B 1 '></td> 

<input type='hidden' name='action' value='showCommanderInfo'> 


228 



<input type='hidden' name='person_id' value='<jsp:getProperty name=" my Regiment" property="userId" 

/>'> 

<input type='hidden' name='person_logimd' value='<jsp:getProperty name="myRegiment" 

property="loginl" />'> 

</form> 

</tr> 

<tr> 

<form method='POST' style='word-spacing: 0; margin: O' action='/servlet/webadmin.Academy' 
onSubmit="> 

<td width='39%' height='l'><b>Sections of the Company:</b></td> 

<td width='61%' height='r><input type='submit' value=' <jsp:getProperty 

name="myRegiment" property="section" /> ' name='section'> 

<p><input type='submit' value=' <jsp:getProperty name="myRegiment" property="course" /> 

' name='section'></td> 

<input type='hidden' name='action' value='showSectionInfo'> 

</form> 

</tr> 

</table> 

<!— end of companyinfo —> 

<%} if (myRegiment.getOperation().equals("showStudentInformation")) {%> 

<!— this is the refgiment personal information part —> 


<table border="3" width="100%" height="542" bordercolor="#0000FF"> 

<tr> 

<td width="589" height="36" colspan="2" bgcolor="#FF0000"> 

<p align="center"><font coloi^"#FFFF00"><b>The Information about Student &nbsp; 
<jsp:getProperty name="myRegiment" property="namel" />&nbsp; 

<jsp:getProperty name="myRegiment" property="lastNamel" /> 

</b></font> 

</td> 

</tr> 

<tr> 

<td width="491" height="45"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<input type="text" name="name" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="namel" />"> &nbsp; 

M.&nbsp; 

<input type="text" name="midname" size="12" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="midNamel" />"> 

&nbsp; 

Last Name&nbsp; <input type="text" name="lastname" size="12" style="background-color: 
#C0C0C0" 

value="<jsp:getProperty name="myRegiment" property="lastNamel" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Section</font><font 
size="2"> 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="degree" size="20" 
style="background-color: #C0C0C0" 

value="<jsp:getProperty name="myRegiment" property="section" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

229 



<font size="2"> 

Department 

<input type="text" name="program" size="51" style="background-color: #COCOCO" 
value="<jsp:getProperty name="myRegiment" property="department" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Regiment 
Unit <input type="text" name="rank" size="50" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myRegiment" property="regiment" />"> 

&nbsp;</font> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp; 

</td> 

<td width="98" height="92" bgcolor="#FFFFFF"> 

<p align="center"> 

<img border="0" src="/src/webadmin/<jsp:getProperty name="myRegiment" 

property="userId"/>.jpg" width="70" height="70"> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2" height="l">&nbsp; 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="emad" size="20" style="background-color: #C0C0C0" tabindex="l" 
value="<jsp:getProperty name="myRegiment" property="emaiF' />"> 

<a href="mailto:<jsp:getProperty name=" my Regiment" property="emair' />">sendMail</a> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Dormitory:&nbsp;&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" style="background-color: #C0C0C0" 
tabindex="2" 

value="<jsp:getProperty name="myRegiment" property="room" />"> 

Location <input type="text" name="LOCATION" size="20" style="background-color: #C0C0C0" 
tabindex="3" 

value="<jsp:getProperty name="myRegiment" property="location" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">F[ome:</font></p> 
<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" style="background-color: #C0C0C0" tabindex="4" 
value="<jsp:getProperty name="myRegiment" property="address" />"> 

&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" style="background-color: #C0C0C0" tabindex="5" 
value="<jsp:getProperty name="myRegiment" property="city" />"> 

Province <input type="text" name="province" size="20" style="background-color: #C0C0C0" 
tabindex="6" 

value="<jsp:getProperty name="myRegiment" property="province" />"> 

</font></p> 


</td> 

</tr> 

</table> 


230 



<table border="3" width="100%" bordercolor="#OOOOFF"> 

<tr> 

<td width="679" colspan="5" bgcolor="#OOOOFF" height="40"> 

<p align="center"><foiit coloi^"#FFFFOO"><b>AWARDS</b></font></td> 

</tr> 

<tr> 

<td width="84" height="19"><b>Award No</b></td> 

<td width="98" height="19"><b>Award Type</b></td> 

<td width="248" height="19"><b>Result</b></td> 

<td width="231" height="19" colspan="2"><b>Award Date</b></td> 

</tr> 

<jsp:getProperty name="myRegiment" property="awards" /> 

<tr> 

<td width="679" colspan="5" bgcolor="#OOOOFF" height="40"> 
<paligii="center"><foiitcolor="#FFFFOO"><b>PlJNISHMENTS</b></foiit></td> 
</tr> 

<tr> 

<td width="84" height="19"><b>Puiiishment No</b></td> 

<td width="98" height="19"><b>Puiiishment Type</b></td> 

<td width="248" height="19"><b>Result</b></td> 

<td width="126" height="19"><b>Points Taken</b></td> 

<td width="99" height="19"><b>Puiiishment Date</b></td> 

</tr> 

<jsp:getProperty name="myRegiment" property="puiiishments" /> 

</table> 

<table border="3" width="689" height="77"> 

<tr> 

<td width="92" height="l" rowspan="2" bgcolor="#OOOOFF" valign="middle"> 

<font color="#FFFFOO"><b>Professor</b></font> 

</td> 

<td width="124" height="l" rowspan="2" bgcolor="#OOOOFF" valign="middle"> 
<font color="#FFFFOO"><b>Course Id</b></font> 

</td> 

<td width="107" height="l" rowspan="2" bgcolor="#OOOOFF" valign="middle"> 
<font color="#FFFFOO"><b>Course Name</b></font> 

</td> 

<td width="424" height="13" colspan="4" bgcolor="#OOOOFF"> 

<p align="center"><font color="#FFFFOO"><b>-Grades- 

</b></font></p> 

</td> 

</tr> 

<tr> 

<td width=" 111" height="l" bgcolor="#OOOOFF" valign="middle"> 

<font color="#FFFFOO"><b>First Exam</b></font> 

</td> 

<td width="134" height="l" bgcolor="#OOOOFF" valign="middle"> 

<font color="#FFFFOO"><b>Second Exam</b></foiit> 

</td> 

<td width="65" height="l" bgcolor="#OOOOFF" valign="middle"> 

<font color="#FFFFOO"><b>Final</b></font> 

</td> 

<td width="99" height="l" bgcolor="#OOOOFF" valign="middle"> 

<font color="#FFFFOO"><b>Course Grade</b></foiit> 

</td> 

</tr> 


231 





<jsp:getProperty name="myRegiment" property="courses" /> 

</table> 

<table border="3" width="100%" cellspacing=" 1" height="390" bgcoloi="#OOFFFF"> 

<tr> 

<td widths" 100%" colspan="7" height="19" bgcolor="#FF0000"> 

<foiit color="#FFFF00"> 

<p align="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><b>CLASS 
SCHEDULE</b></td> </font> 

</tr> 

<tr> 

<td widths" 16%" colspan="2" height="19" bgcolor="#0000FF"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</td> 

<td widths"84%" colspan="5" height="19" bgcolor="#0000FF"> 

<p align="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="l" 
color="#FFFF00">DAYS</font></td> 

</tr> 

<tr> 


<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >No</font></td> 

<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >Time</font></td> 

<td widths" 16%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Monday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Tuesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Wednesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Thursday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Friday</font></td> 


margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 


</tr> 

<jsp:getProperty name="myRegiment" property="schedule" /> 


</table> 


<%} %> 


</body> 

</html> 


232 



9 . 


Source Code of the Student JSP File 


<!—Filename: Student.jsp 

Purposes : To handle the Student users requests.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

<HEAD> 

<jsp:useBean id="myStudent" scope="session" class="webadmin.Communicator" /> 
<jsp:setProperty name="myStudent" property="*" /> 

<TITLE> 

Student 

</TITLE> 

<base target="_self'> 

<meta name="Mierosoft Border" content="none"> 

</head> 

<body bgcolor="#C8C8C8"> 

<SCRIPT language=JavaScript> 

var width,height 
var image,ext,studentid 
var condl,cond2 

function facultyview(name,lastName,login,mail,width,height) { 
if (width==0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" 

else {cond2="height="+(height+70)+""}; 

var si ="<TITLE>Faculty info</TITLE>" 
varsll="<CENTER>"; 

var s2 ="<IMG SRC='/src/webadmin/" + login + ".jpg' BORDER=0>" 
var sl4="&nbsp;</CENTER><p><CENTER><font size='2'>" + name + 

" " + lastName + "</font></a>" 

var sl5="&nbsp;</CENTER><p><CENTER><a href='mailto:"+ mail+ '"xfont size='2'>" + 
"send mail to " + login + "</font></a>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onClick='selfclose()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+width,"toolbar=no,scrollbars="+scroll+",menubar=no,"+condl+","+cond2); 

Image Window.document.write(s 1 +s 11 +s2+s 14+s 15+s3+s4) 

ImageWindow.document.closeO 


var width,height 

var cId,cName,cCredit,ext,studentId 
var condl,cond2 

function courseview(cId,cName,cCredit,cExp,width,height) { 
if (width==0) condl=" " 

else condl="width="+(width+20)+""; 
if (height==0) {cond2=" 


233 



else {cond2="height="+(height+70)+""}; 


var si ="<TITLE>Course info</TITLE>" 
varsll="<CENTER>"; 

var sl2 = "<table border-1' widtli=74%' height='106'> <tr>" 

var sl3 = "<td width='41%' lieiglit-47'><b>Course id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : </b>"+ 
cld + "</td>" 

var sl4 = "<td width='59%' lieiglit='14r rowspan='3'><b>Course Explanation : </b>" +cExp + "</td> 
</tr> <tr>" 

var sl5 = "<td widtli='41%' lieiglit='47'><b>Course credit: </b>" + cCredit + "</td> </tr> <tr>" 
var sl6 = "<td width='41%' lieiglit='47'><b>Course name: </b>" + cName + "</td> </tr></table>" 

var s3 ="<FORM><INPUT TYPE='BUTTON' VALUE^'Close Window"'+ " 
onClick='self.close()'>" 

var s4 ="</FORM></CENTER>" 

ImageWindow=window.open("", 

"newwin"+widtli,"toolbar=no,scrollbars="+scroll+",menubar=no,"+condl+",''+cond2); 

Image Window.document.write(s 1 +s 11 +s 12+s 13+s 14+s 15+s 16+s3+s4) 
ImageWindow.document.closeO 

} 

</SCRIPT> 

<table border="0" widths" 100%" cellspacing=" 1" height="0"> 

<tr> 

<td widths" 100%" colspan="2" valign="bottom"> 

<p align="center"><img border="0" src="/src/webadmin/academy.gif' width="770" 
lieiglit=" 100"></p></td> 

</tr> 

<tr> 

<td width="100%" colspan="2" valign="bottom">&nbsp; 

<p style="text-indent: 0; word-spacing: 0; margin: 0" align="center"> 

<jsp:getProperty name="myStudent" property="name" /> 

&nbsp; <jsp:getProperty name="myStudent" property="lastName" /> 

&nbsp;</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0" align="center"> 

<jsp:getProperty name="myStudent" property="time" /> 

</p> 

<p style="text-indent: 0; word-spacing: 0; margin: 0">&nbsp;</td> 

</tr> 

<tr> 

<td widtli="21%" height="0%" valign="middle" nowrap> 

&nbsp; 

</td> 

<td widtli="79%" height="0" valign="top"> 

&nbsp; 

</td> 

</tr> 

<tr> 

<td width="21%" lieight="0%" valign="top" nowrap> 

<table border="0" width="100%"> 

<tr> 

<td widtli="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

234 



<input type="hidden" name="action" value="home_page"> 

<input type="IMAGE" src= "/src/webadmin/myHomePage.gif > 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="courses"> 

<input type="IMAGE" src= "/src/webadmiii/courses.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="personal_information"> 
<input type="IMAGE" src= "/src/webadmin/personal.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="schedule"> 

<input type="IMAGE" src= "/src/webadmiii/classSchedule.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valigii="top"> 

<form method="POST" action^'Vservlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="actioii" value="gradesForStudent"> 

<input type="IMAGE" src= "/src/webadmiii/grades.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<input type="hidden" name="action" value="companyInfoForStudent"> 
<input type="IMAGE" src= "/src/webadmiii/company.gif'> 

</form> 

</td> 

</tr> 

<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 


<p> 

<a href="mailto:ProjectManager@dho.edu.tr"><img border="0" src="/src/webadmiii/feedback.gif' 
widths" 190" height="30"></a></p> 


</form> 

</td> 


235 



</tr> 


<tr> 

<td width="21%" height="0%" valign="top"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 
<input type="hidden" name="action" value="log_off'> 

<input type="IMAGE" src= "/src/webadmin/log off.gif > 

</form> 

</td> 

</tr> 


<!- </tr>-> 

</table> 

</td> 

<td width="79%" height="0" valign="top"> 

<!— this is the special part that the jsp will fdl 
according to the operation value 

if operation is announcements excecute the announcements—> 
<% if (myStudent.getOperation().equals("announcements")) {%> 
<!— this is the announcement part—> 


<table border="l" width="94%"> 

<tr> 

<td widths" 100%" bgcolor='#FF0000' colspan="3"> 


<p align="center"><font color='#FFFFOO'><b>Announcements</b></font></p> 

</td> 

</tr> 

<tr> 

<td widths" 15%" bgcolor="#C0C0C0">Number</td> 

<td width="51%" bgcolor="#C0C0C0">Aimouncement</td> 

<td width="34%" bgcolor="#C0C0C0">Published Date</td> 

</tr> 

<jsp:getProperty name="myStudent" property="announcements" /> 

</table> 

<!— end of announcement part—> 

<%} if (myStudent.getOperation().equals("courses")) {%> 

<!— this is the courses part—> 


<table border="l" width="99%"> 

<tr> 

<td widths" 100%" bgcolor="#FF0000" colspan="6"> 

<p align="center"><font coloi^"#FFFF00" ><b>You are currently taking the 
following Courses</b></font></p> 

</td> 

</tr> 

<tr> 

<td width="8%" bgcolor="#C0C0C0"><font size="2">No</font></td> 

<td width="9%" bgcolor="#C0C0C0"><font size="2">Course Id</font></td> 

<td width="ll%" bgcolor="#C0C0C0"><font size="2">Course Name</font></td> 

<td width="40%" bgcolor="#C0C0C0"><font size="2">Explanation&nbsp;</font></td> 

236 



<td width="13%" bgcolor="#COCOCO"><font size="2">Credits</font></td> 
<td width="9%" bgcolor="#COCOCO"><font size="2">Professor</font></td> 

</tr> 

<jsp:getProperty name="myStudent" property="courses" /> 

</table> 


<!— end of courses part—> 

<%} if (myStudent.getOperation().equals("prof_schedule")) {%> 
<!—this is the class schedule part—> 


<table border="l" widths" 100%" cellspacing=" 1" height="390" bgcoloi="#00FFFF"> 

<tr> 

<td widths" 100%" colspan="7" height="19" bgcolor="#FF0000"> 

<font color="#FFFF00"> 

<p align="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><b>CLASS 
SCHEDULE</b></td> </font> 

</tr> 

<tr> 

<td widths" 16%" colspan="2" height="19" bgcolor="#0000FF"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</td> 

<td widths"84%" colspan="5" height="19" bgcolor="#0000FF"> 

<p ahgn="center" style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="l" 
color="#FFFF00">DAYS</font></td> 

</tr> 

<tr> 


<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size=" 2" >No</font></td> 

<td width="8%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 
size="2">Time</font></td> 

<td widths" 16%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Monday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Tuesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Wednesday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size=" 2" >Thursday</font></td> 

<td widths" 17%" height="14" bgcolor="#0000FF"> 
<p style="word-spacing: 0; margin-top: 0; 

size="2">Friday</font></td> 


margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 

margin-bottom: 

0"><font 

color="#FFFF00' 


</tr> 

<jsp:getProperty name="myStudent" property="schedule" /> 


</table> 


237 



<!—end of the elass sehedule part —> 

<%} if (myStudent.getOperation().equals("Personal_information")) {%> 

<!— this is the prof personal information part —> 

<table border="l" widths" 100%" height="542"> 

<tr> 

<td width="589" height="36" eolspan="2" bgeolor="#FF0000"> 

<p align="eenter"><font eolor="#FFFF00"><b>Personal Information For&nbsp; 

<jsp:getProperty name="myStudent" property="name" />&nbsp; 

<jsp:getProperty name="myStudent" property="lastName" /> 

</b></font> 

</td> 

</tr> 

<tr> 

<td width="491" height="92"> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

&nbsp;</p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2">Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<input readonly type="text" name="name" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myStudent" property="name" />"> &nbsp; 

M.&nbsp; 

<input readonly type="text" name="midname" size="12" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myStudent" property="midName" />"> 

&nbsp; 

Last Name&nbsp; <input readonly type="text" name="lastname" size="12" style="baekground- 
eolor: #C0C0C0" 

value="<jsp:getProperty name="myStudent" property="lastName" />"> 

</font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Seetion</font><font 
size="2"> 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input readonly type="text" name="degree" size="20" 
style="baekground-eolor: #C0C0C0" 

value="<jsp:getProperty name="myStudent" property="seetion" />"> 

</font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"> 

Department 

<input readonly type="text" name="program" size="51" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myStudent" property="department" />"> 

</font></p> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Regiment 
Unit <input readonly type="text" name="rank" size="50" style="baekground-eolor: #C0C0C0" 
value="<jsp:getProperty name="myStudent" property="regiment" />"> 

&nbsp;</font> 

<p style="word-spaeing: 0; margin-top: 0; margin-bottom: 0">&nbsp; 

</td> 

<tdwidth="98" height="92" bgeolor="#FFFFFF"> 

<p align="eenter"> 

<img border="0" sre="/sre/webadmin/<jsp:getProperty name=" my Student" 

property="userId"/>.jpg" width="70" height="70"> 

</td> 

</tr> 

<tr> 


238 



<td width="595" colspan="2" height="214">&nbsp; 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit="" style="word-spacing: 
0; line-height: 100%; margin: 0"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Email&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="email" size="20" tabindex=" 1" 
value="<jsp:getProperty name="myStudent" property="email" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">Dormitory:&nbsp;&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Room 
No <input type="text" name="room" size="20" tabindex="2" 
value="<jsp:getProperty name="myStudent" property="room" />"> 

Location <input type="text" name="LOCATION" size="20" tabindex="3" 
value="<jsp:getProperty name="myStudent" property="location" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Home:</font></p> 
<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font size="2">Address&nbsp; 
<input type="text" name="address" size="70" tabindex="4" 
value="<jsp:getProperty name="myStudent" property="address" />"> 

&nbsp;</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"><font 

size="2">City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="text" name="city" size="20" tabindex="5" 
value="<jsp:getProperty name="myStudent" property="city" />"> 

Province <input type="text" name="province" size="20" tabindex="6" 
value="<jsp:getProperty name="myStudent" property="province" />"> 

</font></p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0"> 

<font size="2"><input type="submit" value="Update" name="updateButton"></font></p> 

<input type="hidden" name="action" value="personal_update"> 

<p style="word-spacing: 0; margin-top: 0; margin-bottom: 0">&nbsp;</p> 

</form> 

</td> 

</tr> 

<tr> 

<td width="595" colspan="2" height="19">&nbsp; 

<font color="#FF0000" size="2">Message : 

<jsp:getProperty name="myStudent" property="message" /></font> 


</td> 

</tr> 


<tr> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<td width="595" colspan="2" height="151">&nbsp; 

<font size="2"><b>PASSWORD 
CHANGE</b></font> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2">Your Login 
Id is 

:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

239 



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input readonly type="text" name="midname" size="20" style="background-color: #C0C0C0" 
value="<jsp:getProperty name="myStudent" property="login" />"> </font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Enter the 

new Password:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="password" 
name="firstText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0"><font size="2">Confirm 

your new Password: <input type="password" name="seeondText" size="20"></font></p> 

<p style="line-height: 100%; margin: 0">&nbsp;</p> 

<p style="line-height: 100%; margin: 0"><font size="2"><input type="submit" value="Change 
Password" name="B 1 "></font></p> 

<input type="hidden" name="aetion" value="ehange_Password"> 

</td> 

</form> 

</tr> 

</table> 

<! - > 


<!— end of personal information part—> 

<!— this is the students for prof part —> 

<%} if (myStudent.getOperation().equals("gradesForStudent")) {%> 

<table border="l" width="688" height="174"> 

<tr> 

<td width="678" eolspan="3" height="45" bgeolor="#FF0000"> 

<p align="eenter"><font eolor="#FFFF00"> 

<b>The grades for <jsp:getProperty name="myStudent" property="name"/> <jsp:getProperty 
name="myStudent" property="lastName" /></b></font></td> 

</tr> 

<tr> 

<td width="79" height="l" bgeolor="#C0C0C0"><b>Student Id</b></td> 

<td width="122" height="l" bgeolor="#C0C0C0"><jsp:getProperty name="myStudent" 
property="userId" /></td> 

<td width="459" height="3" bgeolor="#C0C0C0" rowspan="2"> 

<p align="left"><b>Whieh Semester grade do you want to see?</b></p> 

<form method="POST" aetion="/servlet/webadmin.Aeademy" onSubmit=""> 

<input type="hidden" name="aetion" value="gradesForStudent"> 

<p align="left">&nbsp;<seleet size="l" name="Semester"> 

<option>All grades</option> 

<option seleeted>Year 2002 semester 2nd</option> 

<option >Year 2002 semester lst</option> 

<option>Year 2001 semester 2nd</option> 

<option>Year 2001 semester lst</option> 

<option>Year 2000 semester 2nd</option> 

<option>Year 2000 semester lst</option> 

<option>Year 1999 semester 2nd</option> 

<option>Year 1999 semester lst</option> 
</seleet>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

<input type="submit" value="SFtOW" name="Bl"></p> 

</form> 

</td> 

</tr> 

<tr> 


240 




<td width="79" height="20" bgcoloi="#COCOCO"><b>Name</b></td> 

<td widths" 122" height="20" bgcolor="#COCOCO"> 

<jsp:getProperty name="myStudent" property="name" /> <jsp:getProperty name="myStudent" 
property="lastName" /></td> 

</tr> 

<tr> 

<td width="660" height="34" bgcolor="#COCOCO" colspan="3"> 

<p aligii="center"><b>The followings are &quot; <jsp:getProperty name="myStudent" 
property="semester" /> &quot; 
grades&nbsp;</b></p> 

</td> 

</tr> 

</table> 

<table border="l" width="689" height="77"> 

<tr> 

<td width="92" height="l" rowspan="2" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Professor</b></font> 

</td> 

<td width="124" height="l" rowspan="2" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Course Id</b></font> 

</td> 

<td width="107" height="l" rowspan="2" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Course Name</b></font> 

</td> 

<td width="424" height="13" colspan="4" bgcolor="#0000FF"> 

<p align="center"><font color="#FFFF00"><b>-Grades- 

</b></font></p> 

</td> 

</tr> 

<tr> 

<td width=" 111" height="l" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>First Exam</b></font> 

</td> 

<td width="134" height="l" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Second Exam</b></font> 

</td> 

<td width="65" height="l" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Final</b></font> 

</td> 

<td width="99" height="l" bgcolor="#0000FF" valign="middle"> 

<font color="#FFFFOO"><b>Course Grade</b></font> 

</td> 

</tr> 


<jsp:getProperty name="myStudent" property="courses" /> 
</table> 

<!— end of students for prof -> 


<%} if (myStudent.getOperation().equals("companyInfo")) {%> 


241 





<table border="l" width="689" height="161"> 

<tr> 

<td width="679" colspan="5" bgcolor="#FFOOOO" height="40"> 

<p align="center"><foiit color="#FFFFOO"><b>The 
Company Information for 

<jsp:getProperty name="myStudent" property="name" /> 

<jsp:getProperty name="myStudent" property="lastName" /> 

</b></font> 

</td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Company name</b></td> 

<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="companyName" /> 

</td> 

<td width="225" height="19" colspan="2"></td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Regiment Commander</b></td> 

<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="regComName" /></td> 

<td width="225" height="19" colspan="2"></td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Battalion Commander</b></td> 

<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="batComName" /> 

</td> 

<td width="225" height="19" colspan="2"></td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Company Commander</b></td> 

<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="compComName" /> 

</td> 

<td width="225" height="19" colspan="2"></td> 

</tr> 

<tr> 

<td width="655" height="5" colspan="5" bgcolor="#FFFF00"> 

<p align="center">&nbsp;</p> 

</td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Student Id</b></td> 

<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="userId" /> 

</td> 

<td width="126" height="76" bgcolor="#C8C8C8" rowspan="2"><b><font 

color="#000000">Remaining 

Disciplinary points</ font></b></td> 

<td width="99" height="76" bgcolor="#C8C8C8" rowspan="2"><font color="#000000"> 
<jsp:getProperty name="myStudent" property="points" /> 

</font></td> 

</tr> 

<tr> 

<td width="182" height="19" colspan="2"><b>Student Name</b></td> 

242 



<td width="248" height="19"> 

<jsp:getProperty name="myStudent" property="name" /> 

</td> 

</tr> 

<tr> 

<td width="679" colspan="5" bgcolor="#OOOOFF" height="40"> 

<p aligii="center"><foiit color="#FFFFOO"><b>AWARDS</b></foiit></td> 

</tr> 

<tr> 

<td width="84" height="19"><b>Award No</b></td> 

<td width="98" height="19"><b>Award Type</b></td> 

<td width="248" height="19"><b>Result</b></td> 

<td width="231" height="19" colspan="2"><b>Award Date</b></td> 

</tr> 

<jsp:getProperty name="myStudent" property="awards" /> 

<tr> 

<td width="679" colspan="5" bgcolor="#OOOOFF" height="40"> 
<palign="center"><fontcoloi="#FFFFOO"><b>PlJNISHMENTS</b></font></td> 
</tr> 

<tr> 

<td width="84" height="19"><b>Puiiishment No</b></td> 

<td width="98" height="19"><b>Puiiishment Type</b></td> 

<td width="248" height="19"><b>Result</b></td> 

<td width="126" height="19"><b>Points Taken</b></td> 

<td width="99" height="19"><b>Puiiishment Date</b></td> 

</tr> 

<jsp:getProperty name="myStudent" property="puiiishments" /> 

</table> 

<%} %> 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp; 

<p>&nbsp;</td> 

</tr> 

</table> 


</body> 

</html> 


10. Source Code of the Login JSP File 


<!—File name: Login.jsp 

Purposes : To handle the users logins.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

<HEAD> 

<jsp:useBean id="myLogin" scope="session" class="webadmin.Communicator" /> 
<jsp:setProperty name="myLogin" property="*" /> 


243 



<TITLE> 

Login 

</TITLE> 

</HEAD> 

<body leftmargin="6"> 

<table border="0" width="100%"> 

<tr> 

<td widths" 100%"> 

<p align="center"><img border="0" src="/src/webadmin/academy.gif' width="770" 
height="100"></td> 

</tr> 

<tr> 

<td widths" 100%"></td> 

</tr> 


</table> 

<table border="0" width="100%"> 
<tr> 

<td width="24%"> 


<p>&nbsp;</td> 

<tdwidth="76%"> 

<form method="POST" action="/servlet/webadmin.Academy" onSubmit=""> 

<p> <jsp:getProperty name="myLogin" property="message" /> 

<p>&nbsp;Enter your login Id and 
password</p> 

<p>login Id&nbsp;&nbsp;&nbsp;&nbsp; <input name="loginId" size="20"></p> 
<p>password <input type="password" name="password" size="20"></p> 

<input type="hidden" name="action" value="LOGIN"> 

<p><input type="IMAGE" src= "/src/webadmin/Iogin.gif vaIue="LOGIN" name="action"> 

</p> 

</form> 

<p>&nbsp;</td> 

</tr> 

<tr> 

<td width="24%"> 

</td> 

<tdwidth="76%"></td> 

</tr> 

</table> 

<p>&nbsp;</p> 

</body> 

<HTML> 

11. Source Code of the LogOff JSP File 

<!—File name: LogOff.jsp 

Purposes : To handle the users log offs.—> 

<%@ page errorPage="ErrorPage.jsp" %> 

<HTML> 

<HEAD> 

<jsp:useBean id="myLogOff' scope="session" class="webadmin.Communicator" /> 


244 



<jsp:setProperty name="myLogOff' property="*" /> 


<TITLE> 

Login 

</TITLE> 

</HEAD> 

<body leftmargin="6"> 

<table border="0" width="100%"> 

<tr> 

<td widths" 100%"> 

<p align="center"><img border="0" src="/src/webadmin/academy.gif' width="770" 
height="100"></td> 

</tr> 

<tr> 

<td widths" 100%"></td> 

</tr> 


</table> 

<table border="0" width="100%"> 
<tr> 

<td width="24%"> 


<p>&nbsp;</td> 

<tdwidth="76%"> 


<p> <jsp:getProperty name="myLogOff' property="name" /> </p> 

<p>You successfully logged off </p> 

<p>The time is &nbsp <jsp:getProperty name="myLogOff' property="time" /></p> 


<p>&nbsp;</td> 

</tr> 

<tr> 

<td width="24%"> 

</td> 

<tdwidth="76%"></td> 

</tr> 

</table> 

<p>&nbsp;</p> 

</body> 

<HTML> 

12. Properties File 

drivers=sun.jdbc.odbc.JdbcOdbcDriver 

logfile=D:/java/tez/log.txt 

myThesis.url=jdbc:odbc:oracle 
myThesis.user=SCOTT 
myThesis.password=TIGER 
myThesis.initconns=3 
myThesis. maxconns= 10 


245 



THIS PAGE INTENTIONALLY LEET BLANK 


246 



LIST OF REFERENCES 


Ayers, D., Bergsten, H. and et al., Professional Java Server Programming, Wrox Press 
Ltd., 2000. 

Akbay, M., Lewis, S., Design and Implementation of an Enterprise Information System 
Utilizing a Component Based Three-tier Client/Server Database System, NPS, 1999. 

Beckhard, R., A Model for Executive Management of Transformational Change, Human 
Resouree Strategies, London;Sage/Open University, 1992 

CERT (Coordination Center Software Engineering Institute Carnegie Mellon University 
Pittsburgh), Results of the Security in ActiveX Workshop Pittsburgh, 2000, Online, 
Internet. Available: http://www.eert.org/reports/activeX report.pdf 

Comer, D., Computer Networks and Internets, Prentice Hall, 2001 

Davidson, E., Professional SQL Server 2000 Database Design, Wrox, 2001. 

Edwards, J. Three-tier Client/Server At Work, revised edition, John Wiley & Sons, 1999. 

Elmasri, R., Navathe, S., Fundamentals of Database Systems, Second edition, Addison 
Wesley, 1994. 

Gallaugher J. M., Ramanathan S. C., Choosing a Client/Server Architecture, A 
Comparison of Two- and Three-Tier Systems, Information Systems Management, 
Vol. 13, page 7-13, 1996. 

Goodyear, M., Enterprise System Architectures, CRC press, 2000. 

Gross, C., Taking the Splash Diving into ISAPI Programming, Microsoft, 1997, online, 
Internet. Available: http://www.microsoft.com/mind/0197/isapi.htm 

Haga, W., Personal Conversation, 2002. 

Hall, M., Core Servlets and Server Pages, Prentice Hall, 2001 

Mabey, C. and lies, P., Strategic Integration of Assessment and Development 
Practices Succession Planning and New Manager Development, Human Resource 
Management Journal, 1993 


247 




NCSA, The National Center for Supercomputing Applications , CGI Common Gateway 
Interface, The National Center for Supercomputing Applications (NCSA) at the 
University of Illinois, 1999, online, Internet. Available; 
http://hoohoo.ncsa.uiuc.edu/cgi/ 

Netcraft, Web Server Survey, September 2001, online, Internet. Available; 
http://www.netcraft.com/survev 

Orfali, R. H., Edwards, J., The Essential Client/Server Survival Guide, John Wiley & 
Sons, 1996. 

Pressman, R. S., Software Engineering a Practitioner’s Approach, McGraw Hill, fifth 
edition, 2001 

Ramakrishnan, R., Gehrke, J., Database Management Systems, McGraw Hill, second 
edition, 2000. 

Reese, G., Database Programming with JDBC and JAVA, O’Reilly, 2000 

Sun Inc.,Comparing Methods for Server-Side Dynamic Content (White Paper), Sun.com, 
2000, online, Internet. Available: http://java.sun.com/products/isp/ispservlet.html 

Taylor, A., JDBC Developer’s Source, Second edition, Prentice Hall, 1999. 

White, S., Hapner, M., JDBC 2J API, Sun, 1999, online, Internet. Available: 
http://iava.sun.eom/i2se/l.3/docs/guide/idbc/spec2/idbc2.l.frame.html 

White, S., Fisher, M, and et al, JDBC API Tutorial and Reference, Addison Wesley, 
second edition, 1999. 

Whitten, J.L., Bently, L. D., Dittman, K. C., System Analysis and Design Methods, 
McGraw-Hill, fifth edition, 2001. 


248 






INITIAL DISTRIBUTION LIST 


1. DEFENSE TECHNICAE INFORMATION CENTER 
8725 John J.Kingman Road, Ste 0944 

Ft. Belvoir, VA 

2. DUDEEY KNOX EIBRARY 
Naval Postgraduate School 
Monterey, CA 

3. DENIZ KUVVETLERI KOMUTANLIGI 
Personel Daire Baskanligi 
Bakanliklar 06410 

Ankara, TURKEY 

4. DENIZ KUVVETEERI KOMUTANLIGI 
Kutuphanesi 

Bakanliklar 06410 
Ankara, TURKEY 

5. DENIZ HARP OKULU 
Kutuphanesi 

Tuzla 81740 
Istanbul, TURKEY 

6. KARA HARP OKULU 
Kutuphanesi 
Bakanliklar 06410 
Ankara, TURKEY 

7. HAVA HARP OKULU 
Kutuphanesi 
Yesilyurt 

Istanbul, TURKEY 

8. CHAIRMAN 
Code CS 

Naval Postgraduate School 
Monterey, CA 


249 



9. CHAIRMAN 
Code C4I 

Naval Postgraduate School 
Monterey, CA 

10. C. THOMAS OTANI 
Code CS/CSTO 

Naval Postgraduate School 
Monterey, CA 

11. WILLIAM HAGA 
Code GSBPP/GBHG 
Naval Postgraduate School 
Monterey, CA 

12. LTJG. RASIM TOPUZ 

Envanter Kontrol Merkez Komutanligi 
Golcuk 41650 
Kocaeli, TURKEY 


250 



