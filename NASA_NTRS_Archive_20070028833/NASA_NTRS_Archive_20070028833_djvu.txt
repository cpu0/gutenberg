

Discrete Data Transfer Technique for Fluid-Structure 

Interaction 


Jamshid A. Samareh* 

NASA Langley Research Center, Hampton, VA 23681 


This paper presents a general three-dimensional algorithm for data transfer between 
dissimilar meshes. The algorithm is suitable for applications of fluid-structure interaction 
and other high-fidelity multidisciplinary analysis and optimization. Because the algorithm is 
independent of the mesh topology, we can treat structured and unstructured meshes in the 
same manner. The algorithm is fast and accurate for transfer of scalar or vector fields 
between dissimilar surface meshes. The algorithm is also applicable for the integration of a 
scalar field (e.g., coefficients of pressure) on one mesh and injection of the resulting vectors 
(e.g., force vectors) onto another mesh. The author has implemented the algorithm in a C++ 
computer code. This paper contains a complete formulation of the algorithm with a few 
selected results. 


A 

B 

d 

f 

F 

K 

L 

M 

n 


r 

R 

T 

U 

V 

x, y, z 

8 

^2 


Nomenclature 


area 

finite element basis functions 

distance 

load vectors 

data matrix 

stiffness matrix 

length of a 2-sided element 

moments 

surface unit normal vector 

projection of CFD mesh points onto CSM mesh 

pressure loads 

element coordinates 

mesh coordinates 

transformation matrix 

virtual work 

design variables 

coordinates 

deflection vectors 

element parametric coordinates 


Subscripts 
e = 

F 

i>j,k 

S 

T 

1,2 


element 

fluid 

source point number, element number, and target point number, respectively 

structures 

total 

mesh numbers 


Superscripts 

S, T = source and target meshes 


Senior Research Engineer, Vehicle Analysis Branch, MS 451, Associate Fellow. 

1 

American Institute of Aeronautics and Astronautics 



I. Introduction 

A curate data transfer among various disciplines is a key ingredient in any high-fidelity multidisciplinary analysis 
and optimization. For example, the strong coupling between the external flow and the aircraft structure can 
prompt physically important phenomena. Correct modeling of these complex aeroelastic phenomena requires 
an accurate coupling of computational structural mechanics (CSM) and computational fluid dynamics (CFD) for a 
flexible structure. In a multidisciplinary environment, various disciplines share the same geometry, but the models 
(e.g., CSM and CFD) have dissimilar meshes. In addition, the data from one discipline must be available to all other 
disciplines. The data may be scalar (e.g., pressure and temperature), vector (e.g., deflection and heat transfer), or 
integrated quantities (e.g., aerodynamic and thermal loads). The data transfer process may be subjected to additional 
constraints, such as conservation of forces, moments, and energy. 

Samareh and Bhatia 1 provide a review of existing data transfer algorithms, which range from earlier algorithms 
like FLEXSTAB 2 at Boeing in early seventies to Dassault Aviation work 3 " 4 in the eighties. In recent years, various 
researchers have examined the data transfer process primarily for aeroelastic analysis. Discrepancies and 
dissimilarities in the geometry and the mesh models are two potential sources of error in the data transfer process. 
One source of error may arise if the models have dissimilar levels of geometry details. For example, a CFD mesh 
generally resembles the true outer model line geometry of the aircraft; the CFD mesh includes details such as 
pylons, nacelles, flaps, and slats. However, a CSM mesh generally represents only the major structural components, 
such as the wing box. Flaps and slats are represented either by a few simple beam elements or are completely 
excluded. Tzong et al . 5 and Kapania and Bhardwaj 6 present data transfer algorithms that are based on the finite 
element (FE) method, in which the virtual work is used to transfer the aerodynamic pressures onto a CSM mesh. 
Then, the displacements are transferred back to the CFD mesh through the reciprocal theorem. Kapania and 
Bhardwaj 6 were successful in using a simplified version of this algorithm for several wings. 

Brown 7 adds virtual elements in the CSM model to cover the discrepancies in the geometry definition between 
CSM and CFD models. These virtual elements add neither stiffness nor mass. As pointed out by Cebral and Lohner 8 , 
the generation of virtual elements is an unnecessary complication, particularly for complex geometries. 

Smith, Hodges, and Cesnik 9 provide excellent overviews of six data transfer methods between CFD and CSM 
disciplines. These methods are infinite-plate spline (IPS), multiquadric biharmonic (MQ), nonuniform B-spline 
(NUBS), thin-plate spline (TPS), finite-plate spline (FPS), and inverse isoparametric mapping (IIM). The IPS 
method is the basis for the popular surface splines method, which is available in most commercial aeroelastic 
analysis tools (e.g., MSC NASTRAN 1 ). The IPS method interpolates a function of two independent variables and 
requires noncoincident mesh points. Smith, Hodges, and Cesnik 9 recommend further study of IIM and NUBS. They 
indicate that IIM shows great promise for two-dimensional applications and needs extension to three dimensions. 

Clutter 10 and Send 11 extend NUBS to three dimensions. One major limitation with most NUBS implementation 
is that the input data must be a structured (regular) mesh. This limitation forces the data, at best, to be approximated 
in most realistic cases. Samareh 12 presents a method that removes this limitation, and the method uses a non-uniform 
rational B-spline (NURBS) representation for data transfer among various disciplines. This method is a general 
three-dimensional, least-squares representation, which removes the requirement for the structured input mesh and 
can handle multiple coincident points. Another advantage of this method is that the users have control over the 
tradeoff between smoothness and accuracy. 

Murti and Valliappan 13 present an IIM algorithm for a two-dimensional model, and Pidaparti 14 further refines the 
IIM algorithm. The refined algorithm uses the FE shape functions to interpolate the coordinates, pressure, and 
displacement vectors. Because the FE shape functions satisfy a positivity constraint, the process will maintain local 
extrema. Maman and Farhat 15 and Farhat, Lesoinne, and LeTallec 16 outline a consistent interpolation algorithm 
similar to IIM for transferring information between two dissimilar meshes. The local interpolation is computed by 
projecting one mesh onto another. Cebral and Lohner 17 present a variation of IIM that guarantees conservation of 
forces. They use a Galerkin method to solve for the pressure on the CSM mesh. They also use an adaptive Gaussian 
integration technique to improve the accuracy. Farhat, Lesoinne, and LeTallec 16 also present a variation of their 
original algorithm that guarantees conservation of forces. We used a variation of this algorithm for our current study. 

The accuracy of the data transfer process for integrated quantities (e.g., forces, moments, and energy) depends on 
the consistency of data transfer as well as other constraints, such as conservation of forces and moments. For 
example, the following equation defines consistent load vectors for the structural analysis on a CSM mesh as: 


t MSC NASTRAN is a registered trademark of the McNeal-Schwendler Corporation 


2 

American Institute of Aeronautics and Astronautics 



( 1 ) 


{Q = j{B} T {P}nd A 

A 

where f is the elemental load vector, B is the FE shape function, P is the nodal pressure, n is the unit surface 

normal on the CSM mesh, and dA is the infinitesimal surface element on the CSM mesh. Because the above 
equation uses the same shape functions as used to calculate the element stiffness matrix, the equation guarantees a 
consistent loading. 18 There are several possible problems with using the above equation. First, the aerodynamic load 
may have a large variation within a single CSM element, such that the shape functions are inadequate to capture the 
load variation across the element. Second, the FE shape functions may be unavailable for some commercial CSM 
codes. Third, the local normal vectors for a CSM mesh are generally different to a CFD mesh, primarily due to 
differences in discretization. In its present form, Eq. (1) does not guarantee conservation of forces and moments. An 
alternative approach to Eq. (1) is to integrate the loads on the CFD mesh and inject the resulting force vectors to the 
CSM mesh. This approach guarantees conservation of forces and moments. One limitation of this method is that the 
CFD mesh must have equal or higher resolution than the CSM mesh. Refining the CFD surface mesh (e.g., splitting 
quadrilateral into four elements) and interpolating the corresponding data will alleviate this problem without refining 
the entire field mesh. The next section presents a general algorithm, followed by some selected results and summary. 

II. Data Transfer Algorithm 

We can represent the data transfer between two dissimilar meshes in a matrix form as: 


!^} = K,]{F,} (2) 

where matrix {iq} represents the input data on the source mesh, matrix {F 2 } represents the output data on the target 
mesh, and matrix [T 2 1 ] is a transformation matrix. For example, {iq} could represent the aerodynamic loads defined 
on a CFD mesh and transferred to a CSM mesh as {F 2 }. Generally, the transformation matrices are large and sparse. 
If the transformation matrix [T 2 \] is independent of the shape changes, then we can calculate [r 2 i] once and use it as 
long as there is no change in the mesh connectivity. 

The use of a transformation matrix simplifies the integrated analyses such as aeroelastic calculation. The 
aeroelastic calculation has four distinct steps: a) calculate aerodynamic loads on the CFD mesh (FÂ», b) transfer 
aerodynamic loads to the CSM mesh ( F s ), c) calculate the aeroelastic deflections on the CSM mesh (S s ), and d) 
transfer the aeroelastic deflection to the CFD mesh (<5 F ) to recalculate and update the aerodynamic loads. Equation 
(3) summaries this process as: 


= {fM + s f )\ 

step (a) 


H}= [t s M\ 

(b) 

(3) 

WJ=h}, 

(c) 


&} = \Tfs ]{^S }â 

(d) 



where P F is the aerodynamic load vector on the CFD mesh, R F are coordinates of the CFD mesh, S F are aeroelastic 
deflections on the CFD mesh, F s is the aerodynamic load vector on the CSM mesh, s s are the aeroelastic deflections 
on the CSM mesh, and [T ] is the transformation matrix. Combining Eqs. 3a with 3d and 3b with 3c results in, 

{F F }={^(R F + [r FS fe})} (4) 

[K% }=MH} 


For a linear structure without rigid body degrees-of- freedom, we can further simplify Eq. (4) to 

{f f }= |f f (r f + [F fs Ik]-'[F sf ]{f f })) (5) 


We can extend this formulation to applications with rigid body degrees-of-freedom. Through Eq. 5, CFD codes can 
be decoupled from a linear CSM code. 


3 

American Institute of Aeronautics and Astronautics 



If the transformation matrix is independent of the shape changes, then the formulation is especially appealing for 
sensitivity analysis used in a gradient-based optimization. For example, we can use the following equation to 
transfer the CFD load sensitivity to a CSM mesh as, 



= [Ts f ] 


dV 


where V is the design variable vector, and [7 sp ] is a constant transformation matrix. 

We can reformulate most data transfer algorithms and present them in a matrix form. Next section provides a 
reformulation of the algorithm presented by Farhat, Lesoinne, and LeTallec 16 . 

III. Discrete Data Transfer 

The algorithm presented here is a derivative of the IIM algorithm and the algorithm presented in Farhat, 
Lesoinne, and LeTallec 16 . The discrete data transfer process consists of three steps: 1) find the nearest source 
element for every target point, 2) calculate the mapping coefficients for every target point and its corresponding 
(nearest) source element, and 3) interpolate/inject from the source element to the corresponding target point. We can 
use the results from steps 1-2 for multiple data transfer applications so long the topologies of the source and the 
target meshes are unchanged. 

The first step requires a spatial proximity search, which is 
the most time-consuming part of the entire process. We must 
first find a nearest source element to a target point (see Fig. 

1). One way to accomplish this step is to project every target 
point to every source element. This is an exhaustive search, 
which has the complexity of 0(A/ 2 ) and is prohibitively 
expensive. Samet 19 presents several methods and data 
structures suitable for the proximity search. We use the 
alternative digital tree (ADT) method introduced by Bonet 
and Peraire 20 , which is similar to an octree method. The ADT 
method reduces the search complexity to A/ 0(log(A/)), which 
is far more efficient than the exhaustive search. After 
application of ADT, we will have a handful of candidate 
source elements for every target point. 

For every target point and its candidate source elements, 
we need to find a candidate point on the source element that 
is the nearest to the target point. Then, we select the closest 
candidate point and its corresponding element. In order to 
accomplish this, we need to have a complete definition for 
the source element shape. We use finite element basis 
functions for this purpose. Using these functions, one can define element shape as: 

(Â£ . & ) = Z F U B i (& > & ). 

/ 

where y 6, .(<?,,Â£) = 1 



The term R , s represents source element shape, are source element nodes, ^ and are the element parametric 

coordinates, and B t are the element basis functions. Standard books on finite element analysis contain detailed 
discussions on finite element basis functions and their properties. Figure 2 shows the basis functions for bar, 
triangle, and quadrilateral elements. 


4 

American Institute of Aeronautics and Astronautics 


2-Sided Elements 


3 -Sided Elements 


4-Sided Elements 




a t 

= Â£(!-&) 


b 3 (&,Z 2 ) = Z& 

a t 

= ^ = i -(Â£, + &) 

A T = + A-, + A^ 

B 4 (Â£.&) = ( !-Â£)& 


Figure 2: Elements and Basis Functions. 


As shown in Fig. 2, the nearest point on a source element to a target point has the minimum distance between the 
two points. Equation 7 defines the distance from a target point ( R k ) to any point on the source element (j) as a 

function of the source element parameters: 


2 (#,â 


#)= 




(7) 


The nearest location on the source element to the target point can be determined by finding the minimum distance: 



= 0 
= 0 


Min{d 2 (g,g)) 

si .Â£2 


/ / 


a#,* 

gfi(ff.ff) - 

dg ' 


= 0 
= 0 


( 8 ) 


For bar and triangular elements, Eq. (8) results in a system of linear equations. For quadrilateral elements, Eq. (8) 
results in a system of quasi-linear equations, and we use a damped Newton-Raphson technique to solve them. For 
example, Eq. (8) can be rewritten for a triangular element (B t = q,, B 2 = q 2 , and, B 2 = 1 - E,i - 'tq 2 ) as: 


(K> ~ Kj ) â¢ - n, - Kj ) â¢ - Kj )Â£ - (R* - ^ ) â¢ (^w - Ki ) 

('LWwW'^y + (^y -^W^y -fÂ« )Â£ =(** - rÂ» ) â¢ (râ y - rÂ» ) 


(9) 


where r s i;J are the nodes of source element j. Solving this linear system results in ^ and ^ , which are the 
parametric coordinates of a point nearest to the target point k on the source element j. This concludes the second step 
in our process. 

We have now sufficient information to transfer scalar or vector data using the source element definition as 


^0=1^4) 


( 10 ) 


where f. s is the data defined on the source element, and^ is the interpolated data for point k on the target mesh. We 
can represent Eq. (10) in a matrix form as 


fr]=[T re ][F.] where T kl = B,(^ = 1 


( 11 ) 


5 

American Institute of Aeronautics and Astronautics 


For example, p s could represent the temperature distribution on a CFD mesh, and f t would be the resulting 
interpolated temperature distribution on a CSM mesh. 

This algorithm could be easily adapted for an aeroelastic analysis, where the aeroelastic deflection is transferred 
from a CSM mesh to a CFD mesh and aerodynamic loads from a CFD mesh to a CSM mesh. To interpolate the 
aeroelastic deflection from a CSM mesh to a CFD mesh, we can rewrite Eq. (1 1) as: 

CFD ] = [ T C fd-csm][3csm ] ( 12 ) 


where s CFD and s CSM are the aeroelastic deflections on the CFD and the CSM meshes, respectively. There are two 

approaches to transfer CFD loads to a CSM mesh: 1) interpolate pressure onto the CSM mesh and integrate the 
pressure on the CSM mesh, and 2) integrate pressure on the CFD mesh and then transfer the resulting load vectors 
onto the CSM mesh. The latter approach guarantees conservation of forces and moments, but not the former 
approach. We use virtual work to transfer the aerodynamic loads to CSM mesh. The virtual work, product of force 
and deflection, on the CSM mesh (U C sm)) must be equal to the virtual work on the CFD mesh ( U C fd ) as 


UcsM ~ CA- U cfd ~ F c T J cr 

Ucsm = Ucfd 

F T 8 CSM = F T 8 CFD 


(13) 


Substituting Eq. (12) into Eq. (13) and rearranging terms result in: 


[F csm ] [<^csm ] - [F cfd ] IXcFD-CSM ]18 CS m ] 

[F c T J = [F c T J[T cm - CSM ] 

[Fcsm ] = V~cfd-csm 1 \.F cfd ] 


(14) 


Equation (14) satisfies the reciprocity relation, which allows us to use the same transformation matrix to transfer 
deflections and loads as 


r cfd J - [Fcfd -csm PcsJ 

\FcSM ] = V CFD -CSM ] \F cfd ] 


In addition to the virtual work, Eq. (15) satisfies conservation of forces as: 


(15) 




J'pCSM 

i 

lir CFD-CSM np CFD j 


y-CFD-CSMp CFD 

i k 





Z7? 


= 1 


(16) 


Therefore, we have proven that Eq. (15) maintains virtual work and conservation of forces. Next, we will look at 
conservation of moments. Although the source and target meshes are created from the same geometry model, there 
still exists a gap between the two meshes due to different levels of mesh discretization. This gap creates a moment 
deficit (a M csm ), which needs to be taken into account. The conservation of moments requires that the moments on 
CSM and CFD meshes to be equal as: 


6 

American Institute of Aeronautics and Astronautics 



( 17 ) 


Â£r; CFD x F, cfd = Y,{r k CSM x K CSM + A/Wf ' â } 

/ k 

We can expand this equation as: 

x^ cro = Xr, CSM x(r CFD - CSM f [F CFD ])+XAMf M = X^ CSM [r CFD - CSM ] r x[f cfd ]+Â£am, c 


U I (7- k CFD - CSM r k CSM X ff FD } + X AMf M 

k [ i J k 


= 1 If. 

k l / 

- zfo ; 


^7- k CFD - CSM r k CSM x ^ CFD + ^AMf M = 2Xâ¢ x ^ CFD + XA/Wfâ 

k J k i k 


where p. CFD is the projection of CFD mesh points (rfâ¢) onto the CSM mesh. As a result, 

Xa Mr =T(rr -PDxFr 

k i 

= X A Mf FD 


The term(r / CFD -p, CFD ) represents the gap between the two meshes. We use the load transformation matrix to 
transfer nodal CFD moment deficits (a/w ; cfd ) to CSM mesh (a m% sm ) as: 

[a M csm ] = [t c â¢- c â¢ J [am cfd ] (20) 

This process maintains conservation of moments. In the next section, we present results for several cases. 

IV. Results 

The author has implemented the algorithm described in the previous section in a C++ computer program, and this 
program is available for distribution within the United States. We have applied the algorithm to a set of test cases, 
and Table 1 shows a summary of these results. We ran all test cases on a 3 GHz PC running Linux operating system. 
The conservation of forces and moments were satisfied within machine accuracy ( 1 0â 12 ) for all load transfer cases. It 
took less than ten seconds for a typical test case. 

Table 1. Algorithm Performance 


Test Cases 


1) MicroAirVehicle(Aero to FEM) 


2) X43 (FEM to Aero) 


3a) X33 (Aero to Aero) 


3b) X43 (Aero to FEM) 


4a) Ballute (Aero to FEM) 


4b) Ballute (Aero to FEM) 


4c) Ballute (Aero to FEM) 


4d) Ballute (Aero to FEM) 


4e) Ballute (Aero to FEM) 


5) Morphing Wing (Aero to FEM) 


6) Mode Shape (FEM to Aero) 


7) BWB (FEM 2 Aero) 


Source 

Target 

# of Points 

# of Elements 

# of Points 

# of Elements 

30656 

60832 

929 

872 

986 

1799 

1776 

3548 

22987 

22680 

69051 

137357 

1776 

3548 

986 

1799 

7151 

8278 

9904 

17352 

9904 

17352 

7151 

8278 

37144 

69408 

7151 

8278 

143680 

277632 

7151 

8278 

564948 

1110528 

7151 

8278 

5700 

5280 

65 

62 

443 

404 

6201 

6032 

38532 

574324 

18404 

17472 

7 



6.356 


0.576 


62.33 


0.48 


4.18 


3.42 


8.396 


29.12 


113.5 


0.908 


0.86 


17.621 


American Institute of Aeronautics and Astronautics 





















































































Data Transfer Performance 


The algorithm performance depends on the mesh sizes 
(number of points and elements for the source and target 
meshes), element definitions, discrepancies in mesh 
resolutions, gaps between two meshes, and a number of other 
factors. However, the performance approximately varies with 
the average of number of points for the source ( nps ) and target 
(npt) meshes. Figure 3 shows the algorithm performance (CPU 
time) versus average number of points. The dots represent the 
actual performance, and the line is the least-squares 
approximation of CPU time. One of the data points, shown as 
solid dot in Fig. 3, requires a larger CPU time due to the 
element definition and the shape. The results indicate that the 
performance generally scales linearly with the average number 
of points. 



The algorithm accuracy depends on the mesh resolution 
and the gaps between source and target meshes. The algorithm guarantees the load transfer accuracy, and our test 
results validated this fact. The algorithm maintains conservation of forces and moments within the machine accuracy 
(~10 -12 ). We used a ballute (a combination of balloon and parachute used to decelerate a planetary vehicle) model to 
demonstrate the interpolation accuracy. We started with a coarse mesh on a ballute (Fig. 4a) with the sinusoidal 
function (Fig. 4b) superimposed on the entire surface as: 


f l {x,y,z) = sin(- 


800 


800. . . y . , z 

)sin(^â )cos( ) 


400 


400 


( 21 ) 



(a) Source Mesh (Blue Solid Line): np = 9904, ne - 1 7352 

Target Mesh (Red Dashed Line): np = 37144. ne = 69408 



(b) Source Function 



(c) Source Function (Blue Solid Lines) and 

Interpolated Function (Red Dashed Lines) Functions 


Figure 4: Interpolation Accuracy 


We refined the coarse mesh by splitting each element to create our source mesh and function. We then used the 
coarse mesh (target) to interpolate function (f 2 ) from the fine (source) mesh. Figure 4c shows contours for source 
and resulting target meshes. If the process were error free, then (/}) and (f 2 ) should be identical. The average 
difference between (fj) and (f 2 ) was 6.5x1 0" 17 , which is well below our machine accuracy. 


8 

American Institute of Aeronautics and Astronautics 


The second test case is the aerodynamic load transfer from a CFD mesh to a FE mesh for a Micro Air Vehicle. 
Figure 5 shows: (a) CFD source mesh, (b) contours of coefficients of pressure on the source mesh, (c) aerodynamic 
load vectors on the CFD mesh, (d) target CSM mesh, and (e) the transferred load vectors on the target CSM mesh. 
The force vector distributions on the CSM and the CFD meshes are different due to different levels of discretization; 
however, the transfer process conserved forces, moments, and virtual work within the limits of the computer 
accuracy. It took 6.36 seconds of CPU time to run this case. 



Figure 5. Load Transfer for a Micro Vehicle 


The third test case is the interpolation of axial moment from a structured mesh to an unstructured mesh for an X33 
model. Figure 6 shows: (a) the source structured mesh, (b) axial moment contours for the source mesh, (c) target 
mesh, and (d) contours of source and interpolated target axial moment. Figure 6d shows that the original source 
contours (solid blue lines) and interpolated target contour lines (red dashed lines). Both contour lines lie right on top 
of each other. It took 62.33 seconds of CPU time to run this case. 




Source Mesh 

(np = 229B7, ne = 22680) 


Target Mesh 

(np = 69051, ne = 137357) 


Source (Solid Blue Lines) and 
Target (Red Dashed Lines) Function 


Figure 6. Pressure Interpolation on an X33. 


9 

American Institute of Aeronautics and Astronautics 


The fourth test case is the load transfer for a morphing configuration. Figure 7 shows: (a) CFD mesh, (b) coefficients 
of pressure on the CFD mesh, (c) load vectors on the CFD mesh, (d) a simple mesh for multibody dynamics analysis 
(colors signify different zones), and (e) transferred load vectors on the target mesh. For clarity, the moment 
distribution is not shown in Fig. 7. As with the all other load transfer test cases, the process conserved forces, 
moments, and virtual work within the limits of the computer accuracy. It took 0.91 second of CPU time to run this 
case. 


CFD Mesh 

(np= 1 776. ne = 3548) 

Cp on CFD Mesh ^ 

Load Vectors 
on CFD Mesh 


(b) 

to 

FE Mesh 

(np = 98G, ne = 1799) 


Load Vectors 
on FE Mesh 




(fl 




Figure 7. Load Transfer for a Morphing Vehicle. 


The fifth test case is the deflection transfer for a blended wing body. Figure 8 shows: (a) undeflected and deflected 
FE meshes, (b) undeflected and deflected CFD meshes, (c) close-up view of deflected FE and CFD meshes. The 
transfer included all three components of the deflection vectors. The deflected CFD model is right on the deflected 
FE mesh. It took 17.62 seconds of CPU time to run this case. 



Figure 8. Deflection Transfer for a Blended Wing 


10 

American Institute of Aeronautics and Astronautics 


The sixth and final test case is the aerodynamic load transfer for a ballute. Figure 9 shows: (a) CFD source mesh, (b) 
contours of coefficients of pressure on the source mesh, (c) target CSM mesh, and (d) the transferred load vectors on 
the target CSM mesh. The conservation of forces, moments, and virtual work were maintained within the limits of 
the computer accuracy. It took 4.18 seconds of CPU time to run this case. 



Figure 9. Load Transfer for a Ballute 


V. Conclusions 

We have presented an algorithm for data transfer between dissimilar meshes. The algorithm is suitable for high- 
fidelity multidisciplinary applications, where scalar or vector fields need to be transferred among various discipline. 
The paper includes a formulation for modeling fluid- structure interaction, and the formulation guarantees 
conservation of force and moments. The overall formulation is in a matrix form, which simplifies the algorithm 
integration with existing commercial software. The implementation is independent of the mesh topology, so we can 
treat structured and unstructured meshes in the same manner. The implementation also includes an advanced spatial 
search algorithm that substantially reduces the required computational resources. 

We verified the algorithm accuracy through six test cases. The results for load transfer cases demonstrated that 
the algorithm maintained conservation of forces and moments. The test cases also verified the interpolation 
accuracy. The algorithm performance depends on the mesh sizes, element definitions, discrepancies in mesh 
resolutions, gaps between two meshes, and a number of other factors. However, the performance approximately 
varied linearly with the average of number of mesh points. It took less than ten seconds for a typical test case. 

Acknowledgments 

The author would like to thank Drs. Kumar Bhatia and Moeljo Hong of Boeing (Seattle) for a very productive 
collaboration during the past few years, and their hospitality and generosity during authorâs visits to Boeing. The 
author would also like to thank following NASA Langley Researchers: Paul Pao and Mercedes Reeves for providing 


11 

American Institute of Aeronautics and Astronautics 



micro air vehicle data, Sasan Armand for providing the data for ballute, Karen Bibb for providing the X33 data, and 
Pawel Chwalowski for providing data for the morphing aircraft. 


References 

^amareh, J. A., Bhatia, K. G., âA Unified Approach to Modeling Multidisciplinary Interactions,â 8th 
AIAA/NASA/USAF/ISSMO Multidisciplinary Analysis and Optimization Conference, Multidisciplinary Analysis and 
Optimization, Long Beach, CA, 6-8 September 2000, AIAA Paper 2000-4704. 

2 Dusto, A. R., âA Method for Predicting the Stability Characteristics of an Elastic Airplane, FLEXSTAB Theoretical 
Description,â NASA CR-1 14,712, Oct. 1974. 

3 Petiau, C. and Brun, S., âTrends in Aeroelastic Analysis of Combat Aircraft,â AGARD, AD-P005855, Aug. 1987. 

4 Nicot, Ph., and Petiau, C., âAeroelastic Analysis Using Finite Element Models,â European Forum for Aeroelasticity and 
Structural Dynamics,â Aachen, Germany, 1989. 

5 Tzong, G., Chen, H. H., Chang, K. C., Wu, T., and Cebeci, T., âA General Method for Calculating Aero- Structure 
Interaction on Aircraft Configurations,â AIAA Paper 96-3982, Sept. 1996. 

6 Kapania, R. K., and Bhardwaj, M., âAeroelastic Analysis of Modem Complex Wings,â AIAA Paper 96-4011, Sept. 1996. 

7 Brown, S. A., âDisplacement Extrapolations for CFD+CSM Aeroelastic Analysis,â AIAA Paper 97-1090, Apr. 1997. 

8 Cebral, J. R., and Lohner, R., âFluid- Stmcture Coupling: Extensions and Improvements,â AIAA Paper 97-0858, Jan. 1997. 

9 Smith, M. J., Hodges, D. H., and Cesnik, C. E. S., âAn Evaluation of Computational Algorithms to Interface Between CFD 
and CSD Methodologies,â Wright-Patterson Laboratory, WL-TR-96-3055, Nov. 1995. 

10 Clutter, E. G., âA NURBS Based Interface Definition for Fluid-Stmcture Interactions Studies,â Masterâs thesis, Department 
of Aerospace Engineering, Mississippi State University, Mississippi, Dec. 1997. 

n Send, Wolfgang, âCoupling of Fluid and Stmcture for Transport Aircraft Wings,â International Fomm on Aeroelasticity 
and Stmctural Dynamics, CEAS/AIAA/ICASE/NASA Langley, Williamsburg, VA, June, 1999. (Not included in the bounded 
volume) 

12 Samareh, J. A., âUse Of CAD Geometry in MDO,â The 6th AIAA/USAF/NASA/ISSMO Symposium on Multidisciplinary 
Analysis and Optimization, AIAA-96-3991, Bellevue, WA, Sept. 1996, pp. 88-98. 

13 Murti, V., and Vallippan, S., "Numerical Inverse Isoparametric Mapping in Remeshing and Nodal Quantity Contouring,â 
Computers and Structures , Vol. 22, No. 6, 1986, pp. 1011-1021. 

14 Pidaparti, R. M. V., "Stmctural and Aerodynamic Data Transformation Using Inverse Isoparametric Mapping,â Journal of 
Aircraft , Vol. 29, No. 3, 1992, pp. 507-509. 

15 Maman, N., and Farhat, C., âMatching Fluid and Stmcture Meshes for Aeroelastic Computations: A Parallel Approach,â 
Computers and Structures , Vol. 54, No. 4, 1995, pp. 779-785. 

16 Farhat, C., Lesoinne, M., and LeTallec, P., âLoad and Motion Transfer Algorithms for Fluid/Stmcture Interaction Problems 
with Non-Matching Discrete Interface: Momentum and Energy Conservation, Optimal Discretization and Application to 
Aeroelasticity,â Computer Methods and Applied Mechanical Engineering, Vol. 157, No. 1, 1998, pp. 95-114. 

17 Cebral, J. R., and Lohner, R., âConservative Load Projection and Tracking for Fluid-Stmcture Problems,â AIAA Journal, 
Vol. 34, No. 4, 1997, pp. 68-692. 

18 Cook, R. D., Malkus, D. S., and Plesha, M. E., Concepts and Applications of Finite Element Analysis, 3rd ed., John Wiley 
& Sons, New York, 1989. 

19 Samet, H., The Design and Analysis of Spatial Data Structures. Addison- Wesley, 1990. 

20 Bonet, J. and Peraire, J., "An alternating digital tree (ADT) algorithm for 3D geometric searching and intersection 
problems," Int. J. Numer. Meth. Engng, vol. 31, pp. 1-17, 1991. 


12 

American Institute of Aeronautics and Astronautics 



