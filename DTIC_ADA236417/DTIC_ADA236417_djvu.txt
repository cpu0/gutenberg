AD-A236 417 station page 


Form Approved 
OPM No. 0704-0188 


g*1 how pw mpon**. Indudhg tw fm* tor mtaatngMiuclion*, wiicNnguMngdM mutch grtaring ifdiniimMngtMdM 
00 Mo bwdon «UnuM Of any otfiof Mp*cl of Mi cohesion of WomMiwt, tatadhg (uggoohono lor rodudne Mi bwdon. to WmHngkxi 
1215 Jofltnon Onto Highway. Suto 1204, Artngkm. VA 22202-4302. and lolwORIcaef tntexmaion and HaguMoiy Attain. Otto* d 


1. AGENCY USE ONLY (Leave Blank) 


2. REPORT DATE 


3. REPORT TYPE AND DATES COVERED 

Final: 03 Oct 1990 to 01 Mar 1993 


47nTLE AND SUBTTT 

Software Leverage, Inc., Tolerant Ada Development System, Version 6.0, Tolerant 
Eternity (Host & Target), 901003W1.11039 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 
Wright-Patterson AFB 
Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESSES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF VSR 400.0491 



h L_ : rr ( ' ~f t- 

JUM 0 5 1991 


12a. DISTRIBUTION/AVAILABIUTY STATEMENT 

Approved for public release; distribution unlimited. 


13. ABSTRACT (Maximum 200 words) 

Software Leverage, Inc., Tolerant Ada Development System, Version 6.0, Wright-Patterson AFB, Tolerant Etemiity TX, 
5.4.0 (Host & Target), ACVC 1.11. 



14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


15. NUMBER OF PAGES 


16. PRICE COOE 


17. SECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

19. SECURITY CLASSIFICATION 

OF ABSTRACT 

20. LIMITATION OF ABSTRAC 

UNCLASSIFED 

UNCLASSIFIED 



NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 
















Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 3 October 1990. 

Compiler Name and Version: Tolerant Ada Development System, 

Version 6.0 

Host Computer System: Tolerant Eternity 

TX, 5.4.0 

Target Computer System: Tolerant Eternity 

TX, 5.4.0 

Customer Agreement Number: 90-07-25-SVL 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
901003V1.11039 is avarded to Software Leverage, Inc. This certificate 
expires on 1 March 1993. 

This report has been reviewed and is approved. 



Ada Validation Facility 


Steven P. Vilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 


45433-6503 





Ada Vrfida^ofPOrganization 

DirectorV'Copputer & Software Engineering Division 
Institute^fbr Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Aaa«asioa ?or 

Mil ? OR Ale 1 



DTIC 

□ 

Un&na 

j "riot'd 

L.J 

Justl 

T icav1 on_ 

Ir 

Dlstr 

-• L'jI i 

/ i 

j A'fSlIacli.', 1 

y Cedes 

I [,W{!: l 

ind/or ; 

Dist 

Spec 

tal < 

i 

iw 


i 

! 



91 5 24 007 


91-00478 

■iinmiinin 





AVF Control Number: AVF-VSR-400.0491 

1 April 1991 
90-07-25-SWL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 901003V1.11039 
Softvare Leverage, Inc. 

Tolerant Ada Development System, Version 6.0 
Tolerant Eternity «> Tolerant Eternity 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 






Certificate Information 


The following Ada implementation vas tested and determined to pass ACVC 
1.11. Testing vas completed on 3 October 1990. 

Compiler Name and Version: Tolerant Ada Development System, 

Version 6.0 

Host Computer System: Tolerant Eternity 

TX, 5.4.0 

Target Computer System: Tolerant Eternity 

TX, 5.4.0 

Customer Agreement Number: 90-07-25-SVL 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
901003W1.11039 is awarded to Software Leverage, Inc. This certificate 
expires on 1 March 1993. 

This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 


45433-6503 


Ada V^idatfldh Organization 

Director!'Qjnnputer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 




DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


Declaration of Conformance 
Customer: Software Leverage, Inc. 

Certificate Awardee: R. M. Hilleary, E-Systems/ECI Division 
Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: Tolerant Ada Development System, 

Version 6.0 

Host Computer System: Tolerant Eternity TX, 5.4.0 

Target Computer System: Tolerant Eternity TX, 5.4.0 

Declaration: 

We, the undersigned, declare that we have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A ISO 
8652-1987 in the implementation listed above. 




Date: 7 ^ 



TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national lavs of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance vith the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vhich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 





INTRODUCTION 


1.2 REFERENCES 

[Ada831 Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, FiSruary 1985 and ISO 8652-1987. 

[Pro90J Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECKJFILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units Are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Vithdravn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement vith an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 02 September 1990. 


E28005C 

B28006C 

C34006D 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026A 

C83026B 

C83041A 

B85001L 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Approved Ada Commentaries are included 
as appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 21 tests check for the predefined type LONGINTEGER: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45612C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

CD7101F 

C55B07A 

B55B09C 

B86001V 

C86006C 

C35702B, C35713C 

, B86001U, 

and C86006G 

check for 

the predefined 


LONG FLOAT. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the safe numbers and must be 
rejected. (See section 2.3) 


C45531M..P (4 tests) and C45532M..P (4 tests) check fixed-point 
operations for types that require a SYSTEM.MAX_MANTISSA of 47 or 
greater. 


C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEOVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINEOVERFLOWS is TRUE. 

C86001F recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. For this implementation, the package TEXT_I0 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 


C96005B checks for values of type DURATION'BASE that are outside the 
range of DURATION. There are no such values for this implementation. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 


2-2 





IMPLEMENTATION DEPENDENCIES 


The tests listed in the folloving table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

IN0UT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT~I0 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

IN0UT FILE 

DIRECT 10 

CE2102S 

RESET 

IN0UT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks ‘hat WRITE raises USE_ERROR if the capacity of the 
external file i_, exceeded for SEQUENTIAL_IO. This implementation does 
not restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT_IO. This implementation does not 
restrict file capacity. 

CE3304A checks that USEERROR is raised if a call to SET LINE LENGTH or 
SETPAGE LENGTH specifies a value that is inappropriate lor tKe external 
file. TKis implementation does not have i appropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYOUT_ERROR vhen the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) vere required for 20 tests. 


2-3 







IMPLEMENTATION DEPENDENCIES 


The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33001B B38003A B38003B B38009A 

B38009B B85008G B83008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO; the compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. ARM 3.5.7(12)). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C (3 tests) use instantiations of 
the support procedure Length Check, which uses Unchecked_Conversion 
according to the interpretation given in AI-00590. The AVO ruled that this 
interpretation is not binding under ACVC 1.11; the tests are ruled to be 
passed if they produce Failed messages only from the instantiations of 
Length_Check—i.e., the allowed Report.Failed messages have the general 
form: 


" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see: 

Technical Support 
485 Massachusetts Avenue 
Arlington MA 02174 
(617) 648-1414 


For a point of contact for sales information about this Ada implementation 
system, see: 


Sales Information 
485 Massachusetts Avenue 
Arlington MA 02174 
(617) 648-1414 


Testing of this Ada implementation vas conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90J. 


3-1 





PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


Total Number of Applicable Tests 3823 

Total Number of Withdrawn Tests 74 

Processed Inapplicable Tests 72 

Non-Processed I/O Tests 0 

Non-Processed Floating-Point 

Precision Tests 201 

Total Number of Inapplicable Tests 273 


Total Number of Tests for ACVC 1.11 4170 


The above number of I/O tests were not processed because this 
implementation does not support a file system. The above number of 
floating-point tests were not processed because they used floating-point 
precision exceeding that supported by the implementation. When this 
compiler was tested, the tests listed in section 2.1 had been withdrawn 
because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler was 
tested, the tests listed in section 2.1 had been withdrawn because of test 
errors. The AVF determined that 273 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 201 executable tests that use tloating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 were also processed. 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. After the test 
files were loaded onto the host computer, the full set of tests was 
processed by the Ada implementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 






PROCESSING INFORMATION 


Svitch Effect 


-el Intersperse error messages vith source text vhen 
there are warnings or errors at compile time. 

-M Cause the prelinker to be called if the compilation 

has no errors. (The -M option only affects 
compilations which had no compilation errors.) 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in tvo tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$BIG_ID1 (1..V-1 «> 'A', V *> '1') 

$BIG_ID2 (1..V-1 «> 'A', V -> '2') 

$BIG_ID3 (1..V/2 «> 'A') & '3' & 

(1..V-1-V/2 «> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 «> '0') & "298" 

$BIGJtEAL_LIT (1..V-5 «> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A ') & '1' & 

$BLANKS (1..V-20 -> ' ') 

$MAX_LEN INT BASED LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


A-l 





MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$MAX_IN_LEN 

499 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

ETERNITY_TX 

$DELTA__DOC 

0.0000000004656612873077392578125 

SENTRYADDRESS 

SYSTEM.«+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM.«+ w (16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2147483647 

SFILETERMINATOR 

t t 

SFIXEDNAME 

NOSUCHTYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

«tn 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE CAPACITY" 

SGREATER THAN DURATION 

100000.0 


$GREATER THAN DURATION BASE LAST 

TooooOoo.o 

$GREATER THAN_FLOAT BASE LAST 

1.5E+308 

$GREATER THANPLOAT SAFE LARGE 

5.5E307 


A-2 




MACRO PARAMETERS 


SGREATER THAN SHORT FLOAT SAFE LARGE 

9.0137 

$HIGH_PRIORITY 99 

SILLEGAL EXTERNAL FILE NAME1 

7i1legal/file_name/2}JX2102c.dat 

$ILLEGAL_EXTERNAL_FILE NAME2 

7lllegal/£ile_name/CE2102c*.dat 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

“ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TXT") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TXT") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACELANGUAGE C 

$ LE S S_THAN_DURATION -10000.0 

$LESS_THAN_DURATION_BASE FIRST 

-1O000000.0 

$ LINE_TERMINATOR ASCII.LF 

$LOV_PRIORITY 0 

$MACHINE CODE_STATEMENT 

C0DE_0'(0P -> NOP); 

$MACHINE_CODE_TYPE C0DE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

SMAXINT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 


A-3 





MACRO PARAMETERS 


$NAME 

$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEV_MEM_SIZE 

$NEV_STOR_UNIT 

$NEW_SY S_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
SVARIABLEADDRESS2 
SYOURPRAGMA 


TINY_INTEGER 

ETERNITY_TX 

/net/archt/ACVC/l.ll/run_area/ce/X2120A 

/net/archt/ACVC/l.ll/run_area/ce/X2120B 

/net/archt/ACVC/l.ll/run_area/ce/X3119A 

16#FFFFFFFD# 

16777216 

8 

ETERNITYJTX 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODEO 

32 

1024 

0.01 

ADDRESS OF VARIABLE 
ADDRESS OF VARIABLE1 
ADDRESS OF VARIABLE2 
PASSIVE 


A-4 







APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
othervise, references in this appendix are to compiler documentation and 
not to this report. 


COMPILER OPTIONS 


The Ada compiler is invoked with the following syntax: 


ada [options] [source_file]... [linker_options] [objectfile.o]... 


Possible options are: 


-# identifier type value 
-a file name 
-d 
-e 


define an identifier 
treat filename as an archive file 
analyze for dependencies only 
process errors using a.error 


_p « 
-E file " 
-E directory " 


-el 


-EL 

-EL file 
-EL directory 
-ev 
-K 

-L libraryname 
-lfile_abbreviation 
-M unit_name 
-M sourcefile 
-o executable file 
-0[0-9] 


ff 

n 

if 

n 

keep generated IL 

operate in library library name 

use file_abbreviation at link time 

use unit~name as main unit 

use the unit in source file as main unit 

make executable_file tKe output file 

invoke optimizer with n passes (default-4) 


B-l 






COMPILATION SYSTEM OPTIONS 


-P invoke preprocessor 

-R VADS_library recompile instantiations 

-S apply pragma suppress to compilation 

-T print timing statistics 

-v verbose 

-v suppress varnings 


B-2 






COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. The Ada prelinker is invoked vith the following syntax: 


a.Id [options] unit_name [ldoptions] 


Possible options are: 


option name 


function 


-DX 

-E unit name 
-F 

-L library name 
-o executaEle file 
-sh 


-U 


-v 

-V 


debug memory overflow 

elaborate unit name as early as possible 

print a list ol dependent files 

operate in VADS library libraryname 

make executable_file the output file 

display tool name 

print a list of dependent units 

print linker command 

print linker command, suppress link 


B-3 




APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are; 


package STANDARD is 
• • • 

type INTEGER is range -2147483648 .. 2147483647; 
type FLOAT is digits 15 

range -1.79769313486232E+308 .. 1.79769313486232E+308; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 

type SHORTINTEGER is range -32768 .. 32767; 

type SH0RTFL0AT is digits 6 

range - -3.40282E+38 .. 3.40282E+38; 

type TINY_INTEGER is range -128 .. 127; 


end STANDARD; 


C-l 



APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 
INLINE_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same vay as pragma INLINE, indicates 
to the compiler that the subprogram must always be inlined. This pragma also 
suppresses the generation of a callable version of the routine, which saves code 
space. 

BUILTIN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada 
packages, but provides no user access. It is used only to implement code 
bodies for which no actual Ada body can be provided, for example the 
MACHINECODB package. 

SHARE_CODE Pragma 

The SHARE CODE pragma takes the name of a generic instantiation or a generic 
unit as tKe first argument and one of the identifiers TRUE or FALSE as the 
second argument. This pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit. 

When the first argument is a generic unit, the pragma applies to all 
instantiations of that generic. When the first argument is the name of a 
generic instantiation, the pragma applies only to the specified instantiation 
or overloaded instantiations. 

If the second argument is TRUE, the compiler will try to share code generated 
for a generic instantiation with code generated for other instantiations of the 
same generic. When the second argument is FALSE, each instantiation will get a 
unique copy of the generated code. The extent to which code is shared between 
instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit. 

The name pragma SHAR£_BODY is also recognized by the implementation and has the 
same effect as SHARE_CODE. It is included for compatibility with earlier 
versions of VADS. 

NOIMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE 
attribute of enumeration types. This eliminates the overhead required to store 
the array in the executable image. 


C-2 






APPENDIX F OF THE Ada STANDARD 


EXTERNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in 
Ada and allows the user to specify a different external name that may be used 
to reference the entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and must apply to an 
object declared earlier in the same package specification. 

INTERFACEOBJECT Pragma 

The INTERFACEOBJECT pragma takes the name of a a variable defined in another 
language and allows it to be referenced directly in Ada. The pragma will 
replace all occurrences of the variable name with an external reference to the 
second, linkargument. The pragma is allowed at the place of a declarative 
item in a package specification and must apply to an object declared earlier in 
the same package specification. The object must be declared as a scalar or an 
access type. The object cannot be any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

IMPLICITCODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is 
only allowed within a machine code procedure. It specifies that implicit code 
generated by the compiler be allowed or disallowed. A warning is issued if OFF 
is used and any implicit code needs to be generated. The default is ON. 


2. Implementation of Predefined Pragmas 
CONTROLLED 

This pragma is recognized by the implementation but has no effect. 

ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The Ada subprograms 
can be either functions or procedures. The types of parameters and the result 
type for functions must be scalar, access, or the predefined type ADDRESS in 
SYSTEM. An optional third argument overrides the default link name. All 


C-3 






APPENDIX F OF THE Ada STANDARD 


parameters must have mode IN. Record and array objects can be passed by 
reference using the ADDRESS attribute. 

LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

MEMORYSIZE 

This pragma is recognized by the implementation. The implementation does not 
allow SYSTEM to be modified by means of pragmas; the SYSTEM package must be 
recompiled. 

NONREENTRANT 

This pragma takes one argument which can be the name of either a library 
subprogram or a subprogram declared immediately within a library package spec 
or body. It indicates to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograms within 
a package spec or package body. 

NOTELABORATED 

This pragma can only appear in a library package specification. It indicates 
that the package will not be elaborated because it is either part of the RTS, a 
configuration package, or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

PACK 

This pragma will cause the compiler to choose a non-aligned representation for 
composite types. It will not cause objects to be packed at the bit level. 

PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

PASSIVE 

The pragma has three forms: 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task type declared 


C-4 





APPENDIX F OF THE Ada STANDARD 


immediately within a library package spec or body. The pragma directs the 
compiler to optimize certain tasking operations. It is possible that the 
statements in a task body will prevent the intended optimization; in these 
cases, a warning will be generated at compile time and will raise TASKING_ERROR 
at runtime. 

PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

SHARED 

This pragma is recognized by the implementation but has no effect. 

STORAGEUNIT 

This pragma is recognized by the implementation. The implementation does not 
allow SYSTEM to be modified by means of pragmas; the SYSTEM package must be 
recompiled. 

SUPPRESS 

This pragma is implemented as described, except that RANGE_CHECK and 
DIVISION_CHECK cannot be suppressed. 

SYSTEMNAME 

This pragma is recognized by the implementation. The implementation does not 
allow SYSTEM to be modified by means of pragmas, the SYSTEM package must be 
recompiled. 


3. Implementation-Dependent Attributes 
P'REF 

For a prefix that denotes an object, a program unit, a label, or an entry, this 
attribute denotes the effective address of the first of the storage units 
allocated to P. 

For a subprogram, package, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or statement. For an entry 
for which an address clause has been given, it refers to the corresponding 
hardware interrupt. The attribute is of the type OPERAND defined in the 
package MACHINECODE. The attribute is only allowed within a machine code 
procedure. 


4. Specification Of Package SYSTEM 

with UNSIGNEDTYPES; 
package SYSTEM is 


C-5 






APPENDIX F OF THE Ada STANDARD 


pragma SUPPRESS(ALL_CHECKS); 
pragma SUPPRESS(EXCEPTION TABLES); 
pragma SUPPRESS(NOT_ELABORATED); 

type NAME is ( eternity_tx ); 


SYSTEM_NAME : constant NAME := eternity_tx; 


STORAGE_UNIT : constant := 8; 

MEMORY_SIZE : constant :« 16_777_216; 

— System-Dependent Named Numbers 


MININT 

MAXINT 

MAXDIGITS 

MAXMANTISSA 

FINE_DELTA 

TICK 


constant 
constant 
constant 
constant 
constant 
const suit 


-2 147 483 647 - 1; 
2 147 483 547; 

13; " " 

31; 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 
MAX RECSIZE : integer :« 64*1024; 


type ADDRESS is private; 


function 

i»>n 

(As 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN; 

function 

tt<«i 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN; 

function 

«> m , i 

(As 

ADDRESS; 

B 

ADDRESS) 

return 

BOOLEAN; 

function 


(As 

ADDRESS; 

B 

ADDRESS) 

return 

BOOLEAN; 

function 

t!_H 

(As 

ADDRESS; 

B 

ADDRESS) 

return 

INTEGER; 

function 

+ « 

(As 

ADDRESS; 

I 

INTEGER) 

return 

ADDRESS; 

function 


(As 

ADDRESS; 

I 

INTEGER) 

return 

ADDRESS; 


function "+" (Is UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 


function MEMORYADDRESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS renames "+" 
NO ADDR : constant ADDRESS; 


type TASK_ID is private; 

NO TASK ID ; constant TASK ID; 


type PROGRAM ID is private; 

NO PROGRAM ID : constant PROGRAM ID; 


private 


type ADDRESS is new UNSIGNEDJTY?2S.UNSIGNED_INTEGER; 


C-6 










APPENDIX F OF THE Ada STANDARD 


NO_ADDR : constant ADDRESS :■ 0; 

pragma BUILT IN(">"); 
pragma BUILT~IN("<"); 
pragma BUILT - IN<">«"); 
pragma BUILT~IN<"<«"); 
pragma BUILT IN("-"); 
pragma BUILT*IN( 

type TASK_ID is nev UNSIGNED TYPES.UNSIGNED_INTEGER; 
N0_TASK_ID : constant TASK_ID :« 0; 

type PROGRAMED is nev UNSIGNED_TYPES. UNSIGNED_INTEGER; 
NO PROGRAM ID s constant PROGRAMED :« 0; 

end SYSTEM; 


5. Restrictions On Representation Clauses 
Pragma PACK 

In the absence of pragma PACK, record components are padded to provide for 
efficient access by the target hardware; pragma PACK applied to a record 
eliminates the padding vhere possible. Pragma PACK has no other effect on the 
storage allocated for record components; a record representation is required. 

Record Representation Clauses 

For scalar types, a representation clause vill pack to the number of bits 
required to represent the range of the subtype. A record representation 
applied to a composite type vill not cause the object to be packed to fit in 
the space required. An explicit representation clause must be given for the 
component type. An error vill be issued if there is insufficient space 
allocated. 

Address Clauses 

Address clauses are supported for variables and constants. 

Interrupts 

Interrupt entries are not supported. 

Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 


C-7 




APPENDIX F OF THE Ada STANDARD 


Machine Code Insertions 

Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides an assembly 
language interface for the target machine. It provides the necessary record 
type(s) needed in the code statement, an enumeration type of all the opcode 
mnemonics, a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as follows: 

CODE_n'( opcode, operand {, operand} ); 

vhere n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are 
listed within a subaggregate. The format is: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation must be used (cf. RM 
4.3(4)). 


CODEO ' ( op -> opcode ); 

The opcode must be an enumeration literal (i.e., it cannot be an object, 
attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the 'REF attribute. 

The arguments to any of the functions defined in MACHINECODE must be static 
expressions, string literals, or the functions defined in MACHINE_CODE. The 
'REF attribute may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 


6. Conventions for Implementation-Generated Names 
There are no implementation-generated names. 


7. Interpretation of Expressions in Address Clauses 
Address clauses are supported for constants and variables. 


8. Restrictions on Unchecked Conversions 
None. 


C-8 








APPENDIX F OF THE Ada STANDARD 


9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECTIO use the value MAX_REC_SIZE as the record size 
(expressed in ST0RAGE_UNITS) when the size of ELEMENTJTYPE exceeds that value. 
For example, for unconstrained arrays such as string,“where ELEMENTJTYPE'SIZE is 
very large, MAXREC SIZE is used instead. MAX REC0RD_SIZB is defined in SYSTEM 
and can be changed By a program before instantiating DIRECT_I0 to provide an 
upper limit on the record size. In any case, the maximum size supported is 1024 
x 1024 x STORAGEUNIT bits. DIRECT_I0 will raise USEERROR if MAXRECSIZE 
exceeds this absolute limit. ~ * 

Instantiations of SEQUENTIAL_I0 use the value MAX_REC_SIZE as the record size 
(expressed in ST0RAGE_UNITS) when the size of ELEMENTJTYPE exceeds that value. 
For example, for unconstrained arrays such as string, vhere ELEMENTJTYPE'SIZE is 
very large, MAXREC SIZE is used instead. MAX RECORDSIZE is defined in SYSTEM 
and can be changed By a program before instantiating INTEGER 10 to provide an 
upper limit on the record size. SEQUENTIAL_I0 imposes no limit on MAX_REC_SIZE. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not 
intended to imply that resources up to or even near these limits are available 
to every program. 

Line Length 

The implementation supports a maximum line length of 500 characters including 
the end of line character. 

Record and Array Sizes 

The maximum size of a statically sized.array type is 4,000,000 x ST0RAGE_UNITS. 
The maximum size of a statically sized record type is 4,000,000 x 
ST0RAGE_UNITS. A record type or array type declaration that exceeds these 
limits will generate a warning message. 

Default Stack Size for Tasks 

In the absence of an explicit ST0RAGE_SIZE length specification, every task 
except the main program is allocated I fixed size stack of 10,240 
ST0RAGE_UNITS. This is the value returned by T'ST0RAGE_SIZE for a task type T. 

Default Collection Size 

In the absence of an explicit ST0RAGE_SIZE length attribute, the default 
collection size for an access type is - 100 times the size of the designated 


C-9 








APPENDIX P OF THE Ada STANDARD 

type. This is the value returned by T'STORAGE_SIZE for an access type T. 
Limit on Declared Objects 

There is an absolute liait of 6,000,000 x STORAGE_UNITS for objects declared 
statically vithin a compilation unit. If this value is exceeded, the compiler 
will terminate the compilation of the unit with a FATAL error message. 


C-10 






