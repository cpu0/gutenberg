AD-A245 664 ^ON PAGE 


Form Approved 
OPMNo. 0704-0188 


PtMIc rapOftmg 
nMdid. and rcK 
HMdqudMtS 
tAmifuntmir 



m». Including di* dm* lor iMowdig datiuctloni, Mirehing oiMng d«u lOureM gahorlng and maimiining iho dtta 
Ilia or any othar aapad d dila ooiacUon d Mormallon. including auggaaiiona for reducing ihia burden, to WaadngKin 
I HIglway. Suda 1204. Aringlon. VA 22202-4X2. and to die Office d Inloimalion and Ragulaioiy Adaira. Office d 


3. REPORT TYPE AND DATES COVERED 


Final: 25 April 1991 to 01 Jun 1993 


4. TITLE AND SUBTITLE 


Intermetrics, Inc., UTS Ada Compiler, Version 302.03, IBM 3083 under UTS 580 
Release 1.2.3 (Host & Target), 91042W1.11141 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8, PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-456.1191 


9. SPONSORINGAmONITORING AGENCY NAME(S) AND AODRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D C. 20301-3081 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


10. SPONSORINGA<ONITORING AGENCY 
REPORT NUMBER 



12b. DISTRIBUTION CODE 


13, ABSTRACT (Maximum 200 words) 

Intermetrics, Inc., UTS Ada Compiler, Version 302.03, IBM 3083 under UTS 580 Release 1.2.3 (Host & Target), ACVC 



DTIC 

|E:i.ECTE I 
*FEBaS1992| 



92-02718 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15 NUMBER OF PAGES 


16. PRICE CODE 


20 LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298. (Rev 2-89) 
Prescribed by ANSI Std 239-128 



















AVF Control Nvimber: AVF_VSR_456.1191 

16-No veitibe r -19 & 1 
90-11-16-INT 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 910425W1.11141 
Intermetrics, Inc. 

UTS Ada Compiler, Version 302.03 
IBM 3083 *> IBM 3083 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright Patterson AFB OH 45433-6503 



Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 25 April, 1991. 

Compiler Name and Version: UTS Ada Compiler, Version 302.03 

Host Computer System: IBM 3083 under UTS 580 Release 1.2.3 

Target Computer System: IBM 3083 under UTS 580 Release 1.2.3 

Customer Agreement Number: 90-11-16'INT 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
910425W1.11141 is awarded to Intermetrics, Inc. This certificate expires 
on 1 June 1993. 

This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada V^id^idn Organization 

Direcftoru^C^puter & Software Engineering Division 
InstituteWor Defense Analyses 
Alexandria VA 22311 


A&a' Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



1 Accession For j 

1 M7IS 7KA&I 

w 

! DTT-' TA« 

□ 

1 1’ r ■ 0 ' i:. c ^5 n 

□ 

! 1 . ■ ' rn_ 

1 _ _ _ 

* V ! r; -j'; 1 r u/ 


! Av <; . .':tr 1 ' ty 

■ odos 


.AVfdi. ni.ij/or 


I 





DECLARATION OF CONFORMANCE 


Customer: Intermetrics, Inc., Cambridge, MA 

Ada Validation Facility: ASD/SCEL Wright-Patterson AFB, OH 45433-6503 
AC/C Version: 1.11 

Ada Implementation 

Compiler Name and Version; UTS Ada Compiler, Version 302.03 
Host Computer System: IBM 3083, UTS 580 Release 1.2.3 
Target Computer System: same 


Customer's Declaration 

I, the undersigned, representing Intermetrics, Inc., declare that 
Intermetrics, Inc. has no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A in the implementation listed 
in this declaration. I declare that Intermetrics, Inc. is the owner 
of record of the above implementation and the certificates shall be 
awarded in Intermetrics' corporate name. 

/&■ Date: 3/^/ 

Dennis Struble, Deputy Gen^i^l Manager, /^ 

Development Systems Group, Inteimetrics, Inc. 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS .1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT .3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETEF.S 

APPENDIX B COMPILATIOM SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 
















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Coitpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free piiblic disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has nc 
nonconformities to the Ada Standard other chan those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 




INTRODUCTIOJ 


1.2 REFERENCES 


[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


[Pro90] Ada Compiler Validation Procedures, Version 2.1, Ada Joint Program 
Office, August 1990. 


[UG89] Ada Coiipiler Validation Capability User's Guide, 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circvunvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of me 
Ada Standard. The procedure CHECK_FILE is used to check the contents ci 
text files written by some of the Class C tests for Chapter 14 of she .Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a sec of 
executable tests. If these units are not operating correctly; validation 
testing is discontinued. 

Class B tests check that a coitpiler detects illegal language usage. Class 
B tests are not executable. Each test in chis class is con{:iled and me 
resulting compilation listing is exarruned cc verifv ,-nac all violacions or 
the Ada Standard are detected. Some of the class = .-.esns ocnnai.'. legaj. Ao- 
code which must not be flagged illegal cy nhe comp.Ie: rhic oer.a’. ic. 

also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this imp]ementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the ten 5 >late for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The cibility of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of cfie data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTiraa 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Wi thdrawn 
test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainc±»le on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system vhere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration fPro90]. 

The process of checking the conformity of an Ada compilei. co 
the Ada programming language and of issuing 3 certificate 
for this implementation. 

A test found to be incorrect and not used in confcrmicy 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objeccive or 
contains erroneous or illegal use of the Ada programirang 
language. 


1-4 





CHAPTEI^ 2 

IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 14 MARCH 1991. 


E28005C 

B28006C 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402iA 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO Known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATICK DEPENDEI^CIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L-.Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 21 tests check for the predefined type SHORT_INTEGER; for 
this implementation, there is no such type: 

C35404B B36105C C45231B C45304B C45411B 

C45412B C45502B C455C3B C45504B C45504E 

C45611B C45613B C4561;B C45631B C45632B 

B52004E C55B07B B55B09D B86001V C86006D 

CD7101E 

The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 

C35404C C45231C C45304C C45411C C45412C 

C45502C C45503C C45504C C45504F C45611C 

C45613C C45614C C45631C C45632C B52004D 

C55B07A B55B09C B86001W C86006C CD7101F 

C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LX)NG_INTEGER, or 
SH0RT_INTEGER; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type LONG_FLOAT; 
for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCMj_FLQAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 

C45423A..B (2 tests), C45523A, and C45622A check that if 
MACHINE_OVERFLCiWS is TRUE and the results of various floating-point 
operations lie outside the range of the base type, then rhe proper 
e.xception is raised; for this implementation, MACHINE_CtTRFLCT'lS is 
FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations fee 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C46013B, C46031B, C46033B, and C46034B contain length clauses that 
specify values for small that are not powers of two or five; this 
implementation does not support such values for small. 





IMPLEMENTATION DEPENDENCIES 


D55A03E..H (4 tests) use 31 levels of loop nesting which exceeds the 
capacity of the compiler. 

D56001B uses 65 levels of bloc)< nesting which exceeds the capacity of 
the compiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before the separate compilation of its body (and any of its subunits); 
this implementation requires that the body and subunits of a generic 
unit be in the same compilation as the specification if instantiations 
precede them. (See section 2.3.) 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type. The representation which this implementation 
uses for floating point types is the smallest available; therefore, ^en 
this test attempts to use a representation of other than 32 or 64 bits, 
the length clause is rejected. 

GD2A84A, GD2A84E, CD2A84I..J (2 tests), and aD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, cind EE2401G use instantiations of package DIRECT 10 
with unconstrained array types cind record types with discriminants' 
without defaults; these instcintiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERR0R is raised 
if the given file operations are not supported for the given combination 
of mode and access method; this implementation supports these 
operations. 


Test 

FiJe Opel 

ration Mode 

File Access 

Me thod 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 

IC 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL’ 

'lO 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 


CE2102I 

CREATE 

IN FILE 

DIRECT 10 


CE2102J 

CREA.TE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 

10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 

"lO 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 

"lO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 

'IG 





IMPLEIIENTATION DEPENDENCIES 


CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE__ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE ERROR if the capacity of an 
external direct file is exceeded; thTs implementation cannot restrict 
file capacity. 

CE3111B and CE3115A associate multiple internal text files with the same 
external file and attempt to read from one file what was written to the 
other, which is assumed to be immediately available; this implementation 
buffers output. (See section 2.3.) 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 6 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

BAllOlC BC3205D 


CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the separate compilation of that unit's body; as allowed by 
AI-257, this implementation requires that the bodies of a generic unit be 


2-4 



IMPLENENTATION DEPENDENCIES 


in the same compilation if instantiations of that unit precede the bodies. 
The instantiations were rejected at compile time. 

CE3111B and CE3115A were graded inapplicable by Evaluation Modification as 
directed by the AVO. The tests assume that output from one internal file 
is unbuffered and may be immediately read by another file that shares the 
same external file. This implementation raises END_ERROR on the attenpts 
to read at lines 87 and 101, respectively. 


2-5 




CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in thii. validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for sales or technical information about this Ada 
implementation system, see: 

Mike Ryer 
Intermetrics, Inc. 

733 Concord Ave. 

Cambridge MA 02138 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


3-1 






PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3757 

b) Total Number of Withdrawn Tests 93 

c) Processed Inapplicable Tests 119 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 320 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above niomber of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
the magnetic tape were loaded directly onto the host computer. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. Results were transferred to 
via RSCS to a Sun 4 for printing. 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option I Switch Effect 


LIB Ada program library name 

LISTING Name of listing file 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 







APPEM)IX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vdiere "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 255 

$BIG_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V => '2') 

5BIG ID3 (1..V/2 => 'A') & '3' & 

(1..V-1-V/2 => 'A' ) 

$BIG_ID4 {1..V/2 => 'A') & '4' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 => '0') & "298" 

$BIG_REAL_LIT (1..V-5 => '0') & "690.0" 

$BIG_STRING1 & (1..V/2 => 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'AM & '1' & 

$BLANKS (1..V-20 => ’ ') 

$MAX LEN INT BASED LITERAL 

" ~ ~ "2:" & (1..V-5 => 'OM & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (l.,V-2 => 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 


$ACC_SIZE 

32 


$ALIC3^MENT 

4 


$COUNT_LAST 

2_147_483_647 


$DEFAULT_MEM_SIZE 

2**31 


$DEFAULT_STOR_UNIT 

8 


$DEFAULT_SYS_NAME 

UTS 


$DELTA__DOC 

2.0**(-31) 


$ENTRY_ADDRESS 

SYSTEM.MAKE_ADDRESS( 

:16#40#) 

$ENTRY_ADDRESS1 

SYSTEM.MAKE_ADDRESS(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM.MAKE_ADDRESS( 

:16#100#) 

$FIELD_LAST 

2_147_483_647 


$FILE_TERMINATOF 

TEST WITHDRAWN 


$FIXED_NAME 

NO_SUCH FIXED_TYPE 


$FLOAT_NAME 

NO_SUCH FLCIAT_TYPE 


$FORM_STRING 

ft M 


$F0RM_STRING2 

"CANNOT RESTRICr_FILE CAPACiri' 

$greater than duration 



90_000.0 

$GREATER_THAN_DURATION_BASE_LAST 

10 _ 000 _ 000.0 

$GREATER_THAN_FLOAT_aASE LAST 

1 .■JE+63 

$GREATER_THAN_FLOAT_SAFE_LARGE 

16#0.FFFFFFFFFFFFEl#E+63 


A-2 







MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLQAT SAFE_LARGE 

16#U.FFFFF9#E+63 

$HIGH_PRIORITY 127 

$ILLEGAL_EXTERNAL_FILE_NAME1 

MISSING/DIRECTORY/FILENAME 

$ILLEGAL_EXTERNAL_FILE_NAME2 

STILL/NO/DIRECTORY/FILENAME 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 



-1 


$INCLUDE_PRAGMA1 

"PRAGMA INCLUDE 

( "A28006D1.TST") 

$INCLUDE_PRAGMA2 

"PRAGMA INCLUDE 

( "B28006F1.TST") 

$INTEGER_FIRST 

-2147483648 


$INTEGER_LAST 

2147483647 


$INTEGER_LAST_PLUS_1 

2_147_483_648 


$INTERFACE_LANGUAGE 

AIE_ASSEMBLER 


$LESS_THAN_DURATION 

-90_000.0 


$LESS THAN_DURATION_ 

BASE FIRST 

-1U_000_000.0 


$LINE_TERMINATOR 

ASCII.LF 


$LX:]W_PRIORITY 

-127 


$MACHINE CODE STATEMENT 

NULL; 


$MACHINE CODE_TYPE 

NO_SUCH_TYPE 


$MANTISSA_DOC 

31 


$MAX DIGITS 

15 


$MAX INT 

2147483647 


$MAX INT_PLUS_1 

2147483648 



$MIN INT 


-2147483648 







MACRO PARAMETERS 


$NAME 

no_such_integer_type 

$NAME_LIST 

UTS,MVS,CMS,PRIME50,SPERRYllOO, 
MIL_STD_1750A 

$NAME_SPECIFICATIONl 

/acvc/testing/l/tst tinp/x2120A 

$NAME_SPECIFICATION2 

/acvc/testing/l/tst tiTip/X2120B 

$NAME_SPECIFICATION3 

/acvc/t e s t i ng/l/t s t_tinp/X3119A 

$NEG_BASED_INT 

16#FFPFFFFE# 

$NEW MEM_SIZE 

TEST_WITHDRAWN 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

TESTJWITHDRAWN 

$PAGE_TERMINATOR 

TESTJWITHDRAWN 

$RECORD_DEFINITION 

TESTJWITHDRAWN 

$RECORD_NAME 

TESTJWITHDRAWN 

$TASK_SI2E 

96 

$TASK_STORAGE_S IZE 

1024 

STICK 

l.OE-3 

$VARIABLE_ADDRESS 

SYSTEM.MAKE_ADDRESS(16#0020#) 

$VARIABLE_ADDRESS1 

SYSTEM.MAKE_ADDRESS(16#0024#) 

$VARIABLE_ADDRESS2 

SYSTEM.MAKE_ADDRESS(16#0028#) 

SYOUR PRAOIA 

TEST WITHDRAWN 


A-4 



APPEInTOIX b 

COMPILATION SYSTEM OPTIONS 


COMPILER OPTIONS 

The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to coitpiler documentation and 
not to this report. 


B-1 




COMPILER OPTIONS 


— AIECOMP : AIE Compiler Driver 


type YES_NO_TYPE is (YES, NO); 
subtype 

OPTIMIZE_RANGE is INTEGER range 0 .. 10; 
type FLAG_TYPE is (YES, NO, ON_MESSAGE); 

type PHASE is (TB, SEM, GEN, STO, EXP, FLOW, CG, FLOW_CG, 

SRC_INT, LISTER, BL_LISTER, DI_LISTER, ECHO, NONE); 


procedure AIECOMP( 
SOURCE 
LIB 

LISTING 

STATS 

OPTIMIZE 

LIST 

ASM 

NUM_INSTRS 

OPTIONS_FILE 

SHOW_OPTIONS 

VERSION 

STARTWITH 

STOPAFTER 

DUMP DIANA_AFTER 

dumpIbill_after 

TBOPT 

SEMOPT 

GENOPT 

STOOPT 

EXPOPT 

FLOWOPT 

CGOPT 

FLOWCGOPT 

SRC_INTOPT 

LISTOPT 

ALLOPT 

DEBUG 

)/ 


in STRING 
in STRING 
in STRING 
in YES_NO_TyPE 
in OPTIMIZE_RANGE 
in FLAG_TYPE 
in YES_NO_TYPE 
in YES_NO_TYPE 
in STRING 
in YES_NO_TYPE 
in STRING 
in PHASE 
in PHASE 
in PHASE 
in PHASE 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in STRING 
in YES NO TYPE 


tl II . 

"ADALIB”; 

II 11 . 

NO; 

10 ; 

ON_MESSAGE; 

NO; 

NO; 

II II , 

no!- 

"None"; 

TB; 

CG; 

NONE; 

NONE; 

It tl , 

9 

II 11 , 

9 

II It . 

9 

II II , 

9 

II II . 

/ 

II H . 

9 

II II , 

9 

II fl . 


tl If 

NO 


— SOURCE 

— LIB 

— LISTING 

— STATS 

— OPTIMIZE 

— LIST 

— ASM 

" NUM_INSTRS 
“ OPTIONS_FILE 

— SHOW_OPTIONS 

— VERSION 
" STARTWITH 

— STOPAFTER 

~ DUMP_DIANA_AFTER 

— DUMP_BILL_AFTER 

— TBOPT 


Ada source file 
Ada program library 
Name of listing file 

Requests compilation statistics (yes or no) 

Controls code optimization (10 is all) 

Controls generation of listing 

Requests assembly language listing (yes or no) 

Requests the number of instructions generated (yes or no 
File to read for additional phase options 
Show the options passed to each phase 

The default version of the compiler is determined from t 

The phase to begin the compilation with 

The last phase in the compilation 

Dumps the DIANA of the compilation 

Dumps the BILL of the compilation 

Options passed thru to tree build 











SEMOPT 

GENOPT 

STOOPT 

EXPOPT 

FLOWOPT 

CGOPT 

FLOWCGOPT 

SRC_INTOPT 

LISTOPT 

ALLOPT 

DEBUG 


Options passed thru to semantics 

Options passed thru to gen inst 

Options passed thru to storage 

Options passed thru to expand 

Options passed thru to flow 

Options passed thru to codegen 

Options passed thru to the combined flow-cg 

Options passed thru to the source intersperser 

Options passed thru to the lister 

Options which will be passed to ALL executables 

Controls debugging output of the aiecomp executable 





COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada in^lementation, as described in this 
i=^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker docimientation and not 
to this report. 


B-2 





LINKER OPTIONS 


— AIEBUILD : AIE Program Builder 


type YES_NO_TYPE is (YES, NO); 

type PHASE is (PB_CONV, LD, MKDEMAND); 

procedure AIEBUILD( 


UNIT 

in STRING; 


LIB 

in STRING 

= "ADALIB" 

LISTING 

in STRING 

a II M , 

/ 

EXEC 

in STRING 

a tl II . 

$ 

SHAREABLE 

in YES NO TYPE 

- YES; 

XREF 

in YES NO TYPE 

- NO; 

SYMTAB 

in YES NO TYPE 

- NO; 

SHOW LINKS 

in YES NO TYPE 

- YES; 

SHOW OPTIONS 

in YES NO TYPE 

- NO; 

STATS 

in YES NO TYPE 

- NO; 

DEMAND 

in YES NO TYPE 

- NO; 

MAP 

in YES NO TYPE 

- NO; 

VERSION 

in STRING 

- "None"; 

ARCHIVE LIST 

in STRING 

_ If fl , 

9 

RTS VERSION 

in STRING 

- "4.0"; 

STARTWITH 

in PHASE 

- PB CONV; 

STOPAFTER 

in PHASE 

- LD; 

PBCONVOPT 

in STRING 

a II II . 

9 

LDOPT 

in STRING 

a •• II . 

9 

DEBUG 

)/ 

in YES NO TYPE 

- NO 


-- UNIT 
" LIB 

— LISTING 
~ EXEC 

" SHAREABLE 

— XREF 
" SYMTAB 

— SHOW_LINKS 

— SHOW OPTIONS 
" STATS 

— DEMAND 

— MAP 

— VERSION 

" ARCHIVE_LIST 

— RTS_VERSION 
" STARTWITH 
~ STOPAFTER 

— PBCONVOPT 
" LDOPT 

" DEBUG 


Name of Ada main 
Ada program library 
Name of listing file 
Where to put the resultant executable 
Make the text read-only and shareable by multiple users 
Produce a cross reference listing 

Correspondence between Ada names, link names, and addresses 
List the catalog links of program library 
Show the options passed to each of the builder phases 
Requests building statistics (yes or no) 

Make the executcible demand-paged (12 UTS only) 

Produce a link map 

Version of the Program Builder 

Name of file containing a list of archives 

Version of the RTS to use 

Phase to begin linking with 

Phase to end linking with 

Options passed thru to pb_conv 

Options passed thru to Id 

Controls debugging output of the aiebuild executable 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this i^pendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STAND/which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 15 range -16#0.FFFFFFFFFFFFFF#E63 .. 

16#0.FFFFFFFFFFFFFF#E6 3; 

type SHORT_FLCIAT is digits 6 range -16#0.FFFFFF#E63 .. 16#0.FFFFFFitE63; 
type DURATION is delta 2.0 ** (-14) range -86400.0 .. 86400.0; 


end STANDARD; 


C-1 



Appendix F. IMPLEMENTATION DEPENDENCIES 

This section constitutes Appendix F of the Ada LRM for this 
implementation. Appendix F from the LRM states: 

The Ada language allows for certain machine-dependencies w. a controlled 
manner. .Vo machine-dependent syntax or semantic extensions or 
restrictions are allowed. The only allowed implementation-dependencies 
correspond to implementation-dependent pragmas and attributes, certain 
machine-dependent conventions as mentioned in Chapter IS. and certain 
allowed restrictions on representation clauses. 

The reference manual of each Ada implementation must include an appendix 
[called Appendix F) that describes all implementation-dependent 
characteristics. The Appendix F for a given implementation must list in 
particular: 

1. The form, allowed places, and effect of every implementation- 
dependent pragma. 

2. The name and the type of every implementation-dependent attribute. 

3. The specification of the package SYSTEM (see 13.7). 

4. The list of all restrictions on representation clauses (see 13.1). 

5. The conventions used for any implementation-generated name 
denoting implementation-dependent components [see iS.f). 

6. The interpretation of expressions that appear in address clauses, 
including those for interrupts (see 13.5). 

7 Any restriction on unchecked conversions (see 13.10.2). 

S. Any implementation-dependent characteristics of the input-output 
packages (see 14)- 

In addition, the present section will describe the following topics: 

9. Any implementation-dependent rules foi- tei'mination of tasks 
dependent on library packages (see 9.d:13). 

10. Other implementation dependencies. 

11. Compiler capacity limitations. 



F.l Pragmas 

This section describes the form, allowed places, and effect of every 

implementation-dependent pragma. 

F.1.1 Pragmas LIST, PAGE, PRIORITY, ELABORATE 

Pragmas LIST, PAGE, PRIORITY and ELA.BORATE are supported exactly 

in the form, in the allowed places, and with the effect as described in the LRM. 

F.l.2 Pragma SUPPRESS 

Form: Pragma SUPPRESS ( identifier ) 

where the identifier is that of the check that can be omitted. This is as 
specified in LRM B(14), except that suppression of checks for a particular 
name is not supported. The name clause (0.\'=>name). if given, causes 
the entire pragma to be ignored. 

The suppression of the following run-time checks, which correspond 
to situations in which the exceptions CONSTRAlNT_ERROR. 
STORAGE_ERROR, or PROGR.\M_ERROR may be raised, are 
supported: 

ACCESS_CHECK 

DISCRIMINANT.CHECK 

INDEX_CHECK 

LENGTH_CHECK 

RANGE_CHECK 

STORAGE_CHECK 

EL\BORATION_CHECK 

The checks which correspond to situations in which the exception 
NUMERICJERROR may be raised occur in the hardware and therefore 
pragma SUPPRESS of DIVISIONLCHECK and OXTiRFLOWUCHECK 
are not supported. 

.Allowed Places: .As specified in LRM B(l-4) : SLTPRESS. 

Effect: Permits the compiler not to emit code in the unit being compiled to 
perform various checking operations during program execution. The 
supported checks have the effect of suppressing the specified check iis 
described in the LRM. .A. pragma SL’PPRESS specifvung an unsupported 
check is ignored. 


F.I.2 Pragma SUPPRESS_ALL 

Foiun: Pragma SUPPRESS_,-VLL 



Allowed Places: .As specified in LRM B(14) for pragma SUPPRESS. 

Effect: The implementation-defined pragma SUPPRESS_.ALL has the same 
effect as the specification of a pragma SUPPRESS for each of the 
supported checks. 

F. 1.4 Pragma INLINE 

Form: Pragma INLINE ( SubprogramNameCommaList ) 

Allowed Places: As specified in LRM B(d) : INLINE. 

Effect: If the subprogram body is available, and the subprogram is not recuisive. 

the code is expanded in-line at every call site and is subject to all 
optimizations. 

The stack-frame needed for the elaboration of the inline subprogram will 
be allocated as a temporary in the frame of the containing code. 

Parameters will be passed properly, by value or by reference, as for non- 
inline subprograms. Register-saving and the like will be suppressed. 
Parameters may be stored in the local stack-frame or held in registers, as 
global code generation allows. 

Exception-handlers for the INLINE subprogram will be handled as for 
block-statements. 

Use: This pragma is used either W'hen it is believed that the time required foi- 

a call to the specified routine will in general be excessive (this for 
frequently called subprograms) or when the average expected size of 
expanded code is thought to be comparable to that of a call. 

F.1.5 Pragma INTERFACE 

Form: Pragma INTERFACE ( Ianguage_name. subprogram_name ) 

where the language_name must be an enumeration value of the type 
SYSTEM.Supported_Language_Name (see Package S^'STEM 

below). 

Allowed Place: As specified in LRM B(5) : INTERFACE. 

Effect: Specifies that a subprogram will be provided outside the Ada program 
library and will be callable with a specified calling interface. Neither an 
Ada body nor an Ada body_stub may be provided for a suljprograin for 
which INTERFACE has been specified. 

I'se; Use with a subprogram being provided \'ia another programmiim 
language and for which no body will be given in any Ada program. S"'* 




also the LINI\_NAiME pragma. 


F.1.6 Pragma LINK_NAME 

Form: Pragma LINIv_NA_ME ( subprogram_name, link_name ) 

Allowed Places: .As specified in LRM B(5) for pragma INTERFACE. 

Effect: .Associates with subprogram subprogram_name the name link_name as 
its entry point name. 

Syntax: The value of link_name must be a character string literal. 

Use: To allow Ada programs, with help from INTERFACE pragma, to 

reference non-Ada subprograms. Also allows non-Ada programs to call 
specified Ada subprograms. 

F.1.7 Pragma CONTROLLED 

Form: Pragma CONTROLLED ( AccessType.Name ) 

Allowed Places: .‘\s specified in LRM B(2) : CONTROLLED. 

Effect: Ensures that heap objects are not automatically reclaimed. Since no 
automatic garbage collection is is ever performed, this pragma currently 
has no effect. 

F.l.S Pragma PACK 

Form: Pragma P.ACK ( type_simple_naine ) 

.Allowed Places: .As specified in LRM 13.1(12) 

Effect: Components are allow^ed their minimal number of storage units :is 
provided for by their own representation and/or packing. 

Floating-point components are aligned on storage-unit boundaries, either 
4 bytes or 8 bytes, depending on digits. 

Use: Pragma PACK is used to reduce storage size. This can allow- records 

and arrays, in some cases, to be passed by value instead of by reference. 

Size reduction usually implies an increased cost of accessing components. 
The decrease in storage size may be offset by increase in size of accessing 
code and by slowing of accessing operations. 





F.1.9 Pragmas SYSTEM_NAME, STORAGE_UNIT, 
MEMORY_SIZE, SHARED 

These pragmas are not supported and are ignored. 

F.l.lO Pragma OPTIMIZE 

Pragma OPTIMIZE is ignored; optimization is always enabled. 






F.2 Implementation-dependent Attributes 

This section describes the name and the type of every implementation- 
dependent attribute. 

There are no implementation defined attributes. These are the values for 
certain language-defined, implementation-dependent attributes: 


Type INTEGER. 


INTEGER’SIZE 

= 32 “ bits. 

INTEGER’FIRST 

=-(2**31) 

INTEGER’LAST 

= (2**31-1) 

1 SHORT.FLOAT. 

SHORT_FLOAT’SIZE 

= 32 — bits. 

SHORT_FLOATDIGITS 

= 6 

SHORT.FLOAT’MANTISSA 

= 21 

SHORT.FLOAT’ENfAX 

= 8-4 

SHORT.FLOAT’EPSILON 

= 2.0**(-20) 

SHORT.FLOAT’SMALL 

= 2.0**(-85) 

SHORT.FLOAT’LARGE 

= 2.0**84 

SHORT_FLOAT’MACHINE_ROUNDS 

= false 

SHORT_FLOAT’MACHINE_RADIX 

== 16 

SH0RT_FL0AT’MACHINE_MANTISSA 

= 6 

SHORT_FLOAT'MACHINE_EMAX 

= 63 

SH0RT_FL0AT’MACH1NE_EMIN 

=-64 

SH0RT_FL0AT’MACHINE_0\T;RFL0\VS 

= false 

SH0RT_FL0AT-SAFE_EMAX 

= 252 

SH0RT_FL0AT’S.'^FE_SMALL 

= lG#0.800000#E-63 

SHOR T_FLOAT’SAFE_LARGE 

= 1G#0.FFFFF8#E63 

FLO.AT. 

FLOAT’SIZE 

= 64 — bits. 

FLO.AT'DIGITS 

= 15 

FLOAT’MANTISSA 

= 51 

FLOAT’EMAX 

= 204 

FLO.\T’EPSILON 

= 2.0**(-50) 

FLOAT’SMALL 

= 2.0**(-205) 

FLOAT’LARGE 

= (1.0-2**(-51))*2.0**2' 

FLOAT’MACHINE_ROUNT>S 

= false 

FLOAT’MACHINE_RVDIX 

= IG 

FL0AT’MACH1NE_M\NTISSA 

= 14 

FLOAT’MACH1NE_EMAX 

= 63 

FL0AT’^L‘^CHINE_E^1I^■ 

= -64 

FLO AT’N L-\Cf-riNE_OV'ERFLOU’s 

= false 



FLOAT’SAFE_EMAX 

FLOAT’SAFE.SMALL 

FLOAT’SAFE_L-\RGE 

Type DURATIOiV. 

DURATION’DELTA 
DURATION’FIRST 
DITIATION'LAST 
DURATION ^SMALL 

Type PRIORITY. 

PRIORITY'TIRST 

PRIORITY’LAST 


= 252 

= 16#0.8000(X)0000(X)00#E-63 
= 16#0.FFFFFFFFFFFFE0#E63 


= 2.0’''*(-14) — seconds 

= - 86,400 
= 86,400 
= 2.0*»(-14) 


= -127 
= 127 




F.3 Package SYSTEM 


package SYSTEM is 

type .\DDRES S is private, -- , " /='' defined implicitly 

type NANE is (UTS, MV'S , CMS , PrimeSO, Sperry 1100, MIL_S TD _ 1 7 5 0 A ) , 

SVSTEM_NANE constant NAVE = UTS -- Target dependent 

STORAGE_UNIT constant = 8, 

VEMORY _S1ZE constant = 2*•31, 

In storage units 

-- System-Dependent Named Numbers 

MIN.INT constant = INTEGER'POS(1NTEGER'FIRST), 

MAX.INT constant = INTEGER'POS(INTEGER'LAST), 

MAX_D1GITS constant = 15, 

MAX_MANTISSA constant = 31, 

FI NE_DELTA constant = 2 0**(-3 1). 

TICK constant = 1 OE-3, -- CLOCK function has msec resolution 

-- Other System-Dependent Declarations 
subtype PRIORITY is INTEGER range -127 127 


I mp I erne n t a I 1 o n ■ d e p e nd e n t additions to package SYSTEIM -- 


NT’LL_-ADDRESS constant .ADDRESS, 

• - S am e bit pattern as "null" access value 
-■ This IS the value of '.ADDRESS for named numbers 
- - The ' .ADDRE S S of any object -.vhich t'ccupies storage 
IS NOT equal to this value 

ADDRESS_SIZE constant = 32, 

-- Number of bits in ADDRESS objects, 

= .ADDRES S ' S I ZE but static 

•ADDRES S _ SEGNENT_ S 1 ZE constant = 2**24 

-- Number of storage units in address segment 

type .ADDRES S.OFFSET is new INTEGER, 

-- Used for address arithmetic 
type .ADDRES S_SEG\ENT is new INTEGER. 

-- .Aiwa vs zero on targets with 
unsegmented address space 

-iibtvpe NORMAL I ZED_.ADDRESS_OFFSET is 

.ADDRESS .OFFSET range 0 .ADDREo S _ SECAENT.S I ZE - 1 

■■ Range of address offsets returned by OFF SET _OF 

function "" f 3 d d r ADDRESS ;■ f f s e t .ADDRESS .OFFSET > return ADDRESS 
function "-"■ f - • .ADDRESS .OFFSET .i d d r .ADDRESS* r e t u r vDDRESS 
- - 1 EFFECTS 





--I Add an offset to an address May cross segment boundaries on 
--| targets where objects may span segments On other targets 

- - 1 CONSTRA1NT_ERROR will be raised when 

--I OFFSET_OF( add r ) + offset not in NOR.\L-\L I ZED_.ADDRES S _OFFSET 

function "-"(left, right .ADDRESS ) return .ADDRESS .OFFSET, 

- - I EFFECTS 

■ - I 

--| Subtract two addresses returning an offset This 
--I offset may exceed the segment size on targets where 
--| objects may span segments On other targets 
--I CONSTR.41NT_ERROR will be raised if S EGMENT.OF ( 1 e f t ) ,= 

- - 1 SEGMENT_OF( right) 

function "-"(addr ADDRESS offset ADDRES S.OFFSET) return 

.ADDRESS . 

- - I EFFECTS 

--I Subtract an offset fr om an address returning an address 
-- I May cross segment boundaries on targets where 
--1 objects may span segments 

- - I On other targets CONSTRAI NT.ERROR will be raised when 

--I OFFSET_OF( add r ) - offset not in .NORM.\L 1 ZED..ADDRESS .OFFSET 

function OFFSET.OF I addr .ADDRESS) return NOR\i\L I ZED_.ADDRES S.OFFSET 
-- Extract offset part of .ADDRESS 
•• .Always in range 0 seg.size • 1 

function SEGME.NT.OF (addr .\DDRESS) return .ADDRESS.SEGME.NT 


function MAI<CE_.ADDRESS 
■ - I EFFECTS 


(of feet 
segment 


.ADDRES S.OFFSET 
.ADDRES S.SEGNENT 


0 ) return .ADDRES 


Builds an address given an offset and a segment 
Offsets may be > segment size on targets where objects mav 
span segments, in which case it is equivalent to 
' MAINE ..ADDRESS (0 segment) - offset" 

On other targets. CONSTRA1NT.ERROR will be raised when 
offset not in NOR.\UL I ZED..ADDRES S.OFFSET 


type Sup p orte d _Language.Name is ( -- Target dependent 

-■ The following are "foreign" languages 

assembler 

•A. 1 E_.\SSEMBLER -- NOT a "foreign" language - uses .\IE RTS 

) , 

- - .Mo St 'least accurate built - in integer and float types 


subtvpe LONGEST. INTEGER is STA.ND.ARD INTEGER 
subtype S HORTEST. 1 NTEGER is ST.-V.\DARD INTEGER 


subtvpe LONGEST.FLOAT is ST.ANDARD FLOAT 
subtvpe SHORTEST.FLOAT is STA.NDARD SHORT.FLOAT 


r I V a t e 

‘ V r *• ADDIiES S s access 1 NTEGER 

No ’ “ The i e E I g n a t e : ‘ v p e here 1 .NTEGER i 







irrelevant ADDRESS is made an access type 
simply to guarantee it has the same size as 
access values, which are single addresses 
Allocators of type ADDRES S are NOT mean in g f u 

NULL _.ADDRES S constant .ADDRES S = n u I 1 , 

end SVSTE.M 


F-ILL 




F.4 Representation Clauses 

This section describes the list of all restrictions on representation clauses. 

"NOTE: An implementation may limit its acceptance of representation clauses 
to those that can be handled simply by the underlying hardware.... If a program 
contains a representation clause that is not accepted [by the compilerj, then the 
program is illegal." (LRM 13.1(10)). 

Those restrictions which are defined by the LRM are not listed. A description 
of the effect of the representation clause is also included where appropriate. 

a. Length clauses: 


• Size specification; T’SIZE. 

The size specification may be applied to a type T or first-named subtype 
T which is an access type, a scalar type, an array type or a record type. 

.\I-00536/07 has alterered the meaning of a size specification. In 
particular, the statement from the LRM 13.2.a that the expression in 
the length clause specifies an upper bound for the number of bits to be 
allocated to objects of the type is incorrect. Instead, the e.xpression 
specifies the exact size for the typo. Objects of the type may be larger 
than the specified size for padding. Note that the specified size is not 
used when the type is used as a component of a record type and a 
component clause specifying a different size is given. 

If the length clause can not be satisfied by the type, an error message 
will be generated. 

The supported values of the size expression are explained for the types 
as follows. If the value of the size expression is not supported, an error 
message will be generated. 

access type; the only size supported is 32. 

integer, fixed point, or enumeration type: minimum size supported is 1. 

the maximum size that is supported is 32. the size of the largest 
predefined integer type. Biased representation is not supported. 

floating point type: the sizes supported are 32 and 64. Note that the size 
must satisfy the DIGITS requirement. No support is provided 
for shortened mantissa and/or exponent lengths. 

record type: if the size of the unpacked type is greaiei- than the specified 
size of the length clause, an implicit pi'agma pack will be 
assumed on the record type. If the size of the implicit [)ragnin 
packed recoixl type is still greater than the specified Azp e)! :!ie 





length clause, an error will be generated. (See also Pragma 
Pack F.1.8 and Record Representation Clauses F.4.c). 

array type: if the size of the unpacked array type is greater than the size 
clause expression, an implicit pragma pack will be assumed on 
the array type. If the size of an implicit pragma packed array 
type is still greater than the size expression clause, an error will 
be generated. 

• Specification of collection size: T’STORAGE_SIZE. 

The effect of the specification of collection size is that a contiguous area 
of the required size will be allocated for the collection. If an attempt to 
allocate an object within the collection requires more space than 
currently exists in the collection, STORAGE_ERROR will be raised. 
Note that this space includes the header information. 

• Specification of storage for a task activation: T’STOR.\GE_SIZE. 

The value specified by the length clause will be the total size of the 
stacks allocated for the task, rounded up to a multiple of 8192 (two 
'pages'or'stack chunksj. The primary and secondary stacks will each be 
allocated one half of the (rounded-up) size. 

• Specification of small for a fixed point type : T’SMALL 

The value of T’SXLALL is restricted to composite powers of 2 and o (e.g. 
2, 5, 10). 

b. Enumeration Representation Clauses; 

Values must be in the range of MIN_INT .. MAX _INT. 

c. Record-representation-clause: 

An alignment clause forces each record of the given type to be allocated at a 
starting address that is a multiple of the value of the given expression. 
.Allowed alignment values are 1 (SU aligned), 2 (half-w'ord aligned) and 4 
(full-word aligned). 

The range of bits specified has the following restrictions; if the starting bit is 
0. there is no limit on the value for the ending bit; if the starting bit is 
greater than 0. then the ending bit must be less than or equal to .31. 

Record components, including those generated implicitly by the compiler, 
whose locations are not given by the representation-clause, are laid out by 
the compiler following all the components whose locations ai-e given l)>' the 
representation-clause. Such 'Components of the invariant pai't of the i-ecoi-o 
are allocated to follow the user-specified components of the invariant ; ar’. 

___F-12 



and such components in any given variant part are allocated to follow the 
user-specified components of that variant part. 

The actual size of the record object (including its use as a component of a 
record or array type) will always be a multiple of storage units (e.g 8,16.24. 
etc. bits) with padding added to the end of the record, if necessary. User- 
specified ranges must contain at least the minimal number of bits required 
to represent a (bit-packed) object of the corresponding type: e.g. to represent 
an integer type with a range of 0..15. at least 4 bits must be specified in the 
record representation specification range. 

d. .A-ddress clauses: 

.■Address clauses are allowed for objects (variable or constant) and for 
subprograms to which a pragma INTERFACE applies. Address clauses are 
not allowed for packages or tasks. The interpretation of the value of an 
address clause is described in F.6. 


ErlA 



F.5 Implementation-dependent Components 

This section describes the conventions used for any implementation-generated 
name denoting implementation-dependent ''omponents. 

There are no implementation-generated names denoting implementation- 
dependent (record) components, although there are. indeed, such components. 
Henc'^. there is no convention (or possibility) of naming them and. therefore, no 
way to offer a representation clause for such components. 

.NOTE; Records containing dynamic-sized components will contain (generally) 
unnamed offset components which will "point" to the dynamic-sized components 
stored later in the record. There is no way to specify the representation of such 
components. 


F-11 



F.6 Address Clauses 

This section describes the interpretation of expressions that appear in address 
clauses, including those for interrupts. 

The address specified by the simple_expression of an address clause. 

for simple_name use at simple_expression : 

may be a call on SYSTEM.M:\I<E_ADDRESS, for example, 

for AhC use at SYSTEM.M4KE_\DDRESS{ 16#FF# ) ; 

V'^alues in the range 0..System.Memory_Size-l will be interpreted as addresses as 
written. 




F.7 Unchecked Conversions 

This section describes any restrictions on unchecked conversions. 

The source and target must both be of a staticly sized type (other than a 
discriminated record type) and both types must have the same static size. 


F-iG 



F.8 Input-Output 

This section describes implementation-dependent characteristics of the input- 
output packages. 

(a) Declaration of type Direct_IO.Count? (l4.2.5j 

O..Integer’last: 

(b) Effect of input/output for access types? 

Not meaningful if read by different program invocations 

(c) Disposition of unclosed IN_FILE files at program termination? [14.1(7)] 

Files are closed. 

(d) Disposition of unclosed OUT_FILE files at program termination? [14.1(7)] 

Files are closed. 

(e) Disposition of unclosed INOUT_FILE files at program termination? [14.1(7)] 

Files are closed. 

(f) Form of, and restrictions on, file names? [14.1(1)] 

UTS filenames 

(g) Possible uses of FORM parameter in I/O subprograms? [14.1(1)] 

The image of an integer specifying the UTS file protection on 
CREATE. 

(h) Where are I/O exceptions raised beyond what is described in Chapter 14? 
(14,1(11)1 

.None raised. 

(i) Are alternate specifications (such as abbreviations) allowed for file names? If 
so. what is the form of these alternatives? (14.2.1(21)] 

No. 

(j) When is DAT.\_ERROR not raised for sequential or direct input of an 
inappropriate ELEMENT_T'\'TE? (14.2.2(4), 14.2.4(4)] 

When it can be assigned without CONSTR..AINT_ERROR to a 
variable of ELEMENT.T^TE. 

(k) What are the standard input and standard output files? (14..3(5)] 

UTS standard input and output 

(l) What are the forms of line terminators and page terminators? (14.3(7)] 

Line terminator is .ASCII.LF (line feed); 
page terminator is .ASCII.FF (form feed) 

(m) Value of Text_IO.Count’last? (14.3(8)] 

" integer'last 

(n) Value of TextJO.Field'last’ (14.3.7(2)] 

integer'last 


r-17 




(o) Effect of instantiating ENUMERATION_IO for an integer type? [14.3.9(15)] 

The instantiated Put will work properly, but the instantiated Get 
will raise DataJError 

(p) Restrictions on types that can be instantiated for input/output? 

Neither direct I/O nor sequential I/O can be Instantiated for an 
unconstrained array type or for an unconstrained record type 
lacking default values for its discriminants. 

(q) Specification of package Low_Level_IO? [14.6] 

Low_LeveLIO is not provided. 


F-IS 





F.9 Tasking 

This section describes implementation-dependent characteristics of the tasking 
run-time packages. 

Even though a main program completes and terminates (its dependent tasks, if 
any, having terminated), the elaboration of the program as a whole continues 
until each task dependent upon a library unit package has either terminated or 
reached an open terminate alternative. See LRM 9.4(13). 





F.IO Other Matters 


This section describes other implementation-dependent characteristics of the 
system. 


a. Package Machine_Code 

Will not be provided. 

b. Order of compilation of generic bodies and subunits (LRM 10.3:9): 

Body and subunits of generic must be in the same compilation as 
the specification if instantiations precede them (see Al-00257/02). 


F-20 




f 


F.ll Compiler Limitations 

(a) Maximum length of source line? 

255 characters. 

(b) Maximum number of "use" scopes? 

Limit is 50. set arbitrarily by SENLA.NTICS as maximum number of 
distinct packages actively "used." 

(c) Maximum length of identifier? 

255 characters. 

(d) Maximum number of nested loops? 

24 nested loops. 


F-21 




