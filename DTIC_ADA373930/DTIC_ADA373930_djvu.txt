NAVAL POSTGRADUATE SCHOOL 
Monterey, California 



THESIS 


DAMAGE CONTROL AND LOG TAKING JAVA 
APPLICATIONS FOR SHIPBOARD WIRELESS LANs 


Thesis Advisor: 
Second Reader: 


by 

Hanceri Sayat 
December 1999 


Xiaoping Yun 
C. Thomas Wu 


Approved for public release; distribution is unlimited. 


DTIC QUALITY QV8PB0YSD 4 


20000302 090 





REPORT DOCUMENTATION PAGE Form Approved 

_ OMB No . 0704-0188 

Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instruction, 
searching existing data sources, gathering and maintaining the data needed, and completing and reviewing the collection of information. Send 
comments regarding this burden estimate or any other aspect of this collection of information, including suggestions for reducing this burden, to 
Washington headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington, VA 
22202-4302, and to the Office of Management and Budget, Paperwork Reduction Project (0704-0188) Washington DC 20503. 

1. AGENCY USE ONLY (Leave blank) 2. REPORT DATE 3. REPORT TYPE AND DATES COVERED 

December 1999 Master’s Thesis 

4. TITLE AND SUBTITLE 5. FUNDING NUMBERS 

DAMAGE CONTROL AND LOG TAKING JAVA APPLICATIONS FOR SHIPBOARD 

WIRELESS LANs _ 

6. AUTHOR(S) 

Sayat, Hanceri 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Naval Postgraduate School 

Monterey, CA 93943-5000 

8. PERFORMING 

ORGANIZATION REPORT 

NUMBER 

9. SPONSORING / MONITORING AGENCY NAME(S) AND ADDRESSES) 

10. SPONSORING/ 

MONITORING 

AGENCY REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

The views expressed in this thesis are those of the author and do not reflect the official policy or position of the Department of 
Defense or the U.S. Government. 

12a. DISTRIBUTION / AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 


13. ABSTRACT 

Damage control communications and watchstander log taking practices need to be improved for 
onboard submarines and ships. Currently, damage control rely on a slow, error prone process involving 
sound powered telephone talkers and grease pencil annotated white board. Also log taking practice suffers 
from similar problems. Logs are taken on paper forms, corrected daily, and filed in cabinets. Wireless 
network and mobile computing devices can be a solution to improve the efficiency of these practices along 
with some others. 

In this thesis, a distributed Java prototype software is developed to utilize the benefit of an onboard 
Intranet utilizing wireless LANs and pen-based handheld computers. For both practice areas, data could be 
entered into a handheld computer and then wirelessly transmitted to a database server. Those data can be 
used by powerful main platforms and different supervisors can reach it any time in parallel. An applet and a 
servlet program modules are created to provide small, user friendly, platform independent electronic forms. 
Since handheld computers have some limitations like screen dimensions, computing power, and Java 
Virtual Machine, features of these software approaches are tested on a few different handheld computers to 
find the best software approach and computer product. 



17. SECURITY CLASSIFICATION 
OF REPORT 

Unclassified 


18. SECURITY CLASSIFICATION OF 
THIS PAGE 

Unclassified 


19. SECURITY CLASSIFI-CATION 
OF ABSTRACT 

Unclassified 


20. LIMITATION 
OF ABSTRACT 

UL 


NSN 7540-01-280-5500 


Standard Form 298(Rev. 2-89) 
Prescribed by ANSI Std. 239-18 


1 















THIS PAGE INTENTIONALLY LEFT BLANK 


u 



Approved for public release; distribution is unlimited 


DAMAGE CONTROL AND LOG TAKING JAVA APPLICATIONS FOR 

SHIPBOARD WIRELESS LANs 

Hanceri Sayat 

First Lieutenant, Turkish Army 
B.S., Turkish Military Academy, 1992 

Submitted in partial fulfillment of the 
requirements for the degree of 


MASTER OF SCIENCE IN ELECTRICAL ENGINEERING 


from the 


NAVAL POSTGRADUATE SCHOOL 
December 1999 



Approved by: 




Department of Electrical and 
Computer Engineering 


iii 



THIS PAGE INTENTIONALLY LEFT BLANK 


IV 



ABSTRACT. 


Damage control communications and watchstander log taking practices need to be 
improved for onboard submarines and ships. Currently, damage control rely on a slow, 
error prone process involving sound powered telephone talkers and grease pencil 
annotated white board. Also log taking practice suffers from similar problems. Logs are 
taken on paper forms, corrected daily, and filed in cabinets. Wireless network and 
mobile computing devices can be a solution to improve the efficiency of these practices 
along with some others. 

In this thesis, a distributed Java prototype software is developed to utilize the 
benefit of an onboard Intranet utilizing wireless LANs and pen-based handheld 
computers. For both practice areas, data could be entered into a handheld computer and 
then wirelessly transmitted to a database server. Those data can be used by powerful 
main platforms and different supervisors can reach it any time in parallel. An applet and 
a servlet program modules are created to provide small, user friendly, platform 
independent electronic forms. Since small computers have some limitations like screen 
dimensions, computing power, and Java Virtual Machine, features of these software 
approaches are tested on a few different handheld computers to find the best software 
approach and computer product. 



THIS PAGE INTENTIONALLY LEFT BLANK 


VI 



TABLE OF CONTENTS 


I. INTRODUCTION. 1 

A. MOTIVATION. 1 

B. OBJECTIVES. 2 

C. ORGANIZATION OF THE STUDY. 3 

H. BACKGROUND ON WIRELESS LANs... 5 

A. GENERAL. 5 

B. LAN TECHNOLOGY. 6 

C. WIRELESS LAN.12 

1. Application Areas.13 

2. Wireless LAN vs. Conventional LAN.14 

3. Advantages of WLAN.15 

a. Mobility.15 

b. Installation Speed and Simplicity. 15 

c. Installation Flexibility. 15 

d. Reduced Cost-of-Ownership.15 

e. Scalibility. 15 

4. Disvantages of WLAN.16 

a. Higher Initial Cost.16 

b. Slow Throughput Rate. 16 

c. Higher Interface.16 

d. Security.17 

vii 
























e. Industry Standard.•..17 

m. JAVA ARCHITECRURE .19 

A. GENERAL. 19 

1. Simple.22 

2. Obj ect-Oriented., .22 

3. Platform Independent... 23 

4. Secure.23 

5. High Performance.23 

6. Multi-Threaded. 24 

7. Distributed. 24 

B. APPLETS. 25 

1. Taking Advantage of the Applet API..25 

2. Applet Limitations. 27 

3. Applet Security.27 

4. Security Restrictions.28 

C. SERVLETS.29 

1. Taking Advantage of the Servlet API.32 

2. The advantages of using servlets.32 

a. Platform Independent.32 

b. High Performance. 33 

c. Extensibility. 33 

d. Easier Development.33 

e. Better Error Recovery.34 

viii 


























f. Portability.34 

g. Modularity.34 

3. Servlet Futures.35 

D. A DETAILED CONTRAST BETWEEN A JAVA APPLET AND 

A JAVA SERVLET.35 

IV. COMMERCIAL TECHNOLOGIES FOR SHIPNET.37 

A. GENERAL.37 

B. WLAN PRODUCTS.37 

1. Lucent WaveLAN.37 

2. Proxim RangeLAN2. 42 

C. PORTABLE COMPUTER PRODUCTS...44 

1. Amity VP.45 

2. Cassiopedia PA-2400.47 

3. HPW-600ET.49 

4. Via II Wearable Computer.51 

D. SHIPBOARD TESTING.53 

1. Test One. 53 

2. Test Two.54 

3. Test Three.55 

4. Test Four.56 

V. PROTOTYPE SHIPNET SOFTWARE APPLICATIONS.57 

A. GENERAL.57 

B. GRAPHICAL USER INTERFACE (GUI) POLICIES.59 

ix 
























C. DAMAGE CONTROL CLIENT APPLET.60 

D. DAMAGE CONTROL CLIENT SERVLET.64 

E. LOG TAKING CLIENT APPLET.68 

F. LOG TAKING CLIENT SERVLET.71 

VI. CONCLUSIOS AND RECOMMENDATIONS.75 

A. SUMMARY.75 

B. FURTHER RESEARCH.76 

C. CONCLUSION.78 

APPENDIX A. DAMAGE CONTROL CLIENT APPLET CODE.79 

APPENDIX B. UTILITY CLASSES.107 

APPENDIX C. DAMAGE CONTROL CLIENT SERVLET CODE...113 

APPENDIX D. LOG TAKING CLIENT APPLET CODE.131 

APPENDIX E. LOG TAKING CLIENT SERVLET CODE.179 

LIST OF REFERENCES.209 

INITIAL DISTRIBUTION LIST. 211 

















LIST OF FIGURES 


1. Typical LAN Structure... 7 

2. OSI Reference Model.9 

3. Infrastructure WLAN.13 

4. Adhoc Networking.14 

5. The Java Architecture.19 

6. The Java Stack..20 

7. A server can support more than one servlet.29 

8. Application Interaction.31 

9. WaveLAN IEEE PC Card - WEP (Silver).39 

10. Lucent WavePoint II Access Point.40 

11. Lucent WavePoint II Range Extender.41 

12. WaveLAN IEEE PC Card - WEP (Bronze).42 

13. RangeLAN2 7510/20 Ethernet Access Point.43 

14. Rangelan2 Dipole and Flexible Snap-On Antenna.44 

15. Amity VP Portable Computer.46 

16. Cassiopedia PA-2400.48 

17. Hitachi's HPW-600ET Tablet.50 

18. VIA II Wearable Computer (Flex).52 

19. Test One Result.54 

20. Test Two Result.55 

21. Test Three Result.56 


XI 
























62 


22. DC Client (Fire) Applet Scene Page 

23. DC Client (Fire) Applet Central Page.62 

24. Dc Client (Fire) Wacthstander Page.63 

25. DC Client (Fire) Staging Page.63 

26. DC Client (Fire) Atmosphere Control Page. 64 

27. DC Client Servlet Menu Page.65 

28. DC Client Servlet Casualty Scene Page.67 

29. DC Client Servlet Feedback Page.67 

30. Log Taking Client Applet.69 

31. Log Taking Detectors Page.70 

32. Log Taking Atmosphere Control Page.70 

33. Log Taking Menu Page.72 

34. Log Taking AEF Log Page.72 

35. Log Taking Retrieved Data Page...73 

36. Log Taking Feedback Page.73 


xii 


















LIST OF TABLES 


1. Wireless vs. Wired LAN 





THIS PAGE INTENTIONALLY LEFT BLANK 


XIV 



LIST OF ABBREVIATIONS, ACRONYMS, AND SYMBOLS 


AEF 

Auxiliary Electrician Forward 

AP 

Access Point 

API 

Application Programmer Interface 

BPSK 

Biphase Shift Keying 

CDMA 

Code Division Multiple Access 

CGI 

Common Gateway Interface 

CIC 

Communication Intelligence Corp. 

COTS 

Commercial Off The Shelf 

CPU 

Central Processing Unit 

CSMA/CA 

Carrier Sense Multiple Access with Collision Avoidance 

DC 

Damage Control 

DCC 

Damage Control Central 

DFIR 

Diffused Infra-Red 

DSSS 

Direct Sequence Spread Spectrum 

ETSI 

European Telecommunications Standards Institute 

FCC 

Federal Communication Commissions 

FDDI 

Fiber Distributed Data Interface 

FDMA 

Frequency Division Multiple Access 

FHSS 

Frequency Hopped Spread Spectrum 

FTP 

File Transfer Protocol 

GFSK 

Gaussuian Frequency Shift Keying 


XV 



GUI 


HTML 

HTTP 

HRS 

ISA 

ISM 

IEEE 

JDBC 

JDK 

JIT 

JVM 

LAN 

LCD 

MAC 

NAVSEA 

ODBC 

OS 

OSI 

PC 

PCMCIA 

PDA 

QPSK 

RMI 


Graphical User Interface 

Hypertext Markup Language 

Hyper Text Transport Protocol 

Handwriter Recognition System 

Industry Standard Architecture 

Industrial, Scientific, and Medical 

Institute of Electrical and Electronics Engineers 

Java Database Connectivity 

Java Development Kit 

Just-In-Time compiler 

Java Virtual Machine 

Local Area Network 

Liquid Crystal Display 

Media Access Control 

Naval Sea Systems Command 

Open Database Connectivity 

Operating System 

Open Systems Interconnection 

Personnel Computers 

Personal Computer Memory Card International Association 
Personal Digital Assistant 
Quadrature Shift Keying 
Remote Method Invocation 


XVI 



RF 


SQL 

SWLAN 

TCP/IP 

TDMA 

URL 

USB 

VGA 

WAN 

WLAN 

WLIF 


Radio Frequency 

Structured Query Language 

Submarine Wireless LAN 

Transmission Control Protocol /Internet Protocol 

Time Division Multiple Access 

Universal Resource Identifiers 

Universal Serial Bus 

Video Graphics Array 

Wide Area Network 

Wireless Local Area Network 

Wireless LAN Interoperability Forum 


WWW 


World Wide Web 



THIS PAGE INTENTIONALLY LEFT BLANK 


xviii 



THESIS DISCLAIMER 


The reader is cautioned that the computer programs developed on this research 
may not have been exercised for all case of interest. While every effort has been made, 
within the time available, to ensure that the programs are free of computational and logic 
errors, they cannot be considered validated. Any application of these programs without 
additional verification is at the risk of the user. 

Java is a registered trademark of Sun Microsystems. 


XIX 



THIS PAGE INTENTIONALLY LEFT BLANK 


XX 



ACKNOWLEDGEMENT 


I would like to thank Professor Xiaoping Yun for his guidance and assistance 
through the development and completion of this project. He initiated my interest in the 
topic of pen based portable computers and provided extensive insight and direction in 
completing this thesis. I am indebted to Professor C. Thomas Wu’s assistance in proofing 
my thesis. 

I would also like to thank the contributions of the Wireless Network Research 
Group at NPS. This includes USN Lieutenants Mark Matthews, Kurt Rothenhaus, and 
William Wilkins. Lieutenant Rothenhaus provided an initial implementation to the pen 
based portable processor software applications on a wireless LAN. This helped me a lot 
to begin my project more smoothly, thanks buddy. 

Finally, I need to thank my family for their support from thousands of miles away 
and my wife , Didem, and my son, Yavuz Bahadir. They each made large personal 
sacrifices during my work on this thesis. Without their love and support I couldn’t have 
completed this project. I love you each very much. 


XXI 


THIS PAGE INTENTIONALLY LEFT BLANK 


xxn 



I. INTRODUCTION 


A. MOTIVATION 

Although wireless networking has rapidly grown in recent years, wireless 
communications and mobile computing are still in an evolving stage. Every day more 
and more applications are found that can benefit from wireless networks. These wide- 
range applications vary from home and small office uses to military uses. Wireless 
communication is the most important technology behind mobile computing. 

Mobile computing will play an important role for the future of military forces. 
Every level of the combat readiness and effectiveness depends more on electronic 
systems and uses more computing power than ever before. Parallel to this, more 
compact, powerful, reliable and faster systems are needed. The main purpose is to 
communicate the information faster and more efficiently. 

To provide the users with flexible and robust co mmun ication infrastructure to 
transmit their messages, highly portable battery-powered computers with wireless 
communication capability are an obvious solution. The pace of technological 
advancement in microcomputers is expanding very quickly. Palmtop and wearable 
mobile computers are becoming cheap, powerful and dependable. So we need to take a 
serious look at adapting off-the-shelf commercial microcomputers and platform 
independent software solutions. 

Since ships have limited personnel assets, it is important to increase the 
productivity of every crewmember aboard. The NAVSEA New Attack Submarine 
(NSSN) program initially identified two areas, damage control (DC) communications and 


1 



watchstander logs, for productivity improvement by deploying wireless local area 
networks (WLANs) onboard submarines. Accurate, timely communications between the 
casualty scene, different stations around the ship, and Damage Control Central (DCC) 
have always been of the utmost importance when combating shipboard casualties. 
Current damage control communications practices inboard submarines rely on a slow, 
error prone process involving sound powered telephone talkers and a grease pencil 
annotated white board. The transcription of the status information to the white board is 
limited to the rate and accuracy of a single person receiving and writing the voice 
communications and is only available to those personnel in view of the white board. 
There is a great need to improve DC communications. The current practice of 
watchstander log taking has similar needs for improvement. Logs on today’s submarines 
are taken on paper forms, collected daily, and stapled with other watchstander logs in a 
large bundle. This bundle is reviewed sequentially by responsible supervisors and filed 
in cabinets. It is usually never looked at again. The biggest problem of this procedure is 
that it discourages trend analysis, if a trend analysis is to be performed, data must be 
either hand plotted or entered into a computer [Ref: 1]. 

B. OBJECTIVES 

This thesis investigates mobile computing and wireless networking in three ways. 
First, it provides a study of wireless LANs that have potential of providing transparent, 
reliable communication for Navy ships’ or submarines’ damage control and log taking 
systems. It defines the requirements that should be met and it determines the technology 



alternatives, products and configurations providing a solution to the required wireless 
LAN. The study focuses on mobile computers and communication devices. Mobile 
computers and wireless LANs can assist in the integration of information. This may not 
only be considered as tools for a command and control hierarchy, but rather as a means of 
helping each personnel accomplish their duties. 

Second, applet and servlet software modules are created for damage control and 
log taking systems. These software approaches provide a good interaction mechanism 
between a user and a central database by using distributed Java software. It also 
demonstrates the easy and effective use of pen-based miniature computers with Java 
applications over wireless network for Shipnet. 

This study then creates a test environment with this prototype software on 
Shipnet. The goals are to see the performance of wearable and hand held computers, 
speed and robustness of those software approaches and effectiveness of user interface. 


C. ORGANIZATION OF THE STUDY 

Chapter II offers the reader a brief introduction to wireless local area networks. 
Chapter HI provides an overview of Java applets and servlets. It also discusses 
the pros and cons of both applications in terms of distributed computing, and server and 
client side approaches. 

Chapter IV focuses on the Commercial-off-the-shelf products used in the 
Submarine Wireless LAN (SWLAN). 


3 


In Chapter V, the Java applet and servlet programs written for damage control 
(DC) and watchstander logs will be presented in detail. A comparison of applet and 
servlet approaches is carried out. 

Finally, Chapter VI summarizes this thesis research and offers a road map for 
future researches. 


4 



n. BACKGROUND ON WIRELESS LANs 


A. GENERAL 

Over the past decade, the field of wireless communications has experienced an 
unprecedented growth. This growth will be more visible in the next decade. The. 
deployment of wireless networks has already begun to change the concept of 
communication and information processing for business, military, and private 
applications. Currently, there is an enormous shift in the computer industry toward 
integration of high performance distributed computing and portable devices in a mobile 
computing environment. Furthermore, military agencies are developing personal wireless 
devices for use in tactical environments, as well as portable devices providing extensive 
computational power for sailors and soldiers. These factors lead to a conclusion that 
communication shifts dramatically from wired based systems to an era of networks 
largely based on wireless techniques. 

The new concept of wireless LANs is a direct result of an increasing demand for 
portable information sharing in a wireless networking environment from computer users. 
WLAN offers the user a degree of mobility never thought possible in a conventional 
LAN environment. Although reliable links of high data-rates can be achieved using 
wired technologies, such as coaxial cable and optical fiber, WLAN has the unique 
advantage in providing a simple and cost effective solution when it comes to 
reconfiguration, maintain and upgrade, which is very difficult and costly for conventional 
LANs [Ref. 2]. 


5 



Currently, spread spectrum radio technique is the most widely used transmission 
technique for WLANs. It was initially developed by the military to avoid jamming and 
eavesdropping of the signal. When used in wireless LAN applications this is done by 
spreading the signal over a range of frequencies, which consists of the Industrial, 
Scientific, and Medical (ISM) bands of the electromagnetic spectrum. This band’s 
frequencies range between 902-928 MHz and 2.4 - 2.484 GHz, which do not require 
Federal Communication Commissions (FCC) license. In the Shipnet project, the 
bandwidth and data transfer rates are sufficient for the application’s characteristic and 
work load. Although current rates are satisfactory for our goal, better performances may 
be needed for future application like multimedia applications, online training, etc. For 
further improvements, manufacturers are still trying to come up with innovative solutions 
for interfacing between wired and wireless systems. So the band is moving towards the 
millimeter wave frequencies (mm-wave band) to get better achievable data rates and to 
avoid the congested RF band [Ref. 3]. 


B. LAN TECHNOLOGY 

A LAN is a network of interconnected workstations sharing the resources of a 
single processor or server within a relatively small geographic area. Figure 1. Typically, 
this might be within the area of a small office building. Usually, the server has 
applications and data storage that are shared in common by multiple workstation users. A 
local area network may serve as few as four or five users or, in the case of Fiber 
Distributed Data Interface (FDDI), may serve several thousand. 


6 




Figure 1. Typical LAN Structure 


There are many different types of LANs. For instance, Ethernet is the most 
common one. Most Apple Macintosh networks are based on Apple Talk network system, 
which is built into Macintosh computers. 

The following characteristics differentiate one LAN from another: 

Topology : The geometric arrangement of devices on the network. For example, 
devices can be arranged in a ring or in a straight line. 

Protocols: The rules and encoding specifications for sending data. The protocols 
also determine whether the network uses a peer-to-peer or client/server architecture. 

Media : Devices can be connected by twisted-pair wire, coaxial cables, or fiber 
optic cables. Although today, twisted pair continues to dominate much of the LANs, the 
shift to fiber optic cables for specialized high-speed applications is noticeable. 

The typical LANs provide a logical and efficient choice for most networks where 
the users operate from a fixed desk in a standard office environment. LANs are typically 
identified by the following properties: 


7 



1. Multiple systems attached to shared medium, 

2. High total bandwidth, 

3. Low delay, 

4 Low error rate, 

5 Broadcast/Multicast capability, 

6 Limited geography (1-2 km), 

7 Limited number of stations , 

8 Peer relationship between stations, 

9 Confined to private property. 

The most common forms of LAN are those described by the Institute of Electrical 
and Electronics Engineers (IEEE) standards. This standard describes operation up to and 
including Open Systems Interconnection (OSI) level 2. Individuals may build what they 
like on top of these basic protocols. A common set of higher level protocols is called 
Transmission Control Protocol/Intemet Protocol (TCP/IP) which provides OSI levels 3 
and 4 functionality [Ref. 4]. On top of them there are some other protocol layers which 
are shown in Figure 2. At the lowest level the IEEE 802 specifications are split four 
ways corresponding to three different but common LAN structures. 

They are: 

1. 802.3 : This is the well-known Ethernet. All stations are connected to a 

common transmission medium. The medium is organized as a bus, possibly with 
branches. Each station transmits whenever it wishes. This may result in two stations 



transmitting simultaneously. The protocol describes how such collisions are detected and 
resolved. 


Application Layer 


Presentation Layer 
Session Layer 


Transport Layer 
Network Layer 


LLC Sublayer 
Data Link _ 

Layer MAC Sublayer 

Physical Layer 


Figure 2. OSI Reference Model 


2. 802.4 : This is a token bus system. The medium is organized in the same 

way as for IEEE 802.3 but the stations are organized as a logical ring. Only a station 

possessing "the token" may actually transmit. There are procedures defined in the 

protocol for the addition of a station, deletion of a station and error detection and 

recovery. 

♦ 

3. 802.5 : This is a true ring. The medium is organized as a physical ring 
with access control protocols similar to IEEE 802.4. Rings may also be organized as 
slotted rings (Cambridge Ring) and register insertion rings (IBM Series/1), neither of 
these are associated with IEEE 802.5. 


9 



4. 802.11 : The IEEE 802.11 provides a standard for wireless connectivity 

for fixed, portable, and moving stations within a local area. It is similar to the 802.3 
standard for Ethernet wired LANs. This standard allows interoperability between 
different vendors’equipment. With 802.11, customers can mix and match their equipment 
for an optimal product mix to support all of their requirements. The mission and the 
scope for this standard are to develop a MAC and physical specification for radio and for 
infrared. 

The MAC under 802.11 is composed of several functional blocks. These include 
mechanisms to provide control on a variety of physical layers. The functions within the 
MAC are independent of data rates or physical characteristics. 

The fundamental access method of the 802.11 MAC is known as Carrier Sense 
Multiple Access with collision avoidance (CSMA/CA). CSMA/CA works by a "listen 
before talk scheme." This means that a station wishing to transmit must first check the 
radio channel to determine if another station is transmitting. If the medium is not busy, 
the transmission may proceed. The CSMA/CA scheme implements a minimum time gap 
between frames for a given user. Once a frame has been sent from a given transmitting 
station, that station must wait until the time gap is up to try to transmit again. Once the 
time has passed, the station selects a random amount of time (called a backoff interval) to 
wait before "listening" again to verify a clear channel when to transmit. If the channel is 
still busy, another backoff interval is selected which is less than the first. This process is 
repeated until the waiting time approaches zero and the station is allowed to transmit. 
This type of multiple access ensures effective channel sharing while avoiding collisions. 


10 


This scheme also allows automatic medium sharing between several devices with 
compatible PHYs. This access method is attractive because it provides both spectral 
efficiency and asynchronous data transfer. Frequency Division Multiple Access (FDMA) 
and Code Division Multiple Access (CDMA) schemes would not be enough because they 
require bandwidth used by the modulation scheme. Strict Time Division Multiple Access 
(TDMA) would not work well because it requires synchronization. Thus CSMA/CA, 
which may be thought of as a version of TDMA, is better suited to this application. 

The PHY under 802.11 includes diffused infra-red (DFIR), direct sequence spread 
spectrum (DSSS), and frequency hopped spread spectrum (FHSS). Both spread spectrum 
techniques are used in the 2.4 GHz band because of wide availability in many countries 
and lower hardware costs in comparison to the higher microwave frequencies. 

The IEEE 802.11 supports DSSS for use with Biphase Shift Keying (BPSK) 
modulation at a 1 Mbps data rate, or Quadrature Shift Keying (QPSK) modulation at a 2 
Mbps data rate. The general band plan consists of five overlapping 26 MHz sub-bands 
centered at 2.412, 2.427, 2.442, 2.457, and 2.470 GHz. This scheme is used in an attempt 
to combat interference and selective fading [Ref. 4], 

FHSS is supported under 802.11 with Gaussuian Frequency Shift Keying (GFSK) 
modulation and two hopping patterns with data rates of 1 Mbps and 2 Mbps. Under this 
scheme, the band is divided into 79 sub-bands with 1 MHz bandwidth each. Each sub¬ 
band is subject to a minimum rate of 2.5 hops/sec using any of three possible hop patterns 
(22 hops in a given pattern). The minimum hop rate ensures that each packet sent could 
be transmitted in a single hop so that missed information could be recovered in another 


11 



hop. This allows an effective frequency diversity that provides excellent transmission 
characteristics [Ref. 2]. 


C. WIRELESS LAN 

When wireless LANs were introduced on the market at the end of last decade, 
most products were designed to be used together with stationary desktop computers. 
Their main objective was to offer flexible and cost-effective alternatives to the LAN 
cable. The basic infrastructure of a wireless LAN is given in Figure 3. Aside from 
saving the often high costs of installing and maintaining the cable, another benefit of 
wireless LANs was the speed and ease with which new LANs could be created or new 
computers added. 

These benefits are of course still valid today, but mobile computing is changing at 
an amazing pace. As mentioned before, advances in low power microprocessors, display 
quality and battery technology are resulting in extremely powerful notebook PCs. 
Consumer electronics and personal computers are merging to create a class of even 
smaller computing products, the PDAs. With the integration of telephone and multi- 
media technology in these devices, intelligent terminals for telecommunication services 
were created. 

Users need the freedom to move around the workplace unhindered by network 
cable and power cords. At the same time, they require timely access to all of the 
information. This type of mobile computing has placed an entirely new set of demands on 
LANs, such as higher data-rates, more reliable services, and shorter antennas. 


12 




Figure 3. Infrastructure WLAN 


1. Application Areas 

Wireless LANs have been used in a number of application areas. In addition to 
office environments, wireless LANs are today used in hospitals to provide personnel with 
the possibility to gain access to information such as patient records while on the move. 
Similar needs are expressed by personnel working at airports, construction areas, 
universities, and the military etc. One application area for wireless LANs is to bridge 
between cabled LANs in different buildings. Ad-hoc networking is another application, 
which is expected to take advantage of the wireless connection. 

Ad-hoc networking is what happens when two or more workstations are 
connected to form a network at the time it is needed. That network exists only as long as 
there are stations in it. Figure 4 shows an ad-hoc WLAN structure. 


13 




Figure 4. Ad-hoc Networking 


2. Wireless LAN vs. Conventional LAN 

Conventional LANs provide fast and reliable connection for desktop computer to 
share information via wire, coaxial cable or optical fibers. The WLAN serves the same 
purpose as that of a wired or optical LAN, carrying information among the devices 
attached to the LAN. The WLAN is much more flexible with the lack of physical cabling 
to tie down the location of a node on a network. As opposed to the large amount of labor 
required adding or moving the cabling in wired network, WLAN offers a solution to 
overcome the difficulties associated with installing, maintaining and upgrading networks 
in typical building environments. Wireless connections enable portable computers to 
retain their portability without sacrificing the advantages of being connected to a network 
[Ref. 5]. 


14 



3. Advantages of WLANs 

Wireless LANs offer the following productivity, convenience, and cost 
advantages over traditional wired networks. A concise comparison between a wired and 
wireless LAN is shown in Table 1. 

a. Mobility 

Wireless LAN systems can provide LAN users with access to real-time 
information anywhere within their organization. This mobility supports productivity and 
service opportunities not possible with wired networks. 

b. Installation Time and Simplicity 

Installing a wireless LAN system can be fast and easy and can eliminate 
the need to pull cable through bulkheads, deck plates of a ship. 

c. Installation Flexibility 

Wireless technology allows the network to go where wire cannot go. 

d. Reduced Cost-of-Ownership 

While the initial investment required for wireless LAN hardware can be 
higher than the cost of wired LAN hardware, overall installation expenses and life-cycle 
costs can be significantly lower. Long-term cost benefits are greatest in dynamic 
environments requiring frequent moves, changes, and routing of terminals and cabling. 

e. Scalability 

Wireless LAN systems can be configured in a variety of topologies to 
meet the needs of specific applications and installations. Configurations are easily 
changed and range from peer-to-peer networks suitable for a small number of users to full 
infrastructure networks of thousands of users that enable roaming over a broad area. 


15 




4. Disadvantages of WLANs 

Although the advantages of the WLANs far more outnumber the 
disadvantages, the major disadvantages related to wireless LAN can be summarized with 
the following categories. 

a. Higher Initial Cost 

Although the initial cost for a wireless LAN is two to three times more 
than that of a conventional LAN, investors can regain the investment for WLAN after a 
couple of moves. The cost depends primarily on the number of access points deployed. 
The number of these access points depend on the coverage region and the number of and 
type of users to be serviced. The quick capital recovery of wireless LAN relies on two 
features of wireless LAN. Firstly, wireless LAN discards the installation and 
maintenance costs and labor of the network. Next, the indirect costs of user downtime 
and administration overhead are reduced during network relocation period [Ref. 3]. 

b. Slow Throughput Rate 

Airwave congestion (number of users), propagation factors such as range 
and multipath, the latency and bottlenecks on the wired portion of the WLAN are some of 
the factors affecting wireless LAN. The most common throughput rate for WLAN is 
around 1-10 Mbps, while that of a wired LAN can reach up to 100 Mbps. 

c. Higher Interface 

The products transmitting energy in the same spectrum with WLAN can 
potentially cause some level of interference. This factor degrades the throughput. 


16 



d. Security 

In mm-wave band, solid objects such as walls, equipment are transparent 
to this signals. This fact may cause a security risk for some environment. Coverage areas 
may need to be measured carefully. Some security measures should be considered. 

e. Industry Standard 

The IEEE 802.11 specifications were published in 1997. Unfortunately, 
the standard doesn’t specify technology or implementation but only specifications for the 
physical layer and MAC layer. It needs a lot of work to reach the wired networks 
standard. 


Attribute 

Wireless LAN 

Wired LAN 

Cost 

Initial investment in hardware costs 
is higher 

Installation costs and maintenance 
costs can be much lower 

Investment cost in hardware is lower 
Installation and maintenance costs 
can be significantly higher 

Scalability 

Network can be simple to complex 

Network can be simple to complex 

Safety 

Very little exposure to radio 
frequency energy 

No exposure to radio frequency 
energy 

Mobility 

Provides access to real-time 
information anywhere 

Does not support mobility 

Throughput 

1- 10 Mbps 

10- 100 Mbps 

Integrity & Reliability 

Subject to interference 

Highly reliable 

Simplicity / Ease of 
Use 

No need to pull cable / Set up time 
is lower / Moves, additions & 
changes much simpler 

Cable required / Set up time is 
significantly higher 

Security 

Susceptible to interception 

Overcome with encryption 

Not as susceptible to interception 


Table 1. Wireless vs. Wired LAN 






THIS PAGE INTENTIONALLY LEFT BLANK 


18 


m. JAVA ARCHITECTURE 


A. GENERAL 


Java is a new high level programming language developed by Sun Microsystems. 
It is a language made for writing client/server and networked applications, and especially 
well suited for the Internet. It is object-oriented and has many similarities with the C and 
C++ languages. But unlike C, Java was designed to be a platform independent program 
language. Java is compiled to an intermediate byte-code which is executed by a Java 
interpreter. Therefore, the Java interpreter and a few native code libraries are enough to 
port Java programs to a new platform. Compiled Java code can run on most computers 
because Java interpreters and runtime environments, known as Java Virtual Machines 
(JVMsJ, exist for most operating systems, including UNIX, Macintosh operating system 
(OS), and Windows. Java architecture is shown in Figure 5. 



Figure 5. The Java Architecture 

Java goes back to 1991, when a group of engineers from Sun Microsystems 
wanted to design a small computer language that could be used for consumer devices like 
cable TV switchboxes. Since these devices don’t have a lot of power nor a lot of memory, 


19 
















the language had to be small and generate very tight code. Also, because different 
manufactures may use different central processing units (CPUs), it was important to 
make the language architecture neutral. Java was originally called Oak. In 1995, Sun 
changed the name to Java and modified the language to take advantage of the growing 
World Wide Web (WWW). Java is two different things. First the language, second the 
Java Virtual Machine. It is important to keep these two things apart. 

The Java language is the means for a developer to write source code. Applets and 
applications written in Java compile to a form that runs on the Java platform. Java 
platform can be defined as a software-only platform that runs on top of other hardware 
based platforms. It is a programming environment developed by Sun Micro Systems 
which is used to build and deploy Java based software applications by using well- 
established and proven two components, Java virtual machine and Java API. The 
platform comes in different versions. Depending on how advanced a JVM is one obtain a 
certain level of compatibility. The compatibility refers to the amount of Application 
Programmer Interfaces (APIs) a JVM supports. An API is a package containing classes 
and methods that may be used as a tool to aid the programmer. The model of the Java 
stack can be seen in Figure 6. 


Java Program 



. java;&Pls •; 

. 1 .-a 


v*a Virtual Machhe 

VOL 

\r Computer System 


Figure 6. The Java Stack 


20 





There are two different kinds of programs that run on the Java Platform: 

Applets : Small applications that require a web browser to run. The applet is embedded 
in a web page and is downloaded automatically from a remote server when the page is 
accessed. It then runs on the local host. The JVM is built into web browsers. 

Applications : Java code does not need a browser and is not automatically downloaded. 
Applications run when called upon just like in any other programming language. They do 
need a local JVM to execute the bytecode. 

The difference between an ordinary machine (i.e. a physical computer) and the 
Java Virtual Machine is that the JVM does not exist physically. One can view the JVM as 
a computer program describing a software processor. 

Java applets can be downloaded from a Web server and run on any computer by a 
Java-compatible Web server, such as Netscape Navigator or Microsoft Internet Explorer. 
Java is a programming language for distributed applications. It doesn’t just allow 
programmer to add new types of content to Web pages like Netscape and Internet 
Explorer do. Rather it lets a user add both the content and the code necessary to interact 
with that content. One no longer needs to wait for the next release of a browser that 
supports a preferred application format. With Java, a user sends browsers both the 
content and the program necessary to view the content. For instance let’s say 
crewmembers on a ship are able to search the ship’s Log Database. However the database 
exists on a mainframe system that doesn’t speak HTTP (Hyper Text Transport Protocol). 
Before Java one could hope that some browser implemented a specific database protocol 
or could try to program some intermediate cgi-bin on OS that can speak HTTP and talk 


21 



to the database, not an easy task. With Java when clients wants to talk to a database, 
someone can send them the code they need to do so. 

The design requirements of Java are driven by the nature of the computing 
environments for which software must be developed. As a language Java is 

1. Simple 

Java has the bare bones functionality needed to implement its rich feature set. It 
does not add lots of syntactic and unnecessary features. Java was designed to make it a 
lot of easier to write bug free code without extensive programmer training. The language 
is strictly typed to catch bugs early. It has automatic garbage collection so that the 
programmer won't have to worry about memory administration. Like in C language, Java 
has no pointers and no global variables, which makes the code reading easier. Without 
pointer arithmetic, a lot of errors and headaches can be avoided. 

2. Object-Oriented 

Almost everything in Java is either a class, a method or an object. Only the most 
basic primitive operations and data types (integer, for, while, etc.) are at a sub-object 
level. As a programmer, this means that one focus on the data in applications and 
methods that manipulate that data, rather than thinking strictly in terms of procedures. 


22 




3. Platform Independent 


Java is designed to support applications that will be deployed into heterogeneous 
networked environments. In such environments, applications must be capable of 
executing on a variety of hardware architectures. As mentioned before Java programs are 
compiled to a byte code format that can be read and ran by interpreters on many 
platforms such as Windows 95, Windows NT, UNIX, and Solaris 2.3. All that is needed 
is a JVM written for that platform which has been done already. 

4. Secure 

Java is designed to operate in distributed environments, which means that security 
is very important. Java code can be executed in an environment that prohibits it from 
introducing viruses, deleting or modifying files, or otherwise performing data destroying 
and computer crashing operations. Many of the defenses in Java protect the user from 
untrasted applets. The JVM contains a bytecode verifier to ensure that code does not 
violate any Java language restrictions. The verifier is activated before the code is 
executed. It provides extensive compile-time checking, followed by a second level of 
run-time checking. 

5. High Performance 

Performance is always a consideration. Java achieves superior performance by 
adopting a scheme by which the interpreter can ran at full speed without needing to check 


23 



the run-time environment. Java can be compiled very quickly with a Just-In-Time 
compiler (JIT) to code that comparable with C++ in speed. 

6. Multi-Threaded 

Java is inherently a multithreaded language which means that it provides support 
for multiple threads of execution that can handle multitasking. A single Java program 
can have many different things processing independently and continuously. This is very 
valuable in interactive applications. 

7. Distributed 

With the phenomenal growth of networks, today’s developers must think 
distributed. Applications must be able to migrate easily to a wide variety of computer 
systems, a wide variety of hardware architectures, and a wide variety of operating system 
architectures. A Java application/applet may also have its code spread out on more than 
one computer since the JVM will load the classes it needs when they are actually needed. 

Java supports various levels of network connectivity through classes in the 
package java.net. For instance, the URL class allows a Java application to open and 
access remote objects on the Internet. 


24 



B. 


APPLETS 


Although a short definition of an applet was previously defined, the features of 
applets need closer scrutiny to understand the importance of it for this project and to 
compare it with servlet. An applet is a small program designed to run within another 
application. Applets are useful for network use especially on the Web because, once they 
are downloaded, they can be executed quickly within the user’s browser. More than one 
applet can exist in a single document, and they can communicate with one another while 
they work. Java is one of the major languages used for creating Web-based applets. 

1. Taking Advantage of the Applet API 

The applet API lets a user take advantage of the close relationship that applets 
have with Web browsers. The API is provided by the java.applet package, mainly by the 
Applet class and the AppletContext interface. The java.applet package provides an API 
that gives applets some capabilities that applications don’t have. For example, applets can 
play sounds, which other programs can’t do yet. Here are some other things that current 
browsers and other applet viewers let applets do: 

a. Applets can usually make network connections to the host they came 

from. 

b. Applets running within a Web browser can easily cause HTML (Hyper 
Text Markup Language) documents to be displayed. 

c. Applets can invoke public methods of other applets on the same HTML 

page. 


25 



d. Applets that are loaded from the local file system (from a directory in 
the user’s CLASSPATH) have none of the restrictions that applets loaded over the 
network do. 

e. Although most applets stop running once the user leaves their page, 
they don’t have to. 

Java Applets are limited to certain operations on the browser. On the other hand 
it has some other capabilities, too. Java applets can use a JDBC (Java Database 
Connectivity) connection or distributed objects. The Java applet allows more complex 
user interface options than HTML combined with either Common Gateway Interface 
(CGI) or Java servlets. However, the Java applet requires a Java-enabled Web browser. 
Applets have several advantages over HTML. 

a. Applets allow local validation of data entered by the user. Local 
validation of data is possible using HTML combined with JavaScript, but variances in 
JavaScript implementations make JavaScript difficult to use. 

b. An applet can use the database to perform value lookups and data 
validation. HTML (even if combined with JavaScript) can not do that without invoking a 
CGI or servlet program and drawing a new HTML page. 

c. Once an applet is downloaded, the amount of data transferred between 
the Web browser and the server is reduced. HTML requires that the server transfer the 
presentation of the data (the HTML tags) along with the data itself. The HTML tags can 
easily be 1/4 to 1/2 of the data transferred from the server to the client. 


26 



d. Applets allow the designer to .use complex Graphical User Interface 
(GUI) widgets such as grids, spin controls, tab panels and scrollbars. These tools are not 
available in HTML. 

2. Applets Limitations 

For security reasons, applets that are loaded over the network have several 
restrictions. One is that an applet can’t ordinarily read or write files on the computer that 
it’s executing on. Another is that an applet can not make network connections except to 
the host that it came from. Despite these restrictions, applets can do some things that one 
might not expect. For example, applets can invoke the public methods of other applets on 
the same page. 

3. Applet Security 

The goal for the JDK (Java Development Kit) is to enable browsers to run 
untrusted applets in a trusted environment. The approach is to be conservative at first, 
and to add functionality when it can be added securely. The intent is to prevent applets 
from inspecting or changing files on the client file system. Also, the intent is to prevent 
applets from using network connections to bypass file protections or people’s privacy. 

JDK provides the basic technology for loading and authenticating signed classes. 
This enables browsers to run trusted applets in a trusted environment. This does not make 
obsolete the need to run untrusted applets in a secure way. 


27 




4. Security Restrictions 


Every browser implements security policies to keep applets from compromising 
system security. The implementation of the security policies differs from browser to 
browser. Also, security policies are subject to change. For example, if a browser is 
developed for use only in trusted environments, then its security policies will likely be 
much more loose than those described here. 

Current browsers impose the following restrictions on any applet that is loaded 
over the network: 


a. An applet cannot load libraries or define native methods. 

b. It cannot ordinarily read or write files on the host that’s executing 


c. It cannot make network connections except to the host that it came 

from. 

d. It cannot start any program on the host that’s executing it. 

e. It cannot read certain system properties. 

f Windows that an applet brings up look different than windows that 
an application brings up. 

Each browser has a SecurityManager object that implements its security 
policies. When a SecurityManager detects a violation, it throws a SecurityException. 


28 



The applets can catch this SecurityException and react appropriately. This is known 
as exception handling, which the Java language is very good at. 


C. SERVLETS 

According to Sun Microsystems, a servlet is "a standard approach to extending 
server functionality without the limitations of CGI-based or server-specific approaches". 
Simply, a servlet is the opposite end of an applet, or a faceless applet. A servlet can 
almost be thought as a platform- independent 100% Pure Java server-side applet. Servlets 
run inside the Web server just as applets run inside the Web browser. Servlets gives 
request /response-oriented services and extend them in some manner. It executes on the 
Web or HTTP server in response to requests from a Web browser, performing tasks 
traditionally handled by CGI programs. A sever can ran more than one services at the 
same time. An example is seen in Figure 7. Web servers that can support servlets 
include: Apache, Netscape’s Fast Track and Enterprise Servers, Microsoft’s HS, 
O’Reilly’s WebSite, and JavaSoft’s Java Web Server. 


Operating System 



Figure 7. A server can support more than one servlet 


29 



They can be used to extend the capabilities of the HTTP or Web servers in a 
variety of ways with minimal overhead, maintenance, and support. Because servlets are 
Java byte codes that can be downloaded or shipped across the network as applets, they 
are truly "Write Once, Run Anywhere". Therefore, they provide a standard alternative to 
CGI programming that enhances the performance, security and implementation. 

A plain HTML document that a Web server retrieves is static. A servlet, on the 
other hand, is executed for every request so that it can output dynamic information. For 
example, a browser generates a request to a server for a document that contains dynamic 
information. The server examines the request and maps it to a particular servlet. It then 
invokes the servlet which creates the document with dynamic content and returns it to the 
client. Figure 8 shows the application interaction of a running servlet. 

The Web server software can use a Java Virtual Machine to run the servlet and 
generate a HTML page. The servlet takes input from a HTML page containing HTML 
input tags, processes it, and returns a HTML page with the results. Java servlets can be 
thought of as CGI programs in some respects. Both servlets and CGI execute on the 
server in response to HTML input. Thus both are limited to HTML and JavaScript’s 
capabilities. However, Java servlets are much more powerful that CGI programs. 


30 








A 


Client II 


► 

Database 



— 

— 

Server 

^ ---•- 

Servtr 


_ ^ 


Java Servlets 


Figure 8. Application Interaction 

Servlets can do more than just return documents. Once the HTTP connection is 
opened the client and servlet can speak a custom protocol on the connection. Servlets can 
be thought of as server side applets. The difference is that servlets are faceless objects 
without a user interface. Servlets can be long-lived. A new servlet does not have to be 
created for every request. The server just needs to call the servlet method that can 
respond to the request. 

Servlets can be dynamically loaded in a running server. They can be loaded from 
the local disk or from the network. Agents are programs that can roam a network, interact 
with the host, gather information, and come to the host where they originated. Servlet 
technology is an important step forward in achieving this goal. 

Servlets make use of the Java standard extension classes in the packages 
javax.servlet (the basic Servlet framework) and javax.servlet.http (extensions of the 
Servlet framework for Servlets that answer HTTP requests). Since Servlets are written in 
the highly portable Java language and follow a standard framework, they provide a means 
to create sophisticated server extensions in a server and operating system independent 
way. 


31 






1. Taking Advantage of the Servlet API 

The Java servlet API is the first standard extension to Java for interfacing servlets 
with information servers, such as HTTP or Web servers. The servlet API contains 
methods for initializing a servlet, processing the request, getting servlet information, and 
destroying the servlet. The servlet API is simple, flexible, and stable. Application 
developers can write platform independent servlets and expect them to run on any server 
that supports the servlet API. 

Servlets have full access to the various Java APIs and to third-party component 
classes, making them ideal for use in communicating with applets, databases, and Remote 
Method Invocation (RMI) servers. The servlet is a very new application compared with 
the applet. But the servlet API is very simple. As a consequence, it is pretty stable. The 
Servlet API, like Java itself, is being constantly improved by JavaSoft. There will be a 
few things to add in the next version of the Servlet API. 

2. The advantages of Using Servlets 

Sun is aiming to make servlets the new Web server programming paradigm. 
Servlets are persistent, platform independent, and incorporate all sorts of advanced 
features including security, easy database access, and much easier integration with Java 
applets. 

a. Platform Independent 

Servlets can run on any platform without recompilation or rewriting, but 
CGI and server extensions written in other high-level languages such as C and C ++ are 


not as portable. 


32 



b. High Performance 

Servlets only need to be loaded once, while CGI programs need to be 
loaded for each request. The servlet init () method allows programmers to perform 
resource intensive actions (such as database connections) at startup and reuse them across 
servlet invocations. Instead of connecting to a database thousands of times a day, a user 
connects once. 

The built-in thread support of Java technology not only makes servlet 
development easier, it also improves performance. Because CGI programs creates a 
separate process for each request, a heavy traffic can easily occur on the server with too 
many simultaneous processes. Servlets, on the other hand, use a single process, 
multithreaded model with comparatively little cost in handling requests 

c. Extensibility 

Java is a robust, well-designed and fully object-oriented language. 
Specialized Java libraries, development tools and database drivers are becoming available 
all the time, and servlets can utilize Java code from any source. 

d. Easier Development 

Using Java to develop CGI type programs is much easier and more bug- 
Free than C, Perl or any other programming languages. Developers have all the benefits 
of Java as a CGI-type language. Java simply has better support for building web 
applications, without the headaches and risks of pointers and memory allocations. 
Overall, it’s an easier and friendlier development environment. By using the Servlet API, 
the developer doesn’t have to worry about the inner working of the server. Data, server 
headers, and cookies, etc, can all be handled by the servlet’s underlying classes. 


33 




Additionally, because the servlets are written in Java, one can move them from one 
servlet to another, and does not worry about the operating system or the type of server. 


e. Better Error Recovery 

From the developer view, perhaps the biggest advantage of servlet 
technology is the way it handles itself during runtime errors. With CGI, if a program 
crash occurs, the users only get the server error screen, they can’t tell where the error 
occurs and what kinds of error are. With the very handy exception handling of servlets, 
developers are able to provide the user with detailed instructions on who to contact, along 
with a stack trace showing which line of code caused the problem. 

f. Portability 

The Internet is a dynamic environment where things can change quickly. 
The Java platform offers the flexibility to react to this changing environment, the ability 
to run on multiple operating systems, and even the ability to move from a client-side to 
server-side implementation. One can develop a complex server-side application without 
restricting it to a particular hardware platform. Today, one application servlet can reside 
on the Unix platform and then one can later move it to a Windows NT platform. This 
migration can take place without the headaches associated with porting code and without 
the need to recompile Java servlets. 

g. Modularity 

Supporting the idea of modularity, each servlet can perform a specific task 
and then they can be linked together. Servlet can talk to each other. This mechanism is 
known as servlet chaining. 


34 



3. 


Servlet Futures 


Servlets are powerful tools of the Java technology, which have recently gained 
attention. Many servlet development companies believe that the current definition is too 
narrow. An ideal servlet should be considered as "mini-servers" and does not need to be 
linked to a Web server handling web transactions, database access and vertical 
applications. In a short period, servlets will become increasingly popular. This area will 
gain the most "real" usage of Java in the market. 


D. A DETAILED CONTRAST BETWEEN AN APPLET AND A SERVLET 

Basically, a servlet is the opposite end of an applet. A servlet can almost be 
thought of as a server-side applet. Servlets run inside the Web server in the way that 
applets run inside the Web browser. The browser can submit a request to execute a 
servlet directly. It can be stand-alone in terms of its actions, as a browser can request an 
applet directly. 

Java Servlets often work hand in hand with applets, providing a high degree of 
interactivity and dynamic updating. A scheduling applet, for example, could interact with 
a Java Servlet to provide a common calendar for a group of users. The applet could 
provide interactive features, such as a scrolling calendar view, that are updated by the 
Java Servlet dynamically. 

Applets: 

1. Run on the users machine 

2. Strong GUI, graphics, etc. 

35 



Servlets: 


1. Run on the server 

2. Good at generating dynamic HTML pages 

For example, if we are talking about data retrieval, an applet is better if a 
powerful user interface is necessary. An HTML form is inadequate for getting the user’s 
input. While a servlet is better if the display of the output is more important. Of course 
both can be used. 

Currently, Servlets may be the best possible use of Java for haiidheld units which 
doesn’t support a JVM. There is more flexibility with Dynamic HTML to create more 
powerful client-side applications. But Java as a server-side tool is very powerful. The 
good thing is that the power of Java can be realized right away. The browser support is 
not a major issue any more. Servlet solves the JVM versioning problems that may be 
faced with client-side Java. When a new version of JDK comes out, there is nothing to 
worry about Java support on the browser. 

Some detailed implementation issues related to applet and servlet applications 
will be made clear in the following chapters. 


36 



IV. COMMERCIAL TECHNOLOGIES FOR SHIPNET 


A. GENERAL 

Developing products for the commercial telecommunication’s marketplace is a 
fast growing area. Wireless products are currently one of the most important parts of this 
hot market. A lot of different companies offer a variety of hardware and software 
connectivity products and services that help consumers take advantage of the 
opportunities presented by wireless computing. The wireless data market provides 
compelling applications and products to wireless users that increase the productivity and 
efficiency. Mobile computer market consisting PDAs, hand held and wearable 
computers, CE devices shows a similar increasing trend of productivity like wireless 
technology does. Everyday a new product is introduced to the market with smaller 
dimensions, and more powerful hardware and software specs. 

For Shipnet project, COTS (Commercial off the shelf ) wireless LAN and 
computer products were investigated and tested for onboard use. In the scope of this 
research, features of Lucent’s WaveLan and Proxim’s RangeLAN2 wireless products, 
and Mitsubishi’s Amity, Casio’s Casiopedia, Hitachi’s SuperH, and VIA’s Flex mobile 
computers are investigated. 


B. WLAN PRODUCTS 

WLANs allow users to stay connected to their usual network while retaining their 
freedom of movement. WLANs permit systems to be added, moved and removed easily 


37 



and flexibly. One of the basic parts of a WLAN is mobile user units with light radio and 
interface cards or a Personal Computer Memory Card International Association 
(PCMCIA) card packaging. The other one is an access point which is a larger external 
radio unit with some additional equipment such as range extender, and different kinds of 
antennas. The access point provides connectivity to an Ethernet segment with transparent 
bridging functionality. Within a cell, the system replaces the Ethernet physical and MAC 
layer functionality in a way that is fully transparent to the user. 

In integrating WLANs to the wired networks successfully, MAC bridges have a 
critical role. They receive the data from one LAN and retransmit to the destination on 
another LAN. The bridge operates at the data link layer of the OSI model. It is protocol 
independent but media dependent. The bridge can manage the traffic travelling to 
various segments of the network. A MAC layer bridge keeps the port number that the 
packets form, a particular source address, so it will know where to send the reply packets. 
If the bridge currently knows the destination port number, it will directly forward the 
packets to the destination. Otherwise, It will broadcast packets to all available ports. By 
propagation through the network, packets reach their destination [Ref. 7]. 

Among commercial wireless products, Lucent and Proxim are those providing 
high data rates and good connectivity properties. They are utilized in the prototype 
Shipnet model. 


1. Lucent WaveLAN 

WaveLAN is a family of products using Radio Frequency (RF) technology and 
based on the IEEE 802.11 standard for wireless LANs. Products include the WavePOINT 


38 



fixed wireless access points and bridges, network interface cards for computer devices, 
and antenna systems. 

The card shown in Figure 9 can be installed into a mobile computer’s Type II PC 
card slot or into a desktop PC via an ISA-bus (Industry Standard Architecture) PCMCIA 
adapter. These cards communicate with a Lucent WavePoint II Access Point shown in 
Figure 10, which acts as a hub. The WavePoint also can connect one or two wireless 
LANs to a standard wired Ethernet LAN using its two PC card sockets and standard 
lOBase-T RJ-45 jack. According to Lucent, mobile users can roam seamlessly from one 
Access Point’s coverage area (a cell) to another. During the tests, there were only 
momentarily slight drops which did not affect the smooth transition from one access 
point to the other, which confirms Lucent assertion. 


Antenna 


Figure 9. WaveLAN IEEE PC Card - WEP (Silver) 

The cards communicate with the WavePoint using DSSS radio signals in the 
2400-MHz to 2483.5-MHz band. There are 12 available channels, each of which supports 
2 Mbps. Within the radio range, only one transceiver on each channel may be 
transmitting at a time using CDMA/CD protocols, making an 802.11-based LAN perform 



39 








similarly to shared Ethernet. There is no limit to the number of transceivers able to access 
a single channel. 

Each card comes equipped with a fixed internal antenna that sticks out 
approximately 1-5/16 inches from a PC card slot. Installation of WaveLAN is very 
simple. Just insert a transceiver into a mobile computer’s PC card slot, put the driver 
floppy in drive A and boot. The WaveLAN Access Point is installed by inserting a 
transceiver into a PC card slot and running a lOBase-T cable from the Access Point to an 
Ethernet hub. With a desktop PC, it is necessary first to install the ISA-bus PCMCIA 
adapter and then install the WaveLAN card. 



Figure 10. Lucent WavePoint II Access Point 

NIC configuration is simple. Inmost cases, defaults can be used. The user 
can set the radio-frequency channel and network name, which should be set to enable 
some minimal security. 

According to Lucent, at 2 Mbps, WaveLAN’s radius is 1300 feet in an open (line- 
of-sight) environment and 300 feet in a semi-open space where signals are blocked by 
walls. The system can automatically drop back to 1 Mbps, extending the range to 1750 


40 




feet and 375 feet, respectively. Lucent claims that an antenna will add as much as 15 
percent to the radius. 

Tests conducted in the laboratory and on the NPS campus achieved connections 
at distances of about 250 feet (plus or minus 50 feet) through exterior walls (between the 
Access Point with an indoor antenna and a laptop with, a PCMCIA card) and about 740 
feet (plus or minus 50 feet) line-of-sight with the indoor antenna (range extender shown 
in Figure 11) seen from a window. 



Figure 11. Lucent WavePoint II Range Extender 
Although slow when transferring large files, the WaveLAN is more than adequate 
for transaction processing, sharing Internet access (it’s about the same speed as a T1 line) 
or for handling smaller files. During the tests, It responds very quickly for Shipnet 
Software. The difference between wired and wireless is transparent to the users. 

The new WaveLAN/IEEE Turbo card shown in Figure 12 offers a high-speed 
mode that is reliable and provides faster response time for data-intensive network 
applications. Additionally, the standard mode of the system provides exceptional range 
and is very robust. It perfectly suites for Shipnet environment. 


41 






Figure 12. WaveLAN IEEE PC Card - WEP (Bronze) 

2. Proxim RangeLAN2 

Proxim is one of the worldwide leaders in spread spectrum radio technology, 
especially in FHSS technology for wireless LANs. Proxim’s RangeLAN2 family sets a 
new standard for spread spectrum radio design. RangeLAN2 is based on frequency 
hopping spread spectrum technology in the 2.4 - 2.4835 GHz band (like WaveLAN). The 
unit’s average power output is 100 mW. RANGELAN2’s multi-channel approach enables 
15 independent, non-interfering wireless LANs to operate within the same physical 
space, effectively increasing the aggregate capacity of RangeLAN2 networks by 15 
times. It uses Proxim version of CSMA/CA protocol optimized for spread spectrum 
radio. 

According to Proxim, at 1.6 Mbps, it supports an effective link up to 700 feet in 
an open spaces and up to 400 feet in normal office environment. Data rate drops to 800 
Kbps for extended range. It provides seamless roaming and is compatible with Wireless 


42 




LAN Interoperability Forum (WLIF) products. Both client to server and ad-hoc network 
architectures can be established. 

RangeLAN2 family products consist of access points, LAN adapters (serial, 
Ethernet, and Token Ring), PCMCIA cards and extension points. The card installation 
and access points is very similar to that of Lucent products. PCMCIA card needs a Type 
II slot for portable devices and ISA adapter for desktop computers. These cards connect 
the portable devices to a wired network via a Proxim access point shown in Figure 13. 



Figure 13. RangeLAN2 7510/20 Ethernet Access Point 

There are basically two kinds of antennas for PCMCIA cards. Those are flexible 
snap-on antenna and dipole antenna shown in Figure 14. Both antennas are designed by 
Proxim for easy installation, are fully certified by the FCC and ETSI (European 
Telecommunications Standards Institute) for use with the card and are being approved for 
use throughout the world. The unique antenna connector approach allows Proxim to 
design and offer additional antennas in the future that are fully compatible with the 
current RangeLAN2 PC card products. 


43 




Figure 14. Rangelan2 Dipole and Flexible Snap-On Antenna 


C. PORTABLE COMPUTER PRODUCTS 

Finding the right portable computer for Shipnet can be a difficult task. There are a 
lot of different models to choose from and the technology changes so fast that choosing 
the best solution is important to design long lasting systems. There are some features 
which should be consider while choosing the portable computers. First, is computing 
speed and power. Product’s microprocessor, memory capacity and overall hardware 
design including dimensions are important factors to be considered. 

Second, is the operating system and supporting software products. The quality 
of those will affect the performance of the Shipnet’s hardware and software. For 
example, a good handwriting recognition system will improve the utilization of the 
product. Another, may be the specific connections supported by the mobile unit. For 
WLAN products mentioned earlier, a Type II PCMCIA card slot is essential for a 
wireless connection. Some of smaller products, especially PDAs, does not support this 
vital property, although they have a lot of useful characteristics. Having convenient 




connectors to external keyboard, mouse, headset, microphone, monitor, printer and serial 
devices increases the flexibility of the same device used for another task such as online 
education, and entertainment. 

One of the most important features which should be considered is battery life and 
power consumption. Increased performance is critical to mobile computing. But if 
battery life is sacrificed for the sake of performance, there’s little gain in productivity or 
convenience. It’s frustrating to have a battery go dead in the middle of a serious situation 
or after adding the finishing touches to a report. 

After all analysis, the final bottleneck for the implementations is usually the price 
of systems and parts. Currently, the price of the portable computing devices goes from 
$99 dollars to a few thousands dollars covering the range from simple PDAs to powerful 
laptop computers. As it is mentioned earlier, the market is growing rapidly. So the 
prices are going down. 

1. Amity VP 

Amity VP is a compact and lightweight portable computer, which combines 
outstanding portability with high performance. It is shown in Figure 15. It combines the 
benefits of full Windows 95 and 98 functionality with the right size and weight for the 
true mobile users. Even though weighing only 2.2 lbs (1 Kg), the Amity VP includes a 
high performance AMD, Am5x86 processor. Which operates at 133 MHz with up to 48 
MB of memory and an 810 MB hard disk drive. The high contrast 7.5 color VGA (Video 
Graphics Array) "Diamond Fine Passive" LCD (Liquid Crystal Display) screen 


45 


displaying 16-bit color and integrated Wacom digitizer enables easy and convenient 
viewing and control. 

A built-in keypad allows fast input of numerical values. Although it is written in 
the publications that the Handwriter Recognition System (HRS) software from 
Communication Intelligence Corp. (CIC) provides reliable handwritten input to most 
applications. Among the portable computers presented in this thesis, it has the least 
effective HRS software. SoundBlaster Pro compatible hardware enables effective use of 
sound in any mobile application through the use of the integrated microphone and 
speaker. Convenient connectors allow easy access to external keyboard, mouse, headset, 
microphone, monitor, printer and serial devices. It has two Type II PC card slots 
accepting many types of PCMCIA cards and the optional floppy disk drive. 



Figure 15. Amity VP Portable Computer 

They’re two Lithium Ion battery slots. They can be "hot swapped" while the 
computer is still operating, thus allowing continuous use throughout the work day. A 




special charging circuit ailows the batteries to be charged anytime the AC adapter is 
plugged into the Amity VP even while in use [Ref. 20J. According to Mitsubishi, its 
batteries last up to three hours. However, tests showed that it consumes a battety 
approximately in half an hour while heavily used. Although its batteries can be hot 
swapped, because of its higher power consumption a constant flow of full batteries will 
be needed. In damage control environment, this may cause serious problems. Also it is 
almost impossible using the device while it is connected to an adapter. Its boot up time 
. is also considerably long compared to that of PDAs and CE devices. Another 

disadvantages of Amity VP is its size. When compared to other hand held pen tablet 
computers it is one of the biggest. 

The biggest advantage of Amity VP is to run Win 95, which provides more 
computing power than Win CE Devices. Moreover, it supports JVM for Shipnet 

software running applets. There are plenty of drivers and commercial software products 
supporting its functionality. 

There are new versions of Amity hand held computer having better features by 
using different microprocessors such as Amity CP with Pentium D 166 and more 
advanced hardware. Those products may eliminate Amity VP’s current disadvantages. 


2. Cassiopedia PA-2400 

It is Casio’s robust handheld commercial computer using the Microsoft Windows 

CE 2.0 Operating System. It originally developed to provide a robust mobile solution 
for data or order entry in commercial market. 



The pen-based PA-2400 shown in Figure 16 runs on a Hitachi SH-3 Super-H 
RISC Processor 80 MHz processor, with 16 Mb of ROM and 8 Mb of RAM. There is no 
hardware keyboard - all data is entered via the software keyboard or whatever screen- 
based method is required by application. It has a soft keyboard that conies up on screen. 
The hard cover folds back flat against the bottom of the unit to make it easy to use. It 
comes with applications including voice and handwriting recognition. To help with 
mobile applications, the PA-2400 has options for a barcode reader, modem and pnnter 

connection, digital camera, memory cards, and battery packs [Ref. 21]. 

It is powered by a 3.6 volt Lithuim Ion battery. Although PA-2400 has a long 
battery life, it is observed in the tests that PCMCIA card drains the battery power faster 
than normal conditions. The same effect was shown for other portable devices as well. 
But instant boot up procedure of PA-2400 makes Sequent ONs -OFFs very handy to 

save power. 



Figure 16. Cassiopedia PA-2400 





It has one Type II PCMCIA slot, one Type I CompactFlash™ slot, and one 
Infrared port (115.2 KPS). Its large back-lit screen, light weight, and powerful features 
make it ideal for Shipnet. It is small enough for users to carry everywhere allowing for 
uninterrupted use. 

Its build-in features helps implementation of prototype Shipnet software. Applets 
and servlets using pull down menus and other GUI elements can minimize the number of 
input errors by users. It reduces the dependency on the quality of users' handwriting. 
Moreover, it has better handwriting recognition system than Amity has. 

PA-2400 has a large screen with larger pixel size, which provides a clear and 
readable screen. This feature has a great impact on HTML pages posted on a screen by 
servlets seen more clearly. 

Currently, PA-2400 doesn’t provide a JVM for running applets. Only servlets 
can be used for prototype Shipnet software. There are some studies about a JVM running 
in CE operating system. In the very near future, CE will provide full Java support. Since 
PA-2400 uses standard Microsoft Windows CE 2.0 operating system, upgrading the 
device for future versions of OS is very easy. This prevents the handheld units become 
obsolete quickly. 

3. HPW-600ET 

HPW-600ET employs the Hitachi SuperH SH-4 RISC processor operating at 128 
MHz. It is the lightest PC in its class. It has easy-to-view 7.5", 65536-color, backlighting 
STN LCD screen that is super-bright and touch resistive with full window functionality. 
It also offers a built-in 56 Kbps V.90 modem, and 32 MB ROM, 16 MB RAM (max 32 


49 



MB). It supports fairly more output connections than many handheld devices. Those are 
one serial port, one infrared port, one Type II PC card slot, one Type II CompactFlash™ 
slot, one USB port, Microphone jack, Speaker jack, Headphone jack, and VGA adapter. 

The version 3.0 of Windows CE has recently been released. Hitachi didn’t waste 
time to utilize this new OS in its new product, HPW-600ET is shown in Figure 17. It is 
a combination of handheld and pen-based PC with a tablet design. It has no keyboard set 
but provides a virtual one. However, its handwriting recognition software is the best one 
among the devices tested for Shipnet project. 

The light-weight design is perfect for mobile users. In addition to the superior 
lightness, graphics capabilities and speed for its class, the enhancements provided in the 
tablet-style and new software offer a good solution for Shipnet. 



Figure 17. Hitachi's HPW-600ET Tablet 


50 






Its big screen is very suitable for displaying whole applet or servlet page at once. 
Since there will be less scroll up-down or left-right, interaction with the software will be 
easier and faster. Especially in damage control application, this may be a crucial factor. 
Also big screen gives the user lots of room to write and/or draw and to place the virtual 
keyboard to a location where it does not obstruct the windows. 

HPW-600ET offers a long-battery life of approximately nine hours. Although 
PCMCIA card reduces the battery life, it is still better than Amity and PA-2400. In 
addition, power-down modes of the SH4 microprocessor adds effective power 
conservation features. Instant On/Instant Off capability also helps to save power. Like 
PA-2400, currently HPW-600ET does not support Java Virtual Machine. So the same 
constraints are valid for HPW-600ET as well. 

4. VIA II (FLEX) Wearable Computer 

It is the world’s first and only flexible wearable PC powered by the highly 
integrated MediaGX processor (available at 180, 200 and 233 MHz) from Cyrix, shown 
in Figure 18. Via’s unique flexible belt-like design allows the unit to be carried 
comfortably around a user’s waist. Wearing the computer at least 6-12 hours per day 
would be comfortable and not become an obstacle. 

It weighs only 22 oz and has 3.2 GB hard drive, 64 MB of DRAM and two PC 
card slots. The entire unit fits into a pouch which wraps around the user’s waist using 
Via’s patented flexible circuitry for maximum comfort and wearability. The system is 
capable of wireless modem connectivity, including Wide Area Network (WAN), LAN 


51 


and cell phone (using two Type II PC card slots), and runs on lithium-ion hot-swappable 
batteries for up to six hours of run time per battery. 

It has a color flat panel touch screen carried in a holster attached to belt. In 
addition to pen, it can be used through voice (using a headset and multi-lingual voice 
recognition software). This display also contains buttons for power on/off and mouse 
functions. The display is available in standard 6.5 inch and 8.4 inch sunlight-readable 
versions. It is dust and water resistant. , 

By using a separate docking station. Via II can support small VGA (SVGA) 
video for desktop display. It also has mouse and keyboard ports, microphone and speaker 
jacks, a RS-232 serial port, a universal serial bus (USB) port, and two battery recharge 
slots, plus optional Ethernet connection, CD ROM and external hard drive. 



Figure 18. VIA II Wearable Computer (Flex) 


52 




One of the most useful features for Shipnet is hands-free mobile computing. Ship 
personnel in a chaotic time and mission critical environment need a system that is a 
benefit, not a burden. Another powerful feature is that it can run Windows 95 and 98 
operating system. So it supports a JVM which lets applet to run. Also it has some good 
power management capabilities. 


D. SHIPBOARD TESTING 

Onboard testing was conducted on the USS HARRY S. TRUMAN. Wireless 
communication devices, mobile computer equipment and prototype Shipnet software 
were examined during this testing. Without using TRUMAN’s wired LAN, a private 
network is created by using a laptop as a server. Four different setups were established to 
test hardware components. By using a file transfer protocol (FTP) program, a large file 
(5 MB) was transferred from the server to the mobile client and then from the mobile 
client to the server. 

1. Test One 

For this phase of the testing, one access point was positioned at the starboard side 
of the hangar bay. Two-way file transfers were made between the server and one mobile 
client positioned at different locations relative to the access point by using FTP. By 
using the average transfer time provided by the FTP server, the data was determined and 
verified by taking the file size and evaluating it with the total transfer time. The results 


53 



provided from these measurements are presented in Figure 19. The locations of the 
client at the time of measurement are pointed with the arrows. 



Figure 19. Test One Result 


2. Test Two 

The access point was stationed at the same location. But two mobile client were 


used simultaneously to take measurements from the same remote location. The aim was 
to determine any degradation of transfer rate and throughput in a multi client 
environment. The results are shown in Figure 20. The term “same direction” in the graph 


below indicates that the computers were both conducting either simultaneous uploads or 


downloads. The term “Reverse Direction” implies that while one computer was uploading. 










the other was downloading [Ref. 14]. All measurements are in Kbps. The Via n (flex) 
wearable and amity hand held computers were utilized during the testing. 



Figure 20. Test Two Result 


3. Test Three 

In this phase of the test, we had one access point still positioned at the same location 
and three mobile clients. Via n, Amity and Xybemought’s wearable computers were used to 
send and receive a file simultaneously as mobile client hardware. As we observed in 
previous two test results, the data rate from server to client was still greater than that of 
client to server. When the units moved further from the server, the degradation increased, 
especially while the other two clients were transferring. The tests where conducted in both 
server to client and client to server mode and configured to determine at the various 






ranges the effects of uploading while the other two units where downloading. The test 
result can be seen from Figure 21. The readings are in Kbps. 


Flex 

server to c&entfsame direction) 

933 

i 

client to server 

721 

1 

server to client (reverse direction) 932 


client to server 

656 




Amity 

server to client (same direction) 

848 

| 

client to server 

492 

I 

server to client (*veise cfc*cti<xi) 

631 


client to server 

614 - 





Figure 21. Test Three Result 


4. Test Four 

This test was planned to see the roaming capability of the wireless network 
products namely Lucent WaveLAN2 access points and PCMCIA cards. Two accessed 
points and one mobile client were used for this test. The access point were located sixty 
feet apart from each other. Then FTP transfer was initiated while client was close to one 
of the access points. The client began to move away form its starting point toward the 
second access point until the client shifted. Almost no degradation was noticed during 
the shift. 


56 





V. PROTOTYPE SHIPNET SOFTWARE APPLICATIONS 


A. GENERAL 

To take the full advantage of COTS products and to fulfill the unique needs of 
Navy ships, a prototype software is developed to demonstrate the potential and 
effectiveness of hardware devices utilized in the proposed WLAN architecture. Any 
application developed has to be effective, inexpensive and flexible. A Java based 
intranet solution is proposed in [Ref. 14]. The simplicity and economy of web based 
software combined with the power and functionality of pen based computers creates a 
dynamic and effective architecture. 

A client-server model, operating in applet-type architecture, creates an application 
which can operate on PDA hardware. Also Java servlets can be used to provide another 
solution to the same architecture with a server side computational intensive approach. In 
the Java applet case, the client side is more computationally intensive. So hardware 
devices used for the applet side need more CPU power, speed and bigger memory to run 
efficiently. Moreover, the type of browser used for applet is important. Browsers may 
show slightly different results for the same application. The two most common browsers, 
Netscape and Microsoft Internet Explorer, were tested. Small differences of the GUI 
interface results were observed. Although these differences did not cause any problem 
for the Shipnet software, it is important to note that there can be small difference in 
interpreting Java byte codes for different JVMs and browsers. 

For servlet applications, client side devices need comparably less computational 

power and resources. The minimum need for a servlet to run at the client side is to 

57 



support HTML. So smaller and slower device can be used for client devices, as long as 
it has a PCMCIA card slot and an HTML browser. This feature reduces the size, 
complexity and price of the hand-held units. A light HTML browser can support these 
servlets. Also supporting a JVM is no longer a necessity. However, having a JVM 
extends the type of Java based software applications which can be used for some other 
purposes, such as online instruction or entertainment applications. For this purpose, 
different kinds of devices can be utilized for different uses. 

As mentioned in Chapter 3, servlets are running at the server side of the system 
like a daemon. They are always ready for a potential request, unless the server is down. 
When a message from an HTML page activates a servlet, the server runs a program and 
waits for a new request. The server then posts the result to the browser as an HTML 
page. HTML’s GUI capabilities aren’t as good as applet’s. This is one of the differences 
that can be seen from the screen shots given in the figures throughout this chapter. One 
of the other major differences which can not be seen from the figures is that the degree of 
interactivity a servlet provides is small when used only with HTML. But by utilizing 
applet-servlet communication, higher degree of interactivity can be supported. 

In this chapter, the applet and the servlet version of the damage control client are 
provided for comparison. Effects of both of them on Damage Control application will be 
discussed in detail. 


58 



B. GRAPHICAL USER INTERFACE (GUI) POLICIES 


The client applet and servlet modules are designed to provide a fast and effective 
connection with a database. Due to the critical nature of damage control information, 
robustness and reliability are the most important issues in the development process. Since 
the application is planned to be used with wearable and pen-based processors connected 
to a wireless LAN, the GUI should be as simple as possible. Tests showed that pull down 
menus, buttons, check and radio boxes increase the response time of the user by reducing 
the input time of the information and complexity of the input device such as pen, virtual 
keyboard, and voice recognition. 

Although voice recognition systems provide a hands-free working environment, 
they currently are not as good as we need in our application. They highly prone to errors 
in noisy environments and depend on the pronunciation of the user. Each user needs to 
be trained to operate the system. Moreover, the recognition system itself has to be 
trained for each users speaking features for reducing these errors. It needs some extra 
hardware such as microphone, headset, audio adapter to operate, this can be unsuitable 
for some users working in demanding environments. Navigation on the GUI using voice 
recognition is not as smooth as the one with pen based systems. 

With pen-based computers, there are two choices to input data. The first one is a 
virtual keyboard. The other is a hand writing recognition system. Writing with a virtual 
keyboard is slower than doing the same thing with a good hand writing recognition 
system. Among the hardware devices mentioned previously, Hitachi’s CE device has the 
best hand writing capability. Anyone can almost write with his normal wri tin g speed 
after small period of time. Casio’s Casiopedia CE device and Mitsubishi’s Amity have the 


59 


second and third places, respectively. Another disadvantage for a virtual keyboard is 
occupying the screen. Since the screens are already small for hand-held computers, the 
user needs to drag the keyboard window back and forth while interacting with GUI. On 
the other hand, using a bad hand writing recognition system causes a lot of errors which 
degrade the simplicity and fast usability features of the software. 

As mentioned above the effective usage of text fields and text areas depends 
highly on input devices. To reduce input time and provide easy interface, the number 
and content of these fields are minimized through the development of the software. In 
this thesis, it was observed that activating the fields on the screen with a pen is much 

t 

more easier and faster than the same process via a mouse on a desktop computer. 
Future development of the code and the hardware devices will clearly make the interface 
much more user friendly and powerful. 


C. DAMAGE CONTROL CLIENT APPLET 

For the damage control, the first goal was to create an application which can 
support fast and reliable data for a command and control systems. By using a WLAN 
and Java together, this feature was provided inherently. The latest portable devices can 
support almost real-time data by utilizing Java’s robust connection properties for 
networks and databases. An Intranet/SQL style architecture proposal by Rothenhaus 
[Ref. 14] lies under the database connection to this application. 

The second goal was to provide an easy interface for DC’s relatively complex 


60 



structure. The DC environment is one of the most demanding and critical situations 
faced by the submarine crew. So an extra care was spend to find a good representation of 
the DC system. To create pages used in electronic DC form, a DC manual of the attack 
submarines and current paper DC forms were examined. Also some Navy officers 
proposed a draft and checked final version of the finished product. 

The form of DC client consists of five different tabs. Each of them provides 
unique properties for the DC client (fire) applet. These tabs can be seen in Figures 22 
through 26. To reduce the execution time of the applet, each DC module’s properties 
were designed to place into the same applet as selected by tabs. Other prospective 
modules such as flooding, major steam leak can be also added to the same applet as 
different tabs. But this increases the file size which may cause some, problems for the 
application. There is a trade-of between running big files into small hand held computers 
and having a smooth working smaller applications. The former may cause slower 
response, loading and initializing errors. Writing other modules as different applets can 
provide better usability and responsiveness. The code is provided in Appendix A. 


61 




Opening peg* h«p^ff.3T.1 20127.6 £ 


t, .ij^;',-' y& tnt»m»t2on« 


Figure 22. DC Client (Fire) Applet Scene Page 



Figure 23. DC Client (Fire) Applet Central Page 


























Figure 25. DC Client (Fire) Staging Page 


63 






























Figure 26. DC Client (Fire) Atmosphere Control Page 


D. DAMAGE CONTROL CLIENT SERVLET 

The applet and the servlet version of the Damage Control client supports the same 
functionality for the database. They both provide almost real time and reliable data flow 
for the system. Some of the architectural differences are given in Chapter 3 and at the 
beginning of this chapter. 

Because of the graphical user interface capacity of the HTML, some changes are 
made to sustain a simple GUI for the servlet user. HTML does not support the tab style 
presentation of the client application. So each DC page has to be written on different 


64 



HTML page. To orchestrate the sub-pages belonging to the same module, a menu page 
seen in Figure 27 was inserted into the servlet package of the DC client module. 


[ 3 untitled - Microsoft Internet Explorer 



\t ; £cbt Mw & ***** i. flip^ * V 




mmmsmmmsi 

Eg 




jAddre^f jd http://131.120.27.67:8080/dcj5ervCov8r.htm 



.. — 



DAMAGE CONTROL SERVLET 

'•W 

(FIRE) 


CASULTY SCENE 

il? ■ 

DC CENTRAL 


WATCH STANDER 


DC STAGE 

. 

ATMOSPHERE MONITORING 

B 


111 V v l"^^ 



Figure 27. DC Client Servlet Menu Page 

Since the content of these pages are similar to the pages in the applet client, only 
Casualty Scene page is given in Figure 28 to show the visual differences between applet 
an and a servlet. 

Behind the scene, servlet module operates in the same manner that the DC client 
applet does. The only exception are the SQL queries and updates in the server module 
do not use any non-standard Java class namely JDBC01 provided in Appendix B. 
Servlet directly connects to the database by utilizing the Java sql package. 


65 

















When a page’s hyper link is activated from the menu page, corresponding 
servlet’s certain methods are invoked by the server in the process of handling requests. 
To be exact, each time the server dispatches a request to a servlet, it invokes the servlet’s 
service() method. This method handles the requests and responses. So it posts the HTML 
page on the screen of the user device. After first initialization of the page each request 
from the page is handled with a similar fashion. The code for the DC client servlet is 
provided in Appendix C. In this thesis Java Web Server 2.0 is used. But there are a lot 
of servers utilizing Servlet API. The number of the server having servlets is increasing. 
All major web servers are expected to support servlets shortly [Ref. 16]. 

For providing a feedback messages to the user, the DC client servlet posts a new 
HTML page for the user device. This page consists of the data currently written to the 
database. The system and the user errors are also written on this page. Although this is 
totally a optional choice, it has some advantages. One of them is to prevent a user 
entering wrong data into the database which may cause some serious consequences, due 
to critical nature of the application. Another advantages is in the event of a system 
failure, database may not have been modified and the user may not know whether the 
data reached the database or not. By using this kind of feedback page, user knows the 
real status of the database and can take further steps without hesitating. A simple view of 
the feedback page is given in Figure 29. 

By using the browser’s back and forward button, the user can navigate easily 
inside the application. 


66 




Figure 29. DC Client Servlet Feedback Page 











E. LOG TAKING CLIENT APPLET 

The Log Taking module is the second application of the Shipnet implementation 
which is investigated in the scope of this thesis. This module provides a fast means of 

data flow from watch standers to the high level command structures. In a submarine 
environment, instrument readings are taken each hour and written onto a log sheet. Out- 
of-range readings are circled in red and reported. Normally supervisors review these logs 
every few hours to keep track of the current condition of the ship. By using Shipnet, this 
kind of continuous data flow can be saved in databases more efficiently and quickly. 
Moreover, supervisors can reach the data whenever and wherever it is needed. Robust 
and dependable warning systems can be implemented by processing the electronic data. 
Another advantages of this application is to reduce the amount of resources such as 
space, man power spent for saving and retrieving old records. 

The log taking application was modeled after the Auxiliary Electrician Forward 
(AEF) equipment logs. The logs basically consist of two forms: one for atmosphere 
monitoring and one for auxiliary electrician use. An extra Remarks form is provided to 
comment about the current situation. All forms are designed to provide the previous six 
hours of logs and allow for the entry of the current equipment status. This six hour 
history field is added to the application to view the condition of the devices over a period 
of time at the first glance. 

There are some built-in security features embedded into the application for both 
the applet and the servlet. These features enhance the control of the watchstanders and 
the integrity of the data. One of these is that only the current time period’s entry is 
accepted. If anybody tries to enter some data before or after the designated time period. 


68 



database will not accept the entry. It enforces punctuality for each duty stations. The 
previously submitted log entries can not be changed by a later entry. These feature 
protects the integrity of the data and may be more important for some other applications 
too. 

The form of Log Taking client consists of four different tabs. Each of them 
provides unique properties for the Log Taking client (AEF) applet. This tabs can be 
seen in Figures 30 through 32 and the code for the applet is provided in Appendix D. 




... -'ii vV; 


:+.-z M3;.■ '«r: 

"Back• r.‘ r: * forwardJ*: ;’Stopi Refresh?r Home #?jSfcwBCh^ Fewcrtes;.'y ffotcwy." Chamois $ 


| j Adtkf |^1 http://131.120.27.67:12/ai^gBn yedekLog.htrnl 



.-til- 




*&*** ! Atmosphor* Control Logs j Ram»rics J 

4»Qcf»SM* ) - 


yi"';'' iV't-ViJ 






. a r> v aAh. 1 r- 




• y.v';. >• 


mmm 

BiBB rHBBE jjffi jjjf&fiy FSJPw FMI 

BBSS* b KJBB^ MftSB nFBK S 

Be EEjUK 

mm mmsmi ibs^^^uiwi 

P7TOB® fTHBB ETTEEffi KTTTMK BTEIESw £ 

bSB CTimmU 

F-T S* jL'Z.'i 1 . g LffiBa fTF-J 


fiSFffjTjJB 

MBm B3BK 



MBKlwt tam KUK EM 


SKjrTriJB 

^■pK3@t P^355S f >: avy 


HllibgiliM 

A3 ffilf [HbbbI ?TB|MBtP7Tr|MB 

■fil 1 






£4: 


{<©] Apptot started 




I- IK Internet zon» 


Figure 30. Log Taking Client Applet 


69 






























Figure 32. Log Taking Atmosphere Control Page 


70 
























































F. 


LOG TAKING CLIENT SERVLET 


Similar to the DC servlet, a menu page with hyper links is utilized for Log T akin g 
to coordinate the different pages, see Figure 33. 

Although both DC and Log Taking servlets architecturally have the similar 
properties, Log Taking servlet has a different kind of implementation approach than the 
DC Client. The code is provided in Appendix E. This difference is caused by the nature 
of both applications. In the DC application, servlets only updates the database for each 
casualty scene. It does not need any data to pass to the user. So it is very straight 
forward. However, in Log Taking application user needs some data from the database to 
understand the previous situation. 

The main HTML page of the each form has a MODE pull down menu, shown in 
Figure 34, which changes the function of that particular form. The same form can be 
used to retrieve the previous entries or to submit current time period’s data. When 
Archive mode is used, a request is sent to the server to initiate a particular servlet to get 
the data and post it to the user’s computer. Figure 35 shows the table posted to the screen 
with retrieved data. In Record mode it works as it was explained in DC Client servlet and 
only modifies the database. The error messages and warnings are posted to the screen for 
feedback shown in Figure 36. 


71 



|«- untitled - Netscape 



.£te: &ft :&w £bnmBiBatar'JQs^>. 



1 m W * a M H 9 i P 

3 Beck Por*^efd Reload Home, - - Search. V-Netscape Bint Security Cap- 


jg 

| ;^pookto^ 31.120.27.67:8080/log_Cover.htm 

3 ©'VMarsftBtelBd 

®FlhdSP^s Qiai»efe : >C' 


LOG TAKING SERVLET 


1 

AEF LOGS 



400 CYCLE SETS 



DETECTORS & INDICATORS 


) 

ATMOSPHERE CONTROL LOGS 


I: 

REMARKS 


| 

&h&*v \Ar-©«aii^ltaw v. ^c 


s£)l 


Figure 33. Log Taking Menu Page 


” 5 * a’”-- 


,_,, ,£8k&’-'; 

V- 5 -Prtwt y-'•. Stany 




31.120.27.67:B080/Lag Oy>deSelhmr 


^lwrtairtM>s»ao< WtbMoi Contact j Pownlobd g? F^Sto Cbarmete 


v| CTWhrfaftilalBd 


400 CYCLE SETS LOG 


TIME [00:00 ^ MODE [Archive 
NO.l_KO.2 

......DC AMP....r 

L...AC AMP....f 


DC AMP..X 


AC AMP....J 
FREQ.{ 


..FREQ.f 


VOLTS.| 

GRND.| _ 

^Rieggi:! -Siibrnit [ 


...VOLTS.f 

..GRND.P 


IF YOU WANT TO SEE PREVIOUS DATA BEFORE ’SUBMIT, 
PLEASE CHANGE THE MODE FIELD TO ’ARCHIVE’. 




. . IDo«Mn»nt Don* ;. 


.=1 

: d. 


Figure 34. Log Taking AEF Log Page 


72 
































■g -MiT Qoailm etkd 


IP 31.120.27.67:B0e0/Mfvtt/Log_cyctoSt 


Dowrtoad 9 CtodSfcM..i^;CNww»fe r 


Log 400 Cycle Set Report (Press Back button to return) 


! timejdcl Wcl jfreql (voltl [gradl [dc2;[ac2 \6rtxfl \vo*2 |gnxt2 
: 7?o6 jl3 j20 1243' jm" 10 jl5 |jl9 [248 |XXX |0.8 , 

6:00 [16 [20 [243 : |110 (0.3 “ |16 118 1246 |113 k).6 

5*X>;[l5 [22 ;[245 Ijl08 (6 jl5 118 [245 '.jll5 0.5 '' 

4*)0;jl4 :j22 ;|240 jlll |0.|l4 [20 [244 I|ll4 >0.4 I 

:3«0;[iy":j23 ')241 ;[XX3 — )0.3 jl3 :^T^43 ~|ll3 |03 i 

' 2^00:|l6 : te0 >41 ' ;|ll5 ‘ [0.2 jl2 \Zl'\2A5" :jll2 [6.2 


YOU ONLY RETRETVED PREVIOUS DOCUMENT. IF YOU WANT TO SUBMIT DATA, PLEASE 
CHANGE THE MODE 


ja»f=E=fTr— 


Figure 35. Log Taking Retrieved Data Page 


Loq 400 Cycle Set Report - Netscupe 



wiKEHSEa 


Log 400 Cycle Set Report (Press Back button to return) 


time = 17.00 
del = 13 
acl =20 
freql = 243 
voltl = 110 
gmdl = 0 
dc2 = 15 
ac2 = 21 
freq2 = 245 
volt2 = n2 
gmd2 = 0 


Hus hour's log is already entered. You can not change the old entries. 
You are trying to modify different period's log. You are not allowed 


iDocumentOooer 


Figure 36. Log Taking Feedback Page 





























THIS PAGE INTENTIONALLY LEFT BLANK 


74 



VI. CONCLUSIONS AND RECOMMENDATIONS 

A. SUMMARY 

COTS wireless LAN and handheld computer products were investigated for 
shipboard LANs. For WLAN products, the main concern was multi-path-fading effect of 
the metal hull on radio frequency components. The number of access points required to 
cover a ship and the number of user machines directly affect the cost and the speed of the 
WLAN. If the number of the APs goes up, the cost goes up. If the number of the clients 
served from the same AP goes up, the data rate goes down. Transmission range, 
throughput, IEEE 802.11 compliance, power consumption, and cost issues were 
evaluated. The results of the laboratory and shipboard tests conducted onboard the USS 
Memphis (SSN-691) in August 1999 showed that WLAN is feasible for onboard network 
applications. 

To provide the best COTS handheld and wearable computer products for 
shipboard WLAN environment, Mitsubishi’s Amity VP, Casio’s Cassiopedia PA-2400, 
Hitachi’s HPW-600ET, and VIA’s Flex mobile computers were evaluated for input 
method, OS, battery life, Java software adaptability, cost and comfort. Although 
machines with full OS have some advantages like better Java and software support, CE 
devices have their own advantages like low cost, long battery life, and small dimensions. 
Pen-based portable devices are useful to utilize for shipboard WLAN applications. 

Two different applications were developed for prototype Shipnet software. 
Damage control and log taking applications were written in Java with a web browser type 
of interface. The main goals were to create a robust database connectivity and user 


75 




friendly interfaces for specific applications. Java’s modular, distributed and simple nature 
helped to achieve those goals. The reporting agent on the client side was written in both 
an applet and a servlet. Since JVM is supported by almost every web browser, applets 
are suitable to create web-based software applications for handheld PCs. For CE devices 
with light browsers which do not support a JVM, Java servlets were used to create 
applications with the same functionality as applets provide. In this process HTML pages 
were used as GUI of servlets at the client side devices. 

Tests and demonstrations conducted in laboratory and onboard indicated that the 
prototype Java software is totally compatible with WLAN and mobile computer products 
and useful. Moreover, Feedback received from crewmen during shipboard testing 
supported this conclusion. 


B. FURTHER RESEARCH 

Although the most commercial WLAN and mobile computer products in the 
market were screened and some of them have been tested for onboard intranet solutions 
by NPS Wireless Network Research Group, new generation of more powerful products 
are introduced to the market everyday. So evaluating new products should continue. 
One of the best examples is that Lucent increased the data rate of its PCMCIA card from 
average 2 Mbps to 11 Mpbs by introducing a new turbo card recently. 

Voice recognition systems are developing rapidly as well. In the future, those 
programs will be mature enough to be utilized in more demanding environments. A 
further research should continue to integrate voice-input capabilities into Shipnet. The 


76 



feedback gained from a Shipnet survey showed that crewmen’s first choice is voice input. 
When integrated efficiently, this product can provide fast and reliable input and hand-free 
working environment for users. 

To take advantage of both applet and servlet Java applications, applet-servlet 
communication can be established. Better applications can be developed by utilizing 
suitable features of both. For example, a better GUI can be created by applets. But for 
background computations, servlet is faster and needs less computational power. 

In the scope of this thesis, only Shipnet damage control and log taking modules 
were created. In prior theses, maintenance, supply inventory and central console modules 
were developed. However there are still some non-tactical shipboard systems that can be 
potentially implemented by Shipnet prototype software. 

Depending on the computational power of portable devices 3D images can be 
incorporated with Java. For example, in damage control all casualties and specific 
important locations such as compartments, hoses can be seen on a screen momentarily by 
simply submitting a DC client form from a user machine to the database server. This 
implementation is especially useful for central control applications. It may take the place 
of status boards. 

Two new application areas can be provided for crew by using same infrastructure. 
Those are online interactive technical support and entertainment. In every situation, help 
can be "one touch" away from the user. Or one can get email or surf on the Web in his 
leisure time. 


77 



C. CONCLUSION 

It is a fact that accurate and timely information is power to win a battle. But to 
get that information, we have to provide correct tools to those who need it. The correct 
tool to leverage information technology for afloat Navy is to utilize mobile computing. 

In this thesis the combination of wireless LAN technology and mobile computer 
devices operating Java based software is examined. Although shipboard and submarine 
environment have unique difficulties to implement WLAN technology, today’s network 
technology and high tech equipment are able to overcome those problems. 

The wireless network and portable computer products examined in this research 
can provide enough capacity to create an effective onboard wireless intranet solution, 
Shipnet, for non-tactical systems. Moreover, this solution comes with a lot of benefits 
such as low cost (installation to maintenance), higher flexibility, reliable information 
flow from down to top and vice versa, quick reaction time, computing power at every 
level etc. 

To meet the needs of both Shipnet and different platforms utilized in Navy’s ships 
and submarines, prototype Java-based software is designed. Java was chosen, because of 
distributed, platform independent and robust nature of the language. It fits all the 
different kinds of hardware like a glove. Besides, development and maintenance of the 
code is very easy when compared to other object-oriented languages like C++ or ADA. 

Shipnet like wireless intranet applications are the future of mobile computing for 
dynamic working environments. But we don’t have to wait till tomorrow, because all of 
the parts are currently available in our hands. 


78 



APPENDIX A. DAMAGE CONTROL CLIENT APPLET CODE 


//DC Client Applet 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Applet allows the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Applet can be viewed at: 

// http://131.120.27.67:12/dc.html 
// Date : 30 Sept. 1999 

import j ava.io.*; 
import java.awt.*; 
import j ava.applet.*; 
import j ava.awt.event.*; 
import java.util.*; 
import java.util.Date; 
import jl02.sql.*; 
import j ava.net.*; 
import java.lang.*; 

import Symantec.itools.awt.TabPanel; 

import Symantec.itools.awt.shape.VerticalLine; 

import Symantec.itools.util.Timer; 

import Symantec.itools.awt.StateCheckBox; 

public class dc_Client extends Applet implements Runnable, 
ActionListener 
{ 

public void start() 

{ 


super.start(); 
try 

{ 

theJDBC.openConnection(); 
} // end if 

catch (Exception e) 

{ 

handleException(e); 

} // end catch 

} // end method start 


public void stop() 

{ 

try 

{ 

theJDBC.closeConnection(); 


79 


watchThread.stop(); 
} // end try 

catch (Exception e) 

{ 

handleException(e); 
} // end catch 

} // end method stop 


public void init() 
{ 


super.init(); 

// Take out this line if you don't use Symantec. itools .net .RelativeURL 
//or Symantec.itools.awt .util.StatusScroller 

Symantec.itools.lang.Context.setApplet(this)? 

// This code is automatically generated by Visual Cafe when 

you add 

// components to the visual environment. It instantiates 
and initializes 

// the components. To modify the code, only use code syntax 

that matches 

// what Visual Cafe can generate, or Visual Cafe may be 
unable to back 

// parse your Java file into its visual environment. 

//{{INIT_CONTROLS 
setLayout(null); 
setSize(691,441); 

setBackground(new Color(12632256)); 

tabPanell = new Symantec.itools.awt.TabPanel(); 

try { 

j ava.lang.String[] tempString = new 

j ava.lang.String[5] ; 

tempString[0] = new java.lang.String("SCENE"); 
tempString[1] = new java.lang.String("DCCENT"); 
tempString[2] = new java.lang.String("WATCH"); 
tempString[3] = new java.lang.String("DCSTAGE"); 
tempString[4] = new java.lang.String("ATM"); 
tabPanell.setPanelLabels(tempString); 

} 

catch(java.beans.PropertyVetoException e) { } 
try { 

tabPanell.setCurrentPanelNdx(4); 

} 

catch(java.beans.PropertyVetoException e) { } 

tabPanell.setBounds(96,60,600,312); 
add(tabPanell); 

panell = new java.awt.Panel(); 

pane11.setLayout(null); 

panell.setVisible(false); 

panell.setBounds(12,33,576,268); 

panell.setBackground(new Color(12632256)); 

tabPanell.add(panell); 

label300 = new java.awt.Label("FIRE CLASS"); 

80 



Iabel300 = new java.awt.Label("FIRE CLASS"); 
label300.setBounds(300,21,80,20); 
panell.add(labe!300); 

label3 = new java.awt.Label("FIRE IN"); 
label3.setBounds(12,21,60,20) ; 
panell.add(label3); 

label7 = new java.awt.Label("FIRE IS "); 
label7.setBounds(12,42,60,20); 
panell.add(label7); 

label8 = new java.awt.Label("REFLASH WATCH"); 
label8.setBounds(12,189,125,12); 
panell.add(label8); 

label9 = new java.awt.Label("HOSE”); 
label9.setBounds(84,212,48,20); 
panell.add(label9); 

label10 = new java.awt.Label("NFTI INSPECTION") 

label10.setBounds(12,240,123,24); 

panell.add(labellO); 

choice2 = new j ava.awt.Choice(); 

choice2.addltem("CSES"); 

choice2.addltem("CONTROL"); 

choice2.addltem("NAV CENTER"); 

choice2.addltern("FCML"); 

choice2.addltem("TORPEDO RCOM"); 

choice2.addltem("AMR"); 

choice2.addltern("ERUL"); 

choice2.addltem("ERML"); 

choice2.addltem("ERF"); 

choice2.addltem("TGLO BAY"); 

choice2.addltem("COND. BAY"); 

choice2.addltem("MSW BAY"); 

choice2.addltem("SHAFT ALLEY"); 

choice200 = new java.awt.ChoiceO; 

choice200.addltern("A"); 

choice200.addltem("B n ); 

choice200.addltem( n C"); 

try { 

choice2.select(0); 
choice200.select(0); 

} 

catch (IIlegalArgumentException e) { } 

panell.add(choice2); 

panell.add(choice200) ; 

choice2.setBounds(84,15,120,40);//40 

choice200.setBounds(400,15,40,20); 

choices = new java.awt.ChoiceO; 

choice5.addltem( "BURNING") ; 

choices.addltem("SPREADING"); 

choice5.addltem("CONTROLLED"); 

choices.addltem("OUT"); 

choices.addltem("OVERHAULED"); 

try { 

choices.select(0); 

} 

catch (IllegalArgumentException e) { } 
panell.add(choices); 


81 



choice5.setBounds(84,39,144,40); 
choice6 = new java.awt.Choice(); 
choices.addltem("FIREHOSE"); 
choice6.addItem("C02 EXT"); 
choice6.addltem("AFFF EXT"); 
choices.addltem("PPK EXT"); 
try { 

choice6.select(0) ; 

} 

catch (IllegalArgumentException e) { } 

panell.add(choices); 

choice6.setBounds(144,183,132,40); 

choice7 = new java.awt.Choice(); 

choice7.addltem("FCML"); 

choice7.addltem("TORPEDO ROOM"); 

choice7.addltem("AMR"); 

choice7.addltem("ERUL* FWD"); 

choice7.addltem("ERUL AFT"); 

choice7.addltem("TGLO BAY"); 

choice7.addltem("MSW BAY"); 

try { 

choice7.select(0); 

} 

catch (IllegalArgumentException e) { } 

panell.add(choice7); 

choice7.setBounds(144,207,132,40); 

label4 = new java. awt. Label ("MAM IN CHARGE"); 

label4.setBounds(12,80,110,20); 

panell.add(label4); 

label5 = new java.awt.Label("ADD 7 L ASST"); 
label5.setBounds(12,110,79,12); 
panell.add(labels); 

label 6 = new java, awt .Label ("DAMAGED EQUIPMENT") 

label6.setBounds(12,165,152,12); 

panell.add(label6); 

choice3 = new java.awt.Choice(); 

choice3.addltem("LCDR DIORIO"); 

choice3.addltem("LCDR WOLD"); 

choice3.addltem("LT MUGGLEWORTH"); 

choice3.addltem("LT JONES"); 

choice3.addltem("LT DWYER"); 

choice3.addltem("LTjg INDELOCATO"); 

choice3.addltem("ETC SMITH"); 

choice3.addltem("EMC FOSTER"); 

choice3.addltem("MMC ALEMAN"); 

try { 

choice3.select(0); 

} 

catch (IllegalArgumentException e) { } 
panell.add(choice3); 
choice3.setBounds(132,75,156,40); 
choice4 = new java.awt.Choice(); 
choice4.addltem("NONE"); 
choice4.addltem("MINOR"); 
choice4.addltem("MODERATE B ); 
choice4.addltem("EXTENSIVE"); 

82 



try { 


choice4.select(0) ; 

} 

catch (IllegalArgumentException e) { } 

panell.add(choice4); 

choice4.setBounds(168,159,144,40); 

buttonl3 = new java.awt.Button(); 

buttonl3.setLabel("SUBMIT"); 

buttonl3.setBounds(480,207,62,26); 

buttonl3.setBackground(new Color(12632256)); 

buttonl3.addActionListener(this); 

panell.add(buttonl3); 

checkboxl = new java.awt.Checkbox("PERS"); 
checkboxl.setBounds(96,111,63,15); 
panell.add(checkboxl); 

checkbox2 = new j ava.awt.Checkbox("OBA■); 
checkbox2 .setBounds (1-80, 111, 60,15) ; 
panell.add(checkbox2)? 

checkbox3 = new j ava.awt.Checkbox("FFE n ); 
checkbox3.setBounds(264,111,60,15); 
panell.add(checkbox3); 

checkbox4 = new java.awt.Checkbox("DC EQ"); 
checkbox4.setBounds(96,135,60,15); 
panell.add(checkbox4); 

checkbox5 = new java.awt.Checkbox("NTFI"); 
checkboxS.setBounds(180,135,60,15); 
panell.add(checkbox5); 

checkbox6 = new j ava.awt.Checkbox("SAT"); 

checkbox6.setBounds(144,245,60,15); 

panell. add (checkbox6).; 

panel2 = new j ava.awt.Panel(); 

panel2.setLayout(null); 

panel2.setVisible(false); 

pane 12 . setBoimds (12,33,576,268); 

panel2.setForeground(new Color(0)); 

panel2.setBackground(new Color(12632256)) ; 

tabPanell.add(panel2); 

labelll = new java.awt.Label("HOSE TEAMS : A") 

labelll.setBounds(24,35,110,12); 

pane12.add(labelll); 

choice8 = new java.awt.ChoiceO; 

choice8.addltem("CSES"); 

choice8.addltem("CONTROL"); 

choice8.addltem("NAV CENTER"); 

choice8.addltem("FCML"); 

choice8.addltem("TORPEDO- ROOM"); 

choice8.addltem("AMR"); 

choice8.addltem("ERUL"); 

choice8.addltem("ERML"); 

choice8.addltem("TGLO BAY"); 

choice8.addltem("COND. BAY”); 

choice8.addltem("MSW BAY"); 

choice8.addltem("SHAFT ALLEY"); 

try { 

choice8.select (0); 

} 


83 



catch (IllegalArgumentException e) { } 

panel2.add(choice8) ; 

choice8.setBounds(140,27,118, 40) ; 

labell2 = new java.awt-Label("HOSE"); 

labell2.setBounds(264,31,38,20) ; 

panel2.add(label!2); 

choice9 = new java.awt .Choice () ; 

choice9.addltem("FCML") ; 

choice9.addltem("TORPEDO ROOM"); 

choice9.addltem("AMR"); 

choice9.addltem("ERUL FWD"); 

choice9.addltem("ERUL AFT"); 

choice9.addltem("TGLO BAY”); 

choice9.addltem("MSW BAY"); 

try { 

choice9.select(0) ; 

} 

catch (IllegalArgumentException e) { } 
panel2,add(choice9); 
choice9.setBounds(312,27,104,40) ; 
labell3 = new java.awt.Label("OBA TIME"); 
labell3.setBounds(432,15,64,20) ; 
panel2.add(labell3); 

textFieldl = new java.awt.TextField(); 

textFieldl.setBounds(432,37,60,18); 

panel2.add(textFieldl); 

buttonl = new j ava.awt.Button(); 

buttonl.setLabel("START"); 

buttonl.setBounds(516,38,50,18) ; 

buttonl.setBackground(new Color(12632256)) 

pane12.add(buttonl); 

labell4 = new java.awt.Label("B"); 

labell4.setBounds(123,54,12,24) ; 

panel2.add(labell4); 

choicelO = new java.awt.Choice(); 

choicelO.addltem("CSES") ; 

choicelO.addltem("CONTROL"); 

choicelO.addltem("NAV CENTER"); 

choicelO . addltem ( "FCML") ; 

choicelO. addltem ("TORPEDO ROOM") ; 

choicelO. addltem ("AMR") ; 

choicelO.addltem("ERUL"); 

choicelO .addltem("ERML") ; 

choicelO.addltem("TGLO BAY"); 

choicelO.addltem("COND. BAY"); 

choicelO.addltem("MSW BAY"); 

choicelO.addltem("SHAFT ALLEY"); 

try { 

choicelO.select(0); 

} 

catch (IllegalArgumentException e) { } 
panel2.add(choicelO); 
choicelO.setBounds(140,51,118,40) ; 
labe!15 = new java.awt.Label("HOSE"); 
labell5.setBounds(264,54,38,20) ; 
panel2.add(labell5); 


84 



choicell = new java.awt.Choice(); 
choicell.addltem("FCML n ); 
choicell.addltem("TORPEDO ROOM”); 
choicell.addltem("AMR"); 
choicell.addltem("ERUL FWD"); 
choicell.addltem{"ERUL AFT"); 
choice11.addltem("TGLO BAY"); 
choicell.addltem("MSW BAY"); 
try { 

choicell.select(0); 

} 

catch (IllegalArgumentException e) { } 

panel2.add(choicell); 

choicell.setBounds(312,51,104,40); 

textField2 = new java.awt.TextField(); 

textField2.setBounds(432,63,60,18); 

panel2.add(textField2); 

button2 = new j ava.awt.Button(); 

button2.setLabel( n START"); 

button2.setBounds(516,63,50,18); 

button2.setBackground(new Color(12632256)) 

panel2.add(button2); 

choicel2 = new java.awt.Choice(); 

choicel2.addltem( n CSES n ); 

choicel2.addltem("CONTROL"); 

choicel2.addltem("NAV CENTER"); 

choicel2.addltem("FCML"); 

choicel2.addltem("TORPEDO ROOM"); 

choicel2.addltem("AMR"); 

choicel2.addltem("ERUL"); 

choicel2.addltem("ERML"); 

choicel2.addltem("TGLO BAY"); 

choicel2.addltem("COND. BAY"); 

choicel2.addltem("MSW BAY"); 

choicel2.addltem("SHAFT ALLEY"); 

try { 

choicel2.select(0); 

} 

catch (IllegalArgumentException e) { } 

panel2.add(choicel2); 

choicel2.setBounds(140,75,118,40); 

label16 = new java.awt.Label("HOSE"); 

labe!16.setBounds(264,81,38,20); 

panel2.add(labell6); 

choicel3 = new java.awt.Choice(); 

choicel3.addltem("FCML"); 

choicel3.addltem("TORPEDO ROOM"); 

choice13.addltem("AMR"); 

choicel3.addltem("ERUL FWD"); 

choicel3.addltem("ERUL AFT"); 

choicel3.addltem("TGLO BAY"); 

choicel3.addltem("MSW BAY"); 

try { 

choicel3.select(0) ; 

} 

catch (IllegalArgumentException e) { } 

85 


panel2.add(choicel3); 

choice!3.setBounds(312,75 ,104,40); 

textField3 = new java.awt.TextField(); 

textField3.setBounds(432,87,60,18); 

panel2.add(textField3); 

button3 = new java.awt.Button(); 

button3.setLabel( n START"); 

button3.setBounds(516,87,50,18); 

button3.setBackground(new Color(12632256)) 

panel2.add(button3)? 

choice!4 = new java.awt .Choice () ;> 

choicel4.addltem("CSES"); 

choicel4.addltem("CONTROL"); 

choice14.addltem("NAV CENTER"); 

choicel4.addltem("FCML■); 

choicel4.addltem("TORPEDO ROOM"); 

choicel4.addltem("AMR"); 

choicel4.addltem("ERUL") ; 

choice!4 . addltem (" ERML n ) ; 

choicel4.addltem("TGLO BAY"); 

choicel4.addltem("COND. BAY"); 

choicel4.addltem("MSW BAY"); 

choicel4.addltem( n SHAFT ALLEY"); 

try { 

choicel4.select(0); 

} 

catch (IllegalArgumentException e) { } 

panel2.add(choice!4); 

choicel4.setBounds(140,99,118,40); 

labell7 = new java.awt.Label("HOSE"); 

labell7.setBounds(264,105,38,20); 

panel2.add(labell7); 

choicelS = new java.awt.Choice(); 

choicel5.addltem("FCML"); 

choicel5.addltern("TORPEDO ROOM"); 

choicelS .addltem("AMR") ; 

choicel5.addltem("ERUL FWD"); 

choicel5.addltem("ERUL AFT"); 

choicelS.addltem("TGLO BAY"); 

choicel5. addl tern ("MSW BAY"); 

try { 

choicelS.select(0); 

} 

catch (IllegalArgumentException e) { } 

panel2.add(choicel5); 

choicel5.setBounds(312,99,104,40) ; 

textField4 = new java.awt.TextField(); 

textField4.setBounds(432,111,60,18); 

panel2.add(textField4); 

button4 = new java.awt-Button(); 

button4.setLabel("START"); 

button4.setBounds(516,111,50,18); 

button4.setBackground(new Color(12632256)) 

pane12.add(button4); 

labell8 = new java.awt.Label("C"); 

labell8.setBounds(123,79,12,24); 

86 



panel2.add(labell8) ; 
labell9 = new java.awt.Label("D”); 
labell9.setBounds(123,103,12,24); 
panel2.add(labell9); 

textField6 - new java.awt.TextField(); 
textField6.setBounds(180,159,60,18); 
panel2.add(textField6); 
button6 = new java.awt.Button(); 
button6.setLabel("START"); 
button6.setBounds(264,159,50,18); 
button6.setBackground(new Color(12632256)); 
panel2.add(button6); 

textField7 = new java.awt.TextField(); 

textField7.setBounds(408,159,60,18) ; 

panel2.add(textField7); 

button7 = new java.awt.Button(); 

button7.setLabel("START"); 

button7.setBounds(492,159,50,18); 

button7.setBackground(new Color(12632256)); 

panel2.add(button7); 

label20 = new java.awt.Label("XO/MIC"); 
label20.setBounds(115,159,55,24); 
panel2.add(label20); 

label21 = new java.awt.Label("SMIC"); 
label21.setBounds(370,157,38,24); 
panel2.add(label21); . 

Iabel22 = new java.awt.Label("OBA"); 
label22.setBounds(192,140,40,20) ; 
panel2.add(label22) ; 
label24 = new java.awt.Label("OBA"); 
label24.setBounds(420,142,40,20) ; 
panel2.add(label24); 

label25 = new java.awt.Label("GROUND CHECKS"); 
label25.setBounds(24,195,125,12); 
pane12.add(label25) ; 

Groupl = new CheckboxGroup(); 

radioButton4 = new java.awt.Checkbox("SAT", Groupl, false) 
radioButton4.setBounds(180,195,60,10); 
panel2.add(radioButton4); 

radioButton5 = new java.awt.Checkbox("UNSAT", Groupl, 

false) ; 

radioButton5.setBounds(264,195,65,10); 
pane 12 . add (radioButton5) ; 

Groiip2 = new CheckboxGroup () ; 

radioButton6 = new java.awt.Checkbox("SAT", Group2, false) 
radioButton6.setBounds(180,219,60,10); 
panel2.add(radioButton6); 

radioButton7 = new java.awt.Checkbox("UNSAT", Group2, 

false) ; 

radioButton7.setBounds(264,219,65,10) ; 
panel2.add(radioButton7) ; 

label26 = new java.awt.Label("ATMOSPHERE CHECKS"); 

label26.setBounds(24,219,155,12) ; 

pane12.add(label26) ; 

buttonl5 = new java.awt.Button() ; 

buttonl5.setLabel("SUBMIT"); 

87 


buttonlS.setBounds(480,207,62,26); 

buttonl5.setBackground(new Color(12632256)); 

buttonlS.addActionListener(this); 

panel2.add(buttonlS); 

panel3 = new j ava.awt.Panel(); 

panel3.setLayout(null); 

panel3.setVisible(false); 

panel3.setBounds(12,33,576,268); 

tabPane11.add(pane13); 

label1 = new java.awt.Label("REPORTING STATION"); 

labell.setBounds(10,5,145,23); 

panel3.add(labell); 

choicel = new java.awt.ChoiceO; 

choicel.addltem("CSES"); 

choicel.addltem(■CONTROL"); 

choicel.addltem("NAV CENTER"); 

choicel.addltem("FCML■); 

choicel.addltem("TORPEDO ROOM"); 

choicel.addltem("AMR"); 

choicel.addltem("ENGINE ROOM"); 

try { 

choicel.select{0) ; 

} 

catch (IllegalArgumentException e) { } 

panel3.add(choicel); 

choicel.setBounds(160,6,126,21); 

label2 = new java.awt.Label("COMPARTMENT RIG :"); 

label2.setBounds(10,39,150,23); 

panel3.add(label2); 

buttonl6 = new java.awt.Button(); 

buttonl6.setLabel("SUBMIT"); 

buttonl6.setBounds(480,207,62,26); 

buttonl6.setBackground(new Color(12632256)); 

buttonl6.addActionListener(this); 

panel3.add(buttonl6); 

checkbox7 = new java.awt.Checkbox("FIRE \\ GEN. EMERG") 
checkbox7.setBounds(150,73,144,15); 
panel3.add(checkbox7); 

checkbox8 = new j ava.awt.Checkbox(■SNORKEL \\ VENT."); 
checkbox8.setBounds(150,107,132,15); 
panel3.add(checkbox8); 

checkbox9 = new j ava.awt.Checkbox(■RFRE"); 

checkbox9.setBounds(150,141,60,15); 

pane13.add(checkbox9); 

panel4 = new j ava.awt.Panel(); 

pane!4.setLayout(null); 

panel4.setVisible(false); 

panel4.setBounds(12,33,576,268); 

tabPanell.add(panel4); 

label23 = new java.awt.Label("MAN IN CHARGE"); 

label23.setBounds(24,20,132,24); 

panel4.add(label23); 

choicel6 = new java.awt.ChoiceO; 

choicel6.addltem("LCDR DIORIO"); 

choicel6.addltem("LCDR WOLD"); 

choicel6.addltem("LT MUGGLEWORTH"); 

88 





choicel6.addltem( n LT JONES"); 
choicel6.addltem("LT DWYER"); 
choicel6.addltem("LTjg INDELOCATO"); 
choicel6.addltem("ETC SMITH"); 
choicelS.addltem("ETC FOSTER"); 
choice16.addItem("MMC ALEMAN"); 

try { 

choice!6.select(0); 

} 

catch (IllegalArgumentException e) { } 

panel4.add(choicel6); 

choicel6.setBounds(168,15,145,40); 

label27 = new java.awt.Label("OBA TIMES :") 

label27.setBounds(24,51,95,20); 

panel4.add(label27); 

label28 = new java.awt.Label("HOSE TEAM A") 
label28.setBounds(108,75,99,20); 
panel4.add(label28); 

label29 = new java.awt.Label("HOSE TEAM B") 
label29.setBounds(108,99,99,20); 
panel4.add(label29) ; 

label30 = new java.awt.Label("HOSE TEAM C") 
label30.setBounds(108,123,99,20); 
panel4.add(label30); 

label31 = new java.awt.Label("HOSE TEAM D") 
label31.setBounds(108,147,99,20); 
panel4.add(label31); 

label40 = new java.awt.Label("OBA TIME"); 
label40.setBounds(228,51,64,20); 
panel4.add(label40); 

textField5 = new java.awt.TextField(); 

textField5.setBounds(228,75,60,18); 

panel4.add(textField5); 

button5 = new java.awt.Button(); 

button5.setLabel{"START"); 

button5.setBounds(312,75,50,18) ; 

button5.setBackground(new Color(12632256)); 

panel4.add(buttons); 

textField8 = new java.awt.TextField(); 
textField8.setBounds(228,99,60,18); 
panel4.add(textField8); 
button8 = new java.awt.Button(); 
button8.setLabel("START"); 
button8.setBounds(312,99,50,18); 
button8.setBackground(new Color(12632256)); 
panel4.add(button8); 

textField9 = new java.awt.TextField(); 

textField9.setBounds(228,123,60,18); 

panel4.add(textField9); 

button9 = new j ava.awt.Button(); 

button9.setLabel("START"); 

button9.setBounds(312,123,50,18); 

button9.setBackground(new Color(12632256)); 

panel4.add(button9); 

textFieldlO = new java.awt.TextField(); 

89 



textFieldlO.setBounds (228 , 147,60,18) ; 

panel4.add(textFieldlO); 

buttonl0 = new java.awt.Button(); 

buttonlO.setLabel("START"); 

buttonlO.setBounds(312,147,50,18); 

buttonlO.setBackground(new Color(12632256)); 

panel4.add(buttonlO); 

label41 = new java.awt.Label("XO / MIC"); 
label41.setBounds(108,195,84,20); 
panel4.add{label41); 

label42 = new java.awt.Label("SMIC"); 
label42.setBounds(108,219,84,20); 
panel4.add(label42); 

textFieldll = new java.awt.TextField() ; 
textFieldll.setBounds(228,195,60,18) ; 
panel4.add(textFieldll); 
buttonll = new java.awt.Button(); 
buttonll.setLabel("START"); 
buttonll.setBounds(312,195,50,18); 
buttonll.setBackground(new Color(12632256)); 
pane14.add(buttonll); 

textFieldl2 = new java.awt.TextField(); 

textFieldl2.setBounds(228,219,60,18) ; 

panel4.add(textFieldl2); 

buttonl2 = new j ava.awt.Button(); 

buttonl2.setLabel("START"); 

buttonl2.setBounds(312,219,50,18); 

buttonl2.setBackground(new Color(12632256)); 

panel4.add(buttonl2); 

buttonl7 = new java.awt.Button(); 

buttonl7.setLabel("SUBMIT"); 

buttonl7.setBounds(480,207,62,26); 

buttonl7.setBackground(new Color(12632256)); 

buttonl7.addActionListener{this); 

pane14.add(buttonl7); 

panels = new j ava.awt.Panel() ; 

panels.setLayout(null); 

panel5.setBounds(12,33,576,268); 

tabPanell.add(pane15); 

label43 = new java.awt.Label("ATMOSPHERE MONITORING”) 

labe!43.setBounds(24,15,185,24); 

label43 . setBackgroiind (new Color (12632256) ) ; 

panels.add(label43); 

choicel7 = new java.awt.Choice(); 

choicel7.addltem("FWD COMP"); 

choicel7.addltemf"ENGINEER COM”); 

try { 

choicel7.select(0); 

} 

catch (IIlegalArgumentException e) { } 

panels.add(choicel7); 

choicel7.setBounds(216,15,135,40); 

label44 = new java.awt.Label( B 02 (130-220 TORR)”); 
label44.setBounds(24,87,120,12) ; 
panel5.add(label44); 

Groupl2 = new CheckboxGroup(); 

90 



radioButton8 = new java.awt.Checkbox("SAT", Groupl2 , 

false); 

radioButton8 .setBounds (180,87,60,10) ; 
panel5.add(radioButton8); 

radioButton9 = new java.awt.Checkbox("UNSAT", Groupl2, 

false); 

radioButton9.setBounds(264,87,65,10); 
panel5.add(radioButton9); 

Groupl3 = new CheckboxGroup(); 

radioButtonlO = new java.awt.Checkbox("SAT", Groupl3, 

false); 

radioButtonlO.setBounds(180,111, 60,10) ; 
panels.add(radioButtonlO); 

radioButtonll = new java.awt.Checkbox("UNSAT", Groupl3, 

false); 

radioButtonll.setBounds(264,111, 65,10) ; 
panel5.add(radioButtonll); 

label45 = new java.awt.Label("H2 ( < 7.6 TORR)"); 

label45.setBounds(24,111,144,12); 
panel5.add(label45); 

labe!46 = new java.awt.Label ("CO ( < 152 MTORR) ") ; 
label46.setBounds(24,159,125,12); 
panels.add(label46); 

GrouplS = new CheckboxGroup(); 

radioButtonl2 = new java.awt.Checkbox("SAT", Groupl5, 

false) ; 

radioButtonl2.setBounds(180,159,60,10); 
pane15.add(radioButtonl2); 

radioButton!3 = new java.awt.Checkbox("UNSAT", GrouplS, 

false) ; 

radioButtonl3.setBounds(264,159,65,10) ; 
panel5.add(radioButtonl3); 

Group16 = new CheckboxGroup() ; 

radioButton2 0 = new java.awt.Checkbox("SAT", Groupl6, 

false) ; 

radioButton20.setBounds(180,183,60,10); 
panel5.add(radioButton20); 

radioButton21 = new java.awt.Checkbox("UNSAT", Groupl6, 

false) ; 

radioButton21.setBounds(264,183,65,10) ; 
panels.add(radioButton21); 

label47 = new java.awt.Label("R114/12(<1520 MTORR)"); 
label47.setBounds(24,183,153,12); 
panels.add(label47); 

Groupl8 = new CheckboxGroup(); 

radioButton24 = new java.awt.Checkbox("SAT", Groupl8, 

false) ; 

radioButton24.setBounds(180,207,60,10) ; 
panels.add(radioButton24); 

radioButton25 = new java.awt.Checkbox("UNSAT", Groupl8, 

false) ; 

radioButton25.setBounds(264,207,65,10) ; 
panels.add(radioButton25); 

label49 = new java.awt.Label("OTTO FUEL(<0.1 PPM)"); 
label49.setBounds(24,207,145,12 ) ; 
panel5.add(label49); 


91 



labelSO = new java.awt.Label("C02 ( <30 TORR) n ); 
labels0.setBounds(24,135,125,12); 
panels.add(label50); 

Groupl4 = new CheckboxGroup(); 

radioButton26 = new java.awt.Checkbox("SAT", Groupl4, 

false) ; 

radioButton26.setBounds(180,135,60,10 )7 
panels.add(radioButton26)? 

radioButton27 = new java.awt.Checkbox( n UNSAT”, Groupl4, 

false) ; 

radioButton27.setBounds(264,135,65,10); 

panels.add(radioButton27); 

buttonl8 = new java.awt.Button(); 

buttonl8.setLabel("SUBMIT"); 

buttonl8.setBounds(480,200,62,26); 

buttonl8.setBackground(new Color(12632256)); 

button!8.addActionListener(this); 

pane15.add(buttonl8); 

buttonl4 = new java.awt.Button(); 

buttonl4.setLabel("SUBMIT"); 

buttonl4.setBounds(372,200,62,26); 

buttonl4.setBackground(new Color(12632256)); 

add(buttonl4); 

} //end init 


//{{DECLARE_CONTROLS 

Symantec.itools.awt.TabPanel tabPanell; 

j ava.awt.Pane1 pane11; 

j ava.awt.Labe1 labe13; 

j ava.awt.Label label7; 

java.awt.Label label8; 

j ava.awt.Label label9; 

j ava.awt.Label labellO; 

java.awt.Choice choice2; 

java.awt.Choice choiceS; 

java.awt.Choice choice6; 

java.awt.Choice choice7; 

java.awt.Label label4; 

j ava. awt. Label labels,* 

java.awt.Label label6; 

java.awt.Choice choice3; 

java.awt.Choice choice4; 

java.awt.Button buttonl3; 

j ava.awt.Checkbox checkboxl; 

j ava.awt.Checkbox checkbox2; 

j ava.awt.Checkbox checkbox3; 

java.awt.Checkbox checkbox4; 

j ava.awt.Checkbox checkbox5; 

j ava.awt.Checkbox checkbox6; 

java.awt.Panel pane!2; 


92 




j ava.awt.Label labelll; 
java.awt.Choice choice8; 
java.awt.Label labell2; 
java.awt.Choice choice9; 
java.awt.Label labell3; 
java.awt.TextField textFieldl; 
java.awt.Button buttonl; 
java.awt.Label label14; 
java.awt.Choice choicelO; 
java.awt.Label labellS; 
java.awt.Choice choicell; 
java.awt.TextField textField2; 
java.awt.Button button2; 
java.awt.Choice choicel2; 
java.awt.Label labellS; 
java.awt.Choice choicel3; 
j ava.awt.TextField *textField3; 
java.awt.Button button3; 
java.awt.Choice choice!4; 
j ava.awt.Label labell7; 
java.awt.Choice choicelS; 
java.awt.TextField textField4; 
j ava.awt.Button button4; 
j ava.awt.Label labe118; 
java.awt.Label label19; 
java.awt.TextField textFieldS; 
j ava.awt.Button button6; 
java.awt.TextField textField7; 
java.awt.Button button7; 
j ava.awt.Label label2 0; 
j ava.awt.Label label21; 
java.awt.Label label22; 
j ava.awt.Labe1 labe124; 
j ava.awt.Label label2 5; 
java.awt.Checkbox radioButton4; 
CheckboxGroup Groupl; 
java.awt.Checkbox radioButtonS; 
java.awt.Checkbox radioButton6; 
CheclcboxGroup Group2; 
java.awt.Checkbox radioButton7; 
j ava.awt.Label labe12 6; 
java.awt.Button buttonlS; 
java.awt.Panel panel3; 
j ava.awt.Label labell; 
java.awt.Choice choicel; 
j ava.awt.Labe1 labe12; 
java.awt.Button buttonl6; 
j ava.awt.Checkbox checkbox7; 
java.awt.Checkbox checkbox8; 
java, awt .Checkbox checkbox9; 
j ava.awt.Pane1 pane14; 
java.awt.Label label23; 
java.awt.Choice choicel6; 
java.awt.Label label27; 
j ava.awt.Label label2 8; 
j ava.awt.Label label29; 


93 





j ava.awt.Label label3 0; 

java.awt.Label label31; 

java.awt.Label label32; 

java.awt.Label label33; 

j ava.awt.Label labe134; 

java.awt.Label label35; 

j ava.awt.Label labe13 6; 

java.awt.Label labe!37; 

java.awt.Label label38; 

java.awt.Label label39; 

java.awt.Label label40; 

java.awt.TextFieId textFieldS; 

java.awt.Button button5; 

java.awt.TextField textField8; 

j ava.awt.Button button8; 

java.awt.TextField textField9; 

java.awt.Button button9; 

java.awt.TextField textFieldlO; 

java.awt.Button buttonlO; 

java.awt.Label label41; 

java.awt.Label labe142; 

java.awt.TextField textFieldll; 

java.awt.Button buttonll; 

java.awt.TextField textFieldl2; 

java.awt.Button buttonl2; 

j ava.awt.Button buttonl7; 

j ava.awt.Pane1 pane15; 

java.awt.Label label43; 

java.awt.Choice choicel7; 

java.awt.Label label44; 

j ava.awt.Checkbox radioButton8; 

CheckboxGroup Groupl2; 

j ava.awt.Checkbox radioButton9; 

j ava.awt.Checkbox radioButtonlO; 

CheckboxGroup Groupl3; 

java.awt.Checkbox radioButtonll; 

java.awt.Label label45; 

j ava.awt.Label label46; 

java.awt.Checkbox radioButtonl2; 

CheckboxGroup GrouplS; 

j ava.awt.Checkbox radioButtonl3; 

j ava.awt.Checkbox radioButton2 0; 

CheckboxGroup Groupl6; 

j ava.awt.Checkbox radioButton21; 

java.awt.Label label47; 

j ava.awt.Label labe148; 

java.awt.Checkbox radioButton22; 

CheckboxGroup Groupl7; 

j ava.awt.Checkbox radioButton23; 

j ava.awt.Checkbox radioButton24; 

CheckboxGroup Groupl8; 

j ava.awt.Checkbox radioBut ton2 5; 

java.awt.Label label49; 

java.awt.Label label50; 

j ava.awt.Checkbox radioBut ton2 6; 

CheckboxGroup Groupl4; 


94 




java.awt.Checkbox radioButton27; 

java.awt.Button buttonl8; 

java.awt.Button buttonl4; 
java.awt.Label label300; 
java.awt.Choice choice200; 

Thread watchThread, watchThreadl, watchThread2, 

watchThread3, watchThread4; 

Thread watchThread5, watchThread6, watchThread7, 

watchThread8; 

Thread watchThread9, watchThreadl0, watchThreadl1; 

Stopwatch stopwatch, stopWatchl, stopWatch2, stopWatch3, 
stopWatch4, stopWatch5; 

Stopwatch stopWatch6, stopWatch7, stopWatch8, stopWatch9, 
stopWatchlO # stopWatchll; 

Date startDate, startDatel, startDate2, startDate3, startDate4, 
startDate5; 

Date startDate6, startDate7, startDate8, startDate9, startDatelO, 
startDatell; 


public void run() 

{ 

Thread currentthread = Thread.currentThreadf); 

while(true){// currentthread == outputThread) { 
try { 

currentthread.sleep(500) ; 

} 

catch (InterruptedException e) {} 

if ( Thread.currentThread().getName().equals(■threadl")){ 
stopwatch = new StopWatch(textFieldl / startDate); 
stopwatch.nit(); 

} //end if 

if ( Thread.currentThread().getName().equals("thread2 n )){ 
stopWatchl = new Stopwatch(textField2,startDatel); 

} // end if 

if ( Thread.currentThread().getName().equals("thread3")){ 
stopWatch2 = new Stopwatch(textField3,startDate2); 

} // end if 

if ( Thread.currentThread().getName().equals("thread4 n )){ 
stopWatch3 = new Stopwatch(textField4,startDate3); 

} //end if 

if ( Thread.currentThread().getName().equals("thread5 tt )){ 
stopWatch4 = new Stopwatch(textField6,startDate4); 

} // end if 

if ( Thread.currentThread() .getName().equals( n thread6*)){ 
stopWatch5 = new Stopwatch{textField7,startDateS); 

} // end if 


95 



if ( Thread.currentThread().getName().equals("thread7")){ 
stopWatchS = new Stopwatch(textFieldS,startDateS); 

} // end if 

if ( Thread.currentThread().getName().equals( n thread8 ")){ 
stopWatch7 = new Stopwatch(textField8,startDate7); 

} // end if 

if ( Thread.currentThread().getName().equals("thread9")){ 
stopWatch8 = new Stopwatch(textField9,startDate8); 

} // end if 

if ( Thread.currentThread().getName().equals( n threadlO")){ 
stopWatch9 = new Stopwatch(textFieldlO,startDate9); 

} // end if 

if ( Thread.currentThread().getName().equals("threadll")){ 
stopWatchlO = new Stopwatch(textFieldll,startDatelO); 

} // end if 

if ( Thread.currentThread().getName{).equals("threadl2")){ 
stopWatchll = new Stopwatch(textFieldl2,startDatell); 

} // end if 

}//end while 
} //end method run 


// DATABASE VARIABLES 

TextField theStatus = new TextField(64); 

JDBC01 theJDBC = new JDBC01(theStatus); 


public void actionPerformed (ActionEvent event) 

{ 

Object source = event.getSource(); 
if (source == buttonl3) { 
boolean temp = false; 
try { 

theJDBC.executeQuery( n SELECT CN FROM Tabl n ); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), "Xn", false); 

while (tokens.hasMoreTokens()){ 

if (tokens.nextToken().equals("1")){ 
temp = true; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 
try { 

if (temp) { 

theJDBC.executeUpdate("UPDATE Tabl " 


96 



+ "SET FIRE_IN = " + + choice2.getSelectedltem() 

n/n 

+ 0 ,FIRE_CLASS =" + n/n + 
choice200.getSelectedltem() + n/n 

+ ",FIRE_IS = " + "'" + choice5.getSelectedltem() + 

n/n 

+ ■,MAN_CHAR =" + n,n + choice3.getSelectedltem() + 

n/n 

+ ", PERS = " + String.valueOf(checkboxl.getState()) 
+ ",OBA = B + String.valueOf(checkbox2.getState()) 

+ B ,DC_EQ = ■ + 

String.valueOf(checkbox4.getState())//3 

+ ",NTFI = " + 

String.valueOf(checkbox5.getState())//4 

+ " y FFE = " + 

String.valueOf (checkbox3 .getState () ).//5 

+ ",DAM_EQU = B + n/n + choice4.getSelectedltem() + 

n/n 

+ ", WATCH =" + n,n + choice6.getSelectedltem() + 

n/n 

+ ",HOSE =" + B '" + choice7.getSelectedltem() + n,n 
+ "/SAT = n + String.valueOf(checkbox6.getState()) 

+" WHERE CN - 1 " ); 

} //end IF 
} //END TRY 

catch (SQLException sqlex) { } 

> //end if 


if (source .== buttonlS) { 
boolean temp = false; 
try { 

theJDBC.executeQuery("SELECT CN FROM Tab2"); 
StringTokenizer tokens = new StringTokenizer 
(the JDBC. dximpResult () , B \n n , false); 

while (tokens.hasMoreTokens()){ 

if (tokens.nextToken() .equals("1") ) { 
temp = true; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 
try { 

String radiocheckl = "N/A"; 

String radiocheck2 = "N/A "; 

String tl = textFieldl.getText(); 

String t2 = textField2.getText(); 

String t3 = textField3.getText(); 

String t4 = textField4.getText(); 

String t6 = textField6.getText(); 

97 




String t7 = textField7.getText(); 


if ( radioButton4.getState()== true) 
radiocheckl = "SAT"; 

else if ( radioButton5.getState()== true) 
radiocheckl = "UNSAT"; 
if ( radioButton6.getState()== true) 
radiocheck2 = ”SAT"; 

else if ( radioButton7.getState()== true) 
radiocheck2 = "UNSAT"; 

if ( tl.equals("")) 
tl = ”N/A"; 
if ( t2.equals("")) 
t2 = "N/A"; 
if ( t3.equals{"").) 

t3 = "N/A"; 
if ( t4.equals("")) 
t4 = "N/A"; 
if ( t6.equals("")) 
t6 = "N/A"; 
if ( t7.equals("")) 
t7 = "N/A"; 


if (temp) { 


theJDBC.executeUpdate("UPDATE Tab2 ” 

+ ’SET TEAM_A =" + + choice8.getSelectedItem() 

+ ",HOSE_A =" + + choice9.getSelectedItem() + 

+ ",TEAM_B =* + "'" + choicelO.getSelectedItem() + 

+ ",HOSE_B =" + + choicell.getSelectedItem() + 

+ ",TEAM_C =” + + choicel2.getSelectedltemO + 

+ ",HOSE_C =" + + choicel3.getSelectedItem() + 

+ ”,TEAM_D =■ + "'* + choicel4.getSelectedItem() + 

+ ",HOSE_D =" + + choicel5.getSelectedItem() + 

+ ", OBA_TIMEA ="• + + tl + "'" 

+ ",OBA_TIMEB =" + "'" + t2 + n,n 
+ ",OBA_TIMEC ="+"'"+ t3 + "'" 

+ ",OBA_TIMED =” + "'" + t4 + "'" 

+ ",OBA_TIMEXO =" + "'"+ t6 + "'" 

+ ",OBA_TIMESMIC ="+”'"+ t7 + "'" 

+ *,ATMCHK =" + + radiocheckl + 

+ ",GHNDCHK =" + "'” + radiocheck2 + "'" 

+" WHERE CN = 1 " ) ; 

} //end IF 
} //END TRY 


98 



catch (SQLException sqlex) { } 

} //end if 

if (source == button!6) { 
boolean temp = false; 
try { 

theJDBC.executeQuery( n SELECT CN FROM Tab3■); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult() , "\n", false); 

while (tokens.hasMoreTokens()){ 

if (tokens.nextToken().equals( n 1")){ 
temp = true; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 
try { 

if (temp) { 

theJDBC.executeUpdate("UPDATE Tab3 n 
+ "SET REP_STA = " + "' " + choicel.getSelectedltem () 

_j. n / n 

+ ",FIRE_EMERG = " + 

String.valueOf(checkbox7.getState()) 

+ ",SNORKEL = " + 

String.valueOf(checkbox8.getState()) 

+ n ,RFRE = " + String.valueOf(checkbox9.getState()) 
+ n WHERE CN = 1 * ); 

} //end IF 
} //END TRY 

catch (SQLException sqlex) { } 

} //end if 


if (source == buttonl7) .{ 
boolean temp = false; 
try { 

theJDBC.executeQuery("SELECT CN FROM Tab4"); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), "\n" 7 false); 

while (tokens.hasMoreTokens()){ 

if (tokens.nextToken().equals("!")){ 
temp = true; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 


99 


try { 


String t5 = textField5.getText(); 
String t8 = textField8.getText(); 
String t9 = textField9.getText(); 
String tlO = textFieldlO.getText(); 
String til = textFieldll.getText(); 
String tl2 = textFieldl2.getText(); 


if ( t5.equals( n ■)) 
t5 = "N/A"; 
if ( t8.equals("") ) 
t8 = "N/A"; 
if ( t9.equals(" n )) 
t9 = "N/A"; 
if ( tlO.equals("")) 
tlO = "N/A"; 
if ( til.equals( n0 )) 
til = "N/A"; 
if ( tl2.equals("")) 
tl2 = "N/A"; 


if (temp) { 

theJDBC.executeUpdate("UPDATE Tab4 n 
+ "SET MAN_IN ="+«'«+ choicel6.getSelectedltem() 

_l_ n / n 

+ ",HOSET_A ** + + t5 + 

+ ",HOSET_B =" + + t8 + 

+ ",HOSET_C =" + + t9 + 

+ ”,HOSET_D = n + *'* + tlO + n/n 

+ ”,XO_MIC =" + til + 

+ ",SMIC =" + + tl2 + 

+" WHERE CN = 1 " ); 

} //end IF 
} //END TRY 

catch (SQLException sqlex) { } 

} //end if 

if (source == buttonl8) { 
boolean temp = false; 
try { 

theJDBC.executeQuery(”SELECT CN FROM Tab5"); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), "\n", false); 

while (tokens.hasMoreTokens()){ 

if (tokens.nextToken().equals(”1")){ 
temp = true; 

} //end if 
} //END WHILE 
} //END TRY 


100 



catch (SQLException sql) { ; } 
try { 

String radiocheckl = "N/A"; 

String radiocheck2 = "N/A n ; 

String radiocheck3 = "N/A n ; 

String radiocheck4 = "N/A "; 

String radiocheck5 = "N/A n ; 

String radiocheck6 = n N/A "; 

if ( radioButton8.getState()== true) 
radiocheckl = "SAT"; 

else if ( radioButton9.getState{)== true) 
radiocheckl = "UNSAT"; 

if ( radioButtonlO.getState()== true) 
radiocheck2 - "SAT"; 

else if ( radioButtonll.getState()== true) 
radiocheck2 = "UNSAT"; 

if ( radioButtonl2.getState()== true) 
radiocheck3 = "SAT"; 

else if ( radioButtonl3.getState()== true) 
radiocheck3 = "UNSAT"; 

if ( radioButton20.getState()== true) 
radiocheck4 = "SAT"; 

else if ( radioButton21.getState()== true) 
radiocheck4 = "UNSAT"; 

if ( radioButton24.getState()== true) 
radiocheckS = "SAT"; 

else if ( radioButton25.getState()== true) 
radiocheckS = "UNSAT"; 

if ( radioButton26.getState()== true) 
radiocheckS = "SAT"; 

else if ( radioButton27.getState()== true) 
radiocheck6 = "UNSAT"; 


if (temp) { 

theJDBC.executeUpdate("UPDATE Tab5 " 

+ "SET ATM_MON =" + "'" + 
choicel7.getSelectedltem () + n/n 

+ n /02 =" + " ,n + radiocheckl + 

+ ",H2 + radiocheck2 + n/ " 

+ n ,C02 =" + n/ " + radiocheckS + "'" 

+ ",CO =" + " 7 " + radiocheck3 + "'" 

+ ",R114 =" + " ,n + radiocheck4 + 

+ ",OTTO_FUEL = n + n/ " + radiocheckS + " /n 
+" WHERE CN = 1 " ); 

} //end IF 
} //END TRY 

catch (SQLException sqlex) { } 

} //end if 


101 





} If end actionPerformed class 


// handle button events (CHANGES THE STATE OF THE "START" BUTTONS) 

public boolean action (Event e, Object o) { 

if ( e.target instanceof Button) { 
if ( (e. target == buttonl) && 

(buttonl.getLabel()=="START") ){ 

buttonl.setLabel("RESET"); 
startDate = new Date(); 

watchThread = new Thread(this, "threadl"); 
watchThread.setDaemon{false); 
watchThread.setPriority(4); 
watchThread.start(); 

} //end if 

else if( (e. target == buttonl) && 

(buttonl.getLabel()=="RESET") ){ 

buttonl.setLabel("START“); 
watchThread.stop(); 
textFieldl.setText(""); 

} //end else if 

if ( e. target == button2 && 

(button2.getLabel{) =="START")){ 

button2.setLabel("RESET"); 
s.tartDatel = new Date () ; 

watchThreadl = new Thread(this, "thread2"); 
watchThreadl.setDaemon(false); 
watchThreadl.setPriority(4) ; 
watchThreadl.start(); 

} //end if 

else if( (e. target == button2) && 

(button2.getLabel()=="RESET") ){ 

button2.setLabel( n START n ); 
watchThreadl.stop(); 
textField2.setText(""); 

} //end elseif 

if ( e. target == button3 && 

(button3.getLabel()=="START")) { 

button3.setLabel("RESET"); 
startDate2 = new Date(); 

watchThread2 = new Thread(this, "thread3"); 
watchThread2.setPriority(4); 
watchThread2.start(); 

} //end if 

else if( (e. target == button3) && 

(button3.getLabel()=="RESET") ){ 

button3.setLabel("START"); 
watchThread2.stop(); 
textField3.setText(""); 

} //end else if 


102 



if ( e. target == button4 && 
(button4.getLabel()=="START")) { 

button4.setLabel{"RESET"); 
startDate3 = new Date(); 
watchThread3 = new Thread(this, 
watchThread3.setPriority(4) ; 
watchThread3.start(); 

} //end if 

else if( (e. target == button4) && 
(button4.getLabel()=="RESET") ){ 

button4.setLabel("START"); 
watchThread3.stop(); 
textField4.setText(""); 

} //end else if 

if ( e. target == button5 && 
(buttons.getLabel()=="START")) { 

button5.setLabel("RESET"); 
startDate6 = new Date(); 
watchThread6 = new Thread(this, 
watchThread6.setPriority(4) ; 
watchThread6.start(); 

} //end if 

else if( (e. target == button5) && 
(button5.getLabel()=="RESET") ) { 

buttons.setLabel("START«); 
watchThread6.stop(); 
textField5.setText(""); 

} //end else if 

if ( e. target == buttons && 

(button6.getLabel()=="START")){ 

button6.setLabel("RESET"); 
startDate4 = new Date(); 
watchThread4 = new Thread(this, 
watchThread4.setPriority(4) ; 
watchThread4.start() ; 

} //end if 

else if( (e. target == button6) && 

(button6.getLabel()=="RESET") ) { 

buttons.setLabel("START"); 
watchThread4.stop(); 
textField6.setText(""); 

} // end else 

if ( e. target == button7 && 
(button7.getLabel()=="START")) { 

button7.setLabel("RESET"); 
startDateS = new Date();' 
watchThreadS = new Thread(this, 
watchThread5.setPriority(4); 
watchThreadS.start() ; 

} //end if 

else if( (e. target == button7) && 
(button7.getLabel()=="RESET") ) { 

button7.setLabel("START"); 

103 


" thread4") 


" thread7"); 


" threads"); 


" thread6") 


watchThread5.stop(); 
textField7.setText("") ; 

} // end else 

if ( e. target == button8 && (button8.getLabel()=="START n )) 

{ 

button8.setLabel("RESET”); 
startDate7 = new Date(); 

watchThread7 = new Thread(this, "thread8"); 
watchThread7.setPriority(4); 
watchThread7.start() ; 

} //end if 

else if( (e. target == button8) && 

(button8.getLabel()=-”RESET n ) ) { 

button8 . setLabel ("START") ; 
watchThread7 . stop () ; 
textField8.setText("") ; 

} //end else if 

if ( e. target == button9 && (button9.getLabel ()== "START") ) 

{ • 

button9.setLabel("RESET"); 
startDate8 = new Date(); 

watchThread8 = new Thread(this, "thread9"); 
watchThread8.setPriority(4) ; 
watchThread8.start() ; 

} //end if 

else if( (e. target == button9) && 

(button9.getLabel {)=-” RESET") ) { 

button9 .setLabel ("START") ; 
watchThread8.stop() ; 
textField9.setText("") ; 

} //end else if 

if ( e. target == buttonlO && 

(buttonl0.getLabel()=="START")) { 

buttonl0.setLabel("RESET"); 
startDate9 = new Date(); 

watchThread9 = new Thread(this, "threadl0"); 

watchThread9.setPriority(4); 
watchThread9.start{) ; 

} //end if 

else if( (e. target == buttonlO) && 

(buttonlO.getLabel()=="RESET") ) { 

buttonlO.setLabel("START"); 
watchThread9.stop() ; 
textFieldlO.setText(" ■) ; 

} //end else if 

if ( e. target == buttonl1 && 

(buttonll.getLabel()=="START")){ 

buttonll.setLabel("RESET"); 
startDatelO = new Date(); 

watchThreadlO = new Thread(this, "threadll"); 
watchThreadlO.setPriority(4) ; 
watchThreadlO . start ().; 

104 . 



} //end if 

else if( (e. target — buttonll) && 
(buttonll.getLabel()=="RESET") ) { 

buttonll.setLabel( n START n ); 
watchThreadlO.stop(); 
textFieldll.setText{"") ; 

} //end else if 

if ( e. target == buttonl2 && 
(buttonl2.getLabel()== n START")) { 

buttonl2.setLabel("RESET"); 
startDatell = new Date(); 
watchThreadll = new Thread(this, 
watchThreadll.setPriority(4); 
watchThreadll.start(); 

} //end if 

else if( (e. target == buttonl2) && 
(buttonl2.getLabel()=="RESET") ) { 

buttonl2.setLabel("START"); 
watchThreadll.stop()? 
textFieldl2.setText("") ; 

} //end else if 

if (e.id == Event. WINDOWJDESTROY ) { 

watchThread.stop () ; 

} //end if 
} //end if 
return true; 

} //end action method 


public void handleException(Exception e) 

{ 

e.printStackTrace( ); 

} 


} //end class 


" threadl2") 


105 



THIS PAGE INTENTIONALLY LEFT BLANK 


106 




APPENDIX B. UTILITY CLASSES 


// Stopwatch 

// Used in new Attack Submarine Damage Control Applets and Servlets 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 
// Provides a timer for OBA times. 

// 

// Contains no classified or sensitive data 

// 

// Date : 03 Oct. 1999 


import j ava.awt.*; 
import java.util.Date; 

public class Stopwatch 

{ 


long startTime; 

Long difference; 

Date startDate; 

Date now; 
int hr; 
int mn; 
int sc; 

Integer hour; 

Integer minute; 

Integer second; 

String message; 

boolean watchActivated = true; 
TextField myfield = new TextFieldO ; 


public Stopwatch(TextField tf, Date d){ 
myfield = tf; 
startDate = d; 
nit (); 

} 


public void stop() 

{ 

watchActivated = false; 

} 


public void nit() 

{ 

startTime = startDate.getTime(); 
if (watchActivated) { 
now - new Date(); 


107 



difference = new Long(now.getTime() - startTime); 
sc = difference.intValue() / 1000; 

mn = sc / 60; 

hr = mn / 60; 

sc = sc % 60; 

mn = mn % 60; 

second = new Integer(sc); 

minute = new Integer(mn); 

hour = new Integer(hr); 

message = minute. toString () + "; n + second.toString(); 
myfield.setText(message); 


} 

} 

} 


// JDB01 CLass 

// CS3773 Java as a second Language Final Project 
// Version 1.0 
// Kurt Rothenhaus 

// CLASS automates a number of usefull functions that the sorter 

// uses to display its results 

// Contains no classified or sensitive data 

// Programmer wishes to thank Java; how to program by 

// Dietel & Dietel 'and 

// SQL programming in Java by Bill McCarthy for their valuable 
// code which I unabashadly used. 

// Applet can be viewed at: 

// http://web.nps.navy.mil/~kj rothen 


import j ava.awt.*; 
import j ava.awt.event.*; 
import java.util.Properties; 
import j ava.net.URL; 

import jl02.sql.*; //Creates abstract bridge for socket/JDBC 
import j ava.applet.*; 


public class JDBC01 
{ 


Connection 

theConnection 

= null; 

DatabaseMetaData 

theDBMetaData 

= null; 

Statement 

theStatement 

= null; 

ResultSet 

theResultSet 

= null; 

ResultSetMetaData theMetaData 
TextField theStatus; 

= null; 


// the JDBC bridge 


public JDBC01(TextField status) 


108 



{ 

theStatus = status; 

} 


// This procedure opens the "socket" to the ODBC bridge 
public void openConnection()throws SQLException 
{ 

try 

{ 

IDSDriver drv = new j 102 . sql. IDSDriver () ; // New ODBC 
driver instansiated 

String url = "jdbc:ids://131.120.27.67:12/conn?dsn='dbl'"; 
Connection theConnection = drv.connect(url,null); //connect 
is really a java.sql 
// } 

// catch (Exception e){ } 

//Download the database attributes and create a result set. 
theDBMetaData 

= theConnection.getMetaData( ); 
theStatement 

= theConnection.createStatement( ); 
theResultSet = null; 
theMetaData = null; 
theStatus.setText( n Status: OK"); 

} 

catch (SQLException sql) 

{ 

handleError(sql); 

} 

} 


// Closes the connection to the database when the program is quit. 

public void closeConnection( )throws SQLException 

{ 

try 

{ 

if (theConnection != null) 
theConnection.close( ); 

} 

catch (SQLException sql) { handleError(sql); } 

} 


// Executes the desired query from a string passed in. 

public void executeQuery(String sql)throws SQLException 

{ 

if (theResultSet l~ null) 
theResultSet.close( ); 



theResultSet = theStatement.executeQuery(sql); 
if (theResultSet != null) 

theMetaData = theResultSet.getMetaData( ); 


//Alows the user to update the database (used in viewscreen) 

public int executeUpdate(String sql)throws SQLException 

{ 

if (theResultSet != null) 
theResultSet.close( ); 
theResultSet = null; 
theMetaData = null; 

int result = theStatement.executeUpdate(sql); 
return result; 

} 


// Takes the results of the query and turns it into a long string. 

public String dumpResult( )throws SQLException 

{ 

String result = " n ; 
try 
{ 

int column_count = theMetaData.getColumnCount( ); 
while (theResultSet.next( )) 

{ 

boolean first = true; 

for (int i = 1; i <= column_count; i++) 

{ 

if (!first) result += ", "; 

result += theResultSet.getString(i) ; 
first = false; 

} 

result += "\n"; 

} 

> 

catch (SQLException sql) { handleError(sql) ; } 
return result; 


// inserts the fields in order ■ 

String getFieldList(String [ ] fields) 

{ 

String result = "("; 
boolean first = true; 

for (int i = 0; i < fields.length; i++) 
{ 

if (!first) result += n , n ; 
first = false; 
result += fields[i]; 


110 



} 

result += ") "; 
return result; 


// 

String getValueList(String [ ] values, boolean [ 

{ 

String result = "VALUES ("; 
boolean first = true; 

for (int i = 0; i < values.length; i++) 

{ 

if (ifirst) result += ", "; 

first = false; 

String value-= values[i]; 
if (isQuoted[i]) 

{ 

result += "'"; 

// double any embedded single quotes 
int j; 

while ((j = value.indexOf('\'')) >= 0) 

{ 

if (j > 0) 

{ 

result += value.substring(0, j 

} 

result += "''"; 

if (value.length{ ) > j +1) 

{ 

value = value.substring(j + 1) 

} 

else 

{ 

value = ""; 

} 

} 

result += value + "'"; 

} 

else 

{ 

result += value; 

} 

} 

result += ") ■; 

return result; 

} 

String getNonNullString(int col) 
throws SQLException 
{ 

return nonNull(theResultSet.getString(col)); 

} 


isQuoted) 


111 



String nonNull(String s) 

{ 

if (s != null) return s; 
return " n ; 

} 


// Handles errors that arrise from SQL misrep. 

* public void handleError(Throwable t) throws SQLException 

{ 

theStatus.setText("Error: " + t.getMessage( )); 
t.printStackTrace( ); 

throw new SQLException(t.getMessage( )); 

} 

} // end class 


112 



APPENDIX C. DAMAGE CONTROL CLIENT SERVLET CODE 


//DC Client Servlet 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/dc_ServCover.htm 
// Date : 10 Oct. 1999 

import javax.servlet.*; 
import j avax.servlet.http.*; 
import j ava.sql.*; 

public class DC_ClientServlet extends HttpServlet 
{ 


public void doPost(HttpServletRequest req, 
HttpServletResponse resp) 
throws, ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 

// Print the HTML header 
out.printIn( n <html>"); 
out.println( n <head>"); 

out.println("<title>DC Report</title>"); 
out.printIn("</head> n ); 
out.println( "<h2xcenter> n ) ; 

out,println("DC Updated: Press Back button to return"); 
out.println( "</centerx/h2>") ; 
out.printIn("<br>"); 

String values[]; 

// Get the location 
String FIRE^IN = nn ; 

values = req.getParameterValues("Selection"); 
if (values != null) { 

FIRE_IN = values[0]; 

} 

out. print In (" FIRE_IN=" + FIRE__IN + "<br>"); 


113 




// Get the location 
String FIRE_CLASS = 

values = req.getParameterValues("Selectionl4"); 
if (values != null) { 

FIRE_CLASS = values[0] ; 

} 

out. print In ("FIRE__CLASS==" + FIREGLASS + "<br>") 

// get state of fire 
String FIRE„IS = ""; 

values = req.getParameterValues(”Selection9"); 
if (values != null) { 

FIRE_IS = values[0]; 

} 

out.printIn("FIRE_IS=" + FIRE_IS + "<br>"); 

//‘Get man-in charge 
String MAN_CHAR = 

values = req.getParameterValues("Selection2"); 
if (values i= null) { 

MAN_CHAR = values[ 0 ] ; 

} 

out. print In ( " MAN_CHAR=" + MANJ2HAR + "<br>"); 

// Get the assist 
String PERS = "no"; 

String PERS1 = "0"; 

values = req.getParameterValues("CheckBox" ); 
if (values 1= null) { 

PERS = "yes"; 

PERS1 = ”1°; 

} 

out.println("PERS—" + PERS + "<br>"); 

// Get the assist 
String OBA = "no"; 
int OBA1 = 0; 

values = req.getParameterValues( n CheckBox4"); 
if (values != null) { 

OBA = "yes"; 

OBA1 = 1; 

} 

out.println("OBA=" + OBA + "<br>"); 

// Get the assist 
String DC_EQ = "no"; 
int DC_EQ1 = 0; 

values = req.getParameterValues("CheckBox6"); 
if (values != null) { 

DC_EQ = "yes"; 

DC_EQ1 = 1; 

} 

out.println("DC_EQ=" + DC_EQ + "<br>"); 

// Get the assist 
String NTFI = "no"; 
int NTFI1 = 0; 

values = req.getParameterValues( n CheckBox7”); 
if (values 1= null) { 

NTFI = "yes"; 


114 



NTFI1 = 1; 


} 

out.println("NTFI=" + NTFI + ”<br> n ); 

// Get the assist 
String FFE = "no"; 
int FFE1 = 0; 

values = req.getParameterValues("CheckBox5"); 
if (values != null) { 

FFE = "yes"; 

FFE1 = 1; 

} 

out.println( B FFE=" + FFE + n <br>"); 

String SAT = "no"; 
int SAT1 = De¬ 
values = req.getParameterValues("CheckBoxl2 B ); 
if (values != null) { 

SAT = "yes"; 

SAT1 = 1; 

} 

out.printIn("SAT=" + SAT + n <br>”); 

SAT = String.valueOf(SAT); 

//get damaged equipment 
String DAM_EQU = n "; 

values = req.getParameterValues("Selection8"); 
if (values != null) { 

DAMJEQU = values[0]; 

} 

out.println("DAM_EQU= n + DAM_EQU + "<br>"); 
//get watch 
String WATCH = -■; 

values = req.getParameterValues("SelectionlO"); 
if (values != null) { 

WATCH = values[0]; 

} 

out.println( n WATCH=” + WATCH + n <br>°); 

//get hose status 
String HOSE = Bn ; 

values = req.getParameterValues( n Selectionl!”); 
if (values != null) { 

HOSE = values[0]; 

} 

out.println( n HOSE= B + HOSE + n <br> B ); 
try { 


int casualty = 1? 
Connection con = null; 
Statement stmt = null; 


Class.forName( n sun.jdbc.odbc.JdbcOdbcDriver n ) .newlnstance() 
con = 

DriverManager. getConnection (” jdbc : odbc: dbl ”, null, null) ; 
stmt = con.createStatement(); 
stmt.executeUpdate("UPDATE Tabl n 
+ "SET FIRE_IN = B + B ' n + FIRE_IN + B ' B 

115 




n / n 


+ 

n 

,FIRE_CLASS = n 

+ n ' n + 

FIRE^CLASS + 

+ 

n 

, FIRE__IS = n + " 

' n + FIRE_IS + 

it / tt 

+ 

n 

, MAN_CHAR = n + 

" 7 n + MAN_CHAR 

+ n / n 

+ 

n 

,PERS = n + 

n / n ^ 

PERSl 

_j_ n f n 

+ 

n 

,OBA = " + 

n / n _j_ 

OBA1 

+ n / n 

+ 

It 

,DC_EQ = n + 

n / n _|_ 

DC_EQ1 

4. n / n 

+ 

n 

# NTFI = n + 

n t n 

NTFI1 

4. n t n 

+ 

n 

,FFE = n + 

n / n _j_ 

FFE1 

4_ B / It 

+ 

n 

, SAT = ■ + 

n t n 

SAT1 

4 _ n / n 

+ 

n 

, DAM_EQU = n + " 

7 n + DAM. 

_EQU + 

n / n 

+ 

n 

, WATCH = n + B ' n 

+ WATCH 

_j_ n / n 


+ 

n 

# HOSE = n + n 7 n 

+ HOSE + 

it / n 


+ 

n 

WHERE CN=1") ; 





catch (Exception ex) { 
out ,println( "Exception! ") ; 
ex.printStackTrace(out) ; . 

} 

// Wrap up 

out .printIn ( n </html>") ; 
out.flush(); 
out.close () ; 


} 

// Central Servlet - 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/dc_ServCover.html 
// Date : 12 Oct. 1999 


import j avax.servlet.*; 
import javax.servlet.http.*; 
import java.sql.*; 

public class dc_centServ extends HttpServlet 

{ 


public void doPost(HttpServletRequest req, 

HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp. setContentType (" text/html") ; 

// Create a PrintWriter to write the response 


116 



java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 

// Print the HTML header 
out.println("<html>"); 
out.printIn("<head>"); 

out.println("<title>DC CENTRAL </title> n ); 

out.println("</head>"); 

out .println ("<h2xcenter>") ; 

out.printIn("DC Updated: Press Back button to return") 
out .println ("</centerx/h2>") ; 
out.println{"<br>"); 

String values[]; 

// Get location of team A 
String TEAM_A = ""; 

values = req.getParameterValues("Selection"); 
if (values != null) { 

TEAM_A = values[0]; 

} 

out.printIn("TEAM„A=" + TEAM_A + "<br>"); 

// get location of hose A 
String H0SE_A = ""; 

values = req.getParameterValues("Selection2"); 
if (values != null) { 

H0SE_A = values[0]; . 

} 

out .println ("HOSE_A=: w + H0SE_A + "<br>"); 

// Get location of team B 
String TEAM_B = 

values = req.getParameterValues("Selections"); 
if (values != null) { 

TEAM_B = values[0]; 

} 

out.println("TEAM_B=" + TEAM_B + "<br>"); 

// get location of hose B 
String H0SE_B = ""; 

values = req.getParameterValues("Selection7"); 
if (values != null) { 

H0SE_B = values[0]; 

} 

out. println (" HOSE_B=" + H0SE__B + "<br>"); 

// Get location of team C 
String TEAM_C = " n ; 

values = req.getParameterValues("Selectionll"); 
if (values != null) { 

TEAM_C = values[0]; 

} 

out.println("TEAM_C=■ + TEAM_C + ”<br> n ); 

// get location of hose C 

117 




String HOSE_C = 

values = req.getParameterValues("Selectionl2") 
if (values != null) { 

HOSE_C = values[0]; 

} 

out.printIn( n HOSE_C= n + H0SE_C+ ’<br>'); 

// Get location of team D 
String TEAM_D = 

values = req.getParameterValues("Selectionl6") 
if (values != null) { 

TEAM_D = values[0]; 

} 

out.printIn("TEAM_D=" + TEAM_D + "<br>”); 

// get location of hose D 
String HOSE_D = **; 

values = req.getParameterValues("Selectionl7*) 
if (values != null) { 

HOSE_D = values[0]; 

} 

out.println("HOSE_D=" + H0SE_D + "<br>"); 


// Get the state of atmosphere 
String ATMCHK = "N/A"; 

values = req.getParameterValues(”Radio31") ; 
if (values != null) { 

ATMCHK = values[0]; 

} 

if ( ATMCHK.equals("Radio310") ) 

ATMCHK = "SAT"; 

if ( ATMCHK.equals("Radio311")) 

ATMCHK = "UNSAT"; 


out.printIn("ATMCHK=” + ATMCHK + "<br>"); 

// Get the state of ground 
String GRNDCHK = "N/A"; 

values = req.getParameterValues("Radio32”); 
if (values != null) { 

GRNDCHK = values[0]; 

} 

if ( GRNDCHK.equals("Radio320")) 

GRNDCHK = "SAT"; 
if ( GRNDCHK.equals("Radio321") ) 

GRNDCHK = "UNSAT"; 


out.printIn("GRNDCHK= n + GRNDCHK + "<br>"); 

// Get the assist 
String PERS = "no"; 

String PERS1 = n 0 n ; 

values = req.getParameterValues("CheckBox"); 

118 



if (values != null) { 

PERS = values[0]; 

PERS1 = "1"; 

} 

out .println (" PERS=" + PERS + "<br>"); 

// Get the assist 
String OBA = "no"; 
int OBA1 = 0; 

values = req.getParameterValues( n CheckBox4 n ) ; 
if (values != null) { 

OBA = values[0]; 

OBA1 = 1; 

} 

out.println("OBA=" + OBA + n <br> n ); 

// Get the assist 
String DC_EQ = "no"; 
int DC_EQ1 = 0; 

values = req.getParameterValues("CheckBox6 n ); 
if (values != null) { 

DC_EQ = values[0]; 

DCJEQ1 = 1; 

} 

out.println("DC_EQ= n + DC_EQ + n <br>"); 

// Get the assist 
String NTFI = "no"; 
int NTFI1 = 0; 

values = req.getParameterValues("CheckBox7"); 
if (values != null) { 

NTFI = values[0]; 

NTFI1 = 1; 

} 

out.println( n NTFI=" + NTFI + "<br> n ); 

// Get the assist 
String FFE = "no"; 
int FFE1 = 0; 

values = req.getParameterValues("CheckBoxS"); 
if (values != null) { 

FFE = values[0]? 

FFE1 = 1; 

} 

out.println( n FFE= n + FFE + n <br> n ); 

String SAT = "no"; 
int SAT1 = 0; 

values = req.getParameterValues("CheckBoxl2") 
if (values != null) { 

SAT = values[0]; . 

SAT1 = 1; 

} 

out.println( n SAT=" + SAT + "<br>"); 

SAT = String.valueOf (SAT) ; 

//get damaged equipment • 

String DAM_EQU = nn ; 

values = req.getParameterValues( n Selection8 n ) 
if (values != null) { 

DAMJEQU = values[0 ]; 

} 


119 



out.printIn{"DAM_EQU=° + DAM_EQU + M <br>"); 
//get watch 
String WATCH = " n ; 

values = req.getParameterValues("SelectionlO n ); 
if (values 1= null) { 

WATCH = values[0] ; 

} 

out.println("WATCH=" + WATCH + "<br>"); 

//get hose status 
String HOSE = 

values = req.getParameterValues("Selectionl!"); 
if (values != null) { 

HOSE = values[0]; 

} 

out.printIn( n H0SE=" + HOSE + n <br> n );*/ 

String OBA_TIMEA = ""; 

String 0BA_TIMEB = ""; 

String OBA_TIMEC = ""; 

String OBAJTIMED = ■ n ; 

String OBA_TIMEXO = " n ; 

String OBAJTIMESMIC = n "; 

try { 


int casualty = 1; 
Connection con = null; 
Statement stmt = null; 


Class.forName("sun.jdbc.odbc.JdbcOdbcDriver n ).newlnstance() 


con = 

DriverManager.getConnection( B j dbc:odbc:dbl n ,null,null); 
stmt = con.createStatement(); 


stmt.executeUpdate("UPDATE Tab2 " 


+ 

+ 

+ 



+ 

+ 

+ 


"SET TEAM_A = n 
" ,HOSE_A = * + 
" / TEAM_B = n + 

",HOSE_B = " 

■, TEAM_C = " 

",HOSE_C = ■ 

", TEAMED = " 

" ,HOSE_D = " 


+ ■ # ■ + TEAM_A + 


" ' " + HOSE_A + n7n 
* 7 " + TEAM_B + n 7 " 

+ " ' n + HOSE_B + "' ". 
+ ■ ' " + TEAM_C + 
+ n 7 ” + HOSE_C + ■ 7 n 
+ " ' " + TEAMED + " 7 " 
+ " ' " + HOSE_D + “ 7 


",OBA_TIMEA = " + n/ H ,n //+ OBA_TIMEA 


dummy inputs 


+ 

",OBA_TIMEB =" 

+ " 7 H 7 " 

// 

+ 

OBA_TIMEB 

+ 

n / n 

+ 

",OBA_TIMEC =» 

+ * 7 H 7 B 

// 

+ 

OBA_TIMEC 

+ 

n / n 

+ 

",OBA_TIMED = B 

+ " 7 H 7 " 

// 

+ 

OBAJTIMED 

+ 

n / n 

+ 

" , OBA__T IMEXO = 

" + " 7 H 7 

" // 


+ OBAJTIMEXO 

n / n 


+ ",OBA_TIMESMIC = " + n7 H 7 " // + OBA_TIMESMIC + 
+ ",ATMCHK = B + " 7 * + ATMCHK + " 7 " 

+ ",GRNDCHK = n + n 7 " + GRNDCHK + n 7 n 

+ " WHERE CN=1 n ); 


} 

catch (Exception ex) { 
out.printIn("Exception!"); 
ex.printStackTrace(out); 


120 



} 

// Wrap up 

out.printIn( n </html>"); 
out.flush(); 
out.close(); 


} 

// Watch Stander Servlet 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

/•/ http: //131.120.27.67 : 8080/dc_ServCover .html 
// Date : 30 Sept. 1999 


import javax.servlet.*; 
import javax.servlet.http.*; 
import java.sql.*; 

public class dc__watchServ extends HttpServlet 
{ 


public void doPost(HttpServletRequest req, 
HttpServletResponse resp) 
throws ServletException, j ava,io.IOException 
{ 


boolean tl = false; 
boolean t2 = false; 
boolean t3 = false; 

// Set the content type of the response 
resp.setContentType("text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new j ava.io.PrintWriter(resp.getOutputStream ()) ; 

// Print the HTML header 
out.printIn( n <html>"); 
out.printIn("<head>"); 

out.printIn( n <title>DC WATCHSTANDER</title> n ); 

out.printIn( n </head>"); 

out.printIn("<h2><center> B ); 

out.printIn("DC Updated: Press Back button to return”) 
out .println( n </centerx/h2>") ; 
out.printIn( n <br>"); 

String values[]; 

// Get the station ID 

121 


String REP_STA = ""; 

values = req.getParameterValues("Selection"); 
if (values != null) { 

REP__STA = values [0]; 

} 

out.println("REP_STA=" + REP_STA + n <br>"); 

// Get the assist 
String FIRE_EMERG = "no"; 
int f1 = 0; 

values = req.getParameterValues("CheckBox n ); 
if (values != null) { 

FIRE_EMERG = "yes"; 
fl =■ 1; 

} 

out. print In ( n F*IRE_EMERG=" + FIREJEMERG + " <br>" 

// Get the assist 
String SNORKEL = "no”; 
int f2 = 0; 

values = req.getParameterValues("CheckBox3"); 
if (values != null) { 

SNORKEL = "yes"; 
f 2 = 1; 

} 

out.println(" SNORKEL= n + SNORKEL + n <br> n ); 

// Get the assist 
String RFRE = "no"; 
int f3 = 0; 

values = req.getParameterValues("CheckBox4 n ); 
if (values != null) { 

RFRE = "yes"; 
f 3 = 1; 

} 

out.println( n RFRE= n + RFRE + "<br> n ); 

//chage the states of checkbox to boolean 
if ( FIRE_EMERG.equals("CheckBox")) 
tl = true; 

if ( SNORKEL.equals("CheckBox")) 
t2 = true; 

if ( RFRE.equals("CheckBox")) 
t3 = true; 

try { 


int casualty = 1; 
Connection con = null; 
Statement stmt = null; 


122 


Class. forName ("sun. jdbc. odbc . JdbcOdbcDriver n ) .newlnstance () ; 
con - 

DriverManager.getConnection ("jdbc : odbc :dbl", null, null) ; 
stmt = con.createStatement() ; 
stmt.executeUpdate("UPDATE Tab3 " 

+ ■SET REP_STA =" + n '" + REP_STA + "'" 

+ ",FIRE_EMERG = n + fl 
+ ", SNORKEL =■ + f2 
+ ",RFRE = " + f3 

+ " WHERE CN=1"); 

} 

catch (Exception ex) { 
out.printIn("Exception!"); 
ex.printStackTrace(out); ' 

} 

// Wrap up 

out.printIn("</html>"); 
out.flush(); 
out.closeO ; 


} 




// Staging Servlet 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Applet can be viewed at: 

// http://131.120.27.67:8080//dc_ServCover.htm 
// Date : 15 Oct. 1999 


import j avax.servlet.*; 
import javax.servlet.http.*; 
import java.sql.*; 

public class dc__stageServ extends HttpServlet 
.{ 


public void doPost(HttpServletRequest req, 
HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 


123 


new java.io.PrintWriter (resp.getOutputStream{) ) ; 

// Print the HTML header 
out.println( n <html>"); 
out.printIn("<head>"); 

out.println("<title>DC STAGE </title> n ); 

out.println("</head> n ); 

out.println( n <h2xcenter> n ) ; 

out.printIn("DC Updated: Press Back button to return") 
out .println ("</centerx/h2>") ; 
out.printIn("<br>"); 

String values[]? 

//Get the location 
String MAN_IN = nn ; 

values = req.getParameterValues("Selection"); 
if (values != null) { 

MAN_IN = values[0]; 

} 

out.println("MAN_IN= n + MAN_IN + n <br> n ); 

/* // get state of fire 
String HOSE_A = nn ; 

values = req. get Par aineterVa lues (" Selection2") ; 
if (values != null) { 

H0SE__A = values [0]; 

} 

out.printIn("HOSE_A=" + HOSE_A + "<br>"); 

//Get man in charge 
String TEAM_B = nn ; 

values = req. get Pararae terValues (" Select ion 6") ; 
if (values != null) { 

TEAM_B - values[03; 

} 

out.printIn("TEAM_B=" + TEAM_B + "<br>"); 

// get state of fire 
String HOSE_B = ""; 

values = req.getParameterValues("Selection?"); 
if (values != null) { 

HOSE_JB = values [ 0 ] ; 

} 

out.printIn("HOSE_B=" + H0SE_B + B <br> n ); 

//Get man in charge 
String TEAM_C = " n ; 

values = req.getParameterValues("Selectionll"); 
if (values != null) { 

TEAM_C = values[0]; 

} 

out.printIn("TEAM„C=" + TEAM_C + "<br>"); 

// get state of fire 
String HOSE_C = 

values = req.getParameterValues("Selectionl2"); 
if (values 1= null) { 


124 


HOSE_C = values[0]; 


} 

out.printIn("HOSE_C =" + HOSE_C+ "<br>"); 

//Get man in charge 
String TEAM_D - " "; 

values = req.getParameterValues("Selectionl6 n ) 
if (values != null) { 

TEAM_D = values[0] ; 

} 

out .println ("TEAM__D=" + TEAMED + n <br>") ; 

// get state of fire 
String H0SE_D = 

values = req.getParameterValues(”Selectionl7") 
if (values 1= null) { 

H0SE__D = values [0] ; 

} 

out.printIn( n HOSE_D = " + H0SE_D + "<br>"); 

**************************************************** 

// Get the assist 
String PERS = "no"; 

String PERS1 = "(De¬ 
values = req.getParameterValues("CheckBox"); 
if (values \= null) { 

PERS = values[0]; 

PERS1 = "1"; 

} 

out.println( n PERS=" + PERS + ”<br> n ); 

// Get the assist 
String OBA = "no"; 
int OBA1 - 0; 

values = req.getParameterValues("CheckBox4"); 
if (values != null) { 

OBA = values[0]; 

OBA1 = 1; 

} 

out.println("OBA= tt + OBA + "<br>"); 

// Get the assist 
' String DC_EQ = "no"; 
int DC_EQ1 = 0; 

values = req.getParameterValues("CheckBox6"); 
if (values != null) { 

DC_EQ = values[0]; 

DC_EQ1 = 1; 

} 

out.println("DC_EQ=" + DC_EQ + "<br>"); 

// Get the assist 
String NTFI = "no"; 
int NTFI1 = 0; 

values = req.getParameterValues("CheckBox7"); 
if (values != null) { 

NTFI = values[0]; 

NTFI1 = 1; 

} 

out.println("NTFI=" + NTFI + "<br>"); 

// Get the assist 


125 



String FFE = "no"; 
int FFE1 = 0; 

values = req.getParameterValues("CheckBoxS"); 
if (values != null) { 

FFE = values[0]; 

FFE1 = 1; 

} 

out.println("FFE=" + FFE + "<br>"); 

String SAT = "no"; 
int SAT1 = 0; 

values = req.getParameterValues("CheckBoxl2 n ); 
if (values 1= null) { 

SAT = values[0]; 

SAT1 = 1; 

} 

out.println( n SAT= n + SAT + n <br> n ); 

SAT* = String.valueQf(SAT); 

//get damaged equipment 
String DAM_EQU = n n ; 

values = req.getParameterValues( n Selection8”); 
if (values != null) { 

DAM_EQU = values[0]; 

} 

out.printIn("DAM_EQU= n + DAM_EQU + n <br> n ); 
//get watch 
String WATCH = " n ; 

values = req.getParameterValues("SelectionlO"); 
if (values != null) { 

WATCH = values[0]; 

} 

out. print In (' n WATCH= n + WATCH + "<br> n ); 

//get hose status 
String HOSE = " n ; 

values = req.getParameterValues("Selectionll n ); 
if (values != null) { 

HOSE = values[0]; 

} 

out. print In ( n HOSE=" + HOSE + n <br>"');*/ 

String HOSET_A = n n ; 

String HOSET_B = ■ n ; 

String HOSET^C = ""; 

String HOSET_D = n -; 

String XO__MIC = " n ; 

String SMIC = nn ; 


try { 

int casualty = 1; 
Connection con = null; 
Statement stmt = null; 


Class.forName("sun.jdbc.odbc.JdbcOdbcDriver").newlnstance() 


126 



con = 

DriverManager.getConnection( n jdbc:odbc:dbl*.null,null); 
stmt = con.createStatement(); 
stmt.executeUpdate("UPDATE Tab4 " 

+ "SET MAN_IN = " + ■'" + MAN_IN + " 7 n 

+ ",HOSET_A = n + " 7 H 7 " // + HOSET^A + " 7 n // dummy inputs 
+ ",HOSET_B = tt + " 7 H /n // + HOSET_B + ■ 7 « 

+ ■,HOSET_C = " + ■ 7 H 7 " // + HOSET_C + " 7 * 

+ ■,HOSET_D = n + " 7 H 7 n // + HOSET_D + " 7 n 

+ " / XO_MIC + " 7 H 7n // + XO_MIC + n7n 
+ ", SMIC = n + " 7 H 7 " // + SMIC + ", 7n 
+ - WHERE CN=1"); 

} 

catch (Exception ex) { 
out.printIn("Exception!"); 
ex.printStackTrace(out); 

} 

// Wrap up 

out.println("</html>"); 
out.flush(); 
out.close(); 

} 

} 




//DC Client Servlet 

// New Attack Submarine Damage Control Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows .the user to update and view DC actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servletlet can be viewed at: 

// http://131.120.27.67:8080/dc_ServCover.htm 
// Date : 30 Sept. 1999 


import j avax.servlet.*; 
import javax.servlet.http.*; 
import j ava.sql.*; 

public class dc_atmServ extends HttpServlet 
{ 


public void doPost(HttpServletRequest req. 

HttpServletResponse resp) 
throws ServletException. java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType( n text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 


127 




// Print the HTML header 
out.println( n <html>■)? 
out.println("<head>")? 

out.println("<title>DC ATM. MONITORING </title>"); 
out.println("</head>") ; 
out.println{"<h2xcenter>"); 

out.println("DC Updated: Press Back button to return"); 
out .println ( B </centerx/h2>") ; 
out.println("<br>”); 

String values[]; 

// Get the location 
String ATM_MON = 

values = req.getParameterValues("Selection"); 
if (values != null) { 

ATM_MON = values[0]; 

} 

out.println("ATM_MON=" + ATM_MON + "<br>"); 

// Get the feedback of variable modified in the database 
String 02 = "N/A"; 

values = req.getParameterValues("Radio3"); 
if (values != null) { 

02 = values[0]; 

} 

if ( 02.equals("Radio30”)) 

02 = "SAT”; ‘ 

if ( 02.equals( n Radio31")) 

02 = "UNSAT"; 

out.println("02=" + 02 + "<br>"); 

// Get the feedback of variable modified in the database 
String H2 = "N/A"; 

values = req.getParameterValues("Radio4"); 
if (values != null). { 

H2 = values[0]; 

> 

if ( H2.equals("Radio40")) 

H2 = "SAT"; 

if ( H2.equals("Radio41")) 

H2 = "UNSAT"; 

out.println("H2=" + H2 + "<br>\) ; 

// Get the feedback of variable modified in the database 
String C02 = "N/A"; 

values = req.getParameterValues("RadioB"); 
if (values != null) { 

C02 = values[0]; 

} 

if ( C02.equals("Radios0")) 

C02 = "SAT"; 


128 



if ( C02.equals("RadioBl")) 

C02 = "UNSAT"; 

out.printIn{"C02= n + C02 + "<br>"); 

// Get the feedback of variable modified in the database 
String CO = "N/A"; 

values = req.getParameterValues("Radio6"); 
if (values 1 = null) { 

CO = values[0] ; 

} 

if ( CO.equals("Radio60")) 

CO = "SAT"; 

if ( CO.equals( n Radio61")) 

CO = "UNSAT"; 

out.printIn( n CO= n + CO + "<br>"); 

// Get the feedback of variable modified in the database 
String R114 = n N/A n ; 

values = req.getParameterValues("Radio7"); 
if (values != null) { 

R114 = values[0]; 

} 

if ( R114.equals("Radio70")) 

R114 = "SAT"; 

if ( R114.equals(”Radio71")) 

R114 = "UNSAT"; 

out.printIn("R114=" +R114 + "<br>"); 

// Get the feedback of variable modified in the database 
String OTTO_FUEL = "N/A"; 

values = req.getParameterValues( n Radio8 n ); 
if (values *= null) { 

OTTO_FUEL = values[0]; 

} 

if ( OTTO^FUEL.equals( n Radio80")) 

OTTO_FUEL = "SAT";* 
if ( OTTO_FUEL.equals("Radio81")) 

OTTO_FUEL = "UNSAT"; 

out.printIn("OTTO_FUEL= n + OTTO_FUEL + "<br>"); 

// Database connection and modification 
try { 


int casualty = 1; 

Connection con = null; 

Statement stmt = null; 

Class.forName("sun.jdbc.odbc.JdbcOdbcDriver").newlnstance(); 
con = 

DriverManager.getConnection("jdbc:odbc:dbl n ,null,null); 
stmt = con.createStatement(); 
stmt.executeUpdate("UPDATE Tab5 " 

+ "SET ATM_MON =" + "'" + ATM_MON + 

129 


n / n 



+ " ,02 =" + "'" +02 + ’'■ 

+ ", H2 = " + "'■ + H2 + "' " 

+ ",C02 = " + ’'" + C02 + "'” 

+ n ,CO = " + ■'" + CO + "'* 

+ ", R114 + RH4 + "'" 

+ n ,OTTO_FUEL ="+"'" + OTTO_FUEL + 

+ " WHERE CN=1") ; 

} 

catch (Exception ex) { 

out.println("Exception!"); 
ex.printStackTra.ee(out) ; 

} 

// Wrap up 

out.println("</html>"); 

out.flush(); 

out.close(); 

} 

} 


130 



APPENDIX D. LOG TAKING CLIENT APPLET CODE 


// LOG TAKING Client Applet 
// New Attack Submarine 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Applet allows to modify a SQL complaint database through a database 
// server(IDS server) by using JDBC connectivity. 

// Applet was written for USN vehicles for specified US Naval Vessels 
// (Simulated) 

// Allows watchstanders sending information by using mobile computer 
// devices over wireless LANs. 

// Contains no classified or sensitive data 
// Applet can be viewed at: 

// http://131.120.27.67:12/log.html 
// Date : 27 Oct. 1999 

import j ava.awt.*; 

import j ava.awt.event.*; 

import j ava.applet.*; 

import java.util.*; 

import j ava.io.*; 

import j ava.lang. *; 

import jl02.sgl.*; 

import java.util.Date; 

import Symantec.itools.awt.TabPanel; 

import Symantec.itools.awt.BorderPanel; 

import Symantec.itools.awt.ScrollingPanel; 


public class Appletl extends Applet implements ActionListener 

{ 


public void start() 

' { 

super.start() ; 
try 

{ 

theJDBC.openConnection(); 
} // end if 

catch (Exception e) 

{ 

handleException(e); 

} // end catch 

} // end method start 


public void stop() 
{ 

try 


131 


{ 

theJDBC.closeConnection(); 

} // end try 

catch (Exception e) 

{ 

handleException(e); 

} // end catch 

} // end method stop 


public void init() 

{ 

// Take out this line if you don't use 
symantec.itools.net.RelativeURL or 
Symantecvitools.awt.util-StatusScroller 

//Symantec.itools.lang.Context.setApplet(this)? 

// This code is automatically generated by Visual Cafe when 

you add 

// components to the visual environment. It instantiates 
and initializes 

// the components. To modify the code, only use code syntax 

that matches 

// what Visual Cafe can generate, or Visual Cafe may be 
unable to back 

.// parse your Java file into its visual environment. 

//{{INIT_CONTROLS 
setLayout(null); 
setSize(426,266); 

setFont(new Font("Dialog", Font.PLAIN, 12)); 

setForeground(new Color(0)); 

setBackground(new Color(12632256)); 

tabPanell = new Symantec.itools.awt.TabPanel()? 

try { 

java.lang.String[] tempstring = new 
j ava.lang.String[3]; 

tempString[0]. = new java.lang.String("AEF Logs"); 
tempString[1] = new j ava.lang.String("Atmosphere 

Control Logs"); 

tempString[2] = new java.lang.String("Remarks"); 
tabPanell.setPanelLabels(tempString); 

} 

catch(java.beans.PropertyVetoException e) { } 
try { 

tabPanell.setCurrentPanelNdx(0); 

} 

catch(java.beans.PropertyVetoException e) { } 
tabPanell.setBounds(72,36,660,480); 
tabPanell.setBackground(new Color(12632256)) ; 
add(tabPanell); 

panell = new java.awt.Panel(); 
panel1.setLayout(null); 
panell.setVisible(false); 
panell.setBounds(12,33,636,436); 

132 



panell.setBackground(new Color(12632256)); 
tabPanell.add(panel1); 

tabPanel2 = new Symantec.itools.awt.TabPanel(); 
try { 

java.lang.String[] tempString = new 
java.lang.String[2]; 

tempString[0] = new java.lang.String( n 400 Cycle 

Sets n ) ; 

tempString[1] = new java.lang.String("Detectors & 

Indicators"); 

tabPanel2.setPanelLabels(tempString); 

} 

catch(java.beans.PropertyVetoException e) { } 
try { 

tabPanel2.setCurrentPanelNdx(1); 

} 

catch(java.beans.PropertyVetoException e) { } 
tabPanel2.setBounds(12,27,611,380); 

tabPanel2.setFont(new Font("Dialog", Font.PLAIN, 12)); 

tabPanel2.setBackground(new Color(12632256)); 

panell.add(tabPanel2); 

panel3 = new java.awt.Panel(); 

panel3.setLayout(null); 

panel3.setVisible(false); 

panel3.setBounds(12,33,587,336) ; 

tabPanel2.add(panel3); 

buttonl = new java.awt.Button(); 

buttonl.addActionListener(this); 

buttonl.setLabel("Submit"); 

buttonl .* setBounds (504,303,68,19) ; 

buttonl.setBackground(new Color(12632256)); 

pane13.add(buttonl); 

button2 = new java.awt.Button(); 

button2.addActionListener(this); 

button2.setLabel("Retrieve"); 

button2.setBounds(420,303,69,19); 

button2.setBackground(new Color(12632256)); 

pane13.add(button2); 

textFieldl = new java.awt.TextField(); 
textFieldl.setEditable(false); 
textFieldl.setBounds(10,63,67,20); 

textFieldl.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textFieldl.setForeground(new Color(0)); 

textFieldl.setBackground(new Color(16777215)); 

panel3.add(textFieldl) ; 

textField2 = new java.awt.TextField(); 

textField2.setBounds(10,87,67,20); 

textField2.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField2.setBackground(new Color(16777215)); 

panel3.add(textField2) ; 

textField3 = new java.awt.TextField(); 

textField3.setBounds(10,111,67,20); 

textField3.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField3.setBackground(new Color(16777215)); 

panel3.add(textField3); 

textField4 = new java.awt.TextField(); 

133 



textField4.setBounds(10,135,67,20); 

textField4.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField4.setBackground(new Color(16777215)); 

panel3.add(textField4); 

textField5 = new java.awt.TextField(); 

textField5.setBounds(10,159,67,20); 

textFieldS.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField5.setBackground(new Color(16777215)); 

panel3.add(textFieldS); 

textField6 = new java.awt.TextField(); 

textField6.setBounds(10,183,67,20); 

textField6.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField6.setBackground(new Color(16777215)); 

panel3.add(textField6); 

textField7 = new java.awt.TextField(); 

textField7.setBounds(96,63,45,20); 

textField7.setFont(new Font("Dialog", ,Font.PLAIN, 10)); 

textField7.setBackground(new Color(-128)); 

panel3.add(textField7); 

textField8 = new java.awt.TextField(); 

textField8.setBounds(144,63,45,20); 

textField8.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField8.setBackground(new Color(-8323200)); 

panel3.add(textField8); 

textField9 = new java.awt.TextField(); 

textField9.setBounds(192,63,45,20); 

textField9.setFont(new Font("Dialog", Font.PLAIN, 10)); 
textField9.setBackground(new Color(-128)); 
panel3.add(textField9); 

textFieldlO = new java.awt.TextField(); 
textFieldlO.setBounds(240,63,45,20); 

textFieldlO.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textFieldlO.setBackground(new Color(-8323200)); 

panel3.add(textFieldlO); 

textFieldll = new java.awt.TextField(); 

textFieldll.setBounds(288,63,45,20); 

textFieldll.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textFieldll.setBackground(new Color(-128)); 

panel3.add(textFieldll); 

textFieldl2 = new java.awt.TextField(); 

textField!2.setBounds(348,63,45,20); 

textFieldl2.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl2.setBackground(new Color(-8323200)); 

panel3,add(textFieldl2); 

textFieldl3 = new java.awt.TextField(); 

textField!3.setBounds(396,63,45,20); 

textFieldl3.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl3.setBackground(new Color(-128)); 

panel3.add(textField!3); 

textFieldl4 = new java.awt.TextField(); 

textFieldl4.setBounds(444,63,45,20); 

textFieldl4.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl4.setBackground(new Color(-8323200)); 

pane13.add(textFieldl4); 

textFieldlS = new java.awt.TextField(); 

textFieldlS.setBounds(492,63,45,20); 

134 



textFieldl5 .setFont (new Font ("Dialog", Font.PLAIN, 10)) 

textFieldl5.setBackground(new Color(-128)); 

panel3.add(textFieldl5); 

textFieldl6 = new java.awt.TextField(); 

textFieldl6.setBounds(540,63,45,20); 

textFieldl6.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl6.setBackground(new Color(-8323200)); 

panel3.add(textFieldl6); 

textFieldl7 = new java.awt.TextField(); 

textFieldl7.setBounds(96,87,45,20); 

textFieldl7.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!7.setBackground(new Color(-128)); 

panel3.add(textFieldl7); 

textFieldl8 = new java.awt.TextField(); 

textFieldl8.setBounds(144,87,45,20); 

textFieldl8.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl8.setBackground(new Color(-8323200)); 

panel3.add{textFieldl8); 

textFieldl9 = new java.awt.TextField(); 

textFieldl9.setBounds(192,87,45,20); 

textFieldl9.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!9.setBackground(new Color(-128)); 

panel3.add(textFieldl9); 

textField2 0 = new java.awt.TextField(); 

textField20.setBounds(240,87,45,20); 

textField20.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField20.setBackground(new Color(-8323200)); 

panel3.add(textField20); 

textField21 = new java.awt.TextField(); 

textField21.setBounds(288,87,45,20); 

textField21.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField21.setBackground(new Color(-128)); 

panel3.add(textField21); 

textField22 = new java.awt.TextField(); 

textField22.setBounds(348,87,45,20); 

textField22.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField22.setBackground(new Color(-8323200)); 

panel3.add(textField22); 

textField23 = new java.awt-TextField(); 

textField23.setBounds(396,87,45,20); 

textField23.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField23.setBackground(new Color(-128)); 

panel3.add(textField23); 

textField24 = new java.awt.TextField() ; 

textField24.setBounds(444,87,45,20); 

textField24.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField24.setBackground(new Color(-8323200)); 

panel3.add(textField24); 

textField25 = new java.awt.TextField() ; 

textField25.setBounds(492,87,45,20) ; 

textField25.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField25.setBackground(new Color(-128)); 

panel3.add(textField25); 

textField26 = new java.awt.TextField(); 

textField26.setBounds(540,87,45,20); 

textField26.setFont(new Font("Dialog", Font.PLAIN, 10)) 

135 



textField2 6. setBackground (new Color(-8323200)); 
panel3.add(textField2 6) ; 
textField27 = new java.awt.TextField() ; 
textField27.setBounds(96,111,45,20) ? 

textField27.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField27.setBackground(new Color(-128)); 

panel3.add(textField27) ; 

textField28 = new java.awt.TextField() ; 

textField2 8.setBounds(144,111, 45,20) ; 

textField28.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField28.setBackground(new Color(-8323200)); 

pane!3.add(textField28); 

textField29 = new java.awt.TextField(); 

textField29.setBounds(192,111,45,20) ; 

textField29.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField29.setBackground(new Color(-128)); 

panel3.add(textField29); 

textField30 = new java.awt.TextFieldO; 

textField30.setBounds(240, 111,45,20) ; 

textField3 0.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField30.setBackground(new Color(-8323200)); 

panel3.add(textField30); 

textField31 = new java.awt.TextField(); 

textField31.setBounds(288,111,45,20) ; 

textField31.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField31.setBackground(new Color(-128)); 

panel3.add(textField31) ; 

textField32 = new java.awt.TextField(); 

textField32.setBounds(348, 111, 45,20) ; 

textField32.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField32.setBackground(new Color(-8323200)); 

panel3.add(textField32 ) ; 

textField33 = new java.awt.TextField(); 

textField33.setBounds(396,111,45,20); 

textField33.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField33.setBackground(new Color(-128)); 

panel3.add(textField33) ; 

textField34 = pew java.awt.TextField() ; 

textField34.setBounds(444,111,45,20) ; 

textField34.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField34.setBackground(new Color(-8323200)); 

panel3.add(textField34) ; 

textField35 = new java.awt.TextField() ; 

textField35.setBounds(492,111,45,20) ; 

textField35.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField35.setBackground(new Color(-128)); 

pane13.add(textField35); 

textField36 = new java.awt.TextField(); 

textField36.setBounds(540,111,45,20) ; 

textField36.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField36.setBackground(new Color(-8323200)); 

panel3.add(textField3 6) ; 

textField37 = new java.awt.TextField(); 

textField37.setBounds(96,135,45,20) ; 

textField37.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField37.setBackground(new Color(-128)); 

136 



panel3.add(textField37); 

textField38 = new java.awt.TextField(); 

textField38.setBounds(144,135,45,20) ; 

textField38.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField38.setBackground(new Color(-8323200)); 

panel3.add(textField38); 

textField39 = new java.awt.TextField(); 

textField39 .setBounds (192,135,45,20) ; 

textField39.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField39.setBackground(new Color(-128)); 

panel3.add(textField39); 

textField40 = new java.awt.TextField(); 

textField40.setBounds(240,135,45,20); 

textField40.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField40.setBackground(new Color(-8323200)); 

panel3.add(textField40); 

textField41 = new java.awt.TextField(); 

textField41.setBounds(288,135,45,20) ; 

textField41.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField41.setBackground(new Color(-128)); 

panel3.add(textField41) ; 

textField42 = new java.awt,TextField(); 

textField42.setBounds(348,135,45,20); 

textField42.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField42.setBackground(new Color(-8323200)); 

panel3.add(textField42); 

textField43 = new java.awt.TextField() ; 

textField43.setBounds(396,135,45,20) ; 

textField43.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField43.setBackground(new Color(-128)); 

pane13.add(textField43); 

textField44 = new java.awt.TextField(); 

textField44.setBounds(444,135,45,20) ; 

textField44.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField44.setBackground(new Color(-8323200)); 

panel3.add(textField44); 

textField45 = new java.awt.TextField(); 

textField45.setBounds(492,135,45,20) ; 

textField45.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField45.setBackground(new Color(-128)); 

panel3.add(textField45); 

textField46 = new java.awt.TextField(); 

textField46.setBounds(540,135,45,20); 

textField46.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField46.setBackground(new Color(-8323200)); 

panel3.add(textField46); 

textField47 = new java.awt.TextField(); 

textField47.setBounds(96,159,45,20); 

textField47.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField47.setBackground(new Color(-128)); 

panel3.add(textField47); 

textField48 = new java.awt.TextField(); 

textField48.setBounds(144,159,45,20) ; 

textField48.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField48.setBackground(new Color(-8323200)); 
panel3.add(textField48); 

137 




textField49 = new java.awt.TextFieId(); 
textField49.setBounds{192,159,45,20); 

textField49.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textField49.setBackground(new Color(-128)); 

panel3.add(textField49); 

textField50 = new java.awt.TextFieldO; 

textFieldSO.setBounds(240,159,45,20); 

textField50.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField50.setBackground(new Color(-8323200)); 

panel3.add(textField50); 

textField51 = new java.awt.TextFieldO; 

textFieldS1.setBounds(288,159,45,20); 

textField51.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFields1.setBackground(new Color(-128)); 

panel3.add(textField51); 

textField52 = new java.awt.TextFieldO; 

textField52.setBounds<348,159,45,20); 

textField52.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField52.setBackground(new Color(-8323200)); 

panel3.add(textField52); 

textField53 = new java.awt.TextFieldO; 

textField53.setBounds(396,159,45,20); 

textField53.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField53.setBackground(new Color(-128)); . 

panel3.add(textField53); 

textField54 = new java.awt.TextFieldO; 

textField54.setBounds(444,159,45,20); 

textField54.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textField54.setBackground(new Color(-8323200)); 

panel3.add(textField54); 

textField55 = new java.awt.TextFieldO; 

textField55.setBounds(492,159,45,20); 

textField55.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField55.setBackground(new Color(-128)); 

panel3.add(textField55); 

textField56 = new java.awt.TextFieldO; 

textField56.setBounds(540,159,45,20); 

textFieldS6.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textField56.setBackground(new Color(-8323200)); 

panel3.add(textField56); 

textField57 = new java.awt.TextFieldO; 

textField57.setBounds(96,183,45,20); 

textField57.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField57.setBackground(new Color(~128)); 
panel3.add(textField57); 

textField58 = new java.awt.TextFieldO; 
textField58.setBounds(144,183,45,20); 

textField58.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldS8.setBackground(new Color(-8323200)); 

panel3.add(textFieldS 8); 

textField59 = new java.awt.TextFieldO; 

textField59.setBounds(192,183,45,20); 

textField59.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField59.setBackground(new Color(-128)); 

panel3.add(textField59); 

textField60 = new java.awt.TextFieldO; 

138 



textField60 . setBounds (240,183,45,20); 

textField60.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField60.setBackground(new Color(-8323200)); 

panel3.add(textField60); 

textField61 = new java.awt.TextField(); 

textField61.setBounds(288,183,45,20); 

textField61.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField61.setBackground(new Color(-128)); 

panel3.add(textField61); 

textField62 = new java.awt.TextField(); 

textField62.setBounds(348,183,45,20); 

textField62.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField62.setBackground(new Color(-8323200)); 

panel3.add(textField62); 

textField63 = new java.awt.TextField(); 

textField63.setBounds(396,183,45,20); 

textField63.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField63.setBackground(new Color(-128)); 

panel3.add(textField63); 

textField64 = new java.awt.TextField(); 

textField64.setBounds(444,183,45,20); 

textField64.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField64.setBackground(new Color(-8323200)); 

panel3.add(textField64); 

textField65 = new java.awt.TextField(); 

textField65.setBounds(492,183,45,20); 

textField65.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField65.setBackground(new Color(-128)); 

panel3.add(textField65); 

textField66 = new java.awt.TextField(); 

textField66.setBounds(540,183,45,20); 

textField66.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField66.setBackground(new Color(-8323200)); 
panel3.add(textField66) ,- 

labell = new java.awt.Label("Time Period"); 
labell.setBounds(12,39,67,15); 

labell.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3.add(labell); 

label2 = new java.awt.Label("DC Amps"); 
label2.setBounds(96,39,45,15); 

label2.setFont(new Font("Dialog", Font.PLAIN, 9)); 
panel3.add(label2); 

label3 = new java.awt.Label("AC Amps"); 
label3.setBounds(144,39,45,15); 

label3.setFont(new Font("Dialog", Font.PLAIN, 9)); 
panel3.add(label3); 

label4 = new java.awt.Label(" Freq"); 

label4.setBounds(192,39,45,15); 

label4.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3.add(label4); 

labels = new java.awt.Label(" Volts"); 

labels.setBounds(240,39,45,15); 

labels.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3.add(labels); 

label6 = new java.awt.Label("Grnd Det"); 
label6.setBounds(288,39,45,15); 

139 



Iabel6.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3,add(label6); 

label7 = new java.awt.Label("DC Amps"); 
label7.setBounds(348,39,45,15); 

label7.setFont(new Font("Dialog", Font.PLAIN, 9)); 
panel3.add(label7); 

label8 = new java.awt.Label("AC Amps"); 
label8.setBounds(396,39,45,15); 

label8.setFont(new Font("Dialog", Font.PLAIN, 9)); 
panel3.add(label8); 

label9 = new java.awt.Label(" Freq"); 
label9.setBounds(444,39,45,15); 

label9.setFont(new Font("Dialog", Font.PLAIN, 10)); 
pane13.add(label9); 

labellO = new java.awt.Label(" Volts"); 
label10.setBounds(492,39,45,15); 

label10.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3.add(labellO); 

label11 = new java.awt.Label("Grnd Det"); 
labelll.setBounds(540,39,45,15); 

label11.setFont(new Font("Dialog", Font.PLAIN, 10)); 
panel3.add(labelll); 

labell2 = new java.awt.Label(" NO. 

Iabell2.setBounds(96,15,240,20); 

label12.setFont(new Font("Dialog", Font.BOLD, 15)); 
panel3.add(label12); 

label!3 = new java.awt.Label(" NO. 

Iabell3.setBounds(348,15,240,20); 

labell3.setFont(new Font("Dialog", Font.BOLD, 15)); 
panel3.add(labe!13); 

textField67 = new java.awt.TextField(); 
textField67.setBounds(96,243,45,20); 

textField67.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField67.setBackground(new Color(16777215)); 

panel3.add(textField67); 

textField68 = new java.awt.TextField(); 

textField68.setBounds(144,243,45,20); 

textField68.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField68.setBackground(new Color{16777215)); 

panel3.add(textField68); 

textField69 = new java.awt.TextField(); 

textField69 . setBoxinds (192,243,45,20); 

textField69.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField69.setBackground(new Color(16777215)); 

panel3.add(textField69); 

textField70 = new java.awt.TextField(); 

textField70.setBounds(240,243,45,20); 

textField70.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField70.setBackground(new Color(16777215)); 

panel3.add(textField70); 

textField71 = new java.awt.TextField(); 

textField71.setBounds(288,243,45,20); 

textField71.setFont(new Font("Dialog", Font.PLAIN, 10)); 
textField71.setBackground(new Color(16777215)); 

140 



panel3.add(textField71); 

textField72 = new java.awt.TextField(); 

textField72.setBounds(348,243,45,20); 

textField72.setFont(new Font{"Dialog", Font.PLAIN, 10)) 

textField72.setBackground(new Color(16777215)); 

panel3.add(textField72); 

textField73 = new java.awt.TextField()? 

textField73.setBounds(396,243,45,20); 

textField73.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField73.setBackground(new Color(16777215)) ; 

panel3,add(textField73); 

textField74 = new java.awt.TextField(); 

textField74.setBounds(444,243,45,20); 

textField74.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField74.setBackground(new Color(16777215)) ; 

panel3.add(textField74); 

textField75 = new java.awt.TextField(); 

textField75.setBounds(492,243,45,20)? 

textField75.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField75.setBackground(new Color(16777215)); 

panel3.add(textField75); 

textField76 = new java.awt.TextField(); 

textField76.setBounds(540,243,45,20); 

textField76.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField76.setBackground(new Color(16777215)); 

panel3.add(textField76); 

choicel = new java.awt.Choice(); 

choicel.addltem("00:00"); 

choicel.addltem("01:00"); 

choicel.addltem("02:00"); 

choicel.addltem("03:00"); 

choicel.addltem("04:00"); 

choicel.addltem("05:00"); 

choicel.addltem("06:00"); 

choicel.addltem("07:00"); 

choicel.addltem("08:00"); 

choicel.addltem("09:00"); 

choicel.addltem("10:00") ; 

choicel.addltem("11:00") ; 

choicel.addltem("12:00"); 

choicel.addltem("13:00"); 

choicel.addltem("14:00") ; 

choicel.addltem("15:00"); 

choicel.addltem("16:00"); 

choicel.addltem("17:00"); 

choicel.addltem("18:00"); 

choicel.addltem("19:00") ; 

choicel.addltem("20:00"); 

choicel.addltem("21:00"); 

choicel.addltem("22:00"); 

choicel.addltem("23:00"); 

panel3.add(choicel); 

choicel.setBounds(10,243,67,20); 

choicel.setBackground(new Color(16777215)); 

panel4 = new j ava.awt.Panel(); 

pane!4.setLayout(null); 


141 




10 )) 


panel4.setBounds(12,33,587,336); 
panel4.setBackground(new Color(12632256)); 
tabPanel2.add(panel4); 

textField77 = new java.awt.TextField(); 
textField77.setEditable(false); 
textField77.setBounds(0,75,67,20) ; 
textField77.setFont(new Font("Dialog", Font.PLAIN, 
textField77.setForeground(new Color(0)); 
textField77.setBackground(new Color(16777215)); 
panel4.add(textField77); 
textField78 = new java.awt.TextField(); 
textField78.setBounds(0,99,67,20) ; 
textField78.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField78.setBackground(new Color(16777215)) ; 
panel4.add(textField78); 
textField79 = new java.awt.TextField(); 
textField79.setBounds(0,123,67,20); 

textField79.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField79.setBackground(new Color(16777215)); 

panel4.add(textField79); 

textField80 - new java.awt.TextField(); 

textField80.setBounds(0,147,67,20) ; 

textField80.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField80.setBackground(new Color(16777215)); 

pane!4.add(textField80); 

textField81 = new java.awt.TextField(); 

textField81.setBounds(0,171,67,20) ; 

textField81.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField81.setBackground(new Color(16777215)); 

panel4.add(textField81); 

textFi.eld82 = new java.awt .TextField() ; 

textField82.setBounds(0,195,67,20) ; 

textField82.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField82.setBackground(new Color(16777215)); 

panel4.add(textField82); 

textField83 = new java.awt.TextField(); 

textField83.setBounds(84,75,45,20) ; 

textField83.setFont(new Font("Dialog"Font.PLAIN, 10)) 

textField83.setBackground(new Color(-128)); 

panel4.add(textField83); 

textField84 = new java.awt.TextField(); 

textField84.setBounds(132,75,45,20) ; 

textField84.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField84.setBackground(new Color(-8323200)); 

panel4.add(textField84); 

textField85 = new java.awt.TextField(); 

textField85.setBounds(180,75,45,20) ; 

textField85.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField85.setBackground(new Color(-128)); 

panel4.add(textField85); 

textField86 = new java.awt.TextField(); 

textField86.setBounds(228,75,45,20); 

textField86.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField86.setBackground(new Color(-8323200)); 
panel4,add(textField86); 
textField87 = new java.awt.TextField(); 

142 



textField87.setBounds(276,75,45,20); 

textField87.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField87.setBackground(new Color(-128)); 

panel4.add(textField87); 

textField88 = new java.awt.TextField{); 

textField88.setBounds(324,75,45,20); 

textField88.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField88.setBackground(new Color(-8323200)); 

panel4.add(textField88); 

textField89 = new java.awt.TextField(); 

textField89.setBounds(372,75,45,20); 

textField89.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField89.setBackground(new Color(-128)); 

panel4.add(textField89); 

textField90 = new java.awt.TextField(); 

textField90.setBounds(420,75,45,20); 

textField90.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField90.setBackground(new Color(-8323200)); 

panel4.add(textField90); 

textField91 = new java.awt.TextField(); 

textField91.setBounds(468,75,25,20); 

textField91.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField91.setBackground(new Color(-128)); 

panel4.add(textField91); 

textField92 = new java.awt.TextField(); 

textField92 .setBounds (.496,75,25,20) ; 

textField92.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField92.setBackground(new Color(-8323200)); 

panel4.add(textField92); 

textField93 = new java.awt.TextField(); 

textField93.setBounds(84,99,45,20) ; 

textField93.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField93.setBackground(new Color(-128)); 

panel4.add(textField93); 

textField94 = new java.awt.TextField(); 

textField94.setBounds(132,99,45,20) ; 

textField94.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField94.setBackground(new Color(-8323200)); 

panel4,add(textField94); 

textField95 = new java.awt.TextField(); 

textField95.setBounds(180,99,45,20); 

textField95.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField95.setBackground(new Color(-128)); 

panel4.add(textField95); 

textField96 = new java.awt.TextField(); 

textField96.setBounds(228,99,45,20) ; 

textField96.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField96.setBackground(new Color(-8323200)); 

panel4.add(textField96); 

textField97 = new java.awt.TextField(); 

textField97.setBounds(276,99,45,20); 

textField97.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField97.setBackground(new Color(-128)); 

panel4.add(textField97); 

textField98 = new java.awt.TextField(); 

textField98.setBounds(324,99,45,20); 

143 



textField98.setFont(new Font("Dialog", Font.PLAIN, 10)); 

textField98.setBackground(new Color(-8323200)); 

panel4.add(textField98); 

textField99 = new java.awt.TextFieldO; 

textField99.setBounds(372,99,45,20); 

textField99.setFont(new Font("Dialog", Font.PLAIN, 10)); 
textField99.setBackground(new Color(-128)); 
panel4.add(textField99); 

textFieldlOO = new java.awt.TextFieldO; 
textFieldl00.setBounds(420,99,45,20); 

textFieldlOO.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldlOO.setBackground(new Color(-8323200)); 

panel4.add(textFieldlOO); 

textFieldlOl = new java.awt.TextField(); 

textFieldl01.setBounds(468,99,25,20); 

textFieldlOl.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldlOl.setBackground(new Color(-128)); 

panel4.add(textFieldlOl); 

textFieldl02 = new java.awt.TextField(); 

textFieldl02.setBounds(496,99,25,20); 

textFieldl02.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl02.setBackground(new Color(-8323200)); 

panel4.add(textFieldl02); 

textFieldl03 = new java.awt.TextFieldO; 

textFieldl03.setBounds(84,123,45,20); 

textField!03.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl03.setBackground(new Color(-128)); 
panel4.add(textFieldl03); 
textFieldl04 = new java.awt.TextFieldO; 
textFieldl04.setBounds(132,123,45,20); 

textFi'eldl04. setFont (new Font ("Dialog", Font. PLAIN, 10)) 
textFieldl04.setBackground(new Color(-8323200)); 
pane!4.add(textFieldl04); 
textFieldl05 = new java.awt.TextFieldO; 
textFieldl05.setBounds(180,123,45,20) ; 

textFieldl05.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldlOS.setBackground(new Color(-128)); 

panel4.add(textFieldl05); 

textFieldl06 = new java.awt.TextFieldO; 

textFieldl06.setBounds(228,123,45,20); 

textFieldl06.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl06.setBackground(new Color(-8323200)); 
panel4.add(textFieldl06); 
textFieldl07 = new java.awt.TextFieldO; 
textFieldl07.setBounds(276,123,45,20); 

textFieldl07.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl07.setBackground(new Color(-128)); 

panel4.add(textFieldl07); 

textFieldl08 = new java.awt.TextFieldO; 

textFieldl08.setBounds(324,123,45,20); 

textFieldl08.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl08.setBackground(new Color(-8323200)); 

panel4.add(textFieldl08); 

textFieldl09 = new java.awt.TextFieldO; 

textFieldl09.setBounds(372,123,45,20); 

textFieldl09.setFont(new Font("Dialog", Font.PLAIN, 10)) 

144 



textFieldl09.setBackground(new Color(-128)); 
panel4.add(textFieldl09); 
textFieldllO = new java.awt.TextField(); 
textFieldllO.setBounds(420,123,45,20); 

textFieldllO.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldllO.setBackground(new Color(-8323200)); 

panel4.add(textFieldllO); 

textFieldlll = new java.awt.TextField(); 

textFieldlll.setBounds(468,123,25,20); 

textFieldlll.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldlll.setBackground(new Color(-128)); 

panel4.add(textFieldlll); 

textFieldll2 = new java.awt.TextField(); 

textFieldll2.setBounds(496,123,25,20); 

textFieldll2.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldll2.setBackground(new Color(-8323200)); 
panel4.add(textFieldll2); 
textFieldll3 = new java.awt.TextField(); 
textField!13.setBounds(84,147,45,20); 

textField!13.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldll3.setBackground(new Color(-128)); 

panel4.add(textFieldll3); 

textFieldll4 = new java.awt.TextField(); 

textFieldll4.setBounds(132,147,45,20); 

textFieldll4.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldll4.setBackground(new Color(-8323200)); 

panel4.add(textFieldll4); 

textFieldllS = new java.awt.TextField(); 

textFieldllS.setBounds(180,147,45,20); 

textFieldllS.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldllS.setBackground(new Color(-128)); 

panel4.add(textFieldllS); 

textFieldll6 = new java.awt.TextField(); 

textFieldll6.setBounds(228,147,45,20); 

textFieldll6.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldll6.setBackground(new Color(-8323200)); 
panel4.add(textFieldll6); 
textField!17 = new java.awt.TextField(); 
textFieldll7.setBounds(276,147,45,20); 

textField!17.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!17.setBackground(new Color(-128)); 

panel4.add(textFieldll7); 

textFieldll8 = new java.awt.TextField(); 

textFieldll8.setBounds(324,147,45,20); 

textFieldll8.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldll8.setBackground(new Color(-8323200)) ; 

panel4.add(textFieldll8); 

textFieldll9 = new java.awt.TextField(); 

textFieldll9.setBounds(372,147,45,20)? 

textFieldll9.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldll9.setBackground(new Color(-128)); 

panel4.add(textFieldll9); 

textFieldl20 = new java.awt.TextField(); 

textFieldl20.setBounds(420,147,45,20); 

textFieldl20.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl20.setBackground(new Color(-8323200)); 

145 




panel-4 . add (textFieldl20) ; 

textField!21 = new java.awt.TextField(); 

textFieldl21.setBounds(468,147,25,20); 

textFieldl21.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl21.setBackground(new Color(-128)); 

panel4.add(textFieldl21); 

textFieldl22 = new java.awt.TextFieldO; 

textFieldl22.setBounds(496,147,25,20); 

textFieldl22.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl22.setBackground(new Color(-8323200))? 
panel4.add(textFieldl22); 
textFieldl23 = new java.awt.TextField(); 
textFieldl23.setBounds(84,171,45,20) ; 

textFieldl23.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl23.setBackground(new Color(-128)); 

panel4.add(textFieldl23); 

textFieldl24 = new java.awt.TextField(); 

textFieldl24.setBounds (132,171,45,20) ; 

textFieldl24.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl24.setBackground(new Color(-8323200)); 

panel4.add(textField!24); 

textFieldl25 = new java.awt.TextFieldO; 

textFieldl25.setBounds(180,171,45,20); 

textFieldl25.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl25.setBackground(new Color(-128)); 
panel4.add(textFieldl25); 

textFieldl26 = new java.awt.TextField(); 
textFieldl26.setBounds(228,171,45,20); 

textFieldl26.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl26.setBackground(new Color(-8323200)); 

panel4.add(textFieldl26); 

textFieldl27 = new java.awt.TextField(); 

textFieldl27.setBounds(276,171,45,20); 

textFieldl27.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl27.setBackground(new Color(-128)); 
panel4.add(textFieldl27); 

textFieldl28 = new java.awt.TextField(); 
textFieldl28.setBounds(324,171,45,20); 

textFieldl28.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl28.setBackground(new Color(-8323200)); 

panel4.add(textFieldl28); 

textFieldl29 = new java.awt.TextFieldO; 

textFieldl29.setBounds(372,171,45,20); 

textFieldl29.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl29.setBackground(new Color(-128)); 

panel4.add(textFieldl29); 

textFieldl30 = new java.awt.TextFieldO; 

textFieldl30.setBounds(420,171,45,20); 

textFieldl30.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl30.setBackground(new Color(-8323200)); 

panel4.add(textFieldl30); 

textFieldl31 = new java.awt.TextFieldO; 

textFieldl31.setBounds(468,171,25,20); 

textField!31.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl31.setBackground(new Color(-128)); 
panel4.add(textFieldl31); 

146 



textFieldl32 = new java.awt.TextField() 7 
textFieldl32.setBounds(496,171,25,20); 

textFieldl32.setFont(new Font("Dialog”, Font.PLAIN, 10)) 
textFieldl32.setBackground(new Color{-8323200 ))7 
panel4.add(textFieldl32); 
textField!33 = new java.awt.TextField ()7 
textField!33.setBounds(84,195,45,20 )7 

textFieldl33.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textFieldl33.setBackground(new Color(-128 ))7 

panel4.add(textFieldl33 )7 

textField!34 = new java.awt.TextField ()7 

textFieldl34.setBounds(132,195,45,20 )7 

textFieldl34.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl34.setBackground(new Color(-8323200 ))7 
panel4.add(textFieldl34 )7 
textFieldl35 = new java.awt.TextField ()7 
textField!35.setBounds(180,195,45,20)7 

textField!35.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl35.setBackground(new Color(-128)); 

pane!4.add(textField!35 )7 

textFieldl36 = new java.awt.TextField ()7 

textFieldl36.setBounds(228,195,45,20 )7 

textFieldl36.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl36.setBackground(new Color(-8323200 ))7 
panel4.add(textFieldl36 )7 
textFieldl37 = new java.awt.TextField ()7 
textFieldl37.setBounds(276,195,45,20 >7 

textField!37.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl37.setBackground(new Color(-128 ))7 

panel4.add(textField!37 )7 

textFieldl38 = new java.awt.TextField ()7 

textFieldl38.setBounds(324,195,45,20 )7 

textFieldl38.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl38.setBackground(new Color(-8323200 ))7 

panel4.add(textFieldl38 )7 

textFieldl39 = new java.awt.TextField ()7 

textFieldl39.setBounds(372,195,45,20 )7 

textFieldl39.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl39.setBackground(new Color(-128 ))7 

panel4.add(textFieldl39 )7 

textFieldl40 = new java.awt.TextField ()7 

textFieldl40.setBounds(420,195,45,20 )7 

textFieldl40.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl40.setBackground(new Color(-8323200 ))7 

panel4.add(textFieldl40 )7 

textFieldl41 = new java.awt.TextField ()7 

textFieldl41.setBounds(468,195,25,20 )7 

textFieldl41.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl41.setBackground(new Color(-128 ))7 

panel4.add(textFieldl41 )7 

textFieldl42 = new java.awt.TextField ()7 

textFieldl42.setBounds(496,195,25,20 )7 

textFieldl42.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl42.setBackground(new Color(-8323200 ))7 
panel4.add(textFieldl42)? 

Iabell5 = new java.awt.Label("Time Period ")7 

147 



Iabell5.setBounds(0,51,70,15) ; 

labellS.setFont(new Font("Dialog", Font.PLAIN, 11)); 
panel4.add(labell5); 

labell6 = new java.awt.Label(" #1"); 

labell6.setBounds(84,51,45,15) ; 

labell6.setFont(new Font("Dialog", Font.PLAIN, 10)); 
labell6.setBackground(new Color(-128)); 
panel4.add(labellS) ; 

labe!17 = new java.awt.Label(■ #2 ”) ; 

labell7.setBounds(132,51,45,15); 

label 17 . setFont (new Font ("Dialog",. Font.PLAIN, 10)); 
labell7.setBackground(new Color(-8323200)); 
panel4 .add(label 17.) ; 

label!8 = new java.awt.Label(" Volts"); 
labell8.setBounds(180,51,45,15) ; 

label18.setFont(new Font("Dialog", Font.PLAIN, 9)); 
label18.setBackground(new Color(-128)); 
panel4.add(label!8); 

labell9 = new java.awt.Label(" AB"); 

labell9.setBounds(228,51,45,15); 

labell9.setFont(new Font("Dialog", Font.PLAIN, 10)); 
labell9.setBackground(new Color(-8323200)); 
panel4.add(label19); 

label20 = new java.awt.Label(" BC"); 

label20.setBounds(276,51,45,15); 

label20.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label20.setBackground(new Color(-128)); 
pane!4.add(label20); 

labe!21 = new java.awt.Label(" AC"); 

label21.setBounds(324,51,45,15) ; 

label2.1. setFont (new Font ("Dialog", Font.PLAIN, 10)); 
label21. setBackground(new Color (-8323200) ) ; 
panel4 .add(label21) ; 

label22 = new java.awt.Label("Agitation"); 
label22.setBounds(372,51,45,15); 

label22.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label22.setBackground(new Color(-128)); 
panel4.add(label22) ; 

label23 = new java.awt.Label("Filt DP"); 
label23.setBounds(420,51,45,15) ; 

label23.setFont(new Font("Dialog", Font.PLAIN, 9)); 
labe123.setBackground(new Color(-8323200)); 
panel4.add(label23) ; 

label24 = new java.awt.Label("Fuse"); 
label24.setBounds(468,51,25,15); 

label24.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label24.setBackground(new Color(-128)); 
panel4.add(label24); 

label25 = new java.awt.Label("Lmps"); 
labe!25.setBounds(496,51,25,15) ; 

label25.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label25.setBackground(new Color(-8323200)); 
panel4.add(label25); 

textFieldl43 = new java.awt,TextField(); 
textFieldl43.setBounds(524,75,25,20) ; 

textFieldl43.setFont(new Font("Dialog", Font.PLAIN, 10)) 

148 



textFieldl43.setBackground(new Color(-128)); 
panel4.add(textFieldl43); 
textFieldl44 = new java.awt.TextField() ; 
textFieldl44.setBounds(524,99,25,20); 

textFieldl44*setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl44.setBackground(new Color(-128)); 

panel4.add(textFieldl44); 

textFieldl45 = new java.awt.TextField(); 

textFieldl45.setBounds(524,123,25,20); 

textFieldl45.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl45.setBackground(new Color(-128)); 

panel4.add(textFieldl45); 

textFieldl46 = new java.awt.TextFieldO; 

textFieldl46.setBounds(524,147,25,20); 

textFieldl46.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl46.setBackground(new Color(-128)); 

panel4.add(textFieldl46); 

textFieldl47 = new java.awt.TextField(); 

textFieldl47.setBounds(524,171,25,20); 

textFieldl47.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl47.setBackground(new Color(-128)); 

panel4.add(textField!47); 

textFieldl48 = new java.awt.TextField() ; 

textFieldl48.setBounds(524,195,25,20); 

textFieldl48.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl48.setBackground(new Color(-128)); 

panel4.add(textFieldl48); 

label26 = new java.awt.Label(" 19"); 

label26.setBounds(524,51,25,15); 

label26.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label26.setBackground(new Color(-128)); 
panel4.add(label26); 

textFieldl49 = new java.awt.TextField() ; 
textFieldl49.setBounds(552,75,25,20); 

textFieldl49.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl49.setBackground(new Color(-8323200)); 

panel4.add(textFieldl49); 

textFieldlSO = new java.awt.TextField(); 

textFieldlSO.setBounds(552,99,25,20); 

textFieldlSO.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldlSO.setBackground(new Color(-8323200)); 

panel4.add(textField!50); 

textFieldlSl = new java.awt.TextField(); 

textFieldlSl.setBounds(552,123,25,20); 

textFieldlSl.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldlSl.setBackground(new Color(-8323200)); 
panel4.add(textFieldl51); 
textFieldl52 = new java.awt.TextField(); 
textFieldl52.setBounds(552,147,25,20); 

textFieldl52.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl52.setBackground(new Color(-8323200)); 
panel4.add(textFieldl52); 
textFieldl53 = new java.awt.TextField(); 
textFieldl53.setBounds(552,171,25,20); 
textFieldl53.setFont(new Font("Dialog", Font.PLAIN, 
textFieldl53.setBackground(new Color(-8323200)); 

149 


10 )) 


panel4.add(textFieldl53); 
textFieldl54 = new java.awt.TextField(); 
textFieldl54.setBounds(552,195,25,20); 

textField!54.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl54.setBackground(new Color(-8323200)); 

panel4.add(textFieldl54); 

label27 = new java.awt.Label(" Det"); 

label27.setBounds(552,51,3 6,15) ; 

label27.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label27.setBackground(new Color(-8323200)); 
panel4.add(label27); 

label28 = new java.awt.Label("H2 Detect"); 
label28 . setBounds (84,39,45,15) ; 

label28.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label28.setBackground(new Color(-128)); 
panel4.add(label28); 

label29 = new java.awt.Label("H2 Detect"); 
labe!29.setBounds(132,39,45,15); 

labe129.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label29.setBackground(new Color(-8323200)); 
panel4.add(label29); 

label30 = new java.awt.Label("AN / WIC"); 
label30.setBounds(180,39,45,15); 

label30.setFont(new Font("Dialog", Font.PLAIN, 9)); 
label30.setBackground(new Color(-128)); 
panel4.add(label30); 

label34 = new java.awt.Label("Battery"); 
label34.setBounds(372,39,45,15); 

label34.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label34.setBackground(new Color(-128)); 
panel4.add(label34); 

label35 = new java.awt.Label("Battery"); 
label35.setBounds(420,39,45,15); 

label35.setFont(new Font("Dialog", Font.PLAIN, 9)); 

label35.setBackground(new Color(-8323200)); 

panel4.add(label35); 

label36 = new java.awt.Label("IC"); 

label36.setBounds(468,39,25,15); 

label36.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label36.setBackground(new Color(-128)); 
panel4.add(label36); 

label37 = new java.awt.Label("Sync"); 
label3 7.setBounds(496,39,25,15); 

label37.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label37.setBackground(new Color(-8323200)); 
panel4.add(label37); 

label38 = new java.awt.Label(" MK"); 
label38.setBounds(524,39,25,15); 

label38.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label38.setBackground(new Color(-128)); 
panel4.add(label3 8); 

label39 = new java.awt.Label("EIC Gnd"); 
label39.setBounds(552,39,36,15); 

label39.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label39.setBackground(new Color(-8323200)); 
panel4.add(label39); 


150 




Iabel31 = new java.awt.Label(/ Static inverter 

(Volts) n ); 

label31.setBounds(228,36,141,15); 
label31.setBackground(new Color(-128)); 
panel4.add(label31); 

textFieldl55 = new java.awt.TextField(); 
textFieldl55.setBounds(84,255,45,20); 

textFieldlSS.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl55.setBackground(new Color(16777215)); 
panel4.add(textFieldl55); 

textFieldl56 = new java.awt.TextField(); • 
textFieldl56.setBounds(132,255,45,20); 

textFieldl56.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl56.setBackground(new Color(16777215)); 
panel4.add(textFieldl56) ; 
textFieldl57 = new java.awt.TextField(); 
textFieldl57.setBounds(180,255,45,20); 

textFieldl57.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl57.setBackground(new Color(16777215)); 

panel4.add(textFieldl57); 

textFieldl58 = new java.awt.TextField(); 

textFieldl58.setBounds(228,255,45,20) ; 

textFieldl58.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl58.setBackground(new Color(16777215)); 

panel4.add(textFieldl58); 

textField!59 = new java.awt.TextField(); 

textFieldl59.setBounds(276,255,45,20); 

textFieldl59.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!59.setBackground(new Color(16777215)); 

pane!4.add(textFieldl59); 

textFieldl60 = new java.awt.TextField(); 

textFieldl60.setBounds(324,255,45,20) ; 

textFieldl60.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl60.setBackground(new Color(16777215)); 

panel4.add(textFieldl60) ; 

textFieldl61 = new java.awt.TextField(); 

textField!61.setBounds(372,255,45,20) ; 

textFieldl61.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!61.setBackground(new Color(16777215)); 

panel4.add(textFieldl61); 

textFieldl62 = new java.awt.TextField(); 

textFieldl62.setBounds(420,255,45,20); 

textField!62.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl62.setBackground(new Color(16777215)); 

pane14.add(textFieldl62) ; 

textFieldl63 = new javaawt .TextField () ; 

textFieldl63.setBounds(468,255,25,20); 

textFieldl63.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl63.setBackground(new Color(16777215)); 

pane!4.add(textFieldl63); 

textFieldl64 = new java.awt.TextFieldf); 

textFieldl64.setBounds(496,255,25,20)? 

textFieldl64.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl64.setBackground(new Color(16777215)); 
panel4.add(textFieldl64) ; 
textFieldl65 = new java.awt.TextField(); 

151 



textFieldl65.setBounds(524,255,25,20); 

textFieldl65.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl65.setBackground(new Color(16777215)) ; 
panel4.add(textFieldl65); 
textField!66 = new java.awt.TextField(); 
textFieldl66.setBounds(552,255,25,20); 

textFieldl66.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl66.setBackground(new Color(16777215)) ; 

panel4.add(textFieldl66); 

button4 = new java.awt.Button(); 

button4.addActionListener(this); 

button4.setLabel("Submit"); 

button4.setBounds(504,303,68,19); 

button4.setBackground(new Color(12632256)); 

panel4.add(button4); 

button5 = new java.awt.Button(); 

buttons.addActionListener(this); 

buttons.setLabel("Retrieve"); 

buttons.setBounds(420,303,69,19); 

button5.setBackground(new Color(12632256)); 

panel4.add(button5); 

choice2 = new java.awt.Choice(); 

choice2.addltem("00:00"); 

choice2.addltem("01:00"); 

choice2.addltem("02:00"); 

choice2.addltem("03:00"); 

choice2.addltem("04:00"); 

choice2.addltem("05:00"); 

choice2.addltem("06:00"); 

choice2.addltem("07:00"); 

choice2.addltem("08:00"); 

choice2.addltem("09:00"); 

choice2.addltem("10:00"); 

choice2.addltem("11:00"); 

choice2.addltem("12:00"); 

choice2.addltem("13:00"); 

choice2.addltem("14:00"); 

choice2.addltem("15:00"); 

choice2.addltem("16:00"); 

choice2.addltem("17:00"); 

choice2.addltem("18:00") ; 

choice2.addltem("19:00"); 

choice2.addltem("20:00") ; 

choice2.addltem("21:00") ; 

choice2.addltem("22:00") ; 

choice2.addltem("23:00"); 

panel4.add(choice2); 

choice2.setBounds(0,255,67,20) ; 

choice2.setBackground(new Color(16777215)); 

panel2 = new java.awt.Panel(); 

panel2.setLayout(null); 

panel2.setVisible(false); 

panel2.setBounds(12,33,636,436); 

tabPanell.add(panel2); 

panel5 = new java.awt.Panel(); 

panels.setLayout(null); 


152 




panels.setBounds(12,27,611,380); 

panels.setBackground(new Color(12632256)); 

panel2.add(panels); 

textFieldl67 = new java.awt.TextField(); 
textField!67.setEditable(false); 
textField!67.setBounds(48,120,67,20); 

textFieldl67.setFont(new Font("Dialog”, Font.PLAIN, 10)) 

textFieldl67.setForeground(new Color(0)); 

textFieldl67.setBackground(new Color(16777215)) ; 

panels.add(textFieldl67); 

textFieldl68 = new java.awt.TextField()? 

textFieldl68.setBounds(48,144,67,20); 

textFieldl68.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl68.setBackground(new Color(16777215)); 

panel5.add(textField!68); 

textFieldl69 = new java.awt.TextField(); 

textFieldl69.setBounds(48,168,67,20); 

textFieldl69.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl69.setBackground(new Color(16777215)); 
panels.add(textFieldl69); 
textFieldl70 = new java.awt.TextField(); 
textFieldl70.setBounds(48,192,67,20); 

textFieldl70.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl70.setBackground(new Color(16777215)); 

panel5,add(textField!70); 

textFieldl71 = new java.awt.TextField(); 

textFieldl71.setBounds(48,216,67,20); 

textFieldl71.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl71.setBackground(new Color(16777215)); 

panel5.add(textField!71) ; 

textFieldl72 = new java.awt.TextField(); 

textField!72.setBounds(48,240,67,20); 

textFieldl72.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl72.setBackground(new Color(16777215)); 

panel5.add(textFieldl72); 

textFieldl73 = new java.awt.TextField(); 

textFieldl73.setBounds(132,120,65,20); 

textFieldl73.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!73.setBackground(new Color(-128)) ; 

panel5.add(textFieldl73); 

textFieldl74 = new java.awt.TextField()? 

textFieldl74.setBounds(132,144,65,20); 

textFieldl74.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl74.setBackground(new Color(-128)) ; 

panel5.add(textFieldl74); 

textFieldl75 = new java.awt.TextField(); 

textFieldl75.setBounds(132,168,65,20); 

textFieldl75.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl75.setBackground(new Color(-128)) ; 

panels.add(textFieldl75); 

textFieldl76 = new java.awt.TextField(); 

textFieldl76.setBounds(132,192,65,20); 

textFieldl76.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl76.setBackground(new Color(-128)) ; 
panels.add(textFieldl76); 
textFieldl77 = new java.awt.TextField(); 

153 



textFieldl77.setBounds(132,216,65,20) ; 

textFieldl77.setFont (new Font("Dialog", Font.PLAIN, 10)) 

textFieldl77.setBackground(new Color(-128)); 

panel5.add(textFieldl77); 

textFieldl78 = new java.awt.TextFieldO; 

textFieldl78.setBounds(132,240,65,20); 

textFieldl78.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField!78.setBackground(new Color(-128)); 
panel5.add(textFieldl7 8); 

label33 = new java.awt.Label("Time Period"); 
label33.setBounds(48,96,67,15); 
panels.add(label33); 

label40 = new java.awt.Label( n CO");. 

Iabel40.setBounds(132,96,65,15) ; 

label40.setFont(new Font{"Dialog", Font.PLAIN, 10)); 
labe!40.setBackground(new Color(-128)); 
panels.add(label40); 

textFieldl79 = new java.awt.TextFieldO; 
textFieldl79.setBounds(204,120,65,20) ; 

textFieldl79.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!79.setBackground(new Color(-8323200)); 

panels.add(textFieldl79); 

textFieldl80 = new java.awt.TextFieldO; 

textFieldl80.setBounds(204,144,65,20); 

textFieldl80.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl80.setBackground(new Color(-8323200)); 

panels.add(textFieldl80); 

textFieldl81 = new java.awt.TextFieldO; 

textFieldl81.setBounds(204,168,65,20); 

textField!81.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl81.setBackground(new Color(-8323200)); 

panel5.add(textFieldl81); 

textFieldl82 = new java.awt.TextFieldO; 

textField!82.setBounds(204,192,65,20) ; 

textFieldl82.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl82.setBackground(new Color(-8323200)); 
panel5.add(textFieldl82); 
textFieldl83 = new java.awt.TextFieldO; 
textFieldl83.setBounds(204,216,65,20) ; 

textFieldl83.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl83.setBackground(new Color(-8323200)); 
panel5.add(textField!83); 
textFieldl84 = new java.awt.TextFieldO; 
textFieldl84.setBounds(204,240,65,20); 

textFieldl84.setFont (new Font("Dialog", Font.PLAIN, 10)) 
textFieldl84.setBackground(new Color(-8323200)); 
panel5.add(textFieldl84); 

labe!41 = new java.awt.Label(" R-114"); 

labe!41.setBounds(204,96,65,15); 

label41.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label41.setBackground(new Color(-8323200)) ; 
panels.add(label41) ; 

textFieldl85 = new java.awt.TextFieldO; 
textFieldl85.setBounds(276,120,65,20) ; 

textFieldl85.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl85.setBackground(new Color(-128)); 

154 




panels.add(textFieldl85); 
textFieldl86 = new java.awt.TextFieldO; 
textFieldl86.setBounds(276,144,65,20); 

textFieldl86.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!86.setBackground(new Color(-128)); 

panels.add(textFieldl86); 

textFieldl87 = new java.awt.TextFieldO; 

textFieldl87.setBounds(276,168,65,20) ; 

textFieldl87.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl87.setBackground(new Color(-128)); 

panel5.add(textFieldl87) ; 

textFieldl88 = new java.awt.TextField(); 

textFieldl88.setBounds(276,192,65,20) ; 

textFieldl88.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl88.setBackground(new Color(-128)); 

panels.add(textFieldl88); 

textFieldl89. = new java.awt.TextFieldO; 

textFieldl89.setBounds(276,216,65,20) ; 

textFieldl89.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl89.setBackground(new Color(-128)); 

pane!5.add(textFieldl89); 

textFieldl90 = new java.awt.TextFieldO; 

textFieldl90.setBounds(276,240,65,20); 

textFieldl90.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl90.setBackground(new Color(-128)); 
panel5.add(textFieldl90); 

label42 = new java.awt.Label{" R-12"); 

label42.setBounds(276,96,65,15) ; 

label42.setFont(new Font("Dialog", Font.PLAIN, 10)); 
labe!42.setBackground(new Color(-128)); 
panel5.add(label42); 

textFieldl91 = new java.awt.TextFieldO; 
textFieldl91.setBounds(348,120,65,20) ; 

textFieldl91.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl91.setBackground(new Color(-8323200)); 

panels.add(textFieldl91); 

textFieldl92 = new java.awt.TextFieldO; 

textFieldl92.setBounds(348,144,65,20) ; 

textFieldl92.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl92.setBackground(new Color(-8323200)); 
panel5.add(textFieldl92); 
textFieldl93 = new java.awt.TextFieldO; 
textFieldl93.setBounds(348,168,65,20) ; 

textFieldl93.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl93.setBackground(new Color(-8323200)); 
panels.add(textFieldl93); 
textFieldl94 = new java.awt.TextFieldO; 
textFieldl94.setBounds(348,192,65,20) ; 

textFieldl94.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl94.setBackground(new Color(-8323200)); 
panels.add(textFieldl94); 
textFieldl95 = new java.awt.TextFieldO; 
textField!95.setBounds(348,216,65,20) ; 

textFieldl95.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textFieldl95.setBackground(new Color(-8323200)); 
panels.add(textFieldl95); 

155 



textFieldl96 = new java.awt.TextField(); 
textFieldl96.setBounds(348,240,65,20); 

textFieldl96.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField!96.setBackground(new Color(-8323200)); 
panels.add(textField!96); 

label43 = new java.awt.Label(" 02"); 

label43.setBounds(348,96,65,15); 

label43.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label43.setBackground(new Color(-8323200)); 
panels.add(label43); 

textFieldl97 = new java.awt.TextField(); 
textFieldl97.setBounds(420,120,65,20); 

textFieldl97.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField!97.setBackground(new Color(-128)); 

panel5.add(textFieldl97); 

textFieldl98 = new java.awt.TextField(); 

textFieldl98.setBounds(420,144,65,20); 

textFieldl98.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl98.setBackground(new Color(-128)); 

panel5.add(textFieldl98); 

textFieldl99 = new java.awt.TextField(); 

textFieldl99.setBounds(420,168,65,20); 

textField!99.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textFieldl99 . setBackground (new Color (-128) ).; 

panel5.add(textFieldl99); 

textField200 = new java.awt.TextField(); 

textField200.setBounds(420,192,65,20); 

textField200.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField200.setBackground(new Color(-128)); 

pane!5.add(textField200); 

textField201 = new java.awt,TextField(); 

textField201.setBounds(420,216,65,20); 

textField201.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField201.setBackground(new Color(-128)); 

panel5.add(textField201); 

textField202 = new java.awt.TextField(); 

textField202.setBounds(420,240,65,20); 

textField202.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField202.setBackground(new Color(-128)); 
panels.add(textField202); 

label44 = new java.awt.Label(" C02"); 

label44.setBounds(420,96,65,15); 

label44.setFont(new Font{"Dialog", Font.PLAIN, 10)); 
label44 . setBackground(new Color (-128) ) ; 
panels.add(label44); 

textField203 = new java.awt.TextField(); 
textField203.setBounds(492,120,65,20); 

textField203.setFont(new Font("Dialog", Font.PLAIN, 10)) 

textField203.setBackground(new Color(-8323200)); 

panels.add(textField203); 

textField204 = new java.awt.TextField(); 

textField204.setBounds(492,144,65,20); 

textField204.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField204.setBackground(new Color(-8323200)); 
panel5.add(textField204); 
textField205 = new java.awt.TextField(); 

156 



textField205.setBounds(492,168,65,20) ; 

textField205.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField205.setBackground(new Color(-8323200)); 
panel5.add(textField205); 
textField206 = new java.awt.TextField() ; 
textField206.setBounds(492,192,65,20); 

textField206.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField206.setBackground(new Color(-8323200)); 
panels.add(textField206); 
textField207 = new java.awt .TextField() ; 
textField207.setBounds(492,216,65,20) ; 

textField207.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField207.setBackground(new Color(-8323200)); 
panels.add(textField207); 
textField208 = new java.awt.TextFieldO; 
textField208.setBounds(492,240,65,20); 

textField2 08 . setFont (new Font ("Dialog"^, Font. PLAIN, 10)) 
textField208.setBackground(new Color(-8323200)); 
panel5.add(textField208); 

label45 = new java.awt.Label(" H2") ; 

label45.setBounds(492,96,65,15); 

label45.setFont(new Font("Dialog", Font.PLAIN, 10)); 
label45.setBackground(new Color(-8323200)); 
panel5.add(label45); 

label46 = new java.awt.Label("Total Pressure :"); 
label46.setBounds(48,324,96,20); 

label46.setFont(new Font("Dialog", Font.BOLD, 12)); 
panels.add(label46) ; 

textField209 = new java.awt.TextFieldO; 
textField2 09.setBounds(168,324,65,20) ; 
panel5 . add (textField209) ; 
textField210 = new java.awt.TextFieldO; 
textField210.setBounds(132,288,65,20) ; 

textField210.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField210.setBackground(new Color(16777215)); 
panel5.add(textField210) ; 
textField211 = new java.awt.TextFieldO; 
textField211.setBounds(204,288,65,20) ; 

textField211.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField211.setBackground(new Color(16777215)); 
panel5.add(textField211) ; 
textField212 = new java.awt.TextFieldO; 
textField212.setBounds(276,288,65,20) ; 

textField212.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField212.setBackground(new Color(16777215)); 
panels .add(textField212) ; 
textField213 = new java.awt.TextFieldO; 
te’xtField213 .setBounds (348,288,65,20) ; 

textField213.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField213.setBackground(new Color(16777215)); 
panels .add(textField213) ; 
textField214 = new java.awt.TextFieldO; 
textField214.setBounds(420,288,65,20) ; 

textField214.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField214.setBackground(new Color(16777215)); 
panels.add(textField214) ; 

157 



textField215 = new java.awt.TextField(); 
textField215.setBounds(492,288,65,20); 

textField215.setFont(new Font("Dialog", Font.PLAIN, 10)) 
textField215.setBackground(new Color(16777215)); 
panels.add(textField215); 

label47 = new java.awt.Label(" POSITION :"); 
label47.setBounds(48,48,72,20); 

label47.setFont(new Font("Dialog", Font.BOLD, 12)); 

panel5.add(label47); 

button6 = new j ava.awt.Button(); 

button6.addActionListener(this); 

button6.setLabel("Submit"); 

button6.setBounds(528,336,68,19); 

button6.setBackground(new Color(12632256)); 

panels.add(button6); 

button7 = new j ava.awt.Button(); 

button7.addActionListener(this); 

button7.setLabel("Retrieve"); 

button7.setBounds(444,336,69,19); 

button7.setBackground(new Color(12632256)); 

panels.add(button7); 

choice3 - new java.awt.Choice(); 

choice3.addltem("00:00"); 

choice3.addltem("01:00"); 

choice3.addltem("02:00"); 

choice3.addltem("03:00"); 

choice3.addltem("04:00"); 

choice3.addltem("05:00"); 

choice3.addltem("06:00"); 

choice3.addltem("07:00"); 

choice3.addltem("08:00"); 

choice3.addltem("09:00"); 

choice3.addltem("10:00"); 

choice3.addltem("11:00"); 

choice3.addltem("12:00"); 

choice3.addltem("13:00"); 

choice3.addltem("14:00"); 

choice3.addltem("15:00"); 

choice3.addltem("16:00"); 

choice3.addltem("17:00"); 

choice3.addltem("18:00"); 

choice3.addltem("19:00"); 

choice3.addltem("20:00"); 

choice3.addltem("21:00"); 

choice3.addltem("22:00"); 

choice3.addltem("23:00"); 

panel5.add(choice3); 

choice3.setBounds(48,288,67,20); 

choice3.setBackground(new Color(16777215)) ; 

choices = new java.awt.Choice(); 

choice5.addltem("l") ; 

choice5.addltem("2"); 

choices.addltem("3") ; 

choices.addltem("4"); 

choice5.addltem("5"); 

choices.addltem("6"); 


158 





choice5.addltem ("7"); 

choice5.addltem(" 8") ; 

panels.add(choices); 

choice5.setBounds(132,48,65,20); 

choices.setBackground(new Color(16777215)); 

panel6 = new java.awt.Panel(); 

panel6.setLayout(null); 

panel6.setVisible(false); 

panel6.setBounds(12,33,636,436); 

tabPanell.add(panel6); 

textAreal = new j ava.awt.TextArea(); 

textAreal.setBounds(24,75,588,132); 

textAreal.setBackground(new Color(16777215)); 

panel6.add(textAreal); 

button3 = new java.awt.Button(); 

button3.addActionListener(this); 

button3.setLabel("Submit"); 

button3.setBounds(516,387,86,23); 

button3.setBackground(new Color(12632256)); 

panel6.add(button3); 

label49 = new java.awt.Label("Remarks : ") ; 

1abe14 9.s etBounds(24,39,104,19); 

label49.setFont(new Font("Dialog", Font.BOLD, 12)) 

panel6.add(label49); 

choice4 = new java.awt.Choice(); 

choice4.addltem("00:00"); 

choice4.addltem("01:00"); 

choice4.addltem("02:00"); 

choice4.addltem("03:00") ; 

choice4.addltem("04:00"); 

choice4.addltem("05:00"); 

choice4.addltem("06:00"); 

choice4.addltem("07:00"); 

choice4.addltem("08:00") ; 

choice4.addltem("09:00"); 

choice4.addltem("10:00"); 

choice4.addltem("11:00"); 

choice4.addltem("12:00") ; 

choice4.addltem("13:00") ; 

choice4.addltem("14:00"); 

choice4.addltem("15:00"); 

choice4.addltem("16:00") ; 

choice4.addltem("17:00"); 

choice4.addltem("18:00"); 

choice4.addltem("19:00"); 

choice4.addltem("20:00"); 

choice4.addltem("21:00"); 

choice4.addltem("22:00"); 

choice4.addltem("23:00"); 

panel6.add(choice4); 

choice4.setBounds(24,351,67,20); 

choice4.setBackground(new Color(16777215)); 

button8 = new java.awt-Button(); 

button8.addActionListener(this); 

button8.setLabel("Receive"); 

button8.setBounds(410,387,86,23); 

159 




button8.setBackground(new Color(12632256)) 
panel6.add(button8); 

textArea2 = new j ava.awt.TextArea(); 
textArea2.setBounds(24,219,588,124); 
panel6.add(textArea2); 

//}} 

} 

/ / { { DECLARE__CONTROLS 

Symantec.itools.awt.TabPanel tabPanell; 
j ava.awt.Panel pane11; 

Symantec.itools.awt.TabPanel tabPanel2; 

java.awt.Panel panel3; 

j ava.awt.Button buttonl; 

java.awt.Button button2; 

java.awt.TextField textFieldl; 

j ava.awt.TextField textField2; 

java.awt.TextField textField3; 

java.awt.TextField textField4; 

java.awt.TextField textFields; 

java.awt.TextField textField6; 

java.awt.TextField textField7; 

java.awt.TextField textField8; 

java.awt.TextField textField9; 

java.awt.TextField textFieldlO; 

java.awt.TextField textFieldll; 

java.awt.TextField textFieldl2; 

java.awt.TextField textFieldl3; 

java.awt.TextField textFieldl4; 

java.awt.TextField textFieldlS; 

java.awt.TextField textFieldl6; 

java.awt.TextField textFieldl7; 

java.awt.TextField textFieldl8; 

java.awt.TextField textFieldl9; 

java.awt.TextField textField20; 

java.awt.TextField textField21; 

java.awt.TextField textField22; 

java.awt.TextField textField23; 

java.awt.TextField textField24; 

java.awt.TextField textField25; 

java.awt.TextField textField26; 

java.awt.TextField textField27; 

java.awt.TextField textField28; 

java.awt.TextField textField29; 

java.awt.TextField textField30; 

java.awt.TextField textField31; 

java.awt.TextField textField32; 

java.awt.TextField textField33; 

java.awt.TextField textField34; 

java.awt.TextField textField35; 

java.awt.TextField textField36; 

java.awt.TextField textField37; 

java.awt.TextField textField38; 

java.awt.TextField textField39; 

java.awt.TextField textField40; 

java.awt.TextField textField41; 

160 




java.awt.TextField textField42; 
java.awt.TextField textField43; 
java.awt.TextFieId textField44; 
java.awt.TextField textField45; 
java.awt.TextField textField46; 
java.awt.TextField textField47; 
java.awt.TextField textField48; 
java.awt.TextField textField49; 
java.awt.TextField textField50; 
java.awt.TextField textFieldSl; 
java.awt.TextField textField52; 
java.awt.TextField textField53; 
java.awt.TextField textField54; 
java.awt.TextField textField55; 
java.awt.TextField textField56; 
java.awt.TextField textField57; 
java.awt.TextField textField58; 
java.awt.TextField textField59; 
java.awt.TextField textField60; 
java.awt.TextField textField61; 
java.awt.TextField textField62; 
java.awt.TextField textField63; 
java.awt.TextField textField64; 
java.awt.TextField textField65; 
java.awt.TextField textField66; 
java.awt.Label labell; 
java.awt.Label label2; 
java.awt.Label label3; 
j ava.awt.Label label4; 
j ava.awt.Label labels; 
j ava.awt.Label label6; 
java.awt.Label label7; 
j ava.awt.Label label8; 
j ava.awt.Label label9; 
java.awt.Label labell0; 
j ava.awt.Label labelll; 
j ava.awt.Label labell2; 
java.awt.Label labell3; 
java.awt-TextField textField67; 
java.awt.TextField textField68; 
java.awt.TextField textField69; 
java.awt.TextField textField70; 
java.awt.TextField textField71; 
java.awt.TextField textField72; 
java.awt.TextField textField73; 
java.awt.TextField textField74; 
java.awt.TextField textField75; 
java.awt.TextField textField76; 
java.awt.Choice choicel; 
j ava.awt.Pane1 pane14; 
java.awt.TextField textField77; 
java.awt.TextField textField78; 
java.awt.TextField textField79; 
java.awt.TextField textField80; 
java.awt.TextField textField81; 
java.awt.TextField textField82; 

161 






java.awt.TextField textField83; 
java.awt.TextField textField84; 
java.awt.TextField textField85; 
java.awt.TextField textField86; 
java.awt.TextField textField87; 
java.awt.TextField textField88; 
java.awt.TextField textField89; 
java.awt.TextField textField90; 
java.awt.TextField textField91; 
java.awt.TextField textField92; 
java.awt.TextField textField93; 
java.awt.TextField textField94; 
java.awt.TextField textField95; 
java.awt.TextField textField96; 
java.awt.TextField textField97; 
java.awt.TextField textField98; 
java.awt.TextField textField99; 
j ava.awt.TextField textFieldlOO; 
java.awt.TextField textFieldlOl; 
java.awt.TextField textFieldl02; 
java.awt.TextField textFieldl03; 
java.awt.TextField textFieldl04; 
java.awt.TextField textFieldl05; 
java.awt.TextField textFieldl06; 
j ava.awt.TextField textFieldl07; 
java.awt.TextField textFieldl08; 
java.awt.TextField textFieldl09; 
java.awt.TextField textFieldllO; 
java.awt.TextField textFieldlll; 
java.awt.TextField textFieldll2; 
j ava.awt.TextField textFieldl13; 
java.awt.TextField textFieldll4; 
java.awt.TextField textFieldl15; 
java.awt.TextField textFieldll6; 
java.awt.TextField textFieldl17; 
java.awt.TextField textFieldl18; 
java.awt.TextField textFieldll9; 
java.awt.TextField textFieldl20; 
java.awt.TextField textFieldl21; 
java.awt.TextField textFieldl22; 
java.awt.TextField textFieldl23; 
java.awt.TextField textFieldl24; 
java.awt.TextField textFieldl25; 
java.awt.TextField textFieldl26; 
j ava.awt.TextField textFieldl27; 
java.awt.TextField textFieldl28; 
j ava.awt.TextField textFieldl29; 
java.awt.TextField textFieldl30; 
j ava.awt.TextField textFieldl31; 
java.awt.TextField textFieldl32; 
java.awt.TextField textFieldl33; 
java.awt.TextField textFieldl34? 
java.awt.TextField textFieldl35; 
java.awt.TextField textFieldl36; 
java.awt.TextField textField!37; 
j ava.awt.TextField textFieldl3 8; 

162 





java.awt.TextField textField!39 
java.awt.TextField textFieldl40 
java.awt.TextField textFieldl41 
java.awt.TextField textFieldl42 
java.awt.Label labe!15; 
j ava.awt.Labe1 1abe116; 
java.awt.Label label17; 
j ava.awt.Label labell8; 
j ava.awt.Label label19; 
j ava.awt.Label label2 0; 
j ava.awt.Label label21; 
java.awt.Label labe122; 
j ava.awt.Labe1 labe123; 
java.awt.Label labe124; 
j ava.awt.Label label2 5; 
java.awt.TextField textFieldl43 
java.awt.TextField textFieldl44 
java.awt.TextField textFieldl45 
java.awt.TextField textFieldl46 
java.awt.TextField textFieldl47 
java.awt.TextField textFieldl48 
j ava.awt.Label label2 6; 
java.awt.TextField textFieldl49 
java.awt.TextField textFieldlSO 
java.awt.TextField textFieldlBl 
java.awt.TextField textFieldl52 
java.awt.TextField textFieldl53 
java.awt.TextField textFieldl54 
j ava.awt.Label labe127; 
java.awt.Label label28; 
j ava.awt.Label label29; 
j ava.awt.Label label3 0; 
j ava.awt.Labe1 labe134; 
java.awt.Label label35; 
java.awt.Label label36; 
j ava.awt.Labe1 labe137; 
j ava.awt.Label label3 8; 
java.awt.Label label39; 
j ava.awt.Label label31; 
java.awt.TextField textFieldl55, 
java.awt.TextField textFieldl56, 
java.awt.TextField textFieldl57, 
java.awt.TextField textFieldl58 ( 
java.awt.TextField textFieldl59. 
j ava.awt.TextField textFieldlSO; 
java.awt.TextField textFieldl61, 
j ava.awt.TextField textFieldl62, 
java.awt.TextField textFieldl63; 
java.awt.TextField textFieldl64; 
java.awt.TextField textFieldl65; 
java.awt.TextField textFieldl66; 
j ava.awt.Button button4; 
j ava.awt.Button button5; 
java.awt.Choice choice2; 
java.awt.Panel pane!2; 
java.awt.Panel pane!5; 


163 







java.awt.TextField textFieldl67; 
java.awt.TextField textFieldl68; 
java.awt.TextField textFieldl69; 
java.awt.TextField textFieldl70; 
java.awt.TextField textField!71; 
java.awt.TextField textFieldl72; 
java.awt.TextField textFieldl73; 
j ava.awt.TextField textFieldl74; 
java.awt.TextField textFieldl75; 
j ava.awt.TextField textFieldl7 6; 
j ava.awt.TextField textFieldl77; 
java.awt.TextField textFieldl78; 
j ava.awt.Label label3 3; 
java.awt.Label label40; 
java.awt.TextField textFieldl79; 
java.awt.TextField textFieldl80; 
java.awt.TextField textFieldl81; 
java.awt.TextField textFieldl82; 
java.awt.TextField textFieldl83; 
j ava.awt.TextField textFieldl84; 
j ava.awt.Labe1 labe141; 
java.awt.TextField textFieldl85; 
j ava.awt.TextField textFieldl8 6; 
java.awt.TextField textFieldl87; 
java.awt.TextField textFieldl88; 
java.awt.TextField textFieldl89; 
java.awt.TextField textFieldl90; 
j ava.awt.Label label42; 
java.awt.TextField textFieldl91; 
java.awt.TextField textFieldl92; 
java.awt.TextField textFieldl93; 
j ava.awt.TextField textFieldl94; 
java.awt.TextField textFieldl95; 
java.awt.TextField textFieldl96; 
java.awt.Label label43; 
java.awt.TextField textFieldl97; 
java.awt.TextField textFieldl98? 
java.awt.TextField textFieldl99; 

' j ava.awt.TextField textField2 0 0; 
j ava.awt.TextField textField2 01; 
j ava.awt.TextField textField2 02; 
java.awt.Label label44; 
java.awt.TextField textField203; 
j ava.awt.TextField textField2 0 4 ? 
j ava.awt.TextField textField2 0 5; 
j ava.awt.TextField textField2 0 6; 
java.awt.TextField textField207; 
java.awt.TextField textField208; 
j ava.awt.Label label45; 
j ava.awt.Labe1 label4 6; 
java.awt.TextField textField209; 
java.awt.TextField textField210; 
java.awt.TextField textField211; 
java.awt.TextField textField212; 
java.awt.TextField textField213; 
java.awt.TextField textField214; 

164 











java.awt.TextField textField215; 

java.awt.Label label47; 

java.awt.Button button6; 

java.awt.Button button7; 

java.awt.Choice choice3; 

java.awt.Choice choiceS; 

j ava.awt.Pane1 pane16; 

j ava.awt.TextArea textAreal; 

java.awt.Button button3; 

java.awt.Label label49; 

java.awt.Choice choice4; 

java.awt.Button button8; 

j ava.awt.TextArea textArea2; 

//}} 

// DATABASE VARIABLES 

TextField theStatus = new TextField(64); 

JDBC01 theJDBC = new JDBC01(theStatus); 


public void actionPerformed (ActionEvent event) 

{ 


Object source = event.getSource(); 

// 400 cycle set tab 

if (source == buttonl) { 

boolean temp = true; 

String tl = textField67.getText(); 

String t2 = textField68.getText(); 

String t3 = textField69.getText(); 

String t4 = textField70.getText(); 

String t5 = textField71.getText(); 

String t6 = textField72.getText(); 

String t7 = textField73.getText(); 

String t8 = textField74.getText(); 

String t9 = textField75.getText(); 

String tlO = textField76.getText(); 

if ( tl.equals( nn )) 
tl = "N/A"; 

if ( t2.equals( nn )) 
t2 = "N/A"; 

if ( t3.equals(" n )) 
t3 = "N/A"; 

if ( t4.equals( n n )) 
t4 = "N/A"; 

if ( t5.equals("")) 
t5 = B N/A n ; 

if ( t6.equals(" n )) 
t6 = "N/A"; 

if ( t7.equals(" n ) ) 
t7 = "N/A”; 


165 




if ( t8.equals( nn )) 
t8 = "N/A"; 
if ( t9.equals("") ) 
t9 = "N/A”; 
if ( tlO.equals("") ) 
tlO = "N/A" ; 

try { 

theJDBC.executeQuery("SELECT time FROM CycSet"); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), n \n", false); 

while (tokens.hasMoreTokens()){ 
if (temp){ 
if 

(i(tokens.nextToken().equals(choicel.getSelectedltem()))) 

temp = true; 
else 

temp = false; 

} // end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 
try { 


if (temp && (mvWatch(choicel.getSelectedItem()))) { 

theJDBC.executeUpdate("INSERT INTO CycSet VALUES 

n 

+ + choicel.getSelectedItem() + *', ” 

+ "'" + tl + ”', ” 

+ "' ” + t2 + "', ” 

+ *'" + t3 + "', " 

+ •'• + t4 + *', " 

+ >'" + t5 + " 

+ •"'■ + t6 + ■', " 

+ "'" + tl + "', B 

+ * ' " + t8 + "', " 

+ »'" + t9 + n ', ” 

+ " '" + tlO + ”')" ); 

} //end IF 
//else { 

// showStatus("NOT ALLOWED! YOU TRIED TO MODIFY AN 

EXISTING ENTRY OR NOT THE CURRENT PERIOD'S LOG"); 

//} //END ELSE 
} //END TRY 

catch (SQLException sqlex) {; } 


textField67.setText(" n ); 
textField68.setText(""); 
textField69.setText("*); 
textField70.setText(”"); 
textField71.setText{ n "); 
textField72.setText(""); 

166 



textField73.setText("") ; 
textField74 * setText("") ; 
textField75.setText(""); 
textField76.setText( n "); 

} //end if 

//************************************************ 

if (source == button2) { 

String archArray [][] = null; 

StringTokenizer curTime = new 
StringTokenizer(choicel.getSelectedItem{) , "\n: n ,false); 
int t = Integer.parselnt(curTime.nextTokenO ) ; 

try { 

theJDBC.executeQuery("SELECT time FROM CycSet") 
archArray = getArchive("CycSet n ,t); 

} //end try 

catch (SQLException sql) { ; } 

textFieldl.setText(archArray[5][ 0 ] + ” : 0 0") ; 
textField2.setText(archArray[4][ 0 ] +":00"); 
textField3.setText(archArray[3] [0]+":0 0"); 
textField4.setText(archArray[2][ 0 ] + n : 0 0 "); 
textField5.setText(archArray[1] [0]+": 0 0") ; 
textField6.setText(archArray[0][ 0 ] +" : 0 0") ; 
textField7 .‘setText (archArray [5] [ 1 ] ) ; 
textField8.setText(archArray[5][2]); 
textField9.setText(archArray[5][3]); 
textFieldlO.setText(archArray[5][4]); 
textFieldll.setText(archArray[5][5]); 
textFieldl2.setText(archArray[5][6]); 
textFieldl3.setText(archArray[5][7]); 
textFieldl4.setText(archArray[5][8])? 
textFieldlS.setText(archArray[5][9]); 
textFieldl6.setText(archArray[5][10]); 
textFieldl7.setText(archArray[4][1]); 
textFieldl8.setText(archArray[4][2]); 
textFieldl9.setText(archArray[4][3]); 
textField20.setText(archArray[4][4]); 
textField21.setText(archArray[4][5]); 
textField22.setText(archArray[4][6]); 
textField23.setText(archArray[4][7]); 
textField24.setText(archArray[4][8]); 
textField25.setText(archArray[4][9]); 
textField26.setText(archArray[4][10]); 
textField27.setText(archArray[3][1]); 
textField28.setText(archArray[3][2]); 
textField29.setText(archArray[3][3]); 
textField30.setText(archArray[3][4]); 
textField31.setText(archArray[3][5]); 
textField32.setText(archArray[3][6]); 

167 





textField33.setText(archArray[3] [7] ) ; 
textField34.setText(archArray[3][8] ) ; 
textField3 5. setText (archArray [3] [9] ) ; 
textField3 6. setText (archArray [3] [10] ) 
textField37.setText(archArray[2] [1] ) ; 
textField38.setText(archArray[2] [2] ) ; 
textField39 . setText (archArray [2][3] ) ? 
textField40.setText(archArray[2][4])? 
textField41.setText(archArray[2] [5]) ; 
textField42.setText(archArray[2] [63) ; 
textField43 . setText (archArray [2] [7]) ; 
textField44.setText(archArray[2] £8] ) ; 
textField45.setText(archArray[2] [9] ); 
textField46.setText(archArray[2][10]) 
textField47.setText(archArray[1] [1 ] ) ; 
textField48.setText(archArray[1][2]); 
textField49 . setText (archArray [1] [3]) ; 
textField50 . setText (archArray.! 1 ] [4] ) ; 
textField51.setText(archArray[1] [5] ) ; 
textField52.setText(archArray[1] [6]) ; 
textField53.setText(archArray[1][7]); 
textField54.setText(archArray[1] [8]) ; 
textFieldSS.setText(archArray[1] [9] ) ; 
textFieldS6.setText(archArray[1][10]) 
textField57.setText(archArray[0][1]); 
textField58.setText(archArray[0] [2]) ; 
textFieldB9.setText(archArray[0][3]); 
textFieldSO.setText(archArray[0] [4]) ; 
textField61.setText(archArray[0] [5] ) ; 
textField62.setText(archArray[0] [6] ) ; 
textField63.setText(archArray[0] [7] ) ; 
textField64.setText(archArray[0][8]); 
textField65 .setText (archArray [0] [9]) ? 
textField66.setText(archArray[0][10]) 

} //end if 

if (source == button4) { 

boolean temp = true; 

String tl = textFieldl55.getText() ; 
String t2 = textFieldl56.getText(); 
String t3 = textFieldl57.getText(); 
String t4 = textField!58.getText() ; 
String t5 = textFieldl59.getText(); 
String t6 = textFieldl60.getText(); 
String t7 = textFieldl61.getText() ; 
String t8 = textFieldl62.getText() ; 
String t9 = textFieldl63.getText(); 
String tlO = textFieldl64.getText(); 
String til = textFieldl65.getText() ; 
String tl2 = textFieldl65.getText(); 


if ( tl.equals("")) 
tl = "N/A"; 


168 





if 

( t2 . 

equals(" 1 



t2 = 

: n N/A"; 


if 

( t3 . 

equals( n ' 

■)) 


t3 = 

"N/A"; 


if 

( t4. 

equals("' 

■)) 


t4 = 

"N/A"; 


if 

( t5 . 

equals(" 1 

■)) 


t5 = 

"N/A"; 


if 

( t6. 

equals(" 1 

•)) 


t6 = 

"N/A"; 


if 

( t7. 

equals(" 1 

•)) 


t7 = 

"N/A"; 


if 

( t8. 

equals(" 1 

■)) 


t8 = 

"N/A"; 


if 

( t9. 

equals("' 

*)) 


t9 = 

"N/A"; 


if 

( tio 

.equals(' 

■")) 


tio 

= "N/A"; 


if 

( til 

.equals(' 

■") > 


til 

= "N/A"; 


if 

( tl2 

.equals(' 

■">) 


tl2 

= "N/A"; 



try { 

theJDBC.executeQuery("SELECT time FROM Detin"); 
StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResuit() , "\n“, false); 

while (tokens.hasMoreTokens()){ 
if (temp) { 

if 

(! (tokens. nextToken () . equals (choice2 . getSelectedltem () ) ) ) 

temp = true; 
else 

temp = false; 

} //end if 
} //END WHILE 

} //END TRY 

catch (SQLException sql) { ; } 


{ 


try { 


if (temp ){ //&& (myWatch(choice2.getSelectedltem()))) 


theJDBC.executeUpdate("INSERT INTO Detin VALUES 
+ n (' n + choice2.getSelectedltem() + " 

‘ ' ■* + tl + n ‘ 


t2 

t3 

t4 

t5 

t6 

t7 

t8 

t9 


169 




n / it 


+ 

+ 

+ 


it / it 

n / n 


+ 110 + 
+ til + 
+ tl2 + 


R / 

/ 

n / 


>; 


} //end IF 
} //END TRY 

catch (SQLException sqlex) {; } 


textFieldl55.setText(""); 
textFieldl56.setText(""); 
textFieldl57.setText(" 0 ); 
textFieldl58.setText( n "); 
textFieldl59.setText( n "); 
textFieldl60.setText( n "); 
textFieldl61.setText("")? 
textFieldl62.setText("°); 
textFieldl63.setText(""); 
textField!64.setText(" n ); 
textFieldl65.setText(" n ); 
textField!66.setText( H "); 


} //end if 




if (source == button5) { 

String archArray [][] = null; 

StringTokenizer curTime = new 
StringTokenizer(choice2.getSelectedItem(),"\n:",false); 
int t = Integer.parselnt(curTime.nextToken()); 

try { 

theJDBC.executeQuery( M SELECT time FROM Detin") 
archArray = getArchive("Detin",t); 

} //end try 

catch (SQLException sql) { ; } 

textField77.setText(archArray[5][0]+":00 n ); 
textField7 8.setText(archArray[4j[0]+":00 n ); 
textField79.setText(archArray[3][0]+*:00"); 
textField80.setText(archArray[2] [0]+ n :00"); 
textField81.setText(archArray[1][0]:00"); 
textField82.setText(archArray[0][0]+ n :00°); 

textField83.setText(archArray[5][1]); 
textField84.setText(archArray[5][2]); 
textField85.setText(archArray[5][3]); 
textField86.setText(archArray[5][4]); 
textField87.setText(archArray[5][5]); 
textField88.setText(archArray[5][6]); 
textField89.setText(archArray[5](7]); 
textField90.setText(archArray[5][8]); 
textField91.setText(archArray[5][9]); 
textField92.setText(archArray[5][10]); 
textFieldl43.setText(archArray[5][11]); 

170 






textFieldl49.setText (archArray [ 5 ] [12] ) 

textField93 .setText (archArray [ 4 ] [1]) ; 
textField94.setText(archArray[4][2]); 
textField95.setText(archArray[4][3]); 
textField96.setText(archArray[4][4]); 
textField97.setText(archArray[4][5] ) ; 
textField98.setText(archArray[4][6]); 
textField99.setText(archArray[4][7]); 
textFieldlOO.setText(archArray[4][8]); 
textFieldlOl.setText(archArray[4][9]); 
textFieldl02.setText(archArray[4][10]) 
textFieldl44.setText(archArray[4][11]) 
textFieldl50.setText(archArray[4][12]) 

textFieldl03.setText(archArray[3][1]); 
textField!04.setText(archArray[3][2]); 
textFieldlOS.setText(archArray[3][3] ) ; 
textFieldl06.setText(archArray[3][4]); 
textFieldl07.setText(archArray[3][5] ) ; 
textFieldlO8.setText(archArray[3][6]); 
textFieldl09.setText(archArray[3][7]); 
textFieldllO.setText(archArray[3][8]); 
textFieldlll.setText(archArray[3][9]); 
textFieldll2.setText(archArray[3][10]) 
textFieldl45.setText(archArray[3][11]) 
textFieldlSl.setText(archArray[3][12]) 

textFieldll3.setText(archArray[2][1]); 
textFieldll4.setText(archArray[2][2]); 
textFieldllS.setText(archArray[2][3]); 
textFieldll6.setText(archArray[2][4]); 
textFieldll7.setText(archArray[2][5]); 
textFieldll8.setText(archArray[2][6]); 
textFieldll9.setText(archArray[2][7]); 
textField!20.setText(archArray[2][8] ) ; 
textFieldl21.setText(archArray[2][9]); 
textFieldl22.setText(archArray[2][10]) 
textFieldl46.setText(archArray[2][11]) 
textFieldl52.setText(archArray[ 2 ] [12]) 

textFieldl23.setText(archArray[1][1]); 
textFieldl24.setText(archArray[1][2]); 
textFieldl25.setText(archArray[1][3]); 
textFieldl26.setText(archArray[1][4]); 
textFieldl27.setText(archArray[1][5]); 
textFieldl28.setText(archArray[1][6])? 
textFieldl29.setText(archArray[1][7]); 
textFieldl30.setText(archArray[1][8]); 
textFieldl31.setText(archArray[1][9]); 
textFieldl32.setText(archArray[1][10]) 
textFieldl47.setText(archArray[1][11]) 
textFieldl53.setText(archArray[1][12]) 

textFieldl33.setText(archArray[0][1]); 
textFieldl34.setText(archArray[0][2]); 

171 







textFieldl35.setText(archArray[0][3]); 
textFieldl36.setText(archArray[0][4]); 
textFieldl37.setText(archArray[0][5]); 
textFieldl38.setText(archArray[0][6]); 
textField!39.setText(archArray[0] [7] ) ? 
textFieldl40.setText(archArray[0][8]); 
textFieldl41.setText(archArray[0][9]); 
textFieldl42.setText(archArray[0][10]); 
textFieldl48.setText(archArray[0] [11]); 
textFieldl54.setText(archArray[0][12] ) ; 


} //end if 


if (source == button6) { 


boolean temp = true; 
String curTabName = null; 


String tl = textField210.getText() 
String t2 = textField211.getText() 
String t3 = textField212.getText() 
String t4 = textField213.getText() 
String t5 = textField214.getText() 
String t6 = textField215.getText() 
String t7 = textField209.getText() 


if ( tl .equal's ( n ") ) 
tl = "N/A"; 
if ( t2.equals ( n n )) 
t2 = "N/A"; 
if ( t3.equals("")) 
t3 = "N/A"; 
if ( t4.equals("*)) 
t4 = "N/A”; 
if ( t5.equals(""■)) 
t5 = "N/A"; 
if ( t6.equals("")) 
t6 = "N/A"; 
if ( t7.equals("")) 
tl = "N/A"; 

// I only used position 1 but anyone can add 7 more similar 
database table for 

// each position 

if ( choices.getSelectedltern()== n l B ) 
curTabName = "AtmCon"; 
else if ( choices.getSelectedltem()== n 2”) 
curTabName = ”AtmCon2 n ; 

try { 

theJDBC.executeQuery( n SELECT time FROM n + curTabName); 

172 





StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), B \n n , false); 

while (tokens.hasMoreTokens()){ 
if { temp) { 
if 

(!(tokens.nextToken().equals(choice3.getSelectedltem()))) 

temp = true; 
else 

temp = false; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 


{ 

VALUES 


try { 

if (temp ){ //&& (myWatch(choice3.getSelectedltem()))) 


theJDBC.executeUpdate("INSERT INTO " + curTabName + 


+ 

+ 

+ 

+ 

+ 

+ 

+ 

+ 


" j ' n 

n / n 

n / n 

ti / it 

n / n 

n / it 

it / n 


+ choice3.getSelectedltem() 
+ tl + n ', " 

+ t2 + ”' , " 

+ t3 + *', " 

+ t4 + " ' , " 

+ t5 + "', " 

+ t6 + "' , " 

+ tl + ”') n ) ; 



} //end IF 
} //END TRY 

catch (SQLException sqlex) {; } 


textField210.setText("") ; 
textField211.setText( nn ) ; 
textField212.setText(""); 
textField213.setText(""); 
textField214.setText(" n ) ; 
textField215.setText("") ; 
textField209.setText( n ’) ; 


} //end if 




if (source == button7) { 

String archArray [][] = null; 

String curTabName = null; 

StringTokenizer curTime = new 
StringTokenizer(choice3.getSelectedltem(), n \n: n ,false); 
int t = Integer.parselnt(curTime.nextToken()); 

173 





// I only used position 1 but anyone can add 7 more similar 
database table for 

// each position 

if ( choice5.getSelectedItem()== "1") 
curTabName = "AtmCon"; 
else if { choice5.getSelectedItem()== n 2 n ) 
curTabName = "AtmCon2 n ; 

try { 

the JDBC. executeQuery (" SELECT time FROM n + curTabName); 
archArray = getArchive (curTabName, t) ; 

} //end try 

catch (SQLException sql) { ; } 

textFieldl67.setText(archArray[5 ] [0]+":0 0"); 
textFieldl68.setText(archArray[4] [ 0] +":00"); 
textFieldl69.setText(archArray[3] [0] + n :00") ; 
textFieldl70.setText(archArray[2] [0]+":00") ; 
textFieldl71.setText(archArray[1] [0]+ n :00 n ); 
textFieldl72.setText(archArray[0] [0]+ ":00"); 

textFieldl73.setText(archArray[5] [1] ) ; 
textField!79.setText(archArray[5] [2 3); 
textFieldl85.setText(archArray[5] [3]) ; 
textFieldl91.setText(archArray[5][4] ) ; 
textFieldl97.setText(archArray[5] [5]) ; 
textField203.setText(archArray[5][6]); 

textFieldl74.setText(archArray[4][1]); 
textFieldl80.setText(archArray[4] [23) ; 
textFieldl86.setText(archArray[4][3]); 
textFieldl92.setText(archArray[4][43); 
textFieldl98.setText(archArray[4] [5] ) ; 
textField204.setText(archArray[4] [6] ) ; 

textFieldl75.setText(archArray[3][1]); 
textFieldl81.setText(archArray[3][2]); 
textFieldl87.setText(archArray[3][3]); 
textFieldl93.setText(archArray[3][4]); 
textFieldl99.setText(archArray[3][5] ) ; 
textField205.setText(archArray[3][6] ) ; 

textFieldl76.setText(archArray[2][13); 
textFieldl82.setText(archArray[2][2]); 
textFieldl88.setText(archArray[2][3]); 
textFieldl94.setText(archArray[2][4]); 
textField200.setText(archArray[2][5]); 
textField206.setText(archArray[2][6]); 

textFieldl77.setText(archArray[1][1]); 
textFieldl83.setText(archArray[1] [ 2 ]); 
textFieldl89.setText(archArray[1][3]); 
textFieldl95.setText(archArray[1][4]); 
textField201.setText(archArray[1][5]); 

174 








textField207.setText(archArray[1][6]); 

textFieldl78.setText(archArray[0][1] ) ; 
textFieldl84.setText(archArray[0] [2]) ; 
textFieldl90.setText(archArray[0] [3] ) ; 
textFieldl96.setText(archArray[0][4]); 
textField202.setText(archArray[0][5]); 
textField208.setText(archArray[0] [6]) ; 

} //end if 




if (source == button3) { 

boolean temp = true; 

String curTabName = "remark"; 

String tl = textArea2.getText() ; 

if ( tl.equals("")) 
tl = "N/A"; 

try { 

the JDBC. executeQuery ( n SELECT time FROM " + curTabName); 

StringTokenizer tokens = new StringTokenizer 
(the JDBC. dumpResult () , "\n", false) ; 

while (tokens.hasMoreTokens()){ 
if (temp){ 
if 

(!(tokens.nextToken() .equals(choice4.getSelectedltem() ) ) ) 

temp = true; 
else 

temp = false; 

} //end if 
} //END WHILE 
} //END TRY 

catch (SQLException sql) { ; } 


{ 

VALUES 


try { 

if (temp ){ //&& (myWatch(choice4.getSelectedltem()))) 


the JDBC. executeUpdate ( n INSERT INTO " + curTabName + 

+ "( /B + choice4.getSelectedltem() + " 

+ "' n + tl + n 7 )- ) ; 

} //end IF 
} //END TRY 

catch (SQLException sqlex) {; } 


175 




textArea2.setText(“ n ) ; 


} //end if 

//************************************************ 

if (source == button8) { 

String archArray [] [] = null; 

String curTabName = "remark"; 

StringTokenizer curTime = new 
StringTokenizer(choice4.getSelectedItem(),"\n:", false); 
int t = Integer.parselnt(curTime.nextTokenO); 

try { 

theJDBC.executeQuery("SELECT time FROM n + curTabName); 
archArray = getArchive(curTabName,t); 

} //end try 

catch (SQLException sql) { ; } 

textAreal.setText(archArray[0][0] + n :00 : " + 

archArray[ 0 ] [ 1 ] ) ; 

} //end if 

} // end action performed method 

//****★*********************************************************** 


public String [][] getArchive (String tabName, int curTime){ 

String t,k = null; 

String [][] realArray = null; 
int count = 0; 

try { 

theJDBC.executeQuery( n SELECT * " + "FROM n + tabName); 

ResultSetMetaData md=theJDBC.theMetaData; 

ResultSet rs = theJDBC.theResultSet; 
int myColcount = md.getColumnCount(); 

String temp- [][] = new String[24][myColcount] ; 
realArray = new String [6][myColcount]; 

StringTokenizer tokens = new StringTokenizer 
(theJDBC.dumpResult(), "\n,:", false); 

while (tokens.hasMoreTokens()){ 

for (int i = 0 ; i < myColcount ; i++) { 
if ( i « 0){ 

t=tokens.nextToken(); 
tokens.nextToken(); 

176 



// if (t == null) 4 
// t = "0"; 

temp[count][0] = t; 

} //end if 
else { 

k = tokens.nextToken(); 
if (k == null) 

temp[count][i] = "N/A"; 

else 

temp[count][i] = k; 

} // end else 

if ( Integer.parselnt(temp[count][0]) == curTime-1 

) 

realArray[0][i] = temp[count][i]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-2) 

realArray[l][i] = temp[count][i]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-3) 

realArray[2][i] = temp[count][i]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-4) 

realArray[3][i] = temp[count][i]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-5) 

realArray[4][i] = temp[count][i]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-6) 

realArray[5][i] = temp[count][i]; 

} // end for 
count++; 

} //end while 

if ((curTime-1) >= 0 ) 

realArray[0][0] = Integer.toString(curTime-1); 

else 

realArray[0][0] = Integer.toString(24+(curTime-1)); 

if ( (curTime-2) >= 0 ) 

realArray[l][0] = Integer.toString(curTime-2); 

else 

realArray[l][0] = Integer.toString(24+(curTime-2)); 
if ((curTime-3) >= 0 ) 

realArray[2][0] = Integer.toString(curTime-3); 

else 

realArray[2][0] = Integer.toString(24 +(curTime-3)); 
if ((curTime-4) >= 0 ) 

realArray[3][0] = Integer.toString(curTime-4); 

else 

realArray[3][0] = Integer.toString(24+(curTime-4)); 
if ((curTime-5) >= 0 ) 


177 



realArray[4][0] = Integer.toString(curTime-5); 

else 

realArray[4][0] = Integer.toString(24+(curTime-5)); 
if ((curTime-6) >= 0 ) 

realArray[5][0] = Integer.toString(curTime-6); 

else 

realArray[5][0] = Integer.toString(24+(curTime-6)); 

for (int i = 0; i < 6;i++) { 

for (int j = 0; j < myColcount; j++) { 
if ( realArray[i][j] == null) 

realArray[i][j] = "N/A"; 

} //end for 
} // end for 
} //END TRY 

catch (SQLException sql) { ; } 

return realArray; 

} //end getArchive method 


//******************************************************* 
public boolean myWatch (String s) { 

Date now; 

boolean temp = false; 

String message; 

now = new Date () ; 

message = now.getHours() + n :00 n ; 

if (s.equals(message)) 
temp = true; 

return temp; 

} //end myWatch method 

//******************************************************** 
public void handleException(Exception e) 

{ 

e.printStackTrace( ); 

} 

} // end clas’s 


178 



APPENDIX E. LOG TAKING CLIENT SERVLET CODE 


// Detectors Servlets 

// New Attack Submarine Log Taking Servlet 
// Version 1.2 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view Log actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/Log_Cover.htm 
// Last Modified by (10\01\99) 

import javax.servlet. *; 

import javax.servlet.http.*; 

import j ava.sql.*; 

import j ava.lang.*; 

import java.util.*; 

import java.io.*; 

import java.util.Date; 


public class Log__detec extends HttpServlet 

{ 


String curTabName = "Detln"; 

String resultstring [][]= null; 
boolean flag = true; 

public void doPost(HttpServletRequest req, 

HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 

// Print the HTML header 
out.printIn( n <html> n ); 
out.printIn("<head>"); 

out.println( n <title>Log Detector & Indicator Report</title> n ) 

out.println("</head>"); 

out .println ( n <h2xcenter>") ; 

out.println("Log Detector & Indicator Report"); 
out.println("<br>"); 

out.println("(Press Back button to return)"); 
out.println ("</centerx/h2>") ; 
out.println("<br>"); 


179 



String values[]; 

// Get the location 
String time = ""; 

values = req.getParameterValues("Selection") 
if (values != null) { 
time = values[0]; 

} 


// Get the position 
String HI = ""; 

values = req.getParameterValues("Field"); 
if (values 1= null) { 

HI = values[0]; 

} 

if ( HI.equals("")) 

Hl="N/A"; 

// Get the position 
String H2 = " "; 

values = req.getParameterValues("Field3"); 
if (values != null) { 

H2 = values[0]; 

} 

if ( H2.equals(”")) 

H2="N/A"; 

//Get man in charge 
String WIC = ""; 

values = req.getParameterValues("Field4"); 
if (values != null) { 

WIC = values[0]; 

} 

if ( WIC.equals("") ) 

WIC="N/A"; 

//Get man in charge 
String AB = ""; 

values = req.getParameterValues("FieldS"); 
if (values i= null) { 

AB = values[0]; 

} 

if ( AB.equals( " B ) ) 

AB="N/A"; 


// 

String BC = *"; 

values = req.getParameterValues("Field6 n ); 
if (values != null) { 

BC = values[0]; 

} 

if ( BC.equals("") ) 

BC="N/A"; 


// 


180 



String AC = " n ; 

values = req.getParameterValues("Field7 n ); 
if (values i= null) { 

AC = values[0]; 

} 

if ( AC.equals( n ")) 

AC="N/A"; 


// 

String BatAgr = n "; 

values = req.getParameterValues("Field9 n ); 
if (values != null) { 

BatAgr = values[0]; 

} 

if ( BatAgr.equals("")) 

BatAgr="N/A"; 


// 

String BatFD = " n ; 

values = req.getParameterValues("FieldlO"); 
if (values != null) { 

BatFD - values[0]; 

} 

if ( BatFD.equals( n ")) 

BatFD="N/A n ; 


// 

String ICFuse = ""; 

values = req.getParameterValues("Fieldll”); 
if (values != null) { 

ICFuse = values[0]; 

} 

if ( ICFuse.equals("")) 

ICFuse="N/A"; 


// 

String SLmps = B "; 

values = req.getParameterValues( n Fieldl2"); 
if (values != null) { 

SLmps = values[0]; 

} 

if ( SLmps.equals( n ")) 

SLmps="N/A n ; 


// 

String MK = ""; 

values = req.getParameterValues("Fieldl3 n ); 

if (values != null) { 

MK = values[0]; 

} 

if ( MK.equals("") ) 

MK="N/A"; 

// 

String EIC = " n ; 

values = req.getParameterValues( n Fieldl4"); 
if (values != null) { 


181 



EIC = values[0]; 


} 

if ( EIC.equals(" n ) ) 
EIC="N/A"; 


// 

String mychoice = "" ; 

values = req.getParameterValues("Selectionl6 n ); 
if (values != null) { 
mychoice = values[0]; 

} 


StringTokenizer curTime = new StringTokenizer(time,"\n:", false); 
int t = Integer.parselnt(curTime.nextToken()); 

resultstring = Archive(curTabName, t,true); 


if ( mychoice.equals("Archive")) { 

out.println("<br>"); 
out.println("<br>"); 
out.println("<br>"); 

out.println("<center><table border>"); 
for (int i = 0; i < 7; i++) { 
out.println("<tr>"); 
for (int ii = 0; ii < 13; ii++) { 

out.println("<td>"+resultString[i][ii]+"</td>"); 

} // end for 

out.println("</tr>"); 

//out.println("<br>"); 

} // end for 

out .println ("</tablex/center>") ; 
out.println("<br>"); 
out.println("<br>"); 

out.println("YOU ONLY RETREIVED PREVIOUS DOCUMENT."); 
out.printIn("IF YOU WANT TO SUBMIT DATA, PLEASE CHANGE THE 

MODE") ; 

} //end if 
else{ 

try { 


out.println("time = 
out.println("HI = ” 
out.println("H2 = " 
out.println("WIC = 
out.println("AB = " 
out.println(”BC = " 
out.println("AC = " 


" + time + "<br>"); 
+ HI + "<br>"); 

+ H2 + "<br>") ; 

+ WIC + "<br>"); 

+ AB + "<br>"); 

+ BC + "<br>") ; 

+ AC + "<br>"); 

182 



out.println("BatAgr = " + BatAgr + "<br>"); 
out.println("BatFD = " + BatFD + "<br>"); 
out.printIn("ICFuse = n + ICFuse + "<br>"); 
out.println("SLmps = " + SLmps + n <br> n ); 
out.println("MK = " + 'MK + "<br>"); 
out.printIn( n EIC = " + EIC + "<br>"); 
out.printIn("<br>”); 
out.printIn( n <br>"); 

if (flag){ // && (myWatch (time))) { //hour lock 

Connection con = null; 

Statement stmt = null; 

//flag = true; 


Class. forName( n sun. jdbc.odbc.JdbcOdbcDriver n ) .newlnstance () ; 
con = 

DriverManager.getConnection( n jdbc:odbc:dbl ■, null y null) ; 
stmt = con.createStatement(); 


stmt.executeUpdate{"INSERT INTO 
+ 


+ curTabName + 


VALUES 


n 


+ 

time + 

+ 

a / n 

+ 

HI + " 

+ 

R / R 

+ 

H2 + " 

+ 

It / R 

+ 

WIC + 

+ 

R / R 

+ 

AB + " 

+ 

h / n 

+ 

BC + " 

+ 

h / n 

+ 

AC + " 

+ 

n / ti 

+ 

BatAgr 

+ 

R / R 

+ 

BatFD 

+ 

R / R 

+ 

ICFuse 

+ 

n / R 

+ 

SLmps ■ 

+ 

n / r 

+ 

MK + " 

+ 

n / h 

+ 

EIC + 


n/ )" ); 

out.println("IF YOU WANT TO SEE PREVIOUS DATA,PLEASE 
CHANGE THE MODE FIELD AT PREVIOUS PAGE"); 


} //end if • 
else { 

out.println("This hour's log is already entered. You can 
not change the old entries."); 

} // end else 

if (!myWatch(time) && flag ) { 
out.println("<br>"); 

out.println("You are trying to modify different period's 
log. You are not allowed."); 

} // end if 


}// end try 
catch (Exception ex) { 
out.println("Exception!"); 

//ex.printStackTrace(out); 

out.println("Please check your data. All boxes have to be 
filled up."); 


183 



} // end catch 
}//end if 
// Wrap up 

out.println("</html> n ); 
out.flush(); 
out.close(); 

} // end post method 


j y**^*************************************************************** 

public String [][] Archive ( String tabName, int curTime,boolean 
resp) throws ServletException, java.io.IOException{ 

String t,k = null; 

String [][] realArray = null; 
int count = 0; 

flag = resp; 

try { 


Connection con = null; 

Statement stmt = null; 

ResultSet rs = null; 

Class . f orName ( n sun. jdbc . odbc. JdbcOdbcDriver") .newlnstance () ; 

con = DriverManager .getConnection(" j dbc: odbc: dbl") ; 
stmt = con.createStatement(); 

rs = stmt .executeQuery ("SELECT * " + "FROM " + tabName) 


ResultSetMetaData md=rs.getMetaData(); 
int myColcount = md.getColumnCount(); 

String temp [] [] = new String [24] [myColcount] ; 
realArray = new String [-7] [myColcount] ; 


while (rs.next()){ 

for (int i = 1 ; i <= myColcount ; i++) { 

k = rs.getString(i); 
if ( i == 1){ 


184 



StringTokenizer arcTime = new StringTokenizer( 

k,"\n:",false); 

int 1 = Integer.parselnt(arcTime.nextToken()); 
// to prevent multiple entry regulates the 

flag 

if(flag){ 

if (!(1 == curTime)){ 
flag = true; 

//break; 

} // end if 

else 

flag = false; 

} // end if 

temp[count][0] = Integer.toString(1); 

} //end if 
else { 

if (k == null) 

temp[count][i-1] = "N/A"; 

else 

temp[count][i-1] = k; 

} // end else 


if ( Integer.parselnt(temp[count] [0]) == curTime-1 

) 

realArray[l][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-2) 

realArray[2][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-3) 

realArray[3][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-4) 

realArray[4][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-5) 

realArray[5][i-1] = tempfcount][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-6) 

realArray[6][i-1] = temp[count][i-1]; 

} // end for 

count++; 

} //end while 

//realArray[0][0] = md.getColumnLabel(1); 
if ( (curTime-1) >= 0 ) 

realArray[1][0] = Integer.toString(curTime-1); 

else 

realArray[l][0] = Integer.toString(24+(curTime-1)); 

185 


if ( (curTime-2) >= 0 ) 

realArray[2] [0] = Integer.toString(curTime-2); 

else 

realArray[2][0] = Integer.toString(24+(curTime-2)); 
if ((curTime-3) >= 0 ) 

realArray[3][0] = Integer.toString(curTime-3); 

else 

realArray[3][0] = Integer.toString(24 +(curTime-3)) 
if ((curTime-4) >= 0 ) 

realArray[4][0] = Integer.toString(curTime-4); 

else 

realArray[4][0] = Integer.toString(24+(curTime-4)); 
if ((curTime-5) >= 0 ) 

realArray[5][0] = Integer.toString(curTime-5); 

else 

realArray[5][0] = Integer.toString(24+(curTime-5)); 
if ((curTime-6) >= 0 ) 

realArray[6][0] = Integer.toString(curTime-6); 

else 

realArray[6][0] = Integer.toString(24+(curTime-6)); 

for (int i = 0; i < 7;i++) { 

for (int j = 0; j <= myColcount-1; j++) { 

if ( i == 0) 

realArray[0][j] = md.getColumnLabel(j+1); 
if ( realArray[i][j].equals( null)) 
realArray[i][j] = "N/A"; 

} //end for 
} // end for 


} //END TRY 

catch (Exception ex) { 


} 

//catch (SQLException sql) { ; } 


return realArray; 

} //end getArchive method 

//*****★************************************************* 
public boolean myWatch (String s) { 


Date now; 


186 



boolean temp = false; 

String message; 

now = new Date(); 

message = now.getHours() + ":00 n ; 

if (s.equals(message)) 
temp = true; 

return temp; 

} //end myWatch method 

} // end servlet 


jjc ^ ^ ^ «|a ^ ^ ^ ^ ^ «|« ^ ^ «|« k|c ^ 4^ ^ 

•!» *L» *3^ 4* 4* «X* «jl> Wt# ^ »X* 4# ajb *L A A A A A A A A A A AA A A A A A A A Af A A A A A AA A A A A A A A A *1* A A A A A A A *1* A A A A A A *2* *2* A A *2* A A 
•X* v *T* A v A *T* *T* *1* A *r* A v A A A *T* A A A "T* A A A A A A *T* A A A A A A* •T* A A A A A A A A A A A AAA A A A A A A A A A A A A A A A A A A A A 

// Log_cycleSet Servlet 

// New Attack Submarine Log Taking Servlet 
// Version 1.2 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update, and view Log actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/Log_Cover.htm 
// Last Modified by (10\01\99) 

import j avax.servlet.*; 

import javax.servlet.http; 

import j ava.sql.*; 

import j ava.lang.*; 

import java.util.*; 

import java.io.*; 

import java.util.Date; 


public class Log_cycleSet extends HttpServlet 

{ 


String curTabName = "CycSet"; 

String resultstring [][]= null; 
boolean flag = true; 

public void doPost(HttpServletRequest req, 

HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html"); 


187 



// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 

// Print the HTML header 
out.println("<html> n ) ; 
out.printIn("<head> n ); 

out.printIn("<title>Log 400 Cycle Set Reportc/title> n ) 

out.println("</head>") ; 

out. println (" <h2xcenter> n ) ; 

out.println("Log 400 Cycle Set Report"); 

out.println("(Press Back button to return)"); 

out. println ("</centerx/h2> n ) ; 

out.println(”<br>") ; 

String values[]; 

// Get the location 
String time = ”"; 

values = req.getParameterValues("Selection"); 
if (values != null) { 
time = values[0]; 

} 


// Get the position 
String del = *"; 

values = req.getParameterValues("Field"); 
if (values != null) { 
del = values[0]; 

} 

if ( del.equals("")) 
dcl="N/A"; 

// Get the position 
String dc2 = ""; 

values = req.getParameterValues("Field3"); 
if (values != null) { 
dc2 = values[0]; 

} 

if ( dc2.equals("")) 
dc2="N/A"; 

//Get man in charge 
String acl = ""; 

values = req.getParameterValues("Field4"); 
if (values != null) { 
acl = values[0]; 

} 

if ( acl.equals("")) 
acl = "N/A"; 

//Get man in charge 
String ac2 = ""; 

values = req.getParameterValues("Field8"); 
if (values != null) { 


188 



ac2 = values[0]; 


} 

if ( ac2.equals("")) 
ac2 = "N/A"; 


// 

String freql = ""; 

values = req.getParameterValues("Fields"); 
if (values != null) { 
freql = values[0] ; 

} 

if ( freql.equals{ nn ) ) 
freql = "N/A n ; 


// 

String freq2 = n n ; 

values = req.getParameterValues( n Field9 n ); 
if (values != null) { 
freq2 = values[0]; 

} 

if ( freq2.equals( n ") ) 
freq2 = n N/A n ; 


// 

String voltl = ""; 

values = req.getParameterValues( n Field6 n ); 
if (values != null) { 
voltl = values[0]; 

} 

if ( voltl.equals( nn ) ) 
voltl = n N/A n ; 


// 

String volt2 = ” n ; 

values = req.getParameterValues{"FieldlO") 
if (values != null) { 
volt2 = values[0]; 

} 

if ( volt2 .equals ( "") ) 
volt2 = "N/A"; 


// 

String grndl = ""; 

values = req.getParameterValues("Field7"); 
if (values 1= null) { 
grndl = values[0]; 

} 

if ( grndl.equals("") ) 
grndl = "N/A"; 


// 

String grnd2 = ""; 

values = req.getParameterValues("Fieldll") 
if (values != null) { 
grnd2 = values[0]; 

} 


189 



if ( grnd2.equals(" n )) 
grnd2 = "N/A"; 


// 

String mychoice = "”; 

values = req. getParaineterValues ("Selectionl4") ; 
if (values != null) { 
mychoice = values[0]; 

} 


StringTokenizer curTime = new StringTokenizer(time,”\n:”, false) 
int t = Integer.parselnt(curTime.nextToken() ) ; 

resultstring - Archive(curTabName, t,true); 


if ( mychoice.equals("Archive")) { 

out.printIn( n <br>"); 
out.printIn("<br>"); 
out.printIn("<br>"); 

out.printIn("ccenterxtable border>"); 
for (int i = 0; i < 7; i++) { 

out.println("<tr>"); 
for (int ii = 0; ii < 11; ii++) { 

out.println("<td>"+resultString[i][ii]+"</td>"); 

} // end for 

out.printIn("</tr>"); 

//out.println("<br>"); 

} // end for 

out .println ("</tablex/center> n ) ; 
out.println("<br>"); 
out.println("<br>"); 

out.printIn("YOU ONLY RETREIVED PREVIOUS DOCUMENT."); 

out.println("IF YOU WANT TO SUBMIT DATA, PLEASE CHANGE THE 

MODE ■ ) ; 

} //end if 
else{ 

t 

try { 


out.println("time = " + time + "<br>"); 
out.println("del = " + del + "<br>"); 
out.println("acl = " + acl + "<br>"); 
out.println("freql = " + freql + "<br>"); 
out.printing"volt1 = " + voltl + ”<br> n ); 
out.println("grndl = ” + grndl + "<br>"); 
out.println( n dc2 = " + dc2 + "<br>"); 
out.println("ac2 = " + ac2 + "<br>"); 

190 




out.printIn("freq2 = " + freq2 + "<br>"); 
out.println( n volt2 = " + volt2 + n <br>"); 
out.printIn( n grnd2 = B + grnd2 + "<br>"); 
out.printIn("<br> n ); 
out.printIn("<br>"); 

if (flag && (myWatch(time))) { //hour lock 
Connection con = null; - 
Statement stmt = null; 

//flag = true; 


Class.forName("sun.jdbc.odbc.JdbcOdbcDriver”).newlnstance(); 
con = 

DriverManager.getConnection("jdbc:odbc:dbl",null.null); 
stmt = con.createStatement(); 


stmt. executeUpdate ("INSERT INTO n + curTabName + n VALUES " 


n ( 

/ n 

+ time + 

n / 

n 

+ 

n / n 

+ 

del + 

tt 

n 

/ 

+ 

n / n 

+ 

acl + 

n t 

tt 

+ 

n / n 

+ 

freql 

+ 

n / it 

+ 

n / n 

+ 

voltl 

+ 

it / tt 

/ 

+ 

n / n 

+ 

grndl 

+ 

it / ft 

/ 

+ 

n / n 

+ 

dc2 + 

it / 

it 

t 

+ 

n / it 

+ 

ac2 + 

tt t 

n 

/ 

+ 

n / it 

+ 

freq2 

+ 

tt / n 

/ 

+ 

it / it 

+ 

volt2 

+ 

tt / it 

$ 

+ 

n / it 

+ 

grnd2 

+ 

); 


out. print In ( "IF YOU WANT TO SEE PREVIOUS DATA, PLEASE 
CHANGE THE MODE FIELD AT PREVIOUS PAGE”); 

} //end if 
else { 

out.println("This hour's log is already entered. You can 
not change the old entries."); 

} // end else 


if (ImyWatch(time) && flag ) { 

out.println("<br> n ); 

out.println("You are trying to modify different period's 
log. You are not allowed."); 

} // end if 

}// end try 

catch (Exception ex) { 
out.println("Exception!"); 

//ex.printStackTrace(out); 

out.println("Please check your data. All boxes have to be 
filled up."); 

} // end catch 
}//end if 
// Wrap up 

out.println("</html>"); 
out.flush(); 


191 




out.close() ; 

} // end post method 




public String [][] Archive ( String tabName, int curTime,boolean 
resp) throws ServletException, java.io.IOException{ 

String t,k = null; 

String [][] realArray = null; 
int count = 0; 

flag = resp; 

try { 


Connection con = null; 

Statement stmt = null; 

ResultSet rs = null; 

Class.forName("sun.jdbc.odbc.JdbcOdbcDriver").newlnstance(); 

con = DriverManager.getConnection("jdbc:odbc:dbl"); 
stmt = con.createStatement(); 

rs - stmt.executeQuery{"SELECT * " + "FROM " + tabName); 


ResultSetMetaData md=rs.getMetaData(); 
int myColcount = md.getColumnCount(); 

String temp [][] = new String[24][myColcount] ; 
realArray = new String [7][myColcount]; 


while (rs.next()){ 

for (int i = 1 ; i <= myColcount ; i++) { 
k = rs.getString(i); 
if ( i == 1){ 

StringTokenizer arcTime = new StringTokenizer( 

k,”\n:",false); 

int 1 = Integer.parselnt(arcTime.nextToken()); 
// to prevent multiple entry regulates the 

if(flag){ 

192 


flag 



if (1(1 == curTime)){ 
flag = true; 

//break; 

} // end if 

else 

flag = false; 

} // end if 

temp[count][0] = Integer.toString(l); 

} //end if 
else { 

if (k == null) 

temp[count] [i-1] = "N/A"; 

else 

temp[count][i-1] = k; 

} // end else 


if ( Integer.parselnt(temp[count][0]) == curTime-1 

) 

realArray[1][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-2) 

realArray[2] [i-1] = temp[count] [i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-3) 

realArray[3][i-1] = tempfcount][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-4) 

realArray[4][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-5) 

realArray[5] [i-1] = temp[count] [i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-6) 

realArray[6][i-1] = temp[count][i-1]; 

} // end for 

count++; 

} //end while 

//realArray[0][0] = md.getColumnLabel(1); 
if {(curTime-1) >= 0 ) 

realArray[l][0] = Integer.toString(curTime-1); 

else 

realArray[l][0] = Integer.toString(24+(curTime-1)); 

if ( (curTime-2) >= 0 ) 

realArray[2][0] = Integer.toString(curTime-2); 

else 

realArray[2][0] = Integer.toString(24+(curTime-2)); 


193 



if ((curTime-3) >= 
realArray[3][0] 

else 

realArray[3][0] 

if ((curTime-4) >= 
realArray[4][0] 

else 

realArray[4][0] 

if ((curTime-5) >= 
realArray[5][0] 

else 

realArray[5][0] 

if ((curTime-6) >= 
realArray[6][0] 

else 

realArray[6][0] 


0 ) 

= Integer.toString(curTime-3); 

= Integer.toString(24 +(curTime-3)) 

0 ) 

= Integer.toString(curTime-4); 

= Integer.toString(24+(curTime-4)); 

0 ) 

= Integer.toString(curTime-5); 

= Integer.toString(24+(curTime-5)); 

0 ) 

=' Integer.toString(curTime-6); 

= Integer.toString(24+(curTime-6)); 


for (int i = 0; i < 6;i++) { 

for (int j = 0; j <= myColcount~l; j++) { 
if ( i == 0) 

realArray[0][j] = md.getColumnLabel(j+1); 
if ( realArray[i][j].equals( null)) 
realArray[i][j] = n N/A n ; 

} //end for 
} // end for 


} //END TRY 

catch (Exception ex) { 


} 

//catch (SQLException sql) { ; } 


return realArray; 

} //end getArchive method 

//******************************************************* 
public boolean myWatch (String s) { 


Date now; 

boolean temp = false; 

String message; 

now = new Date(); 

message = now.getHours() + n :00"; 


194 



if {s.equals(message)) 
temp = true; 

return temp; 

} //end myWatch method 

} // end servlet 


// Log Armosphere Servlet 

// New Attack Submarine Log Taking Servlet 
// Version 1.1 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view Log actions 
// for specified US Naval Vessels (Simulated) 

// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/Log_Cover.htm 
// Last Modified by (09\02\99) 

import j avax.servlet.* ; 
import javax.servlet.http.*; 
import j ava.sql.*; 
import j ava.lang.*; 
import java.util.*; 
import j ava. i o. * ; 
import java.util.Date; 


public class Log_ClientServlet extends HttpServlet 

{ 


String curTabName = null; 

String resultstring [][]= null; 
boolean flag = true; 

public void doPost(HttpServletRequest req, 
HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html n ); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()); 

// Print the HTML header 


195 



out.printIn(”<html>"); 
out.printIn( n <head>"); 

out.println("<title>Log Report</title>"); 

out.println("</head>"); 

out .println ("<h2><center>") ; 

out.println("Atm Control Log"); 

out.println("<br> B ); 

out.println("(Press Back button to return)”); 
out.println("</center></h2 > n ); 
out.println("<br>"); 

String values[]; 

// Get the position 
String pos = n "; 

values = req.getParameterValues("Selection"); 
if (values != null) { 
pos = values[D]; 

} 


// Get the location 
String time = ""; 

values = req.getParameterValues("Selection2") 
if (values != null) { 
time = values[0]; 

} 

// get state of fire 
String CO = ""; 

values = req.getParameterValues("Field"); 
if (values != null) { 

CO = values[0]; 

} 

if ( CO.equals( n n )) 

CO = "N/A"; 

//Get man in charge 
String R_114 = " n ; 

values = req.getParameterValues("Field4"); 
if (values != null) { 

R_114 = values[0]; 

} 

if ( R_114.equals("") ) 

R_114 = "N/A"; 


// 

String Rll2 = ""; 

values = req.getParameterValues("Fields”); 
if (values !~ null) { 

R_12 = values[0]; 

} 

if ( R_12.equals("")) 

R_12 = "N/A"; 


// 


196 



String 02 = ""; 

values = req.getParameterValues("Field6 n ); 
if (values 1= null) { 

02 = values[0]; 

} 

if ( 02.equals(-") ) 

02 = "N/A"; 


// 

String C02 = ""; 

values = req.getParameterValues("Field7"); 
if (values 1= null) { 

C02 = values[0]; 

} 

if ( C02.equals( n n ) ) 

C02 = "N/A”; 


If 

String H2 = nn ; 

values = req.getParameterValues("Field8 n ); 
if (values != null) { 

H2 = values[0]? 

} 

if ( H2.equals("") ) 

H2 = n N/A"; 


// 

String TotPres = n ”; 

values = req.getParameterValues( tt Field9 n ); 
if (values != null) { 

TotPres = values[0]; 

} 

if ( TotPres.equals( n ") ) 

TotPres = "N/A n ; 


// 

String mychoice = ”" ; 

values = req.getParameterValues("Selectionl2 n ); 
if (values != null) { 
mychoice = values[0]; 

} 

// I only used position 1 but anyone can add 7 more similar 
database table for 

// each position 

if ( pos.equals( n l") ) 

curTabName = "AtmCon"; 
else if (pos.equals("2") ) 
curTabName = "AtmCon2”; 

StringTokenizer curTime = new StringTokenizer(time,"\n:",false) 
int t = Integer.parselnt(curTime.nextTokenO); 

resultstring = Archive(curTabName, t,true); 


197 



if ( mychoice.equals{"Archive”)) { 


out.printIn( B <br> n ); 
out.printIn("<br>■)? 
out.printIn("<br>”); 

out.printIn( n <center><table border>”); 
for (int i = 0; i < 7; i++) { 
out.printIn( n <tr>”); 
for (int ii = 0; ii < 8; ii++) { 

out.println("<td>”+resultString[i][ii]+"</td>”); 

} // end for 

out.printIn(”</tr>”); 

//out.println("<br>”); 

} // end for 

out .println( "</tablex/center> n ); 
out.printIn(■<br> *); 
out.printIn("<br>"); 

out.println("YOU ONLY RETREIVED PREVIOUS DOCUMENT."); 
out.println("IF YOU WANT TO SUBMIT DATA, PLEASE CHANGE THE 

MODE” ) ; 

} //end if 
else{ 

try { 

out.println("Position = ■ + pos + n <br> n ); 
out.println("time = " + time + ”<br> n ); 
out.println("CO = * + CO + "<br>"); 
out .println("R-114 = " + R_JL14 + "<br>"); 
out.println("R-12 = ” + R_12 + "<br>"); 
out.println("02 = " + 02 + "<br>"); 
out.printIn("C02 = " + C02 + "<br>"); 
out.println("H2 = " + H2 + "<br>"); 
out.println("Total Press = " + TotPres + "<br>"); 
out.println("<br>”); 
out.println("<br>"); 

if (flag){ // && (myWatch(time))) { //hour lock 

Connection con = null; 

Statement stmt = null; 

//flag = true; 


Class.forName("sun.jdbc.odbc.JdbcOdbcDriver").newlnstance(); 
con = 

DriverManager.getConnection("jdbc:odbc:dbl",null,null); 
stmt = con.createStatement(); 


stmt.executeUpdate("INSERT INTO " + curTabName + " VALUES 
+ " ('" + time + "', " 


198 



n / n 


CHANGE THE 


+ 

+ 

+ 

+ 

+ 

+ 


n / n 

n / « 

IT / If 

tt / n 

n / n 


+ co + ■', " 

+ R_114 + 

+ R_12 + "', 
+ 02 + " ' , " 
+ C02 + " ', 

+ H2 + " ' , " 


n 


+ "'" + TotPres + "') " ) ; 

out.printIn("IF YOU WANT TO SEE PREVIOUS DATA,PLEASE 
MODE FIELD AT PREVIOUS PAGE"); 


} //end if 
else { 

out.printIn("This hour's log is already entered. You can 
not change the old entries."); 

} // end else 


if (ImyWatch(time) && flag ) { 

out.printIn("<br>"); 

out.println("You are trying to modify different period's 
log. You are not allowed."); 

} // end if 


}// end try 

catch (Exception ex) { 
out.println("Exception!"); 

//ex.printStackTrace(out);. 

out.println("Please check your data. All boxes have to be 
filled up."); 

} // end catch 
}//end if 
// Wrap up 

out.printIn("</html>"); 
out.flush(); 
out.close() ; 

} // end post method 


// 




public String [][] Archive ( String tabName, int curTime,boolean 
resp) throws ServletException, java.io.IOException{ 

String t/k = null; 

String [][] realArray = null; 
int count = 0; 

flag = resp; 

try { 


Connection con = null; 
Statement stmt = null; 
ResultSet rs = null; 


199 


Class. forName ("sun. jdbc.odbc.JdbcOdbcDriver") .newlnstance() ; 

con = DriverManager.getConnection("jdbc:odbc:dbl"); 
stmt = con.createStatement(); 

rs = stmt.executeQuery("SELECT * ■ + "FROM " + tabName); 


ResultSetMetaData md=rs.getMetaData(); 
int myColcount = md.getColumnCount(); 

String temp [] [] = new String[24] [myColcount] ; 
realArray = new String [7] [myColcount]; 


while (rs.next()){ 

for (int i = 1 ; i <= myColcount ; i++) { 

k = rs.getString(i); 
if ( i == 1){ 

StringTokenizer arcTime = new StringTokenizer( 

k, "\n:*,false) ; 

int 1 = Integer.parselnt(arcTime.nextToken()); 
// to prevent multiple entry regulates the 

flag 

if(flag){ 

if (!(1 == curTime)){ 
flag = true; 

//break; 

} // end if 

else 

flag = false; 

} // end if 

temp[count][0] = Integer.toString(1); 

} //end if 
else { 

if (k == null) 

temp [count] [i-1] = "N/A ,r ; 

else 

temp[count][i-1] = k; 

} // end else 


if ( Integer.parselnt(temp[count][0]) == curTime-1 


) 


200 



realArray[l][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-2) 

realArray[2][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-3) 

realArray[3][i-1] = tempfcount][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-4) 

realArray[4][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-5) 

realArray[5][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-6) 

realArray[6][i-1] = temp[count][i-1]; 

} //* end for 


count++; 

} //end while 

//realArray[0][0] = 
if ( (curTime-1) >= 
realArray[l][0] 

else 

realArray[1][0] 

if ( (curTime-2) >= 
realArray[2][0] 

else 

realArray[2][0] 

if ((curTime-3) >= 0 
realArray[3][0] 

else 

realArray[3][0] 

if ((curTime-4) >= 0 
realArray[4][0] 

else 

realArray[4][0] 

if ((curTime-5) >= 0 
realArray[5][0] 

else 

realArray[5][0] 

if ((curTime-6) >- 0 
realArray[6][0] 

else 

realArray[6][0] 

for (int i = 0; i < 
for (int j = 0; j 

if ( i == 0) 


: md.getColumnLabel(1); 

0 ) 

= Integer.toString(curTime-1); 

= Integer.toString(24+(curTime-1)); 
0 ) 

= Integer.toString(curTime-2); 

= Integer.toString(24+(curTime-2)); 
) 

= Integer.toString(curTime-3); 

- Integer.toString(24 +(curTime-3)) 
) 

= Integer.toString(curTime-4); 

= Integer.toString(24+(curTime-4)); 
) 

= Integer.toString(curTime-5); 

= Integer.toString(24+(curTime-5)); 
) 

= Integer.toString(curTime-6); 

= Integer.toString(24+(curTime-6)); 
7;i++) { 

<= myColcount-1; j++) { 


201 





realArray[0][j] = md.getColumnLabel(j+1); 
if ( realArray[i][j].equals( null)) 
realArray[i][j] = "N/A"; 

} //end for 
} // end for 


} //END TRY 

catch (Exception ex) { 


} 

//catch (SQLException sql) { ; } 


return realArray; 

} //end getArchive method 

//*********************★********************************* 
public boolean myWatch (String s) { 


Date now; 

boolean temp = false; 

String message; 

now = new Date(); 

message = now.getHours() + ":00"; 

if (s.equals(message)) 
temp = true; 

return temp; 

} //end myWatch method 

} // end servlet 


************************************************************************ 


// Log Remarks Servlet 

// New Attack Submarine Log Taking Servlet 
// Version 1.2 

// 1st Lieutenant Hanceri SAYAT 

// Servlet allows the user to update and view Log actions 
// for specified US Naval Vessels (Simulated) 

202 



// Contains no classified or sensitive data 
// Servlet can be viewed at: 

// http://131.120.27.67:8080/Log_Cover.htm 
// Last Modified by (10\01\99) 

import javax.servlet.*; 
import javax.servlet.http.*; 
import j ava.sql.*; 
import j ava.lang.*; 
import java.util.*; 
import j ava.io.*; 
import java.util.Date; 


public class Log_remark extends HttpServlet 

{ 


String curTabName = "remark"; 

String resultstring [][]= null; 
boolean flag = true; 

public void doPost(HttpServletRequest req, 
HttpServletResponse resp) 
throws ServletException, java.io.IOException 
{ 

// Set the content type of the response 
resp.setContentType("text/html"); 

// Create a PrintWriter to write the response 
java.io.PrintWriter out = 

new java.io.PrintWriter(resp.getOutputStream()) 

// Print the HTML header 
out.printIn("<html>”); 
out.printIn("<head>"); 

out.println("<title>Log Remarks Report</title> n ); 

out.println("</head>"); 

out .println ( n <h2xcenter>") ; 

out.println("Remarks Report"); 

out.println("<br>"); 

out.println("Press Back button to return"); 
out. println ("</centerx/h2>") ; 
out.println("<br> n ); 

String values[]; 

// Get the location 
String time = ""; 

values = req.getParameterValues("Selection"); 
if (values != null) { 
time = values[0]; 

} 


// Get the position 
String remark = ■"; 

203 



values = req.getParameterValues("TextArea"); 
if (values ! = null) { 
remark = values[0]; 

} 

if ( remark.equals( n ") ) 
remark="N/A"; 

// 

String mychoice = n n ; 

values = req. getParameterValues("Selections n ); 
if (values != null) { 
mychoice = values[0]; 

} 


StringTokenizer curTime = new StringTokenizer(time, n \n: n ,false); 
int t = Integer.parselnt(curTime.nextToken()) ; 

resultstring = Archive{curTabName, t,true); 


if ( mychoice.equals("Archive")) { 

out.printIn("<br>"); 
out.println( n <br>"); 
out.printIn("<br> n )? 

out. print In (" <centerxtable border>") ; 
for (int i = 0; i < 7; i++) { 

out.println("<tr>"); 
for (int ii = 0; ii < 2; ii++) { 

out.println(■<td>"+resultString[i][ii]+ n </td>"); 

} // end for 

out.println("</tr>"); 

//out.printIn("<br>"); 

} // end for ■ 

out .println ( n </tablex/center>") ; 
out.println("<br> °); 
out.println("<br>"); 

out.printIn("YOU ONLY RETREIVED PREVIOUS DOCUMENT."); 
out.println("IF YOU WANT TO SUBMIT DATA, PLEASE CHANGE THE 

MODE"); 

} //end if 
else{ 

try { 


out .println("time = " + time + "<br>"); 
out .println("Remark = " + remark + "<br>"); 
out.println("<br>"); 
out.println("<br>"); 


204 



if (flag) { // ScSc (myWatch(time) ) ) { //hour lock 

Connection con = null; 

Statement stmt = null; 

//flag = true; 


Class. forName ("sun. jdbc. odbc.JdbcO&bcDriver") .newlnstance () ; 
con = 

DriverManager.getConnection(" jdbc:odbc:dbl",null,null) ; 
stmt = con.createStatement(); 


stmt. executeUpdate (" INSERT INTO n + curTabName + " VALUES ■ 
+ "(' n + time + ■', n 

+ n '“ + remark + "') " ); 

out. print In (" IF YOU WANT TO SEE PREVIOUS DATA, PLEASE 
CHANGE THE MODE F.IELD AT PREVIOUS PAGE"); 

} //end if 
else { 

out.println("This hour's log is already entered. You can 
not change the old entries. ") ; 

} // end else 

if (!myWatch(time) && flag ) { 

out.println("<br>"); 

out.println("You are trying to modify different period's 
log. You are not allowed."); 

} // end if 

}// end try' 
catch (Exception ex) { 
out.println("Exception!"); 

//ex.printStackTrace(out); 

out.println("Please check your data. All boxes have to be 
filled up.■); 

} // end catch 
}//end if 
// Wrap up 

out.println( n </html> n ); 
out.flush(); 
out.close(); 

} // end post method 




public String [][] Archive ( String tabName, int curTime,boolean 
resp) throws ServletException, java.io.IOException{ 

String t,k = null; 

String [][] realArray = null; 
int count = 0; 


flag = resp; 


205 



try { 


Connection con = null; 

Statement stmt = null; 

ResultSet rs = null; 

Class. forName ( n sun. jdbc. odbc . JdbcOdbcDriver") .newlnstance() ; 

con = DriverManager .getConnect ion ("jdbc: odbc: dbl") ; 
stmt = con.createStatement() ; 

rs = stmt.executeQuery("SELECT * " + "FROM ■ + tabName) ; 


ResultSetMetaData md=rs . getMetaData () ; 
int myColcount = md. getColumnCount () ; 

String temp [][] = new String[24][myColcount] ; 

realArray = new String [7] [myColcount] ; 


while (rs.next()){ 

for (int i = 1 ; i <= myColcount ; i++) { 

k = rs.getString(i); 

if ( i == 1){ 

StringTokeniz.er arcTime = new StringTokenizer ( 

k,"\n:" # false); 

int 1 = Integer.parselnt(arcTime.nextToken()); 
// to prevent multiple entry regulates the 

flag 

if(flag){ 

if (!(1 == curTime)){ 
flag = true; 

//break; 

} // end if 

else 

flag = false; 

} // end if 

temp[count][0] = Integer.toString(1); 

} //end if 
else { 

if (k == null) 

temp[count][i-1] = "N/A"; 

206 



else 


temp[count][i-1] = k; 
} // end else 


if ( Integer.parselnt(temp[count][0]) == curTime-1 

) 

realArray[l][i-1] = temp[count][i-1]; 
else if { Integer.parselnt(temp[count][0]) == 

curTime-2) 

realArray[2][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-3) 

realArray[3][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-4) 

realArray[4][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-5) 

realArray[5][i-1] = temp[count][i-1]; 
else if ( Integer.parselnt(temp[count][0]) == 

curTime-6) 

realArray[6][i-1] = temp[count][i-1]; 

} // end for 

count++; 

} //end while 

//realArray [0] [0] = md.getColumnLabel(1) ; 
if ( (curTime-1) >= 0 ) 

realArray[l][0] = Integer.toString(curTime-1); 

else 

realArray[l][0] = Integer.toString(24+(curTime-1)); 

if ( (curTime-2) >= 0 ) 

realArray[2] [ 0] = Integer.toString(curTime-2); 

else 

realArray[2][0] = Integer.toString(24+(curTime-2)); 
if ((curTime-3) >= 0 ) 

realArray[3][0] - Integer.toString(curTime-3); 

else 

realArray[3][0] = Integer.toString(24 +(curTime-3)); 
if ((curTime-4) >= 0 ) 

realArray[4][0] = Integer.toString(curTime-4); 

else 

realArray[4][0] = Integer.toString(24+(curTime-4)); 
if ((curTime-5) >= 0 ) 

realArray[5][0] = Integer.toString(curTime-5); 

else 

realArray[5][0] = Integer.toString(24+(curTime-5)); 


if ((curTime-6) >= 0 ) 

realArray[6][0] = Integer.toString{curTime-6); 

else 

realArray[6][0] = Integer.toString(24+(curTime-6)) 

for (int i = 0; i < 7;i++) { 

for (int j = 0; j <= myColcount-1; j++) { 
if ( A == 0) 

realArray[0][j] = md.getColumnLabel(j+1); 
if ( realArray[i][j].equals( null)) 
realArray[i][j] = "N/A n ; 

} //end for 
} // end for 

} //END TRY 

catch (Exception ex) { 

} ' 

//catch (SQLException sql) { ; } 

return realArray; 

} //end getArchive method 

//******************************************************* 
public boolean myWatch (String s) { 

Date now; 

boolean temp = false; 

String message; 

now = new Date(); 

message = now.getHours() + n :0 0"; 

if (s.equals(message)) 
temp = true; 

return temp; 

} //end myWatch method 


//******************************************************** 
} // end servlet 


208 



LIST OF REFERENCES 


1. Yun, Xiaoping & Lewis, Ted, Feasibility Analysis of Deploying Wireless LAN 
Onboard Submarines and Surface Ships, Naval Postgraduate School Research 
Magazine, Volume 9, pg.l, Monterey, CA, 1999. 

2. Dayem, Rifaat A., Mobile Data and Wireless LAN Technologies, Prentice Hall, Upper 
Saddle River, NJ, 1997. 

3. Webb, William, Introduction to Wireless Local Loop, Artech House Inc., Cambridge, 
MA, 1998. 

4. Stallings, William, Data and Computer Communications, Prentice Hall, Upper 
Saddle River, NJ, 1997. 

5. Rappaport, T., Wireless Communication Principles and Practice, Prentice Hall, 

Upper Saddle River, NJ, 1996. 

6. Black, Uyless, Mobile and Wireless Networks, Prentice Hall, Upper Saddle River, NJ, 
1996. 

7. Cummiskey, James, Internetworking, Master’s Thesis, Naval Postgraduate School, 
Monterey, CA, 1996. 

8. Wu, Thomas C., An Introduction to Objected-Oriented Programming with Java, 
McGraw Hill, New York, NY, 1999. 

9. Reese, George, Database Programming with JDBC and Java, O’Reilly, Sebastopol, 
CA, 1997. 

10. Hamilton, Graham & Cattell, Rick, JDBC Database Access with Java, Addison- 
Wessley, Mountain View, CA, 1997. 

11. Garingo, Gary D., Java Based Data Connectivity, Master’s Thesis, Naval 
Postgraduate School, Monterey CA, 1997. 

12. Hamilton, G. & Cattell, R. & Fisher, Maydene, JDBC Database Access with Java, 
Addison-Wesley Longman Inc., Reading, MA, 1997. 

13. Culwin, Fintan, A Java GUI Programmer's Primer, Prentice Hall, Upper Saddle 
River, NJ, 1998. 


209 



14. Rothenhaus, Kurt, Software Applications in Java for Pen Based Portable Processors 
Operating On a Wireless LAN, Master’s Thesis, Naval Postgraduate School, 
Monterey, CA, 1999. 

15. Holzschlag, Molly E., Using HTML 4, QUE Corporation, Indianapolis, IN, 1999. 

16. Hunter, Jason, Java Servlet Programming, O’Reilly Assoc., Sebastopol, CA, 1998. 

17. Hitachi, HPW-600ET Series Handheld PC Manual, San Diego, CA, 1999. 

18. Lucent Technologis, WaveLAN IEEE 802.11 PC Card Manual, Nieuwegein, The 
Netherlands, 1999. 

19. Proxim, RangeLAN2 7400 Wireless LAN Adapter Manual, Mountain View, CA, 
1997. 

20. Mitsubishi, Amity VP Hanheld Computer Manual, Japan, 1997. 

21. Casio, Cassiopedia PA-2400 Manual, Tokyo, Japan, 1998. 

22. Chan, Patrick & Lee, Rosanna, Java Class Libraries I - II, Addison-Wesley Longman 
Inc., Reading, MA, 1998. 


210 



INITIAL DISTRIBUTION LIST 


1. Defense Technical Information Center. 2 

8725 John J. Kingman Road, Suite 0944 

Fort Belvoir, VA 22060-6218 

2. Dudley Knox Library.2 

Naval Postgraduate School 

411 Dyer Rd. 

Monterey, CA 93943 

3. Chairman, Code EC.1 

Department of Electrical and Computer Engineering 

Naval Postgraduate School 
Monterey, CA 93943-5121 

4. Xiaoping Yun, Code EE/X...1 

Department of Electrical and Computer Engineering 

Naval Postgraduate School 
Monterey, CA 93943-5121 

5. C. Thomas Wu, Code CS/Wq.1 

Department of Computer Science 

Naval Postgraduate School 
Monterey, CA 93943 

6. Genelkurmay Baskanligi.1 

Personel Baskanligi 

Bakanliklar 
Ankara, TURKEY 

1. KARA KUVVETLERI KOMUTANLIGI.1 

Personel Daire Baskanligi 

Bakanliklar 

Ankara, TURKEY 

8. KARA KUVVETLERI KOMUTANLIGI.1 

Kutuphanesi 

Bakanliklar 
Ankara, TURKEY 

9. Kara Harp Okulu.1 

Kutuphanesi 

Dikmen 

Ankara, TURKEY 


211 












10. Hanceri Sayat.1 

GnKur. MUBILDES.K.ligi. 

Balgat 

Ankara, TURKEY 

11. LT Hanifi Aydin.1 

NPS 2 University Cir. 

SGC # 2627 
Monterey CA 93943 

12. Mr. Steve Lose.1 

Program Executive Officer, Submarines 

PMS 450T2, NC2 5W64 
2531 Jefferson Davis Highway 
Arlington, VA 22242-5168 

13. Mr. Gary Lacombe.1 

171 Branch Hill Rd 

Preston, CT 06365 


212 







