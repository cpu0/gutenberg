What is Logo? 



Logo is a computer language which was 
developed to provide an environment 
which allows learning to take place as 
naturally as possible. Seymour Papert and 
his colleagues at Bolt Beranek and 
Newman and later at MIT set out to create 
a computer language which would com- 
bine the capabilities of artificial intel- 
ligence with the theories of Jean Piaget in 
order to allow a learner to build his own 
intellectual structures through estimation, 
interaction, experience and revision. 

The Logo language is designed to pro- 
vide an environment in which the child/ 
learner is in charge of 

• Setting a problem to solve. 

• Making choices. 

• Playing with the problem, experimenting 
and trying out solutions. 

• Building on what he has already done to 
do something more. 

The language is interactive. You learn it 
at the computer. After working with a 
problem for a while, you edit it, revise it, 
and then play your next steps. 

With Logo, a young learner can enter 
directly into the world of turtle geometry. 
Without memorizing formulas, he can 
create procedures for drawing squares, 
triangles, and circles. 

This is unlike my own experience in 
geometry. I learned geometry in high 
school only because 1 was required to take 
the course as preparation for college. 

Geometric thinking is possible now for 
any learner without a series of pre- 
requisites. At the Lamplighter School in 
Texas, three year olds have used Logo to 



Molly Watt Educational Alternatives, Gregg Lake 
Road, Antrim, NH 03440. 



Molly Watt 



explore turtle geometry. And MIT 
students use the concepts of turtle 
geometry used in Logo as a way to explore 
mathematics. 

Seymour Papert is often quoted as say- 
ing that "Logo has no threshold, no ceil- 
ing/* 1 have heard it said that Logo is a six 
year old's dream and a computer scientist's 
nightmare. Logo makes complex explora- 
tions possible for learners of all ages, with- 
out imposing artificial hurdles. 



With Logo, a young 
learner can enter 
directly into the world 
of turtle geometry. 



How does a child explore turtle geom- 
etry? It is really quite simple. Every child 
knows how to move from one place to 
another. Using his own experience in walk- 
ing, a child "teaches" the turtle to move 
across a computer monitor leaving a trail 
or line to create a drawing. 

Let's call our learner Wendy. Her first 
experience might be something like this: 

1 . She decides to experiment by drawing 
a square. 

112 



2. She paces a square on the floor to 
notice how she draws it. 

3. She remembers how she did it and 
types a set of commands to the turtle which 
might look like this: 

FORWARD 25 (no, not far enough) 
FORWARD 25 (okay, that's enough) 

RIGHT 40 (oh, that wasn't what I meant 
at all, let's try more) RIGHT 40, (well 
that's not it, try again) RIGHT 10 (that's it) 

(let's see, what was it,) FORWARD 50 

RIGHT 90 

FORWARD 50 

RIGHT 90 

And so on until she has a square. With 
that accomplished, she can simplify the 
steps and teach the computer to do it by 
shifting to the edit mode. What shall the 
name of this procedure be? 

Very often a student will name it with 
her own name, typing: 

TO WENDY 
FORWARD 50 
RIGHT 90 
FORWARD 50 
RIGHT 90 
FORWARD 50 
RIGHT 90 
FORWARD 50 
END 

The turtle will then "know" how to 
WENDY, and will execute a square every 
time the command WENDY is typed. 

Now Wendy can enjoy playing with the 
procedure WENDY, and will probably 
type it over and over for the pleasure of 
watching the turtle "know" how to 
WENDY. The second WENDY will be 
drawn in a screen position which will 
surprise her, and our new Logo user will 
immediately type WENDY again just to 
see what happens. At the end of four 

October 1982 • Creative Computing 



What is Logo, continued... 

WENDYS, there is a new design which 
can be taught to the computer as a pro- 
cedure containing the subprocedure 
WENDY. It looks a bit like a window, so 
^H^dy can type: 
WINDOW 

WENDY 

WENDY 

WENDY 

WENDY 

END 

or 

TO WINDOW 
REPEAT 4 (WENDY) 
END 

Wendy has started the process of 
Figure 1. Wendy. 




So it is with this first turtle drawing: 
Suddenly the Logo user is part of the 
world which assigns airplane reservations, 
cashes checks, and launches space shots. 
This is a world of power, which has in this 
first lesson become part of Wendy's own 
learning continuum. The process is in- 
trinsically motivating and fascinating. 

As every person can learn to use a pencil, 
everyone can — and will — learn to pro- 
gram a computer. 

Projects by New Users 

I think that it is important to look at 
some examples of tasks that some real 
students have set for themselves as 
problems to solve when beginning to learn 
Logo and to use a computer. 



Figure 2. Window 




My purpose is to demonstrate the many 
working styles and interests which Logo 
can support. These students were in my 
classes in Amherst and Cambridge, MA 
and were between the ages of 8 and 17. 

After several class sessions in a hands- 
on laboratory, I often suggest to my 
students, "See if you can make the turtle 
draw your initials." Many try the project, 
seem to enjoy the challenge, and then go on 
to some other experiment. 

Two students, Ted and Stella, were 
working side by side, and became com- 
pletely absorbed in drawing letters. Each 
determined to create a complete alphabet. 

Ted immediately wrote a procedure to 
produce the whole alphabet, before creat- 

Figure 3. Rosewindow. 




^^earning to control the turtle. 

sing the computer as a tool, 
^^eaching the computer to execute an 
original idea and naming it. 

• Noting the steps she used in order to 
save them as a procedure. 

• Using the procedure as a subprocedure 
in her second procedure. 

She has started to create her own computer 
language. 

Taking the same example one step 
further, our new Logo user, in playing with 
WINDOW, may quickly discover that by 
using the procedure WINDOW and then 
rotating the turtle's position slightly a new 
design is. made that holds a shape which 
begins to approximate a circle. This ex- 
periment can be formalized by typing, 
for example, 

TO ROSEWINDOW 

REPEAT 9 (WINDOW RIGHT 10) 

END 

As in all learning, the first job is to learn 
to control your tool. If you are using a 
pencil, you must practice holding it. 

Your first written word may be your 
own name, which is a profound word to 
the writer. It permits you to show owner- 
ship, authorship, borrow library books, 
^ign a check and send a greeting card 
M| ough the mail. It is still a long jump to 
%Writing a dissertation or even applying for | 
a job. However that one word puts you 
into the powerful world of words which | 
make up magazines, recipes and phone 
books. 

October 1982 ° Creative Computing 



Above the 



Microcomputer 
Prograrns 



MCE off ere you superior microcomputer programs in 
Living 5Wite. These programs have been field tested and 
found effective. 



MCE programs are sophisticated yet simple to use. They offer 
curriculum flexibility m special ed., voc. ed., home economics, 
functional math and consumer ed. among others. 

Eighteen programs are available from $44.95 for Apple H* They feature: branch- 
ing to individual reading and ability levels, a variety of instructional formats, vivid 
color graphics and advanced teacher control options. 

To learn more about MCE programs call collect (616) 345-8681 or return the cou- 
pon below. 

TM. 



■■■^M 157 5 "aia^azoo "all 

MMmmm t^muoo. ™ 4900? 

MICROCOMPUTER 



□ 5end MCE catalog □ Request demonstration 

flame ———————— —————— 

mo 



5tate. 



_ Zip. 



Phone. 



Best time. 



115 



CIRCLE 199 ON READER 



What is Logo, continued... 

Figure 4. T. 




ing the individual letters. It looked like 



this: 



TO ALPHABET 
A 

DRAW 
B 

DRAW 
C 

DRAW 



END 




Listing 1. Time. 



ABC 



Ted then began the long process of 
creating procedures to draw each letter in 
turn After his alphabet was completed he 
was dissatisfied with the amount of time 
each letter was displayed on the screen. He 
began to work on the more complex pro- 
gramming problem of creating something 
for the computer to do invisibly so that the 
letter on the screen could continue to be 
displayed for a longer period. This was a 
natural extension of his alphabet pro- 
cedure. 

Stella started out to solve what ap- 
peared to be the same challenge as Ted's. 
During the process, she became fascinated 



TO WAIT :T 
IF |T m O STOP 

WAIT :T - 1 
END 

TO TIME :HH : MM 
TEST :SS • 60 
IFT MAKE "SS : SS 
IFF MAKE "SS : SS 
TEST : MM ■ 60 
IFT MAKE "MM : MM 
TEST :HH « 12 
IFT MAKE "HH : HH 
WAIT 200 
PRINT CD 

( PRINT :HH :MM_:SS > 
: HH : MM : 



- 60 TIME : HH ( : MM + 1 > : 



4» 5 



- 60 TIME < IHH «%1 > s MM : 

- 11 



"FALSE is 1 
"TRUE is 1 



by the proportions of height and width 
and how a variable input could change 
the relationships represented graphically. 

The qualities of the computer which 
allowed her to experiment with inputs and 
then provided her with an almost instant 
reformulation of her letters heightened 
her excitement as well as her understand- 
ing about one way a computer could 
extend her thinking. 

She began to collect patterns for mono- 
grams and initials which might make 
interesting designs on stationery. H cr 
classmates used her program to think 
about embroidering on denim. For her 
final project, Stella created an art show 
using Logo procedures. 

In one of the first Logo classes, Mark 
and Suzy became a working team. Mark 
seemed to need to be admired for his pro- 
gramming prowess and Suzy was reluctant 
to touch the computer. 

This combination worried me because 
it seemed to reproduce the stereotyped, 
and I believe harmful, pattern of the way 
men and women relate to technology. 



This twosome often seemed to have 
private jokes and to direct gestures toward 
classmates. Although 1 felt uncomfortable 
and wondered whether 1 should intervene, 
their classmates paid them no attention. 

In the meantime, 1 watched and thought 
about them whenever 1 had a second to 
spare from this demanding programming 
class. 1 was aware that none of my sug- 
gestions had been accepted by either of 
them. While Mark was actively executing 
his ideas, Suzy admired, and I waited. 

Then one day the duo split, each needing 
a computer to work on. 

Mark was inventing a clock. It was a 
digital clock. The person using his pro- 
gram could type in the hour, minute and 
second and could then watch time move in 
five-second increments. His ability to 
capture some essence of time was satisfy- 
ing to him, and truly mystifying to his 
classmates. Mark told them that his pro- 
gram was simply an approximation of 
time as is the time that all clocks keep. 

Listing 1 shows how his program looked 
after a solid week of programming. 



Figure 5. 




S 10 50 



□ 




S 25 35 
116 




S 70 7 
October 1982 ° Creative Computing 



What is Logo, continued... 



His program does have some "bugs 
which he has probably solved by now. One 
is the matter of conversion; the seconds 
dq^^convert to minutes after the num- 
b M reached. This was not discourag- 
inPPMark. This was the next part of his 
program which needed attention in order 
to make it work better. 

On the other side of the classroom. Suzy 
sat at a computer alone. At first she 
seemed to me to be immersed in a science 
fiction book. As 1 moved nearer. 1 saw that 
she was using the science fiction book as a 
reference for her work. She was working 
with an intensity I had not seen previously. 

Between footstamps and fistshakes at 
the computer she was creating a science 
fiction book. She had discovered that the 
computer could print words. Linking her 
interest in reading science fiction with her 
limited knowledge of microcomputers, she 
had started on her first self-initiated 
project. She organized the procedures 
shown in Listing 2. 

As the course ended, Suzy was beginning 
to experiment with turtle geometry to 
illustrate each chapter. My next steps for 
Suzy were to teach her how to save pictures 
drawn on the video screen, and to intro- 
duce her to the Logo text editor. 

Suzy shared her project with her class- 
mates during the last day of class. The 
science fiction aspect captured their 
— finations, and they demonstrated 
-line interest in her work, 
^ith our visions of what is possible for 
a Logo user to accomplish, Suzy's example 
may not seem dramatic. I include it be- 
cause 1 believe we often push students to 



Figure 6. Door Through Time. 





go too fast and forget the value of allowing 
a person to set his own goals. I do not 
believe that Suzy would have started 
sooner if I had structured the lessons dif- 
ferently; she needed a period of watching 
to get herself ready. 

One visually oriented student spent 
many class periods creating drawings, 
saving his pictures directly on his disk 
without writing procedures. Jamie planned 
color and line relationships carefully and 
gave names which suggested to me the 
dimension of fantasy the computer offered 
him. 

While classmates often gave pictures 
and procedures single letter names to avoid 
laborious typing, Jamie was content to 
take the time to type "Door Through 
Time," "Sparkle in the Night," "Ex- 
perience in the Fifth Dimension," delight- 
ing classmates with his naming as much as 
with the pictures. 



Listing 2 Science Fiction. 



TO MARS 
PRINT CA PRINCESS OF MARS 3 
PRINT CTHE GODS OF MARS 3 
PRINT CTHE WARLORD OF MARS 3 
PRINT CTHUVIA,MAID OF MARS 3 
PRINT CTHE CHESSMEN OF MARS 3 
PRINT CTHE MASTERMIND OF MARS 3 
PRINT CA FIGHTING MAN OF MARS 3 
PRINT C SWORDS OF MARS 3 
PRINT E SYNTHETIC MEN OF MARS 3 
PRINT CLLANA OF GATHOL3 

PRINT CJOHN CARTER OF MARS 3 nRDER 

1 EDGAR H R ^CE ^URROUGHS aShK OF* THE FAHEQUS 
TAR Z AN BOOKS 3 
END 

TO DRAGONS 
PRINT C DR AGONFL I GHT 3 
PRINT C DRAGONQUEST 3 

PRINT EtH IS ^ S T THE R SoNRIOERB OF RERN TRILOGN 
BY ANN MCAFFERY3 

END 



Another example of the way an in- 
dividual entered the Logo environment or 
"mainland" is Jim. He simply started 
experimenting with the turtle. 

He drew a shape which he later named 
"slot" because it looked like one. This slot 
with its circular ends and straight line 
connections intrigued him. During a series 
of lab periods, interrupted by several other 
projects, he progressed to "tslot" which 
added color and assumed a new position 

on the screen. 

Next he played with variable inputs in 
order to experiment with size relation- 
ships. His moment of astonishment came 
when he discovered that the formula for 
a circle which he had memorized was 
approximate. 

Jim was a serious student, and he often 
borrowed the Logo manual to read for 
homework. This provided him with many 
ideas about Logo primitives which might 
enable him to write more complex pro- 
grams. He took himself beyond turtle 





Slot 




TSlot 




What is Logo, continued. 



geometry to write an interactive program 
which enabled the user to choose a polygon 
^kth any number of sides of user-specified 
^Higth for the turtle to draw. 
^^This project of Jim's pushed my pro- 
gramming ability, for I, too, was a new 
Logo user. I would often take my back-up 
copy of his disk home to work out various 
ways to solve, his programming problems 
and bugs. After inventing or getting my- 
self help with possible solutions or simpler 
examples, 1 created a new file called HELP 
to provide him with examples of possible 
solutions to his problem. 

Jim, being an independent thinker, 
would study the examples in my HELP 
file, then say thoughtfully, "No, I don't 
■ believe that I want to do it that way," and 
continue with his own exploration and 
problem solving. 1 did notice that some of 
the HELP ideas found their way into his 
programming, and most of the inventions 
remained Jim's own. 

At the end of the session, Jim was still 
working on centering his polygons above 
the text, and I had begun to use a HELP 
file with other students. 






My first task was to 
invent a computer 
culture. 



My last example is Manual. 1 have no 
file for his work. He was the class con- 
ceptualizer. He had started using com- 
puters because he enjoyed the fast action 
and energy of video games. He knew 
what would make an exciting program. 
Manual would strike up a conversation 
with a likely programmer describing an 
idea for a program. The talk continued as 
the other student moved toward a com- 
puter and started working out Manual's 
ideas. When Manual was satisfied that the 
person was "hooked" on the idea, he re- 
treated and started another person on 
another idea. 

I have Manual to thank for the work I 
do in the middle of the night, figuring out 
how to make a ball-shaped turtle appear to 
"bounce" off the edges of the screen. 

These stories offer examples of the many 
ways in which students can explore a com- 
puter environment using the Logo 

Language. 

Perhaps I've made it sound as if it "just 
happens." Because Logo permits a student 
to discover in a manner which is natural to 
the learning process it may appear that I 
have undervalued the teacher's role. Now 
we will look at some of the ways I have 
come to think about my role as teacher in 
a Logo classroom. 

The Teacher's Role 

Every computing class I have led has 
been made up of students with a wide 



variety of experience and knowledge 
about computers. Some students have 
never seen a real computer. Some may 
even be certain that the computer is the 
enemy of humanity and spend energy 
directing prejudicial comments toward it. 
Other students may own their own com- 
puters, belong to "user's clubs" and have 
been programming for years. 

This situation in itself was somewhat 
unnerving to me. 1 had made a commit- 
ment to myself to become knowledgeable 
about Logo and instructional uses of com- 
puters in order to integrate this tool into a 
school curriculum. I was determined to 
create a relationship between the current 
computer revolution and life in school. 

1 had no models. 1 had never used a 
computer nor seen any person other than 
my husband use one. My first task was to 
invent a computer culture. This culture 
needed to be able to support all the 
students and me as a learner alongside 
them. 

Any teacher's first job is to assess the 
situation and equip himself with: 

• Knowledge 

• Experience 

• Hardware 

• Time 

We must examine our own attitudes 
about computers in our society, ac- 
knowledge the areas creating distress and 
identify the areas bringing optimism. 

As Logo teachers our roles will cover a 
diverse, and perhaps uncomfortable range 
including demonstrator, teacher/ lecturer, 
teller, time structures problem setter, 
management solver, arbitrator, decision 
maker, challenger, helper, collaborator, 
process sharer, question asker, idea ex- 
tender, observer, documenter, admirer, 
enjoyer, time provider, technician, and 
model learner. 

1 require each student to keep a journal 
of process notes, questions and descrip- 
tions of problems encountered. I read these 
regularly and respond. 

In response I might write a comment 
which is similar to an oral response, "That 
sounds frustrating,"; "Wow! You figured it 
out!"; "I'd like to see how your procedure 
works*"; "Jim figured out how to do a 
similar problem, why not ask him for help 
next time?"; "I don't know the answer to 
this question, let's get together after school 
and visit the computer store." 

The journals provide a valuable vehicle 
in which to keep track of progress and to 
allow patterns to become visible. Often 
simply describing a problem will allow a 
student to understand it more fully, and 
thus be able to solve it. Journals provide 
direct access to help. They enable students 
to formalize their own thinking. 

The journals provide me with a sense of 
being in charge, of knowing what is going 
on, and, a means of keeping records of 
student work. They provide an opportun- 
ity for a personal relationship with each 

120 



student on a daily basis. Since I am also 
learning Logo, the journals provide me 
with a sense of comfort; 1 can see what I 
need to learn, and decide what my own 
homework will be. 

Beyond this, the journals provide both 
the students and me with an assurance 
that this is a collaborative learning ex- 
perience, and that I am working with them. 
Confidence about this allieviates, I believe, 
for both the students and me the sense of 
anxiety which might otherwise be present 
in teaching and learning this subject. Most 
educators agree that anxiety interferes 
with learning. 

As a Logo programming teacher, it is 
my job to make back-up copies of all my 
students' disks in order to protect the 
students from work loss due to damage or 
filing mistakes and to enable me to see the 
patterns in the work of individuals so 1 
can plan my next formal lesson for the 
class. 



Journals provide direct 
access to help. They 
enable students to 
formalize their own 
thinking. 




I can collect small groups of students 
around a common interest or pro- 
gramming problem. Sometimes 1 will ask a 
student to share some work with the 
whole group as a teaching example or as 
a model. By examining the work on the 
back-up disks I can also determine 
whether a programming problem should 
be solved with a "gift" of a tool which the 
programmer is probably not yet ready to 
invent on his own. (Some tools 1 have 
given include procedures for creating 
circles, explosions, and countdowns.) 

The disks give me time to work on pro- 
gramming problems by trying the pro- 
gram, and trying several solutions, away 
from the stress of a class period. Inevitably 
the disks force me to think about my own 
next learning steps. 

During the actual lab time 1 wander, 
watch, listen, and answer. 

1 feel that the words I use are important. 
Instead of solving a problem for a 
youngster by telling or showing the solu- 
tion immediately, 1 usually say: "describe 
the problem," "Tell me what happens", 
"What did you want to have happen?"; or 
"Try it now and show me." Some teachers 
ask the student to "Teach me what you 
did." 

This type of response is important for 
several reasons. 

• It gives me, as teacher, time. 

• It gives the student time. 

October 1982° Creative Computing 



What is Logo, continued... 

• Description is a matter-of-fact task 
which can diminish emotion and allow 
^the describer to see what actually hap- 
pened clearly. (Frequently in the middle 
Wof describing, a student will say "Oh, 
never mind, 1 see what t did.") 
If after a student has described the prob- 
lem and neither of us knows how to solve 
it, we write a plan together in plain English 
words. It includes a statement describing 
what the student wanted to have happen. 
Usually when a solution is not clear to 
either of us, we are working with an 
example which is too difficult for us. We 
substitute a simpler problem "for prac- 
tice." 

Then, together we write a superpro- 
cedure in the same way that Ted wrote one 
for his alphabet, before he had invented the 
subprocedures. I make very sure that the 
first step in the procedure is one that the 
student and I can solve successfully right 
then. 

Other jobs for the teacher include col- 
lecting, displaying and identifying re- 
sources. 



I have rarely seen a 
computer which is not 

surrounded by a group 

^^interacting with it and 
kibbitzing with each 
other in a most 
congenial way. 



I use bulletin boards to stimulate the 
learning process. I might post a weekly 
"Mystery Procedure," a new command 
with its definition and examples of its use, 
a challenging programming idea, a pro- 
cedure to copy, a picture of a student's 
procedure, or a chart of students' names 
indicating their specific areas of expertise 
in order to make peer tutoring possible for 
every student. Sometimes I post an inter- 
active program for students to copy, use, 
then modify and make their own. 

* 

Creating a Supportive Community 

The computer community which we 
establish in our classrooms is for many 
students (and teachers) a first computer 
culture. As educators, we must be con- 
cerned about the values which are formed 
M ^nd used by this community of learners. 

Many question my use of the word 
^^'community" in connection with com- 
puters. However, 1 have rarely seen a com- 
puter which is not surrounded by a group 
interacting with it and kibbitzing with each 
other in a most congenial way. 

Most computers are a social and an in- 



tellectual center in a classroom unless 
usage is specifically regulated otherwise. 
Watchers see new ways to solve problems, 
participate in brainstorming new ideas and 
derive a great deal of pleasure from the 
process. 

Teena Crowley, a third grade teacher, 
said, "I wish Logo were everyone's intro- 
duction to community work. Everyone is 
involved and offers input from the start." 

Usually during a first class with a group I 
find it important to declare myself a Logo 
learner as well as a Logo teacher. I do it 
because it is honest and because it estab- 
lishes a basis for collaboration. The 
responsibility for helping and teaching 
and creating this class belongs to all. It is 
an ideal opportunity for me to model the 
motto "Life Long Learning," certainly an 
important part of any curriculum. 

Many issues emerge in the establishment 
of a Logo community. One of the first is 
the issue of ownership of procedures. Is 
it copying or stealing to save work which 
did not necessarily originate from the 
saver's own inspiration? 

The nature of Logo filing and saving 
makes it almost impossible for beginning 
users to keep separate files, and so from 
the first time SAVE is typed, a file of 
mixed-up origin exists. 

I prefer to be excited by the pos- 
sibilities of this "sharing" rather than 
regret it as a necessary "evil." I legitimize 
the sharing, giving, changing, and using of 
one another's procedures as part of the 
context of the community we are creating 
together. 

I share my work with my students and I 
encourage them to exchange procedures 
among themselves. 

Classes soon begin to create a vocab- 
ulary specific to their community. In one 
class a procedure named WING — basic- 
ally an outwardly spirally triangle which 
appeared to fly across the screen — be- 
came a favorite expression for a way of 
moving quickly across a space with arms 
rotating rhythmically. This reference point 
created a sense of cohesion and inclusion 
among classmates and added a dimension 
of good-natured humor. 

I credit some of my success in creating 
a supportive community to my insistence 
that part of the experience in computer 
class is participating in discussions about 
ethical and responsible computer use. 

I am genuinely worried about how our 
society makes decisions about computer 
use. I make clear to my students that com- 
puters are surrounded by a human culture 
with developed values and a sense of 
conscious choice about their use. 

I believe that one way people develop 
into responsible, rational human beings is 
by participating in discussions about 
dilemmas with peers. 

I often start a discussion with a simple 
story. Ideally, it describes an issue which 
is real or potential issue for this class, with- 

124 



out embarrassing any group member. 
Once I told about a filing mistake I made 
when making a back-up copy of Ted's 
alphabet. Half the procedures for creating 
letters disappeared through my mistake. I 
had to tell him what I had done to his work, 
and how sorry I was to have made such a 
silly and harmful mistake. 



Part of the experience 
in computer class is 

participating in 
discussions about 
ethical and responsible 
computer use. 



A 20-minute period of sharing of mis- 
take stories followed. No one was required 
to talk, but all class members were ex- 
pected to participate by being part of our 
circle. The rules also prevented comments 
or judgments being directed towards any 
person or point of view. Discussion was 
encouraged. 

Other issues which have worked for dis- 
cussions in my classes are: 

• Scheduling of computer use. 

• What about someone who doesn't take 
a turn? 

• Is it okay to borrow disks, copy disks, 
change disks? 

• What about using "bad" or "dirty" 
words to name procedures? 

• Should all schools have computers? 

• Should all kids have to learn to program 
a computer? 

• Why would a girl want to use a com- 
puter? 

• What kinds of information should a 
school computer keep? 

• Is it possible to have a really "private" 
computer file? 

• What are some ways computers work 
in our lives? 

• How can I get my family to value my 
programming instead of dismissing me 
as a "brain'"? 

The discussion which touched me the 
most deeply was requested by my students 
at the end of a summer school session. The 
subject was: now that we know so much 
about computer programming, how can 
we help our teachers feel comfortable 
knowing less than we do, so we can have 
computers in schools? 

Beyond these ways of thinking about 
structuring a class and a curriculum, there 
are many opportunities for collaborative 
programming. One teacher has helped her 
students create a class adventure game 
using Logo. 

The class planned the rooms, and then 
pairs or individuals created the procedures 

October 1982 • Creative Computing 



w 



to make each room. Her role was to set up 
the structure and aid in the process of 
linking. 

Harold Abelson's manual for Logo 
jves many examples of interactive pro- 
^ ams which can be enjoyed by a class. 
Many teachers are using it to create their 
own programs for guessing numbers and 
creating crazy sentences. 

Dan Watt's work creating curriculum 
for a dynamic turtle which moves accord- 
ing to laws of physics is interesting to use 
and then modify. 

A great need exists for all Logo teachers 
to share their emerging curricula. This will 
enhance our collective understanding and 
provide more models about the ways 
students can work within a Logo environ- 
ment. 



What Logo Teachers Say They Teach 

• Computer literacy. 

• The history and learning theory in Logo. 

• How to program a computer-like char- 
acter, a turtle robot or Bit Trak. 

• Controlling a turtle on a screen. 

• How to pace out shapes and then teach 
the turtle to draw shapes. 

• How to change pencolors and back- 
ground colors. 

• How to edit. 

• How to initialize a disk. 

• How to draw initials. 

• How to use repeat. 

• How to use subprocedures in pro- 
cedures. 

• How to use recursion. 

• How to read a print-out of programs. 



• How to draw procedure trees. 

• How to use variables. 

• How to use the Logo Manual. 

• How to manage files and clear the work- 
place. 

• How to use existing interactive pro- 
grams and modify them. 

This simple and straightforward list 
may be more or less what you expected. 
However when 1 ask my Logo students, 
whether school children or professional 
educators, what they learned in Logo class 
the list is quite different — fuller and 
more profound. 

What Logo Students Say They Learn 

• About problem solving and estimation. 

• About thinking and learning styles. 




This person used to 
develop applications 
for the 8086/8088 
market with the 
best of them. 




CD 



QM7 




October 1982° Creative 



What is Logo, continued... 



• About how to use their own learning 
style. 

• To think logically. 

work without emotional manipula- 
M m\s: the computer doesn't care whether 
^pfu feel angr\. 

• To use procedural thinking. 

• To use strategies for problem solving. 

• To become comfortable thinking math- 
ematically. 

• To be able to think geometrically. 

• To be able to consider laws of motion. 

• About language by creating my own sys- 
tem for naming procedures. 

• About graphics and design. 

• How important revision of procedures 
and text is, and how simple it is to do. 

• That decimals are useful. 

• How to type. 



• How to be patient. 

• How to take risks in working. 

The most significant things they claim 

to have learned include: 

• Looking at their own mistakes with an 

interest in understanding what happened 
instead of shame. 

• Feeling competent in setting their own 
problems and supported in solving them. 

• Understanding that learning and doing 
involve frustration and ease; they go 
quickly or slowly, parts are intriguing or 
boring, and this is what makes up all 
work and life. 

There is no question in my mind that 
working with computers is one way of 
forming a direct link with a sense of the 
future. Computers can provide a sense of 



optimism, new frontiers to be explored, 
and a kingdom to be conquered. 

Logo was developed to create an inter- 
active environment, a mathland. in which 
students could set their own pace, prob- 
lems and goals. It is a comfortable way for 
me to enter the future. It is a challenging 
way and it is a way that I can understand, 
choose and control. □ 





This person 
used to develop 
applications for 

the Z-80 market 
with the best 
of them. 





October 1982° 



Computing 



129 



* 



Why Logo? 

Logo is designed to encourage development 

of problem-solving skills. 



Logo is a language for learning. 
That sentence, one of the slogans of 
the Logo movement, contains a subtle 
pun. The obvious meaning is that 
Logo is a language for learning pro- 
gramming; it is designed to make 
computer programming as easy as 
p^fcle to understand. But Logo is 
a^i language for learning in gen- 
eral. To put it somewhat grandly, 
Logo is a language for learning how 
to think. Its history is rooted strongly 
in computer-science research, espe- 
cially in artificial intelligence. But it is 
also rooted in Jean Piaget's research 
into how children develop thinking 
skills. 

In a certain sense, all programming 
languages are the same. That is, if 
you can solve a problem in one lan- 
guage, you can solve it in another — 
somehow. What makes languages dif- 
ferent is that some types of problems 
are easier to solve in one language 
than in another. Language designers 
decide what kinds of problems their 
language should do best. They then 
make design choices in terms of those 
goals. 



M the Author 

^T-in Harvey is director of the computer 
:enter at Lincoln- Sudbury Regional High 
School. 390 Lincoln Rd.. Sudbury. MA 01776. 
He modified Logo for its PDP-11 minicom- 
puter. 



Brian Harvey 
Logo Computer Systems Inc. 
368 Congress St. 
Boston, MA 02210 



Logo as a Programming Language 

Let's postpone for a while the 
broader educational issues. First, 
we'll consider Logo simply as a pro- 
gramming language. How is it similar 
to other languages; how is it dif- 
ferent? Syntactic details aside, there 
are several substantial points of lan- 
guage design through which Logo can 
be compared to other languages. 

Logo is procedural- A programming 
project in Logo is not written as one 
huge program. Instead, the problem 
is divided into small pieces, and a sep- 
arate procedure is written for each 
piece. In this respect, Logo is like 
most modern languages. Pascal, 
APL, LISP, C, and even FORTRAN 
permit the division of a program into 
independent procedures. Among the 
popular general-purpose languages, 
only BASIC lacks this capability. 
(The sample Logo programs in this 
article are written in Apple Logo, a 
dialect written by Logo Computer 
Systems Inc. Other versions of Logo 
will be slightly different in details.) 

Consider the Logo program in list- 
ing la. Even if you don't know any- 
thing about Logo, it's probably ob- 
vious what this pair of procedures 
does. Compare it to the BASIC ver- 
sion in listing lb. 

The GOSUB construct in BASIC is 
weaker than a true procedure capa- 
bilitv in several ways. For one thing, 



the BASIC subroutine is not an inde- 
pendent program; if line 100 were 
omitted, the program would "fall in- 
to" the subroutine. More important, 
there is no concept in BASIC of in- 
puts to procedures, like QUESTION 
and ANSWER in the Logo program. 
Instead, extra statements must be 
used to assign values to the variables 
Q$ and A$, explicitly. 

This explicit assignment is not 
simply an inconvenience. It means 
that the main part of the program has 
to "know" about the inner workings 
of the subroutine. In the Logo ver- 
sion, the procedure named QUIZ 
knows only that the procedure OA 
has two inputs, a question and an 
answer. If OA were modified to use 
different names for the variables, 
QUIZ would still work. Similarly, 
although this particular example 
doesn't show it, Logo procedures can 
have an output that is communicated 
to the calling procedure. (The DEF 
statement in BASIC provides a 
limited version of procedures with 
outputs; the limitations are that the 
inputs and outputs must be numbers, 
and the definition must be a single 
line without conditional branching.) 
Logo is interactive. Like BASIC, but 
unlike Pascal, Logo lets you type in a 
command to be carried out right 
away. It's also quick and easy to 
change one line of a program. Other 
interactive languages are LISP and 



August 1982 $ BYTE Publications Inc 



163 



,, „ ,j a A sir Each program asks the same set of three 
Listing It Comparison of Logo md B *j£' ^ ummr , /„ the BASIC ver- 

questions and compares the ^ S J^V° 10 00-1U0) is not an independent 

wr^t &sra£ri — — — — - 

might concetuaWy be used by other programs. 
(la) 

SCAT'S THE BEST MOV.E EVER71 ICASABLANCA1 

St IwHO WROTE '•COMPULSORY M.SEDUCAT,0N"71 [PAUL GOODMAN, 

END 

TO OA :QUESTION : ANSWER 
TYPE :QUEST10N 

TEST EQUALP .ANSWER READUST 

END 

(lb) 

10 Q$ - "WHAT'S THE BEST MOVIE EVER?" 
20 A$ = "CASABLANCA" 
30 GOSUB 1000 
• 40 Q$ = "HOW MUCH IS 2 + 2?" 

50 AS = "5" 

n ^WHO^WROTE "COMPULSORY MISEDUCATION'?" 
80 AS • "PAUL GOODMAN" 
10 GOSUB 1000 
r i00 GOTO 9999 
1000 PRINT Q$; 
1010 INPUT R$ 

1020 IF R$ = AS THEN GOTO 1100 
1030 PRINT "NO, DUMMY, IT'S ";A$ 
1040 RETURN 

1 100 PRINT "YOU'RE RIGHT!' 
1110 RETURN 
9999 END 



a 1 

m 



APL; other noninteractive languages 
are C and FORTRAN. 

Whether or not a language is inter- 
active has an effect on its efficiency. 
In brief, program development is gen- 
erally faster with an interactive lan- 
guage, but already-written programs 
generally run faster in a language that 
is not interactive. The difference has 
to do with the mechanism by which 
the computer "understands" your 

program. 

Every computer is built to under- 
stand one particular language. This 
machine language is different for each 
type of computer. Since machine-lan- 
guage instructions are represented as 
numbers, they're not easy for people 
to read. For example, the number 
23147265 might mean "add the 
number in memory location number 
147 to the number in memory loca- 



tion 265." Programs written in a high- 
level language, including Logo and 
the other languages mentioned here, 
must be translated into machine lan- 
guage before the computer can carry 
them out. This translation is done by 
another computer program that 
comes in one of two flavors: compiler 
or interpreter. 

A Pascal compiler, for example, 
takes a program written in Pascal and 
translates (compiles) it into the ma- 
chine language of whatever computer 
you're using. The translated program 
is permanently saved as machine lan- 
guage (probably as a file on your 
floppy disk). Thereafter, the ma- 
chine-language program can be ex- 
ecuted directly. The compiling pro- 
cess takes a long time. But once it's 
finished, running the compiled pro- 
gram is very fast because it need 



never be compiled again. 

A Logo interpreter, on the other 
hand, does not create a permanent 
machine-language version of your 
program. Instead, each Logo state- 
ment is translated and executed every 
time the statement is supposed to be 
executed. The interpreter does not 
produce a machine-language repre- 
sentation of your program, but sim- 
ply carries out the machine-language 
steps itself. If a Logo statement is to 
be executed six times, it's translated 
six times. (Actually, some interpre- 
ters, including Apple Logo, save a 
partial translation of each procedure, 
so that the second execution is some- 
what faster than the first; this process 
is too complicated to explain in this 

article.) . 

Interpreted languages can be inter- 
active. Suppose you want to find the 
value of 2+2 in Pascal. First, you 
must use the text-editor part of your 
Pascal system to write a disk file con- 
taining a Pascal program. Then, you 
run the Pascal compiler, which will 
translate the program into machine 
language. Finally, you run the com- 
piled program and your computer 
types out 4. In an interpreted lan- 
guage like Logo, you can simply type 
PRINT 2 + 2 to see the same result. 

The situation in which interaction 
is most important is program devel- 
opment. If you are writing a compli- 
cated program, it probably wont 
work right the first time you try it. 
You'll have to try it, see what goes 
wrong, change the program, and try 
again. In order to see what went 
wrong, you'd like to be able to use 
interactive debugging. (You stop the 
program where the error happens ana 
type in commands to examine the 
values of variables at that moment. 
This debugging cycle may be repeatec 
many times before the program final- 
ly works completely. Even though a 
compiler might make the program 
run faster, an interpreter is likely to 
make the entire debugging process 
faster because it's so much easier to 
find and fix your mistakes. It's onh 
after the program works, and you 
want to use it every day without 
modification, that the compiled ver- 
sion is really faster. 




The flexibility and ease of use of an 
interactive language is particularly 
valuable in an educational setting. 
For a student of programming, there 
often is no production phase— the 
program is of interest only as long as 
it doesn't work. When it does work, 
the student goes on to the next prob- 
lem. In that sort of environment, the 
speed advantage of the compiler 
never materializes. In a business en- 
vironment, on the other hand, the ac- 
tual production use of a program is 
likely to be more important, which 
makes a compiler more desirable. 

Some languages use mixed 
schemes. BASIC (normally an inter- 
preted language) has compilers that 
allow the user to give up interaction 
for efficiency. Some LISP compilers 
can coexist with interpreters, so that 
| some procedures can be compiled 
while others are being debugged in- 
teractively. Some versions of Pascal 
are compiled into an intermediate 
I language called p-code, which is then 
interpreted. FORTH uses a similar 
system of partial compilation, but the 
I compiler is part of the run-time en- 
vironment, so single statements can 
be compiled and run interactively. 
Logo is recursive. In a procedural lan- 
guage, one procedure can use another 
procedure as a subprocedure to do 
part of its work. A language is recur- 
sive if a procedure can be a subproce- 
dure of itself. 

All modern procedural languages 
allow recursion. Among widely used 
languages, only FORTRAN allows 
procedures but not recursion. 
(BASIC, as was mentioned earlier, 
has neither.) It may seem as though 
recursion isn't too important. Why 
should it be any different from any 
other use of subprocedures7 It's hard 
to explain in a simple way why recur- 
sion is important. The idea behind 
recursion, though, has profound 
mathematical importance. By allow- 
ing a complicated problem to be 
described in terms of simpler versions 
of itself, recursion allows very large 
problems to be stated in a very com- 
pact form. 

A well-known example of a prob- 
lem best solved using recursion is the 
Tower of Hanoi puzzle. This puzzle 




(lb) 





(id) 




tion, figure 10 ww jr fc sma/Ier one. 

srtows an i/Iega/ situation untn a larger u» 




has a number of different-size disks 
piled initially on one of three pegs, 
with the smallest at the top. The 
problem is to move the disks onto a 
different peg, moving one disk at a 
time and never moving a disk onto a 
smaller disk (see figure 1). 

To solve this problem, first notice 
that it's very easy with only two disks 
(see figure 2a). It's easy to see that we 
have to get disk 2 onto peg B some- 
how To do that, we have to get disk 
1 out of the way. Therefore, move 
disk 1 to peg C. disk 2 to peg B, and 



Now suppose there are six disks 
(see figure 2b). Again, we have to 
begin by getting disk 6, the largest 
one, from peg A to peg B. But now 
there are five disks in the way, not 
just one. This provides us with a sub- 
problem: move five disks from peg A 
to peg C. But this is exactly the Tower 
of Hanoi puzzle itself with five disks 
instead of six! The subproblem is a 
simpler version of the main problem. 
This calls for the recursive solution 
shown in listing 2. 

In working through this program, 

bear in mind that each use of the 



HANOI procedure has its own, private 
variables; the value of NUMBER, for 
example, remains constant through- 
out any particular use of the pro- 
cedure, even though there is another 
use of HANOI with a different value 
for NUMBER in the middle. 

In addition to Logo, many other 
languages allow recursion (these in- 
clude Pascal, C, LISP, and APL). The 
style of Logo, however, encourages 
the use of recursion more than some 
other languages. C and Pascal allow 
recursion but encourage iteration. 
(Iteration means telling the computer 
to execute something repeatedly . The 
FOR. . .NEXT construct in BASIC is 
an example.) Logo is the other way 
around: iteration is possible, but 
recursion is preferred. For many pur- 
poses, neither approach is clearly 
right. Iteration is somewhat simpler 
for the situations in which it works at 
all; in some cases like the Tower of 
Hanoi puzzle, however, nothing but 
recursion will do. 

Until recently, iteration was much 
more efficient than recursion, both in 
speed and in the use of memory. A 
major advance in recent implementa- 
tions of Logo, including the versions 
available for the Apple II and the 
Texas Instruments TI-99/4A micro- 
computers, is that tail recursion is 
recognized by the interpreter and 
treated as if it were written as itera- 
tion. Tail recursion is the situation in 
which the recursive use of a pro- 
cedure is the last thing done in the 
procedure. In general, it is only tail- 
recursive programs that could just as 
easily be done iteratively. The HANOI 
procedure, for example, is not tail 
recursive because two recursive pro- 
cedure calls are in it, only one of 
which is at the end. 
Logo has list processing. Every major 
programming language has some way 
to group several pieces of information 
(numbers, for example) into one large 
unit. In FORTRAN and BASIC, this 
mechanism is the array. In Pascal and 
C, arrays are also used, along with a 
more complicated grouping called a 
record in Pascal or a structure in C. In 
Logo, the main grouping mechanism 
is called the list. 

Lists and arrays have two major 
differences. First, arrays have a fixea 



(2b) 











2- How the puzzle breaks down into simpler subproblems with similar solutions 
ngure ia Ihows the simplest solution to a puzzle involving only two disks. Figure 2b 
shows the situation when the same procedure is used on more disks. 



Listing 2- General solution to the Tower of Hanoi puzzle in Logo The program requires 
^puts^e variable NUMBER tells the program how many disks to the puzzle; the 
f oZr three Inputs are the names of the pegs. The IF statement detects the trivial sub- 
problem of moving zero disks, for which there is nothing to do 

The solution is found by dividing the problem into a series of simpler subproblerns, 
allot which can be solved by repeating a simple series of moves. First, move all but the 

third pel tin, move the bottom disk tothedestmrtion peg; and 
finally, move all but the bottom disk to the destination peg (see figure 2). 



size, while lists can become bigger or 
smaller as a program executes. (There 
is no equivalent in Logo to BASIC'S 
DIM statement, which is used to 
specify how big an array will be.) The 
second difference is that arrays must 
be uniform. That is, you can have an 
array of 12 numbers, or an array of 
strings each 23 characters long, but 
you can't have an array of* some of 
both. (A Pascal record or C structure 
can have some of both, but only in 
one predeclared pattern.) Each ele- 
ment of a Logo list can be any Logo 
object: a number, a word, or even an- 
other list. Thus, the following are ex- 
amples of lists: 

[VANILLA CHOCOLATE MOCHA1 

[VANILLA [MINT CHOCOLATE CHIP] 
[FUDGE SWIRL]] 

[BANANA 3.14159 [RED BLUE 
YELLOW] 2.71828] 

[FLAVORS [VANILLA CHOCOLATE] 
SIZES [LARGE SMALL] 
OPTIONS [[HOT FUDGE] 
[SUGAR CONE]]] 

The first of these is a list of three 
words. The second is also a list with 
three members, but the first is a word 
and the others are lists. The third ex- 
ample shows that numbers can be in- 
cluded. The last example demon- 
strates that a list can contain a list 
that contains a list. 

The last example is a special kind of 
list, called a property list. If this prop- 
erty list were associated with the 
name ICECREAM, the Logo statement 

PRINT GPROP "ICECREAM "SIZES 



ir 



TO HANOI :NUMBER .FROM :TO -.OTHER 
IF :NUMBER = 0 [STOP! 

'^S^X^M^ IFflOM PEG I :FBOM ,T0 PEG, :TO, 
ANOI -.NUMBER - 1 .OTHER :T0 :FROM 
END 



HANOI 6 "A "B "C 



would print: 
LARGE SMALL 

(GPROP stands for Get PROPerty.) 
Property lists are a convenient way to 
group related information. Imagine, 
for example, a Spacewar game pro- 
gram with several ships, each with a 
property list. The properties might be 
the ship's position, velocity, shape, 
remaining energy, and so on. 

The reason that some languages 
restrict you to using arrays is that, be- 
ing uniform and of fixed size, they are 



_ C O 




more efficient to deal with. The 
restrictions on arrays mean that if the 
nputer knows where the beginning 
some array is located in memory, 
ie location of the nth element of the 
array can be calculated easily, no 
matter what values the elements ac- 
tually have. 

With a list, the size of each element 
is variable. Therefore, lists are stored 
in a more complicated way. As a 
result, to find the fourteenth element, 
you have to start with the first one, 
figure out where the second one is, 
then figure out where the third one is, 
etc. Since this is all done automatical- 
ly by the Logo interpreter, lists aren't 
hard for the programmer to use, but 
it's somewhat slower than finding 
something inside an array. 

Among major languages, LISP uses 
lists much like those in Logo. (In fact, 
the data structures in Logo are based 
on those of LISP. USPs name stands 
for LISt Processing.) APL uses a data 
structure that is like lists in that it is 
not fixed in size, but is like arrays in 



that it is uniform in composition. In 
other words, an APL vector can grow 
or shrink, but it has to be all numbers 
or all characters. Pascal and C don't 
have lists, but they have pointer vari- 
ables that can be used along with 
records or structures to build the 
equivalent of lists. FORTRAN and 
BASIC don't have dynamic storage 
allocation— you can't make some- 
thing bigger in the middle of the pro- 
gram—so there is no way to create 
lists in them. 

Logo is not typed. In BASIC, if you 
want a variable to contain a character 
string, you put a dollar sign at the end 
of its name. If you don't use the dollar 
sign, the variable must contain a 
number, not a string. (Some versions 
of BASIC have a third type: a vari- 
able whose name ends with a percent 
sign contains an integer, or whole 
number.) In Pascal and C, the type of 
a variable must be given explicitly in 
a declaration. In FORTRAN, vari- 
ables can be declared as in Pascal; if a 
variable isn't declared, its type 



depends on the first letter of its name. 
The letters I through N indicate in- 
teger variables. 

In Logo, as in LISP and APL, vari- 
ables are not typed. Any variable can 
take on any value. The same variable 
can be an integer at one point in the 
program and a character string 
(called a word in Logo) later on. 

Originally, variable typing wasn't 
a matter of language-design 
philosophy. Variables were typed to 
make life easier for the people who 
wrote compilers. Since different ma- 
chine-language instructions are used, 
for example, to add integers and to 
add numbers with fractional parts, 
it's easier to translate "A+B" into 
machine language if you know ahead 
of time whether or not A and B are in- 
tegers. 

More recently, some language de- 
signers have taken the position that 
variable typing is a good thing, apart 
from implementation issues, because 
it disciplines the programmer to use a 
for only one purpose. In re- 



I 



- • • & 
« ' .• , ; - • 



v 



Introducing the Honorable Shell— 



I 



FAtmebn^thmughinop«ationaIte*taologyforCP/IW-system&- 
OKARA lets you. theusei; create command scripts to replace tner 
boring; repetitive, error-prone ^^^^^^^ 
by CP/ M and the programs that run under .fcW.th OKARA the, 

. nJchinepresentsany penality y<^ d «^^^^gS 

commands that da it all ta elaborates hand-holding; 
is a. must for anyone- who uses. CP/ M. And a super-must ^syst^r 
integrators.sofJaredevelopers.officemanagers.teachers.parents.„ 

anyone who sets up CP/M applications for others- 

c . n Universal- Nearly all present and futureCP/M applications, 

aFaSt-ZOto 100 times faster Q Universal ^^Jder OKARA without modification. 

• -.r ; sUPERVYZToi^^^^^^rT price-$150: single copy. $130; disk only. SZfXrnanual only** 

S T Q 1S PttQTr ^^^^ ^^ v OEM discounts available^ 

aTiny-TypicalIyunder3Krw^^ nTormatS-a* single density. 5* Osborne: Apple. Nortnstac 

loaded, plus ZK for CCR PL SvstCin:— 8080. Z80. or 8085 cpu. CP/M Z_Z Operating,, 
CT Smaif-Youcairuseit likeSUBMO^oi^wgr^ J System-Text editor to. create scnpts- 

your awn menus or other dialogs-*, 
a Simple-lf you use aVMvyoucan learn OKARA- irran hour* 

1 e ■ • 

QE I Cji» < ■■■■•> ■ ■ ' -..»-■ .. • • > 



1 

r 

I 




W • ■ ... -7 - r - . ■ ..... 

* Q Slicfe^rovidessorr^enhanc^eflt^^ 

needed^ 



•jL.tjiru. NQEntOreraCingLtQ^ypSiaitMyJs^ mm mt*mm*immm*m i t ■■■■■«■ «>*r-. .«m nmiiipi»<<»r. « » <> < " ik , t* m >* <i 




P.O.Box 1I46I> 
Oakland;. CA 94611* 



•OKARA is a trademarks- . 
of KIAI Systems^ 
SUPERVYZ. is a trade— 
mark of EPIC Compute*^ 
Corporation. STOIC 
PILOT is a trademark of> * 
STOK Computer Inter- 
face. CP/M is a trade- 
mark of Distal Researcter*. 



Circle 223 on inquiry care. 



Listing 3: Logo variables are nontyped. The variable NUMBERS contains whatever the 
user enters. First, it is examined as a list of words and tested to see if it contains the value 
DONE; next, it is used as a list of numbers and added. 



ADDLOOP 
JNT [TYPE TWO NUMBERS TO ADD.] 
MAKE "NUMBERS READUST 

PRf^ ^NUMBERS) +(LAST .NUMBERS) 

ADDLOOP 
END 



jecting typing, the designers of Logo 
did not mean to encourage the hap- 
hazard use of variables for different 
purposes; rather, they built a pro- 
cedural language in which variables 
are attached to a particular pro- 
cedure, rather than being available to 
the entire program. This encourages 
the same discipline in a different way. 

As an example in which typed vari- 
ables are awkward to use, listing 3 il- 
lustrates the common problem of 
writing a program that reads some 
numbers entered by the user, per- 
forms some calculation with them, 



and repeats the process until the user 
signals that there are no more prob- 
lems to do. 

This program has been written so 
that the user can enter the word 
DONE when no more numbers are 
left to add. In a typed language, the 
numbers would have to be read into a 
numeric-type variable, not a string- 
type variable. Entering a nonnumeric 
word would be an error. FORTRAN 
programs used to be full of instruc- 
tions to the user like "type 9999 to in- 
dicate that you're done." Pascal pro- 
grams face the same difficulty. 



WICAT 

has the 68000 

While others are promising, WICAT 
Systems for nearly two years has been 
quietly delivering their complete 68000 
computers. 

The System 1 50 is a popular desktop 
computer with large memory and 
hard disk, unmatched in price/ 
performance. The System 100 is its 
expandable software compatible high 
performance companion. 

Concurrents integral"' database 
and menusystem greatly accelerate 
the development of applications Full 

UNIX"' System 3 with no compro- 
~vses s ready 

Concurrent can discuss your needs 
and help you select the proper 
configuration Please write or call 
'513; 281-1270 



Motorola 68000. 256K memory 10MB Winchester 
disk 760KB ftoopy. terminal, system software, choice 
of Pascal. FORTRAN C. AssemOler BASIC COBOL 

Single useM 50-1 $ 9,450 

Three users 150-3 $10,850 

Six users 150-6(51 2K) . $12,850 

MULTIBUS is a trademark ot INTEL Corporation 
UNIX is a trademark of Bell Laboratories 

OPTIONS graorucs printers. IEEE 488 instrumen- 
tations interlace videodiSK controllers A, D boards 




Concurrent 

1870 Madison Road Cincinnati, Ohio 45206 



Corporation 



Logo is extensible. Every computer 
language has certain built-in, or 
primitive, operations. Most lan- 
guages, for example, include arith- 
metic operations on numbers, and 
some way to print the results. Pro- 
cedural languages allow the program- 
mer to create new operations, extend- 
ing the capability of the language. In 
that sense, most languages are exten- 
sible. But "extensible" is used by lan- 
guage designers in a special sense. 

An extensible language is one in 
which user-defined procedures "look 
like" primitive procedures. This is 
partly a matter of notation and partly 
a matter of real power. In most lan- 
guages, the primitive arithmetic oper- 
ations can be applied to several dif- 
ferent types of variables (integer and 
real, for example) with appropriate 
results for each type. In most lan- 
guages, however, user-defined pro- 
cedures must specify in their defini- 
tion one particular type of variable to 
which they apply. This restriction 
violates the principle of extensibility. 

Extensible languages are particular- 
ly valuable for teaching because a 
teacher can provide language exten- 
sions and teach them as if they were 
primitives. LISP, Logo, APL, and 
FORTH are extensible, with some 
minor restrictions in some cases. 
Logo violates pure extensibility, for 
example, in that some of the primitive 
arithmetic operations are represented 
in inf be form (with the operation sym- 
bol between the two operands, as in 
3 + 2), while user-defined pro- 
cedures can be represented only in 
prefix form (with the operation sym- 
bol before the 4 operands, as in 
SUM 3 2). Almost all Logo primitives 
are used in prefix form. 

As an example of the use of exten- 
sibility in Logo, most versions do not 
have primitive procedures for itera- 
tive looping, like the FOR, DO, or 
WHILE constructs in other languages. 
But it is very easy to define these pro- 
cedures, if you want them, so that 
they look syntactically similar to the 
IF command that is a Logo primitive. 

Logo as a Learning Language 

Among respectable languages, you 
may have noticed two groupings. 



1 



avTP P.ihlirannns Inc 



Circle 112 on inquiry card. 



y • AXIS 



(14,12) 




x-AXIS 



(-16.-U) 



"igurc 
^pimple 



The difficulties involved in graphics using Cartesian coordinates. * square is 
ZpU to draw when its sides are parallel to the axes, but trigonometry is necessary 
when other orientations are used. 



Logo is "tuned'' for interesting ap- 
plications. Probably the most famous 
aspect of Logo is the idea of turtle 
geometry. This approach to com- 
puter graphics has been added to 
other languages, such as Pascal and 
PILOT, but it originated with Logo. 

Most approaches to computer 
graphics are based on Cartesian coor- 
dinates (the "x,y" system you learned 
for graphing equations in high 
school— see figure 3). In this ap- 
proach, each line you want to draw is 
specified in terms of the specific posi- 
tions of the endpoints, relative to a 
fixed-coordinate system. Using Carte- 
sian coordinates, it's not too hard to 
draw an upright square in a known 
position, but if the square is tilted, its 
coordinates must be calculated using 
trigonometry. The power of turtle 
geometry is that lines are described 
not in terms of absolute position in a 
coordinate system, but relative to the 
position and direction of the turtle, a 
conceptual animal that moves around 
the TV screen. In this system, you 
don't say where the turtle starts or 
ends, just how far it moves and in 
what direction: 




Logo, LISP, and APL are interpreted, 
list-oriented, and untyped. Pascal 
and C are compiled, array-oriented, 
and typed. (All respectable languages 
are procedural, by definition.) These 
groupings reflect historical accidents, 
implementation convenience, and 
language-design philosophy. For ex- 
ample, C and Pascal are very similar 
because they are both derived from 
an earlier language, ALGOL, that 
established a style followed by many 
newer languages. 

Compilers have a much easier time 
with typed languages, while inter- 
preters are just as happy with un- 
typed ones. The list-oriented lan- 
guages were all invented by people 
who are primarily mathematicians, 
rather than computer programmers. 

Within each group , though, the dif- 
ferences tend to reflect the particular 
use each designer had in mind. For ex- 
ample, C is different from Pascal 
largely because C was designed as a 
language for systems programming. 



In the list-oriented group, LISP was 
developed for use in artificial- 
intelligence research, and APL was 
developed to teach algebra and the 
mathematical topics, like calculus, 
that depend on algebra. Logo, 
though, was developed as a learning 
language, not for a specific branch of 
mathematics, but for problem- 
solving behavior. Logo is meant to 
appeal particularly to younger 
students than APL does, although 
Logo has also been used successfully 
with college physics students at MIT. 

From the point of view of the 
"pure" computer scientist, Logo is 
LISP. The developers of Logo, in fact, 
have been artificial-intelligence 
researchers for whom LISP is second 
nature. The differences between the 
two languages are all based on the 
specific intent to make Logo par- 
ticularly useful as a learning lan- 
guage. Logo's special properties from 
this point of view will be described 
next. 



TO SQUARE : LENGTH 
REPEAT 4 [FORWARD :LENGTH 
RIGHT 90] 

END 



Other articles in this issue of BYTE 
explain more about how turtle 
geometry works (see "A Beginner's 
Guide to Logo" by Harold Abelson 
on page 88 and "Introducing Logo to 
Children" by Cynthia Solomon on 
page 196). For our purposes, what's 
important is that the use of this 
powerful approach makes graphics 
programming possible for beginners 
the first time they use the computer. 

In the past, computer program- 
ming has appealed to only a small 
number of people because there has 
been a real lack of problems that are 
both interesting and easy enough for 
beginners. Traditional programming 
courses have been heavy in algebraic 
problems ("Write a program to solve 
quadratic equations."). Therefore, 
they have not attracted people who 



Listing 4: Pig Latin translation via Logo. 



END 



IIGLATIN :SENT 
^XceSwJrD RRST .SENT) (P1GLAT1N BUTF1RST .SENT) 



l?v™M?m£*ZlO*0 [OUTPUT WORD .WORD "AY] 
Z^St^SSi'^SS BUTF.RST :WORD FIRST :WORD 

END 

TO VOWELP -.LETTER ' _ 

OUTPUT MEMBERP .LETTER [A E I 0 U Y] 

END 



don't like the traditional mathematics 

curriculum. 

Turtle geometry is not the only 
special application built into Logo. 
Another one is language processing. 
Letters, words, and sentences are a 
natural hierarchy of Logo objects. (In 
most programming languages, by 
contrast, a sentence is not a list of 
words, but a string of characters. If 
you want to deal with the words in 
^fe sentence, you have to write a 
implicated program just to look for 



spaces in the string to divide the 
words.) As a simple example, listing 4 
is a Logo program to translate a 
sentence into pig Latin. PLWORD is 
used as a subprocedure to translate a 
single word based on this rule: if the 
word starts with a vowel, add AY at 
the end. If not, move the first letter to 
the end and try again. 

In the program, WORD and 
SENTENCE are procedures for joining 
two objects into a larger object; FIRST 
and BUTF1RST separate an object into 



I-Queue 

...the intelligent buffer that frees y~- 
IBM Personal Computer from the time- 
consuming printing function. 
I-Queue accepts data at processor 
speed (over 4000 characters per sec- 
ond) and sends it to the printer* at 
whatever speed the printer can 
accept. 

I-Queue can store 16K of RAM, 
which is approximately 7 pages of 
average printout (optionally expand- 
able to 65K for storage of 28 aver- 
age pages). Standard features 
include complete pagination 

and formatting capabih- U 
^SteJSSZ, other design enhancements usually found only 

£S vtmted. For new brochure, write, or call our 800 number. 

•Fully compatible with IBM pnnter and aU Centrorucs mterface pnnters. 
IBM Personal Computer is a trademark of IBM 



AVAILABLE FROM STOCK - 
WITH CLOCK/CALENDAR & 
COMPLETE DEMO PROGRAMS: S495 
«K MEMORY EXPANSION OPTION: $175 



• IJPORlPHeX inc 

149 Palmer Road 
Southbury, CT 06488 
300-221-0732 In NY: (212)961-2103 



its component parts. The primitive 
procedure FIRST, when applied to a 
sentence, produces the first word of 
the sentence. When applied to a 
word, it produces the first letter.^ No 
other programming language J " 1 
neady with this hierarchy of 
in human language. 
Logo is user-friendly. A language for 
learners has to be designed to deal 
with problems that are less important 
in a language meant for experienced 
programmers. For example, when 
you make a mistake, you should get a 
detailed, helpful error message. Lan- 
guages that say things like SYNTAX 
ERROR or ERROR NUMBER 259 are 
not encouraging to a beginner. Logo 
has messages like: 

+ DOESN'T LIKE HELLO AS INPUT 

This means that you tried to add a 
nonnumber, the word HELLO, to 
something. When you see the mes- 



/ DON'T KNOW HOW TO FRIST 

you have used a procedure, FRIST, 
that you haven't defined. The 



NOT ENOUGH INPUTS TO MAKE 

means that the procedure MAKE needs 
two inputs, and you gave only one. If 
the error happens during the execu- 
tion of a procedure, Logo also prints 
the name of the procedure and the 
line containing the error. 

Since the beginning of time (in 
1954), programming students have 
been getting confused about common 
programming statements such as 
X=»X+1, a frequently used assign- 
ment construct that seems to go 
against one's algebraic intuition. 
Pascal's use of : = instead of the un- 
adorned equal sign is somewhat of an 
improvement, and APL's - is even 
better. Even so, the notation doesn't 
make it obvious that X - 3 has an ef- 
fect very different from X+3 or 
X-3, which look very similar. Ir. 
Logo, the assignment is done this 
way: MAKE "X :X + 1 . Although leSJ 
terse than a single-character symbc. 
for assignment, the word MAKE con- 



HUFANTAST1C PBICES!!!! 
FROM DIGITAL DIMENSIONS 

°^ TA $359.% 

MI-82A .' . . . $469 - 95 

*ML-83A S719.95 

•Ml-84(porall.l) »|.OM.g 

*ML-84(s#rial) " » 

OKIGRAF ROAAS f or 82A or 83A $69.95 

OKIGRAF OISK.(Appl« only). ..... $59.95 

Interface boards and cables avail. 
* I net ud— Tractor Food 

E S?.S, $449.95 

AAX-80 w/graftrax. $472 .95 

MX-80FT ^j. S609 95 

MX-80FT w/graftrax I* 

MX-100 

GRAFTRAX only • • • 57 * - w 

I nfrfoca boards and cabl— avail. 

SCM-TP I $649.95 

120 word/min Daisy Wha^, 10 or 12 pitch, 
serial or parallel infrfoca 



! 



DAISYWRITER 2000 $ 1 ' 015 

Bidirectional 16.5cps, 38k buffer, 
Centronics, 488, RS232, & C. Loop 



DAISYWRITER 1500 

Bidirectional 16.5cps, 4k buffer, 
(Specify one interface only) 



$945 



BEACON ll-M 64K SI 00 System $2,995 

1 .2 meg in two 8" disks, includes CPM 2. 
2 MBAS1C, 4mhz Z80, 2 serial ports & 10 
Diskettes - Completely integrated - just 
add a terminal 

North Star Horizon II 64k $2,995 

quod disks with CPM 2.2 & AABASIC 

TERMINALS 

TELEVIDIO 950 *™ 

TELEVIDIO 925-C 5823 

TCS ACCOUNTING SOFTWARE 
Payroll, A/R, A/P. G/L each $65/25 

Inventory mm^m /oc 

TOTAL Payroll. A/R. A/P.G/L ea.. . $300/25 

TOTAL demo's ea _ 

SIMPLE' Filing system 

TRSDOS ACCOUNTING each $ • 75/25 

Payroll. A/P, A/R. G/L 

NASHUA DISKETTES 
8 inch soft sectored 

SS/SD *£» 

SS/DD 10/$3 ° 

DS/DD 10/S34 

8 inch hard sectored (32) 10/S25 

5 Va inch 
SS/SD 
SS/DD . 
DS/DD 



10/522 
10/S29 
10/S31 



DIGITAL DIMENSIONS 

190 Chapel Road 
Manchester, CT 06040 
1-800-243-5222 

CT Residents Call 

203-649-361 1 

MC/VISA welcome. Allow 2-3 weeks for 
checks. COD ok w/10% deposit. All prices 
include UPS ground freight in U.S. All orders 
shipped w/in 24 hrs. CT residents add 7 f% /. 
sales tax, CPM is T.M. of Digital Research. 
Prices subject to chg. w/out notice. 



jures up much more vividly the no- 
tion that something is being changed, 
not just used in a calculation. 

There are many more ways in 
which Logo makes explicit things that 
many languages leave hidden. For ex- 
ample, Logo uses the colon (which 
Logoites call "dots") to mean '1 want 
the value of this variable"; the same 
word without the dots names a pro- 
cedure. In LISP, the notorious paren- 
theses make it possible to distinguish 
procedure calls from variable refer- 
ences without the dots notation; most 
other procedural languages simply 
prohibit using the same word for both 
purposes. (That solution would be 
awkward in Logo because some 
words like WORD are not only 
popular variable names, but also 
names of primitive procedures.) 

In any case, according to the design 
philosophy of Logo, the dots notation 
is a good thing, apart from its tech- 
nical necessity, because it calls atten- 
tion to the fact that a variable's value 
is different from its name; it also 
points out that a variable is different 
from a procedure. For example, in the 
X-X+l situation, the two identical- 
looking appearances of X have dif- 
ferent meanings. The second repre- 
sents the old value of X, whereas the 
first merely names the variable being 
given a new value. In the Logo ver- 
sion, these two meanings are 
distinguished by the notation. The 
first is called "X; the second is called 
:X. 



Another example of a distinction 
that is explicit in Logo and not in 
some other languages is the division 
of procedures into commands and 
operations. An operation is a pro- 
cedure that computes some value that 
becomes the output of the procedure. 
For example, the arithmetic opera- 
tions are in this category. A com- 
mand does not have an output, but 
instead has an effect: it prints some- 
thing, moves the turtle, or changes 
the value of a variable. 

The same distinction is made in 
Pascal, in which operations are called 
functions and commands are called 
procedures. FORTRAN calls them 
functions and subroutines. LISP, 
APL, and C, however, are less fussy. 



C treats all procedures as operations, 
but allows an operation to be used as 
if it were a command; the result of the 
operation is ignored in that case. In 
LISP and APL, the result of such a 
"top-level" operation is printed. (In 
LISP, every procedure has an output 
and every top-level command prints 
something. In APL, some procedures 
don't have output and, therefore, 
don't print anything.) In Logo, using 
an operation without a command is 
considered an error; if you want 
something printed, you must use the 
PRINT command. 

The use of infix arithmetic in Logo 
is a concession to the habits of the 
users. All other Logo procedures are 
used in prefix form, with the pro- 
cedure name before the inputs. Arith- 
metic can also be expressed in prefix 
form. The two Logo expressions 
3+2 and SUM 3 2 are equivalent. 

The infix form seems more natural 
to people accustomed to doing arith- 
metic outside of the Logo environ- 
ment. The prefix form, however, is 
better in some ways. For example, it 
eliminates the need for precedence of 
operations (i.e., where division is 
always done before addition, etc.). 
Also, it eliminates the need for paren- 
theses to indicate grouping. In LISP, 
only the prefix forms are used. 

Another user-friendly aspect of 
Logo is its facility for interactive 
definition of procedures. Early ver- 
sions of Logo used a line-numbering 
technique: within each procedure, 
lines were numbered and could be re- 
placed much as the lines of a BASIC 
program can be replaced. Current im- 
plementations of Logo use a display 
editor in which special control char- 
acters are used to move the cursor 
around the display screen to change 
individual characters anywhere in a 
procedure definition. 
Logo has no threshold and no ceiling. 
This means that Logo is easy enough 
for anyone to use, but it is powerful 
enough for any project; it's not a 
"toy" language. Logo is best known 
as a language for elementary school 
children, but it's designed for learners 
of any age and any level of sophisti- 
cation. 

How young can a Logo learner be? 



Well, very young children might have 
trouble with typewriter keys and with 
the spelling of procedure names. 
Several years ago, however, Radia 
Perlman at MIT built a series of 
special keyboards with large buttons 
labeled with pictures instead of 
words. With this special hardware, 
she taught the ideas of turtle 
geometry to 4-year-olds. This project 
even included the idea of procedures, 
with buttons called "start remember- 
ing" and "stop remembering" to 
delimit a procedure definition, and 
one called "do it" to execute the pro- 
cedure. Multiple procedures 



named by using buttons in different 
colors. 

How old can a Logo learner be? 
Professors Harold Abelson and An- 
drea diSessa have been using Logo to 
teach physics to MIT undergraduates. 
They use Logo simulation programs 
to demonstrate not only simple 
Newtonian mechanics but even the 
general theory of relativity. Their 
book, Turtle Geometry: The Com- 
puter as a Medium for Exploring 
Mathematics (Cambridge, MA: MIT 
Press, 1981), demonstrates their ap- 
proach, which has also been used suc- 
cessfully with high school students. 





\ L „ ■ 

rTvai'lab'e now is^LOClCSIM. The first low-cost CP/M based logic 
1 simulator. With capabilities comparable to industry standard simulators, 
' those costing up to $50,000. 
LOCICSIM makes complicated design, test and verification easy. 
Replaces messy breadboards; fruitless hours on the bench. Lets you 
focus on your design; not hardware problems. 
Nine logic states, ability to simulate TTL/NMOS/CMOS/PMOS logic 
^hree'state wired-or and transfer gates with propagation delays 
aUows you to verify design, perform spike and race analysis. Macro 
circuit capability and Expandable macro network library plus 
numerous other features make it a powerful and usable design tool. 
Try it now. Send us a check for $30 and we will mail you a demo copy' 
of LOCICSIM and a User's Manual. 

•P!ea« HWC* "» M 3740/S " APPlE CP/M ,13/16 SECTC "" 

introductory pc«. S276. CP/M b«d 56k to 64k s»««m (APPIER w.h CP/M «rd>. 



For more information, call (408) 578-80%. Or write: 
E/Z ASSOCIATES, 5589 Starcrest Dr., San Jose, CA 95123 



CP/M APPLE and LOCICSIM are trademarks of Digital Research Inc.. 

Apple Computer Inc. and E/Z ASSOCIATES, respect.velv 




Logo has also been used for a 
special group of learners, those with 
severe handicaps. In the past, many 
children of normal or superior intelli- 
gence, but with impaired ability to 
communicate, have been diagnosed 
as retarded. Computers can be used 
with such children both as a com- 
munication prosthesis and as a field 
of interest in which the handicapped 
learner can exhibit autonomy in pur- 
suing goals. The use of Logo in educa- 
tion for the handicapped is explored 
in Dr. E. Paul Goldenberg's book 
Special Technology for Special 
Children (Baltimore: University Park 

Press, 1979). 

Other languages designed with 
students in mind are BASIC, Pascal, 
and APL. (I omit PILOT, which was 
designed not so much for students as 
for teachers; in its original design, 
students were supposed to use 
computer-aided-instruction programs 
written in PILOT, rather than PILOT 
itself.) How do these languages com- 
pare with Logo in their applicability 
to education? 

BASIC was designed as a modifica- 
tion of FORTRAN for beginners. By 
far the most important advance in 
BASIC was its interactive approach. 
This was much more of a pioneering 
step than it now seems because people 
are now accustomed to inexpensive 
personal computers with this feature. 
In the early days of BASIC, the only 
computers were huge, expensive 
ones. Although timesharing, which 
allowed several people to use the big 
computer at once, had recently been 
invented, many people objected to it 
because it used the precious time of 
the huge computers inefficiently. 
(The response of timesharing ad- 
vocates was that it was more efficient 
in the use of human time.) An interac- 
tive language was even more time- 
consuming than timeshared use of the 
old, compiled languages. For John 
Kemeny and his colleagues at Dart- 
mouth to move against the general 
worship of efficiency was very brave. 

Besides adding interaction, BASIC 
removed some of the most difficult 
parts of FORTRAN. For example, the 
INPUT and PRINT statements in 
BASIC don't require a detailed speci- 
fication of the format in which infor- 



r. i rr. i a i fifi on inquiry card. 



INTELLIGENT 






Free Your Compote from the 




being able to use your 




extensive printout;. 

Vii— lin j printout with, page 

breaks, page numbering and titles* 
margins of your choice; indented 
carryover lines, on- any size paper! 

Appreciate the time and money you 
will save by not waiting for your 
printer* 

SooperS pooler, a buffered printer 
interface; maintains control over your 
printer while you go on using your 
computer for more productive 
activities. Eliminate waiting while your 
printer pecks through a long 



information from your computer at up 
to 3000 characters per second and 
feeds it to your printer as fast as it can 
handle it— without using any of your 
computers memory or time! 

SooperS pooler features include: 

• 16K Memory (62K optional) 

• Buffer Status Readout 



* 



Pagination 
Single Sheets 

Headers and Page Numbering 
Indentation on Carryover Lines 
Self Test Routine 

Features also Software Controllable 
Plugs into Most Computer Systems 
16K Parallel I/O Unit— $349.00! 
Serial I/O Option— $95.00 
46K Memory Option— $159.00 



SooperSpooler by Compulink— 
The missing link that gives your 
microcomputer mainframe printing. 

COMPULINK 

CORPORATION 

1840 Industrial Circle 
Longmont. CO 80501 (303) 651-2014 

Send for brochure 
Dealer inquiries welcome 
Call for information: 800-525-6705 



mation is presented, as FORTRAN 
does with its FORMAT statement. 
(As an example, FORTRAN requires 
the user to specify the number of 
digits before and after the decimal 
point in the printed form of a 
number.) Of the modern languages, 
only C uses primarily format-directed 
input and output. Unfortunately, the 
important ideas of procedures and 
local variables were also left out of 
BASIC. 

This means that easy problems are 
very easy to solve in BASIC, but hard 
problems are close to impossible. 
Any large BASIC program is bound 
to be an unreadable maze of GOTOs. 
The designers of BASIC, after all, in- 
tended it as a language for beginners 
(i.e., Beginner's All-purpose Sym- 
bolic Instruction Code). FORTRAN 
was supposed to be used for more dif- 
ficult programs. 

The advent of personal computers 
has pushed BASIC into a more ex- 
tended role, not because it's easy for 
the programmer, but because it's easy 
for the computer I The Logo inter- 
preter, like the Pascal compiler, bare- 
ly fits in an Apple II computer with 
64K bytes of memory. BASIC inter- 
preters are used with 8K-byte ma- 
chines at a much lower cost. The 
result is that computer magazines are 
filled with long, complicated BASIC 
programs that are far from basic in 
their readability. 

Pascal, on the other hand, was de- 
signed to include the most advanced 
ideas of computer science in recent 
years. Although intended as a first 
language, it was meant primarily for 
college students, particularly those 
interested in computer science as a 
career. That helps to explain why it is 
compiled and typed, two strong bar- 
riers to the unsophisticated student. 
Even the simplest Pascal program is 
rather complicated to write, enter in- 
to the computer, and run. That's 
why, in practice, Pascal is often 
taught to students who have already 
used BASIC and FORTRAN. 

BASIC and Pascal were both de- 
signed to teach computer program- 
ming per se. APL was designed to 
teach mathematics, especially at the 
high school level. Its inventor, Ken- 
neth Iverson, used it for several years 



as a blackboard language without 
any intention of actually implement- 
ing it on a computer. That helps ex- 
plain his willingness to use special 
symbols not then found on any actual 
computer printer. Anything can be 
drawn on the blackboard! 

In its intended use, APL is very 
powerful. Many computations that 
require iterative loops and auxiliary 
variables in other languages can be 
done in one step in APL. Most people 
see this power mainly as a matter of 
terseness; APL is famous (or 
notorious) for its one-line programs. 
The real virtue of APL's approach is 
that it allows the student's attention 
to be focused on the mathematics of a 
problem, rather than on the needs of 
the computer. APL was designed to 
be used not in a special programming 
course or a special unit stuck into 
another math course, but casually 
throughout an algebra course, just as 
you'd use a calculator. 

Logo's goal is different from all 
these. It isn't supposed to be an easy 
introduction to something else, it's 
not specifically for computer-science 
majors, and it isn't a tool for teaching 
the same math curriculum people are 
already teaching. Instead, it's a door 
into the territory of the computer as 
an object for intellectual exploration. 
To return to the theme stated at the 
beginning of this article, Logo is for 
learning learning. 



Why Logo? 

In his book Mindstorms: Children, 
Computers, & Powerful Ideas (New 
York: Basic Books, 1980), Seymour 
Papert says, "It is not true to say that 
the image of a child's relationship 
with a computer I shall develop here 
goes far beyond what is common in 
today's schools. My image does not 
go beyond: It goes in the opposite 
direction." Logo isn't just a program- 
ming language; it's also a philosophy 
of education. Papert's book is the best 
explanation of that philosophy, but 
what follows is a briefer summar-. 

A child learns partly by picking up 
specific facts and skills. Much of 
existing formal education is about 
facts and skills: reading, spelling, and 
the multiplication table. But a more 
profound kind of learning is the skill 



ot learning ltseir, wmcn invuivw 
building of mental models of the 
world, of oneself, and of the learning 
process. These models are developed 
through intellectual exploration. That 
^kloration may begin in a weak, 
^Kphazard way, but a good learner 
develops strategies for purposeful ex- 
ploration. The more one learns, the 
oetter the model of learning, and the 
niore able one becomes as a learner. 
I In this process of growth, it doesn't 
J really matter what particular aspect 
I of the world you explore. In the in- 
I troduction to Mindstorms, Papert 
I mentions that at age 2 he fell in love 
1 with automobile gearboxes. When I 



VM CLO lit ) WtA "W* » "O" * " ~ f — 

love with hypnotism. The point 
about using computers in education is 
not that everyone must know some- 
thing about computers, but simply 
that for many people, computer pro- 
gramming can be the arena for this 
general process of learning to learn. 
Because the computer is such a 
general-purpose machine, it can ap- 
peal to many different interests. It can 
draw pictures, make music, write 
stories, or move robots. 

"I want a job as a computer pro- 
grammer. Why should I learn Logo, 
and not something useful like 
COBOL?" This is a common ques- 



to it. The first is that Logo, as ex- 
plained earlier, is designed to make 
explicit many of the fundamental 
ideas of computer programming. 
Someone who learns Logo is likely to 
have a very clear idea of the nature of 
variables, procedures, and most other 
programming constructs. So Logo 
may be a better basis even for learn- 
ing COBOL than simply starting with 
COBOL itself. But the second answer 
is that Logo's purpose isn't to train 
computer programmers. Logo isn't 
meant to replace all other program- 
ming languages. 

Logo is generally associated with 




This person 
used to develop 
applications for 

the Z-80 market 
with the best 
of them. 



d. 




Circle 373 on inquiry card. 



August 1982 <£ BYTE Publications inc 191 



children because most people nave a 
model of the learning process in 
which children learn and adults don't. 
This model is unfortunate. Logo can 
be useful to people of any age, but it 
k 11 be most useful to you if you ap- 
^Poach it in a playful, exploratory 
way. 

It's important to distinguish be- 
tween the Logo language and any 
particular implementation of Logo. 
Some things can't be done in the 
Apple and Texas Instruments ver- 
sions of Logo simply because the ma- 
chines aren't big or fast enough or 
because the implementation doesn't 
include some capabilities. For exam- 



, ll\J UUW VWWMfWWi * — — 

Logo has a good way of storing data 
on disk, although all versions can 
store procedures on disk. 

The Logo interpreter barely fits in a 
64K-byte Apple II, and the implemen- 
tation favors the features needed for 
education, not those needed for prac- 
tical data processing. But in principle, 
Logo is a good language in which to 
develop any application because of its 
interactive debugging and its proce- 
dural style. 

Do you want to write a video-game 
program? ItH probably run too slow- 
ly in Apple Logo, unless it's a simple 
one. But it might be worthwhile to 



with different ideas for your game in 
an environment that permits quick, 
easy modification of your program, 
and then rewrite it later in some other 
language. The advantage of Logo can 
be described partly in purely tech- 
nical terms like "interactive." An- 
other way of looking at it, however, 
is that Logo encourages the playful- 
ness you need to design the best possi- 
ble game. If all you want to do is 
make an exact copy of Asteroids, the 
benefits of Logo are less important. 

In summary: Logo is a LISP-like 
language, and a laboratory for loose, 
lifelong learning about learning.* 




This person used to 
develop applications 
for the 8086/8088 
market with the 
best of them. 





Circle 374 on inquiry card. 



August 1982 © BYTE Publications lnc 193 



Introducing Logo to Children 

Teaching Logo requires an awareness of 

different learning styles. 



# 



As computers continue to 
schools and homes, parents, teachers, 
and children face the problem of inte- 
rring the machines into their lives, 
r many, computers serve as power- 
ful instruments for personal use and 
intellectual development. Many Logo 
researchers see the potential of com- 
puters to serve as personal instru- 
ments for everyone and have been 
working toward that goal. In the pro- 
cess, they have focused on developing 
not only the Logo language, but 
things to do with the language and 
ways of thinking and talking about 
these activities. How people talk 
about what they are doing, the way 
they interact with one another, and 
the way they interact with the com- 
puter give rise to a new kind of 
culture, a computer culture. 

Seymour Papert has been the 
guiding influence in the development 
of this kind of computer culture. (See 
Mindstorms: Children, Computers, 
& Powerful Ideas [New York: Basic 
Books, 1980] for a fuller discussion of 



out the Author 

Cynthia Solomon, formerly vice-president 
of Logo Computer Systems Inc., participated 
in the development of Apple Logo. She is cur- 
rently finishing work toward her doctorate in 
education from Harvard University. 



Cynthia Solomon 
80 Ellery St. 
Cambridge, MA 02138 



Logo and computer cultures.) Papert 
created the Logo language for 
children. Although it had to be simple 
to learn, it needed a rich and easily 
expandable vocabulary. It had to 
reflect some of the important ideas in 
computer science, such as proceduri- 
zation, local and global variables, 
naming, self-referential pro- 

For many, computers 
serve as powerful 
instruments for 
personal use and 
intellectual 
development. 

gramming, etc. These are attributes 
that a language such as BASIC does 
not possess. BASIC has a reputation 
for being easy to learn; it has a small 
vocabulary of key words. But this ini- 
tial set of key words is not easily ex- 
pandable; the programmer cannot 
create new key words. This sets 
BASIC apart and makes it easy to 
learn but hard to use. The program- 
mer cannot build procedures, name 
them, and then use them to build 
other procedures. The powerful 
problem-solving strategy of breaking 
problems into smaller and smaller 



parts can only be a paper-and-pencil 
strategy in a BASIC programming en- 
vironment. The structure of BASIC 
does not support this important prob- 
lem-solving strategy. 

Once Logo was developed for 
children, Papert and his collaborators 
looked to the computer to provide an 
environment in which a person could 
learn by doing and thinking about 
what they did. A person would ac- 
tively explore the capabilities of both 
Logo and the computer by construct- 
ing objects and debugging them. The 
computer would serve as a source or 
tool for creating interesting 
mathematical objects that would 
draw upon a person's intuitive 
knowledge and that could be used in 
constructing other objects. One of 
these objects is the computer-con- 
trollable geometric entity, now wide- 
ly known as a turtle. Exploring the 
turtle's behavior leads people to draw 
upon their intuitive geometric knowl- 
edge. This knowledge does have a 
formal aspect as expressed in the area 
of mathematics known as computa- 
tional geometry. (See Turtle 
Geometry: The Computer as a 
Medium for Exploring Mathematics 
by Harold Abelson and Andrea 
diSessa [Cambridge, MA: MIT Press, 
1981] for an excellent presentation of 




Offers 

An Incredible 
Advantage 




NSS software, written specifically for Northstar' s 
ADVANTA^ outperforms any software available for 
tJ^Scom^Aers^sms. Our fully integrated accounting 
oacklqe ffiudes general ledger, accounts receivable, 
P accoums payable, inventory control and payroll- 

the first Northstar payroll package, 
whv NSS software'' If you're a Northstar dealer, it means 
deafer la^fn closing sales ofNorthsta^^ 
svstems within vertical markets. Or, if you owr i a Northstar 
compuTerTmeans greater flexibility and expanded capability 

for vour Northstar as a business tool. 
Our vertical market applications such as ; those we have 
developed for tire dealers, are *^J£2£!^ 
Let the ADVANTAGE ""talk to you with NSS unique cassette 
trainirra tapes demonstration disks and sales k.ts NSS also 
p Ses P Saler seminars and a toll free support hotline. 

That's The incredible Advantage! 

Order your Introductory 
Dealer Kit NOW 
or 



CALL TOLL FREE FOR 
MORE DETAILS 



1 -800-722-3446 




NATIONAL SOFTWARE 
SYSTEMS 

P.O. Box 510911 
Salt Lake City, Utah 84151 



the formal aspects of turtle 
geometry.) In this kind of a computer 
culture, people draw upon knowledge 
acquired in other activities? and they 
apply what they learn in the Logo 
culture to many different areas. 

My personal contributions toward 
this goal focus on what is required to 
encourage the development of com- 
puter cultures in the Logo spirit. One 
of the questions I have considered is: 
What does a teacher of Logo have to 
know? There is no one answer to this 
question. I have seen children teach 
other children about Logo. Although 
their knowledge is quite different 
from the adults who taught them, the 
children were very successful at shar- 
ing with each other a way of thinking 
and talking about computers. Per- 
haps I should pose a different ques- 
tion and ask: What are some of the 
things I think about as I teach people 

to program? 

I see much of my own development 
as a teacher as acquiring (1) a collec- 
tion of programming projects that 
make the power of programming 
techniques and concepts apparent to 
beginners; (2) a vocabulary for talk- 
ing about programming; (3) an 
awareness of different learning styles 
and strategies for building on them; 
and (4) a sensitivity to the kinds of 
resistances that keep many adults and 
children from experimenting with 
mathematical ideas. 

A Model for Introducing 
People to Computers 

When I enter a new teaching situa- 
tion, I have in mind several models of 
how to introduce people to Logo. I 
also maintain a willingness to switch 
from one model to another or even 
diverge from all of them. My primary 
goal is for people to do something 
they could not have done without a 
computer, but something that is 
familiar to them (e.g., draw a square 
or print their name all over the 
screen). I also want to think toward a 
next step and how the beginning pro- 
grammer can build on what happened 
in the first session in the following 
one. Flexibility is one of the most 
powerful ideas in this culture, but ;o 
be flexible implies having a model to 



£5 



I 

i 






V 



^ Turtto at start FORWARD RIGHT FORWARD 

50 90 50 



RIGHT 
90- - 



v 




FORWARD 50 



RIGHT 90 



FORWARD 50 



Figure 1: Building a square. With the turtle at the starting point this sequence 
can also be turned into a Logo procedure. 



,f commands will produce a square. These commands 



A 




Turtta at start 



SQUARE 









V 

SQUARE 


1 







SQUARE 



SQUARE 



Figure 2: PANES as evolved from SQUARE. The figure is made by repeating the 
SQUARE procedure four times. 



Example of a First Session 

Usually, a beginner starts by com- 
municating with a turtle. The student 
specifies an algorithm in Logo that 
causes the turtle to draw a geometric 
design (e.g., a square). This is done 
relying on intuitive mathematics in- 
stead of formula-driven mathematics. 
That is, the description to the com- 
puter is based on how the student 
would trace out the path of a square if 
the student had the same limited 
understanding as the turtle does (e.g., 
knowing how to move FORWARD or 
BACK, and turn LEFT or RIGHT). The 
sequence in figure 1 illustrates the ef- 
fect of such commands on the turtle: 
These commands can be named and 
turned into a procedure that then 
becomes a part of Logo's working 

vocabulary: 



depart from. Thus, I have a model in 
mind of paths a beginner might take 
in a first session. 

In a first session, I try to convey the 
following ideas: (1) programming is a 
process of engaging the computer in 
conversation using the vocabulary 
the computer understands; (2) the 
computer's understanding can be 
easily expanded; (3) giving meanings 
to words involves describing a pro- 
cedure to the computer and giving the 
procedure a unique name; (4) since 
procedures created by the program- 
mer can be used like any of Logo's 
i/ords, they can be incorporated into 
Jther procedures; (5) making pro- 
cedures entails a process of debug- 
ging; and (6) pretending to be the 
computer or the turtle helps in design- 
ing and debugging programs. 

Thus, in a first session, a person 
might try out turtle commands like 




FORWARD and RIGHT. The student 
would then make a design (create a 
procedure), give it a name, enter that 
name into Logo's active vocabulary, 
and use that new procedure in the 
construction of others. The teacher, 
at the same time, is also learning from 
this experience by thinking about the 
effect of different actions on the turtle 
and, with concrete examples and ad- 
vice, helping the new Logo program- 
mer arrive at a greater understanding 
of Logo. The teacher also has a 
chance to rethink the examples 
presented to the student and develop 
new approaches and a deeper 
understanding of the learning pro- 
cess. (See Apple Logo: Introduction 
to Programming through Turtle 
Graphics by Cynthia Solomon 
[Pointe-Claire, Quebec: Logo Com- 
puter Systems Inc., 1982], which is 
included in the Apple Logo package.) 



TO SQUARE 
FORWARD 50 
RIGHT 90 
FORWARD 50 
RIGHT 90 
FORWARD 50 
RIGHT 90 
FORWARD 50 

END 

The TO informs Logo that a pro- 
cedure is being created. SQUARE is 
the name of the procedure. END 
marks the end of the text of the pro- 
cedure. Now the programmer might 
use the SQUARE procedure to pro- 
duce a new design like the one in 
figure 2, created by PANES, which 
follows: 

TO PANES 

SQUARE 

SQUARE 

SQUARE 

SQUARE 

END 




The beginner gets an immediate 
sense of the relationship between pro- 
gram and goal and rapidly elab- 
es this into an understanding of 
_ relationships among goals and 
subgoals, procedures and subpro- 
cedures (e.g., the programmer learns 
that PANES is made by running the 
SQUARE procedure four times). The 
beginner is involved in debugging, in 
learning by doing and thinking about 
the orocess. (For example, the pro- 



grammer may create a square that 
doesn't close. Listing the procedure, 
the student'eatches a bug in the input 
to FORWARD when drawing the last 
side of SQUARE; it should be 
FORWARD 63, not 36.) The program- 
mer may use anthropomorphism or 
identification as a debugging aid 
(e.g., pretending to be the turtle 
causes a person to walk in the same 
path as the turtle would, and it also 
understand the turtle's 



Whitesmiths, Ltdi 



is now shipping Rascal Compilers 
for 10 (count fern ten) different 
operating system families: 



Bis-tr 



CP/M.CDOS 



Uris/B80 



RT-tl 



RSX-HM, RSTVE, IAS 



Idra/RH. UNIX/V6t UNIX/V7 



VERSAdt* 



ldris/S68K 



VMS 



UNIX/32V' 



•Available Ml 



form only. 



-otfBcil 
VAX. and VMS 



• C?fM it a ti 
it ot Digital 



Au'il^entarions support the full ISO Pascal (Level 0). 
All pa sThe T™ maman Validation Suite with flying colors. 

Z S^:^ co the 

SETS "o^ATd you ca? *ux in modules wntten 
in orher languages, like assembler or 

In fact a C Compiler comes with every Pascal Compiler 
we sell. Prices start at $950.00. Write or call. 

Au ,cU, Fawnray Pty S^SST 

0632 733131 



iWhitesmiths< 



p ar ,wav Towers. * 485 US Roure i So.. IseLn, New ^ 08830 (201) 750-9000 Telex: 6455,2 



behavior). Thus, in a first session, a 
programmer writes a procedure that 
then becomes part of Logo's working 
vocabulary. In doing this, the pro- 
grammer achieves a sense of the 
power available to influence the en- 
vironment and a sense of accomplish- 
ment and creativity. 



A Model of Learning Styles 

I have observed that children take 
over the computer in different ways. 
They show different learning styles, 
different paths into the computer 
work. Undoubtedly, this bare state- 
ment is true for all learning. What is 
special here is that the flexibility of 
the computer allows the process to go 



In working with 
computers, many paths 

lead to the same 
goal. Moreover, many 
equally great goals 

can be pursued. 



further and become more explicit. In 
working with computers, many paths 
lead to the same goal. Moreover, 
many equally great goals can be pur- 
sued. This gives children the oppor- 
tunity to express themselves and ex- 
plore their own intellectual styles. 

Although each child has a unique 
intellectual personality, and the use 
of the computer allows us to respect 
it, we do observe some similarities. I 
shall describe three distinct learning 
styles that have emerged, not only 
from my own work with young 
children, but from work completed 
by Dan Watt as part of the M1T- 
Brookline Logo Project. 

The first learning style I call the 
planner. This child might build struc- 
tured programs from the top level 
down or from the bottom level up, 
but always from a coherent for- 
mulated plan. 

A second learning style is the 
macro-explorer. This student likes to 
mess about with subprocedures or 
building blocks to arrive at a product. 



o 



Q 



O 



Q 



D 



BALLOON 



6 




Rgui* 3: CB as evolved from BALLOON. Using techniques developed 
cedure BALLOON. 




4: FLOWER, also designed by 
Janet is created by using the procedure 
CB, but turning the turtle 51 degrees and 
repeating the procedure seven times. 

rather than starting out with a 
specific goal. In this case, the learner 
is intent on exploring the effect of the 
particular building block. Therefore, 
the result is open-ended. 

Finally, some learners have to ex- 
plore their environment on a micro- 
level before they can establish pat- 
terns of planning or directed explora- 
tion. These micro-explorers are often 
the most timid learners, doing such 
things as assuring themselves that 
FORWARD 100 is the same as 
FORWARD 1, FORWARD 9, 
FORWARD 11, FORWARD 23, and 
FORWARD 56. Others might exhibit 
this conservative, gradual explora- 
tion by using the same numbers as in- 
puts to FORWARD and RIGHT, or by 
repeating the same commands over 

and over. 

Any child might use all three of 
these learning styles. In an initial ses- 
sion, I might try to "plant seeds" for 
all three. For example, I would en- 
courage a beginning student to drive 



the turtle around the screen in a series 
of direct commands with no goal 
other than to understand the turtle's 
behavior. But in the same initial ses- 
sion, I would suggest some concrete 
goal, such as making the turtle walk 
in a square or, perhaps, having 
placed some squares on the screen, I 
would ask the child to make the turtle 
touch them. In this, I elicit primarily 
a micro-explorer style with some hint 
at a planner style. 

I facilitate a macro-explorer style 
by seizing on something interesting 
the child has just done and suggesting 
"teaching" it to the computer. Thus, I 
encourage the child to form pro- 
cedures, thereby turning the turtle 
meanderings into repeatable pro- 
cedures or building blocks. Using 
these procedures, the child can create 
more unanticipated designs. 

I would encourage children to fol- 
low a planner style of learning by 
asking them to choose a design from a 
collection of procedures already 
familiar to them or by asking them to 
make a design of their own and use 
these as procedures. Being sensitive to 
these styles of learning and their 
natural intermixing helps to develop 
strategies for guiding the children. 
These styles of learning are exhibited 
by novices to programming in Logo 
regardless of their age. 

Using Procedures 

Janet, a 6-year-old, had previously 
made a square. In constructing CB 
(see figure 3), she used similar tech- 
niques. She made the turtle draw 
BALLOON and then turn RIGHT 90 
repeatedly until it had walked in a 
complete path and returned to the 
position and heading it started from. 



Janet was not aware of this as a 
generalization, but her specific ex- 
periences led her to believe that these 
two actions repeated over and over 
resulted in the turtle making a com- 
plete trip, i.e., return to its starting 
state. 

Next, FLOWER (see figure 4) was 
made by running CB, turning the tur- 
tle 51 degrees, and repeating these 
two actions six more times. Why 51 
degrees? Well, Janet just happened to 
pick that number. Why did 51 have 
that effect on CB? The answer lies in 
the fact that turning the turtle 51 
degrees seven times results in a total 
turning of 357 degrees, which is very 
close to a complete rotation of 360 
degrees. In this situation, Janet was 
satisfied; for her purposes, the design 
was complete. 

A more interesting question is: 
How did she know to probe the turtle 
environment in this way? She knew 
certain facts about turtles and turtle- 
directed procedures that she had 
gained from her experiences with the 
turtle. For example, if the turtle 
draws something and doesn't return 
to its starting state, repeat the pro- 
cedure. Something interesting will 
happen and eventually the turtle will 
come back to where it was initially. 
On the other hand, if the turtle does 
return to its starting state when it 
makes a design, change the turtle's 
heading and run the program again. 
In other words, Janet did not need the 
teacher's knowledge about the power 
of 360 degrees. Rather, she needed the 
idea of the total turtle trip that, trans- 
lated into intuitive knowledge, told 
her to keep repeating an action until 
the turtle returned to its starting state. 
Janet's learning style in this project 




LOW 



Akl W« 

8000-2-$2875 8000-15 - $3860 



9501 — $1200 

|«1 



ma 



F-10P-$1380 
OAT 

DS120 — $595 



F-10S-$1525 
UTM 

OS180— $1259 







JMON WITH OBAPMWS* 

MX70 - $289 »£■£,- ^2 

MX80FT - $519 atSm ^» 

GRAPHIC ROM - $69 RS232 - $69 



sag?*)? 




HAYS - MICROMOOEM 
HAYS — SMARTMODEM 
Penni- 300/1200 (21 2A) 



$290 
$229 
$795 



Advantage — 

8023 — 



$159 

$489 M "^10 — $2350 




120 -$869 135 -$689 
TKLHVIOKO 

912-S669 950 -$915 
Tl 

810 — $1240 820 --$1795 

AH Major Brands — SCALL 

ITAItt HAIIOWAf- ^ 

$169 Music System — S4Z9 

O KID ATA 

M80-$320 IVoS^SS 
M82A - $450 SL250 - $4200 

M83A-S699 M84-$1059 



289— $2129 

AN Prices Subject To Change 



EXP0TEK 

272aW:Windrose» Suite 3t 
" Phoeniiei:Arizona:8502a- 






5: Initial design for the BEAR pro;- 
«... starting with the design on the top, 
Lisa added another circle to create an 
evolving design. 



Figure 6: Completed BEAR. Repeating the 
procedure to create the head, Lisa 
modified her learning style and created 
this design. 



and many others was that of a macro- 
explorer. 

The BEAR project was initiated by 
Lisa, an 11-year-old from an inner- 
city' school close to MIT. Lisa ap- 
proached the project as a micro- 
explorer. Although she had previous- 
ly written several procedures, Lisa 
showed great resistance to using them 
as building blocks. For example, after 
constructing a square procedure, she 
tried to reconstruct a square, as other 
micro-explorers might, by telling the 
turtle to move in incremental steps, 
e.g., FORWARD 1 1 , FORWARD 9, etc. 

I ' asked her to play with circles 
using CIRCLER or CIRCLEL pro- 
cedures, which require the radius as 
input. I encouraged her to try using 
circles of different sizes. She made the 
circles shown at the top of figure 5. I 
then encouraged her to do the same 
thing on the other side of the larger 
circle, as shown at the bottom of figure 
5 When asked what it reminded her 
of, she thought it looked like a bear's 
head. She then added the eyes and 
used the head for the body (see figure 
6). In so doing, I helped her shift 
modes from micro-explorer to plan- 
ner. , 
This project illustrates clearly that 

many ways can be used to arrive at a 



particular goal. Picking a starting 
state for the turtle influences the con- 
struction of the procedure. Whether 
the job is thought of in terms of sub- 
procedures or whether the design is 
first created by the student (whether 
by the mind's eye or on paper) and 
the turtle is made to trace the path 
etched on paper has important conse- 
quences in how the project is 
developed. 

If the design is to be taught to the 
turtle by breaking it up into parts, the 
programmer has to decide what 
building blocks are needed. This 
BEAR has several interesting features. 
It is made entirely of circles. The head 
and the body are identical. The proj- 
ect is easily changed to focus only on 
the head or to create, with minor 
modifications, a different animal (see 

figure 7). 

Both Lisa and I benefited from this 
project. She became a more confident 
problem-solver and tended to move 
away from her micro-explorer style 
of probing. She used a powerful 
mathematical idea, symmetry, in a 
playful but personally meaningful 
way, and used it throughout her proj- 
ect. L on the other hand, added to my 
collection of programming projects. 
We both followed our intuition. I was 





0 



Figure 7: Other animals created by modifying the BEAR procedure. 






o 



Q 



O 



O 



D 



6 



Figure 8: Other designs created by Lisa using Logo. 



£^ hopeful that when Lisa used circles as 
^ building blocks she would discover 

some lovely thing to make with them, 

and she did. 

A Model of Teaching and 
Learning as Debugging 

Turtle geometry is but one part of 
the Logo computer culture. Other 



elaborating the descriptions through 
debugging (testing procedures in real 
situations), getting concrete feedback 
on these actions, and adjusting the 
initial descriptions to take into ac- 
count these results, a person's ex- 
ploration in Logo will be furthered. 
The process of procedural description 
and debugging might be seen as a 
dynamic process of assimilation and 
accommodation, of making theories 
and revising them as a result of ex- 
perience and knowledge, but doing 
this playfully as an enjoyable activity 
involving one's whole self. 



areas of activity have been explored 
and many more are waiting to be ex- 
plored. Turtle geometry, however, 
serves to illustrate key characteristics 
of the culture, in particular, the idea 
of exploring an environment and the 
objects in it by manipulating them 
through a complex of interactions 
based on procedural descriptions. By 



Sharing in this learning process is a 
self -empowering experience for all 
participants. A different way of look- 
ing at learning and teaching emerges, 
one based on the Piagetian idea that 
even very young children have 
theories. Thus, teaching and learning 
are not a matter of being wrong or 
right, but rather a process of debug- 
ging. Learning and teaching are inter- 
twined and become a process of de- 
veloping debugging aids as knowl- 
edge gaps are discovered and filled in. 
The persons using computers are cast 
in the role of both student and teacher 
as they actively participate in devel- 
opment of the computer culture. 
They contribute to its richness and 
enrich their own lives. ■ 






Circle 386 on inquiry card. 



-s 



A Beginner's Guide to Logo 



Logo is not just for kids. 



Harold Abekon 
laboratory for Computer Science 
MTTNE43-805 
Cambridge, MA 02139 



In the 1960s, computers were very 
expensive and didn't have much 
memory. A computer such as the 
IBM 1620 could store a maximum of 
24K bytes (or 60,000 decimal digits). 
Even the largest research computers 
could manage only six times that 
much. Since programs had to use 
memory sparingly, computer lan- 
guages were designed to reflect this 



Languages had to be simple tor tne 
computer, even at the expense of be- 
ing cumbersome for the programmer . 
For example, to help the compiler 
keep track of memory, most pro- 
gramming languages insisted on a 
close tie between the names used in a 
program and the storage cells in the 
computer memory. As a conse- 
quence, the only kinds of data objects 
that could be directly named and 
manipulated by program operations 
were those that could be stored in a 
single cell. The only data structures 
available were those whose size could 
be prespecified at compile time. Most 
languages also required the program- 



About the Author 

Harold Abelson. a professor of Computer 
Science and Education at the Massachusetts In- 
stitute of Technology, is also the author of 
Logo for the Apple II and Apple Logo, in- 
troductions to the logo programming 
language, published by BYTE/ McGraw-Hill 
Books. 



mer to include bookkeeping "declara- 
tion" statements, or adhere to other 
restrictions on the use of names, to 
make it easy for the compiler to deter- 
mine what kind of storage each vari- 
able required. (For example, some 
languages required names beginning 
with I or J to refer to integers, arrays 
had to be declared together with their 
size, and defined functions had to 
have a name beginning with FN, 
followed by a digit.) 

The concern for conserving mem- 
ory permeated not only the language, 
but the computer system as a whole. 
For instance, if the system included a 
program editor, editing a line of code 
required the programmer to abort the 
program, load the editor, read a file, 
perform the edit, write a new file, exit 
the editor, recompile the edited code, 
and reload the program. All this 
because the editor and the language 
could not fit into main memory at the 
same time. 

The languages of the 1960s 
flourished with the personal com- 
puters of the 1970s, which, although 
no longer very expensive, still did not 
have much memory. As personal 
computers became more popular, 
people began to confuse the idea that 
a language that is simple for a com- 
puter would also be simple for peo- 
ple. ("BASIC has only a few primi- 
tives; therefore, it must be easy to 
learn.") Some people even rational- 
ized that the cumbersome features of 



such languages were actually advan- 
tages. ("Having to declare the data 
types of variables makes you organ- 
ize your programs better." "If it's too 
easy to edit programs, you won't 
write them carefully in the first 
place.") And when educators ex- 
plored the potential uses of com- 
puters, they often accepted the 
drawbacks of these languages as an 
integral part of programming. 

Over the past 12 years, the Logo 
Group at MIT under the direction of 
Seymour Papert, along with col- 
leagues at a few universities and re- 
search centers around the world, has 
taken a different approach to educa- 
tional computing. Rather than accept 
the limitations of affordable com- 
puters (by the standards of those 
days), we worked with the largest re- 
search computers available. The sys- 
tem we used, called Logo, is essential- 
ly a dialect of LISP, a powerful lan- 
guage developed for research in arti- 
ficial intelligence, and used a great 
deal of memory compared to stan- 
dards of the 1960s. (Some of the im- 
portant linguistic aspects of Logo are 
discussed in "Why Logo?" by Brian 
Harvey in this issue on page 163. For 
a more general perspective on LISP, 
see "An Overview of Lisp" by John 
Allen in the August 1979 BYTE, page 
10.) 

In working with Logo, we've dis- 
covered some important things. A 
computer language can be both sim- 



Circie 138 on inquiry card. 



Turtle starts 



FORWARD 100 



RIGHT 90 



■J7 





FORWARD 1 50 
LEFT 45 



BACK 1 00 
LEFT 45 



PENUP 

FORWARD 50 
PENDOWN 
FORWARD 50 
HIDETURTLE 



Hgur. 1: Moving tne turtle wnn a nmp* sequence of Logo command.. FORWARD mooes *. turtle in the diction it is facing. 
RIGHT and LEFT -rotate the turtle. PENUP and PENDOWN ram and tower the pen-the turtle leaves a trace when ft moves with the 
pen down* 



pie and powerful at the same time. In 
fact, these two aspects are comple- 
mentary rather than conflicting 
because it is the very lack of ex- 
pressive power in primitive languages 
such as BASIC that makes it difficult 
for beginners to write simple pro- 
grams that do interesting things. 
More important, we've found that it 
is possible to give people control over 
powerful computational resources, 
which they can use as tools in learn- 
ing, playing, and exploring. This has 
often required us to go beyond ordi- 
nary considerations of computer-lan- 
guage design to create compelling im- 
ages of how computation can provide 
a perspective for reformulating tradi- 
tional ideas from science and mathe- 
matics to make them more accessible, 
more in tune with intuitive modes of 
thought. In our research at MIT, 
working with preschool, elementary, 
junior high, high school, college stu- 
dents, and with their teachers, we've 
used Logo to introduce programming 
and the computational perspective at 
all levels. In this article, I'd like to 
show you what it's like to program 
using Logo, a simple but powerful 
system, enabling you to explore with 
a computer. 



Drawing with the Turtle 

Let's begin with a look at some tur- 
tle graphics. The turtle is a small tri- 
angular pointer on the screen that re- 
sponds to a few simple commands. 
FORWARD moves the turtle in the 
direction it is facing a given number 
of units. If you type the Logo com- 
mand FORWARD 50, the turtle will 
respond by moving forward 50 turtle 
steps (about 1/4 the height of the 
screen). RIGHT rotates the turtle 
clockwise a given number of degrees. 
BACK and LEFT cause the movements 
opposite to FORWARD and RIGHT. 
The turtle also carries a pen, which 
leaves a trace of its path on the screen 
as it moves while the pen is down. 
The commands PENUP and 
PENDOWN make the turtle raise and 
lower the pen. Figure 1 shows the 
result of a simple sequence of Logo 
commands. 

It's lots of fun to make drawings by 
using these commands (together with 
a few others, such as CLEARSCREEN, 
which erases the screen). But in order 
to really make progress, you have to 
teach the computer some new words. 
For instance, you can teach the com- 
puter that the turtle can draw a 
square by repeating this sequence 



four times: go FORWARD 50 steps, 
turn RIGHT 90 degrees. The Logo 
commands would be: 

TO SQUARE 

REPEAT 4 [FORWARD 50 RIGHT SO] 
END 

SQUARE is an example of a Logo 
procedure. The first line (signaled by 
TO) specifies the name of the pro- 
cedure. This procedure happens to be 
called SQUARE (since that's what it 
draws), but you could have called it 
anything. The rest of the procedure 
(the procedure's body) specifies the 
list of instructions to be carried out in 
response to the command SQUARE; 
the word END indicates the end of the 
definition. 

Once defined in this way, SQUARE 
becomes part of the computer's 
vocabulary. Whenever you give the 
command SQUARE, the turtle will 
draw a square. 

Procedures with Inputs 

An important difference exists be- 
tween SQUARE and FORWARD. 
SQUARE always draws a square 50 
steps on a side. But FORWARD is more 
versatile; it takes an input that deter- 
mines how far the turtle should 



90 AuKust 1982 & BYTE Publications Inc 




Photo 1: A design created by a simple one-line Logo program that makes the turtle 
repeat these steps six times: go FORWARD 20 units, turn RIGHT 60 degrees, and draw 
a square of size 75 units. 



move. You can change the SQUARE 
procedure so that it also takes an in- 
put that determines the size of the 
square to be drawn. For example: 

TO SQUARE :S1ZE 

REPEAT 4 [FORWARD :SIZE RIGHT 90] 
END 

You use SQUARE just as you would 
any Logo command that takes an in- 
put. That is, to draw a square with 
100-step sides, you type: 

SQUARE 1 00 

To draw a square with 50-step sides, 
you type: 

SQUARE 50 

The definition of SQUARE illustrates 
the general rule for defining pro- 
cedures that take inputs. You choose 
a name for the input and include it in 
the procedure title line preceded by a 
colon. Then you use the input name 
(with the colon) in the procedure 



body wherever you would normally 
use the value of the input. 

Since a procedure, once defined, 
becomes just another word the com- 
puter "knows," you can use proce- 
dures as parts of the definitions of 
other procedures. Here's a procedure 
that produces a design by repeatedly 
going forward, turning, and drawing 
a square (see photo 1): 

TO DESIGN 

REPEAT 6 [FORWARD 20 
RIGHT 60 SQUARE 75] 
END 

Simple Recursive Procedures 

This next procedure also draws a 
square of a specified size: 

TO SQ :SIZE 
FORWARD .SIZE 
RIGHT 90 
SQ :SIZE 
END 

Although SQ and SQUARE both draw 
squares, they behave very differently. 



Instead of drawing a square and then 
stopping, SQ makes the turtle retrace 
the same path over and over, or until 
you tell the computer to stop. Here is 
why this happens. When you give the 
command: 

SQ 100 

the turtle must go FORWARD 100, 
RIGHT 90, and then do SQ 1 00 again, 
and so on, and so on. 

Add a second input to SQ and you 
obtain a procedure called POLY, 
which repeats over and over the se- 
quence: go FORWARD some fixed 
distance, and turn RIGHT some fixed 
angle. The procedure takes as inputs 
the size of each FORWARD step and 
the amount of each turn: 

TO POLY :SIZE .ANGLE 
FORWARD :SIZE 
RIGHT :ANGLE 
POLY :SIZE :ANGLE 
END 

To use the POLY procedure, type the 
word POLY, followed by specific 
values for the inputs: 

POLY 60 1 44 

Figure 2 shows some of the many dif- 
ferent shapes obtained by calling 
POLY with various inputs. 

Recursion is the programming 
word to describe the ability to use a 
procedure as part of its own defini- 
tion. SQ and POLY are recursive pro- 
cedures of a very simple form — they 
merely repeat an unchangeable cycle 
over and over. But recursion is a 
much more powerful idea and can be 
used to obtain much more compli- 
cated effects. To take just a small step 
beyond the purely repetitive kind of 
recursion, consider: 

TO POLYSPI :SIZE -.ANGLE 
FORWARD :SIZE 
RIGHT :ANGLE 
POLYSPI :SIZE + 3 :ANGLE 
END 

Giving the command 

POLYSPI 1 1 20 
leads to this sequence of turtle moves: 





POLY 50 1 20 



POLY 50 1 60 





POLY 60 80 



POLY 80 1 44 



Figure 2: These shapes are all drawn by the three-line Logo program POLY, wntcn nas 
the turtle go FORWARD some fixed amount turn RIGHT some fixed angle, and repeat 
this over and over. The figures drawn by POLY always close, but the number of sides 
that must be drawn before the figure closes depends upon the ANGLE input to the pro- 
cedure. 







Figure 3: Figures created using POLYSPI. A variant of POLY (see figure 2), the program 
takes advantage of recursion to increase the turtle's FORWARD step each time the pro- 
cedure calls itself. The result is a polygonal spiral As with POLY, varying the ANGLE 
input changes the symmetry of the pattern. 



FORWARD 1 
RIGHT 1 20 
FORWARD 4 
RIGHT 1 20 
FORWARD 7 
RIGHT 1 20 
FORWARD 1 0 
RIGHT 1 20 



which produces a triangular spiral in 
which each of the sides is three steps 
larger than the previous side. Figure 3 
shows some of the shapes generated 
by the POLYSPI procedure. As a 
variant, you can replace the 
FORWARD step in POLYSPI by a com- 
mand that draws a square: 

TO SP1NSQUARE :SIZE :ANGLE 
SQUARE :SIZE 
RIGHT .ANGLE 

SPINSQUARE :SIZE + 3 '.ANGLE 
END 

The result of running 

SPINSQUARE 1 1 0 

as shown in figure 4 is a sequence of 
squares of increasing size starting 
with a square of one-step size. Each 
square is three units larger than the 
previous one and rotated from it by 
10 degrees. The procedure keeps run- 
ning and the squares keep growing 
until you tell Logo to stop. You can 
also modify the procedure so that it 
stbps when the squares become larger 
than a certain size (e.g., 100 steps) by 
including a stop rule: 

TO SPINSQUARE :SIZE :ANGLE 
IF :SIZE > 100 THEN STOP 
SQUARE :SIZE 
RIGHT :ANGLE 

SPINSQUARE :SIZE + 3 : ANGLE 
END 

Part of the power of recursion is the 
fact that such simple programs can 
lead to such varied results. 



An Environment for Exploring 

As you can see from the examples 
presented so far, it is very easy to get 
started programming with turtle 
graphics. This is partly because of the 
subject matter of turtle graphics. The 
basic commands have simple, visible 
effects. At the same time, turtle 
graphics is an incredibly rich area for 



94 August 1982 i BYTE Publications Inc 



• csts • printers « TgLgygnrragg 



MIC ROM AIL'S 

GOT IT ■ ! 



★ DIABLO ★ 



• 630 RO 

• 40 CPS 



• 630 API-RO 

"INTRODUCTORY OFFER" 



• 620 RO 

"INTRODUCTORY OFFER" 



siaoooo $1649.00 $1149.00 

91077iUV 'TAILORED TO YOUR • 25 CPS 



630 KSB . . ...CAL L 

NBC 

• 7700 SERIES 

• 3500 SERIES 

Call for Our LOW PRICES 



• SERIAL RS232C 



GtfJME 

"ON SITE WARRANTY" 

• SPRINT 9/45 

• SPRINT 9/55 

Call for Our LOW PRI CES 

TELEVLDEO 



LA 34 DA $899.00 

"LA 120 REPLACEMENT' 

LA 12D .... NEW! ....$1599.00 

VT100 $1399.00 

VT101 CALL 

VT131 $1499.00 



DEC IA.10O 

•OUALMOOe 
MATRIX PRINTER 



AN AO EX 



910 $569.00 

912 $689.00 

920 $725*00 

950 $909.00 

NEW! CALL 

3M 

ER* 

•7TK* - TIME SHARE 
-COMPUTER TER MINAL 

TEXAS INSTRUMENTS 



DP 9500/9501 $1125.00 

DP 8000AP. $749.00 

DP 9620A NEW! 

6000 NEW! CALL 



"PORTABLES SPECIAL"^ 

T.L 745 $1399.00 

T.L 743XSR . . $849.00 



$999.00 I 



•10/3 $1299.00 

(includes upp«r/low«i com option) 

$10/2 VFC/CF $ 1499.00 

(include* u/1 cas«. lorms 
control & comprtsw<i pnnt) 



VT100 / TELZVXDEO 

GRAPHICS OPTION 

AS LOW AS 

$999.00 



CALL TOLL FREE (800) 854-6028 i 



SAVE ON 
PREPAID 
ORDERS 



we 



MASTERCARD 
VISA 



CO.D. 
REQUIRES 
15% DEPOSIT 



SHIPPING IS 
FREIGHT 
COLLECT 



INTERNATIONALLY 




Figure 4: SPINSQU ARE is a simple recur- 
sive pr ogr am that draws a square of a 
given size, rotates it, increases the size, 
and continues the process. 



exploration in which even simple pro- 
grams can have unexpected, often 
beautiful results. The small amount 
of Logo we've seen so far is enough to 
support weeks of activities in pro- 
gramming and mathematics, explor- 
ing such questions as "How does the 
shape of a POLY figure depend on the 
angle input?" or "Why do so many re- 
peated programs produce symmetric 
designs7" or simply creating beautiful 
patterns. Andrea diSessa and I 
describe some of the mathematics 
that arises from investigating this 
computer-based approach to geom- 
etry in the book Turtle Geometry: 
The Computer as a Medium for Ex- 
ploring Mathematics (Cambridge, 
MA: MIT Press, 1981). 

In addition to the subject matter, 
the system interaction also plays a 
crucial role. When people explore 
using Logo, they are continually 
defining new procedures and modify- 
ing old ones. A typical compiler- 
oriented system, in which changing a 
definition requires switching back 
and forth among separate editors, 
compilers, and linking loaders, is in- 
appropriate for this kind of activity. 
Much of the effort in implementing 
Logo has gone into providing a pro- 
gramming environment that makes it 
easy to define and modify proce- 
dures. The Texas Instruments and 
Apple implementations of Logo in- 
clude integrated screen editors. G-v- 




Circle 40 on inquiry card. 



CP/M 
OWNERS'. 

MENU PROGRAMMING 
LANGUAGE 



MPL 



ONLY $175 

A revolutionary software 
package that simplifies 
programming while increasing 
the versatility of personal 



• Runs on CP/M. 

• Can be used without any special 
training in computer programming. 

• Displays data menu-style. 

• Organizes data by connecting 

menus together. 

• Utilizes menus to drive program 




HARD DISK 
BACKUP 



THE BACKFIELD 

ONLY $150 

A software package that backs 
up hard disks to floppies 
without special hardware. 

• Runs on CP/M. 

• Backs up hard disks to floppies 

and other disks. 

• Can back up all files or selected 

files. 

• Backs up only those sections of 

the disk that are in use. 

• Automatically selects files that 
have changed since last backup. 



AVAILABLE NOW! 

(408)395-0838 

0* SENO CHECK, TO: 

mm 

Audio light, Inc. 

146 Towrr Terrace, Suite 4- 
Los Gates, CA 95030 

MPL Requires a 24 X 80 CHTT 
If All software is supplied on 

8~singledensity diskette for CP/M Z2- 

•California residents add 6% for sales tax. 

Dealer/OEM Inquiries Welcome*- 

MPL is a trademark of Audio Light Inc; 
CP/M is a trademark of Digital Research* 





Audio Light 



1 



ing the command TO or EDIT activates 
the screen editor, with the appropri- 
ate procedure definition ready to be 
modified. A single keystroke installs 
the new definition as a Logo pro- 
cedure. 

The success of turtle geometry is 
due in large part to the fact that in de- 
signing it we did not view ourselves 
solely as mathematicians and educa- 
tors attempting to invent a new ap- 
proach to geometry, nor as computer 
scientists attempting to implement a 
system. Instead, we tried to take both 
perspectives, continually tailoring the 
computer system to fit the mathe- 
matics, and vice versa. 

Outputs 

We've already seen how to define 
procedures that require inputs. You 
can also make a procedure output a 
value. For instance, the following 
procedure takes two numbers as in- 
puts and outputs their average: 

• 

TO AVERAGE :X :Y 
OUTPUT (:X 4- :Y) / 2 
END 

The result returned by AVERAGE can 
be examined directly (using PRINT) or 
used in turn as an input for other op- 
erations: 

PRINT (AVERAGE 2 3) 
2.5 

PRINT (AVERAGE 1 2) + (AVERAGE 3 4) 
5.0 

PRINT (AVERAGE (AVERAGE 1 2) 3) 
2.25 

Note the Logo convention of using 
parentheses to group a procedure 
with its inputs. Although parentheses 
are almost always optional in simple 
Logo lines, it is a good idea to include 
them because they make the lines 
easier to read. 

Programming with Procedures 

A Logo program is typically struc- 
tured as a cluster of procedures. 
These procedures pass information 
among themselves by means of inputs 
and outputs. The advantage of this 
kind of organization is that it sepa- 
rates the program into manageable 
pieces, as each procedure can be sim- 
ple in itself. Even in a complex pro- 
gram, it is unusual to have an in- 



dividual procedure that is more than 
a few lines long. In addition, the inte- 
grated Logo editor and the general in- 
teractive nature of the Logo system 
enable you to define and test in- 
dividual procedures separately. 

To illustrate procedural organiza- 
tion, let's design a simple game that's 
played as follows. The computer 
chooses at random a "mystery point" 
on the screen, and asks the player to 
make successive LEFT and FORWARD 
moves with the turtle. Before each 
move, the computer prints the turtle's 
distance from the mystery point. The 
goal is to get the turtle very close to 
the point in as few moves as possible. 
Here's a transcript of the game in ac- 
tion. The computer's responses are 
printed in italics to distinguish them 
from what the player types: 

DISTANCE TO POINT IS 67.6 
TURN LEFT HOW MUCH? 
0 

GO FORWARD HOW MUCH? 
25 

DISTANCE TO POINT IS 90.25 
TURN LEFT HOW MUCH? 
180 

GO FORWARD HOW MUCH? 
50 

DISTANCE TO POINT IS 47.38 



And finally: 

DISTANCE TO POINT IS 12.08 
YOU WON IN 1 1 MOVESI 

The heart of the program is a pro- 
cedure called PLAY. This takes as in- 
put a number M, which indicates the 
number of moves so far. PLAY first 
checks to see if the player has won. If 
so, it prints a message saying how 
many moves have occurred, and 
stops. Otherwise, it asks the player to 
make a move, and goes on to the next 
round, with M increased by 1: 

TO PLAY :M 

TEST CHECKWIN? 

IFTRUE (PRINT [YOU WON INI 

:M [MOVESU) 
IFTRUE STOP 
MAKEMOVE 
PLAY :M + 1 
END 

The PLAY procedure is simple in itself 



because it delegates the problems of 
testing for wins and making moves to 
the procedures CHECKWIN? and 
MAKEMOVE. 

Here's MAKEMOVE, which prompts 
the user for angles and distances, and 
moves the turtle correspondingly. It 
uses a subprocedure READNUMBER, 
which returns a number typed in at 
the keyboard: 

TO MAKEMOVE 

PRINT {TURN LEFT HOW MUCH?] 

LEFT READNUMBER 

PRINT [GO FORWARD HOW MUCH?] 

FORWARD READNUMBER 

END 

To check for a win, the program 
must test whether the turtle's position 
is close to some predetermined point 
(e.g., 20 steps). The Logo primitive 
operations XCOR and YCOR return 
the turtle's x and y coordinates. Well 
suppose that the x and y coordinates 
of the hidden point are given by vari- 
ables XPT and YPT. If you assume 
there is a procedure DISTANCE that 
returns the distance between two 



points, the CHECKWIN? procedure 
can be written as follows: 

TO CHECKWIN? 

MAKE "D DISTANCE XCOR YCOR 

:XPT :YPT 
(PRINT [DISTANCE TO POINT IS] 

:D> 

IF :D < 20 OUTPUT "TRUE 

OUTPUT "FALSE 

END 

CHECKWIN? returns as its value either 
TRUE or FALSE, which is the result 
that is tested by PLAY to determine 
whether the game is over. Observe 
also the use of the MAKE statement to 
assign values to variables. In this 
case, D is used to designate the 

distance. 

W^HB^B w^P^V • 

Here is the procedure for comput- 
ing the distance between two points, 
as the square root of the sum of the 
squares of the coordinate 



TO DISTANCE :A :B :X :Y 

MAKE "DX :A - :X 

MAKE "DY :B - :Y 

OUTPUT SORT (:DX*:DX + :DY*:DY) 

END 



THE MULTI-USER FRIENDLY MEMORY BOARD WITH 




B256 Kilobytes 
6 MHz with no weight 
states — Most Processors 

□ Designed to operate in any 
S-100 System IEEE or Non- 
IEEE 

□ 16-bit addressing option: 
Powerful Macrotech Mem- 
ory Mapping (M 3 ) bank se- 
lect architecture allows 
each 4K block of the 16 bit 
(64K) logical addresses to 
be dynamically translated 
to any 4K block of the 256K 
on board physical memory. 

□ 24-bit direct addressing 
option 



□ "Educated" cycle control 
module generates all tim- 
ing on board asyn- 
chronously for maximum 
access speed and uniform 
operation 

□ Comprehensive technical 
manual with complete in- 
stallation guide and source 
listings forMP/M ir* and 
"Virtual Disk" solid state 
disk applications. 

□ DMA operation fully sup- 
ported in strict accordance 
with IEEE 696 standard. 

□ 8/16 data transfer protocol 

□ Parity error detection 



□ Multilayer board and bus 
signal filtering for noise- 
free operation. 

□ Full one year warranty 

If you wisn. sand a check or money 
order for $1 .379 (in California add 6% 
saiea tai where applicable). 

Manual available at $25.00 each 
refundable with order. 

'Registered Trademark of Digital 
Research Corp. 

OEM & Dealer inquiries invited 



MACROTECH International Corp.. 
22133 Cohasset St.. Canoga Park. 
California 91303 

(213) 887-5737 



Now you need a procedure 
the game: 



TO GAME 
CLEARSCREEN 

MAKE "XPT RANDOMCOORD 
MAKE "YPT RANDOMCOORD 
PLAY O 
END 

This clears the screen, assigns values 
(chosen at random) to the mystery- 
point coordinates XPT and YPT, and 
calls PLAY with an initial M equal to 
zero. 

The following procedure, used to 
select random coordinates, returns a 
random number between — 75 and 
+ 75. It works by calling the Logo 
primitive RANDOM to obtain a ran- 
dom number between 0 and 150, and 
subtracts 75 from the result: 

TO RANDOMCOORD 

OUTPUT (RANDOM 150) - 75 

END 

The only thing needed to complete 
the program is READNUMBER, which 
returns a number input from the 
keyboard: 

TO READNUMBER 
OUTPUT FIRST REQUEST 
END 

READNUMBER uses the Logo 
primitive REQUEST, which waits for 
the user to type a line, and then 
returns a list of all the items in that 
line. The desired number is extracted 
as the first item of the input list. 
(Well talk about lists below.) 

Actually, it might be better to 
design READNUMBER so that it checks 
to see if the item to be returned is in- 
deed a number, and to complain 
otherwise: 



TO READNUMBER 
MAKE "TYPEIN FIRST REQUEST 
IF NUMBER? :TYPEIN OUTPUT 
rTYPEIN 

PRINT [PLEASE TYPE A NUMBER] 

OUTPUT READNUMBER 

END 

Notice the final line of the procedure. 
Its effect is to make READNUMBER try 
again for an input until it gets a 
number, as many times as necessary. 



100 August 1982 £ BYTE Publications Inc 



Circle 241 on Inquiry card. 




From Aspen Software 

Jhm Only Complete Document Proofreading System 
For CP/M*, TRS-80* and IBM-PC Word 




T.M. 



T.M. 



Featuring Random House* Dictionary 

• Complete Accuracy-looks up every word; 
does not use less accurate root word 
analysis, plus Random House Dictionary 

▼ • Full Interactive Correction-standard 

• Instant Access to Dictionary 

• Compact-Random House Dictionary 
supplied in sizes to fit your system 
(50.000 words standard) 

QRAMMATlK 

Beyond Spelling Checking 

• Detects typos, punctuation and 
capitalization errors, misused words 
and phrases 

• Analyzes Writing Style 

• Suggests Alternative Usages 

= NO ERRORS 

"The programs together (Proofreader and 
Grammatik) offer a dynamic tool for 
comprehensive editing beyond spelling 

corrections." 

-Dona Z. Meilach in Interface Age. 5/82 

"Grammatik is the perfect complement to a 
spelling check program. " 
-Dr. Alan R. Miller in Interface Age, 5/82 

"If vou use a word processor and a spelling 
checker, then you should investigate the unique 
capabilities of this program. Grammatik is a 
surprisingly fast and easv to use tool for 
analyzing writing style and punctuation. " 

-Bob Louden in InfoWorid, 12/81 
" For the user who is as tight with his dollar as I. 
Proofreader is the program of choice. " 

-Stephen Kimrnd in Creative Computing. 3/82 
"Anyone involved with word processing in any 
way. whether writing manuals, letters, 
brochures, newscopy. reports, etc. is encouraged 
to get the excellent program Grammatik." 
—A. A. Wicks in Computronics, 6/82 

Grammatik and Proofreader are compatible with ail 
CP/M. MS-OOS (incl. IBM-PC), and TRS-80 word 
processors. Current CP/M formats, standard 8". 
Nortnstar. Omikron. Osborne. Apple. Please call/or 
write for details of minimum system sizes and availaPility 
of additional disk and operating system formats. 
Shipping costs included. Please specify your system 
configuration when ordering. Dealers inquiries 
invited. 



Proofreader Grammatik Botn 

CP/M. MS-DOS $12a00 $150.00 $250.00 

TRS-80 Model II rva $99.00 

TRS-80 Mod. I/Ill $89.00 $59.00 $139.00 

Random House is a registered trademark of Random 
House. Inc. Other registered trademarks: CP/M: Digital 
Research: TRS-80: Tandy Corp.; MS-OOS: Microsoft 
IBM: IBM: Proofreader. Grammatik: Aspen Software Co. 



iLspen Software Co. 

P.O. Box 339-B Tijeras. NM 87059 
(505) 281-1634 



This makes the game behave as 
toiiows: 

GO FORWARD HOW MUCH? 
FJKSL 

PLEASE TYPE A NUMBER 
FIFTY 

PLEASE TYPE A NUMBER 
50 



BUTFIRST [[PETER PAN] 
WENDY J0HN1 

it is [WENDY JOHN). 

The FPUT operation takes the two 
objects x and y and constructs a list 
whose FIRST is x and whose 
BUTFIRST is y. For example: 

FPUT 5 [2 BUCKLE MY SHOE! 




Lists 

We've seen that Logo's procedural 
organization makes it an easy and 
convenient language for writing pro- 
grams. Most modern programming 
languages are, in fact, procedurally 
organized, although few languages 
make it so easy to interactively define 
and modify procedures as does Logo. 

A much more special aspect of 
Logo is the way it handles collections 
of data. This is done using lists. A list 
is a sequence of data objects. For 
example: 

[1 2 BUCKLE MY SHOE] 

is a list of five things. The items in a 
list can themselves be lists, as in: 

[[PETER PAN1 WENDY J0HN1 

which is a list of three items, the first 
of which is itself a list of two items. 
Similarly, we can have lists whose 
items are lists, and so on. Lists, there- 
fore, are a natural way to represent 
hierarchical structures, that is, struc- 
tures composed of parts that them- 
selves are composed of parts. 

Logo includes a number of opera- 
tions for manipulating lists. FIRST ex- 
tracts the first item of the list. In this 
example: 

FIRST [1 2 BUCKLE MY SHOE] 
it is 1, and in the next example: 

FIRST [[PETER PAN1 WENDY JOHN1 



produces the 
SHOE], and 



[5 2 BUCKLE MY 



FPUT [PETER PAN1 

[BUCKLE MY SHOE] 

produces the list [[PETER PAN] 
BUCKLE MY SHOE]. 

The SENTENCE operation, like 
FPUT, constructs larger lists from 
smaller ones, but in a slightly dif- 
ferent way. SENTENCE takes a 
number of lists as inputs and com- 
bines all their elements to produce a 
single list. For example: 

SENTENCE [PETER PAN] 
[BUCKLE MY SHOE] 

produces the list [PETER PAN BUCKLE 

MY SHOE]. 

The significant thing about lists in 
Logo is that they can be manipulated 
as what computer scientists call "first- 
class data objects." That is to say, 
Logo lists (as opposed, for example, 
to arrays in BASIC) can be: 

•assigned as the values of variables 

• passed as inputs to procedures 

• returned as the outputs of pro- 
cedures 

For instance, you can assign names to 
lists: 

MAKE "X [OOM PAH] 
MAKE "Y [HEIGH HO] 

and then refer to the values of these 
variables, so that BUTFIRST :X is the 
list [PAH], You can also combine 
operations on lists to produce more 
complex operations. For example: 



it is [PETER PAN1. 

The BUTFIRST operation returns 
the list consisting of all but the first 
item of the given list, so in 

BUTFIRST [1 2 BUCKLE MY SHOE] 
it is [2 BUCKLE MY SHOE], while in returns the word PETER. 



FIRST FIRST [[PETER PAN1 
WENDY JOHN] 



1 02 August 1982 : BYTE Publications Inc 



Circle 248 on inquiry card. 



You can also write procedures that 
manipulate lists: 



TO DOUBLE :L 

OUTPUT SENTENCE :L :L 

END 

PRINT DOUBLE [OOM PAH1 
OOM PAH OOM PAH 

PRINT DOUBLE DOUBLE 

[OOM PAH] 
OOM PAH OOM PAH 

OOM PAH OOM PAH 

The implication of this is that you 
can combine operations on lists, 
much as you combine operations on 
numbers in ordinary languages. For 
example, one very useful list opera- 
tion is P1CKRANDOM, which chooses 
an item at random from an input list. 
PICKRANDOM is not provided as a 
primitive operation, but is easily con- 
structed out of simpler operations, 
such as finding the length of a list, 
selecting a random number in a given 
range, and extracting the nth item of 
a list. 



Playing with Text 

To illustrate how lists are used, let's 
examine a program that composes 
vacation postcards, such as: 



DEAR DOROTHY 
WISH YOU WERE HERE. 
LOVE - JOHN 

DEAR MARY 
EVERYONE'S FINE. 
WRITE SOON - AUNT EM 

You begin by setting up lists of 
names and phrases from which the 
elements of the postcard will be 
chosen: 



MAKE "NAMES 
[JOHN 
DOROTHY 
[AUNT EM] 
OCCUPANT] 

MAKE "PHRASES 

[[WISH YOU WERE HERE.] 
[WEATHER'S GREAT!] 
[SURF'S UP.] 
[EVERYONE'S FINE.]] 

MAKE "CLOSINGS 
[LOVE 

[SEE YOU SOON] 
[WRITE SOON]] 



104 August 1982 BYTE Publications Inc 



Here's the main postcard program: 



TO POSTCARD 

PRINT SENTENCE [DEAR] NAME 
PRINT BODY 

PRINT (SENTENCE CLOSING 

H NAME) 
POSTCARD 
END 

The recursive call in the last line 
makes the procedure keep printing 
new postcards over and over. (Com- 
pare the SQ and POLY procedures.) 

The procedures NAME, BODY, and 
CLOSING generate the elements of the 
postcard by selecting items from the 
appropriate lists: 



TO NAME 

OUTPUT PICKRANDOM :NAMES 
END 

TO BODY 

OUTPUT PICKRANDOM :PHRASES 
END 

TO CLOSING 

OUTPUT PICKRANDOM .CLOSINGS 
END 

You can change the postcard pro- 
gram so that it automatically aug- 
ments its repertoire of phrases by 
every so often (say, one chance in 
three) asking the user to type in a new 
phrase and adding that to the 
PHRASES. To do this, add to the 
POSTCARD procedure the line: 

IF 1 .IN.3 LEARN. NEW. PHRASE 

The 1 .IN.3 procedure returns TRUE 
with odds of one chance in three and 
FALSE otherwise. One possible way 
to write this procedure is: 

TO 1 .IN.3 

IF (RANDOM 3) - 0 OUTPUT "TRUE 

OUTPUT "FALSE 

END 

Here's how the program learns a 
new phrase: 



TO LEARN. NEW. PHRASE 
PRINT [PLEASE TYPE IN A NEW PHRASE] 
MAKE "PHRASES FPUT REQUEST 

:PHRASES 
END 

The idea is that REQUEST returns (as 
a list) the phrase that the user types in 
response to the message. This is 
added to PHRASES (by means of 



FPUT), so that the program will be 
able to use this phrase in future 
postcards, like: 

PLEASE TYPE IN A NEW PHRASE 
DON'T FORGET TO FEED THE DOG. 

DEAR OCCUPANT 

DON'T FORGET TO FEED THE DOG. 

LOVE - JOHN 



Another change you can make is to 
generate longer postcards, whose 
BODY consists of one or more 
phrases. One way to do this is to alter 
the BODY procedure as follows: 

TO BODY 

IF 1 .IN.2 OUTPUT SINGLE.PHRASE 
OUTPUT SENTENCE BODY 
SINGLE. PHRASE 

TO SINGLE.PHRASE 

OUTPUT PICKRANDOM -.PHRASES 

END 

This uses recursion in a devious way. 
Half the time you call BODY, it will 
output a single phrase, just as before. 
(The procedure 1 .IN.2 is analogous to 
the 1 .IN.3 procedure above.) But the 
other half of the time, it recursively 
generates a new BODY and combines 
this (using SENTENCE) with a single 
phrase. The new (recursively called) 
BODY will itself generate a single 
phrase only half the time. Otherwise, 
it will call a third BODY. The result is 
that a call to body will generate a 
single phrase about half the time, two 
phrases about one-fourth of the time, 
three phrases about one-eighth of the 
time, and so on. 

Here's the final postcard program 
in action: 

DEAR AUNT EM 

SURF'S UP. DON'T FORGET TO 

FEED THE DOG. 
WRITE SOON ~ DOROTHY 

PLEASE TYPE IN A NEW PHRASE 
GET THE MONEY IN SMALL BILLS. 

DEAR OCCUPANT 

WEATHER'S GREATI WISH YOU 
WERE HERE. GET THE 
MONEY IN SMALL BILLS. 

SEE YOU SOON - JOHN 



Circle 203 on Inquiry cara. 





(2a) 




wsm 



o 




- .; v • ■** ; 



(2b) 

Photos 2a and 2b: 7x00 tiling patterns constructed from the same basic figure (a triangle 
within a square). The differences in the patterns are due to using different orientations 
when the basic figure is combined into "higherAevel" patterns. 



Text-generation procedures are fun 
to write and to play with and also 
easy to modify. You can make them 
as elaborate or as simple as you like 
and apply the same ideas to produc- 
ing essays, poems, love letters, and so 
on. The idea of generating a random 
postcard program is based on work 
done at MIT by Neil Rowe, whose ar- 
ticle "Grammar as a Programming 
Language" {Creative Computing, 
January/February 1978) contains 
many other examples of text-genera- 
tion procedures. It also shows how to 
implement, in Logo, a special-pur- 
pose "sublanguage" for creating such 
programs. 

Recursive Tiling 

The success of Logo as a catalyst 
for learning involves much more than 
the Logo language itself, although the 
language does play a crucial role. The 
best kind of Logo activity is a synthe- 
sis of programming, mathematics, 
aesthetics, and, above all, the oppor- 
tunity to explore. One particularly 
striking example of this is the "recur- 
sive tiling" program invented by 
Andrea diSessa and Doug Hill. This 
scheme enables you to write simple 
procedures that draw patterns such as 
the ones shown in photos 2 and 3, 
giving you literally billions of possi- 
bilities to examine and explore. 

The idea is as follows. Suppose you 
have a program that draws a pattern 
inside a square of some given size. By 
scaling the pattern size in half and 
gluing together four copies, you ob- 
tain a more complex pattern in the a 
square of the original size, as shown 
in figure 5a on page 108. In fact, you 
can generate many different patterns 
from a single pattern because each 
copy of the original pattern that you 
place in each corner square can be 
rotated through an arbitrary multiple 
of 90 degrees, as shown in figure 5b. 

To convert this idea into a com- 
puter program, suppose you have a 
procedure called PROC that draws a 
pattern in a square. Assume that 
PROC takes an input S that specifies 
the size of the square, scaled so that S 
is equal to half the diagonal of the 
square. Assume also that PROC is de- 
signed to begin drawing with the tur- 
tle at the center of the square pointing 



106 August 1982 • BYTE Publications Inc 



at a vertex, and to end with the turtle 
in the same state. 

Now suppose you have a square of 
size S divided into four "corner 
^toiares" each of size S/2. The follow- 
^Pl process is designed to start with 
the turtle at the center of the square, 
facing one of the corners. It draws a 
copy of the PROC design in that cor- 
ner square and returns the turtle to 
the center of the larger square. Then 
it turns the turtle 90 degrees to point 
at the next corner square. The steps in 
the process are: 

1. Move the turtle FORWARD a dis- 
tance of S/2. This brings the turtle 
to the center of the small square, 
pointing at a vertex of that 
square. 

2. Run the procedure PROC with an 
input of S/2 (half the diagonal of 
the smaller square). This draws 
the pattern and leaves the turtle at 
the center of the small square. 

3. Move the turtle BACK a distance 
of S/2 to return it to the center of 
the larger square. 

^^Rotate the turtle 90 degrees. 

In addition, before performing step 2, 
you can rotate the pattern through a 
multiple of 90 degrees. If you do this, 
you should perform the opposite 
rotation at the end of step 2, so that 
the turtle will end up facing in the 
same direction from which it started. 

The following CORNER procedure 
implements this strategy. CORNER 
takes three inputs. The first, A, is a 
multiple of 90 degrees to be turned 
before drawing the pattern (A is an in- 
teger from 0 to 3). The next, input, 
PROC, is the name of the procedure 
that draws the pattern. PROC is 
assumed to take one input that speci- 
fies the size of the pattern. The third 
input to CORNER is a number S that 
specifies the size of the square. The 
procedure is used as follows: 





TOCORNER :A :PROC :S 
§ fcjVARD :S/2 
^Pr 90 * :A 

DRAWRGURE :PROC :S/2 

LEFT 90 * :A 

BACK :S/2 

RIGHT 90 

END 



(3b) 



Photos 3a and 3b: Two tiling patterns constructed on the same basic triangle as in 
photos 2a and 2b. All four patterns use the gluing scheme shown m figures 5a and 5b 
and photos 4a, 4b, and 4c, extended to four levels. 



August 1982 i£ BYTE Publications inc 107 




shown in photo 4a. (In accordance 
with general gluing strategy, TFH 
should be a procedure that takes one 
input that specifies the size of the 
square.) For comparison, photo 4c 
shows a different 



GLUE2 [TRI1 1 00 

Now comes the clever idea. The 
GLUE procedures enable you to glue 
together four copies of any pattern. 
On the other hand, entering 

GLUE1 [TRU 100 

is also a command that draws a pat- 
tern in a square. In fact, the list 
[GLUE1 [TfWL when combined with a 
size (via the DRAWRGURE proce- 
dure), produces a command that 
draws a pattern in a square of the 
specified size. Therefore, you can use 
a GLUE procedure to glue together 
four of these patterns, for example: 

GLUE1 [GLUE1 [TRIU 100 



or 



GLUE2 [GLUE1 [TRI11 100 



(4c) 

Photo 4- Photo 4a shows a triangle inside a square, as drawn by the procedure TRI. 
^The square, shown here in color, I not drawn by TRI. Photos 4b and 4c show £j£ 
ferent one-level gluings of the TRI procedure to form a more complicated figure inside a 
ciikxLsin. in photos 2a, 2b, 3a, and 3b are four-level gluings based on 
the same TRI figure. 



But again, each of these "two-level" 
gluings is itself something that can be 
glued, so you can make three-levd 
patterns such as 

GLUE2 [GLUE1 [GLUE2 [TRI]]] 100 

and so on and so one. The patterns 
shown in photos 2a, 2b, 3a and 3b 
are, in fact, all four-level gluings 
based on the same TRI procedure, 
using different rotations at the 
various levels. 

There's an enormous range of pos- 
sibilities to investigate here. Four 
levels of gluings with 256 orientation 
choices at each level give 256 4 or 
more than 4 billion possible four-level 
gluings, all from a single base patternl 
(The number of distinct patterns is 
reduced by various symmetries in the 
gluing process, which is itself an in- 
teresting phenomenon to explore.) 
For more variety, you can try dif- 
ferent base patterns, or even develop 
different gluing schemes, such as the 
one derived from dividing an equilat- 
eral triangle into four smaller equilat- 
eral triangles. (See Turtle Geometry 



Expand Your IBM P.C. 



sbS&s&Sl^ 3 s 3 -i a a a a x - • . 



tgxsss:£9* ~ A 



"7. r 



Memory Expansiorr Hoard: 








K Add-In Winchester Disk Syste 

easy to install directly into the lloppv 

■ Asynchronous Communications Controller 

1 or 2 line capability on one card- 
' Totally compatible with IBM software and diagnostics- 

■ OS-Disk Software: 



As 

ittle as 
SaeOO 



rf „.,hi«c the- from 160K to 320K. Used witttTandon 
IPCjrs sottwareprogranrdMbiesJhe, njm ^ equivalent 
IBM s.nqle-sided diskette capacitjg|L TM10U iQisiian e 



" * • m 



using both sidcsi. Increases capaoi^ p ^ 

PHONE Off WHITE — HUT ORDEH NOW 

(PC) 2 , P.O. Box 67a 
51 0 Lawrence Expressway 
Sunnyvale^ CJV.9408& 

(408) 74ff-9aiX 

Postage and Handling included within continental U.S.* 
One year warranty oir all hoard products^ 
MasterCard; Visa and Checks accepted^ 





PLUG COMPATIBLES FOR PERSONAL COMPUTERS 



for more investigations with "recur- 
sive designs.") 

The Computational Perspective 

Logo is often described as a pro- 
gramming language. Those of us who 
designed Logo tend to think of it 
rather as a computer-based learning 
environment, where the activities (ex- 
ploring the symmetry of POLY) are 
just as integral as the programming 
tools used (recursion and lists). Logo 
is also a continually evolving en- 
vironment, and the microcomputer 







• 






appeared during the past year are 
only the first to be widely available. 
We plan to extend Logo to incor- 
porate new linguistic features, such as 
the "message passing" facilities found 
in Smalltalk and recent implementa- 
tions of USP (see the August 1981 
issue of BYTE for an overview of 
Smalltalk), as well as new activities, 
such as a computer-based physics 
curriculum that builds upon turtle 
geometry. At the MIT Laboratory for 
Computer Science, the Educational 
Computing Group is designing a 
follow-on system to Logo suitable for 
the new generation of personal com- 
puters that will be coming into use 
during the latter half of the 1980s. 

The next few years will be exciting 
ones in educational computing 
because personal computers are be- 
coming powerful enough to support 
systems that are designed for the con- 
venience of people rather than for the 
convenience of compilers. If we can 
dispel the delusion that learning 
about computers should be an activi- 
ty of fiddling with array indexes and 
worrying about whether X is an in- 
teger or a real number, we can begin 
to focus on programming as a source 
of ideas. For programming is an ac- 
tivity of describing things. The de- 
scriptions are phrased so that they 
can be interpreted by a computer, but 
that is not really so important. Com- 
putational descriptions, like those of 
science or mathematics, provide a 
perspective, a collection of "tools of 
thought," such as procedural organi- 
zation, hierarchical structure, and 
recursive formulations. Logo, and 
languages like it, will help make these 
tools available to everyone. ■ 



ai^u 117 nn inrttiirv card. 



Circle 289 on inquiry card. 



Logo in the Schools 

Putting Logo in the classroom has led 
to some interesting results. 



In the IS years since its develop- 
ment, the Logo computer language 
has been used in a variety of research 
and educational settings. Students 
from preschool to graduate school; 
those with severe physical, mental, 
and emotional handicaps; and 
students with outstanding ability in 
science and mathematics have been 
involved with Logo. It has been used 
in educational settings to: 

•provide an environment for ex- 
periential learning of mathematics 
•promote the development of 
problem-solving abilities 
• serve as an introductory program- 
ming language that helps students 
learn principles of structured pro- 
gramming 



About the Author 

Daniel Watt, a former elementary-school 
teacher, was involved in curriculum develop- 
ment and the Brookline Logo project at MIT. 
Watt holds a doctorate in engineering from 
Cornell University and is currently an editor 
with BYTE. 



Watt 

Editor, BYTE Books 



•serve as a vehicle for computer 
literacy, helping students develop a 
sense of personal control of a com- 
puter 

•support the learning of students 
who, for one reason or another, have 
not been successful in traditional 
classrooms 

•provide the basis for learning en- 
vironments in a number of subject 
areas, including music, language arts, 
fine arts, physics, biology, and 
mathematics 

• form a foundation for an entirely 
new kind of school based on Pia- 
getian approaches to teaching and 
learning, using computers as all- 
purpose tools to facilitate learning 

Each time Logo has been intro- 
duced into a school, certain objec- 
tives have been emphasized at the ex- 
pense of others. This article deals 
with four different Logo projects and 
describes the settings, the goals of 
each project, and some of the known 
results. In some cases, I have drawn 
on the published reports listed in the 



references. Where published reports 
are not available, I have relied on 
visits and interviews with people 
directly involved. Each of the projects 
has had many dimensions that are not 
included here because of space limita- 
tions. For further information, read 
the reports cited in the references or 
contact the projects. 

Each project had a different type of 
student population, different choice 
of goals, and different kinds of 
results. 

The Edinburgh Logo Project, Depart- 
ment of Artificial Intelligence, 
University of Edinburgh, Edinburgh, 
Scotland, dealt with 12- and 13-year- 
old boys attending a private school 
adjacent to the university. It focused 
on the use of Logo to create an en- 
vironment for learning to think 
mathematically and on developing 
new methods to teach the content of 
conventional school mathematics. 
The Brookline Logo Project, con- 
ducted as a collaboration between the 
MIT Logo Group and the public 



116 August 1082 BYTE Publications Inc 



Photo 1: Preschool students using TI Logo at the Lamplighter School, Dallas, Texas. Photo courtesy of Texas Instruments Inc. 



schools of Brookline, Massachusetts, 
had two very different phases. In the 
first, a laboratory was set up with 
four computers. The emphasis of the 
research was to observe and docu- 
ment what a group of sixth-grade 
students actually learned, rather than 
assess whether they had achieved a 
set of preplanned objectives. 

The second phase of the Brookline 
Logo Project involved placing com- 
puters in fourth- through eighth- 
grade classrooms for several weeks at 
a time. This project emphasized the 
development of curriculum materials 
to support the learning of Logo as one 
activity in a multifocused classroom. 
The Computers in Schools Project, 
conducted by the New York 
^^ademy of Sciences in conjunction 
^Bi the New York Public Schools, 
provided training for elementary and 
junior high school teachers to use 
Logo as a permanent feature of their 
classrooms. The major focus of this 
project has been implementation in 



the school, training and supporting 
teachers to ensure successful use of 
Logo in the classroom. 
The Lamplighter School Logo Proj- 
ect, conducted at a private school in 
Dallas, Texas, for students aged 3 to 
9, is the most ambitious Logo project 
to date. Conducted as a joint effort 
with the school, the MIT Logo 
Group, and Texas Instruments, the 
project was intended to provide the 
school with enough computer hard- 
ware that access to computers would 
not be a limitation on what the 
students could learn. Logo would be 
taught to all students and teachers, 
from nursery school through grade 
four. Eventually, the project was ex- 
pected to enhance learning in many 
areas as it facilitated the use of the 
computer as a multipurpose learning 
tool throughout the curriculum. The 
Lamplighter School also served as the 
primary test site for the development 
of the Texas Instruments implementa- 
tion of Logo. 



The Edinburgh Logo Project 

The objective of the Edinburgh 
Logo Project was to discover whether 
the students' ". . . ability to do 
mathematics and to talk about their 
mathematics was changed by explor- 
ing mathematical problems through 
[Logo] programming." The quotes in 
this section are taken from Teaching 
Mathematics Through Logo Pro- 
gramming: An Evaluation Study, by 
Howe, O'Shea, and Plane (see 
references section 1). The students 
were a group of 11 sixth-grade boys 
from the George Herriot School, a 
private school near the university. 
They were selected from the school's 
lowest-level math group. 

The project lasted for two years, 
during which the students attended a 
Logo lab at the university. For the 
first year, the students worked 
through a set of graded worksheets to 
learn the basic elements of Logo. For 
the second year, they did special Logo 
exercises designed to teach topics 

August 1982 £ BYTE Publications Inc 117 



selected from their regular mathe- 
matics curriculum. 

The project was highly structured 
in several respects. The students' 
learning experiences were structured 
by means of assigned worksheets that 
they worked through in order, each 
at his own rate. In this way, re- 
searchers could effectively monitor 
the progress of each student. During 
the second year of the project, Logo 
activities were drawn from mathe- 
matical topics such as areas of rectan- 
gles, factors and multiples, positive 
and negative numbers, and plotting 
coordinates on graphs. 

The research aspect of the project 
was also carefully structured. 
Students were given standardized 
tests in mathematics before and after 
the project. Their progress was com- 
pared with that of a control group 
(drawn from boys in the second 
lowest-level math group). Both 
groups of boys, as well as their 
teachers, were also given a series of 
questionnaires designed to measure 
their attitudes toward mathematics. 



Great care was taken to see that the 
research design was carefully carried 
out. 

The published results of the project 
on student achievement were not 
very dramatic. Over the two years, 

Teachers found that 
students who had 
taken part in the Logo 
classes were more 
willing to "argue 
sensibly about 
mathematical issues" 
and to explain their 

"mathematical 
difficulties clearly." 



the experimental group improved a 
bit more than the control group on a 
"basic maths" test. The reverse was 
true on a "maths attainment" test. 
The most interesting finding had to 
do with the teachers' perceptions of 



the students in both groups. Teachers 
found that students who had taken 
part in the Logo classes were more 
willing to "argue sensibly about 
mathematical issues" and to explain 
their "mathematical difficulties clear- 
ly." This finding may have depended 
as much on the teaching approach 
used by the Logo teachers — as com- 
pared with the classroom mathemat- 
ics teachers — and on the individual 
assistance the Logo students received, 
as it did on the Logo activities them- 
selves. 

Conversations with some of the 
people involved indicate that a lot of 
interesting data about what and how 
the students learned was collected 
during this project. Unfortunately, 
little of that information has been 
analyzed or published. For people in- 
terested in teaching Logo, the most 
tangible results of the project may be 
the sets of worksheets developed to 
teach Logo concepts and mathe- 
matical applications. These represent 
a useful set of Logo teaching ideas- 
even if they are not used in the strictly 




FORTRAN, Pascal, COBOL/ Ada™* 

UNIX™!)! 68000 




XAVAX Three 
Hardware 

• 68000 CPU at 8MHz (10MHz option) 

• Two level memory management 

• 256KB on board RAM (512KB option) 

• Up to 32KB of on board PROM 

• 64KB RAM, bus expandable to 1MB 

• Floppy disk, 6MB Winchester disk 

• Full Multibus"* and muitimaster 

• 9 serial I/O ports 

• 9 slot backplane (IEEE 796) 

• 84MB Winchester hard disk 

• 10MB cartridge tape backup 

• 168 and 300MB hard disks 



Software 

• UNIX"*!!, multiuser version 

• UC Berkeley utilities 

• Screen oriented vi editor 

• FORTRAN-77 (programs to 1MB) 

• ISO Pascal, UCSD extensions 

• RM COBOL, C, assembler 

• *Ada m under separate OS 

• XCCX™ multiversion file backup 

• TXT™ enhanced UNIX™ editor 

Multibus " of Intel Corporation 
UNIX'- of Bell Laboratories 
Ada " of Department of Defense 
Ethernet '" of Xerox Corporation 




GRAPHICS 1024x792 

• Emulates Tektronix 4014-1 • 17 inch interlaced monitor (P40) 

• 1024 x 792 pixel landscape display • X.Y (0,0) coordinates displayed 

• 4096 x 4096 apparent resolution • Full screen update 64 milliseconds 
. Bit mapped raster graphics • Dedicated floating point hardware 

• Mouse pointer for display changes • Ethern ^ 

IMMEDIATE ATTENTION! B882 

□ XAVAX One (board only, 128KB RAM) $2,000 □ XAVAX Jnree (UNJX-ni) $14,000 

□ XAVAX Two with 10MB Winchester) $9,500 □ XAVAX ^ri^ult^PU) $40,000 

□ TekGraf" (desktop graphics system) $12,000 Q 5^ e T?VciL^c A^tniiH $ ' 

□ Manuals: XAVAX One ($15), XAVAX Two ($35). XAVAX Three ($75) USA postpaid. 

Mail checkmarked copy: XAVAX, POB 1105. MasterCard and VISA accepted. 

Phone XAVAX CORPORATION TWX 

(319) 323-2332 300 Northwest Tower, Bettendorf. I A 52722 



rjrri« 436 on inauirv care. 





sequential format for which they 
were originally designed. Copies of 
student worksheets used in both years 
of the project are available from the 
linburgh Logo Group. 
The Edinburgh Logo Group has 
also been involved in several other 
educational projects. In one project, 
student teachers who were not math 
specialists were taught Logo to see 
how it would affect their teaching of 
mathematics. In another project pres- 
ently under way, computers have 
been installed in several schools so 
that the Logo curriculum can be 
taught by classroom teachers who 
Um-m taken a Logo training course. 

project is intended to give clearer 
results about the impact of Logo on 
the improvement of classroom per- 
formance in mathematics. 

In order to carry out the current 
study, the Edinburgh Logo Group im- 
plemented a version of Logo on the 
Terak computer system, an LSI-11- 
based system with high-resolution 
graphics. Disks for this version^ of 
L020 are available from the 



1. D1SPIAYDEF • Ocvelopwent Utility 
• Define 



burgh Logo Group. Other Logo im- 
plementation projects are under way 
for microcomputer systems widely 
available in Great Britain. 

The Brookline Logo Project 

The first Brookline Logo Project, 
funded by the National Science Foun- 
dation and conducted by the MIT 
Logo Group in collaboration with a 
public school in Brookline, Massa- 
chusetts, had a very different set of 
goals and results. In this case, 50 
sixth-grade students were given the 
opportunity to learn Logo in a com- 
puter lab established within the 
school. The work of 16 of these 
students, representing a full range of 
academic abilities and interests, was 
selected for study. 

The entire Logo learning experience 
of these students was carefully 
monitored and analyzed, document- 
ing what the students learned, what 
learning styles they used, and what 
types of choices they made. Some 
common material and ideas were pre- 
sented to all the students and intro- 




Build 




Large 

User friendly 
Language and system li 
Complete entry checking, conversion 
& protection 

Low RAM and Disk overhead 



2. DISPLAY AS* - 

• Build screen! 

• Handle messages and prompts 

• User callable directives and primitives 
. Screen fields transparent to program 

• High speed operation 

• Screens easily changed & tested 



• Low cost - $173.00 with Manual 



CP/M™ 1.4 or 2.2 with cursor addressable terminal or CRT 
Microsoft Basic-80 and BASCOM. Other popular 



languages to follow 




MCRIE • a data base definition system with user directives 
MCPRINT - a page oriented print system with user directives 

BASIC 80 and BASCOM 
are products of Microsoft 
CP/M is a trademark 
of DIGITAL RESEARCH 



MasterComputlng Inc. 
P.O. Box 17442 
Greenville, SC 29606 
(803) 244-8174 



ductory turtle geometry projects were 
stressed at the beginning of the proj- 
ect. Students also had the opportuni- 
ty to choose their own activities and 
went on to develop many different 
Logo projects, including a math quiz, 
word games and conversations, 
animations, geometric explorations, 
tic-tac-toe, and dynamic action 
games. The students were expected to 
be in charge. The teachers were there 
to help them accomplish their own 
goals. 

The results of the project indicate 
that Logo learning environments are 
suitable for many different kinds of 
students. All students, ranging from 
those who were academically gifted 
to those who had the poorest 
academic records, were successful in 
the Logo classes. The surprising suc- 
cess of students with learning 
disabilities led to a separate proposal 
to provide Logo training and equip- 
ment for teachers who specialized in 
this area. The final report of the proj- 
ect summarized the students' learning 
styles and analyzed what they learned 
in the areas of computer program- 
ming and mathematics. A second 
volume of the report traced the learn- 
ing experiences of each of the 16 
students individually. The report pro- 
vides a basis for an introductory Logo 
curriculum, as well as a rich source of 
project ideas suitable for students 
with widely divergent interests and 
abilities. 

The Brookline Logo Project was 
not very successful in obtaining "ob- 
jective" data about learning gains 
made by the students. Standardized 
tests had been rejected as irrelevant to 
the goals of the project (the ability to 
use turtle geometry is not measured 
by sixth-grade math tests). The prob- 
lem-solving tests and mathematical 
tests devised and administered by the 
project staff had inconclusive results. 
The problem of developing objective 
tests in such areas as problem solving 
or procedural thinking is still an open 
question for educational researchers. 

Another limitation of the project 
was that it required an extremely sen- 
sitive and knowledgeable teacher, 
with a great deal of time to consider 
the needs of each student. It was the 



hope of the project staff that the two- 
volume report, with its analysis of 
student learning and many examples 
of student projects, could be an effec- 
tive resource for teachers working in 
less ideal settings. The report was also 
intended as the basis of a Logo cur- 
riculum to be developed in subse- 
quent projects. 

The second Brookline Logo Project 
was also funded by the National 
Science Foundation to develop a cur- 
riculum supporting classroom use of 
Logo. Computers were placed in 
classrooms from grades four through 
eight. Teachers were provided with a 
small amount of training, and the 
project developed curriculum 
materials to be used by students and 
teachers. During the project, two 
computers circulated among several 
classrooms. Each classroom had ex- 
clusive use of a computer for 8 to 12 
weeks. During this time, students 
worked on their own at the com- 
puter, individually or in pairs, while 
the rest of the class went on with its 
regular work. About once a week, the 
entire class met for a lesson at which 



ideas would be shared, new concepts 
introduced, and assignments given. 

The curriculum materials devel- 
oped by the project are at two dif- 
ferent levels: an introductory Logo 
curriculum for grades four through 
six, and a set of advanced Logo proj- 
ects based on playing and modifying 
a set of "dynaturtle" games. The in- 
troductory curriculum includes step- 
by-step instructions for students, as 
well as a number of different types of 
project ideas. Teachers are given in- 
formation about everything from the 
physical arrangement of the com- 
puter in the classroom to the concepts 
the students will be learning, sugges- 
tions for whole class lessons, and a 
checklist to help them monitor stu- 
dent progress. 

The advanced activities focus on a 
series of dynaturtle games that can be 
used in two different ways. The 
games provide a microworld in which 
students can explore the behavior of 
the dynaturtle— a Logo turtle that has 
been programmed to follow Newton's 
Laws of Motion. Each game intro- 
duces a new factor to be considered. 



The first game involves making the 
dynaturtle hit a target, which forces a 
student to learn to control its momen- 
tum and understand something about 
how the vector quantities of force and 
momentum are combined. The sec- 
ond game involves driving the dyna- 
turtle around a circular racetrack, in- 
troducing some of the concepts in- 
volved in orbital motion. The third 
game, a version of the familiar Lunar 
Lander, introduces the effect of gravi- 
ty. The booklet accompanying the 
games contains many suggestions and 
challenges for the students that are 
designed to help them understand the 
physics concepts embedded in the 
games. (Also, see R. W. Lawler's 
"Designing Computer-Based Micro- 
worlds," in this issue on page 138.) 

Another method for using the 
dynaturtle games is as a program- 
ming project. The games are 
deliberately designed to be simple so 
that they lend themselves to many 
obvious improvements. Every stu- 
dent who has played them has had 
ideas for making them better and 
more interesting. A student booklet 



provides detailed suggestions for 
making a series of changes in each 
game. Students who have already 
learned simple Logo programming 
can learn some of the intermediate 
features of the programming 
language while using these games as 
models for the construction of 
elaborate programs from small 
modules. Students who have gone 
through these projects are ready to 
tackle any number of interactive pro- 
gramming projects of their own de- 
vising. 

Curriculum materials developed 
during the project are not yet publicly 
available. The MIT Logo Group is 
seeking a commercial publisher for 
them in accordance with the re- 
quirements of the National Science 
Foundation. 

One of the most interesting aspects 
of the second Brookline Logo Project 
was the way in which students 
emerged as Logo teachers. Because 
there was a group of "student 
experts" at the beginning of the proj- 
ect, seventh graders who had par- 
ticipated in the first project, teachers 



incorporated these students as tutors 
into their planning from the start. 

As the project went on, certain 
students from this group (and others) 
became known as experts at Logo 
programming and at managing the 
computer systems. Teachers through- 
out the school routinely began to ask 
these students for help when neces- 
sary. When the youngest students in 
the school, the fourth graders, were 
introduced to Logo, each student was 
assigned an upper-grade tutor for the 
first few weeks. Thus, the fourth 
graders developed a quick proficiency 
with the mechanics of the system and 
were able to begin their own projects 
very quickly. 

A related aspect of the project was 
the way that students in the same 
classroom worked together on Logo 
activities. During the first Brookline 
Project, student interaction had been 
limited by the arbitrary manner in 
which groups were assigned to the 
laboratory. In the classrooms, 
students formed natural groupings to 
share ideas and help each other. Proj- 
ect ideas and "secret knowledge" of 



how to do certain things were passed 
among the students by word of 
mouth. The result of using students as 
teachers and working partners was a 
reduction in the teachers' role as 
source and authority, and the crea- 
tion of a student-based Logo culture. 

It had been assumed at the start 
that teacher knowledge would be a 
major limiting factor in what the 
students could achieve. It turned out 
that this was not the case. The limita- 
tions on student knowledge were 
what limited what other students 
could learn. A strategy was devised 
to support the transfer of knowledge 
from student to student. Once a 
week, an after-school student interest 
group met to work on projects and 
share ideas. This gave the students in- 
volved an opportunity to further 
their own Logo knowledge, to in- 
crease their store of project ideas, and 
to develop more consistent ways of 
thinking about how Logo works. All 
this made them much more effective 
in their informal role as spreaders of 
the Logo culture. 

Because the project focused 



"The Perfect Marriage 



Great hardware now with superb software. ARBA 
register, the affordable, dependable RS232 on 
line cash register. Accounting Plus* Inventory 
Control software, comprehensive, timely, 
accurate. The ARBA point of sale software 
module that brings the two together. The ability 
to integrate on line real time inventory control 
with a total business package: G/L, Payables, 
Receivables, Payroll, Purchase Order, 
Budgeting, L/Y Comparisons, Electronic Spread 
Sheet. 





ARBA Fine Business Computing Corporation 
90 E. Roosevelt Road 
ombard. Illinois 60 148 
(312) 620-8566 



Runs under CP/M * * or MP/M " 



ARBA Register— $1295.00— Suggested Retail 
Dealer Pricing Available 



TM Software Dimensions. Inc.. Citrus Heights. Ca. 
TM Digital Research, Pacific Grove. Ca. 




primarily on curriculum develop- 
ment, there was no opportunity for a 
study of the role of students as 
teachers and the impact of this on the 
roles of classroom teachers as tradi- 
tional authority figures and sources 
of all school learning. This type of 
situation is becoming quite common; 
students know more about the com- 
puters than their teachers because 
they have more time to develop and 
share their expertise. The use of 
students as teachers should be a 
serious consideration for teachers, re- 
searchers, and curriculum developers 
as computers continue to spread into 
the schools. 



Computers in the Schools — 
New York City 

The Computers in the Schools 
Project, conducted by the New York 
Academy of Sciences in collaboration 
with New York City School Districts 
2, 3, and 9, provides teachers with 
training and support to teach Logo in 
their own classrooms. The project in- 
volves students in grades two through 
nine from a full range of socio- 
economic backgrounds. Like the sec- 
ond Brookline Project, the computers 
are located in elementary and middle 
school classrooms. A major dif- 
ference is that the teachers have had 
an extensive training period and each 



classroom is assigned a computer for 
the entire year. 

The project began in the summer of 
1980 with a three-week training pro- 
gram for 11 teachers and a principal. 
An expanded training program in the 
summer of 1981 included eight more 
teachers from each of the three school 
districts. During the year, project 
staff members made weekly visits to 
each participating classroom. 
Teachers also attend a monthly 
seminar held at the New York 
Academy of Sciences. 

Although the project has not yet 
published any progress reports, the 
staff believes it has been successful in 



For The Best In Price, Selection and Delivery, 

Call Now TOLL FREE 



800 




3404 



(In VA, Call Collect 703-237-8695) 

AMPEX • INTERTEC • TEXAS INSTRUMENTS«GENERAL DATA 
COMM.* ANDERSON JACOBSON*C. IT0H«QUME • BEEHIVE* 
D ATASOUTH • DIABLO "CENTRONICS • NEC • PRENTICE 

Sprint 9, 45RO, Lim. Pan . $1845 



SUPERB RAIN MICROS 



INTERTEC: 

64KDD* 

64KQD* 

64K SD* (96TPI) . . 
-(includes M/Soft BASIC) 
DDS-lOMeg 
(Hard Disk) 



ONLY S1975 
ONLY $2350 
ONLY S2750 



ONLY S3195 



PRINTERS 



NEC: 

7710 $2196 

771 5 Call for Sp'ecial Price 

7730 $2196 

7720 Call for Special Price 

7725 ...... Call for Special Price 

Std. Forms Tractor $ 200 

3510 $1690 

DATASOUTH: . . . . : Call 

DIABLO: 630-R1 02 $1995 

630-R110 $1795 

630-R153* $1745 

•(for IBM P.C., Apple II, TRS-80) 

630-K104(KSR) $2385 

620-SPI $1195 

QUME: 

Sprint 9, 35 KSR $1840 



Full Panel $1969 

Sprint 9, 55 F.P.Ex.Mem. . $2186 
Sprint9,55RO,Ltd.Ex.Mem.$2095 
Bi-Dir. Forms Tractor $ 1 99 



TERMINALS 



AMPEX: 

Dialogue 30 $ 775 

Dialogue 80 $ 939 

BEEHIVE: (SMART DISPLAY) 

DM5 . Call 

DM5A Call 

DM310 (3101 Emulator) Call 

NOTE: IBM and Burroughs compatible ter- 
minals available. Please inquire. 

C. ITOH 

CIT101 $1350 

TEXAS INSTRUMENTS: 

745 Standard $1390 

745 Std. (Reconditioned) . . . Call 

810 Basic $1249 

810 Package $1439 

820 Package RO Package $1610 

820 KSR Package Call 

840 RO Basic $ 795 

840 RO Tractor Feed Pkg. . $1 059 



PRENTICE STAR: 300 Bd . . $ 1 24 



DISC DRIVES 



QUME: 

Data Trak 5 . . . $300 or 2 for $549 
Data Tra k 8 . . . $5 25 or 2 for $999 

BISYNC-3780 $ 

Wordstar $ 

Data Star $ 

Mail Merge $ 

Spell Guard $ 

Plan 80 $ 

Super Calc $ 

Wordstar (IBM P.C.) $ 

Mail Merge (IBM P.C.) $ 

d Base II $ 

CalcStar $ 

SuperSort $ 

Nevada Cobol $ 



289 
199 

99 
229 
249 
249 
289 

99 
529 
189 
186 
176 



[f While They Last! 

SOROC TERMINALS 

IQ 120 

IQ 130 

IQ 140 



ONLY S625 
ONLY S525 
ONLY S989 



In addition, we can make El A RS232 
or RS449 cables to your order, and 
supply you with ribbons, printer 
stands, print wheels, thimbles for 
all printers listed. And many, many 
more items. CALL NOW. 

All items snioped freight collect either motor freight 
or UPS unless otherwise specified. VISA and 
MasterCards welcomed: add 3% for credit card pur- 
chases. Virginia residents, add 4<Vo Sales Tax. For 
fastest delivery, send certified check, money order 
or dank-wire transfer. Sorry, no C.O.D. orders. All 
eduipment is in factory cartons with manufacturers' 
warranty (honored at our depot.) Prices suPiect to 
change without notice. Most items in stock. 



TEEI^IUBLS 




Terminals Terrific. Incorporated. P.O. Box 216, Mernfield. VA 22116. 300-368-3404 (In VA. Call Collect 703-237-8695). 



90 to 95 percent of the classrooms in- 
volved. In a conversation with proj- 
ect coordinator Michael Tempel, he 
defined "success" in the following 
terms: "The positive educational 
benefit was obvious I Kids were en- 
gaged in valid intellectual and social 
processes. You could see them devel- 
oping. ... We have seen striking 
changes in kids' relationships to 
schools and learning; kids who had 
not been successful in school got 
turned on." 

Like the second Brookline project, 
the Computers in the Schools Project 
found that interaction among 
students has been a major positive 
consequence of having Logo in class- 
rooms. Although Tempel stressed 
that to remain effective the Logo en- 
vironment requires "measured and 
periodic input from the teacher/' he 
has been struck by how much work 
the students do without teacher inter- 
vention. The activity "has a real 
quality of self-sufficiency" for the 
students. 

f One important condition of the 
project has been the insistence that 
each classroom have at least one com- 
puter for an entire year. Tempel 
believes that access to computers has 
been a major element in the success of 
the project. Another condition was 
that all the teachers involved had to 
volunteer for the project and take the 
summer training without additional 
pay. This helped ensure that teachers 
had a direct personal stake in the 
project. Such factors should not be 



underestimated when comparing this 
to other Logo projects or considering 
it as a model for implementing Logo 
in other school districts. 

When the formal project ends this 
year, the teachers who have already 
been trained are expected to carry out 
future training and support activities 
on their own. Teachers in each of the 
three districts will have the respon- 
sibility for training and support in 
their own district. The Logo Learning 
Center, established by Logo Com- 
puter Systems Inc., will function as 
an informal meeting place, providing 
a mechanism for teachers to stay in 
touch, share ideas, and receive addi- 
tional training. 

The future of the Computers in the 
Schools Project itself involves an am- 
bitious proposal to create a "magnet 
school" for the three districts in which 
the students would have access to 
computers from the earliest grades. 
With specially trained volunteer 
teachers, the school would be a focus 
for Logo-related research and cur- 
riculum development. This project 
has received the support of the three 
school districts involved and is pres- 
ently in the proposal-development 
stage. Since costs for equipment, 
research, and curriculum develop- 
ment will be far beyond what can be 
provided by the school system, the 
New York Academy of Sciences is 
seeking support from a number of dif- 
ferent groups. It hopes to be able to 
start with a small number of students 
this fall. 



The Lamplighter 
School Logo Project 

The most ambitious Logo project 
to date was carried out jointly by the 
MIT Logo Group, Texas Instruments, 
and the Lamplighter School, a private 
school in Dallas, Texas. Lamplighter 
School has 400 students between the 
ages of 3 and 9. The school has been 
provided with 50 Texas Instruments 
Logo systems that are used through- 
out the grades. The goal of the project 
is to establish a setting in which stu- 
dent access to computers would not 
be a limiting factor and to see what 
students could learn in such cir- 
cumstances. 

The project is now in its third year. 
A half-time teacher/coordinator 
oversees the day-to-day workings of 
the project and provides individual 
Logo tutorials for every teacher in the 
school on a biweekly basis. Com- 
puters are in every classroom from 
the nursery school through fourth 
grade. Every teacher and child is in- 
volved to some extent. 

On a recent visit to the school, I 
was struck by just how comfortable 
the children are with the computers. 
Two 4-year-old girls were using a 
computer to construct geometric de- 
signs on a screen with square-shaped 
sprites. (A sprite is a hardware im- 
plementation of a turtle, to allow 
multiple moving objects on the 
screen.) Nearby, classmates were 
engaged in more conventional ac- 
tivities: building with blocks, putting 
together a puzzle, playing with toy 




CP/M USERS LOOK OUT: S/S-PASCAL IS FASTER 



Execute Total Size 
(seconds) (bytes) 

S/S-PASCAL 12.5 1117 

PL/ 1 80 * 14.0 5977 

PASCAL MT+* 19.0 3043 
PASCAL/Z* 109 3328 

Re: BYTE. September 1981. page 180 
A high level language Benchmark 

* CP/M PL/ 1 80 TM of Digital Research 
PASCAL MT + TM of MT Microsystems 
PASCAL/Z TM of Ithaca Intersystems 



AND REQUIRES ONLY 32K OF MEMORY 

S/S-PASCAL Version 3.0 for 8080/8085/Z80 

Write to get the whole story, or better send S30.00 for 

— Demo discette with compiler (READ statement not included) 
and sample programs 

— Tutorial manual (over 100 pages) 

DON'T TAKE OUR WORO FOR IT, compile your own 
programs and test them before buying full compiler 

S/S-PASCAL Version 3.0: $295 - Demo discette: $30 



^SCOTIA, SOFTWARE'S* 

Canada* B3L. 4J9- 



Standard PASCAL feature* 
plus 

Generates optimized native code 

Compiles directly into com file 

External assempler subroutines 

Random access files 

14 digit BCD floating point reals 

Chaining and overlays 

Dynamic strings 

Powerful string manipulation 

Direct access to memory 

Address and size functions 

NEW. DISPOSE. MARK. RELEASE 

and more 

"We answer ail inquiries 
the same day" 

Dealer inquiries welcome. 



cars, playing house, and finger paint- 
ing. Computers for these young 
students are just another way of ex- 

|fl^pring their world. 

VrThe typing ability of the first and 
second graders is amazing. The 
students are already writing simple 
programs, using the keyboard and 
the Logo screen editor with great dex- 
terity. One second-grade "hacker" 
had just invented a procedure that 
simulated the effect of the reset key, 
clearing the screen and printing 
"Welcome to Logol" He also proudly 
pointed out, "It doesn't erase your 

procedures!" 

In the third grade, several children 
were clustered around two com- 
puters. One of them had made a 
"secret" animation program that 
made a number of sprites move con- 
tinuously in a dynamically unfolding 
spiral. Three boys were trying to 
duplicate the procedure on the ad- 
joining computer. Another child was 
designing a sprite shape for the center 
of the screen that would look as if it 
rere emitting the spiraling sprites. 



Competition, cooperation, communi- 
cation, problem solving, program- 
ming, geometry, and artistry were all 
happening at once. Meanwhile, the 
teacher who had introduced the basic 
idea that all the students were build- 
ing on was helping another student 
figure out how to make a sprite move 

in a circle. 

These vignettes should give a sense 
of the flavor of the school. While 
some children are occupied with com- 
puters, regular school life goes on for 
others. The class next door may have 
five computers sitting idle while a 
geography or reading lesson is being 
presented much as it would be in any 
other school. Computers are accepted 
by the teachers and students as an in- 
tegral part of the school, but they are 
not allowed to dominate it. 

Some of the anticipated results of 
the Lamplighter Project have never 
happened. For example, the students 
have not used computers for creative 
writing, despite the availability of a 
simple screen editor as part of the 
Logo system. The equipment pro- 



vided to the school in the first three | 
years of the project has not included I 
printers, which would be needed to | 
make creative writing a realistic ac- 
tivity. Nor has Logo been integrated 
into as much of the school's cur- 
riculum as had been planned. Ac- 
cording to Lamplighter's headmistress 
Pat Mattingly, 'The teachers just 
don't have enough time for cur- 
riculum development in addition to 
all their other duties." With a few 
minor exceptions, the research studies 
that were expected to be part of the 
project have not materialized. Some 
unique, exciting, and wonderful 
things have been happening at the 
Lamplighter School, but except for 
the school staff, who usually are too 
busy to write, study, and reflect on 
the situation, one gets the feeling that 
"nobody's watching." 



Other Interesting Projects 

To round out the picture, I want to 
mention some other schools at which 
Logo is being used for research and 
development. The Cotting School for 
the physically handicapped in Boston 
has been the site of a series of projects 
conducted by Dr. Sylvia Weir of 
MIT. In these projects, Logo has 
enabled students with cerebral palsy, 
previously unable to communicate ef- 
fectively, to begin to realize their in- 
tellectual potential. Of all the Logo 
projects, this has been the most 
dramatic in demonstrating Logo's ef- 
fectiveness for students who 
previously had not been successful in 
academic settings. It has also made 
the most significant progress toward 
the goal of finding objective ways of 
determining just what students learn 
as they engage in Logo activities. 

Another Logo project aimed at 
discovering what students are learn- 
ing is being conducted by the Center 
for Children and Technology of Bank 
Street College in New York City. In 
this project, students in grades three 
through six have extensive access to 
Logo. The research is focusing on 
students learning problem-solving 
techniques and on social interaction 
among students as they work on Logo 
activities— two areas that have been 
highlighted, but not carefully studied 
by other projects. 



The Programmable Cube is like the W^^SSS vou 
comes \n many colors, you can turrr ^^S^SSS^mk 
carr scramble it and solve it by ^^a^^S^S^SSS^ 
with a complete solver for any scrambled cube I ^'"f^L 
extra twist- it speaks a language especially designed for cubes 
thraS? which : you can write your own cube programs, either ta 
oSKSS patterns or even to solve a scrambled cubew.trr 
your awrr cube-salving strategy- 

■ Higlr resolution graphics, color or black and: 
white, shows all a sides and simulates motion- 

■ Tel I it about your scrambled: cube^-it wilt 
lead you through the solutions 
■.Write your own cube programsr comes wittr^ 

complete programming environment including 

^ 1^ P editor and debugger. 

^8^™SSr KAvailabiefor Applet or Applell Pfus^ 48IC 

■fljUBi or 64K- Apple is a Trademark at Apple Computer. Inc. 




§How taQrderr 
- ^ Send $34.95-. 
Check. VISA or 




TMi 



MasterCard: tar | — = 

Specify-481* or 64W^ 



RCL Ba)fc31337; Hartford; 0^06103^- 



Logo Information Sources 

Here is a partial listing of organiza- 
tions that offer Logo training and in- 
formation: 

Logo Training Courses and 
Workshops: 

Austin College, Sherman, TX 75090. 
Contact Prof. Henry Gorman. 

Bank Street College, 610 West 112th 
St., New York, NY 10025. Contact 
Karen Scheingold. 

Lesley College, 29 Everett St., Cam- 
bridge, MA 02138. Contact Nancy 
Roberts. 

Logo: The Learning Center, Logo 
Computer Systems Inc. , 989 Avenue of 
the Americas, New York, NY 10018. 
Contact Mike Tempel. 

Teachers College, Columbia Universi- 
ty, Microcomputer Resource Center, 
525 West 120th St., New York, NY 
10027. Contact Karen Billings. 

Technical Education Research Centers, 
8 Eliot St., Cambridge, MA 02138. 
Contact Robert Tinker. 

University of Wisconsin— Oshkosh, 



A third interesting Logo school 
project is not a research project at all. 
At Lincoln-Sudbury Regional High 
School in Sudbury, Massachusetts, 
students learn Logo as the introduc- 
tory computer programming lan- 
guage. Experiences at Lincoln-Sud- 
bury may show the way to those 
seeking to use Logo with older 
students. 



Conclusions 

I will take the risk of drawing a few 
general conclusions from these very 
diverse projects. 

Logo can be effective for all 
students in a school setting. In fact, a 
regular theme of all the projects cited 
is the success of students who pre- 
viously had been unsuccessful in 
.school. 

fTeacher training is critical. At the 
»ry least, teachers need to under- 
stand the value of exploratory learn- 
ing and student interaction. Further, 
at all sites involving Logo in class- 
rooms, teachers have felt the need for 



Microcomputer Applications Group, 
Oshkosh, Wl 54901. Contact Don 
Voils. 

2. Organizations, Users' Groups, and 
Newsletters: 

Boston Computer Society Logo Users 
Group, One Center Plaza, Boston, MA 
02108. 

FOLLK, Friends of USP/Logo and 
Kids, 436 Arballo Dr., San Francisco, 
CA 94132. 

Friends of the Turtle, POB 1317, Los 
Altos, CA 94022. 

Logo Times, included in 99'er 
Magazine, POB 5537, Eugene, OR 
97405. 

LOGOPHILE, Logo Special Interest 
Group, c/o Higginson, Faculty of Edu- 
cation, Queens University, London, 
Ontario, K7L 3N6 Canada. 

Monadnock Area Logo User's Group, 
c/o Dan and Molly Watt, Gregg Lake 
Rd., Antrim, NH 03440. 

Young Peoples Logo Association, 
1208 Hillsdale Dr., Richardson, TX 
75081. 



continued support and training. 
While this need may diminish as 
teachers become more familiar with 
computers and Logo, it seems to be a 
reality for the present. 

Teachers and students need re- 
source materials, guidebooks, project 
suggestions, etc. The more specific 
the goals, as in the Edinburgh Logo 
Project or in the physics activities of 
the Brookline Logo Project, the more 
specialized and extensive the 
materials needed. 

Student interaction has been a 
critical and positive element of all 
classroom-based Logo projects. In 
each case, students have taken on 
significant roles as teachers of other 
students, even as teachers of their 
own teachers. 

In no case has the "full potential of 
what might be possible" with Logo 
been realized. It will probably take a 
lot of time, and many diverse efforts, 
before the learning potential of Logo 
can be fully understood and utilized. 
Whether the goal is to integrate Logo 
into existing school subjects or to use 



IBM 



personal computer 



UCSD 

p-System™ I V.1 



A superior implementation of the UCSD 
p-SYSTEM is available NOW for your IBM 
Personal Computer. 

Network Consulting has added many 
features that the professional programmer 
will find useful. These features are not 
available from any other sources. 

• Hard disk support for Corvus, Tall Grass 
Technology and others 

• 25% more floppy storage, without adding 
or modifying hardware, retaining compat- 
ibility with standard IBM diskettes 

• Double sided and double sided/double 
tracking stepping floppy disk drive sup- 
port 

• Up to 800K on each mini-diskette 

• RAM disk support (a pseudo-floppy 
volume that uses up to 51 2k RAM) 

• 8086/87/88 macro assembler 

• Extended memory support 

• Adaptable system support available for 
adding custom I/O drivers 

• Remote Terminal support 

• XON/XOFF flow control for serial printers 

• A library of program modules and other 
utilities 

• Disk write verification 

• and more! 

Standard p-System features include: 

• Standard I/O redirection (including com- 
mand files) 

• Dynamic program overlays 

• Support for asynchronous processes and 
concurrency primitives in Pascal 

• Fast Pascal p-code compiler 

• Fast FORTRAN and Basic p-Code com- 
pilers also available 

• A powerful screen oriented editor 

• A filer for handling both files and volumes 

• A Native Code Generator that processes 
your Pascal, Fortran and Basic programs 
to convert parts of them to native machine 
code 

• Dynamic runtime binding of separately 
compiled programs and units 

• TurtJegraphics for easy graphics displays 

• Print spooler for background printing 

• Symbolic debugger 

USCD p-SYSTEM from 
Network Consulting 

The only serious choice for business 

TM The Regents of the University of California 




Network Consulting: Inc. 

A106 - 1093 W. Broadway 
Vancouver, B.C. 
Canada V6H-1E21 
(604) 738-350fX 



August 1982 i BYTE Publications Inc 133 



Logo to develop entirely new kinds of 
learning environments, much work 

^^remains to be done. 

During the past year, the use of 

^^.ogo in schools has jumped from less 
than a dozen sites to hundreds. By the 
end of the coming year, it may in- 
volve thousands of classrooms with 
tens of thousands of students. As we 
struggle with the task of integrating 
new forms of learning into old struc- 
tures, we should be particularly 
aware of the opportunity to learn 
from each other and from the 
limited, but carefully supported, 
research and development that have 
already occurred. ■ 



References 

1. The Edinburgh Logo Project, Department 
of Artificial Intelligence, University of 
Edinburgh, Forrest Hill, Edinburgh, 
EH1 2QL Scotland. 

du Boulay, B. "Learning Teaching Mathe- 
matics." Mathematics Teaching, No. 78, 
March 1977. 

du Boulay, B. Teaching Teachers Mathe- 




matics Through Programming. DAI Re- 
search Paper No. 113, 1979. 
du Boulay. B. and T. O'Shea. How to Work 
the LOGO Machine: A Primer for ELOGO. 
DAI Occasional Paper No. 4, 1976. 
Howe, J. A. M. and T. O'Shea. "Learning 
Mathematics Through Logo." ACM 
SIGCUE Bulletin, Vol. 12. No. 1, January 
1978. 

Howe, J. A. M., T. O'Shea, and F. Plane. 
Teaching Mathematics Through Logo Pro- 
gramming: An Evaluation Study. DAI Re- 
search Paper No. 115, September 1979. 
2. The Brookline Logo Project, MIT Logo 
Group, Building 20C, Room 109, Massa- 
chusetts Institute of Technology, Cam- 
bridge, MA 021 39. 

Bibliography of Logo Memos. MIT Logo 
Group. 

Papert, Seymour, et al. Assessment and 
Documentation of a Children's Computer 
Laboratory. Logo Memo 48, MIT Logo 
Group, 1977. 

Papert, Seymour, Andrea diSessa, Daniel 
Watt, and Sylvia Weir. Final Report of the 
Brookline Logo Project: Project Summary 
and Data Analysis. Logo Memo 53, MIT 
Logo Group, 1 979. 

Watt, Daniel. Final Report of the Brookline 
Logo Project: Profiles of Individual Stu- 
dent Work. Logo Memo 54, MIT Logo 
Group, 1979. 



Watt, Daniel. A Comparison of the Prob- 
lem Solving Styles of Two Students Learn- 
ing Logo. Proceedings of the National 
Educational Computing Conference, 
1979. (Reprinted in Creative Computing, 
December 1979.) 

Watt, Daniel and Sylvia Weir. "Logo: A 
Computer Environment for Learning Dis- 
abled Students." The Computing Teacher, 
Vol. 8, No. 5. May 1981. 

3. Computers in the Schools, Bonnie 
Brownstein, Director, New York Academy 
of Sciences, 2 East 63rd St., New York, 
NY 10021. 

4. Lamplighter School, Headmistress Pat 
Mattingly, 11611 Inwood Rd., Dallas, TX 
75229. 

5. Logo for Handicapped Students. 
Goldenberg, E. Paul. Spec/a/ Technology 
for Special Children. Baltimore: University 
Park Press, 1 979. 

Papert, Seymour and Sylvia Weir. Infor- 
mation Prosthetics for the Handicapped. 
Logo Memo 51, MIT Logo Group, 1978. 
Weir, Sylvia. Evaluation and Cultivation of 
Spatial and Linguistic Abilities in In- 
dividuals with Cerebral Palsy. Logo Memo 
55, MIT Logo Group, 1980. 

6. Center for Children and Technology, Bank 
Street College, Karen Scheingold, Direc- 
tor, 610 West 112th St., New York, NY 
10025. 





t 




• ■ 






v* *>> 


, 4 . '* 


Vv. 

•*■■•«> I. W»« 

• .,. .. mP 






.... 






.5 MB STORAGE 







BEZSI 







► 



1.2 MB STORAGE 




We're offering you our SB*80 system in either 5 1/4" or 8" 
disk drives, your choice. Either way your system comes 
with a full size (12" diagonal) non-glare tiltable green 
screen with 24 lines by 80 character format. Its multi- 
character set offers blinking cursor, underlining, reverse 
video, and half and zero intensity. The movable, detach- 
able keyboard has a numeric pad with cursor control and 
function keys. 



Nationwide on-site and depot repair service 
througn the professionals at INDESERV 



m Single Board Technology ■ CP/M® Operating System 
■ 4MHz280ACPU ■ 64K 200ns Main Memory 
■ 8-Inch Dual Density Floppy Drives 
■ 5 1/4-Inch Dual Density Floppy Drives 

■ 2-Seriai Ports ■ 2-Parallel Ports 

■ 4-Counter/Timers ■ Expandable 

For further information about this limited offer call or write: 




*CP/M is a registered trademark of Digital Research. Inc. 

Colon,al Data Services Corp.. 1 05 Sanford Street. Hamden. Conn. 0651 4 . (203) 288-2524 . Telex: 95601 4 



Designing Computer-Based 

Micro worlds 

Well-designed Logo procedures 
can help children grasp ideas of intrinsic interest. 




Designing computer applications 
gr education might be called cogni- 
e engineering, for its objective is to 
_ape children's minds. That lofty 
goal must carry with it a commitment 
to cognitive science, the study of how 
knowledge functions and changes in 
the mind. In light of the profound in- 
fluence of computers in the schools, 
designing educational applications 
without such a commitment would be 
irresponsible. 

I believe that Jean Piaget, the Swiss 
student of knowledge, formulated the 
general solution to the problem of 
how intelligence develops. Although 
the field of cognitive science has ad- 
vanced beyond Piaget's innovative 
theories by revising and extending 
them, his insights into the nature of 
learning continue to influence teach- 
ing methods. The union of computer 
microworlds and Piagetian theory is 
the subject of this article. 



Piaget and Education 

) Central to the work of Piaget is 
constructivism, the view that the 
mind incorporates a natural growth 
of knowledge and that the mind's 
structure and organization are shaped 
by interactions among the mind's 
parts. In The Science of Education 
and the Psychology of the Child (The 



R. W. Lawler 
Le Centre Mondial L'lnformatique 
et Resources Humaine 
24 Rue Clemente Marot 
Paris, France 75008 

challenges 
educators to answer two questions: 
How does instruction affect what is in 
the mind? and What remains in the 
mind from the process of instruction 
long after the time of instruction has 
passed? In the same work, Piaget dis- 
putes both the effectiveness and the 
ethical correctness of many of the 
practices of modern education: 

If we desire to form individuals 
capable of inventive thought and of 
helping the society of tomorrow to 
achieve progress, then it is clear 
that an education which is an active 
discovery of reality is superior to 
one that consists merely in provid- 
ing the young with ready-made 
wills to will with and ready-made 
truths to know with. 



The Dilemma of Instruction 

Given Piaget's view that learning is 
a primary, natural function of the 
healthy mind, we might consider in- 
struction in any narrow sense unnec- 
essary. Children (and older students 
of life as well) learn the lessons of the 
world, effectively if not cheerfully, 
because reality is the medium through 
which important objectives are 
reached. Nevertheless, in certain 
situations children often rebel against 



the lessons society says they must 
learn. Thus the educator's ideal of in- 
spiring and nurturing the love of 
learning frequently is reduced to 
motivating indifferent or reluctant 
students to learn what full function- 
ing in our society requires. 

Teachers face a dilemma when they 
try to move children to do school- 
work that is not intrinsically interest- 
ing. Children must be induced to 
undertake the work either by promise 
of reward or threat of punishment, 
and in neither case do they focus on 
the material to be learned. In this 
sense the work is construed as a bad 
thing, an obstacle blocking the way 
to reward or a reason for punish- 
ment. Kurt Lewin explores this dilem- 
ma in 'The Psychological Situations 
of Reward and Punishment " (A Dy- 
namic Theory of Personality: 
Selected Papers of Kurt Lewin, 
McGraw-Hill, 1935). The ideas of 
Piaget and Lewin have led me to state 
the central problem of education 
thus: How can we instruct while re- 
specting the self-constructive char- 
acter of mind? 



Computer-Based Microworlds 

In Mindstorms: Children, Com- 
puters, and Powerful Ideas (Basic 
Books, 1980) Seymour Papert pro- 



BHK5«g 



STATUS MO Presents $PE6ML PBICE$ 




_ — | Disk Drh* 10 Mb Formated 
5HUGART 8SIR Dbl Dens Dbl sidecj 18" 
APPLE COMPATIBLE MICRO-SC1 A2 35 track 
Jm£ COMPATIBLE MICRO-SC1 A40 1 40 > track ; dnv. 
APPLE COMPATIBLE MICRO-SC1 A 70 70 track drive 
APPLE COMPATIBLE MICRO-SC1 Controller for above 

APPLE PRODUCTS 

MICROSOFT Premium Pack 
MICROSOFT 16K Ram Card 
MICROSOFT Z80 Card 
WESPER 16K Ram Wizard Card 
NOVATION CAT Modem 
NOVATION D CAT Modem (direct 
NOVATION APPLE CAT II 
SUnTMOD II (converts TV to 



RS-232 connection) 



) 



II 

I& Products Joystick 



JCALC for Apple II 
MICRO PRO WordStar (Apple II) 
MICRO PRO WordStar (CP/M) 
MICRO PRO SuperSort (Apple II) 
MICRO PRO SuperSort (CP/M) 
MICRO PRO CalcStar (CP/M) 
MICRO PRO CalcStar (Apple II) 
MICRO PRO OataStar (CP/M) 
MICRO PRO DataStar (Apple II) 
STONEWARE DB Master 
JtffeEasy Writer 40 Column (Apple II) 
jk/ON-TATE dBASE II (CP/M) 
iBPsa/SOFTAPE Magic Window (Apple II) 



SYSTEMS 
SYSTEMS 
SYSTEMS 
SYSTEMS 
SYSTEMS 
SYSTEMS 



$-100 PRODUCTS 

CALIFORNIA COMPUTER 
CALIFORNIA COMPUTER 
CALIFORNIA COMPUTER 
CALIFORNIA COMPUTER 
CALIFORNIA COMPUTER 
CALIFORNIA COMPUTER 
HAYES Micromodem 100 
HAYES Smartmodem 
HAYES Chronograph 

PRINTERS & PRODUCTS 

EPSON MX-80 F/T 
EPSON GRAFTRAX 80 

MICROCOMPUTER & MONITORS 

NEC 8001A Microcomputer w/32K RAM 
NEC 8012A I/O Unit w/32K, expansion slots 
NEC 8031 A Dual Mini-disk drive unit 
AMDEK Video 100 (12" B/W) 
AMDEK Video 300 (High Res Green) 
SANYO 13" Color 



2422-Floppy Ctrl CP/M 2.2 
2710 4 serial I/O A & T 
2065 64K Static Ram A & T 
2032 32K Static Ram A & T 
2116 16K Static Ram A & T 
2720 4 parallel A & T 



COST 

$3200 
495 
425 
399 
575 
100 



575 
140 
299 
95 
135 
148 
329 
33 
55 
53 



150 
195 
249 
109 
125 
189 
139 
219 
199 
179 

89 
479 

79 



323 
269 
519 
621 
239 
189 
329 
217 
189 



745 
73 



710 
590 
710 
129 
219 
490 



CREDIT CARD ORDERS CALL 

(800) 227 S414 

M-F 9am-5pm PST 
kP ric.s a„ cash pries. Add 3% surchor,. 

Change without notice. mmmmmm MMI 

Make ail checks payable to: STATUS QUO 

(W. must allow two w.ks for all person ol checks «— < ~ *~ ^ 
Lney order or cashier's check or order usmg your cmd.t cord^ 

STATUS QUO, div. of I.T.A.T. Associates, nc, 2095 Van Ness Aye Son 
Francisco, CA 94109. For technical questions or special orders/prices call 
(415) 474-1007. 



Circle 197 on inquiry card. 
Please call us with prices. 



poses computer-based microworlds 
as a general solution to the problem 
of motivation. One argument for 
Papert's proposal runs as follows: 
learning is often a gradual process of 
familiarization, of stumbling into 
puzzlements, and resolving them by 
proposing and testing simple hypoth- 
eses in which new problems resemble 
others already understood. Micro- 
worlds are in essence "task domains" 
or "problem spaces" designed for vir- 
tual, streamlined experience. These 
worlds encompass objects and pro- 
cesses that we can get to know and 
understand. The appropriation of the 
knowledge embodied in those experi- 
ences is made possible because the 
microworld does not focus on "prob- 
lems" to be done but on "neat phe- 
nomena"— phenomena that are inher- 
ently interesting to observe and inter- 
act with. 

With neat phenomena, the chal- 
lenge to the educator is to formulate 
so clear a presentation of their ele- 
ments that even a child can grasp 
their essence. A well-designed com- 
puter microworld embodies the sim- 
plest model that an expert can im- 
agine as an acceptable entry point to 
richer knowledge. If a microworld 
lacks neat phenomena, it provides no 
accessible power to justify the child's 
involvement. We can hardly expect 
children to learn from such experi- 
ences until they are personally en- 
gaged in other tasks that make the 
specific knowledge worthwhile as a 
tool for achieving some objective. 
This amounts to an appropriate shift- 
ing of accountability from students 
(who have always been criticized for 
not liking what they must learn) to 
teachers, those who believe that their 
values and ideas are worth perpetuat- 
ing. 

Computer-based microworlds heip 
tailor instruction more closely to 
Piaget's idea of the natural mode of 
learning. I will illustrate this point by 
presenting two examples of com- 
puter-based microworlds. 

The POLYSPI Microworld 

POLYSPi (from "polyspiral") is a 
name for a three-line procedure in the 
Logo language and for the class of de- 



(la) POLYSPI 10 SO 3 



(lb) POLYSPI 10 81 3 



(lc) POLYSPI 10 82 3 




(Id) POLYSPI 10 83 3 



(le) POLYSPI 10 84 3 



(If) POLYSPI 10 85 3 






FlKures la _if : Polyspiral designs generated by changing one variable or me tnree in ine r^u.or — - 

vrocedures variables are DISTANCE. ANGLE, and CHANGE (in distance). The procedure draws a design by going forward the specified 
distance turning at the specified angle, then increasing the distance by the specified change, going forward for the incremented 
distance at the specified angle, and so on. In this example, the distance variable and the change in distance are held constant. The 
angle variable is stepped up by one degree in each design. The strikingly different designs show the power of the concept of stepping 

variables. 




signs produced by different execu- 
tions of that procedure. Figures la-lf 
show some examples of POLYSPI de- 
signs. The POLYSPI procedure is 
stated in listing 1. Some of the designs 
are pretty, mainly because surprising 
spiral patterns emerge under certain 
conditions. The general appeal of 
POLYSPI designs largely accounts for 
the adoption of turtle graphics as a 
subsystem of languages such as 
Smalltalk, Pascal and even some im- 
plementations of PILOT. The vari- 
ability of the POLYSPI procedure 
sometimes permits even a beginner to 
lurprise more expert users (as well as 
imself ) with the discovery of beauti- 
ful designs. 

The procedure in listing 1 and its de- 
signs comprise a microworld. The ob- 
jects of the microworld are all the de- 
signs that the procedure can generate, 
an engaging and extensive domain for 



exploration. More important, the 
designs are a class of "neat phenom- 
ena" whose generation can be made 
comprehensible with the following 
small set of ideas. First, the POLYSPI 
procedure provides a crisp model of 
variable separation: the three vari- 

The POLYSPUTilcrowor. 
reveals the powerful 
idea of stepping 
variables. 

ables DISTANCE, ANGLE, and 
CHANGE are each used once, and used 
differently, in a simple procedure 
text. Second, the difference in relative 
potency of the variables (the impact 
of a unit change on the produced 
design) is obvious and striking. 
(ANGLE and then CHANGE are much 
more potent than DISTANCE.) 



The POLYSPI microworld reveals 
the stepping of variables as a power- 
ful idea. By stepping variables I mean 
identifying one variable as a dimen- 
sion of examination and holding all 
other variables constant while the 
chosen one is varied incrementally. In 
short, this microworld provides a 
clear model of how particular things 
may be generated through their inter- 
secting dimensions of variation. 
Piaget judged variable-stepping to be 
an essential component of formal 
operational thought. The idea is a 
powerful one because it is almost uni- 
versally useful; it is crucial to the pro- 
cess of scientific investigation. 

Within the microworlds of turtle 
geometry, the insights achieved with 
POLYSPI exploration are easily ex- 
tended to a related microworld of 
INSPI designs. The INSPI procedure 
differs from POLYSPI only in that the 



Listing H The POLYSPI procedure, written in Logo From only three «™M«~ 
rffaJct. angte, and change in distance-this procedure can generate a remarkable 
variety of polyspiral designs. The procedure draws by going forward the specified 
dZtance tZrnlg at the specified angle, then increasing the distance by the specified 
ct^e going flrward for the newly incremented distance at the same specified angle, 
ans so on. Some designs drawn by POLYSPI appear in figures la-lf. 

TO POLYSPI : DISTANCE '.ANGLE :CHANGE 
FORWARD : DISTANCE 
RIGHT '.ANGLE 

MAKE "DISTANCE : DISTANCE + .CHANGE 
POLYSPI .DISTANCE ".ANGLE .CHANGE 
END 




change value is applied to the ANGLE 
variable instead of to the DISTANCE 
variable. (For a case study of a child's 
ability to grasp and extend this idea, 
see my article "Extending a Powerful 
Idea," in a forthcoming issue of The 
Journal of Mathematical Behavior.) 

The BEACH Microworld 

The adolescent's initiation to for- 
mal thought differs greatly from the 
preschooler's introduction to reading, 
vet both learning experiences involve 



grasping central representations. 
What the prereader learns in an 
alphabetic language is a serial sym- 
bolic representation for words that 
signify the names of objects, actions, 
and so on. Let me here describe a 
Logo microworld for learning the 
alphabetic language. This micro- 
world helped my 3-year-old daughter 
learn to read with minimal direct in- 
struction. 

While previous Logo implementa- 
tions focused on a single, all-im- 



portant agent— the turtle— TI Logo 
also has sprites. A sprite is a video- 
display object that has a location, a 
heading, and a velocity, but no draw- 
ing capability. It may be associated 
with a shape (which it "carries" and 
which assumes one of 16 colors). The 
shapes can be easily defined and 
changed by the Logo user. There may 
be a maximum of 25 shapes. The im- 
portance of a multitude of easily dis- 
criminated objects for early language 
applications cannot be overesti- 
mated. TI Logo has a second graphics 
system, "tile graphics," that is com- 
patible with the sprite graphics sys- 
tem. The static tiles, which may also 
assume 16 different colors and exhibit 
modifiable shapes, provide a suitable 
"background" for the movements of 
the dynamic sprites. The result is the 
opportunity to create scenarios that 
have many moving objects with dif- 
ferent shapes and different colors and 
a static but vivid backdrop. The 
BEACH microworld permits the crea- 
tion of such scenarios, as the scenes in 
photos la and lb illustrate. 




Allenbach is putting tomorrow on disks- 



The future of the world is written in computer software. 
And Allenbach disk duplication is making sure that the 
future is faithfully reproduced. We use our own 
Allenbach diskettes and state' of the art epuipment, 
with electronic surface evaluation of each diskette 
before use. Copies are 100% verified, track by track, 
and carry the Allenbach lifetime warranty against 
defects in workmanship or materials. 
For information and prices on disks, duplication, and 
dealer information, please call (800) 854-1515. In 
California, call (714) 438-2258 collect. 






Allenbach 
Industries Inc. 



\ 



Circle 12 on inquiry card. 




(lb) 



^ ^ v- v.. V, **** ' 



V-. *V-' *V> V V- "V % > V 



r QCA ru r^irrmiiorld Photo la shows a scene with 

Photos la-lb: Two scenes from the BEACH ™*™«™^ 3-year-old child. The 
many objects. Photo lb shows a scene Icroworld. which 

microcomputer. 



Meaningful Names Ease Learning 

Because Logo gives the user great 
freedom to define and name proce- 
dures, appropriate descriptive English 
words can be used. For example, SUN 
can be the name of the procedure that 
creates a yellow ball on the display. 
The word UP can name the command 
that increases the value of a sprite's y 
coordinate. Repeated often enough, 
UP puts the SUN in the sky above the 
REACH. Another word, such as SLOW 



or FAST, can set the SUN in motion. 
Because new procedures are easily de- 
fined, the child, a family member, 
friend, or teacher could even make 
the SUN ZOOM if the child wishes. 
Such flexibility permits the micro- 
world to be tailor-made to suit any 
child. To the extent that the child par- 
ticipates in defining the objects to be 
part of the world, their attributes, 
and the actions they are to perform, 
the microworld is also constructed by 



the duld herself. My 3-year-old, 
Peggy, her older siblings, and I chose 
about 20 objects to populate her 
world, designed and made shapes to 
represent them, and wrote the proce- 
dures to create and manipulate them. 
The vocabulary of her BEACH world 
includes the following: 

OBJECTS 

BEACH, BIRD, BOAT, BOY, CAR, DOG, 
FISH, GIRL, HOUSE, JET, KID, MAN, 
MOON, OAK, PINE, PLANE .PONY, 
STAR, SUN, TRUCK, VAN, WAGON 

ACTIONS 

UP, DOWN, MOVE, BACKWARD, 
FAST, FLY, HALT, SAIL, SHOW 
SWIM, TURN, WALK, ZAP, ZOOM, 
PAINT BLACK, PAINT GREEN, etc. 

When Peggy began to play with 
this computer microworld, she did 
not recognize any words except "by/' 
and she had no idea what that meant. 
Her ability to discriminate between 
letters and name them was undepend- 
able and idiosyncratic. She began 
keying words, copying them letter by 
letter from a set of 4- by 6-inch cards I 
had made. Soon she began keying her 
favorite or most-used words from 
memory, and later she was able to 
read those individual words in other 
contexts. Now she deals with the 
written language one word at a time 
(as infants begin to speak with specif- 
ic signification). To handle sentences 
(other than "paint some-color-name") 
or begin phonetic decoding of words, 
she will need more complex micro- 
worlds. 

For Peggy, the learning of reading 
and the learning of writing have been 
synchronized (as speaking and inter- 
preting speech are for the toddler); 
she learned to read her 30-word vo- 
cabulary by learning first to "write/' 
i.e., key the words on the computer 
terminal. Writing was an essential 
part of controlling the compucer 
microworld that engaged her. My 
role as teacher changed from task- 
master to occasional consultant. I 
would answer questions Peggy 
brought me after she had tried to 
work with the constructed reality of 
the BEACH microworld, and I helped 
her when she had problems, bu: I 
offered her no lessons beyond the rule 
that words are keyed letter by letter, 



Circle 169 on inquiry card. 

ERG/68000 




MINI-SYSTEMS 



□ Full IEEE 696/S100 
compatibility 

HARDWARE OPTIONS 

□ 8MHz or 10 MHz 68000 CPU 

□ 4-8 RS232 Serial Ports 

□ 64K STATIC RAM (70 nsec) 

□ 256K Dynamic RAM, with full 
parity 

□ 8" D/D, D/S floppy disk drives 

□ 5MB-32MB hard disk drives 

□ Full DMA host adaptor 

□ 20MB tape streamer 

□ 10 to 20 slot backplane 

□ 30 amp power supply 

^ SOFTWARE OPTIONS 

□ 68KFORTH 1 systems language 
with MACRO assembler 

□ Fast Floating Point package 

□ Motorola's MACSBUG 

□ IDRIS 2 operating system with 
C, PASCAL, FORTRAN 77, 
68K-BAS1C 1 compilers 

Trademark 'ERG, Inc. 

Whitesmiths 

30 day delivery 
with valid Purchase Order 

OEM prices available 
For CPU, Integrated Card Sets 
or Systems. 




Empirical Research Group, Inc. 

P.O. Box 1176 
Milton, WA 98354 
206-631-4855 



left to right, and that a specific sym- 
bol meant she should press the Enter 
key. 

I make no claim that computer 
microworlds can teach all reading 
skills, nor that this specific BEACH 
world would appeal to other children 
in different circumstances. I do, how- 
ever, see the BEACH microworld as a 
prototype of the various worlds that 
others may fashion for small child- 
ren. 

Design Heuristics: Powerful Ideas 

A computer microworld should be 
constructed around a powerful idea, 
one worth the instructor's time to de- 
velop or the student's time to explore. 
Who decides if an idea is sufficiently 
powerful You do, at first, when you 
design a microworld. Next, the stu- 
dents determine the worth of the 
microworld as they incorporate the 
idea into their minds or reject it. 

If you need a little guidance when 
you design a computer-based micro- 
world, Papert (in Mindstorms) offers 
four criteria for powerful ideas: they 
should be simple, general, useful, and 
syntonic. The idea behind a micro- 
world must be formulated as simply 
as possible; an idea can be power- 
ful only when understood. Even if 
an idea is embodied in a specific 
microworld, it will not be useful 
through extension unless it is general. 

Reality dictates the candidates for 
powerful ideas. Society also declares 
what ideas are important: if you can't 
read, for example, a technological 
society relegates you to subhuman 
status. But it is your own mind, more 
than any advice, that can tell you 
what ideas are powerful. Your own 
insights enable you to integrate im- 
portant experiences. An idea is 
powerful, then, if it gives form to 
your understanding of life. It follows 
that you cannot inspire others with 
an idea unless it has first inspired 
you. 

Interconnection of Knowledge 

What Papert labels the "syntonic" 
characteristic focuses on how an idea 
assumes power within the mind of an 
individual. An idea is powerful for a 
person if it relates and unifies knowl- 
edge gained in diverse experiences. 



An idea gains power if it can be | 
reduced to a concrete model that 
serves as a metaphor for the interpre- 
tation of subsequent problems. Such 
a model helps explain which aspects 
of new problems must be considered, 
which may be neglected, and which 
anomalies must be explained away on 
a basis of local evidence. Models 
prove more or less powerful depend- 
ing on the individual's interests and 
experiences. 

The most essential characteristic of 
powerful ideas is their relation to the 
individual's previous knowledge. You 
can tell students that one situation 
resembles another, but recognition of 
such comparisons is more powerful if 
it is the students' own discovery. 
They will make the connections be- 
tween the structures of one idea and 
another at a level of detail appropri- 
ate to their specific prior knowledge 
and feelings.This internalization is 
the basis of an idea's power for the in- 
dividual. 

An analogy may help here. If you 
solder a connection at too low a tem- 
perature, you can get mechanical 
binding but undependable electrical 
contact. Ideas imposed by instruction 
are like badly soldered joints. Only 
the individual has the power to fuse 
connections between new ideas and 
his or her own most personal 
thoughts and feelings. These connec- 
tions alone can make an idea an im- 
portant part of how the person sees 
the world and behaves in it. 

Paradoxically, an excellent way to 
harness the students' understanding 
for engagement with ideas is to liber- 
ate their expressiveness. Because 
Logo is a vehicle for free exploration, 
knowledge built from Logo is syn- 
tonic, appropriate to the person, and 
experienced as an authentic, intimate 
part of the self. Such is the power of 
an approach to learning that frees the 
individual to create within a social 
context that makes our culture's most 
powerful ideas accessible. 

I/O and Applications Design 

An application design negotiates 
between a specific objective and the 
potential of the equipment. Com- 
puters are general-purpose symbol 
manipulators, so they can deal 



abstractly wun <m iuw. — * 

computer system can do in an inter- 
esting way, however, depends on its 
input/output (I/O) devices. Look for 
something special about a machine's 
ijife) suggest the kinds of neat phe- 
n %f(ia the system could exhibit. 
Consider these examples from previ- 
ously implemented Logo systems: 



•The accessibility of the robot floor- 
turtle world to a child's physical in- 
tervention can lead even a small child 
into simulating the turtle's actions 
and into debugging procedures (after 
fixing a procedure "manually/' a 
child can become more engaged in 
fixing it symbolically ) . 
•Turtle graphics— whose appeal de- 
pends largely on the emergence of 
patterns from simple procedures that 
command the drawing of many 
lines— came into its own only with 
the general availability of bit-map- 
based displays. 

•Logo on the GTI-3500 had a signifi- 
cant potential for engineering and 
physics simulations because a hard- 
ware-implemented "spin" primitive 
Jg^\ded the forward and right primi- 
of "classical" Logo. 
•The TI 99/4A joins together a gen- 
eral-purpose microprocessor (where 
TI Logo is implemented) with a 
special-purpose graphics processor 
that manipulates the sprites that give 
TI Logo its most striking effects. 

As increasingly powerful micro- 
processors become affordable, the 
special quality of each will bring new 
potential for creating engaging micro- 
worlds. More powerful microproces- 
sors and graphics slave processors 
may, for example, bring molecule 
modeling within reach. Local net- 
works of small machines may permit 
group simulation of economic and 
political situations (as in games) that 
are now too abstract, rule-driven, 
and theoretical to interest many 
young people. There will continue to 
be opportunities for creating micro- 
worlds around the most powerful 
>as of contemporary science and 
lology. 

_ f in Microworlds 

Logo procedures can serve as a 



formal systems. The commands of 
Logo are designed to communicate 
with a computer and its output de- 
vices, but the extension of Logo 
through procedures whose names are 
natural-language words can make the 
objects and actions more comprehen- 
sible. This ability to be extended is a 
key feature for young children. 

But Logo is only a quasi-natural 
language; a Logo procedure must run 
on a machine. Further, the objects of 
a Logo microworld are formal; they 
can be completely defined by a speci- 
fication of their state variables. One 
of the simplest of these objects is the 
Logo screen turtle. Once you have 
specified the turtle's location, 
heading, and pen position, there is no 
more to say about it. The operations 
of a microworld are also completely 
specifiable in terms of the effects they 
have on state variables. The RIGHT 
and LEFT commands, for example, 
modify the heading of the turtle but 
do not affect its location. Given the 



ease of specifying tne interaction ui 
state-change operations with state 
variables, a first criterion for the 
quality of any Logo implementation 
(an application microworld or the in- 
terpreter itself) is the clear presenta- 
tion of the state variables to someone 
using the system. Two examples of 
representation inadequacies in TI 
Logo can clarify the point: although 
the heading of a sprite is a significant 
state variable, it cannot be deter- 
mined by inspecting the object's ap- 
pearance (the shape carried by the 
sprite) when its velocity is zero; it is 
impossible to determine visually 
which sprite is the "current" object, 
i.e., the one or ones that will respond 
to the next Logo command. Ideally, 
the equivalent of a SHOWTURTLE/ 
HIDETURTLE set of commands would 
show which is the active sprite. What- 
ever the limitations of a specific Logo 
implementation, anyone who designs 
a computer-based microworld should 
strive to represent all the state vari- 



Turnaround time in hours and days, not: 
weeks. You get your disks when you need them. 

- - t , . Each copied track is checked bit 
by bit. If it doesn't match your original, it isn't 
shipped. 

v> - Standard, double-boot, and copy- 

resistant formats. 50 copies minimum, no 
maximum. 

- ~ • Set-up as low as S1 0 per disk. 
Copying only from 30<t, copying and 3M disk 
from S2.0D. Other disks and services also 
available. 

Years of disk duplication experience 
insures a problem-free shipment on time — time 
after time. 

For all your Apple® compatible copying needs. 



ALF 



1zuiS Estes 



Denver. CO SQ21 5 [3Q3J 




August 1982 &> BYTE Publications Inc 151 



ables in a visible, obvious way. Do- 
ing so enhances the comprehensibility 
of the ideas embodied in the objects 
and their manipulations. 



Comments on a New Microworld 

One of the objectives of Logo is to 
put power in the hands of beginning 
users. Even powerful ideas usually 
come from striving to reach a simple, 
down-to-earth objective. To de- 
mystify designing a microworld, I 
would like to present a few comments 
on some work in process. I wanted to 
develop an effective way to present 
some ideas of algebra to a 12- 
year-old. I remembered a casual com- 
ment of a former MIT Logo col- 
league, Andy diSessa, that one of the 
most powerful ideas accessible 
through Logo was embodied in "pro- 
cedures that output." At the time, I 
was mystified, even though Andy 
had explained that his comment was 
based on the fact that such a proce- 
dure was equivalent to a mathe- 
matical function. That observation 
came back to me. Algebra is about 
mathematical functions. Although I 
couldn't fully appreciate Andy's com- 
ment, it focused my attention on a 
personally comprehensible way of ex- 
pressing mathematical functions in 
Logo. 

Common mathematical functions 
assign the value of one variable (call 
it y) to the value of some expression 
based on another variable (call it x). 
Assigning values is just what the 
MAKE command does. If a superpro- 
cedure controlled assigning to y the 
value of an x-based expression for the 
domain of possible values of x, it 
would generate any function express- 
ible in the Logo language. When 
given two inputs (x.y), the DOT 
primitive of Apple Logo draws a dot 
at the screen location of those coor- 
dinate values. If the value of x is in- 
cremented across the domain of pos- 
sible x-coordinate values, and y is 
specified in terms of the value of x, 
DOT can be used to plot discrete 
sketches of mathematical functions. 
A second method of drawing func- 
tions is possible. If those "dotted" 
locations are used as the position co- 
ordinates of a SETTURTLE (SETPOS1- 
T10N) command, the screen turtle will 



draw a line-segment approximation 
to a mathematical function. These are 
the ideas around which the PLOTTING 
microworld is constructed. Photos 2a 
and 2b show examples from the 
PLOTTING microworld. 

How can a person go from com- 
mon experiences to a new idea by do- 
ing something only slightly unusual— 
but with that small difference provid- 
ing access to a range of 




Photos 2a, 2b: Two examples of the PLOT- 
TING microworld. Photo 2a shows the con- 
trast between the straight-line plot ofy**x 
and the parabolic plot ofy = .2x 2 . Photo 2b 
contrasts the same parabolic plot with a 
plot of y=*.25x (segmented line), an at- 
tempt to fit the slope (heavy line) of the 
parabola at a point. See listing 2 on page 
158 for the DOTPLOT procedure from the 
PLOTTING microworld. 

phenomena? Think about what kinds 
of experiences younger students 
might have had that could support 
learning about mathematical func- 
tions. Any child who uses Logo for a 
while learns to define specific variable 
values using the MAKE primitive; for 
example: 

MAKE "MY. NAME "BOB 
MAKE "MY. AGE 42 



The minimal significant complication 
possible in the specification of a vari- 
able is to make its value depend on 
something else, such as keyboard in- 
put. It is common for beginners to 
write routines such as the greeting 
below for inclusion in some more am- 
bitious program: 

TO GREET 

PRINT [WHAT'S YOUR NAME ?] 
MAKE "WHO READWORD 

;accept keyboard input 
PRINT (SENTENCE 

[GLAD TO MEET YOU,] :WHO) 
END 

We can start with nonarithmetic ex- 
amples of variables as functions of 
other variables. They can be simple or 
complex. Graphs of equations can be 
viewed as another, more specific 
form of a familiar kind of relation— a 
new representation for a familiar 
idea. The algebraic formulas with 
which we usually associate the graphs 
of equations are seen as another de- 
scription of a correspondence rela- 
tion, a description that is specific and 
limited, but very powerful. 

Making clear the connection be- 
tween concrete uses of programming 
variables and mathematical functions 
is one justification of a PLOTTING 
microworld. This idea is one I judge 
to be powerful. The programming 
needed to make a Logo PLOTTING 
subsystem is nearly trivial (see listing 
2), but that is precisely the virtue of a 
powerful language: its expressiveness 
makes ideas and functions stand clear 
of accidental complications. 



Extending the PLOTTING World 

If we look beyond the simple plot- 
ting of functions, the intellectual ex- 
tensions of such a microworld can be 
simple and striking. Consider these 
two possibilities. First, when the do- 
main of x is specified with beginning, 
end, and increment or step-size (to 
control the grain of the plotted func- 
tion), the slogan through which con- 
tinuity is often expressed becomes an 
almost obvious consequence of the 
"dotted" representation: "you give 
me an epsilon, and I can give you a 
delta such that whenever the dif- 
ference between successive values of x 



Listing 2- The OOTPtOT procedure, written in Logo. The procedure plots y as a func- 
tion of x for values of x incremented by CHANGE. Resulting plots appear in photos 
2a-2b. 



~ hi 



O DOT.PLOT -.CHANGE 
MAKE "X -135 
PRINT [MAKE "Y A FUNCTION OF :X1 
MAKE "FUNCTION READL1ST 
LABEL "AGAIN IF :X > 135 [STOP] 
RUN FUNCTION m w wl 

IF NOT OR :Y > 1 19 :Y < -1 19 [DOT SE :X :Y] 
MAKE "X :X + :CHANGE 
GO "AGAIN 
END 



Ustin* 3: The U1 procedure, written in logo. Using the variables COEFF1 , COEFF2, 
and CHANGE, the procedure draws Lissajous figures like those shown in photos 3b, 3c, 

and3e. 

TO U1 :COEFF1 :COEFF2 :CHANGE 

!£«E "^NlisWNCE [MAKE "X 100 • ^^^^SS. 

Sake -fun2 (sentence penSSwn 

PENUP RUN :FUN1 RUN :FUN2 SETPOS (SENTENCE :X :Y) PENDOWN 

LABEL "AGAIN MAKE "ANGLE .ANGLE + :CHANGE 

RUN :FUN1 RUN :FUN2 

SETPOS (SENTENCE :X :Y) 

GO "AGAIN 

END 




is less than delta, the difference be- 
tween successive values of y will be 
less than epsilon." Second, consider 
the implications for understanding 
the differential calculus. When plot- 
ting the value of a function, it is sim- 
ple to save the value of the prior 
point-couple and calculate the slope 
of the function. This is an empirical 
form of differentiation. A micro- 
world of plotting tools (whose ac- 
tivities could include plotting func- 
tions, the empirical derivation of 
slopes of those functions, and curve 



fitting— with the plotting tools— to 
those empirically derived slopes) 
could provide a body of practical ex- 
perience about the relations between 
functions and their slopes. This ex- 
perience, for which differential cal- 
culus will later provide a theory, will 
make the calculus easier to appreciate 
and assimilate. 

These ideas may interest a math 
teacher or a psychologist, but would 
any child be interested in plotting 
mathematical functions? Are there 
any accessible neat phenomena? This 



is the most important final question 
the creator of every microworld must 
face. The concrete appeal of this 
microworld must be the creation of 
appealing (and possibly puzzling) 
graphic designs. The beauty of turtle- 
geometry designs derives from the use 
of repetition and variables in simple 
procedures. This observation sug- 
gests that we look at repeating func- 
tions such as those produced by the 
sine and cosine primitives. Photos 
3a-3f show six designs made from 
combinations of sine and cosine func- 
tions. These designs, generically 
known as Lissajous figures, are my 
candidates for neat phenomena of the 
PLOTTING microworld. [Editor's 
Note: Named for French physicist 
Jules Lissajous, each of these figures 
consists of the series of plane curves 
traced by an object that executes two 
mutually perpendicular harmonic 
motions. . . . P.L.] The method of 
the procedure shown in listing 3 is to 
calculate a screen location with x as a 
sine function of an angle value and y 
as a cosine function of the same 
angle. The design is made when the 
turtle draws a line as it moves from 
one calculated location to the next 
one. The procedure is stopped man- 
ually. 

Lissajous figures are similar to 
POLYSPI designs in general character 
because they are made of line seg- 
ments that show natural classes or 
families of shapes and occasionally 
emerge as surprisingly beautiful. Like 
INSPI designs, they are somewhat 
mysterious to those who think more 
concretely than formally. Are they 






$$ READ THIS IF 

BEST HARDWARE 



YOU WANT TO SAVE MONEY $$ 

AND SOFTWARE DEALS AVAILABLE! 



APPLE BUSINESS SOFTWARE 

Visicalc JJgg 
Versatorm 

Milestone J255 

Supercalc J?25 
DB Master 

DB Master Util. Pak $ 79 
Pro Easywriter Combo \ 

Accounting Plus Call 

BP! Software \ m f o f 

dBASEII l„ Best 
FMS-80.81,82 Pnces 
VISI Series Software 9 
♦ THE LAST ONE* 
The program that writes 
programs! Special Offer 
with purchase. 
APPLE PERIPHERALS 
Thunderclock 
Basis Encoder Board 

(U/LCase) 
Mountain Comouter Prod 
Videx Products 



Call 
S125 

S109 
Call 
Call 



Call 



Call 
for 
Best 
Prices 



Microsoft Products 1 
Corvus Products f 
SVA Products 

* NEW PRODUCT LINES 
IBM Software and 

Peripherals 
Atari Software 
TRS-80 Software 

♦ INTRO SPECIAL* 

Basis 1 08 Computer Call 
Videx Visicalc PreBoot Call 

♦ SPECIAL* MICROSOFT 
PREMIUM SYSTEM, incl 
Microsoft Z-80 Card 
Microsoft l6KCard 
Videx 80 Column Card 
Videx Soft-Switch 
OsDorne CP/M Guide 

★ DISKETTE SPECIALS * 
Maxell MD-1 (Box of 10) 
Maxell 8" (Box of 10) 
Vercatim 5V« " 
Verdatim 8 



All 

for 
Only 
$625 



COMMUNICATIONS 

Hayes Micromodem II 
Hayes Smart Modem 
Hayes Chronograph 
Novation Apple Cat II 
Micro Courier 
Pro Z-Term 

PRINTERS & INTERFACES 

NEC Spinwriter 7710 S2350 
Anadex DP-9501 $1295 



$275 
S235 
$225 
$335 
$210 
Call 



VISA 



Mimmum ordtr $100 Cisnwri cnee« »na mow 
orairs icmoim Ada 3% lor VISA of MC Add 3% 
tof sniopwiq/in»uf»i»c«/Mnaiinq. UPS m co ° 
Pnctt suo*ct to cn«nq« Call to »«nl* Ordw now* 
9-6 POT Mon-fn Personal cnoc«» allow 20 dm 
a cmar All orodvcts wiW luH manulacturot % mu- 
ramv . mm "~« Cam. ro«K»m add 6% urn 
tai 

Aqom is a rtdniorod tradtmam ol Aopio Comoultr 
inc AH dr.no n.mot ar. r.q.xorod tradomar.* 



Okidata Microline 83A 
CCS Interface Cards 
Qume and Diablo 

MICRO PRO 

Wordstar 

Supersort 

Mail Merger 

Data Star 

Spell Star 

Calc Star 

CP/M 8" Versions 

COMPUTER SYSTEMS 

Xerox 820 Computer 

Xerox Penpnerais 



$745 MONITORS 

Call NEC Hi-Res 12" Green 

Call NEC Hi-Res 9 " Green 

NEC RGB 12" Color 

$230 Sanyo Monitors 

$130 Amdek Monitors 

S 99 MISCELLANEOUS 

S230 Micro Sci Drives 

$130 16-Bit Apple Card 

$130 TG Joysticks 

Call TG Paddles 

ABT Keypads 

Call System Saver Fan 

Call Disk Storage Pages (10) 



«=^=^OMMUNI 

H_T inc. 



S17C 
$165 
$995 

Cai. 
Ca: 



"M 



1400 GRANT AVE. / NOVATO. CALIFORNIA 94947 
IMMEDIATE DELIVERY 
PHONE ORDERS CALL COLLECT 

41 5.A92-7139 or 415-897-1414 



Cireia 83 on inauirv cara. 



Apple Log 

Logo Computer Systems, fnc. 



What is Logo? 

Logo is a computer programming language, 
an educational philosophy, and a communiiy 
of adults and kids. This brochure provides 
you with information about ail three of these 
aspects of Logo. 

The Logo programming language is the result 
of 15 years of research in computer education. 
It is designed to combine ease of use, for the 
beginning programmer, with powerful pro- 
cedural capabilities, to help the advanced 
user develop complex applications. 



Contents 

• The Logo Community 

• Some Logo Activities 

• The Logo Philosophy 

• The Logo Language 

• Comparison with BASIC and Pascal 

• How is Logo Used in Schools? 

• Recommended Reading 





TO SPI :STEP 
FO :STEP 
RT :ANGLE 
SPI :STEP + 2 
END 



ANGLE 



.-ANGLE 



The Logo Community 

Ve' ve learned that two computers running 
,ogo in one classroom are much better than 
me computer in each of two rooms. The rea- 
on is that Logo users, even when they're 
working on completely separate projects. 
*nefit a lot from seeing each other's ideas, 
nd helping each other design and debug 
leir programs. 

his sharing of ideas is a vital part of the 
ogo style. We'd like to welcome you to a 
ommunity of adults and kids, including Logo 
e veiopers. students, and teachers. This 
widespread group shares a culture based on 
)me ideas about learning and computers, 
leas which come from computer science 
nd from Piagetian cognitive psychology. 

/ho uses Logo? 

ogo is best known as a good language for 
oung children. Indeed it is a good language 
>r young children, but it is much more than 
lat. It is suitable for high-school students, 
►r cojm students, for adults— in fact, for 
nyo^^^o needs a programming language 
latisp werful. easy to learn, and easy to use. 



ome Education 

(any people buy personal computers as 
i educational investment, only to find that 
Dscure programming languages and bad 
Dcumentation discourage them— or their 
lildren— from learning to program. 

} encourage the use of Logo in home 
iucation, we provide a comprehensive 
ference manual and a special introductory 
anual (meant specifically for home learning) 
aturing turtle graphics; both books come 
part of the Apple Logo package. 

hoots 

>ide from its role in home education, 
go has been used and tested extensively 
classrooms from kindergarten to college 
/el. See the last page of this brochure for 
3re information cn the use of Logo in schools. 




Some Logo Activities 

Logos design reflects an emphasis on learn- 
ing. You can see this emphasis in the many 
intriguing application areas built into it 

Turtle Graphics 

Logo features turtle graphics, which makes 
it possible for beginners to draw beautiful, 
complex designs the first day. Yet. turtle 
geometry is based on mathematical ideas 
powerful enough that it is used in teaching 
college-level mathematics and physics. 

Human Language 

Another important Logo application is 
human language processing. A two- line 
program translates a word into Pig Latin; 
more complicated programs can generate 
random grammatical English sentences, 
cany on simple conversations, or play 
language games like Hangman. 



TO SQUARE :SIOE 
REPEAT 4 CF0RWAR0 
ENO 

TO FLAG 
FO 30 
SQUARE 30 
ENO 

TO F LAGS AC K 

FLAG 

BK 30 

ENO 



:SI0E RIGHT 903 



TO FLAGS 
REPEAT 4 
ENO 



( FLAG8ACK RT 903 






SQUARE 3# 



FLAG 



FLAGS 



TO LATIN : SENT 

IF EMPTYP : SENT (OP (33 

OP SE PIG FIRST : SENT LATIN BF 

ENO 



: SENT 



TO PIG :W0R0 

IF MEMBERP FIRST :U0R0 CAE I 0 U ] 
OP PIG WORO BF :W0R0 FIRST :U0R0 
ENO 



(OP WORO :WORO "AY 3 



7 PR LATIN (NO PIGS HAVE EVER SPOKEN PIG LATIN AMONG HUMANS 3 

ONAY IGSPAY AVEHAY EVERAY OKcNSPAY I GPAY A T I NLA Y AMONG A Y UMANSH A Y 



The Logo Philosophy 

Logo is not just another computer language. 
It was designed as a tool for carrying out a 
particular philosophy of education. The goal 
of this philosophy is to promote independent 
learning and problem-solving skills through 
explicit attention to the process of learning 
itself. 

Problem- Solving 

For example, consider the problem of 
getting students to think of learning as a 
gradual, developmental process, that is. 
demonstrating a productive view of partial 
understanding. Most students think that 
understanding comes all ai once, or not at all. 
(They don't often express the idea so explic- 
itly, but they show their belief in conversations 
which end with "I don't get it.") 



The Logo approach makes it feasible to 
think about learning styles concretely, by 
using the computer itself as a model of the 
learner: in Logo programming, we emphasize 
the idea of debugging. A program which 
doesn't work isn't simply declared a failure. 
Instead, it is taken as a partially finished 
product in need of improvement. This idea 
is not an artificial one invented just for stu- 
dents: it is a programming commonplace. 
What's special about the Logo approach to 
education is that we encourage students 
explicitly to use the same idea in (heir activ- 
ities outside of programming. 

Logo encourages the student to take risks 
without being threatened by imperfect results. 









SPI 5 90 SPI 5 120 SPI 5 60 S PI 5 144 SPI 5 125 SPI 5 160 




Procedural Thinking 
Many other problem-solving ideas are 
similarly embodied in the Logo programming 
experience. For example, a well-known tech- 
nique for attacking a large, complex problem 
is to break it down into smaller pieces, and 
solve each part of the problem separately. In 
Logo, a large programming problem is simi- 
larly broken down; the programmer writes 
a separate procedure (a small program which 
is independent of other procedures, but can 
communicate with other procedures) for each 
sub-problem. 

Flexibility 

Another aspect of the Logo philosophy is its 
flexibility in curriculum. Logo presents an 
arena for experimentation. Learning takes 
place in an exploratory and even playful spirit. 

Logo provides tools for exploring areas which 
many people find immediately appealing, 
such as turtle graphics. Within these areas, 
students naturally find challenging projects 
Dn th^jcwn. A class can be working on ten 
iiffc^^^irojects, rather than on one specific 
assig^rcnt for everyone. 



This approach is one reason why Logo is 
particularly well-suited to individual learning 
it home, not just to directed group work in 

i classroom. 

"•here are. of course, many ways to teach the 
rogo language. If you wanted to do so, you 
ould even teach it in an atmosphere of daily 
omework assignments and graded weekly 
uizzes. But by doing so you would forfeit 
le spirit of flexible exploration that Logo 
romotes. 

ogo learners of any age are doing real 
^search, working on original projects of 
leir own design. There are no right answers 
>r the teacher to dispense. Some of the most 
iportant teaching in a Logo classroom is 
one by fellow students, and a Logo teacher 
also a fellow learner. 



The Logo Language 

Logo is procedural: A large Logo program 
is written as a group of independent parts 
called procedures Each procedure has its 
own variables, and communicates with other 
procedures in a well-defined way. This char- 
acteristic of Logo makes it easy to debug and 
modify programs, and it encourages a style 
of problem-solving in which a large problem 
is broken up into small, manageable bites 

Logo is interactive: You can type in a Logo 
command directly and it will be run imme- 
diately. More important, when a program 
doesn't work completely, you can debug it 
interactively: run a piece of it. look at the 
results, change the program a little and 
try again. 

Logo is extensible: When you write a Logo 
procedure, its name becomes a word in the 
Logo language, just like the built-in proce- 
dures. The syntax for using it is the same. 
Logo can thus be personalized. Teachers 
and parents can easily tailor the language to 
their own needs by writing new procedures 
and teaching them to their kids just as if they 
were original features of Logo itself. 



Comparison with BASIC and Pascal 
Logo is meant to be both easy for beginners 
and powerful enough for experienced pro- 
grammers. "Logo has no threshold and no 
ceiling." The style of the language allows a 
smooth growth in the programmer's ability 
to use its advanced features. Compare this 
philosophy with that of the two main competing 
languages for teaching: 



Logo is recursive: A Logo procedure can use 
itself, as well as other procedures, as instruc 
uons within itself. This capability makes Logo 
tremendously powerful, because certain com 
plex problems include sub-problems which 
are simpler versions of the original problem 

Logo has list processing: A "list" is a data 
structure for grouping information. The ele- 
ments of a list can be numbers, letters, words, 
or other lists, in any combination. Unlike 
arrays in other languages, a Logo list can 
change size as a program runs. 



Logo is not typed: Any Logo variable can take 
on any type of value. You don't have to know 
whether the value of a variable will be a num- 
ber, a word, a list of numbers, a list of lists . . . 

Logo's error messages are specific and self- 
explanatory. It has none of the opaque error 
messages ("syntax error") found in some 
other languages. For example, if you type 
fr ward so. Logo responds I dont know how 

TO FR WARD. 




BASIC: 



Logo: 



Good interactive style. Small 



Hard to get started. Need to use text 
editor and compiler even for the 
simplest program. 

Good interactive style. Beginners 
can start with small vocabulary. 



nodularity: no 
or compound statements. 

Has procedures, compound 



bo made using records, 
with effort. 

Procedures are central to Logo styli 
List processing makes advanced 




LrOgo Computer systems, inc. 
222 Brunswick Blvd. 
Pt. Claire, Quebec 
Canada H9R 1A6 
(514) 694-2885 

989 Avenue of the Americas 
New York, New York 10018 

368 Congress St. 
Boston. Ma. 02210 





How is Logo Used in Schools? 

Logo is used by students of all ages and 
academic levels. Because it emphasizes 
non-numeric applications of the computer. 
Logo programming does not depend on prior 
mathematical knowledge Therefore, it can 
present a fresh chance for students to work 
with mathematical ideas in a different context 

Logo in the Classroom 

Teachers often say to us, "I teach Algebra II 
(or third grade, or junior high English); how 
can I use Logo in my classroom?"' 

One good answer goes something like this: 
"After you learn Logo yourself, start teaching 
it to your kids, suggest a few projects to them, 
and then stand back. With your help, they'll 
generate a lot of worthwhile ideas on their 
own. Don't pick one project and assign it to 
the whole class; give them several ideas, or 
give each student a suggestion appropriate 
to him or her" 

follows is a short list of programming 
which are appropriate to various cur- 
riculum areas. Bear in mind, though, that one 
highlight of the Logo philosophy is that it cuts 
across narrow categories. If you encourage 
a student who's having trouble with spelling 
to program a Hangman game, the student will 
end up thinking about geometry (arawing 
the scaffold), arithmetic (how many guesses), 
and problem solving strategies as well as 
about lists of words. 

Programming Projects 

Exploring polygons with turtle geometry. 
including the properties of spirals and stars 
A Logo "polygon" is a much broader concept 
than the simple closed figure usually studied 
in geometry. Spirals and stars provide a rich 
ground for the exploration of geometric con- 
cepts that are hard to make accessible to 
high-school students without the help of Logo. 

A conversational program, by which the 
computer carries on an English-like conver- 
sation with a human being (on the screen, not 
out loud). The most famous example of such 
a program is called DOCTOR, where the 
computer simulates a non-directive thera- 
pist. Writing this kind of program, aside from 
being a wonderfully challenging problem- 
sol^aa task, is an excellent way to explore 
cm psof English grammar. It makes gram- 
mSlprTie alive, by putting it in an environment 
where it is needed in order to achieve a goal— 
a conversing program— rather than as an 
abstract way of analyzing English. 



A trench conversation program (or its 
equivalent in some other language). This is 
an excellent project for reasons analogous 
to those in the previous paragraph. Similarly, 
try programming a foreign- language version 
of any game that uses language extensively, 
perhaps HANGMAN or an Adventure game 
instead of DOCTOR. 

Programming a simulation of natural proc- 
esses, such as erosion. In connection with, 
say. an earth science course, students can 
study what happens in different situations. 
Although merely using someone else's pro- 
gram in this way can still provide some flexible 
learning, students who write the program 
themselves will gain a depth of understanding 
and a personal involvement that they wouldn't 
have otherwise. 

Using first, butfihst. and so forth to explore 
composition of functions in an algebra class. 
Abstract functional concepts become easily 
manipulable in Logo; some students have 
trouble dealing with functions numerically 
and find that working with words and lists 
illuminates the same ideas in a more 
congenial context. 





Recommended Reading 

Abelson, Harold. Apple Logo. McGraw. Hit 
(Cambridge. 1981). This book provides a 
thorough explanation of Apple Logo, along 
with many detailed suggestions for protect? 

Abelson, Harold, and Andrea OiSessa. 
Turtle Geometry. MIT Press (Cambridge. 
1981). This innovative approach to mathe- 
matics uses Logo to let advanced students 
explore concepts that range from simple 
geometry to the theory of relativity. 

Goldenberg, Paul. Special Technology 
for Special Children. University Park Press* 
(Baltimore. 1979). This book explains the use 
of computers as a medium of communication 
for children with severe handicaps. 

Papert, Seymour. Mindstorms. Basic Books 
(New York. 1980). This book, subtitled Chil- 
dren. Computers, and Powerful Ideas; shares 
with the reader a vision of education in which 
children learn powerful ideas through 
programming computers in Logo. 



Apple Logo 

Apple Logo, developed by Logo Computer 
Systems Inc.. is available from your local 
Apple dealer, product D2D0100. 



Apple Logo ruas on any model Apple II 
computer with 64K bytes of memory a mom- 



€e Friendly 
tmputer Languages 



Jim Mutter 




techm 

v 



They're everywhere these days: in 
homes, offices, laboratories, cars, indus- 
trial controls, kitchen appliances, radios 
and TV sets, security systems, and chil- 
dren's toys. "They** are, of course, the 
ubiquitous microcomputer, the millions 
of single chip devices controlling a host 
of consumer products, the board-level 
systems controlling industrial processes, 
and, of course, the desktop computer 
through which a rapidly increasing num- 
ber of laypeople are becoming involved 
in the microcomputer revolution. 

To some, this proliferation of computer 
technology heralds an exciting new revo- 
i. To others, it is simply revolting, 
icently, however, that negative 
opinion has begun to change, as new user- 
friendly languages are introduced for 
personal computers. No longer does the 
newcomer to the world of computers have 
to cope with such alien words as I NIT, 
CHRS, GOSUB, STR$, REM, and DIM. 
A rapidly growing number of young 
people and the young-at-heart are enter- 
ing the world of microcomputers riding 
on the back of a turtle. 

Not long ago, the turtle was an electro- 
mechanical pet that roamed the floor, 
controlled by a sizable computer and a 
simple child-oriented keyboard. Young- 
sters could manipulate the turtle through 
the keyboard to make it draw pictures on 
large sheets of paper. The turtle had a 
unique pen that it could raise or lower to 
draw figures. 

In drawing pictures of houses, animals, 
or just geometric shapes, youngsters 
gained valuable experience in logical 
thought and problem-solving. Each task 
had to be broken down into the simplest 
steps, and then assembled in a structured 
procedure to accomplish that task. If the 
drawing was not correct, they went back 
ifined the procedure until it was 
the way they wanted. 



Jim Mullcr. President. Young Peoples LOGO 
Association. Richardson. TX 75081. 




Now the turtle resides on the computer 
display screen in the shape of a small 
triangle. But it will still draw pictures, 
responding to simple commands to go 
FORWARD, BACK, LEFT, or RIGHT. 
These turtle graphics commands were 
first introduced to microcomputers 
through the Logo language, but are now 
being incorporated into an increasing 
number of languages and personal 
computers. 



Just as you select a 
car to suit your own 
personal tastes, 
so you should select a 
turtle graphics 
language. 



Last summer, while watching a group 
of youngsters manipulate the cybernetic 
turtle around the screen to create some 
dazzling graphics, it struck me that these 
young people needed a place in which 
they could fully explore the world of 
microcomputers and microelectronic 
technology. They needed their own orga- 



nization through which they could come 
to know what different computers could 
do, what languages such as Logo, Pilot, 
Basic and Pascal were all about. They not 
only needed the chance to explore the 
computer, they needed the challenge to 
excel. From this, the Young Peoples' Logo 
Association has evolved with a member- 
ship of Turtles that span all 50 states, and 
a growing number of foreign countries. 

At first the choices were easy. Through- 
out 1981, Logo was available only on the 
TI 99/4 computer. And, through turtle 
graphics and the sprite mode our young 
Turtles were soon developing procedures 
to accomplish all sorts of colorful things. 
We occasionally used Big Trak, the 
programmable truck from Milton Bradley, 
to help demonstrate the Turtle commands 
of FORWARD, RIGHT, LEFT, and 
REPEAT to show how a picture had to 
be broken down into each step the turtle 
was to take. 

By programming Big Trak to go around 
the Ping Pong table and under the bench, 
and to fire its phaser at the dog, for 
example, youngsters were able to visualize 
the steps needed to guide the Turtles 
around the screen to accomplish complex 
geometric tasks. 

Atari Pilot 

Then came Atari Pilot with turtle 
graphics, followed quickly by two versions 



T: "Please enter a distance. 1 
A: #A 
GR: *HERE 

GR: PIH RED 

GR: 4(0RAW #A; TURN 90) 



C: #A * #A + 2 
J: *HERE 

Figure L 



T(ype): "Please enter a distance." 
A(ccept): #A (#A is a variable) 
GR(aphics): *HERE (Sets up the Label, 
"HERE.* 

Tells the pen to draw in red "Ink." 
GR(aphics): 4(0RAW #A; TURN 90) Repeat 
the operations within the brackets four 
times."— J the turtle will draw a red 
line #A units long and then turn right 
90O, putting a red box on the screen. 
C(ompute): The value of #A = The value 
of #A plus 2. 

J(ump to): *HERE, or to the Label, M 
HERE," and repeat the process. - 



CIRCLE 253 ON READER SERVICE CARD 



55 



Friendly Computer, continued... 

of MIT Logo for the Apple II, and then 
Apple Logo. Turtle graphics is also avail- 
A Be through other languages and systems 
^^.;ne form or another. Of course, Big 
^mtk has been available for a few years, 
offering a rudimentary introduction to 
turtle graphics. This makes it increasingly 
difficult to recommend what parents and 
teachers should buy for their own 
Turtles. 

Just as you select a car to suit your own 
personal tastes, so you should select a 
turtle graphics language. For example, 
for the novice driver, the simpler, 
economy model may be the best vehicle. 
For under $500, an Atari 400 computer 
and a colorful, easy-to-use language. Atari 
Pilot with turtle graphics, is made readily 
available to youngsters from primary 
grades up. 

In addition to offering enjoyable turtle 
graphics features and advantages, Atari 
Pilot offers the unique feature of an easy 
transition to Basic and other common 
microcomputer languages. For example, 
it shares some common format and 
editing features with Basic. 

Pilot, for Programmed Inquiry, Learn- 
ing, Or Teaching, is a very conversational 
language which uses simple line abbrevia- 
tions to prescribe the function of that 

«It was developed initially as an easy- 
e authoring system for educators. 
Atari has added turtle graphics fea- 
tures to the language to make it more 
user-friendly. (See Figure 1.) 

If I choose to retain this short program 
for drawing a box, I can do so by simply 
entering the command AUTO followed 
by the label *BOX and the program. To 
mark the end of the program, enter E: 
When listed, the program would look like 
this: 



10 *B0X 

20 T: PLEASE ENTER DISTANCE. 

30 A: #A 

40 *HERE 

50 GR: PEN RED 

60 GR: 4(DRAW #A; TURN 90) 

70 C: #A = #A ♦ 2 

80 J: *HERE 

90 E: 



The program is run by first clearing the 
screen to set up the graphics mode with 
GR:CLEAR. Then the Use command is 
entered "U: *BOX. An endless series of 
red boxes will be drawn on the screen. 
However, that can be limited by simply 
changing line 80 to read: 
^fc?A 45): *HERE 

, boxes will be drawn until the 
cffiiension of a side equals 5. 

Boxes and other figures can be placed 
at anv coordinates on the screen. The 
turtle can draw in yellow and blue, as 
well as red. There is also a command to 



FILL a box or a house, so you can make a 
city r of little, boxes or colorful 
skyscrapers. 

The language offers sound effects and 
assembly language access to add some 

truly spectacular effects. It is also recur- 
sive in that commands such as *BOX can 
be used in other procedures. It also offers 
some very interesting text manipulation 
capabilities for easy lesson programming, 
as well for developing word games. 

The greatest asset of the language is 
spectacular documentation that is heavily 
illustrated, thorough, and very easy to 
understand. Also included are two well- 
done demonstration tapes that orient the 
user to the capabilities of the language. 

However, Atari Pilot has some distinct 
limitations when compared to the various 
implementations of Logo. The language 
)s much smaller in size and in scope. But, 
when it comes to the practical real-world 
situation of economically providing 
youngsters with the opportunity to 
explore the fun and excitement of per- 
sonal computing, Atari Pilot is an excel- 
lent choice and an excellent introduction 
to the Atari computers. The books that 



The sprite mode is 
especially useful 
for elementary grade 
youngsters. , 



accompany the language do as much to 
make the computer user-friendly as does 
the language itself. 

Three Versions 

There are currendy three versions of 
Logo available through four companies: 
TI Logo from Texas Instruments, MIT 
Logo for the Apple computer from Ter- 
rapin, Inc. and Krell Software Inc., and 
Apple Logo developed by Logo Computer 
Systems, Inc. of Canada, and distributed 
by Apple Computer Inc. 

TI Logo requires the basic TI 99/4A 
console plus Extended Memory and the 
TI Logo command module. The sug- 
gested retail price for the minimum sys- 
tem is just under- $1000. The versions of 
Logo for the Apple II computer require 
at least one disk drive, extension of the 
basic memory to 64K, and the language, 
bringing the suggested retail price for the 
complete system to around $2400. The 
language alone is available from Terrapin, 
Inc. at $149.95 and from Krell Software 
for $179.95. The Krell version includes 
an extra demonstration disk called "Alice 
in Logoland," which takes the user 



through examples of virtually all of the 
capabilities of the language. Apple Logo 
is available for $175 and comes with two 
excellent, heavily-illustrated books. In 
terms of documentation, Apple Logo and 
Atari Pilot are the two very clear-cut 
standouts. 

All of the versions of Logo offer a turtle 
graphics mode which moves the turtle 
around the screen to draw geometric 
shapes and patterns. The Apple versions 
each offer five pen and background colors 
whereas TI Logo offers sixteen colors. In 
the MIT versions of Logo, the shape of 
the turtle may be redefined and moved 
around the screen to create animated 
procedures. TI Logo, however, offers 32 
Sprites which may carry or look like 27 
shapes. These shapes may be any of five 
predefined shapes in the language, or they 
may be defined by the user. The shapes 
will not, however, draw lines. 

Sprites 

The sprite mode is especially useful for 
elementary grade youngsters in that it 
provides a very colorful means for them 
to become actively involved with the 
computer right away. It also provides the 
means for demonstrating what might 
otherwise be incomprehensible math- 
ematical concepts. 

For example, it is extremely difficult to 
explain the numerical concept of "zero" 
to young children. They have no knowl- 
edge of what "nothing" is. However, this 
abstraction becomes very real when they 
TELL :ALL (of the sprites to) CARRY O. 
Those sprites that are on the screen will 
then disappear. 

There is, however, an inconsistency in 
TI Logo that can be quite confusing to 
young programmers. In the Turtle Mode, 
it is possible to SETCOLOR [6 15] and 
have the Turtle draw a red line on a white 
background. However, in the Sprite 
Mode, the computer will not accept this 
as an input. Only the pencolor can be 
specified with the SETCOLOR 
command. 

A graphics board that provides ani- 
mation capabilities for Apple Logo was 
demonstrated at the West Coast Com- 
puter Faire in March. This board allows 
32 turtles to assume shapes designed into 
the language or by the user, allows for the 
use of 16 colors, and sets the turtles in 
motion with or without the pen drawing a 
line. 

A valuable feature of the versions of 
Logo for the Apple Computer is the 
ability to select full screen or partial 
screen graphics. This can be done even 
while a procedure is in process. In the 
Turtle Mode, TI Logo reserves the bot- 
tom portion of the screen for text. In the 
Sprite Mode, the full screen is used with 
text written from the top of the screen. 



56 



October 1982 c Creative Computing 



Friendly Computer, continued... 

Apple Logo allows the user to select 
the option of having the Turtle "wrap" or 
n^^Simple commands direct the turtle 

erse direction when it comes to the 

S^Fof the screen, or simply to disappear 
off the screen. In TI Logo, the turtle and 
the sprite always wrap around. 

Logo for the Apple offers considerably 
more flexibility in both graphic and arith- 
metic operations through the use of 
floating point math. This allows for trigo- 
nometric, logical, square roots, and other 
math functions not possible through the 
TI integer-only system. In addition to the 
numerical flexibility, the Apple versions 
of Logo offer more graphic flexibility. 

For example, consider the following 
simple procedure: 



TO SPIRAL : DISTANCE z ANGLE 

FORWARD :DISTANC£ 

RIGHT: ANGLE 

MAKE "0:0 ♦ T 

SPIRAL : DISTANCE : ANGLE 

END 



Running this simple procedure on the 
M Ife computer will result in the drawing 
ever-increasing spiral. By entering 
sWkAL 1 144, a star will be drawn that 
will increase in size each time it is drawn. 
The screen will eventually become totally 
white with only the turtle visible as it 
continues to draw. In TI Logo, however, 
the computer will signal OUT OF INK 
after about 25 repetitions of the 
procedure. 

Apple versions of Logo provide inter- 
facing to printers and other peripherals 
through assembly language access. The 
MIT versions of Logo for the Apple offer 
SAVEPICT and READPICT commands 
for saving and reading the contents of the 
screen into and from memory. The screen 
can also be printed out, a feature that is 
especially useful for showing screen 
graphics. Apple Logo does not offer these 
commands but they can be programmed. 
TI Logo offers no interfacing capability. 
Procedures can be printed on the TI 
Thermal Printer, and programs can be 
stored on tape or disk. 

Logo and the Handicapped 

Imagine the use of Logo by the physi- 
cally handicapped wherein they have 
a cces s to single-key commands that print 
<M phrases and sentences. People with 
J^^( arthritis or other problems that 
limit their ability to type could still use 
the computer to communicate by entering 
a single key command. 
For example: 



TO G- . . • - - 

CLEAR SCREEN 
PRINTER 

PRINT [YOUNG, PEOPLES* LOGO ASSOCIATION] 

PRINT [1208 HILISOALE ORIVE} 

PRINT [RICHARDSOin TEXAS 750STJ * *U 

PRINT P ] * . 

PRINT [DEAR YPLArJ 

hrlu! ~ . ' • . " • 

■- 



By simply typing the letter G and enter, 
the address of the YPLA and opening of 
the letter would be printed out on the 
printer. With a menu of useful phrases 
and sentences, the handicapped have a 
new means of communication readily 
available to them. And this list can be 
altered very easily to serve new 
requirements. 

Another benefit of assembly language 
access through Apple versions of Logo is 
the ability to create new features in the 
language, such as music and sound 
effects. This also gives the user access to 



The real power of Logo 
for the Apple 
computer becomes 
evident with the 
list processing 
capabilities offered 
by each. . 



16-color low-resolution graphics and the 
chance to alter the character set. TI Logo 
allows direct access to the character set 
by which youngsters have created their 
own alphabets and codes. There is no 
access to music or sound capability in 
this version, however. 

The value of TI Logo is in its graphic 
capabilities and its user-friendliness for 
very young children. When the idea* for 
the YPLA was being formulated last 
summer, junior high students and first 
graders used to get together around a few 
computers on a Ping-Pong table with the 
intent of duplicating their favorite arcade 
games through the computer or simply 
drawing colorful -flowers. Not only did 
they all find the TI 99/4 exceptionally 
easy to use, they found that TI Logo 
offers very easy access to some exciting 
graphic and game programming 
capabilities. 

We have had a variety of games 
developed including versions of lunar 
lander, flight control, crossing the asteroid 
belt, and similar exercises. Primary grade 



youngsters have developed some very 
interesting pictures, not to mention our 
first computerized Christmas card. The 
"human factors" designed into the lan- 
guage make it an excellent choice for 
elementary and junior high schools, and 
for those age groups at home. Unfortun- 
ately, the documentation that accom- 
panies the language leaves a lot to be 
desired. 

For example, a variety of undocument- 
ed commands have been found in TI 
Logo. FPUT, LPUT, THING, 
NUMBER?, WORD?, THING? are 
among these. The manual accompanying 
TI Logo was supposedly written for mid- 
dle school age children, which makes it 
difficult to understand why the joystick 
commands, JOY1 and JOY2, were 
omitted. 

Not only do these commands make the 
language competitive with several other 
child-oriented software packages, they 
offer some very interesting opportunities 
for using TI Logo with the handicapped. 
Each position of the joystick represents a 
different numerical input, and a simple 
rewiring or rebuilding of the joystick 
would offer the physically handicapped 
access to the computer. 

# 

Documentation 

The documentation problems with TI 
Logo are reportedly being corrected, and 
a TI Logo Curriculum Guide is being 
published. In addition, several authors are 
preparing books on TI Logo for various 
age groups. Thus, this problem should 
disappear, hopefully as this article is being 
published. 

The real power of Logo for the Apple 
computer becomes evident with the list 
processing capabilities offered by each. 
These capabilities tend to make these 
versions more complete computer ian- 
gauges. However, there are some differ- 
ences worth noting. The MIT versions 
offer some editing and debugging com- 
mands which have to be programmed into 
Apple Logo. On the other hand, error 
handling in Apple Logo is generally more 
efficient in that error handling commands 
can be defined by the user. 

The MIT versions of Logo for the 
Apple and the TI 99/4 were experimental 
developments. It would appear that Logo 
Computer Systems, Inc. learned from 
these experiments and has come up with 
a more complete language. Of course, it 
is reasonable to assume that all of the 
Logo developers are looking at improve- 
ments In the language. Thus, it will take 
more time to determine which version is 
going to become the "standard." 

For the parent and teacher, there are, 
indeed, some tough choices. For the 
economy-minded. Atari Pilot is an excel- 
lent choice, the subcompact model that 



October 1982 ° Creative Computing 



59 



Kits Now 
Available 



MERRY BEE 




Ages 5-6 $29.95 

Word Games 8 to Adult $24.95 

Early Words Ages 5-7 $19.95 

Musk Drill $19.95 



notes 



Each disk includes 3-12 



Tor fun and educational too. 
full use of graphics and sound. 
Apple 11+ 48K. Specify 3.2 or 3-5. 
Add $2.00 shipping per order. 



I 
i 
i 
i 
i 
i 

I 
i 
i 
i 
i 
i 
i 

I 
i 



MERRY BEE 
COMMUNICATIONS 

815 CREST DRIVE 
OMAHA. ME 68046 
(402) 592-3479 



Specializing in Apple software. 
Consultants in interactive video. 



a 



a trademark of Apple Computer Co. 



201 ON READER SERVICE CARD 





NEWPORT "Pro-Sticks" 

the Mercedes of Joysticks 
'Creative Computing Magazine* Aug. 1982 

Soft-Touch Controllers 

for busy fingers and fast action 



Extension "Y" Adapters 

with rapid fire action 



Build your own custom video- 
game controls from our proven 
high quality arcade components. 

Create your own control console ri&ht in 
your home. Send $3.00 for a brochure of 
creative and innovative ideas in custom 
video game joysticks and controllers. In- 
cludes easy to follow schematics and in- 
structions for Atari. Apple. Pet Com- 
modor, TSR-80, and other computers, 
and a complete kit and components price 
list. 

INQUIRE ABOUT OUR CLUB DISCOUNTS 



Please rush me 



brochures at $3.00 



each (includes First Class Mail and 
handling) and mail to: 



N 



Address 

City 



State. 



Zip. 



NEWPORT MACHINE DESIGN 

P. O. Box 418. Bishop. CA 93514 

(714) 873-5677 
»••••••••••••••••••••••••••••• 

CIRCLE 227 ON REAOER SERVICE CARD 



creative go m\m fci n \\ 



BINDERS 

Are your back issues of Creative 
Computing stacked in piles? In 
boxes? Does the one you want 
always seem to be missing? If so, 
you need our binders. Made of 
vinyl with the Creative Computing 
logo sflk screened on front and 
spine. Each holds 12 issues with 
sturdy locking wire posts. Just 
$195 each. Or save by ordering 
3 for $22.50, 6 for $42.95. 




CHARGE ORDERS PHONE 24 HOURS 
TOLL FREE 800-631-6112 

In N.J. only (201) 540-0445 




coxKpatiBtf Dept. C924 , 39 E. Hanover Avenue, Morris Plains, NJ 07950 

me Creative Computing Binders. 



□ PAYMENT ENCLOSED $- 



(NJ residents add 5% sales taxj 



Add $1.00 per order for postage and handling. Outside USA add $2.50 per unit 
ordered. Send U.S. funds only. 



□ CHARGE MY: 

□ American Express □ MasterCard □ Visa 



Card Number - 
Signature 



-Exp. Date. 



MrTMrsiMs.- 
Address 



full 



City/ State/Zip- 



1 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
J 



Friendly Computer, continued... 

offers excellent economy combined with 
efficient performance. This is not only 
because of the user-friendly benefits but 
because of its similarities to other more 
readily available programming languages. 
TI Logo is an expensive version of Logo, 
the intermediate model offering some 
unique benefits that will undoubtedly be 
improved and expanded in time. The TI 
computer is gaining rapidly in popularity 
and is being more actively supported by 
third parties, a good indication of the 
viability of the product. 

The top-of'the-line resides within the 
Apple computer. To carry the analogy a 
step further, consider the version of Logo 
offered by Terrapin, Inc. as the solid, 
comfortable, efficient, four^Ioor sedan. 
It is an excellent, long term investment 
backed by an experienced company. But 
would you teach a first time driver in a 
Mercedes or Cadillac El Dorado? 

The Krell Software version appears to 
have more of a "luxury sports car" 
approach. It is a lean, dramatic package 
that offers comprehensive and colorful 
demonstration procedures. But in total, it 
is the model that requires some prior 
experience to use most efficiently. 

Apple Logo is the Grand Touring 
model— solid, comfortable, dramatic, 
luxurious, well-documented, with out- 
standing performance. It stands out 
because of its thorough attention to 
detail. 

In our Turtle Learning Centers in Irving 
and Richardson, TX, we use them all. 
Each has its own followers and supporters. 
Each language has its own advantages. 
But, most important, there is something 
for everyone. 

Many computer owners may find it 
hard to relate to that statement. This is 
why the analogy of languages to auto- 
mobiles goes far beyond selection in a 
showroom. A few years ago, I was actively 
involved in promoting an employer's 
products to the road racing field. Race 
drivers, the hobbyists of the auto industry, 
were no more fiercely loyal to their 
favorite manufacturers than are computer 
owners. 

It is from the development work of the 
hobbyists that many consumer products 
have evolved— cars, radios, TV, hi-fi, 
stereo, and now the computer. Hopefully, 
the new friendly languages will be the 
development to make consumer products 
out of computers. □ 



MicRo Information Systems 
a division at M-R Information Systems. Inc. 
Presents Educational Software 
designed to motivate the student, 
(programs available for the TRS-00 

Mod III* and VIC") 
Write for complete catalog, to: 
M-R Information Systems. Inc.. 
P.O. Box #73. Wayne. NJ.. 07470 
" TM Tandy, TM Commodore 

CIRCLE 220 ON READER SERVICE CARO 

October 1982 ° Creative Computing 



Logo 



A Cultural Glossary 



E. Paul Goldenberg 
Lincoln-Sudbury Regional High School 
390 Lincoln Rd. 
Sudbury, MA 01776 



For easy access, the terms in this glossary are arranged alphabetically, but this arrangement hides 
the complex interrelationships of the ideas in the definitions. The groupings on this page were 
developed to make obvious the relationships between important Logo concepts. You can use it as a 
map to guide you through the glossary. 

The groupings do not represent a true tree structure because some of the terms appear under 
several different headings. The main concepts are organized into broad categories, with more 
detailed information listed in outline form under each main heading. 



The Logo Language 



program 

procedures 

nand 



Seeds of the Logo Culture 



•)tlM 



operation 
primitive 
subprocedure 

workspace 
global 
local 
state 

recursion 

interation 

input and output 

object 

word 

list 
sentence 



artificial intelligence (AI) 

microworlds j 
LISP 

Piaget 

debugging 

QWERTY phenomenon 



Outside the Logo Culture 

computer-aided instruction (CAI) 
computer literacy 



turtle 

turtle graphics 
turtle geometry 
Total Turtle Trip Theorem 
playing turtle (body geometry) 
forward (back) 
left (right) 
dyna turtle 
sprite 



Learning and Thinking 

interest worlds 
microworlds 
powerful ideas 

state 

recursion 

subproceduralization 
metaphors 
prosthetic 

anthropomorphic images 
playing turtle 
teaching 



problem solving 
debugging 

controlling the computer 
computer literacy 
teaching 

programming 




This glossary is more cultural than 
echnical partly because the learning 
osophy behind Logo is more of a 
ure than a technique. The Logo 
technical vocabulary consists, for the 
most part, ot 

from general usage to refer to specific 
Logo metaphors, images, and ideas. 
Many of the terms and definitions 
presented here are derived from three 
books: Seymour Papert's Mind- 
storms: Children, Computers, & 
Powerful Ideas (New York: Basic 
Books, 1980); Harold Abelson and 
Andrea diSessa's Turtle Geometry: 
The Computer as a Medium for Ex- 
ploring Mathematics (Cambridge, 
MA: MIT Press, 1981); and my own 
Special Technology for Special 
Children (Baltimore: University Park 
Press, 1979). Reference is also made 
to Brian Harvey's article "Why 
Logo?" on page 163 in this issue of 
BYTE. 



artificial intelligence (AI): the branch 
of computer science from which Logo 
grew. The name of this science 
derives from its attempts to simulate, 
using machines, the behavior that is 
regarded as intelligent in people or 
als. If this narrow view of the 
was ever true, it no longer is. 
Cognitive psychology and artificial 
intelligence together are sometimes 
referred to as cognitive science. They 
study such disparate processes as 
natural-language understanding, 
visual perception, and knowledge ac- 
quisition. Good studies of human in- 
formation processing frequently re- 
quire both a careful study of how 
people perform tasks and serious at- 
tempts to build models based on a 
theory and observations to test the 
theory. The complexity of these 
models requires computer simulation. 




anthropomorphic images: metaphors 
in which computers, computer proce- 
dures, and objects controlled by com- 
puters are thought of as if they were 
persons. "Anthropomorphic images 
facilitate the transfer of knowledge 
from familiar settings to new con- 
texts. For example, the metaphor for 
what is usually called programming 
computers' is teaching the turtle a 
new word." (See Papert, page 59. 
Thinking of the machines as (limited) 
people— and even modeling people s 
behavior through analogies to ma- 
chine processes-does not involve 
treating people like machines. (On 
this latter point, see the entry — 
computer-aided instruction.) 



command: a Logo procedure that per- 
forms in some particular way, but 
does not return a value to its calling 
procedure. It's analogous to a pro- 
cedure in Pascal. See also operation. 




on 




About the Author 

While working with the Logo Group at Mil . 
E Paul Goldenberg pioneered in applications 
of Logo for education and rehabilitation of 
children with severe communication handi- 
caps. His book Special Technology for Special 
Children presents the philosophy, psychology, 
and technology behind this work and illu- 
strates it with case histories. He is gently 
Assistant Professor of Rehabilitation Medicine 
at Tufts Medical School and will soon be direc- 
tor of the computer department at Lincoln- 
Sudbury Regional High S chool. 



computer-aided instructs 
the broadest sense, any 
endeavor that is aided by computers. 
In general, however, CAI means 
automated worksheets (drill and 
practice) or electronic tutors (frame- 
oriented CAI or automated pro- 
grammed texts). This is very different 
from the Logo philosophy of using 
the computer not as the supplier or 
exerciser/ tester of knowledge, but 
rather as a context within which to 
use thinking to solve problems of 
genuine interest. 

Programmed learning explicitly 
models the human as a machine in 
that the student is being programmed 
by the computer. Logo learning sees 
the learner as the agent-actively 
constructing knowledge. The student 
takes the teacher's role— teaching the 
turtle a new word. 



computer literacy: often seen as a 
general (and superficial) experience 
with computers. This concept is tied 
to a transitional stage in the spreading 



of computer technology. When com- 
puters were rarer and more special- 
ized, computer literacy was not an 
issue (just as no one now worries 
about electron-microscope literacy). 
When computers become as common 
as cars, computer literacy will cease 

to be an issue. 

Literacy has two conventional 
meanings. The first— being well-read 
and articulate in one's language— sug- 
gests fluency in a particular computer 
language. Programming is having the 
ability to express a novel idea in that 
language. Letting children be pro- 
grammers, helping them to become 
fluent at expressing mathematical and 
logical ideas, is the Logo sense of a 
thoughtful literacy. (This idea, how- 
ever, doesn't fit in with the image that 
the word "literacy" is generally used 
to convey, a skill that every child 
must learn in order to be able to cope. 
It's more like learning a foreign lan- 
guage: a valuable skill for those who 
choose to learn it, but not an absolute 
requirement for life or for employ- 
ability.) 

The other conventional meaning ot 
literacy— having minimal reading 
i skills— makes little sense in a society 
replete with computers. With many 
computer languages to choose from, 
what could be considered minimal 
communication skills7 Teaching gen- 
eral familiarity with computers with- 
out providing an opportunity to 
develop good communication skill is 
a little like having a course teaching 
people the names of the features of a 
car without allowing them to learn to 
drive. 



controlling the computer: the issue is 
one of locus of control. Whereas 
computers have conventionally been 
used in education to program the 
kids— in effect, to control their be- 
havior—the Logo philosophy stresses 
kids programming computers. It is 
often said that teaching is the best 
way to learn. The computer is a 
highly responsive student and rigidly 
faithful to its teacher. For students 
who have had little sense of control in 
school, this, even apart from the con- 
tent of the subject they are studying. 





is a valuable experience, (The impor- 
tance of being in control is particular- 
ly apparent in the Logo work of stu- 
dents with special needs. For more, 
see Special Technology for Special 
Children. 

debugging: improving the behavior 
of a program that does not do what 
you want it to. Logo emphasizes that 
programs that do not work as desired 
are merely unfinished, rather than 
bad finished products. This is in 
sharp contrast to many school situa- 
tions in which a task is considered to 
be over when a particular time has 
come, rather than when it "works." 

In school, a written composition 
tends to be graded as it stands, rather 
than debugged. (If the teacher does 
encourage a student to improve a 
paper, the effort involved can be pro- 
hibitive.) Logo teachers encourage 
students to love their bugs. If a turtle 
does not do what you wanted it to, 
chances are that it does something in- 
teresting anyway. The unwanted be- 
havior may lead to new ideas more 
interesting than the original task. A 
bug can be neat I It can certainly teach 
you something . . . study it! 



happens to have at the moment). The 
only other turtle-geometric state- 
change operator dealing with the tur- 
tle's position is called BACK. Neither 
of these change the turtle's heading. 
See also LEFT. 

global: something pertaining to the 
entire environment being considered. 
Among variables, global variables 
are those that can be accessed and 
changed from any place in a pro- 
gram. Logo encourages the use of 
local variables— variables that belong 
to a particular procedure— because 
they make for more orderly and more 
debuggable programs. 

Another kind of global reference is 
the Cartesian coordinate system. It is 
global in that each point is specified 
in relation to a standard referent (the 
origin). Points are not specified in 
relation to each other. For a discus- 
sion of the difficulties caused by such 
a global perspective for graphics rep- 
resentation, see the section of Brian 
Harvey's article "Why Logo?" on 
page 178 in this issue of BYTE. Logo's 
orientation is, in general, toward 
local references. See local. 




dynaturtle: a dynamic (rather than 
static) turtle. Whereas a static turtle 
has a fixed spatial position and head- 
ing, a dynaturtle may have a fixed 
velocity or acceleration. Whereas 
commands (state-change operators) 
to a static turtle specify a change in 
position (e.g., FORWARD 100) or 
heading (e.g., LEFT 90), a command 
to a velocity turtle specifies a change 
in velocity and has an analogy to 
force. Dynamic turtles can be a flexi- 
ble laboratory tool for experimenta- 
tion in physics and mathematics and, 
like their static cousins, for aesthetics 
as well. 

FORWARD: Logo command to the 
turtle telling it to move forward in the 
direction it is heading. This state- 
change operator takes a single input 
that says how far (in turtle-steps) for- 
ward to move. For example, 
FORWARD 100 says move forward 
100 units; FORWARD :SIDE + 1 0 says 
move forward the distance 1 0 + -.S1DE 
(whatever value the variable :SIDE 



input and output: within the Logo 
culture, we pay more attention to the 
inputs and outputs of procedures 
than to traditional issues of hard- 
ware. The input to a procedure is 
thought of as a message that the pro- 
cedure needs in order to do its job. As 
an example, FORWARD needs an in- 
put telling it how far to move the tur- 
tle; PRINT needs to know what to 
print. Some procedures need more 
than one input message in order to 
know what to do. A procedure to 
draw arbitrary polygons, for exam- 
ple, needs two inputs, one telling it 
the size of its forward step, and the 
other telling it the angle to turn at 
each corner. 

The output of a procedure is a 
message sent back to the procedure 
that called it. For example, SUM out- 
puts a message that is the sum of its 
two inputs. A procedure that pro- 
duces output (see operation) must 
send its message to a procedure ex- 
pecting an input. (In this way, output 
and input are closely linked in Logo.) 
Hardware aspects of I/O are handled 



conveniently for the programmer so 
she can concentrate on the behavior 
of the conceptual building blocks 
(procedures) she is creating without 
wasting attention on the machine. 

interest worlds: areas of special in- 
terest in which the computer can be a 
useful tool, servant, or laboratory. 
Art, music, geometry, physics, and 
language have all been extensively de- 
veloped as interest worlds by various 
Logo investigators. See also micro- 
worlds. 

iteration: telling the computer to exe- 
cute something repeatedly. See recur- 
sion, which Logo favors as a control 
structure. 

learning: the focus of the Logo envi- 
ronment. What one does for oneself. 
See teaching. 

LEFT: Logo command to the turtle 
telling it to turn left while remaining 
in the same location. This state- 
change operator takes a single input 
that says how many degrees to turn. 
For example, LEFT :ANG says turn left 
:ANG degrees (whatever value the 
variable :ANG happens to have at the 
moment). The only other turtle-geo- 
metric state-change operator dealing 
with the turtle's heading is RIGHT. See 
also FORWARD. 



LISP: acronym for LISt Processing. A 
programming language widely used 
in artificial-intelligence research, the 
basis for many of the ideas in Logo. 

list: Logo's fundamental data struc- 
ture. A list is an ordered sequence of 
arbitrary Logo objects (see object). 
Since its elements may be either 
words or other lists (which may 
themselves contain yet other lists, 
nested to any level), lists can be used 
to create very complex data struc- 
tures. They can represent information 
trees (decision trees, binary trees, 
etc.) and unordered sets. Lists are 
sometimes used in Logo to accom- 
plish the same purposes for which ar- 
rays might be used in other lan- 
guages. (Logo also has other ways of 
providing access to information tr.at 
is indexed numerically or with alpr.a- 



betic labels. Some Logo imple- 
mentations have array-handling prim- 
itives.) The simplest elements of lists 
re words. 



something that has meaning 
only in the specific context in which it 
is being used. A local variable is one 
whose name has a value only within 
the procedure in which it is defined. 
Most variables used in Logo are local. 
The turtle's perspective on its turtle- 
moves is also a strictly local one. It 
does not know where it is (with re- 
spect, say, to a globally defined 
origin). In the grand scheme of 
things, it doesn't need to know where 
it is. It only needs to know how to 
move with respect to itself. 'The tur- 
tle can forget about the rest of the 
plane when drawing a circle and deal 
only with the small part of the plane 
that surrounds its current position. 

"By contrast, x 2 + y 2 - r 2 relies on 
a large-scale, global coordinate sys- 
tem to define its properties. And de- 
fining a circle to be the set of points 
idistant from some fixed point is 



just as global. . . . The turtle repre- 
sentation does not need to make ref- 
erence to that 'faraway' special point, 
the center." (See Abelson and 
diSessa, page 14.) This local view of 
movement in space is not only easier 
to use for simple mathematical ideas, 
but lends itself quite beautifully to ex- 
tensions into very fancy math; cal- 
culus and limits immediately come to 
mind. See global. 

Logo: not an acronym. Derived from 
the Greek word for "word" or 
"thought." The name was coined by 
Wallace Feurzeig at Bolt Beranek and 
Newman Inc., one of the collabora- 
tors in the development of the lan- 
guage. 

metaphor: Logo learning makes con- 
siderable use of metaphor and pays 
particular attention to which 
metaphors are chosen. Is a computer 
a tutor, a student, a pair of eye- 
glasses, or a screwdriver? Is a vari- 
able name the name by which we 
refer to a particular value, or the 



INVESTMENT ANALYSIS 
FROM CENTENNIAL 



STOCK-FOCUS 

Find out how low is low and how high is high. 
Using capital structure and performance data. Stock- 
focus objectively calculates rhe underlying value of a 
stock The system was first developed by the manage- 
ment science department of a major money center 
bank, and is now in use by investment advisors, trust 
companies and brokerage houses. On your screen. 
Stock- focus will plot an estimate of lowest value, highest 
value and the current price. You then decide what to 
buy, sell or hold. 

THE FOCUS TECHNIQUE 

FOCUS is CENTENNIAL SOFTWARE'S new 
approach to Program Architecture, providing a nar- 
ural interaction between microcomputers and users. 
It provides worksheet style input screens, free access 
to all program segments, and the ability to com- 



REAL-FOCUS 

Exhaustively analyze potential real estate invest- 
ments using the Wharton School's approach to real 
estate analysis. In minutes you can project profit, costs, 
and IRR for any project over a 10 year period. Real- 
focus accounts for amortization, debt, income, operat- 
ing expenses, taxes, depreciation, and cash flows for 
both after-fax holding and the results of sale. With 
Real-focus you can analyze any potential jnvestment 
from a single building project to a complex r : - 
planned unit development. 



bine individual results files for portfolio analysis. You 
also receive a usable reference manual, menu helps, 
a program glossary, multiple report formats and spool- 
ing. With our FOCUS technique even rhe most com- 
plex programs are versatile and easy to use. 



COMPUTER 

IBM PC 
Apple (plus) H 
TRS-80 I 
TRS-80 II 
TRS-80 III 



MEMORY—K 

64 

32/48 
32/48 

64 
32/48 



REAL-FOCUS 

$179.00 
149.00 
149.00 
179.00 
149.00 



STOCK-FOCUS 

$189.00 
159.00 
159.00 
189.00 
159.00 




^ s ^S^o^M ,N Ao^ K a tfaSSS of Compute Corp.. THS-80 „ a (ra^ar, of Jand^rpmano. 



ORDER NOW! FILL IN OR CALL 800-525-2003 (Toll Frw> 



PROGRAM NAME. 

NAME 

ADDRESS 



COMPUTER- 



MEMORY. 



PHONE * 



□ \mtgm □ 



ACCOUNT * 



EXP DATE 




name of a box in which we find what- 
ever we find? Are procedures little 
folks with specific jobs to do? Are 
robot turtles literate but literal- 
minded pets7 It is not that Logo 
learners have particular metaphors 
that are different from those of 
others— some people find the little- 
people model of procedures useful, 
while others find it irritating— but 
that the use of metaphor is such a 
natural part of Logo learning. 

microworlds: as used by Logophiles, 
a microworld is a well-defined, but 
limited, learning environment in 
which interesting things happen and 
in which there are important ideas to 
be learned. A microworld can have 
other microworlds within it. For ex- 
ample, within the microworld of tur- 
tle graphics, one can define a smaller 
microworld consisting of all the de- 
signs that can be drawn with a 
POLYSPI procedure. (See R. W. 
Lawler's "Designing Computer-Based 
Microworlds" on page 138 in this 
.) 

The concept of microworlds is 
borrowed from artificial-intelligence 
research. It's very difficult to simulate 
intelligent behavior in general, but by 
restricting our attention to a very 
small area we can begin to find ele- 
ments that can be modeled. Thus, the 
concept of microworlds is a useful 
source of interesting programming 
projects. 

The most famous AI microworld is 
the blocks world, in which the com- 
puter controls a robot arm that can 
manipulate small blocks. You can tell 
the computer things like "Put the red 
block on top of the small green 
block/' or ask questions like "Are any 
green blocks under a red block?" This 
is a microworld of the English lan- 
guage (among other things) in that it 
must understand the vocabulary, 
syntax, and semantics of sentences 
pertaining to the moving of blocks. It 
is also a microworld of structural 
stability, in that it must understand 
what physical maneuvers are possible 
with stackable blocks. One canno:, 
for example, realistically pick up the 
bottom block in a stack of eight with- 
out dropping others. Similarly, ore 
can place a pyramidal block on a 







Circle 282 on inquiry card. 

FOR TRS-aO MODEL I OR III 
IBM PERSONAL COMPUTER 

JORE SPEED 

10-20 umm mm tna 

butters. 31 •CHaT-unique wora 

MORE EASE .tmetured & modular 

Excetisnt full-acreon Editor, structure * 

programming 

word searcn utility 

THE NOTEPAD lottor writer ■ ^ . , 

rZ.iJmZl*tnr vOiif TRS-80 or IBM with keyboard 

MORE POWER 

Form operating »Y««f" n ^..^ 
Concurrent ^ntarpretar ANC ' compi«J 
VIRTUAL I/O for vrfap and PJJJ- <«•* 100 ^ 
n 0-MegaDyt« inert id ^ wjioji 
Full 8080 or 8088 A»«^0l^»0O«i 
(280 AeeemOter also avattaota tor 
XrmS^tT W-trmcKdltii drrvsa 



cube, but not a cube on a pointy 
block. 




FORTH 



THE PROFESSIONAL FORTH SYSTEM 
FOR TRS-80 A IBM PC 
(Thouaanda of systeme in use* 

MMSFORTH MM SysMJi JJJMilJ J at'" » 

AND MMS aiVES IT PROFESSIONAL SUPPORT 



Sourct 

AMSFORTH Newsistter 
_jleny demo programs aooard 
MMSFORTH Use* Group* 
Inexpensive upgrades to latest version 
Programming staff can provide adv.ee. modifications and 
custom programa. to tit YOUR needs. 

MMS FORTH UTILITIES DISKETTE: includes FL0A ^ G J™^ T 

^ T tuTFo d rtn.stvi. Z80 ASSEMBLER pj-J 

CROSWEFERENCERt^^^ 

plus all on one diskette ireguire* mm»i-vj« n 

32K RAM) 

„,„„ aum0 ttnm n« moat. UWH'W of FORTH <*>«»»• "P 
"oTmcTIo 00*... • ™«0 WM~ MMSFORTH 

V2.0. 1 drive 4 32K RAM) 



THE DATAHANOLER: a vsry sophisticated d 
ment system opar.O.a dy non^programmers (red^a. 

MMSFORTH V2.0. 1 dnve a. 32K RAM) »"■— 

c^otuiaipitp fast oowerfui Word Processor w/easy 

keyooard inputs- .deal for form letters <r«*u — ^ 

V2.0. 2 drives A 48* RAM) 

MMSFORTH GAMES 0.SKETTE: 

cnnTH CRYPTOOUOTE. FREEWAY (TRS-401. OTHELLO 1 
FORTH, cmnuuuu uutmimivJO 1 dnv. A 32K RAM) 
T1CTACFORTH (roquirM MMSFORTH V2.0. oriv. « °* 



object: the naturalness with whicn 
Logo passes data messages back and 
forth among procedures (see input 
and output), and the ubiquity of an- 
thropomorphic images for those pro- 
cedures, makes the metaphor of ob- 
ject manipulation very appealing for 
what tends to be called data process- 
ing elsewhere. Logo has two kinds of 
data objects, words and lists. (Some 
implementations also provide ar- 
rays.) Though procedures are gen- 
erally known as the active elements in 
a workspace, they can also be manip- 
ulated (created, edited, destroyed, or 
passed back and forth) by other pro- 
cedures. Therefore, Logo's proce- 
dures are also frequently referred to 
as objects, especially when one is re- 
ferring to the contents of the work- 
space. Finally, "object" retains all of 
its conventional meanings in addition 
to the technical sense mentioned 
already. Thus, we speak of proce- 
dures as manipulating objects, 
whether the objects are words printed 
on the screen or turtles doing a dance 
on the floor. 

operation: a Logo procedure that 
computes a value and returns that 
value to the calling procedure. (It is 
analogous to what Pascal calls a func- 
tion.) The value can be any Logo ob- 
ject—a number, word, or list. See 
also command. 



as the result of bugs in a program that 
does give mostly the right answer. 
The frequent focus of attention on 
Piaget's stages is a bit of a red herring. 
Although he has described these 
stages discretely, it is their contents— 
the form that thinking takes at vari- 
ous developmental levels, the logic of 
it— and not the stages themselves, or 
the age at which they appear, that are 
the real importance of Piaget's 
theory. 

Evidence of the influence of Pia- 
getian thinking (if not each of Piaget's 
specific notions about thinking) per- 
vades the Logo culture. Our interest 
in debugging, the metaphor of ob- 
jects, and the assimilation of com- 
puter technical ideas into familiar 
contexts (e.g., anthropomorphization 
or playing turtle) all reflect that in- 
fluence. 



. intro. 10 structure 
J13.95" 



retorofic to 
J13W 



FORTH BOOKS AVAILABLE 

MMSFORTH USERS MANUAL -.O AOOOOOICOJ »" H>* 

S15.9S* 

STARTING FORTH - DBSt! 

THREADED INTERPRETIVE LANGUAGES • advanced, analysis 
of FORTH mterais 

PROGRAM DESIGN & CONSTRUCTION 
programming, good tor Fortn 
FORTH 79 STANOARO MANUAL officiai 
79-STANOARO word set. etc 
FORTH SPECIAL ISSUE. BYTE Maqwna (Aug. 1980) ■ A collec- 
tor s .tern for Fortn users and beginners 

. ORDERING ' N ' ^atunQQi a s i n g i e*c* 'm p u t er * 'c en s e U for 
manuals ana reou.re signing « » ^J^dSInE Add S2.00 S/H 
one-oerson ™*ffi<gg^*^ % ?!o^ additional dook 
plus $3.00 per MMSFORTH ( and J 1 ^^ 2 0% UPS COD. 

^^M^Vcc^^'no SffSSSSm orders, p.ease. 

Send SASE tor tree MMSFORTH mtorrwon 
Gooo aeaiers sougnt 

Get MMSFORTH oroducts from your 
comouter dealer or 

MILLER MICROCOMPUTER 
SERVICES (B8) 



Piaget: Jean Piaget, one of the great 
thinkers of our time, realized the 
value of looking at a wrong answer 
and trying to understand it (see de- 
bugging). He was a keen observer of 
children and recognized that every 
learner (in particular, each infant and 
child) takes an active role in his or her 
own development. For each wrong 
answer a child came up with (e.g., the 
4-year-old stating confidently that 
trees make the wind blow), he asked 
the question: Why that particular 
wrong answer? What is the logic in 
the child's thinking that leads to that 
kind of explanation? 

In this sense, he saw these wrong 
answers not as random movements in 

but 



playing turtle: pretending to be the 
turtle and walking through a turtle- 
graphics procedure as the turtle might 
see it. This process can make fairly 
difficult geometric constructions 
transparent to young children with 
little or no formal training in geom- 
etry. Playing turtle, though, refers as 
much to the thinking through of a 
procedure before programming it as 
to walking through an existing pro- 
cedure. 

By way of example, some 10-year- 
olds were trying to figure out how to 
teach the turtle to make a circle. I sug- 
gested they play turtle. They con- 
cluded that if all they could tell the 
turtle was to go FORWARD and to 
turn, it would have to go just a little 
bit forward, turn a little, go a little bit 
forward again, turn a little again, and 
so on. After one kid had made it 
around the circle (one of the instruc- 
tions was "keep doing that until you 
get back to the beginning"), they were 
convinced they had the right idea. To 
help them with the details, I reminded 
them of the Total Turtle Trip Theo- 
rem and again encouraged them to 
play turtle. They began to reason out 
the details of how much to turn, how 
many times to repeat the process, and 
how big they wanted to make eacn 
step. 



i 



powerful ideas: Seymour Papert com- 




pares the Total Turtle Trip Theorem 
to "its Euclidean counterpart: (at least 
the context of Logo computers), 
e Total Turtle Trip Theorem is 
ore powerful: The child can actual- 
ly use it. Second, it is more general: It 
applies to squares and curves as well 
as to triangles. Third, it is more in- 
telligible: Its proof is easy to grasp. 
And it is more personal: You can 
'walk it through/ and it is a model for 
the general habit of relating mathe- 
matics to personal knowledge." (See 
Papert, page 76.) An idea that can be 
used in a variety of personally mean- 
ingful contexts, that can be thought 
through, and that is a model for dear 
thinking is certainly powerful. Other 
powerful ideas are state, recursion, 
and subproceduralization. 

primitives: the built-in procedures of 
Logo. Since Logo encourages pro- 
grammers to build their own proce- 
dures as chunks of larger projects, it 
is useful to have a term to refer to the 
indivisible chunks that Logo provides 
tially. 



problem solving: a skill that is at the 
core of Logo's "curriculum." Most 
traditional math instruction is about 
already-solved problems; the student 
memorizes someone else's techniques. 
Only recently have people under- 
stood that real mathematicians do 
something very different; they don't 
just study old problems, they solve 
new ones. Professor George Polya at 
Stafford University has been a 
pioneer in studying the techniques 
that good mathematicians bring to 
bear on new problems. Many ideas 
that are part of the Logo program- 
ming style parallel Polya's mathe- 
matical ideas. Most important, the 
use of procedures as building blocks 
for more complex procedures (as op- 
posed to writing one huge program 
without a layered structure) parallels 
Polya's strategy of dividing a large 
problem into smaller pieces. 

procedures: the conceptual building 
blocks of Logo programs. Logo users 
start with a vocabulary of primitive 
(built-in) procedures, and use them to 



DAISY WHEEL PRINTER 

LETTER QUALITY PRINTER AND TYPEWRITER 

IN ONE PACKAGE 

The BYTEWRITER is a new Olivetti Praxis 30 electronic typewriter 
with a micro-processor controlled driver added internally. 






plus shipping 

Dealer 
Inquiries 
invited 



T^derlining • 10, 12, or 15 characters per inch switch selectable • 2nd keyboard 
with foreign grammar symbols switch selectable • Changeable type daisy wheel 
rCentromSJompatible parallel input operates with TRS-80, Apple, Osborne, IBM 
and others • Cartridge ribbon • Typewriter operation with nothing to disconnect 
• Service from any Olivetti dealer • Self test program built in. 




1 25 NORTHVIEW RD., ITHACA, MY. 1 4850 

(607) 272-1 132 

praxis 30 is a trademark of Olivetti Corp 
THS-flO is a trademark ot Tandv Corp 
BYTEWRITER is a trademark ot Williams i^aooratones 



teach Logo new vocabulary that can 
then be used in all the ways that prim- 
itives are used. 

program: the Logo use of "program" 
is much more like the television use of 
it than of the usual computer use. A 
program is the whole show and may 
consist of a host of songs and dances, 
skits, acts, and routines. (But the 
word "routine" is not routinely used 
by Logophiles to mean a part of a 
computer program.) A person writes 
procedures. The top-level procedure 
runs a program that may be quite 
simple or may involve the use of 
several subprocedures. If it makes use 
of subprocedures, this top-level pro- 
cedure may be referred to as a super- 
procedure. 

programming: consider the following 
metaphors for programming: teach- 
ing turtle a new word; communicat- 
ing with the turtle; translating from 
English to French or Logo; or being 
fluent enough in a language to express 
oneself easily. 

prosthetic: one metaphor for the 
computer. As an artificial arm may 
help an amputee manipulate objects, 
so may an artificial piano player help 
one manipulate music. Because it is a 
versatile tool it can provide access to 
a large variety of inaccessible spaces 
and activities. The computer's use in 
musical composition and perfor- 
mance, graphics production (e.g., the 
special effects in a slew of recent 
television advertisements and in 
movies like Star Wars), and other 
areas are all extensions of human 
abilities— but extensions without 
which we are severely disabled in 
areas we now take for granted. It is 
merely a sociological and technolog- 
ical artifact that we regard as hand- 
icapped people who lack certain other 
abilities we take for granted. (For 
more on computers as aids to com- 
munication and autonomy for special 
education or rehabilitation, see 
Special Technology for Special 
Children.) 



QWERTY phenomenon: Papert uses 
this term to refer to traditions that cig 



themselves in after their original pur- 
pose, presumably a good one, has be- 
come obsolete. The name derives 
om the six top left-hand letters on a 
tandard typewriter keyboard. This 
arrangement of keys was chosen to 
slow down a typist so that the early 
manual typewriters would not readily 
jam. Attempts to convert to a more 
optimal arrangement of keys have 
routinely failed as people were used 
to doing things the old way. So, too, 
much of the curriculum survives 
primarily because it is familiar and 
not because it makes much current 




ion: a recursive definition de- 
fines a procedure or function in terms 
of itself. For example, a recursive 
definition of "factorial" states that 
01 = 1 and that ni - n*(n-l)l (See 
recursion.) A Logo program based on 
this definition might look like this: 



TO FACTORIAL :N 

IF :N « 0 OUTPUT 1 

OUTPUT :N ♦ FACTORIAL (:N - 1) 



A nonrecursive definition might say 
something like: 

n! — n*(n— l)*(n— 2)*(n-3)* 
...*3*2*1. 

(Compare the structures by writing 
the latter in BASIC.) Both definitions 
and programs work, of course, but 
which definition one chooses affects 
how one programs. In the case of 
"factorial," both definitions are easy 
to implement, but sometimes recur- 
sion is the only way. For more on 
recursion, see the section of Brian 
Harvey's article on page 166 in this 
issue of BYTE. 

sentence: in Logo, a sentence is a list 
of words. Logo provides tools to 
manipulate the words of a sentence. 
In most programming languages, one 
uses character strings instead of sen- 
tences; an English sentence becomes 
simply a bunch of symbols, some of 
which are letters and some of which 
are spaces. But those computer lan- 
guages don't help the programmer 
divide this uniform character string 



into words. Logo's approach is an ex- 
ample of the microworld influence in 
programming. 



Investigate Robotics ^ 



RHINC XR-1 



# 



built with the same operating technology 
as large industrial robots ^ 2400 

complete with 32" high robotic arm • power pak 

• controller card • cables • manual • tool kit 

• Use with any RS-232C computer 
port or modem 

• Rigid Ya" open aluminum 
construction 

• Six powerful DC Servo gear 
motors 

• Digital choppers on all axes 

• Controller card with Intel* 8748 
CPU 

• Built-in self test program 

• Reach: 22.5" maximum 

• Grasp: 2" 

• Lift: 16 oz. at extension 
"Hands-on-Introduction to 

ROBOTICS, The Manual for 
XR-1 " may be purchased 
separately @ $20.00 ea. p.p. 




Immediate delivery. Shipped F.O.B 
Champaign, IL (IL residents please 
add 5% sales tax) Price & 
specifications may be altered 
without notice. 
Dealer/Rep. inquiries invited. 




Sandhu Machine Design, Inc., Dept. B-1 
308 S. State, Champaign, IL 61820 
217/352-8485 



sprite: animation of graphics has long 
been a high priority in Logo im- 
plementations, but only recently have 
small computers gained the power to 
handle animations well (except, of 
course, for animations written effi- 
ciently in assembly language). Sprites 
may be thought of as screen objects 
with a defined appearance (color, 
shape, size, etc.) and a velocity. Both 
of these can be changed according to 
the wishes of the programmer. They 
"live" on different layers of the 
screen, as if they are on plastic 
overlays. Thus, a sprite defined as a 
picture of an elephant may roam 
through a forest of trees, passing 
behind some and in front of others. 
The Logo programmer does not have 
to attend to the hiding of lines when 
one sprite is partially occluded by 
another— that is handled automat- 
ically. In this way, complex anima- 
tions involving three-dimensional in- 
teractions of several screen objects 
can be as simple as drawing the ob- 
jects and instructing each on how it 
should move. 

state: the relevant properties of some- 
thing. For example, the state of the 
turtle includes its position and the 
direction in which it's pointing, but 
doesn't include any of its past history 
(such as the distance it has traveled). 
The criterion of relevance here is that 
the turtle's future behavior, in re- 
sponse to some Logo program, de- 
pends only on its current state and 
not on its past. (Of course, the turtle's 
state does reflect where it has been, 
but tells only part of the history and 
not all of it.) The isolation of only the 
important aspects of a situation is a 
valuable debugging tool. 

subprocedures: Logo encourages stu- 
dents to deal with large problems by 
dividing them into subprocedures. In 
a "long, featureless set of instructions 
it is hard to see and trap a bug. 3y 
working with small parts, however, 
bugs can be confined and more easily 
trapped, figured out." (See Papert, 



Circle 256 on Inquiry card. 





MODEM 

$ 129 

No other acoustic modem 
gives you ail these fea- 
tures at this low price. 



Hit MFJ-1232 Acoustic Modem gives you a 
combination of features, quality and performance 
that others can't match at this price. 

0-308 Baud, BON 103 UIMj i'' 0 ^ 

Answer. Half/full duplex. RS-232, JTL CMOS 
level compatible. Use my compu^ Ca^tte 
taoe recorder ports save data for reloading or re- 
transmission. 6 pole active filter handles weak 
signals. Carrier detect LED indicates adequate 
signal strength for data recognition. Quality 
"muffs" gives good acoustic coupling, isolates 
external noise for reliable data transfer. Crystal 
controlled. "ON" LED. Aluminum cabinet. 110 
VAC or 9 volt batteri es. 9xl 1 Ax4in. 

Apple II, II Plus: software and cable for 



MFJ-1231 



port No serial board needed. 



Plugs into game 




page 102.) Logo's subprocedures are 
more than what one sees in carefully 
subroutinized BASIC. They become 
extensions to the language and can 
have meaningful names (see powerful 
ideas). For more on the distinction 
between subroutines and subproce- 
dures, see the section of Brian 
Harvey's article on page 163 in this 
issue of BYTE. 

teaching: what a person does to a 
computer. See learning. 




robot; (3) a creature that lots of peo- 
ple love even though the beast rarely 
does anything in anyone's presence. 

turtle geometry: a genuinely new 
mathematics based on turtle move- 
ments. It emphasizes transformations 
in local space rather than relation- 
ships to a fixed global referent. See 
local, Total Turtle Trip Theorem, 
and playing turtle in this glossary. 
For more about the mathematics at a 
college or advanced high school level 
see Abelson and diSessa's book. 



It's like having 
an extra port 

MFJ-1240 RS-232 TRANSFER SWITCH. Swit- 
ches computer between 2 peripherals (pnnter< 
terminal, modem, etc.). Like having extra port- 
Push button switches 10 lines (pins 2,3,4,5,6,8, 
11,15,17,20). Change plug or cable to substitute 
other lines. Push button reverses transmrt- 
receive lines. LEDs monitor pins 2,3,4 5,6,8,^. 
PC board eliminates wiring, crosstalk, linemter- 
ference. 3 RS-232 25 pin connectors. 7x2x6 in. 

to* MFJ-1108 AC POWER CENTER. 

1 Adds convenience, prevents data 
loss head bounce, equipment damage. 
Relay latches power off during power 
transients. MultMHters isolate equip- 
ment, eliminate interaction, noise 
hash. Varistors suppress spikes. 3 
isolated, switched socket pairs. One un- 
switched for clock, etc. Lighted power, 
reset switch. Pop-out fuse. 3 wire. 6 ft. 
cord. 15A, 125V, 1875 watts. Aluminum 
case. Black. 18x2 3 /4x2 in. MFJ-1107, 
$79.95. Like 1108 less relay. 8 sockets, 
2 unswitched. Other models available, 
write for free specification sheet. 

Order from MFJ and try it If not delighted 
return within 30 days for refund (less shipping). 
One year unconditional guarantee. 
Order yours today. Call toll free 800-647-1800. 

Charge VISA, MC. Or mail check, money order. 
Add $4 00 each for shipping and handling. 



CALL TOLL FREE . . . 800-647-1800 



Call 601-323-5869 in MS, outside continental USA 



Total Turtle Trip Theorem: when a 
turtle wanders over a path and ends 
up heading in the same direction as 
when it started, its total turning is an 
integer multiple of 360 degrees. Some 
special cases follow. If it wanders 
over a simple closed curve (a closed 
path that does not cross itself, like a 
polygon, a circle, or the oudine of a 
pond), it turns through exactly 360 
degrees. To figure out how much to 
turn at each point of a five-pointed 
star, play turtle (remember to end up 
heading the same way you started). 
How many full rotations do you 
make while walking over the star 
shape? (Two.) Therefore, you have 
turned 2*360 degrees in all. How 
much at each corner7 (A fifth of that.) 
Repeating [FORWARD 1 00 LEFT 2001 
enough times makes another kind of 
star. How many points does it have? 
What about the star made by turning 
80 degrees at each corner? See also 
turtle geometry. 

turtle: (1) a computer-controlled 
robot that has position and heading, 
each of which can be changed inde- 
pendently of the other. It is signifi- 
cant that these two components of the 
turtle's state are independent. Cars 
and trucks (and their remote-control 
toy versions) do not have indepen- 
dent control of heading and motion. 
Their inability to make sharp corners 
(no matter how good the turning 
radius) limits their usefulness in ar- 
tistic and mathematical realms. Also, 
because the interaction complicates 
thinking about their behavior, it is 
difficult to write programs to control 
them in any realms; (2) a graphic rep- 
resentation (typically, a pointy isos- 
celes triangle) of such a physical 



turtle graphics: the graphics you 
know and love— the graphics com- 
mand system that has crept into 
several other computer languages 
(I've seen it in some Pascal implemen- 
tations and even a version of BASIC) 
originated with Logo. See FORWARD, 
Logo, and turtle. 

word: the simplest form in which 
Logo stores data, a word is an un- 
broken string of characters (typically 
alphanumerics, but capable of being 
constructed to contain any characters 
including spaces or control charac- 
ters, when that is desired). Words can 
be concatenated into larger words, 
dissected into parts, and used as ele- 
ments of lists. Numbers, single char- 
acters, and character strings are all 
treated as words by Logo. 



workspace: a Logo workspace may 
be thought of quite concretely as if it 
were a kitchen, basement, or art- 
studio workspace: a place where one 
can set out one's materials and begin 
to work. The Logo workspace con- 
tains all the procedures and data ob- 
jects the programmer is currently 
using, which can be saved in whole or 
in part on files for use at a later date. 
Retrieving the contents of a file plac-s 
its contents into the workspace, is 
does defining a new procedure r 
data object. Pictures or text that are 
on the screen are not part of the com- 
puter's internal workspace any mere 
than pictures drawn by a robot turrie 
on the floor are part of that work- 
space. (Nevertheless, many imp e- 
mentations of Logo make it possirie 
to save screen graphics on a file and 
retrieve that file to the screen.)* 



The Case Against Pilot 

The Pros and Cons 
of Computer-Assisted 

Instruction Languages 
and Authoring Systems 



The advent of low-cost microcomputers 
has created a new surge of interest in 
educational applications in the computer. 
This new interest is creating a growing 
demand for quality computer-assisted 
instruction (CAD courseware. Most micro- 
computers which have been introduced 
in the last few years come with Basic, a 
general purpose language. Although Basic 
is considered to be a beginner's language, 
many feel that it is impractical to expect 
teachers, with no computer experience, 
to learn Basic in order to develop CAI 
courseware. 

Since the advent of CAI many individuals 
and organizations have attempted to 
develop specialized computer languages 
which would enable instructors with little 
computer background to develop CAI 
courseware. These attempts have fostered 
such CAI languages as Coursewriter. Planit, 

Tutor and Pilot. 

In an effort to get even further away 
from computer languages, others have 
developed authoring systems such as Ticcii 
^MLand Bell and Howell's recently introduced 
w C ourseware Development System for 
^^^microcomputers. 

These authoring systems may be distin- 
guished from CAI languages by their lack 
of operation or command statements and 
their use of built-in logic and presentation 

Dr Paul Mernil. College of Education, Instructional 
Science Dept.. W-160 STAD, Brigham Young 
University, Provo, UT 84602. 



Paul F. Merrill 

forms or files. Rather than putting together 
a series of commands, the author fills in 
presentation forms such as rules, questions, 
examples, possible answers, feedback, 

helps, etc. 

CAI languages and authoring systems 
may simplify the author's task by using 
one or more of the following techniques: 
1) Reduce the domain of possible com- 
mands and strategies; 2) Provide commands 



The simplicity of Pilot 
was achieved by 
reducing the number of 
commands in the 
language. 



and strategies which meet the specific 
needs of instructional applications; 3) 
Provide commands or routines which 
perform higher level tasks. Most of the 
languages and systems mentioned above 
use a combination of these techniques. 
However, some languages emphasize one 
technique over another. 



Pilot 

One of the first special purpose CAI 
languages available for microcomputers 
was Pilot (Apple Computer Inc. recently 
announced Pilot for the Apple II). Pilot 
has gained popularity because it is relatively 
easy to learn and is designed specifically 
for educational applications. 

The simplicity of Pilot was achieved by 
reducing the number of commands in the 
language. Most versions of the language 
have approximately ten commands. Some 
of the more powerful versions have several 
additional commands for graphics, tone 
generation, and special functions. The 
principle commands in Pilot include: Type; 
Accept, Match, Compute, Jump, and 
Use. 

The Type command provides for the 
display of text and values of numeric and 
string variables on the screen. The Accept 
instruction causes the computer to pause 
and wait for the student to enter a response. 
The response is edited according to 
specified rules and stored in a system 
variable. The response may then be com- 
pared with possible correct and incorrect 
answers supplied by the author using the 
Match command. 

The Compute command provides for 
the assignment of numeric and string values 
to variables and the evaluation of arithmetic 
expressions. The Jump instruction enables 
the sequence of command execution to 
be altered by branching to a specified 

i.. i.. <qqo o r*roati\/o fnmnntinn 



Pilot, continued. 



Table 1. Comparison of Commands. 



Pilot 

R: THIS IS A REMARK 

T: GOOD, SNS , YOU SCORED #T 

A: BS 

m RED I BLUE&GREEN 
J : LABEL 
JY: LABEL 

TN: SORRY, THE ANSWER IS $A$ 





U(T>13): 
E: 

c . x«4«B+3 
D: W(20,15) 



REM THIS IS A REMARK 
PRINT "GOOD, «;NS;« . YOU SCORED •;" 
INPUT BS . 

CAS--REDIBLUE&GREEN-: GOSUB 10 

GOTO 500 
IF Y THEN 500 

IF N THEN PRINT "SORRY, THE ANSWER 

IS ";AS 
IF T> 13 THEN GOSUB 800 

RETURN 
X * 4«B+3 
DIM 11(20,15) 



(•THIS IS A REMARK*) 

WRITELN ('GOOD, 1 ,NAME, 1 , YOU 



SCORED ',T> 



READLN (B) 

MATCH ('REDIBLUE&GREENM 
GOTO LABEL 
IF Y THEN 

IF N THEN WRITELN ( 'SORRY, THE ANSWER 

IS »,A) 
IF T>13 THEN PROCEDURENAME 

END 

X:«4*B+3 

TYPE W-ARRAY IW*20,U.151 OF REAL 



location in the program. The Use command 
provides for the execution of sub- 

When writing a Pilot program the 
command names described above are 
abbreviated to one letter (See thefirst 
column of Table 1 for examples). These 
commands may be followed by a character 

• 



or an expression which serves as a modifier 
or conditioner of the command. A modifier 
character changes the nature of the 
command. For example, an S following 
the Match command allows for one-letter 
misspelling when comparing the student s 
answer to the author's answer. A condi- 
tioner character or expression causes the 



command to be skipped unless the specified 
condition is met. For example, a Type 
command followed by a "V will only be 
executed if the previous match was suc- 
cessful (the student's answer matched the 
author's answer). 

The command and optional moditier 
and/or conditioner must be followed by a 




Kelly's 
Computing 



ATARI 




Pilot, continued... 



c 

a 



colon. The colon may be followed by 
ppropriate parameters such as the author s 
answers to be matched, the expression to 
be evaluated, etc. Examples of these 
features may be found in the first column 

of Table 1. 

A CAI language such as Pilot which 
tries to simplify the courseware author's 
task by reducing the number of commands 
in the language has a significant liability. 
The restriction in the domain of commands 
creates a restriction in the range of possible 
outcomes or applications. 

Several versions of Pilot written in other 
high level languages such as Basic expanded 
the domain of the language by allowing 
instructions from the host language to be 
included in a Pilot program by embedding 
them as parameters into Pilot Compute 
commands. The severe liability inherent 
in the limited Pilot commands became 
very evident to the author while reviewing 
the code for a Pilot program where almost 
one-half of the program statements were 
Compute commands which used instruc- 
tions from the host language. 

The original version of Pilot developed 
at the San Francisco Medical Center had 
such a restriction of domain and range 
that many institutions began developing 
extensions to the language. Attempts have 
been made to standardize these extended 
features into a version called Common 
Pilot. However, many of the extended 
features of Common Pilot are merely 
adaptations of commands available in other 
high level languages. The Apple version 
of Pilot has been further extended to 
include graphics and sound editors. 

The principle reason for selecting Pilot 
over other, more powerful, general purpose 
languages such as Basic or Pascal seems 
to be the ease with which it can be learned. 
However, this reasoning may be some- 
what fallacious. Table 1 lists the principle 
commands available in Pilot along with 
corresponding commands in Basic and 
Pascal which perform similar functions. 
This comparison reveals that a subset of 
Basic or Pascal which matches the domain 
of Pilot commands could be learned just 
as easily. However, the more powerful 
languages offer the advantage of additional 
capabilities when the author is ready to 
go beyond the minimal subset. If an author 



begins by learning Pilot and then desires 
greater power, he must then scrap Pilot 
and begin learning a new language. Why 
not begin with a powerful language in the 
first place? 

Although Table 1 shows that a subset 
of Pascal would be just as easy to learn as 
Basic or Pilot, a word of caution is in 
order. Most textbooks and manuals on 
Pascal currently available do not begin 
with a simple subset of Pascal that can be 
easily learned. Rather than beginning by 
showing how commands can be used in a 



The very nature of the 
principal Pilot 
commands strongly 
encourages novice 

programmers to use a 
mediocre strategy. 



simple, straightforward fashion, most 
authors try to present commands in their 
total complexity. The Pascal language is 
also embedded in a powerful but complex 
operating system which includes a text 
editor and file handler. In order to program 
in Pascal successfully, an author must also 
learn how to use the Pascal operating 
system. 

In addition to simplifying the author's 
task by reducing the domain of commands, 
Pilot also includes commands designed 
specifically for instructional applications. 
This technique is clearly laudable and is 
obviously necessary in any effort to tailor 
a computer language for courseware 
development. However, when this 
approach is coupled with a restriction in 
the domain of commands, additional 
liabilities are incurred. The majority of 
the commands may be tailored to specific 
instructional needs while more general 
purpose commands are excluded. Often 
the specific commands selected are chosen 
based on an implied instructional strategy. 



Table 2. 



1 . Present information 

2. Ask questions 

3. Accept student response 

4. Check for correct answer 

5. Give appropriate feedback 

6. Branch to next segment 



Pilot Commands 

T: Information 
T: Question 

A: 

M: Correct Answers 
TY: Very Good 
TN: Sorry, that's wrong 
JY: Next 



The availability of this set of commands 
and the exclusion of more general com- 
mands inadvertently requires authors to 
use a particular strategy and further limits 
the range of possible applications. 

Several CAI languages, including Pilot, 
include a set of commands which foster a 
tutorial or dialogue CAI instructional 
strategy. A tutorial strategy includes a 
repetitive sequence of the instructional 
elements or frames listed in Table 2. 
This particular strategy is advocated by 
some because of its similarity to a strategy 
that might be used by an instructor tutoring 
a student one-on-one. If the segment to 
which a program branches is made condi- 
tional on the student's response then the 
instruction can be customized to the needs 
of each student. 

Although such a strategy sounds great, 
in practice it is generally just plain boring. 
Often the questions asked merely require 
the student to copy words or data presented 
in the previous information frame. In fact, 
one could argue that the resulting CAI 
program is little more than a fancy and 
expensive page turner. The same strategy 
could be successfully implemented using 
a branching program text. 

Obviously Pilot does not force an author 
to use a poor tutorial strategy. It is possible 
to implement other types of strategies 
using Pilot. One can also develop more 
creative tutorial programs. However, the 
very nature of principal Pilot commands 
strongly encourages novice programmers 
to use a mediocre strategy. 

One of the main advantages of Pilot is 
the provision of the high level command 
Match. The Match command allows a 
Pilot program to perform moderately 
sophisticated natural language processing. 
Students may enter free form answers 
which can be successfully analyzed by 
the Match command. Many general pur- 
pose languages such as Basic, APL and 
Pascal do not have a comparable com- 
mand. The author must write special 
subroutines or procedures to perform 
similar functions. (See Table 1.) 

All computer languages provide a set 
of basic or primitive commands which 
can be used to define and perform a higher 
order function. A set of computer com- 
mands organized to perform a specific 
function is often referred to as a program. 
Most languages also allow such a set of 
commands to be defined as a subroutine 
which can be called from different places 
in a main program. 

These subroutines can subsequently be 
used as higher order commands to perform 
complex functions which cannot be per- 
formed by a single primitive command in 
the language. Such higher order commands 
can greatly simplify the author's task while 
simultaneously providing greater power. 
Although Pilot and Basic provide for 



w 

Trie D 



the specification and calling of subroutines, 
this capability is severely limited. Many 
pons of Basic refer to subroutines by 
Iber. which reduces the readability of 
program. 

Neither Basic nor Pilot provides for the 
passing of parameters from the main 
program to the subroutine. This makes it 
nearly impossible to develop subroutines 
which are truly modular. They cannot be 
used as a black box and plugged into any 
program without revision. Thus they are 
not very useful as higher order commands 
to an author who is not familiar with their 
internal workings. The variables in the 
subroutines are not local to the subroutines 
and thus may affect variables elsewhere 
in the main program. This can create 
bugs in the program which are difficult to 
find and correct. 

On the other hand languages such as 
Pascal, APL, Logo and the new Actor 
languages such as Smalltalk provide for 
truly modular subroutines. Variables can 
be made local to a subroutine. Once such 
subroutines have been developed and 
verified to perform a function, they can 
be used as higher order commands without 
regard to their internal operations. 

Pascal even allows for such subroutines 
to be placed in a system library and 
^^Dsequently linked into any program with 
%gyigle command. Such capabilities make 
it possible to extend a language and tailor 
it to meet specific needs. As mentioned 
<*arlier, defining higher order commands 
in this way simplifies the author's task 
while at the same time providing greater 
capacity. 



Authoring Systt 

Authoring Systems have been developed 
in an attempt to overcome the problem 
of having to learn a computer programming 
language. This is generally accomplished 
by separating the logical sequencing and 
the control of the computer program from 
the instructional content. The logical 
sequencing of instructional frames or the 
instructional strategy is preprogrammed 
into the authoring system. The author is 
therefore relieved from worrying about 
rhe logic and strategy of the courseware 
and may concentrate on the content of 
the instructional frames. The authoring 
system provides the author with a template 
in which to place the content to be pre- 
sented. 

For example, in the Bell and Howell's 
Genis Courseware Development System 
author merely enters the text for 
entation frames, question frames, 
correct answers, incorrect answers, feed- 
back messages for each alternate answer, 
etc. The author is prompted by Genis to 
enter each item of information. The 
sequence and instructional logic is auto- 
matically built into the system. 



Authoring in the Ticcit system is slightly 
more complicated, but the resulting course- 
ware is more flexible. Ticcit was designed 
based on the philosophy of learner control. 
When students interact with a completed 
Ticcit lesson, they are given control over 
the content and sequence of the instruc- 
tional segments they study. 

The desired presentation form is selected 
when the student presses special learner 
control keys on the keyboard. These keys 
are labeled: Objective, Rule, Example, 
Practice, Help, Map, Advice, etc. Thus, 
if students press the key labeled Practice, 
they will receive a practice item. If they 
press Advice, they will receive guidance 
on what to do next. The map provides a 
table of contents in diagram form showing 
the hierarchical relationship between 
lessons. Students may select a different 
lesson segment when the map is dis- 
played. 



Authoring systems 
reduce cost and effort 
by reducing variety in 

much the same way 
that cost and effort are 

reduced in fast food 
restaurants. 



Ticcit provides several packaging 
routines which allow an author to type in 
content for the rules, examples, practice 
items, etc. that will make up a lesson. As 
with Genis, the Ticcit system automatically 
takes care of the storage and retrieval of 
the various presentation form files. Thus 
the author does not have to worry about 
the computer logic required to display 
the appropriate instructional frame or 
presentation form when students press 
one of the learner control keys. 

Authoring systems such as Genis and 
Ticcit simplify the author's task by using 
all three techniques listed earlier: very 
high level routines are built into the system 
to control the logical sequencing of the 
instruction; this logical sequencing is 
designed according to an instructional 
strategy which meets the specific needs 
of certain instructional applications; and 
the domain of possible strategies is 
obviously reduced. 

Authoring systems reduce cost and effort 
by reducing variety in much the same 
way that cost and effort are reduced in 
fast food restaurants, tract homes and 
formula television shows. 



With Ticcit and Bell and Howell's 
Courseware Development System the 
author is given a template to use. Although 
the template greatly simplifies the task, it 
forces the author to turn out courseware 
which conforms to the template. Such 
templates can have the effect of enhancing 
the quality of the courseware produced 
by the novice, while restricting the quality 
of the courseware produced by a creative 
author. The general quality of the course- 
ware produced is dependent on the quality 
of the template. 



•Authoring systems or languages allow 
authors to turn out respectable courseware 
using a specific template. However, authors 
must recognize the limits of the template, 
and not try to force all instruction to fit 
the template. The use of templates would 
be more acceptable if a variety of templates 
were provided for the different types of 
learning. 

•C AI languages should not reduce the 
domain of commands. Beginning authors 
should initally be taught a simple subset 
of a language which will allow them to 
begin writing simple programs quickly. 
However, they should then have the option 
to learn additional commands which will 
give them additional capabilities and allow 
them to develop more sophisticated course- 
ware. 

•C AI languages should not be restricted 
to commands developed specifically for 
certain types of instructional applica- 
tions. 

•Experience in developing CAI course- 
ware and in training students to develop 
courseware has shown that authors very 
quickly reach the limitations of whatever 
language they are using. They then clamor 
for additional capabilities. 

•CAI languages should provide for the 
straightforward development and use of 
higher order commands which increase 
the power of the language but do not 
exclude elementary operations. 

•The best language might be a general 
purpose language, which provides great 
flexibility, with the provision of higher 
order commands for instructional applica- 
tions. 

•When possible, subject matter experts 
with little computer experience should 
team up with programmers who have had 
considerable experience programming in 
a sophisticated language. 

As microcomputers invade the home 
and classrooms the need for large quantities 
of quality courseware will become acute. 
It is imperative that authors select an 
appropriate tool to maximize their produc- 
tivity and the quality of their courseware 
products. Care must be exercised to avoid 
selecting tools which will sacrifice quality 
for quantity. □ 



July 1982 c Creative Computing 



77 



