REPORT DOCUMENTATIO^ AD-A285 149 


Public rtporting burden tor this oollecHon of Information Is estimated to average 1 hour per r 
sources gathering and maintaining the data needed, and reviewing the collection of inforn 
Service. Directorate tor Information Operations and Reports, t2tS Jefferson Davis Highway 
Regulaiory Affairs, Offloe of Management and Budget. Washington, DC 20S03. 


1. AGENCY USE 


(Leave 


2. REPORT 




existing data 
leadquarters 
irmation and 


3. REPORT TYPE AND DATES 


4. TITLE ANDiCompiler: VADS AT&T 3B2/600GR UNIX System V Release 4, 5. FUNDING 

Product #2100-01449. Version 6.2 • ■ ^ 

Host/Target: 3B2/600GR (under System V, Release 4.0) - a 


6. AUTHORS: 

Wright-Patterson AFB, Dayton, OH 


- t It- 

ai. ■!994^ r| 




7 PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 
Ada Joint Program Office, Defense Information System Agency 
Code TXEA, 701 S. Courthouse Rd., Arlington, VA 
22204-2199 


10. SPONSORING/MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY; Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


13. (Maximum 200 

Rational Software Corporation, 940630W1.11373 


14. SUBJECT: Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 


15. NUMBER OF 


16. PRICE 


17 SECURITY 
CLASSIRCATION 

UNCLASSIFIED 




18. SECURITY 

19. SECURITY 


CLASSIRCATION 

UNCLASSIFIED 

UNCLASSIFIED 


20. LIMITATION OF 

UNCLASSIFIED 

























i 


AVF Control Number; AVF-VSR-601.0694 
Date VSR Completed: July 21, 1994 
' 94-05-12-RAT 


Ada COIPILER 
VALIDATION SUMMARY REPORT; 

Certificate Number; 940630W1.11373 
Rational Software Corporation 
VADS AT&T 3B2/600GR UNIX System V Release 4.0, 
Product Number; 2100-01449, Version 6.2 
AT&T 3B2/600GR under UNIX System V, Release 4.0 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 





irno Q;uALn!Y ospected s 



9 28 









Certificate Inforniation 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 

Compiler Name and Version: VADS AT&T 3B2/600GR UNIX System V Release 4.0, 

Product Number: 2100-01449, Version 6.2 

Host Computer System: AT&T 3B2/600GR under UNIX System V, Release 4.0 

Target Conputer System: Same as host 

Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11373 
is awarded to Rational Software Corporation. This certificate expires two 
years after HIL-S1D-1615B is a^^roved by ANSI. 


This report has been reviewed and is approved. 



Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


Adav^ 

Direcjror, M^pmCer and Software Engineering Division 
InstiTOte for Defense Analyses 
Alexandria VA 22311 










DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 

Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada In^lementation: 

Ada Conpiler Name and Version: VADS ATfiT 3B2/600GR UNIX System V, 

Release 4.0 2100-01449, 

Version 6.2 

Dost Computer System: ATfiT 3B2/600GR (UNIX System V, Release 4.0) 
Target Computer System: same as host 

Declaration: 

I, the undersigned, declare that 1 have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 





4 


TABLE OF CONTENTS 

CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INPORMATIOJ 

3.1 TESTING ENVIRONMENT ..3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATICW SYSTEM OPTIOIS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


















CHAPTER 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures (Pro921 against the Ada Steundard [Ada83) using the 
current Ada Coitpiler Validation Capedjility (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
zmy technical terms used in this report, the reader is referred to (Pro92), 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATIOJ SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the conputers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the svibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vhich performed this 
validation or from; 

National Technical Information Service ' 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to; 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


% 


1.2 REFERENCES 

[Ada83) Reference Manual for the Ada Programminq Language, 

ANSI/MIL-STD-lSl5A, February 1563 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August l99i. 

(UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by meems of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executedale. Class B and 
class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking mtJiner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK__FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal lemguage usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected Some of the class B tests Contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attenpted. 

In scxne tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provid^ in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


« 


For each Ada in^lenentation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in ti>e 
preceding paragra^, removing withdrawn tests (see section 2.1), and possibly 
removing sczne inapplicable tests (see section 2.2 and [tX>89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing conpliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host coiputer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body vrtiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vdiich carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) implementation. 

Ada The fart of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVD) 

Compliance of The ability of the inpleroentation to pass an ACVC version, 
an Ada 

Implementation 

t, 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses coimnon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A conputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 





INTRCXXJCTION 


service of all 


Conformity 


Customer 


Declaration of 
Conformance 


Host Ccunputer 
System 

Inapplicable 

test 

ISO 

LRN 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdravnn 

test 


Fulfillment by a product, process, or 
requirements specified. 

An individual or corporate entity vdio enters into an agreement 
with an AVF \^ich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement fran a customer assuring that conformity 
is realized or attainable on the Ada implementation for which 
validation status is realized. 

A con^ter system vdiere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANS1/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

A conputer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration tPro92]. 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate for 
this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programning language. 


1-4 





CHAPTER 2 


INPLEHElfCATION DEPE30ENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been witMrawn by the AVO. The rationale for 
withdrawing each test is available freon either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B2e006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C355081 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B8302SD 

C83026A 

B83026B 

C8304LA 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B06A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AO7201E 

CD7204B 

AD7206A 

BD8002A 

BDe004C 

CD9005A 

CD9005B 

CDA201E 

CE2107T 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE240SA 

CE3111C 

CE3116A- 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 








2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and ccxoroonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Comroentaries are included as 
appropriate. 





IKPLS1EN1ATIQN IKPEIlDEldES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX DIGITS; 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L.-Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 20 tests check for the predefined type LOHG_INTEGER; for 
this implementation, there is no such type: 

C35404C C45231C C45304C C45411C C45412C 

C45502C C45503C C45504C C45504F C45611C 

C45613C C45614C C45631C C45632C B52004D 

C55B07A B55B09C B86001W C86006C CD7101F 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLCAT, LGMG_FLQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT*FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the raunge of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 

types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
in^lementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 

NAa]INE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inqplementation, M^^INEjCfVERFLOMS is TRUi!. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such^type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A640 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not support such sizes. 


2-2 





XHPLEMEinATION DEPEI0}EM:IES 


The tests listed in the following table check that USE_^ERIlOR is raised 
if the given file operations are not supported for the gTven combination 
of node and access method; this implementation siqjports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SBQUESn'IAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT PILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT_10 

CE3102F 

RESET 

Any Mode 

TOCT_10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102R 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the ci.pacity of an 
external direct file is exceeded; this implementation cemnot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET PAGE_LBIGTI! raise USE_ERRC» 
if they specify an inapproprTate value for Bie external file; there are 
no inai^ropriate values for this implementation. 

i 

CE3413B checks that PAGE raises LAYOUT_ERROR v*ien the value of the page 
ninober exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 






IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

McxJifications (see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVD. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, and CD2A31A..C were graded 
passed by Evaluation Modification as directed tjy the AVD. These tests use 
instantiations of the support procedure LENGTE_CHECK, which uses 
Unchecked Conversion according to the interpretation given in AI-00590. The 
AVD ruled that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instzuices of LENGTH__CHECK—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TyPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
inplemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting out line 36 and 
40; the modified test was passed. 


2-4 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIROMENT 


The Ada inplementation tested in this validation effort is described 
adequately the information given in the initial pages of this report. 

For technical euid sales information etbout this Ada inplementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Conpton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Progr 2 utiming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC tPro92J. < 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the nimiber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inplementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 








PIOCESSING INFOBra^TIQN 


a) Total Number of Applicable Tests 3799 

b) Total Number of Withdravm Tests 104 

c) Processed Inapplicable Tests 66 

d) NOn-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 267 (c4d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and then copied to the 
host coR^ter system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were compiled, linked and executed on the host computer system. 
The results were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
review^ by the validation team. See ^penaix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. Ihe options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 










APPENDIX A 


MACRO PARAMETERS 


Ttiis appendix contains the macro parameters used for customizing the ACVC. 
The meaning euid purpose of these parameters are explained in [UG69]. Ihe 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the mauciraum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG_IDl 

(1..V-1 -> 'A', V -> '1') 

$B1G_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 »> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

$BIG_STRING1 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

(1..V-20 


$MAX LEN INT BASED LITERAL 

"2:" & (l,.V-5 -> '0') & "11:" 

$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 









MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$DEFAULT_STORJJNIT 8 

$DEFAULT_SYS_NAME ATT_MIPS_SELF 

$DELTA_DOC 0.0000000004566612873077392578125 

$ENTRY_ADDRESS SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 SYSTEM."+”(16#80#) 

§ENTRY_ADDRESS2 SYSTEM."+"(16#100#) 

$FIELD_LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLOAT_NAME NO_SUCH_TYPE 

$FORM_STRING "" ’ 

$FORM_STRING2 "a«^^K)TJlESTRICT_FlLE_CAPACITY" 

$CaffiATER_THAN DURATION ' 

100000.0 

$GREATER_THAN DURATION BASE LAST 

TOOOOITOO.O 

$GREATERjrHAN FLOAT BASE LAST 

l.lE+308 

$GREATER_THAN FLQAT_SAFE LARGE 

5.iyE307 


A-2 







mCRO PARAMETERS 


$GREATE3t THAN SIKJRT FLOAT SAFE LARGE 

“ 9.0E37 

$HIGH_PRIORITy 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/illegal/file_name/2{}$%FILE1.DAT 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/illegal/file_naine/2(]$%FILE2.nAT 

$INAPPROPRIATE LINE LE2«3TH 

-1 

$INAPPROPRIATE PAGE LEHCHH 

-1 

$INCLUDE_PRAGMA1 PRA£31A INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATIQN -100000.0 

$LESS THAN_DURATIQN_BASE FIRST 

-ITFOOOOOO.O 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

OODE_0"(OP -> NOP); 

$MACHINE_CC»E_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME TINY_INTEGER 

A-3 







raVCRO PARAMETERS 


$NAME_LIST ATT_MIPS_SELF 

$NAME_SPECIFICATI0N1 Aisr/test_suites/acvcl. ll/c/e/X2120A 
$NAME SPECIFICATI0N2 /usr/test_suites/acvcl.ll/c/e/X2120B 
$NftME SPECIFICATIONS /usr/test_suites/acvcl.ll/c/e/X3I19A 
$NEG_BASED_INT 16#F000000E# 

$NEW_MEM_SIZE 16777216 

$NEW_STOR_UNIT 8 

$NEW_SYS_NAME ATT_MIPS_SELF 

$PAGE_TERMINATOR ASCII.LF & ASCII.FF 

$RECORD_DEFINlTION RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME CODE__0 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 1024 

$TICK 0.01 

$VARIABLE_ADDRESS VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 VAR_3'ADDRESS 

PRAOIA PASSIVE 


$YOOR PRAGMA 



APPENDIX B 


COnPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to ccxopiler documentation and not to this 
report. 






COMPILATION SYSTEM OPTIONS 


ada Coonand Reference ada 

ada - invoke the Ada compiler 
Syntax • 

ada [options] t source_file]... (object_file.o1... 

Arguments 

object_file.o non-Ada object file names. These files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
compiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -AS). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das” 
s Disassemble the \jnit spec. 

-a file_name 

(archive) Treat file name as an object archive file created 
by ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCompiler Ada only) 

(static) If static is indicated, the Ada program is Compiled 
and linked statically. The default is dynamic. 

-c suppress the control messages generated vhen pragma PAGE 
an^or pragma LIST are encountered. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 


B-2 






COMPILATION SYSTEM OPTIONS 


semantic analysis or code generation. Ujpdate the library, 
marking any defined units as unconpiled. The -d option is 
used by a.make to establish dependencies amcmg new files. 
This option will attenpt to do isports for any xinits 
referenced frcan outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source^file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process ccxDpilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferrorfile source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out while the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that A source 
listing with errors is produced a^ directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usin*g a.error, 
enibed them in the source file and call the environment editor 
ERROR EDITOR. If ERRORJEDITOR is defined, the environment 
variaEle ERROR_PATTERN should also be defined. ERR0R_PAT7ERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERROR_TABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 


B-3 





CXMPILATION SYSTEM OPTIONS 


tclmned so that all pointers to nodes that did not involve 
a subtree that define a symbol teible will be ntxlled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or conqpilation information). The trinning 
generally removes initial values of varizibles and all 
statements. 

-G (GVAS) Display suggested values for the MIN_GWAS_AIX)R 
and MAX_GVAS_ADDR INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the compiler front end. The IL file will be placed in 
tte .objects directory with the file name Ada_source. 

-L library_name 

(library) Operate in VMS library library_name. 

[Default: current working directory] 

-Ifile abbreviation (VMSself only) 

(iDorary search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file abbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unit name must already be 
conpiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VMSself) or a.vox 
(VMScross) unless overridden with the -o option. 

-M source file 

(mainT Produce an executable progreun by compiling and 
linking source file. The main unit of the program is 
assumed to be ^e root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be nam^ a.out (VMSself) or-a.vox 
(VMScross) unless overridden with the -o option. 

-N (no code sharing) Conpile all generic instantiations 
without sharing code for their bodies. This optipn 
overrides the SHARE_BC»Y INFO directive and the SHARE_CX)DE 
or SHARE_BQOY pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries. 
This option is valid only if the -M option has also been invoked. 

(Sun SPARC ■> Paragon only) 


-O10-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 






OONPIIATION SYSTEM OPTIONS 


-O full optiniization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 
-08 add one more pass of induction expression reduction 
-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For example, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) %is option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(reconcile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
reccmpilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVASJIABLE file. Hiis option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) ^}ply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the conpilation. 

B-5 






COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (verbose) Print coa()iler version number, date and time of 
compilation, name of file compiled, cammand input line, 
total coapilation time and error simnary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be coopiled. 

Description 

The ada command executes the Ada compiler and conpiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -N option 
is used, the compiler automatically invokes a.Id and Isuilds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may he given as arguments to ada. These files will be passed 
on to the linker and will lae linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS conpilers may be simultaneously available on a single 
system. Because the ada command in any VADS_locatioiv/bin oh a system 
will execute the correct compiler conponents based upon visible 
library directives, the option -sh is provided to print the name of 
the components act\ially executed. % 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
compiled in the same ada library using the -l option (even if the 
contents and unit names are different), the second conpilation will 
overwrite the first. For example, the compilation of 
/\isr/directory2/foo.a -L /\isr/vads/test will overwrite the 
compilation of Aisr/directoryl/foo.a -L /usrAads/test in the 
VADS library AisrAads/test. 


B-6 





OOHPILATION SYSTEM OPTIONS 


NOTE: It is possible to specify the directory for tenporary files by 
setting the environment variable IMPDIR to the desired path. If TQIpdir 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not write2:ble, the program exits with w error message to that effect. 

Diagnostics 

The .iagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a,error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTICNS 

The linker options of this Ada implementation, as described in this Appendix, 
are provid^ by the custamer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 





COMPIIATiai SYSTEM OPTIONS 


a.Id Command Reference a.Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id (options) unit_naroe (linker_options) 

Arguments 

linker_options 

All arguments after unitjnaioe are passed to the linker, 
library edibreviations or object files. 

options options to the a.Id comm 2 tnd. These are: 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.li (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations :’.n the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies"used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases whei<e linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E \anit name 

(eliljorate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the terroorary file containing the list of 
object files to link. This file is only present ^en many object 


B-8 










COMPILATION SYSTIM OPTIONS 


files are being linked. 

-L libraryjnaine 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC *> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
s\^ress linking. 

-V (verbose) Print the linker carroand before executing it. 

-V (verify) Print the linker c<»Dmand but st^ress execution. 

-w (warnings) Su^^ress warning messages. 

\init_name 

name of an Ada unit. It must name a non-generic subprogram. 

If unitjname is a function, it must return a value of the 
type STANDARD.INTEX3ER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit name a main 
program and calls the Id(l) linker to link togetheT all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). Ihe utility uses the net files produced 
by the Ada coiqpiler to check dependency information, produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. Ihe elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the coiqpiler, these directives also include Wllun 
directives that allow the automatic linking of object modules 
conf)iled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WITHn 

B-9 








COMPILATION SYSTEM OPTIONS 


directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl;LINK;object_file: 

WITH2: LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the seune numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Conputer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /tnp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker'. 


B-10 








APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed in^lementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inqplementation-dependent 
characteristics of this Ada inqplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this .^ppendix are to compiler documentation and not to this 
report. ln?)lementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTEGER is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type LONG FLOAT is digits 15 

range -T.79769313486231E+308 .. 1.79769313486231E+308; ' 
type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 










APPENDIX F OF IHE Ada STANDARD 


APPENDIX F. In^jlementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are siobject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINE_ONLY Pragma 

The INLINEJCXJLY pragma, when used in the same way as pragma 
INLINE, indicates to the con?jiler that the subprogram must 
always be inlined. Ihis pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be rais^ at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of scxne 
predefined Ada packages, but provides no user access. It is' 
used only to implement code bodies for vdiich no actual Ada 
body can be provided, for exanple the MACHINE_C0DE package. 

1.4. smsBE_CODE Pragma ' 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu- 


C-2 







APPENDIX F OF THE Ada STANDARD 


ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the conpiler will try to 
share code generated for a generic insteuitiation with code 
generated for other instantiations of the same generic. 
Vltien the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic \anit. 

The name pragma SHARE BODY is also recognized by the inple- 
mentation and has Bie same effect as SHARE_CODE. It is 
incl\xied for compatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma sxj^resses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
ccxnpilation warning ai^ PROGRAM_ERRiC^ raised at run time. 

1.6. EXTERMAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allov^ the user to specify a 
different external name that may be used to reference the 
entity frcxn other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following; 
a lo(^ variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

C-3 









APPES^IX F of the Ada STANDARD 


1.8. IMPLIClT_CODE Pragpma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a marine c^e 
procedure, it specifies that inplicit code generated by the 
compiler be allowed or disallovred. A warning is issued if 
OFF is used auid any implicit code needs to be generated. 
The default is ON. 


1.9. OPTiMiZEjCODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vhether the code should be optim¬ 
ized by the coopiler. The default is ON. Vlhen OFF is 
specified, the coinjiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is iitfjlemented as described in i^^ndix B of the 
Ada RN. 


2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RN. 


2.4. INTERFACE 

This pragma supports calls to and FORTRAN functions. The' 
Ada subprograms cam be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ATORESS in SYS^TEH. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is io^lemented as described in Appendix B of the 
Ada RN. 


2.6. MENORY_SIZE 

This pragma is recognized by the implementation. The inple- 


C-4 








APPENDIX F OF TOE Ada STANDARD 


mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reco!i{>iled. 

2.7. NON_REENTRANT 

This pragma tzdces one argument vAiich can be the name of 
either a library subprogram or a suli^rogram declared Immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. Ihe pragma can be applied to a stibprogram or a 
set of overloaded su]:^rograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABC»ATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the. 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 


C-5 








APPENDIX F OF THE Ada STANDARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time euid will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inplemented as described in Aj^ndix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the in 5 >lementa*''’on. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.16. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISICXJ CHECK and in some cases OVERFLOW_CHECK cannot be 
supresseH. 

2.17. SYSTEMJNAME 

This pragma is recognized by the inplementation. Ihe imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
leJael, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of <the 
machine code associated with the corresponding body or 
statement. For an entry for T^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 


C-6 








APPENDIX F OF THE Ada STANDARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AMJRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNEDJTYPES; 
package SYSTEM is 


pragma su{^ress(ALL_CHECKS); 
pragma sr?:press(EXCEPTION_TABLES); 
pragma not_elaborated; 

type NAME is ( att_mips_self ); 

SYSTEM_NAME : constant NAME att_mips__self; 

STORAGEJUNIT ; consteuit 8; 

MEMORY^SIZE j constant 16_777_216,- 

— Systeift-Dependent Named Numbers 


MIN_INr 
MAX_1NT 
MAX_DIGITS 
NAX_MANTISSA 
FINE DELTA 

tioT 


: constant 
: constant 
: constant 
constant :<• 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 183 ^47; 
1 ?; ‘ “ 

2.0*’»(-31); 

0 . 01 ; 


— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer 1024; 

type AKStESS is private; ^ 

function ">" (A: AIX>RESS; B: ADDRESS) return BOOLEAN; 

function ”<" (A: AEX2RESS; B: AIX)RESS) return BOOLEAN; 

function ">-"(A: ATORESS; B: ADDRESS) return BOOLEAN; 

fvinction "<-''(A: AIX)RESS; B: AIX)RESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function (A: AIX)RESS; I: INTEGER) return PiDDBESS; 

function (A; ADIWESS; I; imEGER) return AMJSRESS; 

function ”+” (I: UNSIGNED TYPES.UNSIGNED INTEGER) return AIX)RESS; 


C-7 






APPENDIX F OF IHE Ada STANDARD 


function HEnORy_ADDRESS 

(I: UNS1C3«ED_TYPES.UNSIGNED_INTEGER) return ADI»ESS renames 

NO_ADDR : constant AIX)RESS; 

type TASK_1D is private; 

NO_TASK_ID ; constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID ; constant PASS1VE_TASK_1D; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SI2E; constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIAN 

); 

BYTEJORDER: constant BYTEjORDER_T BIG_E24DIAN; 
type £iONG_ADDRESS is private; 

NO_LONG_ADDR ; constant LQNGJVMJRESS; 

function "+" (A; IjONG_ADDRESS; I; INTEGER) return LONGJVDDRESS; 
function (A; LONG_ADDRESS; I: INTEGER) return LONG_ADDRESS; 

function NAKE_LONG_AIX}RESS (A: ADDRESS) return LONG_ADDRESS; 

function LOCALIZE(A: Lax;_ADDRESS ; BYIE_SIZE : INTEGER) return ADDRESS 

function STATIC3N_OF(A; LCNG_AIX>RESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is the julian day. 
subtype DAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVOCATION_By_ADDRESS ; constant BOOLEAN'.:- TRUE; 

SUPPORTS_PREELABORATION : constant BOOLEAN TRUE; 

nAKE_ACCESS_SUPPORTED : constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPTJEASK. 

type INTERRUPT_TASK_KIND is ( SIMPLE, SI®IALLING ); 

function RETURN_ADORESS return ADDRESS; 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 


C-8 





APPEI4DIX F OF IIIE Ada STANCARD 


NO_ADDR : constant AIX}RESS :• 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<''); 
pragma BUILT_1N( 
pragma BU1LT_IN( 
pragma BUILT_IN(); 
pragma BUILT_IN(; 

type TASK_ID is new UNS1GNED_TYPES.UNSIGNED_1NTBGER; 
N0_TASK_1D : constant TASK_ID 0; 

type PASSIVE_TASK ID is new UNSIGNED TYPES.UNSIGNED_INTBGER; 
NO_PASSIVE_TASK_ID ; constant PASSIVE_TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID 0; 

type LQNG_ADDRESS is 
RECORD 

Station : UNSIGNED_TYPES.UNSIGNa>_INTEGER; 
addr : AZX>RESS; 

END RECORD; 

NO_LQNG_AEE)R : constant LONG ADDRESS (0, 0); 


pragma BUILT IN(NAKE LONG ADDRESS); 
pragma BUILT~IN(LOC;^IZE)T 
pragma BUILT~IN(STATI0N_0F); 

pragma BUILT_IN(RETURN_AW)RESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record ccm^^onents are padded 
so as to provide for efficient access by the tatget 
hardware, pragma PACK a^^lied to a record eliminate the pad¬ 
ding >^ere possible. Pragma PACK has no other effect on the 
storage allocated for record cos^nents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 


C-9 






APPENDIX F OF THE Ada STANDARD 


clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of conponents only when the cooponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for vari 2 d)les. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables v^ich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada BM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISBs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RN 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are iiqposed for a select state¬ 
ment containing both a terminate alternative and an accept' 
alternative for an interrupt entry (see Ada RH 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed aixl are treated as a normal task rendezvous. ^ 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrvqpt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 





APPEIIDIX F OF THE Ada STANCARD 


The AIX)RESS attribute is not suRwrted for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 

CC»E_n'( opcode, operand {, operand} ); 

v^ere n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

COTE_N'( opcode, (operand {, operand)) ); 

For those opcodes that require no operands, named notation 
must be used (cf. BN 4.3(4)). 

CODE_0’( op «> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in NACHINE_CCX>k or 
the 'RF? attribute. 

The arguments to any of the functions defined in 
MACHINE_C(X>E must be static expressions, string literals, or 
the functions defined in MAOilNEjCCBE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 


C-11 






A 

APPENDIX F OF TOE Ada STANDARD 


TOere are no implementation-generated n 2 unes. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) v^en the size 
of ELEMENTjryPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENTJTYPE'SIZE is 
very large, MAX_REC__SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an uj^r limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_10 will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS)“vrtien the 
size of ELEMENTJTYPE exceeds that value. For example for 
unconstrained arrays such as string vdiere ELEMENTJTYPE * SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_I0 to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the in^jlemen- 
tation. It is not intended to impl^ that resources up t6 or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
32,000,000 X STORAGE UNITS. The maximum size of a statically 


C-12 










APPENDIX F OF THE Ada STANEAED 


sized record type is 32,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGEJSIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the edssence of an explicit STORAGEJSIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Cft>jects 

There is an absolute limit of 6,000,000 x STORAGEJUNITS for 
objects declared statically within a coii{>ilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 






