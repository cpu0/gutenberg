

AVr Control Nunber: AVP-VSR-541-1092 
Date VSR Conplete: 18 Noveaber 1992 

92-06-23-VRX 



Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11283 
Verdix Corporation 

VADS System V/386/486 VAda>110-3232, Version 6.1 
NCR model 3550 under NCR UNIX SVR4 MP-RAS Release 2 


(FINA-) 


Prepares! By: 

Ada Validation_Facility 

645 C-CSG,^CSL 

Wright-Patter son AFB OH 45433-6503 


DTIC QUALITY INSPECTED B 


93-01435 . 


4««4Ms&oe 

HTTS liMAl 

tn* tAB 

\ Uaaaaoan«*4 
Justirieatltfu 


ly- 


Dlstrlkmtlwi/ 


Availablllir Cedes 




aad/or 


Dist 

Special 

1 

98 1 26 057 



1 


□ □ 



REPORT DOCUMENTATION PAGE 

Form Approved 

OPM No. 0704-0188 \ _^ 

PuMc rapoiting budw) for Viii colKtIon of Mormilon b oitlmalod to wmigft 1 four por mpoiw. tndudbg do dm lor ndoMkig Irtrualono. loorerilno oxMng ddo oouott gdhortng and inoWotning da dda 
naadad. arid iddawing da oodactfon of Momialloa Sand cornmanla raBaidfng db burdan aMdiala or any olfiar aapaci of dib notacflon of MormaUon, Inefuddg mpaaflnni tor laducdg db burdan, to MtaaNngdn 
Haadquattari Sarvica, Obaclorala lor Moimation OparMiona and Rtporb, 121S Jafiaraon Daub HigfMtay, Suta 1204. Artngton, VA 22202-4302. and to da Otioa of Monnalion and nagulalory AHaiia. Odea of 
Managamani and Budgal. Waahinodn. OC 20503. 

1. AGENCY USE ONLY (Leave Blank) 2. REPORT DATE 

3. REPORT TYPE AND DATES COVERED 

Final: 18 Nov 1992 

4. TITLE AND SUBTITLE 

Validation Summary Report: Verdix Corporation, VADS System V/386/486 

VAda-110-3232, Version 6.1, NCR model 3550 under NCR UNIX SVR4 MP-RAS 
Release 2 (Host & Target), 921004W1.11283 

5. FUNDING NUMBERS 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 

USA 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
BkJg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-541-1092 

9. SPONSORING^MONITORING AGENCY NAME(S) AND ADDRESS<ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

\aJ 1 

ELECTS 

JAN 2 7 19931 

10. SPONSORING4UIONITORING AGENCY 
REPORT NUMBER 

f_ 

11. SUPPLEM ENTARY NOTES ^ 

12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS System V/386/486 VAda-110-3232, Version 6.1, NCR model 3550 under NCR UNIX SVR4 
MP-RAS Release 2 (Host & Target), ACVC 1.11. 

14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 

Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17. SECURITY CLASSIFICATION 18. SECURITY CLASSIFICATION 

OF REPORT 

UNCUSSIFIED UNCLASSIFED 

19. SECURPTY CLASSIFICATION 

OF ABSTRACT 

UNCLASSIFIED 

20. UMiYaYkIjN of ABSTRAci 


NSN 7540-01-2S0-550 Standard Form 298. (Rev 2-89) 


Prascribed by ANSI Std 239-128 
















Certificate infomation 


The following Ada inplenentation was tested and determined to pass ACVC 
1.11. Testing was completed on 4 October 1992. 

Conf)iler Name and Version: VADS System V/366/486 

VAda-110-3232, Version 6.1 

Host Computer System: NCR model 3550 

under NCR UNIX SVR4 HP-RAS Release 2 

Target Coaster System: NCR model 3550 

under NCR UNIX SVR4 KP-RAS Release 2 

Customer Agreement Number: 92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

921004W1.11283 is awarded to Verdix Corporation. Ibis certificate expires 

two years after the ANSI adoption of ANSI/MIL-STD-1815B. 

This report has been reviewed and is aj^roved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 


645 C-CSG/SCSL 

Wright-Patterson AFB CW 45433-6503 


Ada Vd^liirdaf^oiy Organization 

Direo^r, T^m^ter and Software Engineering Division 
Institute for Defense Analyses 
Alexemdria VA 22311 





Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 




DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 


Customer: Verdix Corporation 

Certificate Awardee; Verdix Corporation 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Neune and Version: VADS System V/386/486 

VAda-110-3232, Version 6.1 

Host Computer System: NCR model 3550 

under NCR UNIX SVR4 MP-RAS, Release 2 

Target Computer System: NCR model 3550 

under NCR UNIX SVR4 MP-RAS, Release 2 


Customer's Declaration; 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 













TABLE or OGNTElfTS 

aiAPTER 1 INTROOUCnON 

1.1 USE OF THIS VALIDATION SUHMABY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION I^ENDENCIES 

2.1 WITHDRAHN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS .2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 


1 


INTRCXXICTtGN 


The Ada impleinentation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] \ising the 
current Ada Ccmpiler Validation Capability (ACVC). This Vali^tion Sunnary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATIGN SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the cmputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the siibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF v^ich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Divisim 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




, j" i |i.u. i i i jij l ■ {^^■..| | ' i ai,>* pi . ! .;H|i.?v 


I H mOD O CT I ON 


1.2 REFERENCES 

[Ada83] Reference ftential for the Ada Prooraianinq Language , 

ANSI/MIL-STD-1815A, February 1^83 amd ISO 8652-1987. 

[Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 Jvme 1989. 


1.3 ACVC TEST CLASSES 

CoRf>liance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating t l^ re sult when they 

are executed. Three Ada library units, the packages REPORT and SPPRT13^_ 

and the procedure CHECK FILE are used for this purpose. The packa^ REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vdiich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, a^ execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in ^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in sectim 2.3. 


1-2 





INIRODIXrnON 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Conpiler The means for testing conpliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation sunnary 

(ACVC) report. 

Ada An Ada conpiler with its host cooputer system and its 

Inplementation target ccxiputer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vdiich carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidaunce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Ccmputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Conputer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system \diere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANS1/MIL-STD-1815A-1983 and ISO 8652-1987. Citations frcan 
the LRM take the form ''<section>.<s\ibsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, aixi data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system \diere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90J. 

The process of checking the conformity of an Ada compiler to 
the Ada prograimming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in ccmiformity 
testing. A test loay be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IHPLEMENTATIGN DEPENDB4CIES 


2.1 WITHDRAWN TESTS 

Die following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

B08004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPL. 1 CABLE TESTS 

A test is inapplicable if it contains test objectives vdiich are irrelevant 
for a given Ai^ inplementation. Reasons for a test's inapplicability nay 
be supported by documents issued by the ISO and the AJPO known as Ada 
Ccnmentaries and conraonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




IHPLEMENIATIGN DEPENDENCIES 


Hie following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX DIGITS: .b 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests chec)( for the predefined type LGNG_INTEGER; for 
this iiq)leinentation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B8600lUj and C86006G checlc for the predefined type 
LCX4G_FLQAT; for this implementation, there is no such type. 


C35713D and B86001Z checlc for a predefined floating-point type with a 
name other than FLOAT, LCM3 _FLCiAT, or SHORT_FLOAT; for this 
inplementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531N..P and C45532N..P (8 tests) check fixed-point operations for 
types that recjuire a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, NAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
NACHINEjDVERFLOWS is FALSE for floating point types aixl the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, NACHINEjDVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


cn)1009C checks ^diether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 




IHPLEMENIATIGN DEPENDENCIES 


CD2AB4A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not siif^rt such sizes. 

The tests listed in the following table check that USE_ERRC^ is raised 
if the given file operations are not si^^rted for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

G^TE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_F1LE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FTT.fi; 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation ceunnot restrict 
file capacity. 

CE3304A checks that SET_LINE_^LENGTH and SET_PAGE_LENGTH raise 
USE ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERROR vhen the value of the 
page number exceeds CCXJNT'LAST; for this Implementation, the value of 
CXXJNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 





inPLENEmATIGN DEPENDQiCIES 


2.3 TEST IWDIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
infilementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evalxiation Modification as directed by 
the AVO. The ccmpiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, a)2A22J, CD2A31A..C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. 'Diese tests use 
instantiations of the support procedure L£3X?ni_CHECK, vdiich uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK ON REPPESENTATIOJ FOR <TyPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. 

This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 


2-4 



CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Itie Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NN Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada implementation was conducted at the cxistomer's site by 
a validation team frcan the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vAiether the test is a^^licable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and a^^licable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the svqpport 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 




PROCESSING INFQRTViTIGN 


a) Total Number of Applicable Tests 3605 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) NOn-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 270 (c-kIi^) 

g) Total Number of Tests for ACVC 1.11 4170 (a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the custonized test suite (see section 1.3) was 
taken on-site by the vali^tion team for processing. Itie contents of the 
magnetic tape were loaded onto a Sun workstation and copied over Ethernet 
to the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. Ilie options invoked explicitly for validation testing 
during this test were; 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 





APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for custcnizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the meucimum input-line length, \diich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 — value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> ’V) 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') «, '4' & 
(1..V-1-V/2 •> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STR1NG2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' & 
(1..V-20 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & -F.E;" 


A-1 



NACEtO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


Hie following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNHENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

I386_SYSTEM_V 

$DELTA_DCX: 

0.0000000004656612873077392578125 

$ENrRY_AI»RESS 

SYSTEM. •'+"(16#40#) 

$ENTRY_AM)RESS1 

SYSTEM. ••+"(16#80#) 

$ENrRY_ADDRESS2 

SYSTEM."+"(16«100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

9 9 

$FIXED_NAME 

N0_SUC2J_TYPE 

$FLQAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

fin 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITy" 

$GREATER THAN OURATIGN 

100_000.00 


$GREATER_THAN_DURATIGN BASE LAST 

T0_O0TJ_O0O 

$GREATER_THAN_FLQAT_BASE LAST 

l.lE+308 

$GREATER_THAN_FLQAT SAFE LARC^ 

5.iyE307 






MACRO PARAMETERS 


$GREATER_'niAN SHORT FLOAT SAFE LARGE 

9.0E37 “ 

$HI(a_PRIORITY 99 

$ILLEGAL_EXTERNAL FILE NAMEl 

Villegal/file_neunB/2{ ]$%FILEl.nAT" 

$ZLLEGAL_EXTERMAL_FILE NAME2 

Ville9al/file_nanie/2{ J$%FILE2.nAT" 

SINAPPROPRIATE LINE LENG1H 

-1 

SINAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 pragma include ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTBGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN DURATICXa_BASE FIRST 

-1]3_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CC®E_STATEMErr 

OOOE_0'(OP -> NOP); 

$MACHINE_CC»E_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$M1N_INT -2_147_483_648 

$NAME TINY_INTEGER 

A-3 



MACRO PARAMETERS 


$NAME_LIST l386_SySTEM_V 

$NAME_SPECIFICATIONl Aisr/vc/acvc/c/e/X2120A 
$NAME_SPECIFICATI0N2 /\asr/vc/acvc/c/e/X2120B 
$NAME_SPECIFICATION3 A»srAc/acvc/c/e/OC3119A 
$NBG_BASED_INT 16*F000000E# 

$NEM_MEM_SIZE 16_777__216 

$NEW_STOR_UNIT 8 

$NEW_SYS_NAME I386_SYSTEM_V 

$PAGE_TERMINATOR ASCII.LF & ASCII.FF 

$RECORD_DEFINITION RECORD SUBP: OPERAND; END RECC^ 
$RECORD_NAME CODE_0 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 1024 

STICK 0.01 

$VARIABLE_AIX)RESS VAR_1'ADDRESS 

$VARIABLE_AIX)RESS1 VAR_2' AIX)RESS 

$VARIABLE_AIX>RESS2 VAR_3'Ai:X»lESS 


$YOUR_PRAGMA PRAGMA PASSIVE 


A-4 





APPE21DZX B 


CQHPIIATIGN SYSTEM OPTIONS 


The ccanpiler options of this Ada iiif)leinentati(xi, as described in this 
i^jpendix, are provided by the customer. Unless specifically noted 
otherwise, references in this a{^ndix are to compiler documentation and 
not to this report. 


Syntax 

ada [options] t source_file]... (linker_options) 
tobject_file.o]... 

Description 

The ccmmand ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each coopiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
substituted for .a. The -o option can be used to produce an 
executable with a name other than a.out, the default. For 
cross compilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-H option is used, the compiler automatically invokes a.Id 
and builds a cooplete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced a compiler for 
another language) may be given as arguments to a^. These 
files will te passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 


B-1 




CXMPIIATIGN SYSTEM OPTIGNS 


Several VADS cca(>ilers may be simultaneously available on a 
single systos. Because the ada comBand in any 
VADS locatioiVbin on a system will execute the correct 
ccmpTler components based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat filejname as an ar file. 

Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
maricing any defined units as uncoopiled. The -d opticxi is 
used by a.make to establish dependencies among new files. 

-e (error) Process ccmpilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only me -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages can 
be used as input to a.error. 

-el (error listing) Intersperse error messages ammg source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, esdsed them m the source file, and call the 
environment editor ERP(^_EDIT(^. (If ERROR_EDITOR is 
defined, the environment variable ERROR FATTEBN should also 






CQMPIIATIGN SYSTEM OPTIONS 


be defined. ERROR_PATTERN is an editor search ccnnand that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, call vi(l). 

-K (keep) Keep the intermediate language (IL) file 
produced by the compiler front end. 

-L libraryjname (library) Operate in VADS library 
libraryjname (the current vrorking directory is the default). 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file alt^reviation.) 

For a description of the file ali^reviations, see also 
Operating system documentation, ld(l) 

-N unit_name (main) Produce an executable program using 
the named unit as the main program. The unit nust be either 
a parameterless procedure or a parameterless function 
returning an integer. The executable program will be left in 
the file a.out unless overridden with the -o option. 

-M source_file (main) This option is like -M unit_name, except 
that the unit name is assraned to be the root 

name of the .a file (for foo.a the unit is foo. Only one .a file 
may be preceded by -M. 

-o executable file (output) Ihis option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer (0PTIM2). An 
optional digit (there is no space before the digit) limits 
the number of passes by the optimizer: 

no -O option, make one pass 

-O no digit, optimize as far as possible 

-OO prevents optimization 

-01 no hoisting 

-09 full optimization 

Ihe addition of the INFO directive, OPTINStlNFOtll^UE, to the 
ada.lib will cause the coo^iler to use a new optimizer (0PTIM3) 
that generates faster code. 

The default level of optimization for 0PTIH3 is 04. Note 
that optimization levels for 0PTIM3 are more than simply 
additional iterations: 


B-3 




COHPIIATIQN SYSTEM OPTIONS 


-O full optimization (same as OPTIH2 ada -09) 

-OO prevents optimization 

-01 no hoisting (same as 0PTIM2 ada -01) 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting frcaa loops with maximum passes 

-07 hoisting from loops and branches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIDE, 
INFO Directive Names on page 

a.info on page , and for more information about 
optimization, see USER'S GUIDE, Ccx^iler Optimizations on 
page . 

-R VADS_library (reconfiile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) ^^ly pragma SUPPRESS to the entire 
con^ilation for all suppressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print ccmpiler version nundser, date and time 
of ccxDpilation, name of file coo^iled, command input line, 
total compilation time, and error summary line. Storage 
xisage information about the c^ject file is provided. With 
0PTIH3 the output format of compression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 


B-4 




CX3MP1LATI0N SYSTEM OPTIONS 


-w (warnings) Suppress warning diagnostics. 

Diagnostics 

The diagnostics produced by the V?VDS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph nxjmber 
enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
J^>pendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a. Id 


prelinker 

Syntauc 

a.Id [options] iinit_name [ld_options] 

Options 

-DX (debug) Debug memory overflow (use in cases v^ere 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elalsorate) Elalxirate \mit_name as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_narae (the current working directory is the default). 


-o executable file (output) Use the specified file name as 
the name of tEe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 


B-5 



COMPILATION SYSTEM OPTIONS 


-V (verify) Print the linker cofunand but si^ress 
execution. 

Description 

a.Id collects the object files needed to make unitjname a 
main program and calls the UNIX 
linker ld(l) to link together all Ada and other language 
objects required to produce an executable image in a.out. 
unit_name is the main program and must name a non-generic 
sult^rogram. If unit_name is a function, it must return a 
value of the type STANDARD.INTEGER. This integer result will 
be passed back to the UNIX shell as the status code of the 
execution. The utility uses the net files produced by the Ada 
compiler to check dependency information, a.Id produces an 
exception ma{^ing table and a unit eledxsration ted^le euxl passes 
this information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 

Besides information generated by the compiler, these 
directives also include WITHn directives that allow the 
automatic linking of object modules ccxnpiled from other 
languages or Ada object modules not nas^ in context clauses 
in the Ada source. Any number of WIThn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at WITHl. The directives are recorded 
in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file: 

W1TH2:LINK;archive_f ile: 

WITHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrajqper program that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VADS coopilers to exist 
on the same host. The -sh option prints the name of the 
actual executable file. 


B-6 




COMPILATION SYSTEM OPTIONS 


Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 


B-7 



APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


Ttie only allowed inf)leinentation dependencies correspond to 
iiUjlementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Aj^ndix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Iiqjlementation-specific portions of the package STANDARD, vhich 
are not a part of i^pendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486231E+308..1.7976931348623lE+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E-i'38; 

type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 






APPE24DZX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. inpleinentation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINEJONLY pragma, when used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. This pragma also suitresses the genera¬ 
tion of a calleible version of the routine which saves code 
space. If a user erroneously makes an iNLINEjOMLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefined Ada packages, but provides no user access. It is 
used only to inplement code b^ies for which no actual Ada 
body can be provided, for example the MACHINE_C(X>E package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation vinit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the ccxipiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a imique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple- 


C-2 




APPENDIX F OF THE Ada STANDARD 


mentation and has the same effect as SHAREjCOOE. It is 
included for cooopatability with earlier versions of VADS. 

1.4. NO_IHAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atten^t to use the IMACS attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PROGRAN_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACEJNAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variedsle, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers C3N or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. OPTIMIZE_CC»E Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 





APPEM)IX F OF THE Ada STANDARD 


ment. This pragma is only allowed within a machine code 
procedure. It specifies v^ether the code should be optim¬ 
ized by the compiler. The defaxilt is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the inpl^nentation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 

2.3. INLINE 

This pragma is implemented as described in i^^ndix B of the 
Ada RM. 


2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type AIX)RESS in SYSTEM. 
All parameters must have m^e IN. Record and array objects 
can be passed by reference using the A[X>RESS attribute. 

2.5. LIST 

This pragma is inplemented as described in J^;^ndix B of the 
Ada RN. 


2.6. MEM0RY_SI2E 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.7. N0N_REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subpi^ogram will not be called 
recursively allowing the ccmpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded su^rograsm within a package spec or pack¬ 
age body. 


C-4 








APPENDIX F OF THE Ada STANEABD 


2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma sv^resses tlte 
generation of eledxiration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inpleinentation but has no 
effect. 


2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 


The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immi^iately within a library package spec or 
bo^. The pragma directs the coopiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at coopile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inplemented as described in i^pendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the inpleroentation but has no 
effect. 


C-5 






APPENDIX F OF THE Ada STANDARD 


2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 

2.16. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISION CHECK and in S(xne cases GVERFLCW_CHECK cannot be 
supresse?. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccxtpiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a sulprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for v^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CCX)E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_1D yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

— Copyright 1987, 1988, 1989 Verdix Corporation 

— Preserve line numbers as they are reported in ACVC tests. 


C-6 






APPENDIX F OF THE Ada STMCMD 


with unsigned_type8; 
package SYSTEM is 


pragma 3uppress(ALL_aiECKS); 
pragma suppress(EXCEPTIGNJIABLES); 
pragma not_elaborated; 

type NAME is ( i386_System_V ); 


SYSTEM_NAME : cc»lStant NAME :• i386_Systaii_V; 

STORAGEJUNIT : constant 8; 

MEMORY_SIZE : constant 16_777_216; 

— System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
: coiistant 
constant 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 183 ^47; 
1 ^; ~ ■ 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE : integer :« 64*1024; 
type A[X)RESS is private; 


function ">" (A: ADDRESS 
function "<" (A: ADDRESS 
function ">-"(A; AIX»ESS 
fxjnction "<-"(A: ADOtESS 
function (A: ADDRESS 
function "•••" (A: ADDRESS 
function (A; ADE»USS 


B: AIX)RESS) 
B: AIXmESS) 
B: A1X»^S) 
B: ADDRESS) 
B: AIX»ESS) 
I: INTEGER) 
I: INTEC^) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INIECZR; 
return ADDRESS; 
return ADDRESS; 


function "-f" (I: UNSIGNED TYPES.IPISIQIED INTEGER) return ADDRESS; 


function NEMCXtY_ADDRESS 

(I: UNSIGNED_TYPES.DNSIGNED_INTEGER) 
return ADCOtESS renames 


NO ADDR : constant AEXIRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

subtype SIG_STATOS_T is INTEGER; 

SIG STATUS SIZE: constant :• 4; 


C-7 




APPENDIX F OF THE Ada STANDARD 


type PROGRAM_ID is private; 

NOPROGRAMID : constant PROGRAMID; 

type LGNG_AIX}RESS is private; 

Np_LGNG_AIX)R : constant LONG_AIX)RESS; 

fvinction (A: LCNG_AI»RESS; I: INTEX2R) return LCNG_ADDRESS; 

function (A: LONG_ADDRESS; I: INTEGER) return LCNG_ADt»ESS; 

function NAKE_LC)NG_AIX»ESS (A: AIX)RESS) return LONG_ADI»ESS; 

function LOCALIZE(A: LONG_AI»RESS ; BVTE_SI2E ; IIIIBGER) 
return AIX>RESS; 

function STATION OF(A: LONG A1»RESS) return INTEGER; 


private 


type AIX3RESS is new UNSIGNEDJTYPES.UNSIGNED_INTBGER; 
NO_AIX)R : constant AIX)RESS :• 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN( 
pragma BUILT_IN(); 
pragma BU1LT_IN(; 
pragma BUILT_IN(”+"); 

type TASK_ID is new UNSIGNED_1YPES.UNSIGNED INTEGER; 
NO_TASK_ID : constant TASK_ID :• 0; ” 

type PROGRAM_ID is new UNSIGNED__TYPES.UNSIGNED_INTEC$R; 
NO PROGRAM ID : constant PROGRAM ID 0; 


type LONG_AIX)RESS is new UNSIGNEDJTYPES.UNSIGNED_INTEC23^; 
NO LONG AIX)R : constant LONG AIX>RESS 0; 


pragma BUILT_IN(MAKE_LONG_AM)RESS) ; 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access the target 

hardware, pragma PACK applied to a record eliminate the pad- 


C-8 


APPTOIX r 0 ^ THE Ada STMEARD 


ding vAiere possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representaticxi 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of cooponents only vdien the coo^xxient type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only su^iported for variedsles. Since 
default initialization of a variable requires evaluaticxi of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the pl^ical 
address associated with the variable. 

5.4. Interrupts 

interupt entries are not su^^rted. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities; 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CO[X provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode nneunonics, 
a set of register definitions, and a set of addressing mode 
functions. 


C-9 



APPENDIX F OF IHE Ada STANDARD 


The general syntax of a machine code statement is as fol¬ 
lows: 


CCX}E_n'( opcode, operand (, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable nundaer of operands. 
The operands are listed within a sxibaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand (, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RN 4.3(4)). 

CCX)E_0'( op -> opcode ); 

The opcode must be an entimeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An opereuid can only be an entity defined in NACHINEjCWE or 
the 'REF attribute. 

The arguments to any of the ftinctions defined in 
MACHINE_CCX3E must be Static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 


Ncme. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC__SIZE as 
the record size (expressed in ST0RAC2;_UNITS) when^the size 
of ELEMENT TYPE exceeds that value. For example for mcan- 


C-10 






APPDIDIX F OF THE Ada SIANDARD 


% 


strained arrays such as string \diere EXEKEMTJIYPE'SIZE is 
very large, MAX_REC_SIZE is xised instead. NM(_RECORp_SZZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an x^f^r limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_10 will raise USE_ERRaR 
if I1AX_REC_S1ZE exceeds this absolute limit. 

Instantiations of SBQOENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) \dien the 
size of ELEMENTJIYPE exceeds that value. For example for 
unconstrained arrays such as string vdxere ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
NAX_RECORD SIZE is defined in SYSI^ and can be changed by a 
program before instantiating INTBGER_IO to provide an upper 
limit on the record size. SEQUEl}TIAL_lO in^ses no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actxially enforced by the iiq>lemen- 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x ST0RAGEJ[E4ITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STOEW3EJ5IZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAC^JUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORACX_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared CX}jects 


C-11 







