General Disclaimer 


One or more of the Following Statements may affect this Document 


• This document has been reproduced from the best copy furnished by the 
organizational source. It is being released in the interest of making available as 
much information as possible. 


• This document may contain data, which exceeds the sheet parameters. It was 
furnished in this condition by the organizational source and is the best copy 
available. 


• This document may contain tone-on-tone or color graphs, charts and/or pictures, 
which have been reproduced in black and white. 


• This document is paginated as submitted by the original source. 


• Portions of this document are not fully legible due to the historical nature of some 
of the material. However, it is the best reproduction available from the original 
submission. 


Produced by the NASA Center for Aerospace Information (CASI) 



Interim Report on Contract NAS8-35354 


SPACE RAD I AT I Q N STUDIES 


(NASA-CR-ni4lO) SPACE BALIA1I0N STUDIES 
Irteiii B € f ci 1 1 Jul. 1984 - Can. 1985 
(llataaa Univ. # Huntsville.) 13 p 
HC A02/ME 101 CSCI 03B 

G3/93 


For the Period July 1984 - January 1985 


Prepared By 

Cosmic Ray Laboratory 

The University of Alabama in Huntsville 
Huntsville, Alabama 35899 


N65-26564 

Unclas 

15180 


5 March 1985 



SUMMARY 


During this period an intensive effort has been made to develop 
the data analysis software for the Nuclear Radiation Monitor to fly on 
Spacelab - 2. Results of data analysis of the Active Radiation Detector 
which flew on Spacelab - 1 will be presented later this year. 



NRM Data Analysis Software 


Development of NRM data analysis software is in progress. The overall 
data flow diagram (Figure 1) has been revised in the light of better 
understanding of the format in which the data will be delivered to MSFC 
and the capabilities of the hardware environment in which the analysis 
programs will operate. The use of structured techniques for the software 
design appears to be working well. Figure 2 shows an example of one of 
the processes in Figure 1 after it has been broken down into its component 
processes. The present technique uses PASCAL as a Program Development 
Language (pseudo-code) to develop and document the software design. 
Attachment A is an example of the PASCAL pseudo-code written to implement 
th'» processes in Figure 2. The pseudo-code is sufficiently general that 
the actual code may be written from this design in almost any programming 
language. Note also that the pseudo-code may evolve in its details as the 
overall system design matures. UAH Research Professor W. Paciesas is 
supervising this software development. We intend to have portions of the 
software ready for use with tapes of sample data which are scheduled to be 
delivered to MSFC by early May 1985. The full sy p cem is scheduled for 
completion in time for the expected delivery of the Spacelab 2 mission data 
tapes (early September). 


vO 


NKM DATA ANALYSIS SYSTEM 
DATA FLOW 






2.0 

GAIN 

MONITOR 



K i q u r e 2 



ATfACHM^KjT A 


4/»vcv ; 




' 7 




* * * 


(**************** QA j MONITOR procedures 

^**********************k***************** 


) 

) 

) 


{ The following are preliminary blocked-out procedures intended to 
implement PROCESS 2. in the NRM data flow diagram.} 


( 

( 

( 


****************** 



) 

) 

) 


) 


(ft******************************************************* 

PROCEDURE GAIN MONITOR; {main procedure} 

***** MO*., 

{PROCESS NUMBER - 2} 

{DESCRIPTION: This procedure compiles a history of NRM gain para- 

meters and resolution as a function of time during 
the mission.} 


TYPE CHANNELS_C - ARRAY [0..511] OF INTEGER; 
CHANNELS_R - ARRAY (0..511} OF REAL; 
CHAR_3 » PACKED ARRAY (1..3J OF CHAR; 
CHAR 4 - PACKED ARRAY (1..4) OF CHAR; 


{The following variable declarations may become global to the entire 
main program at a later stage of program design} 


{This procedure, GA I N_MON I TOR , assumes all global variables used in 
internal procedures to act as PASSED VAR PARAMETERS - (or as declared 
as COMMON variables in FORTRAN) . This is due to the large number of 
variables to pass as VAR parameters and to the current ambiguity of 
data types and implementation language to be used.} 


VAR 


RO_NUM : INTEGER; 
START_TIME : REAL; 
Stop_TIME : REAL;. 

LO CHANNEL --'i 1 INTEGER; - 
Hl“CHANNEL : INTEGER; 
v 5pectrum_type : ‘CHAR : 3 ; 

GA I N — RANGE : CHAR_3;“ 
FUNCTION_TYPE_G : CHAR_4; 
CENTRO I D_G : REAL; 

WIDTH_G : REAL; 
INTENSITY_G : REAL; . 
IP_RATE : CHANNELS_R; 

I P__ERROR *. CHANNELS_R; 
IP_START : REAL; 

IP_STOP : REAL; 

LIVE TIME : REAL; 

UPJTIME : REAL; 

CURRJTIME : REAL; 

PC_COUNT : CHANNELS_C; 

PAC COUNT : CHANNELS C; 


{# of readouts per integration period} 
{mission time to begin program run} 
{mission time to stop program run} 

(lower -channel - number of i'nterest) 

(higher channel number of interest) 

( 1 TOT ’ , ‘ PAC ' , ' PC ’ } 

( 'LO' , ’ MED ' , 'HI '} 
i ' EXP' , ' POW' , 'POLY ' } 

(initial guess of CENTROID parameter} 
(initial guess of WIDTH parameter} 
(initial guess of INTENSITY parameter} 
(stores rate for each channel} 

(stores error in calculation per channel) 
(time each integration period starts} 
(time each integration period stops) 
(holds current readout's live time} 

(sum of live times for integ. period} 
(mission time current readout begins) 
(stores PC counts for each channel over 

integration period} 

{stores PAC counts for each channel over 

integration period} 



{BaaaaaaaaaaBBaaaaaBaBaaaaaaaaaBaaaaaB 

PROCEDURE USER INTERFACE GM (VAR (TBD) ); 

t -a — -.,.- ) 

{PROCESS NUMBER - 2.1} 

{DESCRIPTION: This process allows user to change default values, 

or prompts the user for a set of user-selections. 

• These selections will be passed as parameters to 
later routines. } 

BEGIN 

{set default values for appropriate user-selected variables) 
{display menu informing user of his options.} 

{check user selections for validity} 

WHILE {any ur.er selections are invalid} DO 
BEGIN 

{prompt user for re-entry of invalid selections}; 

{check user selections for validity} 

END; 

{store user's options in appropriate parameters } 

END; {procedure USER_SELECTIONS_GM} 

(asaaaBassaBaaasassasaBaaaaaasaaaBasaKSsaasasaaaaaBaaaaaaaaaaaaBa^ 


X 


{ - ) 

PROCEDURE FETCH DATA (VAR CURRJTIME, UPTIME : REAL? 

VAR PC_COUNT,PAC_COUNT : CHANNELS? 

GAIN RANGE : CHAR 3)? 

{ - ) 


{PROCESS NUMBER - 2.2} 

{ DESCRI PTION: Th i s procedure ret r i eves da ta from SPECTRAL DATAJBASE 
(i.e. secondary storage) to make it available for"” 
program use. } 


VAR 

I : INTEGER; 

COUNT : INTEGER; 

BEGIN 

{data other than that accessed below may be added later.) 

{the following code assumes sequential data within each GAIN__RANGE 
of PAC and PC.) 

{the following code also assumes that mission time from GMT and 
live time are present in SPECTRAL DATA_BASE. ) 


•READ (CURRJTIME) ; 

READ (UPTIME) ? 

{move to GAIN_RANGE in spectral data portion of 20.16s 1 readout) 

' \ 

FOR I 0 TO 511 DO 
BEGIN 

READ (COUNT) ? 

PC_COUNT { I J :■ COUNT; 

END; {for loop) 

FOR I :■ 0 TO 511 DO 
BEGIN 

READ (COUNT)? 

PAC_COUNT(I) COUNT? 

END? { for loop) 


END? {procedure FETCH__DATA) 

{»»»•«»»• 


) 


{— — - } 

PROCEDURE SELECT SPECTRUM AND SUM (VAR {TBD} ); 

{ - ■ — - - ) 


(PROCESS NUMBER 2.3} 

(DESCRIPTION: } 

VAR 

I : INTEGER; (loop control variable) 

TOTAL_COUNT : CHANNELS; (total event count for each channel of 

interest over integration period) 


BEGIN 

WHILE CURRJT1ME < IP_STOP DO 
BEGIN 

FETCH_DATA (CURR_TIME, UPTIME, PC_COUNT, PAC_COUNT, GA IN_RANGE) ; 
UP_TIME :» UP_T IME + LI VE_TIME; ~ ~ 

FOR I :« LO_CHANNEL TO HI_CHANNEL DO 

IF SPECTRUM_TYPE - ’TOT’ THEN 

TOTAL__COU NT [ I ) : = TOTAL_COUNT ( I ] ♦ PC_COUNT[I) 

+ PAC_COUNT[I) 

ELSE 

IF SPECTRUM_TYPE ■ 'PAC' THEN 

TOTAL COUNT (I) TCTAL_COUNT ( I ) ♦ PAC COUNT (I) 
ELSE “ “ “* 

"‘•I • \- ■; (* spectrum type is 'PC' *) 

• S totaljcountTi) «■ TOTAL_COUNT(I) ♦ PC_COUNT(I); 

- * . V 

END; {while loop) 

FOR I :■ LO_CHANNEL TO HI_CHANNEL DO 
BEGIN " “ 

I PIRATE l I ] :« TOTAL_COUNT(I) / LIVE_TIME; 

IP__ERROR ( I J SQRT ( IP_RATE (I J ) ; 

END; (Tor loop) 

END; (procedure S_S_A_S) 



{DESCRIPTION : ...} 


BEGIN 

{algorithm TBD) 

{will need to fit results to a given function based on initial 
parameter guesses) 

{if error is within bounds then 

update all guesses 

else 

set error flag) 



BEGIN {main procedure GAIN-MON) 

/****************************************V 


USERJL NTERFACE_GM ; 

{open GAIN_RESOLUTION_HI STORY file) 

(* assumming SPECTRAL_DATA_ BASE ia aequentialf ile, following loop is' 
used to move to desired data *) 

REPEAT 

FETCH DATA (CURR TIKE, UPTIME, PC_COUNT, PAC COUNT,GAIN_RANGE) ; 
UNTIL CURR__TIME >■ STARTJTIME; 

IP START CURR TIME; 

IP~STOP :■ IP_START ♦ (20.16 * RO_NUM) ; 

LI VE_TIME :» 0; 

WHiLE STOP_TIME > IP STOP' DO 
BEGIN* 

SELECT_SPECTRUM AND_SUM ( { TBD } ) ; 

CURVE_FIT ({TBDT)? 

{store results from CURVE^FIT into GA INJRESOLUTION HISTORY 
including appropriate user selected variabTes) 


I P_START I P__STOP; 

I P_STOP IP_START ♦ (20.16 * RO_NUM) ; 
LIVE_TIME 0,*.. 

END^ {while loop) 

{close GAIN_RESOLUTION_HI STORY file) 

END; {main procedure GAIN__MONITOR) 

(** ******* 


s 


a 


