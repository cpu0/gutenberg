AD-i^78^p81 tationpage 


FemAppiwmf 

OFMNo. 


nMe Ig» 1 hour »f BMpo m i, lneiut» < g lh«Hw kn n>4«»i< n B inmidionii. « »ini ngdKa tounm 

«idm . 8<ndoo i mixnl » i m i < >ig»hl» > uidtn Mli i ii a iof»olhf »p«aiet «<% >ol»el i one<lnlaiii i i > i B n.iwdudh^ 

■ugg wi iont *» wouang tt¥» >uirt«n. >o WthlnjlBfi I lM rtq i» t « w 8iv<e». Diina l oi m l»t In Itin i M il ii ii O pi wi iowi ■nd R«po rti . 121SJ>llMionO»<l^* «nif, Sute iao«. Aiii«lon. VA 
aB08-430a.ld<oth«0<lla»olln<qwimio n «nd W i9ulHctY A i liilw.Ollio»olMwiQ wmn l«ndB>«<9«I.W—Winlon.DC 10608. 



Authors: 

Wright-Patterson AFB 


Jd:'I^o::F.TTJrcTo'::T«?rTJTIi’/.>lTo^n 


(S)AN 


Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 




Ml 

ORGANIZATION 


9. SPONSORING/MONITOniNG AGENCY NAME(S) AN 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 


10. SFONSORINGHAONITORING 
AGENCY 



12a DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 

12b. DISTRIBUTION 

13. (Maximum 200 

l/os.j'' lO 


V ^-1. /. 3) 

"7^'^ 0A f ■ SP^ C lo (Unoln'r 

S) lA, O ^ 



DTIC ; 

:y i::::,;':.v..ved 3 


14. SUBJEC 


15. NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp 

• Testing. Ada Val. Office, Ada Val. Facili 


INSECURITY INSECURITY INSECURITY 20.. LIMITATION OF 

CLASSIFICATION c CLASSIFICATION 

UNCLASSIFIED UNCLASSIFIED UNCLASSIFIED UNCLASSIFIED 











AVr Control Nunber: AVP-VSR-580.0294 
Date VSR Conpleted: 28 February 1994 

94-0145-GRS 


Ada OCMPILER 
VALICATZON SJHMARY REPORT: 
Certificate Number: 940223W1.11338 
Green Hills Software, Inc. 

Green Hills Optimizing Ada Ccznpiler, 1.8.7 
SPARCstaticxi 10 unter SunOS, Release 4.1.3 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wri^t-Patterson AFB OH 45433-5707 


Occasion f or 

NTIS CRAftf 
OTIC TAB 

Unennounced 

Justification 



By_ 

Distribution / 


Availability Codes 


Olsl 

1 

Avail and/or 

Soectai 





94-10995 

■niHiii 


DTIC QUALITY CISPECTED 3 

94 4 11 11 








Otrtlficftt* Infonation 


The following Ada iaplenentation was tested and detendned to pass ACVC 1.11. 
Testing was coepleted on 23 rebcuaty 1994. 

Conpiler Hue and Version: Green Hills Optimizing Ada Campiler, 1.8.7 

Host Computer System: SPARCstation 10 

under SunOS, Release 4.1.3 

Target Computer Systan: Same as host 

Customer Agreement Nusober: 94-01-05-GHS 


See section 3.1 for any additional information about the testing envircxunent. 

As a result of this validation effort, validation Certificate 940223W1.11338 
is awarded to Green Hills Software, Inc. This certificate expires two years 
after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


Ada Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Fatterson AFB OH 45433-5707 




Ada Va! 
Director 
Institute 
Alexandria VA 


Orgmizatim 

ter and Software Engineering Division 
for Defense Analyses 
22311 



Joint Program Office 
David R. Basel 
Deputy Director 

Defense Information Systems Agency, 
Center for Information Management 













DECLARATION OF CONFORMANCE 


Customer: Green Hills Software, Inc. 

Ada Validation Facility: Hq 645 C-CSG/SCSL 

Standard Languages Section 
Systems Technology Branch 
Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Compiler Name and Version: Green Hills Optimizing Ada compiler 

Version 1.8.7 

Host Computer System: Sun Sparc Station 10 running SunOS 4.1.3 
Target Computer System: Same as host 

Customer's Declaration 

I, the undersigned, representing Green Hills Software, Inc., declare 
that Green Hills Software, Inc., has no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A in the 
implementation listed in this declaration. I declare that Green Hills 
Software, Inc. is the OWNER of the above implementation and the 
certificates shall be awarded in the name of the OWNER'S corporate name. 



5^iel O'Dowd, President 
Green Hills Software, Inc. 
510 Castillo Street 
Santa Barbara CA 93101 


Date: Feb. 23, 1993 






VkBLB or OONXBRS 
CBMPRR 1 nmCDUCnCN 


1.1 USB or THIS VMJOATZON SWABY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 INPLENEMTATION DEPENDDICIES 

2.1 WITHDRANN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST NQOIFICATIGNS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRQN1ENT.3-1 

3.2 SUMMARY OP TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM CmONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















C HAP TER 1 
INIRQOUCTXGN 


The Ada iepleaentation described above was tested according to thehda 
. validation Procedures (Pro92] against the Ada Standard [Ada83) using the 
current Ada Ccnpiler validation Caf)ability (ACVC). This V^idation Sunnary 
Report (VSR) gives an account of the testing of this Ada ioplenentation. For 
any tedmlcal terns used in this report, the reader is referred to (Pro92]. 
A detailed description of the ACVC nay be found in the current ACVC User's 
Guide tUGQdl* 


1.1 USE OP THIS VAUDATIGN SUNNARY REPORT 

Consistent %fith the national laws of the originating country, the Ada 
Certification Body nay nake full and free public ^sclosure of this report. 
In the united States, this is provided in accordance with the "Preedon of 
Infomation Act” (5 U.S.C. #552). The results of this validation apply only 
to the conputers, operating systass, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconfomities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF ^diich performed this 
validation or from: 

National Tedmlcal Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

tJe Validation Organizati<m 

Computer and Software Engineering Division 

institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






1.2 REFBRDICES 


[Ada831 Reference Manual for the Ada Prograeninq Language, 

and I§6 BeS2=n87. 

(Pro92] Ada COnpily validati^ Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

(UG89] Ada Compiler validation Capability User*s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Ckxnpliance of Ada ia|)lemMfitations is tested by means of the ACVC. itw ACVC 
contains a collection of test progr«»s structured into six test classes: A, 
B, C, 0, E, and L. The first letter of a test name identifies the class to 
Wdch it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at coapile time and link time, 
respectively. 

Hie executable tests are written in a self'-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicatin g ^ resul t idie n they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHBCK^FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECKjnUE is \»ed to check the contents of text 
files written by soom of the *~Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is cdiecked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code %diich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests dwck that an Ada implonentatim correctly detects violaticm of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this imploientation is provided in J^jpendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove \jnforeseen conflicts between the tests and 
inplementati(xi-dtependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 








nfiROoucnoN 


For eadi Ada inplenentation, a customized test suite is produced by the AVP. 
This customizaticm consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITIGN OF TENIS 

Ada Coaif)iler The software and at^ needed hardware that have to be added to 
a given host v)d target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Coof)iler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validaticxi summary 

(ACVC) report. 

Ada An Ada conpiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certificaticm system. 

Office (AJPO) 

Ada The part of the certification body vhich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional \mit, consisting of one or more computers and 

System associated software, that uses common storage for all Or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, inclixiing arithmetic operations and logic 
operaticms; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 




nflMDUCTIGN 


Conforaity Fulfillnent by a product, process, or service of all 
requiresants ^lecified. 

Custcner An individual or corporate entity who enters into an agreenent 

with an AVF idiich specifies the terns and conditions for Avr 
services (of any kind) to be perfomed. 

Declaration of A formal statement from a customer assuring that conformity 
Ccmformance is realized or attainable on the Ada implementation for v^ich 
validation status is realized. 

Host Computer A computer system %dtere Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test c^jectives found to be 
test irrelevant for the given Ada inplementati(xi. 

ISO Intematicxud. Organization for Standardizaticm. 

LBH Ihe Ada standard, or Language Reference Manual, published as 

AMSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citaticxis from the 
LRN teJce the form ''<secticm>.<subsection>:<paragraph>.'* 

Operating Software that controls tiw execution of programs and that 
^stem provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, (grating 
systems are predominantly software, but partial or complete 
hardware inplementations are possible. 

Target A computer system vdiere the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implonentation either by AVF testing or by registration [Pro92]. 

Validation The process of checking the cmformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this inplementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 






CBhSm 2 


IMPLEMENIMnCN DEPQIDSCIES 


'2'.1 WIIBDRANN TESTS 

The following teste have been withdrawn by the AVO. The rationale for 
withdrawing eadi test is available frca either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 Noveober 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C3550eM 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C4565U 

C46022A 

B49008A 

B49008B 

AS4B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022O 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

a)7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

a)7204B 

AD7206A 

BD8002A 

BO8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vrtiich are irrelevant 
for a given Ada inplenentaticm. Reascais for a test's inapplicability nay be 
support^ IV docuMnts issued by the ISO and the AJPO known as Ada 
Conmentaries and connonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasois indicated; references to Ada Coonentaries are included as 
apprcpriate. 


2-1 



Iht following 201 tests have floating-point tn>« declarations requiring 
aore digits than SY8IBl.MhXJ>IGITS: 

C24113L..Y (14 tests) C35705L..y (14 tests) 

C35706L..y (14 tests) C35707L..y (14 tests) 

C3S70eL..y (14 tests) C3Sa02L..Z (15 tesU) 

C4524lL..y (14 tests) C4532lL..y (14 tests) 

C4542lL..y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C4564lL..y (14 tests) C46012L..Z (15 tests) 

C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT^FLQKT; for this iaplesentation, there is no sudi type. 

C35713D and B86001Z dieck for a predefined floating-point type with a 
name other than FLOAT, LGMG__FLCAT, or SBGRT_FLCAT; for this 
inpleaentation, there is no sudi type. 

C45423A, C45523A, and C45622A dwck that the proper exception is raised 

if MhCHINEjOVEilFLaNS is IBUE and the results of various floating-point 
operations ~ lie outside the range of the base type; for this 
inplenentation, MAC!m4E_CVERFLC}NS is FALSE. 

C45531I1. .P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SySTEM.HAX_MANnsSA of 47 or greater; for this 
iaplenentation, HMCJONTISSA is less than 47. 

B8600iy uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009F checks tdiether a generic non-library subprogram can be 
Instantiated before the separate compilation of its body (and any of its 
subunits); this implementation requires that the bod^ and subunits of a 
generic non-library subprogram te in the same compilation as the 
specification if ii»tantiations precede them. (See section 2.3.) 

IA3004B, EA3004D, and CA3004F check pragma INLINE for functims; this 

implementation does not svqpport pragma INLINE for functims. 

0)10090 checks ^diether a length claxise can specify a non-default size 
for a floating-point type; this isplmentation does not svqpport such 
sizes. 

CD2AB4A, a>2A84E, CD2A84I..J (2 tests), and CD2AB40 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

AE2101C and EE2201O..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 


2-2 



INPLEMENThTIGM IXPENDENCIES 


AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with unconstrain^ array types and record types with discriminants 
without defaults; these instantiatic»is are rejected by this compiler. 

The tests listed in the following table check that USE^ERFCR is raised 
if the given file operations are not supported for the given combination 
of mo^ and access method; this implementation supports these 
operaticMns. 


Test 

File Operation Node 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OOT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INQUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESEn* 

INOUT"FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FI!£ 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

C:E3102K 

OPEN 

OUT FILE 

text"10. 


The following 16 tests check operatims on sequential, direct, and text 
files vAien multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERROR is raised when this 
association is attenpted. 

CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 


2-3 




% 


XMRJSHBfEMnGN DBPIM3BICIES 


CE3304A check* that SETJLIME LD40IH and SET PAGB_LENS1H raise USE ERROR 
if they specify an inappropriate value for Ihe external file; there are 
no inappropriate values for this inplenentaticxi. 

CE3413B dwcks that PAGE raises 1AYCXJT_ERR0R \A)»n the valxie of the page 
nunber exceeds CXXJNT'LAST; for this iioplementation, the value of 
CXJUNT'IAST is greater than 150000, making the checking of this c^jectlve 
iB(>ractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) vtere required for 6 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

CA2009F was graded Inapplicable by Evaluation Modification as directed by the 
AVO. This test contains instantiations of generic non-library subprograms 
prior to the compilation of their bodies; as allowed by AI-00408 and 
AI-00506, the compilation of the generic subprogram bodies (subunits) makes 
the coepilation unit that contains the instantiations obsolete. 

BC3204C and BC320SD were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic actual parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, the 
generic bodies are compiled after the units that contain the instantiaticxis, 
and this implementation creates a dependence of the instan- tiating units on 
the generic units as allowed by AI-00408 and AI-00506 such tliat the 
compilation of the generic bodies makes the instantiating units dssolete—no 
errors are detected. The processing of these tests was modified by 
re-compiling the obsolete \inits; all intended errors were then detected ky 
the CQopiler. 


2-4 







CHAPTER 3 


PROCESSING ZNPQRKATIGN 


3.1 TESTING EMVIROMENT 

The Ada inplenentation tested in this validation effort is described 
adequately by the infomation given in the initial pages of this report. 

For technical and sales infomaticn about this Ada inplementation, contact: 

David Chandler 

Green Hills Software, Inc. 

510 Castillo St. 

Santa Barbara, CA 93101 
(805) 965-6044 


Testing of this Ada inplosentation was conducted at the custosier's site by a 
validation team from the AVF. 


3.2 SUMHART OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is iqpplicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC (Pro92]. 

For all processed tests (inapplicable and applicable), a result was dstained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the mater of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn Isecause of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the sv^iport of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 









ft) Totftl Nuabftr of Iteplicablft TMts 3790 

b) Totftl (ftater of lUthdraMn Tests 104 

c) Processed Inepplicsble Tests 75 

d) Mon-Processed z/0 Tests 0 

e) Mon-Processed Floating-Point 

Precision Tests 201 

f) Total Mater of In^iplicable Tests 276 (C4d4e) 


g) Total Mater of Tests for ACVC 1.11 4170 (attef) 


3.3 TEST EXBCOTZGN 

A aagnetic tape containing the custoaised test suite (see section 1.3) %#es 
talcen on-site fay the validation teaa for processing. The contents of the 
aagnetic tape eere loaded directly onto the host conputer. 

After the test files %fere loaded onto the host coaputer, the full set of 
tests eas processed by the Ada iopleaentation. 

The tests %«ere coapiled, linked and executed on the host conputer system. 
The results were ciq[>tured on the host conputer system. 

Testing was perforaed tising connand scripts provided by the custoner and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing qptions for this iaplnnentation. It also indicates the 
default options. Mo eiqplicit onions were used for testing this 
iapleaentation. 


Test ou^t, conpiler and linker listings, and job logs were ci^tured on 
aagnetic t^» and ardiived at the AVF. The listings examined on-site fay the 
validation teaa were also archived. 


3-2 








APPENDIX A 
MACRO PAMMETEBS 


This appendix contains the aacro paraaeters used for custoedsing the ACVC. 

• Ttw aeaning and purpose of these paraaeters are explained in {UG89]. Itw 
paraaeter valties are presented in two tables. The first table lists the 
values that are defined in terms of the aaxiaiai ii^t-line length, which is 
the value for $MAX_IN LEM—also listed here. These values are expressed here 
as Ada string aggregates, %d)ere "V" represents the maximum input-line length. 

Macro Parameter Macro value 


$MAX_IN__LEM 200 — Value of V 

$BIG_ID1 (1..V-1 -> 'A», V-> '1') 

$BIG_ID2 (1..V-1 -> 'A», V -> »2») 

$BIG_ID3 (1..V/2 -> 'A') & "3' & 

(1..V-1-V/2 -> 'A') 

$BIG ID4 (1..V/2 -> »A») & '4' & 

(1..V-1-V/2 -> »A') 


$BIG_INT_LIT 

(1. 

.v-3 -> 'on & 

"298" 

$BIG_REAL_LIT 

(1. 

.V-5 -> '0') 6 

"690.0" 

$BIG_STRINS1 


& (1..V/2 -> 

'A') & 

$BIG_STltING2 


& (1..V-1-V/2 

-> 'A') & '1' & 

$BLANKS 

(1. 

.V-20 ) 



$MAX LQ< INT BASED LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 


$MAX LEM REAL BASED LITERAL 

- - - - 5 (1..V-7 -> '0') & "F.E;" 







mao isMUMEins 


$HWJHRIIIGJJTEI»L »•» ft {1..V-2 -> 'AM ft 


The follotring table lists all of the other macro parameters and their 
respective values. 


Macro Parsmieter 

Macro Value 

$ACCSIZE 

32 

$ALI(ailENT 

4 

$OCXJNT_LAST 

2_147_483_646 

$DEFAULTJIEN_SIZE 

1024 

$DEFAULT_STQRJJNIT 

8 

$OEFAULT_SYS_NAME 

SERVER 

$DELTA_OOC 

2.0**(-31) 

$ENTRy_ADORESS 

16101 

$ENIRY_AD0BESS1 

16#1| 

$EMTHy_AZ]0RESS2 

16#2# 

$FIELD_LAST 

2__147__483_647 

$FILEjrERHINATOR 

» r 

$FIXED_NAME 

Nq_SUCH_FIXEDjrTPE 

$FLOAT_NAHE 

NC|_SUCH_FLOAT_TOTE 

$FORM_STHINS 

MU 

$FQRM_STRINS2 

"CAmOT RESTRICT FILE CAPACITY' 

$GREATER THAN DURATION 

90_000.0 


$GREATER THAN DUBATIGN BASE LAST 

To_ooTy_ooo.o 


$GREATER THAN FLOAT BASE LAST 
” “ “ 3.5B+38 

$GBEATER THAN FLOAT SAFE LARGE 
“ ~ “ 3.7E38 


A-2 





MACRO PARAMETERS 


$GREASER TRAN SHORT FLOAT SAFE LARGE 

- 1.01308 “ 

$HIGH_FRIORITT 20 

$ILLBGAL EXTERNAL FILE NAMEl 

;tolRBC10RY/FILn«MEl 

$ILLEGAL EXTERNAL FILE NAME2 

;tolRBCTORy/FILnOtf!E2 

OINAPPROPRIATB LINE LB40TH 

“ -1 


$INAPPROPRIATB PAGE LENGTH 

“ -1 

$1NCLUDE_PRAGNA1 

PRAGMA INCLUDE 

$INCUX»:_PRAGMA2 

RRAGMA INCLUM: 

$IIITBGER_FIRST 

-2147483648 

$INTB6ER_LAST 

2147483647 

$INTBGER__LAST_PLUS_1 

2_147_483_648 

$INTERFACEJANQUAGE 

C 

$LESS_THANJDURATIGN 

-90_000.0 

$LESS THAN OURATICK BASE FIRST 

“ - ~ -lU 000 000.0 


(••A28006D1.ADA”) 

("B28006F1.ADA”) 


$LINEjrEBNINATQR ASCII. LF 

$LON_PRIORITY 1 

$MACHINEJCXXXE_STATEHENT 

asaMinst -> ""nqp""); 


$NACHINE_OOI3EjryPE 

$NANnSSAJXX: 

$NAX_OIGITS 

$NAX_IMT 

$MAX_INr_PLUS_l 

$MIN_Dir 

$NAME 


INSTRUCnCM 

31 

15 

2147483647 

2__147_483_648 

-2147483648 

BYTE^INTECSR 

A-3 






moo BMtMtEICRS 


$NMIE_UST 

$NAME_SPECIFlCAnONl 

$NIVHE_SPECIPICATiai2 

$NM1B_SPBCZFICATIGN3 

$MBGJBASED_INr 

$NEM_HEM_SIZE 

$NEW_ST0RJUN1T 

$NEH_SYSJAME 

$PJVXjrERNIMIVIC» 

$BEOOfa]lJ[«FINITZa4 

$RECX»D_NISNE 

$TASK_SIZE 

$T{^K_STC»AGE_SIZE 

STICK 

$VARIABLEJVIX»ESS 
$VARIABLE_AIX)RESS1 
$VARIABLEJVDDRESS2 
SYOUR PRAGMA 


SERVER 

/safe/l. 8.7/adasparc/acvcAal/X212QA 
/sa£e/l. 6.7/adasparc/acvcAal/X2120B 
/sa£e/l. 8.7/adasparc/acvcAal/X3119A 
ISiFFFFFFFE# 

1024 

8 

SERVER 

ASCII.LF & ASCII.FF 
NEW nfTBC^ 

INSTRDCnCN 

32 

2048 

0.01001 

FCNDECL.VAR_ADDRESS 
FCNI^CL.VAR_AIX}RESS1 
FCNIXCL.VAR AIX)RESS2 


NO SUCH PRAGNA 




APPfiOIX B 


OQKPIIAnCN SYSTDl OPTIGNS 


Th« coopller options of this Ada ioplesmtation, as described in this 
Appendix, are provided by the custoBMr. Unless specifically noted otherwise, 
references in this appendix are to conpiler documentation and not to this 
report. 

-D use double precision for Ada type float. 

-fC Coepile only if necessary. 

-fE Generate error log file. 

-fL Generate exception location information. 

-fN Suppress numeric diecking. 

-fO Prevent harmless changes to low level units from 
forcing recompilation. 

-fs Suppress all checks. 

>fU Inhibit library update. 

-fv Compile verbosely. 

-fw Suppress warning messages. 

-g Generate debug information. 

-G Generate debug information for MULTI. 

-help Display help. 

-1 Generate listing file. 

-L Use alternate library. 

-N Do a dry run of the compilation. 

-OlAIHS Perform Optimizations. 

-P Print operations. 

-p Generate profiling information. 

-S Produce assembly code. 

-Xhnn Turn on the -xnnn option >dwre nnn is a three digit integer. 

-Znnn Turn off the -xnnn qption \dwre nnn is a three digit integer. 


CCKPILATION SYSTEM OPTIGNS 


LINKER OPTIGNS 

The linker options of this Ada inplenentation, as described in this Appendix, 
are provicM by the custoa«r. Unless specifically noted otherwise, 
references in this appendix are to linker documentatim and not to this 
report. 

-f Suppress main program generaticm step. 

-L Use alternate library. 

<-m Produce a primitive load map. 

-n Suppress the linking of the object files, but do generate the 
main program. 

^ Do a dry run of the compilaticxi. 

-o Use alternate executable file output name. 

-p Enable profiling. 

-P Print operations. 

-Q Link in an extra object file. 

~r Create re-linkable output. 

-V Link verbosely. 

-w Suppress warnings. 


B-2 





APPE90IX C 

APPENDIX F OF THE Ada STANDNRD 


Tha only allowad iaplaatntation dapandanciat corraspond to 
iaplanantation-dapandant pra^wa, to cartain aadiina-dapandant conventions as 
■antionad in Chapter 13 of the Ada Standard, and to cartain allo»#ed 
restrictions <n representation clauses. The ijoplementation-dependent 
characteristics of this Ada inplosentation, as described in this ^pendix, 
are provided by the custosier. unless specifically noted otherwise, 
references in this Appendix are to coopiler documentation and not to this 
report. Inplenentation-specific portions of the package STANDARD, tdiich are 
not a part of Appendix F, are: 


package STANDARD is 


type INTEGEK is range -2147483648 .. 2147483647; 
type SHCXtT INTEGE R is range -32768 .. 32767; 
type BYTB_l&nEGER is range -128 .. 127; 
type LGNG_INTEGER is range -2147483648 .. 2147483647; 

type FLGAT is digits 6 range -3.40282346638529E4-38 .. 3.4028234663e529E«-38; 
type LCNG FLOAT is digits 15 range -1.79769313486231B4'308 

.. 1.79769313486231B+308 ; 

type OURATIGN is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-1 





J^ipHndix F laplMwntationr-O^wndant Characteristics 


This appendix lists isfplawntation-depMxiMit characteristics 
of Green Hills Ada. Note that there are no preceding aqppendices. 

This Appendix is called Appendix F in order to ccnply %#ith the 
Reference Manual for the Ai^ Prograsedng Language* (LRM) 
ANSI/WZr-STD-lSlSA whi^ States that this appendix be naned 
^ipmdix F. 

Inplenented Chapter 13 features incltxle length clauses, enumeration 
representation clauses, record representation clauses, address clauses, 
interrupts, package system, nadiine code insertions, pragaa 
interface, and vnchecked prograsodng. 

F.l Pragmas 


The implemented pre-defined prapsas are: 


elaborate 

interface 

list 

pack 

page 

priority 

suppress 

inline 


See the LRM section 10.5. 

See section F.1.1. 

See the LRM Appendix B. 

See section F.l.2. 

See the LRM Appendix B. 

See the LRM ^pendix B. 

See section F.l.3. 

See the IRM section 6.3.2. 


The remaining pre-defined pragmas are accepted, but presently ignored: 


controlled 

qptimize 

systoB name 

sharedT 

storagejunit 

memory_size 


Named parameter notation for pragmas is ix>t supported. 


When illegal parameter forms are encountered at compile time, the compiler 
issues a ^ming message rather than an error, as required by the Ada 
language definiticm. Refer to the ARM Appendix B for additional 
information about the pre-defined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface in Green Hills Ada is: 

pragma interface (language, subprogrogram [, "link-name"] ); 


C-2 



APPENDIX F OF TOE Ada SXANDNfO) 


vAwre: 

language This is the interface olanguage, one of the names assembly, 
builtin, c or internal. The names builtin and internal 
are reserved for use by Green Hills compiler maintainers 
in run-time suqpporc packages. 

sxibprogram This is the name of a subprogram to vhich the pragma 

interface applies. If link-name is omitted, then the Ada 
subprogram name is also used as the object code syadsol 
name. Depending on the language speci^ed, some 
automatic modifications may be made to the object cotte 
symbol name. 

link-name This is an optional string literal specifying the name 
of the non-Ada subprogram corresponding to the Ada 
subprogram named in the second parameter. If link-name 
is omitted, then link-name defaults to the value of ' 

subprogram translated to lowercase. Depending on the 
language specified, some automatic modifications may 
be made to the link-name to produce the actual (^ject 
code symbol name that is generated whenever references 
are ma^ to the correspcsiding Ada subprogram. 

It is appropriate to use the optimal link-name parameter 
to pragma interface only when the interface subprogram 
has a name that does not correspond at all to its Ada 
identifier or y/tmn the interface subprogram name cannot 
be given \ising rules for cmstructing Ai^ identifiers 
(e.g. if the name contains a character). 

The characteristics of object code symbols generated for each interface 

language are: 

assembly The object code symbol is the same as link-name. If no 
link-name string is specified, then the subprogram name 
is translated to lowercase. 

builtin The object code symbol is the same as link-name, but 

prefixed with the string, "jbss^^". 

This language interface is reserved for special 
interfaces ^fined by Green Hills Software, Inc. The 
builtin interface is presently used to declare certain 
low-level run-time operations whose names must not 
conflict with programmer-defined or language system 
defined names. 

c The object code synbol is the same as link-name, but with 

one underscore character () prepended. This is the 
convention used by the C conpiler. If no link-name string 
is specified, then the suli^rogram name is translated to 
lowercase. 


C-3 




APPIMDIX P or THE Ada STEWARD 




intarnal No object code syabol is generated for an internal language 
interface; thia language interface is reserved for special 
interfaces defined by Green Rills Software, Inc. The 
internal interface is presently \ised to declare certain 
aachine-level bit operations. 

No autonatic data ccoiversions are performed on parameters of any interface 
subprograms. It is \ip to the prograaemr to ensure that calling conventions 
match and that any necessary data conversions take place vdien calling 
interface subprograms. 

A pragma interface may appear within the same declarative part as the 
subprogram to %diich the pragsa interface applies, following the subprogram 
declaration, and prior to the first use of the subprogram. A pragma 
interface that applies to a subprogram declared in a package specificaticxi 
must occur within the package body in this case. A pragma interface 
declaration may appear in the private part of a package specification. 
Pragma interface for library t^ts is not stqpported. 

Refer to the LRH sectim 13.9 for additional information about pragma 
interface. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to 
which it applies, provided that the pragma occurs within the same 
declarative part as the composite type ^claration, before any (Ejects 
or components of the composite type are declared. 

Note that the declarative part restrictim means that the type declaration 
and accompanying pragma pack cannot be split across a package specification 
and body. 

The effect of pragma pack is to minimize storage consumption by discrete 
comptxient types whose ranges permit packing. Use of pragma pack does not 
affect the representations of real types, pre-defined integer types, and 
access types. 

F.1.3 Pragma Suppress 

Pragma suppress is inplemented as described int eh LBN section 11.7, with 
these differences: 

* Presently, divisi(m_check and overflow_check must be suppressed 
via a compiler flag, -fN; pragma suppress is ignored for these 
two numeric checks. 

* The cpticMial "ON ->" parameter name notation for pragma suppress 

is ignored. 

* The optimal second parameter to pragma suppress is ignored; the 


C-4 



APPE30IX F OP THE Ada STAIDARD 


pragna al%«ays applies to the entire scc^ in %iihich it appears. 
F.1.4 Pragma Inline 

Pragna inline is supported for procedures but not for functions. 

F.2 Attributes 

All attributes described in the LBM ^jpendix A are sv^iported. 

F.3 Standard Types 

Additicxial standard types are defined in Green Hills Ada: 

* byte_lnteger 

* short_integer 

* long_integer 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 

type short_integer is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 .. 2147483647; 

type float is digits 6 

range -3.40282E+38 .. 3.40282Ef38; 

type long float is digits 15 

range -I.79769313486231&t-308 .. 1.79769313486231E+308; 

type duration is delta 0.0001 range -86400.0000 .. 86400.0000; 

F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (server); 

system_name : ccmstant name :• server; 

type target_8ystems is ( 

Unix, 

netos, 

vms, 


C-5 



type tar 9 et_aachine 8 ie ( 
vex, 

Z8001, 

>6002, 

sSOOOO, 

■68000, 

■68020, 

■68030, 

■68000, 

18086, 

180286, 

180386, 

180466, 

1660, 

R2000, 

R3000, 

BS6000, 

HPPA, 

•pare ); 

target^system : constant target systems :• unlx; 

target~aadilne : constant tar^Tjnachlnes :>■ spare; 

storagejUBilt t constant :> 8; 

nemory_8lze : constant :• 1024; 

— System-Dependent Named Numbers 


nln_lnt 
max_lnt 
■axjdlglts 
max mantissa 
fine delta 
tick “ 


: constant :« -2147483648; 

: constant :■ 2147483647; 

: constant 15; 

: constant :*• 31; 

: constant :■ 2.0 ** (-31); 
: constant :• 0.01001; 


— Other System-Dependent Declarations 
subtype priority Is Integer range 1 .. 20; 

The value of system.mnnoryjilze Is presently meaningless. 
r.5 Restrictions on Representatlcm Clatises 

Green Hills Ada suqpports representation clauses inclixSing length clauses, 
enumeration representation clauses, record representation clauses and 
address clauses. 


F.5.1 Length Clauses 









APra«>IX F (»* TBE Ada STANDARD 


A size specification!t'size) is rejected if fewer bits are specified 
than can accoonodate the type. Die adnioum size of a ccaposite type 
may be subject to application of pragmapack. It is permitted to specify 
precise sizes for unsigned integer ran^s, e.g. 8 for the range 0..255. 
However, because of requirements ia^s^ by the Ada language definition, 
a full 32-bit range of unsigned values, i.e. 0..(2**32)-l, cannot be 
defined, even using a size specification. 

The specification of collectioi size (t'storage_size) is evaluated at 
run-time vdien the scope of the type to which the length clause applies 
is entered, and is therefore subject to rejection (via storage_error) 
based on available storage at the time the allocation is made, 
collection mayinc?.ude storage used for run-time administration of the 
collection, and therefore should not be expected to accommodate a 
specific nunter of objects. Furthermore, certain classes of dsjects 
such as unccxistrained discriminant array components of records may be 
allocated outside a given collection, so a collection may accommodate 
iSore objects than mi^t be expected. 

The specification of storage for a task activation (t'storage_size) is 
evaluating at run-time vdien a task to vdiich the length clause applies 
is activated, and is therefore subject to rejection (via storagejerror) 
based on available storage at the time the allocation is made. Storage 
reserved for a task activation is separate from storage needed for any 
collections defined within a task bo^. 

The specification of small for a fixed point type!t'small) is subject 
only to restrictions defined in the LRM section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an 
enumeration representation clause must be in the range of standard.integer. 

The value of an internal code may be obtained by applying an appropriate 
instantiation of unchecked_conversion to an integer type. 

F.5.3 Record Representation Clauses 

Ttw storage unit offset (the at static_siiq>le_expression part) is given 
in terms of 8-bit storage units and must be even. 

A bit position (the range part) applied to a discrete type co^xanent may 
be in the range 0..15, with 0 being the least significant bit of a 
component. A range specification may not specify a size smaller than can 
accommodate the con^nent. A range specification for a component not 
accommodating bit packing may have a higher upper bound as appropriate 
(e.g. 0..321 for a discriminant string ccmnponent). Refer to the internal 
^ta representation of a given component in determining the ccmponent 
size and assigning offsets. 

Coiqponents of discrete types for vAtich bit positions are specified may 
not stradle 16-bit word boundaries. 


C-7 







V 


AprwDix r oriBB Ad« simbard 


The value of an alignaant clause (the optional at mod part) mist evaluate 
to 1»2,4, or 8 and nay not be smaller than the hi^iest alijn—nt required 
by any coofxxMnt of the record. 

F.5.4 Address Clauses 

An address clause aay be supplied for an object (whether constant or variable) 
or a tas)i entry, but not for a subprogram, paclcage, or tas)( unit. The 
meaning of an address clause si^plied for a tas)c entry is given in section 
P.5.5. 

An address expression for an object is a 32-bit linear segmented memory 
address of type system.address. 

F.5.5 Interrupts 

A tas)( entry's address clause can be used to associate the entry with a UNIX 
signal, values in th«* range 0..31 are meaningful, and represent the signals 
corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for dianges of representation effected means 
of type ccxiversion. 

F.6 Implwaentaticxi-Dependent Components 

No names are generated l:]y the implementation to denote implementaticxi- 
dependent cooponents. 

F.7 Machine Code Insertions 

Machine code insertions, described in the LRM section 13.8, are supported in 
Green Hills Ada. 

F.8 unchedced Programming 

The Green Hills Ada compiler sipports the unchecked programming generic 
library subprograms undtecked deallocation and \mchecked_conversion. 

There are no restrictions on Bie use of xmcheckedjconversion. Conversions 
between dejects ^diose sizes do not conform may result in storage areas 
with undefined values. 

F.9 Iiput-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

* In calls to open and create, the form parameter must be the 
empty string (the default value). 

* More than (xie internal file can be associated with a single 

C-8 








APPENDIX P OF THE Ada STANDARD 


•xtemal file for reading only. For vrriting, only one internal 
file aay be associated trith an external file; Do not use 
reset to get around this rule. 

* Teaporary sequential and idirect files are given naaes. 

T ea porary files are deleted %d)en they are closed. 

* File I/O is buffered; text files associated with terainal devices 
are line-buffered. 

* The packages sequential_io and direct_io cannot be instantiated 
with unconstrained ccaposite types or record types with 
discrlalnants without defa\d.ts. 

F.IO Separate Coapilation with Generics 

A generic non-library subprogram body cannot be coapiled as a subunit in 
separate file from its specification %dMn instantiations precede the 
subprogram body. Also, a generic library package bod^ cannot be coapiled in 
separate file from its specification %dMn instantiations precede the 
package body. A generic non-library package body can be coapiled as a 
subunit in a separate file from its specification whether or not 
instantiations precede the package bo^. 


«•* 







