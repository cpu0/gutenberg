NASA Contractor Report No. 185114 


Film Annotation System 
For A Space Experiment 


MILETUS ASSOCIATES, INC. 
Albuquerque, New Mexico 


July 1989 


Prepared for 

National Aeronautics and Space Administration 
Lewis Research Center 
Contract NAS 3-25055 


(HASA-CR-185114) FILM ANNOTATION SYSTEM FOE 
A SPACE EXPERIMENT (Miletus Associates) 

124 p CSCL 14E 


G3/35 


N89-27152 

Onclas 

0224572 


Table of Contents 


Page No . 


1. ) Summary 1-1 

2. ) Introduction 2-1 

3. ) Camera Modifications 3-1 

4. ) PAS Hardware Description 4-1 

4.0 General 4-1 

4.1 Microprocessor Support Circuitry 4-1 

4.2 Real Time Clock 4-1 

4.3 Camera Interface Circuitry 4-2 

4.4 STD BUSS Interface 4-2 

4.4.1 FAS Status Code to STD 4-3 

4.4.2 FAS Interval Warning to STD 4-4 

4.4.3 FAS Photo Confirmation Bit to STD 4-5 

4.4.4 Data and Ready Ports 4-5 

4.5 Communication Protocol 4-5 

5. ) FAS Software Description 5-1 

5.0 General 5-1 

5.1 FAS CPU Camera Trigger Enable/Disable 5-1 

5.2 STD CPU Camera Trigger Command 5-1 

5 . 3 FAS CPU Reset Command 5-2 

5.4 Read Hardware Frame Counter 5-2 

5.5 Reset Hardware Frame Counter 5-2 

5.6 Set FAS Annotation Mode 5-2 

5.7 Send Last Photo "X" Switch Data to 

STD BUSS CPU 5-3 

5.8 Receive Text From STD BUSS CPU 5-3 

5 . 9 Set GMT Time 5-3 

5.10 "Go" Command To Start Clock 5-4 

5.11 Set Intervalometer Parameters 5-4 

5.12 "Go" Command to Start Photo Sequence 5-4 

5.13 FAS Status Code to STD 5-4 

5.14 Cancel Current Photo Sequence 5-5 

5.15 Interval Pre-Warning Flag 5-5 

5.16 Photo Confirmation to STD 5-5 

5.17 Photo Count This Sequence 5-6 

5.18 Perform FAS Communication Port Test 5-6 

5.19 Request FAS Hardware Self Test 5-6 

5.20 Report Annotation Mode to STD 5-6 

5.21 Report Time Left to Next Scheduled Photo 5-7 

5.22 Set Software Frame Counter 5-7 


PRECEDING PAGE BLANK NOT FILMED 


1 1 _ _J WftNII0HMlX BUM 


Table of Contents, cont'd. 

Page No . 

Appendix A. Test Procedure A-l 

Table of Contents A-2 

Appendix B. PASCAL Program Listing B-l 

Table of Contents B-2 

STD PASCAL Procedures B-3 

STD PASCAL TEST Program B-45 

Appendix C. Figures C-l 

Table of Contents C-2 

Figure 1. FAS Card Block Diagram C-3 

Figure 2. FAS Camera Interface Diagram C-4 

Figure 3. STD to FAS Communication Diagram .. C-5 

Figure 4. FAS to STD Communication Diagram .. C-6 

Figure 5. Component Side of P.C. Board C-7 

Figure 6. Solder Side of P.C. Board C-7 

Figure 7. Test Set Up C-8 

Figure 8. Nikon F3 Camera (Front View) C-8 

Figure 9. Nikon F3 Front Cable Attachment ... C-9 

Figure 10. Nikon F3 Rear Cable Attachment .... C-9 

Figure 11. Nikon F3 Data Mask C-10 

Figure 12. RHA C-10 

Appendix D. Drawings D-l 

Cable Drawing, #3895 

Schematic Drawing FAS Card, #3964 

Assembly Drawing FAS Card, #3964 

Appendix E. Acronym Definitions E-l 


Section 1 
Summary 


The following document has been prepared to provide the user 
with operating instructions for the Isothermal Dendritic Growth 
Experiment (IDGE) Film Annotation System (FAS). This annotation 
system is a microprocessor interface to a modified 35mm Nikon 
camera . 

This microprocessor system has been manufactured on a single 
STD BUSS interface card. The interface card has been designed in 
such a way as to allow it to be used in either a stand alone 
application with minimum features or installed in an STD computer 
with maximum features available. 

If the FAS card is installed in an STD computer system it 
has the ability to take commands from and communicate status 
information to the STD computer. If the FAS card is set up in a 
stand alone configuration, it will print time (starting from 
zero), day (0-9), camera ID (0-3), and frame count (0-255). 

The Nikon camera has been modified to print a single row of 
up to 28 5x7 dot matrix characters across the bottom of the 35mm 
frame. A single bar of seven LEDs and coherent glass fiber 
bundle has been installed in the pressure plate of the film back 
to accomplish this annotation. In addition, an optical encoder 
has been installed in the motor driver to provide column demands 
to the FAS card. 


1-1 


Section 2 
Introduction 


Miletus has designed a FAS for use by NASA on the Isothermal 
Dendritic Growth Experiment ( IDGE ) . 

The systems capabilities include operation as a manual 
controller of a 35mm camera under the direction of the main CPU, 
controlling the STD BUSS, and operation as an intelligent 
intervalometer precisely controlling the photo taking sequence. 
In either case, all photos are annotated with alpha-numeric data 
including GMT (to 0.01 seconds resolution), camera ID number, 
frame count and text data derived from the STD BUSS CPU. The 
system consists of three parts: 

. ) The Camera Modifications to add an LED printing 
matrix and an optical encoder to detect film motion. 

. ) An intelligent STD BUSS peripheral card providing 
an interface between the CPU controlling the STD 
BUSS and the camera itself. 

.) High level language, (Turbo Pascal) software 
subroutines, (source code) to implement all 
functions from within the main IDGE software. 

Each of these items is discussed in detail in the following 
sections. 


2-1 



Section 3 

Camera Modifications 


Miletus has developed an LED printing matrix consisting of a 
linear array of seven LEDs and a coherent fiber optic bundle 
installed in the pressure plate of a 35mm Camera. This allows 
data to be printed directly on the film as each photo is taken. 
The print technique is similar to that used in a dot-matrix 
computer printer except that it is the media (film) instead of 
the print head that moves. That is, the data is printed on the 
film as the motor driver advances it to the next frame. Using 
this method, it is possible to print any character that can be 
defined by a 5X7 dot-matrix. Reliability is enhanced by using 
such a simple matrix, (only eight wires are required). In this 
system, 28 alpha-numeric digits are printed on each frame. 

In addition to the LED matrix it is also necessary to 
install an optical encoder to allow sensing of film motion. This 
is done using an optical sensor designed for reflective sensing. 
This device incorporates an infrared LED and a photo-transistor 
in a single package. A disk is mounted (usually to the motor 
drive main drive gear ) in the camera to provide a surface upon 
which the sensor can be focused. The disk consists of "spokes" 
of silvered or flat black material such that pulses are generated 
as the motor turns and the film is advanced. 


The following table describes the sequence of events 
occurring for one photograph and annotation operation: 

FAS CPU CARD: CAMERA: 


1. ) 

Send trigger to camera 

— 


2. ) 


Camera 

sends 

opens shutter and 
"X" switch pulse 

3. ) 

FAS recognizes "X" switch 
and freezes data for 
annotation . 

— 


4. ) 


Camera 

film, 

begins 

finishes exposing 
closes shutter and 
transporting film. 

5. ) 

Annotation begins when 
encoder pulses are 

received, and finishes 
when all data is printed. 



6. ) 


Camera 

film 

stops transporting 
and is ready for 



next frame. 


3-1 


Miletus has performed modifications of this nature to many 
different models of 35rom SLR Cameras while constantly aiming to 
avoid interference with either the electro-mechanical operation 
of the camera or the photo/optical capabilities. Since a non- 
contact motion sensor is used there is no affect on the 
mechanical operation of the camera. Also, since the LED printing 
matrix is independent of the camera shutter and lens the 
camera/lens settings have no effect on the LED intensity nor do 
the LED intensity settings affect the camera. 

Note: Under normal operation the FAS CPU Card acts as an 
intervalometer and, as such, is the primary source of camera 
trigger pulses. However, the camera may also be triggered by STD 
CPU or by the trigger on the camera itself. Consequently, the 
FAS Card has been designed to annotate the film no matter which 
source of triggering is utilized. However, a cable waving change 
must be made to enable annotation when triggering the camera with 
its own shutter release control. This change involves removing 
the wire from J3 pin 12 and connecting it to J3 pin 19. 

Note: If the FAS card is utilized in the standalone mode, 
jumper W1 must be connected to +5v. See Appendix D, drawing 
#3594. 


3-2 



Section 4 

FAS Hardware Description 


4.0 General 

Each FAS card contains all the STD BUSS communication 
capability, the data storage and time keeping functions, and the 
camera interface and control circuitry required to annotate one 
35mm SLR camera under the control of the STD BUSS CPU. 

The hardware consists of the following parts: 

a) Microprocessor and support circuitry (NSC800 microprocessor) 

b) Real Time Clock (RTC ) and crystal oscillator (ICM 7170) 

c) Camera interface and control circuitry (PAL Device) 

d) STD BUSS Interface and decoding logic (PAL Device) 


4.1 Microprocessor Support Circuitry 

The microprocessor and support circuitry consists 
of an eight bit CPU with 2K bytes of RAM and 8K bytes of EPROM. 
Erasable Programmable Logic Devices, ( EPLD ) are used to implement 
the necessary memory and I/O decoding functions required to 
operate the CPU. A hardware reset of the FAS CPU is available to 
the STD BUSS CPU by writing to a dedicated STD BUSS I/O address. 
Additionally, a watchdog timer is provided to initiate a FAS CPU 
reset should certain critical I/O operations fail to be detected 
within a certain allotted amount of time. 


4.2 Real Time Clock (RTC) 

The RTC has a resolution of 0.01 second and uses a standard 
crystal oscillator with a trimmer capacitor to adjust the 
accuracy. Using this trimmer the oscillator is set to the exact 
desired frequency (within the accuracy of our measuring 

equipment; +1/2 PPM) at the operating temperature to be used. 

The expected frequency deviation should be less than +10 PPM over 
the range (30 degrees C +10) To maintain a drift of under two 
seconds per day only requires an accuracy of +23 PPM. The clock 
is also settable from the STD BUSS only. 

Upon power up, the RTC is loaded with all zeros and starts 
counting from there. It could be possible to use this feature as 
an elapsed time counter for use on other projects at a later 
date. 

The ones of days are maintained by the FAS CPU. Upon power 
up the ones of days are set to zero and may be set to a value 
between 0 and 9 through the use of the STD CPU. 


4-1 


4.3 Camera Interface Circuitry 


The camera interface circuitry allows the FAS CPU to 
trigger the camera, take a picture, detect an "X" switch 
closure from the camera, and (using the pulses provided by the 
optical encoder installed in the camera motor driver), annotates 
the film. The FAS circuitry allows the LED matrix intensity to 
be adjusted for proper exposure. This is accomplished using wire 
jumpers that can easily be changed in the field. 

Additionally, this circuitry contains a hardware and 
software frame counter. The hardware frame counter may only be 
accessed by STD BUSS CPU. The software frame counter, however, 
is accessed by both the FAS CPU and the STD CPU. This feature 
ensures that the current frame count contained in the hardware 
frame counter cannot be disturbed by the FAS CPU should a 
malfunction occur. The hardware frame counter may be reset to 
zero by the STD CPU. It should be noted that the hardware frame 
count is used for reference only and the software frame count is 
printed on the film. 

The camera may be triggered by the STD BUSS CPU or the FAS 
CPU; the STD BUSS CPU may disable the FAS CPU from performing 
this function. This allows the STD BUSS CPU to take over camera 
control and detect a problem on the FAS CPU Board. 

The "X" switch is de-bounced for detection and used by the 
FAS CPU to freeze data at the time the film is exposed. The LED 
Head will then print this data as the film is advanced. This 
signal is also provided as an output to the IDGE system flash 
unit . 


4.4 STD BUSS Interface 

The STD BUSS interface decoding is performed using an EPLD 
in order to minimize board surface area used for this function. 
Two "types” of STD BUSS ports exist on the FAS Board, those that 
are independent of the FAS CPU and those used for control and 
communication of the FAS CPU by the STD BUSS CPU. 

The BUSS ports independent of the FAS CPU consists of the 
following: 

- FAS CPU HARD RESET (Write 00 to Port 10 8H) 

- HARDWARE FRAME COUNTER RESET (Write 02 to Port 108H) 

- READ HARDWARE FRAME COUNTER (Read from 107H) 

- STD BUSS TRIGGER TO CAMERA (Write 04 to 108H) 

- FAS CPU CAMERA TRIGGER ENABLE/DISABLE (Write 08 to 108H) 


4-2 


The BUSS ports used for control and communication of the FAS 
CPU are: 

- FAS Camera Interface STATUS to STD (Port 104H) 

- FAS Interval warning to STD (Port 10 3H Bit 0) 

- FAS PHOTO confirmation bit to STD (Port 102 Bit 0) 

- DATA to FAS (from STD) (Port 101H) 

- DATA to STD (from FAS) (Port 100H) 

- FAS READY FOR DATA (Port 105H Bit 0) 

- STD READY FOR DATA (Port 106H Bit 0) 

4.4.1 FAS Camera Interface Status to STD 


The FAS is capable of informing the STD CPU of 
certain conditions. Some of these are derived from the 
camera interface and some from the FAS CPU itself. A 
brief description of each follows. 

From the Camera Interface: 

- Camera trigger received but no "X" switch detection. 
This error will occur and be detected by the FAS CPU 
during every photograph. However, this detection is 
normal and due to the delay between the time the camera 
is triggered by the FAS and the time the camera 
actually takes the photo. This error is reported by 
the FAS for a very brief time and will probably be 
undetectable by the STD CPU. Consequently, the only 
time this error should be interpreted as a failure is 
when the error persists for a prolonged period of time 
(longer than 500ms). 

- "X" switch received but no encoder pulses detected. 
This error is reported when the FAS detects an "X" 
switch but does not detect encoder pulses. This error 
is reported in the same manner as discussed above. 

Encoder pulses received but terminated prior to a 
print complete. This error occurs when the FAS 
receives an insufficient number of encoder pulses to 
complete a print cycle. This error is also reported in 
the same fashion as the previous two errors discussed. 


From FAS CPU: 

- Watchdog timer timeout occurred. Should the FAS CPU 
be reset by the watchdog timer, this bit will inform 
the STD BUSS CPU that this occurred. When the status 
port is read onto the STD BUSS, this bit is reset. If 
a failure occurs that causes continuous timeout resets, 
this bit would continue to report each one. 


4-3 



- FAS EPROM Check Sum Pass/Fail. 

- FAS RAM Test Pass/Fail. 

- FAS CPU Self -Test Pass/Fail. 

The three above items represent the results of the FAS 
Card self test function described in Section 5.19. 

- FAS CPU Annotation Mode Bits : 

These bits represent the current annotation mode (A, B, 
or C) as discussed in Section 4.6. 

The eight bit port to be used for reporting these 
status/error codes is allocated as follows: 

(Port Address 104 Hex) 

Bits 0-1: Camera Interface 

00 = Camera Hardware OK 

01 = Trigger sent but no "X" switch 

10 = "X" switch but no encoder pulses 

11 = Encoder pulses but no print complete 

Bits 2-4: FAS Card Self Test 

000 = AL1 tests pass 

001 = EPROM check sum fail 
010 = RAM check fail 

100 = CPU check fail 

(other codes would reflect multiple failures) 

Bit 5: Time-out reset occurred flip flop 

Bits 6-7 : FAS Annotation Mode Bits 

00 = Mode A 

01 = Mode B 

10 = Mode C 

11 = Unused at this time 


4.4.2 FAS Interval Warning to STD 

A warning is issued to the STD CPU one second 
before a trigger is sent to the camera. This warning 
bit is removed when the camera is triggered. 

Note: This warning is only reported for photo 

intervals greater than one second. 


4-4 



4.4.3 Photo Confirmation Bit to STD 

This bit is reset to a zero when an interval 
warning is issued, when read by the STD CPU, or when a 
camera trigger is issued. It is set to a one when a 
print complete is detected. The presence of this bit 
is therefore an indication that the requested photo was 
taken and data annotation performed. A successful 
photograph would be indicated by the confirmation bit 
going high. If it doesn’t, the status bits will 
contain the failure code. 

4.4.4 Data and Ready Ports 

Data is transferred from one CPU to another 
using four ports, two for data and two for handshake. 
The data ports can be written to by one CPU and read 
from by the other. The ready "ports" are actually a 
flip-flop reflecting the status of the data port. It 
is read by either CPU but is set or reset only under 
specific conditions as described below. 

When a data port is written to, the 
corresponding ready bit is automatically set to a one. 
The intended target of this data sees this and takes 
the data. This action resets the ready bit to a zero 
telling the sender to send another byte by writing to 
that data port. This action can continue until all data 
has been transferred. 


(FAS Data to STD 
(STD Data to FAS 


Port 100H Read) 
Port 101H Write) 


(Data Ready FAS 
(Data Ready STD 


Port 106H Bit 0) 
Port 105H Bit 0) 


4.5 Communication Protocol 

The communication Protocol used on the STD BUSS to control 
the FAS functions is similar to that used to control a computer 
peripheral such as a printer. Each control function has an ASCII 
control character sequence assigned to it and the data blocks 
transferred have a fixed format adhered to by both the STD BUSS 
CPU and the FAS CPU. 

The intent here is simple: To keep the hardware interface, 
(number of I/O ports used on the STD BUSS) simple while not 
limiting functionality. Also, as needs change functions can be 
added by changing only the software and using existing 
communication ports. 

The Data Ready Flip-Flop implementation also allows for 
relatively high-speed data communication without requiring 
elaborate hardware timing circuitry. 


4-5 


Section 5 

FAS Software Description 


5 . 0 General 


The software used to implement the FAS functions 
consists primarily of two elements. The firmware existing in the 
EPROM on the FAS CPU Card itself and the Turbo Pascal procedures 
supplied for inclusion into the larger IDGE software. 

The firmware performs all functions required by the FAS CPU 
Card hardware creating an intelligent camera control and 
annotation system. This system is largely autonomous to the STD 
BUSS CPU once the FAS CPU has been given the data and control 
commands necessary to perform the camera intervalometer and 
annotation functions. The STD BUSS CPU can determine the status 
and health of the FAS CPU at any time by reading certain ports as 
discussed above. Should it be required to override the FAS CPU 
Card's control of the camera, this is possible through the STD 
BUSS . 


The Turbo Pascal procedures are supplied with commented 
source code to allow integration directly into the larger IDGE 
Software. 

These procedures allow the following control functions and 
data transfer to take place. 


5.1 FAS CPU Camera Trigger Enable/Disable 

(Set Bit 3 of Port 108H to Enable) 

(Reset Bit 3 of Port 108H to Disable) 

This procedure allows the STD BUSS CPU to disconnect the FAS 
CPU from the camera trigger circuitry. The hardware used to 
implement this function is independent of the FAS CPU and allows 
the STD BUSS to override the FAS camera control should a problem 
develop during a mission. 


5.2 STD CPU Camera Trigger Command 

(Set Bit 2 of Port 108H and Reset Bit 2 of Port 108H after 10ms) 

This causes the camera to trigger immediately and under 
direct control of the STD BUSS CPU. This is available at all 
times regardless of the state of the disconnect hardware 
described above or the FAS CPU itself. 


5-1 



5.3 FAS CPU Reset Command 


(Reset Bit 0 of Port 108H and Set Bit 0 of Port 108H after 10ms) 

This causes a hardware reset of the CPU on the FAS card and 
is available as a means of attempting recovery from a failure. 


5.4 Read Hardware Frame Counter 
(Read from Port 107H) 

This procedure returns the eight bit contents of the frame 
counter on the FAS Card. This count is a hardware function of 
the camera interface circuitry and is not affected by the state 
of the FAS CPU. 


5.5 Reset Hardware Frame Counter 

(Set Bit 1 of Port 108H and Reset Bit 1 of Port 108 after 1ms) 

This function will clear the frame counter to zero under the 
control of the STD BUSS CPU directly. 


5.6 SET FAS Annotation MODE 

The FAS has three modes under which data annotation is 
performed. These modes (A f B, and C) are briefly described 
below. 

(Write "~M" to Port 101H followed by an ASCII "A", "B", "C") 

- MODE A: In this mode all 28 digits to be annotated 

onto the film are supplied by the STD BUSS CPU. The 
characters can be any of the standard ASCII characters 
defined by the ASCII 20 (hex) through 5F (hex). This 
includes all uppercase letters, all numbers and most 
punctuation symbols. The annotation is: 

tttttttttttttttttttttttttttt t = text 

- MODE B: In this mode the FAS CPU supplies camera ID, 

frame number, and GMT. The STD BUSS CPU provides 16 
characters of text The format is: 

CFFFttttttttttttttttHHMMSSSS 


c 

= Camera ID 

FFF 

= Frame Number 

t 

= Text 

HH 

= Hours 

MM 

= Minutes 


5-2 



SSSS = Seconds of 0.01s 

- MODE C: In this mode the FAS CPU provides GMT and the 
STD CPU will provide 19 text characters. The format 
is : tttttttttttttttttttDHHMMSSSS 

t = Text 

D = Day (l's digit of day of month counter) 

HH = Hours 

MM = Minutes 

SSSS = Seconds to 0.01s 

The text data is sent using a separate procedure 
described below. The procedure discussed here will 
only SET the mode. 


5.7 Send Last Photo "X" Switch Data to STD BUSS CPU 
(Write "'‘N" to Port 101H and Read 28 bytes from Port 100H) 

Each time a photo is taken the "X" switch is used to freeze 
the data for use later to perform the annotation when the film is 
advanced. This data is held in memory until the next photo is 
taken. The STD BUSS CPU can request this data at any time up to 
.01 seconds prior to the next photo interval. During this .01 
second window the FAS CPU will not honor a request for data from 
the last photo. Instead, the request is noted but not acted upon 
until after the impending photo is taken. Therefore, in this 
case, the data reported will reflect the photo just taken. 


5.8 Receive Text from STD BUSS CPU 

(Write " / '0" to Port 101H followed by 28 ASCII characters) 

This procedure allows a string of character data to be sent 
to the FAS CPU. The data is interpreted as text data to be 
printed according to the current mode as described in section 5.6 
above. If more characters are sent than needed, the extra data 
is ignored. 


5.9 Set GMT Time 

To set clock: Write ” < 'P" followed by 5 bytes of binary data 
in the following format: day (0-9), hours (0-23), minutes (0- 
59), seconds (0-59), hundreds of seconds (0-99). 

To start clock running: Write "~G" to Port 101H. 

Using this procedure the STD BUSS CPU can set the RTC on the 
FAS Board. A string of data will define the current date and 
time to be loaded into the clock, but the clock will not be 
started until a separate "GO" command is sent. In this way more 
than one FAS Card can be set to the same time. 


5-3 



5.10 "GO" Command to Start Clock 


(Write " / 'G" to Port 101H) 

As discussed above, this procedure will start the RTC 
counting after time has been loaded. 


5.11 Set Intervalometer Parameters 

Write "~Q" to Port 101H followed by the number of photos (1 
byte binary, 0-250). Next, send two bytes of binary (MSB first) 
photo interval, 0-14400. 

This allows the STD BUSS CPU to give the FAS CPU information 
required to perform a photo sequence. This information includes 
the nuantity of pictures to be taken and the time interval 
between pictures. The quantity will range from 1 to 250 and the 
time interval from 0.25 to 3600 seconds in increments of 0.25 
seconds. 

The accuracy of this interval is +0.01 second and the time 
annotated onto the film is the time at which the "X" switch was 
received. 


5.12 "GO" Command to Start Photo Sequence 
(Write "~R" to Port 101) 

This procedure causes the photo sequence to begin by taking 
one picture immediately and the next photo one "time interval" 
later and continuing until the entire "quantity" of pictures is 
taken . 


5.13 FAS Camera Interface STATUS Code 

Using this procedure the STD BUSS CPU is able to determine 
the status and health of the FAS CPU and camera interface 
circuitry by reading the FAS status bits from port 104H. This 
port is a dedicated port assigned to a unique STD BUSS I/O 
address and is available to the STD BUSS CPU at any time, 
independent of the FAS CPU. The FAS CPU will simply update the 
data in this port as the status of the hardware changes. Some of 
these status bits are only updated after a FAS self test command. 
This is summarized below: See Section 4.4.1. 

- Camera Error Code: (updated as camera status changes) 

(Read from Port 10 4H) 

a) Camera trigger sent but no "X" switch received. 

b) "X" switch received but no encoder pulses received. 

c) Encoder pulses received but terminated before a print 
complete. 


5-4 


- FAS CPU Status Bits 

a) Timeout reset has occurred: 

This item is reported independent of the FAS CPU and 
software. This will indicate a probable failure of the 
FAS CPU and as such will only be indicating the 
hardware attempting to reset the CPU and all hardware 
with the exception of the hardware frame counter. 


b) Self Test Result Bits: 

- EPROM check sum verify/fail 

- RAM test pass/fail 

- CPU test pass/fail 

(See Section 4.4.1 for error codes.) 

These tests are performed upon power up and request, 
(by STD CPU), and results are reported back. 


5.14 Cancel Current Photo Sequence 
(Write "~S" to Port 101H) 

Using this procedure the STD BUSS CPU can stop the 
current photo taking session at any time. 


5.15 Interval Pre-Warning Flag 

(Read from Port 103H bit 0 only) 

By reading this dedicated STD BUSS I/O port the STD BUSS CPU 
is able to detect (one second ahead of time) when a photo is 
about to be taken. See Section 4.4.2. 


5.16 Photo Confirmation to STD 
(Read from Port 10 2H bit 0 only) 

By reading this dedicated STD BUSS I/O Port, the STD BUSS 
CPU can determine if an expected nhoto was actually taken. This 
port should be reset to a zero one quarter second prior to a 
photo, when a ^hoto is triggered, or when the port is read by the 
STD CPU. This bit is set to a one if a photo is successfully 
taken. If the ^hoto is unsuccessful, the STD BUSS CPU should 
read the camera status bits to determine the probable cause of 
the failure. See section 4.4.1. 


5-5 



5.17 Photo Count This Sequence 


(Write " / 'x" to Port 101H and read 1 byte binary from 100H) 

The FAS is capable of reporting to the STD BUSS CPU how many 
Photos of the current sequence have been taken. This count will 
increment every time the camera is triggered, up to the total 
quantity of photos required for the current sequence. 


5.18 Perform FAS Communication Port Test 
(Write "~Y" to Port 101H) 

This procedure invoke the test routines on the FAS board to 
exercise all the communication hardware between the FAS and the 
STD BUSS CPU's. 


5.19 Request FAS Hardware Self Test 

(To perform for all tests, write ,,/ 't" to Port 101H followed by an 
ASCII A) 

Using this procedure the STD BUSS CPU can request the FAS to 
perform the following checks: 

a) EPROM check/sum verify. (Write " , 'T" followed by an ASCII E 
to Port 101H ) 

b) RAM test with all ones, all zeros, and alternating ones and 
zeros. (Write " * T " followed by an ASCII R to Port 101H) 

c) CPU self check routines. (Write "''T" followed by an ASCII C 
to Port 101H ) 

The results of these tests are made available to the STD 
BUSS CPU in the above mentioned STATUS port. (See sections 
4.4.1 and 5.13. ) 


5.20 Report Annotation Mode to STD 

(Write an " ^ L ” to Port 101H and Read one byte of ASCII from Port 
100H) 

The STD BUSS CPU can ask the FAS CPU which mode the 

annotator is currently in (A, B, or C). This software procedure 

performs a request using the data/ready ports (STD to FAS) and 

receives an answer using the data/ready ports (FAS to STD). The 
FAS card status port, a dedicated STD BUSS I/O Port, also 

contains this mode code. 


5-6 



5.21 Report Time Left to Next Scheduled Photo 

(Write a " / 'V" to Port 101H followed by two reads from Port 100H) 
(Read two bytes binary MSB first) 

The STD BUSS CPU can access the intervalometer timer in the 
FAS CPU by requesting this item. The FAS will return the number 
of increments left until the next scheduled photo as a binary 
number 0 to 14,400. This would represent the time left in .25 
second increments, (i.e. 3600 1/4 second intervals = 14,400). 


5.22 Set Software Frame Counter 

(Write " / 'H" to Port 101H followed by one byte binary frame count 
0-250) 

This procedure allows the STD CPU to set the software frame 
counter to any value between 0 and 250. 


5-7 


1.0 INTRODUCTION 


The following test procedure is meant to provide a means of 
verifying the functional operation of the film annotation 
controller card (FAS) and camera. Each test outlined within this 
procedure is designed to test a specific portion of the FAS 
hardware as well as the command sequences associated with that 
hardware . 

These test procedures are not meant to be a means of trouble 
shooting the FAS card but rather they are meant to provide 
documentation as to the functionality of each FAS card. After 
each FAS card has undergone preliminary testing and it is 
believed to work properly it will be subjected to the test 
procedures contained within this document to verify complete 
functionality. 


A-3 


2.0 TEST SET-UP 


For all of the test procedures outlined in this document it is 
assumed that the person performing the tests has obtained the 
software, hardware and test equipment outlined in the next two 
sections. In addition, it is assumed the the individual executing 
the test has already installed the FAS card in the STD computer, 
has applied power, and has run the FASTEST . EXE test program 
provided by Miletus Associates. 

2.1) Hardware £ Software; The following is a list of the hardware 
necessary to perform the tests contained in this document: 

1. Video monitor and keyboard 

2. Prolog computer card # 7890A-05 

3. Prolog computer card # 7350C-01 

4. Prolog computer card # 7717-01 

5. Prolog computer card # 7391A-01 & 7390-02 

6. Prolog computer card cage 

7. Prolog compatible power supply 

8. FAS controller card 

9. Modified 35mm camera 

10. Camera connection cable, # 8-1094 

11. FASTEST.EXE test program 

12. Prolog extender card. 

2.2) Test Equipment : The following is a list of test equipment 
necessary to perform the tests contained in this test 
specification; 

1. Hewlett Packard logic analyzer model 1631D 

( or equivalent machine capable of capturing 
and analyzing the microprocessor BUSS cycles 
of the National Semiconductor NSC-800 CPU 
running at eight Mhz ) 

2. Tektronix 100 Mhz oscilloscope model 2236 
( or equivalent ) 

3. Frequency Counter with a display accuracy of 
10 PPM or better used to measure 1Hz clock 
counter ticks ( Tektronix Scope 2236 with 
option 001 ) 


A-4 


3.0 TEST PROCEDURES 


3.1 TEST FAS CPU RESET COMMAND 

SETUP ; Issue the "F" command and select mode "A". Issue the "M" 
command. Note: the mode changes to "A". Issue the "C" command. 
Followed by the "M" again. 

RESULT : After the mode is changed to "A", a reset command will 
restore the mode to "B". The last "M" command will show Mode = B 
to pass this test. 

3.2 TEST FAS STATUS CODE 

SETUP: Exit the FASSTD test program by pressing "Z". Turn off the 
power to the STD computer and wait at least ten seconds. Next, 
apply power to the STD computer and run the FASTEST test program. 
Finally, issue the "M" command. 

RESULT : After issuing the "M" command, the "’ode status should 
equal "B", the card status should equal zero, and the camera 
status should equal zero. If this is not the result this test has 
failed. 


3.3 PERFORM FAS COMMUNICATION TEST 


SETUP ; Issue the "R" command from the FASTEST program. 

RESULT : After waiting at least four seconds note the FAS error 
massage value located in the lower right-hand side of the 
computer screen. If the returned error code equals zero the 
communication port test has passed. Any other response 
constitutes a communication port failure. 


3.4 PERFORM FAS HARDWARE TEST 

SETUP ; Issue the "S" command and select "A" as a response to the 
computer prompt. 

RESULT : After waiting at least five seconds issue the "M" command 
to read the FAS status latch. If the FAS card error code result 
equals zero the hardware test has passed. Any other response 
constitutes a hardware failure. 


3.5 TEST STD CAMERA TRIGGER COMMAND 

SETUP : Connect FAS camera cable and camera to the FAS camera 

card. Apply power to the camera and Issue the "B" command. 

RESULT : If the camera triggers once for each time the "B" command 
is sent, the test has passed. 


A-5 


3.6 TEST HARDWARE FRAME COUNTER 


SETUP ; First, send the "D" command to read the contents of the 
hardware frame counter. Next, issue the "B" command to trigger 
the camera. Lastly, issue the "D" command a second time and note 
the current count value. (Carefully repeat this test several 
times to insure proper operation. ) 

RESULT : Each time the camera is triggered the frame count should 
increase by one count and only one count. If after repeating 
this test twenty times the frame count increases by exactly 
twenty, then this test has been passed. 


3.7 TEST HARDWARE FRAME COUNTER RESET 

SETUP : Issue the "E" command followed by the "D" command. If the 
returned value of the frame counter is zero then issue the "B" 
command followed by the "D" command. 

RESULT : If after performing this test the frame counter value is 
one then this test has been passed. 


3.8 TEST THE SEND DATA TO FAS COMMAND 

SETUP ; Type the "H" command and enter "ABCDEFGHIJKLMNOP" . 

RESULT: After waiting at least two seconds, note the result of 

the FAS error code. If the error code is zero then this test has 
passed. 


3.9 TEST THE SEND LAST "X" SWITCH DATA 

SETUP : Send the "B" command followed by the "G" command. 

RESULT : If the data received from the FAS is as follows, this 

test has passed. "CFFFABCDEFGHI JKLMNOPHHMMSSSS " 

C = Camera ID, FFF = Frame count, HHMMSSSS = Time 

N0TE1 Camera ID, Frame count, and Time are undefined at this 
point in the test; therefore, it should not concern the operator 
that these fields are meaningless. However, what is important is 
that the text matches: "ABCDEFGHIJKLMNOP". (This data was entered 
in step 3.8) 


3.10 TEST THE ANNOTATION MODE COMMAND 

SETUP : Issue the "F" command and enter "A" in response to the 
computer prompt. Enter the "H" command and type in a unique 
combination of data. Next, enter the "B" command to trigger 
followed by the "G" command. Check the data that is returned from 


A-6 


the FAS and insure that it is identical to the data that was just 
sent. Repeat this test with the exception of entering a "C" in 
response to the computer prompt and realizing that the data 
returned will be comprised of the text sent followed by day and 
time data which at this point are undefined. 

RESULT : If the data returned from the FAS is identical to the 
data sent to the FAS this test has passed. 


3.11 TEST FAS REAL TIME CLOCK 

SETUP ; Issue the "F" command and enter mode "C". Send the "I" 
command and enter "123450000" and press return. Next, issue the 
"J" command to start the clock. Finally, type the "B" command 
followed by the "G" command. 

RESULT; Verify that the time returned is equal to the time sent 
plus the time between the issuing of "J" command and the sending 
of the "B" command. If it is found that the time is correct 
within reasonable tolerances then this test has passed. 


3.12 TEST FAS INTERVALOMETER 

SETUP ; First, setup the analyzer in the timer mode to start and 
stop on a fetch from address 0B77 hex. Second, Send the "K" 
command and enter a request to take thirty pictures on an 
interval of one (.25 seconds). Third, issue the "L" command to 
start the nhoto sequence and verify that the camera is being 
triggered. 

RESULT ; Verify that the analyzer's measured time is 250 ms which 
will constitute a passing of this test. 

Note : If an analyzer is not available, a stop watch can be used 
to give an approximate time. This test should actually be done 
by the manufacturer and fine tuned to factory (manufacturer) 
specifications. The stop watch will give a ball park time which 
is all that is necessary since adjustments cannot be made at the 
user level. 


3.13 TEST THE CANCEL PHOTO SEQUENCE COMMAND 

SETUP ; Issue the "L" command and before the camera has completed 
it's thirty photographs enter the "N" command. 

RESULT ; Observe whether the camera stops triggering promptly 
after the "N" command is issued. If this behavior is observed 
then this test has passed. 


A-7 



3.14 TEST THE INTERVAL PRE-WARNING FLAG 


SETUP : Issue the "K" command and enter 250 photos at 16 intervals 
(every 4 seconds). Issue the "L" followed by the "Y" command. 

RESULT : When the time remaining until the next scheduled photo 
counts down below 5, the interval pre-warning flag will change to 
say "Photo Pending." When the count goes to zero, which is 
usually not seen on the screen, the camera will click and the 
test program reports a "Successful Photo Taken" message. If this 
occurs, then the test has been passed. Issue the "N" and "Y" to 
stop this test. 


3.15 TEST THE PHOTO CONFORMATION BIT 

NOTE : It is recommended that the following test be performed by 

the manufacturer ONLY. 

SETUP : Turn off the power. Disconnect jumper (W3) or take out 

pin 25 of the camera Berg connector located at J3 on the FAS card 
and after power up, issue the "B" command. Next, observe the 
state of the photo confirmation, command "P". If the photo 
confirmation status is "No Photo Taken" then turn off power and 
reconnect the encoder pulses. Then turn on power and issue the 
"B" command a second time. This time a successful Dhoto 
confirmation status should be observed. 

RESULT : If the operator observes the above conditions this test 

has passed. (Note: reconnect jumper (W3) 


3.16 TEST THE PHOTO SEQUENCE COUNT 

SETUP : Start the camera by taking a photo sequence and then issue 
the "Q" command repeatedly. 

RESULT: The operator should observe the sequence photo counter 

"Q" to be incrementing. If this observation is made this test has 
passed. Use command "N" to stop the photo sequence. 


3.17 TEST THE REPORT ANNOTATION MODE COMMAND 

SETUP: First issue the "F" command and respond "A" to the 
computer prompt. Next, issue the "T" command followed by the "M" 
command. Repeat for modes "B" and "C". 

RESULT : If the annotation mode that is reported in response to 
the "T" and "M" commands is "A", "B", "C" then this test has 
passed. 


3.18 TEST THE REPORT TIME TO NEXT PHOTO COMMAND 

SETUP: Start the camera taking photos on two second intervals. 
Next, issue the "U" command repeatedly and verify that the 
time to next *'hoto count is decreasing . 

RESULT : If it is found that the time to next photo count is 
decreasing then this test has been passed. Use command "N" to 
stop the nhoto sequence. 

3.19 TEST PHOTO EXPOSURE TIMES 

NOTE : It is recommended that the following test be performed by 

the manufacturer ONLY. 

SETUP: Attach channel one of the oscilloscope to pin 60 or Test 

Point One (TP1) of the PNT EPLD (U3). The exposure time "E" 16us, 
has already been pre set by the jumper between pins 5 and 12 of 
U4. Start a photo sequence. Make sure that the positive going 
pulse width is approximately 16us. 

RESULT : A 16us + 1 - 2us positive pulse width should be observed. 


3.20 TEST REAL TIME CLOCK CALIBRATION 

NOTE : It is recommended that the following test be performed by 
the manufacturer ONLY. 

SETUP : Issue the M V" command to set the FAS real time clock into 
the 1Hz interrupt mode. After issuing this command the FAS will 
remain in the 1Hz interrupt mode for three minutes or until any 
other key is pressed. Next, connect the frequency counter to pin 
22 of U9 . 

RESULT : Verify that the frequency measurement is 1HZ +/- 10 PPM. 
However, the operator should not be concerned if the frequency 
count jumps +/- 30 PPM due to the sampling time of the frequency 
counter . 


3.21 PERFORM FILM TEST 

NOTE : It is recommended that the following test be performed by 

the manufacturer ONLY. 

SETUP: Load the camera with approximately thirty frames of film 

and take photos with fixed data in all of the print modes. 

RESULT: Insure that the annotated data appears correctly on the 

film without any scratches caused by the annotation head. Also 
insure that the camera is advancing film correctly. 


A- 9 


STD to FAS Unit Procedures * ) 


(* Miletus Associates, Inc. 

{ $R- } {Range checking off) 

{$B+} {Boolean complete evaluation on} 

{$S+} {Stack checking on} 

{$1+} {I/O checking on} 

{$N-} {No numeric coprocessor} 

{$M 65500,16384,655360} {Turbo 3 default stack and heap} 

( ********************************************************* ) 
( ********************************************************* J 
( * * * ***) 

(*** FAS AND STD UNIT PROCEDURES ***) 

(*** REVISION 2.0 ***) 

( *** *** ) 

(*** BY: TOM CAVALLI ***) 

(*** JUNE 1988 ***) 

(*** LAST MODIFIED : 13 MARCH 1989 ***) 

(*** FILENAME: FASSTD20.TP5 ***) 

(*** COMPILES: FASSTD20.TPU ***) 

( *** *** ) 

(*** 9 DEC 88: Load_the_FAS_sof tware_f rame_count (VAR ***) 

( * * * FAS_ERROR_CODE , NEW_FRAME_COUNT : BYTE ) ; * * * ) 

(*** was added. ***) 

(*** ***) 

(***14 DEC 88: Modified FAS Hardware Self Test to state***) 

(*** when the test has succesfully finished. ***) 

( *** *** ) 

(***16 DEC 88: Converted the FASSTD procedures into a ***) 

(*** unit. The private GLOBAL variable, ***) 

(*** FAS_TRIGGER_ENABLE_SAVE , allows those ***) 

(*** procedures which set the FAS control ***) 

(*** bits to function with out passing the ***) 

(*** current trigger enabled/disabled value ***) 

(*** ***) 

(*********************************************************) 
( ********************************************************* ) 


& 


B-3 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The following TURBO PASCAL (V5) procedures support the 
operation of the Miletus Film Annotation System (FAS) camera 
card . 

There are twenty two procedure calls and various utility 
procedures that will activate the FAS card. Each procedure 
call contains the parameters necessary for correct 
operation. These parameters provide the communication path 
between the STD and FAS. A list of the these parameters can 
be found the FASTEST. TP4 source code. For instance, an 
error code parameter is passed between each procedure and 
reports the error status. This error code should be checked 
by the user's program to verify successful completion of the 
called procedure. In PASCAL, 

IF A_FAS_Error_Has_Occured(FAS_ERROR_CODE) is TRUE then the 
called procedure has failed. 

The user can NOT call any of the utility procedures 
which follow EXCEPT: 

A_FAS_Error_Occured 

Get_Error_Code_Number 

Get_Error_Code_Caller 

FAS_Power_Up 

Upon power up the user must first call the Fas_Power_Up 
procedure which will initialize the FAS: the FAS 
Annotation mode equals 'B', and the FAS camera trigger is 
enabled. 

The FASTEST. TP5 test program serves as an example where 
the uses clause contains FASSTD20 so that a screen 
menu program can test the FAS. Although 

the FASTEST. TP5 program only displays the error code after 
each procedure call, the user must perform an error code 
check. *) 


B-4 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

UNIT FASSTD20; 

INTERFACE 

uses crt; (* for the DELAY () procedure *) 

(******************** TYPE DECLARATIONS *******************) 
TYPE 


STRING 

4 

= STRING! 4] ; 

( *FOR THE COMMUNICATION TEST*) 

string" 

'10 

= STRING! 10]; 

(* 

FOR 

CONTROL CODE + GMT 

*) 

STRING 

'9 

= string! 9] ; 

(* 

FOR 

GMT ' DHHMMSSSS ' 

*) 

string" 

'28 

= STRING [28] ; 

(* 

FOR 

TEXT ANNOTATION 

*) 

STRING 

'29 

= STRING! 29]; 

(* 

FOR 

CONTROL CODE + TEXT 

*) 


B-5 


(* Miletus Associates, Inc. 


STD to FAS Unit Procedures *) 


(* The following FUNCTIONS and PROCEDURES may be used*) 

(* by the host program. *) 

FUNCTION A_FAS_Error_Occured (VAR FAS_ERROR_CODE : BYTE) 

: BOOLEAN; 

PROCEDURE Get_Error_Code_Number (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

FAS_ERROR_NUMBER : BYTE); 

PROCEDURE Get_Error_Code_Caller (VAR 

FAS_ERROR_CODE ; BYTE; 

VAR 

FAS_ERROR_CALLER : BYTE ) ; 

PROCEDURE FAS_Power_Up ( VAR 

FAS_ERROR_CODE : BYTE); 

PROCEDURE S e t_FAS_Came r a_Tr i gge r_Con t r o 1 (VAR 

FAS_ERROR_CODE ; BYTE ; 

FAS_TRIGGER_ENABLE : BOOLEAN ) ; 

PROCEDURE STD_CPU_Trigger_Camera_Command (VAR 

FAS_ERROR_CODE : BYTE); 

PROCEDURE FAS_CPU_Re s e t_Command (VAR 

FAS_ERROR_CODE : BYTE); 

PROCEDURE Read_Hardware_Frame_Counter (VAR 

FAS_ERROR_CODE , 

FAS_HARDWARE_FRAME_COUNTER : BYTE); 

PROCEDURE Reset_Hardware_Frame_Counter ( VAR 

FAS_ERROR_CODE : BYTE); 

PROCEDURE Set_FAS_Annotation_Mode (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

NEW_FAS_ANNOTATION_MODE : CHAR ) ; 

PROCEDURE Get_Last_Photo_Data (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

LAST_PHOTO_X_SWITCH_DATA : STRING_28); 

PROCEDURE Send_Text_To_FAS ( VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

TEXT_TO_FAS : STRING_28); 

PROCEDURE Se t_GMT ( VAR 
B-6 “ 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

FAS_ERROR_CODE : BYTE ; 

VAR 

NEW_GMT : STRING_9 ) ; 

PROCEDURE Start_FAS_Clock (VAR 

FAS_ERROR_CODE : BYTE ) ; 

PROCEDURE Set_Intervalometer (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

NUMBER_OF_PHOTOS_TO_TAKE : BYTE; 

VAR 

INTERVAL_BETWEEN_PHOTOS : INTEGER); 

PROCEDURE Start_Photo_Sequence (VAR 

FAS ERROR CODE : BYTE ) ; 


PROCEDURE Get_FAS_Status (VAR 

FAS_ERROR_CODE, 

FAS_STATUS_CODE : BYTE ) ; 

PROCEDURE Cancel_Photo_Sequence ( VAR 

FAS_ERROR_CODE : BYTE ) ; 

PROCEDURE Get_Photo_Pr e_Warning_Flag ( VAR 

FAS_ERROR_CODE : BYTE ; 

VAR 

INTERVAL_PRE_WARNING_FLAG : BOOLEAN) 

PROCEDURE Get_Photo_Conf irmation_Flag(VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

PHOTO_CONF I RMATI ON_FLAG : BOOLEAN); 

PROCEDURE Get_Photo_Count ( VAR 

FAS_ERROR_CODE : BYTE ; 

VAR 

NUMBER_OF_PHOTOS_TAKEN : BYTE ) ; 

PROCEDURE Perform_FAS_Coiramunication_Test (VAR FAS_ERROR_CODE 

: BYTE ) ; 


PROCEDURE Perf orm_FAS_Hardware_Test (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

FAS_HARDWARE_TEST : CHAR; 

VAR 

FAS_HARDWARE_TEST_FLAG : BOOLEAN); 

PROCEDURE Report_Annotation_Mode (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

REPORTED ANNOTATION MODE : CHAR) 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

PROCEDURE Report_Time_To_Next_Photo (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

REPORTED_TIME_TO_NEXT_PHOTO ; INTEGER); 

PROCEDURE Load_the_FAS_sof tware_f rame_count ( VAR 

FAS_ERROR_CODE , 
NEW_FRAME_COUNT 
: BYTE ) ; 

PROCEDURE FAS_Clock_Calibration ( VAR 

FAS ERROR CODE : BYTE ) ; 


B-8 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The above PROCEDURES are implementated below. In *) 
(* addition to all the required FAS PASCAL PROCEDURES *) 
(* described in section 4.1 through 4.22, there are *) 
(* private utility PROCEDURES which perforin I/O between *) 
(* the FAS and STD, and there is one private GLOBAL *) 
(* variable, called FAS_TRIGGER_ENABLE_SAVE , which allows *) 
(* the host STD program to no longer pass the *) 
(* FAS_TRIGGER_ENABLE flag to every procedure which sets *) 
(* the FAS control bits. *) 
( * PROCEDURE 4.1, Set_FAS_Camera_Trigger_Control , * ) 
(* enables/disables the FAS trigger and defines the value *) 
(* of the private global variable. *) 


IMPLEMENTATION 

VAR 

FAS TRIGGER ENABLE SAVE : BOOLEAN; 


B-9 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The following twelve utility procedures perforin the 
necessary input and output between the FAS and the 
Miletus FAS PASCAL PROCEDURES. 

The user is encouraged to use 

the function A_FAS_Error_Occured ( FAS_ERROR_CODE ) to verify 
that each procedure performed without error. And, use the 
two error decoding procedures, Get_Error_Code_Number and 
Get_Error_Code_Caller to aid in writing an error recovery 
routine . 

The first two utility routines perform the I/O by 


defining an address 

and data byte parameter. 

Valid FAS 

addresses consists 

of the following: 


Address 

Use 


$100 

FAS data to STD 

read only 

$101 

STD data to FAS 

write only 

$102 

FAS photo confirmation 

read only 

$103 

FAS interval pre-warning 

read only 

$104 

FAS status 

read only 

$105 

Handshake 

read only 

$106 

no use 


$107 

Hardware frame counter 

read only 

$108 

Control bits 

write only 


*) 


( ***************** gets fas hardward DATA ***************** ) 

PROCEDURE Get_FAS_Hardware_Data ( VAR 

FAS_ADDRESS : INTEGER; 

VAR 

DATA_READ : BYTE ) ; 

BEGIN 

DATA READ := PORT [FAS ADDRESS]; 


END; 


( **************** WRITES BYTE TO FAS DATA INPUT ***********) 
PROCEDURE Write_Data_Byte_To_FAS (VAR 

DATA BYTE : BYTE); 


BEGIN 

PORT [$101] 

END; 


DATA BYTE; 


B-10 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The following three utilities are used for error 
detection. The error code parameter is encoded to include 
the called procedure and error number by using the first 
two significant digits for the procedure numbered 00 thru 
21. "00" defines the power-up procedure. "01" thru "21" 

defines the paragraph under section 4 which describes each 
procedure. The units digit contains the error code which 
goes as : 

FAS_ERROR_NUMBER MEANING 

0 No error has occured 

1 The FAS is not ready to 

receive data. 

2 The FAS has not acknowledged the 

receipt of the data just sent. 

3 The FAS has data ready for the STD 

before data was requested. 

4 The FAS has no data for the STD 

after data was requested. 

5 Improper parameter format. 

6 Invalid mode, test selection, or 

annotation text character. 

7 FAS failed to send correct status 

8 FAS failed to send correct data 

Numbers 1, 2, 3, and 4 pertain mainly to the handshake bits 
between the STD and FAS. An unknown glich may cause the FAS 
to hang-up and a RESET, FAS403.PAS, may be the only remedy 
here. On numbers 5 and 6 read the comments of each procedure 
to learn what the expected format, mode, test and text 
should be. Finally numbers 7 and 8 explain where the 
communication test has failed, FAS418 . PAS . 

*) 


B-ll 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


(************* CHECKS IF A FAS ERROR OCCURED **************) 
FUNCTION A_FAS_Error_Occured ( VAR FAS_ERROR_CODE : BYTE) 

: BOOLEAN ; 

BEGIN 

IF FAS_ERROR_CODE = ( FAS_ERROR_CODE DIV 10) * 10 THEN 
A _ FAS _ ERR0R _ 0CCURED := fae SE 

ELSE 


END; 


A FAS ERROR OCCURED ;= TRUE; 


(************* G ETS THE FAS ERROR CODE NUMBER; 0 TO 9 *****) 
PROCEDURE Get_Error_Code_Number ( VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

FAS_ERROR_NUMBER ; BYTE ) ; 

BEGIN 


FAS ERROR NUMBER 


END; 


FAS_ERROR_CODE - 

((FAS ERROR CODE DIV 10)*10); 


(************* GETS THE FAS ERROR CODE CALLER; 00 TO 21 ***) 
PROCEDURE Get_Error_Code_Caller (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

FAS_ERROR_CALLER ; BYTE ) ; 

BEGIN 

FAS_ERROR_CALLER := FAS_ERROR_CODE DIV 10; 

END; 




I 


B-12 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 


(************* CHECK THE FAS HANDSHAKE BITS ***************) 
PROCEDURE FAS Handshake Test (VAR 



HANDSHAKE MASK 
VAR 

: BYTE; 


EXPECTED BYTE VALUE 
VAR 

; BYTE; 

CONST 

HANDSHAKE_READY 

: BOOLEAN) 

HANDSHAKE ADDRESS 

VAR 

: INTEGER = $105; 


HANDSHAKE BYTE 

: BYTE; 


TRY_COUNTER 

BEGIN 

TRY COUNTER := 0; 

: BYTE; 


HANDSHAKE BYTE : = 

255; (* to initialize the 

variable * 


REPEAT 

BEGIN 


Get_FAS_Hardware_Data ( HANDSHAKE_ADDRESS , 

HANDSHAKE_BYTE ) ; 
HANDSHAKE_READY := ( HANDSHAKE_BYTE AND 

HANDSHAKE_MASK ) 

= EXPECTED_BYTE_VALUE ; 
DELAY ( 23 * TRY_COUNTER ); 

(* 1035ms maximum delay *) 

TRY_COUNTER := TRY_COUNTER + 1; 

END ; 

UNTIL HANDSHAKE_READY 

OR 

(TRY_COUNTER >= 10); 

END ; 


(************* CHECK IF THE FAS IS SENDING DATA ***********) 
FUNCTION FAS_Is_Already_Sending_Data (VAR 

FAS ERROR CODE : BYTE ) 


: BOOLEAN; 


CONST 


H AND SHAKE_MASK 
EXPECTED_BYTE_VALUE 
HANDSHAKE READY 


BYTE = $01; (* 00000001 Do *) 
BYTE =0; (* Do=0 , DATA CLEAR*) 
BOOLEAN = FALSE; 


BEGIN 

FAS_Handshake_Test ( HANDSHAKE_MASK , 

EXPECTED_BYTE_VALUE , 

HAND SH AKE_READ Y ) ; 

FAS_Is_Already_Sending_Data := NOT HANDSHAKE_READY ; 
IF NOT HANDSHAKE_READY 
THEN 

FAS ERROR CODE := FAS ERROR CODE + 3; 


END 


B-13 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures *) 


(***************** SETS FAS CONTROL BITS ******************) 
PROCEDURE Set_FAS_Control_Bits (VAR 

DATA_BYTE : BYTE); 

(* Plus the Global; FAS TRIGGER ENABLE SAVE ; BOOLEAN *) 


BEGIN 

DATA BYTE := DATA BYTE AND $07; 


IF FAS_TRIGGER_ENABLE_SAVE THEN 

DATA BYTE ;= DATA BYTE +8; 


(* DATA XXXXXXXX *) 
(* $07 00000111 *) 
(* = 00000XXX *) 

(* ADD 00001000 *) 


PORT[ $108 ] 


DATA BYTE; 


(* SEND 0000XXXX *) 



(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


(* THIS PROCEDURE MUST BE CALLED UPON POWER UP *) 
(* The FAS camera trigger will be enabled. *) 
(* The FAS powers up in the 'B' annotation mode. *) 


(***************** YAS POWER UP ***************************) 
PROCEDURE FAS_Power_Up ( VAR 

FAS_ERROR_CODE : BYTE ) ; 

(* Plus the Global: FAS TRIGGER ENABLE SAVE : BOOLEAN *) 


CONST 


VAR 


FAS_POWER_UP_CODE : 

HANDSHAKE_MASK : 

EXPECTED_BYTE_VALUE : 

FAS_ADDRESS : 

FAS STATUS CODE ADDRESS 


BYTE = $09; 
BYTE = $01; 
BYTE = 0 ; 
INTEGER=$100 
: INTEGER 


(* 00001001 *) 
(* 00000001 Do *) 
(* WANT Do=0 *) 
(* READ SO Do=0 *) 
$104; 


TRY COUNTER 

: BYTE; 

(* FOR TIMEOUT 

*) 

DATA READ 

: BYTE; 

(* IGNORED 

*) 

HANDSHAKE READY 

: BOOLEAN; 

(* TRUE IF SO 

*) 

BEGIN 

FAS ERROR CODE 

:= 0; 

(* NO ERRORS YET 

*) 


FAS_TRIGGER_ENABLE_SAVE := TRUE; ( *ALLOWS FAS CONTROL*) 
TRY_COUNTER : = 0 ; 

(* INITIALIZES FAS CONTROL BITS *) 

SetFAS Control Bits (FAS POWER UP CODE); 


(* RESETS THE LATCH STATUS ON THE FAS *) 
Get_FAS_Hardware_Data ( FAS_STATUS_CODE_ADDRESS , 

DATA READ); 


(* RESETS AND VERIFIES Do=0 FOR FAS HANDSHAKE *) 
Get_FAS_Hardware_Data ( FAS_ADDRESS , DATA_READ ) ; 
FAS_Handshake_Test ( HANDSHAKE_MASK , 

EXPECTED_BYTE_VALUE , 
HANDSHAKE_READY ) ; 

IF NOT HANDSHAKE_READY THEN 

FAS ERROR CODE := 3; 


END; 


B-15 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


(***************** SEND CODE OR DATA TO FAS ***************) 
PROCEDURE Send_Byte_To_FAS (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

DATA_TO_FAS : BYTE ) ; 

CONST 

HANDSHAKE_MASK : BYTE = 2; 

EXPECTED_BYTE_VALUE : BYTE = 0; 

ZEROS : BYTE = 0; 

VAR 

HANDSHAKE_READY : BOOLEAN; 

BEGIN 

(* IS FAS READY TO RECEIVE DATA? *) 
FAS_Handshake_Test ( HANDSHAKE_MASK , 

EXPECTED_BYTE_VALUE , 

HANDSHAKE_READY ) ; 

IF NOT HANDSHAKE_READY THEN (* FAS IS NOT READY *) 

FAS_ERROR_CODE := FAS_ERROR_CODE + 1 

ELSE 

(* FAS IS READY SO SEND DATA NOW *) 

BEGIN 

Write_Data_Byte_To_FAS (DATA_TO_FAS ) ; 

(* SENDS DATE BYTE TO FAS AND 
SETS HANDSHAKE BIT#1 (Dl=l) 
ADDRESS 105H TO TRUE *) 


(* AND BIT MASK *) 
( *D1=0 , FAS IS READY*) 
( * CLEAR FAS INPUT*) 

(* TEST RESULTS *) 


END; 


(* WAIT FOR FAS TO ACCEPT DATA *) 
FAS_Handshake_Test ( HAND S H AKE_MAS K , 

EXPECTED_BYTE_VALUE , 
HANDSHAKEJREADY ) ; 

(* CHECK IF FAS HAS ACCEPTED DATA *) 

IF NOT HANDSHAKE_READY THEN 
BEGIN 

FAS_ERROR_CODE := FAS_ERROR_CODE + 2; 
Write_Data_Byte_To_FAS ( ZEROS ) ; 

END ; 

END; 


B-16 


(* Miletus Associates, Inc. STD to PAS Unit Procedures *) 

(************** SENDS A STRING OF DATA TO THE FAS *********) 
PROCEDURE Send_String_To_FAS (VAR 

FAS_ERROR_CODE : BYTE ; 

VAR 

STRING_TO_FAS : STRING_2 9 ) ; 

VAR 

COUNTER : BYTE ; 

BYTE VALUE OF STRING : BYTE; 


BEGIN 

COUNTER := 1; 

WHILE (COUNTER <= LENGTH ( STRING_TO_FAS ) ) 

AND 

NOT A_FAS_ERROR_OCCURED(FAS_ERROR_CODE) DO 

BEGIN 

BYTE_VALUE_OF_STRING := ORD( 

STRING_TO_FAS [ COUNTER] ) ; 
Send_Byte_To_FAS ( FAS_ERROR_CODE , 

BYTE_VALUE_OF_STRING ) ; 

COUNTER := COUNTER +1; 

END; 

END; 


B-17 


(* Miletus Associates, Inc. 


STD to FAS Unit Procedures * ) 


(*************** get A DATA BYTE FROM THE FAS *************) 
PROCEDURE Get_Byte_From_FAS (VAR 



FAS ERROR CODE 

: BYTE; 


CONST 

VAR 

DATA_READ 


: BYTE ); 


HANDSHAKE MASK 

j BYTE = $01; 

(* 

00000001 Do 

*) 

EXPECTED BYTE VALUE 

: BYTE = $01; 

(* 

WANT Do=l 

*) 

FAS ADDRESS 

VAR 

HANDSHAKE READY 

: INTEGER^ $100 ; 
: BOOLEAN; 

(* 

FAS DATA OUT 

*) 


BEGIN 

(* DOES THE FAS HAVE DATA READY TO SEND *) 
HANDSHAKE_READY := FALSE; 

FAS_Hand s hake_Te s t ( HANDSHAKE_MASK , 

EXPECTED_BYTE_VALUE , 

HANDSHAKE_READY) ; 

IF NOT HAND S H AKE_RE AD Y THEN 

FAS_ERROR CODE := FAS_ERROR_CODE + 4; 

IF NOT a_fas_error_occuredTfas_error_code) THEN 

(* FAS NOW HAS DATA READY *) 
Get_FAS_Hardware_Data ( FAS_ADDRESS , 

DATA_READ ) ; 

(* WILL SET Do=0 AT 105H *) 

END; 


B-18 



(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


******* 4< i FAS CPU CAMERA TRIGGER ENABLE/DISABLE *******) 

PROCEDURE Set__FAS_Camera_Trigger_Control (VAR 

FAS_ERROR_CODE : BYTE; 

FAS_TRIGGER_ENABLE : BOOLEAN) 
(* Plus the Global: FAS_TRIGGER_ENABLE_SAVE : BOOLEAN 

CONST 

NORMAL CONTROL BYTE : BYTE = $09; (* 00001001 *) 


BEGIN 


FAS_ERROR_CODE := 010; 

FAS_TRIGGER_ENABLE_SAVE := FAS_TRIGGER_ENABLE; 
Set_FAS_Control_Bits (NORMAL_CONTROL_BYTE ) ; 

END; 


B-19 


31 * 


(* Miletus Associates, Inc. 


STD to FAS Unit Procedures * ) 


(* Calling this procedure will cause the FAS to *) 

(* override software and trigger the camera. *) 

(****** 4.2 STD CPU CAMERA TRIGGER COMMAND **************) 
PROCEDURE STD_CPU_Tr igger_Camera_Command ( VAR 

FAS_ERROR_CODE : BYTE ) ; 

CONST 

NORMAL_CONTROL_BYTE : BYTE = $09; (* 00001001 *) 

TRI GGER_B YTE ; BYTE = $0D; (* 00001101 *) 

BEGIN 

FAS_ERROR_CODE ;= 020; 

Set_FAS_Control_Bits (TRIGGER_BYTE ) ; 

DELAY (20); (* PULSE WIDTH IS 20 mS *) 

Set_FAS_Control_Bits ( NORMAL_CONTROL_BYTE ) ; 

DELAY ( 20 ) ; ( * BETWEEN PULSES * ) 

Set_FAS_Control_Bits ( TRIGGER_BYTE ) ; 

DELAY (20); (* PULSE WIDTH IS 20 mS *) 

Set_FAS_Control_Bits ( NORMAL_CONTROL_BYTE ) ; 

END; 


B-20 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* This procedure will reset the FAS CPU. The user *) 

(* must be aware that the FAS annotation mode now equals *) 
(* 1 B 1 and that the FAS camera trigger is enabled. *) 

(****** 4^3 FAS CPU RESET COMMAND ***********************) 

PROCEDURE FAS_CPU_Reset_Command ( VAR 

FAS_ERROR_CODE : BYTE ) ? 

CONST 

NORMAL_CONTROL_BYTE : BYTE = $09? (* 00001001 *) 

RESET_CPU_BYTE : BYTE = $08? (* 00001000 *) 

BEGIN 

(* The FAS is RESET first *) 

FAS_ERROR_CODE := 030? 

Set_FAS_Control_Bits (RESET_CPU_BYTE ) ? 

DELAY (10)? (* PULSE WIDTH IS 10 mS *) 

Set_FAS_Control_Bits (NORMAL_CONTROL_BYTE ) ? 

(* then the FAS is power up reset. *) 

FAS POWER UP (FAS ERROR CODE)? 


END? 


B-21 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The hardware frame counter is read from the FAS *) 

(* card and the value is returned in the variable *) 

( * FAS_HARDWARE_FRAME_COUNTER * ) 

(****** 4,4 READ HARDWARE FRAME COUNTER *****************) 
PROCEDURE Read_Hardware_Frame_Counter (VAR 

FAS_ERROR_CODE , 

FAS_HARDWARE_FRAME_COUNTER : BYTE ) ; 

CONST 

FAS_FRAME_COUNTER_ADDRESS : INTEGER = $107; 

BEGIN 

FAS_ERROR_CODE := 040; 

Get_FAS_Hardware_Data ( FAS_FRAME_COUNTER_ADDRESS , 

FAS HARDWARE FRAME COUNTER ) ; 


END; 


B-22 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* Calling this procedure cause the hardware frame *) 

(* counter to be reset *) 

(****** 4.5 RESET HARDWARE FRAME COUNTER ****************) 
PROCEDURE Reset_Hardware_Frame_Counter (VAR 

FAS_ERROR_CODE : BYTE); 

CONST 

NORMAL_CONTROL_BYTE : BYTE = $09; (* 00001001 *) 

RESET_FRAME_COUNT_BYTE : BYTE = $0B; (* 00001011 *) 

VAR 

RESET_SOFTWARE_FRAME_CODE : BYTE ; 

BEGIN 

F AS_ERROR_CODE : = 050; 

Set_FAS_Control_Bits ( RESET_FRAME_COUNT_BYTE ) ; 

DELAY (10); (*PULSE WIDTH IS 10 mS *) 

Set_FAS_Control_Bits ( NORMAL_CONTROL_BYTE ) ; 

RESET_SOFTWARE_FRAME_CODE : =ORD ( ~W ) ; 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

“ RESET_SOFTWARE FRAME CODE ) ; 


END; 


B-23 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The user's program will set the variable *) 

( * NEW_FAS_ANNOTATION_MODE and call this procedure which * ) 
(* will verify that the mode is A, B, or C and update the *) 
{ * FAS . * ) 

(****** 4.6 SET FAS ANNOTATION MODE *********************) 
PROCEDURE Set_FAS_Annotation_Mode (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

NEW_FAS_ANNOTAT I ON_MODE : CHAR); 

VAR 

SET_ANNOTATION_CODE : BYTE; 

BYTE_VALUE_OF_MODE : BYTE; 

BEGIN 

FAS_ERROR_CODE := 060; 

(* VERIFY MODE IS A, B, OR C * ) 

IF NEW_FAS_ANNOTATION_MODE IN [ ’ A' , ' B ' , ’ C ' ] THEN 
BEGIN 

SET_ANNOTATION_CODE : = ORD ( ~M) ; 

S end_By t e_To_F A S ( FAS_ERROR_CODE , 

SET_ANNOTATION_CODE) ; 

IF NOT A_FAS_ERROR_OCCURED(FAS_ERROR_CODE) THEN 
BEGIN 

BYTE_VALUE_OF_MODE := 

ORD ( NEW_FAS_ANNOTATION_MODE ) ; 
Send_Byte_To_FAS ( FAS_ERROR_CODE , 

BYTE_VALUE_OF_MODE ) ; 

END; 

END 

ELSE 

FAS_ERROR CODE := 066; 


END; 


B-24 



I (* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(****** 4.7 GET LAST PHOTO "X" SWITCH DATA **************) 
PROCEDURE Get_Last_Photo_Data (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

LAST_PHOTO_X_SWITCH_DATA : STRING_28 ) ; 

VAR 

GET_TIME_CODE : BYTE ; 

I DATA_READ : BYTE; 

! COUNTER : BYTE; 

1 LAST_DATA : STRING_28; 

BEGIN 

FAS_ERROR_CODE := 070; 

GET_TIME_CODE := ORD ( ~N ) ; 

IF NOT FAS_Is_Already_Sending_Data(FAS_ERROR_CODE) 

THEN 

BEGIN 

S e nd_By t e_To_FAS ( FAS_ERROR_CODE , 

GET_TIME_CODE ) ; 

IF NOT A_FAS_Error_Occured(FAS_ERROR_CODE) THEN 
BEGIN 

COUNTER : = 0 ; 

LAST_DATA ;= ' ' ; 

REPEAT 
BEGIN 

COUNTER := COUNTER + 1; 

Get_By te_From_FAS ( FAS_ERROR_CODE , 

DATA_READ ) ; 

IF NOT A_FAS_Error_Occured ( FAS_ERROR_CODE ) 
THEN LAST_DATA[ COUNTER] := CHAR ( DATA_READ ) ; 
END ; 

f UNTIL (COUNTER >= 28) 

OR 

A_FAS_Error_Occured ( FAS_ERROR_CODE ) ; 

END; 

END; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

LAST_PHOTO_X_SWITCH_DATA := LAST_DATA ; 

END; 


B-25 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* A text string, TEXT_TO_FAS, is sent to the FAS *) 

(* unless the text string contains undefined characters *) 
(* outside the range of 20h to 5Ah, ' ' TO ' Z'. 

(****** 4.8 SEND ANNOTATION TEXT TO FAS *****************) 
PROCEDURE Send_Text_To_FAS (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

TEXT_TO_FAS : STRING_28 ) ; 

VAR 

COUNTER : BYTE ? 

STRING_TO_FAS : STRING_29; 

BEGIN 

FAS_ERROR_CODE := 080; 

COUNTER : = 0 ; 

REPEAT 

COUNTER := COUNTER + 1; 

IF ( ( TEXT_TO_FAS [ COUNTER ] ) < • ' ) 

OR 

( ( TEXT_TO_FAS[ COUNTER ] ) > 'Z' ) 

THEN 

FAS_ERROR_CODE := 086; 

UNTIL ( COUNTER >= LENGTH ( TEXT_TO_FAS ) ) 

OR 

A_FAS_E R ROR_OCCURED ( FAS_ERROR_CODE ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

BEGIN 

STRING_TO_FAS := ~0 + TEXT_TO_FAS + 

• t . 

(* WILL SEND CONTROL CODE *) 
(* FOLLOWED BY THE TEXT THEN*) 

(* PAD WITH SPACES TO *) 

(* MAKE STRING_TO_FAS *) 

(* EXACTLY 29 CHARACTERS *) 

Send_String_To_FAS ( FAS_ERROR_CODE , 

STRING_TO_FAS ) ; 

END; 

END; 


B-26 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 




I 


i 


(* The variable NEW_GMT which is set by the user's *) 

(* program is error checked and sent to the FAS. *) 


(****** 4 _ 9 SET GMT *************************************) 
PROCEDURE Se t_GMT ( VAR 

FAS_ERROR_CODE : BYTE; 

VAR 


VAR 


NEW GMT 


STRING_TO_FAS 

BINARY_VALUE 

COUNTER 

TENS 

UNITS 

ADAPTED_NEW_GMT 
TENS_DIGIT 
UNITS_DIGIT 
DECIMAL VALUE 


STRING_29 ; 
BYTE; 

BYTE; 

BYTE; 

BYTE; 

STRING_1 0 ; 
BYTE; 

BYTE; 

BYTE; 


: STRING_9 ) ; 

(* DHHMMSSSS *) 


BEGIN 

FAS_ERROR_CODE := 090; 

STRING TO FAS := ~P + ' 


(* CONVERT ' 0D' , 'HH', 'MM', 'SS', AND 'SS' TO BINARY *) 

(* AND MOVE INTO STRING_TO_FAS POSITION; UPON ERROR, *) 
(* SET FAS_ERROR_CODE AND EXIT. *) 

ADAPTED_NEW_GMT := 'O' + NEW_GMT; 

COUNTER := 1; 

REPEAT 

BEGIN 

COUNTER := COUNTER + 1; ( *NEXT BYTE *) 

TENS := COUNTER * 2 - 3; 

UNITS := COUNTER * 2 - 2; 

TENS_DIGIT := BYTE ( ADAPTED_NEW_GMT [ TENS ] ) 

- $30; 

UNITS_DIGIT : = BYTE ( ADAPTED_NEW_GMT [ UNITS ] ) 

- $30; 

IF (TENS_DIGIT > 9) OR (UNITS_DIGIT >9) 

THEN 

FAS_ERROR_CODE := 095 

ELSE 

BEGIN 

DECIMAL VALUE := TENS DIGIT * 10 


+ UNITS_DIGIT ; 

CASE COUNTER OF 

3 ; IF DECIMAL_VALUE >23 THEN 

FAS_ERROR_CODE := 095; 

4 : IF DECIMAL_VALUE >59 THEN 

FAS_ERROR_CODE := 095; 

5 : IF DECIMALJVALUE >59 THEN 

FAS_ERROR_CODE := 095; 

END; 

B-27 


(* Miletus Associates, Inc. 


STD to FAS Unit Procedures * ) 


END; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 
THEN 

STRING_TO_FAS [ COUNTER ] : = 

CHAR ( TENS_DIGIT * 10 + UNITS_DIGIT ) ; 

END; 

UNTIL (COUNTER >= 6 ) OR ( FAS_ERROR_CODE = 095); 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

Send_String_To_FAS ( FAS_ERROR_CODE , 

STRING TO FAS ) ; 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

( * This procedure starts the GMT clock running * ) 

(****** 4.10 "GO" COMMAND TO START THE CLOCK *************) 
PROCEDURE Start_FAS_Clock (VAR 

FAS_ERROR_CODE : BYTE ) ; 

VAR 

START_CLOCK_CODE : BYTE; 

BEGIN 

FAS_ERROR_CODE := 100; 

START_CLOCK_CODE : = ORD ( *G ) ; 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

START CLOCK CODE ) ; 


END; 


B-29 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The two variables, NUMBER_OF_PHOTOS_TO_TAKE and *) 
( * INTERVAL_BETWEEN_PHOTOS , set by the user ' s program are * ) 
(* error check and sent to the FAS. *) 


(****** 4.11 SET INTERVALOMETER PARAMETERS ***************) 
PROCEDURE Set Intervalometer (VAR 



FAS ERROR CODE 


; BYTE; 


VAR 




NUMBER OF PHOTOS 

_TO_TAKE 

: BYTE; 


VAR 




INTERVAL_BETWEEN_ 

_PHOTOS 

: INTEGER) 

VAR 




SEND INTER CODE 

: BYTE; 



HIGH BYTE 

; BYTE; 



LOW_BYTE 

: BYTE; 



BEGIN 




FAS ERROR CODE 

;= 110 ; 



SEND INTER CODE 

:= ORDTQ); 




IF ( NUMBER_OF_PHOTOS_TO_TAKE > 250) 
OR 


(NUMBER_OF_PHOTOS_TO_TAKE < 1 ) 

OR 

( INTERVAL_BETWEEN_PHOTOS > 14400) 

OR 

( INTERVAL_BETWEEN_PHOTOS < 1) 

THEN 

FAS_ERROR_CODE := 115; 

HIGH_BYTE : = BYTE ( HI ( INTERVAL_BETWEEN_PHOTOS ) ) ; 

LOW_BYTE ; = BYTE ( INTERVAL_BETWEEN_PHOTOS ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

SEND_INTER_CODE ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

Send_By te_To_FAS ( FAS_ERROR_CODE , 

NUMBER_OF_PHOTOS_TO_TAKE ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

HIGH_BYTE ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

Send_By te_To_FAS ( FAS_ERROR_CODE , 

LOW BYTE ) ; 


END; 


B-30 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The FAS will begin taking automatic pictures *) 

(****** 4.12 "GO" COMMAND TO START A PHOTO SEQUENCE*******) 
PROCEDURE Start_Photo_Sequence ( VAR 

FAS_ERROR_CODE : BYTE ) ; 

VAR 

START_PHOTO_SEQUENCE_CODE : BYTE; 

BEGIN 

FAS_ERROR_CODE := 120; 

START_PHOTO_SEQUENCE_CODE := ORD(~R); 

S e nd_By t e_To_F A S ( FAS_ERROR_CODE , 

START_PHOTO_SEQUENCE_CODE ) ; 

END; 


B-31 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The status of the FAS is returned in the variable *) 

(* named FAS_STATUS_CODE . *) 

(****** 4.13 pas STATUS CODE TO STD **********************) 
PROCEDURE Get_FAS_Status (VAR 

FAS_ERROR_CODE , 

FAS_STATUS_CODE : BYTE ) ; 

CONST 

FAS_STATUS_CODE_ADDRESS : INTEGER = $104; 

BEGIN 

FAS_ERROR_CODE := 130; 

Get_FAS_Hardware_Data ( FAS_STATUS_CODE_ADDRESS , 

FAS_STATUS_CODE ) ; 

END; 


B-32 


(* Miletus Associates, Inc. 


STD to FAS Unit Procedures * ) 


(* This procedure will stop automatic pictures *) 

(****** 4.14 CANCEL CURRENT PHOTO SEQUENCE ***************) 
PROCEDURE Cancel_Photo_Sequence (VAR 

FAS_ERROR_CODE : BYTE ) ; 

VAR 

CANCEL_PHOTO_SEQUENCE_CODE : BYTE ; 

BEGIN 

FAS_ERROR_CODE := 140; 

CANCEL_PHOTO_SEQUENCE_CODE : = ORD ( " S ) ; 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

CANCEL PHOTO SEQUENCE CODE ) ; 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


(* The TRUE value of boolean variable *) 

(* INTERVAL_PRE_WARNING_FLAG indicates when a picture is *) 
(* about to occur. *) 

(****** 4 # i5 INTERVAL PRE-WARNING FLAG *******************) 
PROCEDURE Get_Photo_Pre_Warning_Flag (VAR 

FAS_ERROR_CODE : BYTE ; 

VAR 

I NTERVAL_PRE_WARN I NG_FLAG : BOOLEAN ) ; 

CONST 

FAS_PRE_WARNING_ADDRESS : INTEGER = $103; 

VAR 

PRE_WARNING_DATA_BYTE : BYTE ; 

BEGIN 

FAS_ERROR_CODE := 150; 

Get_FAS_Hardware_Data ( FAS_PRE_WARNING_ADDRESS , 

PRE_WARNING_DATA_BYTE) ; 

I NTERVAL_PRE_WARNI NG_FLAG := 

( PRE_WARNING_DATA_BYTE AND $01) = $01; 

END; 


B-34 



! (* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

I 

I ( * The TRUE value the variable * ) 

(* PHOTO_CONFIRMATION_FLAG indicated that a photo was *) 
(* taken. *) 

(****** 4.16 PHOTO CONFIRMATION TO STD *******************) 
PROCEDURE Get_Photo_Conf irmation_Flag ( VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

1 PHOTO_CONFIRMATION_FLAG : BOOLEAN); 

CONST 

FAS_PRE_WARNING_ADDRESS : INTEGER = $102; 

VAR 

! PHOTO CONF DATA BYTE : BYTE; 


BEGIN 

FAS_ERROR_CODE ;= 160; 

Get_FAS_Hardware_Data ( FAS_PRE_WARNING_ADDRESS , 

PHOTO_CONF_DATA_BYTE ) ; 

PHOTO_CONFIRMATION_FLAG := 

( PHOTO_CONF DATA BYTE AND $01) = $01; 


END; 


i 


B-35 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The NUMBER_OF_PHOTOS_TAKEN sofar is reported *) 

(****** 4.17 PHOTO COUNT IN THIS SEQUENCE ****************) 
PROCEDURE Get_Photo_Count (VAR 

FAS_ERROR_CODE : BYTE ; 

VAR 

NUMBER_OF_PHOTOS_TAKEN : BYTE ) ; 

VAR 

PHOTO_COUNT_CODE : BYTE ; 

DATA_READ : BYTE ; 

BEGIN 

FAS_ERROR_CODE := 170; 

PHOTO_COUNT_CODE ; = ORD ( A X ) ; 

IF NOT FAS_Is_Already_Sending_Data(FAS_ERROR_CODE) 

THEN 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

PHOTO_COUNT_CODE ) ; 

IF NOT A_FAS_Error_Occured ( FAS_ERROR_CODE ) 

THEN 

Get_Byte_From_FAS ( FAS_ERROR_CODE , 

DATA_READ ) ; 

IF NOT A_FAS_Error_Occured(FAS_ERROR_CODE) 

THEN 

NUMBER_OF_PHOTOS_TAKEN := DATA_READ; 

END; 


B-36 



(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* Four bytes, FFh, OOh, AAh, and 55h, are sent to *) 

(* the FAS and echoed back first on the status byte then *) 
(* on the data byte read addresses. Any failure causes *) 
(* an error reported by FAS_ERROR_CODE . *) 

(****** 4 .I 8 PERFORM FAS COMMUNICATION PORT TEST *********) 
PROCEDURE Perforin FAS Communication__Test (VAR FAS_ERROR_CODE 

“ ~ : BYTE ) ; 


CONST 

FAS_STATUS_ADDRESS 

VAR 

COMMUNI C AT I ON_TE ST_CODE 

TEST_CASES 

TEST_CHAR 

COUNTER 

FAS_STATUS_CODE 
DATA READ 


: INTEGER = $104; 

: BYTE; 

: STRING_4 ; 

; BYTE; 

: BYTE; 

; BYTE; 

: BYTE; 


BEGIN 

FAS_ERROR_CODE := 180; 

COMMUNICATION_TEST_CODE : = ORD ( " Y ) ; 

S e nd_By t e_To_F AS ( FAS_ERROR_CODE , 

COMMUNICATION_TEST_CODE) ; 

(* BEGIN SENDING TEST PATTERNS *) 

TEST_CASES := CHAR( $FF )+CHAR( $00 )+CHAR( $AA) +CHAR( $55 ) ; 
COUNTER := 0 ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 

THEN 

REPEAT 

COUNTER := COUNTER + 1; 

TEST_CHAR := BYTE (TEST_CASES[ COUNTER] ) ; 
Send_By te_To_FAS ( FAS_ERROR_CODE , 

TEST_CHAR); 

IF NOT A_FAS_ERROR_OCCURED { FAS_ERROR_CODE ) 
THEN 

BEGIN 

DELAY (100); (* WAIT FOR FAS *) 

Get_FAS_Hardware_Data ( 

FAS_STATUS_ADDRESS , 
FAS__STATUS_CODE ) ; 

IF ( (TEST_CHAR AND $DF ) <> 

( FAS_STATUS_CODE AND $DF ) ) 

THEN 

FAS_ERROR_CODE :=187 
ELSE BEGIN 

Get_By te_Fr om_FAS ( FAS_ERROR_CODE , 
“ DATA_READ ) ; 

IF NOT A_FAS_ERROR_OCCURED ( 

FAS_ERROR_CODE ) 

AND 

(TEST CHAR <> DATA READ) 


B-37 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


THEN 

FAS_ERROR_CODE := 188 

END; 

END; 

UNTIL 

(COUNTER >= 4) 

OR 

A_FAS_E RR0R _ 0CCUR ED ( FAS_E RR 0 R _C0DE ) ; 

END; 


B-38 



(* Miletus Associates, Inc. 


STD to FAS Unit Procedures *) 


(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 

(* 


This procedure causes the FAS to perform the test *) 
specified by the FAS_HARDWARE_TEST variable set by the *) 
user's program: *) 

FAS_HARDWARE_TEST value TEST PREFORMED *) 

A All tests *) 

C CPU self check only * ) 

E EPROM check sum verify * ) 

R RAM tested *) 

*) 

The FAS_HARDWARE_TEST_FLAG returns a true value *) 
when the hardware test is finished. The results of *) 

these tests are available from the status byte reported*) 
by procedure FAS413. *) 

IF the FA S_HARDWARE__TE S T_F LAG returns a false value *) 
then the FAS_ERROR_CODE must be examined to determine *) 
where the test failed. *) 


(****** 4.19 PERFORM FAS HARDWARE SELF TEST **************) 
PROCEDURE Perf orm_FAS_Hardware_Test (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

FAS_HARDWARE_TEST : CHAR; 

VAR 

FA S_HARDWARE_TE S T_F LAG : BOOLEAN); 

VAR 

SELF_TEST_CODE : BYTE; 

BYTE_VALUE_OF_TEST : BYTE ; 

DATA READ : BYTE; 


BEGIN 

FAS_ERROR_CODE := 190; 

FAS_HARDWARE_TEST_FLAG := FALSE; 

SELF TEST CODE := ORD(~T); 


(* VERIFY TEST IS A, C, E,OR R *) 

IF FAS_HARDWARE_TE ST IN [ ' A ' , ' C ' , ' E ' , ' R ' ] 

THEN 

BEGIN 

IF NOT FAS_Is_Already_Sending_Data(FAS_ERROR_CODE) 
THEN 

Send_By te_To_FAS ( FAS_ERROR_CODE , 

SELF_TEST_CODE ) ; 

IF NOT A_FAS_ERROR_OCCURED(FAS_ERROR_CODE) 

THEN 

BEGIN 

BYTE_VALUE_OF_TEST : = 

ORD ( FAS_HARDWARE_TEST ) ; 
Send_Byte_To_FAS ( FAS_ERROR_CODE , 

BYTE_VALUE_OF_TEST ) ; 

IF NOT A_FAS_ERROR_OCCURED ( FAS_ERROR_CODE ) 
THEN 

Get_Byte_From_FAS ( FAS_ERROR_CODE , 

B-39 


(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


END; 


DATA_READ ) ; 

IF NOT A_FAS_Error_Occured ( FAS_ERROR_CODE ) 
THEN 

FAS_HARDWARE_TEST_FLAG := TRUE; 

END; 

END 

ELSE 

FAS ERROR CODE := 196; 


B-40 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* This procedure sets the variable *) 

( * REPORTED_ANNOTATION_MODE to the current FAS 1 s value * ) 

(****** 4.20 REPORT ANNOTATION MODE TO STD ***************) 
PROCEDURE Report_Annotation_Mode (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

REPORTED ANNOTATION MODE : CHAR); 
VAR ” ” 

REPORT_MODE_CODE ; BYTE; 

DATAJREAD : BYTE; 

BEGIN 

FAS_ERROR_CODE ; = 200; 

REPORT_MODE_CODE := ORD("U); 

IF NOT FAS_Is_Already_Sending Data (FAS ERROR CODE) 

THEN “ ” “ 

Send_By te_To_FAS ( FAS_ERROR_CODE , 

REPORT_MODE_CODE ) ; 

IF NOT A_FAS_Error_Occured ( FAS_ERROR CODE ) 

THEN 

Get_By te_From_FAS ( FAS_ERROR_CODE , 

DATA_READ ) ; 

IF NOT A_FAS_Error_Occured ( FAS_ERROR CODE ) 

THEN 

REPORTED_ANNOTATI ON_MODE : = CHAR ( DATA_READ ) ; 

END; 


B-41 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The time (in intervals of 1/4 seconds) before the *) 

(* next automatic photo is reported in the variable *) 

(* named REPORTED_TIME_TO_NEXT_PHOTO . *) 

(****** 4.21 REPORT TIME LEFT TO NEXT SCHEDULED PHOTO ****) 
PROCEDURE Report_Time_To_Next_Photo (VAR 

FAS_ERROR_CODE : BYTE; 

VAR 

REPORTED_TIME_TO_NEXT_PHOTO : INTEGER); 

VAR 

TIME_LEFT_CODE : BYTE ; 

HIGH_BYTE : BYTE; 

LOW_BYTE : BYTE; 

BEGIN 

FAS_ERROR_CODE := 210; 

TIME_LEFT_CODE : = ORD ( "V ) ; 

IF NOT FAS_Is_Already_Sending_Data(FAS_ERROR_CODE) 

THEN 

Send_Byte_To_FAS ( FAS_ERROR_CODE , 

TIME_LEFT_CODE ) ; 

IF NOT A_FAS_Error_Occured(FAS_ERROR_CODE) 

THEN 

Get_By te_Fr om_FAS ( FAS_ERROR_CODE , 

HIGH_BYTE ) ; 

IF NOT A_FAS_Error_Occured (FAS_ERROR_CODE) 

THEN 

Get_By te_From_FAS ( FAS_ERROR_CODE , 

LOW_BYTE ) ; 

IF NOT A_FAS_Error_Occured(FAS_ERROR_CODE) 

THEN 

REPORTED_TIME_TO_NEXT_PHOTO : = 

HIGH_BYTE * 256 + LOW_BYTE ; 

END; 


B-42 



(* Miletus Associates, Inc 


STD to FAS Unit Procedures * ) 


(*******4.22 Load the FAS software frame counter *********) 

PROCEDURE Load_the_FAS_sof tware_f rame_count ( VAR 

FAS_ERROR_CODE , 
NEW_FRAME_COUNT 
: BYTE ) ; 

VAR 

STRING TO FAS : STRING 29; 


BEGIN 

FAS_ERROR_CODE := 220; 

IF (NEW_FRAME_COUNT >= 0 ) 

AND 

(NEW_FRAME_COUNT <= 250 ) THEN 
BEGIN 

STRING_TO_FAS := ~H + CHAR ( NEW_FRAME_COUNT ) ; 
Send_String_to_FAS ( FAS_ERROR_CODE , 

STRING_TO_FAS ) ; 

END 

ELSE 

FAS_ERROR_CODE := 225; 

END; 


B-43 


(* Miletus Associates, Inc. STD to FAS Unit Procedures *) 

(* The FAS clock calibration procedure should be *) 

( * commented out after testing is completed so that no *) 
(* accidental call will cause problems. *) 

(*********** pAS CLOCK CALIBRATION **********************) 
PROCEDURE FAS_Clock_Calibration (VAR 

FAS_ERROR_CODE : BYTE ) ; 

VAR 

CALIBRATE_CODE : BYTE? 

DELAY_COUNTER : INTEGER; 

BEGIN 

FAS_ERROR_CODE : = 250; 

(* expand this comment to then END after testing *) 

CALIBRATE_CODE : = ORD ('I); 

Send_By te_To_FAS ( FAS_ERROR_CODE , 

CALIBRATE_CODE) ; 

DELAY_COUNTER : = 0 ; 

REPEAT 

DELAY (10); (* WAIT lOmS *) 

IF KEYPRESSED 
THEN 

DELAY_COUNTER := 18001 

ELSE 

DELAY_COUNTER := DELAY_COUNTER + 1? 

UNTIL 

( DELAY_COUNTER > 18000 ); 

FAS_CPU_Re s e t_Command ( FAS_ERROR_CODE ) ; 

(* Place closing comment marker here after testing. *) 


END? 

END. 


B-44 


FAS Testing PROCEDURES *) 


(* Miletus Associates, Inc. 

{$R-} {Range checking off} 

{$B+} {Boolean complete evaluation on} 

{$S+} {Stack checking on} 

{$1+} {I/O checking on} 

{ $N- } {No numeric coprocessor} 

{ $M 65500,16384,655360} {Turbo 3 default stack and heap} 

(*********************************************************) 

(*********************************************************) 


(*** ***) 

(*** FAS AND STD TEST PROCEDURES ***) 

(*** REVISION 2.0 ***) 

(*** ***) 

(*** BY: TOM CAVALLI ***) 

(*** JUNE 1988 ***) 

(*** LAST MODIFIED: 13 MARCH 1989 ***) 

(*** FILENAME: FASTEST. TP5 ***) 

( *** *** ) 

(*** ***) 

(*** 13 MARCH 89: CHANGED INITVAR TO SHOW POWERUP ***) 

(*** FAS_TRIGGER_ENABLE := TRUE ***) 

(*** ***) 

(*** 13 MARCH 89: CHANGED NUMBER_OF_PHOTOS_TO_TAKE ***) 

(*** TO BE ONLY A BYTE TYPE VARIABLE ***) 


PROGRAM FASTEST; 

Uses Crt , FASSTD20 ; 


B-45 


(* Miletus Associates, Inc 


FAS Testing PROCEDURES *) 


(********* SUGGESTED FAS PASCAL TYPE DECLARATIONS***********) 
(*** All type declarations are defined in ***) 

(*** the unit FASSTD20 . ***) 


(***** SUGGESTED FAS PASCAL GLOBAL VARIABLE DECLARATION*****) 
(*** THE FOLLOWING PASCAL PROCEDURES REQUIRE **) 


(*** PARAMETERS THAT EITHER CHANGE THE FAS OR **) 
(*** RETURN THE REQUESTED VALUE. **) 
(*** THE IDENTIFIERS LISTED HERE MAY BE USED AS **) 
(*** THE PARAMETERS FOR THOSE PROCEDURE CALLS. **) 


VAR 


(*** Of course these variables can be defined **) 
(*** and used as local variables. They have been **) 
(*** listed here for reference. **) 


FAS_ERROR_CODE 

FAS_ERROR_NUMBER 

FAS_ERROR_CALLER 

FAS_TRIGGER_ENABLE 

FAS_HARDWARE_FRAME_COUNTER 

NEW_FAS_ANNOTATION_MODE 

LAST_PHOTO_X_SWITCH_DATA 

TEXT_TO_FAS 

NEW_GMT 

NUMBER_OF_PHOTOS_TO_TAKE 

INTERVAL_BETWEEN_PHOTOS 

FAS_STATUS_CODE 

INTERVAL_PRE_WARNING_FLAG 

PHOTO_CONFIRMATION_FLAG 

NUMBER_OF_PHOTOS_TAKEN 

NEW_FRAME_COUNT 

FAS_HARDWARE_TEST 

FAS_HARDWARE_TEST_FLAG 

REPORTED_ANNOTATION_MODE 

REPORTED TIME TO NEXT PHOTO 


BYTE; 

( * WHO * ) 
(♦DEFINES* ) 
( *FAS * ) 

BYTE; 

( *FAS 

*) 

BYTE; 

( *FAS 

*) 

BOOLEAN; 

(* 

STD* ) 

BYTE; 

( *FAS 

*) 

CHAR; 

(* 

STD*) 

STRING 28; 

( *FAS 

*) 

STRING 28; 

(* 

STD*) 

STRING 9; 

(* 

STD* ) 

BYTE; 

(* 

STD*) 

INTEGER; 

(* 

STD*) 

BYTE; 

( *FAS 

*) 

BOOLEAN; 

( *FAS 

*) 

BOOLEAN; 

( *FAS 

*) 

BYTE; 

( *FAS 

*) 

BYTE ; 

(* 

STD*) 

CHAR; 

(* 

STD* ) 

BOOLEAN; 

( *FAS 

*) 

CHAR; 

( *FAS 

*) 

INTEGER; 

( *FAS 

*) 


(********* *fastest 

KEY : 
MENUKEY : 
DYNAMIC : 


TURBO PASCAL DECLARATIONS***************) 
CHAR; (* ONE KEYBOARD CHAR *) 
CHAR; (* MENU SELECTION *) 
BOOLEAN; (* CONTINOUS STATUS CHECK *) 


B-46 



(* Miletus Associates, Inc. 


FAS Testing PROCEDURES *) 


(*************** CLEAR AND PAINT SCREEN***************) 
PROCEDURE PAINTSCREEN; 

BEGIN 

CLRSCR; 

WRITELNC MILETUS ASSOCIATES, INC. ', 


FAS 


WRITELN ( 'A 

4.1 

WRITELN ( 'B 

4.2 

WRITELN ( ' C 

4.3 

WRITELN ( 'D 

4.4 

WRITELN ( 'E 

4.5 

'W 

4.22 

WRITELN ( 'F 

4.6 

WRITELN ( ' G 

4.7 

WRITELN ( ' H 

4.8 

WRITELN ( ' I 

4.9 

WRITELN ( ' J 

4.10 

WRITELN ( 'K 

4.11 

' 000 PHO' 

WRITELN ( 'L 

4.12 

WRITELN ( 'M 

4.13 

' MODE « 

WRITELN ( ' N 

4.14 

WRITELN ( 'O 

4.15 

WRITELN ( ' P 

4.16 

WRITELN ( ' Q 

4.17 

WRITELN ( 'R 

4.18 

' TEST ' ) ; 

WRITELN ( ' S 

4.19 

WRITELN ( 'T 

4.20 

WRITELN ( 'U 

4.21 

' SCHEDUL1 

WRITELN ( ' 

LAST 




’ ); 

) ; 


TO STD TEST PROGRAM ' ) ; 

FAS CPU CAMERA TRIGGER ENABLED = 
STD CPU CAMERA TRIGGER COMMAND ' ) 

FAS CPU RESET COMMAND ' ) ; 

READ HARDWARE FRAME COUNTER ■ ' ) ; 
RESET HARDWARE FRAME COUNTER 
LOAD FRAME COUNT = • ) ; 

SET FAS ANNOTATION MODE =')? 

SEND LAST PHOTO "X" SWITCH 
SEND TEXT TO FAS = ' 

SET GMT = ' ) ; 

START CLOCK ' ) ; 

SET INTERVALOMETER PARAMETERS.', 

?OS AT 00000 INTERVALS'); 

START PHOTO SEQUENCE ' ) ; 

FAS STATUS CODE TO STD:', 

, RESET = , CARD = , CAMERA = '); 

CANCEL CURRENT PHOTO SEQUENCE ' ) ? 
INTERVAL PRE-WARNING FLAG = ' ) 

PHOTO CONFIRMATION TO STD =') 

PHOTO COUNT THIS SEQUENCE =' ) 
PERFORM FAS COMMUNICATION PORT 1 


REQUEST FAS HARDWARE SELF TEST = 
REPORT ANNOTATION MODE TO STD =' 
REPORT TIME REMAINING TILL NEXT' 


' ); 

); 

f 


' FAS_ERROR_CODE = ' ) ; 

WRITELN( 'ENTER YOUR LETTER SELECTION =', 

' (Z TO EXIT, Y STATIC , V TO CALIB. ) ' ) ; 

END; 


B-47 


(* Miletus Associates, Inc. 


FAS Testing PROCEDURES *) 


(*********** INITIALIZE the VARIABLES*********) 

PROCEDURE INITVAR; 

BEGIN 

DYNAMIC := FALSE; 

MENUKEY := '*'; 

(* NEW_FAS_ANN OT AT I ON_MOD E is set to the power *) 
(* up value. All other variables under the *) 
(* control of the STD, simulated by this menu *) 
(* program, are set to what the operator enters*) 
(* in responsed to the menu item selected. *) 

NEW_FAS_ANNOTATION_MODE := 'B'; 

(* 13 MARCH 89; IN ADDITION, FAS_TRIGGER_ENABLE* ) 

(* MUST BE SET TO THE POWER UP ENABLED VALUE *) 

(* IN ORDER FOR THE FAS TEST MENU TO SHOW TRUE *) 

FAS_TRIGGER_ENABLE := TRUE; 

END; 


B-48 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(****************** CHANGE FAS trigger************) 

PROCEDURE CHFTRIG; 

BEGIN 

GOTOXY (43,2); 

WRITE( 'ENTER: T or F = '); 

REPEAT UNTIL KEYPRESSED; 

KEY : = READKEY ; 

FAS_TRIGGER_ENABLE : = ( KEY = ' T* ) ; 

(* CALL FAS PROCEDURE HERE*) 

Set_FAS_Camera_Trigger_Control ( FAS_ERROR_CODE , 

FAS_TRIGGER_ENABLE ) ; 

END? 


B-49 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *************** STD CPU CAMERA TRIGGER COMMAND*************) 


PROCEDURE CHSTRIG ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

STD_CPU_Trigger_Camera_Command ( FAS_ERROR_CODE ) ; 

END; 


B-50 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( ****************F^s CPU RESET COMMAND*********************) 


PROCEDURE CHFRESET ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

FAS CPU Reset Command ( FAS ERROR CODE); 


(* DOES THIS RESET THE ANNOTATION MODE TO B? and *) 

(* ENABLE THE FAS CAMERA CONTROL? YES, IT does. So: *) 

NEW FAS ANNOTATION MODE := 'B'; 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(**************** READ HARDWARE FRAME COUNTER***************) 
PROCEDURE CHFFCNT; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Read_Hardwar e_Frame_Counter ( FAS_ERROR_CODE , 

FAS_HARDWARE_FRAME_COUNTER) ; 

GOTOXY (40,5); 

CLREOL; 

WRITE (FAS_HARDWARE_FRAME_COUNTER) ; 

END; 


B-52 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** RES ET HARDWARE FRAME COUNTER*************) 
PROCEDURE CHFFRESET ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Reset_Hardware_Frame_Counter ( FAS_ERROR_CODE ) ; 

END; 


B-53 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************SET FAS ANNOTATION MODE******************) 
PROCEDURE CHFMODE ; 

BEGIN 

GOTOXY (36,7) ; 

WRITE( 'ENTER: A, B, or C'); 

REPEAT UNTIL KEYPRESSED; 

KEY := READKEY; 

GOTOXY (36,7); 

WRITE (KEY, ' '); 

NEW_FAS_ANNOTATION_MODE := KEY; 

(* CALL FAS PROCEDURE HERE*) 

Set_FAS_Annotation_Mode ( FAS_ERROR_CODE , 

NEW_FAS_ANNOTATION_MODE) ; 

END; 


B-54 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************SEND LAST PHOTO "X" SWITCH***************) 
PROCEDURE CHFX; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Get_Last_Photo_Data ( FAS_ERROR_CODE , 

“ LAST PHOTO X SWITCH DATA); 


GOTOXY (43,8) ; 

CLREOL ; 

WRITE ( LAST_PHOTO_X_SWI TCH_DATA ) ; 
END; 


B-55 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(*****************SEND TEXT TO STD BUSS CPU***********) 

PROCEDURE CHFTEXT ; 

VAR 

CHAR POSITION : BYTE; 


BEGIN 

GOTOXY (43,9); 

CLREOL ; 

CASE NEW_FAS_ANNOTAT I ON_MODE OF 
'A' : TEXT_TO_FAS := 

•1234567890123456789012345678' ; 
•B' : TEXT_TO_FAS := '1234567890123456'; 

•C' : TEXT_TO_FAS := '1234567890123456789'; 

END; 

WRITE ( TEXT_TO_FAS ) ; 

GOTOXY (43,9); 

CHAR_POSITION := 0; 

REPEAT 


BEGIN 

REPEAT UNTIL KEYPRESSED; 

KEY := READKEY; 

CHAR_POSITION := CHAR_POSITION + 1; 

CASE KEY OF 

(* CR *) ~M : CHAR_POSITION := 30; 

(* BS *) "H : CHAR_POSITION := 

CHAR_POSITION - 2; 

' ' . . ' z ' : TEXT_TO_FAS [ CHAR_POSITION ] : = 

KEY; 

END; 

IF CHAR_POSITION >= 0 
THEN 

WRITE (KEY) 

ELSE 

CHAR_POSITION := 0; 

END; 

UNTIL CHAR POSITION >= LENGTH (TEXT TO FAS); 


(* CALL FAS PROCEDURE HERE*) 

Send Text To FAS (FAS ERROR CODE, TEXT TO FAS); 


END; 


B-56 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************SET GMT TIME*****************************) 


PROCEDURE CHFGMT ; 

BEGIN 

GOTOXY (20,10); 

CLREOL ; 

WRITE ( ' DHHMMSSSS ' ) ; 

GOTOXY (20,10 ) ; 

READLN ( NEW_GMT ) ; 

(* CALL FAS PROCEDURE HERE*) 

Set_GMT ( FAS_ERROR_CODE , NEW_GMT ) ; 

END; 


B-57 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************§ipART CLOCK****************************** ) 


PROCEDURE CHFGOCLK ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

S tar t_FAS_Clock ( FAS_ERROR_CODE ) ; 

END; 


B-58 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(************ *****SET INTERVALOMETER PARAMETERS************) 
PROCEDURE CHFINTER; 

VAR 

NUMJTEMP : INTEGER; 

BEGIN 

NUMJTEMP := 300; (* SOME NUMBER > 255, A MAX BYTE VALUE*) 

WHILE ( (NUMJTEMP < 0) 

OR 

( NUMJTEMP >255)) DO 

BEGIN 

GOTOXY (41,12 ) ; 

WRITEC '); 

GOTOXY (41, 12 ) ; 

READLN ( NUMJTEMP ) ; 

END; 

NUMBER_OF_PHOTOS_TO_TAKE := BYTE ( NUMJTEMP ) ; 

GOTOXY (56,12 ) ; 

WRITEC '); 

GOTOXY (56, 12 ) ; 

READLN ( INTERVAL_BETWEEN_PHOTOS ) ; 

(* CALL FAS PROCEDURE HERE*) 

Set_Intervalometer ( FAS_ERROR_CODE , 

NUMBER_OF_PHOTOS JTOJTAKE , 
x INTERVAL_BETWEEN_PHOTOS ) ; 

END; 


B-59 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(**************** * START PHOTO SEQUENCE********************* ) 


PROCEDURE CHFGOPHOTO ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Start_Photo_Sequence ( FAS_ERROR_CODE ) ; 

END; 


B-60 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** PAS STATUS CODE TO STD*******************) 
PROCEDURE CHFSTATUS; 

VAR 

REAL__STATUS : BYTE; 

TEMP : BYTE; (* USED IN MATH *) 


BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Get_FAS_Status ( FAS_ERROR_CODE , FAS_STATUS_CODE ) ; 

TEMP : = FAS_STATUS_CODE ; 

REAL_ST ATU S := TEMP DIV 64; 

GOTOXY (34,14 ) ; 

CLREOL ; 

WRITE ( 'MODE = ' ) ; 


CASE REAL STATUS OF 


0 

WRITE ( 'A, 

' ); 

1 

WRITE ( 'B, 

' ); 

2 

WRITE ( 'C, 

' ); 

3 

END; 

WRITE ( ’?, 

' ); 

TEMP 

:= TEMP 

- ( REAL_STATUS * 64) 


REAL_STATUS := TEMP DIV 32; 

TEMP := TEMP - ( REAL_STATUS * 32); 

WRITE ( 'RESET = ' , REAL_STATUS , ' , ' ) ; 
REAL_STATUS : = TEMP DIV 4; 

WRITE ('CARD = ' , REAL_STATUS , ' , '); 

TEMP := TEMP - (REAL_STATUS * 4); 

WRITE ( ’ CAMERA = * , TEMP ) ; 


END; 


B-61 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** CANC EL CURRENT PHOTO SEQUENCE************) 
PROCEDURE CHFSTOPPHOTO ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Cancel_Photo_Sequence ( FAS_ERROR_CODE ) ; 

END; 


B-62 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** INTERVAL PRE-WARNING FLAG****************) 
PROCEDURE CHFPREPHOTO ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Get_Photo_Pre_Warning_Flag ( FAS_ERROR_CODE , 

INTERVAL_PRE_WARNING_FLAG ) ; 

GOTOXY (38,16 ) ; 

CLREOL ; 

IF NOT INTERVAL_PRE_WARNING_FLAG THEN WRITE ('NO '); 

WRITE ( ' PHOTO PENDING ' ) ; 

END; 


B-63 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************photo CONFIRMATION TO STD****************) 
PROCEDURE CHFCONPHOTO ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Get Photo_Conf irmation_Flag ( FAS_ERROR_CODE , 

PHOTO_CONFIRMATION_FLAG) ; 

GOTOXY (38,17); 

CLREOL; 

IF PHOTO_CONFIRMATION_FLAG THEN 

WRITE (' SUCCESSFUL PHOTO TAKEN') 

ELSE 

WRITE ('NO PHOTO TAKEN '); 


END 



(* Miletus Associates , Inc. FAS Testing PROCEDURES *) 

( *****************p H OTO COUNT THIS SEQUENCE****************) 
PROCEDURE CHFPHOTOCNT ; 

BEGIN 

(* CALL FAS PROCEDURE*) 

Get_Photo_Count ( FAS_ERROR_CODE , NUMBER_OF_PHOTOS_TAKEN ) ; 
GOTOXY (38,18 ) ; 

WRITE ( ' ' ) ; 

GOTOXY (38,18 ) ; 

WRITE (NUMBER_OF_PHOTOS_TAKEN) ; 

END; 


B-65 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( **********«r******pERFORM FAS COMM PORT TEST***************) 


PROCEDURE CHFPORTTEST ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Perf orm_FAS_Communication_Test ( FAS_ERROR_CODE ) ; 

END; 


B-66 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***********:****** R EQUEST FAS HARDWARE SELF test***********) 


PROCEDURE CHFHARDTEST ; 

BEGIN 

GOTOXY (43,20); 

CLREOL ; 

WRITECENTER A, E, R, OR C - ' ) ; 

REPEAT UNTIL KEYPRESSED? 

KEY := READKEY; 

GOTOXY (43, 20 ) ; 

CLREOL ; 

WRITE (KEY,' has '); 

FAS_HARDWARE_TEST := KEY; 

(* CALL FAS PROCEDURE HERE*) 

Perf orm_FAS_Hardware_Test ( FAS_ERROR_CODE , 

FAS_HARDWARE_TEST , 
FAS_HARDWARE_TEST_FLAG ) ? 

IF FAS_HARDWARE_TEST_FLAG 
THEN 

WRITE (' FINISHED') 

ELSE 

WRITE (' ERRORED OUT'); 

END; 


B-67 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(*************** * *REPORT ANNOTATION MODE TO STD************) 
PROCEDURE CHFRPTMODE ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Report_Annotation_Mode ( FAS_ERROR_CODE , 

REPORTED_ANNOTATION_MODE) ; 

GOTOXY(42,21) ; 

CLREOL; 

WRITE ( REPORTED_ANNOTATION_MODE ) ; 

END; 


B-68 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** REP0RT time LEFT TO next photo***********) 
PROCEDURE CHFNXPHOTO ; 

BEGIN 

(* CALL FAS PROCEDURE HERE*) 

Report_Time_To_Next_Photo ( FAS_ERROR_CODE , 

REPORTED_TIME_TO_NEXT_PHOTO ) ; 

GOTOXY (60,22); 

CLREOL; 

WRITE ( REPORTED_TIME_TO_NEXT_PHOTO ) ; 

END; 



B-69 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************begin CALIBRATION OF FAS CLOCK***********) 

(* WARNING: THE CALIBRATION PROCEDURE BELOW PUTS THE FAS *) 

(* INTO THE MODE NECESSARY TO ADJUST THE CAPACITOR WHICH *) 

(* REGULATES THE CRYSTAL'S FREQUENCY. THE FAS CAN DO NO *) 

(* OTHER FUNCTION ONCE SET IN THIS MODE; ONLY A FAS CPU *) 

(* RESET (4.3) WILL RETURN THE FAS TO PROPER OPERATION. *) 

(* After a 3 minute timeout or key press, the *) 

(* PROCEDURE FAS_Clock_Calibration will do a RESET, 4.1. *) 

(* THEN THIS PROCEDURE WILL INITVAR AND DO A FAS POWER UP*) 
PROCEDURE CHFCAL ; 

VAR 

CALI BRATE_CODE : BYTE; 

D ELA Y_COUNTER : INTEGER; 

BEGIN 

CLRSCR; 

GOTOXY (20,8) ; 

WRITE ('CLOCK CALIBRATION MODE'); 

GOTOXY (17,12); 

WRITELN('The FAS will be reset, so all variables are lost!'); 
GOTOXY ( 20, 14 ) ; 

WRITELN ( ' For the next 3 minutes, the FAS card can be'); 
GOTOXY (18 ,16 ) ; 

WRITELN ( 'calibrated. Press any key to terminate earlier.'); 

(* CALL FAS PROCEDURE HERE *) 

FAS_Clock_Calibration ( FAS_ERROR_CODE ) ; 

PAINTSCREEN ; 

INITVAR; 

(***FAS POWER UP***) 

(* CALL FAS PROCEDURE HERE*) 

FAS__POWER_UP ( FAS_ERROR_CODE ) ; 

END; 


B-70 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *****************cfj£ NGE THE FRAME COUNT*******************) 
PROCEDURE CHFFRAMECNT; 

VAR 

NUM_TEMP : INTEGER; 

BEGIN 

NUM_TEMP := 300; (* SOME NUMBER > 255, A MAX BYTE VALUE*) 

WHILE ( (NUM_TEMP < 0) 

OR 

(NUM_TEMP >255)) DO 
BEGIN 

GOTOXY (73,6); 

CLREOL ; 

READLN ( NUM_TEMP ) ; 

END; 

NEW_FRAME_COUNT : = BYTE ( NUM_TEMP ) ; 

(* CALL FAS PROCEDURE HERE*) 

Load_the_FAS_sof tware_f rame_count ( FAS_ERROR_CODE , 

NEW_FRAME_COUNT ) ; 

END; 


B-71 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

(***************** TO gGLE DYNAMIC/STATIC MENU flag**********) 
PROCEDURE DYNAMI C_STATI C_TOGGLE ; 

BEGIN 

DYNAMIC := NOT DYNAMIC; 

GOTOXY (50,24 ) ; 

IF DYNAMIC THEN WRITE (' DYNAMIC ' ) 

ELSE WRITE ( 'STATIC ' ) ; 

END; 


B-72 



(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( *********<t*******upDATED SCREEN*************************** ) 


PROCEDURE 

VAR 

BEGIN 


END? 


UPDATE_SCREEN ; 

TEMP : BYTE ; 

GOTOXY (43,2); 

CLREOL ; 

WRITE (FAS_TRIGGER_ENABLE, ' ' ) ? 

GOTOXY (53, 23 ) ; 

CLREOL; 

Get_Error_Code_Number ( FAS_ERROR_CODE, 
WRITE ( TEMP ) ? 

Get_Error_Code_Caller ( FAS_ERROR_CODE , 
GOTOXY (31,23) ; 

WRITE ( '4. ', TEMP, ' '); 


TEMP ) ; 
TEMP ) ; 


B-73 


(* Miletus Associates, Inc. FAS Testing PROCEDURES *) 

( **************turbo PASCAL main program*******************) 

(***INITIALIZE***) 

BEGIN 

TEXTBACKGROUND ( BLUE ) ; 

TEXTCOLOR (WHITE) ; 

PAINTSCREEN; 

INITVAR; 

(***FAS POWER UP***) 

(* CALL FAS PROCEDURE HERE*) 

FAS_POWER_UP ( FAS_ERROR_CODE ) ; 

(***MENU LOOP***) 

WHILE MENUKEYO ' Z * DO 
BEGIN 

UPDATE_SCREEN ; 

GOTOXY (31,24 ) ; 

WRITE ( ' ' ) ; 

GOTOXY (31, 24 ) ; 

IF DYNAMIC THEN 

DELAY ( 500 ) 

ELSE 

REPEAT UNTIL KEYPRESSED; 

IF KEYPRESSED THEN 

MENUKEY : = READKEY 

ELSE 

MENUKEY : = ' * ' ; 

WRI TE( MENUKEY ) ; 

CASE MENUKEY OF 


'A' 

CHFTRIG; 

'B' 

CHSTRIG; 

•C' 

CHFRESET ; 

’D' 

CHFFCNT ; 


CHFFRESET ; 

1 p • 

CHFMODE ; 

'G' 

CHFX; 

•H' 

CHFTEXT ; 

'I' 

CHFGMT ; 

' J' 

CHFGOCLK ; 

•K' 

CHFINTER; 

'L' 

CHFGOPHOTO ; 

•M' 

CHFSTATUS ; 

' N ' 

CHFSTOPPHOTO; 

'O' 

CHFPREPHOTO ; 

ip' 

CHFCONPHOTO ; 

'Q' 

CHFPHOTOCNT ; 

'R' 

CHFPORTTEST ; 

•S' 

CHFHARDTEST ; 

* T 1 

CHFRPTMODE ; 

'U' 

CHFNXPHOTO ; 

•V' 

CHFCAL ; 

'W' 

CHFFRAMECNT ; 


B-7 4 



(* Miletus Associates, Inc 


FAS Testing PROCEDURES *) 


•y« : D YNAMI C_STATI C_TOGGLE ; 

END; 


B-7 5 



















Q 


3 


L 


z 

LU 

2!>- 

a: cr 

UUCL 
CL ZD 
XGO 
UJ 

cr 

3TUJ 

cro 
Ll cl 




cr u_ 

UJ c J 

LO n 

II 



C-4 



FAS CAMERA INTERFACE DIAGRAM 






STD BUSS TO FAS CPU 
FIGURE 3 







PORTS BLOCK DIAGRAM 
TO STD BUSS 







I 

ORIGINAL PAGE 

i BLACK AND WHITE PHOTOGRAPH 



Figure 5. Component Side of P.C. Board 



Figure 6. Solder Side of P.C. Board 


C-7 




Figure 7. Test Set Up 



Figure 8. Nikon F3 Camera (Front View) 


C-8 


ORIGINAL PAGE 

BLACK AND WHITE PHOTOGRAPH 








Figure 11. Nikon F3 Data Mask 



Figure 12. KHA 


ORIGINAL PAGE 

BLACK AND WHITE PHOTOGRAPH 




















All components are to be installed with 
leads cut to tenth then soldered, using tape 
to hold parts in place. No copper is to be 
exposed where lead has been cut. 


LU 

a < 

< 5 

0 . (y 


CAD26R-23B-39 


HILETUS ASSOCIATES. I 
COPYI I OUT (C) IIH 

PCI »t» 


jo fe o tejo ) 


•ooooooooooooo; 

iOOOOOOOOOOOOO 


o 'o 
o 1° 

OjSe O 

oK o 

01*^0 
Oi£ o 
°LrJa 


ooooooooo N, 
ooooooooooo 1 


ooooooooooo 

ooooooooo 


ooooooooooo 

ooooooooo 


C2 Oj (& 6}+ 

C1 + (00) 10 C Q| 

ItSsf 


=» BM 

_ o( !o orsro 0-1 620 1-0 

o of o o oSol. 2 K-io_ _ 

O 0| O Oo 0 0 0$. IKO* ~--'l 

O o, s o o £5 Or^iO|5ll( J, 

° °i« 0 o^'ogoi.UiOibo 25 

o O' S O O^iOp O'toxiopo g 'O 4 

O Oi ■ ;0 0 « i 0 H-' 0 ' 22 K |o|felo a lO = 

□ Ouxja 2 0 ._nja 6 oiJfttJa go =; ,□ 
o-dlED-o 3 - g(o— ol S(o 61 




r OOOOOO j 
OOOODOOO I 
oo - t £ OO [ 

oo3<^ oo I 

O O ©» Sc O O | 

oo oo : 

; oooooooo i 

! OOOOOO i 


ooooooooo 

ooooooooooo 


Vo ^ !o; 
^io » ! o 
-fo|o; ^ jo 

-loiSLxjS 


‘sPIgo 

<3 o ^ 
|o| o 
= 0 
o 
o 

+ ^0, 

~ i^°! 
«/o\oi 
Vo/oi 
-loLo' 

S Pi 
loj -o 

°i 

«lop°i 

/oSoi 

Vpyoi 

o»T*. L 
(J + 3 


orxrjo 

o £ !o 
°JtJd 


oi o 
o| o 
of o 
0 \ £ ;0 

0 3 jo 
o| 5 o 

01 ^,0 

OI ;0 

O- jO 

OLnJa 


SIP OJ 
° .luT^ 
Oi !o 


'-SI V 

oLnJa 


OLnJag 

ISpf 

O C25 


U w io 

oSSjol 'o 
OL“fo oof 

iojojol o of 
f°£ °‘ £ oo! 
ooo! 3 oo! 
oVof * o of 

■Otim O* ^ tO Of 


O O 

o o| io O 
oof 0 ioO 
oolj OO 
pO|Tg|0° 

OOi^iOO 
°°!« !°° 
oo:- j© ° 


0 | ;OI [OO — |O^I 

oW-o; jo Oj_nja °| 

oAoLnja, « °i 


ss°h ? 

io$»L> 


R 7 O-CWD -0 

or ! < 

Oi c 


o 5 


OLaJa OLnJa°i 


s + v°3’ 3 

nrer 


; |o--oj 
i °i 

\o~zo 
|O uo o> 
loroTolo; 

!□( |0! 

♦n lOOjO; 


o 

o 

o 

o 

o 

^ o 

5 o 

£ .O 

a o 

o 

iO 

o 

o ^ 

n P “ 


00 cr> 

LU CO . OO 
CTi O ^ 
cr> CD 
X oo 

CD 

LiJ Q , — 

1 h— CD 


CD 

CD 

OO 

oo 

-ex; CT) 
OO 


rO 

0 OO 


cn lj_j 

CD 

z 1 cu 
CD ^ 

— > o 

I™ LU CD 
oc 

CD OO 
cn ^ — 
XT OO 

<nct: 

LU 

oo m >- 
< o < 

La_ O I 


s* I 
If |2 
IS I* 


FOLDOUT FRAME 


Report Documentation Page 

Spac* Admm.tr arton 

1. Report No. 2. Government Accession No. 

NASA CR-1851 14 

3. Recipient's Catalog No. 

4. Title and Subtitle 

Film Annotation System for a Space Experiment 

5. Report Date 

July 1989 

6. Performing Organization Code 

7. Author^; 

W.R. Browne & S.S. Johnson 

8. Performing Organization Report No. 

10. Work Unit No. 

9. Performing Organization Name and Address 

Miletus Associates, Inc. 
3876 Hawkins NE 
Albuquerque, NM 87109 

11. Contract or Grant No. 

NAS3-25055 

13. Type of Report and Period Covered 

Flight Hardware Report 

12. Sponsoring Agency Name and Address 

National Aeronautics and Space Administration 
Lewis Research Center 
21000 Brookpark Road 
Cleveland, OH 44135 

14. Sponsoring Agency Code 


15. Supplementary Notes 


NASA Project Manager, Mr. G.A. Kraft, NASA Lewis Research Center 
Telephone Number (216) 433-3932 


i 16. Abstract 

< 

This microprocessor system was designed to control and annotate a Nikon 35mm camera 
for the purpose of obtaining photographs and data at predefined time intervals. The 
single STD BUSS interface card has been designed in such a way as to allow it to be 
: used in either a stand alone application with minimum features or installed in a STD BUSS 

| computer allowing for maximum features. 

I 

| This control system also allows the exposure of twenty eight alpha/numeric characters 
across the bottom of each photograph. The data contains such information as camera 
identification, frame count, user defined text, and time to .01 seconds. 


17. Key Words (Suggested by Authors)) 1 

Film Annotation System 
35mm Camera 
Intervalometer 

1 

! 


16. Distribution Statement 

Unclassified 

Unlimited 


|I9. Security Classif. (of this report) 

, Unclassified 

20. Security Classif. (of this page) 

Unclassified 

21. No of pages 
121 

22. Price* 


ASA FORM 1626 OCT 86 


*For sale by the National Technical Information Service. Springfield, Virginia 22161 




















