









AVF Control Number: AVF-VSR-254.0789 

89-01-26-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890405W1.10058 
Meridian Software Systems, Inc. 

AdaVantage, Version 3.0 

Zenith Z-248, Model ZV-248-82 (with Floating Point Co-Processor) 


Completion of On-Site Testing: 
5 April 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 








Ada Compiler Validation Summary Report: 


Compiler Name: AdaVantage, Version 3.0 
Certificate Number: 890405U1.10058 

Host: Zenith Z-248, Model ZV-248-82 (vith Floating Point Co-Processor) 

unaer MS-DOS, 3.10 

Target: Zenith Z-248, Model ZV-248-82 (vith Floating Point Co-Processor) 
under MS-DOS, 3.10 


Testing Completed 5 April 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


/o'" l — _ 

Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


k 

/ Di 



Aua Joint Progtam Oflice 
Dr. John Solomond 
Director, AJP0 
Department of Defense 
Washington DC 20301 





I Accession For v 

NT1S GRA&I ® r~ 


GRA&I 
DTIG TAB 
Unannounced 
Ju•. 1 lent lon_ 


Bv__ __ 

Distribution/ 

Avn1lab 11ity Codes 

j A v<; 11 and/or 


Dist 

Spec 




□ □ 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site . 3-7 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report -XVSR>- describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of ..testing this compiler using the Ada Compiler 
Validation Capability, fACVC)i' An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 


"“Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

^The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 



1-1 











INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 5 April 1989 at Laguana Hills CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


1-2 








INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 198?. 

3- Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986^ 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 









INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdrawn 

test 


1-4 





INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 








INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values — for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 






CHAPTER 2 

CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation vas tested under the 
following configuration: 


Compiler: AdaVantage, Version 3.0 
ACVC Version: 1.10 
Certificate Number: 890405V1.10058 
Host Computer: 

Machine: Zenith Z-248, Model ZV-248-82 

(with Floating Point Co-Processor) 


Operating System: MS-DOS, 3.10 

Memory Size: 640 kilobytes 


Target Computer: 

Machine: 

Operating System: 
Memory Size: 


Zenith Z-248, Model ZV-248-82 
(with Floating Point Co-Processor) 

MS-DOS, 3.10 

640 kilobytes 


2-1 








CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 10 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
BYTE_INTEGER and L0NG1NTEGER in package STANDARD. (See tests 
B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 


(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for-extra range. (See test C35903A.) 







CONFIGURATION INFORMATION 


(4) NUMERIC_ERROR is raised when an integer literal operand in a 
comparison or membership test is outside the range of the base 
type. (See test C45232A.) 

(5) No exception is raised vhen a literal operand ir. a fixed-point 
comparison or membership test is outside the range of the base 
type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 


An implementation is allowed to raise NUMERICERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX INT. 


For this implementation: 


(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 

( n ) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 
array type with INTEGER'LAST + 2 components. (See test 

C36202A,) 


(3) , M UMERIC_ERROR is raised when 'LENGTH is applied to a null 
array type with SYSTEM.MAX_INT + 2 components. (See test 

C36202B.) 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array objects are declared. 
(See test C52103X.) 


2-3 










CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
objects are declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINTERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is not supported for functions or 

procedures. (See tests LA3004A..B, EA3004C..D, and 

CA3004E..F.) 


2-4 







CONFIGURATION INFORMATION 


i. Generics 

(1) Generic unit declarations, bodies, and subunits can be 

compiled in separate compilations. (See tests CA1012A and 

CA3011A.) 

(2) If a generic unit body or one of its subunits is compiled or 
recompiled after the generic unit is instantiated, the unit 
instantiating the generic is made obsolete. The obsolescence 
is recognized at binding time, and the binding is stopped. 
(See tests CA2009C, CA2009F, BC3204C, and BC3205D.) 


j. Input and output 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, OUT_FILE, and INOUT FILE are supported for 

DIRECT_I07 (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(6) RESET and DELETE operations are supported for DIRECT_IO. (See 
tests CE2102K and CE2102Y.) 

(7) More than one internal file can be associated with each 

external file for sequential files when reading only. (See 
tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(8) More than one internal file can be associated with each 

external file for direct files when reading only. (See tests 
CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(9) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 

(10) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(11) Overwriting to a sequential file does not truncate the file. 


2-5 









CONFIGURATION INFORMATION 


(See test CE2208B.) 

(12) Modes IN FILE and OUT_FILE are supported for text files. (Set 
tests CE3102E and CE3102I..K.) 

(13) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(14) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 

(15) More than one internal file can be associated with each 
external file for text files when reading only. (See tests 
CE3111A..E, CE3114B, and CE3115A.) 


2-6 









CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 43 tests had been withdrawn because of test errors. The AVF 
determined that 286 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for seven tests were required to successfully demonstrate the test 
objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


TEST CLASS 
A B C D 

127 1129 2050 16 

2 9 266 1 

1 2 34 0 

130 1140 2350 17 


TOTAL 
E L _ 

22 44 3388 

6 2 286 

6 0 43 

34 46 3717 


3-1 








TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

576 

545 

245 

171 

99 

160 

333 

129 

36 

250 

368 

278 

3388 

Inappl 

14 

73 

135 

3 

1 

0 

6 

0 

8 

0 

2 

1 

43 

286 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 





The following 43 

tests were 

withdrawn 

from ACVC Version 1.10 at 

the time of 

this validation: 






E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 286 tests were inapplicable for the 
reasons indicated: 


3-2 










TEST INFORMATION 


a. The following 201 tests are not applicable because they have 

floating-point type declarations requiring more digits than 

SYSTEM.MAX_DIGITS: 

C24113L..Y C35705L..Y C35706L..Y C35707L..Y 

C35708L..Y C35802L..Z C45241L..Y C45321L..Y 

C45421L..Y C45521L..Z C45524L..Z C45621L..Z 

C45641L..Y C46012L..Z 

b. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SH0RT_FL0AT. 

c. C35702B and B86001U are not applicable because this implementation 
supports no predefined type L0NG_FL0AT. 

d. The following 16 tests are not applicable because this 

implementation does not support a predefined type SH0RT_INTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

f. D64005G is not applicable because this implementation does not 
support nesting 17 levels of recursive procedure calls. 

g. C86001F is not applicable because, for this implementation, the 
package TEXT_I0 is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SH0RT_FL0A7. 

j. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable because 

this implementation does not support separate compilation of 
generic specifications, bodies, and subunits, if an instantiation 
is given' before compilation of its bodies or subunits. The 
created dependency is detected at bind time. 

k. LA3004A, LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F are not 

applicable because this implementation does not support pragma 
INLINE. 

l. AE2101C, EE2201D, and EE2201E use instantiations of package 


3-3 











TEST INFORMATION 


SEQUENTIAL_IO vith unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

m. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

n. CE2102D is inapplicable because this implementation supports 

CREATE with IN_FILE mode for SEQUENTIAL_I0. 

o. CE2102E is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for SEQUENTIAL_IO. 

p. CE2102F is inapplicable because this implementation supports 

CREATE with INOUT_FILE mode for DIRECT_IO. 

q. CE2102I is inapplicable because this implementation supports 

CREATE with IN_FILE mode for DIRECT_IO. 

r. CE2102J is inapplicable because this implementation supports 

CREATE with OUTFILE mode for DIRECT_IO. 

s. CE2102N is inapplicable because this implementation supports OPEN 
with INFILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

u. CE2102P is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for SEQUENTIAL_IO. 

v. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT_FILE mode for DIRECT_IO. 

x. CE2102S is inapplicable because this implementation supports RESET 
with INOUTJTLE mode for DIRECT_IO. 

y. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FILE mode for DIRECT_IO. 

z. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_IO. 

aa. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIR£CT_I0. 

ab. CE2102V is inapplicable because this implementation supports RESET 
with OUT FILE mode for DIRECT 10. 


3-4 







TEST INFORMATION 


ac. CE2107B..£ (4 tests), CE2107L, CE2110B, and CE2111D are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
sequential files. The proper exception is raised when multiple 
access is attempted. 

ad. CE2107G..K (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ae. CE3102E is inapplicable because this implementation supports 

CREATE with IN_FILE mode for text files. 

af. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

ag. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

ah. CE3102I is inapplicable because this implementation supports 

CREATE with OUTFILE mode for text files. 

ai. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

aj. CE3102K is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for text files. 

ak. CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for seven tests. 


3-5 








TEST INFORMATION 


The following four tests were split because syntax errors at one point 
resulted in the compiler not detecting other errors in the test: 

B22003A B49003A B49005A B85013D 

BC3205E, AE2101A, and AE2101F were split because the compiler's memory was 

exhausted while processing the multiple instantiations. 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the AdaVantage compiler was submitted to the AVF by the applicant for 
review. Analysis of these results demonstrated that the compiler 
successfully passed all applicable tests, and the compiler exhibited the 
expected behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the AdaVantage compiler using ACVC Version 1.10 was conducted 
on-site by a validation team from the AVF. The configuration in which the 
testing was performed is described by the following designations of 
hardware and software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


Zenith Z-248, Model ZV-248-82 

(with Floating Point Co-Processor) 
MS-DOS, 3.10 

Zenith Z-248, Model ZV-248-82 

(with Floating Point Co-Processor) 
MS-DOS, 3.10 
AdaVantage, Version 3-0 


A set of diskettes containing all tests except for withdrawn tests and 
tests requiring unsupported floating-point precisions was taken on-site by 
the validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to 
diskettes. Tests requiring modifications during the prevalidation testing 
were included in their modified form on the diskettes. 


The contents of the diskettes were loaded directly onto the host computer. 

After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Zenith Z-248, 
Model ZV-248-82 (with Floating Point Co-Processor). Results were 
transmitted from the host to a Sun 3/260 using a program called KERMIT and 
then printed from there. 


3-6 




TEST INFORMATION 


The compiler was tested using command scripts provided by Meridian Software 
Systems, Inc. and reviewed by the validation team. The compiler was 
tested using all default option settings except for the following: 


OPTION 


EFFECT 


-E 

-I 


-Q 

-S 

-V 

-w 


-c 

-P 


-s 


Generate error file for the Ada listing utility. 

Ignore compilation errors and continue generating 
code for legal units within the same compilation 
file. 

Suppress "Added to library" and "Generating code for" 
informational messages. 

Use 80286-specific instructions where possible. 

Enable overflow checking. 

Suppress informative warning messages. 

Produce continuous form Ada listings (no page 
headers). 

Obey PRAGMA PAGE directives within program even 
though -c flag says not to generate page breaks. 

Output Ada listing to the standard output file 
instead of to a disk file. 


Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
diskettes and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Laguana Hills CA and was completed on 5 April 
1989. 


3-7 










APPENDIX A 


DECLARATION OF CONFORMANCE 


Meridian Software Systems, Inc. has submitted the 
following Declaration of Conformance concerning the 
AdaVantage compiler. 


A-l 











DECLARATION OF CONFORMANCE 


Compiler Implementor: Meridian Software Systems. Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45-133-(>50-i 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 


Base Compiler Name: 
Version: 

Host Architecture ISA: 

OS&VER #: 

Target Architecture ISA: 

OS&VER #: 


AdaVantage 

3.0 

Zenith Z-248 Model ZW-248-82 
(with Floating Point Co-Processor) 
MS-DOS 3.10 

Zenith Z-248 Model ZW-248-82 
(with Floating Point Co-Processor) 
MS-DOS 3.10 


Implementor’s Declaration 

I, the undersigned, representing Meridian Software Systems, Inc., have implement* d 
no deliberate extensions to the Ada Language Standard ANSI/MIL-STD-lSIoA in 
the compiler(s) listed in this declaration. I declare that Meridian Software Systems. 
Inc. is the owner of record of the Ada language compiler(s) listed above and. as such, 
is responsible for maintaining said compiler(s) in conformance to ANSI/M IL-STD- 
1S15A. All certificates and registrations for Ada language compiler(s) listed in this 
declaration shall be made only in the owner's corporate name. 

1 1^-) ^ _ Date:. 

Meridian Software Systems, Inc. 

Stowe Boyd, Vice President of Research and Development 

Owner’s Declaration 

I, the undersigned, representing Meridian Software Systems, Inc., take full responsi¬ 
bility for implementation and maintenance of the Ada compiler(s) listed above, and 
agree to the public disclosure of the final Validation Summary Report. I declare that 
all of the Ada language compilers listed, and their host/target performance are in 
compilance with the Ada Language Standard ANSI/MIL-STD-1815A. 

Meridian Software Systems, Inc. 

Stowe Boyd, Vice President of Research and Development 

A-2 









APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the AdaVantage, Version 3.0, as described in this 
Appendix, are provided by Meridian Software Systems, Inc. Unless 
specifically noted otherwise, references in this Appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type BYTE_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range 

-1.79769313486231E+308 .. 1.79769313486231E+308; 

type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


B-l 




Appendix F 

Implementation-Dependent 

Characteristics 


This appendix lists implementation-dependent characteristics of Meridian 
AdaVantage. Note that there are no preceding appendices. This appendix 
is called “Appendix F” because of a very clearly stated requirement by 
ANSI/MIL-STD-1S15A that this appendix be so named. 

Implemented Chapter 13 features include length clauses, enumeration repre¬ 
sentation clauses, record representation clauses, . ’ clauses, interrupts, 
package SYSTEM, machine code insertions, pragma interface, and unchecked 
programming. 


F.l Pragmas 


The implemented pre-defined pragmas are: 


B-2 









elaborate Implemented as per ANSI/MIL-STD-1S15A section 10.5. 
interface See sec^on F.1.1. 

list Implemented as per ANSI/MIL-STD-1815A Appendix B. 

pack See section F.1.2. 

page Implemented as per ANSI/MIL-STD-1S15A Appendix B. 

priority Implemented as per ANSI/MIL-STD-1S15A Appendix B. 

suppress See section F.1.3. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled optimize system-name 

inline shared 

memory-size storage-unit 


Named parameter notation for pragmas is not supported. 

When illegal parameter forms axe encountered at compile time, the com¬ 
piler issues a warning message rather than an error, as required by the Ada 
language definition. 

Refer to ANSI/MIL-STD-1S15A Appendix B for additional information about 
the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface in Meridian AdaVantage is: 
pragma iaterfac«( language, subprogram [, ” link-name"'] ); 

where: 

language is the interface language, one of the names assembly, 

builtin, c, internal, or microsoft_c. The names 


B-3 








builtin and internal are reserved for use by Meridian 
compiler maintainers in run-time support packages. 

subprogram is the name of a subprogram to which the pragma 
interface applies. If link-name is omitted, then the 
Ada subprogram name is also used as the object code 
symbol name. Depending on the language specified, 
some automatic modifications may be made to the 
object code symbol name. 

link-name is an optional string literal specifying the name of the 

non-Ada subprogram corresponding to the Ada sub¬ 
program named in the second parameter. The link- 
name is used as the object code symbol. Depending 
on the language specified, some automatic modifica¬ 
tions may be made to the object code symbol name. 

It is appropriate to use the optional link-name param¬ 
eter to pragma interface when the interface subpro¬ 
gram has a name that does not correspond at all to its 
Ada identifier or when the interface subprogram name 
cannot be given using rules for constructing Ada iden¬ 
tifiers (e.g. if the name contains a ‘S’ character). 

The characteristics of object code symbols emitted for each interface language 
are: 


assembly The object code symbol is the same as the subpro¬ 

gram name. If no link-name string is specified, then 
the subprogram name is translated to lower case. 

builtin The object code symbol is the same as the sub¬ 

program name, but with two underscore characters 
prepended, whether or not a link-name string 
is specified. If no link-name string is specified, then 
the subprogram name is translated to lower case. 
This language interface is reserved for special in¬ 
terfaces defined by Meridian Soft%vare Systems, Inc. 


B-4 










The built in interface is presently used to dec<are 
certain low-level run-time operations whose names 
must not conflict with programmer-denned or lan¬ 
guage system defined names. 

c The object code symbol is the same as the sub¬ 

program! name, but wfith one underscore character 
(V) prepended, whether or not a link-name string is 
specified. If no link-name string is specified, then the 
subprogram name is translated to lower case. This 
is the convention used by the Meridian-C compiler. 

internal No object code symbol is emitted for an interim! 

language interface; this language interface is reserved 
for special interfaces defined by Meridian Software 
Systems, Inc. The internal interface is presently 
used to declare certain machine-level bit operations. 

microsoft.c The object code symbol is the same as the sub¬ 
program name, but with one underscore character 
(V) prepended, whether or not a link-name string is 
specified. If no link-name string is specified, then the 
subprogram name is translated to lower case. This 
is the convention used by the Microsoft C compiler. 

The low-level calling conventions are changed only in the case of a mi- 
crosoft_c interface. No automatic data conversions are performed on pa¬ 
rameters of any interface subprograms. It is up to the programmer to ensure 
that calling conventions match and that any necessary data conversions take 
place when calling interface subprograms. 

A pragma interface may appear within the same declarative part as the 
subprogram to which the pragma interface applies, following the subpro¬ 
gram declaration, and prior to the first use of the subprogram. A pragma 
interface that applies to a subprogram declared in a package specification 
must occur within the same package specification as the subprogram decla¬ 
ration; the pragma interface may not appear in the package body in this 
case. A pragma interface declaration for either a private or non-private 


B-5 




subprogram declaration may appear in the private part of a package speci¬ 
fication. 

Pmrma interface for library units is not supported. 

Refer to ANSI/MIL-STD-1815A section 13.9 for additional information about 
pragma interface. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which 
it applies, provided that the pragma occurs within the same declarative part 
as the composite type declaration, before any objects or components of the 
composite type are declared. 

Note that the declarative part restriction means that the type declaration and 
accompanying pragma pack cannot be split across a package specification and 
body. 

The effect of pragma pack is to minimize storage consumption by discrete 
component types whose ranges permit packing. Use of pragma pack does not 
defeat allocations of alignment storage gaps for some record types. Pragma 
pack does not affect the representations of real types, pre-defined integer 
types, and access types. 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as described in ANSI/MIL-STD-1815A 
section 11.7, with these differences: 

• Presently, division-check and overflow .check must be suppressed 
via a compiler flag, -fN; pragma suppress is ignored for these two 
numeric checks. 


B-6 









• The optional “ON =>” parameter name notation for pragma suppress 
is ignored. 

• The optional second parameter to pragma suppress is ignored; the 
pragma always applies to the entire scope in which it appears. 


F.2 Attributes 


There are presently no implementation-dependent attributes in Meridian 
AdaVantage. All attributes described in ANSI/MIL-STD-1S15A Appendix 
A are implemented. 


F.3 Standard Types 

Two additional standard types are defined in AdaVantage: 

1. BYTE_INTEGER, defined with less precision than type integer; 

2. LONG_INTEGER, defined with greater precision than type integer. 

The standard numeric types are defined as: 

type BYTE.ISTZGER is range -128..127; 
type IITEGER is range -32768 .. 32767; 
type LOIG.IFTEGER is range -2147483648 .. 2147483647; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 

type DURATIOI is delta 0.0001 

range -86400.0000 .. 86400.0000; 


B-7 








F.4 Package SYSTEM 

The specification of package SYSTEM for PC-DOS is: 


package SYSTEM is 

type ADDRESS is nes LOMG.IITEGER; 

type SAME is (i8086); 

SYSTEM.IAHE : constant SAME :* i8086; 

STORAGEJJKIT : constant := 8; 

MEMORY.SIZE : constant : = 1024; 

— System-Dependent lamed lumber* 

MIS.IST : constant :* -2147483648; 

MAX.IST : constant :* 2147483647; 

HAX_DIGITS : constant IS; 

MAX.MASTISSA : constant := 31; 

FISE.DELTA : constant := 2.0 ** (-31); 

TICX : constant : = l.o / 18.2; 

— Other System-Dependent Declarations 
snbtype PRIORITY is ISTEGER range 1 .. 20; 

end SYSTEM; 


The value of SYSTEM.MEMORY.SIZE is presently meaningless. 


F.5 Restrictions on Representation Clauses 

F.5.1 Length Clauses 

A size specification (T’SIZE) is rejected if fewer bits are specified than can 
accommodate the type. The minimum size of a composite type may be 
subject to application of pragma pack. It is permitted to specify precise sizes 
for unsigned integer ranges, e.g. 8 for the range 0. .255. However, because 
of requirements imposed by the Ada language definition, a full 32-bit range 


B-8 











of unsigned values, i.e. 0. . (2**32)-1, cannot be defined, even using a size 
specification. 


The specification of collection size (T’STORAGE-SIZE) is evaluated at run¬ 
time when the scope of the type to which the length clause applies is entered, 
and is therefore subject to rejection (via STORAGE-ERROR) based on available 
storage at the time the allocation is made. A collection may include storage 
used for run-time administration of the collection, and therefore should not 
be expected to accommodate a specific number of objects. Furthermore, cer¬ 
tain classes of objects such as unconstrained discriminant array components 
of records may be allocated outside a given collection, so a collection may 
accommodate more objects than might be expected. 

The specification of storage for a task activation (T* STORAGE-SIZE) is evalu¬ 
ated at run-time when a task to which the length clause applies is activated, 
and is therefore subject to rejection (via STORAGE-ERROR) based on available 
storage at the time the allocation is made. Storage reserved for a task ac¬ 
tivation is separate from storage needed for any collections defined within a 
task body. 

The specification of small for a fixed point type (T*SMALL) is subject only 
to restrictions defined in ANSI/MIL-STD-1815A section 13.2. 


F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enu¬ 
meration representation clause must be in the range of STANDARD. INTEGER. 

The value of an internal code may be obtained by applying an appropriate 
instantiation of UNCHECKED-CONVERSION to an integer type. 


F.5.3 Record Representation Clauses 

The storage unit offset (the at static-simplc.expression part) is given in terms 
of 8-bit storage units and must be even. 


B-9 








A bit position (the range part) applied to a discrete type component may 
be in the range 0. . 15, with 0 being the least significant bit of a component. 
A range specification may not specify a size smaller than can accommodate 
the component. A range specification for a component not accommodating 
bit packing may have a higher upper bound as appropriate (e.g. 0. .31 for 
a discriminant string component); the lower bound for such a type must 
be zero. Refer to the internal data representation of a given component in 
determining the component size and assigning offsets. 

Components of discrete types for which bit positions are specified may not 
straddle 16-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must evaluate 
to 1, 2, 4, or 8, and may not be smaller than the the highest alignment 
required by any component of the record. On PC-DOS, this means that 
some records may not have alignment clauses smaller than 2. 


F.5.4 Address Clauses 

An address clause may be supplied for an object (whether constant or vari¬ 
able) or a task entry, but not for a subprogram, package, or task unit. The 
meaning of an address clause supplied for a task entry is given in section 
F.5.5 

An address expression for an object is a 32-bit Segmented memory address 
of type SYSTEM.ADDRESS. 


F.5.5 Interrupts 

A task entry's address clause can be used to associate the entry with an PC- 
DOS interrupt. Values in the range 0. .255 are meaningful, and represent 
the interrupts corresponding to those values. 

An interrupt entry may not have any parameters. 


B-10 



F.5.6 Change of Representation 


A change of representation effected by means of type conversion between 
objects of two types, one type derived from a parent type for which a repre¬ 
sentation clause has been supplied (as described in AXSI/MIL-STD-1815A 
section 13.6), is not permitted. 


F.6 Implementation-Dependent Components 


No names are generated by the implementation to denote implementation- 
dependent components. 


F.7 Unchecked Conversions 


There are no restrictions on the use of UNCHECKED-CONVERSION. Conversions 
between objects w r hose sizes do not conform may result in storage areas with 
undefined values. 


F.8 Input-Output Packages 


A summary of the implementation-dependent input-output characteristics is: 

• In calls to OPEN and CREATE, the FORM parameter must be the empty 
string (the default value). 

• More than one internal file can be associated with a single external file 
for reading only. For writing, only one internal file may be associated 
with an external file; RESET may not be used to get around this rule. 

• Temporary sequential and direct files are given names. Temporary files 
are deleted when they are closed. 


B— 11 







• File I/O is buffered; text files associated with terminal devices are line- 
buffered. 

• The packages SEQUENTIAL-ID and DIRECT-ID cannot be instantiated 
with unconstrained composite types or record types with discriminants 
without defaults. 


F.9 Source Line and Identifier Lengths 


Source lines and identifiers in Ada source programs are presently limited to 
200 characters in length. 


B — 12 




APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by e extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning 


Value 


$ACC_SIZE 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


32 


SBIG_ID1 

An identifier the size of the 
maximum input line length which 
is identical to SBIGID2 except 
for the last character. 


(1..199 => 'A', 200 => '1') 


$BIG_ID2 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


(1..199 => 'A', 200 => '2') 


SBIGID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..99 => 'A', 100 => '3', 
101..200 => 'A') 


C-l 







TEST PARAMETERS 


Name and Meaning _ 

$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

SBIGSTRINGl 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

SBIGSTRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


<1..99 => 'A' , 100 => '4' , 
101..200 => 'A') 


(1..197 => 'O', 198..200 => "298") 


(1..195 => 'O', 196..200 => "690.0") 


(1 «> 2..101 «> 'A', 102 «> '"') 


<1 => 2..100 => 'A', 101 => '1', 

102 «=> '"') 


(1..180 => ' ') 

32766 

1024 

8 


C-2 











TEST PARAMETERS 


Name and Meaning _ Value _ 

$DEFAULT_SYS_NAME 18086 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_D0C 2.0**(-31) 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 32767 

A universal integer 

literal whose value is 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FL0AT_NAME N0_SUCH_FL0AT_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 

L0NG_FLOAT. 

$GREATER_THAN_DURATION 9 0000 .0 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE LAST 10000000.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRI0RITY 20 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 \NODIRECTORY\FILENAME1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 \N0DIRECT0RY\FILENAME2 

An 'external file name which 
is too long. 

$INTEGER_FIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 









TEST PARAMETERS 


Name and Meaning 


Value 


$INTEGER_LAST 32767 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 

whose value is INTEGER'LAST ♦ 1. 


$LESS_THAN_DURATION -90000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_Dl!RATION BASE_FIRST -10000000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


SLOWPRIORITY 1 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_D0C 31 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 


$MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:", 3. 

A universal integer based 198..200 => "11: 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


.197 «> 'O', 
"> 







TEST PARAMETERS 


Name and Meaning __ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1. .3 => "16:", 4..196 => 'O', 

197..200 => "F.E:") 

(1 => 2..199 => 'A', 200 => '"') 

-2147483648 

32 

BYTE_INTEGER 

18086 

16#FFFFFFFE# 

1024 


C-5 











TEST PARAMETERS 


Name and Meaning __ 

$NEV STOR UNIT 

An integer literal vhose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM. STORAGEJJNIT 

$NEV SYS NAME 

A value of the type SYSTEM.NAME, 
other than $D£FAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal vhose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal vhose value is 
SYSTEM.TICK. 


Value 


8 


18086 


32 


1.0/18.2 


C-6 








APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 43 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top pf the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

e. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 

tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 


D-l 







WITHDRAWN TESTS 


g. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

h. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

i. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

j. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

k. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

l. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

m. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose i iterpretation is considered problematic by the WG9 
ARG. 

n. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

o. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 

p. CE31I1C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

q. CE3301A: This test contains several calls to END_0F_LINE and 
END_0F_PAGE that have no parameter: these calls weri intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 


D-2 





WITHDRAWN TESTS 


132, and 136). 

r. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAYOUT_ERROR is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due tc a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 








