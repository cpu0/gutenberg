1*1 


Defence Research and Recherche et developpement 
Development Canada pour la defense Canada 


Copy No. 


DEFENCE 



C++ classes for representing airfoils 


David Hally 


Defence RSrD Canada - Atlantic 

Technical Memorandum 
DRDC Atlantic TM 2009-053 
January 2010 


Canada 



This page intentionally left blank. 



C++ classes for representing airfoils 


David Hally 


Defence R&D Canada - Atlantic 

Technical Memorandum 
DRDC Atlantic TM 2009-053 
January 2010 



Principal Author 


Original signed by David Hally 
David Hally 

Approved by 

Original signed by D. Hopkin 
D. Hopkin 

Head/Maritime Asset Protection 

Approved for release by 

Original signed by Ron Kuwahara for 
C. Hyatt 

Head/Document Review Panel 


© Her Majesty the Queen in Right of Canada as represented by the Minister of 
National Defence, 2009 

© Sa Majeste la Reine (en droit du Canada), telle que representee par le ministre 
de la Defense nationale, 2009 



Abstract 


A library of C++ classes for representing the geometry of airfoils is described. The 
classes are based on the CurveLib library for representing differentiable curves. Air¬ 
foils that have been represented explicitly include Joukowski airfoils, the NACA 
4-digit, 5-digit, 16-series and 6-series airfoils, as well as the DTMB modification of 
the NACA 66 airfoils commonly used for marine propellers. Generic airfoils can be 
defined from offsets on the airfoil surface or from offsets defining mean line and thick¬ 
ness curves. Several methods for closing the trailing edges of airfoils with a trailing 
edge gap are also implemented. 


Resume 


Le present document decrit une bibliotheque de classes C++ permettant de represen¬ 
ter la geometrie des surfaces aerodynamiques. Les classes de la bibliotheque CurveLib 
permettent de representer des courbes sous forme de fonctions differentiables. Les sur¬ 
faces aerodynamiques qui ont ete representees comprennent les profils de Joukowski, 
les profils NACA a 4 et a 5 chiffres, les profils de la serie 16 et de la serie 6, ainsi que 
la modification DTMB des prohls NACA 66, utilises couramment pour les helices de 
navire. Les prohls generiques peuvent etre definis a l’aide de decalages par rapport a 
la surface aerodynamique ou de decalages dehnissant la corde moyenne et les courbes 
d’epaisseur. Plusieurs methodes visant a terminer lc bord de fuite des prohls par un 
ecart sont egalement rnises en oeuvre. 


DRDC Atlantic TM 2009-053 


i 



This page intentionally left blank. 


ii 


DRDC Atlantic TM 2009-053 



Executive summary 

C++ classes for representing airfoils 

David Hally; DRDC Atlantic TM 2009-053; Defence R&D Canada - Atlantic; 
January 2010. 

Background: The flow around marine propellers affects their performance and the 
noise that they produce. Defence R&D Canada - Atlantic uses Computational Fluid 
Dynamics (CFD) to calculate these flows so that the performance and noise of pro¬ 
pellers can be evaluated and improved. Before the flow can be calculated, the ge¬ 
ometry of the propeller must be represented in a fashion that can be used by the 
CFD applications. The blade of a propeller is usually constructed from a series of 
airfoil sections. The current document describes a library of C++ classes which can 
be used to represent these airfoils so that they can be used as building blocks for the 
generation of propeller geometry. 

Principal results: A library of C++ classes for representing airfoils has been writ¬ 
ten. The classes are based on the CurveLib library for representing differentiable 
curves. Airfoils that have been represented explicitly include Joukowski airfoils, the 
NACA 4-digit, 5-digit, 16-series and 6-series airfoils, as well as the DTMB modifica¬ 
tion of the NACA 66 airfoils commonly used for marine propellers. Generic airfoils 
can be defined from offsets on the airfoil surface or from offsets defining mean line and 
thickness curves. Methods are implemented for closing the trailing edges of airfoils 
with a trailing edge gap. 

Significance: The library of C++ classes provides a useful tool for representing the 
geometry of airfoils for use in CFD programs. They are used as elements for the 
representation of the more complex geometry of marine propellers. 


DRDC Atlantic TM 2009-053 



Sommaire 


C++ classes for representing airfoils 

David Hally; DRDC Atlantic TM 2009-053; R & D pour la defense Canada - 
Atlantique ; janvier 2010. 

Introduction : L’ecoulement autour des helices de navire a une incidence sur leur 
rendement et sur lc bruit qu’clles produisent. R & D pour la defense Canada - Atlan¬ 
tique utilise la dynamique des fluides numerique (CFD) pour calculer ces ecoulcments, 
de sorte que le rendement et le bruit des helices peuvent etre evalues et ameliores. 
Avant de calculer l’ecoulement, il faut representer la geometrie des helices de ma- 
niere a ce qu’clle puisse etre utilisee dans les applications CFD. Les pales des helices 
sont habituellement composees de plusieurs elements qui presentent chacun une sur¬ 
face aerodynamique distincte. Le present document decrit une bibliotheque de classes 
C++ permettant de representer la geometrie de ces surfaces aerodynamiques, de sorte 
qu’clles peuvent etre utilisees comme elements structuraux pour generer la geometrie 
des helices. 

Resultats : Line bibliotheque de classes C++ permettant de representer la geome¬ 
trie des surfaces aerodynamiques a ete creee. Les classes de la bibliotheque CurveLib 
permettent de representer des courbes sous forme de fonctions differentiables. Les sur¬ 
faces aerodynamiques qui ont ete representees comprennent les profils de Joukowski, 
les prohls NACA a 4 et a 5 chiffres, les prohls de la serie 16 et de la serie 6, ainsi que 
la modification DTMB des prohls NACA 66, utilises couramment pour les helices de 
navire. Les prohls generiques peuvent etre dehnis a l’aide de decalages par rapport a 
la surface aerodynamique ou de decalages dehnissant la corde moyenne et les courbes 
d’epaisseur. Plusieurs methodes visant a terminer lc bord de fuite des prohls par un 
ecart sont egalement rnises en ?oeuvre. 

Portee : La bibliotheque de classes C++ est un outil pratique pour representer la 
geometrie des surfaces aerodynamiques a utiliser dans les programmes de CFD. Elies 
sont utilisees comme elements pour representer la geometrie plus complexe des helices 
de navire. 


IV 


DRDC Atlantic TM 2009-053 



Table of contents 

Abstract . i 

Resume . i 

Executive summary . iii 

Sommaire . iv 

Table of contents . v 

List of figures . vi 

1 Introduction . 1 

2 Airfoil geometry . 1 

3 Subsidiary classes . 3 

3.1 Exceptions . 3 

4 The base airfoil class . 4 

5 Airfoils defined by specifying the complete airfoil curve . 7 

5.1 Airfoils defined using offsets . 8 

5.1.1 Offsets splined using a standard cubic spline . 8 

5.1.2 Offsets splined using B-splines . 9 

5.2 Joukowski airfoils . 12 

5.2.1 The Joukowski conformal mapping . 12 

5.2.2 A class to represent a Joukowski airfoil . 15 

5.2.3 Classes to represent the potential flow around a Joukowski 

airfoil . 16 

6 Airfoils defined by specifying pressure and suction side curves . 17 

6.1 Airfoils defined using a thickness curve and a mean line offset curve 19 

6.1.1 Classes to represent mean line offset curves . 21 

DRDC Atlantic TM 2009-053 v 
























6.1.1.1 Mean line offset curves constructed from piecewise 

polynomial splines . 23 

6.1.1.2 NACA 4-digit mean line offset curve . 24 

6.1.1.3 NACA 5-digit mean line offset curve . 26 

6.1.1.4 Constant load mean line offset curve . 28 

6.1.1.5 Mean line offset curves which are circular arcs . . 30 

6.1.1.6 Mean line offset curves derived from offsets .... 31 

6.1.2 Classes to represent thickness curves . 31 

6.1.2.1 NACA 4-digit thickness curves . 34 

6.1.2.2 Thickness curve derived from offsets . 34 

6.1.3 NACA airfoils . 35 

6.1.4 The DTMB modification of the NACA 66 airfoil . 38 

7 Defining airfoils from hies . 39 

7.1 The CLOSE TRAILING EDGE record . 40 

7.2 BLUNT TRAILING EDGE . 40 

7.3 The JOUKOWSKI record . 41 

7.4 The NACA record . 41 

7.5 The NACA 66 DTMB(mod) record . 42 

7.6 The NAME record . 42 

7.7 The OFFSETS record . 42 

7.8 The THICKNESS DISTRIBUTION AIRFOIL record . 43 

7.9 Defining thickness distribution airfoils from hies . 43 

7.9.1 A class for defining mean line offset curves from a hie .... 45 

7.9.2 A class for defining thickness curves from a hie . 45 

8 Defining an airfoil from the command line . 46 


VI 


DRDC Atlantic TM 2009-053 























9 Concluding remarks . 49 

References . 51 

Annex A: Integrating mean lines . 53 

Annex B: Blunt closure of an airfoil . 57 

Annex C: Prototypes for FormattedOStream . 59 

C.l Constructors . 59 

C.2 Indentation functions . 59 

C.3 Line length functions . 60 

C.4 Inserters . 60 

C.5 Other member functions . 60 

C.6 Manipulators . 61 

List of symbols . 62 

Index . 64 


DRDC Atlantic TM 2009-053 vii 















List of figures 


Figure 1: The airfoil coordinate system and parameters . 2 

Figure 2: The Joukowski mappings . 13 

Figure 3: The lift characteristics as a function of ( m for a NACA 4-digit 

airfoil with cambre c = 0.01 . 25 

Figure 4: The lift characteristics as a function of Q m for a NACA 5-digit 

airfoil with cambre c = 0.01 . 27 

Figure 5: Constant load mean line offset curves with Cl = 0.3 for six values 

of a . 29 

Figure 6: Trailing edge closure by extension . 33 

Figure 7: Trailing edge closure with a parabola . 34 

Figure 8: Blunt trailing edge closure . 34 

Figure 9: The difference between airfoils generated with a BLUNT TRAILING 

EDGE record inside and outside an OFFSETS record . 44 

Figure B.l: Blunt trailing edge closure for an airfoil defined using the 

complete airfoil curve . 58 

Figure B.2: A case in which £ s is not well defined because the trailing edge 

gap crosses the mean line obliquely . 58 


viii 


DRDC Atlantic TM 2009-053 














1 Introduction 


The flow past airfoils is important in many aeronautical and marine applications. 
This document describes a library of C++ classes, hereafter called the Airfoil library, 
which can be used to represent the geometry of airfoils so that the flow around them 
can be calculated using Computational Fluid Dynamics (CFD) programs. The classes 
are based on the CurveLib library [1] for representing differentiable curves. 

Several families of airfoils are represented explicitly in the Airfoil library: Joukowski 
airfoils (Section 5.2), National Advisory Committee for Aeronautics (NACA) 4-digit, 
5-digit, 16-series and 6-series airfoils [2] (Section 6.1.3), and the David Taylor Model 
Basin (DTMB) modification of the NACA 66 airfoil commonly used in marine pro¬ 
pellers (Section 6.1.4). Generic airfoils can be generated from offsets on the airfoil 
surface (Section 5.1), or from mean lines and thickness curves (Section 6.1). The 
mean lines and thickness curves can themselves be defined from explicit representa¬ 
tions (Sections 6.1.1.2-6.1.1.5 and 6.1.2.1 or from offsets (Sections 6.1.1.6 and 6.1.2. 2). 

Methods for closing the trailing edges of airfoils with trailing edge gaps are also 
implemented (Section 6.1.2 and Annex B). 

Classes are also provided for defining airfoils from data in a file in OFFSRF for¬ 
mat [6] (Section 7) and for specifying an airfoil from the program command line in a 
Unix/Linux shell or DOS command window (Section 8). 

2 Airfoil geometry 


The Airfoil library allows the surface of an airfoil to be parameterized in two ways: 

• Using £, a parameter which is 0 at the trailing edge on the pressure side, | at 
the leading edge and 1 at the trailing edge on the suction side. The surface of 
the airfoil using this parameterization is x(£); this will be called the complete 
airfoil curve. Normally £ is approximately equal to the fractional arclength 
along the airfoil surface (since the leading edge must be at £ = |, it cannot be 
exactly equal to the fractional arclength unless the pressure and suction sides 
of the airfoil have the same length). 

• Using £, the fractional chord length along the straight line joining the leading 
edge (£ = 0) to the trailing edge (£ = 1). This parameterization requires 
that the airfoil surface be split into two different curves: p(£) for the pressure 
side and s(£) for the suction side. These curves will normally have undefined 
derivatives at the leading edge. 

These parameters are illustrated in Figure 1. 


DRDC Atlantic TM 2009-053 


1 




y 



t-o C«o 


Figure 1: The airfoil coordinate system and parameters. The origin of the coordinates 
is shown as if the airfoil is canonical. This airfoil has an open trailing edge. 


The location of the leading edge, x; e , cannot be determined simply from the geometry 
of the airfoil. Instead it is defined to be x(|), p(0) or s(0) (for a well-defined airfoil 
these points should all be the same). 

The trailing edge, x te , is ^ (x(0) + x(l)) or |(p(l) + s(l)) (for a well-defined airfoil 
these points should be the same). 

The chord line is the straight line connecting the leading edge and the trailing edge. 
The chord length is the length of the chord line: i.e. the distance between the leading 
and trailing edges. 

The mean line is the line equidistant from the pressure side and suction side curves. 
It is also difficult to define from the geometry alone. Airfoil classes are free to define it 
to suit their purposes provided that it lies within the airfoil and includes the leading 
and trailing edges. The default definition of the mean line is 

m (C) = Hp( 0 + s (0)- (!) 

However, note that with this definition the derivative at the leading edge is not well- 
defined as the derivatives of the pressure and suction side curves are not well-defined 
there. 

It is possible for an airfoil to be open at the trailing edge: i.e. x(0) 7 ^ x(l) and 
p(l) 7 ^ s(l). If it is closed, it may be blunt (i.e. the unit normal at the pressure 
side trailing edge is the same as the unit normal at the suction side trailing edge) 
or sharp (the unit normals at the trailing edge differ). The airfoil classes provide 
member functions for determining whether the trailing edge is closed or open, blunt 
or sharp, and for closing trailing edges in various ways. If the trailing edge is closed 
and blunt, the curves p(£) and s(£) will have undefined derivatives when £ = 1. 


2 


DRDC Atlantic TM 2009-053 





It is normal to define airfoils so that the leading and trailing edges lie at (0,0) and 
(1,0) respectively; the airfoil is then called canonical. The airfoil classes do not require 
an airfoil to be canonical but include a function that will scale and rotate any airfoil 
so that it is. 

3 Subsidiary classes 


There are a number of classes used by the Airfoil library that have previously been 
described in other reports. They are described briefly here. 

VecMtx::VecN<N,F> 

A vector of N elements of type F where F is usually a float or a double. 
VecMtx: :VecN<N,F> implements a full range of arithmetic operators. See Ref¬ 
erence 1, Annex B for a complete description of the class. 

CurveLib::Curve<N,V,F> 

A differentiable curve having N arguments of type F and which returns a value 
of type V. This class and its many derived classes are described in Reference 1. 

3.1 Exceptions 

All exceptions thrown by Airfoil classes and functions are derived from the base class 
Error in the global namespace. An Error contains a message which can be retrieved, 
appended to, or prepended to. The prototypes of the Error member functions are 
listed in Reference 1, Annex F. 

It is wise, when using the Airfoil library classes, to enclose the body of the code in a 
try block which catches an Error. For example: 

try { 

... // Code which uses Airfoil library classes 

> 

catch (Error &e) { 

// Write the error message 
std::cerr << e.get_msg() « ’\n’; 

> 

Another important exception is ProgError, a specialization of Error. It is thrown 
when an exception occurs that can clearly be recognized as a programming error 
rather than a error by the user. The occurrence of a ProgError is an indication that 
the program is faulty. The prototypes of the ProgError member functions are listed 
in Reference 1, Annex F.l. 


DRDC Atlantic TM 2009-053 


3 



4 The base airfoil class 


All classes in the Airfoil library are encapsulated in the namespace Afoil. 

All airfoils are derived from the base class Airfoil<F> which is itself derived from 
Curve<lU,VecMtx: :VecN<2U,F>,F>: that is, it is a one-parameter curve which re¬ 
turns a 2-vector representing a point on the airfoil surface. This curve is a represen¬ 
tation of x(£): i.e. each parameter is interpreted as a value of £. Each value of £ has 
type F and each component of the returned point also has type F. Usually F is float 
or double. 

Airfoil<F> provides the following alias for the type of the returned point: 
typedef VecMtx::VecN<2U,F> Point 

The airfoil curve represented by an instance of Airfoil<F> may be evaluated using 
the following two member functions: 

Point operator()(F xi) const 

Returns the value of x(£) at £ = xi. 

Point operator()(F xi, unsigned d) const 

Returns the value of the differentiated airfoil curve at xi. The number of 
derivatives to be taken is specified by d. If d is zero, then this function is 
equivalent to operator () (F xi) const. 

For example, suppose that we defined a NACA 0012 airfoil by 

using namespace Afoil; 

NACAAirfoil<double> naca_afoil("0012"); 

To evaluate the point on the airfoil at £ = 0.25 use: 

Airfoil<double>::Point p = naca_airfoil(0.25); 

To evaluate a tangent to the airfoil surface at the same value of £ we could use: 

Airfoil<double>::Point tangent = naca_airfoil(0.25,1); 

All curves derived from Airfoil<F> in the Airfoil library have a default constructor: 
i.e. a constructor having no arguments. The airfoil remains undefined if the default 
constructor is used, ft can later be defined using specialized member functions in the 
derived class or by assignment to another airfoil. 

Since an airfoil may remain undefined if a default constructor is used, Airfoil<F> 
provides the following member function for determining whether the curve is defined 
or not (it is actually inherited from Curve<N,V,F>). 


4 


DRDC Atlantic TM 2009-053 



bool is_defined() const 

Returns true if the airfoil has been defined; false if it has not. 

An attempt to evaluate an undefined airfoil will cause an Error exception to be 
thrown (see Section 3.1). 

An important property of classes derived from Airfoil<F> is that they are poly¬ 
morphic, even though the class Airfoil<F> has no virtual functions. For example, 
suppose a NACAAirf oil<double> is assigned to an Airf oil<double>: 

using namespace Afoil; 

NACAAirfoil<double> naca_afoil("0012"); 

Airfoil<double> afoil; 
afoil = naca_afoil; 

When evaluated with the same arguments, afoil will return the same value as 

naca_afoil. 

Airfoil<F> has the following members in addition to the default constructor, copy 
constructor, destructor and assignment operator. 

typedef CurveLib::Curve<lU,Point,F> CurveType 

The types of the curves defining the surface of the airfoil. These curves take 
a scalar parameter (either £ or () for an argument and return a point in two- 
dimensional space. 

typedef CurveLib::Curve<lU,F,F> ParamCurveType 

The type of the curves relating the curve parameters £ and (. These curves 
take a scalar value for an argument and return a scalar value. 

CurveType suction_side() const 

Returns a curve defining the suction side of the airfoil, s(£). The curve is 
parameterized by the fractional chord length, £. 

CurveType pressure_side() const 

Returns a curve defining the pressure side of the airfoil, p(£). The curve is 
parameterized by the fractional chord length, (. 

CurveType mean_line() const 

Returns a curve defining the mean line, m(£), as a function of the chord fraction 
(. If the curve returned is undefined, there is no cambre. 

The default version of this function defines the mean line as the average of the 
pressure and suction side curves: m(£) = |(p(C) + S (C))- Note that this curve 
(the default only) will not have a well-defined derivative at the leading edge. 


DRDC Atlantic TM 2009-053 


5 


ParamCurveType zeta() const 

Returns a curve giving the fractional chord length, (, as a function of the curve 
parameter £. 

ParamCurveType xi(bool pressure) const 

Returns a curve giving the curve parameter £ as a function of the fractional 
chord length, (. If pressure is true, the mapping is for the pressure side of the 
airfoil (£ will be in the range [0, |]); otherwise it is for the suction side (£ will 
be in the range [|, 1]). 

bool is_closed() const 

Returns true if the airfoil is closed at the trailing edge, 
bool is_blunt() const 

Returns true if the airfoil is blunt at the trailing edge: i.e. the unit normal at the 
trailing edge on the suction side is the same as the unit normal on the pressure 
side. If the trailing edge is not closed, it is not blunt. 

void close_trailing_edge() 

Ensures that the airfoil has a closed trailing edge; does nothing if the trailing 
edge is already closed. The trailing edge will be sharp. 

void make_trailing_edge_blunt(F radius) 

If the airfoil has an open trailing edge, closes it such that it is blunt; does nothing 
if the trailing edge is already closed. The argument radius is the approximate 
radius of curvature of the trailing edge. It must be strictly positive. 

bool is_canonical() const 

True if the airfoil is canonical: i.e. its leading edge is at (0,0) and its trailing 
edge is at (1,0). 

void canonical() 

Scales and rotates the airfoil so that the leading edge is at (0,0) and the trailing 
edge is at (1,0). 

Point leading_edge() const 

Returns the location of the leading edge. 

Point trailing_edge() const 

Returns the location of the trailing edge. 


6 


DRDC Atlantic TM 2009-053 



F chord_length() const 

Returns the chord length. 

F leading_edge_radius() const 

Returns the radius of curvature at the leading edge. Since the curvature at the 
leading edge is often discontinuous, it is best to treat the returned value as an 
approximation. 

F trailing_edge_radius() const 

Returns the radius of curvature at the trailing edge. Throws a ProgError if the 
trailing edge is open or sharp. 

F radius_of.curvature(F xi) const 

Returns the radius of curvature at £. Note that, as airfoils often consist of 
piecewise curves, the curvature may not be continuous. 

5 Airfoils defined by specifying the complete 
airfoil curve 


Airfoils can be defined either by specifying the complete airfoil curve, x(£), or by 
specifying the pressure and suction side curves, p(£) and s(£). In this section we 
consider airfoils which use the former method. 


Since the airfoil is defined in terms of the parameter £, the parameter £ must also be 
defined in terms of £. This is done by projecting the average of x(£) and x(l — £) 
onto the chord line: 


C(0 


(i(x(0 + X (! - 0) - X «e) ' ( X te - x £e) 

|X te - X ; e | 2 


( 2 ) 


The inverse of this curve having its value in [0, |] (the pressure side) is denoted £ p (£): 

£p(C(0)=£ for all £ e [0, |] (3) 

Similarly, the inverse of £(£) having its value in [|, 1] is denoted £ s (£). The pressure 
and suction curves are then defined by 


p(0 = x fe(0); s(C)=x(^(0) (4) 


Notice that Equation (2) implies that £(1 — £) = £(£) which in turn requires that 
£ p (£) = 1 — £ S (C)- Therefore the default mean line curve can be written 

m (C) = Kp(0+ s ( 0) = |[ x fe(0)+ x (i-^(0)] = 4[ x ( 1 -6(C))+ x (6(C))] (5) 

Therefore the curve | (x(£) + x(l — ^)) also traces out the mean line for £ in [0, |] or 

[!,!]• 


DRDC Atlantic TM 2009-053 


7 




5.1 Airfoils defined using offsets 

The Airfoil library provides two classes that will define an airfoil by splining a list 
of (x, y) offsets. In the first a standard cubic spline (see Reference 4, Section 8.3) is 
used; in the second B-splines are used. The offsets are splincd to generate the surface 
of the airfoil in terms of the parameter £. The curves relating £ to the fractional chord 
length £ and the curves giving the pressure and suction sides of the airfoil surface 
parameterized by £ are determined from the curve parameterized by £. 

The offsets should be ordered starting at the trailing edge on the pressure side, pro¬ 
ceeding along the pressure side to the leading edge, then back along the suction side 
to the trailing edge. There must be an offset point at the leading edge; the spline 
parameterization is adjusted so that this point has a £-value of 

The enura TrailingEdgeSpec is used for specifying the geometry at the trailing edge 
of airfoils defined using offsets. It can have the following values: 

open_te 

The trailing edge of the airfoil will be left open. 
sharp_te 

The trailing edge will be closed but will remain sharp: i.e. the normals at the 
trailing edge on the pressure and suction sides will differ. 

blunt_te 

The trailing edge will be closed and the normals at the trailing edge on the 
pressure and suction sides will be the same. 

5.1.1 Offsets splined using a standard cubic spline 

The class Of f setAirf oil<F> is a specialization of Airf oil<F> that defines the airfoil 
surface by interpolating a list of (x, y) offsets with a standard cubic spline. It has the 
following members in addition to the default constructor, copy constructor, destructor 
and assignment operator. 

typedef typename Airfoil<F>::Point Point 
The type of a point on the airfoil. 

typedef std::vector<Point> OffsetList 

The type of the list of offsets. 

OffsetAirfoil(const OffsetList felist, unsigned ile, 

TrailingEdgeSpec te_spec = open_te) 

Makes an airfoil using the offsets in list. The offset point at the leading edge 


8 


DRDC Atlantic TM 2009-053 


has index ile: i.e. the leading edge point is list [ile]. 

The offset points are interpolated using a standard cubic spline (see Reference 4, 
Section 8.3). The argument te_spec indicates how the trailing edge will be 
treated. 

If the points at the trailing edge on the pressure and suction sides are the same 
and if te_spec is blunt_te, then the cubic spline will be periodic. Otherwise 
the spline will be a simple cubic spline. 

If the points at the trailing edge on the pressure and suction sides differ and 
if te_spec is sharp_te or blunt_te, then either close_trailing_edge() or 
raake_trailing_edge_blunt () is called to close the trailing edge. 

void define(const OffsetList &list, unsigned ile, 

TrailingEdgeSpec te_spec = open_te) 

Defines the airfoil in a manner similar to the constructor described above. 


void close_trailing_edge() 

This function, inherited from Airf oil<F>, closes the trailing edge by closing the 
£-curve using a parabola starting at ( 0 — 1 — |A where A is the separation of 
the points at the trailing edge: A = |x(l) — x(0)|. A straight line is constructed 
which passes through the mean line at m(£o) and is normal to it. The values 
of £ where the line crosses the £-curve on the pressure and suction sides will be 
denoted £ p and £ s . The £-curve, x(£), is then replaced by: 


«(0 


’ X(0 - 
< x (0, 
x(0- 


(f-6) 2 ( x (°) -x te ) 

% 

(^-^s) 2 ( x (l) - x te) 
( 1 ~ 6) 2 


£ e [0, £ p ] 

[£ p ,£ s ] 

[ 6 , 1 ] 


( 6 ) 


where x te = |(x(0) + x(l)). 


void make_trailing_edge_blunt(F radius) 

If the trailing edge is open, this function, inherited from Airfoil<F>, closes it 
such that it is blunt. If the trailing edge is already closed, nothing is done. The 
algorithm used is described in Annex B. 


5.1.2 Offsets splined using B-splines 

A BSplineOffsetAirfoil<F> is an airfoil defined using a list of offsets which are 
splined using B-splines with a prescribed knot sequence. Unlike Off setAirf oil<F>, 
the knots need not lie at the offset points. 


DRDC Atlantic TM 2009-053 


9 






The main use of BSplineOffsetAirfoil<F> is when several airfoils are to be com¬ 
bined to create a surface. Each airfoil is represented as a BSplineOff setAirfoil<F> 
with the same knot sequence. The spline coefficients can then be splined to generate 
a tensor product B-spline surface (see Reference 4, Section 9.2). 

Currently it is not possible to make a BSplineOf f setAirf oil<F> have a blunt trailing 
edge. 

typedef std::vector<Point> OffsetList 

The type of the list of offsets. 

typedef typename Spline::BSpline<Point,F>::CoefArray CoefArray 

The type of the list of B-spline coefficients use by the spline of the airfoil surface 
as a function of £. 

BSplineOffsetAirfoil(const OffsetList felist, unsigned ile, 

TrailingEdgeSpec te_spec = open_te) 

Makes an airfoil by splining the offsets in list to obtain the airfoil surface 
parameterized using £. The offset point at the leading edge has index ile. The 
spline will be cubic and its knots will be calculated from the ^-values of the 
offset points (determined using make_xi_values_from_off setsO) using the 
not-a-knot condition. The argument te_spec indicates how the trailing edge 
will be treated. Currently te_spec is not allowed to be blunt_te. If te_spec 
is sharp_te, the trailing edge will be closed even if the offset points there differ. 

BSplineOffsetAirfoil(const OffsetList felist, unsigned ile, unsigned k, 

const Spline::KnotSeq<F> &kts, 

TrailingEdgeSpec te_spec = open_te) 

Makes an airfoil by splining the offsets in list to obtain the airfoil surface 
parameterized using £. The offset point at the leading edge has index ile. The 
order of the spline is k and its knot sequence is kts. The argument te_spec 
indicates how the trailing edge will be treated. Currently te_spec is not allowed 
to be blunt_te. If te_spec is sharp_te, the trailing edge will be closed even 
if the offset points there differ. 

The size of list must equal k plus the size of kts. 

BSplineOffsetAirfoil(const Spline::KnotSeq<F> &xi_vals, 

const OffsetList felist, 

TrailingEdgeSpec te_spec = open_te) 

Makes an airfoil by splining the offsets in list to obtain the airfoil surface 
parameterized using £. The ^-values of the offset points are in xi_vals. The 
spline will be cubic. The argument te_spec indicates how the trailing edge will 


10 


DRDC Atlantic TM 2009-053 


be treated. Currently te_spec is not allowed to be blunt_te. If te_spec is 
sharp_te, the trailing edge will be closed even if the offset points there differ. 

The size of list must equal the size of xi_vals and also equal k plus the size 
of kts. 

BSplineOffsetAirfoil(const Spline::KnotSeq<F> &xi_vals, 

const OffsetList &list, unsigned k, 
const Spline::KnotSeq<F> &kts, 

TrailingEdgeSpec te_spec = open_te) 

Makes an airfoil by splining the offsets in list to obtain the airfoil surface 
parameterized using £. The ^-values of the offset points are in xi_vals. The 
order of the spline is k and its knot sequence is kts. The argument te_spec 
indicates how the trailing edge will be treated. Currently te_spec is not allowed 
to be blunt_te. If te_spec is sharp_te, the trailing edge will be closed even 
if the offset points there differ. 

The size of list must equal the size of xi_vals and also equal k plus the size 
of kts. 

void define(const OffsetList &list, unsigned ile, 

TrailingEdgeSpec te_spec = open_te) 

Defines the airfoil in the same manner as the constructor with the same argu¬ 
ments. 

void define(const OffsetList felist, unsigned ile, 

unsigned k, const Spline::KnotSeq<F> fekts, 

TrailingEdgeSpec te_spec = open_te) 

Defines the airfoil in the same manner as the constructor with the same argu¬ 
ments. 

void define(const Spline::KnotSeq<F> &xi_vals, const OffsetList felist, 
TrailingEdgeSpec te_spec = open_te) 

Defines the airfoil in the same manner as the constructor with the same argu¬ 
ments. 

void define(const Spline::KnotSeq<F> &xi_vals, const OffsetList felist, 
unsigned k, const Spline::KnotSeq<F> fekts, 

TrailingEdgeSpec te_spec = open_te) 

Defines the airfoil in the same manner as the constructor with the same argu¬ 
ments. 

unsigned order() const 

Returns the order of the spline of the airfoil surface parameterized using £. 


DRDC Atlantic TM 2009-053 


11 



const typename Spline::KnotSeq<F>& knots() const 

Returns the knot sequence used by the airfoil surface parameterized using £. 

const CoefArrayfe Bspline_coefs() const 

Returns the B-splinc coefficients used by the airfoil surface parameterized us¬ 
ing f. 


5.2 Joukowski airfoils 

Joukowski airfoils are important because there is an analytic solution to the potential 
flow around them. This makes them suitable for verification of software calculating 
potential flow. 


5.2.1 The Joukowski conformal mapping 

A Joukowski airfoil is defined in the complex plane by the conformal mapping w(z) 
defined by: 


q(z) = C + (a — C)z; 

= « (z) + ir) 

w(z ) = A + Bp(z ); 


C = x + iy 



B 


a — 2x 
4 (a — x ) 2 


(7) 

( 8 ) 

( 9 ) 


where a is real. The mapping from z to q shifts the unit circle to a new circle centred 
at C and passing through (a, 0). The mapping from q to p then transforms this circle 
to an airfoil shape with trailing edge at (2a, 0). The mapping from p to w then scales 
and translates the airfoil so that it is canonical. Each of the mappings is illustrated 
in Figure 2. 


The surface of the airfoil can be parameterized with the angle 9 used to traverse the 
unit circle: z = e %e . The trailing edge is at 9 = 0 or 27 t and the leading edge is at 


9le = 7T + 20 ; 


0 = arctan 



Zle 


C-a 

a-C 


( 10 ) 


The thickness of the airfoil is controlled by x. When it is small, the maximum 
thickness occurs when 9 = 27t/ 3 and is given by: 


3\^3x 
4 a 


( 11 ) 


12 


DRDC Atlantic TM 2009-053 








( 1 , 0 ) 


13 


As x approaches zero, the airfoil becomes infinitely thin. Therefore we can define a 
mean line by setting x = 0: 

w m (d) = ; q = iy + {a- iy)e ld (12) 

4 aq 

The carnbre is determined from the point where Im (dw m /dd) = 0. To hrst order in y 


c = 


y_ 

2 a 


We can specify a canonical airfoil uniquely given c and t by setting a 
the hrst order expressions of Equations (11) and (13). 


4 1 


x = 


3V3’ 


y = 2c 


(13) 

1 and using 

(14) 


The class JoukowskiMapping<F> represents the conformal mapping w(z) from the 
region in the complex plane exterior to the unit circle, to the region exterior to a 
Joukowksi airfoil in the complex plane. The airfoil is canonical: i.e. the leading and 
trailing edges are at w = 0 and w — 1 respectively. 

JoukowskiMapping<F> is derived from CurveLib: :Curve<lU,Cmplx,Cmplx>, where 
Cmplx is an alias for std: : complex<F>: i.e. JoukowskiMapping<F> is a curve with 
a complex argument returning a complex value. It has the following member func¬ 
tions the default and copy constructors, virtual destructor, assignment operator and 
members inherited from its base classes. 

JoukowskiMapping(F t, F c) 

Makes a Joukowski mapping for an airfoil with thickness t and carnbre c. The 
thickness and carnbre are used to define x and y using the hrst order expressions 
of Equation (14); therefore the thickness and carnbre of the airfoil will only 
approximate the values of t and c. 

void define(F t, F c) 

Redefines the airfoil in the same manner as the constructor above. 

F carnbre() const 

Returns the carnbre used when dehning the mapping. 

F thickness() const 

Returns the thickness used when dehning the mapping. 

FloatType leading_edge() const 

Returns the 2 -value of the leading edge. 


14 


DRDC Atlantic TM 2009-053 




It is often also convenient to be able to evaluate the inverse Joukowski mapping: i.e. 
evaluate z given w: 


P(w ) = W B A ; q(w) = | (p(w) ± \/p(w) 2 -4a 2 ); = (15) 

In the evaluation of q(w), the root which makes |o(w;)| > 1 must be chosen. 

This mapping is implemented by the class InvJoukowskiMapping<F> which has con¬ 
structors and define function similar to JoukowskiMapping<F>. It also has the 
following constructor: 

InvJoukowskiMappingCJoukowskiMapping<F> jm) 

Makes a mapping which is the inverse of jm. 

5.2.2 A class to represent a Joukowski airfoil 

The class JoukowskiAirfoil<F> represents a Joukowski airfoil. It is derived from 
Airfoil<F>. 

The airfoil surface can be traced using a Joukowski mapping with z = e ld . To 
conform with the parameterization of the Afoil classes, 9 must be converted to a 
new parameter whose value is 0 or 1 at the trailing edge and \ at the leading edge. 
This can be done using the mapping: 

9 — —27t£ + 32</>£ 2 (l — £) 2 (16) 

Notice that as £ increases from 0 to 1, 6 decreases from 0 to —27r, thus traversing the 
airfoil clockwise in conformance with the requirements for the parameter £. 

We use £ 2 (l -£) 2 in Equation (16), rather than £(1 —£), so that the du/dr] is the same 
on both sides of the airfoil at the trailing edge. This makes the mean line defined by 
l(u(£) + u( 1 — £)) more nearly equidistant between the two sides of the airfoil near 
the trailing edge. 

The parameter £ defined in Equation (16) has the drawback that du/dC, = 0 at the 
trailing edge. This might cause problems, for example when generating a normal to 
the airfoil at the trailing edge. We can avoid this problem by defining 

e = -2 tt V + 32^ 2 (1 - 77 2 ); v = i(l + y/l - v'R) (17) 

JoukowskiAirfoil<F> has the following members as well as the default and copy 
constructors, virtual destructor, assignment operator and members inherited from its 
base classes. 


DRDC Atlantic TM 2009-053 


15 






JoukowskiAirfoil(F t, F c, bool finite_te_deriv = false) 

Makes a Joukowski airfoil with thickness t and cambre c. The thickness and 
cambre are used to define x and y using the first order expressions of Equa¬ 
tion (14); therefore the thickness and cambre of the airfoil will only approximate 
the values of t and c. 

If f inite_te_deriv is true, then the ^-parameterization defined by Equa¬ 
tion (17) is used to ensure that the first derivative of the airfoil £-curve will 
be finite at the trailing edge. If f inite_te_deriv is false, then the parameter¬ 
ization defined by Equation (16) is used and the first derivative at the trailing 
edge will be zero. The £-curve with finite derivatives evaluates somewhat less ef¬ 
ficiently than the one with zero derivatives; however, it is better behaved when, 
for example, one wishes to generate a normal to the airfoil at the trailing edge. 

void define(F t, F c, bool finite_te_deriv = false) 

Redefines the airfoil in the same manner as the constructor above. 


5.2.3 Classes to represent the potential flow around a Joukowski 
airfoil 


The namespace Af oil also includes classes that can be used to determine the potential 
flow around a Joukowski airfoil. This is an important verification case for flow solvers. 


The complex potential for the flow past a Joukowski airfoil with speed V at infinity 
at angle of attack a is: 


<f> = 


V(a — 2x)\a — C\ 


( ze -i(o+« + e i <«+*) j J.) + 2 i S j n ( a + 0) 1„ ("£ 


(18) 


4(a — x) 2 

The complex velocity is obtained by differentiating the potential with respect to w: 

d<J> dcj) I dw 


v x - IVy = 


dw dz / dz 


(19) 


Special care must be taken when evaluating the complex velocity at the trailing edge 
since dw/dz = 0 there. 


The classes JoukowskiPotential<F> and JoukowskiVelocity<F> are curves with 
complex arguments which evaluate the complex potential and complex velocity re¬ 
spectively for the flow past a Joukowski airfoil. They are both derived from the class 
Curve<lU, std: :complex<F>,std: :complex<F> > in namespace CurveLib. 


The parameter of these curves is the value of z used in the Joukowski mapping: it is 
restricted to values outside the unit circle in the complex plane. The point at which 
the potential is evaluated is w(z), where w is the Joukowski mapping. 


16 


DRDC Atlantic TM 2009-053 





JoukowskiPotential<F> has the following members as well as the default and copy 
constructors, virtual destructor, assignment operator and members inherited from 
its base classes. The members of JoukowskiVelocity<F> are identical: only the 
returned value is different. 

JoukowskiPotential(F t, F c, F v, Angle<F> alpha) 

Makes a curve which evaluates the potential for an airfoil with thickness t and 
cambre c. The flow at infinity is v and the angle of attack is alpha. 

The thickness and cambre are used to define x and y using the first order 
expressions of Equation (14); therefore the thickness and cambre of the airfoil 
will only approximate the values of t and c. 

void define(F t, F c, F v, Angle<F> alpha) 

Redefines the airfoil in the same manner as the constructor above. 

6 Airfoils defined by specifying pressure and 
suction side curves 


If an airfoil is defined by specifying the pressure and suction side curves, then the 
parameter £ must be defined in terms of £ and the complete airfoil curve, x(£), must 
be defined from p(£) and s(£). We first consider the mapping from £ to £. 

The pressure and suction side curves are sampled at an initial set of £ values, 0, 
for i G [1,1V]. One of the sample points, i = ii e is chosen to be at the leading 
edge. Straight line segments between the sampled points are used to approximate the 
arclength between each adjacent pair of points. For each i, a new point is sampled 
at 0+1/2 = 2 (0 T 0+i )• Suppose that these points lie on the pressure side. Then if 

| P (O+I/ 2 ) - p(0)| + |p(0+l) - p(0+l/2)| > |p(0+l) - p(0)| + e| X te - Xie I (20) 

the point p(0+i) is added to the sample set; otherwise the straight line is deemed a 
sufficiently accurate approximation to the segment. The factor e is set to 10~ 4 . The 
points on the suction side are refined in a similar way. 

Once every segment is sufficiently accurate, the lengths of the segments are used to 
approximate the fractional arclength, a*, at each sample point. We define £ as a 
function of a by 

(| - cq e )a 2 (l - a) 2 
f = a + - YT-x - N2 - 

a t( 1 - a ^y 

where a; e is the value of a at the leading edge. This definition ensures that £(0) = 0, 
£(a; e ) = \ and £(1) = 1 as required. 



DRDC Atlantic TM 2009-053 


17 




A Hermite spline (see Reference 4, Section 8) is used to interpolate the Q with respect 
to the & = £(a,i) yielding the curve C(0- The slopes of the spline are first calculated 
so that the second derivatives of the spline are continuous at the knots (a standard 
cubic spline). The slope at the leading edge is then adjusted to be exactly zero. The 
algorithm of Fritsch and Carlson [3] is then used to ensure that the spline is monotonic 
on each of the pressure and suction sides. 


The complete airfoil curve is defined by 

x(0 = 


p(c(0) for f e [°> |] 

s(C(0) for £ e [\i l] 


Typically the pressure and suction side curves have a form similar to 

p(0 = -ft\/2rC + o(C); s(C) = n^/irC, + o(() 


( 22 ) 


(23) 


near the leading edge where r is the radius of curvature at the leading edge. From 
the spline expansion of £(£) we have 

( a(€~ I ) 2 + °(£ 3 ) f o r S < I (24) 

\ b(£-l) 2 + o(e) for£>l 

where a and b are constants whose values are generally different. This reflects the fact 
that, by setting the slope to zero at the leading edge, we have altered the spline so 
that its second derivative is no longer continuous there. Substituting Equations (24) 
and (23) into Equation (22) gives 


x(0 


\/2ra (£ — |)n + o((£ — |) 2 ) for f | 
v / 2r6 (^ - \)h + o((£ - |) 2 ) for ^ \ 


(25) 


Since, in general, a ^ b, the curve x(£) will have discontinuous slope at the leading 
edge. Since we want x(£) to be smooth, it is necessary to adjust £(£) at the leading 
edge so that its second derivative is continuous. This is done as follows. 


Let t _i and t,\ be the spline knots for the curve C(^) that lie on either side of the 
leading edge. The values of a and b can be determined from the spline coefficients. 
We define a new function £(£) by 


Cneui(0 = C(0 + 


2(| -for) 3 

(q-fe)(e-|) 2 (e-*i ) 3 

2(| — ^i) 3 




0 


for f G [t- 1, \] 

for f G [§,ti] 
otherwise 


(26) 


18 


DRDC Atlantic TM 2009-053 









The new function is smooth and has continuous second derivatives. 


There is still the problem that because p'(l) and s'(|) are n °t well-defined, x(£) 
as defined by Equation (22) will have undefined derivatives when evaluated at the 
leading edge, even though the derivatives are well-defined in the limit £ —»► 1. To 
avoid this problem we use the representation of x(£) in Equation (22) except in a 
very small region close to the leading edge where we use two parabolic segments 
instead. The parabolic segments cover the regions £ G [1 — 5, 1] and £ G [|, | + 5] 
with 5 = e 3//4 , where e is the smallest floating point number of type F such that 
1 + e is indistinguishable from 1. The coefficients of the parabolae are chosen so that 
they interpolate the points p 0 = p(£(| — 5)), Pi = p(C(| — |5)) and p 2 = p(£(|)) 
on the pressure side and s 0 = S (C(|)), s i — S (C(| + |5)) and s 2 = s(£(| + 5)) on the 
suction side. We now define the complete airfoil curve by 

' p««)) 

(3po - 4pi + p 2 ) (? — |) 

Pr,+ j 

(2p 0 - 4p, + 2p 2 )(£ - i) 2 

' ^2 

(3s 0 — 4si + s 2 ) (£ — 

S ° 5 “ 

(2s 0 — 4sx + 2 s 2 ) (£ — 

+ §2 

, s(C(0) for £ e [| + 5,1] 

If the trailing edge is blunt, a similar process is used on the regions £ G [0, 5] and 
£G [1-5,1], 

The curve x(£) is not smooth at £ = | — S, \ and 1 + 5, but the discontinuities are 
so small (because 5 is so small) that for all practical purposes this is inconsequential. 

6.1 Airfoils defined using a thickness curve and a 
mean line offset curve 

A common method of defining airfoils is via a thickness curve (also known as a 
thickness distribution) and a mean line offset curve. Define the thickness curve t(Q 
to be a non-negative scalar-valued function such that t( 0) = 0 and i(£) > 0 for all £ 
in (0,1). The value of t(Q is the half-thickness of the airfoil at £. Also define a mean 
line offset curve m(£) to be a scalar-valued function giving the ^/-offset of the mean 
line from the chord line. The two sides of the airfoil are defined by: 

P(C) = m (C) ~n{C)t(C) (28) 


for £ G [0,1 — 5] 

for £ G [1 - 5,1] 

(27) 

for £ G [1,1 + 5] 


DRDC Atlantic TM 2009-053 


19 








s(0 = m(C) + n(()t(() 

m(C) = (xie + C {xte - Xie))x + m(()y 

where m(£) is the mean line (note that this is different from the mean line 
and n = (n x ,n y ) is a unit normal to the mean line: 

m'{ C) x te - x Le 

\/W(C) 2 + {x te -xi e ) 2 ' V y/m'( C) 2 + (x te - x le ) 2 

The airfoil is canonical if xi e = 0, x te = 1 and m(0) = m( 1) = 0. 

Notice that because the normal depends on the derivative of the mean line offset 
curve, p(C) and s(£) will have one degree less continuity than m((). In particular, if 
m(Q is only C 1 , then p(^) and s(£) will only be C°. 

ThickDistAirfoil<F> is a base class for airfoils which are dehned using a thickness 
curve and a mean line offset curve represented by the classes ThicknessCurve<F> 
and MeanLineOf f set<F> respectively: see Sections 6.1.1 and 6.1.2. It is derived from 
the base class Airfoil<F> and has the following members as well as the default and 
copy constructors, virtual destructor, assignment operator and those inherited from 
its base classes. 

ThickDistAirfoil(ThicknessCurve<F> t, MeanLineOffset<F> in, 

F xie = F(0), F xte = F(l)) 

Makes an airfoil with thickness curve t and mean line offset m. The x-values of 
the leading and trailing edges are given by xie and xte. 

MeanLineOffset<F> mean_line_offset() const 

Returns the mean line offset curve, m(C). If the returned curve is undefined (i.e. 
if mean_line_off set () . is_def ined() returns false), then the airfoil has no 
cambre. 

Note that the returned curve is scalar-valued unlike the curve returned by the 
inherited function raean_line() whose value is a 2-vector representing the (x, y ) 
coordinates of a point on the mean line. 

void set_mean_line_offset(MeanLineOffset<F> ml) 

Sets the mean line offset curve to ml. If ml is undefined (i.e. if ml. is_def ined() 
is false), the airfoil will have no cambre. 

ThicknessCurve<F> thickness() const 

Returns a curve defining the thickness curve, £(£). 

void set_thickness(ThicknessCurve<F> t, bool blunt = false) 

Sets the thickness curve to t. If blunt is true, then the airfoil will assume that 
the thickness curve is closed and blunt. 


(29) 

(30) 
offset) 

(31) 


20 


DRDC Atlantic TM 2009-053 






void close_trailing_edge_by_extension() 

Ensures that the airfoil has a closed trailing edge by extending the range of 
the thickness curve until it is zero; the parameter ( is then scaled so that it is 
1 at the new trailing edge location: see Section 6.1.2 for a description of the 
algorithm used. The trailing edge will be sharp. 

An Error will be thrown if the slope of the thickness curve is not strictly 
negative at ( = 1. 

void close_trailing_edge_with_parabola(F zetaO = F(1)) 

Ensures that the thickness curve has a closed trailing edge by adding a parabolic 
curve to it starting at ( = zetaO. The parabola is chosen so that the thickness 
curve is smooth: see Section 6.1.2 for a description of the algorithm used. The 
new trailing edge is sharp. 

If the value of zetaO is not in [0,1) the location of maximum thickness is used. 
If the trailing edge is already closed, nothing is done. 

void close_trailing_edge() 

This function, inherited from Airfoil<F>, closes the trailing edge by closing 
the thickness curve using a parabola starting at ( = 1 — where A is the 
thickness at the trailing edge: i.e. if afoil is a ThickDistAirfoil<F>, 

afoil.close_trailing_edge(); 

is equivalent to: 

F half_delta = afoil.thickness()(1); 

afoil.close_trailing_edge_with_parabola(l-half_delta); 

6.1.1 Classes to represent mean line offset curves 

An important class of airfoils defines the airfoil shape using a mean line offset curve 
and a thickness curve: see Section 6.1. In this section we describe classes to represent 
mean line offset curves. 

A mean line offset curve, m((), is said to be canonical if its value at both ( = 0 and 
C = 1 is zero. This is a necessary condition for the airfoil using the mean line offset 
curve to be canonical. 

The value of the maximum offset of the mean line is the cambre, c. The location of 
the maximum offset is denoted ( m . 

For thin airfoils, the mean line offset curve is sufficient to define the characteristics 
of the airfoil lift (see, for example, Abbot and von Doenhoff [2], Chapter 4). The lift 


DRDC Atlantic TM 2009-053 


21 


coefficient predicted by thin airfoil theory for a canonical meanline offset curve is 


Cl = 27 r(a — a 0 ); a 0 = — / m(C)/i(C) d C; /i(C) = -7= ... 

Wo vC(! - C ) 3 

where a 0 is the angle of zero lift. The pitching moment around ( = \ is 

1 — 2C 


(32) 


7r 


C m = 2/ m(C)/ 2 (C)^C+7T«o; /2(C) = 


\/C(i - 0 


(33) 


When a = oti, with 


= /3(C) = y==S < 34 > 

the velocity held near the leading edge of an infinitesimally thin airfoil has no singu¬ 
larities; a* is called the ideal angle of attack. The lift coefficient at the ideal angle of 
attack is called the ideal or design lift coefficient, Cli- 

Notice that /2(C) and /3(C) are antisymmetric about C = Therefore, if the mean 
line offset is symmetric about ( = the integrals in Equations (33) and (34) vanish 
and we have 

oti — 0; C u = -2™ 0] c m = ^ = -^f (35) 

Mean line offset curves are represented by the class MeanLineOf f set<F> derived from 
the base class CurveLib: :Curve<lU,F,F>. It has the following public members as 
well as the default and copy constructors, virtual destructor, assignment operator and 
members inherited from its base classes. 


typedef CurveLib::Curve<lU,F,F> CurveType 

The type of the curve used to represent the mean line offset curve. 


MeanLineOffset() 

Makes a canonical mean line offset curve having no carnbre. 


MeanLineOffset(CurveType crv) 

Makes a mean line offset curve using the curve crv. 


void define(CurveType crv) 

Redefines the mean line offset curve using the curve crv. If crv is undefined, 
the mean line will have no carnbre. 


22 


DRDC Atlantic TM 2009-053 










F cambreO const 

Returns the carnbre. 

bool is_canonical() const 

True if the mean line offset curve is canonical. 

F zeta_at_maximuin_ordinate() const 

Returns the location of the maximum ordinate. 

F design_lift_coefficient() const 

Returns the design lift coefficient. The mean line offset curve must be canonical. 

Angle<F> ideal_angle_of_attack() const 

Returns the ideal angle of attack. The mean line offset curve must be canonical. 

Angle<F> angle_of_zero_lift() const 

Returns the angle of zero lift. The mean line offset curve must be canonical. 

F pitching_moment_coefficient() const 

Returns the pitching moment coefficient about £ = The mean line offset 
curve must be canonical. 

When the default constructor is used, the mean line offset curve will be defined to 
be canonical with no carnbre. This paradigm extends to the classes derived from 
MeanLineOffset<F>. 

Due to its implementation as a handle to an underlying representation (inherited 
from the base class CurveLib: :Curve<lU,F,F>), the member functions of the class 
MeanLineOffset<F> are inherently polymorphic, even though they are not virtual. 
Therefore, for example, the code 

using namespace Afoil; 

MeanLineOffset<double> afoil = NACA4DigitMeanLine0ffset(0.4,0.03); 
double alpha_i = afoil.ideal_lift_coefficient(); 

will cause alpha_i to be evaluated using the functions appropriate to a NACA 4-digit 
mean line (see Section 6.1.1.2), with a result which has machine accuracy. 

6.1.1.1 Mean line offset curves constructed from piecewise polynomial splines 

PPSplineMeanLineOffset<F> is a mean line offset curve which is defined using a 
piecewise polynomial spline (see the description of the class Spline: :PPSpline<F,F> 
in Reference 4, Section 6). Several of the commonly used mean line offset curves can be 
represented in this way. Moreover, the angle of zero lift, ideal angle of attack, design 


DRDC Atlantic TM 2009-053 


23 


lift coefficient and the pitching moment can all be calculated exactly (according to 
thin airfoil theory) for these mean lines: see Annex A. 

PPSplineMeanLineOffset<F> is derived from the class MeanLineOff set<F> and has 
the following public members as well as the default and copy constructors, virtual 
destructor, assignment operator and members inherited from its base classes. 

typedef Spline::PPSpline<F,F> SplineType 

The type of the curve used to represent the mean line offset curve. 


PPSplineMeanLineOffset(SplineType s) 

Makes a mean line offset curve using the spline s. 


void define(SplineType s) 

Redefines the mean line offset curve using the spline s. 


6.1.1.2 NACA 4-digit mean line offset curve 


The mean line offset curves used by the NACA 4-digit series of airfoils (see Abbot 
and von Doenhoff [2], Chapter 6.4) have the form: 


m(C) 


cC(2Cm ~ C) 

a 

C (1 — 0(1 — 2(m + C) 

(1 - Cm) 2 


for C e [0, Cm] 
for C e [Cm, 1] 


(36) 


A typical value for ( m is 0.4. 


The ideal angle of attack, the angle of zero lift and the design lift coefficient are given 
by 


Oti = 


ot o — 


C Li = 


C m = 


C( 1 ~ 2Cm) 

2 7r Cm(l - Cm) 2 

C 


4^(1 - Cm) 2 L 


2^(1- Cm) 2 L 


4 \/ Cm( 1 - Cm) - 2vrC^ - 2(1 - 2Cm) arccos(l - 2Cm)] (37) 
4(1 - 2Cm)(2Cm - 3)VCm(l-Cm) 

- 2(4Cm - 3)(ttC 2 , + (1 - 2Cm) arccos(l - 2C m ))] (38) 
4(l-2Cm)VCm(l-Cm) 

+ 2ttC^ + 2(1 - 2Cm) arccos(l - 2C m ) 


12Cm(l - Cm) 5 


2(4Cm - l)(4Cm - 3)VCm(l-Cm) 

- 3C^7T - 3(1 - 2Cm) arccos(l - 2C m )) 


(39) 


(40) 


24 


DRDC Atlantic TM 2009-053 




















Angle of Zero Lift 



Cm 

Design Lift Coefficient 




0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 


Cm 

Pitching Moment Coefficient 



Cm Cm 

Figure 3: The lift characteristics as a function of ( m for a NACA 
4-digit airfoil with cambre c = 0.01. 


Figure 3 plots cto, cq, Cu and C m as a function of ( m for a NACA 4-digit airfoil with 
cambre equal to 1% of chord. 

The class NACA4DigitMeanLine0ff set<F> represents NACA 4-digit mean line offset 
curves. It is derived from the base class PPSplineMeanLineOff set<F> and has the 
following has the following public members as well as the default and copy construc¬ 
tors, virtual destructor, assignment operator and members inherited from its base 
classes. 

NACA4DigitMeanLine0ffset(F zetam, F c) 

Makes a NACA 4-digit mean line offset curve for an airfoil having cambre c. 
The maximum ordinate occurs when ( is zetam. 

NACA4DigitMeanLine0ffset(const Str &desig) 

Makes a NACA 4-digit mean line offset curve having designation desig. The 
string desig has two digits, the first giving the cambre in percent of the chord, 
the second giving the location of the maximum ordinate in tenths of the chord. 
For example, a designation of "34" indicates that c = 0.03 and ( m = 0.4. 


DRDC Atlantic TM 2009-053 


25 









void set_cambre(F c) 

Redefines the mean line offset curve to have carnbre c. 


void set_zeta_at_maximum_ordinate(F zetam) 

Sets the location of the maximum ordinate to zetam. 

void define(F zetam, F c) 

Redefine the mean line offset curve to have maximum ordinate at zetam and 
carnbre c. 


6.1.1.3 NACA 5-digit mean line offset curve 


The mean line offset curves used by the NACA 5-digit series of airfoils (see Abbot 
and von Doenhoff [2], Chapter 6.5) have the form: 


™(0 = 


|*iC(C 2 - 3 QC + C 2 (3 - 0)) for c e [o, Cj] 

for C e [0, i] 


IhCKi-C) 


(41) 


The location of the maximum ordinate occurs forward of Q at Cm = Q — (j/3 which 
can be inverted to give 0 as a function of ( m , 


(j = 1 — 2a/1 — 2( m sin ( 7t/6 — — arctan 


Cm\JCm (4 9(n 


2 - 6 Cm + 3C 

Since Cj cannot exceed 1, Cm cannot exceed 1 — l/x/3 ~ 0.42265. 


(42) 


The carnbre is 


c = 


hC[ 

6 


1 ~ Cj + 


2\3Cj 

V 


(43) 


and the ideal angle of attack, the angle of zero lift and the design lift coefficient are 
given by 


Oii 


« 0 — 


k _l 

487T 

fcl 

487T 


-18(1 - 2C,)\/0(1 - C,) - SttC 

■2 


+ (24g - 24Cj + 9) arccos(l - 2 Cj) 


(44) 


(16C - 520 + 30W0(1 - 0) + 8< 


(240 2 - 360 + 15 ) arccos(l - 2Q) (45) 


n - kl 

L' Li. ~ TV 


12 L 


(8 C - 80 + 6)00(1 - 0) - 3(1 - 20) arccos(l - 20) 


(46) 


26 


DRDC Atlantic TM 2009-053 



















Angle of Zero Lift Ideal Angle of Attack 




Cm 


Cm 


Design Lift Coefficient 


Pitching Moment Coefficient 




Cm Cm 

Figure 4: The lift characteristics as a function of ( m for a NACA 
5-digit airfoil with cambre c = 0.01. 


r 

777. 


h 


192 L 


(32C/ - 16C; - 280 + 30)^/OC - Q 

+ (240 — 35) arccos(l — 20) 


(47) 


Figure 4 plots a 0 , cq, Cu and C m as a function of Q rn for a NACA 5-digit airfoil with 
cambre equal to 1% of chord. 


The class NACA5DigitMeanLine0ffset<F> represents NACA 5-digit mean line offset 
curves. It is derived from the base class PPSplineMeanLineOff set<F> and has the 
following has the following public members as well as the default and copy construc¬ 
tors, virtual destructor, assignment operator and members inherited from its base 
classes. 


NACA5DigitMeanLine0ffset(F zetam, F c) 

Makes a NACA 5-digit mean line offset curve for an airfoil having cambre c. 
The maximum ordinate occurs when Q is zetam. The value of zetam must not 
exceed 1 - l/v^ « 0.42265. 


DRDC Atlantic TM 2009-053 


27 











NACA5DigitMeanLine0ffset(const Str fedesig) 

Makes a NACA 5-digit mean line offset curve having designation desig. The 
string desig has three digits: three-halves the first gives the design lift coeffi¬ 
cient in tenths; the second and third together give the location of the maximum 
mean line ordinate in twentieths of the chord. For example, the designation 
"230" indicates that Cj A = 0.3 and ( m = 0.15. 

void set_cambre(F c) 

Redefines the mean line offset curve to have carnbre c. 

void set_zeta_at_maximum_ordinate(F zetam) 

Sets the location of the maximum ordinate to zetam. The value of zetam must 
not exceed 1 — l/y/3 ~ 0.42265. 

F kl() const 

Returns the value of k\. 

F zeta_at_join() const 

Returns the value of Q: the point where the cubic and linear curve are joined. 


6.1.1.4 Constant load mean line offset curve 

According to thin airfoil theory, a mean line offset curve of the form 


MO = 


C L , r 


4m 


(l-C)ln(l-C) + ClnC 


(48) 


will produce a constant load distribution along the length of the airfoil when the 
angle of attack is zero. This type of mean line offset curve is used by the NACA 
16-series airfoils. Since this mean line offset curve is symmetric about ( = 4 , its ideal 
angle of attack is zero, its angle of zero lift is a 0 = —Chi! 2vr and its pitching moment 
coefficient is C m = —Cuj 4- The maximum ordinate occurs when ( = 4 and has the 
value c = Cjyj In 2/47T. 

Similarly, a mean line offset curve of the form 
C Li f 1 


MO = 


2n(a + 1) i 4(1 — a) l 


(a - C) 2 hr ((a - C) 2 ) - (1 - C) 2 ln((l - C) 2 ) 

+ (! — C) 2 — (a — C) 2 1 -ClnC + 3-hc) ( 49 ) 


with 


1 ( 2a 2 In a 

9 = ~ 7 a + 1 + ~\ - 

4 V 1 — a 


(1 — a) (2 ln(l — a) — l) 
h = -'-^-+ 9 


(50) 


28 


DRDC Atlantic TM 2009-053 



Linear Load Mean Lines 


0.025 



a = 0.0 
a = 0.2 
a = 0.4 
a = 0.6 
a = 0.8 
a = 1.0 


0 


0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 


Figure 5: Constant load mean line offset curves with Cl = 0.3 for six values of a. 

will generate a load distribution which is constant for 0 < £ < a and then decreases 
linearly to zero at the trailing edge; in the limit a —» 1, we get the constant load 
mean line of Equation (48). This type of mean line offset curve is used by the NACA 
6-series airfoils. Its ideal angle of attack and angle of zero lift are 




(51) 


Figure 5 plots the mean line offset curves of Equation (49) for six values of a; the 
curve with a = 1 is equivalent to the mean line of Equation (48). 

The theoretical curves of Equations (48) and (49) have the problem that the slope is 
infinite at the leading edges and also at the trailing edge for the case of Equation (48); 
all higher derivatives are infinite at both leading and trailing edges. Abbot and 
von Doenhoff suggest alleviating this problem at the leading edge by generating the 
airfoil offsets using a circle of prescribed radius of curvature whose centre is on the line 
through the leading edge and has the slope of the mean line at ( = 0.005. In the same 
spirit, we avoid the problems at the leading and trailing edges by using a quadratic 
curve when ( < 0.005 or ( > 0.995. The quadratic coefficients are chosen to make the 
mean line offset curve continuous and smooth. For the case when a = 0 the deviation 
of the quadratic curves from the exact curves does not exceed 6.37 x 10~ 5 times the 
design lift coefficient, the maximum deviation occurring at about 0.1% of the chord. 
The deviation of the airfoil shape from the exact shape will be even smaller. 

ConstLoadMeanLineOff set is a class which represents the mean line offset curves 
described by Equations (48) and (49). It is derived from the class MeanLineOf f set<F> 


DRDC Atlantic TM 2009-053 


29 












and has the following members as well as the default and copy constructors, virtual 
destructor, assignment operator and members inherited from its base classes. 

ConstLoadMeanLineOffset(F cl, F a) 

Makes a mean line offset curve for an airfoil having lift coefficient cl with 
constant load for 0 < £ < a. If a exceeds 1, m{Q will have the form given by 
Equation (48) with the adjustments at the leading and trailing edges described 
above. Otherwise m{Q will be of the form given by Equation (49) with similar 
adjustments at the leading and trailing edges. If a is negative it will be set to 
zero. 

void set_cambre(F c) 

Redefines the mean line offset curve to have cambre c. 


F cambre() const 

Returns the cambre. 


F design_lift_coefficient() const 

Returns the design lift coefficient, Cj J% . 


Angle<F> ideal_angle_of_attack() const 

Returns the ideal angle of attack. 


F get_a() const 

Returns the end of the region of constant loading. 


6.1.1.5 Mean line offset curves which are circular arcs 

An ArcMeanLineOff set<F> represents an airfoil mean line curve which is an arc of a 
circle. 

m(C) = -y + Vv 2 + C(i — C); y = ^ \ (52) 

where c is the cambre. Because the mean line offset curve is symmetric about £ = |, 
we have 

cq = 0; C Li = —2vr a 0 ; C m = ^ (53) 

The angle of zero lift, a 0 , can be approximated using 

a 0 = —2c(l + 2c 2 + 4c 4 + 12c 6 + 36c 8 + o(c 10 )) (54) 


ArcMeanLineOffset<F> has the following members as well as the default and copy 
constructors, virtual destructor, assignment operator and members inherited from its 
base classes. 


30 


DRDC Atlantic TM 2009-053 




ArcMeanLineOffset(F c) 

Makes a circular arc mean line offset curve with cambre c. 
void set_cambre(F c) 

Redefines the mean line offset curve to have cambre c. 

6.1.1.6 Mean line offset curves derived from offsets 

An Off setMeanLineOff set<F> represents a mean line offset curve generated by splin- 
ing a sequence of offsets: i.e. a sequence of (£, y) pairs. It is derived from the base 
class PPSplineMeanLineOff set<F>. 

The angle of zero lift, ideal angle of attack, design lift coefficient and the pitching 
moment can all be calculated exactly (according to thin airfoil theory) for these mean 
line offset curves. 

Of f setMeanLineOf fset<F> has the following members as well as the default and copy 
constructors, virtual destructor, assignment operator and members inherited from its 
base classes. 

typedef typename Spline::CubicSpline<F>::ValArray ValArray 

The type of the sequence of offset values. 

OffsetMeanLineOffset(const Spline::KnotSeq<F> &zeta_vals, 
const ValArray &y_vals) 

Makes a mean line offset curve for an airfoil by splining the offsets given by 
zeta_vals and y_vals. The lengths of zeta_vals and y_vals must be the 

same. 

void define(const Spline::KnotSeq<F> &zeta_vals, 
const ValArray &y_vals) 

Redefines the mean line offset curve by splining the offsets given by zeta_vals 
and y_vals. The lengths of zeta_vals and y_vals must be the same. 

6.1.2 Classes to represent thickness curves 

The class ThicknessCurve<F> represents an airfoil thickness curve. It is a curve, 
£(£), which returns the value of the half-thickness of the airfoil. The value of the 
thickness curve at £ = 0 must be zero. If t( 1) > 0, the thickness curve is said to 
have an open trailing edge. If t(l) = 0 and t'( 1) is finite, the trailing edge is said to 
be sharp. If t'(() approaches infinity as £ approaches 1, the trailing edge is blunt. 
ThicknessCurve<F> allows three different methods for closing thickness curves which 


DRDC Atlantic TM 2009-053 


31 



are open, two which make a sharp trailing edge and one which makes a blunt trailing 
edge. 


ThicknessCurve<F> is derived from the base class CurveLib: :Curve<lU,F,F> and 
has the following members as well as the default and copy constructors, virtual de¬ 
structor, assignment operator and members inherited from its base classes. 

ThicknessCurve(CurveLib::Curve<lU,F,F> crv, bool blunt = false) 

Makes an airfoil thickness curve using crv. The value crv(O) must equal zero; 
if not a ProgError is thrown. If blunt is true, the thickness curve is assumed to 
have a blunt trailing edge (it is not possible to determine this from crv alone); 
in this case crv(l) must equal zero; if not a ProgError is thrown. 

bool is_closed() const 

Returns true if the thickness curve is closed at the trailing edge: i.e. if its value 
at ( = 1 is zero. 

bool is_blunt() const 

Returns true if the thickness curve is blunt at the trailing edge: i.e. its derivative 
goes to infinity as one approaches the trailing edge. If the trailing edge is open, 
it is not blunt. 

void close_trailing_edge_by_extension() 

Ensures that the thickness curve has a closed trailing edge by extending the 
range of the thickness curve until it is zero. The parameter ( is then scaled so 
that it is 1 at the new trailing edge location. The new thickness curve is defined 


by: 



(55) 


(56) 


Due to the scaling of (, the thickness curve is modified throughout its length. 
The new trailing edge is sharp. This form of closure is illustrated in Figure 6. 

If the trailing edge is already closed, the thickness curve is not changed. 

An Error will be throw if the derivative of the thickness curve is not strictly 
negative at ( = 1. 

void close_trailing_edge_with_parabola(F zetaO = F(1)) 

Ensures that the thickness curve has a closed trailing edge by adding a parabolic 
curve to it starting at ( = (o', does nothing if the trailing edge is already closed. 

32 DRDC Atlantic TM 2009-053 



Original Thickness 



T) = 1 i 

Figure 6: Trailing edge closure by extension. 


C = 1 


The value of Co is given by zetaO. If it is outside the range [0,1), Co will be set 
to the location of maximum thickness. 

The parabola is chosen so that the airfoil is smooth (i.e. the parabola has a 
derivative of zero at C = Co)- 



for C < Co 
for C > Co 


(57) 


The new trailing edge is sharp. This form of closure is illustrated in Figure 7. 

void make_trailing_edge_blunt(F radius) 

If the thickness curve has an open trailing edge, closes it such that it is blunt; 
does nothing if the trailing edge is already closed. The approximate radius of 
curvature of the trailing edge is given by radius; it must be strictly positive. 

The thickness curve is closed using a quarter elliptic arc with half width £(1) 
and specified radius of curvature, r, at the trailing edge. The half-length of the 
ellipse is then t(l) 2 /r. The new thickness curve is: 



The thickness curve is only modified in a small region close to the trailing edge. 
This form of closure is illustrated in Figure 8. 


DRDC Atlantic TM 2009-053 


33 










Original Thickness 


Original Thickness 



Figure 7: Trailing edge closure with a 
parabola. 



6.1.2.1 NACA 4-digit thickness curves 

The NACA 4-digit and 5-digit series airfoils use the following thickness curve: 

t(C) = [0.29690^ - 0.12600C - 0.35160C 2 + 0.28430C 3 - 0.10150C 4 ] (60) 

where t max is the maximum thickness. The class NACA4DigitThicknessCurve<F> 
represents this curve. It is derived from the class ThicknessCurve<F> and has the 
following members as well as the default and copy constructors, virtual destructor, 
assignment operator and members inherited from its base classes. 

NACA4DigitThicknessCurve(F tmax) 

Makes the thickness curve used by the NACA 4-digit and 5-digit series of airfoils. 
The maximum thickness will be tmax. 


NACA4DigitThicknessCurve(const Str fedesig) 

Makes the thickness curve used by the NACA 4-digit and 5-digit series of airfoils 
with thickness determined by the designation desig, a two-digit string giving 
the maximum thickness in percent of chord: for example, if desig is "20", the 
maximum thickness will be 20% of the chord. 


void set_thickness(F tmax) 

Changes the maximum thickness to tmax. 

6.1.2.2 Thickness curve derived from offsets 

An Off setThicknessCurve<F> represents an airfoil thickness curve that is specified 
using a set of offsets and the radius of curvature at the leading edge. The offsets are 
given in terms of the chord fraction ( and the thickness relative to the chord. The 


34 


DRDC Atlantic TM 2009-053 









curve is of the form: y = y/2r( + cubic spline. This ensures that the geometry at 
the leading edge is accurate. Thickness curves of this type are used by the NACA 
6-series airfoils. 

The class Off setThicknessCurve<F> represents thickness curves specified using off¬ 
sets and a leading edge curvature. It is derived from ThicknessCurve<lU,F,F> and 
has the following constructor as well as the default and copy constructors, virtual 
destructor, assignment operator and members inherited from its base classes. 

OffsetThicknessCurve(F r, unsigned n, const F *zeta, const F *yt) 

Makes an airfoil thickness curve having leading edge radius r (relative to chord) 
and n offsets in zeta and yt. The values in zeta must be positive and strictly 
increasing. The last value of zeta must be 1.0. The values in yt must be 
positive except that the value corresponding to ( = 0 must be zero and the 
value corresponding to ( = 1 may be 0. 

6.1.3 NACA airfoils 

The National Advisory Committee for Aeronautics (NACA) has designed several 
series of airfoils that have been used for decades in many applications. The Airfoil 
Library currently implements NACA 4-digit, 5-digit, 16-series and 6-series airfoils [2], 
They may all be represented using the class NACAAirf oil<F>. Since the NACA airfoils 
are all defined using a thickness curve and a mean line offset curve, NACAAirf oil<F> 
is derived from the class ThickDistAirfoil<F>. All NACA airfoils are canonical. 

NACAAirf oil<F> has the following members as well as the default and copy construc¬ 
tors, virtual destructor, assignment operator and members inherited from its base 
classes. 

NACAAirf oil (const Str Mesig) 

Creates a NACA airfoil with designation desig. If the designation is not known, 
an UnknownNACADesignation exception is thrown (it is derived from Error). 
The following designations are understood where d stands for any digit: 

dddd: a 4-digit series airfoil. The first digit gives the cambre in percent of the 
chord, the second gives the location of the maximum ordinate in tenths 
of the chord and the last two give the maximum thickness in percent of 
chord. For example, the designation 2415 indicates c = 0.02, ( m = 0.4 and 
t = 0.15. 

ddddd: a 5-digit series airfoil. Three-halves the first digit gives the design lift 
coefficient in tenths; the second and third digits together give the location 
of the maximum mean line ordinate in twentieths of the chord; the last 


DRDC Atlantic TM 2009-053 


35 


two digits give the maximum thickness in percent of chord. For example, 
the designation "23012" indicates that Cu = 0.3, ( m = 0.15 and t = 0.12. 

16-ddd: a 16-series airfoil. The first digit following the hyphen gives the design 
lift coefficient in tenths, and the last two digits give the maximum thickness 
in percent of chord. For example, the designation "16-212" indicates that 
C Li = 0.2 and t = 0.12. 

6n_d-ddd a = d.d: a 6-series airfoil. Here n is one of the digits 3, 4, 5 or 6; 
it gives the location of the in tenths of chord downstream of the leading 
edge of the minimum pressure for the zero canrbre airfoil at zero lift. 

The underscore denotes a subscript; thus, for example, 63_3-018 corre¬ 
sponds to the airfoil 63 3 -018. The subscripted digit gives the range of 
lift coefficient in tenths above and below the design lift coefficient in which 
favourable pressure gradients exist on both sides of the airfoil. It is omitted 
if the thickness is less than 12% of the chord length. 

The first digit after the hyphen and the characters beginning with a serve 
to specify the mean line offset curve which is of the constant load type (see 
Section 6.1.1.4). The digit after the hyphen gives the design lift coefficient 
in tenths, while the characters beginning with a specify the value of a 
in Equation (49); the spaces around the equals sign are optional. If the 
characters beginning with a are omitted, Equation (48) will be used to 
define the mean line offset curve. 

The thickness curves of the 6-series airfoils are not derived from simple 
formulae as are the 4 and 5-digit airfoils. Nor can one thickness curve be 
derived from another simply by scaling the curves with maximum thick¬ 
ness. Instead, the thickness curves are obtained from data tabulated by 
Abbot and von Doenhoff [2] . The following airfoils can be represented (the 
string in brackets is the corresponding value of desig): 

6n-d06 (6n-d06) 

6n-d08 (6n-d08) 

6n-d09 (6n-d09) 

6n-dl0 (6n-dl0) 

6ni-dl2 (6n_l-dl2) 

6n 2 -dl5 (6n_2-dl5) 

6n 3 -dl8 (6n_3-dl8) 

6n 4 -d21 (6n_4-d21) 

An exception is that there is no representation for 63-d08. The last two 
digits give the maximum thickness in percent of chord. 

For example, if desig is "66_4-221 a = 0.8", then the NACA designa¬ 
tion of the airfoil is 66 4 -221 a = 0.5. It has a thickness of 0.21 and mean 
line offset curve defined by Equation (49) with Cli = 0.2 and a = 0.5. 


36 


DRDC Atlantic TM 2009-053 


6n_(ddd)-ddd a = d.d: a 6-series airfoil. As with the 6-series designation of 
the form 6n_d-ddd a = d.d, the digit n can be one of 3, 4, 5 or 6, the 
underscore denotes a subscript and the first digit after the hyphen and the 
characters beginning with a specify the mean line. The last two digits give 
the maximum thickness in percent of chord. The thickness distribution is 
scaled from the thickness distribution specified by the digits in brackets. 
Let these digits be (pqr). Then the thickness curve is obtained by scaling 
the thickness curve of the airfoil 6n_p-0qr. If there are only two digits 
in brackets, it is assumed that p is missing and the thickness curve to be 
scaled is obtained from the airfoil 6n-0qr. From the restrictions on the 
airfoils with designation of the form 6n_d-ddd, the digits in brackets must 
be one of 06, 08, 09, 10, 112, 215, 318 or 421 except that 08 is not allowed 
if n is 3. 

For example, if desig is "65_(318)-217 a = 0.5", then the NACA des¬ 
ignation of the airfoil is 65(3is)-217 a = 0.5. This airfoil has a thickness 
curve obtained from the airfoil with designation 653-018 but scaled so that 
its maximum thickness is 0.17. 

void define (const Str Mesig) 

Redefines the airfoil to be a NACA airfoil with designation desig. If the des¬ 
ignation is not known, an UnknownNACADesignation exception is thrown. 

void define_4_digit(F t, F zetam, F c) 

Defines the airfoil to be a member of the 4-digit NACA series having thickness 
t and canrbre c. The maximum mean line ordinate occurs at ( equal to zetam. 

A NACA4DigitThicknessCurve<F> is used to represent the thickness curve: see 
Section 6.1.2.1. A NACA4DigitMeanLine0ffset<F> is used to represent the 
mean line offset curve: see Section 6.1.1.2. 

void define_5_digit(F t, F zetam, F c) 

Defines the airfoil to be a member of the 5-digit NACA series having thickness 
t and canrbre c. The maximum mean line ordinate occurs at £ equal to zetam. 

The thickness curve is the same as for the 4-digit series (see Section 6.1.2.1). 
The mean line offset curve is represented by a NACA5DigitMeanLine0f f set<F>: 
see Section 6.1.1.3. 

void define_16_series(F t, F cl) 

Defines the airfoil to be a member of the NACA 16-series having thickness t 
(fraction of chord) and design lift coefficient cl. 

The thickness curves for the 16-series airfoils are directly proportional to the 
thickness. The curve used here is derived by splining the offsets given by Abbot 


DRDC Atlantic TM 2009-053 


37 


and von Doenhoff for the 16-series airfoil with thickness of 21% of chord, then 
scaling it according to the value of t. 

The mean line offset curve for a 16-series airfoil is of the constant load type 
(Equation (48)) and is represented by a ConstLoadMeanLineOff set<F>. 

void define_6_series(F t, F xpmin, F low_drag, F cl, F a) 

Defines the airfoil to be a member of the NACA 6-series having thickness t (frac¬ 
tion of chord), low_drag range low_drag, minimum pressure at xminp (fraction 
of chord), design lift coefficient cl, and constant loading for ( less than a. 

The thickness curves for the 6-series airfoils are calculated by splining the offsets 
given by Abbot and von Doenhoff. This limits the values of xpmin to 0.3, 0.4, 0.5 
and 0.6, and low_drag and t to the following pairs: (low_drag, t) = (0,0.06), 
(0,0.08), (0,0.09), (0,0.1), (0.1,0.12), (0.2,0.15), (0.3,0.18), (0.4,0.21) with the 
exception that (0,0.08) is not allowed when xpmin is 0.3. 

The mean line offset curve for a 6-series airfoil is of the constant load type with 
a linear drop off to the trailing edge (Equation (49)) and is represented by a 

ConstLoadMeanLineOffset<F>. 

The ideal angle of attack, the angle of zero lift and the design lift coefficient are 
calculated exactly for all NACA airfoils. The pitching moment about one quarter 
chord is calculated exactly for 4-digit, 5-digit and 16-series airfoils; for the 6-series 
airfoils it will be approximate. 

6.1.4 The DTMB modification of the NACA 66 airfoil 

An airfoil that has often been used for propeller sections is a modification of the 
NACA 66 airfoil designed at the David Taylor Model Basin (DTMB). The modifica¬ 
tions thicken the trailing edge for ease of manufacture and fair the nose to eliminate 
a bump in the pressure distribution that occurs on the NACA 66 airfoils. In addi¬ 
tion, airfoils of different thicknesses are obtained simply by scaling the airfoil with 
thickness equal to 6% of chord (the NACA 66 airfoils have slightly different thickness 
curves for each thickness). A constant load mean line offset curve with a = 0.8 is 
used. The complete geometry of the airfoil is described by Brockett [5]. 

The class NACA66DTMBmod<F> implements the DTMB modification of the NACA 66 
airfoil. It is derived from the base class ThickDistAirfoil<F> and has the following 
members as well as the default and copy constructors, virtual destructor, assignment 
operator and members inherited from its base classes. 

NACA66DTMBmodAirfoil(F t, F cl) 

Makes an airfoil having thickness t (relative to chord length) and design lift 
coefficient cl. 


38 


DRDC Atlantic TM 2009-053 


void define(F t, F cl) 

Redefines the airfoil to have thickness t (relative to chord length) and design 
lift coefficient cl. 


void set_cambre(F c) 

Redefines the airfoil to have carnbre c (relative to chord length). 

F cambreO const 

Returns the carnbre of the airfoil. 


F design_lift_coefficient() const 

Returns the design lift coefficient for the airfoil. 

Angle<F> ideal_angle_of_attack() const 

Returns the ideal angle of attack for the airfoil. The class Angle<F> is described 
in Reference 1, Annex E. 


7 Defining airfoils from files 


Airfoils can be defined by reading records from a hie in OFFSRF format [6] . The class 
Airf oilReader<F> provides the interface between the hie and the airfoil created. Its 
template argument, F, is the type of the boating point numbers used for the airfoil; 
it will normally be float or double. 

For example, to define an airfoil from data in the hie afoil.dat, one could use the 
following code: 

// Open an OFFSRF input stream 
Offsrf::IFStream in("afoil.dat"); 

if (!in) throw ErrorO'Could not open file afoil.dat"); 

// Read the file 

AirfoilReader<double> reader; 

in >> reader; 

if (!in) throw ErrorO'Error in file afoil.dat"); 

// Get the airfoil 

Airfoil<F> afoil = reader.airfoil; 

if (!afoil.is_defined()) { 

throw ErrorC'No airfoil was specified in the file afoil.dat"); 

> 

The class Of fsrf:: IFStream is simply a std: : istream adapted for use by the 
OFFSRF classes. 


DRDC Atlantic TM 2009-053 


39 



AirfoilReader<F> also allows a name to be given to the airfoil. The name can be 
retrieved from its public member name: 

std::string aname = AirfoilReader<F>::name; 

AirfoilReader<F> recognizes records with the following names: CLOSE TRAILING 
EDGE, COMMENT, INCLUDE, JOUKOWSKI, NACA, NACA 66 DTMB(mod), NAME, OFFSETS, 
and THICKNESS DISTRIBUTION AIRFOIL. The COMMENT record is a standard OFFSRF 
record which simply writes its contents to stdout. The INCLUDE record is also a stan¬ 
dard OFFSRF record. It directs input to another hie; the content of the record is 
interpreted as the name of the hie: see Reference 6. The remaining records are de¬ 
scribed in the following sections. Each record is optional but there must be one of 
JOUKOWSKI, NACA, OFFSETS or THICKNESS DISTRIBUTION AIRFOIL or else the airfoil 
will remain undefined. 


7.1 The CLOSE TRAILING EDGE record 

The CLOSE TRAILING EDGE record has no data: i.e. it simply takes the form: 

{CLOSE TRAILING EDGE} 

When it is present, the airfoil will be closed. If the trailing edge is already closed, 
the presence of this record will cause no change. The trailing edge is closed us¬ 
ing the function Airf oil<double>: : close_trailing_edge () (see Section 4) un¬ 
less a BLUNT TRAILING EDGE record is also present, in which case the function 
Airfoil<double>::make_trailing_edge_blunt(F radius) is used. 

7.2 BLUNT TRAILING EDGE 


Presence of a BLUNT TRAILING EDGE causes the trailing edge to be closed using the 
function Airfoil<double>: :make_trailing_edge_blunt(F radius). If the trail¬ 
ing edge is already closed, this record will cause no change. The record has the 
form 

{BLUNT TRAILING EDGE: $\alpha$ } 

where the value a is used to specify the radius of curvature at the trailing edge. 
Let the distance separating the points at the trailing edge be A. Then the radius 
of curvature will be A/2 a and the change in the airfoil curve extends roughly IqA 
upstream of the trailing edge. If a — 1, the trailing edge closure will roughly be a 
semi-circle; larger values of a make the trailing edge sharper, smaller values more 
blunt. 


40 


DRDC Atlantic TM 2009-053 


7.3 The JOUKOWSKI record 

This record defines a Joukowski airfoil. It has the following format: 


{JOUKOWSKI: thickness cambre 

{FINITE TE DERIVATIVE} ! optional 

} 

The value of the cambre can be omitted; in that case the cambre will be zero. 

If the FINITE TE DERIVATIVE record is present, then the ^-parameterization defined 
by Equation (17) is used to ensure that the first derivative of the airfoil £-curve will 
be finite at the trailing edge; otherwise the parameterization defined by Equation (16) 
is used and the first derivative at the trailing edge will be zero. 

The airfoil is given the name Joukowski t =thickness c=cambre. For example, the 
record 

{JOUKOWSKI: 0.06 0.02 } 

results in an airfoil with the name Joukowski t=0.06 c=0.02. 

The airfoil and its name replace any airfoil or name created by records occurring 
earlier in the file. 

7.4 The NACA record 

This record defines a NACA airfoil from a designation. It has the following format: 
{NACA: designation } 

where designation is any of the designations recognized by the NACAAirf oil<F> con¬ 
structor: see Section 6.1.3. Leading and trailing whitespace is stripped from the 
designation before being passed to the constructor. 

The airfoil is given the name NACA designation. For example, the record 

{NACA: 63.3-418 a=0.7 } 

results in an airfoil with the name NACA 63.3-418 a=0.7. 

The airfoil and its name replace any airfoil or name created by records occurring 
earlier in the file. 


DRDC Atlantic TM 2009-053 


41 


7.5 The NACA 66 DTMB(mod) record 

This record defines a DTMB modification of the NACA 66 airfoil from specified values 
for the thickness and cambre. ft has the following format: 

{NACA 66 DTMB (mod) : thickness cambre } 

The value of the cambre can be omitted in which case it will be set to zero. 

The airfoil is given the name NACA 666 DTMB (mod) t =thickness c=cambre. For ex¬ 
ample, the record 

{NACA 66 DTMB(mod): 0.06 0.02 } 

results in an airfoil with the name NACA 66 DTMB (mod) t=0.06 c=0.02. 

The airfoil and its name replace any airfoil or name created by records occurring 
earlier in the file. 

7.6 The NAME record 

The NAME record is used to specify a name for the airfoil. It has the following format: 
{NAME: name } 

Leading and trailing whitespace will be stripped from the name. The name replaces 
any name created by records occurring earlier in the file. 

7.7 The OFFSETS record 

This record defines an airfoil from a set of (x,y) offsets. It has the following format: 

{OFFSETS 

x 0 Vo 


Xn y rt 

{LEADING EDGE INDEX: ile } ! optional 
{BLUNT TRAILING EDGE} ! optional 
{OFFSETS 


The offsets must be ordered with increasing £: i.e. they start at the trailing edge, 
proceed to the leading edge along the pressure side, then back to the trailing edge 
along the suction side. 


42 


DRDC Atlantic TM 2009-053 



One of the offset points must lie at the leading edge. The index He marks which point 
this is (note that the numbering starts at zero). If this record is not present, it is 
assumed that the leading edge is at (0,0); the offset point with that value is found 
and the value of He set accordingly; if no offset with that value is present, an Error 
is thrown. 

If the BLUNT TRAILING EDGE record is present, the trailing edge will be made blunt. 
The method for doing this depends on whether the first and last offset points are the 
same. If they are the same, the offsets are splincd using a periodic cubic spline (see 
Reference 4, Section 8.1.3); the trailing edge curvature cannot be controlled. If the 
first and last offset points differ, an ordinary cubic spline is used and then the airfoil 
is closed using the algorithm described in Annex B. 

Note that a BLUNT TRAILING EDGE record can be placed either inside or outside the 
OFFSETS record. If the first and last offset points differ, the resulting airfoil will be 
the same. However, if the first and last offset points are the same, the two airfoils will 
differ. When it is outside the OFFSETS record, the airfoil surface will be generated 
using an ordinary spline; since the resulting airfoil is closed, the BLUNT TRAILING 
EDGE will do nothing. However, when it is inside the OFFSETS record, a periodic 
spline is used and the airfoil trailing edge will be blunt. This behaviour is illustrated 
in Figure 9. 

The airfoil replaces any airfoil created by records occurring earlier in the hie. 

7.8 The THICKNESS DISTRIBUTION AIRFOIL record 


The THICKNESS DISTRIBUTION AIRFOIL record defines a thickness distribution airfoil 
(a ThickDistAirf oil<F>). It consists solely of sub-records whose names can be any 
of the records recognized by ThickDistAirf oilreader<F> (see Section 7.9): 

{THICKNESS DISTRIBUTION AIRFOIL 

Any record recognized by ThickDistAirf oilReader<F> 

{THICKNESS DISTRIBUTION AIRFOIL 

The airfoil replaces any airfoil created by records occurring earlier in the hie. 

7.9 Defining thickness distribution airfoils from files 

Because of the importance of thickness distribution airfoils, a special reader class is 
available for defining a ThickDistAirf oil<F> (see Section 6.1) from a hie. It can be 
used in exactly the same way as AirfoilReader<F> but in place of an Airfoil<F> 
it contains a ThickDistAirfoil<F>. For example, to dehne a thickness distribution 
airfoil from data in the hie afoil.dat, one could use the following code: 


DRDC Atlantic TM 2009-053 


43 


{OFFSETS 


{OFFSETS 

1.00 0.0 


1.00 0.0 

0.75 -0.07 


0.75 -0.07 

0.50 -0.1 


0.50 -0.1 

0.25 -0.1 


0.25 -0.1 

0.10 -0.07 


0.10 -0.07 

0.00 0.0 


0.00 0.0 

0.10 0.07 


0.10 0.07 

0.25 0.1 


0.25 0.1 

0.50 0.1 


0.50 0.1 

0.75 0.07 


0.75 0.07 

1.00 0.0 


1.00 0.0 

{BLUNT TRAILING EDGE} 


}0FFSETS 

}0FFSETS 


{BLUNT TRAILING EDGE} 



Figure 9: The difference between airfoils generated with a BLUNT TRAILING EDGE 
record inside (right) and outside (left) an OFFSETS record. The airfoil on the left 
is generated using a periodic spline. The airfoil on the right is generated using an 
ordinary spline; since it is closed, the BLUNT TRAILING EDGE record does nothing in 
this case. 


II Open an OFFSRF input stream 
Offsrf::IFStream in("afoil.dat"); 

if (!in) throw ErrorC'Could not open file afoil.dat"); 

// Read the file 

ThickDistAirfoilReader<double> reader; 
in >> reader; 

if (!in) throw ErrorC'Error in file afoil.dat"); 

// Get the airfoil 

ThickDistAirfoil<F> afoil = reader.airfoil; 
if (!afoil.is_defined()) { 

throw ErrorO'No airfoil was specified in the file afoil.dat"); 

} 

One can now use the member functions specific to ThickDistAirf oil<F> which would 
not be available if an Airf oilReader<F> had been used. 


44 


DRDC Atlantic TM 2009-053 





In addition to the standard OFFSRF records COMMENT and INCLUDE (see Reference 6), 
ThickDistAirfoilReader<F> recognizes the records NACA, NACA 66 DTMB(mod) 
and NAME and treats them exactly as does Airf oilReader<F>. It also allows the 
airfoil to be specified from a mean line and thickness curve using any records rec¬ 
ognized by the classes MeanLineOffsetReader<F> and ThicknessCurveReader<F> 
described in Sections 7.9.1 and 7.9.2. 

7.9.1 A class for defining mean line offset curves from a file 

The class MeanLineOf f setReader<F> can be used to define mean line offset curves 
from a hie in OFFSRF format. In addition to the standard OFFSRF records COMMENT 
and INCLUDE (see Reference 6), MeanLineOf f setReader<F> recognizes records with 
the following format: 

{CONSTANT LOAD MEAN LINE: C Li a } 

{MEAN LINE OFFSETS 

Co 2/o 


C n Vn 

}MEAN LINE OFFSETS 

{NACA 4-DIGIT MEAN LINE: cCm > 

{NACA 5-DIGIT MEAN LINE: cCm > 

{CIRCULAR ARC MEAN LINE: c> 

The parameters Cn and a in the CONSTANT LOAD MEAN LINE record are used to define 
a constant load mean line offset curve according to Equation (49). If a is not present, 
the mean line offset curve defined by Equation (48) is used. 

The parameters c and Cm are the carnbre and the location of the maximum mean line 
offset. 

Only one of these records is necessary; if more than one is present, the last one is 
used. 

7.9.2 A class for defining thickness curves from a file 

The class ThickCurveReader<F> can be used to define thickness curves from a hie in 
OFFSRF format. In addition to the standard OFFSRF records COMMENT and INCLUDE 
(see Reference 6), ThickCurveReader<F> recognizes records with the following for¬ 
mat: 


DRDC Atlantic TM 2009-053 


45 



{NACA 4-DIGIT THICKNESS: thickness } 
{THICKNESS OFFSETS 

Co Vo 


C n Vn 

{THICKNESS OFFSETS 
{BLUNT TRAILING EDGE: a } 

{CLOSE TRAILING EDGE: method } 

The value a in the BLUNT TRAILING EDGE record is used to specify the radius of 
curvature at the trailing edge. The radius of curvature will be t(l)/a where t(l) is 
the value of the thickness curve at the trailing edge. The change in the airfoil curve 
extends roughly at (1) upstream of the trailing edge. If a = 1, the trailing edge closure 
will roughly be a semi-circle. 

The parameter method in the CLOSE TRAILING EDGE is optional. If present it should 
be one of extension or parabola. If method is not present, the trailing edge is closed 
using the default method (a parabola starting at the maximum thickness). If method 
is parabola the ((-value at which the parabola starts can be specified: 

{CLOSE TRAILING EDGE: parabola ( } 

If the value ( is not present the location of maximum thickness is used. 

Only one of CLOSE TRAILING EDGE or BLUNT TRAILING EDGE is necessary; if more 
than one is present, the last one is used. Similarly, only one of the records NACA 
4-DIGIT THICKNESS or THICKNESS OFFSETS is necessary. 

8 Defining an airfoil from the command line 


For programs requiring the definition of a single airfoil, it is convenient to be able 
to specify the airfoil using command line arguments. The function make_airfoil 
provides a means for doing this. 

Airfoil<double> make_airfoil(const std::vector<Str> &args, Str fename) 
Parses the command line arguments given by args, then makes an airfoil. The 
type Str is an alias for std: : string. The first element of args is the program 
name. The following command line arguments are recognized. Arguments in 
square brackets are optional. 

hie 

Specifies a file which will be read using an Airf oilReader<double>. 


46 


DRDC Atlantic TM 2009-053 



-D t c 

Makes a DTMB modified NACA 66 airfoil with thickness t and cambre c. 
-j t c [ te-flag ] 

Makes a Joukowski airfoil with thickness t and cambre c. If te-flag is 1, 
the first derivative of the airfoil £-curve will be finite at the trailing edge. 
Otherwise it will be zero. The default is te-flag = 0. 

-NACA desig 

Defines the airfoil from the NACA designation desig. See Section 6.1.3 for 
a description of the format of desig. 

-cte [ method [ a rg ] ] 

Closes the trailing edge if it is not already closed. The optional argument 
method can be one of p (close using a parabola: see Section 6.1), e (close 
by extension: see Section 6.1) or b (blunt closure). The methods e and 
p should only be used in conjunction with the -NACA or -D options. If 
method is p, the optional arg gives the value Co a ! which the parabola 
begins; if it is missing the parabola will start at the location of maximum 
offset of the mean line. If method is b, the optional arg gives the value of 
a for the closure where a = A/2r with A equal to the separation of the 
points at the trailing edge and r equal to the radius of curvature at the 
trailing edge. If a rg is missing, a is set to 1. If method is missing, the 
default trailing edge closure is used. If the trailing edge is already closed, 
this option does nothing. 

If a name for the airfoil can be determined it is returned in name. 

The following function is also provided for generating descriptions of the allowed 
command line arguments. 

void raake_airfoil_usage(FormattedOStream &out) 

Writes information on the allowed command line arguments for make_airf oil 
to out. A FormattedOStream is an adapted output stream which allows the 
output to be indented and automatically wrapped at a specified column. It is 
described in more detail in Annex C. 

ffere is an example of the use of make_airf oil in a program that also defines com¬ 
mand line options -h and -x. The option -h writes a message describing the usage 
of the program to stdout, then exits the program. 

#include "MakeAirfoil.h" 

#include "Airfoil.h" 

#include "FormattedOStream.h" 

void usage() 


DRDC Atlantic TM 2009-053 


47 


FormattedOStream out(std::cout); 
out << "Usage: my_program\n"; 
out.rel_indent (7) ; 

out « " [ -x ] ! Description of -x\n"; 

out « "[ -h ] ! Write this help message\n"; 

make_airfoil_usage(out); 

} 

int main(int argc, char **argv) 

{ 

try { 

// Parse the command line arguments 
std::vector<Str> afoil_args; 
afoil_args.push_back(argv [0]); 

int arg = 1; 
while (arg < argc) { 

if (Str(argv[arg]) == "-x") { 
arg++; 

// Handle option -x 

} 

else if (Str(argv[arg]) == "-h") { 
usage(); 
return 1; 

} 

else { 

afoil_args,push_back(argv[arg++]); 

} 

} 

// Make the airfoil 
Str name; 

Airfoil<double> afoil = make_airfoil(afoil_args,name); 
// The rest of the program 


return 0; 

} 

catch(Error fee) { 

std::cerr <{}< e.get_msg() <{}< ’\n’; 
return 1; 

} 

} 


48 


DRDC Atlantic TM 2009-053 



If invoked with 


my_program -h 


the following output will be written to stdout. 


Usage: 


my_program 
[ -x ] 

[ -h ] 

[ file ] 

[ -D t c ] 


[ -NACA desig ] 

[ -j t c [ te_flag ] ] 

Makes 


Description of -x 
Write this help message 

A file defining the airfoil in OFFSRF format 
Makes a DTMB modified NACA 66 airfoil with 
thickness t and cambre c. 

Defines the airfoil from a NACA designation 


a Joukowski airfoil with thickness t 
and cambre c. If te_flag is 1, the first 
derivative of the airfoil xi-curve will be 
finite at the trailing edge. Otherwise it 
will be zero (the default). 


[ -cte [ method [ arg ] ]] 

! Close trailing edge, method can be e (close 
! by extension), p (close with parabola) or 
! b (blunt closure). e and p can only be 
! used in conjunction with -NACA or -D. If 
! method is p, then the optional arg gives 
! the starting zeta value for the parabola. 

! If method is b, then the optional arg gives 

! the value of alpha; the airfoil is modified 

! over a distance alpha times the trailing 
! edge gap. If method is not present, a 
! default closure is used. 


9 Concluding remarks 


The Airfoil library is a collection of C++ classes for representing the geometry of 
airfoils. It is based on the CurveLib library [1] for representing differentiable curves. 
Several families of airfoils are represented explicitly in the Airfoil library: Joukowski 
airfoils, NACA 4-digit, 5-digit, 16-series and 6-series airfoils [2], and the David Taylor 
Model Basin (DTMB) modification of the NACA 66 airfoil commonly used in marine 
propellers. Generic airfoils can be generated from offsets on the airfoil surface, or from 
mean lines and thickness curves. Methods for closing the trailing edges of airfoils with 


DRDC Atlantic TM 2009-053 


49 






trailing edge gaps are also implemented (Section 6.1.2 and Annex B). 

Classes are also provided for defining airfoils from data in a file in OFFSRF format [6] 
and for specifying an airfoil from the program command line. 


50 


DRDC Atlantic TM 2009-053 


References 


[1] Hally, D. (2006), C++ classes for representing curves and surfaces: 

Part I: Multi-parameter differentiable functions, (DRDC Atlantic TM 2006-254) 
Defence R&D Canada - Atlantic. 

[2] Abbott, I. H. and von Doenhoff, A. E. (1958), Theory of Wing Sections, Dover 
Publications Inc., New York. 

[3] Fritsch, F. N. and Carlson, R. E. (1980), Monotone Piecewise Cubic 
Interpolation, SIAM Journal of Numerical Analysis, 17, 238. 

[4] Hally, D. (2006), C++ classes for representing curves and surfaces: 

Part II: Splines, (DRDC Atlantic TM 2006-255) Defence R&D Canada - 
Atlantic. 

[5] Brockett, T. (1966), Minimum Pressure Envelopes for Modified NACA-66 
Sections with NACA a = 0.8 Camber and BuShips Type I and Type II Sections, 
(Report 1780) David W. Taylor Naval Ship Research and Development Center. 

[6] Hally, D. (1994), C++ Classes for Reading and Writing files in OFFSRF 
Format, (DREA Tech.Comm. 94/302) Defence R&D Canada - Atlantic. 

[7] Hally, D. (2006), C++ classes for representing curves and surfaces: 

Part IV: Distribution functions, (DRDC Atlantic TM 2006-257) Defence R&D 
Canada - Atlantic. 


DRDC Atlantic TM 2009-053 


51 



This page intentionally left blank. 


52 


DRDC Atlantic TM 2009-053 



Annex A: Integrating mean lines 


Thin airfoil theory provides expressions for the angle of zero lift, the ideal angle of 
attack and the pitching moment coefficient in terms of integrals of a canonical mean 
line along the chord line: see Equations (32)-(34). This annex discusses the methods 
for evaluating these integrals. 

First suppose that the mean line is a polynomial, 

N 

p( o = J>c" (A.i) 

71=0 


and we wish to evaluate the portion of the integral on ( E [a, 6]. Then it is clearly 
sufficient to be able to evaluate the integrals 


j,.nK)= f em<K 

(A.2) 

for i = 1, 2 or 3. Let 

In (£) ~~ J (1 _ Q3/2 

(A.3) 

Integrate by parts to get 


4(C) = CMC) - n f C”-'4(C)<iC 

(A.4) 

f (n-1/2 

= CI o(0 2 V( i-o^dC 

(A.5) 

= C"4(C) - 2n(4(C) - 4+i(0) 

(4.6) 

Therefore 

, ,,, (2n + 1)4(0 - CMC) 

4 + ‘(C) - 2n 

(A.T) 

provided that n > 0. The first few /„(() are 


r 2(2C-1) 

c yowl 

I 

(A.8) 

«« = 2 Vi-c 

(A.9) 

h(C) = arcsin(l - 2£) + J 0 (C) 

(A. 10) 

r t _ 3 arcsin(l - 2() + (3 - CKo(C) 

2 (C) 2 

(A.ll) 

r 15 arcsin(l - 2() + (15 - 5£ - 2C 2 )/ 0 (C) 

4(C) - 8 

(A. 12) 

DRDC Atlantic TM 2009-053 

53 












Now we can write 


JUO = 4(0 

(A.13) 

•M0 = 4(0 - 34+i(C) + 24+2(0 

(A.14) 

4,n(C) = 4-00-24(0 

(A.15) 


The integrals of the polynomial over [a, 6] are then: 

f b n 

/ p(0fi(C)dC = 'Y^c n {j it n(b) - Ji,n(a)) (A.16) 

4 n =0 

for % — 1, 2 or 3. Notice that if a = 0, then Cq = 0, since the mean line is canonical. 
We can then increase the lower limit of n to 1. Since I n ( 0) is well-defined for all n > 0, 
Ji t n( 0) is also well-defined for all n > 1 and the integrals are still easily evaluated. 
However, more care is needed for the case when 6 = 1 since I n ( 1) is not well-defined 
for any n. In this case we redefine the polynomial as an expansion around £ = 1: 


N 


p(o = INu - o’ 


Then we have 


with 


n =0 

N 


p(0M0 d( = Yl d n {K in (b) - K i>n (a)) 

n =0 

K,A<)= [(i-crMQdC 


Let u — 1 — Then 

KiAO = - J u n h(l -u) du = 
K 2 , n ( C) = ~ J « n /2(l ~ u) du — 

K 3 ,n( C) = - [ u n f 3 (l — u) du — 


u 


n- 3/2 


J \/l — U 

u n ( 1 - 2 u) 

\J u( 1 — u) 
u n ( 1 - 2 u) 


\/u 3 ( 1 — u) 3 


du = / n (l - C) - 4-i(l 
du J'2,n (1 C) 

du <4,n(l C) 


(A.17) 

(A.18) 
(A.19) 

0 (A.20) 
(A.21) 

(A.22) 
(A.23) 


Because the mean line is canonical, when 6 = 1, do — 0. Therefore the minimum 
value of n is 1 and K^ n { 1) is well-defined. 


Finally we must consider the case when we integrate over the full interval [0,1]. In 
this case the polynomial p(Q must be of the form 

N -2 

p( 0 = C(i - C)a(C) = “nC” (A.24) 

n=0 


54 


DRDC Atlantic TM 2009-053 



Let 


Qn 


•1 £n-1/2 

) a/1 - ^ 


da; 


(A.25) 


It is easy to determine that Qo = 7T- For n > 0 we can integrate by parts to get 
Q n = -2C n_1/2 \/l — xl* + 2 (n - \) [ C n_3/2 \/l ~ xdx 


= (2 n - 1) 


1 3/2 _ fn—1/2 


C 


Therefore 


Qn 


a /1 — X 

(2n — l)Q n -\ _ (2n)\n 
2n “ (2 n n\) 2 


dx = (2n — l)(<2n-i — Qn) (A.26) 


We can now write 


(A.27) 


TV-2 


«o —- 

7T 


C(1 - CMC)/l(C) =- a nQn+l 

7r z ' 


n=0 


(A.28) 


7T 


Cm = 2 j C(l-CMC)/2(C)dC+2«0 
AT-2 


2 a n ((5 n+ i — 3Q n +2 + 2Q n+3 ) + —ao 


n=0 
TV—2 


TV—2 


i V „ n (3Q„ +1 - 12Q„ +2 + 8Q„ +3 ) = - X (A.29) 


72=0 


72=0 


4(n + 2 )(n + 3) 


a i=^l C(F- C)9(C)/3(C) d( 


>0 

TV—2 


2tt 


^ ^ dn(Qn 2Q n+1 ) 


n=0 


1 ^-2 /-> 

1 ^—\ na n Q n 

2 7T n _|_ 1 

ra=0 


(A.30) 


If the mean line is represented by a spline, we can use these expressions to evaluate 
the integrals on each polynomial segment of the spline. For the case of an arbitrary 
canonical mean line, we first approximate the mean line with a spline, then use the 
spline to calculate the integrals. 


DRDC Atlantic TM 2009-053 


55 



This page intentionally left blank. 


56 


DRDC Atlantic TM 2009-053 



Annex B: Blunt closure of an airfoil 


In this annex we describe the algorithm used to close the trailing edge of an airfoil 
defined using the complete airfoil curve. The curve x(£) is modified so that near the 
trailing edge it approximates an elliptical arc with radius of curvature r. Let A be the 
trailing edge gap: A = |x(l) — x(0)|. Then the width of the ellipse is approximately 
A. Let its length be 2 a. Then the radius of curvature at the trailing edge is r = A 2 /4 a 
and a = A 2 /4r. 

Let t be an aft-pointing unit vector tangent to the mean line at the trailing edge and 
let n be an upward-pointing unit normal to the mean line at the trailing edge. Let 
X and Y be coordinates aligned with n and t and with origin at the trailing edge: 


X = f-(x —x te ); F = h • (x — x te ) (B.l) 

(see Figure B.l). We will also denote by (A(£), F(£)) the value of the £-curve in this 
coordinate system: i.e. 


X (0 = n ■ (x(£) - x te ); F(£) = i ■ ( x (0 - x te) ( B -2) 


Let £ p be the value of £ in the range [0, 7] such that A(£ p ) = —a. Similarly, £ s is the 
value of £ in the range [|, 1] such that X(£ s ) = —a. It is important to note that if 
the required radius of curvature is large (so a is small) and the trailing edge gap is 
oblique to the mean line, one of £ p or £ s may not be defined: see Figure B.2. 


In the region £ G [0,£ p ] we replace the £-curve with 

x ne«j (£) = X p (£)t + T p (£)h 


(B.3) 


where 


^ P (£) 

n(0 

Cp 

dp 

v(0 


x&) + M0 - e P )X'(£ p ) - (A(£ p ) - £ P A'(£ P )) 


{v{€)-€p ) 2 


- v / 2r?/(£) + c p ??(£) + d p r]^) 2 



,21%) 

YM 

% 


0 


- y\h p ) 
, Y'fo) 


(B.4) 

(B.5) 

(B.6) 

(B.7) 

(B.8) 


This is continuous and smooth at £ = £ p . The function r/(£) is simply a reparametriza- 
tion which ensures that the derivatives at £ = 0 are well-defined. It is quadratic in £ 


DRDC Atlantic TM 2009-053 


57 












Figure B.1: Blunt trailing edge closure 
for an airfoil defined using the complete 
airfoil curve. 


Figure B.2: A case in which £ s is not 
well defined because the trailing edge 
gap crosses the mean line obliquely. 


near zero (so that the square root term in Equation (B.5) is linear in £) and satisfies 
rj(0) = 0 and v'i.0) = 1 so that it joins smoothly to the standard parameterization 
at £ = £ p . 

Similarly, in the region £ G [6, 1] we define 


x ne ™(£) = X s (£)t + Y s (£)h 


(B.9) 


with 


Cs 

d s 

v(0 


x(Q + HO - 6)*'(6) - (*(6) + (i - 6)*'(6)) 

^2r(l-r](0) +c s ( 1 - r 1 ( 0 ) + d 8 ( 1 - r?(£)) 2 
7 l l Y'( & ) 

^ y(6) r(6) 


MO-6) 5 

(i - 6) 2 


i - 


2(1 — 6) 3 (i-£s ) 2 (1-6) 

(l-£) 2 (l-2£, + £) 


( 1 - 6) 2 


(B.10) 

(B.ll) 

(B.12) 

(B.13) 

(B.14) 


58 


DRDC Atlantic TM 2009-053 

















Annex C: Prototypes for FormattedOStream 


A FormattedOStream is an output stream which does some basic formatting of the 
output characters. A line width can be set so that the output will wrap nicely if a 
line is too long. An indent level can be set so that all lines are indented on the left. 

A FormattedOStream is intended for output to a computer terminal. 

A FormattedOStream adapts an underlying std: :ostream: i.e. all the output is 
done via the std: :ostream; the FormattedOStream simply adds spaces and new line 
characters where appropriate to generate the required formatting. 

C.1 Constructors 

FormattedOStream has two constructors: 

FormattedOStream() 

The underlying std: :ostream is std: :cout. The initial indentation is zero 
and the number of columns of output is 79. 

FormattedOStream(std::ostream &os) 

Creates a FormattedOStream which adapts os. The initial indentation is zero 
and the number of columns of output is 79. 


C.2 Indentation functions 

The following three member functions can be used to control the indentation. 

int get_indent() const 

Returns the current level of indentation. 

int indent(int i) 

Sets the level of indentation to i and returns the previous value. The new level 
of indentation will not be negative. 

void rel_indent(int i) 

Increments the level of indentation by i. The new level of indentation will not 
be negative. 


DRDC Atlantic TM 2009-053 


59 



C.3 Line length functions 

The following functions can be used to control the line length (number of columns of 
output). 

int get_num_cols() const 

Returns the current number of columns of output. 

int num_columns(int i) 

Sets the number of columns of output to i and returns the previous value. The 
new value will not be smaller than 1. 


void rel_num_columns(int i) 

Increments the number of columns by i. The new value will not be less than 1. 


C.4 Inserters 

The following insertion operators are defined. 

ForraattedOStream& operator<<(const char* s) 

Writes a string formatted using the current indentation and number of columns. 

ForraattedOStream& operator<<(const std::string &s) 

Writes a string formatted using the current indentation and number of columns. 

FormattedOStream& operator<<( 

ForraattedOStream& (*f)(ForraattedOStream&)) 

An inserter for no-argument manipulators. 

ForraattedOStream& operator<<(std::ios& (*f)(std::iosfe)) 

An inserter for standard no-argument manipulators. 

template<class T> 

ForraattedOStream& operator<<(const T &t) 

Converts t to a character string then writes the formatted string. The con¬ 
version is done by writing t to a std: :ostringstream; therefore t must be 
writable. 

C.5 Other member functions 

unsigned number_of_lines() const 

Returns the number of lines written to the stream. 


60 


DRDC Atlantic TM 2009-053 



std::ostreamfe base_stream() 

Returns the stream being adapted. 

The following functions are all implemented by applying the corresponding function 
in namespace std to the underlying std: :ostream: 

std::ios::fmtflags flags() const 

std::ios::fmtflags flags(std::ios::fmtflags f) 

std::ios::fmtflags setf(std::ios::fmtflags f) 

std::ios::fmtflags setf(std::ios::fmtflags flag, std::ios::fmtflags m) 

void unsetf(std::ios::fmtflags mask) 

std: :streamsize precisionO const 

std::streamsize precision(std::streamsize p) 

std::streamsize widthO const 

std::streamsize width(std::streamsize w) 

char_type fill() const 

char_type fill(char_type c) 

bool goodO const 

bool eof() const 

bool failO const 

bool bad() const 

operator void*() const 

bool operator!() const 

void flush() 


C.6 Manipulators 

The manipulators resetiosf lags, setiosflags, setbase, setf ill, setprecision 
and setw are all defined for a FormattedOStream. They are each similar to the cor¬ 
responding manipulator in namespace std applied to the underlying std: :ostream. 
In addition, the following special purpose manipulator is defined. 

indent 

Writes spaces until the indentation level is reached. If the current location is to 
the right of the indentation, nothing is done. 


DRDC Atlantic TM 2009-053 


61 







List of symbols 


a Angle of attack. 

«o Angle of attack which generates zero lift according to thin airfoil theory. 

oii The ideal angle of attack. 

A The thickness at the trailing edge: |x(l) — x(0)|. 

6 An angle used to traverse circles in the complex plane defining Joukowski 

airfoils. 

$ The complex potential for the flow past a Joukowski airfoil. 

cj) An angle used to identify the leading and trailing edges of a Joukowski 

airfoil when represented in the (/-plane. 

rj Parameter used to avoid zero derivatives at the trailing edge of a 

Joukowski airfoil. 

£ Non-dimensional airfoil parameter increasing from 0 on the pressure side, 

through \ at the leading edge, to 1 at the trailing edge on the suction side. 

£ The fractional chord length along the straight line joining the leading 

edge (£ = 0) to the trailing edge (£ = 1). 

(j The value of £ at which the two segments of a NACA 5-digit mean line 

offset curve join. 

£ m The value of £ at which a mean line has its maximum deviation from the 

chord line. 

A, B Constants used when defining Joukowski airfoils. 

a The location of the trailing edge of a Joukowski airfoil in the complex 

(/-plane. Also used for fractional arclength around an airfoil. Also used as 
a parameter for mean lines with constant load distributions. 

c The cambre of an airfoil: i.e. the maximum deviation of the mean line 

from the chord line. 

C The centre of the circle defining a Joukowski airfoil in the complex 

(/-plane. 

Cl The lift coefficient. 


62 


DRDC Atlantic TM 2009-053 



The lift coefficient at the ideal angle of attack: the ideal or design lift 
coefficient. 


C u 

C m The pitching moment coefficient about one-quarter chord. 

/i, / 2 , fz Functions used to calculate cco, cq, Cli and C m according to thin airfoil 
theory. 

k\ Parameter used to define NACA 5-digit mean lines. 

m(C) The mean line parameterized using (. 
n A unit normal to the airfoil or mean line. 

n x , riy Components of h. 

p(C) The pressure side of the airfoil surface parameterized using (. 

p A complex number used to define Joukowski airfoils. In the p-plane the 

leading edge is at (—2a, 0) and the trailing edge is at (2a, 0). 

q A complex number used to define Joukowski airfoils. In the g-plane the 

airfoil surface is a circle centred at C passing through (a, 0). 

s(<C) The suction side of the airfoil surface parameterized using (. 

p A complex number used to define Joukowski airfoils. In the tc-plane the 

airfoil is canonical. 

r Radius of curvature at the leading or trailing edge. 

t The thickness of an airfoil. 

V The speed of flow at infinity past a Joukowski airfoil. 

v x — iv y Complex velocity. 

x(£) The airfoil surface parameterized using £. 

x ie The point at the leading edge; equal to x(l), p(0) and s(0). 

x te The point at the trailing edge; equal to |(x(0) + x(l)) and 

|(p( 1 ) + s ( 1 ))- 

z Complex number used to define Joukowski airfoils. In the z -plane the 

airfoil surface is the unit circle. 


DRDC Atlantic TM 2009-053 


63 



Index 


Airfoil<F>, 4-7, 8, 9, 15, 20, 21, 43 
AirfoilReader<F>, 39-42, 43-46 
Angle<F>, 39 

ArcMeanLineOffset<F>, 30-31 

BSplineOffsetAirfoil<F>, 9-12 

ConstLoadMeanLineOffset<F>, 
28-30, 38 
Curve<N,¥,F>, 4 
CurveLib classes 

Curve<lU,F,F>, 22, 23, 32 
Curve<N,V,F>, 3-5, 14, 16 

Error, 35, 39, 43, 44 
exceptions 

Error, 3, 5, 21, 32 

ProgError, 3, 7, 32 
UnknownNACADesignation, 35, 37 

ForraattedOStream, 47, 59-61 

InvJoukowskiMapping<F>, 15 

JoukowskiMapping<F>, 14-15 
JoukowskiPotential<F>, 16-17 
JoukowskiVelocity<F>, 16-17 

manipulators 

resetiosflags, 61 
setbase, 61 
setfill, 61 
setiosflags, 61 
setprecision, 61 
setw, 61 
mean line, 2, 5 

mean line offset curve, 19, 21-31, 35, 
38 

circular arc, 30-31 
constant load, 28-30 
from offsets, 31 
from PP-splines, 23-24 
NACA 4-digit, 23-26 


NACA 5-digit, 26-28 
MeanLineOffset<F>, 20, 21-23, 24, 

29 

MeanLineOffsetReader<F>, 45, 45 

NACA airfoils, 35-38 

16-series, 1, 28, 35, 37, 49 

4- digit, 1, 23, 24, 34, 35, 37, 49 

5- digit, 1, 26, 34, 35, 37, 49 

6- series, 1, 29, 35, 38, 49 
NACA4DigitMeanLine0ffset<F>, 

24 26, 37 

NACA4DigitThicknessCurve<F>, 34, 
37 

NACA5DigitMeanLine0ffset<F>, 
26-28, 37 

NACA66DTMBmod<F>, 38-39 
NACAAirf oil<F>, 4, 5, 35-38, 41 
namespaces 
Afoil, 4, 16 

CurveLib, 3-5, 14, 16, 22, 23, 32 
Offsrf, 39 
Spline, 23, 24, 31 
std, 3, 14, 39, 46, 59-61 
VecMtx, 3, 4 

OffsetAirfoil<F>, 8-9, 9 
OffsetMeanLineOffset<F>, 31 
OffsetThicknessCurve<F>, 34-35 
Offsrf classes 
IFStream, 39 

PPSplineMeanLineOf f set<F>, 23-24, 

25, 27 

Spline classes 

CubicSpline<F,F>, 31 
KnotSeq<F>, 31 
PPSpline<F,F>, 23, 24 

std classes 

cerr, 3 

complex<F>,14 


64 


DRDC Atlantic TM 2009-053 



cout, 59 
ios, 60, 61 
istream, 39 
ostream, 59, 61 
ostringstream, 60 
string, 46 

ThickCurveReader<F>, 45-46 
ThickDistAirfoil<F>, 19-21, 35, 38, 

43, 44 

ThickDistAirfoilReader<F>, 43, 

43 45 

ThickDistAirfoilreader<F>, 43 

thickness curve, 19, 20, 31-35, 35, 37, 
38 

from offsets, 34-35 
NACA 4-digit, 34 
ThicknessCurve<lU,F,F>, 35 
ThicknessCurve<F>, 20, 31-33, 34 
ThicknessCurveReader<F>, 45 
TrailingEdgeSpec, 8 

VecMtx classes 

VecN<N,F>, 3,4 


DRDC Atlantic TM 2009-053 


65 


This page intentionally left blank. 


66 


DRDC Atlantic TM 2009-053 



Distribution list 


DRDC Atlantic TM 2009-053 

Internal distribution 

1 Author 

3 Library (1 paper, 2 CDs) 

Total internal copies: 4 

External distribution 

Department of National Defence 

1 DRDKIM 

2 DMSS 2 

Others 

1 Library and Archives Canada 

(normally 1 copy) 395 Wellington Street 
Ottawa, Ontario 
K1A ON4 

Attn: Military Archivist, Government Records Branch 

1 Director-General 

Institute for Marine Dynamics 
National Research Council of Canada 
P.O. Box 12093, Station A 
St. John’s, Newfoundland 
A1B 3T5 

1 Director-General 

Institute for Aerospace Research 
National Research Council of Canada 
Building M-13A 
Ottawa, Ontario 
K1A OR6 


DRDC Atlantic TM 2009-053 


67 



1 Transport Development Centre 

Transport Canada 
6th Floor 

800 Rene Levesque Blvd, West 
Montreal, Qne. 

H3B 1X9 

Attn: Marine RAD Coordinator 

1 Canadian Coast Guard 

Ship Safety Branch 
Canada Building, 11th Floor 
344 Slater Street 
Ottawa, Ontario 
K1A 0N7 

Att: Chief, Design and Construction 

MOUs 

6 Canadian Project Officer ABCA-02-01 (C/SCI, DRDC Atlantic - 3 paper 
copies, 3 PDF hies on CDROM) 

Total external copies: 14 
Total copies: 18 


68 


DRDC Atlantic TM 2009-053 



3. 


DOCUMENT CONTROL DATA 

(Security classification of title, body of abstract and indexing annotation must be entered when document is classified) 


ORIGINATOR (The name and address of the organization preparing the 2. 

document. Organizations for whom the document was prepared, e.g. Centre 
sponsoring a contractor’s report, or tasking agency, are entered in section 8.) 


SECURITY CLASSIFICATION (Overall 
security classification of the document 
including special warning terms if applicable.) 


Defence R&D Canada - Atlantic 

PO Box 1012, Dartmouth NS B2Y 3Z7, Canada 


UNCLASSIFIED 


TITLE (The complete document title as indicated on the title page. Its classification should be indicated by the appropriate 
abbreviation (S, C or U) in parentheses after the title.) 


C++ classes for representing airfoils 


4. AUTHORS (Last name, followed by initials - ranks, titles, etc. not to be used.) 

Hally, D. 


5. DATE OF PUBLICATION (Month and year of publication of 
document.) 

6a. NO. OF PAGES (Total 
containing information. 

Include Annexes, 

Appendices, etc.) 

6b. NO. OF REFS (Total 
cited in document.) 

January 2010 

80 

7 


7. DESCRIPTIVE NOTES (The category of the document, e.g. technical report, technical note or memorandum. If appropriate, enter 
the type of report, e.g. interim, progress, summary annual or final. Give the inclusive dates when a specific reporting period is 
covered.) 


Technical Memorandum 


8. SPONSORING ACTIVITY (The name of the department project office or laboratory sponsoring the research and development - 
include address.) 

Defence R&D Canada - Atlantic 

PO Box 1012, Dartmouth NS B2Y 3Z7, Canada 


9a. PROJECT OR GRANT NO. (If appropriate, the applicable 
research and development project or grant number under 
which the document was written. Please specify whether 
project or grant.) 

9b. CONTRACT NO. (If appropriate, the applicable number under 
which the document was written.) 

Project 11 cd23 


10a. ORIGINATOR’S DOCUMENT NUMBER (The official 

document number by which the document is identified by the 
originating activity. This number must be unique to this 
document.) 

10b. OTHER DOCUMENT NO(s). (Any other numbers which may 
be assigned this document either by the originator or by the 
sponsor.) 

DRDC Atlantic TM 2009-053 



11. DOCUMENT AVAILABILITY (Any limitations on further dissemination of the document, other than those imposed by security 
classification.) 


(X) Unlimited distribution 

( ) Defence departments and defence contractors; further distribution only as approved 
( ) Defence departments and Canadian defence contractors; further distribution only as approved 
( ) Government departments and agencies; further distribution only as approved 
( ) Defence departments; further distribution only as approved 
( ) Other (please specify): 


12. DOCUMENT ANNOUNCEMENT (Any limitation to the bibliographic announcement of this document. This will normally correspond 
to the Document Availability (11). However, where further distribution (beyond the audience specified in (11)) is possible, a wider 
announcement audience may be selected.) 




13. ABSTRACT (A brief and factual summary of the document. It may also appear elsewhere in the body of the document itself. It is highly 
desirable that the abstract of classified documents be unclassified. Each paragraph of the abstract shall begin with an indication of the 
security classification of the information in the paragraph (unless the document itself is unclassified) represented as (S), (C), or (U). It is 
not necessary to include here abstracts in both official languages unless the text is bilingual.) 

A library of C++ classes for representing the geometry of airfoils is described. The classes 
are based on the CurveLib library for representing differentiable curves. Airfoils that have been 
represented explicitly include Joukowski airfoils, the NACA 4-digit, 5-digit, 16-series and 6-series 
airfoils, as well as the DTMB modification of the NACA 66 airfoils commonly used for marine 
propellers. Generic airfoils can be defined from offsets on the airfoil surface or from offsets 
defining mean line and thickness curves. Several methods for closing the trailing edges of airfoils 
with a trailing edge gap are also implemented. 


14. KEYWORDS, DESCRIPTORS or IDENTIFIERS (Technically meaningful terms or short phrases that characterize a document and could 
be helpful in cataloguing the document. They should be selected so that no security classification is required. Identifiers, such as 
equipment model designation, trade name, military project code name, geographic location may also be included. If possible keywords 
should be selected from a published thesaurus, e.g. Thesaurus of Engineering and Scientific Terms (TEST) and that thesaurus identified. 
If it is not possible to select indexing terms which are Unclassified, the classification of each should be indicated as with the title.) 

Airfoils 
NACA airfoils 
Joukowski airfoils 
Geometry 
C++ 

computer programs 




This page intentionally left blank. 



Defence R&D Canada R & D pour la defense Canada 


Canada's leader in defence 
and National Security 
Science and Technology 


Chef de file au Canada en matiere 
de science et de technologie pour 
la defense et la securite nationale 


DEFENCE 



www.drdc-rddc.gc.ca 


