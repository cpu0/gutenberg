REPORT DOCUMENTATION PAGE 


•r'C'v 'pw'.r*rs' ro»v 


J. REPDH Mi-.I 


|2. tovl ACCESSION NC 13 RECIPIENT S CA1A..OC Nj«r:R 




j 4 TJUf <#oCi*/£> - >T'f 

Aca Compiler Validation Summary Repor t: Alliant 

j-p, punuiur Svstems Corporation, Aiiiant FX/Aua Compiler, 

Ui crsior 1.1:, Alliant FX/80 (Host anc Target ). 890605W1.100( 


00 7. AllKOR;, 

Wr igKf^Pat t er sor: AFL 
^ Daytor., OH, USA 


HAfORNINC 0RC»M2AT10 n ANC ADDRESS 

Wright-Patterson APE 
Dayton, OH, USA 


.1 COMRu. I INC 0‘flCC N»*<L AM ADDRESS 

Ada Joint Program Office 
* United States Department of Defense 
» Washington, DC 20301-3081 


14. HON 3 TOR3NC AuENCT NR*; A ADORE SS('» Oitir't nt from Controlling Oftict) 

Wright-Patterson AFB 
Dayton, OH, USA 


16. riSTRJE.tlON STATEMENT (ofjhuftrpoa) 


i TYPE Of *1*0*^ k PERJOC COHERES 

05 June 1989 to 05 June 1990 


. PE*f0RN3NC T)RC . REPORT AjMEER 


l. CONTRACT OP SRAM NJMEiRu, 


1C. PROGRAM EtEMEM. RRC.'iCl. lASi 
AREA k WORK UR3T AllMsERS 


12. REPORT DATE 


li. SECURJm ClASS (o' fftij rtpon/ 

UNCLASSIFIED 


IS* . p[Ct*££;f ICATJON.'OC^sCRAtlNC 

dihiJui. £ 

K/A 


Approved for public release; distribution unlimited. 


17 . C31'R3 t.’ 10*> S7 A'Em;N' (o' ii>r.'»d tmtrf a 6^* j?^r-W f'Om Report) 

*5 ii $ £ 

UNCLASSIFIED *• ^ __ 

,<J>. v.LF.C'l £ 

* 5 » W AIS 0 3 1989 


It. SJPf.£ n-MA^ NOTES 


*4> V ‘ 


D* 


It . RE y»D s CS (Connn U f on it ,f rj, jiof ifnf tew*'> #*>tf ;Orniif> b> 6/od num&rO 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1B15A, Ada Joint Program Office, AJPO 


20 . AES7R*C 7 (Continue on '*»» 'tr jitff if rtrtnury #ntf ,dr ntiY) 6, blocf number) 

Alliant Computer Systems Corporation, Alliant FX/Ada Compiler, Version 2.2, Wright-Patter 
AFB, Alliant FX/80 under Concentrix, Release 5.0 (Host and Target), ACVC 1.10. 


1473 iomo*. 0 * 1 nov tt js obsolete 
1 Jar 73 s/n ci02-i»-ci*-e6ci _ UNCLASSIFIED _ 

SECURITY ClASSJf1CAT10N Of 1k3S PACE («n,nD,t, Intt'eCf; 


















AVF Control Number: AVF-VSR-275.0689 

89-04-06-ACS 



Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890605V1.10083 
Alliant Computer Systems Corporation 
Alliant FX/Ada Compiler, Version 2.2 
Alliant FX/80 


Completion of On-Site Testing: 
5 June 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OB 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 







Ada Compiler Validation Summary Report 


Compiler Name: Alliant FX/Ada Compiler, Version 2.2 
Certificate Number: 890605V1.10083 


Host: Alliant FX/80 under 

Concentrix, Release 5.0 

Target: Alliant FX/80 under 

Concentrix, Release 5.0 


Testing Completed 5 June 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 



Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 




Ada Compiler Validation Summary Report 


Compiler Name: Alliant FX/Ada Compiler, Version 2.2 
Certificate Number: 890605V1.10083 


Host: Alliant FX/80 under 

Concentrix, Release 5.0 

Target: Alliant FX/80 under 

Concentrix, Release 5.0 


Testing Completed 5 June 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analys 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT . . . . 1- 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1- 

1.3 REFERENCES.1- 

1.4 DEFINITION OF TERMS.1- 

1.5 ACVC TEST CLASSES.1- 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-5 

3.7.1 Prevalidation.3-5 

3.7.2 Test Method.3-6 

3.7.3 Test Site .3-6 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED BY ALLIANT 


c j r>i m m sr 



















CHAPTER 1 


INTRODUCTION 


' { . 

This Validation Summary Report (VSRj - describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability * (ACVC) .r An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences betveen compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
--given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. -The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 





1-1 











INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing vas carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler vas conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 5 June 1989 at Littleton MA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national lavs of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 




INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-18I5A, February 1983 and ISO 6^52-1^8 7 - 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implemented’ Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User’s Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


Applicant 

AVF 


AVO 


Compiler 


The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible for 
conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


The Ada Validation Organization. The AVO has oversight 
authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 


1-3 




INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks ^a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Vithdrawn 
test 


1-4 




INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are nc capacity requirements placed on a compiler by the Ada 
Standard for some parameters — for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 






INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this valiaation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 




CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: Alliant FX/Ada Compiler, Version 2.2 
ACVC Version: 1.10 
Certificate Number: 890605V1.10083 
Host Computer: 

Machine: Alliant FX/80 

Operating System: Concentrix 

Release 5.0 

Memory Size: 96 Megabytes 


Target Computer: 

Machine: 

Operating System: 
Memory Size: 


Alliant FX/80 

Concentrix 
Release 5.0 

96 Megabytes 


2-1 




CONFIGUR/TION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY_INTEGER, SHORT_INTEGER, and SHORTFLOAT in package 

STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components ?•e evaluated before any value is checked for 
membership ii a component's subtype. (See test C32117A.) 

(2) Assignment! j.o r subtypes are performed with the same precision 
as the base tyo* (See test C35712B.) 


(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 







CONFIGURATION INFORMATION 


(4) Sometimes NUMERIC_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes NUMERIC ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is not gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 


An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX INT. 


For this implementation: 


(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 

(2) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 


(3) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 
array type with SYSTEM.MAX_INT + 2 components. (See test 

C36202B.) 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 


2-3 











CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERR0R when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERR0R or CONSTRAINT^ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


2-4 





CONFIGURATION INFORMATION 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL 10 can be instantiated with 
unconstrained array types~and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_I0 can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and 0UT_FILE are supported for SEQUENTIAL_I0. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, 0UT_FILE, and IN0UT_FILE are supported for 
DIRECT_I0. (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN FILE and OUT FILE are supported for text files. (See 
tests CE3>:02E and CE3T02I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_I0. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file truncates to the last element 
written. (See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 

(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 


2-5 









CONFIGURATION INFORMATION 


(13) More than one internal file can be associated with each 

external file for sequential files when writing or reading. 
(See tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when writing or reading. (See 
tests CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when writing or reading. (See 
tests CE3111A..E, CE3114B, and CE3115A.) 


2-6 




CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 328 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 10 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


TEST CLASS 
A B C D 

129 1132 1993 17 

0 6 322 0 

1 2 35 0 

130 1140 2350 17 


TOTAL 
E L _ 

28 46 3345 

0 0 328 

6 0 44 

34 46 3717 


3-1 











TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

331 

137 

36 

252 

292 

300 

3345 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

LI 

328 

Vdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 

3.4 WITHDRAWN 

TESTS 













The following 44 tests were withdrawn from ACVC Version 1.10 at thvtime of this 
validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


CE3301A CE3411B 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 328 tests were inapplicable for the reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y 
C35708L..Y 
C45421L..Y 
C45641L..Y 


C35705L..Y 
C35802L..Z 
C45521L..Z 
C46012L..Z 


C35706L..Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 
C45321L..Y 
C45621L..Z 


3-2 









TEST INFORMATION 


b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type L0NG_FL0AT. 

c. The following 16 tests are not applicable because this implementation 
does not support a predefined type LONG_INTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52004D C55B07A B55B09C B86001V 

CD7101F 

d. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

e. C86001F is not applicable because, for this implementation, the package 

TEXT_IO is dependent upon package SYSTEM. These tests recompile 

package SYSTEM, making package TEXT_IO, and hence package REPORT, 
obsolete. 

f. B86001Y is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 

LONG_FLOAT, or SHORT_FLOAT. 

h. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 
clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation does 

not support size clauses for array types, which imply compression, with 
component types of composite or floating point types. This 

implementation requires an explicit size clause on the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 
types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not applicable 
because this implementation does not support size clauses for tasks or 
task types. 

m. The following 42 tests are not applicable because this implementation 
does not support an address clause when a dynamic address is applied to 
a variable requiring initialization: 

CD5003B..H CD5011A..H CD5011L..N CD5011Q 

CD5011R CD5012A..I CD5012L CD5013B 

CD5013D CD5013F CD5013H CD5013L 


3-3 




TEST INFORMATION 


CD5013N CD5013R CD5014T..X 

n. CE2102D is inapplicable because this implementation supports CREATE 

with IN_FILE mode for SEQUENTIAL_IO. 

o. CE2102E is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for SEQUENTIAL_I0. 

p. CE2102F is inapplicable because this implementation supports CREATE 

with INOUT_FILE mode for DIRECT_IO. 

q. CE2102I is inapplicable because this implementation supports CREATE 

with IN_FILE mode for DIRECT_IO. 

r. CE2102J is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for DIRECT_IO. 

s. CE2102N is inapplicable because this implementation supports OPEN with 
IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET with 
IN_FILE mode for SEQUENTIAL_IO. 

u. CE2102P is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for SEQUENTIAL_IO. 

v. CE2102Q is inapplicable because this implementation supports RESET with 
OUT_FILE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN with 
INOUTJFILE mode for DIRECT_IO. 

x. CE2102S is inapDlicable because this implementation supports RESET with 
INOUT_FILE mode'for DIRECT_IO. 

y. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mode for DIRECT_IO. 

z. CE2102U is inapplicable because this implementation supports RESET with 
IN_FILE mode for DIRECT_IO. 

aa. CE2102V is inapplicable because this implementation supports open with 
OUTJTLE mode for DIRECT_IO. 

ab. CE2102V is inapplicable because this implementation supports RESET with 
OUT_FILE mode for DIRECT_IO. 

ac. CE3102E is inapplicable because this implementation supports CREATE 
with IN_FILE mode for text files. 

ad. CE3102F is inapplicable because this implementation supports RESET for 
text files. 


"-4 







TEST INFORMATION 


ae. CE3102G is inapplicable because this implementation supports deletion 
of an external file for text files. 

af. CE3102I is inapplicable because this implementation supports CREATE 
with OUT FILE mode for text files. 

ag. CE3102J is inapplicable because this implementation supports OPEN with 
IN FILE mode for text files. 

ah. CE3102K is inapplicable because this implementation supports OPEN with 
OUT FILE mode for text files. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 

Modifications were required for 10 tes.s. 


The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A B91001H BC1303F BC3005B 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
Alliant FX/Ada Compiler was submitted to the AVF by the applicant for review. 
Analysis of these results demonstrated that the compiler successfully passed all 
applicable tests, and the compiler exhibited the expected behavior on all 
inapplicable tests. 


3-5 





TEST INFORMATION 


3.7.2 Test Method 


Testing of the Alliant FX/Ada Compiler using ACVC Version 1.10 was conducted 
on-site by a validation team from the AVF. The configuration in which the 
testing was performed is described by the following designations of hardware and 
software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


Alliant FX/80 

Concentrix, Release 5.0 

Alliant FX/80 

Concentrix, Release 5.0 

Alliant FX/Ada Compiler, Version 2.2 


A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the magnetic tape. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the magnetic tape. 


The contents of the magnetic tape were loaded directly onto the host computer. 


After the test files were loaded to disk, the full set of tests vas compiled, 
linked, and all executable tests were run on the Alliant FX/80. Results were 
printed from the host computer. 

The compiler was tested using command scripts provided by Alliant Computer 
Systems Corporation and reviewed by the validation team. The compiler was 
tested using all the following option settings. See Appendix E for a complete 
listing of the compiler options for this implementation. The following list of 
compiler options includes those options which were invoked by default: 


-M ada_source.a 
-01 


Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Littleton MA and was completed on 5 June 1989. 


3-6 






APPENDIX A 


DECLARATION OF CONFORMANCE 


Alliant Computer Systems Corporation has submitted the 
following Declaration of Conformance concerning the Alliant 
FX/Ada Compiler. 


A-l 




declaration of conformance 


DECLARATION OF CONFORMANCE 

Compiler Implementor: Alliant Computer Systems Corporation 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH ^5^33-6503 

Ada Compiler Validation Capability (ACVC1 Version: 1.10 

Base Configuration 

Base Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/80 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/80 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Registration 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/40 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/40 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/8 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/8 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/4 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/4 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/1 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/1 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant FX/82 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant FX/82 

Target OS and Version: Concentrix, Release 5.0 

Derived Compiler Name: Alliant FX/Ada Compiler, Version 2.2 

Host Architecture ISA: Alliant VFX/80 

Host OS and Version: Concentrix, Release 5.0 

Target Architecture ISA: Alliant VFX/80 

Target OS and Version: Concentrix, Release 5.0 


A-2 







DECLARATION OF CONFORMANCE 


Derived Compiler Name: 
Host Architecture ISA: 
Host OS and Version: 
Target Architecture ISA: 
Target OS and Version: 

Derived Compiler Name: 
Host Architecture ISA: 
Host OS and Version: 
Target Architecture ISA: 
Target OS and Version: 

Derived Compiler Name: 
Host Architecture ISA: 
Host OS and Version: 
Target Architecture ISA: 
Target OS and Version: 


Alliant FX/Ada Compiler, Version 2.2 
Alliant VFX/40 
Concentrix, Release 5.0 
Alliant V^X/40 
Concentrix, Release 5.0 

Alliant FX/Ada Compiler, Version 2.2 

Alliant VFX/4 

Concentrix, Release 5.0 

Alliant VFX/4 

Concentrix, Release 5.0 

Alliant FX/Ada Compiler, Version 2.2 
Alliant VFX/82 
Concentrix, Release 5.0 
Alliant VFX/82 
Concentrix, Release 5.0 

Implementor's Declaration 


I, the undersigned, representing Alliant Computer Systems Corporation, have 
implemented no deliberate extensions to the Ada Language Standard 
ANSI/MIL-STD-1815A in the compiler(s) listed in this declaration. I 
declare that Alliant Computer Systems Corporation is the owner of record of 
the Ada language compiler(s) listed above and, as such, is responsible for 
maintaining said compiler(s) in conformance to ANSI/MIL-STD-1815A. All 
certificates and registrations for Ada language compiler(s) listed in this 
declaration shall be made only in the owner’s corporate name. 



Alliant Computer Systems jCorporation 
Andrew F. Halford, Director of Software 



Owner’s Declaration 

I, the undersigned, representing Alliant Computer Systems Corporation, take 
full responsibility for implementation and maintenance of the Ada 
compiler(s) listed above, and agree to the public disclosure of the final 
Validation Summary Report. I declare that all of the Ada language 
compilers listed, and their host/target performance, are in compliance with 
the Ada Language Standard ANSI/MIL-STD-1815A. 


Alliant Computer Systems Corporation 


Date: 


Andrew F. Halford, Director of Software 






APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the Alliant FX/Ada Compiler, Version 2.2, as described 
in this Appendix, are provided by Alliant Computer Systems Corporation. 
Unless specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. Implementation-specific 
portions of the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 

range -1.79769313486235E+308 .. 1.79769313486235E+308; 
type SHORT_FLOAT is digits 6 range -3.40283E+38 .. 3.40283E+38; 

type DURATION is delta 1.0E-03 range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-l 







APPENDIX F. Implementation-Dependent Cnaracterist-.c s 

1. i32i£IE£Diaii2D“Q£Ef GdSDl El£aiE££ 

1.1. IbiLltjE.Q^LX Eiasisa 

The INLINE.ONLY pragma/ when used in the same way as pragma 
INLINE# indicates to the compiler that the subprogram must 
alttdXS be inlined. This pragma also suppresses the 
generation of a callable version of the routine which saves 
code space. 

1.2. SUILI-It) EiaaiEa 

The BUILT_IN pragma is used in the implementation of some 
predefined Ada packages# but provides no user access. It is 
used only to implement code bodies for which no actual Aca 
oooy car be oroviaec# for example the v A C H I N E _ C 0 C E : 5 . 

1-2- BESQUECc Eiaatna 

The RESOURCE pragma specifies the resource class of the task 
(or tasks of a task type) or the resource class of the main 
program. It is used to force a task to execute on a 
particular resource class when multiple processors are used 
to execute an Aaa program. This pragma takes a static 
expression of the type RESOURCE.T VC, E declared in package 
SYSTEM. This pragma is only allowed with ; n the 
specification of a task unit or immediately within t ne 
outermost declarative Dart of a main program. 

I.&. SE£SE_££2L Sraflosa 

The SHARE.CODE pragma takes the name of a generic 
instantiation or a generic unit as the first argument ana 
one of the identifiers TRUE or FALSE as the second argument. 
This pragma is only allowed immediately at tne place of a 
declarative item in a Declarative part or packaoe 
specification# or after a library unit in a compilation# Out 
before any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. when the ' i rs t 
argument is the name of a generic instantiation t n e ~ r ~ a 
applies only to the specifies instantiation, or over; o a j •> o 
instantiations. 


B-2 








If tne second argument is TRUE the compiler will try tc 
share coce generatea tor a generic instantiation with cooe 
generated for other instantiations of tne same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. Tne extent to 
which cooe is shared oetween instantiations depends on this 
pragma and the kina of generic formal parameters declared 
for the generic unit. 

The name pragma SHAR£_B0DY is also recognized by the 
implementation and has the same effect as SHARE_CODE. It is 
included for compatabi l ity with earlier versions of FX/Ada. 

1-5- Eraaaa 

The EXTERNAL_NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify an 
external name that may be used to reference the entity from 
other languages. The pragma is allowed at the place of a 
declarative item in a package specification and must apply 
to an object declared earlier in the same package 
specification. 

I • £ • 1^1225EragZlS 

The INTERFACE_NAME pragma takes the name of a a variable 
defined in another language and allows it to be referenced 
directly in Ada. The pragma will replace all occurrences of 
the variable name with an external reference to the seconds 
link_argument. The pragma is allowed at the place of a 
declarative item in a package specification and must apply 
to an object declared earlier in the same package 
specification. The object must be declared as a scalar or 
an access type. The object 13 DC£1 be any of the following: 
a looo variable/ 
a constant/ 

an initialized variable/ 
an array/ or 
a record. 

The INT£RFACE_NAME pragma is also used to provide an 
external link name to a subprogram which has been aefinec 
using the INTERFACE pragma. 

1-Z- 13PLiai-£QQE Eiaama 

Takes one of the identifiers ON or OFF as tne single 
argument. This pragma is only allowed within a nacnine coce 
procedure. It specifies that implicit cooe generated by the 
compiler oe allowed o r disallowed. A warning is issued if 
Z~ z is used and any implicit cooe r e“d s to o e 5 e ne r a r e o . 
T - e default is ~ . 


B-3 








- - p::\TR£M 

7 n i s orao»a taxes one argjment which can be the name cf 
either a l i o r a r y succrocra^r or a subprogram ceclarec 
immeciately mtmn a library package spec or b o c y . It 
incicates to the compiler that the subprogram will not be 
calleo recursively allowing the compiler to pertorm specific 
optimizations. The pragma can be applied to a subprogram or 
a set of overloaded subprogram within a package spec or 
oackage body. 

i-2. NCI.ELAESBAIED 

This pragma can only appear in a library package 
specification. It indicates that the package will not be 
elaboratea because it is either part of the RTS# a 
configuration package or an Aca package that is referenced 
from a language other than Ada. The presence of this pragma 
suppresses the generation of elapnration code and issues 
warnings if elaboration code is required. 

2. Icci£iE£DlfliiQa fli Bisflsiiofid Erases 


Tnis pragma is recognizea by the implementation but has no 
effect. 


2.2. EUSQRAIS 

This pragma is implemented as described in Appendix 5 of the 
Aca RM. 


2 . 2 . INLINE 

This pragma is implemented as describee in Appencix 8 of the 
Ada RM. 


2. k. LUIl 3E££t 


This pragma supports calls to ’C'# Pascal# and FORTRAN 
functions. The Ada subprograms can oe either functions or 
procedures. The types of parameters and the result type for 
functions must be scalar# access or the predefined type 
ADDRESS in SYSTEM. All parameters must have mode IN. Record 
and array objects can be passes by reference using the 
ADDRESS attrioute. 

2-2. LI 51 

This pragma is i'.alfient*: as cesc r ibec i n Acne^ci x 5 o * ; *■ e 


B-A 











$ 


SEiCBI-SIZE 


This pragma is recognizee by the implementation. T *- e 
implementation aoes not allow S Y S T E M to be m o d i f '■ e z o> rr^a^s 
of pragmas/ the SYSTEM package *ust oe recompiled. 

2-Z. CEI1MIZE 

This pragma is recognized by the implementation but has no 
effect. 


2-3. EAEK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2-2- EASE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.IQ. EBI2E1IY 

This pragma is implemented as descrioed in Appendix 5 ot the 
Ada RM. 

2.11. SUABEQ 

This pragma is recognized by the implementation but has no 
effect. 

2-12. SIQBA5E_2NII 

This pragma is recognizee by the implementation. T 1 e 

implementation does not allow SYSTEM to be modified oy sea's 
of pragmas/ the SYSTEM package must be recompiled. 

2-12. SUEEBESS 

This pragma is implemented as described/ except that 

RANGE.CHECK and DI VISI0N_CHECK cannot be supressed. 

2.14. SlSIEE-BfiyE 

This pragma is recognized by the implementation. The 

implementation does not allow SYSTEM to be modified oy means 
of pragmas/ the SYSTEM package must be recompiled. 

2* I-£lfc2£aiali2a-3£Q£D2E2l AilriSyiSS 


B-5 






7 i p « p r f 

«. • * • _ _ 


For a orefi» that denotes an object# a program unit# a 
label# or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram# 
package# task unit# or label# it refers to the address of 
the machine code associated with the corresponding tody or 
statement. For an entry for which an address clause has 
been given# it refers to the corresponding hardware 
interrupt. The attribute is of the type OPERAND defined in 
the package MACH INE_C0DE. The attribute is only allowed 
within a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package# task unit# or entry# the *REF attribute is 
not supported.) 


4. wEficilisaiicQ Cl Package SYSIEiJ 


package SYSTEM 
i s 

type NAME is < fx.unix >; 

SYSTEM_NAME : constant NAME := fx.unix) 

STORAGE_UNIT : constant := 81 


MEMCRY.SIZE 

• 

• 

constant := 

16.777.216; 

-- System-Depenaent 

Named 

Number s 


MIN_I NT 


constant := 

-2.147.4S3.646 

MAX.INT 


constant := 

2.1^7.483.647 ; 

max.digits 


constant := 

is; 

MAX.MANTISSA 


constant := 

31 ; 

fine.delta 


constant := 

2.0**(-31) ; 

TICK 


constant := 

o.oi; 

— Other System-dependent 

Dec l arations 



subtyp^ PRIORITY is INTEGER range 0 .. 9 9; 

MIN_PRIORITY : constant priority := priority 

MAX_PRIGRITY : constant priority := priority 

type RESO’JRCE.TYPf is (any.resource# 

cetacrieo_ce_resource» 

compLex_resource# 

ip.resource); 


first! 

last. 


B-6 






unavailacle_resource : exception; 

MAX_REC_SIZE : integer := 64*1024; 
type ADDRESS is private '• 

NO_ADDR : constant ADDRESS; 

function PHYSI CAL.ADDRESS<1: INTEGER) return ADDRESS; 

function ADDR_GT(A/ B: ADDRESS) return BOOLEAN; 

function ADDR_LT(A* S: ADDRESS) return BOOLEAN; 

function ADDR_GE(A/ B: ADDRESS) return BOOLEAN; 

function ADDR_LE(A/ B: ADDRESS) return BOOLEAN; 

function ADDR_DIFF(A/ 6: ADDRESS) return INTEGER; 

function INCR_ADDR(A: ADDRESS; INCR: INTEGER) return ADDRESS; 

function DECR.ADDRCA: ADDRESS; DECR: INTEGER) return ADDRESS; 

function ">" (A# B: ADDRESS? return BOOLEAN renair.es ADDR_GT; 

function ”<" (A/ 8: ADDRESS) return BOOLEAN renames ADDR_LT; 

function ">="(A/ 3: ADDRESS) return BOOLEAN renames ADDR_GE; 

function "<=“(A* B: ADDRESS) return BOOLEAN renames ADDP.LE; 

function (A/ 6: ADDRESS) return INTEGER renames ADDF_DIFF 

function ” ♦'* (A: ADDRESS; 

I N C R : INTEGER) return ADDRESS renames I :• C - _ - D ? ~ 
function "-"(A: ADDRESS; 

DECR: INTEGER) return ADDRESS renames DcCR_ADDR 

pragma inline(ADDR.GT) ; 
pragma inline(ADDR_LT) ; 
pragma inLine(ADDR_GE ) ; 
pragma inline(ADDR_LE ) ; 
pragma inline(ADDR_CIFF); 
pragma inline(INCR_AD DR); 
pragma inline(DECR_ADDR); 
pragma inline( 3 HYSICAL_A DDRESS)J 

private 

type ADDRESS is new integer; 

NO_ADDR : constant ADDRESS := 0; 
end SYSTEM; 


2. RfiSilltliSDS Qo E£2r£S£Dl£li£2 £i£US££ 

2.1. EI3222 E3££ 

In the arsence o* pragma ? A C < record components a r 3 o a t.; «■ o 
sc as to provide for efficient access c y tne target 
narcware. Pragma P A C '< applied to a record eliminates tee 
padcing where possiole. Pragma PACK has no ofer effect cn 

B-7 









the storage allocated for recorc components/ so a '-ecc r c 
representation is required to make record components 
smaller. Bit packing is not Supportea for components larger 
than STORAGE.UNIT. Components smaller than STORAGE,L"'JIT will 
be bit packed within a storage unit. Objects and larger 
components are packed to the nearest whole STORAGE,UN IT. 

5.2. Lficsit ileuses 

For scalar types/ a length clause which is a size 
specification will compress storage to the number of bits 
required to represent the range of the subtype. For fixed/ 
float/ and access types/ this is 32. 

A size specification applied to a composite type with 
components of composite types will not cause compression of 
component storage. To allocate the minimal number of bits 
for records of composite types/ an explicit recora 
representation clause must be given with length clauses for 
each component. An error will be issued if there is 
insufficient space allocated. Component clauses neea not be 
aligned on STCRAGE.UNIT boundaries. A component of a recorc 
representation clause may not specify fewer pits for d 
component type than would be usee for values of the t y r>». 

Size specifications <T'SIZE) are not supported for task 
types. Specifications of storage for a task activation 
(T•STORAGE'SIZE) is supported. The minimum storage size for 
task activations is 5120/ but can be larger depenoing on the 
size of data objects declared in the task. 

The size specification T ’ S M A L L is not supported except when 
the representation specification is the same as the value 
•SMALL for the base tyoe. 

Specification of collection size is supported. 

£l5US£5 

Address clauses are supported for uninitialized variables 
and constants. They are not supported by the compiler for 
subprograms/ packages/ and task units. 

5-4. l2i£i.i ucis 

Interrupt entries are supported for UNIX signals. The Ada 
for clause gives the UNIX signal number. The follo.inc is 
the meaning associated with the valid UNIX signals: 

1 S I G H U F h a 0 g u c 

2 51GI v T interrupt 


B-8 




7 

SIGGUI T 

Quit 


4 

SIGILL 

illegal instruction (not reset when 

caught) 

c 

j 

sigtrap 

trace trap (not reset when caught) 


6 

SIGIOT 

I0T instruction 


7 

SIGEMT 

£MT instruction 


8 

SIGFPE 

floating point exception 


9 

SIGfULl 

kill (cannot be caught or ignored) 


10 

SIGBUS 

bus error 


11 

SIGSEGV 

segmentation violation 


12 

SIGSYS 

bad argument to system call 


13 

SIGPIPE 

write on a pipe with no one to read 

i t 

14 

SIGAIRM 

alarm clock 


15 

SIGTERM 

software termination signal from kill 

16 

SIGURG 

urgent condition on 10 channel 


17 

SIGSTOP 

sendable stop signal not from tty 


18 

SIGTSTP 

stop signal from tty 


19 

SIGCONT 

continue a stopped process 


20 

SIGCHLD 

to parent on child stop or exit 


21 

sigttin 

to readers pgrp upon background tty 

read 

22 

sigttou 

like TTIN for output if (t p-> t _ l 0 c a l 5L.T0ST0P ) 

23 

SIGIO 

input/output possible signal 


24 

SIGXCPU 

exceeded CPU time limit 


25 

SIGXFSZ 

exceeded file size limit 


26 

S I 3 V T A L R 1 

virtual time alarm 


27 

SIGPROF 

profiling time alarm 


28 

SIGWINCH 

window changed 



5*5. S£C££S£Didii2D Alicifiyifis 

The ADDRESS attribute is not supporteo for packages srj task 
entries. The compiler issues a warning message ani t^e 
value which is type SYSTEM.ADDRESS is SYSTEM.N0_ADDR. 


5*6. aaitiafi £232 lDS2iiiQDS 

Machine code insertions are supported. 

The general definition of the package MACHINE.CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement/ an enumeration type of all the opcode mneumonics/ 
a set of register definitions/ and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as 
follows: 

C 7. 0 E _ n ' ( 022222' 2 C 5 2 ^ n j G / 2 C 2 Iz 2 D> )#' 

.here n indicates the n u m c e r of operands in the aggregate. 


B-9 







numpe r 


A special case arises * o r a variable 
The cserancs are l i s tec witMn a suoacgre 
is as follows: 


of ooerancs. 
ate. T^e format 


C 0 DE_N * ( 2 ££ 2 ££' l 2 ££IflD£J -# £ 2 £I£DZ>> > *' 

For those oococes that reauire no operands# named notation 
must De used (cf. RM 4.3(A)). 

CODE_0’( op => 2Q2Q2£ )I 

The 2C£Cfl£ must be an enumeration literal (i.e. it cannet be 
an object# attribute# or a rename). 

An 2E£I£Q£l can only be an entity defined in MACHINE.CODE or 
the ’REF attribute. 


The arguments to any of the functions defined in 
MACHINE_COD£ must be static expressions# string literals# or 
the functions defined in MACHINE_C0DE. The ’REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 


fi. £ca*£QliflOS Ifil lJDCl£!D£CIJli£D-fl£D£I£i£d tsSfflfiS 
There are no implementation-generated names. 


2- lni£IBI£lailQD ci E£Q£fiS£iQO£ ID £i£uS£5 

Address clauses are supported for constants ana variacles. 

£• BfiSlrj.2lj.20S 20 UD20£2&£2 £20y£rsj.2D5 

None. 

2* E£Sili£iiflD£ 20 UD2l)££i<.£d D£ali2£Sii.2DS 
None . 


IQ- IlDi£2£2t3li£n LisilS 


The following limits are actually 
implementation. It is not intended to 
j r tc or even near tnese limits are 
P’-ogram. 


enforced 
imply that 
av ai laole 


by the 
resources 
; 3 e v e - y 


B -10 





1Q.1. Lies L£ 2 SI h 

The implementation supports a maximum line Length of SCO 
characters including the end of line character. 

1Q.2. EsiQii and Anna* Sizes 

The maximum sire of a statically sized array type is 
4*000*000 x STORAGE.UNITS. The maximum size of a statically 
sized record type is 4/000*000 x STORAGE.UNITS. A recora 
type or array type declaration that exceeds these limits 
will generate a warning message. 

IQ.3. Delauil Siatls Size ici lasLs 

In the absence of an explicit STORAGE.SIZE length 
specification every task except the main program is 
allocated a fixed size stack of 10*240 STORAGE.UNITS. This 
is the value returned by T*STORAGE.SIZE for a task type T. 
The minimum stack size for tasks is 5120. 

1Q.6. Delayil inileeiinn Size 

In the absence of an explicit ST0RAGE.SIZE length att'ibute 
the aefault collection size for an access type is 100 times 
the size of the designated type. This is the value returnee 
by T•STORAGE.SIZE for an access type T. 

lfi.S. Limii so Qeeianed Qbieeia 

There is an absolute limit of 6*000*000 x STORAGE.UNITS for 
oojects declared statically within a ccmoilation unit. If 
this value is exceeded the compiler will terminate the 
compilation of the unit with a FATAL error message. 


B— 11 





APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..498 => 'A', 499 => '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498 => 'A', 499 => '2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 => 'A', 250 => '3', 
251..499 => 'A') 


C-l 





TEST PARAMETERS 


Name and Meaning _ 

SBIGID4 

An identifier the size of the 
maximum input line length vhich 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal vhich when 
catenated with $BIG_STRING2 
yields the image of $BIG_ID1. 

$BIG_STRING2 

A string literal vhich when 
catenated to the end of 
$BIG_STRING1 yields the image of 
$BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEK_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..249 => 'A', 250 => '4' , 
251..499 => 'A') 


(1..496 *> 'O', 497..499 •=> '’298") 


(1..493 «> 'O', 494..499 -> "69.0E1") 


(1 => 2..200 «> 'A', 201 «> '"') 


(1 => , 2..300 => 'A', 

301 => '1', 302 => '"') 


(1..479 => ' ') 

2 _ 1 47_483_64 7 

16_ 777 _ 216 

8 


C-2 




TEST PARAMETERS 


Name and Meaning _ 

$DEFAULT_SYS NAME 

The ~ value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_D0C 

A real literal vhose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal vhose value is 
TEXT_IO.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT_FLOAT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal vhose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external - file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER'FIRST. 


Value _ 

FX_UNIX 

0.0000000004656612873077392578125 

2_14 7 _483_647 

N0_SUCH_FIXED_TYPE 

N0_SUCH_TYPE 

100_000.0 

10_000_000.0 

99 

/illegal/file_name/2{JSZ2102C.DAT 
/illegal/file_name/CE2102C*.DAT 

-2147483648 


C-3 




TEST PARAMETERS 


Name and Meaning 


Value 


$INTEGER_LAST 2147483647 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 2_147_483_648 

A universal integer literal 

whose value is INTEGER'LAST + 1. 


$ LESS_THAN_DURATION -100_000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASE_FIRST -10_000_000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$LOV_PRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 


S MANT IS S A_DOC 31 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 


$MAX_INT 2147483647 

A universal integer literal 

whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2 147 483_648 

A universal integer literal 

whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:", 3. 

A universal ~ integer based 497..499 => "11: 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be $MAX IN_LEN 
long. 


C-4 


.496 «=> 'O', 
") 





TEST PARAMETERS 


Name and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
vhose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be $MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
vhose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal vhose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG^JASED_INT 

A based integer literal vhose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEV_MEM_SIZE 

An integer literal vhose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(I..3 => "16:", 4..495 => '0' , 
496.-499 => "F.E:") 

(1 => , 2..498 => 'A', 499 

-2147483648 

32 

TINY_INTEGER 

FX_UNIX 

16#FFFFFFFD# 

16 777 216 


C-5 





TEST PARAMETERS 


Nama and Meaning _ 

$NEV_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE_UNIT 

$NEV_SYS NAME 

A value of the type SiSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


C- 


Value 

8 


FX UNIX 


32 


0.01 




APPENDIX D 


WITHDRAW TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 




WITHDRAWN TESTS 


tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 7a, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE^SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 


o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERR0R is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 




WITHDRAWN TESTS 


e- 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_0F LINE and 

END_OF_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 




APPENDIX E 


COMPILER OPTIONS AS SUPPLIED BY ALLIANT 


Compiler: Alliant FX/Ada Compiler 

ACVC Version: 1.10 


E-l 




ada options 


-a fiie name . a 

” (archive) Treats lile_name. a as an archive file rather than ar. Ada source file. 

-d (dependencies) Analyzes the source files for dependencies oniv. No syntax analysis occurs 

and no object files are produced. Used by a.mane to establish dependencies among new files. 

-e (error) Writes error lines and diagnosucs to standard output. Only one of -e or -£ should be 

used. 

-E [/ife I directory I 

(error) Writes error lines and diagnostics to standard output and writes the raw error messages 
to the specified file. The name of the file defaults to aaa_scurct err; if a directory name ts 
specified, the output is placed in aaa ^source .err in that "directory. Ontv one of the -e or -£ 
opuon should be used. 

-el (error listing) Writes a full listing with interspersed diagnostics to standard output, if any er¬ 

rors occur. Only one of -el or -El option should be used. 

-El [filt\directory] 

(error listing) Writes a full listing with interspersed diagnostics to standard output and writes 
the raw error messages to the specified file, if any errors occur. The name of the file defaults 
to aaa source.err: if a directory name is specified, the output is placed in aaa_source .err in 
that directory. Only one of the -e or -E option should be used. ~ 

-«v (error vi) Embeds the raw error messages in the source file and calls vi on the source file. 

-lx (link) Includes the library tibx.a from /lib, /usr/Bb. or /usr/local/llb. This option is a link 

option and must not precede the name of a file that references the library. See the Concentrix 
Id command. 

-M unit _name 

"(main) Produces an executable program using the named program unit as the main program. 
The main program must be either a parameterless procedure or a parameterless function re¬ 
turning an integer. 

-M ada_source .a 

"(main) Like -M unit_name. except that the unit name is assumed to be the root name of the 
source file that follows. 

-o executable Jilt 

(output) Names the output executable file; by default, the output executable file is namcc 
a.out. The -M option must also be specified. 

-O(n) (optimize) Optimizes the output code. An optional digit limits the number of optimization 
passes: 9 specifies maximum optimization. The default number of optimization passes ts 1. 

-pg Produces a program that (at program execution time) monitors the calling of routines and 

writes a gmon.out file. The Concentrix command grpof -A processes this file. 

-R library 

(recompile instantiation) Forces an analysis of all generic instantiations, caustng retnstanna- 
tion of any that are out of date. 

-S (suppress) Applies the suppress pragma to the entire compilation. 

-sh (show) Shows the pathname of the tool actually called. 

-T (timing) Prints timing information for the compilation. 

-u (update) Updates the library ada.lib even if syntax errors are present. 

-v (verbose) Prints the compiler version number, the date and time of compilation, and summary 

information concerning the compilation. 

-w (warnings) Suppresses warning messages. 





