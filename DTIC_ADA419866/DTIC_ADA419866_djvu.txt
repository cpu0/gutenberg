
Monolithic Compiler Experiments 
Using C++ Expression Templates* 

Lenore R. Mullin** 

Edward Rutledge 
Robert Bond 

HPEC 2002 
25 September, 2002 
Lexington, MA 


* This work is sponsored by the Department of Defense, under Air Force Contract F19628-00-C-0002. Opinions, interpretations, 
conclusions, and recommendations are those of the authors and are not necessarily endorsed by the Department of Defense. 

MIT Lincoln Laboratory 

** Dr. Mullin participated in this work while on sabbatical leave from the Dept, of Computer Science, University of Albany, 
999999-1 state University of New York, Albany, NY. 

XYZ 10/3/02 










Report Documentation Page 

Form Approved 

0MB No. 0704-0188 

Public reporting burden for the collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and 
maintaining the data needed, and completing and reviewing the collection of information. Send comments regarding this burden estimate or any other aspect of this collection of information, 
including suggestions for reducing this burden, to Washington Headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington 

VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to a penalty for failing to comply with a collection of information if it 
does not display a currently valid 0MB control number. 

1. REPORT DATE 

25 SEP 2002 

2. REPORT TYPE 

N/A 

3. DATES COVERED 

4. TITLE AND SUBTITLE 

Monolithic Compiler Experiments Using C++ Expression Templates* 

5a. CONTRACT NUMBER 

5b. GRANT NUMBER 

5c. PROGRAM ELEMENT NUMBER 

6. AUTHOR(S) 

5d. PROJECT NUMBER 

5e. TASK NUMBER 

5f. WORK UNIT NUMBER 

7. PEREORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

MIT Lincoln Laboratory 

8. PEREORMING ORGANIZATION 

REPORT NUMBER 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

10. SPONSOR/MONITOR’S ACRONYM(S) 

11. SPONSOR/MONITOR’S REPORT 
NUMBER(S) 

12. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release, distribution unlimited 

13. SUPPLEMENTARY NOTES 

The original document contains color images. 

14. ABSTRACT 

15. SUBJECT TERMS 

16. SECURITY CLASSIEICATION OE: 

17. LIMITATION OE 
ABSTRACT 

uu 

18. NUMBER 
OE PAGES 

29 

19a. NAME OE 
RESPONSIBLE PERSON 

a. REPORT 

unclassified 

b. ABSTRACT 

unclassified 

c. THIS PAGE 

unclassified 


Standard Form 298 (Rev. 8-98) 

Prescribed by ANSI Std Z39-18 





Outline 



* Overview 

- Motivation 

- The Psi Calculus 

- Expression Templates 

* Implementing the Psi Calculus with Expression Templates 

* Experiments 

* Future Work and Conclusions 


020723-er-2 
KAM 10/3/02 


MIT Lincoln Laboratory 










Memory Hierarchy 



Motivation: The Mapping Problem 


intricate math 

intricate 
memory 
accesses 
(indexing) 



020723-er-3 
KAM 10/3/02 


Approach 


Mathematics of Arrays 

• Math and indexing operations in same 
expression 

• Framework for design space search 

- Rigorous and provably correct 

- Extensible to complex architectures 


Exampie: “raising” array 
dimensionality 


x: < 0 1 2 ... 35 > 



^{< 0 1 2 >)^ 
[< 3 4 5 >J 

f< 6 7 8 >l 

^(< 9 10 11 

rc 

< 12 13 14 > 

|< 15 16 17 >J 


f< 18 19 20 >1 
^|< 21 22 23 >)^ 



MIT Lincoln Laboratory 















































Basic Idea 


Y 


Z 



7 



Benefits 

• Theory based 

• High level API 

• Efficient 


Implementation 


Theory 



Combining Expression Templates and Psi Calculus yields 
an optimal implementation of array operations 


020723-er-4 
KAM 10/3/02 


MIT Lincoln Laboratory 

































Psi Calculus^ Key Concepts 




MIT Lincoln Laboratory 

020723-er-5 

KAM10/3/02 1 L. M. R. Mullin. A Mathematics of Arrays. PhD thesis, Syracuse University, December 1988. 


















Some Psi Calculus Operations 



Operations 

Arguments 

Definition 

take 

Vector A, int N 

Forms a Vector of the first N elements of A 

drop 

Vector A, int N 

Forms a Vector of the iast (A.size-N) elements of A 

rotate 

Vector A, int N 

Forms a Vector of the last N elements of A 
concatenated to the other elements of A 

cat 

Vector A, Vectors 

Forms a Vector that is the concatenation of A and B 

unaryOmega 

Operation Op, dimension D, 
Array A 

Applies unary operator Op to D-dimensional 
components of A (like a for ali loop) 

binaryOmega 

Operation Op, 

Dimension Adim. 

Array A, Dimension Bdim, 
Array B 

Applies binary operator Op to Adim-dimensional 
components of A and Bdim-dimensionai components 
of B (iike a for ail loop) 

reshape 

Vector A, Vectors 

Reshapes B into an array having A.size dimensions, 
where the iength in each dimension is given by the 
corresponding element of A 

iota 

intN 

Forms a vector of size N, containing vaiues 0 .. N-1 


I I = index permutation 


I I = operators 


I I = restructuring 


I I = index generation 


MIT Lincoln Laboratory 


020723-er-6 
KAM 10/3/02 





















Convolution: Psi Calculus 
Decomposition 


Y 



Definition 

of 

y=conv(h,x) 

M-1 

y[n]= 

^=0 

k] where x has N elements, h has M elements, 0 n<N+M-1, and 
x’ is X padded by M-1 zeros on either end 


Algorithm step 

Psi Calculus 

Algorithm 

Initial step 

x=<1234> h=<567> 

x=<1234> h=<567> 

and 

Psi Calculus 
Decomposition 

Form x’ 

x’=cat(reshape(<k-1>, <0>), cat(x, reshape(<k-1>,<0>)))= 

x’=<001 ...400> 


rotate x’ 
(N+M-l) times 

x’ pQt=binaryOmega(rotate,0,iota(N+M-1), 1 x’) 

<001 2...> 

X’ rot= < 0 1 2 3 ... > 

< 1 2 3 4 ... > 

• 

• 


take the “interesting” 
partofxVot 

x’ fj„3|=binaryOmega(take,0,reshape(<N+M-1 >,<M>),1 ,x’,.Qt) 

< 0 0 1 > 

■ < 0 1 2 > 
final < 1 2 3 > 

• 

• 

• 


multiply 

Prod=binaryOmega (*,1, h,1,x’ 

<0 0 7 > 

Prod= ® ® ^ 

< 5 12 21 > 

• 

• 

• 


sum 

Y=unaryOmega (sum, 1, Prod) 

Y= < 7 20 38 . . . > 


Psi Calculus reduces this to DNF with minimum memory accesses 


020723-er-7 
KAM 10/3/02 


MIT Lincoln Laboratory 




























Typical C++ Operator Overloading 


Y 


Z 



7 


A 


Example: A=B+C vector add 


Main 


1. Pass B and C 
references to 
operator + 


Operator + 


2. Create temporary 
result vector 

3. Calculate results, 
store in temporary 

4. Return copy of 
temporary 


5. Pass results reference 

to operator= 

_ 


Operator = 


6. Perform assignment 



2 temporary vectors created 


Additional Memory Use 


• Static memory 

• Dynamic memory 
(also affects 
execution time) 


020723-er-8 
KAM 10/3/02 


Additionai Execution Time 


• Cache misses/ 
page faults 

• Time to create a 
new vector 

• Time to create a 
copy of a vector 

• Time to destruct 
both temporaries 

MIT Lincoln Laboratory “ 























































C++ Expression Templates and PETE 


Parse Tree _ Expression Type 


Expression 



BinaryNode<OpAdd, Reference<Vector>, 

A=B+C 

Expression 

Templates 

Reference<Vector > > 


Main 


1. Pass B and C 
references to 
operator + 
_ 


Parse trees, not vectors, created 


Operator + 


2. Create expression 
parse tree 

3. Return expression 
parse tree 


4. Pass expression tree 
reference to operator 



Operator = 







o. oaicuiaie resuii ana 
perform assignment 

B+C 





Reduced Memory Use 



PETE, the Portable Expression Template Engine, is available from the 
Advanced Computing Laboratory at Los Alamos National Laboratory 


• Parse tree only 
contains references 


Reduced Execution Time 

• Better cache use 

• Loop fusion styie 
optimization 

• Compile-time 
expression tree 
manipulation 



• PETE provides: 

- Expression template capability 

- Facilities to heip navigate and evaluating parse trees 


PETE: http://www.acl.lanl.gov/pete 


020723-er-9 
KAM 10/3/02 


MIT Lincoln Laboratory 


















































Outline 



* Overview 

- Motivation 

- The Psi Calculus 

- Expression Templates 

* Implementing the Psi Calculus with Expression Templates 

* Experiments 

* Future Work and Conclusions 


020723-er-10 
KAM 10/3/02 


MIT Lincoln Laboratory 










Implementing Psi Calculus with 
Expression Tempiates 



Example: 

A=take(4,drop(3,rev(B))) 

B=<1 2 345 67 89 10> 
A=<7 6 5 4> 



020723-er-11 
KAM 10/3/02 


MIT Lincoln Laboratory 












Implementing Psi Calculus with 
Expression Tempiates 




020723-er-12 
KAM 10/3/02 


MIT Lincoln Laboratory 




















Implementing Psi Calculus with 
Expression Tempiates 




020723-er-13 
KAM 10/3/02 


MIT Lincoln Laboratory 




















Implementing Psi Calculus with 
Expression Tempiates 




020723-er-14 
KAM 10/3/02 


MIT Lincoln Laboratory 




















Implementing Psi Calculus with 
Expression Tempiates 




020723-er-15 
KAM 10/3/02 


MIT Lincoln Laboratory 




















Implementing Psi Calculus with 
Expression Tempiates 





020723-er-16 
KAM 10/3/02 


MIT Lincoln Laboratory 


Reduction 

























Implementing Psi Calculus with 
Expression Tempiates 





020723-er-17 
KAM 10/3/02 


MIT Lincoln Laboratory 


Reduction 

























Implementing Psi Calculus with 
Expression Tempiates 





020723-er-18 
KAM 10/3/02 


MIT Lincoln Laboratory 


Reduction 



























dl 


Implementing Psi Calculus with 
Expression Templates 


Example: 

1. Form expression tree 


Recall: 

A=take(4,drop(3,rev(B))) 



Psi Reduction for 1 -d arrays 
aiways yields one or more 

B=<1 2 345 67 89 10> 


expressions of the form: 

A=<7 6 5 4> 

3 


x[/]=y[stride*/+ offset] 




/ /<u 




/ 




\ 


\ 


S 

c 

o 

N 

w 


2. Add size information 

size=4 (^akej 


■ ,( 
size=7' 

drop j 

3 ^ 

size=1oO^\^ 


size=10 




3. Apply Psi Reduction rules 


size=4 


A[/]=B[-i+6] 


size=7 

size=10 

size=10 


A[/] =B[-(/+3)+9] 
=B[-i+6] 

A[/] =B[-/+B.size-1] 
=B[-/+9] 

AIil=B[il 


/ 






c 

o 

3 

"O 

o 


020723-er-19 
KAM 10/3/02 


MIT Lincoln Laboratory 



































Implementing Psi Calculus with 
Expression Tempiates 




dl 


Example: 

1. Form expression tree 


Recall: 

A=take(4,drop(3,rev(B))) 



Psi Reduction for 1 -d arrays 
aiways yields one or more 

B=<1 2 345 67 89 10> 


expressions of the form: 

A=<7 6 5 4> 

3 


x[/]=y[stride*/+ offset] 




/ /<u 




/ 




\ 


\ 


S 

c 

o 

N 

w 


2. Add size information 

size=4 (^akej 


■ ,( 
size=7' 

drop j 

3 ^ 

size=1oO^\^ 


size=10 



4. Rewrite as sub-expressions with iterators at the 
ieaves, and loop bounds information at the root 




3. Apply Psi Reduction rules 


size=4 


A[/]=B[-i+6] 


size=7 

size=10 

size=10 


A[/] =B[-(/+3)+9] 
=B[-i+6] 

A[/] =B[-/+B.size-1] 
=B[-/+9] 

A[i]=B[i] 



c 

o 

3 

"O 

o 



• Iterators used for efficiency, rather than 
recalculating indices for each i 

• One “for” loop to evaluate each 
sub-expression 


020723-er-20 
KAM 10/3/02 


MIT Lincoln Laboratory 












































Outline 










020723-er-21 
KAM 10/3/02 


Overview 

- Motivation 

- The PSI Calculus 

- Expression Templates 

Implementing the Psi Calculus with Expression Templates 
Experiments 

Future Work and Conclusions 


MIT Lincoln Laboratory 










Experiments 


Y 


Z 



7 


Results 

• Loop implementation achieves 
good performance, but is 
probiem specific and iow ievei 

• Traditionai C++ operator 
impiementation is generai and 
high ievei, but performs pooriy 
when composing many 
operations 

• PETE/Psi array operators 
perform aimost as weii as the 
ioop impiementation, compose 
weii, are generai, and are high 
ievei 


Execution Time Normaiized to Loop Implementation 

40 

30 

20 

10 

0 




Test ability to compose operations 


020723-er-22 
KAM 10/3/02 


MIT Lincoln Laboratory 
































Experimental Platform and Method 



Hardware 

• DY4 CHAMP-AV Board 

- Contains 4 MPC7400’s and 1 MPC 8420 

• MPC7400 (G4) 

- 450 MHz 

- 32 KB L1 data cache 

- 2 MB L2 cache 

- 64 MB memory/processor 



Software 

• VxWorks 5.2 

- Real-time OS 

* GCC 2.95.4 (non-official release) 

- GCC 2.95.3 with patches for 
VxWorks 

- Optimization flags: 

-03 -funroll-loops -fstrict-aliasing 


Method 

* Run many iterations, report 
average, minimum, maximum time 

- From 10,000,000 iterations for 
small data sizes, to 1000 for large 
data sizes 

* All approaches run on same data 

* Only average times shown here 

* Only one G4 processor used 


• Use of the VxWorks OS resulted in very low variability in timing 

• High degree of confidence in results 


020723-er-23 
KAM 10/3/02 


MIT Lincoln Laboratory 

































throughput (elements/sec) 


Experiment 1: 
A=rev(B) 


Y 


Z 



7 




• PETE/Psi implementation performs nearly as well as hand coded loop, 
and much better than regular C++ implementation 

• Some overhead associated with expression tree manipulation 


MIT Lincoln Laboratory 


020723-er-24 
KAM 10/3/02 


































throughput (elements/sec) 


Experiment 2: 

a=rev(take(N,drop(M,rev(b))) 


Y 


Z 



7 




vector size (log 2) 


• Larger gap between regular C++ performance and performance of other 
implementations regular C++ operators do not compose efficiently 

• Larger overhead associated with expression-tree manipuiation due to 
more compiex expression 


020723-er-25 
KAM 10/3/02 


MIT Lincoln Laboratory 


































throughput (elements/sec) 


Experiment 3: 
a=cat(b+c, d+e) 


Y 


Z 



7 




vector size (log 2) 


• Still larger overhead associated with tree manipulation due to cat() 

• Overhead can be mitigated by “setup” step prior to assignment 


020723-er-26 
KAM 10/3/02 


MIT Lincoln Laboratory 


































Outline 



• Overview 

- Motivation 

- The PSI Calculus 

- Expression Templates 

* Implementing the PSI Calculus with Expression Templates 

* Experiments 

• Future Work and Conclusions 


020723-er-27 
KAM 10/3/02 


MIT Lincoln Laboratory 










Future Work 



• Multiple Dimensions: Extend this work to N-dimensional arrays 
(N is any non-negative integer) 

• Parallelism: Explore dimension lifting to exploit multiple 
processors 

• Memory Hierarchy: Explore dimension lifting to exploit levels of 
memory 

• Mechanize Index Decomposition: Currently a time consuming 
process done by hand 

• Program Block Optimizations: PETE-style optimizations 
across statements to eliminate unnecessary temporaries 


020723-er-28 
KAM 10/3/02 


MIT Lincoln Laboratory 










Conclusions 



* Psi calculus provides rules to reduce array expressions to 
the minimum of number of reads and writes 

* Expression templates provide the ability to perform 
compiier preprocessor-styie optimizations (expression tree 
manipuiation) 

* Combining Psi caicuius with expression templates results 
in array operators that 

- Compose efficiently 

- Are high performance 

- Are high levei 

* The C++ template mechanism can be applied to a wide 
variety of probiems (e.g. tree traversai aia PETE, graph 
traversal, list traversal) to gain run-time speedup at the 
expense of compile time/space 


020723-er-29 
KAM 10/3/02 


MIT Lincoln Laboratory 










