
_ UNCLASSIFIED _ j 

SKU®:’^ Cl»SS 1 f 1 CJ>’TOn O' ■'"IS PAG! iw*r<~ Dm [ntrrrrf 


REPORT DOCUMENTATION PAGE 





1. REP0AT NUMBER 


|2. 60 VI ACCESSION AO. |3 RECIPIENT S CATALOG NU«bl A 


4. TITLE (tna iubtittf I Ji. TTPE 01 REPORT l PERIOD COVERED 

Ada Compiler Validation Summary Report rTeleSoft, 1 02 June 1989 to 02 June 1990 
Ada386 Version 3.23, VAX 8350 (Host) to Intel 386-120 1 

(Target), 89060211.10136 


6. PERFORMING "DAG . REPORT NUMBER 


7. AUTHORS 
I ABC* 

Ottobrunn, Federal Republic of Germany. 


t. PERFORMING ORGANIZATION AN0 ADDRESS 


IA3G, 

Ottobrunn, Federal Republic of Germany. 


11 . CONTROLLING OFFICE name AND ADDRESS 


Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 


14. MON 1 TORINO AGENCT NAME 6 ADDRESSED Bifitrtnx from Controlling Ort/Cfl 

IABG, 

Ottobrunn, Federal Republic of Germany. 


16 . DISTRIBUTION statement (ofxhuKtDorx) 

Approved for public release; distribution unlimited. 


t. CONTRACT OR grant NUMBERED 


10 . PROGRAM Element, project. Iasi 
ARE* | * 0RA UNIT NUMBERS 


12. REPORT DATE 


ib. secu^itt class lotthurtponj 
UNCLASSIFIED 


15*. gtClJSSlMCATION/OOMNGRASlNG 

N/A 


17. DISTRIBUTION STATEMENT (of tht tbr.rsct tnttrta *n B'oxk 2C It Bifitrtnx from Rtpon) 

UNCLASSIFIED 


DTIC 




19 . IE Y*0*DS (Continue on ffpffjf vde >f ntttusry snd identify by 6 /ckA number) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVP, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20 . ABSTBAC T (Continue on revert* tide if n?c*it*ry *nd id*nx<f > by bi oc* numo^rj 

TeleSof t, Ada386, Version 3.23, Ottobrunn, West Germany, VAX 8350 under VMS, Version 5.0 
- 2 (Host) to Intel 386-120 (80386/387) board (bare machine)(Target), ACVC 1.10. 


1 JAM 71 


1473 EDITION OF 1 NOv 65 IS OBSOLETE 
S/N 0102-IF-014-6601 




£)6S> '■ 


UNCLASSIFIED _ 

• lit CLASS! T1CAT ION OF THIS PAGl (*vs»h D,u f nfpretf! 
























M 




shXyf- 

Ada Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 


AVF Control Number: 


AVF-IABG-035 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: *39060211.10136 
TeleScft 

Ada386 Version 3.23 

VAX 3350 Host and Intel 336-120 Target 


Completion of On-Site Testing: 
2 June 1989 


Prepared By: 
IABG mbH, Abt SZT 
Einsteinstr 20 
D3012 Ottobrunn 
Vest Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION . 1 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT. 2 

1.3 REFERENCES.3 

1.4 DEFINITION OF TERMS . 3 

1.5 ACVC TEST CLASSES.4 

CHAPTER 2 CONFIGURATION INFORMATION . 7 

2.1 CONFIGURATION TESTED . .'.7 

2.2 IMPLEMENTATION CHARACTERISTICS . 8 

CHAPTER 3 TEST INFORMATION.13 

3.1 TEST RESULTS.13 

3.2 SUMMARY OF TEST RESULTS BY CLASS.13 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.14 

3.4 WITHDRAWN TESTS.14 

3.5 INAPPLICABLE TESTS . 14 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . l n 

3.7 ADDITIONAL TESTING INFORMATION 

'.".1 Prevalidation.13 

3.7.2 Test Method.18 

3.7.3 Test Site.19 


APPENDIX A DECLARATION OF CON. - OR’ ‘ MCE 


APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX D COMPILER AND LINKER OPTIONS 



Aoos99lon For 
~MXIS OF .4* I 

dti c tab 
Unannounced 
Justl T lostion_ 


By___ 

JU5trIbiit ;oa/ 

__AvrtuAbility Codes 
jAv.-iti and/or 
)lst Y^eclal 

\>l I 


□ c 






















INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


This Validation Summary Report - (VS-Rd describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1315A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability » (ACV'3) •• - An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link tim-, and during execution. 












INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by IABG mbH, Abt S2T according to 
procedures established by the Ada Join*. Program Oftice and administered Ly 
the Ada Validation Organization (AVO). On-site testing was completed 
2 June 1989 at IABG mbH, Ottobrunn / TeleLOGIC AB, Sweden. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


IABG mbH, Abt SZT 
Einsteinstr 20 
D8012 Ottobrunn 





INTRODUCTION 


Questions regarding this report or the validation rest results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 

1.3 REFERENCES 


1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1315A, February 1983 and ISO 3652-1937. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implerrenters' Guide, ScfTech, 
Inc., December 1936 . 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 3652-1937. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 

Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 





INTRODUCTION 


A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

The computer on which the compiler resides. 

An ACVC test that uses features of the language that a 
compiler is not required to support or may legitimately 
support in a way other than the one expected by the test. 

An ACVC test for which a compiler generates the expected 
result. 

The computer which executes the code generated by the 
compiler. 

A program that checks a compiler's conformity regarding a 
particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 


Compiler 

Failed test 

Host 

Inapplicable 

test 

Passed test 

Target 

Test 

Withdrawn 

test 







INTRODUCTION 


Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is se!f-checking 
and produces a PASSED, FAILED, or MOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checkincr and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests durincr compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by i or for an it 1 '-'vable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the mam program must generate an error message before any 
declarations in the main program or any units referenced by the mam 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 











INTRODUCTION 


ire examined to verify that the units are operating correctly. If these 
units are net operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
tests. However, some tests contain values that require the test to be 
customized according to implementat ion-specific values — for example. an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given m Appendix D. 








CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tes-ed under 
following configuration: 

Compiler : Ad?.3S6 Version ? - 23 

ACVC Version: 1.10 
Certificate Number: #39060211.10136 
Host Computer: 

Machine: VAX 8350 

Operating System: VMS version 5,0-2 

Memory Size: 12 MB 

Target Computer: 

Machine: Intel 386-120 board with 

Intel 30386 CPU and 

Intel 30337 floating point process 

Operating System: bare machine 

Memory Size: 2 MB 


Communications Network: 


RS 232 interface 








CONFIGURATION INFORMATION 


1.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 

1) The compiler correctly processes a compilation containing R'z3 
variables in the same declarative part. (See test D29O02K.) 

2) The compiler correctly processes tests containing loop state¬ 
ments nested to 65 levels. (See tests D55A03A..H (8 tests).) 

3) The compiler correctly processes tests containing block state¬ 
ments nested to 6^ levels. (See test D56O01B.) 

4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 
17 levels. (See tests D64005E..G (3 tests).) 

b. Predefined types. 

1) This implementation supports the additional predefined types 
LONG_INTEGER and L0NG_FL0AT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

1) None of the default initialization expressions for record 
components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 








CONFIGURATION INFORMATION 


4) CONSTRAINT_ERROR is raised for predefined integer comparison 

tests, NUMERIC_ERROR is raised for largest integer 

comparison and membership tests, and no exception is raised 
for predefined integer membership tests when an integer 
literal operand in a comparison or membership test is outside 
the range of the base type. (See test C45232A.) 

5) NUMERIC_ERROR is raised when a literal operand in a fixed- 
point comparison or membership test is outside the range of 
the base type. (See test C45252A.) 

6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt t.- determine the method of rounding, the test results 
indicate the following: 

1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).; 

2) The method used for rounding to longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 

real expressions is round away from zero. (See test 

C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array .laving a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

1) Declaration of an array type or subtype declaration with more 

than SYSTEM.MAX_INT components raises NUKERIC_ERROR when 

a two dimensional array subtype is declared where the large 
bound is the first one, and no exception for one dimensional 
array type and subtype declarations, two dimenesional array 
type declarations and two dimensional array subtype 

declaration where the large bound is the second one. (See 
test C36003A.) 

2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to 3n array 
type with INTEGER'LAST + 2 components. (See test C36202A.) 











CONFIGURATION INFORMATION 


3) NUMERIC_ERROR is raised when an array type with SYSTEM- 
.MAX_INT + 2 components is declared.! (See test C36202B.) 

4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. {See test C52103X.) 

5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER’LAST. 
(See test C52104Y.) 

6) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised ■-•hen checking whether the expression's subtype is 
compatible with the target’s subtype. (See test C52013A.) 


8) A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ESROR 
either when declared or assigned. Alternatively, an implemen¬ 
tation may accept the declaration. However, lengths must match 
in array slice assignments. This implementation raises no 
exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target’s subtype. (See test C52013A.) 


g. Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that (all choices are evaluated before 
checking against the index type. index subtype checks are 
made as choices are evaluated. ! the order in which choices 
are evaluated and index subtype checks are made depends upon 
the aggregate itself.! (See tests C43207A and C43207B.) 


IQ 









CONFIGURATION INFORMATION 


2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

3) CONSTRAINT_ERROR is raised (before ! after! all choices are 

evaluated when a bound in a non-nul) range of a non-null 
aggregate does not belong tc an index subtype. (See test 

E43211B.) 


Pragmas. 

1) The pragma INLINE is supported for procedures, but not for 
functions. (See tests LA3004A..B (2 tests), EA3004C..D (2 

tests), and CA3004E..F (2 tests).) 


Generics. 

This implementation creates a dependance between a generic body 
and those units which instantiate it. As allowed by AI-408/11, if 
the body is compiled after a unit that instantiates it, then that 
unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 


3) 

Generic 

library subprogram specifications and 

bodies can 

be 


compiled 

CA1012A. 

in separate compilations. 

) 

(See 

test 

4) 

Generic 

non-library package bodies as 

subunits 

can 


be compiled in separate compilations. (See test CA2009C.) 


5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 


6) 

Generic 

unit bodies and 

their subunits can 

be 


compiled 

in separate compilations 

(See test CA3011A.) 


7) 

Generic 

package declarations and bodies can 

be 


compiled in separate compilations. (See tests CA2009C, 
EC3204C, and BC3205D.) 









CONFIGURATION INFORMATION 


3) Generic library package specifications and bodies can 
be complied in separate compilations. (See tests 
BC3204C and BC3205D.) 

9) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


Input and output. 

1) The package SEQUENTIAL_IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101C, EE2201D, 

and EE2201E.) 

2) The package DIRECT_IO cannot be 

unconstrained array types 

discriminants without defaults, 
and EE2401G.) 

3) The director, AJPO, has determined (AI-00332) that every call 
to OPEN and CREATE must raise USE_ERROR or NAME_ERROR if 
permanent file input/output is not supported. This implemen¬ 
tation exhibits this behavior for SEQUENTIAL_IO, DIRECT_IO, 
and TEXT_IO. 

This implementation supports two legal filenames, ''console" 
and "keyboard" which correspond to standard input and standard 
output respectively (See Appendix F of the Ada Standard in 
Appendix B of this report). 


instantiated with 
or record types with 
(See tests AE21Q1H, EE2401D, 



TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 cf the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 514 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation and 242 executable tests that 
use file operations not supported by the implementation. 
Modifications to the code, processing, or grading for 14 tests were 
required to successfully demonstrate the test objective. (See section 
3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 

1826 

17 

15 

45 

3159 

Inapplicable 

2 

9 

489 

0 

13 

1 

514 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS 3Y CHAPTER 


RESULT CHAPTER TOTAL 

2 3 4 5 6 7 8 9 10 11 12 13 14 


Passed 

198 

573 

544 

245 

172 

99 

160 

332 

132 

36 

250 

341 

77 

3159 

M/A 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

23 

244 

514 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

243 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 

WITHDRAWN 

TESTS 





The 

following 

44 tests were 

withdrawn 

from ACVC 

Version 1.10 


at 

the time of 

this validation: 





E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 


CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 


CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 


CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 


CD2A84N 

CD2A84M 

CD5011O 

CD2B15C 

CD7205C 

CD2D11B 


CD5007B 

ED7004B 

ED7O05C 

ED7005D 

ED7006C 

ED70O6D 


CD7105A 

CD7203B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 


CE3301A 

CE3411B 






See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 514 tests were inapplicable for 
the reasons indicated: 

a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 








TEST INFORMATION 


C35708L..Y (14 tests) C35302L..Z '15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

b. C35508I, C35508J, C35508M, and C35503N are not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE => 0, 

TRUE => 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_INTEGER: 

C45231B C45304B C45502B C455033 C455G4B 

C45504E 0456113 C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. Tests C45531M..P and C45532M..P are not applicable because they 
require the value of SYSTEM.MAX_MANTISSA to be greater than 32. 

f. C86001F is not applicable because, for this implementation, the 
package TEXT_IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and hence 
package REPORT, obsolete. 

g. B86001X, C45231D and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SH0RT_FL0AT. 

j. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable 
because this implementation creates a dependance between a generic 
body and those units that instantiate it (See Section 2.2. i and 
Appendix F of the Ada Standard) 

k. LA3004B, EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for functions. 










TEST INFORMATION 


l. CD1009C, CD2A41A..3 (2 tests), CD2A41E and CD2A42A..J (10 tests) 

are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

m. CD2A*II..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

n. 'TD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 

because of restrictions on 'SIZE length clauses for access types. 

o. AE21Q1C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

p. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

g. The following 238 tests are inapplicable because sequential, text, 
and direct access files are not supported: 


CE2102A..C 
CE2102K 
CE2103C..D 
CE2105A..B 
CE2107A..H 
CE21Q8A..B 
CE2109A..C 
CE2111A..I 
CE2201A..C 
CE2204A..D 
CE2208B 
CE2401E..F 
CE2404A..B 
CE2406A 
CS2408A..B 
CE2410A..B 
CE3102A..B 
CE3102F..H 
CE3103A 
CE3107B 
CE3109A 
CE3111A..B 
CE3112A..D 
CE3115A 
CE3208A 
CE3302A 
CE3402A 
CE3402C..D 


(3 

r ests^ 

(2 

tests) 

(2 

tests) 

(8 

tests) 

(2 

tests) 

(3 

tests) 

(9 

tests) 

(3 

tests) 

(4 

tests) 

(2 

tests) 

(2 

tests) 

(2 

tests) 

(2 

tests) 

(2 

tests) 

(3 

tests) 


(2 tests) 
(4 tests) 


(2 tests) 


CE2102G..H 
CE2102N..Y 
CE2104A..D 
CE2106A..B 
CE21Q7L 
CE2108C. . H 
CE2110A..D 
CE2115A..B 
CE2201F..N 
CE2205A 
CE2401A..C 
CE2401H..L 
CE2405B 
CE2407A..B 
CZ2409A..B 
CE2411A 
EE3102C 
CE3102J..K 
CE3104A..C 
CE3108A..B 
CE3110A 
CE3111D..E 
CE3114A..B 
EE3203A 
EE3301B 
CE3305A 
EE3402B 
CE3403A. .C 


(2 tests) 
(12 tests) 


(4 

tests) 

(2 

tests) 

(6 

tests) 

(4 

tests) 

(2 

tests) 

(9 

tests) 

(3 

tests) 

(5 

tests) 

(2 

tests) 

(2 

tests) 

(2 

tests) 

O 

f ests) 

(2 

tests) 

(2 

tests) 

(2 

tests) 


(3 tests) 


1 








TEST INFORMATION 


CE3403E..F 

(2 

tests) 

CE3404B..D 

(3 

tests) 

CE3405A 



EE3405B 



CE3405C..D 

(2 

tests) 

CE3406A..D 

(4 

tests) 

CE3407A..C 

(3 

tests) 

CE3403A..C 

(3 

tests) 

CE3409A 



CE3409C..E 

(3 

tests) 

EE3409F 



CE3410A 



CE3410C..E 

(3 

tests) 

EE3410F 



CE3411A. .B 

(2 

tests) 

CE3412A 



EE3412C 



CE3413A 



CE3413C 



CE3602A..D 

(4 

tests) 

CE3603A 



CE3604A..B 

(2 

tests) 

CE3605A..E 

(5 

tests) 

CE3606A..B 

(2 

tests) 

CE3704A..F 

(6 

tests) 

CE3704M..0 

(3 

tests) 

CE3706D 



CS3706F..G 

(2 

tests) 

CE3804A..P 

(16 

> tests) 

CE3805A..B 

(2 

tests) 

CE3806A..B 

(2 

tests) 

CE3806D..E 

(2 

tests) 

CE3806G..H 

(2 

tests) 

CE3905A. .C 

(3 

tests) 

CE3905L 



CE3906A..C 

(3 

tests) 

CE3906E. -F 

(2 

tests) 





3.6 T*ST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was net anticipated by the test (such as raising 
one exception instead of another) . 

Modifications were required for 14 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E B71001K B71001Q B71001W BA3006A BA3006B 

BA3007B BA3008A BA3008B BA3013A (6 and 7M) 

Tests C34005G, C34005J and C34Q06D returned the result FAILED because of 
false assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T’SIZE due to the above assumptions (T is the aray type). 

Test CE3901A was modified to replace the call of the function 
REPORT.LEGAL_FILENAME with the string literal "console". Upon execution, 
the test returned the result PASSED. 






TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 

3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the Ada386 Version 3.23 compiler was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 

3.7.2 Test Method 

Testing of the Ada386 Version 3.23 compiler using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 

Host computer: VAX 8350 

H"«t op-ting system: VMS version 5.0-2 

Target computer: Intel 336-120 board with 

Intel 80386 CPU and 
Intel 30387 floating point processor 
Target operating system: bare machine 

Compiler: Ada336 Version 3.23 

The host and target computers were linked via RS 232 interface. 

A magnetic tape containing all tests except for withdrawn tests and 
tests requiring unsupported floating-point precisions was taken on-site by 
the validation team for processing. Tests that make use of 
implementation-specific values ware customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded to disk, the full set of tests was 
compiled and linked on the VAX 3350 at IABG n.bH, Ottobrunn. All executable 
test images were then written on magnetic tape and transferred to a second 
VAX at TeleLOGIC AB, Sweden, where they were downloaded and executed on the 
target computer. Results were printed from the host computers. 

The compiler was tasted using command scripts provided by TeleLOGIC AB and 
reviewed by the validation team. The compiler was tested using the 
compiler call 

ADA336/CONPILE/MON/PROC/LI3FILE='BIN_NAME’/VIRT=3000/BIND='TESTNA.ME’- 
/‘OPTIONS' 'TESTFILE' 







TEST INFORMATION 


and linked with the command 

ADA3S6/LINK/LI3FILE='BINJNAME'/OPT='PHANT_OPT'- 
/LOAD_MODULE=[]’TESTNAME' 'MAINNAME' 

B tests were compiled with the /LIST option. See Appendix E for an 
explanation of compiler and linker options. 

Tests were compiled, linked, and executed (as appropriate) using 
two host computers and a single target computer. Test output, compilation 
listings, and job logs were captured on magnetic tape and 
archived at the AVF. The listings examined on-site by the validation team 
were also archived. 


3.7.3 Test Site 

Testing was conducted at IA3G mbH, Ottobrunn / TeleLOC-IC A3, Sweden and was 
completed on 2 June 1989. 


1 O 








DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TaleSofL and INTEL have submitted the following Declarat 
Conformance concerning the Ada 3 Bo Version 3.2 3 cc-piler. 


ions 


DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG. West Germany 

Ada Compiler Validation Capability (ACV'C) Version: 1.10 


Base Compiler Name: 
Version: 

Host Architecture ISA: 
OS L VER *: 


Base Configuration 

Ada386 

3.23 

VAX 8630 
VMS 5.0 


Target Architecture ISA: 
OS <k VER *: 


Intel 80386 on Intel 386-120 Board 
with Intel 80387 coprocessor 
Bare Machine 


Licensee's Declaration 


I. the undersigned, representing INTEL CORPORATION, assume shared responsibility 
for implementation and maintenance of the Ada compiler listed above, and agree to the 
public disclosure of the final Validation Summary Report. I declare that the Ada 
language compiler listed, and its host/target performance, is in compliance with the Ada 
Language Standard ANSI/MIL-STD-1815A. 


All certificates and registrations for the Ada language compiler listed in this Declaration 
shaj,l b« made in the nam^jof INTEL CORPORATION. 


Date: 






INTEL CORPORATION 



Chris Hughes 

General Manager, Development Tools Operation 







DEdARATICN OF OONPCRMftNCE 


Compiler Implementor: TELESOFT 
Ada Valdation Facility: IABG, West-Germany 
ACVC Version: 1.10 

Base Compiler Name: Ada386 
Version: 3.23 

Host Architecture ISA: VAX 8350 
OS & version #: VMS 5.0-2 

Target Architecture ISA: Intel 386-120 board with Intel 80386 

and Intel 30387 fpp 
OS & version #: Bare Machine 






I, the undersigned, representing TELESOFT, have implemented 
no deliberate extensions to the Ada Language Standard ANSI/MILr- 
SID 1815A in the compiler listed in this declaration. 

I declare that TELESOFT is the owner and that INTEL 
Corporation is TELESOFT's Licensee of the Ada language compiler 
listed above and as such shares TELESOFT's responsibility for 
maintaining said compiler in conformance to ANSI/MEL-STD 1815A. 
All certificates and registrations for the Ada language compiler 
listed in this declaration shall be made only in the Licensee's 
corporate name. 


20 July, 1989 

Telelogic AB, Ada Products Division 


Stefan Bj 


n, Manager, Systems Software 


I, the undersigned, representing TELESOFT take full respon¬ 
sibility for implementation and maintenance of the Ada compiler 
listed above, and agree to the public disclosure of the final 
Validation Summary Report. I declare that the Ada language 
compiler listed, and its host/target performance is in compliance 
with the Ada Language Standard ANSI/MIL-STD 1815A. 

A Licensee's Declaration from INTEL Corporation will be 
filed separately. 


20 July, 1989 

Telelogic AB, Ada Products Division 









APPENDIX F OF THE Ada STANDARD 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the Ada386 Version 3.23 compiler, as described in this 
Appendix, are provided by TeleSoft. Unless specifically noted otherwise, 
references and page numbers in this appendix are consistent with compiler 
documentation and not with this report. Implementation-specific portions 
of the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147433647; 

type FLOAT is digits 6 range -1.70141E+33 .. 1.7Q141E+38; 
type L0NG_FL0A.T is digits 15 

range -8.98846567431158E+307 .. 8.98846567431158E+307; 

type DURATION is delta 2#1.G#E-14 range -36400 .. 86400; 


end STANDARD; 







Telelogic AB 


I38ft 


attachment b 

APPENDIX F OF THE LANGUAGE REFERENCE MANUAL 


1 Implementation Dependent Pragmas 

2 Implementation Dependent Attributes 

3 Specification of Package SYSTEM 

4 Restrictions on representation clauses 

5 Implementation dependent naming 

6 Interpretation of expressions in address clauses 

7 Restrictions on unchecked conversions 

8 I/O Package characteristics 


June 3, 1983 


P&ge 22 







Telelogic AB 


1380 


ATTACHMENT B 
APPENDIX F 

I. Implementation Dependent Pragmas 

pragma COMMENT( <string_literal>); 

It may only appear within a compilation unit. 

The pragma comment has the effect of embedding the given 
sequence of characters in the object code of the compilation unit. 

pragma LINKNAME(<subprogram_name>, <string_literal>); 

It may appear in any declaration section of a unit. 

This pragma must also appear directly after an interface pragma 
for the same <subprogram_name>. The pragma linkname has the 
effect of making string_literal apparent to the linker. 

pragma INTERRUPT(Function_Mapping); 

It may only appear immediately before a simple accept statement, 
a while loop directly enclosing only a single accept statement, 
or a select statement that includes an interrupt accept alternative. 
The pragma interrupt has the effect that entry calls to the 
associated entry, on behalf of an interrupt, are made with a 
reduced call overhead. 

pragma IMAGES( < enumeration_type >,Deferred) or 
pragma IMAGES(<enumeration_type>,Immediate); 

It may only appear within a compilation unit. 

The pragma images controls the creation and allocation of 
the image table for a specified enumeration type. The 
default is Deferred, which saves space in the literal pool 
by not creating an image table for an enumeration type 
unless the ’Image, ’Value, or ’Width attribute for the type 
is used. If one of these attributes is used, an image table 
is generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in 
more than one compilation unit, more than one image table is 
generated, eliminating the benefits of deferring the table. 

pragma SUPPRESS_ALL; 

It may appear anywhere that a Suppress pragma may appear as 
defined by the Language Reference Manual. The pragma 
Suppress_All has the effect of turning off all checks 
defined in section 11.7 of the Language Reference Manual. 

The scope of applicablility of this pragma is the same as 
that of the pre-defined pragma Suppress. 


June 3, 1989 


Page 23 







Telelogic AB 


1380 


ATTACHMENT B 
APPENDIX F, Cont. 
2. Implementation Dependent Attributes 


’Offset Attribute 

’Offset along with the attribute ’Address, facilitates machine code 
insertions. For a prefix P that denotes a declared parameter 
object, P’Offset yields the statically known portion of the 
address of the first of the storage units allocated to P. The 
value is the object’s offset relative to a base register and is 
of type Long_Integer. 


INTEGER ATTRIBUTES 


’Extended_Image Attribute 


Usage: X’Extended_Image(Item,Width,Base,Based,Space_IF_Positive) 

Returns the image associated with Item as per the Text_Io definition. 
The Text_Io definition states that the value of Item is an integer 
literal with no underlines, no exponent, no leading zeros 
(but a single zero for the zero value) and a minus sign if negative. 

If the resulting sequence of characters to be output has fewer than 
Width characters then leading spaces are first output to make up 
the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 


June 3, 1983 


Page 24 







Telelogic AB 


1380 


ATTACHMENT B 

APPENDIX F, Cont. 

Parameter Descriptions: 

Item -- The user specifies the item that he wants the 

image of and passes it into the function. This 
parameter is required. 

Width — The user may specify the minimum number of 

characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 

Base — The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 

Based — The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 

X’Extended_Image(5) = "5 n 

X’Extended_Image(5,0) = "5" 

X’Extended_Image(5,2) = " 5" 

X’Extended_Image(5,0,2) = "101" 

X’Extended_Image(5,4,2) = " 101" 

X’Extended_Image(5,0,2,True) = "2#101#" 

X’Extended_Image(5,0,10,False) = "5" 

X’Extended_Image(5,0,10.False.True) = " -5" 
X’Extended_Image(-l,0,10,False,False) = "-1" 

X’Extended_Image(-1,0,10, False, True) = "-1" 
X’Extended_Image(-l,1,10,False,True) = "-1" 
X’Extended_Image(-l,0,2,True,True) = "-2#1 #" 
X'Extended_Image(-1,10,2, T rue, T rue) = » -2#l#" 


June 3, 1988 


Page 25 



Telelogic AB 


1386 


ATTACHMENT B 
APPENDIX F, Cont. 


'Extended_Value Attribute 


Usage: X’Extended_Vaiue(Item) 

Returns the value associated with Item as per the Text_Io definition. 
The Text_Io definition states that given a string, it reads an 
integer value from the beginning of the string. The value returned 
corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAlNT_ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 


Then the following would be true: 


X’Extended_V alue( "5 n ) 

= 5 

X’Extended_Value( n 5") 

= 5 

X’Extended_V alue(" 2# 101 #") 

= 5 

X’Extended_V aluej1") 

= -1 

X’Extended_Value(" -1") 

= -1 


June 2, 1989 


Page 28 







Telelogic AB 


1380 


ATTACHMENT B 

APPENDIX F, Cont. 


’Extended_Width Attribute 

Usage: X’Extended_Width(Base,Based,Space_If_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute 
is a function that may have multiple parameters. This attribute 
yields the maximum image length over all values of the type 
or subtype X. 

Parameter Descriptions: 

Base — The user specifies the base for which the width 

will be calculated. If no base is specified 
then the default (10) is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for based is 
specified then the default (false) is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 


Examples: 

Suppose the following subtype was declared: 
Subtype X is Integer Range -10..16; 


Then the following would be true: 


X’Extended_Width 
X’Extended_Width( 10) 
X’Extended_Width(2) 
X’Extended_Width( 10,True) 
X’Extended_Width(2,True) 
X’Extended_Width( 10, F alse,True) 
X’Extended_Width( 10,True,False) 
X’Extended_Width( 10,True,True) 
X’Extended_Width(2,True,True) 
X’Extended_Width( 2,F alse, T rue) 


= 3 - »-10" 

= 3 - "-10" 

= 5 - " 10000 " 

= 7 - "-10#10#" 

= 8 - " 2 # 10000 #” 

= 3 - " 16" 

= 7 - "-10#10#" 

= 7 - " 10# 16#" 
= 9 - " 2# 10000#" 
= 6 ~ " 10000 " 


June I, 1889 


Page 37 




Telelogic AB 


ATTACHMENT B 
APPENDIX F, Cont. 

ENUMERATION ATTRIBUTES 

’Extended_Image Attribute 

Usage: X’Extended_Image(Item,Width,Uppercase) 

Returns the image associated with Item aa per the Text__Io definition. 
The Text_Io definition states that given an enumeration literal, 
it will output the value of the enumeration literal (either an 
identifier or a character literal). The character case parameter 
is ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more that one parameter. The parameter 
Item must be an enumeration value. The image of an enumeration 
value is the corresponding identifier which may have character case 
and return string width specified. 


Parameter Descriptions: 

Item -- The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Width — The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) is assumed. If the Width 
specified is larger than the image of Item, then the 
return string is padded with trailing spaces; if the 
Width specified is smaller than the image of Item then 
the default is assumed and the image of the enumeration 
value is output completely. 

Uppercase — The user may specify whether the returned string is in 
uppercase characters. In the case of an enumeration 
type where the enumeration literals are character 
literals, the Uppercase is ignored and the case 
specified by the type definition is taken. If no 
preference is specified then the default (true) is 
assumed. 


1880 


June 8, 1989 


Page 28 




Telelogic AB 


1386 


ATTACHMENT B 
APPENDIX F, Cont. 


Examples: 

Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Y is (V, ’B\ V, ’D’); 

Then the following would be true: 


X’Extended_Image(red) 

= "RED" 

X’Extended_Image(red, 4) 

= "RED 1 

X’Extended_Image(red,2) 

="RED" 

X’Extended_Image(red,0, false) 

__ « rec iit 

X’Extended_Image(red, 10,false) 

= "red 

Y’Extended_Image(’a’) 

n> a ,n 

Y ’Extended_Image( ’ B ’) 

_. It IQJIt 

Y’Extended_Image(’a’,6) 

_ lt> a > * 

Y’ExtendedJmage(’a’,0,true) 

= l ”a ,B 


’Extended..Value Attribute 
Usage: X’Extended_Value(Item) 

Returns the image associated with Item as per the Text_Io definition. 
The Text_Io definition states that it reads an enumeration value 
from the beginning of the given string and returns the value of 
the enumeration literal that corresponds to the sequence input. 

(LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT_ERROR is raised. 


June 3, 1989 


Page 29 




Telelogic AB 


138# 


ATTACHMENT B 
APPENDIX F, Cont. 


Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of X. 

Examples: 


Suppose the following type was declared: 
Type X is (red, green, blue, purple); 


Then the following would be true: 

X’Extended_Value("red") = red 

X’Extended_Value(" green") = green 

X’Extended_Value(" Purple") = purple 

X’Extended_Value(" GreEn ") = green 


’Extended_Width Attribute 
Usage: X’Extended_Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute 
is a function. This attribute yields the maximum image length over 
all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function 
returns the width of the largest i width) enumeration literal 
in the enumeration type specified by X. 


June 3, 1989 


Page 30 







Telelogic AB 


1388 


ATTACHMENT B 
APPENDIX F, Cont. 


Examples: 

Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Z is (XI, X12, X123, X1234); 

Then the following would be true: 

X’Extended_Width = 6 — " purple” 

Z’Extended_ Width =5 - lt X1234" 


FLOATING POINT ATTRIBUTES 
’Extended_Image Attribute 

Usage: X’Extended_Image(Item,Fore,Aft,Exp,Base,Based) 

Returns the image associated with Item as per the Text_Io definition. 
The Text_Io definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Read value. The resulting string is 
without underlines or trailing spaces. 


June 3, 1388 


Page 81 




Telelogic AB 


1385 


ATTACHMENT B 
APPENDIX F, Cont. 


Parameter Descriptions: 

Item ~ The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore ~ The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-1) is assumed. If based notation is 
specified the trailing is included in aft. 

Exp — The user may specify the l imum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 

Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based -- The user may specify whether he wants the string returned 
to be in based notation or not. If no preierence is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0: 

Then the following would be true: 


June 3, 1089 


Page 32 




Telelogic AB 


1389 


ATTACHMENT B 
APPENDIX F, Cont. 

X’Extended_Image(5.0) = " 5.0000E+00* 

X’Extended_Image(5.0,l) = "5.0000E-l-00 B 

X'Extended_Image(-5.0,l) = B -5.00Q0E-t-00 B 

X’Extended_Image(5.0,2,0) = " 5.0E+00" 

X’Extended_Image(5.0,2,0,0) = " 5.0” 

X’Extended_Image(5.0,2,0,0,2) = B 101.0" 

X’Extended_Image(5.0,2,0,0,2,True) = "2#101.0# n 

X’Extended_Image(5.0,2,2,3,2,True) = B 2#l.l#E-t-02 B 

’Extended_Value Attribute 
Usage: X’Extended_Value(Item) 

Returns the value associated with Item as per the Text_Io definition. 
The Text_Io definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then reads the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT_ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0: 

Then the following would be true: 

X’Extended_Value( B 5.0") = 5.0 

X’Extended_Valuef "0.5E1") = 5.0 

X’Extended_V alue(" 2# 1.01 #E2") = 5.0 


June 3, iv89 


Page 33 




Telelogic A3 


1888 


ATTACHMENT B 
APPENDIX F, Cont. 


’Extended_Digits Attribute 
Usage: X’Extended_Digits(Base) 

Returns the number of digits using base in the mantissa of model 
numbers of the subtype X. 


Parameter Descriptions: 


Base — The user may specify the base that the subtype is 
defined in. If no base is specified then the default 
(10) is assumed. 


Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 
X’Extended_Digits = 5 


FIXED POINT ATTRIBUTES 
’Extended_Image Attribute 

Usage: X’Extended_Image(Item,Fore,Aft,Exp,BaseiBased) 

Returns the image associated with Item as per the Text_Io definition. 
The Text_Io definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined bv the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer Dart. (LRM 14.3.8:13. 
14.3.8:15) 


June 8, 1980 


Page 34 




Telelogic AB 


1380 


ATTACHMENT B 
APPENDIX F, Cont. 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no .Aft is specified then the 
default (X’Digits-1) is assumed. If based notation is 
specified the trailing is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 

Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default, (false) is assumed. 


June 3, 1883 


Page 85 




Telelogic AB 


1386 


ATTACHMENT B 
APPENDIX F, Cont. 


Examples: 

Suppose the following type was declared: 
Type X is delta 0.1 range -10.0 .. 17.0; 


Then the following would be true: 


X’Extended_Image(5.0) 
X’Extended_Image(5.0,l) 
X’Extended _Image(-5.0,1) 
X’Extended_Image(5.0,2,0) 
X’Extended_Image(5.0,2,0,0) 
X’Extended_Image(5.0,2,0,0,2) 
X’Extended_Image( 5.0,2,0,0,2,T rue) 
X’Extended_Image(5.0,2,2,3,2,True) 


= * 5.00E+00" 

= "S.OOE+OO" 

= "-5.00E+00" 

= " 5.0E+00" 

= " 5.0" 

= " 101 . 0 " 

= " 2 # 101 . 0 #" 

= "2#l.l#E+02" 


’Extended_Value Attribute 
Usage: X’Extended_Value(Image) 

Returns the value associated with Item as per the Text_Io definition. 
The Text_Io definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then read the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT_ERROR is raised. 

Parameter Descriptions: 

Image — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 


June 3, 1989 


Page 86 




Telelogic AB 


1885 


ATTACHMENT B 


APPENDIX F, Cent. 

Examples: 

Suppose che following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended^alueCS.O") = 5.0 

X’Extended_Value("0.5El'’) = 5.0 

X’Extended_Value("2#1.01#E2") = 5.0 


’Extended_Fore Attribute 
Usage: X’Extended_Fore(Base,Based) 

Returns the minimum number of characters required for the integer 
part of the based representation of X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based -- The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


June 8, 1989 


Page 87 




Telelogic AB 


1388 


ATTACHMENT B 


APPENDIX F, Cont. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Fore = 3 — "-10" 

X’Extended_Fore(2) = 6 — " 10001" 


’Extended_Aft Attribute 
Usage: X’Extende :_Aft(Base,Based) 

Returns the minimum number of characters required for the fractional 
part of the based representation of X. 


Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Aft =1 — "1" from 0.1 

X’Extended_Aft(2) = 4 - "0001" from 2#0.0001# 


June 3, 1989 


Page 38 




Telelogic AB 


1380 


ATTACHMENT B 

APPENDIX F, Cont. 

3. Specification of Package SYSTEM 

PACKAGE System IS 

TYPE Address is Access Integer; 

TYPE Subprogram_Value is PRIVATE; 

TYPE Name IS (TELEGEN2); 

System_Name : CONSTANT name := TELEGEN2; 

Storage_Unit : CONSTANT := 8; 

Memory_Size : CONSTANT := (2 ** 31) - 1; 

-- System-Dependent Named Numbers: 

Minjnt : CONSTANT := -(2 ** 31); 

Max_Int : CONSTANT := (2 ** 31) - 1; 

Max_Digits : CONSTANT := 15; 

Max_Mantissa : CONSTANT 31; 

Fine_Delta : CONSTANT := 1.0 / (2 ** Max_Mantissa); 
Tick : CONSTANT := 10.0E-3; 


— Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63; 
PRIVATE 

TYPE Subprogram_Value IS 
RECORD 

Proc_addr : Address; 

Static_link : Address; 

END RECORD; 

END System; 


June 3, 1989 


Page 39 




Telelogic AB 


1386 


ATTACHMENT B 

APPENDIX F, Cont. 

4. Restrictions on Representation Clauses 

The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer types ’SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for access types ’STORAGE_SIZE attritube (LRMl3.2(b)) 
Length Clauses: for tasks types ’STORAGE_SIZE attribute (LRM 13.2(c)) 
Length Clauses: for fixed point types 'SMALL attribute (LRMl3.2(d)) 
Enumeration Clauses: for character and enumeration types other than 
boolean (LRM 13.3) 

Record representation Clauses (LRM 13.4) with following constraints: 

- Each component of the record must be 
specified with a component clause. 

- The alignment of the record is restricted to 
mod 4, word (32 bit)aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries, and external subprograms 

(LRM 13.5(a)(c)) 

This compiler does NOT support the following representation clauses: 

Enumeration Clauses: for boolean (LRM 13.3) 

Address Clauses for packages, task units, or non-external Ada 
subprograms (LRM 13.5(b)) 


5. Implementation dependent naming conventions 

There are no implementation-generated names denoting 
implementation dependent components. 


6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted 
as the first storage unit of the object. 


June 3, 1883 


Page 40 




Telelogic AB 


1388 


ATTACHMENT B 

APPENDIX F, Cont. 

7. Re«tricticns on Unchecked Conversions 

Unchecked conversions are allowed between any types or subtypes unless 
the target type is an unconstrained record or array type. 


8. I/O Package Characteristics 

The implementation provides limited support for text_io, direct_io 
and sequential_io. The user can perform operations only on standard 
input and standard output. Any attempt to handle permanent files will 
cause an exception to be raised .The name of the exception is dependent 
on the kind of the operation performed. 

The only attempt to open or create a file must be done with the file 
name "console:" for outfile and "keyboard:" for infile and these 
correspond to standard output and standard input respectively. 

Any attempt to use other file names will cause the exception NAME_ERROR 
to be raised. 

Sequential_IO and Direct_IO cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXT_IO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2_147_483 w 645; 

In TEXT_IO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..1000; 

According to the latest interpretation of the LRM, during a 
TEXT_IO.Get_Line call, if the buffer passed in has been filled, 
the call is completed and any succeeding characters and/or 
terminators {e.g., line, page, or end-of-file) will not be read. 

The first Get_Line call will read the line up to but not 
including the end-of-line mark, and the second Get_Line will read 
and skip the end-of-line mark left by the first read. 


June 3, 1089 


Page 41 





TEST PARAMETERS 


APPENDIX C 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below; 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose -'alue 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 199 * ’A’ & ’1 1 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 199 * ’A' & ’2’ 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 100 * ’A' 4 '3' & 99 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 





TEST PARAMETERS 


3 .nd Meaning ^axue 

$BIG_ID4 100 * & ' 4 ' & * ' A ' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 


SBIG_INT_LIT 

An integer literal of value 293 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 


197 * ’0’ & "298" 


$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 


195 * 'O' 4 "690.0" 


$BIG_STRING1 & 100 * 'A' & 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 "" & 99 * 'A' & ' 1 ' & 

A string literal which when 

catenated to the and of 
BIG_STRING1 yields the image of 

big’idi. 


SBLANKS 13® * 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 


$COUNT_LAST 2_147_433_546 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 2147433647 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 3 

An integer literal whose value 
is SYSTEM.STORAGEJJNIT. 



TEST PARAMETERS 


Mane and Meaning 


$DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM.SYSTEM NAME. 


$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT 10.FIELD’LAST. 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 


SFLOATJIAME 

The name of a predefined 
floating-point type oth.. than 
FLOAT, SH0RT_FL0AT, or 
LONG FLOAT. 


$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 


$GREATER_THAN_DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION'BASE’LAST. 

$HIGH_PRICRITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 


$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 


$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 


Value 
TELEGEN2 

2#1.0#E-31 

1000 

I 

NO_SUCH_TYPE 

NO_SUCH_TYPE 

100 _ 000.0 

131_07 3.0 

63 

BADCHAR * 7% 

/NONAME/DIRECTORY 







TEST PARAMETERS 


Name and Meaning Value 

$INTEGER_FIRST -32763 

A universal integer literal 

whose value is INTEGER’FIRST. 

$INTEGER_LAST 32767 

A universal integer litoral 

whose value is INTEGER'LAST. 

$INTEGER_LAST_?L T JS_1 32768 

A universal integer literal 

whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION -100J000.O 

A universal real liters^ that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -131_07 3.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOW_?riORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_FLUS_1 2_147_483_648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 






TEST PARAMETERS 


Name and Meaning Value 

$MAX_LEN_INT_BASED_LITERAL "2:" & 195 * ’O' & "11:" 

A universal integer based 
literal whose value is 2(111# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 

$MAX_L£N_REAL_3ASED_LITERAL "16:" & 193 * '0' £ "F. E:" 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL "" & 198 * ’A’ & ’ 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT -2147483643 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

SNAME NO_SUCH_TYPE_AVAILABLE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LOMG_FLOAT, or LOMG_INTEGER. 

$NAME_LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 16#FFFFFFFE# 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX_INT. 






TEST PARAMETERS 


Nine and Meaning Value 

3NEV_MEM_SIZE 2147483647 

An integer literal whose value 
is a permitted argument for 
pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
SL'Er AULT_MEM_SIZE. 

$riEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGEJJNIT, other than 
$DEFAULT_STOR JJNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJNIT. 

SNEV_SYS J7AME TELZ0EN2 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS JJAME. If 
there is only one value of that 
type, then use that value 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one ’IN OUT' 
parameter. 

STICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 



WITHDRAWN TESTS 


APPENDIX D 
'WITHDRAWN TESTs 


Sorr.e tests are withdrawn f rom the A CYC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at 
the time of validation testing for the reasons indicated. A reference of 
the form Al-ddddd is to an Ada Commentary. 


a. E23005C This test expects that the string TO? OF PAGE. 

of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 
fellows the pragma, and it is this that must appear at the top 
of the page. 

b. A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. 397102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

d. C97H6A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGING- 
_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. 3C3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units e^en though none of 
the units is illegal with respect tc the units it depends on: by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95) . 

f. CD2A62D This test wrongly requires that an array object's size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137). 







WITHDRAWN TESTS 


b ^ r\ r r >' 
^ J _ r.0 J .1. . U , w. 


CD2A73A..D, SI 


[15 


SStSj 


;es: 


tests wrongly attempt to check "he size of objects of a derives 
type (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problematic by the VG9 ARG. 


h. CD2A31G, CD2A33G, CD2A84M & M, & CD5011O [5 tests] These tests 
assume that dependent tasks will “Terminate while the rain pro¬ 
gram executes a loop that simply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 35. 36 4 96, 36 4 96, and 58, resp.). 


i. CD2B15C 4 CD7205C These tests expect that a 'STCRAGE_SIZE 

length clause provides precise control over the number of 

designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. C72D113 This test gives a SMALL representation clause for a 

derived fixed-point type (at line 30) tha*: defines a set of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD50O73 This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303) . 

l. ED70043, ED7005C & D, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 


n. CD7203B, 4 CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 


o. CD7205D This test checks an invalid test objective: it treats 
the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 







WITHDRAWN TESTS 


p. CE2107I This test requires that objects of two similar scalar 

types be distinguished when read from a file—DATA_ERROR is 
expected to be raised by an attempt to read one object as of 
the ether type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid. (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_LINE 4 

END_OF_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STANDARD_INPUT (lines 103, 
107, 118, 132, 4 136) . 

s. CE34113 This test requires that a text file's column number be 

set to COUNT'LAST in order to check that LAYOUT_ERROR is raised 
by a subsequent PUT operation. But the former operation will 

generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 










COMPILER AND LINKER OPTIONS 


APPENDIX E 

COMPILER AND LINKER OPTIONS 

References and page numbers m this appendix are consistent with 
compiler documentation and not with this report. 






COMPILER 


Command Summary 


COMPILER 


A.l. Compiler Qualifiers 

The compiler options are available as VMS command line qualifiers. The general command 
format of the Ada compiler is: 

$ ADA386 COMPILER<qualifier>}! <fi!e_spec>{,<file spec>} 
where: 

<qualifier> is one of the qualifiers available for the compiler. 

<file_spec> is one in a possible series of file specifications, separated by commas, 
indicating the unit(s) to be compiled. If TNPUT_LIST is used. <file_spec> is interpreted 
as a file containing a list of files to be compiled. The defauit source file extension is 
“.ADA”, and the default list file extension is “‘.LIS.” A file name may be qualified with a 
device and/or directory name in standard VMS format. A file may reside on any directory 
in the system. 

The default qualifier settings should be appropriate for most applications. The following 
table presents an alphabetical list of the qualifiers, their actions, and their defaults. 


999990-001 © 1987 Intel. 


A-2 


UG-1206-V1.1 © 1987 TeleSoft. 



COMPILER 


Command Summary 


COMPILER 


Qualifier Name 

Action 

i Default 

r . ■■ — 

I ABORT_COUNT-<value> 

Specify maximum errors/warnings. 

999 

, ;no|bind 

: =*<mam unii>i 

/BIND runs the Binder on unit 
being compiled or on unit specified. 

/NO BIND 

j,CONTEXT 
i = <value> 

Request <value> context lines around j 1 

each error in error listing. j 

i NO'DEBUG 

I ■ 

, DEBUG enables generation of 
information for the Source Level Debugger. 

NODEBUG 

i 

j INPUT_L 1ST 

| 

Input file contains names of files 
to be compiled, not Ada source. 

File contains , 

Ada .ource. 

! LIBFILE=<file_spec> 

Specify name of library file. 

LIBLST.ALB ; 

" N0ILIST 
= <file speoj 

i 

/LIST creates listing file. Default name 
is <source file name>.LIS. or 
<file spec>.LIS, if specified. 

/NO LIST 

| , NO MACHINE_C0DE 
= <file spec>; 

/MACHINE CuDE requests macro assembly 
listing, which is sent to <comp unit>.ASM 
or to <file spec>, if specified. 

/N'OMACHLNE CODE ■■ 

. NO|MIXED 

/NOMIXED with / LIST causes errors 
to be output following source listing. 

/MIXED, errors and 
source intermixed. j 

i\ NO! monitor 

/MONITOR requests progress messages. 

/NOMONITOR 

j / j NO 1 OBJECT 

/NOOBJECT restricts compilation to 
syntactic and semantic analysis. 

/OBJECT j 

; NOiOFFSET 

/ OFFSET includes hex offsets 
in an assembly listing. 

/ NOOFFSET 

/ N010PTIMIZE 
j — (<option>{,<option>})] 
<qualifier>i 

/OPTIMIZE causes Optimizer to be 
run on unit(s) being compiled. 

/NOOPTIMIZE ; 

i 


: ,'NOIPROCEED 

) ' 

1 

/NOPROCEED causes prompcs to be issued 
after each error. 

, PROCEED ( batch) 
NOPROCEED (interactive! 

! / NO (SQUEEZE 

/SQUEEZE deletes unneeded intermediate 
unit information after compilation. 

I /NOSQUEEZE if/DEBUG i 
or /NOOBJECT; 

SQUEEZE otherwise. j 

NO SUPPRESS 
f ~ < option >{,< opt ion >}) 

/SUPPRESS suppresses selected run-time 
checks and/or source line references 
in generated object code. 

NOSUPPRESS 

' 

TEMP LIB 

=*( <sublib>{,<sublib>}) 

Specify a temporary library 
containing listed sublibraries. 

None. ; 

j 

— . . .i 


UG-13O0-V1.1 (S 1987 TeieSoft. A-3 


990009-001 (?) 1907 Intel. 


























COMPILER 


Command Summary 


COMPILER 


/SUPPRESS Qualifier Options. 


Option 

Action 

ALL 

Suppress source line information and all run-time checks 
listed below. 

i NONE 

Equivalent to , NOSUPPRESS 

SOURCE INFO 

Suppress source line information in the object code. 

ALL CHECKS 

Suppress all access checks, discriminant checks. 


division checks, elaboration checks, index checks, 
length checks, overflow checks, range checks, 
and storage checks. 

ELABORATION CHECK 

Suppress all elaboration checks. 

OVERFLOW CHECK 

Suppress all overflow checks. 

STORAGE CHECK 

Suppress ail storage checks. j 







BINDER 


Command Summary 


BINDER 


A.3. Binder Qualifiers 

The general command format of the bind step is: 

$ ADA386/BIND{ <qualifier> } <main_unit_name> 

where: 

<qualifier> can be none or more Binder qualifiers. 

< main unit name > indicates the name of the unit to be used as the main program. 
The Binder has the following qualifiers: 


Qualifier Name 

Action 

Default 

LIBFILE 

= <file spec> 

■ ■■,. — - - 

Specify name of library file. 

LIBLST.ALB 

NOjMONITOR 

/ MONITOR requests progress messages. 

■NOMONITOR 

/TEMP LIB 

=(<sublib>{,<sublib>}) 

Temporary list of sublibraries. 

None. 

i 

/TRACEBACK 

—<4 levels> 

Set the depth ot exception traceback 
report. 

5 levels. 

_ 1 










LINKER 


Command Summary 


LINKER 


A.4. Linker Qualifiers and Options 

The VMS command line for the Ada Linker is: 

$ AD.A386, LINK{ <qualifier_name>} l<compilation_unit_name>- 

where: 

<qualifier name> is none or more of the command line qualifiers listed in the following 
table: 

Linker Command Line Qualifiers 



NO DEBUG : Output debug information. j /NODEBUG 

i“ EXECUTE_FORM 
| , HEX86 

i_ 

| , LIBFILE 
| =<file_spec>; 

j , LOAD ^MODULE 

i =<fi]e_ 3 p«:>i 

| NO MAP 
=*<fUe_spec>> 

j '/,'NOIEXCLUDED! 

! / NO IMAGE 

; / LINES _PER_P AGE 

J =<value> (>10) 

, NO LOCALS i 
| WIDTH= < 132 80> 

; OBJECT_FORM 
I =< library 

component _name> 
j NO OPTIONS 
= < r»ie_spec>i 
‘ TEMPLIB 
! =(<sublib>{,<subiib> 

If the /EXECUTE FORM or /HEX86 qualifier is used, it must be specified immediately 
after the 'LINK command specification. 


999999-001 (g) 198? Intel. A- 12_UG-1206-V1.1 © 1987 TeleSoft. 


i Choose EF load module format. I EXECLTE_FORM 


I Choose Intel 80386 hexadecimal None. 
I load module format. 


Specify name of library file 


LIBLST.ALB 



j Choose linked OF module output. None. 


Designate options file. 


Temporary list of sublibraries. 


NOOPTIONS 


None. 













LINKER 


Command Summary 


LINKER 


The /OPTIONS command line qualifier is used to specify that additional Linker options are 
to be taken from a file. The available Linker options are summarized in the following table. 
Defaults are in italics. 


Linker Options File Options 


DEFINE 

/<symbo! name> —< value> 
/ADDRESS! 

~ Specify link-time values for symbols. 

i 

i 

EXIT 

— Terminate options list. ! 


| INPUT — Identify object modules to be linked and I 

/MAIN | / SPEC i /'BODY ! /OFMI — specify the search path. 

!/EXPORT _DEFINITIONSI 
;/ PHANTOM ) /WORKINGSUBLIB! 
i/NOSEARCHl clibrary component name> 

LOCATE — Specify addresses for control 

j/CONTROL_SECTION—CODE | DATA I CONSTANT! 

[/COMPONENT _NAME=»< library _component_name> 

{/SPEC- /BODY; ,/OFMlj 
[ / AT — < address >j 
(/IN—<region _name>j 

7 AFTER-<control_section_name | library _component_name>| 

;/ALIGNMENT-< value ~ _~_"_ 

MAP — Control link map generation 

7'NO! IMAGE! 

!/!NOiLOCALSi 
7 : /V0j EXCLUDED! 

/WIDTH-<152! 80>; 

/LINES_PER_PAGE—<value> (50) !<file speo* 


j OUTPUT — Specify complete or incomplete output 

| /COMPLETE i /INCOMPLETE) - and its format. 

7 LOAD MODULE I =»<file spec>j 

I /'OBJECT FORM—|<library component name>!; 


QUIT — Abandon link operation. 


REGION — Define and name memory regions. 

'LOW BOUND-<address> 

/HIGH~BOUND-<address> 

' /UNUSED) <region name>> 




sections. 


I 








