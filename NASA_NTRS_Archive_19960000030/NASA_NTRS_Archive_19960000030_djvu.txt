Introduction to Penelope 

David Guaspari 
Odyssey Research Associates 


N96- 1 0030 


?' 1 


A formal program verification is a (mathematical) proof that a program executed according to its 
intended model meets some specification. This proves that the algorithm defined by the program is 
correct in the precise technical sense of being consistent with a particular specification. A program 
correct in this sense is free from a large and important class of errors, even though its behavior may 
still produce unintended results — either because the implementation of the progr ammin g language 
itself does not match the model of execution, or because the specification does not correctly express 
the user’s intentions. 

Penelope is a prototype system for interactively developing and verifying programs that are written 
in a rich subset of sequential Ada. Penelope can be used to develop a program and its correctness 
proof incrementally, and in concert with one another. Incrementality is used in a number of ways to 
help make verification more tractable and more productive. For example, if an already-verified pro- 
gram is modified, one can attempt to prove the modified version by replaying and modifying the 
original verification. 

Penelope’s specification language, Larch/Ada, belongs to the family of Larch interface languages. 
Larch/Ada scales up properly, in the sense that it is demonstrably sound to decompose a system 
hierarchically and reason locally about the implementation of each piece. 

Penelope has been applied in various demonstration projects — for specification (guidance control, 
distributed operating system), verification (of off-the-shelf code), and formal development (by non- 
expert as well as expert users). Some features of Penelope have been embodied in AdaWise, a lint- 
like non-interactive tool that warns of the potential for certain dynamic semantic errors in Ada pro- 
grams. 


129 




©1995 Ody»»eylte»Mirt A*»ci*i<*. I*c btwdurtion lofVoelo,* M lj J /A ] ©I9950d)f»cy Re*m* Ur Introixtion to Peixlope 

SL-95-002J David Guuptri 3 f M\UM 1 SI. -95 -0023 David Guupari 4 






131 


©1995 Odyney Research AiaociMea, Inc. Introduction to iVndopc ©1995 Odyaaey ReKtlth Associate*, Inc. In Induct ion to Penelope 







32 


Derived predicate transformer semantics can be proven sound for the corre- 
sponding denotational model. 







133 





34 


01993 Odyuey Reaeurh AswxUIm. be. Introduction to Penelope 







135 


OI99SOdyuey Rc«tich AuociaiM. Inc. Introduction lo IVoelope rE?m\ C 1 995 Odywey Rmci 







36 







137 




Session 6: Hardware Systems 

Paul Miner, Chair 

• The Formal Verification Technology Used on AAMP5, by Mandayam Srivas, SRI International 

• Specification and Verification of VHDL Designs, by Damir Jamsek, Odyssey Research Associates 
® Derivational Reasoning System, by Bhaskar Bose, Derivation Systems Inc. 



\ V 


n; 


PRECEDING PAGE BLANK NOT FILMED 



