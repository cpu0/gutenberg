Software 


@ Generic Environment 
for Simulating Launch 
Operations 

GEM-FLO (A Generic Simulation En- 
vironment for Modeling Future Launch 
Operations) is a computer program that 
facilitates creation of discrete-event sim- 
ulation models of ground processes in 
which reusable or expendable launch 
vehicles (RLVs) are prepared for flight. 
GEM-FLO includes a component, devel- 
oped in Visual Basic, that generates a 
graphical user interface (GUI) and a 
component, developed in the Arena 
simulation language, that creates a 
generic discrete-event simulation 
model. Through the GUI, GEM-FLO 
elicits RLV design information from the 
user. The design information can in- 
clude information on flight hardware el- 
ements, resources, and ground 
processes. GEM-FLO translates the 
user’s responses into mathematical vari- 
ables and expressions that populate the 
generic simulation model. The variables 
and expressions can represent process- 
ing times, resource capacities, status 
variables, and other process parameters 
needed to configure a simulation model 
that reflects the ground processing flow 
and requirements of a specific RLV. 
Upon execution of the model, GEM- 
FLO puts out data on many measures of 
performance, including the flight rate, 
turnaround time, and utilization of re- 
sources. This information can serve as 
the basis for determining whether de- 
sign goals can be met, and for compar- 
ing characteristics of competing RLV 
designs. 

This program was written by Martin Steele 
of Kennedy Space Center and Mansooreh 
Mollaghasemi and Ghaith Rabadi of Produc- 
tivity Apex, Inc. For further information, con- 
tact Mansooreh Mollaghasemi at info@pro- 
ductivityapex. com. 

KSC-12488 


& Modular Aero-Propulsion 
System Simulation 

The Modular Aero-Propulsion Sys- 
tem Simulation (MAPSS) is a graphical 
simulation environment designed for 
the development of advanced control 
algorithms and rapid testing of these al- 
gorithms on a generic computational 
model of a turbofan engine and its con- 


trol system. MAPSS is a nonlinear, non- 
real-time simulation comprising a Com- 
ponent Level Model (CLM) module 
and a Controller-and-Actuator Dynam- 
ics (CAD) module. The CLM module 
simulates the dynamics of engine com- 
ponents at a sampling rate of 2,500 Hz. 
The controller submodule of the CAD 
module simulates a digital controller, 
which has a typical update rate of 50 
Hz. The sampling rate for the actuators 
in the CAD module is the same as that 
of the CLM. MAPSS provides a graphi- 
cal user interface that affords easy ac- 
cess to engine-operation, engine- 
health, and control parameters; is used 
to enter such input model parameters 
as power lever angle (PLA) , Mach num- 
ber, and altitude; and can be used to 
change controller and engine parame- 
ters. Output variables are selectable by 
the user. Output data as well as any 
changes to constants and other param- 
eters can be saved and reloaded into 
the GUI later. 

This program was written by Khary I. 
Parker and Ten-Huei Guo of Glenn Re- 
search Center. Further information is con- 
tained in a TSP (see page 1 ). 

Inquiries concerning rights for the commer- 
cial use of this invention should be addressed 
to NASA Glenn Research Center, Innovative 
Partnerships Office, Attn: Steve Fedor, Mail 
Stop 4-8, 21000 Brookpark Road, Cleveland, 
Ohio 44135. Refer to LEW-1 7674-1. 


t* X-Windows Socket Widget 
Class 

The X-Windows Socket Widget Class 
(“Class” is used here in the object-oriented- 
programming sense of the word) was de- 
vised to simplify the task of implementing 
network connections for graphical-user-in- 
terface (GUI) computer programs. UNIX 
Transmission Control Protocol/Internet 
Protocol (TCP/IP) socket programming 
libraries require many method calls to 
configure, operate, and destroy sockets. 
Most XWindows GUI programs use 
widget sets or toolkits to facilitate man- 
agement of complex objects. The widget 
standards facilitate construction of 
toolkits and application programs. The 
X-Windows Socket Widget Class encap- 
sulates UNIX TCP/IP socket-manage- 
ment tasks within the framework of an X 
Windows widget. Using the widget 
framework, X Windows GUI programs 


can treat one or more network socket in- 
stances in the same manner as that of odter 
graphical widgets, making it easier to pro- 
gram sockets. Wrapping ISP socket pro- 
gramming libraries inside a widget frame- 
work enables a programmer to treat a 
network interface as though it were a GUI. 

This program was ivritten by Matthew R. 
Barry of United Space Alliance for Johnson 
Space Center. For further information, con- 
tact the Johnson Innovative Partnerships Of- 
fice at (281) 483-3809. 

MSC-23581 


Infrastructure for Rapid 
Development of Java GUI 
Programs 

The Java Application Shell (JAS) is a 
software framework that accelerates the 
development of Java graphical-user-in- 
terface (GUI) application programs by 
enabling the reuse of common, proven 
GUI elements, as distinguished from 
writing custom code for GUI elements. 
JAS is a software infrastructure upon 
which Java interactive application pro- 
grams and graphical user interfaces 
(GUIs) for those programs can be built 
as sets of plug-ins. JAS provides an appli- 
cation-programming interface that is ex- 
tensible by application-specific plugins 
that describe and encapsulate both spec- 
ifications of a GUI and application-spe- 
cific functionality tied to the specified 
GUI elements. The desired GUI ele- 
ments are specified in Extensible 
Markup Language (XML) descriptions 
instead of in compiled code. JAS reads 
and interprets these descriptions, then 
creates and configures a corresponding 
GUI from a standard set of generic, 
reusable GUI elements. These elements 
are then attached (again, according to 
the XML descriptions) to application- 
specific compiled code and scripts. An 
application program constructed by use 
of JAS as its core can be extended by 
writing new plug-ins and replacing exist- 
ing plug-ins. Thus, [AS solves many 
problems that Java programmers gener- 
ally solve anew for each project, thereby 
reducing development and testing time. 

This softivare was written by Jeremy Jones 
and Carl F. Hostetter of Goddard Space 
Flight Center and Philip Miller and Philip 
Wheeler of CommerceOne. Further informa- 
tion is contained in a TSP (see page 1 ). 
GSC-14769-1 


NASA Tech Briefs. February 2006 


13 


