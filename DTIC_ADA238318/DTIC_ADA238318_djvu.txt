REPORT DOCUMENTATION PAGE 


Form Approved 
OPM No. 0704-01SB 


AD-A238 318 

» » mu mil Mil Util till 111! 


«p*f mponM. including »>• lm» tor miming Inurucllon*. MtrcMng uktlng d«u tourcm gaitwring and maintaining tf» data 
urdan aatimala or any othar aapact ot thia coMctlon ot Hormatlon. including auggaations tor rodudng this burdan. to WaaNngfcn 
•non Divio Highway. Sul* 1201, nilngtoaVA 22202-4302, and to fca Olllca ol htofmatlcn and RoguiMOtyAIWn, CXHc* d 


;t date 


3. REPORT TYPE AND DATES COVERED 

Final: 09 Jan 1991 to 01 Mar 1993 


Tl . tai- niiu OUD | | | Lt 


15. FUNDING NUM8ERS 


Tartan Inc., Tartan Ada VMS/960MC, Version 4.0, VAXstation 3100 (Host) to Intel 
ICE960/25 on an VMS 5.2 (Target), 90121211.11120 


6. AUTHOR(S) 

IABG-AVF 

Ottobrunn, Federal Republic of Germany 


7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

IABG-AVF, Industrieanlagen-Betriebsgeselschaft 
Dept. SZT/ Einsteinstrasse 20 I 

D-8012 Ottobrunn w 

FEDERAL REPUBLIC OF GERMANY 


9 SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESSES) 

Ada Joint Program Office 
United States department of Defense 
Pentagon, Rm oE114 
Washington, D.C. 20301-3081 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT ' 

Approved for public release: distribution unlimited. 


12b. DISTRIBUTION COOE 


13. ABSTRACT (Maximum 200 words) 

Tartan Inc., Tartan Ada VMS/960MC, Version 4.0, Ottobrunn, Germany, VAXstation 3100 (Host) to Intel ICE960/25 on an 
VMS .2 (Target), ACVC 1.11. 


91-03865 


14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 












Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on December 12, 1990. 

Compiler Name and Version: Tartan Ada VMS/960 version 4.0 

Host Computer System: VAXstation 3100 VMS 5.2 

Target Computer System: Intel ICE960/25 on an Intel 

EXV80960MC board 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
90121211.11120 is awarded to Tartan Inc. This certificate expires on 
1 March, 1993. 


This report has been reviewed and is approved. 



IABG, Abt. ITE 


Michael Tonndorf 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 




Ada i^elj/dAtion Organization 
Director,(jeomputer S Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 


Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



Ac*aasl<wi Far 

MIC Tib 

Justification. 


Dlstribution/ 


Availability Code* 


Diet 

Avail and/ar i 

Special 





AVF Control Number: 


= based on TEMPLATE Version 90-08-15 == 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 90121211.11120 
Tartan Inc. 

Tartan Ada VMS/960MC Version 4.0 
VAXstation 3100 => Intel ICE960/25 on an 
VMS 5.2 Intel EXV80960MC board 


IABG-VSR 079 
9 January, 1991 


Prepared By: 
IA3G, ABT. ITE 


DECLARATION OF CONFORMANCE 


Customer: 


Certificate Awardee: 


Tartan, In-.:. 


Tartan, 'nc. 


Ada Validation Facility: 

IAS3 

AC VC Version: 

1.11 


Ada Implementation: 


Ada Compiler Name and Version: 

Tartan Ada VMS/960MC Version 4.0 

Host Compiler System: 

VAXstation 3100 VMS 5.2 

Taraet Computer System: 

Intel ICE960/25 on an Intel EXV80960MC Board 


Declaration: 


[l/we] the undersigned, declare that [l/we] have no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the impleire itation listed above. 


Dale: /Z. 

Customer Signature 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1 2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 












CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according tc, the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified in 
this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation cr to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 








INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90j Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 

1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FA.ILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In seme tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and implementation- 
dependent characteristics. The modifications required for this 

implementation are described in Section 2.3. 







INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see Section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 

Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

• Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 

Conformity Fulfillment by a product, process or service of all 
requirements specified. 


1-3 



INTRODUCTION 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


An individual or corporate entity who enters into an agreement 
with an AVF which specifies the terms and condition j for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformeo 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use cf the Ada programming language. 


1-4 







CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is November 21, 1990. 


E28005C 

B28006C 

C34006D 

C35702A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C9V116A 

C98003B 

BA2011A 

C37001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

AD1B08A 

BD1B02B 

BD1B06A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given'Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 


IMPLEMENTATION DEPENDENCIES 


The following 159 tests have floating-point type declarations requiring more 


digits than SYSTEM. 

,MAX_ 

DIGITS: . 




C241130..Y 

(11 

tests) 

C35705O..Y 

(11 

tests) 

C35706O..Y 

(11 

tests) 

C35707O..Y 

(11 

tests) 

C35708O..Y 

(11 

tests) 

C35802O..Z 

(12 

tests) 

CV ,2410. .Y 

(11 

tests) 

C453210..Y 

(11 

tests) 

C454210..Y 

(11 

tests) 

C455210..Z 

(12 

tests) 

C455240..Z 

(12 

tests) 

C456210..Z 

(12 

tests) 

C456410..Y 

(11 

tests) 

C46012O..Z 

(12 

tests) 

C35713B, C45423B, 

B86001T, and 

C86006H check 

for the predefined type 


SHORT_FLOAT. 

C45531M. .P (4 tests) and C45532M...P (4 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, there is no such type. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain 'SMALL 

representation clauses which are not powers of two or ten. 

C45624A and C45624B are not applicable as MACHINE_OVERFLOWS is TRUE for 
floating-point types. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

CA2009A, CA2009C..D (2 tests), CA2009F and BC3009C instantiate generic units 
before their bodies are compiled; this implementation creates a dependence on 
generic units as allowed by AI-00408 & AI-00506 such that the compilation of 
the generic unit bodies makes the instantiating units obsolete, (see 2.3.) 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A53A checks operations of a fixed-point type for which a length clause 
specifies a powei-of-ten type'small; this implementation does not support 
decimal smalls, (see 2.3.) 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

CD2B15B checks that STORAGE_ERROR is raised when the storage size specified 
for a collection is too small to hold a single value of the designated type; 
this implementation allocates more space than what the length clause 
specified, as allowed by AI-00558. 


The follow! 

ng 264 tests check for 

sequential, 

text, 

and dir* 

ect 

access files 

CE2102A..C 

(3) CS2102G..H (2) 

CE2102K 


CE2102N 

. .Y 

(12) 

CE2103C..D 

(2) CE2104A..D (4) 

CE2105A..B 

(2) 

CE2106A 

. .B 

(2) 

CE2107A..H 

(8) CE2107L 

CE2108A..H 

(8) 

CE2109A 

. .C 

(3) 


2-2 


IMPLEMENTATION DEPENDENCIES 


CE2110A..D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A..B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2203A 


CE2204A..D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A..C 

(3) 

EE2401D 


CE2401E..F 

(2) 

EE2401G 


CE2401H..L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2, 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE3401A 


CE3402A 


EE3402B 


CE3402C..D 

(2) 

CE3403A..C 

(3) 

CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 


EE3412C 


CE3413A..C 

(3) 

CE3414A 


CE3602A..D 

(4) 

CE3603A 


CE3604A. .B 

(2) 

CE3605A..E 

(5) 

CE3606A..B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 

(3) 

CE3705A..E 

(5) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3605A..B 

(2) 

CE3806A..B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3904A..B 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C 

(3) 

CE3906E..F 

(2) 


CE2103A, CE2103B and CE3107A require NAME_ERP.OR to be raised when an attempt 
is made to create a file with an illegal name; this implementation does not 
support external files and so raises USE_ERROR. (see 2.3.) 


2.3 TEST MODIFICATIONS 


Modifications (see Section 1.3) were required for 114 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 


B22003A 

B24007A 

B24009A 

B25002B 

B32201A 

B33204A 

B33205A 

B35701A 

B36171A 

B36201A 

B37101A 

B37102A 

B37201A 

B37202A 

B37203A 

B37302A 

B38003A 

B38003B 

B38008A 

B38008B 

B38009A 

B38009B 

B38103A 

B38103B 

B38103C 

B38103D 

B38103E 

B43202C 

B44002A 

B48002A 

B48002B 

B48002D 

B48002E 

B48002G 

B48003E 

B49003A 

B49005A 

B49006A 

B490063 

B49007A 

B49007B 

B49009A 

B4A010C 

B54A20A 

B54A25A 

B58002A 

B580023 

B59001A 

B59001C 

B5 90011 

B62006C 

B67001A 

B67001B 

B67001C 

B67001D 

B74103E 

B74104A 

B74307B 

B83E01A 

B83E01B 

B85007C 

B85008G 

B85008H 

B91004A 

B91005A 

B95003A 

B95007B 

B95031A 

B95074E 

BC1002A 

BC1109A 

BC1109C 


2-3 



IMPLEMENTATION DEPENDENCIES 


BC1206A 

BC2001E 

BC3005B 

BD2A06A 

BD2B03A 

BD2D03A 

BD4003A 

BD4006A 

BD8003A 





E28002B was graded inapplicable by Evaluation and Test Modification as 
directed by the AVO. This test checks that pragmas may have unresolvable 
arguments, and it includes a check that pragma LIST has the required effect; 
but for this implementation, pragma LIST has no effect if the compilation 
results in errors or warnings, which is the case when the test is processed 
without modification. This test was also processed with the pragmas at lines 
46, 58, 70 and 71 commented out so that pragma LIST had effect. 

Tests C45524A..N (14 tests) were graded passed by Test Modification as 
directed by the AVO. These tests expect that a repeated division will result 
in zero; but the standard only requires that the result lie in the smallest 
safe interval. Thus, the tests were modified to check that the result was 
within the smallest safe interval by adding the following code after line 
141; the modified tests were passed: 

ELSIF VAL <= F'SAFE SMALL THEN COMMENT ("UNDERFLOW SEEMS GRADUAL"); 


C83030C and C86007A were graded passed by Test Modification as directed by 
the AVO. These tests were modified by inserting "PRAGMA ELABORATE (REPORT);" 
before the package declarations at lines 13 and 11, respectively. Without the 
pragma, the packages may be elaborated prior to package report's body, and 
thus the packages' calls to function Report.Ident_Int at lines 14 and 13, 
respectively, will raise PROGRAM_ERROR. 

B83E01B was graded passed by Evaluation Modification as directed by the AVO. 
This test checks that a generic subprogram's formal parameter names (i.e. 
both generic and subprogram formal parameter names) must be distinct; the 
duplicated names within the generic declarations are marked as errors, 
whereas their recurrences in the subprogram bodies are marked as "optional" 
errors—except for the case at line 122, which is marked as an error. This 
implementation does not additionally flag the errors in the bodies and thus 
the expected error at line 122 is not flagged. The AVO ruled that the 
implementation's behavior was accept^ole and that the test need not be split 
(such a split would simply duplicate the case in B83E01A at line 15) . 


CA2009A, CA2009C..D (2 tests), CA2009F and BC3009C were graded inapplicable 
by Evaluation Modification as directed by the AVO. These tests instantiate 
generic units before those units' bodies are compiled; this implementation 
creates dependences as allowed by AI-00408 & AI-00506 such that the 
compilation of the generic unit bodies makes the instantiating units 
obsolete, and the objectives of these tests cannot be met. 


2-4 


IMPLEMENTATION DEPENDENCIES 


BC3204C and BC3205D were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic actual parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, the 
generic bodies are compiled after the units that contain the instantiations, 
and this implementation creates a dependence of the instantiating units on 
the generic units as allowed by AI-00408 & AI-00506 such that the compilation 
of the generic bodies makes the instantiating units obsolete—no errors are 
detected. The processing of these tests was modified by compiling the 
seperate files in the following order (to allow re-compilation of obsolete 
units), and all intended errors were then detected by the compiler: 


BC3204C: CC, Cl, C2, C3M, C4, C5, C6, C3M 
BC3205D: DC, D2, DIM 


BC3204D and 3C3205C were graded passed by Test Modification as directed by 
the AVO. These tests are similar to BC3204C and BC3205D above, except that 
all compilation units are contained in a single compilation. For these two 
tests, a copy of the main procedure (which later units make obsolete) was 
appended to the tests; all expected errors were then detected. 

CD2A53A was graded inapplicable by Evaluation Modification as directed by the 
AVO. The test contains a specification of a power-of-ten value as small for 
a fixed-point type. The AVO ruled that, under ACVC 1.11, support of decimal 
smalls may be omitted. 

AD9001B and AD9004A were graded passed by Processing Modification as directed 
by the AVO. These tests check that various subprograms may be interfaced to 
external routines (and hence have no Ada bodies). This implementation 
requires that a file specification exists for the foreign subprogram bodies. 
The following command was issued to the Librarian to inform it that the 
foreign bodies will be supplied at link time (as the bodies are not actually 
needed by the program, this command alone is sufficient: 

AL960> interface/system AD9004A 

CE2103A, CE2I03B and CE3107A were graded inapplicable by Evaluation 
Modification as directed by the AVO. The tests abort with an unhandled 
exception when USE_ERROR is raised on the attempt to create an external file. 
This is acceptable behavior because this implementation does not support 
external fries (cf. AI-00332). 


2-5 





CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementacion system, see: 

Mr Ron Duursma 
Director of Ada Products 
Tartan Inc. 

300, Oxford Drive, 

Monroeville, PA 15146, 

USA. 

Tel. (412) 856-3600 

For a point of contact for sales information about this Ada implementation 
system, see: 


Mr Bill Geese 
Director of Sales 
Tartan Inc. 

300, Oxford Drive, 
Monroeville, PA 15146, 
USA. 

Tel. (412) 856-3600 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC (Pro90). 


3-1 



PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 3628 

b) Total Number of Withdrawn Tests 83 

c) Processed Inapplicable Tests 36 

d) Non-Processed I/O Tests 264 

e) Non-Processed Floating-Point 

Precision Tests 159 


f) Total Number of Inapplicable Tests 459 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


The above number of I/O tests were not processed because this implementation 
does not support a file system. The above number of floating-point tests were 
not processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in Section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler was 
tested, the tests listed in Section 2.1 had been withdrawn because of test 
errors. The AVF determined that 459 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 159 executable tests that use floating-point precision 
exceeding that supported by the implementation and 264 executable tests that 
use file operations not supported by the implementation. In addition, the 
modified tests mentioned in Section,2.3 were also processed. 

A Magnetic Tape Reel containing the customized test suite (see Section 1.3) 
was taken on-site by the validation team for processing. The contents of the 
tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link, an RS232 interface, and run. The results 
were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation.. It also' indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 


PROCESSING INFORMATION 

options used for compiling:' 

/replace forces the compiler to accept an attempt to compile a unit 

imported from another library which is normally prohibited. 

/nos.ive_source suppresses the creation of a registered copy of the source 
code in the library directory for use by the REMAKE and MAKE 
subcommands. 

/list=always forces a listing to be produced, default is to only produce 
a listing when an error occurs. 

No explicit Linker options were used. 

Test output, compiler and linker listings, and job logs were captured on 

Magnetic Tape Reel and archived at the AVF. The listings examined on-site by 

the validation team were also archived. 


3-3 




T -* £h 


APPENDIX A 


MACRO PARAMETERS 


his appendix contains the macro parameters used for customizing the ACVC. 
he meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$BIG_ID1 

$BIG_ID2 

CBIG_iD3 

SBIG ID4 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

SBLANKS 

SMAX LEN INT BASED 


(1. 

.V-l 

=> 

'A', 

V 

=> '1') 

(1. 

.V-l 

=> 

'A', 

V 

=> '2') 

(1. 

.V/2 

=> 

'A' ) 

& 

'3' & 


(1.. 

■ V-l 

-V/2 

=> 

'A' ) 

(1. 

.V/2 

=> 

' A f ) 

& 

' 4' & 


(1. . 

.V-l 

-V/2 

=> 

'A' ) 

(1. 

. V-3 

=> 

'O' ) 

& 

"298" 

(1. 

.V-5 

=> 

'O' ) 

& 

"690.0" 


& (1..V/2 => ' A' ) & ' 

' & (1. .V-l-V/2 => 'A' ) & ' 

(1..V-20 => ' ') 

ITERAL 

"2:" & (1..V-5 => 'O') & ”11: 


1 ' 


fl 


& ' 


$MAX_LEN_REAL_3ASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 

SMAX STRING LITERAL & (1..V-2 => 'A') & 


A-l 




MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter _ Macro Value __ 

$MAX_IN_LEN 240 

$ACC_SIZE 32 

SALIGNMENT 4 

$COUNT_LAST 2147483646 

SDEF AULT_MEM_SIZE 2097152 

$DEFAULT_STOR_UNIT 8 

SDEFAULT_SYS_NAME I960MC 

$DELTA__DOC 2#1.0#E-3l 

$ENTRY_ADDRF,SS SYSTEM.ADDRESS' (16#0000_00C8#) 

$ENTRY_ADDRESS1 SYSTEM.ADDRESS'(16#0000_00C9#) 

$ENTRY_ADDRESS2 SYSTEM.ADDRESS'(16#0000_00CA#) 

$FIELD_LAST 20 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

SFLOAT_NAME EXTENDED_FLOAT 

$FORM_STRING 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER_THAN_DURATION 

100 _ 000.0 

$C-REATER_THAN_DURATION_3ASE_LAST 

100 _ 000 _ 000.0 

SGREATER_THAN_FLOAT_BASE_LAST 

1.80141E+38 

SGREATER_THAN_FLOAT_SAFE_LARGE 

1.0E+38 


A-2 







MACRO PARAMETERS 


$GREATER_THAN_SHORT__FLOAT_SAFE_LARGE 

1.0E+38 

$HIGH_PRIORITY 17 

$ILLEGAL_EXTERNAL_FILE_NAME1 

ILLEGAL_EXTERNAL_FILE_NAME1 

$ I I>LEGAL_EXTERNAL_FILE_NAME2 

ILLEGAL_EXTERNAL_FILE_NAME2 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 "PRAGMA INCLUDE ("A28006D1.TST")" 

$INCLUDE_PRAGMA2 "PRAGMA INCLUDE ("B28006F1.TST")" 

SINTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

SINTERFACE_LANGUAGE Use_Call 

$ LE S S_THAN_DURATION -100_000.0 

$ LE S S_TH AN__DURAT ION_B AS E_F IRS T 

- 100 _ 000 _ 000.0 

$LINE_TERMINATOR ' ' 

SLOW_PRIORITY 2 

$MACHINE_CODE_STATEMENT 

Two_Format' (MOV, (Reg_Lit, 5), (Reg, R5)) ; 

$MACHINE_CODE_TYPE Mnemonic 

$MANTISSA_DOC 31 

SMAX__DIGITS 18 

$MAX_INT 9223372036854775807 

$MAX_INT_PLUS_1 9223372036854775808 


$MIN INT 


-9223372036854775808 







MACRO PARAMETERS 


$NAME 

$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASF.D_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

SRECORD DEFINITION 


BYTE_INTEGER 

I960MC 

DUA2:[ACVC11.960MC.TESTBED]X2120A.;1 
DUA2:[ACVC11.960MC.TESTBED]X2120B.;1 
DUA2:t ACVC11.9 6 OMC.TESTBED]X2119A.;1 
16#FFFFFFFFFFFFFFFE# 

2097152 

8 

I960MC 


record Operation: Mnemonic; 

Operand_l: Operand; Operand_2: Operand; 
end record; 


$RECORD_NAME 

$TASK_S1ZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$ VARI ABLE._ADDRE S S 2 


Two_Format 

32 

4096 

0.015625 

SYSTEM.ADDRESS'(16#0000_1000#) 
SYSTEM.ADDRESS'(16#0000_1004#) 
SYSTEM.ADDRESS' (16#0000 1008#) 


SYOUR PRAGMA 


NO SUCH PRAGMA 


APPENDIX B 

COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer.- Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 


B-l 


Compilation switches for Tartan Ada VMS 960. 


/960MC 


/CALLS[=option] 


/DEBUG 

/NODEBUG [default] 


/ERROR_LIMIT=n 


/FIXUP=[option] 


Invoke the 80960MC-targeted cross compiler. 
This qualifier is mandatory to invoke the 
80960MC-targeted compiler. 


Controls the type of calls generated by the 
compiler through the option supplied. The 
available options are: 

SHORT Generate all short calls in the 

compiled code. Inappropriate use 
of this switch will cause a failure 
at link time. 

LONG Generate all long calls in the 

compiled code. 

MIXED Generate short calls within ap¬ 
plication code and long calls from 
applications to runtime routines. 
This option is the default. 


Controls whether debugging information is 
included in the object code file. It is not 
necessary for all object modules to include 
debugging information to obtain a linkable 
image, but use of this qualifier is 
encouraged for all compilations. No 
significant execution-time penalty is in¬ 
curred with this qualifier. 


Stop compilation and produce a listing after 
n errors are encountered, where n is in the 
range 0..255. The default value for n is 
255. The /ERROR_LIMIT qualifier cannot be 
negated. 


When package MACHINE_CODE is used, controls 
whether the compiler attempts to alter 
operand address modes when those address 
modes are used incorrectly. The available 
options are: 

QUIET The compiler attempts to generate 

extra instructions to fix incorrect 
address modes in the array ag¬ 
gregates operand field. 

The compiler attempts to generate 
extra instructions to fix incorrect 
address modes. A warning message 
is issued if such a ''fixup'' is 


WARN 


2 


required. 

NONE The compiler does not attempt to 

fix any machine code insertion that 
has incorrect address inodes. An 
error message is issued for any 
machine code insertion that is 
incorrect. 

When no form of this qualifier is supplied in 
the command line, the default condition is 
/FIXUP=QUIET. For more information on 
machine code insertions, refer to section 
5.10 of this manual. 


/LIBRARY=iibrary-name Specifies the library into which the file is 

to be compiled. The compiler reads any 
ADALXB.INI files in the default directory. 


/LIST[=option] 

/NOLIST Controls whether a listing file is produced. 

Xf produced, the file has the source file 


name and a .LIS 
options are: 

. ^tension. The available 

ALWAYS 

Always produce a listing 
file 

NEVER 

Never produce a listing 
file, equivalent to /NOLXST 

ERROR 

Produce a listing file only 
if a compilation error or 
warning occurs 


When no form of this qualifier is supplied in 
the command line, the default condition is 
/LXST—ERROR. When the LXSI qualifier is 
supplied without an option, the default 
option is ALWAYS. 


/MACHINE_CODE[=option] 

Controls whether the compiler produces an 
assembly code file in addition to an object 
file, which is always generated. The 
assembly code file is not intended to be 
input to an assembler, but serves as 
documentation only. The available options 
are: 


NONE Do not produce an 

assembly code file. 
Produce an assembly 
code file which in¬ 
terleaves source code 
with the machine coda 
(see Section 4.5.4). 


INTERLEAVE 


3 


/NOENUMIMAGE 


/OPT=n 


Ada source appears as 
assembly language 
comments. 

NOINTERLEAVE Produce an assembly 

code file without 
interleaving. 

When no form of this qualifier is supplied in 
the command line, the default option is NONE. 
Specifying the MACBXNE_CODE qualifier without 
an option is equivalent to supplying 
/MACHINE CODE=NOINTERLEAVE. 


Causes the compiler to omit data segments 
with the text of enumeration literals. This 
text is normally produced for exported 
enumeration types in order to support the 
text attributes ('IMAGE, 'VALUE and 'WIDTH). 
You should use /NOENUMIMAGE only when you can 
guarantee that no unit that will import the 
enumeration type will use any of its text 
attributes. However, if you are compiling a 
unit with an enumeration type that is not 
visible to other compilation units, this 
qualifier is not needed. The compiler can 
recognize when the text attributes are not 
used and will not generate the supporting 
strings.The /NOENUMIMAGE qualifier cannot be 
negated. 


Controls the level of optimization performed 
by the compiler, requested by n. The /OPT 
qualifier cannot be negated. The optimiza¬ 
tion levels available are: 

n - 0 Minimum - Performs context 
determination, constant 
folding, algebraic manipula¬ 
tion, and short circuit 
analysis. Inlines are not 
expanded. 

n = 1 Low - Performs level 0 

optimizations plus common 
subexpression elimination 
and equivalence propagation 
within basic blocks. It 
also optimizes evaluation 
order. Inlines are not 
expanded. 

n = 2 Best tradeoff for space/time 
- the default level. Per¬ 
forms level 1 optimizations 
plus flow analysis which is 


4 


used for common subexpres¬ 
sion elimination and equiv¬ 
alence propagation across 
basic blocks. It also 
performs invariant expres¬ 
sion hoisting, dead code 
elimination, and assignment 
killing. Level 2 also 
performs lifetime analysis 
to improve register alloca¬ 
tion. It also performs 
inline expansion of sub-' 
program calls indicated by 
Pragma INLINE, if possible. 

n = 3 Time - Performs level 2 

optimizations plus inline 
expansion of subprogram 
calls which the optimizer 
decides are profitable to 
expand (from an execution 
time perspective}. Other 
optimizations which improve 
execution time at a cost to 
image size are performed 
only at this level. 

n » 4 Space - Performs those 

optimizations which usuarlly 
produce the smallest code, 
often at the expense of 
speed. This optimization 
level may not always produce 
the smallest code, however, 
another level stay produce 
smaller code under certain 
conditions. 


/PHASES 

/NOPHASES [default] Controls whether the compiler announces each 

phase of processing as it occurs. These 
phases indicate progress of the compilation. 
If there is an error in compilation, the 
error message will direct users to a specific 
location as opposed to the more general 
/PHASES. 


/RECOMPILE_S YSTEM Causes the compiler to accept non-Ada input, 

necessary to replace package SYSTEM. This 
qualifier should not be used for compiling 
user-defined packages containing illegal 
code. Changes of package SYSTEM must fully 
conform to the requirements stated in ARM 4-5 
13.7 and 13.7.1, and must not change the 


5 


given definition of type ADDRESS, in order to 
preserve validatability of the Ada system. 


/REFINE 

/NOREFINE [default] Controls whether the compiler, when compiling 

a library unit, determines whether the unit 
is a refinement of its previous version and, 
if so, does not make dependent units 
obsolete. The default is /NOREFXNE. 


/REPLACE Forces the compiler to accept an attempt to 

compile a unit imported from another library 
which is normally prohibited. 


/SAVE_SOURCE [default] 

/NOSAVE_SOURCE Suppresses the creation of a registered copy 

of the source code in the library directory 
for use by the REMAKE and MAKE subcommands to 
AL960. 


/SUPPRESS[=(option, ...) ] 

Suppresses the specific checks identified by 
the options supplied. The parentheses may be 
omitted if only one option is supplied. If 
contradictory options are specified (e.y. 
/SUPPRESS*(NONE, OVERFLOW_CHECK), the options 
that are given last will override previous 
ones. The absence of the /SUPPRESS qualifier 
on the command line is equivalent to 
/SUPPRESSIONS. 

The available options are: 

ALL Suppress all 

checks. This 
is the default 
if the 

qualifier is 
supplied with 
no option. 

ACCESS_CHECK As spe'*’ ied in 

the Ad<. LRM, 
Section 11.7. 

CONSTRAINT_CHECK Equivalent cf 

(ACCESS_CHECK, 

index_c5eck, 

DISCRIMINANT_CHECK, 
LENGTH_CHECK, 
RANGE_CHECK). 

DISCRIMINANT_CHECK As specified in 


6 


DIVISION CHECK 


ELABORATION CHECK 


INDEX CHECK 


LENGTH CHECK 


NONE 


OVERFLOW CHECK 


RANGE CHECK 


STORAGE CHECK 


the Ada LRM, 
Section 11.7. 

Because the 
80960MC detects 
division by 
zero, code for 
this purpose is 
not generated 
by the com¬ 
piler. There¬ 
fore, this 
qualifier has 
no effect. 

As specified in 
the Ada LRM, 
Section 11.7. 

As specified in 
the Ada LRM, 
Section 11 7. 

As specified in 
the Ada LRM, 
Section 11.7. 

No checks are 
suppressed. 

This is the 
default if the 
qualifier is 
not supplied on 
the command 
line. 

Because the 
80960MC detects 
overflow, code 
for this pur¬ 
pose is not 
generated by 
the compiler. 
Therefore, this 
qualifier has 
no effect. 

As specified in 
the Ada LRM, 
Section 11.7. 

As specified in 
the Ada LRM, 
Section 11.7. 
Suppresses only 
stack checks in 
generated code. 



7 


/SYNTAX ONLY 


/WARNINGS [default] 
/NOWARNINGS 


/WAIT STATES=n 


not the checks 
made by the 
allocator as a 
result of a new 
operation. 

Parses a unit and reports syntax errors, then 
stops compilation without entering a unit in 
the library. 


Controls whether the warning messages 
generated by the compiler are displayed to 
the user at the terminal and in a listing 
file, if produced. While supresc'ng warning 
messages also halts display of informational 
messages, it does not suppress Error, 

Fatal Error. 


Defines the memory waitstates of the target 
for the compiler. The default value is 0. 



LINKER OPTIONS 


The linker options of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


B-2 









Linker switches for VMS hosted Tartan Ada compilers. 

COMMAND QUALIFIERS 

This section describes the command qualifiers available to a user who directly 
invokes the linker. The qualifier names can be abbreviated to unique 
prefixes; the first letter is sufficent for all current qualifier names. The 
qualifier names are not case sensitive. 

/CONTROL=file The specified file contains linker control commands. 

Only one such file may be specified, but it can 
include other files using the CONTROL command. Every 
invocation of the linker must specify a control file. 

/OUTPUT=file The specified file is the name of the first output 

object file. The module name for this file will be 
null. Only one output file may be specified in this 
manner. Additional output files may be specified in 
the linker control file. 

/ALLOCATIONS Produce a link map showing the section allocations. 

/UNUSEDSECTIONS Produce a link map showing the unused sections. 

/SYMBOLS Produce a link map showing global and external 

symbols. 

/RESOLVEMODULES This causes the linker to not perform unused section 

elimination. Specifying this option will generally 
make your program larger, since unreferenced data 
within object files will not be eliminated. Refer to 
Sections RESOLVE__CMD and USE_PROCESSING for infor¬ 
mation on the way that unused section elimination 
works. 

/MAP Produce a link map containing all information except 

the unused section listings. 

Note that several listing options are permitted. This is because link maps 
for real systems can become rather large, and writing them consumes a 
significant 2 raction of the total link time. Options specifying the contents 
of the link map can be combined, in which case the resulting map will contain 
all the information specified by any of the switches. The name of the file 
containing the link map is specified by the LIST command in the linker control 
file. If your control file does not specify a name and you request a listing, 
the listing will be written to the default output stream. 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to implementation- 
dependent pragmas, to certain machine-dependent conventions as mentioned in 
Chapter 13 of the Ada Standard, and to certain allowed restrictions on 
representation clauses. The implementation-dependent characteristics of this 
Ada implementation, as described in this Appendix, are provided by the 
customer. Unless specifically noted otherwise, references in this Appendix 
are to compiler documentation and not to this report. Implementation- 
specific portions of the package STANDARD, which are not a part of Appendix 
F, are: 


package STANDARD is 


type BYTE_INTEGER is range -128 .. 127; 

type SHORT_INTEGER is range -32768 .. 32767; 

type INTEGER is range -2147483648 .. 2147483647; 

type LONG_INTEGER is range -9223372036854775808 ... 9223372036854775807; 

type FLOAT ' is digits 6 range 

- 2 # 1 . 11111111111111111111111 #e 126 .. 2 # 1 . 11111111111111111111111 #el 26 ; 
type LONG_FLOAT is digits 15 range 

-2#1.11111111111111111111111111111111111111111111111111ll#el022 . . 
2#l.lllillllllllllllllllllililllllllllllllllllllllllllll*el022; 


type EXTENDED_FLOAT is digits 18 range 

-2#1. 111111111111111111111111111111111111111111111111 111111111111111 tel6382 .. 
2#1.111111111111.11111111111111111111111111111111111111111111111lll#el6382; 

type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-l 






Chapter 5 

Appendix F to MIL-STD-1815A 


This chapter contains the required Appendix F to the LRM which is Military Standard, Ada Programming 

Language , ANSI/MIL-STD-1815A (American National Standards Institute, Inc., February 17,1983). 

5.1. PRAGMAS 

5.1.1. Predefined Pragmas 

This section summarizes the effects of and restrictions on predefined pragmas. 

• Access collections are not subject to automatic storage reclamation so pragma CONTROLLED has no effect. 
Space deallocated by means of UNCHECKED_DEALLOCATlON will be reused by the allocation of new 
objects. 

• Pragma elaborate is supported. 

• Pragma inline is supported. 

• Pragma interface is supported. A particular Ada calling sequence is associated with a subprogram 
whose implementation is provided in the form of an object code module. Language_Name may be 
either Use_Call or Use_Bal as described in Section 5.1 22. Any other Language_Name will be 
accepted, but ignored, and the default, Use_Call will be used. 

• Pragma list is supported but has the intended effect only if the command qualifier list=always was 
supplied for compilation, and the listing generated was not due to the presence of errors and/or warnings. 

• Pragma memory_SIZE is accepted but no value other than that specified in Package SYSTEM (Section 

5.3) is allowed. 

• Pragma OPTIMIZE is supported, but on a subprogram basis only. It does not affect code at the block 

level. ' 

• Pragma PACK is supported. 

• Pragma PAGE is supported but has the intended effect only if the command qualifier LIST=ALWAYS was 
supplied for compilation, and the listing generated was not due to the presence of errors and/or warnings. 

• Pragma PRIORITY is supported. 

• Pragma STORAGE_unit is accepted but no value other than that specified in Package SYSTEM (Section 

5.3) is allowed. 

• Pragma shared is not supported. No warning is issued if it is supplied. 

• Pragma SUPPRESS is supported. 

• Pragma SYSTEM_NAME is accepted but no value other than that specified in Package system (Section 

5.3) is allowed. 




USER MANUAL FOR TARTAN ADA VMS 960 


5.1.2. Implementation-Defined Pragmas 

Implementation-d-fmed pragmas provided by Tartan are described in the following sections. 

5.12.1. Pragma LINKAGE_NAME 

The pragma linkage_name associates an Ada entity with a string that is meaningful externally; e.g., to a 
linkage editor. It takes the form 

pragma LINKAGE_NAME ( Ada-simple-name, string-constant ) 

The Ada-simple-name must be the name of an Ada entity declared in a package specification. This entity must be 
one that has a runtime representation; e.g., a subprogram, exception or object. It may not be a named number or 
string constant. The pragma must appear after the declaration of the entity in the same package specification. 

The effect of the pragma is to cause the string-constant to be used in the generated assembly code as an 
external name for the associated Ada entity. It is the responsibility of the user to guarantee that this string 
constant is meaningful to the linkage editor and that no illegal linkname clashes arise. 

This pragma has no effect when applied to a library subprogram or to a renames declaration; in the latter case, 
no warning message is given. 

When determining the maximum allowable length for the external linkage name, keep in mind that the 
compiler will generate names for elaboration flags simply by appending the suffix #GOTO. Therefore, the 
external linkage name has’5 fewer significant characters than the lower limit of other tools that need to process 
the name (e.g., 40 in the case of the Tartan Linker). 

5.12.2. Pragma FOREIGN_BODY 

In addition to Pragma interface, Tartan Ada supplies Pragma fore I gn_bod Y as a way to access 
subprograms in other languages. 

Unlike Pragma INTERFACE, Pragma F0REIGNJ30DY allows access to objects and exceptions (in addition 
to subprograms) to and from other languages. 

Some restrictions on Pragma foreign_body that are not applicable to Pragma interface are: 

• Pragma foreign_body must appear in a non-generic library package. 

• All objects, exceptions and subprograms in such a package must be supplied by a foreign object module. 

• Types may not be declared in such a package. 

Use of the pragma FOR£lGN_BODY dictates that all subprograms, exceptions and objects in the package are 
provided by means of a foreign object module. 1° order to successfully link a program including a foreign body, 
the object module for that body must be provided to the library using the AL960 foreign command described 
in sections 3.3.3 and 13.5.5. The pragma is of the form: 

pragma FORElGN_BODY [Languagejiame [, elaboration joutinejiame]) 

The parameter Language_name is a string intended to allow the compiler to identify the calling convention used 
by the foreign module (but this functionality is not yet in operation). Currently, the programmer must ensure that 
the calling convention and data representation of the foreign body procedures are compatible with those used by 
the Tartan Ada compiler. Subprograms called by tasks should be reentrant 

The optional elaboration joutinejiame string argument is a linkage name identifying a routine to initialize 
the package. The routine specified as the elaboration joutinejiame, which will be called for the elaboration of 
this package body, must be a global routine in the object module provided by the user. 

A specification that uses this pragma may contain only subprogram declarations, object decorations that use 
an unconstrained type mark, and number declarations. Pragmas may also appear in the package. The type mark 
for an object cannot be a task type, and the object declaration must not have an initial value expression. The 
pragma must be given prior to any declarations within the package specification. If the pragma is not located 
before the first declaration, or any restriction on the declarations is violated, the pragma is ignored and a warning 
is generated. 


APPENDIX F TO MIL-STD-1815A 


The foreigT body is entirely responsible for initializing objects declared in a package utilizing pragma 
foreign_body. In particular, the user should be aware that the implicit initializations described in LRM 3.2.1 
are not done by the compiler. (These implicit initializations are associated with objects of access types, certain 
record types and composite types containing components of the preceding kinds of types.) 

Pragma linkage_name should be used for all declarations in the package, including any declarations in a 
nested package specification to be sure that there are no conflicting link names. 

In the following example, we want to call a function plmn which computes polynomials and is written in C. 
package math_functions is 

pragma FOREIGN_BODY ("C"); 

function POLYNOMIAL (X: INTEGER) return INTEGER; 

—Ada spec matching the C routine 
pragma LINKAGE_NAME (POLYNOMIAL, "plmn”); 

—Force compiler to use name "plmn" when referring to this 
— function 
end MATH_FUNCTIONS; 

With MATH_FUNCTIONS; use MATH JUNCTIONS; 
procedure main is 

X:INTEGER POLYNOMIAL(10); 

— Will generate a call to "plmn" 
begin ... 
end MAIN; 

To compile, link and run the above program, you do the following steps: 

1. Compile MATH_FUNCTIONS 

2. Compile main 

3. Obtain an object module (e.g. math. TOF) containing the compiled code for plmn. 

4. Issue the command 

AL960 FOREIGN_BODY math_functions MATH.TOF 

5. Issue the command 

AL960 LINK MAIN 

Without Step 4, an attempt to link will produce an error message informing you of a missing package body for 
MATH_FUNCTIONS. 

Using an Ada body from another Ada program library. The user may compile a body written in Ada for a 
specification into the library, regardless of the language specified in the pragma contained in the specification. 
This capability is useful for rapid prototyping, where an Ada package may serve to provide a simulated response 
for the functionality that a foreign body may eventually produce. It also allows the user to replace a foreign body 
with an Ada body without recompiling the specification. 

The user can either compile an Ada body into the library, or use the command AL960 FOREIGN (see 
Sections 3.3.3 and 13.5.5) to use an Ada body from another library. The Ada body from another library must 
have been compiled under an identical specification. The pragma linkage_name must have been applied to 
all entities declared in the specification. The only way to specify the linkname for the elaboration routine of an 
Ada body is with the pragma FOREIGN_BODY. 

5.12.3. Pragma INTERFACE 

The pragma interface associates a particular Tartan Ada calling sequence with a subprogram whose 
implementation is provided in the form of an object code module. 

The form of the pragma is: 

pragma INTERFACE (Language Name, Subprogram_Name ) 


USER MANUAL FOR TARTAN ADA VMS 960 


Language_Name may be either Use_Call or Use_Bal as described in Section 5.I.2.2. Any other 
Language_Name will be accepted, but ipored, and the default, Use_Call will be used. 

While the bal calling convention is faster than the standard calling convention, be aware that bal must be 
used carefully. In particular, when a routine is called with BAL: 

• No new sack frame is allocated. This means that the called routine must not change the stack pointer, or 
must at least ensure that the stack pointer is restored before the routine returns. 

• No new local registers are allocated. 

• The called routine must return via a bx (reg) instruction. The BAL instruction will automatically store 
the return address in register gl4. 

• If a called routine has more than 12 words worth of parameters, the compiler will store the argument block 
pointer in gl4. Since the BAL instruction will place the return address in gl4, the called routine could 
find that its argument block pointer has been trashed. 

Please see Chapter 6 for a complete list of BAL calling convention restrictions. 


5.2. IMPLEMENTATION-DEPENDENT ATTRIBUTES 

No implementation-dependent attributes are currently supported. 


5.3. SPECIFICATION OF THE PACKAGE SYSTEM 

The parameter values specified for the 80960MC in package SYSTEM [LRM 13.7.1 and Appendix C) are: 

package SYSTEM is 

type ADDRESS is new Integer; 
type NAME is (I960MC); 


SYSTEM_NAME 
STORAGE UNIT 
MEMORY SIZE 


constant name I960MC; 

constant : = 8; 

constant := 2 097 152; 


MAX_INT 
MIN INT 


constant := 9_2 2 3_3 7 2_0 3 6_8 5 4_7 7 5_8 0 7 ; 
constant :« -MAX INT - 1; 


MAX DIGITS 


: constant : = 18; 


MAX_MANTISSA : constant : = 31; 

FINE_DELTA : constant := 2#1.0#e-31; 

TICK : constant := 0.015625; 

subtype PRIORITY is INTEGER range 2 .. 17; 
DEFAULT_PRIORITY : constant PRIORITY := PRIORITY'FIRST; 
RUNT I ME_E RROR : exception; 

end SYSTEM; 


5.4. RESTRICTIONS ON REPRESENTATION CLAUSES 

The following sections explain the basic restrictions for representation specifications followed by additional 
restrictions applying to specific kinds of clauses. 

5.4.1. Basic Restriction 

The basic restriction on representation specifications [LRM 13.1] is that they may be given only for types 
declared in terms of a type definition, excluding a generic_type_definition (LRM 12.1) and a 
pnvate_type_def inition (LRM 7.4). Any representation clause in violation of these rules is not obeyed 
by the compiler, an error message is issued. 



APPENDIX F TO MIL-STD-1815 A 


Further restrictions are explained in the following :>ections. Any representation clauses violating those restric¬ 
tions cause compilation to stop and a diagnostic message to be issued. 

5.4.2. Length Clauses 

Length clauses [LRM 13.2] are, in general, supported. For details, refer to the following sections. 

5.42.1. Size Specifications for Types 

The rules and restrictions for size specifications applied to types of various classes are described below. 

The following principle rules apply: 

1. The size is specified in bits and must be given by a static expression. 

2. The specified size is taken as a mandate to store objects of the type in the given size wherever feasible. 
No attempt is made to store values of the type in a smaller size, even if possible. The following rules 
apply with regard to feasibility: 

• An object that is not a component of a composite object is allocated with a size and alignment that 
is referable on the target machine; that is, no attempt is made to create objects of non-referable size 
on the stack. If such stack compression is desired, it can be achieved by the user by combining 
multiple stack variables in a composite object; for example 

type My_Enum is (A,B); 
for My_enum'size use 1; 

V,W: My_enum; — will occupy two storage 

— units on the stack 

— (if allocated at all) 
type rec is record 

V,W: My_enum; 
end record; 
pragma Pack(rec); 

O: rec; — will occupy one storage unit 

• A formal parameter of the type is sized according to calling conventions rather than size 
specifications of the type. Appropriate size conversions upon parameter passing take place 
automatically and are transparent to the user. 

• Adjacent bits to an object that is a component of a composite object, but whose size is 
non-referable, may be affected by assignments to the object, unless these bits are occupied by other 
components of the composite object; that is, whenever possible, a component of non-referable size 
is made referable. 

In all cases, the compiler generates correct code for all operations on objects of the type, even if they are 
stored with differing representational sizes in different contexts. 

Note: A size specification cannot be used to force a certain size in value operations of the type; for 
example 

type my_int is range 0..65535; 
for my_int'size use 16; — o.k. 

A,B: my_int; 

...A + B... — this operation will generally be 
— executed on 32-bit values 

3. A size specification for a type specifies the size for objects of this type and of all its subtypes. For 
components of composite types, whose subtype would allow a shorter representation of the component, 
no attempt is made to take advantage of such shorter representations. In contrast, for types without a 
length clause, such components may be represented in a lesser number of bits than the number of bits 
required to represent all values of the type. Thus, in the example 


USER MANUAL FOR TARTAN ADA VMS 960 


type MY_INT is range 0..2**15-1; 
for MY_INT'SIZE use 16; — (1) 
subtype SMALL_MY_INT is MY_INT range 0..255; 
type R is record 

X: SMALL_MY_INT; 
end record; 

the component R.X will occupy 16 bits. In the absence of the length clause at (1), R.x may be 
represented in 8 bits. 

Size specifications for access types must coincide with the default size chosen by the compiler for the type. 

Size specifications are not supported for floating-point types or task types. 

5.42.2. Size Specification for Scalar Types 

The specified size must accommodate all possible values of the type including the value 0 (even if 0 is not in 
the range of the values of the type). For numeric types with negative values the number of bits must account for 
the sign bit No skewing of the representation is attempted. Thus 
type my_int is range 100..101; 
requires at least 7 bits, although it has only two values, while 
type my_int is range -101..-100; 
requires 8 bits to account for the sign bit. 

A size specification for a real type does not affect the accuracy of operations on the type. Such influence 
should be exerted via the accuracy_def inition of the type (LRM 3.5.7,3.5.9). 

A size specification for a scalar type may not specify a size larger than the largest operation size supported by 
the target architecture for the respective class of values of the type. 

5.423. Size Specification for Array Types 

A size specification for an array type must be large enough to accommodate all components of the array under 
the densest packing strategy. Any alignment constraints on the component type (see Section 5.4.7) must be met. 

The size of the component type cannot be influenced by a length clause for an array. Within the limits of 
representing all possible values of the component subtype (but not necessarily of its type), the representation of 
components may, however, be reduced to the minimum number of bits, unless the component type carries a size 
specification. 

If there is a size specification for the component type, but not for the array type, the component size is 
rounded up to a referable size, unless pragma pack is given. This applies even to boolean types or other types 
that require only a single bit for the representation of all values. 

5.42.4. Size Specification for Record Types 

A size specification for a record type does not influence the default type mapping of a record type. The size 
must be at least as large as the number of bits determined by type mapping. Influence over packing of com¬ 
ponents can be exerted by means of (partial) record representation clauses or by Pragma PACK. 

Neither the size of component types, nor the representation of component subtypes can be influenced by a 
length clause for a record. 

The only implementation-dependent components allocated by Tartan Ada in records contain dope information 
for arrays whose bounds depend on discriminants of the record or contain relative offsets of components within a 
record layout for record components of dynamic size. These implementation-dependent components cannot be 
named or sized by the user. 



APPENDIX F TO ME.-STD-1815A 


A size specification cannot be applied to a record type with components of dynamically determined size. 

Note: Size specifications for records can be used only to widen the representation accomplished by padding at 
the beginning or end of the record. Any narrowing of the representation over default type mapping must be 
accomplished by representation clauses or pragma PACK. 

5.42.5. Specification of Collection Sizes 

The specificaf. m of a collection size causes the collection to be allocated with the specified size. It is 
expressed in storage units and need not be static; refer to package SYSTEM for the meaning of storage units. 

Any attempt to allocate more objects than the collection can hold causes a STORAGE_ERROR exception to be 
raised. Dynamically sized records or arrays may carry hidden administrative storage requirements that must be 
accounted for as part of the collection size. Moreover, alignment constraints on the type of the allocated objects 
may make it impossible to use all memory locations of the allocated collection. No matter what the requested 
object size, the allocator must allocate a minimum of 2 words per object. This lower limit is necessary for 
administrative overhead in the allocator. For example, a request of S words results in an allocation of 5 words; a 
request of 1 word results in an allocation of 2 words. 

Furthermore, the allocator must round non-word sized requests up to the nearest word. For example, a 
request of 11 bytes is rounded up to 12 bytes (3 words). 

In the absence of a specification of a collection size, the collection is extended automatically if more objects 
are allocated than possible in the collection originally allocated with the compiler-established default size. In this 
case, storage_ERROR is raised only when the available target memory is exhausted. If a collection size of 
zero is specified, no access collection is allocated. 

5.42.6. Specification of Task Activation Size 

The specification of a task activation size causes the task activation to be allocated with the specified size. It 
is expressed in storage units; refer to package SYSTEM for the meaning of storage units. 

If the storage specified for a task activation (T' Storage_Size) is not a multiple of 4096 (one page), the 
compiler allocates the next higher multiple of 4096, as permitted by the language. 

Any attempt to exceed the activation size during execution causes a s TORAGE_ERROR exception to be 
raised. Unlike collections, there is no extension of task activations. 

5.42.7. Specification of ' SMALL 

Only powers of 2 are allowed for' small. 

The length of the representation may be affected by this specification. If a size specification is also given for 
the type, the size specification takes precedence; the specification of ' small must then be accommodatable 
within the specified size. 

5.4.3. Enumeration Representation Clauses 

For enumeration representation clauses [LRM 13.3], the following restrictions apply: 

• The internal codes specified for the literals of the enumeration type may be any integer value between 
INTEGER' FIRST and INTEGER' LAST. It is strongly advised to not provide a representation clause that 
merely duplicates the default mapping of enumeration types, which assigns consecutive numbers in as¬ 
cending order starting with 0, since unnecessary runtime cost is incurred by such duplication. It should be 
noted that the use of attributes on enumeration types with user-specified encodings is costly at run time. 

• Array types, whose index type is an enumeration type with non-contiguous value encodings, consist of a 
contiguous sequence of components. Indexing into the array involves a runtime translation of the index 
value into the corresponding position value of the enumeration type. 



USER MANUAL FOR TARTAN ADA VMS 960 


5.4.4. Record Representation Clauses 

The alignment clause of record representation clauses [LRM 13.4] is observed. 

Static objects may be aligned at powers of 2 up to a page boundary. The specified alignment becomes the 
minimum alignment of the record type, unless the minimum alignment of the record forced by the component 
allocation and the minimum alignment requirements of the components is already more stringent than the 
specified alignment 

The component clauses of record representation clauses are allowed only for components and discriminants 
of statically determinable size. Not all components need to be present Component clauses for components of 
variant parts are allowed only if the size of the record type is statically determinable for every variant 

The size specified for each component must be sufficient to allocate all possible values of the component 
subtype (but not necessarily the component type). The location specified must be compatible with any alignment 
constraints of the component type; an alignment constraint on a component type may cause an implicit alignment 
constraint on the record type itself. 

If some, but not all, discriminants and components of a record type are dLxribed by a component clause, then 
the discriminants and components without component clauses are allocated after those with component clauses; 
no attempt is made to utilize gaps left by the user-provided allocation. 

5.4.5. Address clauses 

Address clauses [LRM 13.5] are supported with the following restrictions: 

• When applied to an object, an address clause becomes a linker directive to allocate the object at the given 
address. For any object not declared immediately within a top-level library package, the address clause is 
accepted but meaningless. Please refer to section 8.10 for details on how address clauses relate to linking; 
refer to section 12.2 for an example. 

• Address clauses applied to local packages are not supported by Tartan Ada. Address clauses applied to 
library packages are prohibited by the syntax; therefore, an address clause can be applied to a package only 
if it is a body stub. 

• Address clauses applied to subprograms and tasks are implemented according to the LRM rules. When 
applied to an entry, the specified value identifies an interrupt in a manner customary for the target 
Immediately after a task is created, a runtime call is made for each of its entries having an address clause, 
establishing the proper binding between the entry and the interrupt. Refer to section 10.2.7 for more 
details. A specified address must be an Ada static expression. 

• Address clauses specify virtual, not physical, addresses. 

• When specifying absolute addresses, please note that the compiler will treat addresses as an integer 
type. ThL means that specifications of addresses may raise arithmetic overflow errors; i.e., addresses must 
be in the range integer' first. . INTEGER' LAST. To represent an address greater than 
integer'LAST, use the negated radix-complement of the desired address. For example, to express 
address 16#C000_000, specify instead -16#4000_000. 

5.4.6. Pragma PACK 

Pragma pack [LRM 13.1] is supported. For details, refer to the following sections. 

5.4.6.1. Pragma PACK for Arrays 

If pragma PACK is applied to an array, the densest possible representation is chosen. For details of packing, 
refer to the explanation of size specifications for arrays (Section 5.4.2.3). 

If, in addition, a length clause is applied to 



APPENDIX F TO MIL-STD-1815A 


1. The array type, the pragma has no effect, since such a length clause already uniquely determines the array 
packing method. 

2. The component type, the array is packed dei '.ly, observing the component’s length clause. Note that the 
component length clause may have the effect of preventing the cc lpiler from packing as densely as 
would be the default if pragma PACK is applied where there was no length clause given for the com¬ 
ponent type. 

5.4.63. The Predefined Type String 

Package standard applies Pragma PACK to the type string. 

However, when applied to character arrays, this pragma cannot be used to achieve denser packing than is the 
default for the target; 4 characters per 32-bit word. 

S.4.6.3. Pragma PACK for Records 

If pragma PACK is applied to a record, the densest possible representation is chosen that is compatible with 
the sizes and alignment constraints of the individual component types. Pragma PACK has an effect only if the 
sizes of some component types are specified explicitly by size specifications and are of non-referable nature. In 
the absence of pragma PACK, such components generally consume a referable amount of space. 

It should be noted that the default type mapping for records maps components of boolean or other types that 
require only a single bit to a single bit in the record layout, if there an multiple such components in a record. 
Otherwise, it allocates a referable amount of storage to the component 

If pragma pack is applied to a record for which a record representation clause has been given detailing the 
allocation of some but not all components, the pragma PACK affects only the components whose allocation has 
not been detailed. Moreover, the strategy of not utilizing gaps between explicitly allocated components still 
applies. 

5.4.7. Minimal Alignment for Types 

Certain alignment properties of values of certain types are enforced by the type mapping rules. Any represen¬ 
tation specification that cannot be satisfied within these constraints is not obeyed by the compiler and is ap¬ 
propriately diagnosed. 

Alignment constraints are caused by properties of the target architecture, most notably by the capability to 
extract non-aligned component values from composite values in a reasonably efficient manner. Typically, restric¬ 
tions exist that make extraction of values that cr r 5 certain address boundaries very expensive, especially in 
contexts involving array indexing. Permitting dat_ layouts that require such complicated extractions may impact 
code qualify on a broader scale than merely in the local context of such extractions. 

Instead of describing the precise algorithm of establishing the minimal alignment of types, we provide the 
general rule that is being enforced by the alignment rules: 

• No object of scalar type including components or subcomponents of a composite type, may span a target- 
dependent address boundary that would mandate an extraction of the object’s value to be performed by two 
or more extractions. 

SJS. IMPLEMENTATION-GENERATED COMPONENTS IN RECORDS 

The only implementation-dependent components allocated by Tartan Ada in records contain dope information 
for arrays whose bounds depend on discriminants of the record. These components cannot be named by the user. 



USER MANUAL FOR TARTAN ADA VMS 960 


5.6. INTERPRETATION OF EXPRESSIONS APPEARING IN ADDRESS CLAUSES 

Section 13.5.1 of the Ada Language Reference Manual describes a syntax for associating interrupts with task 
entries. Tartan Ada implements the address clause 

for TOENTRY use at intID; 

by associating the interrupt specified by intID with the toentry entry of the task containing this address 
clause. The interpretation of intID is both machine and compiler dependent 

The Ada runtimes provide interrupts that may be associated with task entries. These interrupts are of type 
System.Address in the ranges 8..243, 252..25S, 264..499, and 508..511. Refer to section 10.2.7 for further 
expianauon. If the argument is outside those ranges, the compiler will report an error. 

5.7. RESTRICTIONS ON UNCHECKED CONVERSIONS 

Tartan supports UNCHECKED_CONVERSION with a restriction that requires the sizes of both source and 
target types to be known at compile time. The sizes need not be the same. If the value in the source is wider than 
that in the target, the source value will be truncated. If narrower, it will be zero-extended. Calls on instantiations 
of UNCHECKED_CONVERS I on are made inline automatically. 

5.8. IMPLEMENTATION-DEPENDENT ASPECTS OF INPUT-OUTPUT PACKAGES 

Tartan Ada supplies the predefined input/output packages DIRECT_IO, SEQUENTIAL_I0, TEXT_IO, and 
LOW_LEVEL_IO as required by LRM Chapter 14. However, since 80960MC processor is used in embedded 
applications lacking both standard I/O devices and file systems, the functionality of direct_IO, 
SEQUENTlAL_IO, and TEXT_io is limited. 

DIRECT_IO and SEQUENTiAL_IO raise USE_ERR0R if a file open or file access is attempted. TEXT_IO 
is supported to CURRENT_output and from CURRENT_INPUT. A routine that takes explicit file names raises 
USE_ERROR. LOW_LEVEL_IO for 80960MC processor provides an interface by which the user may read and 
write from memory mapped devices. In both the SEND_CONTROL and RECEIVE_CONTROL procedures, the 
device parameter specifies a device address while the data parameter is a byte, halfword, word, or doubleword of 
data transferred. 

5.9. OTHER IMPLEMENTATION CHARACTERISTICS 

The following information is supplied in addition to that required by Appendix F to MIL-STD-1815A. 

5.9.1. Definition of a Main Program 

Any Ada library subprogram unit may be designated the main program for purposes of linking (using the 
AL960 link command) provided that the subprogram has no parameters. 

Tasks initiated in imported library units follow the same rules for termination as other tasks [described in 
LRM 9.4 (6-10)]. Specifically, these tasks are not terminated simply because the main program has terminated. 
Terminate alternatives in selective wait statements in library tasks are therefore strongly recommended. 

. 5.9.2. Implementation of Generic Units 

All instantiations of generic units, except the predefined generic UNCHECKED_CONVERSlON and 
UNCHECKED_deallocation subprograms, are implemented by code duplications. No attempt at sharing 
code by multiple instantiations is made in this release of Tartan Ada. 

Tartan Ada enforces the restriction that the body of a generic unit must be compiled before the unit can be 
instantiated. It does not impose the restriction that the specification and body of a generic unit must be provided 
as part of the same compilation. A recompilation of the body of a generic unit will casue any units that 
instantiated this generic unit to become obsolete. 


APPENDIX F TO MIL-STD-1815A 


5.9.3. Attributes of Type Duration 

The type duration is defined with the following characteristics: 


Attribute 

Value 

DURATION'DELTA 

0.0001 sec 

DURATION'SMALL 

0.000061 sec 

DURATION' FIRST 

-86400.0 sec 

DURATION' LAST 

86400.0 sec 


5.9.4. Values of Integer Attributes 

Tartan Ada supports the predefined integer type INTEGER. The range bounds of the predefined type 
INTEGER are: 

INTEGER' FIRST is -2**31 
INTEGER' LAST is 2**31-1 

LONG_INTEGER' FIRST is -2**63 
• LONG_INTEGER' LAST is 2**63-l 

SHORT_INTF.GER' FIRST is -2**15 
SHORT_IKTEGER' LAST is 2**15-1 

BYTE_INTEGER' FIRST is -128 
BYTE_INTEGER' LAST is 127 

The range bounds for subtypes declared in package TEXT_I0 are: 

COUNT'FIRST is 0 

COUNT' LAST is INTEGER' LAST - 1 

POSITIVEJXJUNT' FIRST is 1 
POSITIVE_COUNT'LAST is INTEGER'LAST - 1 

FIELD'FIRST is 0 
FIELD' LAST is 20 

The range bounds for subtypes declared in packages DIRECT_I0 are: 

COUNT'FIRST is 0 

COUNT' LAST is INTEGER' LAST 

POSITIVE_COUNT' FIRST is 1 
POSITIVE_COUNT' LAST is COUNT' LAST 

5.9.5. Ordinal Types 

Ordinal types are supported via a separate package, which is included with (he standard packages. Package 
Ordinal_Support provides support for unsigned arithmetic, including functions which convert between 
Integer and Ordinal types, and a complete set of Ordinal arithmetic operations. The specification of package 
Ordinal_Support may be found in the appendix. 



USER MANUAL FOR TARTAN ADA VMS 960 


5.9.6. Values of Floating-Point Attributes 

Tartan Ada supports the predefined floating-point types FLOAT, L0NG_FL0AT, and EXTENDED_FLOAT. 
Attribute Value for FLOAT 

DIGITS 6 


MANTISSA 21 

EMAX 84 


EPSILON 

approximately 


16#0.1000 000#E4 
9.536743E-07 


SMALL 

approximately 


16#0.8000_000#E-2l 

2.58494E-26 


LARGE 

approximately 


16#0.FFFF_F80#E+21 
1.93428E+25 


SAFE EMAX 


126 


SAFE_SMALL 1 6#0.2000_000#E-3 1 

approximately 5.87747E-39 


SAFE_LARGE 

approximately 


16#0.3FFF FE0#E+32 
8.50706+37 


FIRST 

approximately 


-16#0.7FFF_FFC#E+32 

-1.70141E+38 


LAST 

approximately 


16#0.7FFF_FFC#E+32 
1.70141E+38 


MACHINE RADIX 


2 


MACKINE_MANTISSA 24 

MACHINE_EMAX 126 

MACHINE_EMIN -126 

MACHINE ROUNDS TRUE 


MACHINE OVERFLOWS 


TRUE 






APPENDIX F TO MIL-STD-1815A 


Attribute 


Value for LONG FLOAT 


DIGITS 

MANTISSA 

EMAX 

EPSILON 

approximately 

SMALL 

approximately 

LARGE 

approximately 

SAFE_EMAX 

?AFE_SMALL 

approximately 

SAFE_LARGE 

approximately 

FIRST 

approximately 

LAST 

approximately 
MACHINE_RADIX 
MACHINE_MANTISSA 
MACHINE_EMAX 
MACHINE_EMIN 
MACHINE ROUNDS 


15 

51 

204 

16#0.4000 0000_0000_000#E-12 
8.881784I970013E-16 

16#0.8000_0000_0000_000#E-51 
1.9446922743316E-62 

16#O.FFFF_FFFF_FFFF_EOO#E+51 
2.5711008708143E+61 

1022 

16#0.2000_0000_0000_000#E-255 

1.1125369292536-308 

16#0.3FFF_FFFF_FFFF_F80#E+256 
4.4942328371557E+307 

-16#0.7FFF_FFFF_FFFF_FE#E+256 
-8.988465674312E+307 

16#0.7FFF_FFFF_FFFF FE0#E+256 
8.9884656743115E+307 

2 

51 

1022 

-1022 

TRUE 


MACHINE OVERFLOWS 


TRUE 




USER MANUAL FOR TARTAN ADA VMS 960 


Attribute 

DIGITS 

MANTISSA 

EMAX 

EPSILON 

approximately 

SMALL 

approximately 

LARGE 

approximately 

SAFE_EMAX 

SAFE_SMALL 

approximately 

SAFE_LARGE 

approximately 

FIRST 

approximately 

LAST 

approximately 
MACHINE_RADIX 
MACHINE_MANTISSA 
MACHINE_EMAX 
MACHINE_EMIN 
MACHINE_ROUNDS 
MACHINE OVERFLOWS 


Value for EXTENDED FLOAT 
18 
61 
244 

16#0.1000 0000_0000_0000_0#E-14 
8.67361737988403547E-19 

16#0.8000.0000 0000_0000_0#E-61 
1.76868732008334226E-74 

16#0.FFFF_FFFF FFFF FFF8 0#E+61 
2.82695530364541493E+73 

16382 

16#0.2000_0000_0000_0000_0#E-4096 
1.68105157155604675E-4932 

16#0.3FFF FFFF_FFFF_FFFF_0#E+4096 
2.97432873839307941E+4931 

-16#0.7FFF_FFFF_FFFF_FFFF_8#E+4096 
•5.94865747678615883E+4931 

16#0.7FFF FFFF_FFFF_FFFF 8#E+4096 
5.94865747678615883E+4931 

2 

63 

16382 

-16382 

TRUE 

TRUE 




APPENDIX F TO MIL-STD-1815A 


5.10. SUPPORT FOR PACKAGE MACHINEjCODE 

Package MACHlNE_CODE provides the programmer with an interface through which to request the genera¬ 
tion of any instruction that is available on the 80960. The Tartan Ada VMS 960 implementation of package 
mach I NE_CODE is similar to that described in Section 13.8 of the Ada LRM, with several added features. Refer 
to appendix A of this manual for the specification for package MACHlNE_CODE. 

5.10.1. Basic Information 

As required by LRM, Section 13.8, a routine which contains machine code inserts may not have any other 
kind of statement, and may not contain an exception handler. The only allowed declarative item is a use clause. 
Comments and pragmas are allowed as usual. 

5.102. Instructions 

A machine code insert has the form TYPE_MARK' RECORD_AGGREGATE, where the type must be one of the 
records defined in package MACHINE_CODE. Package MACHINE_CODE defines four types of records. Each 
has an opcode and zero to 3 operands. These records are adequate for the expression of all instructions provided 
by the 80960. 

5.10.3. Operands 

An operand consists of a record aggregate which holds all the information to specify it to the compiler. All 
operands nave an address mode and one or more other pieces of information. The operands correspond exactly to 
the operands of the instruction being generated. 

5.103.1. Address Modes 

Each operand in a machine code insert must have an Address_Mode_Name. The address modes provided in 
package MACHINE_C0DE provide access to all address modes supported by the 80960. 

In addition, package MACHINE_C0DE supplies the address modes Symbolic_Address and 
Symbolic_value which allow the user to refer to Ada objects by specifying object' ADDRESS as the value 
for the operand. Any Ada object which has the 'ADDRESS attribute may be used in a symbolic operand. 
Symbolic_Address should be used when the operand is a true address (that is, a branch target or the source 
of an LDA instruction). Syinbolic_Value should be used when the operand is actually a value (that is, one of 
the source operands of an ADD instruction). 

When an Ada object is used as a source operand in an instruction (that is, one from which a value is read), the 
compiler will generate code which fetches the value of the Ada object. When an Ada object is used as the 
destination operand of an instruction, the compiler will generate code which uses the address of the Ada object as 
the destination of the instruction. See section 5.10.10 for further details. 

5.10.4. Examples 

The Tartan Ada VMS 960 implementation of package MACHINE_CODE makes it possible to specify 
both simple machine code inserts such as 

two_for.nat'(MOV, (Reg_Lit, 5), (Reg, R5)) 
and more complex inserts such as 
three_format'(MULI, 

(Symbolic_Value, Array_Var(X, Y, 27)'ADDRESS), 

(Lit, 123456), 

(Symbolic_Address, Parameter_l'ADDRESS)) 

In the fust example, the compiler will emit the instruction mov 5, r5. In the second example, the compiler 
will first emit whatever instructions are needed to form the address of Array_Var (X, Y, 27), load the 
value found at that address into a register, load 123456 into a register, and then emit the MULI instruction. If 
Parameter 1 is not found in a reeister. the comoiler will put the result of the multiplication in a temporarv 


USER MANUAL FOR TARTAN ADA VMS 960 


register and then store it to Parameter^.' ADDRESS. Note that the destination operand of the MULI instruc¬ 
tion is given as a Symbolic_Address. This holds true for all destination operands. The various error checks 
specified in the LRM will be performed on all compiler-generated code unless they are suppressed by the 
programmer (either through pragma SUPPRESS, or through command qualifiers). 

5.10.5. Incorrect Operands 

Under some circumstances, the compiler attempts to correct incorrect operands. Three modes of operation 
are supplied for package machine_code: /fixup=none, /fixup=warn, and /fixup=quiet. These 
modes of operation determine whether corrections are attempted and how much information about the necessary 
corrections is provided to the user. /fixup=QUIET is the default. 

In /FIXUP=none mode, the specification of incorrect operands for an instruction is considered to be a fatal 
error. In this mode, the compiler will not generate any extra instructions to help you to make a machine code 
insertion. Note that it is still legal to use ' ADDRESS constructs as long as the object which is used meets the 
requirements of the instruction. 

In /FIXUP=QUIET mode, if you specify incorrect operands for an instruction, the compiler will do its best 
to fix up the machine code to provide the desired effect For example, although it is illegal to use a memory 
address as the destination of an add instruction, the compiler will accept it and try to generate correct code. In 
this case, the compiler will allocate a temporary register to use as the destination of the add, and then store from 
that register to the desired location in memory. 

In /fixup=warn mode, the compiler will also do its best to correct any incorrect operands for an instruc¬ 
tion. However, a warning message is issued stating that the machine code insert required additional machine 
instructions to make its operands legal. 

The compiler will always emit the instruction named in the machine code insert - even if it was necessary to 
fix up all of its operands. In extreme cases this can lead to surprising code sequences. Consider, for example, the 
machine code insert 

Two_Format'(MOV, (Reg_Ind, GO), (Reg_Ind_Disp, Gl, 128)) 

The MOV instruction requires two registers, but both operands are memory addresses. The compiler will generate 
a code sequence like 

Id (g0), gl2 

mov gl2, gl3 

. st gl3, 128(gl) 

Note that the mov instruction is generated even though a LD ST combination would have been sufficient As a 
result of always emitting the instruction specified by the programmer, the compiler will never optimize away 
instructions which it does not understand (such as SENDSERV), unless they are unreachable by ordinary control 
flow. 

5.10.6. Assumptions Made in Correcting Operands 

When compiling in /Fixup= [WARN, QUIET] modes, the compiler attempts to emit additional code to 
move “the right bits’’ from an incorrect operand to a place which is a legal operand for the requested instruction. 
The compiler makes certain basic assumptions when performing these fixups. This section explains the assump¬ 
tions the compiler makes and their implications for the generated code. Note that if you want a correction which 
is different from that performed by the compiler, you must make explicit machine_code insertions to perform 
it. 


For source operands: 

• Symbolic_Address means that the address specified by the 'ADDRESS expression is used as the 
source bits. When the Ada object specified by the ' ADDRESS instruction is bound to a register, this will 
cause a compile-time error message because it is not possible to “take the address’’ of a register. 

• Symbolic_value means that the value found at the address specified by the ' address expression will 
be’ used as the source hits An Ada obiect which is bound to a reeister is correct here, because the contents 



APPENDIX FTO MIL-STD-1815A 


• Label indicates that the address of the label will be used as the source bits. 

• Any other non-register means that the value found at the address specified by the operand will be used as 
the source bits. 

For destination operands: 

• Symbolic_Address means that the desired destination for the operation is the address specified by the 
' ADDRESS expression. An Ada object which is bound to a register is correct here; a register is a legal 
destination on the 960. 

• Symbolic_Value means that the desired destination for the operations is found by fetching 32 bits from 
the address specified by the ' address expression, and storing the result to the address represented by the 
fetched bits. This is equivalent to applying one extra indirection to the address used in the 
Symbolic__Address case. 

• All other operands are interpreted as directly specifying the destination for the operation. 

Table 5-1 below describes the correction attempted for each possible instruction-operation combination. The 
actions shown in the table have the following meanings: 

Load to Register 1 The operand given represents a memory location, but the instruction requires a register. 

The operand is used as a source. The compiler wil\ load from the operand to a tem¬ 
porary register. 

Load to Register 2 The operand given represents a register, but the instruction requires a memory location. 

The operand is a destination. The compiler will store the result value to a scratch 
memory location, and then load it into the specified register. 

Store to Memory 1 The operand given represents a register, but the instruction requires a memory location. 

The operand is a source. The compiler will store the value to a scratch memory location 
so that it will be in the proper place for the instruction. 

Store to Memory 2 The operand given represents a memory location, but the instruction requires a register. 

The operand is a destination. The compiler will allocate a scratch register, use that as 
the destination for the instruction, and then store the result value to the specified 
memory address. 

Store to Memory 3 The operand given is not the address of a label. The operand will be stored to a scratch 
memory location, and then used as the indirect branch target. 

Error 1 The only incorrect operand for the source of an LDA is a register. It is not possible to 

take the address of a register on the 960. 


Error 2 The operand must be a Label'Address. 


Inst 

Opndl 

Opnd2 

Opnd3 

addo, addi, addc, addr, 
addrl 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

alterbit 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

and, andnot 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

atadd 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

atanr, atanrl 

Load to Register 1 

Load to Register 1 

Store to Memory 2 

atmod 

Load to Register 1 

Load to Register 1 

Store to Memory 2 


Table 5-1: Machine_Code Fixup Operations 

































USER MANUAL FOR TARTAN ADA VMS 960 



divo, divi, divr, divrl 


Opndl 


Error 2 


Store to Memory 3 


Error 2 


Store to Memory 3 


Load to Register 1 


Error 2 


Error 2 


Load to Register 1 


Store to Memory 3 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 (64 
bits) 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Opnd2 


Opnd3 



Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 (64 
bits) 


Store to Memory 2 


Store to Memory 2 (64 
bits) 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 



Load to Register 1 


Error 2 



Store to Memory 2 



Store to Memory 2 


Store to Memory 2 


TnM. C t. 




































































































APPENDIX F TO MH.-STD-1815A 



dmovt 



expr, exprl 


FAULT IF 


inspacc 


LOAD 


ldtime 


logbnr, logbnrl 


logepr, logeprl 


logr, logrl 


mark 


modac 


mcK-’l 


modify 


modpc 


modtc 


MOVE 


movqstr, movstr 


mulo, muli, mulr, 
mulrl 


notand 


Opndl 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Opnd2 


Store to Memory 2 


Load to Register 1 


Opnd3 


Store to Memory 2 


Load to Register 1 (64 I Stare to Memory 2 (64 


Store to Memory 2 (64 
bits) 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Load to Register 1 Load to Register 1 





Load to Register 1 


Store to Memory 1 


Error 1 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register I 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Load to Register 1 



Load to Register 1 Load to Register 1 



Load to Register 1 


Load to Register I 


Load to Register I 


Load to Register 1 


Load to Register 1 


Load to Register I 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Table 5-1: Machine_Code Fixup Operations 













































































































USER MANUAL FOR TARTAN ADA VMS 960 



or, omot 


remo, remi, remr, 
remrl 


resumprcs 


Opndl 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


roundr, roundrl 


saveprcs 


scaler, scalerl 


scanbit 


scanbyte 


schedprcs 


sendserv 


SHIFT 


signal 


sinr, sinrl 


spanbit 


sqrtr, sqrtrl 


STORE 


subo, subi, subc, subr, 
subrl 


syncf 


synld 


synmov, synmovl, syn- 
movq 


tanr, tanrl 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register I 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Opnd2 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Load to Register 1 



xnor, xor 


Load To Register 1 


Load to Register 1 


Store to Memory 2 


Load to Reg 1 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Load to Register 1 


Load to Register 1 


Load to Register 1 


Store to Memory 2 


Store to Memory 2 


Store to Memory 2 


Load To Register 2 


Load to Register 1 


Load to Register 1 Store to Memory 2 


Load to Register 1 


Store to Memory 2 


Opad3 


Store to Memory 2 


Store to Memory 2 





Load to Register 1 Store to Memory 2 _ 



Table 5-1: Machine_Code Fixup Operations 

































































































APPENDIX F TO MTL-STD-1815A 


5.10.7. Register Usage 

Since the compiler may need to allocate registers as temporary storage in machine code routines, there are 
some restrictions placed on your register usage. The compiler will automatically free all the registers which 
would be volatile across a call for your use (that is, g0..g7, gl3, and gl4). If you reference any other register, the 
compiler will reserve it for your use until the end of the machine code routine. The compiler will not save the 
register automatically. This means that the first reference to a register which is not volatile across calls should be 
an instruction which saves its value in a safe place. The value of the register should be restored at the end of the 
machine code routine. This rule will help ensure correct operation of your machine code insert even if it is inline 
expanded in another routine. 

The compiler may need several registers to generate code for operand fixups in machine code inserts. If you 
use all the registers, fixups will not be possible. If a fixup is needed, the compiler may require up to three 
registers to guarantee success. In general, when more registers are available to the compiler it is able to generate 
better code. 

5.10.8. Inline Expansion 

Routines which contain machine code inserts may be inline expanded into the bodies of other routines. This 
may happen under programmer control through the use of pragma INLINE, or at Optimization Level 3 when the 
compiler selects that optimization as an appropriate action for the given situation. The compiler will treat the 
machine code insert as though it was a call; volatile registers will be saved and restored around it, etc. 

5.10.9. Unsafe Assumptions 

There are a variety of assumptions which should not be made when writing machine code inserts. Violation 
of these assumptions may result in the generation of code which does not assemble or which may not function 
correctly. 

• Do not assume that a machine code insert routine has its own set of local registers. This may not be true if 
the routine is inline expanded into another routine. Explicitly save and restore any registers which are not 
volatile across calls. If you wish to guarantee that a routine will never be inline expanded, you should use 
an Ada separate body for the routine and make sure that there is no pragma INLINE for it. 

• Do not attempt to move multiple Ada objects with a single long instruction such as MOVL or STT. 
Although the objects may be contiguous under the current circumstances, there is no guarantee that later 
changes will permit them to remain contiguous. If the objects are parameters, it is v rtually certain that 
they will not be contiguous if the routine is inline expanded into the body of another routine. In the case of 
locals, globals, and own variables, the compiler does not guarantee that objects which are declared tex- 
tually “next” to each other will be contiguous in memory. If the source code is changed such that it 
declares additional objects, this may change the storage allocation such that objects which were previously 
adjacent are no longer adjacent 

• The compiler will not generate call site code for you if you emit a call instruction. You must save and 
restore any volatile registers which currently have values in them, etc. If the routine you call has out 
parameters, a large function return result, or an unconstrained result, it is your responsibility to emit the 
necessary instructions to deal with these constructs as the compiler expects. In other words, when you emit 
a call, you must follow the linkage conventions of the routine you are calling. For further details on call 
site code, see Sections 6.4,6.5 and 6.6. 

• Do not assume that the 'ADDRESS on Syrnbolic_Address or Symbolic_Value operands means 
that you are getting an ADDRESS to operate on. The Address- or Value-ness of an operand is determined 
by your choice of Symbolic_Address or Symbolic_Value. This means that to add the contents of 
x to r3, you should write 

Three_Format'(ADDI, (Symbolic_Value, X'ADDRESS), 

(Reg, R3), (Reg, R3)); 

ViMf to aHrl fhp nrlflrec c of V to rX van chottlH n^rttp 



USER MANUAL FOR TARTAN ADA VMS 960 


Three_Format'(ADDI, (Symbolic_Address, X'ADDRESS), 

(Reg, R3) , (Reg, R3)); 

• The compiler will not prevent you from writing register r3 (which is used to hold the address of the current 
exception handler). This provides you the opportunity to make a custom exception handler. Be aware, 
however, that there is considerable danger in doing so. Knowledge of the details on the structure of 
exception handlers will help; see the Tartan Ada Runtime Implementor’s Guide. 

5.10.10. Limitations 

• When specifying absolute addresses in machine.code inserts, please note that the compiler will treat 
addresses as an integer type. This means that specifications of addresses may raise arithmetic overflow 
errors; i.e., addresses must be in the range INTEGER'FIRST..integer' last. To represent an 
address greater than integer' LAST, use the negated radix-complement of the desired address. For 
example, to express address 16#C000_0 00, specify instead -16#4000_000. 

• The current implementation of the compiler is unable to fully support automatic fixup of certain kinds of 
operands. In particular, the compiler assumes that the size of a data object is the same a' the number of 
bits which is operated on by the instruction chosen in the machine code insert This means that the insert 

Three_Format' (ADDO, (Symbolic_Value, Byte_Variable'ADDRESS), 

(Reg, R0), (Reg, R1)) 

will not generate correct code when Byte_Variable is bound to memory. The compiler will assume 
that Byte_Variable is 32 bits, when in fact it is only 8, and will emit an LD instruction to load the 
value of Byte_variable into a register. If, on the other hand, Byte_Variable was bound to a 
register the insertion will fur rtion properly, as no fixup is needed. 

• The compiler generates incorrect code when the BAL and BALX instructions are used with symbolic 
operands which are not of the form Routine' ADDRESS. To get the effect of an unconditional branch, 
use the B or BX instructions instead. 

• Note that the use of X' ADDRESS in a machine code insert does not guarantee that x will be bound to 
memory. This is a result of the use of' ADDRESS to provide a “typeless” method for naming Ada objects 
in machine code inserts. For example, it is legal to say to (Symbolc_valus, x'ADDRESS) in an 
insert even when x is a formal parameter of the machine code routine (and is thus found in a register). 

5.10.11. Example 

package mtest is 

type ary_type is array(1..4) of integer; 

procedure inline_into_me; 
enc mtest; 


witr. machme_code; 
use machine_code; 
package body mtest is 

own_va- : integer := -1; 

procedure mach_test(x, y, z: in integer; ary: in out ary_type) is 
begin 

— The next instruction is only OK if this routine is not INLINED. 

— If the routine is inlined; there is no guarantee that parm X will 

— be either A) in an even numbered register, or B) "next to" parm 
— Y. If the programmer uses an instruction like MOVLp here, he is 

— assuming too much about the generated code; his program is 

— erroneous. On the other hand, the use of x'ADDRESS does guarantee 

— that the instruction will use X even when this routine is inline 


APPENDIX F TO MIL-STD-1815A 


Two_Format' (MOVL, (Symbolic_Value, x'ADDRESS), (Reg, G6) ) ; 

Two_. ormat'(MOV, (Symbolic_Value, x'ADDRESS), (Reg, G6)); 

Two_Format'(MOV, (Symbolic_Value, y'ADDRESS), (Reg, G7)); 

Two_Format'(MOV, <Symbolic_Value, z'ADDRESS), (Reg, G8)); 

Three_Format' (ADDI, (Symbolic_Value, x'ADDRESS), (Reg, G8), (Reg, G1> >; 


Three_Format'(MULI, 

(Reg, G7), 

(Symbolic_Value, y'ADDRESS), 
(Reg, G12)); 


— Note the use of a complicated Ada object i this instruction. 
Two_Format'(ST, 

(Reg, G12), 

(Symbolic_Address, ary(1)'ADDRESS)); 


— In this instruction, note that ary(1)'ADDRESS is NOT kept in a 

— register and is thus NOT a legal source for XORp. That's OK, 

— because the compiler can fix it up for the user. 

Three_Format'(XORi, (Symbolic_Value, ary(1)'ADDRESS), 

(Symbolic_Value, ary (?)'ADDRESS), (Reg, G12)); 

Two_Format'(ST, 

(Reg, G12), 

(Symboiic_Address, ary(3)'ADDRESS)); 


Two_Format'(ST, 

(Reg, G12), 

(Symbolic_Address, ary(x)'ADDRiSS)); 
Two_Format'(ST, 

(Reg, GO), 

(Symbolic_Address, own_var'ADDRESS)); 


Two_Format'(LDA, 

(Symbolic_Value, own_var'ADDRESS), 
(Reg, G14) ); 


One_Format'(CALLX, (Symbolic_Address, inline_into_me'ADDRESS)); 
end mach_test; 
oragma inline(nach_test); 

procedure mtestl(first, second, third: ir. integer; fourth: out ary_type) is 
begin 


— Note the use of fourth(l)'ADDRESS as the destination of the MOV 

— instruction. The compiler will understand that the user "really 

— wanted" something moved to fourth(1)'ADDRESS, and will make sure 

— that the bits get there. The compiler does NOT assume that it 

— knows enough to second guess the user's choice of instructions. 

— we generate the MOV, followed by a store to memory. 

Two_Format'(MOV, 

(Symbolic_Value, First'Address), 

(Symbolic_Address, fourth(1)'ADDRESS)); 

end mtestl; 

procedure inline_into_me is 

arrayl : ary_type := (1, 2, 3, A); 
begin 

if arrayl(3) >= 0 then 

— note that mach_test is inline expanded 
mach_test(22, 41, arrayl(4), arrayl); 

else 

— but mtest is not at 0p=2 (No praam--' inline) 
mtestl (1, 2, 3, arrayl); 


USER MANUAL FOR TARTAN ADA VMS 960 


end iniine_intc_me; 
end mtest; 




APPENDIX F TO MIL-STD-181SA 


Assembly code output: 

# Generated from USER01:[SMITH1MTEST.ADB;1 

# by TARTAN Ada Compiler VMS 80960MC, Version Pre-Release 

.data 


.align 2 

ADA.OWN: .space 4 

.align 2 

ADA.GLOBAL: .space 1 

.giobl xxmtest$inline_into_me$00 
.globl xxmtestSdeclare 
.giobl xxmtestSbody 

.seto own_var$00,ADA.0WN,0 

.globl xxmtesrSinline_into_me$gotoSOO 

.seto xxmtestSinline_ir.no meSgotoSOC,ADA.GLOBAL,0 


. text 


.align 4 

xxmtestSiniine into meSOO: 


mov 

0, r3 

St 

so,40(sp) 

Ida 

4*0 (so), sp 

St 

gl2,100(fp) 

Ida 

.L19,r3 

mov 

1,gl3 # 

St 

gl3, 80(fp) 

mov 

2,gl3 

St 

gl3, 84(fp) 

mov 

3, gl3 

St 

gl3, 88(fp) 

mov 

4,gl3 

St 

gl3, 92(fp) 

idq 

80(fp),g4 

stq 

g4,64(fp) 

id 

72(fp),gl3 

cmpibg 

0, gl3,.L17 

id 

76(fp),g!3 

mov 

22,r4 

addo 

31,10,r5 

mov 

gl3,r6 

Ida 

64(fp),r8 

ir.ovi 

r4,g6 

mov 

r4,g6 

mov 

r5,g7 

mov 

r6, g8 

aadi 

r4,g8,gl 

mull 

g7, r5,g!2 

St 

gl2, 96(fD) 

id 

96(fp),gi3 

St 

gl3,(r8) 

id 

4 <r8),r7 

xor 

g!3,r7,gl2 

St 

gl2,8(r8) 

subi 

1,r4,gl3 

cmoo 

o! 3. 3 


* 

* 


« 


line 74 


line 76 


line 78 


line 46 




USER MANUAL FOR TARTAN ADA VMS 960 


fau^tc 




sc 

g!2,-4(r8)(r4*4] 



st 

gO. ADA.OWN 



Ida 

ADA.OWN,g!4 



cailx 

xxmtestSinline into 

_me$00 


D 

.L19 # 

line 

76 

mov 

l.go t 

line 

81 

mov 




mov 

3, a2 



laa 

64(fp),g3 



oai 

mtestlSOO 



Id 

100(fp),gl2 



ret 




oytes 

of code in the above 

routine = 

216 

.align 

4 




mach_testS0C: 

mov 0,r3 

St sp,8(sp) 

aaco 8,sp,sp 

sc gl2,68(fp) 

Ida ,L21,r3 

movi g0,g6 

mov g0,g6 

mov gi,g7 

mov g2,g8 

addi g0,g8,gl 

mull g7,gi,g!2 

st. gl2, 64 (fp) 

la 64{fp),gl3 

st gl3,(g3) 

id ■ 4(g3),g5 

xcr gi3,g5,g!2 

st gi2,8(g3) 

subi I,g0,gl3 # 

ql3, 3 

gi2,-4(c3) ig0*4] 
gC, . OWN 

ADA.OWN,g!4 

xxmcestSmline into mefOO 


is 68(fp),g!2 

ret 

* Total oytes of code in the acove routine 

.align 4 

mtviSt.SCO: 

mov g!4,g4 

mov 0,g 14 

mov g0,gl3 

st g!3,(g3) 


cmpo 



line 46 


124 


APPENDIX F TO MIL-STD-1815A 


# Total oytes of code in the above routine = 20 

.align 4 
xxrctestSdeclare: 

stob g14,ADA.GLOBAL 

ret 

# Total bytes of code in the aoove routine = 12 

.align 4 
xxmtestSbody: 

not 0,gl3 # line 5 

st g!3,ADA.OWN 

mov l,gl3 

stcb gl3,ADA.GLOBAL 

ret 

# Total bytes of coc.e in the above routine = 28 

.text 

.align 2 
.align 2 

# Total bytes of code = 400 

# Total bytes of data = 5 








