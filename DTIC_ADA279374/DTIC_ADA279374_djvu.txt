AD-A279 374 tationpage 


FomAfipmvad 

OPMNo. 


•Ufll 

2221. — 



■rig* 1 hour par rMponio, including tha lima tor r auiaar i ng inatnrcliant. aaarehing aiiating data touroaa gathariry 
w. Sand oommanla ragaiding ihia butdan aalimtoa or any othar aapaol ol Ihia ao l lae l ion e> intormation, indudirrg 
I. Diraolortoa tor Mormtoion Oparaltorta and Raportt, 1216 Jaltotaon Oavia Highway. Suha 1204, Arlington. VA 
■ wiiisB Of anormaiian and Ragutotory AHaira. Oflioa of Managamanl and Budgal. Waahingion, DC 20603. ' 


(Leave 



kr I - Le AJa ./ b. , • 


5. FUNDING 




Po.'H'ccso/iF6 yF^o>lji"o'^ oH 

I . J 


7. PERFORMING ORGANIZATION NAME(S} AND 

lOr-; ■ P-A-VV^-f ^<5 0 ^FP. 

fcKc'>\'^y 

i.Ar\Awu^at Coo+r=>i 

Vo^Ao? . O H ^5^33 _ 

9. SPONSOhiNG/ivlONITORINQ AGENCY NAME(S) AND 

Ada Joint Program Office ^ 

The Pentagon, Rm 3E118 V 

Washington, DC 20301-3080 


94-14199 

■ •■ii <a«i 


11. SUPPLEMENTARY 



1 


V 

4 




G 


* to». wr wnaouMING'MONITORiNG 
AGENCY 




12a. DISTRIBUTION/AVAILABILITY 

for 


Uri 11 p^, 1 leJl . 


“foe t I \ ^L>S^ J Sis-^c f 



(Maximum 200 




^i/p* •• ‘7 ‘iozn^-^i~5si 


14. SUBJECT ^ruc. C C\ »v-) /-v^. rs/^ 

f?<p6'-T-y C<,rv,p,ler \/k1, 

AIa v/aI. /rO 


SK/^Orr^ :)^r y 

).+y ko^i. i/oj, 

fro.TL-yrC’- ltlS(\ ^ /5jpo 


17. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFIED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


DTIC QUAjujix » ii. .j. J j_ D 1 


15. NUMBER OF 


16. PRICE 


20, LIMITATION OF 

UNCLASSIFIED 


ndardPorm 
PrMoribed by ANSI Ski. 


K£)l 


94 5 II 



















AVr Control Number: AVF~VSR-583.0494 
Date VSR Completed: 18 April 1994 

94-03-11-SWL 


Ada COMPILER 
VALZEATION SUMMARY REPORT: 
Certificate Number: 940411W1.11355 
Software Leverage, Inc. 
Parallel-Leveraged Ada, 6.1.0.2 
Sequent Symmetry S27 under DYNIX/ptx, 1.2 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB (M 45433-5707 






Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 11 April 1994. 


Compiler Name and Version: 
Host Computer System: 

Target Ccmputer System: 
Custcxner Agreement Number: 


Parallel-Leveraged Ada, 6.1.0.2 

Sequent Symmetry S27 
under DYNIX/ptx, 1.2 

Same as host 

94-03-11-SWL 


See section 3.1 for any additional information about the testing environment. 

^ a result of this validation effort, Validation Certificate 940411W1.11355 
is awarded to Software Leverage, Inc. This certificate expires two years 
after MIL-STT>-1815B is approved by ANSI. 


This report has been reviewed and is approved. 





Validation 
Dale E. Lange 
Technical Director 


Facility 


ty 


645 CCSG/SCSL 
Wright-Patterson AFB <» 


45433-5707 






Certificate Infonoation 


Ihe following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was conpleted on 11 i^ril 1994. 

Conpiler Name and Version: Parallel-Leveraged Ada, 6.1.0.2 

Host Ccmiputer System: Sequent Symmetry S27 

under DYNlVjptx, 1.2 

Target Ccm^ter System: Same as host 

CustcMRier Agreement Number: 94-03-11-5WL 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940411W1.11355 
is awarded to Software Leverage, Inc. This certificate expires two years 
after MIL-STT^-ISISB is a^^roved by ANSI. 









DECLARATION OF CONFORMANCE 


Customer: Software Leverage, Inc. 

Ada Validation Facility: CTA Incorporated 

5100 Springfield Pike Suite 100 
Dayton, Ohio 45431 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Parallel-Leveraged Ada Version 6.1.0.2 
Host Computer System: Sequent Symmetry S27 running DYNIX/ptx 1.2 

Target Con^uter System; Sequent Symmetry S27 running DYNIX/ptx 1.2 

Customer's Declaration 

I, the undersigned, representing Software Leverage, Inc., declare that 
Software Leverage, Inc. has no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A in the implementation listed in 
this declaration. I declare that the Software Leverage, Inc. is the OWNER 
of the above implementation and the certificates shall be awarded in the 
name of Software^ Leverage Inc.'s corporate name. 

Date: 



Mike Gilbert, President 
Software Leverage, Inc. 
411 Waverley Oaks Road 
Waltham, MA 02154-8414 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES .1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

f 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i 



















CHAPTER 1 


INTRCXJUCTION 


The Ada inpleinentation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
current Ada Conf)iler Validation Capability (ACVC). Iliis Validation Sunsnary 
Report (VSR) gives an accomt of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to [Pro921. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF TOIS VALIDATION SUMMARY REPC»T 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make fixll and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation aj^ly only 
to the conputers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public ttfm the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF >^ich performed this validation or to; 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 











iNmaxxrriON 


1.2 REFERESKTES 

[AdaSS] Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Conpiler Validation Procedures » Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 Jxjne 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada implementations is tested by meeuis of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes:^ A, 
B, C, D, E, and L. The first letter of a test name identifies the class' to 
- vhich it belongs. Class A, C, D, and E tests are executable. Class B and 

class L tests are expected to pro^ce errors at conpile time and link time, 
respectively. 

The executable tests are written in a self-checking manner eind produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vhen they are 
executed. Three Ada library units, the packages REP^ff and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions us^ to defeat scxne conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_PILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a ccnpiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is cottpiled and the 
resulting compilation isting is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the coopiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In soxne tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provid^ in Appendix A. In 
addition to these anticipated test modifications, aoiditional changes may be 
reojuired to remove \inforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications reojuired for 
this implementation are described in section 2.3. 


1-2 








INTRODUCTION 


For each Ada inplementation, a custcmzed test suite is produced by the AVF. 
This custcnnization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
custcmdzed test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host ccxiputer system and its 

Implementation target computer system. 

Ada Joint The part of the certification loody vhich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vrtiich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guideuice for operations of the Ada certification system. 

Orgainization 
(AVD) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer 
System 


A functional unit, consisting of one or more computers and 
associated software, that uses conmion storage for all or part 
of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A ccmputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 






INTROOUCTICN 


Conformity 


Custcmier 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Ccm^ter 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdravm 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an agreement 
with an AVF vAiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inplementation for which 
validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANS1/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

A conpiter system vdiere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada inplementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration {Pro92J. 

Ihe process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 







C31APTER 2 


IMPLEMEmATICN DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


2.2 


B27005A 

C35507L 

C35508M 

C43004A 

C45651A 

A74006A 

C83026A 

C97116A 

CC1223A 

AD1B08A 

CD2A41E 

CD4022D 

CD5111A 

AD7201A 

CD9005A 

CE2119B 

CE3411B 

CE3814A 


E28005C 

C35507N 

C35508N 

C45114A 

C46022A 

C74308A 

B83026B 

C98003B 

BC1226A 

BD2A02A 

CD2A87A 

CD4024B 

CD7004C 

AD7201E 

CD9005B 

CE2205B 

CE3412B 

CE3902B 


B28006C 

C35507O 

C35702A 

C45346A 

B49008A 

B83022B 

C83041A 

BA2011A 

CC1226B 

CD2A21E 

CD2B15C 

CD4024C 

ED7005D 

CD7204B 

CDA201E 

CE2405A 

CE3607B 


C32203A 

C35507P 

C35702B 

C45612A 

B49008B 

B83022H 

B85001L 

CB7001A 

BC3009B 

CD2A23E 

BD3006A 

CD4024D 

CD7005E 

AD720SA 

CE2107I 

CE3111C 

CE3607C 


C34006D 

C355081 

C37310A 

C45612B 

A54B02A 

B83025B 

C86001F 

CB7001B 

BD1B02B 

CD2A32A 

BD4008A 

CD4031A 

AD7008A 

BD8002A 

CE2117A 

CE3116A 

CE3607D 


C35507K 

C35508J 

B41308B 

C45612C 

C55B06A 

B83025D 

C94021A 

CB7004A 

BD1B06A 

CD2A41A 

CD4022A 

CD4051D 

CD7006E 

U>B004C 

CE2117B 

CE3118A 

CE3812A 


INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Ccmimentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






INPLENENIATIQN DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..2 (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


Hie following 20 tests check for the predefined type L0NG_1NTEGER; for 
this implementation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C C45411C 
C45504C C45504F 
C45631C C45632C 
B86001W C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type LONG_FLOAT; 

for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
, name other than FLOAT, LONG_FLQAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 








IHPLENEinATIGN DEPQ^ENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), amd CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not su{^rt such sizes. 

Ihe tests listed in the following table check that USE ERROR is raised 
if the given file operations are not supported for the gTven ccnnbination 
of mode and access method; this implementation su{^rts these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

direct 10 

CE21021 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

opoa 

C30T FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPE34 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102P 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE31021 

CREATE 

OUT FILE 

'i’EXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPE3^ 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE ERROR if the capacity of an 
external sequential file is exceededT this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LE34GTH and SET PAGE_LeX3TH raise USE_ERROR 
if they specify an inacproprTate value for Bie external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAl^ raises lAYOUT^ERROR \dien the value of the page 
nundser exceeds OOUNT'LAST; for this inplementation. the value of 
COUNT'lAST is greater than 150000, making the checking o£ this objective 
inpractical. 


2-3 








IMPLENEtnATIGN DEPENDEITCIES 


2.3 TEST NCX)IFICATIC»S 

Ncxlifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
in^lementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B3e003B B3e009A B38009B 

B85008G B85008H BAlOOlA BC1303F BC3005A BD2B03A 

BD2D03A BD4003A 

A^580lE was graded inapplicable by Evaluation Modification as directed by the 
AVO. The conf>iler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe nundters (cf. LRN 3.5.7:12). 

CD1009A, CD1009I, CDICOIA, and CD2A31A. .C were graded passed Evaluation 

- Modification as directed by the AVO. Ihese tests tise instantiations of the 
sup^rt procedure LENGTH CHEOt, vAiich uses Unchec)ced Conversion according to 
the interpretation given Tn AI-00590. The AVO ruled B>at this interpretation 
is not binding under ACVC 1.11; the tests are niled to be passed if they 
produce Failed messages only from the instances of LENGTH_CHECK—i.e, the 
allowed Report.Failed messages have the general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 








aiAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada iraplenentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sharon Hayward 
Software Leverage, Inc. 

411 Waverly Oaks Road 
Waltham, MA 02154-8414 
(617) 894-3399 


Testing of this Ada inqplementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the A^ 
Implementation fails the ACVC [Pro92]. 

For air processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Progranning Language Standard. 

The list of items lielow gives the nxonber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximium precision (item e; see 
section 2.2), and those that deperxi on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, Iselow). 


3-1 










PROCESSING INFQRMATIGN 


a) Total Nundser of ^splicable lasts 3796 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 69 

d) NOn-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (C4d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a-t-b^f) 


3.3 TEST EJffiCUTlON 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada ioplementation. 

The tests were conpiled, linked and executed on the host conpu'-/ system. 
The results were captured on the host ccmputer system. 

Testing was performed using ccmmand scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options which were invoked explicitly for validation testing during 
this test. 

Test output, ccmpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This a^^ndix contains the macro parameters used for customizing the ACVC. 
Ihe meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vriiich is 
the value for $HAX_IN LBf —also listed here. These values are expressed here- 
as Ada string aggregal^es, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG__ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_1D2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 «> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> »A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLAMKS 

(1..V-20 -> ' ") 


$MAX_LEN_INT_BASED_LITERAL 

"2;" & U..V-5 -> '0') & "11:" 

$MAX LEM_REAL_BASED_LZTERAL 

"16;" & (1..V-7 -> 'OM & "F.E:" 


A-1 









MACRO PARAHETEBS 


$MAX_STRING_LITERAL 4 (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 



$ACC_SIZE 

32 

$ALIGNHENT 

4 

$COONT_LAST 

2147483647 

$DEFAULT_MEM_SI2E 

26843S456 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

SYMMETRY_PTX 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTHY_ADDRESS 

SYSTEM."+" (2) 

$QJTRY_AM5RESS1 

SYSTEM.(3) 

$ENTRy_ADDRESS2 

SYSTEM."+" (18) 

$FIELD_LAST 

2147483647 

$FILEjrERMINATOR 

» » 

$FIXED_NAHE 

Nq_SUCH_TYPE 

$FLCAT_NAME 

Nq_SUCH_TYPE 

$PORM_STRING 

nn 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$(a^TER THAN DURATION 


100000.0 

$GREATER THAN DURATION BASE LAST 

T0000700.0 

$CStEATER THAN FLOAT BASE LAST 

I.FE+308 

$GREATER THAN FLOAT SAFE LARGE 

~ “ s.Ueso? 


A-2 








MACRO PARAMETERS 


$GREATER THAN SHC»T FLOAT SAFE LARCX 

“ 9.0E37 ~ 

$HIGH_PRIORITY 99 

$IUiEGAL_E3CITaQ«^L_FIU;_NAMEl 

/ille 9 al/£ile_naine/ 2 ) l%2102c.dat 

$ILLEGAL_EXTERNAL_F1LE_NANE2 

/ille9al/£ile_naiDe/CE2102c* .dat 

$1NAPPR0PRIATE LINE LENGTH 

“ -1 

$INAPPROPRIATE PAGE LENGTH 

“ -1 


$INCLUDE_PRAGNA1 

PRAGMA INCLUDE ("A28006D1 

$INCLUDE_PRAGHA2 

PRAGMA INCLUDE ("B28006D1 

$INTEGER_FIRST 

-2147483648 

$INTEGER_LAST 

2147483647 

$INTEGER_LAST_PLUS__1 

2147483648 

$INI^RFACE_LANGUAGE 

C 

$LESSJIHAN_DORATION 

100000.0 

$LESS THAN DURATION BASE FIRST 

lOlTOOOOO.O 

$LINE_TERMINATOR 

ASCII.LF & ASCII.FF 

$LOW_PRIORIlY 

0 

$MACHINE CODE STATEMENT 

CCX)E_0' (OP -> NOP) 

$MACHINE_aX)E_TYPE 

CC©E_0 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2147483648 

$M1N_INT 

-2147483648 

$NAME 

TINY INTEGER 


A-3 








macro parameters 


$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICAT1QN2 

$NAME_SPECIFICAT10N3 

$NEG_BASED_INT 

$NEM_MEM_SIZE 

$NEW_ST0R_UN1T 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$REOORD_DEFINITIGN 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VAR1ABLE_ADDRESS 

$VAR1ABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOOR_PRAGMA 


SYMMETRy_PTX 

/het/pr jl/Tpla61/Tpara-view/acvc-l. 
/net/prjl/pla61/para-view/acvc-l. 
/het/pr jl/pla61/para-view/acvc-l. 
16#F000000E« 

268435456 

8 

SyMMETRY_PTX 
ASCII.FF 

RECORD SUSP: OPERAND; END RECORD 

CALL_0 

32 

1024 

0.01 

FCNDECL.VAR_ADDR 
FCNDECL. VAR_AK)R1 
FCNDECL.VAR_AI»R2 
PASSIVE 


ll/ce/X2120A 

ll/ce/X2120B 

ll/ce/X3119A 





APPEl^lX B 


COMPILATION SYSTEM OPTIONS 


The ccxnpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 


ada - invoke the Ada compiler 
SYNTAX 

ada Ioptions] (source_file]... Iobject_file.o]... 

OPTIONS 

-a filejname (archive) Treat file name as an object 

archive file created~by ar. Since some archive 
files end with .a, >a is used to distinguish 
archive files from Ada source files. 

-A (disassemble) disassemble the units in the source file 
after compiling them. -A can be followed arguments that 
further define the disassembly display (e.g. -Aa, -Ab, -Ad, 
-Af, -Al, -As); 

a add hexadecimal display of instruction bytes to 
disassembly listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file_name.das'' 

s disassemble the unit spec 

-D identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA 
PREPROCESSOR REFERENCE. 

-d (dependencies) Analyze for dependencies only. Do not 
do semantic analysis or code generation, up^te the 

B-1 












COMPIIATICN SYSTEM OPTIONS 


library, marking any defined \inits as unccxnpiled. The 
-d option 's us^ by a.make to establish dependencies 
among new files. 

-e (error) Process con^ilation error messages using a.error 
and send it to stan^rd output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 


-E 

-E file 

-E directory (error output) Without a file or directory 

argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname 
is given, the raw error messages are placed in that file. 
If a directory argument is supplied, the raw error output 
is placed in dir/source.err. The file of raw error 
messages can be used as input to a.error. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file, and call the environment 
editor EBBOR_EDITC}R. (If ERRO R_EDI TOR is defined, the 
environment variable ERROR_PATTERN should also be defined. 
ERROR_PATTERN is an editor search coimand that locates the 
first occurrence of '###' in the error file.) If no editor 
is specified, vi(l) is invoked. 

-F (f\ill DIANi^) Do not trim the DIANh tree before outpuit to 
net files, to save disk space, the DIANh tree will be 
trinmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled (unless 
those nodes are part of the body of an inline or generic or 
certain other values needing to be retained for the debugging 
or compilation information). The trimming generally removes 
initial values of variables and all statements. 

-K (keep) Keep the intermediate langiiage (IL) file produced 
the compiler front end. The IL file will be placed in the 
.objects directory, with the file name Ada_source. 

-L libraryjname (library) Operate in VADS library libraryjiame. 

[Defaxilt: current working directory] 

-lfile_abbreviation (library search) This is an option passed to 

the ld(l) linker telling it to search the 








COMPILATION SYSTEM OPTIONS 


specified library file. (No space between 
the -1 and the file abbreviation.) (self-host 
only) 

For a description of the file abbreviations, 
see also Operating System documentaticm, 
ld(l). 

-M unit_naine (main) Produce an executable program by lin)cing 

the nioned unit as the main program, unitjname must 
already be coopiled. It must be either a 
parameterless procedure or a parameterless 
function returning an integer. The executable 
program will be named a.out (self-hosted) or a.vox 
(cross-development) tmless overridden with the -o 
option. 

-M source_file (main) Produce an executable program by compiling 
and linking source_file. The main unit of the 
program is assumed to be the root name of the 
.a file (for foo.a the unit is foo). Only one 
.a file may be preceded by ~M. Hie executable 
program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with 
the -o opticm. 

-o executable__file (output) This option is to be used in 

“ conjunction with the option, executable file 
is the name of the executidble rather han Bie 
default. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level 
of optimization. The default is -04. 

-0 full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction 

scheduling and one pass of reducing induction 
expressions 

-06 no change and instruction scheduling 
-07 add one more pass of induction expression 
reduction and instruction scheduling 
-08 add one more pass of induction expression 
reduction and instruction scheduling 
-09 add one more pass of induction expression 

B-3 








CX3HP1IATIGN SYSTEM OPTIONS 


reduction, instruction scheduling and hoisting 
expressions comnon to the then and else parts of 
if statements. 

Hoisting from branches (and cases alternatives) can 
be slow and does not always provide significant 
performance gains so it can be suppressed. 

For more information about optimization, see 
COMPILING AEA PROGRAMS, Ccxnpiler Optimizations and 
pragma OPTIMIZE_CODE(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis of 

all generic instantiations, causing 
reinstantiation of any that are out of date. 

-S (su^ress) Apply pragma SUPPRESS to the entire compilation 
for all su{^ressible checks. (See also 
pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not 
’ execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print coa{)iler version number, date and time of 
ccxif}ilation, name of file conpiled, command input line, 
total conpilation time and error summary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

Hie command ada executes the Ada ccxi^iler and cooqpiles the 
named Ada source file, ending with the .a suffix. The file must 
reside in a VADS library directory. Hie ada.lib file in this 
directory is modified after each Ada unit is confiiled. 

By default, ada produces only object and net files. If the 
-H option is used, the conpiler automatically invokes a.Id 
and builds a cooplete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These files 
will be passed on to the linker and will be linked with the 
specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 

B-4 







CXMPIIATION SYSTEM OPTIONS 


to the linker ceun be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada coonand in any VM)S_locatioivbin 
on a system will execute the correct compiler components based 
upon visible library directives, the option -sh is provided to 
print the name of the con^nents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

DIAGNOSTICS 

‘Ihe diagnostics produced by the VAOS compiler are intended to 
be self-explanatory. Most refer to the RN. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 

RELATH) TOPICS 

a.app, a.das, a.db, a.error, a.help, a.Id, a.make, a.map, a.pr 


B-5 







CX3MPILATI0N SYSTEM 0PTIC3NS 


LINKER OPTIONS 

Hie linker options of this. Ada inpleroentation, as described in this Appendix, 
are provided by the custcaner. Unless specifically noted otherwise, 
references in this appendix are to linker docvonentation and not to this 
report. 


a. Id - prelinker 
SYNTAX 

a. Id (options] unit_naine (linker_Qptions) 

OPTIONS 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on seme hosts 
(including Ultrix, HPUX and System V). 

-DX (debug) Delsug memory overflow (use in cases v^ere linking a 
large number of units causes the error message "local symbol 
overflow" to occur). 

-E unit_name (elaborate) Elaborate unit name as early in the 
elaboration o.der as possiEle. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-L library_name (library) Operate in VADS library library_name. 

[Default: current working directory] 

-o executablefile (output) Use the specified file name as the 

name of the output rather than the default 
(a.out (self-hosted) or a.vox 
(cross-development)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-U (units) Print a list of dependent units in order and 
Su(^ress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

(linker options] All arguments after unit^name are passed 

to the linker. These may be options for the 
linker, archive libraries, library abbreviations 
or object files. 





CXDMPILATICW SYSTEM OPTIONS 


DESCRIPTION 

a.Id collects the object files needed to make unit_name a 
main program and calls the ld(l) linker to link together all 
Ada and other language objects required to produce an executable 
image in a.out (self-hosted) or a.vox (cross- development). 
unit_name is the main program and must name a non-generic 
subprogram. If unitjname is a function, it must return a value 
of the type STANDARD. INTEXSER. Ihis integer result %d.ll be passed 
back to the shell as the status code of the execution. Die utility 
uses the net files produced by the Ada conqpiler to check 
dependency information, a.Id produces an exception mapping table 
and a unit elaboration table passes this information to the 
linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no 
longer have exception tzibles. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. Besides 
information generated by the compiler, these directives also 
include WITHn directives that allow the automatic linking of 
object modules conqpiled frcxn other languages or Ada object 
modules not named in context clauses in the Ada source. Any 
number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The 
directives are recorded in the library's ada.lib file and have 
the following form. 

WITHl:LINK:object_file: 

WITH2:LINK;archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the .current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
al^reviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS ccxqpilers to exist on the same 
host. The -sh option prints the name of the actual executz^le 
file. 

FILES AND DIRECTORIES 


B-7 











COMPILATION SYSTEM OPTIONS 


a.out/a.vox defaxilt output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

DIAGNOSTICS 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced 1:^ the Id linker. 

RELATED TOPICS 

ada, a.make, a.info 


B-8 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inqplementation-dependent pragmas/ to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada implementation, as described in this Ajipendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the rv jkage STANDARD, vhich are 
not a part of appendix F, are: 


package STANDARD is 

type INlTXSER is range -2147483648 .. 2147483647; 
type SHORT INTEGER is range -32768 .. 32767; 
type tiny_Tnteger is range -128 .. 128; 

type FLOAT is digits 15 range 

-1.79769313486232E+308 .. +1.79769313486232E+308 

type SHORT_FIiCAT is digits 6 range -3.40282E+38 .. 3.40282E-t-38 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647 

end STANDARD; 


C-1 










APPENDIX F OF IHE Ada STANDARD 


APPEKDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE ONLY Pragma 

Hie INLINEJONLY pragma, vrtien used in the same way as pragma 
INLINE, ii^icates to the ccnpiler that the subprogram must 
always be inlined. This pragma also suppresses the genera- 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjQMLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be rais^ at run time. 

1.2. BUILT IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefine? Ada packages, but provides no user access. It is 
used only to iiifilement code b^ies for \diich no actual Ada 
body can be provided, for example the NACHINE_CCX>E package. 

1.3 J SHARE CXXIE Pragma 

The SHAREjCCXlE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TBUE or FALSE as the second argument. Hiis 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent conpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the ccmnpiler will try to 
share code generated for a generic instantiation wi^ code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BCX)Y is also recognized by the inple- 
mentation and has Bie same effect as SHAREjOCXJE. It is 
included for ccmpatability with earlier versions of VADS. 

1.4. NO IMAGE Pragma 


C-2 









APPENDIX F OF THE Ada STANDARD 


The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenf>t to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
compilation warning and PR0C2lAM_ERB0R raised at run time. 

^.5. EXTERNAL NAME Pragma 

The EXTERNAL NAME pragma takes the name of a stibprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with eui 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or siit^rogram 
declared earlier in the same package specificaticxi. The 
object must be declared as a scalar or an access type. The 
object canrot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT aX)E Pragma 

Takes one of the identifiers GN or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that ii^licit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The defaiilt is ON. 

1.8. OPTIMIZE CCPE Pragma 

Thkes one of the identifiers GN or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies >die^er the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 


C-3 








APPENDIX P OF THE Ada STANDARD 


2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in ;^:pendix B of the 
Ada RN. 


2.4. INTERFACE 

This pragma supports calls to 'C' and F(^tIRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mi^e IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is iiif>lemented as described in i^ppendix B of the 
Ada RH. 


2.6. MEMORY SIZE 

This pragma is recognized by the iof>lementation. The inple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the coopiler that the siAprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded su^rograsm within a package spec or pack¬ 
age bod^. 

2.8. NOT ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates ttot the package will not be elaborated 
because it is either part of the RTS, a configuration pack- 


C-4 










APPENDIX F OF THE Ada STANEARD 


age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.^. PACK 

This pragma will caxise the conpiler to choose a non-aligned 
representation for con^site types. It will not causes 
objects to be packed at the bit level. 

2.U. PAGE 

This pragma is iit(>lemented as described in Appendix B of the 
Ada BM. 


2.U. PASSIVE 

The pragma has three forms : 


PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVEdfJTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERROR at runtime. 

2.n. PRICHUTY 

This pragma is implemented as described in Aj^pendix B of the 
Ada RMj - ' 

2.U. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.15. STORAGE UNIT 


This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconqpiled. 


C-5 








APPENDIX F OF THE Ada STANDARD 


2.]^. SUPPRESS 

This pragma is inf>lemented as described, except that 
DIVISION OiECK and in some cases 0VERFL0W_CHECK cannot be 
supresseH. 

2. n. SYSTEM NAME 

This pragma is recognized by the iiif>lementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P*REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for idiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_C(X>E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more informaticxi on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX>RESS in the package SYSTEM. 

Specification Of Package SYSTEM 


— Copyright 1987, 1988, 1989, 1990 Verdix Corporation 

— Preserve line nundsers as they are reported in ACVC tests. 

with unsigned_types; 
package SYSTEM is 

pragma suppress(ALL_CHECKS); 


C-6 








APPENDIX F OF THE Ada STANDARD 


pragma suppress(EXCEFTI(]N_TABLES); 
pragma not_elaborated; 


type NAME is ( symmetryjptx ); 


SYSTEM_NAME : constant NAME syninetry_ptx; 

STORAGEJUNIT : constant 8; 

MEMORY SIZE : constant 268 435 456; 


— System-Dependent Named Numbers 

MIN_INT : constant 

MAX_INT : constant 

MAX_DIGITS : constant 

MAX_MANTISSA : constant :• 31; 
FINE_DELTA : constant 

TIC3C : constant 


-2 147 483 648; 
2 T47 783 747; 
1 ?; ■ " 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SI2E : integer 64*1024; 
type AIX)RESS is private; 


function ">" (A: ADDRESS 
function "<" (A: ADDRESS 
function ">-"(A; ADDRESS 
function "<-"(A; ADDRESS 
function (A: AOORESS 
function "+" (A: AIX>RESS 
fimction (A: ADDRESS 


B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: AIX3RESS) 
B: ADDRESS) 
I: INTEGER) 
I: INTEGER) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
return AIX)RESS; 
return AIX>RESS; 


function "+” (I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


function NENORY_AIX)RESS 

(I: UNSIGNED TYPES.UNSIGNED INTEC^) return ATORESS renames 


NO_Aim : constant AIX»^S; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_1D; 

sxibtype SIG_STATUS_T is INTEGER; 
SIG_STATUS_SIZE : constant :«4; 

type PROCS^_ID is private; 
NO_PROGRAM_ID ; constant ProGRAM_ID; 

type LGNGjADDRESS is private; 


C-7 









APPENDIX F OF THE Ada STANCARD 


NO_LQNG_AIX}R : constant LQNG_AIX}RESS; 

function "-f" (A: LGNG_A1X>RESS; I: INTEGER) return LONG_AIX)RESS; 
function (A: LONG_AK)RESS; I: INTEGER) return LONG_ADDRESS; 

function NAKE_LONG_ADRESS (A: AIX)RESS) return LONG_AODRESS; 

function LOCALIZE(A: LGNG_AIX)R£SS ; ByTE_SIZE : INTEGER) return ADDRESS; 

function STATION OF(A: LONG AE»>RESS) return INTEGER; 


private 


type AmRESS is new UNSIGNED_TYFES.UNSIC3ffip_INTEGER; 
N0_A1X)R : constant AIX3RESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(''>-") ; 
pragma BUILT_IN( "<-"); 
pragma BUILT_IN(”-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 

' NO_TASK_ID ; constant TASK_ID 0; 

type PROGRAM ID is new UNSIGNED TYPES. UNSIGNED_INTEGER; 
NO__PROGRAM_ID ; constant PKXaRAM_ID 0; 

type LONG_AIX}RESS is new UN5IGNEp_TYPES.UNSIGNED_INTEGX»; 

NO_LONG_ADDR : constant LONG_ADDRESS 0; 

pragma BUILT_IN(MAKE_LONG_AI»RESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATICN_OF); 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record confxments are padded 
so as to provide for efficient access ^ the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding v^ere possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 


C-8 






APPENDIX F OF THE Ada STANDARD 


For scalar types a representation claxise will pack to the 
nundser of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conqponents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of ccn^xsnents only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.2* Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables \diich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.j4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The A1X3RESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneummics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CC»E_n'( opcode , operand {, operand } ); 
vhere n indicates the number of operands in the aggregate. 


C-9 






APPENDIX F OF THE Ada STANDARD 


A special case arises for a variable number of c^rauids. 
The operands are listed within a subaggregate. Ihe format 
is as follows: 

CODEJN'( opcode , ( operand {, operand ]) ); 

For those opcodes that require no operands, named notation 
must be xised (cf. RH 4.3(4)). 

CXX)E_0'( op -> opcode ); 

The oyrode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINEjCQOE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
- NACH1NE_CCX>E must l3e Static expressions, string literals, or 
the functions defined in MACHINE_CM)E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 


6. Conventions for Implementation-generated Names 
There are no isplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
E^ysical addresses. 

8. Restrictions on unchecked Conversions 
None. 

9. Restrictions on unchecked Deallocations 
None. 


10 . Implementstion Characteristics of I/O Packages 

Instantiations of DIRECT_IO \jse the value MAX REC_SIZE as 
the record size (expressed in STORACXJUNITS) ^en the size 
of ELENENTJTYPE exceeds that value. For example for uncon¬ 
strained arrays such as string \[^ere ELEMENT TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. NAjytECDRD_SIZE 
is defined in SYST^ and can be changed by a program before 
instantiating DIRECT 10 to provide an \q^r limit on the 
record size. In ai^"case the maximum size supported is 1024 
X 1024 X STORACX UNIT bits. DIRECT 10 wiU raise USE ERROR 


C-10 










APPEX4DIX F OF THE Ada STANIARD 


if MAX_RECjSIZE exceads this absolute limit. 

Instantiations of SBQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELENENT_TyPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENr_TyPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
NMC_BECQRD SIZE is define? in SYSTEM and can be changed by a 
program be7ore instantiating INTECSR_I0 to provide an \xpper 
limit on the record size. SEQUENTIAL lO isposes no limit on 
MMC_REC_SIZE. 

11 . Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to inply that resources up to or 
even near these limits are available to every program. 

n.l. Line Length 

The inplementation supports a maximum line length of 500 
characters including the end of line character. 

^.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGB_UNlTS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

n.^. Default Stack Size for Tasks 

In the absence of an explicit STORAG£_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORACSJUNITS. This is the value 
returned by T'STX3RAGE_SIZE for a task type T. 

H.4. Default Collection Size 

In the absence of an explicit ST0RAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared (fcjects 

There is an absolute limit of 6,000,000 x STORAQSIJlSilZTS for 
objects declared statically within a compilation unit. If 
this value is exceeded the ccaroiler will terminate the comp¬ 
ilation of the unit with a FATAL error message. 


C-11 








