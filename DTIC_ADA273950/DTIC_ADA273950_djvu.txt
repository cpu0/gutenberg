REPORT DOCUMENTATION PAGE 


FomApfMwma , 
OPMNS 


PuMe riparting buidan IgrIM* oslai' 
and iMMaMns Hw Ma hmM, ar 
w ggaalicna tor laduotog tM hurdarr 
aaop^soa, wid la ttia Odiaa o( kite 


I I I I !■ I —il l 




- - •“ — » — « r *»>•• oat MamiM inehadng lha ton# tor raMtarring inalnjoliona, aaaicriing aiialing daU aouraaa gMharir^ 

lii burdan aatimata or any othar aapad ol Ma aelaeUen e« intormatian. indudii« 
A AM A Mtlionawdnaoena. 121SJaHarBonDainaHgh«MV.Suda1204.AriiriBlon. VA 

AD-A273 950"**“'“"“ 


Sun SPA 


CASEWorks/RT Ada for Sun SPARCstation 10, 1.1, Host: 
station 10 , Target: Same as Host, 930722W1.11318 
930722W1.11318 


Authors; 

Wright-Patterson AFB 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 



e. PERFORMING 
ORGANIZATION 


f-Wyja-'TISW:'!] 


ORING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon. Fim 3E118 
Washington. DC 20301-3080 


DTIC 

ELECTE 
DEC 141933 


10. SPONSORINGItAONnrORlNG 
AGENCY 



12a. DISTRIBUTIOWAVAILABILITY 

Approved for public release; distribution unlimited 


(Maximum 200 

CASEWorks/RT Ada for Sun SPARCstation 10, 1.1, Host: Sun SPARCstation 10, Target: Same 
as Host 
ACVC 1.11 



14. SU^e6Y 

Ada programming language, Ada Compiler Val. 

Ada Val. 

Summary Report, Ada Comp 
Office, Ada Val. Facili 

igm^mmiiiiiiinii 

i7.66cuAitY 

CLASSIFICATION 

UNCLASSIFIED 

18. SECURITY 

UNCLASSIFIED 

19. security 

CLASSIFICATION 

UNCLASSIFED 

20, LIMITATION OF 

UNCLASSIFED 














AVF Control Number; AVF-VSR-565.0693 
Date VSR Con^leted: 10 August 1993 

93-04-21-MTI 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number; 930722W1.11318 
Multiprocessor Tbolsmiths Inc. 
CASEWOrks/RT Ada for Sun SPARCstation, 1.1 
Sun SPARCstation 10 under SunOS^ 4.1.3 


(Final) 


Prepared By; 

Ada Validation Facility 
645 C-CSG/SCSL 

Wright-Patterson AFB aa 45433-5707 


93 i2 13 04 9 


^^^ 93-30119 

iilllllli 



Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 22 July 1993. 

Conpiler Name and Version: CASE>R>rks/RT Ada for Sun SPARCstation 10, 1.1 

Host Conputer System: Sun SPARCstation 10 

iffider SunOS, 4.1.3 

Target Cooputer System: Same as host 

Customer Agreement Number: 93-04-21-NTl 


See section 3.1 for any additional information about the testing 
environment. 

AS a result of this validation effort, Validation Certificate 
930722W1.11318 is awarded to Multiprocessor Toolsmiths Inc. This 
certificate expires two years after MIL-STh-lSlSB is approved by ANSI. 


This report has been reviewed and is ajproved. 


f p ^ 

ida Validation racili^ 


Ada 

Dale E. Lange 
Technical Director 
645 C-CSG/SCSL 

Wright-Patterson AFB CXI 45433-5707 



Ada Organization 

Dire^o^^/Omiputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 






Acces 

ioi": Foi 1 : 

NTIS 

Oi-M U ! 

DTIC 

.Pc '■ 1 




'.. i 

By_ 

( 

DIstrIb 

-t:;/:/ ■ I 

AviJip' ii ;y 

Dist 

A'.'ti'. r 1 


i ■ 

1 1 

! ! 


Ada Joint Program Office 
^ Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


DTIC QUAUrY INSPECTED 3 












DECLARATION OF OGNFORMANCE 

The following declaration of conformance was supplied by the customer. 


Declaration of Conformance 


Custcmer: Multiprocessor Toolsmiths Inc. 


Ada Validation Facility: 645 C-CSG/^CSL 

Wright-Patterson AFB oa 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: CASEHOrks/RT Ada for Sun SPARCStatim 10, 1.1 

Host Computer System: Sun SPARCStation 10 

xmder SunOS, 4.1.3 

Target Computer System: Same as host 

Declaration; 

I, the undersigned, declare that I have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/M1L-STD-1815A ISO 8652-1987 in the implementation 
listed above. 








TABLE OF CCNTENTS 


CHAPTER 1 INTROOUCTZGN 


1.1 USE OF THIS VALIDATION SlPINARy REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF lERMS.1-3 

CHAPTER 2 IMPLENQITATZGN ESPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


nmcoucnoN 


The Ada inplenentation described above was tested according to the Ada 
validation Procedures [Pro90] against tlw Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Sunnary 
Report (VSR) gives an account of the testing of this Ada inplenentation. 

For any technical terns used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC nay be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Boci^ nay nake full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and conpiler versions identified 
in this report. 

The organizations represented an the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and cooplete, or that the subject inplenentation has no 
noncMifomities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF \irtiich performed this 
validation or from: 

National Technical Information Service 
5285 Fort Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTIGN 


1.2 REFERENCES 

[Adia83] Reference Manual for the Ada Programming Language , 

ANSI/NIL-Sro->1815A, February IsdS and ISO B6S2-1^87. 

(Pro90] Ada Compiler Validation Procedures » Version 2.1, Ada Joint 
Program office, August 1990. 

(UG891 Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Con^liance of Ada implementations is tested by means of the ACVC. The ACVC 
ctMitains a collection of test programs structured into six test classes: A, 
B, C, O, E, and L. The first letter of a test name Identifies the class to 
which it belongs. Class A, C, D, and E tests are executable, class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating t he r esiilt when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity functions used to defeat seme compiler 
(^timizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT23 is used many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is tised to check the contents of 
text files written ly some of the ^lass C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting coo^ilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific v^ues — for exaaple, the largest integer. A list 
of the values us^ for this implementation is provided in ^jpendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this iiqplementation are described in section 2.3. 


1-2 



INTRODUCTION 


For each Ada inplementati^xi, a custoodzed test suite is produced by the 
AVF. This customization cc»isi6ts of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 ISFINITIGN OF TERMS 

Ada Coopiler The software and any needed hardware that have to be added 
to given host and target coaster system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Coepiler The means for testing coopliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability xiser's guide and the tesplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Iiqplementation target conpiter system. 

Ada Joint The part of the certification body vhich provides policy and 
Program guidwce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body \diich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) iaplementation. 

Ada The part of the certification body that provides technical 

Validation guidwce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the isplementation to pass an ACVC version, 
an Ada 

Implementation 

Coaster A functional unit, consisting of one or more cooputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulaticm, including arithmetic 
operations and logic operations; and that can execute 
programs that modify ttemselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 




INTRCJOUCTIGN 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an 

agreement with an AVF \diich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
which validation stattis is realized. 

Host Ccoputer A computer system where Ada souroe programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada in^lementation. 

ISO international Organization for Standardization. 

LBM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form '*<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware implementations are possible. 

Target A conputer system >^ere the executable form of Ada programs 

Ccmputer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Ccmpiler 

Validated Ada An Ada implementation that has been validated successfully 
Inplementation either by AVF testing or by registration [Pro90]. 

Validation The process of checking the conformity of an Ada conpiler to 
the Ada programming language aiui of issuing a certificate 
for this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTE31 2 


IMPLEHENTATZGN DEPE34DEMCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C3550BI 

C35508J 

C35508H 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BO8004C 

CD900SA 

CD9005B 

CDA201E 

CE21071 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inaj^licability may 
be s\ipported by documents issued by the ISO and the AJPO known as Ada 
Commentaries aivi commonly referenced in the format Al-ddddd. For this 
isplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Canroentaries are included as 
ai^ropriate. 


2-1 







IHPLEHENIATXGN DBPQflSEldES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYST12l.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

C35713B, C45423B, B86001T, and C86006H checic for the predefined type 

SIX3RT_FLCAT; for this inplenentation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCMG_FLQAT, or SHORT_FLQAT; for this 
isplementation, there is no such type. 

A35801E includes a check that FLOAT'FIRST..FLOAT'LAST can be used as 
the range constraint in a floating-point type declaration; this 
inplementation, rejects the declaration. (See section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 

raised if MACHINEjOVERFLONS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inplementation, HACHZNE_OVERFLOWS is FALSE. 

C45531M..P and C45532H..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.NAX_HANTISSA of 47 or greater; for this 
inplementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA2009F check >diether a generic \jnit can be insteuitiated 
before its body (and any of its subunits) is ccxnpiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the conqpilation of the generic unit 
Isodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 

for proce^res and functions; this inplementation does not support 
pragma INLINE. 

CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not su{port such sizes. 


2-2 







IMPLEHEZnATICN DEPE>1DE14CIES 


BDSOOlAf BD8003A, BD8004A..B (2 tests), and AD6011A use machine code 
inserticms; this inplementation provides no package MACHINE_CCX>E. 

AE2101C aund EE2201D..E (2 tests) use instantiations of package 
SBQUENnAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIBECT_IO 
with unconstrain^ array types and record types with discriminants 
without defaults; these instantiations are rejected by this coopiler. 

The tests listed in the following table check that USE_ERBOR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEX4 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

0PE3< 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO. 


The following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised when this association is attespted. 

CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 


2-3 








IHPLEMENIATIQN I»3>ENDEXfCIES 


CE2203A checks that WRITE raises USE_ERFOR if the capacity of an 
external sequential file is exceeded; this iiqpleinentation cannot 
restrict file capacity. 

CE2401A checks that WRITE raises USE_ERRCSt if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tna^^ropriate value for the external 
file; there are no inappropriate values for this inqplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vAien the value of the 
page number exceeds COUNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 8 tests. 

The following tests were split into two or more tests because this 
isplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

A35801E was graded inacplicable by Evaluation Modification as directed by 
the AVD. This test checks that various floating-point attributes can be 
used in static expressions, and includes the range FLOAT'FIRST..FLOAT'LAST 
as the constraint in a floating-point type declaration. Such a constraint 
may be rejected by the conpiler if the values for 'FIRST & 'LAST are not 
within the range of safe numbers for any of the implementation's floating 
point base types (cf. AI-00469/04). But this implementation rejects the 
declaration even though it has a large enough base type; however, this 
error was not discovered until after testing had begun. 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the coopilation of the generic \mit bodies makes the ccxnpilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests dwck that instantiations of generic 
tmits with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the units that contain the 
instantiations, and this inplementation creates a dependence of the 
instantiating units on the generic units as allowed by Al-00408 and 
AI-00506 such that the conpilation of the generic bodies makes the 


2-4 








IMPLEMENTATION DEPENDENCIES 


instantiating tjnits obsolete—no errors are detected. The processing of 
these tests was modified by re-coopiling the obsolete units; all intended 
errors were then detected by the coopiler. 


2-5 











C31APTER 3 


PRXESSIN5 INFC»MATIGN 


3.1 TESTING ENVIROraiENT 

The Ada iiif>leinentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

SteE^n Hichell 

Multiprocessor Toolsmiths inc. 

200-6 Gurdwara Drive 
Nepean, Ontario 
K2E 8A3 

(613) 727-8707 Ext:111 


Testing of this Ada implementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, \diether the test is asplicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inafplicable and applicable), a result was 
obtained that conforms to tlie Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 


3-1 






PROCESSING INFCIVATIGN 


and £, below). 


a) Total Number of Applicable Tests 3790 

b) Total NundDer of Withdrawn Tests 95 

c) Processed Inapplicable Tests 85 

d) Non-Processed IA> Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Nuadber of Inapplicable Tests 286 (c-Ki-^e) 


g) Total Number of Tests for ACVC 1.11 4170 (a-t-hi-f) 


3.3 TEST EXECUTIGN 

A magnetic tape containing the customized test suite (see section 1.3) was 
ta)cen CHi-site by the vali^tion team for processing. The contents of the 
magnetic tape were loaded directly onto the host conputer. 

After the test files were loaded onto the host cooputer, the f\ill set of 
tests was processed by the Ada inplementation. 

The tests were compiled, linked and executed on the host conputer system. 
The results were captured on the host conputer system. 

Testing was performed using command scripts provided by the customer and 
review^ by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Option/Switch 

Effect 

-fE 

Generate the auxiliary file so that 
the lister will work. 

-fw 

Suppress warnings. 

-fl 

Ignore errors in deciding vhich units 
should be added to a library in a given 
coepilation. 

Don't emit messages about adding units 
to the program library. 

-fQ 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 



KPPBJDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum ii^t-line length, v^ich is 
the value for $MAX_IN_LEN—also listed here. These values are stressed 
here as Ada string aggregates, where 'V represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEM 

200 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(l,.V/2 -> 'A') & '3' & 
{1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

(1..V-20 


$MAX LEM IMT BASED LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 

$MAX_LEN REAL_BASED_LITERAL 

"16;" & (1..V-7 -> '0') & "F.E;" 

A-1 



HMCBO PARAMETERS 


$MMC_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 
$ALIGNMENT 
$CX)UNT LAST 


$DEFAULT_SyS_NAME 

$kz.ta_doc 

$ENTRy_ADC«ESS 

$ENTRY_AIX>RESS1 

$ENT!RY_AI»RESS2 

$FIELD_LAST 

$FILE_TERMINATOR 

$FIXED_NAME 

$FLC»T_NAME 

$FQRM_STRING 

SFORH STRING2 


2 147 483 646 


$i»:fault_mem_size ic 

$I£FAULT STQR UNIT 8 


SPARCJUNIX 

2.0**(~31) 

16#0* 

16*1« 

16«2« 

2 147 483 647 


NO_SOCH_FIXED_TYPE 
NO SUC3i FLOAT TYPE 


*CANNOT RESTiaCT FILE CAPACITY" 


$GREATER TSAN DURATION 

90_000.0 

$(31EATER TliAK DURATION BASE LAST 

To_oozy_ooo.o 

$GREATER_THAN FLOAT BASE LAST 

I.Be+308 


$GREATER THAN FLOAT SAFE LARGE 

: .TyE38 



MACRO PARAMETERS 


$GREATER THAN_SHORT FLOAT SAFE LARGE 

1.01308 ~ 

$HIGH_PR10RITY 20 

$ZLLEGAL Em3lNAL_FILE_NAHEl 

/NOOIRECTORY/FILEJJAMEI 

$ILLBGAL_EXTERNAL F1LB_NAHE2 

/1«X)ZRECTQRy/FILENAME2 

$INAPPRC^RIATE_LIME_LE240TH 

-1 

$INAPPROPRlATE_PA(S;_LEtlQTH 

-1 

$1NCUJDE_PRAGMA1 PRAGMA INCLUDE ('•A28006D1 .ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.ADA") 

$imEGER_FlBST -2147483648 

$IMTB(XR_LAST 2147483647 

$1NTBGER_LAST__PLUS_1 2147483648 
$INTERFACE_LANGUAGE C 

$LESS__THAN_DURATION -90_000.0 

$LESSjniAN_DURATION_BASE FIRST 

-iTy_ooq_ooo.o 

$LINE_TERMINATC^ ASCI I. LF 

$LOW_PRIORITY 1 

$MACHINE_OODE_STATEMENT 

NULL; 

$MACHINEjOOra:jrYPE INSTRUCTION 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$M1N_INT -2147483648 

$NAME 


BYTE INTEC331 










MMCRO PARMIEIERS 


$NM1E_LIST 

$NM1E_SPECIFICATIGN1 

^mie_sfecific:atiqn2 

$NM1E_SPECIFZCATXGN3 

$NEGJEASED_ZNT 

$NEWJ1EH_S1ZE 

$NEW_STC»_UNZT 

$NEW_SYS_NAME 

$PAC2;_!IERnilATQR 

$SECORO_DEFZNZTZGN 

$RECORD_mNE 

$TASK_SZZE 

$Ti^R_STcnA(a;_szzE 

$TZCK 

$VRRZABLE_ADORESS 

$\ARIABLE_AIX}RESS1 

$VARZABLE_ADC»ESS2 

$YDUR_PRAGNft 


SPARC_UaX 

/hoae/sparc6/aval Aal. SPARC/X2120A 
/hoBe/sparc6/avalAal. SPARC/X2120B 
/1ioaa/sparc6/avalAAl • SPARC/X3119A 
16#FFFFFFFB# 

1024 

8 

SPARCJMZX 
ASCZZ.ZJ* & ASCII.FF 
NEW ZNIEGER 

ZNsmxrrzoN 

32 

4000 

0.0001 

FCNI»n..VAR_ADORESS 
FCNI»CL.VAR_ADDRESS1 
FCNDrcL.VRR_ADORESS2 
NO SUCH PRAGNA 


A-4 






APPENDIX B 


OOHPILATICM SYSTEM OPTICNS 


The coanpiler opticsis of this Ada inpleoentation, as described in this 
Appendix, are provided the custoner. Unless specifically noted 
otherwise, references in this appendix are to ccopiler docunentation and 
not to this report. 

-L - Perform bamp on a program library named something other than 
ada.lib. 

-g - Run additional optimization pass. 

>K - Keep internal form file. This option is used in conjunction 
with tlie Optimizer. 

-k - Save all of the intermediate files. This qption is useful 
for viewing or debugging the intermediate "C" code generated 
by the back end of the compiler. 

-1 " modifiers" - 

Generate listing file. The -1 option causes the compiler to 
create a listing. Optional modifiers may be given to affect 
the listing format. Any combination of the following 
modifiers can be used: 

c - oxitinuous listing format, 
p - obey pragma page directives, 
s - \ise stan^rd output, 
t - relevant text output only. 

-fv - Verbose mode. Print out the names of the units with'd, 
and what \jnits are added to the symbol table. 

-fD - Debug mode. Generate debugging information. 

-fq - Quiet mode. Don't print any informaticxi about a compilation. 

-fL - Enables the coopiler to give the filename and line nundsers 
vAiere an exception takes place. 

-fr - Do not release memory at compile time. 

B-1 






GCMPZIATION SYSTEM OPTIGNS 


-£U - Coopile this unit, but do not update the program library. 

-fw - Suppress warnings. 

-£s - Coopile time switch o suppress checking cperaticms. 

-fs - Coopile time switch to suppress numeric checking. 

-fz - finit code to zero all locals. 

-fl - Ignore errors in deciding which imits should be added to a 
library in a given coopilaticm (see eal003b). 

-£E - Generate the auxiliary file so that the lister will work. 

-£R - Generate ROdable code. 

-fQ - Don't emit messages about adding imits to the program library. 

-£o - Don't update the program library if a change is made that 
won't affect the program library (useful when spec and body 
are in the same file). 

-fP - Change the .int extensicm to .pre. This is used when the 
optimizer is invoked. 

-fC - Coopile only if this unit is out-K>f'<3ate. This is used in 
conjunction with the tool "adaorder”. 

-fV - Change common to data. Explicitly initialize globals so 
that objects that would go into the common area will be 
placed in the data area. 

-fT - Trace C functions. This inserts tracing code on entry and 
exit from each subprogram. This is useful on a system with 
no debugger when it is first being brought up. 

-fb - Debug mode. Output iform blocks to a .b file. 

-fe - Intersperse source lines as comments in C (assembly) code. 

-fn - Output translatiois of globals to c names to .n file. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
J^pendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


-c - Use a different coopiler than the one specified for this 


B-2 



CXKPILATION SYSTEM OPTIONS 


program library. 

-L - Perform ban^ on a program library named something other than 
ada.lib. 

-o - Takes a parameter. This specifies a different name for the 
executable. 

-r - Produce a relocatable object. 

-p - Link the file for a 'prof' based compiler. 

-s - Specify an explicit default for the size of a task stack. 

-M - Specify an explicit default for the size of the main task stack. 

-N - Don't actvially call the linker. Prints out the program steps 
which would be executed in the baap phase 

-P - Print the steps (or subtools) invoked as part of banp. 

-V - Verbose mode. 

-q - Quiet mode. 

-k - Save all of the intermediate files associated with bamp. 

>f - Don't compile the elaboration main routine. 

-n - Stop before the link step. 

Hn - Create a link map. 

-u - Target software floating point. 

-I - Link in Preenptive tasking runtime. 

-g; -G - Invoke the global optimizer. 

-z - Create executable that will perform dynamic linking. 

-Q - Take the next argument and pass it directly to the linker. 


B-3 








APPENDIX C 


APPENDIX F OF THE Ada STANCARD 


The only allowed inplementation dependencies correspond to 
inqplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Ctopter 13 of the Ada Standard, and to certain allowed 
restricticms on representation clauses. The isplementation-dependent 
characteristics of this Ada inplementation, as described in this Jppendix, 
are provided by the customer, unless specifically noted otherwise, 
references in this ^)pendix are to conpiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, v^ich 
are not a part of ^pendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type LONG_INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type BYTE_INTBGER is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282E-i'38 .. 3.40282E4-38; 
type LONG_FLQAT is 

digits 15 range -1.7976931348623lEf308 .. 1.79769313486231E+308; 
type DURATIGN is delta 0.0001 range -86400.0000 ..86400.0000; 


end STANDARD; 


C-1 





APPENDIX F OP ins Ada STANDARD 


Appendix F 

Inplenentation-Dependent Characteristics 


This appendix lists inplementation-dependent characteristics of 
CASENorks/RT Ada for the Sun SPARCstation/Unix environment. Note 
that there are no preceding appendices. This appendix is called 
Appendix F in order to ccoply with the Reference Manual for the Ada 
Programming Language* (LRH) ANSI/HIL-STD-ISISA which states that 
this appendix be named appendix F. 

Implemented Chapter 13 features include length clavises, enumeration 
representation clauses, record representation clauses, address 
clauses, interrupts, package system, pragma interface, and unchecked 
programodng. 

F.l Pragmas 

The implemented pre-<lefined pragmas are: 
elaborate See the LRM section 10.5 
interface See section F.1.1 
list See the LRM ^)pendix B 
pack See section F.l.2 
page See the LRM Appendix B 
priority See the LRM .^qpendix B 
sr^ress See section F.l.3 

The remaining pre><}efined pragmas are accepted, but presently 
ignored: 

controlled 

inline 

optimize 

system_name 

shared 

storage_unit 

memory_size 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at coopile time, the 
ccxnpiler issues a warning message rather than an error, as required 
by the Ada language definition. Refer to the LRM Appendix B for 
additional information about the pre-defined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface in CASEWorks/RT Ada is: 

pragma interface( language, suli^rogram [,"link-name"] ); 

^diere: 

language This is the interface language, one of the names 


C-2 



APPENDIX F OF THE Ada STANDARD 


assembly, builtin, c, or internal. The names 
bulltin and internal are reserved for use by 
Toolsmiths cc»f>iler maintainers in run-time suf^rt 
packages. 
subprogram 

This is the name of a subprogram to which the 
pragma interface applies. 

link-name This is an optional string literal specifying the 

name of the non-Ada sxabprogram corresponding to the 
Ada subprogram named in the second parameter. If 
link-name is omitted, then link-name defaults to 
the value of subprogram translated to lowercase. 
Depending on the language specified, some automatic 
modifications may be made to the link-name to 
produce the actual object code symbol name that is 
generated whenever references are made to the 
corresponding Ada sxit^rogram. The object code 
symbol generated for link-name is always translated 
to tfiper case. 

It is appropriate to use the optional link-name 
parameter to pragma interface only when the 
interface subprogram has a name that does not 
correspond at all to its Ada identifier or when the 
interface subprogram name cannot be given using 
rules for constructing Ada identifiers (e.g., if 
the name contains a character). 

The characteristics of object code symbols 
generated for each interface language are: 

assembly - The object code symbol is the same as 
link-name. 

builtin - The object code symbol is the same as 
link-name, but prefixed with the following 
characters _ms8_. This language interface is 
reserved for special interfaces defined by 
Toolsmiths. The builtin interface is presently used 
to declare certain low-level run-time operations 
whose names must not conflict with 
programmer-defined or language system defined 
names. 

c - The object code synbol is othe same as 
link-name, but with one underscore character (_) 
prepended. This is the convention used by the C 
compiler. 

internal - NO object code symbol is generated for 
an internal language interface; this language 
interface is reserved for special interfaces 


C-3 






APPENDIX F OF THE Ada STANDARD 


defined by Toolsmiths. The internal interface is 
presently used to declare certain machine-level bit 
operations. 


No automatic data conversions are performed on parameters of any 
interface subprograms. It is up to the programmer to ensure that 
calling conventions match and that any necessary data conversions 
take place vdien calling interface sul^rograms. 

A pragma interface may appear within the same declarative part as 
the subprogram to ^diich the pragma interface applies, following the 
subprogram declaration, and prior to the first use of the 
subprogram. A pragma interface that applies to a subprogram 
declar^ in a package specification must occur within the same 
package specification as the subprogram declaration; the pragma 
interface may not appear in the package body in this case. A pragma 
interface declaration for either a private or nonprivate subprogram 
declaration may appear in the private part of a package 
specification. 

Pragma interface for library units is not supported. 

Refer to the LRH section 13.9 for additional information about 
pragma interface. 


F.1.2 Pragma Pack 

Pragma pack is implemented for cooposite types (records and 
arrays). 

Pragma pack is permitted following the conposite type declaration 
to vrtiich it applies, provided that the pragma occurs within the 
same declarative part as the conposite type declaration, before any 
objects or components of the conposite type are declared. 

Note that the declarative part restriction means that the type 
declaration and accoopanying pragma pack cannot be split across a 
package specification and body. 

The effect of pragma pack is to minimize storage consunption by 
discrete ccmponent types vhose ranges permit packing. Use of pragma 
pack does not defeat allocations of alignment storage gaps for scmie 
record types. Pragma pack does not affect the representations of 
real types, pre-defined integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma suppress is iiif)lemented as described in the LRM section 
11.7, with these differences: 

Presently, division_check and overflow_check must be 
suppressed via a compiler flag, -fN; pragma suj^press is 
ignored for these two numeric checks. 

The optional ON «» parameter name notation for pragma 


C-4 





APPENDIX F OF THE Ada SIANDARD 


siippress is ignored. 

The optional second parameter to pragma suppress is ignored; 
the pragma always applies to the entire scope in which it 
appears. 


F.2 Attributes 

All attributes described in the LRH Appendix A are si^ported. 


F.3 Standard Types 


Additional standard types are defined in CASENorks/RT Ada: 
byts_integer 
short integer 
long_Tnteger 
long_float 

The standard ntjmeric types are defined as: 

type byte_integer is range -128 .. 127; 

type short_integer is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 .. 2147483647; 


type float 
type long_float 

type duration 


is digits 6 
range -3.40282Ef38 


3.40282E-t-38; 


is digits 15 

range -1.79769313486231E+308 
.. 1,79769313486231E+308; 


is delta 0.0001 
range -86400.0000 


86400.0000; 


F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (SPARCJUNIX); 

system_name : constant name SPARC_UNIX; 



APPENDIX F OF THE Ada STANDABD 


storagejunit : constant 8; 

neinory_size : constant 1024; 

— System-Dependent Named Nundsers 


min_int 

max_int 

maxjdigits 

maxjoantlssa 

fine delta 

tick 


: constant 
: constant 
: constant 
: constant 
: constant 
: constant 


-2147483648; 

2147483647; 

15; 

31; 

2.0 ** (-31); 

1 . 0 ; 


— Other System-Dependent Declarations 
subtype priority is integer range 1 .. 20; 

The value of system.memory_size is presently meaningless. 


F.5 Restrictions on Representation Clauses 


F.5.1 Length Clauses 

A size specification (t'size) is rejected if fewer bits are 
specified than can accasnodate the type. The minimum size of a 
composite type may be subject to application of pragma pack. It is 
permitted to specify precise sizes for unsigned integer ranges, 
e.g., 8 for the range 0..255. However, because of requirements 
imposed by the Ada language definition, a full 32-bit range of 
unsigned values, i.e. 0..(2**32)-l, cannot be defined, even using 
a size specification. 

The specification of collection size (t'storage_size) is evaluated 
at nsi-time \^en the scope of the type to which the length clause 
applies is entered, and is therefore subject to rejection (via 
storage error) based on available storage at the time the 
allocatTon is made. A collection may include storage used for 
run-time administration of the collection, and therefore should not 
be expected to accommodate a specific number of objects. 
Furthermore, certain classes of objects such as unconstrained 
discriminant array components of records may be allocated outside 
a given collection, so a collection may accommodate more objects 
than mi^t be expected. 

The specification of storage for a task activation (t'storage_size) 
is evaluated at run-time ^en a task to vhich the length clause 
applies is activated, and is therefore subject to rejection (via 
storage error) based on available storage at the time the 
allocatTon is made. Storage reserved for a task activation is 
separate from storage needed for any collections defined within a 
task body. 


C-6 









APPENDIX F OF THE Ada STANDARD 


The specification of small for a fixed point type (t'small) is 
subject only to restrictions defined in the LRM section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in 
an enumeration representation clause must be in the range of 
standard.integer. 

The value of an internal code may be datained by applying an 
appropriate instantiation of uncheckedjconversion to an integer 
type. 


F.5.3 Record Representation Claijses 

The storage unit offset (the "at static_sinple expression" part) is 
given in terms of 8-bit storage wits and fflust~be even. 

A bit position (the range part) applied to a discrete type 
coofx^nent may be in the range 0..15, with 0 being the least 
significant bit of a ccs^xment. A range specification may not 
specify a size smaller than can accoonodate the conpohent. A range 
specification for a coqxment not accoranodating bit packing may 
have a higher upper bound as appropriate (e.g., 0..31 for a 
discriminant string component). Refer to the internal data 
representation of a given conponent in determining the cooponent 
size and assigning offsets. 

Components of discrete types for vAiich bit positions are specified 
may not straddle 16-bit word boundaries, unless they begin at bit 
position 0. In these cases the compiler will allocate 32 bits for the 
unit, and will not permit other components to be assigned to these bits. 
Also ensure that such components are aligned beginning on words 0, 4, 8, 
12 .... Attempts to access integer-equivalent components which are not 
correctly aligned will result in runtime processor exceptions. 

The value of an alignment clause (the optional at mod part) must 
evaluate to 1, 2, 4, or 8, and may not be smaller than the highest 
alignment required any component of the record. On UNIX, this 
means that some records may not have alignment clauses smaller than 
2 . 


F.5.4 Acklress Clauses 

An address clause may be sxipplied for an object (vhether constant 
or variable) or a task entry, but not for a subprogram, package, or 
task wit. The meaning of an address clause supplied for a task 
entry is given in section F.5.5. 

An address expression for an object is a 32-bit segmented memory 
address of type system.address. 


C-7 




APPE24DIX F OF THE Ada STANCARD 


F.5.5 Internets 

A task entry's address claxise can be used to associate the entry 
with a UNIX internq)t. Values in the range 0..255 are meaningful, 
and represent the interrupts corresponding to those valxies. 

An interrupt entry may not have any parameters. 

F.5.6 Change of RepresentaticMi 

There are no restrictions for changes of representation effected by 
means of type conversion. 


F.6 Inplementation-Oependent Cooqponents 

No names are generated by the implementation to denote 
implementation-dependent components. 


F.7 Unchecked Conversions 

There are no restrictions on the use of unchecked_conversion. 
Conversions between objects ^ose sizes do not conform may result 
in storage areas with undefined values. 


F.8 Input-Output Packages 

A summary of the implementation-dependent ii^t-output 
characteristics is: 


In calls to open and create, the "form" parameter must be the 
enpty string (the default value). 

More than one internal file can be associated with a single 
external file for reading only. For writing, only one internal 
file may be associated with an external file; do not use reset 
to get around this nile, as files are internally buffered and 
output to the physical file will be different and possibly 
unpredictable or corn^ted. 

Temporary sequential and direct files are given names. 
Temporary files are deleted vhen they are closed. 

File I/O is buffered; text files associated with terminal 
devices are line-buffered. 

The packages sequential_io and direct_io cannot be 
instantiated with unconstrained cooposite types or record 
types with discriminants without defaxilts. 


C-8 





APraNDZX P OP THE Ada STANDARD 


P.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source prograns are presently 
liatited to 200 characters in length. 


C-9 




