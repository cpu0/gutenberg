iO /''/•' ' 


A Report on NASA 
Software Engineering and Ada 
Training Requirements 


• // ^ f 


/ 75 '^ 


(NASA— CR — 187 390) A REPORT ON NASA SOFTWARE 
ENGINEERING AND Ada TRAINING REQUIREMENTS 
Final Report (Houston Univ. ) 150 pCSCL 099 


rdS. LeGrand 


N9 1-13089 


Unci as 

G3/61 0312530 


SofTech, Inc. 

G. Freedman 

University of Houston-Clear Lake 


L. Svabek 


University of Houston-Clear Lake 


November 1 5. 1987 


Cooperative Agreement NCC 9-16 
Research Activity No. SE.17 



Research Institute for Computing and Information Systems 
University of Houston - Clear Lake 


TECHNICAL REPORT 



The 

RICIS 

Concept 


The University of Houston-Clear Lake established the Research Institute for 
Computing and Information systems in 1986 to encourage NASA Johnson Space 
Center and local industry to actively support research in the computing and 
information sciences. As part of this endeavor, UH-Clear Lake proposed a 
partnership with JSC to jointly define and manage an integrated program of research 
in advanced data processing technology needed for JSC’s main missions, including 
administrative, engineering and science responsibilities. JSC agreed and entered into 
a three-year cooperative agreement with UH-Clear Lake beginning in May , 1 986, to 
jointly plan and execute such research through RICIS. Additionally, under 
Cooperative Agreement NCC 9-16, computing and educational facilities are shared 
by the two institutions to conduct the research. 

The mission of RICIS is to conduct, coordinate and disseminate research on 
computing and information systems among researchers, sponsors and users from 
UH-Clear Lake, NASA/JSC, and other research organizations. Within UH-Clear 
Lake, the mission is being implemented through interdisciplinary involvement of 
faculty and students from each of the four schools: Business, Education, Human 
Sciences and Humanities, and Natural and Applied Sciences. ^ 

Other research organizations are involved via the “gateway concept. UH-Clear 
Lake establishes relationships with other universities and research organizations, 
having common research interests, to provide additional sources of expertise to 
conduct needed research. 

A major role of RICIS is to find the best match of sponsors, researchers and 
research objectives to advance knowledge in the computing and information 
sciences. Working jointly with NASA/JSC, RICIS advises on research needs, 
recommends principals for conducting the research, provides technical and 
administrative support to coordinate the research, and integrates technical results 
into the cooperative goals of UH-Clear Lake and NAS A/ JSC. 


A Report on NASA 
Software Engineering and Ada 
Training Requirements 



A Report on NASA 
Software Engineering and Ada 
Training Requirements 

Final Report 


15 November 1987 
Contract No. SE. 17 


Copyright 1987 SofTech, Inc. 
All Rights Reserved 


Prepared for 

National Aeronautics and Space Administration 
Washington, DC 20546 


Prepared by 


SofTech, Inc. 

1300 Bercules Drive, Suite 105 
Houston, TX 77058-2747 
(713) 480-1994 TVX: 710-3242-6401 



Preface 


This project was conducted under the auspices of the Research Institute for 
Computing and Information Systems. Overall technical direction for this research was 
provided by Dr. Charles McKay, Director, Software Engineering Research Center, 
LH-Clear Lake. Funding was provided by the Office of Space Station, NASA 
Headquarters through Cooperative Agreement NCC 9-16 between NASA/ JSC and 
LH-Clear Lake. The NASA technical monitor for this activity was Dr. Dana Hall, 
Acting Director, Information Systems Management Division, NASA Headquarters. 


The views and conclusions contained in this report are those of the authors and 
should not be interpreted as representative of the official policies, either express or 
implied, of NASA or the United States Government. 


ACKNOWLEDGEMENTS 


The NASA Softvare Engineering and Ada Training Survey vas performed by 
SofTech, Inc. in 1987 at their Houston Operation. John McBride vas the 
Program Manager and Sue LeGrand vas the Principal Investigator. 

Tvo individuals from the Softvare Engineering Professional Education 
Center (SEPEC) at the University of Houston-Clear Lake (UH-CL) participated 
this study. Lisa Svabek, Research Assistant, conducted interviews and 
analyzed the data. Dr. Glenn Freedman, Director of the SEPEC, recommended a 
NASA curriculum and implementation plan. 


SofTech, Inc. is grateful for the enthusiastic support and participation 
of the following respondents vho have helped to assure an appropriate, 
comprehensive plan for a NASA softvare engineering and Ada training and 
education program. 

UH-CL 

Dr. Charles McKay 

Softvare Engineering Institute (SEI) 

Dr. Norman Gibbs 
Project Office Survey: 

ARC: 

Robert Carlson/Computer Systems Division 

JPL: 


Allan Klump/Navigation Systems 

Ken Clark/Information Systems Engineering 

Headquarters: 

Bob Nelson/Space Station Program Office 

V. Wilson/Office of Safety, Reliability, Maintainability and 
Quality Assurance 


MSFC: 


John Volfsberger/System Softvare Branch 
Larry Taormina/Applications Softvare Branch 


ORIG'.HfU PAGE IS 

ac POOR QUM-fTY 


Larry Vilhelm/Design Engineering Directorate 
Rick Vesenberg/Electronic Systems Support Division 

LeRC: 

Kathy Schubert/Electrical Systems Division 
GSFC: 

Frank McGarry/Systems Development Branch 

Joseph Gi telman/SSIS Data Systems Manager, Space Station Office 
Tom Paradis/Space Station Program Office 
Lou DiMao/Space Station Program Office 

JSC: 

David Heath/Mission Design and Development Branch 
Michael Ruiz/Guidance and Navigation 
Robert Hinson/Software Development Technology — MPAD 
Cordelia Foster/Spacecraft Softvare Division 
Carlos Parra/Space Station Projects Office 
John DeFife/Advanced Programs Office (ED) 

Vayne Volz/Systems Development and Simulation (EF) 

Oron Schmidt/C and T Control and Monitoring (EE) 

P.N. Poulos/Avionic Systems (EH) 

Virginia Vhitelav/End to End Test Capability (EH) 

Cindy Draughon/Propulsion and Pover (EP) 

Clark Pounds/Simulation Development Branch (FS7) 

Gary Robinson/MCC Host Softvare (Systems Development Division) 

Education Office Survey 

JSC: 

Amy Kennedy 
GSFC: 

Carolyn Casey 

KSC: 

Tom Barron 


JPL: 

Cynthia Chinn 

ARC: 

Bob Carlson 

NASA Headquarters: 
Gina Filbert 
Rachel Villner 


TOiarm page is 

OF POOR QUALITY 


TABLE OP CONTENTS 



Pag* 

INTRODUCTION 

1-1 

1.1 Purpose and Scope 

1-1 

1.2 Overview 

1-1 

EXECUTIVE SUMMARY 

2-1 

2.1 Significant Findings 

2-1 

2.2 Recommendations 

2-1 

2.2.1 Rationale 

2-2 

2.2.2 Strategy 

2-2 

2.2.3 Recommendations 

2-3 


2.3 Overview 2-4 

2.4 Executive Review of Surveys 2-7 

2.4.1 Assumptions 2-7 

2.4.2 Significant Findings 2-8 

3 NASA SOFTWARE ENGINEERING AND Ada CURRICULUM PLAN 3-1 

3.1 Objectives of the Program 3_3 

3.2 The Context of the Program 3_4 

3.2.1 Software Engineering 3-4 

3.2.2 A Life Cycle Model to Support Software Engineering 3-4 

3.3 Education and Training Life Cycle 3-6 

3.4 Education vs. Training 3_7 

3.3 Training Lessons Learned from Other Ada Projects 3-8 

3.6 Software Engineering Curriculum Model 3-9 

3.6.1 Description of the Model 3-12 

3.6. 1.1 Job Description 3-12 

3.6. 1.2 Software Activities 3-13 

3.6. 1.3 Ada-Related Knowledge 3-13 

3.6. 1.4 Environments 3-16 

3. 6. 1.5 Skill Level 3-16 

3.6. 1.6 Project Size, Complexity and Extensibility 3-17 

3.7 Software Engineering with Ada Curriculum 3-17 

3.7.1 Core Curriculum 3-20 

3.7.2 Technical Topics 3-29 

3.7.3 Mentoring 3-30 

3.8 Summary 3-31 


VO- 125 


iii 


ORIGINAL PAGE! IS 

OF POOR QUALITY 


TABLE OP CONTENTS (Cont.) 


NASA SOFTWARE ENGINEERING AND Ada TRAINING IMPLEMENTATION PLAN 

4. 1 Introduction 

4.2 Delivery Options 

4.2.1 Education and Training Options 

4.2.2 Selecting an Option 

4.2.3 Combining Options 

4.3 Allocation of Resources 

4.4 Training Phase-In 

4.5 Recommendations 

DATA ANALYSIS 

5.1 Purpose 

5.2 Methodology of Data Collection 

5.2.1 Survey One: "Ada and Software Engineering 

Training Survey for Project Offices" 

5.2.2 Survey Two: "Ada and Software Engineering 

Training Requirements Survey for Education Offices" 

5.3 Distribution 

5.4 Respondents 

5.5 Analysis of Results — Project Offices 

5.5.1 Description of the Survey Instrument 

5.5.2 General Findings — Project Offices 

5.6 General Observations from the Respondents 

5.7 Conclusions — Project Offices 

5.8 Analysis of Results — Education Offices 

5.8.1 Description of the Survey Instrument 

5.8.2 General Findings — Education Offices 

5.9 Conclusions — Education Offices 

5.10 The Similarities and Differences between Project Office 
"demands" and Education Office "supplies" 

SUMMARY 


°?omi Pfi GF K 

0t *** ouSiv 


Page 

4-1 

4-1 

4-2 

4-2 

4-2 


4- 6 

5- 1 

5-1 

5-1 


5-2 

5-2 

5-3 

5-3 

5-5 

5-5 

5-6 


5-8 

5-9 

5-11 

5-11 

5-12 

5-13 

5- 14 

6 - 1 


TABLE OP CONTENTS (Cont.) 


Appendices 

A SURVEY INSTRUMENTS 

B SURVEY DISTRIBUTION 

C DETAILED FINDINGS - PROJECT OFFICES 

D ACCUMULATED FINDINGS - PROJECT OFFICES 
E PROJECT OFFICES IN SUPPORT AREAS 

F SUMMARY OF Ada EXPERIENCE FOR PROJECT OFFICE PERSONNEL 
G PROJECT DATA 

H DETAILED FINDINGS - EDUCATION OFFICES 

I ADDITIONAL PERSONS RESPONSIBLE FOR TRAINING 

J SOFTWARE ENGINEERING AND Ada COURSES TO BE OFFERED BY NASA 
CENTERS 

K JSC HISTORICAL COURSE INFORMATION 

L ACRONYMS AND ABBREVIATIONS 

M REFERENCED DOCUMENTS 


LIST OP ILLUSTRATIONS 


Pigure 







Page 

3-1 

Clear Lake Model for Software Engineering and 

Ada Curriculum 

3-11 

3-2 

Emergence of Software Problems with Growth in 

System Complexity 

3-18 

3-3 

Curriculum Map 


3-22 

3-4 

General Courses (G) 


3-23 

3-5 

Management Courses (M) 


3-24 

3-6 

Technical Courses (T) 


3-25 

3-7 

Software Engineering with Ada Core Curriculum 




Job Descriptions and Skill Levels 


3-27 

3-8 

Software Engineering with Ada Activities 


3-28 

4-1 

Education and Training Options 


4-3 

4-2 

Personnel Training Over Time 


4-5 

4-3 

Vertical Phasing of the Curriculum 


4-7 



Section 1 


INTRODUCTION 


1.1 Purpose and Scope 


NASA has been tasked to build a Space Station that involves large, 
complex, distributed systems, and Ada is the programming language of choice 
for this effort. NASA personnel are expected to have the technical expertise 
to manage projects and monitor contractors, but there is concern that the 
current skill base in Ada and software engineering is inadequate. 


The purpose of this report is to assess NASA's softvare engineering and 
Ada skill base and to provide information that may result in new models for 
software engineering and Ada training plans and curricula. The scope of this 
report was to provide a quantitative assessment which will reflect the true 
requirements for software engineering and Ada training across NASA and a 
recommended implementation plan including a suggested curriculum vith 
associated duration per course and suggested means of delivery. The report 
recognizes the distinction between education and training. Although it was 
directed to focus on NASA's needs for the latter, the report also identifies 
kty relationships to software engineering education. 


1.2 Overview 

Softvare engineering is an emerging, dynamic discipline. Neither 
industry, government nor university programs are well established in this 
area, nor is there consensus about who should know what when. This report 
details a rationale and strategy for implementing a life cycle education and 
training program in support of improved software engineering practices and the 
transition to Ada. 


VO- 125 


1-1 


ORiGSNAL PAGE IS 

OF POOR QUALITY 


Throughout this report there is an assumption that Ada is a programming 
language that supports the goals of sound softvare engineering. Ada is a poverfui 
language and it enables one to more easily enforce good practice. Without a firm 
understanding of softvare engineering, including but not limited to the computer 
science aspects, the engineering aspects, and the managerial aspects of the 
process, the use of Ada is not fully effective. 

This report is based on tvo important efforts. The first effort vas a pair of 
surveys conducted to determine softvare engineering and Ada training requirements 
for all of NASA. Only NASA personnel vere counted. No industry personnel vere 
considered in the requirements. One survey vas designed to obtain information 
from each NASA Education Office. It asked questions such as: hov present 

training activities are initiated and implemented, vhat softvare engineering and 
Ada training activities have been used, vhat vas the audience of these activities 
and hov the center evaluates training activities. 

The other survey vas addressed to the program offices of each NASA center that 
have or are planning an Ada project. It asked for plans for Ada projects, 
descriptions of each Ada project, estimates of personnel needing Ada training and 
a description of softvare development policies of different organizations. 

The second important effort vas the formulation of a NASA softvare engineering 
and Ada curriculum and implementation plan. It uses a six-dimensional model to 
identify individual training needs. This is based on input from the surveys and 
extensive research and education experience in providing softvare engineering and 
Ada training for DoO organizations by UH-CL and SofTech. 

Section 1 has introduced this study. 

Section 2 provides the key issues and main focus of the overall project. 
Pertinent information on significant findings and recommendations are provided. 

Section 3 details a rationale and strategy for implementing a life cycle 
education and training curriculum in support of softvare engineering programs vith 
Ada. The section discusses six important areas: 




VO- 125 


1-2 


o A review of objectives of the program curriculum 

o The context of the program curriculum 

o Lessons learned from other Ada programs 

o The software engineering and Ada education and training model 

o A SE and Ada education and training curriculum 

o The development of long-term implementation strategy 

Section 4 of this report contains a NASA Software Engineering and Ada 
Training Implementation Plan. Training recommendations are given for 
personnel ip management, technical and support roles. The implementation plan 
consists of a core curriculum, technical topics and on-the-job training. 
Allocation of resources and phase-in are discussed. 

Section 5 contains a summary of the results of the surveys. They contain 
combined results of interviews with over forty respondents involved in either 
NASA training or NASA projects. These respondents, in turn, each reported on 
the requirements within their organization and NASA center. Ah effort was 
made to obtain input from every applicable group needing or planning for 
training. See the Table of Contents for specific areas of interest. 

Appendices A through K provide supporting information to this report such 
as: sample surveys, summary of NASA Ada experience and historical course 

listing. Appendix L shows the acronyms and abbreviations used in this report. 
Appendix M shows referenced documents. 


VO- 125 


1-3 


ORfCiSNAL PAGE !S 

OF POOR QUALITY 


Section 2 


EXECUTIVE SUMMARY 


This report outlines the significant findings and recommendations for for 
implementing softvare engineering and Ada training vithin NASA. 


2.1 Significant Pindinf s 

NASA Program and Project Office Management are anticipating 150 projects 
that will employ the Ada programming language vithin the next five (5) years. 
NASA personnel must be knowledgeable about Ada and softvare engineering 
principles and practices to ensure effective system development and evolution 
for these projects. 

To date, however, few NASA personnel, generally 25X or lass of the members 
of project teams responsible for these projects (management, technical and 
support) have been exposed to Ada or modern softvare engineering 
methodologies. The average level of experience in Ada related projects for 
the sample population of this study was zero for management and support 
personnel and under six months for technical personnel. 

To support the planned Ada projects, the results of two surveys revealed 
that NASA Project Managers expect the number of NASA personnel requiring 
training in these areas to be at least 300 management, 680 technical and 145 
support staff over the next five-year period. This does not include any 
contractor personnel, and in many cases it includes only NASA monitors of the 
projects. 


Based on the application of the model to NASA and the design of an 
implementation strategy, a number of lessons have been learned. First, 
training needs to be considered in life cycle terms just as softvare is. 
Second, significant cost-benefits accrue from planning for training in the 
same way that ve plan for softvare: with a complete requirement definition, 


VO-125 


2-1 


ORIGINAL Pf-QZ IS 

OF POOR QUAL5TY 


requirement analysis and design preceding implementation. Third, the process 
of planning for training is, in itself, an educational enterprise; one vhich 
sensitizes management to the need for long-term planning and costing. 


Some of the more significant findings include: 


o The range of Ada and SE experience vithin the existing personnel base 
demonstrates a general lack of related experience among all three 
personnel types included in this survey (management, technical and 
support). (See Section 5.5.2) 

o Implementation policies and procedures (for Ada), do not reflect the 
rate of grovth anticipated. Only one respondent has a short term 
implementation plan that is documented. (See Section 5.5.2) 

o Sixty-five percent of the respondents cite the average experience in 
Ada for their management staff to be zero experience. (See Appendix 
F) 

o Seventy-seven percent of the respondents cite the average experience 
level in Ada of their technical staff to be six months or less, vlth 
one-third of the respondents citing zero experience. (See Appendix F) 

o Eighty-eight percent of the respondents cite the average experience 
level in Ada for their support staff to be zero experience. (See 
Appendix F) 

o Less than half of the respondents have produced documented software 
development policies. (See Appendix C) 

o Many respondents feel that the length of training must be increased 
dramatically. (See Section 5.6) 

o Upon examination of training programs scheduled at JSC, GSFC, and 
KSC, the three heaviest users of softvare engineering and Ada 
training, with fev exceptions, all courses presently scheduled are 
three days or less in duration. (See Section 5.10) 

o One respondent recommends specifically: "Provide a coordinated, 

integrated education program in the areas of softvare engineering and 
Ada. A standard curriculum should be identified and implemented to 
provide universal training to both civil servants and contractors. 
Perhaps this effort should be initiated by NASA Headquarters". (See 
Section 5.6) 


U0-125 


ORIGINAL PAGE IS 

OF POOR QUALITY 


2-2 


2.2 Recommendations 


Given the NASA plans, chis project defined a model craining program that, 
if implemented in NASA, vould provide a consistent, effective craining program 
to NASA personnel in various job descriptions and levels of responsibility. 
This model program is based upon the premise that softvare engineering and Ada 
training requires a long-term commitment. This in essence means the model 
program must be flexible to accommodate the changing requirements of the 
environment. This model program takes into account the need for change, and 
the differing needs of the various personnel groups vho are directly or 
indirectly affected by softvare engineering principles and practices and the 
Ada programming language. 

A training program is recommended that includes the following components 
to supplement university courses: 

o A core curriculum to serve as the standard for softvare engineering 
education and training proficiency, 

o Technical topics vhich provide depth, timeliness and responsiveness 
to the core curriculum and 

o A mentoring system consisting of meetings, conferences and on-the-job 
training to meet job specific training needs. 

Once the model curriculum is established, based on the requirements 
definition and organization's requirements analysis, the organization must 
implement the plan. The steps to implementation include identifying a 
delivery system for each course, topic and mentoring strategy. In parallel, 
the project managers must identify the personnel vho vill need training and 
work with the training coordinators to match persons with training programs. 
Then, begin training by phasing in the courses, including knowledgeable 
employees for quality control and organizational integrity. 


jjpSlWAC PAG!- K 

0F POOS Quality 


UO-125 


2-3 


Section 3 


NASA SOFTWARE ENGINEERING AND Ada CURRICULUM PLAN 


This section describes a framework for a life cycle education and training 
program for organizations (e.g., NASA) chat engineer large software systems in 
Ada. This section is divided into seven parts: 




3.1 

Objectives of the Program, 



3.2 

Context of the Program, 

-- ^ - 


3.3 

Education and Training Life Cycle, 



3.4 

Education vs. Training, 



3.5 

Training Lessons Learned from Other Ada Programs, 



3.6 

Software Engineering Curriculum Model, and 

— 


3.7 

Software Engineering with Ada Curriculum. 


The approach used to generate the curriculum is a process known as 
~ interactive curriculum modeling, in vhich a model of the curriculum field is 

defined, relevant data are analyzed from the field sites, and course modules 
__ are developed in conformance to the model. Over time, the substance of a 

specific module might change, but the model would not be altered substantially. 

Vithin the model, there are both educational and training activities. The 
model is comprehensive, in the sense that the fields of software engineering 
and Ada are covered completely, with flexibility to add, delete, or modify the 
programs as the particular environments may change. No one curriculum can 
serve all respondents perfectly well; therefore, flexibility and program 
management of a curriculum are no less important for education and training 
than for software. In fact, for the sake of consistency, the same life cycle 
metaphor has been used for curriculum and software. Also, there is an attempt 
— in this report to quantify the model in terms of training time and 

^ alternatives. 


UO-125 


3-1 


ORK3?^AL PAGE JS 

OF POOR QUALITY 


Readers should bear in mind a number of important considerations. First, 
the need for both definition and development of software engineering 
environments is crucial to the success of the curriculum. The procedures and 
guidelines that operate in a software engineering environment are powerful 
training devices in and of themselves. A curriculum both helps establish a 
software environment and it follows the environment; clearly, the process is 
synergistic. Factors such as personnel expertise, software environment, 
project complexity and scale will influence precisely what curriculum modules 
a person might need to take. 

Second, the training model should be cohesive and orderly. So long as 
every organization with training funds can choose their own model, the 
training process will likely be unaccountable. With consensus about a core 
curriculum, there is room for diversity and individualization without 
sacrificing accountability and credibility. With a core curriculum, such as 
the one proposed herein, there is a standard against which to measure the 
entire program and the local responsiveness to it. While it is not the 
purpose of this report to practice pedagogy, there are a number of clear 
guidelines for the training programs. For example, hands-on training with Ada 
as a design and development tool is preferred to lecture-only or CAI-only 
classes. The same hands-on approach is true for all phases and activities of 
the life cycles. Of greater importance, a well designed core curriculum 
provides a common foundation of concepts, principles, models and methodologies 
that greatly facilitates clear and substantive communication among all who 
successfully complete this core. Ada training should be timed with actual 
project work. Preparatory training should emphasize sound software 
engineering practices. Clearly, there must be a firm management resolve to 
use Ada. The record of Ada use indicates that the benefits of Ada for the 
long term far outstrip the risks of transition to Ada. However, Ada is only a 
language, and can be misused just as any other language can be. 

Third, it will likely take two to four calendar years to build and 
implement a complete education and training program. This estimate is based 
on the experiences of DoD organizations and industry. The long development 
time for the program is due to the number of respondents involved, the 


UO-125 


3-2 


G&lQiNAl pfiac »<* 

0f 




evolution of the environments being supported and the increasing complexity of 
NASA projects, while at the same time maintaining a core of courses for nev 
hires. However, a curriculum could be established within two years. The 
curriculum will evolve as nev tools, standards, methodologies, and other 
changes influence it. 


There are some obvious needs for immediate training in Ada, as the surveys 
point out. However, short-term Ada language (syntax and semantics) will not 
provide a sound software engineering skill base especially when the trainees 
are experienced in other languages. To invoke an analogy, the world's 
greatest playground, one-on-one basketball players rarely make it to the 
professional ranks. One reason is that professional basketball demands 
discipline to structure one's skill. Similarly, the world's best programmers 
may not always be well suited to work in the discipline of software 
engineering without coaching and a commitment to teamwork. 


3.1 Objectives of the Program 

The purpose of this section is to recommend a comprehensive life-cycle 
curriculum for software engineering with Ada. 

The objectives include: 

o Identification of a model upon which to base Ada training 

o Identification of a core curriculum to support Ada software 

activities 

o Identification of activities to support the curriculum 


3.2 The Context of the Program 


3.2.1 Software Engineering 

Software Engineering is the establishment and application of sound 
engineering: 

o Environments, 

o Tools, 

o Methods, 

o Models, 

o Principles, and 

o Concepts 

combined vith appropriate: 
o Standards, 

o Guidelines, and 

o Practices 

to support computing which is: 
o Correct, 

o Modifiable, 

o Reliable and Safe, 

o Efficient, and 

o Understandable throughout the life cycle of the application. 


3.2.2 A Life Cycle Model to Support Software Engineering 


The software life cycle has several phases, all of which must be 
incorporated into an education and training program. These phases, as 
presented by Dr. Charles McKay, UH-CL, are consistent with the NASA Life Cycle 
Model. The seven phases are: 

o PI System's Requirements Analysis 

o P2 Software to Hardware to Operational Requirements 
o P3 Software-Hardware-Operational Specifications 


VO- 125 


3-4 


o 


P4 


Sof tvare-Hardvare-Operational Design 

o P5 Component Development and Integration 

o P6 Acceptance Testing 

o P7 Maintenance and Operations (Sustaining Engineering) 

McKay defines a phase as: A defined set of input conditions that, vhen 

met, trigger an iteration through the phase. There is a defined set of output 
conditions associated vith each triggered iteration. Each phase: 

o Has a distinct purpose, 

o Has a distinctive set of documentation requirements as the interface 
to the next phase, 

o Is/Should be based upon a model of the requirements associated vith 
conducting the work of the phase, 

o Should be complemented by a methodology which features good 
engineering within the phase, and 

o Should be supported by the methodology's own set of technical and 
management tools to facilitate productivity and quality. 

A review of Ada's history reveals that the language was developed to 
support the goals and principles of software engineering. Indeed, Ada can be 
as poorly coded as can any language. It is the sound use of engineering 
practices, defined in the emerging field of software engineering and supported 
by Ada, that results in sound software. 

Thus, for this report Ada is considered as a programming language, as 
specified in the Language Reference Manual for the Ada Programming Language. The 
most effective use of Ada, or any other programming languages, is as a part of 
the discipline of software engineering. Recent Ada training reports have 
indicated that while it may take 5 days for a knowledgeable programmer to learn 
Ada syntax, it takes 6-9 months to evolve into a programmer that correctly uses 
the language to help engineer good software. Interviews with project managers 
attest to the phenomena of experienced programmers with years of FORTRAN or C 
experience, bucking the transition to Ada. Meanwhile, recent graduates, educated 
in software engineering, are quick to adjust to Ada and flourish. Clearly, both 
groups must be represented in the curriculum, as indeed they are. 


3.3 Education and Training Life Cycle 


Just as there is a softvare life cycle, so too there is an education and 
training life cycle. The phases and activities are the same; the consequences 
for abiding or not abiding by the activities of the phases are also similar. 

The history of Ada training in the United States teaches a number of 
important lessons, and many difficulties vill be (or may be) overcome by 
paying more attention to educational requirements definition, analysis and 
design prior to instruction. Also, just as a good software manager would not 
expect to reuse code without carefully considering the consequences, so too 
should managers ask if a specific program developed for one audience should be 
reused by another. 

One respondent mentioned that he wished there had been more software 
engineering training prior to his team's project. What he found was that his 
team, lacking a rigorous design strategy, ended up learning on the job, thus 
running over budget and past schedule. The lesson was clear: The manager had 

paid for training post hoc, and it was costly, haphazard, and frustrating due 
to the consequences to the project. Indeed the total cost for unplanned, post 
hoc training is higher than having proper training at the right time of the 
project . 

The education and training life cycle is similar to the software life 
cycle in the need for solid management commitment. There is an old joke that 
no one gets elected to Congress by promising short term costs to achieve long 
term benefits. The software record is again clear. Training pays off, but 
without management support, the best training designers are doomed to failure. 
Management support for Ada training means money and time. 

In summary, education and training programs must be engineered for change. 
A well engineered curriculum vill result in a means to adapt the basics to 
many diverse computing environments. 


VO-125 


3-6 



3.4 Education vs. Training 


Education refers to the processes used in teaching and learning to produce 
knowledge and highly generalirable skills needed to reason and solve problems. 
Training, on the other hand, refers to teaching and learning, in the narrower 
sense, to produce skills to accomplish a specific, practical goal. In brief, 
education answers the question "Vhy" and training answers the question "How." 
Both questions are important, obviously, and answering one without the other 
results in an ill-prepared employee. For this report, the emphasis is on 
training. Clearly, the universities emphasize education and should be 
included as partners in project implementation. 

There are a number of key questions that must be answered in order to 
design any curriculum. In the instance of Ada and software engineering, the 
field is so new and the common understanding of the field is so fragmented 
that the issues become more important to specify. 

Nonetheless, the initial questions that must be addressed remain: 


o Vhat is the difference between education and training? 

o Vhat is software engineering? 

o Vhat is programming? 

o Vhat does a software engineer do? 

o Vhat does a programmer do that practices good software engineering 

principles? 

o How do we train a software engineer? 

o How do we educate a software engineer? 

o Vhat is the relation between Ada and software engineering? 

The education and training perspectives were defined above. The 
definition of software engineering is still emerging. One respondent noted 
that he didn't know what one was, but he would know a software engineer if he 
saw one - much like good art. To attempt to bring more order to the emerging 
field, the Software Engineering Institute has striven to provide curriculum 


VO-125 


3-7 


and guidance to the software education community. Drawing on the work of 
Richard Fairley, one might define a software engineer as one who has mastered 
the "technological and managerial discipline concerned with systematic 
production and maintenance of software products that are developed on time and 
within cost estimates." Good programmers apply the principles of software 
engineering during design and development, however, good software engineers 
apply these principles across all phases and activities of the life cycle. 


A software engineer is one who is knowledgeable in computing, engineering, 
project management, and human resource management. This interdisciplinary 
definition has resulted in software engineering having a difficult time 
finding a clear academic home and helps explain why so few universities have 
veil defined curricula. Again, the Software Engineering Institute is leading 
the way, but in the absence of well integrated academic programs, industry and 
government have developed their ovn, albeit generally incomplete, training 
programs. It will take at least ten years before software engineering gains 
the level of academic respect now accorded other engineering disciplines. 


Often "incomplete" training programs result from a misguided perception 
that knowing Ada syntax means knowing Ada. While certainly important, Ada 
syntax is but a part of a complete software engineering environment that Ada 
supports. Thus one could possibly be a software engineer without knowing Ada 
but one could not use Ada effectively without being a good software engineer. 
As Ada supports the principles and goals of software engineering successfully , 
the relationship between Ada and software engineering is quite compatible. 


3,5 Training Lessons Learned from Other Ada Projects 


0 


cZL traini !: g pap ?f presented at Ada Expo '86, at the Washington Ada 
uSJ fie? i! nd at w 11 Softvar « Engineering Institute Workshops in 
1986-1987 have echoed the same recurring themes: 


a) Managers typically underestimate the cost and time for training 

b) Managers typically overestimate their employees knowledge of 
software engineering, at the beginning of Ada projects. 



0 Indeed, many programmers viev themselves as software engineers, but 
their definition is often restricted, and certainly not as broad as 
implied by contemporary software engineering scholars such as Charles 
McKay (1987), Victor Basili (1986), and Richard Fairley. 

o After up to fifteen years of corporate software engineering training 
in companies such as IBM and Martin Marietta, some patterns have 
emerged that are most instructive for NASA. These more successful 
programs have helped identify potential pitfalls. Probably the two 
quickest paths to Ada training failure are lack of clear management 
support and what one might call "Programmer's Delight." Programmer's 
Delight is a condition in which someone, a manager or a programmer, 
views a software project in terms of code, rather than in life cycle 
terms. Unfortunately, they tend* to viev projects idiosyncratically , 
and in the arena they find most comfortable, usually programming in 
the small. To counterbalance this tendency to over rely on code, 
adherence to life cycle models should be encouraged for training as 
well as software development. 

o Ada training is the most difficult for the person who: 

o has been exposed to softvare life cycle issues only through 
programming in one sequential language, 

o has had long experience (successfully or unsuccessfully) on 
small (e.g., no parallelism or distribution of processors, no 
fault tolerance requirements projects, and 

o who is inflexible in his/her attitudes. 

o On the other hand, successful Ada training is notable for strong 
management support and a commitment to a long term training plan. 
However, training is NOT enough. Training programs should be 
augmented with educational programs: university classes, 

conferences, and other options identified below. Consultants are 
most effective in training in-house experts, who then must transfer 
the knowledge to others. Further, there must be user support 
services at all levels of training to back up the initial training 
systems . 


3.6 Softvare Engineering Curriculum Model 

A comprehensive view of a curriculum enables anyone to conceptualize an 
entire training program and its outcomes quickly and accurately. For planning 
purposes this view allows respondents to chart accomplishments, reduce 
redundancy, eliminate gaps, and adjust the sequencing and pacing of the 


components . 


resulting in 


The prevailing image of the life cycle is two-dimensional, 
training models that are usually tvo dimensional. 

The Clear Lake Model for Software Engineering and Ada Curriculum has six 
dimensions (See Figure 3-1): 

o Job Description 

o Job Activities 

o Software Engineering Knowledge 
o Environments 

o Skill Levels 

o Project size, Complexity, and Extensibility 

To design a comprehensive life cycle curriculum for software, a number of 
factors must be considered. This model is based on the best of the existing 
software engineering and Ada training programs. These programs include those 
identified in AJPO's Catalog of Resources for Education in Ada and Software 
Engineering. The most significant Ada and Softvare Engineering resources have 
been Software Engineering Institute, the now defunct Wang Institute of 
Graduate Studies, Keesler Air Force Air Training Command, SofTech, a review of 

forty-seven commercial vendors' programs and a review of thirty-one university 
courses. 


The first feature of a comprehensive education and training program is the 
core curriculum. It is important to keep in mind that the core curriculum is 
analogous to the human skeleton; it is the structure, upon which we add 
innumerable features. Thus, the core curriculum is then the first component 
of the education and training plan. The second feature, dubbed "Technical 
Topics," features intensive technical, vork-related presentations. While this 
proposal provides sample technical topics, they are best defined by individual 
centers to meet local needs in a timely fashion. Suffice it to say that 
technical topics presentation on any particular topic, say, Ada generics, 
might take the form of videotape, computer based training, a workshop, a 
conference presentation, or an article. What is necessary is that NASA has to 


WO- 125 


3-10 


SOFTWARE ENGINEERING WITH Ada- 
A DEFINITION OF THE FIELD 
WITH CURRICULAR OPTIONS 



O 

N 

S 


3. SOFTWARE ENGINEERING KNOWLEDGE 


r 


4. ENVIRONMENT: HOST, TARGET, INTEGRATION ' 
f* INTRODUCTORY, INTERMEDIATE, AOVANCED 

6. PROJECT SIZE/COMPLEXITY/EXTENSIBILITY: SMALL 
LARGE COMPONENT, AI-SASED 


Pigure 3-1. Clear Lake Model for Software Engineering and Ada Curriculua 







be able to respond to technical training needs in an effective way, based on 
the needs of the staff. 

A third crucial feature of a comprehensive education and training program 
is one called "Mentoring," referring to on-the-job training, support services, 
user guides, on-site gurus, and references. Mentoring includes reinforcing 
good software engineering practice through evaluations, walk-throughs, 
reviews, and meetings. The goal is to make the software engineering with Ada 
a part of the organizational culture by infusing it into every layer of the 
software activity. 

Given the enormous range of technical topics and detail, structure must be 
brought to the software engineering with Ada education and training world. In 
this report, the six-dimensional model is developed; including the job 
description, activities, knowledge, environments, project size, and skill 
levels of the personnel. Based on these features and the model's application 
to the NASA context, a curriculum map has resulted that carefully plots a core 
curriculum for NASA and support activities that augment the core. 


3.6.1 Description of the Model 


3.6. 1.1 Job Description 

a) Management: 

Responsible for expertise in budgeting, logistics, personnel 
oversight and other life cycle management activities 

b) Technical: 

Responsible for expertise in developing and sustaining software 

c) Support: 

Responsible for support activities for management and technical staff 

Specific job descriptions can be developed for a given site. However, 
within these general categories most job categories or responsibilities 
can be placed. 


3.6. 1.2 Software Activities 


a) Life Cycle Activities 

i) Systems Requirements Analysis: The requirements for the 

computer automated system are identified in this phase without 
regard to how the requirements will be decomposed and allocated 
to some collection of software, hardware, and operations 
(adapted from NASA Life Cycle Model (1986) and McKay et al. , 1986). 

ii) Software to Hardware to Operational Requirement Analysis: 3oth 

the near term and the anticipated life cycle requirements are 
first analyzed to see how software— the predominant cost and 
risk factor — can be used to meet the system level requirements. 

Next the combination of systems and software requirements are 
mapped to hardware requirements. Next the combination of 
systems, software, and hardware requirements are complemented by 
the operational requirements which includes the human machine 
interfaces . 

iii) Sof tvare-Hardware-Operat ional Specifications: The behavioral 

specifications of what must be demonstrated by each of the 
respective components at acceptance test time are determined 
here. Unlike other languages, Ada has managed to have a formal 
interface to this phase. The design specif ications of the Ada 
components can be separately compiled and maintained on-line 
long before design and development have begun, using an 
executable specification tool. 

iv) Software-Hardware Operations Design: The raspective components 

are designed to meet the behavioral specifications established 
in the preceding phase. Ada allows the execution of the design 
to prove that the logical properties are correct including the 
design of parallel, fault tolerant components. 

v) Component Development and Integration of Components: The 

refinements and optimizations that will make the individual 
components and the sub-assemblies of components cost effective, 
adaptable and reliable begin in earnest. This is where 
"programming" in the chosen development language begins. In 
Ada, many of the components of the design phase may not require 
any additional tuning or optimization. Thus a design component 
may also become a development component with the attendant 
savings. 

vi) Acceptance Testing of the Initial Operating Configuration: 
Acceptance testing demonstrates that the entire system meets the 
behavioral specifications established in the third phase. 


VO- 125 


3-13 


vii) Maintenance and Operation: Typically » this is 80-90X of today's 

large system life cycle costs. Some of this cost is due to 
error which escaped acceptance testing. Much of the cost is 
because of varying requirements. It is inordinately difficult 
to make the slightest change to software developed in 
traditional languages without side effects that cause a major 
effort to be expended in making the change and cleaning up these 
side effects. 

b) Control Activities 

i) Documentation: Documentation is required for systems, software, 

hardware, and operational procedures. Documentation is a major 
expense in the life cycle of the project. The standard which 
describes the requirements for documentation is referred to as 
DOD-STD-2167 . 

ii) Quality Management: This is often considered as verification 

and validation, representing the many activities of quality 
management. Please note that quality management means much more 
than traditional "software testing." It includes metrics, 
performance, and reliability modeling, quality and safety 
assurance. For NASA, standards describing the minimum 
requirements are defined by the SMAP, SSB, SSIS, THIS and other 
sources. 

iii) Configuration Management: This activity is responsible for 

controlling past, present and future baselines of the various 
configuration items for each of the phases of the life cycle. 

iv) Information Management, Library and Object Based Management 

Systems: This architectural layer refers to the work to be 

accomplished by the distributed data base systems in the host 
environments. 


c) Management 

These activities relate to the general activities of the manager of a 
software project, including but not limited to, costing, scheduling, 
budgeting, resource allocation, metrics and their application, and 
general oversight. 

d) Support Activities 


These activities exclude the necessary software life cycle provisions 
to maintain smooth operations. 


i) Training: There must be a well regulated set of training 

options available. 


ii) Installation: Software and hardware products must be procured 

and installed in various host, target, and integration 
environments. Veil-trained personnel must provide this service 
and retain system integrity. 


VO- 125 


3-14 


ORIGINAL PAGE IS 

OF POOR QUALITY 



iii) Transition: Just as many software projects are making a 

transition to Ada, so to will significant changes be made in 
methodologies, tools, environments and even standards across 
long life cycles. These changes down to the smallest detail 
must be managed and implemented. 

iv) Legal and Procurement: One of the fastest growing areas of 

legal debate is software related: from data rights, to reuse of 

packages, to contractual agreements, software is an important 
consideration. 


3.6. 1.3 Ada-Related Knowledge 


a) Software Engineering Culture 

To use Ada effectively, one should join the Ada culture of software 
engineering. Of course, recognizing a culture is easier than 
defining one, but a sound software engineering culture is noted for 
the shared vocabulary, goals, norms and values of the membership. 
There is also a shared intellectual foundation built upon the 
concepts principles, and models of software engineering that Ada was 
designed to support. For example, one distinguishing feature between 
Ada and C culture might be the Ada culture's intensive significance 
placed on analysis and design, relative to the importance of coding. 

b) Methods 

Ada users should work within methodological boundaries, whether 
object-oriented design, structured analysis, top-down analysis, or 
object-oriented design, or other appropriate methodology, variation, 
a clear methodological basis is established for each life cycle phase 
and then followed. 

c ) Languages 

Ada has no subsets, but Ada does have a richness that lends itself to 
continual study and refinement. Clearly there must ;e a minimum 
knowledge of Ada for a software engineer to be effective in the 
environment . 

d) Assessments 

Traditional metrics do not seem to apply in Ada environments. For 
example, lines of code is not a reasonable metric if one invests more 
time in design, relative to coding. Usually in a sound Ada 
environment there will be fewer errors at testing, more reusability 
and other new factors. The ease of reliably adapting Ada software to 
meet new requirements in a timely manner is a significant benefit 
that deserves empirical verification and validation. This means 
measurement tools must be developed or modified and their use taught 
to and accepted by NASA personnel. 

VO-125 



e) Communications 


Often overlooked in software engineering activities is the need for 
effective communications. Writing clear documentation and 
maintaining useful records is hard work. Software engineers should 
be able to communicate well to others, both through presentations and 
documentation. Technical writing classes and presentation courses 
are both helpful, especially if reinforced by good management models. 


3.6. 1.4 Environments 


a) Host Environments 

Systems and software are developed and sustained in these 
environments. Softvare "tools and rules" are imported/built on an 
architectural framework to provide automated support to the designers 
and developers and to those who will sustain the computer automated 
system throughout the life cycle. 

b) Integration Environment 

For programs such as the Space Station Program, this is the bridge 
between the host and target environments. Control is maintained of 
the target environments systems and softvare baseline (i.e., all 
versions, revisions, and releases of hardvare, softvare, operational 
procedures, etc.). This is also the environment vhere final 
verification and validation is performed prior to advancing the 
currently existing target environment base line. Test and 
integration plans are developed and administered in this environment. 
Interactions with the target environment under emergency conditions 
may be controlled from this environment. 

c) Target Environment 

The target environment refers to the computing environment in which 
the softvare will be used. The final test for the usefulness of the 
softvare lies in its functionality and safety in the target 
environment . 


3.6. 1.5 Skill Level 

Any given activity has some skill level, whether an introductory level, an 
intermediate level or an advanced level. However, the fact that a person has 
advanced skills in one area (for example, coding) does not mean that he or she 
has advanced skills in another area (for example, requirements analysis). A 



good Ada software engineer may have intermediate skills or no skills in many 
facets of the field, with advanced skills in a fev areas. 


3. 6. 1.6 Project Size, Complexity and Extensibility 

One observation in software engineering has been that large, complex, 
distributed, non-stop software systems cannot be scaled up from the concepts, 
principles, models, methods, tools and environment of small-scale projects 
without enormous cost and risk. Referring to the chart prepared by Mary Shaw, 
of the Software Engineering Institute, one can readily see the significant 
differences among software project sizes and levels of complexity. (See 
Figure 3-2). Projects with incremental evolution over a long life cycle 
exacerbate this "scaling direction problem." Fortunately, the challenge of 
understanding the more difficult applications has resulted in a stronger 
intellectual foundation for software engineering as demonstrated by the 
relative ease of scaling-down these concepts, principles, etc. to successfully 
meet the requirements of smaller and simpler applications. 

In addition, training modifications must be included to reflect the scale 
of the project. For example, videotapes designed to teach a person to code 
small-scale projects on his own may not be appropriate for a person working on 
a module for the Space Station Project, a massive undertaking. In fact, such 
a videotape may do more harm than good if the person begins to tinker with 
design specifications. 


3.7 Software Engineering with Ada Curriculum 

A comprehensive life cycle curriculum based on the Clear Lake Model 
assumes that there is a clear sense of the job descriptions involved (See 
Section 5), a sense of software engineering knowledge and activities (See 
Section 3.6), and knowledge of the specific skill levels, computing 
environments, and projects, three domains best defined in the context of a 
particular center. 



UO-125 


Pigur« 3-2. Emergence of Software Problems with Growth 
in System Complexity 



0R1G5NAL PAGE 19 
OF POOR QUALITY 


To match the complexities of software engineering to the varieties of NASA 
operations, this section specifies a three part approach. First, a software 

engineering with Ada core curriculum to serve as the standard for software 

education and training proficiency; second, technical topics which provide 
depth, timeliness, and responsiveness to the core; third, a mentoring system 
is proposed to provide on-the-job training in a variety of formats to meet job 
specific training needs. 

Ada is a tool that has proved useful in supporting good software 
engineering practices. A course that teaches Ada syntax is easily labeled an 
Ada course. Some courses are on the topic of Ada but treat software 
engineering issues. They include: 

o Managing the Transition to Ada 
o Managing Ada Projects 
o Ada as a Common Program Design Language 

Other courses are taught for the purposes of training good software 
engineers and the Ada language is used in the course. These courses should be 
categorized as software engineering. The subjects include: 

o Software Systems Review 

o Software Design 

o System Requirements Analysis 

o Library and Object Base Management 

o Quality Management 

o Configuration Management 

o Integration Management 

o Sustaining Engineering 

o Real Time Issues 

o Interoperability and Interfaces 


UO-125 


3-19 



OFtJQJiVA'. page IS 

OF POOR QUALITY 



3.7,1 Core Curriculum 


Th« transition to Ada programming is a transition to a mind sat, a culture 
for hov good software should be developed and maintained. To achieve 
successful software engineering and Ada project results, planners must 
consider technical training, education and on-the-job support as a complete 
plan. It is easy for one to be seduced by code-centered individualistic 
approaches to software engineering, but the case histories emerging from 
large, complex, distributed systems indicate that approaches that perhaps 
worked well on smaller projects may not scale up to a major software project 
like the Space Station. 


While the Ada programming language is often criticized by detractors as 
overly complex and with relatively underdeveloped tool sets, each passing 
month offers new Ada success stories and new, more powerful tools and 
environments. Vhat takes time and effort is making the significant 
organizational cultural changes, the mindsets, required for a software 
engineering environment that most effectively leverages Ada. Like any 
programming language, Ada is a means to a functional end. The larger, more 
significant long-term questions are: How will Ada be used? How rigorous will 
the engineering environment be? It is safe to assume that rigor is required 
for hardware development. No less rigor should be tolerated for software. 
Unfortunately, like all engineering, software engineering requires commitment, 

effort, and a willingness to adhere to the principles, concepts and models 
agreed to. 

Training hundreds and thousands of practicing programmers to become 
proficient in correctly applying software engineering principles, in the true 
sense of the term, will take a major financial commitment. To oversimplify 
the challenge, for the sake of making a point, one might argue that the 
problem is akin to taking lifelong house carpenters and expecting them to 
become architects overnight, with the requisite skills to design, say, a 
hospital complex. It can possibly be done, but not overnight, not without 
high cost and risk and no small dose of education, or understanding, is 
required beyond the technical skill necessary to do the job. 


VO- 125 


3-20 


Too frequently, managers give in to the temptation to start a project and 
hope the technical staff acquires the skills on the job. Time after time, in 
report after report, managers of Ada projects have reported that the one area 
they were short-sighted in was training. If history is a teacher, then ve 
have learned that an organization's first Ada projects are more difficult than 
succeeding ones, in major part because of the learning curve to master the 
software engineering mindset that supports Ada. Real gains through Ada seem 
to come on the second or third project. Note that in these cases software 
engineering with Ada education comes with experience, regardless of the 
technical training workers and managers receive. The major question becomes 
how much do we want that experience to cost and at what risk? 

The curriculum map asks a series of ten questions. Depending on a 
person's job description, he or she can enter the curriculum at the 
appropriate level. One takes courses by cycling through the curriculum model. 
Prerequisites are implied by the ordering of the course and are not mentioned 
specifically. Figure 3-3 illustrates the curriculum map for Ada training for 
NASA, across center and personnel. For example, all new hires would be 
exposed to Gl: NASA Life Cycle and Standards. A person in legal, however, 

might not need to take answer yes to any other question, except J: Do your 

duties support the software development process. In contrast, a lead designer 
might need to participate in the entire curriculum. 

Figures 3-4, 3-5, and 3-6 describe the proposed course modules in detail, 
including recommendations for delivery systems, class size and duration. 
Frequency of offering would vary from center to center, with the initial 
offerings of each section being given to experienced designers and/or managers 
to field test the accuracy. 

Figure 3-7 demonstrates how different job descriptions match with 
different levels of expertise as an outcome of each course. 

Figure 3-8 illustrates the relationship between job description and 
software engineering with Ada activities. 


VO-125 


3-21 



A; 


#'N you f 
HA9A 3l«ndprd«? 




I: 


Op you *p9p t 0 


COmputl#* 

MM»7 


C; Arp you MnieipMi^ 

m your rtrot Ado 
P^ooi m « 'oofmtool 
or nto ao qomo nt roof 

0 : Do you r> ood to know 

now 10 eodo in Ado? 


•s WW you Oo wortdn p 

m toftworo o ouoiopmom 
pro c ooo? 


WW you Oo pf M dto f 
iffo tyo* r u pport for 
•oftworo aooupwwtf 


Qt «no you oo prMdlpp 
for ruomninf «**. 



inrpnwoaoo for nonifpriT 
(Moot) 



(Moot) 





on toy oopoot didtaoi 

iito eyotot 

(if yoo, rotor* to -ppnprlif 
doeioton dt omond) 



Pi jure 3-3. Curriculum Nap 


VO- 125 


3-22 


ORIGINAL PAGE IS 

OF POOR QUALITY 







General courses are designed for all employees, with „ 0 previous technical 
Itnovledge or expertise assumed. 


Course Title 

G1 NASA Softvare Life 
Cycle and Standards 
SSIS, THIS, Review of 
Common Practices, and 
Standards 


Duration 

Description Delivery Days 

An Introduction to NASA Videotape 1.5 

Softvare Life Cycle, SSE, Manual 

Q&A Session C.S. - 50 


Common Introduction of 
Life Cycle Features and 
Softvare Process Video 

(e.g., personnel involved 
in acquisition of tools 
and training) 


G2 Softvare Engineering 
vith Ada for Non- 
technical Staff 


Seminar ,5 

Video 

C.S. - 50 


NOTES: C.S. 

G 
M 
T 


- Class Size 

- General 

- Managerial 

- Technical 


Pigure 3-4. General Courses (G) 


VO- 125 


3-23 



OF Pqq R 


p &ge is 

Quality 


Management courses are designed for mid-to-upper level managers 


Co urs 

Ml-M 

Ml-U 

M2 

M3 

NOTES: 


Title 


Description 


Software Engineering 
and the Transition 
to Ada: Mid-Level 

Managers 


Software Engineering 
and the Transition 
to Ada: Upper-Level 


Overview/Trends and Issues 
Related to Software Engi- 
neering, Life Cycles, 

Ada Features, Ada Resources 
and Cost/Benefits for Mid- 
Level Managers 

Same as Ml-M, Except: 
Designed for Upper-Level 
Managers 


Managing Ada 
Projects 


Ada as a Common 
Program Design 
Language 


In-depth View of Ada Pro- 
jects, including Analysis 
Design, QA, CM, Systems 
Integration, Sustaining 
Engineering, Metrics and 
Scheduling 
(PREREQUISITE: Ml) 

Use of Ada as a Common PDL 
for Managers with Need for 
In-depth Look at Design 
Issues 

(PREREQUISITE: Knowledge 

of Ada or other high-level 

language) 


C.S. - Class Size 

C.B.T. - Computer-Based Training 

C.M. - Configuration Management 

G - General 

M - Managerial 

P. D.L. - Program Design Language 

Q. A. - Quality Assurance 

T - Technical 

~M - Middle-level 

U - Upper-level 


Pigure 3-5. Management Courses (M) 


Duration 

Delivery Days 

Seminar, 3 

with Video 
and Presen- 
tation 
Materials 
C.S. » 20 

Same 1 

C.S. . 10 


Seminar, 3 
with Video 
CBT , etc. 

C.S. . 20 


Seminar, 
Hands-On 
Practice 
C.S. - 20 


VO- 125 


3-24 



Technical courses are designed for technical staff vho will use their 
skills on Ada projects. 


Course Title 


TO Software Systems 
Reviev 


Software Engineering 
and the Transition 
to Ada 


T2 Ada Programming 
Language 


T3 Software Engineering 
Design with Ada: 
Models, Methodologies 
and Tools 

T4 Software Design 

Specification: 

Models, Methodologies 
and Tools 

T5 System Requirements 

Analysis: Models, 

Methodologies and 
Tools 

T6 Library and Object 

Base Management 


Description 

A Review of Data Structures 
Knowledge Representation, 
Programming- in- the-Large , 
and Life Cycle Issues, 
Concepts, Principles and 
Models Design as Refresher 
for Those Vho Have Not 
Worked with Software for 
some Time 

Introduction to Software 
Engineering Trends and 
Issues, Features of Ada, 
Overviev of Tools and 
Methods, Reading Ada Code 

Coding in Ada, Ada Fea- 
tures, Using the Reference 
Manual, Standards, and 
Compilers 


Detailed Design, Analysis 
of Design Issues, Models 
Methodologies and Tools 


High Level Design with 
Detailed Analysis of Models 
Methodologies and Tools 


Consideration of Overall 
System Needs, Including 
Hardvare, Personnel, 
Logistics, and Softvare 

Building and Maintaining 
the Object Base, Documents 
Interfaces, Reuse Issues 


Duration 
Delivery Days 

, Seminar 1 
C.S. * 20 


Seminar, 3 

Tapes 
and some 
Hands-On 
C.S. - 20 

Hands-On 5 

Project 

wi th 
Seminar 
C.S. - 20 

Seminar, 3 

Hands-On 
Project 
C.S. a 15 

Seminar, 3-5* 

Hands-On 
Project 
C.S. » 15 

Seminar, 3-5* 

with 5-8* 

Projects 
C.S. - 15 

Seminar 3 

with 

Projects 
C.S. . 20 


Pigure 3-6. Technical Courses (T) 


VO- 125 


3-25 


Course 


Title 

T7 Quality Management 


T8 Configuration 
Management and 
Integration 

Management 


Description 


Duration 

Delivery Days 


Issues of Quality Assurance 
Management, Testing, V&V, 
Valk- chroughs , Formal 
Methods, Safety Analysis 


Seminar, 
vi th 

Projects 
C.S. * 20 


5 


Issues of Product Identifi- 
cation, Change Control, 
Integration of Change, 
Documentation' 


Seminar, 
v; th 

Projects 
C.S. - 20 


3-5 


T9 Sustaining Engi- 
neering 


Issues of Maintenance and 
Operation, Re-Coding, 
Change Management, 
Re-Engineering Software 


Seminar, 5 
vi th 

Projects 
C.S. - 20 


T10 


Ada Real Time Issues Issues Related to Ada in 

Real-Time Environments. 
Advanced Level 


Seminar, 5 
vi th 

Projects 
C.S. - 15 


Til Interoperability 
and Interfaces 


Advanced Issues of Inter- 
operability and Sustaining 
Massive Systems Over 
Indefinite Periods, Non- 
Stop, Across Boundaries 


Seminar, 5 
vith 

Projects 
C.S. - 20 


NOTES: C.S. - Class Size 

G - General 

M - Managerial 

T - Technical 

* - Duration Ranges are indicated if a course is optionally 

overview (lover range) or project specific (higher range). 


Pigure 3-6. 


Technical Courses (T) (Cont. 


VO- 125 


3-26 



r w< 5 wr 1 t/i tr r h to 


Job Description 


Introductory 


Intermediate 


Advanced 


Figure 3-7. 


Technical Support 


Management 


TO 

G1 T1 G1 

T2 G2 


G1 


TO 

Ml-U 

Ml-M 


T3, T4, T5 
T6, T7, T8 
T9 


M2 

T7 

T8 


T10 

Til 


M3 


Software Engineering with Ada Core Curriculum 
Job Descriptions and Skill Levels 


VO-125 


3-27 



Job Descriptions 


Technical Support 


Management 


Activities 


Life Cycle 


T2 T10 

T3 

T4 

T5 


M3 


T6 

T7 

Control T8 

T9 

T10 


Managemen t 


Ml-M 

Ml-U 

M2 


T1 

Support 


G1 

G2 


Pigure 3-8. Software Engineering with Ada Activities 



3.7.2 Technical Topics 


The core curriculum is the basis against vhich training is monitored or 
measured. Yet, not everyone has the time or need for long training programs 
Often, a project or person needs specific technical information in a timely 
manner. Technical topics also serve to reinforce earlier training. 

Technical Topics series, designed and supported by each center and 
headquarters, could take the form of conferences, short seminars, briefings, 
brown-bag lunch seminars, university lectures, tapes, and so forth. 

On the chart below, sample programs are presented, although the list is 
potentially infinite: 


NOTE: The following are in alphabetic order. This listing is designed to 

provide a base set of topics and is certainly not all inclusive. 

Sample Topics Courses: 


Ada Expo, SigAda, Other National Conferences 

Ada Programming 

Advanced Ada Code Topics 

Generics 

Tasking 

Advanced Issues 

Ada Programming Support Environment/Comaon APSE Interface Sets 

Computer Aided Software Engineering 

Compiler-Any Vendor 

Embedded Real-Time Systems 

Host -Target -Integration Environments 

Human Interfaces 

Object-Oriented Design 

Portability 

Program Design Language 
Programming- in- the-Large 
Project Economics 


UO-125 


3-29 


Sample Topics Courses (Continued): 


Project Organization and Management 
Reusabili ty 
Requirements Analysis 
Software and Systems Evolution 
Software Configuration Management 
Software Design 
Software Engineering Process 
Software Generation Models 
Softvare Implementation 
Software Maintenance 

Software Management Assurance Program Activities 

Softvare Quality Assurance 

Softvare Quality Issues 

Softvare Requirements Analysis 

Softvare Testing 

System Integration 

Technical Communication 

Test Environments 


3.7.3 Mentoring 

For a successful training program to take effect, there must be on-the-job 
training (OJT) as veil as other, more formal methods. Mentoring begins vith a 
management commitment to provide experienced Ada softvare engineers, sometimes 
called gurus, on project teams to assist vith technical questions as they 
arise. In addition, there must be user support tools, data bases, and access 
to information. The information needed on the project ranges from "hov to" to 
knovledge about professional organizations. The mentor is most effective and 
most important after a sound, common intellectual foundation has been 
established which covers the softvare engineering concepts, principles and 
models vhich undergird both the Ada language and its appropriate use. The key 
to establishing a sound mentoring program on the job results more from 
management responsiveness to requests than from a pre-designed agenda. Other 


VO- 125 


3-30 



mentoring options might include on-line hypermedia systems, interactive 
computer instruction, reference tools, and the like. 


Mentoring might also include support for individuals to attend 
universities to fulfill degree requirements or to take core curriculum 
offerings, then return to the project to teach others. 


3.8 Summary 

This section has provided a comprehensive model for analyzing and 
specifying curriculum for softvare engineering vith Ada projects. A life 
cycle education and training curriculum vas presented that features three 
components: a core curriculum, technical topics, and mentoring. 

The module provides NASA vith a means for planning curriculum that is 
straightforward and complete, vhich allow individual centers to tailor 
programs to fulfill their respective missions. 


UO-125 


3-31 



Section 4 


NASA SOFTWARE ENGINEERING AND Ada TRAINING IMPLEMENTATION PLAN 


4.1 Introduction 

This section contains a NASA Softvare Engineering and Ada Training 
Implementation Plan. Implementation recommendations are given for personnel 
in management, technical and support roles. 

The implementation strategy is based on five-year cycles. Tvo years would 
be spent developing and accomplishing primary training for key personnel. 

Three years would be allowed to update the curriculum based on assessment of 
courses used, nev requirements and the rapid development of new technologies, 
tools, rules and methods. 

Development of a consensus view of softvare engineering and life cycle 
awareness is as important as Ada syntax and semantics training. Personnel who 
have this solid grounding in appropriate knowledge and activities may be quite 
effective using Ada if exposed to an initial two-week course that bridges this 
grounding to Ada syntax and semantics. However, based on the results of other 
Ada-oriented project work being reported, it will take six to nine months of 
training and applied project experience for project personnel to attain an 
adequate competency level to engineer the design and development of a 
moderately sized softvare system. 

There are three layers of the implementation plan that must be considered: 
the core curriculum, the technical topics, and the mentoring or on-the-job 
training. The layers are geared for training needs and, as such, are outside 
the normal educational channels available at universities. 


4.2 Delivery Options 


4.2.1 Education and Training Options 


One significant question is hov best to implement a given core course, 
technical topic or mentoring system. Unfortunately, there is no quick answer 
outside of a specific context. In this section, the considerations are presented 
and evaluated. Each option has benefits and liabilities in relation to short-term 
vs. long-term cost to deliver, difficulty of learning, and long-term retention of 
materials (See Figure 4-1). 


4.2.2 Selecting an Option 

The decision to choose a delivery system is based on the following features 
o Organizational Goals 

o Resources (Time, Materials, Personnel, Funding) 

o Knowledge vs. Skills 

o Short-Term vs. Long-Term Learning 

o Degree of Control 

o Autonomy/Motivation of Learner 

o Participants' Attributes 

o Knowledge 

o Skills 

o Attitudes/Opinions 

o Goals 

o Support 

o Organizational Attributes 

o Commitment to Long Range Planning 

o Funding Sources Identified 

o Access to Appropriate Hardware & Software 

o User Support Facilities 

o Presence of SE Advocate 

o Management Support 

o Knowledge/Skills Level of Management 



e 

o w 
— s 

w • «a 

a vi : 
w > — 
3 4 


x v -a 
o 

« w -> 

-* s 
- * o 

^ u Ml 


U 

V 

tafl ■ ~ 

2 M vj 

O 4) S 

-3 fr- (fl 


i J s ! 

— 09 tA 

« X w 

fill 


« X w 

* i 3 

« w 

« V ~ 

S' i s 

J! 5 5 


«v 

3 3 

•9 hi 

3 ? 


£ fi • m 

* *9 +4 

S 3 J 3 


-* — 0» «• u 

<• *q <f a ** «* 

£ S *2 3 <« > 

-• M » e* u tt 
^ * a « • 

• ~ j* — - > 

j j j s s i s * 

*U3«*Oa*# 

i *■ o m a q 

bu9fi-p«w^Si 

wttitomam 

- y w e i £ — 

? • • • « w 3 

j 7 o' a ? >2 • 5 

3 £ £ £ £ 2 £ J 


Figure 4-1. Education and Training Options 


UO-125 


Life Experience 



4*2.3 Combining Options 


For this report the core 
other delivery modes. 


curriculum is generally a mixture of seminar vith 


Hovever, for the long term, immediate steps should be taken to supplement 
th * S "" lnars c0m pucer based training, hypermedia aupport systems, and 

videotap,. Technical topica series should similarly be institutionalised 
through tape or hypermedia and made available. 

As Figure 4-1 indicates, each training option has pluses and minuses. a 
veil balanced curriculum takes advantage of the best of all options. 


4.3 Allocation of Resources 

Over a five-year period at least, resource considerations must be made. 

As the courses for the core are develop and instructors are trained, the 
costs for this segment of the curriculum are reduced. After five years, 
training needs will be governed by new projects, personnel turnover and staff 
enlargement. The staff present at the beginning of the program will have 

completed their basic training. Therefore, the number of personnel needing to 
take core courses may be lover. 


4.4 Training Phase-In 

Project experience indicates that the real benefits of Ada may not be 
apparent for months. Thus a phased-in approach to training can enhance the 
likelihood of both timely and useful training. The lead designers and 
planners need early in-depth knovledge, so they vould be trained first. 
Training for technical personnel could then cycle through to those vho vrite 

programs. This time phase-in, or horizontal phasing, is graphically depicted 
in Figure 4-2. 


VO- 125 



ORIGINAL PAGE iS 

OF POOR QUALITY 



TIME 


6 MOS. 


1 YEAH 


1st PHASE 

LEAD 

DESIGNERS 

PLANNERS 

MANAGEMENT 



zn a phase 

LEAD 

DESIGNERS 30H 



MANAGERS 


3rd PHASE 
4th PHASE 


TECHNICAL 

STAFF 



LEAD 

DESIGNERS 

TECHNICAL 

STAFF 

SUPPORT 

STAFF 





LEAO 

DESIGNERS 

MANAGERS 

TECHNICAL 

STAFF 


Figure 4-2. 


Personnel Training Over Til 


0-125 


4-5 


To complement this, Ada training curriculum can also be phased-in 
vertically. Vertical introduction of the program insures that all strands of 
the curriculum: core, technical topics, and mentoring are accommodated (See 

Figure 4.3). 


4.5 Recommendations 


Based on the results of the survey and the application of the Clear Lake 
Model, a core curriculum should be implemented for software engineering and 
Ada training. Complementing the curriculum, there should also be center- 
specific technical topics series and mentoring, and a systematic approach to 
on-the-job training. Even though the implementation strategy is based on a 
five-year cycle, clear results vould be apparent within a year, if a firm 
commitment of resources and support were offered. 

It is recommended that this training program be implemented using the 
following steps: 

Step 1 

Consult training literature, vendors and experts to identify a specific 
core course for each step identified in the Curriculum Map presented in 
Section 3.7.1. Identify specific technical topics and mentoring options to 
supplement the core curriculum. Each training component may be off-the-shelf 
(OTS) and used as is, OTS and modified, or developed new. 

Step 2 

In parallel with Step 1, contact the survey participants again to update 
the count of planned Ada projects and persons requiring training. 


VO-125 


4-6 



s 

Ul 



Figure 4-3. Vertical Phasing of the Curriculum 


VO-125 


4-7 





Step 3 


Using the education office at each NASA center as a base of operation, 
visit the project managers and help them use the Curriculum Map and other 
information to identify exactly what training components are needed for each 
person involved in the project (including management, technical and support 
roles) . 

Step 4 

Vork with the education offices to create a custom training program for 
each NASA center. Report the results of this vork and suggestions for 
prioritizing and scheduling the training components. 

Step 5 

Estimate the cost of each NASA center's training program based on their 
requirements and the cost of implementing and maintaining the training 
components. 

Step 6 

Obtain, modify and/or develop the training components identified in each 
NASA center's program. 

Step 7 

Assist the education office at each NASA center in implementing and 
assessing the training program. 

Step 8 

Refine the training program based on the assessment data and newly 
available resources and/or requirements. 


VO- 125 


4-8 


ommmi page is 

OF POOR QUALITY 



The recommendations included in this report do not reflect other training 
needs; for example, management, hardvare and non-softvare engineering issues 
are vital, but beyond the scope of the study. 


There are final recommendations that need to be enumerated: 


1) Ada vi 11 be most effective if used in an appropriate software 
supporting culture. Training must be geared to support that culture, 
including evaluation of courses and instructors according to their 
contributions to the core curriculum as it becomes fully operational. 

2) The core curriculum vill become dated vithin tvo to three years if 

there is no support for including new material, tools, methods and 

approaches to it. There must be a provision for updating the 
curriculum. 

3) There are a number of ways to improve existing Ada training programs 

to match NASA's particular uses. For example, SSE guidelines and 

procedures will make Ada a working language, one that applies 
directly to the job. 

Ada training templates, reusable components, and library of objectives 
should be developed and used throughout the agency as a means to demonstrating 
excellent code examples and for building a library. 


Vherever possible real-use examples should be established, especially for 
documentation and mini-projects included as a part of the course work. 


VO-125 


4-9 


ORfSRfAL PAGE fs 
OF POOR QUALITY 


Section 5 


DATA ANALYSIS 


This section of the report examines the methods, analysis, conclusions and 
observations of the data collection associated with this project. Section 5.1 
identifies the purpose of the data collection, Section 5.2 examines the 
methodologies and strategies, Section 5.3 discusses the distribution of the 
survey instrument and the sample population. Section 5.4 discusses the survey 
respondents. Sections 5.5 and 5.6 examine the results of the Project Office 
survey and Section 5.7 discusses conclusions drawn from this effort. 

Section 5.8 examines the results of the Education Office survey, Section 
5.9 discusses conclusions from this effort. Section 5.10 compares and 
contrasts results from the two survey efforts and draws conclusions based upon 
the overall data analysis. Detailed findings and analysis from both efforts 
are located in Appendix C, D, and H. 


5.1 Purpose 

The purpose of this part of the project is to determine the education and 
training requirements for NASA in the areas of software engineering and Ada. 


5.2 Methodology of Data Collection 

In order to collect relevant information from various aspects of NASA, a 
survey methodology was employed. Two survey instruments were developed; the 
"Ada and Software Engineering Training Survey for NASA Project Offices" and 
the "Ada and Software Engineering Training Survey for NASA Education Offices" 



A sample of both survey documents are contained in Appendix A. Each survey 
and their strategies are discussed belov. 


5,2,1 Survey . One: — "Ada and Software Engin eering Training Survey for 
Project Offices" * 

This survey vas designed for Project Managers at the various NASA Centers 
vho are presently or are anticipating to be involved in Ada related projects. 
The purpose of this survey is to: 


a. Collect information regarding the number of personnel involved in 
each project and their areas of responsibility (Management, Technical 
or Support) and their present level of Ada experience and their 
anticipated training needs. 

b. Determine the types of softvare development and/or support 
environments. 

c. Determine the number of projects in which Ada has been used and 
identify the scope of these projects. 

d. Determine the number of Ada projects anticipated for a specified 
period (1987-1991). 

e. Determine the types of Ada and softvare engineering training 
activities historically utilized by the project offices' personnel. 

f. Determine present softvare development policies and procedures, and 
identify Ada implementation plan(s). 

g. Obtain recommendations for improving softvare engineering and Ada 
training procedures. 


5,2,2 Survey T vo: "Ada and Softvare Engineering Training Re quirements Survey 

for Education Offices" L 


Determine the number of and identify Ada and softvare engineering 
training activities to be conducted at each Center during the next 
twelve months and the intended audiences. 

Examine present training evaluation policies. 

Determine the number and identify Ada and softvare engineering 
training activities held at each Center during the past thirty-six 
(36) months including course topics, sponsoring organization, 



training support materials (including computer hardware and 
and the audience characteristics. 


sof tvare ) 


d. Identify the party requesting the training activity. 

e. Identify how personnel responsible for implementing Ada and software 
engineering training activities select these activities and what 
sources they utilize to answer their questions about these topics. 

f. Obtain recommendations to assist persons responsible for the 
selection and implementation process for these training activities. 


5.3 Distribution 


The Project Office and Education Office surveys were distributed to all 
MASA Centers, (including NASA Headquarters) that have training activities. 
The Centers from whom information and input was solicited were: 

Ames Research Center (ARC) 

Goddard Space Flight Center (GSFC) 

NASA Headquarters (Hdqtrs) 

Jet Propulsion Laboratory (JPL) 

Johnson Space Center (JSC) 

Kennedy Space Center (KSC) 

Langley Research Center (LaRC) 

Lewis Research Center (LeRC) 

Marshall Space Flight Center (MSFC) 

National Space Technologies Laboratory (NSTL) 


5.4 Respondents 

Survey responses were collected via the written survey instrument, 
telephone interviews and personal meetings. Responses in one of these forms 
were obtained from the following: 



Project Office Survey: 

ARC: 

Robert Carlson 
JPL: 

Allan Klump 
Ken Clark 

Headquarters: 

Bob Nelson 
V. Wilson 

MSFC: 

John Wolfsberger/System Software Branch 
Larry Taormina/Applications Software Branch 

KSC: 

Larry Wilhelm/Design Engineering Directorate 
Rick Wesenberg/Electronic Systems Support Division 

LeRC: 

Kathy Schubert 
GSFC: 

Frank McGarry/Systems Development Branch 

Joseph Gitelman/SSIS Data Systems Manager, Space Station Office 
Tom Paradis 
Lou DiMao 

JSC: 

David Heath/Mission Design and Development Branch 
Michael Ruiz/Guidance and Navigation 

Robert Hinson/Software Development Technology MPAD 

Cordelia Foster/Spacecraft Software Division 
Carlos Parra/Space Station Projects Office 
John DeFife/Advanced Programs Office (ED) 

Wayne Volz/Systems Development and Simulation (EF) 

Oron Schmidt/C and T Control and Monitoring (EE) 

P.N. Poulos/Avionic Systems (EH) 

Virginia Vhitelav/End to End Test Capability (EH) 

Cindy Draughon/Propulsion and Power (EP) 

Clark Pounds/Simulation Development Branch (FS7) 

Gary Robinson/MCC Host Software (Systems Development Division) 


WO- 125 


5-4 



Education Office Survey 


JSC: 

Amy Kennedy 
GSFC: 

Carolyn Casey 

KSC: NASA Headquarters: 

Tom Barron Gina Fulbright 

Rachel Villner 

The Education Office survey arrived during a variety of events (the 
Training Officers meeting at Goddard, Software Management Assurance Program 
(SMAP) meeting, the end of the fiscal year and another survey effort. Some 
respondents, though not able to participate formally, did contribute on an 
informal basis. 


JPL: 

Cynthia Chinn 

ARC: 

Bob Carlson 


5-5 Analysis of Results — Project Offices 
5.5.1 Description of the Survey Instrument 

Project Office survey is comprised of four parts. Part I obtains 
information about the size of the organization for which the respondent is 
responsible, areas of software development and/or support activities, the 
amount of Ada project experience and future plans for using Ada. Part II 
collects Project Information for past, present and future projects using Ada, 
including anticipated training estimates. Part III requests information on 
present training activities for personnel involved in Ada projects. Part IV 
identifies software development policies and procedures. A sample of the 
survey instrument is contained in Appendix A. 



Project Office survey received input from 24 respondents, 
current projects presently utilizing or planning to use Ada. 

population covered by this effort vas 1399 NASA employees vith 
distribution: 


representing 29 
The sample 
the following 


Managers 343 
Technical 925 
Support 131 


5.5.2 General Findings — Project Offices 

This group is principally involved in software development rather than 
support activities. The primary outputs for vhlch these organizations are 
responsible are: coding, requirements specifications, design specifications, 

test plans, milestone charts/schedules and status reports. Their principal 
involvements are technical management, code, design, requirements/analysis 
review and design review. Of the 24 respondents, nine have support duties as 
primary responsibilities. 

There is no one specific type of hardware utilized for system development 
and most respondents cited more than one type of hardware (mainframe, small 
multi-user, individual workstation and workstations on a Local Area Network) 
vith fairly even distribution. 

Respondents cite twenty-nine (29) projects collectively where Ada is or is 
planning to be used. The range of Ada experience within the existing 
personnel however, demonstrates a general lack of experience among all three 
personnel types included in this effort (managers, technical and support). In 
addition, over 502 of the respondents cited that less than one-fourth of their 
management staff has received software engineering training and nearly 702 of 
the respondents said that less than one-fourth of their management personnel 
have received Ada training. 


SOFfecH 


In regards to support personnel, 90* of the respondents 
than one-fourth of their support staff has received software 
training and all respondents said that less than one-fourth 
personnel has received training in Ada. 


state that less 
engineering 
of support 


TeCh " 1Cal P ' rSOn "* 1 •« S'"*rally better traieed in aoftvar, 

Tv.nty-„y« percent o£ the respondents state that half or .or, of their ' 
technical staff have some for. of software engineering training, hovever Ada 
training is perceived to be another natter. Fifty percent of the respondents 

state that less than one-fourth of their technical staff have been exposed to 
training in Ada in any form. 


Training activities in software engineering have been primarily one of the 
following; Software engineering seminars, University sponsored courses, or 

government courses. Training activities in Ada have been primarily in Ada 
seminars. 


At the same time, NASA is using Ada for the Space Station and other 
projects. Presently, 21* of the respondents arc using Ada as a Program Design 
Language and nearly 47* are utilizing Ada as an Implementation Language. 

Anticipating their future needs, these respondents estimate that they will 
be utilizing Ada as a programming language on 150 projects between 1987 and 
1991 and as a program design language on 94 projects during that same period. 
In addition, personnel requiring Ada training are estimated at 368 managers, 

683 technical and 146 support staff during the same 1987-1991 time frame. The 

majority of projects and training needs are centered at Goddard Space Flight 
Center and Johnson Space Center. 

Implementation policies and procedures, however do not reflect the above 
rate of growth. Less than one-fourth of the respondents have a written plan 
for implementing Ada. Of these, only one respondent has a short-term (two 
years or less) plan that is documented, two respondents have medium range 
(two-five years) plans and three have long range (more than five years) plans. 



By and Urge. VASA Centers are using and are planning to use Ada for ch.i 
projects though an actual number is difficult to estimate due to constraints 
such as budget and schedule concerns. The e.erging trend, hovever is an 
increase in the number of Ada projects projected and there should be a 
concurrent increase in the number of personnel expend to be trained in th , 
areas of sofruar, engineering and Ada over the five year period of this study 
Detailed findings and analysis are located in Appendices C and'D 


5 * 6 General Ob servations froe the Respondents 

In addition to Che quantitative questions, th. respondents .ere also 
questioned qualitative!, for their input as to th. lessons they h.v. l.. t „,d 
in using Ada. The folloving highlights th. responses received. 

The first question asked, "She, lessons bu your organisation learned, In 

general, in using Ada that you belie., should be incorporated into a training 
program?" * 


a. 


b. 


c. 


d. 


e. 


Hands on training is required; preference appears to be an 
approximata 50/50 split batvaan lactura and u , 

backgrounds 'in^FORTRAN^^C^anguages!*^*^ ” ' h °“ 

reaching Ada syntax exclusively. 

Some kind of design technique, (i.e., object-oriented design) should 
be emphasised rather then actual coding. Coding is sonlthK. 

Instruction . C * 0 l “” ' helr ln llbs or “ ith Conputir Aided 

Older programmers need to "re-learn" rather than "learn", and there 

trainin * u 

sjg'Ti^srs a^ri^ur*. 

scale projects such as Space Station. S 



'■ tMli"ri« 0 «t r w?fiLmr t o*U»™ , IJ* <1 One week of 

however one month appears to be an acceptab!e°I!iM <i *' i 1, " I ' hs varied ' 
15 tha ® nv fronment “« 

The second question asked ft changes would you aak, 1„ th . way software 
engineering and Ada training is done?" 


3 - 

h. 


a. 


b. 


c. 


d. 


f. 


g- 


e should ’Emphasize increased productivity rather than m 

Design a training program specifically geared toward ?njn. c.„. 

S== '= srsSS . 

Kn »„"rc, tesa:,r“ 

sof tware^managers?" h ° US * *"* «««« tor project and 

Ki,'sa s-jss kste^s sassj r;:.- 

course*end course°on*set ting W up k CAI ’ i0n triinln «’ «"*“« 

Presently there is not enough time, training, support eouipment 
(hardware/software) and division decision support ’ P 


5 * 5 * 7 Conclusions — Project Offices 


The above findings and recommendations leads to 


die following conclusions: 


softvare^nffiHIIr?^ th ^ y **J eed vhat th *y ar * presently doing 
things. gine€ring and Ada training appear to be two different 




Respondents frequently stated that a one-veek rrainj 

enough; training programs musr ho inn»r Crainin ? program is not 

Vhen examining the training their staff hasten* hands -° n ^tensive. 

" 0St <«• t* «« or sore of & f^lnT'or^?^ ’ 

Seminars 

Government courses 

chan five-day in house programs 
Self-taught 

Typically, these formats are not "hands on” inr* 

chan five days. Out of the rvanru f n intensive an d are less 

etw 

UniV * rSity -“«» '» *»*«• software 

.; h °u h r3 13 n, “h. hi ;^ p l ;jrh s .r^ in ‘ to assis ' 

c “ dln * 1 ■* dlc * 1 *><* o.m„ t h ? JS JViSJ?* 5JITB> 

SsSS? “ 

SS pass SSSfSS “ 

s*ir h »iss5 rasp-? 

continual use m the vork environment. 

«n*i t n 0 . C «Sg y ; t ''i d "“ lly "° tralnl " g f ° C SU '" >0r, 3t * £f software 

5hi 1 nex! V fivi ZrS' 1 a ” proiecting 150 projects In Ada during 

Support oersonc fj d 00 trainin ? over itIOO personnel members. 

Support persons, those responsible for procuring training activities, 



equipment (compilers, hardware and software) and performing 
administrative activities have virtually no knowledge of software 
engineering or Ada and why it is important to NASA. 

e. Little experience or training in software engineering and Ada for 
managemen t personnel. 

Nearly one-half of the respondents stated that less than 25 % of their 
management personnel have received training in software engineering 
and nearly three-fourths of the respondents state that less than 25 % 
of their management personnel have received training in Ada. At the 
same time, management personnel are responsible for managing Ada 
software development and determining which technical and support 
personnel require training and the training features needed. 

f. Less than 25Z of the respondents have a documented plan for 
iapleaenting Ada; short, mediua or long term. 

Concurrently, respondents are expecting to initiate over 150 projects 
in Ada during the next five years and anticipate training 1,100 
employees with various responsibilities with few documented plans for 
implementing Ada. In addition, less than one-half of the respondents 
have any documented software development policies and procedures of 
any sort. To add a further degree of complexity, the consistency of 
what few documented plans and policies that are available, could not 
be determined in the scope of this study. 

g. The assumption that long NASA tenure qualifies as software 
engineering training. 

In many projects, especially those with small numbers of management 
or technical staff, long tenures with NASA appear to automatically 
qualify these respondents as being "software engineering" proficient. 
Some respondents were informally asked if they had received training 
in softvare engineering. Vhile not formally trained, they had been 
with NASA 10 or more years, thus considered themselves literate in 
softvare engineering principles and practices. 


5.8 Analysis of Results — Education Offices 


5.8.1 Description of the Survey Instrument 

The Education Office survey is comprised of three parts. Section 2.0 
examines general Center information; persons responsible for selecting and 
implementing softvare engineering and Ada training programs, who they turn to 
for advice on these matters and hov long they have been responsible for 
training at their Center. Section 3.0 identifies plans for training 



acti.UUs durin, the next tvelve months and th. Intended andiencea and topics 
0 these training programs. In addition, training personnel vere asked if 
they felt they had adequate knowledge on these subjects to select effective 
training activities and their present methods for evaluating training 
programs. Section 4.0 examines software engineering and Ada training 
activities from a historical perspective. Training specialists are asked to 
list training activities for the above subjects during the past 36 months; 
including vendor, program topic, audience, course format and support 
services/materials. A sample of this document is contained in Appendix A. 


The Education Office survey received input from four (4) respondents, 
representing a 502 return of the survey and informal input from an additional 
three Centers, flelov, findings reflect all input, whether from the survey 
instrument itself or information resulting from interviews with participants. 


5 -8-2 General Plndings — Education Offices 

Persons responsible for selecting and implementing training programs in 
general, do not feel their individual level of knowledge in the areas of 
software engineering and Ada is adequate. Some respondents have no idea where 
software engineering and Ada fit into NASA's plans or its overall importance 
to NASA. Vhen questions arise in the areas of software engineering and Ada, 
training office personnel typically turn to the Project Office manager who 
requested the training for answers. 

There is heavy reliance upon the Software Management Assurance Program 
(SMAP) and the Office of Professional Management (0PM) to meet the needs of 
software engineering and Ada training requests. 

Evaluation of training programs does occur at most Centers, however the 

standardization of the format among the Centers could not be determined from 
this study. 



Plans for sofcvare engineering and Ada training activities in FY88 vere 
concentrated at GSFC, JSC and KSC vho intended to offer five or more training 
activities in these areas and ARC vho is planning to offer one. Those Centers 
vho vere not planning to offer any softvare engineering and/or Ada training 
vere NSTL, JPL, and Headquarters. Information from LeRC, LaRC and MSFC vas 
not available due to lack of participation in this study. 


Historical information on previous training activities conducted vas 
difficult to obtain due to the limited amount of resources and time available 
to the Education Offices due to other commitments. JSC vas most responsive, 
providing detailed information for courses offered in 1987 and a historical 
listing for 1986. 


5 . 9 Conclusions — Education Offices 


a. The eajority of training activities that are scheduled through the 
Education Offices for PY8a are to be offered by JSC. 

JSC has presently scheduled 22 courses to be offered in the areas of 
softvare engineering and Ada. Estimates at GSFC and KSC training 
activities in the areas of softvare engineering and Ada to be betveen 
five and ten courses in FY88. 

b. The SHAP and OPM programs are by far the aost commonly offered 
prograas by NASA Education Offices. 

Review of courses scheduled for FY88 in Appendix J illustrates that 
all GSFC and ARC and the majority of JSC activities vill be offered 
through the SMAP and OPM programs. According to these respondents, 
KSC reports the most use of training sources external to the SMAP and 
OPM programs for FY88. 

*•' Persons responsible for iapleaenting and selecting softvare 

engineering and Ada training prograas aren't sure vhat to look for. 

Tvo of the three respondents asked for assistance (in the form of 
training and/or support) for selecting and implementing these 
activities. Of those vho did not respond formally, three Centers 
state they have never selected a softvare engineering and/or Ada 
training program. In addition, one respondent turned the survey over 
to Project Office personnel, feeling they vere more qualified to 
answer the questions presented. 


VO-125 


5-13 


QK&JNAL PAGE 3S 
OF POOR QUALITY 



d. 


in most cases 
consistency fro* Center 


standard evaluation forms, Bovever f 
to Center has not been identified. 


Most respondents 
administered at 
and whether the 
Center was not d 


cite a 


standard evaluation format for courses 

L , J eSPeCtlVe Centers. The format for doing so 

erfJm? T' Pr0CeSS iS consisten ' from Center to 
etermined in this effort. 


e. 


Vhen persons 
prograas had 
requested the 


responsible for selecting and implementing training 
questions, they most often turned to the manager that 


training. 


Respondents looked 
often for questions 
Ada training. 


to Project Office management fo 
or concerns regarding software 


r guidance most 
engineering and 


f. 


There appears to be little communication 
software engineering and Ada training. 


among the Centers regarding 


Not one respondent cited that they 
another Center for recommendations 
and Ada training activities. 


contacted training personnel at 
or advice on software engineering 


5.10 


j - *^*on a o»?” wf£ roc “ »«*<=. "to™*.’ and 


ne purpos, of obtaining input front both the Project Office* and Education 
ices is to compare and contrast training r.,uir...nts and r.comm.nd.tions 
rom the Project Offices vith historical and projtctad training programs 
o ered by the Education Offices at the various NAS* Cantars. Belov, key 
arees .merged where needs of the Project Offices and the projected schedules 
0 the Education Offices were compatible or conflicting: 


received any software engineering and/or Ada trainJSg thi«2lle.. 

The question can then be asked, "How accurate are the answers that 

Proiict S 0?r reSP ° nSlble f ° r trainin * activities receive?" and "How do 
Project Office management know the software engineering and Ada 
training needs of their staff?" engineering and Ada 


WO- 125 


5-14 


ORIGINAL PAGE is 

OF POOR QUALITY 



The answers to these questions appear to be connected. The true 
imolovef knowledge of the subject matter cannot be measured until the 
* r S a P pl ^ ing the ™terial in his work environment. If the 
oroffram H hi ade< ’ uate ’ blame is typically placed on the training 

selected mav h * 18 unaatls ^ actor y- In man y cases, the training program 
??;??* ? have Pessary objectives, however they apply very 
little to the particular environment. This incompatibility is a 

bJt d also°fhe he 1 ® vel , of , knovled & e about not only training programs, 
but also the needs of the audience. 


The result is that the organization becomes 
loop. 


trapped in a continuous 


If the persons requesting the training are not adequately prepared to 

train!™ th * n ** d J of . tbeir environments, and persons selecting the 
training are not knowledgeable about the training characteristics 
chances for successful training of the employee are reduced. 

At the same point in time, the evaluation stage, or on the job 
performance is too late in the process to determine that the training 
and environment were incompatible. Respondents from both surveys * 
identify a resistance to training in software engineering and Ada 
from the personnel base. Consequently, persons who are not trained 
adequately in the first exposure to training, are less likely to 
accept additional training; either to correct previous training 
attempts or enter into advanced training where they may be 
ill-prepared. 

Project Offices repeatedly mention the need for extensive training 
programs, stating that one week programs are not sufficient to learn 
Ada and software engineering. 

Itr’ »k° n axami ^ ation of training programs scheduled at JSC, GSFC and 
C, the three heaviest users of software engineering and Ada 

! 1 !?^ J pr0gra ! , ' S, With few exce Ptions, all the courses presently 
scheduled are three days or less in duration. 7 

Project Offices repeatedly mentioned the need for software design 
courses. * 

gcrt n 8 ? 1 "’ ° f J he heaviest users of training programs (JSC, GSFC and 
KSCj not one software design course (i.e., object-oriented design) 
was identified as scheduled for FY88. * ' 

Project Offices and Education Offices agree that the 
majority of training is requested by the individual. 

JSC Education Office reported a three-to-one ratio of individual 
training requests to Pre-Planned requests and a five-to-one ratio of 
individual requests to Organizational requests for training in 
software engineering and Ada. ARC reported a ten-to-one ratio of 
individual requested training to Pre-Planned training activities. 



No consistency of definition. 


There is no common definition of vhat an Ada programming course or 
software engineering course should contain. As a result, one 
Center's Ada programming courses might not satisfy the same 
objectives at another Center. The lack of an integrated training 
program impacts the effectiveness of software engineering and Ada 
training programs for the NASA system as a whole. The complexity is 
further compounded when the number of "self-taught" personnel are 
included in the equation. 

To illustrate, consider JSC and KSC. JSC is scheduling three 
"Introduction to Ada” programming courses through SMAP for FY88. KSC 
is scheduling 10-12 "Ada Programming" courses, six of which are to be 
an introductory level, from an external training source. Do both 
courses satisfy the same objectives? Without an integrated training 
program and a concrete needs assessment, it is difficult to tell. 
Consequently, the various Centers have various ideas of what these 
training programs should contain and no common baseline to measure 
the differences. 

The overriding issue is change. 

Modern software engineering principles and practices and the Ada 
programming language requires respondents to change the way they 
think about and do their jobs. This includes not only the persons 
responsible for the "hands-on", technical development of large, 
complex computer systems, but also those with administration, 
management, control and support roles. Training programs in software 
engineering and Ada must be successful across NASA as a whole, (not 
at one or two isolated Centers) and at a variety of levels 
(management, support as well as technical). The result is that 
change, in the form of software engineering and Ada training, must be 
introduced into the entire system, at numerous points and with a 
variety of objectives. 

To initiate this change effectively, an inherent "strategic planning" 
issue presents itself; "How to make effective use of resources to 
produce software engineering and Ada training programs that are 
effective and accepted by the entire systemic structure?" 

Change, especially when the resulting system is signif icantly 
different than the existing one, (as in this instance for NASA), must 
be introduced carefully. Some of the issues that were identified in 
this requirements analysis, illustrate the need for more effective 
change mechanisms; (i.e., better communication, es tablishment of 
standards and an integrated training program throughout NASA). To 
accomplish this, it is necessary to consider some guidelines for 
introducing change (Steiner 79) and some of the characteris t ics of 
the present NASA environment and recommendations identified by the 
respondents to this study: 



Change is more acceptable when it is understood than when it is 
not . 

The introduction of software engineering and Ada training 
programs is not understood by the persons being asked to 
introduce, monitor and manage these programs. A very low 
percentage of NASA project office personnel have been exposed to 
software engineering and/or Ada training in any form. This lack 
of awareness is further compounded by virtually no knowledge in 
the Education Offices, where these training programs are 
initiated. 

Change is more acceptable when it does not threaten job security 
than when it does. 

As stated by one Project Office respondent, emphasis should be 
placed on the increased productivity and creativity of software 
engineers rather than the fact it will take fewer persons to 
accomplish the task. 

Change is more acceptable when those affected have helped to 
create it than when it has been externally imposed. 

The response received to this effort was extraordinary, 
particularly from those Centers who will be highly impacted by 
software engineering and Ada principles and training programs. 
Thus by allowing persons who will be affected by the change to 
participate in its creation (such as this study), the likelihood 
for success increases. 

Change is more acceptable when it follows a series of successful 
changes than it is when it follows a series of failures. 

Initiating training programs, though a start, does not guarantee 
effective training. As a result, training that is ineffective 
(such as those programs that have the right objectives but are 
applied in the wrong environment) have the potential to do 
greater harm than good to the system. In addition to having 
poorly trained personnel, the manager must now expose this 
audience to additional training, thus the likelihood for 
resistance to change increases. 

Change is more acceptable to respondents new on the job than to 
respondents old on the job. 

This is a significant point that was highlighted by participants 
in both surveys. One characteristic of the NASA environment is 
long tenures of service. This increases the need for successful 
change strategies than if the persons affected by software 
engineering and Ada training were exclusively new to the 
environment . 



Change is more acceptable if it has been planned than if it is 
experimental. 

An integrated, consistent training program in software 
engineering and Ada represents planned change. Allowing the 
present haphazard selection, implementation, and evaluation of 
software engineering and Ada will decrease the acceptance and 
ultimately the effectiveness of training programs. This is 
further compounded by the fact that NASA, as a Federally funded 
organization, does not have unlimited resources, therefore must 
utilize resources maximally. Ada, software engineering and the 
Space Station represent a long term commitment to technology, 
personnel and planning. Training programs must contain the same 
level of commitment to those elements if these forces are 
expected to converge in the successful development large scale, 
complex systems such as Space Station. An integrated training 
program is the first component of such a commitment. 



SUMMARY 


A software engineering and Ada curriculum for training and education and a 
proposed implementation plan has been presented that can be adapted at each 
NASA center according to the needs dictated by each project. 

This report is based on a survey taken by meetings, telephone interviews 
and written media of the major NASA center's project and education offices. 

It is also based on previous research and discussions among education leaders 
at the Software Engineering Institute (SEI), the Ada Software Engineering 
Education and Training Team (ASEET) and the Research Institute for Computing 
and Information Systems (RICIS). 


Interested groups are also directed to the Armed Forces Communications and 
Electronics Association (AFCEA) report, "Ada Education and Training Study" 
covering a survey for industry and the Department of Defense. 



Appendix A 


SURVEY INSTRUMENTS 


SOFTWARE ENGINEERING 
AND 
ADA 

TRAINING SURVEY 


FOR CENTER TRAINING MANAGERS 
AUGUST 28, 1987 


NASA HEADQUARTERS 
CODE SSI 

WASHINGTON, DC. 20546 



Dear Participant: 


This survey has been designed to collect information regarding 
Software Engineering and Ada training activities at your Center. 
Please provide all information as completely as possible. You 
will be contacted by telephone within the next few days by Lisa 
Svabek or me to discuss the survey and get your observations. U e 
will then assimilate the data and report to Dana Hall at the 
Space Station Program Office. If you have questions or will not 
be able to assist us, please let us know. We want to be sure 
that your requirements are not omitted. We can be reached by 
phone at (7 13) 480-1994, or at SLEGRAND by Telemail or PROFS. 


This survey is comprised of three sections. Section One 
identifies your Center and how present training activities are 
initiated and implemented. Section Two obtains information about 
Software Engineering and Ada training activities and how your 
Center evaluates training activities. Section Three collects 
information about training activities that have been offered by 
your Center during the past three years and describes the 
audiences of these activities. It is appropriate to respond to 
Section 3 for each time a training activity has been offered, so 
we have enclosed an extra copy of this section that can be used 
to reproduce as many forms as needed* 


Thank you for your participation. 


Sincerely 





Sue LeGrand 

Principal Investigator 
NASA Ada Training Survey 


WO-125 


A-3 


Section i . 0 : 


General Center Information 
Complete Once 


1.1 Organization Information 

Center Name : 

Add r e s s : _____ 

City: State_ Zip 

l.l.l Number of NASA Employees at this Center: 

1.2 Respondent Information 
Respondent Name : 

Title: 

Mail Code: 

Telephone: ( ) - 

1.2.1 Please list the length of time you have been 
responsible for scheduling and implementing training activities at 
your Center: 

years months 

1.3 Other Expert Personnel: 

1.3.1 Please identify other persons at your Center who have 
selected and implemented Software Engineering and/or Ada training 
activities : 

Name : 

Title: 

Mail Code: 

Telephone: ( ) - 

Name : 

Title: 

Mail Code: 

Telephone ( ) - 


VO-125 _________ 

ORIGINAL PAGE IS 

OF POOR QUALITY 1 ~ 



1.3.2 Please identify other persons (NASA and Non 
consult for Software Engineering and/or Ada training 
concerns and advice. 


Name : 

Organization 
Address : 


City 

State 

Zip 

Telephone ( _ 

Name 

) 

~ 

Organization 

Address 

City 

State 

Zip 

Telephone ( __ 

) 

~ — 

Name 



Organization 

Address 

City 

State 

Zip 

Telephone ( _ 

) 

— — 

Name 



Organization 

Address 

City 

State 

Zip 

Telephone ( _ 

) __ __ _ 

— 


NASA ) you 
questions , 



Section 2.0 Anticipated Training Activities and Recommendations 

Complete Once 

2.1 Do you, as a buyer of training services and products, 
require additional information (such as a better understanding of 
the features of software engineering principles) to facilitate 
selecting Software Engineering and Ada training activities for 
your Center? If yes, what are your recommendations? 

_____ a. YES _____ b. NO c. Other 

Recommendations : 


2.2 Have you received requests for specific training 
activities at your Center in the areas of Software Engineering 
and/or Ada? Please list the training activity and the 
organization which offers it below: 

Activity 

Title Organization 

Activity 

Title Organization 


2.3 Do you have any recommendations as to how selecting 
and/or implementing Software Engineering and Ada training 
activities may be improved? 


2.4 How many Software Engineering and Ada training 
activities do you anticipate offering during the next 12 months 
(September, 1987-1988)? 


activities 


2.4.1 Please list these activities below: 


Technical includes programmers, analysts, 
configuration management and software quality 
Support personnel includes legal, administrative, 
personnel. 


designers, 

assurance. 

acquisition 


VO-125 


A-6 


Software Engineering Activities: 


Activity Type or Title 

Anticipated Number of Offerings 

Job Classification Number of Participants 

Management: Identify Level 


Technical/Computer Specialist: 


Support Personnel: 


Activity Type or Title 

Anticipated Number of Offerings 

Job Classification: Number of Participants: 

Management (Identify Level): 


Technical/Computer Specialist: 


Support Personnel: 


UO-125 


A-7 



Ada Training Activities: 


Activity Type or Title 

Anticipated Number of Offerings 

Job Classification: Number of Participants 

Management (Identify Level): 


Technical/Computer Specialist: 


Support Personnel: 


Activity Type or Title 

Anticipated Number of Offerings 

Job Classification: Number of Participants 

Management (Identify Level): 


Technical/Computer Specialist: 


Support Personnel: 


Activity Type or Title 

Anticipated Number of Offerings 

Job Classification: Number of Participants 

Management (Identify Level): 

Technical/Computer Specialist: 


Support Personnel: 


UO-125 


A-8 



2.5 Training Evaluation 

2.5.1 How do you presently evaluate training programs 
scheduled and implemented at your Center? Please describe: 


2.5.2 Do you receive formal evaluations for Software 
Engineering and Ada training activities? 

a. YES b. NO c. Other 


2.5.3 If YES, from whom do you receive these evaluations? 
Check all that apply: 

a. The Participants 

b. The Manager of the Participants 

c. The Instructor (evaluating the participants) 

d. Other (please specify) 


2.6 Training Requests: In the areas of Software Engineering and 

Ada, how many training activities were ( 1 ) requested by an 
Individual for his own training, (2) requested by an Organization 
Manager for training of his employees and (3) were Pre-planned in 
advance by your department . as part of employee development 
activities? Please fill in the table below: 

DATES 

08/84- 09/85- 09/86- 

08/85 08/86 08/87 


REQUEST TYPE 
Individual 
Organization 
Pre-Planned 


TOTALS 


Section 3.0: Previous Software Engineering and Ada Training 

Activities 

This Section is to be completed for each Software Engineering 
and/or Ada training activity offered by your Center from 
September, 1984 September, 1987. Training Activities are defined 
as structured training programs held onsite at yo".r Center or at 
a remote location where two or more participants were NASA 
employees. This definition includes workshops, seminars and 
conferences. If the activity was offered on numerous occasions, 
please count each occasion independently. 

3.1 Training Request and Implementation Information 

Training Identification Code: Center # 

3.1.1 Dates of Training: 

Implemented : / / Completed : / / 


3.1.2 Training Request: This activity was: 

a. Initiated by a NASA Manager: 

Name: T itle 

Date of Request: / / 

b. Initiated by a NASA Employee: 

Name : T itle : 

Date of Request: / / 

c. Part of an on-going program offered by the 

Employee Development Branch of this Center 

t. 

d. Other (Please specify) 


3.1.3 Location of Training. This training activity was 
performed at the following location: 

______ a. On-site at our Center 

b. Off -site at the Trainer's location 

_____ c. Off-site at a remote location 

d. Other (please specify) 


WO-125 


A-10 



3.2 Training Source 


3.2.1 Please identify the organization who performed or 
provided this training activity: 

Organization Name 

Instructor 

Contact Phone ( > - 


3.2.2 Was this organization an Office Professional 
Management (OPM) vendor at the time the training activity was 

S € X © C t ? 

a. YES b. NO c. Information Not 

Available 

3.3 Training Activity Information 

3.3.1’ Is a course description and/or syllabus available for 
this course/activity? 

a. YES (please send) b. NO 

c. Other 


3.3.2 Were there pre-requisites required for attending 
this training activity? 

a. YES (please specify ) 

b. NO c. Other 


3.3.3 Had this training activity been offered previously at 
your Center (within the past 36 months)? 

a. YES, this course was offered times. 

b. NO c. Other 


VO-125 


A-ll 


3.3.4 Did someone recommend this training activity to you? 
(Check all that apply) 

a. YES, Another Center's training personnel or employee 

Name: NASA Center 

b. YES, A NASA employee from my Center 

c. YES, An OPM office (Please identify) 

d. YES, Another Federal Agency Employee (please list the 

Agency ) : 

e. YES, Faculty Member (please list university 

affiliation ) : 

f. YES, Other (please list organization affiliation): 

g. NO 

3.3.5 Please identify the course/activity format and 
percentage of training time that was dedicated to the following: 
(Check all that apply) 

Format Percentage of Training Time 

a. Seminar/Lecture % 

b. Hands-on Lab/exercises * 

c. Lecture-type Computer-Aided * 

Instruction (CAI) 

d. Interactive CAI % 

e. Videotape * 

f. Film % 

g. Other (please specify): * 


UO-125 


A-12 



3.4 Training Support Services/Materials: , 

3-4. 1 Please identify which of the following support 
services where provided in conjunction with this training 
activity? Check all that apply from the following list: 

a. Text Book; (title) 

b. Compiler(s); ( identify ) 

c. Tapes; (identify) 

d. On-line Help Services; (describe) 

e. User Support Services; (describe) 

f. Other (describe) 


3.4.2 What were the type(s) of Computer Hardware and the 
operating system(s) which were utilized in conjunction with this 
training activity? Please identify in the following matrix: 

Computer Hardware 


PC-based Engineering Mini- Main- Other 

Operating Work Station Computer Frame 

System 


( j J 

MS-DOS { i i 


i : ; 

PC-DOS i i 


1 ! ! " " 
PS/2 ! - 1 | 


i ! 1 

Macintosh 1 1 1 


1 1 I 

VMS 1 1 I 


1 1 1 

UNIX (XENIX) 1 1 1 


t 1 1 

VM III 


i I 1 

MVS III 


1 III 

IMS 1 ill 


Other I I | I 


If "Other" please specify: 


WO- 125 


A-13 



3.5 Audience Characteristics and Recommendations 

3.5.1 Please list the number of NASA personnel that 
participated in this training activity: 


persons 


3.5.2 Please identify this group by listing the numbers 
within each organization and job classification that participated 
in this training activity on the following matrix: 

Organization Name (please fill in) 

Organization Organization Organization 


Classification 


1 1 

Upper Level ! 1 

o- Management ! ! 

— — • 1 ^ 



Division ! 1 

Chief ! 1 

w 1 l 



Branch ! 1 

Chief 1 1 

j -p -p. | ___________ 



Program 1 1 

Management i : 

_ - _ j _ J _____ 



« - * - ■ 

w Project ! i 

Management i i 



Technical/ 1 ! 

w ( Computer 1 1 

Specialist*) 1 1 

! I 


1 

1 

Support** 1 J 1 

Personnel 1 1 1 

1 1 1 

I i 

1 

Other list below II 1 ! 

— 1 1 1 ' 



* Technical includes programmers, analysts, designers, 
configuration management and software quality assurance 

** Support personnel includes legal, administrative, 
acquisition personnel 


VJO-125 


A-14 




3-5.3 Would you offer this training activity again and'^r 
recommend it to another NASA Center? Check all that apply. 

a. YES, I have secured this training activity 

again. (Please list the Training Identification 
Code ( s ) : 


b. YES, I have recommended or would' recommend this 
training activity to other NASA Centers. 

continued on next page 


c. NO, I would not offer or recommend this course 
for the following reasons: 


d. Other (please specify): 


Thank you for completing this survey. If there are additional 
comments you wish to make or material that you can share, please 
send them to us. 


VO-125 


A-15 


Appendix B 


SURVEY DISTRIBUTION 


The following persons were requested to participate in thv. Project Office 
Survey: 


ARC: 

GSFC: 

Bob Carlson 
Andy Goforth 

Joe Gitleman 
Ed Seidevitz 
Frank McGarry 
Mike Stark 

Headquarters: 

JPL: 

Bob Nelson 
Bill Wilson 

Ken Clark 
Tom Handley 
Allan Klump 
Ed Ng 

Jody Steinbacher 

JSC: 


Gary Raines 
Ed Chevers 
Jackie Fisher 
Ernie Fridge 
Mike Gaudiano 
Steve Gorman 

Ted Humphrey 
Robert MacDonald 
Clark Pounds 
Robert Shuler 
Robert Schwartz 
Leo Waltz 
Virginia Whitelaw 

KSC: 

LeRC: 

Richard Sharum 
John Straiton 
Rick Wesenberg 
Larry Wilhelm 

Carl Daniele 
Jerry Sadler 
Kathy Schubert 
Mike McGaw 

MSFC: 

NSTL: 

Charles Baugher 
Chris Hauff 
John Wolfsberger 
Bob Stevens 
Larry Taormina 

Joel Wakeland 


After initial telephone interviews at each Center, the Education Offi 
survey was distributed to the following persons: 


Center: 

ARC 

GSFC 

JPL 

JSC 

KSC 

LaRC 

LeRC 

MSFC 

NASA Headquarters 
NSTL 


Person: 

Sylvia Stanley 
Carolyn Casey 
Cynthia Chinn 
Amy Kennedy 
Tom Baron 
Fred Thompson 
Joe Wasdovich 
Norm Hochberger 
Gina Fulbright 
Sharon Jeffers 



Appendix C 


DETAILED FINDINGS - PROJECT OFFICES 


Within each section of the survey, key areas emerged as being of central 
concern to the sample population. Belov these areas are discussed, the 
results stated and deviations from the norm have been noted. 

SURVEY PART I: ORGANIZATION 

Question 3: Personnel 

As stated in Section 4.5.1 of this report, the number of personnel covered 
by the sample population in this survey are: 


Managers 

343 

Technical 

925 

Support 

131 


For the purpose of this survey, "Manager" is defined as persons involved 
in direct technical management as veil as those involved in contract 
monitoring, administration and management support. "Technical" is defined as 
those vhose primary responsibilities are in the specification, detailed 
design, implementation, technical reviev, software integration, software 
quality assurance, configuration management and data management. "Support" is 
defined as those persons whose primary responsibilities are in legal, 
educational, administration and acquisition. 

Of the above totals, the following is the breakdown by Center in each 
category of personnel and what percent that number is of the category. 


VO-125 


C-l 



Managemen t : 


Center: 

GSFC 

JSC 

ARC 

KSC 

JPL 

LeRC 

Number: 

61 

156 

35 

17 

4 

70 

* of Mgmt: 

(17*) 

(45*) 

(10*) 

(04*) 

(01*) 

(20*) 

Technical: 

Number : 

224 

310 

250 

75 

41 

25 

* of Tech: 

(24*) 

(33*) 

(27*) 

(08*) 

(04*) 

(02*) 

Support: 

Number: 

25 

59 

15 

7 

20 

5 

X of Support 

(19*) 

(45*) 

(11*) 

(05*) 

(15*) 

(03*) 

^Respondents 

from Marshall 

Space Flight Center 

did not 

list the 

breakdown 


personnel, thus their personnel figures are not represented in this table. 

Question 4: Software Development/Support Experience 

The following represents collective responses for the respondents' 
experience in software development and/or support: 


Category 

Ground Systems 
Real Time 
Non Real Time 
Scientific 
Database Management 
Flight Systems 
Statistical 


Number of Responses* 

18 

18 

18 

15 

15 

13 

5 


Three respondents cite additional areas; simulation of flight and ground 
systems to support crew training, signal analysis, FPS range radar, and office 
automation. 


*Due to the nature of the question, multiple answers were acceptable 



DEVELOPMENT SECTION: 


Question 5: Software Environment 

Many respondents, citing more than one category, usually included the real 
time environment as used in their organization. These findings are summarized 
below: 


Environment 

Real Time 
Batch 

Simulation 

Computer Aided Design 


Number of Responses* 

20 

11 

11 

4 


*Due to the nature of this question, multiple answers were acceptable. 
Question 6: Outputs Produced and/or Monitored 


Respondents typically had various outputs that their organizations 
monitored and/or produced. Below are those most frequently listed. A 
detailed analysis can be found in Appendix D. 


Output 


Number of Responses* 


Requirements Specifications 22 
Code 21 
Milestone charts/schedules 21 
Design specifications 19 
Test plans 19 
Analysis reports/summaries 19 


One respondent cited professional papers as an output of the organization 


*Due to the nature of the question, multiple answers were acceptable. 


Question 7: Principal Involvement 


Technical Management leads as the sample population's most often 
involvement in software development. Below, the most frequently mentioned 
responses are listed and a detailed analysis can be found in Appendix D. 



Involvement 


Number of Responses* 


Technical Management 

19 

Design 

17 

Code 

17 

Systems Analysis 

16 


In addition, three respondents list other areas where their organizations 
are involved in software development. Two respondents cite prototyping of 
systems and one respondent cites development and testing of operations 
concepts and system integration as principal involvements. 

*Due to the nature of the question, multiple answers were acceptable. 

SUPPORT SECTION 

Of the twenty-four respondents, nine cite that their responsibilities were 
primarily in the support area. Appendix C contains the listing of the 
respondents participating in this section. 

Question 8: Outputs Produced or Monitored 

All respondents cited multiple duties for this question, and cited test 
plans as an output of their organization. Below are those most frequently 
mentioned. A detailed analysis can be found in Appendix 0. 

Output Number of Responses* 

Test plans 9 

Redlined documentation 8 

Technical advice to 8 

Configuration Control Board 

*Due to the nature of the question, multiple answers were acceptable. 

Question 9: Principal Involvement 

The two primary involvements cited by this group were analysis and 
technical management. At the other end of the spectrum, those involvements 
listed least frequently were structured walk-throughs and quality assurance. 

A detailed analysis of these responses can be found in Appendix D. 



GENERAL INFORMATION SECTION 


Question 10: Number of Previous Ada Projects 

Cumulative Total: 20** 

Question 10 addresses the number of projects in which Ada has been 
utilized by the organization. As with the personnel issues in Question 3, 
distribution of these projects is not even throughout the Centers. Below, 
each Center is listed with the corresponding number of Ada projects. 

Center Number of Ada Projects 

JSC 9 

LeRC 4 

GSFC 4 

JPL 2 

KSC 1 

**One JSC respondent answered this question qualitatively rather than 
quantitively, thus the response is not included in this total. 

Question 11: Approximate Ada Experience 

The respondents were asked to identify the approximate minimum, maximum 
and average Ada experience of their staff (management, technical and support 
personnel. A Detailed summary of these responses are included in Appendix F 
The following summarizes these findings: 

Management Personnel: 

Minimum Experience 

Of the nineteen respondents that list minimum experience for their 
managers, 18 state the experience minimum to be zero. The final respondent 
cites two weeks as a minimum management experience in Ada. 


C-5 


C-A 


UO-125 



Maximum Experience 


Of the eighteen respondents that cite a maximum experience level, 66X cite 
this level to be six months or less, vith seven of those responses being zero 
experience . 

Average Experience: 

Of the nineteen respondents, 12 cite the average experience in Ada for 
their management personnel to be zero, vith five additional respondents citing 
between one and six months experience. 

Technical Personnel: 

Minimum Experience 

Of the tventy-one respondents, fourteen cite zero experience in Ada for 
their technical staff. An additional five respondents cite minimum experience 
levels to be less than six months. 

Maximum Experience 

Of the seventeen respondents citing a maximum level, three cite zero 
experience levels, vith an additional seven respondents citing a maximum 
experience level of one to six months. 

Average Experience 

Of the eighteen respondents citing an average experience level for their 
technical staff, fourteen cited the experience level to be six months or less, 
vith five of these responses being zero. 


VO-125 


C-6 



Support Personnel: 


Minimum Experience 

Of the nineteen respondents, eighteen cite the minimum experience levels 
for support personnel to be zero. 

Maximum Experience: 

Of the eighteen respondents, fifteen cite the maximum experience levels of 
their support personnel in Ada to be zero. 

Average Experience: 

Of the seventeen respondents citing an average experience level for their 
support personnel, fifteen cite zero experience. 

Question 12: Computer Hardware for System Development 

Mainframe systems are cited most frequently by the sample population, 
however the majority of respondents list numerous systems. Below is a summary 
of these findings: 


Hardware 

Number of Responses 

Mainframe 

18 

Workstations on LANs 

15 

Individual Workstations 

14 

Small multi-user 

11 


*Due to the nature of the question, multiple answers were acceptable. 
Question 13.1: Ada's Use as a Program Design Language 

Five respondents state that they are presently using Ada as a Program 
Design Language, representing 21 X of the sample population. 


Question 13.2: Ada's Use as an Implementation Language 


Eleven respondents state they are presently using Ada as an Implementation 
Language, representing 47% of the sample population. 


Question 14: Projected Use of Ada as a Programming Language 


As stated previously, these respondents estimate a total of 150 projects 
which will require the use of Ada as the Programming Language from 1987-1991. 
The following is a breakdown by year and center: 


Year 1987 1988 

Center 

JSC 16 12 

ARC 1 2 

GSFC 10 10 

LeRC 2 1 

JPL 2 0 

MSFC 3 3 

KSC _2 3 

TTL: 36 31 


1989 1990 1991 

16 19 18 

8 8 8 

111 
0 0 0 

3 0 0 

_0 0 0 _ 

28 28 27 150 


WO- 125 


C-8 


Question 15: Projected Use of Ada as a Program Design Language 


As stated previously, respondents state that a total of 94 projects are 
anticipated utilizing Ada as a Program Design Language for the period of 
1987-1991. Below is a breakdown by year per Center: 


Year 

Center 

JSC 

ARC 

GSFC 

LeRC 

JPL 

MSFC 

KSC 

TTL: 


1987 


3 

0 

10 

0 

0 

3 

_0 

16 


1988 

4 

0 

10 

0 

0 

3 

0 

17 


1989 

6 

1 

8 

0 

0 

2 

0 

17 


Question 16: Ada Implementation Plan 


1990 


1991 


11 

0 

8 

0 

0 

2 

0 


13 

0 

8 

0 

0 

2 

0 


21 


23 


94 


Of the twenty-four respondents, only five have a written plan for 
implementing Ada. In four of the five, an education and training plan was 
included for managers and technical personnel and in three of the five, for 
support personnel. 


PART II: PROJECT DATA 


Part Two collects information about each project presently planned to use 
Ada. There are twenty-nine projects reported from the various Centers. The 
characteristics of these projects are included in Appendix G. 


VO-125 


C-9 


Question 21: Projected Training Needs 


For the twenty-nine projects reported, below are listed the projected 
training needs for each classification of personnel for the period of 


1987-1992: 

Present- 

12/88 

1/89- 

12/89 

1/90- 

12/90 

1/91- 

12/92 

TTL 

Personnel 






Managers 

132 

84 

72 

80 

368 

Technical 

121 

225.5 

165 

172 

683.5 

Support 

TTLS: 

50 

27 

31 

38 

146 

303 

336.5 

268 

290 

1195.5 


*** 





Question 22: 

Project Use of 

Ada 





For the twenty-nine projects reported above, respondents were asked to 
identify the way in which Ada is to be used. Below summarizes these findings: 


Number of Responses * 

22 

2 

8 


Use of Ada 

Design and implementation 
Design language 
Target language 


*Three respondents cited multiple usage of Ada. 
with other project information in Appendix G. 


These findings are reported 


WO- 125 


C-10 


PART III. PRESENT TRAINING 


In this section, respondents were asked to estimate the percentage of 
their staff who have received some form of software engineering and/or Ada 
training and the format of that training. Below is a summary of the number of 
respondents for each training type and personnel category: 

Training Type: Software Engineering 


% of Staff 


Staff Type 

0-25% 

26-50% 

51-75% 

76-100% 

Managers 

11 

4 

2 

5 

Technical 

8 

6 

5 

1 

Support 

20 

1 

0 

0 

Training Type; 

Ada 






% of Staff 



Staff Type 

0-25% 

26-50% 

51-75% 

76-100% 

Managers 

15 

2 

1 

4 

Technical 

11 

5 

3 

2 

Support 

22 

0 

0 

0 


VO-125 


C-ll 


Below is a summary of the forms of SOFTWARE ENGINEERING training received 
by the staff of these respondents: 


Responses* 


Training Format 

Managers 

Technical 

Support 

Self Taught 

8 

10 

3 

Seminars 

11 

10 

3 

University courses 

8 

10 

3 

Government courses 

14 

11 

4 

Videotape 

6 

6 

1 

Film 

3 

0 

1 

In-house; 1-3 days 

7 

5 

2 

In-house; 3-5 days 

5 

5 

1 

In-house; 5+ days 

2 

2 

0 

Computer-Aided Instr. 

1 

2 

1 

*Due to the nature of 

the question, 

multiple answers were 

acceptable. 

Below is a summary 
these respondents: 

of the forms 

of Ada training received by the staff 
Responses* 

Training Format 

Managers 

Technical 

Support 


Self-Taught 

3 

6 

2 

Seminars 

14 

13 

2 

University courses 

4 

6 

2 

Government courses 

10 

12 

4 

Videotape 

3 

5 

0 

Film 

2 

0 

0 

In-house; 1-3 days 

2 

2 

0 

In-house; 3-5 days 

5 

5 

0 

In-house; 5+ days 

0 

2 

0 

Computer Aided Instr. 

0 

2 

1 


*Due to the nature of the question, multiple answers were acceptable. 


VO-125 


C-12 




PART IV: SOFTWARE DEVELOPMENT POLICIES 


Of the twenty-four survey participants, less than half (11 respondents) 
have documented software development policies. These policies are most often 
established by internal committees and/or study groups. Software policies and 
procedures are implemented primarily by the project lcader/supervisor with 
printed materials such as technical memos. Updates and changes to these 
policies are most often communicated to personnel by the project 
leader/supervisor and printed materials. In addition, the most common 
applications for these policies are in scientific applications, computer 
systems design and development and testing. A detailed analysis of these 
findings are contained in Appendix D. 


VO-125 


soFTecH 



Appendix 0 

ACCUMULATED FINDINGS - PROJECT OFFICES 



ADA AND SOFTWARE ENGINEERING 


TRAINING SURVEY FOR PROJECT OFFICES 


PART I: ORGANIZATION/ PLAN 
l. Vhac Is your name? Tide? 

The name of your organization? 

I 

Your work, address? 


Your telephone number? ( ) 


2. What is the si 2 e (number of people) of Che project or organization that 
you are responding for? Check one. 


a. Under 10 people 

b. il - 50 

c. 51 - 100 

d. 101 - 1,000 

e. 1,001 - 10,000 

f. Over 10,000 


3. For how many people in each group below are you reporting? 


a • 

b. 

c. 


NOTE: Include as managers those persons involved in 
direct technical management as well as those 
managers such as contract monitors who are involved 
in the administration and management support of the 
project. Include as technical personnel chose 
persons primarily involved in specification, 
detailed design, implementation, technical review, 
software integration, software quality assurance, 
configuration management -and data management. 
Include as support personnel those persons primarily 
involved in legal, administration and acquisition. 


Managers 

Technical 

Support 


34-3 


r«j 


VO-125 


D-2 



Which of che following areas describe 
software development and/or support? 


a. Administration 

b. Scientific 1 6 


8 


Computer systems design & 
development 

Flight systems 
Ground systems 

Real tine 

Non real time H. 


& 


your 

organizat Ion's ex per 

1 e n c e 

(Check all chat apply.) 


8- 

Database manag^cenc 

IS ■ 

h. 

Statistical O 


i. 

Other fee 002. 



JSC POfe 

use 014 


DEVELOPMENT 

IF YOUR DUTIES ARE PRINCIPALLY IN THE DEVELOPMENT AREA, PLEASE ANSWER THE 
FOLLOWING QUESTIONS: 


5. 


Which of the following best describe che software support 
environment used in your organization's projects? 


a. 

Bacch 

il 

b. 

Real Time 


c. 

Simulation 


d. 

Compucer Aided Design (CAD) 


6. What outputs does your organization produce or monitor? 
(Check as many as are appropriate.) 


Jla. 

n b . 

_Li. 
2A d - 
_1TL *• 

3.* f. 



Hardware/sof tware 
tradeoff evaluation 
Data flow diagrams 
Test drivers 
Code 

Program design language 
or flow charts 
Requirements 
specifications 
Design specifications 
Test plans 
Integrations plans 



Management plans 
Cose data 


Analysis reporcs/summaries 

Milestone char cs/schedules 

Status reports 

Interview sheets/Hiring 

recommendations 

Correspondence 

Other (explain) Jr U QO*“ 


7. Which of che following describe your organization's principal involvement? 


a. 




Requirements /Ana lysis 
Review ( /(^C onduce , 

4 A ttend) 

System Analysis 
Design 

Design Review (/^Conduct) 
'I Attend) 

Code 

Structured Walkthroughs 
( ^Conduce , S Attend) 
Fornwlacion of Policy 



Formulation of Strategy 
Technical Management 
Program Management 
Configuration Management 
Qualicy Assurance 
Monitoring contracts 
Ocher (explain) %JrL QO I 

JSC. Q \0._ 

oscon 



SUPPORT 


IF YOUR DUTIES ARE PRINCIPALLY IN THE SUPPORT AREA, PLEASE ANSWER 7KS 
FOLLOWING QUESTIONS: 


8 . 


What outputs does your organisation produce or monitor? (Check as ,tanv as 
appropriate. ) 



Software trouble 
r*fnrr analyses 
Temporary (proposed) 

Engineering Change 
Proposals 

Red lined documentation 
Test plans 
Test drivers 
Technical advice to 
Configuration Control 
Board 

Updated MIL-STD specification 
Library Control 

Maintain configuration procedures 


Updated training manuals 
Updated user manuals 
Software Trouble Reports 
(STRs) 

Automated build systems 
Management information reports 
Version description documents 
Version audits 
Field engineering reports 
Other (explain) . 


9. 


Which of the following describe your organization's principal involvement? 
(Check as many as appropriate.) 




Analysis 

Design ^ 

Design Review Q Conduct , 
^fAttend) 

Code/Patch 


Structured Walkthroughs 
( | Conduct , dm Attend ) 
Technical Management 
Formulation of policy 



Q. 


Program Management 

Software Configuration Control 

Board participation 

Configuration management 

Quality Assurance 

Monitoring contracts 

Other (explain) 


GENERAL QUESTIONS FOR ALL 

10* On how many projects in this organization has Ada been used? 

AO 


II. What is the approximate Ada experience of each group (in months)? 

Min. Max* Average 

II. L Managers a* _____ b. c* _____ 

11.2 Technical a. b. c# 

n . 3 Support a. b* c. 



What kind of hardware is used for a development sv$zen\ 


a . 

b. 


Mainframe 
Small raulci-user 

c. Individual workstations 

d. Workstations on a local area network 

e. Other 


JJL 

-IL- 

-JSL 


13. Does your organization presently use Ada as either a Program Design 
Language or as an implementation language? 


14.1 

a* 

be * 

Yes 

No 

«=- 

14.2 

a. 

Yes 

_LL 


b. 

No 


How many 

pro 

Jects 

that require the use of Ada as che 


programming language are you planning? 

a. j»U '87 b. 3I_ _'88 c. IS '89 d. ^8 '90 e.%1_ '91 

15. How many projects that require the use of Ada as che program 
design language are you planning? 


I U '87 b. I'? '88 c. J^'89 d. 15" '90 e. 


'91 


16. Does your organization have a written plan for Implementing Ada use? 


a. 

b. 


Yes 

"So 


VO-125 


D-5 



17. If 16 Is a Yes, Is this plan documented for Che: (check all chat apply) 

a. ^ Shore range (2 years or less) 

b. Medium range (2 to 5 years) 

c. ^ Long range (more chan 5 years) 

13 * If 16 Is a Yes, does che plan Include the education and training 
requirements for personnel addressing che use of Ada? 

.. +US 
b. No 

19. If 16 is a Yes, does the plan include the education and training 

requirements for managers, technical personnel, and support personnel? 


19.1 

Managers: 

a. *f Yes 



b. _ 

No 

19.2 

Technical: 

a. Yes 



b. _ 

No 

19.3 

Support: 

a. 3 Yes 



b. 

No 



PART IT: PROJECT DATA 


20. NOTE: Please answer die following questions co che best of your ablllcv 
regarding Che education and training provided to your organisation for a 
previous or present project or requlreaencs of your organization «i:h respect 
to a future project. (Questions 21-23 oay be repeated for each project.) 

Scheduled to use Ada b. Might use Ada 


Project 

Name 



Project 

Size (1987 $) 

SW Portion of Project 

X 

Project 

Size in lines of code (count 

terminating semicolins) 


Project 

Duration (Months) 

Start dace 


Average 

Number of Managers 

Software Managers 

X 

Average 

No. of Technical Personnel 

SW Technical Personnel 

X 

Average 

No. of Support Personnel 

SW Support Personnel 

X 


21. For the project on which you are responding, what is the estimated number 
of NASA personnel trained in Ada required in che following categories 
for che fiscal years indicated: 



Now- 1988 

1989-90 1990-91 

1991-92 


21 ,1 Managers 

.. 1 32. 

b. 3 c. *72 

d. & 0 

3 lt> 8 

21.2 Technical 

.. 12.1 

f. 2.2S-5 k. IfrT 

>>. 172 

It S3 . S 

21.3 Support 


j. a? k. 

1._|SL 



22. In what way does che project you are reporting on use or plan co use Ada? 

a. As a full design and implementation language. 

b. As a design language only; anocher language will be used for 

implementation. 

c. As a target language from a conversion from another language. 


D-7 


VO-125 


PRESENT TRAINING 


IF ANY OF YOUR STAFF HAVE PARTICIPATED IN SOFTWARE ENGINEERING CR 
Ada TRAINING, ANSWER THE FOLLOWING QUESTIONS: 


23. Approximately, what percentage of your organization's staff has 
participated in software engineering training? 


23.1 

Managers 
\ \ a. 0-25% 

b. 26-50% 

‘ c. 51-75% 

^ d. 76-100% 

23.2 

Technical 
. M a-. 0-25% 

(p b. 26-50% 

c. 51-75% 

l d. 76-100% 

23.3 

Support 

2.0 a. 0-25% 

| b. 26-50% 

1 c. 51-75% 

_^*d. 76-100% 


24. What form(s) of software engineering training has your 
staff received? 


24.1 Managers 



a. Self caught 
Ada seminars 

University sponsored course 
Government sponsored course 
Videotapes 
Film 


’ In-house course: 

1 g 1-3 days 
~£ h. 3-5 days 
3 1. More than 5 

j. Computer Aided 

k. Other 


tar Aided Ins 

QJ£dLflOl) 


days 

Instruction (CAI) 


24.2 Technical 



z. j. 

k . 


. Self caught 
Ada seminars 

University sponsored course 
Government sponsored course 
Videotapes 


Film 

In-house course: 

& g 1-3 days 
JS h. 3-5 days 

i. More chan 5 days 
Computer Aided Instruction (CAI) 
Other QO t 


WO- 125 


D-8 



2*. 3 Support 



. Self Caught 
Ada seminars 
University sponsored 
Government sponsored 
Videotapes 
F Llm 


course 

course 


In-house course: 

£ g 1-3 days 
y h. 3-5 days 
Q I* More than 5 days 

L j • Computer Aided Instruction (CAl) 

Q k. Ocher __ 


25, Approximately, what percentage of your organization's staff ha 
participated in Ada training? 


25.1 

Managers 

a. 0-252 

x 

b. 26-502 

J c. 51-752 


d. 

76-1002 

25.2 

Technical 
j | a. 0-252 

6 _ 

b. 26-502 

3 c. 51-752 

> 

d. 

76-1002 

25.3 

Support 
Zia. 0-252 

_0 

b. 26-502 

0 c. 51-752 

0 

d. 

76-1002 


26. 


What form(s) 


of 


Ada training has your staff 


received? 


26.1 Managers 


26.2 Technical 



Self taught 
Ada seminars 

University sponsored course 
Government sponsored course 
Videotapes 
Film 


In-house course: 

^ g 1-3 days 
. K h. 3-5 days 
Q 1. More than 5 days 
j. Computer Aided Instruction (CAl) 
_ k. Other osc ooi 


J®. a - 

1 A b. 

lg c. 

& 

_a t. 


* j. 


osc ooa. 

. ,, JSC. 003 

Self taught 
Ada seminars 

University sponsored course 
Government sponsored course 
Videotapes 
Film 

In-house course: 

2. g 1~3 days 
.S h. 3-5 days 
T. 1. Hore than 5 days 
Computer Aided Instruction (CAl) 
Other 



26.2 Support 



Self caught 
Ada seminars 

University sponsored course 
Government sponsored course 
Videotapes 
Film 

In-house course: 

O g 1-3 days 
Q h. 3-3 days 
Q 1. More chan 5 days 
Compucer Aided Inscruccion (CAI) 
Ocher 


27. W'hac lessons has your organizadon learned, in general, in using Ada chac 
you believe should be incorporaced inco a craining program? 


28. Whac changes would you make 
craining is done? 


in Che way software engineering and Ada 


WO-125 


D-10 


PART IV: SOFTWARE DEVELOPMENT POLICIES 


IP TOUR ORGANIZATION HAS DOCUMENTED POLICIES AND PROCEDURES FCR SOFTWARE 
DEVELOPMENT, ANSWER THE FOLLOUINC QUESTIONS: 


29. How were these policies and procedures escabl ished? 


Jl- 


, c . 
d. 


Internal committee or study group 
Internal consul cant ( s ) 

Outside consul tanc(s) .. , i e ^ 

ocher |£5C OOi^_ JS4 oO) y JSd 0 02 . JSC CCH i JSCOtO 


30, Hov were these policies and procedures implemented? (check as tr.anv as 
appropriate . ) 


^ a. Pilot project 
2m h. Internally developed courses 
c* Contracted training 
fi d. Project leader/supervisor 
£ e. Printed materials 

f. Other (explain) .vscoaS KSC.QQI 

31. If policies and procedures are updated, how are these changes 
comnunicated to the staff? 


_ 0 _ a - 
_1_ b. 



Internally developed courses 
Contracted training 
Project leader/supervisor 
Printed materials 
Other (explain) 


32. How have these policies and procedures been applied? 



Scientific applications 

Computer systems design and development 

Distributed systems 

Testing 

Logistics 


Thank you for completing this Survey. If there are additional comments 
you wish to make or material that you can share, please send them to us. 



Appendix B 


PROJECT OFFICES IN SUPPORT AREAS 


Center: 

Respondent: 

JSC-001 

Mission Design/Develop. 

JSC-004 

Spacecraft Software 

JSC-009 

Avionic Systems Div. 

JSC-014 

Simulation Development 

KSC-001 

Design Engineering Directorate 

KSC-002 

Electronic Eng. Support Div. 

MSFC-002 

System Software Branch 

GSFC-002 

SSIS Data Systems/SSPO 

ARC-001 

Information Not Available 


VO-125 


E-l 



Appendix F 


SUMMARY OF Ada EXPERIENCE FOR PROJECT OFFICE PERSONNEL - Question 11 

(in months) 


MANAGERS: 


— 

Minimum Ada Experience 

Maximum 

Ada Experience 

Average Ada Experience 


Range: 0-.50 

Range: 0 

-60 

Range : 

0-40 



Distribution: 




Months #/Responses 

Months 

#/Responses 

Months 

#/Responses 


-0- 18 

- 0 - 

7 

- 0 - 

12 


.50 1 

.50 

1 

.50 

- 0 - 


1 

1 

1 

1 

2 



2 

2 

2 

2 



3 

3 


3 

1 


4 

4 

1 

4 



6 

6 

2 

6 

1 


18 

18 

1 

18 

1 


30 

30 

1 

30 



40 

40 


40 

1 

— 

48 

48 

1 

48 



60 

60 

1 

60 


W! 

19 


18 


18 




Minimum Ada Experience 

Range: 0-48 


TECHNICAL: 


Average Ada Experience 
Range: 0-48 


Maximum Ada Experience 

Range: 0-60 

Distribution: 

Months #/Responses Months #/Responses Months #/Responses 


-0- 14 -0- 

1 1 1 

2 1 2 

3 1 3 

4 1 4 

5 5 

6 1 6 

7 7 

8 8 

10 10 

12 12 

24 24 

30 30 

36 36 

48 1 48 

60 60 


20 


3 -0- b 

1 1 

2 2 

1 3 2 

2 4 1 

5 1 

3 6 2 

1 7 

8 1 

10 1 

1 12 

24 1 

2 30 

1 36 

1 48 1 

_1 60 _ 

16 18 


UO-125 


F-2 


SUPPORT 


Minimun Experience 

Range: 0-36 

Months #/Responses 
-0- 18 

5 
9 

12 

36 _1 

19 


Maximum Experience 

Range: 0-36 

Distribution: 

Months #/Responses 
-0- 15 

5 1 

9 

12 1 

36 J. 

18 


Average Experience 
Range: 0-36 

Months #/Responses 
-0- 15 

5 

9 1 

12 

36 _1 

17 



Appendix G 


PROJECT DATA 


Respondent: KSC-001 

Project Size: $1,200,000 

Lines of Code: 3,000 

Duration: 6 months 

Average Managers: 2 

Average Technical: 3 

Average Support: 0 

Using Ada as: 


Project Name: GDMM — Remote Interface Module 

Software Portion (%): 5 

Start Date: 0ct/87 

X of Managers-Sof tware: 80 

X of Technical-Software: 80 

X of Support-Software: 


YES Design and Implementation Language 

Design Language Only 
YES Target Language 


Respondent: KSC-002 

Project Size: $ 75,000 

Lines of Code: 3,000 

Duration: 24 months 

Average Managers: 2 

Average Technical: 7 

Average Support: 0 

Using Ada as: 


Project Name: Clear Error 

Doppler Radar Workstation 

Software Portion (%): 50 

Start Date: Apr/87 

X of Managers-Sof tware: 50 

X of Technical-Software: 40 

X of Support-Software: 


YES Design and Implementation Language 

Design Language Only 
Target Language 


WO-125 


G-l 



Respondent: MSFC-001 

Project Size: 18 man months 

Lines of Code: 10,000 

Duration: 6 months 

Average Managers: 1 

Average Technical: 8 

Average Support: 0 

Using Ada as: 


Project Name: Secure Shuttle Data Sys 

Software Portion (£): 100 

Start Date: Jul/87 

X of Managers-Sof tware. 100 
X of Technical-Software: 100 

% of Support-Software: 


YES Design and Implementation Language 

Design Language Only 
Target Language 


Respondent: MSFC-002 

Project Size: $200 million 

Lines of Code: 30,000 

Duration: 72 months 

Average Managers : 3 

Average Technical: 5 

Average Support: 4 

Using Ada as: 


Project Name: 0MV 

Software Portion (%): 5 

Start Date: Oct/87 

% of Managers-Sof tware: N/A* 

X of Technical-Software: N/A 

X of Support-Software: N/A 


YES Design and Implementation Language 

Design Language Only 
Target Language 


*N/A = Not available 


Respondent: JPL-001 

Project Size: $7 million 

Lines of Code: 70,000 

Duration: 36 months 

Average Managers: 3 

Average Technical: 40 

Average Support: 20 

Using Ada as: 


Project Name: Global Decision Suppor 

System 

Software Portion (%): 95 

Start Date: Sep/85 

X of Managers-Sof tware: 100 

X of Technical-Software: 95 

X of Support-Software: 95 


YES Design and Implementation Language 

Design Language Only 
Target Language 


Respondent: JPL-002 

Project Size: $250,000 

Lines of Code: 30,000 

Duration: 48 months 

Average Managers: .50 

Average Technical: 1.5 
Average Support: -0- 

Using Ada as: 


Project Name: Trajectory Shaping 

Rendezvous Guidance 

Software Portion (%): 90 

Start Date: Mar/86 

X of Managers-Sof tware: 100 

X of Technical-Software: 100 

X of Support-Software: 


YES 


Design and Implementation Language 
Design Language Only 
Target Language 



Respondent: LeRC-OOla 


Project Name: Ada Control and 

Simulation Program 

Project Size: N/A Software Portion (X): N/A 

Lines of Code: 750 


Duration: 12 months 

Start Date: 0ct/86 


Average Managers: 2 

X of Managers-Sof tware: 

100 

Average Technical: 1 

X of Technical-Software: 

100 

Average Support: -0- 

X of Support-Software: 



Using Ada as: 

Design and Implementation Language 
Design Language Only 
YES Target Language 


Respondent: LeRC-OOlb 

Project Size: N/A 

Lines of Code: 30,000 

Duration: 24 months 


Project Name: Power Management and 

Distribution Testbed 
Phase I 

Software Portion ( X ): N/A 


Start Date: Sep/86 


33 
24 

Using Ada as: 

YES Design and Implementation Language 

Design Language Only 
Target Language 


Average Managers: 6 

Average Technical: 4 

Average Support: -0- 


X of Managers-Sof tvare: 

X of Technical-Software: 
X of Support-Software: 


VO-125 


G-4 


Respondent: ARC-001 

Project Size: N/A 

Lines of Code: N/A 

Duration: 6 months 

Average Managers: N/A 

Average Technical: 2 

Average Support: -0- 

Using Ada as: 


Project Name: N/A 

Software Portion ( X ): N/A 

Start Date: N/A 

X of Managers-Sof tware: N/A 

X of Technical-Software: 100 

X of Support-Software: 


N/A Design and Implementation Language 

N/A Design Language Only 

N/A Target Language 


Respondent: JSC-004a 

Project Size: N/A 

Lines of Code: 1,245,000 

Duration: 72 months 

Average Managers : 10 

Average Technical: 6 

Average Support: 

Using Ada as: 

YES 


Project Name: SSE (non-COTS) 

Software Portion (£): N/A 

Start Date: N/A 

X of Managers-Sof tware: N/A 

X of Technical-Software: N/A 

X of Support-Software: N/A 


Design and Implementation Language 
Design Language Only 
Target Language 


N/A 


U0-125 


G-5 



Respondent: JSC-004b 

Project Size: N/A 

Lines of Code: N/A 

Duration: N/A 

Average Managers: 10 

Average Technical: N/A 

Average Support: 6 

Using Ada as: 


Project Name: MSIF 

Software Portion (%): N/A 

Start Date: N/A 

X of Managers-Sof tware: N/A 

X of Technical-Software: N/A 

X of Support-Software: N/A 


N/A 

N/A 

N/A 


Design and Implementation Language 
Design Language Only 
Target Language 


Respondent: JSC-005 

Project Size: N/A 

Lines of Code: 1.2 million 

Duration: 144 months 

Average Managers : 100 

Average Technical: 50 

Average Support: 50 

Using Ada as: 


Project Name: Space Station Flight 

Software 

Software Portion (X): 15% 

Start Date: N/A 

X of Managers-Sof tware: 15 

% of Technical-Software: 3 

X of Support-Software: 3 


YES 


Design and Implementation Language 
Design Language Only 


Target Language 



Respondent: JSC-007a Project Name: Work Package 2 Automation 

Project Size: N/A Software Portion (X): 100 

Lines of Code: N/A 


Duration: 60 months 


Start Date: FY88 


Average Managers: 

5 

X of Managers-Sof tware: 

80 

Average Technical: 

18 

X of Technical-Software: 

80 

Average Support: 

5 

X of Support-Software: 

50 


Using Ada as: 

Design and Implementation Language 
Design Language Only 
YES Target Language 


Respondent: JSC-007b 

Project Size: $50,000 

Lines of Code: N/A 

Duration: 24 months 

Average Managers: 1 

Average Technical: 6 

Average Support: 1 

Using Ada as: 


Project Name: Compound Robot 

Software Portion (X): 30 

Start Date: N/A 

X of Managers-Sof tware: 30 

X of Technical-Software: 40 

X of Support-Software: 25 


Design and Implementation Language 
Design Language Only 
YES Target Language 



Respondent: JSC-008 


Project Name: C&T Space- to-Space 

Subsystem Simulation 


Project Size: N/A 


Software Portion (X): 100 

Lines of Code: N/A 


Duration: 12 months 

Start Date: N/A 

Average Managers: 

- 0 - 

X of Managers-Sof tvare: N/A 

Average Technical: 

2 

X of Technical-Software: 50 

Average Support: 

N/A 

X of Support-Software: N/A 

Using Ada as: 

Design 

and Implementation Language 


Design 

Language Only 

YES 

Target 

Language 


Respondent: JSC-009 


Project Name: JAEL Simulator 

Project Size: $6.5 million 

Software Portion (X): 25 


Lines of Code: N/A 




Duration: 24 months 


Start Date: N/A 


Average Managers: 4 


X of Managers-Sof tvare: 

25 

Average Technical: 6 


X of Technical-Software: 

18 

Average Support: 1 


X of Support-Sof tvare: 

100 

Using Ada as: 




YES Design 

and 

Implementation Language 


Design 

Language Only 



Target Language 


UO-125 


G-8 



Respondent: JSC-010 

Project Size: N/A 

Lines of Code: N/A 

Duration: 12 months 

Average Managers: 15 

Average Technical: 30 

Average Support: -0- 

Using Ada as: 


Project Name: End-to-End Capability 

Projects 

Software Portion (X): N/A 

Start Date: Jan/87 

% of Managers-Sof tware: 90 

X of Technical-Software: 90 

X of Support-Software: -0- 


YES 

YES 

YES 


Design and Implementation Language 
Design Language Only 
Target Language 


Respondent: JSC-012 

Project Size: $800,000 

Lines of Code: N/A 

Duration: 12 months 

Average Managers: 1 

Average Technical: 5 

Average Support: -0- 

Using Ada as: 


Project Name: Telemetry System Prototype 

Software Portion (£): 67 

Start Date: 10/87 

X of Managers-Sof tware: 16 

X of Technical-Software: 100 

X of Support-Software: -0- 


Design and Implementation Language 
Design Language Only 
Target Language 


YES 



Respondent: JSC-013 

Project Size: N/A 

Lines of Code: N/A 


Project Name: SSSC 

Software Portion (X): N/A 


Duration: 60 months 

Average Managers: 3 

Average Technical: 0 

Average Support: -0- 

Using Ada as: 


Start Date: 10/88 

Z of Managers-Sof tware: 

X of Technical-Software: 
X of Support-Software: 


YES 


YES 


Design and Implementation Language 
Design Language Only 
Target Language 


Respondent: JSC-014 

Project Size: $156 million 

Lines of Code: 180,000 

Duration: 60 months 

Average Managers: 

Average Technical: 

Average Support: 

Using Ada as: 

YES 


Project Name: SSTF 

Software Portion (X): 60 

Start Date: 10/87 

Z of Managers-Sof tware: 

Z of Technical-Software: 

X of Support-Software: 


Design and Implementation Language 
Design Language Only 
Target Language 


2 

10 

N/A 


N/A 

N/A 

N/A 


60 

60 

N/A 


W0-125 


G-10 



Respondent: GSFC-001 Project Name: GRODY 

Project Size: 18 man years Software Portion (X): 100 

Lines of Code: 50,000 


Duration: 36 months 

Start 

: Date: Jan/85 


Average Managers: 1.5 

X 

of 

Managers-Sof tware : 

100 

Average Technical: 9 

X 

of 

Technical-Software: 

100 

Average Support: N/A 

X 

of 

Support-Software : 

N/A 


Using Ada as: 

YES Design and Implementation Language 

Design Language Only 
Target Language 

Respondent: GSFC-002a Project Name: Work Package 3 Space 

Station 

Project Size: N/A Software Portion (X): 5 

Lines of Code: 50,000 

Duration: 125 months Start Date: Nov/87 

Average Managers: 14 % of Managers-Sof tvare: 10 

Average Technical: 14 X of Technical-Software: 50 

Average Support: 13 X of Support-Software: 10 

Using Ada as: 

YES Design and Implementation Language 

Design Language Only 
Target Language 


VO-125 


G-ll 



Respondent: GSFC-002b 

Project Size: N/A 

Lines of Code: 50,000 

Duration: 125 months 

Average Managers: 6 

Average Technical: 4 

Average Support: 1 

Using Ada as: 


Project Name: Information Systems 

Software Portion (%): 5 

Start Date: Nov/87 

X of Managers-Sof tvare: 30 

X of Technical-Software: 30 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 


Respondent: GSFC-002c 

Project Size: $625,000 

Lines of Code: 500,000 

Duration: 125 months 

Average Managers: 4 

Average Technical: 15 

Average Support: 2 

Using Ada as: 


Project Name: Platforms 

Software Portion (Z)i 50 

Start Date: Nov/87 

X of Managers-Sof tware: 20 

X of Technical-Software: 40 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 




V0-125 


sof T ecH 


Respondent: GSFC-002d 

Project Size: $125,000 

Lines of Code: 100,000 

Duration: 125 months 

Average Managers: 5 

Average Technical: 17 

Average Support: 2 

Using Ada as: 


Project Name: Servicing Facility 

Software Portion (X): 10 

Start Date: Nov/87 

X of Managers-Sof tware: 10 

X of Technical-Software: 50 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 


Responden t : GSFC-002d 

Project Size: $125,000 

Lines of Code: 100,000 

Duration: 125 months 

Average Managers : 5 

Average Technical: 17 

Average Support: 2 

Using Ada as: 


Project Name: Servicing Facility 

Software Portion (X): 10 

Start Date: Nov/87 

X of Managers-Sof tware: 10 

X of Technical-Software: 50 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 



Respondent: GSFC-002e 


Project Size: $125,000 

Lines of Code: 100,000 

Duration: 125 months 

Average Managers: 3 

Average Technical: 11 

Average Support: 2 

Using Ada as: 


Project Name: Attached Payload 

Accommodation Equipment 

Software Portion (X): 10 

Start Date: Nov/87 

X of Managers-Software: 10 

X of Technical-Software: 50 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 


Respondent: GSFC-002f 

Project Size: $125,000 

Lines of Code: 100,000 

Duration: 125 months 

Average Managers: 10 

* 

Average Technical: 38 

Average Support: 5 

Using Ada as: 


Project Name: Flight TeleRobotic 

Servicer 

Software Portion (X): 10 

Start Date: Nov/87 

X of Managers-Software: 10 

X of Technical-Software: 50 

X of Support-Software: 10 


YES 


Design and Implementation Language 
Design Language Only 
Target Language 



Respondent: GSFC-002g 

Project Size: $62,500 

Lines of Code: 50,000 

Duration: 125 months 

Average Managers: 5 

Average Technical: 18 

Average Support: 3 

Using Ada as: 


Project Name: Operations 

Software Portion (%): 5 

Start Date: Nov/87 

X of Managers-Sof tware: 20 

X of Technical-Software: 30 

X of Support-Software: 20 


N/A Design and Implementation Language 

N/A Design Language Only 

N/A Target Language 


Respondent: GSFC-002h 

Project Size: $62,500 

Lines of Code: 50,000 

Duration: 84 months 

Average Managers: 1 

Average Technical: 9 

Average Support: 1 

Using Ada as: 


Project Name: Advanced Development 

Software Portion (X): 5 

Start Date: Nov/87 

X of Managers-Sof tware: 10 

X of Technical-Software: 30 

X of Support-Software: 10 


YES Design and Implementation Language 

Design Language Only 
Target Language 


W0-125 


G-15 



Appendix H 


DETAILED FINDINGS - EDUCATION OFFICES 


Education Offices 

Within each section of the survey and in the interviews conducted with the 
participants, key areas emerged as being of central concern. Below, these 
areas are discussed, the results stated and deviations from the norm noted. 


Survey Section 1.0 GENERAL CENTER INFORMATION 


Question 1.2: Respondent Information 


Respondents were asked to estimate the length of time that they had been 
responsible for training activities at their Center. Below, these findings 
are summarized: 


Center 


Number of 
Years Months 


JSC 

Hdqtrs . 
KSC 


2 2 
4 

21 


Typically, there were other persons also involved in selecting and 
implementing training programs in software engineering and Ada. This 
information is contained in Appendix I. 


Question 1.3.2: Expert Resources 

Respondents were asked to list persons (NASA and Non-NASA) they most 
frequently contacted to ask questions or advice in the areas of software 
engineering and Ada. The most common response was the Project Office who 
requested the training. Below lists the name and organization of other 
sources cited: 


WO-125 


H-l 




Person/Organization: 


Gerald Henry/OPM-Southwest Region 

Dr. David Burris/Sam Houston State University 

Dr. Glenn Freedman/UH-CL 

John McBride/SofTech, Inc. 

Robert MacDonald/NASA-JSC 
Ually Stevart/NASA-JSC 
Micki Viesner/NASA-JSC 
Emil Schiesser/NASA-JSC 
Alfred Menchaca/NASA-JSC 

Survey Section 2.0 ANTICIPATED TRAINING ACTIVITIES AND RECOMMENDATIONS 

Question 2.1: Respondents were asked if they felt, as buyers of software 

engineering and Ada training services and products, if they required 
additional information to facilitate the selection process. 

Through comments directly and indirectly made by respondents, there 
appears to be limited understanding of how NASA is using Ada and why software 
engineering and Ada are important. Knowledge of the characteristics of these 
training programs is again limited. To illustrate, one respondent, though 
feeling comfortable in selecting these training programs and in the personal 
level of knowledge in these areas, read the list of courses offered to the 
project team member conducting this study, soliciting input to determine which 
ones were software engineering related and which were not. 

Question 2.2: Specific Training Requests 

JSC listed three specific training requests received and the requesting 
organization: 


Activity Title/Organization 


Requested By 


Software Engineering/OPM SSD 

Introduction to Ada/OPM SSD 

Object-Oriented Design/Technology Training Corp. MPAD 


Question 2.3: Recommendations to Improve Software Engineering and Ada 

Training Purchases 



The following recommendations for improving software engineering and Ada 
training activity selection and implementation were cited: 


a. Provide a basic overview summary for persons responsible for 

selecting and implementing training programs for NASA. This overview 
should include: why software engineering is important, how and why 

NASA intends to use Ada, education on basic definitions and features 
of software engineering and Ada. 

b. Provide course outlines, samples of training materials and a preview 
of courses to give insight into these training programs. 

c. "Provide a coordinated, integrated education program in the areas of 
software engineering and Ada. A standard curriculum should be 
identified and implemented to provide universal training to both 
civil servants and contractors. Perhaps this effort should be 
initiated by NASA Headquarters." 

Question 2.4: Projected Software Engineering and Ada training; September 

1987-1988 


Below lists the number of training activities anticipated by each Center 
and estimated number of participants: 


Center 


Number of Number of 

Courses Participants* 


JSC 22 

KSC 10 

GSFC 5 

ARC 1 

Headquarters 0 

JPL 0 

LeRC N/A 

MSFC N/A 

LaRC N/A 


440 

100 

100 

25 

0 

0 

N/A 

N/A 

N/A 


*Based upon an estimated class size of 20. 


Appendix J contains the detailed listing of these courses by Center. 



Question 2.5: Evaluation Procedures 


Respondents were asked to identify their evaluation procedures for 
training programs. Most have a standard evaluation form given to the 
participant to determine if the training program met the expected needs and 
objectives. The standardization of this form across all Centers was not 
determined in this effort. 

Question 2.6: Training Requests 

An attempt was made to determine whether the majority of training requests 
were employee initiated, organization initiated or part of a structured 
program from the Education and Training Offices. Information was obtained 
from two Centers, JSC and ARC, which stated that the majority of requests were 
from individuals. Below summarizes these findings: 



08/84- 

-08/85 

Dates 

09/85-08/86 

09/86- 

-08/87 

Request Type 

JSC 

ARC 

JSC 

ARC 

JSC 

ARC 

Individual 

N/A 

10 

14 

10 

27 

10 

Organization 

N/A 

0 

4 

0 

5 

0 

Pre-Planned 

N/A 

0 

7 

0 

9 

1 


As illustrated, Individual requests outnumbered Organizational and 
Pre-Planned activities 71-9-17 respectively for a three year period. 

Survey Section 3.0: PREVIOUS SOFTWARE ENGINEERING AND Ada TRAINING ACTIVITIES 

This section was designed to capture information on previous training 
activities that occurred at each Center during the past thirty-six months. 

This information was requested to determine the types of training activities 
and their characteristics historically used in the NASA system. This 
information was not completed fully by any Center, therefore no conclusions 
could be drawn in this area. Partial information was submitted by JSC, KSC 
and GSFC and is included in Appendix K. 



Appendix I 


ADDITIONAL PERSONS RESPONSIBLE FOR TRAINING 


Center : 

JSC 

GSFC 

KSC 

Headquarters 


Person : 

M. Wiesner 
T. Rennie 
S. Chance 
R. Willner 


WO- 125 


1-1 



Appendix J 


SOFTWARE ENGINEERING AND Ada COURSES TO BE OFFERED BY NASA CENTERS 

FY88 


Course Name 


ARC JSC * GFSC KSC** 

(Number of Offerings) 


Software Quality Assurance 

Software Project Management 

Configuration Management 

Searching/Sorting 

Software Engineering 
Analysis & Design 

Software Test Workshop 

Database Systems & 
Structures 

Software Verification & 
Validation 


1 

1 

1 

3 

3 

1 

3 


1 

1 

1 


Tasking 

Software Acquisition 
Management 

Introduction to Ada 

Software Engineering & the 
Transition to Ada 


1 

1 

3 

3 


* JSC is offering a "Managing Software Development", however the number of 
personnel and/or offerings has not been determined. 

** KSC is offering 10-12 Programming in Ada courses, 6-7 of which will be 
introductory, with the remainder examining advanced topics. 


WO-125 


J-l 


Appendix K 


JSC HISTORICAL COURSE INFORMATION 




NA3A- JOHNSON SPACE CENTER 
HUMAN RESOURCES DEVELOPMENT BRANCH 


SOFTWARE ENGINEERING & ADA TRAINING ACTIVITIES 
: FY88 , FY87, AND FY86 


DATES 


VENDORS 


Software Quality Assurance 

10/26-23 

Oil 

Software Project Management 

11/30-12/2 

Oil. 

Sorting and Searching Techniques 
for Computer Programmers 

1/4-8 

CFM 

Software Configuration Management 

2/1-3 

3TI 

Software Engineering: Analysis, 
Design, and Programming 

3/7-11 

OFM 

Software Test Workshop 

3/7-9 

STI 

Data Base Systems Sc Structures 

3/15-18 

CFM 

Software Verification Sc Validation 

4/4-6 

STI 

Seminar in Tasking (Ada) 

5/13 

OFM 

Software Engineering: Analysis, 
Design, and Programming 

5/16-20 

0PM 

Data Base Systems Sc Structures 

5/16-19 

OFM 

Introduction to Ada 

5/22-26 

OFM 

Software Acquisition Management 

6/6-8 

> rr ▼ 

Oil 

Software Engineering: Analysis, 
Design, and Programming 

7/11-15 

OFM 

Introduction to Ada 

7/11-15 

0PM 

Introduction to Ada 

7/13-22 

OFM 

Sorting and Searching Techniques 
for Computer Programmers 

7/25-29 

0PM 

Data Base Systems Sc Structures 

8/4-7 

0PM 

Sorting and Searching Techniques 

3/15-19 

OFM 


for Computer Programmers 



FY37 COURSES 

DATES 

VENDORS 

Introduction to Ada 

1/5-9 

0PM 

Data Base Bystems & Structures 

1/12-15 

OEM 

Searching and Sorting Techniques 
for Computer Programmers 

2/9-13 

r- cm 

L k 4 

Software Engineering: Analysis, 
Design, and Programming 

5/18-22 

OPM 

Introduction to Ada 

5/18-22 

0PM 

Data Base Systems c * Structures 

5/26-29 

OPM 

Introduction to Ada 

7/20-24 

0PM 

Software Engineering: Analysis, 
Design, and Programming 

7/27-31 

0PM 

Introduction to Ada 

8/3-7 

CFM 

Software Project Management 

6/23-25 

ST I 

Software Configuration Management- 

7/7-9 

STI 


ORIGINAL PAGE IS 
OF POOR QUALITY 



FY86 COURSES 

DATES 

"ENDORS 

Software Engineering with Ada 

1/6-10 

OFM 

Software Engineering: Analysis, 
Design, and Programming 

3/10-14 

CFM 

Tasking Seminar in Ada 

7/10 

OFM 

Introduction to Ada 

3/18-22 

CPM 

Data Ease Systems & Structures 

3/4-7 

OFM 

Introduction to Ada 

8/10-14 

OPM 

Data Ease Systems & Structures 

3/17-20 

0PM 

Software Engineering with Ada 
and Ada Technical Overview 

1/21-23 

Sof tech 

Software Acquisition Management 

2/4-6 

^ pp T 
O i 1 

Software Engineering Orientation 

7/22-24 

Keesler 


Average class size for FY33: 20 participants 

Average class size for FY37 and FY86 : 24 participants 

GPM= Office of Personnel Management (contracts with private 
consultants ) 

3TI = 3/stems Technology Institute, Inc. (SMAF contractor) 


WO-125 


K-4 



Appendix L 


ACRONYMS AND ABBREVIATIONS 



AJPO 

Ada Joint Program Office 

-w- 

APSE/CAIS 

Ada Programming Support Environment/Common APSE Interface Set 


ARC 

Ames Research Center 

— 

CAD 

Computer Aided Design 


CAI 

Computer Aided Instructions 


CASE 

Computer Aided Software Engineering 


DoD 

Department of Defense 


GSFC 

Goddard Space Flight Center 

~ 

IOC 

Initial Operational Capability 


JPL 

Jet Propulsion Laboratory 

— 

JSC 

Johnson Space Center 


KSC 

John F. Kennedy Space Center 


LaRC 

Langley Research Center 


LeRC 

Lewis Research Center 


MCC 

Mission Control Center 


MIL- STD 

Military Standard 


MPAD 

Mission Planning and Analysis Division 


MSFC 

George C. Marshall Space Flight Center 


NASA 

National Aeronautics and Space Administration 

— 

NSTL 

National Space Technology Laboratories 


OJT 

On-the-Job Training 


OPM 

Office of Professional Management 


PDL 

Program Design Language 


SE 

Software Engineering 


SEI 

Software Engineering Institute 


SEPEC 

Software Engineering Professional Education Center 


SMAP 

Software Management Assurance Program 


SSD 

Spacecraft Software Division 


SSE 

Software Support Environment 


SSP 

Space Station Program 

- 

STI 

Software Technology Institute 


VO-125 

SOF TecH 


STR 

TMIS 

UH-CL 


Software Trouble Reports 

Technical and Management Information Systems 
University of Houston-Clear Lake 


VO-125 


L-2 



Appendix N 


REFERENCED DOCUMENTS 


"Ada Training - Selecting a Quarterly Program." Ada Strategies, Vol. 1, No. 3 
September 1987. 

Armed Forces Communications and Electronics Association, Ada Education and 
Training Study, Volume 1, 22 July 1987. 

Basili, V.R., "The Experimental Aspects of a Professional Degree in Softvare 
Engineering" paper presented at the Softvare Engineering Education: The 
Educational Needs of the Softvare Community vorkshop, 27-28 February 1986. 

"Catalog of Resources for Education in Ada* and Softvare Engineering," Vol. 

40, Ada Joint Program Office, May 1987, NTIS Ada 169 892. 

Crofts, R.E., ed. "Ada Training — Selecting a Quality Program," Ada 
Strategies, Vol. 1, #3. 

Farley, R. , Softvare Engineering Concepts , NY McGrav Hill, 1985, p. 2. 

Freedman, G.B., A Comprehensive Softvare Engineering Curriculum Model,, 

ASSEET, Dallas, Texas, June 1987. 

Freedman, G.B., Curriculum Options for Transition to Ada, Report for NASA/JSC 
for ET.l: Softvare Engineering and Ada, May 1987. 

Gibbs, N.E., Fairley, R.E., editors, Softvare Engineering Education: The 
Educational Needs of the Softvare Community. Published by Springer-Verlag. 

Godfrey, S., Brophy, C., et al., Assessing the Ada Design Process and its 
Implications: A Case Study, SEL-87-004, July 1987. 

LeGrand, S. and McBride, J., "Ada Language Suited to Space Station 
Requirements", Government Computer Nevs , September 25, 1987. 

McKay, C.W. , A Proposed Framevork for the Tools and Rules to Support the Life 
Cycle of the Space Station Program, COMPASS Conference, June 1987. 

Marlove, G., A Softvare Engineering Curriculum Proposal, vhite paper, Summer, 
1986. 

McKay, C.V., Charette, R. and Auty, D. "A Study to Identify Tools Needed to 
Extend the Minimal Toolset, of the Ada Programming Support Environment (MAPSE) 
to support the Life Cycle of Large, Complex, Non-Stop, Distributed Systems 
such as the Space Station Program." NASA/JSC Task Order VHISC B 1 1 , March 1986 



Murphy, R. and Stark, M., Ada Training Evaluation and Recommendations From the 
Gamma Ray Observatory Ada Development Team, SEL-85-002, October 1985. 

Murphy, R. and Stark, M. , Ada Training Evaluation and Recommendation, Goddard 
Space Flight Center. 

"NASA Software Acquisition Life Cycle Chart", National Aeronautics and Space 
Administration, Version 3.0, 15 October 86. 

National Space Technology Laboratories/Earth Resources Laboratory, NSTL's Ada 
Lessons Learned, white paper, March 1987. 

Pietrasanto, A., Software Engineering Training: Lessons Learned, Ada Expo 86, 

Charleston, W, December 1986. 

Shaw, M., Beyond Programming in the Large: The Next Challenges for Software 

Engineering, Pittsburgh: SEI Annual Report, 1985, page 546. 

Svabek, L.A., The Development of a Software Engineering Professional Education 
Center and its Impact on the NASA/JSC Community, white paper to be published 
December 1987 . 

Steiner, G.A. , Strategic Planning: Vhat Every Manager Must Know, The Free 

Press , New York, New York. 

"Defense System Software Development", DoD-STD-2167 , 4 June 1985. 

Reference Manual for the Ada Programming Language, Department of Defense, 
January 1983. 


