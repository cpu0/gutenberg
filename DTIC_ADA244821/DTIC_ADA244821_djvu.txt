
PuMc rapwllng t 
riMdtd. and rw* 
llaadquanmSa 
Managtnwni am 


1. AGENCY 


PPPORT nOCUMENTATION PAGE 

AD-A244 821 


Form Approved 
OPM No. 0704-0188 




dudkig *» Ima tar i a »iaii*i g Inatniciioni, laarchlng aiWng dau aoucaa gainaring and maiiaaining ifw daa 
any Khar aa' - ^ dila cstacllon ol Moimailon. indudkig auggaallona for raducing did budan. lo Waar>nga>n 
aay. Sum 1204. Mngmn. VA 22202-4302. and to tw OKlea of bifotmalfon and nagUaloty Attain. Ollica ol 


3. REPORT PKPE AND DATES COVERED 

Final:14 Mar 1991 to 01 Jun 1993 


4. TITLE AND SUBTITLE 

North China Institute of Computing Technology -Mr Li Xin, C_Ada Version 1.0, 
MicxroVAX II under Ultrix 3.0 (Host & Target), 910902N1.11198 


6. ALrrHOR(S) 

AFNOR , Paris, FRANCE 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

AFNOR 

Tour Europe, Cedex 7 
7-92080 Paris La Defense 
France 


9. SPONSORINGAilONITORING AGENCY NAME(S) AND A0DRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Washington, D.C. 20301-3081 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-90502/78-911128 


10. SPONSORINGA^ONITORING AGENCY 
REPORT NUMBER 



12a DISTRIBUTiON/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTFIACT (Maximum 200 vrords) 

North China Institute of Computing Technology -Mr Li Xin, C_Ada Version 1.0,Manchester, England, MicxroVAX II under 
Ultrix 3.0 (Host & Target), ACVC 1.11. 


-DTIC 

ftE:LECTEf% 
^JANIS )992|y, 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURrtY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OFTAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298. (Rev 2-89) 
Prescribed by ANSI Std 239 128 






































1 


AVF Control Number: AVF_VSR_90502/78 

911128 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 

Certificate Number: #910902N1.11198 
North China Institute of Computing Technology - Mr Li Xin 
C_Ada Version 1.0 
MicroVax II under Ultrix 3.0 


Prepared By: 

Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester 
Ml 7ED 
England 


Template Version 91-05-08 


92-01160 



Validation SiaBary Report 

North China Inatitute of 
CoBRjuting T-whnology Nr Li Xin 


TESTING 
No 022SS1 



AVF_VSR_90502/78 
C AJa Version 1.0 


•21 


1 ^ ? 0 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. Testing was 
completed on 2 September 1991. 

Compiler Name and Version: C_Ada Version 1.0 

Host Computer System: MicroVax II under Ultrix 3.0 

Target Computer System: MicroVax II under Ultrix 3.0 

See section 3.1 for ^ny additional information about the testing environment. 

As a result of this validation effort. Validation Certificate #910902N1.11198 is awarded to North 
China Institute of Computing Technology. This certificate expires on 1 March 1993. 

This report has been reviewed and is approved. 


Jon LeigB^ 


Manager, System Software Testing 
The National Computing Centre Limited 
Oxford Road 
Manchester 
Ml 7ED 
England 



Direc|>dr, ^o^uler and Software Engineering Division 
Institute fof^fense Analyses 
Ada Validation Organization 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



iovesslon For 

iris GRAjbi 

DTIC TAB □ 

Unannounced □ 

Ju 311 f 1 t*a 11 on____ 


By- 

^Istrlbutlot^ 


Availability Codes 



lAvall ^ 

emd/or 

Dlst 

1 

Speoial 

m 


m 



Valldatfen Swary laport AVF_VSa_90502/78 

North Chlia Imtituto of C_Adi Version 1.0 

, Coaputiiie Tachnolow * Nr Li Xin 









DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 
The following declaration of conformance was supplied by the customer. 

Declaration of Conformance 

Customer: North China Institute of Computing Technology - 

Mr Li Xin 

Certificate Awardee: 

Ada Validation Facility: The National Computing Centre Limited 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version: C_Ada Version 1.0 

Host Computer System: MicroVax II under Ultrix 3.0 

Target Computer System: MicroVax II under Ultrix 3.0 

Declaration: 

I, the undersigned, declare that I have no knowledge of deliberate deviations from the Ada 
Language Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the implementation listed 
above. 

Se*i. 2 . fff! 

Customer Signature Date* 


Validation Siaaary laport 


AVF_VS«_90502/78/910K1 


North Chin* Institute of C-Ada Version 1.0 

Coaputing Technology 





TABLE OF CONTENTS 


TABLE OF CONTENTS 

CHAPTER 1 . 1 

INTRODUCTION. 1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT. 1 

1.2 REFERENCES. 1 

1.3 ACVC TEST CLASSES. 2 

1.4 DEFINITION OF TERMS . 3 

CHAPTER 2 . 1 

IMPLEMENTATION DEPENDENCIES. 1 

2.1 WITHDRAWN TESTS. 1 

2.2 INAPPLICABLE TESTS. 1 

2.3 TEST MODinCATIONS . 4 

CHAPTER 3 . 1 

PROCESSING INFORMATION. 1 

3.1 TESTING ENVIRONMENT. 1 

3.2 SUMMARY OF TEST RESULTS. 1 

3.3 TEST EXECUTION. 2 

APPENDIX A . 1 

MACRO PARAMETERS. 1 

APPENDIX B . 1 

COMPILATION SYSTEM OPTIONS. 1 

APPENDIX C . 1 

APPENDIX F OF THE Ada STANDARD . 1 


Validation Suwry Report AVF_VSR_90502/78 

North Chine Inatitute of C_Ada Version 1.0 

Coaputing Technology - Nr Li Xin Table of Contents - Page 1 of 1 




























INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada Validation Procedures 
[Pro90] against the Ada Standard [AdaSS] using the current Ada Compiler Validation Capability 
(ACVC). This Validation Summary Report (VSR) gives an account of the testing of this Ada 
implementation. For any technical terms used in this report, the reader is referred to [Pro90]. A 
detailed description of the ACVC may be found in the current ACVC User’s Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada Certification Body may make 
full and free public disclosure of this report. In the United States, this is provided in accordance with 
the "Freedom of Information Act" (5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not represent or warrant that 
all statements set forth in this report are accurate and complete, or that the subject implementation 
has no nonconformities to the Ada Standard other than those presented. Copies of this report are 
available to the public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be directed to the AVF vyhich 
performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 

1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language. 

ANSI/MIL-STD-1815A February 1983 and ISO 8652-1987. 

[Pro90j Ada Compiler Validation Procedures. 


Vatidation Si«aary Refiart 


AVF_VSR_90502/78 


North China Institute of 
CaaN)utino Technology - Nr Li Xin 


Chapter 1 - Page 1 of 4 


C Ada Version 1.0 






INTRODUCTION 


Version 2.1, Ada Joint Program Office, August 1990. 

[UG89J Ada Compiler Validation Capability User’s Guide , 

21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC contains a 
collection of test programs structured into six test classes; A, B, C, D, E, and L. The first letter of a 
test name identifies the class to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and produce a PASSED, FAILED, or 
NOT APPLICABLE message indicating the result when they are executed. Three Ada library units, 
the packages REPORT and SPPRT13, and the procedure CHECK_FILE are used for this purpose. 
The package REPORT also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test objective. The package 
SPPRT13 is used by many tests for Chapter 13 of the Ada Standard. The procedure CHECK_FILE 
is used to check the contents of text files written by some of the Class C tests for Chapter 14 of the 
Ada Standard. The operation of REPORT and CHECK_FILE is checked by a set of executable tests. 
If these units are not operating correctly, validation testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B tests are not executable. 
Each test in this class is compiled and the resulting compilation listing is examined to verify that all 
violations of the Ada Standard are detected. Some of the class B tests contain legal Ada code which 
must not be flagged illegal by the compiler. This behaviour is also verified. 

Class L tests check that an Ada implementation correctly detects violation of the Ada Standard 
involving multiple, separately compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by implementation-specific 
values " for example, the largest integer. A list of the values used for this implementation is provided 
in Appendix A. In addition to these anticipated test modifications, additional changes may be required 
to remove unforeseen conflicts between the tests and implementation-dependent characteristics. The 
modifications required for this implementation are described in section 2.3. 

For °ach Ada implementation, a customized test suite is produced by the AVF. This customization 
consists of making the modifications described in the preceding paragraph, removing withdrawn tests 
(see section 2.1), and possibly removing some inapplicable tests (see section 2.2 and [UG891). 

In order to pass an ACVC an Ada implementation must process each test of the customized test suite 
according to the Ada Standard. 


AVF VS«_90502/78 


Validation Suaaary Report 

North China Inatitute of 
Coaputing Technology - Mr Li Xin 


Chapter 1 - Page 2 of A 


C Ada Version 1.0 






INTRODUCTION 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation Capability 
(ACVC) 

Ada Implementation 


Ada Joint Program 
Office (AJPO) 

Ada Validation Facility 
(AVF) 

Ada Validation 
Organization (AVO) 

Compliance of an Ada 
Implementation 

Computer System 


Conformity 

Customer 


Declaration of 
Conformance 


Host Computer System 


The software and any needed hardware that have to be added to a given 
host and target computer system to allow transformation of Ada 
programs into executable form and execution thereof. 

The means for testing compliance of Ada implementations, consisting of 
the test suite, the support programs, the ACVC user’s guide and the 
template for the validation summary report. 

An Ada compiler with its host computer system and its target computer 
system. 

The part of the certiEcation body which provides policy and guidance for 
the Ada certification system. 

The part of ;he certification body which carries out the procedures 
required to establish the compliance of an Ada implementation. 

The part of the certification body that provides technical guidance for 
operations of the Ada certification system. 

The ability of the implementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and associated 
software, that uses common storage for all or part of a program and also 
for all or part of the data necessary for the execution of the program; 
executes user-written or user-designated programs; performs user- 
designated date manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify themselves during 
execution. A computer system may be a stand-alone unit or may consist 
of several inter-connected units. 

Fulfilment of a product, process or service of all requirements specified. 

An individual or corporate entity who enters into an agreement with an 
AVF which specifies the terms and conditions for AVF services (of any 
kind) to be performed. 

A formal statement from a customer assuring that conformity is realized 
or attainable on the Ada implementation for which validation status is 
realized. 

A computer system where Ada source programs are transformed into 
executable form. 


AVF VSR_90502/78 


Validation SuiMary Report 

North China Institute of 
Coaputing Technology - Mr Li Xin 


Chapter 1 - Page 3 of A 


C Ada Version 1.0 









INTRODUCTION 


Inapplicable test 

ISO 

LRM 

Operating System 

Target Computer 
System 

Validated Ada Compiler 

Validated Ada 
Implementation 

Validation 

Withdrawn test 


Validation SiMBary Report 

North China Inatitute of 
Coaputing Technology - Nr 


A test that contains one or more test objectives found to be irrelevant for 
the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 AND ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that provides 
services such as resource allocation, scheduling, input/output control and 
data management. Usually, operating systems are predominantly 
software, but partial or complete hardware implementations are possible. 

A computer system where the executable form of Ada programs are 
executed. 

The compiler of a validated Ada implementation. 

An Ada implementation that has been validated successfully either by 
AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to the Ada 
programming language and of issuing a certificate for this 
implementation. 

A test found to be incorrect and not used in conformity testing. A test 
may be incorrect because it has an invalid test objective, fails to meet its 
test objective, or contains erroneous or illegal use of the Ada 
programming language. 


AVF_VSR_90502/78 
C_Ad8 Version 1.0 

i Xin Chapter 1 - Page 4 of A 






IMPLEMENTATION DEPENDENCIES 


CHAPTER 2 

IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for this list of withdrawn tests is 3 
May 1991. 


E28005C 

B28006C 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 




2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectiv*^ which are irrelevant for a given Ada 
implementation. Reasons for a test’s inapplicability may be supported by documents issued by the ISO 
and the AJPO known as Ada Commentaries and commonly referenced in the format Al-ddddd. For 
this implementation, the following tests were determined to be inapplicable for the reasons indicated; 
references to Ada Commentaries are included as appropriate. 

B23003D and B23003E check that an implementation imposes a limit on the length of the input line. 
This implementation has no such limit (see Section 2.3) 

The following 285 tests have floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113F..Y (20 tests) C35705F..Y (20 tests) 


AVF VS« 90502/78 


Validation Suawry Report 

North China Inatitute of 
Coaputing Technology - Hr Li Xin 


Chapter 2 - Page 1 of 6 


C Ada Version i.O 





IMPLEMENTATION DEPENDENCIES 


C35706F..Y (20 tests) 
C35708F..Y (20 tests) 
C45241F..Y (20 tests) 
C45421F..Y (20 tesU) 
C45524F..Z (21 tests) 
C45641F..Y (20 tests) 


C35707F .Y (20 tesU) 
C35802F..Z (21 tests) 
C45321F..Y (20 tests) 
C45521F..Z (21 tests) 
C45621F..Z (21 tests) 
C16012F..Z (21 tests) 


The following 21 tests check for the predefined type SHORT_INTEGER; for this implementation, 
there is no such type: 


C35404B 

B36105C 

C45231B 

C45304B 

C45411B 

C45412B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

CD7101E 

C55B07B 

B55B09D 

B86001V 

C86006D 

The following 20 tests check 
there is no such type: 

for the predefined type LONG 

INTEGER; for this implementation, 

C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C4561.3C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

caeoofc 

CD7101F 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER; for this implementation, 
there is no such type. 

C35713B. C45423B. B86001T, and C86006H check for the predefined type SHORT_FLOAT; for this 
implementation, there is no such type. 

C35713C, B86001U, and C8<)006G check for the predefined type LONG_FLOAT, for this 
implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORT_FLOAT; for this implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for types that require a 
SYSTEM.MAX_MANTISSA of 47 or greater: for this implementation, MAX_MANTISSA is less 
than 47. 


C45624A..B (2 tests) check that the proper exception is raised if MACHINE OVERFLOWS is 
FALSE for floating point types and the results of various floating-point operations lie outside the 
range of the base type; for this implementation. MACHINE_OVERFLOWS is TRUE. 


AVF VS«_90502/78 


Validitian SuBMiry Xcport 

North Chino Institute of 
Cooputing Technology - Mr Li Xin 


Chapter 2 - Page 2 of 6 


C Ada Version 1.0 






IMPLEMENTATION DEPENDENCIES 


C4A013B contains a static universal rea! rpression that exceeds the range of this implemcntatior’s 
largest floating-point type; this expression is rejected by the compiler. 

D55A03C,.H (6 tests) use over 15 or more levels of loop nesting; this level of loop nesting exceeds 
the capacity of the compiler. 

The 23 tests below involve separate compilation of generic declarations and their corresponding 
proper bodies; this implementation requires that the declarations and bodies be in the same 
compilation (cf LRM 10.3:9). 

B83004B B83004D B8.3204F B83E01F BAIOIOD 

BAlOllC CA2009C CA2009F CA1012A CA3011A 

LA5008A..H (8 tests) LA5008J LA5008M LA5008N BC3204C 

BC3205D 

C85005C and C85006C exceed the capacity of the implementation (see Section 2.3). 

B86001Y uses the name of a predefined fixed-point type other than type DURATION; lor this 
implementation, there is no such type. 

B91001H checks that an address clause for a task entry must not precede any entry; this 
implementation does not support interrupts (See Section 2.3). 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE for procedures and 
functions; this implementation does not support pragma INLINE. 

CDI009C checks whether a length clause can specify a non-default size for a floating-point type; this 
implementation does not support such sizes. 

CD2A84A, CD2A84E. CD2A84I..J (2 tests), and CD2A840 use length clauses to specify non-default 
sizes for access types; this implementation does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code insertions; this 
implementation provides no package MACHINE_CODE. 

BD9(X)1A. AD9001B, ED9002A, AD9004A, and BD9004B use pragma INTERFACE; this 
implementation does not support the pragma. 

AE2101C and EE2201D..E (2 tests) use instantiatiorj of package SEQUENTIAL_IO with 
unconstrained array types and record types with discriminants without defaults; these instantiations 
are rejected by this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT IO with unconstrained 
array types and record types with discriminants without defaults; these instantiations are ^ejected by 
this compiler. 


AVF VSR 90502/78 


Validation SuMary Report 

North China Inatitute of 
Coaputing Technology - Nr Li Xin 


Chapter 2 - Page 3 of 6 


C Ada Version 1.0 





IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table check that USE_ERROR is raised if the given file operations 
are not supported for the given combination of mode and access method; this implementation 
supports these operations. 


Test 

File Operation 

Mode 

File Access Method 

CE2102D 

CREATE 

IN HLE 

SEQUENTIAL lO 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL lO 

CE2102F 

CREATE 

INOUT FILE DIRrCT lO 

CE2102I 

CREATE 

IN FILE 

DIRECT lO 

CE2102J 

CREATE 

OUT HLE 

DIRECT lO 

CE2102N 

OPEN 

IN fFlE 

SEQUENTIAL lO 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL lO 

CE2102P 

OPEN 

OUT RLE 

SEQUENTIAL lO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL_IO 

CE2102R 

OPEN 

INOUT FILE DIRECT lO 

CE2102S 

RESET 

INOUT RLE DIRECT lO 

CE2102T 

OPEN 

IN FILE 

DIRECT lO 

CE2102U 

RESET 

IN FILE 

DIRECT lO 

CE2I02V 

OPEN 

OUT FILE 

DIRECT lO 

CE2102W 

RESET 

OUT RLE 

DIRECT lO 

CE3102E 

CREATE 

IN fFlE 

TEXT lO 

CE3102F 

RESET 

Any Mode 

TEXT lO 

CE3102G 

DELETE 


TEXT lO 

CE3102I 

CREATE 

OUT FILE 

TEXT lO 

CE3102J 

OPEN 

IN fTlE 

TEXT lO 

CE3102K 

OPEN 

OUT RLE 

TEXT lO 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an external sequential file is 
exceeded; this implementation cannot restrict file capacity. 


CE2403A checks that WRITE raises USE_ERROR if the capacity of an external direct file is 
exceeded; this implementation cannot restrict file capacity. 

CE3304A checks that SET_LINE_LENGTH and SET_PAGE_LENGTH raise USE_ERROR if 
they specify an inappropriate value for the external file; there are no inappropriate values for this 
implementation. 

2.3 TEST MODinCATIONS 

Modifications (see section 1.3) were required for 108 tests. 


The following tests were split into two or more tests because this implementation did not report the 
violations of the Ada Standard in the way expected by the original tests. 


Vatidition Suaary Raport 


AVF VSR 90502/78 


North China Inatitute of 
Coaputina Tachnotogy - Hr Li Xin 


Chapter 2 - Page 4 of 6 


C Ada Version 1.0 







IMPLEMENTATION DEPENDENCIES 


(Most of the splits applied to these tests were to eliminate extraneous errors). 


B22003A 

B22005K 

B24001B 

B24001C 

B24009A 

B25002A 

B26005A 

B27005A 

B33301A 

B.36201A 

B44001A 

B44002A 

B44004C 

B44004E 

B48002D 

B51003A 

B51003H 

B51003I 

B55A01A 

B55A01D 

B56001C 

B56001H 

B62001D 

B63001A 

B66001C 

B71001C 

B71001L 

B710010 

B91002B 

B91002C 

B91002F 

B91002G 

B91002J 

B91002K 

B95001D 

B95003A 

B95032A 

B95061A 

B95061D 

B95061E 

B95081A 

B97101A 

B97101H 

B97103E 

B97104G 

BC1202E 

BC2004E 

BC3003A 

BD5005D 

BE2210A 


B23002A 

B24001A 

B24005A 

B24005B 

B25002B 

B26001A 

B2A021A 

B32201A 

B37301J 

B43201A 

B44004A 

B44004B 

B45205A 

B48002A 

B51003B 

B51003C 

B52004D 

B52004E 

B55A01E 

B5SB17A 

B61001H 

B61001I 

B63001B 

B64003A 

B71001F 

B710011 

B71001U 

B91002A 

B91002D 

B91002E 

B91002H 

B91002I 

B91002L 

B91003D 

B95004A 

B95030A 

B95061B 

B95061C 

B95061F 

B95061G 

B97101E 

B97101G 

B97104D 

B97104E 

BCSOOID 

BC2001G 

BC3003B 

BC3005B 

BE241.3A 



B23003D and B23003E were graded inapplicable by Evaluation Modification as directed by the AVO. 
These tests check that an implementation imposes a limit on the length of the input line, this 
implementation has no such limits. The AVO ruled that this behaviour is acceptable. 

B23(K)3F was graded passed by Evaluation Modification as directed by the AVO. This test checks that 
an identifier may not exceed the limit on the input line length. Although this implementation 
imposes no such limit, it does limit identifiers (and literals) to 120 characters; the AVO ruled that 
this behaviour is acceptable, and that this test thus constitutes a check that the identifier limit is 
correctly enforced. 

B83E01F and BAlOllC were graded inapplicable by Evaluation Modification as directed by the AVO. 
These tests expect that the bodies of generic units can be compiled separately from their declarations. 
This implementation requires that generic declarations and bodies be in the same compilation; this 
restriction is allowed by LRM 10.3:9. 


AVF_VS«_90502/78 


Validation SuHoary Report 

North China Institute of 
Computing Technology - Nr Li Xin 


Chapter 2 - Page 5 of 6 


C Ada Version 1.0 








IMPLEMENTATION DEPENDENCIES 


C85005C and C85006C were graded inapplicable by Evaluation Modification as directed by the AVO. 
These tests contain a combination of tasks and data structures that exceeds this implementation's 
capacity. 

B91001H was graded inapplicable by Evaluation Modification as directed by the AVO. This test 
checks that an address clause for an entry cannot proceed that or any other entry of the task. This 
implementation does not support interrupts, and so rejects any address clause for an entry, regardless 
of placement. 

BA3001A was graded passed by Evaluation Modification as directed by the AVO. This test contains 
a generic subprogram declaration with no corresponding body. This implementation requires that 
generic declarations and bodies be in the same compilation, therefore it detected the absence of a 
subprogram body as an additional error. The AVO ruled that the additional error message may be 
ignored. 


Validation Siaaary Report AVF_VSR_90502/7B 


North China Inatitute of 
Coaputinq Technology - Hr Li Xin 


Chapter 2 - Page 6 of 6 


C Ada Version 1.0 








PROCESSING INFORMATION 


CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


For technical information about this Ada implementation, contact: 
Mr Li Xin 

North China Institute of Computing Technology 
P O Box 619 
Beijing 
China 100083 

For sales information about this Ada implementation, contact: 

Ms Li Jiangyue 

North China Institute of Computing Technology 
P O Box 619 
Beijing 
China 100083 


Testing of this Ada implementation was conducted at the customer’s site by a validation team from 
the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test of the customized test 
suite in accordance with the Ada Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was obtained that conforms to the Ada 
Programming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. AJl tests were 
processed, except those that were withdrawn because of test errors (item b; see section 2.1), those 
that require a floating-point precision that exceeds the implementation’s maximum precision (item 
e; see section 2.2), and those that depend on the support of a file system - if none is supported (item 
d). All tests passed, except those that are listed in sections 2.1 and 2.2 (counted in items b and f, 
below). 


AVF_VS«_90502/78 


Validation SuMary Report 

North China Inatitute of 
Coaputins Technology - Hr Li Xin 


Chapter 3 - Page 1 of 2 


C Ada Version 1.0 






PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3638 

b) Total Number of Withdrawn Tests 94 

c) Processed Inapplicable Tests 438 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point Precision Tests 0 

f) Total Number of Inapplicable Tests 438 (c-Hd-l-e) 

g) Total Number of Tests for ACVC 1.11 4170 (a-(-b-(-f) 


3.3 TEST EXECUTION 

A MAGNETIC TAPE containing the customized test suite (see section 1.3) was taken on-site by the 
validation team for processing. The contents of the MAGNETIC TAPE were loaded directly onto the 
host computer. 


After the test files were loaded onto the host computer, the full set of tests was processed by the Ada 
implementation. 

Testing was performed using command scripts provided by the customer and reviewed by the 
validation team. See Appendix B for a complete listing of the processing options for this 
implementation. It also indicates the default options. The options invoked explicitly for validation 
testing during this test were: 

-O name Name of executable main program Gle. Runada by default. 

-t number Set size of task stack as number. 3777 by default. 

Test output, compiler and linker listings, and job logs were captured on MAGNETIC TAPE and 
archived at the AVF. The listings examined on-site by the validation team were also archived. 


AVF VSR 90502/78 


Validation SuMary Raport 

North China Inatitute of 
Coaputing Technology - Nr Li Xin 


Chapter 3 - Page 2 of 2 


C Ada Version 1.0 






MACRO PARAMETERS 



APPENDIX A 


MACRO PARAMETERS 

This appendix contains the macro parameters used for customizing the ACVC. The meaning and 
purpose of these parameters are explained in [UG89]. The parameter values are presented in two 
tables. The first table lists the values that are defined in terms of the maximum input-line length, 
which is the value for $MAX_IN_LEN"also listed here. These values are expressed here as Ada 
string aggregates, where "V” represents the maximum input-line length. 

Macro Parameter 

Macro Value 

$MAX_IN_LEN 

120 - Value of V 

$BIG_ID1 

(1..V-1 => ’A’, V = > ’!’) 

$BIG_ID2 

(1..V-1 => ’A’, V => ’2’) 

$BIG_ID3 

(1..V/2 => ’A’) & ’3’ & (1..V-1.V/2 *=> ’A’) 

$BIG_ID4 

(1..V/2 => ’A’) & ’4’ & (1..V-1-V/2 => ’A’) 

$BIG_INT_LIT 

(1..V-3 => ’O’) & "298" 

$BIG_REAL_LIT 

(I..V-5 => ’O’) & "690.0" 

$BIG_STRING1 

’"’ & (1..V/2 => ’A’) & ’"’ 

$BIG_STRING2 

’"’ & (1..V-1-V/2 => ’A’) & ’1’ & ’"’ 

SBLANKS 

(1..V-20 => ”) 

$MAX_LEN_INT_BASED_LITERAL 

"2;" & (I..V-5 => ’O’) & "11;" 

$MAX_LEN_REAL_BASED_ 

LITERAL 

"16:" & (1..V-7 => ’O’) & "F.E:" 

$MAX_STRING_LITERAL 

’"’ & (1..V-2 => ’A’) & ’"’ 


AVF_VSR_90502/7B 


Validatfon SuMry Report 

North Chino Institute of 
Cooputing Tedwwlosy - Nr Li Xin 


Appendix A - Page 1 of A 


C Ada Version 1.0 





MACRO PARAMETERS 


The following table lists all of the other macro parameters and their respective valaes. 

Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_I.AST 

2048 

$DEFAULT_MEM_SIZE 

5242880 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

C_Ada 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

0 

$ENTRY_ADDRESS1 

0 

$ENTRY_ADDRESS2 

0 

$FIELD_LAST 

2147483647 

$FILE_TERMINATOR 

STAND ARD.ASCII.FS 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

If If 

$FORM_STRlNG2 

"CANNOT_RESTRICT_FILE_CAPACITY” 

$GREATER_THAN_DURATION 

86400.01 

$GREATER_THAN_DURATION. 

BASE LAST 

1.4E05 

SGREATER THAN FLOAT BASE LAST 

16#0.7FFF_FFFF_FFFF_FF8#E33 

SGREATER THAN FLOAT SAFE LARGE 

16#0.7FFF_FFFF_8#E32 


Validation SuHary Report AVF_VSR_90S02/78 


North China Inatitute of 
Coaputing Technology - Hr Li Xin 


Appendix A - Page 2 of 4 


C Ada Version 1.0 









MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 

DO NOT SUPPORT SHORT FLOAT 

$HIGH_PRIORITY 16 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/NONAME 

$ILLEGAL_EXTERNAL_FILE_NAME2 

THlS_FILE_NAME_IS_TOO_LONG 

$inappropriate_line_length -1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_nRST -2147483648 

$1NTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE NO_LANGUAGE 

$LESS_THAN_DURATION -86400.01 

$LESS THAN DURATION_BASE RRST 

-L4E05 

$LINE_TERMINATOR STANDARD.ASCII.LF 

$LOW_PRIORITY 1 

$MACHINE_CODE_STATEMENT NULL; 

$MACHINE_CODE_TYPE NO_SUCH_TYPE 

$MANTISSA_DOC 31 

$MAX_DIGrrS 9 

AVF_VS«_90502/78 
C Ada Version 1.0 


Validiition SuHary Report 
North China Inatitute of 

Coaputing Technology - Nr Li Xin Appendix A - Page 3 of 4 





MACRO PARAMETERS 


$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 

$NAME_LIST 

$NAME_SPECIFICATlONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINmON 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

SVARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


Validation SUBMry Report 

North China Institute of 
Coaputing Technology - Nr Li Xin 


2147483647 

2147483648 

-214783648 

NO_SUCH_TYPE_AVAILABLE 

C_Ada 

X2120A 

X2120B 

X3119A 

16#FFFF_FFFF# 

5242880 

8 

C_Ada 

STAND ARD.ASCII.FF 
NEW_INTEGER 

NO_SUCH_MACHINE_CODE_TYPE 

32 

3770 

0.01 

32 

64 

128 

NO_SUCH_PRAGMA 


AVF_VSR_90502/78 
C_AdB Version 1.0 

Appendix A - Page A of A 








COMPILATION SYSTEM OPTIONS 


APPENDIX B 

COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this Appendix, are provided by the 
customer. Unless specifically noted otherwise, references in this appendix are to compiler 
documentation and not to this report. 

-O name Name of executable main program file. Runada by default. 

-t number Set size of task stack as number. 3777 by default. 


VatidBtion SiaMry Report 


AVr_VSR 90502/78 


North Chino Inotituto of 
Cooputing Technology - Nr Li Xin 


Appendix B - Page 1 of 2 


C Ada Version 1.0 








COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, are provided by the 
customer. Unless specifically noted otherwise, references in this appendix are to linker documentation 
and not to this report. 

-n number Maximum number of tasks in an Ada program. 18 by default. 

-e number Maximum number of entries in a task. 15 by default. 


AVF VSR 90502/78 


Validition SuMry Report 

North Chino tnotitute of 
Coeputins Technotogy - Nr Li Xin 


Appendix B - Page 2 of 2 


C Ade Version 1.0 







APPENDIX F OF THE Ada STANDARD 


APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to implementation-dependent pragmas, 
to certain machine-dependent conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The implementation-dependent characteristics 
of this Ada implementation, as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to compiler documentation and not to 
this report. Implementation-specific portions of the package STANDARD, which are not a part of 
Appendix F, are; 


package STANDARD is 

type INTEGER is range -2147483648..2147483647 

type FLOAT is digits 9 range -16:0.FFFF_FFFF;E31..16;0.FFFF_FFFF:E31 

type DURATION is delta 0.01 range -86400.00..86400.00 

end STANDARD; 


Validitian 


ry Report 


AVF VSR 90502/78 


Rorth China Inatitute of 
Coaputing Technology - Nr Li Xin 


Appendix C - Page 1 of 3 


C Ada Version 1.0 







Tlie Aiiri Hot ini Mon .illr>w« tof cort.niii 

mach i rifj-rloponrir-Tic.Hs in a onn t. ro) I orj manrifir . No 
mach i ne-depencleii*^ syntax or seniantir extensions or 
rostrictons nr-rj al lowed. The only allowed 
implementation-dependences correspond to 

irap 1ementation-dependent pragmas and attributes, 
cer'taln machine-dependent conventions as mentioned 
in chapter 13, and certain allowed restrictions oh 
representat ion claii.se.s. 


C_Ada ha.s following implementation aspects 


F.l IMPLEMENTATION-DEPENDENT PRAGMA.S 

C_Ada does not support the predefined 
language pragmas INLINE INTERFACE and .SUPPRESS. 

See annex B for a descriptive pragma sum¬ 
mary , 


F.2 IMPLEMENTATION-DEPENDENT ATTRIBUTES 


F.3 SPECIFICATION OF THE PACKAGE SYSTEM 


package SYSTEM Is 


type NAME Is (C.ADA): 


SYSTEM.NAME 

STORAGE_UNIT 

MEMORY^SIZE 

MAX_INT 

MIN_INT 

MAX.DIGITS 

MAX_MANTI.SSA 

FINE^DELTA 

TICK 


constant NAME :sC_ADA; 
CONSTANT :»6i 
CONSTANT ;*5«2««20 
-5 MB is used at least 
CONSTANT :*2**31-1; 

CONSTANT !=-(2««31); 

CONSTANT :a9i 

-only D float of VAX are used 
CONSTANT :*3l! 

CONSTANT !*2«»(-3n; 

CONSTANT :*0.01: 


subtype PRIORITY is INTEGER 
range 1 .. 1hi 


end SYSTEM', 


F.4 RESTRICTIONS ON REPRESENTATION CI.AI'SE 








i '>• 


I 


TliH r’»*pr'f?s«n ^ rt h i on rl.ni.m^ .t I 1 j n < _Ar|*i ^r*' 

lorigth, f>nuniera ♦ i Mfi, .mil f«corrJ r^Rpresent 1 on 
I'l.njsos! C_Arla rifjcjres!!i clauses for oblecf 

(loflarMil by an objecf Hoc; 1 ara t, i on only. 

In C.^Ada , .'i reprosen fa ♦ i ofi olause for a f/,fnerit: 
formal type or type that depends on n generid 
formal type Is not .allowed. In addition, a 
reprosentat1 on olause for a composite type that 
has a component or a stibcomponent of a generic 
formal type or a type derived from a generic fo» 
ma1 type is not allowed. 


F.5 CONVENTIONS FOR IMPLEMENTATION-GENERATED NAMES 
DENOTING 


C_Ada does not allocate implementation-dependent 
component in record. 


F.6 INTERPRETATION OF EXPRESSIONS APPEARING IN AD¬ 
DRESS CLAUSES 


C_Ada does not support address clause and does not 
support interrupts. 

F.7 RESTRICTIONS ON UNCHECKED TYPE CONVERSIONS 


G_Ada supports the generic function • 

IJNCHECKED_CONVERSION with the restrictions given 
in section 13.10.2. 


F.0 IMPLEMENTATION-DEPENDENT CHARACTERISTICS OF 
INPUT-OUTPUT PACKAGES 


F.6.1 RESTRICTIONS ON INPUT-OUTPUT PACKAGES 


C_Ada does not provide the package L0W_LEVEL_10. 


F.0.2 INTERPRETATION OF THE FORM PARAMETER 


Pisrameter FORM is used to provided access right to 
otiier nser.s in the system. The parameter Is a 
string who.«.e Interpretation is a sex.adeclmal 

- 2 - 



The ifieriniriK iiri<J 
as that in I’ltrix. 

Access right is defined by 
cima1 digits, they stands 
user himself, of the users 
group as the owner, and of 
See C_Ada Programmer ’ s Rtin 
for the detai 1 . 


the syntax are the same 

.3 successive sexade- 
tor the access right of 
who is in the same 
others 

-Time Reference Manual 


F.fl.3 IMPLEMENTATION-DEPENDENT INPUT-OUTPUT ERROR 
CONDITIONS 


C_Ada has no exception other than that defined in 
package IO_EXCEPTIONS. See C_Ada programmer's 
Run-Time Reference Manual for the detail. 


F.9 OTHER IMPLEMENTATION CHARACTERS 


F.9.1 DEFINITION OF A MAIN PROGRAM 


A library unit can be used as a main program pro¬ 
vided it has no formal parameter. 


F.9.2 VALUE OF INTEGER ATTRIBUTES 

■ \ 

The range of values for integer types declared in 
package STANDARD are as follows: 


INTEGER 


-21474036.48 . . 2147483647 


For the packages DIRECT_IO, SEQUENTIAL_IO 
TEXT_IO, the range of value for types COUNT and 
POSITIVE COUNT are as follows: 


COUNT 

POSITIVE 


0 . . 2046 
1 . . 2147483647 


For the package TE.XT_I0, the range of value for 
the type FIELD is as follows: 


FIELD 


0 .. 2147483(547 


- 3 - 




AiiiiHini i \ 


I- 


vau;f. of floating point attributes 


attribute 


DIGITS 
MANTISSA 
EMAX 
EPSILON 
approximately 
SMALL 

approximately 
LARGE 

approxima te1y 
SAFE.EMAX 
SAFE.SMALL 
approximately 
SAFE.LARGE 
approxima tely 
FIRST 

approximately 
LAST 

approximately 
MACHINE.RADIX 
MACHINE.MANTISSA 
MACHINE EMAX 
MACHINE.EMIN 
MACHINE R0I;NDS 
MACHINE.OVERFLOWS 


D.FloatinglLONG.FLOATING) value 
and approximate decimal 
equivaIent 

q 

31 

124 

16i0,4000 0000 0000 OOOfE-7 

9.3132257461540E-1O 

16.^0. eOOO.OOOO.OOOO.OOOiE-31 

2, ;j5O9B67()16446E-30 

KWO.FFFF FFFE 0000 000£E+31 

2.1267647922655E+37 

127 

1&£0.1000.0000.0000_000£E-31 
2.930735B77O557E-39 
I 6 £ 0 . 7FFF FFFF.0000.000£E+32 
1.7014110330124E+30 
-16£O.7FFF_FFFF.FFFF_FF0/E+32 
-I.7014110346O47E+30 
16£0.7FFF.FFFF_FFFF.FF0£E+32 
1.7014110340O47E+3n 
2 

r.O 

127 ' 

-127 

TRUE 

TRUE 


F.9.4 ATTRIBUTES OF TYPE DURATION 


The value of the significant attributes of type 
DURATION are as follows: 


DURATION'DELTA 
DURATION*SMALL 
DURATION'FIRST 
DURATION'LAST 
DURATION'LARGE 


1.OOE-02 
2 » »(- 7 ) 
-06400.00 
06400.00 
06400.00 


F.9..5 IMPLEMENTATION LIMITATION 


I.IMri DE.SCRIPTIOV 


4 




Al'I tMHi i \ 


I- 


120 M.ix i mntii itliMit i t i Innw^h. 

120 length of string literal. 


255 

65535 


Maximum number of enumeration literals in an 
enumer.ation type definition. 

maximum v.^lue tised in enumeration representa t i o 
clause. 


65535 


Maximum number of discriminants for a record 
type. 


