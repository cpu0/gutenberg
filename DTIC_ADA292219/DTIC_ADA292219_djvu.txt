19950327 189 


A JA*-» luu UUi X 


JX£.ur iiuo ourx rurs. tf.nrftUUULJ.lUiN 1'UKi'OSES 


REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-0188 


Public reporting burden for this collection of information it estimated to average i hour per response, including the time for reviewing instructions, searching existing data sources, 
gathering and maintaining the data needed, and completing and reviewing the collection of information Send comments regarding this burden estimate or any other aspect of this 
collection of information, including suggestions for reducing this burden to Washington Headquarters Services. Directorate for information Operations and Reports. 1215 Jefferson 
Davis Highway. Suite 1204. Arlington, vA 22202-4302. and to the Office of Management and Budget. Paperwork Reduction Project (0/04-0188). Washington, DC 20503. 


1. AGENCY USE ONLY (Leave blank) 


2. REPORT DATE 

Dec 1, 1994 


4. TITLE AND SUBTITLE 

ADA in Introductory Courses 


6. AUTHOR(S) 

Dr. Sara Stoecklin 
Dr. Marion Harmon 


7. PERFORMING ORGANIZATION NAME(S) AND AD 

Dr. Sara Stoecklin 
Florida A&M University 
Tallahassee, Florida 32307—2001 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ApORESS(ES) 


U.S. Army Research Office 
P.O. Box 12211 

Research Triangle Park, NC 27709-2211 


3. REPORT TYPE AND DATES COVERED 


5. FUNDING NUMBERS U 




8. PERFORMING ORGANIZATION 
REPORT NUMBER 



10. SPONSORING/MONITORING 
AGENCY REPORT NUMBER 


hU 3 6 


11. SUPPLEMENTARY NOTES 

The Views, opinions and/or findings contained in this report are those of the 
author(s) and should not be construed as an official Department of the Army 
position, policy, or decision, unless so designated by other documentation. 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 


12b. DISTRIBUTION CODE 


Approved for public release; distribution unlimited. 


13. ABSTRACT (Maximum 200 words) 

This project at Florida A&M University sponsored development of a 
new sequence of two lecture courses entitled (1) Fundamentals of Programming 
with Ada and (2) Program, File and Data Structures with Ada with two 
innovative supporting laboratory courses. These four courses replaced a 
sequence of courses previously taught with Pascal. The laboratory courses 
were developed to support the theory that reading programs and experimenting 
with those programs prior to writing original programs would be helpful in 
tparhing complex programming languages such as Ada. The intent of this 
project was to allow students to learn a usable language during their first 
courses in programming and for these same students to develop projects using 
the ADA language during project courses. Additionally, there are several 
industries who needed programmers in ADA and these students were targeted 
for those types of industries. 


SUBJECT TERMS 


ADA, Introductory Courses, Programming Laboratory 


15. NUMBJ^OF PAGES 


16. PRICE CODE 



1 


17. SECURITY CLASSIFICATION 

OF REPORT 

18. SECURITY CLASSIFICATION 

OF THIS PAGE 

19. SECURITY CLASSIFICATION 
OF ABSTRACT 


20. LIMITATION OF ABSTRACT 

UNCLASSIFIED 

UNCLASSIFIED 

UNCLASSIFIED 


UL 

NSN 7540-01 -280-5500 


Standard Form 298 (Rev 2-89) 

Prescribed by ansi Std 239-18 

















ADA in introductory Courses 


FINAL REPORT 

Dr. Sara Stoecklin 
Dr. Marion Harmon 

12/01/94 



U.S. Army Research Office 


BAA #92-25 
ARO 30999-MA 

DAAL03 - 92 - G - 0415 


FLORIDA A & M UNIVERSITY 
HBCU 


Approved for Public Release; 
Distribution Unlimited 




PROGRESS REPORT 


1. ARO PROPOSAL NUMBER: 300999-MA 

2. PERIOD COVERED BY REPORT: 1 January 1993 - November 24, 1994 

3. TITLE OF PROPOSAL: ADA in Introductory Courses 

4. CONTRACT OR GRANT NUMBER: DAAL03 -92-G-0415 

5. NAME OF INSTITUTION: Florida A & M University 

6. AUTHORS OF REPORT: Dr. Sara Stoecklin and Dr. Marion Harmon 

7. LIST OF MANUSCRIPTS SUBMITTED OR PUBLISHED UNDER ARO 
SPONSORSHIP DURING THIS REPORTING PERIOD, INCLUDING 
JOURNAL REFERENCES: 

1. Stoecklin, S., and Harmon, M., Using Ada, 1993. 

(Text Publication for the Laboratory Course supporting the 
Introductory Ada Courses). 

2. Stoecklin, S., and Snead, D., Using Ada Programming Diskette, 
1992 (Supporting Diskette with Text) 

3. Harmon, M. Course Material including Syllabus, Outlines, Course 
Notes, Assignments, Tests, and Quizzes 

8. SCIENTIFIC PERSONNEL SUPPORTED BY THIS PROJECT AND 
DEGREES AWARDED DURING THIS REPORTING PERIOD: 

Name Degrees Awarded 

1. Debra Snead BS - CIS/FAMU 

2. Tomeka Williams BS — CIS/FAMU 

3. Mary Clark 

4. Dr. Sara Stoecklin 

5. Dr. Marion Harmon 

6. Dr. Usha Chandra 

9. REPORT OF INVENTIONS (BY TITLE ONLY): (NONE) 


Dr. Sara Stoecklin 
Florida A&M University 
Tallahassee, Florida 32307-2001 



I. FORWARD 


This project at Florida A & M University sponsored development of a new 
sequence of two lecture courses entitled (1) Fundamentals of Programming with 
Ada and (2) Program, File and Data Structures with Ada with two innovative 
supporting laboratory courses. These four courses replaced a sequence of courses 
previously taught with Pascal. The laboratory courses were developed to support 
the theory that reading programs and experimenting with those programs prior to 
writing original programs would be helpful in teaching complex programming 
languages such as Ada. The intent of this project was to allow students to learn a 
usable language during their first courses in programming and for these same 
students to develop projects using the ADA language during project courses. 
Additionally, there are several industries in Florida who needed programmers in 
ADA and these students were targeted for those types of industries. 


II. TABLE OF CONTENTS 

in. LIST OF APPENDIXES, ILLUSTRATIONS AND TABLES . 1 

IV. BODY OF REPORT . 2 

V. REPORT IF INVENTIONS (BY TITLE ONLY) NONE 

VI. BIBLIOGRAPHY . 3 

Vn. APPENDIXES . 4 


III. LIST OF APPENDIXES, ILLUSTRATIONS AND TABLES 

A. Syllabus for Introductory Courses including: 

Conceptual Objectives 

Performance Objectives 
General Course Topic Outline 

B. Sample Test from Test Bank 

C. Sample Programming Assignment 

D. Sample of one Chapter of Laboratory Book with: 

1. Laboratory Assignments : 

2. Laboratory Scientific Questions 

3. Automated Version of Laboratory Assignments 


1 






IV. BODY OF REPORT 

A. STATEMENT OF THE PROBLEM STUDIED 

The problem studies was to develop courses which would teach the ADA 
language as the first programming language course for incoming students. Many 
students have trouble with problem solving, problem decomposition, data typing and 
data structures while writing those first programs. The theory tested here was to 
teach reading and basic experimenting with code prior to code development. This 
technique was to aid in the understanding of program development. 


B. SUMMARY OF THE MOST IMPORTANT RESULTS 

■ 

1. Information and Technology Sharing 

The most significant result of the project was the sharing of information 
between universities trying various techniques with Ada. The results and 
laboratory course developed as part of this project was shared with two other 
universities trying to teach Ada as their first programming course. East 
Tennessee University, one of those universities, used the laboratory course 
material in the development of their own programming courses to support a 
software engineering effort. 

2. Improved Learning through Laboratory Experiences 

A significant result of the project was the faculty noting that students 
certainly benefited from reading code prior to writing code. Currently, our 
first programming courses has seen so much use in these activities that this 
part of the course has become more important. The potential integration of 
the extra laboratory developed is now being considered to be a critical part 
of the actual introductory course. 

3. Ada Environment Support 

Another significant result of the project was the development of support for 
the Ada environment. Students who worked in this environment were 
significantly better prepared for internships and work using the Ada 
programming language. 

4. Ada Students 

The most valuable result of this project were the students who continue to be 
exposed to the ADA programming language and have added to the number of 
Ada trained personnel in the job market. 


2 



C. LIST OF ALL PUBLICATIONS AND TECHNICAL REPORTS 

1. Stoecklin, S., and Harmon, M., Using Ada, 1993. 

(Text Publication for the Laboratory Course supporting the 
Introductory Ada Courses). 

2. Stoecklin, S., and Snead, D., Using Ada Programming Diskette, 
1992 (Supporting Diskette with Text) 

3. Harmon, M. Course Material including Syllabus, Outlines, Course 
Notes, Assignments, Tests, and Quizzes 


D. LIST OF ALL PARTICIPATING SCIENTIFIC PERSONNEL 


Name 

1. Debra Snead 

2. Tomeka Williams 

3. Mary Clark 

4. Dr. Sara Stoecklin 

5. Dr. Marion Harmon 

6. Dr. Usha Chandra 


Degrees Awarded 
BS - CIS/FAMU 
BS - CIS/FAMU 


V. REPORT IF INVENTIONS (BY TITLE ONLY) - none 


VI. BIBLIOGRAPHY 


[B0091] Booch, G., Object-Oriented Development, 

Benjamin Cummins, 1991. 

[BR087] Brooks, F., "No Silver Bullet", Computer, April 
1987. 

[DAL91] Dale, N., and Wiggins, R., "Computer 
Programming with Pascal, Heath, 1991. 

[MIL89] Mills, H. "The Clean Room Approach," IEEE 
Software Engineering, 1989. 

[MIL90] Miller, N.E. and Peterson, C.G., File Structures with Ada, 
Benjamin Cummins, 1990. 

[PET85] Petroski, H., To Engineer is Human, St 
Martin’s Press, New York, 1985. 

[SAD92] Sadidch, W.J., and Peterson, C.G., Ada and Introduction to the 
Art and Science of Programming Benjamin Cummins, 1992. 


VII. APPENDIXES 



APPENDIXES 




COP1215 SYLLABUS 


Fundamentals of Programming with ADA 

Prerequisite MAC 1104 and MAC 1133 OR MAC 1142, OR CALC I 
Co-requisite COP1215L AND MAD2102 

OVERVIEW OF COURSE 

This course is designed to prepare students for analyzing problems and for designing and implementing 
algorithms by understanding language concepts and the ADA progra mming language. 

COURSE OBJECTIVES 

1. Introduction to the progra mming progress; problem analysis, algorithm development, verification 
of algorithm, coding, debugging, testing, documentation, and maintenance. 

2. Introduction to the top-down methodology and the use of structure charts and pseudocode to 
develop algorithms. 

3. Introduction to the syntactic and semantic rules of ADA. 

4. Introduction to the stylistic issues in coding of programs. 

CRITICAL PREREQUISITE KNOWLEDGE AND SKILLS 

1. Students should have a working knowledge of Boolean algebra operations. 

2. Students should have a working knowledge of relational operators and mathematical operators. 

3. Students should be able to apply problem solving techniques to solve algebraic problems. 

PERFORMANCE OBJECTIVES FOR STUDENTS 

Upon Completion of this course, students should be able to perform the following tasks: 

1. Use the ADA Environment to create, edit, compile, and execute an ADA program. 

2. Distinguish between computer hardware and software. 

3. List the basic programming steps. 

4. Apply the top-down methodology to solve simple to moderate problems. 

5. Know the difference between batch and interactive processing. 

6. Code an algorithm in ADA using self—documenting code. 

7. Trace the execution of a program. 

8. Select adequate data sets for testing of programs. 

9. Develop algorithms which require the use of selection, repetition, and procedure control structures. 

10. Given a design which requires sub—tasks, 

a. Determine what the formal and actual parameter list should be for each module. 

b. Determine the method of parameter passing, call by reference versus call by value. 

c. Determine scope of variables, local versus global 

11. Manipulate an array of record data type and its operations. 

CONCEPTUAL OBJECTIVES FOR STUDENTS 

Upon the successful completion of this course, the student will understand: 

1. The computer is an electronic device which only follows instructions. 

2. There are several steps to the programming process. 

3. One method of design is the top-down methodology. 

4. Data types and their operations. 

5. Design tools, structure charts, N—S charts, pseudocode 

6. Techniques for problem solving 

7. Data validation and testing strategies 



PROPOSED SCHEDULE 


WEEK TOPIC 


1 

Chapter 1 

Overview of Programming and Problem Solving 

2 

Chapter 2 

ADA Syntax and Semantics 

3. 

Chapter 3 

Input and Design Methodology 
*'First Program 

4. 

Chapter 4 

Conditions, Boolean Expressions, and Selection 
Control Structures. 

"Second Program - Read format/use file 

5. 

Chapter 5 

Looping 

6. 

Chapter 5/6 

"Third Program- Selection/ Loops 

7. 

Chapter 6 

Procedures 

8. 

Chapter 7 

Value Parameters, Nesting, Procedures, and 
More on Interface Design 
"Fourth Program - Procedures 

9. 

Chapter 8 

Functions, Precision, and Recursion 

10. 

Chapter 9 

Sets and Additional Control Structures 

11. 

Chapter 10 

Simple Data Types 

"Fifth Program - Procedures 

12 

Chapter 11 

One - Dimensional Arrays 

13 

Chapter 12 

Applied Arrays: Lists and Strings 

14 

Chapter 13 

Multi-dimensional Arrays 
"Sixth Program - Arrays 

15 

Chapter 14 

Records and Data Abstractions 

16 

Chapter 15 

Exams 


MIDTERM 

NAME. 

ADA Programming 

Language Exam DATE 


(1 point each) 

TRUE/FALSE. 

-1) The ada programming language was developed on 

behalf of the U.S. Department of Defense to help 
control the cost of software for computers embedded 
in larger systems. 

-2) The parameter mode OUT specifies that the parameter 

will be used to transmit information from the calling 
program or subprogram. 

—-3) The following statement would be ignored by the 

ada compiler and assumed to be a comment: 

- The Program computes .... 

- 4) In ada identifiers, may consist of letter, digits, and 

underscores(_). 

-5) When a new compulation unit uses entities defined in 

older, separately compiled units, the new unit must 
begin with a occurs clause naming the older units. 


.6) An Ada program is simply a subprogram with parameters. 

7) In an ada package only those subprograms defined in 
the package specifications can be call from outside 
the package. 


—8) To give more precise control over entities provided 

to the outside world, the Ada language allows a package 
specification to contain a private part, which begins 
the word PRIVATE and extends to the end of the 
Package specifications. 

—9) Floating-point types are approximations of real numbers 
and are evenly spaced. 

.10) Declarations are processed one after the other at the 
time a program is compiled. 

11) ^ discrete type is either an integer type or an 
enumeration type. 


12) An allocator is a expression whose evaluation causes 
dynamic allocation of a variable. 


1 





.13) An incomplete type declaration must be followed 

immediately by a full declaration for the same type. 

14) The following FOR LOOP WILL PRINT "HELLO" 4 times? 

type DAY_OF_WEEK_TYPE IS (MON, WED, THUR, FRI) 

FOR I IN FRI .. MON LOOP 
TEXT_IO.PUT("HELLO"); 

END LOOP; 

15) Assume the following ; 

TYPE NUM_PTR is Access STRING(1..5); 

ZIP_CODE_PTR : NUM_PTR; 

BEGIN 

ZIP_CODE_PTR := NEW STRING; is this statement legal? 


(2 POINTS EACH) 

MULTIPLE CHOICE. 

_1) WHICH OF THE FOLLOWING IS NOT A RESERVED WORD IN ADA. 

A) OUT B) DIGIT 

C) LOOP D) DELTA E) ELSIF 

_2) Which of the following declarations is INVALID. 

a) LIST: CONSTANT STRING(1..5) := "sting"; 

b) X , Y, Z : INTEGER := 0; 

c) A : INTEGER := 4; 

d) ch : CHARACTER range 'A’ .. 'C'; 

e) none of these 

_3) Which of the following operators can be used to 

catenate to operands. 

a) b) + 


c) / 


d) & 


e) none of these 




.4) For what value of X will the following condition 
to evaluate to TRUE. ASSUME THAT Y IS 7. 


NOT (X = 5) AND (Y > X) OR X < 10 

A) 5 ONLY B) ANY NUMBER LESS THAN 10 C) 10 

D) A NUMBER LESS THAN 7 BUT GREATER THAN 4 

E) NONE OF THESE 

_5) Which of the following forms of an allocator is 

INVALID. 

a) NEW typemark b) NEW typemark "(expression) 

c) NEW typemark index-constraint 

d) NEW typemark '(expression) 

e) NEW typemark " (expression) 

SHORT ANSWERS. 

(5 points each) 

1 ) 

Write an ada subprogram to overload the "<" operator. 

This subprogram should be return the small of two integer 
operands. FOR example x:= 5 < 7 ; would store a 5 in x since 
5 is less than 7. BUT for x := 5 < 4; x would get the value 
4. Your subprogram should accept two integer parameters. 


2) DECLARE A RECORD WITH THE FOLLOWING FIELDS. 

RECORD 

NAME: 20 characters 
age: 1..120 

eye color : blue, brown, green, gray, unknown 
batting average : 0.0 .. 1.0 to the nearest thousandth 

precision. 

height, weight: Float 3 digits accuracy, 
end record: 



3) Declare and unconstrained array of the records declared above. 


4) TYPE DAY_TYPE is (MON, TUES, WED, THUR, FRI, SAT, SUN); 

X : DAY_TYPE; 

IF X = MON then 

TEXT_IO. PUT ( "MONDAY!?.); 

ELSIF (X = FRI) and then (Y = SAT) then 
TEXT)10.PUT("The Weekend is Near"); 

ELSEIF (X = TUES) then 

TEXT_I0.PUT("TUESDAY"); 

END IF; 


REWRITE THE IF STATEMENT ABOVE USING A CASE STRUCTURE. 


5) WRITE A FUNCTION TO COMPUTE THE FOLLOWING SUM. THE 

FUNCTION SHOULD RETURN THE SUM OF THE FOLLOWING SERIES. 


2+4+3+16+32+ .... + 512 + 1024 


4 



(2 points each) 

GIVEN the type declarations 


TYPE ZIP_TYPE is RANGE 1 . . 99999. 

TYPE SPEED_TYPE is DIGITS 6; 

TYPE AVG_SPEED_TYPE is DELTA 2.5 RANGE 0.0 .. 200.0 
TYPE ARRAY_TYPE is ARRAY (INTEGER RANGE <>) of CHARACTER; 

TYPE COLOR_TYPE is (RED, BLUE, GREEN, PINK, ORANGE); 

indicate which of the following object declarations have 
appropriate constraints and what is wrong with the declarations 
that do not have appropriate constraints. 

a) table_of_char: ARRAY_TYPE(1 .. 50); __ 

b) SPEED_1 : SPEED_TYPE DIGITS 7 RANGE 0.3 ,. 10.0 _ 

c) COLOR := COLOR_TYPE := COLOR_TYPE'LAST; _ 

d) SPEED_3 : AVG_SPEED_TYPE DELTA 1.5; __ 


(2 points each) 
EVALUATE: 


a) 

-5 

REM 

2 

b) 

-8 

MOD 

-4 

c) 

6 

REM 

4 

d) 

26 

REM 

-5 


(5 points) 

Write the follwoing sequence of statements without a GOTO 
statement. 

DiVISOR := 2; 

WHILE (DIVISOR ** 2 < = CHANDIDATE) LOOP 
IF (CANDIDATE MOD DIVISOR = 0) THEN 
GOTO not_prime; 

END IF; 

END LOOP; 

-- if this point is reached then the candiate must be prime 

< < not_prime > > 

CANDIDATE := CANDIDATE + l; 


5 



CONSIDER the following declarations: 

TYPE HOUR_TYPE IS RANGE 1 .. 12; 

SUBTYPE LATE_HOUR_SUBTYPE IS 

HOUR_TYPE RANGE 5 .. 10; 

TYPE DAY_TYPE IS RANGE 1 .. 7; 

SUBTYPE WORIC_DAY_SUBTYPE IS DAY_TYPE RANGE 1 . . 6; 

HOUR_NUM : HOUR_TYPE; 

LATE_HOUR_NUM : LATE_HOUR_SUBTYPE; 

DAY_NUM : CONSTANT DAY_TYPE; 

WORK_DAY : WORK_DAY_SUBTYPE; 

YOU MAY ASSUME THAT LEGAL ASSIGNMENTS HAVE BEEN MADE TO 
THESE OBJECTS AT SOME POINT DURING EXECUTION. 

(2 points each) 

Which of the following assignments are not legal and why? 

a) HOUR_NUM := LATE_HOUR_NUM; _ 

b) LATE_HOUR_NUM := HOUR_NUM; __ 

c) DAY_NUM := 3; 

d) WORK_DAY := DAY NUM _ 




QUIZ 1 

COP4900 NAME. 

date" 


True or False. 

(5 points) 

- Ada was developed on behalf of the U. S. Department 

of Defense stricly for the development of embedded 
computer systems. 

- Ada is a standarderdized high level programming language. 

- Ada provides for separate compilation for separate 

subprogram components. 

- In ada it is possible to declare more than one 

subprogram with the same name, if they do not have 
the same parameters and result types, this is called 
redefining names. 

- A data type that can be completely characterized by the 

way in which the values of the data are related to each 
other by the operations. 

- A package is a collection of related entities that can 

be used by multiple programs. 

- A draws now distinction between the external appearance 

of a package and its internal workings. 

- The following is not and ada reserved word WHEN. 


- The following is an illegal ada identifier FIVE_%. 

( 5 points) 

Locate the syntax errors in the following Ada Program: 

With Basic_IO; 

PROCEDURE EXAMPLE is 
J, L : INTEGER 
BEGIN 

FOR I in 1..5 loop 

PUT("ENTER A NUMBER •); 

BASIC_IO.GET(J); 

NEW_LINE ; 

PUT("ENTER ANOTHER NUMBER "); 

BASIC_IO.GET(L ); 

NEW_LINE; 

J := J + L: 

PUT("THE RESULT IS "); 

NEW_LINE; 

PUT(J} 
end 

END'EXAMPLE; 



Number the instances of syntax errors and explain why be side 
the number: 

1 ) 

2 ) __ 

3 ) —-_____- there are more than 3 

(10 points) 

Write an ada program that accepts a sentence from the screen 
and prints the number of vowels in the sentence. 

example: 

The cat chased the mouse across the room, 
number of vowels is 13. 

The program will be graded on correctness and style. 


I 




THE COLOR PALATE ASSIGNMENT 


rHc J? U a IT® ta write an Ada Program which will mix colors and 
ay en resultant color. In order to accomplish this task 
you will probably need to use the following Ada concepts: ’ 


Overloading of an operator (use '+') 

Enumeration of the colors (declare a type) 

Enumeration I/O (instantiate enumeration I/O) 

Loop, Case, If constructs 

Put/Get to/from the terminal (implies use of TEXT ID) 

but r vou r °!rrf,- h ° U i d “I! To3. iowing color palate as a minimum, 

f ’ ee to add other colors and define their resultant 
coloi as you deem appropriate. 


First Color 
RED 
BLUE 
BLUE 


Second Color 
VELLOW 
RED 

YELLOW 


Resultant Color 
ORANGE 
PURPLE 
GREEN 


Don't forget to consider the inverse cases, e.g., if YELLOW is 

I- r n ^ ED the second **•" »«* ^°Ui 

you tfdo s, y ° ther COmbinatidn iS "° fc 

n rnlni n \h r09ram = hould follow the following scenario. It should 
it USe '" fil ' St color » then read that color. Next, 

■l * ho “J d p, ° mpt for the second color and read that color. Th^n 
if -here * function which determines what the mix will be 

'!■ ooLreti,- ° U * hould stron 9ly consider overloading the 

a ! your function call.) The resultant color, if 

be nrinted n f%? ° U ?K then be printed! otherwise, a message should 
be pi inted telling the user that the mix is undefined. Finally 

*?“ USSr tQ determine if the user desires to 

; : ?* he ’ co ;°: a - If so > then loop back through this process? if 

not, then exit the loop. 5 


GOOD LUCK! 


1 



Unit 2 


Introduction to the Ada 


Language 


Conceptual Objectives 

i 

1. Understand the Ada Compiler 

2. Understand the Basic Commands of the Operating System 

3. Understand the Basic Commands of the Compiler 

4. Understand the Basic Commands of the Editor 

5. Understand How to Run an Ada Program 

6. Recognize Overloading 


Performance Objectives 


1. Be able to use DOS commands such as 

COPY, ERASE, TYPE, DIR, and PRINT for files 

2. Be able to RETRIEVE, STORE, and EDIT an Ada Program 

3. Be able to COMPILE and RUN an Ada Program 

4. Be able to Traverse through the Ada Program 

5. Be able to Run an Ada Program using Different Data Types 


« 


25 




Ada Programs 


The Ada programs used in this chapter are composed of two types of 
statements, declaration statements and execution statements. Declaration statements 
used in this chapter include the procedure statement, identifier statement, and the 
included statements of other packages. The execution statements used in this 
chapter are the assignment statement and the output statements. A short description 
is included below with examples of each of the statements. 


Procedure Statement 

Each Ada program is given a program name by the procedure statement. 

This name is used to link and compile the program. In addition, the program is 
stored in the DOS directory under a filename. These two names do not have to be 
the same. The procedure statement has the keyword procedure, the name of a 
valid identifier in the Ada language, and the keyword is. This statement is 
followed by the Ada statements necessary for the program and the end end 
statement for the procedure. The syntax of the procedure statement to declare the 
program name is: 

procedure IDENTIFIER is * 

begin 

— Ada statements go here 
end IDENTIFIER; 


Declaration Statements — Identifiers 

There are various declarations which are made through valid Ada identifiers. 
Such things as Variables and Constants are described using simple data types such 
as integer, float(real), fixed, character and Boolean. The declaration statements 
contain the name of the identifier and the data type for that identifier. The syntax 
of the variable statements to declare these identifiers to the Ada program is: 

IDENTIFIER : INTEGER; 

IDENTIFIER : FLOAT; 

IDENTIFIER : CHARACTER; 

The :syntax of the constant statement is: 

IDENTIFIER : CONSTANT INTEGER := 10; 
IDENTIFIER : CONSTANT FLOAT := 10.0; 
IDENTIFIER : CONSTANT CHARACTER := "A"; 


26 


I/O Packages 

During the first few weeks a simple input/output (I/O) package will be used 
to allow your Ada program to input values from the keyboard and output values to 
the screen. This package is called 

Simple_Ada_IO 


Output Statements 

There are two statements in the Simple_Ada_IO that allow the user to 
express information to an output device, such as the screen. These two statements 
are PUT and PUTLEVE. The first statement, PUT, will display on the output 
device with no advancement to the next line (i.e. no carriage return [CR] and line 
feed [LF]). The second statement, PUT JUNE, will display on the output device 
with an advancement in the line. Variables, constants, and literals are output 
using these two statements. Literals are strings of characters such as those 
characters on the keyboard. Variables and constants are those identifiers declared 
by the declaration statements. The syntax of expressing a variable, constant, and 
literal on an output device are: 

SIMPLE ADA IO.PUT ( IDENTIFIER ); <-displays identifier’s value 

SIMPLE ADA IO.PUT LIXE ( "ABC" ); <-displays the literal ABC. 


Assignment Statement 

The assignment statement allows value assignments to occur to an identifier 
on the left hand side of the :=. If there is an identifier on the right hand side of 
the := such as EDENTIFIER2 then the value of IDENT1FIER2 is assigned to the 
the identifier on the left hand side of the := such as IDENTIFIER 1. If there is 
an arithmetic expression on the right side of the := then the value of the 
expression is calculated and assigned to the identifier on the left hand side of the 
:= such as IDENTIFIERA. The syntax of the assignment statement is: 

: IDENTIFIER 1 := EDENTIFIER2; 

IDENTIFIERA := arithmetic expression; 


27 




Use the program, named Temp_Conversion, printed below for the following 
laboratories. The program is located in the file called UNIT2.A1. Review the 
temperature conversion program to understand how it converts a temperature from 
Fahrenheit to Celsius and from Celsius to Fahrenheit. 


NOTE: The two dashes — located together identify comment 

statements embedded in the Ada program and have NO relevance 
to the execution of the program. They DO serve as 
documentation to the program to allow programmers to makp 
comments within the program for better program understanding. 


— UNIT2.A1 

with SIMPLE_ADA_IO; 
procedure TEMP_CONVERSION is 

— This programs allows the user to enter a temperature. 

— The temperature can be either Fahrenheit or Celsius. 

— A temperature in Fahrenheit is converted to Celsius. 

— A temperature in Celsius is converted to Fahrenheit. 

TEMP_IN_FAHRENHEIT : constant INTEGER := 32; 

TEMP_IN_CELS IUS : constant INTEGER := 0; 
FAHRENHEIT_TO_CELSIUS : INTEGER; — RESULT 

CELSIUS_TO_FAHRENHEIT : INTEGER; — RESULT 

begin — TEMP_CONVERSION 

CELSIUS_TO_FAHRENHEIT := (9*TEMP_IN_CELSIUS + 160)/5; 
FAHRENHEIT_TO_CELSIUS := 5*(TEMP_IN_FAHRENHEIT - 32)/9; 
SIMPLE_ADA_IO. PUT (TEMP_IN_FAHRENHEIT) ; 

SIMPLE_ADA_IO.PUT {" in Fahrenheit is "); 

SIMPLE_ADA_IO.PUT (FAHRENHEIT_TO_CELSIUS); 

SIMPLE_ADA_IO.PUT (" in Celsius."); 
end TEMP_CONVERSION; 


< 


28 




LABORATORY 1 

The program named TEMP_CONVERSION is located in a file named 
UNTT2.A1. 

1. Get the file named UNIT2.A1 into the ACE editor. 

2. Edit the program 

Change the last PUT statement to a PUT_LINE statement. 

Assure yourself that you made the change correctly. 

2. Compile and Link the Program. 

IF THE PROGRAM DOES NOT COMPILE then the statement you 
inserted must be incorrect. 

3. Run the program (execute the program). 

What temperature was calculated for Celsius? _ 

i 


Laboratory 1 completed 


LABORATORY 2: 

The program computes values for each of the formulas. One value is 
Celsius to Fahrenheit and the other is Fahrenheit to Celsius. There is a PUT 
statement for only one of these calculations of Fahrenheit to Celsius. 

1. Edit the Program. . 

Add^PUT_LINE statement 7 to PUT the other calculations.^ 
Assure yourself that you made the change correctly. 

2. Compile and Link and Run the program. 


What temperature was calculated for Celsius? 
What temperature was calculated for Fahrenheit? 


Laboratory 2 completed_ 


29 




LABORATORY 3 

Two constants are declared in the Ada program TEMP_CONVERSION. 

1. Edit the Program. 

Change the value of the constant TEMP_IN_FAHRENHEIT to 212. 
Change the value of the constant TEMP_IN_CELSrUS to 100. 

2. Compile and Link your program. 

3. Run your program. 

What is the output for Fahrenheit to Celsius?__ 

What is the output for Celsius to Fahrenheit?_ 


Laboratory 3 completed 


LABORATORY 4 

V 

Parentheses in the equation set mathematical precedence of the calculations. 
Deleting or changing them can make a difference in the mathematical calculations. 

1. Edit your program. 

Change the constant value TEMP_IN_FAHRENHEIT back to 32. 
Change the constant value TEMP_IN_CELSIUS back to 0. 

2. Compile, Link, and Run your program. 

What is the output for Fahrenheit to Celsius?_ 

What is the output for Celsius to Fahrenheit? _ 

3. Edit your program 

Delete the parentheses from the first assignment statements. 

4. Compile, Link, and Rerun you program. 

What is the output for Fahrenheit to Celsius? _ 

What is the output for Celsius to Fahrenheit?_ 

Is the output the same as in question 3? Why or Why not? 


Laboratory 4 completed 



Program UNIT2_EXERCISE (UNIT2.A2) is a segment of a program. A segment 
is an outline of a program with sections of the program intentionally omitted. Use 
this program segment for Laboratories 5 and 6. 


— UNIT2.A2 

— PLACE YOUR CODE HERE TO ACCESS Simple_Ada_IO. 
procedure UNIT2_EXERCISE is 
begin — UNIT2_EXERCISE 

— PLACE YOUR CODE HERE 
end UNIT2_EXERCISE; 


LABORATORY 5 

Write a program to display the following information on the screen. Use 
literal constants to identify each of the data items written on the screen. 

a. Your last name 

b. Your birth date 


Laboratory 5 completed 


LABORATORY 6 

Now change your solution for laboratory 5 to use named constants for 
month, day, and year rather than the literal constants. You will need a constant 
definition in the declaration section to your Ada program. 


Laboratory 6 completed . 

« 


31 
















SIMPLEIO.ADA 


You will note that each of the programs use a package SIMPLE_ADA_IO. 
This program, shown below, allows Get and Put data to the screen and keyboard. 

— SIMPLEIO.ADA with IOEXCEPTIONS; with TEXT JO; 


package SIMPLE ADA IO IS 

procedure GET (ITEM : out INTEGER); 
procedure GET (ITEM : out CHARACTER); 
procedure GET (ITEM : out STRING); 
procedure GET (ITEM : out FLOAT); 

procedure GET (FILE : fa TEXT IO.FTLE TYPE; ITEM : out INTEGER); 

procedure GET (FILE : in TEXT IO.FILETYPE; ITEM : oU CHARACTER); 

procedure GET (FILE : in TEXT IO.FTLE TYPE; ITEM : out STRING); 

procedure GET (FILE : in TEXT IO. FILE TYPE; HEM : out FLOAT); 

procedure PUT (ITEM : in INTEGER); 
procedure PUT (ITEM : fa CHARACTER); 
procedure PUT (ITEM : in STRING); 
procedure PUT (ITEM : in FLOAT); 

procedure PUT (FILE : in TEXT IO.FILE TYPE; ITEM : in INTEGER); 

procedure PUT (FILE * fa TEXTJO.FILE'TTPE; ITEM : in CHARACTER); 

procedure PUT (FILE : fa TEXT 10.FILE TYPE; ITEM : in STRING); 

procedure PUT (FILE : fa TEXTJO.FILE'TYPE; ITEM : fa FLOAT); 

procedure GETLENE (ITEM : out STRING; LAST : out NATURAL); 

procedure PUTJJNE (ITEM : fa STRING); 

procedure NEW LINE; 

procedure NEW’PAGE; 

function END_OF_FILE return BOOLEAN; 

function END OF LINE rctun BOOLEAN; 

DEVICE ERROR : EXCEPTION reremes 10 EXCEPTIONS.DEVICE ERROR; 
END ERROR : EXCEPTION rename* 10 EXCEPTIONS.END ERROR; 
DATA ERROR : EXCEPTION rennre 10 EXCEPTIONS.DATAERROR; 
ead SIMPLE ADA IO, 


package body SIMPLE ADA 10 is 

package TYPE JNTBGER‘lO is new TEXT 10.INTEGER 10 (INTEGER); 
package TYPEFLOATJO is new TEXTJO.FLOATJO (FLOAT); 
procedure GET (ITEM : ou INTEGER) is 

begin TYPEINTEGERJO.GET (ITEM); 

procedure GET (ITEM : out CHARACTER ) is 

begin TEXTIO.GET (ITEM); 

p ro c ed u re GET (ITEM : oU FLOAT) is 

begin TYPE FLOATJO.GET (ITEM); 

proced u re GET (I lEM : ou STRING) is 

begin TEXT IO.GET (ITEM); 

p rocedure GET (FILE ; fa TEXT IO.FILE TYPE;. ITEM : ou INTEGER) is 

begin TYPEJNTBGERJO.GET (FILE, ITEM); cod GET; 

procedure GET (FILE : fa TECT IO. FELE_TYPE; ITEM : ou CHARACTER) is 
begin TEXT Io7gET (FILE, ITEM); 

procedure GET (FILE : fa IEXTJO.FILE JYPE; ITEM : ou FLOAT) is 
begin TYPE_FLOAT IO.GET (FILE, ITEM); 

procedure GET (FILE : fa 1 tXTJO. FILE TYPE; ITEM : ou STRING) is 
begin TEXT IO.GET (FILE, HEM); 

procedure PUT (ITEM : fa INTEGER) is 

begin TYPE INTBGERJO.PUT (ITEM); 

procedure PUT (ITEM : fa CHARACTER) is 

begin I EXT JO. PUT (ITEM); 

procedure PUT (ITEM : fa FLOAT) is 

begin TYPE_FLOAT JO. PUT (ITEM); 

p rocedure PUT (ITEM : fa STRING) is 

begin TEXT JO. PUT (ITEM); 

procedure PUT (FILE : fa TEXT IO.FILETYPE; ITEM : in INTEGER) is 

begin TYPE INTEGERJO.PUT (FILE, ITEM); end PUT; 

procedure PUT (FILE : fa TEXTJO.FILEJIYPEf ITEM : fa CHARACTER) is 
begin TEXT JO. PUT (FILE, ITEM); 

p roce du re PUT (hi F . : in TEXT IO.FILE TYPE; ITEM : fa FLOAT) is 
begin TYPE_FLOATJO.PUT (FILE, ITEM); 

procedure PUT (FILE : fa TEXT JO. FILE JYPE; HEM : fa STRING) is 
begin TEXTIoTPUT (FILE, ITEM); 

p rocedure GET LINE (ITEM : ou STRING; LAST : ou NATURAL) is 
begin ’ TEXTJO.GET LINE (ITEM, LAST); 

procedure PUT LINE (ITEM : fa STRING) Is 

begin “ TEXT IO.PUT LINE (ITEM); 

procedure NEW LINE is 

begin ' TEXT IO. NEW LINE; 

procedure NEW PAGE is 

begin “ TEXT JO. NEWJ>AGE; 

function ENDOFFELE return BOOLEAN is 

hegm return TEXTJO.END OF FtLE; 

function END OF LINE return BOOLEAN is 

begin return TEXTJO.END JDFJJNE; 

cal SLMPLE ADA JO; 


end GET; 
end GET; 
end GET; 


ead GET; 


end GET 
ead GET 
ead GET 
cad PUT 

cal PUT; 


cal PUT; 


ead PUT; 


col PUT 
cad PUT 
ead PUT; 

end GETJJNE; 
end PUT UNE; 
end NEW_UNE; 

end NEW PAGE; 
cal END OF FILE; 
ead END OF LINE; 

4 


32 









