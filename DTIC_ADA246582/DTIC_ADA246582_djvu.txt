An_A04R RR9 1ENTAT10N PAGE 

Fomt Approved 

OPM No. 0704-0188 

' * .||.||. ,|,| nil mil mil mil mi mi mi Mne* 1 >«» pw iMponn. Mudhe Pw Pm* tor miPMing MrucUon*, (aiRMng wtMne Ma tom** gMtaflng and makaaMns *» dm* 

llll III! 1 1 III I I I f I I 1 III aidkig M* budan aaUmal* or any odiar a^aO d* Ma oolaciton a( bdomiMbn, bckaing iiiggaalinna lor tadudng Ma biadan. lo Wiahki(pDn 

lllii’l illl nil ilill iliil liW nil nil ill a. 1215 Jadaraon Oavl* Highway. Sul* 12IM. AUnglan. VA 22202-4302. and K> «w Offlo* oC Mannalon aid riagulaaKy AtU*. Ofioa of 

1. AGENCY USE ONLY (Leave Blanl^ 2. fl«EPORT DATE 3. REPORT TYPE AND DATES COVERED 

Final: 02 Oct 1991 to 01 Jun 1993 

4 . TITLE AND SUBTITLE 

Meridian Ada, Version 4.1, NeXTstation (System Release 2.0) (Host & Target), 
911002W1.11219 

5. FUNDING NUMBERS 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 

USA 

! 

7 . PERFORMING ORGANIZATION NAME(S) AND AOORESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

6. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-513-0991 

9 . SPONSORINGAtONITORING AGENCY NAME(S) AND ADORESS{ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

10. SPONSORINGAAONITORING AGENCY 
REPORT NUMBER 

1 1 . SUPPLEMEf^ARY NOTES 

12a. DISTRIBUTION/AVAILABILrrY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

Meridian Ada; Version 4.1, Wright-Patterson AFB, NeXTstation (System Release 2.0) (Host & Target), ACVC 1.11. 


DTIC 

ELECTE 
FEB 281992 

D 

14. SUBJECT TERMS 115. NUMBER OF PAGES 




Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 

18. SECURITY CLASSIFICATION 

19, SECURITY CLASSIFICATION 


OF REPORT 

UNCLASSIFIED 

UNCLASSIFED 

OF ABSTRACT 

UNCLASSIFIED 

1 


UMITATION OF ABSTRACT 


NSN 75404)1-280-550 


Standard Form 206, (Rev. 2-69} 
Prescribed by ANSI Std. 230-128 















AVF Control Number: AVF-VSR-513-0991 

4 December 1991 
91-08-15-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 911002W1.11219 
Meridian Ada, Version 4.1 

NeXTstation (System Release 2.0) »> NeXTstation (System Release 2.0) 


Prepared By: 

Ada_Validation_Faci1i ty 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


92-04665 

lliliillii 


92 2 24 003 







Certificate Information 


The following Ada inplementation was tested auid determined to pass ACVC 
1.11. Testing was conpleted on 2 October 1991- 

Conpiler Name and Version: Meridian Ada, Version 4.1 

Host Con^niter System: NeXTstation 

System Release 2.0 

Target Con^wter System: NeXTstation 

System Release 2.0 

Customer Agreement Number: 91-08-15-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
911002W1.11219 is awarded to Meridian Computer Systems, Inc. This 
certificate expires on 1 June 1993. 


This report has been reviewed and is approved. 



Aioa Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



,-,- 

Organization 


Ada 

Dire^or^'c^nputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


J&ei Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Acceston For 

MIS CRA&I 
D7IC TAG 

J.iatT:C5tiO!l 


Dist. ibJiin:-!/ 


Di'3t 


A;.;:l=iL>,'i!y C 

A'.Vii* c. ■ . 


fl'l 









DECLARATION OF CONFORMANCE 




TABLE OF CC»JTENTS 


CHAPTER 1 INTRODUCTIW 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES ..1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INPORMATIOI 

3.1 TESTING ENVIROJMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATICW SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard tAda83] using the 
current Ada Conpiler Validation Capability (ACVC). This validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide fUG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating comtry, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and conpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate ^uld conplete, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF v^ich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield \rA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INTRCMXJCTIC»I 


1.2 SEFERENCES 

[Ada83] Reference Manual for the Ada Programming Lan^age, 

ANSI/MIL-ST[>-l815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures > Version 2-1, Ada Joint 
Program Office, August 1990. 

IUG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
\diich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpiilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal 1^ the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation arr 'described in section 2.3. 


1-2 




INTRODUCTICttJ 


For each Ada inpleinentation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inappliceible tests (see section 2.2 and tUG89]). 

In order to pass an ACVC an Ada in^jlementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Conpiler The means for testing compliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
CapedDility user's guide etnd the template for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host con^juter system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inpleraentation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplenentation to pass an ACVC version, 
an Ada 

Implementation 

Computer A fimctional \mit, consisting of one or more computers cmid 

System associated software, that uses coinmon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Con^juter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Con^ter 

System 

Validated Ada 
Conpiler 

Validated Ada. 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into eui 
agreement with an AVF vhich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inplementation for 
\diich validation status is realized. 

A conpater system v^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevcint for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or ty registration [Pro90I. 

The process of checking the conformity of an Ada compiler to 
the Ada programmiing language and of issuing a certificate 
for this implementation. 

A test found to be incorrect not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATIOI DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is availeible from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

■ CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

■ CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is^inapplicable if it contains test objectives v^ich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


Hie following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT_FLOAT; for this inplementation, there is no such type. 


C35713C, B86001U, and C86006G check for the predefined type 

LC»K3_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
in^lementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINE_OVERFLCWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inplementation, MACHINE_OVERFLCK5 is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA2009F check tdiether a generic unit can be instantiated 
before its body (<md any of its subunits) is conpiled; this 
inplementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the corrpilation of the generic vinit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation does not support 
pragma INLINE. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 




IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this inplementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_lO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this conpiler. 

AE2101H, EE2401D, eind EE2401G use instemtiations of package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this canpiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE21021 

CREATE 

IN FILE 

DIRECT 10 

C:E2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

•RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

C:E2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE31021 

CREATE 

OUT FILE 

TEXT 10 

C:E3102J 

OPEN 

IN FILE 

TEXT~I0 

‘CE3102K 

OPEN 

OUT FILE 

TEXT_IO 



IMPLEMENTATiaa DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and 
text files vtven noiltiple internal files are associated with the sa^ 
external file and one or more are open for writing; USE_ERROR is 
raised when this association is attenpted. 


' CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 

CE2111D CE2111H CE3111B CE3111D-.E CE3114B 

CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 

external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 

external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into tvro or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A • B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 


2-4 




IMPLEMENTATI(»I DEPENDENCIES 


EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks vrtiether legal units of a con?)ilation are accepted 
if one of the conpilation units is illegal- This test was processed with 
the compiler option "-fl", vAiich forces the compiler to generate code for 
legal units of a con^ilation. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this inplementation creates a dependence of the 
instantiating units on the generic mits as allowed by AI-00408 and 
AI-00506 such that the conpilation of the generic bodies makes the 
instantiating xinits obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the conpiler. 


2-5 



CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada inplementation, contact; 

Meridian Software Systems 
Technical Support 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 

For sales information about this Ada inplementation, contact: 

Meridian Software Systems 
Attn: Jim Smith 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 








PROCESSING INFORMATIC»I 


3.2 SIMIARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vrtiether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdravni 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of ^plicable Tests 3786 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 289 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site ,by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun-3 system and then transferred to the 
NeXTstation system via an NFS ethernet connection. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled, linked, and executed on the computer system, as 
appropriate. 


3-2 




PROCESSING INFORMATIC^I 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a coi^lete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Program 

Switch 

Effect 

ada 

-fE 

Generate error file for the Ada listing utility (alu). 

ada 

-fl 

Ignore conpilation errors and continue generating 
c^e for legal units within the same conpilation 
(for test E^003B). 

ada 

-fQ 

Suppress "added to library" and "Generating code for" 
information messages. 

ada 

-fw 

Suppress informative warning messages. 

alu 

-c 

Produce continuous form Ada listings (no page 
headers). 

alu 

-p 

Obey PRAGMA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

alu 

-s 

Output Ada listing to the standard output file instead 
of to a disk file- 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVT. The listings examined on-site by 
the validation team were also archived. 


3-3 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parauneters used for customizing the ACVC. 
Ihe meaning and purpose of these parameters are explained in [tR389]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the mcocimum input-line length, vrtiich is 
the value for $MAX_1N_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vdiere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 

$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


200 — Value of V 

(1..V-1 -> 'A', V -> ^1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 »> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 «> 'A') 

(1..V-3 »> '0') & "298" 

(1..V-5 «> '0') & "690.0" 

& ( 1..'’’,'2 -> ' A ') & 

& (1..V-1-V/2 => 'A') & '1' & 

(1..V-20 •> ' ') 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 «> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 »> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STORJUNIT 

8 

$DEFAULT_SYS_NAME 

M68000 

$DELTA_DOC 

2.0**{-31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESS1 

16#1# 

$ENTRY_ADDRESS2 

16#2# 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

f r 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLQAT_NAME 

NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

nn 

$FORM_STRING2 

"(:m®jot_restrict_file_ 

$GREATER THAN DURATION 


90_000.0 

$GREATER THAN DURATIOI BASE LAST 

T0_00^_000.0 

$GREATER THAN FLOAT BASE LAST 

l.^E+308 

$GREATER THAN FLOAT SAFE LARGE 

1.TJE308 




MACRO PARAMETERS 


$GREATER THAN SHORT_FLQAT_SAFE LARGE 

1.0E308 

$HICffl_PRIORITY 20 

$ILUX3AL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAMEl 

$ILI£GAL_EXTERNAL_FILE_NAME2 

/NODIRECTORY/FILENAME2 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAC»1A1 PRACSIA INCLUDE! "A28006D1.ADA" ) 

$INCLUDE_PRAaiA2 PRACJIA INCLUDE!"B28006F1.ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATIC»r -90_000.0 

$LESS THAN DURATION BASE FIRST 

-1I3_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 1 

$MACHINE_CODE_STATEMENT 

NULL; 

$MACHINE_CODE_TYPE INSTRUCTIC»I 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_lNT_PLUS_l 2_147_483_648 

$MIN_INT -2147483648 

$NAME BYTE_INTEGER 

A-3 






MACRO PARAMETERS 


$NAME_LIST 

M6aooo 

$NAME_SPECIFICATI(»I1 

/us r/ada/acvc/val/X2102A 

$NAME_SPECIFICATI0N2 

Axsr/ada/acvc/val/X2102B 

$NAME_SPECIFICATION3 

A^s r/ada/acvc/val/X3119A 

$NEG__BASED_INT 

16#FFFFFFFE# 

$NEW_MEM_SIZE 

1024 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

M68000 

$PAGE_TERMINATOR 

ASCII.LF & ASCII.FF 

$RECORD_DEFINITION 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

2048 

$TICK 

1.0 

$VARIABLE_ADDRESS 

FCNDECL.VAR_ADDRESS 

$VARIABLE_ADDRESS1 

FCNDECL.VAR_ADDRESS1 

$VARIABLE_ADDRESS2 

FCNDECL.VAR_ADDRESS2 

$YOUR_PRAGMA 

N0_SUCH_PRAOlA 


A-4 





APPENDIX B 


CC»1PILATI0N SYSTEM 0PTICX4S 


The compiler options of this Ada inplementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to conpiler documentation and 
not to this report. 


MERIDIAN ADA COMPILER OPTICNS 


-fD Generate debugging output. The -fD option causes the 
conpiler to generate t^e appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the conpiler to annotate eui assembly language 
output file. The output is supplemented by comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-fE Generate error log file. The -fE option causes the 

compiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the same naire as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fL Generate exception location information. The -fL option 

B-1 





CXWPILATICXa SYSTEM OPTIOJS 


causes location infonnation (source file names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in the event that an 
"Elxception never handled" message appears v^en an 
exception propagates out of the main program- This flag 
causes the code to be somev^t larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Elxception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division check and overflow check. These checks are 
describes in section 11.7 o7 the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
infonnation messages normally output by the coirpiler. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all checks. 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the conpiler. Note that there is a related ada option, 

-fN to suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjxmction with the -S 
option. Certain restrictions apply to use of this option. 

-fv Compile verbosely. The compiler prints the name of each 
subprogram, package, or generic as it is compiled. 
Information about the syiixjl table space remaining 
following compilation of the named entity is also printed 
in the form "(nKj". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the tRM. 

-g The -g option instructs the compiler to run an additional 
optimization pass. The optimizer removes common 
stib-expressions, dead code and unnecessary junps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 




COMPILATIC»J SYSTEM OPTICWS 


-Imodifiers 

Generate listing file. The -1 option causes the conpiler 
to create a listing. Optional m^ifiers can be given to 
affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -Ip is only 
meaningful if -Ic has also been given. Normally -Ic 
suppresses all pagination, whereas -Icp suppresses 
all pagination except where explicitly called for 
within the source file with a pragma page directive. 

s Use steaidard output. The listing by default is 
written to a file with the same name as the source 
file and the extension .1st, as in single.1st frcmi 
single.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead. 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages and warning messages. 
Specifying -It causes the coitpiler to list only the 
source lines to which error messages or warning 
messages apply, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For example, 
the default listing file produced for sinple.ada has the 
name sinple.lst. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -fE option. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No compile. This option causes the ada command to do a 
"dry nm" of the conpilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

-P Print compile. This option causes the ada command to 
print out the command invoked for each processing step 
as it is performed. 


B-3 




COMPILATICW SYSTEM OPTIC»IS 


-S PrcxJuce assembly code. Causes the code generator to 

produce an assembly language source file and to halt 
further processing. 


B-4 





CaiPILATICX^ SYSTEM OPTICDNS 


LINKER OPTICXvIS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


MERIDIAN ADA LINKER OPTIC»IS 


-A Aggressively inline. This option instructs the optimizer 
to aggressively inline subprograms v^en used in addition 
to the -G option. TVpically, this means that s\jbprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for which pragma inline 
has been specified are inlined. 

-c coin)iler-program-name 

Default; (as stored in program library) 

Use alternate con?3iler. The -c option specifies the 
conplete (non relative) directory path to the Meridian 
Ada conpiler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-compiler 
configurations, although under such circTjmstances, an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 
suppresses the creation and additional code generation 
steps for the temporary main program file. The -f option 
can be used vhen a simple cheuige has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 
bamp to invoke the global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. The -G option 

causes bamp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, compilation units to be optimized 
must have been compiled with the ada -K option. 

-I Link the program with a version of the tasking run-time 


B-5 






COMPILATION SYSTEM OPTIONS 


which supports pre-en^jtive task scheduling. This option 
produces code vhich handles interrupts more quickly, but 
has a slight negative inpact on performance in general. 

-L library-name 

Default: ada.lib 

Use alternate library. Ihe -L option specifies the name 
of the program library to be consulted by the bamp 
program. This option overrides the default library name. 

-n No link. Ihe -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. The -N option causes the bamp command to 
do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
the banp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the bamp command 
to print out the actions it takes to generate the 
executable program as the actions are performed. 

-V Link verbosely. The -v option causes the bamp command to 
print out information about idiat actions it takes in 
building the main program. 

-W Suppress warnings. Ihis option allows you to suppress 
warnings from the optimizer. 


B-6 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses- The implementation-dependent 
characteristics of this Ada inplementation, as described in this J^pendix, 
are provided by the customer, unless specifically noted otherwise, 
references in this i^pendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of i^pendix F, are; 


package STANDARD is 


type INTEGER is range -2_147_483_648 .. 2_147_483__647; 
type LC»JG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type SHORT_INTBGER is range -32_768 .. 32_767,* 
type BYrE_INTEGER is range -128 .. 127; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATICW is delta 0.0001 range -86400.0 .. 86400.0; 

end STAND^; 


C-1 








Appendix F Implementation-Dependent Characteristics 


This ^jpendix lists implementation-dependent characteristics of Meridian Ada. Note that there ate no pre¬ 
ceding appendices. This appendix is cidled Appendix F in order to comply with the Reference Manual for 
the Ada Programming Language* (LRM) ANSI/MIL-STD-181S A which states that this appendix be named 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration representation clauses, record repre¬ 
sentation clauses, address clauses, interrupts, package systain, machine code insertions, pragma Intar- 
f aca, and unchecked programming. 

F.l Pragmas 

The implemented pie-defined pragmas are: 

alaborata See the LRM section 10.5. 
intar£aca See section F. 1.1. 
list See the LRM Appendix B. 

pack See section F.l.2. 

paga See the LRM Appendix B. 

priority See the LRM Appendix B. 
stqppras s See section F. 1.3. 

inlina See the LRM section 6.3.2. This pragma is not actually effective unless you compile/link 
your program using the global optimizer. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controllad optiaisa systain_naaia 

sharad storaga_unit 

Biaaiory_sixa 

Named parameter notation for pragmas is not suj^rted. 

When illegal parameter foims are encountered at comple time, the compiler issues a warning message rather 
than an error, as required by the Ada language definition. Refer to the LRM Appendix B for additional infor¬ 
mation about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma intesfscs inMeridian Ada is: 

pxa.gtB^ Lntmxlmcm I language, subprogram "link-name"] ); 

where: 

language This is the interface language, one of the names assembly, builtin. c, or internal. The 
names builtin and internal are reserved for use by Meridian compiler maintainers in nm- 
dme support packages. 

subprogram This is the name of a subprogram to which the pragma Intaxf aca applies. 

*A11 future references to the Reference Manual for the Ada Programming Language appear as the LRM. 


153 


Meridian Ada Compiler User’s Guide 








Appendix F 


link-name This is an optional string literal specifying the name of the non-Ada subprogram conespemd- 

ing to the Ada subprogram named in the second parameter. If link-name is omitted, then 
link-name defaults to the value of subprogram translated to lowercase. Depeixling on the 
language specified, some automatic modifications may be made to the link-name to produce 
the actual objea code symbol name that is generated whenever references are made to die 
corresponding Ada subprogram. 

It is appropriate to use the opticmal link-name parameter to pragma interface only alien 
the interface subprogram has a name that does not correspond at all to its Ada iden^er or 
when the interface subprogram name cannot be given using rules forconsmicting Ada identi¬ 
fiers (e.g. if the name contains a *$* character). 

The characteristics of object code symbols generated for each interface language are: 
assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same as link-name, but prefixed with two underscore charac¬ 
ters C‘_This language interface is reserved for special interfaces defined by Meridian 

Software Systems, Inc. The builtin interface is presently used to declare certain low-level 
run-time operations whose names must not conflict with programmer-defined or language 
system defined names. 

c The object code symbol is the same as link-name, but with one underscore character (*_’) 

prepended. This is the convention used by the C compiler. 

internal No objea code symbol is generated for an internal language interface; this language inter¬ 
face is reserved for special interfaces defined by Meridian Software Systems, Inc. The inter¬ 
nal interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to the pro¬ 
grammer to ensure that calling conventions matc^ and that any necessary data conversions take place when 
calling irtterface subprograms. 

A pragma int nr face may i^pear within the same declarative part as the subprogram to which the pragma 
int erfaca applies, following the subprogram declaration, and prior to the first use of the subprogram. A 
pragma intar face that applies to a subprogram declared in a package specification must occur within the 
same package specification as the subprogram declaration; the pragma interface may not appear in the 
package body in diis case. A pragma interface declaration for either a private or nonprivate subprogram 
declaration may ai^ar in the private part of a package specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additiorud information about pragma interface. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that the 
pragma occurs within the same declarative part as the composite type declaration, before any objects or com¬ 
ponents of the composite type are declared. 

Note that the declarative part restriction means that the type declaration arxl accompanying pragma pack 
cannot be split across a package specification and body. 

The effea of pragma pack is to minimize storage consumption by discrete component types whose ranges 
permit packing. Use of pragma pack does not defeat allocations of aligrunent storage gaps for some record 
types. Pragma pack does not affect the representations of real types, pre-defined integer types, and access 
types. 


Meridian Ada Compiler User*s Guide 


154 





Appendix F 


F.13 Pragma Suppress 

Pragma snppxnss is implemented as described in die LRM section 11.7, with these diffeienoes: 

• Presently, diviaonjdieck and overflowjdiedt must be suppressed via a omniAer 
flag, -fN; pragma siappmss is ignored for these two numeric diedcs. 

• The optional **01 «>** parameternamenotationforpragmast^xwnsisignored. 

• The optional second parameter to pragma Buppmss is ignored; the pragma always 
applies to the entire scope in which it appeals. 

F.2 Attributes 


All attributes described in the LRM Appendix A are supponed. 

F3 Standard Types 


Additional standard types are defined in Meridian Ada: 

• byt«_lntttger 

• Bhort^lntegar 

• long__integer 

The standard numeric types are defined as: 

type byta^intagar la range -128 .. 127; 

type ahort^lntagar la range -32768 .. 32767; 

type integer la range -2147483648 .. 2147483647; 

type long_integar la range -2147483648 .. 2147483647; 

type float la diglta 15 

range -1.79769313486231Z<l-308 .. 1.79769313486231E-t'308; 

type duration ia delta 0.0001 range -86400.0000 86400.0000; 

F.4 Package System 


The specification of package ay at em is: 

package ayatem ia 

type addreaa ia new integer; 

type naxDe ia (m68000); 

ayateiB_naaie : conatant name a68000; 

atoragejonit : conatant 8; 
aieiBory_aiae : conatant :» 1024; 

— Syatemr-Dapandent Named Nua^ra 


Biin^int 

aiax^int 

aiax_jciigita 

max^aiantiaBa 

fine^delta 

tick“ 


conatant -2147483648; 

conatant 2147483647; 

conatant 15; 

conatant 31; 

conatant 2.0 ** (-31); 

conatant 1.0; 


155 


Meridian Ada Compiler User’s Guide 






Appendix F 


— Otbnr Sy«tM>-D#pnndant Onclnrations 
snbtypn priority is intsgsr rsngo 1 .. 20; 

The value of systS8i.aaaory_siss is presently meaningless. 

R5 Restrictions on Representation Clauses 
R5.1 Length Clauses 

A size specification (t ' sire) is rejected if fewer bits are specified than can accommodate the type. The 
minimum size of a compoate type may be subjea to s^lication of pragma pack. It is peimitted to ^dfy 
precise sizes for unsigned integer ranges, e.g. 8 for the range 0.. 255. However, because of requirements 
imposed by the Ada language definition, a full 32-bit range of unsigned values. i.e.O.. (2**32)-l,cannot 
be defined, even using a size spedficadon. 

The specification of collection size (t ' at ora 9 e_aize) is evaluated at run-time when the scope of the Qrpe 
to which the length clause ^lies is entered, and is therefore subject to rejection (via atoragcjarror) 
based on available storage at the time the allocation is made. A collection may indude storage used for luit- 
time administration of the collection, and therefore should not be expected to accommodate a spedfic number 
of objects. Furthermore, certain classes of objects such as unconstrained discriminant array components of 
records may be allocated outside a given collection, so a coUection may accommodate more objects dian 
might be expected. 

The spedficadon of storage for a task acdvadon(t' storagejaizo) is evaluated at nm-dme when 
a task to which the length dause applies is acdvated, and is therefore Object to rejection (via at oragejer- 
r or) based on available storage at the time the allocation is made. Storage reserved for a task activation is 
separate from storage needed for any collections defined within a task body. 

The spedficadon ofsmall for a fixed point type (t' saall) is subject only to restrictions defined in the LRM 
section 132. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enumeration representation dause must 
be in the range of ztandzrd. Intagsr. 

The value of an internal code may be obtaiired by applying an appropriate instantiation of nn- 
chttckod^convvrslon to an integer type. 

J Record Representation Clauses 

The storage unit offset (the at static_simplejexpression pan) is given in terms of 8-bit storage units and must 
beevetL' 

A bit position (the range pan) i^lied to a discrete type component may be in the range 0. .15,with0 bong 
the least significant bit of a compotwnL A range spedficadon may not specify a size smaller than can accom¬ 
modate die component A range spedficadon for a component not accommodating bit packing may have 
ahigherupperbound as appropriate (e.g. 0. .31 foradiscriminantstrlagcomponent). Refer to the inter¬ 
nal data representation of a given component in determirung the component size and assigning offsets. 

Components of discrete types for which bit positions are spedfied may not straddle 16-bit word boundaries. 

The value of an alignment dause (the optional at mod part) must evaluate to 1,2,4, or 8, and may not be 
smaller than the highest alignment required by any component of the record. 


Meridian Ada Compiler User's Guide 


1S6 




Am>cndixF 


R5.4 Address Clauses 

An address clause may be suf^lied for an objea (whether constant or variable) or a task entry, but not fw a 
subprogram, package, or task unit The meaning of an address clause supfdied for a task entry is given in sec¬ 
tion E5^. 

An address expression for an object is a 32-lMt memory address of ^pe systam. addxass. 

Interrupts 

A task entry’s address clause can be used to associate the entry with a UNIX signal Values in the range 0. .31 
are meaningful, and represem the signals corresponding to those values. 

An interrupt entry may not have any parameters. 

R5.6 Change of Representation 

There are no restricdons for changes of representation effected by means of type conversioa 

F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependent components. 

F.7 Unchecked Conversions 

There are no restrictions cm the use of uncheclcedjBonvttrslon. G)nversions between objects whose 
sizes do not conform may result in storage areas wiA undefined values. 

F.8 Input-Output Packages 

A summary of the implementatiotv-dependent input-output characteristics is: 

• In calls to open and create, the form parameter must be the empty string (the de¬ 
fault value). 

• More than one internal file can be associated with a single external file for reading 
only. For writing, only one internal file may be associated with an external file; Do 
tx)t use resat to get around this rule. 

• Temporary sequential and direa files are given names. Temporary files are deleted 
when they are closed. 

• File I/O is buffered: text files associated with terminal devices are line-buffered. 

V The packages sequent lel_lo and dixect^io caruiot be iastantiated with un¬ 
constrained composite types ot record types with discriminants without defaults. 

F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 diaracters in lengfo. 



157 


Meridian Ada Compiler User*s Guide 





