MASSACHUSETTS INSTITUTE OF TECHNOLOGY 
ARTIFICIAL INTELLIGENCE LABORATORY 



AIMEM0391 LOCO MEMO 39 



GRAMMAR 
AS A PROGRAMMING LANGUAGE 

Neil Rowe 

October 1976 

ABSTRACT 



This paper discusses some student projects involving generative 
grammars. While grammars are usually associated with linguistics, 
their usefulness goes far beyond just "language" to many different 
domains. Their application is general enough to make grammars a 
sort of programming language in their own right. 

A simple grammar-running control structure is presented, uncomplicated 
and very suitable for student tinkering. So not only can students 
wrxte grammars, but they can modify and improve the grammar interpreter 
xtself, learning something about how a simple kind of computer parser 
works. 



The work reported in this paper was supported in part by the National Science 
Foundation under grant number EC40703X and conducted at the Artificial Intelligence 
Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.. The views and 
conclusions contained in this paper are those of the author and should not be 
interpreted as necessarily representing the official policies, either expressed or 
implied, of the National Science Foundation or the United States Government. 



Neil Rowc 

2 CRAMMAR AS A PROGRAMMING LANGUACE 



Contents 

1. Introduction 

2. A one-command computer language 

3. An example - a postcard writing program 

4. Writing sentences 

5. Writing poetry 

6. Writing music 

7. Drawing a robot face 

8. Drawing snowflakes 

9. Drawing hydrocarbons 

10. Drawing hills 

11. Introducing context-sensitivity 

12. Number theory 

13. Additional projects 

14. Further control structure modifications 

15. Parsing: turning the grammar around 

16. Educational utility 
Appendix: a Logo implementation 
Acknowledgements 
References 



5 
5 
6 
6 
8 
9 
10 
11 
12 
13 
14 
14 
15 
16 
17 
18 
19 
22 
22 



/""N 



/*""s 



Neil Rowc 

3 CRAMMAR AS A PROGRAMMING LANCUACE 



Observing 1^^^ with forty pupi.s about hi.. After salutation, 

breadth of the room, he said perhaps I m ght' Zol t sVuL*^ T^ ° f b ° th ,he ,en * th and 
speculative knowledge by practical and mPrh!nLZ. » . employed m a project for improving 

usefulness, and he flattened tal "J* ^ re °Z ^ft ^^ WOuld s00n be sensib '" of it! 
head. Every one knew how laborious the usua! method is of H *"*? T*' SP ^ '" an * 0,h - •"•"'« 
contrivance the most ignorant person a! a reasonable h J ^ 3nd Sciencesj wherea * ^ his 

books in philosophy, poetry poH ics law Z%Z 1 cha ' ge ' and W ' th a litl,e bodi| y labo "r, may write 
genius or study. H ! hen "id me o the uL? ?' ^ ,h !° ,0gy ' With ° ut the least assidance from 

twenty foot square, placed in fhmddLo, the roV m ^"T- *" ^ PUPi ' S St °° d in ranks " « was 
wood, about the bigness of a die, but some larger than I»h SUp ^ flcles was composed of several bits of 
wires. These bits of wood were covered on evjvc.? I ^ WWe 3 " ' inked ,0gether b V slend ^ 

papers were written all the words of 2 lan.ua J inT' ^ P f Per P3Sted ° n them; and on » h «e 
without any order. The professor then desired iZ M I f^' m °° dS ' ,enSes > and declensions, but 

The pupils at his command t^^f^l^o^^Z ^ IT *??* >0 sef his engine a * work, 
the edges of the frame, and giving them Tsudde furr, 7h h *' , ^ ' here Were f ° rty fixed round 
changed. He then commanded six and thltVoMhe Lh?»1 ^ dlSpOS,tion of fh * ^ords was entirely 
upon the frame; and where they found h™ J i * 7? d the Several lines sof,| y as <hey appeared 

they dictated to the four* remain Toy To we "cX ? Thlfwn" ."" ^ 7 to Part ° f * ""»•■*•. 
and at every turn the engine was so contrZZ fh! » !i ™?. work was re P ea 'ed three or four times, 

wood moved upside down * that the W ° rds shlfted in, ° new P |a ^. as the square bits of 

several votm^ ^ ^ TeTdy^cotctedT ££"" ? * * **"*' 3 " d ,he ^^ sh °- d me 
and out of those rich materials o give the woHd [coXrHnT^ t^ he intended '° piece *<*«*»« 
might be still improved, and much expedited T hJ n. i? m V ° f a " ar,s and sciences; which however 
hundred such frames in [ Lagado, and X ft ' .ana'.er ^"co" tHh? * ^ '" 7^ 3 " d em ^ in « five 

He assured me, that this invention hTSnw h ^ £ fu'" C ° mm ° n their several collections, 
emptied the whole vocabulary into his frame and T^T ?" ^\ thou ^ fr °™ his youth, that he had 
there is in books between ^ numhe^t^^ 

Jonathan Swift, Travels into Several Remote Nation, nf th. uwm , r ^ „,. 5 



^ m % t 



/-\ 



/"^\ 



Neil Rowc 

4 GRAMMAR AS A PROGRAMMING LANGUAGE 



Pivoted ar^ttuTco^^ S r arS h °! ^ -"- a brush mounted on a 

around on its pivot. A third rotated t^Z^^X^^ * ™* M ° t ° r WOrked ^ """ 

The brush^u* 3^^^^ '.ft,™ of t ?^ »""•''■■* a » «— -'ab.es. 
prepared canvas, and dip aLh Te'av n T* Ho R t X ! ^^ and fifty thousand Positions over a 
solution. P agam ' ' eaV,ng a dot ' Befwee " dottmgs, it moved through a powerful cleaning 

-iked v^^^^iT'&SXZl? C3 T ^r^^ C ° Vered ° r «"«' A"k 
important it was for his former colleague Mohave an am eTo fiT''''' 8 ™ T ^ anCe ' ^° W,n * how 
prepared to explain in detail the philosoohv tehinrf thl. - *" UP ° n fr0m ,he start - AnK w " 

guarantees all the benefits of luminSiy cobr and ^y" ^ ""*"" """*"' "* ^^ Whkh 

somewhere" h^ed .£ hfTmi.l^^^LV'adt^ ^ 'V^ [SiC] P ° tenfia ' ^'^ in »»« 
would see, in just a few hours, would be the end o so cXhh W r 3 ™ 5 " ° r •' nten ' i °"''- What he 

-- the dawn of Mechanism. S °" Ca " ed Humanism . »he end of sentiment and prejudice 

b lurry , JJ£ £C&£ ZZ ^'ZSZ ^^^s^-iteto rh e delails w 

The archbishop', face was modeled in brlE h, greens . 

and wen, ,o wash his h,„ d , ^« ^^£^^ Z^^™ " "" ~~ 
John Sladek, The Muller^Fokker Effect (\Q7\\rh c 



/^•n 



r^. 



Neil Rowc 

5 CRAMMAR AS A PROGRAMMING LANGUAGE 



1. Introduction 

This paper di S eu SS e s S o„e siudenl pr„ JKls lnvolving genera , |ve %rm ^ ^ ^^ ^ 
usu, lly aeseeie.ed wilh linguistics , , heir use(u|n , ss goes (ar beyord . us| . |anguage . to ^ ^^ 

domain, Their appiica.ion is S e„era, enough ,o m3ke grammars . sort 0| pr0gr3mming ^^ ^ ^ 
own right. 

A simple grammar-running control structure is presented, uncomp.icated and very suitable for 
student tinkering. So not on, y can students write grammars, but they can modify and improve the grammar 
mt.rpr.ter itself, (earning something about how a simple kind of computer parser works. 
2. A one-command computer language 

One way to exp.ain the contro. structure is to think of it as a one-command computer .anguage 
Its one command is caHed R (for Ru.es). Since my expenence has been with the ianguage Logo, I wi„ talk in 
terms of an implementation of this language within Logo.'-* (See Appendix for details of an 
implementation.) 

The ■ R (W or "replace") command can be expressed as a function (or procedure) with two list 
arguments: 

R [NAME] [JOE] 
The command works always on a sing.e list (string) of word, It rep.aces in the ,is« particular words by 
other particular words. That above command, for instance, says to look for a„ occurrences of the word 
NAME in the list and change them to JOE. We can also replace one word by several: 
R [NAME] [THE PRESIDENT OF THE UNITED STATES] 

Oftentimes you're going to want to make choices when replacing stuff. That is, you won't always 
want to replace NAME with the same name JOE. We might want for variety to rep.ace it occasionally with 
TOM, DICK, or HARRY. We can write this as follows: 

R [NAME] [(JOE TOM DICK HARRY)] 
The parentheses mean for the computer to choose only one of the things inside them. (To keep things 
simp,e, , assume random choice with each item having e q ua, probabi.ity. ,f you want one item to be more 
likely than the others, put more than one instance of it into the list.) 
We can combine the brackets and parentheses in commands: 



J<"\ 



/~s 



Neil Rowc 

6 CRAMMAR AS A PROGRAMMING LANGUACE 



R [NAME] [(JOE TOM DICK HARRY) C. (JONES DOE DOAKES)] 

which replaces NAME by JOE C JONFS HARPv r nnc 

Y JUt U JONES, HARRY C. DOE, and so on. Or we can put brackets within 

parenthesized expressions: 

R [NAME] [(JOE [TERRIBLE TOM] [DICK THE INSURANCE SALESMAN] HARRY) C. (JONES DOE 
DOAKES)] 

Remember, br ac M s „*,„ use ev6rything inside lh ^ ^^ ^ ^ ^ ^ ^ ^ ^ ^ 

things inside them. 

3. An example - a postcard writing program 

R commands by themselves aren't too interesting. You have to put several of them together ,„ 
Logo we can do this by defining a procedure. Here's a way to use the R language to write postcards, an 
idea suggested by a ninth grade student of mine: 

TO POSTCARD 

10 R [POSTCARD] [DEAR NAME , PHRASE PHRASE PWRAQF cirMnrr »,«.„-, 

20 R [NAME] [(TOM DICK HARRY SALLY SUE SANDRA OCCUPANT)! ' AME] 

30 R [PHRASE] [([HAVING A GREAT TIME] [WISH YOU WERE S rwEATHFR'. rPFATi 

„n » r tSURPS UP] ® E SEEING Y 0U SOON [CAN'T WAIT "TO GET E , 3 

40R [SIGNOFF] [(LOVE [BEST WISHES] [G^D LUCKHSO ^FOR^w])] 

The control structure worKs on these R commands in the given order. „ starts out with a list (string) 
consisting of one word, the name of the procedure (POSTCARD). It then goes down the .ist of R commands, 
making replacements of words in the string wherever it can. It then prints out the final list. Some of the 
"postcards" this procedure can produce include: 

DEAR OCCUPY , «S SS ^l^f^'.^i™^ 
4. Writing sentences 

We can also write more traditional "grammars". Here's a procedure to write some simp.e English 
sentences: 



f m \_ 



n. 



Neil Rowc 

7 CRAMMAR AS A PROGRAMMING LANGUAGE 



TO SIMPSENTENCE 

In o r C vrno^n TENCE] C N OUNPHRASE VERBPHRASE] 
20 R [VERBPHRASE] [VERB NOUNPHRASE] 

oSS 59 ^tDETERMINER ADJECTIVE NOUN] NAME)] 

no R R BIKffiras™ B "» 

140 R [NAME] [(TOM DICK HARRY SALLY SUE SANDRA)] 

It can generate the following: 

THE CHEERFUL ROBOT BOTHERS SOME SAD GIRL 
TOM LIKES THE GREEN COMPUTER 
A HAPPY MARTIAN BEFRIENDS SALLY 

The nice thing is that you can add new features quite easi.y to this sentence generator. For 
instance, you can get sentences like 

SOME BIG BOY IS SAD 

A CHEERFUL ROBOT IS PERPLEXED 

SANDRA IS CHEERFUL 

by just changing line 20 to: 

20 R [VERBPHRASE] [([VERB NOUNPHRASE] [IS ADJECTIVE])] 
And, if you like, you can include adverbs in your sentences. Change line 20 to: 

20 R [VERBPHRASE] [ADVERB ([VERB NOUNPHRASE] [IS ADJECTIVE])] 
and add a line 90: 

90 R [ADVERB] [(OFTEN SURPRISINGLY PERHAPS DUTIFULLY)] 
Example: 

DICK OFTEN IS HAPPY 

A GREEN GIRL DUTIFULLY BEFRIENDS THE BIG ROBOT 

Or suppose we want to allow an indefinite number of adjectives in front of the noun, like 

THE BIG HAPPY GREEN ROBOT 
which we can do by 

30 R [NOUNPHRASE] [([DETERMINER ADJSTRING NOUN] NAME)1 
35 R [ADJSTRING] [ADJECTIVE (ADJSTRING []>] j 

(The bracket pair [] means the "empty list" or the -,,., of no elements. If „ ,. chosen instead of 
ADJSTRING, ADJSTRING will be replaced by only ADJECTIVE.) 



Neil Rowc 

8 GRAMMAR AS A PROGRAMMING LANCUACE 



Note that line 35 worKs because whenever a rule substitutes seething in a sentence, it resumes 
searching Just to the left of the inserted stuff. (That's to be sure to never "miss" a possib.e substitution) 
So you can insert stuff into the inserted stuff and so on. Hence «ine 35 just Keeps piling up adjecti 
front of the noun until it manages to choose the second choice, the empty list. 

Thus this allows us to get: 



tives in 



In! oSrT, ERPLEXED R0B0T SURPRISINGLY LIKES SOME TINY SAD BOY 
SUE PERHAPS HATES A BIG GREEN HAPPY MARTIAN 

Finally, suppose we want to have compound sentences, sentences composed of two subsentences 
joined by a word like "and". Change line 10 to read 

10 R [SIMPSENTENCE] [NOUNPHRASE VERBPHRASE ([] [(AND BUT SINCE THOUGH) 
SIMPSENTENCE])] 

giving: 

THE TINY HAPPY ROBOT OFTEN LIKES SANDRA AND TOM SURPRISINGLY IS SAD . 
and so on. There are many possibilities for further development. 

So in summary here's our new improved sentence generator: 

TO SIMPSENTENCE 
SIMPSENTENCE])] 8 ^' 3 ^ 1 '^' 3 t N0UNPH RASE VERBPHRASE ([] [(AND BUT SINCE THOUGH) 

20 R [VERBPHRASE] [ADVERB ([VERB NOUNPHRASE] TIS ADJECTIVFD1 

IS P Smnc^fn 1 t« DETERM ^R ADJUST NOUN] NAMe" E] " 

35 R [ADJLIST] [ADJECTIVE ([] ADJLIST)] 

40 R [VERB] [(LIKES HATES BOTHERS BEFRIENDS)] 

50 R [DETERMINER] [(THE A SOME)] 

60 R [ADJECTIVE] [(BIG TINY HAPPY SAD GREEN PERPLEXED)1 

70 R NOUN] [(BOY GIRL COMPUTER ROBOT MARTIAN)] 

80 R [NAME] [(TOM DICK HARRY SALLY SUE SANDRA)] 

END R tADVERB] C(0FTEN SURPRISINGLY PERHAPS DUTIFULLY)] 

5. Writing poetry 

Consider the problem of writing poems in which the last syllables of the line must rhyme. We 
could try: 



^ m ^ 



Neil Rowe 

9 GRAMMAR AS A PROGRAMMING LANCUAGE 



TO LIMERICK 

10 R [LIMERICK] [A A B B A] 

20 R [A] [DOWN UP DOWN UP DOWN RHYME 11 
30 R [B] [DOWN UP DOWN RHYME2] 

TOR [UP] [(MEAN PROTE VAST SPRILL TRAMMED SLOOSED POUNT GRASP DRUNK)] 

but this runs into a problem: each time the interpreter substitutes for RHYME1 or RHYME2, it will choose a 
new word. So we have no way of ensuring that a., the A fines or „| the B lines will have the same rhyme. 
That is, we have no way to force a rhyme. 

It seems what we need is a "new R command", ell it R.ONCE, that works just like the old, except it 
on. y chooses once. (See Modification «1 in the Append!,) Using it we can rewrite our limerick-writing 
program this way: 

TO LIMERICK 

10 R [LIMERICK] [A A B B A] 

20 R [A] [DOWN UP DOWN UP DOWN RHYME1] 

30 R [B] [DOWN UP DOWN RHYME2] 

40 R.ONCE [RHYME 1] [(ATE ELL OKE)] 

50 R.ONCE [RHYME2] [(EAT AY 00D)] 

100 R [ATE] [(DATE FATE WAIT SATE)] 

1 10 R [ELL] [(SMELL BELL HELL WELD] 

120 R [OKE] [(BROKE COKE JOKE YOKE)] 

130 R [EAT] [(FEAT BEAT SEAT HEAT)] 

140 R [AY] [(WAY SAY BAY HAY)] 

150 R [OOD] [(MOOD FOOD STEWED RUDE)] 

200 R [DOWN] [(UH AH ER IR AN UN IS US AW E)] 

210 R [UP] [(MEAN PROTE VAST PRILL TRAMMED SLOOSED POONT GRASP DRUNK)] 

A sample limerick: 

AH GRASP UN POONT E DATE 

AN SLOOSED IR POONT UH SATE 

ER VAST AN FOOD 

UN PRILL IS STEWED 

AW PROTE IR TRAMMED US FATE 

Our Log o sys.ecn has , speech synthesis, so w, can g ,„ era , e actual 80unds „ ,„ ,„, ^ of ^ ^ 
by figuring out the phonemes necessary for each word. 
6. Writing music 

It's easy to extend these ideas ,o ™usic. Let's consider a 5ilgation in which wV „ on , y concerned 
with specifying the pitch and dgralions o( ^ „„,„. We ^ ^ ^ ^ ^ # ^ __ ^^ 



/""N 



Neil Rowc 

10 GRAMMAR AS A PROGRAMMING LANGUAGE 



the range of an octave, that means letters CDFFTar a 

■eiiers l» U, E, F, G, A, B, and an upper C which we can call CC The 

duration can be either a Q (quarter), H (half), DH (dotted half), or W (who.e) note. 

Then we can represent a melody by a string. For instance, 

[C H E Q A Q] 
represents a C half note followed by E and A quarter notes. 

So here's a program that writes melodies according to a few simp.e harmonic schemes. ,» f irs , 
chooses a harmony for each measure, then constructs measures ,o fit that harmony. To maKe its melody a 

rhythm. 

TO MELODY 
<^*££W^^^™™^ ««**, GCHORD OCHORD, 

110R[GNOTE][(DGB)] 

120R[FNOTE][(CFACC)1 

130 R [DNOTE] [(D F A)] 

HO R [ORDNOTE] [(DEFGA B)] 

END 

Samp.e bodies ar e g ive„ i„ Fi g . ,. Wilh our syslem you M Uke such . ^ ^ p|jy ^ ^ |( 

via a "music box". 

7. Drawing a robot face 

We can apply the idea of a grammar to drawing designs ^ ^.^ ^^ ^ ^ ^ 
that .ives on a surface of something ,iKe a te.evision picture tub. Suppose he can do two things- he can 

pos.tive or negative) of degree, These operations I wi.l cal, "FORWARD" and "RIGHT"(which can be 
abbreviated "FD" and "RT"). (He can only do one of those at a time.) 

So, for example, these are the commands you would give the turtle to draw a square: 
FD 10 RT 90 FD 10 RT 90 FD 10 RT 90 FD 10 RT 90 
But it's hard having to draw pictures with your pen constantly down. For this reason, the turtle also has a 
command called "PENUP". „ a.lows him to move around iust the same as a.ways, except that he won, leave 



Neil Rowc 

11 CRAMMAR AS A PROGRAMMING LANGUAGE 



any line behind him. Normal mode is restored by a command called "PENDOWN". 

So let* write a grammar to draw "robot" face, Well use a large square for the head, sma.. 
squares for the eyes, and small rectangles in a row for the teeth. We maKe choices as to whether to have 
a tal. head or a square head, have the eyes and mouth high or ,ow in the head, and whether to show the 
teeth in the mouth. 

TO FACE 

In p ESS BE"? (SETHIGH SETL0W) EYES M0U ™] 
20 R [HEAD] [{TALLHEAD SQUAREHEAD)] 

100 R [EYES] [EYE SETUPEYE2 EYE] 

200 R [MOUTH] [SETUPMOUTH (OPENMOUTH SIXTEETH)! 

is s ^s^ffij^^ssjsr tothplus tothplus to °™ 

300 R [SETHIGH] [PENUP FD 80 RT 90 FD 20 PENDOWN] 
310 R SETLOW] [PENUP FD 50 RT 90 FD 20 PENDOWN] 
320 R [SETUPEYE2] [PENUP FD 40 PENDOWN] J 

330 R [SETUPMOUTH] [PENUP FD 19 RT 90 FD 55 RT 90 PENDOWN] 

where the remaining undefined words are just rectangles and squares of various sizes. They can be 
defined by a length and a width: 

/*"*% TALLHEAD as 140 by 100 

SQUAREHEAD as 100 by 100 
EYE as 20 by 20 
OPENMOUTH as 60 by 15 
TOOTH as 10 by 15 

Sample faces are given in Fig. 2. 
8. Drawing snowflakes 

Now let's write a grammar to draw so-called "snowflake curves", by maKing up a list of FD and RT 
instructions, and then executing them in sequence. "Snowf.ake curves" are a progressive sequence of 
drawings like those in Fig. 3. They follow rules something like this: 

TO FLAKE 

10 R [FLAKE] [SIDE R SIDE R SIDE R] 

END R "° NCE CSIDE] t(tFD U [SIDE L SIDE R SIDE L SIDE M 
where R stands for "RT 120" and L stands for "RT -60" (which is the same as turning left 60). 

Line 20 says that at any point in the process, either make a.l the SIDEs straight fines or else 

^ e,aborate a., of them. But this runs into a curious probiem: if we take the second choice in that line, we,, 

never get out of line 20, because with every substitution for SIDE four new SIDEs are added that must also 



Neil Rowc 

12 GRAMMAR AS A PROGRAMMING LANGUAGE 



^""N 



be «*.HIutad for, (LiKe Hercules and the Hydra., B U , on the Cher hand, „ we made line 20 . „ ra|her 
than R.ONCE command, we would be getting asymmetrical snow.lakes, which isn't what we wan. either. 

We could avoid this probiem i. we jus, never again touched things we substituted into the 
grammar. (See Appendix, Modification .2.) But this runs into a further problem that we'll never come back 
to line 20 ,„er weVe through with it, and line 20 might have left S.DEs in Ihe string. So modify the 
grammar control structure so that tines o, the grammar gef -second chances". We-,, .,» Keep the idea o, 
applying the rules in the specified order, bu, when we come to fhe end p, tbem, we'll go bacK to the 
beginning again. So we',, repeatediy -cycle" fhrougb until .here's nothing ,.„ „ subslitule (or . (See 
Appendix, Modification «3). 

So now the FLAKE we originally wrote works. 
9. Drawing hydrocarbons 

We can use grammars to explore some aspects of chemical structure. Consider the fo.lowing 
grammar for drawing some hydrocarbons: 
TO HYDROCARBON 

30 R [HATOM] [SHORTDASH MARK "H" RT 180 STORTDASHl C2AT ° M)] 

c HAIN J^^^^£^\VSSS££S^!^ EfS CHAm LT 90 

END 

where MARK is a command that draws a letter, and where DASH, SHORTDASH, and DOUBLEDASH are defined 
in the obvious way. 

The grammar bui.ds up a molecule by starting with a carbon atom and attaching to each of its four 
sides either a hydrogen atom, a single-bonded carbon atom, or a double-bonded carbon atom pair. In the 
case of the last two, the process is repeated for bonds of those carbon atoms. 

Note that since the entire molecule must be drawn by a step-by-s»ep process, "backing up - must 

be done at times - when you draw an H, you must back up to the center of the attached C. That's the 

reason for the extra SHORTDASH, DASH, and DOUBLEDASH in Nnes 30, ,0, and 50 - they're just ways of 

backing up. The easy way to do this in this case is jus t to redraw the dashes going the other direction, 

^ since they're all symmetrical. 



/-> 



Neil Rowc 

13 GRAMMAR AS A PROCRAMMINC LANCUAGE 



S-\ Some sample chemical structures are given in Fig. 4. 

10. Drawing hills 

Let's write a grammar for drawing different sizes of W - that is, lines that slope up, then 
down in a symmetrical way. We could try: 

TO HILL 

10 R [HILL] [RT -45 PEAK RT 45] 

20 R [PEAK] [FD 10 (PEAK [RT 90]) FO 10] 

END J 

which gives "hills" like those in Fig. 5. 

But now what about making the slopes more gradual, like real hills? One way might be to follow a 
set of commands like this: 

UUUDDDDDDUUU 

where "U" stands for the upward-curving arc "FD ? RT -R" * n A -n- ♦ j t 

urv.ng arc i-u d. hi -b and D stands for the downward-curving arc 

"FD 2 RT 5". Fig. 6 shows a few of this type of hill. 

For a grammar, this suggests (assuming the original control structure, without the modifications): 
^ TO HILL 

10 R [HILL] [U D (HILL []) D U] 
END 

(Remember, the [] represents a list of no words at all. So if the random choice chooses it, HILL will be 
replaced by [U D D U].) 

But this doesn't work. It generates the IPs and D's alternately, like 
UDUDUDDUDUDU 
instead of what we want: 

UUUDDDDDDUUU 
So we could try (assuming Modification .3, cyclic rule application): 



TO HILL 

10 R [HILL] [UPSLOPE DOWNSLOPE] 

20 R [UPSLOPE] [U (UPSLOPE []) D] 

30 R [DOWNSLOPE] [D (DOWNSLOPE []) U] 

END 

but that means that the two slopes can be of different heights, as for instance 
UUUUUUUUDDDDDDDDDDUU 



Neil Rowc 

14 CRAMMAR AS A PROGRAMMING LANCUACE 



which isn't what we want either. Is there a way out? 
11. Introducing context-sensitivity 

It seems we've come up against a basic limitation of our grammar interpreter. That is, we can by 
the R.ONCE force the grammar to maKe a consistent choice (expansion) in several instances of the same 
symbol. This is one way of getting coordinated substitutions. But we cannot maKe one choice affect 
another. That's what we need in this hi,, example - we have to create two independent types of 
symmetry. 

What we need i, s„ me way lo restric, ,he appfcabon „, rules ,„ only par|icu|ar ^^ ^ 
simples. ..» m i gM be ,o m ,Ke ,he Mrs, ,r gume n, ,o ihe R and R.ONCE cerr-ands, which represents t he 
luff we're ,ooKin g ,o match, be fflaa jh auaajaa . (See Appendix , ^^ „„, That ^ ^ ^ 
write 

R [U MIDSLOPE] fU U MIDSLOPE D] 
meaning that we want every occurrence of MIDSLOPE that is preceded by an U to have another U inserted 
in front of it, and another D inserted after it. So we cou.d write the hi„-drawing program this way 
(assuming that Modification .1 (R.0NCE), Modification *2 (no immediate rep,acement of substituted words), 
and Modification #3 (cyclic rule application) are still in effect): 

TO HILL 

10 R [HILL] [U MIDSLOPE D D MIDSLOPE Ul 
20 R.0NCE [MIDSLOPE] [([] MIDSLOPE)] 
30 R [U MIDSLOPE] [U U MIDSLOPE D] 
40 R [D MIDSLOPE] [D D MIDSLOPE U] 
END J 

where, as before, V stands for TD 2 RT -5" and "D" for TD 2 RT <5" Wo , • ^ , 

lor ru «-: Hf 5 . We can indeed now draw the hills 
of Fig. 6. 

12. Number theory 

Aa . ,i„„ e» an ,p„ o, wha, we can dp wiih g ra mm ,rs, „„, e , hat some number ., heorefic ideas „„ 
be defined by ,„.„, For exampte, we can g ene,a.e al, pdd ppwera o, ,wp by a one-iin, g ran,n,ar : 
TO 0DDP0WER2 
lO^RONCE [0DDP0WER2] [([2] [2 * 2 * 0DDP0WER2])] 

Or write out strings consisting of an odd power of 2 number of X's: 



Neil Rowe 

15 GRAMMAR AS A PROGRAMMING LANGUAGE 



f-\ TOODDP2 

KHR.ONCE t° DDP2 3 M X] [0DDP2 00DP2 0DDP2 0DDP2])] 

Or you could generate members of the Fibonacci series, using our HILL grammar as a .ode, (assuming a„ 
Modifications in effect except #2): 

TO FIBO 
• 10 R [FIBO] [A + B] 

20 R.ONCE [A] [(1 NEWB)1 
30 R [1 + B] [1 + 1] 
40 R [B + 1][1 + 1] 
50 R [B] [FIBO] 
60 R [NEWB] [B] 
END 

The ,i„e, s.nn g produced wi„ be a,,er„ at i„ g „ and .,, , ik8 , . , . , . , M . WNIe „ „ bei „ g genera , ed 
.He *„ c „ nsisls of A , and B , s , |lernaUng wi(h Vs Th> number o( a , s ^^ ^ ^ ^^ 

number, ,be number 0, m ,„e ,„.,„„ Fibonacci number , and „,„„ ^ ,„,„ ^ ^ ^ ^ ^^ 
Fibonacci number. 



/"■^ 



Line 20, the only line where a choice is made, decides whether to replace all symbols by r, now 
or go on to generate the next largest Fibonacci number. Lines 30 and 40 are just to ensure that when you 
are finishing the generation and 1 is the selection in line 20 (i.e., all A', are changed into l<s), al. B's wi.l be 
changed into l's too. 

13. Additional projects 

Try writing grammars for the following. 

1. Simple stories, e.g. fables 

2. Stereotyped newspaper stories 

3. Advertisements 

4. Mantras 

5. Sorbin, «. SENTENCE M with subjeC-verb a g ce, m en, in „ umb er <sir, g u,ar vs. piurai, 

6. Or ability to use "an" and "a" properly 

7. Or ability to substitute a pronoun (the correct one) occasionally 

8. Simple sentences in some foreign language 

/"> 9 - Simple dia| ogues between two or more people (e.g. plays). 



r> 



r\ 



Neil Rowc 

16 GRAMMAR AS A PROGRAMMING LANGUACE 



10. Musica. bodies based on melodic (as opposed to harmonic) consideration, For instance 
consider which notes of the scale sound good after a particular other note of the scale.. 

11. Passacaglias on a given ground; that is, music with a bass (lowest) part that consists of a 
short melody repeated over and over 

12. Rondos where the sections are ail in ternary to™, lhat is, music consisting ot a single section 
el.er„a ti n 8 with other section* «,s for instance ABACADA,, where each section cona.st, o, three parts. ,h. 
first and last parts being identical (ABA) 

13. Different kinds of simple houses 

14. Apartment houses of random size and shape, with shades drawn for random windows, plants in 
the window for random windows, etc. 

15. Sp.ca-fill.ng curves; that is, given a square region of fixed size, a line within it such that any 
point within the square is closer than some small fixed distance away from the line. 

16. Trees and bushes. Find out something about the way rea, ones grow (liKe how far between 
branches, or what angles the branches are likely to grow out at), and try to model it. 

17. A different kind of chemical structure. Try using context-sensitive ru,es to eliminate 
chemically impossible or unlikely configurations. 

18. Simple particle physic, That is, try to create bubble chamber particle tracks. For examp.e a 
neutron (moving in a straight ,ine) hits another particle and breaks up into a proton (moving in a Cockwise 
curve) and an electron (moving in a counterclockwise curve), both of which eventually decay into something 
else. (Note that some particles are invisible.) 

19. Some kind of electronic circuit diagrams, perhaps digital logic 

20. The rows of Pascal's triangle 

21. Composite (not prime) numbers 

22. "Agendas" for your daily activities 

14. Further control structure modifications 

As you may observe, one of the nicest things about this system is the relative ease of making 
changes to the control structure (or interpreter), thanks to its relative simplify. This paper has 
introduced four significant improvements to the original "bare bones" interpreter: the R.ONCE feature 



/""*\ 



f~\ 



/^s 



Neil Rowc 

1/ GRAMMAR AS A PROGRAMMING LANGUAGE 



Prevents rules from reworking Just-substituted words, cyc.ic rule application, and simple 
context-sensitivity. Many further projects are suggested, some fro. current worK in iinguistics ^ 

For one, it might be nice to have a "wild-card" symbol that will match anything. That is, assuming 
* to be that symbol, we could rewrite HILL to be this way: 

TO HILL 

10 R [HILL] [L MIDUP R R MIDDOWN L] 

20R [MIDUP • MIDDOWN] [([•] [L MIDUP R • R MIDDOWN L])] 

where » will match whatever is between the MIDUP and MIDDOWN. 

Extending this, we might NKe to specify for part of the matched pattern, not just anything, and not 
just a singte word, but something in between. Like for a sentence generating program: 

R [•ADJECTIVE] [(INCREDIBLY AMAZINGLY FRIGHTENINGLY) .ADJECTIVE] 
where .ADJECTIVE matches anything that is an adjective. 

A very powerful idea that might be used is that of the linguistic transformation. This means rules 
that work on strings but take into account how the strings were generated (their "derivationa."). An 
example would be the "passive transformation", as in the following crude form: 

R [.N0UNPHRASE1 .VERB .N0UNPHRASE2] [.N0UNPHRASE2 BE .VERB BY .NOUNPHRASE1] 
which taKes whatever the N0UNPHRASE1 has been expanded to and maKes it the object of an agent 
prepositional phrase, and takes whatever N0UNPHRASE2 has been expanded to and makes it the subject. 
So for instance 

THE BIG PINK ROBOT HATES NASTY BOVS 
could become, after applying tense rules to change BE to ARE: 

NASTY BOYS ARE HATED BY THE BIG PINK ROBOT 
Adding this facility involves some challenging problems. 
15. Parsing: turning the grammar around 

An interesting project is to "turn the grammar around" and use it to ana.yze strings of words, 
rather than create them. For instance, is a given simple sentence grammatical English? Or does a given 
picture of a face show teeth? 

A way to do this is just "run a grammar backwards". That is, you start with a string and the last 



/~\ 



rs 



- Neil Rowo 

18 CRAMMAR AS A PROGRAMMING LANGUAGE 



rule o, , grammar. You then try , (ind , ma , ch between iKngs ^ ^^ swn8 md ihe ^ ^^ ^ 
the R command. (I, h» second argume „, „ n , aim cho . ceS| , ry ^^^ poss . biMiy j b w |w ^ ^ 

substitute the first argument. This apprpach worts fine for many context-free grammars. 
16. Educational utility 

I have tried here to give a concrete example of what has been cl.ed "learner-controlled 
computing-. How usetu, is i, educational Ore incident may be revealing. When , Mrs, introduced this 
system to the author of the postcard-writing program given a, the beginning o, this paper , , had him write 
a grammar for s i„p le sentenca , He „, ^ ^ ^ ^ - ^ ^ ^ ^ ^ ^ ^ 

exposure to what is referred ,p ,„ the 5chool s , s "g rammar , So , said> ^ need ^ ^ „ ^^ 
pattern. How about noun-verb-noun?" 

It sounded familiar to him. So he wrote 

TOS 

10 R [S] [NOUN VERB NOUN] 

20 R [NOUN] [(PEN BOOK CAT DOG)] 

and then said, "What's a verb?" 

"An action word," I said, assuming that a hint would be sufficient. He looked a little mystified, but 
I Prompted to go ahead and try something out, since he could easily change it later. So he wrote 

30 R [VERB] [(IS DULL HARD HOT ANGRY)] 
ran his program, and got back 

BOOK HARD CAT 
DOG ANGRY PEN 
CAT HOT BOOK 



ittfe 



Sentences generated by his own rules stared up at him from «. pa g, „ e was $urprised , a „ d . , 

emused. And he began to thing about wha „ r.aiiy was, something which, despite his survive o, 

many years of forma, education, he hadn, realiy come to grips wifh. Verbs, as in fac, nouns, must be 
"action words", concepts defined by a relationship within a sentence. 

This is a ,o, he aithier approach to grammar fhan any amount o, ul.ima.eiy arbi ,r,ry delinitions . 
And I think it leads to a better understanding of what a verb really is. 



Noil Rowc 

19 CRAMMAR AS A PROGRAMMING LANGUAGE 



^ Appendix: a Logo implementation 

The overall structure of the components (procedures) is like this: 

SAY 

I 

user s procedure (grammar) 

I 

R 

I 

MATCHREPLACE 
I 
EXPANSION 

I 
RANDCHOICE 
I 
ITEM 

TO SAY :PROCNAME 

10 MAKE "STRING :PR0CNAME 

20 RUN :PR0CNAME 

30 PRINT :STRING 

40 SAY :PR0CNAME 

END 

S^^ P ^^SSJ^S^** - P-'*^"' *~ «-. " replaces in the :STRING list all occurences of 

TO R :SYMB0L REPLACEMENT 

lO^MAKE "STRING MATCHREPLACE :STRING :SYMB0L 

finTTn EP ex A ad: S a!ch S^'the ^S^^J'T&l* ^^ ^ ^ ^ word If it 
REPLACEMENT list. (Note That :REPLACEMENT i a <rZZ °m :STR NG ' " rep ' aCes ,hat word b V th. 
save a little argument-passing II ther , E oe ^o fli h-m 1 '£ *2 argUment ' in ,his P ro «dure, to 
process from there. * t0 ,he be S mn,n g °' »* substitution and resumes the search 

TO MATCHREPLACE :STRING :SYMB0L 
10 IF (EMPTYP :STRING) OUTPUT :STRING 
20 TEST «F :SYMB0L) = (F STRING)) 

SYMBOL)' "^ ^^ (MATCHRE ™CE SENTENCE (EXPANSION .-REPLACEMENT) (BUTFIRST :STRING» 
«OIFFALSE OUTPUT SENTENCE (FIRST :STRING) (MATCHREPLACE (BUTFIRST :STRING) :SYMBOL) 



r\ 



Neil Rowc 

20 CRAMMAR AS A PROGRAMMING LANGUAGE 



or brackets il takes the whole list with in the "kets No "Zw , '""J" aS '° which ilem '° us « 
Just ,„s,de a bracketed lis, is Parenthesiaed/and^e^srfdo^ad^aXw 5 "'"" "" , " SUb ' iS ' 

TO EXPANSION .-STRING 

10 IF EMPTYP :STRING THEN OUTPUT H 

20 TEST LISTP FIRST :STRING 

END 

TO RANDCHOICE :LIST 

END° UTPUT ITEM (RAND0M l (C0UNT :LI ST)) .LIST 

ITEM outputs the Nth item of list L 

TO ITEM :N :L 

10 IF EMPTYP :L THEN OUTPUT [1 
20 IF (:N < 2) THEN OUTPUT FIRST -L 
30 OUTPUT ITEM <:N - 1) (BUTFIRST !) 

f END 

Modification #1: substituting th» < ame choice in all p i a ,«,« 

Write a new procedure: 

TO R.ONCE :SYMBOL REPLACEMENT 

10 MAKE "REPLACEMENT (EXPANSION REPLACEMENT) 

^D STRING MATCHREp LACE :STRING :SYMBOL 

This works because if we expand the -RFPi apfmfmt iu* u < 

seare,n g precede,, the resoiun, M^S^^JS^^^J^^^^^^ 

Modification .?, avoiding changin g substituted slnlf 

on next alter a ™,™nd'° &£ Itta"" '" ^"^ "« % •*., de,er mi „es what to worK 

rSVMBOLsf """* ^^ SE "™ <EXPANSI0N ^WCBCNT) (MATCHREPLACE tBUTrtRST :ST RI NG, 
assuming Modification «1 to have also been made. 
Modification u3 : cyclic rule a ppliratinn 

To do this, write these two new outer procedures: 



Neil Rowc 



21 CRAMMAR AS A PROGRAMMING LANGUACE 



/-s TO DOIT :PROCNAME 

10 MAKE "STRING :PR0CNAME 
20 CYCLETHRU :PROCNAME 
30 RUN :STRING 
40 DOIT :PROCNAME 
END 

TO CYCLETHRU -PROCNAME 

10 MAKE "CHANGEFLAG "FALSE 

20 RUN :PROCNAME 

3<HF (:CHANGEFLAG - "TRUE) CYCLETHRU :PROCNAME 

And change MATCHREPLACE so as to set the fla* tr, Tour u 

string: S6t the f,ag to ™ E whenever a substitution is actually made in the 

25 IFTRUE MAKE "CHANGEFLAG "TRUE 

the grammar proc™ "'" ^ ^^ "« * ™*« rule of ,he grammar was app.ied on execution of 
Modification #4: machine for more than ^ 

TO MATCHREPLACE :STRING SYMBOLS 

so {^sk^w* ols " output :str,ng 

25 IFTRUE MAKE "CHANGEFLAG "TRUE 
.SYMBOLS^ -sIriS :SYMBoL) ENTENCE <EXPANS ' 0N * E ™ CE «NT> (MATCHREPLACE (DROPNUM (COUNT 
gMFFAlSE OUTPUT SENTENCE (F.RST :STR,NG, (MATCHREPLACE (BUTF.RST : STR,NG> .SYMBOLS, 

Procedure MATCHP che= ks to « „ :SraTSTR1NG e „ c(|y „ rresponds )q ^ ^^ ^ ^^ 
TO MATCHP :BIGSTRING :SHORTSTRING 
20 ^^SSr^.^^^g* "™ — -TRUE 

fo iS^S»J£ "^^SS^^ST ^RTSTRtNG, 
END 

Procedure DROPNUM outputs 1ST with the sp eci , ied number „ items dropped ,„ „, ^ ^ 

TO DROPNUM :NUMITEMS 1ST 

10 IF (:NUMITEMS < 1) THEN OUTPUT 1ST 

20 OUTPUT DROPNUM (:NUMITEMS - 1) (BUTFIRST 1ST) 



/O 



j^^S 



Neil Rowc 

22 GRAMMAR AS A PROGRAMMING LANCUACE 



^ Acknowledgements 

The ideas presented here „. „ ot pa r,i cu „ rly prlgina , There „ . ^ ^ ^ ^^ 
r. g a rd ,„ g gra m m . rs and parsing withj „ comMer scjence ^ ^ of ^ ^^ ^ ^ ^ ^ 

student programn ,, nB projed „ due „ Ker Kahn 6 H5 cons(tucted a ^^^ sjmiar ^ bu) ^ ^ 

' ha ' d " Cribed her *' '° P '°* •* "■ "«-* ^ab sentence, , ha ed lo exlend 

end .,„,,„ hl . work , ,„ particu|ar by re ^ , he jnt ^ reier ^ m ^ j( _ ^^ (o ^ 

understanding and tinkering. 

Another major infiuence has been the worK o, fr. cw*^ a „ d Uark Miiier? in spPcifyi „ g . 
gemmae ,o r . broa d class p( programmin8 processes ^ ^ ^^ ^ ^^ ^ ^ 

pro g r,mmi„ g . m.^ she* al , he made ot the "production system- mode, o, Aiien N .we„ and Herbefl 
A. Simon. 5 

As far as specific precedents, there is SNOBtX. . computer language conlaining as . subset 
«~- faciiities tor grammar .,iKe ac , ivilies .9 ^ ^ „ „„, ^ ^ ^^ ^^ 

^ ». design bias emphasizes code efficiency, no, ,a„ su , g e „,.„,„„. These (ea , Jres , e „ d ,„ make )f 

unsuitable for educational use. 

- ■ » uma'u SPeC " iC "^ de ' ai "" 5 m " h0dS °* 8mp '° yin8 eramm " s in """<"•' 

domains. 1 ^ 11 ' 12 ^,^ A nH fm a iiw t * . 

And hnelly, , mus , acknowiedge the work o. Seymour Paper! and others in 

deve,opi„ g . new hind o, ,eer„i„ g environment based around the use o, the computer , a n g ua g e Lo g o 

Thanks to Ha, Abeison, Andy OiSesse, Ken Kahn, a nd M a rK Milier tor heip with this paper. 
References 

1. Seymour P ap e rl , "Uses o, Techno,o 6 y to Enhance Educ a ,ion-, MIT ArttNc... In,e,li g ence 
Laboratory Logo Group Memo *8, June 1973. 

2. U Abeison, Na, Goodm a n, and Lee Rudoiph, - L o g o Manu al -, UtT Lo g o Memo .7, June I97 „ or 
contact the author lor a dr.fl of his m a nual in preparation. 

3. Emmon B ac h, Syntactic Theory, Holt, Rinehart, « Winston, 1973. 

A. Andreas Koutsoudas, V!t^Jr J n i ! H ™bbn i U^^ ^^ ^ 

^ 5. Stuar, D. Milnec, -Learner-Controiied Comp„,i„ g: A Oescription a n d R a ,io„ a , e -, To^aLo, 

Educat.onal Technology SystAmc, Winter 1974, p.207. 



f~\ 



r^ 



Neil Rowe 

23 GRAMMAR AS A PROGRAMMING LANCUACE 



1975. 



6. Ken Kahn, "A Logo Natural Language System, MIT Logo Group Working Paper «46, December 3, 



7. Ira Go.d S tein and MarK Miller, "Inte.ligent Tutoring P rograms: A p roposa| For ^^ ^ 
Logo Group Working Paper #50, 1976. 

8. Allen Newell and Herbert A. Simon, Hyj^anP^^ Prentice-Hall, 1972. 

9. James F. Gimpel, Algorithms in SNORHl a , Wiley, 1976. 

10. Wiliiaa, A. woods, "Malabo,, U „ 6uistic5 and Au , oma , ic ^^ ^^ ^^ 
A,ken Computation Laboratory, Report No. NSF-I9 (Saptambar 1967). 

». David E. FWbart, -No, es „ n . Schema for s(ories , „, ^^ ^ ^^ 
Bobrow and Collins, ed., 1975, p.211. 

12. Gabar, Wiiaon, "Tba Sdanea Fiction Horror KWie Po ck e, Compter", in Nationai Lagoon- tk. 
Paperback Conspir^ w^ nrr| ir>1 

13. Tarry Winograd, Ti„ Buistics a „ d Com „ uter Ana|ysjs o) Tona| ^^ ^ ^ ^ 
Theory. 1_2:1 (1968), p.2. ~ " 

14. A. C. Sb,«, "A For„a, Piatura Daaaription Sabaraa ,a a Baaia For Pi c , ori! P r0c95sin6 ^^ 

Information and Control, 14, 1969, p.5 



/ fm \ 



Neil Rowe 



24 GRAMMAR AS A PROGRAMMING LANCUAGE 



^^^^p 'ljjir 1 1 1 hjpjzrir 



^^^^^ta^^^^Q 



=^rTi^^^^^^^^^^^ 



r^. 



OD 



DO 

1 1 1 II If 



DO 
aran 



an 

mmrn 



DD 
CZZI 



an 



H 
H-C-H 



H 

H-C-H 

H 



H 

H-C- 
i 

H 



-C- 
i 

H 



H 
i 

-C-H 
H 



Fi*. I 



Pj.2 



4**\ 



H-C: 



i 
H 



H 
:C C-H 



C-H 



H 
i i 

C C: 



H 

i 

:C-H 



C-H C-H 
H J 

:-h 

:-h 
i 

H 



F'3.3 



i^cii no we 



» UKAMMAK A5 A FKU^KAMMINi; LANlVUAUfc 



^-S 



• * O 




/***\ 



F f 3.^ 




Fi«.y 




/*"% 



F;^.6 



