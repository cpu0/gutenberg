
System Software I 
For GS and Mac 

All in the Apple Family 

Hard-Disk Drives 

The SCSI Side of Life 

Reviews: 

BannerMania '^^/g 
LogoExpress ^ 
Gold Rush! 
EuroWorks 3.0 



USA %3.3S 
CMMla S4.50 





THE APPLE II 

CULTURE REBORN 



By Paul Statt, Senior Editor 



HyperCard — Apple's popular 
muhiiiiedia prograttuiimg product 

for llie Mac — is re\i\Tiig ihe 
do-it-yourscIf spirit of the Apple 11, 



rlif besi [liing about any Apple computer has always 
Ijcc'ti its accessibility — thai anybody with the urge 
could learn to progi-am and create unique sol'tware. 
But as Apple's computers have (jecome more powei"- 
I'uJ and more sopliistitated, iJiey've ;ils<j gotten harder 
I lo program. The Apple IU;s and tlie Macintosh, for 
instance, don't have a tiative computer programming 
language built in, as BASIC was iu the original Apple II. 
, Like all Apple lis, die GS comes witli Applesoft — but the 
machine's native mode is the 16-bit 

HyperCard — lor the Mac and now for the Apple II(;s 
■ — brings tlie hackei 's spirit back to Apple. Hypei<:ard llt;s 
is a nearly perfect clone of ihc Mac version — with all the 
advantages and disadvantages of Apple's Macintosh 
Hypert".ard 1 .25. It adds color — a feature not found even 
In HyperCard 2.0, die latest Macintosh version. 

Hypeitard llt;s. like Hypei-Card for the Macintosh, is a 
way lo organize information. But it's tiiuch more than a 
^ database manager. At its most prosaic, HyperCard is a O [ 



^^^^^^^^^^^^^^^ 



PtiotoBraptiy + Ed Judice 



February 1931 • inCider • 37 



tilt lux S& twM' 




Collections Directory 



wlxr "system 



Ml. . ' 



I If «. »*M Bit Iw^ - tWlfM 4^ 



Figure 1. 

These two screens both 
represent Che first card of 
"My First GS Stack." On 
both cards you see fhn 
buttons, clockwise from 
upper right: "inforfflBtion," 
"next card," "home," 
"previous card," "bam door," 
and "sound." The home, 
information, next, and 
previous cants are in the 
background of this stack: 
They appear on every card. 
The text field that reads "My 
First GS Stack"' and the blue 
border are also in the 
background. The sound 
button activates a script 
that plays a simple tune; th«., 
barn-door button initiates a 
special visual effect. The 
photo on the bottom shows 
the seme card in "button" 
mode, which you would use to 
create or edit s button. Here 
you also "see" an invisible 
button, plus the tool menu, 
which you can tear oft from 
the menu bar. 



Figure Z. 

A background. In HyperCard, 
is emphatically not the 
scenery. The painting in the 
HyperCard lies Help stack in 
the top screen isn't in the 
background; the boxes 
labeled Exit Help, HyperTalk 
Search, and About Help are. 
The background, whether it's 
made up of buttons, fields, or 
a whole cant, is simply what 
you want to appear on mora 
than one card. When creating 
a stack, the background is an 
essential part of the design. 
The card on the bottom, part 
of the stack that controls 
the Visual Almanac Mac 
compact disc, (s well put 
together. The lower part of 
each cant — containing all 
the action items — is the 
same on each card, while the 
upper portion is a table of 
contents for a particular 
section of the CD. The 
HyperCard llos Help stack 
Is similarly well designed. 



progfamniing limgiiagc. At its most poetic, it's 
d way of life. .4s a language it"!s up-to-date, 
tnnking use of what's known as object-oriented 
frrogntrnminji. 

Programming with an object-oriented 
language is like building a car on an assembly 
line: .-Ml I he parLs are tliei-e; your job is simply to 
put them together. Tiie HyperCard lifestj'le is as 
old-fashioned as the original idea of the Apple 
computer — that anybody should be able to 
write a program, thai businesspeople should 
write business software, that teachers should 
write educational software, that kids can eveu 
create their own. 

As you read about HyperCard Has, you may 
think you have to learn to write HyperCard 
programs — called saipt — to enjoy it. That's 
not true. Thousands of programmers have 
already written HyperCard stacks on subjects 
rangittg all the way from ecological awareness to 
pornography. 

Teachers will appreciate HyperCard's five 
levels of control, from browsing itt the stacks 
(other people's) to scripting your own, with 
typing, painting, and authoring in beriveen. But 
just about everybod)- wlio uses HyperCard — a 
program designed to put you in control — will 
want to write his or her own stacks. Basically, 
widi Hypei<Jarti you am do anything the GS can 
do. Scripting is where the fiin begins. 

ON THE BUTTON 

The key to understanding HyperCard is 
understanding the role oi' cards, slacks, fields, 
ItiMms, and kukgmurub — the objects the Hyper- 
Talk programming language gives you to 
play W'ith. 

A card is what you see on a single screen (as in 
Figure 1); a stack is a collection of cards. Yoti 
could think of it as a stack of index cards, but 
these cards are live, and you control them. In 
HyperCard Ik.S, a card must lill the entire 
screen, although it's possible to hide the menu 
bar at the top. (HyperCard 2.0 on the Mac 
allows cards of dilTerent sizes.) The text and 
graphics you see on ihe card appear on two 
levels: background elements, which carry over 
h orn card to card, and the material unique to 
this card alone. 

A background (Figure 2) can be as simple as 
a white screen, or as [iretty a picture as you can 
scan, draw, or paint with HyperCard's built-in 
graphics tools. 

Eveiy card needs a batkgroimd; in general, as 
we've noted, you put things you want to see on 
more than one card into the biickgroimd. If you 
don't want to see anything repeated on other 



38 • inCider • February 1991 



cards, you'll include an empty backgi'ound. 

In addition to graphics, most backgrounds, 
contain one m- more buttons, the switches or 
controUerfi thai make something happen 
(display another card, play music:, perform 
calailations, get help, print, use a modem), and 
fields, areas containing text or numbers. 

Common background buttons include the 
home, next card, and previotis card icons (small 
pictorial representations. Figure 3). One miscon- 
ception is that a HyperCJard stack must have 
these billions, but they aren't necessarj', (See the 
accompanying sidebar, " 'Why Did You Do It ITiat 
Way?' " for a repftrt on button pi ogramming.) 



Tattle. Elementary functions used in 
HyperCard lies, as specified by the 
Standard Apple Numerics Environment on 
tKe Apple lies' S581G microprocessor. 


log2[x) 


computes base 2 
logarithm of x 


ln[x) 


computes natural 
[base e] logarithm of x 


In1[x3 


computes natural 
logarithm of [x + 1] 


exp2(x] 


computes 2" 


expCx) 


computes 


expl tx) 


computes e" - 1 


cas(x] 


computes cosine of x 


sinCx) 


computes sine of x 


CanCx) 


computes tangent of x 


atanCx) 


computes arctangent of x 


randomtx) 


computes pseudorandom 
number with x as its seed 


compoundtr.n) 


computes tl +r]" 


annuftytr.n) 


computes 1 - t1 + rl / r 



Buttons, whether background or unique, can 
appear as almost any graphic (Figure 4). Some 
don't appear at all — they tan Ije invisible. Some 
buttons look like the electrical switdies on which 
they're modeled, some look like round rect- 
angles, some look like pictures {irons). Hyper- 
t^ard includes a number of icons in a special file 
you can use in your stacks. An Icon Editor stack 
that lets you draw your own is included with 
HyperCard Ik;s (Hgure 5). "friad Ventures has 
also written a desk accessoiy, included in its 
HyperCard llGS Utilities package, to help you 
creale icons. 

WORD AND IMAGE 

Buttons are one way HyperC;ard gets graphics 
onio the computer screen, but hypermedia 
includes good old text, too — in objects called 
fiMs (Figure 6), as we noted above. 

If you've had any experience with database ; 




iMntatr.- 












■« 1 










i tilt E()t h iMli Dbm'-'. 


First ESS!; 

□ ■: - ■ • 
L 

n. 


1 









OlstCftt ] 


.r-i 







Figure 3. 

These are the "home cards," 
or the first cards ypu see 
after starting HypBrCard Ilc9 
or HyperCard 1 .25 on the 
Macintosh. A button te 
access "My Stack" has been 
added to both home cards, 
□n tha Apple lies, which uses 
colDr, a colorful icon has been 
created for it; nn the 
monochrome Macintosh, a 
standard round-rectangle 
button suffices. The home 
card for HyperCard 2.0 lor 
the Macintosh loatcs more 
like the HyperCard lies home 
card, except that It's limited 
tn falack-and-Mfhite. On Che 
Macintosh screen ffacttam] 
the user has accessed the 
"message" (Optien-Ml 
feature [also available in 
HyperCard liGS) to "set 
userLeuel to 5," which is the 
highest level possible and 
lets him or her write 
HyperTalk scripts. 



Figure 4. 

On these two cards you can 
see 3 few of the many kinds 
of buttons available in 
HyperCard lies. The list of 
mCider/A+ editors at the tap 
Is a "family" of check-box 
buttons, which means that 
only one name can be 
selected at a time. The an 
and off buttons, which are 
represented by clip-art Icons, 
are another family. Two 
buttons on the card on the 
bottom, "Off the menu" and 
"A la carte," cause Che menu 
bar at the top of the screen 
to be hidden and to 
disappear. t"Hlde menuBar" 
in the message box, Option- 
M, Mould h^ve cfdhe the same 
thing.] The text fields with 
the card's number and the 
date are "computed" fields 
that appear on every card — 
you can see them only on a 
card whose menu bar Is 
hidden. "Receiver" and 
"Sender" were practice 
buttons. 



February 1991 • inCider- • 39 



f 



I «{ flit tin it Icalt fgiM C}iiMs fatwni Ita 



i.' it m 



Dm' 



HmI icon 



n 

































1 












i- 



Figure 5. 

The Icon Editor pragram 
included with HyperCard lies 
is the way to draw icons to 
use in your own staclis» or in 
ether people's. Whenever you 
paint or draw in HyperCard, 
you can tear off the "Tools" 
and "Patterns" menus from 
the menu bar and they'll 
always be availBbla wiierever 
you iilte on tlie screen. The 
"Patterns" menu migtit have 
been called "Colors" but for 
the legacy of monochrame 
HyperCard for tke Mac. The 
"Home," "Previous," and 
"Next Card" buttons are in 
interesting positions in this 
stack — they don't have to 
be at the bottom and in 
the corners. 



tn:uiagenieiit, you alrtatly kiiow wliiit a field is — 
a single pait of'a record. A HyperC^ard lexi iicld, 
likt a database's, can contain either words or 
numbers; it can appear on a single card, or in 
e\ eiy cai d as a backgi ound. You can save ilie 
contents ol'a Hyperl^ard field as i'\SCII text, and 
import .'\SCI1 text into a slack. HyperCard can 
also perform calculations, including trigono- 
metric operations, on numbers appearing in a 
lieid. (See die accompanying Table.) 

Stacks are programs written in the HypeiTalk 
language (Figure 7). Although Hypeilalk 
doesn't include commands for every possible 
task • — controlling a videodisc player, for 
example — you can enhance its native abilities 
with exlmded imnmmuh, or XCMDs, snatches of 
code writlen in C or Piiscal that you call IVom a 
HyperTalk script. (XCMDs should remind 
.Applesoft liASlC progiynimers of ampersand 
commands, which let you tall a short machine- 
language pi ijgrain h oiii BASIC. The eifeci is 
similar. See the section below. "Speaking the 
Language," lor more on HyperHalk program- 



"Why Did You Do It That Way?' 



"In Italy far 30 years under tKe Borgias 
tliey had warfare, terrnr, murder, and 
bloadshed, but they produced Michel- 
angelo, Leonardo ija Vinci, and Che 
Renaissance. In Switzerland they had 
brotherly love, they had 500 years of 
democracy and peace, and what did they 
proiiuce? The cuckoo clock." 

— Orson Welles as Harry Lime, 
"The Third Man," 1949 

While nothing as dramatic as murder and 
bloodshed occurred during the creation of 
HyperCard liGS (well, we did have en earth- 
quake, but that was probably just a coin- 
cidence), users are often justifiably curious 
about the process of designing and creat- 
ing a program as complex as HyperCard 
llGS. Usually the question is posed v^hile 
screaming for the head of t;he "idiot who 
wrote this thing," but nevertheless, what 
follows are some of the issues we dealt 
with while writing HyperCard lies. 

At the most basic level, our major design 
requirement was to make an Apple IIgs ver- 
sion of HyperCard that was completely 
compatible with HyperCard 1.25 on the 
Macintosh computer. At the same time, 
we wanted to make improvements to the 
program that would benefit users and take 
full advantage of the capabilities of the 
Apple liGS — hence a color HyperCard with 
improved printing and reporting capabili- 



ties, as well as additional functionality in 
the HyperTalk scripting language. 

A complete description of how we 
designed and wrote HyperCard liGS would 
be extremely long, so as one of the two 
engineers who worked on HyperTalk, t'm 
going to confine my discussion to just two 
features in HyperTalk that I believe repre- 
sent some of the design decisions we made. 
The play command. We agonized over the 
design of the play command for a long time. 
In Mac HyperCard, Play lets you utilize the 
single-voice sound capabilities of that 
machine. OTie play command produces the 
requested sounds immediately. Multiple 
play requests are executed sequentially, not 
simultaneously. ] The GS, however, can gen- 
erate more complex sounds than the Mac. 

Naturally, we wanted HyperCard liGs to 
be able to take full advantage of the GS' 
sound capabilities, but we were under sev- 
eral constraints. First and foremost, the 
GS version had to be completely compatible 
with the Mac play command, In addition, 
there were language constraints. Hyper- 
Talk, as a language, is supposed to be 
English-like and simple to read and under- 
stand. Whatever syntax we arrived at 
would have to comprehensible by the aver- 
age user, not just acoustic engineers. And 
finally, whatever we came up with had to 
be useful to the majority of users — we 



weren't going to add a super-powerful 
commend only three people would need. 

Initially we were extremely ambitious, and 
tried ta create a syntax that would give 
you extensive control over the considerable 
sound capabilities of the GS. Regrettably, 
designing a syntax that was powerful, 
understandable, and backward compatible 
proved unrealizable, given the time con- 
straints we were under. The language- 
design issues were difficult because of a 
rather odd situation — the GS' sound 
capabilities were too powerful! We simply 
ixjuldn't figure out a way to unleash all that 
power and have the syntax understood by 
nonprogrammers, 

We then tried a much simpler approach, 
a natural extension of the original syntax: 
one that would let you direct a particular 
sound to a specified channel, and optionally 
delay its execution. After setting up several 
sounds on separate channels, you could 
then tell the GS to start, and all sounds 
would play simultaneously. We had high 
hopes for this approach, but we were 
tripped up by the problem of synchronizing 
multiple sounds. Specifically, we had trouble 
resolving the language issue (and it's a lot 
more involved than you might think}; how to 
accurately make sound B start 1 seconds, 
or even harder, 10 beats, into sound A, 

Deadlines were looming, so rather than 



40 • inOder ■ February 1991 



i 



'"1 



ming.) You can attach an XC;MD either to a 
single stack or to the Hypei-Card program itself. 
Triad Ventures, for instance, has already written 
some XCMDs lo facilitate playing music (avail- 
able in its MIDI Music package), 

PLUS AND MINUS 

One of HyperCard's secret strengths is that it's 
a pretty good database manager (Figure 8). 
Apple plays that down because it doesn't want 
software companies to complain that Apple's 
controlling the market. 

Besides, "informatitm engine" soimds more 
glamorous than "database manager." But teach- 
ers who need class records and individuals who 
don't need relational structured query language 
(SQL) Just to keep Christmas card lists will find 
that they can write or buy HyperCard stacks that 
do the job. 

Actually, HyperCard lies' number-crunching 
power would make some database managers 
envious. Financial fimctions such as annuity 
calculation and compounding for computing 



interest, and mathematical functions such as 
natural logarithms and trigonometric buictions 
(see the accompanying Table), are available — 
and you won't find those in j\ppIeWoi-ks Classic. 
HyperCard II(;s uses Slmidnrd Apple Numerics 
Envirmmenl (SANE) protocol, which gives you 
access to a wealth of functions, and t-an speed up 
calculations considerably if you add a math 
copi-otessor to your GS. 

The progiam's most obvious strength is that 
your GS will l>e able to nm stacks created for die 
Mac, and your Mac will be able to run GS stacks. 
At press time, die pair of stacks that perfoim the 
conversion. HyperRiover GS and HyperMover 
Mac, weren't available. But if you compare the 
look of a Mac stack and its Apple lies cousin, you 
can see that converting one to the other 
shouldn't be too difficult. 

We tried to copy the text of a HyperCard pro- 
grani, called a script, from a GS to a Mac LC via 
an Apple'Ialk network, but it wasn't quite that 
simple, 'ITie text arrived intact, but the program 
didn't quite work on the Mac. You'd need to O 



"Mac or GS, 
HyperCard 
brings the 
hacker's 
spirit back 
to Apple." 



do a mediocre job on a new syntax, and 
thus a disservice to the users and to the 
capabilities of Che machine, we decided to 
stey with the original single-voice syntax 
from the Mac. 

Not wanting to neglect all that power, 
however, we added two new XCMD call- 
backs: aeflinXSound and EndXSound. 
XCMDs are user-created extensions to 
HyperTalk; callbacks are routines chgt let 
HyperCard and XCMDs communicate. 

BeginXSound lets an XCMD take over the 
GS sound chip completely; EndXSound 

gives ccntrdi back t:o HyperCard, With 
these new callbacks, you can extend the 
sound capabilities of HyperCard lies as far 
as you want, and without the constraints 
we were under. 

You can write sound XCMDs that are as 
specialized, powerful, or weird as you like, 
and we strongly urge you to do so. That's 
what XCMDs are for. 
Butcan families. The members of the 
HyperCard lies engineering team are also 
experienced Mac HyperCard users, and 
thus had a great deal of experience creat- 
ing stacks with sets of radio buttons. 
Radio buttons, as defined by Apple's 
Human Interface Guidelines, are used to 
select one, and only one, choice out of 
meny. If one radio button is highlighted, 
the other radio buttons must by definition 



be dark And each button has to have 
a script that handles this procedure, 

Imagine a stack with five radio buttons. 
To act properly, button 1 's script would 
look like the following; 
on mouseUp 
set the hilite of button 1 to true 
set the hilite of button 2 to false 
sec the hilite of button 3 to false 
set the hilite of button 4 to false 
set the hilite of button 5 to false 
end mouseUp 
Button 2's script would look something 
iiite this; 
on mouseUp 
set the hilite of button 1 to false 
set the hilite of button 2 to true 
set the hilite of button 3 to false 
set the hilite of button 4 to false 
set the hilite of button 5 to false 
end mouseUp 
And so on. Not very difficult, certainly, but 
a terrible nuisance. As longtime HyperCard 
users, we realized that a lot of tedious 
scripting could be avoided if the machine 
could handle highlighting and dimming 
automatically. 

As it happens, the Apple IIgs Toolbox 
made this relatively easy to implement, and 
thus button families were born. By util- 
izing button families, a stack developer 
doesn't have to write any code at all 



CO handle the proper highlighting of 
radio buttons. 

An interesting thing happens when an 
experienced Mac HyperCard user sees 
HyperCard IfGS. While Che obvious features, 
such as color, impress Chem, what really 
excites them are button families, and for 
the same reason they excite us — they 
save HyperTalk scripters lots of time. 

As it happens, we decided to make fam- 
ilies a property of all button types, not just 
radio buttons. That's of course their most 
obvious use, and although there's a danger 

that by not restricting their use. button 
families may be used for evil purposes tthat 
is, in violation of Apple's Human Interface 
Guidelines), we felt it was best to give pro- 
gram writers Che extra flexibility In fact, if 
you look at their scripts, you'll notice thaC 
Che rectangular buttons along the bottom 
of the home stack are implemented with 
button families. 

A personal note. We brought a lot of 
personal experience as HyperCard users to 
the table when determining which features 
should be added or improved for the GS 
version. This program was written by 
HyperCard users. We're pretty proud of 
HyperCard lies, and hope you enjoy it and 
get a lot of use out of it. 

— John Lawler, 
Apple Compucer 



Februar/ 1991 • inCider ■ 41 



i hit ISii it UdIi CtBttt 





«!( first SSS'JCt 












1 > 


\i\m\ Mi 






























1 




<> 













I MlM'rK >OiM4>|r'-*t .1141 MaikvPi 



fmrcuiaii*) 




Figure G, 

Ac Che top, HyperCard lies; 
on the baccom, HyperCard 
1.25 far the Mac. This card 
uses the mattiBmaCical 
muscle of HyperCard Co 
campute, in a not very 
elegant way. the monthly 
payments on a year's loan. 
The HyperTalk script for the 
"Calculate" bucton is 
identical on both cards — it 
was copied from Apple's 
HyperTalk Beginner's Guide, 
This demonstrates the 

and Apple lies stacks can ba 
converted to each other's 
format. With the exception of 
the background buttons and 
the "Calculate " button, all 
objects on these cards 
are fields. 



HyperiSard lies script 

Ofi mouseUp 

set numberFormat to 0.00 
get card field "^unt" 
multiply It by card field "Rate" 
divide it by 100 

put it into card; field "Interest" 
add card field "toount" to it 
put it into card field "Total" 
divide it by 12 

put it into card field "Monthly" 
end mouseup 



HyperCard 1.25 script 

an mouseUp 

set nuraberFormat to 0.00 
get card field "Amunt" 
mltiply it by card field "Rate" 
divide it by 100 

put it into card field "Interest" 
add card field "Arount" to it 
put it into card field "Total" 
divide it by IZ 

put it into card field "monthly" 
end mouseUp 



Figure 7. 

HyperTalk scripts for Che 
HyperCard lies and 
HyperCard 1.25 uersiens of a 
bucton that calculates 
interest IFigure 6) are 
identical; except that in the 
Mac scHpt, the lines 
"on mouseUp" and 
"end mouseUp" appear 
automaticallv: in HyperCard 
lies you need to write them 
out. HyperTalk sounds 
enough like English that 
reading a script is painless; 
writing in HyperTalk requires 
mare discipline. 



42 ■ inCider • February 1991 



change .some commands, but you could do tiie 
translaiitm in a mechanical way — doing a fmd- 
and-i eplace on die oflending structures. Tedious 
for you, but a snap for Hypei-Mo\'er. 

The Hypei Mover programs iviil be available 
to developers and user groups. But other chal- 
lenges remain: Stack conversions will pose a 
tricky legal question, for one thing. If you buy. 
say, a company's GradeBookStack for .Macintosh 
Hypei-Card, do you need to buy another cop\- or 
a site license lo lam it on HypeK^ard tit*? U yau 
can legally use any Mac slack, a lot of stacks — 
commercial as well as public-domain — will be 
avaiiaijif un nyperuaro in,s. 

A mnnher of stacks are already available for 
Roger Wagner's HyperStudio — you don't even 
need to own HyperStudio to use some of them 
if they were created with the runtime version of 
the pi ogiam. (See "Shareware Solutions." What's 
New, p. 20 in this issue.) That won't be possible 
with HyperCard. 

It remains to be seen how many stacks will be 
written for HyperCard IIc;s. Mac HyperCiard 
ignited iinerest initially among connnercial 
de\'elopei s, but that burned out l ather i[uickly. 
.■\t press time, we knew the Boston Computer 
Society was writing a disk of CiS shai eware stacks, 
and Triad \'entu)-es had wi itten a commercial 
MIDI Music Slack using Apple's new GS MIDI 
Synth tool, 

AUDIO AND VIDEO 

(iiven the musical talent of the GS, it's a 
sliatne HypeK^ard ll(;s can't sing on its own, or 
at least play the piano. The version we tested 
had a choice of two musical instruments; harp- 
sichord and a "boing" sound, which simply 
doesn't sound very musical. A Scripier's Tools 
Slack included with HyperCard lies, however, 
coniains 1 1 other sound resources foi' instru- 
ments such as piano and guitar, which you can 
attach to a single script or lo (he progi am itself . 
(See the sidebar, " "Why Did You Do It That 
Way?' " for details.) 

HvperCarr! doesn't have built-in sound digi- 
tization, however, as HyperSludio does. (See 
Figure 9, HyperStudio also includes a micro- 
pboiu', mui b like the Mat I.C., making it easy lo 
add sound to a stack.) Is -Vpple avoiding putting 
ttx) much musical muscle into any of its products 
because it fears legal complications with .Apple 
Corps, the Beatles' record company? 

As we noted above, the current version of 
HyperC^ard lk;s also doesn't include commands 
Ibr running a videodisc player, as HyperStudio 
does. HyperStudio has to olTer lots of extras, 
because, lacking a HyperTalk-style program- 



ming language as it does, adding features to tiie 
pi-()grani is hiu'd. 

SPEAKING THE LANGUAGE 

HyperCard is a general-purpose database 
manager, paint program, programming lan- 
guage, and even something oFa word processor, 
'llie drawback? Hypei-Card — either version — 
is slow, HyperTalk simply adds another layer 
between you and the niathine. HyperTalk is an 
interpreted language, which means that every 
line of code must be translated into something 
the GS understands before the machine starts to 
do anything. The advantage of an interpreted 
language is that the same code works on dider- 
ent machines, lliat's especially cleai- in the case 
of Hypei-Gard: It's easy to write code that works 
on both tlie GS and the Mac, 

HyperTalk is a plain-speaking, unaffected 
programming language, but a programming 
language nevertheless. You have to mind your IV 
and Qs when you write a Hypert^ard stack — 
make sure you spell eveiything coiTectly and 
leave the right number of spaces. 

HyperTalk is forgiving in some ways. It's 
unusual in that it lets you use two different words 
in certain cases to mean the same thing — stow 
and slowly, or go In and go, for instance. But it's 
about as much like spoken English as the 
commands players type into a text-adveniiue 
game. It requires some discipline to make your- 
self understood. 



Pricing and Availability 

At press time, final decisions about the price 
and distribution of HyperCard IIgs hadn't been 
made. Jane Lee. product manager for Hyper- 
Card IIgs. told us in November, though, that 
the price "should be around $99." That's what 
HyperCard for the Macintosh costs. "It will 
initially be distributed by Apple. ' Lee said, in 
contrast to HyperCard Mac. which is now dis- 
tributed, in part at least, by Claris. Apple's 
software subsidiary. "It will be available through 
dealers and APDA [the Apple Programmers and 
Developers Association, phone (408) 562- 
3910. [80Q] 282-3732], and we are pursuing 
licensing by [Apple-authorized] user groups. " 

Lee noted that because "you can't use 
[HyperCard llcssl cut of the box with your new 
[Apple IIgs] CPU — it needs 1.5 megs and a 
hard drive or network Co run — HyperCard IIgs 
will not ship with the CPU. " as Macintosh 
HyperCard does. 

In addition, Lee said, "HyperMover will be 
available to developers and through APDA." 




Figure 8. 

Calendar stacks for 
HyperCard lies Ctopl and Mac 
HyperCard 1.25 tbotComl. 
HyperCard hsndles a small 
job like your personal 
appointment schedule easily: 
a more taxing task might 
overpower it. HyperCard lies 
includes this calendar stack 
and one to file addresses and 
phone numbers. 













^1,11 ]r,i4ivri ^1.11,1 u\^v 


li|i|"lt. .irjiifn;Hn|ti*f>tt<dt?t HHILetl Qr<1;Hi|pi*ft.ftiil 51Dcr*:[fe 


f 




as 


11' 


!^ ^ 


M.m 2f- 








rim ;s 


TiK 7b 


1 






l-ri 20 










\\^.\ 




Sal JO ( 


"iHtVnii 


> Suu 31 










■■>i 









nlf Itw tvit T&^h C'bj*:i^ Cskf^ 



HyperStudio 



♦♦V 




g!;ocli( 
ISkwHSWt (ia»]>il 



(b I ^im tt ialr< (vii«iliii)j iittll'l (Wit iU( ii it <M kcHk^) 




..;.:•« .;*id.tl»lj»U 

- -: >r It g njtgisl c)»i!t Ici 

- :.;iitira<il stlwart 

: !](■ II "If PIISM" 01 taitw fBI c 
'kilstllnXlBttsiiillMftr 




Figure 9. 

HyperStudio for the Apple 
lies is a pragram much like 
HyperCard Mas, which has 
been available for two years 
already. Its home cerd, top, 
is quite a bit like 
HyperCard's, but stacks 
aren't compatible. On the 
bottom, a sample cerii from a 
HyperStudio stack. CIn this 
card, designed to teach the 
Spanish language, you can 
click on the dancer to hear s 
prerecorded human uoice say 
"ta senorita," This kind of 
sound recording isn't 
available in HyperCard lies. 



February 1991 ■ inCider ■ 43 



"At its 
most 
poetic, 
HyperCard 
is a way 
of life." 



HyperStudio is easier to use than HyperC^ard, 
if by [hat you mean you can write a program 
witlunit writing a line of code. HyperStudio 
never gets to the scripting level. It'ii indeed 
possible ttj build a HyperCard lies stack without 
Hypet Talk by simply contbiiiiiig elemems, but 
it's like baking a cake from a mix — the result 
will be edible, but bhmd. lu any case, HyperTalk 
isn't exactly difTicult. It strives to took like 
English, and alihoisgh the impersonation isn't 
always .successhil, the meaning ofa line such as 
ptii the dale into field "Today" should be [jretty cleai". 
You'll need to take some time, and perliaps read 
a book 01" two, befoi-e you can write a script in 
HyfierCard. 

Add i son-Wesley publishes excellent Hyper- 
Card references, and at pi ess time also had a 
HyperCard lies book in the works. You may 
need to spend a weekend learning about it; 
an evening might do it. Bui yoti won't need to 
take a college-level course as you would to Icani 
Pascal or C. 

If you don't want lo type even one line of 
program code, Hyjjei'Studio can do nntcli ol" 
what HypeK'.ard can, and sonie things it can't 
(such as videodisc control and sound digitiza- 
tion), simply by pointing and clicking a mouse. 
Some teachers will want iheir students to have 
the chance to create stacks without program- 
ming; othei's may wain students to learn to write 
a computer program. 

An interesting aspect of Hypei^Card, GS or 
Mac, is that you never need to save a stack. If 
you've experienced a a ash or two, you'll under- 
stand the wisdom of this feature in a program- 
ming language. HyperStudio, which lacks the 
language, lets you decide when and if you want 
to sa\'e. If you want to experiment with Hyper- 
Card, you have ibe o[)iioii ioSavea Cofiy of your 
work up to a certain point. 

A BIG PROGRAM 

lb use Hyper(!ard, yoir need a big GS: 1 .,5 
megabytes of memory and a hard-disk drive or 
network. Tliose are the official s\'stem require- 
ments. We used a 1 .25-iiiegabyte tlS with a 40- 
megabyte hard drive to test a lieta version of die 
prog]-am. It was usable with that .setup, but delays 
and out-ol-nienioiy messages were frustrating. 
Tlie system ran more smoothly with 4 megiibytes 
of R;\M and an accelerator. 

Faster speed really isn't crucial, but the hard 
drive is. After all, the whole point of HyperCard 
is that it's a way to manage lots of information 
— it gets interesting only when you have lots 
of cards. Some of the best Mac stacks, for 
instance — such as The Visual Almanac, shown 



in Figure 2 — i"un it om CD-ROM discs witli half 
a million megabytes. An AppleTalk network 
would be a good way for a scliool to run Hyper- 
Card lies. 

Not everyone has hard-disk drives, tlD-ROM 
[ilaycrs, and ItKal-arca networks, though, "fhat's 
the crucial advantage HyperStudio has over 
Hypei-C^iird ll<.s: HyperStudio ntns on a CiS with 
ol2K of R.-\M and a 3.5-inch lloppy-disk drive. 
You can even create stacks that run with less 
memoiy, and run without HyperStudio. 

But let's not take anything away from the 
supreme achievement of HyperCard IIc-s — it's 
a M;iciiitosh program that runs on the Apple 
Il(;s, the hundreds of Mac HypeK^u tl [jrognims 
that are available are now also avaiiable lor the 
GS. HypeiiJard Ilt.,s should actually help make 
Hyper(;ard legitimate, and help maintain 
Apple's dominance in the school computer 
market. 

Ibe irony is that HvpertjartI niav eventually 
help make the Macintosh legitimate in schools. 
Schools that have GSes can now use HyperCard 
lli.s to run existing Mac stacks, many of which 
are designed for eduaition. Schools, or tcadiers, 
who buy Macs can use the new machines to write 
educational soimare that vvill run on both Macs 
and Apple llcses. The twain have met. □ 



PRODUCT INFORMATION 



Apple II 

Public-Domain Disks: 
HyperCard 11 GS Staclcs 

Apple II SIG 
Boston Computer 
Society 

One Center Plaza 
Boston. MA 021 OB 
1617] 227-4B3B x201 

HyperCard Stack 
Design Guidelines. 

£16,95 

HyperCard Script 
Language Reference, 

£23,95 

Add is on -Was ley 
Publishing 
Route 128 
Reading, MA 01867 
E61 7) 944-3700 

HyperCard lies 

Apple Cam put er 
20525 Marian! Avenue 
CupErtino, CfK 95014 
MOB] 074- 1010 
S99 

HyperCard lies 
Utilities 

HyperStuff Clip Art 
MIDI Music 

Triad VEnturea 
PO Box 349 
Smithtown. NY 117B7 
(51 B) 732-3771 
E516) 36a-Q797 
£39,95 each 



HyperStudio 2.1 

Roger Wagner 
Publishina 
1050 Pioneer W,Hy 
Suite P 

El Cajon. CA 92020 
CBIS) 442-0524 

SI 48. 95 

S10 demo disks 

HyperStudio Network 

P.a. Box 103 
aiawenburg, NJ 0B504 
teOSJ 4BB-3196 
$29/yesr 

MIDI Synth 

Apple Programmers 
and Developers 
Association 
Apple Computer 
20S25 Mariani Avenue 
M5-33G 

Cupertino. CA 95014 
(408] 562-39 10 
(800) 282-3732 
£35 

The Visual Almanac 

Optical Data 
3D Technology Drive 
Warren, NJ 07059 
HOB) 668-0022 
SI 00 



44 ■ inCider ■ February 1991 



