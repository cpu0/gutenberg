•••^ISCONTRPL DATA- 

AD-A237 765 

" • ___ BHii im III! 


% JULO 


3 l 59 l ■: 



Ada Language System/Navy (ALS/N) 
For Embedded Real Time Systems 




USB® 




® 





4N/UYK-^ 


Ao««A*loa Far 

ii:-' 

orio Tsh 

Uaeuixi C M lut'd 
Ju5llTli3at! oii._ 


* 7 — - 

Dlstr lbtition/ 

Avallabliltf CtxlBB 
Avail aad/«r 
Dlst Spsolal 


\^\ 

z— 


<^1 



91-03985 


llll 


bi.sThrB'GT;::.N ■-,t,-tfmrnt a 

Approved for piihLic raloaaa; 
ClstilbutioD Unlimited 





THE Ada LANGUAGE 
SYSTEM/NAVY PROJECT 


Abstract 

The objective of the United States 
Navy's Ada Language System/ 
Navy (ALS/N) development is 
to provide a full production Ada 
capability for the Navv's 
AN/UYK-43, AN/UYK-44,and 
Pre-Planned Product Improve¬ 
ment (PPPI) AN/AYK-14. The 
ALS/N implements the Ada Pro¬ 
gramming Language as specified 
by MIL-STD-1815A and required 
by Department of Defense 
(DOD) Directives 3405.1 and 
3405.2. This Ada program gener¬ 
ation environment will improve 
programmer efficiency and 
reduce life cycle costs; while the 
Ada run-time environment will 
satisfy Navy-specific embedded 
application requirements such as 
performance, reliability, and 
fault-tolerance. The ALS/N 
Full-Scale Engineering Develop¬ 
ment (FSED) program supports 
the mandate or Ada for the 
Navy's standard embedded 
computers. 

Introduction 

The Navy's approach to provid¬ 
ing Ada technology has been 
accomplished by separate but 
related developments. The first 
development has resulted in the 
early availability of a pilot pro¬ 
duction Ada capability for the 
AN/UYK-44, called Ada/M(44). 
This prototype included an Ada 
compiler, linker, importer, 
exporter and run-time operating 
system (consisting of an execu¬ 


tive and library) for the 
AN/UYK-44. This development 
was completed in September 
1986 and was one of the fastest 
Ada run-time environments at 
that time. Subsequent develop¬ 
ments, that is the ALS/N FSED 
program, have resulted in a 
full production capabilities for 
the AN/UYK-43 (Ada/L), 
AN/UYK-44 (Ada/M), and PPPI 
AN/AYK-14 (Ada/M). 

The ALS/N FSED program con¬ 
sists of the Ada/L, Ada/M and 
Programming Support Environ¬ 
ment (PSE) developments which 
are being performed by multiple 
FSED contractors in two builds. 
The first build consists of the 
"single CPU" version of the 
AN/UYK-44 or PPPI AN/AYK- 
14 and "single/dual CPU" ver¬ 
sions of the AN/UYK-43. The 
second build of the ALS/N FSED 
program adds multiprocessing, 
multiprogramming, and dis¬ 
tributed Ada capabilities to the 
existing ALS/N products. The 
schedule is: 

UYK-43 & 44 Ada validated 
Dec 1988 

AYK-14 .^da available 
Mar 1989 

Ada/L & Ada/M complete 
Jun 1990 

PSE complete 
Sep 1990 

Basic ALS/N delivered 
Dec 1990 


According to Navy and DOD 
directives, systems required to 
use the ALS/N are any Navy 
applications being implemented 
after the December, 1988 valida¬ 
tion (i.e., new starts and any 
major software upgrades). The 
final delivery is being revalidat¬ 
ed, but note that multiprocess¬ 
ing, multiprogramming, and dis¬ 
tributed Ada are being incorpo¬ 
rated into the products as part of 
maintenance releases. 

Historical Perspective 

The U.S. Navy has historically 
standardized Mission Critical 
Computer Resources (MCCR). 
Their AN/UYK-7, AN/UYK-20, 
and AN/AYK-14 Standard 
Embedded Computers have, for 
years, supplied the computing 
power for Navy mission critical 
systems. Almost all of the Navy 
software for these machines is 
written in one high-order lan¬ 
guage, CMS-2, and supported by 
one programming environment 
— Machine Transportable AN/ 
Support Software (MTASS). The 
newer standard embedded com¬ 
puters that evolved, the 
AN/UYK-43, AN/UYK-44, and 
PPPI AN/AYK-14, were in 
development about the same 
time as the DOD Standard High 
Order Language Ada was being 
adopted. 

In keeping with their practice of 
standardization, the Navy put 
together a team from the Navv 
laboratories that represented 


2 






Nav'V users to specify require¬ 
ments for an Acia program gen¬ 
eration and run-time environ¬ 
ment targeted to the new 
machines. The result of this 
team's efforts, led by Naval Sea 
Systems Commanci (NAVSEA) 
PMS-412, was the ALS/N Sys¬ 
tem Specification. After the 
ALS/N FSED phase began with 
the awarding of a competitive 
contract to the Control Data Cor- 
poration/TRW/SYSCON team 
and a directed task to SofTech 
Inc., the support from Navy lab¬ 
oratories continued. 

The same people that developed 
the ALS/N System Specification 
became the Navy Design Review 
Group (DRG) w'hich reviews all 
contractual items and attends all 
the major design reviews. In 
particular, the Independent Veri¬ 
fication and Validation (IV&V) 
agent for the ALS/N FSED was 
the Fleet Combat Direction Sys¬ 
tems Support Activity, San Diego 
CA (FCDSSA, SD). Science 
Applications International Cor¬ 
poration (SAIC), Comsystems 
was the IV&V contractor for 
FCDSSA, SD. Government Fur¬ 
nished Information (GFl) sup¬ 
port of the ALS/N Common 
Ada Baseline (i.e., VAX/VMS 
host) is being performed by the 
Naval Underwater Systems Cen¬ 
ter, Newport R1 (NUSC, Npt). 

When the Navy DRG was 
preparing the ALS/N System 
Specification they polled the 
existing major programs for 
requirements. The emphasis was 
on finding performance require¬ 
ments for the ALS/N Run-Time 
Environment that would satisfy 
any existing Navy program and 
include a factor for growth into 
the 199()s. Shadow programs of 
selected functions from some of 


the major programs were initiat¬ 
ed in the laboratories using the 
AN/UYK-44 prototype run-time 
operating system to familiarize 
the Navy's Ada team with its 
use and to further prove the use¬ 
fulness of the ALS/N approach. 

The performance of the 
AN/UYK-44 prototype run-time, 
written in Ada, was measured 
and compared with the ALS/N 
System Specification require¬ 
ments, in conjunction with exist¬ 
ing real-time embedded Stan¬ 
dard Executives (SDEX) for 
CMS-2. The results showed the 
prototype to be one of the fastest 
Ada run-thne operating system 
in existence at that time. These 
measurements gave the Navy's 
Ada team confidence that the 
ALS/N FSED versions will meet 
the ALS/N System Specification 
requirements and support the 
Navy's mission critical embed¬ 
ded systems through the year 
2000 .' 

ALS/N FSED Baseline 

The ALS/N FSED Baseline was 
initially the Kernel Ada Pro¬ 
gramming Suppi'rt Environment 
(KAPSE) based product that was 
developed by the U S. Army's 
Ada Language System (ALS) and 
transferred to the U.S. Navy in 
late 1986/early 1987. Since the 
Navyv's mission has always been 
oriented towards developing an 
Ada run-time environment for 
the Navv standard embedded 
computers with a full Ada Pro¬ 
gramming Support Environment 
(APSE) not being required, 
extensive changes to what is now 
called the ALS/N Common Ada 
Baseline (CAB) were initiated. 

In particular, the Navy is only 
providing a Minimal Al^E suit¬ 
able for coding and testing (i.e., 
implementation phase', therefore 
we must look to other sources to 


provide tools/processes for all 
other development phases (e.g., 
specification and design). Cost 
estimates for incorporating a tool 
used in the ALS/N FSED, which 
is PSL/PSA, indicated that this 
would not be cost-effective if the 
Navy had to bear the burden 
atone. However, PSL/PSA is 
already hosted directly on VAX/ 
VMS, as are a targe number of 
other tools/processes that are 
commercially available. 

In a separate, but closely related 
activity, the ALS/N FSED con¬ 
tractors had been utilizing a 
VAX/VMS hosted and targeted 
capability in their implementa¬ 
tion of the retargets to Navw 
standard embedded computers. 
This capability, called the 
AdaVAX subsystem, had been 
the method by which the Ada 
compilation system for the 
Army's ALS was maintained 
between major releases. The 
FSED contractors requested that 
the AdaVAX subsystem be uti¬ 
lized for acceptance testing and 
delivery of the Navy retargets, 
thus officially changing the 
ALS/N FSED baseline. 

The Navy investigated the rami¬ 
fications of changing the ALS/N 
FSED baseline, agreed with the 
ALS/N FSED contractors' 
request for the reasons outlined 
above, and publicly announced 
this decision in July, 1987. As 
such, the ALS/N CAB consists 
of the AdaVAX subsystem and 
Program Library Manager (PLM) 
shown in figure (1). The ALS/N 
FSED products now consist of 
the Ada/M (AN/UYK-44 and 
AN/AYK-14), Ada/L 
(AN/UYK-43), and PSE subsys¬ 
tems being developed bv the 
ALS/N FSED contractors and 
available in conjunction with the 


3 







ALS/N CAB for delivery. 

The additional benefits of this 
FSED baseline change in the 
ALS/N CAB to the Navy are as 
follows: 

• Increased maintainability 
and transportability based 
on reduction in the 
amount of foreign code 
being utilized. 

• Reduced maintenance and 
rehost costs because a 
v^omplete layer of 
interfaces and associated 
tools have been removecf. 

• Continued concentration 
of the ALS/N FSED 
Contractors resources on 
the Ada run-time 
environment capabilities. 

Functional Description 

The ALS/N is basically a run¬ 
time environment for the target 
machines and a program genera¬ 
tion environment currently 


hosted on the VAX that produces 
code for the target machines, 
plus some additional tools as 
shown by figure (2). The ALS/N 
was developed in accordance 
with DOD-STD-2167A, and 
DOD-STD-2168, designed to sup¬ 
port large software development 
projects, and satisfy real-time 
embedded application require¬ 
ments. Many features were 
added that are the direct result of 
the Navy DRG's knowledge of 
Navv mis^iinn critical svstem 
requirements, such as fast inter¬ 
rupt entries, precisely timed 
interrupts/delays, asynchronous 
Input/Output support, and 
fault-tolerant damage control. 

Ada/L and Ada/M are the des¬ 
ignations for the ALS/N subsys¬ 
tems that include Ada program 
generation and run-time envi¬ 
ronments for the 32-bit 
AN/UYK-43 and the 16-bit 
AN/AYK-14 and AN/UYK-44; 
respectively. A common specifi¬ 
cation and design approach was 
taken for the Ada/L and Ada/M 


subsystems, with the objective to 
implement a run-time operating 
system that is usable by many 
different Ada programs simply 
by tailoring the run-time execu- 
tiye and configuiing the run¬ 
time library to the application. A 
standard run-time executiv'e, in 
conjunction with an extensible 
run-time library, will reduce 
costs throughout the life cycle of 
any Navy application. 

The architc>;ie,r.; of the N:.vy 
standard computers present a 
challenge for the Ada language 
in that these machines all ha\’e a 
small virtual address space. The 
AN/UYK-44 and AN/AYK-14 
can only address 64K words, and 
although the AN/UYK-43 can 
addre.ss 312K words using indi¬ 
rection and indexing, only 64K 
words can be directly addressed 
in a static manner. Flowever, this 
problem of limited addressability 
was solved with two different 
approaches; (1) a software 
approach, called the "phase 
model, " that is described below; 




TEXT 

EDITOR 


PROGRAM 
LIBRARY 
MANAGER 
(SLIB, GLIB) 


TEXT 

EDITOR 


■N 


Ada 

SOURCE -► 

CODE 


ADAVAX 
COMPILER 


LNKVAX 

LINKER 



O = DATA I I = AOAVAX TOOL 



VAX TOOL 


on 


= HOST TOOL 


FIGURE 1 Software Development with AdaVAX 








Host 


Target 


PROGRAM 

Ada/L 

Ada/L 

LIBRARY 

LANG PROC 

RUNTIME 

MANAGER 

TOOLS 

ENVIRON 

COMMON 

VAX/VMS 

VAX/VMS 

Ada 

LANG PROC 

RUNTIME 

BASELINE 

TOOLS 

ENVIRON 

PROGRAM 

Ada/M 

Ada/M 

SUPPORT 

LANG PROC 

RUNTIME 

ENVIRON 

TOOLS 

ENVIRON 


FIGURE 2. ALS/N FSED Tool Set 


and (2) the development of 
Extended Memory Reach (EMR) 
versions of the AN/UYK-43 and 
the AN/UYK-44, These EMR 
machines support the phase 
model, but also provide specific 
hardware enhancements for 
"phasing" that includes multiple 
sets of memory mapping regis¬ 
ters (called "memory groups") 
which are addressable in the task 
state (unprivileged) and, there¬ 
fore, do not require executive 
service to be changed by the 
application. 

Phase Model 

An analytical model was devel¬ 
oped that divides the total physi¬ 
cal address space into a set of 
virtual address spaces, each 
called a "phase." A single phase 
is made of two address regions: a 
shared memory area, termed 
"phase common," and a "phase 
unique" portion. The Ada pro¬ 
gram can be specified and 
designed without regard to this 
"phase model". The application 
designer thus does not have to 
consider partitioning into phases 
as part of the design because the 


partitioning is performed during 
implementation. The Ada pro¬ 
gram is mapped onto t^his virtual 
"phased machine" as part of the 
linking process. The objective of 
the ALS/N approach is to create 
a program generation environ¬ 
ment for software-first develop¬ 
ment that is independent of any 
underlying hardware. 

Additionally, a stack model was 
developed to reduce overhead 
associated with "cross-phase" 
calls in the limited address space 
machines. Each task is assigned 
a separate stack, and the stack 
"travels" from phase to phase 
enabling cross-phase calls, cross¬ 
phase data reference, and 
cross-phase rendezvous with a 
minimum performance penalty. 
The user is able to specify which 
packages share phase space with 
other packages to optimize 
address space usage and efficien¬ 
cy of operation. This stack 
model is an elegant solution to 
the phase model implementa¬ 
tion of Ada programs. 

Input/Output Support 

The Input/Output (I/O) sup¬ 
ported within the ALS/N 
includes: low-level, synchronous. 


and asynchronous support for a 
variety of peripherals such as the 
AN/USQ-69 terminal, the 
AN/USH-26 and RD-358 tape 
drive, or the AN/UYK-3 disk 
drive. Support for MIL-STD- 
1553B, MIL-STD-1397 (NTDS) 
Fast/Slow Channel, and RS232 
bus protocol has been provided. 
If the required I/O support is not 
available, a template device driv¬ 
er is provided as a model from 
which the user can develop 
application specific I/O support. 

Fast Interrupt Entries 

The Ada language provides for 
interrupt entries. An interrupt 
entry allows an Ada task to asso¬ 
ciate an entry with some external 
activity (e.g., a device) that will 
cause an interrupt. Interrupt 
entries, however, are not always 
capable of supporting real-time 
embedded systems due to the 
overhead imposed by Ada 
semantics. Fast Interrupt Entries 
(FIEs) allow efficient support for 
time critical interrupt processing 
and does not ignore Ada seman¬ 
tics. The concept of FIEs is to 
impose restrictions on the Ada 
features that are supported with¬ 
in the rendezvous so that the 
overhead associated with deliv¬ 
ering the interrupt to the applica¬ 
tion can be significantly reduced. 
Also, by requiring the FIE to 
always be mapped (i.e., address¬ 
able by the memory mapping 
registers), additional savings in 
responding to an interrupt are 
possible. 

Precisely Timed Interrupts/ 
Delays 

Precisely Timed Interrupts (PTIs) 
provide a mechanism for per¬ 
forming time-based scheduling, 
entirely within the framework of 


5 



an Ada priority pre-emptive 
scheduler. PTls consist of a logi¬ 
cal collection of virtual timers 
that interrupt on a recurrent, 
nondrifting basis. These virtual 
timers, which are associated with 
underlying hardware timers, can 
be used to provide the function¬ 
ality of cyclic schedulers, but 
with greater robustness and flex¬ 
ibility. Precisely Timed Delays 
(PTDs) utilize the Ada DELAY 
statement and also operate with¬ 
in the framework of an Ada pri¬ 
ority pre-emptive scheduler. 

This facility depencis upon 
delaving the task per the seman¬ 
tics of Ada, but immediately 
readving the task for execution at 
the expiration the DELAY. 

The PTD provides for time- 
dependent behavior, while the 
PTI provides for time-critical 
behavior in the Ada program 
since tasks responding to 
interrupts execute at a priority 
higher than all other tasks. 

Fault-Tolerant Damage 
Control 

The ALS/N design makes dam¬ 
age control facilities available to 
application developers so that 
the Ada program can be 
apprised of hardware or soft¬ 
ware failures and take action that 
the application deems appropri¬ 
ate. For example, degraded 
mode operation after casualty 
reconfiguration. The ALS/N 
Run-Time Environment handles 
a hardware of software fault by 
isolating the event and notifying 
the Ada program through a 
Damage Control Task. It is the 
intent of the ALS/N implemen¬ 
tation to expand the initial dam¬ 
age control facilities to perform 
certain types of fault-tolerant 
recovery actions for the user 
when failures occur. 


Multiprogramming 

The majority of the technical effort 
for implementing multiprogram¬ 
ming involves getting more than 
one program in execution within 
a single machine. Implementing 
the communications mechanism 
between programs, be they on 
the same, or a distributed node, 
is described as part of distributed 
Ada. The basic features of multi¬ 
programming include the ability 
to create, delete, suspend, and 
resume a program (and all of its 
associated tasks) .vilh a single¬ 
tiered scheduler where program 
priority is added to individual 
task priority to provide an over¬ 
all system prioritv- 

Unfortunatelv, multi-program¬ 
ming and FIEs are mutually 
exclusiv’e capabilities in the base¬ 
line machines because FIEs are 
always placed in phase common 
and therefore always mapped to 
function. However, for the EMR 
processors, FIEs can still be 
implemented provided thev are 
m.apped in one of the memory 
groups. 

Distributed Ada 

For some time, there haw been 
discussions about the lack of a 
basic "mailbox" facility in Ada. 
The classic paradigm of mailbox¬ 
es describes a nonblocking mes¬ 
sage passing between the server 
and client tasks, provided that 
sufficient buffer space is avail¬ 
able. Such a facility can be pro¬ 
vided using normal Ada seman¬ 
tics, but there is a relatively high 
overhead associated with such 
an implementation. A mailbox 
facility is the form of asyn¬ 
chronous message passing uti¬ 
lized, with some limitations and 
using normal Ada semantics, to 
provide a basic communication 
mechanism for both distributed 
Ada and multiprogramming. 

6 


While the asynchronous message 
passing paradigm is the unifying 
mechanism to address communi¬ 
cations between Ada programs 
whether on the same processor 
or distributed onto multiple pro¬ 
cessors, only the EMR processors 
can be supported because of 
addressability and performance 
requirements. The user is 
required to instantiate a generic 
package within each Ada pro¬ 
gram desiring to communicate in 
such a manner and guarantee 
that there is a prt ['c- correspon¬ 
dence between parametei type.', 
(there can be no type checking 
between different Ada pro¬ 
grams). In all other respects, the 
communications appear to be the 
calling of an entry in one Ada 
program from another Ada pro¬ 
gram. 

Minimal Ada Programming 
Support Environment 

The ALS/N FSED phase is com¬ 
posed of two distinct efforts: the 
Minimal Ada Programming Sup¬ 
port Environment (MAPSE) and 
the associated ALS/N Run-Time 
Environment. The MAPSE sup¬ 
ports the development and 
deployment of real-time applica¬ 
tion software for the Navv's stan¬ 
dard embedded computers. The 
major functions provided are: 
Ada compilation and linking/ 
exporting facilities to generate 
applications for the target com¬ 
puters, interactive symbolic 
debugging and performance 
measurement facilities for execu¬ 
tion analysis, general-purpose 
text editor and formatter, config¬ 
uration management identifica¬ 
tion tools and report generator, a 
command language processt'r, 
and the associated environment 
database to support these func 
tions. 




The ALS/N language processing 
tools provide a full production 
capability to translate Ada 
source code into executable 
images for the AN/UYK-43, 
AN/UYK-44, or PPPI AN/AYK- 
14 targets and includes the EMR 
versions of these machines. 

These tools consist of compilers, 
linkers, exporters, importers, list¬ 
ing tools, stub generators, and 
the Program Library Manager 
(PLM) as shown by figure (3). 
The language processing tools 
support the generation of 
machine code to run in either 
task (unprivileged) mode or 
executive iprivileged) mode as 
part of the Executive Option 
capability. The Executive Option 
capability allows the application 
developer to logically include 
portions of any Ada program, 
such as a specialized I/O driver, 
in the ALS/N Run-Time Envi¬ 
ronment. 

Ada compilers for the ALS/N 
process Ada source program 
units by checking for correct 
Ada syntax/semantics and 
translating source code into 
linkable object code. These 
compilers support the full Ada 
Programming Language, 
MIL-STD-1815A, and their 
implementations include size 
representations, representation 
specifications, interrupt entry 
addresses, and low-level I/O 
support. In addition, implemen¬ 
tation-defined PRAGMAS are 
recognized and processed, which 
provide applications with real¬ 
time capabilities. The ALS/N 
compilers share common base¬ 
line components for checking 
correctness of Ada code and for 
managing Ada program 
libraries, which contributes to a 
consistent and user-friendly 


interface to all ALS/N language 
processing tools. 

The ALS/N linkers resolve exter¬ 
nal and internal references in the 
linkable object code to produce 
linked object code. Object code 
may be linked into phases, which 
are analogous to the target 
machine's virtual memory, and 
then into programs, which are 
analogous to the target 
machine's physical memory. 

The ALS/N linkers allow Ada 
programs to take full advantage 
of all physical memory resources 
in a target machine. The linkers 
also support the incremental 
linking of phases within Ada 
programs, thus reducing the 
overhead of rebuilding an appli¬ 
cation. As well as resolving 
external references, the linkers 
bind all required Run-Time 
Library support to the Ada pro¬ 
gram. Run-Time Library support 
may be selectively bound so that 
only the support that is actually 
needed by the application is 
included in an executable image. 

Linked object code is processed 
by the ALS/N exporters to bind 
the Run-Time Executive with the 
application and perform a final 
layout of the object code into 
target memory. The exporters 
also implement a flexible mecha¬ 
nism allowing an application 
developer to take advantage of 
target machine resources (e.g., 
assignment of physical memory, 
I/O channels, etc.) for the appli¬ 
cation. The exported executable 
image is an Ada program that 
needs no further processing to 
run on a target machine or under 
a simulator. The exporters will 
produce a bootstrap image on 
tape or disk, which is acceptable 
to the target machine bootstrap 
loader; or a Target System Eor- 
mat file, which is acceptable to 
the MTASS simulators or 


Programmer Oriented AN/Link 
(PORTAL) products. 

The ALS/N importers provide 
the capability of implementing 
Ada package and procedure bod¬ 
ies in assembly code. The 
importer will format the assembly 
implementation in a manner 
acceptable to the linker. It is a 
user responsibility to ensure that 
hand-written assembly code con¬ 
forms to ALS/N Generated Code 
Conventions prior to importation. 
Additionally, a foreign code 
importer for CMS-2 is available to 
interface with the Ada program. 
This tool supports the reuse of 
existing Navy application code. 

Human readable listings may 
be produced by invoking the list¬ 
ing tools. Compiler listings 
showing the translation of Ada 
code to object code, linker list¬ 
ings showing the layout of code 
into phases or programs, and 
exporter listings showing the 
final binding of code to machine 
locations are among the listings 
that can be produced. Finally, 
the stub generators will aid Ada 
developers by accepting com¬ 
piled Ada package or procedure 
specifications and automaticallv 
producing stubbed-out Ada 
package or procedure bodies cor¬ 
responding to the specifications. 

The integrated set of tools and 
associated support within the 
Programming Support Environ¬ 
ment (PSE) consists of: 

• Command Language 
Processor - the user need 
only know one command 
language to access all the 
tools and mov'e around in 
the hierarchical file system 
of the environment 
database. 


7 



• Configuration Management 
Tools - the user has powerful 
tools for version and source 
maintenance, software prob¬ 
lem report tracking, documen¬ 
tation updating, and a report 
generator for clisplaying this 
information. 

• Document Processing Tools - 
the user has powerful tools for 
general-purpose text editing 
(both line and screen) and for¬ 
matting (including macro 
expansion). 

• Environment Database Man¬ 
ager - the associated hierarchi¬ 
cal file system, consisting of 
directories, files, attributes, 
and associations; in support of 
the tools outlined above. 

Riin-Time Environment 

The Run-Time Environment 
(RTE) functions support the 
Navy's real-time embedded mis¬ 
sion critical requirements and 
have been designed utilizing 


stale-t)f-the-art computing tech¬ 
niques to deliver a reliable and 
efficient capability. The RTE 
developments have been per¬ 
formed in parallel with the asso¬ 
ciated MAPSE developments. 
The RTE consists of a standard 
executive and configurable 
librarv that can be tailored to 
meet application requirements, 
stand-alone and host/target 
interactive debuggers, perfor¬ 
mance measurement tools for 
execution analysis, and dynamic 
program loaders. The RTE can 
be separated into the Run-Time 
Operating System and Run-Time 
Application Support for the 
AN/UYK-43, AN/UYK-44 or 
'^PPI AN/AYK-14and includes 
the EMR versions of these 
machines. 

Run-Time Operating System 

The Run-Time Operating System 
(RTOS) provides the Run-Time 
Executive, the Navy's standard 
executive for the Ada program¬ 
ming language, which can be 


tailored to each Navy applica¬ 
tion. The RTOS also provides the 
Run-Time Library, which is con¬ 
figurable and extendable for the 
Ada program. RTOS capabilities 
include multiprocessing, multi¬ 
programming, distributed Ada, 
and provisions to have user-sup¬ 
plied executive code (i.e.. Execu¬ 
tive Option user routines) for 
specific application needs. Note 
that the Executive Option capa¬ 
bility is the basis of the Run-Time 
Operating System implementa¬ 
tion. 

Run-Time Executive 

The Run-Time Executive 
(RTExec) runs in the executi\ e 
state (privileged and protected) 
and controls all of the hardware 
resources of the AN/UYK-43, the 
AN/UYK-44, and the PPPI 
AN/AYK-14. TheRTExec 
responds to either Run-Time 
Library requests for an executive 
service or requests from the user- 
supplied Executive Option rou¬ 
tines. These Executive Service 



8 

















Requests (ESRs) or direct 
requests from Executive Option 
routines are presented to the 
RTExec through the 
RTEXEC_GATEWAY by the ESR 
Interrupt, with a corresponding 
ESR code. When the requested 
action is completed, control is 
returned via the normal inter¬ 
rupt return mechanism of fhe 
target computer (i.e., reloading 
the saved general purpose regis¬ 
ters, the program status registers, 
and the program counter). 

Run-Time Library 

The Run-Time Library (RTLib) 
runs in the task state (unprivi¬ 
leged and unprotected) and 
responds to all Ada program 
requests, except for Executiv'e 
Option user requests. The RTLib 
either acts upon the request itself 
or directs the request to the 
RTExec through the 
RTEXEC GATEWAY. Note that 
user-supplied Executive Option 
routines have the capability to 
either utilize the features of Ada 

go directlv to the RTExec and 
RTLib interfaces when required 
bv the application. The Execu¬ 
tive Option capabilitv is the 
foundation on winch all iif the 
Run-Time Application Support 
functionality is implemented. 

Run-Time Application 
Support 

The Run-Time Application Sup¬ 
port (RTAS) augments the Run¬ 
Time Operating System with 
capabilities to enhance the de\'el- 
opment and deployment of 
application programs as shown 
by figure (4). The RTAS consists 
of a Run-Time Loader (RTLoad), 
Run-Time Debugger (RTDebug) 
that cooperates with the 


Embedded Target Debugger, and 
Run-Time Performance Measure¬ 
ment Aids (RTAids) that oper¬ 
ates in conjunction »vith the 
Embedded Target Profiler. 

Run-Time Loader 

Dynamic, static, and overlay 
loading is supported bv the Run¬ 
Time Loader. In conjunction 
with the RTOS, the RTLoad pro¬ 
vides applications with the capa¬ 
bility to efficiently manage the 
resources of the target computer, 
support of run-time assignment 
of physical memc>ry locations to 
load modules, and includes a 
mechanism for dynamic recon¬ 
figuration of an application to 
accommodate changes in the 
compufng environment. 

Run-Time Debugger 

Access to all hardware resources 
of the AN/UYK-43, AN/UYK-44 
and PPPI AN/AYK-14 not 


restricted to the RTOS is provid¬ 
ed by the Run-Time Debugger. 
Operating completely within the 
target computer and requiring 
only a terminal device, the 
RTDebug equips the application 
developer with a povv'erful inter¬ 
active tool for Ada program 
checkout. Eadlities provided 
within the RTDebug include: set¬ 
ting and clearing breakpoints, 
examining and modifying regis¬ 
ters or memory, blocking and 
unblocking tasks, and tracing call 
stacks. In addition, the Run¬ 
Time Debugger supports the 
host/target relationship with the 
Embedded Target Debugger. 

Embedded Target Debugger 

Symbolic access to all code and 
data elements of an executing 
Ada program is available 
through the Embedded Target 
Debugger. This user-oriented 
symbolic debugging tool is 
designed to support efficient 



9 




application development in a 
laht)ratorv environment. 
Reference to source code and 
data through the svmbols 
defined in the Ada program iso¬ 
lates users from the details of the 
Ada language implementation, 
thus alknving the de\ eloper to 
more producti\'elv debug appli¬ 
cations. f'urthermore, resources 
of the host and target are utilized 
in a hardware testbed to ensure 
an efficient and reliable ooera- 
tii>n of the Embedded Target 
Debugger. 

Run-Time Performance 
Measurement Aids 

Detailed run-time performance 
anab sis c)f application programs 
is performed through use of 
the Run-Time Terformance Mea¬ 
surement Aids and Embedded 
Target Profiler. The RTAids 
works in concert with the RTOS 
to collect data characterizing the 
performance of an executing 
program. CTillected data is then 
prc'cessed at a later time bv the 
Embedded Target Profiler 
producing histograms or "pro¬ 
files ' of the application's perfor¬ 
mance characteristics. 

Conclusions 

The AES/N ESED program rep- 
.esents a multi-million dollar 
government investment man¬ 
aged bv the Naval Sea Systems 
Command (NAVSEA) P'MS-412 
in a Minimal Ada Program Sup¬ 
port Environment and ALS/N 
Run-Time Environment to imple¬ 
ment Ada and meet the goals set 
for it bv the Department of Navy. 
The AES/N is designed to reduce 
Software Eife Cvcle Maintenance 
(SLCM) costs and tii suppt>rt 
Mission Critical Computer 
Resources. The rei>uiicm<'nts set 


for the ALS/N insure that these 
goals are realized and include 
factors for performance that will 
reflect the challenge of the l‘^4(fs. 

The competitive ALS/N ESED 
Contract U>r Ada/L, PSE tools, 
and integratimi of Ada/M into 
the ALS/N was awarded to the 
Control Data /TRW/SYSCON 
team. The Ada/M ESED was 
de\ ek>ped as a directed task tt> 
SotTech, Inc. and continued 
dex elopment is being performed 
bv Control Data. The Si.C.M 
agent for ALS/N ESED is Elect 
Combat Direction System Sup¬ 
port Actix itv, San Diego 
{FCDSSA, SD) and Science 
Applications International Corp., 
Comsx’stems is providing SLC.M 
Testing & Evaluation under a 
competitix eh' awarded omnibus 
contract. FCDSSA, SD is respon¬ 
sible for distributing releases to 
all ALS/N users, collecting Soft¬ 
ware Problem/ Change Reports 
as they are submitted and pro- 
\ iding (.orrections (and updates) 
to the ALS/N users. It is the 
goal of NAVSEA PMS-412 to 
make the ALS/N ESED products 
available to all Navv application 
dex elopers at no charge. 

The ALS/N project is the current 
pha'^*' of Navv Ada development 
for the AN/UYK-43, AN/UYK- 
44, or Pre-Planned Product 
Improvement (PPPI) AN/AYK- 
14 and includes the EMR ver¬ 
sions of these machines. This 
phase began in September 1W3 
and will be completed bv 
December 1W(). (Note that 
enhancements to the ALS/N in 
support of the PPPI for the 
AN/UYK-4.3and AN/UYK-44, 
started in September l%S and 
will be finished bv December 
1SS2.) Its evolution has been: 

• The Army's /\LS - target 
independent portions hax e 


been retained as appropriate 
to the ALS/N; rights to 
products are co-owned b\' the 
Government and SotTech: 
commercial work has been 
retrofitted into the \'.\X/VMS 
host and target; theCiox ern- 
ment continues to improx e the 
ALS/N CAB. 

• The AdaM(44) prototx pe -- 
retarget to .AN / LA K-44 with 
near production quality com¬ 
piler was dex eloped; proto¬ 
type ti>r .ALS/ N run-time 
capabilities targeted to embi'd- 
ded systems (e g., memorx 
management preci^elx' tinn’d 
delax s, 1,0 subsx stem) \\ a^ 
dex eloped: the prototype run¬ 
time was written in the .Ada 
language itself and was one of 
the fastest Ada run-time oper¬ 
ating sx'stems ax ailable. 

• The ,ALS/ N ESED — produc- 
tion-qualitx compilers for 
AN/L YK-4.3, AN/LA K-44, 
and PPPI AN /AYK-14: all 
issiK's raised bv Ada/M(44) 
prototype dex elopment (i.e., 
compiler code qualitx, RTDS 
algorithms, linker / exporter 
tools, ell- ), are resolved; PSE 
tools and Embedded Target 
Debuggers/Profilers are pro- 
X ided. 

Based on the sizing and timing 
test results gathered bv the 
ALS/N ESED contractor team 
and the I\’&\ contractor, ail 
ALS/N Sxstem Specification per¬ 
formance requirements are 
achiex able. .Additionallx, an 
independent assessment of the 
ALS/N has reported perfor- 
manxe information comparable 
to the A1,S/N test results and has 
prox ided many x aluable insights 
from a user perspx'ctix e to 
impnne the ALS/N C AB, 


10 




Ada/L, Ada/M, and I’SH sub¬ 
s' .sterns. 

Major onhancoinonis to the 
ALS/N will be made to support 
PPPI ot the standard embedded 
computers, which are being 
upgraded to meet emergent 
Naev requirements. The 
improc ements are the Enhanced 
Processor (EP) AN/UYK-44, the 
High Performance Processor 
(HPP) AN/UYK-43, and the 
Very High Speed Integrated Cir¬ 
cuit (VHSIC) AN/AYK-14. The 
EP and HPP instruction set archi¬ 
tecture permits direct addressing 
of all memory in task state and 
provides for flexible prt)tection 
mechanisms. These features 
make the EP and HPP machines 
better targets for execution of 
Ada pr(>grams within the 
ALS/N implementation. The EP 
and HPP improvements will also 
provide for faster execution than 
the current machines (3-20 MIPS 
versus 1-4 MIPS). The VHSlC 
improvement provides faster 
processors for the AN/ AYK-14 
(3-10 Mil’S versus 1-2 MU’S) and 
can be configured as two inde¬ 
pendent processors with 1 
MBvte of onboarci memory. 

The ALS/N has been specified 
and designed for portability. The 
first scheduled rehosts will be to 
the Extended Memory Reach 
(EMK) AN/UYK-4.3, under 
SHAKE/43, and VAX, under 
Portable Operating System for 


UNIX (POSIX). The relu'st to the 
EMR AN/UYK-43, running 
SHARE/43, will support Navy 
users thriiughout the extended 
life of their applications bv using 
the EMR AN/UYK-43 as both 
their host (for deveU'pment) and 
target computer. The rehost to 
V'AX, running POSIX, will allo\s- 
integration of ALS/N priKlucts 
with other Government and 
commercial software develop¬ 
ment en\'irc»nments. 

In summarv, the ALS/N is a 
Navv user-driven system 
designed and implemented to 
support real-time embedded 
mission critical applicatii>ns. The 
flexible ALS/N Run-Time Envi¬ 
ronment allows tailoring bv 
diverse mission critical computer 
systems thus saving ci'sts in the 
development phase ot the life 
cycle. The portable Minimal Ada 
Programming Support Environ¬ 
ment is available to reduce costs 
in the maintenance phase of the 
software life cycle. The require¬ 
ments for the ALS/N provided 
bv the Na\ v Design Review 
Croup have taken into account 
future needs of the Navy's 
embedded Ada applicatit>ns. 
NAV'SEA and Control Data Cor¬ 
poration, the prime contractor 
hir ALS/N, ha\ e developed the 
technology h>r a program gener¬ 
ation and run-time enc ironment 
that will support Ada in real¬ 
time embedded mission critical 
systems through the year 2()()() 


References 

IlSl^A] Reference Manual tor 
the Ada Prc'gramming L.in- 
guage, ANSI/MlL-STD-1S| 
Department of Defense, |anuar\', 
1M83. 

ISPECSSI ,-\da Lan.guage S\ s- 
teni/Na\’v System Specification, 
NA\'SEA; 2M julv IMS8. 

|2lfi7A| Defense S\'steni Sot* 
ware De\ elopnient, 
DOD-STD-2l:i7.A, Department ot 
Defense, 24 Eebruarc 14,ss 

|2lnS| Defense S\ stem Softw are 
Quality Program, DClD-STD- 
21(-)S, Department of Defense, 

24 April 14SS. 


This paper was presented at the 
eigth annual cimference on .Ada 
Technologc, March 14'-)(1, jp 
Atlanta Georgia and is reprinted 
here with the permission of the 
author, William 1.. Wilder of 
Na\al Sea Systems Command, 
PMS-412. 


II 



985 386 9/86 

387 

9/87 

3/88 

9/88 

3/89 9/89 

3/90 

9/90 

3/91 

9/9t 3/92 

9 92 12/92 

MAJOR 





A 

A 

A 

A 

A 

A A 

ENHANCEMENTS 





▼ 

OPTIONIS) 

EXERCISED 

INITIAL 

EMR 

CAPABILITY 

1 

EMR 

SUPPORT 

COMPLETE 

initial 

VHSIC EP 
capability 

4 ^ 

ENHANCED 
ALS N 

completec 


BASIC 

MILESTONES 


REHOST 

STARTED 


REHOST 

available 


CONTRACT 

AWARD 




ALSN 

baseline 

CHANGED 


A ^ A 


A'O 

. dual . 

RTAS 

4 CPU (14) 4 

AVAILABLE 

4 BASIC 

VALIDATED I 


alsn 

1 completed 


ALS N 
BAoculNE 
FSTARl iSHpn 


SINGLE 4 dual 
CPU (A3 4 44) 
VALIDATED 


MULTI¬ 

PROCESSING 

AVAILABLE 


DISTRIBUTED ADA 
AND 

MULTI-PROGRAMMING 

AVAILABLE 


Overall ALS/N FSED Milestones 


For more information, please vvrite or call; 

Naval Sea Systems Command PMS 412 
Department of the Navy 
Washington, DC 20362-5101 

OR 

Control Data Government Systems Resource Center 
8140 26th Avenue South 
Minneapolis, MN 55425 
(612) 853-5000 

Control Data offices are located in principal cities throughout the world. 
Specifications subject to change without notice. 


©Control Data Corporation 2/89 GSKCG-26fi 


GSRCG-266 Cover 


®Ada is a registered trademark of the United States Government (Ada loint Program Office) 







