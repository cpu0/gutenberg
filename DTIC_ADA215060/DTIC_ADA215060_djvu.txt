IINTI AsMFTFn 


r' • 


AD-A 215 060 


2 Oi*« f ntt’ttf 

HION PAGE 




d*st» movi 
»r r ow :ov-.r*t ■>; ro».^ 


|2. SOvT ACC(S&10H NS ll NEC1R1EN1 S CATALOG NUNj.R 




s lYPt Of »L*0ei t RERIOD COVERED 

Ada Compiler Validation Summary Report STeleSoft, 01 Aug. 1989 to oi Aug. 1990 
TeleGen2 Sun-4 Ada Development System, Version 1.4, Sun g R£RfOAfiNG t)«s HE rok 7 uj*-1 r 
M icrosystems Sun-4/280 Workstation(Host & Target), 890801W ..10134 


1 . AuImORu) 6. CONTRACT 0* 6AANT NjMEtAiW 

Wrigfift-Patter son AFB 
Dayton, OH, USA 


t. H Af 0AN1NG 0RGAM2AT10N AND ADORE S$ 

Wright-Patterson APB 
Dayton, OH, USA 


10. RR0G®*“ £i£N[nt. Rr;:e:t. tas* 
AR£A A NOR* UNIT NjNttRS 


U CON'RO.LlNC 0^ ICE «.*“£ AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 2D301-3081 


II. MONITORING AGENCY NA“E l ADDRESSED d'Ht't nr from Controlling Other) 

Wright-Patterson AFB 
Dayton, OH, USA 


16. OISTRIBjTION STATEMENT (of thu Kepon) 


12. REPORT DAU 


is. SECL'RJTt Class (of t*it rtpsni 

UNCLASSIFIED 


IS*. I^CiASSjflCATlON 00»SCRA01NS 

N/A 


Approved for public release; distribution unlimited. 


17. 01S*RIB^7J0N (of tn, tbr.'tn fntf •, 3 m 8 S(k 2C If 0 nr Uo’r* Rtpsn) 

UNCLASSIFIED 


DTi 




18. I£»nDRD$ EConr. rut on t d< f ntttut'y »ng,etrniity fc, blot* numbrr) j 

* 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20 . AES1RAC t (Cont'^wf 0 " i'Ot if nr tun'/ »ng idr nr.R) b> bi or* number) 

TeleSoft, TeleGen2 Sun-4 Ada Development System, Version 1.14, Wright-Patterson AFB 
Sun Microsystems Sun-4/280 Workstation (SPARC Processor) under Sun UNIX 4.2, Release 
4.0.3 (Host & Target), ACVC 1.10. 


DD ***** 1473 zditjon of 1 ndv es is obsolete 

1 MM 73 S/N 0102-Lf*0)4*660] 


// 


n oio 2 -tf-oi«-e 6 oi _ UNCLASSIFIED _ 

SECURITY CLASS) 11CA110N Of THIS RAGE <*Wn£>«t tlntftd: 

















Ada Compiler Validation Summary Report: 


Compiler Name: TeleGen2 Sun-4 Ada Development System, Version 1.4 
Certificate Number: 890801V1.10134 


Host: Sun Microsystems Sun-4/280 Workstation 

(SPARC Processor) under 
Sun UNIX 4.2, Release 4.0.3 

Target: Sun Microsystems Sun-4/280 Workstation 
(SPARC Processor) under 
Sun UNIX 4.2, Release 4.0.3 


Testing Completed 1 August 1989 Using ACVC 1.10 
Customer Agreement Number: 89-06-14-TEL 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


^ _— 

Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 







AVF Control Number: AVF-VSR-309.0989 

89-06-14-TEL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890801W1.10134 
TeleSoft 

TeleGen2 Sun-4 Ada Development System, Version 1.4 
Sun Microsystems Sun-4/280 Workstation 


Completion of On-Site Testing: 
1 August 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Uright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-6 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-7 

3.7.3 Test Site.3-8 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 



Accession For 

NTIS GRA&I 
DTIC TAB 
Unannounced 
Just if lootlon_ 


By- 

Distribution/ 

Availability Codes 
'Avail and/or 
'Diet I special 


□ □ 




















CHAPTER 1 
INTRODUCTION 


This Validation Summary Report '(VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability, tRCVG)^ An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 



Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 











INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior i3 allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 1 August 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 






INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-l8l5A, February 1983 and ISO 8<S52-1$87. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1988. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 






INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report tneir results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no error, are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


1-4 




INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are r.o capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a lib’-’ry—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 










INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 





CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: TeleGen2 Sun-4 Ada Development System, Version 1.4 

ACVC Version: 1.10 

Certificate Number: 890801V1.1013 * 

Host Computer: 

Machine: Sun Microsystems Sun-4/280 Workstation 

(SPARC Processor) 

Operating System: Sun UNIX 4.2 

Release 4.0.3 

Memory Size: 24 Megabytes 

Target Computer: 

Machine: Sun Microsystems Sun-4/280 Workstation 

(SPARC Processor) 

Operating System: Sun UNIX 4.2 

Release 4.0.3 

Memory Size: 24 Megabytes 


2-1 






CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D560013.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nesced to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined type 
LONG FLOAT in package STANDARD. (See tests B86001T..Z (7 
tests).) 


c. Expression evaluation. 

The order in which expressions are eva uated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Some of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B) 

(3) This implementation uses no extra bits for extra precision and 


2-2 








CONFIGURATION INFORMATION 


uses no extra bits for extra range. (See test C35903A.) 

(4) Sometimes NUMERIC_ERROR is raised when an int-pger literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round away from 
zero. (See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is row»d away 
from zero. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 

(2) NUMERIC_ERROR is raised when a null array type with 

INTEGER'LAST + 2 components is declared. (See test C36202A.) 

(3) NUMERIC ERROR is raised when a null array type with 

SYSTEM.MAX_INT + 2 components is declared. (See test 

C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR .hen the array type is declared. (See 
test C52103X.) 


2-3 








CONFIGURATION INFORMATION 


(5) A packed tvo-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared- (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures 
except for library subprograms. (See tests LA3004A..B (2 
tests), EA3004C..D (2 tests), and CA3004E..F (2 tests).) 


2-4 










CONFIGURATION INFORMATION 


i. Generics 

(1) Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

(2) If a generic unit body or one of its subunits is compiled or 
recompiled after the generic unit is instantiated, the unit 
instantiating the generic is made obsolete. The obsolescence 
is recognized at binding time, and the binding is stopped. 
(See tests Ca 2009C, CA2009F, BC3204C, and BC3205D.) 

(3) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E (2~tests), CE2102N, and CE2102P.) 

(4) Modes IN_FILE, 0UT_FILE, and INOUT_FILE are supported for 
DIRECT_IO. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN FILE and 0UT_FILE are supported for text files. (See 
tests CE3102E and CE3I02I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECTIO. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 

(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 

CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

(10) Temporary sequential files are given names and not deleted 
when closed. (See test CE2108A.) 


2-5 









CONFIGURATION INFORMATION 


(11) Temporary direct files are given nam^s and deleted vhen 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and not deleted vhen 
closed. (See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files vhen reading only. (See 
tests CE2107A..E (5 tests), CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated vith each 

external file for direct files vhen reading only. (See tests 
CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated vith each 

external file for text files vhen reading only. (See tests 
CE3111A..E (5 tests), CE3114B, and CE3115A.) 


2-6 








CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 350 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for 6 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


Passed 

Inapplicable 
Vi thdravn 
TOTAL 


TEST CLASS 

A B C D E 
126 1126 1987 17 22 

3 12 328 0 6 

1 2 35 0 6 

130 1140 2350 17 34 


TOTAL 
L_ 

45 3323 

1 350 

0 44 

46 3717 


3-1 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

572 

533 

242 

172 

99 

158 

332 

132 

36 

250 

321 

278 

3323 

Inappl 

14 

77 

147 

6 

0 

0 

8 

0 

5 

0 

2 

48 

43 

350 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 

WITHDRAWN TESTS 





The 

following 44 

tests were 

withdrawn 

from ACVC Version 1.10 at 

the time of 

this 

validation: 







E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 


CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 


CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 


CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83C 


CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 


ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 


CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


CE3301A 

CE3411B 






See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 350 tests were inapplicable for the 
reasons indicated: 


a. 


The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y 
C35708L..Y 
C45421L..Y 


C35705L..Y 
C35802L..Z 
C45521L..Z 


C35706L..Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 
C45321L..Y 
C45621L..Z 


3-2 





TEST INFORMATION 


C45641L..Y C46012L..Z 

b. This implementation does not support 'SMALL clause. Therefore the 
following 21 tests are not applicable: 

A39005E C87B62C CD1009L CD1C03F CD1C04C 

CD2A53A..E CD2A54A..D CD2A54G..J CD2D11A CD2D13A 

ED2A56A 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_INTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

d. C35508I, C35508J, C35508M, and C35508N are not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE => 0, 
TRUE => 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 

e. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

f. The following 16 tests are not applicable because this 
implementation does not support a predefined type LONG_INTEGER: 


C45231C 

C45304C 

C45502C 

C45503C 

.C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

CD7101F 

B52004D 

C55B07A 

B55B09C 

B8600IV 

g. C45231D, B86001X, and 

CD7101G are 

not applicable because 


implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER. 

h. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

i. C86001F is not applicable because, for this implementation, the 
package TEXT_I0 is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

j. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

k. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONC_FLOAT, or SHORT FLOAT. 


3-3 






TEST INFORMATION 


l. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable because 

this implementation does not support separate compilation of 
generic specifications, bodies, and subunits, if an instantiation 
is given before compilation of its bodies or subunits. The 
created dependency is detected at bind time. 

m. LA3004B, EA3004D, and CA3004F are not applicable because this 

implementation does not support pragma INLINE for library 
subprograms. 

n. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

o. CD2A61I and CD2A61J are not applicable because this implementation 

does not support size clauses for array types, which imply 

compression, with component types of composite or floating point 

types. This implementation requires an explicit size clause on 
the component type. 

p. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

q. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_I0 with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

r. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 


s . 

CE2102D is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode 

for SEQUENTIAL_: 

10 . 


t. 

CE2102E is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

0UT_FILE mode 

for SEQUENTIAL 

JO. 


u. 

CE2102F is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

INOUT_FILE mode for DIRECT_I0. 


V. 

CE2102I is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode 

for DIRECT_ 

.10. 



w. 

CE2102J is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 0UT_FILE mode for DIRECT_I0. 

x. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_I0. 

y. CE21020 is inapplicable because this implementation supports RESET 


3-4 





TEST INFORMATION 


z. CE2102P is inapplicable because this implementation supports OPEN 
with 0UT_FILE mode for SEQlfENTIAL_IO. 

aa. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQUENTIAL_IO. 

ab. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT_FILE mode for DIRECT_I0. 

ac. CE2102S is inapplicable because this implementation supports RESET 
with INOUT_FILE mode for DIRECT_I0. 

ad. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FIL£ mode for DIRECT_I0. 

ae. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_IO. 

af. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIRECT_I0. 

ag. CE2102V is inapplicable because this implementation supports RESET 
with OUT_FILE mode for DIRECT_IO. 

ah. CE3102E is inapplicable because this implementation supports 

CREATE with IN_FILE mode for text files. 

ai. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

aj. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

ak. . CE3102I is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for text files. 

al. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

am. CE3102K is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for text files. 

an. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
sequential files. The proper exception is raised when multiple 
access is attempted. 


3-5 






TEST INFORMATION 


ao. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 

because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ap. CE3111B, CE3111D..E (2 tests), CE3U4B, and CE3115A are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default si 2 e of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated'-by the test (such as raising 
one exception instead of another). 

Modificctions were required for 6 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

BA3006A BA3006B BA3007B BA3008A BA3008B BA3013A 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the TeleGen2 Sun-4 Ada Development System was submitted to the AVF by 
the applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3-6 





TEST INFORMATION 


3.7.2 Test Method 

Testing of the TeleGen2 Sun-4 Ada Development System using ACVC Version 
1.10 was conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardvare and software components: 

Host computer: Sun Microsystems Sun-4/280 Workstation 

(SPARC Processor) 

Host operating system: Sun UNIX 4.2, Release 4.0.3 

Target computer: Sun Microsystems Sun-4/280 Workstation 

(SPARC Processor) 

Target operating system: Sun UNIX 4.2, Release 4.0.3 

Compiler: TeleGen2 Sun-4 Ada Development System, 

Version 1.4 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values vere customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests vere run on the Sun Microsystems 
Sun-4/280 Workstation. Results were printed from the host computer. 


3-7 






TEST INFORMATION 


The compiler was tested using command scripts provided by TeleSoft and 
reviewed by the validation team. The compiler was tested using all default 
option settings except for the following: 

OPTION EFFECT 


-0 D Optimizer switch is equivalent to "-P -R -I -A" where: 

-P indicates that one or more of the subprograms 
being optimized could be called by an exterior 
subprogram. 

-R indicates that one or more of the subprograms 
interior to the unit/collection being optimized 
could be called recursively by an exterior 
subprogram. 

-I enables inline expansion of those subprograms 
marked with an inline pragma or generated by the 
compiler. 

-A enables automatic inline expansion of any 
subprogram called from only one place, as well as 
those marked by an inline pragma or generated by 
the compiler. 

-L Generate interspersed source-error listing. 

-m Produce executable code for main unit 


Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at San Diego CA and was completed on 1 August 1989. 


3-8 








APPENDIX A 

DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of 
Conformance concerning the TeleGen2 Sun-4 Ada 
Development System. 





DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: ASD SCEL. VVright-Patterson AFB OH 45433-6503 
Ada Compiler Validation Capability (AC VC) Version: 1.10 


Base Configuration 

Base Compiler Name: TeleGen'2 Ada Development System 

Version: 1.4 


Host Architecture ISA: Sun Microsystems Sun-4 '280 Workstation 

(SPARC Processor) 

OS A: VER = : Sun UNIX Version 4.2. Release 4.0.3 


Target Architecture ISA: Same as Host 

OS & VER Same as Host 

Implementor's Declaration 


I. the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI, MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and. as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner's corporate 
name. 



I. the undersigned, representing TELESOFT, take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host target performance are in compliance with the Ada Language 
Standard ANSI/M1L-STD-1815A. 






APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleGen2 Sun-4 Ada Development System, Version 1.4, 
as described in this appendix, are provided by TeleSoft. Unless 
specifically noted otherwise, references in this appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, ares 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type L0NG_FL0AT is digits 15 range -8.98846567431158E+307 .. 

8.98846567431158E_307; 

type DURATION is delta 6.10351562500000E-005 range -86400.0 .. 86400.0; 


end STANDARD; 


B-l 









Appendix F 


1. Implementation Dependent Pragmas 

pragma COMMENT(<string_literal>); 

It may only appear within a compilation unit. The pragma comment has 
the effect of embedding the given sequence of characters in the object 
code of the compilation unit. 

pragma IMAGES(<enumeration_type>,Deferred) or 

pragma LMAGES(<enumerat ion _type>,Im mediate); 

It may only appear within a compilation unit. The pragma images 
controls the creation and allocation of the image table for a specified 
enumeration type. The default is Deferred, which saves space in the 
literal pool by not creating an image table for an enumeration type 
unless the ’Image, ’Value, or ’Width attribute for the type is used. 

If one of these attributes is used, an image table is generated in the 
literal pool of the compilation unit in which the attribute appears. 

If the attributes are used in more than one compilation unit, more than 
one image table is generated, eliminating the benefits of deferring 
the table. 

pragma INLINE (<subprogram_name>); 

It functions as defined by the Language Reference Manual with one 
restriction. This compiler does not support pragma INLINE on library 
level subprograms. 

pragma INTERRUPT(Function_Mapping); 

It may only appear immediately before a simple accept statement, a 
while loop directly enclosing only a single accept statement, or a 
select statement that includes an interrupt accept alternative. The 
pragma interrupt has the effect that entry calls to the associated 
entry, on behalf of an interrupt, are made with a reduced call overhead. 

pragma LINKNAME(<subprogram_name>, <string_literal>); 

It may appear in any declaration section of a unit. This pragma must 
also appear directly after an interface pragma for the same 
<subprogram_name>. The pragma linkname has the effect of making 
stringjiteral apparent to the linker. 

pragma SUPPRESS_ALL; 

It may appear anywhere that a Suppress pragma may appear as defined by 
the Language Reference Manual. The pragma Suppress_All has the effect 
of turning off all checks defined in section 11.7 of the Language 
Reference Manual. The scope of applicability of this pragma is the 
same as that of the pre-defined pragma Suppress. 


B-2 





Appendix F, Cont. 


2. Implementation Dependent Attributes 

INTEGER ATTRIBUTES 
’Extended_Image Attribute 

Usage: X , Extended_Image(Item,Width,Base,Based,Space_IF_Positive) 

Returns the image associated with Item as per the Text_Io definition. 
Tne Text_Io definition states that the value of Item is an integer 
literal with no underlines, no exponent, no leading zeros 
(out a single zero for the zero value) and a minus sign if negative. 

If the resulting sequence of characters to be output has fewer than 
Width characters then leading spaces are first output to make up 
the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 

Parameter Descriptions: 

Item — The user specifies the item that he wants the 

image of and passes it into the function. This 
parameter is required. 

Width — The user may specify the minimum number of 

characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 

Base — The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 


B-3 









Appendix F, Cont. 


Based — The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space_lf_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 

Then the following would be true: 

X’Extended_Image(5) = "5" 

X’Extended_Image(5,0) = "5” 

X’Extended_Image(5,2) = " 5" 

X’Extended_Image(5,0,2) = "101" 

X’Ext»*nded_lmage(5.4,2) = " 101" 

X’Lxtended_Image(5,0,2,True) = "2#101#" 

X'ExtendedlmagefS,0,10,False) = "5" 

X’Extended_Image(5,0,10,False,True) = " 5" 
X’Extended_Image(-1.0,10,False,False) = ”-l” 
X’Extended_Image(-1.0,10, False, True) = "-1" 
X'Extended_Image(-l,1,10,False,True) = "-1" 
X’Extended_Image(-l,0,2,True,True) = "-2#1#" 
X’Extended_Image(-l,10,2,True,True) = " -2#1#" 


B-4 










Appendix F, Cont. 


'Extended Value Attribute 


Usage: X’Extended_V'aiue(Item) 

Returns the value associated with Item as per the Text_Io definition. 
The Text_Io definition states that given a string, it reads an 
integer value from the beginning of the string. The value returned 
corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended_Value("5") = 5 

X’Extended_Value(" 5") = 5 

X’Extended_Value(’'2#101#") = 5 

X’Extended_Value("-l") = -1 

X’Extended_Value(" -1") = -1 


B-5 





Appendix F, Cont. 

’Extended_VVidth Attribute 

Usage: X’Extended _Width( Base. Based.Space_If_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute 
is a function that may have multiple parameters. This attribute 
yields the maximum image length over all values of the type 
or subtype X. 

Parameter Descriptions: 

Base — The user specifies the base for which the width 

will be calculated. If no base is specified 
then the default (10) is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for based is 
specified then the default (false) is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 


Examples: 


Suppose the following subtype was declared: 


Subtype X is Integer Range -10.. 16; 


Then the following would be true: 


X'Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’E,. r . ended" 

X’Extended 

X’Extended 


Width 

Width(lO) 

Width(2) 

Width(10,True) 

Width(2,True) 

Width( 10,False, True) 
Width( 10,True,False) 
Width( 10,True,True) 
Width(2,True,True) 
Width(2,False,True) 


= 3 - "-10" 

= 3 - "-10" 

= 5 - "10000” 

= 7 - "-10#10#" 

= 8 - ” 2 # 10000 #" 

= 3 ~ " 16" 

= 7 - "-10#10#" 

= 7 - " 10# 16#" 

= 9 - " 2# 10000#" 
= 6 ~ " 10000 " 


B-6 





Appendix F, Cont. 


ENUMERATION ATTRIBUTES 


’Extended Image Attribute 

Usage: X’Extended_Image(ltem,Width,Uppercase) 

Returns the image associated with Item as per the Text Io definition. 
The Textlo definition states that given an enumeration literal, 
it will output the value of the enumeration literal (either an 
identifier or a character literal]. The character case parameter 
is ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more that one parameter. The parameter 
Item must be an enumeration value. The image of an enumeration 
value is the corresponding identifier which may have character case 
and return string width specified. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Width — The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) is assumed. If the Width 
specified is larger than the image of Item, then the 
return string is padded with trailing spaces; if the 
Width specified is smaller than the image of Item then 
the default is assumed and the image of the enumeration 
value is output completely. 

Uppercase — The user may specify whether the returned string is in 
uppercase characters. In the case of an enumeration 
type where the enumeration literals are character 
literals, the Uppercase is ignored and the case 
specified by the type definition is taken. If no 
preference is specified then the default (true) is 
assumed. 


B-7 



Appendix F, Cont. 


Examples: 

Suppose the following types were declared: 

Tvpe X is (red, green, blue, purple): 

Type Y is (V, 'B\ V, 'D’); 

Then the following would be true: 


X’Extended Image(red) 

="RED" 

X’Extended Image(red, 4) 

= "RED " 

X'Extended Image(red.2) 

="RED" 

X’Extended lmage(red,0,false) 

= "red" 

X’Extended Image(red, 10,false) 

= "red 

Y’Extended Image('a’) 

= "’a’" 

Y’Extended Image(’B’) 


Y’Extended Image(’a’.6) 

= "V " 

Y’Extended lmage(’a’,0,true) 

= "’a"' 


’Extended_Value Attribute 
Usage: X’Extended_Value(ltem) 

Returns the image associated with Item as per the Text_Io definition. 
The Text lo definition states that it reads an enumeration value 
from the beginning of the given string and returns the value of 
the enumeration literal that corresponds to the sequence input. 

(LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT ERROR is raised. 


Parameter Descriptions: 

Item -- The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of X. 


B-8 





Appendix F, Cont. 


Examples: 

Suppose the following type was declared: 

Type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended Value("red") 
X’Extended_Value(" green") 
X’Extended_Value(" Purple") 
X’Extended_Value(" GreEn ") 


’Extended Width Attribute 

Usage: X’Extended_Width 

Returns the width for subtype of X 

For a prefix X that is a discrete type or subtype; this attribute 
is a function. This attribute yields the maximum image length over 
all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function 
returns the width of the largest (width) enumeration literal 
in the enumeration type specified by X. 

Examples: 

Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Z is (Xl, X12, X123, X1234); 

Then the following would be true: 

X’Extended Width = 6 - "purple" 

Z’Extended "Width = 5 - "X1234" 


= red 
= green 
= purple 
= green 


B-9 









Appendix F, Cont. 

FLOATING POINT ATTRIBUTES 
’Extended_lmage Attribute 

Usage: X’Extended Image(ltem,Fore,Aft.Exp,Base,Based) 

Returns the image associated with Item as per the Text Io definition. 
The Textlo definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-1) is assumed. If based notation is 
specified the trailing ’#’ is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 


B-10 












Appendix F, Cont. 


Base -- The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 


Then the following would be true: 


X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 

X’Extended 


_Image(5.0) 

Image(5.0,l) 

Image(-5.0,1) 

_Image(5.0,2,0) 
Image(5.0,2,0,0) 
_Image(5.0,2,0,0,2) 
Image(5.0,2,0,0,2,True) 
Image(5.0,2,2,3,2,True) 


= " 5.0000E-00" 

= "5.0000E-+-00" 

= "-5.0000E+00" 

= " S.OE-rOO" 

= " 5.0" 

== " 101 . 0 " 

= " 2 # 101 . 0 #" 

= "2#l.l#E+02" 


’Extended_Value Attribute 
Usage: X’Extended_Value(Item) 

Returns the value associated with Item as per the Text_lo definition. 
The Text_Io definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then reads the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT ERROR is raised. 


B-1L 







Appendix F, Cont. 


Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X’Extended_Value("5.0") = 5.0 

X’Extended_Value("0.5El") = 5.0 

X’Extended_VaIue( ,, 2#1.01#E2'') = 5.0 


’ExtendedDigits Attribute 
Usage: X’ExtevdedDigits(Base) 

Returns the number of digits using base in the mantissa of model 
numbers of the subtype X. 


Parameter Descriptions: 

Base — The user may specify the base that the subtype is 
defined in. If no base is specified then the default 
(10) is assumed. 


Examples: 

Suppose the following type was declared: 


Type X is digits 5 range -10.0 .. 16.0; 


Then the following would be true: 
X’Extended_Digits = 5 


B-12 







Appendix F, Cont. 

FIXED POINT ATTRIBUTES 
'Extended_Image Attribute 

Usage: X’Extended_Image(Item.Fore.Aft.Exp.Base.Based) 

Returns the image associated with Item as per the Text lo definition. 
The Textlo definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 


For a prefix X that is a discrete type or subtype; this attribute 
«js a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the '#’ if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-1) is assumed. If based notation is 
specified the trailing ’#’ is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 


B-13 








Appendix F, Cont. 

Base -- The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended Image(5.0) 

X’Extended_Image(5.0,l) 

X’Extended Image(-5.0,1) 

X’Extended Image(5.0.2.0) 

X’Extended _Image(5.0,2,0,0) 

X’Extended_Image(5.0.2.0,0,2) 
X’Extended_Image(5.0,2.0.0,2,True) 

X’Extended _Image( 5.0.2,2.3,2,True) 


'Extended Value Attribute 
Usage: X’Extended_Value(Image) 

Returns the value associated with Item as per the Text Io definition. 
The Text Io definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then read the string 
according to the syntax of a real literal. The return value is 
that which <orresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or st btype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAIWT ERROR is raised. 


= " 5.00E-00" 

= "5.00E-*-00" 

= "-5.00E-+-00" 

= " 5.0E+00" 

= " 5.0” 

= " 101 . 0 " 

= " 2 # 101 . 0 #" 

= "2#l.l#E-r02" 


B- 14 






Appendix F, Cont. 


Parameter Descriptions: 

Image — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended Value("5.0") = 5.0 

X’Extended_Value("0.5El") = 5.0 

X'Extended Value("2#1.01#E2") = 5.0 


'ExtendedFore Attribute 
Usage: X’Extended_Fore(Base,Based) 

Returns the minimum number of characters required for the integer 
part of the based representation of X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-15 







Appendix F, Cont. 


Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’ExtendedFore = 3 — "-10" 

X'Extended_Fore(2) =6 — " 10001" 


’Extended_Aft Attribute 
Usage: X’Extended_Aft(Base,Based) 

Returns the minimum number of characters required for the fractional 
part of the based representation of X. 

Parameter Descriptions: 

Base -- The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Aft =1 - ”1" from 0.1 

X’Extended_Aft(2) = 4 - "0001" from 2#0.0001# 


B-16 




Appendix F, Cont. 

3. Specification of Package SYSTEM 

With Standard Declarations; 

PACKAGE System is 

PACKAGE STD RENAMES Standard Declarations; 

TYPE Address IS PRIVATE; 

TYPE Name IS (TELEGEN2); 

System_Name : CONSTANT name := TELEGEN2; 

Storage_Unit : CONSTANT 8; 

MemorySize : CONSTANT := 2**28-l; 

— System-Dependent Named Numbers: 

Minlnt : CONSTANT :« -2**31; 

Maxlnt ; CONSTANT :«= -i-2**31-l; 

MaxDigits : CONSTANT : = 15; 

MaxMantissa : CONSTANT :« 31; 

Finedelta : CONSTANT :» 1.0 / (2.0 ** Max Mantissa); 
Tick : CONSTANT 1.0 / (2.0 ** 14); 

-- Other System-Dependent Declarations 

Max_Object_Size : CONSTANT := Max_Int; 
Max_Record_Count : CONSTANT := Max_Int; 
Max_Text_Io_Count : CONSTANT := Max_Int-l; 
Max_Text_Io_Field : CONSTANT := 1000; 

SUBTYPE Priority IS integer range 0 .. 63; 

Null_address : CONSTANT address; 

TYPE subprogram _value IS 
RECORD 

Procedure Location: STD.Integer 32; 

Static Link : STD.Integer_32; 

END RECORD; 

PRIVATE 

TYPE Address IS new STD.integer_32; 

Null_address: CONSTANT Address := 0; 

END System; 


B-I7 






Appendix F, Cont. 

4. Restrictions on Representation Clauses 

The hardware needs a minimum of 32 bits to represent floating point 
and access types. Therefore, specifying a size of less than 32 bits cannot 
be handled simply by the underlying hardware (LRM 13.1 (10)). 

The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer types ’SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for composite types ’SIZE attribute (LRM 13.2(a) 

Size clauses for composite types are rejected when the 
specified size implies compression of composite components. 

Length Clauses: for access types ’STORAGESIZE attribute (LRM 13.2(b)) 

Length Clauses: for tasks types ’STORAGE SIZE attribute (LRM 13.2(c)) 

Enumeration Clauses: for character and enumeration types other than 
boolean (LRM 13.3) 

Record representation Clauses (LRM 13.4) with following constraints: 

- Each component of the record must be specified with 
a component clause. 

- The alignment of the record is restricted to mod 2. 
word (16 bit)aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries and external subprograms 
(pragma INTERFACE used) (LRM 13.5(a)(c)) 

This compiler does NOT support the following representation clauses: 

Length Clauses: for fixed point types ’SMALL attribute (LRM 13.2(d)) 

Enumeration Clauses: for boolean (LRM 13.3) 

Address Clauses: for packages, task units, and non-external Ada 
subprograms (LRM 13.5(b)) 


B-18 








Appendix F, Co at. 


5. Implementation dependent naming conventions 

There are no implementation-generated names denoting implementation 
dependent components. 

6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted as the 
first storage unit of the object. 

7. Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between any types or subtypes unless 
the target type is an unconstrained record or array type. 

8. I/O Package Characteristics 

Sequential_IO and Direct IO cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXTIO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2 147_483 646; 

In TEXT IO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..I000; 

In TEXT IO, the Form parameter of procedures Create and Open is not 
supported. (If you supply a Form parameter with either procedure, it 
is ignored.) 


B-19 








APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning _ 

$ACC_SIZE 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 

$BIG_ID2 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


Value 

32 


(1..199 => 'A', 200 => '1') 


(1..199 => 'A', 200 => '2') 


(1..99 => 'A', 100 -> '3', 

101..200 «> 'A') 


C-l 






TEST PARAMETERS 


Name and Meanine Value 


SBIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$ BIG REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

SBIGSTRINGl 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


(1..99 => 'A', 100 => '4' , 

101..200 => 'A') 


(1..197 => 'O', 198..200 => "298") 


(1..195 => 'O', 196..200 => "690.0") 


(1 => 2..101 -> 'A', 102 => '"') 


(1 *> 2..100 «> 'A', 101 «> '1', 

102 »> '"') 


(1..180 => ' ') 

2_i4 7 _483_646 

268435455 

8 


C-2 








TEST PARAMETERS 


Name and Meaning 


$DEFAULT_SYS NAME 

The value of the constant 
SYSTEM.SYSTEM NAME. 


$DELTA_D0C 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT 10.FIELD'LAST. 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 


$FL0AT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT FLOAT, or 
LONG FLOAT. 


$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

SHIGHPRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 


$ILLEGAL_EXTERNAL_FILE_NAME1 

An "external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL FILE_NAME2 

An external file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 


Value __ 

TELEGEN2 

2#1.0#E-31 

1000 

N0_SUCH_TYPE 

N0_SUCH_TYPE 

100_000.0 

131_073.0 

63 

BADCHAR*'/? 

/NONAME/DIRECTORY 

-2147483648 






TEST PARAMETERS 


Name and Meaning _ 

$INTEGER_LAST 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOV_PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

SMANTIS SA_DOC 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN__LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX_INT+ 1. 

$MAX_LEN_INT_BASED_LITERAL 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be $MAX_IN LEN 
long. 


Value _ 

2147483647 

2147483648 

- 100 _ 000.0 

-131_073.0 

0 

31 

15 

200 

2147483647 

2_!47_483_648 

(1..2 -> "2:", 3..197 -> 'O', 

198..200 =■> "11s") 


C-4 











TEST PARAMETERS 


Name and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal rial based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be $MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONGINTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAXINT. 

$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1..3 => ”16:", 4..196 => '0' , 

197..200 => "F.E:") 

(1 => 2..199 => 'C', 200 => 

-2147483648 

32 

N0_SUCH_TYPE_AVAILABLE 

TELEGEN2 

16#FFFFFFFE# 

268435455 


C-5 






TEST PARAMETERS 


Name and Meaning _ Value _ 

$NEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other - permitted value, then 
use value of SYSTEM.STORAGE_UNIT. 

$NEW_SfS NAME TELEGEN2 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task, object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 6.10351562500000E-005 

A real literal whose value is 
SYSTEM.TICK. 


C-6 







APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 







WITHDRAWN TESTS 


tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 


o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERR0R is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 









WITHDRAWN TESTS 


q. CE3111C: 

This 

tes t 

requires certain 

behavior, 

when two files 

are 

associated with 
Ada standard. 

the 

same external file 

, that is 

not required by 

the 

r. CE3301A: 

This 

test 

contains several 

calls 

to END OF LINE 

and 


END_OF_PAGE that have no parameter: these calls were intended tc 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check, that LAY0UT_ERR0R io raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 






