AVF Control Number; AVF-VSR-608.0695 
Date VSR Conpleted; 23 June 1995 

95-03-29-(2!S 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 950615W1.11387 
Green Hills Software, Inc. 

Green Hills Optimizing Ada Conpiler, Version 1.8.7B 
SPARCstation 10 under SunOS, Release 4.1.3 => 
Heurikon R4600 Laguna under Virttorks, 5.1 


(Final) 


Prepared By: 

Ada Vali^tion Facility 
88 CG/SCTL 

Wright-Patterson AFB OH 45433-5707 


19950724 147 



REPORT DOCUMENTATION PAGE 


Form Approved 
0MB No. 0704-0188 


Public reporting burden for this coliection of Information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data 
sources, gathering and maintaining the data needed, and reviewing the coliection of information. Send comments regading this burden, to Washington Headquarters Service, 
Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington, VA 22202-4302, and to the Office of Information and Reguiatory 
Affairs, Office of Management and Budget, Washington, DC 20503. 


1. AGENCY USE ONLY (Leave blank) 


2. REPORT DATE 

June 23,1995 


3. REPORT TYPE AND DATES COVERED 

Final 


4. TITLE And SUBTITLE: 

Ada Compiler Validation Summary Report, VC# 950615W1.11387 
Green Hills Software, Inc. - Compiler Name: Green Hills Optimizing Ada 
Compiler, Version 1.8.7B 

6. AUTHOR(S) 

Systems Technology Branch, Standard Languages Section 


5. FUNDING NUMBERS 




7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility 

Language Control Facility, 645 C-CSG/SCSL 
Area B, Building 676 
Wright-Patterson AFB, OH 45433-6503 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 
Ada Joint Program Office, Defense Information System Agency 
Code JEXEV, 701 S. Courthouse Rd., Arlington, VA 
22204-2199 

11. SUPPLEMENTARY NOTES 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 


10. SPONSORING/MONITORING 
AGENCY REPORT NUMBER 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 


12b. DISTRIBUTION CODE 


Approved for public release; Distribution is unlimited. 


13. ABSTRACT (Maximum 200 words) 

This Ada implementation was tested and determined to pass ACVC 1.11. Testing was completed on 15 June 1995. 
Host Computer System: SPARCstation 10 (under SunOS, Release 4.1.3) 

Target Computer System: Heurikon R4600 Laguna (under VxWorks, 5.1) 

14. SUBJECT TERMS 15. NUMBER OF PAGES 

Ada Programming Language, Ada Compiler Validation Summary Report, Ada Compiler 30 

Validation Capability, Validation Testing, Ada Validation Office, Ada Validation Facility, 16 price 
ANSI/MIL-STD-1815A, Ada Joint Program Office 


OF REPORT 

UNCLASSIFIED 

NSN 7540-01-280-5500 


18. SECURITY CLASSIFICATION 

19. SECURITY CLASSIFICATION 

OF THIS PAGE 

OF ABSTRACT 

UNCLASSIFIED 

UNCLASSIFIED 


UNCLASSIFIED 


DTI@ QUALITY mSPECTED 8 





Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was conqpleted on 15 June 1995. 

Compiler Name and Version; Green Hills Optimizing Ada Con 5 )iler, 

Version 1.8.7B 

Host Ccmpiter System; SPARCstation 10 

under SunOS, Release 4.1.3 

Target Ccmpater System; Heurikon R4600 Laguna 

under VoMorks, 5.1 

Customer Agreement Number; 95-03-29-<3IS 


See section 3.1 for any additional information about the testing environment. 

^ a result of this validation effort. Validation Certificate 950615W1.11387 
is awarded to Green Hills Software, Inc. ihis certificate expires on March 
31, 1998. 


This report has been reviewed eind is approved. 


Ada Validation Facility 
Brian P. Andrews 
AVF Manager 
88 CG/SCTL 

Wright-Patterson AFB OH 


45433-5707 






DECLARATION OF CONFORMANCE 

Customer: Green Hills Software, Inc. 

Ada Validation Facility. Hq 645 C-CSG/SCSL 

Standard Languages Section 

Systems Technology Branch 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Compiler Name and Version: Green Hills Optimizing Ada compiler 

Version 1.8.7B 

Host Computer System: Sun Sparc Station 10 running SunOS 4.1.3 
Target Computer System: Heurikon R4600 Laguna running VxWorks 5.1 

Customer's Declaration 

I, the undersigned, representing Green Hills Software, Inc., declare 
that Green Hills Software, Inc., has no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A in the 
implementation listed in this declaration. I declare that Green Hills 
Software, Inc. is the OWNER of the above implementation and the 
certificates shall be awarded in the name of the OWNER'S corporate name. 



Daniel O'Dowd, President 
Green Hills Software, Inc. 
510 Castillo Street 
Santa Barbara CA 93101 


Date: May 10, 1995 




TABLE OF CXSITENTS 


CHAPTER 1 INTRODUCTIC»J 

1.1 USE OF THIS VALIDATirai SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES .1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATICXJ DEPENDENCIES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MCBIFICATIOJS.2-4 

CHAPTER 3 PROCESSING INFORMATIOI 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B CC»IPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i 












CHAPTER 


1 


INTRODUCTION 


The Ada inplementation described above was tested according to the Ada 
Validation Procedures [Pro95] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). Tbis Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. For 
any technical terms used in this report, the reader is referred to [Pro95J. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89). 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and conpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject inplementation has no 
nonconformities to the Ada Steindard other than those presented. Copies of 
this report are available to the public from the AVF vdiich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to* 

Ada Validation Organization 

Conputer eind Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Nanxial for the Ada Programming Langiiage/ 

ANSI/MIL-STD-1815A, February 1983 and I^ 8652-1987. 

[Pro95] Ada Compiler Validation Procedures ^ Version 4.0, Ada Joint 
Program Office, Janiiary 1995. 

[tKJ89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Con{>liance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executeible. Class B and 
class L tests are expected to produce errors at con^ile time and link time, 
respectively. 

The executable tests are written in a self-checking mcurmer and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some conqpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these xuiits are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for exanple, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional cfwnges may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



INTRODUCnai 


For each Ada inplementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdravm tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of the 
custcanized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target ccmputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body vAiich provides policy and 

Program guid^ce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body v^ich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer 
System 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or part 
of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
meinipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone \mit or may consist of several inter-connected 
units. 


1-3 




INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdravm 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individiial or corporate entity vdio enters into an agreement 
with an AVF vdiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for «^ich 
validation status is realized. 

A computer system vdiere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

A computer system vrfiere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro95]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming leuiguage and of issuing a certificate for 
this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to loeet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 



CHAPTER 


2 


IMPLEMENTATIC»J DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. Ihe 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C35507L 

C35507N 

C35507O 

C35508M 

C35508N 

C35702A 

C43004A 

C45114A 

C45346A 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

C83026A 

B83026B 

C83041A 

C97116A 

C98003B 

BA2011A 

CC1223A 

BC1226A 

CC1226B 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A41E 

CD2A87A 

CD2B15C 

CD4022D 

CD4024B 

CD4024C 

CD5111A 

CD7004C 

ED7005D 

AD7201A 

AD7201E 

CD7204B 

CD9005A 

CD9005B 

CDA201E 

CE2119B 

CE2205B 

CE2405A 

CE3411B 

CE3412B 

CE3607B 

CE3814A 

CE3902B 



C32203A 

C34006D 

C35507K 

C35507P 

C35508I 

C35508J 

C35702B 

C37310A 

B41308B 

C45612A 

C45612B 

C45612C 

B49008B 

A54B02A 

C55B06A 

B83022H 

B83025B 

B83025D 

B85001L 

C86001F 

C94021A 

CB7001A 

CB7001B 

CB7004A 

BC3009B 

BD1B02B 

BD1B06A 

CD2A23E 

CD2A32A 

CD2A41A 

BD3006A 

BD4008A 

CD4022A 

CD4024D 

CD4031A 

CD4051D 

CD7005E 

AD7006A 

CD7006E 

AD7206A 

BD8002A 

BD8004C 

CE2107I 

CE2117A 

CE2117B 

CE3111C 

CE3116A 

CE3118A 

CE3607C 

CE3607D 

CE3812A 


2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives vrfiich are irrelevant 
for a given Ada in 5 )lementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




IMPLEMEMIATirag DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H checJc f'^r the predefined type 

SHORT_FliCiAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LC»K3_FLCAT, or SHORT_FIiCAT; for this 
implementation, there is no such type. 

C45423A, C45523A, and C45622A check that the proper exception is raised 
if MACHINEjOVERFLOWS is TRUE and the results of various floating-point 
operations lie outside the range of the base type; for this 
implementation, MACHINE CMERFI/3WS is FALSE. 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX MANTISSA is less than 47. 


D64005G uses 17 levels of recursive procedure calls nesting; this level 
of nesting for procedure calls exceeds the capacity of the conpiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 


CA2009C and CA2009F check vdiether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic xmits as allowed by 
Al-00408 and Al-00506 such that the compilation of the generic unit 
bodies makes the instantiating ijnits obsolete. (See section 2.3.) 

CD1009C checks v^ether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

a)2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 


2-2 



IMPLEHEMATIOl DEPEM}ENCIES 


AE2101H, EE2401D, and EE2401G use instantiations o£ package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults; these insteuitiations are rejected ly this ccatpiler. 

The tests listed in the following table check that USE_^ERROR is raised 
if the given file operations are not supported for the gTven combination 
of mode and access method; this inplementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TE3CT 10 

CE3102I 

CREATE 

OUT FILE 

TE3Cr 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


The following 16 tests check operations on sequential, direct, and text 
files vhen multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERROR is raised when this 
association is attenpted. 

CE2107B..E C:E2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 


2-3 



IMPLEMENTATION DEPENDENCIES 


CE3304A checks that SET_LINE^LENGTH and SET PAGE_LENGTH raise USE_E!®OR 
if they specify an inapproprTate value for Bie external file; there are 
no ina^ropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUTJERROR v^en the value of the page 
number exceeds COUNT'LAST; for this in?>lementation, the value of 
COUNT'LAST is greater than 150000, niciking the checking of this objective 
inpractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 7 tests. 

■^e following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Stemdard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

CA2009C and CA2009F were graded inapplicaible by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that imit's body; as allowed by AI-00408 and 
AI-00506, the conpilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic acttjal parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, the 
generic bodies are compiled after the units that contain the instantiations, 
and this inplementation creates a dependence of the instantiating units on 
the generic ijinits as allowed by AI-00408 cuid AI-00506 such that the 
conpilation of the generic bodies mzikes the instantiating units obsolete—no 
errors are detected. The processing of these tests was modified hy 
re-coitpiling the obsolete units; all intended errors were then detected by 
the conpiler. 


2-4 



CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIROJMENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada inplementation, contact; 

Jim Gleason 

Green Hills Software, Inc. 

510 Castillo St. 

Santa Barbara CA 93101 
(805) 965-6044 


For sales information about this Ada inplementation, contact: 

David Chandler 

Green Hills Software, Inc. 

510 Castillo St. 

Santa Barbara CA 93101 
(805) 965-6044 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it .'rocesses each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, vrtiether the test is applicable or inapplicable; otherwise, the Ada 
Inplementation fails the ACVC [Pro95]. 


3-1 



PROCESSING INFORMATION 


For all processed tests (ina^licable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inplementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


a) Total Number of i^plicable Tests 3791 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 74 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 275 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host conqputer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were compiled and linked on the host conpjter system, as 
appropriate. The executable images were transferred to the target conputer 
system the Ethernet, and run. The results were captured on the host 
computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. No explicit options were 
used for testing this implementation. 


Test outp'-t, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 



APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for custonizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. Ihe 
parameter values are presented in tvro tables. The first table lists the 
values that are defined in terms of the meucimum input-line length, vdiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, v^ere "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 200 — Value of V 

$BIG_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V=> '2') 

$BIG_ID3 (1..V/2 => 'A') & '3' & 

(1..V-1-V/2 => 'A') 

$BIG_ID4 (1..V/2 =.> 'A') & '4" & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 => '0") & "298" 

$BIG_REAL_LIT (1..V-5 => '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'A') & '1' & 

$BLANKS (1..V-20 => ’ ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => 'OM & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_646 

$DEFADLT_MEM_SIZE 

1024 

$DEFAULT_STOR_ONIT 

8 

$DEFAULT_SyS_NAME 

SERVER 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESS1 

16#1# 

$ENTRY_ADDRESS2 

16#2# 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

f f 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLCIAT_NAME 

NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

II II 

$FORM_STRING2 

"CANNOT RESTRICT FILE CAPACITY" 

$aREATER THAN DURATION 

90_000.0 

$GREATER THAN DURATIOJ BASE LAST 

T0_00U_000.0 

$GREATER_THAN_FLCIAT_ 

BASE LAST 

I.'JE+IOS 

$(aiEATER_THAN_FLOAT_ 

SAFE LARGE 

1.TJE308 


A-2 




MACRO PARAMETERS 


$(aiEATERjrHAN_SHORT_FLOAT SAFE_LARGE 

1.0E308 

$HIGH_PRIORITY 254 

$iriiEGAL_EXTERNAL_FILE_NAMEl 

/NODIRECTORY/FILENAMEl 

$ILIiEGAL_EXTERNAL FILE NAME2 

^ 7k)DIRE^RY/FILENAME2 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$inappropriate_pact:_length 

-1 

$INCLUDE_PRAaiAl PRAGMA INCLUDE ( "A28006D1 .ADA") 

$INCLUDE_PRAQ!A2 PRAGMA INCLUDE ( "B28006F1 .ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -90_000.0 

$LESS_THAN_DURATICaj BASE FIRST 

-1TJ_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LCW_PRIORITY 1 

$MACHINE_CODE_STATEMENT 

asm' (inst => "nop"); 

$MACHINE_CODE_TYPE asm 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME BYTE_INTEGER 

A-3 




MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATiajl 

$NAME_SPECIFICATI(»I2 

$NAME_SPECIFICATION3 

$NBG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SyS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


SERVER 

/sun4/X2120A 

/svin4/X2120B 

/sun4/X3119A 

16#FFFFFFFE# 

1024 

8 

SERVER 

ASCII.LF & ASCII.FF 

WITHDRAWN 

asm 

32 

4096 

1.0 

FCNDECL.VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL.VAR_ADDRESS2 
NO SUCH PBAGKh 


A-4 




APPENDIX B 


COMPILATIOJ SYSTEM OPTIC»IS 


The compiler options of this Ada implementation, as described in this 
J^pendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation eind not to this 
report. 

Compile Options 


-fC Compile only if necessary. 

-fE Generate error log file. 

-fL Generate exception location information. 

-fN Suppress numeric checking. 

-fO Suppress storage checking. 

-fo Prevent hannless changes to low level mits from 
forcing recompilation. 

-fs Suppress all checks. 

-fU Inhibit library update. 

-fv Compile verbosely. 

-fw Suppress warning messages. 

-g Generate debug information. 

-G Generate debug information for MULTI. 

-help Display help. 

-1 Generate listing file. 

-L Use alternate library. 

-N Do a dry nm of the compilation. 

-CLAIMS Perform Optimizations. 

-P Print operations. 

-p Generate profiling information. 

-S Produce assembly code. 

-Xnnn Turn on the -Xnnn option vdiere nnn is a three digit integer. 
-Znnn Turn off the -Xnnn option vdiere nnn is a three digit integer. 


B-1 




CMIPILATION SYSTEM OPTIONS 


LINKER OPTiaJS 

The linker options of this Ada inplementation, as described in this i^jpendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 

Link Options 


-f Sv^ress main program generation step. 

-L Use alternate library. 

-m Produce a primitive load map. 

-n Suppress the linking of the object files, but do generate the 
main program. 

-N Do a dry run of the conpilation. 

-o Use alternate executable file output name. 

-p Enable profiling. 

-P Print operations. 

-Q Link in an extra object file. 

-r Create re-linkable output. 

-V Link verbosely. 

-w Suppress warnings. 




APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, eind to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada in^lementation, as described in this i^pendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ^pendix are to coitpiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, vdiich are 
not a part of i^pendix F, are: 


package STANDARD is 


type INTEGER is range -217483648..217483647; 
type SHORT_INTEGER is range -32768..32767; 
type BYTE_INTEGER is range -128..127; 
type LONG_INTEGER is range -217483648..217483647; 

type FLOAT is digits 6 range -3.40282346638529E+38..3.40282346638529E+38; 

type LONG_FLQAT is digits 15 range -1.79769313486231E+308..1.7976931348623lE^-308; 

type DURATION is delta 0.0001 range -86400.0..86400.0; 


end STANDARD; 


C-1 






APPENDIX F OF THE Ada STANDAE® 


i^pendix F Inplementation-Dependent Characteristics 


This ajpendix lists inplementation-dependent characteristics 
of Green Hills Ada. Note that there are no preceding appendices. 

This Appendix is called i^pendix F in order to conply with the 
Reference Manual for the Ai^ Programming Language* (LRM) 
ANSI/^IL-STO-ISIBA vAiich states that this appendix be named 
^pendix F. 

Implemented Chapter 13 features include length clauses, enumeration 
representation clauses, record representation clauses, address clauses, 
interrupts, package system, machine code insertions, pragma 
interface, and unchecked programming. 

F.l Pragmas 

The implemented pre-defined pragmas are: 

elaborate 
interface 
list 
pack 
page 

priority 
suppress 
inline 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled 

optimize 

systemjname 

shared 

storagejunit 

memory_size 

Named parameter notation for pragmas is not supported. 

^en illegal ^rameter forms are encountered at compile tiioe, the compiler 
issues a warning message rather than an error, as required by the Ada 
language definition. Refer to the ARM Appendix B for additional 
information about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface in Green Hills Ada is: 

pragma interface (language, siibprogrogram [, "link-name"] ); 

v^ere: 


See the LRM section 10.5. 
See section F.1.1. 

See the LRM ^pendix B. 
See section F.l.2. 

See the LRM ippendix B. 

See the LRM ippendix B. 

See section F.l.3. 

See the LRM section 6.3.2. 


C-2 



APPENDIX F OF THE Ada STANDABD 


language This is the interface language, one of the names assembly, 
builtin, c or internal. The names builtin and internal 
are reserved for use Green Hills compiler maintainers 
in njn-time support packages. 

sul^rogram This is the name of a subprogram to vhich the pragma 

interface applies. If link-name is omitted, then the Ada 
subprogram name is also used as the object code symbol 
name. Depending on the language specified, some 
autanatic modifications may be made to the object code 
symbol name. 

link-name This is an optional string literal specifying the name 
of the non-Ada subprogram corresponding to the Ada 
subprogram named in the second parameter. If link-name 
is omitted, then link-name defaults to the value of 
subprogram translated to lowercase. Depending on the 
language specified, seme automatic modifications may 
be made to the link-name to produce the actual object 
code symbol name that is generated vhenever references 
are made to the corresponding Ada subprogram. 

It is appropriate to use the optional link-name parameter 
to pragma interface only vrfien the interface subprogram 
has a name that does not correspond at all to its Ada 
identifier or when the interface subprogram name cannot 
be given using rules for constructing A^ identifiers 
(e.g. if the neime contains a '$' character). 

The characteristics of object code symbols generated for each interface 

language are: 

assembly The object code symbol is the same as link-name. If no 
link-name string is specified, then the subprogram name 
is translated to lowercase. 

builtin The object code symbol is the same as link-name, but 

prefixed with the string, "_mss_". 

This language interface is reserved for special 
interfaces defined by Green Hills Software, Inc. The 
builtin interface is presently used to declare certain 
low-level run-time operations vAiose names must not 
conflict with programmer-defined or language system 
defined names. 

c The object code symbol is the same as link-name, but with 

one underscore character () prepended. This is the 
convention used by the C compiler. If no link-name string 
is specified, then the subprogram name is translated to 
lowercase. 

internal No object code symbol is generated for an internal language 


C-3 




APPENDIX F OF THE Ada STANDARD 


interface; this leingiiage interface is reserved for special 
interfaces defined by Green Hills Software, Inc. The 
internal interface is presently used to declare certain 
machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface 
subprograms. It is up to the programmer to ensure that calling conventions 
match and that airy necessary data conversions take place v^en calling 
interface subprograms. 

A pragma interface may appear within the same declarative part as the 
stji^rogram to vdiich the pragma interface applies, following the stJtbprogram 
declaration, and prior to the first use of the subprogram. A pragma 
interface that aj^lies to a subprogram declared in a package specification 
must occur within the package body in this case. A pragma interface 
declaration may appear in the private part of a package specification. 
Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional information about pragma 
interface. 

F.1.2 Pragma Pack 

Pragma pack is inplemented for ccmposite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to 
vrtiich it applies, provided that the pragma occurs within the same 
declarative part as the conposite type declaration, before any objects 
or conponents of the conposite type are declared. 

Note that the declarative part restriction means that the type declaration 
and acconpanying pragma pack cannot be split across a package specification 
and body. 

The effect of pragma pack is to minimize storage consunption by discrete 
component types \^ose reinges permit packing. Use of pragma pack does not 
affect the representations of real types, pre-definsd integer types, and 
access types. 

F.1.3 Pragma Suppress 

Pragma suppress is implemented as described int eh LRM section 11.7, with 
these differences: 

* Presently, division_check and overflow_check must be suppressed 
via a compiler flag, -fN; pragma suppress is ignored for these 
two numeric checks. 

* The optional "CXI =>" parameter name notation for pragma suppress 

is ignored. 

* The optional second parameter to pragma suppress is ignored; the 
pragma always applies to the entire scope in \^ich it appears. 


C-4 




APPENDIX F OF IHE Ada STANDftRD 


F.1.4 Pragma Inline 

Pragma inline is supported for procedures and functions. 

F.2 Attributes 

All attributes described in the LEM Appendix A are supported. 

F.3 Standard Types 

Additional steundard types are defined in Green Hills Ada: 

* byte_integer 

* short_integer 

* long_integer 

* long_float 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 

type short_integer is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 .. 2147483647; 

type float is digits 6 

range -3.40282E+38 .. 3.40282E+38; 

type long float is digits 15 

range -T.79769313486231E+308 .. 1.79769313486231E+308; 

type duration is delta 0.0001 range -86400.0000 .. 86400.0000; 

F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (server); 

system_name : constant name ;= server; 

type target_systems is ( 

Unix, 
netos, 



APPENDIX F OF THE Ada STANDARD 


vms, 

msdos, 

bare, 

mac, 

VxWorks ); 


type target_machines is ( 
vax, 
z8001, 
z8002, 

Z80000, 

m68000, 

m68020, 

in68030, 

n^8040, 

in88000, 

18086, 

i80286, 

i80386, 

180486, 

i860, 

R2000, 

R3000, 

R4000, 

RS6000, 

HPPA, 

spare, 

PPC601, 

PPC603, 

PPC604 ); 

target_system : constant target_systems := ViWorks; 

target_machine ; constant target_inachines := R4000; 

storage_unit : constant ;= 8; 

inemory_size ; constant ;= 1024; 

— System-Dependent Named Numbers 


min_int 

max_int 

maxjdigits 

nax_mantissa 

finejdelta 

tick 


: constant 
: constant 
: constant 
: constant 
: constant 
: constant 


-2147483648; 

2147483647; 

15; 

31; 

2.0 ** (-31); 

1.0 / 1 . 0 ; 


— Other System-Dependent Declarations 
subtype priority is integer range 1 .. 254; 


The value of system.memory_size is presently meaningless. 
F.5 Restrictions on Representation Clauses 


C-6 



APPENDIX F OF THE Ada STANDARD 


Green Hills Ada supports representation clauses including length clauses, 
enumeration representation clauses, record representation clauses and 
address clauses. 

F.5.1 Length Clauses 

A size specification(t'size) is rejected if fewer bits are s^cified 
theui can accommodate the type. The minimum size of a conqposite type 
may be subject to application of pragma pack. It is permitted to specify 
precise sizes for unsigned integer ranges, e.g. 8 for the range 0..255. 
However, because of requirements inqposed by the Ada language definition, 
a full 32-bit range of unsigned values, i.e. 0..(2**32)-l, cannot be 
defined, even using a size specification. 

The specification of collection size (t'storage_size) is evaluated at 
run-time when the scope of the type to vrfiich the length clause applies 
is entered, and is therefore s\abject to rejection (via storage_error) 
based on available storage at the time the allocation is made. A 
collection may include storage used for run-time administration of the 
collection, and therefore should not be expected to accommodate a 
specific nimiber of objects. Furthermore, certain classes of objects 
such as unconstrained discriminant array components of records may be 
allocated outside a given collection, so a collection may accommodate 
more objects than might be expected. 

The specification of storage for a task activation (t'storage_size) is 
evaluated at run-time vdien a task to v^ich the length clause applies 
is activated, emd is therefore subject to rejection (via storage_error) 
based on available storage at the time the allocation is made. Storage 
reserved for a task activation is separate from storage needed for any 
collections defined within a task body. 

The specification of small for a fixed point type(t'small) is subject 
only to restrictions defined in the LRM section 13.2. 

F.5.2 Enxjmeration Representation Clauses 

The internal code for the literal of an enumeration type named in an 
enumeration representation clause must be in the range of standard.integer. 

The value of an internal code may be obtained by applying an appropriate 
instemtiation of \jnchecked_conversion to an integer type. 

F.5.3 Record Representation Clauses 

The storage unit offset (the at static_siitple_expression part) is given 
in terms of 8-bit storage units and must be even. 

A bit position (the range part) applied to a discrete type conponent may 
be in the range 0..31, with 0 being the least significcint bit of a 
component. A range specification may not specify a size smaller them can 
accommodate the component. A range specification for a component not 


C-7 




APPENDIX F OF TEIE Ada STANDARD 


accommodating bit packing may have a higher upper bound as appropriate 
(e.g. 0..63 for a 64-bit float ccm^nent). Refer to the internal 
data representation of a given conponent in determining the component 
size and assigning offsets. 

The value of an alignment clause (the optional at mod part) must evaluate 
to 1 , 2 , 4 , or 8 and may not be smaller than the highest alignment required 
by einy ccmponent of the record. 

F.5.4 Address Clauses 

An address clause may be supplied for an object (vdiether constant or variable) 
or a task entry, but not for a subprogram, package, or task unit. The 
meaning of an address clause supplied for a task entry is given in section 

F.5.5. 

An address expression for an object is a 32-bit linear segmented memory 
address of type system.address. 

F.5.5 Interrupts 

A task entry's address clause can be used to associate the entry with a UNIX 
signal. Values in the range 0..31 are meemingful, and represent the signals 
corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means 
of type conversion. 

F.6 Inplementation-Dependent Conponents 

No names are generated by the implementation to denote inplementation- 
dependent conponents. 

F.7 Machine Code Insertions 

Machine code insertions, described in the LRM section 13.8, are supported in 
Green Hills Ada. Exactly one form of machine code insertion can be used in 
Green Hills Ada: 

insertion of a string into the code stream. 

There are additional restrictions on machine code insertions, as 
described in the LRM: 

A compilation unit that contains machine code insertions must 
name package machine_code in a context (with) clause. 

The body of a procedure containing machine code insertions 

cannot contain declarations other than use, cannot contain statements 

other than code statements, and cannot contain exception handlers. 


C-8 




APPENDIX F OF THE Ada STANDAEOD 


Refer to the LRM for more specific details. 

The definition of package machine_code is: 

package machinejcode is 
type asm is 
record 

inst: stringd. .256); 
end record; 

end; 

The asm record is used for creating assembly instructions much the same 
as the asm function in C. 

Following is an exanple of a procedure that uses machine code insertions: 

with system; 
with inachine_code; 
procedure mach is 
use machine_code; 
begin 

— This machine_code procedure adds its two arguments and 

— calls the integer i/o package put routine on the sxjm. 
asm'(inst => "add %iO,%il,%oO"); 

asm' (inst => "mov 0,%ol"); 
asm'(inst => "call lioPutOOS"); 
asm'(inst *> "mov lIT,%o2"); 
end; 


F.8 Unchecked Programming 

The Green Hills Ada coitpiler supports the unchecked programming generic 
library siabprograms uncheckedjdeallocation and unchecked_conversion. 

There are no restrictions on the use of unchecked_conversion. Conversions 
between objects vAiose sizes do not conform may result in storage areas 
with undefined values. 

F.9 Input-Output Packages 

A summary of the in 5 >lementation-dependent input-output characteristics is: 

* In calls to open and create, the form parameter must be the 
enqpty string (the default value). 

* More than one internal file can be associated wif* a single 
external file for reading only. For writing, only one internal 
file may be associated with an external file; Do not use 
reset to get around this rule. 

* Temporary sequential and direct files are given names. 

Temporary files are deleted v^en they are closed. 


C-9 


APPENDIX F OF THE Ada STANDARD 


* File I/O is buffered; text files associated with terminal devices 
are line-buffered. 

* The packages sequential_io and direct_io cannot be instantiated 
with unconstrained con^site types or record types with 
discriminants without defaults. 


F.IO Separate Conpilation with Generics 

A generic non-library package body can be conpiled as a subunit in a 
separate file from its specification whether or not the instantiations 
precede the sutprogram body. However, a generic non-library subprogram 
body cannot be conpiled as a ST±unit in a separate file from its 
specification v^en the instantiations precede the s\:ibprogram body. 

Also, a generic library ^ckage body cannot be conpiled in a separate 
file frcmi its specification vdien the instantiations precede the subprogreim 
body. 


C-10 







