AD-A216 483 


i. «l*o*i auMriR 


REPORT DOCUMENT A!. 3N PAGE_. ro . 


l |2. 60 V1 ACCISSIO* NO 13. AlClUlkl S CA1A..W, k>*;i* 


at as »«m.pnosi 
ar«OM ro»».T»t-«-t to* 




•1*0^ kiMti* 


4 . TJUl *ndU.butIt! 89082SW1.10145 I 5 ' ,m 01 * HHJOO COvimo 

Ada Cnmpiler Validation Summary Report: telesoft I 29 August 89 - 1 Dec 90 

Motorola VME Delta Series TeleGen2 Aua Cross Compilation * 

System Version 1.4, Motorola Delta Model 2616 (MVME 132xt, 

6&020/68881) (host) to Motorola MVME133A-20 (MC68020) (tart; 


?. atiTMOftu) I. C04TIUCI 0» 604*.: kcWfiRu; 

Wright-Patterson AFB 
Dayton, OH, USA 



I. HRfORklRw AKO ADDRESS 

Wright-Patterson AFB 
Dayton, OH, USA 


u. co*' rd.ua: o* ^ict a*-! *>.: a?driss 
Ada Joint Prc:.am Office 
United States'Department of Defense 
Washington, DC 2U301-3081 

i 


14 , MC’ClI&RlAu A41 a:t fctK.i l ADDRlSS(i/0'f»4'»m Controlling 0fi.tr) 


Wright-Patterson AFB 
Dayton, OH, USA 


IS. C1S1A1IJT10A SlATlMiK-! (of Th/i Afpen) 

Approved fcr public release; distribution unlimited. 


17. CIS^RIEUIO*' Si* : l“;H' (of ia« ibmntWf:mb oc* 2C Ho *ir'rn: /#©<*> Repon; 


ic. i l(h!a* . e p' i :t . Iasi 

ARIA l *0*1 U*:i kJMEIRS 


12. «i*o*: D*U 


IS. SlCu*)7' .I.ASS (c* tnij ttpon) 

UNCLASSIFIED 


Si.mOwk.1 


UNCLASSIFIED 


ll. SU**.l-:»>'At' a;tis 


i.-, J r W 


DTIC 

ELECTE 

a«ai A 4AAA 


urtn v u i 

0*% 


11. *I»*O*0S (Coniif>«» oni.0< ,/ nt(tlit') onbtfitniity 6, fe'Oi* iwm6»rj 

hAda Programming language,’ Ada Compiler Validations Nummary Report, Ada 
Compiler Validation Capability, ACVC, (Validation Testing, Ada 
Validation Office, AVO, Ada Validation facility, AVF, ANSJ/KIL-STD- 
1615A, Ada Joint Program Office, AJP0 y _ t 


20. ABSIAa; 1 (Conttnw* O'' no* 4*0 •**"<<*> A, t'oit rtumbor) 

TEhESOFT, Motorola VME Delta Series TeleGen2 Ada Cross Compilation System Version 1.4, 
Wright-Patterson AFB, Motorola Delta Model 2616 (MVME 132xt, 68020/68881) under 
Motorola SYSTEM V/68 Operating System Version V3.5 (host) to Motorola MVME133A-20 
(MC68020) bare machine (target), ACVC 1.10 


90 01 03 003 


1473 lonio*. O' i *o» is is otso.iu 

22 S/k DlD2*U*e>4-*t01 


UNCLASSIFIED __ 

sitv»n» tiAssmcAiioN o' i*i$ raji 


















AVF Control Number: AVF-VSR-315.1189 

89-07-11-TEL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890829V1.10145 
TELESOFT 

Motorola VME Delta Series TeleCen2 Ada Cross Compilation System Version 1.4 
Motorola Delta Model 2616 (MVME 132xt, 68020/68881) Host and 
Motorola MVME133A-20 (MC68020) Target 


Completion of On-Site Testing: 
* 29 August 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 





Accesion For 

~rz 

NTIS CRAAI 


OTIC ia a 

u 

Unanoo.i. iCiid 

□ 

Justification _ 


By 


Otstubutio 1 ' 1 



Availability Codes 


Dist 


Avail a"d/or 
Special 
i 







Ada Compiler Validation Summary Report: 


Compiler Name: Motorola VME Delta Series TeleGen2 Ada Cross Compilation 
System Version 1.4 

Certificate Number: #890829W1.10145 


Host: Motorola Delta Model 2616 (MVME 132xt, 68020/68881) 

under Motorola SYSTEM V/68 Operating System Version V3.5 

Target: Motorola MVME133A-20 (MC68020) 

Bare machine 


Testing Completed 29 August 1989 Using ACVC 1.10 
Customer Agreement Number: 89-07-11-TEL 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 




Afia Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1_3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.. 

3.2 SUMMARY OF TEST RESULTS BY CUSS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-6 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-7 

3.7.3 Test Site .3_8 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 
APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED BY TELESOFT 



















CHAPTER 1 


INTRODUCTION 



This .Validation Summary .Report < ^fVSR> 7 > describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. —>V<? -cy A ) 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist betveen implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences betveen compilers result from the characteristics of 
particular operating systems, hardvare, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 








INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 29 August 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.I552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


1-2 








INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, FeEruary 1$83 and ISO _ 6652-I$87. 

2. Ada Compiler Validation Procedures, Version 2.0, Ada Joint Program 
oHice, May 15S5T 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 

1.4 DEFINITION OF TERMS 
ACVC 

Ada 

Commentary 

Ada Standard 
Applicant 
AVF 


AVO 


Compiler 


The Ada Compiler Validation Capability. The set of Ada 
programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible for 
conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures . 

The Ada Validation Organization. The AVO has oversight 
authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 


1-3 





INTRODUCTION 


Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 


Host 


The computer on which the compiler resides. 


Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 


Passed test An ACVC test for which a compiler generates the expected 
result. 


Target 

Test 


Withdrawn 

test 


The computer for which a compiler generates code. 

A program that checks a compiler's conformity regarding a 
particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved vords of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved vords by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 
illegal construct that it contains is detected by the compiler. 


1-4 





INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message vhen it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 









INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal fils name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that vas determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 





CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
folloving configuration: 

Compiler: Motorola VME Delta Series TeleGen2 Ada Cross Compilation 
System Version 1.4 

ACVC Version: 1.10 

Certificate Number: 890829V1.10145 

Host Computer: 

Machine: 

Operating System: 

Memory Size: 

Target Computer: 

Machine: 

Operating System: 

Memory Size: 

Communications Network: 


Motorola Delta Model 2616 
(MVME 132xt, 68020/68881) 

Motorola SYSTEM V/68 Operating 
System Version V3.5 

12 Megabytes 

Motorola MVME133A-20 (MC68020) 
Bare machine 
1 Megabyte 
Serial line 


2-1 










CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check, for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
LONG INTEGER and LONG FLOAT in package STANDARD. (See tests 
B860(5lT..Z (7 tests).) ~ 


c. Expression evaluation. 

The order in vhich expressions are evaluated and the time at which 
constraints are checked are not defined by the language. Vhile 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Some of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 


2-2 







CONFIGURATION INFORMATION 


(3) This implementation uses no extra bits for extra precision and 
uses no extra bits for extra range. (See test C35903A.) 

(4) CONSTRAINT ERROR is raised when a literal operand in a 

predefined~INTEGER comparison is outside the range of INTEGER; 
NUMERIC_ERROR is raised when a literal operand in an integer 
comparison or membership test is greater than SYSTEM.MAX_INT; 
and no exception is raised when a literal operand in a 
user-declared integer type comparison or membership test is 
outside the range of the base type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a 

fixed-point comparison or membership test is oulsiue the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of a two-dimensional array subtype raises 

NUMERIC_ERROR when the second dimension's length is greater 
than SYSTEM.MAX_INT. No exception is raised if the array type 
has only one dimension or if only the first dimension's length 
exceeds SYSTEM.MAX_INT. (See test C36003A.) 

(2) CONSTRAINT_ERROR is raised vhen 'LENGTH is applied to an array 

type with INTEGER'LAST + 2 components with each component 

being a null array. (See test C36202A.) 


2-3 








CONFIGURATION INFORMATION 


(3) NUMERIC_ERROR is raised when an array type with SYSTEM.MAX_INT 

+ 2 components with each component being a null array is 

declared. (See test C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively! an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINTERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
vhen a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


2-4 







CONFIGURATION INFORMATION 


h. Pragmas. 

(1) Pragma INLINE is supported for nested functions and 
procedures, but is not supported for library subprograms. 
(See tests LA3004A..B (2 tests), EA3004C..D (2 tests), and 

CA3004E..F (2 tests).) 


i. Generics. 

(1) Generic bodies and subunits of generic bodies can be compiled 
separately from their specifications; however, if a generic 
body or a subunit is compiled or recompiled after an 
instantiation, then the instantiating unit is rendered 
obsolete. This obsolescence is detected at bind (link) time. 
(See tests CA1012A, CA2009C, CA2009F, CA3011A, BC3204C, and 

BC3205D.) 


j. Input and output. 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN FILE and OUT FILE are supported for SEQUENTIALIO. 
(See tests CE2102D..E (2~tests), CE2102N, and CE2102P.) 

(4) Modes INFILE, OUT FILE, and INOUT FILE are supported for 
DIRECT_I0. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN FILE and OUT FILE are supported for text files. (See 
tests CE3102E and CE3I02I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIALIO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT 10. (See 
tests CE2102K and CE2102T.) 

(8) RESET and DELETE operations are supported for text files. 

(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 

CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 


2-5 



CONFIGURATION INFORMATION 


(10) Temporary sequential files are given names and not deleted 
when closed. (See test CE2108A.) 

(11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and not deleted when 
closed. (See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files vhen reading only. (See 
tests CE2107A..E (5 tests), CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can he associated vith each 

external file for direct files vhen reading only. (See tests 
CE2107F..B (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated vith each 

external file for text files vhen reading only. (See tests 
CE3111A..E (5 tests), CE3114B, and CE3115A.) 


2-6 






CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. Vhen this compiler vas 
tested, 44 tests had been vithdravn because of test errors. The AVF 
determined that 314 tests were inapplicable to this implementation. All 
Inapplicable tests vere processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 9 tests vere required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 

2018 

17 

23 

45 

3359 

Inapplicable 

2 

9 

297 

0 

5 

1 

314 

Vithdravn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

573 

544 

245 

172 

99 

160 

332 

132 

36 

250 

340 

278 

3359 

Inappl 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

29 

43 

314 

Vdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 

WITHDRAWN TESTS 





The 

this 

following 44 
validation: 

tests were 

withdrawn 

from ACVC Version 1.10 at 

the time of 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 


CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 


CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 


CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 


CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 


ED70O4B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 


CD7203B 

CE3301A 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests vas withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each tine a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 314 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) C35706L..Y (14 tests) 

C35707L..Y (14 tests) C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) C45421L..Y (14 tests) 


3-2 







TEST INFORMATION 


C45521L..Z (15 tests) C45524L..Z (15 tests) C45621L..Z (15 tests) 
C45641L..7 (14 tests) C46012L..Z (15 tests) 

b. C35508I, C35508J, C35508M, and C35508N are not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE -> 0, 
TRUE «> 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SH0RT_FL0AT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SH0RT_INTEGER: 


C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

CD7101E 

B52004E 

C55B07B 

B55B09D 

B86001V 

e. C45231D, B86001X, and 

CP7101G are 

not applicable because this 


implementation does not support any predefined integer type with a 
name other than INTEGER or LONG_INTEGER. 

f. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 48. 

g. C86001F is not applicable because, for this implementation, the 
package TEXT_I0 is dependent upon package SYSTEM. This test 
recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT or 
L0NG_FL0AT. 

j. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable because, 
for this implementation, compilation or recompilation of a generic 
body following an instantiation of the generic unit renders the 
instantiating unit obsolete. The obsolescence is detected at bind 
(link) time. 

k. LA3004B, EA3004D, and CA3004F are not applicable because this 

implementation does not support pragma INLINE for library 
subprograms. 

l. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 


3-3 










TEST INFORMATION 


a. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, vith component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

n. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

o. CD4041A is not applicable because this implementation does not 
support record alignment clauses when the specified value is 32. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECTIO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

r. CE2102D is inapplicable because this implementation supports 

CREATE with IN_FILE mode for SEQUENTIAL_IO. 

s. CE2102E is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for SEQUENTIAL_IO. 

t. CE2102F is inapplicable because this implementation supports 

CREATE with INOUT_FILE mode for DIRECT_IO. 

u. CE2102I is inapplicable because this implementation supports 

CREATE with IN_FILE mode for DIRECT_IO. 

v. CE2102J is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for DIRECT_IO. 

w. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

x. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

y. CE2102P is inapplicable because this implementation supports OPEN 
with OUT_PILE mode for SEQUENTIAL_I0. 

z. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQUENTIAL_IO. 

aa. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT FILE mode for DIRECT 10. 


3-4 











TEST INFORMATION 


ab. CE2102S is inapplicable because this implementation supports RESET 
with INOUTJTLE mode for DIRECT_I0. 

ac. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FILE mode for DIRECT_IO. 

ad. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_IO. 

ae. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIRECT_IO. 

af. CE2102U is inapplicable because this implementation supports RESET 
with OUTJTLE mode for DIRECT IO. 

ag. CE2107B..E (4 tests), CE2107L, CE2110B, and CD2111D are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
sequential files. The proper exception is raised when multiple 
access is attempted. 

ah. CE2107G..B (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because this implementation supports 

CREATE with IN_FILE mode for text files. 

aj. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

ak. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

al. CE3102I is inapplicable because this implementation supports 

CREATE with 0UT_FILE mode for text files. 

am. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

an. CE3102K is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for text files. 

ao. CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3-5 





TEST INFORMATION 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases vhere 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 9 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

BA3006A BA3006B BA3007B BA3008A BA3008B BA3013A 

The following tests were graded PASSED, as approved by the AVO, because the 
only failure messages were due to comparisons between the values of TY'SIZE 
and OBJ'SIZE, where TY is a type and OBJ is an object of type TY. These 
comparisons were based on assumptions not supported by the Ada standard. 

C34004G C34005J C34006D 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the Motorola VME Delta Series TeleGen2 Ada Cross Compilation System 
Version 1.4 was submitted to the AVF by the applicant for review. Analysis 
of these results demonstrated that the compiler successfully passed all 
applicable tests, and the compiler exhibited the expected behavior on all 
inapplicable tests. 


3-6 









TEST INFORMATION 


3.7.2 Test Method 


Testing of the Motorola VME Delta Series TeleGen2 Ada Cross Compilation 
System Version 1.4 using ACVC Version 1.10 was conducted on-site by a 
validation team from the AVF. The configuration in which the testing was 
performed is described by the following designations of hardware and 
software components: 


Host computer: 

Host operating system: 

Target computer: 

Target operating system: 
Compiler: 


Motorola Delta Model 2616 
(MVME 132xt, 68020/68881) 

Motorola SYSTEM V/68 Operating 
System Version V3.5 
Motorola MVME133A-20 (MC68020) 

Bare machine 

Motorola VME Delta Series TeleGen2 Ada 
Cross Compilation System Version 1.4 


The host and target computers were linked via Serial line. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded onto a Sun-3 Workstation and 
transferred to the host computer. 

After the test files were loaded to disk, the full set of tests was 
compiled and linked on the Motorola Delta Model 2616, then all executable 
images were transferred to the Motorola MVME133A-20 (MC68020) via Serial 
line and run under control of the TELESOFT downloader/receiver running on 
the Motorola Delta Model 2616. Results were transferred to a Sun-3 
Workstation for printing. 

The compiler was tested using command scripts provided by TELESOFT and 
reviewed by the validation team. See Appendix E for a complete listing of 
the compiler options for this implementation. The following list of 
compiler options includes those options which were invoked by default: 


Compiler 

Switch/Option Effect 

-L Generate interspersed source-error listings, 

-m Generate executable code. 

-a Specify a linker options file. (See below.) 


3-7 





TEST INFORMATION 


-P 

-R 


-I 


-A 


Equivalent to the sequence -P -R -I -A. (See belov.) 

One or more of the subprograms being optimized may 
be called from parallel tasks. 

One or more of the subprograms interior to the 
unit/collection being optimized could be called 
recursively by an exterior subprogram. 

Enables inline expansion of those subprograms that 
are generated by the compiler or are subject to an 
INLINE pragma. 

Enables automatic inline expansion of any subprogram 
called from only one place, as veil as those subject 
to an INLINE pragma or generated by the compiler. 


Dovnloader 

Svitch/Option Effect 

-c Capture target output. 

-d Download. 

-b Boot application at entry point. 


Tests were compiled, linked, and executed (as appropriate) using 1 host 
computer and 1 target computer. Test output, compilation listings, and job 
logs were captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at San Diego CA and vas completed on 29 August 1989. 











APPENDIX A 


DECLARATION OF CONFORMANCE 


TELESOFT has submitted the folloving Declaration of 
Conformance concerning the Motorola VME Delta Series 
TeleGen2 Ada Cross Compilation System Version 1.4. 


A-l 









1 


DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Compiler Name: 
Version: 


Base Configuration 

Motorola VME Delta Series TeleGen2 Ada 

Cross Compilation System 

1.4 


Host Architecture ISA: Motorola Delta Model 2616 

(Motorola VME 132xt, 68020/68881) 
OS k VER #: Motorola SYSTEM V/68 Version V3.5 


Target Architecture ISA: Motorola MVMEl3?A-20 (MC68020) 

OS k VER #: Bare machine 


Implementor’s Declaration 


I, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner’s corporate 


natpe 


r~ 





TELESOFT 

Raymond A. Parra, Director, 



Date: ^ M g*) 


Legal 


Licensee’s Declaration 


Motorola, Inc. assures that all reasonable steps are taken by Motorola, Inc. to maintain 
the Ada language compiler(s) listed above in conformance to ANSI/MIL-STD-1815A and 
agrees to the public disclosure of the final Validation Summary Report. Motorola, Inc. 
agrees to comply with the Ada Joint Program Office policy on the use of the 
VALIDATED ADA certification mark. Further, Motorola, Inc. declares that to the best 
of its knowledge thp Ada language compiier(s) listed, and their hoet/target configurations 
are in compliancj^ith the Ada LanguageStsjglard ANSI/M1L-STD-1815A. 


Date: 


MOTOROLA, INCORPORATED ru 
Name and Title: ThOM\S A. BEAVER 


•1815A. J 


VICE PRESIDENT S Gff.'rpai vs.vucra 


A-2 




APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only alloved Implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and 
to certain alloved restrictions on representation clauses. The 
implementation-dependent characteristics of the Motorola VME 
Delta Series TeleGen2 Ada Cross Compilation System Version 1.4, 
as described in this Appendix, are provided by TELESOFT. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type LONG FLOAT is digits 15 range -8.98846567431158E+307 .. 

8.98846567431158E+307; 

type DURATION is delta 2!1.0«E-14 range -86400.0 .. 86400.0; 


end STANDARD; 


B-l 






Appendix F 

1- Implementation Dependent Pragmas 


pragma COMMENT(<string_literai>); 

It may only appear within a compilation unit. The pragma comment has 
the effect of embedding the given sequence of characters in the object 
code of the compilation unit. 

pragma IMAGES(enumeration type>.Deferred) or 
pragma IMAGES( <enumeration_type>.Immediate); 

It may only appear within a compilation unit. The pragma images 
controls the creation and allocation of the image table for a 
specified enumeration type. The default is Deferred, which saves space 
in the literal pool by not creating an image table for an enumeration 
type unless the ’Image, ’Value, or 'Width attribute for the type is 
used. If one of these attributes is used, an image table is generated 
in the literal pool of the compilation unit in which the attribute 
appears. If the attributes are used in more than one compilation unit, 
more than one image table is generated, eliminating the benefits of 
deferring the table. 

pragma INLINE (<subprogram name>); 

It functions as defined by the Language Reference Manual with one 
restriction. This compiler does not support pragma INLINE on library 
level subprograms. 

pragma INTERRUPT(Function _Mapping); 

It may only appear immediately before a simple accept statement, a 
while loop directly enclosing only a single accept statement, or a 
select statement that includes an interrupt accept alternative. The 
pragma interrupt has the effect that entry calls to the associated 
entry, on behalf of an interrupt, are made with a reduced call overhead. 

pragma LINKNAME(<subprogram name>, <string_literal>); 

It may appear in any declaration section of a unit. This pragma must 
also appear directly after an interface pragma for the same 
<subprogram name>. The pragma linkname has the effect of making 
string Jiteral apparent to the linker. 

pragma SUPPRESS_ALL; 

It may appear anywhere that a Suppress pragma may appear as defined by 
the Language Reference Manuel. The pragma Suppress_AU has the effect 
of turning off all checks defined in section 11.7 of the Language 
Reference Manual. The scope of applicablility of this pragma is the 
same as that of the predefined pragma Suppress. 


B-2 




Appendix F, Cont. 

2. Implementation Dependent Attributes 


’Offset Attribute 

’Offset along with the attribute 'Address, facilitates machine code 
insertions. For a prefix P that denotes a declared parameter object, 
P’Offset yields the statically known portion of the address of the first 
of the storage units allocated to P. The value is the object’s offset 
relative to a base register and is of type Long Integer. 


INTEGER ATTRIBUTES 


’Extended Image Attribute 


Usage: X’Extended_lmage(Item,Width,Base,Based.Space_IF_Positive) 

Returns the image associated with Item as per the Text_Io definition. 

The Text_Io definition states that the value of Item is an integer 
literal with no underlines, no exponent., no leading zeros (but a single 
zero for the zero value) and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters then 
leading spaces are first output to make up the difference. 

(LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype: this attribute is a 
function that may have more than one parameter. The parameter Item must 
be an integer value. The resulting string is without underlines, leading 
zeros, or trailing spaces. 

Parameter Descriptions: 

Item 


Width 


— The user specifies the item that he wants the 
image of and passes it into the function. This 
parameter is required. 

- The user may specify the minimum number of 
characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 


B-3 






Appendix F, Cont. 


Base — The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 

Based -- The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 


Then the following would be true: 


X’Extended_Image(5) 

X’Extended _Image(5,0) 

X’Extended _lmage( 5,2) 

X'Extended _Image(5,0,2) 
X’Extended_Image(5.4,2) 
X’Extended_lmage(5,0,2.True) ■ 

X'Extended _Image(5,0,10.False) 
X'Extended _Image(5,0.10,F alse,True) 
X’Extended _Image(-1,0,10,F alse, False) 
X’Extended _Image(-l,0,10,False, True) 
X’Extended _lmage(-1.1,10,F alse,True) 
X’Extended _Image(-1,0,2,True,True) 
X'Extended _Image(-1,10,2, True, True) 


"5 " 

"5" 

" 5 " 

" 101 " 

" 101 " 

- " 2 # 101 #" 

- "5" 

- •* 5" 

M" 

ft. 2 w 
tt„2 w 

"*2#I#" 

" - 2 # 1 #" 



Appendix F, Cont. 


'Extended Value Attribute 


Usage: X’Extended_Value(ltem) 

Returns the value associated with Item as per the Text lo definition. 

The Text Io definition states that given a string, it reads an integer 
value from the beginning of the string. The value returned corresponds to 
the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or trailing spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINT ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 

Then the following would be true: 


X'Extended Value("5") - 5 

X’Extended_VaJue(" 5") - 5 

X’Extended_Value("2# 101 # ") - 5 

X’Extended_Value("-l") - -1 

X’Extended VaJue(" -1") --1 



Appendix F, Cont. 

’Extended Width Attribute 

Usage: X’Extended_Width(Base.Based.Space_If_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute is a function 
that may have multiple parameters. This attribute yields the maximum 
image length over all values of the type or subtype X. 

Parameter Descriptions: 

Base — The user specifies the base for which the width 

will be calculated. If no base is specified 
then the default (10} is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for based is 
specified then the default (false) is assumed. 

Space_lf Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 


Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range *10.. 16; 

Then the following would be true: 

X’Extended Width 
X’Extended'Width(lO) 
X’Exiended_Width(2) 

X’Extended Width(10,True) 
X’Extended~Width(2,True) 
X’Extended_Width(10,False,True) 
X’Extended_Width( 10,True,F alse) 
X'Extended Width(lO.True.True) 
X’Extended~Width(2,True,True) 
X’Extended_Width(2,False,True) 


- 3 - "-10" 

- 3 - "-10" 

- 5 - "10000" 

- 7 - "*10#10#" 

- 8 - " 2 # 10000 #" 

- 3 - " 16" 

- 7 - "*10#10#" 

- 7 - " 10#16#" 
-9 — " 2# 10000#" 
- 6 - " 10000 " 


B-6 






Appendix F, Cont. 


ENUMERATION ATTRIBUTES 


'Extended Image Attribute 

Usage: X'Extended Image(Item,Width,Uppercase) 

Returns the image associated with Item as per the Text Io definition. 

The Text lo definition states that given an enumeration literal, it will 
output the value of the enumeration literal (either an identifier or a 
character literal). The character case parameter is ignored for character 
literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more that one parameter. The parameter Item must 
be an enumeration value. The image of an enumeration value is the 
corresponding identifier which may have character case and return string 
width specified. 


Parameter Descriptions: 

Item - The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Width - The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) is assumed. If the Width 
specified is larger than the image of Item, then the 
return string is padded with trailing spaces: if the Width 
specified is smaller than the image of Item then the 
default is assumed and the image of the enumeration value 
is output completely. 

Uppercase — The user may specify whether the returned string is in 
uppercase characters. In the case of an enumeration type 
where the enumeration literals are character literals, the 
Uppercase is ignored and the case specified by the type 
definition is taken. If no preference is specified then 
the default (true) is assumed. 


B-7 



Appendix F, Cont. 


Examples: 

Suppose the following types were declared: 

Type X is (red. green, blue, purple); 

Type Y is (V, ’B\ V, ’D’); 

Then the following would be true: 


X’Extended Image(red) 

- "RED" 

X'Extended Image(red, 4) 

-"RED " 

X'Extended Image(red,2) 

-"RED" 

X’Extended lmage(red.O.false) 

- "red" 

X'Extended Image(red,10,false) 

- "red " 

Y'Extended_Image(V) 


Y’Extended image('B’) 

K rngin 

Y’Extended _Image( ’a’.6) 

M itij' »i 

Y’Extended_Image(’a'.0,true) 


’Extended_V&lue Attribute 


Usage: X’Extended_Value(Item) 


Returns the image associated with Item as per the Text_Io definition. 
Text Io definition states that it reads an enumeration value from the 


beginning of the given string and returns the value of the enumeration 
literal that corresponds to the sequence input. (LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or trailing spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAlNT_ERROR is raised. 


Parameter Descriptions: 

Item - The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type of X. 


B-8 




Appendix F, Cont. 

Examples: 


Suppose the following type was declared: 

Type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended_Value("red") « red 

X’Extended_V’alue(" green”) — green 

X’Extended_Value(" Purple") «purple 

X’Extended~Value(" GreEn ") - green 


'ExtendedWidth Attribute 
Usage: X'Extended Width 
Returns the width for subtype of X. 


For a prefix X that is a discrete type or subtype; this attribute is a 
function. This attribute yields the maximum image length over all values 
of the enumeration type or subtype X. 


Parameter Descriptions: 

There are no parameters to this function. Thu function returns the 
width of the largest (width) enumeration literal in the enumeration type 
specified by X. 

Examples: 

Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Z is (Xl, Xl 2 , X123, X1234); 

Then the following would be true: 

X’Extended _Width - 6 - "purple” 

Z’Ex tended Jw id th ■ 5 .. "X1234" 


B-9 



Appendix F, Cont. 


FLOATING POINT ATTRIBUTES 
’Extended image Attribute 

Usage: X’Extended_lmage(Item,Fore,Aft.Exp,Base.Based) 

Returns the image associated with Item as per the Text Io definition. The 
Text_Io definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If 
the value is negative then a minus sign is included in the integer part of 
the value of Item. If Exp is 0 then the integer part of the output has as 
many digits as are needed to represent the integer part of the value of 
Item or is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more than one parameter. The parameter Item must 
be a Real value. The resulting string is without underlines or trailing 
spaces. 


Parameter Descriptions: 

Item - The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for the 
integer part of the decimal representation in the return 
string. This includes a minus sign if the value is negative 
and the base with the if based notation is specified. If 
the integer part to be output has fewer characters than 
specified by Fore, then leading spaces are output first to 
make up the difference. If no Fore is specified then the 
default (2) value is assumed. 

Aft - The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 

If the delta of the type or subtype is greater than 0.1 then 
Aft is one. If no Aft is specified then the default 
(X'Digits-1) is assumed. If based notation is specified the 
trailing ’#’ is included in aft. 

Exp - The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then the 
default (3 ) is assumed. If Exp is 0 then no exponent is used. 


B-10 




Appendix F, Cont. 


Base - The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based - The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 


Then the following would be true: 


X'Extended 

X’Extended 

X'Extended 

X'Extended 

X'Extended 

X'Extended 

X'Extended 

X'Extended 


lmage(5.0) 
lmage( 5.0,1) 
lmage(-5.0,l) 
Image(5.0,2,0) 
Image(5.0,2,0,0) 
Image(5.0,2,0,0,2) 
lmage( 5.0,2,0,0,2, T rue) 
lmage(5.Q.?,2,3,2,T rue) 


" 5.0000E4-00" 
"5.0000E+00" 
"-S.OOOOE-cOO" 

" 5.0E-T-00" 

■ " 5.0" 

. " 101 . 0 " 

- " 2 # 101 . 0 #" 

- "2#l.l#E-r02" 


’Ex tended _Value Attribute 
Usage: X'Extended_VaIue(ltem) 

Returns the value associated with Item as per the Text Io definition. 

The Text_Io definition states that it skips any leading zeros, then reads 
a plus or minus sign if present then reads the string according to the 
syntax of a real literal. The return value is that which corresponds to 
the sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or trailing spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINT_ERROR is raised. 


B-ll 






Appendix F, Coot. 


Parameter Descriptions: 

Item - The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type 
of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range *10.0 .. 16.0; 

Then the following would be true: 

X , Extended_Value("5.0") - 5.0 

X’Extended_Value("0.5El") - 5.0 

X , Extended_Value("2#l .01 # E2") - 5.0 


’ExtendedDigits Attribute 
Usage: X’Extended_Digits(Baae) 

Returns the number of digits using base in the mantissa of model numbers 
of the subtype X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype is defined in. 

If no base is specified then the default (10) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X’Extended_Digits * 5 


B-12 




Appendix F, Cont. 

FIXED POINT ATTRIBUTES 
’Extended _lmage Attribute 

Usage: X‘Extended_Image(Item,Fore.Aft,Exp,Base,Based) 

Returns the image associated with Item as per the Text_Io definition. 

The Text_Io definition states that it outputs the value of the parameter 
Item as a decimal literal with the format defined by the other parameters. 

If the value is negative then a minus sign is included in the integer part 
of the value of Item. If Exp is 0 then the integer part of the output has 
as many digits as are needed to represent the integer part of the value of 
Item or is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more than one parameter. The parameter Item must 
be a Real value. The resulting string is without underlines or trailing 
spaces. 


Parameter Descriptions: 

Item - The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for the 
integer part of the decimal representation in the return 
string. This includes a minus sign if the value is negative 
and the base with the ’#’ if based notation is specified. If 
the integer part to be output has fewer characters than 
specified by Fore, then leading spaces are output first to 
make up the difference. If no Fore is specified then the 
default (2) value is assumed. 

Aft - The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 

If the delta of the type or subtype is greater than 0.1 then 
Aft is one. If no Aft is specified then the default 
(X’Digits-1) is assumed. If based notation is specified the 
trailing ’#’ is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading seros. If no Exp is specified then the 
default (3 ) is assumed. If Exp is 0 then no exponent is used. 


B-13 



i 


I 

1 

I 

» 


Appendix F, Cont. 

Base - The user may specify the base that the image is to be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based ~ The user may specify whether he wants the string returned to 
be in based notation or not. if no preference is specified 
then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X'Extended 
X’Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 


Image(5.0) 

Image(5.0,l) 

Image(-5.0,1) 

Image( 5.0.2.0) 

Image! 5.0.2,0,0) 
Image!5.0,2,0.0.2) 
Image(5.0.2.0,0,2,True) 
lmage!5.0,2,2,3,2,True) 


- " 5.00E+00" 

- "5.00E—00" 

- "-5.00E+00" 

* " 5.0E-MJ0" 

- " 5.0" 

- " 101 . 0 " 

« "2#101.0# B 
- "2#l.l#E+02" 


’Extended_Vaiue Attribute 
Usage: X'Extended_Value(Image) 

Returns the value associated with Item as per the Text lo definition. 

The Text_Io definition states that it skips any leading zeros, then reads 
a plus or minus sign if present then read the string according to the 
syntax of a real literal. The return value is that which corresponds to 
the sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or trailing spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINTERROR is raised. 


B-14 







Appendix F, Coot. 


Parameter Descriptions: 

Image — The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type 
of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended-ValueCS.O”) * 5.0 

X’Extended_Value("0.5El") * 5.0 

X’Extended_Value( "2 # 1.01 # E2") - 5.0 


'Extended_Fore Attribute 
Usage: X 'Extended _Fore(Base,Baaed) 

Returns the minimum number of characters required for the integer part of 
the based representation of X. 

Parameter Descriptions: 

Base - The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based — The user may specify whether he wants the string retucged to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 


B-15 




Appendix F, Cont. 


Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X'ExtendedFore » 3 - "-10" 

X’Extended_Fore(2) * 6 - " 10001" 


’Extended_Aft Attribute 

Usage: X’Extended _Aft(Base,Based) 

Returns the minimum number of characters required for the fractional part 
of the based representation of X. 


Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based - The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Aft - 1 - "1" from 0.1 

X’Extended_Aft(2) - 4 - "0001" from 2#0.0001# 


B-I6 









Appendix F, Cont. 

3. Specification of Package SYSTEM 

package System is 

TYPE Address is Access Integer: 

TYPE Subprogram_Value is PRIVATE: 

TYPE Name IS (TeleGen2); 

SystemName : CONSTANT name :*= TELEGEN2; 

Storage_Unit : CONSTANT 8; 

Memory~_Si*e : CONSTANT (2 ** 31) - 1; 

— System-Dependent Named Numbers: 

Min Int : CONSTANT :- -(2 ** 31); 

Max Jnt : CONSTANT :- (2 ** 31) - 1; 

Max_Digits : CONSTANT :«■ 15; 

Max Mantissa : CONSTANT :** 31; 

Fine_Ddta : CONSTANT 1.0 / (2 ** Max_Mantissa); 
Tick : CONSTANT :- 10.0E-3; 


- Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63; 
PRIVATE 

TYPE Subprogram_Value IS 
RECORD 

Procaddr : Address; 

Static Jink : Address; 

Global Jrame : Address; 

END RECORD; 


END System; 







Appendix F, Cont. 


4. Restrictions on Representation Clauses 

The hardware needs a minimum of 32 bits to represent floating point 
and access types. Therefore, specifying a size of less than 32 bits cannot 
be handled simply by the underlying hardware (LRM 13.1 (10)). 

The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer types 'SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for composite types 'SIZE attribute (LRM 13.2(a) 

Size clauses for composite types are rejected when the 
specified size implies compression of composite components. 

Length Clauses: for access types 'STORAGE SIZE attribute (LRM 13.2(b)) 

Length Clauses: for tasks types 'STORAGE SIZE attribute (LRM 13.2(c)) 

Length Clauses: for fixed point types 'SMALL attribute (LRM 13.2(d)) 

Enumeration Clauses: for character and enumeration types other than 
boolean (LRM 13.3) 

Record representation Clauses (LRM 13.4) with following constraints: 

- Each component of the record must be specified with 
a component clause. 

- The alignment of the record is restricted to mod 2, 
word (16 bit)aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries and external subprograms 
(pragma INTERFACE used) (LRM 13.5(a)(c)) 

This compiler does NOT support the following representation clauses: 

Enumeration Clauses: for boolean (LRM 13.3) 

Address Clauses: for packages, task units, and non-external Ada 
subprograms (LRM 13.5(b)) 


B-18 





Appendix F, Cont. 

5. Implementation dependent naming conventions 

There are no implementation-generated names denoting 
implementation dependent components. 


6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted 
as the first storage unit of the object. 


7. Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between any types or subtypes uni - ^ 
the target type is an unconstrained record or array type. 


8. I/O Package Characteristics 

Sequential _IO and Direct _IO cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXT_IO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2 J47_483_646; 

In TEXT_IO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..1000; 

According to the latest interpretation of the LRM. during a 
TEXT_IO.Get_Line call, if the buffer passed in has been filled, 
the call is completed and any succeeding characters and/or 
terminators (e.g., line, page, or end-of-file) will not be read. 

The first Get_Line call will read the line up to but not 
including the end-of-line mark, and the second Get_Line will read 
and skip the end-of-line mark left by the first read. 




APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
vith a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
belov. 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


$BIG_ID1 (1..199 -> 'A', 200 -> '1') 

An identifier the size of the 
maximum input line length vhich 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..199 -> 'A', 200 -> '2') 

An identifier the size of the 
maximum input line length vhich 
is identical to $BIG_ID1 except 
for the last charactir. 


$BIG ID3 

An identifier the size of the 
maximum input line length vhich 
is identical to $BIG_ID4 except 
for a character near~the middle. 


(1..99 -> 'AS 100 -> '3', 
101..200 -> 'A') 


C-l 








TEST PARAMETERS 


Name and Meaning _ 

$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near~the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
vith enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 vith enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated vith $BIG_STRING2 
yields the image of $BIG_ID1. 

$BIG_STRING2 

A string literal which vhen 
catenated to the end of 
$BIG STRING1 yields the image of 
$BIG~ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A ~ universal integer 

literal vhose value is 
TEXTJCO.COUNT' LAST. 

$DEFAULT_MEM_SIZE 

An integer literal vhose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal vhose value 
is SYSTEM. ST0RAGE_UNIT. 


Value 


(1..99 -> 'A', 100 -> '4', 
101..200 -> 'A') 


(1..197 -> 'O', 198..200 «> "298") 


(1..195 -> 'O', 196..200 -> "690.0") 


(1 -> '"', 2..101 -> 'A', 102 -> '"') 


(1 -> 2..100 -> 'A', 

101 -> ' 1 ', 102 -> '"') 


(1..180 -> ' ') 

2147483646 

2147483647 

8 


C-2 





TEST PARAMETERS 


Name and Meaning _ Value _ 

$DEFAULT_SYS NAME TELEGEN2 

The ~ value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 2#1.0#E-31 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 1000 

A ~ universal integer 

literal whose value is 
TEXT_I0.FIELD'LAST. 

SFIXEDNAME N0_SUCH_TYPE 

The name of a predefined 
fixed-point type other than 
DURATION. 

SFLOATNAME N0_SUCH_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SHORTFLOAT, or 

LONGFLOAT. 

SGREATERTHANDURATION 100000.0 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

SGREATER THAN_DURATION-BASE LAST 131073.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

SHIGHPRIORITY 63 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 BADCHAR**/* 

An 'external - file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 /N0NAME/DIRECT0RY 

An 'external' file naae which 
is too long. 

$INTEGER_FIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 








TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 32767 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASEFIRST -131073.0 

A~universal real literal that is 
less than DURATION'BASE'FIRST. 

SLOVPRIORITY 0 

An integer literal vhose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

SMANTISSADOC 31 

An integer literal whose value 
is SYSTEM.MAXMANTISSA. 

$MAX DIGITS 15 

Haximum digits supported for 
floating-point types. 

$MAX IN LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL (1..2 -> "2:", 3..197 -> 'O', 

A universal integer based 198..200 «> ”11:") 
literal whose value is 2111# 
with enough leading zeroes in 
the mantissa to be $MAX_IN_LEN 
long. 


C-4 






TEST PARAMETERS 


Nang and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A univerial real based literal 
vhose value is 16:F.E: vith 
enough leading zeroes in the 
nantissa to be $MAX_IN_LEN long. 

$MAX_STRING t LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
vhose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An inleger literal vhose value 
is the number of bits required 
to hold a task object vhich has 
no entries, no declarations, and 
"NULL;” as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT FLOAT, SBORTINTEGER, 

LONG PLOAT, - or LONGINTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal vhose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NBV_MEM_SIZE 

An integer literal vhose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_SlZE. If there is 
no other "value, then use 
$DEPAULT_MEM_SIZE. 


Value _ 

(1..3 «> "16:", 4..196 -> 'O', 

197..200 -> "F.E:") 

(1 -> '"', 2..199 -> 'A', 200 «> '"') 

-2147483648 

32 

NO_SUCH_TYPE_AVAILABLE 

TELEGEN2 

16#FFFFFFFE# 

2147483647 


C-5 




I 


TEST PARAMETERS 


Name and Meaning _ 

$NEV_STOR_UNIT 

An integer literal vhose value 
is a permitted argument for 
pragma STORAGE UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other - permitted value, then 
use value of SYSTEM.STORAGE_UNIT 

$NEV_SYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal vhose value 
is the number of bits required 
to hold a task object vhich has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal vhose value is 
SYSTEM.TICK. 


Value 


8 


TELEGEN2 


32 


0.01 


C-6 








APPENDIX D 


WITHDRAWN TESTS 


Some tests are vlthdravn froa the ACVC because they do not confora to the 
Ada Standard. The following 44 tests had been vlthdravn at the tiae of 
validation testing for the reasons indicated. A reference of the fora 
Al-ddddd is to an Ada Coaaentary. 


a. E28005C: This test expects that the string ”— TOP OP PAGE. —63" of 
line 204 vlll appear at the top of the listing page due to a pragaa 
PAGE in line 203; but line 203 contains text that follovs the pragaa, 
and it is this text that aust appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a ainiaua size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective vait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation nay use 
interleaved execution in such a vay that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 
results in a call to REPORT.FAILED at one of lines 52 or 56.~ 

e. BC3009B; This test vrongly expects that circular instantiations vlll 
be detected in several compilation units even though none of the units 
is illegal vlth respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test vrongly requires that an array object's size be no 
greater than 10 although its subtype's size vas specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests); These 


D-l 







WITHDRAWN TESTS 


tests vrongly attempt to check the size of objects of a derived type 
(for vhich a 'SIZE length clause is given) by passing then to a 
derived subprogram (vhich implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the VG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CDS0110 (5 tests): These tests 

assume that dependent tasks vill terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test vrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

a. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; hovever, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change nay be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, vhose interpretation is considered problematic by the WG9 
ARG. 

o« CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERR0R is expected to be 
raised by an attempt to read one object* as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 








WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, vhen tvo files are 
associated vith the same external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_OF_LINE and 

END_OF_PAGE that have no parameter: these calls vere intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107. 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation vlll generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 







APPENDIX E 

COMPILER OPTIONS AS SUPPLIED BY TELESOFT 

Compiler: Motorola VME Delta Series TeleGen2 Ada Cross Compilation 

System Version 1.4 


ACVC Version: 1.10 




Ada Compiler 


The Ada compiler is invoked via the ada command. The general syntax of the 
command is: 

ada {<option>} <input_spec> 


where: <inpnt_sp«c> is one or more Ada source files and/or an input*list 
file (<name>.ilf) that lists the names of Ada source files. Note: 
“.ada” will be appended to a source file name if no suffix is present. 


Option | 

Action 

Default 

Common options: 



-l(ibfile <libname> 

Specify name of library file. 

-1 liblst-aib 

—t(emplib <sublib>{,_.} 

Specify temporary list of sublibs. 

None 

—V(sp*ce_size <vaiue> 

Specify sue of virtual space (Kbytes). 

-V 2000 

—v(erbose 

Output progress messages. 

(Opposite) 

-L(ist 

Generate source/error listing. (Can* 
not be used with - F). 

(Opposite) 

-F(iles_only_em 

Generate listing containing errors 
only. (Cannot be used with —L). 

(Opposite) 

-C(ontext <value> 

Request <value > context lines with 
each error reported. 

-C l 

—S(ouree_*sm 

Generate source/assembly listing. 

(Opposite) 

-b(ind_only 

Do not link. Must be used with — m. 

(Opposite) 

—c(pu_type <vaJue> 

Generate code for CPU type specified 
(00. 10, or 20 for 68000 . 68010 , or 
68020) 

—« 20 

-E(rror_abort <vaiue> 

Abort compilation after specified 
number of errors or warnings. 

-E 999 

-e(rrorj_only 

Run front end only (for error checks). 

Full compile 

—i(nhibit <keyt> 

Suppress checks and source informa¬ 
tion in object coda 

(Opposite) 

-d(ebug 

Include debug information with ob* 
jeeL (-d automatically sets -A) 

(Oppoeite) 

-k(«P 

Retain intermediate representation of 
unit. Must be used if «r or sopt is to 

(Opposite) 


be used on the unit. 


—mi sin <unit> 

Produce executable code for <unit>. 

(Opposite) 

-0(ptimi*e <key*> 

Optimise coda 

(Opposite) 

-u(pdate_lib <key> 

<key> " ■: update library after each 
source is processed; <key> 1; up¬ 
date after compiler invocation. 

-u s 


-x(ecution .profile 

Output profile code in object. 

(Opposite) 


















Ada Linker 


The Ada linker is invoked via the aid command. The linker links object code 
to produce a load module. Three such types of load module can be generated: 
Execute Form (default), Motorola S-Record, and IEEE format. The syntax of 
the command is: 

aid {<option>} <unit> 


where: <option> is none or more of the options in the table below. 

<iwit> is the name of the main program unit whose object code is to 
be bound and linked; <unit> is required. 


Option 

Action 

Default 

Common options 
-l(ibfile <iibname> 

—t(emplib <sublib>{,_.} 
-V(space_sise <value> 
-v(erbose 

Specify name of iibraiy file. 

Specify temporary list of subiibs. 
Specify size of virtual space (Kbytes). 
Output progress messages. 

-1 tibist.alb 
None 
-V 2000 
(Opposite) 

-a( dditionai _op t ions 
<file> 

Take direction lrom commands in die 
named <file>. 

(Opposite) 


Specify start location of limceo out* 
put. Values may be in decimal, 
%Xhex, or 16*hexd. 

-B 0 

BiBUMH 

Call the binoer only; produce elabora* 
tion code and link script. 

Linker too 

—c(pu_typ« <vaiue> 

Specify CPU type Values are 00, 10, 
20 (for MC68000. MC88010, MC68020). 

—c 20 

-d(ebug 

Include debug information in load 
module. Ignored if -? used. 

ihi 

-f(ormat i<key>| |Put output module in <key> format. 

-f E 

-g(cneratejofm 
< lib .entity > 

Proauce tinned object form of 
<lib entityx 

(Opposite) 


Generate link map from <subop- 
tion>. 

HH 

-ofutput Joad <fiie> 

Generate load module named <file>. 

ibT wmm 

-S(“asmjistmg" 

Generate aaaembiy listing for... 





























Ada Linker (eont’d) 


— Continued from last page — 


Option 

Action 

Default 

-T(r»c*b*ck < value? 

Set depth of exception tnceback to 
< value? levels. 

-T IS 

-xfecution .profile 

Include profile information in load 
module. 

mmjymi 

Tasking options: 

-D(«lay JionPmmpt 

Specify non-preemptive delay. 

Preemptive 

-X(c*ption_5how 

Report unhandled exceptions in tasks. 

(Opposite) 

-•(“timeslice” <value> 

Limit task exacution time to <veiue> 
msec 

-» 0 

-Y <value> 

Allocate <value> bytes (long) lor task 
stack. 

-Y 8192 

-y <Taiue> 

Allocate < value? bytes (natural) for 
stack guard. 

-y 1024 


















