Form Approved 
OPMNo. 


AD-A273 785 ation page 


f» 1 hour par raoponoa. including tho bm« tor rawana n j motrueliona, aa a rc h ing 01*1109 data 
Sand o ptnmonU regarding the budon oobrndo or any alhor aapa d el tha cottod ion ol idarmatan. iSje 
iraaorda tar tntormdton Oparattom and Raporti. 121S J aH ataon Damp U gha ray . Suaa 1204. ArWgior. v 
M an ageme nt and Budgal. Waahingign, DC 20603 



_ 

VADS Sun4 =) PARAGOf^VAda-110-40782, Version 6.2, Host: Sun 
SPARCstation 2 , Target: Intel PARAGON Supercomputer, OSF/1 
Release 1.0.3 Server 1.1 PT10.7.6(T10.4), 930901W1.11325 


6 . 

Authors: 

Wright-Patterson AFB 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 



8. PERFORMING 
ORGANIZATION 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301 *3080 


10. SPONSORING'MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 


13. (Maximum 200 

VADS Sun 4 =) PARAG0N/VAda-110-40782, Version 6.2 , Host: Sun SPARCstation 2 

Target: Intel PARAGON Sumpercomputer, 0SF/1 Release 1.0.3, Server 1.1 PT10.7.6(T10.4) 
ACVC 1.11 



y II :■ 


Vo EC 14 19931 

<.*/ L 


14. SUBJECT 

Ada programming language, Ada Compiler Val. 

• Testi "9. Ads Val. 

Summary Report, Ada Comp 
Office, Ada Val. Facili 

17. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 

18. SECURITY 

UNCLASSIFIED 

19. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 


15. NUMBER OF 



tandard Form 298, (Rev. 2 
Prescribed by ANSI Std. 















AW Control Number: AW-VSR-572.0893 
Date VSR Completed: September 28, 1993 

93-07-23-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 930901W1.11325 
Verdix Corporation 

VADS Sun4 -> PARAGCN/VAda-110-40782, Version 6.2 
Sun SPARCstation 2 under SunOS 4.1.3 -> 
Intel PARAGON Supercomputer, OSF/1 Release 1.0.3 


(Final) 


Prepared By: 

Ada Validation Facility 
645 C CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 


93-30267 

lllllHlffll 


93 12 13 





Certificate Information 


The following Ada incrementation was tested and determined to pass ACVC 
1.11. Testing was completed mi September 1, 1993. 

Compiler Name and Version: VADS Sun4 -> PARAGON/VAda-110-40782, Version 6.2 

Host Cosputer System: Sun SPARCstation 2 

under SunOS 4.1.3 

Target Computer System: Intel PARAGON Supercomputer, OSF/1 Release 1.0.3 

Server 1.1 PT10.7.6(T10.4) 

Customer Agreement Number: 93-07-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

930901W1.11325 is awarded to Verdix Corporation. This certificate expires 

two years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


QvXx.. <f -f c_u 

Ada Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-6503 



Ada VaT 
Director, CC< 
Institute 
Alexandria VA 


gtfa- 


Organization 

iter and Software Engineering Division 
Defense Analyses 
22311 


(yBjJ: ^- 

AdaJoint Program Office 
M. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Washington DC 20301 


DTIC QUALITY INSPECTED 3 


Hceeasion F or 

STIS GP'AI 
DTIC TAB 
Unarrou: ''ed 
Ju .cation. 



A 


By--- 

: Distribut ion/ 

Av^Ufbllity_Codes 
lAval 1 . and/or 
Slat Cps^lal 

it>| I 



* 


ATTACHMENT! 


DECLARATION OF CONFORMANCE 
Customer. Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VADS Sun4 => PARAGON, Version 6.2, 
VAda-110-40782 

Host Computer System: Sun SPARCstadon 2, SunOS 4.1.3 

Target Computer System: Intel PARAGON Supercomputer, 

OSF/1 Release 1.0.3 Server 1.1 PT10.7.6(T10.4) 


Customer's Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1813A in the implementation 
listed above. 



Customer Signature 


Date 



TABLE OF CONTENTS 


CHAPTER 


INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

1.2 REFERENCES. 

1.3 ACVC TEST CLASSES . 

1.4 DEFINITION OF TERMS . 


CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS . 

2.2 INAPPLICABLE TESTS 

2.3 TEST MODIFICATIONS 


CHAPTER 3 PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT . . 

3.2 SUMMARY OF TEST RESULTS 

3.3 TEST EXECUTION. 


APPENDIX A MACRO PARAMETERS 


APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 




















CHAPTER 1 


INTROD U CTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This validation Sunnary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 u.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 









INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/Mlt-Sro-lSlSlA, February 1$&3 and ISO 8652-1587. 

[Pro90] Ada Compiler validation Procedures , version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, c, o, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result w hen t hey 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by seme of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately ccepiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix a. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


L-3 







nnRQnjCTIGN 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an 

agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
which validation status is realized. 

Host Computer A computer system where Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRN The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration lPro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

Withdrawn A test found to be incorrect and not vised in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 







IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..2 (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type IX3NG_INTEGER; for 
this implementation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCNG_FLCAT, or SBOKT_FLQAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A. .B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE_CVERFLGWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 






IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following table check that USEJERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL IO 

CE2102F 

CREATE 

mour FILE 

DIRECT IO 

CE2102I 

CREATE 

IN FILE 

DIRECT IO 

CE2102J 

CREATE 

OUT FILE 

DIRECT IO 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL IO 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL IO 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL IO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL IO 

CE2102R 

OPEN 

INOUT FILE 

DIRECT IO 

CE2102S 

RESET 

INOUT FILE 

DIRECT IO 

CE2102T 

OPEN 

IN FILE 

DIRECT"IO 

CE2102U 

RESET 

IN FILE 

DIRECT IO 

CE2102V 

OPEN 

OUT FILE 

DIRECT IO 

CE2102W 

RESET 

OUT FILE 

DIRECT IO 

CE3102E 

CREATE 

IN FILS 

TEXT l5 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

delete 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT IO. 


CE2203A checks that WRITE raises USE_ERRDR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_EKROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SETJLINE^LENGTH and SET_PAG£_LENGTH raise 
USEJERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUTJERRQR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 







IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C (3 Tests) were graded passed by 

Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 
The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of L£NGTH_CHECK—i.e, the allowed Report.Failed messages have the 
g*r.aral form: 

" * CHECK ON REPRESENTATION FOR CTYPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT (line 
36). This implemenation does not support pragma INTERFACE for procedures 
with parameters of mode OUT. The test was modified by commenting out line 
36 and 40; the modified test was passed. 


2-4 








CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For* technical and sales information about this Ada implementation, contact: 

Corey Ashford 
Verdix Corporation 
1600 N.W. Compton Drive 
Aloha, OR 97006-6905 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 










PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3805 

b) Toted Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 




APPENDIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where T represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of v 

$BIG_ID1 (1..V-1 «> 'A', V-> '1') 

$BIG_ID2 (1..V-1 -> 'A', V «> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-l-V/2 «> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-l-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIGJREAL_LIT (l..V-5-> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-l-V/2 -> 'A') & '1' & »"* 

$BLANKS (1..V-20 ) 

$MAX_LEW_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITEPAL 

"16:" & (1..V-7 -> '0') & "F.E:" 









MACRO PARAMETERS 


$MAXJSTRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_64 7 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

sysv860_self_cube 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTfM."+" (16#40#) 

SENTRY ; VDDRESS1 

SYSTEM."+"(16#80|) 

$ENTRY_ADDRESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

9 t 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLQAT_NAME 

NO_SUCH_TYPE 

$PORM_STRING 

Wit 

$FQRM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 


100_000.0 

$GREATER THAN DURATION BASE LAST 

T0_00ff_000.0 

SGREATER THAN FLOAT BASE LAST 

l.SE+308 

$GREATER THAN FLOAT SAFE LARGE 
“ “ 5.ZJE307 

A-2 











MOO PARAMETERS 


$GREAXER THAN SHORT FLOAT SAFE LARGE 
“ 9.0137 ~ 

$HIGH_PRIORITY 99 

$ZLLBGAL EXTER NAL FILE NAMEl 

w /i 11egal/f i1e_naoe/2}]%2102c.dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

ir /ill«gal/£ile_naae/CE2102C*. dat" 

$ INAPPROPRIATE LINE LENGTH 

-1 

$ INAPPROPRIATE PAGE LENGTH 

“ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$ INTEGER_LAST_PLUS__1 2 147 483 648 

$INTERFACE_LANGUACT C 

$LESS_THAN_DURATICN -100_000.0 

$LESS_THAN_DURATTCN_BASE FIRST 

-lff_000_000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LQW_PRIORITY 0 

$MACHINE_CODE STATEMENT 

CCOE__0*(OP -> NOP); 

$MACLINEJCCDE_TYPE CCDE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483J 48 

$NAME 


TINT INTEGER 







MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECI FXCATXQN1 

$NAME_SPECIFICAXIGN2 

$NAME__SPECIFICATXCN3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE__TERMINATOR 

$RECORD_DEFINlTION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_S70RAGE SIZE 

STICK 

$VARIABLEADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR_PRAGMA 


*ysv860_sel f_cube 

A»rAe*t_suit®s/aiips_acvcl. ll/c/e/X212GA 
A*rA«at_sui tes/taips_acvcl. ll/c/e/X2120B 
AsrAast_sui tea/aips_acvcl. ll/c/e/X3119A 
164F000000E# 

16_777_216 

8 

sysv860_self_cube 
ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

32 

2048 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 







APPENDIX B 

COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 

Syntax 

ada [options] [source_file]... [object_file.o]... 

Arguments 

object file.o non-Ada object file names. These files will be passed 
~ an to the linker and will be linked with the specified 

Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
compiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "filc_name.das" 
s Disassemble the unit spec. 

-a file name 

(archive) Treat file name as an object archive file created 
by ar. Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCompiler Ada only) 

(static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dynamic. 


B-l 









COMPILATION SYSTEM OPTIONS 


—c suppress the control messages generated when pragna PACT 
and/or pragma LIST are encountered. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-DM.0 

-DM.1 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DM.1] (HP PA-RISC only) 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
narking any defined units as uncompiled. The -d option is 
used by a.nake to establish dependencies among new files. 

This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the ran# error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated By error file. Note that there is 
no space between the -Ef and e?ror_file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

~Elferror_file source_file 

(error listing) Sane as the -Ef option, except that a source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 

B-2 








COMPILATION SYSTEM OPTIONS 


overrides the SHARE_BGDY INFO directive and the SHARE_CODE 
or SHARE_BODY pragmas. 

—0( 0—9 ] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-O full optimization 

-O0 no optimization (use for debugging) 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global cannon subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and aw pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 
-06 add one more pass of induction expression reduction 
-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option, executable file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADSJLibrary 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
recompilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 


B-4 







COMPILATION SYSTEM OPTIONS 


-T (timing) Print timing information for the compilation. 

-v (verbose) Print compiler version number, date and time of 
compilation, name of file compiled, command input line, 
total compilation time and error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

The ada command executes the Ada compiler and compiles the named Ada 
source file. The file must reside in a VADS library directory, Hie 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
conpiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second compilation will 
overwrite the first. For example, the compilation of 
/usr/directory2/foo.a -L /usr/vads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L /usr/vads/test in the 
VADS library /usr/vads/test. 

Diagnostics 


B-5 









COMPILATION SYSTEM OPTIONS 


The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph madder enclosed in 
parentheses. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

Syntax 

a.Id [options] unit_name [linkerjoptions] 

Arguments 

linkerjoptions 

All arguments after unitjname are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id command. These are: 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler_ 

should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. (VADSself only) 

-Du unit list 

(uni¥s) Traces the addition of indirect dependencies to the named 
units. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. (VADSself only) 

-DX (debug) Debug memory overflow (use in cases where linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 


B-6 





COMPILATION SYSTEM OPTIONS 


-E unit name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present when many object 
files are being linked. (SGI only) 

-L library name 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

—v (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_name 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD. INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada compiler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 


B-7 







COMPILATION SYSTEM OPTIONS 


a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WITHn 
directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:obj ect_file: 

WITH2 s LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a. Id is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 


B-8 






APPENDIX C 

APPENDIX F OP THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer, unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type SBQRT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282EJ+38; 
type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-l 











APPENDIX F OP TOE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_CNLY Pragma 

The INLINEjGNLY pragma, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjGNLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAMJERROR will be raised at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bodies for which no actual Ada 
body can be provided, for example the MACHINEjCODE package. 

1.4. SHAREjCODE Pragma 

The SHAREjCODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 

C-2 










APPENDIX F OF THE Ada STANDARD 


share code generated for a generic instantiation with code 
generated for other instantiations of the sane generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the imple¬ 
mentation and has Bie same effect as SHARE_CODE. It is 
included for compatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the INAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERRGR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE name pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLI CIT_C0DE Pragma 

Takes one of the identifiers GN or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 


C-3 





APPENDIX F OF THE Ada STANDARD 


procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 

1.9. OPTIMIZEjCODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is GN. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NGN REENTRANT 


This pragma takes one argument which can be the name of 

C-4 








APPENDIX F OF THE Ada STANDARD 


either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
isations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOYJEXABORATED 

This pragma can oily appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognised by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE (SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body, The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERR0R at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 

C-5 






APPENDIX F OP TOE Ada STANDARD 


Ada RM. 


2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 


2.15. STORAGEJWIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLOW_CHECK cannot be 
supressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corre spon ding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINEjGODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The va lue o f this attribute 
is of the type ADDRESS in the package SYSTEM. 

C-6 









APPENDIX F OF THE Ada STANDARD 


4. Specification Of Package SYSTEM 


with UNSI GNED TYPES; 
package SYSTEM is 

pragma suppress (AL LjCHE CKS); 
pragma suppress(EXCEPT!CN_TABLES); 
pragma not_elaborated; 

type NAME is ( sysv860_self_cube ); 

SYSTEMJNAME : constant NAME sysv860_self_cube; 

STORAGE UNIT : constant 8; 

MEM0RY_3lZE : constant s- 16_777_216? 

— System-Dependent Named Numbers 

MIN_INT : constant -2 147 483 648; 

MAX_INT s constant s- 2 T47_j83j&47; 

MAXJDIGITS : constant 1?; 

MAX MANTISSA : constant 31; 

FIf®_DELTA : constant 2.0**(-31); 

TICK : constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer 1024; 

type ADDRESS is private; 

function ">" (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<" (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return INTEGER; 

function "+" (A: ADDRESS; I: INTEGER) return ADDRESS; 

function (A: ADDRESS; I: I N TE G ER) return ADDRESS; 

function "+" (I; UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 

function MEMORY_ADORESS _ 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS renames 

NOADDR : constant ADDRESS; 

type TASK ID is private; 

NO TASK ID : constant TASK ID; 


C-7 









APPENDIX F OP THE Ada STANDARD 


type PASSIVE TASK ID is private; 

NO_PASSrVE_TASK_ID : constant PASSIVE_TASK_ID; 

subtype SIG STATUSJT is INTEGER; 

SIG_STATUS_3lZE: constant 4; 

type PROGRAM id is private; 

NO_PROGRAM_lI> j constant PROGRAMED; 

type BYTE ORDER T is ( 
lTttle Bjdian, 

BIG El®IAN 

); 

BYTEJORDER: constant BYTE_ORDER_T BIG_ENDIAN; 
type LONG_ADDRESS is private; 

NO_LCNG_ADDR : constant LCNGADDRESS; 

function "+" (A: LCNG_ADDRESS; I: INTEGER) return LCNGADDRESS; 
function (A: LCNG_ADORESS; I: INTEGER) return LCNG ADDRESS; 

function MAKE_LCNG_ADORESS (A: ADDRESS) return LCNGADDRESS; 

function LOCALIZE (A: LONG_ADDRESS ; BYTEJSIZE : INTEGER) return ADDRESS; 

function STATCCNOFfA: LGNG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype DAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPQRTS_INVOCATICN BY_AJDORESS : constant BOOLEAN TRUE; 

SUPPORTS PREELABCRAflGN : constant BOOLEAN TRUE; 

MAKE_ACC®SS_SUPPORIED : constant BOOLEAN :« TRUE; 

— Arguments to the CIFO pragma INTERRUPT TASK, 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 


private 

type ADDRESS is new UNSI(2<ED_TYPES.UNSIGNED_INTECHR; 

NO ADOR : constant ADDRESS 0; 

pragma BUILT IN(">"); 
pragma BUILT - IN("<"); 
pragma BUILT - IN( ">-"); 
pragma BUILT - IN("<-"); 
pragma BUILT~IN(); 


C-8 








APPENDIX r or TOE Ada STANDARD 


pragma KJILT_IN("+") ; 

type TASK ID is new UNSIGNED TYPES.UNSIGNEDJCNTEGER; 
N0_TASK_l5 : constant TASK_l5 0; 

type PASSIVE TASK_ID is new UNSIGNED TYPES.UNSK3'ffiD_INTBG£R; 
NO_PASSrVE_lSSK_ID : constant PASSIV®TASK_ID 0; 

type PROGRAM ID is new UNSIGNED_TYPES.UNSIGNED INTEGER; 
N0_PR0GRAM_l5 : constant PROGRAMED 0; 


type LCNG_ADCR£SS is new UNSIGNED_TYPES. UNSIGNED_INTBGER; 
NO LONG ADOR : constant LONG ADDRESS 0; 


pragma BUILT_IN(MAKE_LGNG_ADDRESS); 
pragma BUILT_IN( LOCALIZE} ; 
pragma BUILT_IN(STATION_OF); 


end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record cooponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 


C-9 





« 

APPENDIX F OP THE Ada STANDARD 


the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry nay not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction cm normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are iaposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 


C-10 







APPENDIX F OF THE Ada STANDARD 


The general definition of the package MACHINE_C0DE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


OODE_n'( opcode, operand {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

C0DE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_C0DE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE CODE must be static expressions, string literals, or 
the functions defined in MACHINEJOGDE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 


None. 


9. Restrictions on unchecked Deallocations 


C-ll 





APPENDIX F OF THE Ada STANDARD 


None. 


10. implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STQRAGEJUNITS) when the size 
of ELEMENTJTYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT TYPE'SIZE is 
very large, MAX REC SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
x 1024 x STORAGEJUNIT bits. DIRECT_IO will raise USE_ERRGR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTTAL_IO use the value MAX_RECjSIZE 
as the record size (expressed in STQRAGEJUNITS) when the 
size of ELEMENTJTYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. it is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 x STQRAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STQRAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 


C-12 





APPENDIX F OF THE Ada STANDARD 


In the absence of an explicit STCRAGE_SIZE length attribute 
the default collection size for an access type is 100 tines 
the size of the designated type. This is the value returned 
by T' STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGEJUNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 





