

REPORT DOCUMENTATION PAGE 

FormAppmmd fMl 

opMNo \gy 

yuMiewjaolmtewraminhia Mliclloi»oHnlDniirtonaa»t»iMMdioai«arm i haur»ariai>onaa, unwi pwtiwiim 

md lainMininQthadHanaidid.andnw^aii^nthaaalaclionalIntewiillon. landaDiwmnn lagaa ja JS Q|l|^ •■Hm nrtmfcm 

■aO—rtrtiititng ihii tiinftn tit Wa^ilnglnn HMiftiiiatltn aanrini rtiiartnrai la InlnmiM.i #4 M 8— AA ^ # J Oww ftrtjiiiginn. V< 

MBta-aaoa. and a Ww OWaa ol Inlowwaien and WagulMom Alla»i. OHiaa al Maagwunl and a»id» fnu miiaai H|l| Mill III) IMI 

l.AGENCVUSE (Ciaw TTIEPeRT 

V 

940325S1.11353, AVF; 94ddc500_3E 

Compiler: DACS Sun SPARC/Solaris to Pentium PM Bare Ada Cross 
Compiler System with Rate Monotonlc Scheduling, Version 4.6.4 

19. funding 

6. Hdtftors: 

National Institute of Standards and Technology 

Gaithersburg, Maryland 

7. PERFORMING ORGANIZATION NAME(S) AND 

85H8?SJ 551“58SI Technology 

Gaithersburg, Maryland 20899 ^ 

8. performing 

ORGANIZATION 

9. SPONSORINGiMONITORING AGENCY NAME(S) AND 

Ada Joint Program Office \3 \ ^ m 

The Pentagon, Rn 3E118 m M 

Washington, DC 20301-3080 

10. SPONSORINQAIONitORiNG 

AGENCY 

..i 

TT^uPRImEnTaRy ^- 

.ye ' 

12a. DlSTRIBUTKMrAVAILABILmr 

Approved for Public Release; c distribution unlimited 

12t>. DISTRIBUTION 

13. (Maximum 200 

Host; Sun SPARCJassic (under Solaris, Release 2.1) 

Target: Intel Xpress Desktop (product number XBASE6E4F-B, with Pentium cpu), 
operating as a bare machine (bare machine) 


IS. numbefTST' 


14. subject 


Ada programming linguage, Ada Compler Validation Summary Report, A(W 

^ ^ 2 . 4*^1 X 4«_ 4 _ A • a. « J* 


CCURlVir 1 18. SEC 


Val. Testing. Ada Val. Office. Ada Val. 


17. SECURtW 
CLASSIFICATK3N 

UNCLASSiFED 


19. SECuArhr 
CLASSV^ICATION 

UNCLASSIFED 


20..UMITATK3Na^ 


18. SECURITY 

UNCLASSIFED 


NGM 




A 


UNCLASSIFED 
Standard Form 2BB, (h«v. i-ks) 
Pnaodbad fay ANSI Sid. 










AVF Control Muabor: NIST94DDC500 3E 1.11 


Cortificat* Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on March 25, 1994. 

Compiler Name emd Version: DACS Sun SPARC/Solaris to Pentium PM Bare 

Ada Cross Compiler System with Rate 
Monotonic Scheduling, Version 4.6.4 


Host Computer System: 


Sun SPARCclassic running under Soleuris, 
Release 2.1 


Target Computer System: 


Intel Pentium (operated as Bare Machine) 
based in Xpress Desktop (Intel product 
number: XBASE6E4F-B) 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
940325S1.11353 is awarded to ODC-I. This certificate expires 2 years 
after ANSI/MIL-STO-1815B is approved by ANSI. 

This report has been reviewed and is approved. 


Adh Vdliddt ion/facility Ada Validation F^illty 

Dr. David K. JMferson Mr. L. Arnold ^rtmson 

Chief, Information Systems Manager, Software Standards 

Engineering Division (ISED) Validation Group 

Computer Systems Ledsoratory (CSL) 

National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Mcuryland 20899 
U.S.A. 


Ada VaUdAtibiY Organization 
Direcror, Nfoo^uter & Software 
Engiheering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


'Ada Joint Program Office 
David R. Basel 
Deputy Director, 

Ada Joint Program Office 
Defense Information Systems Agency, 
Center for Information Management 
Washington DC 20301 


U.S.A. 


94-16089 




94 5 27 05g 







AVF Control Number: NIST94DDC500_3E_1.11 
DATE COMPLETED 

BEFORE ON-SITE: 94-03-18 
AFTER ON-SITE: 94-03-28 

REVISIONS: 94-04-11 ^ _ 

Acce sion For 

NTIS CRA&I 
DTIC TAB 
Unannounced 
Justification 


By 


Distribution / 

Availability Codes 

Dist 

6 ± 

Avail and / or 

Special 


Ada COMPILER |J0./ 

VALIDATION SUMMARY REPORT: I/* / 

Certificate Number: 940325S1.11353 
DDC-I 

DACS Sun SPARC/Solaris to Pentium PM Bare Ada 
Cross Compiler System with Rate Monotonic Scheduling 

Version 4.6.4 

Sun SPARCclassic -> Intel Pentium (operated as Bare Machine) 
based in Xpress Desktop (Intel product number: XBASE6E4F-B) 


Prepared By: 

Software Standards Validation Group 
Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 
U.S.A. 












AVF Control NUBbor: NIST94DOC500 3E 1.11 


Cortlflcato Information 


Tha following Ada implamantation was tastad and datarminad to pass ACVC 
1.11. Tasting was coaplatad on March 25, 1994. 

Compilar Nama and Varsion: DACS Sun SPARC/Solaris to Pantiiim PM Bara 

Ada Cross Compilar Systam with Rata 
Monotonic Schaduling, Varsion 4.6.4 


Host Computar Systam: 


Taurgat Computar Systam: 


Sun SPARCclassic running undar Soleuris, 
Ralaasa 2.1 

Intal Pantixm (oparatad as Bara Machina) 
basad in Xprass Dasktop (Intal product 
numbar: XBASE6E4P-B) 


Saa section 3.1 for any additional information about tha tasting 
environment. 

As a result of this validation effort. Validation Certificate 
940325S1.11353 is awarded to DOC-I. This certificate expires 2 years 
after ANSI/MIL-STD-1815B is approved by ANSI. 

This report has bean reviewed and is approved. 





on Organization 
DiredtofT^-Cbmputer & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
David R. Basel 
Deputy Director, 

Ada Joint Program Office 
Defense Information Systems Agency, 
Center for Information Management 
Washington DC 20301 


U.S.A. 















tosidflocsoo ae i.ii 


imJBKEKII (F COtftfMKZ 

Ihft fbllawin^ dadaxatian of v* ms oyplieril fay tfae custowy. 

Qataiar; OOC*I 


CtatifLeaCt taztte: DCC-I 

Jkta \Uidttian facility: Itastituta of Starrianfa and 

Hadnolcv 

CcBpjcac SysCM lafacEatoxy (CSI4 
SoftMBxa Staocbatto VUicteicn Gcoqp 
Bmlrting 225, BtmA266 

Mcyland 20899 

O.SJL 


KVC \ltrsim: l.U 


Ma liqplancntatiQa: 

tvnr<w Mae and VtasicD: CHICS Sun 9HC/SoLacis to ta±im IN Beta Ma 

Ccoss Caipilar Systm with BMa Mxotodc 
^tetadoo 4.6.4 

Boat nmpter Systau SUn SMCclassic raning tnda: Solaidb, 

ltalaase2J. 

TKget Clgiyrt'Kc Slystoa: Intel Bantiun (opeotad as Baca M fa ddne ) faascd 

in Kpcess Desktop (Intel {sndoct nw b cr : 
XBMSEOBir-fi) 


Declacaticn: 


I tfae andBc 8 i 9 )ad. Z faam oo knowlat^ of dalihanta dwd a tinn s 

fmn tile Mi langoaga Standtod ANSZ/MDrSIlHSlA ISO 86S2-1967 in tin 

<tiyl n i ^aH nn tinsa. 


Oo^iacV CDC-I 
<is«-u 



Title 


Date 

% -oh-r z. 

Date 










TABLE OF CONTENTS 


CHAPTER 1.1-1 

INTRODUCTION.1-1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2.2-1 

IMPLEMENTATION DEPENDENCIES.2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3.3-1 

PROCESSING INFORMATION.3-1 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION. 3-2 


APPENDIX A.A-1 

MACRO PARAMETERS.A-1 

APPENDIX B.B-1 

COMPILATION SYSTEM OPTIONS.B-1 

LINKER OPTIONS.B-2 

APPENDIX C.C-1 

APPENDIX F OF THE Ada STANDARD.C-1 































CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the 
Ada Validation Procedures [Pro92] against the Ada Standard [Ada83] 
using the current Ada Compiler Validation Caped^ility (ACVC). This 
Validation Summary Report (VSR) gives an account of the testing of 
this Ada implementation. For any technical terms used in this 
report, the reader is referred to [Pro92]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure of 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U.S.C. #552). The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the sxibject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield, Virginia 22161 
U.S.A. 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 


Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria, Virginia 22311-1772 

U.S.A. 


1-1 










1.2 REFERENCES 


[Ada83] Reference _ Manual _ for the Ada Proaramroina Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures . Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User’s Guide . 21 June 
1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, D, E, and L. The first letter of a test 
name identifies the class to which it belongs. Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK_FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECKFILE is used to check the contents 
of text files written by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK FILE is 
checked by a set of executable tests. If these units are not 
operating correctly, validation testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is 
compiled and the resulting Compilation listing is examined to 
verify that all violations of the Ada Standard are detected. Some 
of the class B tests contain legal Ada code which must not be 
flagged illegal by the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values—for example, the 


1-2 







largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is produced by 
the AVF. This customization consists of making the modifications 
described in the preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [UG89]). 

In order to pass an ACVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability (ACVC) 


Ada Implementation 


Ada Joint Program 
Office (AJPO) 


Ada Validation 
Facility (AVF) 


Ada Validation 
Organization (AVO) 


Compliance of an 
Ada Implementation 


The software and any needed hardware that 
have to be added to a given host and target 
computer system to allow transformation of 
Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada 
implementations. Validation consisting of 
the test suite, the support programs, the 
ACVC Capability User's Guide and the 
template for the validation summary (ACVC) 
report. 

An Ada compiler with its host computer 
system and its target computer system. 

The part of the certification body which 
provides policy and guidance for the Ada 
certification Office system. 

The part of the certification body which 
carries out the procedures required to 
establish the compliance of an Ada 
implementation. 

The part of the certification body that 
provides technical guidance for operations 
of the Ada certification system. 

The ability of the implementation to pass an 
ACVC version. 


1-3 







Computer System 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable Test 

ISO 

LRM 


Operating System 


Target Computer 
System 


A functional unit, consisting of one or more 
computers and associated software, that uses 
common storage for all or part of a program 
and also for all or part of the data 
necessary for the execution of the program; 
executes user- written or user-designated 
programs; performs user-designated data 
manipulation, including arithmetic 
operations and logic operations; and that 
can execute programs that modify themselves 
during execution. A computer system may be a 
stand-alone unit or may consist of several 
inter-connected units. 

Fulfillment by a product, process, or 
service of all requirements specified. 

An individual or corporate entity who enters 
into an agreement with an AVF which 
specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring 
that conformity is realized or attainable on 
the Ada implementation for which validation 
status is realized. 

A computer system where Ada source programs 
are transformed into executable form. 

A test that contains one or more test 
objectives found to be irrelevant for the 
given Ada implementation. 

International Organization for 
Standardization. 

The Ada standard, or Language Reference 
Manual, published as ANSI/MIL-STD-1815A 
-1983 and ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>; 
<paragraph>." 

Software that controls the execution of 
programs and that provides services such as 
resource allocation, scheduling, 
input/output control, and data management. 
Usually, operating systems are predominantly 
software, but partial or complete hardware 
implementations are possible. 

A computer system where the executable form 
of Ada programs are executed. 


1-4 





Validated Ada 
Compiler 

Validated Ada 
Implementation 


Validation 


Withdrawn Test 


The compiler of a validated Ada 
implementation. 

An Ada implementation that has been 
validated successfully either by AVF testing 
or by registration [Pro92]. 

The process of checking the conformity of an 
Ada compiler to the Ada programming language 
and of issuing a certificate for this 
implementation. 

A test found to be incorrect and not used in 
conformity testing. A test may be incorrect 
because it has an invalid test objective, 
fails to meet its test objective, or 
contains erroneous or illegal use of the Ada 
programming language. 


1-5 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Some tests are withdrawn by the AVO from the ACVC because they do 
not conform to the Ada Standard. The following 104 tests had been 
withdrawn by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for 
this list of withdrawn tests is 93-11-22. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C355070 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are 
irrelevant for a given Ada implementation. The inapplicability 
criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Commentaries and commonly referenced in 
the format Al-ddddd. For this implementation, the following tests 
were determined to be inapplicable for the reasons indicated; 
references to Ada Commentaries are included as appropriate. 

The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 


2-1 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 






C35708L..Y 
C45241L..Y 
C45421L..Y 
C45524L..Z 
C45641L..Y 


(14 tests) 
(14 tests) 
(14 tests) 
(15 tests) 
(14 tests) 


C35802L. .Z 
C45321L. . Y 
C45521L..Z 
C45621L..Z 
C46012L..Z 


(15 tests) 
(14 tests) 
(15 tests) 
(15 tests) 
(15 tests) 


C24113I..K (3 tests) use a line length in the input file which 
exceeds 126 characters. 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a 
predefined integer type with a name other than INTEGER, 
LONG_INTEGER, or SHORTINTEGER; for this implementation, there is 
no such type. 

C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SHORT_FLOAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with 
a name other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAXMANTISSA of 47 or greater; for 
this implementation, MAX_MANTISSA is lesk than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLiOWS is FALSE for floating point types and the results 
of various floating-point operations lie outside the range of the 
base type; for this implementation, MACHINE_OVERFLOWS is TRUE. 

C4A013B contains a static universal real expression that exceeds 
the range of this implementation's largest floating-point type; 
this expression is rejected by the compiler. 

D56001B uses 65 levels of block nesting; this level of block 
nesting exceeds the capacity of the compiler. 

B86001Y uses the name of a predefined fixed-point type other than 
type DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside 
the range of type DURATION; for this implementation, the ranges are 
the same. 

CA2009C and CA2009F check whether a generic unit can be 
instantiated before its body (and any of its subunits) is compiled; 
this implementation creates a dependence on generic units as 
allowed by AI-00408 and AI-00506 such that the compilation of the 
generic unit bodies makes the instantiating units obsolete. (See 
section 2.3.) 


2-2 







CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 

C02A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
implementation does not support such sizes. 

The following 264 tests check operations on sequential, text, and 
direct access files; this implementation does not support external 
files: 


CE2102A..C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y (12) 

CE2103C..D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A..B 

(2) 

CE2107A..H 

(8) 

CE2107L 


CE2108A..H 

(8) 

CE2109A..C 

(3) 

CE2110A..D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A..B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2203A 


CE2204A..D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A..C 

(3) 

EE2401D 


CE2401E..F 

(2) 

EE2401G 


CE2401H..L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE3401A 


CE3402A 


EE3402B 


CE3402C..D 

(2) 

CE3403A..C 

(3) 

CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 


EE3412C 


CE3413A..C 

(3) 

CE3414A 


CE3602A..D 

(4) 

CE3603A 


CE3604A..B 

(2) 

CE3605A..E 

(5) 

CE3606A..B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 

(3) 

CE3705A..E 

(5) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3805A..B 

(2) 

CE3806A..B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3904A..B 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C 

(3) 

CE3906E..F 

(2) 

CE2103A, CE2103B 

, and CE3107A 

use an illegal 

file name in 

an 


attempt to create a file and expect NAMEERROR to be raised; this 
implementation does not support external files and so raises 
USEERROR. (See section 2.3.) 

2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 71 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in 


2-3 







the way expected by the original tests. 


B22003A 

B35101A 

B38009B 

B61001R 

B83E01D 

B91002C 

B91002J 

B95077A 

BC1109D 


B26001A 

B37106A 

B55A01A 

B61001W 

B83E01E 

B91002D 

B91002K 

B97103E 

BC1202A 


B26002A 

B37301B 

B61001C 

B67001H 

B85001D 

B91002E 

B91002L 

B97104G 

BC1202F 


B26005A 

B37302A 

B61001F 

B83A07A 

B85008D 

B91002F 

B95030A 

BAIOOIA 

BC1202G 


B28003A 
B38003A 
B61001H 
B83A07B 
B91001A 
B91002G 
B95061A 
BAUD IB 
BE2210A 


B29001A 

B38003B 

B61001I 

B83A07C 

B91002A 

B91002H 

B95061F 

BC1109A 

BE2413A 


B33301B 

B38009A 

B61001M 

B83E01C 

B91002B 

B91002I 

B95061G 

BC1109C 


C83030C and C86007A were graded passed by Test Modification as 
directed by the AVO. These tests were modified by inserting 
"PRAGMA ELABORATE (REPORT);" before the package declarations at 
lines 13 and 11, respectively. Without the pragma, the packages 
may be elaborated prior to package Report's body, and thus the 
packages' calls to function REPORT.IDENT_INT at lines 14 and 13, 
respectively, will raise PROGRAM_ERROR. 

CA2009C and CA2009F were graded inapplicable by Evaluation 
Modification as directed by the AVO. These tests contain 
instantiations of a generic unit prior to the compilation of that 
unit's body; as allowed by AI-00408 and AI-00506, the compilation 
of the generic unit bodies makes the compilation unit that contains 
the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification 
as directed by the AVO. These tests check that instantiations of 
generic units with unconstrained types as generic actual parameters 
are illegal if the generic bodies contain uses of the types that 
require a constraint. However, the generic bodies are compiled 
after the units that contain the instantiations, and this 
implementation creates a dependence of the instantiating units on 
the generic units as allowed by AI-00408 and AI-00506 such that the 
compilation of the generic bodies makes the instantiating units 
obsolete—no errors are detected. The processing of these tests 
was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 

CE2103A, CE2103B, and CE3107A were graded inapplicable by 
Evaluation Modification as directed by the AVO. The tests abort 
with an unhandled exception when USE ERROR is raised on the attempt 
to create an external file. This is acceptable behavior because 
this implementation does not support external files (cf. AI-00332). 


2-4 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is 
described adequately by the information given in the initial pages 
of this report. 

For technical information about this Ada implementation, contact: 

Forrest Holemon 

410 North 44th Street, Suite 320 
Phoenix, Arizona 85008 (U.S.A.) 

Telephone: 602-275-7172 

Telefax: 602-275-7502 

For sales information about this Ada implementation, contact: 

Mike Halpin 

410 North 44th Street, Suite 320 
Phoenix, Arizona 85008 (U.S.A.) 

Telephone: 602-275-7172 
Telefax: 602-275-7502 

Testing of this Ada implementation was conducted at the customer's 
site by a validation team from the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro92]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were 
withdrawn because of test errors (item b; see section 2.1), those 
that require a floating-point precision that exceeds the 
implementation's maximum precision (item e; see section 2.2), and 
those that depend on the support of a file system—if none is 
supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 






a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 
1.3) was taken on-site by the validation teeun for processing. The 
contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded onto the host computer, the full 
set of tests was processed by the Ada implementation. The DDC-I 
Ada downloader runs on the host machine and is used for downloading 
the executable images to the target machine. The DDC-I Debug 
Monitor runs on the target machine emd provides communication 
interface between the host downloader and the executing target 
machine. The two processes communicate via ethemet. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target 
computer system by the communications link described above, and 
run. The results were captured on the host computer system. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation teeun. See Appendix B for 
a complete listing of the processing options for this 
implementation. It also indicates the default options. The 
options invoked explicitly for validation testing during this test 
were: 

-list 

Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3562 

104 

504 

0 

0 

504 (c+d+e) 

4170 (a+b+f) 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing 
the ACVC. The meaning and purpose of these parameters are 
explained in [UG89]. The parameter values are presented in two 
t 2 d>les. The first table lists the values that are defined in terms 
of the maximum input-line length, which is the value for 
$MAX_IN LEN—also listed here. These values are expressed here as 
Ada string aggregates, where "V represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 126 — Value of V 

$BIG_ID1 (1..V-1 *> 'A', V *> *1') 

$BIG_ID2 (1..V-1 «> ‘A*, V => '2') 

$BIG_ID3 (1..V/2 => 'A') & '3' & (1..V-1-V/2 »> 'A') 

$BIG_ID4 (1..V/2 => »A*) & '4' & (1..V-1-V/2 => 'A') 


$BIG_INT_LIT 

(1..V-3 => 'O’) 


"298" 

$BIG_REAL_LIT 

(1..V-5 «> '0') 

& 

"690.0" 

$BIG_STRING1 

""" & (1..V/2 

=> 

•A') & 

$BIG_STRING2 

""" & (1..V-1- 

V/2 

=> 'A') & 

$ BLANKS 

H 

• 

• 

< 

to 

o 

II 

V 

m 

) 



$MAX_IiEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & ''ll;** 


$MAX_LEN_REAL_BASED_LITERAL 

”16:" & (1..V-7 => '0') & "F.E:" 

$MAX_STRING_LITERAL """ & (1..V-2 => 'A') & """ 


A-1 






The following table contains the values for the remaining 
macro parameters. 

Macro Parameter Macro Value 


ACC_SIZE 

ALIGNMENT 

COUNT_LAST 

DEFAULT_MEM_SIZE 

DEFAULT_STOR_UNIT 

DEFAULT_SYS_NAME 

DELTA_DOC 

ENTRY_ADDRESS 

ENTRY_ADDRESS1 

ENTRY_ADDRESS2 

FIELD_LAST 

FILE_TERMINATOR 

FIXED_NAME 

FLOAT_NAME 

FORM_STRING 

FORM STRING2 


48 

2 

2_147_483_647 

16#1_0000_0000# 

16 

IAPX586_PM 

2#1.0#E>31 

(140,0; 

(141,0) 

(142,0) 

35 

ASCII.SUB 

NO_SUCH_FIXED_TYPE 

SHORT_SHORT_FLOAT 

NH 


'•CANNOT_RESTRICT_FI LE_CAPACITY •' 
GREATER_THAN_DURATION : 75_000.0 

GREATER_THAN_DURATION_BASE_LAST : 131_07 3.0 

GREATER_THAN_FLOAT_BASE_LAST : 16#1.0#E+32 

GREATER_THAN_FLOAT_SAFE_LARGE : 16#5.FFFF_F0#E+31 

GREATER_THAN_SHORT_FLOAT_SAFE_LARGE: 1.0E3 08 
HIGH_PRIORITY : 31 

ILLEGAL_EXTERNAL_FILE_NAME1 : \NODIRECTORY\FILENAME 

ILLEGAL EXTERNAL FILE NAME2 : 


THIS-FILE-NAME-IS-TOO-LONG-FOR-MY-SYSTEM 


INAPPROPRIATE_LINE_LENGTH 

INAPPROPRIATEPAGELENGTH 

INCLUDE_PRAGMA1 

INCLUDE_PRAGMA2 

INTEGER_FIRST 

INTEGER_LAST 

INTEGER_LAST_PLUS_1 

INTERFACE_LANGUAGE 

LESS_THAN_DURATION 

LESS_THAN_DURATION_BASE_FIRST 

LINE_TERMINATOR 

LOW_PRIORITY 

MACHINE_CODE_STATEMENT 

MACHINE_CODE_TYPE 
MANTISSA DOC 


: -1 

: -1 

• 

PRAGMA INCLUDE ("A28006D1.ADA") 

PRAGMA INCLUDE ("B28006E1.ADA") 

; -2147483648 
: 2147483647 

: 2_147_483_648 
: ASH86 
: -75_000.0 
; -131_073.0 
: ASCII.CR 

: 0 

• 

MACHINE_INSTRUCTION'(NONE,m_NOP) 
: REGISTER_TYPE 
; 31 


A-2 











MAX_DIGITS 

MAX_INT 

MAX_INT_PLUS_1 

MIN_INT 

NAME 

NAME_LIST 

NAME_SPECIFICATI0N1 
DISK$AWC 
NAME_SPECIFICATI0N2 
DISK$AWC 
NAME_SPECIFICATI0N3 
DISK$AWC 
NEG_BASED_INT 
NEW_MEM_SIZE 
NEW_STOR_UNIT 
NEW_SYS_NAME 
PAGE_TERMINATOR 
RECORD_DEFINITION 
RECORD_NAME 
TASK_SIZE 
TASK STORAGE SIZE 


9223372036854775807 
9223372036854775808 
“9223372036854775808 
SHORT_SHORT_INTEGER 
IAPX586 PM 


:_2 : [ CROCKETTL. ACVC11. DEVELOPMENT ] X212 0A 

:_2; [ CROCKETTL. ACVCl 1. DEVELOPMENT] X212OB 

• 

:_2: [CROCKETTL. ACVCl 1. DEVELOPMENT]X3119A 

: 16#FFFF_FFFF_FFFF_FFFF# 

: 16#1_0000_0000# 

: 16 

: IAPX586_PM 
: ASCII.FF 

: RECORD NULL;END RECORD; 

: NO_SUCH_MACHINE_CODE_TYPE 
: 32 
: 1024 


TICK 

VARIABLE_ADDRESS 
VARIABLE_ADDRESS1 
VARIABLE_ADDRESS 2 
YOUR PRAGMA 


0.000_000_062_5 
(16#0#,16#44#) 
(16#4#,16#44#) 
(16#8#,16#44#) 
EXPORT OBJECT 


A-3 








APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada Implementation, as described In this 
Appendix, are provided by the customer. Unless specifically noted 
othexrvlse, references In this appendix are to compiler documentation and 
not to this report. 


B-1 








5 THE ADA COMPILER 


The Ada Compiler compiles all program units within the specified source file and inserts the 
generated objects imo the current program library. Compiler options are provided to allow the 
user control of optimization, run-time checks, and compiler input and output options such as list 
files, configuration files, the program library used, etc. 

The input to the compiler consists of the source file, the configuration file (which controls the 
format of the list file), and the compiler options. Secticm S.l provides a list of all compiler 
options, and Section 5.2 describes the source and configuration files. 

If any diagnostic messages are produced during the compilation, they are output on the diagnostic 
file and on the current output file. The diagnostic file and the diagnostic messages are described 
in Section 5.3.2. 

Output consists of an object placed in the program library, diagnostic messages, and optional 
listings. The configuration file and the compiler options specify the format arxl conterus of the 
list information. Output is described in Section 5.3. 

The compiler uses a program library during the compilatiort The compilation unit may refer to 
units from the program library, and an iruemal representation of the compilation unit will be 
included in the program library as a result of a successful compilatiort The program library is 
described in Chapter 3. Section 5.4 briefly describes how the Ada compiler uses the library. 


5.1 Invoking the Ada Compiler 

Invoke the Ada compiler with the foUovnng command to the SunOS shell: 

$ ada {<option>} <source-file-nanie> 
where the options and parameters are: 


35 





DACS-80x86 User’s Guide 
Ada Compiler 


OPTION DESCRIPTION 


REFERENCE 


•[nolautojiUine 

Specifies whether local subprograms should be 
iiiline expanded. 

5.1.1 

•check 

Controls run-dme checks. 

5.12 

•connguration_file 

Specifies the configuration file used by the 
compiler. 

5.1.3 

-[noldebug 

Includes symbolic debugging infotmadon in 
program Library. Does not iixdude symbolic 
informadon. 

5.1.4 

-[no]fixpoint_roundiiig 

Generates fixed poiru rounding code. Avoids fixed 
point rounding code. 

5.1.5 

•[no lfIoat_ allowed 

Flags generadon of float instrucdons as 
error if selected. 

5.1.6 

•[nollibrary 

Specifies program library used. 

5.1.7 

•[nojiist 

Writes a source lisdng on the list file. 

5.1.8 

•[nojoptimize 

Specifies compiler opdmizadon. 

5.1.9 

•[nojprogess 

Displays compiler progress. 

5.1.10 

•(nojxref 

Creates a cross referet!'^ listing. 

5.1.11 

•[nojsave source 

Copies source to program library. 

5.1.12 

•[nojtargM_debug 

Includes Intel debug informadon. Does not include 
Intel debug informadon. 

5.1.13 

•unit 

Assigns a specific unit number to the compiladon 
(must be free and in a sublibrary). 

5.1.14 

•recompile 

Interpret the file name ^ a comi»lation unit body 



that must be recompiled from library. 

5.1.15 

•specification 

With •recompile interpret file name as a 



compiladon unit specificadon rather than body. 

5.1.16 


Examples: 

$ ada -list tastpxog 

This example compiles the source file testprogJida and generates a list Hie with the name 
testprogJis. 

$ ada -library ^_Iibrary teat 

This example compiles the source file testada into the library myjibrary. 

Default values exist for most options as indicated in the following sections. Option names may 
be abbreviated (characters omitted from the right) as long as no ambiguity arises. 


36 





DACS-80x86 User’s Guide 
Ada Compiler 


<source*file>nanie> 

The Ada compiler has one mandatory parameter that should specify the Ada source file. 

This parameter specifies the text file containing the source text to be compiled. If the ftle type 
is omitted in the source file specification, the file type ".ada" is assumed by default 

The allowed format of the source text is described in Section S.2.1. 


Below follows a description of each of the available options to the invocation of the Ada 
compiler. 


5.1.1 •[no]auto_inline 

•autojnliiie local | global 
•noauto_miine (default) 

This option specifies whether subprograms should be inline expanded. The inline expansion only 
occurs if the subprogram has less than 4 object declarations and less than 6 statements, and if the 
subprogram fulfills the requirements defined for pragma INLINE (see Section C.2.3). LOCAL 
specifies that only inline expansion of locally defined subprograms should be done, while 
GLOBAL will cause inline expansion of all subprograms, including subprograms from other units. 


S.U -check 


-check [ <keyword> * ON | OFF { ,<keyword> = ON | OFF ) ] 

-check ALLsON (default) 

-check specifies which run-time checks should be peifonned. Setting a run-time check to ON 
enables the check, while setting it to OFF disables the check. All run-time checks are enabled by 
default. The following explicit checks will be disabled/enabled by using the name as <keyword>; 


ACCESS 

ALL 

DISCRIMINANT 

ELABORATION 

INDEX 

LENGTH 

OVERFLOW 

RANGE 

STORAGE 


Check for access values being non NULL. 
All checks. 

Checks for discriminated fields. 

Checks for subprograms being elaborated. 
Index check. 

Array length check. 

Explicit overflow checks. 

(Checks for values being in range. 

(Checks for sufficient storage available. 


37 






DACS*80x86 User's Guide 
Ada Compiler 


5.13 •conflfiinitkm^file 


-conflguratkm-flte <flle*spcc> 

•conflguration-flle config (default) 

This option specifies the configuration file to be used by the compiler in the current cominlation. 
The configuration hie allows the user to format compiler listings, set error limits, etc. If the 
option is omitted the configuration file config located in the same directory as the Ada compiler 
is used by default Section 53.2 contains a description of the configuration file. 


S.1.4 -{noldcbug 
•debug 

•nodebug (default) 

Generate debug information for the compilation and store the information in the program library. 
This is necessary if the unit is to be debugged with the DDC-I Ada Symbolic Cross Debugger. 
Note that the program must also be linked with the -debug option, if the program is to be 
debugged with the DDC-I Ada Symbolic Cross Debugger. See S^on 6.5.11. 


5.13 •[no]fixpoint_rounding 

•fixpoint_rounding (default) 

•nofixpoint^rounding 

Normally all inline generated code for fixed point MULTIPLY and DIVIDE is rounded, but this 
may be avoided with •nofixpoint.rounding. InliiK code is generated for all 16 bit fixed point 
types and for 32 bit fixed point types, when the targe: is 80386PM or 80486PM. 


5.1.6 •[no]fioat_aiiowed 

•fioat^allowed (default) 

-nonoat_allowed 

Float instruction generation may be flagged as errors, if 'irofioat is selected. This is for use in 
systems, where no floating poim processor (nor emulator) is available. Notice that TEXT.IO uses 
floats in connection with FLOAT.IO and FDCED.IO. 


38 


DACS-80x86 User’s Guide 
Ada Compiler 


S.1.7 •library 

•library <fIle^speo 

•library $ada Jibrary (default) 

This option specifies the current subiibrary that will be used in the compilation and will receive 
the object when the compilation is complete. By specifying a current sublibrary, the current 
program library (current suUibrary and ancestors up to root) is also implicitly ^cified. 

If this option is omitted, the sublibrary designated by the environmental variable ada-library is 
used as the current sublibrary. Section S.4 describes how the Ada compiler uses the library. 


5.1.8 -[nollist 


•list 

•nolist (default) 

•list specifies that a source listing will be produced. The source listing is written to the list file, 
which has the name of the source file with the extension Jis. Section S.3.1.1 coruains a description 
of the source listing. 

If -nolist is active, no source listing is produced, regardless of LIST pragmas in the program or 
diagnostic messages produced. 


5.1.9 •optimize 

•optimize ( <keyword> s on | off { ,<keyword7 = on | off} ] 

•optimize allsoff 

This option specifies which optimizations will be performed during code generatioiL The possible 
keywords are: (casing is irrelevant) 


all 

All possible optimizations are invoked. 

check 

Eliminates superfluous checks. 

cse 

Performs common subexpression elimination including common 
address expressions. 

fctlproc 

Change function calls returning objects of constrained array types 
or objects of record types to procedure calls. 

reordering 

Transforms named aggregates to positional aggregates and named 
parameter associations to positional associations. 

stack-height 

Perfonns stack height reductions (also called Aho Ullman 
reordering). 

block 

Optimize block and call frames. 


Setting an optimization to on enables the optimization, while setting an optimization to off disables 
the optimization. All optimizations ate disabled by default In addition to the optional 
optimizations, the compiler always performs the following optimizations: constant folding, dead 
code elimination, and selection of optimal Jumps. 


39 




DACS>80x86 User’s Guide 
Ada COnapQer 


5.1.10 -[nolprogress 
-progress 

-noprogress (default) 

When this option is given, the compiler will output dau about which pass the compiler is 
currently running. 


5.1.11 -[nolxref 
-xref 

-noxref (default) 

A cross-reference listing can be requested by the user by means of the option -xref. If the -xref 
option is given and no severe or fatal errors are found during the compilation, the cross-reference 
listing is wriaen to the list file. The cross-refetence listing is described in S^on ?. 


5.1.12 -(nolsave-source 

•save_source (default) 

-nosave_source 

When -save..jource is specified, a copy of the compiled source code is placed in the program 
library. If -nosave_source is us«l, source code will not be retained in the program library. 

Using -nosave^urce. while helping to keep library sins smaller, does affect the operation of 
the recompiler, see Chapter 7 for more details. Also, it will not be possible to do symbolic 
debugging at the Ada source code level with the DACS-80x86 Symbolic Ada Debugger, if the 
source code is not saved in the library. 


5.1.13 -[no]target-debug 

-target_debug 
-notar^t_debug (default) 

Specifies whether symbolic debug information on starxlard OMF is included in the objea file. 
Currently the linker does not support the OMF debug infbtmatiotL 

This option may be used when debugging with standard OMF tools Q-e.. FICE). 


40 








DACS'80](86 User’s Guide 
Ada Compiler 


S.1.14 -unit 


•unit = <unU_nunibcr> 

The specified unit number will be assigned to the compilation unit if it is free and it is a legal 
unit number for the library. 


5.1.15 •recompile 
•recompile 

The file name (source) is inteipreted as a compilation unit name which has its source saved from 
a previous compilation. If •spedficatioa is not specified, it is assumed to be body which must be 
recompiled. 


5.1.16 'Specification 
•specification 

Works only together with 'recompile, see Section S.1.15. 


5J Compiler Input 

Input to the compiler consists of the command line options, a source text file and, optionally, a 
configuration file. 


5.2.1 Source Text 

The user submits one file containing a source text in each compilation. The source text may 
consist of one or more compilation units (see ARM Section 10.1). 

The format of the source text must be in ISO*FORMAT ASCII. This fonnat i^uires that the 
source text is a sequence of ISO characters OSO standard 646), where each line is tenninated by 
either one of the following termination sequences (CR means carriage return, VT means vertical 
tabulation, LF means line feed, and FF means form feed): 

• A sequence of one or more CRs, where the sequence is neither immediately preceded nor 
immediately followed by any of the characters VT, LF, or FF. 

• Any of the characters VT, LF, or FF, immediately preceded and followed by a sequence of zero 
or more CRs. 

In general, ISO control characters are not peimitted in the source text with the following 
exceptions: 








DACS*80x86 User's Guide 
Ada Compiler 


• The horizontal tabulation (HT) character may be used as a separator between lexical units. 

• LF, VT, FF, and CR may be used to tenninate lines, as described above. 

The maximum number of characters in an iiqrut line is determined by the contents of 
configuration file (see section S.1.3). The control diaracters CR, VT, LF, and FF are 
considered a pan of the line. Lines containing more than the maximum number of characters 
truncated and an error message is issued. 


SJ.2 Configuration File 

Certain processing characteristics of the compiler, such as format of input and output, and error 
limit, may be modified by the user. These characteristics are passed to the compiler by means 
of a configuration file, which is a standard SPARC/SunOS text file. The contents of the 
configuration file must be an Ada positional aggregate, written on one line, of the type 
CONFIGURATION_RECORD, which is described below. 

The configuration file (config) is not accepted by the compiler in the following cases: 

• The syntax does not conform with the syntax for positional Ada aggregates. 

• A value is outside the ranges specified. 

• A value is not specified as a literal. 

• LINES_reR_PAGE is not greater than TOP_MARGIN + BOTTOM.MARGIN. 

• The aggregate occupies more than one line. 

If the compiler is unable to accept the configuration file, an ei,or message is written on the 
current output file and the compilation is temiinated. 

This is the record whose values must appear in aggregate form within the configuration file. The 
record declaration makes use of some other types (given below) for the sake of clarity. 


42 


Si? 







DACS-80x86 User's Guide 
Ada Compiler 


type CONFIGURATZON^RECORD is 
record 

ZN FORMAT: ZNFORMATTZNG; 

OUT_FORMAT: OUTFORMATTZNG; 

ERROR.LZMZT: ZNTE6ER; 
end record; 

type ZNPUT_FORMATS is (ASCZZ); 

type ZNFORMATTZMG is 
record 

ZNPOT_FORMAT: ZNPOT FORMATS; 

ZNPUT_LZNBLENGTH: ZNTEGER range 70..250; 
end record; 

type OUTFORMATTZNG is 
record 

LZNES PER_PAGE : ZNTEGER range 30..100; 

TOP_MARGZN : ZNTEGER range 4.. 90; 

BOTTOM_MARGZN : ZNTEGER range 0.. 90; 

OUT^LZNELENGTH : ZNTEGER range 80..132; 

SUPPR£SS_ERRORNO : BOOLEAN; 

end record; 

The outfoimaoing parameters have the following meaning: 

1) UNES.PER.PAGE: specifies the maximum number of lines whtten on each page 
(including top and bottom margin). 

2) TOP.MARGIN: specifies the number of lines on tq> of each page used for a standard 
heading and blank lines. The heading is placed in the middle lines of the top margiiL 

3) BOTTOM_MARGIN: specifies the minimum number of lines left blank in the bottom of 
the page. The number of lines available for the listing of the program is LINES 
PER_PAGE - TOP.MARGIN - BOTTOM.MARGIN. 

4) OUT.LINELENGTH: specifies the maximum number of characters written on each line. 
Lines longer than OUT.LINELENGTH are separated into two lines. 

5) SUPPRESS.ERRORNO: specifies the format of error messages (see Sectkm S.3.5.1). 

The name of a user-supplied configuration file can be passed to the compiler through the 
conriguration_file option. ODC-I supplies a default configuration file (config) with the following 
content: 


43 








DACS- 8 Q )186 User's Guide 
Ada Compiler 


((ASai. 126). (dSJJ.lOOJ’ALSE). 200) 


Top 

■argil) 




Linoa 

P«r 

paga 


Boeco* 

margin 





Out.UneJength 


Figure 5*1. Page Layout 


S3 Compiler Output 

The compiler may produce output in the list file, the diagnostic file, and the current output file. 
It also updates the program library if the compilation is successful The presem section describes 
the text output in the three files mentioned above. The updating of the program library is 
described in Section S.4. 


The compiler may produce the following text output: 

1) A listing of the source text with embedded diagnostic messages is written on the list file, 
if the opticm -Ust is active. 

2) A compilation summary is written on the list file, if -list is active. 

3) A cross-reference listing is written on the list file, if -xref is active and tx> severe or fatal 
errors have been detected during the compilatiort 

4) If there are any di^^sdc messages, a diagrxistic file containing the diagnostic messages 
is writtetL 

5) Diagnostic messages other than warnings are written on the current output fik. 


44 








DACS-80]Ui6 User's Guide 
Ada Gxnpiler 


5J.1 The List Hie 

The name of the list file is identical to the name of the source file except that it has the file type 
".Us". The file is located in the current (defnilt) directory. If any such fUe exists prior to the 
compilation, the newest version of the file is deleted. If the user requests any listings by 
specifying the options -list or •xref, a new Ust file is created. 

The Ust file may include one or more of the foUowing parts: a source listing, a cross-reference 
listing, and a compilation summary. 

The parts of the Ust file are separated by page ejects. The contents of each part ate described in 
the foUowing sections. 

The format of the output on the Ust file is conttoUed by the configuration file (see Section 52 . 2 ) 
and may therefore be controUed by the user. 


5J.1.1 Source Listing 

A source listing is an unmodified copy of the source text The listing is divided into pages and 
each line is supplied wnth a Une number. 

The number of lines output in the source listing is governed by the occuneiKe of LIST pragmas 
and the number of objectionable Unes. 

• Parts of the listing can be suppressed by the use of the LIST pragma. 

• A Une containing a construct that caused a diagnostic message to be produced is printed even 
if it occurs at a point where listing has been suppressed by a LIST pragma. 

SJ.1,2 Compilation Sumriuiry 

At the end of a compilation, the compiler produces a summary that is output on the Ust file if the 
option -Ust is active. 

The summary contains information about: 

1) The type and name of the compilation unit, and whether it has been compiled successfully 
or not. 

2) The number of diagnosUc messages produced for each class of severity (see Section 
5.3.2.1). 

3) Which options were active. 

4) The fuU name of the source file. 

5) The fuU name of the current sublibrary. 

6 ) The number of source text lirxs. 


45 








DACS-80x86 User's Guide 
Ada GMopiler 


7) The size of the code produced (specified in bytes). 

8 ) Elapsed real time and eU^ised CPU time. 

9) A "Compilation Knninaied" message if the compilation unit was the last in the compilation 
or "Compilation of next unit initiated* otherwise. 


SJ.1 J Croai>Rcferenoe Ustiiif 

A cross-reference listing is an alphaMcally sorted list of the idendfieis. operators, and character 
literals of a compilation unit The list has an entry for each entity declared andA>r used in the 
unit, with a few exceptions stated below. Overloading is evidenced by the occurrence of multiple 
entries for the same identifier. 

For instantiatiotfi of generic units, the visible declarations of the generic unit are included in the 
cross-reference listing as declared immediately after the instantiation. The visiUe declarations are 
the subprogram parameters for a generic subprogram and the declarations of the visible part of the 
package dedaradon for a generic package. 

For type declarations, all implicitly declared operations are included in the ctoss-refetence listing. 

Cross-reference information will be produced for every constituetu diaracter literal for string 
literals. 

The following are not included in the cross reference listing: 

• Pragma identifiets and pragma argument identifiers. 

• Numeric literals. 

■ Record component ideruifiers arxl discriminant ideruifiers. For a selected name whose selector 
derates a record componem or a discriminant, only the prefix generates cross-reference 
information. 

• A parent unit name (following the keyword SEPARATE). 


Each entry in the cross-refeienoe listing contains: 

• The identifier with, at most. IS characters. If the identifier exceeds IS characters, a bar Cl") 
is written in the 16th position and the rest of the diaracters are not printed. 

• The place of the definition, i.e., a line number if the entity is declared in the cunem 
compilation unit, otherwise the name of the compilatitm unit in which the entity is declared 
and the liire number of the declaration. 

• The numbers of the lines in which the entity is used. An asterisk ("**) after a line number 
indicates an assignment to a variable, initialization of a constam, assignments to functions, or 
user-defined operators by means of RETURN statements. Please refer to Appendix B.3 for 
examples. 


46 








DACS*80x86 User’s Guide 
Ada Compiler 


SJ^ The Diagnostic File 

The name of the diagnostic file is identical to the name of the source file except that it has the 
file type ’’.err”. It is located in the current (default) directory. If any such file exists prior to the 
cmnpiiation, the newest version of the file is deleted, if any diagnostic messages are produced 
during the compilation a new diagnostic file is created. 

The diagnostic file is a text file caitaining a list of diagnostic messages, each followed by a line 
showing the number of the line in the source text causing the message, and a Manic line. There 
is no separation iruo pages and no headings. The file may be used by an interactive editor to 
show the diagnostic messages together with the erroneous source text 


5JJ.1 Diagnostic Messages 

The Ada compiler issues diagnostic messages on the diagnostic file. Diagnostics other than 
warnings also appear on the current output file. If a source text listing is required, the diagnostics 
are also found embedded in the list file (see Section 5.3.1). 

In a source listing, a diagnostic message is (daced immediately after the source line causing the 
message. Messages not related to any particular line are plac^ at the top of the listing. Every 
diagnostic message in the diagnostic file is followed by a line stating the line number of the 
objectional line. The lines are ordered by increasing source line numbers. Line number 0 is 
assigned to messages not related to any particular line. On the currem output file the messages 
appear in the order in which they are generated by the compiler. 

The diagnostic messages are classified according to their severity and the compiler action taken: 


Warning: Reports a questionable construa or an error that does not influence the meanir^ of the 
program. Warnings do not hinder the generation of object code. 

Example: A warning will be issued for constructs for which the comjnler detects will 
raise CONSTRAINT.ERROR at run time. 


Error Reports an illegal construct in the source program. Compilation continues, but no object 
co^ will be generated. 

Examples: most syntax errors; most static semantic errors. 


Severe Reports an error which causes the compilation to be terminaied immediately, 
error. No object code is generated. 

Example: A severe error message will be issued if a library unit mentioned by a 
WITH clause is not presem in Ae current program library. 


47 







DACS-80)i86 User's Guide 
Ada Cbmpiler 


Faui Repons an enor in die compiler system itsdf. Compilation is temtinated immediately 

error and no objea code is produced. Tlie user may be able to circumvent a fatal error by 

correcting the program or by replacing program constnicts wdth alternatives. Please 
inform DDC-1 about the occurrence of ft^ errors. 


The detection of more errors than allowed by the number specified by the ERROR.LIMTT 
parameter of the configuration file (see section S.22) is considered a severe error. 


5JJL2 Format and Content of Diagnostic Messages 

For certain syntactically incotrea constnicts, the diagnostic message consists of a poimer line and 
a text line. In other cases a diagnostic message consists of a text line only. 

The pointer line contains a pointer (a carat symbol to the offending symbol or to an illegal 
character. 

The text line contains the following information: 

• the diagnostic .^nessage identification 

• the message code XY-Z where 

X is the message number 

Y is the severity code, a letter showing the severity of the error 

W: warning 
E: error 
S: severe error 
F; fatal error 

Z is an integer which, together with the message number X, uniquely identifies the compiler 
location that generated the diagnostic message; Z is of importance mainly to the compiler 
maintenance team - it does not contain information of interest to the compiler user. 

The message code (with the exception of the severity code) will be suppressed if the 
parameter SUPPRESS_ERROR_NO in the configuration file has the value TRUE (see 
section 52.2). 

• the messa^ text; the text may iiKlude one context dependent field that contains the name of 
the ofiending symbol; if the name of the offending symbol is longer than 16 characters only 
the first 16 characters are shown. 

Examples of diagirostic messages: 

**♦ 18W-3: Warning; Exception CONSTRAINTJERROR will be raised here 
320E-2: Name OBJ does not denote a type 
535E-0: Expression in return statement missing 


48 








DACS-80X86 User’s Guide 
Ada Compiler 


*** 1508S-0: Specification for this package body not present in the library 


5.4 The Program Library 

This section briefly describes how the Ada compiler changes the program library. For a more 
general description of the program library, the user is referred to ChaptN 3. 

The compiler is allowed to read flora all sublibraries cmistituting the currera program library, but 
only the cunem sublibraty may be dianged. 


5.4.1 Correct Compilations 

In the following examples it is assumed that the cmnpilation tmits are correctly compiled, i.e.. that 
no errors are detected by the compiler. 


Compilation of a library unit which is a declaration 

If a declaration unit of the same name exists in the current sublibraty, it is deleted together with 
its body unit and possible subunits. A new declaration unit is inserted in the sublibrary, together 
with an empty body unit 

Compilation of a library unit which is a subprogram body 

A subprogram body in a compilation unit is treated as a secondary unit if the current subUbtary 
contains a subprogram declaration or a generic subprogram declaration of the same name and this 
declaration unit is not invalid. In all other cases it will be treated as a library unit, i.e.: 

• when there is no library unit of that name 

• when there is an invalid declaration unit of that name 

• when there is a package declaration, generic package declaration, an instantiated package, or 
subprogram of that name 


Compilation of a library unit which is an instantiation 

A possible existing declaration unit of that name in the current sublibrary is deleted together with 
its body unit and possiUe subunits. A new declaratkm unit is insetted. 


Compilation of a secondary unit which is a library unit body 

The existing body is deleted from the sublibrary mgether with its possiUe subunits. A new body 
unit is inserted. 


49 





DACS-80x86 User’s Guide 
Ada Compiler 


Compilation of a secondary unit which is a subunit 

If the subunit exists in the sublibrary it is deleted together with its possible subunits. A new 
subunit is inserted. 


5.4J Incorrect Compilations 

If the compiler detects an error in a cranpilation unit, the inogram library will remain unchanged. 

Note that if a file ctmsists of several compilation units and an error is detected in any of these 
compilation units, the program library will not be updated for any of the compilation units. 

SS Instantiation of Generic Units 

This section describes the rules after which genetic instantiation is performed. 

S3.1 Order of Compilation 

When instantiating a generic unit, it is required that the entire unit, including body and possilde 
subunits, be compiled before the first instantiation. This is in accordance with the ARM Chapter 
10.3 (1). 


5,5J Generic Formal Private Types 

The present section describes the treatment of a generic unit with a generic foimal private type, 
where there is some construa in the generic unit that mpiires that the corresponding actual t]^ 
must be constrained if it is an array type or a type with discriminants, and there exists 
instantiations with such an unconstrained type (see A^, Section 12.3.2(4)). This is considered 
an illegal combination. In some cases the error is detected when the instantiatitm is compiled, in 
other cases when a constraint-requiring construa of the generic unit is compiled; 

1) If the instantiation ^ipears in a later compilation unit than the first constraint-requiting 
construa of the generic unit, the error is associated with the instantiation which is rejected 
by the compiler. 

2) If the instantiation appears in the same compilation unit as the first constraint-requiring 
construction of the generic unit, there are two possilnlities; 

a) If there is a constraint-requiring construction of the generic unit after the instantiation, 
an error message appears with the instantiation. 

b) If the instantiation appears after all constraint requiring constructs of the genetic unit 
in that compilation unit, an error message appears with the constraint-requiring 
construct, but will refer to the illegal instantiation. 


50 



DACS-80x86 User’s Guide 
Ada Compiler 


3) The instantiation appears in an earlier comf^adon unit than the first constraint-requiring 
construction of the genetic unit, which in that case will appear in the generic body or a 
subunit. If the instantiation has been accepted, the instantiation will correspond to the 
generic declaration only, aiKl not include the body. Nevertheless, if the genetic unit and 
the instantiation ate located in the same sublibrary, then the compiler will consider it an 
error. An error message will be issued with the constraint-requiring construa and will refer 
to the illegal instantiatiorL The unit cotuaining the instantiation is not changed, however, 
and will not be marked as invalid. 


5.6 Uninitialized Variables 

Use of uninitialized variables is not flagged by the compiler. The effect of a program that refers 
to the value of an uninitialized variable is undefined. A cross-reference listing may help to find 
uninitialized variables. 


5.7 Program Structure and Compilation Issues 

The following limitations apply to the DACS-80x86 Ada Compiler Systems for the Real Address 

Mode and 286 protected mode only: 

• The Ada compiler supports a "modified large" memory model for dau references. The 
"modified large" memory model associates one data sepnent for each hierarchical sublibrary in 
the Ada program library. All package data declared within a sublibrary is efficiently referenced 
from Ada code compiled into the same sublibrary. A slight increase in code size results from 
referencing package dau compiled into a different hierarchical level. Intel’s medium memory 
model can thus be obtained by utilizing only one level of Ada program library, the toot 
sublibrary. 

• The Ada compiler supports a large memory model for executable code. Although the size of 
a single compilation unit is restricted to 32K words, the total size of the code portion of a 
program is not restricted. 

• The space available for the sutic dau of a compilation unit is 64K - 20 bytes. 

• The space available for the code generated for a compilation unit is limited to 32K words. 

• Any single object cannot exceed 64K - 20 bytes. 

The following limiutions apply to all DACS-80x86 products: 

• Each source file can contain, at most, 32,767 lines of code. 

• The name of compilation units and identifiers may not exceed the number of characters given 
in the INPUT_LINELENGTH parameter of the configuration file. 

• An integer literal may not exceed the range of LONG.INTECER, a real literal may not exceed 
the range of LONG_FLOAT. 


51 




DACS*80x86 User's Guide 
Ada Compiler 


* The number of fonnal parameters peimioed in a imceduie is limited to 127 per parameter 
specification. There is no limit on the number of procedure specifications. For example, the 
declaration: 

procedure OVER_UMIT (INTEGEROl, 

INTEGER02, 

INTEGER166: in INTEGER); 

exceeds the limit, but the procedure can be accomplished with the following: 

procedure UNDER LIMIT (INTEGEROl : in INTEGER; 

“ INTEGER02 : in INTEGER; 

INTEGER166 : in INTEGER); 

The above limitations ate diagnosed by the compiler. In practice these limitations are seldom 
restrictive and may easily be circumvented by using subunits, sqtarate compilation, or creatmg new 
sublibraries. 


5.8 Compiler Code Optimizations 

DDC-I's Ada compiler for the iAPX 80x86 microprocessor family generates compacL efficient 
code. This efficiency is achieved, in parL by the compiler’s global optimizer. Optimizations 
performed include: 

• Common sub-expression elimination 

• Elimination of tedurtdam constrairu chedcs 

• Elimination of redundmt elaboration checks 

• Constant folding 

• Dead code elimination 

• Optimal register allocation 

• Selection of optimal jumps 

• Optional run-time check suppression 


52 





LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and 
not to this report. 


B-2 





6 THE ADA LINKER 


The DACS linker must be executed to create an executable program in the target environment 
Linking is a two stage process that includes an Ada link using the compilation units in the Ada 
program library, and a target link to integrate the application code, nin-time code, and 
additional configuration code developed by the user. The linker performs these two stages with a 
single command, providing options for controlling both the Ada and target link processes. 

This chapter describes the link process, except for those options that configure the Run-Time 
System, which is described in detail in Qiapter 7. 


6.1 Invoking the Linker 

Enter the following command at the shell to invoke the linker 
$ ada-Jink {<option>} <unit-natne> 
where the options and parameters are: 

Ada Linker Options 


OPTION 

DF.SCitIPTION 

REFERENCE 

•[nojdebug 

Links an application for use with the 

DACS-80x86 Symbolic Cross Debugger. 

6.5.11 

-enable_task_trace 

Enables trace when a task terminates in 
unhandled exceptioru 

6.528 

•exception_space 

Defines area for exception handling in task stack. 

6.529 

-[nolextract 

Extracts Ada Object modules 

6.5.14 

-intemipt_entry_table 

Range of interrupt entries. 

6.5.27 

-library 

The library used in the link. 

6.5.7 

-[nojiog 

Specifies creation of a log file. 

6.5.9 

-lt_segTnent_Mze 

Library task default segment size. 

6.5.23 

-lt_stack_size 

Library task default stack size. 

6.5.22 

-nip_segment_size 

Main program segment size. 

6.5.25 

-mp_stack_size 

Main program stack size. 

6.524 

-[nojnpx 

Use of the 80x87 numeric coprocessor. 

6.5.16 

-options 

Specifies target link optiims. 

6.5.6 

-priority 

Default task priority. 

6.5.18 

-reserve_stack 

Size of reserve stack. 

6.521 

-rms 

Select Rate Monotonic Scheduling Run-Time 

Kernel (optional). 

6.5.13 

-[no]root_extract 

Using non-DE)C-I units in the root library. 

6.5.10 


53 







DACS-80X86 User's Guide 
The Ade Linker 


•(no]rts 

IiKludes or excludes the run*time system. 

6.5.12 

•seardilib 

Target libraries or object modules to include 
in target link. 

6.5.4 

•selective Jink 

Removes uncalled code from final program. 

6.5.8 

•sign^on 

Produce sign on and sign off messages. 

6.5.30 

-stopJieforeJink 

Performs Ada link only. 

6.5J 

•tasks 

Maximum number of tasks or non-tasking 
appUcadoa 

6.5.17 

•task_storage_size 

Ta^ default storage size. 

6.5 J6 

•template 

Specifies tem{Aate file. 

6.5.15 

•timer 

Tuner resolutioa 

6.5 JO 

•tlme_siice 

Task time slicing. 

6.5.19 


All options may be abbreviated (characters omitted from the right) as long as no ambiguity arises. 
Casing is significant for options but not for options keywords. 

Note: Several simultaneous links of the same program should not be performed in the same 
direaory. 


6.1.1 Diagnostic Messages 

Diagnostic messages from the Ada Linker are output on the currem output file and on the optional 
log file. The messages are output in the order they are generated by the linker. 

The linker may issue two kinds of diagnostic messages: warnings and severe erTors. 

A warning reports something which does not prevent a successful linking, but which might be an 
error. A warning is issued if there is something wrong with the body unit of a program unit 
which formally does not need a body unit, e.g. if the b^y unit is invalid or if there is no object 
code container for the body unit. Warnings are only output on the log file, not on the current 
output file. The linking summary on the log file will contain the total number of warnings issued, 
even if the issued warnings have not been output 

A severe error message reports an error which prevents a successful linking. Any inconsistency 
detected by the linker will, for instance, cause a severe error message, e.g. if some requited unit 
does not exist in the library or if some time stamps do not agree. If the linker is used for 
consequence examination, aU iiKonsistendes introduced by the hypothetical recompilations are 
report^ as errors. 

A unit not marked as invalid in the program library may be repotted as being invalid by the 
linker if there is something wrong with the unit itself or with some of the units it depends oa 


62 The Linking Process 

The linking process can be viewed as two consecutive processes. Both are automatically carried 
out when issuing the link command ada Jink. 


54 




DACS-80x86 User’s Guide 
The Ada Linker 


The fiist process constitutes the Ada link process and the second constitutes the target link 
process. 

The Ada link process 

• retrieves the required Ada objea modules from the program library, 

• determines an elaboration order for all Ada units, 

• creates a module containing the User Configurable Data (UCD) from the specified configuration 
options to the linker and 

• creates a shell script that carries out the target link process (i.e., dlnkUdx86). The locate/build 
phase is an integral pan of the target link. 


If the option •stop-beforc-link is NOT specified (default), the above script is executed 
automaricrily. Otherwise the linking process is halted at this point. 

When •stop_bcfore-Iink is specified, all temporary files are retrieved for inspection or 
modificatiorL The target linker is invoked by executing the shell script. 


6,2.1 Temporary Files 

The following temporary files are in use during the link phase: 

<main_ptogram>_link.com The shell script which invokes the target linker. 

<main_program>_elabcode.o The objea code for the calling sequence of the elaboration 

code. 


<main_progtam>_ucd.o The objea code generated from the RTS conflguration 

options (see Section 7.2). 

<main_ptogtam>_uxxxxx.o The Ada objea modules which have been extracted from the 

program library, xxxxx is the unit number of the Ada unit 


55 




DACS-80x86 User’s Guide 
The Ada Linker 



The following components make up the run-time system: 

1 ) User configurable portion of the RTS 

a) User configurable data (UCD) and 

b) User configurable code (UCQ 

2) Permanem pan of the RTS 

a) Non-tasking RTS (r 11 Jib) or 

b) Tadung RTS (rl2Jib) 

c) RMS Tasking RTS (rl3.Ub) 

The User Configurable Code ttefined by the environmental variable ada_uccjib is irKluded in the 
link. If no tasking has been specified, then the RTS ncm-tasking library (rlLlib) will be included. 
If tasking has been specified, then suppon for tasking will be irKluded (rl2Jib or, when -rtns. 
rl3.1ib). 


56 













DACS-80X86 User's Guide 
The Ada Linker 


The output of the linker step is an absolute execuu^ objea file with the extension ".dat” and 
a map file with the extension ".mpS”. 


6JL2 Environmental Variables 

When a link is executed, a number of Hies are referred to and most are accessed through 
environmental variaUes. The locateAxuld phase uses the control file $ada_ucc_dir/conrig.bld_ddci. 
the remaining vaiiatdes are: 


VARIABLE 

PURPOSE 

ada.system.library 

Identifies the root library where the system compilation units reside. 

adajibrary 

Identifies the default library used by all DACS-80x86 tools. It is the 
lowest level sublibrary in the program library hierarchy. 

ada_iooi_lib 

Identifies the OMF library where the system library units have been 
extracted from the system library. By having a separate Library for the 
root compilation units, the link process is much faster than otherwise 
having to extract each unit from the system library for each link. 

ada_rl IJib 

Identifies the OMF library for the Pennanent Part of the rmn-tasking 
version of the Run-Time System. 

ada_rl2_lib 

Identifies the OMF library for the Permanent Part of the tasking version 
of the Run-Tune System. 

ada_rl3Jib 

Identifies the OMF library for the Permanem Pan of the optional Rate 
Monotonic scheduling Run-Time System. 

ada_ucc_lib 

Identifies the OMF library for the User Configurable Code portion of 
the Run-Tune System. 

ada_template 

Identifies the template file for the Linker. 

ada-ucc-dir 

Identifies the directory of the cunem UCC. 


With each of these environmental variables, the name will differ depending on how the system 
was installed (ada86. adal86 etc). Throughout this documem ada is assumed. For examine, the 
environmental variables for the root library for the 80186 version of the compiler would be 
adal86_root_lib. and the RTS UCC library environmental variables for the 8086 veision would 
be adaM_u(X_lib. 


57 






DACS-80x86 User’s Guide 
The Ada Linker 


63 Run-Time System Overview 

The Run-Time System for DACS-80x86 is defined as ail code and data, other than the ode and 
data produced by the code generator, required to make an embedded system apf^cation operate 
properly on a specific hardware system. 

In general, there are two major components that make up the Run-Time System. 

1) Code and data assumed to exist by the code generator. This is hardware independent and 
ki»wn as the RTS Permanent Part 

2) Code and dau tailoring the application with respect to the characteristics of the hardware 
and other requirements of the embedded systems developer. This code is called the RTS 
User Configurable Part. 

Both of the above components consist of modular OMF libraries. The modules are only included 
in the user program if they are needed, i.e., if a call or reference is made to the module. This 
ensures a compaa RTS (t^ical applications are 4 KB to 10 KB). 

The RTS Permanent Part does not make any assumptions about the hardware other than an 80x86 
and some amoum of memory available. 

There are several versions of the RTS User Configurable Pan available for different development 
targets. Also, the source code s provided to allow the modification of the User Configurable 
Code (UCC) to operate on other targets. Refer to the RTS Configuration Guide for complete 
information on modifying the UCC. 

DDC-I has carefully analyzed and selected the parts of the Run-Time System that must be 
configurable for hardware independence, freeing the user from major rewrites whenever the 
Run-Time System is retargeted wMle, still allowing for almost unlimited adaptability. 

Four important features of the run-time system are: 

• It is small 

• It is completely ROMable 

• It is configurable 

• It is efficient 


Conceptually, an Ada tun-time system can be viewed as consisting of the followii^ components: 

• Executive, i.e., the start-up mechanism 

• Storage Management 

• Tasking Management 

• Input/Ouqiut 

• Exception Handling 


58 








DACS>80x86 User's Guide 
The Ada Linker 


• Run-Tune Library Routines 

• Package CALENDAR support routines 


The nui-tiine system (RTS) can be ctmfigured by the user through Ada Linker command options. 
The Ada Linker will generate tqipropriate dau stnicnues to reptesem the configured characteristics 
(UCD). 

Two versions of the RTS are supfrfied. one including tasking and one excluding taskir^. The 
linker selects the RTS version including tasking only if the t^on -tasks is presem or -tasks n 
is present and n > 0. Otherwise, the linker selects the RTS version excluding tasking. 


6.4 Linker Elaboration Order 

The elaboration order is primarily given by the unit dependencies, but this leaves some freedom 
here and there to arbitrarily choose between two or more alterruttives. This arbitrary is in the 
DACS-80x86 linker controlled by the spelling of the involved library units, in order for "free” 
units to become alphabetically sotted. 

Recompiling from scratch, an entire system may thus affect the allocation of unit numbers, but the 
elaboration order remains the same. 

It is also attempted to elaborate "body after body", so that a body having a with to a specification, 
will be attempred elaborated the body of this specificatiotL 

Also elaboration of units from different library levels is attempted to complete elaboration of a 
father-level prior to the son-leveL 

This strategy should In many cases reduce the need for resetting pragma ELABORATE. 


6.5 Ada Linker Options 

This section describes in detail the Ada linker option and parameters. 


6J.1 The Parameter <unit-nanie> 

<unit-iume> 

The <unit_name> must be a library unit in the current program library, but not necessarily of the 
current sublibtary. 

Note that a main program must be a procedure without parameters, and that <unit-name> is the 
identifier of the procedure, not a flle speciflcatkm. IIk main procedure is not checked for 
parameters, but the execution of a program with a main procedure with parameters is undefined. 










DACS-nx86 User’s Guide 
The Ads Unker 


6J J The Psrameter <rccoinpiatioii<qieo 
The syntax of <re«w np i h i tk >a i peca is: 

<iiidt_spco[*body|-4pcdflaitkNi](,»] 

This psnuneter tells the linker to peifonn a consistency check of the entire pfogram using the 
hypothetical recompilation of all unitt designated in the <recontpilation-speo. The link p roces s 
in this instance is not actually p e rib i m e d. 

The <unit_spec> is a list of unit-naines (wildcanis are allowed), separ a ted by comma (,) w plus 
(+). Eadi unit-name should include an option to indicate if tte body or specification is to be 
hypothetically compiled (-spec is the default). 


Required Rcoompilations 

If the consistency chedt found that recompilations ate required, a list of required recompilations 
is written to the currem output file or to a text file if the -log option is specified (the name of 
the text file is indicated in the log file, line 8). The list will include any inconsistencies detected 
in the library and recompilations requited by the hypothetical lecompQations specified with the 
options -dedaration and -body. 

The entries in the list contain: 

1) The unit name. 

2) Indication of what type of unit (declaration unit, body unit, or subunit). 

3) If the unit is spedfied as recompiled with the -dedaratioa or -body option, it is marked 
with "-R-". 

4) The environmental variable of the subUbrary containing the uniL 

In the recompilation list the units are listed in a recommended recompilation order, consistem with 
the dependendes among the units. 


6J.4 -scardilib 

•searchlib <filc_iianie> {,<flle Jiamo) 

The -searchlib option directs the Ada Linker to search the spedfied 80x86 target libraries for 
object modules in order to resolve symbol references. The 80x86 target libraries for otgect files 
will be searched before the DACS Run-Time System (RTS) library normally searches for nin-time 
routines: in this way one can replace the standard DACS RTS routines with custom routines. 

The -searchlib option is also intended to spedfy Ubtvies of modules referenced from Ada via 
pragma INTERFACE. 


60 



DACS-80X86 User s Guide 
The Ada Linker 


Examples: 

$ ada-link •searchlib InterfiKC^lib p 

Links the subprogram p. resolving referenced symbols first with the target library imeiface.Iib 
and then with the standard RTS target library. 


-stop-bcibrcJink 
•stop_bcfiDreJink 

The •stop_bcforeJink option allows the user to introduce assemblers and linkers from third 

patties or to otherwise configure the link to suit the application. The link is halted with the 

following conditions: 

• The user configurable data file. <tnain>-ucd.o. is produced with the default or user specified 
linker option values included. 

> The elaboration code is contained in the <main>-el^xode.o file. 

• The shell script file that contains the link command is present and has not been executed. The 
file’s name is <main> Jink.com. 

• The temporary Ada object fdefs) used by the target linker are produced. These objects are 
linked and deleted when <main> Jink.com is executed. 

• With -selectiveJink the objea files comprise all Ada units including those from the root 
library. At this point it is possible to disassemble the ’’cut” objea files using -objea with dte 
disassembler. 

To complete the link, the <main> Jink.com script must be executed. To use third party tools, this 

file may have to be modified. 


6£j6 -options 

•options <paratneter> 

•options allow the user to pass options onto the target linker. 


61 






DACS*80x86 User's Guide 
Run-Time System 


6J.7 -library 

•library <IUc-aaiiie> 

•library $ada_library (defuilt) 

The -library option specifies the current sublibraiy, from which the linking of the main unit will 
take place. If this option is not specified, the subUbrary specified by the environmental variable 
ada Jibrary is used. 


6J.8 -sdcctivcjink 
•select! vc_link 

This extracts all required objea modules from die Ada library Oncluding the root library) and cuts 
out exactly those parts that are actually called, in order to make the resulting target (»ogram 
considerably smaller. If a program uses e.g. PUT.LINE as the only routine from TEXTJO. the 
contribution from the TEl^JO objea m^ule will only contain PUT.UNE (and whatever that 
needs). Note that disassemblies of units used in a selective link normally will not match what is 
linked, because of the cutting. Such disassemblies may dnu^ be obtained by disassembling 
directly those units that made up the selective link, by stopping the linking before the targa link 
phase (•stop_beroreJink). making disassemblies using -objea and then resuming the link. 

Note also that unused constants and permanent variables are not removed. 

Only "level 1" subprograms may be removed. Nested subprograms (that are not called) are to be 
removed during compilation using the -optimixe option. Nested subprograms are only removed, 
if the routine in which the nesting occurs is removed. 


6J.9 -[nollog 

•log [<flle-speol 

-nolog (default) 

The option specifies if a log file will be produced from the front end linker. As default. ix> log 
file is produced. If <rile-^c> is not entoed with -log the default file name for the log file will 
be link.log in the current direaory. 

The log file contains extensive information on the results of the link. The file includes: 

• An elaboration order list with an entry for each unit iiKluded. showing the order in which the 
units will be elaborated. For each unit, the unit type, the time stamp, and the dependencies are 
shown. Furthermore, any elaboration inconsistencies will be repotted. 

• A linking summary with the following information: 

• Parameters and active options. 

• The full name of the program library (the cunem sublibrary and its ancestor sublibraties). 


62 


0 


DACS-80x86 User’s Guide 
The Adt Linker 

• The number of each type of diagnostic message. 

• A tennination message, stating if the linking was terminated suoKssMly or unsuccessfully or 
if a omsequence examination was tenninaied. 

• Diagnostic messages and warnings are wiitten on the log fQe. 


If recompilations are required (as a result of the coiKistency check) a text file is inoduced 
comaining exceipts of the tog file. The name of this text file is written in the log file, line 8. 


The tog file consists of: 

• Header consisting of the linker name, the linker version number, and the link time. 

• The elaboration order of the compilation units. The units are displayed in the order elaborated 
with the unit number, compilation time, unit type, dqxndendes, arid any linking errors. 

• If recompilations are required, the units that must be recompiled are listed along with its unit 
type and sublibrary level. 

• The linking summary that includes the main unit name, the program library, any recompilations 
that are required, and if any errors or warnings occurred. 


6J.10 •[no]root-extract 
•root.extract 

•noraot_extract (default) 

The units contained in the Ada system library supplied by DDC-I have been extracted and inserted 
into the Sada.rootjib OMF Library, thus eUminating extractions from the system library at link 
time and improving link performance. 

The user should normally not modify or compile into the Ada system library supplied by DDC-I. 
If however, a unit is compiled into the Ada system library, the $ada_toot_lib will no longer 
match the Ada system library and •root_extract must be specified in order to link from the Ada 
system library. 


6J.11 -[noldebug 
-debug 

-nodebug (default) 

The -debug option specifies that debug information is gerxiated. The debug information is 
required to enable symbolic debugging. If -nodebug is specified, the Ada linker will skip the 
generation of debug information, thus saving link time, and will not insert the debug mformation 


63 






DACS*80x86 User’s Guide 
The Ada Linker 


into the chosen subUlvaty. thus saving disk space. Note that any urat which should be 
symbolically debugged with the OOC-I Ada Symbolic Cn»s Debugger must also be compiled with 
the •debug option. 


6^.12 -(nolrts 

•Its (default) 

•norts 

The -rts option directs the Ada Linker to include the appropriate Run-Tune System (RTS) in the 
link, •norts directs the Ada Linker to exclude the RTS in the link. 

The ability to exclude the Run-Tune System frem the link allows the user to do an additional link 
with a private copy of a custom RTS. The Ada Linker may repon unresolved references to RTS 
routines, but will still produce a relocatable objea file. 


6J.13 -mis 


•rms 

This option selects the Rate Monotonic Scheduling Taricing Kernel (if tasking is selected). The 
default is to use the Standard Tasking Kernel. This feature is supplied as an option. 


6,5.14 -(nolcxtract 

•extract (default) 

•noextract 

This option to the linker allows the user to specify that program unit objects should not be 
extraaed from the Ada program library. This oi^on would be used if the user knows that many 
objects have not changed since the last link and does not want the linker to waste time extracting 
them. 

To use this feature, the user should modify the tem{4ate to not delete unit object files after a 
target link is perfoimed. This way the object files remain in the currem directory (or whereever 
the user decides to put them). On subsequent links the user can extract objea modules of 
modified units from the Ada library using the standalone DACS extiaa tool. A new target link 
can then be perfoimed using a combination of newly extracted objects and the objea files ftom 
previous links that have gone unchanged. This could significantly improve linker speed when 
linking programs that share common and rarely modified libraries aixl when relinking programs 
that have had only a few units modified. 


64 




DACS-80x86 User's Guide 
The Ada Linker 


6^.15 -templale 

•template <lile-naine> 

•template Sada.temfriaie (default) 

The template flic is known to the linker via the environmental variable ada_template. DDC-I 
supplies a default template file as pan of the standard release system. Please refer to appendix H 
for detailed informatioa 


6^.16 •npx 

•npx (default) 

•nonpx 

The •npx option specifies that the 80x87 (8087. 80287, or 80387) numeric coprocessor is used 
by the Ada program. When •npx is specified, the 80x87 is initialized by tbe task initialization 
routine, the floating point stack is reset during exception conditions, and the 80x87 context is 
saved during a task switch. 


Configurable Data 

A 16 bit boolean constant is generated by the Ada Linker. 


CO NPX USED 


boolean 


s 0 • 80x87 is not used 
s 1 • 80x87 is used 


6J.17 •tasks 
•tasks [n] 

(default is no tasking) 

This option ^cifies the maximum number of tasks allowed by the RTS. If specified, n must be 
greater than zero. If -tasks is specified without a value for n, n defaults to 10. If -tasks is not 
specified, the RTS used will not include support for tasking. If -tasks is specified, the RTS used 
will include support for tasking. 

Ada Interrupt tasks identified with pragma INTERRUPT.HANDLER need not be included in the 
count of maximum number of tasks. The main program must be counted in the maximum tuimber 
of tasks. Note that the main program, which may implidtly be considered a task, will not run 
under control of the tasking kernel when -notasks is specified. See also -rms option. 


Configurable Data 

For -tasks, the linker generates the following configurable data: 


65 





DACS-80X86 User’s Guide 
The Ada Linker 


CO Max TasKS 


nrrxaBM » ii 


CO TCBS 


N Taak 

Control 

Blocks 

(TCBS) 

If •OpK Is 
actlvo, N 
noswrle eo* 
proeossor 
jsj2_£U«s__ 


Example: 

$ ada-link 'tasks J p 

• Link the program P. which has at most 3 tasks, including the main program. 


6,5.18 'Priority 
'Priority n 

-priority 15 (default) 

The -priority option specifies the default priority for task execution. The main program will run 
at this priority, as well as tasks which have had no priority level defined via pragma PRIORITY. 
The range of priorities is from 0 to 31. 

Priorities can be set on a per task basis dynamically at nm time. See section E.1 (Package 
RTS_EntryPoints) for more details. 


Configurable Data 

The Ada Linker generates the following constam data: 


CD PRIORZTT 


Constsnt - H 


Example: 

$ ada-link -tasks -priority 8 p 

• Link the subprogram P which has the main program and tasks running at 
default priority 8. 


66 




DACS-80x86 User's Guide 
The Ada Linker 


<LS.19 -time-slke 

•time^slke [r] (default no time slicing is active) 

The •Uine_slice options specifies whether or not time slicing will be used for tasks. If specified, 
R is a decimal number of seconds representing the default time slice to be used. If R is not 
specified, the default bme slice will be 1/32 of a second. R must be in the range Duration’Small 
^ R ^ 2.0 and must be greater than or equal to the •timer linker option value. Time slicing only 
applies to tasks running at equal priority. Because the Rl^ is a preemptive priority scheduler, the 
highest priority task will always run before any lower priority task. Oiily when two or more tasks 
are tunning at the same priority is time slicing applied to each task. 

Time slicing can be specified on a per task basis dynamically at run-time. See Section E.1 
(Package RTS.EntryPoints) for more details. 

Time slicing is not applicable unless tasking is being used. This means that the 'tasks option 
must be used for -time slice to be effective. 


Configurable Data 

The Ada Linker generates the following data: 


CD TIME SLICE OSED 


BOOLEAN 


No tlm« allelnq 
Tim* slicing 


CD TIME SLICE 


abaoluf IntooT 


• representing the number Y that satisfies Y * DURATION’SMALL = R 


Example: 

S ada-link •time_slice 0.125 'tasks p 

• Specifies tasks of equal priority to be time sliced each eighth of a second. 


6.5.20 -timer 
•timer R 

•timer 0.001 (default) 

The -timer option specifies the resolution of calls to the Run-Time Sj^em routine TIMER (see 
the Run-Time System Contiguration Guide for DACS-80x86 for more information). The number, 
R, specifies a decimal number of seconds which have elapsed for every call to TIMER. The 
default TIMER resolution is one millisecond. R must be in the range DURATION’SMALL< R 
< 2 . 


67 



OACS>80x86 User's Guide 
The Ada Linker 


Confifuniblc Data 


The Ada Linker generates the following 16 bit constant: 


CD TZMEK 


Ab«oXuf InfgT 


• representing the number Y that satisfies Y * DURATION’SMALLsR 


6JJ1 •reserve-stack 
•reserve stack [n] 


The •reserve_stack option designates how many words are reserved tm each task stack. This 
space is rese^ed for use by the RTS. which does no checking for stack overflow. This reserved 
space also allows the RTS to function in situations such as handling a storage error exception 
arising from stack overflow. 

The •reserve_stack option also reserves part of the main program suck size, specified by the 
linker option •inp_stack_size. 


Configurable Data 

The Ada Linker generates the following integer constant: 


CO RESERVE STACK 


IMTECER 


Examples: 

$ adaJink •reserve_stack 200 •tasks p 

• Reserve 200 words from each stack for use by the RTS. 


6.5.22 •lt-stack_size 

•lt_stack_size n 
•It-stackl^ze 500(default) 

The •U_jtack_size option designates the library task default size in words. A library task is 
formed when a task objea is declared at the outermost level of a package. Library tasks are 
created and activated during the initial main program elaboration. (See the Ada Reference Manual 
for more details). 


68 








DACS*80x86 User’s Guide 
Tile Ada Linker 


For each library task, the representation spec: 

FOR Tisk_objea’STORAGE_SI2E USE N; 

can be used to specify the library task stack size. However, if the representation spec is not used, 
the default library task size specified by •lt_stack_size will be used. 

For efficiency reasons, all tasks created within library tasks will have stacks w ithin the 

same segment as the library task stack. Normally, the segmem which contains the library task 
stack is allocated just large enough to hold the default litouy task stack. Therefi»e, one must use 
the option -It-stack-option or the pragma LT_SEGMENT_SIZE to reserve more space within the 
segment that may be used for nened tasks' stacks. (See the implementatioo dependent pragnu 
LT_SEGMENT_SIZE in Section F.l for more information). 

The range of this parameter is limited by physical memory size, task aack size alln a ^ted rfuri n g 
the build phase of the link, and the maximum segment size (64K for all except the 386/486 
protected mode, which is 4 GB). 

Configurable Data 

The Ada Linker generates the following integer constant: 


CO LT STACK SIZE 


INTEGER 


Example: 

S ada-link •U_stack_size 2048 'tasks p 

* Link the subprogram P using a 2K words defoult library stack size. 


6^J23 •lt-stack_size 
-lt_seginent_size n 

•lt_seginent_size Gt-stack_size + 20 + excepdon-stack-space) (default) 

This parameter defines in words the size of a library task segment The library task segmem 
contains the task stack and the stacks of all its nested tasks. 

The default value is only large enough to hold one default task stack. If •U_stack_size is used and 
specifies a value other than the default value, •lt_segtnait_size should also be s^cified to be the 
size of <task_stack_size> + 

<total_of_ncsted_tasks_sizes> + 

<20_woids_overhead> + 
exception.stack.space. 

Note that the task stack size specified by tlie ’STORAGE_size can be representation spec or by 
the option •It-stack.size. 

Dynamically allocated tasks receive their own segmem equal in size to the mp_segment_size. 


69 






DACS-80x86 User’s Guide 
The Ada Linker 


The range of this parameter is limited by physical memory size, task stack size allocated during 
the buUd phase, and the maximum segmem size (64K for all except the 386/486 protected mode, 
which is 4 GB). 


Conflgurable Data 


The Ada Linker generates the following data structure: 


CO LT SEGMCMT SIU 


nmsaCT 


Example: 

$ ada-Iink •lt_seginent_size 2048 'tasks p 

• Link the program P using a library task segment size of 2K words. 


6J,24 -mp-stack_size 

•mp_stack_size n 
-mpZstack-size 8000 (default) 

The •mp_stack_size option specifies the main program stack size in words. 

The range of diis parameter is limited by physical memory aze, task stack size allocated during 
the build phase (in tasking programs ordy), the maximum segmem size (64K for all except the 
386/486 protected mode, which is 4 GB), and the size of mp_segmem_size. 

Conflgurable Data 

The Ada Linker generates the following data structures for nontasking programs: 


CO MP STACK SIZE 


IMTEGER 


CO MP STACK 


MP_STACK_SIZE 
words of” 

Ls£S£SSS____— 


CD MP STACK START 


Blghost addr. 
of MP stack 


For tasking programs, the Ada Linker generates the same structures but limits the size to 1024 
words. This stack is only used for the execution of the system startup code and elaboradotL 
At main program activation, a segmem for the main program equal to the size specified by • 
•mp_seginent_size will be allocated from the dynamic memory pool and a stack for the main 
program equal to the size specified by •inp_stack_size will be allocated from the memory 
pool. 


70 




DACS-80X86 User's Guide 
The Ada Linker 


Example: 

$ adaJink •inp_stack_size 1000 p 

• Link the subprogram P with a sack of 1000 words. 


6J.2S -mp-segment-size 


-inp_segnient_size n 
•inp_seginmCsize 8100 G^fault) 

The •mp_segiiwnt_size option specifies the size, in words, of the segment in which the main 
program sack is aUocated. The default setting can be calculated from the fonnula: 

mp_segmem_size = mp_stack_size + 

overhead + (tasks • 1) * 

(overhead task_storage_size) 

NormaUy, the main program segment size can be set to the size of the main program stack. 
However, when the main program contains nested tasks, the stacks for the nested tasks will be 
allocated from the data segment which cotuains the main program stack. Therefore, when the 
main program contains nested tasks, the main program stack segmem mus be extended via the 
•mp_segment_size optioa 

The range of this parameter is limited by physical memory size, task stack size allocated during 
the build phase (in tasking programs only), and the maximum segmem size (64K for all except 
the 386/486 protected mode, which is 4 GB). 

Note: Dynamically allocated tasks receive their own segment equal in size to mp_segmem_size. 


Configurable Data 

The Ada Linker allocates the _CD_MP_STACK (see die -inp_stack_size option) within a data 
segment called _CD_MP_STACK_SEGMENT: 


CD HP STACK SEGMENT 


IMP STACK 


T T T 

MP STACK START tU STACK SIZE HP SEGMENT SIZE 


Example: 

$ adaJink ‘tasks •nip_scginent_size 32000 |N^>gram_a 

Links the subprogram mOGRAM_A, which contains tasks nested in the main program 
allocating 32,000 words for the main program stack segment 


71 



DACS-80X86 User's Guide 
The Ada Linker 


6J5J6 -taak-storagc-siae 


•task_stonige_siae n 
•taskistorage-siac 1024 (default) 

This option sets the default storage size in words for stacks of tasks that are not library tasks. 
This value can be overridden with a repieseruation clause. 

The range is limited by the size of the lt_segment.size (if it is a subtask to a library task), or by 
mp_segmem_size Gf it is a subtask to the main program). 


Configurable Data 

The Ada Linker generates the following data structure: 


CD TASK STOMGE SISE 


IMTEGEB 


SS21 •interTupt-entry_table 
•interrupt_entry_table L41 

The •intefTupt_entry_tablc option specifies the range of imemipt vector numbers used by the 
Ada program in interrupt tasks. 

The number. L. specifies the lowest numbered interrupt handter. The number. H. specifies the 
highest numbered interrupt handler. The range for low and high interrapts is 0 to 2SS. 


Configurable Data 

If •interTupt_entry_table is specified, the Ada Linker will generate the foUowing data structure: 


CD LOW IMTEKraPT 


COWSTAHT 


(A) 


CD HICK nrrcmoPT 


COWSTAW 


<•) 


CD INTERltOPT VECTOR 


words rosorvod 
for Intorsupt 
Voctor_ 


If the user ever detects unresolved references to the symbols: 

CD LOW INTERRUPT 
CD HIGH INTERRUPT 
CD_INTERRUPT_VECrOR 








DACS-80x86 User’s Guide 
The Ads Linker 


the Ada progrm contains standaid interrupt tasks for which the RTS requires the above data 
structure. You must relink the Ada prognsn specifying the -iidemtpt_cntry_table optkm. 

Example: 

$ adaJink 'tasks •interruptjentry^tablc 5,20 p 

• Links the subprogram P. which has standard Ada interrupt entries numbered 5 
through 20. 


6JJ8 -{nolenable-taak-trace 

•«nable_task_trace 
•noenabie_task_traoe (default) 

This option instructs the exception handler td produce a stack trace when a task terminates because 
of an unhandled exception. 


Configurable Data 


CO TITACE nUBlXO 


BOOUUW 


• 0 - t«ak traca diaablad 

• 1 - tMk traea anablad 


6JJ9 •cxception^space 

•exception_space n 
•exception-space OaOh (default) 

Each suck will have set its top area aside for exceptkm qrace. When an exception occurs, the 
exception handier may switch stack to this area to avoid accidental overwrite below the stack 
bottom (which may lead to protection exceptions) if the size of the remaining part of the stack 
is smaller than the N value. Specifying a value aO will never cause stack switching. Otherwise an 
N value below the default value is not recommended. 


Configurable Data 

CD EXCSPTIOH STACK SPACE SIZE 


IWTEaER 


Note that this value is added to all requests for ta^ stack space, thus requiring an increase in the 
requiremems of the appropriate segm^’s size 


73 






DACS-80X86 User’s Guide 
Tbe Ada Linker 


&S JO •ai^_oa 
•signj» [<stiinf>] 

When this option is specified the linker will generate code to output a sign on messa^, before 
the Ada elaboration is initiated and a sign off message when the target program has tenninated 
successfully. If the program terminates with an uncaught exception, the sign off message is not 
printed. 

The sign on message consists of: 

START [<string>] <program name> 
and the sign off message 
STOP (<string>] <qprogtam name> 

The <string> may contain spaces. e.g. 

•sign-on Test 3" (remember the quotes). 

This facility is very useful to separate output from several target ptu tun after each other, 
and to verify that a program that produces little or no output Iw . l iy been loaded and run 
successfully. 


74 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, %dilch are 
not a part of Appendix F, are: 

package STANDARD is 

type SHORT_INTEGER is range -32_768 .. 32_767; 

type INTEGER is range -2_147_483_648 .. 2_147_483_647; 

type LONGINTEGER is 

range -16#8000_0000_0000_0000# .. 16#7FFF_FFFF_FFFF_FFFF#; 

type FLOAT is digits 6 

range -16#0.FFFF_FF#E32 .. 16#0.FFFF_FF#E32; 

type LONG_FLOAT is digits 15 

range -16#0.FFFF_FFFF_FFFF_F8#E256 .. 16#0.FFFF_FFFF_FFFF_F8#E256; 
type DURATION is delta 2#1.0#E-14 range -131072.0 .. 131_071.0; 
end STANDARD; 


C-1 






APPENDIX F - IMPLEMENTATION-DEPENDENT CHARACTERISTICS 


This appendix describes the impleineiuation-dependem characteristics of DACS-80XS6™ as required 
in App^ix F of the Ada Reference Manual (ANSI/MIL-STD-181SA). 


F.l Iinpieinentation<Dependent Pragmas 

This section describes aU implemetuaiion defined pragmas. 


F.1.1 Pragma INTERFACE-SPELLING 

This pra^a allows an Ada program to call a non-Ada program whose name contains characters 
that ate invalid in Ada subprogram identifiers. This pragma must be used in conjunction with 
pragma INTERFACE, i.e., pragma INTERFACE must be specified for the Ada subprogram name 
prior to using pragma INTERFACE_SPELLING. 

The pragma has the format: 

pragma INTERF.ACE.SPELLING (subprogram name, string literal); 

where the subprogram name is that of one previously given in pragma INTERFACE and the string 
literal is the exaa spelling of the iruerfaced subprogram in its native language. This pragma is 
only required when the subprogram name contains invalid characters for Ada identifiers. 

Example: 

function RTS_GetDataSeginent return Integer; 
pragma INTERFACE (ASM86, RTS_GetOataSegment); 

pragma INTERFACE_SPELLING (RTS_GetDataSegment, ”RlSMGS?GetOataSegment''); 

The string literal may be appended ’NEAR (or ’FAR) to specify a particular method of call. The 
default is ’FAR. 'This suffix should only be used, when the called routines require a near call 
(writing ’FAR is however harmless). If ’NEAR is added, the routine must be in the same segment 
as the caller. 


F.1J Pragma LT-SEGMENT-SIZE 

This pragma sets the size of a library task stack segment. 

The pragma has the format: 

pragma LT_SEGMENT_SIZE (T, N); 

where T denotes either a task objea or task type and N de^gnates the size of the library task 


193 




DACS-80x86 User's Guide 
Implementation-Dependeiu Qiancterisics 


stack segment in words. 


The library task’s stack segment defaults to the size of the library task stack. The size of the 
library task stack is normaUy specified via the representation clause (note that T must be a task 
type) 


for T’STORAGE.SIZE use N; 

The size of the library task stack segmem determines bow many tasks can be created which are 
nested within the library task. AU ta^ created within a lib^ task will have their stadcs 
allocated from the same segment as the library task stack. Thus, pragma LT_SEGMENT_SIZE 
must be specified to reserve space within the library task stack segmem so that nested tasks’ 
stacks may be allocated (see section 7.1). 

The following restrictions ate places on the use of LT_SEGMENT_SIZE: 

1) It must be used only for library tasks. 

2) It must be placed immediately after the task object or type name declaration. 

3) The library task stack segment size (N) must be greater than or equal to the library task 
stack size. 


F.IJ Pragma EXTERNAL-NAME 


F.U.1 Function 

The pragma EXTERNAL.NAME is designed to make permanem Ada objects and subprograms 
extemaUy available using names supplied by the user. 


F.UJ Format 

The format of the pragma is: 

pragma EXTERNAL_NAME(<ada_entity>,<extemal name>) 
where <ada_entity> should be the name of: 

• a permanent object, i.e. an objea placed in the permanent pool of the compilation unit • such 
objects originate from package specifications and bodies ody. 

• a constant objea, i.e. an objea placed in the constant pool of the compilation unit • please 
note that scalar constants are embedded in the code, and composite constants ate not always 
placed in the constant pool, because the constant is na consittered constant by the compiler. 


194 



DACS-80x86 User’s Guide 
Implementation-Dqiendent Quracterisucs 


• a subprogrun name. i.e. a name of a subprogram defined in this compilation unit - please 
notice that separate subprogram specifications cannot be used, the code for the subprogram 
must be present in the compilation unit code, and where the <extemal name> is a suing 
specifying the external name associated the <ada_entity>. The <extemal names> should be 
unique. Specifying identical spellings for diHerent <ada_entities> will generate errors at compile 
and/or link time, and the responsibility for this is left to the user. Also the user should avoid 
spellings similar to the spellings generated by the compiler, e.g. E_xxxxx_yyyyy, P_xxxxx. 
C.xxxxx and other imemal identifications. The target debug type infonnation associated with 
such external names is the null type. 


F.l Restrictions 

Objects that are local variables to subprograms or blocks canimt have external names associated. 
The entity being made external ("public”) must be defined in the compilation unit itself. Attempts 
to name entities from other compilation units will be rejected with a warning. 

When an entity is an object the value associated with the symbol will be the relocatable address 
of the first byte assigned to the object 


F.1J.4 Example 

Consider the following package body fragment 

package body exanple is 

subtype stringlO is string(1..10); 

type s is 
record 

len ; integer; 
val ; StringlO; 
end record; 

global_s : s; 

const_s ; constant stringlO ”1234567890”; 

pragma EXTERNAL_NAME{global_3, ”GLOBAL_S_OBJECT"); 
pragma EXTERNAL_NAME(const_s, ”CONST_S”); 

procedure handle (...) is 

end handle; 

pragma EXTERNAI,_NAME (handle, ”HANDI,E_PROC”) ; 


end example; 

The objects GLOBAL_S and CONST_S will have associated the names "GLOBAL_S_OBJECT" 
and "CONST_S". The procedure HANDLE is now also known as "HANDLE_PROC". It is 


195 


DACS*80x86 User's Guide 
Imptemeiuation-Dependent Qjaracteristics 


aUowatde to assign more than one external name to an Ada entity. 


F.1J.3 ObjcA Layouts 

Scalar objects are laid out as described in CSiapter 9. For arrays the object is described by the 
address of the first element; the array constraint(s) ate NOT passed, and therefore it is 
recommended only to use arrays with Imown constraints. Non- discriminated records take a 
consecutive number of bytes, whmas discriminated records may contain pointers to the heap. Such 
comidex objects should be made extetiuUy visible, only if the user has thorough knowledge about 
the layout 


F.IJJS Parameter Passing 

The following section describes briefly the futxlamentals regarding parameter passing in connection 
with Ada subprograms. For more detail, refer to Chapter 9. 

Scalar objects are always passed by value. For OUT or IN OUT scalars, code is generated to 
move the modified scalar to its destination. In this case the stack space for parameters is not 
removed by the procedure itself, but by the caller. 

Composite objects are passed by reference. Records are pas«ed via the address of the first byte 
of the record. Constrained arrays are passed via the address of the first byte (plus a bitoffset when 
a packed array). Unconstrained arrays are passed as constrained arrays plus a pointer to the 
constraints for each index in the array. These constraints consist of lower and upper bounds, plus 
the size in words or bits of each element depending if the value is positive or negative 
respectively. The user should study an appropriate disassembler listing to thoroughly understand 
the compiler calling conventions. 

A function (which can only have IN parameters) returns its result in registerfs). Scalar results are 
registers/float registers only; composite results leave an address in some registers and the rest, if 
any, are placed on the stack top. The stack still contains the parameters in this case (since the 
function result is likely to be on the stack), so the caUer must restore the stack pointer to a 
suitable value, when the function call is dealt with. Again, disassemblies may guide the user to 
see how a particular function call is to be handled. 


F.1.4 Pragma INTERRUPT-HANDLER 

This pragma will cause the compiler to generate fast interrupt handler entries instead of the normal 
task calls for the entries in the task in which it is specified. It has the format: 

pragma INTERRUPT.HANDLER; 

The pragma must appear as the first thing in the specification of the task object The task must 
be specified in a package and not a procedure. See ^tion F.6.2.3 for more details and restrictions 
on specifying address clauses for task entries. 


196 



DACS-30x86 User’s Guide 
Implementation-Depaideiu Characteristics 


F.IJ Pragma MONITOR_TASK 


F.U.l Function 

The pragma MONTTORJTASK is used to specify that a tasif with a certain structure can be 
handled in a special way by the Run-Tune System, enabling a very eflicient coiuext switch 
opersuion. 


F.U,2 Format 
The format of the pragma is 
pragma MONlTOR_TASK: 

The pragma nuist be given in a task specification befr~e ‘‘ny entry declarations. 


F.1,5J Restrictions 

The following restrictions apply on tasks containing a pragma MONITOR_TASK : 

• Only single anonymous tasks can be "monitor tasks”. 

• Entries in "monitor tasks" must be single entries (i.e. not family entries). 

• The task and entry attributes ate not allowed for "monitor tasks" and "monitor task" entries. 

• The <declarative paro shouTld only contain declaration of objects; no types or nested sturctuies 
must be used. 

• The stmcture of the task body must be one of the following: 

body MONJEASK Is 
<d«clarattv« part> 
b*9in 

<stat«Mnc llst> 
loop 
solact 

•ccapt EHTRY l<paraiMtar_llst> [do 
and]; ~ 

or 

accapt EtlTRy_2<paraaiatar_llst> (do 
<stataaMne~llst> ~ 

and); ~ 

or 

tarmlnata 
and salact; 
and loop; 
and; 


where each entry declared in the specification must be accepted unconditionally exactly oiKe. 


197 






DACS*80x86 User’s Guide 
Implementadon-Depeiulent Characteristics 


2 . 

task txMty MON_TASK la 
<d«elacact^ p«rt> 
b«9ln 

<stataMnc llst> 
loop 

aceapc M0M_ENTItY<paraiMtar_li3t>[4o 
<statoMnt_llst> 
and) ; 
and loop; 
and; 

where the task only has one entry. 

In both cases the declarative parts, the statement lists and the parameter lists may be empty. 
The statement list can be arbitrarily complex, but no nested select or accept s tatem ent are 
allowed. 

No exception handler in the monitor task body can be given. 

The user must guarantee that no exceptions are propagated out of the accepts. 


F.1.5.4 Example 

The following tasks can be defined 

taak LIST HANDLER la 

pragma MOMITOR_TASX; 
antry INSERT(ELEM:CLEM TYPE); 
antcy REMOVE (CLEM: out ELEM TYPE) ; 
antry IS PRESENT(ELEM:ELEm'tYPE; 

RESULT;out~BOOLCAM); 

and LIST_BANOLCR; 

task body LIST HANDLER la 
"daflna iTaf 

bagln 

•inltlallaa Hat* 
aalact 

accapt INSERT I ELEM:CLEM_TYPE)do 
'Inaart in Mat" 
and INSERT; 
or 

accapt REMOVE(ELEM:out ELEM_TYPE)do 
"find In Hat and ramova froai Hat* 
and REMOVE 
or 

accapt IS_PRESENT(ELEM;ELEM_TYPE 

RES: out BOOLEAN)do 

"acan Hat* 
and IS_PRESCNT; 
or ~ 

tarmlnata, 
and aalact 

and MON_TASK; 


The task can be used 

taak typa LIST_DSER la 

and LIST_OSER; 

taak body LIST_DSER la 


198 







DACS-80x86 User's Guide 
Implemenution-Depen^ Characteristics 


b« 9 ln 

aalact 

t.IST_aAilDUSR. INSERT (rXRST_EIXM) i 
alia ~ ~ 

ralaa INSERT_ERROR; 
and aalact; ~ 
loop 

LIST_aANDLER.INSERT(NEXT_ELEM); 
and lo^; 
and LIST OSER; 


F.l^ Pragma TASK_STORAGE_SIZE (T, N) 

This pragma may be used as an alternative to the attribute TASK_STORAGE_SIZE to designate 
the storage size of a particular task object (T) (see section 7.1). 


FJ Implementation*Dependent Attributes 
No implementation-dependent attributes are defined. 


FJ Package SYSTEM 

The specifications of package SYSTEM for all DACS-80x86 in Real Address Mode and 
DACS-8()286PM systems are identical except that type Name and constant System.Name vary: 


Compiler System 


System Name 


DACS-8086 iAPX86 

DACS-80186 iAPX186 

DACS-80286 Real Mode iAPX286 

DACS-80286 Proteaed Mode iAPX286 PM 


Below is package system for DACS-8086. 

packs?* Systam la 

typ* Word la n*w lnt*?«t; 

typ* OHord la n«w Long_lnc« 9 *c; 

cyp* OnslgnodHoEd la rang* 0..6SS3S; 

for OnalgnodMord'SIZE us* 16; 

typ* byt* la rang* 0..255; 

for byt*'SIZE us* 8; 

subcyp* s*gm*ntld la OnslgnadHord; 

typ* Addrass la 

racord 

offsat ; UnslgnadMord; 
sagmant : Sagmantld; 
and racord; 

subcyp* Priority la Incagar rang* 0..31; 


199 






DACS-80x86 User's Guide 
Implementatioii-Dependem Characteristics 


eyp« MM is (1APXS6); 

SYSTIM MIS : constant Mm lAPXSS; 

svaaua omit : constant IS; 

MBMORT SIZE : constant :• 1 041 S7S; 

MZM IMT : constant ;• -2 147 4S3 S47-1; 

MAX^IMT : constant :• 2_T47_4S3jS47; 

MkX DIGITS ; constant :• IS; ~ 

HaX~MMITISSA : constant 31; 

FIi£_DE 1.TA ; constant :> 2S1.0*E-31; 

TICK : constant :• 0.000_000_12S; 

typo Intorfaca lanouaga Is 

(ASMS, PLMS, CSS. CSS REVERSE, 

ASM ACT, PLM ACT, C ACT, C REVERSE ACT, 
ASM~MOACr, PLM~HOACr, CJIOACF, c'rEVERSE'hQACF) ; 

typo Excoptlonid Is cococd 

unlt_nuRibor : OnalgnodNord; 

unlquo_nuabor : OnslgnodMord; 

ond cococd; 

typo TaskValuo is now Intogoc; 

typo AccTaskValuo is accoss TaskValuo; 
typo Souphocovaluo is now Intogoc; 

typo Somsphoco is cococd 

countoc : Intogoc; 

ficst : TaskValuo; 

last : TaskValuo; 

SONoxt : SoMphocoValuo; 

-- only usod in BOS. 

ond cococd; 

InitSonaphoco ; constant Somaphoco :<• Samaphoco'(1,0,0,0); 
ond Systom; 


The package SYSTEM specification for DACS-80386PM package system is: 

paekago syston is 

typo Hoed is now shoct_Intogoc; 

typo OHoed is now intogoc; 

typo QNoed is now Long_Intogoc; 

typo OnsignodHoed is cango 0..SSS35; 

Coc OnsignodHoed'SIZE uso 16; 

typo UnsignodDHoed is cango 0..16tFFFF_FFFFt; 

foe UnsignodDHoed'SIZE uso 32; 

typo Byto is cango 0..25S; 

foe Byto'SIZE uso 8; 

subtypo Sogmontid is OnsignodHoed; 

typo Addeoss is 

cococd 

offsot : UnsignodDHoed; 
sogMnt . sogmontid; 
ond cocoed; 


foc Addeoss uso 
cococd 

offsot at 0 cango 0..31; 
sogMnt at 2 cango 0..1S; 
ond cococd; 


subtypo Pciocity is Intogoc cango 0..31; 


200 







DACS*80x86 User’s Guide 
Implemeiuation-Depeiideiu Characteristics 


typ« Kaa* la (1A»X38S_PM) ; 

STSTSM tUMB : cenatMt HaaM 1APX3«< PH; 

STORASB miT : cenaCant :• 16; 

HBHOIir_ilSB : COltatant :• 1611 0000 00006; 

MIN Iin ; eenatant :• -166i000 0000 0000 00001; 

: eonatant 16#7rFr OTT FFIT nTTi; 

MAX~0I«TS : eonatant IS; ~ 

MJUC'MMITISaA : eonatant 31; 

Fins OELZa : eonatant 261.0#E-31; 

TICK~ : eonatant 0.000 000 062 S; 


typo Intocfaea^languafo la 

(ASM86, PLM86, C86, C86_REVE11SE, 

ASM ACT, PLM ACT, C ACT. C REVERSE ACT, 

ASM~MQACF, PLMJIOACF, C^IOACF, C~RXVXRSE~MQACr) ; 

typo Excaptlonld la racotd 

unlt_nuariBar : OnalgnadOMord; 
unlqua_nuBdaar : Onal^nadDNord; 
and raeord; 

typa TaakValua la naw Inta^ar; 

typa AccTaakvalua la aeeaaa TaakValua; 

typa SamaphoraValua la naw intavar; 

typa Saaiaphora la raeord 

eountar 
flrat, laat 
SQMaxt 

and raeord; 

InltSaaMphoea : eonatant Saaaphora ;• Saawphora'(l,0,0,0); 
and Syatam; 


F.4 Representation Clauses 

The DACS-80x86''^ fully supports the 'SIZE representation for derived types. The representation 
clauses that are accepted for non-derived types are described in the following subsections. 


F.4.1 Length Clause 

Some remarks on imfdementation dependent behavior of length clauses ate necessary: 

• When using the SIZE attribute for discrete types, the maximum value that can be specified is 
16 bits. For DACS-80386PM/80486PM the maximum is 32 bits. 

• SIZE is only obeyed for discrete types when the type is a part of a composite object, e.g. 
arrays or records, for example: 

type byte is range 0..255; 
for byte'size use 8; 

sixteen_bits_aliocated ; byte; — one word allocated 


: Intaqar; 

: TaakValun; 

: S«Bnphor»Valu*; 

" only uaod In BDS. 


201 







DACS-SOxSe User's Guide 
Implemeiuaiion-Dependent Characteristics 


eight_bit_per_eleinent : array(0..7) of byte; — four words allocated 
type rec is 
record 

cl,c2 : byte; — eight bits per component 

end record; 


• Using the STORAGE.SIZE attribute for a collection will set an upper limit on the total size 
of objects allocated in this collection. If further allocation is attempted, the exception 
STORAGE.ERROR is raised. 

• When STORAGE.SIZE is specified in a length clause for a task type, the process stack area 
will be of the specified size. The process stack area will be allocated inside the "standard" stack 
segment. Note that STORAGE.SIZE may not be specified for a tast object 


F.4J Enumeration Representation Clauses 

Enumeration representation clauses may specify representations in the range of -32767..-t-32766 (or 
-16#7FFF..16#7FFE). 


F.4J Record Representation Clauses 

When representation clauses are applied to records the following restrictions are imposed: 

• if the component is a record or an unpacked array, it must start on a storage unit boundary 
(16 bits) 

• a record occupies an integral number of storage units (words) (even though a record may have 
fields that only define an odd number of bytes) 

• a record may take up a maximum of 32K bits 

• a component must be specified with its proper size (in bits), regardless of whether the 
component is an array or not (Please note that record and unpacked array components take up 
a number of bits divisible by 16 (=wotd size)) 

• if a iron-array component has a size which equals or exceeds one storage unit (16 bits) the 
component must start on a storage unit boundary, i.e. the component must be specified as: 

component at N range 0..16 * M - 1; 

where N specifies the relative storage unit number (0,1,...) from the beginning of the record, and 

M the required number of storage units (1,2,...) 

• the elements in an array component should always be wholly contained in one storage unit 

• if a component has a size which is less than one storage unit, it must be wholly contained 
within a single storage unit: 


202 



DACS-80x86 User’s Guide 
Implementation-Dependent Characteristics 


componem at N range X .. Y; 

where N is as in previous paragraph, and O <= X Y <s 15. Note that for this restriction 
a component is not required to start in an integral number of storage units from the begiruiing 
of the record. 

If the record type contains components which are not coveted by a component clause, they are 
allocated consecutively after the component with the value. Allocation of a record component 
without a component clause is always aligned on a storage unit boundary. Holes created because 
of component clauses are not otherwise utilized by the compiler. 

Pragma pack on a record type will attempt to pack the components not already covered by a 
representation clause (perhaps none). This packing will begin with the small scalar components and 
larger components will follow in the order specified in the record. The packing begins at the first 
storage unit after the components with representation clauses. 


F.4J.1 Alignment Clauses 

Alignment clauses for records are implemented with the following characteristics: 

• If the declaration of the record type is done at the outermost level in a library package, any 
alignment is accepted. 

• If the record declaration is done at a given static level higher than the outermost library level, 
i.e.. the permanent area), only word alignments are accepted. 

• Any record object declared at the outermost level in a library package will be aligned according 
to the alignment clause specified for the type. Record objects declared elsewhere can only be 
aligned on a word boundary. If the record type is associated with a different alignment, an 
error message will be issued. 

• If a record type with an associated alignment clause is used in a composite type, the alignment 
is required to be one word; an error message is issued if this is not the case. 


F.5 Implementation-Dependent Names for Impiementatior. Dependent Components 
None defined by the compiler. 


F.6 Address Clauses 

This section describes the implementation of address clauses and what types of entities may have 
their address speciried by the user. 


203 






OACS-80x86 User’s Guide 
Impleinenution-Dependem Characteristics 


F.6.1 OI)uccts 

Address clauses are supported for scalar and composite objects whose size can be determined at 
conpile thne. The address clause may denote a dynamic value. 


F.6J Task Entries 

The implementation supports two methods to equate a task entry to a hardware interrupt through 
an address clause: 

1) Direct transfer of control to a task accept statemeru when an interrupt occurs. 'This form 
requires the use of pragma INTERRUPT.HANDLER. 

2) Mapping of an interrupt onto a normal conditiotul entry call. This form allows the interrupt 
entry to be called from other tasks (without special actions), as well as being called when 
an interrupt occurs. 


F.6.2.1 Fast Interrupt Tasks 

Directly transferring control to an accept statement when an interrupt occurs requires the 
implementation dependent pragma INTERRUPT.HANDLER to tell the compiler that the task is 
an interrupt handler. 


F.6.2J1 Features 

Fast interrupt tasks provide the following features: 

• Provide ihe fastest possible response time to an interrupt. 

• Allow entry calls to other tasks during interrupt servicing. 

• Allow procedure and function calls during inte servicing. 

• Does not require its own stack to be allocaiec 

• Can be coded in packages with other declaratior^ so that desired visiblity to appropriate parts 
of the program can be achieved. 

• May have multiple accept statements in a single fast interrupt task, each mapped to a different 
imerrupL If more than otre interrupt is to be serviced by a single fast interrupt task, the accept 
statements should simply be coded consecutively. See example 2 how this is done. Note that 
no code outside the accept statements will ever be executed. 


204 







DACS-80x86 User’s Guide 
Impieinenuiioa-Dependent Chancteristics 


F.6JJ Limitatioiis 

By using the fast inienupt feature, the user is agreeing to {dace certain restrictions on the task in 

order to S()eed up the software response to the iruenupt Consequently, use of this method to 

capture interruixs is much faster than the normal method. 

The following limitations are placed on a fast interrupt task: 

• It must be a task object, not a task type. 

• The pragma must appear first in the specificatioo of the task object 

• All entries of the task objea must be single entries (no families) with no parameters. 

• The entries must not be called from any task. 

• The body of the task must not contain any statements outside the accept statement(s). A loop 
statement may be used to enclose the accept(s). but this is meaningless because no code outside 
the accept statements will be executed. 

• The task may make one entry call to another task for every handled interrupt, but the call must 
be single and parametetless and must be made to a normal tasks, not another fast interrupt 
task. 

• The task may only reference global variatdes: no data local to the task may be defined. 

• The task must be declared in a library {lackage. i.e.. at the outermost level of some package. 

• Explicit saving of NPX state must be performed by the user within the accept sutement if such 
state saving is required. 


V.62A Making Entry Calls to Other Tasks 

Fast interrupt tasks can make entry calls to other normal tasks as long as the entries are single (no 
indexes) and parameterless. 

If such an entry call is made and there is a possibility of tire normal task not being ready to 
accept the call, the entry call can be queued to the normal task’s entry queue. This can be forced 
by using the normal Ada conditional entry call construct shown below; 

acce{X E do 
select 
T.E; 
else 

null: 

end select; 
end E; 

Normally, this code sequence means make the call and if the task is not waitirtg to acce{)t it 
immediately, cancel the call and continue. In the context of a fast interrupt task, however, the 
semantics of this construct are modifled slightly to force the queuing of the entry call. 


205 







DACS-80x86 User's Guide 
Iroplementadon-Dependem Characteristics 


If an unconditional entry caU is made and the called task is not waiting at the corresponding 
accept statement, then the interrupt task will wait at the entry call. Alternatively, if a timed entry 
call is made and the called task does not accept the call before the delay expires, then the call 
will be dropped. The conditional entry call is the preferred method of making task entry calls 
from fast interrupt handlers because it allows the imerrupt service routine to complete straight 
through and it guarantees queueing of the entry call if the called task is not waiting. 

When using this method, make sure that the interrupt is included in the •interrupt_entry_tabte 
specified at link time. See Section 7.2.IS for more details. 


F.6JJ Implementation of Fast Interrupts 

Fast interrupt tasks art not actually implemented as true Ada tasks. Rather, they can be viewed 
as procedures that consist of code simply waiting to be executed when an interrupt occurs. They 
do not have a state, priority, or a task control block associated with them, and ate not scheduled 
to "run" by the run-dme system. 

Since a fast interrupt handler is not really a task, to code it in a loop of somekind is meaningless 
because the task will never loop; it will simply execute the body of the accept sutement whenever 
the interrupt occurs. However, a loop construct could make the source code more easily understood 
and has no side effects except for the generation of the executable code to implement to loop 
construct 


F.6JI.6 Flow of Contixil 

When an interrupt occurs, control of the CPU is transferred directly to the accept sutement of the 
task. This means that the appropriate slot in the interrupt vector uble is modified to contain the 
address of the corresponding fast interrupt accept statement. 

Associated with the code for the accept sutement is 

at the very begirming: 

code that saves registers and sets (E)BP to look like a frame where the interrupt return 
address works as renim address. 

at the very end: 

code that restores registers followed by an IRET instruction. 

Note that if the interrupt handler makes an entry call to another task, the interrupt handler is 
completed through the IRET before the rerxlezvous is actually completed. After the rendezvous 
completes, normal Ada task priority rules will be obeyed, and a task context switch may occur. 

Normally, the interrupting device must be reerubled by receiving End-Of-Interrupt messages. These 
can be sent from machine code insertion statements as demonstrated in Example 7. 


206 





DACS-80x86 User’s Guide 
Implementation-Dependent Characteristics 


F.62J Savinu NPX Sute 

If the intemipt handler will perform floating point calculations and the state of the NPX must be 
saved because other tasks also use the numeric coprocessor, calls to the appropriate save/restoie 
routines must be made in the statement list of the accept sutement. These routines are located 
in package RTS.EntryPoints and ate called RTS_Stoie_NPX_State and RTS_Restore_NPX_State. 
See example 6 for more information. 


F.6J.8 Storage Used 

This section details the storage requirements of fast interrupt handlers. 


F.6J.9 Stack Space 

A fast iruerrupt handler executes off the stack of the task executing at the time of the intermiH. 
Since a fast interrupt handler is not a task it does not have its own stack. 

Since no local data or parameters ate permitted, use of stack space is limited to procedure and 
function calls from within the interrupt handler. 


F.6J.10 Run-Time System Data 

No task control block (TCB) is created for a fast interrupt haitdler. 

If the fast interrupt handler makes a task entry call, an entry in the _a5_INTERRUPT_VECTOR 
must be made to allocate storage for the queuing mechanism. This table is a run-time system data 
structure used for queuing interrupts to normal tasks. Each entry is only 10 words for 80386/80486 
protected mode compilers and S words for ail other compiler systems. This table is created by 
the linker and is constrained by the user through the linker option -intetTupt_entry_tabie. For 
more information, see Section F.6.2.1 on linking an application with fast interrupts. 

If the state of the NPX is saved by user code (see Section F.6.2.7), it is done so in the NPX save 
area of the TCB of the task executing at the time of the interrupL This is appropriate because it 
is that task whose NPX state is being saved. 


F.6J Building an Application with Fast Interrupt Tasks 

This section describes certain steps that must be followed to build an application using one or 
more fast interrupt handlers. 


207 




DACS-80x86 User's Guide 
Iinplementation>Dependent Characteristics 


F.6J.1 Source Code 

The pragma INTERRUPT.HANDLER which indicates that the interrupt handler is the fast form 
of interrupt handling and not the normal type, must be {daced in the ta^ specification as the first 
statement 

When specifying an address clause for a fast interrupt handier, the offset should be the interrupt 
number, not the offset of the interrupt in the interrupt vector. The segment is not applicable 
(although a zero value must be specif!^) as it is not used by the compiler for interrupt addresses. 
The compiler will place the interrupt vector into the INTERRUPTVECTORTABLE segment Fbr 
real address mode programs, the interrupt vector must always be in segmem 0 at execution time. 
For protected mode programs, the user specifies the interrupt vector location at build time. 

Calls to RTS_Store.NPX_State and RTS_Restore_NPX_State must be included if the state of the 
numeric coprocessor must be saved when the fast interrupt occrus. These routines are located in 
package RTS.EntryPoints in the root library. See examine 6 for more infonnation. 


F.6J.2 Compiling the Program 
No special compilation options are required. 


F.633 Linking the Program 

Since fast interrupt tasks are not teal tasks, they do not have to be accounted for when using the 
•tasks option at link time. In fact, if there are no normal tasks in the application, the program 
can be linked without 'tasks. 

This also means that the linker options •lt_stack_size. •lt_segment_size. •mp_segment_size, and 
•t’tsk_storage_size do not apply to fast interrupt tasks, exc^t to noK that a fa^ interrupt task will 
execule off the stack of the task tunning at the time of the intetrupL 

If an entry call is made by a fast intemipt handler the interrupt number must be included in the 
•interrupt_entry_table option at link time. This optitxi builds a table in the run-time system data 
segment vo handle entry calls of interrupt handlers. The t^le is indexed by the interrupt number, 
which is bounded by the low and high interrupt numbers specified at link time. 


F.6J.4 Locating/Building the Program 

For real-address mode programs, no special actions need be perfonned at link time; the compiler 
creates the appropriate entry in the INTERRUPTVECTORTABLE segment This segment must be 
at segment 0 before the first interrupt can occur. 

For protected mode programs no special actions need be performed. The Ada Link automaticaUy 
recognizes Ada interrupt handlers and adds them to the IDT. 


208 



DACS-80X86 User’s Guide 
Implementation-Dependem Qiaractnistics 


F.6.4 Examples 

These examides illustrate how to write fast intemipt and then how to build the ai^cation 
using the fast intemipt 


F.6.4.1 Example 1 

This example shows how to code a fast intemipt handler tiui does not make any task entry raiu, 
but simply performs some intemipt handling code in the accept body. 

Ada source: 

with System; 
package P is 

<potentially other declarations> 

task FastJnterrupt.Handler is 
pragma INTERRUPT_HANDLER; 
entry E; 

for E use at (segmem => 0. offset => 10); 
end; 


<potentially other declarations> 


end P; 

package body P is 

<potentially other declarations> 

task body Fast_lntenupt_Handler is 
begin 

accept E do 

<handle interrupt> 
end E; 
end; 


<potentially other declarations> 


end P; 


with P; 

procedure Exampie.l is 
begin 

<main piogram> 
end Example.!; 


Compilation and Linking: 


209 




DACS-80X86 User's Guide 
Implememsiioo-Dependeitt Chancteristics 


$ ada Exainple_l 

$ ada-link Exaii^_l ! Note: no oUio' tasks in the sjrstem in this example. 


F.6.4J Example 2 

This example shows how to write a fast intemipt handler that services more than one intemipt 


Ada source: 

with System: 
package P is 

task Fastjntemipt Handler is 

pragma INTC»RUFT_HANDLER; 

entry El; 
entry E2: 
entry E3; 

for El use at (segment s> 0. offset => 5): 
for use at (segment => 0, offset 9); 

for E3 use at (segment sr o, offset => )!); 

end; 

end P; 

package body P is 

task body Fast.Intenupt.Handler is 
begin 

accept El do 

<service interrupt 5> 
end El; 

accept E2 do 

<service interrupt 9> 
end E2; 

accept E3 do 

<service intenupt 11> 
end E3; 
end; 

end P; 


Compilation and Linking: 


210 





OACS-8()x86 User’s Guide 
Implemetuaiion-Oependem Chancteiistics 


$ ada Exainpk_2 

$ ada-link ‘tasks • Exaiiq)le_2 # assumes plication also has normal tasks (not shown) 


F.6.4J Example 3 

This example shows how to access global data and make a procedure call from within a fast 
intemipt handler. 


Ada source: 

with System; 
package P is 

A : Integer. 

task Fast_Int erTupt _Handler is 

pragma INTERRUPT_HANDLER; 
entry E; 

for E use at (segment => 0. offset => 16#127#); 
end: 

end P; 

package body P is 
B : Integer, 

procedure P (X : in out Integer) is 
begin 

X ;= X + 1; 

end; 

task body Fast_Interrupt_Handler is 
begin 

accept E do 
A := A + B; 

P (A); 
end E; 
end; 

end P; 


Compilation and Linking: 

$ ada Example_3 
S ada_link Example_3 


211 




DACS-80X86 User’s Guide 
Implementation-Dependent Characteristics 


F.6.4.4 Example 4 

This example shows how to make a task entry call and force it to be queued if the called task 
is not waiting at the accept at the time of the call. 

Note that the application is linked with -taskssl, where tltt tasks are T and the main program. 
Since the fast interrupt handler is making an entry call to T. the techniques used guarantee that 
it will be queued, if necessary. This is accompli^ed by using the conditional call construct in 
the accept body of the fast interrupt handler and by including the interrupt in the -• 
interTupt_enti7_table at link time. 


Ada source: 

with System; 
package P is 

task Fast_Interrupt_Handler is 

pragma INTERRUPT_HANDLER; 
entry E; 

for E use at (segment => 0, offset => 8): 

end; 

task T is 
entry E; 

end; 
end P; 

package body P is 

task body Fasl_lnterrupt_Handler is 
begin 

accept E do 
select 
T.E; 
else 

null; 

end select; 
end E; 

end; 

task body T is 
begin 
loop 
select 

accept E; 
or 

delay 3.0; 
end selea; 
end loop; 

end; 
end P; 


212 







DACS-80x86 User's Guide 
Implemenution-Dependem Quncteristics 


Compilation and Linking: 

S ada Example_4 

S adaJink -tasks 2 •intemipt_entry_table 8,8 Example_4 


F.6.4 J Exanqde 5 

This example shows how to build an application for 80386/80486 protected mode programs using 
fast interrupt handlers. 


Ada source; 

with System; 
package P is 

task FastJntemipt.Handler is 
pragma INTERRUPT_HANDLER; 
entry E; 

for E use at (segment => 0. offset => 17); 
end; 

end P; 

package body P is 

task body Fast.Intenupt.Handler is 
begin 

accept E do 
null; 
end E; 
end; 

end P; 


Compilation and Linking; 

$ ada Example_5 
S ada Jink -tasks - Exampie_S 


213 












DACS-80x86 User's Guide 
Implememation-Dependent Chancteristics 


F.6.4ii Example 6 

This example shows how to save and restore the state of the numeric coprocessor from within a 
fast interrupt handler. This would be required if other tasks are using the coprocessor to perfonn 
floating point calculations and the fast interrupt handler also wUl use the coprocessor. 

Note that the state of the NPX is saved in the task control block of the task executing at the time 
of the interrupL 

Ada source: 

with System: 
package P is 

task Fast_Interrupt_Handler is 

pragma INTERRUPT.HANDLER; 
entry E; 

for E use at (segment => 0, offset => 25); 

end: 


end P: 

with RTS_EntryPoints; 
package body P is 

task body FastJnterrupt.Handler is 
begin 

accept E do 

RTS_EntryPoints.Store_NPX_Sute: 
<user code> 

RTS_EntryPoints.Rcstore_NPX_State: 
end E; 

end: 
end P: 

Compilation and Linking: 

$ ada Example_6 

S ada-link -npx -tasks • Example_6 


F.6.4.7 Example 7 

This example shows how to send an End-Of-Interrupt message as the last step in servicing the 
interrupt. 


Ada source: 


214 







DACS-80x86 User's Guide 
Implementadon-DqKiidem Chancteristics 


with System: 
package P is 

task FasL.lnieiTupt_Handler is 

pragma INTERRUPT_HANDLER; 
entry E; 

for E use at (segmem 0, offset => S): 
end: 

end P: 

with Machine.Code: use Madiine.Code: 
package body P is 

procedure Send.EOI is 
begin 

machinejnstniction' 

(registerjmmediate. m_MOV. AL, 16#66#): 
machinejnstiuction' 

(immediate_iegister. m_OUT. 16#0c0#. AL): 

end: 

pragma inline (Send.EOI): 

task body Fast_Intemipt_Handler is 
begin 

accept E do 
<user code> 

Send.EOI: 
end E: 
end; 

end P; 

Compilation and Linking: 

S ada Example_7 
S adaJink 'taslu - Example_7 


F.6^ Normal Interrupt Tasks 

"Noimal" intemipt tasks are the standard method of servicing interrupts. In this case the interrupt 
causes a conditional entry call to be made to a normal task. 


F.6.S.1 Features 

Normal interrupt tasks provide ttic following features: 

1) Local data may be defined and used by the intenupt task. 


215 





DACS-80x86 User's Guide 
Imptementation-Dependent Characteristics 


2) May be called by other tasks with no restricticHis. 

3) Can call other normal tasks with no restrictions. 

4) May be declared anywhere in the Ada program where a normal task declaration is allowed. 


Fj6JS2 Limitations 

Mapping of an interrupt onto a normal conditional entry call puts the following constraints on the 
involved entries and tasks: 

1) The afTected entries must be defined in a task objea only, not a task type. 

2) The entries must be single and parameteriess. 


F.6.S J Implementation of Normal Interrupt Tasks 

Normal interrupt tasks are standard Ada tasks. The task is given a priority and tuns as any other 
task, obeying the normal priority rules and any time-slice as configured by the user. 


F.6.S.4 Flow of Control 

When an interrupt occurs, control of the CPU is transferred to an intermpt service routine 
generated by the specification of the interrupt task. This routine preserves the registers and calls 
the run-time system, where the appropriate interrupt task and entry are determined from the 
information in the _CD_INTERRUPT_VECTOR table and a conditional entry call is made. 

If the interrupt task is waiting at the accept statement that conesponds to the interrupt, then the 
interrupt task is scheduled for execution upon return from the iraerrupt service routine and the call 
to the run-time system is completed. The interrupt service routine will execute an IRET, which 
reenables interrupts, and execution will continue with the interrupt task. 

If the interrupt task is not waiting at the accept statement that corresponds to the interrupt, and 
the interrupt task is not in the body of the accept statement that corresponds to the interru^ then 
the entry call is automatically queued to tlK task, and the call to the run-time system is 
complet^. 

If the interrupt task is not waiting at the accept statemeru that corresponds to the interrufX, and 
the interrupt task is executing in the body of the accept statement that corresponds to the interrupt, 
then the interrupt service routine will NOT complete until the interrupt task has exited the body 
of the accept statement. During this period, the interrupt will not be serviced, and execution in 
the accept body will continue with interrupts disabled. Users are cautioned that if horn within 
the body of the accept statement corTespo.:ding to an interrupt, an unconditional erury call is made, 
a delay sutement is executed, or some otiier mn-deierministic action is invoked, the result will 
be erratic and will cause non-determirustic interrupt response. 

Example 4 shows how End-Of-Interrupt messages may be sent to the interrupting device. 


216 






DACS-80x86 User’s Guide 
Impiemenuuion-Dependeiu Characteristics 


F.6JJ Saving NPX SUte 

Because normal interrupt tasks are standard tasks, the state of the NPX numeric coprocessor is 
saved automatically by the run-time system when the task executes. Therefore, no special actions 
are necessary by the user to save the stale. 


F.6,5,6 Storage Used 

This section describes the storage requirements of standard iitterrupt tasks. 

F.6S.7 Stack Space 

A normal interrupt task is allocated its own stack and executes off that stack while servicing an 
interrupt. See the appropriate sections of this User’s Guide on how to set task stack sizes. 


F.6^,8 Run-Time System Data 

A task control block is allocated for each normal interrupt task via the -tasks option at link time. 

During task elaboration, an entry is made in the tun-dme system _CD_INTERRUPT_VECrOR 
table to "define'’ the standard intemipt. This mechanism is used by the run-dme system to make 
the condidonal entry call when the interrupt occurs. This means that the user is responsible to 
include all interrupts serviced by interrupt tasks in the -interTupt_entry_table opdon at link time. 


F.6.6 Building an Application with Nomul Intemipt Tasks 

This secUon describes how to build an applicadon that uses standard Ada tasks to service 
interrupts. 


F.6.6.1 Source Code 

No special pragmas or other such ditecdves ate required to specify that a task is a normal interrupt 
task. If it contains interrupt entries, then it is a normal interrupt task by default 

When specifying an address clause for a normal interrupt handler, the offset should be die 
interrupt number, not the offset of the interrupt in the interrupt vector. The segment is not 
applicable (although some value must be specifi^) because it is not used by the compiler for 
interrupt addresses. The compiler will place the interrupt vector into the 
INTERRUPTVECTORTABLE segment Fbr real address mode programs, the interrupt vector 
must always be in segment 0 at execution dmc. This placement can be accomplished by specifying 


217 








DACS-80x86 User’s Guide 
Implemenudon-Oependeni Characteristics 


the address to locate the INTERRUFTVECTORTABLE segment with the loc86 command, or at 
run dme, by having the startup code routine of the UCC copy down the 
INTERRUFTVECTORTABLE segment to segmoit 0 and the compiler will put it there 
automatically. For protected mode programs, the user specifies the interrupt vector location at 
build time. 


F.6.6J Compiling the Program 
No special compilation options are required. 


F.6.6J Linking the Program 

The interrupt task must be included in the -tasks option. The link options -lt_stack_size. — 
It_segment_size. •mp_segment_size. and -task_storage_size apply to normal interrupt tasks and 
must be set to appropriate values for your appOicatioa 

Every interrupt task must be accounted for in the 'interrupt_entry_table option. This option 
causes a table to be built in the run-time system dau segment to han^e interrupt entries. In the 
case of standard interrupt tasks, this table is used to map the interrupt onto a nonnal conditional 
entry call to another task. 


F.6.7 Examples 

These examples illustrate how to write normal interrupt tasks artd then how to build the tqrplication 
using them. 


F.6.7.1 Example 1 

This example shows how to code a simple normal interrupt handler. 

Ada source: 

with System; 
package P is 

task Normal.lnterrupt.Handler is 
entry E; 

for E use at (segment => 0. offset s> lO); 

end; 
end P. 

package body P is 

task body Noimal_Inienupt_HandIer is 


218 







DACS-80x86 User’s Guide 
Imi^emenution-Dependent Cbaracterisdcs 


begin 

accept E do 

<handle intemipo 
end E; 
end: 

end P. 

with P, 

procedure Example.l is 
bepn 

<main piogram> 
end Exampie.l; 


Compilation and Linking: 

$ ada Example_l 

$ ada-link ‘tasks 2 -inteiTupt_entry_table 10,10 Example_l 


F.6.7 J Example 2 

This example shows how to write a nonnal intemipt handier that services more than one intemipt 
and has o^er standard task entries. 

Ada source: 

with System: 
package P is 

task Noimal.Task is 

entry El; 

entry E2: - staixiaid entry 

entry E3; 

for El use at (segment => 0, offset => 7); 
for E3 use at (segment »> 0, offset => 9); 

end: 

end P, 

package body P is 

task body Noimal.Task is 
begin 
loop 
select 

accept El do 

<service intemipt 7> 


219 








DACS-80x86 User's Guide 
Imptemeimtion-Dependem Qiancterisdcs 


end El; 
or 

accept E2 do 

<standaid rendezvous> 
end E2: 
or 

accept E3 do 
<service intemipt 9> 
end E3; 
end select; 
end loop; 

end Normal.Task; 
end P; 

Compilation and Linking: 

S ada Exaniple_2 

$ ada-link 'tasks •interrupt_entry_table 7,9 Exanq)le_2 


F.6.7J Example 3 

This example shows how to build an application for 80386 protected mode programs using nonnal 
interrupt handlers. 


Ada source: 

with System; 
package P is 

task Notmal.Interrupt.Handler is 
entry E; 

for E use at (segment => 0. offset -> 20); 
end; 

end P; 

package body P is 

task body Notmal_lntetTupt_Handler is 
begin 

accept E do 
n^; 
end E; 
end; 

end P; 


220 


DACS<80x86 User’s Guide 
Imptementadon-Dependem Cbaraoeiistics 


Conqiilation and Linkinf: 

$ ada Eiainiple_3 

$ ada-link -tasks •intemipt_cnti 7 _Tablc 20,20 Exan^)lc_3 


F.6.7.4 Example 4 

This example shows how an End-Of-Imenupt message may be sem to the intemipting device. 

Ada source: 

with System; 
package P is 

task Nonnal_Interrupt_Han<ller is 
entry E; 

for E use at (segment «> 0, offset >> 7); 

end; 


end P; 

with Machine_Code; use Machine_Code; 
package body P is 

procedure Send_EOI is 
begin 

machine_instruction' 

(register_iimnediate, m_MOV, AL, 16#66#); 
machine_inst ruction' 

(immediate^register, m_OUT, 16#0e0#, AL); 

end; 

pragma inline (Send_EOZ); 

task body Normal_Interrupt_Handler is 
begin 

accept E do 
<uaer code> 

Send_EOI; 
end E; 

end; 


end P; 


Compilation and Linking: 

$ ada Example_4 

S ada-link -tasks -intemipt_entry_tabie 7,7 Example_4 


221 






OACS-gOxg6 User’s Guide 
Implementalion-Dependem Characteristics 


F.6J Interrupt Queuing 

DDC-I provides a useful feature that allows task entry calls made by interrupt handlers (fast and 
normal variant) to be queued if the called task is not waiting to accept the call, enabling the 
interrupt handler to complete to the IRET. What may not be clear is that the same interrupt may 
be queued only once at any given time in OIXT-I’s implementation. We have made this choice 
for two reasons: 

a) Queuing does not come for free, and queuing an interrupt more than once is considerably 
more expensive than queuing just one. DDC-I feels that most customers prefer their 
interrupt harulleis to be as fast as possible and that we have chosen an implementation that 
bahmces performance with hmctionality. 

b) In most applications, if the servicing of an interrupt is not performed in a relatively short 
period of time, there is an unacceptable and potentially dangerous situation, (^euing the 
same interrupt more than once represents this situation. 

Note that this note refers to queuing of the same interrupt more than once at the same dme. 
Different interrupts may be queued at the same time as well as the same interrupt may be queued 
in a sequential manner as long as there is never a situation where the queuing overlaps in time. 

If it is acceptable for your application to queue the same interrupt more than once, it is a 
relatively simple procedure to implement the mechanism yourself. Simply implement a high 
priority agent task that is called from the interrupt handler. The agent task accepts calls from the 
interrupt task and makes the call on behalf of the interrupt handler to the originally called task. 
By careful design, the agent task can be made to accept all calls from the interrupt task when they 
are made, but at the very least, must guarantee that at most one will be queued at a time. 


F.6.9 Recurrence of Interrupts 

DDC-I recommends the following techniques to ensure that an interrupt is completely handled 
before the same interrupt recurs. There ate two cases to consider. i.e. the case of fast interrupt 
handlers and the case of normal interrupt handlers. 


F.6.9.1 Fast Interrupt Handler 

If the fast interrupt handler makes an entry cal' to a normal task, then place the code that 
reenables the interrupt at the end of the accept body of the called task. When this is done, the 
interrupt will not be reenabled before the rendezvous is actually completed between the fast 
interrupt handler and the called task even if the call was queued. Note that the interrupt task 
executes all the way through the IRET before the rendezvous is completed if the entry call was 
queued. 

NormaUy, end-of-interrupt code using Low_Level_IO will be present in the accept body of the fast 
interrupt handler. This impUes that the cnd-of-intemipt code will be executed before the 
rendezvous is completed, possibly allowing the interrupt to come in again before the application 
is ready to handle it. 

If the fast interrupt handler does not make an entry call to another task, then placing the 


222 



DACS-80x86 User’s Guide 
Imideinefttation-Dependeiu Chancteristics 


end-of-imemipt code in the accept body of the fast interrupt task wiU guarantee that the interrupt 
is completely serviced before atxtther interrupt happens. 


F.65.2 Normal Interrupt Handler 

Place the code that reenables the interrupt at the end of the accept body of the normal interrupt 
task. When this is done, the interrupt will not be reenabled before the rendezvous is actually 
ctnnpleted between the normal interrupt handler and the called task even if the call was queued. 
Even though the interrupt "amipletes'" in the sense that the IRET is executed, the interrupt is not 
yet reenabled because the rendezvous with the normal task’s imerrupt entry has not been made. 

If these techniques ate used for either variam of interrupt handlers, caution must be taken that 
other tasks do not call the task entry which reenables interrupts if this can cause adverse side 
effects. 


F.7 Unchecked Conversion 

Unchecked conversion is only allowed between objects of the same "size". However, if scalar type 
has different sizes (packed and unpacked), unchecked conversion between such a type and another 
type is accepted if either the packed or the unpacked size fits the other type. 


F.8 Input/Output Packages 

In many embedded systems, there is no need for a traditional I/O system, but in order to suppon 
testing and validation, DDC-I has developed a small terminal oriented I/O system. This I/O system 
consists essentially of TEXT.IO adtqrted with respect to baruUing only a terminal and not file I/O 
(file I/O will cause a USE error to be raised) and a low level package called 
TERMINAL.DRIVER. A BASICJO package has been provided for convenience purposes, 
forming an interface between TEXT.IO and TERMINAL.DRTVER as illustrated in the following 
figure. 




TEXT 10 



BASIC lO 

TERMINAL DRIVER 
<a/N Intarfac*) 


The TERMINAL.DRIVER package is the only package that is target dependent, i.e., it is the only 


223 






DACS-80xg6 User’3 Guide 
Implementation-Dependeiu Characteristics 


package that need be changed when changing communications controllers. The actual body of the 
TERMINAL_DRIVER is written in assembly language and is part of the UCC modules DlIPUT 
and DIIGET. The user can also call the terminal driver routines directly, i.e. from an assembly 
language routine. TEXT.IO and BASICJO ate written (rompdetely in Ada and need not be 
changed. 

BASICJO provides a mapping between TEXTJO control characters and ASCII as follows: 
TEXTJO ASai Character 


LINE TERMINATOR 
PAGE TERMINATOR 
FILE.TERMINATOR 
NEW LINE 


ASCII.CR 

ASai.FF 

ASai.SUB (CTRUZ) 
ASaiLF 


The services provided by the terminal driver are: 

1) Reading a character from the communications port. Get.Character. 

2) Writing a character to the communications port. Put.Charaaer. 


F.8.1 Package TEXTJO 

The specification of package TEXTJO; 

pcagma p«9«: 
with BASIC_10; 

with IO_EXCEPTIONS; 
pack«g« TEXT_IO Is 

typa FIIX_TrFE Is llsUtad prlvata; 

typa riU:_MOOE Is (Ill_riLE, OOT_riIX); 

cypa COUNT Is ranga 0 .. INTEGER'LAST; 

subtypa POSITIVE_COONT Is COUNT ranga 1 .. COUNT'LAST; 

UNBOUNDED: constant COUNT:- 0; — llna and paga langth 

— max. slza of an Intagar output flald 2#....f 
subtypa FIELD Is INTEGER canga 0 .. 35; 

subtypa NUMBER_BASE Is INTEGER ranga 2 .. 16; 

typa TYPE_3ET Is (LOtlER_CASE, UPPER_CASE) ; 

pragma PAGE; 

— FIla Managamant 


procadura CREATE 

(FILE 

: in out 

FILE TYPE; 


MODE 

: In 

FILEJMODE :-OOT FILE 


NAME 

: in 

STRING 


FORM 

) ; 

: In 

STRING :-•* 

procadura OPEN 

(FILE 

: in out 

FILE TYPE; 


MODE 

: in 

FILE MODE; 


NAME 

: in 

STRING; 


224 




DACS-80x86 User's Hi. 
I]nplementatioii>Dq)endent Characteiistics 


FORM : In SnUIK 

); 


proeadur* CMSE (FILE 
procadura DELETE (FILE 
ptocadura RESET (FILE 
MODE 

procadura RESET (FILE 

function MODE (FILE 
function NAME (FILE 
function FORM (FILE 

function IS_OFEM(FILE 

pca9iiia PAOE; 

— control of dafault 


: In out FILE TYPE); 

: In out FILE~TYPE); 

: In out FILE~TTPE; 

: In FILE MODE); 

: In out FILE_TTPE); 

: In FILE TYPE! catum FILE MODE; 
: In FILE~TYPE) catum STRIM6; 

: In FILE'tYPE) catum STRING; 

: In FILE TYPE catum BOOLEAN; 


.liput and output fllaa 


pcocaduca SET INPOT (FILE ; In FILE TYPE); 
ptocadura SET~OOTPDT (FILE : In FILE~TYPE); 


function STANOARO_INPOT catum FILE_TYPe; 
functlon STANDARD~OOTPOT ratum FILE TYPE; 


function CTJHRENT_INPOT ratum FILE_TYPE; 
function CURRENT OUTPOT catum FILE TYPE' 


pragma PAGE; 

— spaclflcatlon of llna and paga langtha 

pcocaduca SET_LINE LENGTH (FILE : In FILE TYPE; 

~ TO : In COONT) ; 

procadura SET_LINE_LENCTB (TO : In COONT); 

pcocaduca SET PAGE LENGTH (FILE ; In FILE TYPE; 

” ~ TO : In COONT); 

pcocaduca SET_PAGE_L£MGTH (TO ; In COONT); 

function LINE_LENGTH (FILE : In FILE.TYPE) 

~ catum COONT; ~ 


function LINE_LENGTH 
function PAGE_LQIGTB 
function PAGE LENGTH 


catum COONT; 

(FILE : In FILE_TYPE) 
catum COONT; *’ 
catum COONT; 


pragma PAGE; 

— Column, Lina, and Paga Control 

pcocaduca NEW LINE (FILE ; In FILE_TYPE; 

“ SPACING : In POSITIVE_COONT 1); 

procadura NEW_LINE (SPACING : In POSITIVE_COONT 1); 

pcocaduca SKIP_LINE (FILE ; In FILE TYPE; 

SPACING : In POSITIVE COONT 1); 
pcocaduca SKIP_LINE (SPACING ; In POSITIVEJCOOHT 1) ; 

function END_OF_LINE (FILE : In FIL£_TYPE) catum BOOLEAN; 
function END~OF_LINE catum BOOLEAN; 

pcocaduca NEW_PAaE (FILE : In FILE_TYPE); 
pcocaduca NEN_PAGE; 

procadura 3KIP_PAGE (FILE : In FILE_TYPE); 
pcocaduca SXIP_PAGE; 

functlon EMO_OF_PAGE (FILE ; In FILE_TYPE) catum BOOLEAN; 
function END~OF~PAGE ~ ratum BOOLEAN; 

function END_Or_FILE (FILE : In FILE_TYPE) catum BOOLEAN; 
function END_OF FILE ~ catum BOOLEAN; 


225 






DACS<80x86 User’s Guide 
Implemenudon-Dependettf Quncteristics 


preeadura 

SET_C01. 

(FILE : In FILE TYPE; 

TO : In POSITIVE COOMT) 

proeaduca 

SBt_COL 

(TO : In POSlTIVE_CObNI); 

pcoeadura 

SET_LIiaE 

(FILE : In FILE TYPE; 

TO : In POSITIVE OOOMT); 

proeadura 

SET_LIHB 

(TO : In POSITIVE^COOMT) ; 

function 

COL 

(FILE : In FILE TYPE) 
ratum POSITIVE~COOMT; 

function 

COL 

ratum POSITIVE~OOaMT; 

function 

LIME 

(FILE : In FILE TYPE) 
ratum POSITIVE~OOOMT; 

function 

LIME 

ratum POSITZVE~COaMT; 

function 

PAGE 

(FILE : In FILE TYPE) 
ratum POSITXVE~COOMT; 

function 

pragma PAGE; 

PAGE 

ratum POSITIVE~COOMT; 


— Cliaractac Input-Output 




proeadura 

GET 

(FILE 

: In FILE TYPE; ITEM : 

out 

CHARACTER) 

proeadura 

GET 

( 


ITEM : 

out 

CHARACTER) 

proeadura 

POT 

(FILE 

: In FILE TYPE; ITEM : 

In 

CHARACTER) 

pcoeadura 

POT 

( 


ITEM : 

In 

CHARACTER) 

" String 

Input-Output 




pcoeadura 

(XT 

(FILE 

: In FILE TYPE; ITEM ; 

out 

CHARACTER)^ 

pcoeadura 

GET 

( 


ITEM : 

out 

CHARACTER). 

proeadura 

POT 

(FILE 

: In FILE TYPE; ITB1 : 

In 

CHARACTER). 

proeadura 

POT 

( 


ITEM : 

In 

CHARACTER). 

pcoeadura 

GET LIME 

(FILE : 

In FILE TYPE; 






ITEM : 

; out STfSMG; 






LAST ; 

: out MATORAL); 



pcoeadura 

GET LIME 

(ITEM : 

: out STRIMG; 






LAST : 

: out MATORAL); 



proeadura 

POT LIME 

(FILE 

In FILE TYPE; 






ITm 

In STRInG); 



proeadura 

POT. 

.LIME 

(ITI» 

In STRIMG); 




pragnia PASS; 

— Ganarie Packa^a for Input-Output of Inta^ar Typas 
ganarlc 

typa NOM la ranga o; 
pacfcaga INTEGER_IO la 


DEFAOLT WIDTH 

: FIELD 

:> MOM'WIDTB; 

OEFAOLT_BASE 

: NOHBER. 

1 

O 

pcoeadura GET 

(FILE 

in FILE_TYPE; 


ITEM 

out momT 


WIDTH 

In FIELD 0); 

pcoeadura GET 

(ITEM 

out MOM; 


WIDTH 

In FIELD :• 0); 

proeaduca POT 

(FILE 

In FILE TYPE; 


ITEM 

In MOmT 


WIDTH 

In FIELD MFAOLT WXOTB; 


BASE 

In MOMBER BASE :« DEFAOLT_BASE) 

proeadura POT 

(ITEM 

In MOM; ~ ~ 


WIDTH 

In FIELD DEFAOLT WIDTH; 


BASE 

In N0M8ER_BASE ;• D&AOLT_BASE) 

proeaduca (XT 

(FROM 

: In STRIMG; 


ITEM 

: out MOM; 


226 









DACS<80x86 User’s Guide 
Implemenution-[>ependem Chancteiistics 


LAST : out POSrrZVE); 


pr=s«dur« SOT 


(TO 

ITEM 

BASE 


out snotn; 

In MOM; 

in NOMBER BASE :• DETAOLT BASE); 


•nd IMTECSR 10; 


pragM PASS; 

— a«n«rle PaeJcag** foe Input-Output of Roal Typoa 
gonoclc 

typo MOM la digita o; 
pockago rL0AT_I0 la 


DEFAULT FORE : 

FIELD 

• 2; 

default"aft : 

FIELD 

> MOM'DIGITS - I; 

DEFAULT~EXP 

FIELD 

- 3; 

procaduro GET 

(FILE 

: in FILE_TTPE; 


ITEM 

: out MDM; 


WIDTH 

: In FIELD :• 0); 

procoduro GET 

(ITEM 

: out MOM; 


WIDTH 

: in FIELD 0); 

pcocodueo POT 

(FILE 

in FILE TYPE; 


ITEM 

In M0M;“ 


FORE 

in FIELD :• OEFAOLT FORE; 


AFT 

in FIELD OEFAOLT AFT; 


EXP 

in FIELD ;> DEFAOLT"EXP); 

procoduro POT 

(ITEM 

In MOM; 


FORE 

in FIELD :• DEFAULT FORE; 


AFT 

in FIELD :> DEFAULT"AFT; 


EXP 

in FIELD :> OEFAOLT~EXP); 

procoduro GET 

(FROM 

: in STRIMG; 


ITEM 

: out MOM; 


LAST 

: out POSITIVE); 

procoduro POT 

(TO 

•. out STRIMG; 


ITEM 

in MOM; 


AFT 

in FIELD :• DEFAULT AFT; 


EXP 

in FIELD :• DEFA0LT"EXP); 


and ri.0AT_I0; 

pragna PAGE; 
gonaelc 

typo MOM la dalta o; 


paelcago FiXEO_IO 

ia 


default FORE 

FIELD 

- MOM'FORE; 

defadlt"aft 

FIELD : 

MOM'AFT; 

DEFAULT^EXP 

FIELD : 

0; 

procoduro GET 

(FILE 

: in FILE_TYPE; 


ITEM 

: out MOM; 


WIDTH 

: in FIELD 0); 

procoduro GET 

(ITEM 

: out MOM; 


WIDTH 

: in FIELD 0); 

procoduro PUT 

(FILE : 

: in FILE TYPE; 


ITEM 

: in MOM;" 


FORE 

: in FIELD :> DEFAULT FORE; 


AFT 

; in FIELD DEFAOLT"AFT; 


EXP 

; in FIELD DEFAULT~EXP); 

procoduro POT 

(ITEM 

: in MUM; 


FORE 

: in FIELD :> DEFAULT FORE; 


AFT 

: in FIELD :> DEFAULT"AFT; 


227 
















DACS-80x86 User’s Guide 
Imptemeiittcion-DependefU Characteristics 


t» : in TIttD OSrMn.T_CXP> ; 

proe«dur* OR (rnOM : tn STUM; 

mu ; out MOM; 

LAST ; out POSITIVE); 

proeoUuto POT (TO : out STRIM; 

ITEM : la MOM; 

AFT : in flEU :• OCTAOLT ATT; 
EXP : In riEU :• DETAOLtIeXP) ; 

•ad FIXED 10; 


prmgmm PASE; 

— Ooaarie Packav* for Input-Output of Enuaoratloa Typoa 
9 «n«cle 

typ« EITM Is «»; 
packaya EinMElUlTIOII_IO la 

OEFAOLT WXOTB : FIELD 0; 

DETAOLT'sETTIM : T»E_SET !- DPPER_CASE; 

procadura (XT (FILE : la rXLE_TyPB; ITEM : out EKQM); 
proeadura (XT ( ~ ITEM : out EHDM); 

procadura POT (FILE ; FILE TYPE; 

ITEM : in EMM; 

NIDTE : la FIELD OEFAOLT MIOTB; 

SET : in TTPE_SET OEFAaLT~SETTIM) ; 

proeadura POT (ITEM : la EMOmT 

WIDTH : la FIELD DEFAULT WIDTH; 

SET : la TTPE_SET OEFAOLT~SETTIWG) ; 

proeadura SET (FROM : la STRIM; 

ITEM : out EMOM; 

LAST ; out POSITIVE); 

proeadura POT (TO ; out STRIM; 

ITEM : la EMOM; 

SET : la TTPE_SET DEFAOLT^SETTIIK!) ; 

and ENOMERATIOM_IO; 
pravma PA(X; 

" Exeaptlons 

STATUS ERROR : axcaptlon ranaaias 10 EXCEPTIOMS.STATUS ERMOR; 
MODE ERROR : axcaptlon ranaaws IO~EXCEPTZaWS.NODE ERROR; 
NAME~ERROR : axcaptlon ranaaws IO~EXCEPTIOIIS.MAME~ERROR; 
OSE ERROR : axcaptlon ranaaws IO'eXCEPTZOMS . OSE OWOR; 
DEVICE ERROR : axcaptlon ranaaws IO~EXCEPTIONS.DEVICE ERROR; 
EMD ERROR : axcaptlon lanows IO~EXCEPTZQHS. EMD ERROR; 
DATA ERROR : OXC^tlon ranaaws Io'ERCEPTIOMS-OATA ERROR; 
LAYOOT_ERROR : axcaptlon ranaaws lO^EXCEPTIOMS. LAYOOTJOUtOR; 

pragaa pava; 
prlvata 

typa FILEJTYPE Is 
racord ~ 

FT ; IMTE(XR :• -1; 
and racord; 

and TEXT 10; 


228 







DACS-8Qi(86 User’s Guide 
hnplemenaiion-Dependent Qiarscteiistics 


FA2 Package lO^CEPTIONS 

The specification of the package lO.EXCEPTIONS: 


p«ex««« IO_IXClPTXaKS Is 


STMOS EMtOR : 
MOOS EXMOR 
MMaTCRROR 
nsE moR 
DEVICE ERRCR : 
END ERROR 
DAU ERROR 
LAYOOI ERROR ; 


•xeaptlon; 
•xeaptlon: 
•xesptlon; 
•xesptlon; 
•jieaptlea; 
•xeaptlon; 
•xeaptlon ; 
•xe•ptlon; 


•nd 10 EXCEPTIOHS; 


Package BASIC JO 
The Reification of package BASICJO: 


with ZO_EXCEPTXOMS; 
paekapa BASXC_XO Is 

typa count Is raaqa 0 .. Intaqar'last; 

subtypa posltlva.count Is count range 1 .. count'last; 


function gat_lntagar ratuen string; 

— Skips any leading blanks, line tarxlnators ex paga 

— tamlnators. than reads a plus or a sinus sign If 

— present, than reads according to tha syntax of an 
" integer literal, which auy be based. Stores In Itea 
" a string containing an optional sign and an Integer 

— literal. 

•• The exception 0aZA_ERR0R Is raised If the sequence 
" of characters does not correspond to the syntax 
" described above. 

-- The exception Q)D_ERROR Is raised If the file terminator 

— Is read. This means that the starting sequence of an 

— Integer has not been net. 

— Note that the character tenUnatlng the operation stoat 
" be available for the next get operation. 

function get_real return string; 

— Corresponds to get_lnteger except that It reads according 

— to the syntax of a~real literal, which awy be based. 


function get_enuBeratlon return string: 

— Corresponds to get_lntegec except that It reads according 
" to the syntax of an Identifier, where upper and lower 

— ease letters are equivalent to a character literal 
" including the apostrophes. 


229 







DACS>8(M6 User’s Guide 
Iinplemenaaioii-Dependent ChMiaeiisdq 


funetlen (Iwigth : In lnt«««r) ntucn attlng; 

—' Raada • atrln^ froa cha currant llna and ateraa it la 
~ ttaa. If tha raaalnlng nuaibar of eharactara on tha 
—• currant llna la laaa than Xanyth than only thaaa 
" eharactara ara ratumad. Tha llna tazalnator la not 

— aklppad. 

procadura put_ltaai (Itaa : In atrlnp); 

" If tha lanpth of tha atrlnq la graatar than tha currant 
■axiaBim llna (llnalangth), tha axeaptlon UTOOT CMbOK 
~ la ralaad. 

— If tha atring doaa not fit on tha currant llna a llna 
" tanalnator la output, than tha Itaa la output. 

-- Lina and paga langtha * MW 14.3.3. 

procadura aat_llna_longth (to : In count); 

procadura aat_paga_langth (to : In count); 

function llna_langth ratum count; 
function paga_langth return count; 

Oparatlona on eoluana, llnaa and pagaa - ASM 14.3.4. 

procadura na«_llna; 

procadura aklp^llna; 

function and_of_llna ratum boolean; 

procedure navjpaga; 

procadura aklp_paga; 

functlon and_ef_page ratum boolean; 

function and_of_flla return boolean; 

procadura aat_col (to : In poaltlvo_eount); 

procadura aat_llna (to : In poaltlva_eount); 

function col return poaltlva_count; 

function llna return poaltlva_count; 

function paga ratum poaltlva_eount; 

-- Oiaractar and atrlng procaduraa. 

— Corraaponda to tha procaduraa defined In Am 14.3.6. 

procadura gat_c)iaraetar (Itoai : out character); 

procadura gat_atclng (itaai : out atrlng); 

procadura gat_llna (itaai : out atrlng; 

~ laat : out natural); 

procadura put_eharactar (Itaai : In charaetar); 

procadura put_attlng (Ito* : In atrlng); 


230 




DACS'80x86 User’s Guide 
Imp k nuen m ioo-Dependeot Characteristics 


pcocadut* (lt«a : in •ttia«); 


•scnptlens: 


OSE mOK 
ra^aCE XM«m 
em saim 

OAXA ERMR 
UTooT aaoR 


•xeaptioa rnnnana 
•xeapttoa rnnaMa 
•xcnptlon tnnaMM 
•xeaptlon foi—■ 
•xeaptloa rauMna 


10 sxamain.OSE bemk; 

XO'SXCEPTIOMS.OEnCE EllMIt; 
ZOTSXCErnOMS.EaD ESME; 
lo'sxcErrzaiis.oan bsme,- 
ZO'EXapTIOMS.UToST EKMit; 


and BASIC lO; 


FJi.4 Packase TERMINAL.DRIVER 

The specification of package TERMfNAL.DRTVER: 


paeknoa TEMOMAL.DRZVEE la 

ptoeadura put_chaxaetac <eh : In ehacaetar): 
proeadura 9ac_eharaetax (eh : out eharaetat); 
prlvata 

pragma Incarfaca (ASMSC, putjehaeaetac); 

pragma intarraea_apalllng<put_eharaecat.*OiISOT?pttt_ebacaetar*): 
pragau Incarfaea (ASMSC, gae_eharaeear); 

pragma lntar<aea_apaiilng(gat_charaeear.*01ISBT?gat_eharaeear*); 
and TERMIMAL ORIVER; 


F,8J Packages SEQUENTIAL-IO and DIRECT-IO 

The specifications of SEQUENTTAL.IO and DIRECT.IO are specified in the ARM: 

Since files are not supponed the subprograms in these units leaise USE_ERROR 
STATUS_ERROR. 


231 





DACS*80)(g6 User’s Guide 
llI^)lemelKslion-Depenkm Chartaeristics 


FA6 Package L0W_LEVEL-10 

The specificati<m of LOW.LEVELJO (16 bhs) is: 


with Syataa; 


paelcag* LON_LSVSL_IO la 

aubtyp* port_addr«aa la Syataa.Qnal«a«dMacd; 


typa ll_le_S la nan latagar canya -128..127; 

typa 11~1 oZK ■*** Inta^ar; 

proeadura aand_eonttol(davlea : la port_addtaaa; 

~ data : la SyatM.Byta); 

" unalgnad 8 bit aatlty 

proeadura aaad_eeatrel(davlea : la port_addraaa; 

~ data : la SyatM.OaalgaadMord) ; 

— uaalfrnad IS bit aatlty 

proeadura aaod_eeatrol(davlea ; la port_addraaa; 

” data : la ll_lo_8); 

— algnad 8 bit aatlty 


proeadura iaad_eoatrol(davlea : la port_addrass; 

~ data : la ll_lo_lS); 

— algaad IS bit aatlty ~ 

proeadura raealva_coatrol(davlea ; la port_addraaa; 

~ data : out Syataa.Byta); 

— uaslgaad 8 bit aatlty 


proeadura raealva_eoatrol(davlea 
~ data 

— uaalfaad IS bit aatlty 


la port_addraas; 

out syataa.Qasl^nadNord); 


proeadura racalva_eoatrel(davlea 
~ data 

— algaad 8 bit aatlty 


la port_addrasa; 
out 11 _To_8); 


proeadura raealva_eoatrol(davlea : la pert_addraas; 

~ data : out ll_lo_lS); 

— si^aad IS bit aatlty ~ 


prlvata 

pragaw lnllaa(saad_coatrol, raealva_eontrol); 
aad LON LEVEL lO: 


Zha spaclflcatloa of L0N_LEVEL_10 (32 bits) la: 

with SYSTEM; 

paelcago LON_LEVEL_IO la 

subtypa port_addrosa la Syataa.OaalgnadNord; 

typa ll_lo_8 la aaw short_lnta 9 ar raaga -128..127; 

typa ll~lo~lS la aaw ahortZlntagar; 

typa ll~lo~32 la aaw latagar; 

proeadura aaad_eoatrol(davlea : la port_addrass; 

~ data : la SystM.Byta); 

— uaslgaad 8 bit aatlty 

proeadura saad_coatrol(davlea : la port_addrass; 

~ data : la SystM.ObalgnadNord); 




DACS-80x86 User's <hii<le 
Implqncntation-Dependent Characteristics 


— unatgnad IS bit MClty 


pcooadut* Mnd^eentreX (daylc* 
~ d«ta 

— UMlfiiad 32 bit Mtlty 

proecdura sand^eentrol(davle* 
~ data 

— slfnad S bit entity 

ptocadura saad_cantrol(davlca 
~ data 

—' slgaad IS bit entity 

procadura *and_eontEol(davlca 
~ data 

~ signed 32 bit entity 


In poct_addrass; 
la SyatM.OnslgnadSNord); 


In pert addtaaa. 
In 11 lo •); 


In pert addraaa; 
la 11 lo IS); 


la pert addreaa; 
la 11 le 32); 


proeadure raealve_eoncrel(device 
~ data 


" unalgnad 8 bit entity 


: In port_addraaa; 

: out Syataa.Byta); 


procadura racalva_contrel(davlca : In pert_addraas: 

~ data ; out Syatoai.OnalgnedMord); 

— unsigned IS bit entity 

procedure reeolve_concrel(device : In portjsddreas; 

~ data : out Systan.OnalgnedDWord) ; 

" unsigned 32 bit entity 

procedure racalva_control(device : In pert_addrass; 

data i out llJIo_8); 

" signed 8 bit entity 

proeadure racelva_eontrel(device : In port_addroas; 

~ data ! out 1 iJlo__1S); 

*• signed IS bit entity ** 

procedure reeelve_eontrel(device ; In port_addreaa; 

~ data ! out ll_lo_32); 

" signed 32 bit entity ~ 


private 

pragsw Inline(aand_eentrel, racalve_eontrol); 
and LON LEVEL lO; 


F.9 Machine Code Insertions 

The reader should be familiar with the code generatitm strategy and the 80x86 instruction set to 
fully benefit from this section. 

As described in chapter 13.8 of the ARM [DoD 83] it is possible to write procedures containing 
only code statemems using the piedefmed pac kage MACHINE.CODE. The package 
MACHINE.CODE defines the type MACHINE_INSTRUCnON which, used as a record aa^gate, 
defines a machine code insertion. The following sectitms list the type MACHINE.INSTRUCnON 
and types on which it depends, give the restrictions, and show an example of how to use the 
package MACHINE.CODE. 


233 


DACS>80x86 User’s Guide 
Imidemenuiion-Dependeiu Characteristics 


F.9.1 Predefined Types Ibr Machine Code Insertions 

The following types ate defined for use when making machine code inseitions (their type 
declarations are given on the foUowing pages): 

type opcode.type 
type operand.r^ 
type legister.t:^ 
type segmem_iegister 
type machinejnstniction 

The type REGISTER_TYPE defines registers. The registers STi describe registers on the floating 
stack. (ST is the top of the floating stack). 

The type MACHINE.INSTRUCTION is a discriminant record type with which every kind of 
instruction can be described. Symbolic names may be used in the forai 

name’ADDRESS 


Restrictions as to symbolic names can be found in section F.9.2. 

It should be mentioned that addresses are specified as 80386/80486 addresses. In case of other 
targets, the scale factor should be set to "scale.!". 


typ« opcod*_typ« is ( 

" sdtC Instructions: 


a AAA, 

b_AAD, 

a_AAM, 

a_AAS, 

a.ADC, b_ADD, a_AtlD, 

a_CALL, 

m au.ui. 






“a CBR, 

a_CLC, 

a CLO, 

a CLI, 

a CMC, a CMP, a CMPS, 

a CMD, aOK 

a~DA3, 

B~oec, 

a-OIV, 

a”HLX, 

a“lDIV, a~I»Bn., B~1M, 

a~ IRC, iTlC 

a'lRTO, 

a“lRET, 

a~JA, 

a~JAE, 

a~JB, a~JB£, a~JC, 

a~JCXZ, sToz, 

a JG, 

a~J<aE, 

b~JL, 

a~JlX, 

a~JRA, a^SHAE, a~JRB, 

a~JllBE, B^ 

a”jNE, 

a'jtta. 

a'jNGE, 

a~JMl„ 

a~JMO, B~JIIP, 

a'jMS, iTjk 

a^io. 

B~JP, 

a"jpe. 

a~JPO, 

a~JS, a~JZ, a~JMP, 

B~ LAEF, Aft 

a~t,ES, 

a'uA, 

a~LOCX, 

a^l-oos. 

a~LOOP, a“lOOPE, “ 


n_tobPMB, 

a LOOPHZ, 






m_LOOPZ, a.MOV, a^HOVS, a_MEG, mjloe, a_NOT, a_OR, mOK 

mJPOP, a“popr, a“pOSH. a'posHT, a~RCL, a^RCR, “ a_ROl, a^ROR, ” 


B_REP, 

a~II£PE, a~REPNE, 

b'ret. 

a~RETP, b~RETN, a RETRP, 


a^SAL, 

a^SAR, a~SBL, 

B~ SBR, 

a~SBB, a~SCAS, B_STC, ~ b_3TD, 

aftft 

b_STOS, 

b_SOB, b_TEST, 

a'RAIT, 

a~XC8C, b~XLAT, a^XOR, 



" 8087/80187/80287 rlosting Point Processor instructions: 


a FABS, 

a FADD, 

a FADDO, 

a FAOOP, a FBLO, a FBSTP, 

a_FCBS, 

a'rMCIXX, 

a“FCOM, 

a“FCOW, 

a~FCOMP, a~FCOMPD, m~ FCOMPP, 

a_FDECSTP, 

a FDIV, 

b“foivo. 

a“FBIVP, 

a~FOZVR, a'pDZVRD, b'fDIVRP, 

a FFREE, 

a"FIADD, 

b'fiacoo. 

a"FICOM, 

a FICOK), a FICOMP, a FICOMPD, a FIDIV, 

o~FIDIVD, 

a~FIDIVR, 

a~FZDIVRO, 

a FZLD, a FILOO,a FILOI., 

a FZHUL, 

a”FIMOLB, 

b~FINCSTP, 

a~FHINIT, 

b~F 1ST, a“FISTD,B"FISIP, 

a~FZSIPD, 

a~riSTPL, 

a FZSOB, 

b~FISOBD, 

b'FZSOBR, a~FZS0BRD7 B FLD, 

B~FL0D, 

a'FLDCR, 

a“FLDEHV, 

a~FU>LQ2, 

a FLOUI2, a FLOLZE, a FLOUT, a FLOPZ, 

a~FLOZ, 

a~FI.01, 

tTmai, 

a FMOLO, a FMOLP, a FMOP, 

a FPATAM, 

a~FPRZM, 

b~FPTAN, 

a~FRRDIMT, 

a~FRST(»,~ a FSAVE,b~FSCALE, 

a~FSETPM, 

a~FSORT, 

b“fst. 

a~FSTO, 

a~FSTCN, a FSnMV, b"fSTP, 

a_FSTPD, 

a FSTSN, 

a~FSTSMAX, 

a~FSnB, 

a~FSUBO, a~FSOBP, a^FSOBR, 

a FSOBRD, 

a~FSOBRP, 

a~ FTST, 

b'fmait. 

a FXAN, a FXCB, a FXTRACT, a FYL2X, 

a“FYl,2XPl, 

a~F2XMl, 





" 80188/80288/80386 instructions: 

" Notieo that sosw iaswdiato versions of the 8088 
-- instructions only exist on these targets 
" (shirts, rotates,push, isnil,...) 


m_BOONO, 

m_LI0T, 


a IRS, a_LAR, a_LERVE, a LOOT, 

b~POPA, a_POSHA, b_SCDT, 


m_ClTS, 
a LSI,, 


a EHTZR, 
a'oOTS, 


a SIDT, 




DACS-80x86 User's Guide 
Imptememation-Dependem Chsracteristics 


mJMt. mJJJn. m_lttSK. ■_LTR, 

" 1C bit aliMyc... 

■ SLOT. «_SNSM. «_STIl. ■_VE*». ajrZMI, 


— th« S03SC spceirie Instnietloaa: 


m SETA, 

a SETAE, 

a^SETB, 

a SETBE, 

a SETC, 

a SETE, 

m'sETG, 

a'SETGE, 

a SETL, 

a~SETL£, 

a~SETHA, 

a~SETNAE, 

m SA'l'WA, 

m SETMBS, 

a'SETMC, 

a~seTliE, 

a~SETMG, 


m SE^WOE, 

n~SETIIL, 

a'sETNLE, 

a'sETHO, 

a~SETNP, 

a SETNS, 

si~SETH8, 

a SETO, 

a'SBTP, 

a~SETPE, 

a'SETPO, 

a~SETS, 

n'sETS, 

B~BSr, 

a'BSR, 

a~BT, 

~ a BTC, 

a BTB, 

-“sts, 

b~LFS. 

a L3S, 

b”lss. 

a^MOVEX, 

a MOVSX, 

:s~S«VCR, 

a“M0TOB, 

b'hovtr. 

a~SBLO, 

a'SHBO, 



— th« 80387 *p«etflc InsCruetlona: 


n rocoH, m rocoMP, ■_rocoKPP. mjvma. mjrsa, ■_rcos, 

m~rsnicos, ~ 

— byta/w otd/dword variants <to ba uaad, whan 

— not daduetlbla froa eontaxt): 


a ADCB, 

a ADCM, 

a AOCD, 

a ADOB, 

a ADOW, 

a ADDD, 

a~AMDB, 

a'AMDN, 

a'AHDO, 

a BTW, 

a~BTD, 

b'btcm. 

m_BTCD, 

a BTXM, 

a'BTRO, 

a~BTSN, 

a BTSD, 

tTctm, 

a^CMDE, 

a~CMDII, 

a'cOQ, 

a_CMPB, 

a'cMPW, 

a~CHPD, 

a_CMPSB, 

a~CMPSN, 

a CMPSD, 

a DECS, 

a~OECN, 

a DECO, 

m""0IVB, 

a“DIVW, 

a'OIVD, 

a IDIVB, a lOIVN, a IDIVD, 

a~IMDLB, 

a~IMDLM, 

a'lMOLO, 

a ntCB, 

a mCN, 

a IMCD, 

a~IHSB, 

a~IllSH, 

a'lMSO, 

a LCCSB,a LODSM, a LOOSD, 

a~MOVB, 

b~HOVN, 

b'mOVD, 

b'mCVSB, a~MOVSH, a~MOVSD, 

m~MOVSXB, 

a^HOVSXW, 

a'HOVZXB, 

a_MOVZXH, 

B HOLS# 

a MDLN, 

a~MOLO, 

a MEGB, 

b'negh. 

a NECD, 


B~liOtll, 

m~HOTD, 

a~OBB, 

a'ORM, 

a^ORD, 

a OOTSB,a OOTSN, 

a'oOTSO, 

a~POPN, 

a POPO, 

b~FOSBN, a 

POSBO, a 

RCLB, 

a~RCLH, 

a“RCLO, 

a'RCIlB, 

a~RCRM, a RCRD, a ROLB, 

a~tlOLH, 
b“SALW, 

a'ROLO, 

a^SALO, 

a~RORB, 

a'SARB, 

a ROHM, 
a~SARM, 

a RORD, 
a'SARD, 

a SALS, 
a^SBtB, 

b“sBLH, 

a'SHLDtl, 

a'sBRB, 

m~ SBRN, 

a SBRDW,a SBBB, 

a~SBBN, 

a^SBBO, 

a'scASB, 

a_SCASN, a_SCASO, a_STOSB, 

m~STOSM, 

a'sTOSO, 

a SUBB, 

a SOBN, 

a SOBO, 

m TS5TB, 

m~ TESTW, 

B~TESTO, 

a'xORB, 

a~XORN, 

a~XORO, 

a^DATAB, 

bToatam, 

a~0ATAD, 





— Spaclal 

'Inatruetlona': 

a_lab«X, 

a_roaot. 



— 8087 tamp raal load/»tora_and_jiop! m_rL0T, «_rSTPT); 


pragma paga; 

typa oparand_typa la ( nona, -- 

tmiaadlata, 

raglatar, 

addraaa, 
ayataa_addraaa/ 
naamT 

raglatar_1 wmadlata, 


raglstar_raglatar, 
raglstar~addraaa, 


addraaa_raglatar. 


no oparanda 

— ona lamadlata oparand 

— ona raglatar oparand 
-- ona addraaa oparand 
" ona 'addraaa oparand 
" CALL naaM 

" two oparanda : 

~ dastlnatlon la 
~ raglatar 
" aourea la lamMdlata 
" two raglatar oparanda 
" two oparanda : 

-- daatlnatlon la 
-- raglatar 

— aourea la addraaa 

— two oparanda ; 


235 




DACS'80x86 User s Guide 
Imptememation-Dependem Charactenstics 


ra«lst«r_syataa_addraaa, 

ayatM_addraaa_ra 9 latar. 

adilraaa_Uawdlat*, 

ayataa_addzaaa_laMdlata. 

lBna<Uata_ra 9 latar, 

innadlata_lanadlata, 

taqlatar_ta 9 latar _1 wadtata, 

ra«latar_addraaa_lanadlata, 

ra 9 latar_ayataai_addraaa_laBWdiata, 

addcaaa^Aflata^iaaadlata, 

ay3taai_addraaa_ta9latar_1 mmadlata 

) ; 


-- daacination la 

— addxaaa 

— aoutea la caglatar 

— two opaaanda : 

— daatlnatlon la 

— ra^latar 

" aoucca la 'addraaa 

— two oparanda : 

— daatlnatlon la 

— ‘addxaaa 

" aouma la ra^lacar 
" two oparanda : 

-- daatlnatlon la 
" addraaa 

-- aourca la Inwartiata 

— two oparanda : 

— daatlnatlon la 

— 'addraaa 

— aourca la ijBMdlata 
" only allewad for OOT 
" port la Iwartlata 

" aourca la raglatar 
" only allowad for 
" emEX 

— allowad for XMOLlaai, 

— SBROlaai, SltOiaa 

" allowad for DfOllaai 
—• allottad for IMn.lan 

— allowad for SSKDIbb, 

— SBUlat 

" allowad for SBSDlaa, 

.. SHLOlam 


typa ra 9 latar_typa la (AX< CX, DX, BX, SP, BP, SI, DI, -- word raga 
~ KL, CL, DL, BL, AB, CB, QB, BB, — byta raga 

EMC,ECX,EOX,Eax,ESP,EBP,ESl,EOl,>- dword ra«a 
BS, cs, SS, OS, FS, as, >- aalactora 

BX_SI, BX_OI, BP_SI, BP.OI, — 8086/a018«/80286 coMblnatlona 
St7 STl, ST2, STS, -- floating raglatara (stack) 

ST4, STS, STS, ST7, 

nil); 

-• tha axtandad saglatats (EAX .. EDI) plus FS and GS ara only 
" allowad In 8038S targats 

typa scala_typa la (scala^l, acala_2, acala_4, scala_S); 
subtypa aiachlna_strlng la string(1. .100); 


pragma paga; 

typa machlna_tnstructlon (oparand_klnd ; opatand_typa) la 
racord 

opcoda : opcoda_typa; 

casa opacand_klnd la 
whan laaMdlata •> 

laaaadlatal : Intagar; -- laaadlata 


whan raglstar •> 

r_raglstar : raglstar_typa; -- aourca and/or destination 


whan addraaa » 
a_aagmant 
a_ad^ass_baaa 

a~addrasa~lndax 
a~addras s~acala 
a~ addraas~offsat 


raglstar_typa; -- aourca and/or destination 
: ragTstar_typa; 

: raglstar~typa; 

: scala_ty^; 

: intagar; 


whan systaai_addraas •> 

aa_addraas : systaai.addraaa; — destination 


236 





DACS-80x86 User's Giii<ie 
Implememation-Dependeiu Characteristics 


whm naaa ■> 

n_«ertn 9 : ■•ehla«_(erln 9 ; *- OklL daatlnatlon 
wh«n raglaf r_1 1 —lUata •> 

r_l_t« 9 l»t«r_to : raqlat«r_typ«; — daatlnatlon 

r_i_l imadlata : Intayar; -- aourea 

whan ra 9 latar_ra 9 iatar -> 

f_r_Ea 9 latar_to : ra 9 latar_typa; — daatlnatlon 

r_t_ra 9 tatar_fro« : ra 9 latac~typa; -- aoarca 

whan ca 9 latar_addxaaa -> 

>r_*_Eaglatar_to : ra 9 latac_typa; — cSaatlnatlon 

r_a_aa 9 iwne : ra 9 latar~typa; — aourea 

r_a_addraaa_baaa : ra 9 latar~typa; 

r_a_addraaa_lndax ; ta 9 iatar~typa; 

r_a_addraaa_acala : aeala_ty^: 

r_a_acldraaa_offaat : Intaqar; 

whan addxaaa_ra 9 laear •> 

«_r_aaga»ant : raqlatar^typa; — daatlnatlon 

a_r_addroaa_baaa : ra 9 latar_typa; 

a_r_addroaa_lndax : ra 9 latar~typa; 

a_r_addroaa_acala : aeala_ty^; 

a_r_addraaa_of(aat : Inta^ar; 

«_r_ra 9 latat_fro« : ra 4 latar_typo; -- aourea 

whan taglatar_aystaB_addraaa -> 

r_aa_tagiatar_to ~ ; ra 9 latar_typa; — daatlnatlon 

^_aa_addroaa ; ayatam.addraaa; — aourea 

whan 3y3tam_addraaa_Ea9latar •> 

aa_t_addraaa : ayatam.addraaa; ~ daatlnatlon 

aa_r_ra 9 _fro« : ro 9 latar_typa; -- aourea 

whan addra3a_lanadlata -> 

a_l_aa 9 nant : raglatar^typa; — daatlnatlon 

•_i_«ddraaa_baaa : ra 9 latar~typa; 

a_l_addraaa~lhdax : raglatar'typa; 

a_l_addroaa_aeala : aeala_ty^; 

a_l_addroaa_o£faat : intagar; 

•_i_l®a>odlata : Intagar; -- aourea 

whan ay3taa_addraaa_laaadlata •» 

*d_l_addraaa ~ : ayatam.addraaa; — daatlnatlon 

aa_l_liuaadlato : intagar; — aourea 

whan lnmadlata_Ea9latar •> 

l_r_lmriadlata : Intagar; ~ daatlnatlon 

t_r_ra 9 lstar : ro 9 lator_typo; — aourea 

whan lamadlata_laaMdlata -> 

l_l_lmmadlatal : Intagar; — Immadlatal 

l_l_lmmadlata2 ; Intagar; — lapMdlata2 

whan ra 9 latar_ra 9 latar_lmBwdlata -> 

r_r_l_ra 9 latarl ; ra9l3tar_typa; — daatlnatlon 

r_E_l_ro 9 latar 2 : ra 9 lataE~typa; ~ aourcal 

r_r_l_lmmadlato : intagar;~ — 3oureo2 

whan ra9l3tar_addra3a_lmmadlata -> 

r_«_t_r« 9 tatar : ra 9 latar_typa; — daatlnatlon 

r_a_l_aagmant : Ea9latar_typa; -- aoureal 

r_a_l_nddra3s_baaa : ta9l3tM_typa; 
r_a_l_addraas_lndax : ca9l3tar_typa; 
i_a_l_addraa3_seala : acala_ty^; 
r_a_l_addta8a~o£faat: Intagar; 

t_.i_l_lnaMdlata ; Intagar; — 80 ure 82 

whan ra9l3tar_systam_addra88_lmmadlata •> 

r_»«_T_ra 9 latar T ra 9 l 8 tar_typa; — daatlnatlon 

addrlO : ayatam.addraaa; — aoureal 

r_3a_l_lmB»dlata : Intagar; — 8ourea2 


237 






OACS-80x86 User's Guide 
Implenienattioo*Oependott Cbsncteiistics 


HhM •ddxMa_r«9lst«r_laMdl«t« -> 

•_r_£^**0«nt ~ : t««lat«r_typ«; — dMtlMtlen 

•_c_i^«ddrMaJ»aa« ; raglata^typa; 

= raglatarZcypa; 

aZcZlZ*^^***Z*<^^* = aeal«_tyi^; 

aZrZlZ*<IUEaaaZof faac: liita««r; 

aZrZiZ’f***’*^*^ = r«glatar_typa; ~ aouical 

aZr^Z^*""*^*^* ■ intagar; ~ — aotttea2 

Milan ayataai_adidcaaa_raglatac_lJHBadllata -> 

aa_^l_addrMa T ayataa.addraaa; -- daatlnatlon 

a^^iZragtatac : raglatar_typa; — aoureal 

aa333 — Si'*ta : intagar; ~ — aourea2 

whan othara •> 
null; 

and eaaa; 

and racord; 

and awehlna_eoda: 


F.92 Restrictions 

Only procedures, and not functions, may contain machine code inseitions. 

Symbolic names in the fonn x'AODRESS can only be used in the following cases: 

1) X is an objea of scalar type or access type declared as an objea, a fonnal parameter, or 
by static renaming 

2) X is an array with static constraints declared as an object (not as a fonnal parameter or by 
renaming). 

3) X is a record declared as an objea (not a fonnal parameter or by renaming). 


The m.CALL can be used with "name" to call (for) a routine. 

Two opcodes to handle labels have been defined: 

mjabel: defines a label. The label number must be in the range 1 <s x <= 999 and is put 

in the offset field in the first operand of the MACHINE.INSTRUCniON. 

m.reset: used to enable use of more than 999 labels. The label number after a m_RESET 

must be in the range 1<= x 999. To avoid errors you must make sure that all 
used labels have been defined before a reset, since the reset qreration cleats all used 
labels. 

All floating instructions have at most otte operand which can be any of the following: 

• a memory address 

• a register or an immediate value 

• an entry in the floating stack 


238 









DACS-80x86 User's Guide 
Impleinentation-Dependeiu Characteristics 


F.9 J Examples 

The following section contains examples of how to use the machiite code insertions and lists the 
generated code. 


F.9.4 Example Using Labels 

The following assembler code can be described by machine code insertions as shown: 

MOV AX,7 
MOV CX,4 
CMP AX.CX 
JG 1 
JE 2 
MOV CX.AX 
1; ADD AX.CX 
2: MOV SS: [BP+OIl, AX 

packA 9 « axa^plaJMC la 

procadur* t«at_lab«la; 
praqiBA Inlln* Tt«ac_lab«la) ; 

•nd •xaa 9 >l«_MC; 

wl£h MACBIIIE_COOE; ui* MACBIME_COOe; 
packA9« body~«xaapl«_MC la ~ 


procadur* c«ac_lab«la la 
b« 9 ln 

MACBINE INSTROCTION' (r« 9 la£«r loaMdlaCa, ai MOV, AX, 7); 
MACRIME IXSTROCTION'(t« 9 lst«r~laUMdlaC*, a'MOV, CX, 4); 
MACBIHE IMSTROCTIOH'(r« 9 lat«t~r« 9 lat«e, a~CMP, AX, CX): 
MACBIME INSTROCTZOM'(laMMdlAt*, aTjG, 1); 

MACSINE.IMSTROCtZOR'(laiMdlAC*, M~JE, 2); 

HACBIME.INSTROCIION'<t« 9 lat«r £« 9 lat*t, ■~MOV, CX, AX); 
HACBIME_INSTROCTION'(laBWdlAtai, aTlabcl, 1): 

MACaiNE~II)STRUCTION'(r« 9 lat«r r« 9 lat«r, n~ADO, AX, CX): 
MACBINE_II)STRGCTION' (laMMdlat*, m_lab«l, 27; 
MACBINE_INSTR0CTI0M‘ (addr«aa_c«9l7c«r, m_MOV, SS, BP, 

~ bi, se«l«_l, 0, AX); 

•nd taac_lab«la; 

•nd •xanpl^_MC; 


F.9,5 Advanced Topics 

This section describes some of the more intricate details of the workings of the machine 
code insertion facility. Special attention is paid to the way the Ada objects are referenced in 
the machine code body, and various alternatives ate sirawn. 


239 






DACS-80x86 User’s Guide 
bnpiemenution-Dependent Characteristics 


F.9^.1 Address Speciflcations 

Package MACHINE.CODE provides two alternative ways of specifying an address for an 
instruction. The first way is referred to as SYSTEM.ADDRESS and the parameter associated 
this one must be specified via OBJECT’ADDRESS in the actual MACHINE.CODE insertion. The 
second way closely relates to the addressing which the 80x86 machines employ: an address has 
the general form 

segment:[base-*-index*scale-Kiffsetl 

The ADDRESS type expects the machine insertion to contain values for ALL these fields. The 
default value NIL for segment, base, and index may be selected (however, if base is NIL, so 
should index be). Scale MUST always be specified as scale.l, scale_2, scale_4, or scale_8. For 
16 bit targets, scale.l is the only legal scale choice. The o^set value must be in the range of 
-32768 .. 32767. 


F.9.5J Referencing Procedure Parameters 

The parameters of the procedure that consists of machine code insertions may be 
referenced by the machine insertions using the SYSTEM.ADDRESS or ADDRESS formats 
explained above. However, there is a great difference in the way in which they may be specified; 
whether the procedure is specified as INLINE or not 

INLINE machine insertions can deal with the parameters (and other visible variables) using the 
SYSTEM.ADDRESS form. This will be dealt with correctly even if the aaual values ate 
constants. Using the ADDRESS form in this context will be the user’s responsibility since the 
user obviously attempts to address using register values obtained via other machine insertions. It 
is in general not possible to load the address of a parameter because an ’address’ is a two 
component structure (seleaor and offset), and the only instruction to load an immediate address 
is the LEA. which will only give the offset. If coding requires access to addresses like this, one 
cannot INLINE expand the machine insertions. Care should be taken with references to objects 
outside the current block since the code generator in order to calculate the proper frame value 
(using the display in each frame) will apply extra registers. The parameter addresses will, 
however, be calculated at the entry to the INLINE expanded routine to minimize this problem. 
INLINE expanded routines should NOT employ any RET instructions. 

Pure procedure machine insertions need to know the layout of the parameters presented to, in this 
case, the called procedure. In particular, careful knowledge about the way parameters are passed 
is required to achieve a succesful machine procedure. When not INLINE a block is created around 
the call which allows addressing of parameters, and code for exiting the procedure is also 
automatic. 

The user takes over the responsibility for correct parameter addressing. 'The rules of Ada 
procedure calls must be followed. The calling conventions are summarized below. 


240 









DACS*80x86 User's Guide 
Implementation-Dependent Characteristics 


F.9JJ Parameter Transfer 

It may be a problem to figure out the correct number of words which the parameters take up on 
the stack (the x value). The following is a short description of the transfer method: 

INTEGER types take up at least 1 storage unit. 32 bit integer types take up 2 words, and 64 bit 
integer types take up 4 words. In 32 bit targets, 16 bit integer types take up 2 words the low 
word being the value and the high word being an alignment word. TASKs are transferred as 
INTEGER. 

ENUMERATION types take up as 16 bit INTEGER types (see above). 

FLOAT types take up 2 wotxls for 32 bit floats aitd 4 words for 64 bit floats. 

ACCESS types are considered scalar values and consist of a 16 bit segmem value and a 16 or 
32 bit of^t value. When 32 bit offset value, the segment value takes up 2 words the high word 
being the aligment word. The offset wotd(s) are the lowest, and the segment wotd(s) are the 
highest. 

RECORD types are always transferred by address. A record is never a scalar value (so no 
post-procedure action is carried out when the record parameter is OUT or IN OUT). The 
represenution is as for ACCESS types. 

ARRAY values are transferred as one or two ACCESS values. If the array is constrained, only 
the array data address is transferred in die same marmer as an ACCESS value. If the array is 
unconstrained below, the data address will be pushed by the address of the constraint In this 
case, the two ACCESS values will NOT have any alignmem words in 32 bit targets. 

Packed ARRAY values (e.g. STRING types) are transferred as ARRAY values with the addi /n 
of an INTEGER bit offset as the highest word(s): 

+H: BIT.OFFSET 
+L: DATA.ADDRESS 

+0: CONSTRAINT_ADDRESS - may be missing 

The values L and H depend on the presence/absence of the constraim address and the sizes of 
constraint and dau addresses. 

In the two latter cases, the form parameter’address will always yield the address of the data. If 
access is required to constraim or bit offset, the instructions must use the ADDRESS form. 


F.95.4 Example 

A small example is shown below (16 bit target): 
procedure unsigned.add 


(opl 

: in 

integer; 

op2 

: in 

integer. 

res 

: out 

integer); 


241 










DACS-80X86 User's Guide 
Implementtfion-Dependent Chancteristics 


Notice that machine subprograms cannot be functions. 


The parameten take up: 


opl : integer 1 word 

op2 ; integer 1 word 

res : integer 1 word 


Total 3 words 


The body of the procedure might then be the following assuming that the procedure is 
defined at outermost package level 


proeadur* unalgiMd_add 

(o^ : In 

op2 : In tnt« 9 «c; 

out Intoyor) la 


b««in 

pra 9 aa abatraet_aeod«_laaartlona (trua) ; 
aa_inatr' (aa_Craata_ileek.3,1,0,0,0); - 

aa~lnatr'<aa~Cnd^of~daelpart,0,0,0,0,0>; 
pra^Ba abatraet_aooda_laaartlona(falaa); 


X 


3. y - 1 


MChlna_lnatruetlon' (raglatar_ayata»_addraaa. 

~ axT opl'aiddxaaa); 

nBehlna_lnatcuetlon' (ra 9 iatar_ayaeiai_addxaaa. 

~ AxT opS'addraaa); 

laaehlna^lnatxuetlon' (ludlata, 
Mchlna^lnatruetlon' (lanadlata, 
i>aehlaa~inatnietlon' (laaadlata, 
Mehlna~inatruetlon' (ayata«_ad(lcaaa_ra 9 latar, 
~ raa'addzaaa, AX); 


■_ADO, 

a JtIC, 1); 
a~nit. 5); 
a labaltl); 
mjtov. 


pcaqaa abatcaet_aeo4a_lnaattlona (trua); 
aa_lnatr' (aa_B]dt_aui^rgta. 0,0,0, nll.acg,all_at «);-- (2) 
aa_lnatr'(aa~SatJbloe)i_laval, 0,0,0,0,0); —' y-l • 0 

pcagiu abatraet_aoeda_lnaactlona(falaa); 
and unal 9 nad_add; ~ ~ 


A routine of this complexity is a candidate for INLINE expansion. In this case, no changes to the 
above ’machinejnstiuction’ statements are required. Please notice that there is a difference between 
addressing record fields when the routine is INLINE and vdien it is not: 


type rec is 


record 


low 

: integm; 

high 

end record; 

: integer. 

procedure add_32 is 


(opl 

: in integer. 

op2 

: in integer; 

res 

: out rec); 


The parameters take up 1 -t- 1 -t- 2 words s 4 words. The RES parameter will be 
addressed directly when INLINE expanded, i.e. it is possible to write: 


242 








DACS-80x86 User’s Guide 
Imiirfemeiiuuion-Dependeiu Characteristics 


inachineJnstruction‘(systein_address_register. in_MOV. 

res’address, AX); 

This would, in the not INUNED version, be the same as updating that place on the stack where 
the address of RES is placed. In this case, the insertion must read: 

machineJnsmiction’(register_system_address, m_LES. 

SI, res’address): 

- LES SI,[BP+...] 

machineJnsmiction’(a^tess_register, m.MOV, 

ES, SI, nil, scale.l, 0, AX); 

- MOV ES:(SI+01,AX 


As may be seen, great care must be taken to ensure correa machine code insertions. A help 
could be to first write the routine in Ada, then disassemUe to see the involved addressings, and 
finally write the machine procedure using the collected knowledge. 

Please notice that INLINED machine insertions also generate code for the procedure itself. This 
code will be removed when the -nocheck option is applied to the compilation. Also not 
INLINED procedures using the AA.INSTR insertion, whidi is exi^ained above, will automatically 
get a storage.check call (as do all Ada subprograms). On top of that, 8 bytes are set aside in the 
created frame, which may freely be used by the routine as temporary space. The 8 bytes are 
located just below the display veaor of the frame (from SP and up). The storage.check call will 
not be generated when the compiler is invoked with •nochcck. 

The user also has the option NOT to create any blocks at all, but then he should be certain that 
the return from the routine is made in the proper way (use the RETP instruction (return and pop) 
or the RET). Again it will help first to do an Ada version and see what the compiler expects to 
be done. 

Symbolic fixups are possible in certain instructions. With these you may build ’symbolic’ 
instructions byte for byte. The instructions involved all require the operand type NAME (like used 
with CALL), and the interpretation is the following: 

(name, m.DATAO, "MYNAME") a full virtual address (offset and selector) of the 

symbol MYNAME (no additional offset is possible). 

(name, m.DATAW, "MYNAME") the offset part of the symbol MYNAME (no additional 

offset is possible). 

(name, m.DATAB, "MYNAME") the selector value of symbtd MYNAME 

In inlined machine instructions it may be a problem to obtain the address of a parameter (rather 
than the value). The LEA instruction may be used to get the offset part, but now the following 
form allows a way to load a seleaor value as well: 

(system.address, LES, param’address) ES is loaded with the selector of PARAM. If this 

selector was e.g. SS, it would be pushed and popped 
imo ES. LES may be substituted for LFS arid LGS 
for 80386. 


243 











DACS-80x86 User's Guide 
Imptememation-Dependem Giantcteristics 


F.IO Package Tasktypcs 

The TaskTypes packages defines the TadcControlBlock type. This dau stiuctuie could be useful 
in debugging a tasking program. The following package Tasktypes is for all DACS-80x86 except 
for DACS-80386PM/DACS-80486PM. 

with Systaa; 
p«eka«« TMkTyp«a Is 

subtyp* Offsst Is Systssi.OnslgnsdMotd; 
subtyp* BlockXd is SysCsa.OnslgnsdUerd; 

typ* 
typs 
typs 

typs 

typ« 
foe 
typs 

typs TsskStsts Is (Inltlsl, 

" Ths tssk Is ersstsd. but settvatlon 
" has not stattad yat. 

Cn^agad, 

— Tha task has callad an antiy. and tha 

— call la now aecaptsd, la. tha randatvotu 
" la In pro^raaa. 

Running, 

" Covats all othar statas. 

Dalayad, 

" Tha task awaits a tlsMout to axplra. 

EntryCalllngTlawd, 

" Tha task has callad an antsy which 
~ Is not yat aecaptad. 

EntcyCalllngOncondltlonal, 

" Tha task has callad an antty unconditionally, 

" which la not yat aecaptad. 

SalactlngTlaad, 

— Tha task Is waiting In a salact statsMont 
" with an opan dalay altacnatlva. 

SalactIngOncondltlonal, 

— Tha task waits In a salact stataaant 

— antlcaly with aecapt stataaants. 

SalactlngTatsUnabla, 

— Tha task waits In a salact statasMnt 
" with an opan tacalnata altacnatlva. 

Accaptlng, 

— Tha task waits In an accapt stataawnt. 

Synchronizing, 

— Tha task waits In an accapt stataa»nt 

— with no statsaia n t list. 

Cosiplotod, 

" Tha task has eosplacad ths axacutlon of 
— Its statasMnt list, but not all dapandant 
■■ tasks aca tanslnatsd. 

Tazmlnatad ); 

" Ths task and all Its dsscandants 
" ara tanslnatad. 


TaakXatey la oaw Systaa.OnalgnadHocd; 

Entzylndax la naw syataa.OnalgnadNocd; 

Altamatlvald la naw Systaa.OnalgnadNozd; 

Ticks la naw Systaai.Ollozd; 

Bool la naw Boolaan; 

Bool'slsa usa B; 

UZntg la naw Syataa.OnslgnadMocd; 


244 





DACS-80x86 User’s Guide 
bnplemenutioii-Oependem Chencteiistics 


for TukStat* (Initial •> ISIOOS , 

En«a««d •> KtOt* , 

Running •> ICSIO* , 

Onlaywt •> 1««1S« . 

SnccyCalllngTlMd » lS#20t , 
SnetyCnlllngOneoadltlonal •> lC*2tl , 
SnlnctlngTland •> ICiait . 
SalnetlngOneondltloanl •» 1<*39« . 
Snlnctlngtnmtnnhln •> lS*41t . 
Aeeaptlng «> lCS4At , 

Synchronising •> l<*S3t , 

CoiVlotod -> ICtSC* . 

Tocmlnntod •> 1CSS4S): 

for XaskStato'also uso •; 

typo TaskTypoOoaetlptot Is 
roeerd 

priority : Systaa.Priority; 

ontry count : Ointg; 

bloek~ld : Blockid; 

£lrst~o<m_addraas : Systoa.Jkddross; 

a»dulo_n«aiter : Ointg; 

onttyjnuadbor : Ointg; 

eodojnddroaa : Systoa.kddrosa; 

stnck_also : Systoa.ONord; 

tcaemf : Intogor; 

stack_sngsMnt_slso: Ointg; 
and racord; ~ 

typa AccTaskTypaOascrlptor Is aecass laskTypaOaacrlptor; 

typa HPXSavaXraa Is array(1..48) of Syataa.onslgnadNord; 

typa FlagsTypa Is 
racord 

MPXriag : Bool; 

IntarruptFlag : Bool; 

and racord; 

pragaa pack(FlagsTypa); 

typa StatasTypa Is 
racord 

stata : TaakStata; 

ls_abnoxaul : Bool; 

ls~actlvatad : Bool; 

falluro : Bool; 

and racord; 

pragsw pack(StatasTypa); 

typa ACF_typa Is 
racord 

bp : Offset; 

addr : Systasi.Address; 

and roeerd; 

pragma paek(ACr_typo); 
pragsM page; 

typa TaakCentrolBloek Is 
record 

saa : Systoa.Saaapliora; 

IsMonltor : Integer; 

" Delay queue handling 

dnoxt : Systoa.TaakValuo ; 

dprov : Systoa.TaskValua ; 

ddalay : Tie)is ; 

— Saved raglatars 

SS : Syataa.onslgnadNord ; 


245 





DACS-80x 86 User’s Guide 
Implemenutioa'Dependem Cbaracterisdcs 


Sr : OffMC ; 

~ RMdy qiMu* handltnf 

■>«xt ; syttaa.TMkValu* ; 

— SMwphor* hudllDf 

•wnaxt ; syataa.TaakValM ; 

—- Priority flolda 

priority : SyatM. Priority; 

*avod_prlorlty : Syatoa.Prlerlty; 

" HlaeollooiMua flolda 

Cl«a_allea : Syatoa.OnalqnodMord; 

*laqa : PlagaTypo; 

ModyCouat : syataa.Nord; 

~~ Stack Specification 


atack_atart : offaat; 

atack~ond : offaat; 

" State flolda 


atatea : stateaType; 

" ketlvatloa handllnf flolda 


activator 
act_ehaln 
noxt_chaln 
no_cot_act 
act block 


Syataa.laakValtto; 
Syataai. TaakValuo: 
Syatoa.TaakValuo; 
Syataai. Nord.- 
BlockZd; 


— Accept queue flolda 


partner : Syatea.TaakValuo; 

R‘ixt_partnex : syatea.TaakValuo; 


— Entry queue flolda 


next_eallor : Syatea.TaakValuo; 
" Randesvoua flolda 


ealled^taak 

laAaynclT 

taak_entry 

entry_lndax 

entry^naaoc 

call_^raaa 

alt_ld 

ex^_ld 


: Syatea.TaakValuo; 

: Integer; 

: TaakEntry; 

: Entryindex; 

: Syatoa.Addreaa; 

; Syatoa.Addreaa; 

: Altematlveld; 

: Syatea.Excoptlonld; 


" Dependency flolda 


parent_taak 

parent~block 

chlld_taak 

nextjehlld 

flrat_ehlld 

prevjeblld 

ehlld_act 

bloek~aet 

teralnated teak 


Syatea.TaakValuo; 
Blockld; 

Systea.TaakValue; 
Syatea.TaakValuo; 
Syatea.TaakValuo; 
syatea.TaakValuo; 
Syatea.aord; 
Syatea. Word; 
Syatea.TaakValuo; 


Abortion handling flolda 
buay : Syatea.Word. 


246 





DACS*80x86 User’s Guide 
Imptementation-Dependeitt Characteristics 


" Auxlll«xy eialda 

ttd : xecTaskTypaOMcrlptor; 

FlntCallar : syttaai.TMkValua; 

— RuicTlM Syataa fialda 

ACT : ACF_cypa; — ef. Oaac*a quida 9.4.2 

aoricst : latagar; -- Only uaad In RMS 

SaaTlrst : Incagar; -- Only aaad In RMS 

TBloeklngTaak ; Syataa.TaakValua; — Only uaad In RMS 

PBloeklnfTaak : Syataa.Taakvalua; -- Only uaad In RMS 

collaction : syataa.Rddraaa; 
partition : Xnta«ar; 

TaakChackLlaat : Offaat; -- to aaauro tnllna atora^a ehaek 

LaatSxeaptlon : Syataa.ONord; *- 2 * 1C blta 

SavadRdaMdr : Offaat; — to lapreva raodasvoua'a 

— MPX aava ataa 

—> Khan tha application ia llnkad with -iva, a apaeial 

— aava araa for tha RPX la allocatad at tha vary and 

— of ovary TC8. 

" la: 

— eaaa MVX_Praaant la 

" whan TROE >> MPXaava : MPXSavaAraa; 

" whan FALSE >> null; 

-- and eaaa; 

and raeord; 

— Tha following ia to aaauro that tha TCB haa tha axpaetad alxa: 

TCa_aixa : conatant IMTESER TaakControlBlock'alxa / 8; 

aubtypa TCB_ok_valua ia IMTESER ranga 138 .. 13C; 

TCB_ok rematant TC8_ok_valua :> TaakControlBlock'alxa / 8; 

and TaaXTypaa; 


F41 RMS Tasking (OPTIONAL) 

The DACS-80x86 systems may nm tasking ap^dications by means of Rate Monoionic Scheduling 
(RMS). RMS capability is purchased optionally, and is thus not included by default Please contaa 
DDC-I for more information regarding RMS and your system. RMS allows the programmer to 
guarantee propeities of a tasking system, i.e. that tasks will meet their hard deadlines. The RMS 
tasking is selected by specifying •rms to the Ada link command. 


247 





