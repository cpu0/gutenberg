Best 

Available 

Copy 






TASK: UU03 
CDRL: 05156 
March 1993 




Reuse Library Framework 

Source Code Release Version 4.1 
Version Description Document 


Informal Technical Data 



STARS-UC-05156/015/00 
March 1993 



94-30886 


94 ® 27 pqi g 






TASK: IT03 
(’DHL: or, 156 
March 1993 


VERSION DESCRIPTION DOCUMENT 
For 

SOFTWARE TECHNOLOGY FOR ADAPTABLE, RELIABLE SYSTEMS 

(STARS) 


Reuse Library Framework 
Source Code Release Version 4-1 
SunOS Implementation 


STARS-UC-05156/015/00 
March 1993 


Data Type: A005, Informal Technical Data 

CONTRACT NO. F19628-88-D-0031 
Delivery Order 0003 

Prepared for: 

Electronic Systems Center 
Air Force Systems Command, USAF 
Hanscom AFB, MA 01731-5000 

Prepared by: 

Paramax Systems Corporation 
12010 Sunrise Valley Drive 
Reston, VA 22091 

DTIC QUALITY H7IIICT3D 3 


Aooeaalon For 

"ins GRAkI 
DTIC TA3 □ 

Um announced □ 




Jastiricution. 


By- 

Distribution/ 


Availability C»d#s 


rfelst 




Avail and/or 
Spaolal 




Distribution Statement “A” 
per DoD Directive 5230.24 

Authorized for public release; Distribution is unlimited. 





TASK: IT():i 
( DHL: 0.'>r>(. 
March 109:5 


Data ID: STARS-UC-05156/013/00 

Distribution Statement “A” 
per DoD Directive 5230.24 

Authorized for public release; Distribution is unlimited. 

Copyright 1993, Paramax Systems Corporation, Reston, Virginia 
Copyright is assigned to the U.S. Government, upon delivery thereto, in accordance with 

the DFAR Special Works Clause. 

Developed by: Paramax Systems Corporation 

This software, developed under the Software Technology for Adaptable, Reliable Systems 
(STARS) program, is approved for release under Distribution “A” of the Scientific and Tech¬ 
nical Information Program Classification Scheme (DoD Directive 5230.24) unless otherwise 
indicated. Sponsored by the U.S. Defense Advanced Research Projects Agency (DARPA) 
under contract F19628-88-D-0031, the STARS program is supported by the military services, 
SEI, and MITRE, with the U.S. Air Force as the executive contracting agent. 

Permission to use, copy, modify, and comment on this software and its documentation for 
purposes stated under Distribution “A” and without fee is hereby granted, provided that 
this notice appears in each whole or partial copy. This software retains Contractor indemni¬ 
fication to The Government regarding copyrights pursuant to the above referenced STARS 
contract. The Government disclaims all responsibility against liability, including costs and 
expenses for violation of proprietary rights, or copyrights arising out of the creation or use 
of this software. 

In addition, the Government, Paramax, and its subcontractors disclaim all warranties with 
regard to this software, including all implied warranties of merchantability and fitness, and 
in no event shall the Government, Paramax, or its subcontractor(s) be liable for any special, 
indirect or consequential damages or any damages whatsoever resulting from the loss of use, 
data, or profits, whether in action of contract, negligence or other tortious action, arising in 
connection with the use or performance of this software. 






VERSION DESCRIPTION DOCUMENT 
Reuse Library Framework 
Source Code Release Version 4.1 
SunOS Implementation 


TASK: UU():{ 
CDRL: U')l')(> 
March 199:1 


» 


Approvals: 


Task Manager Richard E. Crtps Date 


(Signatures on File) 








TASK: Cm 
('DHL: 05156 
March 1993 


VERSION DESCRIPTION DO(TMENT 
Reuse Library Framework 
Source Code Release Version 4.1 
SunOS Implementation 


Change Record: 


Data ID 

Description of Change 

Date 

Approval 

STARS-UC-05156/013/00 

Successor Volume: Upgrade 
for software version 4.1 

25 February 1993 

on file 

STARS-UC-05156/005/00 

Successor Volume: Upgrade 
for software version 4.0 

30 November 1992 

on file 

STARS-TC-03064/004/00 

Successor Volume: Upgrade 
for software version 3.0 

23 January 1992 

on file 

STA RS-SC-03064/003/00 

Successor Volume: 

Upgrade for documentation 
and procedures 

11 October 1991 

on file 

STARS-SC-03064/002/00 

Successor Volume: Upgrade 
for software version 2.2 

06 September 1991 

on file 

STARS-SC-03064/001/00 

Original Issue 

26 February 1991 

on file 




































REPORT DOCUMENTATION PAGE 


-o r m Acoroveo 
OMB No 0704-0188 



’O* '“is :c<«ect - c" tf 'ntcrmiocr -s •siimjtM tr »«*'.*ce * -* ot r ••'\03r\0 rr^uorrs i'f tim* »o' >«\tr - r::.r* , v vear;-»*3 et Mina aiu \Oufc« 

('•iib.'iq oiu <na <o«*oii*!ino mo rf»>#niro ; «►—■*?" c» •*'t' , "waTto n ^na (omm*nt^ ojfOf' c' 'me' dtoect o* tn*\ 

"*3t 3** n<,uamc Suggestions tor 'eOuCino tf*iS Ourae* tC /.4*n eqton •'MOOujnpn Se'vtCtS. u-recorjte *C* •'»->'**»Mien w’C<*'»tiOn> <no -wni '.MS itttefion 
•? ‘<C- -nmoton /a 22202-^30? sna to tn* o* M#"aoe m ent ana Buaae? PBoe'wor* Reduction p-?:*-:: «3?C4-3’88) w\*sn nci?n _ c 2C5C3 


1. AGENCY USE ONLY (Leave olanK) I 2. REPORT DATE 


4. TITLE AND SUBTITLE 


Reuse Library Framework 


3. REPORT TYPE AND DATES COVERED 
Informal Technical Report 


5. FUNDING NUMBERS 

F19628-88-D-0031 


6. AUTHOR(S) 


Paramax Corporation 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Paramax Corporation 
1210 Sunrise Valley Drive 
Reston, VA 22090 


9. SPONSORING. MONITORING AGENCY NAME(S) AND AODRESS(ES) 

Department of the Air Force 
Headquarter, Electronic Systems 
Hanscom AFB, MA 01731-5000 


| 8. PERFORMING ORGANIZATION 
REPORT NUMBER 


STARS-UC-05156/015/00 


10. SPONSORING. MONITORING 
AGENCY REPORT NUMBER 


05156 



124. DISTRIBUTION. AVAILABILITY STATEMENT 


Distribution "A" 


13. ABSTRACT (Minimum 200 words) 


12b. DISTRIBUTION CODE 


The Reuse Library Framework (RLF) is an Ada system designed and implemented to sup¬ 
port the production and installation of domain-specific software library systems. The RLF is 
based on two fundamental subsystems: AdaKNET (Ada Knowledge NETwork) and AdaTAU 
(TAU is an acronym for Think Ask Update) which are knowledge representation and in- 
ferencing systems derived from systems previously developed by Unisys in Prolog. These 
subsystems are supported by an integrating framework to allow them to be used in combina¬ 
tion with each other. AdaKNET and AdaTAU are also equipped with interface specification 
languages (Library Model Definition Language (LMDL) and Rule Base Definition Language 
(RBDL) respectively) that are used to initialize domain models that describe the library (or 
application) domain. In addition to the support of library systems, the RLF was used to 
develop a prototype Ada unit test assistant during the STARS Foundations period and has 
been applied to the representation of software and reuse process models which are themselves 
machine processable. 



17. SECURITY CLASSIFICATION 
OF REPORT 
Unlcassified 


18. SECURITY CLASSIFICATION 
OF THIS RAGE 
Unclassified 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
Unclassified 


IS. NUMBER OF PAGES 
86 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 

























March 1993 STARS l'(‘ 0",ir,ti U13/M) 

Contents 

1 SCOPE 

1.1 Identification . . 

1.2 System Overview 


A 2 RELATED SOFTWARE 1 

3 VERSION DESCRIPTION 1 

3.1 Inventory of Contents. 1 

3.1.1 Directory: docs . 2 

3.1.1.1 Sub-directory: manuals . 3 

3.1.1.1.1 RLF Administrator’s Manual. 3 

3.1.1.1.2 RLF Installation Guide. 3 

3.1.1.1.3 RLF Modeler’s Manual. 3 

3.1.1.1.4 RLF User’s Manual. 3 

3.1.1.2 Sub-directory: tutorials . 3 

3.1.1.2.1 RLF User Tutorial. 3 

3.1.1.2.2 RLF Administrator Tutorial. 3 

3.1.1.2.3 RLF Modeler Tutorial. 4 

3.1.2 Directory: bin . 4 

3.1.3 Directory: models . 4 

3.1.3.1 Sub-directory: models/ada.x . 4 

3.1.3.2 Sub-directory: models/animals . 4 

3.1.3.3 Sub-directory: models/asw . 5 

3.1.3.4 Sub-directory: models/common-data.model . 5 

3.1.3.5 Sub-directory: models/demo.actions . 5 

3.1.3.6 Sub-directory: models/window-manager . 5 

3.1.3.7 Sub-directory: models/software.technology . 5 

3.1.3.8 Sub-directory: models/sort.and.scarch . 5 

3.1.4 Directory: code . 5 

3.1.4.1 Sub-directory: code/Common . 5 

3.1.4.2 Sub-directory: code/Adaknet . 6 

3.1.4.3 Sub-directory: code/Adatau . 6 

3.1.4.4 Sub-directory: code/Ada.Actions . 6 

3.1.4.5 Sub-directory: code/Hybrid . 6 

3.1.4.6 Sub-directory: code/Library-Manager . 6 

3.1.4.7 Sub-directory: code/Rlf-Gb . 6 

3.1.4.8 Sub-directory: code/Lmdl . 6 

3.1.4.9 Sub-directory: code/Rbdl . 7 

3.2 Changes Installed for Version 4.1 . 7 

3.2.1 The PCTE version of RLF. 7 

3.2.2 Library-Manager Application Refinement. 9 

3.3 Adaptation Data. 10 

3.3.1 Operating Environment . 10 



Page ii 











































March 1993 


STARS l (' 15(i/l) 1 :t/DO 


3.3.2 Development Environment. 

3.3.3 Configuration-Unique Data . 

3.3.3.1 Software Dependencies. . . . 

3.3.3.2 OS Dependencies. 

3.3.3.3 Defaults. 

3.4 Interface Compatibility. 

3.4.1 Previously Built RLF Libraries .... 

3.4.2 Libraries Built with Different Compilers 

3.5 Installation and Usage Instructions. 

3.5.1 Invoking RLF Applications. 

3.6 Potential Problems. 

3.6.1 System Memory Limitations. 

3.6.2 Graphical-Browser Known Problems 

3.7 Enhancements. 


10 
! 1 
1 1 
I l 
1 1 
12 
12 
12 
12 
12 
13 
13 
13 
13 


4 USER FEEDBACK 


14 


5 NOTES 15 

A Appendix: Inventory of Contents 16 

B Appendix: RLF Start-up Files 32 

B.l Sample RLF .rlfrc Start-up File. 32 

B.1.1 File: .rlfrc. 32 

B.2 RLF Graphical Browser Start-up Script. 33 

B.2.1 Script: RLF_GB . 33 


C Appendix: Installation Scripts 38 

C.l Sun Ada Support File. 38 

C.1.1 File: Build_RLF.var. 38 

C.2 SunAda Scripts for Installing RLF. 47 

C.2.1 Script: Install_Rlf_src. 47 

C.2.2 Script: Build_RLF.csh. 52 

C.2.3 Script: Build_Ada_Libraries.csh. 56 

C.2.4 Script: BuiId_Rlfdir.csh. 58 

C.2.5 Script: Build_Lmdl.csh. 69 

C.2.6 Script: Build_Rbdl.csh. 72 

C.2.7 Script: Build_Library.Manager.csh . 75 

C.2.8 Script: Build_Rlf_Gb.csh. 76 

C.3 Scripts for Building Sample Networks. 79 

C.3.1 Script: Build_Ada_X_Lib.csh. 79 

C.3.2 Script: Build_Animals_Lib.csh. 80 

C.3.3 Script: Build. ^w.Lib.csh. 81 

C.3.4 Script: Build.CommonJData_Model_Lib.csh . 82 

C.3.5 Script: Build_Demo.Actions_Lib.csh. 83 

C.3.6 Script: Build_Move_Domain.Lib.csh. 84 


Page iii 








































March (!W.'5 STARS I'(' ()'>!Mi i)I-{/<)() 

(.’..'5.7 Script: Bui Id J5 VV.Tech _Li b .rsh . ,S;) 

(’..'5.8 Script: Build_Sort_AiHLSearcli_Lib.csh . s (i 


Page iv 





March 199.} 


STARS 


-l'(’ ll',!.-)(, ui:}/»(! 


1 SCOPE 

1.1 Identification 

Version Description Document. 
Reuse Library Framework (RLF), 
Version 4.1, 

SunOS Implementation 


1.2 System Overview 

The Reuse Library Framework (RLF) is an Ada system designed and implemented to sup¬ 
port the production and installation of domain-specific software library systems. The RLF is 
based on two fundamental subsystems: AdaKNET (Ada Knowledge NETwork) and AdaTAU 
(TAU is an acronym for Think-Ask-Update) which are knowledge representation and infer- 
encing systems derived from systems previously developed bv Unisys in Prolog. These sub¬ 
systems are supported by an integrating framework to allow them to be used in combination 
with each other. AdaKNET and AdaTAU are also equipped with interface specification 
languages (Library Model Definition Language (LMDL) and Rule Base Definition Language 
(RBDL) respectively) that are used to initialize domain models that describe the library (or 
application) domain. In addition to the support of library systems, the RLF was used to 
develop a prototype Ada unit test assistant during the STARS Foundations period and has 
been applied to the representation of software and reuse process models which are themselves 
machine processable. 


A 2 RELATED SOFTWARE 

In order to build the RLF Graphical-Browser , it is necessary to have installed the X Window 
System Release 4 (X11R4), OSF/Motif version 1.1, SERC Ada/Motif version 1.1, and the 
STARS Reusable Graphical Browser (RGB) version 1.1. To build the PCTE object man¬ 
agement system version of RLF it is also necessary to have installed the Emeraude PCTE 
implementation version 12.3 and the STARS Ada/PCTE bindings version 0.3. 


3 VERSION DESCRIPTION 
3.1 Inventory of Contents 

This release includes a version of the RLF which can be hosted the UNIX operating system 
or the Emeraude PCTE implementation. A README files is providedto inform the user 
of useful places to look for information on RLF documentation and registration. Source 
code for this version resides in the directory code. This directory contains the following 
subdirectories: Common , Adaknet , Adatau , Ada.Actions , Hybrid. Library-Manager. Rlf.Gb. 


Page 1 




.March 1993 STARS r(’-0:>]56/013/00 

Lmdl , and Rbdl. This version also contains models, bm. and docs directories. The contents 
of these subdirectories are described in the following sections. 

The distribution is organized as follows: 


bin 

bin/bitmaps 

code 

code/Ada_Actions 

code/Adaknet 

code/Adatau 

code/Common 

code/Hybrid 

code/Library.Manager 

code/Lmdl 

code/Rbdl 

code/Rlf_Gb 

docs 

docs/manuals 

docs/tutorials 

models 

models/ada.x 

models/ada_x/Text 

models/ada_x/Text/Widgets 

models/ada_x/Text/Xlib 

models/ada_x/Text/Xmu 

models/ada_x/Text/Xt 

models/animals 

models/animals/Text 

models/ass 

models/ass/Text 

models/common_data_model 

models/common_data_model/Text 

models/demo_actions 

models/demo.actions/Text 

models/demo_actions/Text/sounds 

models/demo.actions/Text/xbm 

models/vindov.manager 

models/uindos.manager/Text 

models/software.technology 

models/softeare.technology/Text 

models/sort_and_search 

models/sort_and_search/Text 


A complete listing of the files in this distribution is included in Appendix A. 


3.1.1 Directory: docs 

The two sub-directories of docs contain the RLF manuals and tutorials currently delivered 
in this RLF release. 


Page 2 





• March 1993 


STARS-l : C-0r,ir,()/013/00 


't 


3.1.1.1 Sub-directory: manuals 

3.1.1.1.1 RLF Administrator’s Manual. The RLF Administrator's Manual provides 
the information necessary for an RLF reuse library administrator to install, modify, and 
maintain a reuse library hosted on RLF. 


3.1.1.1.2 RLF Installation Guide. The RLF Installation Guide informs the user how 
to install, build and start up the STARS RLF and its user interface applications, namely 
the RLF Graphical-Browser and the RLF Library-Manager. 


3.1.1.1.3 RLF Modeler’s Manual. The RLF Modeler's Manual provides the informa¬ 
tion necessary for an RLF reuse library domain modeler to model, encode, and build an RLF 
reuse library specification and the library itself. It also defines how to model, encode, and 
install the RLF library advice modules called “inferences.” 


3.1.1.1.4 RLF User’s Manual. The RLF User’s Manual describes the use and basic 
customization of the Graphical-Browser application. The reader is not expected to be a 
programmer, but familiarity with the UNIX C shell, and basic X Window System operations 
using the Motif Window Manager (mwm) or some other window manager is assumed. Some 
explanation of RLF concepts is provided, but only at an elementary level. 


3.1.1.2 Sub-directory: tutorials This directory contains three Postscript file represen¬ 
tations of the contents of three RLF training packages that will be used as hand-out material 
in support of the delivery of RLF training sessions. While the documents can be read on 
their own, and are formatted in an article-style format, they are oriented more for a pre¬ 
sentation of the material by a speaker using transparencies. The tutorials are also designed 
to be supplemented by in-class demonstrations of RLF software and the conducting and 
monitoring of both in-class and out-of-class student exercises using the software. 


3.1.1.2.1 RLF User Tutorial. The RLF User Tutorial presents a survey of the usage 
of the RLF Graphical-Browser application which will enable new RLF users to quickly learn 
the user interface and the various RLF features which it presents. 


3.1.1.2.2 RLF Administrator Tutorial. The RLF Administrator Tutorial provides 
an introduction to the installation and maintenance of RLF library systems. This tutorial 
assumes that the user is familiar with the basic RLF interface (for example, as presented in 
the RLF User Tutorial). A survey of the Library-Manager application is also presented in 
the tutorial. 


Page 3 





• March 1993 


STARS-UC-05156/013/00 


3.1.1.2.3 RLF Modeler Tutorial. The RLF Modeler Tutorial provides a thorough 
presentation of RLF modeling capabilities so that attendees can begin the construction of 
RLF models for application domains of interest to them. Familiarity with the material 
covered in the RLF User Tutorial is assumed. Modeling techniques are discussed and the 
use of the RLF model specification languages is taught through the use of a detailed example. 


3.1.2 Directory: bin 

This directory contains the application resource file RLF-Browser , the Graphical-Browser 
start-up script RLF.GB, a sample RLF start-up file .rlfrc, and the associated bitmaps for 
the RLF-Browser file in the sub-directory bitmaps. These items are used with the Graphi- 
caLBrowser application, with the .rlfrc also being used for the other RLF applications. 

Included in the RLF 4.0 release is a Sndl-to-Lmdl translator for the conversion of the old 
SNDL syntax to the LMDL syntax for models. 

This directory also contains public domain executables that are used by the sample models 
included with this release, which are not part of the standard SunOS or X releases. The 
executables included are less and xloadimage. In addition, a script called viewstp.csh is 
provided as an example of an RLF action to view a Software Through Pictures(STP) diagram 
using STP. 

The start-up script RLF-GB and the sample start-up file .rlfrc are included in this document 
in Appendix B. 


3.1.3 Directory: models 

Sample libraries and their build scripts are found in the models directory, which contains the 
ada-X , animals, asw , common-data-model, demo.actions, window.manager, software-technology 
and sorLandsearch subdirectories. The contents of these subdirectories are described in the 
following sections. This directory also contains the file library .model-template.Imdl, which 
contains an example LMDL specification for a library action sub-tree. 


3.1.3.1 Sub-directory: models/ada.x ...contains the LMDL and RBDL specifications 
and associated text files for a sample RLF library describing the STARS Ada/Xt system. 
The specification files must be processed by the LMDL and RBDL translators to build the 
ada_x knowledge base. 


3.1.3.2 Sub-directory: models/animals ...contains the LMDL specification and asso¬ 
ciated text files for a sample knowledge base describing a simple animals taxonomy. The 
specification files must be processed by the LMDL translator to build the animals knowledge 
base. 


Page 4 






.March 1993 STARS-UC-05156/013/00 

3.1.3.3 Sub-directory: models/asw ...contains the LMDL specification and associated 
• text files for a sample RLF library addressing the anti-submarine warfare!ASW) domain. 
The specification files must be processed by the LMDL translator to build the asw library. 


3.1.3.4 Sub-directory: models/common.daLa.model ...contains the LMDL specification 
and associated text files for a sample RLF library illustrating how the Common Data Model 
defined in the STARS ALOAF document can be expressed using RLF. The specification files 
must be processed by the LMDL translator to build the common data model library. 


3.1.3.5 Sub-directory: models/demo.actions ...contains the LMDL specification and 
associated text files for a sample RLF library addressing the modeling of LMDL actions. 
The sound actions contained in this library only work on a Sun workstation that has a 
sound board. The specification files must be processed by the LMDL translator to build the 
demo_actions library. 


3.1.3.6 Sub-directory: models/window-manager ...contains the LMDL and RBDL spec¬ 
ifications and associated text files for a sample RLF library addressing the SETs FODA 
example on move operations in the window manager domain. The specification files must 
be processed by the LMDL and RBDL translators to build the window .manager library. 


3.1.3.7 Sub-directory: models/software-technology ...contains the LMDL specification 
and associated text files for a sample RLF library providing both a functional and product 
oriented view into the domain and defining numerous attributes for describing software 
engineering components. The specification files must be processed by the LMDL translator 
to build the software-technology library. 


3.1.3.8 Sub-directory: models/sort.andsearch ...contains the LMDL and RBDL spec¬ 
ifications and associated text files for a sample RLF library describing a sort and search 
alogorithms domain. The specification files must be processed by the LMDL and RBDL 
translators to build the sort_and_search library. 


3.1.4 Directory: code 

The code directory contains the source code directories, build scripts, and support files needed 
to construct the RLF. 


3.1.4.1 Sub-directory: code/Common ...contains low-level data abstractions and util¬ 
ities shared by the other RLF subsystems. For example, basic set and list abstract data 
types (ADT’s) are located in this directory. 


Page 5 





• March 1993 


STARS-UC-05156/013/00 


3.1.4.2 Sub-directory: code/Adaknet ...contains the source code for the AdaKNET 
subsystem. AdaKNET is a structured-inheritance knowledge representation system, which 
may be used as a stand-alone system or in conjunction with AdaTAU. The AdaKNET source 
makes use of the ADTs in the Common directory. 


3.1.4.3 Sub-directory: code/Adatau ...contains the source for the AdaTAU subsystem. 
AdaTAU is a rule-based inferencer. Like AdaKNET, it may be used as a stand-alone system. 
The AdaTAU source makes use of the ADTs in the Common directory. 


3.1.4.4 Sub-directory: code/Ada.Actions ...contains the source for Ada Procedures 
actions. The ada specifications, bodies and separates may be modified to create unique RLF 
Ada Procedure actions to be used in library modeling. 


3.1.4.5 Sub-directory: code/Hybrid ...contains the source code for the hybrid knowl¬ 
edge representation system used by RLF library applications. This hybrid system combines 
AdaKNET and AdaTAU into an integrated knowledge representation system. The hybrid 
system source makes use of the AdaKNET and AdaTAU subsystems and the ADTs in the 
Common directory. 


3.1.4.6 Sub-directory: code/Library-Manager ...contains the source code for the Li¬ 
brary-Manager application. The Library-Manager is designed for a library administrator to 
have access to update and control an RLF library. The Library-Manager code makes use of 
the AdaKNET, AdaTAU and hybrid knowledge representation systems, and the ADTs in 
the Common directory. 


3.1.4.7 Sub-directory: code/Rlf.Gb ...contains the source code for the RLF Graphi¬ 
cal-Browser application. This browser uses SERC Ada/Motif interface to the X Window 
System. It provides a graphical read-only browsing capability for RLF network models. The 
Rlf-Gb code makes use of the AdaKNET, AdaTAU and hybrid knowledge representation 
systems. It also requires access to the STARS Reusable Graphical Browser interface. 


3.1.4.8 Sub-directory: code/Lmdl ...contains the source for the Library Model Defini¬ 
tion Language (LMDL) translator. This translator transforms a high-level, non-procedural 
description of a semantic network knowledge base into an AdaKNET knowledge base. The 
source code in this sub-directory makes use of ADTs defined in the Common , Adaknet, and 
Hybrid subdirectories. 


Page 6 







1 


• March 1993 STARS-UC-05156/013/00 

3.1.4.9 Sub-directory: code/Rbdl ...contains the source for the Rule Base Definition 
Language (RBDL) translator. This translator transforms a high-level, non-procedural de¬ 
scription of a rule-based knowledge base into an AdaTAU knowledge base. The source code 
in this sub-directory makes use of ADTs defined in the Common and Adatau subdirectories. 


A 3.2 Changes Installed for Version 4.1 

The largest changes in RLF 4.1 from RLF 4.0 is the support for the operation of RLF on 
top of PCTE in addition to UNIX. Other changes include documentation updates (including 
UNIX-style man pages) and Library -Manager application refinement. 


A 3.2.1 The PCTE version of RLF 

The following files were added to the code/Common directory to support input/output (10) 
to either UNIX file systems or PCTE object bases. 


code/Common/rlf .direct JLo. a 
code/Common/rlf jdirect _io_pcte_. a 
code/Common/rlf .direct _io_unix_. a 
code/Common/rlf .sequent ial_io. a 
code/Common/rlf .sequent ial_io_pct e_. a 
code/Common/rlf .sequent ial_io_unix_. a 
code/Common/rlf_text_io_pcte_. a 
code/Common/rlf _text_io_pcte. a 
code/Common/rlf_text_io_unix_. a 
code/Common/rlf _text_io_unix . a 

These packages replace standard Ada 10 packages. Environment variables in the build scripts 
select either the UNIX or PCTE packages for compilation depending on whether UNIX file 
system or PCTE is being used. As a result of the 10 changes, numerous files in the directories 
Rlf, Lmdl , and Rbdl were modified. 

The method of invoking actions via system calls does not work in PCTE. The file ac- 
tionAnvocation.body.a in the directory Adaknet was modified to invoke tsh shell scripts. 
This change required changes to Lmdl specifications containing actions. As a result, several 


Page 7 






.March 1993 


STARS-UC-05156/013/00 


of the sample libraries found in the directory models contain two Lmdl specifications to sup¬ 
port UNIX and PCTE. The scripts to load the Lmdl specifications will load the appropriate 
specification. 

The package System-Dependent-Routines was modified to suppoil PCTE. Separate package 
bodies for UNIX and PCTE were created. The new files are: Common/sys-dep.unix.a and 
Common/sys-dep-pcte.a. 

Several files to isolate PCTE and UNIX interface differences were added to the directory 
Common. 

code/Common/network-const ant s_pcte. a 
code/Common/pcte_invoke_str ing . a 
code/Common/pcte.obj ect .create. a 
code/Common/rlf .const ants-pcte. a 
code/Common/rlf .const ant s_unix. a 
code/Common/rlf _pct e_body. a 
code/Common/rlf .pet e_spec. a 
code/Common/unix_invoke_string. a 

Additional scripts for loading sample libraries were added to subdirectories of the models 
directory. These scripts are: 

models/adajc/Build_AdaJC _Lib. esh 
models/animals/Build_Animals_Lib. esh 
models/asw/BuildJtsw .Lib. esh 

models/common_data_model/Build_Common_Data_Model JLib. esh 
models/demo .actions/Build_Demo_Actions_Lib. esh 
models/softvare.technology/Build-SW.Tech .Lib. esh 
models/sort .jand_search/3uil<i-SaS_Lib. esh 
models/window_manager/BuildJfindow_Manager_Lib. esh 

Several files in the code/Ada.Actions directory were modified for invoking actions in PCTE. 
Differences in invocation of actions between PCTE and UNIX are isolated in separate files. 
The new files in Ada-Actions are: 


Page 8 





.March 1993 


STARS-UC-05156/013/00 


code/Ada_Actions/display_attr_action_ascii_sp_pcte. a 
code/Ada_Actions/display_attr_action_ascii_sp_unix. a 
code/Ada_Actions/di splay _attr_action_body. a 
code/Ada_Actions/display_attr_action_buf _sp_pcte. a 
code/Ada_Actions/display_attr_action_buf_sp_unix. a 
code/Ada_Actions/display_attr_action_f iles_sp_pcte. a 
code/Ada_Actions/display_attr_action_f iles_sp_unix. a 
code/Ada_Actions/extract_f ile_sp_pcte. a 
code/Ada_Act ions/extract _f ile_sp_unix. a 

Differences between UNIX and PCTE implementations in the code/Adaknet directory are 
isolated in the files: 

code/Adaknet/invoke_string_sp_pcte. a 
code/Adaknet/invoke_string_sp_unix. a 

To reduce the amount of PCTE dependent code, the Gb-Actions package of the Graphi¬ 
cal-Browser application was removed and actions invoked from the Graphical-Browser now 
use the action invocation method in the RLF core. The file Rif-Gb/gb-actions, a has been 
deleted from this release. 

A problem compiling generics in the package GB-CB-Suppress forced the creation of a sepa¬ 
rate package containing several generic instantiations. These generic instantiations are now 
contained in the file Rlf-Gb/gb-cbsuppress-gen.a. 

Because of the different method for invoking actions in PCTE many of the Lmdl scripts in 
the models directory have been modified. PCTE specific Lmdl specfications have -pete string 
preceding the .lmdl suffix in the UNIX file name. In addition, esh scripts used for invoking 
actions in PCTE have been added to the Text/ directories, and appear with .tool suffix. See 
the PCTE appendix in the Modeler’s Manual for more information on actions in the PCTE 
version of this release. 


3.2.2 Library-Manager Application Refinement 

The Library-Manager application introduced in RLF 4.0 has been refined in version 4.1 to 
replace some dynamic menus with scrollable list widgets and to desensitize button choices 
which would lead to the pop-up of an empty menu. A limit on the number of libraries the 
Library-Manager can process was also removed. All of the Library-Manager application 
files changed: 






.March 1993 


STARS-UC-05156/013/00 


code/Library -Manager/callbacks_body. a 
code/Library-Manager/callbacks-spec. a 
code/Library .Manager/globals_spec. a 
code/Library .Manager/library .manager. a 

3.3 Adaptation Data 

3.3.1 Operating Environment 

Sun-4 workstations with a minimum of 8 MB of main memory 
SunOS, Version 4.1 or later 
X Window System, Version 11, Release 4 
OSF/Motif version 1.1 

For the RLF/PCTE version include the following: 

Emeraude PCTE vl2.3 

STARS Ada/PCTE bindings version 0.3 

3.3.2 Development Environment 

Sun-4 workstations with a minimum of 8 MB of main memory 

SunOS, Version 4.1 or later 

X Window System, Version 11, Release 4 

OSF/Motif version 1.1 

Sun Ada Version 1.1 

SERC Ada/Motif, Version 1.1 for Sun Ada version 1.1 
Reusable Graphical Browser, Version 1.1 (Graphical-Browser only) 
Emeraude PCTE vl2.3 
STARS Ada/PCTE bindings version 0.3 


Page 10 





.March 1993 


STARS-UC-05156/013/00 


3.3.3 Configuration-Unique Data 

3.3.3.1 Software Dependencies. The Graphical-Browser and Library-Manager capa¬ 
bilities require the X Window System, OSF/Motif, SERC Ada/Motif, and Reusable Graphi¬ 
cal Browser (RGB) as identified in section 3.3.2. The PCTE version of RLF 4.1 also requires 
Emeraude PCTE version 12.3 and Paramax STARS Ada/PCTE bindings version 0.3. To 
obtain the Paramax STARS products, please contact Paramax as recommended in Section 
4. 


3.3.3.2 OS Dependencies. Small parts of the UNIX version of RLF are dependent 
upon the underlying operating system. Parts of the PCTE version are dependent on the 
PCTE implementation and the OS it is hosted on. In the case of RLF 4.1, this would be 
UNIX. Certain UNIX-specific files are replaced by PCTE versions. These files’ names end 
with _pcte.aand _unix.a. Some RLF files also process environment variables in possibly a 
system-dependent manner. 

In order to access some UNIX facilities, the Ada pragma INTERFACE capability is used to 
access the ‘C’ language. This capability can be dependent upon the particular development 
system being used. The details of this interface are contained in the following files: 

Common/c.interf ace.body.a 
Common/customIO_body.a 
Common/extract_file_sp_pcte.a 
Common/invoke_string_sp_pcte.a 
Common/invoke_string_sp_unix.a 
Common/pcte_invoke_string.a 
Common/system_dep_pcte.a 
Common/system_dep_unix.a 
Common/system_environment_tele_body.a 
Common/system.environment_vads_body.a 
Common/extract.file_sp_unix.a 
Common/rlfrc_scanner_io.a 
Common/unix_invoke_string.a 

Common/support.c — ‘C’ language functions. 


3.3.3.3 Defaults. The files Common/network-constants.a 

and Common/network-constants-pcte.a define defaults for certain file-naming and file-length 
conventions. It is unlikely that any modifications to these defaults will be required, however, 
the installer is advised to review the default definitions to ensure compatibility with overall 
system limits and conventions. 


Page 11 






•March 1993 STARS-UC-05156/013/00 

3.4 Interface Compatibility 

3.4.1 Previously Built RLF Libraries 

This version of the RLF should be fully compatible with RLF 4.0. Of course, libraries built 
with the UNIX version of RLF will not be readable by the PCTE RLF, and vice versa. 


3.4.2 Libraries Built with Different Compilers 

Data representations are different between Ada compilers. As a result, RLF libraries created 
by a version of the RLF built with one compiler may not be interoperable with libraries 
created by a version of the RLF built with another compiler. 


3.5 Installation and Usage Instructions 

The file InstalLRLF-src is an executable UNIX C shell script, which can be used to build 
the UNIX version of the RLF from the Ada source code, using the Sun Ada compiler. This 
script invokes subordinate scripts in the code directory, which build individual portions of 
the software in the proper order. The complete installation and verification procedures are 
located in the RLF Installation Guide. This manual also instructs the user how to build the 
sample libraries provided with this release. 

NOTE: Appendix C contains a listing of the UNIX installation scripts provided in this 
distribution. 

Upon completion of these procedures, the directory defined by the RLFBIN variable should 
contain the following newly built executables: 


Graphical.Browser 
Library.Manager 
Lmdl 
Rbdl 


3.5.1 Invoking RLF Applications 

Once the RLF executables have been built, any of the executables can be run by invoking 
it by name. Information about invoking the RLF Graphical-Browser application is located 
in the RLF User’s Manual. Additional information about RLF applications and their uses 
may be found in the RLF Modeler’s Manual and the RLF Administrator’s Manual. 


Page 12 





.March 1993 


STARS-UC-05156/013/00 


3.6 Potential Problems 

3.6.1 System Memory Limitations 

Depending on your system configuration, you may encounter Ada compilation or LMDL 
translation problems stemming from an insufficient amount of memory available to the com¬ 
piler or translator. One possible solution is to remove any artificial data space limitations 
during the build by uncommenting the limit datasize unlimited and limit stacksize unlimited 
directives in each of the Build... scripts. If this modification does not improve the situation, 
consult your system administrator. 


'3.6.2 Graphical-Browser Known Problems 

During the execution of the Graphical-Browser a few infrequent errors may occur. The errors 
listed here are attributed to bugs in Motif version 1.1. It is expected that future versions of 
Motif will eliminate these errors. 

The following is the list of known errors and their descriptions: 

1. Warning: XtRemoveGrab asked to remove a widget not on the list - This 
text message, which appears in the originating window, often occurs when a window 
in the Graphical-Browser is exited or canceled. 

2. Menu bar menu relocating to upper left hand corner of the screen - This event can 
happen when the Node History menu option, which is in the Navigate View menu bar 
option, is selected. As the pointer passes over the menu entry the cascading menu may 
be placed in the upper left hand corner of the screen. 

3. Node menu creation error - This display alert box randomly appears when a node 
is selected. If the node is selected again the error usually does not occur. Reselect the 
node and the correct menu should appear. 

3.7 Enhancements 

As this is expected to be the last full release of RLF by STARS, not many enhancements 
are planned for the future under STARS funding. For the basic RLF capabilities, future 
enhancements might include: 

1. An RLF version hosted on a broadcast message server integration back-plane. 

2. "Message Pass" type actions used to invoke other tools. 

3. Integration with other tools and increased interoperability between the different RLF 
applications. 


Page 13 






.March 1993 


STARS- U C-05156/013/00 


4 USER FEEDBACK 

This version of RLF is considered an “alpha” release. One of the primary purposes of the 
release is to encourage experimentation with the software and to solicit feedback from the 
Ada user community to assist us in improving the product and advancing software reuse. 
Thus, we would greatly appreciate your comments, suggestions, and criticisms. Although we 
do not guarantee the applicability of the RLF to particular application needs at this time, 
we are interested in hearing about successes as well as failures. 

We have included three forms in this release which we hope you will use to provide us with 
needed feedback: 


• A registration form (in file Registration-Form) that we would like you to fill out and 
return to us so that we can keep track of our user base and can notify you of product 
upgrades and other important product news. 

• A Program Problem Report (in file Problem-Report) that you should use to identify 
any specific problems you encounter in installing and using the software. 

• A New Feature Request (in file Feature-Request) that you should use to describe specific 
enhancements that you believe should be incorporated into the product. 


We have established three electronic mailing lists to facilitate RLF usage and feedback: 

• rlf@stars.ballston.paramax.com 

This list provides a public forum for discussing RLF issues. If you ask to be included 
in this list, you will receive all messages sent to the list and may respond accordingly. 

• rlf-request@stars.ballston.paramax.com 

You should send your completed registration form to this address, as well as requests 
to be added to or deleted from the rlf list (NOTE: do NOT send add or delete requests 
to the rlf list itself). 

• rlf-bugs@stars.ballston.paramax.com 

You should send completed Program Problem Reports and New Feature Requests to 
th is address. 


If you do not have electronic mail access or wish to send us printed information, please send 
mail to: 


RLF 

Paramax STARS Center 
12010 Sunrise Valley Drive 
Reston, VA 22091 


Page 14 





.March 1993 


STARS-UC-05156/013/00 


5 NOTES 

Both AdaTAU and AdaKNET were designed for independent use by applications requiring 
knowledge representation and inferencing capabilities. The specification languages provided 
for these subsystems foster their transfer to diverse application areas and their programmatic 
interfaces enable their integration into general Ada applications. Additional applications will 
help determine system shortcomings and lead to their correction. 


Page 15 





.March 1993 STARS-UC-05156/013/00 

A Appendix: Inventory of Contents 

HOTE: "*" identifies executables; "/" identifies directories 


Contents.tty 
Install.RLF.src* 

README 

VDDrlf.ps 

VDDrlf.tty 

bin/ 

code/ 

docs/ 

nan/ 

models/ 

bin: 

.rlfrc 

RLF.GB* 

code: 

Ada_Actions/ 

Adaknet/ 

Adatau/ 

Build_Ada_Libraries.csh* 

Build_Library.Manager.csh* 

Build.Lmdl.csh* 

Build.RLF.csh* 

Build_RLF.var 
Build_Rbdl.csh* 

Build_Rlf_Gb.csh* 

Build_Rlfdir.csh* 

Conmon/ 

Hybrid/ 

Library.Manager/ 

Lndl/ 

Rbdl/ 

Rlf.Gb/ 

code/Ada_Actions: 
action.routines.body.a 
action.routines.spec. a 
display_attr_action_a8cii_sp_pcte.a 
display_attr_action.ascii.sp.pcte.a.last 
display_attr_action_ascii_sp_unix.a 
display_attr_action_ascii_sp_unix.a.last 
display_attr_action_body.a 
display_attr_action.buf.sp.pcte. a 
display.attr.action_buf_sp_pcte.a.last 
display_attr_action_buf_sp_unix.a 
display_attr_action_buf_sp_unix.a.last 
display.attr.action_files_sp_pcte.a 
display.attr.action.files.sp.pcte.a.last 
display.attr.action.files.sp.unix.a 


Page 16 






.March 1993 


STARS-170-05156/013 /00 


display.attr.action.!iles.sp.unix.a.last 

display.attr.action.spec.a 

display_attributes_sp.a 

export.sp.a 

extract_action_body.a 

extract_action_spec.a 

extract.iile.sp.pcte.a 

extract.!ile_sp_pcte.a.last 

extract_file.sp.unix.a 

extract.!ile.sp.unix.a.last 

extract.sp.a 

import.sp.a 

code/Adaknet: 
action.invocation.body.a 
action.invocation.body.a.orig 
action.invocation.spec.a 
action.invocation.spec.a.orig 
action.mod.ops.sp.a 
action.operations.body.a 
action.operations.spec.a 
action.predicates.sp.a 
action.query.ops.sp.a 
actions.body.a 
actions.spec.a 
adaknet.name.types.a 
adanet.body. a 
adanet.coinposites.body. a 
adanet.composites.spec.a 
adanet.constr_destr_ops.sp.a 
adanet.mod.ops.sp.a 
adanet.predicates.sp.a 
adanet.query.ops.sp.a 
adanet.spec.a 
adanet.state.body.a 
adanet.state.spec.a 
agg.browser.body.a 
agg_browser_spec.a 
app.utils.body.a 
app.utils.spec.a 
changes.sp.a 
coaposites.body.a 
composites.spec.a 
concept_mod.ops.sp.a 
concept.predicates.sp.a 
concept.query.ops.sp.a 
examine.netvork.body.a 
examine.network.spec.a 
generic.concepts.body.a 
generic.concepts.spec.a 
individnal.concepts.body.a 
individnal.concepts.spec.a 
invoke.ada.proc.sp.a 
invoke.string_sp.pcte.a 


Page 17 





.March 1993 


STARS-UC-05156/013/00 


invoke.string.sp.pcte.a.last 
invoke.string.sp.unix.a 
invoke.string.sp.unix.a.last 
invoke.sys.string.sp.a 
invoke.sys.string.sp.a.last 
invoke_sys_string_sp.a.orig 
isa.brovs er_body.a 
isa.brouser.spec.a 
aisc.ops.sp.a 
netsork.composites.body.a 
netuork.composites.spec.a 
networks.body.a 
netuorks.spec.a 
ranges.body.a 
ranges.spec.a 
restrictions.sp.a 
role.mod.ops.sp.a 
role.predicates.sp.a 
role.query.ops.sp.a 
roles_body.a 
roles.spec.a 
roleset_mod_ops_sp.a 
rolesot_predicates_sp.a 
roleset_query_ops_sp.a 
roleset_spoc_ops_sp.a 
rol«s*ts_body.a 
rolesets_spec.a 
schema_body.a 
schema.spec.a 
set_conversions_sp.a 
sndl_dump_body.a 
sndl_dump_spec.a 
states_sp.a 
subroles_sp.a 

code/Adatau: 
agendas.body.a 
agendas.spec.a 

basic_config.lunctions.body.a 
basic.conlig.lunctions.spec.a 
debug_body.a 
debug.spec.a 
dist.rbdl.test.a 
du*p_rbdl_body.a 
dunp.rbdl.spec.a 
lact.base.schemas.body.a 
lact_base_schfc.ias.spec.a 
fact.bases.body.a 
lact.bases.spec.a 
lact.depend.lunctions.body.a 
lact.depend.lunctions.spec a 
lact.depend.spec.a 
lact.lists.body.a 
lact.lists.spec.a 


Page 18 






.March 1993 


STARS-UC-05156/013/00 


fact.parameter.body.a 
fact.parameter_list_body.a 
fact.parameter_list_spec.a 
fact.parameter.spec.a 
fact.schemas.body.a 
fact.schemas.spec.a 
fact.value_lists.body.a 
fact.value_lists.spec.a 
facts.body.a 
facts.spec.a 
frules.body.a 
frules.spec.a 
irule.bases.spec.a 
irules.body.a 
irules.spec.a 
label.table.body.a 
label.table.spec.a 
lib.static.persistence.body.a 
lib.static.persistence.spec.a 
librarian.configuration.a 
message.DTAU.components.body.a 
message.DTAU.components.spec.a 
message.DTAU.main.a 
message.TAU.components.body.a 
message.TAU.components.spec.a 
message.adv.config.body.a 
message.adv.config.spec.a 
message.coniig.body.a 
message.config.spec.a 
message.get.response.sp.a 
message_get.response.sp.a.last 
non.monotonic.snpport.body.a 
non.monotonic.support.spec.a 
persistence.body.a 
persistence.spec.a 
q.agendas.spec.a 
qrnle.bases.spec.a 
qrules.body.a 
qrules.spec.a 
question.bases.spec.a 
questions.body.a 
questions.spec.a 
response.schemas.body.a 
response.schemas.spec.a 
rule.bases.body.a 
rule.bases.spec.a 
static.persistence.body.a 
static.persistence.spec.a 
truth.maintenance.body.a 
truth.maintenance.spec. a 

code/Common: 
c.interface.body.a 
c.interface.spec. a 


Page 19 






March 1993 


STARS-UC-05156/013/00 


commonlO.body.a 

commonlO.spec.a 

custoaIO_body.a 

customIO_spec.a 

f ilenames.body .a 

filenames.spec.a 

fixed.strings.body.a 

fixed.strings.spec.a 

fstring_body.a 

fstring.spec.a 

generic_hash_body.a 

generic_hash_spec.a 

generic.sequences.body.a 

generic.sequences.spec.a 

hashmap.body.a 

hashmap.spec.a 

hybrid_tables_body.a 

hybrid_tables_spec.a 

interrupts.c* 

labels.body.a 

labels.spec.a 

lists.body.a 

lists.spec.a 

message.io.body.a 

message.io.spec.a 

mono.lock_manager.body.a 

mono.lock_manager.spec.a 

network.constants.a 

net8ork.constants.pcte.a 

objects.spec.a 

pcte.invoke.string.a 

pcte.invoke.string.a.last 

pcte.obj ect.create.a 

pcte.object.create.a.last 

rlf.constants.pcte.a 

rlf.constants.pcte.a.last 

rlf_constant8_unix.a 

rlf.constants.unix.c.last 

rlf.direct.io.a 

rlf.direct.io.a.last 

rlf_direct.io.pcte..a 

rlf_direct.io.pcte..a.last 

rlf_direct.io.unix..a 

rlf_direct.io.unix..a.last 

rlf.globals.body.a 

rlf.globals.spec.a 

rlf.pcte.body.a 

rlf.pcte.body.a.last 

rlf.pcte.spec.a 

rlf_pcte_spec.a.last 

rlf.sequential.io.a 

rlf.sequential.io.a.last 

rlf_sequential.io.pcte..a 

rlf_sequential.io.pcte..a.last 


Page 20 






• March 1993 


STARS-UC-05156/013/00 


rlf.sequential.io.unix..a 

rlf.sequential.io.unix..a.last 

rlf_text.io.pcte.a 

rlf_text.io.pcte.a.last 

rlf_text_io_pcte_.a 

rlf_text_io_pcte_.a.last 

rlf_text.io.unix.a 

rlf_text.io.unix.a.last 

rlf_text_io_unix_.a 

rlf_text.io.unix..a.last 

rlf.univ.types.a 

rlfrc.parser.a 

rlfrc.parser.goto.a 

rlfrc.parser.shift.reduce.a 

rlfrc.parser.spec.a 

rlfrc_parser_support_body.a 

rlfrc.parser.support.spec.a 

rlfrc_parser.tokens.a 

rlfrc.scanner.a 

rlfrc.s canner.df a.a 

rlfrc_scanner_io.a 

sets_body.a 

sets_spec.a 

sorting_body.a 

sorting.spec.a 

stacks_body.a 

stacks_spec.a 

strings.body.a 

strings_spec.a 

support. c* 

system.dep.pcte.a 

system_dep_spec.a 

system_dep_unix.a 

system.environment.spec.a 

system.environment_tele_body.a 

system.environment.vads.body.a 

tables.body.a 

tables.spec.a 

tau.lists.body.a 

tau.lists.spec.a 

unique.identifiers.body.a 

unique.identifiers.spec.a 

unix.invoke.string.a 

unix.invoke.string.a.last 

code/Hybrid: 
fbase.ops.body.a 
fbase.ops.spec.a 
inf_hybrid.states.body.a 
inf_hybrid.states.spec. a 
inf_state.ops.body.a 
inf_state.ops.spec. a 
integer.hybrid.states.body.a 
integer_hybrid.states.spec.a 


Page 21 






• March 1993 


STARS-UC-05156/013/00 


int6ger_state_ops_body.a 
integer.state.ops.spec.a 
library.hybrid.netsorks.a 
library_hybrid_state_ops_body.a 
library_hybrid.state_ops.spec.a 
library.hybrid.states.body.a 
library_hybrid.states.spec.a 
text.hybrid.states.body.a 
text.hybrid.states.spec.a 
text.state_file_ops.body.a 
text.state_file_ops.spec.a 
text.state.ops.body.a 
text_8tate_ops_spec.a 

code/Library.Manager: 
callbacks.body.a 
callbacks.spec.a 
globals.spec.a 
library.manager.a 

code/Lmdl: 
adaknet.ops.body.a 
adaknet.ops.spec.a 
backend.body.a 
backend.interface.a 
backend.spec.a 
globals.body.a 
globals.spec.a 
hybrid_ops_body.a 
hybrid.ops.spec.a 
lexacts.body.a 
lexacts.spec.a 
lmdl.attribnted.tree.body.a 
lmdl.attribnted.tree.spec. a 
lmdl.dgts.body.a 
lmdl.dgts.spec.a 
lmdl.display.a 
lmdl.evaluator.body.a 
lmdl.evaluator.spec.a 
lmdl.gets.a 
lmdl.lex.pkg.a 
lmdl.lexdef.a 
lmdl.makes.a 
ladl.parser.a 
lmdl.parserdefs.a 
lmdl.pnts.a 

lmdl.system.types.spec.a 
operations.list.def.body.a 
operations.list.def.spec.a 
std.boot.a 
std.lex.spec.a 
std.magic.body.a 
std.magic.spec.a 
std.outpnt.spec.a 


Page 22 








-March 1993 


STARS-UC-05156/013/00 


std.parser.spec.a 
std.predefined.tree.a 
std.rsport.body.a 
std_rsport_spec.a 
std_user_pkg.a 
std.yyval.error.body.a 
std.yyval.error.spec.a 
support.body.a 
support.spec.a 
topsort_body.a 
topsort_spec.a 
user.types.body.a 
user.types.spec.a 

code/Rbdl: 

backend.interface.a 

bel.a 

bel.spec.a 

besl_support_body.a 

besl_support_spec.a 

besl.vl_string_handler.body.a 

besl_vl_string_handler_spec.a 

create.inferencer.support.body.a 

create.inferencer.snpport.spec.a 

globals.body.a 

globals.spec.a 

lexacts.body.a 

lexacts.spec.a 

nonstd.boot.a 

nonstd.lex.spec,a 

nonstd.magic.spec.a 

quest ion_h.ash_types.body. a 

question.hash.types.spec.a 

question.hashes.a 

rbdl.attribut ed.tre e.body.a 

rbdl.attributed.tree.spec. a 

rbdl.dgt8.body.a 

rbdl.dgts.spec.a 

rbdl.display. a 

rbdl.evaluator.body.a 

rbdi.evaluator.spec.a 

rbdl_gets.a 

rbdl.lex.pkg.a 

rbdl.lexdef.a 

rbdl.makes.a 

rbdl.parser.a 

rbdl.parserdef8.a 

rbdl.puts.a 

rbdl.system.types.spec.a 
rbdl.treedump.body.a 
rbdl.treedump.spec.a 
report.body.a 
report.spec.a 
std.magie.body.a 


Page 23 






March 1993 


STARS-UC-05156/013/00 


std_output_spec.a 
std_parser_spec.a 
std_predelined_tree.a 
std_user_pkg.a 
std_yyvaI_error_body.a 
std_yyval_error_spec.a 
support_body.a 
support_spec.a 
user_types_body.a 
user_types_spec.a 

code/Rll_Gb: 
gb_agg_brouser_body.a 
gb_agg_browser_spec.a 
gb_callbacks_body.a 
gb_callbacks_spec.a 
gb_ cb_suppress_body.a 
gb_cb_suppress_gen.a 
gb_cb_suppress_gen2.a 
gb_cb_suppress_spec.a 
gb_dyn_node_menus_body.a 
gb_dyn_node_menus_spec. a 
gb_dynamic_menus_body.a 
gb_dynamic_aenus_spec.a 
gb_globals.a 
gb.hash.a 
gb_history.a 
gb_i.nl er. a 
gb_inler_dtau_body.a 
gb_inler_dtau_spec.a 
gb_instance.a 
gb_main.a 
gb_nake_vieu.a 
gb_params_body.a 
gb_params_ spec.a 
gb_8tatic_cmda_body.a 
gb_static_cmds_spec.a 
gb_static_menu8_body.a 
gb_static_menus_spec.a 
gb_utils_body.a 
gb_utils_spec.a 

docs: 

manuals/ 

tutorials/ 

docs/manuals: 

AdministratorsManual.ps 
AdministratorsManual.tty 
InstallationGuide_Binary.ps 
InstallationGuide.Binary.tty 
InstallationGuide_Source.ps 
InstallationGuide.Source.tty 
ModelersManual.ps 


Page 24 






.March 1993 


STARS-UC-05156/013/00 


ModelersManual.tty 
UsersManual.ps 
UsersManual.tty 


docs/tutorials: 

RLF_UM 
admin-art.ps 
admin-training.tex 
model-art.ps 
model-training.tex 
user-art.ps 
user-training.tex 

man: 
catl/ 
manl/ 
whatis 

man/catl: 

Graphical_Browser.1 

Library.Manager.1 

Lmdl.l 

RLF.l 

RLF_GB.1 

Rbdl.l 

rlf .1 

man/manl: 

Graphical_Browser.1 

Library.Manager.1 

Lmdl.l 

RLF.l 

RLF.GB.1 

Rbdl.l 

rlf .1 

models: 
ada_x/ 
animals/ 
asw/ 

common_data_model/ 

demo.actions/ 

library_model_template.lmdl 
library_model_template_pcte.lmdl 
software.technology/ 
sort_and_search/ 
window.manager/ 

models/ada_x: 

Build.Ada_X_Lib.csh* 

Build.Ada.X.Lib.esh* 
ada.x.lmdl* 
ada.x.pcte.lmdl* 


Pc'ge 25 







.March 1993 


STARS-UC-05156/013/00 


ada.xt.widget.package.rbdl* 
ada.xt.widget.pkg.rbdl* 
application.shell.widget.package.rbdl* 
application.shell.widget_pkg.rbdl* 
ascii.disk.rbdl* 
ascii.disk.widget.package.rbdl* 
ascii.disk_widget_pkg.rbdl* 
ascii.string.rbdl* 
ascii_string_widget.package.rbdl* 
ascii_string_widget_pkg.rbdl* 
bboard.rbdl* 

bboard.widget.package.rbdl* 
bboard.widget.pkg.rbdl* 
command.rbdl* 

command.widget.package.rbdl* 
command.widget.pkg.rbdl* 
composite.object.widget.package.rbdl* 
composite.object.widget_pkg.rbdl* 
composite.widget.package.rbdl* 
composite.widget.pkg.rbdl* 
constraint.widget.package.rbdl* 
constraint.widget_pkg.rbdl* 
core.rbdl* 

core.widget.package.rbdl* 
core.widget.pkg.rbdl* 
dialog.rbdl* 

dialog.widget.package.rbdl* 
dialog_widget_pkg.rbdl* 
form.rbdl* 

form.widget.package.rbdl* 
form_widget_pkg.rbdl* 
label.rbdl* 

label.widget.package.rbdl* 
label.widget.pkg.rbdl* 
manager.rbdl* 

manager.widget.package.rbdl* 
manager.widget_pkg.rbdl* 
obj ect.widget.package.rbdl* 
obj ect.widget.pkg.rbdl* 
override.shell.widget.package.rbdl* 
override.shell.widget.pkg.rbdl* 
rect.obj ect.widget.package.rbdl* 
rect.obj ect.widget.pkg.rbdl* 
scroll.rbdl* 

scroll.widget.package.rbdl* 
scroll.widget.pkg.rbdl* 
shell.widget.package.rbdl* 
shell.widget.pkg.rbdl* 
simple.rbdl* 

simple.widget.package.rbdl* 
siaple.widget.pkg.rbdl* 
text.rbdl* 

text.widget.package.rbdl* 
text.widget_pkg.rbdl* 


Page 26 



•March 1993 


STARS-UC-05156/013/00 


top.level.shell.widget.package.rbdl* 
top.level_shell_widget.pkg.rbdl* 
transient.shell.widget.package.rbdl* 
transient.shell_widget_pkg.rbdl* 
vendor.shell.widget.package.rbdl* 
vendor.shell.widget.pkg.rbdl* 
viewport.rbdl* 

viewport_widget_package.rbdl* 
viewport_widget_pkg.rbdl* 
widget.rbdl* 

window.obj ect_widget_package.rbdl* 
window.object_widget_pkg.rbdl* 
wm.shell.widget.package.rbdl* 
wm.shell.widget_pkg.rbdl* 

models/animals: 

Build.Animals.Lib.csh* 
Build.Animzds.Lib.esh* 

Text/ 

animals.lmdl* 
animals.pcte.lmdl* 

models/animals/Text: 

del* 

dick* 

snoopy* 

teri* 

tim* 

xterm.pager.tool* 

models/asw: 

Build.Asw.Lib.csh* 

Build.Asw.Lib.esh* 

Text/ 

asw.lmdl* 

asw.pcte.lmdl* 

models/asw/Text: 

AGP.CommandsSada* 

AGP.InputBada* 

AGP.InputSada* 

AGP.Memory.ManagerSada* 

AGP.OutputBada* 

AGP.OutputSada* 

coniirm.panel.package* 

dialog_public_a* 

dialog.publica* 

dialog_publica2* 

lorm_public_a* 

lorm.publica* 

viewport.public.a* 

viewport .publics* 

xterm.int.tool* 

xterm.less.tool* 


Page 27 







-March 1993 


STA RS- UC-05156/013/00 


models/common_data_model: 
Build_Common_Data_Model_Lib.csh* 
Build_Common_Data_Model_Lib.esh* 
Text/ 

conuaon_data_model.lmdl* 
common_data_model_pcte.lmdl* 

models/common_data_model/Text: 

astronomical_constants_s.a* 

desc_astronomical_constants_s* 

desc_math_interface_sb* 

desc_overpass* 

desc_sat_comp_sb* 

desc_sat_io_b* 

desc_sat_io_s* 

desc_units_s* 

math_int erfac e_sb.a* 

overpass.a* 

restr_as_is_uarranty* 

sat_comp_sb.a* 

sat_io_b.a* 

sat_io_s.a* 

units_s.a* 

models/demo_actions: 
Build_Demo_Actions_Lib.csh* 
Build_Demo_Actions_Lib.esh* 

Text/ 

demo_actions.lmdl* 
demo_actions_pcte.lmdl* 

aodels/demo.actions/Text: 
building* 
general.!loorplan* 
imprint.tool* 

Ipr.tool* 

message* 

my_floorplan* 

play.tool* 

sounds/ 

xbm/ 

xloadimage.tool* 
xterm.less.tool* 
xterm_vi.tool* 

models/demo.actions/Text/sounds: 

clint.eastwood.au* 

completely_op.au* 

goodcoffee.au* 

kirk.spock.boundary.au* 

klaxton.au* 

mccoy_all.au* 

phasars_3.au* 


Page 28 




March 1993 


STARS-UC-05156/013/00 


photons_3.au* 

models/demo_actions/Text/xbm: 

Jerry.Bob.xbm* 

eye.xbm* 

fist.xbm* 

full_o»l.xbm* 

launch.xbm* 

lips.xbm* 

mandelbrot.xbm* 

mandelbrot.seahorses.xbm* 

nebula.xbm* 

owl_head.xbm* 

planet.miranda.xbm* 

small_galaxy.xbm* 

spock.xbm* 

models/softsare.technology: 
Build_SW_Tech_Lib.csh* 
Build_SW_Tech_Lib.esh* 
SW_Tech_Model_Des cription.txt* 
Text/ 

sv.tech.lmdl* 
s«_tech_pcte.lmdl* 

■odels/software_technology/Text: 

bob_pollack* 

darpa_isto* 

jack_chapman* 

karen_roth* 

payton_ssags_paper* 

pollack_and_loftus* 

pollack_mfpl_paper* 

pollack_tree_transf ormation_paper* 

ql3_tool8_clc.a* 

ql3_tool8_clc.abs* 

ql3_tools_clc.con* 

ql3_tools_clc_build.csh* 

ql3_toola_clc_test.a* 

q9-c300.aba* 

q9-c300.con* 

q9-c300.doc* 

q9-c300.ref* 

q9-c300.tem* 

q9-c340.abs* 

q9-c340.con* 

q9-c340.doc* 

q9-c340.ref* 

q9-c340.tem* 

q9-c3S0.abs* 

q9-c3B0.con* 

q9-c350.doc* 

q9 -c360.ref* 

q9-c350.tem* 


Page 29 




March 1993 


STA RS- V C-05156/013/00 


q9-c360.abs* 

q9-c360.con* 

q9-c360.doc* 

q9-c360.ref* 

q9-c360.tem* 

software.a.and.e* 

softsare.technology.inc* 

ssags.abs* 

ssags.con* 

ssags.tern* 

vfl.history* 

models/sort.and.search : 
Build_SaS_Lib.esh* 
Build_Sort_And_Search_Lib.csh* 
Text/ 

algorithms.rbdl* 
binary_ins.rbdl* 
diminishing.inc.rbdl* 
exchange.sorts.rbdl* 
heapsort.rbdl* 
insertion.sorts.rbdl* 
intemal.sorts .rbdl* 
quicksort.rbdl* 
selection.sorts.rbdl* 
shakersort.rbdl* 
shellsort.rbdl* 
sort.algorithms.rbdl* 
sort_and.search.lmdl* 
sort.and_search.pcte.lmdl* 
straight.ins.rbdl* 
straight.sel.rbdl* 

models/sort.and.search/Text: 
exchange.sort.desc* 
heap.spec..a* 
insertion.sort.desc* 
quick_sort_.a* 
selection.sort.desc* 
shaker.sort..a* 
xterm.less.tool* 
xterm.less.int.tool* 

models/windos.manager: 

Build.Vindov.Manager.Lib.csh* 
Build.Vindov.Hanager.Lib.esh* 
Text/ 

move.domain.lmdl* 
move.domain.rbdl* 
move.domain.pcte.lmdl* 
option.move.resize.rbdl* 
sunviev.move.rbdl* 
xlO.move.rbdl* 


Page 30 



.March 1993 


models/sindow_aanager/Text 
abort_move.att* 
constrained_aove.att* 
expose_alterjnove.att* 
aove_doaain_concept.help* 
aove_icon.att* 
partially_of t .screen, att* 
tiled_layout.descr* 
xtera_less_12.tool* 
xtera_less_40.tool* 








-March 1993 STARS-UC-05156/013/Of 1 

B Appendix: RLF Start-up Files 
B.l Sample RLF .rlfrc Start-up File 
B.1.1 File: .rlfrc 


1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 

44 


— I Sample startup file for the Reuse Library Framework version 4.1 

--I 

--I 

— I Library directory or name specifications 

— I 

—library directory : /path/Libraries 
—library : "Sort and Search Algorithms" 


— I Parameters for the RLF Graphical Browser 

--I 

topology : off 

cardinality : off 

layout offset : x : 20 

layout offset : y : 5 

history length : 50 

view type : specialization 

view depth : relationship : 2 


— I AdaTau inferencing settings 

--I 

advice : explanations : all 
advice : automatic move : false 

--I 

— I Bitmaps for nodes 

--I 

—node bitmap : category : /path/box_m.xbm 

—node bitmap : category : inferencer : /path/box_I_m.xbm 

—node bitmap : category : actions : /path/box_A_m.xbm 

—node bitmap : category : inferencer actions : /path/box_AI_m.xbm 

—node bitmap : object : /path/cube.m.xbm 

—node bitmap : object : inferencer : /path/cube_I_m.xbm 

—node bitmap : object : actions : /path/cube_A_m.xbm 

—node bitmap : object : inferencer actions : /path/cube.Al.m.xbm 

--I 

— I Specification translator settings 

--I 

translator: Lmdl: quiet: no 
translator: Rbdl: quiet: no 


Page 32 






-March 1993 


STARS-UC-05156/013/00 


B.2 RLF Graphical Browser Start-up Script 
B.2.1 Script: RLF.GB 

1 #!/bin/csh -f 

2 # 

3 #- 

4 # RLF_GB - Startup script for the RLF Graphical Browser, v.4.i 

5 # 

6 #1.) Check that an X environment is present and running. 

7 # 

8 #2.) Ensure the environment variables (RLF_LIBRARIES, DISPLAY, and possibly 

9 # XAPPLRESDIR) are properly set. 

10 # 

11 #3.) Invoke the Graphical Browser with all command line arguments specif!? . 

12 # by the user. 

13 # 

14 # If either an environment variable is not set or incorrectly set or X is not 

15 # running, then abort the script and notify the user of the problem. 

16 # 

17 #- 

18 

19 echo 

21 echo " RLF v.4.1 Graphical Browser Startup Script " 

22 echo " ============================================•• 

23 echo *••• 

24 

25 #- 

26 # Determine if the DISPLAY environment variable is set; 

27 # if it is set, then proceed; 

28 # if it is not set, attempt to set it to a meaningful value. 

29 #- 

30 if ( ! $?DISPLAY ) then 

31 set host_name = 'hostname' 

32 setenv DISPLAY ${host_name}:0 

33 endif 

34 

35 

36 echo "" 

37 echo " Ensure the DISPLAY environment variable is" 

38 echo " set correctly; the correct format is <host_name>:0," 

39 echo " where the host.name indicates what CPU your X server " 

40 echo " is running on." 

41 echo "" 

42 echo "Currently, DISPLAY = " 

43 echo " IDISPLAY" 

44 echo "" 

45 set local.host = 'echo ^DISPLAY I sed ’s/:.*$//" 

46 echo "This means the graphical output will be sent to host: " 

47 echo " $local_host" 

48 echo "" 

49 

50 #- 


Page 33 


















•March 1993 


STARS-UC-05156/013/00 


51 

52 

53 

54 

55 

56 

57 

58 

59 

60 
61 
62 

63 

64 

65 

66 

67 

68 

69 

70 

71 

72 

73 

74 

75 

76 

77 

78 

79 

80 
81 
82 

83 

84 

85 

86 

87 

88 

89 

90 

91 

92 

93 

94 

95 

96 

97 

98 

99 

100 
101 
102 

103 

104 


# Query the X resource database to determine whether (DISPLAY is valid. 

«- 

xrdb -query >* /dev/null 

* - 

# The DISPLAY environment variable was set incorrectly 

# if the status is not 0. Notify the user. 

# - 

if ( ! (status == 0 ) then 

unsetenv DISPLAY 
echo "" 

echo " There’s a problem with your X server." 

echo " There’s probably no X server running on host ‘hostname'." 
echo " Determine where your X server is running," 
echo " then issue the following command: " 
echo "" 

echo " setenv DISPLAY <hostname>:0 " 

echo "" 

echo " where <hostname> is the host where your " 
echo " X server is running." 
echo "" 
endif 

#- 

# If RLF_LIBRARIES environment variable not already set, or 

# incorrectly set exit the script and notify the user. 

# - 

if ( ! (?RLF.LIBRARIES ) then 

* 

# Check the command line options to see if the user 

# specified a library 

# 

if ( (#argv >= 2 ) then 
0 index * 1 

while ((#argv >= (index +1) 

C index2 = (index + 1 

if ( (argv[(index] == "-I" ) then 

if ( ( -d (argvC(index2]/Text ) kk \ 

( -d (argv[(index2]/Taustuff ) ) then 

echo "Library directory to be used is (argv[(index2] M 
echo "" 

goto Library.Found 

else 

echo "" 

echo "FATAL ERROR:" 

echo " The RLF library ((argv[(index2]) you" 

echo " indicated from the command line is invalid." 

echo " You must set it to a proper RLF library location." 

echo "" 


Page 34 












.March 1993 


STA RS-UC-05156/013 /OO 


105 

106 exit(-l) 

107 

108 endif 

109 endii 

110 

111 € index++ 

112 

113 end 

114 

115 endif 

116 

117 echo "" 

118 echo "FATAL ERROR:" 

119 echo " RLF_LIBRARIES is currently unset." 

120 echo " You must set it to the proper location" 

121 echo " or specify a library directory with " 

122 echo " a command line option." 

123 echo "" 

124 

125 exit(-l) 

126 

127 else if ( ( ! -d $RLF_LIBRARIES/Text) II ( ! -d $RLF_LIBRARIES/Taustuff) ) then 

128 

129 echo "" 

130 echo "FATAL ERROR:" 

131 echo " RLF.LIBRARIES is incorrectly set." 

132 echo " There are missing elements in the libraries." 

133 echo " You must set it to the proper location." 

134 echo "» 

135 

136 exit(-l) 

137 

138 endif 

139 

140 echo "Currently, RLF.LIBRARIES = " 

141 echo " $RLF.LIBRARIES" 

142 echo 

143 

144 Library_Found: 

145 

146 #- 

147 # Set other X Window System environment variables (besides DISPLAY). 

148 # 

149 # Make a couple of guesses as to where the RLF.Browser file resides. 

150 # If the RLF.Browser is not found, then alert the user. 

151 #-- 

152 if ( ! $?XAPPLRESDIR ) then 

153 

154 lo.Browser.File: 

155 

156 if ( -e RLF.Browser ) then 

157 

158 setenv XAPPLRESDIR '/bin/pwd' 


Page 35 








•March 1993 


STARS-UC-05156/013/00 


159 

160 
161 
162 

163 

164 

165 

166 

167 

168 

169 

170 

171 

172 

173 

174 

175 

176 

177 

178 

179 

180 
181 
182 

183 

184 

185 

186 

187 

188 

189 

190 

191 

192 

193 

194 

195 

196 

197 

198 

199 

200 
201 
202 

203 

204 

205 

206 

207 

208 

209 

210 
211 
212 


else 

if ( ! -e /usr/lib/Xll/app-defaults/RLF_Browser ) then 
echo "" 

echo "VARSISG: " 

echo " Environment variable XAPPLRESDIR is undefined." 

echo " You need to find the pathname to the RLF_Browser file." 

echo " Then issue the following command:" 

echo " setenv XAPPLRESDIR <pathname>" 

echo "" 

echo "" 

else 

echo "" 

echo "You will be using the following RLF.Browser resource file" 
echo " /usr/lib/Xll/app-defaults/RLF_Browser" 
echo "" 

setenv XAPPLRESDIR /usr/lib/Xll/app-defaults 
endif 
endif 


else 

if ( ! -e $XAPPLRESDIR/RLF_Browser ) then 
goto Io_Browser_File 
endif 
endif 


# Check if a "bitmaps” directory resides beneath $XAPPLRESDIR. 


if ( $?XAPPLRESDIR ) then 
echo "" 

echo "Currently, XAPPLRESDIR = " 
echo " ^XAPPLRESDIR" 
echo "" 

if ( ! -d IXAPPLRESDIR/bitmaps ) then 
echo "" 

echo "HARIIIG: " 

echo " Bitmaps directory not found:" 

echo " $XAPPLRESDIR/bitmaps was not found."" 

echo "" 

echo " The RLF Graphical Browser will not be able to display" 

echo " its bitmaps for the graph nodes. This may make the" 

echo " graph display less aesthetically pleasing." 
echo "" 

echo " The 'bitmaps’ directory should exist as a subdirectory" 


Page 36 









STARS-UC-05156/013/00 


•March 1993 


213 echo " from the location of the *RLF_Browser’ file." 

214 echo " (This is a Motif limitation.)" 

215 echo "" 

216 endif 

217 endif 

218 

219 #- 

220 # If the user has not already defined the environment variables 

221 # RLF.PAGER and RLF.EDITOR, the script will default the to be 

222 # "more" and "vi", respectively. 

223 #- 

224 if ( ! $?RLF_PAGER ) then 

225 setenv RLF_PAGER more 

226 endif 

227 

228 if ( ! $?RLF_EDITOR ) then 

229 setenv RLF_EDITOR vi 

230 endif 

231 

232 echo "" 

233 echo "RLF_PAGER = $RLF_PAGER" 

234 echo "RLF_EDITOR = $RLF_EDITOR" 

235 if ( • $?RLF_MORKIIG_DIR ) then 

236 echo "" 

237 echo "RLF_WORKIIG_DIR undefined, so default to current working directory." 

238 echo "" 

239 setenv RLF_WORKIIG_DIR ‘pwd' 

240 endif 

241 echo "RLF_WORKIIG_DIR = $RLF_M0RKIIG_DIR" 

242 echo "" 

243 

244 #- 

245 # Invoke the RLF Graphical.Browser with any command line arguments 

246 # entered by the user. 

247 *- 

248 echo H " 

249 echo "Starting the RLF Graphical Browser..." 

250 echo "" 

251 Graphical.Browser $argv 


Page 37 










March 1993 STARS-UC-05156/013/00 


C Appendix: Installation Scripts 
C.l SunAda Support File 
C.1.1 File: Build_RLF.var 

1 # - 

2 * 

3 # Build_RLF.var - RLF software installation configuration file. 

4 * 

5 #- 

6 

7 setenv COMPILERHAME SunAda 

8 

9 # 

10 # Directory for installation of the RLF Graphical Browser resource file 

11 # and the bitmaps sub-direcory. 

12 # Mote: You usually need root privilege to write in this directory, 

13 # Installation of the resource file and the bitmaps sub-directory will fail 

14 # if write permission is denied. 

15 # 

16 setenv APPDEFAULTS /afs/stars.reston.unisys.com/work/rlf/app-defaults 

17 

18 # 

19 # Uncomment and edit these lines if you do not want to 

20 # be prompted for the environment variables 

21 * 

22 

23 setenv RLFHOME /afs/stars.reston.Unisys.com/test/rlf/4.1 

24 

25 setenv COMPILERPATH /compiler/sunada.l.1 

26 

27 setenv RGB /afs/reston/test/rgb/1.l/Build_Sun4/SunAdal.1/rgb 

28 

29 setenv ADAMOTIFHOME /testbed_4/sercxlla 

30 

31 setenv BUILD_SAMPLE_LIB Y 

32 

33 setenv LIBZ /usr/lib/libXll.a 

34 setenv CC /bin/cc 

35 

36 * 

37 # Uncomment and edit these lines for building on PCTE 

38 # 

39 

40 setenv LIBEMER /testbed/emer/bin/lib/libemer.a 

41 setenv PCTE_ADA /afs/reston/test/for_PCTE/adapcte/0.3/Build_Sun4/SunAdal.l 

42 

43 setenv PCTE.UTIL $PCTE_ADA/util.o 

44 if ( ! $?PCTE ) setenv PCTE I 

45 

46 # 

47 # If you really don’t want to build the browser, set to I. 


Page 38 









•March 1993 


STA RS-UC-05156/013/00 


48 # 

49 setenv BUILD.RLFGB Y 

50 

51 # 

52 It Uncomment (but do not edit) these lines. 

53 # 

54 setenv RLFBIM $RLFHOME/bin 

65 

56 if ( $PCTE == Y ) then 

57 setenv RLFBIMDEST $RLFHOME/pcte/bin 

58 if ( ! -d $RLFHOME/pcte ) mkdir $RLFHOME/pcte 

59 if ( ! -d $RLFHOME/pcte ) mkdir $RLFHOME/pcte/bin 

60 else 

61 setenv RLFBIMDEST $RLFHOME/unix/bin 

62 if ( ! -d $RLFHOME/unix ) mkdir $RLFH0ME/unix 

63 if ( ! -d $RLFHOME/unix/bin ) mkdir $RLFHOME/unix/bin 

64 endif 

65 

66 setenv RLFCODE $RLFHOME/src_rel/code 

67 

68 if ( $PCTE == Y ) then 

69 setenv TARGET $RLFHOME/pcte/build_aunadal.1 

70 if ( ! -d $RLFHOME/pcte ) mkdir $RLFHOME/pcte 

71 else 

72 setenv TARGET $RLFHOME/unix/build_sunadal.1 

73 if ( ! -d $RLFHOME/unix ) mkdir $RLFHOME/unix 

74 endif 

75 setenv RLF_LIBRARIES $RLFHOME/unix/Libraries 

76 

77 

78 #- 

79 # EID OF REQUIRED EDITIRG FOR BATCH MODE 

80 #- 

81 

82 * 

83 # Define the location of RLFHOME 

84 * 

85 setRLFHOME: 

86 if ( $?RLFHOME == O ) then # if MOT set 

87 echo M " 

88 echo "Specify path to top-level RLFHOME directory " 

89 echo "-" 

90 echo " Examples: " 

91 echo " /mybase/RLF " 

92 echo " /afs/myhome/see/rlf " 

93 echo " /usr/tools/rlf " 

94 echo " etc. " 

95 echo ,,,, 

96 echo "" 

97 echo -n " RLFHOME = " 

98 set noglob 

99 setenv RLFHOME $< 

100 echo "" 

101 endif 


Page 39 









•March 1993 


STARS-UC-05156/013/00 


102 

103 if ( IRLFHOME == "" ) then 


104 

nnsetenv RLFHOME 


105 

goto setRLFHOME 


106 

endif 


107 



108 

if ( ! -e $RLFHOME ) then 

109 

echo "" 


110 

echo "T*** SRLFHOME does not exist ***" 

111 

echo "*** Please try 

■ again. ***" 

112 

echo "" 


113 

unsetenv RLFHOME 


114 

goto setRLFHOME 


115 

else 


116 

if ( $?RLFBII == 0 ) 

setenv RLFBII $RLFHOME/bin 

117 

if ( $?RLFC0DE == 0 

) setenv RLFCODE $RLFH0ME/code 

118 

endif 


119 



120 

echo "" 


121 

echo " RLFHOME 

= $RLFHOME" 

122 

echo " RLFBII 

= $RLFBII" 

123 

echo " RLFBIIDEST 

= $RLFBIIDEST" 

124 

echo " RLFCODE 

= $RLFCODE" 

125 

echo "" 


126 



127 

* 


128 

# Establish a path to 

the compilation system. 

129 

* 



130 setCOMPILERPATH: 

131 

132 if ( $?COMPILERPATH == 0 ) then 

133 echo "" 

134 echo "Specify path to the SunAda compiler " 

135 echo "-" 

136 echo " Examples: " 

137 echo " /compilers/sunada_l.1" 

138 echo " /usr/bin/sunada" 

139 echo " etc." 

140 echo "" 

141 echo -n " COMPILERPATH = " 

142 setenv COMPILERPATH $< 

143 echo "" 

144 endif 

145 if ( ( SCOMPILERPATH == ) I I ( ! -e $COHPILERPATH/bin/ada )) then 

146 echo "" 

147 echo "*** Cannot find Ada compiler in $COMPILERPATH/bin ***" 

148 echo "*** Please try again. ***" 

149 nnsetenv COMPILERPATH 

150 goto setCOMPILERPATH 

151 else 

152 setenv COMPILERBIV $COMPILERPATH/bin 

153 setenv COMPILE "$COMPILERBII/ada -v " 

154 setenv LIIK "$COMPILERBII/a.ld -v " 

155 setenv LIVK.FLAGS "" 


Page 40 





■March 1993 


STARS-UC-05156/013/00 


156 endif 
• 157 

158 

159 # 

160 # Define the destination of the RLF build. 

161 « 

162 if ( l?TARGET == 0 ) then 

163 echo "" 

164 echo "Specify directory where the RLF Ada libraries will be built" 

165 echo "- 


166 

echo "" 


167 

echo " 

1. iRLFHOHE/Build.lCOMPILERNAME " 

168 

echo " 

2. Let me specify the target build 

169 

echo " 

3. Exit. " 

170 

171 

echo 


172 

setTARGETDIR: 


173 

# 


174 

# Read input 

from user. 

175 

# 


176 

set answer = 

0 

177 

echo -n "Please enter 1,2, or 3 > " 

178 

set answer = 

( l< ) 

179 

set answer = 

( lanswer ) 

180 

set answer = 

lanswerCl] 


181 

182 Get_Valid_Input: 

183 while 

184 

185 

186 

187 

188 

189 

190 

191 

192 end 

193 while 

194 

195 

196 

197 

198 

199 

200 

201 end 

202 

203 echo 

204 echo "You chose: lanswer" 

205 

206 switch ( lanswer ) 

207 case 1: 

208 setenv TARGET iRLFHOME/Build.lCOMPILERIAKE 

209 breaksw 


( $answer[1] != 1 ** lanswer[1] != 2 Aft lanswer[l] != 3 ) 
echo "" 

echo "T*** Invalid input. Please try again. ***" 
echo "" 

echo -n "Please enter A IUMBER: 1, 2, or 3 > " 

set answer = ( $< ) 

set answer = ( lanswer ) 

set answer = lanswer[1] 


( $answer < 1 I I lanswer > 3 ) 
echo "" 

echo "T*** Invalid input. Please try again. ***" 
echo "" 

echo -n "Please enter 1, 2, or 3 > " 

set answer = ( |< ) 
set answer = ( lanswer ) 
set answer = lanswer[1] 


Page 41 









March 1993 


STARS-UC-05156/013/00 


210 

211 

212 

213 

214 

215 

216 

217 

218 

219 

220 
221 
222 

223 

224 

225 

226 

227 

228 

229 

230 

231 

232 

233 

234 

235 

236 

237 

238 

239 

240 

241 

242 

243 

244 

245 

246 

247 

248 

249 

250 

251 

252 

253 

254 

255 

256 

257 

258 

259 

260 
261 
262 
263 


case 2: 

echo -n " TARGET = " 
setenv TARGET $< 
echo "" 
breaks* 

case 3: 

unsetenv TARGET 
echo "" 
echo \ 

"*** Sorry, a target build directory must be specified 
echo ,,M 
exit 0 
breaks* 

default: 

echo "T*** Invalid input value ***" 
echo "*** Please try again ***" 
echo 

goto setTARGETDIR 

ends* 

* 

9 Check for null entry 
# 

if ( (TARGET == ,,M ) then 

setenv TARGET (RLFHOME/Build_(COMPILERHAME 
endif 
endif 

# 

# By default, use /bin/cc for the C compiler. 

* 

if ( (?CC == 0 ) then 
if ( -e /bin/cc ) then 

setenv CC /bin/cc 

else 

unsetenv CC 

endif 

endif 

* 

# Establish a path to the C compiler. 

* 

setCC: 

if ( (?CC == 0 ) then 
echo 

echo "Specify path to the C compiler (e.g,, /bin/cc)" 
echo "" 

echo -n " CC = " 

setenv CC (< 
echo "" 
endif 

if ( ! -e (CC ) then 
echo "" 


***■■ 


i 


Page 42 







STARS-UC-05156/013/00 


March 1993 


264 

265 

266 

267 

268 

269 

270 

271 

272 

273 

274 

275 

276 

277 

278 

279 

280 
281 
282 

283 

284 

285 

286 

287 

288 

289 

290 

291 

292 

293 

294 

295 

296 

297 

298 

299 

300 

301 

302 

303 

304 

305 

306 

307 

308 

309 

310 

311 

312 

313 

314 

315 

316 

317 


echo ••*** Cannot find C compiler $CC ***" 
echo "*** Please try again. ***" 
unsetenv CC 
goto setCC 
endif 
echo "" 

echo "Using the following C compiler: $CC" 
echo "-" 


# 

# The following environment variables identify the directories 

# required to build the RLF Graphical Browser. This requires the 

# SERC Ada/Motif and Reusable Graphical Browser software. 

# 

setLIBX: 

if ( $?LIBX == 0 ) then 
echo "" 

echo "Specify pathname of the Xll Xlib object archive " 

echo "-" 

echo " Examples: " 

echo " /usr/lib/libXll.a" 

echo "" 

echo -n " LIBX = " 
setenv LIBX $< 
echo "" 
endif 

if ( $LIBX « ) goto setLIBX 
if ( ! -e $LIBX ) then 
echo "" 

echo "T*** $LIBX does not exist ***" 
echo "*** Please try again. ***" 
echo "" 
unsetenv LIBX 
goto setLIBX 
endif 

setADAMOTIFHOHE: 

if ( $?ADAMOTIFHOHE == 0 ) then 
echo "" 

echo "Specify path to the SERC Ada/Motif software home directory " 

echo "-" 

echo " Examples: " 

echo " /mybase/adamotif1.0/sercxll " 

echo " /sercxll " 

echo " etc." 

echo "" 

echo -n " ADAMOTIFHOHE = " 
setenv ADAMOTIFHOHE $< 
echo "" 
endif 

if ( $ADAMOTIFHOHE == ) goto setADAMOTIFHOHE 
if ( ! -e $ADAMOTIFHOHE ) then 


Page 43 







•March 1993 STARS-UC-05156/013/00 


318 echo "" 

319 echo "T*** SADAMOTIFHOME does not exist ***" 

320 echo "*** Please try again. ***" 

321 echo 

322 unsetenv ADAMOTIFHOME 

323 goto setADAMOTIFHOME 

324 endif 

325 

326 setRGB: 

327 if ( $?RGB == 0 ) then 

328 echo ,,M 

329 echo "Specify path to the RGB Ada libraries " 

330 echo "-" 

331 echo " Examples: " 

332 echo " /mybase/browser/Build_Sun4/rgb " 

333 echo " /afs/myhome/see/rgb/1.0/Sun4/rgb " 

334 echo " etc. ** 

335 echo "" 

336 echo -n " RGB = " 

337 setenv RGB $< 

338 echo "" 

339 endif 

340 if ( $RGB == ) goto setRGB 

341 if ( ! -e $RGB ) then 

342 echo "" 

343 echo "T*** $RGB does not exist ***** 

344 echo "*** Please try again. ***" 

345 echo ”” 

346 unsetenv RGB 

347 goto setRGB 

348 else 

349 if ( -e $RGB/call_ada.o ) then 

350 setenv RGB.OBJ $RGB/call_ada.o 

351 else 

352 echo "" 

353 echo "T*** Cannot find $R7B/call_ada.o ***’’ 

354 echo "*** Please try aga*a. ***" 

355 unsetenv RGB 

356 goto setRGB 

357 endif 

358 endif 

359 

360 # 

361 # The following environment variable determines whether the sample animals 

362 # model will be built and if so sets up the RLF.LIBRARIES environment 

363 # variable. 

364 # 

365 if ( ! $?BUILD_SAMPLE_LIB ) then 

366 echo "" 

367 Get_Valid_Build_Lib_Input: 

368 echo "" 

369 echo "Specify sample library build decision " 

370 echo "-" 

371 echo "" 


Page 44 







March 1993 


STARS-UC-05156/013/00 


372 echo " Do you wish to translate the sample RLF library Animals 

373 echo -n " alter the source code build? (y/n) > " 

374 # 

375 # Read input from user. 

376 « 

377 set answer = 0 

378 set answer = ( $< ) 

379 set answer = ( {answer ) 

380 set answer = $answer[l] 

381 

382 if ( $answer[l] != y Aft $answer[l] != Y tt& \ 

383 $answer[l] != n tctc $answer[l] != N ) then 

384 echo 

385 echo "T*** Invalid input. Please try again. ***" 

386 echo "" 

387 echo -n "Please enter y or n " 

388 echo 

389 goto Get_Valid_Build_Lib_Input 

390 else 

391 setenv BUILD_SAMPLE_L1B $answer 

392 endif 

393 endif 

394 

395 if ( $BUILD_SAHPLE_LIB == y I I $BUILD_SAMPLE_LIB == Y ) then 

396 setenv BUILD_SAMPLE_LIB Y 

397 if ( ! $?RLF_LIBRARIES ) then 

398 setenv RLF.LIBRARIES $RLFH0ME/Libraries 

399 endif 

400 echo "" 

401 echo " BUILD_SAHPLE_LIB = $BUILD_SAMPLE_LIB" 

402 echo " RLF.LIBRARIES = $RLF_LIBRARIES" 

403 echo "" 

404 else 

405 setenv BUILD_SAMPLE_LIB H 

406 echo "" 

407 echo " BUILD_SAMPLE_LIB = $BUILD_SAMPLE_LIB" 

408 echo "" 


409 

endif 




410 






411 






412 

echo 

till 




413 

echo 

• I 

TARGET 


STARGET" 

414 

echo 

II II 




415 

echo 

II 

ClitiPILERIAME 

= 

SCOMPILERHAME' 

416 

echo 

II 

COHPILERPATH 

s 

JCOMPILERPATH' 

417 

echo 

II 

COMPILERBII 

= 

$C0MPILERBI1" 

418 

echo 

II 

COMPILE 

= 

$CuMPILE" 

419 

echo 

II 

Line 

= 

$LI«C" 

420 

echo 

II 

LIIK.FLAGS 

= 

$LIIK_FLAGS" 

421 

echo 

II 

CC 

= 

$CC" 

422 

echo 

IIII 




423 

echo 

II 

RGB 

= 

$RGB" 

424 

echo 

II 

RGB.OBJ 

= 

$RGB_0BJ" 

425 

echo 

IIII 





Page 45 






-March 1993 


STARS-UC-05156/013/00 


426 echo " LIBX = 

427 echo " ADAMOTIFHOME 

428 echo 


$LIBX" 

= $ADAMOTIFHOME" 


Page 46 






■March 1993 


STARS- U C-05156/013/00 


C.2 SunAda Scripts for Installing RLF 
C.2.1 Script: Install_Rlf_src 


1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 

44 

45 

46 

47 

48 

49 

50 


#! /bin/csh -f 

# 

# Install_RLF - C Shell script to install RLF software. 

* 

# Usage: Install_RLF 

# 

set config_file = "code/Build_RLF.var" # name of installation 

# configuration file 

set interactv_install = "code/Build_RLF.csh" # name of interactive 

# installation file 


stty ignbrk 
stty -brkint 


# ignore break on input 

# don’t signal SIGIHT on break 


set cmdname = $0 

if ( $#argv != 0 ) then '.t check cmd line usage 

echo "Usage: $cmdname:t" # print only tail of cmd name 

exit 

endxf 


clear 

cat « X_SCREEI_X 

--- 

I I 

I RLF 4.1 Installation Script I 

I Source Code Release I 

I I 

--- 


You must choose one of the following installation options: 


1) Interactive installation 

* You are prompted for all necessary 
configuration values (i.e., pathnames). 

2) Edit the file that contains the configuration values 

* You edit the file "Build_RLF.var" and 

set the configuration values appropriately 
for your site. 

3) EXIT this script. 


Page 47 









STARS-UC-05156/013/00 


March 1993 


51 

52 

53 

54 

55 

56 

57 

58 

59 

60 
61 
62 

63 

64 

65 

66 

67 

68 

69 

70 

71 

72 

73 

74 

75 

76 

77 

78 

79 

80 
81 
82 

83 

84 

85 

86 

87 

88 

89 

90 

91 

92 

93 

94 

95 

96 

97 

98 

99 

100 
101 
102 

103 

104 


(If you do not edit the "Build_RLF.var" file, or specify 
invalid values, you sill be prompted for the configuration 
values anyway.) 


Which installation option do you prefer? 

X_SCREE*_X 

* 

# Read input from user. 

# 

set ansBer = 0 

echo -n "Please enter 1, 2, or 3 > " 

set noglob 

set answer = ( $< ) 

set answer = ( (answer ) 

set answer = (answer[1] 

unset noglob 

Get_Valid_Input: 

while ( (answer[1] != 1 kt (answer[1] != 2 kk (answer[1] != 3 ) 
echo "" 

echo "!♦** Invalid input. Please try again. ***" 
echo "" 

echo -n "Please enter A HUMBER: i, 2, or 3 > " 
set answer = ( (< ) 
set answer = ( (answer ) 
set answer = (answer[l] 

end 

while ( (answer[1] < 1 11 (answer[1] > 3 ) 
echo "" 

echo "T*** Invalid input. Please try again. ***" 
echo "" 

echo -n "Please enter 1, 2, or 3 > " 
set answer - ( (< ) 
set answer = ( (answer ) 
set answer = (answer[1] 

end 

echo "" 

echo "You chose: (answerCl]" 

# 

# Process input, execute appropriate procedure. 

* 

switch ( "(answer[1]" ) # look at char 

case [1]: # Interactive 

echo "" 

echo "+- 

echo "I Executing interactive installation script. 



Page 48 






March 1993 


STARS-UC-05156/013/00 


105 

106 

107 

108 

109 

110 
111 
112 

113 

114 

115 

116 

117 

118 

119 

120 
121 
122 

123 

124 

125 

126 

127 

128 

129 

130 

131 

132 

133 

134 

135 

136 

137 

138 

139 

140 

141 

142 

143 

144 

145 

146 

147 

148 

149 

150 

151 

152 

153 

154 

155 

156 

157 

158 


echo M +-+" 

echo "" 

echo "Build the UHIX or the PCTE version of RLF?" 
echo " (The default is UHIX.)" 
echo "" 

echo " 1. UHIX" 

echo " 2. PCTE" 

echo "" 

# 

# Read input from user. 

# 

set reply = 0 

echo -n "Please enter i or 2 > " 

set noglob 

set reply = ( $< ) 

set reply = ( $reply ) 

set reply = $reply[l] 

unset noglob 

Get_Valid_Input: 

while ( $reply[1] != 1 tt SreplyCl] != 2 ) 
echo "" 

echo "T*** Invalid input. Please try again. ***" 
echo "** 

echo -n "Please enter i HUMBER: 1 or 2 > " 
set reply -(.%<) 
set reply = ( Sreply ) 
set reply = IreplyCl] 

end 

while ( SreplyCl] < 1 II $reply[l] > 3 ) 
echo "" 

echo "T*** Invalid input. Please try again. ***" 
echo "" 

echo -n "Please enter 1 or 2 > " 
set reply = ( $< ) 
set reply = ( Ireply ) 
set reply = $reply[l] 

end 

echo "" 

echo "You chose: $reply[l]" 
pushd code > /dev/null 

* 

# Invoke the build script with the appropriate argument. 

* 

unset noglob 

if ( Sreply[1] == 1 ) then 
setenv PCTE H 

echo "Building the UHIX version." 


Page 49 






-March 1993 


STARS-UC-05156/013/00 


159 

160 
161 
162 

163 

164 

165 

166 

167 

168 

169 

170 

171 

172 

173 

174 

175 

176 

177 

178 

179 

180 
181 
182 

183 

184 

185 

186 

187 

188 

189 

190 

191 

192 

193 

194 

195 

196 

197 

198 

199 

200 
201 
202 

203 

204 

205 

206 

207 

208 

209 

210 
211 


$interactv_install 

else 

setenv PCTE Y 

echo "Building the PCTE version." 

$interactv_install -pete 
endif 

popd > /dev/null 
breaksw 

case [23: # Edit the ’var’ file 

* 

# Calculate string lengths for proper display. 

# 

set beginning = " I (config_file" 

C line = ‘expr length " + - 

• remainder = (line - ‘expr length "(beginning'" 

echo "" 

echo " +-+" 

echo " | To build the Reuse Library Framework in batch mode, I" 

echo " | you must edit the installation configuration file: I" 

echo "I |" 

set ctr = 1 

set line = "({beginning}" 
while ( $ctr < (remainder ) 
set line = "({line} " 

• ctr = (ctr + 1 

end 

echo -n "(line" 


echo "I" 

echo " | I 

echo " | Then execute the command: I 

echo " | | 

echo " | Build.RLF.csh >* LOG A I 

echo " | I 

echo " | Once the job is finished, check the LOG file for I 

echo " | errors. I 

echo " | I 

echo " +-+ 

breaksw 

case [3]: # Exit 

echo "" 


echo "Exiting installation script." 

breaksw 

case [!%]: 


+ 


H t 


Page 50 















March 1993 


STARS-UC-05156/013/00 


212 echo MM 

213 echo "Pathological input." 

214 echo "01 course C shell scripts sure breakable, please be kind." 

215 echo "T" 

216 exit -1 

217 breaks® 

218 

219 default: 

220 # if here, something’s wrong 

221 echo "*** Invalid input. ***" 

222 goto Get_Valid_Input 

223 bresiksw 

224 ends® 

225 

226 

227 echo "" 

228 exit 1 

229 

230 


Page 51 





March 1993 


STARS-UC-05156/013/00 


C.2.2 Script: Build_RLF.csh 

1 #!/bin/csh -f 

2 #- 

3 # 

4 # Build_RLF.csh - C Shell script to build the source code release 

5 # of the RLF software. 

6 # 

7 # 

8 # Usage: 

9 # Build.RLF.csh [-pete] [-link.only]" 

10 t 

11 #- 

12 # 

13 # Uncomment the following two lines if you need to increase the 

14 # system resources on your host; else ignore. 

15 # 

16 ###limit stacksize unlimited 

17 ###limit datasize unlimited 

18 

19 * 

20 # RLF v.4.2 — argument processing. 

21 # 

22 if ( $#argv > 2 ) then 

23 echo 

24 echo "t-fprog:t>: Only 2 arguments maximum are allowed.” 

25 echo "" 

26 goto USAGE 

27 endif 

28 

29 # 

30 # These are the default settings — build for UIIX; LIIK.OILY is false. 

31 * 

32 setenv PCTE I 

33 setenv LIIK.OILY * 

34 

35 # 

36 # v.4.1 

37 # 

38 * Process the command-line arguments. 

39 # 

40 

41 if ( $*argv > 0 ) then 

42 if (( "$argv[l]" != "-pete" ) Aft ( "|argv[l]" != "-link_only" )) then 

43 echo "" 

44 echo "Error in arguments: $argv[l] was not understood” 

45 goto USAGE 

46 endif 

47 if ( "$argv[l3" == "-pete" ) setenv PCTE Y 

48 if ( "$argv[l]" == "-link.only" ) setenv LIIK.OMLY Y 

49 endif 

50 if ( Itargv > 1 ) then 

51 if (( "$argv[2]" != "-pete" ) At ( "$argv[2]" != "-link.only" )) then 

52 echo "" 


Page 52 





March 1993 


STARS-UC-05156/013/00 


53 echo "Error in arguments: $argv[2] was not understood" 

- 54 goto USAGE 

55 endif 

56 if ( "largv[2]" == "-pete" ) setenv PCTE Y 

57 if ( "largv[2]" == "-link.only" ) setenv LINK.OHLY Y 

58 endif 

59 

60 # 

61 # Read in the site-dependent data from the ’var' file. 

62 # 

63 echo "" 

64 echo "Define the site-dependent environment variables." 

65 echo "-" 

66 echo "" 

67 source Build.RLF.var 

68 

69 if ( ILIHK.OILY == Y ) goto LIMK.IT 

70 

71 

72 

73 foreach dir ( Rbdl Rif Rlf.Gb Lmdl Library.Manager ) 

74 set echo 

75 if ( ! -d ITARGET/Idir ) mkdir -p $TARGET/$dir 

76 unset echo >t /dev/null 

77 end 

78 

79 

80 * 

81 * Build Ada libraries 

82 # 

83 Build_Ada_Libraries.esh 

84 if ($status != 0) exit Istatus 

85 

86 # 

87 # Perform the build. 

88 * 

89 echo "" 

90 echo "Building RLF Executables" 

91 echo "" 

92 Build.Rlfdir.esh 

93 if (Istatus != 0) exit $status 

94 

95 LIMK.IT: 

96 echo "" 

97 echo "Building Lmdl Translator Executable" 

98 echo "" 

99 Build.Lmdl.esh 

100 if (Istatus != 0) exit Istatus 

101 

102 echo "" 

103 echo "Building Rbdl Translator Executable" 

104 echo 

105 Build.Rbdl.esh 

106 if (Istatus != 0) exit Istatus 


Page 53 








March 1993 


STARS-UC-05156/013/00 


107 

108 echo "*• 

109 echo "Building RLF Library.Manager Executable" 

110 echo "" 

111 Build.Library.Manager.csh 

112 if ((status ! = 0) exit (status 

113 

114 echo "" 

115 echo "Building Graphical.Browser Executable" 

116 echo "" 

117 Build.Rlf_Gb.csh 

118 if ((status != 0) exit (status 

119 

120 echo "" 

121 echo "RLF Source Code Build Complete" 

122 echo "" 

123 

124 

125 echo "" 

126 echo "Moving executables to the directory:” 

127 echo " (RLFBIIDEST" 

128 echo "" 

129 if ( ! -d (RLFBIIDEST ) mkdir (RLFBIIDEST 

130 mv -f (TARGET/Library.Manager/Library.Manager (RLFBIIDEST 

131 mv -f (TARGET/Lmdl/Lmdl (RLFBIIDEST 

132 mv -f (TARGET/Rbdl/Rbdl (RLFBIIDEST 

133 mv -f (TARGET/Rlf.Gb/Graphical.Browser (RLFBIIDEST 

134 

135 

136 echo "" 

137 echo "Moving the RLF GB resource file (RLF.Brovser) to directory: " 

138 echo " (APPDEFAULTS" 

139 echo "" 

140 if ( ! -d (APPDEFAULTS ) mkdir (APPDEFAULTS 

141 cp (RLFBII/RLF.Brovser (APPDEFAULTS/RLF.Browser 

142 

143 echo "" 

144 echo "Moving the RLF GB bitmap files to directory: " 

145 echo " (APPDEFAULTS/bitmaps" 

146 echo "" 

147 cp -r (RLFBII/bitmaps (APPDEFAULTS 

148 

149 echo "" 

150 echo "Setting permissions for bitmap files in directory: ” 

151 echo " (APPDEFAULTS/bitmaps" 

152 echo "" 

153 chmod 744 (APPDEFAULTS/bitmaps/* 

154 

155 if ( (BUILD.SAMPLE.LIB == Y 11 (BUILD.SAMPLE.LIB == y ) then 

156 if ( (PCTE == Y || (PCTE == y ) then 

157 echo "lot translating the Animals sample library." 

158 echo "Run the appropriate ’esh’ script after starting PCTE." 

159 else 

160 echo "" 


Page 54 







STARS-UC-05156/013/00 


March 1993 


161 echo "Translating the Animals sample library." 

162 echo "" 

163 pushd $RLFHOME/models/animals > /dev/null 

164 set path = ( $RLFBIH $path ) 

165 Build_Animals_Lib.csh 

166 popd > /dev/null 

167 if ($status != 0) exit $status 

168 endif 

169 

170 echo "" 

171 echo "Installation Complete" 

172 echo "" 

173 exit 0 

174 

175 USAGE: 

176 echo "" 

177 echo "Usage:" 

178 echo " ${prog:t>: [-pete] [-link_only]" 

179 echo 

180 exit 1 

181 


Page 55 




March 1993 


STARS-UC-05156/013/00 


C.2.3 Script: Build_Ada_Libraries.csh 

1 #!/bin/csh -f 

2 #- 

3 # 

4 # Build_Ada_Libraries.csh - RLF installation file for building Ada libraries 

5 # 

6 #- 

7 

8 ###limit stacksize unlimited 

9 ###limit datasize unlimited 

10 

11 echo ,,M 

12 echo "Making Ada libraries" 

13 echo "" 

14 

15 # 

16 # Add the compiler binaries to the path lor SERC Ada/Motil 

17 # to make the Motif Ada libraries. 

18 * 

19 set path = ( $COMPILERBII $path ) 

20 

21 # 

22 # Core RLF. 

23 # 

24 cd $TARGET/Rlf 

25 if ( ! -e ada.lib ) then 

26 $COMPILERBII/a.mklib -1 . $COMPILERPATH/verdixlib 

27 if ($PCTE =* y 11 $PCTE == Y) then 

28 SCOMPILERBIM/a.path -i $PCTE_ADA 

29 endif 

30 else 

31 echo "Ada library exists in directory:" 

32 echo -n " " 

33 pwd 

34 endif 

35 

36 # 

37 # Modeling language translators. 

38 # 

39 foreach dir ( Lmdl Rbdl ) 

40 cd $TARGET/$dir 

41 if ( ! -e ada.lib ) then 

42 ICOMPILERBII/a.mklib -f . $COMPILERPATH/verdixlib 

43 $COMPILERBII/a.path -i $TARGET/Rlf 

44 if ($PCTE == y 11 $PCTE == Y) then 

45 $COMPILERBIV/a.path -i $PCTE_ADA 

46 endif 

47 else 

48 echo "Ada library exists m directory:” 

49 echo -n " " 

50 pvd 

51 endif 

52 end 







STA RS- UC-05156/013/00 


March 1993 


53 

54 # 

55 # RLF Library Manager. 

56 # 

57 cd $TARGET/Library.Manager 

58 if ( ! -e ada.lib ) then 

59 $ADAMOTIFHOME/sup/AdaMotif.mklib 

60 $COMPILERBIH/a.path -i $TARGET/Rlf 

61 if ($PCTE == y 11 $PCTE == Y) then 

62 $COMPILERBIM/a.path -i $PCTE_ADA 

63 endif 

64 else 

65 echo "Ada library exists in directory:" 

66 echo -n " " 

67 pwd 

68 endif 

69 

70 # 

71 # RLF Graphical Browser. 

72 # 

73 cd $TARGET/Rlf_Gb 

74 if ( ! -e ada.lib ) then 

75 $ADAMOTIFHOME/sup/AdaMotif.mklib 

76 JCOMPILERBII/a.path -i $TARGET/Rlf 

77 $COMPILERBIM/a.path -i $RGB 

78 if ($PCTE == y 11 $PCTE == Y) then 

79 $COMPILERBII/a.path -i $PCTE_ADA 

80 endif 

81 else 

82 echo "Ada library exists in directory:" 

83 echo -n " " 

84 pwd 

85 endif 

86 


Page 57 



March 1993 


STARS-UC-05156/013/00 


C.2.4 Script: Build_Rlfdir.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 pushd $TARGET/Rlf > /dev/null 

6 

7 echo "" 

8 echo "Establishing soft links to the Rif source files" 

9 echo "" 

10 foreach dir ( Common Adaknet Adatau Hybrid Ada.Actions ) 

11 foreach file ( SRLFCODE/Sdir/*.a ) 

12 set echo 

13 if ( ! -e ${file:t> ) In -s $file ${file:t> 

14 unset echo >k /dev/null 

15 end 

16 end 

17 # 

18 # ...including the ‘C’ source files 

19 * 

20 if ( ! -e support.c ) In -s $RLFC0DE/Common/support.c . 

21 

22 echo "" 

23 echo "Compiling Rif code" 

24 echo "" 

25 $CC -c support.c 

26 

27 # 

28 # compiling 10 specs for Unix, Pete or Cais 

29 # 

30 

31 SCOMPILE c_interface_spec.a 

32 if (Sstatus != 0) exit Sstatus 

33 

34 if (SPCTE == y I I SPCTF “ Y) then 

35 SCOMPILE rlf_text_io_pcte_.a 

36 if (Sstatus != 0) exit Sstatus 

37 SCOMPILE rlf_sequential_io_pcte_.a 

38 if (Sstatus != 0) exit Sstatus 

39 SC0MPILE rlf_direct_io_pcte_.a 

40 if (Sstatus != 0) exit Sstatus 

41 SCOMPILE rlf_pcte_spec.a 

42 if (Sstatus != 0) exit Sstatus 

43 SCOMPILE rlf_pcte_body.a 

44 if (Sstatus != 0) exit Sstatus 

45 SCOMPILE pcte.object.create.a 

46 if (Sstatus != 0) exit Sstatus 

47 SCOMPILE rlf_text_io_pcte.a 

48 if (Sstatus != 0) exit Sstatus 

49 SCOMPILE rlf_sequential_io.a 

50 if (Sstatus != 0) exit Sstatus 

51 SCOMPILE rlf_direct_io.a 

52 if (Sstatus != 0) exit Sstatus 


Page 58 






March 1993 


STARS-UC-05156/013/00 


53 {COMPILE pcte_invoke_string.a 

54 ii ({status != 0) exit {status 

55 else 

56 {COMPILE rlf_text_io_unix_.a 

57 if ({status != 0) exit {status 

58 {COMPILE rlf_sequential_io_unix_.a 

59 if ({status ! = 0) exit {status 

60 {COMPILE rlf_direct_io_unix_.a 

61 if ({status != 0) exit {status 

62 {COMPILE rlf_text_io_unix.a 

63 if ({status ! = 0) exit {status 

64 {COMPILE rlf_sequential_io.a 

65 if ({status ! = 0) exit {status 

66 {COMPILE rlf_direct_io.a 

67 if ({status != 0) exit {status 

68 {COMPILE unix_invoke_string.a 

69 if ({status != 0) exit {status 

70 endif 

71 

72 

73 {COMPILE generic_sequences_spec.a 

74 if ({status != 0) exit {status 

75 {COMPILE generic.sequences.body.a 

76 if ({status != 0) exit {status 

77 {COMPILE objects_spec.a 

78 if ({status != 0) exit {status 

79 {COMPILE generic.hash.spec.a 

80 if ({status != 0) exit {status 

81 {COMPILE generic_hash_body.a 

82 if ({status != 0) exit {status 

83 {COMPILE system.environment.spec.a 

84 if ({status ! = 0) exit {status 

85 {COMPILE system_environment_vads_body.a 

86 if ({status != 0) exit {status 

87 {COMPILE rlf.globals.spec.a 

88 if ({status != 0) exit 

89 {COMPILE rlfrc_parser_spec.a 

90 if ({status != 0) exit 

91 {COMPILE rlfrc_parser_support_spec.a 

92 if ({status != 0) exit 

93 

94 

95 if ({PCTE == y I I {PCTE == Y) then 

96 {COMPILE rlf_constants_pcte.a 

97 if ({status != 0) exit 

98 else 

99 {COMPILE rlf_constants_unix.a 

100 if ({status ! = 0) exit 

101 endif 

102 

103 

104 {COMPILE rlf_globals_body.a 

105 if ({status ! = 0) exit 

106 {COMPILE rifrc.scanner.dfa.a 


Page 59 






March 1993 


STARS-UC-05156/013/00 


107 
• 108 

109 

110 
111 
112 

113 

114 

115 

116 

117 

118 

119 

120 
121 
122 

123 

124 

125 

126 

127 

128 

129 

130 

131 

132 

133 

134 

135 

136 

137 

138 

139 

140 

141 

142 

143 

144 

145 

146 

147 

148 

149 

150 

151 

152 

153 

154 

155 

156 

157 

158 

159 

160 


il ((status != 0) exit 
(COMPILE rllrc.scanner.io.a 
il ($status != 0) exit 
(COMPILE rllrc.paxser.tokens.a 
il ((status != 0) exit 
(COMPILE rllrc.scanner.a 
il ((status != 0) exit 
(COMPILE rllrc_parser_support_body.a 
il ((status != 0) exit 
(COMPILE rllrc_parser_goto.a 
il ((status != 0) exit 
$C0MPILE rllrc_parser_shilt_reduce.a 
il ((status != 0) exit 
(COMPILE rllrc.parser.a 
il ($status != 0) exit 
(COMPILE adaknet.name.types.a 
il ((status != 0) exit (status 
(COMPILE lstring_spec.a 

il ((status != 0) exit (status 
(COMPILE Istring.body.a 

il ((status != 0) exit (status 
(COMPILE labels.spec.a 

il ((status != 0) exit (status 
(COMPILE lists.spec.a 

il ((status != 0) exit (status 
(COMPILE lists.body.a 

il ((status != 0) exit (status 


il ((PCTE == y 11 (PCTE == Y) then 
(COMPILE network.constants.pcte.a 
il ((status != 0) exit (status 

else 

(COMPILE netvork.constants.a 
il ((status != 0) exit (status 
endil 


(COMPILE rll_univ_types.a 

il ((status != 0) exit (status 
(COMPILE ranges.spec.a 

il ((status != 0 ) exit (status 
(COMPILE sets.spec.a 

il ((status != 0) exit (status 
(COMPILE sets.body.a 

il ((status != 0) exit (status 
(COMPILE sorting.spec.a 

il ((status != 0) exit (status 
(COMPILE sorting.body.a 

il ((status != 0) exit (status 
(COMPILE stacks.spec.a 

il ((status != 0) exit (status 
(COMPILE stacks.body.a 

il ((status != 0) exit (status 


Page 60 









March 1993 


ST ARS- U C-05156/013/00 


161 (COMPILE strings_spec.a 

162 if ((status != 0) exit (status 

163 (COMPILE system_dep_spec.a 

164 if ((status != 0) exit (status 

165 (COMPILE tables.spec.a 

166 if ((status != 0) exit (status 

167 (COMPILE tables.body.a 

168 if ((status != 0) exit (status 

169 (COMPILE tau_lists_spec.a 

170 if ((status *= 0) exit (status 

171 (COMPILE tau_lists_body.a 

172 if ((status ! = 0) exit (status 

173 (COMPILE agendas.spec.a 

174 if ((status != 0) exit (status 

175 (COMPILE agendas.body.a 

176 if ((status ! = 0) exit (status 

177 (COMPILE customlO.spec.a 

178 if ((status != 0) exit (status 

179 (COMPILE conunonlO.spec. a 

180 if ((status != 0) exit (status 

181 (COMPILE message_io_spec.a 

182 if ((status ! = 0) exit (status 

183 (COMPILE haslunap.spec.a 

184 if ((status != 0) exit (status 

185 (COMPILE hashnap.body.a 

186 if ((status != 0) exit (status 

187 (COMPILE hybrid_tables_spec.a 

188 if ((status ! = 0) exit (status 

189 (COMPILE hybrid_tables_body.a 

190 if ((status != 0) exit (status 

191 (COMPILE integer_hybrid_states_spec.a 

192 if ((status != 0) exit (status 

193 (COMPILE mono_lock_manager_spec.a 

194 if ((status ! = 0) exit (status 

195 (COMPILE unique_identifiers_spec.a 

196 if ((status ! = 0) exit (status 

197 (COMPILE unique.identifiers.body.a 

198 if ((status != 0) exit (status 

199 (COMPILE fixed_strings_spec.a 

200 if ((status ! = 0) exit (status 

201 (COMPILE fixed_strings_body.a 

202 if ((status ! = 0) exit (status 

203 (COMPILE message_io_body.a 

204 if ((status != 0) exit (status 

205 (COMPILE facts.spec.a 

206 if ((status != 0) exit (status 

207 (COMPILE filenames.spec.a 

208 if ((status != 0) exit (status 

209 (COMPILE generic_concepts_spec.a 

210 if ((status != 0) exit (status 

211 (COMPILE individual_concepts_spec.a 

212 if ((status != 0) exit (status 

213 (COMPILE label_table_spec.a 

214 if ((status !- 0) exit (status 


Page 61 







March 1993 


STARS-UC-05156/013/00 


215 (COMPILE label_table_body.a 

216 if ((status != 0) exit (status 

217 (COMPILE roles.spec.a 

218 if ((status ! = 0) exit (status 

219 (COMPILE rolesets.spec.a 

220 if ((status != 0) exit $status 

221 (COMPILE rolesets_body.a 

222 if ((status != 0) exit (status 

223 (COMPILE rule.bases.spec.a 

224 if ((status ! = 0) exit (status 

225 (COMPILE rule_bases_body.a 

226 if ((status != 0) exit (status 

227 (COMPILE actions.spec.a 

228 if ((status != 0) exit (status 

229 (COMPILE actions.body.a 

230 if ((status ! = 0) exit (status 

231 (COMPILE schema.spec.a 

232 if ((status != 0) exit (status 

233 (COMPILE text.hybrid.states.spec.a 

234 if ((status != 0) exit (status 

235 (COMPILE fact.depend.functions.spec.a 

236 if ((status ! = 0) exit (status 

237 (COMPILE fact.depend.spec.a 

238 if ((status != 0) exit (status 

239 (COMPILE fact.lists.spec.a 

240 if ((status ! = 0) exit (status 

241 (COMPILE fact.lists.body.a 

242 if ((status 1* 0) exit (status 

243 (COMPILE fact.value.lists.spec.a 

244 if ((status ! = 0) exit (status 

245 (COMPILE fact.value_lists.body.a 

246 if ((status != 0) exit (status 

247 (COMPILE frules.spec.a 

248 if ((status != 0) exit (status 

249 (COMPILE frules.body.a 

250 if ((status \~ 0) exit (status 

251 (COMPILE networks.spec.a 

252 if ((status != 0) exit (status 

253 (COMPILE networks.body.a 

254 if ((status ! = 0) exit (status 

255 (COMPILE non.monotonic.support.spec.a 

256 if ((status ! = 0) exit (status 

257 (COMPILE response.schenas.spec.a 

258 if ((status ! = 0) exit (status 

259 (COMPILE fact.schemas.spec.a 

260 if ((status ! = 0) exit (status 

261 (COMPILE irules.spec.a 

262 if ((status != 0) exit (status 

263 (COMPILE netuork.composites.spec.a 

264 if ((status != 0) exit (status 

265 (COMPILE questions.spec.a 

266 if ((status ! = 0) exit (status 

267 (COMPILE adanet.spec.a 

268 if ((status != 0) exit (status 


Page 62 






March 1993 


STARS-UC-05156/013/00 


269 $CONPILE composites.spec.a 

270 if ($status != 0) exit $status 

271 {COMPILE fact_base_schemas_spec.a 

272 if ({status .' = 0) exit $status 

273 {COMPILE fact_bases_spec.a 

274 if ({status != 0) exit {status 

275 {COMPILE fact_parameter_spec.a 

276 if ({status !~ 0) exit {status 

277 {COMPILE irule_bases_spec.a 

278 if ({status != 0) exit {status 

279 {COMPILE qrules_spec.a 

280 if ({status ! = 0) exit {status 

281 {COMPILE question_bases_spec.a 

282 if ({status \- 0) exit {status 

283 {COMPILE adauet_composites_spec.a 

284 if ({status ! = 0) exit {status 

285 {COMPILE adanet_state_spec.a 

286 if ({status != 0) exit {status 

287 {COMPILE adanet_state_body.a 

288 if ({status ! = 0) exit {status 

289 {COMPILE app_utils_spec.a 

290 if ({status != 0) exit {status 

291 {COMPILE fact_parameter_list_spec.a 

292 if ({status != 0) exit {status 

293 {COMPILE fact_parameter_list_body.a 

294 if ({status != 0) exit {status 

295 {COMPILE fbase_ops_spec.a 

296 if ({status 0) exit {status 

297 {COMPILE isa_browser_spec.a 

298 if ({status ! = 0) exit {status 

299 {COMPILE qrule_bases_spec.a 

300 if ({status != 0) exit {status 

301 {COMPILE agg_browser_8pec.a 

302 if ({status != 0) exit {status 

303 {COMPILE basic_config_functious_spec.a 

304 if ({status != 0) exit {status 

305 {COMPILE q_agendas_spec.a 

306 if ({status != 0) exit {status 

307 {COMPILE nessage.config.spec.a 

308 if ({status != 0) exit {status 

309 {COMPILE debug_spec.a 

310 if ({status != 0) exit {status 

311 {COMPILE dump.rbdl.spec.a 

312 if ({status != 0) exit {status 

313 {COMPILE message_TAU_components_8pec.a 

314 if ({status ! = 0) exit {status 

315 {COMPILE truthjnaiutenance.spec.a 

316 if ({status ! = 0) exit {status 

317 {COMPILE message_adv_config_spec.a 

318 if ({status ! = 0) exit {status 

319 {COMPILE message_adv_config_body.a 

320 if ({status ! = 0) exit {status 

321 {COMPILE librarian.configuration.a 

322 if ({status != 0) exit {status 


Page 63 






March 1993 


STARS-UC-05156/013/00 


323 

324 

325 

326 

327 

328 

329 

330 

331 

332 

333 

334 

335 

336 

337 

338 

339 

340 

341 

342 

343 

344 

345 

346 

347 

348 

349 

350 

351 

352 

353 

354 

355 

356 

357 

358 

359 

360 

361 

362 

363 

364 

365 

366 

367 

368 

369 

370 

371 

372 

373 

374 

375 

376 


{COMPILE persistence_spec.a 
if ($status != 0) exit {status 
{COMPILE static.persistence_spee.a 
if ({status != 0) exit $status 
{COMPILE lib_static_persistence_spec.a 
if ({status != 0) exit {status 
{COMPILE message_DTAU_components_spec.a 
if ({status ! = 0) exit {status 
{COMPILE inf_hybrid_states_spec.a 
if ({status != 0) exit {status 
{COMPILE library_hybrid_states_spec.a 
if ({status != 0) exit {status 
{COMPILE library_hybrid_net¥orks.a 
if ({status ! = 0) exit {status 
{COMPILE library_hybrid_state_ops_spec.a 
if ({status != 0) exit {status 
{COMPILE sndl_dump_spec.a 

if ({status != 0) exit {status 
{COMPILE examine_network_spec.a 
if ({status ! = 0) exit {status 
{COMPILE examine.netvork.body.a 
if ({status ! = 0) exit {status 
{COMPILE text_state_file_ops_spec.a 
if ({status != 0) exit {status 
{COMPILE text_state_ops_spec.a 
if ({status != 0) exit {status 
{COMPILE inf_state_ops_spec.a 
if ({status != 0) exit {status 
{COMPILE integer_state_ops_spec.a 
if ({status != 0) exit {status 
{COMPILE c_interface_body.a 
if ({status != 0) exit {status 
{COMPILE labels.body.a 

if ({status !* 0) exit {status 
{COMPILE strings_body.a 

if ({status != 0) exit {status 


if ({PCTE == y 11 {PCTE == Y) then 
{COMPILE system_dep_pcte.a 

if ({status != 0) exit {status 

else 

{COMPILE system_dep_unix.a 

if ({status != 0) exit {status 

endif 


{COMPILE customlO.body.a 

if ({status != 0) exit {status 
{COMPILE cooaonlO.body.a 

if ({status != 0) exit {status 
{COMPILE aono_lock_manager_body. a 
if ({status ! s 0) exit {status 
{COMPILE filenaaes.body.a 


Page 64 






March 1993 


STARS-UC-05156/013/00 


377 if ($status != 0) exit $status 

378 (COMPILE ranges.body.a 

379 if ($status != 0) exit (status 

380 (COMPILE generic_concepts_body.a 

381 if ((status != 0) exit (status 

382 (COMPILE individual_concepts_body.a 

383 if ((status != 0) exit (status 

384 (COMPILE roles_body.a 

385 if ((status != 0) exit $status 

386 (COMPILE schema.body.a 

387 if ((status != 0) exit (status 

388 (COMPILE network.composites.body.a 

389 if ((status ! = 0) exit (status 

390 (COMPILE adanet.body.a 

391 if ((status != 0) exit (status 

392 (COMPILE adanet.constr_destr_ops.sp.a 

393 if ((status != 0) exit (status 

394 (COMPILE adanet.mod.ops.sp.a 

395 if ((status ! = 0) exit (status 

396 (COMPILE adanet.predicates.sp.a 

397 if ((status != 0) exit (status 

398 (COMPILE adanet_query_ops_sp.a 

399 if ((status ! = 0) exit (status 

400 (COMPILE changes.sp.a 

401 if ((status != 0) exit (status 

402 (COMPILE concept_mod_ops_sp.a 

403 if ((status != 0) exit (status 

404 (COMPILE concept_predicates_ap.a 

405 if ((status != 0) exit (status 

406 (COMPILE concept_query_ops_sp.a 

407 if ((status != 0) exit (status 

408 (COMPILE misc_ops_sp.a 

409 if ((status != 0) exit (status 

410 (COMPILE restrictions.sp.a 

411 if ((status != O) exit (status 

412 (COMPILE role_mod_ops_sp.a 

413 if ((status != 0) exit (status 

414 (COMPILE role_predicates_sp.a 

415 if ((status != 0) exit (status 

416 (COMPILE role_query_ops_sp.a 

417 if ((status != 0) exit (status 

418 (COMPILE roleset_mod_ops_sp.a 

419 if ((status != 0) exit (status 

420 (COMPILE roleset.predicates.sp.a 

421 if ((status != 0) exit (status 

422 (COMPILE roleset_query_ops_sp.a 

423 if ((status != 0) exit (status 

424 (COMPILE roleset_spec_ops_sp.a 

425 if ((status != 0) exit (status 

426 (COMPILE action_mod_ops_sp.a 

427 if ((status !s o) exit (status 

428 (COMPILE action_predicates_sp.a 

429 if ((status != 0) exit (status 

430 (COMPILE action_query_ops_sp.a 


Page 65 





March 1993 


STARS-UC-05156/013/00 


431 if ((status != 0) exit $status 

432 $COMPILE set_conversions_sp.a 

433 if ((status != 0) exit (status 

434 (COMPILE states_sp.a 

435 if ((status ! = 0) exit (status 

436 (COMPILE subroles.sp.a 

437 if ((status != 0) exit (status 

438 (COMPILE composites.body.a 

439 if ((status != 0) exit (status 

440 (COMPILE adanet_composites_body.a 

441 if ((status ! = 0) exit (status 

442 (COMPILE app_utils_body.a 

443 if ((status != 0) exit (status 

444 (COMPILE isa_browser_body.a 

445 if ((status != 0) exit (status 

446 (COMPILE sndl_dump_body.a 

447 if ((status != 0) exit (status 

448 (COMPILE agg_browser_body.a 

449 if ((status != 0) exit (status 

450 (COMPILE facts.body.a 

451 if ((status ! = 0) exit (status 

452 (COMPILE fact_depend_functions_body.a 

453 if ((status != 0) exit (status 

454 (COMPILE non_monotonic_support_body.a 

455 if ((status ! = 0) exit (status 

456 (COMPILE response_schemas_body.a 

457 if ((status ! = 0) exit (status 

458 (COMPILE fact_scheaas_body.a 

459 if ((status != 0) exit (status 

460 (COMPILE irules_body.a 

461 if ((status != O) exit (status 

462 (COMPILE questions.body.a 

463 if ((status ! = 0) exit (status 

464 (COMPILE fact_base_schemas_body.a 

465 if ((status != 0) exit (status 

466 (COMPILE fact_bases_body.a 

467 if ((status ! = 0) exit (status 

468 (COMPILE fact_parameter_body.a 

469 if ((status ! = 0) exit (status 

470 (COMPILE qrules_body.a 

471 if ((status !- 0) exit (status 

472 (COMPILE basic.config_functions_body.a 

473 if ((status ! = 0) exit (status 

474 (COMPILE debug.body.a 

475 if ((status ! = 0) exit (status 

476 (COMPILE duap.rbdl.body.a 

477 if ((status != 0) exit (status 

478 (COMPILE aessage_TAU_coaponents_body.a 

479 if ((status ! = 0) exit (status 

480 (COMPILE truth_aaintenance_body.a 

481 if ((status != 0) exit (status 

482 (COMPILE aessage_config_body.a 

483 if ((status != 0) exit (status 

484 (COMPILE persistence.body.a 


Page 66 




March 1993 


STA RS- U C-05156/013/00 


485 

486 

487 

488 

489 

490 

491 

492 

493 

494 

495 

496 

497 

498 

499 

500 

501 

502 

503 

504 

505 

506 

507 

508 

509 

510 

511 

512 

513 

514 

515 

516 

517 

518 

519 

520 

521 

522 

523 

524 

525 

526 

527 

528 

529 

530 

531 

532 

533 

534 

535 

536 

537 

538 


if ((status != 0) exit (status 
(COMPILE static_persistence_body.a 
if ((status != 0) exit (status 
(COMPILE lib_static_persistence_body.a 
if ((status != 0) exit (status 
(COMPILE message_DTAU_components_body.a 
if ((status != 0) exit (status 
(COMPILE integer_hybrid_states_body.a 
if ((status != 0) exit (status 
(COMPILE text.hybrid_states.body.a 
if ((status != O) exit (status 
(COMPILE fbase_ops_body.a 

if ((status != 0) exit (status 
(COMPILE inf_hybrid_states_body.a 
if ((status != 0) exit (status 
(COMPILE library_hybrid_states_body.a 
if ((status != 0) exit (status 
(COMPILE library_hybrid_state_ops_body.a 
if ((status != O) exit (status 
(COMPILE text_state_file.ops.body.a 
if ((status != 0) exit (status 
(COMPILE text_state_ops_body.a 
if ((status != 0) exit (status 
(COMPILE inf_state_ops_body.a 
if ((status != 0) exit (status 
(COMPILE integer_state_ops_body.a 
if ((status != 0) exit (status 
(COMPILE action_operations_spec.a 
if ((status != 0) exit (status 
(COMPILE action_operations_body.a 
if ((status != 0) exit (status 
(COMPILE action.invocation.spec.a 
if ((status != 0) exit (status 
(COMPILE action.routines.spec.a 
if ((status != 0) exit (status 
(COMPILE action.routines.body.a 
if ((status != 0) exit (status 
(COMPILE display_attr_action_spec.a 
if ((status != 0) exit (status 
(COMPILE display_attr_action_body.a 
if ((status != 0) exit (status 


if ((PCTE == y I I (PCTE == Y) then 

(COMPILE display_attr_action_ascii_sp_pcte.a 
if ((status != 0) exit (status 
(COMPILE display_attr_action_files_sp_pcte.a 
if ((status != 0) exit (status 
(COMPILE display_attr_action_buf_sp_pcte.a 
if ((status != 0) exit (status 

else 

(COMPILE display_attr_action_ascii.sp.unix.a 
if ((status != 0) exit (status 
(COMPILE display.attr.action.files.sp.unix.a 


Page 67 






March 1993 


STARS-UC-05156/013/00 


539 

540 

541 

542 

543 

544 

545 

546 

547 

548 

549 

550 

551 

552 

553 

554 

555 

556 

557 

558 

559 

560 

561 

562 

563 

564 

565 

566 

567 

568 

569 

570 

571 

572 

573 

574 

575 

576 

577 

578 

579 

580 

581 

582 

583 

584 

585 


if ($status != 0) exit (status 
(COMPILE display_attr_action_buf_sp_unix.a 
if ((status != 0) exit (status 

end if 


(COMPILE display_attributes_sp.a 
if ((status != 0) exit (status 
(COMPILE export_sp.a 

if ((status != 0) exit (status 
(COMPILE extract_action_spec.a 
if ((status !» 0) exit (status 
(COMPILE extract_action_body.a 
if ((status ! = 0) exit (status 


if ((PCTE == y 11 (PCTE == Y) then 
(COMPILE extract_file_sp_pcte.a 
if ((status !- O) exit (status 

else 

(COMPILE extract_file_sp_unix.a 
if ((status ! = O) exit (status 

endif 


(COMPILE extract.sp.a 

if ((status !- 0) exit (status 
(COMPILE inport.sp.a 

if ((status ! = O) exit (status 
(COMPILE action_invocation_body.a 
if ((status != 0) exit (status 
(COMPILE invoke_sys_string_sp.a 
if ((status !- 0) exit (status 


if ((PCTE == y 11 (PCTE == Y) then 
(COMPILE invoke_string_sp_pcte.a 
if ((status != 0) exit (status 

else 

(COMPILE invoke_string_sp_unix.a 
if ((status != 0) exit (status 

endif 

(COMPILE invoke_ada_proc_sp.a 
if ((status != 0) exit (status 

popd > /dev/null 


Page 68 








March 1993 


STARS-UC-05156/013/00 


C.2.5 Script: Build-Lmdl.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 pushd (TARGET/Lmdl > /dev/null 

6 

7 if ( (LIMK.OHLY == Y ) goto LIHK.IT 

8 

9 echo "" 

10 echo "Establishing soft links to the LMDL source files" 

11 echo "" 

12 foreach file ((RLFCODE/Lmdl/*.a) 

13 if ( ! -e ${file:t> ) In -s (file ${file:t> 

14 end 

15 

16 echo "" 

17 echo "Compiling Lmdl" 

18 echo "" 

19 

20 (COMPILE std_report_spec.a 

21 if ((status != 0) exit (status 

22 (COMPILE topsort_spec.a 

23 if ((status ! = 0) exit (status 

24 (COMPILE topsort_body.a 

25 if ((status !- 0) exit (status 

26 (COMPILE std_yyval_error_spec.a 

27 if ((status !« 0) exit (status 

28 (COMPILE std_magic_spec.a 

29 if ((status ! = 0) exit (status 

30 (COMPILE std_magic_body.a 

31 if ((status != 0) exit (status 

32 (COMPILE std_output_spec.a 

33 if ((status != 0) exit (status 

34 (COMPILE 8td_yyval_error_body.a 

35 if ((status ! = 0) exit (status 

36 (COMPILE std_predefined_tree.a 

37 if ((status ! = 0) exit (status 

38 (COMPILE lmdl_system_types_spec.a 

39 if ((status != 0) exit (status 

40 (COMPILE user_types_spec.a 

41 if ((status != 0) exit (status 

42 (COMPILE user_types_body.a 

43 if ((status ! = 0) exit (status 

44 (COMPILE lmdl_attributed_tree_spec.a 

45 if ((status ! = 0) exit estatus 

46 (COMPILE lmdl.gets.a 

47 if ((status ! = 0) exit (status 

48 (COMPILE lmdl_attributed_tree_body.a 

49 if ((status ! = 0) exit (status 

50 (COMPILE globals.spec.a 

51 if ((status != 0) exit (status 

52 (COMPILE support.spec.a 


Page 69 







March 1993 STARS-UC-05156/013/00 

53 if ((status != 0) exit $status 

54 (COMPILE lmdl.puts.a 

55 if ((status != 0) exatus 

56 (COMPILE lmdl.makes.a 

57 if ((status ! = 0) exit $status 

58 (COMPILE support_body.a 

59 if ((status != 0) exit $status 

60 (COMPILE lmdl_evaluator_spec.a 

61 if ($status != 0) exit $status 

62 (COMPILE lmdl_dgts_spec.a 

63 if ($status != 0) exit $status 

64 (COMPILE std_lex_spec.a 

65 if ((status != 0) exit (status 

66 (COMPILE std_user_pkg.a 

67 if ((status != 0) exit (status 

68 (COMPILE lmdl.lexdef.a 

69 if ((status ! = 0) exit (status 

70 (COMPILE lexacts_spec.a 

71 if ((status ! = 0) exit (status 

72 (COMPILE globals.body.a 

73 if ((status ! = O) exit (status 

74 (COMPILE lexacts_body.a 

75 if ((status ! = 0) exit (status 

76 (COMPILE lmdl_lex_pkg.a 

77 if ((status !« 0) exit (status 

78 (COMPILE lmdI_dgts_body.a 

79 if ((status !~ 0) exit (status 

80 (COMPILE ladl_evaluator_body.a 

81 if ((status ! = 0) exit (status 

82 (COMPILE lndl_parserdef8.a 

83 if ((status != 0) exit (status 

84 (COMPILE backend.spec.a 

85 if ((status != 0) exit (status 

86 (COMPILE backend.interface.a 

87 if ((status 0) exit (status 

88 (COMPILE std.parser.spec.a 

89 if ((status !- 0) exit (status 

90 (COMPILE lmdl.parser.a 

91 if ((status != 0) exit (status 

92 (COMPILE std_boot.a 

93 if ((status !* 0) exit (status 

94 (COMPILE std_report_body.a 

95 if ((status != 0) exit (status 

96 (COMPILE lndl_display.a 

97 if ((status != 0) exit (status 

98 

99 (COMPILE hybrid_ops_spec.a 

100 if ((status != 0) exit (status 

101 (COMPILE hybrid.ops_body.a 

102 if ((status != 0) exit (status 

103 (COMPILE adaknet.ops.spec.a 

104 if ((status != 0) exit (status 

105 (COMPILE adaknet.ops.body.a 

106 if ((status != 0) exit (status 


Page 70 






March 1993 


STARS-UC-05156/013/00 


107 ^COMPILE operations_list_def_spec.a 

108 if ($status != 0) exit $status 

109 $C0MPILE operations_list_def_body.a 

110 if ($status != 0) exit $status 

111 

112 $COMPILE backend.body.a 

113 if ($status != 0) exit $status 

114 

115 

116 LIHK_IT: 

117 echo "" 

118 echo "Linking Lmdl" 

119 echo "" 

120 

121 if ($PCTE == y I I $PCTE == Y) then 

122 $LIIK boot -o Lmdl $TARGET/Rlf/support.o \ 

123 $LIBEMER $PCTE_ADA/util.o \ 

124 $LIKK_FLAGS 

125 if ($status != 0) exit Sstatus 

126 else 

127 $LIIK boot -o Lmdl $TARGET/Rlf/support.o \ 

128 $LIMK_FLAGS 

129 if ($status != 0) exit $status 

130 endif 

131 popd > /dev/null 

132 exit 0 


Page 71 




March 1993 STARS-UC-05156/013/00 

C.2.6 Script: Build_Rbdl.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 pushd STARGET/Rbdl > /dev/null 

6 

7 il ( SLIIK_OHLY == Y ) goto LIIK.IT 

8 

9 echo "" 

10 echo "Establishing soft links to the RBDL source files" 

11 echo "" 

12 foreach file ($RLFCODE/Rbdl/*.a) 

13 if ( ! -e ${file:t> ) In -s Sfile ${file:t> 

14 end 

15 

16 echo "" 

17 echo "Compiling Rbdl" 

18 echo "" 

19 

20 

21 SCOMPILE std_yyval_error_spec.a 

22 if ($status != 0) exit $status 

23 SCOMPILE nonstd_magic_spec.a 

24 if (Sstatus != 0) exit Sstatus 

25 SCOMPILE std_magic_body.a 

26 if (Sstatus \~ 0) exit Sstatus 

27 SCOMPILE std_output_spec.a 

28 if (Sstatus != 0) exit Sstatus 

29 SCOMPILE std_yyval_error_body.a 

30 if (Sstatus ! = 0) exit Sstatus 

31 SCOMPILE 8td_predefined_tree.a 

32 if (Sstatus ! = 0) exit Sstatus 

33 SCOMPILE rbdl_system_types_spec.a 

34 if (Sstatus != 0) exit Sstatus 

35 SCOMPILE user_types_spec.a 

36 if (Sstatus ! = 0) exit Sstatus 

37 SCOMPILE user_types_body.a 

38 if (Sstatus != 0) exit Sstatus 

39 SCOMPILE rbdl_attributed_tree_spec.a 

40 if (Sstatus != 0) exit Sstatus 

41 SCOMPILE rbdl.gets.a 

42 if (Sstatus != 0) exit Sstatus 

43 SCOMPILE rbdl_attributed_tree_body.a 

44 if (Sstatus ! = 0) exit Sstatus 

45 SCOMPILE support.spec.a 

46 if (Sstatus != 0) exit Sstatus 

47 SCOMPILE rbdl_put*.a 

48 if (Sstatus ! = 0) exit Sstatus 

49 SCOMPILE rbdl.makes.a 

50 if (Sstatus != 0) exit Sstatus 

51 SCOMPILE globals.spec.a 

52 if (Sstatus !* 0) exit Sstatus 


Page 72 







March 1993 STARS-UC-05156/013/00 

53 {COMPILE globals.body.a 

54 il ({status != 0) exit $status 

55 {COMPILE support_body.a 

56 il ({status != 0) exit {status 

57 {COMPILE report_spec.a 

58 il ({status != 0) exit {status 

59 {COMPILE report_body.a 

60 il ({status != 0) exit {status 

61 {COMPILE rbdl_evaluator_spec.a 

62 il ({status != 0) exit {status 

63 {COMPILE rbdl_dgts_spec.a 

64 il ({status != 0) exit {status 

65 {COMPILE nonstd_lex_spec.a 

66 il ({status != 0) exit {status 

67 {COMPILE std_user_pkg.a 

68 il ({status != 0) exit {status 

69 {COMPILE rbdl_lexdel.a 

70 il ({status != 0) exit {status 

71 {COMPILE lexacts.spec.a 

72 il ({status != 0) exit {status 

73 {COMPILE lexacts.body.a 

74 il ({status != 0) exit {status 

75 {COMPILE rbdl_display.a 

76 il ({status != 0) exit {status 

77 {COMPILE rbdl_lex_pkg.a 

78 il ({status != 0) exit {status 

79 {COMPILE rbdl_dgts_body.a 

80 il ({status != 0) exit {status 

81 {COMPILE rbdl_evaluator_body.a 

82 il ({status != 0) exit {status 

83 {COMPILE rbdl_parserdels.a 

84 il ({status != 0) exit {status 

85 {COMPILE 8td_parser_spec.a 

86 il ({status <= 0) exit {status 

87 {COMPILE rbdl_parser.a 

88 il ({status != 0) exit {status 

89 {COMPILE besl_vl_string_handler_spec.a 

90 il ({status != 0) exit {status 

91 {COMPILE besl_vl_string_handIer_body.a 

92 il ({status != 0) exit {status 

93 {COMPILE besl_support_spec.a 

94 il ({status != 0) exit {status 

95 {COMPILE besl_support_body.a 

96 il ({status != 0) exit {status 

97 {COMPILE question_hash_types_spec.a 

98 il ({status != 0) exit {status 

99 {COMPILE question_hash_types_body.a 

100 il ({status != 0) exit {status 

101 {COMPILE question.hashes.a 

102 il ({status != 0) exit {status 

103 {COMPILE create_inlerencer_support_spec.a 

104 il ({status != 0) exit {status 

105 {COMPILE create_inlerencer_support_body.a 

106 il ({status ! = 0) exit {status 


Page 73 




March 1993 


STARS- U C-05156/013 / 00 


107 $COMPILE bel.a 

108 if ($status *= 0) exit $status 

109 SCOMPILE backend.inter!ace.a 

110 if ($status != u) xit $status 

111 SCOMPILE nonstd.boot. •» 

112 if (Sstatus != 0) exit $status 

113 

114 LIIK.IT: 

115 echo "" 

116 echo "Linking Rbdl" 

117 echo "" 

118 

119 if ($PCTE == y II $PCTE == Y) then 

120 $LIHK boot -o Rbdl $TARGET/Rlf/support.o \ 

121 SLIBEMER SfCTE.UTIL \ 

122 SLIHK.FLAGS 

123 if ($status != 0) exit $status 

124 else 

125 SLIHK boot -o Rbdl $TARGET/Rlf/support.o \ 

126 $LIIK_FXAGS 

127 if (Sstatus != 0) exit Sstatus 

128 endif 

129 popd > /dev/null 

130 exit 0 


Page 74 







March 1993 


STARS-UC-05156/013/00 


C.2.7 Script: Build_Library .Manager.csh 


1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 

44 


#!/bin/csh -f 

###limit stacksize unlimited 
###limit datasize unlimited 

pushd (TARGET/Library.Manager > /dev/null 

if ( (LIKK.ONLY == Y ) goto LINK.IT 

echo 

echo "Establishing soft links to the Library Manager source files" 
echo "" 

foreach file ( $RLFCODE/Library.Manager/*.a ) 
if ( ! -e ({file:t> ) In -s (file ({file-t} 
end 

echo "" 

echo "Compiling Library Manager" 
echo "" 


(COMPILE globals.spec.a 

if ((status != 0) exit (status 
$C0MPILE callbacks.spec.a 

if ($status != 0) exit (status 
$C0MPILE callbacks_body.a 

if ((status != 0) exit $status 
^COMPILE library.manager.a 

if ($status != 0) exit $status 

LIIK.IT: 
echo "" 

echo "Linking Library Manager" 
echo "" 

if ( $PCTE == y 11 $PCTE == Y ) then 

$LIIK library.manager -o Library.Manager $TARGET/Rlf/support.o \ 

SLIBEMER $PCTE_ADA/util.o \ 
SLIIK.FLAGS 

if ($status != 0) exit (status 

else 

ILIIK library.manager -o Library.Manager $TARGET/Rlf/support.o \ 
if ((status != 0) exit (status 

end if 

popd > /dev/null 
exit 0 


Page 75 





March 1993 


STARS-UC-05156/013/00 


C.2.8 Script: Build_Rlf_Gb.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 

6 

7 pushd (TARGET/Rlf_Gb > /dev/null 

8 

9 if ( (LIIK.OHLY == Y ) goto LIHK.IT 

10 

11 echo M " 

12 echo "Establishing soft links to the Rlf_Gb source files" 

13 echo "" 

14 

15 set echo 

16 foreach file ((RLFCODE/Rlf_Gb/*.a) 

17 if ( ! -e ${file:t> ) In -s (file ${file:t> 

18 end 

19 unset echo 

20 

21 echo "" 

22 echo "Compiling Rlf_Gb" 

23 echo "" 

24 

25 

26 (COMPILE gb_params_spec.a 

27 if ((status != 0) exit (status 

28 (COMPILE gb_params_body.a 

29 if ((status ! = 0) exit (status 

30 (COMPILE gb.instance.a 

31 if ((status != 0) exit (status 

32 (COMPILE gb_hash.a 

33 if ((status ! = 0) exit (status 

34 (COMPILE gb.globals.a 

35 if ((status ! = 0) exit (status 

36 (COMPILE gb_dynamic_menus_spec.a 

37 if ((status != 0) exit (status 

38 (COMPILE gb_agg_brosser_spec.a 

39 if ((status != 0) exit (status 

40 (COMPILE gb_callbacks_spec.a 

41 if ((status ! = 0) exit (status 

42 (COMPILE gb_static_menus_spec.a 

43 if ((status != 0) exit (status 

44 (COMPILE gb_static_cmds_spec.a 

45 if ((status != 0) exit astatus 

46 (COMPILE gb_dyn_node_*enus_spec.a 

47 if ((status ! = 0) exit (status 

48 (COMPILE gb_utils_spec.a 

49 if ((status != 0) exit (status 

50 (COMPILE gb.history.a 

51 if ((status !* 0) exit (status 

52 (COMPILE gb.make.viev.a 


Page 76 






March 1993 


STARS-UC-05156/013/00 


53 

54 

55 

56 

57 

58 

59 

60 
61 
62 

63 

64 

65 

66 

67 

68 

69 

70 

71 

72 

73 

74 

75 

76 

77 

78 

79 

80 
81 
82 

83 

84 

85 

86 

87 

88 

89 

90 

91 

92 

93 

94 

95 

96 

97 

98 

99 

100 
101 
102 

103 

104 

105 

106 


if ($status != 0) exit $status 
SCOMPILE gb_infer_dtau_spec.a 
if (Sstatus != 0) exit $status 
SCOMPILE gb_infer.a 

if (Sstatus != 0) exit Sstatus 
SCOMPILE gb_infer_dtau_body.a 
if ($status != 0) exit $status 

$COMPILE gb_cb_suppress_spec.a 
if ($status ! = 0) exit Sstatus 
$C0MPILE gb_cb_suppress_gen2.a 
if (Sstatus != 0) exit Sstatus 
SCOMPILE gb_cb_suppress_gen.a 
if ($status != 0) exit Sstatus 

$COMPILE gb_cb_suppress_body.a 
if (Sstatus '.= 0) exit Sstatus 

SCOMPILE gb_agg_bro»ser_body.a 
if ($status != 0) exit $status 
$COMPILE gb_callbacks_body.a 
if ($status !- 0) exit $status 
SCOMPILE gb_dynamic_menus_body.a 
if ($status != 0) exit $status 
$C0MPILE gb_8tatic_menus_body.a 
if ($status !- 0) exit $status 
$COMPILE gb_static_cmds_body.a 
if (Sstatus !* 0) exit $status 
$COMPILE gb_dyn_node_memis _body.a 
if (^status != 0) exit Sstatus 
SCOMPILE gb_utils_body.a 

if (Sstatus != 0) exit Sstatus 
SCOMPILE gb_main.a 

if (Sstatus !* 0) exit Sstatus 

LIIK.IT: 

echo 

echo "Linking RIf_Gb" 

echo "" 

if (SPCTE == y iI SPCTE == Y) then 

SLIVK Gb.Main -o Graphiczd.Brosser STARGET/Rlf/support.o \ 

SRGB.0BJ \ 

SLIBX \ 

SLIBEMER SPCTEJJTIL \ 
SLIMK.FLAGS 

if (Sstatus != 0) exit Sstatus 

else 

SLIIK Gb.Main -o Graphical.Brosser STARGET/Rlf/support.o \ 

SRGB.OBJ \ 

SLIBX \ 

SLI1K.FLAGS 

if (Sstatus != 0) exit Sstatus 

endif 


Page 77 






March 1993 


STARS-UC-05156/013/00 


107 popd > /dev/null 
* 108 exit 0 


Page 78 






March 1993 STARS-UC-05156/013/00 

C.3 Scripts for Building Sample Networks 
C.3.1 Script: Build_Ada_X.Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds the “Paramax STARS Ada/X" library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 * 

12 setRLF.LIBRARIES: 

13 if (.' $?RLF.LIBRARIES) then 

14 echo 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo "" 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLF.LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo "" 

24 echo "Creating required sub-directories" 

25 echo "" 

26 if ( ! -d $RLF_LIBRARIES/Text/ada_z ) mkdir -p $RLF_LIBRARIES/Teit/ada_i 

27 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

28 

29 echo "" 

30 echo "Initializing text files" 

31 echo "" 

32 cp -r Text/* $RLF_LIBRARIES/Text/ada_x 

33 

34 echo "" 

35 echo "Building library model from ada.x.lmdl" 

36 echo "" 

37 Lmdl ada_x. lmdl 

38 

39 foreach i (*rbdl) 

40 echo "" 

41 echo "Creating Inferencer from $i" 

42 echo **" 

43 Rbdl < ti 

44 end 


Page 79 






March 1993 


STARS-UC-05156/013/00 


C.3.2 Script: Build_Animals_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds a demonstration animals library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 s etRLF.LIBRARIES: 

13 if ( .' $?RLF_LIBRARIES) then 

14 echo "" 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo "" 

18 echo -n " RLF_LIBRARIES = " 

19 setenv RLF_LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo "" 

24 echo "Creating required sub-directories" 

25 echo "" 

26 if ( • -d $RLF.LIBRARIES ) mkdir $RLF_LIBRARIES 

27 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

28 if ( ! -d $RLF_LIBRARIES/Text ) mkdir $RLF_LIBRARIES/Text 

29 if ( ! -d $RLF_LIBRARIES/Text/animals ) mkdir -p $RLF_LIBRARIES/Text/animals 

30 

31 

32 

33 echo "" 

34 echo "Initializing text files" 

35 echo "" 

36 cp Text/* $RLF_LIBRARIES/Text/animals 

37 

38 echo "" 

39 echo "Building Lmdl Betwork from animals.lmdl" 

40 echo "" 

41 Lmdl animals.lmdl 


Page 80 






•March 1993 


STARS-UC-05156/013/00 


C.3.3 Script: Build_Asw_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds a sample Anti-Submarine Warfare library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 setRLF_LIBRARIES: 

13 if (! $?RLF_LIBRARIES) then 

14 echo HM 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo ,,,, 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLF_LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo 

24 echo "Creating required sub-directories" 

25 echo "" 

26 if ( » -d $RLF_LIBRARIES/Text/asv ) mkdir -p $RLF_LIBRARIES/Text/asw 

27 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

28 

29 echo "" 

30 echo "Initializing text files" 

31 echo "" 

32 cp Text/* $RLF_LIBRARIES/Text/asw 

33 

34 echo "" 

35 echo "Building library model from asv.lmdl" 

36 echo "" 

37 Lmdl asw.lmdl 


Page 81 





«March 1993 


STA RS- U C-05156/013/00 


C.3.4 Script: Build_Common_Data_Model_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds a demo Common Data Model library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 setRLF_LIBRARIES: 

13 if (! $?RLF_LIBRARIES) then 

14 echo "" 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo "" 

18 echo -n " RLF_LIBRARIES = " 

19 setenv RLF_LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo "" 

24 echo "Creating required sub-directories" 

25 echo "" 

26 if ( ! -d $RLF_LIBRARIES/Text/satText ) mkdir -p $RLF_LIBRARIES/Text/satText 

27 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

28 

29 echo "" 

30 echo "Initializing text files" 

31 echo "" 

32 cp Text/* $RLF_LIBRARIES/Text/satText 

33 

34 echo "" 

35 echo "Building LMDL Hetwork from cdm.lmdl" 

36 echo "" 

37 Lmdl < common.data.mode1.lmdl 


Page 82 







STARS-UC-05156/013/00 


'March 1993 

C.3.5 Script: BuildJDemo_A.ctions_Lib.csh 

1 #!/bin/csh -1 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds a demonstration actions library lor the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 « 

12 setRLF.LIBRARIES: 

13 if (! $?RLF.LIBRARIES) then 

14 echo "" 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo "" 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLF.LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo "" 

24 echo "Creating required sub-directories" 

25 echo "" 

26 il ( ! -d $RLF_LIBRARIES/Text/demo.actions ) then 

27 mkdir -p $RLF.LIBRARIES/Text/demo.actions 

28 endif 

29 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

30 

31 echo "" 

32 echo "Initializing text files" 

33 echo "" 

34 cp -r Text/* $RLF_LIBRARIES/Text/demo_actions 

35 

36 echo "" 

37 echo "Building LMDL letwork from demo.actions.lmdl" 

38 echo "" 

39 Lmdl demo.actions.lmdl 


Page 83 






*March 1993 


STARS-UC-05156/013/00 


C.3.6 Script: Build_Move_Domain_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds the Cathy Lin’s Window Manager library lor the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 setRLF_LIBRARIES: 

13 if (! $?RLF_LIBRARIES) then 

14 echo M " 

15 echo "Specify path to the RLF libraries" 

16 echo "(Defaults to $RLF/Libraries)" 

17 echo "" 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLF.LIBRARIES $< 

20 echo "" 

21 if (*RLF_LIBRARIES ==) setenv RLF.LIBRARIES $RLF/Libraries 

22 endif 

23 

24 echo "" 

25 echo "Creating required sub-directories" 

26 echo "" 

27 if ( ! -d $RLF_LIBRARIES/Text/wm_move ) mkdir -p $RLF_LIBRARIES/Text/wm_move 

28 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

29 

30 echo "" 

31 echo "Initializing text files" 

32 echo "" 

33 cp -r Text/* $RLF_LIBRARIES/Text/wm_move 

34 

35 echo "" 

36 echo "Building LMDL Network from move„domain.lmdl" 

37 echo "" 

38 Lmdl move.domain.lmdl 

39 

40 foreach i (*rbdl) 

41 echo "" 

42 echo "Creating Inferencer from $i” 

43 echo "" 

44 Rbdl < $i 

45 end 


Page 84 



March 1993 


STARS-UC-05156/013/00 


C.3.7 Script: Build_SW_Tech_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds the Software Technology library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 setRLF.LIBRARIES: 

13 if (! $?RLF_LIBRARIES) then 

14 echo ,,H 

15 echo "Specify path to the RLF libraries" 

16 echo "(Defaults to $RLF/Libraries)" 

17 echo "" 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLFJLIBRARIES $< 

20 echo "" 

21 if ($RLF_LIBRARIES ==) setenv RLF.LIBRARIES $RLF/Libraries 

22 endif 

23 

24 echo "" 

25 echo "Creating required sub-directories" 

26 echo 

27 if ( ! -d $RLF_LIBRARIES/Text/sw.tech ) mkdir -p $RLF_LIBRARIES/Text/sw_tech 

28 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

29 

30 echo "» 

31 echo "Initializing text files" 

32 echo "" 

33 cp -r Text/* $RLF_LIBRARIES/Text/sw_tech 

34 

35 echo "" 

36 echo "Building LMDL network from sw.tech.lmdl" 

37 echo "" 

38 Lmdl sw.tech.lmdl 


Page 85 





March 1993 


STARS-UC-05156/013/00 


C.3.8 Script: Build_Sort_And_Search_Lib.csh 

1 #!/bin/csh -f 

2 ###limit stacksize unlimited 

3 ###limit datasize unlimited 

4 

5 # 

6 # This script builds the "Sort and Search Algorithms" library for the RLF. 

7 # 

8 

9 # 

10 # Locate the RLF Libraries 

11 # 

12 setRLF_LIBRARIES: 

13 if (! $?RLF.LIBRARIES) then 

14 echo "" 

15 echo "Specify path to the RLF libraries" 

16 echo "(e.g. /afs/reston/see/rlf/4.0/Libraries)" 

17 echo "» 

18 echo -n " RLF.LIBRARIES = " 

19 setenv RLF.LIBRARIES $< 

20 echo "" 

21 endif 

22 

23 echo "" 

24 echo "Creating required sub-directories" 

25 echo "" 

26 if ( ! -d SRLF.LIBRARIES/Text/sort.and.search ) \ 

27 mkdir -p $RLF_LIBRARIES/Text/sort_and_search 

28 if ( ! -d $RLF_LIBRARIES/Taustuff ) mkdir $RLF_LIBRARIES/Taustuff 

29 

30 echo "" 

31 echo "Initializing text files" 

32 echo "" 

33 cp -r Text/* $RLF_LIBRARIES/Text/sort_and_seaxch 

34 

35 echo "» 

36 echo "Building library model from sort_and_search.lmdl" 

37 echo "" 

38 Lmdl sort.and_search.lmdl 

39 

40 toreach i (*rbdl) 

41 echo "" 

42 echo "Creating Inferencer from $i" 

43 echo "" 

44 Rbdl < $i 

45 end 


Page 86 



