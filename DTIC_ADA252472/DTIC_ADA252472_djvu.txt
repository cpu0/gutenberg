AD-A252 472 entationpage 


Form Approved 
OPMNo. 


1. AGENCY USE (Leave 


4. TITLE AND 


to o ^^o f go 1 hour por rooponoo. irtduding tho timo for rovfowfog footrudior)*, OMrehing oxioting data oouroos odhorfog 
ormalion. Sorfo oonvnontt rogarding thia burdan aatimal# or any olhar aspaot of this ooUadfon of infonnaiion. incfoding 
Sarvioa. Diradorata for Intormalion Oparations and Raport*. 1215 Jafforaon Davit highw^, Suita 1204. Aiiington. VA 
Offioa of Managamant and Budgat, Wathirtgton, DC 20503. 

■ lEPORT 13. REPORT TYPE AND DATES 


3. REPORT TYPE AND DATES 

Final: 01 Jun 92 to 01 Jun 1993 


Validation Summary Report: Verdix Corporation, VADS AT&T 3B2/600GR 
Unix System V, Release 4.0, VAda-110-6363, Version 6.1, AT&T 
3B2/600GR under UNIX System V (Host & Target) 


6 . 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676. Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



9. SPONSORINGIVIONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


DTIC 

ELECTE 
JUL 0 11992 


8. PERFORMING 
ORGANIZATION 

AVF-VSR-530.0492 


10. SPONSORING/MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY 


Approved for public release; distribution unlimited. 


13. (Maximum 200 

Verdix Corporation, VADS AT&T 3B2/600GR Unix System V, Release 4.0, VAda-110-6363, Version 6.1, AT&T 
3B2/600GR under UNIX System V (Host & Target), 920513W1.11252, ACVC 1.11. 



92-17197 


92 


14. SUBJECT 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, 


17. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 


UNCLASSIFED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


IS. NUMBER OF 


16. PRICE 


20. LIMITATION OF 


Standard Rxm 296, (Rev. 2-89) 
Prescribed by ANSI Std. 
























•4 


AVF Control Number; AVF-VSR-530.0492 

1 June 1992 
92-03-18-VRX 


Ada COMPILER 
VALIDATiai SUMMARY REPORT: 

Certificate Number: 920513W1.11252 
VERDIX Corporation 

VADS AT&T 3B2/600GR UNIX System V, Release 4.0, VAda-110-6363, Version 6.1 
AT&T 3B2/600GR xander UNIX System V, Release 4.0 *> 

AT&T 3B2/600GR under UNIX System V, Release 4.0 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Accesion For 


NTIS CRA&i 
UTlC TAB 

U.iai'.:'.Ou:;CeJ 

JusiitiCitilo;! 


T 


By. 

Di-tiiLiUt.o’': i 


Avc.i!ct':i:‘y 


Cist 

I 


Av.i’i 














Certificate Information 


The following Ada inf}leinentation was tested »nd determined to pass ACVC 
1.11. Testing was ccxnpleted on 13 May 1992. 

Compiler Name and Version: VADS AT&T 3B2/600GR IBnx System V, Release 4.0, 

VAda-110-6363, Version 6.1 


Host Ccmputer System: AT&T 3 b2/600<® 

under UNIX System V, Release 4.0 

Target Conputer System: AT&T 3B2/600GR 

under UNIX System V, Release 4.0 

Customer Agreement Number: 92-03-18-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

920513W1.11252 is awarded to VERDIX Corporation. Ttiis certificate expires 

on 1 June 1993. 


Ibis report has been reviewed and is aK>roved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB (X! 45433-6503 



^ Ada Va!l^dafii)5r7Organization 

Ty Director, Q^m^ter and Software Engineering Division 
U Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 
Customer: Verdlx Corporation 

Ada Validation Facility: ASO/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada InclementatIon: 

Ada Compiler Name and Version: VADS AT&T 3B2/6006R UNIX System V, Release 4.0 

VAda-110-6363, Version 6.1 

Host Computer System: AT&T 3B2/6006R (UNIX System V, Release 4.0) 

Target Con^uter System: saune as host 
Declaration: 

[I/we], the undersigned, declare that (I/we) have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the Implementation 
listed above. 



V* 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTiai 

1.1 USE OF THIS VALIDATICW SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATICN DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTICNS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CEIAPTER 


1 


INTRODUCTICDN 


The Ada inplementation described above was tested according to the Ada 
Validation Procedures (Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives am account of the testing of this Ada inpleinentation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATICW SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and conpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate emd coirplete, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to; 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 









INTRODUCTIOJ 


1.2 REFERENCES 

(Ada83] Reference Manual for the Ada Proqramming Lauiguaqe, 

ANSI/MIL-STD-1615A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

tUG89] Ada Conpiler Validation Capability User's Guide , 21 Jme 1989. 


1.3 ACVC TEST CLASSES 

Complicince of Ada inplementations is tested by roeems of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library \inits, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executcible tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coitpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled 2 md the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately coirpiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Steuidard. 


1.4 DEFINITIOI OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Conqpiler The means for testing coitpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide cind the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host conputer system auid its 

Inplementation target conputer system. 

Ada Joint The part of the certification body vrtiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidcince for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the inplementation to pass an ACVC version, 
aui Ada 

Inplementation 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRODUCTICXa 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an 

agreement with ein AVF which specifies the terms cind 
conditions for AVF services (of auny kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

Host Computer A computer system v^ere Ada source programs are transformed 
System into executeible form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>;<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The conpiler of a validated Ada inplementation. 

Compiler 

Validated Ada An Ada inplementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro90}. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
leuiguage. 


1-4 






CHAPTE2R 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. Hie rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB700LA 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Ccanmentaries are included as 
appropriate. 


2-1 






IMPLEMENTATICtt^ DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS; 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests checlc for the predefined type L(M5_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCM5_FLCAT, or SHORT_FLCAT; for this 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FICAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type euid must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M.,P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this in^lementation, MACHINEJTVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATIW; for this inplementation, the ranges are the 
same. 

CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 






IMPLEMENTATIW DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode eind access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INCXJT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of em 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation Ccuinot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERROR when the value of the 
page nxjanber exceeds COUNT'LAST; for this Tropleroentation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 




IMPLEMENTATIC^I DEPENDENCIES 


2.3 TEST MODIFICATIC^IS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the reuige of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A24A, and CD2A31A..C H tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, v^ich uses 
Unchec)<ed_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK W REPRESENTATIC»I FOR <TyPE ID> FAILED." 


2-4 










a'MTER 


3 


PRCXS:SSING INFORMATION 


3.1 TESTING ENVIRCWMENT 


The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly VA 22021 

Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordeince with the Ada Progreunming 
Language Standard, vdiether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC (Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Lamguage Standard. 

The list of items below gives the numtjer of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
bjecause of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 euid 2.2 (counted in items b 
and f, below). 


3-1 










PROCESSING INFORMATION 


a) Total Number of i^plicable Tests 

b) Total Number of Withdravm Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTICMN 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were not loaded directly onto the host computer. The tape 
was loaded onto a Sun Workstation, and the tests were copied over Ethernet 
to the host machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. 

Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation teeun were also archived. 


3-2 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the roaucimum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the naximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 — Value of V 

(1..V-1 -> 'A', V «> '1') 

(1..V-1 => 'A', V «> '2') 

(1..V/2 *> 'A') & '3' & 
{1..V-1-V/2 => 'A') 

(1..V/2 => 'A') & '4' & 
(1..V-1-V/2 »> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' & 
(1..V-20 »> ' ') 


$MAX LEN INT BASED LITERAL 

"2;" & (1..V-5 -> '0') & "11:" 


$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E: 


A-1 







MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 «> 'A') & 

The following table lists all of the other macro parameters and thei 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALI(2®IENT 

4 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

ATT_MIPS_SYSV4 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2147483647 

$file_terminator 

r f 

$FIXED_NAME 

no_such_type 

$FLQAT_NAME 

NO_SUCHjrYPE 

$F0RM_STRING 

ff ff 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATION 


100000.0 

$GREATER THAN_DURATION BASE LAST 

TOOOOUOO.O 

$GREATER_THAN_FLQAT_BASE LAST 

1.^E+308 

$GREATER THAN FLOAT_SAFE LARGE 

5.TJE307 


A-2 







• 


MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 
“ “ " 9.0E37 


$HIGH_PRIORITY 

99 


$ILLEGAL EXTERNAL FILE NAMEl 

■Villegal/file_naine/2{ ]$%FlLEl.nAT" 


$ILLEGAL EXTERNAL FILE NAME2 

■^/illegal/file_naine/2{ )$%FILE2.nAT" 


$INAPPROPRIATE LINE LENGTH 

-1 


$INAPPROPRIATE PAGE LENGTH 

-1 


$INCLUDE_PRAGMAl 

PRACm INCLUDE ( "A28006D1 .TST" ) 


$ INCLUDE_PRAC21A2 

PRAGMA INCLUDE (’'B28006D1 .TST") 


$INTEGER_FIRST 

-2147483648 


$INTEGER_LAST 

2147483647 


$INTEGER_LAST_PLUS_1 

2147483648 


$INTERFACE_LANGUAGE 

C 


$LESS_THAN_DURATIC»I 

-100000.0 


$LESS THAN DURATION BASE FIRST 

■" -ITJOOOOOO.O 


$LINE_TERMINATOR 

ASCII.LF & ASCII.FF 


$LOW_PRIORITY 

0 


$MACHINE CODE STATEMENT 

CODE_0'(OP -> NOP); 


$MACHINE_CODE_TYPE 

CODE_0 


$MANTISSA_DOC 

31 


$MAX_DIGITS 

15 


$MAX_INT 

2147483647 


$MAX_INT_PLUS_1 

2147483648 


$MIN_INT 

-2147483648 


$NAME 

TINY_INTEGER 



A-3 






MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATIC»J1 

$NAME_SPECIFICATIC»J2 

$NAME_SPECI FICATIOJS 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITICW 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VAR1ABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$yOUR_PRAGMA 


ATr_MIPS_SYSV4 
/homel/acvcl. ll/c/e/X2120A 
/homel/acvcl. ll/c/e/X2120B 
/homel/acvcl. ll/c/e/X3119A 
16#F000000E# 

16777216 

8 

ATT_MIPS_SYSV4 

ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 






APPENDIX B 

COMPILATICW SYSTEM OPTIONS 


The conpiler options of this Ada inpleraentation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation auid 
not to this report. 


B-1 



COMPILATION SYSTEM OPTIONS 


ada VADS Reference ada 

ada - invoke the Ada coitpiler 
SYNTAX 

ada (options] [source_file]... (object_file.o]... 

OPTIONS 

-A (disassemble) disassemble the mits in the source file after compiling 
them. -A can be followed by arguments that further define the 
disassembly display (e.g. -Aa, -Ab, -Ad, -Af, -Al, -As): 

a add hexadecimal display of instruction bytes to disassembly 
listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file_name.das" 

s disassemble the unit spec 

-a file_name (archive) Treat file_name as an object archive file created 
by ar. Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-D identifier type value (define) Define an identifier of a specified type 

and value. See VADS ADA PREPROCESSOR REFERENCE. 

-d (dependencies) Analyze for dependencies only. Do not do semantic 

analysis or code generation. Update the library, marking any defined 
units as unconpiled. The -d option is used by a.make to establish 
dependencies among new files. 

-e (error) Process conpilation error messages using a.error and send it 
to standard output. Only the source lines containing errors are 
listed. Only one -e or -E option should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory argument, ada 
processes error messages using a.error and directs a brief 
output to standard output; the raw error messages are left 
in adajsource.err. If a file pathname is given, the raw 
error messages are placed in that file. If a directory 
argument is supplied, the raw error output is placed in 
dir/source.err. The file of raw error messages can be used 
as input to a.error. 

-el (error listing) Intersperse error messages among source lines and 
direct to standard output. 


-El 

-El file 


B-2 






CC»1PIIATIC»J SYSTEM OPTIONS 


-El directory (error listing) Same as the -E option, except that source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, embed 
them in the source file, and call the environment editor 
ERR0R_EDIT0R. (If ERROR_EDITOR is defined, the environment variable 
ERROR PATTERN should also be defined. ERROR_PATTERN is an editor 
searcH command that locates the first occurrence of '###' in the 
error file.) If no editor is specified, vi(l) is invoked. 

-F (full DIANA) Do not trim the DIANA tree before outpuit to net files. 
To save disk space, the DIANA tree will be trimmed so that all 
pointers to nodes that did not involve a subtree that define a 
symbol teible will be nulled (unless those nodes are part of the 
body of ein inline or generic or certain othere values needing to 
be retained for the debugging or compilation information). The 
trimming generally removes initial values of variables 2 und all 
statements. 

-K (keep) Keep the intermediate lemguage (IL) file produced by the 
compiler front end. The IL file will be placed in the .objects 
directory, with the file name Ada_source. 

-L library_name (library) Operate in VADS library libraryjname. 

{Default: current working directory] 

-lfile_abbreviation (library search) Ibis is an option passed to the 

id(l) linker, telling it to search the specified 
library file. (No space between the -1 and the file 
abbreviation.) (self-hosted applications only) 

For a description of the file abbreviations, see also 
Operating System documentation, ld(l). 

-M unit_name (main) Produce eui executeQsle program by linking the named 
unit as the main program. unit_name must already be 
coit^iled. It must be either a parameterless procedure or 
a parameterless function returning em integer. The 
executcible program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with the -o 
option. 

-M source_file (main) Produce an executed>le program by compiling auid 
linking source_file. Ihe main unit of the program is 
assumed to be the root neune of the .a file (for foo.a 
the unit is foo). Only one .a file may be preceded by 
-M. The executable program will be rxamed a.out 
(self-hosted) or a.vox (cross-development) unless 
overridden with the -o option. 

-o executable_file (output) This option is to be used in conjxonction 

with the -M option. executable_file is the name 
of the executable rather than the default. 


B-3 





CX»1PILATI<»I SYSTEM OPTIONS 


-O[0-9] (optimize) Invoke the code optimizer. An optional digit 

(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-O full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing dead variables, 
subsxjming moves between scalar variables 
-02 add common subexpression elimination within basic blocks 
-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling eind one 
pass of reducing induction expressions 
-06 no chcunge zuid instruction scheduling 
-07 add one more pass of induction expression reduction and 
instruction scheduling 

-08 add one more pass of induction expression reduction and 
instruction scheduling 

-09 add one more pass of induction expression reduction, 
instruction scheduling and hoisting expressions common 
to the then euid else parts of if statements. 

Hoisting from branches (and cases alternatives) can be slow 
cind does not always provide significemt performance gains so 
it can be suppressed. 

NOTE: This version of VADS includes a preliminary SPARC- 
specific optimizer. It schedules loads to avoid pipeline 
conflicts and moves instructions to the delay slots of 
branches and calls. Since it can be slow for some programs, 
it is only enabled at optimization levels greater than 4. 

For more information about optimization, see CWIPILING ADA 
PROGRAMS, Conpiler Optimizations and pragma OPTIMIZE_CX)DE(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis of all 

generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) T^ply pragma SUPPRESS to the entire compilation for all 
suppressible checks. (See also pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conpiler version number, date and time of conpilation, 
name of file compiled, command input line, total coitpilation time euid 
error summary line. Storage usage information eibout the object file 
is provided. 


B-4 





CXaiPILATICW SYSTEM OPTIC^IS 


-w (warnings) Suppress warning diagnostics. 

DESCRIPTICasI 

The command ada executes the Ada coitpiler and coitpiles the named Ada 
source file, ending with the .a suffix. The file must reside in a VADS 
library directory. The ada.lib file in this directory is modified after 
each Ada unit is compiled. 

By default, ada produces only object eund net files. If the -M option is 
used, the conpiler automatically invokes a.Id auid builds a conplete 
program with the named library unit as the main program. 

Non-Ada object files (.o files produced by a coitpiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in cmy order, but the order of 
conpilation and the order of the files to be passed to the linker can be 
significcint. 

Several VADS conpilers may be simulteineously available on a single system. 
Because the ada command in emiy VADS_location/bin on a system will execute 
the correct compiler components based upon visible library directives, 
the option -sh is provided to print the name of the components actually 
executed. 

Program listings with a disassembly of machine code instructions are 
generated by a.db or a.das. 

DIAOaOSTICS 

The diagnostics produced by the VADS conpiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in parentheses. 

RELATED TOPICS 

a.app, a.das, a.db, a.error, a.help, a.Id, a.make, a.map, a.pr 
Generated 10-21-91 VADS 


B-5 







COMPILATICX^ SYSTEM OPTIC^IS 


LINKE31 OPTIWS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. IMless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a.Id VADS Reference a.Id 

a.Id - prelinker 
SYNTAX 

a.Id [options] unit_name [linker_options) 

OPTIC»JS 

-DO (objects) Use partially linked objects instead of archives as an 

intermediate file if the entire list of objects ceuinot be passed to 
the linker in one invocation. This option is useful because 
of limitations in the archiver on some hosts (including Ultrix, 

HPUX and System V). 

-DX (debug) Debug memory overflow (use in cases where linking a large 
number of units causes the error message "local symbol overflow" 
to occur). 

-E unit_name (elaborate) Elaborate xjnit name as early in the 
elaboration order as possiBle. 

-F (files) Print a list of dependent files in order and suppress linking. 

-L library_name (library) Operate in VADS library library_name. 

(Default: current working directory] 

-o executable_file (output) Use the specified file name as the name of 

the output rather than the default (a.out (self-hosted) 
or a.vox (cross-development)). 

-sh (show) Display the name of the tool executable but do not execute it. 

-U (units) Print a list of dependent units in order and suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

[linker options] All arguments after unit_name are passed to the linker. 

These may be options for the linker, archive libraries, 
library abbreviations or object files. 


DESCRIPTIW 






COMPILATICW SYSTEM OPTICNS 


a.Id collects the object files needed to make unit_name a main program 
and calls the ld(l) linker to link togetiier all Ada cind other 
language objects required to produce an executadjle image in a.out 
(self-hosted) or a.vox (cross- developnent). unit_name is the main 
program and must name a non-generic subprogram. If unit_name is a 
function, it must return a value of the type STANDARD.INTEGER. This 
integer result will be passed back to the shell as the status code 
of the execution. The utility uses the net files produced by the Ada 
compiler to check dependency information, a.Id produces an exception 
mapping table eind a unit elaboration table and passes this information 
to the linker. The elciboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise ein exception will no longer 
have exception tables. 

a.Id reads instructions for generating executcibles from the ada.lib file 
in the VADS libraries on the search list. Besides information generated 
by the compiler, these directives also include WITHn directives that 
allow the automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses in the Ada 
source. Any number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WlTHl. The directives 
are recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITHn directive in a library 
later in the library search list. 

Use the tool a.info to change or report library directives in the 
current library. 

All arguments after unit_name are passed on to the linker. These may 
be options for it, archive libraries, library eibbreviations, or object 
files. 

VADS_location/bin/a.ld is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS compilers to exist on the seune host. The -sh 
option prints the neime of the actual executable file. 

FILES AND DIRECTORIES 

a.out/a.vox default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 


B-7 






COMPILATION SYSTEM OPTIONS 

DIAGNOSTICS 

Self-explanatory diagnostics are produced for missing files. 
Additional messages are produced by the Id linker. 

RELATED TOPICS 

ada, a.make, a.info 

Generated 10-21-91 


etc. 


VADS 


B-8 










APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to conpiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vrtiich 
are not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767/ 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.797693134E+308 .. 1.797693134E+308; 
type SHORT_FLOAT is digits 6 rainge -3.4028E+38 .. 3.4028E+38; 

type KJRATICW is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 






APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Inqplementation-Dependent Characteristics 


1. Implenventation-Dependent Pragmas 

1.1. INLlNE_(mY Pragma 

The INLINE_C»JLY pragma, when used in the Scime way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callcible version of the routine v^ich saves code 
space. If a user erroneously makes an INLINE_(»JLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefined Ada packages, but provides no user access. It is 
used only to inclement code b^ies for v^ich no actual Ada 
body can be provided, for exanple the MACHINE_CODE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instemtiation will 


C-2 




APPENDIX F OF THE Ada STANDARD 


get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the inple- 
mentation and has the same effect as SHARE_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other l 2 uriguages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_arguraent. The pragma 
is allowed at the place of a declarative item in a package 
specification eind must apply to an object or subprogram 
declared earlier in the seime package specification. The 
object must be declared as a scalar or an access type. The 
object ceuinot be any of the following; 
a loop variable, 
a constant, 

an initialized variable, 
ein array, or 
a record. 

1.7. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 


C-3 





APPENDIX F OF THE Ada STANDARD 


The default is 

1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CCWTROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is iirplemented as described in Appendix B of the 
Ada RM. 

2.3. Il'JLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record eind array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in i^pendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by meeuis of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NCXJ_REENTRANT 

This pragma takes one argument vdiich can be the name of 
either a library subprogram or a subprogreun declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 


C-4 





APPENDIX F OF THE Ada STANDARD 


recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma Ceui be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be el 2 ±>orated 
because it is either part of the RTS, a configuration pack¬ 
age or ctfi Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code auid issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIIT!; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE!INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at con 4 )ile time emd will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inpleroented as described in Appendix B of the 
Ada RM. 


2.14. SHARED 


C-5 





APPENDIX F OF THE Ada STANDARD 


This pragma is recognized by the iirplementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The inhale- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLOW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For ein entry for vhich eui address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 


C-6 








APPENDIX F OF THE Ada STANDARD 




— Copyright 1987, 1988, 1989, 1990 Verdix Corporation 


with UNSIGNED_TyPES; 
package SYSTEM is 


pragma SUPPRESS(ALL_CHECKS); 
pragma SUPPRESS(EXCEPTION_TABLES); 
pragma NOT_ELABORATED; 


type NAME is ( att_mips_sysv4 ); 
SYSTEM NAME ; constant 


STORAGE_UNIT 
MEMORY SIZE 


: constant 8; 

: constant 


System-Dependent Named Numbers 


NAME att_mips_sysv4; 

16 777 216; 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


; constamt 
: constant 
: constant 
constant 31; 

; constemt 
: constant 


-2 147 483 648; 
2 T47 183 ^47; 
1 ?; " " 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 
MAX_REC_SIZE : integer ;= 64*1024; 
type ADDRESS is private; 


function ">" (A: ADDRESS; B 
function "<" (A: ADDRESS; B 
function ">-"(A; ADDRESS; B 
function "<-"(A; ADDRESS; B 
function (A; ADDRESS; B 
function *'+" (A: ADDRESS; I 
fxinction (A: ADDRESS; I 


ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return BOOLEAN; 
ADDRESS) return INTEGER; 
INTEGER) return ADDRESS; 
INTEGER) return ADDRESS; 


function "+" (I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


function MEMORY_AEORESS 

(I: UNSIGNED TYPES.UNSIOJED INTEGER) return ADDRESS renames 


NO ADDR : constant ADDRESS; 


type TASK_1D is private; 

NO TASK ID ; constant TASK ID; 


subtype SIG_STATUS_T is INTEGER; 

SIG STATUS SIZE: constant 4; 


C-7 









APPENDIX F OF THE Ada STANDARD 


type PR0C2^_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type LONG_ADDRESS is private; 

NO_LONG_ADDR : constant L(»IG_ADDRESS; 

function "+" (A: LC»IG_ADDRESS; I: INTEGER) return Larci_ADDRESS; 
function (A; LONG_ADDRESS; I: INTEGER) return LCM3_ADDRESS; 

function MAKE_LC»IG_ADDRESS (A: AIX)RESS) return LONG_ADDRESS; 

function LOCALIZE(A: LONG_ADDRESS ; ByTE_SIZE : INTEGER) return ADDRESS; 

function STATION_OF(A: Larc_ADDRESS) return INTEGER; 

private 


type ADDRESS is new l]NSIGNED_TYPES.UNSIGNED_INTEGER; 

NO_ADDR : constant ADDRESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">="); 
pragma BUILT_IN( "<=''); 
pragma BUILT_IN( ); 
pragma BUILT_IN("+''); 

type TASK_ID is new UNSI(3^jrYPES.UNSIGNED_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID 0; 

type LCM5_ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 

NO_LONG_ADDR : constant LCMS ADDRESS 0; 

pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record conponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad- 


C-8 




APPENDIX F OF THE Ada STANDARD 


ding where possible. Pragma PACK has no other effect on the 
storage allocated for record coirponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the remge of the siib- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only \Aen the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variedDle address elaboration ordering requirements 
prohibit inititalization of a variables vAiich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_aX)E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mnexanonics, 
a set of register definitions, euid a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


C-9 




APPEM)IX F OF THE Ada STANDARD 


CODE_n’( opcode, operand {, operand) ); 

v^ere n indicates the number of opereinds in the aggregate. 

A special case arises for a varieible nunijer of operemds. 
The operands are listed within a sx±»aggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, neuned notation 
roust be used (cf. RM 4.3(4)). 

CODE_0'( op => opcode ); 

The opcode roust be ein enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINEjCODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as aui arg*- . in any of these functions. 

Inline expansion of maut-le code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no irplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in ein address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Inplementation Characteristics of I/O Packages 

Insteuntiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) v^en the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 


C-10 




APPENDIX F OF THE Ada STANDARD 


is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide ein upper limit on the 
record size. In euiy case the maiximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) when the 
size of ELEMENTJTYPE exceeds that value. For example for 
unconstrained arrays such as string v^ere ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineH in SYSTEM cuid can be changed by a 
program before instcintiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are availeible to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_L)NITS. The itaximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an a±)solute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 


C-11 






APPEM)IX F OF THE Ada STANDARD 


this value is exceeded the conpiler will teminate the 
pilation of the uuiit with a FATAL error message. 


com- 


C-12 





