Certificate Information 


AD-A257 813 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 15, 1992. 

Conpiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: BBN TC2000 

under nX 3.0.1 

Target Computer System: BBN TC2000 

under nX 3.0.1 


Customer Agreement Number: 92-06-12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
920915W1.11268 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 




Validation Facility 
Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB CM 


45433-6503 






Organization 

Di rector ,H^)uter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


A^uoint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 




^cj/97% 3 

92-29312 

innnniiiiH :J)9f 










REPORT DOCUMENTATION PAGE 


Form Approved 
OPU No. 0704-0188 


5. FUNDING NUMBERS 


Pubic reporting burden for tfiii coflactlon of Wornmion b Mtimattd to awriQB 1 hour p*f fwponM, Indudbig lie ton. lor ra^Mring Mrucbom, Mwclilng ubtoig dto. touroM ototering and nutotbring tie (Mi 
n—d»d, and nwurtng th. coltocHon at Mormbbn. S«nd cornnw.. regbdbig tito burton or any Otar Mpdd of Mi coAKdon of Mormatiorv Induing suggMdont tor reducing td. budai. lo WaiNn^on 

HtadquulM S*rvto». DkKtoriM for Maimblon Opwafcxa and Hapom, 1215 Jaflaiaon Davit Wgharay. Suit 120*. Aitngton. VA 22202-4302. and todtaOMoaol Mxmadon and fbgutalory Alton, ORc el 
Management and Budget, WaaMngton, DC 20603. 


t. AGENCY USE ONLY (Leave Blank) 2. REPORT DATE 3. REPORT TYPE AND DATES 

Final: 15 Sept 1992 


4. TITLE AND SUBTITLE 

Validation Summary Report: Meridian Software Systems, Inc., Meridian Ada, Version 
4.1.3, BBN TC2000 under nX 3.0.1 (Host & Target), 920915W1.11268 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 



7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

HOLCF C0089 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESSES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Meridian Software Systems, Inc., Meridian Ada, Version 4.1.3, BBN TC2000 under nX 3.0.1 (Host & Target), ACVC 1.11 


S 


DTIC 

ELECTE S 
NOV 121992 I 



14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF REPORT OF ABSTRACT 

UNCLASSIFIED UNCLASSIFED UNCLASSIFIED 



NSN 7540-01-280-550 


Standard Form 298, (Rav. 2-89) 
Praacrfead by ANSI SKI. 239-128 



















92-06-12-MSS 


v6v e*'** em * 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 920915W1.11268 
Meridian Software Systems, Inc. 
Meridian Ada, Version 4.1.3 
HBN TC2000 under nX 3.0.1 -> 
BBN TC2000 under nX 3.0.1 


(FINAL) 


Prepared By: 

Ada Validation_Facility 
ASC/SCSL 

Wright-Patterson AFB OH 45433-6503 


Accefeion For 

NTIS CRA&I 
DTIC TAB D 

Unannounced □ 

Justification___ 


By 



Distribution / 


Availability Codes 

Dist 

Avail a 
Spe 

nd / or 

Cial 






BOLCF C0089 






Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 15, 1992. 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: BBN TC2000 

under nX 3.0.1 

Target Computer System: BBN TC2000 

under nX 3.0.1 


Customer Agreement Number: 92-06-12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
920915W1.11268 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 



Alexandria VA 22311 


rganTzation 
ter and Software Engineering Division 
Defense Analyses 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 






DECLARATION OF CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: BBN TC2000 

nX 3.0.1 

Target Computer System: Same as Host 


Customer’s Declaration 


I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded 1 a the name of the owner’s corporate name. 





Stow6 Boyd, President! 

Meridian Software Systems, Inc. 
10 Pasteur Street 
Irvine, CA 92718 


Date: 


2 % A/V ^ ^ 


*7 








TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 


1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 
For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act” (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-ISISa, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. Hie ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SFPRA3, 
and the procedure CHECK_FILE are used for this purpose. Hie package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. Hie package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. Hie procedure CHECK FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. Hie operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERNS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its target 

Implementation computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

validated Ada 
Implementation 

Validation 


Withdrawn 

£.est 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an agree¬ 
ment with an AVF which specifies the terms and conditions 
for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form n <section>.<subsection>:<paragraph>. N 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


Hie compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVD. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLQAT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
LONG_FLQAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINE_OVERFLOWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_CVERFLOWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; for this implementation, pragma INLINE 
has no effect unless the program is compiled and linked using global 
optimization. 


2-2 







IMPLEMENTATION DEPENDENCIES 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A. .B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIALIO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 
with unconstrained array types, and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

Hie tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


2-3 




IMPLEMENTATION DEPENDENCIES 


Hie following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USEJERRQR is 
raised when this association is attempted. 


CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERFQR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

Hie following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. Hie compiler rejects the use of the range 
FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

EA1003B was graded passed by Processing Modification as directed by the 
AVO. Hiis test checks whether legal units of a compilation are accepted 
if one of the compilation units is illegal. This test was processed with 
compiler option "-fl", which forces the compiler to generate code for 
legal units of a compilation. 


2-4 







IMPLEMENTATION DEPENDENCIES 


CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Die Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

William E. Crosby 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 


For sales information about this Ada implementation, contact: 

Meridian Software Systems, Inc. 

Attn: Jim Smith 
10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 

Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 




PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 

a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun 3 system and then transferred via an 
NFS ethernet to the host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Test results were transferred via the NFS ethernet to a Sun 3 system and 
were printed from that system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3786 

95 

88 

0 


201 

289 

(c+d+e) 

4170 

(a+b+f) 






PROCESSING INFORMATION 


Switch Effect 

-fE Generate error file for the Ada listing utility. 

-fl Ignore compilation errors and continue generating 

code for legal units within the same compilation 
file (for test EA1003B). 

-fQ Suppress "added to library" and "Generating code 

for" information messages. 

-fw Suppress informative warning messages. 

-1 Produce a listing file. 

The following switches appear as modifiers to the -1 command, 

in the form -lops: 

-c Produce continuous form Ada listings (no page 

headers). 

-p Obey pragma PAGE! directives within program even 

though the -c flag says not to generate page 
breaks. 

-s Output Ada listing to the standard output file 

instead of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customising the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where T represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


$BIG_INT_LIT 

$BIG_REAL_LXT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


200 — Value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 

(1..V-l-V/2 -> 'A') 

(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-l-V/2 -> 'A') & '1' & *"* 

(1..V-20 -> ' ') 


$MAX_LEN INT_BASED LITERAL 

"2:" & (1..V-5 -> »0») 6 "11:" 


A-l 








MACRO PARAMETERS 


Macro Parameter Macro Value 


$MAX LEN REAL BASED LITERAL 

“ "16:" & (1..V-7 -> '0') & "F.E:" 

$MAX_STRING_LITERAL 

& (1..V-2 -> 'A') & 

The following table lists all 
respective values. 

of the other macro parameters and their 

Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

8 

$DEFADLT_SYS_NAME 

BBNNX 

$DELTA_DOC 

2.0*M~31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESS1 

16*1* 

$ENTRY_ADDRESS2 

16*2* 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

f f 

§fixed_name 

NO_SUCH_FIXED_TYPE 

$FLQAT_NAME 

NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

itn 

$FORM_STRING2 

"CAMOT RESTRICT FILE CAPACITY" 

— * 

$GREATER THAN DURATION 

90_000.0 


A-2 








MACRO PARAMETERS 


Macro Parameter Macro Value 

$GREATER THAN DURATION BASE LAST 

T0_00"0_000.0 

$GREATER THAN FLOAT BASE LAST 
” l/BE+308 

$GREATER THAN FLOAT SAFE LARGE 
“ “ 1.BE308 

$GREATER THAN SHORT FLOAT SAFE LARGE 
“ “ 1.0E308 “ 

$HIGH_PRIORITY 20 

$ILLBGAL_EXTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAME1 

$ILLEGAL_EXTERNAL_FILE NAME2 

/NOOIRECTORY/FILENAME2 

$INAPPROPRIATE LINE LENGTH 

“ -1 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1 .ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1 .ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATICN -90_000.0 

$LESS_THAN DURATION BASE FIRST 

” -lff000_000.0 

$LINE_TERMINATQR ASCII.LF 

$LOW_PRIORITT 1 

$MACHINE CODESTATEMENT 

NULL; 

A-3 



MACRO PARAMETERS 


Macro Parameter Macro Value 


$MACHINE_CODE_TYPE 

INSTRUCTION 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2_147_483_648 

§MIN_INT 

-2147483648 

$NAME 

BYTE_INTEGER 

$NAME_LIST 

BBNJOC 

$NAME_SPECIFICATICN1 

/usr/t/world/acvc/val/X2120A 

$NAME_SPECIFICATI0N2 

/us r/t/Vorld/acvc/val/X2120B 

$NAME_SPECIFICATICN3 

/usr/t/Vorld/acvc/val/X3119A 

$NEG_BASED_INT 

16#FFFFFFFE» 

$NEW_MEM_SIZE 

1024 

$NEW_STQRJUNIT 

8 

$NEW_SYS_NAME 

BBN_NX 

$ PAGE_TERMINATOR 

ASCII.LP&A5CII.FF 

$RECORD_DEFINITICN 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CCX)E_TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

2048 

STICK 

1.0 

$VARIABLE_ADDRESS 

FCNDECL.\ftR_ADORESS 

$VARIABLE_ADDRESS1 

FCNDECL .VAR_AD0RESS1 

$VARIABLE_ADORESS2 

FCNDECL.VAR_ADDRESS2 

$YOUR PRAGMA 

NO SUCH PRAGMA 







APPENDIX B 


COMPILATION SYSTEM OPTIONS 


Die compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 




ccmpiLKnan SYSiin options 


-CD 

-?• 

- CE 

-f I 

-CL 

- CM 

-!Q 

-is 


MPtlDIAM ASA COMPILE* OPTIONS 


Generate debusing output. The -CO option ei«a« the 
compiler to generate the appropriate coda and data for 
operation with the Meridian Ada Debugger. 

Annotate asseably language listing. The -fa option 
causes the compiler to annotate an asseably language 
output file. The output is suppleaented by consents 
containing the Ada source sta t eme n ts corresponding to the 
asseably language code sections written by the code 
generator. To use this option, the -s option must also 
be specified, otherwise the annotated file is not emxtted. 

Generate error log file. The -Cl option causes the 
compiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the seae name as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

Ignore compilation errors and continue generating code 
for legal units within the ease compilation file. 

Generate exception location information. The -fL option 
causes location information (source file names and line 
numbers) to be maintained for internal checics. This 
information is useful for debugging in the event that an 
"Exception never handled" message appears when an 
exception propagates out of the main program. This flag 
causes the code to be somewhat larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division check and overflow_cheek. These checks are 
described in section 11.7 of the LAM. This flag reduces 
the size of the code. 

Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

Suppress all checks. The -fs flag suppresses all 


B-2 




OORPHATIGM SYSTEM OPTIOMB 


automatic checking, including numeric checking. This 
flag is sqoivslsnt to using pragma suppress on all chocks. 
This flag redness the sise of the code, and is good for 
producing "production quality" cods or for benchmarking 
the compiler. Note that there is a related ada option, 

-ft* to suppress only certain kinds of nunoric checks. 

-fU Inhibit library update. The -ftj option inhibits library 
updates. This is of use in conjunction with the -S 
option, certain restrictions apply to use of this option. 

-fv Cospile verbosely. The cospiler prints the name of each 
subprogram, package, or generic as it is cospiled. 
Information about the symbol table space remaining 
following compilation of the naaed entity is also printed 
in the form "[nkl". 

-fv Suppress warning sassages, with this option, the 

cospiler does not print warning sassages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -q option instructs the cospiler to run an additional 

optimization pass. The optimizer removes common 
sub-expressions, dead coda and unnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 

-lmodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional modifiers can be given to 
affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-1c suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -lp is only 
meaningful if -lc has also been given. Normally -lc 
suppresses all pagination, whereas -lep suppresses 
all pagination except where explicitly called for 
within the source file with a pragma page directive. 

s Use standard output. The listing by default is 
written to a file with the sane name as the source 
file and the extension .1st, as in simple.1st from 
simple.ada. Specifying -Is causes the listing file 


B-3 


0WPILAT1CN SYSTBK GFTXGNS 


to be written to tha standard o u tp ut stress inataad. 

t Gaaorata relevant text o u tp ut only. Tho listing by 
dafault contains tbs antirs soureo prograa as troll 
as intsgspsr a sd srror messages and warning messages. 
Spacifying -it causas tba coapilar to list only tbs 
sourca linas to wbicb arror messa ge s or warning 
aassagas apply, followad by tba nassagas tbansalvas. 

Tba dafault listing fila ganaratad has tba saaa nana as 
tba sourca fila, with tba extension .1st. For axanpla, 
tba dafault listing fila prod uc ad for sinpla.ada has tba 
nana siapla.lst. '"ha listing fila is placed in tba 
currant worlcing directory. Hots: -1 also causas an 
arror log fila to ba producad, as with tba -fZ option. 

-L library-naaa 

Dafault: ada.lib 

Use altamata library. Tha -L option spacifias an 
alternative naaa for tba prograa library. 

-N No cospile. This option causas tba ada conaand to do a 

"dry run" of tha coapilation process. Tba conaand 
invoked for each processing step is printed. This is 
siailar to tha -p option, but no actual processing is 
performed. 

-9 Print compile. This option causas tba ada conaand to 

print out tha conaand invoked for each processing step 
as it is performed. 

-3 Produce assembly coda. Causas the coda generator to 

produce an assembly language sourca fila and to halt 
further processing. 


B-4 



COMPILATION SYSTEM OPTIONS 


The linker options of 
Appendix, are provided 
otherwise, references in 
to this report. 


LINKER OPTIONS 

this Ada implementation, as described in this 
by the customer. unless specifically noted 
this appendix are to linker documentation and not 


B-5 



OWPnATION SYSTEM OPTIONS 


MERIDIAN ADA LINK ER OPTIONS 


~A Aggressively iniin*. This option instruct* th* optimizer 

to aggressively inline subprograms when used in addition 
to th* -c option. Typically, this maans that subprograms 
that ar* only eall*d one* are inlined. If only th* hs 
option is us*d, only subprograms for which pragma in ) \ n m 
has bom specifi*d ar* inlined. 

“ c compilar-program-nam* 

Default: (as stored in program library) 

Us* alternate compiler. Th* -c option specifies the 
complete (non relative) directory path to the Meridian 
Ada compiler. This option overrides th* compiler 
program name stored in the program library. Th* -c 
option is intended for use in cross-compiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-I Supprese main program generation step. The «f option 

suppresses the creation and additional code generation 
staps for th* temporary main program file. The -f option 
can be used when a simple change has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-9 Perform global optimization only. Th* -g option causes 

bamp to invoke th* global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. Th* —G option 

causes bamp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, compilation units to be optimized 
must have been compiled with th* ada -K option. 

-I Link th* program with a version of the tasking run-time 

which supports pre-emptive task scheduling. This option 
produces cod* which handles interrupts more quickly, but 
has a slight negative impact on performance in general. 

-L library-name 


B-6 



COMPILATION SYSTBT OPTIONS 


Default: ada.llb 

Use alternate library. Tba -L option specifies tha name 
of tha program library to ba consulted by tha bamp 
program. This option overrides tha default library name. 

-n Ho link. The -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N Ho operations. The -H option causes the bamp command to 

do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output*file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
by the bamp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the bamp command 

to print out tha actions it takes to generate the 
executable program as the actions are performed. 

*v Link verbosely. The -v option causes the bamp command to 

print out information about what actions it takes in 
building the main program. 

>w Suppress warnings. This option allows you to suppress 

warnings from tha optimizer. 


B-7 


APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2_147_483 648 .. 2 147_483_647; 
type SHORT_INTEGER is range -32758 .. 32757; 
type LONGINTEGER is range -2 147_483 648 .. 2_147_483_647; 
type BYTE_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-l 







APPENDIX F OF THE Ada STANDARD 


Appendix F Implementation-Dependent Characteristics 


This appendix lists implementation-dependent characteristics of Mendian 
Ada. Note that there are no preceding appendices. This appendix is called 
Appendix F in order to comply with the Reference Manual for the Ada 
Programming Language* (LRM) ANSI/MlL-STD-1815A which states that 
this appendix be named Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration 
r epresentation clauses, record representation clauses, address clauses, 
interrupts, package system, machine code insertions, pragma interlace, 
and unchecked programming. 


F.l Pragmas 

The implemented pre-defined pragmas are: 
elaborates See the LRM secnon 10.5 
intarfaoa See secnon F.l. 1 

list See the LRM Appendix B 

pack See secnon F.l .2 

page See the LRM Appendix B 

priority See the LRM Appendix B 

suppress See secnon F.l.3 

inline See the LRM secnon o 3.2. This pragma is not actually effecuve 
unless you compile/link vour program using the global 
optimizer. 

The remaining pre-defined pragmas are accepted, but rresentlv ignored. 

controlled optimize system_name 

shared storaae_um.t menvory_size 

Named parameter notation for pragmas is not supported 

When illegal parameter forms are encountered at compile time, the 
compiler issues a warning message rather than an etror as red aired bv 
the Ada language definition. Refer to the LRM Appendix B for additional 
information aoout the rre-defined pragmas 

F. 1.1 Pragma Interface 

The torm of pragma interlace m Mendian Ada is 

pragma inurtani *mrua?e. suuvroeram [, .':n*-namr ] ) ; 

:3N ta Ccmciier user s Guice p age >77 


C-2 







APPENDIX F OF HIE Ada STANDARD 


inatxF Vnaemeo f afloo-Ogpenoenr Ch a rocteritna ___ 

where; 

language This is the interface language, one of the names assembly, 
builtin. c, or internal. The names builtin and internal are 
reserved for use by Men dun compiler maintain ers m 
run-nme support packages. 

subprogram This is the name of a subprogram to which the pragma 

xncarfnon applies. 

link-name This is an optional string literal specifying the name of the 
non-Ada subprogram co r responding to the Ada 
subprogram named in the second parameter. If link-name is 
omitted, then link-name defaults to the value of subprogram 
translated to lowercase. Depending on the language 
specified, some automatic modifications may be made to 
the link-name to produce the actual object code symbol 
name that is generated whenever referen c e s are made to 
the corresponding Ada subprogram. The object code 
symbol generated for unk-name is always translated to 
upper case. 

It is appropriate to use the optional link-name parameter to 
pragma xntaurlaoe oniv when the interface subprogram 
has a name that does not correspond at all to its Ada 
identifier or when the interlace subprogram name cannot 
be given using rules for constructing Ada identifiers ie.g., 
if the name contains a 'S' character). 

The cnaractenstics of object code svmbols generated for each interlace 
language are: 

assembly The object code symbol is the same as link-name 

builtin The obiect code symbol is the same as link-name, but prefixed with 

two underscore characters <"_This language interrace 

is reserved for special interfaces defined bv Meridian 
Software Systems. Inc. The builtin interface is presently 
used to declare certain low-ievei run-nme operanons 
whose names must not conflict with programmer-denned 
or ianguage system defined names. 

c The obiect code svmbol is othe same as unk-name. but with one 

underscore character prepended. This is the 
convention used by the C compiler. 

internal No object code svmbol is generated for an internal ianguage 
interface; this language interlace is reserved for special 
interfaces defined by Meridian Sortware Svstems. inc. The 
internal interface is presently used to declare certain 
macmne-ievei bit operations. 

No automatic data conversions are performed on parameters of anv 
interface subprograms, it is up to the programmer to ensure that catling 
conventions match and that any necessarv data conversions taxe nace 
when calling interface subprograms. 


z age 0 


Tevseo 5/28/9? 

C-3 


SBN nx Comoner user s Gutae 




APPENDIX F OF THE Ada STANDARD 


Attrtxam- 


A pragma intarfioa tnav appear within the same declarative part as 
the suoprogram to which the pragma mtarfaa* applies, following the 
subprogram declaration, and pnor to the first use of the suoprogram. A 
pragma uncart a oe that appues to a subprogram declared in a package 
specification must occur within the same package specincanon as the 
suoprogram declaration; the pragma lmcarfaoe mav not appear m the 
package oodv in this case. A pragma interface declaration for either a 
pnvate or non private subprogram declaration may appear in the private 
pan ot a package specification. 

Pragma interf tot for iibrarv units is not supported. 

Refer to the LRM section 13.9 for additional information atjout pragma 
interface. 


F.1.2 Pragma Pack 

Pragma pacx is implemented for composite fvpes i records and arrays). 

“raema pack is permitted following the composite rvpe declaration to 
•vnicn i* lopues. provided that the pragma occurs witrun tne same 
declarati ve pan as tne composite rvpe aeciaranon. perore anv o meets or 
components ot the composite rvpe are declared. 

Note that the aeciaranve pan resmcnon means that tne rvpe aeciaranon 
and accompanying pragma pec* cannot be spilt across a package 
specincanon ana body. 

The effect of pragma pack is to minimize storage consumnnon by 
discrete component types wnose ranges permit packing L'se of pragma 
pack does not defeat ailocauons or alignment storage gaps for some 
record types. Pragma pack does not affect the representations ot real 
rvpes. pre-aefinea integer types, ana access rvpes 


F. 1.3 Pragma Suppress 

i’raema suppress is implemented as described in tne lRM secnon ll.T. 
■vitn tnese differences: 

• Presently, division.check ano ovenlow.check must oe suppressed 
via a compiler flag, -fN: pragma supprass is ignored for these two 
numeric cnecus. 

• The optional "ON ■>' parameter name notation lor pragma 
suppress is ignored. 

• The ornonai second parameter to pragma suppress is ignored; the 
pragma always appues to tne entire scope in wmcn it appears. 


r.2 Attributes 


All attributes aescnoea in the LRM Appendix A are supported. 


rr.N r.f. Ccmoner user s Gu>ae 


*vsso B '21/92 


-age i£! 


C-4 






APPENDIX F OF THE Ada STANDARD 


AppenabtF jggggggnggjjggggggnggnrOCTgcrgngj g 


F.3 Standard Types 

Additional standard types are defined in Meridian Ada: 

• bvte_int e ger 

• short_integer 

• long_integer 

The standard numeric types are defined as: 

type byte_integer ia range -12* .• 127; 

type (kcrt_ut* 9 tr l* range -32768 . . 32767 ; 

type meager is range -2147403C4S 2147483647; 

type long_xnteger xa range -21474*3448 .. 2147483647; 

typa float Xa dxgxta 15 

range -1.79769313466231X+308 1.78768313486231SO08; 

type duraexon xa delta 0.0001 range -86400.0000 
86400.0000; 


F.4 Package System 

The specification of package system is: 

package ayatea xa 

type addreaa xa new long_xnteger; 

type nans xa (bbn_tuc> ; 

ayaten_ n e e e : oonetant nans :• bbn_na; 

atorage_unxt : oonatant :■ 8; 
nenory_sxre : oonatant ;• 1024: 

— Syatea-Dependant Maned Numbers 


nu.n_i.nt 

aax_dxgxta 

aaajeantxaaa 

fxne_delta 

tick - 


constant :• -2147483648; 
oonatant :■ 21474*3647; 
oonatant :• 15; 
eonatant :• 31; 
eonatant :■ 2.0 •• (-31); 
constant :« 1.0; 


— Other Systan-Oependanc Declaration* 
subtype priority xa integer range 1 .. 20: 

The value ot system.memory_size is presently meaningless. 


: cge ~2 


tavsso'?/i7.'0? 

C-5 


SBN nx Comater user s Guioe 









APPENDIX F OF THE Ada STANDARD 


g g g cw o r g on gaorwnrowon Cl a u t m 


F.5 Restrictions on Representation Clauses 

F.5.1 Length Clauses ~ 


A size specification (t* axzai is rejected if fewer bits are specified than 
can accommodate the type. The minimum size of a composite type may 
be subnet to application of pragma pack, it is permitted to specify 
precise sizes for unsigned integer ranges, e.g., 6 for the range 0.. 255. 
However, because of requirements imposed bv the Ada language 
definition, a full 32-bit range or unsigned vriues. i.e. 0.. (2**32) - 1 . 
cannot be defined, even using a size specification. 

The specification of collection size it' scoreoe_ei.se > is evaluated at 
run-time wnen the scope of the type to which the length clause applies is 
entered, and is therefore subtect to rejection i via ecorege_error) based 
on available storage at the tune the allocation is maoe. A collection may 
include storage used for run-time administration ot the collection, and 
theretore snouid not be expected to accommodate a specinc number of 
obtects. Furthermore, certain classes of obiects such as unconstrained 
discriminant array components or records mav be allocated outside a 
given collection, so a collection may accommodate more ootects than 
might be expected. 

The specification ot storage for a task aenvauon it' stono«_*ixai is 
evaluated at run-time when a task to wrach the length clause applies is 
aenvated. and is therefore subtect to retecoon i via atorag«_*rror) 
based on available storage at the tune the allocanon is made. Storage 
reserved for a task activation is separate from storage needed for any 
collections defined within a task body. 

The specification of small for a nxed point tvpe it' snail) is subject oniv 
to restrictions defined in the LRM section 13.2. 


F.5.2 Enumeration Representation Clauses 

The internal coae for the literal of an enumeranon tvpe named in an 
enumeration representation clause must ce m the ranee oi 
standard.integer 

The value of an internal code mav De ootaineo bv aopivine an 
appropriate instantiation or unchecked_conversxon to an integer tvpe 


F.5.3 Record Representation Clauses 

~he storage unit offset (the at static jimvie_czrressicn ram is given in 
terms ot 6-bit storage units ana must oe even. 

•. bit rosinon i the ranee parti applied to a discrete tvpe component mav 
oe in tne ranee 0. . IS. witn 0 beine me least sienmcant nt ot a 
-cmronent. A ranee specincanon mav not specirv a size smaller than can 
accommodate me component. A ranee specincanon tor a component not 
accommodating oit raewng mav nave a nigner urrer pound as 
appropriate te.g., C. . 21 tor a discriminant string component). Refer to 


53 N rj Czmoner user s Swae 




-ope is3 







APPENDIX F OF THE Ada STANDARD 


AooenatxF imomrm nt cmofyOeoenaenfChes r a cm M cs 


<ht int e rn al data reprsmnt a Utai of a grven cumpo ne m in d et e rmining the- 


Components of discrete types for which bit positions are specified m*v 
not straddle 16-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must evaluate 
to 1,2.4, or 8, and may not be smaller than the highest alignment 
retpured by any component of the record. On the CLIX operating system, 
this means that some records mav not have alignment clauses smaller 
than 2. 


F.5.4 Address Clauses 

•An address clause may be supplied for an object (whether constant or 
variable) or a task entry, but not for a subprogram, package, or task unit 
The meaning of an address clause suppliea for a task entrv is given m 
section F.5.5. 

An address expression for an object is a 32-bit segmented memorv 
address of type system, address. 


F.5.5 Interrupts 


A task entry's address clause can be used to associate the entry with a 
UNIX signal. Values in the range 0.. 31 are meaningful, and represent 
the interrupts corresponding to those values. 

.An interrupt entry may not have anv parameters. 


F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means 
of type conversion. 


F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote 
implementation-dependent components. 


F.7 Unchecked Conversions 

There are no restrictions on the use of unchacJc»d_conver«ion 
Conversions between ooiects whose sizes ao not coruorm mav resuit in 
storage areas with undefined values. 


: cge '■&* 


f»ymrnat/2tm 

C-7 


3BN nx Comoner user s Gutae 





APPENDIX F OF THE Ada STANDARD 


Saucg Unm u\J jSSSSSEUBBE - 


F.8 Input-Output Packages 

A summary of the implementation-dependent input-output 
characteristics is: 

* In calls to open and create, the form parameter must be the empty 
string (the default value). 

* More than one internal file can be associated with a single external 
file for reading only. For writing, only one internal file may be 
associated with an external file; Do not use reset: to get around this 
rule. 

* Temporary sequential and direct files are given names. Tempor a ry 
files are deleted when they are closed. 

* File I / O is buffered; text files associated with terminal devices are 
Line-buffered. 

* The packages eequential_io and dAr«ct_io cannot be 
instantiated with unconstrained composite types or record types 
with discriminants without defaults. 


F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited 
to 200 characters in length. 


38N nX Comoter User s Gmae 


Javmo e/78/97 


Page 185 




