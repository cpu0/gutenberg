PlMcnpoMn 


AD-A248 551 'ION page 

I (Mmm ■•M. ...._- 


I Form Approved 
Om No. 070^188 


MM. Mudng t. im to mlMkig MniMoML miMig iriaing Mi HueH^MqariiMMmlAja 
IMM or Mr tow lipM il M eolMtoi gl Momtolm takrtng tug)Mlto> to Mdudf^ t* buton. 

* HViDto. Sito I2M. Mhgtoi. VA 2!i0e4S02. Md to tw Ota ol MNiMtoi Mtf R^uMny Mtoi. Otos ol 


MLY (Loam Blank) 


I id. nerv>nt um 


Final: 18 February 1992 to 01 Jun 1993 


IS.FUNDIM 


Validation Summary Report: Verdix Corporation, VADS SYSTEM V/860 RELEASE 
4, VAda-110-9090, Version 6.1, Okidata I860 Workstation (Host & Target), 
910920W1.11213 


Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND AODRESS(ES) 

Ada Validation Facility, Language Control Facility ASO/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8. PERFORMING ORGANi; 
REPORT NUMBER 

AVF-VSR-510.0292 


9. SPONSORING/MONITORING AGENCY NAME(S) AND AOORESS<ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 

11. SUPPLEMErfTARY NOTES 


10. SPONSORINGMONITORINQ AGENCY 
REPORT NUMBER 


112a DISTRIBUTKDN/AVAJLABIUTY STATEMENT 

Approved for public release; distribution unlimited. 


112b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS SYSTEM V/860 RELEASE 4, VAda-110-9090, Version 6.1, Wright-Patterson AFB, Okidata I860 
Workstation (Host S Target), ACVC 1.11. 


_DTIC 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compfler Val. 
CapabUity, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


OF REPORT 
UNCLASSIFIED 

NSN7S4(V01-280-SM 


UNCLASSIFED 


OF ABSTRACT 
UNCLASSIFIED 


SMird Form 2M. (Rav. 2-ee) 
PTMOitod by ANSI SM. 230-128 


Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was ccmpleted on 20 September 1991. 

Conqpiler Name and Version: VADS SYSTEM V/860 RELEASE 4 

VRda-110-9090, Version 6.1 

Host Computer System: Okidata I860 Workstation 

(UNIX SYSTEM V/860 RELEASE 4 vl.O) 

Target Computer System: Okidata I860 Workstation 

(UNIX SYSTEM V/860 RELEASE 4 vl.O) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910920W1.11213 is awarded to Verdix Corporation. Uiis certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



JSS 

Dire*^ 
Institute 
Alexandria VA 


Organization 

iter emd Software Engineering Division 
Defense Analyses 
22311 


Siria Joint Progr 2 un Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



1 Aeeeeslon For ^ | 

' ITI5 ORAftI 
DUG TAB 
Dnaimounced 
Juetlficatle 

□ 

□ 

n 


By 

Distribution^ 

, Availability Cedes 

Dial 

Avail 

Speo 

and/er 

tal 








AVF Control Number: AVF-VSR-510.0292 

18 Febnaary 1992 
91-07-16-VRX 


Ada CC»1PILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 910920W1.11213 
Verdix Corporation 

VADS SYSTEM V/860 RELEASE 4, VAda-110-9090, Version 6.1 
Okidata I860 workstation ■> Okidata I860 Workstation 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


92-09336 

lllllllll 


92 4 10 059 




DECLARATION OP CONFORMANCE 

The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 
Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation; 

Ada Compiler Name and Version: VADS SYSTEM V/860 RELEASE 4 

VAda-110-9090, Version 6.1 

Host Computer System: Okidata I860 Workstation 

(UNIX SYSTEM V/860 RELEASE 4 vl.O) 

Target Computer System: Okidata I860 Workstation 

(UNIX SYSTEM V/860 RELEASE 4 vl.O) 

Declaration: 

[I/we], the undersigned, declare that [l/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 





TABLE OF CC3NTENTS 


T 

I 

‘ C3iAPTER 1 INTRCHXJCTION 

1.1 USE OF IHIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTIOJ.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATIOJ SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


L 













OiAPTER 


1 


INTRODUCTION 


■Hie Ada iiqjleinentatlon described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Suimnary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be foxand in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the cooputers, operating systems, and conpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and ccmplete, or that the siibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF xidiich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1601 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTROTUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Proqrainming Language, 

ANSI/MIL-STD-lfilSA, February iSsS and ISO 8652-1587. 

(Pro90] Ada Ccanpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Conpiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vhich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result v^en they 
are executed. Three Ada library imits, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some coopiler 
optimizations allowed by the Ada Staradard that would circumvent a test 
objective. The package SPPRT13 is used by nany tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_F1LE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal leuiguage usage. Class 
B tests are not executable. Each test in this class is coopiled emd the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code \diich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this iiqilementation is provided in topen^x A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove \inforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this i(if}lementation are described in section 2.3. 


1-2 




INTRCCUCnON 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding ^ragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Cotpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Ccmpiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support prograims, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification laody which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guideuice for operations of the Ada certification system. 

Organization 
(AVO) 

Ccmpliemce'of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, incliiding arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 



INTRCmUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Conpjter 
System 

inappliceOsle 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services {of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada inqpleinentation for 
vrtiich validation status is realized. 

A conqputer system v^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Stcuidardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware implementations are possible. 

A conputer system vdiere the executadjle form of Ada programs 
are executed. 


The con^iler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration lPro90). 

The process of checking the conformity of an Ada ccaopiler to 
the Ada programming language arid of issuing a certificate 
for this iiqplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the ^ia programming 
language. 




CHAPTER 2 


IMPLEMENTATICW DEPENDENCIES 


2.1 WITHDRAWN TESTS 

•flie following tests have been withdravm by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

8630228 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE21071 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vdiich are irrelevant 
for a given Ada inpleroentation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Comroentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






inPLENENmTIGN DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L,.Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type IjONG_INTEGER; for 
this in^lementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this inplementation, there is no such type. 


C35713D amd B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LC»«;_FLClAT, or SHORT_FLClAT; for this 
inplementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
iii{>lementation, HAXJNANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_ClVE3^FLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this iiqplementation, MACHINEjDVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inpleraentstion, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 


IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this Inplementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this inplementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR \>^en the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater them 150000, making the checking of this 
objective impractical. 


2-3 




IMPLEMOnATIGN DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) viere required for 22 tests. 

Uie following tests were split into two or more tests because this 
ijUjlementation did not report the violations of the Ada Steuidard in the 
way expected by the original tests. 

B24009A B26005A B33301B B38003A B38003B B38009A 

B38009B B85008G B8‘^008H BC1303F BC3005B BD2B03A 

BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. Ihe compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3,5.7:12). 


CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A..C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
Uhchecked_Conversion according to the interpretation given in Al-00590. 

The AVO rxiled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTHjCHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CEIECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 





CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada inqplementation, contact: 

Chris Perret/Sam Quiring 

Verdix Corporation 

1600 NW Coiqpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 

For sales information about this Ada inplementation, contact: 

Stephen F. Zeigler 

Verdix Corporation 

1600 NW Ccxqpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inqplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 


PROCESSING ZNPOBHATIGN 


3.2 SUmARY OF TEST RESULTS 

An Ada loplementation passes a given ACVC version if it processes eadi test 
of the custGodzed test suite in accordance with the Ada Programning 
Language Standard, ^diether the test is eqpplicable or inapplicable; 
otherwise, the Ada loplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and 2 qpplicable), a result was 
obtained that conforms to the Ada Progranming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maxiaum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of ^[p>licable Tests 3805 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) NOn-Processed Floating-Point 

Precision Tests 201 

£) Total Number of Inapplicable Tests 270 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUnCN 

A magnetic tape containing the custoodzed test suite (see section 1.3) was 
taken on-site the vali^tion team for processing. The contents of the 
magnetic tape were loaded csito a Sun Workstation aixl copied over Ethernet 
to the host computer. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada ioplementation. 


Testing was performed using command scripts provided the customer and 
reviewed by the validation team. See J^pendix B for a complete listing of 
the processing options for this implemmtation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 



processing INFC»MATI0N 


Qption/Switch Effect 


suppress generation of warning messages 


listings, and job logs were captured on 

onsite 




APPENDIX A 


MACPO PABAMETEHS 


This aK»ndix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89], The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum ir^t-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

499 

SBIG_1D1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & ’3' & 
(1..V-1-V/2 -> 'A') 

$BIG_1D4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_1NT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

{1..V-20 ) 


$NAX_LEN_INT EASED LITERAL 

"2:" « (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED LITERAL 

"16:" i (1..V-7 -> '0') 6 "F.E:" 

A-1 



MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

Salignmq^ 

4 

$CGONT_LAST 

2_147_483_647 

$DEFAULT_MEM_SI2E 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SyS_NAME 

I860JSYSTEM_V 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_Ara)RESSl 

SYSTEM."+"(16#80#) 

$ENTRY_A£X)RESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r f 

$FIXED_NAHE 

NO_SUCH_TYPE 

$FLQAT_NAME 

NO_SUCH_TYPE 

- $FCWM_STRING 

fitl 

$PC3RM_ST11ING2 

"CANNOT_RESTHICT_FILE_CAPACITY" 


$GREATER THAN DURATIGN 

100_000.0 

$GREATER THAN DURATIGN BASE LAST 

To_ooT)f_ooo.o 

$GREATER THAN FLGAT BASE LAST 
■ “ ■ l.lE+308 

$GREATER THAN FLOAT SAFE LARGE) 

~ 5.TFE307 

A-2 





lUVORO PABAHETEBS 


$GBEATEB THAN SHCXtT FLOAT SAFE LABGB 

9.0E37 

$H1GH_PRI0RITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'Villegal/file_neunB/2} l%2102c.dat" 

$ILLEGAL_EICTERNAL_FILE NAME2 

^/illegal/£ile_naine/CE2102C* .dat" 

$INAPPBOPRIATE LINE LE2IGIH 

-1 

$INAPPBOPBIATE PAGE LEXIGTH 
" -1 

$INCLUM:_PBAGMA1 PBAGMA include ("A28006D1.TST") 

$INCLUDE_PBAGMA2 PRAGMA INCLUDE {"B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_TOAN DURATION_BASE FIRST 

-1TT_000_000.0 

SLINEJTEBWINATOR ASCII.LF & ASCII.FF 

$LOW_PRI(»ITy 0 

- $MACHINE_OCDE_STATE?ENT 

COOE_0'(OP -> NOP); 

$MACHINE_OCX)E_T«>E CCX)E_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_IIfr_PLUS_l 2_147_483_648 

$MIN_lMr -2_147_483_648 

$NAHE 


TINY INTEGER 



MACRO PARAHEIERS 


$NAME_LIST i860_Systeiu_V 

$NAME_SPECIFICATICN1 A«sr/acvcl.ll/c/e/X2120A 
$NAME_SPECIFICATIQN2 A»r/acvcl.ll/c/e/X2120b 
$NAME_SPECIFICATION3 /Usr/acvcl. ll/c/e/X3119A 
$NEG_BASED_INT 16«F000000E# 

$NEW_MEM_SIZE 16_777_216 

$NEW_S'IORJJNIT 8 

$NEW_SYS_NAME i860_System_V 

$PAGE_TERMINATOR ASCII.FF 

$RECORD_DEFINITION RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME CaDE_0 

$TASK_SI2E 32 

$TASK_STORAGE_SI2E 1024 

$TICK 0.01 

$VARIABLE_ArX)RESS VAR_1'ADDRESS 

$VARIABLE_AM)RESS1 VAR_2'AK)RESS 

$VAR1ABLE_AIX}RESS2 VAR_3' AIX)RES5 

SYOUR PRAGMA PRAGMA PASSIVE 




APPENDIX B 


COMPILATION STffiTEM OPTIONS 


The conpiler opticms of this Ada in{>leinentation, as described in this 
^^ndix, are provided by the customer. Unless specifically noted 
otherwise, references in this a^^ndix are to ccxnpiler documentation and 
not to this report. 


ada 


Ada coopiler 
Syntax 

ada (options! (source_file]... tlinker_options) 
(object_file.o]... 

Description 

The command ada executes the Ada conpiler and compiles the 
named Ada source file, ending with the .a suffix. Ihe file 
must reside in a VADS library directory. Ihe ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
sxibstituted for .a. The -o qption can be used to produce an 
executable with a name other than a.out, the default. For 
cross compilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-n option is used, the coopiler automatically invokes a.Id 
and builds a conplete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 


B-1 



CXMPIIATION SYSTEM OFTIGNS 


Connand line c^ticais may be specified in any order, but the 
order of conpilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS locatic»vl3in on a system will execute the correct 
compTler compcxients based upon visible library directives, 
the option -sh is provided to print the name of the 
cooqponents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_naffle (archive) Treat file_name as an ar file. 

Since scane archive files end with .a, -a is used to 
distinguish archive files from Ada source files/ 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as unconpiled. Ihe -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process conpilation error messages using 
a.error and send it to standard output. Only the source 
lines containing errors are listed. Only one -e or -E 
option should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source. 

err. ihe file of raw error messages can be used as input to 
a.error 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 



CCMPILATICK SYSTTM OPTIONS 



-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, euid call the 
environment editor ERROR_EDITOR- (If ERR0R_EDIT0R is 
defined, the environment variable ERBOR_PATroRN should also 
be defined. ERBQR_PATTERN is an editor search comnand that 
locates the first occurrence of *###' in the error file.) If 
no editor is specified, call vi(l). 

-K (keep) Keep the intermediate language (IL) file 
produced by the coopiler front end. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file atoreviations, see also 
Operating system documentation, ld(l) 

-H unit_name (main) Produce an executable program iising 
the named unit as the main program. The unit must be either 
a parameterless procedure or a parameterless function 
returning an integer. The executzdJle program will be left in 
the file a.out unless overridden with the -o option. 

-M source_file (main) This option is like -M unit_najoe, except 
that the unit name is assumed to be the root 

name of the .a file (for foo.a the unit is foo. Only one .a file 
may be preceded by -M. 

-o executable file (output) This option is to be used in 
conjunction with the -n option. executable_file is the name 
of the executable rather than the default a.out. 

-O[0*91 (optimize) Invoke the code optimizer (OPnM2). An 
optional digit (there is no space before the digit) limits 
the number of passes by the optimizer: 

no -0 option, make one pass 

-O no digit, optimize as far as possible 

-OO prevents optimization 

-01 no hoisting 

-09 full optimization 

The addition of the INFO directive, 0FTIN3:INFO:TRUE, to the 
ada.lib will cause the compiler to use a new optimizer (0PTIN3) 


B-3 




CXDMPILATION SYSTEM OPTIONS 


that generates faster code. 

The defaiilt level of optimization for OPTIM3 is 04. Note 
that optimization levels for 0PTIM3 are more than sinply 
additional iterations: 

-O full optimization (same as 0FT1H2 ada -09) 

-OO prevents optimization 

-01 no hoisting (same as 0PTIM2 ada -01) 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting from loops with maximum passes 

-07 hoisting frcmi loops and branches 

-08 hoisting fron loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIDE, 
INFO Directive Names on page 

a.info on page , and for more information about 
optimization, see USER'S GUIDE, Conpiler Optimizations on 
page . 

-R VRDS_library (reconcile instantiation) Force analysis 
of all generic insteuitiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) ^^ly pragma SUPPRESS to the entire 
carpilation for all suK>ressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the coopilation. 

-V (verbose) Print coo^iler version number, date and time 
of compilation, name of file compiled, command input line, 
total compilation time, and error summary line. Storage 

»-4 



CCMPILATICN SYSTEM OPTIONS 


usage information about the object file is provided. With 
OPTIN3 the output format of conpression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 

-w (warnings) Suppress warning diagnostics. 

See also a.das on page ; a.db on page ; a.error on page ; 
a.Id on page ; a.mlclib on page ; and Operating System 
reference documentation for the ld(l) utility. 

Diagnostics 

Ihe diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
^jpendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are tr linker documentation and not 
to this report. 


a.Id 


prelinker 

Syntauc 

a.Id [options] unit_naroe [ld_options] 

(^tions 

-DX ^debug) Debug memory overflow (use in cases where 
linking a large number of units caiises the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unit_na]ne as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order emd 
suppress linking. 

-L libraryjiame (library) ^>erate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tEe output rather than the defaxilt, a.out. 


B-5 



COMPIIATIW SYSTEM OPTIONS 


-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linlcing. 

-V (verl30se) Print the linker command before executing it. 

-V (verify) Print the linker ccanroand but suppress 
execution. 

Description 

a.Id collects the object files needed to make unit name a 
main program and calls theUNlX linker ld(l) to lihli 
together all Ada and other language objects required to 
produce an executable image in a.out. unit name is the 
main program and must name a non-generic subprogram. If 
\init_name is a function, it must return a value of the type 
STANDARD.INTEGE3^. This integer result will be passed back to 
the UNIX shell as the status code of the execution. Ihe 
utility uses the net files produced by the Ada compiler to 
check dependency information, a.Id produces an exception 
mapping tedsle and a vmit elaboration table and passes this 
information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 
Besides information generated I^y the conpiler, these 
directives also include WITHn directives that allow the 
automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses 
in the Ada source. Any number of WITHn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at WITHI. The directives are recorded 
in the library's ada.lib file and have the following form. 

WITHI4LINK:object_file: 

WITtt:LINK:archive_f ile: 

WITHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unlt_name are passed on to the linker. 

B“6 



COMPILATION SYSTEM OPTIONS 


These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VADS conpilers to exist 
on the same host. The -sh option prints the name of the 
actual execute±)le file. 

Files 

a.out default output file 

VADS_location/standard/* startup emd standard library routines 
See also Operating system documentation, ld(l). 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada iirplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report, implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is ramge -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINy_INTEGER is -128 .. 127; 

type FLOAT is digits 15 reUige -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type SHORT FLOAT is digits 6 range -3.40282E+38 .. 

3.40282E+38; 

type DURATION is delta 0.001 range -2147483.648 .. 

2147483.647; 


end STANDARD; 


C-1 



APPEM>IX F OF THE Ada STANDARD 


ATTACHMEOT 1 


APPENDIX F. Inplementation-Dependent Characteristics 


1. inplementation-Dependent Pragmas 

1.1. INLINEjCXJLY Pragma 

The INLINE_ONLY pragma, v^en used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLlNEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BU1LT_IN Pragma 

The BUILT IN pragma is used in the implementation of scane 
predefineef Ada packages, but provides no user access. It is 
used only to inpleroent code b^ies for which no actual Ada 
body ceui be provided, for exanple the MACHINE_CODE package. 

1.3. SHARE_CCOE Pragma 

The SHARE_CCX>E pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
any subsequent ccmpilation unit. 

When the first argument is a generic unit the pragma aiplies 
to all instantiations of that generic, when the first argu¬ 
ment is the name of a generic instemtiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 


C-2 


APPE^IX F OF THE Ada STANDARD 


When the second argument is FALSE each instantiation will 
get a xjnique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic xinit. 

The name pragma SHARE BODY is also recognized by the imple¬ 
mentation eind has the same effect as SHAR£_CODE. It is 
included for conpatedsility with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type vdiose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
varieible defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification amd 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACEJMAME Pragma 

The INTERFACE NAME pragma takes the name of a a variable or 
subprogrzun defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or sutprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop varieOsle, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 


C-3 



APPENDIX F OF THE Ada STANDARD 


.f- 


OFF is used emd any implicit ccxie needs to be generated. 
The default is ON. 


1.8. OPTIMIZE_CXOE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vAiether the code shoxd-d be optim¬ 
ized by the conpiler. Die default is ON. When OFF is 
specified, the ccmpiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CONTROLLED 

Diis pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in ^jpendix B of the 
Ada RH. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. Die 
Ada subprograms can be either functions or procedures. Die 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5., LIST 

This pragma is inplemented as described in i^ppendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

Diis pragma is recognized by the implementation. Die inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccmqpiled. 

2.7. NON_REENTRANT 

Diis pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi- 


C-4 




APPENDIX F OF THE Ada STANDARD 


ately within a library package spec or body. It indicates 
to the canpiler that the sui^rogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a sxibprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or eui Ada package that is referenced fran a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code emd issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the 
Ada RH. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

-PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVEdNTERRUFT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will generated at compile time aixi will 
raise TASKING_ERPC^ at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in ^pendix B of the 


C-5 


APPENDIX F OF IHE Ada STANDAPD 


Ada m. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGE_UN1T 

This pragma is recognized by the in^lementation. The inple- 
mentation does not allow SYSTQI to be modified means of 
pragmas, the SYSTDl package must be reconciled. 

2.16. SUPPRESS 

This pragma is inclemented as described, except that 
DIVISI0N_CHECK and in some cases OVERFLCiW_CHECK cannot be 
suppressed. 

2.17. SYSTEMJJAME 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for >^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package HACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'lASKID 

For a task object or a value T, T'TA5K_ID yields the unique 
task id associated with a task. The value of this attribute 


C-6 




APPQIDIX F OF IHE Ada STANDARD 


is of the type AK)RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

— Copyri^t 1987, 1988, 1989 Verdix Corporation 

with unsigned_types; 
package SYSTQl is 

pragma suppress(ALL_CHECKS); 
pragma sv^ress(EXCEPTICX<_TABLES); 
pragma not_elaborated; 

type NAME is ( i860_System_V ); 

SYSTEMJNAME : ccxistant NAME :■ i860 System_V; 

STORAGEJUNIT : constant :-> 8; 

MEMORY_SIZE : ctmstant 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant -2 147 483 648; 

MAX_INT : constant 2 T47 I83 ^47; 

MAX_DIGITS : constant l5; ~ - 

MAXJ1ANTISSA : constant :• 31; 

FINE_DELTA ; constant 2.0**(-31); 

TICK : constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer 64*1024; 

type AIX)RESS is private; 

function ">" (A: ADtXtESS; B: ADDRESS) return BOOLEAN; 

function "<" (A: ADDRESS; B: ADCS^S) return BOOLEAN; 

function ">«"(A: ADDRESS; B: ADC^ESS) return BOOLEAN; 

function "<-”(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADIXtESS; B: AKJRESS) return INTECZR; 

function (A: AIXJRESS; I: INTEGER) return ADDRESS; 

function (A; ADDRESS; I: INTEGER) return ADDRESS; 

function (I: UMSIGNEDjrYPES.lJNSIGNED_INTEGBR) return ADI»ESS; 

function HENORY ADCXtESS 

(I: UNSTGNEDjrYPES.lV)SICa4ED_INTBCXR) return ADDRESS renames 
N0_ADIXt : constant ADDRESS; 
type XASK_ID is private; 


C-7 




APPENDIX F OF IHE Ada STANDARD 


NO_'IASK_TD ; constant TASK_ID; 

subtype S1G_STATUS_T is INIEGER; 

S1G_STATTJS_SZZE : constant :» 4; 

type FROGRAM_ID is private; 

NO_FROGRAH_ZD : CCVlstant FROGRAM_ID; 

type LONG_ADORESS is private; 

NO_LONG_AIX)R : constant LQNG_ADDRESS; 

function (A: LQNG_AZX)RESS; I: ZNTEXaSR) return LCNG_ADORES5; 

function (A: LGNG_AIX)RESS; I: INTEXXR) return LONG_AlX»tESS; 

function MAKE^LONGjADORESS (A: ADDRESS) return LCNS_ADDRESS; 

function LOCALIZE(A: LQNG_A1X»ESS ; BY!IE_S1ZE : INTEGER) return AD[»ESS 

fmction STATION OF(A: DONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNEI)jryPES.UNSIGNED__INTEGER; 
NO_ADDR : constant AIX3RESS :« 0; 

pragma BUILT_IN(">"); 
pragma BUILT IN("<"); 
pragma BUILT”IN(">-"); 
pragma BUILT_IN("<«"); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNEI)JITPES.UNSIGNEI)_INrEX$R; 
NO_TASK_ID : constant TASK_ID 0; 

type PROGRAN_ID is new UNSIGNEI>jrYFES.UNSI(a]ED_INTBGER; 
NO PROGRAM ID : constant PROQIAM ID 0; 


type LCNGJUXXIESS is new UNSIGNED_TYPES.UNSIGNED_INTE(XR; 
NO LONG AIX2R : constant LONG AIXXtESS 0; 


pragma BUILT_IN(nAKE_LONG_AIX)RESS); 
pragma BUILT IN(LOCALIZE); 
pra^BB BUILT'IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 


C-8 



APPENDIX F OF IHE Ada STANDAPD 


5.1. Pragma PAGC 

In the absence of pragma PACK record conponents are padded 
so as to provide for efficient access ty the target 
hardware, pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record ccanponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
nxanber of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conponents; an explicit record representation 
clause must be given to specify the packing of the ccmt- 
ponents. A size clause applied to a record type will cause 
packing of cosponents only v^en the conponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. Ihe SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only stjpported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit initialization of variables \>^ich have address 
clauses. Ihe specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are not sv^jported. 

5.5. Representation Attributes 

The AIXKIESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package NACHINE_CODE provides 


C-9 



APPENDIX F OF IHE Ada STANDARD 


an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mnemonics, 
a set of register definitions, and a set of addressing mode 
factions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CCX)E_n'( opcode, operand {, operand} ); 

where n indicates the nxanber of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. BN 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must in enumeration literal (i.e. it cannot be 
an object, attcirace, or a rename). 

An operand can only be an entity defined in MACHINE_CX®E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_C0DE must be static expressions, string literals, or 
the functions defined in MACHINE_CX)DE. The 'REF attribute 
may not be used as an argument in euny of these functions. 

Inline expansion of machine code procedures is su^^rted. 

6. Conventions for Inpleroentation-generated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
(rfiysical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


C-10 





APPENDIX F OF THE Ada STANDARD 


10. Inplementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 \ise the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) ^en the size 
of ELENEMTjryPE exceeds that value. For example for vmcon- 
strained arrays such as string where ELEHENT_IYPE'5IZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed i:^ a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_IO will raise USE_ERROR 
if NAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_I0 use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) v^en the 
size of ELEHENT_TVPE exceeds that value. For exanple for 
mconstrained arrays such as string vrtiere ELEMENr_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineH in SYSTEM emd can be changed by a 
program beTore instantiating INTEC^_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO inposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actually enforced by the inplemen- 
tation. It is not intended to inply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STCH(AGE_l]NITS. The nmximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE__SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STCSIAGEJUNITS. This is the value 
returned T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE^SIZE length attribute 

C-11 




APPEM>IX F OF THE Ada STANDARD 


the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGEJUNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the cran- 
pilation of the unit with a FATAL error message. 




