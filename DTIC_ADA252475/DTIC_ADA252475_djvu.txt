A 


Ar^ AO..O A-7C TATIONPAGE 

Form Approved 

OPMNo. 

Public ni # IQ* 1 hour p«r rMpooM. tnduding th*tim«lor r«vi«wing instrudiont. Marching •xistinQdatasouroMo«th«ring 

and m |||||! ijl |||| I ■ I || ||f( i|||l 11| l||i <• Sond oommortla rog«rdir>g thit burdon aatimato or any othar aapool of this ooliaciior> of informatiort. including 

augga ||l|| 11 || 111 I ||f|'9| I [ ||' Diradorala for Information Oporationa and Raporta, 121S Jaflaraon Oavia Highway. SuHa 1204. Arlington. VA 

22202 llllll l!l >lll 1 11 <1 ill ' III J !' Ill >1 Managamant and Budgat. Waahington, DC 20503. 

1. AG iT 3. REPORT TYPE AND DATES 

1 Final: 01 Jun 1992 to 01 Jun 1993 

4. TITLE AND 

Validation Summary Report: Verdix Corporation, VADS Sun SPARC-> 386, 
VAda-110-40315, Version 6.2, Sun4/260 under SunOS, Version 4.1.2 
(Host) Intel iSBC 386/20p under bare board (Target) 

5. FUNDING ___ 

6. 

Wright-Patterson AFB, Dayton, OH 

USA 

7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

AVF-VSR-536.0492 

9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 

United States Department of Defense wk r-M « 

Pentagon, Rm 3E114 11 1 

Washington, D.C. 20301-3081 

10. SPONSORING/MONITORING 

AGENCY 


12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION 

13. (Maximum 200 

Verdix Corporation, VADS Sun SPARC-> 386, VAda-110-40315, Version 6.2, Sun4/260 under SunOS, 

Version 4.1.2 (Host) Intel iSBC 386/20p urxler bare board (Target), 920513W1.11258, ACVC 1.11. 

92-17133 

92 

14. SUBJECT 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada VaU. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, 

15. NUMBER OF 

16. PRICE 

INSECURITY 18. SECURITY INSECURITY 

CLASSIFICATION CLASSIFICATION 

UNCLASSIFIED UNCLASSIFED UNCLASSIFIED 

20. LIMITATION OF 


NSN 


Standard Form 298. (Rav. 2-89) 
Prescribed by ANSI Std. 




Certificate Information 


The following Ada in^jlementation was tested and determined to pass ACVC 
1.11. Testing was completed on 13 May 1992. 

Coirpiler Name and Version; VADS Sun SPARC -> 386, VAda-110-40315, 

Version 6.2 

Host Conputer System: Sxan4/260 

under SunOS, Version 4.1.2 

Target Conputer System: Intel iSBC 386/20p 

lander bare board 


Customer Agreement Number; 92-03-18-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

920513W1.11258 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 



_ 

Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 



45433-6503 



Ada Va 
Di rect 


Organization 

ter and Software Engineering Division 


Institute for Defense Analyses 
Alexandria VA 22311 


Afe Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



Acce:.ion Tor 

NTiS 

CRA.’-i ' 

DT 1C 

1A • 

Juslificatioi'! 

By. 


DiJtribi 

jtion 1 


Dlit 

tL 

Av 5 I 1 . * 

bpcCM. 

! 




AVF Control Number: AVF-VSR-536.0492 

1 June 1992 
92-03-18-VRX 


Ada C(»IPILER 
VALIDATICW SUMMARY REPORT: 

Certificate Number: 920513W1.11258 
VERDIX Corporation 

VADS Sun SPARC -> 386, VAda-110-40315, Version 6.2 
Sun4/260 under SunOS, Version 4.1.2 «> 

Intel iSBC 386/20p linder bare board 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB WJ 45433-6503 




Certificate Information 


Hie following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conqpleted on 13 Nay 1992. 

CcMiqpiler Name and Version: VADS Sian SPARC -> 386, VAda-110-40315, 

Version 6.2 


Host Computer System: Sun4/260 

under SunOS, Version 4.1.2 

Target Conputer System: Intel iSBC 386/20p 

under bare board 


Customer Agreement Number: 92-03-18-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

920513W1.11258 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 



la Validation Facility 
Steven P. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada VaJ 
Di rector, 
Institutd" 
Alexandria VA 


rganization 
ter and Software Engineering Division 
Defense Analyses 
22311 


Ada Joint Program Office 
Dr. John Solcxnond, Director 
Department of Defense 
Washington DC 20301 





DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 

Customer: Verdix Corporation 

Ada Validation Facility: Softech Inc. 

3100 Presidental Drive 
Fairborn,Ohio 45324-2039 

ACVC Version: 1.11 

Ada Implementation: 

Compiler N 2 UT\e and Version: VADS Sun SPARC -> Intel 80386, 

Vada-110-40315, Version 6.2 

Host Computer System: Sun Sun4/260 running SunOS 4.1.2 

Target Computer System: iSBC 386/20p 

Customer's Declaration 

I, the undersigned, representing Verdix Corporation, declare that 
Verdix Corporation has no knowledge of deliberate deviations from the 
Ada Language Standard ANSI/MIL-STD-1815A in the implementation listed in 
this declaration. I declare that the Verdix Corporation is the OWNER 
of the above implementation and the certificates shall be awarded in the 
name of the Verdix Corporation's name. 


Date: April 28, 1992 

Stephen Zeigler 

1600 N W Compton Drive 

Suite 357 

Beaverton, Oregon 97006 




DECLARATION OF CONF(»MANCE 


The following declaration of conformance was supplied by the customer. 


Declaraticm of Conformance 
Customer: VERDIX Corporation 
Certificate Awardee: VERDIX Corporation 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB (Xi 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Conpiler Name and Version: VADS Sun SPARC -> 386, VAda-110-40315, 

Version 6.2 


Host Ccmputer System: S\m4/260 

under SunOS, Version 4.1.2 

Target Conputer System: Intel iSBC 386/20p 

under bare board 


Declaration: 

we, the undersigned, declare that we have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STT>-1815A ISO 8652-1987 in the implementation 
listed above. 


Customer Signature 


Date 


Certificate Awardee Signature 


Date 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF raiS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFOmATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STWCARD 














QIAPTER 


1 


INTRODUCTION 


Ttie Ada inplementation described above was tested according to the Ada 
Validation Procedures (Pro90] against the Ada Standard [AdaSS] using the 
current Ada Conpiler Validation Capability (ACVC). This Vali^tion Sunnary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
tPro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide IUG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the ccmpjters, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the sxibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF >diich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test resiilts should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Divisicm 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTROTUCTION 


1.2 REFERENCES 

(Adla83] Reference Manual for the Ada Programming Lanq^qe , 

ANSI/MIL-STD-1815A, Febriiary 1983 and ISO 8652-1987. 

tPro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

(OG89J Ada CCTnpiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at ccxopile time and link time, 
respectively. 

The executable tests are written in a self-checking manner euxi produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the restilt vdien they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a ccmpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is ccxnpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Scxne of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In soxne tests of the ACVC, certain macro strings have to be replaced by 
inpleroentation-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provided in i^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 





INITODUCTION 


For each Ada implementation, a custCMoized test suite is produced by the 
AVF. This customization consists of making the modificaticms described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the custcmiized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target ccmoputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing ccmipliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host ccxnputer system and its 

Inplementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the ccanpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVD) 

Conpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more computers and 

S/stem associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected lanits. 


1-3 



INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Conputer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Conputer 

System 

Validated Ada 
Conpiler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executei>le form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware inplementations are possible. 

A conputer system where the executable form of Ada programs 
are executed. 


The conpiler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada progranming 
language. 


1-4 











CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. Ihe rationale for 
withdrawing each test is available frcxn either the AVO or the AVF. Ihe 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

Bd3022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4C22D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicedsility may 
be supported by documents issued by the ISO and the AJFO known as Ada 
Ccmmentaries and cooinonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 






IMPLEMENTATION DEPENDENCIES 


Ttie following 201 tests have floating-point type declarations 
requiring raore digits than SYSTQ1.MAX_DIGITS; 


C24113L..y (14 tests) 
C35706L..y (14 tests) 
C35708L..y (14 tests) 
C4524lL..y (14 tests) 
C4542lL..y (14 tests) 
C45524L..Z (15 tests) 
C4564lL..y (14 tests) 


C35705L..y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C4532lL..y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C C45412C 
C45504F C45611C 
C45632C B52004D 
C86006C CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG FLOAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this Implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 




INPLEMENIATION DEPENDEIKTIES 


a)2A84A, CD2AB4E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this iii{>leinentation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not stjpported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Node 

TEXT_I0 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

c:e 3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYQUT^ERROR \dien the value of the 
page number exceeds COUNT'lAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2-3 





IHPLENEinATION DEPE34DEldES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
iapleroentation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVD. The coitpiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bomds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A31A. .C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the suj^rt procedure LENGTH CHECK, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTHjCHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK ON REPRESENTATION FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. 

This test checks that no bodies are required for interfaced sut^rograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36; the modified test was passed. 


2-4 




CHAPTER 3 

PROCESSING INFORMATICN 


3.1 TESTING ENVIRONMENT 

Ihe Ada in()leinentation tested in this validation effort is described 
adequately 1:^ the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly VA 22021 

Testing of this Ada inplementation was conducted at the customer's site 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vAiether the test is af^licable or inapplicable; 
otherwise, the Ada Inqplementation fails the ACVC [Pro90]. 

For all processed tests (inaj^licable and aE^licable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is svfjported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 






PROCESSING INFORMATION 


a) Total Number of ^^licable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(C4d+e) 

4170 

(a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were not loaded directly onto the host cooputer. The tape 
was loaded onto a Sun Workstation, and the tests were copied over Ethernet 
to the host machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were conpiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target conputer 
system by the communications link described above, and run. The results 
were captured on the host ccxnputer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See ^pendix B for a complete listing of 
the prooessing options for this implementation. It also indicates the 
default options. The option invoked explicitly for validation testing 
during this test was: 


Option(s)/Switch Effect 

-w To suppress cocpiler warning messages. 


Test output, compiler and linker listings, and job logs were captured an 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 





APPEiroiX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [1X589]. "nie 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. Hiese values are expressed 
here as Ada string aggregates, v^ere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS 

(1..V-20 

$MAX_LEN_INT_BASED_ 

LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 

$MAX_LEN_REAL_BASED 

T TTFPAT 

“ "16:" & (1..V-7 -> '0') & "F.E;" 


A-1 



MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 ■> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

1386 

$DELTA_IXX: 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2147483647 

$file_terminator 

f f 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLCIAT_NAME 

NO_sucHjrypE 

$FORM_STRING 

t1 If 

$F0RM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATION 

100000.0 


$GREATER THAN DURATIOI BASE LAST 

TOOOOTJOO.O 

$GREATER THAN_FLQAT_BASE LAST 

1.5E+308 

$GREATER THAN FLQAT_SAFE LARGE 

5.'(yE307 


A-2 




MAOtO PARAMETERS 


$GREATER_THAN_SHORT_FLOAT_SAFE LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'Villegal/file_naine/2{ ]$%FILE1.DAT" 

$ILLEGAL_EXTERNAL_FILE NAME2 

"Villegal/file_naine/2{]$%FILE2.DAT" 

$INAPPROPRIATE LINE_LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 


$ INCLUDE_PRAC»1A1 
$ INCHJDE_PRAGMA2 
$INTEGER_FIRST 
$INTEGER LAST 


PRAGMA INCLUDE 
PRAGMA INCLUDE 
-2147483648 
2147483647 


$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATIC»I -100000.0 

$LESS_THAN_DURATIC»J_BASE FIRST 

-ITJOOOOOO.O 


("A28006D1.TST") 

("B28006D1.TST") 


$LINE_TERMINATOR 

ASCII.LF 

$LCW_PRIORITY 

0 

$MACHINE CODE STATEMENT 


CODE_0'(OP »: 

$MACHINE_CC»E_TYPE 

CODE_0 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2147483648 

$MIN_INT 

-2147483648 

$NAME 

TINY_INTEGER 


NOP); 


A-3 





MACRO PARAMETERS 


$NAME_LIST 1386 

$NAME_SPECIFICATI(»Il /vc/avf/tape/tests/c/e/X2120A 
$NAME_SPECIFICATI(»I2 /vc/avf/tape/tests/c/e/X2120B 
$NAME_SPECIFICATI(»I3 Ac/avf/tape/tests/c/e/X3119A 
$NEG_BASED_INT 16#F000000E# 

$NEW_MEM_SIZE 16777216 

$NEW_ST0R_UNIT 8 

$NEW_SYS_NAME 1386 

$PAGE_TERMINATOR ASCII.LF & ASCII.FF 

$RECORD_DEFINITiaJ RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME CODE_0 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 1024 

$TICK 0.01 

$VARIABLE_ADDRESS VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 VAR_3'ADDRESS 


$YOUR_PRACm PRAOIA PASSIVE 


A-4 


APPENDIX B 

CX)MPILATION SYSTEM OPTIONS 


Hie ccxnpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this a^^ndix are to coopiler documentation and 
not to this report. 


B-1 




COMPILATION SYSTEM OPTIONS 


ada VADS Reference ada 

ada - invoke the Ada compiler 

oYNTAX 

ada [options] [source_file]... (object_file.o]... 

OPTIONS 

-a file_name (archive) Treat file name as an object 

archive file created~by ar. Since some archive 
files end with .a, -a is used to distinguish 
archive files from Ada source files. 

-A (disassemble) disassemble the xanits in the source file 

after conpiling them. -A can be followed by arguments that 
further define the disassembly display (e.g. -Aa, -Ab, -Ad, 
-Af, -Al, -As): 

a add hexadecimal display of instruction bytes to 
disassembly listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "fiie_name.das" 

s disassemble the unit spec 

-D identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA 
PREPROCESSOR REFEREIO;. 

-d (dependencies) Analyze for dependencies only. Do not 
do semantic analysis or code generation. Up^te the 
library, marking any defined units as unccxopiled. The 
-d option is us^ by a.make to establish dependencies 
among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 

argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname 
is given, the raw error messages are placed in that file. 
If a directory argument is supplied, the raw error output 
is placed in dir/source.err. The file of raw error 
messages can be used as input to a.error. 


B-2 







COMPILATION SYSTEM OPTIONS 


-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file, and call the environment 
editor ERROR_EDITOR. (If ERROR_EDITOR is defined, the 
environment variable ERROR_PATTERN should also be defined. 
ERROR__PATTERN is an editor search coomand that locates the 
first occurrence of '###' in the error file.) If no editor 
is specified, vi(l) is invoked. 

-F (full DIANA) Do not trim the DIANA tree before outpuit to 
net files. To save disk space, the DIANA tree will be 
trimmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled (unless 
those nodes are part of the body of an inline or generic or 
certain other values needing to be retained for the debugging 
or conpilation information). The trimming generally removes 
initial values of variables and all statements. 

-K (keep) Keep the intermediate language (IL) file produced by 
the ccmipiler front end. The IL file will be placed in the 
.objects directory, with the file name Ada_source. 

-L library_name (library) Operate in VADS library library_naroe. 

(Default: current working directory] 

-lfile_abbreviation (library search) This is an option passed to 

the ld(l) linker telling it to search the 
specified library file. (No space between 
the -1 and the file abbreviation.) (self-host 
only) 

For a description of the file abbreviations, 
see also Operating System documentation, 
ld(l). 

-N unit_name (main) Produce an executable program by linking 

the named unit as the main program, unitjname must 
already be conpiled. It must be either a 
parameterless procedure or a parameterless 
function returning an integer. The executable 
program will be named a.out (self-hosted) or a.vox 
(cross-development) unless overridden with the -o 
option. 

-M source_file (main) Produce an executable program by compiling 
and linking source_file. The main unit of the 
program is assumed to be the root name of the 


B-3 


COMPILATION SYSTEM OPTIONS 


.a file (for foo.a the unit is foo). Only one 
.a file may be preceded by -M. The executable 
program will be named a.out (self-hosted) or 
a.vox (cross-development) imless overridden with 
the -o option. 

-o executable_file (output) This option is to be used in 

conjunction with the -M option, executable file 
is the name of the execut^le rather than Bie 
default. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level 
of optimization. The default is -04. 

-O full optimization 

-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 

-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction 

scheduling and one pass of reducing induction 
expressions 

-06 no change and instruction scheduling 

-07 add one more pass of induction expression 
reduction and instruction scheduling 

-08 add one more pass of induction expression 
reduction and instruction scheduling 

-09 add one more pass of induction expression 

reduction, instruction scheduling and hoisting 
expressions common to the then and else parts of 
if statements. 

Hoisting from branches (and cases alternatives) can 
be slow and does not always provide significant 
performance gains so it can be suppressed. 

For more information about optimization, see 
COMPILING ADA PROGRAMS, Compiler Optimizations and 
pragma OPTIMIZE_CC»E(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reccxnpile instantiation) Force analysis of 

all generic instantiations, causing 
reinstantiation of any that are out of date. 

-S (suppress) ^^>ly pragma SUPPRESS to the entire coopilation 

B-4 








COMPILATION SYSTEM OPTIONS 


for all sup^ressible checks. (See also 
pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the conpilation. 

-V (verbose) Print conpiler version number, date and time of 
conpilation, name of file ccxi{)iled, ccxnnand input line, 
total compilation time and error summary line. Storage 
usage information edx>ut the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

The commemd ada executes the Ada compiler zmd compiles the 
named Ada source file, ending with the .a suffix. The file must 
reside in a VADS library directory. The ada.lib file in this 
directory is modified after each Ada unit is ccxnpiled. 

By default, ada produces only object and net files. If the 
-M option is used, the ccxtpiler automatically invokes a.Id 
and builds a complete program with the named library vnit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These files 
will be passed on to the linker and will be linked with the 
specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simailtaneously available on a 
single system. Because the ada command in any VADS_locaticMi/bin 
on a system will execute the correct compiler components based 
upon visible library directives, the option -sh is provided to 
print the name of the components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

DIAGNOSTICS 

The diagnostics produced by the VADS compiler are intended to 
be self-explanatory. Most refer to the RN. Each RM reference 
includes a section number and optionally, a paragraf^ nuinber 
enclosed in parentheses. 

RELATED TOPICS 


B-5 




COMPILATION SYSTEM OPTIONS 


a.app, 

Generated 


a.das, a.db, a.error, a.help, a.Id, a.make, a.map, a.pr 
11-1-91 VADS 


B-6 







COMPIIATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada inqplementation, as described in this 
Appendix, are provided by the customer. Uiless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a.Id VADS Reference a.Id 

a.Id - prelinker 

SYNTAX 

a.Id [options] unit_name [linker_options] 

OPTIONS 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on scxne hosts 
(including Ultrix, HPUX and System v). 

-DX (debug) Debug memory overflow (use in cases where linking a 
large number of units causes the error message "local symbol 
overflow" to occur). 

-E unit_name (elaborate) Elaborate unit name as early in the 
elaboration order as possiBle. 

-F (files) Print a list of dependent files in order and suf^ress 
linking. 

-L library_name (library) Operate in VADS library library_name. 

[Default: current working directory] 

-o executable_file (output) Use the specified file name as the 

name of the output rather than the default 
(a.out (self-hosted) or a.vox 
(cross-development)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker conmand before executing it. 

-V (verify) Print the linker command but suppress execution. 

[linker options] All arguments after unit_name are passed 


B-7 






COMPILATION SYSTEM OPTIONS 


to the linker. These may be options for the 
linker, archive libraries, library al±)reviations 
or object files. 


DESCRIPTION 

a.Id collects the object files needed to make ijnit_naine a 
main program and calls the ld(l) linker to link together all 
Ada and other language objects required to produce an executable 
image in a.out (self-hosted) or a.vox (cross- development). 
\anit_name is the main program and must name a non-generic 
suli^rogram. If unit_name is a function, it must return a value 
of the type STANDARD.INTEGER. This integer result will be passed 
back to the shell as the status code of the executicm. The utility 
uses the net files produced by the Ada coopiler to check 
dependency information, a.Id produces em exception mapping tedsle 
and a unit elaboration table and passes this information to the 
linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no 
longer have exception tables. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. Besides 
information generated by the conpiler, these directives also 
include WITTin directives that allow the automatic linking of 
object modules conpiled fron other languages or Ada object 
monies not named in context clauses in the Ada source. Any 
number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WlTHl. The 
directives are recorded in the library's ada.lib file ai>d have 
the following form. 

WITHl:LINK;object_file: 

WITH2;LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
at^reviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the ruune of the actual executable 


B-8 





CXDMPIIATION SYSTEM OPTIONS 


file. 

FILES AND DIRECTORIES 

a.out/a.VOX default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

DIAGNOSTICS 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 

RELATED TOPICS 

ada, a.make, a.info 

Generated 11-1-91 VADS 


B-9 






COMPILATION SYSTEM OPTIONS 


link V7^S Reference xlink 

xlink - invoke the cross linker (cross-development only) 

SYNTAX 

xlink executable_file 
OPTIONS 

-a (append) Append output to executable_file. 

Must be used with -o. 

-d options_file (options) Name an options file. 

-in niap_file (map) Name a specific map file 

-o executable_file (output) Name the output executable_file 

rather than the defaiilt a.vox. 


DESCRIPTION 

The cross linker is not intended to be invoked directly by 
usersI but is invoked by the prelinker (a.Id or VADS LD) after 
it builds the linker options file that is correct for building 
the Ada executable. All information about how to perform the 
link and about the layout of the executable image is contained 
in the linker options file. 

The cross-linker executable is named xlink and resides in the 
directory VADS_locatiorv'sup. 

Generated 11-1-91 VADS 


B-10 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
inplementation-dependent pragmas/ to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this ^pendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.797693134E+308 .. 1.797693134E+308; 
type SHORT_FLOAT is digits 6 range -3.4028E+38 .. 3.4028E+38; 

type DURATIW is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 






APPENDIX F OF THE Add STMCARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINEJDNLY Pragma 

The INLINE_0NLY pragma, when used in the same way as pragma 
INLINE, indicates to the c(xipiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine vhich saves code 
space. If a user erroneously makes an INLINEJDNLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be rais^ at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inptlementation of some 
predefine? Ada packages, but provides no user access. It is 
used only to iirplement code b^ies for vhich no actual Ada 
body can be provided, for exanple the HACHINE_CCX>E package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a coopilation, but before 
any subsequent conpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the ccxnpiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 


C-2 






APPENDIX F OF THE Ada STANDARD 


When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the inple- 
mentation and has Bie same effect as SHARE_CXX)E. It is 
included for conpatability with earlier versions of VADS. 

1.4. N0_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PR0GRAM_ERR0R raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a sxibprogram or 
variable deTined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or svdsprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers (3N or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 
procedure. It specifies that iirqplicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 


C-3 





APPE3®IX F OF THE Ada STANDARD 


OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. OPTIMIZE_C(X)E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a marine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CCWTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RN. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' euxJ FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type AIPRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Afpendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a sutprogram declared immedi- 


C-4 



APPENDIX P OF THE Ada STANDARD 


ately within a library package spec or body. It indicates 
to the conf>iler that the sui^rogram will not be called 
recursively allowing the cotnpiler to perform specific <^tim- 
izations. The pragma ceui be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or em Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code euid issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 

2.10. PACK 

This pragma will cause the ccmpiler to choose a non-edigned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RN. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
bo^. The pragma directs the compiler to optimiize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKlNG_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 


C-5 






APPEl^IX F OF THE Ada STANDARD 


Ada RM. 

2.14. SHARED 

This pragma is recognized the inplementation but has no 
effect. 


2.15. STORAGEJUNIT 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISIW CHECK and in some cases OVERFLCiW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inpleroentation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccmpiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the \jnique 
task id associated with a task. The value of this attribute 



APPENDIX F OF THE Ada STANDARD 


is of the type AE®RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


— Copyright 1987, 1988, 1989, 1990, 1991, 1992 Verdix Corporation 
with UNSIGNED_TYPES; 
package SYSTEM is 

pragma suppress{ALL_CHECKS); 
pragma suppress (EXCEPTIONJEABLES); 
pragma not_elaborated; 

type NAME is ( i386 ); 

SYSTEM_NAME : constant NAME i386; 

STORAGE_UNIT : constant 8; 

MEMORY_SI2E ; constant 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant :« -2 147 483 648; 

MAX_INT ; constant 2 T47_J83j&47; 

MAX_DIGITS : constant l5; 

MAX_MANTISSA : constant 31; 

FINE_DELTA : constant 2.0**(-31); 

TICK ; constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE ; integer 1024; 

type AIX)RESS is private; 

function ">" (A: ADDRESS; B: A1X)RESS) return BOOLEAN; 

function "<" (A: ADDRESS; B; AK5RESS) return BOOLEAN; 

function ">-"(A; AK)RESS; B: ATORESS) return BOOLEAN; 

function "<-"(A: ADDRESS; B; AIX)RESS) return BOOLEAN; 

function (A; ADDRESS; B; ATORESS) return INTEGER; 

function (A: ADDRESS; I; INTEGER) return ADDRESS; 

fxinction (A; ADDRESS; I: INTEGER) return AMJRESS; 

function (I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 

function MEMORY_AIX)RESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTBGER) return ATORESS renames "+"; 
NO AIX)R : constant AIX}RESS; 


C-7 






APPENDIX F OF THE Ada STANDARD 


type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SIZE; constant :-4; 

type PR0(3^_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type LONG_ADDRESS is private; 

NO_LONG_AK)R : constant LONG_ADDRESS; 

function "+" (A: LONG_AIX)RESS; I: INTEGER) return LONG_AIX>RESS; 
function (A: LONG_ADDRESS; I: INTEGER) return LOMG_ADDRESS; 

fiinction MAKE_LONG_ADDRESS (A: AIORESS) return LONG_AI»RESS ; 

function LOCALIZE{A: LONG_ADDRESS ; BVTE_SIZE : INTEGER) return AMJRESS; 

function STATION OF(A; LONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 

NO_ADDR ; constant ADDRESS :« 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN("<-"); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
N0_TASK_ID ; constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.IWSIGNED_INTEGER; 
NO PROGRAM ID : constant PROGRAM ID 0; 


type LONG_AI»RESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO LONG ADDR : constant LONG ADDRESS 0; 


pragma BUILT_IN(MAKE_LONG_AI»RESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 


C-8 





APPENDIX F OF THE Ada STANDARD 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record con^nents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the rcuige of the sub- 
type. A size clause applied to a record type will not cause 
packing of coitponents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of coitponents only vhen the cosaponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables vdiich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 


Machine code insertions are suRxirted. 

C-9 




APPENDIX F OF THE Ada STANDARD 


Ttie general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, euvd a set of addressing mode 
functions. 

Ttie general synteuc of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand} ); 

where n indicates the nximber of operands in the aggregate. 

A special case arises for a variable number of operands. 
The opereinds are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op ■> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An opereuid ceui only be an entity defined in MACHINE_CXX)E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CCX)E must be static expressions, string literals, or 
the functions defined in MACHINE_CXX)E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 


C-10 






APPENDIX F OF THE Ada STANDARD 


« 

-# 


None. 


10. Inplementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string v^ere ELEMENT_TYPE^SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) v^en the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineH in SYSTEM and can be changed by a 
progr 2 un beTore instantiating INTEGE3l_IO to provide em upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actually enforced by the inplemen- 
tation. It is not intended to inply that resources vp to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The meucimum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 


C-11 





