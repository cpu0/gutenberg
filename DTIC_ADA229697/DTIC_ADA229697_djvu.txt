AD-A229 697 


oigancation fo' 
aopiied scientific 
'esearch 


FEL 


TNO Pi'v -'t ■ sjiu: L 
L. V 




report no copy no. 

FEL-W-AOSO 


tttie 

User Manual of the Force Stniciure Model Unit Type 
Editor TDM 


author(s): 

Vdg Drs. k. Kiel 



date ; November 1990 


sclassification 

title 

abstract 

repofttext 

appendices A and B 


: unclassified 
: unclassified 
: unclassified 
: unclassified 


no. of copies 


25 


no. of pages : 26(incl appendices, excl RDP + distribution list) 

appendices 2 


ST)fiu4HilT A I 

lor p«bBe I 


All information wriicri is classified according to Dutch 
regulations shall be treated by the recipient in the same 
iMciy as classified information of correspoitding value in 
his own country. No part of this information will be 
disclosed to any party. 


90 r- IT 


TM« 







TNO report 



report no 

. FEL-90-A080 

title 

: User Manual of the Force Structure Model Type Definition Module TDM 

author's) 

: Vdg. Drs R Kiel 

institute 

: TNO Phy sics and Electronics l-aboraiory 

date 

; November 1990 

NDRO no. 

: A89KX6I9 

no, in pow ■ 90 

: 701.1 

Resea/crt supervised by 

; Drs. P.A B . van Schagen 

Researcb earned out by 

; Vde Drs R K;e’ 


ABSTRACT (L'NCLASSinED) 


The Ts-pe Defmhion Modu'e TDM is pan of the combat simulation model Force Sinicture Model FSM and 
has been developed under contract A89ICL619. The purpose of ID.M is to provide a way of interactively 
creating and modifying so-called UNTr_TYPES. These lJNrr_TYPES are used as templates for creating 
the L NTTS for a FSM simulation run. The UiNTr_TYPES are stored in tw'O Typte Definition Files: the 
systemwide available PRE_DFnN'ED_TYPES and the locally available USER DEFLVED TYPES The 
repon serves as the user manual for TDM. 



AoossbVoo for 


NTiS •IRAItt 


rri'’ T?R 

□ 

'v';\r^nuoancoi 

□ 

- -- 


D! -•trll ut ion/ 


Avullnbl lll-T Codas 

Avail Mid/ur 

Dial. »1 Cpoolal 


r'LL 

i 








TNO report 


Page 

3 


rapport no. • FEL-90-A080 

titei : Gebmikers Handleiding van de Type Definition Module TDM van het 

Gevechts Simulatie 
Model FSM 


aateur(s) 

instituut 


; Vdg. Drs. R. Kiel 

; Fysisch en Elektronisch l-aboratorium TNO 


datum 

hdo-opdr.no. 
no. in iwp' 90 


; november 1990 
: A89KL619 
: 701.1 


Onderzoek uitgevoerd o.i.v 
Onderzoek uitgevoerd ooor 


Dn P.A.B. van Schagen 
Vdg. Drs. R. Kiel 


SAMEWATTLSG lONGERUBRICEERD) 

De Type Definition Module TDM is een onderdeel van hei Bevech*ss’’r*'’lat'eT'>de! Force Siruviure Model 
FSM en is oniwikkeld onder contract A89KL619. Het doel van TOM is het inieractief kiinnen creeren en 
onderhouden van Lcnheden Types (UNIT^TYPFS). Dcze ecnhedtu types vormen de onderljggende 
strucfuur waarop de eenhcden (UNITS) voor een FSM simulatie gcbaseerd worden. De eenheden types 
worden in twee Type Definition Files opgeslagen. De ecrsie is de algemeen tocgankelijke 
PRE_DHKINED_TYPES fUe. de andere de bij de gebniiker gedefinieerde USEk_DEFINED_TYPES file 
Dit rapport fungeert als de gebruikershandleiding voor TDM. 







TNO report 


Page 

4 


ABSTRACT 


SAMENVATTING 3 

CONTENTS 4 

1 [NTRODUCnON S 

; UNIT_TYPES 6 

2.1 Introduction 6 

2.2 The structure of UNrT_TYPES ' 

2.3 Type Defmition Files 9 

2.4 TDM in FSM 9 

3 TDM USER INTERFACE 12 

3 .1 The VDU screen 12 

3.2 The keyboard 14 

4 TDM USER MANTiAL 16 

4.1 Before stalling... 16 

4.2 Starting,,, IV 

4 3 TDM levels 17 

4 4 The FILE level 18 

4.5 The TYPE level 19 

4.6 The WEAPON level 20 

4 7 The AMMO level 21 

4.8 The ASSIGNMENTS level 22 

REFERENCES 24 


APPENDIX A EXAMPLE PARAMETER FILES 


APPENDIX b 1 u.M ERRORS 





TNO report 


Page 

'5 


1 INTRODUCTION 


The Type Definition Module TDM is pan of the combat simulation model Force Structure Mcxie! FSM and 
has been developed under contract A891CL619. The purpose of TDM is to provide a way of interactively- 
creating and modifying so-called UN1T_TYPES. These LJNIT_TYPES are used as templates for creating 
the UNITS for a FSM simulation tun. The UNIT_TYPES are stored in two Type Definition Files: the 
systemwide available PRE_DEF1NFD_TYPES and the locally available USER_DEFINED..TTPES 
This repon describes the suucture of UNTT_TYPES and the way TDM manipulates this structure Also the 
relation of UNn',.TV'PES to the rest of FSM is briefly described For a detailed description of all parts of 
FSM and the concepts of the unJefiymg Wafgame Construction Set the reader is referred to [Schagen 11 
and [Joppe IJ. 

■ Chapter 2 describes UNTr_TYPES and the Type Definition Files in which they arc stored. The relation of 
TDM with such programs as the Unit Definition Program (UDP) and FSM itself is also described here In 
chapter 3 some general information on the ''User Interface", i.e. on how to use the VDU (the Video Display 
Unit, or screen) and keyboard is given. Finally, chapter 4 explains how to use TDM in detail. 

The Type Definition Module (TDM) is written in the Ada programming language, and runs on VAX 
computers with the VMS operating system. 







TNO report 


Page 

6 


2 UNIT.TYPES 

This chapter describes in detail the units that participate in the combat simulation, the strucmre of the 
UNn'_TYPF,S and the Type Definition Files in which the UNIT_TYPES are stored. Also the relation of 
TDM with the Unit Declaration Program (UDP) and the rest of FS.M is described. 

2.1 Introduction 

One of the most important objects in a combat simulation model is a UNIT Units are the entities that 
participate in simulation runs and that interact with each other (e g. engage in combat) UNrT_TYPF)S are 
the templates that are used to create these units. 

In FSM units are modelled as a coUecuon of data and processes. Units know thmgs about themselves and 
other (possibly enemy) units. Units can also 'talk' to each other by sending messages over networks that 
exist between them. 

There are two main kinds of units: commanding and non-commanding units. Commanding units represent 
the brain of the military commander, while non<ommanding units represep' the physical resources (like 
tanks, guns, etc.). 

In FSM (or better: in the underlying Wargame Construction Set WCS) units are represented by sets of data 
items called attributes Each attribute holds a bit of information about the unit (or an ither unit) Typical 
attributes are: color, position, level, etc. During combat simulation the anributes of a unit are continuously 
being consulted and updated by the model. It will be clear that the user can only update the value of 
attributes belonging to a unit. Adding an attribute to, or removing an anribute from a unit means creating a 
whole new kind of unit. The assignment of attributes to units is therefore performed by the builder of a 
specific model The model builder can define sets of attributes v ailed UNIT GROUPS Each unit group has 
its own set of anributes. The unit group also determines the rctions that can be carried out by the units of 
that group. The following unit groups are currently defined: MANOEUVRE. ARTILLERY and their 
commanding counterparts C_MANOEUVRE and C_ARTILLER Y. 

As has been stated above, the UNTr_'TYPES are the templates that can be used to create units of a certain 
kind, A UNn'_'TYPE determines to which unit group the unit will belong and can give default values for 
some of its attributes. 

The UNTr_TYPE also defines the physical resource that units of that type will have. These physical 
resources consist of a number of carriers, one or more weapons and for each weapon one or more kinds of 
ammunition 





TNO report 


Page 

7 


2 2 The structure of UNTr_TYPES 

Before the Tj'pe Definition Module (TDM) can be used, the user should be familiar with the general 
structure of a L'Nrr_TYPE. TTiis strucwre is shown in figure 2 1. 


UNTr_riTE = 

NAME : unit_type_names (KEY) 

DEFTEV . definiiion_levels 
GROUP : unit_groups 
CARRIER = 

NAME : names 
AMOUNT : namral 
WEAPONS = 

NAME : names 
AMOUNT; natural 
MAX_AM.MO_AMOUNT: natural 
MAX_AMMO_STOCK : natural 
AMMO = NAME : names 
AMOUNT: natural 
STOCK : natural 

ASSIGN'.VfENTS = ATTRIBUTE : atttfbute_names (KEY) 
VALUE : wcs_types 


Fig 2.1; UNTr_TYPE structure 


In this structure the following fields are defined: 


NAME 

DEFLEV 


GROUP 

CARRIER 


This field uniquely identifies a UNTr_TYPE and is used for referring to it 
when creating units of a certain type for use in FSM simulation runs. 

This field (short for definition level) is used internally to determine the 
origin of a certain UTifT TYPE. It takes one of tin, . alues PRE_DEF and 
USER_DEF 

This field indicates the unit group to which a UNrr_TYPE belongs 

Together with its subfields this contains the information on the weapons 

and ammunition that are standard for a UNTr_TTPE 

This field contains a list of 'ATTRIBUTE = VALUE' pairs. WTienever a 

new unit of a certain U'NTT_TYPE is created, its assignments arc 

effectuated. 


ASSIGNMENTS 




The Carrier tleld is composed of the following subfields: 


Page 

u 


NAME 


AMOUNT 
WEAPON NAME 


W EAPON AMOI NT 

WTAPON MAX AMOUNT 

W’EAPON MAX STOCK 

WEAPON AMMO NAME 

WEAPON AMMO AMOUNT 
WEAPON AMMO STOCK 


This IS the name of the carrier. This name also links the earner (and thus 
the unit) to a certain target class in the Database Weapon Indicators (see 
reference iDBWT]). 

Defines the number of these carriers in a unit of the current tj-pe. 

The name of a weapon that is present on a carrier This name should also 
be defined in the DBWT since the simulation software needs specific 
weapon information when units engage in combat 

The total number of weapons of this kind that is present on all earners in 
the unit. 

The total space that is directly available for all kinds of ammuniation that 
can be used with this weapon. 

The total space that is indirectly available for all ammunition for tlus 
weapon (used for refill). 

The name of a kind of ammunition for this weapon Like the weapon 
name, the ammo name should also be defined in the DBW'l 
The amount of this kind of ammunition that is duectly available 
TTie amount that is indirectly available. 


The weapons and ammunition of a unit is structured as follows. For every kind of ammunition, there is a 
certain amount directly available for reloading and firing This is the WEAPON AMMO AMOLTsT. This 
can be thought of as a rack close to the gun. Apart from this amount, the earner can have more storage 
space for that ammunition. This ectra space is called the WEAPON AMMO STOCK The unit can decide 
to move ammunition from the stock to the rack This process is called reftll 

For one weapon there can be more than one kind of ammunition. Each ammo kind has its own amount and 
stock. Because the total available space is of course limited, for each weapon a total amount (WEAPON 
MAX AMOUNT) and total stock (WEAPON MAX STOCK) have been defined. The WRNPON MAX 
AMOUNT determines the size of the rack The sum of all ammo amounts can never exceed the max 
amount. Max stcKk has been defined similarly. 





TNO report 



2 3 T^-pe Definition Files 

The l'.NTr_l'3tTES as described above are stored in so-called Type Definition Files fTDFs). TTiere are two 
of these files. The first is the PRE_DEFLN'ED_TYPES file. Normally there will only be one 
PRE_DEFINED_T^'PES file, which should then be available lo all users. This file conlain.s a!) 
L'NTr_TYPES that come with a certain version of the simulation software The second TDF is the 
L SER_DEFINHD_TYPES file Every- user can have (Mie (or even more) of these, although it is not 
mandatory. In this file, very specific types, or modifications of predefined tv'pes can be defined. These files 
are local and therefore not available to other users. 

2.4 TDMinFSM 

The complete Force C)tructure combat simulation Model (FSM) consists of a number of progiams that work 
together shanng information atK:)ui the simulation that is stored in a number of datafiles. This paragraph 
gives a short overview of the complete FSM system. For a detailed description the reader is referred to 
(Schagen 1]. 

Figure 2.2 shows the main components of the F'SM system. The rectangles indicate programs; the circles 
the datafiles. 





NO fepon 


Pagt' 


10 



Fig. 2,2: Overview of (he FSM system 

Below a short description of the items tKcurring in figure 2.2 is given. 

TDM The TYPE DEFINITION MODULE for maimammg the Type Definition Files 

PDT The PRE_DEFINED_TYPES This file contains all types that are defined on a system 

level, 

UDT The USER_DEF1N^D_TYPES file. This file contains the types that are defined by a user, 

and arc available only locally. 

UDP The UNIT DECLARATION PROGRAM. This programi is used to create all the units that 

will be used for a certain scries of simulation runs. To create units. UDP uses the 
information from the type definition files. 

The META UNIT FILE. In this file all units, created b> the l-'DP arc stored. 


MUF 















NO report 


SCr_Nt. 


SCI 

NHP 


MT 

(if:p 

OB.S 

DBWI 

M-,K 

J-.SM 

AIM 

Rir- 

[.(X'. 



The SCF'NARIO EDITOR This program is used lo create a s*.enan<r A scenar; > is a set ot 
rules ^md guidelines deiennining certain aspects of the .simulation f-or a detailed des. npui'n 
of scenarios and SCENE, die reader is referred lo (S..hacen 2j. 

The SCENARIO FILE. ir. which the complete scenario is stored 

The NTTW'ORK E.NTRY PROGRAM. This program is used to set up all connecf'on^ 
between the units m a simulation. There has to be some kind oi connection between tw\, 
units to enable them to exchange messages and orders. 

'Hie C^^NNECTIONS FILE containing the network Jescnption made with N'EP 

The obstacle ENTRY' PROGRAM With '' ,s program fdvTiamic) ohsiacies like mine 

fields and bridges can be ^efincd. 

nie OBSTACLE FILE in which obstacle information i.s stored. 

The DATABASE WEAPON lNT)lCATORS- This database, which is also used outside the 
FSM environment, contains information on carriers. weap<ms. ammunition and duels (see 
reference [DBW'I|> 

This set of flies form the TERRAIN on which die simulatK»ns take place 

'Hie FORCE STRUCTLRE MODEL This is the core of the system, the simulation program 

Itself It uses all of the files that are described aNne as input 

The Analysis Data File generated by FSM These files csiniain analysis information ahH>ut 
'imulation mns. Mainly infs>rmation about duels (ATPACKER vs. TARGEI ) is sto;cd. 
Several analysis programs are available to extract more specific information from these files. 
The RF,START INFORMATION FluE. In this file all relevant information nesessarv for a 
System rt aarl is stored This file* is also used in a MOV!I{ program to provide a visual 
plavback of a simulation run 

le lAXXrlNG tiie can he used for debugging purposes For many parameters the logging 
can be turned on or off. depending on what programs or pan.s o^ programs are being 
cheeked. 


Of course there is more to the FSM system th;ui has been desenbed above Cneck the list of rcfererces for 
more in/orrnatKn on specific ifem.s. 



TNG repof! 




3 TDM USER INTERFACE 

I'his chjpfer dcscn^s the way the Type Definition Module iX)'^ uses the V'DU (Vide'' Display I nin 
screen and ihe keyboard. It explains how and where informaricn regarding the element, that are currenlh 
being edited is displayed and h v thu information can be modified. It also explair*^ the meaning of some of 
the '>iot-ke\ s' on u\e ke> board. 

The user interface of Uie Type Definition Module TDM is based on the package ATD Tins Adv^mced 
rennmal Driver is a set of run-time functions dial provide application programs like TDM widi a stan i.ird 
mclhixl of performing input and r-utnui on (character cell) terminals ^ detailed dcscnpiion of ATD cai' be 
found in reference [Bakuwel I]. 

3 I The VTDC screen 

The layout of the TDM screen is such that all informal.on regarding the iiims that arc currently being 
edited is presented in a uniform way An example screen is shown .n figure 3.1 



Fig 3 1: TDM screen layout 

17ie layout of 'he screen is as follows; 

Lines 1 and 2 show the cuncm version nun.r»er of the complete Force Structure combat simulation 
Mode) 

Line 3 shows the name of the program (i.e Type Definition Module) and the dale and time the 
program was started. 








TNO report 


Pa^'C 

13 


Lines 4 through 6 form the so-cahed ’STATUS LINE'. This status line shows wha. is currently being 
edited and on what level this editing is taking place In the cjtample the Unit Type TOW2 of the Pre¬ 
defined types is being edited (note tliough that both files were read m). The current level is the ty pe 
level Therefore all actions like SELECT. INSERT and REMOV'E w ill operate on types 
The part he sr-een between lines 8 and 21 is the general output window. This window is used for 
several things. First, information on the currently chosen item is displayed. This information is always 
display ed m the upper half of the output window. The example shows that the unit type TOW2 is of 
the MA.N'OFTA’RE unit group and has ONE carrier (with name PRATT'). 

In the lower half of the window a menu is displayed, providing access to this informaiion. 

The last rw'o lines of the screen show the last two messages that have been written to the logging 
terminal In the example, the program has logged that it has just read both Type Definition Files. 

There are several ways in which mformain>n can be feeded to TDM These are described below. NMtich 
way will Nc uvcd a particuUu’ piece of mformation depends on the kind of infomiation that is being 
edited 


MI NT S 

Menu s are used to select what piece of information has to be changed. A menu consists of a list of 
Items, consecutively numbered An item can be selected by either using the UP and TX)^^'N arrow 
key s or by directly entenng the item number. A choice is confirmed land executed) after RETURN is 
presse<l 

SI.ITTTOKS 

Selectors allow the user to select a value from a limited list of alternatives The selector is displayed 
in a special selection window, which pops up on the right side of the general output window. At any 
time a maximum of ten alternatives is displayed The user can scroll through the alicmaiives using the 
UP and DOWN arrow keys (one item at the time) or the NEXT and PREV SCREEN keys (one page 
at the time) A selection can be made by pressing the RETURN key. 

In several selectors a special item is defined. It is labeled -input-’ and appears as the first item in the 
list If this Item is selected, an input field window wiU pop up, allowing the user to enter a value 
outside the li.sl of alternatives. 




TNO report 


Page 

14 


INPLT FIELDS 

An input field is used when the new value of an item should be entered directly ftom the keyboard. In 
the middle of the general output window a small (one line) window pops up, containing the prompt 
(like Carrier amount?'). Underneath this prompt, another empty window pops up. In this window the 
current value of the item is displayed. This value can then be edited and the new value can be 
confirmed by pressing the RETURN key. 

3.2 The keyboard 

In the previous section the way TDM makes use of the VDU screen and different ways to enter input were 
described. Already some of the keys on the keyboard were mentioned, fhis section describes the meaning 
of these so-called hot keys'. In some of the descriptions the word level' is used. The concept of TDM 
levels is ettplained in paragraph 4.3. 

HELP 

Pressing this key pops up a window in which the meaning of tfic cuire.ntly active keys is described. 
This key is always active except when entering input values. 

RETURN 

This key is used to confirm selections and input values 
ESCAPE (F20 on VT220 keyboard) 

With this key any question or selection can be aborted without processing the (perhaps partial) answer 
that has been given sofar. This key is always active. 

LEFT ARROW 

This key is used to move UP one level (e.g. horn WEAPONS back to TYPE level). On the highest 
level this means leaving TDM and the user will be prompted to confirm this. 

RIGHT ARROW 

This key is used to move DOWN one level. E.g. after a FILE has been selected, RIGHT arrow has to 
be pressed to start editing TYPES. 






TNO report 


Page 

15 


IT / DOW"N ARROW 

The^e keys are used in menu's and selectors to point at the item that has to be selected. The cunenl 
choice IS highlighted. 

NEXT / PREV SCREEN 

These keys are used in selectors and are used to go through the list of items one page at the time (8 
i:v.ms in stead of 1). 

SEEECr 

Pressing this key can be used to select an item on the current level. If for instance the user is working 
on the WEAPONS of a certain TYPE, pressing SELECT will show a list of currently defined 
weapons for that type and one of those weapons can be selected. So selection always acts on 
information that is already defined. 

INSERT 

This key can be used to insert a new item on the currently active level In most cases TDM will 
present a list of items that can be insened. The special '-input-' item makes it possible to insert 
something that is not availbale in the list. If. in the previous example. INSERT was presseii. a list 
would come up with all possible weapons for the unit type, together with the special -mput-' item. 

REMOVE 

Finally, this keys gives the user the option to delete the item that has been chosen on the current level. 
Removing an item must always be confirmed. 

The next chapter will describe how to use the Type Definition Module in detail 





TNO report 


Page 

16 


4 TDM USER MANUAL 

In this chapter a detailed description of how to use the Type Definition Module is given. It starts with a lisi 
of definitions that have to be made before starting TDM. Then it describes all the actions that can be 
performed on all levels of TDM. 

4 1 Before staning... 

Before the Type Definition Module is started, a number of definitions have to be made, both m the 
FSM_USER_FILES file as well as in the FSM_USER_PARAMETERS file. A complete description of 
these definition files can be found in the chapter on FS.M_SYSTEM_PARS in reference [Joppe 1) 

The following file/terminal logicals should be defined in FSM_USER_F1LES 

FSM_USER_PARAMETERS 

This file logical name points to the file containing the user defined parameters 
E.\tL_nLE 

This file will contain all error log messages and warnings. Any file name (without an extension) is 
valid. From the name that is specified. TDM will construct the following name; 
<NANfE>_<FSMVERS10N>.<RUN_ID>.TDM. 

PDT_FILE 

This logical indicates the file containing the PRE_DEFINED_TYPES The name should not contain 
an extension. Usually it will be: FSM$DAT:[00(XX)0]PRE_DEFINED_TYPES. 

UDT_FILE 

This logical indicates the USER_DEFINED_TYPES file, and can be given any name (without 
extension). 

LCX}_TERM 

Use this logical to indicate on which terminal the logfile has to be printed. Specifying NL: as 
LC>G_TERM will prohibit interactive error logging. Do not specify TT: as LCX3_TERM, as ATD 
cannot handle this correctly. 






TNO report 


Page 

17 


The PDT_F1LE would in fact be defined in the (g:iobal) FSM_SYSTEjvi_FILES file, but is shown here to 
be complete. 

Apart from these files and terminals, a number of parameters have to be defined in the 
FSM_L’SER_PARAMETERS file; 

RLN.MODE 

This parameter determines the mode in which the program is run, and should have the value 
[NTER.\CnVE 

PL'N.fD 

Wnn this parameter specifics the run identification number. This RLN_ID is used as pan of the name 
of the error message log file (EML_FILE). 

In appendix A example FSM_USER_FILES and FSM_USER_PARAMETERS files are shown 
4,2 Stanmg.,. 

After the proper logicals for files (terminals) and parameters have been defined, the Type Definition 
Module can be started by ryping (at the VAX/VMS prompt); 

$ RUN FSM$EXE;(vcrsionlTDM 


or (if defined); 


$TDM 

After a (sh^n) while, the VDU screen will look as described in chapter 3. The current level is now the FILE 
level, and the user is ready to start editing UNrr_TYPES as will be described shortly. 

4.3 TDM Levels 


When using the Type Deftnifion Module the user is always working on a certain LEVEL. The level 
determines what kind of information can be selected, modified, removed or mserted. The levels arc 
hien< hically ordered. Moving from one level to another can only be done according to the hierarchical 





TNO report 


Page 

18 


structure (using the LEFT and RIGHT ARROW keys as described in section 3.2). The level structure is 
shown in figure 4.1. 


* FILE level 

I-* TYPE level 

j- -I- -* WEAPON level 

I i -* AMMO level 

I I-* assignments level 


Fig. 4.1TDM levels 


The rest of this user manual is divided in separate sections, one for each level Each section contains a 
description of the information that is available on that level. Also the possible actions arc described 

4.4 The FILE level 

This is the first (highest) level of the Type Definition Module. When the program is sianed as described in 
section 4,2, it starts on this level 

On the FILE level the user has to select on which Type Definition File(s) he wants to work. This selection 
is made by pressing the SELECT button. A selector will pop up with three alternatives: 

PDTFILE 

If this file is selected, TDM will work directly on the Pre Defined Types 
UDT HLE 

Select this option to work on the local User Defined Types. 

IN, BOTH/OUT: UDT 

When this option is selected, TDM will read in both the PDT and the UDT file. Types from both files 
can be edited. However, as soon as a type is modified (or a new type inserted), it will become User 
Defined (and will be wntten to the UDT file). In this way a local version of a Pre Defined Type can 


be made. 









Page 

19 


After a file is selected (it's name will be shown on the Stams Line), the user can start editing the types that 
are defined in it. To do that, the RIGHT ARRO'W key has to be pressed, which will activate the TYPE 
level. 

If the LEFT ARROW key is pressed, TDM will ask the user to confirm that he wants to leave the program. 
4.5 The TYPE level 

On this level the Type Definition File(s) to work on have been chosen. TDM will now automatically select 
the first t>'pe m the current file (if there is at least one), and will display its information in the general output 
window . The screen will look as in figure 4.2. 



Fig 4.2: The TYPE level 

The information displayed about a type is: 

Unit Group The unit group to which this type belongs (at this moment one of the following: 

MANOEUVRE. ARTILLERY. C_MANOEUVRE or C.ARTILLERY). 
Definitionlevel Whether the type is defined in the PDT or UDT file (either PRE_DEF or 

USER_DEF). 

Carrier name The name of the carrier (possibly empty). 

Carrier amount The number of carriers in this type. 






TNO report 


Page 

20 


In the bottom half of the general output window, a menu is displayed, allowing the user to choose one of 
the above items. The unit group, the carrier name and the carrier amount can be modified. The definition 
level is maintained by TDM and carmot be modified directly by the user. If BOTH files were selected on 
the file level, every type that is modified will get definition level USER_DEF. Use the UP and DOWN 
arrow keys or the numerical keys to choose an item and press return to modify it. 

Using the SELECT key, a new type can be selected from the lisi of types defined in the file(s) that was 
(were) selected on the FILE level. The name of the selected type is shown on the status line and its 
information is displayed 

If the REMOVE key is pressed. TDM will ask the user to confirm the deleuon of the currently selected 
type. If confirmed, the type with all its weapons/ammo and assignments will be deleted. 

Press the INSERT key to add a new type. The program asks for the name of the new type and allocates 
space. After adding a type it will be automatically selected so the user can continue to modify its 
information. 

The RIGHT ARROW key moves TDM to the next level. In this case TDM asks the user to which level he 
wants to move. Possibilities are either WEAPONS/AMMO (see sections 4.6 and 4.7) or ASSIGNMENTS 
(see section 4.8). 

With the LEFT ARROW key returns TDM to the FILE level. TDM asks the user if he wants to save the 
modified types. Types will be saved in the file that was selected on the FILE level. If BOTH files were 
selected, only the types that are USER_DEF will be saved (in the UDT file). 

4.6 The WEAPON level 

On this level, a type has been selected and its weapons (and ammo) can be edited. If the current type has at 
least one weapon, the first weapon from the list will be selected automatically and its information will be 
displayed Figure 4.3 shows what the screen looks like on this level. 




TNO report 


Page 

21 



Fig. 4.3: The 3VEAPON level 


The following information about a weapon >« diij/iayed: 

Weapon amount The number of this kind of weapon that the current type has. 

Max ammo amount The maximum space that is directly available for all ammo for this weapon 

Max ammo stock The maximum space that is available in the slock for all ammo for this weapo.i. 

Again, the bottom half of the output window shows a menu to select one of the above pieces of 
information. Use the UP and DOWN ARROW keys to select and Rfl URN to modify. 

As with types. SELECT allows selection of a weapon from all weapons in the current type and REMOVE 
deletes the currently selected weapon. With INSERT a new weapon can be added. TDM offers a selection 
from all weapons that are defined in the Database Weapon Indicators (DBWI) for the carrier of the current 
type. Ofcourse also a weapon outside this DBWI list can be inserted (using the '-input-' item). 

Pressing the LEFT ARROW key will make TDM return to the TYPE level, while pressing the RIGHT 
ARROW key activates the AMMO level (described in the next section), 

4.7 The AMMO level 

On this level the ammunition for the currently selected weapon can be edited. As on the other levels, the 
first available kind of ammunition is selected and displayed. In figure 4.4 a sample screen is shown. 










TNO report 


Page 

22 



Fig. 4.4: The AMMO level 

Information displayed about ammunition is: 

Ammo amount The amount of ammo that is directly available. 

Ammo stock The amount of ammo in stock. 

All operations that work on the WEAPON level, work similarly on the AMMO level. 
UP/DOWN/RETURN select and modify information. SELECT chooses a new ammo. REMOVE deletes 
the currently selected kind of ammo and INSERT adds a new kind of ammo. The LEFT ARROW key 
returns the user to the WEAPON level. Since there's no deeper level, pressing the RIGHT ARROW key 
has no effect. 

4.8 The ASSIGNMENTS level 

On this level the Ust of assignments that is attached to a UN1T_TYPE can be edited. The mode of operation 
on this level is a bit different from the other levels. 

The status line shows that the user is working on assignments and tells how many assignments are defined 
for the currently selected type. 






TNO report 



Page 

23 



Fig, 4.5: The ASSIQNMESTS level 

In the general output window a list of assignments is displayed Figure 4.5 shows whai the screen loc^k-s like 
on this level This list consists of a number of lines with the following format; 

num> ATTRIBUTE = VALUE 

The user can go through this list using the UP and DOWN ARROW keys or the NEXT and PREV 
SCREEN keys. After pressing RETURN, a new value for an attribute can be given. Pressing the REMOVE 
key deletes an assignment (after cc^firmation). Pressing INSERT allows the user to add an assignment by 
selecting a new attribute from a list of all possible unit attributes. After selecting an attribute, its value can 
be entered. Currently TDM does not check whether the attribute you add belongs to the unit group of the 
unit. 

LEFT ARROW refums TDM to the 7TPE level, and since there are no deeper levels* the RIGHT ARRO'^' 
key is not active. 





TNO report 


Page 

24 


REFERENCES 


fBakuwe) 1) Aji Advanced Terminal Driver (ATD) for VAX'VMS. Bakuwel. Ing J A , 1989 Rep'n nv> 
FEL-89-A352. 

|DBWI] Database Weapen Indicators. Intermediate report. PML 1986-3 (classificaiie: geheim) 

[Joppe 1 ] Concept of the Warganie Construction Set fWCS) Joppe. Drs W , Schagen, 

Drs P A B van. e a. To be issued 

[Schagen ! j Eindrapportage Project Force Structure Modelling. Schagen. Drs P.A B \an. Joppe. 

Drs W. en Le Mahieu. Ir M J. 1989. Rapport no FtlJ^9A,^4.S 
[Schagen 2| User Manual of the Force Structure Model Ssenano Fxliior SCEM-. Schagen Drs P A H 
van. 1988 Repiin no. FT.LI9K8-H)I 



Drs P .A.B van Schagen 
(groupleader) 


Vdg Drs R Kiel 
(author) 






TNO report 


Appendix A 


Page 

A,i 


E.’vVNIPLE PARAMETER FILES 

In tins appendix an example FSM_USER_FI1 ES and FSM_LSHR_PARAMETERS file is gis'en. Note that 
these files can contain aFo parameters for other programs, without affecting the perfonnance of TDM For 
cleartts and brevity only TDM parameters are given. 


fSM.rSliRJ'Il I..S 


I SM_L SFR .PARAMFITRS 

FRRDR^Fll.l 

EMI. ni.F 

rnrj il.t 

I fK, TERM 


FILE nFSM_i;SER_PARS 

FILE FSM$DAT:|0(XXXX))FS.M_ERROkJ 

FILE llEKPSLOC 

FILE I |L.SER_bEnNED.T\TF,S 

TERMINAL Nl 


I SM t SI KJ'ARS 


KI N MODE 
RIN^ID 


RLN MODES IN I ERACT.'s E 

INIEC.ER TAPE 101 








TNO report 


Appendix B 


Page 
B 1 


TDM E'.RRORS 


When working with TDM a n* iixtr of things can go wrong le g trv mg to define a tv-pe that already exists). 
In case of such lui error, a message is pnntcd on the K»itinn line ol the V'Dl screen ' the LCXj line). Below a 
list of all possible errors is given. 

5(Mi Interna! I DM error 

501 N\' Tvp'.' l^ftnitton File fUDT or PDT) selected 

502 No Type selected 

The' re no Types 10 select from 
New tvpe-name should not be empty 
No :ap*.>n selected 

.■'(Ks 'Fhere are no Wc;ifK»ns to select from 
Ni» Amrtu> scle». ted 

50 s Then' S no .Amnu' to select from 

509 Miiximum number of weapons per carrier = S 

510 Current carrier already has a we;ipon named $ 

511 Maximum number of ammos per weapon = S 

512 Current weapon already has ammo named 

513 Maximum number of unit types = $ 

51-1 Type ■$'is already defined 

515 Assignment is already defined 




UNCLASSIFIED 

REPORT DOCUMENTATION PAGE 


(MOD-NL) 


1 DEFENSE REPORT number (MOD NLj 2, RECIPIENTS ACCESSION NUMBER 3. PERFORMING ORGANIZATION REPORT 

NUMBER 

TL'UC 1228 FEL-90-A080 


4 project TASKWORK UNIT NO 

2C565 


5 CONTRACT NUMBER 
A89KL619 


7 NUMBER OF PAGES 8. NUMBER OF REFERENCES 

26 ONCl APPENlDiCES. 5 

EXCL r?OP I- DISTRIBUTION LIST) 


6. REPORT DATE 

NOVEMBER 1990 


9. TYPE OF REPORT AND DATES COVERED 
PROGRAM manual 


10 TITLE AND subtitle 

USER MANU A. of the force STRUCTURE MODEL UNIT TYPE EDITOR TDM 


11 AUTHOB(S) 

vDG DRS R i<iEL 


1 Z PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

TK.C PmVS CS and ELECTRONICS LABORATORY, P O BOX 96864. 2509 JG THE HAGUE 
CODE WAA.SDORPERWEG 63, THE HAGUE, THE NETHERLANDS 


13 SPONSORING MONITORING AGENCY NAME(S) 

’NO D: ViS ON OF NA-:ONAL DEFENSE RESEARCH, THE NETHERLANDS 


14 SUPPLEMENTARY notes 

■HE ptvs cs and Electronics laboratory is part of the Netherlands organization for 
applied SC'ENTirC RESEARCH 


15 ABSTRACT (MAXIMUM 200 WORDS, 1044 POSITIONS) 

THE ’VPE DEFINITION MODULE TDM IS PART OF THE COMBAT SIMULATION MODEL FORCE STRUCTURE 
model FSM and has been DEVELOPED UNDER CONTRACT A89KLd 19 THE PURPOSE OF TDM IS TC 
PROVIDE A WAV OF INTERACTIVELY CREATING AND MODIFYING SO-CALLED UNIT_TYPES THESE 
UNIT T/PE5 ARE USED AS TEMPLATES FOR CREATING THE UNITS FOR A FSM SIMULATION RUN THE 
UN:' TYPES ARE STORED INIYVO TYPE DEFINITION FILES: THE SYSTEMWIDE AVAILABLE PRE DEFINED TYPES 
A,ND THE .OCA.LV available USER. DEFINED^TYPES THE REPORT SERVES AS THE USER MANUAL FOR TDM 


16 DESCRIPTORS IDENTIFIERS 

COMPUTER PROGRAM 
WARGAME 


17a SECURITY CLASSIFrCATION 
(OF REPORT) 

UNCiDVSSIFIED 


17b SECURITY CLASSIFICATION 
(OF PAGE) 

UNCLASSIFIED 


17c, SECURITY classification 
(OF ABSTRACT) 
UNCLASSIFIED 


18, DISTRIBUTION/AVAILABILITY STATEMENT 

UNLIMITED 


17d, SECURITY CLASSIFICATION 
(OF TITLES) 

UNCLASSIFIED 


UNCLASSIFIED 








