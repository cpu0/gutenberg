
USAISEC 


AD-A268 518 




US Army Information Systems Engineering Command 
Fort Huachuca, AZ 85613-5300 


U.S. ARMY INSTITUTE FOR RESEARCH 
IN MANAGEMENT INFORMATION. 
COMMUNICATIONS, AND COMPUTER SCIENCES 


SAMeDL: 
Technical Report 
and Appendices A, B, and G 


ASQB-GI-92-015 



AIRMICS 

115 O’Keefe Building 
Georgia Institute of Technology 
Atlanta, GA 30332-0800 


93 8 24 005 




SECURITY CLASSIFICATION OF THIS PAGE 


Form Approved 
0MB No. 0704-0186 
Exp. Date: Jun 30, 1986 


REPORT DOCUMENTATION PAGE 


la. REPORT SECURITY CLASSIFICATION 

UNCLASSIFIED 

1b. RESTRICTIVE MARKINGS 

2a. SECURITY CLASSIFICATION AUTHORITY 

_HZA_ 

3. DISTRIBUTION/AVAILABIUTY OF REPORT 

N/A 


4. PERFORMING ORGANIZATION REPORT NUM8ER(S) 

5. MONITORING ORGANIZATION REPORT NUMBER|S) 

N/A 

6a. NAME OF PERFORMING OR(3ANIZATION 


7a. NAME OF MONITORING ORGANIZATION 

N/A 

6c. ADDRESS (City, Stata, and Zip Coda) 

7b. ADDRESS (City, State, and ZIP Code) 

N/A 

8b. NAME OF FUNOING/SPONSORING 
ORGANIZATION 

Software Technology Branch, ARL 

8b. OFFICE SYMBOL 
(If applicable) 

AMSRL-CI-<n3 

9. PROCUREMENT INSTRUMENT IDENTIFICaViON NUMBER 

8c. ADDRESS (City, State, and ZIP Code) 

115 O'Keefe Bldg. 

Georgia Institute of Technology 

Atleuita, GA 30332-0800 

10. SOURCE OF FUNDING NUMBERS 

PROGRAM 
ELEMENT NO. 

PROJECT 

NO. 

TASK 

NO. 

WORK UNIT 
ACCESSION NO. 


11. TITLE (Include Security Clessificetlon) 


SAMeDL: Technical Report St Appendices A, B & G 

12. PERSONAL AUTHOR(S) 


MS. Deb Waterman 


13a. TYPE OF REPORT 

13b. TIME COVERED 

14. DATE OF REPORT (Year. Month, Day, 

15. PAGE COUNT 

Technical Paper 

FROM Anr 91 TO Sent 92 

Sept 15, 1992 

81 


16. SUPPLEMENTARY NOTATION 


17. 

COSATI CODES 

18. SUBJECT TERMS (Continue on reverse if necessary and Identify by block number) 

FIELD 

GROUP 

SUBGROUP 

Ada Database Access, SAMeDL, Ada extension mod- 




ule, SQL 


19. ABSTRACT (Continue on reverse It necessery and Identify by block number) 


This report details the research efforts Into the SQL Ada Module Data¬ 
base Description Languaere (SAMeDL). Four compilers are presented 
(Oracle, Informix, XDB, and Sybase) that allow Ada application programs 
to access database using a stcuidard SQL query language. Copies of the 
compiler can be obtained from the DoD Ada Joint Program Office 
703/614-0209. 


26. DISTftiBUTION/AVAILABILITY OF^ AfeSTkACT* I 21. ABSTRACT SECURITY CLASSIFI(l:AtlON 

03 UNCLASSIFIED/UNLIMITEOQ same as RPT. □ DTIC USERS I UNCLASSIFIED 

2ia. nAMe 6f RESPONSIBLE individIial ^ H5b“TSLfiPH6kS(/nc/uce Area <5oSe)| 'iic. iPPldrS'yRIB'dL 


[__LTC^avij_^_S^vens | (404) 894-3110 | AMSRL-CI-CD 

All othw •dmora are obaoiata. SECURITY CLASSIFICATION OF this page 
































This research was performed Stadsdca Inc., contract number DAKFll-91- 
C-0035, for the Army Insdtute for Research in Management Informadon, 
Communicadons, and Computer Sciences (AIRMICS), the RDTE organization of 
the U. S. Army Information Systems Engineering Command (USAISEC). This final 
report discusses a set of SAMeDL compilers and work enviomment that were devel¬ 
oped during the contract. Request for copies of the compiler can be obtained from 
the DoD Ada Joint Program Office, 703/614/0209. This research report is not to 
construed as an official Army or DoD Position, unless so designated by other 
authorized documents. Material included herein is approved for public release, 
distribution unlimited. Not protected by copyright laws. 


THIS REPORT HAS BEEN REVIEWED AND IS APPROVED 




Glenn E. Racine, Chief 
Computer and Information 
Systems Division 


ames D. Gantt, Ph.D. 
Director 
AIRMICS 


lync QUALITY INSPECTED 3 


Aoeflsslon For 

i’*rris GRAti 

DTir TAB 
I Uu. .niiiced 
! Ju : C. I tl on_ 


By--^ 

DlJt ribiitlon/ 

Av\i liit ll it.y Godsa 
lAvQli an-i/or 





SAMeOL.TR.lO.lS Sep 92 


SAMaDL Pilot Project 
TECBHICAL REPORT 


Prepared for 

a. S. Army Znetltute for Research la Management 
Information, Comamnication and Cooputer Science (AIRMICS) 

115 O'Keefe Building 
Atlanta, GA 30332-0800 


Contract No. DAKF11-91-C-0035 
CDRL A003 


Prepared by 
STATZSTICA, Znc. 

12200 Sunrise Valley Drive, Suite 300 
Reston, Virginia 22091 




SAMttDL.TR.10.15 Sep 92 
TABLE OF COMTEBTS 

1.0 INTRODUCTION. 1 

1.1 Scope. 1 

1.2 Backgroxind. 2 

1.2.1 SAMeDL. 2 

1.2.2 SIDPERS-3. 2 

1.2.3 Intennetrics. 3 

1.3 Technical Report Overview . 3 

2.0 TASK 1 - SHADOW TASK. 4 

2.1 Existing Application Migration . 4 

2.1.1 Module Input Migration. 7 

2.1.1.1 Approach . 7 

2.1.1.2 Observations . 8 

2.1.2 Interface Migration . 8 

2.1.2.1 Approach . 8 

2.1.2.2 Observations . 8 

2.1.3 Data Migration.10 

2.1.3.1 Approach.-.10 

2.1.3.2 Observations . 10 

2.1.4 Test.10 

2.1.4.1 Test Plan.11 

2.1.4.2 Test Results.11 

2.2 New Application Development. 12 

2.2.1 Approach.13 

2.2.2 Observations.17 

i 



























SAMttDL.TR.10.15 Sep 92 


2.2.2.1 Strong Typing^.17 

2.2.2.2 Error Heuadllng.18 

2.2.2.3 Null Handling.19 

2.2.3 Multiple Target Databases . 19 

3.0 TASK 2 - TCX5LSET DEVELOPMENT.21 

3.1 SAMeDL Module Mauaager Development.. 2i 

3.1.1 Design.21 

3.1.2 Code.. . 22 

3.1.3 Test. 22 

3.2 SAMeDL Compiler Upgrade . . 22 

3.2.1 Design.22 

3.2.2 Code.23 

3.2.3 Test.23 

3.3 SAMeDL Compiler Retargets.24 

3.3.1 Informix.25 

3.3.2 XDB.25 

3.3.3 Sybase.25 

3.3.4 Oracle .....; . 26 

3.4 Other Support Tool Development ..27 

Figures 

Figure 2-1 Layered Approach . 5 

Figure 2-2 The SIDPERS-3 Prototype Architecture . 6 

Figure 2-3 The Circular Dependency between SAMeDL and MNjl . 9 

Figure 2-4 The Circular Dependency Solution .. . 9 

Figure 2-5 Definition and Abstract Modules for Unit Object . 14 

ii 

























SAKeDL.TR.lO.lS Sep 92 

Figure 2-6 Scunple Schema Module for Redesigned Application . 15 


Figure 2-7 The SAMeDL Redesign Architecture .16 

Figure 2-8 S^unple Status Map Declaration 18 

Figure 2-9 CONNECT Statements 20 

Tables 

Table 2-1 CSUs in the Ada Application Layer .4 


Tcd>le 2-2 SIDPERS-3 Layers/Architecture Correlation .... 7 


Appendices 

Appendix A - Acronyms and Bibliography .A-i 

Appendix B - SAMeOL Development Environment Module Manager 

Top Level Design .B-1 

Appendix C - SAMeDL Development Environment Test Plan . . . . C-1 

Appendix D - SAMeDL Language Reference Memual.D-l 

Appendix E - SAMeDL Installation Guides . E-l 

Appendix F - SAMeDL User Manuals.F-1 

Appendix G - CSU Test Cases .G-1 


iii 













SAMeDL.TR.10.15 Sep 92 


1.0 nmtoDtJCTioN 

The SQL Ada Module Description Leinguage (SAMeDL) Pilot Project is 
an Ada Technology Insertion Progr^un (ATIP) that explores the merits 
of the SQL Ada Module Extensions (SAME) methodology. SAME 
methodology entails interfacing Ada applications with relational 
Datei^se Management Systems (DBMSs) that use SQL. Developed by Dr. 
Marc Gradiam at the Software Engineering Institute (SEI), SAMeDL is 
the language created to isplement the SAME architecture. 

1.1 Scope 

The SAMeDL Pilot Project analyzes the value of the SAME methodology 
for use on future Department of Defense (DoD) DBMS applications. 
As a basis for the study, this project uses the SAMeDL to redesi^ 
the SQL interface layer of an existing Ada application. This 
effort is referred to as a "Shadow Tas)c" because development does 
not inpact or influence the original Ada application development. 
The Ada application chosen for the pilot project is the Steuidard 
Installation Division Personnel System - Third Release (SIDPERS-3) 
Demonstration Prototype, a large Army Management Information System 
(MIS). The prototype was originally designed using amother SQL 
binding. 

STATISTICA approaches the pilot project in two stages; First, the 
SQL binding layer is replaced with a duplicate layer iiiplemented in 
SAMeDL. '^e Ada application design cuid code remains unchauiged. 
Second, the Ada application eind SQL interface layer will be 
redesigned to incorporate features of Ada not incorporated in the 
original application design due to the SQL binding. SAMeDL 
provides the meauis to use Ada features such as strong typing and 
exception handling. 

As a byproduct of the SAMeDL Pilot Project analysis, a SAMeDL 
toolset is being developed for four commercial DBMSs. 
Intezmetrics, Inc. is supporting STATISTIG\. in this contract by 
developing the support toolset. The toolset includes a SAMeDL 
compiler and Module Manager. The Module Manager is a library 
tncuiager that maintains source code controls and performs 
consistency checks on SAMeDL source code and its corresponding 
Ada/SQL interface. The resulting toolset provides the Ada 
community with a more mature SAMeDL con^iler that is standard 
across DBMSs. With each retargeting of the compiler, STATISTICA 
ports the Ada application layer and reports on the portability of 
the con^iler. 


1 




1.2 Baclcgxound 
1.2.1 SAMeDL 


SAMeOL.TR.10.15 Sep 92 


In 1986, the American National Standards Institute (ANSI) issued a 
standard for SQL. At that time, the stamdard included amnexes 
describing interfaces between SQL amd programming languages, such 
as COBOL, FORTRAN, and Pascal. In 1987, the Ada Joint Program 
Office (AJPO) tasked SEI to define ain Ada SQL interface. SAME is 
the result of SEI's efforts. The SAME uses Ada features to provide 
the following services to Ada SQL applications: 

• A robust treatment of SQL data within application 
programs which effectively prevents use of null values as 
though they were not null while requiring no run time 
conversion of non-null data. 

• A treatment of DBMS errors end exceptional conditions 
which is flexible, allowing application designers to 
decide which conditions are expected euad which are 
irrecoverable, yet prevents amy such DBMS condition from 
being "missed” by the application. 

• An extended dataUsase description using aibstract, 
application oriented types amd the application of a 
strong typing discipline to SQL statements. [3] 

1.2.2 SIDPERS-3 

As the prime contractor, STATISTICA is developing SIDPERS-3 for the 
Army. This Standard Ani^ Management Information System (STAMIS) 
automates applications in 36 personnel work categories. 

In May 1991, STATISTICA presented a SIDPERS-3 Demonstration 
Prototype to the Amy that featured the functional requirements 
described in several of the persomel work categories. The 
prototype validates mamy of the technical characteristics 
associated with an MIS development in Ada, such as appropriateness 
of Ada binding, portability of applications, and robustness of the 
Ada Programming Support Environment (APSE). 

Although developers on the SIDPERS-3 Teaun have had many successes 
in their use of Ada, binding Ada to DBMSs has presented significant 
challenges. The SIDPERS-3 Team desires a binding that is straight 
forward to ixnplement, insulates the application software from the 
specificity of a particular database implementation, and allows the 
Ada software engineer to use the full power of Ada. SEI's work in 
developing the SAME methodology has been closely followed. Early 
in the program, the SIDPERS-3 Team reached a consensus that SAMeDL, 
with an appropriate SAMeDL support toolset, would provide the 


2 



SAMeDL.TK.10.15 Sep 92 


necessary Ada/DBMS binding layer. However, SAMeDL lacked support 
tools, realistic application exaii?>les, and usage metrics (SAMeDL 
has not been en^loyed as the Ada/SQL binding on suiy large Ada MIS 
program to date). Because of these barriers, the SIDPERS-3 Team 
felt that it was too great a technical risk to rely on SAMeDL. 
Hence, the SIDPERS-3 Team decided to forego the use of SAMeDL in 
favor of other Ada/SQL interfacing methods. 

1.2.3 Intenaetrlcs 

Intermetrics has been actively involved with the SAME Design 
Committee since early 1988. To assist with the development of the 
SAME methodology cmd the emerging standard SAMeDL during this 
period. Intermetrics developed early prototype SAMeDL compilers to 
promote the Insertion of SAMeDL into mainstrecun Ada applications. 
While these activities were useful in exhibiting proof of concept, 
the seed that was planted did not grow as hoped; broad acceptance 
and use of SAMeDL by the Ada community has not yet materialized. 

A nxamber of factors contribute to the Ada community's reluctcuice to 
insert SAMeDL into large Ada applications; STATISTICA's e^qperience 
indicates that two of the most significant factors are; 

1. - The lack of realistic SAMeDL applications, user 

experiences, and related measurements. 

2. A shortage of robust SAMeDL support tools. 

1.3 Technical Report Overview 

The purpose of this technical report is to report quarterly the 
results of STATISTICA's analysis and the progress of the toolset 
development. The report will be accumulative in that sections will 
be completed as activities are reported. The complete outline of 
the report is provided as a work plan. As subtasks are completed, 
the corresponding subsections will be con^leted. 

Section 1 provides the introduction and background needed by the 
casual reader for understeinding of the remaining sections. The 
project con^rises two major tasks; the Shadow Task cmd Toolset 
Development. Section 2 discusses the Shadow Task during which 
developers migrate the existing interface layer to SAMeDL and then 
redesign and re-implement the application layer to incorporate 
SAMeDL features. Section 3 reports the efforts to develop the 
Module Mcmager, upgrade the SAMeDL con^iler, and retarget the 
cozt^iler to the four DBMSs. 

Appendices provide supplemental information, and will be provided 
as the information is gathered. 


3 



SAMttDL.TR.10.15 Sep 92 


2.0 TASK 1 - SHADOW TASK 

To show the feasibility and benefits of using SAMeDL, STATISTICA 
will redesign and re-inclement portions of the SIDPERS-3 prototype 
demonstrated to the Army in May 1991. Table 2-1 lists the Con^uter 
Software Units (CSUs) of the prototype that will coirqpose the 
application layer of the SAMeDL Project. These CSUs were chosen 
based on the f\inctionality and services required of the database. 
Each CSU in the application layer represents a con^lete thread of 
control to facilitate the analysis amd measurement of performcince. 
The prototype currently uses XDB, a Commercial Off the Shelf (COTS) 
SQL DBMS. 


CSU Tide 

Description 

Services 

Approx. 1 
LOC» 

Sgt Ssg Piomotimt Eligibility Unit 

This CSU initially calculates a soldier’s 
promotion points and generates PCN 
AAA-209. DA Form 33SS-E, 

Promotion Point WorksheeL 

Select 

Update 

Insert 

Fetch 

2.866 

Promodon Standing List Removal 

Action 

This CSU removes a soldier from the 
E5-E6 Promotion Standing List and 
generates PCS AAA-034, a Removal 
From Local Recommended List 
memorandum. 

Select 

Delete 

2,150 

1 * Lines of Code | 


Table 2-1 CSUs in the Ada Application Layer 


2.1 Existing Application Migration 

Figure 2-1 shows that developers used a layered approach in the 
design of the prototype to isolate the datad^ase. Figure 2-2 shows 
the layers in more detail, with each box representing a group of 
Ada pac]cages. Table 2-2 depicts the correlation between the layers 
in Figure 2-1 amd the Ada packages depicted in Figure 2-2. 

Design decisions made early in the project were premised on using 
a commercial DBMS. Inherently, SQL databases, limited to the 
stamdard SQL data types, do not support strong data typing. To 
avoid amonymous types amd to add reliability and maintainability to 
the system, the SIDPERS-3 Team created a layer of Type packages. 
These packages declare sxibtypes corresponding to each column in the 
database. In the DataUoase Support layer, data retrieved from the 


4 





















SAKttDL.TR.lO.lS Sep 92 


database is explicitly converted to SIDPERS-3 types before 
processing by the application layer. The Datcdsase Support layer 
isolates the SIDPERS-3 application from changes that may occur to 
the database. 



Figure 2-1 Layered Approach 


The SIDPERS-3 Team developed a Man Machine Interface (MMI) to 
hcmdle all user interfaces, including reports. The data is passed 
between the MMI and the application as string objects to support 
all of the SIDPERS-3 data requirements. The Types packages written 
to support the dataUsase interface also serve the MMI by eliminating 
a conversion layer between the application and the MMI. 

Finally, to avoid the bulky processing required to test for missing 
data (null values) , the SIDPERS-3 Team created the database with 
NOT NULL columns. 


5 
























SAMeOL.TR.10.15 Sep 92 



Figure 2-2 The SIDPERS-3 Prototype Architecture 


6 





















SAMeDL.TR.10.15 Sep 92 



Figure 2-2 Box 

Conversion Efforts 

Ada i4>plication 

Application Driver 
Reports 

Screens 

Field Support 

Data Stores 

Types Paclcages 

No changes will be made to 
the application layer. 

Interface Layer 

Database Support 

Remove Commit/Rollback 
procedures; add f\inctions to 
convert SAMeDL types to 
SIDPERS-3 types; remove 
exception handlers. 

SQL Module 

Generated Code 

Database Access 

Replace SQL modules with 

SAMeDL modules. 


Table 2-2 SIDPERS-3 Layers/Architecture Correlation 


There are no changes to the Ada application layer in the 
Application Migration subtask;. The prototype uses XDB's module 
compiler as the SQL binding to the Ada application layer. For the 
SAMeDL Pilot Project, this layer is replaced with a SAMeDL layer. 
Sxibsection 2.1.1 discusses this conversion process. The Database 
Support packages require modifications to remove features provided 
by SAMeDL and add conversions of SAMeDL types to SIDPERS-3 types 
(declared in the Types packages). The chamges required to the 
interface layer are discussed in Siibsection 2.1.2. 

2.1.1 Module Input Migration 

The migration of the SQL input modules involves replacing the XDB 
SQL Modules with SAMeDL Modules. 

2.1.1.1 i^roach 

The project team quickly completed this step by referring to the 
SQL statements in SQL module files for the specific SELECT, UPDATE, 
DELETE, and INSERT statements. Also, since only certain tables and 
columns are required by the chosen CSUs, the SQL modules provided 
the needed information for declaring the domain types and tadsles in 
the SAMeDL Definition and Schema modules. The SAMeDL modules were 
submitted to the SAMeDL compiler for generation of the Ada 
packages. For the XDB DBMS, the Ada packages generated by the 
SAMeDL compiler replace the Dateibase Access files (refer to Figure 
2-2) in the SIDPERS-3 model. 


7 


















SAMeOL.TR.10.15 Sep 92 


2.1.1.2 Observations 

The ease of the SQL to SAMeOL module conversion can be attributed 
to the module binding provided by XDB and the layering approach 
used by STATISTICA to isolate the database. Had the SIDPERS-3 Team 
chosen to use an embedded SQL interface without isolating the 
dataUsase, the application layer would have required major changes 
to migrate to SAMeDL. 

2.1.2 Interface Migration 

The interface migration involves modifying the interface layer 
(refer to Figure 2-1) or Datal>ase Support packages (refer to Figure 
2-2}. The Database Support packages are changed to reference the 
SAMeDL modules rather than the Datadjase Access packages generated 
by the XDB SQL module compiler. 

2.1.2.1 J^proach 

The interface layer represents a set of Ada packages that provides 
the conversion of SQL types to user-defined types specific to the 
SIDPERS-3 application. The Datadsase Support packages directly call 
the Ada packages generated by the XDB SQL module compiler. The 
Database Support packages were modified to interface with the Ada 
code generated by the SAMeDL conpiler. These packages provide 
datadjase control functions such as rollback, commit, open database, 
close database, and error handling. Since these functions are 
provided in the SAMeDL packages, the fxinctions were removed from 
the Datadsase Support packages. 

The SIDPERS-3 MMI uses one datadsase table for processing error 
messages. A SAMeDL module was written to provide this service, aind 
the appropriate MMI package was modified amd recompiled to 
interface with the new SAMeDL module. 

2.1.2.2 Observations 

The migration to SAMeDL required no modifications to the 
application layer. Major changes, however, were required to the 
DatcLbase Support packages to interface with the SAMeDL modules. 

There is a conflict in the mauiner in which the SAMeDL modules auad 
the MMI display error messages. The SAMeDL error hamdling 
procedure uses the Text_IO package to output to the screen a 
message containing the error code. In contrast, the MMI provides 
a stauidard display of all user messages. To take advantage of the 
existing MMI procedure, the SAMeDL error heuidling procedure could 
be modified to call the MMI to display the error message. This 
solution, however, creates a circular dependency between the SAMeDL 
layer and the MMI, as shown in Figure 2- 3. 


8 





SAMeDL.TR.10.15 S«p 92 



Figure 2-3 The Circular Dependency between SAMeDL and MMI 


The solution to the circular dependency problem is the creation of 
a separate error handling package, as shown in Figure 2-4. Upon 
return of the error code, negative SQLCODE, from the datad>ase, the 
S;^eDL . layer calls the error handler in the. Dataibase Errors 
package. The error handler uses the function to display user 
message provided by the MMI. 



Figure 2-4 The Circular Dependency Solution 


9 









SAMeDL.TR.10.15 Sep 92 


2.1.3 Data Migration 

The dateibase for the SIDPERS-3 Oemonstration Prototype contains 
approximately 200 tables. Only 34 of these tables are accessed by 
the two CSUs in the SAMeDL Pilot Project. Data migration involves 
the transfer of the 34 tables to a smaller XDB dated^ase. Once the 
sxibset database is created, it can be used for creating euid loading 
dataUsases in Informix, Oracle, and Sybase. 

2.1.3.1 Approach 

STATISTICA foxind most of the tcible names for the two CSUs in the 
SQL modules that were originally written for the SIDPERS-3 
Demonstration Prototype. Other tcibles names, used as lookup tcibles 
or pop-up windows, were found by perusing the Dated>ase Access 
packages. 

An SQL procedure was written using the XDB system tcibles to 
generate the script file automatically to create the tables in a 
new XDB database. Another script file was written to create 
indexes identical to the original SIDPERS-3 indexes. The two 
script files contain steindard SQL statements; therefore, they can 
be used to create the tables and indexes in the other DBMSs. Once 
the tables and indexes were created, the export and in 5 >ort 
utilities provided by XDB were used to'move the data to the new 
database. 

The new datcdsase was tested for con^leteness using the original 
SIDPERS-3 Demonstration Prototype. During testing, it was 
discovered that the MMI uses a database tcdsle to display user 
messages. This tcd^le was added to the new datcd^ase. 

2.1.3.2 Observations 

The primary reason for creating a subset of the SIDPERS-3 database 
was to facilitate loading data to Informix, Oracle, and Sybase. 
The conversion of the database to these DBMSs will be described in 
Subsection 2.2.3. 

2.1.4 Test 

Testing in the Application Migration subtask focuses on answering 
two questions: 

1. Is the application correctly converted, retaining all 
fxinctionality of the original application? 

2. Are there differences in performance between the original 
application and the new SAMeDL application? 


10 



SAXaDL.TR.10.15 Sep 92 


2.1.4.1 Test Flan 

To test the correctness of the SAMeDL application, the project team 
is using the test cases created by the SIDPERS-3 team for the 
SIDPERS-3 Demonstration Prototype. The CSU Test Cases are included 
in this report as i^pendix 6. Using the test data in the XDB 
datedsase, the project team will execute the test procedures on both 
the original application and the SAMeDl application. . Any 
discrepemcies in the SAMeDL application will be noted, corrected, 
and retested until the SAMeDL application is functionally equal to 
the original, baseline application. 

Performance differences between the original application euid the 
SAMeDL application are measured by recording system clock time at 
identical points within each application. The clock time is 
captured at the entry/exit to certain procedures and before/after 
calls to the datod>ase. The process time for a procedure or 
datedsase call is calculated as the exit clock time minus the entry 
clock time. Each selected procedure is tested repeatedly, 
capturing the process time so that the minimum, maximum and average 
processing times can be calculated auid recorded for each procedure 
or database call. 


2.1.4.2 Test Results 

The project team executed the test procedures contained in the CSU 
Test Cases, Appendix G, against the original SIDPERS-3 
Demonstration Prototype and the converted SAMeDL application. Each 
test case was performed with duplicate results from each 
application. The SIDPERS-3 Demonstration Prototype had been 
correctly converted to SAMeDL without loss of functionality. 

The project team is. experiencing difficulty in measuring 
performance differences between the two applications. The smallest 
measure of time returned by the Interactive UNIX operating system 
is tenths of seconds. This time increment is not granular enough 
to show differences in processing time. 

One solution is to run a "counting" process in the background while 
the Ada application runs in the foreground. However, this approach 
failed due to a conflict between the Ada run time and the UNIX 
process scheduler. with Alsys, the Ada run time executes as a 
separate process on top of the operating system. The conflict is 
created when the Ada tasks are scheduled by the Ada run time 
independently of the UNIX process scheduler. Since performance 
could be a key discriminator for SAMeDL, the project team will 
continue to explore other methods to measure processing time. 


11 



SAMeDL.TR.10.15 Sep 92 


2.2 New Application Development 

For the Nev Application Development subtask, STATISTICA will use 
the same CSUs listed in Tcd^le 2-1. This approach provides a 
baseline from which cozr^arisons between methodologies can be made 
as to design without fvinctionality differences in the application 
layer. In the New Application Development sxobtask, STATISTICA will 
redesign and re-implement some of the Ada application layer to 
einalyze the SAMeDL features aind to assess the value added using the 
SAME methodology. 

Further study of the SIDPERS-3 Demonstration Prototype design, as 
depicted in Figure 2-2, reveals the following points: 

1. The Screens box represents a series of Ada packages, the 
design of which is dictated by the MMI. The control flow 
within the each package is determined by the active 
screen name and the key used to exit that screen. 
Although tailored for each CSU, these packages rely 
heavily on the MMI and can be considered part of the MMI. 
Since a user interface is usually considered external to, 
eind separate from, the application, the packages were not 
modified to include SAMeDL. 

2. The Screens packages are dependent on Field Support 
packages for validating user-entered data, retrieving 
data from the datcdsase for pop-up or help windows, and 
storing data in a Data Store for use during later 
processing. 

3. The Data Stores box represents several package 
specifications that declare objects for temporary storage 
of values either retrieved from the database or entered 
by the user. The data is stored until needed for 
reports, validation or calculations. The objects in the 
Data Stores are declared as user-defined sxibtypes found 
in the Types packages. 

4. The Reports box is also dependent on the MMI for report 
utilities; however, the packages in this group contain 
procedure calls to retrieve and update data in the 
database. The package that calls MMI report utilities 
for formatting the CSU specific report was not unchanged. 

5. The Database Support box represents an interface layer to 
the DatcLbase Access packages generated by the XDB module 
compiler. These pacJcages were modified extensively in 
the previous subtask (refer to Section 2.1.2) and, 
therefore, require only minor changes. 


12 




SAMeDL.TR.10.15 S«p 92 


2.2.1 Approach 

The project team used the following approach to redesign the two 
CSUs; 

1. Analyze the data requirements to identify objects or 
specific data groups. For exar^le, data identifying a 
soldier, such as SSN and name, compose a Soldier object. 
The data identifying a Unit (i.e. UIC and ncune) are 
attributes of the Unit object. 

2. Build SAMeDL domains and support packages around each 
object. For each object, a SAMeDL definition module is 
written to declare the attribute domain of the object. 
A corresponding SAMeDL ed)stract module is written to 
provide all database operations required to use the 
object. An exan^le of the definition and aOsstract 
modules written for the Unit object is shown in Figure 
2.5. 

3. Modify the database schema to represent the real world. 
Where appropriate, the project team chemged database 
columns to allow null values. The project team then 
created a ST^eDL schaxia module to match the new dataibase 
schema. An example of the schema module is shown in 
Figure 2.6 on page 16. 

4. Con^ile SAMeDL modules. For each definition module, the 
SAMeDL coo^iler generates eua Ada specification package 
(e.g. Unit_Def) in which derived types are declared for 
each domain. Additionally, the SAMeDL compiler creates 
a set of Ada packages (e.g. Unit_Abs specification and 
body) for each abstract module. This set of Ada packages 
is the eibs tract interface defined in the SAME 
architecture. In the XDB version of the SAMeDL conpiler, 
a third set of packages (actually generated by the XDB 
module con^iler) is required to implement the database 
calls in the eibstract module. This third set of packages 
becomes the concrete interface in the SAME architecture. 

5. Redesign and modify application layer. The project team 
identified several goals in redesigning the application. 

a. Replace weaker s\ 2 btypes in the Types package with 
SAMeDL derived types. The objectives of this goal 
are to remove the redundamt type declarations and 
enforce compiler time checks through derived 
limited private types. 

b. Hide in^lementation details of the Data Stores by 


13 




SAMeDL.TR.10.15 Sep 92 


Miailioa oioduk UNIT_DBF it 

eaiter UIC_Cafiar for 

domia UIC DooiaiB it atw SQL_CHAR (Laffh ■ > <); 

Mitel UIC, 

dOBMia UNAME_Oaatia it atw SQL_CHAll (Ltacib ■ > dQ); 

UNAME 

UNIT ITEM COUNT Doaiaia it aew SQL INT; 

fraB UNIT 


Mdtrby UNTT.UIC; 

tacqilioB Ilaeard_Nol_Fauod; 

laeMd UNIT INFO RECORD it 

pfctaduM ael_Aaaektd_Uail_lafo 

UIC :UK; Donw 

(Wifo sm : Rta^_DW.SSN_DaaaiB) it 

UNAMErUNAME DootiB; 

tad UNTT INFO RECORD; 

teltel UNTT.UIC. 

tad UNIT DEF; 

UNAME 

iau innr info : UNir_lNFO_RECORD 

—liaftnoM UNIT DEF 

fnm ATTACHMENT, UNIT 
when (ATTACHMBNT,SSN > Wiih_Sto tod 
ATTACHMENT.RSN.ATCH -'’A*) aMi 

-liaftmot REMOVAL DBF 

UNIT.UIC - ATTAdodENT.UIC; 

-InftrtDM DEMO 

with UNIT DBF: util UNIT DBF; 

wtt REM0VAL_DBF: 

piantdaia att_Onnal_Uail_lBfo 

tbttnet nodvit UNIT ABSk 

(WMt SSN : Rtawal Def,SSN Dootia) it 

amheraaliaa DEMO 

rteoid COUNT RECORD it 

tehel UNIT.UIC, 

UNAME 

Nutfbtr: UIOT ITEM COUNT Domaia: 

■Me UNTT.INFO: UNTr_S4FO_RECORD 

tad; 

AeaiCURR ASSIONMDIT, UNIT 

pfooMtoft Ombk Untti If 

whtta CURR_ASSiaNMENT.SSN ■ Widi_Sta ted 

UNTT.UIC > CURR.ASSIONMENT.uiC; 

ttitct UNIT ITEM COVNT DoaaakflMaaK*» 

tad UNIT.AES; 

ioaa Ninbtr W heat : COUNT RECORD 
ftwaUNIT; 


Figure 2>5 Definition and Abstract Modules for Unit Object 


encapsulating Data Stores within support packages. 
The objective of this goal is to utilize 
information hiding emd to give the design a more 
"object-oriented" flavor. 

c. Retain strong data typing up to the point where the 
MMI controls the data. The objective of this goal 
is to process the data using the operations defined 
for each data type and tcUce advantage of coii^iler- 
time, rather than run-time, error detection. 

The resulting SAMeDL redesign architecture is shown in Figure 2-7. 

A comparison of the SIDPERS architecture (refer to Figure 2-2) and 
the redesign architecture (shown in Figure 2-7) indicates how the 
first two goals of the redesign were met. With the Derived Types 
packages generated by the SAMeDL compiler, the previous Types 



SAltoDL.Tll.10.15 92 


-InfawN UNIT DEF 


-InfWMM ItEMOVAL OEF 


wiA UNrr DEF; 


Witt E£MOVAL_DEF; 


■etaoM aoduto DEMO it 


tMtSOLOEUit 


SSN MlMia 

: RBMOVAL_DEF.SSN Dauii. 

NAME IND 

; RBMOVAL.DBFJdAME IND.Oowa, 

FBSM OE AO 

: IifiMOVAL_DBF.FERM_aR_>^ Dcmtu 

ad SOLDIER: 


MUtCURX ASSIONMENTit 


SSN moTata 

: REMOVAL OEF.SSN OaMa. 

VK 

: UNTT.DEF.lnC.Daak 

ad CURR_ASSiaNMENT; 


UUtATTACSIMENTM 


SSN aotaU 

: REMOVAL DBF.SSN OoMa, 

UIC 

: UNTT.DBF.UK.DaiD^ 

RSN ATCH 

: REMOVAL DEP.RSN ATCH Doaa 

adAnACHMBNT; 


ttUtUNTTk 


UK aotaO 

: UNIT.DEF.UK Domib, 

UNAMB 

: UNIT DBF.UN/^ Doaua 

ad UNIT; 


ad DEMO; 

• 


Figure 2-6 Sample Schema Module for Redesigned Application 


packages becomes redundant. The Data Store packages are replaced 
with objects of SAMeOL derived types declared within the package 
bodies of the Field Support packages. Access to the Data Stores is 
gained through services (i.e. Get_Object, Put_Object) already 
provided by the Field Support procedures. These procedures are 
modified to reference the local objects rather than the objects 
declared in external package specifications. The other 
functionality provided by the Field Support packages is retained so 
that the Screens packages require no modifications. 

The project team modified the Dated>ase Support package to reference 
the procedures in the Abstract Interface (generated from the 
eibstract modules) rather than the DateQ^se Access packages. 

The third goal is not as easy to attain. The project team 
determined that the point at which the MMI controls the data is 
just prior to calling the Field Support procedures and prior to 
calling report utilities in Reports paclcages. I^en the Screens 
packages call the Field Support procedures the data value is passed 
as a string type. Conversion to derived types is handled by the 
Field Support procedures, thus hiding the conversion details and 


15 






SAMeOL.TR.10.15 Sep 92 



Figure 2-7 The SAMeDL Redesign Architecture 


16 





























SAMaDL.tr. 10.15 Sep 92 

isolating the calling packages from any future changes to data 
types. 

2.2.2 Observations 

SAMeDL must be the basis for design. Once the datcibase design has 
become stadsle, the SAMeDL modules cam be designed and written. 
Database stedslllty is the key to the success of implementing 
SAMeDL. Because the application layer is built on top of the 
SAMeDL data types, any change In the database schema resulting In 
a chauige to SAMeDL types requires modifications to and 
recompilation of the application layer. 

For example, chainglng a not null column to a null-bearing column In 
the database would require a modification to the corresponding 
domain in the SAMeDL definition tnodule. The new definition module 
would be recompiled through the SAMeDL compiler, generating a new 
Ada specification. The data type generated would become a limited 
private type, and some operations (i.e. the Ada operator } on 
the not null type would become invalid. 

One solution to this problem is to provide an additional layer of 
abstraction between the application and the SAMeDL eibstract 
interface. In our redesign, the Database and Field Support 
packages, in essence, provided this layer. However, the cost of 
this solution is additional processing cmd response time. 

The SAME architecture supports an object-based design. The data 
requirements of the application were analyzed to identify object 
classes or data types that could be grouped into packages. In 
addition to conversion functions. Field Support packages were 
modified to hide the objects (designated as Data Stores) needed for 
temporary storage of data. 

SAMeDL is as complex to use as Ada. It is a hybrid of Ada eind SQL, 
offering the best features of Ada and allowing the user to specify 
datedaase services in SQL-like statements. The user must, 
therefore, be proficient in both Ada amd SQL, while learning a 
third programming medium. Program maiiagers must consider training 
or learning curve impacts on the development of SAMeDL 
applications. 

2.2.2.1 Strong Typing 

The success of retaining the SAMeDL strong data typing in the 
application layer depends on how tightly interleaved the user 
Interface is with the application design. The design of the 
SIDPERS-3 application is dictated by the SIDPERS-3 MMI. As seen in 
the first stage of this pilot project, inserting SAMeDL without 
modifications to the SIDPERS-3 application proved to be of no 


17 




SAMeDL.TR.lO.lS Sep 92 


worth. This was largely due to the interface design where data is 
passed as string objects. In the redesign (second stage of the 
project), the application layer was modified to use the SAMeDL 
derived types. Functions to convert SAMeDL types to string types 
were created in the Database and Field Support packages to 
accommodate the MMI. 

2.2.2.2 Error Handling 

Any SQL statement executed by the datcd^ase has the potential for 
failure. Frequently, an application is designed to catch the 
predictcUDle errors (e.g. no record found) and forgets to check for 
the vinpredictable, unrecoveraJDle failures (e.g. disk error) . The 
SAME methodology handles unexpected errors, while providing a 
flexible treatment of datcibase errors that allows the application 
to define errors that are acceptable and expected. 

The application programmer defines the datadDase errors that are 
tolerable in the definition modules by declaring a status map, as 
shown in Figure 2-8. 



As seen in Figure 2-8, the declaration of the status map may 
include raise statements that raise exception handlers for those 
errors that are unpredictable or unrecoverable. Expected errors 
are mapped to members of the enumeration type, Operation_Status. 


18 




SAMeDL.TR.lQ.15 Sep 92 


The negative integers are values of the ANSI standard variable, 
SQLCODE. The status map provides a direct correlation between the 
returned SQLCODE and application-defined error conditions. It 
should be noted that the standard specifies only two return values: 
0 for "success" and 100 for "row not found." Any other SQLCODE 
must be a negative integer and is implementation-defined. In other 
words, the negative integers differ between DBMSs, and declaration 
of the status map should be isolated for portability reasons. 

An application is not required to declare a status map. In this 
case, upon return of a datcdjase error (negative SQLCODE), the 
procedure Process_Database_Error, declared in package 
SQL_Database_Error_Pkg, is called to raise the exception 
SQL_DatcUDase_Error. The application should provide an error 
recovery routine for handling the SQL_Database_Error exception. 

2.2.2.3 Mull Handling 

Declaring domains as null-bearing increased the complexity of 
programming the application code, thus decreasing the productivity 
of the application programmer. The SAME support packages (e.g. 
SQL_Char_Pkg) provided the operations necessary for the limited 
private "types; however, the application programmer should be 
trained on the effective use of the support packages. The 
restrictiveness of the limited data type can be circumvented; 
however, the reliability and maintainability of the program is 
lost. 

2.2.3 Multiple Target Databases 

Targeting the application across databases required minimal effort 
and changes. There are three areas that required modifications: 

1. CONNECT statements; 

2. Database status map; and 

3. The transfer of data from one database to another. 

The first area involves modifications to CONNECT statements. As 
shown in Figure 2-9, the CONNECT statement is slightly different 
across the four databases. 

The second area is modifications to the status map declared in the 
definition module to handle database errors. As discussed in 
Section 2.2.2.2, the status map must be modified to reference the 
new DBMS codes, if an application chooses to map application- 
defined errors directly to DBMS-specific return codes . 


19 





SAMeDL.TR.10.15 Sep 92 


XDB 

Oracle 

CONNECT; 

CONNECT Ujcr_lD Puiword (USINC Diub*ie_NaiBe]; 

Informix 

Sybase 

CONNECT Dmbue N«m; 

CONNECT SERVER Sctvcr.Noc; 


CONNECT l>iWh«if_N«M»; 


Figure 2-9 CONNECT Statements 


The third area is transferring data from one datedsase to ajiother. 
This process involves the following steps: 

1. Create the datcibase and tcible using either SQL scripts or 
the appropriate user interface. 

2. Export the data from the source database to a format 
acceptable to the target database. 

3. In 5 )ort or load the data into the target -database. 

The project team created script files that contain standard data 
definition language for creating the database, creating tables and 
indexes, and granting the correct privileges to user accounts. 
Both the Informix cmd Oracle database provide utilities for loading 
data from ASCII files. The use of script files and DBMS-supplied 
utilities made the loading of the Informix and Oracles database 
easy. 


20 









SAlteDL.TR.10.15 Sep 92 


3.0 TASK 2 - TOOLSBT DEVELOPMENT 

The purpose of this section is to docvunent the technical activities 
associated with the SAMeDL Toolset Development task. This section 
is organized as follows: 

1. Section 3.1, SAMeDL Module Mainager Development, covers 
the SAMeDL Module Manager development effort. 

2. Section 3.2, SAMeDL Compiler Upgrade, docximents the work 
associated with upgrading the existing Intermetrics 
SAMeDL con^ller to support the most current definition of 
SAMeDL. 

3. Section 3.3, SAMeDL Coo^iler Retarget, reports on the 
technical activities associated with retargeting the 
Intermetrics SAMeDL compiler backend to the four 
supported DBMSs. 

4. Section 3.4, Other Support Tool Development, covers the 
effort associated with developing additional tools, if 
any, other than the basic compiler eind the Module 
Manager. 

3.1 SAMeDL Module Manager Development 

3.1.1 Design 

Intermetrics successfully performed initial prototyping work on the 
Sun4 as a feasibility study for the SAMeDL Module Memager design. 
The top level design docximent is incorporated into this technical 
report as Appendix B. The objective of the Module Manager is to 
provide the user with reasoneUale nanagement of the written SAMeDL 
modules and the Ada interfaces generated by SAMeDL. The Module 
Manager implementation will be si^le, cuid as portable as possible. 

Prom the user's point of view, the interface is line oriented (like 
Verdix) . Functionality includes library creation/ deletion, SAMeDL 
information listings (i.e., time/date of compilation, dependencies, 
associated host files for input source code and generated 
interfaces), and Ada compilation ordering information for the 
generated Ada interfaces. A programming interface has been 
developed for use by the SAMeDL compiler to aid in separate 
compilation and information retrieval/generation from/to the 
library. 

Time auad resources permitting, Intermetrics will add "nice to have" 
features discovered during testing. These features or 

modifications fall under two categories: 


21 









SAMeOL.TR.10.15 Sep 92 

1. Information Presentation. The way library information is 
presented to the user may be enhanced. 

2. Convenience. Intermetrics may add functions that 
automate user activities based on information already 
mcmaged and available. For exan^le, archives could be 
generated from the created object files (where concrete 
interfaces take the form of C/ESQl) . Additionally, shell 
scripts could be created that automate the conpilation of 
the generated Ada packages. 

3.1.2 Code 

Intermetrics has developed and integrated the Module Manager into 
the SAMeDL compiler. The foxindation for this work is heavily based 
on the prototype of the Module Manager developed by Intemetrics 
during the design phase. The Module Mcinager is written in Ada eind 
developed on a S\in4 workstation using the Verdix Ada Development 
System (VADS). Following initial testing on the Sun4, the Module 
Manager has been successfully ported to the 386 computer under 
Interactive UNIX and the Alsys coo^iler. 

3.1.3 Test 

Intermetrics performed initial testing of the Module Manager on 
both the Sun4 and the 386 computer. With respect to the compiler 
interface, SAMeDL modules with miscellcmeous interdependencies were 
successfully processed by the con^iler. The related information 
generated by the Module Manager for the library was then manually 
examined, either through the debugger or by the Module Manager user 
interface. To test the user interface functions, SAMeDL modules 
amd related generated interfaces were entered into a SAMeDL 
library. The user comnands were successfully tested using various 
combinations of options and parameters. 

Informal testing will continue on the Module Mainager as part of the 
development and testing of the SAMeDL conpiler. 

3.2 SAMeDL Compiler Upgrade 

3.2.1 Design 

The SAMeDL conpilers were developed by Intermetrics from an 
existing compiler. The original compiler was targeted to the 
October 1991 version of SAMeDL. The SAMeDL compilers for the Pilot 
Project are targeted to the November 1991 version of the language, 
developed primarily at SEI. 

An incremental approach was taken to upgrade the SAMeDL compiler 
from the October to the November version of the language. The 


22 



SAMeDL.TR.10.15 Sep 92 


additional features were partitioned into three logical sets. The 
first set of upgrades was iit^jlemented for the delivery of the 
Informix SAMeDL compiler. The second compiler was iirplemented for 
XDB and included both the first and second sets of upgrades. The 
Oracle and Sybase SAMeDL compilers implemented the full November 
1991 version of the language. 

The incremental approach to upgrading the SAMeDL cort^iler was 
advantageous to both the Shadow Task and the toolset development 
task of the Pilot Project. From the point of view of the Shadow 
Task, the incremental upgrades meant that the first SAMeDL SDE 
delivery could be made soon after contract award, enabling 
STATISTICA to start using the SAMeDL toolset as early as possible. 
By maximizing the time STATISTICA had to use the toolsets, the 
feedback to Intermetrics was integrated into subsequent compilers, 
resulting in a better set of SDEs for the final delivery. 


3.2.2 Code 

Coding of the SAMeDL compiler front-end upgrades is performed on a 
Sun4 with a Verdix Ada compiler. Once the upgraded code is tested 
on this development platform, the improved con^iler is ported and 
tested on the delivery platform. Con^iler back-end improvements 
and DBMS retargeting is performed on the Sun4 development platform 
and then ported to the delivery platform to test using the target 
DBMSs. Use of the Sun4 development platform and the PC-386 
delivery platform in this way enables both front-end and back-end 
upgrades to be performed simulteuieously. 

All source code, including the SAMeDL con^jiler source code, the 
Module Manager source code, and the SAMeDL standard packages is 
maintained in a central repository on the Sun4 platform under 
strict configuration management policies. At delivery time, the 
configuration management system registers a release of the current 
code, which is used to build the delivery executables. 

3.2.3 Test 

Acceptance testing of the SAMeDL compiler is based on the SAMeDL 
Development Environment Test Plan and Intermetrics' version of the 
SAMeDL Language Reference Manual (ILRM). The Test Plan is 
incorporated in the technical report as Appendix C. The ILRM is 
inco^orated as Appendix D. The Test Plan contains procedures for 
testing the Module Manager and source code for the compiler test 
suite. A cross reference of test procedures to ILRM sections is 
provided in Chapter 4 of the Test Plan. 

Testing of the SAMeDL compiler is divided into three basic types: 


23 






SAMeDL.TR.10.15 Sep 92 


1. Correct Tests. This set of test procedures verifies that 
the SAMeDL compiler recognizes and processes proper 
syntactical and semantic constructs. Proper syntactical 
and semantic constructs are defined by the ILRM. 

2. End-To-End Tests. This set of test procedures verifies 
that the output of the SAMeDL con^iler functionally (as 
defined by the ILRM) interfaces with the target database. 

3. Error Tests. This set of test procedures verifies that 
the SAMeDL compiler identifies improper syntactical and 
semantic constructs (as defined by the ILRM) as errors. 


3.3 SAMeDL Coapller Retargets 

Once upgraded, the SAMeDL compiler will be retargeted to four 
DBMSs: Informix, XDB, Oracle, and Sybase. To prioritize the 

compiler retargets, Intermetrics: 

1. Identified commonality across the programming interfaces 
provided by each DBMS vendor. Informix, Oracle, and 
Sybase have a standard C with embedded SQL (C/ESQL) 
programming interface. XDB has an Ada/SQL module 
language interface, and does not provide the C/ESQL. 
Since C/ESQL is the interfacing technique currently used 
in Intermetrics compiler. Intermetrics will retarget one 
of the three DBMSs that generates C/ESQL for the concrete 
interface. Once this is done, the other two DBMS can be 
retargeted quickly. 

2. Targeted the DBMSs that are most widely used to promote 
use and broad availability of SAMeDL across the Ada 
community. XDB is a product primarily used by the Army; 
the remaining three DBMSs are commercial products that 
are widely available to academia, government, and 
industry. 

Using the above rationale, it is clear that the DBMSs can be 
partitioned into two distinct groups: 

1. Group A - Informix, Oracle and Sybase 

2. Group B - XDB. 

If Intermetrics implements one DBMS from each group first, it is 
reasonable to assume that the SAMeDL compiler can be retargeted to 
all four DBMSs. Intermetrics will retarget the SAMeDL compiler for 
Informix first, followed by XDB, and then either Oracle or Sybase. 


24 


SAMeOL.TR.10.15 Sep 92 


3.3.1 Informix 

The front-end upgrade cuid back-end retarget of the SAMeDL compiler 
to the Informix DBMS proceeded smoothly through its completion and 
delivery on March 13, 1992 to STATISTICA. The Informix DBMS 
provides a stedsle and reasoncibly complete C/ESQL interface. Thus, 
a minimal number of extensions to SAMeDL were needed to provide a 
satisfactory SQL interface to Informix. 

The SAMeDl compiler currently in^lements all of the SAMeDL 
capabilities described in Appendix D, SAMeDL Language Reference 
Mainual. 

3.3.2 XDB 

The SAMeDL compiler targeted to the XDB/PC-386 platform was 
delivered to STATISTICA on May 7, 1992. Several differences 
between Informix and XDB contributed to making the retarget to XDB 
more technically challenging them the Informix retarget. 

The Conputer Associates XDB DBMS provides an SQL-Ada module 
compiler. The SQL-Ada module con^iler was chosen as a back-end 
target for the SAMeDL compiler for XDB. The modification of the 
Con 5 )iler back-end from the embedded C/SQL architecture to the SQL- 
Ada module compiler went relatively well considering the magnitude 
of the change. 

Early in the retargeting process. Intermetrics discovered software 
problems in the XDB SQL-i^ia module conpiler that would 
significemtly limit the functionality of the XDB SAMeDL compiler. 
The most severe problems were corrected by Computer Associates. 
Some problems involve lack of conformcmee to SQL and SQL module 
lamguage standards, as defined by FIPS PUB 127-1. Workarounds to 
these conformance problems are suggested in Appendix F, SAMeDL User 
Manuals. When workarounds were not appropriate, Intermetrics added 
semantic checks to the SAMeDL compiler to warn users that certain 
features of the language are not adequately supported by XDB. 

The XDB SAMeDL compiler implements all of the SAMeDL language 
described in Appendix D, SAMeDL Lcuiguage Reference Manual. 

3.3.3 Sybase 

The Sybase SAMeDL compiler targeted to the Sun/Sparc platform was 
delivered on July 7, 1992 to STATISTICA. The Sybase SAMeDL 
compiler is targeting a hardware/software platform that is 
different from the platform for the Informix and XDB SAMeDL 
compilers. Also, the SDE for Sybase is the first delivery to 
support a complete front-end compatible with the November 1991 
version of the SAMeDL LRM [5]. 


25 








SAMeDL.TR.10.15 Sep 92 


As Che time to commence Che Sybase reCargeC efforc approached, 
InCermeCrics discovered chac Sybase no longer provides a C/ESQL 
produce for che PC-386 plaCform. The decision Co use a Sun/Sparc 
placform for che Sybase SDE was made for Chree major reasons: 

1 . InCermeCrics has a Sun/Sparc placform aC cheir facilicy 
on which chey could do che work, and Co which chey could 
provide STATISTICA access in supporc of che Shadow Task. 

2. Sybase provides a C/ESQL produce for Che Sun/Sparc 
placform. 

3. InCermeCrics felc chaC use of Chis placform would eneUsle 
Che conCracc Co proceed on schedule, whereas choosing an 
alcemacive compiler archiCecCure or DBMS mighc noc. 

The full configuracion for Che Sybase SDE consiscs of a Sun/Sparc 
machine running SunOS 4.1.1, che Verdix Ada Compiler Version 6.0.3c 
auid che Sybase DBMS Version 4.8 wich C/ESQL. 

The Sybase reCargec proceeded smoochly, wich only minor problems 
discovered in using che Sybase DBMS. Sybase rescriecs Che use of 
a cursor updace scacemenc Co several qualif icacions, such as having 
a unique index on che ceible colximn Co be updaced. ConsequenCly, 
accempeing Co use Che cursor updace sCaCemenC wichouc meecing che 
Sybase prerequisiCes will resulc in a Sybase error eicher ac run- 
cime or during che final phase of compilaCion by che Sybase C/ESQL 
precompiler. InCermeCrics reporced chis problem Co Che Sybase 
Cechnical supporc scaff. 

To be con^aCible wich Che new placform, some commands generaCed by 
che Module Manager had Co be alCered. For example, che 
sde.mkscript commands were changed Co emic a scripc compaCible wich 
che Verdix Ada compiler. The changes Co Che Module Manager were 
minor and were documenced in che Sybase SDE User Manual. 

The complece fronC-end supporcs all feaCures of SAMeDL, including 
user-defined base domains. Some of che new capabilicies of che 
Sybase SAMeDL compiler differ from che SAMeDL defined in che 
November 1991 version of che LRM. The correcc use of all SAMeDL 
feacures, as implemenced by InCermeCrics, is found in Appendix D. 
Furcher clarificacion of implemencacion-dependenc feacures is found 
in che Sybase SDE User Manual, in Appendix F. 

3.3.4 Oracle 

InCermeCrics delivered che SAMeDL compiler cargeced Co che 
Oracle/PC-386 placform on Augusc 7, 1992 co STATISTICA. 

InCermeCrics produced Che Oracle SAMeDL SDE during 1 monch of 
incense accivicy. 


26 




SAMeDL.TR.10.15 Sep 92 


The first three deliveries, with accximulative front-end upgrades, 
were performed during 2-month intervals. The Oracle SDE required 
no front-end upgrade and was purely a retarget. The inherent 
portability of the SAMeDL compiler architecture enabled this 
retarget to be performed in one-half the time of the earlier 
retargets. In addition to the actual retarget, the 1-month time 
included updating the documentation euid packaging the media. 

One reason that the SDE for Oracle was built so quickly is that the 
Oracle DBMS has few program errors. The only SAMeDL feature not 
supported by Oracle is the null-bearing host varicible in the SQL 
where clause. This implementation-dependent feature is documented 
in the Oracle SDE User Manual, in Appendix F. 

3.4 Other Support Tool Development 

Intermetrics recently identified two tools that may serve as an aid 
to the Shadow Task: 

1. A SAMeDL Lcinguage Sensitive Editor (LSE) . 

2. A SAMeDL syntax checker. 

Intermetrics implemented an early version of the LSE for the Sun4 
based on the October 1990 SAMeDL Language Reference Manual. An 
effort will be made to upgrade and port the LSE to the 386 
computer. The LSE utilizes emacs with appropriate e-lisp bindings 
based on the SAMeDL grammar. 

The syntooc checker will be incorporated into the SAMeDL compiler. 
Until a completed SAMeDL compiler is available, the syntax checker 
will help in the early development of the Shadow Task. 


27 



SAMttDL.TR.lO.lS S«p 92 


APPSIIDIZ A 

Acronyaa and Bibliography 








SAMaDL.TR.10.15 Sap 92 



ACRONIKS 


AIRMICS 

Army Institute for Research in 
Information, Communication auid Ccm^uter 

Management 

Science 

AJPO 

Ada Joint Program Office 


ANSI 

Americem National Stemdards Institute 


APSE 

Ada Programming Support Environment 


ATIP 

Ada Technology Insertion Program 


COTS 

Commercial Off The Shelf 


CSU 

Con^uter Software Unit 


C/ESQL 

C with embedded SQL 


DBMS 

Dataibase Management System 


DoD 

Department of Defense 


ILRM 

Intermetrics' SAMeDL Language Reference 

Manual 

LOG 

Lines of Code 


LRM 

Language Reference Manual 


LSE 

Language Sensitive Editor 


MIS 

Meinagement Information System 


MMI 

Mem Machine Interface 


SAME 

SQL Ada Module Extensions 


SAMeDL 

SQL Ada Module Description Language 


SEI 

Software Engineering Institute 


SIDPERS-3 

Standard Installation Division Personnel System • 
Third Release 

STAMIS 

Standard Army Management Information System 

VADS 

Verdix Ada Development System 



A-2 




SAMc^L.TR.lO.lS Sap 92 
BIBLZOGBAPHY 

[1] Database Language - SQL with Integrity Enhancements. American 
National Standards Institute, X3.135-1989. 

[2] Database Language - Embedded SQL. AmeriCcm National Steindards 
Institute, X3.168-1969. 

[3] Grediam, Marc H., "Down in the Details, Lessons Learned in 
Interfacing Ada and SQL.” ACM Tri-Ada '90 Conference, 
Baltimore, MD, December 1990. 

[4] Graheun, Marc H., "Guidelines for the Use of the SAME." 
Software Engineering Institute, CMU/SEI-89-TR-16. 

[5] Graiham, Marc H., "SQL Ada Module Description Lemguage, 

Intermediate Version 3." 21 November 1991. 

[6] LeClair, Allison sind Susein Phillips, "A Prototype 
lo^lementation of the SQL Ada Module Extension (SAMe) Method." 
ACM Tri-Ada '90 Conference, Baltimore, MD, December 1990. 

[7] Reference Manual for the Ada Programming Language. Ada Joint 
Program Office, 1983. 


A-3 








SAI1«OL.TR.10.15 S«p 92 


APPSSDXZ B 

SAlteDL D«v«lopmant EnvlroaaMnt 
Module Manager Top Level Design 











SAMeDL Development Environment 

Module Manager Top Level Design 

/ 


Intennetrics, Inc. 

6-January-1992 

IR-VA-008-1 






Published by 
Intennetrics, Inc. 

733 Concord Avenue, Cambridge, Massachusetts 02138 
Copyright (c) 1992 by Intermetrics, Inc. 


This material may be reproduced by or for the U.S. Government pursuant to the copyright license 
under the clause at DFARS 252.227-7013 (Oct. 1988). 








Table Of Contents 


Chapter 1 Purpose 

^^hapter 2 ^^vervie^^ 2 

Chapter 3 Data Stnictures^~«~~~~~..^ 

3.1 Physical File Structure. 

3.2 Internal Representation. 

3.3 Data Format_ 


^Zhapter 4 per ations....................................................................................................... 7 

4.1 Operations on Disk File.7 

4.2 (!^)erations on Internal Representation.7 


^^hapter S h4odule h4ana^er Files 8 

Chapter 6 User Interface w.. 


Appendix A Package Spedfications 10 

Appendix B Module Manager Commands........................................................................ 21 


ON 0« LM in 














SAMeDL Development Environment - Module Manager Top Level Design 


Chapter 1 Purpose 

The purpose of this document is to describe the module manager for the SAMeDL Development 
Environment (SDE). A top level descripdon of the SDE module manager will be provided, as 
well as descriptions of the user-SDE interface and the compiler-SDE interface. 

The remainder of this document is organized as follows: 

• Chapter 2, Overview, gives a brief overview of the SDE Module Manager. 

• Chapter 3, Data Structures, outlines the physical disk data representation, internal 
representation and the data format. 

• Chapter 4, Operations, documents the supported operations on the disk file and the 
internal representation. 

• Chapter 5, Module Manager Files, lists the files present in the SDE Module 
Manager. 

• Chapter 6, User Interface, documents the user interface commands for the user to 

interact with the SDE Module Manager. 

✓ 

• Appendix A, Package Specifications, presents the Ada package specifications for the 
intmace routines and the definitions of the data structures. 

• Appendix B, Module Manager Commands, includes manual pages for the user 
interface routines. 


Intermerrics, Inc. 


1 








SAMeDL Development Environment - Module Manager Top Level Design 


Chapter 2 Overview 

The SDE module manager maintains the current dependency information for a SAMcDL design 
in a library; thus it is si^ar to an Ada library manager. The SDE module manager also acts as 
the manager of the repository (the library) for the SAMeDL source files containing the units and 
the files generated by the SAMeDL compilation. 

The SDE module manager provides functionality to interact with both the user and the SAMeDL 
compiler. The compiler SDE-interface is in the form of procedure calls in the Ada programming 
language that the compiler can use, and the user SDE-interface is in the form of commands the 
user can type at the operating system prompt to execute various procedures. Operations the user 
might perform, for example, would be the creation and deletion of the SDE library, the 
generation of lists of units/files in the library, etc. The compiler would use SDE routines to add 
new information to the library as it compiles units, to extract dependency information about 
units, etc. 

In a typical scenario, the SDE library is created by the user with the appropriate user interface 
command. Subsequent compilation of SAMeDL units modifies the library via the SAMeDL 
compiler SDE-interface. The user then uses other user SDE-interface commands to get 
information out of the library as well as modify the information present in it 

At the start of a SAMeDL compilation for a unit the SDE data file is read into the compiler's 
Internal data structures. Functions provided by the SDE module manager are used to perform 
this step. The use of internal data structures facilitates the quick retrieval of dependency 
information as well as the storing of new dependency information. 

The internal representation of the library is tree-like, with each node in the tree corresponding to 
a file in the SDE Ubrary and containing information such as the file dependencies, creation time, 
related library files, etc. During compilation, new nodes may be add^ to this internal tree and 
new dependency arcs created to connect these nodes to previously existing nodes. The internal 
data structures are written to the SDE data file from the compiler at the end of each compilation 
using additional functions provided by the SDE module manager. 

For example, consider the following SAMeDL code outlined below in Example 1. 


2 


Intermevics, Inc. 





SAMeDL Development Environment - Module Manager Top Level Design 
definition moduie D is 

end D; 

with D; use 0; 
schema module S is 


end S; 

with D; use D; 
abstract moduie A is 
authorization S 


end A; 


Example 1. SAMeDL Source Example. 

The example contains a SAMeDL Definition Module D, a SAMeDL Schema Module S and a 
SAMeDL Abstract Module A. The compilation of the definition module D generates an Ada 
package specification named D_.a, the compilation of the schema module S generates no new 
files and the compilation of the abstract module A generates an Ada package specification named 
A..a. an Ada package body named A.a, an embedded C/SQL source file A.ec, and then 
eventually, an e^^anded C file A.c and an object code file A.o. The library would like Figure 1 
after the compilation is finished. 


Intermetrics, Inc. 


3 







Unit Name 

Node Number 

Cares About 
(Node Numbers) 

Cared About By 
(Node Numbers) 

definition module D 

0 

None 

1,2,3 

ada package spec D_.a 

1 

0 

None 

schema module 5 

2 

0 

3 

abstraa module A 

3 

0,2 

4, 6, 7, 8 

ada package spec A_.a 

4 

3 

5 

ada package body A.a 

5 

4 

None 

embedded C/SQL A.ec 

6 

3 

None 

expanded C A.c 

7 

3 

None 

object code A.o 

8 

3 

None 


Figure 1. State of SDE Library After Compilation of Example 1. 


4 


Intermetrics, Inc. 






























SAMeDL Development Environment - Module Manaffer Top Level Design 


Chapter 3 Data Structures 

The abstract data structure used by the SDE is tree-like, with each node on the tree corresponding 
to a SAMeDL unit or to a generated source file. Each node contains information about its 
dependencies on other nodes, the time it was created, the type of node, the related files, etc. This 
data structure is saved in a physical file in the library and also has an internal image that is used 
by the compiler and the user interface routines. 

3.1 Physical File Structure 

The physical file contains a series of records, each record containing the data for a single node in 
the internal representation of the dependency tree. The information in the disk file is in text 
format, that can be read/written using routines provided by the SDE module manager. File 
names for the files that the compiler generates are created using character prefixes and index 
numbers that are also saved in the disk data file. 

3.2 Internal Representation 

The internal representation .of the dependency information is tree-like. Each node in the tree 
represents a file in the SAMeDL system, and has information about all nodes that are dependent 
on it and nodes that it depends on (called CaredAboutBy and CaredAbout arcs respectively). 
Each node also contains the time it was created, the external source file it was created from, the 
name of the source file saved in the library and the name of the library file that the generated 
code resides in. 

Nodes are given a node numbers that uniquely identify them. This practice facilitates saving the 
tree to the designated disk file and reading it back because pointers do not need to be included in 
the disk fiile. It also facilitates the use of uniform data structures for the internal representation 
because variable length records do not need to be used. Instead, lists are maintained off each 
node that contain the node numbers of the nodes that the node depends upon, or is dependent 
upon. 


Intermetrics, Inc. 


5 






SAMeDL Development Environment • Module Manager Top Level Design 


3.3 Data Format 

Both the records in the disk data file and the nodes in the internal representation have the same 
fields. TTie fields are: 

Node Number number of the node that specifies the unit 

Node Type the type of file this node points to 

Unit Name • name of the compiled unit 

Time Entered time the unit was entered into the library 

Library File name of file saved in library 

External File pathname of file that the node was generated from 

Cares About Arc Num number of cares about arcs from this node 

Cares About Arc List - list of cares about arcs from this node 

Cared About By Arc Num / number of care about arcs to this node 

Cared About By Arc List list of care about arcs to this node 


The records in the disk data file are written out in text form, one after the other with a special 
character separating each node. The disk data file also contains the current sufrix numbers for the 
different types of ffles present in the library (described in Chapter 6). 

In the internal representation, each nod^ corresponds to a single record in the disk data file. New 
nodes may also be added during compilation by the SAMeDL compiler and their format is the 
same. 


6 


Intermetrics, Inc. 












SAMeDL Development Environment • Module Manager Top Level Design 


Chapter 4 Operations 

This sr<*tion describes the operations that are available to the compiler and the user interface 
programs for interacting with the two data representadons (disk ffle, internal tree representation) 
that comprise the module manager. 

All the procedures described below return a status variable signifying whether the procedure 
succeed^ or failed. This parameter will not be explicitly mentioned below. 

4.1 Operations on Disk File 

The disk file that the data resides in is a pure text file, a format that can be changed easily if the 
current format is too cumbersome for the executable programs. When any process (compiler, 
user-interface program) communicates with the module manager, the library has to be locked. 
This locking prevents other instances of the SAMeDL executables that modify the library from 
modifying the data structures in use by the current SAMeDL process that has locked the library 
data file. The disk rile is then read into the internal representation at the request of the current 
SAMeDL process that is modifying/reading the library, and then eventually written out after the 
process is done with its work.. The library has to be unlocked before any oAer SAMeDL process 
may access the module manager library. 

The s^mtax of the operations, including the names, parameters, errors generated, etc. may be 
found in the package specification for the package Disk^IO in Appendix A. 

4.2 Operations on Internal Representation 

The internal representation is a structure containing the nodes corresponding to the riles in the 
SDE module manager library. The nodes are in the form of a tree, each node containing pointers 
to all nodes that it depends upon as well as pointers to nodes that depend upon it. Operations are 
provided to add nodes to this tree, create arcs connecting nodes, deleting nc^es from the tree and 
walking the tree in breadth-first and depth-riist fashion. 

The operations for the manipulation of the internal representation are distributed over two 
packages. The tint is the package Nodes^Package that contains the lower level operations that 
can be donC on individual nodes. The ^er is the package Tree_Package that contains the 
operations that can be done on groups of nodes as they are connected. The syntax of the 
operations, including the names, parameters, errors generated, etc. may be found in the package 
specifications for these two packages in Appendix A. 


Intermetrics, Inc. 


7 





SAMeDL Development Environment - Module Manager Top lev^l Design 


Chapter 5 Module Manager Files 

The file names in the following are Unix operating system dependent but can be changed easily 
for other operating systems. 

The SAMeDL library contains the following files in it: 

samedlJib directory of SDE module manager library 

samedl.dat file name of net data file 

samedLlock lock file for SDE module manager library 

It also contains the files that are generated by the SAMeDL compiler during the compilation of 
units. The filenames are in the following format where xxxxxxx corre^onds to a number that is 
saved in the SDE module manager disk data file and is incremented each time a new ^e of a 
type is created. The number for each type of file is maintained independent of the others. The 
numbers may not be reused. 

The first three files ^xxxxxxx, Sxxxxxxx, Axxxxxxx) contain the modules that are extracted by 
the SAMeDL compiler from the user specified source file that is being compiled. They are pure 
text copies of the source, but only contain the module specified unlike the user specif!^ file that 
may contain multiple SAMeDL modules in it 

The following ffles are saved in the module manager library: 


Dxxxxxxx 

source file for definition module 

Sxxxxxxx 

source file for schema module 

Axxxxxxx 

source file for abstract module 

Pxxxxxxx 

source file for Ada package specificadon 

Bxxxxxxx 

source file for Ada package body 

Exxxxxxx 

source file for embedded C file . 

Cxxxxxxx 

source file for C file 

Oxxxxxxx 

object file 


8 


Intermetrics, Inc. 





SAMeDL Development Environment • Module Manager Top Level Desifin 


Chapter 6 

User Interface 

The user interface command names are Unix operating system dependent but can be changed 
easily. Further information about the command line options, arguments, defaults, and errors for 
the commands may be found in Appendix B. 

sde.cleanlib 

reinitialize libraiy directory 

sde.creatlib 

creates a new SAMeDL library 

sde.list 

list units generated from a module 

sdeJs 

list compiled units 

sde.rm 

remove a SAMeDL source file or unit from a libraiy 

sde.rmlib 

remove a SAMeDL library 


Intermetrics, Inc. 


9 








SAMeDL Development Environment - ModiUe Manager Top Level Design 


Appendix A Package Specifications 

The Ada package specifications for the SDE module manager follows: 


- globals_3 • 

-- contains the global constant declarations required 

- throughout the module manager 

package GlobaLPackage is 

- Status Codes returned by functions/procdtkires 
type StatusType is (StatusOk, StatusError): 

Dir_Separator: constant String :■ T; 

Library.Dir : constant String "samedl.lb"; 

Database.File : constant String "samedl.dat*; 

Lock_Fiie : constant String "samedl.lock''; 

Current_Library ; constant String-:- 

RM_Command : constant String "rm 

end Global_Package; 


10 


Intermetrics, Inc. 




SAMeDL Development Environment - Module Manager Top Level Design 


- dlsfc_lo_ji - 

- The disk tile that the data resides inis a pure text file. When any 
~ process (compiler, user-interface process) communicates with the 

- module manager, the library has to be locked to other instances of 
~ the processes. This locking prevents the other processes from 

- modifying the data stmctures in use by the process already in the 

- library. The locking and unlocking of the la^rary is done using the 
~ procedures in this package. The disk file is read into the internal 

- structures using the procedures in this package. 


with GlobaLPackage; use Global_Package: ~ Global types, constants 
with Nodes.Package; use Nodes.Package; - Types, constants 

package DiskJO is 


~ LockLibrary(Status, LfljraryPath) - creates a lock file in the 

- library if one does not already exist thereby prohSxting two 

- people from modifying the library at the same time. This should 

- be done at the very start of processing a unit in the compiler. 

- Parameters: 

- Status ~ StatusOk if the procedure succeeds, StatusError otherwise 

~ LibraryPath - pathname of the directory in which the module manager 
~ saves the data file. 

procedure LockLibrary( 

Status : in out StatusType; 

LibraryPath; in String); 


- UnlockUbrary(Status) - delete the lock file opened by LockLibrary. 

- Frees the library for use by other users. This is the last thing 

~ that the compiler should do. No more modifications to the library 

- are allowed after an UnlockUbrary call without doing another 

- LockLibrary call. 

- Parameters: 

- Status - StatusOk if the procedure succeeds, StatusError othenvise 

procedure UnlockLibrary( 

Status : in out StatusType); 


~ ReadNodeFromKeyboard(Status, Node) ~ reads a node from screen, 
~ For debugging purposes. 

- Parameters; 

- Status ~ StatusOk if the procedure succeeds. StatusError otherwise 

- Node ~ pointer to the node rea'd in from the keyboard. 

procedure ReadNodeFromKeyboardf 
Status ; in out StatusType; 


Intermetrics, Inc. 


11 




SAMeDL Development Environment - Module Manager Top Level Design 


Node : in out NodeRr); 


- WriteNodeToScreen(Status. Node) - Writes a node to screen, 

>* For debugging purposes. 

- Parameters: 

- Status - StatusOk if the procedure succeeds. StatusError otherwise 

- Node - pointer to the node to be printed on the screen. 

procedure Wr1teNodeToScreen( 

Status : in out StatusType; 

Node : in NodeRr): 


~ ReadOiskOata(Status, LibraryPath, Tree) - reads the disk data file 

- in the directory specified by LibraryPath into a tree arxt makes Tree 

- point to it. 

~ Parameters: 

~ Status - StatusOk if the procedure succeeds, StatusError otherwise 

- LibraryPath - path for the directory in which the module manager 
~ saves the disk data file. 

- Tree - pointer to the root of the new tree created from reading 
~ the data in the disk data file. 

/ 

procedure ReadOiskData( 

Status : in out StatusType; 

LibraryPath: in String; 

Tree ; in out NodePtr); 


- WriteDiskData(StatUs, Tree, LibraryPath) - writes the tree pointed 

- to by Tree to the data disk file in the directory specified by 

~ LibraryPath after first making a copy if disk data file already exists 

- in the module manager library directory specified by LibraryPath. 

procedure WriteOiskOata( 

Status : in out StatusType; 

Tree : in NodeRr 
LibraryPath : in String); 

end DiskJO: 


12 


Intermetrics, Inc. 



SAMeDL Development Envifonment - Module Manager Top Level Design 


- nod«s_.a 

*• The internal representation is a stnjcture containing nodes corresponding 

- to the files in the module manager library directory. The node type is 

- declared in this package, the fields contain the information corresponding 

- to each file in the module manager library. The operations that manipulate 
~ the fields in the nodes are declared in this package. The variables that 

- contain the current number suffixes for each kind of file in the library 

- are also maintained in this package. 


with GlobaLPackage; use GlobaLPackage; >* Global types, constants, 
with Calendar; •< for Time type. 

package Nodes_Package is 

- Node Kinds available 

type NodeKind is (DefModule, SchemaMochile. AbsModuie, AdaPack, 
AdaPackBody, EmbeddedC, CSource, ObjectRie); 

- Pointer to string used in the nodes, 
type StrfngRr is access String; 

*- CaresAbout node for the nodes that a node cares about (depends upon) 
type CaresAboutElement; 
t^e CaresAboutRr is access CaresAboutElement; 
type CaresAboutElement is 
record 

Previous ; CaresAboutPtr; - pointer to previous node in list 

Next ; CaresAboutPtr; - pointer to next node in list 

NodeNumber ; Integer; - NodeNumber of node cared about by 

- the node that has this in its 

- cares about list. 

end record; 

- CaredAboutBy node for the nodes that a node is cared about by (dependent 

- upon). 

CaredAboutByElement; 

tyjje CaredAboutByRr is access CaredAboutByElement; 
type CaredAboutByElement is 
record 

Previous ; CaredAboutByPtr; ~ pointer to previous node in list 

Next : CaredAboutByPtr; ~ pointer to next node in list 

NodeNumber ; Integer; - NodeNumber of node that cares 

~ about the node that has this in 

- its cared about by list. 

end record; 

~ Node that is kept in a tree and in the external (physical) disk data file, 
type Node Element; 


Intermetrics, Inc. 


13 








SAMeDL Development Environment - Module Manager Top Level Design 


type NodeRr is access NodeElement; 
type NodeElement is 
record 

Previous : NodeRr; - pointer to previous node in list 

Next : NodeRr; - pointer to next node in list 

NodeNumber ; Integer; -• Node number (unique) of node 

Kind ; NodeKind; - Kind of node 

Outdated : Boolean; - True if node is outdated, else False 

UnitName : StringRr, - Unit Name of the unit that the node 

~ was compiled from. 

LibraryFile ; StringRr; •• File name of the file in the module 

~ manager library that contains the 

- source text for the unit. 

ExtemalFile : StringRr; ~ File name of the source text file 

- that the unit for this node was 
* - compiled from. 

TimeEntered ; Calendar.Time; ~ Time the rx>de was created. 

NumCaresAbout ; Integer; - Number of nodes this node cares 

~ about. 

CaresAbout : CaresAboutRr; ~ List of nodes this node cares 

-about. 

NumCaredAboutBy : Integer; - Number of nodes this node is cared 

- about by. 

CaredAboutBy ; CaredAboutByRr; - List of nodes this node is 

^ - cared about by. 

end record; 

- Initialized when the database is read from the disk, incremented 

- each time a new node is created. 

NextAvailNodeNumber; Integer; 

- The suffixes are initialized when the database is read from the 

- disk. The file name for a kind is generated by a concatenation 

- of the prefix and the suffix and the suffix is incremented. 

Definition_Module_Prefix : constant String ;- "D"; 

Definition_Module_Suffix : Integer; 

Schema_ModuleJPrefix ; constant String :■ "S"; 

Schema_ModuleISuffix : Integer; 

Abstract_Module_Prefix : constant String :» "A"; 

Abstract_Module_Suffix : Integer; . 

Ada_Package_Prefix : constant String "P"; 

Ada_Package_Suffix ; Integer; 

Ada_Package_Body_Prefix : constant String "B"; 

Ada_Package_Body_Suffix : Integer; 

Embedded_C_Preffc' : constant String "E"; 

Embedded_C_Suffix ; Integer; 

C_SourceJPrefix : constant String ;«"C"; 

C_Source_Suffix : Integer; 

dbject_Rle_Prefix : constant String "O"; 


14 


Intermetrics, Inc. 







SAMeDL Development Environment - Module Manager Top Level Design 


Object_Re_Suffix : Integer; 


- CreateNode(Status, Node. Kind. UnitName. ExtemalRle) - creates a 

- new node and initializes the NodeNumber. Kind. UnitName and ExtemalFile 

- fields in the node. 

- Parameters: 

- Status • StatusOk if the procedure succeeds. StatusError otherwise. 

- Node -pointer to the newly created node. 

- Kind • the Kind of node to be created 

- UnitName • the name of the unit for which the node is to be created. 

- ExtemalFile • the external file name of the file from which the 

- unit is being compiled. 

procedure CreateNode( 

Status : in out StatusType; 

Node : out NodePtr; 

Kind ; in NodeKind; 

UnitName : in String; 

ExtemalRie; in String); 


- Empty (L) return Boolean - returns Troe or False depending on whether 

- the list passed in is empty or not.,This is an overloaded function. 

- and takes lists of three tyises: CaresAboutRr. CaredAboutByPtr. and 

- NodePtr. 


- Parameters: 

- L - pointer to the head of the list. 

function Empty (L; in CaresAboutRr) return Boolean; 
function Empty (L: in CaredAboutByPtr) return Boolean; 
function Empty (L: in NodeRr) return Boolean; 


~ Append (Status. Node. List) - appends Node to the List of nodes 

- passed in. This is an overloaded function, and takes Node and List 
~ of the following types: CaresAboutRr, CaredAboutByPtr, NodePtr. 

- Parameters: 

- Status - StatusOk if the procedure succeeds, StatusError otherwise. 

- Node -pointer to the node to be appended. 

- List - pointer to the head of the list of nodes. 

procedure Append ( 

Status : in out StatusType; 

Node: in CaresAboutRr 
List: in out CaresAboutPtr); 

procedure Append ( 

Status : in out StatusType; 

Node ; in CaredAboutByRr 
List: in out CaredAboutByRr); 

procedure Append ( 


Intermetrics, Inc. 


15 








SAMeDL Development Environment - Module Manager Top Level Design 


Status ; in out StatusType; 
Node; in NodeRr: 

List: in out NodeRr); 


- Delete (Status, Node, List) - deletes Node from the List passed in. 

- This is an overloaded function and takes Node and List of the following 

- types: CaresAboutRr, CaredAboutByRr, and NodeRr. 

~ Parameters: 

- Status - StatusOk if the Delete succeeds, StatusError otherwise. 

- Node ~ pointer to the node to be deleted from List 
-List - pointer to the head of the list of nodes from which to 

- delete the node. 

procedure Delete ( 

Status : in out StatusType; 

Node: in CaresAboutRr; 

List: in out CaresAboutRr) ; 

procedure Delete ( 

Status : in out StatusType; 

Node: in CaredAboutByRr; 

List: in out CaredAboutByRr); 

. procedure Delete ( 

Status : in out StatusType; 

Node: in NodePtr; 

List: in out NodeRr); 


- CopyNode(Status, Node, NewNode) - returns a copy of the rxxfe passed 

- in. The next and the prev fields of the copied node are set to null. 

- Parameters: 

- Status - StatusOk if CopyNode succeeds, StatusError otherwise. 

- Node - pointer to the node to be copied. 

- NewNode - pointer to a new node that is a copy of the node passed 

- in. 

procedure CopyNode( 

Status : in out StatusType; 

Node ; in NodeRr; 

NewNode: out NodeRr); 

end Nodes.Package; 


16 


Intermevrics, Inc. 




SAMeDL Development Environment - Module Manager Top Level Design 


~ contains the procedure specs and global variables to 
~ manipulate trees of nodes. 


with GlobaLPackage; use Globai.Package: - Global types, constants. 

with Nodes.Package; use Nodes.Package; - Types, constants, required variables. 

package Tree.Package is 

~ The global tree that the data is read into. Used by user-interface 

- commands. Unnecessary, can be removed if the other packages declare 

- their own tree variable. 

GlobalLibTree : NodePtr; 


- AddNodeToTree(Status. Node, Tree) - adds the node to the library tree 

- Tree. Not different from Nodes_Package.Append at the present time 

- because the Tree is not tree structured. 

- Parameters: 

- Status - StatusOk if the procedure succeeds, StatusError othenwise. 

- Node -pointer to the node tote appended to the tree. 

- Tree - pointer to the root of the tree to which the node is to 

be added. 

procedure AddNodeToTree( 

Status : in out StatusType; 

Node : in NodePtn 
Tree : in out NodeRr); 


- DeieteNodeFromTree(Status, Node, Tree) - deletes the node from the 

- tree passed in. Not different from Nodes.Package. Delete at the present 

- time because the Tree is not tree structured. 

- Parameters; 

- Status - StatusOk if the procedure succeeds, StatusError otherwise. 

- Node -pointerto the node to be deleted from the tree. 

- Tree - pointer to the root of the tree from which the node is to 

- be deleted. 

procedure DeleteNodeFromTree( 

Status : in out StatusType; 

Node ; in NodePtr; 

Tree : in out NodeRr); 


- AddCaresAboutArc(Status, From, To) - add a cares about arc 

- from the From node to the To node. 


Intermetrics, Inc. 


17 




SAMeDL Development Environment - Module Manager Top Level Design 


- Parameters: 

- Status " StatusOk if the procedure succeeds. StatusError otheiwise. 
~ From •* pointer to the node from which the arc emanates. 

- To ~ pointer to the node to which the arc points. 

procedure AddCaresAboutArc( 

Status : in out StatusType; 

From : in out NodeRr; 

To : in out NodePtr); 


- AddCaresAboutArc(Status. Node. Kind. UnitName) - add a cares about arc 

- from node to the node for unitname, kind. 

~ Parameters: 

- Status ~ StatusOk if the procedure succeeds, StatusError otherwise. 

- From - pointer to the node from which the arc emanates. 

~ Kind ~ Kind of node to which the arc is to point. 

-> UnitName - the name of the Unit to which the arc is to point. 

- Tree - pointer to the tree in which the nodes are present 

procedure AddCaresAboutArc( - 
Status : in out StatusType; 

From : in out NodeRr; ^ 

. Kind : in NodeKind; 

UnitName: in String; 

Tree ; in out NodeRr); 


~ AddCaredAboutByAfc(Status. From, To) - add a cared about by arc 

- from the From node to the To node. 

~ Parameters: 

- Status - StatusOk if the procedure succeeds. StatusError otherwise. 

- From ~ pointer to the node from which the arc emanates. 

-To - pointer to the node to which the arc points. 

procedure AddCaredAboutByArc( 

Status : in out StatusType; 

From : in out NodeRr; 

To : in NodeRr); 


- AddCaredAboutByArc(Status, Node. Kind. UnitName, Tree) - add a cared 

- about by arc from node to the node for unitname, kind, in Tree 

- Parameters: 


18 


Intermetrics, Inc. 




SAMeDL Development Environment - Module Manager Top Level Design 


- Status ~ StatusOk if the procedure succeeds, StatusError otherwise. 

- From - poirrter to the n^e from which the arc emanates. 

- Kind - Kind of node to which the arc is to point. 

- UnitName - the name of the Unit to which the arc is to point. 

- Tree - pointer to the tree in which the rtodes are present. 

procedure AddCaredAboutByArc( ‘ 

Status : in out StatusType: 

From : in out NodeRn 
Kind : in NodeKind; 

UnitName: in String; 

Tree : in out NodeRr); 


- CopyTree(Status, Tree, NewTree) *- returns a pointer to the head of a 
~ tree that is a copy of the tree passed in. 

- Parameters: 

- Status - StatusOk if the procedure succeeds, StatusError otherwise 

- Tree - pointer to the root of the tree to be copied 

- NewTree-pointer to the root of the copied b'ee. 

procedure CopyTree( 

Status ; in out StatusType; 

Tree : in NodeRr; 

NewTree: out NodeRr); 


- FindNode(Status, NodeNumber, Tree. Node) - find the nodes with 

- nodenumber equal nodenumber and returns a pointer to the node. 

- Parameters: 

- Status - StatusOk if the procedure succeeds. StatusError otherwise 

- NodeNumber - Nodenumber of the node to find 

- Tree - pointer to the root of the tree to search 

- Node - pointer to the found node. 

procedure FindNode( 

Status : in out StatusType; 

NodeNumber: in Integer; 

Tree : in NodeRr; 

Node : out NodeF^; 


- FindNode(Status, Kind, UnitName, Node) - finds the nodes with 

- unit.name and kind and returns a pointer to the node. 

- Parameters: 

- Status - StatusOk if procedjred succeeds, StatusError otherwise 

- Kind - Kind of the node to find 

- UnitName - name of the unit that was compiled for the node to find. 

- Tree - pointer to the root of the tree to search for the node. 

- Node - pointer to the found node. 

procedure FindNode( 

Status : in out StatusType; 

Kind : in NodeKind; 


Intermetrics, Inc. 


19 






SAMeDL Development Environment - Module Manaj^er Top Level Design 


UnitName : in String; 
Tree : in out NodeRr; 
Node ; out NodeRr): 


- RndUnitOutdatedness • finds if a Kind/UnitName is out of date. If 
~ it is then the Outdated parameter is set to true, and a list of all 

- outdated cared about nodes is returned in List. 

- Parameters: 

-* Status - StatusOk if procedure succeeds, StatusError otherwise 

- Lft>raryTree - Tree in which to search for nodes and follow arcs. 

~ Kind - Kind of the node to find outdatedness of. 

- UnitName - Unit name of the Unit to check outdatedness of. 

- List - list of nodes that are outdated and thus cause the unit being 

- checked to be outdated. 

procedure RndUnitOutdatedness( 

Status : in out StatusType; 

LibraryTree : in out NodePtr; 

Kind : in NodeKind; 

UnitName ; in String; 

Outdated : out Boolean; 

List ; in out NodeRr); 


- BreadthRrstWalk(Status, Tree, CaresAboutUst, Head) ~ walks 

- the cares or cared about arcs given and returns a list 

•> of nodes. Overloaded function, walks the CaresAboutList, or the 

- CaredAboutByList. 

~ Parameters: 

- Status - StatusOk if the procedure succeeds, StatusError otherwise 

- Tree - pointer to the root of the tree to walk 

- CaresAboutUst/CaredAboutByList ~ pointer to the head of the list 

- or nodes that care to be wanted. 

- Head - pointer to the head of a list of nodes that were visited 
~ during the walk. 

procedure BreadthRrstWalk( 

Status : in out StatusType; 

Tree : in NodePtr; 

CaresAboutList: in CaresAboutPtr; 

Head : out NodeRr): 

procedure BreadthRrstWalk( 

Status : in out StatusType; 

Tree : in NodeRr; 

CaredAboutByList: in CaredAboutByRr, 

Head : out NodeRr); 


20 


Intermerrics, Inc. 




SAMeDL Development Environment - Module Mftnager Top Level Design 


- DepthRrstWaB<(Status, Tree, CaresAboutUst, Head) - walks the cares 

- about/cared about by arcs arxl returns a list of nodes walked. 

- Overloaded function, waBted CaresAbout arcs, and CaredAboutBy arcs. 

~ Paranieters: 

~ Status - StatusOk if the procedure succeeds. StatusError otherwise 

- Tree -pointer to the tree to walk the nodes on. 

- CaresAboutUst/CaredAboutByUst - list of nodes to walk 

- Head - list of nodes visited during the waOc 

procedure OepthFirstWakC 
Status : in out StatusType; 

Tree : in NodePtn 

CaresAboutUst: in CaresAboutRr; 

Head ; in out NodePtr); 

procedure OepthFirstWaik( 

Status : in out StatusType; 

Tree ; in NodePtn 

CaredAboutByUst: in CaredAboutByRn 
Head : in out NodePtr); 

end Tree^Package; 


/ 


Intermetrics, Inc. 


21 






SAMeDL Development Environment - Module Manager Top Level Design 


Appendix B Module Manager Commands 

The man pages for the SDE module manager commands follow: 

sde.cleanlib - reinitialize library directory 

Syntax 

sde.cleanlib [pathname] 

Description 

sde.cleanUb will empty the directory samedl.lib present in the directory specified by pathname 
of all files, and reinidaUze the disk data file. The default pathname is the current directory. 

j 

Examples 

The following sequence of commands cleans and reinitializes the SDE module manager library 
in the directory /home/samedl. 

S cd /home/samedl 

$ sde.cleanlib 

The following command does the same thing: 

$ sde.cleanlib /home/samedl 

Diagnostics 

The user is prompted to confirm the cleaning of the library. An error message is generated if the 
samedLlib directory does not exist in the pathname specified (or current directory if the 
pathname opdon is not specified). 


22 


Intermetrics. Inc. 











SAMeDL Development Environment - Module Manager Top Level Design 


scle.creatlib - make a library directory 


Syntax 

sde.creatHb [pathname] 


Description 

sde.creatlib creates and initializes a new SAMeDL library directory. It creates a directory named 
samedLlib for the library in the directory specified by the pathname option. If the pathname 
option is not used, the current c^ctory is the default sde.creatlib creates a disk data ^e named 
samedLdat in the new directory. It initializes the disk data file to be empty and sets the 
information fields to initial states. 


Examples 

The following sequence of commands creates a new SDE module manager library in the 
directory /home/samedl. 

$ cd /home/samedl 

$ sde.cTeatlib 

The following command does the same thing: 

$ sde.cTeatlib /home/samedl 


Diagnostics 

The user is prompted to confirm the creation of the SAMeDL module manager library in the 
directory specified by the pathname option (the current directory is the pathname option is not 
specified). An error message is generated if Ae creation of the library is unsuccessful 


Intermetrics, Inc. 


23 





SAMeDL Development Environment - Module Manager Tod Level Design 


sdeJist - list units/source files generated from the SAMeDL unit specified. 


Syntax 

sdeJist [options] [unit_name] 


Options 


•a 


-f source_file 


-L pathname 


-1 


(Ada) List only units with Ada package or Ada package body 
types. 

(file) consider the SAMeDL units declared in source.file that the 
user created/compiled into the SDE module manager library as 
parent units to find order informadon. 

(library) Operate in SDE module manager library present in the 
directory specified in pathname (the current directory is the 
default). ^ 

(list) List the unit name, unit kind unit date, library source file, and 
external file. 


Description 

sde.Iist provides a list of units in the library that were generated from the compilation of the 
SAMeDL unit specified in the command line. All the units in the library are list^ if no unit is 
specified. This conunand would be useful for creating script files for automatic compilation of 
files into the user's ada library. 


Examples 

The following sequence of commands lists the units generated by the compilation of the 
SAMeDL module named abstract_mod in the SDE module manager library present in the 
directory /home/samedl. 

$ cd /home/samedl 

$ sde.Iist abstract_mod 

The following command does the same thing: 

$ sde.Iist -L /home/samedl abstart_mod 


24 


Intermetrics, Inc. 




SAMeDL Development Environment • Module Manager Top Level Design 


The following sequence of commands lists only the Ada package specs and bodies that were 
generated from the units in the file user.sme that the user compiled into the library. The SDE 
module manager library is assumed to be in the directory /home/samedl. 

$ cd /home/samedl 

$ sde.list -a *f user.sme 

The following command does the same thing: 

$ sde Jist -L /home/samedl -a -f user.sme 


Diagnostics 

An error message is generated if the SDE module manager library does not exist in the directory 
specified by the -L option (or in the current directory is the -L option is unspecified). Another 
error message is generated if the SDE module manager library is locked by another process. 


Intermetrics, Inc. 


25 





SAMeDL Development Environment • Module Manager Top Level Design 


sde.ls - list compiled units 


Syntax 

sde.ls [opdons] [unit_name] 


Options 


•a (all) List all units visible in the library. 

-f source_file (file) List only units found in the user created/compiled source file. 


•L pathname (libr^) (Dperate in SDE module ntanager library present in 

the directory specified by pathname (the current direaory is the 
default). 

-I (long) List unit, unit_type, library entry date, source file name, 

Ubra^ file name. 


Description 

sde.ls provides a list of the SAMeDL units compiled in the SDE module manager library in the 
current or specified user directory. Options are provided to give more or less extensive 
information, or to provide a list of compiled units occurring in specified source files. Providing 
the unit name of a unit gives information only about the specified unit 


Examples 

The following sequence of commands lists the units in the SDE module manager library present 
in the directory /home/samedl. 

$ cd /iiome/samedl 

$ sde.ls 

The following command does the same thing: 

S sde.ls -L /home/samedl 

The following sequence of commands lists complete information about the unit abstract_mod 
present in the SDE module manager library present in the directory /home/samedl. 

$ cd /home/samedl 


26 


Intermetrics, Inc. 






SAMeDL Development Environment - Module Manager Top Level Design 

$ sde.ls -1 

The following command does the same thing; 

$ sdeJs -L /home/samedl -1 

Diagnostics 

An error message is generated if the SDE module manager library does not exist in the directory 
specified by the -L option (or in the current directory is the -L option is unspecified). Another 
enor message is generated if the SDE module manager library is locked by another process. 


Intermetrics, Inc. 


27 








SAMeDL Development Environment • Module Manager Top Level Design 


sde.rin - remove unit and library information 

Syntax 

sde.rm [options] unit_name 
sde.rm [options] source.file 

Options 

•L pathname (library) Operate in SDE module manager library in the directory 

specified by pathname (the current directory is the default). 

-V (verify) verify the removal of each unit. 

-V (verbose).list the units as they are removed. 


Description 

sde.rm removes all information associated with the named unit or file. When unit_name is 
specified, the corresponding files in the library are removed. 

When source_file is specified, the units in the user created/compiled file as well as the 
corresponding files in the library are removed. 

Examples 

The following sequence of commands removes the unit abstract_mod from the SDE module 
manager library present in the directory /home/samedl. 

$ cd /home/samedl 

$ sde.rm abstract_mod 

The following command docs the same thing: 

$ sde.rm -L /home/samedl abstract_mod 


28 


Intermetrics, Inc. 







SAMeDL Development Environment - Module Manager Top Level Design 


Diagnostics 

An error message is generated if the SDE module manager library does not exist in the directory 
specified by the -L option (or in the current directory is the -L option is unspecified). Another 
error message is generated if the SDE module manager library is locked by another process. 

If the verify option is specified, the user is prompted to verify the removal of the specified units. 


Intermetrics, Inc. 


29 








SAMeDL Development Environment - Module Manager Top Level Design 


sde.rinlib - remove SAMeDL library 


Syntax 

sde.rmlib [options] 


Options 

•L pathname (library) (Operate in SDE module manager library in the direaory 

specific by pathname (the current directory is the default). 

-V (verbose) list the units as they are removed. 


Description 

,sde.rmiib removes all informadon in the SDE module manager library in the directory specified 
by the -L opdon (the current directory is the default). It deletes all the files in the SDE module 
manager library directory, and the removes the directory. 


Examples 

The following sequence of commands removes the SDE module manager library present in the 
direaory /home/samedl. 

$ cd /home/samedl 

$ sde.rmlib 

The following command does the same thing: 

$ sde.rmlib -L /home/samedl 

Diagnostics 

The user is prompted to confirm the removal of the library. An error message is generated if the 
SDE module manager library does not exist in the direaory specified by the -L opdon (or in the 
current directory is the -L opdon is unspecified). Another error message is generated if the SDE 
module manager library is locked by another process. 


30 


Intermetrics, Inc. 










Promotion Standing List Removal Action ^Test 01^ This test procedure removes a soldier from 
the E5-E6 Promotion Standing List whose grade is E4 (rank is SPC). A Removal From Local 
Recommended List Memorandum, PCN AAA-034, is generated. 


I 


2 

O 

M 

M 

b4 

M 

CC 

u 

> 


u 

tn 

2 

O 

& 

CO 

M 

CH 


2 

o 

M 

s 

< 



1 

1 




1 

1 

1 






h C 




' c 






0 




o 






JJ 






• 

• 



• (0 *0 




to 


c 

c 

• 


C U 4) 


• 


Li 

• 


9) 

c 


O ^ 


c 


m 

c 

Q) 

4) 

0) 


4) C TJ ^ 


4) 


4) 

0) 


tj 

0) 


^ <0 C*H 


4> 


a. 

a 

U 

0 

u 


0 PS hUH 


Li 


a 

u 

U 

a 

u 


to 


U 


to 

0 



to 


c c to 


ID 



CO 

0) 




4> 0 0 4) 






£ 

£ 

4) 


£ -H -H 3 


4) 



0 

4J 

JJ 

£ 


JJ JJ JJ rJ 


£ 



jC 



JJ 


0 0 <0 


JJ 


o 


C 

c 



c e e > 




1 


o 

o 

c 


0 0 0 


C 



c 



o 


h U £ 


0 


1C 

0 

n 

n 


• 

to a a JJ 

• 






u 

(0 

TJ 

Vj •h 

•0 

a 



CO 

<0 

<0 

Vj 

« 

m -TS ? 

4> 

w 


2 

w 


0 

<0 

JJ 

4) u c 

JJ 

<0 


U 

<0 

a 

a 

4) 

a 

an «o TJ 

a 

4) 


a 

« 

a 

a 

a 

« 

ao « 

4> 

a 



a 

(0 

to 

a 

u 

(0 >1 

0 

a 


% • 

a 



<0 

0 

-•O <0 

o 

« 


JJ c 

<0 

o 

o 


VO 

O 4) 4) 

<0 



u 0> 



H 

fH 


rsi 6 U a 


pj 


0 4) 

o 

o 

n 

o 

CO 

n 10 4) to 

(0 

o 


a Li 


o 

o 

o 

•H 

O 2 TJ 

•H 

o 


V o 

o 

rj 

N 

o 


<N "H 'O 


o 


Li to 

o 

o 

O 

6^ 

<0 

o «. to 

10 

H 



a 

VO 

VO 

CO 

JJ 

VO 2 C « 

JJ 

CO 


e o> 

H 

o 

O 

> 

<0 

O CO 0 h 

(0 

X 


£ £ 

CO 

s 

s 

CO 

Q 

CO CO O (0 

o 

CO 


6^ JJ 





• 


c 








2 

•0 

o 








CO 

c 

• to 








CO 

<0 

<0 

TJ 





• 

t 



4> 

c 





o 

o 

c 

4» 

PS 

10 



• 

• 



•H 

e 




• 

D 

o 

o 

n 


<0 

fH 

Vj 


tvj 

2 


o 

o 

s 

2 

«0 

0 


O 

U 

o 

<N 

<N 

Ov 


> 

JJ 


o 

s 

o 

o 

o 

OV 

C 

0 

<0 


Eh 

a 

a 

VO 

VO 

Xf 

•H 

e 

0 


CO 

M 

M 

o 

o 

<N 


4> 

•H 


X 

CO 

CO 

s 

£ 

1 


a 

C *0 


to 





VO 

a 


•H C 




*J 

JJ 

JJ 

VO 

w 

c 

M 


JJ 

(0 

(0 

10 

(0 

1 


•H 

4» 


10 





ov 

z 


< c 



A 

A 

A 

A 

r* 

3 

5 

< 0 


A 

0. 

CO 

iJ 

oc 

0\ 

to 

a 

< •H 


> 

V 

V 

V 

V 

s 

s • 

s 

S JJ 


V 






A 

« 

10 

A 



k 

w 

Ul 

Lj 

Sj (N 


Li U N 

Li 

0) 

0) 

« 

4) 

4) 

4) a 

4) o 

o> -H a 

41 

JJ 

JJ 

JJ 

JJ 

JJ 

JJ V 

JJ JJ 

JJ JJ 

V 

JJ 

c 

c 

c 

c 

C 

c 

C 10 

c c 


c 

u 

b3 

u 

u 

Cd 

U (0 

(d U 

U 4) 

(0 

U 






to 

•H 

£ 

to 







4) 

•o 

JJ 

V 


• 

• 

• 

• 

• 

• w 

• c 

• 3 

Li 

• 

tH 

(N 


xr 

m 

VO a 

r- M 

GO < 

a 

ov 


10. Press <F4>. SYST0002 appears on the screen. _ 

11. Enter <P> at SYST0002. The report, PCN AAA-034, is printed. 




























Promotion - sta nding. List Removal Action fTest_02) This test procedure removes a soldier from 
the E5-E6 Promotion Standing List whose grade is E5 (rank is SGT). A Removal From Local 
Recommended List Memorandum, PCM AAA-034, is generated. 



printed 

























Promotion Standing List Removal Action fTest_03> This test procedure verifies that 
removing a soldier from the E5-E6 Promotion Standing List whose grade is E5 (rank is 
pop-up windows are available for fields with pop-up help capability; appropriate use 
error messages are displayed; and help screens are available for each screen and men 
Removal From Local Recommended List Memorandum, PCN AAA-034, is generated. 




c 


o 


•ri 


C 4J 

• 

0 a 

c 

.H 

o 

m h ^ -H 

h U 

a u 

m m 

> o 

V V 

o < 

a'O 

E 

a 

V *J 

<0 (0 K c 


V 

O (0 

E 

^ •H 

.. Q} 

O 

V 

S 0 

0 (0 

(N h -g 

O V 

0 m 

VO s s c 

o 6 h 

0 -H 

X 

V 


s s 

c • 

c 

V c 

V *0 

V V 

E C 

U V 

to 

u h x: 

m u 

u c 

m 

<0 0 

a 

V 

^ V 

4J 

V £ VM u 

S 4J 

o < 




•I D *0 
c| Z 0) 
0| U >1 
«l S 10 

ul Q a 
ml H m 
I J 

on <*0 
rl > 
ss m 

D W -H 


hi o < 
loR o u 
0 ) I o < 
a| 

an o > 

10 y 

I <0 H 
o 0 m 
h| m 
n H 0) • 


voU VO 
oi ms 


vfl a 
an V 


tn H «o 


h 

o 

jj 

• «j 

c u 

V .Si "H 

V C T} 
h 10 C 
U K M 


C C 

V O O 
S 'H 'H 
4J ^ 4J 

O O 
C S E 
O O O 
h h 

m a a 

h 

(0 -■o 

V o c 

aM <0 

as 

to 

•TJ 
O V V 
(S E h 
n (0 V 
o s >0 

rg -H 

o •> m 

\£> Z C 

o w o 

OT OT U 


h U 

V V 

4J 

c c 

Cd U 



10. Enter "U” in Removal Data is accepted. 

Reason Indicator. 






















































11. Enter ''ABX*' in User message 01032, INVALID DATA 

Authentication Indicator and is displayed. Cursor is in the 

press <F2>. Removal Reason Indicator field. 





c 





c 

0 



m 

0 



n • 




c 

•H 

•H 


C 

*H 4) 


10 


0 

• c 


• 

0 

3 C 

• 

p 

• 

n 

•o (0 0 

<0 

*0 

•H 

•O 0 

c 

to 

C 

(0 

rH 3 S) 

u 

pH 

P 

pH <0 pH 

4) 

4> 

4) 

« 

0 pH <0 

•H 

U O 41 

10 

4> > P 

4) 

a 

4) 

os 

•H (0 <U 

4J 

O •H £ •H 

u 

•H <0 

P 

a 

P 


> K 

c 

M P <M 

•H 

«H ID U 

U 

<0 

U 



4) 

iJ * 

P 

.H 

U 


to 

(0 

L <0 pH 

£ 

< OS C P 

c 

P P P 




> • 

0 <0 

4J 

> O-H o 

4) . 

0 0 c 

4) 


4) 

o *0 

4J W > 

3 

Z Eh P 

£ *0 

p «M 4) 

£ 

o 

£ 

e 4) 

<0 0 0 

< • 

M << a (Q 

P 41 

<0 £ 

P 

o 

P 

0) >, 

U <M. g 

TJ 

O -H o 

3 >1 

U s p 


1 


OS 10 

•H 0) 

4) pH 

-t-l 

< <0 

•H < 3 

C 

iG 

■ C 


*0 s OS 

£ 4) 

pH Q P tJ 


*0 0 < 

o 

<c 

0 

u a 

C (0 

4J -H 

pH Z 0 C 

p a 

C < 




0 (0 

H s 4) • 

<M 

■V HI « *H 

0 u 

H s 4) • 

(0 


to 


£ *0 

0 

O P 

IM 'pH 

£ *0 

p 

Z 

p 

•o 

C £ -P rH 

4J 4) 

O z 3 C 

•o 

C £ P pH 

<0 

o 

<0 


0 4J 4) 

•o 

O U 0 

> 

OP 4) 

4> 

a 

4) 

0 SI 

M "H G ‘H 

U 0 

4) M •H 

0 m 

pH *H C "P* 

a 


a 


(0 J -H <M 

4) O 

0»H P 

•0 pH 

P ^ pH Iw 

a 

« • 

a 

c 

4) 

> 

(0 < • (0 

c 

<0 

<0 

P c 

<0 

•H ^ 

OS C SI P 

0 u 

SI O TJ O 

•H P 

u e s) p 


P 4) 


9 0 

•H •«»< 0 

6 0 

S) M 4) •H 

» 0 

pH pH pH 0 


0 4) 

IN 

4J 

r>H 4J 

P 

4) Eh >,P 

P 

P P 

o 

a p 

o 

a <0 

<0 *0 P <0 

P (0 

6 Z <0 C 

a <0 

C *0 P <0 

o 

V u 

O 

3 0 

> 4) 0 U 

0 0 

U pH 0) 

3 0 

4) « 0 U 

o 

P S) 

o 

1 "H 

O pH SI -H 

S> -H 

p X a£ 

1 -H 

£ pH M -pH 

Eh 


Eh 

a'o 

E pH P -O 

u •a 

4) Eh SI p 

a’o 

P pH P "O 

CO 

4) 4) 

CO 

0 c 

4) -H 3 C 

3 C 

SI D -H 3 

0 c 

3 -H 3 C 

OH 

£ £ 

» 

CU M 

OS tw U M 

U H 

D < -0 < 

a M 

< UH U M 

to 

Eh P 

CO 



X 

X c 
X o 
r -H 
JJ • 
U (Q A 
O 0 fS 
4J b, 

C xJ V 
U C 
Q) SI 
£ W 
. a> 

tn 3 u 

•H < a 


£ U 
O' o 

•H XJ 
= 10 

o • 

•H A 
• *0 OS 
r- C U 
rH M V 


SI 0) 


00 o\ 



Enter <P> at SYST0002. The report, PCN AAA-034, is 

printed._ 















































Promotion Recoromendation Actions fTestOl^ . This test procedure performs an initial 
calculation of administrative points for an individual soldier whose current grade is E4 
(rank is SPC). A DA Form 3855-E, PCN AAA-209, is generated. 



c <0 

0 ) u 

0) u 

^ 0) 

u 

Ifl 0) 

.c 

0) -u 


o u 

b 

(0 (0 

W 0) 

(0 cu 

0) a 

a <0 


o o 

fH o 
O rs 
o o 
a VO 
M o 
CO £ 


CO CO 

4J JJ 
<0 «0 


i.1 u 

O 0) 


c 

o c 

a> 0) 


at o 
ta 


a ml 

0) ai 


VO CO 

o >1 


c c 

m -H 

m 

h «<0 
u k « 

CO m rH 

£ C <M 
4J <0 

cc m 

C O 
O *0 3 
C 

10 (Q (S 
U > 
10 • 
m c; £ 
aM 
C. O "H 

O V *0 
0 6 0) 
H (0 >, 
O Z 10 
rj •-< 

o « a 

VO Z 10 
O CO 
CO CO •0 


o o 
•-( o 
o o 
o o 

rg <N 

o o 

VO VO 

o o 

s: s 

4J 

(0 «0 


0 ) 0 ) 


w u 


Z *0 
CO c 
CO <0 


OV 

ov c 

\0 -H 
cv 

I s 
VO CO 
VO CO 
I w 


A 

h CJ 

0) mb. 

4J Jj V 

c c 

U U (0 

(0 
m 

. . u 

in VO o. 



Enter <P> at SYST0002. The report, PCN AAA-209 

printed.__ 
































tion Recommendation Actions (TEST 02^ . This test procedure performs an initial 
lation of administrative points for an individual soldier whose current grade is E5 
is SGT). A DA Form 3855-E, PCN AAA-209, is generated. 


o a M 
e u c 

O «H (0 
>.( R3 U 
Oi O ^ 



C C 

01 o c 

0) 0) 4> 

^ h 0) 

U 0 V4 

U (0 u 

u 

0 ) 0 ) 

£ £ 01 

4J -P jC 


0 ) to 

P M to 

to to U 

0) 0) IQ 

a a 0 ) 

O. fii fii 

(0 (0 a 


10 (0 
0 ) 0 ) 


o o o 

o o o 

ts <N O 

O O Eh 

VO «0 CO 

O O Sh 

S S 03 


CO CO 
4J 

<a <0 

A A 

Ou to 


U P 
O 01 
4 J AJ 

c c 

b3 CU 


o o 

iH (S 

o o 
o o 

«N CN 

o o 

VO VO 

o o 
S £ 

4J -P 
10 10 


c c 

0> 'H 

0 ) 

PVT) 
U P 0) 
to <0 

I-* 

0) 

.C C 
•P (0 

a to 
C 0) 
O >0 3 
C 

to (0 <0 

p > 
<0 •• 

01 U jC 
at-i -p 
fi<D "H 
10 

O 0) *0 
o e to 

iH «0 >1 
O £ (0 
CJ <“( 

o a 

VO z to 
O to -H 
CO to "O 



z 

to T3 


OV to 

” A 

P P (N 

0) 0> Cb 

P P V 

c c 

u u to 

(0 
0 ) 

• • p 

tn vo o. 


< 

: -H 
p • 
p (0 A 
0) O eg 
P -H b. 
C P V 

u c 
0 ) to 
£ to 
• P 0) 
O 3 P 

< a 


12. Press <F4>. _ SYST0002 appears on the 

13. Enter <P> at SYST0002. The report, PCN AAA-209 

printed._ 

































Promotion Recommendation Actions rTEST_03) . This test procedure verifies that when 
performing an initial calculation of administrative points for an individual soldier whose 
current grade is E4 (rank is SPC); pop-up windows are available for fields with pop-up help 
capability; appropriate user and error messages are displayed; and help screens are available 
for each screen and menu. A DA Form 3855-E, PCN AAA-209, is generated. 











>1 






• 

• 



• 

C •• P 

• 





c 

c 

t 


c 

0 to 10 

c 




• 


4) 

c 


4) 

■O 4J 

4) 




c 

4) 

4) 

4) 


4) 

to (H "H 

4) 




0) 

' u 

P 

4) 


P 

P 4) 

P 




4) 

0 

U 

P 


U 

lO •H .H 

O 




U 

to 

to 

O 


to 

4) iM £ C 

to 




U 



to 



a 10 





(0 

(U 

4) 



4) 

a >» '••H p 

4> 

• 




JC 

£ 

4) 


£ 

10 10 p to 0 

£ 

•o 



0) 

•p 

■P 

£ 


•P 

4J -H 4J 


4) 


w 

j: 



•P 



O to C C > *0 10 


P 


C/) 

•u 

c 

C 



C 

o -H 4) •H 'H C U 

C 

O 


z 


0 

0 

C 


0 

.H 0 u 10 

0 

C 


o 

c 



0 



S 4) 4) a *0 


O' 



0 

(0 

n 


• 

to 

IN P £ > - C 

to 

-H 

* 

C/D 


p 

p 

to 

■o 

p 

O Q> -P 4) to to M 

p 


73 

lU 

to 

(0 

IQ 

p 

41 

m 

VO £ U 4J 

10 

4) 

4) 

Cm 

u 

4) 

4) 

10 

•P 

4) 

O E-I Uu c c c c 

4) 

P 

•P 


<0 

Q« 

a 

41 

CU 

a 

c/5 0 /O 0 

a 

10 

a 


<a 

a 

Ok 

a 

4) 

a 

e 0 o<H 

a 


4) 


a 

(0 

la 

a 

U 

10 

c • c p a a -P 

10 

to 

O 


a 



10 

U 


4» C 0 0 10 


4) 

0 


iQ 

o 

o 


10 

o 

4) 4) •H IM C C 0 

o 

X . 

<0 



H 

00 



o 

p 4) 4J P 0 0 -H 

o 

0 



o 

o 

o 

o 

tn 


U P a 4 > *H 'H £ 

4H 

P 

to 



o 

o 

o 

•W 

o 

to u Ip a p -P c 

O 


•H 


o 

OJ 

IN 

o 


IN 

to P 10 10 4) 

IN 

to 



o 

o 

o 

H 

10 

o 

a u >1 u u £ 

O 


10 


Q 

VO 

VO 

w 


VO 

•H 4) to -P 3 S -P 

VO 

> 



M 

o 

o 

>> 

10 

o 

4) £ 4) 3 TJ TJ 3 

o 

4) 

10 


W 

£ 

X 

to 

Q 

w 

X *3 O U U < 

£ 

X 

o 






• 

z 

•o 










cn 

c 








• 

• 

IT 

<0 








o 

o 

c 

4) 






• 

• 


CO 

•H 

e 



>1 



D 

o 

o 

o 


10 



■P 



Z 

tH 

o 

o 

• 

z 



3 

>. 


U 

o 

IN 

IN 

OV 




Q 

4J 


s 

o 

o 

o 

ov 

c 




3 


a 

a 

VO 

VO 

in 

•H 



C 

O 

z 

M 

M 

o 

o 

in 




•H • 

• 

o 

w 

Ui 

£ 

£ 

1 

5 



to 

c tn 

M 





fV 

o 



S 4J 

•H +J 


4J 

■p 

■p 

■p 

o 

w 



u c 

c 

u 

lO 

<0 

IQ 

10 

1 

:ii: 

• 

• 

> -H 

S 

< 





OV 

o 

A 

A 

O 0 

•H 0 


A 

A 

A 

A 

t^ 

< 

fW 


ca a 

o a 


CU 

OT 

CU 

M 

OV 


u« 

Urn 

< 

IN 


V 

V 

V 

V 

s 


V 

V 

z 4) 

z a 







A 



O 

o 


u 

P 

p 

p 

p 

P IN 

to 

to 

P C 

P c 


o 

4) 

4) 

4) 

4J 

4) Cb 

to 

« 

4) 10 

(U (0 


*J 

■P 


kJ 

■P 

bJ V 

4) 

(U 

e 

■P E 


c 

C 

c 

C 

c 

c 

P 

p 

C P 

C P 


u 

u 


u 

u 

U (0 

a 

a 

U 0 

U O 







tn 



<M 








4) 



p 

• P 


• 

• 

• 

• 

• 

• p 

* 

» 

. 0) 

O 0) 



(N 



in 

VO a 


CO 

OV a 

rH CU 


Enter ”150'' in Military Data is accepted, 

rmance Points. 



































2 

O 

M 

Eh 

< 


GC 

U 

> 













V) u 



to X 



a 2 


Eh 0 U1 



Eh « 



Eh < 


2 (0 -U 



2 < Sg 



2 M P 


M in C 



w Eh 0 



M iJ 0 


O X 3 -H 



O M 01 



O M 01 


a H u 0 



a iJ >g 



a > p 


b 0. 



M 3 c 



M 3 c 


2 O 



£ S U 0 



£ U U 0 


5 *01 



5 -H 



D "P 


S H >0 U 



£ H -pi 



£ a ^ 


M > 0 ) c 


• 

M > . (0 


• 

M > *10 


X M X 10 


•0 

X W o 


T3 

X IP *0 o 


sesg 


0) 

p 

< fH 01 3 
£ O XTJ 


0) 

p 

< Eh 0) 3 
£ O XTS 


< a 0 


0 

< <0 a 


0 

< 10 a 


- (0 4H j 


c 

•. iH 


c 



n «-H W 


o* 

O' a a X 


O' 

p a a c 

• 

O O >0 0) 

• 


O' o to P 

• 

.H 

O O 01 (0 

•0 

CO bt a 

•0 


X a "H (0 

•o 


CO a *p >H 

« 

o u 

0) 

0) 

O *0 4J 

0) 

01 

O 'OP 


O O -H X 


h 

O O •H 

JJ 

p 

O O -P 

a 

o 4J 

a 

(0 

in 01 fH • 

a 

10 

O 01 > . 

0) 

0» r» •3 

« 


0) rg.H*H <0 

01 


(JJ rH -P P 'O 

0 

O' M Q 

0 

M 

O' £^ 

0 

03 

O' OP 

u 

10 ca u 

u 

0) 

10 (13 « 01 

u 

01 

(0 to « 01 

(0 

(0 H 2 O 

<0 

X 

0) M 2 01 •p 

10 

X 

01 P 2 01 p 

10 

01 < JS 


0 

01 o JC <M 


0 

01 O £ P- 

V Q £ 4J 

0) 

p 

0) O M 4J 

0) 

p 

01 Q M *1 

♦H 

s u S 

•H 

4J 

E a Eh 0) 

.H 

■u 

£ a Eh 01 


2 O C -0 


01 

3 < C 4J 


01 

2 < C -P 

(0 

k Q a >H 

<0 


P Q tl -H C 

10 


p Q U P C 


« 2 0) 

4J 

X 

01 J D .H 


X 

01 tJ D P 

10 

U) 1.3 U (0 -H 

(0 

0) 

01 Q 01 0 

10 

01 

01 a o 01 0 

o 

D K? a •H »w 

o 

a 

1 D < a -H a 

Q 

a 

3 < a p a 







c 








10 

A 


TJ 


X 



•p 

CM 


rS 


p 



iH 

a 

c 

<v 


10 

X 01 

X 

.p 

C V 

(0 

•H 


■u 

P 01 

P 

> 

10 

•H 

IM 


•H 

10 01 

10 

*p 

•P 01 




.H 

JJ p 


u 

P 01 

•H 

Sg 

X 

•H 

•H a 



•P 01 

> 

0 

•p 

£ 


fH 

c 

> p 

•H 

4J 

3 


-H -O 

i 

-p 

•p a 

o 

10 

a 

c 

^ £ C 

£ 


u 


0 


•H 

10 


s 

V 

c 

C -H 

c • 

• 

c 

C • 

01 

c c 

•H 

•H *0 

•H 0) 

S 01 

•H 01 

•H 01 

O' 

•P (0 

• 

c 

4J 

3 4J 

4J 

P 

10 • 


s (0 

S H 

s C 

o c 

: C 

r c 

' P 01 

S 01 

O 4J 

< • 

O -H 

^ •H 

rH .H 

O •H 

01 4J 

p JJ 

O C 

< C A 

O 0 

o 0 

in 0 

in 0 

> c 

1 o c 

"H 

< 0 (N 

oi a 

m a 

rH a 

r* 

< •p 

p ‘p 

S O 

s "H a 

s 

s 

S 


s 0 

s O 

0* 

4J V 

01 

01 

01 

01 

a 

a 


bl <0 

P u 

P u 

P u 

P u 

p 

p 

0 ) c 

V U (0 

a> c 

01 c 

01 c 

01 c 

01 c 

01 c 

JJ 0 

4J -H 01 

4J <0 

4J 10 

P 10 

4J <0 

■P 0 

JJ o 

C -H 

C -U (U 

C £ 

C £ 

C £ 

C £ 

C 'P 

C p 

M 

U C Vh 

U P 

U P 

a p 

a p 

a 

a JJ 

Its 

(u a 

0 

0 

0 • 

0 

10 

(0 

O 


a 

4g 

IM A 

IM 

o 

u 

• 3 

. *J *0 

• p 

. p 

• P <N 

• P 

• 3 

• 3 

oj *0 

n 3 C 

^ 0) 

in 01 

VO 01 a 

X 01 

eo *0 

O' v 

U 

^ < (0 

•-H a 

-1 a 

*1 a V 

rH a 

p a 

p a 


20. Enter "100” in Civilian Data is accepted 

Education Points. 






























(0 • 






C 

•p 0 


0 



• 

0 

9 C 

• 

P 

• 


•o 

•H 

■0^0 

c 

0 

c 


iH 

4J 

P 0 P 

0 

0 

0 


(0 « Q) 

(8 

0 > 4J 

0 

a 

0 


Q -H £ .H 

U 

P 0 

p 

a 

P 

0 

H 4J <4-1 

•H 

<H 0 0 

u 

0 

U 

P 


■P 

P 

0 


0 


< o: c b 

c 

P P -P 





t> O -H 0 

0) • 

0 0 c 

0 

O' 

0 

O' 

2: *i 

X *0 

p IP 0 

X 

o 

X 

o 

H < (fl a 

•p «) 

0 X 

p 

AJ 

p 

AJ 

U -H 0 

9 >t 

0 s p 


1 


I 

•» M •H 

< <8 

p < 9 

c 

< 

c 

•0 

*H Q W *0 

rH 

•O < < 

0 

< 

0 

10 

»-l Z 0 C 

u a 

C < 


< 


10 

■V M W H 

0 m 

H s 0 • 

0 


0 


O U 

<M •P 

X *0 

p 

z 

p 

z 

O Z 9 C 

•o 

C X P P 

0 

o • 

0 

o 

o G 0 

d 

OP 0 

0 

a c 

0 

a 

0) W -H 

0 (0 

P P C P 

a 

0 

a 


tJ'H 4J 

TJ ‘H 

p 3t P p 

a 

- 0 

a 


«5 < • 18 

s 

0 

0 

p p 

0 

p 

W O *0 0 

•H P 

U C U P 


P u 


p 

(0 H 0) •H 

» 0 

P P P 0 

A) 

0 0 

AJ 

0 • 

« >i4J 

4J 

p p 

o 

a 

o 

aTJ 

E Z <8 C 

a 18 

C *0 P 0 

o 

0 0 

o 

0 0 

U iH 0) 

9 0 

0 0 0 0 

o 

P X 

o 

p p 

u X ax 

1 -p 

JS P 0 P 


p 

Eh 

c 

0) U1 4J 

aTJ 

P P P TJ 

03 

0 

03 

0 p 

w D -H a 

0 c 

9P 9 C 

> 

X c 

>1 

X P 

a < -o < 

a M 

< Ip U M 

03 

Eh O 

03 

Eh a 



• 





•o 


A 







C OS 





« 


0 U 





-H 


P V 


• 


• 

«M 


P 


A1 


AJ 



0 0 


O 


O 



0 0 


o 


o 

0 


P 0 


o 


o 

■p 


P P 


Eh 


Eh 

(8 

• 

c a 


03 


03 

0 

A 

0 


>1 


» 

C -H 

P 

X TJ 


03 


03 

•H -O 

a 

P c 





c 

1 

9 0 


P 


P 

S M 

u 

< _ 

. 

0 

• 

0 

< 

o 


A 


A 


a c A 

o 

p < 

f>l 

A 

•V 

A 

Z 0 <N 

u 

X < 

a 

> 

a 

a 

S 'H &4 

V 

0'< 

V 

V 

V 

V 

+> V 


P s 





P (8 

to 


0 

P 

0 

p 

(DUO) 

to 

X P 

0 

0 

0 

0 

4J -H U) 

o 

O' 0 

0 

P 

0 

p 

C -P <U 

p 

p p 

P 

c 

P 

c 

Cd C P 

a 

X 0 

a 

u 

a 

u 

(u a 


0 





X 


•H 





• 4J TJ 

« 

• TJ 

• 

• 

« 

• 

rH 3 c 

<N 

n c 


in 

VO 

t^ 

(N < 18 

rg 

(M H 

rsi 

AJ 

AJ 

AJ 


















