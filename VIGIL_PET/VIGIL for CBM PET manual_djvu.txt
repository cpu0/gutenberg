
I 









































+ + 

( c ) 


+ + + 
19 8 1 


BY ROY 


I 

C . 


L + + + 

W A I N W R 


+ + + + 
I G H T 


Video 

Interactive 

Game 

Interpretive 

Language 



ABACUS SOFTWARE 

P. 0. Box 7211 
Grand Rapids, Michigan 


49510 


SERIAL NUMBER 












PREFACE 


VIGIL is sold on an "as-is" basis. Neither 
the author nor ABACUS SOFTWARE makes any 
warranty with respect to the software or 
the documentation as to its quality, performance 
or fitness for any particular purpose. Neither 
the author nor ABACUS SOFTWARE assumes any 
responsibility for the failure of this package. 


We at ABACUS SOFTWARE have been very enthusiastic about VIGIL 
ever since ROY WAINWRIGHT approached us about adding this game 
and graphics interpreter to our product line. 

Roy has worked for over a year developing VIGIL. The results of 
his diligence is this fine package. 

Roy created VIGIL using a very modest development system. How is 
this setup for a development system? 

* 8K OLD ROM PET 

* Built-in cassette drive for mass storage 

* Second cassette drive 

* Dot matrix printer 

* 6502 assembler written in BASIC 

So Roy developed VIGIL the HARD WAY. The VIGIL interpreter 
consists of more than 2000 assembler statements. His assembler 
being written in BASIC, takes more than 5 hours to complete the 
assembly. And Roy has assembled the VIGIL interpreter countless 
times. How is that for dedication, not to mention patience? He 
told me that he doesn't mind the long assemblies except when the 
cassette drive starts acting up forcing him to start all over 
again. He does admit however, that his wife has sometimes been 
delegated to oversee some of these long assemblies. So we must 
graciously thank Mrs. Wainwright too. 

The vast array of VIGIL commands provide the means to create 
interactive programs for the PET/CBM. But the real power of 
VIGIL is the ease with which these games and graphics 
applications can be developed and the performance advantages that 
the language offers over BASIC. 

We feel that VIGIL represents a genuinely new language for the 
PET/CBM user. We hope that you agree with our evaluation that 
Roy has a winner with his VIGIL. My thanks to Roy for entrusting 
ABACUS SOFTWARE with his "pet" VIGIL program. 


Arnie Lee 

April 21, 1981 
Grand Rapids, MI. 



XhZLZ QZ Â£ Q X X Z R X & 


INTRODUCTION 1 

GETTING STARTED ON A TAPE SYSTEM 2 

GETTING STARTED ON A DISK SYSTEM 4 

VIGIL LANGUAGE 6 

REGISTERS 7 

PROGRAM BRANCHING 8 

DISPLAY 9 

LITERALS 11 

MORE DISPLAY COMMANDS 13 

INPUT COMMANDS 14 

TIMERS, TONE OUTPUT & MISCELLANEOUS 15 

WRITING PROGRAMS 17 

ERROR MESSAGES 18 

A FIRST LESSON IN VIGIL PROGRAMMING 19 

MORE ADVANCED COMMANDS 22 

HOW IT WORKS 24 

PROGRAM EFFICIENCY 25 

VIGIL PROGRAM ORGANIZATION 26 

GAMES LISTINGS 27 

VIGIL COMMAND SUMMARY A1 



INTRODUCTION- 


VIGIL is a new language for programming interactive games and 
graphics on the PET. The VIGIL program is an interpreter that 
executes VIGIL language commands to perform game and graphic 
interaction with the user. VIGIL is patterned after the Chip-8 
game language available on the RCA COSMAC VIP computer, but has 
much greater capabilities. 

It is much easier to program video games and graphics using VIGIL 
than using BASIC. It is easy to display and move patterns based 
on screen corrdinates. Also, testing for pattern collisions 
(hits) is easy. 

Programs are entered into the computer using the BASIC text 
editor built into the PET, the same way as programming in BASIC. 
The VIGIL program executes the game programs and performs video 
graphics at speeds higher than BASIC allows. VIGIL commands 
consist of BASIC keywords (such as GOTO, GOSUB, LET, etc.) and 
single letters or characters (E, =, >, etc.). One or more 
operands identify the data or register(s) to be used by the 
commands. Commands include instructions for arithmetic, logical 
and random functions. 

Two timers are available under program control. Input commands 
read the full keyboard as well as a 16-position (4X4 pattern) 
version of the PET numeric keyboard. The parallel user port can 
read joysticks or other attached devices. Normal output is on 
the screen. VIGIL sounds a tone if an audio amplifier is 
attached to the PET user port. Pitch and duration are program- 
controlled and operate simultaneously with screen action. 
Commands are also provided for memory access anywhere in the PET 
memory (including I/O areas) and for loading and executing 6502 
machine-language subroutines. 

This manual assumes that you have experience using BASIC on the 
PET. Some sections assume a knowledge of hexadecimal notation, 
arithmetic and logical operations (AND, OR, EXCLUSIVE-OR). 
However you can immediately see VIGIL in action by following the 
directions in one of the following sections: 

GETTING STARTED ON A TAPE SYSTEM 
GETTING STARTED ON A DISK SYSTEM 

Subsequent sections introduce you to the VIGIL language commands 
and cover more advanced topics. 


RCA COSMAC VIP is a trademark of RCA, CORP. 


1 


- GETTING STARTED ON A TAPE SYSTEM - 

This section is intended to show by example how to use the VIGIL 
language system if you have a PET/CBM and a cassette tape 
recorder. 

The VIGIL distribution tape contains three different copies of 
the VIGIL interpreter on one side of the tape and the nine 
preprogrammed games on the other side of the tape. 

Versions of the VIGIL interpreter are available for the three 
different ROM sets that have been produced by COMMODORE for the 
various models of PET/CBM computers. The three versions are on 
the tape in the following order: 

Name on cassette Use if you have following powerup message 

VIGIL-ROM 1.6 *** COMMODORE BASIC *** 

VIGIL- ROM 2.0 ### COMMODORE BASIC ### 

VIGIL-ROM 4.0 *** COMMODORE BASIC 4.0 *** 

You will need to use the VIGIL interpreter that is appropriate 
for your particular model PET/CBM computer. You may load the 
appropriate version of the VIGIL interpreter by first rewinding 
the distribution cassette and typing: 

LOAD "VIGIL-ROM X.0" where X is the ROM version desired 

Type RUN and press RETURN. You should save this version onto 
another cassette tape by holding the SHIFT key and pressing V 
(save VIGIL) and RETURN. Use this new cassette tape as your 
working copy of VIGIL while retaining the original as a backup. 

You may want to save the other versions if you want to use VIGIL 
on other model PET/CBMs. We hope that you won't distribute 
illegal copies of VIGIL. VIGIL and all VIGIL documentation are 
COPYRIGHTED materials. 

The other side of the cassette tape contains the preprogrammed 
games. There are nine different games, and they are on the tape 
in the following order: 

1. BREAKOUT 

2. ANTI (anti-aircraft) 

3. SPACE-WAR 

4. SPACE-BATTLE 

5. U.F.O. 

6. CONCENTRATION 

7. MAZE 

8. KALEIDOSCOPE 

9. FORTUNE 


2 


The following are the instructions for using VIGIL with a 
cassette drive. You must use cassette drive #1. 


Insert the VIGIL interpreter tape into the cassette 
drive, making sure that it is completely rewound. 

Press and hold the SHIFT key and press the RUN/STOP 
key. 

Press PLAY on cassette drive #1. After the VIGIL 
interpreter is loaded, the message "RETURN, NO GOSUB, 
LINE #63110" will appear, along with a display 
of the 26 VIGIL registers. This is normal for VIGIL 
startup, since only the skeleton program has been 
loaded. 

Remove the tape containing the VIGIL interpreter from 
the cassette drive. Insert the tape containing the 
nine preprogrammed games into the cassette drive, 
making sure that it is completely rewound. 

To load the first game program from tape, simply hold 
the SHIFT key and press RUN/STOP again. The BREAKOUT 
program will be loaded and will start automatically. 

To load a game by name, simply type LOAD "gamename" 
and press RETURN. When the game finishes loading, 
type RUN and press RETURN. 

To stop any VIGIL game, press the RUN/STOP key 
(without SHIFT). 

When finished with VIGIL, it is necessary to restore 
the normal PET pointers and registers by typing SHIFT 
K and RETURN. 


3 


- GETTING STARTED ON A PISE SYSTEM - 


The following are the instructions for using VIGIL with a disk 
drive. 


This section is intended to show by example how to use the VIGIL 
language system if you have a PET/CBM and a disk system. 

The VIGIL distribution disk contains three different copies of 
the VIGIL interpreter and the nine preprogrammed games. 

Versions of the VIGIL interpreter are available for the three 
different ROM sets that have been produced by COMMODORE for the 
various models of PET/CBM computers. The three versions are on 
the disk in the following order: 


Name on diskette Use if you haye following powerup message 


VIGIL-ROM 1.0 
VIGIL-ROM 2.0 
VIGIL-ROM 4.0 


*** COMMODORE BASIC *** 

### COMMODORE BASIC ### 

*** COMMODORE BASIC 4.0 *** 


You should duplicate the VIGIL diskette to insure that you have a 
backup copy. However, we hope that you won't distribute illegal 
copies of VIGIL. VIGIL and all VIGIL documentation are 
COPYRIGHTED materials. 

VIGIL-ROM 1.0 version does not support the disk drive since 
COMMODORE does not support the disk drive with that level of the 
BASIC ROMS. You will need to use the VIGIL interpreter that is 
appropriate for your particular model PET/CBM computer. You may 
load the appropriate version of the VIGIL interpreter by typing: 

LOAD "VIGIL-ROM X.0",8 where X is the ROM version 

Type RUN and press RETURN. You should save this version onto 
another diskette by holding the SHIFT key and pressing Z and 
RETURN. Use this new diskette as your working copy of VIGIL 
while retaining the original as a backup. 

The diskette also contains the preprogrammed games. There are 
nine different games: 

1. BREAKOUT 

2. ANTI (anti-aircraft) 

3. SPACE-WAR 

4. SPACE-BATTLE 

5. U.F.O. 

6. CONCENTRATION 

7. MAZE 

8. KALEIDOSCOPE 

9. FORTUNE 


Insert the diskette into drive 0. 

Type: LOAD "VIGIL-ROM X.0",8 and press RETURN to load 

the VIGIL interpreter (where X is 
the ROM version desired). 

After the VIGIL interpreter is loaded, type RUN and 
press RETURN. The message "RETURN, NO GOSUB, LINE 
#63110" will appear, along with a display of the 26 
VIGIL registers. This is normal for VIGIL startup, 
since only the skeleton program has been loaded. 

To load a game program from diskette type 
LOAD"gamename", 8 and press RETURN. When the game 
finishes loading, type RUN and press RETURN. The game 
program will then start. 

To stop any VIGIL game, press the RUN/STOP key 
(without SHIFT). 

When finished with VIGIL, it is necessary to restore 
the normal PET pointers and registers by typing SHIFT 
K and RETURN. 


5 


4 



- REGISTERS- 


The following 
commands which 

Throughout the 
descriptions: 


Rr,Rs,Rt,... 
11111 
kkk 
minimum 
[] 


-VIGIL LANGUAGE- 


sections describe the VIGIL language and the 
comprise the language. 

manual these notations are used within the command 


â COMMAND NOTATION- 


The "heart" of VIGIL is a set of 26 one-byte registers. These 
are referenced by the letters A-Z. Each can contain a one-byte 
hexadecimal number (0-255 decimal). 255 can also represent -1, 
254 = -2, etc. Commands are provided to set, move, shift, 
increment, compare and clear the registers. Register Z is used 
to signal the result of certain operations and to contain the 
high-order byte of multiply results (see footnotel). Registers S 
& T are reserved for use as timers (VIGIL automatically 
decrements these registers). Some routines use registers A-C and 
W-Y as working registers. All others may be used for any 
purpose. 

RND puts a random number into the specified register. The range 
of the number is from 0, to and including the number in the 
command, (255=0-255, 3=0-3, 17=0-17, etc.). 


any register (A-Z) 

any program line number (0-63999) 

any constant (0-255) 

any memory location (decimal) 

optional entry 


NOTE: Unlike BASIC, no spaces are allowed in VIGIL commands. 


LETrkkk 
=r s 
+rs 
-r s 
*r s 


:r s 

ORr s 
ANDrs 
FORrs 
>r 

<r 

Ir kkk 
RNDrkkk 

CLR 


DATA MOVEMENT COMMANDS â- 


OPERATION 

Rr=kkk 

Rr=Rs 

Rr=Rr+Rs (RZ=0 if Rr+Rs<=255, RZ=1 if sum > 255) 
Rr=Rr-Rs (RZ=0 if Rr<Rs, RZ=1 otherwise) 

Rr=Rr*Rs (multiply) 

Since product is two bytes in size, Rr contains 
the least significant byte and RZ contains the 
most significant byte of product. 

Rr is compared with Rs 

RZ=0 if Rr<Rs, RZ=1 if Rr>Rs, RZ=2 if Rr=Rs 
Rr=Rr OR'D with Rs 
Rr=Rr AND'D with Rs 
Rr=Rr EOR'D (exclusive or) with Rs 
Rr is shifted right one bit 

RZ contains old lo bit-(0 or 1) 

Rr is shifted left one bit 

RZ contains old hi bit-(0 or 1) 

Increment Rr by kkk (use 255 for -1, 254 for -2) 

Rr = Random number in range or 0 to kkk 

kkk is maximum value and 0 is minimum value 
Clear all registers (set to 0) 


^The product of two one byte numbers can be up to two bytes in 
size. The rightmost byte of the product goes into the register 
specified in the command. The leftmost byte goes into register 
Z. If the product is less than 256, register Z may be ignored. 


7 


6 




-DISPLAY- 


-PROGRAM BRANCHING- 

The GOTO, GOSUB, and RETURN commands function in exactly the same 
way as the BASIC commands function. The ON command branches to 
one of a series of line numbers, depending on the value in a 
specified register. Note that if a line number is not specified 
for a particular value, no error is detected. Instead, the 
program continues with the next line. 

Conditional branching is accomplished by commands which test a 
condition specified by the command. If the condition is true, 
VIGIL executes the next command and continues. If the condition 
is not true, VIGIL skips the next command and continues with the 
second command after the test command. 


VIGIL has three powerful commands which increment a register, 
test the new value against high and low limits, and if the new 
value is within limits, program execution continues with the next 
line. If the new value is outside the limits, the program will 
go to either the low or high line number (depending on which 
limit was exceeded). The value of the increment and the limits 
are either values stated in the command or values in registers. 

-BRANCH COMMANDS- 


Â£OMMAND OPERATION 

GOTOlllll Go to line 11111 

GOSUB11111 Go perform subroutine starting on line 11111 
(continues with next line on RETURN) 

RETURN Return to mainline from subroutine 

ONr[11111][,11111],... 

Depending on contents of Rr, GOTO line 


1st 11111 if Rr=0 
2nd 11111 if Rr=l 
3rd 11111 if Rr=2, etc. 


-TEST & SKIP COMMANDS- 


COMMAND 

#r kkk 
$r kkk 
@rs 
%rs 


OPERATION 

Do next command if Rr=kkk, else skip next command 
Do next command if RrOkkk, else skip next command 
Do next command if Rr=Rs, else skip next command 
Do next command if RrORs, else skip next command 


-S TEP t TEST COMMANDS - 

C OMMAND OPERATION 

STEPrkkk,lll,hhh,11111(LOW),11111(HIGH) 

Increment Rr by kkk (255=-l, 254=-2, etc.) 

If Rr is less than 111, then GOTO lllll(LOW) 

If Rr exceeds hhh then GOTO lllll(HIGH) 
Brslll,hhh,11111(LOW),11111(HIGH) 

Increment Rr by Rs then test limits as above 
ZrStull111(LOW),lllll(HIGH) 

Same as B.. except Rt & Ru have Low & High 

limits respectively. 


T he VIGIL program treats the PET screen as a grid of 
wide by 50 points high. 


80 points 



The E (erase) command erases the entire screen. The D (display) 
command shows a pattern at the coordinates given by a pattern 
pointer. The pattern pointer "points" to a display pattern which 
is stored as a line in the program. Such lines are called 
literals and may be inserted anywhere within the program. 
Literals are ignored by VIGIL, except when referenced as data for 
a display or command. The P (point) command tells VIGIL which 
literal to use, by "pointing" to the line number of the literal. 

The bits in the literal are displayed using the "exclusive-or" 
logic function (see LITERALS - next section). Zero bits in the 
literal do not change the display. Each one bit within the 
literal will turn the corresponding display point on unless it is 
already on. In that case, the point is turned off and register Z 
is set to 1. Register Z is set to 0 at the start of each display 
command, so RZ may be tested to see if two patterns overlap. In 
games, this can be used to test for a "hit." A pattern displayed 
a second time at the same location on the screen will erase 
itself (and nothing else on the screen). Therefore, a pattern is 
moved by displaying it at the same place to erase it, changing 
the registers to the new position and then displaying the pattern 
again. 

The screen may be shifted to show lower case letters. However, 
since VIGIL uses the PET special characters to display patterns, 
shifting to lower case will ruin pattern displays (it's ok for 
tejct in messages, etc.). 


9 


8 





CQKMMD 

E 

Drskkk 


DEFkkk 


-OUTPUT COMMANDS- 

OPERATION 
Erase Screen 

Display kkk characters in literal at rs coordinates 
RZ=0 if no overlap, RZ=1 if displayed pattern 
overlaps another. 

Set graphics control. 

kkk=12 normal operation (graphic chars) 

kkk=14 lower case chars 


-LITERALS- 

There are two types of literals: 

Character display literals consist of normal upper-case or lowerÂ¬ 
case characters plus special control characters for reverse 
field, etc. 

Hexadecimal literals are entered as two hexadecimal "nibbles." 
Each nibble (1/2 byte) consists of a digit 0-9 or a character A-F 
(representing 10-15). For example, the hex literal for decimal 
10 is 0A, decimal 17 is 11, and decimal 255 is FF. 

VIGIL displays patterns using hex literals as follows: Each byte 
of the literal is analyzed as two four-bit (nibble) patterns. 

The table of bits and patterns is as follows: 



Second and subsequent bytes of the literal are displayed below 
the first. To turn all 8 bits in a row on, the literal would be 
"FF". To turn only one bit on, the literal is "80". To display 
an airplane, the literal "8DFF11" shows: 


8D gives 
FF gives 
11 gives 


BiUM 


ii 


10 





-PRECODED DISPLAY PATTERNS- 


.-LITERAL COMMANDS- 


COMMAND 

m n 


Pllllll+kkk] 

NEXTr 

Ar 


OPERATION 

Define literal and literal space 

Character display literals <- is carriage return 

T is reverse field on 
\ is reverse field off 

Hexadecimal literals allow 2 hex nibbles per data 

byte. E.g., "010AFFF2" is 4 data bytes. 

Point to literal on line 11111 

kkk displaces pointer to right within literal 

Displace literal pointer to the right by the 
contents of Rr. 

Set display pointer to 5-row pattern for right 
nibble of Rr. 


There are 16 precoded display patterns for the hex characters 0-F 
(0-15 decimal). They are referenced by using the "A" command 
specifying a register. ViaiL will set the display literal 
pointer to one of the 16 patterns corresponding to the low-order 
(ri grht-hand) nibble of the register specified. Executing the 
display command w Dxy5" will show the pattern (at the coordinates 
from registers in the display command). Note that these precoded 
patterns are 5 rows high:, so you must use 5 in the display 
command. 

- CHARACTER DISPLAY- 

VIGIL includes commands to print character information on the 
screen. The cursor position determines where the message will 
start. The position of the cursor is controlled by the values 
given in X and Y commands. The literal pointer must be set fP 
command) to point to a program line containing the characters to 
be shown. The carriage return (<-> starts a new line under the 
first character shown. The THEN command combines the cursor 
positioning values and literal into one command. The DATA 
command shows the 3-digit value of a register. 


- CHARACTER OOTPOT- 


COMMAND 

Xkkk 

Ykkk 

trs 

PRINT# 

PRINTrs 

DATAr 

THENkkk,111 


O PERA T ION 

Set cursor X-position to kkk 
Set cursor Y-position to kkk 
Initialise cursor from Rr(X) & Rs(Y) 

Print literal at preset cursor position 

Print literal at cursor position from Rr(X) & Rs(Y) 

Print value of Rr at preset cursor position 

* N 

Print literal at kkk(X) & lll(Y) coordinates 
".â  is character string to be shown 


-DECIMAL DISPLAY ROUTINE- 

There is a 3-digit decimal display routine included automatically 
in VIGIL source programs each time the command to clear the 
program space (shift C) is executed. The routine will display 
the 3-digit value of any register in large numbers. To use it, 
registers RX and RY must contain the position coordinates of the 
upper left corner of the leftmost digit to be shown. The value 
to be displayed must be copied to register RW (use the =Wr 
command). Then execute a GOSUB63000. The routine may be 
eliminated from your program if not needed. Note that the same 
rule applies as with any other VIGIL display: before displaying a 
new value, erase the old pattern (value) by re-displaying the old 
value. Register RX must be re-initialized before the re-display. 


13 


12 






INPUT 


Since most input to game programs is a selection of options or a 
very small amount of data, only the PET numeric keyboard is 
needed. In order that it may be used as a 4 X 4 grid, the 
special characters are assigned values as follows: 

= 10 So VIGIL sees: 

= 11 

"=" = 12 

"+" =13 

Â«** - i4 

"/" â  15 


The INPUT command reads the numeric keyboard only when the RETURN 
key is pressed and puts the value 0-15 into the register 
specified. If no number key was pressed, the value 253 is 
stored. 

The H command puts the value from the numeric keyboard into the 
register when, the number key is pressed. It is not necessary to 
press RETURN. The READ command puts the ASCII value of any key 
pressed into the register specified. Both the READ and H 
commands return the value once per key depression. If the key is 
held down, any following READ or H command will not "see" any key 
(puts 255 into the register). The READ and H commands use the 
PET keyboard buffering system which stores keystrokes until the 
READ or H commands are executed. 

The GET command reads the keyboard immediately, so multiple GETS 
will return the key value as long as the key is held down. 

Special test and skip instructions are provided to control 
program functions based on the value from the keyboard. The test 
commands work the same as a GET, and "see" the live keyboard. 
User port instructions test the bits at the port against the bits 
in the values from the command. 

-INPUT COMMANDS- 

COMMAND OPERATION 

INPUTr Let Rr=key value (0-15) when RETURN pressed 
(waits for RETURN) 

READr Get keyboard ASCII char into Rr (only one time per 

depression) 

Hr Get keyboard value (0-15) into Rr (only time per 

depression) 

GETr Get keyboard value (0-15) into Rr (instantly) 

fckjck Do next instruction if key=kkk, else skip next 

command 

/kkk Do next instruction if keyOkkk, else skip next 

command 

.kkk Do next instruction if user port bits kkk are all 

on, else skip next command 

NOTkkk Do next instruction if user port bits are not all 
on, else skip next command 



14 


TIMERS â 


The two VIGIL timers count down to 0. When a value is loaded 
into a timer, VIGIL decrements the number until it is zero. 
Countdown continues during program execution. Expiration of the 
count is determined by testing for 0 in the timers. The WAIT 
command stops program execution until countdown is complete. The 
timers are the registers S and T. Register S counts down by one 
each second. Register T counts down by one, 60 times per second. 
Use of these registers for any other purpose may give strange 
results. Maximum counts are 4.24 (255/60) minutes and seconds 
respectively. 

-TIMER COMMANDS- 


Set seconds timer =kkk 
Set 60/sec timer =kkk 
Set seconds timer from Rr 
Set 60/sec timer from Rr 

Wait until second timer =0, then continue 
Wait until sec/60 timer =0, then continue 

- TONE OUTPUT- 

VIGIL also has provision to output various tones using the PET 
CB2 line on the user port. If an amplifer is connected to that 
line, the commands CONT and Q will sound a tone. The duration of 
the tone depends on the value (like timer T, time is measured in 
60ths of a second). The pitch of the tone may be altered by the 
CMD command. A value of 255 will give the lowest pitch and low 
values will give very high pitches. VIGIL sets the pitch value 
to 140 at the start of the program. This corresponds to A=440. 
The formula for the value is: (62500/F)-2, where F is the desired 
frequency in cycles/sec. The PET memory location which controls 
the pitch is 59464. The CMD command places a specified value in 
that location to alter the pitch. The VIGIL POKE or K commands 
may be used to alter that position. 

-TONE COMMANDS- 

.COMMAND OPERATION 

CMDkkk Define pitch of tone = 62500/(kkk+2) 

CONTkkk Sound tone for kkk/60 sec. 

Qr Sound tone for time from Rr 


COMMAND 

SGNkkk 

INTkkk 

Sr 

Tr 

WAITS 

WAITT 


15 





MISCELLANEOUS COMMANDS- 


The REM command defines statement lineis containing remarks, the 
identical usage as in BASIC. Remarks may also be included in 
command lines after leaving one space. The space indicates the 
end of the VIGIL command. Anything else included on the line 
following the space is ignored by VIGIL. 


- CONTROL & MISC. COMMANDS- 


comm* 

STOP 

LIST 

W 

REM 


OPERATION 

Halt and return to BASIC 

List line number and registers, no stop 

List registers and continue on 1 G' key 

Remarks 


â WRITING PROGRAMS - 

1. Type the command to clear the game space â SHIFT C (clear) 
and RETURN. 

2. Enter program commands starting with line number 10. 

3. Use the LIST command to display what you have entered. This 
command functions as with PET BASIC. 

4 . If you have a printer, game programs may be listed. This 
procedure functions as with PET BASIC. 

5. The ?FRE(0) command will show the amount of unused memory 
remaining. 

- S A V ING PROGRAMS - 

Line 5 is reserved for the label to be written to cassette or 
diskette. This is a REM statement. The label is the first 16 
characters following the REM. The label for diskette should begin 
with a disk prefix- 

SREM Orgamename to save to drive 0 

5REM 1:gamename to save to drive 1 

To save a game program to cassette, type SHIFT S (save) and 
RETURN. To save a game program to diskette, type SHIFT D (save 
to disk) and RETURN. If line 5 is missing, the message "OUT OF 
TEXT LINE NOT FOUND" will appear. 

When writing is complete, the game program my be verified by 
typing VERIFY for cassette or VERIFY"gamename",8 for diskette. 

You may also save the entire VIGIL program along with any game 
program in memory. To save VIGIL and the game to cassette, type 

SHIFT V (save VIGIL to cassette) and RETURN. To save VIGIL and 

the game to diskette, type SHIFT Z (save VIGIL to diskette) and 
RETURN. Line 5 is the label, as with the game programs. The 
VERIFY command may also be used to check the saved file. To save 
only the VIGIL interpreter program, type SHIFT C (clear) to reset 
the game program space, insert a line 5 with the label you want, 
and then type SHIFT V and RETURN (to save VIGIL to cassette) or 
SHIFT Z and RETURN (to save VIGIL to diskette). 


16 


17 





-VIGIL ERROR MESSAGES 

During execution of VIGIL, commands are checked for validity. rf 
any errors are found, operation of the program will stop and one 
of the messages below will be shown to indicate the cause of the 
error. The line number in error will also be shown, along with 
the contents of all 26 registers. If the "OUT OF TEXT LINE NOT 
FOUND" message is shown, the line number VIGIL is looking for 
preceeds the message. The process of program debugging can be 
facilitated by inserting an invalid instruction (such as the 
command F) at the end of a section of the program. This will 
stop processing at that point and display the registers. 


ERROR MESSAGES AND THEIR MEANIMG: 

INVALID CMD ââ VIGIL cannot understand the command. Sometimes 
this is caused by VIGIL commands which accidentally make up 
BASIC keywords (such as IF5) . If this happens, change the 
registers used to avoid the keyword. 

OUT OF TEXT, tLINE NOT FOUND-This error will occur when VIGIL 

reads the last line of text and it is not a GOTO command.- 
This error may also be caused by a GOTO, GOSUB, ON, P, STEP, 
B, or Z command which specifies a line number not in the 
program. The line number before this message is the line 
number VIGIL is looking for. The line number below the 
message is the one with the bad line number. 

NO OP 1-The first register in the command is missing. 

NO OP 2-The second register in the command is missing. 

LITERAL SIZE-The " at the end of the literal has been found 

before the command is complete. This can be caused by the 
literal being too small or if the pointers to the literal are 
misplaced (using the NEXT command). This can also be caused 
if a P command has been forgotten. The line number shown 
w ith the message is the line number of the command. The 
literal will be the last one referenced before this line. 

RETURN, NO GOSUB-A RETURN command has been encountered 

without a matching GOSUB. This is usually caused by an error 
in the sequence of sections, so VIGIL runs into the RETURN 

before the GOSUB. The line number shown is that of the 

RETURN line. 


18 


- A FIRST LESSON IN VIGIL PROGRAMMING - 

The easiest way to learn to use the VIGIL language is to try some 
examples - 

Try a display. You donât have to key the explanations which are 
in (). After typing SHIFT C (clear program space) and RETURN, 
key the following: 

10LETG45 

20LETR37 

30P100 (Set literal pointer to line 100) 

40DGR4 (Display pattern pointed to by line 100 at the 
coordinates given by register G [X coordinate] and 
R [Y coordinate]. Since G= 45 and R= 37, the 
pattern will start at point 45,37. The 4 says to 
display a 4-row pattern.) 

60STOP (The program will stop here.) 

100"F820797F" (This is the pattern for a left-going 
helicopter.) 



Type LIST to check that these commands have been inserted 
correctly, then type RUN. The screen will clear and the 
helicopter will show near the lower right corner. The message 
"PROG HALT LINE #00060" will also show. 

Next try a moving pattern. Type SHIFT C and RETURN to clear out 
the previous program. 

10LETA0 (X coord) 

20LETB10 (Y coord) 


30P100 (point to 
40DAB4 (show disp 

50DAB4 (erase dis 
60STEPA1,0,71,0,200 


(point to display) 

(show display) 

(erase display before moving) 


60STEPA1,0,71,0,200 (add 1 to A: if A>71 go to line 200, 

else continue) 

70GOTO40 (go back to display at next A position) 

100"1F049EFE" (helicopter going right) 



200STEPB1,0,46,0,300 (add 1 to B: if B>46 go to line 300, 

else continue) 

210DAB4 (display) 

22QDAB4 (erase display before moving) 

230GOT0200 (go back to step) 

300STOP 


19 




After listing the program to check it, type RUN. The helicopter 
will go across the screen and descend. 

Now change line 300 to GOTOIO. 

This will make the program repeat continuously. To stop it, use 
the STOP key. Note that all registers and the line number are 
shown. 

To make a pattern flash, use the timer. Simply set it, then test 
it for zero. If it is not zero, go back and retest until it is 
zero. Reset the program space with a SHIFT C and RETURN. Then 
key in: 


10LETA15 
20LETB27 
30P100 

40DAB4 (show the helicopter again) 

50INTI5 (set the timer for 15/60 sec) 

60$T0 (test timer (RT) FOR 0 - do next if unequal) 

70GOTO60 (go to test timer) 

80GOTO40 (go back to display to erase) 

100"1F049EFE" (helicopter pattern) 

Try different values in the INT statement to get a feel of the 
timer. 


Now use the built-in display routine â 


10LETS60 
20LETX60 
30LETY30 
40 =WS 

50GOSUB63000 

60@WS 

70GOTO60 

80LETX60 

90GOSUB63000 

100 G0T02 0 


(set seconds timer to 60) 

(set x-coord) 

(set y-coord) 

(move timer value to RW) 
(perform subroutine) 

(do next if KW=RS - no change) 
(go back to test) 

(RX must be reset to X-coord) 
(perform routine to erase) 

(go back and show next value) 


Now try messages â 

Reset the program space SHIFT C and RETURN. 

Then type: 

10THEN40,25,"THIS IS A TEST <-tLITERAL\ MESSAGE" 
20DEF14 (set lower case) 

30TBEN4G,35,"(HOLD SHIFT DOWN)ALSO LOWER CASE* 

40 STOP 


To try the random function, the following program fills the 
screen on random coordinates: 


10P20 
20-80" 
30RNDX7 9 
40RNDY49 
50DXY1 
60#Z0 
70GOTO30 


(literal for a single dot) 

(random # from 0 to 79) 

(random # from 0 to 49) 

(display dot) 

(do next if Z=0) 

(display next point if Z*Q, meaning no hit) 


7 0GOTO30 
80DXY1 

90GOTO30 


(display next point if Z=0 , meaning no hit) 

(if dot hits another, it will clear it. This 
turns it back on) 

(go back to loop) 


20 


21 








-MORE ADVANCED COMMANDS â 

-REFERENCING WITHIN LITERALS- 

The P command points to the first position (left end) of a 
literal. To point to a starting position elsewhere in a literal, 
type + and the displacement, after the line number in the 
command. For example, P100+4 points to the fifth position in a 
literal on line 100. For character literals, the displacement is 
the number of characters. For hexadecimal literals, it is the 
number of nibbles. 

It is also possible to point to various places within a literal 
under program control by using the NEXTr command. When NEXT is 
executed, the value in the register specified in the NEXT command 
is added to the current literal pointer. 

For example: 

10LETA4 (RA=4) 

20P100 

30NEXTA (move ptr by value of reg A (4)) 

40DAB1 
100"0123 45 " 

will display the pattern 45 instead of 01. 


â- REGISTER/MEMORY TRANSFER- 

Data can be transferred between registers and literals with the V 
and U commands. Transfers always start with register A. The 
command specifies the last register to be transferred. The 
literal pointer must be set before the V/U command by a P 
command. The literal must have two spaces for each register to 
be transferred. 

V transfers hexadecimal data to registers from a literal. For 
example, VD will transfer hex data from a literal into registers 
A,B,C, and D. 

U transfers register contents to hexadecimal literals. For 
example, UF will unload registers A through F into a literal (it 
would have to be at least 12 positions since each register is two 
nibbles). 


of the register. For example, if the register contains 197, the 
Mr command will set the literal " "to "010907". The 

normal next step is the VC command to load the 3 values 
(01 ,09,07) into registers A, B, and.C. Then the A command is 
used to select the display pattern for each digit. For an 
example, see the routine at line 63000 created automatically by 
the SHIFT C command after loading VIGIL. 


-PEEK/POKE- 

The command R reads a memory location into a register. The K 
command does the opposite. A special POKE command puts a string 
of hex data into memory. This makes it easy to include 6502 
machine language routines. These commands can also be used to 
access the I/O areas of PET memory. 


-REGISTER/LITERAL COMMANDS- 

COWHANDS OPERATION 

Ur RA thru Rr are unloaded into literal 

Vr RA thru Rr are loaded from literal 

Mr Literal is set to 3-digit decimal value of Rr 


- MEMORY PEEK/POKE COMMANDS- 

OQHHANDS OPERATION 

Rrmmmmm Read contents of memory address mmmmm(decimal) into Ri 
Krmmmmm Put Rr contents into memory location mmmmm(decimal) 
POKEmmmmm,"." 

Put hex data contained in "." literal into memory 

positions starting at mmmmm(decimal) 


-MACHINE LANGUAGE ROUTINES- 

COWHANDS OPERATION 

USRmmmmm Jump to machine language routine at mmmmm(decimal). 

Routine must end with RTS (HEX=60) instruction. 




-DECIMAL DECODE- 

In order to display the contents of a register in decimal using 
the large display numbers, it must first be decoded into a 6- 
nibble literal. This is done using the M command after setting 
the literal pointer to a 6-position "empty" literal. When the M 
command is executed, VIGIL sets the literal to the decimal value 


22 


23 












- HOW IT WORKS- 

The BASIC text editor built into the PET's read-only memory 
stores BASIC text in memory if the first character is numeric 
(line number). During the process, it scans the input line 
looking for BASIC keywords (IF, GOTO, etc.). When a keyword is 
found, it is converted to a special one-byte character. The 
remainder of the line is stored as keyed. This saves memory 
space and greatly speeds up execution of programs. VIGIL has 
been designed to read the text editor output in memory as its 
program. This makes it easy to key, modify, and list VIGIL 
programs exactly like BASIC. If a printer is attached, programs 
may be listed on it easily. The only disadvantage of the BASIC 
text editor is that it ALWAYS searches for keywords. This may be 
a problem when a VIGIL command and its register letter(s) form 
BASIC words accidentally (IF255 - increment RF by -1). BASIC 
will convert the "IF" to a one-byte special character. When 
VIGIL trys to execute that, it will stop on INVALID COMMAND. 
Simply change the register usage to avoid the keyword. 

The first instruction of every VIGIL program must be SYS826. 826 
is the starting location of the VIGIL interpreter program, the 
program which reads the game program and executes VIGIL commands. 
At the end of the program (or on the STOP key), VIGIL returns 
control to the BASIC text editor again. 

PET BASIC expects the text to start at location 1024 (400 hex). 
In order to fit the VIGIL program into memory, and to allow the 
VIGIL text to extend into extra memory, the text starts at 
location 4864 (1300 hex). But this prevents the use of the BASIC 
SAVE command which always begins SAVEing at 1024. VIGIL has a 
special tape and disk save routine. Keying a SHIFT S (save to 
tape) starts the save of a VIGIL game program to tape. Keying a 
SHIFT D (save to disk) starts the save of a VIGIL game program to 
disk. The entire VIGIL program plus any game program can be 
saved by keying a SHIFT V and RETURN to save to tape and by 
keying SHIFT Z and RETURN to save to disk. The VIGIL save 
routines require line 5 to contain the tape or disk label. This 
must be a REM statement. The label will be the first 16 
characters following the REM. The LOAD and VERIFY commands work 
unchanged with VIGIL. 

Because various low-memory pointers used by BASIC must be changed 
to upper memory addresses for VIGIL programs, a reset is 
necessary to change these pointers back to normal settings. 
Keying a SHIFT K (kill VIGIL) does this. 


24 


-PROGRAM EFFICIENCY- 

Comments on a program line are useful for documentation and do 
not slow execution at all (although they do increase loading 
time). One of the most time-consuming parts of the execution of 
VIGIL programs is the searching for line numbers in GOTO, GOSUB, 
and P commands. VIGIL looks two ways â if the desired line 
number is greater than the current line number, it scans forward 
â if not, it starts scanning from the beginning of the program. 
Therefore, the WORST place for a literal or subroutine is just 
BEFORE the requesting line. Better places are either shortly 
after the requesting line or at the beginning of the program. 

Another way to improve game speed is to minimize the number of 
constants in commands (such as IC15). VIGIL must convert the 15 
to hexadecimal every time the command is executed. The program 
will execute faster if a register is set to 15 once at the 
beginning of the program (LETU15) and then the add command is 
used to increment register C (+CU). 

Each display command waits for the TV retrace time (every 1/60 
second) to move data to the screen. This minimizes the "snow" on 
the screen, but it slows down program execution if many patterns 
are displayed. The synchronization routine may be nullified by 
including the following command in the VIGIL program: 
POKE894,"01". To restore synchronization: POKE894 ,"00". The 
synchronization control is reset at the beginning of every 
program. 


1 

) 


25 





VIGIL 


PROGRAM ORGANIZATION- 


Because the VIGIL display function requires re-displaying a 
pattern to erase it before moving it, display functions should be 
set up as subroutines. This minimizes the commands necessary and 
makes them easy to change as the program is being developed. 

Structured programming is an approach where subroutines are used 
extensively. The program is built in layers of GOSUB routines. 
This approach makes program writing easier because the top level 
of routines control the overall main flow of the program. Lower 
level routines are used to perform the detailed functions. In 
structured programming, the GOTO command is not used at all. 

VIGIL can work well with this type of programming. A suggested 
structure is: 

Standard VIGIL startup Sys commands lines 1-2 

Tape/disk label line 5 

GOSUBIOOOO perform initialization line 10 

GOSUBIOOO perform game mainline line 11 

Instructions to restart game lines 12-99 

Literals and subroutines lines 100-999 

Mainline (sub)routine lines 1000-9999 

Initialization (sub)routine lines 10000-62000 

See the programs included (ANTI, SPACE-WAR) for examples of this 
organization. 

-MEMORY ORGANIZATION- 

HEX DECIMAL CONTENTS 

027A-0293 634-659 VIGIL REGISTERS A-Z 

033A-12FF 826-4863 VIGIL INTERPRETER PROGRAM 

1300-1FFF 486 4-8191 GAME PROGRAMS 

(7FFF) (32767) END OF GAMES IN EXTRA MEMORY 


26 


VIGIL 


GAME PROGRAM LISTINGS 


The following pages contain listings of all programs included on 
the distribution tape or diskette. Comments have been added, 
along with explaination of the register usage to clarify the 
operation of the programs. 

If you have joysticks attached to your computer, the games which 
involve motion (BREAKOUT, SPACE-WAR, etc.) can be modified to use 
joysticks attached to the PET user port. Simply replace the "&" 
and "/" commands with the joystick commands and "NOT" 
respectively. The value of kkk in the command will have to be 
changed to sense the joystick output. 


27 











BREAKOUT 


1 SYS826 

2 E <C) 1981 RC WAINWRIGHT 


10 GOSUB10000 

wm* - 

101 DH01 OFF 
105 GQSUB800 
110 BHR2 * 77 i 300 > 400 
120 B0D2Â»44Â»500Â»600 

124 P125 

125 "80" 

130 DH01 ON 

135 #Z1 DONXT IF HIT 

136 GOSUBIOOO 

1.4Q GO TO 1OQ _ 


310 GOT01 20 
4^0 LETRO 
405 -RE 
410 G0T0120 


Show title & directions 
Start game 


Move dot routine 
Move paddles 


Change direction to right 
Reverse direction to left 

Change direction to down 


Registers 
H, O DOT X,Y 

MylN PADDLE X,Y 

R X-increment 

D Y-increment 

E Speed 

Q Shot Counter 

L -1 (255) 

P Key Input 

V Max Score 

U Score Increment 

J Y-row to clr block 


622 I0255 

625 X37 

626 Y48 

627 DAThu 

628 *00 

629 GOT 0900 

630 =HM 
640 =AN 
645 =GA 
650 710 

655 GOTG650 

656 RNDftl 

657 *R0 

658 LETR255 
660 G0SUB19420 
670 GOTO100 

700 '*DL RFUERSF-y-TTF;- 

710 RETURN 

BOO GFTT- 

805 *P255 DONXT JF NO KEY 
810 RETURN 
820 PI 1530 
830 DMN1 
840 64 
850 IM254 
860 66 
870 IM2 
880 DMN1 
890 RETURN 

900 REM ENT OF GAME- 

910 INT180 
920 UAITT 
922 LETX60 
924 LETY45 
926 =UI 

928 G0SUB63000 

930 :iu 

940 *20 NXT IF I<0 

950 =10 
960 LETX60 
965 GOSUB63000 
970 E 


Reduce shots counter 


S how shot remaining,. 

o to end of game if s 
Start next dot at padd 


If shots=0 
paddle 


Wait for key 


Select random direction 


Move paddle routine 


Â£i e 3 r ifSÂ§? d ^ 

move left 2 
If 6 key, 
move right 2 
Show paddle 


Wait 3 seconds 


Clear max score 


Update max score 


Restart screen 


1010 LETY20 
1020 JOY 

1030 *Z1 NXT IF 0>20 

1040 G0T0700 

1050 LETU2 

1060 PI3230 

1065 CMD200 

1070 LETJ16 


Reverse Y-direction 


Change tone-bottom row 


28 


Test if bottom row 


1080 LETY15 
1090 JOY 

1100 *Z1 NXT IF 0, 15 

1110 GOTO1500 

1120 LETU4 

1130 PI3130 

1135 CUD130 

1140 LETJ11 

1150 LETT10 

1160 JOY 

1170 *Z1 NXT IF G>10 

1175 GOT01500 

1180 LETU7 

1190 PI3030 

1195 CHIU00 

1200 LET>J6 

1500 =KH 

1505 C0NT5 

1510 IK254 SUETR2 

1520 >K DIO BY 4 

1530 >K 

1550 <K MULT BY 4 

1560 <K 

1580 IK2 

1590 DKJ4 

1700 LETX10 

1710 LETY45 

1715 =WV 

1720 GOSUB63000 

1725 +011 ADD TO SCORE 

1730 =U0 

1740 LETX10 

1750 G0SUB63000 

1900 G0TG700 

10000 REM'TNTT 

11000 PI1005 

11002 LETA0 

11003 LETB0 
11005 "FF" 

11010 DAB1 

11020 STEPASÂ»0 Â»79 tj 11 
11030 GOT011010 
11050 PI 1055 
11055 "80808080" 

11060 LETA0 
11070 LETBj 
11080 DAB4 

11090 STEPB4Â»0Â»46*Â»11 
11100 GOTO11080 
11300 LETA79 
11310 LETB1 
11320 PI 1055 
11330 DAB4 

11340 STEPB4 Â»0Â»46Â» Â»11 

11350 GOTO11330 

11400 REM 

11500 LETM36 

11510 LETN44 

11520 PI 1530 

11530 "FF" 

11540 DMN1 

12000 LETL255 MINUS 1 

12010 LETG5 

13000 LETA2 

13010 LETB6 

13020 PI3030 

13030 "F0F0F0F0" 

13040 DAB4 

13050 Â£TEPA4Â»0Â»76Â» Â»13 
13060 G0T013040 

am tm 

13120 P13130 
13130 "F09090F0" 

131-40 DAB4 

13150 STEPA4Â»0Â»76Â»Â»12 
13160 GOTO)3140 
13200 LETA2 
13210 LETB16 
13220 P13230 


Middle row 


Test if middle row 


Set pointer 
Sound tone 


Block pointer must be multiple of 4 


Add base back 
Clear off block 


Clear old score 


Show new score 


Draw top line 


Left side line 


Right side line 


Show paddle 


Show top row of blocks 


Show middle row of blocks 


Show bottom row of blocks 


29 






13230 "F0R0H0F0" 

13240 DAB4 

IWfo SJfKW 4 â : 13300 

13300 REM 
13400 LETH36 

urn him 3 

15000 LETX10 
15010 LETY45 
15030 =UV 
15040 G0SUB6300G 
16000 LETX60 
16010 LETY45 
16020 =UI 
16030 G0SUB63000 
17000 X37 
17010 Y48 
17020 DATAQ 
18999 RETURN 

PI9425- 

19425 "80" 

19440 LETD255 
19450 DH01 
19460 LETE1 

12 2 ?9 RETURN _ 


Setup registers 


Show score(O) 


Show max score 


Show shots remaining 


i THEN30 , 0Â» 
T HE N10, 6, 1 
THEN10 ,1 O' 
THEN10,14: 
THEN10,20 
THEN10,26 
THEN!0,30 
THENIC,36: 
THEN 10,46: 
/12 

G0TG30090 

RETURN 

P63500 DI! 

MW 

VC 

AA 

BXY5 

1X5 

AB 

DXY5 

1X5 

AC 

DXY5 

RETURN 


Display dot 


â t BREAKOUT" Title & Explanation 

"TOP.ROW SCORES 7 POINTS EACH" 

, "MIDDLE B*0W SCORES 4 POINTS EACH 1 ' 

; :: Y0U T Gh K 5 W TRIÂ°^ S 2 P0INTS EACH " 

,"PRESS * KEY TO FIRE BALLS" 

,"PRESS 4 OR 6 KEY TO MOVE PADDLE" 

, "SCORE IS ON LEFT_SHOTS REMAINING IN CENTER-M 
, PRESS = TO START" 


Standard display routine 


AX SCORE ON RIGHT 


1 SYS826 

2 E <C*j 1981 RC WAINWRIGHT-1/3/81 


5 REM 01 ANTI 

10 G0SUB10000 

11 GOSUBIOOO 

12 LETVO 

13 GQSUB10030 

32 =WL 
34 LETX2 

36 LETY44 

37 G0SUB63000 

Ifâ¢** TIME 

42 X44 

43 Y46 

44 POS 
46 DATAS 
48 RETURN 


Initialize routine 
Mainline 


Restart game 


SCORE DISPLAY 


REGISTERS 
G,H GUK X,Y 
I,J SHOT X,Y 
M,N PLANE X, Y 
V SCORE 
L MAX SCORE 
K SHOT CONTROL 
1-ON 

Q PLANE TYFE 

1- SLOW 

2- FAST 

E Pitch control 
p Height Save 


30 



260 LETI7! 
270 LET.J44 
275 PI00 
280 DIJ2 
290 RETURN 


Display shot 


F'l 00 
DIJ2 

STEPJ254,0,99?350, ( 
DIJ? 

RETURN 

LETKO 

G0SUB250 

RETURN 

â REfl*:* NEW PLANE R 
RNHQ1 
I Gil 

RNDN31 
=PN 
LETMO 
PI 05 
â¦ 02 
PI 06 
' DMN3 
â¦ K1 

> GOSUB580 

. Fâl00 â 

* DI J? 

. LETKO 
i GOSUB250 

l RETURN _ 

i REM ** MOVE PLANE 
i PI05 
i #02 
i P106 

> DMN3 

) BMQ0,72,0,700 
) DMN3 

i #zo 

) RETURN 
) G0SUB800 
) G0SUB500 
) RETURN 

i ReH **CRASH R0UI1N 
i LETE50 
I KE59464 
i CQNT60 
i G0SUB5B0 
) Pi05 
i #02 
) P1Q6 
i DMN3 
) IM3 
5 IN255 
) PI 10 
1 #02 
i Pill 
) BMN8 


Select plane type and show 


Clear shot off 


Move plane 


Set Pitch 
Sound tone 


Clear plane 


Display down plane 


3t 







875 IE? 

876 KE59464 
880 DMNB 
885 INI 
890 $N39 
895 G0T086C 
900 GO SUB50 
905 LETA32 
910 -AF' 

915 >A 

920 + VA 

925 #Q2 

930 107 

935 GOSUB50 

940 RETURN 

1000 REM MAIN PROG 

1010 G0SUB500 

1020 â¦K1 

1030 GOSUB300 

1040 GOSUB600 

1050 RE Alt A 

1060 #A0 

1070 GOTO!180 

1080 CMH255 

1090 LETK1 

1110 C0NT7 

1180 GOSUB40 

1185 $S0 

1190 GOT01020 

1900 REM ++ END OF GAME 

1910 MU 

1920 $71 

1930 = LU 

1999 RETURN 

TO000 REF INTTIALIZr"ROTTTTNr 
1 OOl 0 THEN J 0 * .1 5 r" ANT I - A IRCRAF 
10020 THEN! 0* 25Â» 11 _SCORE DEPEN. 
10030 THEN3 0 t 35Â»"tHIT 1 KEY T 
10040 HZ 
10050 $Z1 
10060 GOT010040 
10070 E 

10080 THENO> 40râ tMAX SCOREX 

10090 G0SUB5a 

10100 GOSUB30 

10120 SGN60 

10130 G0SUB40 

10140 G0SUB2O0 

10150 GO-SUB250 

19999 RETURN 

53000 TS35075- 

53010 MW 
63020 UC 
63030 AA 
63040 DXY5 
63050 1X5 
63060 AB 
63070 DXY5 
63080 1X5 
63090 AC 
63100 DXY5 
63110 RETURN 
63500 "000101" 


Change tone 

Loop till at bottom(yÂ«39) 


Divide height by 2 


Add jet bonue 


Â§ti?AB! a RIÂ° 9ra 

Move shot 
Move plane 
Get keyboard 


Update maximim score 


i GUN_YOU HAUE 60 SECONDS__PRESS 

DS ON HEIGHT OF PLANE-BONUS OF 7 
0 START" 


Initialize screen 

tSCOREX t TI ME' 


Y 1 0 i- IRE:' 
rOr, JE i 


Standard display routine 


1 SYS826 

2 E (C ) 1981 RC WAINWRIGHT-1/3/81 


10 GOSUBlOOfrO SHOW INSTRUCTIONS 

11 G0SUB13000 SETUP DISPLAY 

12 G0SUB1OOO GAME 
14 G0T011 

50 REM 

52 REM REGISTER OSAGE 


Top level routines 


32 


54 REM IfrE CANNON 'SHOT X 
56 -REM HÂ» I BOMB TfrY 
58 REM U SCORE 
60 REM M BEST SCORE 
62 REM U BOMB COUNTER 
64 REM N BELAY CTR FOR B 
66 REM C FT.AG STAR HIT B 
68 REM FVG START DISPLAY 

-Wr SCTjPfTTn'SPlAY- 

110 =uu 

120 TETXOO 
130 LETY25 
140 G0SUB63000 


300 REM DSf ATTKER 
310 P320 

118 Wi 


400 REM CANNON 
410 Fâ420 
420 "COCO" 

430 DDE2 

m-m p*- 

900 REM SHOW BOMB COUNT 

910 LETXOO 

920 LETT 10 

930 =WU 

940 G0SUB63000 

- 

1000 REM MAINLINE 

1020 INT5 5/60 SEC LOOP 

1030 $E43 

1040 G0SLIB5000 MU CANNON IF STARTED 

1050 *E43 

1060 GOSUB5200 TST FOR FIRE 
2000 $16 

2010 G0SUB6000 MOVE BOMB 
2012 *16 

2014 G0T06400 TST END 
2020 *N0 

2030 GOSUB6300 START BOMB 
2040 #C255 

2050 RETURN XIT IF STAR HIT 
3900 WAITT 

3910 IN255 COUNT BOMB DELAY 
3920 #N255 
3930 RNDN31 

i?00 ^M^MOUE CANNON m^T7 

5010 GOSUB400 CTR OLD 

5011 :EI RESET CAN IF PAST BOMB 

5012 *70 

5013 G0T0510O ^ 

5020 STEPE254Â»6Â»50Â»5100Â» 0 
5030 Â£2 TOOK FOR L MOUE 
5040 ID255 

5050 Â£3 LOOK FOR R 
5060 ID1 

5070 G0SUB4O0 DSP CAN 
5080 *Z1 

5085 G0T053C0 HIT 

.5099 RETURN___ 

5100 LETE43 RESET CAN shot 

5105 LETD40 
5110 G0SUB400 


5256 71 TST CAN 
5210 RETURN 
5220 CMD75 TONE 
5230 C0NT10 
5240 G0SUB5000 


5310 G0SUB300 


33 



G0SUB6200 
G0SUB100 

LETX50 SCORE =50-HGT/2 

-XE 

>X 

+VX 

GO SHF.1 00 
GOSUF400 
G0SUB5100 

- 

REM ATTK MOVE 
G0SUF300 

RNDX7 RNDDM SIDE MOOES 


Weighted toward streight down 


GNX6J 00,6050,6060,6100,61 <^Â£1 $Â£fÂ£100,6100 

GOT06100 . . . 

IHI Move right 

STEPI1,0,46,0, 6200 

G0SUF300 

$145 

RETURN 

$H39 

RETURN 

G0T07000 GO IF HIT STAR AT 3?*45 

RETURN 

LET 16 

RNDX3 

0NX6210*6210*6220*6230 

LETH3V 

RETURN 

LETH35 

RETURN 

LETH43 

RETURN 

REM 

$16 START BOMB 

RETURN 

G0SUF900 

IU255 

GOSHF900 

G0SUR6J 00 

-HP*- 

REM TEST END OF GAME 

$U0 

GOT02020 
REM WIN 
G0SUF41000 
SGN5 
WAITS 

JMV UPDATE BEST SCORE 

#Z0 

=MV 


7200 THEN25,20 *"tYOU LOSE, TURKEYM" 

7210 SGN5 
7220 WAITS 
7230 LETC255 
7240 RETURN 

10000 REM I NIT ROUTINE 
10010 E 

11000 THEN3,5*"YOU ARE MANNING THE LASER GANNON" 

11010 THEN3*7,"ON THE DEATH STAR*" 

11020 THEN?*11,"LUKE AND HIS BUDDIES ARE ATTACKING," 

11025 THEN3,13,"TRYING TO HIT THE TRENCH WITH THEIR" 

11030 THEN3,15,"BOMBS* IE THEY SUCCEED,YOU LOSE!!!!" 

11040 THEN3,21,"THE tEMPIRE? REWARDS YOU WITH MORE POINTS" 
11050 THEN3,23,"THE FURTHER AWAY YOU HIT THE BOMBS*" 

11060 THEN3,30Â»"YOU FIRE THE CANNON WITH THE 1 KEY*" 

11070 THEN3,32,"THE 2 AND 3 KEYS GUIDE THE SHELL*" 


11080 THEN3,34,"PRESS * TO START THE GAME*" 

11090 THEN26,40,âtGOOD LUCK" 

11500 /10 
11510 GGT011500 

m f ET URN - 

13001 THEN1,6,âtATTACKER BOMBS" Setup game screen 
13010 THEN1,20,"tSCORE" 


34 


THEN 1,34,"tBEST SCORE 1 

LETCO 

LETU15 

G0SUB900 

LETXO 

LF.TY39 

=WM 

GOStrB63000 
LETVO RSET SCORE 
GOSUBIOO SCORE 
LETF3I STAR X6Y 
LETG45 
P20040 

"03OF3E7EFF" STAR 
DFG5 
P20059 
: LETF39 
r DFG5 

1 "7F7F7F7FFF" 

P20070 
"COF OFCEEEE" 

LETF47 

DFG5 

> GOSUB5100 

i G0SUK41000 
i LETI6 
i LETH39 
i RNDN31 

1 RETUR N_ 

i LETH34 DSP ATTACKERS 
L.ETI3 
P41100 
' DHI3 
i "AA44EE" 
i LETH42 
i- P41200 

> DHI3 

i "A040EO" 

1 RETURN_ 


63010 MW 
63020 VC 
63030 AA 
63040 DXY5 
63050 1X5 
63060 AF 
63070 DXY5 
63080 1X5 
63090 AC 
63100 DXY5 
63110 RETURN 
6350 0 "000 103 11 


SPACE-BATTLE 


1 SYS826 

2 E <C> 1981 RC WATNWRIGHT-1/3/81 

- 

11 GOSUBIOOO MAIN 
14 G0T011 

PLftST ^ 
210 NEXTO SEL SHIP R *9 0 has d - 

220 DKL6 

.230 RETURN___, . , . 


pa t terns , random select 
patterns, random select 


Reg 0 has displacement 


310 NEXTP SEL SHP 
320 DMN6 

2 30 RETURN _ 

4XKT GUSUB200 L Hi I 
405 PI20 BLAST 
410 HKL7 


Reg P has displacement 


Left ship hit 


REGISTERS 
K,L LEFT SHIP X,Y 
M,N RIGHT SHIP X,Y 
Q LEFT SPEED INCREMENT 
R RIGHT SPEED INCREMENT 
P LEFT PATTERN CTL 
0 RIGHT PATTERN CTL 
G L SHOOT X COORD 
H R SHOOT X COORD 
U L SCORE 
V- R SCORE 


35 









36 


1090 LETR2 
1100 #A1 A 
1110 LETRO 
1120 G0SUB300 
1130 G0SUB6OO 
1140 G0SUB300 
1200 *A7 
1210 LET0254 
1220 *A4 
1230 LETR255 
1240 #A1 
1250 LETfil 
1260 *A0 
1270 LETR? 

1280 *A5 
1290 LETRO 
1300 G0SUB700 
1310 G0SUB500 
1320 GOSUB200 
2000 #A13 R FIRE 
2010 GOSUBSOO 
2020 â¦ A2 (. FIRE 
2030 G0SUB700 
2040 *S0 
2050 GOTO1000 

'1 00 0 O' L ET H 7 7 IN ITT AI. T7E - 

10010 LETA17 

10020 RNUni R0=0 OR 1 

10030 *0A MULT BY 12 

10040 RNTiPl 

10050 4FA 

10060 RNIF 31 

10070 RNBN3J 

10080 LETUO 

10090 LETUO 

11000 THEN20,15, " tBRACE BAI T 
11010 THEN14 ? 25Â»"L EFT tCOMMA! 
11020 THEN!8?29 ?"7 UP FAST 
11030 THEN18Â» 35 r"0 DOWN FAST 
12000 HA 
12010 $A10 
12020 GOTOJ2000 
13000 E 

13010 GOSUB900 
13020 G0SUB950 
14000 GOSHB200 

14020 Â§GN120Â°2 MIN GAME 

illoo "^63500""TiIBl :: ' RTM- 

63010 My 
63020 VC 
63030 AA 
63040 DXY5 
63050 1X5 
63060 AB 
63070 DXY5 
63080 1X5 
63090 AC 
63100 DXY5 
63110 RETURN 
63500 "000001" 


tSPACE BATTLE" 

LEFT tCOMMANRBX RIGHT" 

7 UP FAST 9-4 UP SLOW 
0 DOWN FAST -_5 STOP 


to start 


1 SYS826 

2 E (C) 1981 RC WAINWRIGHT-1/3/81 
5 REM 0JU.F*0. 

4 FROM RCA COSMAC VIP SPAC E INTERCEPT GAME 

rlyk'OOOO Show title & instructions 

10 Fâ900 
12 LETJ56 

16 BJK3 8 Show lar< 3 e UF0 

18 R905 
20 LETLO 


37 





Show small ufo 



38 


Show score 


770 =WU BUMP HAX SCORE 
775 LETX25 
780 GOSUPS00 

7R5 RFTliRN _ 

800 LETY40 
802 GGSUP63000 

m iphp- 

852 CONT ( 

fÂ»- 

905 "6OF060" 

910 "F8 U 

920 "40E0A0 1 

970 THEN15 , 47," t PRESS * 

975 /10 

980 GOT0975 

981 :hu 

982 #21 

983 =UH 
985 E 


Blgufo 
Small ufo 
Rocket pad 
Rocket 


TO RESTART 1 


Update max score 


- _ . Restore at edge of screen 

2010 GOTO!Go _ 

3000 LETL0 Restore at edge of screen 

m ftfe: - 

4010 THEN2 , 36 , "t SC0RE" 

4020 THEN23Â» 36,"thAX * SCORE" 

4030 THEN4 7 , 36? "t SHOTS LEFT" 

4099 RETURN 

30000 THEN30Â»5, " tU. F* 0," 

30010 THEN7 , 10Â»" SHOOT DOWN THE U.F.O.S WITH THE" 

30020 THEN?,14T*ROCKET* USE THE 4,5,6 KEYS TO FIRE, 
30030 THEN7,18,"THE SMALL U*F.D*COUNTS 15 POINTS*" 
30040 THEN?,22,"THE LARGE ONE COUNTS 5 POINTS." 

30050 THEN10,40,"tPRESS . TO START*" 

30060 710 
30070 G0T030060 
30080 H7 CLP KF 
30090 E 
39999 RETURN 

63000 P'6350'0 TIFT T:TN- 

63010 MW 
63020 UC 
63030 AA 
63040 DXY5 
63050 1X5 
63060 AP 
63070 DXY5 
63080 1X5 
63090 AC 
63100 IÂ«XY5 
63110 RETURN 


CONCENTRATION 


1 SYS826 

2 E < C ) 1981 RC WAINWRIGHT- 1/3/81 

i EtÂ£R Xf,SpTfS N fF:Â§H J RCA COSMAL U1K LAkli MSICWING GAME 

9 G0SUP20000 Title 

10 G0SUB8000 Initialize 

11 GOIDIOOO Play gÂ« me 

20 u OOOOLiriOOOOOOOOOO"SAUE REGC 385 ) 

25 â07070602050205000001040604030301 " 

30 "OC08090A0405060001020DOEOFOB0703" 

40 "7C243C24247C" B 

41 jj1824243C2424" A 

60 "?8?01E?8080818187E7E18186666181866667E24247E66" 
. M 4 g 24181824427E525252527E42427E427E147C26643E28" 

104 LETNORoutine to show all symbols 
106 G0SUB328 
108 INI 


39 









40 


GOTOl200 
LET1.15 
=MN 
= JK 

GOTOl1 66 

INT32 

WAIT! 

(?JK HO IF J = K 
GOTOl?26 
G0SUF308 
LET? 3 
+ FZ 
LETA3 
ANDFA 
G0SUB3266 
GOTO! .1 60 
CONTI 0 
GQSUB5000 
101 

G0SUB3 266 

F'20 

NEXTK 

NEXTK 

LETA221 

UA 

â¦ FO 

GOTOl256_ 


Save pointers 


Flip player back if 2 

Clear patterns 

Next 

Hit tone 
Update score 
Bump match counter 
Clear p tterns 


Put "found" code into table 


Test player 
Put B in grid 


put A in grid 


G0SUP328 
= FUi 
=CE 

=NM 

G0SUP328 
RETURN 
T HE'Ml 5 > 47Â» 
/10 

G0T04010 

H? 

â ippiQ_ 

GOT00000 
GOSUB6000 

I PI 

G0SUB6000 

RETURN 

G0SUB6500 

IF:l 

GOSUB6500 


Clear off mismatch 


Clear off mismatch 


Score update 
Test player 


6010 LETX4 
6020 L.ETY40 
6030 AP 
6040 DXY5 

60 50 RETURN _ 

6500 REM F: SCORE 

6510 LETX65 
6520 LETY40 
6530 AR 
6540 DXY5 

ITIALIZE 

8500 LETA15 
8510 LETB3 
8520 LETC12 
8530 LETP21 
8540 LETE30 
8550 LETF39 

m 


41 






8580 DAB1 
8590 DACJ 
8600 DADl 
8610 DAE1 
8620 DAF1 

8630 STEPA8Â»0r45Â»0Â»8650 


8656 msr 

8651 "F8" 

8652 DAB1 

8653 DAC1 

8654 DAIU 

8655 DAE1 

8656 DAF1 

8659 LETA3 

8660 LETB15 
8670 LETC24 
8680 LETD33 
8690 LETE42 
8700 LETF5:i 
8710 P8720 

8720 "80808080808080808030" 

Â§ 730 DBA10 
740 DCA3 0 
8750 DDA10 
8760 DEA30 
8770 DFA10 

8780 STEFA10Â»0*30Â»Â»8800 

8790 G0T0S730 

8800 DBA' 7 

8810 DCA7 

8820 DBA7 

8830 DEA7 

8840 DFA7 

9000 LETPO l. SCORE 

ms IUâ' R srnRr --- 

9102 LETA"' Build random list in 20 

9104 LETB2 
9106 LETC? 

9108 LETD2 
9110 LETE2 
9112 LETF2 
9114 LETG2 
9116 LETH2 

9118 UH UNLD THRU RH Unload 2s into 20 

9120 LETDO 

9121 LETOO 

9122 P20 

9124 RNBB7 

9126 NEXTB 

9127 NEXTB 

9128 UA 

913? G0T0912^ T IF A= Â° Test t0 PUt 2 Â° f each 8y 

9134 IA255 

9136 P20 

9137 NEXTB 

9138 NEXTB 

9140 UA 

9142 P25 

9144 NEXTB 

9145 NEXTD 

9146 =AB 

9150 ID1 Test if all 16 generated 

G0T09122 

9156 OOSUB188 SHOW SYHS 
9200 GOSUB6000 

9210 GOSIJB6500 Sho scores 

439?9 RETURN _ 

IP IK%EF7IKV F^TEPNS." 

MS TaiKI:ll;"VfII SM^ISfW - 70 u,icowER â 

21000 J^ N10,40,, â tF,F:ESS â¦ T0 START*" 

21010 G0T0200O0 
21015 HZ CLR KB 


Test to put 2 of each symbol into 25 


Test if all 16 generated 


Show scores 


42 


21016 E 

21020 RETURN 

63000 P63500 BISP RTN 

63010 MU 

63020 0C 

63030 AA 

63040 DXY5 

63050 1X5 

63060 AB 

63070 DXY5 

63080 1X5 

63090 AC 

63100 DXY5 

63110 RETURN 

63500 â000000" 


1 SYS826 

2 E <C) 1981 RC WAINWRIGHT-1/3/81 

5 REM 01MA7E_ 


11 GOSUBIOOO 

12 GOSUBlOl00 

13 G0T011 

~IOO URT W TTTTETTTFST - SUFI 
110 LETX255 
120 -XS 
160 X58 
170 Y23 
180 DATAX 

190 RETURN _ 

200 P210 
210 "EOFOEOEO" 

220 DJK4 

730 RETURN _ 

300 REM BISP BOt 
310 P320 
320 "80" 

330 DGH1 

m mmrn m r ~ â 

410 G0SUB300 
430 64 
440 IG255 
460 62 
470 IH1 
490 66 
500 IG1 
520 68 
530 IH255 
540 G0SUB300 

~ fB8o F, |jy R ?iAiN ' TT Tur;- 

1010 G0SUB2OO 
1020 $Z0 
1030 G0T09000 
1040 G0SUB200 
lg50 GOStJBlOO 

1056 GOTO1070 
1060 G0SUB3000 
1062 RNBT127 
1070 G0SUB400 
1080 iZO 
1090 GOTO1000 
1100 REM HIT WALL 
1110 CMB255 
1120 C0NT10 

1140 THEN12>12 Â»"SORRYÂ» 


Startup game 


Target Display routine 


Dot display routine 


Routine to move dot 


REGISTERS 

A,B MAZE DRAWING X,Y 
J,K TARGET X,Y 
G f H DOT X,Y 
C INCREMENT FOR 
LITERAL PTR. 


Show target 
Test for hit 
Go if hit target 
Clr target 
Test timer 

If timerÂ»0 update maze 
Go on 

Go to modify maze 

Set timer to random number 

Move dot 

Test if hit(wall) 


BETTER LUCK NEXT TIME" 


3010 RND77 

3020 0NZ3100 > 3200 1 3300Â»3400 Â» 3500 > 3600Â»3700Â»3800 
3100 LETA7 
3110 LETB22 


43 







3120 F'3130 
3130 "80808080" 

3140 DAB4 
3150 RETURN 

3210 LETBlH Maze modification routines 

3220 P3900 v 
3240 DAB 3 
3250 RETURN 
3300 LETA13 
3310 LET820 
3320 Fâ3900 
3340 G0T03240 
3400 LETA70 

mÂ°o â¢Â° 

3440 G0T03240 
3500 LETA34 
3510 LETB25 
3520 Fâ3530 

3530 "8080808000808080808^" 

3540 DAB10 
3550 RETURN 
3600 LETA45 
3610 LETP39 
3620 F'3630 
3630 "7880308080" 

3640 DAB5 
3650 RETURN 
3700 LETA55 
3710 LETB44 
3720 F'3900 
3740 GOTO3240 
3800 LETA3 0 
3810 LETB5 
3820 G0T03320 
3900 "FF" 

501Â® l R FT A 2 !ITIW17F * r,ISPLAY MAZE Hot.: there 
5020 LETFiO end o 

5030 F'6000 These 

5040 DAF32 lâÂ®! 

5050 STEFAS,0,79,0,5100 â _ â conta 

5060 LETC71 71-64+7 to st 

5070 NEXTC 
5080 G0T05040 

5100 REM DISPLAY NXT 18 ROUS Display lower half of 
5110 LETAO 
5120 LETB32 
5130 P6500 
5140 DAB18 

5150 STEPAS,0,79,0,5200 â , , 

5160 LETC43 43-36+7 

5170 NEXTC; 

5180 G0T05340 

ETTI PXI 


Note: there are 7 bytes between the 

end of one literal and the next. 
These routines use reg. C to 
contain the literal length + 7 
to step up through the literal 


H rrn/ihA X X X XULXX XX XXV J r ! K U VVVVV O03F 00000000F E0202020242424 4 v4 94 - 4 9" 

6030 FFOOOOOOOOFFOOOOOOOOF F 00000000F F 10101010101010101010101 0101 Ol Oi ?v" 
E00000000FF000-00000FF00000000FF808030803780808^O8'?8h" 
6050 "FFOOOOOOOOFFOOOOOOOOFFOOOOOOOOFFOOOOOOOOFF040404^784848484848484" 
6060 ;FFOOOOOOOOFFOOOOOOOOFFOOOOOOOOFFOOOOOOOOFF000000880000000^38^0%" 
6070 FFOO00000OFF00000000FF 00000000FF OOOOOOOOF F oooooot lonnoAnnAr aaXaa" 


6070 âFFOOOOOOOOFFOOOOOOOOFFOOOOOOOaFFOOOOOOOOFFOOOOOOFFOOOOOOOO^OOAOn 

S?8 

6520 â"424242424242424242424242434040404OF F " 


6560 "202021202020203F0000OOOOFF000OOOOOFF 1 
6570 OOOOFFOOOOOOOOFFOOOOOOOOFF 0000000 A F F * 

^000 THEN22,1 2 ,ât CONGRATULATIONS]* 


9005 CMD128 
9010 C0NT60 
9020 INT120 


Win routine 


44 


l HEn 3 0,10, 11 F 1N Li YtiUR WAV 1K I U I HL_LLf! I LF: OF" THE MAZE!" 
THFN3 2,16, "USE 8 FOR UP..2 FOR D0UN_4 FUR LEFT _6 FOR RICH I 
SGN5 
WAITS 

' G0SUB5000 DRAW MAZE 

Â» THEN46,23,"TIME=" 

LFTH60 
1 SGN255 

> LETG3 

> LETH48 

> LETJ61 

> LETK16 

) LETM128 
) G0SUB30O 
f RETURN 

KALEIDOSCOPE 


1 | y S826 1981 rc UA jnwRIGHT-1/3/81 
5 KEM 0 â, KALEIDOSCOPE 

4 RCft CPS â AC ^ 

10 LETAO 
20 LETDO 
30 LETB3? 

40 LFTC24 Disi 

50 G0SUB500 D1 ?| 

52 HA 

53 #A255 

54 GOT052 

55 LETQ 8 rrtm 

I* in Â§ Â° 5 

8 WIW 

64 NEXTD Sav 

ft no 

75 ?r ss 

82 G0T050 R . s 

85 LETPO Kes 

90 F'1000 

92 NEXTD Get 

95 VA Tes 

97 *A0 Rep 

100 G0T085 
105 ID? 

110 #D0 
115 G0T085 
120 G0SIJB500 
125 GOT090 

450 REM DISPLAY SLJBR Te < 

500 *AP 

505 STEF'C.255,0,24,2000,2100 
510 #A4 

515 STEPB255,0,39,3000,3100 
1?1 STEPB3 ,0,39,3000,3100 

525 STEPC1,0,24,2000,2100 
530 P950 d1b . 

610 DBC1 01,1 

615 =KP 
620 LETL49 

625 -LC Disi 

630 DKL1 D1S] 

635 LETK79 

640 -KB 

645 DKL1 

650 =LC 


Show title 


Display upper left 
comer aot 


REGISTERS 

B,C UPPER EEFT X t Y 
K,L OTHER 3 QUADRANT X,Y 
D LITERAL PTR 


Compare A&Q _ 

GobacJc if greater than 8 

Point to literal to contain directions 

Save keyboard direction 
Test for end 

Bump D by 2 

Reset pointer 

Get direction code 
Test for end code (0) 

Repeat 


Test direction 


Display upper left quadrant dot 


Display in other 3 quadrants 


45 







riKL i 

&12 TEST FOR STOP 

GDT04000 

RETURN 

"BO" 

J 8020202020202020 20404 0404 04 0406060606060B080 8080 SO SOSO.â¢'OIC 

) L E T C â¢4 
) G0T0530 
0 LFTGO 
0 GOTOSSO 
5 LETS?? 

0 GOTOSSO 
0 LETBO 
0 GOTO Si 30 
0 /13 

0 GOT04000 
5 E 

^TM'SO^.rMKALBtriOStDRE 1 *- 

10 THEN3>10,"USE THE 2,4>6,8 KEYS TO MOVE A DOT" 

?0 THEN3,14,"AROUND IN THE UPPER LEFT GUADRANT_OE THE SCREENâ¦ M 
50 THEN3 >18 >"THE PATTERN IS REPEATED IN THE OTHER " 

*5 THFN3,20,"THREE QUADRANTS *" 

^0 THFN3,22,"PRESS 0 TO GET THE PATTERN TO REPEAT-INDEFINITELYâ¦" 

-*0 THEN3,28," USE THE = KEY TO STOP THE PATTERN â¦" 

>0 THEN3,30,"PRESS THE i KEY TO START/RESTART." 

'0 THEN3,35,"PRESS THE STOP KEY AND LIST 1000-T0 DISPLAY CODE FOR 
>0 THEN3,40,"TRY 22440, 4S4B9S0, 2664880" 

>0 THEN3,42, "4886680, 4(6)8(6 )6(4 )2220, 222440â 

>0 /13 

?2 G0T049990 
fA E 

?5 RETURN 
?9 GOT049999 


FORTUNE-TELLER 


1 SYS826 

2 E < C ) 1981 PC WAJNWRIGHT-1/3/81 


5 REM 0iFUKTUNE-TELLER 

6 REM ADAPTED FROM RCA COSMAC VIP SPOOKY SPOT GAME 
100 THENO,35,"THE FORTUNE TELLER WILL ANSWER ANY" 
105 THENO,37,"QUESTION WITH A YES OR NO" 

107 THENO,42,"PRESS . TO START" 

180 G0SUF242 

185 G0SUD254 

190 /10 LOOK FOR . KEY 

192 GOTO)90 

203 F'290 

204 LETBO 

205 LÂ£TCli>_ 


REGISTERS 

B,C DISPLAY X,Y 

J RANDOM NUMBER 

D,E GENERAL DISPLAY X,Y 


207 *Z1 

208 G0T0224 

210 INT4 

211 WAITT 

214 IB1 

215 RNDJ2 

216 IJ255 

217 +CJ 

218 G0TG206 

~ 72'4 "LETJi 6- 

225 ANDJC 

226 $J0 

227 GCR0240 

228 G0SUB259 
240 G0SUB269 
242 P271 

244 LETEP 

246 LETD64 

247 priEB 

248 LETJ16 

249 NEXT,! 

250 ID8 


Show dot 
Go if hit 


Test for YES or NO hit based on height 

Reverse proper one 
Show yes 


46 


254 Fâ?80 

255 1..ETEJ6 

?f.A npTfr.'A/. 

259 LETTS 

260 LETD65 

261 Fâ290 

263 DDES 

264 ID1 

265 $D80 

266 GOTO?63 


Set to yes 

Draw line across to reverse image 


Restart 

Set to no 


269 LEIL)6 Set to no 

m mmm 276767FFFEF23EE63FB23FF" 
280 H 7F767?7074767^7FEE87B7B7B787FFFE ,, 
290 "808080S080808080" 

300 THENO, 45, "tPRESS = TO RESTART 4 â 

310 /12 
315 G0T031O 
320 E 

Mo MSP KIN - 

63010 MU 
63020 VC 
63030 AA 
63040 DXY5 
63050 1X5 
63060 AB 
63070 DXY5 
63080 1X5 
63090 AC 
63100 DXY5 
63110 RETURN 
63500 " 


Yes' literal 
No literal 


47 





-VIGIL COMMAND SUMMARY â 


Rr,Rs,Rt,... 
11111 
kkk 
nuninmm 
[] 


- COMMAND NOTATION - 

any register (A-Z) 

any program line number (0-63999) 

any constant (0-255) 

any memory location (decimal) 

optional entry 


OOMMAND 

LETrkkk 
=r s 
+rs 
-r s 
*r s 


:rs 

ORr s 
ANDrs 
FORrs 
>r 

<r 

Ir kkk 
RNDrkkk 

CLR 


DATA MOVEMENT COMMANDS- 


Rr=kkk 

Rr=Rs 

Rr=Rr+Rs (RZ=0 if Rr+Rs<=255, RZ=1 if sum > 255) 
Rr=Rr-Rs (RZ=0 if Rr<Rs, RZ=1 otherwise) 

Rr=Rr*Rs (multiply) 

Since product is two bytes in size, Rr contains 
the least significant byte and RZ contains the 
most significant byte of product. 

Rr is compared with Rs 

RZ=0 if Rr<Rs, RZ=1 if Rr>Rs, RZ=2 if Rr=Rs 
Rr=Rr OR'D with Rs 
Rr=Rr AND'D with Rs 
Rr=Rr EOR'D (exclusive or) with Rs 
Rr is shifted right one bit 

RZ contains old lo bit-(0 or 1) 

Rr is shifted left one bit 

RZ contains old hi bit-(0 or 1) 

Increment Rr by kkk (use 255 for -1, 254 for -2) 

Rr = Random number in range or 0 to kkk 

kkk is maximum value and 0 is minimum value 
Clear all registers (set to 0) 


-BRANCH COMMANDS- 

COMMAND OPERATION 

GOTOlllll Go to line 11111 

GOSUB11111 Go perform subroutine starting on line 11111 
(continues with next line on RETURN) 

RETURN Return to mainline from subroutine 

ONr[11111][,11111] 

Depending on contents of Rr, GOTO line 

1st 11111 if Rr=0 

2nd 11111 if Rr=l 

3rd 11111 if Rr-2, etc. 


A - 1 


-TEST fc SKIP COMMANDS- 


COMMAND 
#r kkk 
$r kkk 
Â§rs 
%rs 


Do next command if Rr=kkk* else skip next command 
Do next command if RrOkkic, else skip next command 
Do next command if Rr=Rs, else skip next command 
Do next command if RrORs, else skip next command 


-S TEP fc TEST COMMANDS 


COMMAND OPERATION 

STEPrkkk,lll,hhh,11111(LOW),11111(HIGH) 

Increment Rr by kkk (255=-l, 254â2, etc.) 

If Rr is less than 111, then GOTO lllll(LOW) 

If Rr exceeds hhh then GOTO lllll(HIGH) 

Brslll,hhh,11111(LOW),11111(HIGH) 

Increment Rr by Rs then test limits as above 

Zrstulllll(LOW),11111(HIGH) 

Same as B.. except Rt & Ru have Low & High 

limits respectively. 


_â OUTPUT COMMANDS- 

COMMAND OPERATION 

E Erase Screen 

nrskkk Display kkk characters in literal at rs coordinates 

RZ=0 if no overlap, RZ=1 if displayed patter 
overlaps another. 

DEFkkk Set graphics control. 

kkk=12 normal operation (graphic chars) 

kkk=14 lower case chars 


-LITERAL COMMANDS - 


COMMAND 


Pllllll+kkk] 

NEXTr 

Ar 


Define literal and literal space 

Character display literals <- is carriage return 

1 is reverse field on 
\ is reverse field off 

Hexadecimal literals allow 2 hex nibbles per data 


byte. E.g., "010AFFF2" is 4 data bytes. 

Point to literal on line 11111 ... rAl 

kkk displaces pointer to right within , 

Displace literal pointer to the right by th 
contents of Rr. _ . 

Set display pointer to 5-row pattern for righ 

nibble of Rr. 


A - 2 











CHARACTER OUTPUT- 


COMMAND 

Xkkk 

Ykkk 

Trs 

PRINT# 

PRINTrs 

DATAr 

THENkkk, 


Set cursor X-position to kkk 
Set cursor Y-position to kkk 
Initialize cursor from Rr(X) & Rs(Y) 

Print literal at preset cursor position 

Print literal at cursor position from Rr(X) & Rs(Y) 

Print value of Rr at preset cursor position 


Print literal at kkk(X) & lll(Y) coordinates 
".* is character string to be shown 


- INPUT COMMANDS-- 


CO MMAND 

INPUTr 

READr 

Hr 

GETr 

&kkk 

/kkk 

.kkk 

NOTkkk 


Let Rr=key value (0-15) when RETURN pressed 
(waits for RETURN) 

Get keyboard char into Rr (only one time per 
depression) 

Get keyboard value (0-15) into Rr (only time per 
depression) 

Get keyboard value (0-15) into Rr (instantly) 

Do next instruction if key=kkk, else skip next 
command 

Do next instruction if keyOkkk, else skip next 
command 

Do next instruction if user port bits kkk are all 
on, else skip next command 

Do next instruction if user port bits are not all 
on, else skip next command 


COMMAND 

SGNkkk 

INTkkk 

Sr 

Tr 

WAITS 

WAITT 


-TIMER COMMANDS- 

OPERATION 

Set seconds timer =kkk 
Set 60/sec timer =kkk 
Set seconds timer from Rr 
Set 60/sec timer from Rr 

Wait until second timer =0, then continue 
Wait until sec/60 timer =0, then continue 


COMMAND 

CMDkkk 

CQNTkkk 


- TONE COMMANDS- 


Define pitch of tone = 62500/(kkk+2) 
Sound tone for kkk/60 sec. 


Sound tone for time from Rr 


A - 3 


CONTROL 


k M I S C, 


COMMANDS- 


COMMAND 

STOP 

LIST 

W 

REM 


Halt and return to BASIC 


List line number and registers, 
List registers and continue on 
Remarks 


no stop 
'G' key 


-REGISTBR/LITERAL COMMANDS - 

COMMANDS OPERATION , 

Ur RA thru Rr are unloaded into literal 

Vr RA thru Rr are loaded from literal 

Mr Literal is set to 3-digit decimal value of Rr 


ââ MEMORY PEEK/POKE COMMANDS- 

Rrrnmrnmin Read contents of memory address mmmmm (decimal) into Rr 
Krmmmmm Put Rr contents into memory location mmmmm(decimal) 

POKEmm , ^ex d a ta contained in "." literal into memory 

positions starting at mmmmm(decimal) 


-MACHINE LANGUAGE ROUTINES 

USRmrnmrfm Jump^'to^machine language r outine at mmmmm (decimal). 

Routine must end with RTS (HEX-60) instructi â¢ 


-VIGIL CONTROL COMMANDS- 

SHIFT S Save game program to cassette 

SHIFT D Save game program to diskette 

SHIFT V Save VIGIL program to cassette 

SHIFT Z Save VIGIL program to diskette 

SHIFT K Kill VIGIL program 


_ SPECIAL MEMORY LOCATIONS 

826 Start of VIGIL program . . 
894 TV synchronization control (see program efficiency) 
59464 Pitch control (see tone output) 


A - 4 



















The TINY Pascal System turns your APPLE II or PET micro into a 16-blt P-machine. 
You too can leam the language that is slated to become the successor to BASIC. 
TINY Pascal offers the following: 

* LINE EDITOR to create, modify and maintain source 

* COMPILER to produce P-code, the assembly langauage of the P-machine 

* INTERPRETER to execute the compiled P-code (has TRACE) 

* Structured programmed constructs: CASE-OF-ELSE, WHILE-DO, IF-THEN- 
ELSE, REPEAT-UNTIL, FOR-TO/DOWNTO-DO, BEGIN-END, MEM, CONST, 
VAR ARRAY 


Our new TINY Pascal PLUS+ provides graphics and other builtin functions: 
GRAPHICS, PLOT, POINT, TEXT, INKEY, ABS AND SQR. The PET version supÂ¬ 
ports double density plotting on 40 column screen giving 80 x 50 plot positions. 
The APPLE II version supports LORES and for ROM APPLESOFT owners the 
HIRES graphics plus other features with: COLOR, HGRAPHICS, HCOLOR, 
HPLOT, PDL and TONE. For those who do not require graphics capabilities, you 
may still order our original Tiny Pascal package. 

PET BASIC 4.0 version also available 
TINY Pascal PLUS+ GRAPHICS VERSION- 

PET 32K NEW Roms cassette.$55 

PET 32K NEW Roms diskette.$50 

APPLE II 32K/48K w/DOS 3.2 or 3.3.$50 

TINY Pascal NON-GRAPHICS VERSIONS- 

PET 16K/32K NEW Roms cassette.$40 

PET 16K/32K NEW Roms diskette.$35 

APPLE II w/ROM Applesoft 32K w/DOS.$35 

APPLE II w/RAM Applesoft 48K w/DOS.$35 

USERâS Manual (refundable with software order).$10 

6502 Assembly Listing of INTERPRETER-graphics.$25 

6502Assembly Listing of INTERPRETER-non graphics.. $20 

FREE postage tn U S and CANADA. Orders may Da prepaid of by bankcard (Include card 
number and expiration data) Michigan resident* Include 4% state safes tax. Orders acÂ¬ 
cepted via THE SOURCE CL0652. 


ABACUS SOFTWARE 

P. 0. Box 7211 

Grand Rapids, Michigan 49510 


miinnw 






























