PuMcnpOftingbudwifer 
n—d»d. «nJ rnwnnrig ft« 

HMdquviw* Strain, Oln MJ 

MiragMiwnt and SudQd, ' |!)|i 

1. AGENCY USE ON- > i uan o *ann) 


AD-A236 416 VJ PAG E 

* _.„1, am tnti m IM angtiainiatof i mma 


Form Approved 
OPM No. 0704-0188 




12. REPORT DATE 


*tg to «ma lor malawlng instruction*, aaafcMng aaMing dBm aouroaa gtfharing and mairttMng to dto 
? ottw aapad ot ta colacttxi of HoimaUon, inducing auggaatlona tor inducing Ma burdan, io Waahln^on 
, Su*a 1204. Arington, VA 222024302, and lo to Offiea ol Wonnalon and RaguMwy Aflat*, OWea of 

3. REPORT TYPE AND DATES COVERED 

Final 28 Nov 1991 to 01 Mar 1993 


S. FUNDING NUMB 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR 423.0491 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 


4 TITLE AND SUBTITLE 

IBM Ada 370, Version 1.1.0, IBM 4381 (Host & Target), 901128W1.11092 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 
Wright-Patterson AFB 
Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESSEES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


13. ABSTRACT (Maximum 200 words) 

TeleSoft, IBM Ada 370, Version 1.1.0, Wright-Patterson AFB, IBM 4381 under MVS/XA, Release 3.8 (Host & Target), 
ACVC 1.11. 



14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


15. NUMBER OF PAGES 


16. PRICE CODE 


17. SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18. SECURITY CLASSIFICATION 

UNCLASSIFED 

19. SECURITY CLASSIFICATION 

OF ABSTRACT 

UNCLASSIFIED 

20. LIMITATION OF ABSTRAC 

1 

NSN 7540-01 -280-550 



Standard Form 298, (Rev. 2-89) 


Prescribed by ANSI SW. 239-128 





















Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 28 November 1991. 

Compiler Name and Version: IBM Ada/370, Version 1.1.0 

Host Computer System: IBM 4381 under MVS/XA, Release 3.8 

Target Computer System: IBM 4381 under MVS/XA, Release 3.8 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

901128W1.11092 is awarded to TeleSoft. This certificate expires on 1 March 

1993. 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 



Ada Vayld ajoxftr^r gan ization 
Director, Computer & Software Engineering Division 
Institute for^efense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



Far 

j ORA*I 

! dtic tas 

I 

j Un&.’ir.o , .*. r <cit'd 
! Cities. 

i____ 


i_Dl s t r 1 fcu 11 o n / 

j Avdlliifcl J. 1* y Ci _ 
.’Avail a ad/ 
Dl't ) Special 



5 24 005 








AVF Control Number: AVF-VSR-423.0491 

18 April 1991 
90-06-28-TEL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 901128V1.11092 
TeleSoft 

IBM Ada 370, Version 1.1.0 
IBM 4381 *> IBM 4381 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright Patterson AFB OH 45433-6503 




Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 28 November 1991. 

Compiler Name and Version: IBM Ada/370, Version 1.1.0 

Host Computer System: IBM 4381 under MVS/XA, Release 3.8 

Target Computer System: IBM 4381 under MVS/XA, Release 3.8 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

901128W1.11092 is awarded to TeleSoft. This certificate expires on 1 March 

1993. 


This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Vilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 


45433-6503 


t Ada 

IF Director, 

U Institute for Defense Analyses 
Alexandria VA 22311 


Organization 

uter & Software Engineering Division 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Vashington DC 20301 






DECLARATION OF CONFORMANCE 


Compiler Implementor: TeleSoft 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB, OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.11 

Base Configuration 

Base Compiler Name: IBM Ada/370, Version 1.1.0 
Host Architecture ISA: IBM 4381 

Operating System: MVS/XA Release 3.8 

Target Architecture ISA: IBM 4381 

Operating System: MVS/XA Release 3.8 


Implementor’s Declaration 


I, the undersigned, representing TeleSoft have implemented no deliberate extensions to the Ada 
Language Standard ANSI/MIL-STD-1815A in the compiler listed in this declaration. I declare 
that International Business Machines Corporation is the owner of record of the object code of the 
Ada language compiler listed above and, as such, is responsible for maintaining said compiler in 
conformanceAi\5i>(MIL-STD-1815A. All certificates and registrations for the Ada language 
compiler lisied in this declaration shall be made only in the owner’s corporate name. 



TeleSoft 

Raymond A. Parra, Director, Contracts & Legal 


® ate: —ftj 3 tft-Wvc 


Owner’s Declaration 


I, the undersigned, representing International Business Machines Corporation take full 
responsibility for implementation and maintenance of the Ada compiler listed above, and agree to 
the public disclosure of the final Validation Summary Report. I declare that all of the Ada 
language compilers listed, and their host/target performance are in compliance with the Ada 
Language Standard ANSI/MIL-STD-1815A. 



ditties Corporation 
Yim Chan, Ada Development Manager 


Date: 



, (*j *)0 



CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


The Ada implementation described above vas tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent vith the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance vith the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 




INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECKFILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2 - 3 - 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 

Conformity Fulfillment by a product, process or service of all 
requirements specified. 


1-3 





INTRODUCTION 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 21 November 1990. 


E28005C 

B28006C 

C34006D 

C35702A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 21 tests check for the predefined type LONG_INTEGER: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45612C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 


CD7101F 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LONG_INTEGER, or 
SHORTINTEGER. 

C35508I..J and C35508M..N (4 tests) include enumeration representation 
clauses for boolean types in which the specified values are other than 
(FALSE -> 0, TRUE => 1); this implementation does not support a change 
in representation for boolean types. (See section 2.3.) 

C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SH0RTFL0AT. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT. 

C45423A, C45523A, and C45622A check that if MACHINEOVERFLOWS is TRUE 
and the results of various floating-point operations lie outside the 
range of the base type, then the proper exception is raised. For this 
implementation, MACHINE_0VERFL0VS is FALSE. 

C45531M..P (4 tests) and C45532M..P (4 tests) check fixed-point 
operations for types that require a SYSTEM.MAX_MANTISSA of 47 or 
greater; for this implementation, MAX_MANTISSA is less than 47. 

C86001F recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. For this implementation, the package TEXTIO 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

C96005B checks for values of type DURATION'BASE that are outside the 
range of DURATION. There are no such values for this implementation. 


2-2 




IMPLEMENTATION DEPENDENCIES 


CA2009C, CA2009F, BC3204C, and BC3205D instantiate generic units before 
their bodies are compiled; this implementation creates a dependence on 
generic units as allowed by AI-00408 and AI-00530 such that the 
compilation of the generic unit bodies makes the instantiating units 
obsolete. 

LA3004A, LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F check for 
pragma INLINE for procedures and functions. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions. 

The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method: 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102V 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


AE2101H, EE2401D, and EE2401G use instantiations of package DIRECTIO 
with unconstrained array types and record types with discriminants 
without defaults. These instantiations are rejected by this compiler. 


2-3 











IMPLEMENTATION DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and text 
files when multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERROR is raised when this 
association is attempted. 

CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 

CE2111D CE2111H CE3111B CE3111D..E CE3114B 

CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This implementation does 
not restrict file capacity. 

CE2403A checks that WRITE raises USE_ERR0R if the capacity of the 
external file is exceeded for DIRECT_IO. This implementation does not 
restrict file capacity. 

CE3413B checks that PAGE raises LAY0UT_ERR0R when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 29 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

BA1001A BA2001C BA2001E BA3006A BA3006B 

BA3007B BA3008A BA3008B BA3013A 


C35508I..J and C35508M..N (4 tests) were graded inapplicable by Evaluation 
Modification as directed by the AVO. These tests attempt to change the 
representation of a boolean type. The AVO ruled that, in consideration of 
the particular nature of boolean types and the operations that are defined 
for the type and for arrays of the type, a change of representation need 
not be supported; the ARG will address this issue in Commentary AI-00564. 


C52008B was graded passed by Test Modifications as directed by the AVO. 

This test uses a record type with discriminants with defaults and that has 
array components whose size depends on the values of some discriminants of 
type INTEGER. On compilation of the type declaration, this implementation 
raises NUMERIC_ERR0R as it attempts to calculate the maximum possible size 
for objects of the type. Although this behavior is a violation of the Ada 
standard, the AVO ruled that the implementation be accepted for validation 
in consideration of intended changes to the standard to allow for 
compile-time detection of run-time error conditions. The test was modified 


2-4 





IMPLEMENTATION DEPENDENCIES 


to declare a constrained subtype of INTEGER, and discriminant declarations 
in lines 17 and 25 vere modified to use that subtype; the lines are given 
below: 


16 SUBTYPE SUBINT IS INTEGER RANGE -128 .. 127; 

17 TYPE REC1(D1,D2 : SUBINT) IS 

25 TYPE REC2(D1,D2,D3,D4 : SUBINT : = 0) IS 


CD1009A, CD1009I, CD1C03A, CD2A21C, CD2A24A, and CD2A31A..C (3 tests) were 
graded passed by Evaluation Modification as directed by the AVO. These 
tests use instantiations of the support procedure Length_Check, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LengthCheck—i.e, the allowed Report.Failed messages have the 
general form: 


" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


EE3301B, EE3405B, and EE3410F were graded passed by Evaluation Modification 
as directed by the AVO. These tests check certain I/O operations on the 
current default output file, including standard output. This 
implementation outputs the ASCII form-feed character which has no effect on 
the standard IBM output devices; in general, there is no common form-feed 
mechanism for the devices. Thus, the printed output from this test did not 
contain the expected page breaks. The AVO ruled that these tests should be 
considered passed if none of the tests' internal checks was failed (i.e., 
if the tests report "TENTATIVELY PASSED"). 


2-5 








CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see: 

IBM Canada, Ltd 
844 Don Mills Road 
North York, Ontario 
Canada M3C IB7 
ATTN: Antony Niro 

31/257/844/TOR 

For a point of contact for sales information about this Ada implementation 
system, see: 


IBM Canada, Ltd 
844 Don Mills Road 
North York, Ontario 
Canada M3C IB7 
ATTN: Yim Chan 

31/257/844/TOR 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 


3-1 




PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 3772 

b) Total Number of Withdrawn Tests 83 

c) Processed Inapplicable Tests 114 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 315 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler vas tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler was 
tested, the tests listed in section 2.1 had been withdrawn because of test 
errors. The AVF determined that 315 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 were also processed. 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
tape were loaded directly onto the host computer. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 


3-2 







PROCESSING INFORMATION 


Testing vas performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


1. CLEAN 

2. ERROR(LIST) 

3. LIST(ERRl) 

4. RUN(TEXT) 


Test output, compiler and linker listings, and job logs were captured 
on magnetic tape and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in tvo tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$BIG_IDl (1..V-1 => 'A', V -> '1') 

$BIG_ID2 (1..V-1 «> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 «> 'A') & '4' & 

(1..V-1-V/2 «> 'A') 

$BIG_INT_LIT (1..V-3 -=> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

SBIGSTRING2 & (1..V-1-V/2 *> 'A') & '1' & 

SBLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 => 'A') & 


A-l 






MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values: 


Macro Parameter Macro Value 


$MAX_IN_LEN 

200 

$ACC_SIZE 

32 

SALIGNMENT 

4 

$COUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

16777215 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

IBM370 

SDELTADOC 

2#1.0#E~31 

$ ENTRY_ADDRE S S 

ENT_ADDRESS 

$ ENTRYADDRE SSI 

ENT_ ADDRESSI 

$ENTRY_ADDRESS2 

ENT_ADDRESS2 

$FIELD_LAST 

1000 

$FILE_TERMINATOR 

9 9 

SFIXEDNAME 

NO_SUCH_TYPE 

SFLOATNAME 

NO_SUCH_TYPE 

$FORM_STRING 

9 9 

$F0RM_STRING2 

"CANN0T_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 

86401.0 

SGREATER THAN DURATION BASE LAST 

131073.0 

$GREATER_THAN_FLOAT_ 

BASE LAST 

7.J370052E+75 

$GREATER_THAN_FLOAT_ 

SAFE LARGE 

7.537004E+75 


A-2 








MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 

7.237E+75 

$HIGH_PRIORITY 255 

$ILLEGAL EXTERNAL_FILE_NAME1 

"BADCHAR*V r 

$ILLEGAL_EXTERNAL_FILE NAME2 

¥ BAD-CHARS! 

$INAPPROPRIATE LINE_LENGTH 

1029 

$INAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 'PRAGMA INCLUDE ("A28006D1.TST");' 

$INCLUDE_PRAGMA2 'PRAGMA INCLUDE ("B28006F1.TST");' 

$INTEGER_FIRST -2147483648 

$INTEGERLAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -86401.0 

$LESS THAN DURATION BASE FIRST 
" _ 13T073.0 

$LINE_TERMINATOR ' ' 

$LOW_PRIORITY 0 

SMACHINECODE STATEMENT 

NULL; 

$MACHINE_CODE_TYPE NO_SUCH_TYPE 

SMANTISSADOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483647 

$MIN INT 


-2147483648 




MACRO PARAMETERS 


$NAME 

NO_SUCHJTYPE_ 

AVAILABLE 

$NAME_LIST 

mc68000, anuyk.44,ibm370 

$NAME_SPECIFICATIONl 

"X2120A DATA 

Al" 

$NAME_SPECIFICATION2 

"X2120B DATA 

Al" 

$NAME_SPECIFICATION3 

"X3119A DATA 

Al" 

$NEG_BASED_INT 

16#FFFFFFFE# 


$NEV_MEM_SIZE 

16777215 


$NEV_STOR_UNIT 

8 


$NEW_SYS_NAME 

IBM370 


SPAGETERMINATOR 

t t 


$RECORD_DEFINITION 

"NEW INTEGER! 

, It 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

STASKSIZE 

32 

' 

$TASK_STORAGE_SIZE 

1024 


STICK 

0.000001 


SVARIABLEADDRESS 

VARADDRESS 


SVARIABLEADDRESS1 

VAR_ADDRESS1 


SVARIABLEADDRESS2 

VAR_ADDRESS2 


$YOUR PRAGMA 

PRIORITY 



A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options o£ this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this Appendix are to compiler documentation and 
not to this report. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this Appendix are to linker documentation and not 
to this report. 


B-l 






24OCT90 


Page -26- 


ATTACHMENT G 

COMPILER OPTION INFORMATION 


"PKG870" is the command to invoke the compiler. The general format is: 
PGK370 dsname {options} 

options: 

CLEAN 

ERROR(LIST) 

LIST(ERRI) 

RUN(TEXT) 


PKG870 COMMAND 

The PKG370 command is used to compile more than one Ada source file in a single compilation 
session. The PKG370 command accepts either an Ada program file or a file which contains a 
filelist of files containing compilation units. 

Dsname specifies the file to be compiled. If ftype is not FILELIST, fname, ftype, and fmode is 
considered to be an Ada source file. 

The CLEAN option is used to erase all files derived from a compilation after a main program 
has completed compilation and execution. These files include object files, listing files, error files, 
and execution produced files. 

The ERROR(LIST) option creates a listing file only when errors are encountered. The file 
contains compile-time error messages interspersed with the source code. 

The LIST(ERRI) option produces a compilation source listing. Semantic errors, syntax errors, 
and warnings are interspersed. 

The RUN(TEXT) option causes the program to load and execute. It is assumed that the 
program displays the results on the console. The output of the entire compilation and execution 
is copied to a dataset. This dataset is examined to determine whether the program was executed 
successfully. The possible results are: 

PASSED== Indicates the program passed 

FAILED"" 11 Indicates the program failed 

NOT-APPLICABLE++ Implies the program passed 
This is compatible with the error reporting used by AC VC tests. 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain alloved 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2_147_483 648 .. 2_147_483_647; 
type SHORTINTEGER is range -32_768 .. 32_767; 

type FLOAT is digits 6 range -7.23701E+75 .. 7.23701E+75; 
type LONGFLOAT is digits 15 range -7.23700557733225E+75 

.. 7.23700557733225E+75; 

type DURATION is delta 2#1.0#E-14 range -86400.0 .. 86400.0; 


end STANDARD; 




25OCT90 


Page -2- 


ATTACHMENT A 
APPENDIX F 

OF THE LANGUAGE REFERENCE MANUAL 


The Ada language definition allows for certain target dependencies in a controlled manner. 
This section, called Appendix F as prescribed in the LRM, describes implementation-dependent 
characteristics of the IBM Ada/370, Version 1.1.0 running under CMS or MVS. 

1. Implementation-Defined Pragmas 

PRAGMA 1NTERFACE( Assembly, <subroutine_name> ); 

PRAGMA INTERFACE( Assembler, <subroutine_name> ); 

PRAGMA INTERFACE( Fortran, <subroutine name> ); 

PRAGMA SUPPRESS ALL; 

to cause Pragma SUPPRESS to be invoked simultaneously for all the following 
conditionnames: accesscheck, discriminantcheck, indexcheck, length check, 

divisioncheck, elaboration check, and storage check. 

PRAGMA NO SUPPRESS ( <identifier> ); 

to prevent the suppression of checks within a particular scope. Particularly useful when a 
section of code that relies upon predefined checks executes correctly, but, for performance 
reasons, the suppression of checks in the rest of the code is needed. 

PRAGMA COMMENT (string literal); 

embeds stringliteral into object code. 

PRAGMA IMAGES (enumeration type, <immediate>| <deferred>); 

generates a table of images for the enumeration type, deferred causes the table to be 
generated only if the enumeration type is used in a compilation unit. 

PRAGMA INTERFACE INFORMATION 

(<name>, 

<link_name>, 

< mechanism >, 

< parameters >, 

< clobbered _regs >); 

when used in association with pragma INTERFACE, will provide access to any routine 
whose name can be specified by an Ada string literal. 

PRAGMA PRESERVE LAYOUT ( ON => <Record_Type_Name> ); 

forces the compiler to maintain the Ada source order of components of a given record type, 
thereby preventing the compiler from performing this record layout optimization. 

♦PRAGMA OS TASK (priority); 

to specify the relative urgency of each MVS task created. 

♦PRAGMA ALLOCATION DATA 





25OCT90 


Page -3- 


(<access_type>, 

< residence mode >, 

<allocation_duration>, 

< subpool_number>, 

<discrete_user_data>); 

to associate MVS virtual storage attributes with an Ada access type. 

Note that PRAGMA OS TASK and PRAGMA ALLOCATION DATA are effective only when 
compiling for an MVS target. Both pragmas require that an MVS runtime be present. 


2. Implementation-Defined Attributes 

2.1. Integer Type Attributes 

Extended Image ( Item, <Width>, <Base>, <Based>, <Space IF Positive> ); 

to return the image associated with Item as defined in Text_IO.Integer_IO. The TextIO 
definition states that the value of Item is an integer literal with no underlines, no exponent, 
no leading zeroes (but a single zero for the zero value), and a minus sign if negative. 

ExtendedValue (Item); 

to return the value associated with Item as defined in Text IO.Integer IO. The Text IO 
definition states that given a string, it reads an integer value from the beginning of the 
string. The value returned corresponds to the sequence input. 

Extended Width ( <Base>, <Based>, <Space_IF_Positive> ); 
to return the width for a subtype specified. 

2.2. Enumeration Type Attributes 
Extended Image ( Item, <Width>, <Uppercase>); 

to return the image associated with Item as defined in Text IO. Enumeration IO. The 
Text IO definition states that given an enumeration literal, it will output the value of the 
enumeration literal (either an identifier or a character literal). The character case 
parameter is ignored for character literals. 

Extended Value ( Item ); 

to return the image associated with Item as defined in Text_IO.Enumeration_IO. The 
Text IO definition states that it reads an enumeration value from the beginning of the given 
string and returns the value of the enumeration literal that corresponds to the sequence 
input. 

Extended Width; 

to return the width for a specified subtype. 

2.3. Floating Point Attributes 

Extended Image ( Item, <Fore>, <Aft>, <Exp>, <Base>, <Based> ); 

to return the image associated with Item as defined in Text_IO.Float lO. The Text IO 
definition states that it outputs the value of the parameter Item as a decimal literal with 
the format defined by the other parameters. If the value is negative, a minus sign is 
included in the integer part of the value of Item. If Exp is 0, the integer part of the output 








26OCT90 


Page -4- 


has as many digits as are needed to represent the integer part of the value of Item or is zero 
if the value of Item has no integer part. 

Ex tended Value ( Item ); 

to return the value associated with Item as defined in Text_10.Float IO. The Text JO 
definition states that it skips any leading zeroes, then reads a plus or minus sign if present, 
then reads the string according to the syntax of a real literal. The return value is that 
which corresponds to the sequence input. 

Extended Digits ( <Base> ); 

to return the number of digits using base in the mantissa of model numbers of the specified 
subtype. 

2.4. Fixed Point Attributes 

Extendedlmage ( Item, <Fore>, <Aft>, <Exp>, <Base>, <Based> ); 

to return the image associated with Item as defined in Text_IO.Fixed_IO. The TextIO 
definition states that it outputs the value of the parameter Item as a decimal literal with 
the format defined by the other parameters. If the value is negative, a minus sign is 
included in the integer part of the value of Item. If Exp is 0, the integer part of the output 
has as many digits as are needed to represent the integer part of the value of Item or is zero 
if the value of Item has no integer part. 

Extended Value ( Image ); 

to return the value associated with Item as defined in Text lO.Fixed lO. The Text IO 
definition states that it skips any leading zeroes, reads a plus or minus sign if present, then 
reads the string according to the syntax of a real literal. The return value is that which 
corresponds to the sequence input. 

Extended Fore ( <Base>, <Based> ); 

to return the minimum number of characters required for the integer part of the based 
representation specified. 

Extended Aft ( <Base>, <Based> ); 

to return the minimum number of characters required for the fractional part of the based 
representation specified. 

3. Package SYSTEM 

The current specification of package SYSTEM is provided below. 


With Unchecked Conversion; 
PACKAGE System IS 

- CUSTOMIZABLE VALUES 


TYPE Name IS (MC68000, ANUYK44, IBM370); 
















25OCT90 


Page -5- 


System Name : CONSTANT name := IBM370; 

Memory Size : CONSTANT := (2 ** 24)-l; 
Tick : CONSTANT := 1.0 / (10 ** 6); 


- NON-CUSTOMIZABLE, IMPLEMENTATION-DEPENDENT VALUES 


Storage Unit : CONSTANT := 8; 

Min Int _ : CONSTANT := -(2 ** 31); 

Max Int : CONSTANT := (2 ** 31) - 1; 

Max Digits : CONSTANT := 15; 

MaxMantissa : CONSTANT := 31; 

Fine Delta : CONSTANT := 1.0 / (2 ** Max Mantissa ); 
Subtype Priority IS Integer RANGE 0 .. 255; 


- ADDRESS TYPE SUPPORT 


type Memory is private; 
type Address is access Memory; 

NullAddress : Constant Address := null; 

type AddressValue is RANGE -(2**31) .. (2**31)-1; 

Hex_80000000 : constant Address Value := - 16#80000000#; 

Hex_90000000 : constant Address Value := - 16#70000000#; 

Hex AOOOOOOO : constant Address Value := - 16#60000000#; 

Hex BOOOOOOO : constant Address Value := - 16#50000000#; 

Hex COOOOOOO : constant Address Value := - 16#40000000#; 

Hex DOOOOOOO : constant Address_Value := - 16#30000000#; 

Hex EOOOOOOO : constant Address Value := - 16#20000000#; 

Hex FOOOOOOO : constant Address_Value := - 16# 10000000#; 

function Location is new Unchecked_Conversion (Address_Value, Address); 

function Label (Name: String) return Address; 
pragma Interface (META, Label); 


- CALL SUPPORT 


type Subprogram Value IS 
















25OCT90 


Page -6- 


record 

Procaddr : Address; 

Parentframe : Address; 
end record; 

Max Object Size : CONSTANT := Maxlnt; 

Max Record Count : CONSTANT := Max_Int; 

Max Text lo Count : CONSTANT := Max_Int-l; 

MaxTextloField : CONSTANT := 1000; 

private 

type Memory is 
record 
null; 

end record; 
end SYSTEM; 

4. Representation Clauses 

This implementation supports address, length, enumeration, and record representation 
clauses with the following exceptions: 

Address clauses are not supported for package, for entry, for tasktype, for 
subprograms. 

Enumeration clauses are not supported for boolean representation clauses. 

The size in bits of representation specified records is rounded up to the next highest multiple 
of 8, meaning that the object of a representation specified record with 25 bits will actually occupy 
32 bits. 

Non-supported clauses are rejected at compile time. 

5. Implementation-Generated Names 

There are no implementation-generated names denoting implementation-dependent 
components. Names generated by the compiler shall not interfere with programmer-defined 
names. 

6. Address Clause Expression Interpretation 

Expressions that appear in Address clauses are interpreted as virtual memory addresses. 

7. Unchecked Conversion Restrictions 

Unchecked Conversion is allowed except when the target data subtype is an unconstrained 
array or record type. If the size of the source and target are static and equal, the compiler will 
perform a bitwise copy of data from the source object to the target object. 

Where the sizes of source and target differ, the following rules will apply: 

• If the size of the source is greater than the size of the target, the high address bits will 
be truncated in the conversion. 









25OCT90 


Page -7- 


• If the size of the source is less than the size of the target, the source will be moved into 
the low address bits of the target. 

The compiler will issue a warning when Unchecked_Conversion is instantiated with unequal 
sizes for source and target subtype. Unchecked_Conversion between objects of different or non¬ 
static sizes will usually produce less efficient code and should be avoided, if possible. 

8. Implementation-Dependent Characteristics of the I/O Packages 

• Sequential_IO, Direct_IO, and Text_10 are supported. 

• Low_Level_IO is not supported. 

• Unconstrained array types and unconstrained types with discriminants may not be 
instantiated for I/O. 

• File names follow the conventions and restrictions of the target operating system. 

• In TextIO, the type Field is defined as follows: subtype Field is integer range 

0 .. 1000 ; 

• In TextIO, the type Count is defined as follows: type Count is range 
0..2 147 483 646; 








