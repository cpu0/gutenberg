Public raponing burden 
needed, and reMeering t 
Haadquadere Service. I 
Management and Budg 


1. AGENCY USE ONLY (Leave Blank) 


4. TITLE AND SUBTITLE 


AD-A260 061 




NPAGE 


Form Approved 
OPMNo. 0704 0188 




I 


2. REPORT DATE 


udingtM tune lor levleiiiring incinictiona, aearcblng exieling data aourcaa gathering and 
ny other aapeci a( (tie oaketion ol Monnallon. Including auggaclione lor reducing thie burden, to Waehingein 
ly. Sute 1204. Arlnguxi. VA 22202-4302. and to die Ollica o( Mormation and Ragulalory Allan. Ollice ol 


3. REPORT TYPE AND DATES COVERED 

Final: 05 Oct 92 


Validation Summary Report; Verdix Corporation, VADS Silicon Graphics Self, VAda 
110-6464, Version 6.2, Silicon Graphics IRIS 4D/440 under IRIX 4.0.1 (Host & 
Target), 921004W1.11291 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND AOORESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



e. PERFORMING ORGANIZATION 
REPORT NUMBER 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS<ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


10. SPONSORINGA^ONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS Silicon Graphics Self, VAda 110-6464, Version 6.2, Silicon Graphics IRIS 4D/440 under IRIX 
4.0.1 (Host & Target), ACVC 1.11. 


S DTIC 

»-«CTl 

JflN2ri993 


% 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURPTY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 































AVF Control Number; AVF-VSR-547-1092 
Date VSR Complete: 5 October 1992 

92-06-23-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11291 
Verdix Corporation 

VADS Silicon Graphics Self, VAda 110-6464, Version 6.2 
Silicon Graphics IRIS 4D/440 under IRIX 4.0.1 


(FIN?^) 


Prepared By; 

Ada_Validation_Faci1i ty 
645 C-CSG/SCSL 

Wright-Patterson AFB OT 45433-6503 


93-01443 

lllllllll 


93 t ?,6 0 68 







Certificate Infonoation 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 4 October 1992. 


Conpiler Name and Version: 
Host Ccmputer System: 
Target Cooputer System: 
Customer Agreement Number: 


VAOS Silicon Gra^^ics Self, 
VAda-110'-6464, Version 6.2 

Silicon Graphics IRIS 4D/440 
under IRIX 4.0.1 

Silicon Graphics IRIS 4D/440 
under IRIX 4.0.1 

92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environroent. 

As a result of this validation effort. Validation Certificate 

921004W1.11291 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/MIL-STD-1815B. 

This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
645 C-CSG/SCSL 

Wright-Patterson AFB CW 45433-6503 



Directoi 
Institute toi 
Alexandria VA 


Organization 

Iter and Software Engineering Division 
Defense Analyses 
22311 


DTIC QUALITY IKGFECTED 5 


Ada^oint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Aeeassloa For 

RTIS 6RAAX 
DTIC TAB □ 

Unaiuiounood 0 

Just Lfleat 1, , 


PlBtr Ibu tlom/ 
Availab i lity Oe<<jjt 
jArall obA/w 


mat 


Spaolal, 








DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 
Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version: VADS Silicon Graphics Self, VAda-110-6464 

Version 6.2 

Host Computer System: Silicon Graphics IRIS 4D/440 

IRIX 4.0.1 


Target Computer System: Same as host 


Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 








TABLE OF CX3NTENTS 


CHAPTER 1 INTROTOCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDEICIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MCHDIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATIOI SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 













CHAPTER 1 


INTRODUCTION 


Itie Ada inplementation described above was tested according to the Ada 
Validation Procedures (Pro90] against the Ada Standard [Ada83] using the 
current Ada Confiiler Validation CapeUaility (ACVC). This Vali^tion Sunnary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public item the AVF vdiich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vdiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRMXJCTION 


1.2 REFEREl^CES 

[Ada83] Reference Meuiual for the Ada Proqraiming L 2 uiguage/ 
ANSI/MIL-STD-1815 a, Febnxary 1983 and IM 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

(UG89] Ada Ccmpiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executedsle. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_F1LE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the ccmpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Stauidard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 







INTRCXXJCTION 


For each Ada inpleroentation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Stemdard. 


1.4 DEFINITIC*^ OF TERMS 

Ada Compiler Hie software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form auid 
execution thereof. 

Ada Compiler The means for testing compliamce of Ada in?)lementations. 
Validation consisting of the test suite, the support prograuns, the ACVC 

Capability user's guide and the tenplate for the validation svamnary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body v^ich provides policy eind 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the con^jliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ediility of the implementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A functional unit, consisting of one or more conqputers and 

System associated software, that uses coraroon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data m^mipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stemd-alone unit or may consist of 
several inter-connected units. 


1-3 



INTFODUCTIW 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individvial or corporate entity vdio enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A computer system v^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Leuiguage Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of progreuns auid that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware inplementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The con^iler of a validated Ada inplementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada ccmpiler to 
the Ada programming language and of issuing a certificate 
for this inpleraentation. 

A test found to be incorrect and not used in conformity 
testing, A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A4LA 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE21071 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Comroentaries and ccarroonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inappliceJsle for 
the reasons indicated; references to Ada Crarroentaries are included as 
appropriate. 


2-1 




IMPLENEmATIGN DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits them SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type IX]NG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C455n3C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LCMS_FLQAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
in^ilementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, NAX_MANTISSA is less them 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINE_OVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this in?)lementation does not support such 
sizes. 


2-2 




IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cemnot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERR0R if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USEERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this inpleraentation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Traplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 





INPLENENIATIGN DEPENDENCIES 


2.3 TEST MODIFICATIOJS 

Modifications (see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Steuidard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B380C9B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLQAT'FIRST..FLQAT'IAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe nvnnbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, CD2A31A. .C (3 tests) were 
graded passed by Evaluation Modification as directed by the AVO. These 
tests use instantiations of the support procedure L£NGTH_CHECK, v4iich uses 
Uncheclced_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGra_CHECK—i.e, the allowed Report.Failed messages have 
the general form; 

" * CHECK ON REPRESENTATIOJ FOR <TYPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 


2-4 




CHAPTER 


3 


PRCXTESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information adx3ut this Ada implementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NW Conpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inpleroentation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is a^^licable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's meucimum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 





PROCESSING INFORMATION 


a) Total Number of J^iplicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) NOn-Processed I/O Tests 

e) NOn-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+bff) 


3.3 TEST EXECUTIOJ 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sim Workstation emd copied over Ethernet 
to the host con^ter. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Testing was performed using command scripts provided by the custcmner and 
reviewed by the validation team. See Appendix B for a ccooplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, conpiler emd linker listings, emd job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89}. Itie 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the meociraum input-line length, vdiich is 
the value for $MAX_IN_len— also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_1N_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 — Value of V 

(1..V-1 -> 'A', V •> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 »> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1» & 
(1..V-20 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16;" & (1..V-7 -> '0') & "F.E;" 


A-1 






Nj^CBO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_S1ZE 

32 

$ALIGNNE34T 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

SGI_SELF_SGI_THR 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_Ara)RESS 

SYSTEM. •'+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r $ 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$PORM_STRING 

ft II 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 

100_000.00 


$GREATER THAN DURATION BASE LAST 

T0_00l3_000 

$GREATER THAN FLOAT BASE LAST 

l.lE+308 

$GREATER lUAN FLOAT SAFE LAi^E 

5.TJE307 


A-2 





MACRO PARAMETERS 


$GREATER_'IHAN_SHORT FLOAT SAFE LARGE 

~ 9.0E37 

$Hiai_PRIORITy 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

■Villegal/file_neuDe/2{ ]$%FILE1 .DAT" 

$ILLEGAL EXTERNAL_FILE NAME2 

■Villegal/file_naine/2{ ]$%FILE2.DAT" 

$INAPPROPRIATE_LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

~ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN_DURATION_BASE FIRST 

-1U_000__000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CCX)E_STATEME2gT 

CODE 0MOP -> NOP); 

$MACHINE_CODE_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME tiny_intex;er 

A-3 





MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATICNl 

$NAME_SPECIFICATICN2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERM1NAT0R 

$RECORD_DEFINITIC»I 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$T1CK 

$VARIABLE_ADDRESS 

$VARIABLE_ADI^RESS1 

$VARIABLE_ADDRESS2 


SG1_SELF_SGI_THR 
/DBai l/val/c/e/X2120A 
/taailAal/c/e/X2120B 
/1nailAal/cA/X3119A 
16»F000000E« 

16_777_216 

8 

SGI_SELF_SGI_THR 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; EM) RECORD 

CODE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR 3'AC«)RESS 


$YOUR PRAGMA 


PRAGMA PASSIVE 


APPE34DIX B 


COMPILATION SYSTEM OPTIONS 


The conpiler options of this Ada inplementation, as described in this 
appendix, are provided by the custcxner. Unless specifically noted 
otherwise, references in this appendix are to coopiler documentation emd 
not to this report. 


ada - invoke the Ada compiler 
SYNTAX 

ada (options] (source_file]... (object_file.oJ... 

DESCRIPTION 

The ccminand ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

By default, ada produces only object and net files. If the 
-N option is used, the compiler autcxnatically invokes a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Ccximand line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada conmand in any 
VADS location/bin on a system will execute the correct 
compiler ccmponents based upon visible library directives. 


B-1 




COMPILATICN SYSTEM OPTIC3NS 


the option -sh is provided to print the name of the 
ccnponents actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

OPTIC3NS 

-# identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA PREPROCESSOR REFERENCE. 

-A (disassemble) disassemble the units in the source file after 
ccxnpiling them. -A can )3e followed Isy arguments that further 
define the disassend^ly display (e.g. -Aa, -Ab, -Ad, -Af, -Al, -As) 

a add hexadecimal display of instruction bytes to disassendsly 

listing 

b disassemble the unit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file ''file_naffle.das” 

s disassemble the unit spec 

-a file_name (archive) Treat file_name as an object 
archive file created Isy ar. Since some arcliive files end 
with .a, -a is used to distinguish archive files from Ada 
source files. 

-DG (debug flag) Force frong end to write out the gnrx.lib 
file in ASCII format. To use this option, you must 
ccx^pile a file that changes the gnrx.lib file. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marl(ing any defined units as unconf}iled. The -d option is 
used kjy a.ma)(e to establish dependencies amcmg new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only c»ie -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages can 
be used as input to a.error 

-el (error listing) Intersperse error messages among source 




COMPIIATICW SYSTEM OPTIONS 


lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERR^_EDIT0R. (If ERR^_EDITOR is 
defined, the environment variedile ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search coninand that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invoiced. 

-K (keep) Keep the intermediate language (IL) file 
prcxhiced by the compiler front end. The IL file will be 
placed in the .objects directory, with the file neune 
Ada_source.i 

-L library_name (library) Operate in VADS library 
library_name (Default: cnarrent working directory) 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file athreviation.) 

For a description of the file abbreviations, see also 
Operating system docnjroentation, ld(l). 

-M unit_naroe (main) ProcKice an executable program by 
linking the named unit as the main program. unit_naroe must 
already be ccxnpiled. It must be either a parameterless 
procedure or a parameterless function returning an integer. 

The executable program will be named a.out unless overridden 
with the -o option. 

-M source_f.1.1e (main) Prcxhice an executable program by 
ccxnpiling and linking source_file. The main wiit of the 
program is assumed to be the rcxit name of the .a file (for 
foo.a the unit is foo). Only one .a file may be preceded Ijy 
-N. The executable program will be named a.cTut (self-hosted) or 
a.vox (cross-development) unless overricJden with the -o option. 

-o executable file (cjutput) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-0 full optimization 


B-3 




aWPIIATION SYSTEM OPTIONS 


-OO prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting frcan loops 

-05 hoisting from loops but more passes (emd instruction 
scheduling, if available) 

-06 hoisting frcmt loops with maximum passes (and instruction 
scheduling, if available) 

-07 hoisting ftam loops and branches (and instruction) 
scheduling, if available) 

-08 hoisting from loops and branches, more passes (and 
instruction scheduling, if available) 

-09 hoisting from loops and branches, maximum passes (and 
instruction scheduling, if available) 

Hoisting from br 2 uiches {and cases alternatives) can be slow 
and does not always provide significant performeuice gains so 
it can be suppressed. 

For more information about optimization, see COMPILING AEA 
PROGRAMS, Conpiler Optimizations. See also pragma 
OPTIMI ZE_CCX)E (OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) ^ply pragma SUPPRESS to the entire 
compilation for all suppressible checks. (See also pragma 
SUPPRESS(ALL_CHECKS). 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date and time 
of compilation, name of file compiled, cooinand input line, 
total compilation time, and error summary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 


See also a.das, a.db, a.error, a.Id, a.mklib, and Operating 
System reference documentation for the ld(l) utility. 

DIAGNOSTICS 

The diagnostics produced by the VADS compiler are intended 


B-4 





COMPILATION SYSTEM OPTIONS 


to be self-explanatory. Most refer to the RM. Each RM 
reference includes a section number and optionally^ a paragraph 
number enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation auid not 
to this report. 


a.Id - prelinker 
SYNTAX 

a.Id [options] unit_name [ld_options} 

OPTIONS 

-DX (debug) Debug memory overflow (use in cases v^ere 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unitjname as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress 
execution. 

DESCRIPTION 

a.Id collects the object files needed to make unit_name a main 
program and calls the UNIX linker ld(l) to link together all Ada 


B-5 




CCTIPILATION SYSTEM OPTIOIS 


and other language objects required to produce an executable image 
in a.out (self-hosted) or a.vox (cross- development). unit_nanie is 
the main program and must name a non-generic subprogram. If unit_name 
is a function, it must return a value of the type STANDARD.INTEGER. 

This integer result will be passed baclt to the UNIX shell as the status 
code of the execution. The utility uses the net files produced by the Ada 
compiler to check dependency information, a.Id produces an exception 
mapping table euid a unit eleiboration table emd passes this information 
to the linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no longer 
have exception taibles. 

a.Id reads instructions for generating executedsles from the ada.lib file 
in the VADS libraries on the search list. Besides information generated 
by the compiler, these directives also include WITOn directives that 
allow the automatic linking of object modules conpiled from other 
languages or Ada object modules not named in context clauses in the Ada 
source. Any nvunber of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The directives 
are recorded in the library's ada.lib file and have the following form. 


WITHl:LINK:object_file: 
WITH2:LINK;archive file: 


WITHn directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITHn directive in a library 
later in the library search list. 

Use the tool a.info to change or report library directives in the 
current library. 

All arguments after unit_name are passed on to the linker. These may 
be options for it, archive libraries, library ed^breviations, or 
object files. 

VADS_location/bin/a.ld is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS compilers to exist on the same host. The -sh 
option prints the name of the actual executable file. 


FILES AND DIRECTORIES 


a.out/a.vox 
.nets 

•objects/* 

VADS 1 oca ti on/s teuidard/* 


default output file 

Ada DIANA net files directory 

Ada object files 

startup and standard library routines 


DIAOJOSTICS 


B-6 



COMPILATION SYSTEM OPTIONS 


Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 


B-7 




APPE>]D1X C 

APPENDIX F OF 'HIE Ada STANDARD 


Itje only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in CJiapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vdiich 
are not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308..1.79769313486232E+308; 
type SHORT_FLQAT is digits 6 rauige -3.40282E+38 .. 3.40282E+38; 

type DURATIW is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 






APPENDIX F OF TE!E Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINE_(»JLY Pragma 

The lNLlNE_a]LY pragma, v^en used in the same way as pragma 
INLINE, indicates to the con^iler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted euid an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefines Ada packages, but provides no user access. It is 
used only to implement code bodies for which no actual Ada 
body can be provided, for example the MACHlNE_CODE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instauitiations of the same generic. 
\^en the second argument is FALSE each inst 2 mtiation will 
get a lonique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple- 


C-2 





APPENDIX F OF THE Ada STANDARD 


mentation and has the same effect as SHARE_CC®E. It is 
included for compatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atten^jt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to cin object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argftjment. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the scune package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constemt, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers W or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that in??licit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to te generated. 
The default is CX4. 


1.8. OPTIMIZE_ca)E Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 



APPENDIX F OF THE Ada STANDARD 


merit. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the conpiler. The default is ON. When OFF is 
specified, the ccmqpiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inqplemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is in^lemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in i^pendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.7. NON_REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 


C-4 




APPENDIX F OF THE Ada STANDARD 


2.8. NOT_ELABORATED 

This pragnva can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced fron a language 
other than Ada. Ihe presence of this pragma su{^resses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared inm^iately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. 1 \. is possible that the statements in a 
task body will prevent tiie intended optimization, in these 
cases a warning will be generated at compile time emd will 
raise TASRING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.14. SHARED 

This pragma is recognized by the implementation but has no 
efff-'t. 


C-5 




APPE34DIX F OF THE Ada STANDARD 


2.15. STORAGE_UNIT 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

Ihis pragma is implemented as described, except that 
DIVISICX4 CHEG( and in some cases OVERFLCW_CHEac cannot be 
supressed. 

2.17. SySTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CX)DE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


— Copyright 1992 Verdix Corporation 


C-6 




APPEia}IX F OF THE Ada STANDMO 


with UNSIGNED_TYPES; 
package SYSTEM is 

pragma suf^ress (ALL_G1ECKS); 
pragma suppress(EXCEPTICM_TABLES); 
pragma not_elaborated; 

type NAME is ( sgi_self_sgi_thr ); 

SYSTEM_NAME : constant NAME sgi_self_sgi_thr; 

STORAGE_UNIT ; constant 8; 

MEMORY SIZE : constant 16 777 216; 


System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_D1GITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant :• 
: constant ;• 
: constant ;• 
constant :■ 31; 

: constant :> 
: constant :• 


-2 147 483 648; 
2 T47 183 ^47; 
1 ^; “ “ 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 
MAX_REC_SIZE ; integer 64*1024; 


type AM)RESS is private; 


function 

function 

function 

function 

function 

function 

function 


">" (A: AI»RESS 
"<" (A; ATORESS 
">-"(A: ADDRESS 
"<-"(A: AW)RESS 
(A: ATORESS 
"+" (A; AW)RESS 
(A; ADDRESS 


ADDRESS) 

ACTRESS) 

AIH}RESS) 

AIX)RESS) 

AIX3RESS) 

INTEGEIR) 

INTEGER) 


return 

return 

return 

return 

return 

return 

return 


BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

INTEGER; 

ANDRESS; 

ANDRESS; 


function "+" (I; UNSIGNEX|_TYPES.UNSIGNED_INTEGER) return ADDRESS; 

function MEMORY_ADDRESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) 
return ADDRESS renames 


NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 
NO_TASK_ID ; constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 
SIG STATUS SIZE; constant 


C-7 








APPENDIX F OF IHE Ada STANDARD 


type PROGRAM_ID is private; 

NO_PROGRAM_ID ; constant PROGRAM_ID; 

type LONG_AIX)RESS is private; 

NO_LONG_AI»R : constant LCNG_ADDRESS; 

function "+” (A: LONG_ADDRESS; 1: IOTEX5ER) return 1 jONG_ADDRESS; 
function (A: LCNG_AIX)RESS; I: INTBGEH) return LONG_Ar»RESS; 

function MAKE_LGNG_Ar»RESS (A: AIXDRESS) return LONG_AEORESS ; 

function L0CALI2E(A; LGNG_ADDRESS ; BYTE_SIZE : INTEGER) 
return AIX)RESS; 

function STATION_OF(A: LONG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is the julian day. 
subtype DAY_T is INTEGER; 

private 


type ADDRESS is new UNSIGNED_TyPES.WJSIGNED_INTEGER; 

NO_ADDR ! constant ADDRESS :■ 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN; 
pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TyPES.UNSIGNED_INTBGER; 
NO_TASK_ID : constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNEI)_TYPES.UNSIGNED_INTEGER; 
NO PROGRAM ID : constant PROGRAM ID 0; 


type LONG_AI»RESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 
NO LONG AEOR : constant LONG AIX7RESS 0; 


pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOa^IZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 


C-8 





APPENDIX F OF THE Ada STANDARD 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding v^ere possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conponents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables v^ich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The AIX)RESS attribute is not supported for the following 
entities; 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are su{^rted. 


C-9 



APPENDIX F OF THE Ada STANDARD 


The general definition of the package NACHINE_CCX>E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

Ihe general syntax of a machine code statement is as fol¬ 
lows: 


aX)E_n'( opcode, operand {, operand) ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable ntoaber of operands. 
The operands are listed within a subaggregate. Ihe format 
is as follows: 

CC»E_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0' ( op -> opcode ) ; 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MAC31INE_CX»E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
liACHINE_CCX)E must be static expressions, string literals, or 
the functions defined in MACHINE_OC»E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is suf^rted. 

6. Conventions for Implementation-generated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Ihchecked Deallocations 


C-10 




APPEl^IX F OF IHE Ada STANDARD 


None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) ^en the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMEJJT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
inst 2 uitiating DIRECT_I0 to provide an upper limit on the 
record size. In any case the maximum size su^^rted is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERR0R 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) v4ien the 
size of ELEME3Tr_TYPE exceeds that value. For exaitple for 
unconstrained arrays such as string where ELENENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineS in SYSTEM euid can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximtum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

Ihe maximtum size of a statically sized array type is 
4,000,000 x STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGE_UNITS. Ihis is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 


C-11 



APPENDIX F OF THE Ada STANDARD 


In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the ccan- 
pilation of the unit with a FATAL error message. 


C-12 




