Examine or 



ATTR Syntax: Attr filename [permissions] Usage 

change the security permissions of a file Opts: -perm = turn off 

specified permission Derm= turn on specified permission -a = 



3?, 



AUSTRALIAN 



inhihii 
s - n( 
to owi 

S 0S9 

Single 

= NEWSLETTER 

specif] 

TeciGrrm 




d ~ directory file 
pwner w - write permit 
read permit to public 
li^|>ermit to public BACKUP 
§|i Copies all data from 
ill error occurs s = 
iii-ites BASIC09 Syntax : 
^BUILD Syntax: Build 
irtfrom standard input 
1' working directory to 
if sage: Change execution 
lenamel filenames 



f 



Usage : Ti^^HMli^iii^^iilMiiHitax: Cobbler devname 
Usage : Cfe^ales i}S-9 hoolitrap filen^ current boot CONFIG 
" " ' -a disks COPY 



lage 
Syntax 
Syntax 
one fil 
Date ]t 
specify 
: Checl 
for vol 
= save 
cluster 
irint ' 
<devn 
'ilenan 
delete 
directo 

[e] [x] 
names 
executi 



-_j — i. 



EDITOR : 
Gordon Bentzen 
8 Odin Street 
SUNNYBANK Qld 4109 

(07) 345-5141 



data from 

Eiss^yntax : 

iiil> Usage 
■iH^ctory 

unused 

^iWnamO 

^*:s;f el [-x] 
mm-ii - 
iiispeldir 
liax: Dir 
11 file 
|=print 



M Syntax 
UMiure file 

to copy all files in a directory system Opts : -b make a system 
disk by using 0S9boot if present -b=<path> = make system disk 

process h 
command 
ECHO Syn 

output EI 



? 



SEPTEMBER 



do not 
makdir 

i t/Ot7 isiUard 

iilnted 



L6aL 6Q1LQIk jji i i f i, y i ^ff my;j.«j 3ii!njW|ffiK^ 



error 



liiiWiiiiMliiiiJS^ 

Usage: Chain ^^^*1iiPprefif'fit^iile^*f^^ 

<devname> Usage : Initializes an OS-9 diskette Opts ; R - Ready L 

- Logical formal only "disk name" 1/2 number of sides 'No of 



AUSTRALIAN 0S9 NEWSLETTER 
Newsletter of the National 0S9 User Group 



EDITOR : Sordon Bentzen 

HELPERS : Bob Devries ana Don Berrie 

SUPPORT ; Brisbane 0S9 Level 2 User Group. 



Welcome to the 14th edition of the Australian OS? Newsletter produced in sunny Queensland. 

This edition represents the commencpfrient of our second subscription year and the comfnitrrient to producB future 
editions through to August 1993, Just in case the above stateirients don't quite add up to you, ii^e produced two 
newsletters as a trial in 1963* being July and August, and thanks to the support of the members ute commenced a 
subscription period in September 1968. 

We dc hope that all members of the National 0S9 User Group have enjoyed the many articles presented over the last 
year, and that ue have all learnt something new about this powerful operating system. 

At the time of writing, we have received a total of 25 subscription reneoials which is more than the minimum we have 
set as being the basis for continuing this project. Ue are also confident that this number will increase. 

This edition wili be mailed to all members whose name has been in our database. However, the mailing list will be 
updated at END SEPTEMBER to include only financial members. So please send your renewal now so that you don't miss 
out on future editions. 

I must praise the efforts of Bob Devr ies and Don Berrie and thank them both for their high quality articles 
contributed over the last year, because without their dedication to this project we would have had a lot of blank 
pages in each Newsletter. 

Also a special thanks to members of the user group who have taken the trouble to send in articles and to share 
their knowledge with us. These include George Francis, Nickclas Marentes, 'Roskc' HcKay, Ian Clarke> Ross Pratt, 
and Phil Frost. Thanks for your participation. 

As we have stated many times, this newsletter is intended as a medium by which we can all share in the combined 
knowledge of 0S9 and its many application programmes, and it is only by many members being willing to pass en their 
experiences that this will be achieved. 

We would like to present a question and answer series in the coming months to assist those members who are new to 
0S9 and those not so new to 0S9. So come on, let us have those curly questions. 

I have found from my own limited e>;Ferience, that there is nothing like having to find the answer to a problem to 
make you learn. The only problem being that this can be very time consuming, and at times seem wasteful especially 
if someone already has the solution. We do not set ourselves up as experts by any means, but are willing to tackle 
any problem relating to the operating system. Having said that, I must also point out that the modification or 
debugging of commercial software packages is not our intent, as there does come a point where such a task is just 
not practical, or even possible, without the source code. 

Well that is probably enough raving for any month, so let's move on to this month's edition and I trust that your 
continued support will result in some very interesting reading m the months ahead. 

Until next month, Happy Computing. - Gordon Bentzen. 



Page 2 



AUSTRALIAN 0S9 NEWSLETTER 

The foiiouiing submission froiTt Ole Eskildsen is presented as the first of a three part series. The content of this 
series serves as an example of just what can be done -luith 0S9 (even mih the humble Color CciTiputer) and another 
reason why uie ail need to maintain interest in this versatile Operating Systsin. Please let us have your coiifntentE 
50 that we can endeavour to cater to your needs. Remejrsber? no feedback can be very difficult to deal with. 

Editor. 



FOURTH GEMERATIOH LANGUAGES (4GLs) AND OS-9 
PART 1 - WHAT ARE 4 GLs AND WHAT IS AVAILABLE FOR OS-9? 



This IS the first part of what I think will become 
three parts (or perhaps more which may also 
depend on your reactions to the subject) on 4GLs, 
what they are, and what is available for the OS-9 
operating system. At the end I hope to be able to 
make you a special offer to try out such a 4GL. For 
reasons of space availability in this newsletter 
I will obviously have to be fairly brief, however, 
I hope to cover the subjects sufficiently to 
benefit the general reader. The more 
experienced reader will probably find that in 
particular Part 1 does not provide him with a lot 
of new information, but please bear with me, 

In the three parts I intend to cover the following 
subjects: 

Part 1 - What Are 4GLs and What Is Available 

for OS-9? 

Part 2 - A Real 4GL Called Sculptor 

Part 3 - A Sample Application Using Sculptor 

and a Special Offer to Try It 

So, what are 4GLs? As the name implies there must 
have been first, second and third generations before 
and perhaps fifth, sixth and seventh generations to 
follow. Let us therefore briefly review the 
history of computing as it relates to software. 

Way back in the dim, dark ages of the forties the 
first computers started to appear and, as we all 
know now, the internal workings is based on the 
binary (two state) principle such as 
positive/negative, on/off and expressed 
mathematically as and 1. In order to get the 
computer to work the 'programmer' had to enter a 
long string represented by Os and Is which had the 
effect of switching the gates in the circuit on and 
off in order to finally arrive at the desired 



result. For instance, to add two numbers together 
he might have entered: '111100110011000000000000' 
This is machine language, the FIRST GENERATION. 
Little wonder you had to be a mathematics 
professor to program the early computers. Wext 
someone decided to group the binary digits (bits) 
together in groups of four and use the hexadecimal 
numbering system to represent the bits so the 
string above becomes: Mill 0011 0011 0000 0000 
0000" or hex 'F 3 3 0" which incidentally in 
6809 machine language means to add the value stored 
in hex address 3000 to the value in register 0. This 
is somewhat easier to read, but to use it in the 
computer it was necessary to make a simple program 
that could translate the hex numbers into binary. 
Wow! Aren't you glad you don't have to program like 
that? 

The SECOND GENERATION was born when someone decided 
that the above method was a bit too cumbersome for 
his liking and came on the idea of using mnemonics to 
represent the individual machine language 
instructions, such as add, subtract, store, move 
data, etc as well as performing jumps from one 
place in the program to another perhaps depending 
on a condition that had been tested for, and so on. 
This language is of course Assembler, where 
one mnemonic instruction correspond to one machine 
language instruction. This is therefore known as a 
'low level' programming language because it is very 
close to the way the hardware (the Central 
Processing Unit or CPU) works and that also 
accounts for the fact that Assembler language 
differs from one type of processor to another 
such as Motorola 6809 (in the CoCo) and Intel 8088 in 
the original IBM PC. Still, this was a vast 
improvement over the first generation way of 
programming but again necessitated that a program was 
developed (in the first generation language) to 



Page 3 



AUSTRALIAN 0S9 NEWSLETTER 



translate the programmer's Assembler language 
instructions and this program is simply known as 
"the Assembler". The add instruction shown above 
now looks like this: 'ADOD $3000" in 6809 Assembler 
language which, I am sure you will agree^ is a lot 
easier than the First Generation. Sometimes you 
hear a programmer say that he is programming in 
machine language. What he probably means is that 
he is programming in Assembler language and his 
program is assembled into machine language. As you 
can probably imagine this is the most effecient way 
of programming and that is the reason why most 
system functions and system software is written 
in Assembler although there is at least one 
notable exception which I will explain under Third 
Generation languages. 

The THIRD GENERATION languages came into existence 
when some programmers realized that it was too 
tedious to program in Assembler language since even 
a short program may soon run into hundreds and 
thousands of instructions. The idea was therefore 
conceived to develop a 'high level' programming 
language where one instruction may be 
translated into many machine language 
instructions. In other words, it would now be 
possible to write programs with fewer instructions 
which would mean that it could be written and 
debugged in a shorter time (fewer instructions - 
fewer potential bugs). Two of the first 3GLs were 
FORTRAN and COBOL. Other 3GLs include (yes, you 
guessed it) BASIC as well as PASCAL, RPG, PLt, and 
many others. How would you now perform the example 
instruction shown in the preceeding paragraphs? 
Well, you cannot! (At least I don't think you can 
in any of the languages mentioned.) This is why 3GLs 
are called 'high level' languages. I said in the 
previous paragraph that there was an exception and 
that is the 'C programming language, which is a 
very powerful 3GL but at the same time it allows the 
programmer to dive down to a low level close to 
the hardware whenever required and as a result C is 
also very useful for systems programming. Of course 
the 3GL cannot directly be executed by the 
processor, so a translating program, called a 
compiler, had to be developed for each language. 
This introduced a new benefit, namely that of 
portability of an application. By developing 
compilers for e.g. COBOL in Assembler language for 
many different processors it became possible to write 
a program in COBOL and then port the source program 
to different hardware and recompile it using the 
resident COBOL compiler. 



Now then, what about FOURTH GENERATION languages? 
Well, there seems to be several different 
opinions about what constitutes a 4GL, however, we 
can probably agree that it has to be even more 
powerful than a 3GL, i.e. one 4GL instruction must 
result in even more work being done by the processor. 
All of this is aimed at improving the productivity 
of the programmer so that he can churn out more 
and more solutions in as short a timeframe as 
possible. 4GLs usually have some of the following 
characteristics. 1) A powerful database management 
system (DBMS), perhaps a relational DBMS, which 
will store and retrieve the data for the 
programmer without him having to actually tell the 
system where or how to do this, thus removing an 
enormous burden from the progrrammer, 2) A 
powerful programming language which performs the most 
work with the least number of instructions. 3) A 
program generator of some sort whereby the 
programmer or perhaps even the end user can 
specify his requirements and the generator then 
automatically 'writes' the program (with no bugs). 
4) The ability to modify (or fine tune) a program 
generated by the program generator. It should be 
easier to learn than 3GLs and it should be possible 
for an experienced programmer to produce a desired 
result in a much shorter timeframe, some say as much 
as ten times faster than using a 3GL, this however, 
would vary from language to language, still 
it would be a considerable improvement. 

One such 4GL is SCULPTOR which I have used on and 
off for the last couple of years to develop real 
applications in that are installed and running at 
customer sites. In Part 2 I will describe some of 
the main functions of Sculptor and in Part 3 I 
will present a sample application. The Sculptor 
distributor for Australia has kindly agreed to 
provide a demo version so that you can try out the 
sample application. If you like it you can then 
obtain Sculptor either from myself or from the 
distributor. There may be other 4GLs available for 
OS-9 but I have never seen then, but I would of 
course be interested to hear about and particularly 
to try out any other 4GLs. Questions or comments 
should be addressed to: 



Ole Eskildsen 
n Monarch Street 
Kingston OLD 4114 
Tel: (07) 209 4322 



Page 4 



AUSTRALIAN 0S9 NEi^SLETTER 



OS-*? ?R(iFILE 
A rpviaw By. Gcr-don Bentzen 

Ohe Dt tha ve^y fi!"Bt practical \isbs of a coniputer usually thcughr of, n "o organize lists of data 3f soiTiE kind. 
The rBquirEsTient? can vary frcfn a siiiiple fila of Nafiie, Address Etc. to a rathEr cD;rfplE>; list cf variables. Bub 
Devi^iEb has fEaturefl his 'C database in this ns^ifslEttEr iiinicn is a good exai^PiE of soms of the cn;r;pIeM;tiss m 
creating a siiiipiE naiHE and addrEss type datatasE. 

Many conifiiercial databasE prograniHiES have oeeh dEveiGped for inost operating systEfiiST and of thEse^ opinion as to the 
best liiiil vary liiideiy. "Sculptor" fcr the OS-9 operating systeui is probably the fisost pcujErrul databasE for the 
CoCd and perhaps could be coiriparaDle to ;j;any poujErfuI databases available for P.C's running other operating 
systems. 

The purpose of this article hoii^ever, is not to present vieiiis on all the available database prografiiries availablEi 
but to CDJisnienT on just one of these, i,e. PROFILE. The Coutputeriijare "Profile" is available in RS-DOS and OS-9 
versions ^hich frors a users point of vieiij B:re very similar. The 03-9 version distributed by Tandy for the CoCo 
iiiill run under 03-9 level i only and ujill forfiiat its displays to tne available screens of the systefn. Profile ;^ill 
present a ccrrectly for"iatted display m the standard 32 column screen and Lsill also give the safi^e pleasing ?^esults 
if xt\^ OS-9 system uses an SS coluiiin display produced by "WordPak". 03-9 Level 2 users should not stop reading 
here as I luill present a couple of patches to Profile for Level 2 systeiris. 

Profile IS siniple to set up ana usei and has iBany f^axu^ss yhich uill alloui the Hianage^rient of inforrj^ation m sucn a 
variety of liiays that it should suit ;?^ost requi reorients. Profile is i^enu driven by interactive njenus iijhich ^akes it 
extremely easy to use once all the database structures have been defined. 

The first step of course^ is to define the 'Record'' forfiiat. To do this the type and size of each field niust be 
decided. yhen creating a ney dataoase? si-jply type in a nanie for the database in the opening f^enu. Profile uiill 
look in the current data directory for that nauiO and yhen not found a nr&Esags ^uill advise you of this fact and give 
you a y/n option to create a database of that j)B.}:]e. 

Field types availadle are -- 

Type 1 = Alphanuiijsric 

Type 2 = Date (default for;^at of fTifii/dd/yy >?iay liiiiit its suitability) 

Type 3 = Math (used m th^ four normal "idth functions plus report totals) 

•e ^, , 1 -. J. _ .-I H., , Li-.-, .-. -h , ^ ,-. \ 

i\_iJi-= i.e-Lj i_:-y ;- :• •_' ; ii:r.- 

Lifjiitaticnsi A record uiay ccniain a JTiaximUiT! of 35 fields. 
Fields niay contain up to 64 characters. 
The iT!a>;i;T!U"i capacity for any one record is 512 charactErs, 

Features* Up to 9 different screen display forfiiats iriay be defined for each datanase file. 
Up to 9 different file access iBethoos >^ay be defined (sort iuethods). 
Up to 9 different report foriDats j^ay be defined. 
Up to 3 different levels of sorting P9t "method. . 
Read "Dynacalc" files into the database. 
Save database files m 'Dynacalc' foriTiat. 
Restore deleted records. 

Compress database files (this effectively reirioves deleted records- deleted records not restorabie). 
Each report for^tiat iiiay include one (1) set of printer codes, e.g, code for conipressed print. 



ne nEiEtei 



Nouj soiBe of the "bugs" or uneKpected results, and I have not found usany. 

When a record is siiiiply deleted? it is not accessible m screEn displays as one uiould e>;pect? hou>evey 

record rlILL be included m a report ^nen the key field (access [nethoG) is different to the key field under u]hich 

the deletion lijas tTjaoe, The only sure u^ay of excluding deleted records frorri reports is to couipress the database 

file prior to running reports. Remaps tnis bug is a predictable result u;hen you think about it, but it has caugnt 

Hie rrior-t: than once. 



AUSTRALIAN 0S9 NEWSLETTER 



HppnrtB cf TEr the option ot sntenng a "sBlecticn criteria' at rpporr run tin^ei liihich can be very usefuL The 
selection criteria i^ay include all the usual logical opsrators of =, <, >^ uhich are not case sensitive in alpha 
-lelds. The selection criteria irmst be based on the current key fielc (the current access iiiethod's priiriary field), 

I have noted that Profile stores ail the defined screen, r^por't and other format files^ in fact all files relarec 
to a databasBi under a directory. The directory nanse is the -'■^^^9 given at creation of the database. Profile ujill 
autojiiaticaily create this directory and sets the 'pe' (public execute) attrioute off. This allouss Profile to 
distinguish its om database directories from other nornial directories iiihich inay be on the sariie disk. 

I^hile this inay net be a foclprcof iTfethcd* it does seeiTi to ijork as desired "lOst of the tin^e. The dataoasE {T?ay of 
course be copied under OS-9 in the ncririal liiay of ^ijakdir etc. If you use this method and Ojant Profile to read the 
directory as the nafiie of a database file? you uiiil need to set the pe attribute off. e.g. attr filenafTie -pe 

Conciusionsi OS-9 Profile is very fie>;ible and easy to use and lijill allou) a database to be set up luith only a 
little practice. The limitation of 512 characters in any one record iiiay be a problefTi for a cc^riplex database, 
hoiijever I have found that all iriy applications on the CoCo ars coHifortably accooii^cdated iifithin this linfit. 

So, if you do not ha\'5 a copy of 03-9 Profile, I suggest a phone around of your local Tandy stores and you iTiay be 
lucky enough to pick up a copy. Since Intertan Australia hA\'9 dropped the CoCo in Australia ye have noted niany 
bargains at clearance prices for CoCc hardiijare and scftii^are though you ntay have to resort to a purchase direct fro^n 
the U.S. On the other hand, you ^rtay have already picked up a copy at the bargain prices and noui are a little 
disappointed that it won't run under OS-9 Level 2. The follosDing patches iiiill haye you srriiling again. 



PATCH 0S9 PROFILE FOR L£V€L 2 

039 Profile consists of tuio programtfie fiiodules, FROFILEi the ^ain databases and MGT the database n^anageiiient 
utilities. Both of these prograf:;fi;e r^odules look I'or the 0S9 systefii Tiodule SYS50? ;ijhich of course is a Level 1 

TT.r-.H:^. i r^ *_ i rr^-n I t : .— ^. -, ^n ~ "- r-. ■+» i-. j-^ r—r-.i-ir—. r- r—^ i — *.— .^/ t-t— ,v-. -r >. j^ t"'* ^{^:\ —.*,?.—.' ' .' r-, .—\ -^ : i ^, r^ ui i : i T^r-^4* i.-.r-rV\ -1.' .— r^. -r K h— . -. fii— :,:r-r--\ -; ,— r" m, ^ ^. -\ ■^. r-! ,— . 

tne code so that the prcgrairin^e does not look for SYSGO. 

The easiest iijay to paten Profile and MGT is to create a fiiodpatch script using 'Build' 'Edit' or any te>:t processor 

file as a cofTi/?iand line paranieter. e.g. niodpatcn patch.profile 

Patch.PROFILE (This is the nafiie unoer ii^hich to create the ?Ticdpatch script) 

L PROFILE 
C 99 11 12 
C 3A E4 27 
e 1227 31 32 
C 122S 59 C9 
C 1229 26 B4 
C 122A F5 13 
C 122B 35 9F 
C i22C 73 i39 
V 

(The HiOdpatch script file should contain the above boldtype lines and be located m the current data directory) 

Noiii, load /dl/aads/profile (this line assufnes that the Original 'Profile' is loaded froin /dl) 

laodpatch patch.profile 
save /dfl/caids/profile profile 

That is all there is to it. The ijicdules 'load' 'i?iodpatch' and 'save' ";ust be either m iTieriory or the current 
execution directory (/dS/cuids m the exajTiple above). 'Save' coiries uiith the Level 2 Developrrjent SListeii^ or 'ruji^ 0S9 



Page a 



AUSTRALIAN 039 NEWSLETTER 

LbvsI 1 (they are identiCai) 

'profile'. Her^ is the JTiodparch scfipi to paten nGT, 

Patch^fiGT 

L J16T 

C 3A ^ 43 
C 543 31 32 
C 544 59 C9 
C 545 26 34 
C 546 F5 13 
C 547 35 9F 
C 548 79 89 
V 

Ng^t load /dl/oads/inqt 
ffiodpatch patch_!rfgt 
save /dfl/cffids/fflgt 



GDOCGDDQGDOOOOOOOOOOGDnCGGGGD 

A Database in C 
By Bcb Devries 

Included in this Jiionth's sectiGn of the ujOti for the database is the functions insert ano usageO? 

catabase reccrd structure* BS]d uinen everything is CDr^ect? it calls the saveO '^uncticn to save it to the disk. The 
usageO function, cnly used iijhen a cGirijT-anG line errGr is encountered, tells the user ^i^hat he aid u^rcn^i ^nd :^uits 



auiEndO functinns, and alsG give yGu scfne derails on compiling the full rnce. Of ccursef any errors that crop u? 
liiill be addressed as space peniiitsi and yhen you let fne knouj tnat soniethinq uisnt urGng. I hone you mil ha:^E tun 
frciTi playing a;ith this little ^1) prDgra^Tiine. By the yay, m case I had not i^entianea it before^ =arh section of the 
code, can be conipiled oy itself ^ by forcing the couipiler to include t:]^ header ^ilsi and stopping before the link 
stage uith the '-r' siDitch, Well, liiithout further ado. here's this tenth's piece of code. 

inserts ) 

/* this routine inputs data into the iTfail structure and keeps repeating ^/ 

/* until the user is satisfiec it is correct, and then saves it, +/ 

/* it returns a long value for the recDrd nuniber and requires no para^^s ^/ 

/* strncpyO u^s used to input the strings to stop overflou! of fields ^/ 

f 

char ch^ 

char te{iipstr[21 1; /* teiTiPorary string for data input */ 

int teiijprec = l; /* tei^porary record nuiiiber */ 

int replace = FALSE; /* flag to signal iirite Id end of file ^/ 

liihile (TRUE) 
/ 

scrnfiiaskO; /^ display efiipty screen iriask */ 

cursor (14, o); 

gets(te?iipstr}; 

strncpy (niai 1 . surnarrjei tentpstr , 20) ' 

cursor (51.5); 



AUSTRALIAN 0S9 NEWSLETTER 

get5(t&T(P5tr}", 

5trncpy(f:iail. street, tenipstrT 20); 

cursor (11, 3); 

gsts(te?itpstr); 

strncpyffifaii.cityitefnpstrilS) ] 

cursor n2T 9); 

gptsitefnpstr); 

strncpy (iTtai i . stats? tefiipstr? 3 } ; 

cursor (15, 12); 

gets\t5fiipstr) ; 

niail.pGstcDdB = atDiitciiipstr)? 

cursor (13, 23) I 

erase! in\); 

cursor (13, 23); 

printtCAii correct ? y or n "'); /* display proniPt */ 

ch = '\S^; 

lijhile (\ch != 'W) ii (ch := 'YM) 

ch = toupper(gEtch()); 
cursor (10, 23); 
eraseliTi( ) ; 

if (ch " 'Y'} /^ at no , go do it again */ 

break\ 

if (iiiaiLsurnameiS] == 'W) /^ if no valid input quit */ 

return (tsfifprec); /* u/ithcut saving record ^/ 

ternprec = save (terrsprec. replace); /^ save rBcord and ^/ 

return ( teiTfprec) ; /^ return record nuuibsr ^/ 



usageO /* usage function m case of incorrect loiii?^ line */ 

{ 

printf('\n\n Usage J database <dbfile>.\n\n-'); 

GOoooooocoOOOOOOOOOOooDooooboc 

CALENDAR PROGRAM 
By Ole Eski idsen 



Hsr^Q is a little quicky iTrBASIC09. This prograni ii^i 11 print a calendar to the standard output (the screen). It is 
a program I have converted froiri a Microsoft basic prograns u=hich I keyed in years ago on a Tandy nodel III (no 
not a CoCo-3} from soiiieiijhere I cannot noiu refiien^ber. In the conversion to BASIC29 I didn't have to do very friucn, 
but one of the things I did luhich is not actually necessary uias to rsjjiove all the unnessary line numbers to make 
the prografTi jTiore readable m BASICE9. What I afii telling you is that iriany programs that run m nicrosoft BASIC can 
be converted to BA3IC29 yith very little and sorrsetinies nil effort, naybe soi^eone should ^^dikB that a subject of 
another article. 

To use Cal, simply place it in your e^ecutiGn directory together li^i th RunB and then type ' 



and you should see tue n^onth of August 198? on your screen. This is provided you use the Shell called ShellPlus 



Page 



AUSTRALIAN 0S9 NEWSLETTER 



avdilaoie froni the User Group public dcrriain librdry. If ycu 
Not very neat, doTi't ycu agree? 






airu-n! u i_';;Ci i 



ancy tnen. 



The synta); for u&ing Cal is aljiGst the 5a"ie as th: 
luant to get the iiihole year then... 

type; cal 3 1989 

type: cai 3 1939 > /p 
Ydu CDuld alsD redirect it Xd a file thusly... 
type; cal 3 1939 > /dl/raleridarl9B9 



and then use ycur editor or yord prGcesBor id add a .TieBsagei 
the yBar. 

Please enjoy it and happy cDUiputmg. ., Cheersi Ole 



1 /i udi vuiiLliuih UU' 






■ences is inai u yc; 



print It out and send it to bjour friends a' 






PROCEDURE Cal 

i33SS (* Calendar prcgrafr? similar to UNIX Cal 

m27 (* By: Ole Eskildsen. 1939 

0041 

3084 

00A4 

S0F4 
0132 
0133 
0143 
0144 
014F 
216A 
0171 

Ul I i. 

017B 

0134 

0135 200 IF ii;cnth<0 OR tiionth>12 OR ysdr<li!00 OR yBdr>2399 THEN 

01AF PRINT "Usage; Cai /rionth year' 

PRINT " Displays calendar. !i;ay be redirected^' 

PRINT ' if i^onth=0 entire ':^5a-r displayed' 

PRINT " yalid year range: 1603-2399" 

PRINT 
END 
END IF 



U for nan-cofTiiTiercial purposes. 

(* Usage: Cal n^cnth year 

U if ;nonth = then calendar for uhole year is printed. 

(* Note: ^Tjonth paraineter is iiiandatory, unlike the UNIX cousin. 

PARAN irith,yr:STRIN5[4] 

DIM iisonth, year: REAL 

DIH J : REAL 

!?fGnth=vAL(iT!th} 
y5ar=yAL(yr) 



01 C3 

0iFe 

0249 

024S 
S24D 
024F 
3250 
02S2 
0234 



A=0 \B=0 \C=0 \D=0 \J=0 \P=0 \R=0 
PRINT 

C=6 



p a 9 E" 9 



AUSTRALIAN 0S9 NEWSLETTER 



328C 

329F 



333A 

331? 
3327 
3339 
034A 
3352 
3353 
0357 
3353 
336B 
3373 
3375 
33SE 
S3A5 

33Si 
33C2 
03DB 
33EC 
3419 
3446 
3473 
3484 
049F 
34AA 
34 B9 
34EF 
34Cfc 
34D4 
24D6 

3516 
351-3 
3526 

3546 
3552 
3559 
355B 
3566 
0568 
t)5 1 6 
S5AE 
35E7 
3617 

3619 



FOR J=i630 TO year 

IF J=year THEN 3213 

IF J/4<>INT(J/4} THEN 3233 

IF (J-1733)*^J-1333i*(J-1930)*tJ-2133)*(J-2230)^tJ-2333i 
3 THEN 3238 

C=Ci-2 

GOTO 3213 
3233 C=C-^1 
3210 IF C<7 THEN 3233 

C=C-7 
3233 NEXT J 

3253 FOR R=i TO 12 
READ A$ 
READ B 

IF year/4<>INT(year/4) THEN 3322 
IF A$<>^FEBRUARY" THEr^ 3323 
B=Bti 

(* Print calendar 
3323 IF iriGTith=3 OR fnonth=R THEN 

PRINT ' SUN iiON TUE ^ED THU FRI SAT ' 

FOR D=i TO B 
PRINT TAE(6+C+2); \ PRINT USING ^I3>M D; \ 
C=C-1 

if C<7 THEN 3423 
PRINT ' ' \ 
C=3 
3423 NEXT D 

ppTMT 

PPTr-.'T ■' ===:===rr=========:==:==============r=====::='* 



.j^: 



3473 



FOR P=i TO : 

PRINT 
NEXT P 
pi PP 

i 



FHEN 



34S3 
3493 



IF C= 
C=S 
END IF 
NEH D 

NEXT R 

DATA VANUARY%31,TEBRUARY%23,^r1ARCH%31»^APRIL%33 
DATA ^HAY", 31," JUNE%33r JULY", 31 rAU5UST%31, ^SEPTEMBER' 
DATA 3S,'0CT0BER%31rN0VEhBER%33,'DECEHBERS31 



