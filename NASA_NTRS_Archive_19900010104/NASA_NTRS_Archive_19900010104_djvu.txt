N90- 19420 


1989 

NASA/ASEE SUMMER FACULTY RESEARCH FELLOWSHIP PROGRAM 


MARSHALL SPACE FLIGHT CENTER 
THE UNIVERSITY OF ALABAMA IN HUNTSVILLE 


YAW RATE CONTROL OF AN AIR BEARING VEHICLE 


Prepared by: 

Academic Rank: 

University and Department: 


NASA/MSFC: 

Laboratory: 

Division: 

Branch: 

MSFC Colleagues: 
Date: 

Contract No. 


Bruce L. Walcott, Ph.D 

Assistant Professor 

University of Kentucky 
Deparment of Electrical 
Engineering 


Flat Floor Facility 

Information and Electronic Systems 

Control Electronics 

E.C. Smith and Frank Nola 

August 11, 1989 


XXX 


The University of Alabama in 

Huntsville 

NGT-0 1-008-021 




YAW RATE CONTROL OF AN AIR BEARING VEHICLE 


by 


Bruce L. Walcott 

Assistant Professor of Electrical Engineering 
University of Kentucky 
Lexington, KY 40506-0046 


ABSTRACT 


This report summarizes the results of a 6 week project which focused on the problem of 
controlling the yaw (rotational) rate the air bearing vehicle used on NASA’s flat floor facility. 
Contained within is a listing of the equipment available for task completion and an evaluation 
of the suitability of this equipment. This report also details the identification (modeling; pro- 
cess of the air bearing vehicle as well as the subsequent closed-loop control strategy. The 
effectiveness of the solution is discussed and further reccomendations are included. 


XXX -i 


ACKNOWLEDGEMENTS 


The author expresses his deepest appreciation and gratitude for the warmth and hospital- 
ity extended by his adopted family, the friendly people of EB24. In particular, he wishes to 
thank his principal colleagues, E.C. Smith Frank Nola for their advice, supervision, encourage- 
ment and mentoring. The author also wishes to acknowledge Bill Jacobs for his assistance 
and expertise concerning the air bearing vehicle and Tom Bryan for his advice and midnight- 
oil-buming chats. A special thanks is extended to Cindy Coker and Harry Reid for their dis- 
cussions and advice on the two projects the author worked on during the four weeks following 
the completion of the project oudined in this report. The author is grateful to Ricxy Howard, 
Mike Book, Charles Oliver and Tom Sutherland for the use of their equipment (and for chal- 
lenging homework problems!). Of course, Andy Gamble, Zack Barnett, Jon Mclnroy and 
Kirk Smith are to be awarded the highest commendations for making exiled life in 4619 bear- 
able. Lastly, Dr. Gerald Karr and Dr. Frank Six are to be congratulated on their outstanding 
seminars and superb supervision of the 1989 ASEE/NASA MSFC Summer Faculty Fellowship 
Program. Great job guys! 


XXX -ii 



1 INTRODUCTION 

The Marshall Space Flight Center in Huntsville, Alabama is home to the 
largest precision flat floor facility in the world. This 4200 square foot floor 
is constructed of self-leveling black epoxy and is flat to with 1/1000 of an 
inch over any given square yard and to within 3/1000 of an inch from corner 
to corner. The featured player on this ebony stage is a 4400 pound cubicle 
vehicle built from NASA’s own design. This vehicle rides 6/1000 of an inch 
above the flat floor on a cushion of air supplied by three air bearings. Satel- 
lite and Orbital Maneuvering Vehicle mock-ups are mounted to the front of 
the vehicle in order to perform docking and rendezvous simulations. Light- 
ing conditions can be completely controlled on the floor plus the vehicle can 
transmit video and telemetry via an RF link. Unstable satellites can be 
simulated using the eight degree of freedom dynamic overhead target sim- 
ulator (DOTS). Thus, even the most difficult OMV docking problems can 
be simulated using the vehicle and the DOTS. A total of 24 air thrusters 
are mounted on the lower four corners of the vehicle to enable the vehicle 
to move in X, Y and Yaw directions while servo motors on the front of the 
vehicle give mock-ups the added capabilities of Z, Roll, and Pitch. Thus, a 
mock-up on the vehicle has a total of six degrees of freedom. 

In the past, prestigious high-tech corporations such as General Electric, 
TRW, and Martin Marietta have utilized the flat floor and the air bearing 
vehicle to develop and validate docking and rendezvous strategies as well 
as to investigate contact dynamic problems. These companies have future 
commitments to the flat floor facility thereby making continual operation 
and functionality enhancement high priorities of NASA. 


2 OBJECTIVES 

The following is a list of objectives which must be attained in order to 
complete the project: 

1. Develop an assembly language driver for the data acquisition board. 
This driver should be capable of interfacing with a C language pro- 
gram. 


XXX- 1 



2. Mount a static inverter on the air bearing vehicle 

3. Become familiar with Microsoft 5.1 C. 

4. Mount CMGs and rate gyros on the vehicle. 

5. Connect torquer motor servo input to D/A output of data acquisition 
board and rate gyro output to A/D input. 

6. Model the open loop system consisting of the input to the torquer 
servo and the output of the rate gyros. Initially, this identification 
will be performed off-line. If an adaptive control is required, this 
identification will be done on-line as part of the control loop. 

7. Develop a control law based on the results of the identification scheme. 
Initially, this control law will be developed off-line but should have 
the capability of being developed on-line should an adaptive control 
scheme be required. 

8. Implement and test the control law. 

9. Devise and implement a scheme for desaturating the CMGs. 


3 PROBLEM STATEMENT 

3.1 Motivation 

The results of earlier research and experimentation demonstrated that the 
use of the air thrusters to control translational (X and Y) and rotational 
(Yaw) motion on the vehicle is inefficient. This is due to the high degree 
of coupling which exists between the thrusters dedicated to translai ional 
movement and the thrusters responsible for rotational motion. That is, a 
translational motion from the thrusters introduced a rotational component 
and vice-versa. Thus, the thrusters act opposedly rather than separately 
in controlling the vehicle. Consequently, finding a decoupled control law or 
suitable alternative source of motion for the vehicle is of urgence to NASA. 


XXX -2 


8.1.1 Control Moment Gyros 

One possible solution to the coupled control problem detailed above is to 
replace the Yaw thrusters by control moment gyros (CMGs). The theory 
behind the use of CMGs to control Yaw can be summarized by Newton’s 
second law of motion as applied to rotational systems. Newton’s second 
law states that the rate of change of momentum of a body is equal to the 
sun. of the external torques acting upon it. That is, 

dH 

dt 

where H is the angular momentum of the gyro and T txit mai are the exter- 
nal torques. A CMG operates in the exact opposite manner as an inertial 
guidance gyro. In an inertial guidance gyro, a torque is applied to the gyro 
when the body changes direction. This torque produces a rate perpendicu- 
lar to the gyro’s spin axis, which is measured. Conversely, in a CMG a rate 
is produced perpendicular to the gyro’s spin axis by a torquer motor. This 
rate causes a change in the angular momentum which produces a torque 
perpendicular to the gyro’s spin axis. 

To illustrate, consider Figure 1. Figure 1 shows a one degree of freedom 


Y.T. 


tzUmal 



XXX -3 





CMG [1]. The servo torquer motor produces a rate u as shown. This rate 
yields a torque, T v given by 

T p — w x H 

If we assume that the magnitude of the angular momentum is constant 
(i.e., the gyro is spinning at a constant rate), then the component of torque 
produced in the horizontal plane is 

T vow = HueosO (i) 

where 9 is the angle formed between the spin axis of the gyro and the 
horizontal plane in which the vehicle travels. 

Therefore, as a solution to the coupling control problem, a single degree 
of freedom CMG could replace the yaw thrusters. 

4 PROPOSED SOLUTION 

4.1 Available Equipment and Specifications 

Hardware which can be dedicated to the project includes: 

• Two Sperry reaction wheels and brushless DC torquer motor. 

• One Apollo Telescope Mount (ATM) rate gyro rated at 1 deg/sec 

• Two Spring-driven rate gyros rated at 60 deg/sec 

• One TELEX 1280 PC-AT clone operating at 12 MHz 

• One IBM PC Data Acquisition and Control Adapter 

• One Avionics Instruments Static Inverter 

Software which is available for the project includes: 

• Microsoft C 5.1 

• Microsoft Assembler 5.0 


XXX - 4 



• Matlab 3.13 and the Control and System Identification Toolbox 


To determine if the hardware available is sufficient to solve the problem, 
let us consider the yaw specifications of the OMV mock-up which is the 
most popular mock-up on the vehicle. The proposed OMV will be able to 
achieve a maximum yaw rate of 2.3 deg/sec. If we consider the vehicle as 
a uniform rectangular solid with a mass of 2000 kg and the dimensions 1.5 
meters wide by 2 meters long by 2 meters tall, then we may calculate the 
moment of inertia by 


w . = 10 4lW 


( 2 ) 


Next, let us note that the maximum rate of the available DC brushless 
torquer motor is approximately 1.0 rad/Bec. Recall from equation (1) that 
the torque supplied by the CMG varies with cos0 where 0 is the angle 
formed between the gyro’s spin axis and horizontal. To estimate the torque 
required to meet the OMV specifications, let us assume that the torquer 
motor turns the gyro at a constant rate equal to the motor’s maximum rate 
(i.e., 1.0 rad/sec). We will further assume that 0 is allowed to vary from 
0 radians to | radians. Neglecting the dynamics of the torquer, the time 
necessary to turn the gyro from 0 to | radians is | seconds. Therefoie, the 
maximum torque required to achieve the OMV specification is estimated 

at 1041 x 2.3 X (^) 


T v = 


W 

2 


26.6.Vm 


Thus, the angular momentum required of the gyro is 


H = 


Ty 

w ^ cosO ^ 


t £| i =41.8W/* 


where cos0 ave is the average value of the cos0 as the torquer turns the 
gyro from 0 to 7r/2 radians. The reaction wheels are rated at an angular 
momentum of 11.4 kgm*/s at a speed of 1500 rpm. Recall that the an- 
gular momentum of a rotating cylinder is mr^v. Thus, to satisfy the rate 
demanded by the OMV specification plus a safety margin, two Sperry re- 
action wheels running at 3000 rpm must be used in the CMG design. This 
configuration yields a total angular momentum of 45.6 kym*/s, more than 


XXX - 5 



the required 41.8 kgm */ s. The reaction wheels were mounted at opposite 
ends of the torquer motor shaft with the two spin axes parallel to each other 
and perpendicular to the motor shaft. Thus, each reaction wheel behaves 
as a single degree of freedom gyro. Although the gyros can be coupled at 
any point on the vehicle and still transmit their maximum torque to the 
vehicle, they were mounted as close to the center of mass as possible to 
minimize any unbalance the gyros might introduce. 

Since a variety of mock-ups and payloads will be used on the air bearing 
vehicle, an adaptive control strategy may be required to adequately replace 
the yaw control. In addition, the CMGs supplying the torque to the vehicle 
will have to be desaturated intermittently. That is, when 6 nears 90 deg, 
the amount of torque which the CMG’s can supply is nearly zero and if $ ex- 
ceeds 90 deg, the horizontal component of the torque will switch directions. 
Consequently, the problem solution should include a scheme whereby the 
CMGs can be returned to 9 = 0 without affecting the rate of the vehicle. 


4.2 Restatement of Objectives 

The following is a restatement of the objectives (tasks) which must be 
attained in order to complete the project: 

1. Develop an assembly language driver for the data acquisition board. 
This driver should be capable of interfacing with a C lan guage pro- 
gram. 

2. Mount a static inverter on the air bearing vehicle. 

3. Become familiar with Microsoft 5.1 C. 

4. Mount CMGs and rate gyros on the vehicle. 

5. Connect torquer motor servo input to D/A output of data acquisition 
board and rate gyro output to A/D input. 

6. Model the open loop system consisting of the input to the torquer 
servo and the output of the rate gyros. Initially, this identification 
will be performed ofT-line. If an adaptive control is required, this 
identification will be done on-line as part of the control loop. 


XXX -6 


7. Develop a control law based on the results of the identification scheme. 
Initially, this control law will be developed off-line but should have 
the capability of being developed on-line should an adaptive control 
scheme be required. 

8. Implement and test the control law. 

9. Devise and implement a scheme for desaturating the CMGs. 

Both of the above remarks indicate that the control solution should be 
completed on a microprocessor or micro-computer. Since a Telex PC-AT 
clone and data acquisition board are available for this project, the decision 
was made to design the control law around a micro-computer. 

5 PROJECT SUMMARY 

The first two weeks of the project were devoted to developing an assembly 
language driver for the IBM data acquisition board which could be *nter- 
faced with a C language control program. This time was also used to learn 
the peculiarities of Microsoft C 5.1 which differs significantly from Turbo 
C 2.0 used at the University of Kentucky. 

Fortunately, NASA engineer Charles Oliver had already developed an 
assembly language driver for the IBM data acquisition board which had 
been modified by NASA engineer Bill Jacobs to interface to Microsoft Quick 
BASIC programs. However, as was painfully discovered during the initial 
two weeks of the project, calling and return conventions are entirely differ- 
ent in C programs than in BASIC programs. BASIC programs pass the 
long address (segment and offset) of pointers to the arguments of the sub- 
routine on the stack while C programs pass the actual pointers themselves 
on the stack. Furthermore, BASIC programs expect the return values to be 
passed on the stack while C programs expect the return values of functions 
to be stored in the AX register. 

The source listing for the assembly language driver is contained in Ap- 
pendix A. 

After the completion of the assembly language driver, the ensuing two 
weeks were dedicated to the installation of the static inverter and to obtain- 
ing a model for the vehicle with the input being the voltage to the torquer 


XXX -7 



■ervo loop and the output being the voltage out of the rate gyros measuring 
the yaw of the vehicle. The static inverter was installed with the invaluable 
aid of Bill Jacobs. The inverter, which is of aircraft quality, converts the 28 
volt DC power present on the vehicle to 115 volts 60 Hz AC signal thereby 
enabling the PC- AT clone with the data acquisition board to be mounted 
on the vehicle. 

In the initial stages of modeling the system, it was discovered that the 
spring driven gyros rated at 60 deg/sec worked reasonably well in lieu of 
a tachometer in the torquer servo loop. Here, rates of up to 1 rad/s fc (57 
deg/sec) are being measured. The maximum yaw rate of the vehicle is 2.3 
deg/sec, however, which is still within the noise level of the spring-driven 
gyros. Consequently, the decision was made to use the ATM rate gyro to 
measure the yaw of the vehicle. This gyro saturated at 1 deg/sec which 
corresponded to an output of 6.6 volts (after a voltage division circuit), 
but gave an extremely clean and linear signal up to that point. Yet, the 
relatively low saturation level inhibited testing of the vehicle at yaw rates 
above 1 deg/sec. The decision was made to continue with the modeling 
procedure using the ATM gyro’s output, but also to devote some thought 
to how one might increase the saturation level on the ATM. 

Since an adaptive control strategy may be required to control the yaw 
rate of the vehicle, the identification (modeling) scheme must possess the 
capability of being implemented on-line. Consequently, the identification 
procedure purported by Ljung [2], Eykhoff [3], Astrom [4], Soderstrom and 
Stoica [5] and others was selected. In brief, this identification scheme con- 
sists of three parts: selection, application, and recording of data; selection 
of possible candidate models; and determination of the best-suited model. 
Once the structure of the model is known, model parameters can be esti- 
mated using a criterion such as least-squares. 


6.1 Data Collection 

In sampling data using our PC-AT clone data acquisition system, we must 
select a sampling interval which will avoid the effects of aliasing. Further- 
more, since our application involves not just identification but control as 
well, we do not want to sample too fast which might lead to a non-minimum 
phase model and/or a model with a delay of many sampling periods. Thus, 


XXX -8 


ORIGINAL PAGE IS 
OF POOR QUALITY 













the choice of the sampling time, T, should be less than the dominant time 
constants of the system, but not significantly. 

To obtain an estimate of a reasonable sampling time, the open-loop 
step response was found with the input being the voltage into the torquer- 
Bervo loop and the output being the voltage from the ATM gyro which is 
proportional to the rate of the vehicle until saturation. If the input were a 
step torque supplied from the gyro (i.e., if T, were a step), we would expect 
the step response to produce some sort of ramp (assuming the vehicle is 
riding on a frictionless surface). However, since the input is a step voltage 
to the torquer servo, we would expect such an input to produce a constant 
precession rate, u>, in the gyros (neglecting the dynamics of the servo loop). 
Ihe torque applied to the vehicle will not be constant, since equation (1) 
shows js that this torque varies with the cosine of 6 . The results of the 
step response are displayed in Figure 2. All experiments on the vehicle were 
conducted at a setting of 50 psi on the air bearings. As can be seen from 
Figure 2, the step response is a cross between a type 0 step response and a 
type 1 step response. Although no actual dominant time constant can be 
measured, from the overall slow response depicted in Figure 2, a sampling 
time of about 150 milliseconds should suffice. 

Upon selection of a reasonable sampling time, the system must be ex- 
cited by a random signal which excites all of the modes of the system. Such 
an input is white noise. Since we are using a discrete magnitude-limited 
input, we cannot generate a true white noise signal. However, a binary 
input which switches values with a probability of 0.5 has the same effect as 
white noise (see Ljung (1987)). A magnitude of 4 volts was selected for the 
random binary signal. The results of the application of the random binary 
input as well as the input itself can be seen in Figure 3. A total of 600 data 
points were taken at a sampling interval of 0.15 sec. 

Following the data collection, the next step in the identification process 
is to develop a list of possible mode! structure candidates and to pose a 
criterion for selecting the best-fitting structure. FYom the step response 
shown in Figure 2 and from the equations of motion used to estimate the 
torque required of the CMG, a linear model would be a reasonable choice 
to represent the vehicle. The particular linear model structure candidate 
was chosen to be an Autc-Regressive Exogeneous structure (ARX) with 
unknown parameters. The notation ARX(m,n,p) represents the following 


XXX - l i 






input-output relationship: 


y(t)+aiy(*-r,) + ...+a„y(t-nT,) = 6xi(f-pr,)+...+6 m x(t-(p+m-l)r f ) 

(3) 

where T, is the sampling time. That is, the transfer function has 
n poies, m-1 zeros and a time delay of pT t . The parameters a,- and 6, 
are the parameters to be estimated. The ARX structure was choeer. over 
a ARMAX (auto-regressive with a moving average and exogeneous term) 
because the disturbances on the system are not prominent. Furthermore, 
Cc' ulating the control law is simpler with an ARX model than an ARMAX 
model. 


Once the model structure has been decided upon, a criterion for deter- 
mining the best fitting ARX structure is needed. That is, the best com- 
bination of number of delays, the order of the numerator, and the order 
of the denominator needs to be evaluated. Also, the data must be divided 
into two categories: data for identification and data for validation. In other 
words, a portion of the data must be used to identify the best fitting ARX 
structure and then the remainder of the data should be used for cross verifi- 
cation purposes. To this end, the data was divided into two equal portions: 
the first three hundred points were used for estimation purposes while the 
final three hundred data points were employed for verification purposes. 

In trying to identify a criterion for selecting the best-fitting ARX struc- 
ture, two closely-related strategies predominate. The first is the Akaike 
Final Prediction Error (FPE) criterion where the following entity is de- 


sired to be minimized: 


FPE = 


1 +n/N 

1 — n/N 


where n is the total number of parameters to be estimated, N is the num- 
ber of data points, and V is the quadratic loss function for the particular 
structure under scrutiny (see Ljung (1987)). The second criterion, called 
Akaike ’s Information Theoretic Criterion (AIC), is closely related to the 
FPE criterion. In the AIC, the following quantity is minimized: 


AIC tzlog[{l + 2n/N)V] 


The FPE criterion is selected for our identification problem. 


XXX - 13 



: 



Figure 5 - Comparison of Response of the Two ARX Models to the Actual Response 


XXX - 14 





Figure 3 depicts the binary input which was applied to the vehicle’s 
torquer servo and the corresponding response. In the structure selection 
ARX(m,n,p) candidates were considered where m was varied from 1 to 5, n 
was varied from 1 to 5, and p was varied from 1 to 10. That is, a total of 250 
structures were considered by calculating the FPE for each structure. The 
results of this examination are shown in Figure 4. The structure candidate 
which achieved the lowest overall FPE was an ARX(3,4,1) model with an 
FPE = 0.0242 and a loss function of V = 0.0231. This implies that the 
best model for the system (out of the 250 models considered) is 

V (0 + — T t ) + ... + a6j/(< — 5T,) = 6 1 x(i-r,) + M(t-2r 4 ) + 6 3 z(t-37 , # ) 

Using a least-squares criterion, the 7 unknown parameters were estimated 
to be 

G! = -1.0280,0, = 0.1515, a s = -0.2828, a 4 = 0.1633 

and 

6! = 0.0319,6, = 0.0548, 65 = -0.0167 

If we were concerned solely with identification, we would stop our search 
with the ARX(3,4,1) model. However, we are concerned with control as 
well as identification and a fourth-order model does not readily lend itself 
to control design, especially on-line computation. Thus, we should look 
for a lower order model which has am FPE comparable to the minimum of 
0.0242. To this end we found that an ARX(2,2,l) structure haa an FPE of 
0.029 and a loss function of V = 0.0283 (compare to 0.0231). This second- 
order ARX structure is far preferable to the best-fitting ARX(3,4,1) model 
from a control perspective. An ARX(2,2,l) model has the input-output 
relationship: 

y(t) + a iy {t - T ,) + a 2 y{t - 2 T.) = b x x{t - T t ) + b 2 x{t - 2 T.) 

Using a least-squares criterion, the 4 unknown parameters were estimated 
to be 

a x = -0.8025,a, = -0.1925,6, = 0.0320, 6 2 = 0.0617 (4) 

To further illustrate that the ARX(2,2,l) model adequately represents 
the response of the vehicle, consider Figure 5 which depicts the actual 
response of the system to the binary input as well the responses of the 


XXX - 15 




Figure 6 - Response of ARX(2,2,1) Model and Vehicle to Alternate Binary Input 


XXX - 16 


best-fitting ARX(3,4,1) model and the ARX(2,2,1). As can be »een from 
Figure 5, there is very little difference between the two ARX responses and 
both closely follow the actual response of the vehicle. Hence, by selecting 
the ARX(2,2,l) model over the ARX(3,4,l) structure, we do not sacrifice 
much fidelity, yet gain a reduction in model order of one-half. 

Figure 6 contains a final testament to the accuracy of the ARX(2,2,1) 
representation of the vehicle. Figure 6 shows the response of the vehicle to 
a random binary input different from that which was used to identify the 
ARX model. Also contained in Figure 6 is the response of the ARX(2,2,l) 
model to the same input. Note how closely the model response follows the 
vehicle response. Not only do the results displayed in Figure 6 indicate that 
the ARX(2,2,1) model adequately represents the system, but since ,hese 
results were recorded on a date different from the data used to identify 
the system, they also suggest that an on-line identification scheme may 
not be necessary. That is, the dynamics of the system appear not to vary 
greatly with time (although no payload was attached), consequently the 
ARX parameters given in equation (3) accurately represent the system for 
all time t. This hypothesis will be true especially if our control law is 
sufficiently robust. 

5.2 Control Design Considerations 

Once the proper model for the vehicle has been selected, a closed-loop 
control law must be designed. The specifications for such a control are 

1. Near zero steady-state error due to a step command 

2. Settling time of less than 3 seconds 

3. No overshoot 

4. To be sufficiently robust so that an adaptive scheme is not necessary 
or to have the ability to be computed on-line 

The settling time criterion stems from the 3 second time delay which is 
inherent in the OMV communication iink when the OMV is piloted from 
the ground. 


XXX - 17 



Imag 


ORIGINAL PAGE IS 
OF POOR QUAJLITY 



Real 


Figure 7 - Root Locus Plot of the Closed-Loop Poles 


XXX - 18 



To address the first design specification, let us return our attention to 
Figure 2 which shows the open-loop step response of the vehicle. Note that 
the response does not attain a steady-state value and appears to ramp at a 
constant rate as t becomes large. This information suggests that the system 
type is greater than zero and that the closed-loop uncompensated step 
response would result in zero steady-state error. Therefore, no integrator is 
necessary in the feedback loop to satisfy the steady-state error specification. 

To meet the settling time criterion, the poles in the s-plane must be 
to the left of a = -3/4. Therefore, in the Z-plane the magnitude of the 
tic sed-loop poles must obey 

jpo/es| <= |e- 8/4T '| = 0.8936 


A root locus plot of the ARX(2,2,1) model is contained in Figure 7. To 
make the control design sufficiently robust without adding overshoot to 
the response, the value of the feedback gain is chosen such that the system 
is critically damp. That is, both poles are located at a = 0.3229, ju = 0 
which is well within the magnitude limit of 0.8936 imposed by the settling 
time specification. These closed-loop poles yield a theoretical settling time 

of 

/n(0.3229) „ 

t, = T.-r-, r— = 0.5191sec 

* * /n(0.02) 

Such a large margin may appear at first to be overly conservative but if we 
drive our D/A output into saturation ( ±10 volts), the settling time will 
probably be longer than this theoretical value. 

The value of the feedback gain which yields a critically-damped sys- 
tem can be computed on-line from the values of the ARX parameters, 
aj,a2,f>i,6 2 . One can readily show that 

i(2ai6i — 4fea) a + [(2ai6i — 46 2 )* — 46*(oi — 4a 2 )] 1 ^ > 1 

2b\ 

For the values given in equation (4), equation (5) evaluates to 


k = -I 


-] ( 5 ) 


k = -4.9642 


Although the above feedback gain causes our ARX off-iine system model to 
become critically damped, if we choose to use an on-line parameter iden- 
tification scheme, then equation (5) can easily be used on-line to calculate 
the necessary feedback gain. 


XXX - 19 



6.3 Control Validation 

To solve the problem of the ATM saturating at 1 deg /sec NASA engineers 
Hugo Berry and Bill Jacobs suggested that we use equation (1) to our 
advantage. That is, if the spin axis of the ATM gyro is tilted by an angle 
<f> then the amount of yaw rate measured by the gyro in the plane of the 
vehicle will decrease by the co»<f>. Thus, letting 4> = 75°, the ATM gyro 
saturates at a value of 1 x = 3.864 deg/sec rather than 1 deg/sec and 
the OMV maximum rate of 2.3 deg/sec can be easily realized. However, 
we have effectively decreased the forward loop gain by a factor of 3.864. 
Therefore, the critically-damped feedback gain listed in equation (5) must 
be multiplied by 3.864 to compensate which yields 

k = -19.1802 

Furthermore, spin axis of the ATM rate gyro is no longer parallel to the 
Earth’s spin axis which implies that some variable rate disturbance will be 
introduced into the system depending upon the alignment of the vehicle 
on the flat floor. Although tilting the spin axis of the ATM gyro offers an 
inexpensive short-term remedy to the problem of low rate saturation, it is 
recommended that a more permanent solution be found either in the form 
of a different rate gyro, or in the form of a more effective modification of 
the current ATM rate gyro. 

Appendix B contains two programs developed by Dr. Walcott during his 
1989 tenure as an ASEE/NASA Summer Faculty Fellow. The first pre gram 
closes the loop on the vehicle using the feedback control given in equation 
(5) and the computer control configuration shown in Figure 8. The desired 
output of the ATM gyro in volts ( which is directly proportional to the 
yaw rate of the vehicle) is entered by the user via keyboard. This serves as 
the demand signal and is combined with the inverted ATM gyro output to 
form the error signal which is the input to the proportional control block. 
The output of the proportional control block is the actuating signal to the 
vehicle. The second program utilizes the same control strategy but the 
input demand can be varied via the user by typing a ’1’ to increase the 
demand signal by l/8th of a volt and ’2’ to decrease the demand signal by 
the same amount. 

The results of the first program are shown in Figure 9. For purposes 


XXX - 20 




Torquer 

Servo 

Irput 


Vehicle Model: 

Y(q) b 1 q' 1 *b 2 q‘ 2 

ATM 

Rote Gyro 
Output 

K 


D/A 


X(q) 1+a-jq* 1 +a 2 q' 2 

r 

A/D 

-y Rote 

Command 


Feedback Gain 
K 




r ^ 


Micro-Computer Control 


Figure 8 - Micro-Computer Control Block Diagram 


XXX - 21 









Figure 9 - Closed-Loop Response to a Rate Command of 4 Volts 


XXX -22 






ORIGINAL PAGE fS 
OF POOR QUALITY 


of comparison, the ideal ARX(2,2,l) closed-loop response was generated 
by limiting the actuat ing error signal to ±10 volts (which is the maximum 
available output of the D/A converter). Recall that a limiter acts as a 
low pass Liter which causes the settling time to be much larger than the 
anticipated value of 0.5191 sec. The settling time of both the ideal an 
actual r^ponses in Figure 9 is about twice this value, yet still well within the 
design specification of less than 3 seconds. In Figure 9 we also sue that un 
ideal response overshoots every so slightly while the actual response doe? 
u -v The slight overshoot of the ideal response is caused by the presence o' 
a clused-loop zero at q=-1.9313. Apparently, this zero is not as prorrineni 
in the actual system. 

Figure 9 also reveals that the steady-state error for both the idea! anc; 
actual response is negligible and that the two responses are virtually iden- 
tical except for the small difference in overshoot. This indicates that our 
off-line identification scheme has resulted in a high-fidelity mode! of the 
system and that on-line parameter identification is not necessary. Thus, w 
have met the first three control design specifications and the last specifica- 
tion, robustness, will be tested in the final phase of the project - solving 
the CMG desat uration problem. 

6.4 CMG Desaturation 

The benefits for utilizing the CMGs rather than the thrusters to control 
the yaw rate of the vehicle are that the CMGs deliver a pure torque which 
produces a rotational motion completely decoupled from translation a! mo 
tion. However, a disadvantage of the CMGs is that when the 6 the angle 
formed between the spin axis of the CMGs and horizontal - nears 90 de- 
grees, very little torque is available in the plane of the vehicle, Mo r eover, 
if 6 exceeds 90 degrees, the torque produced in the plane of the vehicle v. 
in the opposite direction of the torque that was produced for 0 less thru So 
degrees. Therefore, we have a positive feedback situation and the systcco 
will go unstable. The identical problem occurs when 6 nears -60 decrees 
so for purposes of discussion we will restrict our attention to the situation 
of 0 increasing positively towards 90 degrees. These aforementioned prob- 
lems illustrate the necessity of periodically desaturating the CMGs (the-, 
is, returning 0 to 0 degrees). 


XXX - 23 



The moot obvious method for desaturating the CMGs is to sense the 
angle 0 and fire the yaw thrusters in harmony with the torque produced 
by the CMGs as 6 nears 90 degrees. That is, use the yaw thrusters to 
produce more torque than is demanded of the CMGs. This will act as a 
torque disturbance to the closed-loop control system and thereby produce 
an actuating error signal which will cause the torquer motor to turn the 
CMGs back towards decreasing values of 0 . If the yaw thrusters continue 
to fire in harmony with the CMGs, the torquer will continue to desaturate 
the CMGs until 6 = 0 at which time the thrusters would cease fire. 

This method may initially appear to re-introduce the problem of cou- 
pling between the translational thrusters and the yaw thruster but closer 
scrutiny bears that this is not the case. The yaw thrusters are no longer 
part of the closed-loop control and function merely as a b ang -bang torque 
disturbance. Of course firing the yaw thrusters introduces a tr ansl ational 
force disturbance in addition to the torque disturbance. This translational 
force disturbance can be compensated for by the translational thrusters and 
any additional torque disturbance produced by this compensation can be 
lumped with the original torque disturbance and eliminated by the CMGs, 
not the yaw thrusters. In other words, by virtue of the CMGs produc- 
ing a pure torque, the torque disturbances produced by the translational 
thrusters are not coupled back to translational disturbances when counter- 
acted by the CMGs. 

This desaturation method assumes that the implemented control law is 
sufficiently robust to compensate for external torque disturbances without 
a significant deterioration in the error between the demand rate and the 
actual rate of the vehicle. Experiments with the control indicated that small 
disturbances such as convection currents and imperfections in the flat floor 
could easily be compensated. Whether the control was tight enough to 
counteract a large torque disturbance, remained to be seen. 

Prior to testing the desaturation scheme, a few hardware modifications 
were necessary. First, the angle 0 needed to be measured. Initially, this 
information was obtained by integrating the command to the torquer rate 
gyro. This solution worked amazingly well and would have sufficed if the 
torquer servo loop had been tighter. But the torquer rate gyro used spring 
driven operation which had a tendency to drift thus making accurate in- 
tegration impossible for long periods of time. One solution would be to 


XXX -24 


replace the torquer rate gyro with a tachometer but a more inexpensive 
solution would be to mount a position sensor on the torquer axis. NASA 
engineer Bill Jacobs and NASA technician Zack Barnett came to the rescue 
by mounting a rotational potentiometer to the outside casing of one of the 
CMGs along the torquer spin axis. The output from the wiper arm of the 
pot was connected to an A/D channel of the adapter board with 0 volts 
corresponding to 0 = 0 and db8.3 volts corresponding to 6 = ±90 degrees. 

Another hardware modification is to interface the yaw thrusten to the 
PC. The vehicle has two sets of yaw thrusters (clockwise and countercjock- 
wise) and each set requires a 5 volt, low-current input to fire and an open 
circuit to cease fire. The IBM control adapter board has two D/A outputs 
and one of these has been consumed by the actuating signal output to the 
torquer servo. This implies that we must use a single D/A output to control 
both sets of thrusters. 

The following circuit enables both sets of thrusters to be controlled from 
a single D/A output: 


1 0K 



Figure 10 - Circuit to Control Yaw Thrusters 


XXX - 25 





A/D Output (volts) 


ORIGINAL PAGE IS 
OF POOR QUALITY 


Desaturaiion Control with Nominal Gain 



-2 

-4 


Actuating Error Signal 


-6 

0 10 20 30 40 50 60 

time (sec) 


Figure 1 1 - Response of Desaturation Process with Nominal K 


XXX - 26 



A/D Output (volts) 



time (sec) 


Figure 12 - Response of Desaturation Process with K = 25 


XXX - 27 



Note that an output of 0 from the D/A does not affect a change in the 
relays while an output of +10 (-10) will turn on the left (right) transis- 
tor which in turn will close the left (right) relay thereby transmitting the 
necessary +5 volts to the clockwise (counter clockwise) thrusters. 

After some experimentation, a value of |0| = 65 degrees was selected 
to trigger the desaturation process, at which point the available torque 
is still 42.3% of the maximum available torque. A value of |0| closer to 
90 degrees resulted in an insufficient amount of torque to counteract the 
disturbance while a value of |0| closer to 0 resulted in desaturation occurring 
too frequently. 

The results of the desaturation process are shown in Figures 11 and 12. 
Both trials were run with a setting of 50 psi on the air thrusters and on the 
air bearings. Figure 11 depictB the desaturation process for the nominal 
value of the feedback gain K. Here, a small increase in rate can be detected 
when the thrusters fire to desaturate the CMGs. If the application were 
teleoperation of the vehicle, this error could be tolerated since a pilot is in 
the loop making adjustments according to his display screen. If the appli- 
cation is autonomous, this disturbance may be outside of tolerance. The 
amount of rate error could be decreased, however, by increasing the value 
of the feedback gain. Recall that increasing the feedback gain increases the 
robustness of the system. Yet theoretically, our system is critically damped 
and any increase in the feedback gain will manifest itself in terms of over- 
shoot. However, our ARX(2,2,l) model does not accurately represent the 
effects of limiting our input to ±10 volts. Limiting our input acts much like 
a low pass filter in cascade with our control block. Therefore, we may be 
able to increase the gain without the response acquiring overshoot. Figure 
12 shows the desaturation process when K is increased to 25. Notice that 
there is no overshoot and that the change in the rate of the vehicle during 
desaturation is imperceptible. Conclusion: if maintaining a constant rate 
is critical, then a value of 25 should be employed in the feedback gain. 


6 Conclusions and Recommendation 

This report has presented a summary of a six week project concerning 
the yaw rate control of NASA’s air bearing vehicle using CMGs. From 


XXX - 28 



the information presented, the following conclusions /recommendat ions are 
drawn: 

• Two of the Sperry reaction wheels spinning at 3000 rpm are required 
to meet the the torque stipulations derived from the maximum yaw 
rate of the OMV. 

• Of the 250 possible structures considered, an ARX(3,4,l) was the best 
fit according to the Akaike Final Prediction Error Criterion (FPE). 
However, an ARX(2,2,l) structure had a similar FPE and was chosen 
over the ARX(3,4,1) model for ease of control law design. 

• A least squares estimation was employed off-line to compute the best 
parameter values for the ARX(2,2,1) structure. Although this estima- 
tion could be performed on-line, experimental data indicated that the 
parameters did not vary significantly. Thus, no adaptive estimation 
is necessary 

• The open-loop step response and the results of the parameter esti- 
mation indicated that the vehicle behaved as a type 1 system. This 
implies that no integration is necessary in the feedback control loop to 
meet the steady-state error. A proportional feedback control (given 
by equation (5)) was designed so that the closed-loop was critically 
damped. This control can be computed on-line in a self-timing scheme 
if necessary. Furthermore, due to the saturation effect of the D/A out- 
puts, this feedback gain may be increased above this nominal value if 
more robustness is required during desaturation. 

• Although tilting the ATM rate gyro’s spin axis provided an excellent 
temporary solution to the problem of insufficient dynamic range, the 
vehicle is now sensitive to the Earth’s rotation. A more permanent 
solution would be to rescale the electronics of the ATM or find an 
alternate rate gyro to devote to the project which has a dynamic 
range of approximately 3 degrees per second. 

• The end product of this project is a control system - both hardware 
and software. Plans are currently underway to install an AT-bus 
80386 computer on the vehicle. If and when this envent transpires, 


XXX - 29 



the control adapter can be installed in and the software ported to the 
new 80386 box. 

• Using the thrusters to desaturate the CMGs did introduce some trans- 
lational disturbance, but because the thrusters were not part of the 
closed-loop yaw control, this translational disturbance will not be 
coupled back into a rotational disturbance. 


7 References 

1. Clyde Jones, "Simplified Description of Control Moment Gyros,” 
NASA Technical Report R-ASTR-G-WP- 12-67, MSFC, July 
11, 1967. 

2. Lenart Ljung, System Identification: Theory for the User. 
Prentice-Hall, New Jersey, 1987. 

3. P. Eykhoff, Trends and Progress in System Identification. Perg- 
amon Press, Helmsford, New York, 1981. 

4. K.J. Astrom, “Theory and applications of adaptive control -A sur- 
vey”, Automatica, vol. 19, pp. 471-486, 1983. 

5. T. Soderstrom and P. Stoica, Instrumental Variable Methods for 
System Identification. Lecture Notes in Control and Information 
Sciences, Springer-Verlag, New York, 1983. 


XXX - 30 


APPENDIX A 


XXX-31 



page ,132 

title CONTROL MOMENT GYRO ASSEMBLY LANGUAGE DRIVER 

subttl SUPPORT DRIVER FOR IBM DATA ACQUISITION AND CONTROL ADAPTER 

; source code filename: ADAPTDRV.ASM 

; programmer: Charles Oliver , EB24, NASA MSFC APR 1, 1987 
; modified by Bruce L. Walcott, EB24, NASA MSFC JUNE 5, 1989 


This program contains functions which are intended to be 
used by C programs compiled under MICROSOFT C 5.1 or higher 


analog_input function: 

MICROSOFT C STATEMENT: 

extern int far analog_input (int , int) ; 
int voltin, int channel, int adapter,' 


voltin= analog_input (channel , adapter) ; 

returns an integer representation of the voltage on "channel” 
where channel is either 0, 1, 2, or 3 and adapter is 0 or 1 depending 
upon which board is desired. If only one board is present, ther. 
adapter must be set to 0. 

The ADC's have 12 bit resolution and have been set to a -10 to 10 volt range. 
For an input voltage of -10 volts, voltin will equal 0. For an input volt; 
of +10 volts, voltin will equal 4095. w 

analog_output function 
MICROSOFT C STATEMENT: 

extern void far analogoutput (int, int, int); 
int adapter, channel, voltout; 


analog_output (voltout , channel , adapter) 

The subroutine sets an analog output channel. The three arguments must be 
integer variables, adapter must be 0 or 1. channel must be 0 or 1. 

The DAC's have 12 bit resolution and have been set to a -10 to +10 volt 
range, voltout equals 0 produces a -10 volt output and voltout equals 4095 
produces a +10 volt output. 


equates for accessing IBM data acquisition and control adapter 


.MODEL MEDIUM 



.CODE 



device_number_reg0 

equ 

0c2e2h 

de v i ce_numbe r_r eg 1 

equ 

0c6e2h 

analog_device 

equ 

9 

binary_device 

equ 

8 


; tells MS to use medium model 

;< adapter 0 device number register > 
;< adapter 1 device number register > 

;code to select analog device 
;code to select binary device 


XXX-32 


AI_control_regO 

equ 

02e2h 

AI_status_regO 

equ 

02e2h 

AI_data_regO 

equ 

22e2h 

_control_regl 

equ 

06e2h 

'*fri_status_regl 

equ 

06e2h 

AI_data_regl 

equ 

26e2h 

adOchannel 

equ 

OOOOh 

adlchannel 

equ 

OlOOh 

ad2_channel 

equ 

0200h 

ad3_channel 

equ 

0300h 

convert_start 

equ 

OOOlh 

busy_state 

equ 

OOOlh 

count 4 multiplexer 

_settling equ 

AO_control_regO 

equ 

12e2h 

AO_data_regO 

equ 

32e2h 

AO_control_regl 

equ 

16e2h 

AO_data_regl 

equ 

36e2h 

daO_channel 

equ 

OOOOh 

dal_channel 

equ 

OlOOh 

BI_status_regO 

equ 

02e2h 

BI_control_regO 

equ 

02e2h 

BI__input_regO 

equ 

22e2h 

BI_output_regO 

equ 

22e2h 

_s tat us_reg 1 

equ 

06e2h 

> toi_control_regl 

equ 

06e2h 

B I_ i npu t_r eg l 

equ 

26e2h 

BI_output_reg 1 

equ 

2 6e2h 


?< adapter 0 analog input control register > 
;< adapter 0 analog input status register > 

;< adapter 0 analog input data register > 

;< adapter 1 analog input control register > 
?< adapter 1 analog input status register > 

;< adapter 1 analog input data register > 

;code to select A/D channel 0 
;code to select A/D channel 1 
;code to select A/D channel 2 
;code to select A/D channel 3 

y convert start bit in AI_control 
ybusy state bit in AI_status 
OOlOh ; count for delay while analog 
ymultiplexer settles 

;< adapter 0 analog output control reg > 

y< adapter 0 analog output data register > 

;< adapter l analog output control reg > 

;< adapter 1 analog output data register > 

ycode to select D/A channel 0 
ycode to select D/A channel 1 

< adapter 0 binary status register > 

< adapter 0 binary control register > 

< adapter 0 binary input register > 

< adapter 0 binary output register > 

< adapter 1 binary status register > 

adapter 1 binary control register > 
adapter 1 binary input register > 
adapter 1 binary output register > 


cntr_control_regO 

equ 

cntrcontrolregl 

equ 

counterO regO 

equ 

count erO_reg 1 

equ 

counterl_regO 

equ 

count erl_regl 

equ 

counter2_ regO 

equ 

counter2_regl 

equ 


0b2e2h 

0b6e2h 

82e2h 

86e2h 

92e2h 

96e2h 

0a2e2h 

0a6e2h 


< adapter 0 counter control register > 

< adapter 1 counter control register > 

< adapter 0 counter 0 read/write register > 

< adapter 1 counter 0 read/write register > 

< adapter 0 counter 1 read/write register > 

< adapter 1 counter 1 read/write register > 

< adapter 0 counter 2 read/write register > 

< adapter 1 counter 2 read/write register > 


set_counter0_mode3 equ 36h 
set_counterl_mode3 equ 76h 
se t counter 2_mode 3 equ 0b6h 
latch_counter2 equ 8 Oh 


ycode to set counter 0 to mode 3 
ycode to set counter 1 to mode 3 
ycode to set counter 2 to mode 3 
ycode to latch counter 2 


int_control_regO 

equ 

0d2e2h 

int_status_regO 

equ 

0d2e2h 

int_control_regl 

equ 

0d6e2h 

in tsta tus_r eg 1 

equ 

0d6e2h 

irq_stat 

equ 

01000000b 


y< adapter 0 interrupt control register > 
y< adapter 0 interrupt status register > 
y< adapter 1 interrupt control register > 
y< adapter 1 interrupt status register > 

J 

y external interrupt status, IRQ 


brrt ax 


macro 

io_port, value 

mov 

dx, io_port 

mov 

ax, value 

out 

dx, ax 

jmp 

$+2 XXX- 



DniP 

endm 


$+2 


out al 


macro 


iojport, value 


• 

9 

mov 

mov 

out 

jmp 

jmp 

endm 

dx, io_port 
al , value 
dx, al 
$+2 
$+2 

* 

r 

;main program 

• 

9 



prog 

SEGMENT 

para public 'CODE' 


ASSUME 

cs:prog 

/device driver header 



DD 

-1 /pointer to another driver 


DW 

8000h /character device attribute 


DB 

"stxdriv " 

/end of header 


de v i ce_numbe r 

dw 

0 /locations used by binary and analog 

BI_input 

dw 

0 z input/ output subroutines 

BI_output 

dw 

0 

channel 

dw 

0 

AI_control 

dw 

0 

AI_status 

dw 

0 

AI_data 

dw 

0 

AO_control , 

dw 

0 

AO_data 

dw 

0 

bitl5 flag 

dw 

0 /used for triggering adscan with data bit 

bitl5_tlow 

dw 

0 /timeout counter low word 

bitl5_thigh 

t 

dw 

0 /timeout counter high word 

t 

/analog_input 

l 

function 

(called from C) 


PUBLIC _ 

analog input 

_analog_input 

proc 
push bp 

far 


mov 

bp, sp 


mov 

bx, [bp+8] 


cmp 

jne 

mov 

mov 

mov 

mov 

jmp 


bx,0 . , 

17 ;if not zero, setup for adapte] 

device_number , device_number_regO ;else f setup fo] 

AI_control ,AI_control_regO /adapter 0 

AI_status , AI_status_regO 

AI_data , AI_data_regO 

18 


XXX- 3 A 



17: 

mov 

device_number , device_number_regl 


mov 

AI_control , AI_control_regl 


mov 

AI_status , AI_status_regl 


mov 

AI_data , AI_data_regl 

18: 

mov 

bx, [bp+6] 


cmp 

bx , 0 ; compare CHANNEL arg with 0 


jne 

19 


mov 

channel, ado channel ;set for channel 0 


jmp 

112 

19: 

cmp 

bx , 1 ; compare CHANNEL arg with 1 


jne 

110 


mov 

channel, adl channel ;set for channel 1 


jmp 

112 

liO: 

cmp 

bx , 2 ; compare CHANNEL arg with 2 


jne 

111 


mov 

channel, ad2 channel ;set for channel 2 


jmp 

112 

111: 

mov 

channel, ad3_channel ;set for channel 3 

112: 

out_al 

device_number,analog_device ; select adapter 


out ax 

Alcontrol , channel ; select channel 


mov 

cx, count4_multiplexer_settling ;wait for analog 

wait4 : 

loop 

wait4 multiplexer to settle 


mov 

ax, channel ; start analog conversiom 


or 

ax , convert_start 


out ax 

AI control, ax 

N — 




mov 

dx,AI_status ;wait for A/D conversion to finish 

wait5 : 

in 

ax, dx 


and 

ax , busy_state 


jnz 

wait5 


outax 

AI_control , channel 


mov 

dx,AI_data ; input analog value 


in 

pop bp 

ax, dx 


ret 

; return to BASIC 


analog_input endp 


analog_output function (called from C) 


PUBLIC _analog_output 
analog_output proc far 


push bp 

mov bp , sp 

mov bx, [bp+10] 

cmp bx,0 ? compare ADAPTER argument with 0 

jne 113 ;if not zero, setup for adapter 1 

mov device_number,device_number_regO ;else, setup for 

mov AO_control, AO_control_regO ; adapter 0 

XXX-35 




mov 

AO data, AO data regO 


jxnp 

114 

113: 

mov 

device_number , device_number_regl 


mov 

AO_control , AO_control_regl 


mov 

AO_data , AO_data_regl 

114: 

mov 

bx, [bp+8] 


cmp 

bx,0 ; compare CHANNEL arg with 0 


jne 

115 ;if not zero, setup for 


mov 

channel, ado channel ;else, setup for channel 


jmp 

116 

115: 

mov 

channel , adl_channel 

116: 

out_al 

device_number, analog_device ; select analog i 


out_ax 

AO_control , channel /select channel 


mov 

bx, [bp+6] /send word from BASIC to , 


out_ax 

AO_data , bx y output channel 


pop 

bp 


ret 

/return to basic 


_analog_output endp 


t 

stack: 

f 

DB 

DW 

64 dup ('s' , 't' , 'a' , 'c' , 'k', ' ',' ') 

0 

/ 

;end of program 

lastword: 

DW 

0 

prog 

ENDS 



END 



XXX- 3 6 


APPENDIX B 


XXX37 



/***** 

* stepdata.c 

* 

* Programmer: Bruce L. Walcott 

* 

* written: June 19 , 1989 

* 

* This program collects data points from the airbearing vehicle in closed-loop 

* given a setpoint 

* 

******/ 

/* 

* External connections are: D/A channel 0 to torquer input 

* D/A channel 1 to thruster circuit input 

* A/D channel 0 to D/A channel 1 

A/D channel l to D/A channel 0 

* A/D channel 2 to wiper arm of pot 

* A/D channel 3 to ATM rate gyro output 


/* Includes and external declarations */ 

# include <graph.h> 

# include <math.h> 

# include <stdio.h> 

# include <stdlib.h> 

extern void far analog_output ( int, int, int) ; 
extern int far analog_input ( int, int) ; 

/***** 

* Main Program 
***** / 

main ( ) 

{ 


/* Internal declarations */ 


FILE *f ; 

int analgout, i, x, j, sampletime, k, flag, number; 
long color; 

static float voltin[8000] ; 

float voltout , offset, diff, positl, posit2, epsilon, kO, u, y[3], saturate; 
/* Initialize variables */ 


color=9 ; 
number=0 . ; 
kO = 19.1802; 
epsilon=. 005; 
offset=0; 


/* 9 = blue */ 

/* Feedback gain for critical damping */ 

/* Tolerance for eliminating drift */ 

/* Initial value of DC offset to eliminate drift */ 


_se ttextwindow (1,1,25,80) ; 

_setbkcolor (color) ; /* Set-up graphics and clear screen */ 

clearscreen (_GCLEARSCREEN) ; w 

_settextposition(6,20) ; /* Print messages for gyro drift elimination */ 

settextcolor (7) ; 

_outtext ("Eliminating rate gyro offset."); 


XXX- 38 



settextposition(6, 20) ; 

outtext(" Please wait. M ) ; 


lle(l){ 

positl=(analog_input(2,0)/2048. ) *10.-10. ; 
for (k=0 ; k < 500; k++) { 

for(j=0; j < 300; j++) continue; 

} 

posit2=(analog_input(2,0)/2048. ) *10.-10. ; 


/* Take one pot reading */ 
/* Wait */ 

/* Take another */ 


diff=posit2 - positl; /* If difference not within 

if( fabs(diff) > epsilon) { /* tolerance, change offset 

offset = offset - .05* fabs (dif f )/dif f ; 

analog_output( 2048+ (int) ( (of fset) *204 . 8) ,0,0) ; /* Output offset 

) 

else break; /* If difference is within toleranc 

) 


epsilon=0 . 01 ; /* Now move gyros back to zero position * 

while ( 1) { 

positl=(analog_input(2, 0)/2048. ) *10.-10. ; 
if ( fabs (positl) > epsilon) { 

analog_output (2048+ (int) ( (offset-. 5*fabs (positl) /positl) *204.8) , 

) 

else { 

analog output (2048+ (int) ( (of fset) *204 . 8) ,0,0) ; 
break; 

) 

) 

_settextposition (7 , 20) ; /* Put sampling time in sampletime */ 

_outtext ("Enter the desired sampling time in miliseconds: ") ; 

scanf ( "%d" , &sampletime) ; 

_settextposition(8,20) ; /* Put number of points in number */ 

_outtext ("Enter the number of data points to capture: ") ; 

scanf ("%d" , &number) ; 

_settextposition(9, 20) ; /* Put setpoint in voltout */ 

_outtext ("Enter the value for step on D/A output on channel 0: ") ; 

scanf ("%f" , &voltout) ; 

f = f open ("data\\stepdata.dat", "w+" ) ; /* Open data file */ 

if (f == NULL) 

{ 

printf(" Cannot open stepdata.dat"); 

return ; 

) 

/* Write header information */ 

fprintf (f , "sampletime=%d, amplitude=%2 . 3f , of fset=%2 . 3f , number=%d\n" , sampletime 


/* Desaturate at +- 6 volts */ 

/* flag * 1 when desaturating CW, 2 when desaturating 
/* x is command for thrusters */ 

XXX- 3 9 


saturate=6. ; 
flag=0; 
x=2048 ; 



/* Main control loop */ 


for (i=0;i < (4*number) ;i += 4) 

{ 

analog_output (x, 1, 0) ; /* Command thrusters */ 


voltin[0+i]=(analog_input (0, 0)/2048 
voltin(l+i]=(analog_input (1, 0)/2048 
voltin[2+ij*(analog_input (2, 0)/2048 
voltin[3+i]=(analog_input (3 , 0)/2048 

y [0]=voltin[3+i] - (voltout+of fset) ; 
u=-k0*y [0] ; 

if(fabs(u) > 10) u=10*u/fabs(u) ; 
analog_output ( (int) ( (u+10) *4095/20) 

if( voltin[2+i) > saturate ) { 
flag=l ; 
x=4095 ; 

) 

if (voltin[2+i] < -saturate ) { 

f lag=2 ; 
x= 0; 

) 

if (flag — 1 && voltin[2+i] < 0) 

x=2048; 

flag=0; 

) 

if (flag == 2 && voltin[2+i) > 0) 

x=2048; 

flag=0; 

} 

for(k=0; k < 58; k++) continue; 
for(k=0; k < sampletime -1; k++) 
for(j=0; j < 300; j++) continue; 

> 

analogoutput (2048+ ( int) ( (offset) *204 .8) 
analog_output (2048 , 1 , 0) ; 

for(i=0;i < (4*number);i += 4) 

( 

fprintf (f , "%2 . 3f %2.3f %2.3f %2.3f\n 

} 

} 


)*10.-10.; /* Get inputs */ 

) * 10 .- 10 . ; 

) * 10 .- 10 . ; 

)* 10 .- 10 . ; 

/* Calculate control */ 


/* Limit value to +-10 volt 
0,0); /* Output control */ 

/* Check for CW desaturatio 
/* Set flag */ 

/* Command CW thrusters off 


/* Check for CCW desaturati 
/* Set flag */ 

/* Command CCW thrusters on 


/* Check if back to zero */ 
/* Command CW thrusters off 
/* Reset flag */ 


/* Check if back to zero */ 
/* Command CCW thrusters off 
/* Reset flag */ 


/* Wait sampling time */ 


0#0); /* Exit loop and turn off */ 


/* Write data */ 

t,voltin[i] ,voltin[i+l] ,voltin[i+2]-offs 


XXX-40 



/***** 

* Posit. c 

* 

Programmer: Bruce L. Walcott 


* written: July 14, 1989 

* 


* , Th f s P r °gram closes the loop on the vehicle and desaturates the ovros 
using a potentiometer connected to the torquer motor spin axis. The 
user can command desired rate from the keyboard. 


***** 


*/ 


/* 

* 

* 

* 

* 

* 

* 

*/ 


External connections are: 


D/A channel 0 
D/A channel 1 
A/D channel 0 
A/D channel 1 
A/D channel 2 
A/D channel 3 


to torquer input 
to thruster circuit input 
to D/A channel l 
to D/A channel 0 
to wiper arm of pot 
to ATM rate gyro output 


/* Includes and external declarations */ 


# include <graph.h> 

# include <conio.h> 

# include <math.h> 

# include <stdio.h> 

# include <stdlib.h> 

€ arn void far analog_output ( int, int, 
extern int far analog_input ( int, int) ; 


int) ; 


/ * if* * ★ 

* Main Program 
*****/ 


main ( ) 
{ 


/* Internal declarations */ 

FILE *f ; 

int analgout,i, x, j, sampletime, k, 
long color; 

static float voltin[8000] ; 

float voltout, offset, zerol, zero2, 
char chr; 


flag; 

diff, positl, posit2, epsilon, ko, u, 


/* Initialize variables */ 


color=9 ; 
chr = '0' ; 
k0 = 19.1802; 
epsilon=. 005; 
of et=0; 


/* 9 = blue */ 

/* Feedback gain for critical damping */ 

/* Tolerance for eliminating drift */ 

/* Initial value of DC offset to eliminate drift */ 


_settextwindow (1,1,25,80); 
_setbkcolor (color) ; 
_clearscreen(_GCLEARSCREEN) ; 


/* Set-up graphics and clear screen */ 


y[3), 


i 


XXX-41 



settextposition (6,20) ; /* Print messages for gyro drift elimination */ 

settextcolor (7) ; 

outtext( "Eliminating rate gyro offset."); 

settextposition (6, 20) ? 

outtext ( " Please wait. ") ; 


while(l) { 


positl=(analog_input(2,0)/2048. ) *10.-10. ; 
for (k=0 ; k < 500; k++) { 

for ( j=0; j < 300; j++) continue; 

) 

posit2=(analog_input(2,0)/2048. )*10.-10. ; 


/* Take one pot reading */ 
/* Wait */ 

/* Take another */ 


dif f=posit2 - positl ; /* If difference not within 

if ( fabs (dif f ) > epsilon) { /* tolerance, change offset 

offset = offset - .05* fabs (dif f)/diff; 

analog_output (2048+(int) ( (offset) *204. 8) ,0,0) ; /* Output offset 

else break; /* If difference is within toleranc 

} 


epsilon=0. 01 ; 


/* Now move gyros back to zero position * 


while (1) { 

positl=(analog_input (2 , 0)/2048. ) *10.-10. ; 
if ( fabs (positl) > epsilon) { 

analog_output (2048+ ( int) ( (offset-. 5*fabs (positl) /positl) *204.8) , 

) 

03.S6 { '«i 

analog_output (2048+ (int) ( (offset) *204.8) ,0,0) ; 
break; 

) 

) 


settextposition (7 , 20) ; 

outtext ( "Type 0 to stop, 1 to go cw, 2 to go ccw, b to break ") ; 


voltout=0. ; 
sampletime=150 ; 
saturates . ; 
flag=0; 
x=2048 ; 


/* Initialize setpoint to 0 */ 

/* Sampling time is 150 msec */ 

/* Desaturate at +- 6 volts */ 

/* flag « 1 when desaturating CW, 2 when desaturating 
/* x is command for thrusters */ 


while(chr != # b # ) 


/* Break when 'b # is entered */ 


while (! kbhit ( ) ) 

{ 

analog_output ( x , 1 , 0 ) 


/* Loop until key is struck */ 

/* Command thrusters */ 


voltin[0]=(analog_input (0, 0)/2048. ) *10.-10. ; /* Get inputs */ 

voltin[l]=(analog_input (1, 0J/2048. ) *10.-10. ; 
voltin[2]=(analog_input (2,0)/2048. ) *10.-10. ; 
volt in [ 3 ] = ( analog_input ( 3 , 0) /2048 . ) *10.-10. ; 


y[0)=voltin[3] - (voltout+of fset) ; /* Calculate control */ 

u=-k0*y[0] ; 


if (fabs (u) > 10) u=10*u/fabs(u) ; 
analog_output ( (int) ( (u+10) *4095/20) , 0, 0) ; 

XXX-42 


/* Limit value to +-10 volt 
/* Output control */ 



if ( voltin[2] > saturate ) { 

flag=l; 

x=4095? 

} 


/* Check for CW desaturation 
/* Set flag */ 

/* Command CW thrusters off 


if(voltin[2] < -saturate ) { 
f lag=2 ; 
x= 0; 

} 

if (flag «= 1 && voltin[2] < 0) { 
x=2048; 
f lag=0 ; 

) 

if (flag == 2 && voltin[2] > 0) { 
x=2048; 
f lag*0 ; 

) 

for(k=0; k < 58; k++) continue; 
for(k=0; k < sampletime -1? k++) 
for ( j=0; j < 300; j++) continue; 

} 


/* Check for CCW desaturation 
/* Set flag */ 

/* Command CCW thrusters on 


/* Check if back to zero */ 

/* Command CW thrusters off * 
/* Reset flag */ 


/* Check if back to zero */ 

/* Command CCW thrusters off 
/* Reset flag */ 


/* Wait sampling time */ 


chr=getch() ; 

if(chr == ' 1 ' ) voltout = voltout+. 125 ; 
if(chr == , 2 / ) voltout = voltout - .125; 
if (chr == '0') voltout =0.; 

} 


/* If is struck, get characte 
/* If increase setpoint 

/* If '2 # , decrease setpoint 
/* If 'O', reset setpoint to 


analog_output (2048+ (int) ( (offset) *204.8) ,0,0) ; /* Exit loop and turn off */ 

analog_output(2048, 1 , 0 ) ; ' 


} 




