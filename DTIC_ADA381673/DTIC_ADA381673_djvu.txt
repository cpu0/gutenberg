Army Research Laboratory 




> ./ ' 



A Class for Run Time Computation 
of Shadows for Polygonal Objects 


Mark A. Thomas 






'iV'. 





ARL-TN-156 


AUGUST 2000 


20000831 087 


Approved for public release; distribution is unlimited. 






Abstract 


The development of realistic synthetic environments for dismoimted 
soldier visualization requires attention to environmental cues. Effects 
such as shadows provide the soldier information about time of day and 
orientation. Graphical databases that do not have shadows must 
compute them at run time. Various methods of computing and 
displaying shadows exist. This report presents a simple method that is 
based on bounding volumes. The method provides the rapid generation 
of shadows. These shadows do not provide light attenuation effects, but 
the environmental cueing provides valuable information for the 
dismounted soldier in a synthetic environment. 




TABLE OF CONTENTS 


Page 

List of Figures. v 

List of Tables. vii 

i 

1. Introduction. 1 

• 2. Computer-Generated Shadows. 1 

3. Fake Shadows Technique. 2 

3.1 Bounding Box. 2 

3.2 Ground Projection. 3 

3.3 Mesh Creation. 3 

4. Graphics Display. 5 

5. Sample Pictures. 5 

6. Conclusion. 2 

References. 9 

Appendix 

A. Shadow Class Source Code. 11 

Distribution List . 25 

Report Documentation Page . 27 


iii 


















Intentionally left blank 


IV 



LIST OF FIGURES 


Figure EsgS 

1. Bounding Box Example. 3 

2. Shadow Vertex Numbering and Triangulation. 4 

3. Terrain Database Visualization Without Shadows. 5 

4. Terrain Database Visualization With Shadows Created by the Fake 

Shado wsT echnique.. 6 

5. Close-up View of Buildings With Shadows. 6 


» 


V 










INTENTIONALLY LEFT BLANK 


VI 



LIST OF TABLES 


Table Page 

1. Determination of Five Vertices. 4 




t 


Intentionally left blank 




Vlll 



A CLASS FOR RUN TIME COMPUTATION OF 
SHADOWS FOR POLYGONAL OBJECTS 


1. Introduction 


Shadowing is a visualization technique that adds realism to computer-generated 
imagery. Shadows are an important part of the natural environment, providing 
information about sun position and altering the lighting characteristics of objects 
within the shadows. The lack of shadows in a scene reveals its synthetic nature 
and deprives the viewer of important visual clues. 

This report describes a simple technique based on gross object characteristics. It 
has the advantage of being fast, producing a minimal number of polygons, and 
having a minimal impact on frame rate. The generated shadow polygon is used as 
a surface detail polygon, providing shading of the underlying objects and terrain 
without affecting lighting of objects within the shadow. The algorithm can be 
used during run time to revise shadows based on time-of-day changes. 

This technique provides a visual context for the viewer. Simple shadows are used 
in today’s video games and provide important realism for the player. 

Real-time shadow visualization has a number of implications. For example, in 
combat simulation with semi-automated forces (SAF) and human-in-the-loop 
simulators, shadows must be considered when visibility and line of sight are 
computed. The human-in-the-loop simulation and the SAF must determine 
visibility in the same way or the simulation will not result in a “fair fight.” 


2. Computer-Generated Shadows 


Computer-generated imaging can employ a variety of methods to compute 
shadows. Ray tracing produces the most realistic shadows but has the 
disadvantage of being computationally intensive. Ray tracing computes the 
correct shading and lighting parameters for all parts of a scene from one or 
multiple light sources. In simple ray tracing, a regular grid is created to determine 
the coordinates of the rays to be fired from the light source. Rays are recursively 
fired from the light source through the grid into the scene until all points in the 
grid have been used. The color of the displayed pixel is the color of the object 
with the closest intersection to the light source. When all rays have been 
evaluated, the scene is shaded. [1] Ray tracing requires intense computation and is 
impractical for real-time visualization on all but the most high powered 


1 







supercomputers and image generators. Research in this area is concentrating on 
improved parallelism, data throughput, and pixel drawing speed. 

Shadow volumes require the development of a polygon representing the object’s 
shadow, which is then used to determine whether ^e light source is occluded. [1] 
Unlike ray tracing, which evaluates every pixel of a scene, shadow voliunes 
process polygonal edges. This technique requires the development of a shadow 
polygon, which is used to develop a shadow volume. The polygons of the shadow 
volume are tested relative to the light source. A front-facing polygon shades the 
object polygons behind it, and a back-facing shadow polygon means the object 
polygon is lit. Shadow volumes can be used in multi-pass algorithms, first to 
determine which polygons are lit, and then a finer computation of the actual 
shadow appearance. Shadow volumes require the development of the shadow 
volume, and the multi-pass nature of the algorithm requires further computation. 

This report describes an implementation of a fast shadow projection technique, 
described in [2], which can be used for real-time polygonal database 
visualizations. The code is written in the C++ progr amming language. The class 
structure is graphics language dependent, based on Silicon Graphics, Inc. (SGI) 
Performer graphics programming language. The user must replace SGI Performer 
function calls with equivalent functionality for use in other graphics 
environments. The source code is included in the appendix. 


3. Fake Shadows Technique 


The “fake shadows” technique uses the bounding box of an object to compute a 
reasonable approximation of the shadow. [2] The shadow is a simple projection of 
the appropriate object edges on the ground. The technique computes the 
bounding box of the object, determines the projection on the ground, and creates a 
mesh of 12 polygons, which represents the shadow. 

The algorithm uses the actual vertices of the object to create the shadow mesh. 
This makes the shadow appear to emanate from the object itself and not from an 
uncorrelated bounding box (see Figure 1). The shadow polygon is then placed on 
the shadowed object, anchored at the base by the appropriate vertices. The 
shadow is realistic for simple shapes (e.g., squares, parallelograms) and so 
includes a large number of objects in the natural environment such as buildings. 

3.1 Bounding Box 

The boimding box is determined using a “minimax” test. The object’s bounding 
box is computed when the model is loaded into the visualization system via the 
SGI Performer library function call, pfuTravCalcBBoxQ. This bounding box is 
passed to the library as an argument, but computing the shadows from the gross 


2 



bounding box introduces artifacts. For example, the bounding box of the object is 
the minimum X, minimum Y, maximum X, and maximum Y. These values may 
or may not correspond to a vertex on the object itself but to components of many 
different vertices. Therefore, this library assumes that the actual vertices that 
correspond to this bounding box are unknown. This library attempts to match the 
actual object vertices with the gross bounding box so that the shadow appears to 
emanate from the object itself and not from the gross bounding box. 



Bounding 

Box 


Figure I. Bounding Box Example. (Note that the edges of the bounding box do not 
correspond with the actual profile of the building.) 


The first step in determining the correct object vertices to use for the shadows is 
to orient the object on the ground with respect to the light source. The result is 
the Cartesian quadrant of the object with respect to the light source. Based on this 
quadrant, the bounding box vertices are combined to create five vertices. Table 1 
shows how the five vertices are detennined. 


3.2 Ground Projection 

When the five vertices are computed, these become the new bounding vertices. 
Vertices 1, 5, and 3 are used to compute the ground projection. The object 
vertices are tested against these three, and the closest vertices to them are used as 
anchor points for the shadow projection grid. The projection is a simple ray from 
the light source through the vertex to the ground. The three projection points are 
computed and stored. 


3.3 Mesh Creation 

The mesh is created from the three projection vertices in Paragraph 3.2 and from 
the bounding vertices 1 and 3 computed in Paragraph 3.1. The resulting five- 
vertex polygon represents the projection of the object onto the ground. However, 


3 



for certain objects, the sheer size of the projection presents problems. For 
example, sloping terrain presents a problem, as the ground can show through a 
large polygon when the terrain height changes within the bounds of the shadow 
polygon. Therefore, the five vertices are subdivided to create a finer mesh of 12 
polygons, which more closely conforms to the ground. Figure 2 shows the 
resultant mesh with the vertex numbering. 


Table 1 

Determination of Five Vertices 


Vertex 

Quadrant 1 

Quadrant 2 

Quadrant 3 

Quadrant 4 

1 

max X, max Y, 
min Z 

min X, max Y, 
min Z 

min X, min Y, 
min Z 

max X, min Y, 
min Z 

2 

max X, max Y, 
max Z 

min X, max Y, 
max Z 

min X, min Y, 
max Z 

max X, min Y, 
min Z 

3 

min X, max Y, 
max Z 

min X, min Y, 
max Z 

max X, min Y, 
max Z 

max X, max Y, 
max Z 

4 

min X, min Y, 
max Z 

max X, min Y, 
max Z 

max X, max Y, 
max Z 

min X, max Y, 
max Z 

5 

min X, min Y, 
min Z 

max X, min Y, 
min Z 

max X, max Y, 
min Z 

min X, max Y, 
min Z 



Figure 2. Shadow Vertex Numbering and Triangulation. 


4 



4. Graphics Display 


The graphics engine used for this project is the SGI Performer graphics 
programming language.[3] The shadowing algorithm is graphics language 
independent, as long as the capability for computing the bounding box and 
extracting the object vertices is available. 

The Performer libraries include a scene traversal mechanism to extract object- 
specific information from a loaded graphics object. This traverser allows the 
extraction of vertex coordinates, color, and texture values. The shadow library 
uses this capability to extract vertex coordinates and test them against the 
projection coordinates. 

The shadow is enclosed in a Performer object called a GeoSet (geometry set). 
This GeoSet is attached to the scene graph for rendering. 

The generated surface detail polygons have transparency, allowing the underlying 
geometry to show through, shaded by the shadow. 


5. Sample Pictures 


Figures 3, 4, and 5 show a scene with and without shadows. 



Figure 3. Terrain Database Visualization Without Shadows. 


5 









Figure 4. Terrain Database Visualization With Shadows Created by the Fake Shadows 
Technique. 



Figure 5. Close-up View of Buildings With Shadows. (Note how the terrain texture 
shows through the shadow.) 


6 




6. Conclusion 


This algorithm provides for rapid, single-pass, polygonally based shadowing of 
arbitrary objects with a minimum of computation and additional polygons. It is 
easier to use and faster than ray-tracing methods and can be used in systems that 
do not provide shadowing through multi-pass rendering, such as PC base image 
generators. Limitations of this method include the inability to directly model the 
geometry of the shadowing surface, and the method does not modify the lighting 
of properties of polygons underneath the shadow. However, the shadow polygon 
can be used as a mask to shade polygons, given the appropriate programming 
methodology. 






INTENTIONALLY LEFT BLANK 




References 


1. Foley, J., A. van Dam, S. Feiner, and J. Hughes, “Computer Graphics; 
Principles and Practice,” Addison-Wesley Publishing Company, New York, 
1993. 

2. Adams, L., “High-Performance Graphics in C: Animation and Simulation,” 
Wincrest Books, Blue Ridge Summit, PA, 1988. 

3. Clay, Sharon et al., IRIS Performer 2.0 C++ reference pages. Document No. 
007-2782-001, SGI, Mountain View, CA 1995. 


9 




INTENTIONALLY LEFT BLANK 



APPENDIX A 


SHADOW CLASS SOURCE CODE 



INTENTIONALLY LEFT BLANK 


SHADOW CLASS SOURCE CODE 


This appendix contains the source code and header file for the shadow class. A 
sample calling sequence is given. 


13 



INTENTIONALLY LEFT BLANK 


//********************************************************************** 
// shadow.c - This file contains modules to compute shadows on objects 
// The shadow computed is based on the bounding volume of the object. 

// The shadow class definition is found in the shadow.h header 
//********************************************************************** 
#include <iostream.h> 

#include <Performer/pf/pfGroup.h> 

tinclude "shadow.h" 

// 

// void ComputeShadow() - This function computes a shadow for the 
// given object. 

// 

void ComputeShadow(pfGroup *group, pfBox box, float ox, float oy, 
float oz, float heading, float lx, float ly, float Iz ) 

{ 

Shadow ^shadow = new Shadow; 

heading *= 57.295f; 

shadow->setObjectPos( ox, oy, oz ); 
shadow->setObj ectOrientation( heading ); 
shadow->setObjectBounds( box ); 
shadow->setObjectGraphic( group ); 

// Compute the shadow 

shadow->compute( lx, ly, Iz); 

} 


% 


15 




#include <Performer/pr/pfGeoMath. h> 

#include <Performer/pr/pfGeoSet.h> 

#include <Performer/pf/pfGeode.h> 

#include <Performer/pr/pfMaterial.h> 

#include <Performer/pfutil.h> 

#include <math.h> 

// Local Function Declarations 

typedef struct _vdata{ // Vertex data for the traverser 
float X, y, 2 ; // The test point coordinates 

float rx, ry, rz; // The returned vertex coordinatest 
float azimuth; // Rotation of the object in world space 

}VDATA; 

extern float GetZ( float, float ); 

extern long DetectCollisionWithGround( float x, float y, float z, 
float h, float p, float len,float *rx, float *ry, float *rz, 
long mask ); 

class Shadow{ 
public: 

Shadow( void ); 
void print( void ); 

void compute( float lx, float ly, float Iz); 
void update( float sx, float sy, float sz ); 
void setObjectPos( float x, float y, float z ); 
void setObjectOrientation( float az ); 
void setObj ectBounds( pfBox box ); 
void setObjectGraphic( pfGroup *group ); 
private: 

void setvert( int i, float x, float y, float z ); 
void setvertices( float sx, float sy, float sz ); 
void computeAngle( float xl, float yl, float zl, float x2, 
float y2, float 22 , float &h, float &p ); 
void createGraphic{ void ); 

void getNearestVertex( float vx, float vy, float vz, float dx, 
float dy, float &x, float Sy, float Sz ); 
pfGeode *getGraphic( void ){ return(this->geode); ) 
void display( void ); 
pfBox box; 

void CreateIList( ushort * ); 

void CreateMesh( pfVec3 *verts, pfvec4 ^colors ); 

float pos[3]; 

float azimuth; 

float vert[5][3]; 

pfGroup *group; 

pfGeode *geode; 

}; 

// 

// 

// 

void shadow::computeAngle( float xl, float yl, float zl, 
float x2, float y2, float z2, float Sth, float &p) 

float dx, dy, dz, len; 

dy = y2 - yl; 

dx = x2 - xl; 

dz = 22 - zl; 


len = sqrt( dy * dy + dx * dx ); 


h = fatan2( -dx, dy ); 

if( h < 0.Of ) 
h += 6.28; 

p =: fatan2( dz, len ); 

} 

// 

// 

// 

void Shadow::compute( float lx, float ly, float Iz ) 

{ 

float X, y, z; 
float dx, dy; 
float ox = pos[0 ] ; 
float oy = pos[l]; 
float 02 = pos[2 ] ; 
float h, p; 

setVertices( lx, ly, Iz ); 

dx = ( box.max[0] - box.min[0] ) / 2.0; 
dy = ( box.max[l] - box.minfl] ) / 2.0; 

// Get the nearest vertex on the object to the bounding box 
// corner. The shadow will be anchored to these points. 
getNearestVertex( vert[0][0] - ox, vert[0][l] - oy, 

GetZ( vert[0][0], vert[0][l] ), dx, dy, x, y, z ); 

setvert( 0, x + ox, y + oy, Getz( x + ox, y + oy )); 

vert[l][0] = X + ox; vert[l][l] = y + oy; vert[l][2] = box.max[2] 

getNearestVertex( vert[4][0] - ox, vert[4][1] - oy, 

GetZ( vert[4][0], vert[4][l] ), dx, dy, x, y, z ); 

setVert( 4, x + ox, y + oy, GetZ( x + ox, y + oy )); 

vert[3][0] = x + ox; vert[3][l] - y + oy; vert[3][2] = box.max[2] 

getNearestVertex( vert[2][0] - ox, vert[2][l] - oy, 

GetZ( vert[2][0], vert[2][l] ), dx, dy, x, y, z ); 

vert[2][0] = X + ox; vert[2][l] = y + oy; vert[2][2] = box.max[2] 

// Compute the projection on the ground from the three vertices 
for ( int i = 1; i < 4; i++ ) { 

computeAngle(lx, ly, Iz, vert[i][0], 
vert[i][l], vert[i][2], h, p ); 

if( DetectColllsionWithGround( vert[i][0], vert[i][1], 
vert[i][2], h, p, 500.0, £cx, &y, &z, 0 ) > 0 ){ 

setVert( i, x, y, GetZ( x, y ) + 0.05f ); 

} 

else{ 

cout << "No Intersection Found For Vertex ” << i << endl; 

cout << "No Shadow Made" << endl; 

return; 

} 


17 




} 


// Create the graphic object 
createGraphic(); 

// Add To The Scene 
display(); 

} 

// 

// Shadow Class Constructor 
// 

Shadow::Shadow( void ) 

( 

for( int i = 0; i < 5; i++ ) 

this->setvert( i, -1.0, -1.0, -1.0 ); 

geode = NULL; 
group = NULL; 

} 

// 

// 

// 

void Shadow::setObjectGraphic( pfGroup *group ) 
this->group = (pfGroup *)group->clone( 0 ); 

} 

// 

// Store the parent object's data 
// 

void Shadow::setObjectPos{ float x, float y, float z ) 

{ 

this->pos[0] = x; 
this->pos[l] = y; 
this->pos[2] = z; 

} 

// 

// 

// 

void Shadow::setObjectOrientation( float az ) 

{ 

this->azimuth = az; 

} 

// 

// 

// 

void Shadow::setObjectBounds( pfBox inbox ) 

( 

for( int i = 0; i < 3; i++ ){ 
box.min[i] = inbox.min[i]; 
box.maxfi] = inbox,max[i]; 

} 

} 

// 

// The shadow display function 
// 

void Shadow::display( void ) 

{ 

extern pfGroup *root; 

root->addChild( (pfNode *)this->getGraphic() ); 


18 




// 

// 

void Shadow::CreateIList( ushort *ilist ) 

static ushort 1[] = { 

0, 5, 9, 

5, 10, 9, 

10, 4, 9, 

8, 4, 10, 

5, 1, 10, 

10, 1, 11, 

11 , 8 , 10 , 

11, 3, 8, 

1, 6, 11, 

6 , 2 , 11 , 

2, 7, 11, 

7, 3, 11 

}; 

for( int i = 0; i < 36; i++ ) 
ilist[i] = l[i]; 

return; 

} 

// 

// 

// 

void Shadow::CreateMesh( pfVec3 *verts, pfVec4 *colors ) 

extern float GetZ( float, float ); 
pfVec3 tvec; 

for( int i=0;i<5; i++ ){ 

tvec.sub( vertsfi +1], verts[i] ); 

tvec.scale( 0.5, tvec ); 

verts[i + 5].add( verts[i], tvec ); 

verts[i + 5][2] = GetZ( verts[i + 5][0], verts[i + 5][1] ) + 0.1 

} 

tvec.sub( verts[8], verts[5] ); 
tvec,scale( 0.5, tvec ); 
verts[10].add( verts[5], tvec ); 

verts[10][2] = GetZ( verts[10][0], verts[10][l] ) + 0.1; 

tvec.sub( verts[3], verts[l] ); 

tvec,scale( 0.5, tvec ); 

verts[11].add( verts[1], tvec ); 

verts.[ll] [2] = GetZ( verts[ 11 ] [0], verts[ll][l] ) + 0.1; 

colors[5].copy( colors[0] ); 
colors[6].copy( colors[1] ); 
colors[7].copy( colors[3] ); 
colors[8].copy( colors[4] ); 
colors[9].copy( colors[0] ); 
colors[10].copy( colors[0] ); 
colors[11].copy( colors[l] ); 

} 

#define NVERTS 12 


19 





void Shadow;:createGraphic( void ) 

{ 

pfGeoSet *gset; 
pfGeoState *gstate; 
pfMaterial *material; 
pfVec3 *verts; 
pfVec3 *norms; 
pfVec4 *colors; 
ushort *ilist; 

verts = (pfVec3 *)pfMalloc{ 3 * NVERTS * sizeof( pfVec3 ), pfGetSharedAr^a( 

norms = (pfvec3 *)pfMalloc( 3 * NVERTS * sizeof( pfvec3 ), pfGetSharedArena( 

colors = (pfVec4 *)pfMalloc{ 3 * NVERTS * sizeof( pfVec4 ), pfGetSharedArena( 

ilist = (ushort *)pfMalloc( 3 * NVERTS * sizeof( ushort ), pfGetSharedArena( 

for( int i = 0; i < NVERTS; i++ ){ 
norms[i].set( O.Of, O.Of, l.Of ); 

} 

verts[0].set( this->vert[0][0], this->vert[0][1], this->vert[0][2] ) ; 
verts[4].set( this->vert[4][0], this->vert[4][1], this->vert[4] [2] ); 
verts[l].set( this->vert[l][0], this->vert[l][l], this->vert[l] [2] ); 
veri:s[2].set( this->vert[2][0], this->vert[2][1], this->vert[2] [2] ); 
verts[3].set( this->vert[3][0], this->vert[3][l], this->vert[3] [2] ); 

colors[0].set( 0.0, 0.0, 0.0, O.Sf ); 
colors[4].set( 0.0, 0.0, 0.0, O.Sf ); 
colorsfl].set( 0.0, 0.0, 0.0, O.Sf ); 
colors[2].set( 0.0, 0.0, 0.0, O.Sf ) ; 
colors[3].set( 0.0, 0.0, 0.0, O.Sf ) ; 

CreateMesh( verts, colors ); 

CreateIList( ilist ); 

gset = new pfGeoSet(); 

gset->setNumPrims( NVERTS ); 
gset->setPrimType( PFGS_TRIS ); 

gset->setAttr( PPGS_COORD3, PPGS_PER_VERTEX, verts, ilist); 

gset->setAttr( PPGS_NORMAL3, PFGS_PER_VERTEX, norms, ilist); 

gset->setAttr( PFGS_C0L0R4, PFGS_PER_VERTEX, colors, ilist); 

material = new pfMaterial(); 

material->setColor( PFMTL_AMBIENT, O.Of, O.Of, O.Of ); 
ma'cerial->setColor( PFMTL_DIFFUSE, O.Of, O.Of, O.Of ); 
material->setColorMode( PFMTL_FRONT, PFMTL_CMODE_AMBIENT AND DIFFUSE ); 
material->setAlpha( O.lSf ); 

gstate = new pfGeoState(); 

gstate->setMode( PFSTATE_TRANSPAEENCY, PFTR_ON ); 
gstate->setAttr( PFSTATE_FRONTMTL, material ); 
gstate->setAttr( PFSTATE_BACKMTL, material ); 
gstate->setMode( PPSTATE_ENTEXTURE, PF_OPF ); 
gstate->setMode( PPSTATE_ENLIGHTING, PP_ON ); 

gset->setGState( gstate ); 
this->geode = new pfGeode(); 
this->geode->addGSet( gset ); 




// 

// Shadow Print Function 
// 

void Shadow::print( void ) 

C 

for( int i = 0; i < 5; i++ ) 

cout « "Shadow Vertex ” « i « ” Is [" << this->vert[i] [0] << 

<< this->vert[i][1] << ”« this->vert[i][2] « ”]" << endl 

} 

// 

// Shadow Set Vertex Function 
// 

void Shadow: :setvert( int i, float x, float y, float z ) 

{ 

this->vert[i][0] = x; 
this->vert[i][1] = y; 
this->>vert [ i][2] = z; 

} 

// 

// 

// 

void Shadow: :setVertices( float sx, float sy, float sz) 

{ 

float h, p; 
int quad; 

computeAngle( sx, sy, sz, pos[0], pos[l], pos[2], h, p ); 

quad = ( h * 57.295 ) / 90 + 1; 

// cout << "Heading and Pitch [” << h * 57.295 << << 

// p * 57.295 « "]" « endl; 


switch( quad ){ 
case 4: 

vert[0][0] = this->box.max[0]; vert[0][l] 
vert[0][2] = this->box.min[2]; 
vert[l][0] = this->box.max[0]; vert[l][l] 
vert[1][2] = this->box.max[2]; 
vert[2][0] = this->box.max[0]; vert[2][l] 
vert[2][2] = this->box.max[2]; 
vert[3][0] = this->box.min[0]; vert[3][l] 
vert[3][2] = this->box.max[2]; 
vert[4][0] - this->box.min[0]; vert[4][l] 
vert[4][2] = this->box.inin[2] ; 
break; 
case 1: 

vert[0][0] = this->box.max[0]; vert[0][l] 
vert[0][2] = this->box.min[2]; 
vert[l][0] = rhis->box.max[0]; vert[l][l] 
vert[1][2] = this~>box.max[2]; 
vert[2][0] = this->box.min[0]; vert[2][l] 
vert[2][2] = this->box.max[2] ; 
vert[3][0] = this->box.min[0]; vert[3][l] 
vert[3][2] = this->box.max[2]; 
vert[4][0] = this->box.min[0]; vert[4][1] 
vert[4][2] = this->box.min[2]; 
break; 
case 2: 


this->box.min[l]; 
thiS”>box.min[l]; 
thiS'->box.max[l] ; 
this->box.max[l] ; 
this->box.max[1]; 

this->box.max[l] ; 
this->box.max[l]; 
this->box.max[l] ; 
thiS”>box.min[l]; 
this->box.min[l] ; 


21 



vert[0][0] = thls->box.inin[0]; vert[0][l] = tMs->box.max[l] ; 
vert[0][2] = this->box.min[2]; 

vert[l][0] = this->box.min[0]; vert[l][l] = this->box.max[l]; 
vert[l][2] = this->box.max[2]; 

vert[2][0] = this->box.min[0]; vert[2][l] = this->box.min[l ]; 
vert[2][2] = this->box.max[2]; 

vert[3][0] = this->box.max[0]; vert[3][l] = this->box.miii[l]; 
vert[3][2] = this->box.max[2]; 

vert[4][0] = this->box.max[0]; vert[4][l] = this->box.min[l] ; 

vert[4][2] = this->box.min[2]; 
break; 
case 3: 

vert[0][0] = this->box.min[ 03 ; vert[0][l] = this->box.min[l]; 
vert[0][2] = this->box-inin[2]; 

vert[l][0] = this->box.min[0]; vert[l][l] = this->box.miii[l] ; 
vert[1][2] = this->box.max[2]; 

vert[2][0] = this->box.max[0]; vert[2][l] = this->box.inin[l] ; 
vert[2][2] = this->box.max[2]; 

vert[3][0] = this->box.max[0]; vert[3][l] = this->box.max[l] ; 
vert[3][2] = this->box.max[2]; 

vert[4][0] = this->box.max[0]; vert[4][l] = this->box.max[l]; 

vert[4] [2] = this->box.ihin[2]; 
break; 

} 

) 

static int GetVertex( pfuTraverser *trav ); 
/****************************************************************/ 

/* GetNearestVertex() These next two functions traverse an */ 

/* object's geometry and returns the vertex which is closest */ 

/* to a given point. The object's vertices are transformed */ 

/* by the rotation of the object before the comparison. The */ 

/* rotated coordinate is passed back to the caller. */ 

/**************************************************************** / 
void Shadow::getNearestVertex( float x, float y, float z, 
float dx, float dy, float &rx, float &ry, float Strz ) 

{ 

pfuTraverser trav; 

VDATA *vdata = (VDATA *)pfMalloc( si 2 eof( VDATA ), pfGetSharedArena( ) ); 
pfuInitTraverser( &trav ); 

vdata->x = x; vdata->rx = vdata->x + dx; 
vdata->y = y; vdata->ry = vdata->y + dy; 
vdata->z = vdata->rz = z; 
vdata->azimuth = this->azimuth; 

trav.preFunc = GetVertex; 
trav,data = (void *)vdata; 

pfuTraverse( this->group, Sctrav ); 

// cout << "Nearest Vertex To " << x << « y « ” is " << vdata->rx << 

// << vdata->ry << endl; 

rx = vdata“>rx; ry = vdata->ry; 

pfFree( vdata ); 

} 

/*************** ******:*r******************:jt********************** / 

/* GetVertex() - The traverser callback routine. This function*/ 

/* gets each vertex in the object and does the distance test */ 


static int GetVertex( pfuTraverser *trav ) 

^ VDATA *vdata = (VDATA *)trav->data; 
pfNode *node = (pfNode *)trav->node; 
pfMatrix mat; 

// Make The Rotation Matrix 
mat.makeldent(); 

mat.makeRot( vdata“>azimuth, 0.0, 0.0, l.Of ); 

if( node->isOfType( pfGeode::getClassType())){ 
pfGeode *geode = (pfGeode *)node; 
int nGSets = geode->getNumGSets(); 
float tx, ty, distl; 
float dx, dy; 
tx = vdata->rx; 
ty = vdata->ry; 

dx = vdata->x - tx; // Deltas To The Test Point 

dy = vdata->y - ty; 

distl = dx * dx + dy * dy; 

for( int i = 0; i < nGSets; i++ )(' 
int min, max; 
int start, stop; 

pfGeoSet *gset = geode->getGSet( i ); 
int numPrims = gset->getNumPrims () ; 
int *primLens = gset->getPrimLengths(); 
int ptype = gset->getPrimType(); 

int nVerts = gset->getAttrRange( PFGS_C00RD3, &min, Stmax ); 
pfVec3 *verts; 
ushort *vindex; 
pfVec3 v; 

gset->getAttrLists( PFGS_COORD3, (void **)averts, avindex ); 

if( min == 0 && max == -1 ){ 
start = 0; stop = nVerts; 

} 

else{ 

start = min; stop = max; 

} 

// Find The Vertex Nearest The Test Vertex 

for( int j = start; j < stop; j++ ){ 
float dx2, dy2; 
float dist2; 

v.copy( verts[j] ); 
v.xformVec( v, mat ); 

// If the signs don't match, they are not in the same quadrant 
// Eliminate 

if( (vdata->x / v[0] ) < O.Of || ( vdata->y / v[l] < O.Of )) 
continue; 

dx2 = v[0] - vdata->x; 
dy2 = v[l] - vdata->y; 


23 



dist2 = dx2 * dx2 + dy2 * dy2 

if( dist2 < distl ){ 
tx = v[0]; 
ty = v[l]; 
distl = dist2; 

) 

} 

vdata->rx = tx; 
vdata->ry = ty; 

} 

) 

return PFTRAV_CONT; 


24 


NO. OF 

COPIES ORGANIZATION 


NO. OF 

COPIES ORGANIZATION 


1 ADMINISTRATOR 

DEFENSE TECHNICAL INFO CTR 
ATTN DTICOCA 
8725 JOHN J KINGMAN RD 
STE 0944 

FTBELVOIR VA 22060-6218 

I DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL Cl AI R REC MGMT 
2800 POWDER MILL RD 
ADELPHIMD 20783-1197 

1 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL Cl LL TECH LIB 
2800 POWDER MILL RD 
ADELPHI MD 207830-1197 

1 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL D D SMITH 
2800 POWDER MILL-RD 
ADELPHI MD 20783-1197 

1 OFC OF THE SECY OF DEFNS 

ATTN ODDRE (R&AT) G SINGLEY 
THE PENTAGON 
WASHINGTON DC 20301-3080 

1 OSD 

ATTN OUSD(A&T)/ODDDR&E(R) 
ATTN RJTREW 
THE PENTAGON 
WASHINGTON DC 20310-0460 

1 AMCOM MRDEC 

ATTNAMSMIRD WCMCCORKLE 
REDSTONE ARSENAL AL 35898-5240 

1 CECOM 

ATTN PM GPS COL S YOUNG 
FT MONMOUTH NJ 07703 

1 CECOM 

SP & TERRESTRIAL COMMCTN DIV 
ATTN AMSEL RD ST MC M 
H SOICHER 

FT MONMOUTH NJ 07703-5203 


1 US ARMY INFO SYS ENGRG CMND 

ATTNASQBOTD FJENIA 
FT HUACHUCA AZ 85613-5300 

1 US ARMY NATICK RDEC 

ACTING TECHNICAL DIR 
ATTNSSCNCT PBRANDLER 
NATICK MA 01760-5002 

1 US ARMY RESEARCH OFC 
4300 S MIAMI BLVD 
RSCH TRIANGLE PARK NC 27709 

1 US ARMY SIMULATION TRAIN & 
INSTRMNTN CMD 
ATTN J STAHL 
12350 RESEARCH PARKWAY 
ORLANDO FL 32826-3726 

1 US ARMY TANK-AUTOMOTIVE & 
ARMAMENTS CMD 
ATTN AMSTA AR TD M FISETTE 
BLDG 1 

PICATINNY ARSENAL NJ 

07806-5000 

1 US ARMY TANK-AUTOMOTIVE CMD 
RD&E CTR 

ATTN AMSTA TA J CHAPIN 
WARREN MI 48397-5000 

1 US ARMY TRADOC 

BATTLE LAB INTEGRATION & 

TECH DIR 

ATTNATCDB JAKLEVECZ 
FT MONROE VA 23651-5850 

1 NAV SURFACE WARFARE CTR 
ATTN CODE B07 J PENNELLA 
17320 DAHLGREN RD 
BLDG 1470 RM 1101 
DAHLGREN VA 22448-5100 

1 DARPA 

3701 N FAIRFAX DR 
ARLINGTON VA 22203-1714 

1 HICKS & ASSOCIATES, INC. 

ATTN G SINGLEY III 
1710 GOODRICH DR STE 1300 
MCLEAN V A 22102 


25 



NO. OF 

COPIES ORGANIZATION 


NO. OF 

COPIES ORGANIZATION 


I HQ AFWA/DNX 

106 PEACEKEEPER DR STE 2N3 
OFFUTT AFB NE 68113-4039 

1 US MILITARY ACADEMY 
MATHEMATICAL SCIENCES CTR 

OF EXCELLENCE 
DEPT OF MATH SCIENCES 
ATTN MDN A MAJ M D PHILLIPS 
THAYER HALL 
WEST POINT NY 10996-1786 

2 US ARMY INST FOR THE 

BEHAVIORAL SCIENCES 
ATTN DR BRUCE KNERR 
12350 RSCH PARKWAY 
ORLANDO FL 32826-3276 

2 US ARMY SIMULATION TRAIN & 

INSTRMNTN CMD 
ATTN JGROSSE PDUMANIOR 
12350 RSCH PARKWAY 
ORLANDO FL 32826-3276 

ABERDEEN PROVING GROUND 

2 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL Cl LP (TECH LIB) 
BLDG 305 APGAA 

10 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL Cl CD P JONES 

M THOMAS ANEIDERER 
G MOSS J FORESTER 
RKASTE JOMAY 
E HEILMAN C HANSEN 
B BODT 
BLDG 321 

2 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL HR SB PTRAN 
P CROWELL 
BLDG 518 


ABSTRACT ONLY 
1 DIRECTOR 

US ARMY RSCH LABORATORY 
ATTN AMSRL Cl AP TECH PUB BR 
2800 POWDER MILL RD 
ADELPHIMD 20783-1197 

1 COMMANDER 

US ARMY MATERIEL CMD 
ATTN AMCRDA 
5001 EISENHOWER AVENUE 
ALEXANDRIA VA 22333-0001 


26 


REPORT DOCUMENTATION PAGE 


Form Approved 
OMR Nn. r)7r)4-r)1RF 


Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, 
gathering and maintaining the data needed, and completing and reviewing the collection of information. Send cornments regarding this burden estimate or any other aspect of this 
collection of information, including suggestions for reducing this burden, to Washington Headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson 
Davis Highway, Suite 1204, Arlington, VA 22202-4302, and to the Office of Management and Budget, Paperwork Reduction Project (0704-0188), Washington, DC 20503. 


1. AGENCY USE ONLY (Leave blank) 


2. REPORT DATE 
Aueust 2000 


3. REPORTTYPE AND DATES COVERED 
Final 


4. TITLE AND SUBTITLE 

5. FUNDING NUMBERS 

A Class for Run Time Computation of Shadows for Polygonal Objects 

PR: 9T1110 

6. AUTHOR{S) 


Thomas, M.A. (ARL) 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

U.S. Army Research Laboratory 

Computational and Information Sciences Directorate 

Aberdeen Proving Ground, MD 21005-5067 

8. PERFORMING ORGANIZATION 
REPORT NUMBER 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS{ES) 

U.S. Army Research Laboratory 

Computational and Information Sciences Directorate 

Aberdeen Proving Ground, MD 21005-5067 

10. SPONSORING/MONITORING 
AGENCY REPORT NUMBER 

ARL-TN-156 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBUTION/AVAILABILITY STATEMENT 

12b. DISTRIBUTION CODE 

Approved for public release; distribution is unlimited. 



13. ABSTRACT (Maximum 200 words) 

The development of realistic synthetic environments for dismounted soldier visualization requires attention to environmental 
cues. Effects such as shadows provide the soldier information about time of day and orientation. Graphical databases that do not 
have shadows must compute them at run time. Various methods of computing and displaying shadows exist. This report 
presents a simple method that is based on bounding volumes. The method provides the rapid generation of shadows. These 
shadows do not provide light attenuation effects, but the environmental cueing provides valuable information for the dismounted 
soldier in a synthetic environment. 


14. SUBJECT TERMS 
computer graphics 
simulation 


terrain database 
visualization 


17. SECURITY CLASSIFICATION 
OF REPORT. 

Unclassified 


18. SECURITY CLASSIFICATION 
OF THIS PAGE 

Unclassified 


19. SECURITY CLASSIFICATION 
OFABSTRACT 

Unclassified 


15- NUMBER OF PAGES 

35 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-5500 


Standard Form 298 (Rev. 2-89) 
Prescribed by ANSI Std. 239-18 27 

298-102 



















