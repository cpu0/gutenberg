r AD-A236 i>RQ fATlONPAGE 

Form Approved 

OPU No. 0704-0188 

E_ Mimrnii 

rptriwpoiiM, lndudhgl>»lin»tem4«wlnglM>iucllGni.iimWng«ilrtmdM««ouroMg1i«ilnB«fdiii»Wilnlngl<*dHi 
«iBlM)Mtlma»Ofiiyo»h«r«ipK>e»«<licolwMDnotWoniMtt»atneluanBingmiBnitofi»duelngWilii»dw.iDWnMngaii 
Itiion Dnb HIghirair, S(ito 1204. Aiinglon, VA 222024302, wid 10 tw OMc* ol MMiMlIgn aid RigiMDty MUt. one* ol 

1. AGENCY USE ONLY fLeave Blank) 

2. REPORt DATE 3. REPORT TYPE AND DATES COVERED 

Rnal: 15 Aug 1990 to 01 Mar 1991 

4. TITLE AND SUBTITLE 

York Software Engineering Limited, York Ada Compiler Envionment (ACE) Release 
5, Intergraph InterPro 3050 Workstation (Host & Target), 901127N1.11073 

S. FUNDING NUMBERS 

National (Computing Centre Limited | | 

Manchester, UNITED KINGDOM / ‘ y ' j r- 

7. PERFORMING ORGANIZATION NAME(S) AND ADORESS(Ea' ^ U u 1 1 u u i u u i i 

National Computing Centre Limited '%-M 

Oxford Road P 

Manchester Ml TED v 

UNITED KINGDOM 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF_VSR_90502/70-910415 

9. SFH>ISORING/MONITORING AGENCY NAME(S) AND A0DRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Washington, D.C. 20301-3081 

10. SPOrrSORINGA40NITORING AGENCY 
REPORT NUMBER 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBLfTION/AVAILABILITY STATEMENT 


12b. DISTRIBUTION CODE 


Approved for public release; distribution unlimited. 


13. ABSTRACT (Maxmium 200 words) 

York Software Engineering Limited, York Ada Compiler Environment (ACE) Release 5, Manchester England, Intergraph 
InterPro 3050 Workstation (under CLIX R3.1)(Host & Target), ACVC 1.11. 


14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Repent, Ada Compiler Val. 

Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17. SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18. SECURITY CLASSIFICATION 

UNCLASSIFED 

19. SECURITY CLASSIFICATION 

OF ABSTRACT 

UNCLASSIFIED 

20. UMITATION OF ABSTRACT 

NSN 7540-01-280-550 



Standard Form 298, (Rev. 2-89) 


Prescribed by ANSI Sid. 239-128 







Certificate Info rmation 


The following Ada implementation was tested and determined to pass ACVC 1.11. Testing was 
completed on 901127. 

Compiler Name and Version: York Ada Compiler Environment (ACE) Release 5 

Host Computer System: Intergraph InterPro 3050 Workstation (under CLIX R3.1) 

Target Computer System: Intergraph InterPro 3050 Workstation (under CLDC R3.1) 


A more detailed description of this Ada implementation is found in section 3.1 of this report. 

As a result of this validation effort, Validation Certificate #901127N1.11073 is awarded to York 
Software Engineering Limited. This certificate expires on 01 JUNE 1992. 


This report has been reviewed and is approved. 



Jane Pink 

Testing Services Manager 

The National Computing Centre Limited 

Oxford Road 

Manchester 

Ml 7ED 

England 


Ada yali^mtM Organization 
Director, Compdter & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria 
VA 22311 




Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington 
DC 20301 


§1 5 24 004 


91-00481 

liiliiiii 


Valklatioo Siimiiufy Rqnrt 


AVF VSR 90502/70 


Yuft Sofhnre Engiiieeriiig Limitod 


Page ii of iii 


York ACE Release S 





AVF Cootrol Number. AVF_VSR 90502^0-910415 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Nomben #901127N1.11073 
York Software Engineming limited 
York Ada Compiler Environment (ACE) Release 5 
Intergraph InterPro 3050 Workstation 


Prepared 1^ 

Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester 
Ml TED 
England 



VSR Version 904)8-15 


for 



1 i/i cat 1, 



I 8r__.. 

CUtrltutior./ 

L- 

.Atvi'i jind/cr 
j opeolal 



AVF_VSR_9(I502/70 


ValidaikM Suomiaiy Repoft 
Yo(t Saltmre Bngiiieeriag LiniiBd 


Paseidfiii 


Yotfc ACE Rdeae S 


CCj 




DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 

Customs York Software Engineering I JmitfiH 

Ada Validation Facility: The National Computing Centre l JmitfiH 

Oxford Road 
Manchest^ 

Ml TED 
United Kingdom 


ACVC Version: 1.11 


Ada Implementation: 

Ada CompUer Name: 
Version: 

Host Computer System: 
Target Computer System: 


Customer’s Declaration 

I, the undersigned, representing York Software Engmening i JmitfMl, declare that YoA Software 
Engineering limited has no knowledge of deliberate deviations from the Ada Language Standard 
ANSI/MIL-STD-181SA in the implementation(s) listed in this declaration. 


A? - II - me 

Signature Date 



York Ada Compiler Environmoit (ACE) 

Release 5 

Intergraph InterPro 3050 Workstation (under CLDC R 3.1) 
Intngraph InterPro 3050 Workstation (under CLDC R 3.1) 






TABLE OF CONTENTS 


TABLE OF CONTENTS 

CHAPTER 1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT. 1 

1.2 REFERENCES . 1 

1.3 ACVC TEST CLASSES . 2 

1.4 DEFINITION OF TERMS . 2 

CHAPTER2 

2.1 WITHDRAWN TESTS. 1 

2.2 INAPPUCABLE 'TESTS . 1 

2.3 TEST MODIFICATIONS . 4 

CHAPTERS 

3.1 TESTING ENVIRONMENT . 1 

32 SUMMARY OF TEST RESULTS. 1 

3.3 TEST EXECUTION. 1 

APPENDIX A 
APPENDIX B 
APPENDIX C 


Validalioa Report AVF_VSR_90S08^ 

Yofk SoAmre Eagbieeriiig limiled TkMe of Goalent* - Pipe i of i Yofk ACE Rdeaie 5 

















INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada Validation Procedures 
[Pro90] against the Ada Standard [Ada83] using the current Ada Compiler Validation Capability 
(ACVC). This Validation Summary Report (VSR) gives an account of the testing of this Ada 
implementation. For any technical terms used in this report, the reader is referred to [Pro90]. A 
detailed description of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada Certification Body may make 
full and free public disclosure of this report. In the United States, this is provided in accordance with 
the "Freedom of Information Act" (5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not represent or warrant that 
all statements set forth in this report are accurate and complete, or that the subject implementation 
has no nonconformities to the Ada Standard other than those presented. Copies of this report are 
available to the public fix)m the AVF which performed this validation or from: 

Natioaal Technical Information Service 
S28S Port Royal Road 
Springfield 
VA 22161 

Questions regarding this report or the validation test results should be directed to the AVF which 
performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Akaandria 
VA 22311 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language. 

ANSI/M1L-STD-1815A February 1983 and ISO 8652-1987 

[Pro90] Ada Compiler Validation Procedures. 

Version 2.1, Ada Joint Program Office, August 1990. 




AVF_VSR_90502r» 


Chaplerl -Pa(el<)r4 


Yoft ACE RdeMC S 







[UG89] 


Ada Compiler Validation Capability User’s Guide. 
21 June 1989. 


INTRODUCTION 


1.3 ACVC TOST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC contains a 
collection of test programs structured into six test classes: A, B, C, D, E, and L. The first letter of 
a test name identifies the class to which it belongs. Class A, C, D, and E tests are executable. Class 
B and class L tests are expected to produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and produce a PASSED, FAILED, or 
NOT APPLICABLE message indicating the result when they are executed. Three Ada library units, 
the packages REPORT and SPPRT13, and the procedure QHECK_FILE are used for this purpose. 
The package REPORT also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test objective. The package 
SPPRT13 is used by many tests for Chapter 13 of the Ada Standard. The procedure CHECK_FILE 
is used to check the contents of text files written by some of the Class C tests for Chapter 14 of the 
Ada Standard. The operation of REPORT and CHECK_F1LE is checked by a set of executable tests. 
If these units are not operating correctly, validation testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B tests are not executable. 
Each test in this class is compiled and the resulting compilation listing is examined to verify that all 
violations of the Ada Standard are detected. Some of the class B tests contain legal Ada code which 
must not be flagged illegal by the compiler. This behaviour is also verified. 

Class L tests check that an Ada implementation correctly detects violation of the Ada Standard 
involving multiple, separately compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by implementation-specific 
values ~ for example, the largest integer. A list of the values used for this implementation is 
provided in Appendix A. In addition to these anticipated test modifications, additional changes may 
be required to remove unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this implementation are described in section 23. 
For each Ada implementation, a customized test suite is produced by the AVF. This customization 
consists of making the modifications described in the pre(^ing paragraph, removing withdrawn tests 
(see section 2.1) and, possibly some inapplicable tests (see Section 3.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the customized test suite 
according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to a 

given host and target computer system to allow transformation of 
Ada programs into executable form and execution thereof. 


A\F_ySRJ050ZnO 


ValfclUioB Sanumty Report 
Yofk Scftwite Eagiiieata( Liaiiled 


Chapter 1 - Pape 2 <44 


YaikACBReieaae5 






INTRODUCTION 


Ada Compiler 
Validation 
Capability (ACVC) 

Ada Implementation 

Ada Validation Facility 
(AVF) 

Ada Validation 
Organization (AVO) 

Compliance of an Ada 
Implementation 

Computer System 


Conformity 

Customer 

Declaration of 
Conformance 

Host Computer System 

Inapplicable test 

Operating System 


Validalioa Sanmniy Rqsott 
York SolhMfe Engineering Umited 


The means for testing compliance of Ada implementations, consisting 
of the test suite, the support programs, the ACVC user’s guide and 
the template for the validation summary report. 

An Ada compiler with its host computer system and its target 
computer system 

The part of the certification body which carries out the procedures 
required to establish the compliance of an Ada implementation. 

The part of the certification body that provides technical guidance for 
operations of the Ada Certification system. 

The ability of the implementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or part of a 
program and also for all or part of the data necessary for the 
execution of the program; executes user-written or user-designated 
programs; performs user-designated data manipulation, including 
arithmetic operations and logic operations; and that can execute 
programs that modify themselves during execution. A computer 
system may be a stand-alone unit or may consist of several inter¬ 
connected units. 

Fulfilment by a product, process or service of all requirements 
specified. 

An individual or corporate entity who enters into an agreement with 
an AVF which specifies the terms and conditions for AVF services 
(of any kind) to be performed. 

A formal statement from a customer assuring that conformity is 
realized or attainable on the Ada implementation for which 
validation status is realized. 

A computer system where Ada source programs are transformed into 
executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

Software that controls the execution of programs and that provides 
services such as resource allocation, scheduling, input/output control, 
and data management. Usually, operating systems are predominantly 
software, but partial or complete hardware implementations are 
possible. 


Chipler 1 - Page 3 of 4 


AVF_VSR_90502/70 

YoifcACBRcleMeS 







INTRODUCTION 


Target Computer 
System 

Validated Ada Compiler 

Validated Ada 
Implementation 

Validation 

Withdrawn test 


V ilid n ion Summaiy Report 
York Softimc Eogiiieerug i hnUnt 


A computer system where the executable form of Ada programs are 
executed. 

The compiler of a validated Ada implementation. 

An Ada implementation that has been validated successfully either 
by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to the 
Ada programming language and of issuing a certificate for this 
implementation. 

A test found to be incorrect and not used in conformity testing. A 
test may be incorrect because it has an invalid test objective, fails to 
meet its test objective, or contains erroneous or illegal use of the 
Ada programming language. 


Chapter 1 - Page 4 of 4 


AVF_VSR_90502W 
York ACE RdeaaeS 



IMPI.KMRNTAT10N DEPENDENCIES 


CHAPTER2 


IMPLEMENTATION DEPENDENCIES 
2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for this list of withdrawn tests is 
90-10-12. 


E28005C 

B28006C 

C34006D 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPUCABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant for a given Ada 
implementation. The inapplicability criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Issues and commonly referenced in the format Al-dddd. For this 
implementation, the following tests were inapplicable for the reasons indicated; references to Ada 
Issues are included as appropriate. 


B23003D and B23003E check that the limit of the input-line length is correctly enforced; this 
implementation does no such limit. (See section 2.3). 


The following 201 tests have floating-point type declarations requiring more digits than 
SYSTEM.MAX_D1GITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


AVF_VSR_90S02^ 


Validatioa Suauiiafy Rqioft 
Yoit SoOmre Bngiimrriiit Limited 


Chapter 2 - Page 1 of 4 


YoffcACEReleaaeS 





IMPLEMENTATION DEPENDENCIES 


In addition, the three tests C24113W..Y, included above, contain literals that exceed the 
implementation’s maximum numeric literal length of 256. 

The following 21 tests check for the predefined type LONG_INTEGER: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45612C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 


CD7101F 

C35702A. C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLOAT. 

C35713D and B86001Z check for a predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORT_FLOAT. 

C4SS31M..P and C4SS32M..P (8 tests) check fixed-point operations for types that require a 
SYSTEM.MAX_MANTISSA of 47 or greater; for this implementation, MAX_MANTISSA is less 
than 47. 

C45624A checks that the proper exception is raised if MACHINE_OVERFLO'WS is FALSE for 
floating point types with digits 5, For this implementation, MACHiNE_OVERFLOWS is TRUE. 

C45624B checks that the proper exception is raised if MACHINE_OVERFLOWS is FALSE for 
floating point types with digits 6. For this implementation, ’MACHTnE_OVERFLOWS is TRUE. 

C4A013B contains the evaluation of an expression involving ’MACHINE_RADIX applied to the most 
precise floating-point type. This expression would raise an exception. Since the expression must be 
static, it is rejected at compile time. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

C96(K)5B checks for values of type DURATION’BASE that are outside the range of DURATION. 
There are no such values for this implementation. 

CA2009C, and CA2009F, compile generic specifications and bodies or specifications and bodies of 
subunits of generic units in separate files. This compiler requires that no instantiations of the 
corresponding generics occur prior to the compilations of the generic body. 

LA3004A, LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F check for pragma INLINE for 
procedures and functions. 

CD1009C uses a representation clause specifying a non-default size for a floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation clauses specifying 
non-default sizes for access types. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code insertions. 


AVF_VSR_905(B/70 


Validatioa Summaiy Rqx)ft 
Yofk Softmre I igiiieaUig Limiled 


Chipier 2 - Page 2 of 4 


York ACB RdeMe S 








IMPLEMENTATION DEPINDENCIES 


BD9001A, AD9001B, ED9002A, AD9004A and BD9004B use pragma INTERFACE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package SEQUENTIAL_IO with 
unconstrained array types and record types with discriminants without defaults. These instantiations 
are rejected by this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO with unconstrained 
array types and record types with discriminants without defaults. These instantiations are rejected 
by this compiler. 

The tests listed in the following table are not applicable because the given file operations are 
supported for the given combination of mode and file access method. 


Test 

File Operation 

Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL lO 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL lO 

CE2102F 

CREATE 

INOUT HLE 

DIRECT :0 

CE2102I 

CREATE 

IN FILE 

DIRECT lO 

CE2102J 

CREATE 

OUT FILE 

DIRECT lO 

CE2102N 

OPEN 

IN HLE 

SEQUENTIAL lO 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL lO 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL lO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL lO 

CE2102R 

OPEN 

INOUt FILE 

DIRECT lO 

CE2102S 

RESET 

INOUT HLE 

DIRECT lO 

CE2102T 

OPEN 

IN FILE 

DIRECT lO 

CE2102U 

RESET 

IN FILE 

DIRECT lO 

CE2102V 

OPEN 

OUT FILE 

DIRECT lO 

CE2102W 

RESET 

OUT FILE 

DIRECT lO 

CE3102E 

CREATE 

IN FILE 

TEXT lO 

CE3102F 

RESET 

Any Mode 

TEXTJO 

CE3102G 

DELETE 


TEXT lO 

CE3102I 

CREATE 

OUT FILE 

TEXT lO 

CE3102J 

OPEN 

IN fFlE 

TEXT lO 

CE3102K 

OPEN 

OUT FILE 

TEXT lO 


The following 15 tests check operations on sequential, direct, and text files when multiple internal 
files are associated with the same external file; USE_ERROR is raised when this association is 
attempted. 

CE2107A.B CE2107E..G CD2110B CE2110D CE2111D 

CE2111H CE3111A..B CE3111D..E CE3114B CE3115A 


CE2203A checks that WRITE raises USE_ERROR if the capacity of the external file is exceeded for 
SEQUENTIAL_IO. This implementation does not restrict file capacity. 

CE2403A checks that WRITE raises USE-ERROR if the capacity of the external file is exceeded for 
DIRECT_IO. This implementation does not restrict file capacity. 


AVF_VSR_9(»02W 


Validatioa Summuy Rqxxt 
York Softmic Eogiiioering limited 


Chapter 2 - Page 3 of 4 


Yotfc ACE ReleaK 5 




IMPLEMENTATION DEPENDENCIES 


CE3304A checks that USE_ERROR is raised if a call to SET_LINE_LENGTH or 
SET_PAGE_LENGTH specifies a value that is inappropriate for the external file. This 
implementation does not have inappropriate values for either line length or page length. 

2.3 TEST MODmCATIONS 

Modifications (see section 1.3) were required for 64 tests. 

The following tests were split into two or more tests because this implementation did not report the 
violations of the Ada standard in the way expected by the original tests. 


B22003A 

B28003A 

B28003C 

B29001A 

B2A003A 

B2A007A 

B2A010A 

B32103A 

B35103B 

B37301B 

B43201A 

B44001A 

B44004A 

B49007A 

B54A20A 

B71001C 

B83011A 

B83011B 

B83012A 

B83E01A 

B83E01B 

B91001H 

B95004B 

B95061G 

B95077A 

B97102H 

BA3013A 

BAllOlB 

BAIIOIC 

BA3006A 

BA3006B 

BA3007B 

BA3008A 

BA3008B 

BCIOOIA 

BC1016A 

BC1202E 

BC2001E 

BC2061D 

BD2B14A 

BD2D03A 

BD4003A 

BE2201A 

BE2413A 


The following tests were split to remove any spurious errors reported after a legitimate and expected 
error report. 


B23004A 

B33102A 

B38101C 

B51001A 

B54A01C 

B55A01A 

B55B17A 

B66001C 

B91002F 

B95001D 

BC3204B 

BC3204D 

BC3205D 

BD2B03A 

BD2C14A 

BD3003B 


B23003D and B23003E were graded inapplicable by Evaluation Modification as directed by the AVO. 
These tests check that an implementation imposes a limit on the length of the input line; this 
implementation has no such limit. The AVO ruled that this behaviour is acceptable. 

B23003F was graded passed by Evaluation Modification as directed by the AVO. This test checks that 
an identifier may not exceed the limit on the input line length. Although this implementation 
imposes no such limit, it does limit identifiers to 128 characters (and numeric literals to 256); the 
AVO ruled that this behaviour is acceptable, and that this test thus constitutes a check that the 
identifier limit is correctly enforced. 

BC3204C and BC3205D when processed produced no errors because the compiler requires that no 
instantiations of the corresponding generics occur prior to the completion of the generic body. The 
tests were passed by applying the Processing Modification of re-compiling the obsolete main program, 
which cat •• all the illegal instantiations to be detected. The processing modification resulted in a 
split being • aired to BC320.‘5D to prove that legal instantiations do not produce errors (See above 
list). 


AVF_VSR_90502/70 


ValidaikMi Summaiy Report 
Yort Software Engiiieeriiig Limited 


Chapter 2 - Page 4 of 4 


York ACE Release S 





PROCESSING INFORMATION 


CHAPTERS 

PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT 

T'he Ada implementation tested with ACVC 1.11 was the York Ada Compiler Environment (ACE) 
Release 5, running on an Intergraph InterPro 3050 Workstation with 16mb main memory. The 
Operating System was CLIX R3.1. 

For a point of contact for technical and sales information, see: 

Ms Moira West 

York Software Engineering Limited 
University of York 
York 
YOl 5DD 

Testing of this Ada implementation was conducted at the customer’s site by a validation team from 
ihe AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test of the customized test 
suite in accordance with the Ada Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was obtained that conforms to the Ada 
Programming Language Standard. 

a) Total Number of Applicable Tests 3769 

b) Total Number of Withdrawn Tests 81 

c) Processed Inapplicable Tests 320 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point Precision Tests 0 

f) Total Number of Inapplicable Tests 320 (c-l-d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a-f-b-lf) 

All I/O tests of the test suite were processed because this implementation supports a file system. 
When this compiler was tested, the tests listed in section 2.1 had been withdrawn because of test 
errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler was tested, the tests listed in 
section 2.1 had been withdrawn because of test errors. The AVF determined th.nt 320 tests were 


AVF_VSR_90502/70 


ValkUUoo Summaiy Report 
York Software Engiiiocriiig Limitod 


Cbapicr 3 - Page 1 oT 2 


York ACE Rdcaie S 





PROCESSING INFORMATION 


inapplicable to this implementation. All inapplicable tests were processed during validation testing. 
In addition, the modified tests mentioned in section 2.3 were also processed. 

A Data Cartridge Tape containing the customized test suite (see section 1.3) was taken on-site by the 
validation team for processing. The contents of the Data Cartridge Tape were loaded directly onto 
the host computer. 

After the test files were loaded onto the host computer, the full set of tests was processed by the Ada 
implementation. 

Testing was performed using command scripts provided by the customer and reviewed by the 
validation team. See Appendix B for a complete listing of the processing options for this 
implementation. It also indicates the default options. The options invoked explicitly for validation 
testing during this test were: 

Compiler Options: 

-M "identifier" 

Make the compilation unit "identifier" the mai’^ subprogram. 


-c 

Suppress the loading of resulting object files. This is used when compiling individual subprogram 
units when other units that are needed to produce an executable file may not yet have been compiled. 

-P 

Generate a compilation listing. For a source file with a "A" suffix a compilation listing is produced 
in a file with a ".1st" suffix. 

Test output, compiler and linker listings, and job logs were captured on Data Cartridge Tape and 
archived at the AVF. The listings examined on-site by the validation team were also archived. 


AVF_VSR_90502/70 


Validation Sununaiy Report 
Yort Software Eogiiiocring Limitod 


Chapter 3 - Page 2 of 2 


York ACE Rdcaac S 







MACRO PARAMETERS 


APPENDIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. The meaning and 
purpose of these parameters are explained in [UG89]. The parameter values are presented in two 
tables. The first table lists the valued that are defin^ in terms of the maximum input-line length, 
which is the value for $MAX_IN-LEN-also listed here. These values are expressed here as Ada 
string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 

$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

SBLANKS 

$MAX_LEN_INT_BASED_LITERAL 

$MAX_LEN_REAL_BASED_LITERAL 

$MAX_STRING_LITERAL 


128 

(1..V-1 => >A’, V => ’!’) 

(1..V-1 => ’A’, V => 7’) 

(1..V/2 => ’A’) & 3’ & (1..V-1-V/2 => W) 
(1..V/2 => ’A’) & ’4’ & (1..V-1-V/2 => ’A’) 
(1..V-3 => ’O’) & "298" 

(1..V-5 => ’O’) & "690.0" 

’"’ & (1..V/2 => ’A’) & ’"’ 

’"’ & (l..V-l-Vy2 => ’A’) & ’1’ & ’"’ 

(1..V-20 => ”) 

"2:" & (1..V-5 => ’O’) & "11:" 

"16:" & (1..V-7 => ’O’) & "F.E:" 

’"’ & (1..V-2 => ’A’) & ’"’ 


AVF_VSR_90502^ 


Validatioa Summaiy Rqiatt 
Yocfc SoQmre Pnghicrriin limilcd 


Appeadii A - Page 1 of 4 


Yoft ACB ReieMe 5 





MACRO PARAMETERS 


The following table lists all of the other macro parameters and their respective values. 


Macro Parameter 


Macro Value 


$ACC_SIZE 

SALIGNMENT 


$COUNT LAST 


65536 


SDEFAULT MEM SIZE 


2147483647 


SDEFAULT STOR UNIT 


SDEFAULT SYS NAME 


UNIX 


$DELTA DOC 


0.0000000004656612873077392578125 


SENTRY ADDRESS 


SPARE MEM’ADDRESS 


SENTRY ADDRESSl 


SPARE MEM’ADDRESS 


SENTRY ADDRESS2 


SPARE MEM’ADDRESS 


SFIELD.LAST 
SFILE TERMINATOR 


SFDOED NAME 


NO FIXED 


SFLOAT NAME 


NO FLOAT 


SFORM STRING 


SFORM STRING2 


"CANNOT RESTRICT FILE CAPACITY" 


SGREATER THAN DURATION 


16777200.0 


SGREATER THAN DURATION BASE LAST 

2147483648.0 

SGREATER THAN FLOAT BASE LAST 3.402 83E+38 


SGREATER THAN FLOAT SAFE LARGE 


1.701 42E+38 


SGREATER THAN SHORT_FLOAT SAFE LARGE 

1.0E308 


V«y<tUicB Su—My Report 


AVF VSR 90502^ 


Yotk Softmre 


Appeadk A • Fife 2 of 4 


YortACE 







MACRO PARAMETERS 


$HIGH_PRIORITY 

$ILLEGAL_EXTERNAL_nLE_NAMEl 

$ILLEGAL_EXTERNAL_nLE_NAME2 

$INAPPROPRIATE_LINE_LENGTH 

$INAPPROPRIATE_PAGE_LENGTH 

$INCLUDE_PRAGMA1 

$INCLUDE_PRAGMA2 

$INTEGER_nRST 

$INTEGER_LAST 

$INTEGER_L.AST_PLUS_1 

$INTERFACE_LANGUAGE 

SLESS_THAN_DURATION 

SLESS_THAN_DURATION_BASE.nRST 

$LINE_TERMINATOR 

$LOW_PRIORITY 

$MACHINE_CODE_STATEMENT 

$MACHINE_CODE_TYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 

$NAME_LIST 


4 

MUCH_TOO_LONG_NAME_FOR_A_FILE 

MUCH_TOO_LONG_NAME_FOR_A_FILE_l 

-1 

-1 

PRAGMA INCLUDE ("A28006Dl.TS'r) 

PRAGMA INCLUDE CBZgOOeDl.TST") 

-2147483648 

2147483647 

2147483648 

C 

-16777200.0 

-2147483648.0 

ASC1I.LF 

0 

NULL; 

NO_SUCH_TYPE 

31 

15 

2147483647 

2147483648 

-2147483648 

BYTE.INTEGER 

UNIX 


VaKdalkMi Stuuiiaiy Rqioit 


AVF_VSR_9QS02^ 


YockSolliian 


Appewfii A - Page 3 of 4 


YoritACB 


5 





$NAME SPECIHCATIONl 


X2120A 


$NAME_SPECIFICATION2 

$NAME_SPECinCATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECX)RD_DEFINrnON 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

SVARIABLE.ADDRESS 

SVARIABLE^ADDRESSl 

SVARIABLE_ADDRESS2 

$YOUR_PRAGMA 


Vdtttioa SMHiy Report 
HoA SoftwMB ni^nrriH UaileJ 


X2120B 

X3119A 

16#FFFFFFFD# 

2147483647 

8 

UNIX 

ASCILFF 

NEW_INTEGER; 

NO_SUCH_MACHINE_CODE_TYPE 

32 

1024 

0.01 

SPARE.MEM’ADDRESS 

SPARE.MEM’ADDRESS 

SPARE_MEM’ADDRESS 

LIBNAME 


AppcMlhA-PHe4oC4 


AVF_VSRjM»n/7D 

YoriiACBReleMeS 






COMPILATION SYSTEM OPTIONS 


APPENDIX B 

COMPILATION SYSTEM OPTIONS 


The following compiler options are available 
-M identifier 

Make the compilation unit identifier the main subprogram. The main subprogram must be 
a parameterless procedure body. "-M main" is assumed if this option is not specified. 

-V Have the compiler produce verbose error messages. In particular, the compiler will attempt 
to isolate faults within expressions detected during overload resolution. 

-w Suppress all warning messages from the Ada compiler. 

-c £>o not load the resulting .o files together. 

-S Save the assembly code output of the compiler in a file with suffix "s" or ".S". No object files 
will be produced. 

-o outfile 

Name the resultant file outfile rather than the default "a.out". 

-O Invoke the object code improver on the compiler output. 

-P Generate compilation listings. A compilation listing is produced in a file with a ".1st” or 
".LST" suffix for each Ada source file on the command line. 

•g Generate extra symbol table information iotAdb(I). 

-V Print the version number of the compiler. 

-\directory 

Library files will be searched for in the named directory as well as the directory of the source 
file and the standard library /usr/lib/Ada. Any number of -I options may be given. 
Directories are searched in the order (i) directory of source file; (ii) directories specified by - 
I options (in the order given); (iii) /usr/lib/Ada. 

•U This option is an abbreviation for the library name ’/lib/libx.a’, where x is a string. If that 
does not exist, Id tries 7usr/Iib/libx.a’. A library is searched when its name is encountered, 
so the placement of a -1 is significant. 

•Rstring 


Validaliaa SawHiy RqKXt 


AVF_VSR_90S0V70 


Appcadis B - Paie 10(3 


Yo(t ACE 


S 







_ COMPILATION SYSTEM OPTIONS 

Suppresses the following run time checks (compare pragma suppress) according to the 
characters in the given string. 

a access_check 

d discriminant_check 

i index_check 

1 iength_check 

r range_check 

z division_check 

o overflow_check 

e elaboration^check 

s storage_check 

X all the above checks are suppressed 


Valktaliaa SMMHfjr Report 


AVF_VSR_9QSai2m 


Yoik 


B-r^2or3 


YoikACB 


S 



COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, are provided by the 
customer. Unless specifically noted otherwise, references in this appendix are to linker 
documentation and not to this report. 

No Linker Options. 


AVF_VSR_90SQI2^ 


Vilidrtioa Somauuy Report 
Yott Softwmre En giB ce rim Limited 


A|)|icadi( B - Pafc 3 of 3 


Yotfc ACE RdeMC S 






APPENDIX F OF THE Ada STANDARD 


APPENDDC C 

APPENDK F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to implementation-dependent pragmas, 
to certain machine-dependent conventions as mention^ in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The implementation-dependent characteristics 
of this Ada implementation, as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendbc are to compiler documentation and not to 
this report. Implementation-specific portions of the package STANDARD, which are not a part of 
Appendix F, are: 


package STANDARD is 

type INTEGER is range -(2**31)..(2**31)-1; 

type SHORT_INTEGER is range -(2**15)..(2**15)-1; 

type BYTE_INTEGER is range -128..127; 

type FLOAT is digits 6 range -3.402_82E-^38..3.402_82E+38 

type LONG FLOAT is digits 15 range -1.79769E-H308..1.79769E-t-308; 

type DURATION is delta 0.0167 range -16777215.0..16777215.0 

end STANDARD; 


AVF_VSR_905(B/70 


Vilidslioii Sumnuiy Report 
Yoffc Softwue Eagineaiiif Liiniied 


AppeadiK C - Pafc 1 


Yoit ACB RdeMC S 






Appendix F: Implementation-dependent characteristics 


In accordance with the LRM this section describes all the implementation-dependent characteristics of the 
York ACE Ada Compiler Release S. 

1. Implementation-dependent pragmas 

Two implementation-dependent pragmas are provided - pragma LIBNAME and pragma 
STACKSIZE. 

1.1. Pragma LIBNAME 

This pragma is used to associate a subprogram body written in a lan gua g e other than Ada with a 
caneqxxiding Ada subprogram specification in a package specification. The other-language body is 
supplied in lieu of an Ada body. Ibe pragma must be placed immediately before the s perifimiinn of the 
subprogram for which the fweign body is to be supplied. The single argument to pragma LIBNAME is the 
link-symbol of the foreign body. For C this is the routine name (case is significant). This pragma may also 
apply to objects and exceptions. 

eg- 


— Ada 

package TEST is 

pragma LIBNAME("iadd"); 
procedure IADD(I,J: in out INTEGER); 
end TEST; 

— C body for IADD 
void iadd(a,b) 

int *a,*b; 

1 

*a “ •a *b; 

) 


1.2. Pragma STACKSIZE 

This pragma can be used by the user to control (he amount of storage allocated to any task. Stack 
space for tasks is taken from the heap. By default, each task is allocated 16K bytes of storage. Pragma 
^ACKSIZE may appear at any point within a declarative part. The single argument, a static integer 
expression, specifies the storage required in bytes. 

In the following example TASKl will be allocated the default stack size of I6K bytes, TASK! and VI will 
both be allocated 32K bytes, V2 will be allocated 64K bytes. 





- 2 - 


package TEST is 

task TASKl; — STACKSIZE not used 

ONE_K : constant := 1024; 

pragma STACKSIZE(32*ONE_K); — first use of STACKSIZE 

task TASK2; 

task type TASKTYPE; 

VI : TASKTYPE; 

pragma STACKSIZE(64*ONE_K); — second use of STACKSIZE 

V2 : TASKTYPE; 

end TEST; 


2. Implementatioii-depcndent attributes 
There are no implementation-dependent attributes. 


3. Package SYSTEM 


package SYSTEM is 

type ADDRESS is new integer; 


type NAME is 
SYSTEM_NAME 
STORAGE_UNIT 
MEMORY_ilZE 
MIN_INT 
MAX_INT 
MAX_DIGITS 
MAX_MANTISSA 
FINE_DELTA 
TICK 


(UNIX) ; 

: constant NAME := UNIX; 

: constant 8; 

: constant := 214_748_3647; 

: constant := -2_147_483_648; 
constant ;= 214_7<8_3647; 

: constant := 15; 

: constant := 31; 

: constant 0.000_000_000_465_661_287_307_739_257_8125; 
: constant 0.01; 


subtype PRIORITY is INTEGER range 0..4; 
end SYSTEM; 


4. Restriciions on representation clauses 
Restrictions on record representation clauses are as follows: 

The static simple expression in any alignment clause must be 1.2 or 4. 

Component clauses for fields whose types are non-static or whose types depend upon discriminants 
are not allowed. 

Fields with a type which is not an array or record type must have a bit length which is less than or 
equal to 32. 

Fields with a type which is an array or record type must begin on a storage unit boundary (1 byte or 8 
bits) and must have a field length which is a multiple of a storage unit. 

Fields with a discrete type may be packed to a field length which is not a multiple of a storage unit 
(as long as this is feasible for the range of values for the ^pe) but the compiler will refuse to do this 
for array and record types. 

5. Implementation-generated names 
Implementation-dependent components are not implemented. 





-3- 


6. Interpretation of expressions in address clauses 
Expressions must be of type INTEGER. 

7. Restrictions on unchecked conversions and unchecked deallocations 
There are no restrictions on unchecked conversions and uiKhecked deallocations. 

8. Implementation-dependent characteristics of the input-output packages 

The following is a list of features particular to this implementation which relate to the predefined input- 
ouqrut packages: 

File names of more than 14 characters (excluding path prefix) cause USE ERROR to be raised. 

The actual parameter to "FORM" must be the empty string (""). 

Files produced by the CREATE procedure with a null string as argument are created in Hmp with a 
unique name, and then unlinked. 

After the raising of USE_ERROR, the file affected is in an undefined state. 

The procedure CREATE does a UNIX create on the file. i.c. it is created if it did not exist, and 
truncated to the empty file if it did. 

The procedure OPEN opens a file which must exist If the file is opened as an OUT F TT .f it is 
truncated to the empty file. 

Attempts to RESET pipes or terminals without changing mode result in USE_ERROR being raised. 
Resetting them with a change of mode has undefined results. 

Package DIRECT JO will only work in conjunction with terminals or pipes if they are used 
sequentially. Attempts to RESET these files raise USEJERROR. 

Package TEXT JO produces the following character sequences for the various terminators: 

line terminator: ASCII.LF 

page terminator line terminator followed by ASCIIJFF 

file terminator page terminator followed by end of file 

Package TEXT JO interprets the following character sequences for the various terminators: 
line terminator ASCIIJJ^ 

page terminator optional line terminator followed by ASCIIEF or end of file 

file terminator. optional page terminator followed by end of file 

For packages DIRECT JO and TEXT JO. type COUNT is defined: 

"type COUNT is range 0 .. 65536;" 

For package TEXT JO: 

"subtype FIELD is INTEGER range 0 .. 40;" 

INPUT-OUTPUT 

DIRECT_IO.COUNT'LAST 65536 
TEXT_IO.COUNT'LAST 65536 

FIELD'LAST 40 

9. Generic units 

This release of the compiler allows generic declarations, their bodies and any subunits to be placed in 
separate files. The only proviso is that the generic body (including any subunits) must either be compiled 
before instantiations of the generic arc made or be in the same file as the generic specification. The 
compiler will generate error messages and warnings if this is not the case. 

In addition, instantiation of the standard library packages DIRECT JO and SEQUENTIALJO with 
unconstrained types is not allowed and will result in an error message from the compiler. 
TEXT JO.ENUMERATION JO will raise USEERROR if instantiated with numeric types. 




-4- 


10. Numeric types 
10.1. Integer types 

Three predefined integer types are implemented as follows. 

BYTE_INTEGER 


BYTE_INTEGER'FIRST -128 
ByTE_INTEGER'LAST 127 
BYTE_INTEGER'SIZE 8 

SHORTJNTEGER 

SHORT_INTEGER'FIRST -32_768 
SHORT_INTEGER'LAST 32_767 
SHORT INTEGER'SIZE 16 


INTEGER 

INTEGER'FIRST 
INTEGER'LAST 
INTEGER'SIZE 


-2_147_483_648 

2_147_483_647 

32 


10.2. Floating Point types 

Two predefined floating point types are implemented {FLOAT and LONG_FLOAT) with the following 
attributes: 



FLOAT 

LONG_FLOAT 

DIGITS 

6 

15 

EMAX 

84 

204 

'EPSILON 

9.536_74E-07 

8.88178E-16 

'FIRST 

-3.402_82E+38 - 

1.79769E+308 

'LARGE 

1.934_28E+25 

2.57110E+61 

' LAST 

3.402_82E+38 

1.79769E+308 

' MACHINE_EMAX 

128 

1024 

' MACHINE_EMIN 

-125 

-1021 

' MACHINE_MANTISSA 

23 

52 

' MACHINE_OVERFLOWS 

TRUE 

TRUE 

'MACHINE_RADIX 

2 

2 

' MACHINE_ROUNDS 

TRUE 

TRUE 

'MANTISSA 

21 

51 

'SAFE_EMAX 

84 

204 

'SAFE_LARGE 

1.934_28E+25 

2.57110E+61 

'SAFE_SMALL 

2.584 94E-26 

1.94469E-62 

' SIZE 

32 

64 

'SMALL 

2.584 94E-26 

1.94469E-62 


10 J. Fixed Point types 

For any fixed point type, FIXED, the following attributes apply: 
nXED’SIZE 

nXED’MACHlNE.OVERFLOWS TRUE 
nXED’MACHINE.ROUNDS FALSE 






-5- 


10.4. Type DURATION 

The predefined fixed point type DURATION is declared as 

type DURATION is delta 0.0167 range -16777215.0 .. 16777215.0; 

11. Accuracy of universal and static expressions 

Evaluation of static exi»essions by the compiler is exact. Rational arithmetic is used followed by rounding 
to the accuracy requested. Universal expressions that are not static are evaluated with the same range and 
accuracy as the inedefined types LONG_FLOAT and INTEGER. 

11.1. Miscellaneous restrictions 

The compiler was written to impose as few restrictions on user programs as possible. The following points 
should however be noted. 

There is no limit placed on the number of characters per tine. 

A maximum of 128 characters per identifier is allowed. If the length of an identifier exceeds this 
limit it will be truncated by the compiler and an error message will be issued. 

A maximum of 2S6 characters per numeric literal is allowed. If the length of a numeric literal 
exceeds this limit it will be truncated by the compiler and an error message will be issued. 

Temporary files do not have names in this implementation. 

The main program should be a parameterless procedure otherwise the effect is undefined. 







