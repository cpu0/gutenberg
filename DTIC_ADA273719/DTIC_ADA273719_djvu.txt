REPORT DOCUMENTATION PAGE 


FomAfifinv0d 

OPhiNo. 


m 


PuHe iipenii« buntan Igr INa aalMUan al MoimMian ii (MimM to aMMS* 1 hMV pw MtvonM. Mudkig Hw «ma lor iMiMring InMrualian^ aMicMng aoMine dM 
Mliiiantalning<*wd«anMdari,andiMi«dngtti*aolMlionetbifBnn«lion. tandaainan H iapadbulWi turtu H m Maaay othaMp ad aHliii aDlialla n ainlamiaian.iwaluci n p 
ni QO MlInni tir -Tf- rr ’ -Q*^*^—^ -at-wi-g.— .i—i.,—^ wi—,— / y—^— — i2i5JiNii«an0wi*Hgh«N|r.tulMiaM. Arfnglon. VA 
««ana-*aw «»»n» «K« miia. al IwInMialini id ll^ulaMn fW iia W —hiin^ n n. PC MHOS. 





VADS Sun4 =) MIPS R4000/VAda-110-40630, Version 6.2, Host: 
Sun SPARCstation 2 , Target: SGI Indigo XS4000 
930901W1.11324 


Authors: 


AD-A273 719 


Wright-Patterson AFB 




Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 



12a. DISTRIBUTK3N/AVAILABIL 

Approved for public release; distribution unlimited 


(Maximum 

VADS Sun4 *) MIPS R4000/VAda-110-40630, Version 6.2, Host: 
SunOS 4.1.2, Targe: SGI indigo XS4000, ACVC 1.11 



Sun SPARCstation 2 under 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp 
iWSr/)(ii-siBEi§iy5^AJ^8’- Testing, Ada Val. Office. Ada Val. Facili 


n'»rT^eW:TiAl 


17.8ECU 
CLASS^ICATION 
UNCLASSIFED 


18. SECU 

UNCLASSIFED 




CLASSIFICATION 

UNCLASSIFED 



20. UMITA 
UNCLASSIFED 

























AVP Control NUaber: AVP<-VSR>571.0893 
0«t« VSR Conpletod: SeptMbor 28, 1993 

93-07-23-VRX 


Ada COMPILER 
VALIDATIQN SUMMARY REPORT: 

Certificate NUndber: 930901W1.11324 
Verdix Corporaticm 

VADS Sun4 -> MIPS R4000/VAda-110-40630, Version 6.2 
Sun SPARCstation 2 under SunOS 4.1.2 •> 

SGI Indigo XS4000 (bare board) 


(Final) 


Prepared By: 

Ada Validation Facili^ 

645 C CS6/SCSL 

Wright-Patterson AFB OH 45433-6503 


STIC QUALITY mSP E CT B D 3 


Accesion For 

NTIS CRA&I 
OTIC TAB 
Unannounced □ 
Justification ___ 


By. 

Disi 


libutionf 

Availability Codes 

Dist 

Avail a 
Spe 

nd / or 
cial 



93 l2 13 054 


93-30204 

illlllH 




certificate Inforaation 


The folloidng Ada implementation was tested and determined to pass ACVC 
1.11. Testing was cosfdeted on Septmnber 1, 1993. 

Coaf>iler Name and Version: VADS Sun4 -> HIPS R4000/VAda-110-40630, Version 6.2 

Host Computer System: Sun SPARCstation 2 

xinder SunOS 4.1.2 

Target Computer System: S6Z Indigo XS4000 (bare board) 

customer Agreement Number: 93-07>23-VRX 


See section 3.1 for any additional information about the testing 
envirmment. 

As a result of this validation effort. Validation Certificate 

930901H1.11324 is awarded to Verdix Corporation. This certificate expires 

two years after MIL-STD-1815B is approv^ by ANSI. 


This report has been reviewed and is approved. 



Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Hright-Patterson AFB OH 45433-6503 


Ada yai&^tfoh Organization 

Director^t^pomputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



n. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Washington DC 20301 






ATTACHMENT I 


DECLARATION OF CONFORMANCE 
Customer: Verdlx Corporation 

Ada Validation Facility: ASD/SCEL, NPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Inplementatlon: 

Compiler Name and Version: VAOS Sun4 -> MIPS R4000, Version 6.2, 

VAda-110-40630 

Host Computer System: Sun SPARCstation 2, SunOS 4.1.2 

Target Computer System: SGI Indigo XS4000 

(used as a MIPS R4000 bare board) 


Customer's Declaration: 

d/we], the undersigned, declare that [I/we] have no 
Icnowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 







TiOLE or CXMTSnS 


CBIffTER 1 IMIRQOUCnON 

1.1 USE or THIS VMJDATION SUMMRY REPORT.1>1 

1.2 RET E REN C ES .1-2 

1.3 ACVC TEST OASSES.1-2 

1.4 DETINITIGN OT TERMS.1-3 

C HAP TER 2 IMPLDIENIATIGN DEPENDENCIES 

2.1 WITHDRMK TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST nCOiriCATIONS.2-3 

C HAP TER 3 PROCESSmS INPORMATION 

3.1 TESTINS EMVIRQNHENT .3-1 

3.2 SUMMARY OP TEST RESULTS.3-1 

3.3 TEST EXBCUnCN.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B OGMPILATIGN SYSTEM OPTIONS 

APPENDIX C APPENDIX P OP THE Ada STANDARD 


















CHAPrm 1 


mniQOUCTIGN 


Tht Ada laplaMntation dascrlbad abov* Maa taatad according to tha Ada 
validation Procaduraa (Pro90] against tha Ada Standard [Ada83] using tha 
currant Ada CQi(>ilar validation Capability (ACVC). Ihia validation Suaaary 
Saport (VSR) givas an account of tte tasting of this Ada iaplaanntatian. 

For any tad^cal tanas usad in this raport, tha raadar is rafarred to 
[Pro90]. A datailad dascrlption of tha ACVC nay ba found in tha currant 
ACVC Uaar's Gulda (US89]. 


1.1 USE or IBIS VALIDAnGN SUMARY R EPORT 

Consistant with tha national laws of tha originating country, tha Ada 
Cartification Bo^y any aaka full and fraa public disclosura of this raport. 
In tha unitad Statas, this is providad in accordanca with tha "Fraadosi of 
Inforaation Act" (5 U.S.C. 1552). Tha rasults of this validation apply 
only to tha cosputars, oparating systaas, and coapilar versions idantifiad 
in this raport. 

Tha organizations raprasantad on tha signature page of this raport do not 
represent or warrant that all stataaants sat forth in this raport are 
accurate and coaplata, or that tha subject iaplazNntation has no 
nonconfondtlas to the Ada Standard other than those presented. Copies of 
this raport are available to tha public froa tha AVF %diich parforaed this 
validation or from: 

National Tedmical information Service 
5285 Port Royal Road 
^ringfiald VA 22161 

Questions regarding this raport or the validation test rasults should ba 
Erected to the AVF which parforaed this validation or to: 

Ada validation Organization 

Coaputar and Software B::ginaaring Division 

Institute for Oafansa Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 









nRKmcncN 


1.2 HEr E REW C ES 


lAdbi83] Rt£«r«nce Manual for tha Ada ProoraaBina Lanquaq*/ 

f5)iuary I9i! and ifo fl6l2-»8 7. 

(Pro90) Ada Ooapilar validation Proctduras , Varsion 2.1, Ada Joint 
Program Offica, August IPBO. 

[UG89] Ada CoBpllar validation Capability Usar^a Gulda , 21 Juna 1989. 


1.3 ACVC TEST C3ASSES 

Coagdianea of Ada iaplanantationa is tastad by mtana of tha ACVC. Tha ACVC 
contains a collaction of tast programs structurad into six tast classas: A, 
B, C, D, E, and L. Tha first lattar of a tast nans Idantifias tha class to 
^di it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at ccmpila time and link time, 
respectively. 

Tha axacutabla tests are written in a self-checking manner and produce a 
PASSED, EAZLED, or NOT APPLICABLE message indicating the result when t hey 
are executed. Three Ada library units, the packages KEPGRT and SPPBTIS^ 
and the procedure CHECK FILE are \ised for this purpose. The package REPCRT 
also provides a set of Identity functions used to defeat some compiler 
optimisatians allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRI13 is used by many tests for Chapter 13 of the 
Ada Standard. Ttw procedure CHECK FILE is used to dteck the contents of 
text files written by some of the ^ass C tests for Chapter 14 of the Ada 
Standard. The operation of BEPGRT and CBECK_FILE is diecked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language tisage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhidi must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests dieck that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are ejected at link time, and execution is attespted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest int^r. A list 
of the values used for this implementation is provided in appendix A. In 
addition to these anticipated test modifications, additional dianges may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent diaracteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 


9 











INXIIQDIICTIQM 


For oadi Ada laplMwntation, a cuatoaiaad taat suita it producad by tha 
AVr. Ihla cuatcadsatlon conalatt of aaking tha aodificationt daacrlbad in 
tha pracading paragriqph, rawing withdrawn taata (taa taction 2.1), and 
poatibly raaoving toat inapplicabla taata (taa taction 2.2 and [UG89]). 

In ordar to patt an ACVC an Ada iaplaaantation auat prooatt aach taat of 
tha cuatoaia^ taat auita according to tha Ada standard. 


1.4 DEPINITIGN OP TERMS 

Ada Coapilar Tha aoftwara and any naadad hardwara that hava to ba addad 
to a givim boat and targat co^putar ayataa to allow 
tranaforaation of Ada prograaa into axacutabla fora and 
axacution tharaof. 

Ada Coapilar Tha aaana for taating coaplianca of Ada iaplaaantationa, 
validation conaiating of tha taat auita, tha aupport prograaa, tha ACVC 
Ci^)ability uaar'a guida and tha taaplata for tha validation auBaary 

(ACVC) raport. 

Ada An Ada coapilar with ita boat coaputar ayataa and ita 

Iaplaaantation targat coaputar ayataa. 

Ada Joint Tha part of tha cartification body %diid) providaa policy and 
Prograa guidance for tha Ada certification ayataa. 

Office (AJPO) 

Ada Tha part of tha cartification body ^ch carriaa out the 

.alidation procaduraa required to aatabliah tha coaplianca of an Ada 
Pacility (AVP) ioplanentation. 

Ada The part of tha cartification body that providaa tachnicad 

VHdidation guidance for oparationa of tha Ada cartification ayataa. 

Organization 
(AVD) 

Coaplianca of Tha ability of tha inploaentation to paaa an ACVC version, 
an Ada 

laplenentation 

Coaputar A functional unit, consisting of one or more conputera and 

System associated software, that uses ccaao n storage for all or 

part of a program and also for all or part of tha data 
nacassary for tha axacution of tha program; axacutas 
usar-writtan or uaar-dasignatad programs; performs 
usar-dasignatad data manipulation, induing arithmetic 
operations and logic oparaticxis; and that can execute 
programs that modify thonaalvas during axacution. A 
coaputar system may ba a stand-alone unit or wby consist of 
several intar-connacted units. 


1-3 





INZIlCIXICnGN 


Confonity rulfillamt by a product, procoss, or aorvic* of all 
raquiraoents spacifiad. 

Cuatcner An individual or corporate mtity %iho antars into an 

agraaaant with an AVP which spacifias tha taraa and 
conditions for AVP sarvicas (of any kind) to ha parfomsd. 

Declaration of A fomal stataaent froai a custcaar assuring that conforaity 
Confomanca is realized or attainable on tha Ada iaplaaantation for 
which validation status is realised. 

Boat Coaputar A cosputar systaa %Aiara Ada source prograas are transforaad 
System into axacuti£>la fora. 

Inipplicabla A test that contains one or more test objectives found to be 
test irrelevant for tha given Ada ispleaentaticn. 

ISO International Organizatiem for standardization. 

LBM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
tha IJtH taka tha form ''<sactian>.<subsactian>t<paragraph>.” 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

ii^t/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
cosplete hardware inplemsntatims are possible. 

Target A conputer systmn vAiere the executable form of Ada prograas 

Coaster are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Isplmeentation either by AVF testing or by registration [Pro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this im^ementation. 

Withdrawn A test found to be incorrect and not used in conformity 
test testing. A test may be incorrect because it has an invalid 

test dsjective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHliPTER 2 


IHPLEMENIKnai DBPEMJDiaES 


2.1 WIlBDfUMN TESTS 

Ths following toots hsvs boon %rithdraMn by tbs AVO. Ths rstionsls for 
withdrawing ssch tost is svsilsbls fros sithsr ths AVO or ths AVP. Ths 
publication dots for this list of withdrawn tssts is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651h 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B830250 

C83026A 

B83026B 

C83041A 

B85001L 

C86001P 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

Ca223A 

BC1226A 

Ca226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

a)4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024O 

CD4031A 

CD4051O 

CD5111A 

CD7004C 

BD7005D 

CD7005E 

AD7008A 

C3>7006E 

AD7201A 

AD7201E 

a)7204B 

AD7206A 

BD8002A 

BD8004C 

a>9005A 

CD9005B 

CDh20lE 

CE2107I 

CE2117A 

aS2117B 

CE2119B 

aS2205B 

CE240SA 

CE3111C 

CE3118A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INhFPLICABLE TESTS 

A tsst is inapplicabls if it contains test dbjectivss vAiich ars irrslevant 
for a givsn Aito inplsmentation. Rsasons for a tsst's inapplicability nay 
bs supportsd by documsnts issusd by ths ISO and ths AJFO toown as Ada 
COsnsntariss and cosnnnly rsfsrsnced in ths fomat Al-ddddd. For this 
iaf>lsnontation, ths following tssts wars dstsnninsd to bs iniqpplicabls for 
ths reasons indicatsd; rsfsrsncss to Ada Cosnentariss ars includsd as 
i^ropriats. 


2-1 




lh« following 201 tests have floating-point type declarations 
requiring sore digits than sysl1M.MMC_DI6lTS: 


C24113L..Y (14 tests) 
C35706L..y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests dheck for the predefined type LGNG_INIBGER; for 
this iapleawntation, there is no such 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504P 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001N 

C86006C 

CD7101F 


C35713D and B86001Z dieck for a predefined floating-^int type with a 
name other than FLQMT, ICHSjnJOM, or SB0RT_FLQMT; for this 
iaplesientation, there is no such type. 

C45531M. .P and C45532H. .P (8 tests) chedc fixed-point operations for 
types that require a SYSTDl.mx MMITISSA of 47 or greater; for this 
ia^enentation, HMCJAMTISSA is less than 47. 

C45624A..B (2 tests) dieck that the proper exception is raised if 
MACHlNEjavERrLaNS is PhLSE for flostino point types and the results of 
various'" floating-^int operations lie outside the range of the base 
type; for this iiipleaentaticn, nycxiNEjQVERrLCSNS is TBUE. 

B86001Y uses the nase of a predefined fixed-^int ^pe other than type 
DUBAnOM; for this inplenentation, there is no such type. 

C96005B uses values of type DURATION'S base ^pe that are outside the 
range of type DURATION; for this isfilenentation, the ranges are the 
same. 


CD1009C chedcs %4iether a length clause can specify a non-default size 
for a floating-^int type; this implementation does not siqjport such 

sizes. 

CD2AB4A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specif non-default sizes for access ^pes; this implementation 
does not support such sizes. 

The tests listed in the following table chec)c that USE_ERR0R is raised 
if the given file qperations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Node 


Pile Access Method 







IMPLODimnGN DEPDODICIES 


CB2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

Off FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

incOt file 

DIRECT 10 

CE2102I 

CREATE 

IN Fllf 

DIRECT"10 

CE2102J 

CREATE 

OU¥ FILE 

DIRECT 10 

CB2102N 

C^N 

IN Tile 

sequential 10 

CE2102O 

RESET 

IN FILE 

sequential"io 

CE2102P 

(VQI 

OOF FILE 

SE(3UENTIAL 10 

CB2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CB2102R 

OPEN 

ukGt file 

DIRECT 10 

CE2102S 

RESET 

inout”file 

DIRECT 10 

CE2102T 

OPEN 

IN Fll£ 

DIRECT"10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUF FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT"10 

CE3102E 

CREATE 

IN Tile 

TEJCT l9 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CB3102G 

DELETE 

TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEJCT_IO 

CE3102J 

OPEN 

IN Tile 

TEXT 10 

CE3102K 

OPEN 

ouf FILE 

TEXT_IO. 


CE2203A checks that WRITE raises USE_ERRQR if the capacity of an 
external sequential file is exceeded; this ioplementation cannot 
restrict file capacity. 

CB2403A checks that WRITE raises USEJOBROR if the capacity of an 
external direct file is exceeded; this iiqplenentatian cannot restrict 
file ci^city. 

CE3304A checks that SET_LINE LENOIH and SET__PAGE_LENGTH raise 
USEJERROR if they specify an Inappropriate value for the external 
file; there are no inapprc^riate values for this ioplenentation. 

CE3413B checks that PACX raises LAYCXJr ERROR ^dien the value of the 
page number exceeds COUNT'LAST; for this Inplementaticn, the value of 
OOUNT'LAST is greater than 150000, making the checking of this 
^jective impractical. 


2.3 TEST nODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H Ba303F BC3005B BD2B03A BD2D03A 

BD4003A 


2-3 







CD1009A, CD1009Z, CSlCOSA, CD2A22J, CD2A24A, and CD2A31A..C (3 TesU) ware 
graded passed fay Evaluation Modification as direc ted ly the AVO. These 
tests use instantiations of the support procedure LENOIHjCBBCK, %Aiidi uses 
unchecked Conversion according to the interpretation givm in AI-00590. 
The AVO ruled that this interpretation is not binding un&r ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENQiHjCBECK'—i.e, the allowed Report.Failed messages have the 
general form: 

” * CHECK ON REPRBSENTATIGN FOR <TYPE IlO> FAILED.” 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one %d.th a para mete r of mode OUT (line 
36). This implemenation does not support pragma INTERFACE for procedures 
with parameters of mode OUT. The test was modified by commenting out line 
36 and 40; the modified test was passed. 


2-4 







CHAPTER 


3 


PROCESSING INFOBHAIICN 


3.1 TESTING ENVIRQNNEMT 

Ttw Ada inplamantation tastad in this validation affort is dascribad 
ada^pjataly by tha infonnation givan in tha initial pagas of this raport. 

For tachnical and salas infomatim about this Ada inplanantation, contact: 

Coray Ashford 
Vardlx Corporation 
1600 N.W. CoiBpton Driva 
Aloha, OR 97006-6905 


Testing of this Ada inplanantatim was conductad at tha custosier's site by 
a vali^tion team from the AVF. 


3.2 SUnHART OF TEST RESULTS 

An Ada lii|>lamantation passes a givan ACVC version if it processes aadi test 
of tha customized test suite in accordance with tha Ada Programning 
Language Standard, ^thar tha test is mlicabla or inapplicable; 
otherwise, tha Ada loplamentation fails tm ACVC [Pro90]. 

For all pro( ^<8sad tests (iniqppllcabla and applicable), a result was 
obtained thax. conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-^int precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except thMe that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 









PROCESSING INPCRMATION 


a) Total Nuabar of J^^plicabla Tasts 3809 

b) Total Nuabar of Withdrawn Tasta 95 

c) Procaasad Ini4)pllcabla Taata 65 

d) Non-Procaaaad I/O Taata 0 

a) Non-Procaaaad Floating-Point 

Praciaion Taata 201 

f) Total Nuabar of Inapplicabla Taata 266 {c*d**) 


g) Total Nuabar of Taata for ACVC 1.11 4170 (a<fb4-f) 


3.3 TEST EXECOnCM 

A aagnatic ti^ containing tha cuatonizad teat auita (aaa aaction 1.3) waa 
takan on-aita by tha vali^tion taam for procaaaing. Tha contanta of tha 
aagnatic tapa wara loadad onto a Sun Workatation and copiad ovar Bthamat 
to tha boat cooputar. 

Aftar tha taat filaa wara loadad onto tha boat coaputar, tha full aat of 
taata waa procaaaad tha Ada implanwntation. 

Taating waa parforaad tiaing coanand acripta providad by tha cuatoaiar and 
raviawad by tha validation taam. Saa J^pandix B for a ccaplata Hating of 
tha procaaaing optiona for thia InplMnantation. It alao indlcataa tha 
dafault optiona. Tha qptiona Invokad ajplicitly for validation taating 
during thia taat wara: 

Optiorv^tch Effact 

-w Sippraaa warning diagnoatica. 


Teat output, ccopilar and linkar liatinga, and jdb loga wara cepturad on 
magnatic tapa and archived at tha AVF. Tha liatinga axaminad on-aita by 
tha validation taam wara alao archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the nacro paraneters used for custosdsing the ACVC. 
The aeaning and purpose of these parasMters are eiqplained in [t)Q89]. The 
paraMter values are presented in two tables. The first table lists the 
values that are defined in term of the mximun input*>line length, which is 
the value for $MRX_IN LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V* represents the naxism i^put-line 
length. 


Macro Paramter 


Macro value 


$MAX_IN_LE>i 

$BIG_ID1 

$BZG_ID2 

$BIG_ID3 

$BIG_ID4 

$BIG_INr_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIGJ5TRING2 

$BLANKS 


499 — value of V 

(1..V-1 -> »A', V -> 'IM 

(1..V-1 -> ^A% V -> »2') 

(1..V/2 -> 'A') ft '3' ft 
<l..V-l-V/2 -> ^A") 

(1..V/2 -> »AM ft '4' ft 
(1..V-1-V/2 -> 'A') 

(l..V^3 -> ft ’•298" 

(1..V-5 -> »0») ft "690.0" 

ft (1..V/2 -> 'A') ft 

ft (1..V-1-V/2 -> »A') ft »1» ft 

(1..V-20 -> » ') 


$MRX LEN INT BASED LITERAL 

"2:" ft (1..V-5 -> 'OM ft "11:" 

$MAX LEM REAL BASED LITERAL 

“ - - - nig.ii 4 (1..V-7 -> '0») ft "P.E:" 


A-1 





$IIMC SIRING LITERAL 




& (1..V-2 -> 'A') « 




Hm following tabl* lists all of the other ancro paraa»ters and their 
respective values. 

Macro Paramter Macro value 


$ACC_SIZE 32 

$ALI(ailENT 4 

$OOUNrLAST 2__147__483_647 

SDEntfJLT_MEM_SIZE 16J777_216 

SDEFAULTJSTQRJUNIT 8 

$DBIM]LT_SySJAME SllMjCR0SS_R4000B 

$DeZ.1AJXX: 0.0000000004656612873077392578125 

$ENIRY_ADOBESS SYSTEM. 16*40#) 

$ENIRYJUDDRESS1 SYSTEM. V” (16*80#) 

$BnRY_ADORESS2 SYSTEM. "4” (16*100*) 

SPIELDJLAST 2_147_483_647 

$FlLE_TERMIMMrOR ' ' 

$FIXBD_NMIE NO^SUCBJTYPE 

$FLQMrjlAME N0_SllCHTYPE 

$PC»M_STRING "" 

$PGRM_STRINS2 "OmTTJtESTRlCT^nLEjCAPACITy” 

$ UREMER TRAN DUBATIGN 

100_000.0 

$GREATER TRAN OURATIGM BASE LAST 

T0_OOTf_0O0.0 

$GREATER TRAN FLOAT BASE LAST 

l.lB+308 

$GREATER TRAN FLOAT SAFE LARGE 

" 9.UE37 








$G»KEEIt TBMI SBQRT FLOAT SJ^ LMCE 
~ " 9.0137 “ 

$HZGB_IItICSI1Y 99 

$ZLLBGAL OtlDNAL FILE lAMEl 

" ■Vill«g*l/£il«_n«»/2) l%2102c.dat 

$ILLIGAL BCIBRAL FILE NMIE2 

Mll«9al/fil*j)aaM/CB2102C*.dat'' 

$INAPFII0aPItIA3B LIME LEMQIH 

“ -1 

$INAPFItQnaAIIB BMQE LBISXB 

“ -1 

$IICLUDEjn»GMAl OlUStlK ZNCLUDB (”A2800601.T8T*) 

$ZNCLUDE__FI»Gna PMGMK ZtXXUDE (*12800601. TST”) 

$imBGER_FIBST -2JL47_483_648 

$1NTBGER_IAST 2__147_483_647 

$INTBGERJLAST_PLUS_1 2_147_483_648 

$imBBncBjMiaaKE c 

$LESSJIBANJX1E»TIGN >100_000.0 
$LESS THAN DURATIGN BASE FIBST 

- “ - -iTy_ooo_ooo.o 

$LINE_TEEQ(INATOR ASai.LF « ASai.FF 

$LCBVJPRI0RI1Y 0 

$IIACHINE CODE STATEHEZFT 

OCOE_ 0 »(OP-> !«»); 

$IIA;CLXNBJCXX)BJRFE OCDEJO 

$IIANnSSBJXX: 31 

$I1AXJ>I6ZTS 15 

$I!AX_INT 2_147_483_647 

$IIAX_INT_PLUS__1 2_147_483_648 

$MIN_INT -2_147_483_^48 


TINT INTEGER 



$NMIE_LIST 

$NMiE_spKincMiaa 

$NMIB_SFB:iPICKnGN2 

$NMS_8PEanCKnON3 

$NBS_BASB)_INT 

$NDrjlEH_SIZE 

$iaNrjSTQRJUNIT 

$llEW_SySJAHE 

$PAGB_'mNZNMrQR 

$]IBOaR)_OBnNZTIGN 

$llBCXXtDJlM(B 

$TI^_SIZE 

$TMSKJ5TC»MGB_SIZE 

$TZCK 

$\mtiABLBjasnEss 

$VARIABLE_ADCKBSS1 

$V3«IABLE_AOORBSS2 

$yOUR_FRMaA 


SU(4jC3t0SSJl4000B 

/tc/vtOaS . 20A**t_sui t«»/acvcl. 11 /c/b/X 212GA 
/rcA*ds6.20A**tjnil t*»/acvcl. ll/c/t/X212(MB 
/tc/^nAa6 .20A**t_*ul t*»/acvcl. ll/c/a/X3119a 
16 «r 000000 B* 

16_777_216 

8 

SlIf4J3l06SJt4000B 
ASCII.PP 

RE OOro SUSP: OPBRMD; DO RECORD; 

O0DE_0 

32 

1024 

0.01 

VRR_l'ADORESS 
;aai_2'ADOBESS 
VAR 3'ADIltESS 


PRAGMA PASSIVE 








APPBOZX B 


aMPiLMncN sysm gptigks 


Him eoapilcr options of this Ads isfplsMntstion, ss dsseribsd in this 
Appsndix, srs providsd by ths custonsr. Unlsss ^pscificslly notsd 
othscwiss# rsfsrsncss in this sppsndix srs to cospilsr docuwntstion snd 
not to this rsport. 


Syntax 

sds (options] (sourcs_£ils]... (objsct_£ils.o]... 

Argunsnts 

objset fils.o non-Ads oMsct fils nas»s. ihsss filss will bs pssssd 
~ on to ths linksr and will bs linksd with ths ^pscifisd 

Ada objset filss. 

options options to ths can|dlsr. Ihsss ars: 

-A (disasssnbls) Disasssabls ths units in ths sourcs fils aftsr 
cooDiling thsn. -A can bs followsd by argunsnts that furthsr 
dsfins ths disasssably di^tlay (s.g., -Aa, -Abr -Ad, -Af, 

-Al, -AS). 

a Add hsxadscisal di^ilay of instruction bytss to 
disasssably listing, 
b Disasssabls ths unit body [dsfault]. 
d Print ths data ssetion (if prsssnt) as wall, 
f Uss ths altsmativs fomat for ou^ut. 

1 Put ths disasssably output in fils "filsjiaas.das" 
s Disasssabls ths unit aptc. 

-a fils nans 

(arBiivs) Trsat fils naaai as objset ardiivs fils ersatsd 
^ ar. Sines sona arBiivs filss snd with .a, -a is ussd to 
distinguish ardiivs filss froai Ada sourcs filss. 

-Bstatic/dynaadc (SPAROcnpilsr Ada only) 

(static) If static is indicated, ths Ada program is coapilsd 


B-1 







GCMPiiAncN SYsnn ovtzons 


and linkad atatically. Tha dafault is dynanic. 

-c Biqiprass tha control nassagas ganaratad «dian pragna BMZ 
and/br pragaa LIST ara ancountarad. 

-O idantifiar tn* val\ia 

(dafina) DaHna an idantifiar of a qpacifiad typa and valua. 

-d (dapandancias) Analysa for dapandancias only. Do not do 
aaattntic analysis or coda ganaration. Updata tha library, 
anrking mnv dafin^ units as unooapilad. lha -d option is 
usad by a.aaJca to astabliah d apandancias anong nsw filas. 
This ^ticn will attaapt to do imports for any units 
rafaranead froa outar librariaa. This should raduca 
ralocation and raduoa usar disk qpaca usaga. 


-E diractory 

(arror output) Without a diractory arguannt, ada procassas 
arror nsssagas \>sing a.arror and diracts a briaf aassaga to 
standard ou^t; tha rau arror anssagas ara laft in 
aourca_fila.arr. xf a diractory naan is givan, tha raw arror 
output is placad in diractory/sourca_fila.arr. Tha fila of 
raw arror anssagas can ba usad as in^t to a.arror. Gnly 
ana -a or >E option should bo usad. 

-a (arror) Procass coopilaticn arror anssagas using a.arror and 
sand it to standard ou^t. Only tha scurca linos containing 
arrors ara listad. Only ona -a or •E option should ba usad. 

-Efarror fila sourca_fila 

(arror) Procass iburca fila and placa ai^ arror nassagas 
in tha fila indicatad 5y arror_fila. Nota that thara is 
no spaca batwsan tha -Ef and arror_fila. 


-El diractory 

(arror listing) Sane as tha -E option, axcapt that a source 
listing with arrors is produood. 

-al (arror listing) Intarqwrsa arror nassagas anong source 
lines and direct to standard ou^t. 

-ElfarrorjCila source file 

(error listing) Stine as the -Ef option, except that a source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error nassagas using a.arror, 
enbed than in tha sourca file and call the mviroiaHnt editor 
ERROR EDITOR. If ERR0R_EDIT0R is defined, the environannt 
variaiEle ERR0R_PA1TBRN should also be defined. ERRORJPATTERN 
is an editor seardi cennand that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 


B-2 







CXXPIIAnCN SYBTBI OTTIGNS 


ISm valu* of th» omriror—nt variahl* BOOMEMBS, if Mt, 
it uMd instMd of th* dofault tab Mttings (8). 

•P (full DIMA) Do not trl« tha DIMA true bafora output to 
nat fllas. To aava disk ^ca, tha DIMA traa will ba 
triaaad so that all pointars to nexSat that did not involva 
a subtraa that dafina a syabol tabla will ba nullad 
(uniats thosa nodas ara part of tha body of an inlina or 
ganarie or cartain othar valuat naading to ba ratainad for 
tha dabugging or coapilation inforantlan). Iha triaadng 
ganarally raaovat initial valuas of variablat and all 
statasants. 

(GUkS) Dl^)lay suggastad valtias for tha MlNj5UkS_ADCR 
and MMCJMkSJtfXA INFO diractivas. 

-K (ka^) Kaap tha intaoMdiata languaga (IL) fila producad 
by tha asapilar front and. Tha IL fila will ba placad in 
tha .objacts diractory with tha fila naM Ada_tourca. 

-L libraryjnasM 

(library) Oparata in VkDS library libratyjnana. 

(Dafault: currant working diractory] 

-Ifila abbraviation (VkDSsalf only) 

(library saarch) This is an option passad to tha ld(l) 
linkar, tailing it to saardi tha tpacifiad library fila. 
(No tpaca betwaan tha -1 and tha fila abbraviation.) 

-M unit naan 

(nnTn) Produce an axacutabla prograai by linking tha naand 
unit as tha nain program, unitjnana must alraa^ be 
compiled. It must ba either a paranatarlass procedure or 
a paranatarlass function returning an integer, lha 
axacutabla program will ba named a.out unless overridden 
with tha -o option. 

-K source fila 

(mainT Produce an axacutabla program by compiling and 
linking source fila. Tha main unit of tha program is 
assunad to ba Bm root name of tiia fila (for foo.a tha 
\mit is foo). Only one file say ba preceded by -n. Tha 
executable program will ba nani^ a.out xnlass overridden 
with tha -o option. 

-N (no coda sharing) Coapila all generic instantiations 
without sharing coda for their bodies. This option 
overrides tha fflMa;_Baoy INFO directive and the SHAREjOCXffi 
or SHMlEJBOOY pragmas. 

-0(0-91 

(o^imiza) Invdca tha code optimizer. An optional digit 
(there is no space bafora tha digit) provides the level of 






OCHPIIAnON SY8IEH OPHCNS 


optiaiutlon. Um default is «04. 

-O full optiodsation 

-CO no optisiizatian (usa for debugging) 

-01 copy propagation, constant folding, reaoving 
de^ variables, subsusdng ooves between scalar 
variables 

-02 add c oBMon subexpression eliadnation vrithin 
basic blocks 

-03 add global iroaewn subexpression eliaination 
-04 add hoisting invariants from loops and address 
optisdsations 

-05 add range optisdsations, instruction sdwduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one aore pass of induction expression reduction 
-06 add one aore pass of induction expression reduction 
-09 add one aore pass of indiMtion expression 

reduction and add hoisting expressions ccawc i n to 
the th«i and the else parts of if stateasnts 

Hoisting from brandies (and cases alternatives) can be slow 
and does not always provide significant perforaance gains so 
it can be suppressed. 

-o executable file 

(oulq^t) Ihis option is to be used in conjunction with 
the -M option, executable file is the naae of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R >»DS_library 

(reooapile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date, vms library is the library in whim the 
reconpilation Ts to occur. If it is not specified, the 
reconpilation occurs in the current working directory. 

-r (recreate) Recreate the library's TABLE file. This c^ion 
reinitializes the file and exits. This allows recovery fron 
"(lUAS exhausted” without recospiling all the files in the library. 

-S (suqppress) Jpply pragma SUPPRESS to the entire coapilation 
for all suppressible checks. 

-sh (show) Display the nase of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print cospiler version number, date and time of 
compilation, name of file coepiled, command iiput line, 
total compilation time and error summary line. Storage tisage. 


B-4 




ccKPiLMncN sysm asnots 


Infoimtiaa i^nut th* object file is provided. 

-w (warnings) Suppress warning diagnostics. 
source_£ile naae of the source file to be conpiled. 

Description 

The ada coanand executes the Ada coapiler and ccapiles the nawd Ada 
source file. The file nust reside in a VhDS library directory. The 
ada.lib file in this directory is sedified after each Ada unit is 
coapiled. 




is used, the coapiler autoaatically invokes a.Id and builds a cooplete 
program %rith the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
^pendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a coapiler for another 
language) may be given as argumants to ada. These files will be passed 
on to the linker and trill be linked with the specified Ada object files. 

Command line options nay be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VMDS compilers may be simultaneously available on a single 
system. Because the ada command in any VM36_locatioivl>in on a system 
trill execute the correct compiler componentis based upon visible 
library directives, the option -sh is provided to print the name of 
the compommts act^ly executed. 

Program listings with a disassembly of madiine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from differmt directories are 
compiled in the same ada library using the -L option (even if the 
contents and mit names are different), the second compilation will 
overwrite the first. For example, the compilation of 
/\}sr/directory2/foo.a -L /hsr/VadsA*Bt will overwrite the 
compilation of /Imr/directoryl/foo.a -L /hsrAads/test in the 
VXDS library /\3Mt/v9d»/tmut. 

Diagnostics 

The dia^p»stics produced by the VADS compiler are intmded to be 
self-ei^anatory. Host refer to the RN. Bad) RK reference includes a 
section nudber and optionally, a paragraph number «sclosed in 
parentheses. 


B-5 






OQHPIIATIGN SYSmt OPTIONS 


LINKER QPTZGNS 

Hw linker options of this Ada isplsaentation, as described in this 
Appendix, are provided by the custoner. unless specifically noted 
othervise, refermces in this appendix are to linker docusmtation and not 
to this report. 


Syntax 

a.Id (options] unitjUMS [linkerjopticns] 

Arguments 

linker mtions 

Xll arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

c^ions options to the a.Id coasmnd. These are: 

-DO (objects) Use partially linked objects instead of archives 
as an interasdiate file if the mntire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(inclixling ULTRIX, BP-UX and intern V). (VADSself only) 

-DT (time) Displays hov long eadt phase of the prelinking process 
takes. (VADSself only) 

-Du unit list 

(xml'Es) Traces the addition of Indirect dependencies to the named 
laiits. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily diosen for elaboration. (VADSself c»ly) 

-OX (debug) Debug memory overflow (use in cases diere linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 

-E unit name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present vhen mai^ d>ject 
files are being linked. (SGI only) 

-L libraryjiame 


B-6 





OOKPILATIGN SYSTBl QPnCKS 


(library) Collect inforoation for linking in library rmm inataad 
of tha currant directory. However, place the execuuSble in the 
current directory. 

-o executable file 

(ou^t) Um the specified fielnaae as the naae of the ou^ut 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the naae of the tool executalsle but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
si^ress linking. 

-v (verbose) Print the linker cosnand before executing it. 

-V (verify) Print the linker coonmnd but suqppress execution. 

-w (warnings) Suqppress warning messages. 
unit_naine 

name of an Ada \siit. It must name a non-generic subprogram. 

If unit name is a function, it must return a val\ie of the 
type SlSiCARD.imBCZR. Ibis integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unlt_name a main 
program and calls the ld(l) linker to link together all Ada and 
other lan^ge <^jects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada compiler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITBn 
^rectives that allow the automatic linking of c^ject modules 
compiled from other languages or Ada dsject modules not named 
in context clauses in the Ada source. Any number of WITHn 
directives may be placed into a lib rary but they must be 
numbered contiguously beginning at WIT^. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITH!:LlNK:object_f ile: 

WITH2:LINK:archive file: 


B-7 




CCHPIIATICfl SySnSH OPTIGMS 


NIIBn dir«ctiv«s nay be placed in the local Ada libraries or in 
any VAD6 library on the search list. 

A WIlHn directive in a local VADS library or earlier on the 
library seardi list will hide the sane nunbered WXTBn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Cooputer Systens, the 
USE_LASTJLINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and di^)endencies. 

VADS__locatio(vl3ln/a.ld is a wrapper progran that executes the 
correct executable based upon directives visible in the ada.lib 
file. Ihis pemits multiple VADS conpilers to exist on the sane 
host. The -sh cption prints the nane of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net filas directory 

.dsjects/* Ada object files 

VAD6_locatiorv/standar^* startup and standard library routines 

Diagnostics 

Self-e]q)lanatory diagnostics are produced for missing files, 
etc. AcWtional messages are produced by the Id linker. 







APPEX4DIX C 


APPEXOIX F OF TBE Ada STANDARD 


Tha only allowad inplanantation dtpandaneiaa corraspond to 
iaplanantation-dapandant pragtnas, to cartain nadiina-dapandmt convantiona 
at mantionad in Chaptar 13 of tha Ada Standard, and to cartain allowad 
rastrlotions on reprasantation clauses. Tha iaplesentation-dapandant 
characteristics of this Ada inplaaentation, as described in this appendix, 
are provided by tha custcner. Unless specifically noted otherwise, 
rafarancas in this ^ipandix are to coopilar docunsntatlon and not to this 
ra|»rt. InplaiBantation-spaciflc portions of tha package STANDARD, vAiich 
are not a part of appendix F, are: 


package STANDARD is 


type INIBGES is range -2147483648 .. 2147483647; 

SBQRT INTEGER is range -32768 .. 32767; 
type TINYj&lTEGER is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282E4-38 .. 3.40282Ef38; 
tj^ SBQRT FLOAT is digits 6 range -3.40282Bf38 .. 3.40282E+38; 
type LONG FLOAT is digits 15 range -1.79769313486232Ei'308 .. 

1.79769313486232B+308; 

type OURATICXf is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 











APPDDIX F or 1HB Ada STMCARD 


APPENDIX F. Iiqplaaantation-Oapandant Charactaristics 


1. laiplanantation-Dependent Pragaaa 

1.1. INLINEJONLY Pragma 

The INLINE ONLY pragma, %iA)en \iaed in the same way as pra^sa 
INLINE, indicates to the compiler that the subprogram must 
aliMys be inlined. This pra^na also suppresses the genera¬ 
tion of a callable version of the routine uhidi saves code 
space. If a user erroneously makes an INLINEjQNLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRM1_ERROR will be rais^ at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is cmly allowed within a library- 
level package spec or body. It specifies that all dt>jects 
in the package be initialized as requested bj the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are alvmys (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an ddject cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefine? Ada packages, but provides no user access. It is 
used only to implement code bodies for %diich no actual Ada 
body can be provided, for example the HACHINEjOODE package. 

1.4. SBAREjOOM: Pragma 

The SHAREjOQCEE pragma takes the name of a generic instantia- 
tioi or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library usiit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic, fttwn the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 


C-2 










APPOOIX P or IHE Ada SZMCARD 


ganaratad for othar instantiations of tha saa» ganaric. 
Whan tha sacond argusMit is lALSE aadi instantiation «fill 
gat a uniqua cofv of tha ganaratad coda. Tha axtant to 
ahidi coda is mrad batwaan instantiations dapwids on this 
pragaa and the kind of gmeric foraal paraaetars daclarad 
for tha generic unit. 

Tha nans pragma SHAKE BOOT is also recognized by the iapla- 
nantation and has Bia sane affect as SHAREjOODB. It is 
included for coapatability with earlier versions of VAD6. 

1.5. NO_imGE Pragma 

Tha pragaa suppresses tha generation of tha iasiga array used 
for tha IHMjE attribute of aniawration types. This alisH 
inatas tha overhead required to store tha array in the exe¬ 
cutable image. An attempt to use tha IHAGB attribute on a 
type %hosa imga array has bean suppressed %fill result in a 
compilation warning and PROGKMIJERRQR raised at run time. 

1.6. EXTEBNALJAHE Pragma 

The EXTERNAL NAME pragma takas tha name of a subprogram or 
variable dsTinad in Ada and allows tha user to specify a 
different external name that may be used to rafaranca tha 
entity from othar lan^gas. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INIERFACE_NAHE Pragma 

The INTERFACE NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the secondr link argument. The pragma 
is allowed at the place of a declaraTive item in a package 
specification and must apply to an dbject or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access The 

object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IHPLlCITjOQOE Pragma 

Takes one of the identifiers GN or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 


C-3 







APPBCIX F or THE Ada 8TMI3MS) 


eeapllar b* alloMad or dlMlloMod. A warning ia iaauod if 
OFF ia uaad and any iaiilicit coda naada to ba ganaratad. 
Iba dafault ia GN. 

1.9. OFTHIZZEjOCOE PragM 

Takaa ana of tha idmtifiara ON or OFF aa tha aingla argu- 
amit. Ihia pra^M ia only allowad %dthin a aachina coda 

? roeadura. It apacifiaa ahamr tha coda ahould ba optian 
aad by tha caqpilar. lha dafault ia ON. Mhan OFF ia 
apacifiad, tha coa^lar will ganarata tha coda aa qwcifiad. 

2. laplaaantation of Pradafinad Pra^aaa 

2.1. OONTOOLLED 

Thia pragna ia racogniaad by tha iacdaanntation but haa no 
affact. 

2.2. EUBONAIE 

Ihia pragna ia inplanantad aa daacribad in i^ppandix B of tha 
Ada BN. 


2.3. INLINE 

Thia pragma ia inplanantad aa daacribad in l^jpandix B of tha 
Ada BM. 

2.4. INTEBFACE 

Thia pragna avpporta calla to 'C' and FORIBAN functicna. Tha 
Ada aubprograna can ba aithar functiona or procaduraa. Tha 
typaa of paraantara and tha raault typa for functiona aua t 
ba acalar, accaaa or tha pradafinad typa ADGNESS in BYSTEH. 
All paramtara nuat hava noda IN. Bacord and arrw objacta 
can ba paaaad by rafaranca uaing tha ADORE8S attributa. 

2.5. LIST 

Thia pragna ia inplanantad aa daacribad in ^pandix B of tha 
Ada BN. 

2.6. ?<3iMQByjSIZE 

Thia pragma ia racogniaad by tha inplanentation. Tha i^pla- 
nantation doa a no t allow SYSTEH to ba nodifiad fay naana of 
pragnaa, tha SYSTEH packaga nuat ba raconpilad. 

2.7. NGN_BEEMTEANT 

Thia pragna takaa ana arguannt %diidi can ba tha nana of 
aithar a library aubprogram or a aubprogran daclarad innedi- 

C-4 



APPBOIX r or IBB Adft 8TMBMD 


at«ly %rithln a library packaga nac or body. It indicatas 
to tha coaipilar that tha aubprograB %d.ll not ba callad 
racuraivaly alloidng tha coapilar to parfora q)acific optiia- 
isationa. Tha pragaa can ba ap^iad to a ndbprograai or a 
aat of ovarloadad aubprograaat %d.thin a padcaga qpac or paek- 
aga body. 

2.8. N0T_ELkB0m!IED 

’Shin pragaa can only appaar in a library packaga nacifica- 
tion. It indlcataa that tha packaga %all not ba alaboratad 
bacausa it it aithar part of tha KIB, a eonfi^aticn pack¬ 
aga or an Ada paduiga that it rafarancad froai a languaga 
othar than Ada. lha praaanca of thit pragna tupprattat tha 
ganaration of alaboraticn coda and ittuat wamingt if ala- 
boration coda it raqulrad. 

2.9. OPTINIZE 

Ihit pragaa it racognitad fay tha iaplaaantation faut hat no 
affact. 


2.10. PAC3C 

Thit pragaa %d.ll cauta tha cct^pilar to dioota a non-alignad 
rapraaantation for ccopotlta typat. It will not cautat 
objactt to ba packad at tha bit laval. 

2.11. PAGE 

Thit pragaa it iaplaatntad at datcrlbad in J^jpandix S of tha 
Ada RN. 

2.12. PASSIVE 

lha pragaa hat thraa forat : 

PRASHA PASSIVE; 

PRASHA PASSIVE(SEH k PHO B E); 

PRASHA PASSIVE(INIERRUFT, <nwbar>); 


Thit pragaa Pragaa pattiva can ba ^ppliad to a task or tatk 
typa daclarad iaaadlataly within a library packaga q)ac or 
bod^. Tha pragaa dlractt tha ccapilar to optiaixa cartain 
tadcing oparationt. It it pottitua that tha atataaanta in a 
task bod^ will pravant tha intandad optiaitatlon, in thata 
catat a warning will ba ganaratad at coapila tiaa and will 
raita XASKINS_ERRCXI at runtiae. 

2.13. FRIOfaiy 


Thit pragaa is iaplaatntad as datcribad in Appandix B of tha 

C-5 









AVfBDZx r or n Ada sawabd 


Ada m. 


2.14. SBMOED 


This pragaa is raeognisad by tha iaplaaantation but has no 
affact. 

2.15. STQRAGEJUNIT 

This pragaa la raoognlsad by tha iaplaoMitatlon. Tha i^pla- 
SMntatlon doa s no t allow SYSTDl to ba acdifiad by aaans of 
pra^MS, tha SYSTEM padcaga aust ba racoapilad. 

2.16. SUPPRESS 

This pra^M is iaplaamtad as dascribad, axcapt that 
DIVISION CBBC3C and in soaa casas OVERFLCNjCBECX cannot ba 

suprassaH. 

2.17. SYSTENJAHE 

This pragaa is raeognisad by tha isplaaantation. Tha iapla- 
aantatlon doa s no t allow SYSTEM to ba aodifiad by aaans of 
pragaas, tha SYSTEM packaga aust ba racoapllad. 

3. laplasantation- O apandant Attributas 

3.1. P'REP 

For a prafix that danotas an objact, a prograa unit, a 
labal, or an antry: 

This attributa danotas tha affactiva addrass of tha first of 
tha storaga units allocatad to P. For a subprogram, pack¬ 
aga, task unit, or labal, it rafars to tha addrass of tha 
aadilna coda associatad %rith tha corrasponding body or 
stataasnt. For an entry for an addrass clausa has 

bam given, it rafars to tha corra^onding hardware inter¬ 
net. Tha attributa is of tha type OPERAND defined in tha 
packaga HACHIMEjOODE. The attributa is only allowed within 
a aachina coda procedure. 

Sea section F.4.8 for sore information on tha use of this 
attributa. 

(For a packaga, task unit, or antry, tha 'REF attributa is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK ID yields tha unique 
task id associatad with a task. Tha value of this attributa 
is of the type ADDRESS in tha packaga SYSTEM. 


C-6 







4. Spvcification Of Packag* SYSTSt 


with UBIGNED TXPCS; 
ptcfcag* SYSlfll is 


prsgBS suvprsss(ALL CBBCKS); 
pra^n supprsss(ElKfiraiGNjIMLBS); 
pragas notjalaboratad; 

type NMS is ( sun4jcrossjr400(tt> ); 

SYSTIM^NMIB t constant NMB t* sun4_cross_r4000b; 

SIGMGE UNIT : constant 8; 

lOmwSlZE : constant 16_777_216; 

— SystesHOependent Nasad Nuabers 


l!IN_llir 

IIMC_INT 

IIMC_DIGITS 

mx MMinssx 

rnC DELIA 
Tiar 


t constant -2 147 483 648} 
: constant :> 2 T47_l83j^47; 

: constant 
: constant :• 31} 

: constant :• 2.0**(-31)} 

: constant :> 0.01} 


— Other Syste a d ependen t Declarations 
subtype PRIGBITY is INDEGEH range 0 .. 99} 
IIMCJIBC_SZZE : integer 1024} 
type ADOEESS is private} 

function (A: ADOEESS} B: ADOEESS) return BOOLEAN} 

funcUon (A: ADOEESS} B: ADOEESS) return BOOLEAN} 

function ''>-''(A: ADOEESS} B: ADOEESS) return BOOLEAN} 

function "K-^CA: ADOEESS} hi ADOEESS) return BOOLEAN} 

function (A: ADOEESS} Bt ADOEESS) return :31IBGER} 

function V (A: ADOEESS} I: ZNIBGER) return ADOEESS} 

function (A: ADOEESS} I: ZNIBGER) return ADOEESS} 


function V (I: UNSIGNEDjriPES.UNSIGNED_INIBGBR) return ADOEESS 
function HENOEY a™*"”^** 

(Z: UNSIGNd5jriPES.UNSI(21Ep_INIBGER) return ADOEESS renanee 

NOJffiOE : constant ADOEESS} 

tYpt TASK ID is private} 

NO TASK iB : constant TASK 10} 










typ* PASSIVE TSSK ID is privsts} 

Nq_PASSIVE_lKSK_l6 : constant PASSIVE_TSSK_ID; 

subtyps SZG STSIOS T is DREGBR; 

SIGjSTMZUSjSiZE: cohstsnt t- 4; 

typs PEOGRMI ID is privsts} 

NO_PllCXa»K_lS : constant PKX3tMl_ID; 

typs BITE OBDBR T is ( 
iJTILE ftOIAN, 

BIG BCiAN 

)t 

BYTEJORDBR: constant BnEjQBDBRJT BIG_DI>IAN; 
typs LQNG_ADORBSS is privats} 

NO_LCMG_AIXlt X constant LCNGJtfSnsS) 

function V (A: LQNS_AEOnSS} I: IMIEGER) rstum LdXS ADOBESS; 
function ”-** (Ax LQNS_ADOBSSS| Ix INTBCZR) rstum XXMrACOBESS; 

function IIM(E_iaC_AII)KESS (Ax ADDRESS) rstum LGNG_ADORESS; 

function LOCSLIZE(Ax I£NS_ADORESS | BVTEJSIZE x INTBGBR) rstum ADDRESS 

function S1ATIClljOP(Ax LQNS_ADDRESS) rstum IMIEGER; 

— Intsmal RIS rsprsasntation for day. If ths calsndar packaps is ussd 
— than, this is ths julian day. 
suhtyps DAYjr is INTEGER; 

— Constants dsscribing ths configuration of ths CIFO add-on product. 
SUPPGRTS^INVXAnGN BY ADDRESS x constant BCXEAN x- HUE; 

SUPPORTS PREELMMRI^Cfl x constant BOOUMI x- HUE; 

HMCE_AOdfBSjBUPPGRIED x constant BOOLEAN x- HUE; 

— Arguamits to the CIFO pragaa DflSOUPT TASK, 
typs INIBRRUPT_IASK_KIND is ( SIMPLE, SIGifiUJJNG ); 

function REIUmjVDDRESS rstum ADDRESS; 

privats 

typs ADDRESS is ns«r (JNSI(aaDjriPES.(I6I(aaD__INIEGER; 

NO_ADDR X constant ADDRESS x- 0; 

pragaa BUILT IN(”>"); 
pra^Mt BUiLT^nK ); 
pragn BUILT_IN( ; 
pragaa BUILT IN( 






APPENDIX P OF TBE Ada STANMItD 


pragaa ■U1LT_ZN( ; 
pragpa BUILT_IN( V"); 

typa TASK ID is MW UNSIGNED TYPES.UNSIGNED_INIBGER; 
N0_TASK_i 5 : constant TASK_ll5 0; 

typa PASSIVE TASK ID is new UNSIGNED TYPES.UNSIGNED_INIBGER; 
N0 JPASSIVEJIX^_i 5 : constant PASSI\^JEASK_ID 0; 

typa PROGPAH ID is naw UNSIGNED TYPES.UNSIGNS)_INIBGER; 
NO_PllOGRAM_lC ! constant PllOGPAl{_ID 0; 


typa LCNSADORESS is now UNSI(aoa>jrYPES.UNSIGNED_INTEGER; 
NO LGNS ADC« t constant LGNS ADOPESS :• 0; 


pra9M BUILT_IN(HAKE LCNS_AOCftESS); 
pra^M BUILT_IN(L0C1^ZE); 
pra^M BUILT_IN(STATIGNJ>F); 

pragaa BUlLT_lN(REluiai_AD0PES8); 

and SYSlDl; 


5. Postrictions On Itoprasantation Clausas 

5.1. Pra^n PACK 

In tha absanca of pragsa PACK racord conponants ara paddad 
so as to provida for officiant accass by tha targat 
hardwara, pragaa PACK appliad to a racord alisdnata tha p^ 
ding idMra possibla. Pragaa PACK has no othar affact on tha 
storaM allocatad for racord coepononts a racord raprasanta- 
tion is raquirad. 

5.2. Sisa Clausas 

For scalar typos a raprasantation clausa will pack to tha 
nusbar of bits raquirad to raprasant tha ranga of tha sub- 
typa. A sisa clausa ippliad to a racord not causa 

packing of coaponants; an a^^icit racord raprasantation 
clausa aust ba givan to ^pacify tha pocking of tha cooh 
ponants. A sisa clausa qppliad to a racord typa will causa 
packing of coaponants only whan tha coaponant typa is a 
discrata ^pa. An arror will ba issuad if thara is 
insufficiant spaca allocatad. Tha SIZE attributa is not 
svpportad for task, acooss, or floating point 

5.3. Addrass Clausas 


C-9 



APPBOIX P OF THE Ada STMOARD 




Addrass clausaa ara only aiqiportad for variablas. Sinca 
dafault initialisation of a variabla raquiras avaluation of 
tha variabla addrass alaboration ordaring raquirewnts 
prohibit inititalization of a variablas %«hich hava addrass 
clausas. lha spacifiad addrass indicatas the physical 
addrass associated with tha variaUa. 

5.4. Interrupts 

Interrupt entries are supported vith tha following interpre¬ 
tation and restrictions: 

An interrupt entry nay not hava any paranatars. 

A passive task that contains one or nora interrupt entries 
Bust always be trying to accept aad: interrupt entry, unless 
it is hanidQ.ing tha interrupt. Tha task must be executing 
either an accept for the entry (if there is only one) or a 
select statenent ^diere the interrupt entry accept alterna¬ 
tive is open as defined by Ada m 9.7.1(4). This is not a 
restriction (m nomal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queuec (see the last sentence of Ada RH 
13.5.1(2) and 13.5.1(6)). 

NO additional requireoents are isposed for a select state- 
a«nt containing both a terainate alternative and an accept 
alternative for an interrupt entry (see Ada RH 13.5.1(3)). 

Direct calls to an interrupt entry fron another task are 
allowed and are treated as a nom^ task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It sisply specifies the 
interrupt vector nunber. For passive ISRs, the nnn of the 
passive(internqpt,nnn) pragma specifies the internet prior¬ 
ity of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


C-10 






APPDDIX F OP THE Ada STMEABD 


5.6. Madiina Code Inaertions 
Machine code insertions are supported. 

The general definition of the package MACBI}a;_OOOE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of ^1 the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The ^neral syntax of a machine code statement is as fol¬ 
lows: 


OCOE_n'( opcode, operand (, qperand} ); 

vihere n indicates the number of qperands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

OQm;_N'’( opcode, (operand {, operand}) ); 

For those c^)codes that require no operands, named notation 
must be uuMd (cf. KM 4.3(4)). 

CXXX:_0'( op >> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE OOK or 
the 'REF attribute. 

Th e a rguments to any of the functions defined in 
MACHIME OOE^ must be static e:q>ressions, string literals, or 
the functions defined in MACHINE OCDE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inliiw expansioi of machine code procedures is supported. 


6. Conventions for Implementation-generated Names 
There are no implemmtation-generated names. 


7. Interpretation of Expressions in Address Claxises 

Address expressions in an address clause are interpreted as 
physical addresses. 


C-11 








APPDDIX F OP THE Ada STANDMD 


8. Rtatrictioia on unchecked Conversions 


None. 


9. Restrictions on unchecked Deallocations 


None. 


10. laplenentation Characteristics of I/O Packages 

Instantiations of 0IRECT_I0 use the value MAX RBC SIZE as 
the record size (e]q>ressed in STXXMGEJUNITS) ubrnTthe size 
of ELENENTjnfPE exceed that value. For'~sxaziple for uncon¬ 
strained arrays such as string where ELEMENT TYPE'SIZE is 
very large, MAX RTCSIZE is used instead. HA3[_RBOORD_SIZE 
is defined in SYSlfil and can be changed by a program before 
instantiating DIRBCT_I0 to provide an \:g)per limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STQRACZJJNIT bits. DIRECT 10 vill raise USE_StR0R 
if NAX__RBCjSIZE exceeds this absolu^ limit. 

Instantiations of SBQUENTIAL_I0 use t he value MAX_REC_SZZE 
as the record size (eiqpressed in STORAGEJUNITS) vtmi the 
size of EUMENT TYPE exceed that value. For example for 
unconstrained arrays such as string where ELEMENT TYPE'SIZE 
is very large, MAX REC SIZE is used instead. 
MAX_REOQEa) SIZE is defined in~ SY8TEM and can be changed by a 
program before instantiating INTEGER lO to provide an vqpper 
limit on the record size. SEQUENTIAL 10 ia{x>ses no limit on 
MAX RBC SIZE. 


11. laplemsntation Liziits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to izply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementaticm supports a maxiiman line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum siz e of a statically sized array type is 
4,000,000 X STORAGE UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORACEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a waring message. 

11.3. Default Stack Size for Tasks 


C-12 




APFSDIX F OF THE Ada STANDMB) 


In tha absenca of an a^qtlicit STQRA3EJ5IZE Imgth spacifica- 
tion avary task axcapt tha nain prograa is allocated a fixed 
sise stack of 10,240 STOmCEJUNITS. This is the val\ie 
returned fay T'STOBAGEJSZZE for a task type T. 

11.4. Default Collection Size 

In the absence of an ei^icit STGBAGEjSIZE Imgth attribute 
the default collection size for an access type is 100 tia»s 
the s ize of the designated type. This is the value returned 
by T'ST0iM(2;_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORACSEJUNITS for 
(Ejects declared statically within a ccnpilation unit. If 
this value is exceeded the coaqpiler will teminate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 









