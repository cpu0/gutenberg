
ATION PAGE 


AD-A240 500 


Form Approved 
0PM No. O'-iA-OtBS 



rosoooM ncijoing tim*tor reviewing irtstrucicni sMrcning«xALngdata aourcMgainarvtg and marutni^m 
Ian asiimaie or ary o<^>er aspac! ot ‘h« cciiecticn of intormaton. inciuding suggaatom tor radccmg ths Ourdan. to Waarw^g^ 
son Davis higrway S^.ite !204 Arlington VA 22202-A3C2. ano to tna Oftica oi information and Raguiaiofy AKa^a. ORica of 


3 REPORT TYPE AND DATES COVERED 


Final; 01 Aug 1991 to 01 Jun 1993 


4 TITLE AND SUBTITLE 

Meridian Soiftware Systems, Inc., Meridian Ada, Version 4.1, Stardent Titan P3 
under Stardent/Unix 3.0 (Host & Target), 901108W1.11061 


b AUThOR(S) 

Wnght-Patterson AFB, Dayton, OH 
USA 


7 PERFORMING ORGANIZATION NAME(S) AND ADOReSS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 
Wright-Patterson AFB 
Dayton, OH 45433 


9 SPONSORING,MONITORING AGENCY NAME'S) AND ADORESS(ES, 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D C. 20301-3081 



8 PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-402-0891 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release: distribution unlimited. 


12b DISTRIBUTION CODE 


13 ABSTRACT (Maximum 200 words) 

Meridian Soiftware Systems, Inc., Meridian Ada, Version 4.1, Wright-Patterson AFB, Stardent Titan P3 under 
Stardent.'Unix 3.0 (Host & Target), ACVC 1.11. 


91-10997 

■■lillllliiiunit 


iuimiiiiHiiii 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val Testing, Ada Val. Office, Ada Val. Facility. ANSI,'MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540 01-280-550 


18 SECURITY CUSSIFICATICN 


UNCLASSIFED 


19 SECURITY CLASSIFICATi N 
OF ABSTRACT 

UNCLASSIFIED 


15 NUMBER OF PAGES 


16 PRICE CODE 


20 LIMITATION OF ABSTRACT 


Standard Form 298, (Rev 2-89) 
Prescribed by ANSI Std 239-128 


91 9 18 046 



























AVF Control Number: AVF-VSR-402-0891 

1 August 1991 
90-09-06-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 901108W1.11061 
Meridian Software Systems, Inc. 
Meridian Ada, Version 4.1 
Stardent Titan P3 under Stardent/Unix 3.0 => 
Stardent Titan P3 under Stardent/Unix 3.0 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 










Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 8 November 1990. 

Compiler Name and Version: Meridian Ada, Version 4.1 

Host Computer System: Stardent Titan P3 under Stardent/Unix 3.0 

Target Computer System: Stardent Titan P3 under Stardent/Unix 3.0 

Customer Agreement Number: 90-09-06-MSS 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
901108W1.11061 is awarded to Meridian Software Systems, Inc. This 
certificate expires on 1 March 1993. 

This report has be^n reviewed and is approved. 



\da Validation Facility 
Steven P. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Vilidatlbn Organization 

DirectorComputer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 8 November 1990. 

Compiler Name and Version: Meridian Ada, Version 4.1 

Host Computer System: Stardent Titan P3 under Stardent/Unix 3.0 

Target Computer System: Stardent Titan P3 under Stardent/Unix 3.0 

Customer Agreement Number: 90-09-06-MSS 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
901108W1.11061 is awarded to Meridian Software Systems, Inc. This 
certificate expires on 1 March 1993. 

This report has been reviewed and is approved. 



Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 






DECLARATION OF CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson .\FB OH 45433-6503 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada. Version 4.1 

Host Computer System: Stardent Titan P3 

Stardent/Uni.x 3.0 

Target Computer System: Stardent Titan P3 

Stardent/Unix 3.0 

Customer’s Declaration 

I. the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems. Inc. has no knowledge of deliberate deviations from the .A.da Language 
Standard ANSI/MIL-STD-1S15A in the implementation listed in this declaration. I declare that 
Meridian Software Systems. Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner's corporate name. 

Date: 

Development 

Meridian Software Systemsyinc. 

10 Pasteur Street 
Irvine. C.A 9271S 



^ _ 

Stowe Bovd. Vice President lof Research and 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 





INTRODUCTION 


1.2 REFERENCES 


[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

(Pro90] Ma Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

(UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



INTRODUCTION 


For each Ada implementation, a customized test suite is produced by ^l.e 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89)). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability 
(ACVC) 

Ad? 

Implementation 

Ada Joint 
Program 
Office (AJPO) 

Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliance of 
an Ada 

Implementation 

Computer 

System 


The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 

An Ada compiler with its host computer system and its 
target computer system. 

The part of the certification body which provides policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


The ability of the implementation to pass an ACUf' version. 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Uithdravn 
tes t 


Fulfillment by a product, process 
requirements specified. 

or 

service of 

all 

An individual or corporate entity 
agreement with an AVF which spec 

who 
i f ies 

enters into 
the terms 

an 

and 


conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is reali 2 ed or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardiza l ior . 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90J. 

The process of checki’^^ the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 UITHDRAUN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 12 October 1990. 


E28005C 

B28006C 

C34006D 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons foi a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated: references to Ada Commentaries are included as 
appropriate. 


-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C35702A. C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SH0RT_FL0AT. 

C35702B, C35713C, B86001U, and C86006G check for the predefined type 
L0NG_FL0AT. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT. 

C45423A checks that the proper exception is raised if MACHINE_0VERFL0VS 
IS TRUE for the floating point type FLOAT. 

C45523A and C45622A check that the proper exception is raised if 
MACHINE_0VERFL0VS is TRUE for floating point types with digits 5. For 
this implementation, MACHINE_0VERFL0US is FALSE. 

C45531M..P (4 tests) and C45532M..P (4 tests) check fixed-point 
operations for types that require a SYSTEM.MAX_MANTISSA of 47 or 
greater. 

C86001F recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. For this implementation, the package TEXT 10 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

CA2009C, CA2009F, BC3204C, and BC3205D instantiate generic units before 
their bodies are compiled. This implementation creates a dependence on 
generic units as allowed by AI-00408 and AI-00530 such that the 
compilation of the generic unit bodies makes the instantiating units 
obsolete. 


LA3004A. LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F check for 
pragma INLINE for procedures and functions. 


2-2 





IMPLEMENTATION DEPENDENCIES 


CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

BD8001A. BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIaL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected by 
this compiler. 

AEliOlH, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults. These instantiations are rejected by this compiler. 

The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 


Test 

File Oper 

ation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

in'file 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL-IO 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102V 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D attempt to associate 
multiple internal files with the same external file for sequential 
files. The proper exception is raised when multiple access is 
attempted. 


2-3 







IMPLEMENTATION DEPENDENCIES 


CE2107G..H (2 tests), CE2110D, and CE2111H attempt to associate multiple 
internal files with the same external file when one or more files is 
writing fOr direct files. The proper exception is raised when multiple 
access is attempted. 

CE2203A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This implementation does 
not restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT_IO. This implementation does not 
r;:Strict file capacity. 

CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A attempt to associate 
multiple internal files with the same external file when one or more 
files is writing for text files. The proper exception is raised when 
multiple access is attempted. 

CE3304A checks that USE_ERROR is raised if a call to SET_LINE_LENGTH or 
SET_PAGE_LENGTH specifies a value that is inappropriate for the external 
file. This implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 3 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks whether legal units of a compilation are accepted if 
one of the compilation units is illegal. This test was processed with 
compiler option "-fl", which forces the compiler to generate code for legal 
units of a compilation. 


2-4 




CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see; 

Meridian Software Systems 
Technical Support 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 

For a point of contact for sales information about this Ada implementation 
system, see: 


Meridian Software Systems 
Attn: Jim Smith 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 


3-1 





PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result vas 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 3795 

b) Total Number of Withdrawn Tests 81 

c) Processed Inapplicable Tests 93 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 294 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler vas 
tested, the tests listed in section 2.1 had been withdrawn because of test 
errors. The AVF determined that 294 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 were also processed. 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto a Sun 3 system (from a standard 1/2 
inch, 9-track UNIX TAR tape) and then transferred to the Stardent system 
via an NFS ethernet. 


After the test files were loaded onto the host computer, the full set of 
tests vas processed by the Ada implementation. 


Testing vas performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


3-2 







PROCESSING INFORMATION 


Switch 


Effect 


-fE Generate error file for the Ada listing utility 
(alu). 

-fl Ignore compilation errors and continue generating 
code for legal units within the same compilation 
file (for test EA1003B). 

-fO Suppress ’’ dded to library" and "Generating 
code for" information messages. 

-fw Suppress informative warning messages. 

-c Produce continuous form Ada listings (no page 

headers). 

-p Obey PRAGMA PAGE directives within the program 

even though the -c flag says not to generate 
page breaks. 

-s Output Ada listing to the standard output 

file instead of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 



APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parametei-S used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$BIG_ID1 

(1..V-1 => 'A', 

< 

II 

V 

$BIG_ID2 

< 

1 

l-» 

II 

V 

> 

V => '2') 

$BIG_ID3 

(1..V/2 => 'A') 

& '3' & 


(1..V-l-V/2 

=> 'A') 

$BIG_ID4 

(1..V/2 => 'A') 

& '4' & 


(1..V-l-V/2 

II 

V 

> 

$BIG_INT_LIT 

(1..V-3 => '0') 

& "298" 

$BIG_REAL_LIT 

(1..V-5 => '0') 

& "690.0" 

$BIG_STRING1 

& (1..V/2 =; 

> 'A') & ' 

$BIG_STRING2 

& (1..V-l-V/2 => 'A') 

SBLANKS 

< 

1 

o 

II 

V 

) 

$MAX LEN INT BASED 

LITERAL 



"2:" & (1..V-5 => '0') & "11:" 

$MAX LEN_REAL BASED_LITERAL 

"16;" & (1..V-7 => '0') & "F.E:" 

$MAX STRING LITERAL & (1..V-2 => 'A') S. 



MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

$ACC_SIZE 

SALIGNMENT 

$COUNT_LAST 

$DEFAULT_MEM_SIZE 

$DEFAULT_STOR_UNIT 

$DEFAULT_SYS_NAME 

$DELTA_DOC 

$ENTRY_ADDRESS 

$ENTRY_ADDRESS1 

$ENTRY_ADDRESS2 

$FIELD_LAST 

$FILE_TERMINATOR 

$FIXED_NAME 

$FLOAT_NAME 

$FORM_STRING 

$F0RM_STRING2 

SGREATER THAN DURATION 


200 

32 

4 

2147483647 

1024 

8 

STARDENT 

2.0**(-31) 

16#0# 

16#1# 

16#2# 

2147483647 

/ t 

NO_SUCH_FIXED_TYPE 

NO_SUCH_FLOAT_TYPE 

If If 

"CANNOT RESTRICT FILE CAPACITY 


tf 


90000.0 

$GREATER_THAN_DURATION_BASE_LAST 

10000000.0 

$GREATER_THAN_FLOAT_BASE_LAST 

1.8E+308 

$GREATER_THAN_FLOAT_SAFE_LARGE 

1.0E308 


A-2 






MACRO PARAMETERS 

SGREATER THAN SHORT_FLOAT_SAFE_LARGE 

1.0E308 

$HIGH_PRIORITY 20 

$ILLEGAL EXTERNAL FILE_NAME1 

/NODIRECTORY/FILENAMEl 

SILLEGAL EXTERNAL_FILE_NAME2 

/N0DIRECT0RY/FILENAME2 

$INAPPROPRIATE LINE_LENGTH 

-1 

SINAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE (’’A28006D1 .ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.ADA") 

$INTEGER_FIRST -2147483648 

SINTEGER_LAST 2147483647 

SINTEGER_LAST_PLUS_1 21^7483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -90000.0 

SLESS THAN DURATION BASE FIRST 

- 10000000.0 

SLINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 1 

SMACHINE CODE_STATEMENT 

NULL; 

$MACHINE_CODE_TYPE INSTRUCTION 

$MANTISSA_DOC 31 

SMAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

SMIN INT -2147483648 


A-3 





MACRO PARAMETERS 


$NAME 

BYTE_INTEGER 

$NAME_LIST 

ARDENT 

$NAME_SPECIFICATIONl 

/al/acvc/X2120A 

$NAME_SPECIFICATI0N2 

/al/acvc/X2120B 

$NAME SPECIFICATION3 

/al/acvc/X3119A 

$NEG_BASED_INT 

16#FFFFFFFE# 

SNEV MEM_SIZE 

1024 

SNEW STOR_UNIT 

8 

$NEV_SYS_NAME 

ARDENT 

SPACE TERMINATOR 

ASCII.LF & ASCII.FF 

SRECORD DEFINITION 

NEW INTEGER; 

corroRD NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 

STASK STORAGE_SIZE 

2048 

STICK 

1.0 

SVARIABLE_ADDRESS 

FCNDECL.VAR_ADDRESS 

SVARIABLE_ADDRESS1 

FCNDECL.VAR_ADDRE SSI 

SVARIABLE_ADDRESS2 

FCNDECL.VAR_ADDRESS2 

SYOUR PRAGMA 

NO SUCH PRAGMA 


A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


MERIDIAN Ada COMPILER OPTIONS 


-fD Generate debugging output. The -fD option causes the 
compiler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the compiler to annotate an assembly language 
output file. The output is supplemented by comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified; otherwise, the annotated file is not emitted. 

-fE Generate error log file. The -fE option causes the 

compiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the same name as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fL Generate exception location information. The -fL option 
causes location information (source file names and line 
numbers) to be maintained for internal checks. This 


B-1 




COMPILATION SYSTEM OPTIONS 


informat’on is useful for debugging in the event that an 
"Exception never handled" message appears when an 
exception propagates out of the main program. This flag 
causes the code to be somewhat larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation; 
division_check and overflow_check. These checks are 
described in section 11.7 of the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all checks 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the compiler. Note that there is a related ada option, 
-fN, to suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjunction with the -S 
option. Certain restrictions apply to use of this option 

-fv Compile verbosely. The compiler prints the name of each 
subprogram, package, or generic as it is compiled. 
Information about the symbol table space remaining 
following compilation of the named entity is also printed 
in the form "(nK]". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning .messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler to run an additional 

optimization pass. The optimizer removes common 
sub-expressions, dead code, and unnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 


B-2 


COMPILATION SYSTEM OPTIONS 


Imodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional modifiers can be given to 
affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -Ip is only 
meaningful if -Ic has also been given. Normally -Ic 
suppresses all pagination, whereas -Icp suppresses 
all pagination except where explicitly called for 
within the source file with a pragma page directive. 

s Use standard output. The listing by default is 

written to a file with the same name as the source 
file and the extension .1st, as in simple.1st from 
simple.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead. 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages and warning messages. 
Specifying -It causes the compiler to list only the 
source lines to which error messages or warning 
messages apply, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For example, 
the default listing file produced for simple.ada has the 
name simple.1st. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -fE option. 

L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

N No compile. This option causes the ada command to do a 

"dry run" of the compilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

P Print compile. This option causes the ada command to 

print out the command invoked for each processing step 
as it is performed. 


B-3 





COMPILATION SYSTEM OPTIONS 


-S Produce assembly code. Causes the code generator to 

produce an assembly language source file and to halt 
further processing. 


B-A 



COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this Appendix are to linker documentation and not 
to this report. 


MERIDIAN Ada LINKER OPTIONS 


-A Aggressively inline. This option instructs the optimizer 

to aggressively inline subprograms when used in addition 
to the -G option. Typically, this means that subprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for which pragma inline 
has been specified are inlined. 

-c compiler-program-name 

Default: (as stored in program library) 

Use alternate compiler. The -c option specifies the 
complete (non relative) directory path to the Meridian 
Ada compiler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-compiler 
configurations, although under such circumstances an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 

suppresses the creation and additional code generation 
steps for the temporary main program file. The -f option 
can be used when a simple change has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 

bamp to invoke the global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. The -G option 

causes bamp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, compilation units to be optimized 
must have been compiled with the ada -K option. 

-I Link the program with a version of the tasking run-time 


B-5 





COMPILATION SYSTEM OPTIONS 


which supports pre-emptive task scheduling. This option 
produces code which handles interrupts more quickly, but 
has a slight negative impt.ct on performance in general. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies the name 
of the program library to be consulted by the bamp 
program. This option overrides the default library name. 

-n No link. The -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. The -N option causes the bamp command to 

do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
by the bamp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the bamp command 

to print out the actions it takes to generate the 
executable program as the actions are performed. 

-V Link verbosely. The -v option causes the bamp command to 

print out information about what actions it takes in 
building the main program. 

-W Suppress warnings. This option allows you to suppress 

warnings from the optimizer. 


B-6 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E-*-308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 
type L0NG_INTEGER is range -2147483648 .. 2147483647; 
type SH0RT_INTEGER is range -32768 .. 32767; 
type BYTE_INTEGER is range -128 .. 127; 

end STANDARD: 


C-1 






Appendix F Implementation-Dependent Characteristics 



This appendix lists implementation-dependent characteristics of Meridian Ada. Note that there are no pre¬ 
ceding appendices. This appendix is called Appendix F in order to comply with the Reference Manual for 
the Ada Programming Language* (LRM) ANSI/MIU-STD-1815 A which states that this appendix be named 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration representation clauses, record repre¬ 
sentation clauses, address clauses, interrupts, package system, machine code insertions, pragma inter¬ 
face, and unchecked programming. 

F.l Pragmas 

The implemented pre-defined pragmas arc: 

elaborate See the LRM section 10.5. 
interface See section F.l. 1. 
list See the LRM Appendix B. 

pack See section F. 1.2. 

page See the LRM Appendix B. 

priority See the LRM Appendix B. 
suppress See section F.l.i 

inline See the LRM section 6.3.2. This pragma is not actually effective unless you compileAink 
your program using the global optimizer. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled optimize system^name 

shared stora9e_unit 

memory^size 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at compile time, the compiler issues a warning message rather 
than an error, as required by the Ada language definition. Refer to the LRM Appendix B for additional infor¬ 
mation about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface inMeridian Ada is: 

pragma Lnteri^CB {language, subprogram [, "link-name" 1 ); 
where: 

language This is the interface language, one of the names assembly, builtin, c. or internal. The 
names builtin and internal arc reserved for use by Meridian compiler maintainers in run¬ 
time support packages. 

subprogram This is the name of a subprogram to which the pragma interface applies. 

* All future references to the Reference Manual for the Ada Programming Language ap^ar as the LRM. 


201 


Meridian Ada Compiler User’s Guide 









Appendix F 


link-name This is an optional string literal specifying the name of the non-Ada subprogram correspond¬ 

ing to the Ada subprogram named in the second parameter. If link-name is omitted, then 
link-name defaults to the value of subprogram translated to lowercase. Depending on the 
language specified, some automatic modifications may be made to the link-name to produce 
the actual object code symbol name that is generated whenever references are made to the 
corresponding Ada subprogram. 

It is appropriate to use the optional link-name parameter to pragma interface only when 
the interface subprogram has a name that does not correspond at all to its Ada identifier or 
when the interface subprogram name cannot be given using rules for constructing Ada identi - 
fiers (e.g. if the name contains a ‘S’ character). 

The characteristics of object code symbols getierated for each interface language are; 
assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same asbut prefixed with two underscore charac¬ 

ters (“_ _”). This language interface is reserved for special interfaces defined by Meridian 
Software Systems, Inc. The builtin interface is presently used to declare certain low-level 
mn-time operations whose names must not conflict with programmer-defined or language 
system defined names. 

c The object code symbol is the same as link-name, but with one underscore character (*_’) 

prepended. This is the convention used by the C compiler. 

internal No object code symbol is generated for an internal language interface; this language inter¬ 
face is reserved for special interfaces defined by Meridian Software Systems, Inc. The inter¬ 
nal interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to the pro¬ 
grammer to ensure that calling conventions match and that any necessary data conversions take place when 
calling interface subprograms. 

A pragma interface may appear within the same declarative part as the subprogram to which the pragma 
interface applies, following the subprogram declaration, and prior to the first use of the subprogram. A 
pragma interface that applies to a subprogram declared in a package specification must occur within the 
same package specification as the subprogram declaration; the pragma interface may not appear in the 
package body in this case. A pragma interface declaration for either a private or nonprivate subprogram 
declaration may appear in the private part of a package specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional infomation about pragma interface. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that the 
pragma occurs within the same declarative part as the composite type declaration, before any objects or com¬ 
ponents of the composite type are declared. 

Note that the declarative part restriction means that the type declaration and accompanying pragma pack 
cannot be split across a package specification and body. 

The effect of pragma pack is to minimize storage consumption by discrete component types whose ranges 
permit packing. Use of pragma pack docs not defeat allocations of alignment storage gaps for some record 
types. Pragma pack does not affect the representations of real types, pre-defined integer types, and access 
types. 


Meridian Ada Compiler User’s Guide 


202 






Appendix F 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as described in the LRM section 11.7, with these differences: 

• Presently, di vision_check and overflow_check must be suRjressed via a compiler 
flag, -fN ; pragma suppress is ignored for these two numeric checks. 

• The optional “ON =>” parameter name notation for pragma suppre s s i s ignored. 

• The optional second parameterto pragma suppress isignored; the pragma always 
applies to the entire scope in which it appears. 

F.2 Attributes 

All attributes described in the LRM Appendix A are supported. 

F.3 Standard Types 

Additional standard types are defined in Meridian Ada: 

• byte_integer 

• 8hort_integer 

• long_integer 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 

type short_integer is range -32768 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 2147483647; 

type float is digits 15 

range -1.79769313486231E-<'308 .. 1.79769313486231E-t-308; 

type duration is delta 0.0001 range -86400.0000 86400.0000; 

F.4 Package System 

The specification of package system is: 

package system is 

type address is new integer; 

type name is (ardent); 

system__naxDe : constant name := ardent; 

storage_unit : constant := 8; 

memory_size : constant 1024; 

— System-Dependent Named Numbers 

min__int : constant := -2147483648; 

max_int : constant := 2147483647; 

max_digits : constant := 15; 

max_mantissa : constant := 31; 

fine^delta : constant := 2.0 ** (-31); 

tick ; constant := 1.0; 


203 


Meridian Ada Compiler User’s Guide 





Appendix F 


— Other System-Dependent Declarations 
subtype priority is integer range 1 .. 20; 

The value of system. niefflory_size is presently meaningless. 

F.5 Restrictions on Representation Clauses 
F.5.1 Length Clauses 

A size specification (t ' size) is rejected if fewer bits are specified than can accommodate the type. The 
minimum size of a composite type may be subject to application of pragma pack. It is permitted to specify 
precise sizes for unsigned integer ranges, e.g. 8 for the range 0. .255. However, because of requirements 
imposed by the Ada language definition, a full 32-bit range of unsigned values, i.e. 0. . (2**32) -1. cannot 
be defined, even using a size specification. 

The specification of collection size (t ' at orage_8ize) is evaluated at run-time when the scope of the type 
to which the length clause applies is entered, and is therefore subject to rejection (via st:orage_error) 
based on available storage at the time the allocation is made. A collection may include storage used for rurv- 
time administration of the collection, and therefore should not be expected to accommodate a specific number 
of objects. Furthermore, certain classes of objects such as unconstrained discriminant array components of 
records may be allocated outside a given collection, so a collection may accommodate more objects than 
might be expected. 

The specification of storage for a task activation (t'8torage_size) is evaluated at run-time when 
a task to which the length clause applies is activated, and is therefore subject to rejection (via 8t orage_er- 
ror) based on available storage at the time the allocation is made. Storage reserved for a task activation is 
separate from storage needed for any collections defined within a task body. 

The specification of small for a fixed point type (t' amall) is subject only to restrictions defined in the LRM 
section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enumeration representation clause must 
be in the range of 8tandard. integer. 

The value of an internal code may be obtained by applying an appropriate instantiation of iin- 
checked_conver8ion to an integer type. 

F.5.3 Record Representation Clauses 

The storage unit offset (the at static_simple_expression part) is given in terms of 8-bit storage units and must 
be even. 

A bit position (the range part) applied to a discrete type component may be in the range 0. .15. with 0 being 
the least significant bit of a component. A range specification may not specify a size smaller than can accom¬ 
modate the component. A range specification for a component not accommodating bit packing may have 
ahigherupperbound as appropriate (e.g. 0. .31 for a discriminant 8t ring component). Referto the inter¬ 
nal data representation of a given component in determining the component size and assigning offsets. 

Components of discrete types for which bit positions are specified may not straddle 16-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must evaluate to 1, 2,4, or 8, and may not be 
smaller than the highest alignment required by any component of the record. 

F.5.4 Address Clauses 

An address clause may be supplied for an object (whether constant or variable) or a task entry, but not for a 
subprogram, package, or task unit. The meaning of an address clause supplied for a task entry is given in sec¬ 
tion F.5.5. 


Meridian Ada Compiler User’s Guide 


204 









Appendix F 


An address expression for an object is a 32-bit segmented memory address of type system, address. 

F.5.5 Interrupts 

A task entry’s address clause can be used to associate the entry with a UNIX signal. Values in the range 0.. 31 
are meaningful, and represent the signals corresponding to those values. 

An interrupt entry may not have any parametere. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversioa 

F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependent components. 

F.7 Unchecked Conversions 

There are no restrictions on the use of unchecked_conversion. Conversions between objects whose 
sizes do not conform may result in storage areas with undefined values. 

F.8 Input-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

• In calls to open and create, the form parameter must be the empty string (the de¬ 
fault value). 

• More than one internal file can be associated with a single external file for reading 
only. For writing, only one internal file may be associated with an external file; Do 
not use reset to get around this rule. 

• Temporary sequential and direct files are given names. Temporary files are deleted 
when they are closed. 

• File I/O is buffered; text files associated with terminal devices are line-buffered. 

• The packages sequent ial_lo and direct_io cannot be instantiated with un¬ 
constrained composite types or record types with discriminants without defaults. 

F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


205 


Meridian Ada Compiler User’s Guide 




