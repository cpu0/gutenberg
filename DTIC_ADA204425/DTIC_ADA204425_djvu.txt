AD-A204 425 




m FILE COP* 

AVF Control Number; AVF-VSR-173*1088 

88-03-25-VRX 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 

Certificate Number; 880606W1.09082 
Verdix Corporation 
VAda-010-13125, Version V5.5 
Sun Microsystems Sun-3 Host to Microbar GPC68020 Target 


Completion of On-Site Testing; 
13 June 1988 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For; 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


DTIC 





89 2 13 104 




UNCLASSIFIED _ 

SECURITY CLASSIFICATION OF THIS PAGE (WhenD^ta Entered) 


REPORT DOCUMENTATION PAGE 


'^AAc^c-^/ a: 


1. REPORT NUMBER 


4. TITLE (andSubtitle) 


READ INSTRUCTIONS 
BEFORE COMPLETEINO FORM 


(2. GOVT ACCESSION NO. 13. RECIPIENT'S CATALOG NUMBER 


5. TYPE OF REPORT & PERIOD COVERED 
13 June 1988 to 13 June 1989 


Ada Compiler Validation Summary Report: Verdix 
Corporation, VAda-010-13125, Version V5.5, Sun 
Microsystems Sun-3 (Host) to Microbar GPC68020 |6. performing org. report number 
(Target). ( U;i. 0^6?^) I 


7. AUTHORS 


u;i. 


Wright-Patterson Air Force Base, 


Lgnt- 

^ton. 


Ohio, U.S.A. 


9. PERFORMING ORGANIZATION AND ADDRESS 

Wright-Patterson Air Force Base, 


8. CONTRACT OR GRANT NUMBER(5) 


10. PROGRAM ELEMENT, PROJECT, TASK 
AREA & WORK UNIT NUMBERS 


Lght- 

7ton, 


Ohio, U.S.A. 


11. CONTROLLING OFFICE NAME AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 


14. MONITORING AGENCY NAME & AQOHESS(lf different from Controlling Office) 

Wright-Patterson Air Force Base, 

Dayton, Ohio, U.S.A. 


16. DISTRIBUTION STATEMENT (ofthii Report) 


12. REPORT DATE 

13 June 1988 


I ■KIH.'IllllIiaiHlM 


38 p. 


15. SECURITY CLASS (of this report) 

UNCLASSIFIED 




FICATION/DOWNGRADING 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of the abstract entered in Block 20. If different from Report) 

UNCLASSIFIED 



19. KEYWORDS (Continue on reverse side if necessary and identify by block number) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. ABSTRACT (Continue on reverse side if necessary and identify by block number) 

VAda -010-13125, Version V5.5, Verdix Corporation, Wright-Patterson Air Force Base, Sun Microsystems Sun- 
3 under Sun UNIX 4.2, Release 3.4 (Host) to Microbar GPC68020 (bare machine ) (Target), ACVC 1.9. 


nm 


1 JAN 73 


1473 EDITION OF 1 NOV 65 IS OBSOLETE 
S/N 0102-LF-014-6601 


UNCLASSIFIED _ 

SECURITY CLASSIFICATION OF THIS PAGE (When Data Entered) 


























Ada Compiler Validation Summary Report: 


Compiler Name: VAda-010-13125» Version V5.5 

Certificate Number: 88 O 6 O 6 WI.09082 

Host: Target: 

Sun Microsystems Sun-3 under Microbar GPC68020 (bare machine) 

Sun UNIX 4.2, Release 3.4 using file-server support from the host 

Testing Completed 13 June 1988 Using ACVC 1.9 
This report has been reviewed and is approved. 




















TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED . 2-1 

2.2 IMPLEMENTATION CHARACTERISTICS . 2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS . 3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . . 3-3 

3.7 ADDITIONAL TESTING INFORMATION . 3-4 

3.7.1 Prevalidation.3-4 

3.7.2 Test Method.3-4 

3.7.3 Test Site.3-5 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results ^ test ing this compiler using the Ada Compiler 
Validation Capability ^ACVGp . An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. , 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between Implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of Identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. ' 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent but permitted by the Ada Standard. Six classes of 
tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 



1-1 









INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes; 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 13 June 1988 at Aloha, OR. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C. #552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from; 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from; 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45^133-6503 


1-2 








INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language , 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines > Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines . 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 


1-3 







INTRODUCTION 


support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 


Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 


Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 
test compiler is not recjuired to support or may legitimately 

support in a way other than the one expected by the test. 


Passed test An ACVC test for which a compiler generates the expected 
result. 


Target 

Test 


Withdrawn 

test 


The computer for which a compiler generates code. 

A program that checks a compiler's conformity regarding a 
particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an Invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results diiring 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors. 

Class A tests check that legal Ada programs can be successfully compiled 
and executed. There are no explicit program components in a Class A test 
to check semantics. For example, a Class A test checks that reserved words 
of another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 


1-4 







INTRODUCTION 


Class B tests check that a compiler detects illegal langpiage usage. Class 
B tests are not executable. Each test in this cleiss is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 
illegal construct that it contains is detected by the compiler. 

Class C tests check that legal Ada programs can be correctly compiled and 
executed. Each Class C test is self-checking and produces a PASSED, 
FAILED, or NOT APPLICABLE message indicating the result when it is 
executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is claissified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Each Class E test is self-checking and produces a NOT APPLICABLE, PASSED, 
or FAILED message when it is compiled and executed. However, the Ada 
Standard permits an implementation to reject programs containing some 
features addressed by Class E tests during compilation. Therefore, a Class 
E test is passed by a compiler if it is compiled successfully and executes 
to produce a PASSED message, or if it is rejected by the compiler for an 
allowable reason. 

Class L testa check that incomplete or illegal Ada programs involving 
multiple, separiitely compiled units are detected suid not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error—message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of the tests in the ACVC follow conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 


1-5 









INTRODUCTION 


place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a teat to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation au*e given in Appendix D. 


1-6 













CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration; 

Compiler; VAda-010-13125, Version V5.5 
ACVC Version; 1.9 

Certificate Number; 880606W1.09082 

Host Ccsnputer; 

Machine; Sun Microsystems Sun-3 

Operating System; Sun UNIX 4.2, Release 3*4 

Memory Size; 4 MB 

Target Computer; 

Machine; Microbar GPC68020 bare board using 

file-server support from the host 

Operating System; None 

Memory Size: 1 MB 

Communications Network; Ethernet 


2-1 





CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E testa specifically check for such Implementation 
differences. However, testa in other classes also characterize an 
implementation. The teats demonstrate the following characteristics; 


. Capacities. 

The compiler correctly processes tests containing loop statements 
nested to 65 levels, block statements nested to 65 levels, and 
recursive procedures separately compiled as subunits nested to 17 
levels. It correctly processes a compilation containing 723 
variables in the same declarative part. (See tests D55A03A..H (8 
tests), D56001B, D64005E..G (3 tests), and D29002K.) 


. Universal integer calculations. 

An implementation is allowed to reject universal integer 
calculations having values that exceed SYSTEM.MAX_INT. This 
implementation processes 64 bit integer calculations. (See tests 
D4A002A, D4A002B, D4A004A, and D4A004B.) 


. Predefined types. 

This implementation supports the additional predefined types 
SHORT_INTEGER, SHORT__FLOAT, and TINY_INTEGER in the package 
STANDARD. (See tests B86001C and BB6001D.) 


. Based literals. 

An implementation is allowed to reject a based literal with a 
value exceeding SYSTEM.MAX__INT during compilation, or it may raise 
NUMERIC_ERROR or CONSTRAINT_^ERROR during execution. This 
implementation raises NUMERIC_ERROR during execution. (See test 
E24101A.) 


. Expression evaluation. 

Apparently the values of default initialization expressions for 
record components are checked for belonging to a component’s 
subtype as each expression is evaluated. (See test C32117A.) 

Assignments for subtypes are performed with the same precision as 
the base type. (See test C35712B.) 


2-2 








CONFIGURATION INFORMATION 


This implementation uses no extra bits for extra precision. This 
implementation uses all extra bits for extra range. (See test 
C35903A.) 

Sometimes NOMERIC__ERROR is raised when an integer literal operand 
in a comparison or membership test is outside the range of the 
base type. (See test C45232A.) 

Apparently NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or m«nbership test is outside the range of 
the base type. (See test C45252A.) 

Apparently underflow is gradual. (See tests C45524A..Z.) 


Rounding. 

The method used for rounding to integer is apparently round to 
even. (See tests C46012A..Z.) 

The method used for rounding to longest integer is apparently 
round to even. (See teats C460‘t2A..Z.) 

The method used for rounding to integer in static universal real 
expressions is apparently round to even. (See test C4A014A.) 


Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a ’LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

Declau*ation of an array type or subtype decleu?ation with more than 
SYSTEM.MAX INT components raises no exception. (See test 
C36003A.) ” 

NUMERIC_ERROR is raised when ’LENGTH is applied to an array type 
with INTEGER'LAST + 2 components. (See test C36202A.) 

NUMERIC_ERROR is raised when ’LENGTH is applied to an array type 
with SYSTEM.MAX_INT + 2 components. (See test C36202B.) 

A packed BOOLEAN array having a ’LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See test 
C52103X.) 

A packed two-dimensional BOOLEAN array with more than INTEGER’LAST 
components raises NUMERIC_ERROR when the array type is declared. 
(See test C52104Y.) 


2-3 









CONFIGURATION INFORMATION 


A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR either 
when declared or assigned. Alternatively, an implementation may 
accept the declaration. However, lengths must match in array 
slice assignments. This implementation raises NUMERIC_ERROR when 
the array type is declared. (See test E52103Y.) 

In assigning one-dimensional array types, the expression appears 
to be evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible with 
the target's subtype. In assigning two-dimensional array types, 
the expression does not appear to be evaluated in its entirety 
before CONSTRAINT_ERROR is raised when cheeking whether the 
expression's subtype is compatible with the target's subtype. 
(See test C52013A.) 


. Discriminated types. 

During compilation, an implementation is allowed to either accept 
or reject an incomplete type with discriminants that is used in an 
access type definition with a compatible discriminant constraint. 
This implementation accepts such subtype indications. (See test 
E3810HA.) 

In assigning record types with discriminants, the expression 
appears to be evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


. Aggregates. 

In the evaluation of a multi-dimensional aggregate, all choices 
appear to be evaluated before checking against the index type. 
(See tests CU3207A and C43207B.) 

In the evaluation of an aggregate containing subaggregates, all 
choices are evaluated before being checked for identical bounds. 
(See test E43212B.) 

All choices are evaluated before CONSTRAINT_ERROR is raised if a 
bound in a nonnull range of a nonnull aggregate does not belong to 
an index subtype. (See test E43211B.) 


. Representation clauses. 

An implementation might legitimately place restrictions on 
representation clauses used by some of the tests. If a 
representation clause is used by a test in a way that violates a 
restriction, then the implementation must reject it. 


2-4 







CONFIGURATION INFORMATION 


For this implementation; 

. Enumeration representation clauses containing noncontiguous 
values for enumeration types other than character and boolean 
types are supported. (See tests C35502I..J, C35502M..N, and 

A39005F.) 

. Enumeration representation clauses containing noncontiguous 
values for character types are supported. (See tests 
C35507I..J, C35507M..N, and C55B16A.) 

. Enumeration representation clauses for boolean types 
containing representational values other than (FALSE s> 0, 
TRUE s> 1) are supported. (See tests C35506I..J and 
C35508M..N.) 

. Length clauses with SIZE specifications for enumeration types 
are supported. (See test A39005B.) 

. Length clauses with ST0RAGE_SIZE specifications for access 
types are supported. (See tests A39005C and C87B62B.) 

. Length clauses with ST0RAGE__SIZE specifications for task types 
are supported. (See tests A39005B and C87B62D.) 

. Length clauses with SMALL specifications are supported. (See 
tests A39005E and C87B62C.) 

. Record representation clauses are supported, though such a 
clause applied to a component of a composite type will not 
cause that component to be packed into the space required. In 
this case an explicit representation clause must be given for 
the component type. (See test A39005G.) 

. Length clauses with SIZE specifications for derived integer 
types are supported. (See test C87B62A.) 


Pragmas. 

The pragma INLINE is supported for both procedures and functions. 
(See tests LA3004A, LA300UB, EA3004C, EA3004D, CA3004E, and 
CA3004F.) 


Input/output. 

The package SEQUENTIAL_I0 can be instantiated with unconstrained 
array types and record types with discriminants without defaults. 
(See tests AE2101C, EE2201D, and EE220iE.) 


2-5 








CONFIGURATION INFORMATION 


The package DIRECT__I0 can be instantiated with unconstrained array 
types and record types with discriminants without defaults. (See 
tests AE2101H, EE2401D, and EE2M01G.) 

Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. (See 
tests CE2102D and CE2102E.) 

Modes IN FILE, OUT FILE, and INOUT_FILE are supported for 
DIRECT_IoT (See tests CE2102F, CE2102I, and CE2102J.) 

RESET and DELETE are supported for SEQUENTIAL_IO and DIRECT_IO. 
(See tests CE2102G and CE2-I02K.) 

Dynamic creation and deletion of files are supported for 
SEQUENTIAL_IO and DIRECT_IO. (See tests CE2106A and CE2106B.) 

Overwriting to a sequential file truncates the file to laist 
element written. (See test CE2208B.) 

An existing text file can be opened in OUT__FILE mode, can be 
created in OOT_FILE mode, and can be created in IN FILE mode. 
(See teat EE3102C.) 

More than one internal file can be associated with each external 
file for text I/O for both reading and writing. (See testa 
CE311U..E (5 tests), CE3114B, and CE3115A.) 

More than one internal file can be associated with each external 
file for sequential I/O for both reading and writing. (See tests 
CE2107A..D (4 testa), CE2110B, and CE2111D.) 

More than one internal file can be associated with each external 
file for direct I/O for both reading and writing. (See tests 
CE2107F..I (5 tests), CE2110B, arid CE2niH.) 

An internal sequential access file and an Internal direct access 
file can be associated with a single external file for writing. 
(See test CE2107E.) 

An external file associated with more than one internal file can 
be deleted for SEQUENTIAL 10, DIRECT_I0, and TEXT 10. (See test 
CE2110B.) “ " 

Temporary sequential files and temporary direct files are given 
names. Temporary files given names are deleted when they are 
closed. (See tests CE2108A and CE2108C.) 


. Generics. 

Generic subprogram declarations and bodies can be compiled in 
separate compilations. (See tests CA1012A and CA2009F.) 


2-6 







CONFIGURATION INFORMATION 


Generic paclcage declarations and bodies 
separate compiletions. (See tests CA2009C» 


can be compiled in 
BC3204C, and BC3205D.) 


Generic unit bodies and their subunits can be compiled in separate 
compilations* (See test CA3011A.) 



2-7 




CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.9 of the ACVC comprises 3122 tests. Vfhen this compiler was 
tested, 27 tests had been withdrawn because of test errors. The AVF 
determined that 226 tests were Inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for 26 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

109 

10i»9 

1630 

17 

18 

46 

2869 

Inapplicable 

1 

2 

223 

0 

0 

0 

226 

Withdrawn 

3 

2 

21 

0 

1 

0 

27 

TOTAL 

113 

1053 

h- 

CO 

17 

19 

46 

3122 


3-1 









TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

_2 

4 

5 

6 

CHAPTER 

7 8 9 

10 

11 

12 13 

14 

TOTAL 

Passed 

190 499 

540 

245 

166 

98 

142 

326 

137 

36 

234 

3 

253 

2869 

Inapplicable 

14 73 

134 

3 

0 

0 

1 

1 

0 

0 

0 

0 

0 

226 

Withdrawn 

2 14 

3 

0 

0 

1 

2 

0 

0 

0 

2 

1 

2 

27 

TOTAL 

206 586 

677 

248 

166 

99 

145 

327 

137 

36 236 

4 

255 

3122 


3.4 WITHDRAWN TESTS 

The following 27 tests were withdrawn from ACVC Version 1.9 at the time of 
this validation: 


B28003A 

E28005C 

C34004A 

C35502P 

A35902C 

C35904A 

C35904B 

C35A03E 

C35A03R 

C37213H 

C37213J 

C37215C 

C37215E 

C37215G 

C37215H 

C38102C 

C41402A 

C45332A 

C45614C 

A74106C 

C85018B 

C87B04B 

CC1311B 

BC3105A 

ADI A01A 

CE2401H 

CE3208A 





See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdra^m. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 226 tests were inapplicable for the 
reasons Indicated: 


. C35702B uses L0NG__FL0AT which is not supported by this 

implementation. 

. A39005G uses a record representation clause which is not supported 

by this compiler. 


3-2 






TEST INFORMATION 


. The following tests use LONG_INTEGER, which is not supported by 
this compiler: 

C45231C C45304C C45502C C45503C C45504C 
C45504F C45611C C45613C C45631C C45632C 
B52004D C55B07A B55B09C 


. C45531M, C45531N, C45532M, and C45532N use fine 48-bit fixed-point 

base types which are not supported by this compiler, 

. C455310, C45531P, C455320, and C45532P use coarse 48-bit 
fixed-point base types which are not supported by this compiler. 

. C86001F redefines package SYSTQl, but TEXT_IO is made obsolete by 

this new definition in this implementation and the test cannot be 
executed since the package REPORT is dependent on the package 
TEXT_IO. 

. C96005B requires the range of type DURATION to be different from 

those of its base type; in this implementation they are the same. 


, The following 201 tests require a floating-point accuracy that 
exceeds the maximum of 15 digits supported by this implementation: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L,.Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..2 (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y 
C35707L..Y 
C35802L..Z 
C45321L..Y 
C45521L..Z 
C45621L..Z 
C46012L..Z 


(14 tests) 
(14 tests) 
(15 tests) 
(14 tests) 
(15 tests) 
(15 tests) 
(15 tests) 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include; 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 26 Class 3 tests. 


The following Class B tests were split because syntax errors at one point 
resulted in the compiler not detecting other errors in the tesL.; 


3-3 







TEST INFORMATION 


B24009A 

B24204A 

B24204B 

B24204C 

B2A003A 

B2A003B 

B2A003C 

B33301A 

B37201A 

B38003A 

B33003B 

B38009A 

B38009B 

B41202A 

B44001A 

B64001A 

B 67 OOIA 

B 67 OOIB 

B67001C 

B67001D 

BCI 303 F 

B97102A 

BC3005B 

B91001H 

B91003B 

B95001A 


3.7 ADDITIONAL TESTING INFORMATION 
3 . 7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.9 produced by 
the VAda-010-13125, Version V5.5, compiler was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
eidilblted the expected behavior on all inapplicable tests. 


3 . 7.2 Test Method 

Testing of the VAda-010-13125, Version V5.5, compiler using ACVC Version 
1.9 was conducted on-site by a validation team from the AVF. The 
configuration consisted of a Sun Microsystems Sun-3 operating under Sun 
UNIX, Version M.2, Release 3.** and a Microbar GPC68020 with no operating 
system. The host and target computers were linked via an Ethernet 
communications network. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded onto a Sun Microsystems Sun-3 
computer. After modifying the test name extensions to make them compatible 
with the system naming conventions, the test sources were copied into the 
test area on another Sun-3 machine with rep (UNIX-to-UNIX remote copy 
utility) over a network system implementing standard TCP on Ethernet. 

After the test files were loaded to disk, the full set of tests was 
compiled and linked on the SUN-3, and all executable tests were run on the 
Miorobar GPC68020. Results were transferred back to the Sun-3 and routed 
to the network printer for printing. They were then checked by the 
validation team. 

The REPORT package was modified to use SIMPLE_IO, a simplified version of 
TSXT_I0, for all tests except those in Chapter 14. The implementation of 
SIMPLE__I0 uses a division of TEXT_IO developed by Verdix Corporation for 
previous validations performed from UNIX to cross-target bare machines. In 


3-4 







TEST INFORMATION 


this cross-target implementation, the functions of TEXT_IO are logically 
and physically divided into two portions which run on both the host and the 
target. I/O file system requests are hamdled by the portion running on the 
host; output formatting is handled by the portion running on the target. 
Both portions are written in Ada. For the most part, this implementation 
is completely transparent to the user, except that certain default file 
characteristics will be determined by the host operating system. A 
protocol has been developed to allow the target processor to make requests 
of the host file system by means of a daemon on the host. Any host on 
which the daemon is implemented can serve as the file system server for the 
target processor; thus this underlying implementation of TEXT_IO is 
Independent of the host operating system. 

The compiler was tested using command scripts provided by Verdix 
Corporation and reviewed by the validation team. The compiler was tested 
using all default switch settings. 

Tests were compiled, linked, and executed (as appropriate) using a single 
host computer and a single target computer. Teat output, compilation 
listings, and job logs were captured on magnetic tape and archived at the 
AVF. The listings examined on-site by the validation team were also 
archived. 


3 . 7.3 Teat Site 

Testing was conducted at the facilities of Verdix Corporation in Aloha, OR 
and was completed on 13 June 1986. 







APPENDIX A 


DECLARATION OF CONFORMANCE 


Verdix Corporation has submitted the following Declaration of Conformance 
concerning the VAda-010-13125i Version V5.5, compiler. 


A-1 








DECURATION OF CONFORMANCE 


DECLABATION OP CONFORMANCE 


Compiler Implementor: Verdlz Corporation 

Ada Validation Faeilltyt Ada Validation Facility, ASD/SCEL, 

Wrlght-Patterson AFB OH 45^33-6503 

Ada Ccnpller Validation Capability (ACVC) Version: 1.9 


Base Confignration 


Base Compiler Name: VAda-010-13125 

Host Architecture ISA: Sun Microsystems Sun-3 

Target Archltectvure ISA: Microbar GPC68020 


Implementor's Deolaratlon 

I, the undersigned, representing Verdix Corporation, have implemented no 
deliberate extensions to the Ada Language Standard ANSI/MIL-STD-1815A in 
the compiler(s) listed in this declaration. I declare that Verdix 
Corporation is the owner of record of the Ada langxiage compiler (s) listed 
above and, as such, is respot»lble for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for 
Ada language compiler(s) listed in this declaration shall be made only in 
the owner's corporate naow. 


Date: 


Owner's Declaration 

I, the undersigned, representing Verdix Corporation, take full 
responsibility for implementation and maintenance of the Ada compiler(s) 
listed above, and agree to the public disclosure of the final Validation 
Summary Report. I further agree to continue to comply with the Ada 
trademark policy, as defined by the Ada Joint Program Office. I declare 
that all of the Ada language compilers listed, and their host/target 
performance, are in compliance with the Ada Language Standard 
ANSI/MIL-STD-1b15A. 





Version: V5.5 
OSAVER #: Sun UNIX 4.2, 
Release 3*4 
OS&VER «: (None) 






APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to Implementation- 
dependent pragmas, to certain machine-dependent conventions as mentioned in 
chapter 13 of the Ada Standard, and to certain allowed restrictions on 
representation clauses. The implementation-dependent characteristics of 
VAda-010-13125, Version V5.5, are described in the following sections, 
taken from Appendix F of the Ada Standau*d. Implementation-specific 
portions of the package STANDARD are also included in this appendix. 


package STANDARD is 


type INTEGER is range -2m7‘»836U8 .. 21474836M75 
type SHORT^INTEGER is range -32768 .. 32767; 
type TINY^INTEGER is range -128 .. 127; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 

type DURATION is delta 1.000 E-03 

range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-1 



ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


L lBpknicBUtioa>Dcp«iideBt Prafiiutf 
LL INUNE^ONLY Pragma 

The INLINE^ONLY pngma, when used in the same way as progma INLINE, indicares to the compiler 
that the subp rogram must always be inlined. This pragma also suppresses the generation of a callable 
version of tte routine which save code space. 

L2. BUILT-IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user ac ce ss. It is used only to implemeat code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACH^_CODE package. 

L3. SHAR£_CODE Pragma 

The SHARE^CODE pragma takes the name of a generic instantiatioo or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argum e nt . This pragma is only allowed 
immediately at the place of a decUndve item in a dedaradve pan or package specification, or after a 
libnay unit in a compilation, but before any subsequent compila^ unis 

When the first argument is a genetic unit the pragma applks n all instantiatioia of that generic. When 
the fint argument is the name of a generic instanriarion the pragma applies only to the specified irutan- 
dadon. or overloaded instandadons. 

If the second argument is TRUE the compiler will try to share code generated for a g eneric mstanda- 
don with code generated for other instandadons oi the same generic. When the second argutii et u is 
FALSE each mstandadon will get a unique copy of the generated code. The extent \o which code is 
shared between instandadons depends on this pragma and the kind of generic formal parameters 
declared for the generic uruL 

The name pragma SHARE_BODY is also r e co gn ized by the implementadon and has the same efTea as 
SHARE_CODE. It is included for compatability with earlier versions of VaDS. 

lA. NO.IMAGE Pragma 

The pragma suppresses the generadon of the image array used for the IMAGE attribute of enumeradon 
types. This elimirutes the overhead required to store the array in the executable image. 

L5. EXi LkNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name ^ a subpro gram or variable defined in Ada and 
allows the user to specify a different external name that may be used to rr/erence the endty from other 
languages. The pragnu is allowed at the place of a decl;iadve item L a package specificadon and 
must apply to an object declared earlier in die same package specificadon. 

US. INTERFACE^OBJECT Pragma 

The INTERFACE_OBJECT pngma takes the name of a a variable defined in another language and 
allows it to be referenced ditecdy in Ada. The pragma will replace all occurrences of the variable 
name with an external reference to the second. link_arguinent. The pragma is allowed at the plme of a 
declaiadve item in a package specificadon and must apply to an objea declared earlier in the same 
package specificadon. The object must be declared as a scalar or an access type. The object caruiot be 


B-2 





any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an amy, or 
aiecocd. 

L7. lMPLZCTr_COOE Pragma 

Takes one c£ die idendfien ON or OFF as the single argnmem. This pragma is only allowed within a 
marJiine code procediiie. It specifies chat implicit code generated by ite compiler be allowed or disal* 
lowed. A waning is issoed if OFF is used a^ any implicit code nwds to be geaented. The default is 
ON. 

2. Implcmeiitadoa of Predefined Pragmas 
2J. CONTROLLED 

This pragma is recognized by the implementaiioo but has no effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2J. INLINL 

This pragma is implemented as described in Appendix B of the Ada RM. 

2A, INTERFACE 

f This pragma supports calls to ’C and FORTRAN functions. The Ada su b p r o gram s can be esifaer fuse* 

tions or procedures. The types of parameters acKl the result type for funenons mast be scalar, access or 
the predefined type ADDRESS in SYSTEM. An opdcmal third argumem overrides the link 

n a m e. All parameters must have mode IN. Record ai^ array objects can be by reference using 
the ADDRESS attribooe. 

2J, LIST 

This pragma is implemented as described in Appendix B of die Ada RM. 

ZS. MEMORY_SZZE 

This pragma is recognized by the implementatioiL The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.S. PACK 

This fvagma will cause the compiler to choose a non<aligned representation for composite types. It will 
not c auses objects to be packed at the bit level 

2.9. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2J0. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 


B-3 






2JL SHARED 

Hus p ra gma is recognized by ibe impknieatatioii bat has no effect. 

112. STORAGE.UNTT 

Hus pragma is recognized by the imp iemem adou. Hw implemeatatioa does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

113. SUPPRESS 

This pragma is implemented as described, except that RANCE_QIECK and DIVISION_CHECK can¬ 
not be snpressed. 

214. SYSTEM.NAME 

This pragma is recognized by the implemenniion. The does not allow SYSTEM n be 

modified by means of pragmas, the SYSTEM package most be recompiled. 

3. ImpkmcBtatiaa-DepeBdcnt Attributes 
31. P*REF 

For a prefix that denotes an object, a program onit, a label, or an entry; 

This atsibute denotes the effecnve address d the first of the storage oniis c p. For a snbpro- 

gxam, package, task tmit, or label, it lefets to the address of the machine code assoriamd with the 
co r respo n ding body or statement. For an entry for which an address clause has been given, it refers to 
the conespooding hardwae intemtpi. The attribare is of the type OPERAND in the package 

MACHINEjCODE The armboae is only allowed within a machine code proc e dure. 


(For a package, task unit, or entry, the 'REF attribare is not supporred.) 


B-4 







4. Spcdficadon Of Packafc SYSTEM 

II 

ijyi MM ti ( JUf.aoa.uMt ); 

miM.MM : MSilial MM SUN.ODU.UaM: 

STBMMB.Unr : ••aiiial :• I: 

MMianr_iia : iMiiiat :• 

•• Sfiti»Oiriaaial Mim 4 NiMiri 

MM IMF : laaiiaat :> .a.l4f_4aj_<4t: 

MU.IMF ; Maiiaal :• t UF.iaS.aiT; 

MMC'OiaiTl : Maiiaal :• li: 

MUC MMnsa* : laaitial !• II: 

FIld.HLTA : Maitial :• X.««*(*>I)] 

TIOl : laaiiaat :■ 

• • Otkif Sfii^aifiaaiai Oiilifitiaai 

■akiTfi Puarrr li INIUM riati • .. M; 


MUC.ne.Sia : langn :• Ittl; 

lyfi HBnu ii kftviii: 

NO.imi : laaiiiai MWIH; 

fsaiiiaa IWWie<l..«inWIl(li IMaOM) iiiara 


faaitlaa m OFIa, Ii iOWBSI titara kOOLIAN: 
faaillaa MDM.LTIA. St lOOUSSt tiiara KOLtAM: 


taaillaa KBk.MIA. B: MDUUI ftiara ■XIIAM; 
raaiilaa aOK.UIA. Si HBMU) (tiara BXUAN: 
ftatllaa AOa.OiFFIA. Bi IC W MB B I itiara INIMB: 

Itatilaa IIOt.lOCaUA: unaSB: IMOk: IMTMBI rtiara itfEMBB; 
faaallaa SKM.lcaUA: lOMaa; MOL INIMat rtiara 

fiatllaa •>*(A. Bi IliaasS) rtiara BtrUBAM rtaaaat MMI.Or; 
(aatllaa *<*(A. Bt MMWBB) rtiara BTFIIAM (laMtt 4001 UT; 
faaallaa *»*(A, Bi HBUBB) rtiara BOCXJMI itariMt /Mxm.S: 
faaallaa *<s*(A, Bi MBMIBB) rtiara BOtlJM itatMt mm LB: 
faaallaa *<*(A. Bt maiBU) rtiara IMim itamit mm DIPP: 
faaallaa ***(A> mMSS: INOb INnoKl rtiara Ataass rtaMt 
faaallaa *>*(Ai mSMBBS; imOb INIBOBII rtiara imtPB rtatMt 

srtpa lallat<mm on: 

Srtpa iaIlatimm.LT): 
srtpB lai latimm.ai: 
srtkHi laiiatimm.lB): 
srt^ lal latfAOBK.OIFFI: 
frami iallatdfOl.mmi: 

Brami lai latiimai'mm): 

Brtmi laiiatinmioiL.mmBS): 


i: 


prltait 


lyft ABOBBB It aatr lait|tr: 
tO_mm : taatiaai tfimWB :■ B: 


5. Rcstricdoiis On ReprcscBtatkw Clauses 
5X Pragma PACK 

Anay componoits len than STORAGE_UNrr bia are packed to the next highest posver of 2 bits. 
Objects asid larger components are packi^ to the nearest whole STORAG£_UNIT. In the fbsence of 
pragma PACK lecoid components are padded so as to pcovide for effident access by the target 
hardware, pragma PACK applied to a lec^ eliminated the padding where possible. Pragma PACK has 
no other effect on the storage allocate for record components a record lepresentatioo is required. 

5,2. Record Representation Clauses 

For scalar types a lepresenation clause win pack to the number of bia required to represent the range of 
the subtype. A record representation applied to a composite type will not cause the object to be packed 
to fit in the space required. An explicit representation clause must be given for the co m pone n t type. An 
error will be issued if there is unsufficient space allocated. 


B-5 








\ 

]h & record representation clause, a component clause for a component of a compo> 
site type may not specify a smaller size than would otherwise be occupied ^ the component. 
In addition, a subcomponent type will not be packed nnless an explicit representation 
specification or pragma packed is applied to the type. 

5J. Address Clauses 

Address clauses are supported for variables and constants. 

5.4. Interrupts 

Intexupt entries are not supported. 

Representation Attributes 

The ADDRESS attribute is not supported for the following endues: 

Packages 

Tasks 

LabeU 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general tMinitirm of the package MACHINE_CODE provides an assembly language interface for 
the target wiarhwi. u provides the trecessary recort type(s) needed in the code statement, an enumera* 
don type of ail the opcode mneumomes, a set of register definidons, and a set of addressing mode hme- 
dons. 

The general syntax of a machine code statement is as follows: 

CODEji’C opcode, operand {, operand) ); 
where a indicates the number of operands in the aggr^aie. 

A special case arises for a variable number of operands. The operands are listed within a subaggregaie. 
The format is as follows: 

CODE_N*( opcode, (operand {, operand)) ); 

For those opcodes that require no operands, named notadon must be used (cf. RM 4.3(4)). 

CODE_0’( op -> opcode ); 

The opcode must be an enumeradon literal (Le. it cannot be an object, attcibute, or a rename). 

An operand can only be an endty defined in MACHINE^CODE or the ’REF attribute. 

The arguments to any of the fimedons defined in MACH1NE_C0DE must be static expressions, string 
literals, or the funedons defined in MACHINE_CODE. The 'RE? attribute may not be used as an argu* 
ment in any of these funedons. 

Inline expansion of machine code procedures is supported. 


B-6 






i. ConTtodons for Impkmcatttioa<i«Bcratcd Names 
There »e no unplememadaii-feneraied names. 

7. Interpretatfam of Expressions in Address Clanscs 
Address t*!*"*** are su pported for co mtanw and variables. 

t. Rastriedons on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocadons 
None. 

10. Implementation Characteristics of VO Packages 

bstandadam of DIRECT^IO use the value MAXJt£C_SI2£ as the rec or d size (expressed in 
STORAC£_UNrrS) when Ihe size of ELEMENT_Tyre exceeds that value. For example for ancon* 
stxained anays such as string where ELEMENTjfyTE'SIZE is very large, MAXJRECJSZZE is used 
instead. M^JtECORD_SlZE is defined in SYSTEM and can be changed by a p ro g r am before 
instantiaring DIR£CT_IO to provide an upper limit on the record size. In any case the maximnm size 
su pported i s 102 4 x 1024 x STORAGE^UNTT bits. DIRECTJO will raise USE_ERROR if 
MAX_REC_SCE exceeds this absolnte hmit.' 

Instantiations of SEQUENT1AL_I0 use the value MAX.RECJSCZSE as the r u co rt size (expressed in 
STORAGEJJNTTS) when the ^ of ELEMENTJTYPE'exce^ that value. For example for ancon* 
strained arrays such as stri ng w here ELEMENTJ TYPE’ SIS is very large, MAXJREC_SQE is used 
instead. MAX_R£C0RD_S1ZE is defined in ^STEM and can be changed by a program before 
instantiating INTEGER JO to provide an u pper limit on the record size. SEQUENTIAL.K) imposes no 
limit on MAXJIEC.SQE. 

IL Implementation Limits 

The following limits are actually enforced by the implementation. It is not inteaded to imply that 
resources up to or even near these litnio are available to every pr o gram . 

ILL Line Length 

The implememation supports a maximum line length of 5(X} characten including the end of line charac* 
ler. 

ILL Record and Array Sizes 

The maximum size of a statically sized array type is 4,(XX},000 x STORAGEJJNITS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGE^UNTTS. A record type or atxay type 
declaration that ex ceeds these limits will generate a warning mess^e. 

lU. Default Stack Size for Tasks 

In the absence of an explicit STORAGE^SIZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNITS. This is the value reuimed by 
TSTORAGE_SI2E for a cask type T. 

1L4. Default CoQection Size 

In the absence of an explicit STORAGE^SIZE length anribute the default coUection size for an access 
type is 100,000 STORACE_UNITS. This is the value reuroed by TSTORAGE^SIZE for an access 

B-7 







lypeT. 


115. Limit M Dcdarcd Objccti 

Hmr is a sbsoiute limit of 6,000.000 x STORAGE^UNTTS for objecs declared statically within a 
compilarioB uniL If this vala is exceeded the coiq>ikr will teniitaate the compilation of the unit with a 
FATAL enor message. 






APPENDIX C 


TEST PARAMETERS 


Certain testa in the ACVC make use of Implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning _ 

$BIG_ID1 

Identifier the size of the 

maximum input line length with 

varying last character. 

$BIG_ID2 

Identifier the size of the 

maximum input line length with 

varying last character. 

$BIG_ID3 

Identifier the size of the 

maximum input line length with 

varying middle character. 

$BIG_ID4 

Identifier the size of the 

maximum input line length with 

varying middle character. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 


Value _ 

(I..498 s> ’A’, 499 => ’ 1 ») 


(I ..498 => »A', 499 => '2’) 


(1..249 I 251 ..499 => ’A', 250 => ’3’) 


(1..249 I 251 ..499 => 'A', 250 => '4') 


(1..496 => ’0», 497..499 => "298") 


C-1 




TEST PARAMETERS 


Name and Meaning _ 

$BIG_REAL_Lrr 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of B1G_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG STRING1 yields the image of 
BIG^IDI. 

$BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal Integer 

literal whose value is 
TEXT_I0,COUNT’LAST. 

$FIELD__LAST 

A universal integer 

literal whose value is 
TEXT_I0.FIELD’LAST. 

$FILE_NAME_WITH_BAD_CHARS 

An external ”file name that 
either contains invalid 
characters or is too long. 

$FILE_NAME_WITH__WILD_CARD_CHAR 

An external file name that 
either contains a wild card 

character or is too long. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 


Value _ 

(I..493 => »o*, Ji9i»..499 => " 69 . 


(1..250 => 'A') 


(1..248 => 'A', 249 => '1') 


(I ..479 => ’ •) 


2147483647 


2147483647 


/illegal/file name/2{]$t2102C.DAT 


/illegal/file name/CE2102C'‘.DAT 


100 000.0 


C-2 


0E1") 





TEST PARAMETERS 


Wane and Meaning 

$GREATER_THAN_DURATION_BASE_LAST 
A universal real literal that Is 
greater than DCJRATIOM*BASE'LAST. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains Invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
Is too long. 

$INTEGER_FIRST 

A universal Integer literal 
whose value Is INTEGER'FIRST. 

$INTEGER_LAST 

A universal Integer literal 
whose value Is INTEGER'LAST. 

$ INTEGER_LAST_PLUS__1 

A universal Integer literal 
whose value Is INTEGER'LAST + 1. 

$ LESS_THAN_DORATION 

A universal real literal that 
lies between DURATION'BASE’FIRST 
and DURATION'FIRST or any value 
In the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that la 
leas than DURATION'BASE'FIRST. 

$MAX__DIGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 

Maximum Input line length 
permitted by the Implementation. 

$MAX_INT 

A universal Integer literal 
whose value Is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


Value 

10_000_000.0 

/no/such/directory 

/ILLEGAL_EXTERNAL_FILE_NAME1 

/no/auch/directory 

/ILLEGAL_EXTERNAL_FILE_NAME2 

-21474836M8 

2147483647 

2147483648 

- 100 _ 000.0 

- 10 _ 000 _ 000.0 

15 

499 

2147483647 

2147483648 


C-3 












TEST PARAMETERS 


Name and Meaning _ 

$MAX LEN_INT_BASED_LITERAL 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX__IN_LEN 
long. 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value la 16 ;F.Ej with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX STRING_LITERAL 

A string literal of size 
MAX__IN_LEN, including the quote 
characters. 


Value 

(1..2 s> "P:", 3..^96 => ’0*, 

497..499 = 


(1..3 => "16:", 4..495 => 'O' 
496..499 => 


(1 => 2 ..498 => 'A', 499 


$MIN INT -2147483648 

A universal Integer literal 
whose value is SYSTEM.MIN_INT. 


$NAME TINY_INTEGER 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT FLOAT, SH0RT_INTEGER, 

L0NG_FL0AT, or LONG^INTEGER. 

$NEG_BASED_INT 16#FFFFFFFD# 

A baaed integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX INT. 


C-4 


" 11 :") 


"F.E:") 


_> .«.) 




APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada St 2 uidard. The following 27 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
"Al-ddddd" is to an Ada Commentary. 


. B28003A: A basic declaration (line 36) incorrectly follows a 

later declaration. 

. E28005C; This test requires that "PRAGMA LIST (ON);" not 

appear in a listing that has been suspended by a previous 
"PRAGMA LIST (OFF);"; the Ada Standard is not clear on this 
point, and the matter will be reviewed by the AJPO. 

. C34004A: The expression in line 168 yields a value outside 

the range of the target type T, but there is no handler for 
CONSTRAINT_ERROR. 

. C35502P; The equality operators in lines 62 and 69 should be 

inequality operators. 

. A35902C; The assignment in line 17 of the nominal upper 

bound of a fixed-point type to an object raises 
CONSTRAINT_ERROR, for that value lies outside of the actual 
r 2 uige of the type. 

• C35904A: The elaboration of the fixed-point subtype on line 

28 wrongly raises CONSTRAINT_ERROR, because its upper bound 
exceeds that of the type. ~ 

. C35904B; The subtype declaration that is expected to raise 

CONSTRAINT__ERROR when its compatibility is checked against 
that of various types passed as actual generic parameters, 
may, in fact, raise NUMERIC_ERROR or CONSTRAINT_ERROR for 
reasons not anticipated by the test. 


D-1 






WITHDRAVra TESTS 


. C35A03E and C35A03R: These tests assume that attribute 

'MANTISSA returns 0 when applied to a fixed-point type with a 
null range, but the Ada Standard does not support this 
assumption. 

. C37213H: The subtype declaration of SCONS in line 100 is 

Incorrectly expected to raise an exception when elaborated. 

. C37213J; The aggregate in line 451 incorrectly raises 

C0NSTRAINT_ERR0R. 

. C37215C, C37215E, C37215G, and C37215H: Various discriminant 

constraints are incorrectly expected to be Incompatible with 
type CONS. 

. C38102C; The fixed-point conversion on line 23 wrongly 

raises C0NSTRAINT_ERR0R. 

. C41402A: The attribute *STORAGE__SIZE is Incorrectly applied 

to an object of am access type. 

. C45332A: The test expects that either an expression in line 

52 will raise an exception or else MACHINE_OVERFLOWS is 
FALSE. However, an implementation may evaluate the 
expression correctly using a type with a wider range than the 
base type of the operands, and MACHINE OVERFLOWS may still be 
TRUE. 

. C45614C; The function call of IDENT__INT in line 15 uses an 

argument of the wrong type. ~ 

. A74106C, C85018B, C87B04B, and CC1311B; A bound specified in 

a fixed-point subtype declaration lies outside of that 
calculated for the base type, raising COVSTRAINT__ERROR. 
Errors of this sort occur at lines 37 i 59, 142 4 143, 16 4 
48, and 252 4 253 of the four tests, respectively. 

. BC3105A; Lines 159 throu^ 168 expect error messages, but 

these lines are correct Ada. 

. ADI A01 A; The declaration of subtype SINT3 raises 
CONSTRAINT_ERROR for implementations which select INT'SIZE to 
be 16 or greater. 

. CE2401H: The record aggregates in lines 105 and 117 contain 

the wrong values. 

. CE3208A: This test expects that an attempt to open the 

default output file (after it was closed) with mode IN_FILE 
raises NAME__ERROR or USE__ERR0R; by Commentary AI-00048, 
MODE ERROR should be raised? 


D-2 







SUPPLEMENTARY 


^ 1 . 


7 '■ 


information 


"v 





ERRATA DTIC# A204 425 

Ada Compiler Validation Summary Report: 


Compiler Name: VAda-010-13125, Version V5.5 

Certificate Number: 8806 O 6 WI.09082 

Host: Target: 

Svin Microsystems Sun-3 under Mlcrobar GPC68020 (bare machine) 

Sun UNIX 4.2, Release 3.4 using file-server support from the host 

Testing Completed 13 June 1988 Using ACVC 1.9 


This report has been reviewed and is approved. 


/ 



Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Jfifint Program Office 
Virginia L. Castor 
Director 

Department of Defense 
Washington DC 20301 





