RE^T DOCUMENTATIOI ^D-A285 150 


Public reporting butben lor mis collection ol Inlormation is esbmateci to average t hour pei 
sources gathering and rnaintalnlng the data needed, and reviewing the collection ol Into 
Service, Directorate tor Information Operatfons and Reports, 12l£ Jefierson Davis Highw; 
Regulatory Affairs, Office of Management and Budget. Washington. DC 20503. 



g existing oaui 
Headquarters 
ilormation and 


1. AGENCY USE 


(Leave 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND VADScross Sun4 Solaris 2.3 => MIPS R4000, Version 6.2 

Host; Sun SPARCstation 10/512 (under Solaris 2.3) 

Target; SGI Indigo XS4000 (MIPS R4000), operating as a bare machine (bare 
machine) 

5. FUNDING 

3 'i 

6. AUTHORS; 

Wright-Patterson AFB, Dayton, OH 

7. PERFORMING ORGANIZATION NAME (S) AND 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. 
135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office. Defense Information System Agency 

Code TXEA, 701 S. Courthouse Rd., Arlington, VA 

22204-2199 

10. SPONSORING/MONITORING 
AGENCY 

’>■ •» , 

li: Supplementary 

12a. DISTRIBUTION/AVAILABILITY; Approved for public release: distribution 
unlimited 

12b. DRISTRIBUTJpN 

13. (Maximum 200 

Rational Software Corporation, 940630W1.11367 

14. SUBJECT; Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 

15. NUMBER OF 

16. PRICE 


17 SECURITY 
CLASSIRCATION 

UNCLASSIFIED 


18. SECURITY 


19. SECURITY 
CLASSIRCATION 

UNCLASSIFIED 


20. LIMITATION OF 


UNCLASSIFIED 


UNCLASSIFIED 


















AVF Control Number: AVF-VSR-595.C694 
Date VSR Completed: July 21, 1994 

94-05-12-RAT 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940630W1.11367 
Rational Software Corporation 
VADSCross Sun4 Solaris 2.3 -> MIPS R4000, Version 6.2 
Sun SPARCstation 10/512 under Solaris 2.3 -> 

SGI Indigo XS4000 (used as a MIPS R4000 bare board) 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


% 











Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 J\jne 1994. 

Compiler Name and Version: VADSCross Sun4 Solaris 2.3 -> MIPS R4000, 

Version 6.2 


Host Coeputer System: Sun SPARCstation 10/512 

under Solaris 2.3 


Target Ccaputer System: SGI Indigo XS4000 

(xised as a MIPS R4000 bare board) 

Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a resxilt of this validation effort. Validation Certificate 940630W1.11367 
is -awarded to Rational Software Corporation. This certificate expires two 
years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


- 

Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wri^t-Patterson AFB CM 45433-5707 



Center for Information Management 












DEXrLARATION OF CONFORMANCE 


The following declaration of ccmformance was supplied by the customer. 


Declaration of Confonneuice 
Custcxner: Rational Software Corporation 


Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada ln;>lementation: 

Ada Compiler Name and Version* VADSCross Sun4 Solaris 2.3 -> MIPS R4000, 

Version 6.2 

Host Conpjter System: S\an oP/^* jtation 10/512 

under Solaris 2.3 

Target Computer System: SGI Indigo XS4000 

(used as a KIPS R4000 bare board) 

Declaration: 

I, the undersigned, declare that I have no 

Icnowledge of deliberate deviations from the Ada Language 

Standard ANSI/MIL-STD-1815A ISO 8652-1987, FIPS 119 as tested 



\ 










TABLE OF CONTENTS 


► 

CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES .1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS .3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 




i 


















► 


CHAPTER 1 
INTRCXXXrriON 


Hie Ada inplenentation described above was tested according to the Ada 
Validation Procedures (Pro92] against the Ada Standard [Ada83] using the 
current Ada Con^iiler Validation Cap 2 ibility (ACVC). Hiis Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any. technical terms used in this report, the reader is referred to (Pro92]. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATICW SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). Hie results of this validation apply only 
to the counters, operating systems, and compiler versions identified in this 
report. 

Hie organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF idiich perform^ this 
validation or from; 

National Technical Information Service i. 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to: 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



V 


INTRCX)UCTIC3N 


1.2 REFERENCES 

[Ada831 Reference Manual for the Ada Programming Langyige , 

ANSI/MIL-STT>-l815A, February 1983 and ISO 8652-I&87. 

(Pro92I Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

tUG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by meauis of the ACVC. ihe ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking mzunner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vdien they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, emd the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed 1:^ the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by scxne of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT amd CHECK_FILE is checked by a set of 
executable tests. If these \mits are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vdiich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately conpiled rinits. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exa^le, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 







V 


INTRODUCTION 


For each Ada implementation, a custcmdzed test suite is produced by the AVF. 
This customization consists of making the modifications described in che 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inappiic 2 ible tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host conputer system and its 

Inplementation target conputer system. 

Ada Joint The part of the certification body \diich provides policy and 
Program guidwce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the coopliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Org 2 uiization 
(AVO) 

Compliance of The ability of the inplementation to pass an Acvc version, 
an Ada 

Inplementation 

Conputer A fxinctional unit, consisting of one or more ccxnputers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A ccmputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 



INTRODUCTION 


Conformity 


CustCHner 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicedsle 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an agreement 
with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement fr<»n a customer assuring that conformity 
is realized or attainable on the Ada implementation for which 
validation status is realized. 

A computer system where Ada source programs are transformed 
into executeible form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware ioplementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


Ihe compiler of a validated Ada implementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro92). 

The process of checking the conformity of an Ada compiler to 
the Ada programming langxiage and of issuing a certificate for 
this implementation. « 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 






C3JAPTER 2 




IMPLEMENTATION DEPEl^ENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is availad:>le from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B4900aA 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A' 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE38i4A 

CE3902B 








2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may be 
support^ by documents issued by the ISO euid the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




IMPLEKEMmTIGN DEPENDEliCIES 




The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEGER; for 
this inplementation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LQNG_FLQAT, or SHORT_FLQAT; for this 
iiif>lementation, th-^re is no such type 


C45531M..P and C45532M.,P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANT1SSA of 47 or greater; for this 
implementation, MAXJMANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHiNEjDVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this in^lementation, MACHINEjOVERFLCMS is TTOJE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 


C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, ti^ ranges are the 
same. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this implementation Aoes not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not support such sizes. 


2-2 










INPLEMOnATION DEPEM)ENCIES 


The tests listed in the following table check that USE^ERROR is raised 
if the given file operations are not supported for the given combination 
of mode emd access method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUOrriAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUESmAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CPFATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUEimAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE21''2P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2xo2Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 


IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN jtlLE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LETTOTH and SET_PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR vdten the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COONT'IAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 






IMPLEHOnATICN DEPENDENCIES 


2.3 TEST NODIFICMTONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
iiqplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, and CD2A31A..C were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the suf^rt procedure LBX7ni_CHECK, which uses 
Unchecked Conversion according to the interpretation given in AI-00590. The 
AVO ruled that this interpretation is not binding \jnder ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LEl«3TH_CHECit—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Itodification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
inplemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. Ihe test was m^ified by coninenting out line 36 and 
40; the modified test was passed. 




2-4 








CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada inpleroentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Compton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada inpleroentation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the 
Inplementation fails the ACVC [Pro92]. t, 

For all processed tests (inapplicable and ajplicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the nvnnber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inpleroentation's maximum precision (item e; see 
section 2.2), anid those that depend on the svpport of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 







PROCESSING INTORNIVTIGN 


a) Total Number of A^^licable Teste 3800 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 65 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 266 (c-^d-t^) 


g) Total Number of Tests for ACVC 1.11 4170 (a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. Hie contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and then copied to the 
host coaster system. 

After the test files were loaded onto the host coopjter, the full set of 
tests was processed by the Ada isplementation. 

Hie tests were compiled and linked on the host cooqputer system. The 
executable images were then downloaded to the target board via a serial port 
and executed. The results were captured on the host computer system via a 
serial port. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See i^^ndix B for a cooplete listing of 
the processing options for this implementation. It also indicates the 
default options. Hie options invoked explicitly for validation testing 
during this test were: 

OptioVSwitch Effect 

Su{^ress warning diagnostics. ^ 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Hie listings exiunined on-site by the 
validation team were also archived. 


3-2 










APPEIiDIX A 


MACRO PARAMETERS 


niis appendix contains the macro parameters used for customizing the ACVC. 
The meeining and purpose of these parameters are explained in {UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum ii^t-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A», 

V -> '1') 

$B1G_ID2 

(1..V-1 -> 'A', 

< 

1 

V 

$BIG_ID3 

(l,.V/2 -> 'A') 
(1..V-1-V/2 

& '3' & 

-> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') 
(1..V-1-V/2 

& '4' & 

-> 'A') 

$BIG__INT_LIT 

(1..V-3 -> '0') 

& "298" 

$BIG_REAL_LIT 

(1..V-5 -> 'OM 

& "690.0" 

$BIG_STRING1 

& (1..V/2 - 

> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

(1..V-20 -> ' ' 

) 


$MAX LEN IMT BASED LITERAL 

- - - - »2;" & (1..V-5 -> 'OM & "11:" 

$MAX LEN REAL BASED LITERAL 

~ " "16;" & (1..V-7 -> '0') & "F.E;" 


A-1 










MACRO PARAMETE31S 


$MAX_STRING_LITERAL i (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 

respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2147483647 

$DEPAULT_MEM_SI2E 16777216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME SUN4_CROSS_R4000B 

$DELTA DOC 0.0000000004566612873077392578125 

$n«®Y_ADDRESS SYSTEM."+" (16#40#) 

$EKTRY_AW)RESS1 SYSTEM."+"(16#80#) 

$ENTRY_AM)RESS2 SYSTEM.(16#100#) 

$FIELD LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLOAT_NAME IIO_SUCH_TYPE 

$PORM_STRING "" 

$raRM_STRING2 "CANN0T_RESTRICT_F1LE_CAPACITY" 

$GREATER THAN DURATION ^ 

100000.0 

$GREATER THAN DURATIW BASE LAST 

TOOOOT^OO.O 

$GREATER THAN FLOAT BASE LAST 

l.^E+38 

$(3tEATER THAN FLOAT SAFE LARGE 
” “ ” 9.TJE37 






MACRO PARAMETERS 


$(®EATER THAN_SH0RT FIX)AT_SAFE_LARGE 

9.0E37 

$HIGH_PRI0RITY 99 

$ILLEGAL EXTERNAL_FILE_NAME1 

/illegal/filc_naine/2) I$%FILE1 .DAT 

$ILLEGAL_EXTERNAL_FILE NAME2 

7illegal/f ile_ruuae/2} ] $%FILE2. DAT 

$INAPPROPRIATE LINE LE24GTH 

~ -1 

$ INAPPROPRIATE PAGE LENGTH 

~ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$1NTEGER_LAST_PLUS__1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100000.0 

$LESS_THAN_DURATION BASE FIRST 

- 1 ^ 000000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CC»E_STATEMENT 

CaDE_0'(OP -> NOP); 

$MACHINE_CC»E_TYPE CCX)E_0 ^ 

$HAKTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME TINY_INTEGER 

A-3 












MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATICN1 

$NAME_SPECI FICATIC3N2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERM1NAT0R 

$RECC»D_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STQRAGE_SZZE 

$TICK 

$VARIABLE_AIX>RESS 
$\QVRIABLE_AIX«ESS1 
$VARIABLE_AI»RESS2 
$YOUR PRAGMA 


SUN4_CROSS_R4000B 

Aisr/test_suites/acvcl. ll/c/e/OC2120A 
Aisr/test_sui tes/acvcl. ll/c/e/X2120B 
A>sr/test_suites/acvcl. ll/c/e/X3119A 
16#FFFFFFFD# 

16777216 

8 

SUN4_CROSS_R4000B 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

32 

1024 

0.01 

VAR_1 "ADDRESS 
VAR_2'AI»RESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 






APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 



CQMPIIATION SYSTEM OPTICNS 


ada Ccmnand Reference ada 

ada - invoke the Ada compiler 

Syntax 

ada loptionsl [source_file]... [object_file.ol... 

Arguments 

object_£lle.o non-Ada object file names. These files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the conpiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
coo^iling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction i^es to 
disassembly listing, 
b Disasseo^le the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das" 
s Disassemble the unit spec. 

-a file name 

(arrive) Treat file name as an object archive file created 
by ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files frcxs Ada source files. 

-Bstatic/dynamic (SPARConpiler Ada only) 

(static) If static is indicated, the Ada program is ccmpiled 
and linked statically. The defa\ilt is d^muoic. 

-c suppress the control messages generated when pragma PAGE 
an^or pragma LIST are encountered. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHlTEOnjRE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 


-d 


(dependencies) Analyze for dependencies only. Do not do 



CtJMPIIATICN SYSTEM OPTIONS 


semantic analysis or code generation. Update the library, 
marking any defined units as xmconpiled. The -d option is 
used by a.make to est2J3lish dependencies among new files. 
This option will attempt to do imports for any units 
referenced frcmt outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated % error_file. Note that there is 
no space between the -Ef and error__file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out while the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usin^ a.error, 
embed them in the source file and call the environment editor 
ERBOR EDITOR. If ERRORJEDITQR is defined, the environment 
variaEle ERROR_PATTERN should also be defined. EE^R_PATTERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERRORJIABS, if set, 
is used instead of the defaxilt tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will t)e 


B-3 







C0MP1LATIC3N SYSTEM OPTIONS 


trimned so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or compilation information). The trimming 
generally removes initial values of variables and all 
statements. 

~G (GVAS) Display suggested values for the MIN_G7AS_AM)R 
and MAX_GVAS_ADDR INFO directives. 

~K (Iteep) Keep the intermediate language (IL) file produced 
by the compiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L library_naine 

(library) Operate in VADS library library_name. 

[Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file eiUDreviation.) 

-N \init name 

(main) Produce an executable program by linking the named 
unit as the main program. unit_name must alrea^ be 
compiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VADSself) or a.vox 
(VADScross) unless overridden with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source_file. The main unit of the program is 
assumed to be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be nami^ a.out (VADSself) or a.vox 
(VADScross) imless overridden with the -o option. 

-N (no code sharing) Ccmipile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHARE_BC®Y INFO directive and the SHARE_CC»E 
or SHARE_BODY pragmas. 

-NX (NX) Link with NX Startup code and with the NX archive libraries 
This option is valid only if the -M option has also been invoked 
(Sun SPARC -> Paragon only) 


-Of 0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 







COMPIIATICN SYSTEM OPTIONS 


-0 £\ill optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
varieibles 

-02 add common siibexpression elimination within 
basic blocks 

-03 add global conraon siibexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems v4ien 
debugging. For exaxiple, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) %is option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VMS_library 

(reconpile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
reconpilation Ts to occur. If it is not specified, the 
reccxnpilation occurs in the current working dir(k:tory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without reconciling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire concildtion 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 


B-5 





COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (verbose) Print ccanpiler version number, date and time of 
compilation, name of file compiled, coonand input line, 
total coopiiation time and error sunnary line. Storage usage 
information 2 ±)out the object file is prov'ded. 

'•v (warnings) Su^^ress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

- The ada command executes the Ada coopiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
conpiled. 

By default, ada produces only object axxi net files. If the -M option 
is used, the ccmpiler automatically invokes a.Id and builds a conplete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.0 files produced a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
conpilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS conpilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler conponents based \ipon visible 
library directives, the option -sh is provided to print the name of 
the conponents actually executed. ^ 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE; If two files of the same name from different directories are 
conpiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second compilation will 
overwrite the first. For example, the compilation of 
Aisr/directory2/foo.a -L /\jsr/vads/test will overwrite the 
conpilation of Aisr/directoryl/foo.a -L /usrAads/test in the 
VADS library /usrAads/test. 


B-6 








COMPILATION SYSTEM OPTIONS 


NOTE; It is possible to specify the directory for temporary files by 
setting the environment variable IMPDIR to the desired path. If TLi ?DIR 
is not set, /tmp is used. If the path specified by IMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS conpiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragra^^ number enclosed in 
parentheses. 

See Also 


a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 


The linker options of this Ada implementation, as described in this Appendix, 


are provided 
references in 
report. 


by the customer, 
this appendix are 


unless specifically noted otherwise, 
to linker documentation and not to this 




OOHPIIATION SYSTEM OPTIONS 


a.Id Comnund Reference a.Id 

a.Id - build an executable program from previously coopiled units 
Syntax 

a.Id [options] unit_naine [linker_options] 

Arguments 

linker_options 

All arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id command. These are: 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INPX) directive [Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on scxne hosts 
(including ULTRIX, HP-UX and System V), (\^Sself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

I 

-Dx (dependencies) Displays the elaboration dependencies'used each 
time a unit is arbitrarily chosen for elaboration. 

-DK (debug) Debug memory overflow (use in cases v^ei^e linking 
a large number of xinits causes the error message "local 
symbol overflow" to occur). 

-E unit name 

(elaborate) Elaborate \init_naroe as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the terroorary file containing the list of 
object files to link. This file is only present when many object 


B-8 









CXJMPILATION SYSTEM OPTIONS 


files are being linked, 

-L libraryjnane 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde emd with the NX archive libraries. 
(Sun SPARC -> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (linits) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker ccamand before executing it. 

-V (verify) Print the linker cownand but suppress execution. 

-w (warnings) Suppress warning messages, 
unitjname 

name of an Ada \init. It must name a non-generic s\ibprogram. 

If unit_name is a faction, it must return a value of the 
type STANDARD.INTEGER. This Integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit name a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada con()iler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration ta ble and passes 
this information to the linker. Hie elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
am exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the ccxnpiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
con^iled from other lamguages or Ada object modules not named 
in context clauses in the Ada source. Any number of WIIHn 

B-9 







COMPILATION SYSTEM OPTIONS 


directives may be placed into a library but they must be 
nutdaered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl i LINK:object_file: 

Wira2:LINK:archive_f ile: 

WiTHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WlTHn directive in a local VADS library or earlier on the 
library search list will hide the same nxmobered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Counter Systems, the 
USE__LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals a^ dependencies. 

VADS_location/bin/a.ld is a wra^^r program that executes the 
correct executable based upon directives visible in the ada.lib 
file. Hiis permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If topdir 
is not set, /tmp is used. If the path specified by mPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

•nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker*. 


B-10 












APPENDIX C 

APPEl^lX F OF THE Ada STANDARD 


The only allowed ixqplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, ^ to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of ^is Ada irrplemsntation, as described in this Appendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vhich are 
not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTBGER is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type SHCHIT_FIjQAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type LGNG FLOAT is digits 15 

range -T.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -214748.3648 .. 214749.3647; 


end STANDARD; 








APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Inplementation-DepeiKient Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINEjONLY Pragma 

The INLINEJONLY pragma, vhen used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes eui INLINEJONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefined Ada packages, but provides no user access. It is 
used only to inplement code b^ies for v^ich no actual Ada 
body can be provided, for exanple the MACHINEjCODE package. 

1.3. SHARE_CCX)E Pragma 

The SHAREjCODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argianent and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
any subsequent ccxnpilation unit. 

When the first argument is a generic unit the pragma applies* 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the ccwpiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
V^en the second argument is FALSE each instwtiation will 
get a xinique copy of the generated code. The extent to 
\diich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 


C-2 





APPENDIX F OF IHE Ada STANDARD 


The name pragma SHARE B(X}Y is also recognized by the imple¬ 
mentation and has Bie same effect as SHARE_CXX>E. It is 
included for compatability with earlier versions of VADS. 

1.4. N0i_lMAGE Pragma 

The pragma su{^resses the generation of the image array used 
for the IMAGE attribute of enuoneration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type \diose image array has been su{:^ressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a suJsprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity frcmi other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAMB Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or sudaprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_aX)E Pragma t, 

Takes one of the identifiers GN or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 
procedure. It specifies that inplicit code generated by the 
ccxgpiler be allowed or disallov^. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. OPTIMlZE_CCX)E Pragma 


C-3 












APPENDIX F OF THE Ada STANDARD 


Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 
procedure. It specifies \^ether the code should be optim¬ 
ized 1^ the con^iler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CXXITROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

Ihis pragma is implemented as described in Appendix B of the 
Ada RN. 


2.3. INLINE 

This pragma is implemented as described in Aj^ndix B of the 
Ada RN. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or proce^res. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ANDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the AIX>RESS attribute. 

2.5. LIST 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 


2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccxnpiled. ^ 

2.7. NON_REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library sut^rogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the si^rogram will not be called 
recursively allowing the ccnipiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded su%>rograsm within a package spec or pack¬ 
age body. 


C-4 










APPE3®IX F OF THE Ada STANDARD 


2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 

2.10. PACK 

This pragma will cause the conqpiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in ^^ndix B of the 
Ada RH. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imroi^iately within a library package spec or ' 
bo^. The pragma directs the conpiler to optimize certain* 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at coopile time and Vdll 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


C-5 









APPEl^lX F OF THE Ada STANDARD 


2.15. ST0RAGE_UN1T 

This pragma is recognized by the implementation. The itople- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccanpiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in so&e cases OVERFLOH_CHECK cannot be 
supresseS. 

2.17. SYSTEMJJAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccxnpiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for \fdiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CCX)E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.6 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

\ 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX}RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 
with UNSIGNED TYPES; 


C-6 









APPENDIX F OF THE Ada STANDARD 


package SYSTEM is 

pragma su{^ress(ALL_CHECKS); 
pragma su{^ress(EXCEPTIONJIABLES); 
pragma not_elaborated; 

type NAME is ( sun4_cross_r4000b ); 

SYSTEMJOAME : constant NAME sun4_cross_r4000b; 

STORAGEJJNIT ; constant 8; 

MEMORY_SIZE : constant 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant -2 147 483 648; 

MAX_INT : constant 2 T47_783_?47; 

MAX_DIGITS : constant iS; 

MAX_MANTISSA : constant 31; 

FINE_DELTA ; constant 2.0**(-31); 

TICK : constant 0.01; 


— Other System-dependent Declarations 
subtype PRIORITY is INTB(2M range 0 .. 99; 
MAX_REC_SIZE ; integer 1024; 
type AIX>RESS is private; 


function ">" (A; ATORESS 
function "<" (A: AMJRESS 
function ">«"(A; ADDRESS 
function "<-''(A: ADDRESS 
function (A: ADDRESS 
function "+" (A; AIX}RESS 
function (A: A£E}RESS 


B: AIX}RESS) return BOOLEAN; 
B: MX3BESS) return BOOLEAN; 
B: A]X>RESS) return BOOLEAN; 
B: ADDRESS) return BOOLEAN; 
B: AIX}RESS) return INTEGER; 
I: INTEGER) return ADDRESS; 
I: INTEGER) return AIX)RESS; 


fxinction (I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


function NEMORY_AIE}RESS 

(I: UNSIGNED TYPES.UNSIGNED INTEX3M) retUL%i PDDEESS renames 


NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

type PASSIVE_TASK_ID is private; 
NO_PASSIVE_TASK_ID ; constant PASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG STATUS SIZE: constant 4; 


C-7 




APPENDIX F OF THE Ada STANDARD 


type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_EM)1AN, 

BIG_EM)IAN 

); 

BYTE_ORDER: constant BYTE_ORDER_T BZG_ENDIAN; 

type LONG_ADDRESS is private; 

NO_LCWG_AEa>R : constant LONG_AK»ESS; 

function "+" (A: LONG_AEXJRESS; 1: INTEGER) return LONG_AM>RESS; 
function (A: LONG_Ar»RESS; 1: INTEGER) return LONG_AI»RESS; 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LQNG_ADDRESS; 

function LOCALIZE(A: LQNG_AIX}RESS ; ByTE_SIZE : INTEGER) return ADDRESS; 

function STATION_OF(A! LONG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar pacltage is used, 
— then, this is the julian day. 
subtype nAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVDCATION_By_AM)RESS : constant BOOLEAN :• TRUE; 
SUPPORTS_PREELABORATIGN : constant BOOLEAN :• TRUE; 

MAKE_ACCESS_SUPPORTED : constant BOOLEAN ;» TRUE; 

— Arguments to the CIFO pragma INTERRUPTJIASK. 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETURN_ADDRESS return ADDRESS; 

private 

type AIX3RESS is new UNSIGNED_TyFES.UNSIGNED_INTEGER; 

NO_AIX)R : constant A[X)RESS 0; *. 

pragma BUILT_IN(">''); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN("<-"); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASR_ID is new UNSIGNEDjryPES.UNSIGNED_INTBGER; 

NO TASK ID : constant TASK ID 0; 


C-8 







APPENDIX F OF THE Ada STANCARD 


type PASSIVE_TASK_ID is new UNSIGNED_TYPES.UNSiaJED_INTEGER; 
N0_PASSIVE_1ASK_ID : constant PASS1VE_TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNS1GNED_INTEGER; 
NO_PROGRAM_ID ! constant PROGRAM_ID 0; 

type LONG_AK)RESS is new UNS1GNED_TYPES.UNSIGNED_INTBGER; 

NO hOtK AIX>R : constant LONS ADDRESS 0; 


pragma BUILT_IN(MAKE_LONG_AI»RESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN( STATION_OF); 

pragma BUILT_IN(RETURN_AI»RESS) ; 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record con^nents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of con^nents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause' 
packing of conponents only \dien the component type is a' 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only siipported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables v^ich have address 
clauses. Die specified address indicates the physical 
address associated with the variable. 


C-9 









APPEM}IX F OF IHE Ada STANDAE^ 


5.4. Interrupts 

Interrupt entries are not suj^rted. 

5.5. Representation Attributes 

The AK)RESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

L2d}els 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_C(®E provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enxjmeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol~ 
lows; 


CCX)E_n'( opcode, operand (, operand} ); 

v^ere n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

% 

CCX)E_0' ( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An opereuid caui only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the fvnctions defined in 
MACHINE_C0DE must be Static expressions, string literals, or 
the functions defined in MACHINE CCX}E. The 'REF attribute 


C-10 








APPEl^IX F OF THE Ada STANDARD 


may not be used as an argument in any of these functions, 
inline expeunsion of machine code procedures is suf^rted. 

6. Conventions for Implementation-generated Neunes 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
Nbne. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/D Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STQRASEJUNITS) ^en the size 
of ELEMENT_TYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string where ELEMENTJTYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_10 will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENnAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STDRAGE_UNITS) when the 
size of ELEMENTJTYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENTJTYPE'SIZE; 
is very large, MAX REC_SIZE is used instead.' 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER^IO to provide an upper 
limit on the record size. SEQUENTIAL IO io^ses no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the inplemen- 
tation. It is not intended to inply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a maximum line length of 500 


C-11 




APPENDIX F OF THE Ada STANDARD 


characters including the end of line character. 

11.2. Record 2 U)d Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'ST0RAGE_SI2E for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STCWAGEJUNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 




C-12 








