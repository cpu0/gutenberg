9 058 


UNCLASSIFIED __ , 

seci 1 *:^ g*&sinc*'io». o* this **;,[ *'*& 

I REPORT DOCUMENTATION PAGE 


1. mPOKl *J«e tR 


I*. TJUl (meJvbwtf 


rew 


D AT f EtAi IHfTRcmONS ' 

r L tr*on roy^.r^t form 

(/. 60vT ACCCSSION NO 3. •* Cl PHnFs CATALOG Nj**s*fi 




S TYPE Of *1*0*1 l *1*100 COVERED 

16 Nov. 1989 to 01 Dec. 1990 


Ada Compiler Validation Summary Report: verdix 16 ^ ov ' iy8y t0 Ui Uec ’ 1 

Corporation, VADS VMS-MIL-STD-1750A, V6.0, MP, DEC Micro VA: ■■ - -- 

III (Host) to Tektronix 1750A Emulator (Ethernet Download) *• J»G eRG. «E*0*i »i/**dER 

vl.0 0-00 (Target), 891116M1.10194. ■ 

*;7 ivinomu T cobnuti 0* (•**? uj*h*i,) 

VrigTIt^Patterson AFB 
Dayton, OH, USA 


I. COATAACT o* (**1,1 



». H*f 0**1*G 0*0*1,12*110* AAD ADDRESS 

Wright-Patterson APB 
Dayton, OH, USA 


O il. C 0 **«Dal*G 0 * r ICC KA“L AAD ADDRESS 

Ada Joint Program Office 


< United States Department of Defense 

I Kashinoton. DC 2O301-3OS1 


Washington, DC 2D301-3081 


14. aC'SHOAlNG ACSLN: Y MAKE i ADORE Si(if d'etre nt from Controlling Office) 

Wright-Patterson AFB 
Dayton, OH, USA 


16. C1S1R1BJ110* Si All** E *1 (ofth<s**pon) 


io. **oc«A“ tiiwim. *r:.h:i. tas* 

ARE* l MORI l/M T My**sE RS 


12. «l*0R1 DATE 


IS. S£Cu*lTi Ct*SS (o'tM rtpon) 

UNCLASSIFIED 


IS*. glC^»SS|flCAT10A OO-SSRADI*.; 

K/A 


Approved for public release; distribution unlimited. 


17. CIS (pfxht sbr.fBCt f nff *g j m B ?ik 2C tf 0 'f nr/ro'r Nepon; 


UNCLASSIFIED 


10. SJ**A*iK'**' NCUS 


p j»n* jewe n a Hfr f 

DTIC 

ELEC7E 



IB. *£ imDRDS (Continue 0 "'»»»'!» l*d, ifneteuey end identify 6, 6/o<* 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. AES1**C1 (Co«»<"w* 0" '*•*'if fde if ntcette'y end idenhfy 6, b>oti number) 

Verdi'x Corporation VADS VMS-MIL-STD-1750A, V6.0, MP, Wright-Patterson AFB, OH, DEC Micro- 
VAX III under VMS 5.0 (Host) to Tektronix 1750A Emulator (Ethernet Download), vl.00-00 
under VADS EXEC v6.0 (Target), ACVC 1.10 


00 * u ’ w ' 1473 loniOA o» i *jv 6 s is oesowiu 

i jam ?i s/i, pior-if'014-6601 _ UNCLASSIFIED ___ 

ItCuRllY tlASSl'lC»110«, Of 1H1S RAGE <**♦" Pet* Intend) 

















AVF Control Number: AVF-VSR-345.0190 

89-08-30-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 891116W1.10194 
Verdix Corporation 
VADS VMS->MIL-STD-1750A, V6.0, MP 
DEC MicroVAX III Host 

and Tektronix 1750A Emulator (Ethernet Download), vl.00-00 Target 


Completion of On-Site Testing: 
16 November 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 



(r.\ I 1 


n.iM 





Ada Compiler Validation Summary Report: 


Compiler Name: VADS VMS->MIL-STD-1750A, V6.0, MP 
Certificate Number: 891116W1.10194 

Host: DEC MicroVAX III under 

VMS 5.0 

Target: Tektronix 1750A Emulator (Ethernet Download), 
vl.00-00 under VADS EXEC v6.0 

Testing Completed 16 November 1989 Using ACVC 1.10 
Customer Agreement Number: 89-08-30-VRX 

This report has been reviewed and i- approved. 




Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 


Wright-Patterson AFB OH 45433-6503 


yj ,'o/ 






Ada Validation'Tj’rganization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


) r / 

Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 


Accesion f o' 

NTIS Ct7A v <l 
DTIC TAB 

(J:tanno..".C£ d 

JiiStdfO.it.w:-. 

By._. 

D1..I1P .? >• f 


Dist 

w 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-5 

3.7.1 Prevalidation.3-5 

3.7.2 Test Method.3-5 

3.7.3 Test Site . 3-6 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED BY VERDIX CORPORATION 





















CHAPTER 1 
INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 








INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

^ This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 16 November 1989 at Aloha OR. 

' ^ 1 f) 

1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.%552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 

represent or warrant that all statements set forth in this report are 

accurate and complete, or ’■hat the subject compiler has no nonconformities 

to the Ada Standard other than those presented. Copies of this report are 

available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 







INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures, Version 2.0, Ada Joint Program 
oHice, May 1989. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 
Applicant The agency requesting validation. 


AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures . 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 


Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 


1-3 





INTRODUCTION 


Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 


Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 


Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 
illegal construct that it contains is detected by the compiler. 


1-4 








INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 










INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that vas determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 






CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: VADS VMS->MIL-STD-1750A, V6.0, MP 
ACVC Version: 1.10 
Certificate Number: 891116W1.10194 
Host Computer: 

Machine: DEC MicroVAX III 

Operating System: VMS 5.0 

Memory Size: 16 MB 

Target Computer: 

Machine: Tektronix 1750A Emulator 

(Ethernet Download), vl.00-00 

Operating System: VADS EXEC v6.U 

Memory Size: 2 MW 


2-1 







CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 10 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
LONG INTEGER and L0NG_FL0AT in package STANDARD. (See tests 
B86O01T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 


2-2 






CONFIGURATION INFORMATION 


(4) Sometimes CONSTRAINT_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round away from 
zero. (See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round away 
from zero. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises CONSTRAINT_ERROR only 
for a two-dim array subtype when the big dimension is the 
second one. (See test C36003A.) 

(2) NUMERIC_ERROR is raised when 'LENGTH is applied to an array 

type with INTEGER'LAST + 2 components with each component 

being a null array. (See test C36202A.) 

(3) No exception is raised when 'LENGTH is applied to an array 
type with SYSTEM.MAX_INT + 2 components with each component 
being a null array. (See test C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array objects are sliced. (See 
test C52103X.) 


2-3 








CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B (2 tests), EA3004C..D (2 tests), and 
CA3004E..F (2 tests).) 


2-4 





CONFIGURATION INFORMATION 


i. Generics. 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output. 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_I0 can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D,and EE2401G.) 


(3) The Director, AJPO, has determined (AI-00332) that every call 
to OPEN and CREATE must raise USE_ERROR or NAME_ERROR if file 
input/output is not supported. This implementation exhibits 
this behavior for SEQUENTIAL 10, DIRECT 10, and TEXT 10. 


2-5 









CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 637 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 285 
executable tests that use floating-point precision exceeding that supported 
by the implementation and 242 executable tests that use file operations not 
supported by the implementation. Modifications to the code, processing, or 
grading for 13 tests were required to successfully demonstrate the test 
objective. 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1131 

1698 

16 

16 

46 

3036 

Inapplicable 

0 

7 

617 

1 

12 

0 

637 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 








TEST INFORMATION 


i 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 

i 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

192 

547 

496 

245 

171 

99 

160 

331 

137 

36 

252 

294 

76 

3036 

Inappl 

20 

102 

184 

3 

1 

0 

6 

1 

0 

0 

0 

75 

245 

637 

Vdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 

WITHDRAWN TESTS 





The following 44 

tests were 

withdrawn from ACVC Version 1.10 at 

the time of 

this 

validation: 







E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 


CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 


CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 


CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 


CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 


ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 


CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


CE3301A 

CE3411B 





See 

Appendix D for the reason that each 

of these 

tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 637 tests were inapplicable for the 
reasons indicated: 


a. 


The following 285 tests are not 
floating-point type declarations 
SYSTEM.MAX DIGITS: 


applicable because they have 
requiring more digits than 


C24113F..Y (20 tests) 
C3570&F..Y (20 tests) 
C35708F..Y (20 tests) 


C35705F..Y (20 tests) 
C35707F..Y (20 tests) 
C35802F..Z (21 tests) 


3-2 






TEST INFORMATION 


C45241F..Y (20 tests) C45321F..Y (20 tests) 

C45421F..Y (20 tests) C45521F..Z (21 tests) 

C45524F..Z (21 tests) C45621F..Z (21 tests) 

C45641F..Y (20 tests) C46012F..Z (21 tests) 

b. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SH0RT_FL0AT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT INTEGER: 


C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

C55B07B 

B55B09D 

B86001V 


CD7101E 

d. C45231D, B86001X, and CD7101G are not applicable because this 

implementation does not support any predefined integer type with a 
name other than INTEGER, i.ONG_INTEGER, or SH0RT_INTEGER. 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 48. 

f. D64005G is not applicable because this implementation does not 

support nesting 17 levels of recursive procedure calls. 

g. C86001F is not applicable because, for this implementation, the 

package TEXT_I0 is dependent upon package SYSTEM. This test 

recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SH0RT_FL0AT. 

j. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

k. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

l. CD2A61E and CD2A61G are not applicable because this implementation 
does not support an 8 bit integer type. 

m. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 









TEST INFORMATION 


n. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

o. The following 42 tests are not applicable because this 
implementation does not support an address clause when a dynamic 
address is applied to a variable requiring initialization: 

CD5003B..H (7) CD5011A..H (8) CD5011L..N (3) CD5011Q 

CD5011R CD5012A..I (9) CD5012L CD5013B 

CD5013D CD5013F CD5013H CD5013L 

CD5013N CD5013R CD5014T..X (5) 

p. CD5012J, CD5013S, and CD5014S are not applicable because this 

implementation does not support address clauses for tasks. 


q. The following 242 tests are inapplicable because sequential, text, 
and direct access files are not supported: 


CE2102A..C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y 

(12) 

CE2103C..D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A..B 

(2) 

CE2107A..H 

(8) 

CE2107L 


CE2108A..B 

(2) 

CE2108C..H 

(6) 

CE2109A..C 

(3) 

CE2110A..D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2204A..D 

(4) 

CE22Q5A 


CE2208B 


CE2401A..C 

(3) 

EE2401D 


CE2401E..F 

(2) 

EE2401G 


CE2401H..L 

(5) 

CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..B 

(2) 

EE3102C 


CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 


EE3203A 


CE3208A 


EE3301B 


CE3302A 


CE3305A 


CE3402A 


EE3402B 


CE3402C..D 

(2) 

CE3403A..C 

(3) 

CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 


EE3412C 


CE3413A 


CE3413C 


CE3602A..D 

(4) 

CE3603A 


CE3604A..B 

(2) 

CE3605A..E 

(5) 

CE3606A..B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 

(3) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3805A..B 

(2) 

CE3806A..B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C 

(3) 


CE3906E..F (2) 

r. CE2103A..B (2 tests) and CE3107A are not applicable because this 
implementation does not support external file CREATE and OPEN 
operations. These tests raise the exception USE_ERR0R. (See 
Section 3.6) 


3-4 





TEST INFORMATION 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 13 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A B91001H BC1303F BC3005B 

CE2103A, CE2103B, and CE3107A required code modifications because the tests 
raise USE_ERROR, for which there is no exception handler, and fail to 
execute properly. An exception handler for USE_ERROR was added to each 
test. When USE_ERROR was raised, a message was printed stating this. The 
AVO ruled that it was acceptable for‘these tests to raise USE_ERROR and be 
graded as not applicable. 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the VADS VMS->MIL-STD-1750A, V6.0, MP compiler was submitted to the AVF 
by the applicant for review. Analysis of these results demonstrated that 
the compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 

Testing of the VADS VMS->MIL-STD-1750A, V6.0, MP compiler using ACVC 
Version 1.10 was conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 

Host computer: DEC MicroVAX III 

Host operating system: VMS 5.0 

Target computer: Tektronix 1750A Emulator 

(Ethernet Download), vl.00-00 


3-5 





TEST INFORMATION 


Target operating system: VADS EXEC v6.0 

Compiler: VADS VMS->MIL-STD-1750A, V6.0, MP 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded to disk, the full set of tests was 
compiled and linked on the DEC MicroVAX III. After compiling, a SET HOST 
RENTAL was used to download and execute the tests from another VMS host (a 
DEC MicroVAX II). This machine was able to read the linked objects 
directly via DECNET. This additional machine was used only because the 
TEKTRONICS 8540 Ethernet Software and hardware is licensed only for that 
MicroVAX II. All executable tests were run on the Tektronix 1750A Emulator 
(Ethernet Download), vl.00-00. Results were printed from the host 
computer. 

The compiler was tested using command scripts provided by Verdix 
Corporation and reviewed by the validation team. The compiler was tested 
using all default option settings. See Appendix E for a complete listing 
of the compiler options for this implementation. 

Tests were compiled, linked, and executed (as appropriate) using a single 
host and target computer. Test output, compilation listings, and job logs 
were captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Aloha OR and was completed on 16 November 1989. 


3-6 







APPENDIX A 


DECLARATION OF CONFORMANCE 


Verdix Corporation has submitted the following 
Declaration of Conformance concerning the VADS 
VMS->MIL-STD-1750A, V6.0, MP compiler. 





DECLARATION OF CONFORMANCE 


Compiler Implementor: VERDIX Corporation 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 


Base Compiler Name: 
Host Architecture ISA: 
Target Architecure ISA: 


VADS VMS -> MIL-STD-1750A 
DEC Microvax III 
Tektronix 1750A Emulator 
(Ethernet Download), v 1.00-00 


Version: 6.0, MP 

OS&VER#: VMS 5.0 

OS& VER#: VADS EXEC v6.0 


Implementor’s Declaration 


I, the undersigned, representing Verdix Corp., have implemented no deliberate extensions to the Ada 
Language Standard ANSI/MIL-STD-1815A in the compilers(s) listed in this declaration. I declare that 
VERDIX is the owner of record of the Ada language compilers) listed above and, as such, is responsi¬ 
ble for maintaining said compiler(s) in conformance to ANSI/MIL-STD-1815A. All certificates and 
registrations for the Ada language compilers) listed in this declaration shall be made only in the 
owner’s corporate name. 



Stephen F. Zeigler 

Vice-President 

Ada Products Division 


Date: 


Owner’s Declaration 


I, the undersigned, representing Verdix Corp., take full responsiblity for implementation and mainte¬ 
nance of the Ada compiler(s) listed above, and agree to the public disclosure of the final Validation 
Summary Report I declare that of all the Ada language compilers listed, and their host/target perfor¬ 
mance are in compliance with the Ada Language Standard ANSI/MIL-STD-1815A. 

. -"""I ' 

N - ; 

^ ', Date: 

Stephen F. Zeigler 

Vice-President 

Ada Products Division 


A-2 





APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the VADS VMS->MIL-STD-1750A, V6.0, MP compiler, as 
described in this Appendix, are provided by Verdix Corporation. Unless 
specifically noted otherwise, references in this Appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 

type L0NG_FL0AT is digits 9 range -1.70141183E+38 .. 1.70141183E+38; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-l 









1. Implementation-Dependent Pragmas 

1.1. INLINEONLY Pragma 

The lNLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that die subprogram must always be inlined. This pragma also suppresses the generation of a callable 
version of the routine which saves code space. If a user erroneously makes an ENLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted and an PROGRAM_ERROR will be raised at run 
time. 

1.2, BUILTIN Pragma 

The BUDLT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACHINE_CODE package. 

1J. SHARECODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declarative item in a declarative part or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit. 

The name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included for compatability with earlier versions of VADS. 

1.4. NO IMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE attribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. An auempt to 
use the IMAGE attribute on a type whose image array has been suppressed will result in a compilation 
warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subDrotrram or variable defined in Ada and 
allows the user to specify a different external name that may be used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or subprogram defined in another 
language and allows it to be referenced directly in Ada. The pragma will replace all occurrences of the 
variable or subprogram name with an external reference to the second, link_argument. The pragma is 
allowed at the place of a declarative item in a package specification and must apply to an object or 


B-2 









subprogram declared earlier in the same package specification. The object must be declared as a scalar 
or an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

U. OPTIMIZECODE Pragma 

Takes one of the identifiers ON or OFF as the single argument This pragma is only allowed within a 
machine code procedure. It specifies whether the code should be optimized by the compiler. The 
default is ON. When OFF is specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2J. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

Thts pragma supports calls to ’C’ and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM. AU parameters must have mode EN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 

This pragma lakes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 
package body. 

2.8. NOT ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS, a configuration package or an Ada package that is 






referenced from a language ocher than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASS I VE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no effect. 

2.15. STORAGE UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that DIVISION_CHECK and in some cases 
OVERFLOW_CHECK cannot be supressed. 

2.17. SYSTEMJNAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P’REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units allocated to P. For a subpro¬ 
gram, package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 


B-4 










See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit, or entry, the 'REF attribute is not supported.) 


4. Specification Of Package SYSTEM 


•• Copyright 1987, 1988, 1989 Verdi* Corporation 

•• Preserve 1in« numbers aa lhay irt reported io ACVC last*. 

with unaigned_typ«s; 
package SYSTEM ia 

pragma s«ppresa(ALL_CHElQCS ); 
pragma sappraa a (EXCEPT ION_TABLES) ; 
pragma not_e!aboratad; 

type NAMs ia ( ml750a ): 

SYSTEM NAfrfi : con at ant NAM ml 750a; 

STORAGE _UN IT : conatant 16; 

VfjfcCRY_S IZE : conatant :• 65536; 

-- Sya t am-Oapandan t Named Number* 


MIN 1NT 
MAX'1 NT 

max'digits 

MAX MANTISSA 
PINE DELTA 

tick” 


conatant 
conatant 
cona t ant :* 31; 

: conatant 
conatant 


:«-2 147 483 648; 

2 147 483 647; 
:■ 9? 

:• 2 . 0 **(- 31 ) ; 

:• 0 . 01 ; 


•• Other Syatam-dapandant Daclarationa 
•ubtype PRIORITY ia INTEGER range 0 .. 99; 


MAX_REC_SIZB : integer :■ 255; 


type ADDRESS ia private; 

function “>• (A: 
function "<“ (A: 
function ■>« , (A: 
function ’<»’(A: 
function •-* (A: 
function (A: 
function (A: 


ADDRESS) return BOOLEAN 
ADDRESS) return BOOLEAN 
ADDRESS) return BOOLEAN 
ADDRESS) return BOOLEAN 
ADDRESS) return INTEGER 
INTEGER) return ADDRESS 
INTEGER) return ADDRESS 


ADDRESS; B: 
ADDRESS; B: 
ADDRESS; B: 
ADDRESS; B: 
ADDRESS; B: 
ADDRESS; I: 
ADDRESS; I : 


function (I: UN51 OCD_TYPBS . UNS1 OJED_ INTEGER) raturn ADDRESS; 


function VFMDRY ADDRESS 

(I: UNS I OflED_TYPES. UNS I INTEGER) return ADDRESS rename a 


NOADOR : conatant ADDRESS; 


■ * 1750a-specifics 

EXTENDED.Vf-MDRY : BOOLEAN :• FALSE: 

type SHORT ADDRESS ia private; 

NO_SHORT_ADOR : conatant SHCRT ADORES S; 

aubtypa SEOtNT is INTEGER range 0 .. 1NTEGER'LAST; 

function OFFSET OP(A: ADDRESS) return SHORT ADDRESS; 
function SEOtNT_OP(A: ADDRESS) raturn SEOtNT; 
function SEOtNT OF return SEOtNT; 

function MAKE ADDRESS(A: SHORT ADDRESS. SEG: SEOtNT) return ADDRESS; 
function PHYSTCAL_ADDRESS( I: LONG. INTEGER) return SHORT_ADDRESS ; 




ivite 


type ADORESS ia new integer; 

NO_ADOK : constant ADORESS :« 0; 

pragma BUILT 1N<“>*); 
pragma BUILTJNf ’<* ); 
pragma 8UILT_1N(">■*); 
pragma BUILT IN("<»“); 
pragma BUILT”IN(*•*): 
pragma BU!LT_IN(“*•); 

type SHORT ADORESS ia new mtcgsr; 

NOSHORTACOR constant SH0RT_ADORESS ■ 0; 


pragma in1i at < OFFSET_OP) ; 
pragma isl me (SEOtNT_OF); 
pragma ialiot(MAKE_ADDR£SS); 


B-5 











prim 111 4HI(PHYSICAL_ACCR£SS) . 
tad SYSTHrt; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In ihe absence of pragma PACK record components are padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eLimin'" the padding where possible. Pragma 
PACK has no other effect on the storage allocated for record components a record representation is 
required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the number of bits required to represent the range 
of the subtype. A size clause applied to a record type will not cause packing of components; an expli¬ 
cit record representation clause must be given to specify the packing of the components. A size clause 
applied to a record type will cause packing of components only when the component type is a discrete 
type. An error will be issued if there is insufficient space allocated. The SIZE attribute is not sup¬ 
ported for access or floating point types. 

5-3. Address Clauses 

Address clauses are only supported for variables. Since default initialization of a variable requires 
evaluation of the variable address elaboration ordering requirements prohibit initialization of a variables 
which have address clauses. The specified address indicates the physical address associated with the 
variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record type(s) needed in the code statement, an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE_n’( opcode, operand (, operand] ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The formal is as follows: 


B-6 












CODE_N’( opcode , (operand {, operand })); 

For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op => opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the ’REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHINE_CODE. The ’REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as physical addresses. 

8. Restrictions on Unchecked Conversions 

None. 

9. Restrictions on Unchecked Deallocations 

None. 


ID. Implementation Characteristics of I/O Packages 

Instantiations of DDRECT_IO use the value MAX_REC SIZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating DIRECTJO to provide an upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGE_UNIT bits. DIRECTJO will raise USE_ERROR if 
MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENT!AL_IO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER 10 to provide an upper limit on the record size. SEQUENTIAL_IO imposes no 
limit on MAX REC SIZE. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits are available to every program. 


B-7 








11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 


11.2. Record and Array Sizes 

The maximum size of a statically sized array type is slightly less than 32,000 x STORAGE_UNlTS. 
The maximum size of a statically sized record type is slightly less than 32,000 x STORAGE_UNITS. 
A record type or array type declaration that exceeds these limits will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main program 
is allocated a fixed size stack of 400 STORAGE_UNTTS. This is a user-configurable parameter. This is 
the value returned by T’STORAGE_SlZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by T’STORAGE_SIZE for 
an access type T. 

lli. Limit on Declared Objects 

There is an absolute limit of approximately 32,000 x STORAGE_UNlTS for objects declared statically 
within a compilation unit If this value is exceeded the compiler will terminate the compilation of the 
unit with a FATAL error message. 


B-8 










APPENDIX C 
TEST PARAMETERS 


Certain teats in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
a Val V es to be substituted are represented by names that begin 

vith a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 



$ACC_SIZE 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


$BIG_ID1 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


(1..498 => 'A', 499 => '1') 


$BIG_ID2 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


(1..498 => 'A', 499 => ' 2 ') 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 => 'A', 250 => '3', 
251..499 => 'A') 


C-l 





TEST PARAMETERS 


Name and Meaning _ 

$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with $BIG_STRING2 
yields the image of $BIG__ID1. 

' $BIG_STRING2 

A string literal which when 
catenated to the end of 
$BIG_STRING1 yields the image of 
$BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..249 => 'A', 250 => '4' , 
251..499 => 'A' ) 


(1..496 => 'O', 497..499 => "298") 


(1..493 => 'O', 494..499 => "69.0E1") 


(1 => '"', 2..200 => 'A', 201 => '"') 


(1 »> '«', 2..300 => 'A', 301 -> '1', 
302 => '"') 


(1..479 => ' ' ) 

255 

65536 

16 


C-2 





TEST PARAMETERS 


Name and Meaning _ Value 

$DEFAULT_SYS NAME M1750A 

The value of the constant 
SYSTEM.SYSTEM NAME. 


$DELTA_D0C 

A real literal whose value is 
SYSTEM.FINE DELTA. 


0.0000000004656612873077392578125 


$FIELD_LAST 

A universal integer 
literal whose value is 
TEXT 10.FIELD'LAST. 


32767 


$FIXED_NAME 

The name of a 
fixed-point type 
DURATION. 


N0_SUCH_TYPE 

predefined 
other than 


$FL0AT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT FLOAT, or 
LONG FLOAT. 


NO SUCH TYPE 


$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 
A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 


100000.0 

10000000.0 

99 

/illegal/file_name/2}JSZ2102C.DAT 


$ILLEGAL_EXTERNAL_FILE_NAME2 /illegal/file name/CE2102C*.DAT 

An external file name which 
is too long. 

$INTEGER_FIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 




TEST PARAMETERS 



$INTEGER_LAST 

A universal 
whose value 


integer literal 
is INTEGER'LAST. 


$INTEGER_LAST_PLUS_1 

A universal ~ integer literal 
whose value is INTEGER'LAST + 1. 


$LESS_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 


$LESS_THAN_DURATION BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$ LOW_PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 


$MANTISSA_DOC 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 

Maximum digits supported for 
floating-point types. 


$MAX_IN_LEN 

Maximum input line length 
permitted by the implementation. 


$MAX_INT 

A universal 
whose value i 


integer literal 
SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be $MAX_IN_LEN 
long. 


32767 


32768 


- 100000.0 


- 10000000.0 


2147483647 


2147483648 


(1. .2 => "2:", 3..496 => '0', 
497..499 => "11:") 









TEST PARAMETERS 


Name and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be $MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

L0NG_FL0AT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1..3 => "16:", 4..495 => 'O', 
496..499 => "F.E:") 

(1 => 2..498 => 'A', 499 => 

-2147483648 

16 

NO_SUCH_TYPE_AVAILABLE 

M1750A 

16#FFFFFFFD# 

65536 


C-5 



TEST PARAMETERS 


Name and Meaning _ 

$NEW_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 

$NEV_SYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

16 


M1750A 


16 


0.01 


C-6 




APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an "ninrarHod i 1 egali ty: a select 

statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING_0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 


D-l 








WITHDRAWN TESTS 


g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 

tests wrongly attempt to check, the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED700bC..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM. TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK —particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 

ARG. 


o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 


D-2 











WITHDRAWN TESTS 


p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 

q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 

Ada standard. 

r. CE3301A: This test contains several calls to END_0F_LINE and 

END_0F_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT' LAST in order to check, that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 








APPENDIX E 

COMPILER OPTIONS AS SUPPLIED BY VERDIX CORPORATION 


Compiler: VADS VMS->MIL-STD-1750A, V6.0, MP 

ACVC Version: 1.10 


E-l 


VADS ADA — Ada compiler 


Syntax 

vads ada source Jile [, ... ] 

Description 

The command VADS ADA executes the Ada compiler and compiles the named Ada source file, 
ending with the .A suffix. The file must reside in a VADS library directory. The ADA.LiB file in this 
directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in the [.OBJECTS] subdirectory in a file with the same 
name as that of the source with .01, .02, etc. substituted for .A. The executable file is left in the VADS 
library and has the name of the ‘main’ unit with the extension .EXE. For cross compilers, the file 
extension is .VOX. The /EXECUTABLE qualifier can be used to produce an executable with some 
other name. 

By default, VADS ADA produces only object and net files. If the /MAIN option is used, the compiler 
automatically invokes VADS LD and builds a complete program with the named library unit as the 
main program. 

Non-Ada object files may be given as arguments to VADS ADA. These files will be passed on to the 
linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order, but the order of compilation and the order of 
the files to be passed to the linker can be significant. 

Several VADS compilers may be simultaneously available on a single system. The VADS ADA 
command within any version of VADS on a system will execute the correct compiler components 
based upon visible library directives. 

Program listings with a disassembly of machine code instructions are generated by VADS DB or 
VADS DAS. 

Qualifiers 

/APPE ND Append all output to a log file. 

/DEPENDENCIES Analyze for dependencies only; no link will be performed if this 

option is given (/MAIN and /OUTPUT options must not be used with 
this qualifier). 

/ERRORS [-{option [,...])] Process compilation error messages using the ERROR tool and 

direct the output to SYSSOUTPUT; the parentheses can be omitted 
if only one qualifier is given (by default, only lines containing errois 
are listed). 


E-2 








VADS ADA 


Options: 

LISTING List entire input file. 

EDITOR[ = "ed/for"] 

Insert error messages into the source file and 
call a text editor (EDT by default). If a value is 
given as a quoted string, that string is used to 
invoke the editor. This allows other editors to 
be used instead of the default. 

OUTPUT[ = filename] 

Direct error processed output to the specified 
file name; if no file name is given, the source 
file name is used with a file extension .ERR. 

BRIEF list only the affected lines [default] 

Only one of the BRIEF, LISTING, OUTPUT, or EDITOR options can 
be used in a single command. 

For more information about the /ERRORS option, see also Chapter 
NO TAG THE COMPILER, Section NO TAG COMPILER ERROR 
MESSAGE PROCESSING on page NO TAG. 

/EXECUTABLE =filename 

Provide an explicit name for the executable when used with the 
/MAIN qualifier; the file name value must be supplied (if the file type 
is omitted, .EXE is assumed). 

/KEEPJL Keep the intermediate language (IL) file produced by the compiler 

front end. 

/LIBRARY =library name Operate in VADS library libraryjiame (the current working directory 

is the default). 

/LINK_ARGUMENTS = "value" 

Pass command qualifiers and parameters to the linker. 

/MAIN[=trn/f_name] Produce an executable program using the named unit as the main 

program; if no value is given, the name is derived from the first Ada 
file name parameter (the .A suffix is removed); the executable file 
name is derived from the main program name unless the 
/EXECUTABLE qualifier is used. 

/NOOPTIMIZE Do not optimize. 

/NOWARNINGS Suppress warning diagnostics. 

/OPTIMIZE]= number] Invoke the code optimizer (OPT1MZ). An optional digit (there is no 

space before the digit) limits the number of passes by the optimizer: 

• no /OPTIMIZE option, make one pass 

/OPTIMIZE no digit, optimize as far as possible 

/OPTIMIZE = 0 prevents optimization 

/OPTIMIZE *1 no hoisting 

/OPTIMIZE = 9 full optimization 

The addition of the INFO directive, OPT1M3:INFO:TRUE, to the 
ADA.LIB will cause the compiler to use a new optimizer (OPTIM3) 
that generates faster code. 


E-3 











VADS ADA 


The default level of optimization for OPT1M3 is 04. Note that 
optimization levels for 0PTIM3 are more than simply additional 
iterations: 


/OPTIMIZE 

/OPTIMIZE = 0 
/OPTIMIZE = 1 


no digit, full optimization (same as OPTIM2 

VADS ADA /OPTIMIZE = 9) 

prevents optimization 

no hoisting (same as OPT1M2 VADS ADA 
/OPTIMIZE = 1) 


/OPTIMIZE = 2 
/OPTIMIZE = 3 
/OPTIMIZE = 4 
/OPTIMIZE = 5 
/OPTIMIZE *6 
/OPTIMIZE * 7 
/OPTIMIZE = 8 


no hoisting but more passes 

no hoisting but even more passes 

hoisting from loops 

hoisting from loops but more passes 

hoisting from loops with maximum passes 

hoisting from loops and branches 

hoisting from loops and branches, more 
passes 


/OPTIMIZE = 9 hoisting from loops and branches, maximum 

passes 

Hoisting from branches (and cases alternatives) can be slow and 
does not always provide significant performance gains so it can be 
suppressed. 

For information on INFO directives see IMPLEMENTATION 
REFERENCE, INFO Directive Names, page 5-2. For information on 
adding and deleting INFO directives, see [VADS COMMAND 
REFERENCE], VADS INFO, page NO TAG and for more information 
about optimization, see COMPILER, 4.4 Optimization, page 4-3 . 

/OUTPUT= file name Direct the output to filename (the default is SYSJOUTPUT). 

/RECOMPILEJJBRARY = VADSJibrary 

Force analysis of all generic instantiations causing reinstantiation 
of any that are out of date. 


/SHOW_ALL 


Print the name of the front end, code generator, optimizer, linker and 
list the tools that will be invoked. 


/SUPPRESS 

/TIMING 

/VERBOSE 


Apply pragma SUPPRESS for all checks to the entire compilation. 
Print timing information for the compilation. 

Print information for the compilation. 


See also Chapter NO TAG VADS COMMAND REFERENCE, VADS DAS on page NO TAG, VADS DB 
on page 9-3, VADS ERROR on page NO TAG, VADS LD on page NO TAG, and VADS MKL1B on 
page 8-21. 


Diagnostics 

The diagnostics produced by the VADS compiler are intended to be self-explanatory. Most refer to 
the RM. Each RM reference includes a section number and optionally, a paragraph number enclosed 
in parentheses. 


E-4 


I 











