iiur 

474^7 -H008-U^ -DO 


HOST COMPUTER SOFTWARE SPECIFICATIONS 

FOR A 

ZERO-6 PAYLOAD MANHANDLING SIMULATOR 


10 NOVEMBER 1986 


PREPARED FOR 


NATIONAL AERONAUTICS AND SPACE ADMINISTRATION 
LYNDON B. JOHNSON SPACE CENTER 
HOUSTON, TEXAS 


CONTRACT NAS9-17554 


(NASA-CB-180191) HGS1 CCHEC1EI SOFTWARE 
SPECIFICATIONS ICE A 2EE0-g EAYLCAD 
MANHANDLING SIMDLATOB (TBS, Inc., Houston, 
lei.) 239 p CSC! 14B 

G3/14 


N87-1E566 

Unclas 

43556 


SYSTEM DEVELOPMENT DIVISION 


TRW 

DEFENSE SYSTEMS GROUP 
HOUSTON, TEXAS 



47467-H008-UX-00 



HOST COMPUTER SOFTWARE SPECIFICATIONS 
FOR A 

ZERO-G PAYLOAD MANHANDLING SIMULATOR 


10 November 198G 


Prepared 

National Aeronautics and 
Lyndori B. Johnson 


for 

Space Administration 
Space Center 


Contract NASS- 17554 


Prepared by 




S. W. Wilson 
Staff Engineer 
Systems Engineering and 
Analysis Department 


Approved by 

D. K. Phillips 
Manager 

Systems Engineering and 
Analysis Department 



System Development Division 


TRW 

Defense Systems Group 
Houston, Texas 



FOREWORD 


The HP PASCAL source code contained in Section 1 uas developed for the 
Mission Planning and Analysis Division ( MPAD) of NASA/ JSC, and takes the 
place of detailed flow charts defining the host computer software specifica- 
tions for MANHANDLE, a digital/graphical simulator that can be used to ana- 
lyze the dynamics of onorbit (zero-g) payload manhandling operations. Input 
and output data for representative test cases are contained in Section Z. 

MANHANDLE makes use of the utility software modules UTILMATH, UTILSPIF, and 
UTILVEMQ , whose specifications are defined in Reference I. MANHANDLE can be 
operated in a standalone mode on the host computer to produce digital output 
only, or it can be interfaced with the 1 bldmilmu’ and Vunmilmu’ programs in 
the MPAD IMI graphics system to produce runtime CRT images of simulated views 
from selectable “canera" locations. In addition, hardcopy plots of selected 
data outputs may be produced in the postprocessing mode if an HP-987Z plotter 
is connected to the host computer. 

Although another language may be desirable for the ultimate implementation of 
the software, HP PASCAL (References Z and 3) was chosen as the medium for 
developing, testing, and documenting the software specifications because, of 
all the options currently available on MPAD’s mainline (HP-9000) computers, 
it uas judged to be best suited to that purpose in terms of understandabil- 
ity, reliability, and maintainability. Most of the source code representing 
the specifications for the MANHANDLE host computer program software is common 
to both the Pascal 3.0 and the HP-UX 5.0 (Unix) operating systems, and to all 
models of the HP-9000 family of computers. The code that is dependent on the 
computer model and operating system is isolated in a small driver program 
(Section 1.1) and a system/PASCAL interface module (Section 1.5). 

The predecessor of MANHANDLE was the PLGRAB simulator which uas implemented 
on an HP-9000 Series Z00 host computer by TRW for MPAD in support of the 
Westar/Pal apa retrieval mission (STS 51-A). PLGRAB, in conjunction with a 
full-scale physical model (in both the geometrical and the inertial sense) of 
the Westar/Pal apa satellites, was used to verify the feasibilty of a backup 
procedure that involved one of the EVA crewmen capturing the payloads man- 
ually while mounted on the Remote Manipulator System (RMS) by means of the 
Manipulator Foot Restraint (MFR). As it turned out, although manual capture 
did not become necessary, passive manhandling uas required during STS 51-A 
when a specially-built RMS fixture failed to fit the satellites. 

The Westar and Palapa satellites had comparatively small masses and moments 
of inertia, and the magnitudes of the forces and torques needed to capture 
and maneuver them were so small that RMS flexure and motion of the Orbiter 
due to reaction were considered to be negligible. Therefore only 6 degrees 
of freedom were accounted for in PLGRAB (just one more than the physical 
model, which uas afforded 5 degrees of freedom by a gimbal suspension system 
on an air-bearing platform). By way of contrast, the Syncom repair mission 
(STS 51-1) not only involved manhandling as the primary mode for capturing 
and redeploying the payload, but the forces and torques that would have to be 
applied to the much heavier satellite were expected to be greater by an order 


x 


of magnitude. Accordingly, the PLGRAB software was modified to provide addi- 
tional modes of simulated manual control and to account for 8 more degrees of 
freedom: 6 for the Orbiter, plus 3 degrees of translational freedom for the 
EVA crewman due to RMS flexure. The RMS flexure model was a very simple ono 
that utilized 3x3 matrices to represent the spring and damping forces in the 
RMS, and the effective inertia of the RMS/crewman system. These matrices 
were derived empirically from data (Reference 4) produced by the MPAD Payload 
Deployment and Retrieval System Simulator (PORSS). Some of the data produced 
by the reconfigured simulator, designated MANHANDLE after its modification, 
are summarized in Reference 5. 

Both PLGRAB and the original version of MANHANDLE were implemented hurriedly 
to meet flight schedules, making use of pre-existing code from the MPAD/TRW 
Man-in-the-Loop MMU (MILMU) simulator. As a result, the software left much 
to be desired in terms of orderliness and understandabil ity , and much of it 
was specifically suited only to HP- 900® Series 200 computers using the Pascal 
2.0 or 3.0 operating system. The code in this document has been extensively 
revised and rearranged to generalize it and make it easier to understand and 
maintain, but in functional terms it remains essentially the same program 
that was used to support the planning for STS 51-1, By its very nature, the 
manhandling of any particular payload is highly dependent on its specific 
configuration and its anticipated or required state of motion. Therefore it 
is very likely that future utilization of the MANHANDLE simulator will 
require some modification of the current software, particularly with regard 
to the control laws defined in the Flight control module (Section 1.7). With 
this in mind, an effort has been made to make the current specifications, so 
far as it is possible and practicable at the present time, readily adaptable 
to future Orbiter and Space Station operations. 



TABLE OF CONTENTS 


Page 

FOREWORD i 

REFERENCES v 


HOST 

COMPUTER PROGRAM SPECIFICATIONS 


i-i 

1.1. 

HP-9000 PASCCAL Driver Proaram 


1 . 1-i 


1-1.1- Model 216 / Pascal 3.0 Driver 


1 .1. 1-i 


1.1.2. Series 500 / HP-UX 5.0 Driver 


1 . 1.2-1 

1 . 2 . 

Index of Global Identifiers 


1.2-1 

1.3. 

Symboloav for Variables and Constants 


1 . 3-i 

1 .4. 

Miscellanv 


1 .4-1 

1.5. 

PASCAL Interface with HP-9000 Operatina 

Svstem 

1 .5-i 


1.5.1. Model 2 IB / Pascal 3.0 Interface 

Module 

1 .5. 1-i 


1.5.2. Series 500 / HP-UX 5.0 Interface 

Module 

1 .5.2-i 

1 .6. 

Bodv (Ob.lect) Data 


1 . 6-i 

1 .7. 

Fliaht Control 


1 .7-1 

1.8. 

Data Dump Routines 


1.8-1 

1.9. 

Simulation Loa 


1 .9-i 

1 . to. 

IMI Simulated Cameras 


1 . 10-i 

1.11. 

Simulation Runtime Displays 


1.11-1 

1 . 12 . 

Simulation Control 


1 .12-1 

1.13. 

Printed Output Data 


1 . 1 3-i 

t . 14. 

Initialization of System State 


1 . 14-i 

1 .15. 

Input Data Editina Routines 


1.15-1 

1 .16. 

Postprocessina of Simulation Loo Data 


1.16-1 



TABLE OF CONTENTS 
( continued) 


Page 

Z. TEST CASE RESULTS FROM HP-3000 MODEL 540 HOST COMPUTER 2-i 

2.1. Palapa Capture 2.1-i 

Printed Data Z . 1 - 1 

Control Force & Torque Plot 2.1-18 

2.2. Syncom 10tt/24 u Despin S troke Displaced Aft 6 M 2 . 2 - i 

Printed Data 2.2-1 

RMS Flexure Plot 2.2-12 

2 . 3 . Syncom Attitude Correction Maneuver ( Rol 1/Yau/Pitch ) 2 . 3- i 

Printed Data 2.3-1 

Control Force & Torque Plot 2.3-5 

2-4, Syncom Spinup Stroke Uithout Late r al Corrective Force 2.4-i 

Printed Data 2.4-1 

RMS Flexure Plot 2.4-12 

Control Force & Torque Plot 2.4-13 

2 - 5 . Syncom Spinup S troke Uith Lateral Corrective Force 2 . 5- i 

Printed Data 2.5-1 

RMS Flexure Plot 2.5-8 

Control Force & Torque Plot 2.5-9 

2.6. Syncom Coast After Anomalo u s Spinup Stroke 2.6-i 

Printed Data Z.6-1 

Payload Spinaxis Attitude Trajectory Plot 2.6-6 

2-7. EVZ / Rigid PFR Hold After Pitch Impulse From PRCS Jets 2.7-i 

Printed Data 2.7-1 

Control Force & Torque Plot 2.7-11 


REFERENCES 


1. S. W. Wilson, "Orbital Flight Simulation Utility Software Unit Speci- 
fications (Revision 1)," TRUI Report No. 47467- H005- UX-01 , 30 September 
1986. 

Z. Hewlett-Packard Company, "HP Pascal Language Reference for the HP 9000 
Series Z00 Computers," Manual Part No. 98615-90050, February 1984. 

3. Hewlett-Packard Company, "Pascal/9000 Language Reference Manual for the 
HP 9000 Series 500 Computers," Manual Part No. 9708Z-90001 , May 1985. 

4. E. J. Wolfer and R. T. Theobald, "SYNCOM Repair Mission (STS 51-1)," 
MDTSCO Transmittal Memo No. 1 . Z-TM-DF85055, Z4 June 1985. 

5. S. U. Wilson, "SYNCOM F3 Dynamics," TRW Letter No. 85:W48Z. 1- 105, 

15 August 1985. 






I. HOST COMPUTER PROGRAM SPECIFICATIONS 



1 — i 



H P-0000 PASCAL Driver Program 


1 


1 - x 




1.1.1. Model 21G / Pascal 3.0 Driver 



1 - 1 -lx 



File * MANHMAIN. TEXT* Page 1 Updated @ 09:04:53 Fri 03 Oct 1986 

< begin File ’MANHMAIN. TEXT’ > 

< Payload Manhandling Simulator for HP-9000 Model Z16 uith Pascal 3.0 Op Sys > 


$ search ’UTILUNIT’ $ 


$ Sysprog On $ 
$ Switch_strpos $ 
$ Heap_dispose On $ 
$ Ref 50 $ 


program MANHANDLE ( input, output ) ? 

{ Subject : Simulation of Zero-G Payload Manhandling > 

< NASA/ JSC/ MP AD/ TRW : Sam Wilson > 


{ 

Using the Runge-Kutta 2nd order numerical method, MANHANDLE integrates the 
differential equations of motion for a system of three bodies (each modeled 

as if it were perfectly rigid in itself) consisting of the STS Orbiter, a 

Payload, and an EVA Crewman attached to the Orbiter via the RMS/MFR or some 
other flexible linkage having 15 degrees of freedom (three degrees in 
translation and three degrees in rotation for all except the Crewman, who is 
assumed to have three degrees of translational freedom only, which arises 
from flexure of his linkage with the Orbiter). Aside from damping and spring 
forces arising in the flexible linkage, the only forces and torques accounted 
for are those applied by the Crewman at and about a fixed point (handle) on 
the Payload. 

The numerical integration process may run slower or faster than real time, 
depending on the stepsize specified by the user, which must be consistent 
uith the natural frequencies of the system if accurate results are to be 
obtained. In the COMPLETE, repeat COMPLETE, absence of spring and damping 
forces in the flexible linkage between the Crewman and the Orbiter, good 
results may be obtained with a stepsize as great as 1/30 of the Payload’s 
period of rotation. In the presence of flexure forces, the integration 
process usually will diverge if the stepsize is much greater than one tenth 
of the natural period of the flexible linkage, which is typically about two 
seconds in the case of the RMS/MFR system (but this may vary with the RMS 
configuration, i.e., the joint angles). 

During numerical integration, the state of the system is logged for future 
use at the midpoint and the end of each integration step. When numerical 
integration is terminated by the user, a postprocessor gives an option to 
"play back" the simulation at any desired sim/real time ratio. Other 
postprocessing options include the generation of hardcopy (ink) plots of the 
histories of RMS flexure and control force/torque applied to the Payload by 
the Crewman, and an attitude trajectory for the Payload spinaxis. 

> 


¥A4F21 ABZ 


1 


1 


1-1 



File * MANHMAIN. TEXT’ Page Z 


Updated @ 09:04:53 Fri 03 Oct 198B 


$ page $ 

Aside from the hardcopy plots mentioned in the preceding paragraph, MANHANDLE 
output includes the following: 

( 1 ) Periodically updated images of the three-body system generated 

by the MPAD IMI graphics system as seen from various "cameras 11 

that may be selected by the user during runtime (i.e., while numer- 
ical integration is in progress, or during a playback). 

(2) A periodically updated digital summary of numerical integration 
or playback progress, displayed on the CRT terminal screen of 
the host computer (i.e., not the IMI screen). 

(3) A text file of digital ouiput stored in a disk file of the host 
computer system, which contains a complete description of the 
simulated three-body system state at user-selected breakpoints 
in the numerical integration process, along with optional dumps 
of abbbreviated listings of data logged between breakpoints. 

At the user’s option, this file may be dumped to a hardcopy 
printer after MANHANDLE execution is terminated. 

(4) CRT images of the data described in item (3), generated on the 
terminal screen of the host computer concurrently with their 
storage on disk. 

Use of the IMI graphics system and the hardcopy plotter is optional; the 
MANHANDLE simulator can be operated in a standalone mode to generate digital 
data (only), if so desired. Generation of hardcopy plots requires the 
accessibility of an HP-9872 plotter at bus address 45 on an HP-IB (IEEE-488) 
data bus having #7 as its select code. Use of the IMI graphics system 
requires its accessibility at address 417 on the same HP-IB bus. IMI usage 
is also dependent on the availability, in the IMI system, of the programs 
’bldmilmu* and Vunmilmu’, which were developed by LINCOM to support the 
MPAD/TRU MILMU simulator. The data files ’orbiter’ and ’man0’ (which 
describe the geometry of the Orbiter and the Crewman) must also be present in 
the IMI system, along with a data file describing the appropriate payload 
geometry. 

} 


¥9C 1 DCFBD 


1 


1 


1 - Z 



File ’ MANHMAIN. TEXT* Page 3 


Updated @ 09:04:53 Fri 03 Oct 1986 


$ page $ 

{ 

The bulk of the MANHANDLE source code is contained in the files referenced by 
the series of "include" directives to the PASCAL compiler that follow this 
section of comments. The first two files in this series contain no code at 
all, but instead consist of certain detailed technical data in the form of 
further comments- The first of these, ’ Manhindx . 1 1 , contains an alpahbetical 
index of all the global identifiers (names of constants, variables, data 
types, functions, and procedures) used in the MANHANDLE program, describing 
the nature of the identified item and the name of the module in which it is 
declared- Local identifiers (those declared in the "implement" section of a 
module) are not included in this list. The second file, ’ Manhsymb. I ’ , 
contains a description of the system of notation used in the assignment of 
names to the constants and variables used in MANHANDLE. A careful reading of 
the contents of this file at the outset will make it much easier to 
understand the PASCAL source code in the remainder of the "include" files. 

One of the source code files, ’ Manhf con. I * , deserves special attention. It 
contains the source code for the MANHFCON module, which defines the control 
laws for the computation of the forces and torques applied by the Crewman to 
the "handle" of the payload, according to the mode of control selected by the 
user. The validity of any conclusions drawn from MANHANDLE simulation 

results about onorbit manhandling feasibility for any particular payload 

depend ultimately on how well the various modes and their associated 

control laws conform to the realities of the anticipated operation- Not the 
least of these realities are the ideas of the particular crewman who is to 
perform the operation, about what can be observed or sensed (e.g., from 
tactile stimuli) about the motion state of the payload, and what constitutes 
a natural and appropriate response on his part to various perceived 
conditions. The modes and control laws currently contained in the MANHFCON 
module were developed in support of the Uestar/Palapa retrieval and the 
Syncom repair missions, on the basis of preflight consultations with the 
individual astronauts who were involved. Their postflight comments were 
favorable with regard to the validity and usefulness of the MANHANDLE 
simulation results in predicting the controllability of those payloads, but 
that does not mean necessarily that the existing logic in the MANHFCON module 
should be applied, unmodified, to future manhandling operations. 

> 


$ 

include 

’ Manhindx . I . 1 

$ 

$ 

include 

* Manhsymb. I . * 

$ 

$ 

include 

* Manhmisc. I . f 

$ 

$ 

include 

1 MANHSPIF . I - * 

$ 

$ 

include 

1 Manhbods. I . * 

$ 

$ 

include 

’Manhf con. I . ’ 

$ 

$ 

include 

’ Manhdump. I . ’ 

$ 

$ 

include 

’Manhslog. I . ’ 

$ 

$ 

include 

’ Manhkams. I . * 

$ 

$ 

include 

’Manhdisp. I . ’ 

$ 

$ 

include 

’ Manhscon. I . ’ 

$ 

$ 

include 

’ Manhprnt . I . * 

$ 

$ 

include 

’Manhinit . I . * 

$ 

$ 

include 

’ Manhedit . I . 1 

$ 

$ 

include 

’ Manhpost . I . ’ 

$ 


¥20213401 


1 


1 


1 - 3 



File ’MANHMAIN.TEXT’ 


Page 4 


Updated @ 09:04:53 Fri 03 Oct 1986 


$ page $ 
import 

Sysglobals , i Pascal 3.0 system module > 

Iodeclarations , { Pascal 3.0 system module > 

UTILMATH 

UTILSPIF 

MANHMISC 

MANHSPIF 

MANHDUMP 

MANHSL06 

MANHKAMS 

MANHDISP 

MANHSCON 

MANHPRNT 

MANHINIT 

MANHEDIT 

MANHPOST ; 

var 

POSTPROC : boolean ; 

begin < program MANHANDLE > 

INITIALIZE_IO 


Unitable* [ 31 ] 

- Unitable*I6] 



5 

Uni table'' [ 31 ] . Uvid 

= ’ HP987ZA’ 

i hardcopy plotter 

} 

5 

Unitable'' 1311. Devid 

= 1Z0000 

i <millisec) timeout 

> 

5 

Unitable* [ 31 1 .Sc 

= 7 

i HPIB select code 

i 

; 

Unitable*[ 31 1 . Ba 

= 5 

{ HPIB bus address 

y 

5 

try 


i set outer trap for error 

y 


rewrite ( LP , ' 

’ MANHPRNT. R’ ) 



S 

USING_PLOTTER := 

= USER_DECIDES_TO< 

’Use HP-9872 plotter ’ ) 


5 


if USING_PLOTTER then rewrite < PLT, 'HP987ZA: ’ ) 5 

USING_IMI := USER_DECIDES_TO( ’Use IMI graphics system’ ) ; 

if USING_IMI then 
begin 

SET_UP_HPIB_INTERFACE_T0_II1I , 

PLIDENT := RJUORD_INPUT< ’Name of IMI geometry file for Payload’, 

’ sncm’ ,8,8) j 

end 5 

neu( SLOG ) 5 

DIGSHOUTINC := ONE , 

SIMPERREAL := ONE , 

STROKE : ■ 1 5 

PLREV := 0 , 

REMOFFSET :=■ 300 , 

REMHORFOV := 9 , 

current_kamera := AHEAD 5 

DESIRED_KAMERA :=* current_kamera ; 

OLDNAME := ” 5 

NEUNAME := ” : 


¥ECF34Z93 


1 - 1 . 1 



File ’MANHMAIN.TEXT’ Page 5 
$ page $ 


Updaied @ 09:04:53 Fri 03 Oct 1986 


DESTINC := 30.0L0 , 

NOMSTEP : * 0. 1 L0 , 

repeat 

E DI T_I NP 1) T_DAT A_F I L E S . 

INITIAL I ZE_SYSTEM_STATE , 

repeat 

DESTINC := FIXED_INPUT( ’Sin tine increnent (sec)’, 

DESTINC ,9 , 3 ) ; 

if DESTINC > ZERO then 
begin 
repeat 

NOMSTEP := FIXED_INPl)T( 'Integration stepsize (sec)', 

NOMSTEP ,9,3) ; 

if NOMSTEP <- ZERO then SOUND_ALARM ; 

until NOMSTEP > ZERO j 

try { set inner trap for error > 

PROPAGATE_SYSTEM_STATE j 

DOCUMENT_THE_STATE_QF_THE_SYSTEM ; 

if ( curslogrec+Z ) > MAXSLOGRECS then 
begin 

SOUND_ALARM , 

SHOULN ( ’♦** Sinulation log saturated' ) ; 

uriteln < LP, ’*#* Sinulation log saturated' ) ; 

DESTINC :» ZERO , 

end 5 


recover { cone here only if inner trap is sprung } 
begin 

DESTINC := ZERO , 

curslogrec := curslogrec - 1 j 

URI TE_ERROR_MESSAGE , 

if USER_DECIDES_TO( 'Dunp debug data’ ) then 
begin 

DUMP_EVERYTHING ; 

SHOWLN ( ’Debug data dunped to print file’ ) ; 

end ; 

end ; 


end 5 

until DESTINC <= ZERO : 

uriteln ( LP, ’*** END OF SIMULATION *»*’ > , 

uriteln ( LP, SLOGM0] . SIMDESCRIP ) , 

uriteln ( LP, SLOG' , [ 0 ] .PRQGSESSID ) , 

START_NEW_PAGE , 

if curslogrec > 1 then 
begin 

POSTPROC := USER_DECIDES_TQ( ’Execute postprocessor’ ) ; 

if not POSTPROC then < nake sure it is not just a nistake 1 
POSTPROC := USER_DECIDES_NOT_TO< ’Abandon logged data’ ) 5 

if POSTPROC then 
repeat 

EXECUTE_PQSTPROCESSQR ; 

until USER_DECIDES_NOT_TO( ’Re-run postprocessor’ ) ; 

end ; 

until USER_DECIDES_NOT_TO( ’Restart sinulation’ ) ; 


Y770FGGEF 


1 - 1 . 1 - 5 



File ’MfiNHMAIN.TEXT’ Page B 
$ page $ 


Updated @ 09:04:53 Fri 03 Oct 1986 


recover { cone here only if outer trap is sprung } 
URITE_ERROR_MESSAGE . 

close ( LP. ’SAVE' ) . 
SHOULN ( ’Printer output has been saved in text file ” MANHPRNT. R’ ” ) ; 
CLEANJJP_IO , 
end . { program MANHANDLE & File ' MANHMAIN. TEXT’ } 


¥D8BC0F3C 


i . i . i -e 




I.I.Z. Series 500 / HP-UX 5.0 Driver 



1-1 


Z - i 



File 1 manhmain. p’ Page 1 Updated @ 08:42:26 Tue 04 Nov 1986 

i begin File ’ manhmain. p’ > 

i Payload Manhandling Simulator for HP-9000 Series 500 uith HP-UX 5.0 Op Sys > 

$ search ’utilunit.o’ $ 

$ standard^ evel ’hp_modcal' $ 

program MANHANDLE ( input, output ) ; 

{ Subject : Simulation of Zero-G Payload Manhandling > 

i NASA/ JSC/MPAD/TRW : Sam Wilson > 


Using the Runge-Kutta 2nd order numerical method, MANHANDLE integrates the 
differential equations of motion for a system of three bodies (each modeled 

as if it were perfectly rigid in itself) consisting of the STS Orbiter, a 

Payload, and an EVA Crewman attached to the Orbiter via the RMS/MFR or some 

other flexible linkage having 15 degrees of freedom (three degrees in 

translation and three degrees in rotation for all except the Crewman, who is 
assumed to have three degrees of translational freedom only, which arises 
from flexure of his linkage with the Orbiter). Aside from damping and spring 
forces arising in the flexible linkage, the only forces and torques accounted 
for are those applied by the Crewman at and about a fixed point (handle) on 
the Payload. 

The numerical integration process may run slower or faster than real time, 
depending on the stepsize specified by the user, which must be consistent 
with the natural frequencies of the system if accurate results are to be 
obtained. In the COMPLETE, repeat COMPLETE, absence of spring and damping 
forces in the flexible linkage between the Crewman and the Orbiter, good 
results may be obtained with a stepsize as great as 1/30 of the Payload’s 
period of rotation. In the presence of flexure forces, the integration 
process usually will diverge if the stepsize is much greater than one tenth 
of the natural period of the flexible linkage, which is typically about two 
seconds in the case of the RMS/MFR system (but this may vary uith the RMS 
conf igurat ion, i.e. , the joint angles). 

During numerical integration, the state of the system is logged for future 
use at the midpoint and the end of each integration step. When numerical 
integration is terminated by the user, a postprocessor gives an option to 
"play back" the simulation at any desired sim/real time ratio. Other 
postprocessing options include the generation of hardcopy (ink) plots of the 
histories of RMS flexure and control force/torque applied to the Payload by 
the Crewman, and an attitude trajectory for the Payload spinaxis. 

> 


¥37A3F3C3 


1 


1 


Z - 1 



File ’ manhmain.p’ Page 2 


Updated @ 08:42:26 Tue 04 Nov 1986 


$ page $ 

{ 

Aside from the hardcopy plots Mentioned in the preceding paragraph, MANHANDLE 
output includes the following: 

(1) Periodically updated images of the three-body system generated 

by the MPAD IMI graphics system as seen from various "cameras" 

that may be selected by the user during runtime (i.e., while numer- 
ical integration is in progress, or during a playback). 

(2) A periodically updated digital summary of numerical integration 
or playback progress, displayed on the CRT terminal screen of 
the host computer (i.e., not the IMI screen). 

(3) A text file of digital output stored in a disk file of the host 
computer system, which contains a complete description of the 
simulated three-body system state at user-selected breakpoints 
in the numerical integration process, along with optional dumps 
of abbbreviated listings of data logged between breakpoints. 

At the user’s option, this file may be dumped to a hardcopy 
printer after MANHANDLE execution is terminated. 

(4) CRT images of the data described in item (3), generated on the 
terminal screen of the host computer concurrently with their 
storage on disk. 

Use of the IMI graphics system and the hardcopy plotter is optional; the 
MANHANDLE simulator can be operated in a standalone mode to generate digital 
data (only), if so desired. Generation of hardcopy plots requires the 
accessibility of an HP-9872 plotter via the pathname 1 /dev/pl t9872 1 . Use of 
the IMI graphics system requires its accessibility on an HP-IB (IEEE-488) 
data bus via the pathname 1 /dev/imi_hpib’ . IMI usage is also dependent on 
the availability, in the IMI system, of the programs ’bldmilmu* and 
’runmilmu* , which were developed by LINCOM to support the MPAD/TRU MILMU 
simulator. The data files ’orbiter’ and ’man© 1 (which describe the geometry 
of the Orbiter and the Crewman) must also be present in the IMI system, along 
with a data file describing the appropriate payload geometry. 

> 


¥E39B9 0FB 


1 


1 


Z ~ Z 



File ’manhmain.p’ Page 3 


Updated @ 08:4Z:ZG Tue 04 Nov 198G 


$ page $ 

{ 

The bulk of the MANHANDLE source code is contained in the files referenced by 
the series of “include" directives to the PASCAL compiler that follow this 
section of comments. The first two files in this series contain no code at 
all, but instead consist of certain detailed technical data in the form of 
further comments. The first of these, ’ Manhindx . I ’ , contains an alpahbetical 
index of all the global identifiers (names of constants, variables, data 
types, functions, and procedures) used in the MANHANDLE program, describing 
the nature of the identified item and the name of the module in which it is 
declared. Local identifiers (those declared in the "implement" section of a 
module) are not included in this list. The second file, ’ Manhsymb. I * , 
contains a description of the system of notation used in the assignment of 
names to the constants and variables used in MANHANDLE. A careful reading of 
the contents of this file at the outset will make it much easier to 
understand the PASCAL source code in the remainder of the "include" files. 

One of the source code files, ’ Manhf con. I ’ , deserves special attention. It 
contains the source code for the MANHFCON module, which defines the control 
laws for the computation of the forces and torques applied by the Crewman to 
the "handle" of the payload, according to the mode of control selected by the 
user. The validity of any conclusions drawn from MANHANDLE simulation 

results about onorbit manhandling feasibility for any particular payload 

depend ultimately on how well the various modes and their associated 

control laws conform to the realities of the anticipated operation. Not the 
least of these realities are the ideas of the particular crewman who is to 
perform the operation, about what can be observed or sensed (e.g., from 
tactile stimuli) about the motion state of the payload, and what constitutes 
a natural and appropriate response on his part to various perceived 
conditions. The modes and control laws currently contained in the MANHFCON 
module were developed in support of the Uestar/Palapa retrieval and the 
Syncom repair missions, on the basis of preflight consultations with the 
individual astronauts who were involved. Their postflight comments were 
favorable with regard to the validity and usefulness of the MANHANDLE 
simulation results in predicting the controllability of those payloads, but 
that does not mean necessarily that the existing logic in the MANHFCON module 
should be applied,, unmodif ied, to future manhandling operations. 

> 


$ 

include 

’Manhindx. I’ 

$ 

$ 

include 

’ Manhsymb. I ’ 

$ 

$ 

include 

’Manhmisc. I ’ 

$ 

$ 

include 

'manhspif . I ’ 

$ 

$ 

include 

’Manhbods. I ’ 

$ 

$ 

include 

’Manhf con. I* 

$ 

$ 

include 

’Manhdump. I ’ 

$ 

$ 

include 

’ Manhslog. I ’ 

$ 

$ 

include 

’Manhkams. I ’ 

$ 

$ 

include 

’Manhdisp. I ’ 

$ 

$ 

include 

’Manhscon. I ’ 

$ 

$ 

include 

’ Manhprnt . I 1 

$ 

$ 

include 

’ Manhinit . I ’ 

$ 

$ 

include 

’ Manhedit . I * 

$ 

$ 

incl ude 

1 Manhpost . I ’ 

$ 


¥BED354B3 


1 . 1 . Z - 3 



File ’manhmain.p’ Page 4 
$ page $ 


Updated @ 08:42:26 Tue 04 Nov 1986 


import 

UTILMATH , 
UTILSPIF , 
MANHMISC , 
MANHSPIF , 
MANHDUMP , 
MANHSLQG , 
MANHKAMS , 
MANHDISP , 
MANHSCON , 
MANHPRNT , 
MANHINIT , 
MANHEDIT , 
MANHPOST ? 


var 

POSTPROC : boolean 5 


begin i program MANHANDLE } 

INITIALIZE_IO 

try { set outer trap for error > 

rewrite < LP , ’manhprnt.R’ > 

USING_PLOTTER := USER_DECIDES_TO( ’Use HP-9872 plotter ’ ) 
if USING_PLOTTER then rewrite ( PLT, ’ /dev/plt9872 ’ ) 

USING_IMI := USER_DECIDES_TO( ’Use IMI graphics system’ ) 
if USING_IMI then 
begin 

SE T_UP_HP IB_INTERFACE_TO_IMI 

PLIDENT := RJUORD_INPUT( ’Name of IMI geometry file for Payload’, 

’sncm’ ,8,8) 

end ; 

new( SLOG ) 

DIGSHOUTINC := ONE 

SIMPERREAL := ONE 

STROKE := 1 

PLREV := 0 

REMOFFSET := 300 

REMHORFOV := 9 

current_kamera := AHEAD 

DESIRED_KAMERA := current_kamera 

OLDNAME := ” 

NEWNAME := ” 


¥50DD9B7D 


1.1. Z 



File ’manhmain.p’ Page 5 
$ page $ 


Updated @ 08:4Z:Z6 Tue 04 Nov 198B 


DESTINC := 30.0L0 
NOMSTEP 0.1 L0 
repeat 

EDIT_INPUT_DATA_FILE5 
I NI TI ALI ZE_SYSTEM_STATE 
repeat 

DESTINC := FIXED_INPUT( ’Sin tine increnent (sec)’, 

DESTINC, 9, 3 ) 

if DESTINC > ZERO then 
begin 
repeat 

NOMSTEP := FIXED_INPUT< ’Integration stepsize (sec)’, 

NOMSTEP, 9, 3 ) 

if NOMSTEP <= ZERO then SQUND_ALARM 
until NOMSTEP > ZERO ; 

try { set inner trap for error > 

PROPAGATE_SYSTEM_STATE 
DOCUMENT_THE_STATE_OF_THE_SYSTEM 
if (curslogrec+Z) > MAXSLOGRECS then 
begin 

SOUND_ALARM 

SHOUILN ( ’*** Sinulation log saturated’ ) 

uriteln ( LP, ’»** Sinulation log saturated' ) 
DESTINC := ZERO 
end ; 

recover { cone here only if inner trap is sprung > 
begin 

DESTINC := ZERO 

curslogrec := curslogrec - 1 

URITE_ERROR_MESSAGE 

if USER_DECIDES_TO( ’Dunp debug data’ ) then 
begin 

DUMPJEVERYTHING 

SHOWLN ( ’Debug data dumped to print file' ) 
end ; 

end ; 


end ; 

until DESTINC <= ZERO ; 

uriteln ( LP, ’*** END OF SIMULATION ***’ ) ; 

uriteln ( LP, SLOG" [ 0) . SIMDESCRIP ) 5 

uriteln < LP, SLOG" [01 .PROGSESSID ) 5 

START_NEU_PAGE ; 

if curslogrec > 1 then 
begin 

POSTPROC :■ U5ER_DECIDES_T0( ’Execute postprocessor’ ) 5 

if not POSTPROC then < nake sure it is not just a mistake > 
POSTPROC := USER_DECIDES_NQT_TO( ’Abandon logged data’ ) ; 

if POSTPROC then 
repeat 

EXECUTE_POSTPROCESSOR ; 

until USER_DECIDES_NQT_TO( ’Re-run postprocessor’ ) ; 

end ; 

until USER_DECIDES_NOT_TO( 'Restart simulation’ ) ; 


Y770FG6EF 


1 _ 1 _ 2 - S 



File ’manhmain.p’ Page B 
$ page $ 


Updated @ 08:42:26 Tue 04 Nov 1986 


recover { come here only if outer trap is sprung } 

URITE_ERROR_MESSAGE 

close ( LP, * SAVE’ ) 

SHOWLN ( ’Printer output has been saved in text file ' ’manhprnt . R” ’ ) 
CLEAN_UP_IQ 

end . { program MANHANDLE & File ’manhmain.p’ } 


¥C09D033D 


1 


1 


Z — E» 




1 . z — ± 



File ' Manhindx . I ’ Page 1 Updated @ 08:4Z:5Z Tue 04 Nov 1986 

$ page $ { begin File ’Manhindx. I’ > 

i Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers } 

< Comment File > f Subject : Index of Global Identifiers > 

{ NASA/ JSC/MPAD/TRW : Sam Wilson > 


I dent if ier 


ADD_STRING_TO_IMI_BUFFER 

AERR 

AERRMAX 

AERRMIN 

AERRTOL 

AHEAD 

ALIGN 

ANGDEG 

AN6M0_P_I 

ARR 

ARR 

ARR 

ATANZ 

AVEL 

AVELTOL 

BEHIND 

C 

CAPTURE 

CFORCJPH_PB 

CFORC_H_B 

CHAR_INPUT 

CHECHOMODE 

CHINPUTREC 

CHWAITMODE 

CLEAN_UP_IO 

CLEAR_SCREEN 

CLOCKTICK 

CNTRLCON 

CNTRLMODE 

CNTRLPAC 

CNTRLPACARR 

COMPUTE_FLIGHT_CONTROL_FORCE_AND_TORQUE 

crewman 

CRSP 

CTORQ_PH_PB 

CTORQ_H_B 

curmode 

current_k amera 
current_mode 
curslogrec 
CURTINC 


Declaration 

Category 

Parent 

Identifier 

Source 

Module 

procedure 


MANHSPIF 

var 


MANHFCON 

rec field : 

CNTRLCON 

MANHFCON 

rec field : 

CNTRLCON 

MANHFCON 

rec field : 

CNTRLCON 

MANHFCON 

type enum : 

KAMERA 

MANHKAMS 

type enum : 

CNTRLMODE 

MANHFCON 

function 


UTILMATH 

rec field : 

SLOGREC 

MANHSLOG 

rec field : 

DERIVREC 

MANHBODS 

rec field : 

STATEREC 

MANHBODS 

rec field : 

IDATREC 

MANHINIT 

function 


UTILMATH 

var 


MANHFCON 

rec f ield : 

CNTRLCON 

MANHFCON 

type enum : 

KAMERA 

MANHKAMS 

rec field : 

CHINPUTREC 

UTILSPI F 

type enum : 

CNTRLMODE 

MANHFCON 

rec field : 

SLOGREC 

MANHSLOG 

rec field : 

INFOREC 

MANHBODS 

function 


UTILSPIF 

type 


UTILSPIF 

type 


UTILSPIF 

type 


UTILSPIF 

procedure 


UTILSPIF 

procedure 


UTILSPIF 

function 


UTILSPIF 

var 


MANHFCON 

type 


MANHFCON 

const 


MANHFCON 

type 


MANHFCON 

procedure 


MANHFCON 

type enum : 

OBJECT 

MANHBODS 

function 


UTILVEMQ 

rec field : 

SLOGREC 

MANHSLOG 

rec field : 

INFOREC 

MANHBODS 

rec f ield : 

SLOGREC 

MANHSLOG 

var 


MANHKAMS 

var 


MANHFCON 

var 


MANHSLOG 

var 


MANHSCON1 


¥6Z59B979 


1 . Z - 1 



File ’ Manhindx . I ' Page Z 


Updated @ 08:42:52 Tue 04 Nov 1986 


$ page $ 


Declaration Parent Source 

Identifier Category Identifier Module 


DATESTRING 

DEGPERRAD 

DERIV 

DERI VREC 

DESIRED_KAMERA 

desired_node 

desnode 

DESPIN 

DESTINC 

DIAG3X3 

DOCUMENT_THE_STATE_OF_THE_SYSTEM 

DOTP 

DSPFORC 

DUMP_DERI V_RECQRDS 

DUMP_EVERYTHI N6 

DUMP_I NF 0_RE CORDS 

DUMP_STATE_RECORDS 

DUMPEUL 

DUMP I NT 

DUMPMAT 

DUMPQUAT 

DUMP REAL 

DUMPVEC 

EDIT_INPUT_DATA_FILES 

EULARR 

EULDEG 

EULPYR 

EULRAD 

FETCHLN 

FILESI2E 

FILL 1 2 

FIXED_I NPUT 

FLEX_RO_R 

FLEXFORCMAG 

F0RC_CM_I 

FORC_CRO_R 

FORCLIM 

FREE 

FTPERIN 

GOTUHAT 

HOLD 

HORFOV 


function 

UTILSPIF 

const 

UTILMATH 

va r 

MANHBODS 

type 

MANHBODS 

var 

MANHKAMS 

var 

MANHFCON 

rec field : SLOGREC 

MANHSLOG 

type enum : CNTRLMODE 

MANHFCON 

var 

MANHSCON 

type 

UTILVEMQ 

procedure 

MANHPRNT 

function 

UTILVEMQ 

rec field : CNTRLCON 

MANHFCON 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHDUMP 

procedure 

MANHEDIT 

type 

UTILVEMQ 

function 

UTILVEMQ 

type 

UTILVEMQ 

function 

UTILVEMQ 

procedure 

: UTILSPIF 

const 

MANHINIT 

const 

MANHMISC 

function 

UTILSPIF 

rec field : SLOGREC 

MANHSLOG 

rec field : SLOGREC 

MANHSLOG 

rec field : INFOREC 

MANHBODS 

var 

MANHBODS 

rec field s CNTRLCON 

MANHFCON 

type enun : CNTRLMODE 

MANHFCON 

const 

MANHMISC 

type : 

UTILSPIF 

type enum : CNTRLMODE : 

MANHFCON 

rec field : KftMARR : 

MANHKAMS} 


¥03BBC4DB 


t - 2- Z 



File ’ Manhindx . 1 1 Page 3 


Updated @ 08:42:52 Tue 04 Nov 1986 


$ page $ 
{ 


Declaration 


Parent 


Source 


Identifier 

Category 

Identifier 

Module 

IDATREC 

type 


MANHINIT 

IDN3X3 

const 


UTILVEMQ 

IMATQ 

function 


UTILVEMQ 

IMIN 

f unct ion 


UTILMATH 

INFO 

var 


MANHBODS 

INFOREC 

type 


MANHBODS 

INITIALIZE_IMI 

procedure 


MANHDISP 

INITIALIZE_IO 

procedure 


UTILSPIF 

INITIALIZE_SY5TEM_STATE 

procedure 


MANHINIT 

INTEGER_INPUT 

function 


UTILSPIF 

IP0S_CM_I 

rec field 

STATEREC 

MANHBODS 

IP0S_0CM_I 

rec field 

SLOGREC 

MANHSLOG 

IPOS_PCM_I 

rec field 

SLOGREC 

MANHSLOG 

IPOS_RO_I 

rec field 

SLOGREC 

MANHSLOG 

IPOSDOT_CM_I 

rec field 

DERIVREC 

MANHBODS 

IRATE_I_B 

rec f ield 

STATEREC 

MANHBODS 

IRATEDOT_I_B 

rec field 

DERIVREC 

MANHBODS 

I ROT 

function 


UTILVEMQ 

IVEL_CM_I 

rec field 

STATEREC 

MANHBODS 

I VELDOT_CM_I 

rec field 

DERIVREC 

MANHBODS 

KAMARR 

type 


MANHKAMS 

KAMERA 

type 


MANHKAMS 

KAMINFO 

var 


MANHKAMS 

LEFT 

type enun : 

: KAMERA 

MANHKAMS 

LERR 

var 


MANHFCON 

LERRLIM 

rec field : 

: CNTRLCON 

MANHFCON 

LERRTOL 

rec field : 

: CNTRLCON 

MANHFCON 

LINESTR 

type 


UTILSPIF 

LOC_H_PB 

var 


MANHBODS 

loc_ko_i 

rec field 

KAMARR 

MANHKAMS 

LOC_KO_OB 

rec field 

KAMARR 

MANHKAMS 

LOC_N_OB 

rec field 

SLOGREC 

MANHSLOG 

LOC_OCM_OS 

rec field 

SLOGREC 

MANHSLOG 

L0C_PCM_PS 

rec field 

SLOGREC 

MANHSLOG 

LOITER 

procedure 


UTILSPIF 

LP 

var 


UTILSPIF 

LVEL 

var 


MANHFCON 

LVELTOL 

rec f ield : 

CNTRLCON 

MANHFCON 

MASS 

rec field : 

INFOREC 

MANHBODS 

MAT3X3 

type 


UTILVEMQ 

MAXSLOGRECS 

const 


MANHSLOG 

MINV 

function 


UTILVEMQ 

MOVE_UP 

procedure 


UTILSPIF 

MXM 

f unct ion 


UTILVEMQ! 


¥643E03FE 


1 . 2-3 



File ’ Manhindx.I’ Page 4 


Updated @ 08:42:52 Tue 04 Nov 1986 


$ page $ 
Identifier 

Declaration Parent 

Category Identifier 

Source 

Module 

NAMEPAC 

type 

UTILSPIF 

NAMESTR 

type 

UTILSPIF 

NEWNAME 

var 

MANHEDIT 

NOCHECHO 

type enun : CHECHOMODE 

UTILSPIF 

NOCHUAIT 

type enun : CHWflITMODE 

UTILSPIF 

NOMAVEL 

rec field : CNTRLCON 

MANHFCON 

NOMLVEL 

rec field : CNTRLCON 

MANHFCON 

NOMSTEP 

var 

MANHSCON 

NOTHING 

type enun : 60TUHAT 

UTILSPIF 

NUMOBJECTS 

const 

MANHBODS 

NUMSLOGRECS 

rec field : SLOGREC 

MANHSLOG 

OBJECT 

type 

MANHBODS 

OBPOS_H_OB 

var 

MANHBODS 

OBPOS_N_R 

var 

MANHBODS 

OBPOS_RO_R 

rec field : STATEREC 

MANHBODS 

OBPOSDOT_RO_R 

rec field : DERIVREC 

MANHBODS 

0BVEL_H_0B 

var 

MANHBODS 

OBVEL_RO_R 

rec field : STATEREC 

MANHBODS 

OBVELDOT_RO_R 

rec field : DERIVREC 

MANHBODS 

OLDNAME 

var 

MANHEDIT 

OLDSTEP 

var 

MANHSCON 

ONE 

const 

UTILMATH 

orbiter 

type enun : OBJECT 

MANHBODS 

OVER 

type enun : KAMERA 

MANHKAMS 

PAW 

type enun : KAMERA 

MANHKAMS 

payload 

type enun : OBJECT 

MANHBODS 

PERCENT 

const 

MANHMISC 

PITCH 

type enun : CNTRLMODE 

MANHFCON 

PLAY_BACK_VI SUAL_DATA 

procedure 

MANHDISP 

PLIDENT 

var 

MANHDISP 

PLOT_CONTROL_FORCE_AND_TORQUE_HI STORY 

procedure 

MANHPOST 

PLOT_PAYLOAD_SPI NAXI S_ATTITUDE_TRAJECTORY 

procedure 

MANHPOST 

PLOT_RMS_FLEXURE HISTORY 

procedure 

MANHPOST 

PLREV 

var 

MANHPOST 

PLT 

var 

MANHPOST 

PROGID 

const 

MANHMISC 

PROGSESSID 

rec field s SLOGREC 

MANHSLOG 

PROMPTSTR 

type 

UTILSPIF 

PROPAGATE_SYSTEM STATE 

procedure 

MANHSCON 

PVID 

rec field : IDATREC 

MANHINIT 

PYR_I_OB 

rec field : SLOGREC 

MANHSLOG 

PYR_I_PB 

rec field : SLOGREC 

MANHSLOG 

PYR_I_R 

rec field : SLOGREC 

MANHSLOG 

PYRQ 

function 

UTILVEMQ} 


¥E1748FF4 


1 - 2L— A- 



File ’ Manhindx . 1 1 Page 5 


Updated @ 08:42:52 Tue 04 Nov 1986 


$ page $ 


Identifier 

Declaration Parent 

Category Identifier 

Source 

Module 

Q 

rec field : CHINPUTREC 

UTILSPIF 

QCXQ 

function 

UTILVEMQ 

QMAT 

function 

UTILVEMQ 

QPYR 

function 

UTILVEMQ 

QUAT_I_B 

rec field : STATEREC 

MANHBODS 

QUAT_I_K 

rec field : KAMARR 

MANHKAMS 

QUAT_OB_K 

rec field : KAMARR 

MANHKAMS 

QUAT_OB_PB 

var 

MANHBODS 

QUAT_OB_PD 

var 

MANHBODS 

QUAT_0B_R 

var 

MANHBODS 

QUflT_R_PB 

var 

MANHBODS 

QUATDOT_I_B 

rec field : DERIVREC 

MANHBODS 

QUATERNION 

type 

UTILVEMQ 

QXQ 

function 

UTILVEMQ 

RADPERDEG 

const 

UTILMATH 

RALAC_CM_B 

rec field : INFOREC 

MANHBODS 

REALARR3 

type 

MANHFCON 

REMHORFOV 

var 

MANHKAMS 

REMOFFSET 

var 

MANHKAMS 

RESET_IMI_BUFFER 

procedure 

MANHSPIF 

RESTORE_CURSOR 

procedure 

UTILSPIF 

RIGHT 

type enun : KflMERA 

MANHKAMS 

RJUORD_I NPUT 

function 

UTILSPIF 

RMIN 

function 

UTILMATH 

RNERT_CM_B 

rec field : INFOREC 

MANHBODS 

RNERT_PCM_PB 

var 

MANHBODS 

RNERT_PH_PB 

var 

MANHBODS 

ROLL 

type enun : CNTRLMODE 

MANHFCON 

ROT 

function 

UTILVEMQ 

RSIGN 

function 

UTILMATH! 


¥C25E699E 


1.2 — 5 



File ’Manhindx.I’ Page 6 


Updated @ 08:4Z:5Z Tue 04 Nov 1986 


$ page $ 

Declaration Parent Source 

Identifier Category Identifier Module 


S 

SAVE_SI MULATI 0N_L0G 
SAW 

SET_UP_HPIB_INTERFACE_TO_IMI 

SET_UP_KAMERA_DATA 

SHOU_PLOTTER_I NI TI AL I Z ATI ON_MESSAGE 

SHOULN 

SIMDESCRIP 

SIMPERREAL 

SIMTIME 

SLOG 

SLOGARR 

SLOGREC 

SOMETHING 

SOUND_ ALARM 

SOUND_ALERT 

SPINUP 

SPUFORC 

START_NEU_PAGE 

STATE 

STATEREC 

STATESIZE 

STDGRAVACC 

STORE_SIMULATION_LOG_RECORD 

STROKE 

STRUCZBODY 

SUPPRESS_CURSOR 

5XV 

TALAC_CRO_R 

TDAMP_CRO_R 

TICKSPERSEC 

TIME 

TIMECON 

TNERT_PH_PB 

TORQ_CM_B 

TORQLIM 

TRANSFER_BUFFER_CONTENTS_TQ_I MI 

TSPRG_CRO_R 

TWO 


rec field s QUATERNION 

UTILVEMQ 

procedure 

MANHSLOG 

type enun : KAMERA 

MANHKAMS 

procedure 

MANHSPIF 

procedure 

MANHKAMS 

procedure 

MANHPOST 

procedure 

UTILSPIF 

rec field : SLOGREC 

MANHSLOG 

var 

MANHDISP 

var 

MANHMISC 

var 

MANHSLOG 

type 

MANHSLOG 

type 

MANHSLOG 

type enun : GQTUHAT 

UTILSPIF 

procedure 

UTILSPIF 

procedure 

UTILSPIF 

type enun : CNTRLMODE 

MANHFCON 

rec field s CNTRLCON 

MANHFCON 

procedure 

UTILSPIF 

var 

MANHBODS 

type 

MANHBODS 

const 

MANHBODS 

const 

MANHMISC 

procedure 

MANHSLOG 

var 

MANHPOST 

const 

MANHMISC 

procedure 

UTILSPIF 

function 

UTILVEMQ 

rec field s INFOREC 

MANHBODS 

rec field : INFOREC 

MANHBODS 

const 

UTILSPIF 

rec field : SLOGREC 

MANHSLOG 

rec field : CNTRLCON 

MANHFCON 

var 

MANHBODS 

rec field : INFOREC 

MANHBODS 

rec field : CNTRLCON 

MANHFCON 

procedure 

MANHSPIF 

rec field : INFOREC 

MANHBODS 

const 

UTILMATH1 


¥8FBDBZCD 


i . z-e 



File ’Manhindx.I’ Page 7 


Updated @ 08:4Z:5Z Tue 04 Nov 1986 


* page $ 
Identif ier 


UNDER 

UNIQUAT 

UPDATE_DI SPLAYS 

UPDATE_IMI_DATA 

USER_DECIDES 

USE R_DE C I DE S_N0T_T 0 

USER_DECIDES_TO 

USING_IMI 

USING_PLOTTER 

V 

VBASE_I_B 

VBASE_OB_PB 

VBASE_OB_R 

VBASE_R_PB 

VECTOR 

VDIF 

VMAG 

VSUM 

VXD 

VXM 

VXMT 

UOBBLE_CLOK_P 
UOBBL E_ C ON E_P 
UORD_I NPUT 
UORDSTR 

WRI TE_E RROR J1E S S AGE 
YAW 

YUNVEC 

ZERO 

ZERVEC 

ZUNVEC 


Declaration Parent 

Source 

Category I dent i f i er 

Module 

: type enum : KAMERA 

MANHKAMS 

: function 

UTILVEMQ 

: procedure 

MANHDISP 

: procedure 

MANHDISP 

: function 

MANHMISC 

: function 

MANHMISC 

: function 

UTILSPIF 

: var 

MANHDISP 

: var 

MANHPOST 

: rec field : QUATERNION 

UTILVEMQ 

: rec field : INFOREC 

MANHBODS 

: var 

MANHBODS 

: var 

MANHBODS 

: var 

MANHBODS 

: type 

UTILVEMQ 

: function 

UTILVEMQ 

: function 

UTILVEMQ 

: function 

UTILVEMQ 

: function 

UTILVEMQ 

: function 

UTILVEMQ 

: function 

UTILVEMQ 

rec field : SLOGREC 

MANHSLOG 

rec field : SLOGREC 

MANHSLOG 

function 

UTILSPIF 

type 

UTILSPIF 

procedure 

MANHSPIF 

: type enun : CNTRLMODE : 

: MANHFCON 

: const : 

UTILVEMQ 

: const 

UTILMATH 

: const 

UTILVEMQ 

: const 

UTILVEMQ} 


< end File ’Manhindx.I’ > 


¥5A4CD3CC 


1 . 7L - V 







File f Manhsymb. 1 1 Page 1 Updated @ 22: ZB: 58 Mon 29 Sep 198G 

$ page $ { begin File ’ Manhsymb. I * > 

i Payload Manhandling Simulator for HP-9000 Series 200/300/500 Computers } 

{ Comment File > < Subject : Symbology for Variables & Constants > 

i NASA/ JSC/MPAD/TRU : Sam Wilson > 


ELEMENTS OF VARIABLE NAMES 


Body I dent if i cat ion 

2 Token representing any one of the following body identification symbols. 

C Crewman (Payload handler). 

P Payload (rigid body to be handled by Crewman). 

0 STS Orbiter. 


Coordinate System Identification 


$ Token representing any one of the following coordinate-system identifi- 

cation symbols. 

XB Body-fixed reference frame generally used for flight control. Origin 

is at body’s center of mass (CM). X axis points forward? Y axis points 
to the right. The body identification symbol represented by the 2 
token is used only when it is needed to avoid ambiguity. 

2D Desired- att itude reference system. Axes define desired orientation of 

XB frame. Origin undefined. The body identification symbol repre- 
sented by X token is used only when it is needed to avoid ambiguity. 

XG Body-fixed reference frame used by the IMI graphics system to define 

the geometry of a particular body. Axes aligned with XB axes. For 
Payload, origin coincides with origin of structural (S) coordinates. 

For Orbiter and Crewman, origin is fixed arbitrarily. The body ident- 
ification symbol represented by X token is used only when it is needed 
to avoid ambiguity. 

I Inertial reference frame. Origin is at the initial nominal position 

<N) of Payload handling point (H), which is defined (in terms of 
Orbiter structural coordinates) by user input. Alignment of axes is 
fixed in inertial space, but otherwise undefined. 

K Camera-fixed coordinate system. Origin at optical center of camera. 

X axis coincides with optical axis and points in the direction of 
sight? Y axis points to the right. > 


Y7Z630E03 


1 - 3- 1 



File ’Manhsymb.I* Page 2 


Updated @ 22:26:58 Mon 29 Sep 1986 


$ page $ 

< 

%P Body-fixed frame of reference used for the analysis of rotational 

dynamics- Origin at CM; axes aligned uiith principal axes of inertia. 
Body identification symbol represented by X token is used only uhen 
it is needed to avoid ambiguity. 

R Crewman’s reach-envelope coordinate system. Origin at center of reach 
envelope. X axis points forward; Y axis points to crewman’s right. 

%S Structural reference frame for a particular body. Location of the 

origin is arbitrary. X axis points aft; Y axis points to the right. 
Body identification symbol represented by X token is used only uhen 
it is needed to avoid ambiguity. These frames are unique in that 
locations are measured in inches, as opposed to feet in all other 
f rames . 


Force/Torque Source lent if icat ion 


# Token representing any one of the following force / torque source 
identification symbols. 

m Aerodynamics < ignored in this simulation). 

C Crewman (Payload handler). 

G Gravity (ignored in this simulation). 

R Reaction control system jets (not modeled in this simulation). 


Point Identification 


@ Token representing any one of the following point identification 

symbols. 

XCM Center of mass (origin of %B and XP coordinate systems). The body 
identification symbol represented by X token is used only when it 
is needed to avoid ambiguity. 

XGO Origin of XG coordinate system. The body identification symbol 
represented by X token is used only uhen it is needed to avoid 
ambiguity. 

H Position of Payload handling point (fixed in Payload body frame). 

KO Origin of camera coordinate system l< (i.e. f optical center). 

N Nominal position of Payload handling point relative to the structure 

of the Qrbiter. 

RO Origin of R axes (center of Crewman’s reach envelope). > 


¥961 14431 


1 . 3- Z 



File * Manhsymb. I * Page 3 


Updated @ ZZ:Z6:58 Mon Z9 Sep 198G 


$ page $ 

< 


ANGMQ X $ 


FLEX @ $ 


ttFORC %©_$ 


LGC_@_$ 


VARIABLE NAMES 


Vectors (1x3 Matrices) 


Angular momentum < slug*f t*f t/sec « ft*lb*sec, in the inertial 
frame I, about the CM) of the body uhose identification symbol is 
represented by the X token. The $ token represents the identifi- 
cation symbol of the coordinate system upon whose axes the vector 
components are resolved. For example, ANGM0_P_0B represents the 
angular momentum of the Payload, expressed in terms of Orbiter 
body-axis components. 

Linear displacement (ft unless indicated otherwise) of a point 
nominally fixed in the Orbiter’s body-fixed frame, due to flexure 
of the Remote Manipulator System (RMS) arm. The @ token repre- 
sents a symbol which identifies the point uhose displacement is 
being defined. The symbol represented by the $ token identifies 
the coordinate system upon whose axes the displacement is resolved. 

Force vector (lb). The symbol represented by the # token, if pres- 
ent, identifies the source of the force. The symbol represented 
by the X token identifies the body on which the force is exerted, 
and is included only when it is needed to avoid ambiguity. The © 
token represents a symbol identifying the point at which the force 
is applied (or can be thought of as being applied). The symbol 
represented by $ identifies the resolvent coordinate system (i.e., 
that upon whose axes the vector components are resolved). For 
example, CF0RC_PH_I represents the force exerted by the Crewman on 
the Payload at the handling point, expressed in components par- 
allel to the axes of the inertial frame I. 

Location (i.e., fixed position) vector (inches if $ « XS, feet 
otherwise). The © token represents a symbol identifying the point 
whose location is being defined. The $ token represents a symbol 
identifying the coordinate system from uhose origin the location is 
measured and upon whose axes the vector components are resolved. 

For example, L0C — KCM3S defines the location of a camera fixed in 
the Orbiter’s structural coordinate system. } 


¥Z6B0F0B0 


1 


3 — 3 



File 1 Manhsymb - 1 * Page 4 


Updated @ ZZ:ZG:58 Mon Z9 Sep 1986 


$ page $ 
$P0S_@ $ 


$RATE $ $ 


ttTGRQ 


$VEL @ $ 


Position vector (ft)- The symbol represented by the @ token 
identifies the point whose position is being defined. The symbol 
represented by the first $ token identifies the coordinate system 
from whose origin the position is measured, while the second $ 
token represents the identification symbol of the resolvent coord- 
inate system. For example, RP0S_H._GB represents the position of 
the Payload handling point relative to the center of the Crewman’s 
reach envelope, expressed in terms of vector components parallel 
to the Orbiter body (OB) axes. 

Rate (i.e., angular velocity) vector (rad/sec internally, deg/sec 
externally). The second $ token represents the identification 
symbol of the frame whose angular velocity is being defined, the 
first $ token represents the symbol of the reference frame with 
respect to which the angular velocity is measured, and the third 
represents the symbol of the frame on whose axes the vector 
components are resolved. For example, OBRATE_PB_I is a vector 
defining the angular velocity of the Payload body frame (PB) 
relative to the Orbiter body frame (OB), with components resolved 
on the I axes. The symbol IRATE_B_B represents the usual M body 
rate vector' 1 (with respect to inertial space) in a context where 
explicit identification of the body associated with the B frame 
is unnecessary. 

Torque vector (ft*lb), The symbol represented by the # token, if 
present, identifies the source of the torque. The symbol repre- 
sented by the % token identifies the body on which the torque is 
exerted, and is included only when it is needed to avoid ambiguity. 
The @ token represents a symbol identifying the point at which the 
torque is measured. The symbol represented by $ identifies the 
resolvent coordinate system (i.e., that upon whose axes the vector 
components are resolved). For example, CTORQ_PH_PB represents the 
torque exerted on the Payload at the handling point by the Crewman, 
expressed in terms of Payload body components. 

Linear velocity vector (ft/sec). The symbol represented by the @ 
token identifies the point whose velocity is being defined. The 
symbol represented by the first $ token identifies the reference 
frame in which the velocity is measured. The second $ token 
represents a symbol identifying the coordinate system upon whose 
axes the vector components are resolved. For instance, RVEL_H_PB 
represents the velocity of the payload handling point with respect 
to the Crewman’s reach axes, with components resolved on the Pay- 
load body axes. > 


MC9786G78 


1 - 3-4 



File ’Manhsymb. 1 1 Page 5 


Updated © ZZ:Z6:58 Mon Z9 Sep 1986 


$ page 

< 

RALAC 

RNERT 


TALAC 

TDAMP. 


TNERT 


TSPRG 


$ 

3x3 Matrices 


„X@_$ Rotational alacrity matrix (inverse of RNERT_%@_$). 

_X@_$ Rotational inertia tensor (slug*ft*ft = f t*lb*sec*sec) . The sym- 
bol represented by the X token identifies the rigid body whose 
rotational inertia is being defined. The symbol represented by 
the © token identifies the point about which the inertia is being 
defined. The symbol represented by the $ token identifies the 
coordinate system axes upon which the tensor components are re- 
solved. For example, RNERT_PH_PB represents the rotational iner- 
tia tensor of the Payload about its handling point, with compon- 
ents resolved on the Payload body axes. 

.%©__$ Translational alacrity matrix (inverse of TNERT_%©_$). 

Translational damping constant matrix (lb*sec/ft) for the point 
whose identification symbol is represented by the ® token. When 
premultiplied by the velocity vector of the point in question, 
yields the damping force exerted on the body whose identification 
symbol is represented by the % token. Force and velocity vector 
components are resolved upon the axes of the coordinate system 
whose identification symbol is represented by the $ token. 

.%©_$ Translational inertia matrix (slug * lb*sec*sec/f t ) for the 

point whose identification symbol is represented by the © token 
and the body whose identification symbol is represented by the X 
token. When premultiplied by a vector defining a desired change 
in the linear acceleration of the point in question, yields the 
force that must be exerted on the body ... at that point. If the 
force application point does not coincide with the body CM, the 
linear acceleration includes that induced by angular accelera- 
tion about the CM (due to the moment of the force). Force and 
acceleration vector components are resolved on the axes of the 
coordinate system whose identification symbol is represented by 
the $ token. 

X@_$ Translational spring constant matrix (Ib/ft) for the point whose 
identification symbol is represented by the © token. When pre- 
multiplied by the displacement vector of the point in question 
(relative to the position where the spring force is zero), yields 
the spring force exerted on the body whose identification symbol 
is represented by the X token. Force and displacement vector 
components are resolved upon the axes of the coordinate system 
whose identification symbol is represented by the $ token. > 


¥EE1 13C31 


1 


3-5 



File * Manhsymb. 1 1 Page G 


Updated @ 2Z:ZG:58 Mon Z9 Sep 198G 


$ page $ 
VBASE_$_$ 


PYR_$_$ 


QUAT_$_$ 


< end File 


Vector base matrix, i.e., a matrix uhose rows are unit vectors 
aligned with the axes of the coordinate system uhose symbol is 
represented by the first $ token. The second $ token represents 
a symbol identifying the coordinate system upon uhose axes the 
unit vector components are resolved. Such a matrix is used to 
transform vector components from one resolvent frame to another. 
For example, using the VXM function that computes the product of 
a vector uith a 3x3 matrix, the PASCAL statement 

CFORCJ’HJ VXM< CFORC_PH_PB, VBASE_PB_I ) 

describes a transf ormat ion from the Payload body frame PB to 

the inertial frame I of the components of force exerted on 

the Payload by the Crewman. 


Euler Angles and Quaternions 


An array of three angle values < rad internally, deg externally) 
for a pitch/ yau/roll Euler rotation sequence that uould rotate 
the axes of one coordinate system (uhose identification symbol 
is represented by the first $ token) into alignment with the 
axes of another system (uhose identification symbol is repre- 
sented by the second $ token). For instance, PYR_OB_PB is an 
array of Euler angles that defines the attitude of the Payload 
body axes uith respect to the Orbiter body axes. 

A unit quaternion uhich defines an eigenaxis rotation that uould 
rotate the axes of one coordinate system (uhose identification 
symbol is represented by the first $ token) into alignment with 
the axes of another system (uhose identification symbol is rep- 
resented by the second $ token). For example, in a context where 
explicit identification of the body is unnecessary, QUAT__1'_J3 rep- 
resents a quaternion defining the orientation of the body axes B 
uith respect to the inertial frame I. > 


’Manhsymb. I* > 


¥A897CA77 


1 


3— e 



1-4. Miscellany 


1 - 


X 



File 1 Manhnisc. 1 1 Page 1 Updated @ 08:43:02 Tue 04 Nov I98G 

$ page $ < begin File ’Manhnisc. I’ > 

{ Payload Manhandling Sinulator for HP-9000 Series 200/300/500 Computers } 
nodule MANHMISC ; { Subject : Miscellany > 

{ NASA/ JSC/MPAD/TRU : San Wilson > 

import 

UTILSPIF , 

UTILVEMQ ; 


export 


{ begin externally visible declarations > 


const 


PROGID - ’ MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1386) Run @ 1 ; 
FILL12 = ’ 1 t 12 spaces > ; 


FTPERIN 

0.083333333333333L0 ; 


1 / 1 Z 

> 

PERCENT 

0.0IL0 5 

< 

1/100 

> 

STDGRAVACC = 

32.174L0 5 

{ 

ft/sec/sec 

> 


STRUC2B0DY = DIAG3X3 [ 

“0. 08333333333333333L0 , 
+0. 08333333333333333L0 , 
-0. 08333333333333333L0 ] ; 


{ diagonal matrix for converting > 
< position vector components > 
{ from structural (S) reference > 
{ to body <B> reference > 


var 


SIMTIME : longreal ; { Simulated Tine (since start of simulation ) > 

function USER„DECIDE5_N0T_T0< D0_THIS : PROMPTSTR ) : boolean s 
function USER_DECIQES( THIS_ISJTRUE : PROMPTSTR ) : boolean ; 

implement < begin externally invisible part of module > 


function USERJ3ECIDESJWT„T0< DOJTHIS : PROMPTSTR ) : boolean ; 
begin 

USERJDECIDES_NOTJTQ not USERJ)ECIDES_TO< OQ_THIS ) 
end 5 


function USERJ3ECIDES( THIS„IS_TRUE : PROMPTSTR > : boolean ; 
begin 

USERJJECIDES : = USER_DECI DES_T0< say >( THIS_IS_TRUE ) 
end ? 


end ; { module MANHMISC & File ’Manhnisc. I’ > 


¥72E20EA2 


1 - 1 



• 5 . PASCAL Interface uith HP-9000 Operating System 



Model Z1G / Pascal 3.0 Interface Module 


1 . *B _ 1 — i 



File ’ MANHSPIF. I ’ Page 1 
$ page $ < begin File ’ MANHSPIF . I ’ > 


Updated @ 08:44:03 Sat 04 Oct 1986 


i Payload Manhandling Simulator for HP-9000 Model Z16 with Pascal 3.0 Op Sys } 
module MftNHSPIF ; < Subject : System/PflSCAL Interface } 

f NASA/ JSC/MPAD/TRW : Sam Uilson 1 


import 


Iodeclarat ions , { Pascal 
General_1 , f Pascal 
General_3 , { Pascal 
General_4 , { Pascal 
UTILSPIF ; 


3.0 system module 
3.0 system module 
3.0 system module 
3.0 system module 


} 

> 

} 

> 


export { begin externally visible declarations > 

procedure SET_UP_HPIB_INTERFACE_TO_IMI j 
procedure RESET_IMI_BUFFER , 
procedure ADD_STRIN6_T0_IMI_BUFFER ( STR : LINESTR ) ? 
procedure TRANSFERJ3UFFER_C0NTENTS_T0_IMI 5 
procedure WRI TE._ERROR_MESSAGE 5 


implement 


< begin externally 


invisible part of module 


} 


const 


IMI_DEVICE_CODE = 717 ; 


var 


IMI_BUFFER : Buf_inf o_type ■, 


¥7AF64436 


1 


5.1-1 



File ’ MANHSPIF. I ' Page Z 
$ page $ 


Updated @ 08:44:03 Sat 04 Oct 1986 


procedure SET_UP_HPIB_INTERFACE_TO_IMI s 
begin 

Iobuffer ( IMI^BUFFER, 255 ) 
end ; 


procedure RESET_IMI_BUFFER ; 

begin 

repeat 

< nothing > 

until not Buffer_busy < IMIJ3UFFER ) 
Buf f er_reset ( IMI_BUFFER ) 
end ; 


procedure ADD_STRIN6_T0_IMI_BUFFER ( STR : LINESTR ) j 
begin 

Writebuffer_string < IMI_BUFFER, STR > 
end ; 


procedure TRANSFER_BUFFER_CONTENTS_TO_IMI s 
begin 

Transfer ( IMI_DEVICE_CODE , Qverlap_intr, From_i»ienory , 
IMI_BUFFER, Buf f er_data( IMI_BUFFER ) ) 

end j 


¥AFEAF2AA 


1 . 5 . 1 — Z 



File ’ MANHSPIF. I ’ Page 3 
$ page $ 


Updated @ 08:44:03 Sat 04 Oct 1986 


procedure WRITE JERRORJIESSFIGE } 
var 


K : integer ; 
MSG : LINESTR ; 


begin 

Ioreset < IMI_DEVICE_CODE div 100 ) 
MSG := ” 

case escapecode of 


-ZB : 

strurite ( MSG, 1 ,K , Ioerror_message< Ioe_result ) ) 
-Z0 : 

strurite < MSG, 1 ,K , ’Stopped by user’ ) 


-10 : 

strurite ( MSG,1,K,’I/0 system error; Ioresult ’,Ioresult:1 
otheruise 

a 1 1 Ui i we \ MSG , 1 , K , Escapecode ’ , escapecode : 1 ) 
end ; < case escapecode > 


SHOULN < ” ) ; 

SHOULN ( MSG ) ; 

SOUND_ALARM ; 

for K := 1 to Z do uriteln < LP ) ; 
uiriteln ( LP, MSG ) ; 
end ; 


5 


1 


end ; < module MANHSPIF & File ’MANHSPIF. I’ > 


¥7A4B83ZB 


1 - 5 _ 1-3 



I.5.Z. Series 500 / HP-UX 5-0 Interface Module 


1 . S _ Z - ± 



File ’ manhspif . I ’ Page 1 Updated @ 08:43:13 Tue 04 Nov 198G 

$ page $ { begin File ’manhspif. I' > 

■C Payload Manhandling Simulator for HP-9000 Series 500 with HP-UX 5.0 Op Sys > 
module MANHSPIF ; { Subject : System/PASCAL Interface > 

{ NASA/ JSC/MPAD/TRU : Sam Wilson > 

import 

UTILSPIF ; 

export { begin externally visible declarations > 

procedure SET_UP_HPIB_INTERFACE_TO_IMI ; 

procedure RESET_IMI_BUFFER ; 

procedure ADD_STRIN6_T0_IMI_BUFFER ( STR : LINESTR ) ; 
procedure TRANSFER_BUFFER_CONTENTS_TO_IMI ; 

procedure URI TE_ERROR_MESSAGE ; 

implement { begin externally invisible part of module > 

const 


IMI_PATHSTR = 

IMI_I0LEN 

0_WR0NLY 

NULLCHAR 

HPIBWRITE 


’/dev/imi_hpib' 

1 

1 

chr( 0 ) 
chr( 2 ) 


type 

PATHPAC ■ packed array [ 1..20 1 of char ; 
IOBUFPAC = packed array t 1..255 1 of char ; 
IOBUFPTR - "IOBUFPAC ; 


IODETAIL = 
record 

MODE : char 

TERMINATOR : char 

count : integer 

BUF : IOBUFPTR 

end ; { record > 


var 


IMI_EID : integer ; 

IMI.IOVEC : IODETAIL ; 

IMI_PATHPAC : PATHPAC ; 

IMI_TRANSFER_FLA6 : integer ; 

function errno $ alias ’Pas.Errno’ $ : integer ; external ; 

function hpib_io( EID : integer ; 

var IQVEC : IODETAIL ; 

IOLEN : integer ) : integer ; external ; 

function open( var PATH : PATHPAC ; 

OFLAG : integer ) : integer ; external ; 


_ Z - 


¥D5A351C3 


1 . 5 


1 



File ’nanhspif Page Z 


Updated @ 08:43:13 Tue 04 Nov 1986 


procedure SETJJP_HPIB_INTERFACE_TO_IMI ; 
var 


k : integer ; 


begin 

for k := 1 to strlenl IMI_PATHSTR ) do 
IMI_PATHPAC[ k 1 := IMI_PATHSTR[ k 1 
IMI_PATHPAC [ 1 + strlen( IMI_PATHSTR ) ] := NULLCHAR 
IMI_EID := open( IMI.PATHPAC, 0_WRONLY ) 
if IMI_EID = -1 then escape ( 101 ) 
with IMI_I0VEC do 
begin 

MODE := HPIBURITE 
TERMINATOR := NULLCHAR 
new ( BUF ) 
end i 

IMI_TRANSFER_FLAG := 0 
end ; 


procedure RESET_IMI_BUFFER ; 


begin 

if IMI_TRANSFER_FLAG <> 0 then escape ( 102 ) 
IMI_I0VEC. count := 0 
end ; 


procedure ADD_STRING_TO_IMI_BUFFER ( STR : LINESTR ) ; 
var 


k : integer i 


begin 

with IMI_IOVEC do 

for k := 1 to strlen( STR ) do 
begin 

count : = count + 1 
BUF A [ count] := STRtk] 
end ; 

end ; 


procedure TRANSFER_BUFFER_CONTENTS_TO_I MI 5 
begin 

IMI_TRANSFER_FLAG := hpib_io( IMI_EID, IMI_IOVEC. IMI_I0LEN ) 
end ; 


¥B5789A78 


1 - 5 - Z-Z 



File 1 manhspif . 1 1 Page 3 
$ page $ 


Updated @ 08:43:13 Tue 04 Nov 1986 


procedure URI TE_ERRQR_MESSAGE ; 
var 


K : integer ; 
MSG : LINESTR ; 


begin 
MSG : - * ’ 

case escapecode of 


-1301 : 

strurite ( MSG, 1 ,K HP-UX errno * ,errno:1 ) 

-1300.. -1201 : 

strurite ( MSG, 1 ,K , ’Pascal I/O error ’ , -( escapecode+ 1 200) : 1 ) 
-20 : 

strurite ( MSG, 1 ,K ,’ Stopped by user’ ) 

-19. .-1 : 

strurite < MSG , 1 , K , 1 HP-UX signal ', -escapecode: 1 , ’ received 1 ) 
otheruise 

strurite < MSG, 1 ,K , 1 Escapecode 1 , escapecode: 1 ) 
end ; f case escapecode > 


SHOWLN < 1 1 ) ; 

SHOULN ( MSG ) s 
SOUND_ALARM j 

for K := 1 to 2 do uriteln < LP ) > 
writeln ( LP, MSG ) ; 
end ; 


1 


t 


t 


end ; { module MflNHSPIF & File ’manhspif.I 1 > 


¥F73671F6 


1 


Z - 3 




1 . 6- x 



File * Manhbods. I ’ Page 1 Updated @ ZZ:Z7:17 Mon Z9 Sep 1986 

$ page $ { begin File 'Manhbods. I’ > 

< Payload Manhandling Simulator for HP-9000 Series 200/300/500 Computers > 
module MANHBODS 5 *f Subject : Body (Object) Data > 

i NASA/ JSC/MPAD/TRU : Sam Wilson > 

import 

UTILSPIF , 

UTILVEMQ ; 

export { begin externally visible declarations } 

const 


NUMOBJECTS = 3 


{ no. of objects that may appear in camera image > 


type 


OBJECT - ( 

orbiter , 
payload , 
crewman ) 


{ objects that may appear in camera image? > 
{ graphics system requires a file of coordinates > 
i to define the geometry of each one > 


INFOREC - i record containing information about an object > 

record 

case integer of 


RNERT_CM_B 

MAT3X3 

RALAC_CM_B 

MAT3X3 

TORQ_CM_0 

VECTOR 

VBASE_I_B 

MAT3X3 

F0RC_CM_I 

VECTOR 

MASS 

longreal 

CF0RC_H_B 

VECTOR 

CT0RQ_H_B 

VECTOR 


t Orbiter & Payload > 


i slug = lb*sec*sec/f t > 


2 : ( TALAC_CRO_R : MAT3X3 ; { Crewman > 

TDAMP_CRO_R : MAT3X3 3 
TSPRG_CRG_R : MAT3X3 ) ; 


end ; < case & record } 


¥69615541 


1 


6 - 1 



File ’Manhbods.I’ Page Z 
$ page $ 


Updated @ ZZ:Z7:17 Mon Z9 Sep 1986 


const 


STATESIZE = 1 3 i i number of scalar variables required to define } 

< the motion state of one object } 


type 


STATEREC = 
record 

case integer of 


f record defining an object’s state of motion > 


1 : ( 

ARR 

: array 11.. 

STATESIZE] 

of longreal ) ; 


Z : ( 

IP0S_CM_I 

: VECTOR 

5 


Orbiter and 

> 


I VEL_CM_I 

: VECTOR 

? 

{ 

Payload, 

> 


QUAT_I_B 

: QUATERNION 

9 

{ 

relative to 

> 


IRATE_B_B 

: VECTOR 

) 5 

{ 

inertial frame I 

> 

3 : ( 

0BP0S_R0_R 

: VECTOR 

9 

{ 

Creuman, rela- 

> 


0BVEL_R0_R 

: VECTOR 

) ; 

{ 

tive to Orbiter 

i 





{ 

body axes (OB) 

> 

end ; < case & record 

> 






DERIVREC = 
record 

case integer of 


{ record of state variable derivatives u.r.t. time > 


1 : ( ARR 

Z : < IPOSDOT_CM_I 
IVELDOT_CM_I 
QUATDOT_I_B 
IRATEDOT B B 


array t 1 . .STATESIZE] of longreal ) 5 


VECTOR ; 
VECTOR ; 
QUATERNION i 
VECTOR ) 


< Orbiter and > 
i Payload, > 
i relative to } 
{ inertial frame I } 


end 


3 : ( OBPOSDQT_RO_R 
0BVELD0T_R0_R 

{ case & record > 


VECTOR 

VECTOR 


< Crewman, rela- > 
{ tive to Orbiter } 
{ body axes (OB) > 


i * NOTE: For the purpose of integrating the differential } 

< equations of motion for the Creuman (only), the } 

{ Orbiter’s body-fixed coordinate system OB is } 

< treated as if it were an inertial frame. This is } 

{ justified on the basis that the acceleration and > 

< angular velocity of the Orbiter will of necessity } 

< be very small uhile the Creuman is manhandling the } 

{ payload, that the matrix constants (TALAC.TDAMP, > 

{. TSPRG) used in the Creuman’ s equations of motion } 

{ are only approximate, and that divergence of the > 

{ Orbiter-relative position of the Creuman is pre- } 

{ eluded by his physical connection to the Orbiter } 

{ structure through the Remote Manipulator System > 

{ < RMS ) . > 


¥FE3A997A 


1 - 6-Z 



File ’Manhbods. I’ Page 3 
$ page $ 


Updated @ ZZ:Z7:17 Mon Z9 Sep 1986 


var 


INFO : array [ 
STATE : array [ 
DERIV : array I 


F0RC_CR0_R : 
L0C_H_PB : 
0BP0S_H_0B : 
QBVEL_H_QB : 
OBPOS_N_R : 

RNERT_PCM_PB 

RNERT_PH_PB 

TNERT_PH_PB 

VBASE_R_PB 

VBASE_QB_R 

VBASE_OB_PB 

QUAT_R_PB : 
QUAT_OB_R : 
QUAT_OB_PB : 
QUAT_OB_PD : 


OBJECT ] 
OBJECT ] 
OBJECT ] 

VECTOR ; 
VECTOR 5 
VECTOR ; 
VECTOR ? 
VECTOR s 

: MAT 3X3 ; 

: MAT3X3 j 
: MAT3X3 5 
: MAT3X3 ; 

: MAT3X3 5 
: MAT3X3 5 

QUATERNION 5 
QUATERNION j 
QUATERNION 5 
QUATERNION ; 


of INFOREC 5 
of STATEREC 5 
of DERIVREC j 


implement 


f begin externally invisible part of module > 


end ; < module MANHBODS & File ’Manhbods. I’ > 


¥A4575EB7 


1 


6 — 3 



.7. Flight Control 


1 . V 


x 



File ’Manhfcon.I’ Page t Updated @ ZZ:Z7:36 Mon Z9 Sep 198G 

$ page $ < begin File ’Manhfcon.I’ > 

< Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 


module MANHFCON 


{ Subject : Flight Control } 


{ NASA/ JSC/MPAD/TRW : Sam Wilson } 


import 

UTILMATH , 

UTILSPIF , 

UTILVEMQ 
MANHBODS 5 

export { begin externally visible declarations > 

type 


REALARR3 = array t 1 . . 31 of longreal ; 


CNTRLMODE = ( 
FREE 
ALIGN 
DESPIN 
CAPTURE 


HOLD 
ROLL 
YAW 
PITCH 
SPINUP ) 


< Payload <PL) flight control option 

< no control ( "hands off" ) 

< * align PL angvel vector with PBx (spin) axis 

< oppose rotation of PL about PBx (spin) axis 

•£ nullify PL ang and lin vel (hold afteruard) 
f maintain captured state (capture 1st if nec) 

< nullify PL roll error (capture first if nec) 

i nullify PL yaui error (after roll correction) 

< nullify PL pch error (after roll & yau corr) 

< accelerate PL rotatn about PBx (spin) axis 


{ * NOTE: The ALIGN mode is included for analysis 
{ only; it is not considered feasible of 

{ implementation by Creuman. 


CNTRLPACARR = array [ CNTRLMODE 1 of NAMEPAC ; 


const 


> 

> 

} 

} 

} 

> 

} 

} 

y 

> 

> 

> 

> 


CNTRLPAC = CNTRLPACARR [ 


NAMEPAC 

[ 

1 

FREE 

] 

s 

NAMEPAC 

[ 

1 

ALIGN ’ 

] 


NAMEPAC 

[ 

« 

DESPIN ’ 

] 


NAMEPAC 

[ 

1 

CAPTURE’ 

] 


NAMEPAC 

[ 

» 

HOLD ’ 

] 


NAMEPAC 

t 

f 

ROLL 

1 


NAMEPAC 

[ 

f 

YAU 

3 


NAMEPAC 

[ 

f 

PITCH ’ 

3 


NAMEPAC 

t 

» 

SPINUP ’ 

3 

3 



¥65EFZ80F 


1 . V- 1 


File ’ Manhf con. I ’ Page 2 

$ page $ 


Updated @ 22:27:36 Mon 29 Sep 1986 


var 


current_mode : CNTRLMODE i 
desired_mode : CNTRLMODE 5 


AERR 

EULPYR 

AVEL 

VECTOR 

LERR 

VECTOR 

LVEL 

VECTOR 


< angular error = PYR_PD_PB } 

< angular velocity * PDRATE_PB_PB > 

< linear error 3 RPOS_H_R > 

{ linear velocity «* RVEL_H_R } 


CNTRLCON : 
record 


< record containing manhandling control constants 


AERRMAX : REALARR3 
AERRMIN : REALARR3 
AERRTOL : REALARR3 
AVELTOL : REALARR3 
DSPFORC : VECTOR 
FORCLIM : REALARR3 
LERRLIM : REALARR3 
LERRTOL : REALARR3 
LVELTOL : longreal 
NOMAVEL : REALARR3 
NOMLVEL : longreal 
SPUFORC : VECTOR 
TIMECON : longreal 
TORQLIM : REALARR3 
end } <record> 


; i max PB pch/yau/rol u.r.t. PD axes ( * ) 

i { min PB pch/yau/rol u.r.t. PD axes ( * ) 

; { pch/yau/rol tolerances 
5 t angular velocity component tolerances 
; i despin force vector applied at H ( ** ) 
; < force component limiting magnitudes 
; { pos error compnent lim magnitudes < * ) 
! < position error component tolerances 
; { linear vel component tol ( any axis ) 

5 { non rot rates for correcting ang error 

5 < non vel mag for correcting linear error 
; < spinup force vector applied at H < ** ) 
i < time alloued to achieve corrective vel 
; < torque component limiting magnitudes 


} 

} 

> 

} 

} 

> 

> 

} 

} 

> 

> 

} 

> 

} 

} 


{ * NOTE: H out of reach if limits exceeded > 

< ** NOTE: FORCLIM does not apply > 


procedure COMPUTE_FLIGHT_CONTROL_FORCE„AND_TORQUE j 


implement 


< begin externally invisible part of module > 


¥9788E688 


1 


7-Z 



File ’ Manhfcon.I’ 


Page 3 


Updated @ ZZ:27:3B Mon Z9 Sep 1986 


$ page $ 





var 





DESRACC 

VECTOR ; 

{ desired 

rotational 

accelerat ion 

DESTACC 

VECTOR ; 

{ desired 

translational 

acceleration 

GAIN 

longreal ; 




VERR 

longreal ; 





procedure COMPUTE J30NTR0L_STflTE 
procedure NULL I F Y_F0RCE_ AND_TORQUE 
procedure COMPUTE_ALIGNMENT_FORCE_AND_TORQUE 
procedure COMPUTE_DESPIN_FORCE_AND_TORQUE 
procedure CQMPUTE_CAPTURE_FORCE_AND_TQRQUE 
procedure COMPUTE_CAPTURE_FORCE 
procedure COMPUTE_CAPTURE_DESRACC 
procedure COMPUTE_CONTROL_TORQUE 
procedure COMPUTE_ROLL_FORCE_AND_TORQUE 

procedure CHECK„AGAI N_EXCEPTI NG_R0T ATI ONAL_AXI S ( E : integer ) 

procedure C OMP UTE_YAW_F ORC E_AND_TORQUE 

procedure COMPUTE_PI TCH_FORCE_AND_TORQUE 

procedure COMPUTE_SPINUP_FORCE_AND_TQRQUE 

function CREUMAN_LATERAL_CQRRECTI VE_FORCE : VECTOR 


} 

> 


; f oruard; 
{forward; 
;f oruard; 
{forward; 
; forward; 
{forward; 
{forward; 
{forward; 
{forward; 
; forward; 
{forward; 
{forward; 
; forward; 
{forward; 


¥E48CB50C 


1 . 7 — 3 



File ' Manhf con. I ' Page 4 

$ page $ 


Updated @ ZZ:Z7:3G Mon Z9 Sep 1986 


procedure COMPUTE_FLIGHT_CONTRQL_FORCE_AND_TORQUE 5 


var 


i : integer j 

0UT_0F_REACH : boolean ; 


begin 

COMPUTE_CONTROL_STATE 
OUT_OF_REACH :■= false 
with CNTRLCON do 

for i := 1 to 3 do 
begin 

if abs< LERRIi] ) > LERRLIMIil then 
0UT_0F_REACH := true 
if AERRI i] > AERRMAXtil then 
OUT_QF_REACH := true 
if AERRI i] < AERRMINfil then 
0UT_0F_REACH := true 

end ; 

if 0UT_0F_REACH or ( desired_mode * FREE ) 


then 

NULLIFY_FORCE_AND_TQRQUE 


else 


case desired node of 


ALIGN 

DESPIN 

CAPTURE 

HOLD 

ROLL 

YAU 

PITCH 

SPINUP 

end 5 i 


: COMPUTE_ALIGNMENT_FQRCE_AND_TORQUE 
: C OMP UTE_DE SP I N_F0RC E_ AND_T ORQUE 

: C OMP UTE_C AP TURE_F ORC E_AND_T ORQUE 
: COMPUTE_ROLL_FORCE_AND_TORQUE 
: COMPUTE_YAW_FORCE_AND_TORQUE 
: C OMP UTE_P I TC H_FORC E_AND_T ORQUE 
: C OMP UTE_SP I NUP_F ORC E_AND_TORQUE 
case desired_node > 


end ; 


¥45996689 


1 


■ 7-4 



File ' Manhf con. I ’ Page 5 
$ page $ 


Updated @ ZZ:Z7:3B Mon Z9 Sep 1986 


procedure COMPUTE_CONTROL_ST ATE ; 


var 


IPOS_H_I 
IVELH I 


VECTOR 5 
VECTOR j 


begin 

with INFO! payload] , STATE! payload] 
begin 


do 


VBASE_I_B := QMAT< QUAT_I_B > 

IPOS_H_I := VSUM< IP0S_CM_I , VXMT( 

IVEL_H_I := VSUM( IVEL_CM_I, VXMT< 


loc_h_pb, 

VBASE_I_B ) ) 
CRSP( IRATE_B_B, 
VBASE_I_B > ) 


L0C_H_PB ), 


end i 

uith INFO! orbiter ] 


begin 

VBASE_I_B 

■ =3 

QMAT< 

QUAT_R_PB 


QCXQ( 

VBASE_R_PB 

2 ** 

QMAT( 

0BP0S_H_0B 

» = 


OBVEL_H_OB 

• 59 

VDIF< 

AERR 

: » 

QPYR< 

AVEL 

- « 

VDIF< 

end s 




STATE! orbiterJ , CNTRLCON do 


QUAT_I_B ) 

QUAT_0B_R , QUAT_0B_PB ) 
QUAT_R_PB ) 

VXM( VDIF( IP0S_H_I , IP0S_CM_I 
VXM( VDIF( I VEL_H_I , IVEL_CM_I 
CRSP< IRATE_B_B, 0BP0S_H_0R ) ) 
QCXQ( QUAT_OB_PD, QUAT_0B_PB ) 
STATE! payload] . IRATE_B_B, 

VXM( IRATE_B_B, VBASE OB PB ) ) 


VBASE_I_B ) 
VBASE_I_B ), 


uith STATE! creunanl , CNTRLCON do 
begin 

LERR := VDIF! VXM( OBPOS_H_OB, 
LVEL :■= VDIF( VXM< 0BVEL_H_0B, 
end ; 

end ; 


VBASE. 

VBASE 


0B_ 

OB 


0BP0S_R0_R 
OBVEL RO R 


¥5935ZF95 


1 


"7 — 5 



File 'Manhfcon.I' Page G 
$ page $ 


Updated 6 ZZ:Z7:36 Mon Z9 Sep 1986 


procedure NULL I F Y_F 0RCE_AND_T ORQUE 
begin 

current_mode : = FREE 
uith INFOE payload] do 
begin 

CF0RC_H_B : = ZERVEC 
CT0RQ_H_B := ZERVEC 
end i 

uith INFO! orbiter] do 
begin 

CF0RC_H_B := ZERVEC 
CT0RQ_H_B : = ZERVEC 
end 9 

end ; 


procedure COMPUTE_ALIGNMENT_FORCE_AND_TORQUE 9 
var 

i : integer ; 

TORQ : VECTOR ; 

begin 

current_mode := ALIGN 
uith CNTRLCON do 
begin 

DESRACCE1] :=■ ZERO 
for i :* Z to 3 do 
begin 

VERR := AVELEi] 
if AVELTOLti] > ZERO 

then GAIN := RMIN( ONE, abs< VERR/AVELTOLE i ] > ) 
else GAIN := ZERO 

DESRACCE i] := -( GAIN* VERR/ TIMECON ) 
end i 

TORQ := VXM( DESRACC , RNERT_PH_PB ) 
for i := 1 to 3 do 

if abs< TORQ! i] ) > TORQLIME i] then 

TORQtil := RSIGN( TORQfi] ) * TORQLIMI i] 

end 9 

uith INFOE payload] do 
begin 

CF0RC_H_B :=* ZERVEC 
CT0RQ_H_B := TORQ 
end 9 

uith INFOE orbiter 1 do 
begin 

CF0RC_H_B := ZERVEC 

CT0RQ_H_B := VXMT( VDIF( ZERVEC, TORQ ). VBASE_OB_PB ) 
end 9 

end 9 


¥D7BEC07E 


1 - v— e 



File ’ Manhfcon.I’ Page 7 
$ page $ 


Updated @ ZZ:27:3B Mon Z9 Sep 198B 


procedure COMPUTE_DESPIN_FORCE_ANQ_TORQUE j 
var 


FORC : VECTOR ; 

begin 

current_mode :» DESPIN 

FORC VSUM( CNTRLCON. DSPFORC , CREWMAN_LATERAL_CORRECTI VE_FORCE ) 
with INFOt payload] do 
begin 

CFORC_H_B := FORC 
CTQRQ_H_B := ZERVEC 
end ; 

with INFO! orbiterJ do 
begin 

CFORCJ-LB := VXMT< VDIF( ZERVEC, FORC ), VBASE_OB_PB > 
CTORQ_H_B := ZERVEC 
end ; 

end ; 


function CREUMAN_L ATERAL_C ORRE C T I V E_F ORC E : VECTOR ; 


var 

FORC : VECTOR 5 

begin 

uith CNTRLCON do 

if NOMLVEL > ZERO 

then 

begin 

DESTACC := ZERVEC 

if abs< LERRIZ3 ) > LERRT0LIZ3 

then VERR := LVELIZJ + RSIGN( LERRIZ3 ) * NOMLVEL 
else VERR := LVELtZ] 
if LVELTOL > ZERO 

then GAIN := RMIN( ONE. abs< VERR/LVELTOL > ) 
else GAIN := ZERO 

DESTACCtZ] := -< GAIN* VERR/ TIMECON ) 

FORC :» VXM< VXM( DESTACC , VBASE_R_PB >, TNERT_PH_PB ) 
end 

else 

FORC := ZERVEC 

CREUMAN_LATERAL_CORRECTI VE_F0RCE :•= FORC 
end ; 


¥43175IF7 


1 . 7-7 



File ' Manhf con. I ’ Page 8 Updated @ ZZ:Z7:3G Mon Z9 Sep 198G 

$ page $ 

procedure COMPUTE_CAPTURE_FORCE_AND_TQRQUE 5 
begin 

COMPUTE__CRPTURE_FORCE . 

COMPUTE_CAPTURE_DESRACC . 

COMPUTE_CONTROL_TORQUE . 

end ; 


procedure COMPUTE_CAPTURE_FORCE ; 
var 


i : integer i 
FORC : VECTOR 5 


begin 

current_node := HOLD 
with CNTRLCON do 
begin 

for i := 1 to 3 do 
begin 

if abs( LERRt il ) > LERRTOLt i] 

then 

begin 

current_node := CAPTURE 

GRIN := ( abs( LERRt il > - LERRTOLt i I ) / 

( LERRLIMt i] - LERRTOLt il ) 

VERR := LVELtil + RSIGNt LERRt il ) * GRIN * NOMLVEL 
end 

else 

VERR := LVELtil 
if LVELTOL > ZERO 

then GRIN := RMIN< ONE, abs( VERR/LVELTOL ) ) 
else GRIN := ZERO 
if GRIN - ONE then 

current_node := CAPTURE 
DESTRCCtil := -( GRIN* VERR/ TIMECON ) 
end ; 

FORC := VXM( VXM< DESTRCC, VBRSE_R_PB ), TNERT_PH_PB ) 
for i := 1 to 3 do 

if abst FORCtil ) > FORCLIMt il then 

FORCtil := RSIGN( FORCtil ) * FORCLIMt il 

end 5 

I NFOt payload] . CF0RC_H_B := FORC 

INFOt orbiterl .CFORC_H_B := VXMT( VDIF( ZERVEC, FORC ), VBASE_OB_PB ) 
end ; 


¥21400940 


1 . v— e 



File ’ Manhfcon.I’ Page 9 
$ page $ 


Updated @ 22:27:36 Mon 29 Sep 1986 


procedure COMPUTE_CAPTURE_DESRACC s 
var 


i : integer ; 


begin 

with CNTRLCON do 

for i :■ 1 to 3 do 
begin 

VERR :« AVELtiJ 
if AVELTOLti] > ZERO 

then GAIN := RMIN( ONE, abs< VERR/ AVELTOLti] ) ) 
else GAIN := ZERO 
if GAIN = ONE then 

current_node := CAPTURE 
DESRACCm := -( GAIN* VERR/ TIMECON ) 
end ; 

end ; 


procedure C0MPUTE_C0NTR0L_T0RQUE 5 


i : integer ; 
TORQ : VECTOR ; 


begin 

uith CNTRLCON do 
begin 

TORQ := VDIF( VXM( DESRACC , RNERT_PH_PB ), 

CRSP( L0C_H_PB, INFO! payload] . CF0RC_H_B ) ) 
for i := 1 to 3 do 

if abs< TORQti] ) > TORQLIMI i] then 

TORQtil := RSIGN( TORQti] ) # TORQLIMti] 

end ; 

INFOt payload] .CTORQ_H_B := TORQ 

INFOt orbiter] . CT0RQ_H_B := VXMT( VDIF( ZERVEC, TORQ ), VBASE_OB_PB ) 
end ; 


¥EZ86D246 


1 _ *7- 9 



Updated @ ZZ: 27:36 Mon Z3 Sep 1986 


File ’Manhfcon.I’ Page 10 
$ page $ 

procedure COMPUTE_ROLL_FORCE_AND_TORQUE 5 
begin 

COMPUTE_CAPTURE_FORCE 
COMPUTE_CAPTURE_DESRACC 
if current_roode = CAPTURE then 

CHECK_AGAIN_EXCEPTING_ROTATIONAL_AXIS ( 1 ) 
if current_mode <> CAPTURE then 
uith CNTRLCON do 

if abs< AERRC3] ) > AERRTOLt 31 then 
begin 

current_mode := ROLL 

VERR := AVELt 1 ] + RSIGN< AERRl 3] ) * NOMAVELt 1 1 
if AVELTOLtl] > ZERO 

then GAIN := RMIN( ONE, abs< VERR/AVELTOLt 1 ] ) ) 
else GAIN := ZERO 

DESRACCt 11 := -( GAI N* VERR/TIMECON ) 
end 5 

COMPUTE_CONTROL_TORQUE 
end ; 

procedure CHECK_AGAIN_EXCEPTING_ROTATIONAL_AXIS ( E : integer ) 5 
var 

i ■ integer j 

begin 
case E of 

1 : current_mode : = ROLL 

Z : current_node :* PITCH 

3 : current_mode := YAU 

end i f case E > 
uith CNTRLCON do 

for i := 1 to 3 do 
begin 

if abs< LERRti] ) > ( 1.5 * LERRTOLlil ) then 
current_node := CAPTURE 
if i <> E then 

if abs( AVELt il ) > AVELTOLt i ] then 
current_node := CAPTURE 

end s 

end ; 


¥B1DB3ABB 


1 . V 


1 <Z> 



File ' Manhf con. I ' Page 11 Updated @ ZZ:Z7:3B Mon Z9 Sep 198B 

$ page $ 

procedure C OMP UTE_Y AU_F QRCE_AND_T ORQUE ; 
begin 

with CNTRLCON do 

if abs( AERRt 31 ) > AERRTQLf 31 

then 

COMPUTE_ROLL_FORCE__AND_TORQUE 

else 

begin 

COMPUTE_CAPTURE_FORCE , 

COMPUTE_CAPTURE_DESRACC , 

if current_mode = CAPTURE then 

CHECK_AGAI N_EXCEPTI NG_R0TATI ONAL_AXI S ( 3 ) 5 

if current_mode <> CAPTURE then 

if abs( AERRIZ] ) > AERRT0LIZ1 then 
begin 

current_node : = YAW ; 

VERR := AVELt 3] + RSIGN( AERRCZI ) * NQMAVELC 31 5 

if AVELTQLC 3] > ZERO 

then GAIN :=> RMIN( ONE, abs< VERR/AVELTOLC 3] > ) 
else GAIN := ZERO j 

QESRACCE 31 := -< GAIN* VERR/ TIMECON ) ! 

end 5 

end •, 

C OMPUTE_CONTROL_T ORQUE , 

end ; 


¥C35D78FD 


1 _ V — 1 1 



File ’Manhfcon.I' Page 12 
$ page $ 


Updated @ 22:27:36 Mon 23 Sep 1986 


procedure COMPUTE_PITCH_FORCE_AND_TORQUE j 
begin 

uith CNTRLCON do 

if abs< AERRt 3] ) > AERRTOLt 31 

then 

COMPUTE_ROLL_FORCE_AND_TORQUE 

else 

if abs< AERRt 21 ) > AERRTOLt 21 
then 

COMPUTE_YAW_FORCE_AND_TORQUE 

else 

begin 

COMPUTE_CAPTURE_F ORCE , 

COMPUTE_CAPTURE_DESRACC , 

if current_node = CAPTURE then 

CHECK_AGAIN_EXCEPTING_ROTATIONAL_AXIS ( 2 ) ; 

if current_mode <> CAPTURE then 

if abs( AERRt 11 ) > AERRTOLt U then 
begin 

current_node := PITCH 5 

VERR := AVELI21 + RSIGN< AERRt 1 1 ) * NQMAVELt 23 5 

if AVELT0LI2] > ZERO 

then GAIN := RMIN( ONE,abs( VERR/AVELT0L121 ) ) 
else GAIN := ZERO , 

DESRACCm := -( GAIN*VERR/TIMECON ) ! 

end 5 

end ; 

COMPUTE_CONTROL_TORQUE ; 

end ; 


procedure COMPUTE_SPINUP_FORCE_AND_TORQUE ; 
var 


FORC : VECTOR j 

begin 

current_node :* SPINUP 

FORC :« VSUM< CNTRLCON. SPUFORC, CREWMAN_LATERAL_CORRECTI VE.FORCE ) 
uith INFOt payload] do 
begin 

CF0RC_H_B := FORC 
CT0RQ_H_B := ZERVEC 
end ; 

uith INFOt orbiterl do 
begin 

CF0RC_H_B := VXMT< VDIF( ZERVEC. FORC). VBASE_OB_PB ) 
CT0RQ_H_B := ZERVEC 
end t 

end ; 

end ; { nodule MANHFCON & File ’Manhfcon.I’ > 


¥ 1 8101 A10 


1 - V- 1 2 




1 - 3- x 



File * Manhdump. I ’ Page 1 Updated @ ZZ:Z7:S0 Mon Z9 Sep 198B 

$ page $ < begin File "Manhdump. I’ > 

i Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 


module MANHDUMP ; f Subject : Data Dump Routines > 

{ NASA/ JSC/MPAD/TRU : Sam Uilson > 

import 

UTILSPIF , 

UTILVEMQ , 

MANHMISC , 

MANHBODS , 

MANHFCON ? 

export { begin externally visible declarations > 

procedure DUMP.EVERYTHING , 

procedure DUMP_INFO_RECORDS 5 

procedure DUMP_STATE_RECORDS 5 

procedure DUMP_DERIV_RECORDS 5 


procedure 

DUMPEUL 

( 

NAME 

UORDSTR 

i 

E 

EULARR 

) ? 

procedure 

DUMP I NT 

( 

NAME 

UORDSTR 

i 

I 

integer 

) ; 

procedure 

DUMP MAT 

( 

NAME 

UORDSTR 

5 

M 

MAT3X3 

) ; 

pr GCuciur e 

DUMPQUAT 

< 

NAME 

UORDSTR 

5 

Q 

QUATERNION 

) i 

procedure 

DUMPREAL 

( 

NAME 

UORDSTR 

i 

R 

longreal 

) ; 

procedure 

DUMPVEC 

( 

NAME 

UORDSTR 

S 

V 

VECTOR 

) ; 


implement { begin externally invisible part of module > 

const 

{ 1 Z> 

<1Z345678901Z34567890> 

NULL = ' ’ ; 


¥ 1 8A00CA0 


1 - 8 - 1 



File ’ Manhdump . I ’ Page 2 
$ page $ 

procedure DUMP_EVERYTHING ? 


Updated @ ZZ:Z7:50 Mon 29 Sep 198B 


begin 

START_NEW_ 
DUMP REAL ( 

PAGE 5 
’SIMTIME 

1 .SIMTIME 

) 


5 

uriteln < 


LP, ' current.node 

’ , CNTRLPACl current. 

_mode] ) 

5 

uriteln ( 
uriteln < 


LP ) ; 

LP, ’ desired_mode 

1 .CNTRLPACI desired. 

_node3 ) 

i 

uriteln < 
DUMPEUL 

( 

LP ) ; 
’AERR 

* , AERR 

) 


5 

DUMPVEC 

( 

’AVEL 

’ , AVEL 

) 


5 

DUMPVEC 

( 

’LERR 

• ,LERR 

) 


5 

DUMPVEC 

< 

’LVEL 

* .LVEL 

) 


5 

DUMPVEC 

( 

’ F0RC_CR0_R 

’ , F0RC_CR0_R 

) 


5 

DUMPVEC 

( 

’L0C_H_PB 

’ , L0C_H_PB 

) 


V 

DUMPVEC 

( 

’ 0BP0S_H_0B 

’ , 0BP0S_H_0B 

) 


i 

DUMPVEC 

( 

’ 0BVEL_H_0B 

* , 0BVEL_H_0B 

) 


5 

DUMPVEC 

( 

’ OBPQS_N_R 

’ , OBPOS_N_R 

) 


5 

DUMP MAT 

( 

'RNERT_PCM_PB 

1 , RNERT_PCM_PB 

) 


9 

DUMPMAT 

< 

’ RNERT_PH_PB 

1 , RNERT_PH_PB 

) 


5 

DUMPMAT 

( 

•TNERT_PH_PB 

’ , TNERT_PH_PB 

) 


5 

DUMPMAT 

( 

’ VBASE_R_PB 

’ , VBASE_R_PB 

) 


v 

DUMPMAT 

( 

’ VBASE_0B_R 

’ , VBASE_0B_R 

) 


5 

DUMPMAT 

( 

’ VBASE_OB_PB 

’ ,VBASE_OB_PB 

) 


5 

DUMPQUAT 

( 

’ QUAT_R_PB 

' . QUAT_R_PB 

) 


» 

DUMPQUAT 

< 

' QUAT_0B_R 

' . QUAT_0B_R 

) 


? 

DUMPQUAT 

( 

' QUAT_0B_PB 

' . QUAT_0B_PB 

) 


; 

DUMPQUAT 

( 

’QUAT_QB_PD 

’ , QUAT_0B_PD 

) 


» 

START_NEW_ 
DUMP_INF0_ 
DUMP_STATE 
DUMP_DERI V 
end ; 

PAGE 
RECORDS 
_ RECORDS 
.RECORDS 




i 

5 

? 

5 


1 - 8— Z 


¥B5A331C3 



File ’ Manhdump . I ’ Page 3 

$ page $ 


Updated @ ZZ:Z7:50 Mon Z9 Sep I98G 


procedure DUMP_INFO_RECORDS ; 
var 


body : OBJECT ; 


begin 

for body := orbiter to payload do 
with INFOtbody] do 
begin 

urite ( LP , ’INF0[’:Z5 ) 
if body = orbiter 

then urite ( LP, ’orbiter’ ) 
else urite ( LP, ’payload’ ) 
ur iteln ( LP , ’ ] ’ ) 
uriteln ( LP ) 

f 1 Z> 

{ 1 Z345B7890I Z 345678901 
DUMP MAT ( ’RNERT_CM_B 
DUMPMAT < ’ RALAC_CM_B 
DUMPVEC ( ’TORQ_CM_B 
DUMPMAT < ’ VBASE_I_B 
DUMPVEC ( ’ FORC_CM_I 
DUMPREAL < ’MASS 
DUMPVEC < ' CF0RCJ-l_B 
DUMPVEC < ’ CT0RQ_H_B 
uriteln ( LP ) ; 
end ; 

uith INFOf creunanl do 
begin 

uriteln ( LP, ’ INFOt creuman] ’ : 33 ) 
uriteln < LP ) 

< 1 Z> 

< 1 Z 34SG7890 1 2 34567890 > 

DUMPMAT ( ’ TALAC_CRO_R ’ ,TALAC_CRO_R ) 

DUMPMAT ( ’ TDAMP_CRO_R ’ , TDAMP_CRO_R > 

DUMPMAT ( ’ TSPRG_CRO_R ’ , TSPRG_CRO_R ) 

uriteln ( LP ) 
end ; 

end ; 


\RNERT_CM_B ) 
\RALAC_CM_B ) 
’ ,TORQ_CM_B ) 
’ ,VBASE_I_B ) 
\FORC_CM_I ) 
’.MASS ) 

* ,CFORC_H_B ) 
’ ,CTORQ_H_B ) 


» 

) 


i 

5 

5 

5 

i 


i 


¥82CC 1 B4C 


1 - 8 - 3 



File ’ Manhdump . I ' Page 4 
$ page $ 

procedure DUMP_STATE_RECORDS ; 


Updated @ ZZ:Z7:S0 Mon Z9 Sep 1986 


var 


body : OBJECT ? 


begin 

for body := orbiter to payload do 
with STATE! body] do 
begin 

write ( LP, ’ STATE! ’ : 25 ) 
if body * orbiter 

then urite < LP, ’orbiter’ ) 
else write ( LP, ’payload' ) 
writeln ( LP , ' 1 ’ ) 
writeln ( LP ) 


DUMPVEC 
DUMP V EC 


i 1 Z1 

< 1 z 34567890 1 Z 345678901 


< 


DUMPQUAT ( 
DUMPVEC < 
writeln < LP > 


’ IP0S_CM_I 
’ IVEL_CM_I 
’ QUAT_I_B 
’ IRATE_B_B 


’ , IP0S_CM_I ) 
\IVEL_CM_I ) 
’ ,QUAT_I_B ) 
\IRATE_B_B ) 


end i 

with STATE! crewman] do 


begin 

writeln ( LP, ’ STATE! crewman] ’: 33 ) 
writeln < LP ) 


f 1 2 > 

{ 1 Z345678901 Z345678901 

DUMPVEC < ’ QBPQS_R0_R ’ ,OBPOS_RO_R ) 

DUMPVEC ( ’ 0BVEL_R0_R ’,OBVEL_RO_R ) 

writeln ( LP > 


end ; 

START_NEW_PAGE 
end j 


5 


¥45786A78 


1 . S — 4 



File ’Manhdurop. I ’ Page 5 
$ page $ 


Updated @ 22:27:50 Mon Z9 Sep 1986 


procedure DUMP_DERIV_RECORDS ; 
var 


body : OBJECT ; 


begin 

for body s* orbiter to payload do 
uith DERI VI body] do 
begin 

urite < LP, ’DERIVI’:Z5 ) 
if body = orbiter 

then write ( LP, ’orbiter’ ) 
else urite ( LP, ’payload’ ) 
uriteln ( LP , ’ ] ' ) 
uriteln ( LP ) 


DUMPVEC ( 
DUMPVEC ( 
DUMPQUAT ( 
DUMPVEC < 


< 1 Z> 

< 1 Z 34567890 1 Z 34567890 > 
’ IPOSDOT_CM_I 
’ I VELDOT_CM_I 
’QUATD0TJJ3 
’ IRATEDOT_B_B 


IPOSDOT_CM_I > 
I VELDOT_CM_I ) 
QUATDQT_I_B ) 
IRATEDOT_B_B ) 


uriteln ( LP ) 


end ; 


uith DERI VI creumanJ do 


begin 

uriteln ( LP, ’ DERIVI crewman! ’: 33 ) 
uriteln < LP ) 

{ 1 21 
{ 1 2 34567890 1 Z 345678901 

DUMPVEC < ’ QBP0SD0T_R0_R ’ ,OBPOSDOT_RO_R ) 

DUMPVEC ( ’0BVELD0T_R0_R ’ , 0BVELD0T_R0_R ) 

uriteln < LP ) 


end j 

ST ART_NEW_P AGE 
end ; 


5 


1 

J 

5 


i 


1 


¥7B7FE49F 


1 


S- 5 



File ’Manhdunp. 1 1 Page B 
$ page $ 


Updated @ ZZ:Z7:50 Mon Z9 Sep 1986 


procedure DUMPEUL ( NAME : WORDSTR ; E : EULARR ) 5 
begin 

uriteln < LP, NAME ,E[ 1 1 : 1 8 , ’ EE 2 3 : 18,* ’, EE bl : 1 8 ) i 

uriteln ( LP ) 5 

end ; 

procedure DUMPINT < NAME : WORDSTR 5 I : integer ) ; 
begin 

uriteln ( LP, NAME, I: 18 ) , 

uriteln < LP ) 5 

end ; 

procedure DUMPMAT ( NAME : WORDSTR ; M : MAT3X3 ) 1 
begin 

uriteln ( LP . NAME ,Ml 1 , 1 ] : 1 8 , • M[1,Z]:18,’ Mil, 33:18 ) ; 

uriteln < LP, NULL ,Mt Z , 1 3 : 1 8, ’ *, M[Z,Z3:18,’ MCZ, 33:18 ) 5 

uriteln < LP, NULL ,Ml 3, 1 3 : 1 8, ’ ’, M13,Z3:18,’ ME 3 , 33 : 1 8 ) ; 

uriteln ( LP ) j 

end ; 

procedure DUMPQUAT ( NAME : WORDSTR : 0 : QUATERNION ) : 
begin 

uriteln ( LP, NAME.Q.H: 18, ’ • ) , 

uriteln ( LP, NULL ,Q. I : 1 8, ' », Q.J:I8,’ Q.K:18 ) , 

uriteln ( LP ) ; 

end ] 

procedure DUMPREAL ( NAME : WORDSTR ; R s longreal ) ; 
begin 

uriteln ( LP , NAME, R: 18 ) ; 

uriteln ( LP ) ; 

end ; 

procedure DUMPVEC ( NAME : WORDSTR i V : VECTOR ) ; 
begin 

uriteln < LP, NAME , VI 1 3 : 1 8, ’ ', VE Z3 : 1 8, ’ *, VI 33 : 1 8 ) ; 

uriteln < LP ) ; 

end ; 

end 5 { nodule MANHDUMP & File ’ Manhdunp. I ’ > 


¥E 10EZ0CE 


1 . e- g 



Updated @ ZZ:2S:01 Mon Z9 Sep J98B 


File ’ Manhslog. I * Page 1 
$ page $ < begin File ’Manhslog. I’ > 

■C Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 
module MANHSLOG ; < Subject : Simulation Log > 

< NASA/ JSC/MPAD/TRW : Sam Wilson } 


import 


UTILMATH 

UTILSPIF 

UTILVEMQ 

MANHMISC 

MANHBODS 

MANHFCON 


export 

const 

type 


{ begin externally visible declarations } 


MAXSLOGRECS = 1501 


SLQGREC = 

record 

case integer of 


1 


SIMDESCRIP 

LINESTR 


PROGSESSID 

LINESTR 


L0C_N_0B 

VECTOR 


L0C_0CM_0S 

VECTOR 


L0C_PCM_PS 

VECTOR 


NUMSLOGRECS 

integer 

) 

TIME 

longreal 

3 

desmode 

CNTRLMODE 

» 

curmode 

CNTRLMODE 

3 

CFORC_PH_PB 

VECTOR 

5 

CTORQ_PH_PB 

VECTOR 

3 

FLEXFORCMAG 

longreal 

5 

FLEX_R0_R 

VECTOR 

3 

ANGM0_P_I 

VECTOR 

3 

W0BBLE_C0NE_P 

longreal 

3 

W0BBLE_CL0K_P 

longreal 

3 

IP0S_0CM_I 

VECTOR 

3 

IP0S_PCM_I 

VECTOR 

3 

IP0S_R0_I 

VECTOR 

3 

PYR_I_0B 

EULPYR 

3 

PYR_I_PB 

EULPYR 

3 

PYR_I_R 

EULPYR 

) 


< orientation of PL ang 


end « { case & record > 

SLOGARR - array [ 0. . MAXSLOGRECS 1 of SLOGREC ; 


¥D961 E541 


1 . 9-1 


File ’ Manhslog.I’ Page Z 
$ page $ 


Updated @ ZZ: 28:01 Mon Z9 Sep 1986 


var 


curslogrec 

PRTSLOGREC 

SLOG 


integer *, 
integer 9 
"5L0GARR 5 


< current simulation log index > 

< 1st index for printing flex/fcon log > 

< pointer to simulation log > 


procedure ST 0RE_SI MUL ATI ON_LOG_RECORD ; 
procedure SAVE_SIMULATION_LOG ; 


implement 


{ begin externally invisible part of module > 


procedure STORE_SIMULATION_LOG_RECORD ; 


var 


ANGM0_P_PB : VECTOR 
QUAT_I_R : QUATERNION 
NORMANGMO : longreal 


begin 

curslogrec :» curslogrec +1 j 

with SLOG* I curs 1 ogrec ] , STATE! arbiter ] do 
begin 

QUAT_I_R :* QXQ < QUAT_I_B, QUAT_0B_R ) 5 

QUAT_0B_PB := QCXQ< QUAT_I_B, STATE! payl oad] . QUAT_I_B ) I 

VBASE_OB_PB := QMAT< QUAT_0B_PB ) 9 

IP0S_0CM_I := IP0S_CM_I ; 

PYR_I_OB := QPYR< QUAT_I_B ) ; 

PYR_I_R := QPYR( QUAT_I_R ) ; 

end ; 

with SLOG* ! curslogrec] , STATE! payload] , INFO! payload] do 
begin 

ANGM0_P_PB 
TIME 
desmode 
curmode 
CFORC_PH_PB 
CTORQ_PH_PB 
ANGMO_P_I 
NORMANGMO 
W0BBLE_C0NE_P 
WOBBLE_CLOK_P 
IPOS_PCM_I 
PYR_I_PB 
end ; 

with SLOG* ! curslogrec] , STATE! creuman] do 
begin 

FLEXFORCMAG := VMAG( F0RC_CR0_R ) 

FLEX_R0_R :*= VDIF( 0BP0S_R0_R, 0BP0S_N_R ) 

IP0S_R0_I := VSUM< IP0S_0CM_I , IR0T< 0BP0S_R0_R, QUAT_I_R ) ) 
end ; 

SLOG* ! 0] . NUMSLOGRECS := curslogrec 
end ; 


- VXM( I RATE_B_B , RNERT_CM_B ) , 
= SIMTIME ; 
* desired_mode ; 
■ current_mode ; 
= CF0RC_H_B , 
= CTORQ_H_B 5 
= VXMT( ANGM0_P_PB, VBASE_I_B ) ; 

- sqrt( sqr( ANGM0_P_PB! Z ] > + sqr( ANGM0_P_PB! 31 ) ) 9 

- ATANZ< NORMANGMO , ANGMO_P_PBl 1 1 ) i 
= ATANZ! ANGM0_P_PB! Z ] , -ANGM0_P_PB! 31 ) 5 
= IP0S_CM_I 5 

- QPYR< QUAT_I_B ) 9 


¥17087608 


i . a -z 



File * Manhslog* I ’ Page 3 
S page $ 

procedure SAVE_SIMULATIONJLOG ; 
var 


Updated @ Z2:Z8:01 Mon 29 Sep 1986 


FILENAME : LIORDSTR 


i 

OKAY 


integer 

boolean 


SLOGFILE : file of SLOGREC 


begin 

repeat 

repeat 

FILENAME : = UORD_INPUT( ’Name for simulation log file*, ’* ) 
if FILENAME - ■» 

then OKAY := USEFMDECIDES_TO( ’Abandon simulation log’ ) 
else OKAY :* true 
until OKAY ; 
if FILENAME <> ” then 
begin 

try { set trap for possible error > 

rewrite ( SLOGFILE, FILENAME ) 

recover { come here after error, if any > 

begin 

OKAY false 

SHOWLN ( ’Unable to open simulation log file* ) 

SQUND_ALARM 

end ; 


if OKAY then 
try 


i set trap for possible error > 
for i :* 0 to curslogrec do 

write ( SLOGFILE, SL0G A [il ) ; 

close < SLOGFILE, ’SAVE* > ; 

uriteln ( LP, ’ Simulation log saved under the name M ’, 

FILENAME , ’ 11 ’ > ? 

recover i come here after error, if any > 

begin 

OKAY :* false i 

SHOWLN (’Not enough disk space for simulation log’) ; 
SOUND_ALARM 5 

end ; 


end ? 

until OKAY ; 


end ; 


end ; i module MANHSLOG & File ’Manhslog.I’ > 


¥Z9ZCCCAC 


1.9-3 



1.10. IMI Simulated Camera 


1 - 1 <Z>- ± 



File 1 Manhkams. I ’ Page 1 Updated @ 22:28: 1Z Mon Z9 Sep 1986 

$ page $ < begin File ’Manhkams. I’ > 

< Payload Manhandling Simulator for HP-9000 Series 200/300/500 Computers } 


module MANHKAMS ; I Subject : IMI Simulated Cameras } 

■( NASA/ JSC/MPAD/TRW : Sam Uilson > 

import 

UTILMATH , 

UTILSPIF , 

UTILVEMQ , 

MANHMISC , 

MANHSLOG 5 

export < begin externally visible declarations } 

type 


KAMERA = ( { 

AHEAD , 
BEHIND , 
LEFT 
RIGHT . 
OVER 
UNDER , 
PAW 

SAW ) 


Camera (identified by location). PAW & SAW are fixed } 
to Orbiter structure; all others are fixed in I frame.} 


{ ahead of Payload } 

< behind Payload } 

< on left (port) side of Payload } 

{ on right (starboard) side of Payload } 

< over (above) Payload } 

{ under (beneath) Payload } 

<■ port aft uindou } 

; C starboard aft uindou } 


KAMARR - array [ KAMERA 1 of 
record 

HORFOV : longreal ; 
case integer of 


1 : ( L0C_K0_I : VECTOR ; 

QUAT_I_K : QUATERNION ) ; 

2 : ( LOC_KO_OB : VECTOR ; 

QUAT_0B_K : QUATERNION ) ; 


end ; { case & record > 


var 


current_kamera : KAMERA 
DESIRED_KAMERA : KAMERA 
KAMINFO : KAMARR 
REMOFFSET : integer 
REMHORFOV : integer 


{ remote camera dist (ft) from I origin > 
< remote cam horizntl fid of vieu (deg) } 


procedure SET_UP_KAMERA_DATA ; 


implement 


< begin externally invisible part of module > 


¥5C4494C4 


1 - 1 <Z>- 1 



File ’Manhkams. I ' Page Z Updated @ ZZ : 28: 1 Z Mon Z9 Sep 198G 

$ page $ 
type 

KAMLOCARR = array [ KAMERA ] of VECTOR ; 

KAMATTARR - array [ KAMERA ] of EULPYR 5 

const 

KAMLOC = KAMLOCARR l 


VECTOR I 

1 .0L0, 

0.0L0, 

0.0L0 

] 

< 

AHEAD 

<_,!> 

> 


VECTOR [ 

-1.0L0, 

0.0L0, 

0.0L0 

] 

< 

BEHIND <_,!> 

} 


VECTOR [ 

0.0L0, 

-1 .0L0, 

0.0L0 

] 

< 

LEFT 

< .1) 

> 


VECTOR [ 

0.0L0, 

1 .0L0, 

0.0L0 

] 

{ 

RIGHT 

<_,I> 

} 


VECTOR I 

0.0L0, 

0.0L0, 

- 1 . 0L0 

] 

i 

OVER 

<_.I> 

> 


VECTOR [ 

0.0L0, 

0.0L0, 

1 .0L0 

] 

i 

UNDER 

<_.I> 

} 


VECTOR I 

57Z.0L0. 

-15.0L0, 

480. 0L0 

] 

{ 

PAW * 

< in. OS) 

> 


VECTOR t 

57Z.0L0, 

15.0L0, 

480. 0L0 

1 

i 

SAW * 

< in. OS) 

} 

i 


< * NOTE: 4" forward of fud bulkhead of cargo bay. > 

{ I MI roundoff error produces jittery > 

< inages of window edges if locations are > 

< set much farther forward than this. > 

KAMATT = KAMATTARR C 


EULPYR [ 

0.0L0, 

180.0L0, 

0.0L0 

] 

\ 

AHEAD 

< deg, I 

) 

} 


EULPYR t 

0.0L0, 

0.0L0, 

0.0L0 

] 

< 

BEHIND 

< deg , I 

) 

> 


EULPYR [ 

0.0L0, 

90.0L0. 

0.0L0 

] 

{ 

LEFT 

(deg. I 

> 

} 


EULPYR 1 

0.0L0, 

-90.0L0. 

0.0L0 

] 

{ 

RIGHT 

< deg, I 

) 

} 


EULPYR I 

-90.0L0, 

0.0L0, 

180.0L0 

) 

t 

OVER 

( deg. I 

) 

> 


EULPYR I 

90.0L0, 

0.0L0, 

180.0L0 

] 

{ 

UNDER 

(deg, I 

) 

> 


EULPYR [ 

0.0L0, 

180.0L0, 

0.0L0 

) 

< 

PAW 

(deg, OB) 

> 


EULPYR [ 

0.0L0, 

I80.0L0, 

0.0L0 

] 

< 

SAW 

(deg. OB) 

> 

i 


¥71 1 14331 


1 


1 <Z>- 2 



File ’Manhkams.I’ Page 3 
$ page $ 


Updated @ ZZ:Z8:1Z Mon Z9 Sep 1986 


procedure SET_UP_KAMERA_DATA 5 


var 


DIST 

kam 

KP0S_N_0B 

TEMVEC 

TEST 

VBASE K OB 


longreal 

KAMERA 

VECTOR 

VECTOR 

longreal 

MAT3X3 


begin 

REMOFFSET := INTEGER_INPUT( ’Camera offset (ft)’, REMOFFSET, 6 ) 
REMHORFOV := INTEGER_INPUT( ’Horizontal FOV (deg)’, REMHORFOV, 6 ) 
for kam := AHEAD to UNDER do 
uith KAMINFQI kam] do 
begin 

HORFOV := RADPERDEG * REMHORFOV 

DIST := REMOFFSET 

L0C_KQ_I := SXV( DIST, KAMLOCIkam] ) 

QUAT.I.K := PYRQ( EULRAD( KAMATTI kam] > ) 

end { 

for kam :« PAU to SAU do 

uith KAMINFOt kam] , SLOG" t 03 do 
begin 

HORFOV := RADPERDEG * 83 

L0C_K0_0B := VXD( VDIF< KAMLOCIkam], L0C_0CM_0S ). 

STRUCZBODY ) 

KP0S_N_0B := VDIF( L0C_N_0B , L0C_K0_0B ) 

DIST := VMAG( KP0S_N_0B ) 

VBASE_K_OBI 1 1 := SXV< ONE/DIST , KP0S_N_0B ) 

TEMVEC := CRSP( ZUNVEC , VBASE_K_OBI 1 ] ) 

TEST := VMAG< TEMVEC ) 

if TEST > ZERO 

then VBASE_K_OBIZ] := SXV( ONE/TEST, TEMVEC ) 
else VBASE_K_OBtZ] := VDIF( ZERVEC , YUNVEC ) 
VBASE_K_OBI 33 :=CRSP( VBASE_K_OBI I ] , VBASE_K_OBI Z ] ) 
QUAT_0B_K := IMATQ< VBASE_K_0B ) 

end ; 

end ; 


end ; { module MANHKAMS & File ’Manhkams.I’ > 


¥ 3D30SB30 


1 


1 <Z>- 3 



.11. Simulation Runtime Displays 


1 _ 1 1 - i 


File 'Manhdisp. I ' Page 1 Updated @ 08:43:44 Tue 04 Nov 1986 

$ page $ < begin File 'Manhdisp. I’ > 

{ Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 
module MANHDISP ; i Subject : Simulation Runtime Displays } 

{ NASA/ JSC/MPAD/TRU : Sam Wilson > 

import 

UTILMATH , 

UTILSPIF , 

UTILVEMQ , 

MANHMISC , 

MANHSPIF , 

MANHBODS . 

MANHFCON , 

MANHSLOG , 

MANHKAMS ; 

export { begin externally visible declarations } 

var 


DIGSHOUTINC : longreal 
PLIDENT : NAMESTR 
SIMPERREAL : longreal 
USING_IMI : boolean 


procedure INITIALIZE.IMI ; 

procedure UPDATE_DI SPLAYS ; 

procedure UPDATE_IMI_DATA ; 

procedure PL AY_BACK_ VISUAL. DATA ; 

implement { begin externally invisible part of module } 

const 

L0C_CG0_R = VECTOR 1 -3.0L0, 0.0L0. 0.0L0 ] ; { ft > 

LOC_OGO_OS = VECTOR [ 1000. 0L0, 0.0L0, 400. 0L0 ] ; { in > 


UNISCALE = 1 L+G 
POSSCALE = 1 L+3 
GEOSCALE - 1L-3 


type 


■C scale factors unit vectors & angles > 

{ scale factors positions other than of earth > 
■C scale factors position of earth > 

{ NOTE: Use of the above scale factors is > 

■C made necessary by an IMI deficiency > 

< that prevents the transmission of > 

< real (or longreal) numbers to the > 

< IMI graphics system via the IEEE-488 > 

-C interface. To get around this prob- > 

f lem, such data are transmitted as > 

i 32-bit binary integers representing > 

< the indicated multiples of the real > 

t values. > 


VALTYPE = < 
ascii , 


{ designation of data type being transmitted to IMI > 

{ char ( 1 byte per value) } 


Y481BFB7B 


1 . 11-1 



File ’ Manhdisp- 1 * Page 2 Updated @ 08:43:44 Tue 04 Nov 1986 

intgr ) ; { integer <4 bytes per value) > 

VALINTARR - array [ VALTYPE ] of integer ; 

var 


BYTESPERVAL 

VALINTARR 


IP0S_X_I 

VECTOR 


L0C_CM_G 

array [ OBJECT ] 

NAME 

array [ OBJECT ] 

NUMBYTES 

integer 


NUMVALS 

integer 


OUTSTRING 

string[40] 


PYR_I_X 

EULPYR 


valk ind 

VALTYPE 


VALTYPEKODE 

VALINTARR 


OUT : record 




of VECTOR ; 
of NAMESTR ; 


case integer of 

1 : ( INT : array E 0 • - 9 ] of integer > 
Z : ( BYTE : packed array M..401 of char ) 
end ; < case & record > 


i 


< procedure INITIALIZE_IMI 

function STREIGHK NAME : NAMESTR ) : NAMESTR 

procedure SHOU_IMI_INITIALIZATION_MESSAGE 
procedure SH0W_1 ST_SET_OF_IMI_INITI ALIZATION_INSTRUCTIONS 
procedure SHOU_ZND_SET_OF_IMI_INITI ALIZATION_INSTRUCTIONS 
procedure PUT_COORDI NATE_TRANSFORMATI 0N_MATRI X_I N_BUFFER 


function 

TOTNUMBYTES( 

vkind 

VALTYPE ; 




NVALS 

integer ) 

: integer 

f unct ion 

FIRST4BYTES( 

vkind 

VALTYPE s 




NVALS 

integer ) 

: integer 


pr ocedur e PUT_SUNPOS_AND_NUMOBJECTS_IN_BUFFER 
procedure PUT_OBJECT_NAMES_IN_BUFFER 
procedure PUT_CM_OFFSETS_IN_BUFFER 


< procedure UPDATE_DI SPLAYS 
f procedure UPDATE_IMI_DATA 

procedure PUT_KAMERA_UPDATE_IN_BUFFER 

procedure PUT_EARTH_UPDATE_I N_il)FFER 

procedure PUT_ORBITER_UPDATE_IN_BUFFER 

procedure PUT_CREWMAN_UPDATE_IN_ BUFFER 

procedure PUT_PAYLOAD_UPDATE_IN_BUFFER 

procedure PUT_UPDATE_IN_BUFFER ( LENSCALE : longreal 5 

KAMDATA : boolean ) 

< procedure PLAY_BACK_VI SI UAL_DATA 
procedure SHOW_PLAYBACK_CONTROL_KEY_MAP 

function USER_WANTS_TO_CONTINUE : boolean 


! EXPORT ; 
sforuard 5 
{forward 5 
sforuard s 
sforuard s 
sforuard 5 

sforuard 5 

sforuard ; 
sforuard 5 
sforuard s 
sforuard s 
s EXPORT 5 
s EXPORT 5 
sforuard s 
sforuard ; 
sforuard ; 
sforuard s 
sforuard ; 

sforuard » 
! EXPORT 5 
sforuard s 
sforuard s 


> 


} 

> 


} 


procedure INITIALIZE_IMI s 
var 


BYPASS : boolean s 
OKAY : boolean 5 


begin 


¥D65DCDFD 


1 . 1 1 - Z 



File ’Manhdisp.I’ Page 3 


Updated @ 08:43:44 Tue 04 Nov 198S 


BYTESPERVALt ascii] 
BYTESPERVALt intgr] 
VALTYPEKODEt ascii] 
VALTYPEKODEt intgrl 


- 4 
= Z 
= 4 


SHOU_IMI_INITI ALIZATION_MESSAGE 

BYPASS := USER_DECIDES_TO( ’Bypass IMI initialization’ ) 
if not BYPASS then 
begin 

SH0W_1 ST_SET_0F_I MI_I NI TI ALI Z ATI 0N_I NSTRUCTI ONS 
repeat 

OKAY := USER_DECIDES( 

’First part of IMI initialization complete’ ) 

until OKAY ; 


with SLOG' 1 [ 0] do 
begin 

NAME! orbiter ] 
NAME! payload] 
NAME! crewman] 

LOC CM Glorbiter] 


STREIGHT( 
STREIGHK 
STREIGHK 
VXD( VDIFt 


’orbiter’ ) 
PL I DENT ) 

' man0’ ) 
LOC_OCM_OS, 


L0C_0G0_0S ), 


STRUCZBODY ) 

VXD( L0C_PCM_PS, STRUCZBODY 
VDIFt ZERVEC , L0C_CG0_R ) 


) 


L0C_CM_GI payload] 

LOC_CM_Gt crewman] 
end ; 

RESET_IMI_BUFFER 

PUT_COORDINATE_TRANSFORMATION_MATRIX_IN_ BUFFER 

PUT_SUNPOS_AND_NUMOBJECTS_I N_BUFFER 

PUT_OBJECT_NAMES_I N_BUFFER 

PUT_CM_OFFSETS_IN_BUFFER 

TRANSFER_BUFFER_CONTENTS_TO_I MI 

SH0W_Z ND_SET_0F_I MI_I NI TI ALI ZATI ON_I NSTRUCTI ONS 

repeat 

OKAY := USER_DECIDES( 

’Second part of IMI initialization complete' 

until OKAY ; 

end ; 


{ "CM"=RO > i 


end ; 


function STREIGHT ( NAME : NAMESTR ) : NAMESTR s 
begin 

while strlenl NAME ) < 8 do NAME := NAME + ’ ’ 
setstrlen( NAME, 8 ) 

STREIGHT := NAME 
end ; 


¥FE7Z 103Z 


1 - 1 1—3 



File ’Manhdisp.I’ Page 4 
$ page $ 


Updated § 08:43:44 Tue 04 Nov 1986 


procedure SHOW_IMI_INITIALIZATION_MESSAGE 5 
type 


L = string£55] 5 

MSGARR = array [ 1..4 ] of L 5 

const 

MSGLINE = MSGARR £ 

< 1 Z 3 4 5 

< 1 Z 345678901 Z 345678901 Z 345678901 Z 345678901 Z 345678901 2345 > 

{ 1} Lt’IMI initialization is required if it has not been done ’], 

< Z > Lt ’ already , or if the Payload nane or the Orbiter center ’1, 

{ 3> Lt’of nass location has been changed since the previous •], 

■C 4> Lt ’ init ial izat ion. *]] ; 

var 

i : integer ; 

begin 

CLEAR_SCREEN 
SHOWLN ( * ’ ) 

for i := 1 to 4 do SHOWLN ( FILL 1 Z+MSGLINEt i 1 ) 

SHOWLN ( •• ) 
end } 


¥B933AF53 


1.11 -A- 



File ’Manhdisp.I’ Page 5 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure SH0W_1 ST_SET_OF_IMI_INITI ALIZATION_INSTRUCTIONS 5 
type 


L = string! 55] ; 

MSGARR = array E 1. . 19 ] of L ; 

const 


MSGLINE * MSGARR E 

{ 12 3 4 5 

{ 1 2 345678901 2 345678901 2 34567890 1 2 345678901 2 34567890 12345} 

{ 1> LC’The first part of the IMI initialization process con- * 1, 

< 2> LE’sists of making the following entries at the IMI repeat'], 

{ 3> LE’IMI terminal (NOT this one). ’], 

{ 4> LE ’ ’] , 

{ 5> LE'I. If you have not already done it, log in to the IMI '], 

{ 6} LE ’ operating system. Otherwise, press the <BREAK> key’], 

{ 7> LE ’ to terminate any IMI program currently running. '], 

{ 8> LE ’ ’] , 

{ 9> LE’2. Enter the following two command lines at the IMI *1, 

< 10> LE’ terminal: ’], 

< 1 1 > LE ’ ’ ] , 

<12> LE ’ > cd /b/milmu ’] , 

{13} LE’ > bldmilmu.cmd ’] , 

{ 14} LE ’ ’] , 

{15} LE’Be careful about spacing in these commands; it is im- '], 
{16} LE’portant. You do not have to type the “>” symbols; they’], 
{17} LE’are prompting characters supplied by the IMI operating ’], 
{18} LE’ system when it is read to accept an input. All command’], 
{19} LE 'lines must be terminated by pressing the <ENTER> key. ']] ; 


var 


i : integer ; 


begin 

CLEAR_SCREEN 
SHOWLN ( ” ) 

for i := 1 to 19 do SHOWLN ( FILL 1 2+MSGLINEE iJ ) 
SHOWLN ( ” ) 
end ; 


Y55B0E3B0 


1 


11-5 



File ’Manhdisp.I’ Page B 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 198B 


procedure SHOU_ZND_SET_OF_IMI_INITIALIZATION_INSTRUCTIONS 5 
type 


L = string[55] 5 

MSGARR = array [ 1..Z1 ] of L 5 

const 


MSGLINE = MSGARR [ 

{ 1 Z 3 4 5 

< 1 Z 34S67890 1 Z 345B7890 1 Z 345B7890 1 Z 345B7890 1 Z 345B7890 1 Z 345 > 

{ 1> Lt 'MANHANDLE has transmitted its initialization data to *], 

< Z> Lt’the IMI, which is nou executing the "bldmilmu" program.’], 

{ 3> Lt'Uhen "bldmilmu" terminates execution, the IMI operating’], 

{ 4> L[ ’system will display ">" on the IMI terminal to signal ’], 

{ 5> Ll’that it is ready for another command. ’], 

{ 6} Lt ’ *] , 

{ 7> Lt’Uhen you see the ">" character, it is time to start the’], 

{ 8> Lt ’second part of the initialization process. This is ’], 

{ 9> Lt’done by entering the command line ’], 

{ 10} LI ’ •] , 

< 1 1 > L t ’ > runmilmu.cmd ’], 

< 1 Z > Lt ’ ’] , 

{13> Lt’at the IMI terminal. This causes execution of the ’], 

<!4> Lt ’ "runmilmu" program which, first of all, fills the IMI ’], 
{151 Lt 'terminal screen with a great many long lines of data ’], 
{16} Lt ’whose meaning is of no concern here. ’], 

{17} Lt ’ ’ ] , 

{18} Lt’The second part of the IMI initialization process is ’], 
{19} Lt 'complete when "runmilmu” stops sending data to the IMI ’], 
{Z0} Lt 'terminal screen (i.e., when the cursor on the IMI ter- ’], 

{ Z 1 } Lt’minal screen becomes stationary). ’]] j 


var 


i : integer ; 


begin 

CLEAR_SCREEN 
SHOULN ( ” ) 

for i := 1 to Z1 do SHOULN ( FILL1 Z+MSGLINEI i] ) 
SHOULN ( ” ) 
end ; 


¥6D1 C0E9C 


1 


11-6 


File ’Manhdisp.I’ Page 7 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure PUT_C00RDI NATE_TRANSF ORMATI 0N_MATRI X_I N_BUFFER i 
var 

i : integer 5 
j : integer j 
k : integer j 

begin 

valkind := INT6R 

NUMVALS := 9 

NUMBYTES := TOTNUMBYTES( valkind, NUMVALS ) 

OUT. INTI 0] := FIRST4BYTES( valkind, NUMVALS ) 

for i := 1 to 3 do 

for j := 1 to 3 do 

OUT . INT[ 3*( i- 1 )+j ] := round( UNISCALE*IDN3X3[ i , j ] ) 

{ IDN3X3 = 3x3 identity Matrix (see UTILVEMQ nodule). > 


{ Nornally, the Mean_of_1 950.0 to Mean_of_date > 

< coordinate transformation matrix would be sent > 

< to assure correct mapping of stars into camera } 

{ images, but star positions are irrelevant in this > 

{ simulation. } 


setstrlen< OUTSTRING, NUMBYTES ) 

for k := 1 to NUMBYTES do OUTSTRINGIkl := OUT. BYTE! k 1 
ADD_STRI NG_T 0_I MI_BUFFER ( OUTSTRING ) 
end ; 


function TOTNUMBYTES( vkind : VALTYPE ; NVALS : integer ) : integer ; 
begin 

TOTNUMBYTES := 4 + NVALS * BYTESPERVALt vk indl 
end 5 


function FIRST4BYTES( vkind : VALTYPE ; NVALS : integer ) : integer : 


var 


FIRSTZBYTES : 0. .65535 ; { number of bytes following these two > 


begin 

FIRSTZBYTES 

FIRST4BYTES 


end ; 


TOTNUMBYTES( vkind, NVALS > - 
65536 * FIRSTZBYTES + 

Z56 * VALTYPEKODEI vkind! + 
NVALS 


{ bytes 1 & Z > 

{ byte 3 > 

{ byte 4 } j 


¥05BD6Z 1 D 


1.11 —"7 


File ’Manhdisp.I’ Page 8 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure PUT_SUNPOS_AND_NUMOBJECTS_IN_BUFFER ; 


var 


i : integer 
k : integer 
SUNPOS : VECTOR 


begin 
SUNPOS! 1] 

a: 

-sqrt( TWO ) 

/ TWO 

SUNPOS! 23 

er 

ZERO 


SUNPOS! 31 

= 

SUNPOS! 1 1 


valk ind 

i= 

INTGR 


NUMVALS 

= 

4 


NUMBYTES 


TOTNUMBYTES( 

valkind 

OUT. INTI 03 

ZG 

FIRST4BYTES( 

valkind 

for i 1 to 

3 do 



< form unit vector defining dummy 
{ direction to sun that mill keep 
{ it (the sun) out of sight 


NUMVALS ) 
NUMVALS ) 


OUT. INTI i] := round( UNISCALE*SUNPOS! i] ) 

OUT. INTI 4] := NUMOBJECTS 
setstrlen( OUTSTRING, NUMBYTES ) 

for k :*= 1 to NUMBYTES do OUTSTRING! kl := OUT. BYTE! kl 
ADD_S TR I NG_T 0_IMI_BUFFER ( OUTSTRING ) 
end ; 


> i 

> ; 

> ! 


procedure PUT_OBJECT_NAMES__IN_BUFFER ; 


var 

k : integer j 
obj : OBJECT ; 


begin 
valk ind 
NUMVALS 
NUMBYTES 
OUT. INTI 0] 
setstrlen( 
for k := 1 


:= ASCII 
:= 8 

:= TOTNUMBYTESI valkind, NUMVALS ) 
:= FIRST4BYTES( valkind, NUMVALS ) 
OUTSTRING, NUMBYTES > 
to 4 do OUTSTRING! kl := OUT. BYTE! k) 


for obj := orbiter to crewman do 
begin 

for k := 1 to 8 do OUTSTRING! k +4] := NAME I obj ,kl 
ADD_STRING_TO_IMI_BUFFER ( OUTSTRING ) 


end i 


end ; 


¥6501 CFF 1 


1 . 1 1-8 


File ’Manhdisp.I’ Page 9 
$ page * 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure PUT_CM_OFFSETS_IN_BUFFER 5 


var 

i : integer j 
k : integer ; 
obj : OBJECT ; 

begin 

valkind := INTGR 
NUMVALS := 3 

NUMBYTES := TOTNUMBYTES( valkind, NUMVALS ) 

OUT. INTE01 := FIRST4BYTES( valkind, NUMVALS ) 
setstrlen( 0UTSTRIN6, NUMBYTES ) 
for k := 1 to 4 do OUTSTRINGtkl := OUT. BYTE! kl 
for obj := orbiter to creuman do 
begin 

for i := I to 3 do 

OUT . INTI il := round( POSSCALE*LOC_CM_G[ obj , il ) 
for k := 5 to NUMBYTES do OUTSTRINGtkl := OUT. BYTE t k 1 
ADD_STRING_TO_IMI_BUFFER ( OUTSTRING ) 
end ; 

end ; 


YB05E5B9E 


1 


11-3 



File ’Manhdisp.I’ Page 10 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 198G 


procedure UPDATE_DI SPLAYS ; 
var 


i : integer s 
K : integer ; 
STR : LINESTR ; 


begin 

UPDATE_IMI_OATA 

for i := 1 to 3 do M0VE_UP { move cursor up 3 

with 5L0G A [ curslogrecJ do 
begin 

setstrlen ( STR, 0 > 

strurite ( STR, 1 ,K Time = ’ , TIME : 8: 3 , ' sec ’ ) 
strurite ( STR.K ,K , ’Control mode: ’ ) 

strurite ( STR.K ,K Desired = ’ .CNTRLPACt desmode] ,’ ’ ) 
strurite ( STR.K ,K Current = CNTRLPACt curmode] , ’ ’ ) 
SHOWLN ( STR ) 

SHOWLN ( ” > 
setstrlen ( STR, 0 ) 
if curmode = FREE 

then 

strurite < STR.I.K.’PL Wobble Cone = 

DEGPERRAD*WOBBLE_CONE_P:G:Z, ’ deg’ 

’ Clok = * , 

DEGPERRAD*U0BBLE_CL0K_P:8:Z , ’ deg’ 

’ RMS Flex Force = ’ , 
FLEXF0RCMAG:G:3,’ lb’ 


el se 
begin 

strurite ( STR , 1 ,K ,’ Control :PB ’ ) 

for i := 1 to 3 do strurite ( STR.K ,K ,CTORQ_PH_PBt il : 9 
strurite ( STR.K.K,’ Torq * ) 

for i := I to 3 do strurite ( STR.K ,K ,CFORC_PH_PB[ i] : 9 
strurite ( STR.K.K,’ Force’ ) 
end ; 

SHOWLN ( STR ) 
end ; 

end ; 


lines } ; 


> 

: 2 ) 
: 3 ) 


¥Z7E 1 CBC 1 


1 


11-10 


File ’Manhdisp.I’ Page II 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure UPDATE_IMI_DATA ; 


begin 

if USIN6_IMI then 
begin 

RESET_IMI_BUFFER 
PUT_KAMERA_UPDATE_IN_BUFFER 
PUT_EARTH_UPDATE_IN_BUFFER 
PUT.ORBI TER_UPDATE_IN_BUFFER 
PUT_PAYLOAD_UPDATE_I N_BUFFER 
PUT_CREWMAN_UPDATE_IN_BUFFER 
TRANSFER_BUFFER_CONTENTS_TO_IMI 
end ; 

end ; 


procedure PUT_KAMERA_UPDATE_I N_BUFFER ; 
var 


QUAT_I_0B : QUATERNION ; 


begin 

current_kamera := DESIRED_KAMERA 

if ( current_kamera = PAW ) or ( current_kamera = SAW ) 


then 

begin 

uith KAMINFOt current^aMera] , SL0G A t curslogrecl do 
begin 

QUAT_I_0B := PYRQ( PYR_I_0B ) 

IP0S_X_I := VSUM( IPOS_OCM_I , IROT< L0C_K0_0B, QUAT_I_0B ) ) 
PYR_I_X := QPYR( QXQ< QUAT_I_OB, QUAT_OB_K ) ) 
end ; 

end 


else 

begin 

uith KAMINFOt current_kaneral do 
begin 

IP0S_X_I := L0C_K0_I 
PYR_I_X := QPYR( QUAT_I_K ) 
end ? 

end ; 

PUT_UPDATE_IN_BUFFER ( POSSCALE, true ) 
end 5 


procedure PUT_EARTH_UPDATE_IN_BUFFER { 
begin 

IP0S_X_I := SXV( 1000000, IPOS_X_I ) { put earth behind camera, > ; 
PUT_UPDATE_IN_BUFFER ( GEOSCALE, false ) i uhere it can’t be seen > ; 
end ; 


Y6B6CC6EC 


1 . 11-11 


File ’ Manhdisp. I ’ Page 1Z 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure PUT_ORBITER_UPDATE_IN_BUFFER ; 
begin 

with SLOG* t curslogrec] do 
begin 

IP0S_X_I := IP0S_0CM_I 
PYR_I_X := PYR_I_0B 
end s 

PUT_UPDATE_IN_BUFFER ( POSSCALE, false ) 
end ; 

procedure PUT_P AYLOAD_UPDATE_I N_BUFFER ; 
begin 

with SLOG* [ curslogrec] do 
begin 

IP0S_X_I := IP0S_PCM_I 
PYR_I_X := PYR_I_PB 
end ; 

PUT_UPOATE_I N_BUFFER ( POSSCALE, false > 
end ; 


procedure PUT_CREWMAN_UPDATE_IN_BUFFER ; 
begin 

with SLOG A [ curslogrec] do 
begin 

IP0S_X_I := IP0S_R0_I 
PYR_I_X := PYR_I_R 
end j 

PUT_UPDATE_IN_BUFFER ( POSSCALE, false ) 
end ; 


¥C9C960E9 


1 


11-12 


File ’ Manhdisp. 1 1 Page 13 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure PUT_UPDATE_I N_BUFFER ( LENSCALE : longreal ; KAMDATA : boolean ) ; 
var 


i : integer i 
k : integer j 


begin 

valkind := INT6R 
if KAMDATA 

then NUMVALS := 7 
else NUMVALS := 6 

NUMBYTES := TOTNUMBYTES! valkind, NUMVALS ) 

OUT. INTC0] := FIRST4BYTES( valkind, NUMVALS ) 
for i := 1 to 3 do 

OUT. INTI i] := round( LENSCALE*IPOS_X_II il ) 
for i := 4 to 6 do 

OUT. I NT [ il := round( UNISCALE*PYR_I_Xt i-31 ) 
if KAMDATA then 

OUT. INTI 71 := round! UNISCALE*KAMINFOI current_kamera] . HORFOV ) 
setstrlen ( 0UTSTRIN6, NUMBYTES ) 

for k := 1 to NUMBYTES do OUTSTRINGIkl := OUT. BYTE! k] 
ADD_STRING_TO_IMI_BUFFER ( OUTSTRING ) 
end > 


¥ 1 D01 AD2 1 


1 


11-13 


File 'Manhdisp.I' Page 14 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 198G 


procedure PLAY_BACK_VISUAL_DATA ; 


var 


BASETICK 
DIGSHOUTIME 
k an 

LASTREC 

TICKSPERSIMSEC 

TICK 

TOCK 


integer 

longreal 

KAMERA 

integer 

longreal 

integer 

integer 


begin 

SIMPERREAL := FIXED_INPUT< 'Sim/real tine ratio: ' , SIMPERREAL, 7, 4 ) ; 
DIGSHOUTINC := FIXED_INPUT( 'Digital display update interval (sec)', 

DIGSHOUTINC ,7, 3 ) , 
DIGSHOUTIME := DIGSHOUTINC ; 
TICKSPERSIMSEC := TICKSPERSEC / SIMPERREAL 

SET_UP_KAMERA_DATA , 
SUPPRESS_CURSOR , 
SHOW_PLAYBACK_CONTROL_KEY_MAP , 
LASTREC := SLOG" [ 01 . NUMSLOGRECS ; 
curslogrec := 1 ; 
UPDATE_DI SPLAYS , 


YEB8F6A6F 


1 


11-14 


File ’ Manhdisp.I’ Page 15 Updated @ 08:43:44 Tue 04 Nov 1986 

$ page $ 

BASETICK := CLOCKTICK + 100 5 

while USER_WANTS_TQ_CONTINUE and ( curslogrec<LASTREC ) do 
begin 

curslogrec := curslogrec + 1 5 

SIMTIME := SLOG" [ curslogrec] . TIME ! 

TOCK := round( TICKSPERSIMSEC * SIMTIME ) + BASETICK ; 

repeat 

TICK := CLOCKTICK ; 

until TICK >= TOCK j 

if curslogrec = LASTREC 

then 

UPDATE_DI SPLAYS 
el se 

if TICK < < TOCK + Z0 ) then 
if DIGSHOUTINC = ZERO 
then 

UPDATE_I MI_DAT A { only > 

else 

if SIMTIME < DIGSHOWTIME 
then 

UPDATE_IMI_DATA { only > 

else 

begin 

UPDATE_DI SPLAYS 
DIGSHOUTIME := DIGSHOUTINC * 

( 1+trunc(SIMTIME/DIGSH0WTINC)) ; 

end ; 

end ; 

LOITER ( 2000 ) 5 

REST0RE_CURS0R ; 

end ; 


¥7C0D2DAD 


1 


11-15 


File ’Manhdisp.I’ Page 16 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


procedure SHOW_PLAYBACK_CONTROL_KEY_MAP ; 


type 


L = stringI55I ! 

MSGARR = array I 1 . . 1 3 ] of L 5 


const 


MSGLINE = 

MSGARR 

I 





{ 


1 2 

3 

4 5 



{123456789012 34567890 1 2 345678901 2 34567890 1 Z 34567890 1 

Z345} 

{ 1> 

LI ’ 


PLAYBACK 

CONTROLS 


' I , 

{ Z> 

LI ' 





’1 , 

{ 3> 

LI • 


Desired 


Desired 


{ 4> 

LI ’ 

Key 

Canera Loc 

Key 

Action 


{ 5> 

LI ’ 






{ 6> 

LI ’ 

a 

ahead 

q 

Stop playback 


{ 71 

LI • 

b 

behind 




{ 8 > 

LI • 

1 

left 




{ 9 > 

LI ’ 

r 

right 




{10} 

LI ' 

0 

over 



’1, 

till 

LI ’ 

u 

under 




{12} 

LI ’ 

P 

port aft window 



’j , 

{13} 

LI ' 

s 

stbd aft window 



’ll 


var 


i : integer ; 


begin 

CLEAR_SCREEN 

for i :■ I to 6 do SHOWLN ( ’’ ) { leave roon for runtime data > 

for i := 1 to 13 do SHOWLN ( FILL 1 Z+MSGLINEIil ) 

SHOWLN < ” ) 

for i := 1 to 16 do MOVE_UP { position cursor at top of screen > 

end ; 


a. 


¥2C45F4E5 


1 . 1 1 — i e 


File ’Manhdisp. I' Page 17 
$ page $ 


Updated @ 08:43:44 Tue 04 Nov 1986 


function USER_UANTS_TO_CONTINUE : boolean 5 


var 

CHINPUT : CHINPUTREC ; 

begin 

USER_UANTS_TO_CONTINUE := true 
repeat 

CHINPUT := CHAR_INPUT< NOCHUAIT, NOCHECHO ) 
if CHINPUT. Q = SOMETHING then 
case CHINPUT. C of 

’a 1 : DESIRED_KAMERA := AHEAD 

’b’: DESIRED_KAMERA := BEHIND 

’l*: DESIRED_KAMERA := LEFT 

’o’: DESIRED_KAMERA := OVER 

’p’: DESIRED_KAMERA := PAU 

’q’: USER_UANTS_TO_CONTINUE := false 

V: DESIRED_KAMERA :=« RIGHT 

’s’: DESIRED_KAMERA := SAU 

’u’: DESIRED_KAMERA :=■ UNDER 

otherwise SOUND_ALERT 
end ; { case KBDCHAR > 

until CHINPUT. Q = NOTHING 

end ; 


end 




nodule MANHDISP & File ’Manhdisp. I’ > 


¥ 1 EC847C8 


1.11 — 17 


Simulation Control 


1 - 1 Z - x 


File ’Manhscon. I’ Page 1 
$ page $ { begin File 'Manhscon. I’ > 


Updated @ ZZ:Z8:S4 Mon Z9 Sep 1986 


< Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 
module MANHSCON 5 f Subject : Simulation Control > 

{ NASA/ JSC/MPAD/TRW : Sam Wilson } 

import 

UTILMATH . 

UTILSPIF . 

UTILVEMQ . 

MANHMISC , 

MANHBODS . 

MANHFCON , 

MANHSLOG , 

MANHKAMS , 

MANHDISP i 

export 

var 

CURTINC : longreal 
DESTINC : longreal ? 

NOMSTEP : longreal 5 
OLDSTEP : longreal ; 

procedure PROPAGATE_SYSTEM_STATE 5 

implement { begin externally invisible part of module > 


{ begin externally visible declarations > 


{ current value of time increment } 

f desired time increment (stipplied by user) > 

< nominal size of integration step } 

< size of last step taken > 


const 


TINCTOL 


1 . 0L-6 


{ tolerance on desired time increment > 


function ANQTHER_STEP_IS_NEEDED : boolean ; forward 
procedure SHOW_RUNTIME_CONTROL_KEY_MAP ; forward 
procedure ADVANCE_ONE_RKZ_STEP ; forward 
procedure COMPUTE_DERIVATI VES 5 forward 


YZ8F8B7F8 


1 . 1 Z- 1 


File ’ Manhscon.I’ Page Z 
$ page $ 


Updated @ ZZ:Z8:S4 Mon Z9 Sep 1986 


procedure PROPAGATE.SYSTEM.STATE 5 


begin 

uriteln ( LP, ’ Tine’ : 8 , ’ Stepsize’ : 1 Z ) ! 

uriteln ( LP ) ; 

OLDSTEP := ZERO 5 

PRTSL06REC : = curslogrec 5 

CURTINC := ZERO ! 

SHOU.RUNTIME_CONTROL_KEY.MAP 5 

SUPPRESS_CURSQR t 

UPDATE.DI SPLAYS 

while ANOTHER.STEP.IS.NEEDED do 

ADVANCE.ONE_RKZ.STEP ; 

LOITER ( Z000 ) ; 

RESTGRE_CURSOR 
end 5 


function ANOTHER.STEP.I S_NEEDED : boolean 5 


var 


CHINPUT : CHINPUTREC ; 


begin 

if < (CURTINC+TINCTOL) >= DESTINC ) or ( ( curslogrec+Z > > MAXSLOGRECS ) 
then ANOTHER.STEP.IS.NEEDED := false 
else ANOTHER.STEP.I S_NEEDED := true 
repeat 

CHINPUT := CHAR_INPUT( NOCHUAIT, NOCHECHO ) ; 
if CHINPUT. Q = SOMETHING then 
case CHINPUT. C of 


’*• 

NOMSTEP := NOMSTEP * TWO ; 


NOMSTEP := NOMSTEP / TWO 5 

’A’ 

desired_node 

- ALIGN 

’C’ 

desired_mode 

- CAPTURE 

’D’ 

desired_mode 

= DESPIN 

•F* 

desired_mode 

- FREE 

’H’ 

desired_node 

= HOLD 

,p, 

desired_node 

= PITCH 

’R’ 

desired_node 

- ROLL 

’S’ 

desired_mode 

- SPINUP 

’Y* 

desired_node 

= YAW 

’a' 

DESIRED_KAMERA := AHEAD 

’b’ 

DESIRED.KAMERA :» BEHIND 

•l* 

DESIRED.KAMERA := LEFT 

’o’ 

DESIRED_KAMERA := OVER 

’p’ 

DESIRED_KAMERA :» PAW ! 

V 

ANOTHER.STEP.I S_NEEDED := false i 

V 

DESIRED.KAMERA := RIGHT } 

’s’ 

DESIRED.KAMERA :* SAW 5 

’u* 

DESIRED.KAMERA :* UNDER j 


otherwise SOUND.ALERT 5 

end 5 I case KBDCHAR } 

until CHINPUT. Q - NOTHING ? 

end ; 


Y07BZD1FZ 


1 - 1 2- Z 



File ’Manhscon.I’ Page 3 
$ page $ 


Updated @ 22:28:54 Mon 23 Sep 1986 


procedure SHOU_RUNTIME_CONTROL_KEY_MAP 5 
type 


L = string[553 5 

MSGARR ■ array [ 1..I4 ] of L ; 


const 


MSGLINE = MSGARR I 

< 12 3 4 5 

< 1 2 345678901 2 34567890 1 2 345678901 2 34567890 1 2 34567890 12345} 


< 1 > LC ’ 


RUNTIME CONTROLS 


1 2> LC • 




•] , 

< 3> L[ * 

Desired 


Desired 

Desired ’ ] , 

< 4> LI ’Key 

Cntrl Mode 

Key 

Camera Loc Key 

Action ' I , 

< 5> LC’ 




•I. 

< 6> LC ’ F 

FREE 

a 

ahead q 

Stop sin ' 1 , 

< 7} LI’ A 

ALIGN 

b 

behind * 

Dble step’ ] , 

< 8> LI’ D 

DESPIN 

1 

left / 

Halve step’ ) , 

< 9} LC’ C 

CAPTURE 

r 

right 

’1, 

<10} LI ’ H 

HOLD 

0 

over 


< 1 1 } LI ’ R 

ROLL 

u 

under 


<12} LC ’ Y 

YAU 

n 

r* 

port aft window 

• 1 , 

<13} LI* P 

PITCH 

5 

stbd aft window 

’j! 

<14} LI ’ S 

SPINUP 



*n 

var 





i : integer 

i 




begin 

CLEAR_SCREEN 
for i := 1 to 6 

do SHOULN ( 

” ) 

{ leave room for 

runtine data } 

for i := 1 to 14 

do SHOULN < 

FILL 1 2+MSGLINEl il ) 


SHOULN < ” ) 
for i := 1 to 17 
end ; 

do MOVEJJP 


position cursor at 

top of screen } 


5 

5 


\ 


¥881 B3B7B 


1 - 12-3 


File ’Manhscon.I’ Page 4 
$ page $ 


Updated @ 22:28:54 Mon 29 Sep 198G 


procedure ADVANCE_0NE_RK2_STEP 5 
var 


ANCHOR : array [OBJECT] of STATEREC 5 
body : OBJECT 5 
HAFSTEP : longreal 5 
i : integer ; 

NUMVARS : integer ; 

PASSNUM : integer ; 

STEP : longreal ; 


begin 

if ( CURTINC + 1.1L0 * NOMSTEP ) < DESTINC 
then STEP := NOMSTEP 
else STEP :=• DESTINC - CURTINC 
if abs( STEP-OLDSTEP ) > 0.0005L0 then 

uriteln ( LP, SIMTIME: 8 : 3, STEP : 1 2 : 3 ) 
OLDSTEP := STEP 
HAFSTEP := STEP / TWO 
for PASSNUM := I to 2 do 
begin 

COMPUTE_DERI VATI VES 
for body • E orbiter tc crcunun do 
begin 

if body = crewman 

then NUMVARS := B 
else NUMVARS : = STATESIZE 
if PASSNUM = 1 


then 

begin 

ANCHORl body] : = STATE [body] 
for i := 1 to NUMVARS do 

STATE [ body] .ARR[ i] :=■ ANCHORl body ] .ARR[ i] + 
HAFSTEP * DERI VI body]. ARRtil 

end 


else 

for i := 1 to NUMVARS do 

STATE [ body] .ARR[ i] := ANCHORl body 1 .ARR[ i] + 
STEP * DERIVE body] .ARRIi] 


if body <> crewman then 
uith STATE! body] do 

QUAT_I_B := UNIQUAT( QUAT_I_B ) 

end ; 


CURTINC := CURTINC + HAFSTEP 
SIMTIME :» SIMTIME + HAFSTEP 
ST0RE_S I MUL ATI 0N_L QG_RE C ORD 
UPDATE_DI SPLAYS 
end ; 

end j 


¥BC0B8D6B 


1 . 1 Z-4 


File ’Manhscon.I’ Page 5 
* page $ 

procedure COMPUTE_DERI VATI VES ; 
var 


body 

EFFTORQ 

AN6M0_body_B 

MOMENT 

0 


OBJECT 

VECTOR 

VECTOR 

VECTOR 

QUATERNION 


Updated @ ZZ:Z8:54 Mon Z9 Sep 1986 


{ ft*lb, "effective" torque about CM > 
{ ft»lb, moment of CFQRC_H_B about CM > 


begin 

COMPUTE_FLIGHT_CONTROL_FORCE_AND_TORQUE 
for body :■ orbiter to payload do 

uith DERIVI body] , STATEIbody], INFOIbody] do 
begin 

F0RC_CM_I := VXMT! CFORC_H_B, VBASE_I_B ) 
if body = orbiter 

then MOMENT := CRSP( 0BP0S_H_0B, CFORC_H_B ) 
else MOMENT := CRSP( LOC H PB. CFORC H B ) 

TORQ_CM_B : = 

IP0SD0T_CM_I := 

I VELDOT_CM_I := 

Q.S : = 

Q.V : = 

QUATDOT_I_B 
ANGMO_body_B :=■ 

EFFTORQ := 

IRATEDOT_B_B 
end ; 

uith DERIVI creumanl , STATE! crewman] , INFO! crewman] , SLOG* ! curslogrecl do 
begin 

F0RC_CRQ_R := VDIF< VXM< INFO! orbiter! .CFORC_H_B, VBASE_0B_R ), 

VSUM( VXM( FLEX_R0_R , TSPRG_CRO_R ), 

VXM( 0BVEL_R0_R, TDAMP_CRO_R ) ) ) 

0BP0SD0T_R0_R :■* 0BVEL_R0_R 

OBVELDOT_RO_R := VXM( F0RC_CR0_R, TALAC_CR0_R ) 
end ; 

end ; 


VSUM( CT0RQ_H_B, MOMENT ) 

I VEL_CM_I 

SXV( ONE/MASS, F0RC_CM_I ) 

0 

SXV< 0=5, I RATF_R_R ) 

QXQ( QUAT_I_B, Q ) 

VXM( I RATE_B_B , RNERT_CM_B ) 

VDIF( TORQ_CM_B, 

CRSP( I RATE_B_B , ANGMO_body_B ) ) 
VXM( EFFTORQ, RALAC_CM_B ) 


end ; -C module MANHSCON & File ’Manhscon.I* > 


¥9EGC93EC 


1 


1 2 — S 




1 . 1 3- x 


File ’ Manhprnt . I * Page 1 Updated @ ZZ : 29: 15 Mon 29 Sep 1986 

$ page $ { begin File ’Manhprnt. I* > 

f Payload Manhandling Simulator for HP-9000 Series 200/300/500 Computers } 
module MANHPRNT ; { Subject : Printed Output Data } 

{ NASA/ JSC/MPAD/TRU : Sam Wilson > 

import 

UTILMATH . 

UTILSPIF , 

UTILVEMQ , 

MANHMISC , 

MANHBODS , 

MANHFCON , 

MANHSLOG 5 


export < begin externally visible declarations > 

procedure DOCUMENT_THE._STATE_OF_THE_SYSTEM ; 
implement { begin externally invisible part of module > 

var 


ANGM0_P_I 

VECTOR 

ANGM0_P_PB 

VECTOR 

IP0S_0CM_I 

VECTOR 

IP0S„PCM_I 

VECTOR 

I RATE_OB_OB 

VECTOR 

IRATE_PB_PB 

VECTOR 

IVEL_OCM_I 

VECTOR 

IVEL_PCM_I 

VECTOR 

K 

integer 

0BP0S_PCM_0B 

VECTOR 

OBRATE_PB_PB 

VECTOR 

OBVEL_PCM._OB 

VECTOR 

QUAT_I_0B 

QUATERNION 

QUAT_I_PB 

QUATERNION 

STR 

LINESTR 

VBASE_I_0B 

MAT3X3 

VBASE_I_PB 

MAT3X3 


procedure PRINT_RMS_FLEXURE_AND_PAYLOAD_FLIGHT_CONTROL_LOG 5 forward; 
procedure PRINT_TIME_AND_CONTROL_MODE_AND_PAYLOAD_UOBBLE ; forward; 
procedure PRINT_PAYLOAD_CONTROL_FORCE_AND_TORQUE ; forward; 
procedure PRINT_PAYLOAD_CONTROL_STATE ; forward; 
procedure PRINT_PAYL0AD_STATE_WRT_0RBITERJ30DY_AXES ; forward; 
procedure PRI NT_PAYLOAD_ST ATE_WRT_I NERTI AL_AXES ; forward; 
procedure PRI NT_0RBI TER_ST ATE_URT_I NERTI AL_AXES ; forward; 


¥42188118 


1 . 1 3- 1 



File ' Manhprnt.I’ Page Z 
$ page $ 


Updated @ ZZ:Z9:1S Mon Z9 Sep 198B 


procedure DQCUMENT_THE_STATE_OF_THE_SYSTEM 5 
begin 

COMPUTE_FLIGHT_CQNTROL_FORCE_AND_TORQUE , 

VBASE_I_0B := INFO! orbiter] . VBASE_I_B , 

QUAT_I_QB := STATE! orbiter] . QUAT_I_B ! 

IPOS_OCM_I := STATE! orbiter] . IP0S_CM_I ; 

I VEL_QCM_I := STATE! orbiter ]. I VEL_CM_I ; 

IRATE_0B_0B :*■ STATE! orbiter] . IRATE_B_B ; 

VBASE_I_PB := INFO! payload] . VBASE_I_B i 

QUAT_I_PB := STATE! payload] . QUAT_I_B , 

IP 0 S_PCM_I :=> STATE! payload]. IPQS_CM__I 5 

IVEL_PCM_I := STATE! payload]. I VEL_CM_ I 5 

I RATE_PB_PB :=■ STATE! payload] . IRATE_B_B ; 

ANGM0_P_PB := VXM< IRATE_PB_PB, RNERT_PCM_PB ) ; 

ANGM0_P_I := VXMT< ANGMO_P_PB . VBASE_I_PB ) j 

0BP0S_PCM_0B VXM< VDIF( IP0S_PCM_I, IPOS_OCM_I ). VBASE_I_0B ) ; 

OBVEL_PCM_OB := VDIF( VXM( VDIF< IVEL_PCM_I, IVEL_OCM_I ), VBASE_I_OB ). 

CRSP( IRATE_0B_0B, OBPOS_PCM_OB ) ) 5 

OBRATE_PB_PB := VDIF( IRATE_PB_PB , VXM< I RATE_OB_OB , VBASE_OB_PB ) ) 5 

if curslogrec > PRTSLOGREC then 

if USER_DECIDES_TO( ’Print RMS flexure & PL fit control log’ ) then 
PRINT_RMS_FLEXURE_AND_PAYLOAD_FLIGHT_CONTROL_LOG ; 

CLEAR_SCREEN ; 

PRINT_TIME_AND_CONTROL_MODE_AND_PAYLOAD_UOBBLE ; 

PRINT_PAYLOAD_CONTROL_FORCE_AND_TORQUE ; 

PRINT_PAYLOAD_CONTROL_STATE , 

PRINT_PAYLOAD_STATE_WRT_ORBITER_BODY_AXES 5 

PRI NT_PAYLOAD_ST ATE_ WRT_ I NERTI AL_ AXES ; 

PRI NT_ORBI TER_ST ATE_WRT_I NERTI AL_AXES ; 

end; 


YG1D14BF 1 


1 . 1 3-Z 


File ’ Manhprnt.I' Page 3 
$ page $ 


Updated @ ZZ:Z9:15 Mon Z9 Sep 1986 


procedure PRINT_RMS_FLEXURE_AND_PAYLQAD_FLIGHT_CONTROL_LOG j 


var 


ENDSLOGREC 

HEADERA 

HEADERB 

i 

n 


integer ; 
LINESTR j 
LINESTR ; 
integer ? 
integer 5 


begin 

setstrlen ( HEADERA, 0 ) 


setstrlen 

( HEADERB, 0 

) 


strurite 

< 

HEADERA, 1 ,K, 

’Tine’ 

7, 

strurite 

< 

HEADERA.K ,K , 

’ DesMode’ 

9, 

strurite 

< 

HEADERA.K ,K , 

* T_PBx ’ 

8 , 

strurite 

< 

HEADERA.K ,K , 

' F_PBx ’ 

8 , 

strurite 

< 

HEADERB, 1 ,K, 

* < sec) * 

7, 

strur ite 

< 

HEADERB.K ,K , 

1 * 

9, 

strurite 

< 

HEADERB, K ,K , 

’ ( ft*lb> ’ 

8 , 

strur ite 

< 

HEADERB.K ,K , 

’(lb)’ 

8 . 


START_NEU_PAGE 
uriteln ( LP, HEADERA ) 
uriteln ( LP, HEADERB ) 
uriteln ( LP ) 
n := PRTSLOGREC 

ENDSLOGREC := IMIN< curslogrec, n+18 


’ zFlex ’ 

:7 ) 




Cur Mode’ 

8 ) 




' TJPBy ’ 

= 8, 

’ T_PBz ’ : 8 

) 


’ F_PBy * 

: 8, 

’ F_PBz ’ : 8 

) 


’(in)’ 

:7 ) 




1 1 

: 8 ) 




< ft*lb) ' 

: 8, 

’ ( f t*lb) ' : 8 

) 


’(lb)’ 

: 8, 

’ < lb> ' :8 

) 

? 


¥ 3340SB40 


1 


1 3- 3 


File ’ Manhprnt . I ’ Page 4 Updated @ 22:29:15 Mon Z9 Sep 1986 

$ page $ 

uhile n <*= curslogrec do 
begin 

CLEAR_SCREEN , 

SHOULN ( HEADERA ) ! 

SHOULN < HEADERB ) ; 

SHOULN < ” ) j 

uhile n O ENDSLOGREC do 
begin 

setstrlen ( STR, 0 > 5 

with SLOG* [ nl do 
begin 

strurite ( STR, 1 ,K ,TIME:7: 3,( 1Z»FLEX_R0_R[ 3] ) :7:Z , • ’ ) j 

strurite ( STR,K ,K .CNTRLPACIdesnode) .CNTRLPACt curnode] ) 5 

if curnode = FREE 

then 

strurite ( STR.K.K,’ Wobble Cone «' , 

< DEGPERRAD*WOBBLE_CONE_P ) : 8 : Z , 

’ , Clok »’ , 

( 0E6PERRAD*U0BBLE_CL0K_P ) : 8 : Z , 

* < deg ) ' ) 

else 

begin 

for i := 1 to 3 do 

strurite ( STR.K ,K ,CTORW_PH_PB[ i ] : 8 : Z ) ; 

for i := 1 to 3 do 

strurite < STR.K ,K ,CFORC_PH_PB[ i ] : 8 : Z ) ; 

end ; 


end ; 

SHOWLN ( STR ) j 

uriteln ( LP, STR ) » 

n : = n + 1 ; 

end ; 
repeat 

< nothing > 

until USER_DECIDES_TO( ’Proceed’ ) ; 

ENDSLOGREC := IMIN< curslogrec, n+17 ) ; 

end ; 

end ; 


¥B64BCFZB 


1 


1 3-4 


File ’ Manhprnt . 1 1 Page 5 
$ page $ 


Updated @ ZZ:ZS:1S Mon ZS Sep 1986 


procedure PRINT_TIME_AND_CONTROL_MODE_AND_PAYLOAO_WOBBLE j 
var 

NOMSPINRATEdeg_P : longreal 5 
NORMANGMO : longreal s 
W0BBLE_C L OK deg_P : longreal ; 

UOBBLE_CONEdeg_P : longreal ; 

begin 

NORMANGMO := sqrt( sqr< ANGMO_P_PBt Z 1 ) + sqr( ANGMO_P_PBI 31 ) ) ; 
WQBBLE_CONEdeg_P DEGPERRAD * ATANZ( NORMANGMO , ANGMO_P_PB[ 1 ] ) ; 
WOBBLE_CLOKdeg_P DEGPERRAD * ATANZ( ANGMO_P_PB[ Z 1 , -ANGMO_P_PBC 31 ) j 
NOMSPINRATEdeg_P := DEGPERRAD * ( ANGM0_P_PBC11 / RNERT_PCM_PBM.il ) ; 

SHOULN < " ) ; 
if curslogrec > 1 then START_NEW_PAGE ; 
uriteln ( LP ) ; 

setstrlen < STR, <5 ) j 
etrurite ( STR, 1 ,K Tine = ’ .SIMTIME: 8: 3 ) j 
strurite ( STR.K ,K , ’DesMode ■ ’ : Z0, CNTRLPACI desired_nodel ) ; 
etrurite ( STR.K ,K , ’ CurMode ■» ’ : 17, CNTRLPACI current_nodel ) 1 
SHOULN ( STR ) ? 
uriteln < LP, STR ) ? 

setstrlen ( STR, 0 ) ; 
strurite < STR.I.K.'PL Nonspin = * ,N0MSPINRATEdeg_P:6:Z ) i 
strurite ( STR.K ,K , 1 Wobble Cone = • :Z0,WOBBLE_CONEdeg_P:6:Z ) ; 
strurite < STR.K ,K ,’ Wobble Clok = • s 1 9 ,W0BBLE_CL0Kdeg_P:7: Z ) ; 
SHOWLN ( STR ) ; 
uriteln ( LP, STR ) 5 

SHOWLN ( ” ) 5 
uriteln ( LP ) ; 
end ; 


Y6FZ80AZ8 


1 _ 1 3-5 


File ’Manhprnt.I’ Page 6 
$ page $ 


Updated 0 ZZ: 29 : 15 Mon 29 Sep 198G 


procedure PRINT_PAYLOAD_CONTROL_FORCE_AND_TQRQUE 5 
var 

CFORC_PH_PB : VECTOR ; 

CFORC_PH_R : VECTOR j 
CTORQ_PH_PB : VECTOR j 
CTORQ_PH_R : VECTOR 5 
i : integer 5 

begin 

CTORQ_PH_PB := INFOlpayload] .CTORQ_H_B ! 
CFORC_PH_PB :*= INFOlpayload] .CF0RC_H_B s 
CF 0 RC_PH_R := VXMT( CFORC_PH_PB, VBASE_R_PB ) ; 
CTORQ_PH_R := VXMT( CTORQ_PH_PB, VBASE_R_PB ) ; 

setstrlen ( STR, 0 ) 5 
strurite ( STR, 1 ,K , ’ Cntrl@H: R ’ ) , 
for i :■ 1 to 3 do strurite ( STR , K , K , CTORQ_PH_R[ i ] : 9 : Z ) j 
strurite ( STR.K.K,’ Torq ’ ) ; 
for i := I to 3 do strurite < STR.K ,K ,CFORC_PH_R[il :9: 3 ) ; 
strurite ( STR.K.K,’ Fore’ ) , 
SHOULN ( STR ) , 
uriteln < LP, STR ) 5 

setstrlen < STR, 0 ) 5 
strurite < STR, 1 ,K , ’ Cntrl@H:PB ’ ) ; 
for i := I to 3 do strurite ( STR.K ,K ,CTORQ_PH_PBC i] :9 : Z ) ; 
strurite < STR.K.K,’ Torq ’ ) 5 
for i := 1 to 3 do strurite ( STR.K ,K .CFORC _PH_PB£ i ] : 9 : 3 ) 5 
strurite < STR.K.K,' Fore’ ) j 
SHOULN < STR ) , 
uriteln < LP, STR ) { 

SHOULN ( ” ) ; 
uriteln ( LP ) ; 
end ; 


¥99BE4E7E 


1 


1 3-e 


File ’Manhprnt.I’ Page 7 
® page $ 


Updated @ 2Z : Z9 : 15 Mon Z9 Sep 1986 


procedure PRI NTJ? A YLQAD_CONTROL_ST ATE j 
var 

i : integer ; 

PDRATEdeg_PB_PB : VECTOR 5 

PYRdeg_PD_PB : EULPYR j 

RP0S_H_R : VECTOR 5 

RVEL_H_R : VECTOR 5 

begin 

PYRdeg_PD_PB :=• EULDE6( AERR ) 5 

PDRATEdeg_PB_PB := SXV( DEGPERRAD, AVEL > j 

RP0S_H_R := LERR , 

RVEL_H_R := LVEL j 

setstrlen ( STR, 0 ) 5 

strurite < STR, 1 ,K , ’PB Axes:PD • ) 5 

for i :* 1 to 3 do strurite < STR , K , K , P YRdeg_PD_PBt i ] : 9 : Z > j 

strurite ( STR,K ,K , ’ PYR • ) ; 

for i I to 3 do strurite ( STR.K ,K ,PDRATEdeg_PB_PBI i 1 : 9 : 3 ) 5 

strurite < STR.K, K,’ Rate’ ) ; 

SHOULN < STR ) 5 

uriteln ( LP, STR ) a 

4 

setstrlen < STR, 0 > ; 

strurite ( STR. I.K.’PL Hndl: R ’ ) ; 

for i := 1 to 3 do strurite < STR.K ,K ,RPOS_H_R[ i] : 9 : 2 ) j 

strurite ( STR.K ,K , 1 Pos ' ) 5 

for i :• 1 to 3 do strurite ( STR.K ,K ,RVEL_H_RI il :9: 3 ) 

strurite < STR.K.K,’ Vel’ ) 5 

SHOULN < STR ) ; 

uriteln ( LP, STR ) j 

SHOULN ( ” ) j 

uriteln < LP ) 1 

end ; 


¥Z 1 ZEE4EE 


1 - 1 3-7 



File ’Manhprnt.I’ Page 8 
$ page $ 


Updated @ ZZ:29:15 Mon Z9 Sep 1986 


procedure PRINTJPAYLOAD_STATE_WRT_ORBITER_BQDY_AXES 9 
var 

i : integer ; 

OBRATEdeg_PB_PB : VECTOR 

PYRdeg_OB_PB : EULPYR 9 

begin 

PYRdeg_OB_PB := EULDE 6 ( QPYR( QUAT_OB_PB ) ) 9 

OBRATEdeg_PB_PB := SXV< DEGPERRAD, OBRATE_PB_PB ) 5 

setstrlen < STR, 0 ) ; 

strurite ( STR, 1 ,K , ’PB Axes: OB ’ ) ; 

for i := 1 to 3 do strurite ( STR , K , K , P YRdeg_OB_PBE i J : 9 : Z ) 9 

strurite ( STR.K.K, * PYR • ) ; 

for i :» 1 to 3 do strurite < STR,K ,K ,OBRATEdeg_PB_PBI i] :9: 3 ) 5 

strurite ( STR.K.K,’ Rate’ ) i 

SHOWLN < STR ) I 

uriteln ( LP, STR ) 5 

setstrlen < STR, 0 ) j 

strurite ( STR,1,K,’PL CM :0B ’ > 9 

for i := 1 to 3 do strurite < STR.K ,K ,OBPQS_PCM_Qsr i] ;9;2 ) ! 

strurite ( STR.K.K,’ Pos ’ ) I 

for i := 1 to 3 do strurite < STR.K ,K ,OBVEL_PCM_OBI i] :9: 3 ) ! 

strurite ( STR.K.K,’ Vel ’ ) ; 

SHOWLN < STR ) 9 

uriteln < LP, STR ) 9 

SHOWLN ( ” ) i 

uriteln < LP ) ; 

end 9 

procedure PRI NT_P AYL0AD_ST ATE_WRT_I NERTI AL_AXES 9 
var 

i : integer 9 

ANGM0_P_MA6 : longreal 5 
ANGMO_P_IPCHdeg : longreal 9 
ANGMO_P_IYAWdeg : longreal 9 
ANGMO_P_IZX : longreal 9 
I RATEdeg_PB_PB : VECTOR 9 
PYRdeg_I_PB : EULPYR 9 
R0TKENER6Y.P : longreal j 


¥65F2FBB2 


1 


1 3-e 


File ’Manhprnt.I 
$ page $ 


Page 9 


Updated @ ZZ:Z9:15 Mon Z9 Sep 1986 


begin 

RQTKENERGY_P := D0TP< IRATE_PB_PB, ANGMO_P_PB ) / TWO 5 
ANGMQ_P_IZX := sqrt< sqr( ANGM0_P_II3] ) + sqr< ANGMO_P_IM] ) ) ; 
ANGMQ_P_I YAWdeg := DEGPERRAD * ATANZ< ANGMO_P_im. ANGMO_P„IZX ) 5 
AN6M0_P_IPCHdeg := DEGPERRAD * ATANZ( -ANGM0_P_I[ 31 , ANGMO_P_I [ 1 ] ) ; 
ANGMO_P_MAG := VMAG( ANGM0_P_I ) ; 
I RATEdeg_PB_PB := SXV< DEGPERRAD, IRATE_PB_PB ) 5 
PYRdeg_I_PB :=■ EULDEG< QPYR( QUAT_I_PB > ) ; 

setstrlen ( STR, 0 ) ; 
struirite < STR,1,K,’PL Rot K E • ) ; 
strurite ( STR.K ,K ,ROTKENERGY_P: 9 : Z ) ; 
SHOULN < STR ) 5 
uiriteln ( LP, STR ) } 

setstrlen < STR, 0 ) j 
strurite ( STR, 1 ,K , ’PLAngmo: I ’ ) 5 
strurite ( STR.K ,K , ANGMO_P_IPCHdeg: 9 :Z > j 
strurite < STR , K , K , ANGM0_P_I YAWdeg : 9 : Z > 8 
strurite < STR.K ,K , ANGMO_P_MflG : 9 : Z ) ! 
strurite < STR.K.K,’ PYMag ’ ) 5 
for i := 1 to 3 do strurite ( STR, K ,K , ANGMO_P_I [ i] : 9 : 3 ) j 
strurite ( STR.K.K,’ Hxyz’ ) ; 
SHQU'LN « STR > ; 
uriteln < LP, STR ) i 

setstrlen ( STR, 0 ) ; 
strurite ( STR, 1 ,K , ’PB Axes: I ’ ) ; 
for i :=» 1 to 3 do strurite ( STR, K ,K ,PYRdeg_I_PBl i] : 9 : Z ) ; 
strurite ( STR.K.K,’ PYR ’ ) ; 
for i := 1 to 3 do strurite ( STR.K ,K , IRATEdeg_PB_PBt i 1 : 9 s 3 ) ; 
strurite < STR.K.K,’ Rate’ ) i 
SHQULN ( STR ) 5 
uriteln < LP, STR ) ; 

setstrlen ( STR, 0 > ; 
strurite < STR.I.K.’PL CM : I ’ ) 5 
for i I to 3 do strurite ( STR.K ,K ,IPOS_PCM_Il il :9:Z ) j 
strurite < STR.K.K,’ Pos ’ ) ? 
for i :■ I to 3 do strurite ( STR.K ,K ,IVEL_PCM_I[ i] : 9: 3 ) 5 
strurite < STR.K.K,’ Vel ’ ) 5 
SHOULN ( STR ) j 
uriteln ( LP, STR ) ! 

SHOULN < ” ) ! 
uriteln ( LP ) ; 
end ; 


YC308ZZ08 


1 . 1 3-9 



File 'Manhprnt . I ' Page 10 Updated 0 Z2 : 29 r IB Mon Z9 Sep 198B 

$ page $ 

procedure PRINT_ORBITER_STATE_URT_INERTIAL_AXES i 
var 


i : integer 5 

IRATEdeg_0B_0B : VECTOR 5 
PYRdeg_I_OB : EULPYR j 

begin 

IRATEdeg_QB_OB := SXV( DEGPERRflD, IRATE_OB_QB ) 
PYRdeg_I_OB := EULDE 6 ( QPYR< QUAT_I_OB ) ) 

setstrlen ( STR, 0 ) 

strurite < STR, 1 ,K , • OB Axes: I ’ ) 

for i := 1 to 3 do strurite ( STR , K , K , P YRdeg_I_OBf i ] : 9 : 2 ) 
strurite ( STR.K ,K, ’ PYR • ) 

for i :*= 1 to 3 do strurite < STR.K , K , IRATEdeg_OB_GB[ i ] : 9 : 3 
strurite < STR.K ,K , ’ Rate’ ) 

SHOWLN ( STR ) 
uriteln ( LP. STR ) 


setstrlen ( STR, 0 ) 

strurite < STR.I.K.’Orb CM : I • ) 

for i := 1 to 3 do strurite < STR.K ,K 


Tone nr m tt;] .o«? 

4.1 UJ UWI I XLXJ«vJ«£_ 




strurite ( STR.K ,K , ’ Pos ’ ) 

for i :=> 1 to 3 do strurite < STR.K ,K ,IVEL_OCM_I[ il :9: 3 ) 
strurite ( STR.K.K,’ Vel’ ) 

SHOULN < STR ) 


uriteln < LP , STR ) 


SHOULN ( " ) 

for i := I to 3 do uriteln ( LP ) 
end ; 




5 

J 

5 

5 

i 


end 5 { module MANHPRNT & File 1 Manhprnt . 1 1 > 


¥936A5E2A 


1 


1 3 - 1 <Z> 


. 14 . 


Initialization of 


Svs 


tew State 


1 - 1 4- i 


File ’Manhinit.I’ Page 1 
$ page $ { begin File ’Manhinit.I’ } 


Updated @ ZZ:Z9:35 Mon Z9 Sep 1986 


i Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers } 
module MANHINIT 5 < Subject : Initialization of System State } 

{ NASA/ JSC/ MP AD/ TRW : Sam Wilson > 

import 

UTILMATH , 

UTILSPIF , 

UTILVEMQ , 

MANHMISC . 

MANHBODS , 

MANHFCON , 

MANHSLOG , 

MANHKAMS , 

MANHDISP . 

MANHSCON , 

MANHPRNT j 

export { begin externally visible declarations } 

const 


FILESIZE = Z4 5 


type 


IDATREC = i contents of generic input data file } 

record 

PVID : NAMEPAC ; < prog version ident > 

ARR : array! 1.. FILESIZE ] of longreal ; < numeric data } 

end ; < record > 

procedure INITI ALIZE_SYSTEM_STATE 1 

implement f begin externally invisible part of module > 


¥Z63BS15B 


1 


1 4 - 1 



File ’Manhinit.I* Page Z 
$ page $ 


Updated @ ZZ: 29:35 lion 29 Sep 1985 


type 


ARMSREC = < record containing RMS translational alacrity matrix > 

record 

case integer of 

0 : < I DAT : IDATREC ) 5 

1 : < PVID : NAMEPAC i 

TALAC_CRO_R : MAT3X3 ) ? 

end i t case & record > 


DRMSREC =* < record containing RMS transln’l damping const matrix > 

record 

case integer of 

0 : ( IDAT : IDATREC ) j 

1 : ( PVID : NAMEPAC 5 

TDAMP_CRO_R : MAT3X3 ) j 

end ; { case 8, record > 


SRMSREC = { record containing RMS transln’l spring const matrix } 

record 

case integer of 

0 : ( IDAT : IDATREC ) ; 

1 : ( PVID : NAMEPAC ; 

TSPRG_CRO_R : MAT3X3 ) j 

end « < case & record > 


¥5FA5FB05 


1 - 1 A -- Z 



File ’Manhinit.I’ Page 3 
$ page $ 


Updated @ ZZ:Z9:35 Mon Z9 Sep 198G 


NERTREC = f record containing Orbiter or Payload inertia data } 

record 

case integer of 


0 

1 


( I DAT 

: IDATREC 

) ; 




( PVID 

: NAMEPAC 

; 




WEIGHT 

: longreal 

» 

T 

lbs in std gravity fid 

> 

L0C_CM_S 

: VECTOR 

1 

f 

in 

> 

M0MNERT_S 

: REALARR3 

5 

f 

slug*ft*ft; Ixx.Iyy.Izz 

} 

PRDNERT_S 

: REALARR3 

) ! 

f 

slug»ft*ft; Pxy.Pxz.Pyz 

> 


f 



Ixx -Pxy -Pxz 

> 


f 




> 


f RNERT_CM_S 

= 

-Pxy Iyy -Pyz 

} 


f 




> 


f 



-Pxz -Pyz Izz 

} 


end ; f case & record > 


POSIREC = f record containing fit control position parameters } 

record 

case integer of 


0 : ( I DAT : IDATREC ) 5 


1 


PVID 

L0C_N_0S 

LOC_H_PS 

LERRLIMin 

LERRTOLin 

NOMLVELin 

LVELTOLpct 


NAMEPAC 5 
VECTOR j 
VECTOR 5 
REALARR3 ; 
REALARR3 j 
longreal s 
longreal ) 


fin > 

fin .} 

fin } 

fin > 

f in/ sec } 


f X of NOMLVEL } 


end j f case & record } 


ATTIREC = f record containing fit control attitude parameters } 

record 

case integer of 


0 : < I DAT : IDATREC ) 5 


1 : ( PVID 

PYRdeg_OB_R 

PYRdeg_R_PD 

AERRMAXdeg 

AERRMINdeg 

AERRTQLdeg 

NOMAVELdeg 

AVELTOLpct 


NAMEPAC ; 
EULPYR 5 
EULPYR j 
REALARR3 5 
REALARR3 j 
REALARR3 s 
REALARR3 j 
longreal ) j 


f deg > 
f deg 1 
f deg } 
f deg > 
f deg > 
f deg/sec > 


f % of NOMAVEL } 


end j f case & record > 


¥19603560 


1 


1 3 



File ’ Manhinit.I’ Page 4 Updated @ ZZ:Z9:35 Mon Z9 Sep 1986 

$ page $ 

LQADREC = < record containing fit control force/torque parameters > 

record 


case integer of 






0 : ( I DAT 

: IDATREC 

) 5 




1 : < PVID 

NAMEPAC 

; 




SPUFORC 

VECTOR 

3 

f 

lh 

> 

DSPFORC 

VECTOR 

3 

< 

lb 

} 

FORCLIM 

REALARR3 

i 


lb 

} 

TORQLIM 

REALARR3 

3 

f 

ft*lb 

> 

TIMECON 

longreal 

) 5 

< 

sec 

> 


end ; < case & record > 


ICONREC = f record containing initial conditions for the simulation > 
record 

case integer of 


0 : ( I DAT 


: IDATREC ) ; 


1 


PVID 

PYRdeg_I_OB 

IRATEdeg_0B_0B 

RP0S_H_R 

I VEL_PCM_0B 

PYRdeg_PD_PB 

NOMSPINRATEdeg_P 

WOBBLE_CONEdeg_P 

WOBBLE._CLOKdeg_P 


NAMEPAC } 
EULPYR 5 
VECTOR } 
VECTOR 5 
VECTOR j 
EULPYR j 
longreal ; 
longreal ; 
longreal ) 


< deg } 
f deg/6ec } 

< ft > 

< ft/sec > 

< deg > 

< deg/sec > 

< deg } 

< deg > 


end 5 < case & record } 


YC730Z 1 30 


1 . 1 4-4 


File f Manhinit . I 


Updated e 22:29:35 Mon 29 Sep 1986 


* Page 5 

$ page $ 
var 


ARMS 

ARMSREC 

ARMSFILE 

file of ARMSREC 

ATTI 

ATTIREC 

ATTIFILE 

file of ATTIREC 

DRMS 

DRMSREC 

DRMSFILE 

file of DRMSREC ; 

ICON 

ICONREC ; 

ICONFILE 

file of ICONREC 

LOAD 

LOADREC 

LOADFILE 

file of LOADREC 

NERO 

NERTREC 

NERP 

NERTREC 

NERTFILE 

file of NERTREC ; 

POSI 

POSIREC ; 

POSIFILE 

file of POSIREC 

SRMS 

SRMSREC 

SRMSFILE 

file of SRMSREC 


forward 
f oruard 
forward 
f oruard 
foruard 
f oruard 
f oruard 


foruard ; 


foruard j 

procedure INITIAL I ZE_SYSTEM_STATE ; 


procedure IDENTIFY_SIMULATION ; 

procedure GET_INPUT_DATA_FILES ! 

procedure SET_UP_ORBITER_CONSTANTS ; 

procedure SET_UP_PAYLQAQ_CQNSTANTS 5 

procedure SET_UP_CREUMAN_CONSTANTS ! 

procedure SET_UP_FLIGHT_CONTROL ; 

procedure SET„UP_INITI AL.STATE i 

function SXM< S : longreal ; 

M : MAT3X3 ) : MAT3X3 ; 

function LOCAL_RNERT< RNERT_CM_A : MAT3X3 ; 

MASS : longreal ; 

L0C_P_A : VECTOR ) : MAT3X3 ; 


begin 


IDENTIFY_SIMULATION 5 
GET_INPUT_DATA_FILES 5 
SET_UP_ORBI TER_C0NST ANTS ; 
SET_UP_PAYLOAD_CONSTANTS ; 
SET_UP_CREUMAN_CONSTANTS 5 
SET_UP_FLIGHT_CONTROL j 
SET_UP_INI TI AL_STATE ! 
SET. UP KAMERA.DAT A ; 
if USING_IMI then INITI ALIZE_IMI ! 
COMPUTE_FLIGHT_CONTROL_FORCE_AND_TORQUE ! 
STORE_SIMULATION_LOG_RECORD ! 
UPDATE_IMI_DATA 5 
DOCUMENT_THE_STATE_OF_THE_SYSTEM ; 
end; 


YD5DCAE5C 


1 _ 1 4- S 



File ’Manhinit.I’ Page G 
$ page $ 


Updated B ZZ:Z9:35 Mon Z9 Sep 198G 


procedure I DENTI F Y_SI MULATI ON ; 


begin 

with SLOGM0] do 


begin 

PROGSESSID PROGID + DATESTRING 

SHOULN < ’Enter one~line description of 

SOUND_ALERT 

FETCHLN ( SIMDESCRIP ) 

writeln ( LP ) 

writeln ( LP, PROGSESSID ) 

writeln < LP, SIMDESCRIP ) 

writeln ( LP ) 

end ? 

end 3 


simulation’ 


? 

I 


3 

5 

5 

5 


procedure 6E T_I NP U T_D AT A_F I L E S 


begin 


reset 

( 

ARMSFILE , 

’_ari»is ’ 

) 

3 

read 

< 

ARMSFILE, 

ARMS 

> 

3 

close 

/ 

\ 

ARMSFILE, 

•SAVE’ 

) 

3 

reset 

< 

DRMSFILE , 

•_drns’ 

) 

3 

read 

< 

DRMSFILE , 

DRMS 

) 

3 

close 

< 

DRMSFILE, 

’SAVE’ 

> 

3 

reset 

< 

SRMSFILE , 

•_ 5 ri>is’ 

> 

3 

read 

< 

SRMSFILE , 

SRMS 

) 

3 

close 

< 

SRMSFILE, 

•SAVE’ 

) 

3 

reset 

< 

NERTFILE, 

•_nero’ 

) 

5 

read 

< 

NERTFILE, 

NERO 

> 

3 

close 

< 

NERTFILE, 

’SAVE’ 

) 

3 

reset 

< 

NERTFILE, 

•_nerp’ 

) 

3 

read 

< 

NERTFILE, 

NERP 

) 

3 

close 

< 

NERTFILE, 

’SAVE’ 

) 

3 

reset 

( 

POSIFILE, 

•_posi ’ 

) 

3 

read 

< 

POSIFILE, 

POSI 

) 

3 

close 

< 

POSIFILE, 

’SAVE’ 

) 

3 

reset 

< 

ATTIFILE, 

’ _at i i ’ 

) 

3 

read 

< 

ATTIFILE, 

ATTI 

) 

3 

close 

< 

ATTIFILE, 

’SAVE’ 

) 

3 

reset 

( 

LOADFILE, 

•_load’ 

) 

3 

read 

( 

LOADFILE, 

LOAD 

) 

3 

close 

< 

LOADFILE, 

•SAVE’ 

) 

3 

reset 

< 

ICQNFILE, 

•_icon’ 

) 

3 

read 

< 

ICQNFILE, 

ICON 

) 

3 

close 

< 

ICONFILE, 

•SAVE’ 

) 

3 


end ; 


¥89A38DC3 


i . i 4-e 



File ’ Manhinit . 1 1 Page 7 
$ page $ 


Updated @ 22:29:35 Mon 29 Sep 193G 


procedure SET_UP_QRBITER_CQNSTANTS ; 


var 


i : integer i 


begin 

with INFOlorbiter] , SLOG A t0], NERO, POSI do 
begin 

MASS :» UEIGHT / STDGRAVACC 
for i := 1 to 3 do 

RNERT_CM_Bt i , il :» MOMNERT_Sti] 
RNERT_CM_B[ 1,2] : = PRDNERT_St 1 ] 

RNERT_CM_Bt 1,3] :» -PRDNERT_S[ 2 ] 

RNERT_CM_Bt 2,3] := PRDNERT_S[ 3] 

RNERT_CM_BL 3,21 := RNERT_CM_Bl 2,3] 
RNERT_CM_Bt 3, 1 ] : = RNERT_CM_Bt 1 , 3] 
RNERT_CM_Bl 2,1] : ■= RNERT_CM_Bt 1,21 
RALAC..CM_B :=■ MINV< RNERT_CM_B ) 

LOC_OCM_OS := L0C_CM_S 

L0C_N_0B := VXDt VDIF( L0C_N_0S , LOC_CM_S 
end ; 

end ; 

procedure SET_UP_PAYLOAD_CONSTANTS ; 


var 


i : integer ; 


begin 

with INFOt payload] , SLOG" [01, NERP, POSI do 
begin 

MASS := UEIGHT / STDGRAVACC 
for i : *= 1 to 3 do 

RNERT_CM_B[ i , i] := MOMNERT_St i] 
RNERT_CM_Bf 1.21 :- PRDNERT_St 1 1 
RNERT_CM_B[ 1,3] := -PRDNERT_S1 2 ] 

RNERT_CM_Bt 2 , 31 := PRDNERT_St31 
RNERT_CM_Bt 3,2] : = RNERT_CM_Bt 2,31 
RNERT_CM_Bt 3,1] : = RNERT_CM_Bt 1 , 31 
RNERT_CM_B[ 2,1] : = RNERT_CM_BI 1,2] 
RALAC_CM_B := MINV( RNERT_CM_B ) 

L0C_PCM_PS := L0C_CM_S 

L0C_H_PB := VXD( VDIF( L0C_H_PS, L0C_CM_S 
end j 

end ; 


procedure SET_UP_CREUMAN_CONSTANTS j 
begin 

INFOt crewman] . TALAC_CRO_R :* ARMS. TALAC_CRO_R 
INFOt crewman] . TDAMP_CRO_R := DRMS. TDAMP_CRO_R 
INFOt creunanl . TSPRG_CRO_R :* SRMS. TSPRG_CRO_R 
end ; 


5 


), STRUC2B0DY ) 


, STRUC2B0DY ) 


5 

1 

5 


¥061 10431 


1 - 1 4—7 



File ’Manhinit.I’ Page 8 
$ page $ 


Updated @ ZZ : 29: 35 Mon Z9 Sep 1986 


procedure SETJJP_FLIGHT_CONTROL s 


var 


C : char : 
i : integer ; 
MODEUORD : UIORDSTR 5 
PMASS : longreal 5 


begin 

with CNTRLCON do 


begin 


NOMLVEL POSI . NOMLVELin * FTPERIN 

LVELTOL := POSI . LVELTOLpct * PERCENT # NOMLVEL 

DSPFORC := LOAD.DSPFORC 

SPUFORC := LOAD. SPUFORC 

TIMECON := LOAD. TIMECON 

for i := 1 to 3 do 


begin 
AERRMAXIi] 
AERRMINIi] 
AERRTOLti] 
NOMAVELI il 
AVELTOLC i] 
LERRLIMt i] 
LERRTOLI i] 
FORCLIMI i 1 
TORQLIMI i] 
end ? 


ATTI . AERRMAXdegl i] 
ATTI . AERRMINdegl i] 
ATTI . AERRTOLdegl il 
ATTI . NOMAVELdegt i ] 
ATTI . AVELTQLpct 
POSI .LERRLIMinI il 
POSI .LERRTOLinl il 
LOAD. FORCLIMI i) 5 
LOAD.TORQLIMI il ? 


» RADPERDE6 

* RADPERDEG 

* RADPERDEG 

* RADPERDEG 

* PERCENT 

* FTPERIN 

* FTPERIN 


end ; 


NOMAVELI i3 


PMASS := INFO! payload]. MASS 

RNERT_PCM_PB := INFO! payload] .RNERT_CM_B 

RNERT_PH_PB := LOCAL_RNERT( RNERT_PCM_PB, PMASS, LOC_H_PB ) 

TNERT_PH_PB := SXM( PMASS, MXM< RNERT_PCM_PB, MINV( RNERT_PH_PB ) ) ) 

MODEUORD := WORD INPUT! 


5 

I 

» 

? 


5 




’ Cntrl node {Free ,A1 ign,Dsp in, Capture , Hold, Rol , Yaui^ch^pnup}’ , 
’Free' ) ; 

C : = MODEWORDt 1 ] i 

case C of 


’A’ 

desired„mode 

ss 

ALIGN 


•C‘ 

desired_mode 

= 

CAPTURE 


’D’ 

desired_node 

s 

DESPIN 


•F' 

desired_node 

ss 

FREE 


’H’ 

desired_node 

=8 

HOLD 


,p. 

desired_mode 

SS 

PITCH 


’R' 

desired_mode 

= 

ROLL 


’S’ 

desired„mode 

ss 

SPINUP 


'Y' 

end 

desired„node 
? { case C > 

ss 

YAU 



current_node : = FREE 
end 5 


¥ A469B949 


1 - 1 4 — S 



File ’ Manhinit . I ' Page 9 
$ page $ 


Updated @ ZZ:Z9:35 Mon Z9 Sep 1986 


procedure SET_UP_INITIAL_STATE ! 


var 


ANGMQ_P_PB 

AXIANGMO 

CLOK 

CONE 

NORMANGMO 

QUAT_R_PD 

QUAT_PD_PB 


VECTOR 

longreal 

longreal 

longreal 

longreal 

QUATERNION 

QUATERNION 


begin 

QUAT_OB_R : * PYRQ< 
QUAT_R_PD : = PYRQ! 
QUAT_PD_PB : = PYRQ( 
VBASE_OB_R : = QMAT< 
OBPOS_N_R : = VXM! 
QUAT_0B_PD : - QXQ< 
QUAT_OB_PB : = QXQ< 
VBASE_OB_PB := QMAT< 
uith STATE! orbiterl , 
begin 


EULRAD( ATTI.PYRdeg_OB_R ) ) 
EULRAD< ATTI ,PYRdeg_R_PD ) ) 
EULRAD( I CON . P YRdeg_PD_PB ) ) 
QUAT_0B_R ) 

SLOG' 1 ! 0] . L0C_N_0B , VBASE_OB_R ) 
QUAT_0B_R , QUAT_R_PD ) 

QUAT_0B_PD , QUAT_PD_PB ) 

QUAT_0B_PB ) 

SLQG A !0] do 


IPGS_CM_I VDIF! ZERVEC, L0C_N_QB ) 

I VEL_CM_I := ZERVEC 

QUAT_I_B := PYRQ( EULRAD( IC0N.PYRdeg_I_0B ) ) 
IRATE_B_B := SXV( RADPERDEG, ICON. IRATEdeg_0B_0B ) 


end i 


with STATE! payload] . INFOI payload! do 
begin 

IPOS_CM_I VDIF( VXMT( ICON. RP0S_H_R. VBASE_0B_R ) , 

VXMT! L0C_H_PB . VBASE_OB_PB ) ) 

I VEL_CM_I := ICON. IVEL_PCM_OB 

QUAT_I_B := QXQ< STATE! orbiter] . QUAT_I_B. QUAT_OB_PB ) 

CONE := ICON. WOBBLE_CONEdeg_P * RADPERDEG 

CLOK := ICON. WOBBLE_CLOKdeg_P * RADPERDEG 

AXIANGMO := ICON. NOMSP I NRATEdeg_P * RADPERDEG » RNERT_CM_BI 1,1] 

NORMANGMO : = AXIANGMO * sin! CONE ) / cos! CONE ) 

ANGM0_P_PB! 1 ] := AXIANGMO 

AN6M0_P_PB! Z 1 : = NORMANGMO * sin! CLOK ) 

ANGM0_P_PB! 31 : = -NORMANGMO * cos! CLOK ) 

IRATE_B_B :■ VXM! ANGMO_P_PB, RALAC_CM_B ) 


end ; 

with STATE! creunan] , SLOG A !0] do 
begin 


OBPOS_RO_R 
0BVEL_R0_R 
end ; 

SIMTIME := ZERO 
curslogrec := 0 
PRTSLOGREC :* 1 
end j 


:= VXM! LOC_N_OB, 
ZERVEC 


VBASE 0B_R > 


f 

? 


5 


5 

i 

i 


i 


; 


j 


¥FAZF4FCF 


1.1 3 



File ’Manhinit.I* Page 10 
$ page $ 


Updated @ ZZ:Z9:35 Mon Z9 Sep 198G 


function SXM< S: longreal ; M : MAT3X3 ) : MAT3X3 ; 

{ The value of this function is the product of the scalar S with > 

{ the matrix M > 

var 

i : integer 5 
j : integer ; 

begin 

for i S“ 1 to 3 do 

for j 1 to 3 do 

ME i , j ] := S * MCi.jl ? 

SXM :* M i 

end 5 

function LOCAL_RNERT< RN£RT_CM_A : MAT3X3 ; 

MASS : longreal ; 

L0C_P__A : VECTOR ) : MAT3X3 ; 

< The value of this function is the rotational inertia tensor about > 

{ the point whose location is defined by the vector LOC_P_A. > 

var 

i : integer ; 

j : integer ; 

RNERT_P_A : MAT3X3 ? 

RSQ : longreal ; 

begin 

RSQ :=■ D0TP( LOC_P_A, L0C_P_A ) 1 

for i 2“ 1 to 3 do 

for j :* 1 to 3 do 

RNERT_P_AC i , j 1 2 - “L0C_P_A[il * LOCJMUjl ; 

for i :** 1 to 3 do 

RNERT_P_ACi.il := RNERT_P_ACi.il + RSQ j 

for i := I to 3 do 

for j :« I to 3 do 

RNERTJLACi.jl RNERT_CM_AC i , j 1 + MASS * RNERT_P_Af i . j 1 5 

LOCAL_RNERT := RNERT_P_A ; 

end ? 


end ; < module MANHINIT & File ’Manhinit.I 1 > 


¥EA35FC95 


1 


1 4 - 1 <Z> 


.15. Input Data Editing Routines 


1 . 1 5- x 



File 'Manhedit.I' Page 1 Updated @ 08:44:13 Tue 04 Nov 1986 

$ page $ i begin File 'Manhedit.I’ > 

i Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers > 
module MANHEDIT 5 < Subject : Input Data Editing Routines > 

{ NASA/ JSC/MPAD/TRW : Sam Uilson > 

import 

UTILSPIF . 

MANHMISC , 

MANHINIT : 

export { begin externally visible declarations > 

var 


OLDNAME : string 15] ; { “first name" of data source file > 

NEWNAME : string [51; { “first name" of data save file > 

procedure EDI T_I NPUT_DAT A_F I LES ; 

implement < begin externally invisible part of module > 


¥6644EEC4 


1 . 1 5- 1 



File ’ Manhedit.I’ Page Z Updated @ 08:44:13 Tue 04 Nov 1986 

$ page $ 
type 

FILETYPE = ( 

arms , { alacrity matrix; RMS translational flexure > 

drms , { damping constant matrix; RMS translational flexure } 

srms , { spring constant matrix; RMS translational flexure > 


nero , < inertia data for Orbiter } 
nerp , { inertia data for Payload > 
posi , i position parameters for Payload flight control } 
atti , { attitude parameters for Payload flight control > 
load , { load parameters for Payload flight control } 
icon ) ; { initial conditions for simulation > 


NUMIVARR = array [ FILETYPE ] of integer ; 


const 


NUMIVAR = NUMIVARR [ { number of scalar input variables per file > 


9 

■ 

{ 

arms 

> 

9 

a 

{ 

drms 

> 

9 

a 


srms 

> 

10 



nero 

> 

10 

> 

{ 

nerp 

> 

14 



posi 

> 

19 

i 

{ 

atti 

> 

13 

i 


load 

> 

18 

1 ; 

< 

icon 

> 


type 

LASTNAMARR = array l FILETYPE ] of NAMESTR ; 


const 


LASTNAME = LASTNAMARR C 


NAMESTR 

t 

farms’ 

NAMESTR 

1 

’—drms’ 

NAMESTR 

[ 

’^srms’ 

NAMESTR 

t 

’_nero’ 

NAMESTR 

I 

’_nerp’ 

NAMESTR 

[ 

’-Posi’ 

NAMESTR 

l 

’_att i ’ 

NAMESTR 

l 

’_load* 

NAMESTR 

t 

’^icon’ 


{ file name suffix 

] , 

] , 

] , 

] , 

] , 

] , 

] , 

] , 

] 1 ; 


to identify file type > 


¥B45Z 1 E 1 2 


1 . 1 IS - Z 



File ’Manhedit. I ’ Page 3 Updated @ 08:44:13 Tue 04 Nov 198B 

$ page $ 
type 

HEADERARR = array [ FILETYPE 1 of PRQMPTSTR ; 

const 


HEADER = 

HEADERARR [ 

< 1 Z 3 4 5 } 

<123458789012 34567890 1 2 34567890 1 2 345678901 2345678901231 
PROMPTSTRt ’ Translat ional Alacrity Matrix for RMS Flexure ’], 

PROMPTSTRt 'Translational Damping Constant Matrix for RMS Flexure’], 
PROMPTSTRt ’ Translat ional Spring Constant Matrix for RMS Flexure ’], 
PROMPTSTRt ' Orbiter Inertia Data ’], 

PROMPTSTRt ' Payload Inertia Data '], 

PROMPTSTRt ’Position Parameters for Payload Flight Control ’], 

PROMPTSTRt ’Attitude Parameters for Payload Flight Control ’], 

PROMPTSTRt ’Force & Torque Parameters for Payload Flight Control ’], 
PROMPTSTRt ’ Initial Conditions for the Simulation ’]] ; 


type 


PROMPTARR = array I 1..FILESIZE ] of PROMPTSTR 
VIDENTARR = array t arms.. icon ] of PROMPTARR ; 


const 


VI DENT = VIDENTARR I 


PROMPTARR t < arms } 

< 

< 

PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’Alacrity matrix, 
PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt * 

PROMPTSTRt • 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 

PROMPTSTRt ’ 


t 1 , 1 1 ( ft/sec/sec/ lb) ’ ] , 

t 1 ,21 ( ft/sec/sec/lb) ’ ] , 

[1,3] (ft/sec/sec/lb)’], 

t 2 , 1 ] ( ft/sec/sec/lb) ’ ] , 

tZ,Z] (ft/sec/sec/lb)’ 1 , 

tZ,31 ...( ft/sec/sec/lb) ’ ] , 

13.1) ( ft /sec/sec/ lb) ’ ] , 

13.2] ( ft /sec/sec/ lb) ’ ] , 

[3,31 f t /sec/ sec/ lb ) ’ ] , 


’], 

M, 
M , 

’1, 

’] . 
M, 

’ 1 , 

•n. 


1 Z 3 4 5 > 

< 1 2 3456789012 3456789012 3456789012345678901 2 345678901 2 345 > 
element 
element 
element 
element 
element 
element 
element 
element 
element 


¥ 1 1E9BCC9 


1 


1 S- 3 



File ’Manhedit.I’ Page 4 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 1986 


PROMPTARR [ { drms > 


PROMPTSTRt ’ Damping constant matrix, element [1,11 ( lb/ft/sec )’ 1 , 

PROMPTSTRt ’Damping constant matrix, element 11,21 (lb/ft/sec)'], 

PROMPTSTRt ’Damping constant matrix, element 11,31 (lb/ft/sec)*], 

PROMPTSTRt ’ Damping constant matrix, element 12,11 ( lb/ft/sec )’ 1 , 

PROMPTSTRt ’ Damping constant matrix, element t2,21 (lb/ft/sec)’], 

PROMPTSTRt ’ Damping constant matrix, element 12,31 ( lb/ft/sec )' 3 , 

PROMPTSTRt ’ Damping constant matrix, element 13,11 (lb/ft/sec)’], 

PROMPTSTRt ’ Damping constant matrix, element 13,23 ( lb/ft/sec )' 3 , 

PROMPTSTRt ’ Damping constant matrix, element 13,31 ( lb/ft/sec )’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ' 1 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ll. 


PROMPTARR I < srms > 


PROMPTSTRt ’ Spring constant matrix, element tl.ll ( lb/ft )’l, 

PROMPTSTRt ’ Spring constant matrix, element 11,21 (lb/ft)’l, 

PROMPTSTRt ’ Spring constant matrix, element 11,31 (lb/ft)'], 

PROMPTSTRt ’ Spring constant matrix, element t2,11 (lb/ft)’], 

PROMPTSTRt ’ Spring constant matrix, element 12,21 (lb/ft)'l, 

PROMPTSTRt ’ Spring constant matrix, element t2,31 (lb/ft )’], 

PROMPTSTRt ’Spring constant matrix, element t 3, 1 1 ( lb/ft )’], 

PROMPTSTRt ’ Spring constant matrix, element t 3 , 2 1 ( lb/ft )'l, 

PROMPTSTRt ’ Spring constant matrix, element t 3 , 33 (lb/ft)’ 3, 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 . 

PROMPTSTRt ’ ’ 1 . 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ll. 


¥6BACDE2C 


1 . 1 5-4 



File * Manhedit . I ’ Page 5 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 1986 


PRQMPTARR [ { nero > 


PROMPTSTRt ’Orbiter ueight ( lb) ’ ] , 

PROMPTSTRt ’ CM STA (structural x coordinate of mass center). ...( in) ’] , 
PROMPTSTRt ’ CM BL (structural y coordinate of mass center )....( in) ’ 1 , 

PROMPTSTRt ' CM WL (structural z coordinate of mass center )....< in) 1 1 , 

PROMPTSTRt * Ixx about CM. structural coordinates ( slug*f t*f t ) * 1 , 

PROMPTSTRt ’ I yy about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’ Izz about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt 1 Pxy about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’Pxz about CM, structural coordinates < slug*f t*f t ) 1 1 , 

PROMPTSTRt ’Pyz about CM, structural coordinates ( slug*f t*f t ) * 1 , 

PROMPTSTRt ’ ' ] , 

PROMPTSTRt ’ • 1 , 

PROMPTSTRt • * ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ 1 ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt • » 1 , 

PROMPTSTRt • * 1 , 

PROMPTSTRt ‘ • ] , 

PROMPTSTRt * • ] , 

PROMPTSTRt’ »], 

PROMPTSTRt ’ • ] , 

PROMPTSTRt ’ ’ ] ] , 


PROMPTARR t { nerp > 


PROMPTSTRt ’Payload ueight ( lb) ’ 1 , 

PROMPTSTRt ' CM STA (structural x coordinate of mass center )....( in) ’ 1 , 

PROMPTSTRt ’ CM BL (structural y coordinate of mass center )....( in )' 1 , 

PROMPTSTRt ’ CM WL (structural z coordinate of mass center )....( in )’ 1 , 

PROMPTSTRt ’ Ixx about CM, structural coordinates ( slug*f t»f t ) ’ 1 , 

PROMPTSTRt ’ I yy about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’ Izz about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’Pxy about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’ Pxz about CM, structural coordinates. ( slug*f t*f t ) ' 1 , 

PROMPTSTRt ’Pyz about CM, structural coordinates ( slug*f t*f t ) ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ ] . 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ 1 ] , 


¥E0AE156E 


1 


1 E>— S 


File ’Manhedit.I’ Page B 
$ page $ 


Updated & 08:44:13 Tue 04 Nov 198G 


PROMPTARR [ { posi > 

PROMPTSTRt ’ Nominal Orbiter STA of PL handling point ( in)’ 1 , 

PROMPTSTRt ’ Nominal Orbiter BL of PL handling point (in)’], 

PROMPTSTRt ’ Nominal Orbiter WL of PL handling point. (in)’], 

PROMPTSTRt ’Payload STA of PL handle (in)’], 

PROMPTSTRt ’Payload BL of PL handle (in)’], 

PROMPTSTRt ’Payload WL of PL handle (in)’], 

PROMPTSTRt ’ Creuman reach limit from RO in +/- Rx direction. ...( in)’] , 
PROMPTSTRt 'Creuman reach limit from RO in +/- Ry direction. ...( in) ’ ) , 
PROMPTSTRt ' Creuman reach limit from RO in +/- Rz direction. ...( in) *1 , 

PROMPTSTRt ’Rx position tolerance for PL handle (in)’], 

PROMPTSTRt ’ Ry position tolerance for PL handle (in)’], 

PROMPTSTRt ' Rz position tolerance for PL handle (in)’], 

PROMPTSTRt ’Nominal vel for handle position correction (in/sec)’], 

PROMPTSTRt ' Tolerance for corrective velocity (X)’], 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] . 

PROMPTSTRt ’ ’ ] | 

PROMPTSTRt ’ ’ ] ] , 

PROMPT ARR t { atti > 

PROMPTSTRt ’ Creuman pitch urt Orbiter body axes (deg)’], 

PROMPTSTRt ’ Creuman yau urt Orbiter body axes (deg)’], 

PROMPTSTRt ’ Creuman roll urt Orbiter body axes (deg)’], 

PROMPTSTRt ’ Desired Payload pitch urt Creuman body axes (deg)'], 

PROMPTSTRt ’ Desired Payload yau urt Creuman body axes (deg)'], 

PROMPTSTRt ’ Desired Payload roll urt Creuman body axes (deg)’], 

PROMPTSTRt 'Positive PL pitch limit urt desired attitude. .....( deg) ’] , 

PROMPTSTRt 'Positive PL yau limit urt desired attitude (deg)’], 

PROMPTSTRt 'Positive PL roll limit urt desired attitude (deg)’], 

PROMPTSTRt ’Negative PL pitch limit urt desired attitude (deg)'], 

PROMPTSTRt 'Negative PL yau limit urt desired attitude (deg)’], 

PROMPTSTRt ’Negative PL roll limit urt desired attitude (deg)’], 

PROMPTSTRt 'PL pitch tolerance urt desired attitude (deg)’], 

PROMPTSTRt ’PL yau tolerance urt desired attitude (deg)’], 

PROMPTSTRt 'PL roll tolerance urt desired attitude (deg)’], 

PROMPTSTRt ’ Nominal maneuver rate about PL Bx axis (deg/sec)’], 

PROMPTSTRt ’ Nominal maneuver rate about PL By axis (deg/sec)’], 

PROMPTSTRt ’Nominal maneuver rate about PL Bz axis < deg/sec >'], 

PROMPTSTRt ’Maneuver rate tolerance (%)’], 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ 1 , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] ] , 


¥833B545B 


1 


1 5-6 


File ’Manhedit.I’ Page 7 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 198G 


PRQMPTARR [ { load > 

PROMPTSTRt ' Spinup axial (PL Bx ) force (lb)’], 

PROMPTSTRt * Spinup normal (PL By) force (lb)’l, 

PROMPTSTRt ’ Spinup tangential (PL Bz > force (lb)’], 

PROMPTSTRt * Despin axial (PL Bx ) force (lb)’ 3, 

PROMPTSTRt ’ Despin normal (PL By) force (lb)’], 

PROMPTSTRt ’Despin tangential (PL Bz > force (lb)’ 3, 

PROMPTSTRt ' Axial (PL Bx ) force limit for capture ...(lb)’3, 

PROMPTSTRt ’ Normal (PL By) force limit for capture. ........( lb) ’ 3 , 

PROMPTSTRt ’ Tangent ial (PL Bz ) force limit for capture (lb)’l, 

PROMPTSTRt ’ Rol 1 (PL Bx ) torque limit for capture . . . . ( f t*lb) ’ 3 , 

PROMPTSTRt ’Pitch (PL By) torque limit for capture (ft*lb>’3, 

PROMPTSTRt ’ Yau (PL Bz ) torque limit for capture <ft»lb)’l, 

PROMPTSTRt ’ Time constant for computing desired accelerations (sec)’], 
PROMPTSTRt ’ » ] , 

PROMPTSTRt ’ > ] , 

PROMPTSTRt ’ • ] , 

PROMPTSTRt ’ • ] , 

PROMPTSTRt ’ • ] ’, 

PROMPTSTRt ’ » ] ' 

PROMPTSTRt ’ • ] ’ 

PROMPTSTRt ’ • ] [ 

PROMPTSTRt ’ • ] 

PROMPTSTRt ’ * ] . 

PROMPTSTRt ’ ’33, 

PROMPTARR t { icon > 

PROMPTSTRt ’ Orbiter pitch urt I axes (deg)’ 3, 

PROMPTSTRt ’ Orbiter yau urt I axes (deg)’ 3, 

PROMPTSTRt ’ Orbiter roll urt I axes (deg)’ 3, 

PROMPTSTRt ’ Orbiter Bx component of ang vel urt I axes. ...( deg/sec) ’ 3 , 

PROMPTSTRt ’ Orbiter By component of ang vel urt I axes. ...( deg/sec) ’ 3 , 

PROMPTSTRt ’ Orbiter Bz component of ang vel urt I axes. ...( deg/sec )’ 3 , 

PROMPTSTRt ’ Rx component of PL handle position (ft)’], 

PROMPTSTRt ’Ry component of PL handle position (ft)’], 

PROMPTSTRt ’ Rz component of PL handle position (ft)’], 

PROMPTSTRt ’Payload CM Xdot urt Orbiter body axes (ft/sec)’], 

PROMPTSTRt ’Payload CM Ydot urt Orbiter body axes (ft/sec)’ 3, 

PROMPTSTRt ’Payload CM Zdot urt Orbiter body axes (ft/sec)’3, 

PROMPTSTRt ’Payload pitch urt desired attitude (deg)’], 

PROMPTSTRt ’Payload yau urt desired attitude (deg)’3, 

PROMPTSTRt ’Payload roll urt desired attitude (deg)’ 3, 

PROMPTSTRt ’Payload nominal spin rate <deg/sec)’3, 

PROMPTSTRt ’Payload uobble cone angle (deg)’], 

PROMPTSTRt ’Payload uobble clok angle (deg)’3, 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ 3 , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ ] , 

PROMPTSTRt ’ ’ 3 ] 3 ! 


YE7400F40 


1 


1 5-V 



File ’ Manhedit . I ' Page 8 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 198B 


CHANGED 

CURPVID 

DATA 

DATAFILE 

FILENAME 

OKAY 

OLDVALUE 

PRINT 

PRINTNAME 


boolean 5 

NAMEPAC ; 
IDATREC ; 
file of IDATREC 
string [20] ; 
boolean ; 

longreal ; 
boolean ; 

string [5] ; 


{ current program version ident > 


procedure GET_DATA_FILE ( kind : FILETYPE ) j forward 
procedure EDIT_OATA_FILE ( kind : FILETYPE ) ; forward 
procedure SAVE_DATA_FILE ( kind : FILETYPE ) ; forward 


procedure EDIT_INPUT_DATA_FILES ; 


i : integer ; 
kind : FILETYPE ; 


begin 

CURPVID := ’MANH 
for i := 5 to 8 do 

CURPVIDt i ] := PROGIDU + 14] 
repeat 

CLEAR_SCREEN 

for kind := arms to icon do 

if USER_DECIDES_TO( ’Edit * +HEADERC kind] ) then 
begin 

GETJDATAJFILE ( kind > 

EDIT_DATA_FILE ( kind ) 

SAVE_DATA_FILE ( kind ) 
end ; 

until USER_DECIDES_NOT_TO( ’Re-run editor’ ) 
CLEAR.SCREEN 
end ; 


YA2B3C4D3 


1 - 1 S-3 



File ’Manhedit . I * Page 9 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 1986 


procedure GET_DATA_FILE ( kind : FILETYPE ) ; 


begin 

CLEAR_SCREEN 
SHOULN ( ” > 

PRINTNAME := OLDNAME 
repeat 

try 

PRINTNAME := UORD_INPUT( ’File name’ , PRINTNAME ) 

FILENAME := PRINTNAME+LASTNAMEI k indl 

reset ( DATAFILE, FILENAME > 

read < DATAFILE, DATA ) 

close ( DATAFILE, ’SAVE’ ) 

OKAY :■= true 

recover 

begin 

OKAY := false 
PRINTNAME := ” 
end ; 

until OKAY 

OLDNAME := PRINTNAME 
end 3 


procedure EDIT_DATA_FILE ( kind : FILETYPE > j 


var 


i : integer ; 

OLDVALUE : longreal ; 


begin 

DATA.PVID := CURPVID 
CHANGED := false 
repeat 

CLEAR_SCREEN 
SHOULN ( ” ) 

SHOULN ( ’ “ ’ +PRINTNAME+’ " ’ +HEADERI k indl ) 

SHOULN ( ” ) 

for i := 1 to NUMIVARI kind] do 
begin 

OLDVALUE := DATA. ARRI i 3 

DATA. ARRI i ] := FIXED_INPUT< VIDENTI k ind, il .DATA. ARRI i ], 1 7,5 ) 

if DATA. ARRI i3 <> OLDVALUE then CHANGED :- true 
end ! 

if CHANGED then PRINTNAME := ” 

LOITER ( 1000 ) 

SOUND_ALERT 
LOITER < 500 ) 

until USE R_DE C I DE S_N0 T_T 0( ’Re_edit this file’ ) 

end ; 


Y95CB9CAB 


i . i 5- a 



File ’Manhedit.I’ Page 10 
$ page $ 


Updated @ 08:44:13 Tue 04 Nov 1986 


procedure SAVE_DATA_FILE ( kind: FILETYPE ) ; 
var 


i : integer ; 

SAVENAME : string! 53 ; 


begin 

if CHANGED or < OLDNAME <> ” ) then 
begin 

FILENAME := LASTNAME! k ind] ; 

reurite < DATAFILE, FILENAME ) 5 

urite ( DATAFILE, DATA ) , 

close ( DATAFILE, ’SAVE’ ) ; 

end j 

SAVENAME := NEUNAME ; 

repeat 

OKAY := true ; 

try { set outer trap for error > 

SAVENAME := UORD_INPUT( ’Name for this file’ .SAVENAME ) ; 

if SAVENAME <> ” then 
begin 

FILENAME := SAVENAME+LASTNAMEt k ind] ; 

try { set inner trap for error } 

reset ( DATAFILE, FILENAME ) ; 
close ( DATAFILE, ’SAVE* ) ; 

OKAY := USER_DECIDE5_TQ( ’Urite over existing file’+ 

’ named " ’ +SAVENAME+ ’ “ ’ ) ; 

recover { come here uhen inner trap is sprung > 

OKAY := true ; 


if OKAY then 
begin 

rewrite < DATAFILE, FILENAME ) 
write ( DATAFILE, DATA ) 
close ( DATAFILE, ’SAVE’ ) 

SHOULN (’File saved under the name “ ’ +SAVENAME+ ’ ) 
PRINTNAME := SAVENAME 
end s 

end ; 


recover < come here uhen outer trap is sprung > 

OKAY := false 

if not OKAY then SAVENAME := NEUNAME 
until OKAY ; 

NEUNAME := SAVENAME 
for i :* 1 to 4 do uriteln ( LP ) 
uriteln ( LP, PROGID+DATESTRING > 
for i := 1 to 4 do uriteln ( LP > 

if CHANGED or ( SAVENAME <> ” ) then write ( LP, ’Neu ’ ) 
uriteln ( LP, ’ .PRINTNAME ,’ " ’, HEADER! k ind] ) 
uriteln < LP ) 

for i := 1 to NUMI VAR! k ind] do 

uriteln ( LP, VIDENTtk ind, i] .DATA. ARR! il : 17:5 ) 

ST ART_NEU_P AGE 
end ; 


¥F97D06DD 


1 . 1 5— 1 <Zf 



File ’Manhedit.I’ Page II 


Updated @ 08:44:13 Tue 04 Nov 1986 


end ; { nodule MftNHEDIT & File ’Manhedit.I’ } 


¥7C7E1 3BE 


1 . 1 5- 1 1 



1 - 1 E> — i 



File ’ Manhpost . I * Page 1 Updated @ ZZ:30:Z7 Mon Z9 Sep 1986 

$ page $ { begin File ’Manhpost. I’ > 

f Payload Manhandling Simulator for HP-9000 Series Z00/300/500 Computers } 


module MANHPOST 5 { Subject : Postprocessing of Simulation Log Data } 


{ NASA/ JSC/ MPAD/ TRW : Sam Wilson > 


import 

UTILSPIF , 

UTILMATH , 

UTILVEMQ . 

MANHMISC . 

MANHFCON , 

MANHSLOG , 

MANHDISP 5 

export i begin externally visible declarations > 

var 


PLT : text i 
PLREV : integer ; 
STROKE : integer ; 
USING_PLOTTER : boolean 5 


procedure EXECUTE_POSTPROCESSOR ; 


implement 


{ begin externally invisible part of module 1 


var 


PATTSAV : EULPYR 

ROLLSAV : longreal 

STR0KE_M0D_3 : integer 

TIME5AV : longreal 


procedure SH0W_PL0TTER_I NI TI ALI ZATI ON_MESSAGE 
procedure PLOT_CONTROL_FORCE_AND_TORQUE_HI STORY 
procedure DRAW_CONTROL_DATA_CURVES ( WINDOW : integer ) 
procedure DRAW_CONTROL_XAXIS 
procedure DRAW_CONTROL_YAXIS 

procedure PLOT_PAYLOAD_SPINAXIS_ATTITUDE_TRAJECTORY 
procedure GET_STROKE_AND_PLREV_NUMBER_FROM_USER 
procedure DRAW_ATTI TUDE_XAXI S 
procedure DRAW_ATTITUDE_YAXIS 
procedure DRAW_ATTITUDE_TRAJECTORY 

procedure PLOT_ANGULAR_MOMENTUM_DI RECTI ON ( ANGMO : VECTOR ) 
procedure PLOT_REV_IDENTIFICATION_SYMBOL ( XO, YO : integer 
procedure PLQT_RMS_FLEXURE_HI STORY 
procedure DRAW_FLEXURE_DATA_CURVES 
procedure DRAW_FLEXURE_XAXIS 
procedure DRAW_FLEXURE_YAXI S 


i foruard 5 
j forward ; 
j foruard 5 
5 foruard ; 
5 foruard ; 
i forward ; 
5 forward } 
5 foruard 5 
! foruard 5 
; foruard 5 
1 foruard 5 
5 forward ; 
5 foruard ; 
5 f oruard j 
; forward j 
5 foruard ; 


YD950F350 


1-1 e- 1 



File ’Manhpost.I’ Page Z 


Updated @ ZZ : 30 : 21 Mon Z9 Sep 1986 


page $ 

procedure EXECUTE_POSTPROCESSOR ? 
begin 

uhile USER_DECIDES_TO( 'Play back visual data* ) do 
PLAY_BACK_VI5UAL_DATA 
if USING_PLOTTER then 
begin 

CLEAR_SCREEN 

if USER_DECIDES_TO( ’Plot RMS flexure history’) then 
begin 

SHOWJ 5 LOTTER_INITIALIZATION_MESSAGE 
PLOT_RMS_FLEXURE_HI STORY 
end ? 

CLEAR_SCREEN 

if USER_DECIDES_TO( 'Plot control force & torque history* ) then 
begin 

SH0U_PL0TTER_I NITIALI ZATION_MESSAGE 
PLOT_CONTROL_FORCE_AND_TORQUE_HI STORY 
end ; 

CLEAR_SCREEN 

if USER_DECIDES_TO( ’Plot PL spinaxis attitude trajectory’) then 
begin 

SH0U_PL0TTER_INITIALIZATI0N_MESSA6E 
PLOT_PAYLOAD_SPINAXIS_ATTITUDE_TRAJECTORY 
end ; 

end j 

end ; 


¥9 15F4ABF 


1 . 1 G-Z 



File ’ Manhpost . I ’ Page 3 
$ page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep I98G 


procedure SHOU_PLQTTER_I NI TI AL I Z ATI ON_MESSAGE 5 
type 


L = string! 551 ; 

MSGARR = array ! 1..I4 ] of L 5 

const 


MSGLINE = MSGARR ! 
{ 1 


1 } 
Z> 
3> 
4> 
5} 
G> 
7} 
8 > 
9 > 
< 10 } 
{11 } 
{1Z> 
{13} 
{14} 


Z 3 4 G 

{ 1 Z 345678901 Z 34567890 1 Z 34567890 1 Z 34567890 1 Z 34567890 1 Z 345 } 
’Before proceeding, verify that an 8.5” x 11“ sheet of ’] 
’paper is present on the bed of the plotter and that the’] 
’electrostatic "hold" is on. The edges of the paper 
’should be against the louer and the left-hand stops on 
’the edges of the plotter bed. The long dimension of 
'the paper must be aligned with the short dimension of 
’the plotter bed. 


'Also verify that pens are installed in penholders #1 , 
’#Z, and #3. Recommended pen colors are as follous: 


Pen #1 
Pen #2 
Pen #3 


Black 

Red 

Green 


’] 

’] 

’] 

’] 

’] 

’] 

’] 

’] 

’] 

’] 

’] 

’] 


] ; 


var 


i : integer ; 

begin 

SHOULN < ” ) 

for i :« 1 to 14 do SHOULN ( FILL 1 Z+MSGLINEIiJ ) 
SHOULN < ” ) 
end 5 


¥FF0ABE4A 


1 


1 e- 3 



File ’Manhpost.I’ Page 4 
$ page $ 


Updated @ ZZ: 30:27 Mon Z9 Sep 198G 


procedure PLOT_CQNTRQL_FORCE_AND_JORQUE_HI STORY 5 
var 


BACKSPACES : longreal 
i : integer 
WINDOW : integer 


begin 

repeat 

{ nothing > 

until U5ER_DECIDES< ’Ready to plot’ ) 
uriteln ( PLT, ’DF’ > { reset plotter 

uriteln < PLT. ’ IPS00, 1000,7800. 10085’ ) { set scaling points 

uriteln ( PLT, ' SC- 1000, 1 5500,-3600, 1000* ) < select upper uindou 

uriteln ( PLT, ’ SP1 ’ ) < select pen #1 (black) 

uith SLOG* [01 do 


begin 

uriteln < PLT, ’PA8000, 1 Z00’ ) 

BACKSPACES -strlen< PROGSESSID ) / TWO 
uriteln ( PLT, ’ CP ’, BACKSPACES: 5: 1 ,’ ,0’ ) 

uriteln ( PLT, ’ LB’ .PROGSESSID, #3 ) f identify prog/session 

uriteln ( PLT, ’ PA8000, -3800’ ) 

BACKSPACES := -strlen( SIMDESCRIP ) / TWO 
uriteln ( PLT, ’CP’ ,BACKSPACES:5: I , ’ ,0’ ) 

uriteln ( PLT. ’ LB’ , SIMDESCRIP ,#3 ) < identify simulation 

end ; 

for i := I to 3 do 


begin < identifying line codes 

uriteln ( PLT. ’PA3000, ’ ,-( 9G0+ 1 Z0*i ) :6, ’ 5 PU’ ) i position 

uriteln ( PLT, ’CP1.0,-0.Z’ ) i for label 

case i of < label line segment 

1: uriteln ( PLT, ’LBX Component (Payload Body Axes) ’,#3 ) 

2: uriteln ( PLT, 'LBY Component (Payload Body Axes)', #3 ) 

3: uriteln ( PLT, ’LBZ Component (Payload Body Axes) ’,#3 ) 

end 5 f case i > 


end 5 

for WINDOW := 1 to Z do 

DRAW_CONTROL_DATA_CURVES ( WINDOW ) 

uriteln ( PLT, ’PU;SP0’ ) < put pen in holder 

end ; 


> 

} 

> 

> 


} 


> 


> 

> 

} 

> 


> 


5 

i 


5 

i 


¥76928402 


1 - 1 6-4 


File ’Manhpost . I ’ Page 5 
$ page $ 

procedure DRAW_CQNTROL_DATA_CURVES < WINDOW : integer ) ; 
var 


Updated @ 22:30:27 Mon Z9 Sep I98B 


i 

n 

X 

Y 


integer 

integer 

integer 

integer 


) 


begin 

uriteln < PLT, * SP1 
if WINDOW = Z then 
uriteln ( PLT, 

DRAW_CONTROL_XAXIS 

uriteln < PLT, ^12000,0* ) 

uriteln ( PLT, ’ CP0. 0,-2 . Z 5 LBTine (sec)’, #3 ) 

DRAW_CGNTROL_YAXIS 

uriteln ( PLT, ’PA0.0* ) 

PLT, *DI0,r ) 

= 1 

uriteln ( PLT, 
uriteln ( PLT, 

PLT, *011,0* ) 


i select pen #1 (black) } ; 


SC- 1000, 15500,-1000,3600* ) < select louer uindou > 3 


< identify tine axis 


uriteln ( 
if WINDOW 
then 
else 
uriteln < 
uriteln ( PLT, 
for i := 1 to 3 
begin 
case i of 


< vertical label slant 


SPZ* 

do 


) 


’CP-9.0, 1 .5sLBControl Force (lb)*, #3 ) 

’ CP- 1 1 . 0 , 1 .SsLBControl Torque (ft*lb)’,#3 ) 

< horizntl label slant 

< select pen #2 (red) 


PLT, 
PLT, 
PLT, 
i > 


’ LT1 ,0.3* 
* LT3, 1 .0’ 
*LT* 


if 


f or 


1 : uriteln ( 

Z: uriteln ( 

3: uriteln ( 
end ; { case 
WINDOW = 1 then 
begin 

uriteln ( PLT, 
uriteln ( PLT, 
end 3 

n := 1 to SLOG" 101 .NUMSLQGRECS do 
begin 


select 

select 

select 


dotted 
dashed 
sol id 


line 

line 

line 


’ PA2000, * , -( 9G0+ 1 20* i ) : 6, ’ }PD* ) 
* PA3000, * ,-( 960+1Z0*i ) :6, ’ ;PU* ) 


X : 
if 


round( 100* SLOG" In] . TIME ) 

<* 15000 then 
begin 

if SLOG" t n] . curnode = FREE 
then Y :■= 0 


else if WINDOW 
then Y : = 


uriteln 
end ; 


else 

PLT, 


= 1 

round( 100*SLOG"InJ .CFORC_PH_PBt i] ) 
round( 100* SLOG" I n] .CTORQ_PH_PB[i] ) 


'PA* ,X:6, ’ , ’ ,Y:G, * jPD* ) 


end 
uriteln ( 
end ; 


PLT, *PU* ) 


3 

} 3 


> J 
} 3 


drau line 
segment 


{ raise pen > 


end 


¥47ED6A4D 


1-1 B— 5 



File * Manhpost.I' Page B 
$ page $ 


Updated @ ZZ: 30:27 Mon Z9 Sep 138G 


procedure DRAW_CONTROL_XAXIS s 

var 


X : integer ; 


i drawing 1 -second & 5-second time tick marks } 


drau long tick mark 
draw short tick mark 
go to the spot 
louer pen & drau tick 


begin 

for X :=* 0 to 150 do 
begin 

if ( X mod 5 ) = 0 

then uriteln ( PLT, ’TLl. 0,1.0’ ) 
else uriteln ( PLT, ’TL0.5.0.5' ) 
uriteln < PLT, *PA’ ,< 100*X> :6, ’ ,0’ ) 
uriteln < PLT, ’PDsXT’ ) 
end ; 

uriteln ( PLT, ’PU’ > 
for X :■ 1 to 15 do 

begin -C putting numeric label on every 10-second tick mark 

uriteln ( PLT, ' PR’ , ( 1 000*X ) : G, * ,0’ ) 
if X < 10 

then uriteln ( PLT, ’CP-1 .0,-1 .Z’ 
else uriteln ( PLT, * CP- 1 . 5, - 1 . Z ’ 
uriteln < PLT, ’LB’ ,( 10*X) : 1 ,#3 ) 
end ,• 

end 5 


< raise pen 


{ go to tick mark 


back up 1.0 spaces 
back up 1.5 spaces 
print the label 


procedure DRAU_CONTROL_YAXIS ; 


var 


Y : integer ; 


begin 

for Y := -10 to 10 do 

begin { drawing 1-lb (or ft*lb) & 5-lb (or ft*lb) tick marks } 

if ( Y mod 5 ) = 0 

then uriteln ( PLT, ’TLl. 0,1.0* ) 
else uriteln ( PLT, ’TL0.5,0.5’ ) 
uriteln < PLT, *Pfl0, ’ , < 100*Y ) : G ) 
uriteln < PLT, ’PD;YT’ ) 
end ; 

uriteln < PLT.’PU* ) 
for Y := -1 to 1 do 

begin < putting numeric labels on 0 - & 10 -lb (or ft*lb) ticks } 
uriteln ( 
if Y < 0 


{ drau long tick mark > 

< drau short tick mark > i 

< go to the spot > 5 

< louer pen & drau tick > j 


f raise pen 


end 


> 5 


PLT, 

'PA0, ’ , ( 1 000* Y ) : G ) 

< 

go to tick mark 

y s 

uriteln ( PLT, ’CP-4. 0,-0. 2* ) 
if Y < 1 

< 

“-I ©" 5 back up 4 

i 

•then 

uriteln ( PLT, ’CP-Z.0,-0.2’ 

) < 

,, 0 ,, i back up Z 

> 

else 

uriteln ( PLT, ’CP-3.0, -0.2’ 

) i 

"10 ° 5 hack up 3 

> ; 

PLT, 

’LB’ ,( 1 0*Y ) : 1 ,#3 ) 

< 

print the label 

} ; 


end 


¥D1 387638 


i_i e— e 



File ’Manhpost.I’ Page 7 
$ page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep 198G 


procedure PLQT_PAYLQAD_SPINAXI5_ATTITUDE_TRAJECT0RY ? 


var 


BACKSPACES : longreal ; 
i : integer ; 


begin 

repeat 

< nothing > 

until USER_OECIDES( ’Ready to plot’ ) 
GET_STROKE_AND_PLREV_NUMBER_FROM_U5ER 
uriteln ( LP ) 


uriteln ( LP,’ Plot Start Tine Payload Attitude uirt I Axes’ ) 
uriteln ( LP, ’Symbol Rev # (sec) Pitch Yau Roll ’ ) 
uriteln ( LP ) 


uriteln ( PLT, ’DF’ ) 

uriteln < PLT, ’ IP500, 1000,7800, 10085’ ) 
uriteln ( PLT, ’ SC- 1 1000, 1 1000,- 1 3750, 1 3750’ 
uriteln < PLT, ’ SP1 ’ ) 
uith SLOG* 10] do 


l reset plotter } 
{ set scaling points > 
{ define uindou } 
{ select pen #1 (black) > 


begin 

uriteln < PLT, ’PA0, 13500’ ) 

BACKSPACES :» -strlen( PR06SESSID ) / TWO 
uriteln ( PLT, ’ CP’ .BACKSPACES: 5: 1 ,’ ,0’ ) 

uriteln ( PLT, ’ LB’ ,PR0GSESSID,#3 ) 

uriteln ( PLT, ’PA0, -14000’ ) 

BACKSPACES := -strlen( SIMDESCRIP ) / TWO 
uriteln ( PLT, ’CP’ .BACKSPACES: 5: 1 , ’ ,0’ ) 
uriteln ( PLT, ’LB’ .SIMDESCRIP, #3 ) 

end 5 

DRAU_ATTI TUDE_XAXI S 
uriteln ( PLT, ’PA-9600,0’ ) 
uriteln ( PLT, ’CP0.0,-Z.1’ ) 

uriteln < PLT, ’LBPL Yau (deg, urt I axes)’, #3 
DRAW_ATT I TUDE_YAXI S 
uriteln ( PLT, ’DI0,1’ ) 

uriteln ( PLT, ’PA0.7500’ ) 


< identify prog/session } 


{ identify simulation > 


) 


{ vertical label slant } 


uriteln ( PLT, ’CP-6.0,1.6’ ) 


uriteln < PLT, ’LBPL Pitch (deg, urt 
uriteln ( PLT, ’DI1,0’ ) 
DRAW_ATTITUDE_TRAJECTORY 
uriteln ( PLT, ’PUjSP0’ ) 

ST ART_NEU_P AGE 
end ; 


I axes ) ’ ,#3 ) 

t horizntl label slant } 

{ put pen in holder } 


3 

5 

» 


3 

3 

3 


3 

3 

3 

3 

3 

3 

3 


¥9FB249FZ 


1 - 1 Et-V 



File ’ Manhpost . I ’ Page 8 
* page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep 198G 


procedure GET_STROKE_AND_PLREV_NUMBER_FROM_USER ; 
var 


VALUE : integer j 


begin 

repeat 

VALUE := STROKE 

VALUE 5= INTEGER_INPUT( ’Spinup/de6pin stroke number’ .VALUE, Z ) 
if VALUE < 0 then 
begin 

SOUND_ALARM 
M0VE_UP 
end ; 

until VALUE >= 0 ; 

STROKE := VALUE 
repeat 

VALUE := PLREV 

VALUE := INTEGER_INPUT( ’Initial payload rev number VALUE, Z ) 
if VALUE < 0 then 
begin 

SOUNQ.ALARM 
MOVE.UP 
end i 

until VALUE >= 0 ? 

PLREV := VALUE 
end ; 


¥D0Z3E443 


1 


1 G— S 



File ’Manhpost.I’ Page 9 
$ page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep 1986 


procedure DRAW_ATTITUDE_XAXIS 5 
var 


D : longreal ! 
X : integer ; 


begin 

for X := -Z 0 to 20 do 

begin { drawing 1-deg & 5-deg yau tick narks 


if < X nod 5 )= 0 

then uriteln ( PLT, ’TLl. 0,1.0* ) 
else uriteln ( PLT, ’TL0.5.0.5’ ) 
uriteln < PLT, ’ PA’ , ( -500*X ) : 6 , ’ ,0* ) 
uriteln < PLT, ’PD;XT’ ) 
end ; 

uriteln < PLT, ’PU’ ) 
for X :* -4 to 4 do 
if X <> 0 then 


f drau long tick nark 

< drau short tick nark 

< go to the spot 

{ lower pen & draw tick 

< raise pen 


{ put nuneric label on long tick nark 


begin 

uriteln ( PLT, ’PA’ ,( -Z500*X) :6, ’ ,0’ ) { go to the tick 

if abs( X ) < Z 

then D : = -0.4 
else D := -0.9 
if X < 0 then D D - 1 

uriteln ( PLT, ’CP’ ,D:4: 1 , ’ ,-| . 15’ ) { go to 1st char pos 

uriteln ( PLT, ’LB’ ,( 5*X) : 1 ,#3 ) { print the label 

end i 


end i 


> 

> 

> ; 

} ; 

> 5 

> 5 

> 

> 5 


> 

> 


¥747DZBDD 


1 - 1 6 - 3 



File ’Manhpost.I’ Page 10 
$ page $ 


Updated fi 22:30:27 Mon 29 Sep 198B 


procedure DRAU_ATTI TUDE_YAXI S ; 
var 


D : longreal ; 
Y : integer ; 


begin 

for Y := -25 to 25 do 
begin 

if < Y nod 5 ) « 0 

then urite ( PLT, 
else urite < PLT, 
uriteln ( PLT, ’PAG, 1 , 
uriteln ( PLT, ’PD; YT* 
end ; 

uriteln < PLT,’PU’ ) 
for Y :* -5 to 5 do 
if Y <> 0 then 


{ drauing 1-deg & 5-deg pitch tick narks > 


* TL 1 - 0,1.0;’ > { drau long tick nark > 

’TL0.5.0.5;’ ) { drau short tick nark > 

(500*Y):6 ) < go to the spot > 

) < louer pen & drau tick } 

{ raise pen > 


{ put nuneric label on long tick nark } 


begin 

uriteln ( PLT, ’PA0, ’ , < 2500*Y> : 6 > { go to the tick > 

if abs< Y ) < 2 

then D := -2.2 
else D := -3.2 
if Y < 0 then D : = D - 1 

uriteln < PLT, ’CP’ ,D:4: 1 , ’ ,-0.2’ ) { go to 1st char pos > 

uriteln ( PLT, ’ LB’ , ( 5* Y ) : 1 ,#3 ) { print the label > 

end ; 


end ; 




7 


¥66C38EA3 


1 


1 6— 1 <Z> 



File ’Manhpost.I’ Page 11 
$ page $ 

procedure DRAU_ATTITUDE_TRAJECTORY i 
var 


n 

OLDMODE 

ROLL_DECREASING 

ROLLNOU 

X 

Y 


integer 

CNTRLMODE 

boolean 

longreal 

integer 

integer 


Updated @ ZZ:30:Z7 Mon Z9 Sep 198B 


begin 

ROLL_DECREASING := false 
ROLLSAV := ZERO 
OLDMODE :» FREE 

PLOT_ANGULAR_MOMENTUM_DI RECTI ON ( SLOG* 1 1 ] . ANGMO_P_I ) 
for n := 1 to SLOG* [ 0] . NLJMSLOGRECS do 
with SLOG* [ n] do 
begin 

if curnode - FREE 


then 

begin 

if OLDMODE <> FREE then 
begin 

STROKE := STROKE + 1 

PLOT_ANGULAR_MOMENTUM_DI RECTI ON < ANGM0_P_I ) 
end ; 

ROLLNOU := abs< ANGDEG< PYR_I_PBt31 ) ) 
if ROLLNOU < ROLLSAV 


then 

ROLL_DE CREASING :» true 


else 

begin 

if ROLL_DECRE ASI NG then 

PL0T_REV_I DENTIFICATION_SYMBOL ( X, Y ) 
ROLL.DE CREASING := false 
end j 

ROLLSAV ROLLNOU 

TIMESAV := TIME 

PATTSAV := EULDEG( PYR_I_PB ) 

X :-= -round< 500 * PATTSAVtZl ) 

Y := round< 500 * PATTSAV [ 1] ) 
uriteln ( PLT, 'PA' ,X:B,’ ,Y:B,'|PD’ ) 
end 

else 

if OLDMODE - FREE then 

uriteln ( PLT, ’PU’ ) 


OLDMODE ! = curnode 
end j 

end s 


¥ 1 DBA 1 0Z A 


i . i e— i i 



File ’Manhpost.I’ Page 12 
$ page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep 1986 


procedure PLOT_ANGUL AR_MOMENTUM_DI RECTI ON ( ANGMO : VECTOR ) ; 
var 


ANGMOZX 

PCH 

X 

Y 

YAW 


longreal 

longreal 

integer 

integer 

longreal 


begin 


STROK E_M0D_3 :=■ STROKE nod 3 
case STR0KE_M0D_3 of 

0: uriteln ( PLT , ’ SP3j LT’ ) 

Is uriteln (PLT, ’ SPZ 5 LT1 ,0. 3’ ) 
Z: uriteln (PLT, ’SP1 ;LT3, 1 .0’ ) 
end ; { case STR0KE_M0D_3 > 
ANGMOZX := sqrt( sqr( ANGM0I31 ) + 
YAW := DEGPERRAD * ATANZ( ANGMOtZ] 
PCH :» DEGPERRAD * ATANZ( -ANGMOt 3] 
X -round( S00 * YAW ) 

Y := round( 500 * PCH ) 


t select green solid line 

< select red dotted line 

{ select black dashed line 

sqr( ANGMOIU ) ) 

, ANGMOZX > 

, ANGMOMJ ) 


> 

} 

} 


! 

; 

! 

! 

I 


uriteln ( PLT, ’PUsPA’ ,X: 6, ’ , ’ , Y: 6 > 
uriteln ( PLT, , PR-300,0!PD;PRB00,0iPU’ ) 
uriteln ( PLT, ’PR-300,-3005PDiPR0,600 ? PU’ ) 


i go to the spot } s 
■£ drau horizntl line > ; 
{ drau vertical line } j 


end j 


¥ 1 5BE4Z7E 


1 


1 e— 1 z 



Updated @ ZZ:30:Z7 Mon Z9 Sep 1986 


File ’Manhpost.I’ Page 13 
$ page $ 

procedure PLOT_REV_IOENTIFICATION_SYMBOL < XO, YO : integer ) 5 
const 

R = 550 5 < radius of shell enclosing symbol > 


var 


C 

char ; 

Ci 

longreal 5 

CINC 

longreal 1 

CL 

longreal 

i 

integer 

N 

integer 

Si 

longreal 

SINC 

longreal 

X 

integer 

Y 

integer 


begin 

PLREV := PLREV 
if PLREV < 10 
then C : = 
else C :■ 
uriteln ( PLT, 
uriteln < PLT, 


+ 1 


chr< 48+PLREV ) 
chr( 55+PLREV ) 

’LT’ ) 

’ SM’ ,C , ’ ;PR0,0;SM’ ) 
uriteln < PLT, ’PU;PA’ ,X0 : 6 YO+R) :6 ) 

uriteln < PLT, ’PD’ ) 


Ci 

Si 

N 

CINC 
SINC 
for i 


:= 1 
begin 
CL 


ONE 

ZERO 

STROKE + 3 
cos< TUOPI 
sin< TWOPI 
to N do 


Si 

CL 


* SINC 

* SINC 
R * Si ) 

R « Ci ) 


:=■ Ci 

Ci := CL * CINC - 
Si := Si * CINC + 

X := round( XO + 

Y := round< YO + 
uriteln ( PLT, 1 PA’ , X: 6 , ’ , ' , Y : 6 ) 
end ; 

uriteln < PLT, ’PUsPA’ ,X0:6, ’ , ’ ,Y0:6 ) 
uriteln ( PLT, ’PD’ ) 

case STROK E_M0D_3 of 
0: uriteln < PLT, 

1 : uriteln ( PLT, 

Z: uriteln < PLT, 
end 5 { case STROK E_M0D_3 } 
uriteln < LP, ’ " ’ ,C: 1 , ’ ” ’ ,PLREV:7 

TIMESAV: 1 Z: 3, ’ ’ 

PATTSAVt 11 : 9 : Z 
PATTSAVt Z 1 : 9 : Z 
PATTSAVt 31 : 9: Z , ’ (deg) 

end 5 


’LT’ ) 
’LT1 ,0.3’ 
’LT3.1.0’ 


< bump the rev counter > ? 

< symbols = ’ 1 ’ . . ' 9 ’ > 

< symbols = ’A’..’Z’ >5 

< select solid line > 

{ plot the symbol > 

{ move to first corner of > 

< shell & louer pen > 

{ initialize cosine > 

< initialize sine > 

{ number of shell corners > 

< cos of angle increment } 

■C sin of angle increment > 


{ save last cosine 1 

{ update cosine > 

{ update sine > 

{ compute coordinates of > 
< next corner of shell > 

{ drau line to next corner > 

< restore pen position } 

{ louer pen } 

< restore line style 1 

{ solid } 
< dotted } 
f dashed > 

{ send detailed info to } 
{ standard print file } 


¥C1CDZ86D 


1 . 1 e- 1 3 



File ’Manhpost.I’ Page 14 
$ page $ 


Updated @ 22:30:27 Mon 29 Sep 198G 


procedure PLOT_RMS_FLEXURE_HI STORY i 


BACKSPACES : longreal i 
i : integer ; 


begin 

repeat 

{ nothing > 

until USER_DECIDES( ’Ready to plot’ 
uriteln ( PLT , ’DF’ ) 
uriteln ( PLT, ’ I P500, 1000,7800, 10085’ 
uriteln ( PLT, ’SC-200, 4800, -1200, 1440’ 
uriteln ( PLT, ’ SP 1 ’ ) 
uith SL0G A [ 0] do 
begin 

uriteln ( PLT, ’ PA2250, 1 560’ 
BACKSPACES := -strlen< PR06SESSID ) 
uriteln ( PLT, ’CP’ , BACKSPACES^: 1 , 
uriteln < PLT, ’ LB’ ,PR0GSESSID,#3 
uriteln < PLT, ’PA2250.-1240’ 
BACKSPACES := -strlen< SIMDESCRIP ) 
uriteln ( PLT. ’CP’ , BACKSPACES: 5: 1 , ’ 
uriteln < PLT, ’LB’ ,SIMDESCRIP,#3 


end s 

i := 1 to 3 do 
begin 

uriteln ( PLT, ’F 
uriteln < PLT, ’C 
case i of 

1 : uriteln ( 
2: uriteln ( 
3: uriteln ( 
end ; < case 


) 

/ TWO 
, 0 ’ ) 
) 
) 

/ TWO 


reset plotter 
set scaling points 
define uindou 
select pen #1 (black) 


identify prog/session 


identify simulation 


f identifying line codes 
' PA800, ' , ( 1 000-72* i ) : 6, ’ ;PU’ ) < position 

’CPI. 0,-0. 2’ ) i for label 

< label line segment 

'LBX Component ( Creuman Reach Axes) ’,#3 ) 
VLBY Component (Creuman Reach Axes) ’,#3 ) 
’LBZ Component (Creuman Reach Axes)', #3 ) 


DRAU_FLEXURE_DATA_CURVES 
uriteln ( PLT. ’PUiSP0’ ) 
end ; 


put pen in holder 


Y0BECBG6C 


1 . 1 6 - 1 4 



File ’ Manhpost . I ’ Page 15 
$ page $ 


Updated @ ZZ:30:Z7 Mon Z9 Sep 1986 


procedure DRAW_FLEXURE_DATA_CURVES i 
var 


i : integer ? 
n : integer ; 
X : integer j 
Y : integer ; 


begin 


uriteln 

< 

PLT, 

’SPl’ ) 



select pen #1 

(black) 

> 

9 

DRAU_FLEXURE_XAXIS 







5 

uriteln 

< 

PLT, 

’PfttSW,®' ) 







J 

uriteln 

< 

PLT, 

* CP0.0, -Z . Z 9 LBTime (sec)’ 

,#3 ) 

< 

identify 

t ine 

axis 

> 

5 

DRAW_FLEXURE_YAXI S 







» 

uriteln 

< 

PLT, 

’PA0,0’ ) 







5 

uriteln 

< 

PLT, 

’Di0,r ) 


< 

vertical 

label 

slant 

> 

« 

uriteln 

< 

PLT, 

* CP-8.0, 1 . 5sLBRMS Flexure 

(in)’ 

,#3 ) 




; 

uriteln 

< 

PLT. 

’011,0’ ) 


< 

horizntl 

label 

slant 

> 

5 

uriteln 

< 

PLT, 

’ SPZ ’ ) 



select pen #2 

( red) 

> 

5 


for i := 1 to 3 do 


begin 
case i of 


1 : uriteln ( PLT, 'LT1 ,0.3’ > < 
Z: uriteln ( PLT, ’LT3.1.0’ ) < 
3: uriteln ( PLT, ’LT’ ) < 
end ; < case i > 

uriteln ( PLT, ’PA500, ’ , ( 1000-7Z*i ) : 6, * ;PD’ 
uriteln < PLT, • PA800, • , ( 1000-7Z*i ) : 6, • }PU’ 
for n :=* 1 to SLOG" [ 0] . NUMSLOGRECS do 


select dotted line 
select dashed line 
select solid line 

) 

) < drau line segment 


> 9 

> 9 

> 9 


} 9 


begin 

X s* round< 100* SLOG* In] .TIME) { seconds 1 ; 

if X <= 4500 then 


begin 

Y := round< 100* IZ#SLOG A (nl .FLEX_RO_R[ il ) { inches > 5 

uriteln ( PLT, ’PA’ ,X:6, ’ , ’ ,Y:6, ’ 9 PD’ ) 5 

end 9 

end ; 

uriteln < PLT, ’PU’ ) , 

end ; 

end 9 


¥10189318 


1 . 1 e~ 1 5 



File ’ Manhpost . I ’ Page 16 
$ page $ 


Updated @ 22 : 30: 27 Mon 29 Sep 1986 


procedure DRAILFLEXURE^XAXIS ; 
var 


X : integer ; 


begin 

for X 0 to 45 do 

begin f drauing 1-second & 5-second tine tick narks > 

if ( X nod 5 ) = 0 

then write < PLT, * TL 1 . 0,1.0?’ ) { draw long tick nark > 

else write < PLT, ’TL0.5,0.5;’ > { draw short tick nark > 


writeln < PLT, * PA* , < I00*X ) : 6 , ’ ,0* ) { go to the spot > ; 

writeln < PLT, *PD;XT* ) { lower pen & draw tick > ; 

end ; 

writeln ( PLT, *PU* ) { raise pen > ; 

for X : ® 1 to 9 do 

begin < putting nuneric label on every 5-second tick nark > 

write ( PLT, ’PA* , ( 500*X ) : 6, * ,0; * ) { go to tick nark > ; 

if X < Z 

then write ( PLT, ’CP-0.5,- 1 .2; * ) { back up 0.5 spaces > 

else write ( PLT, * CP- 1 . 0 , - 1 . 2 ; * ) < back up 1.0 spaces } ; 

writeln < PLT, * LB* , ( 5*X > : 1 ,tt3 ) < print the label > ; 

end ; 

end ; 


procedure DRA W JF LEX URE_Y AX I S ; 
var 

Y : integer ; 

begin i drawing 1-inch & 2-inch tick narks > 

for Y := -6 to 6 do 
begin 

if ( Y nod 2 ) * 0 

then write < PLT, *TL1. 0,1.0;* ) i draw long tick nark > 

else write < PLT, *TL0.5,0.5;’ ) < draw short tick nark > 


writeln ( PLT, * PA0, * , < 100* Y ) : 6 ) { go to the spot > ; 

writeln ( PLT, *PD;YT* ) < lower pen & draw tick > ; 

end ; 

writeln ( PLT, *PU* ) < raise pen } ; 

for Y :* -3 to 3 do 

begin < putting nuneric labels on Z-inch tick narks > 

write ( PLT, *PA0, * ,( Z00*Y> :6, * ; ’ ) ; 

if Y < 0 

then writeln ( PLT, * CP-3. 0, -0. 2 * ) { back up 3 spaces } 

else writeln < PLT, * CP-2 . 0, -0. 2 * ) i back up 2 spaces > ; 

writeln < PLT, * LB* , ( 2* Y ) : 1 ,#3 ) ; 

end ; 

end ; 


end ; < nodule MANHPOST & File ’Manhpost. I* > 


¥7D61 C 1 4 1 


i - i 6- i e 



2. TEST CASE RESULTS FROM HP-3000 MODEL S40 HOST COMPUTER 


Z - i 


- Palapa Capture 


2 - 1 


x 


File ’ plapacap.R 1 Page 1 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:32:10 Mon 03 Nov 1986 


"rmsl" Translational Alacrity Matrix for RMS Flexure 


Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 
Alacrity matrix. 


element [ 1 , 1 ] . . . ( ft /sec/sec/1 b ) 0.05000 

element U,Z] (ft/sec/sec/lb) 0.00000 

element [1,3] ( f t/sec/sec/lb > 0.00000 

element [2,1] (ft/sec/sec/lb) 0.00000 

element [2,2] (ft/sec/sec/lb) 0.05000 

element [2,3] ( ft/sec/sec/ lb ) 0.00000 

element [3,1] ( f t/sec/sec/lb) 0. 01750 

element [3,2] ( f t/sec/sec/lb ) 0.01750 

element [3,3]... ( f t/sec/sec/lb) 0. 05000 


¥37FE283E 


2 . 1-1 



File 1 plapacap. R’ Page Z 


Updated @ 08:44:25 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 10:32:21 Mon 03 Nov 1986 


"rnsl” Translational Damping Constant Matrix for RMS Flexure 


Damping 

constant 

matrix , 

element 

ii.il... 

. ..( lb/ft/sec) 

10.00000 

Damping 

constant 

matrix , 

element 

11 ,Z1 . . . 

...(lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

11,31... 

...(lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

el ement 

12,11... 

...(lb/ft/sec> 

0.00000 

Damping 

constant 

matrix , 

element 

12,21... 

...(lb/ft/sec) 

1 0. 00000 

Damping 

constant 

matrix , 

element 

12,31 . . . 

. . . ( lb/ft/sec ) 

0.00000 

Damp i ng 

constant 

matrix , 

element 

13,11 .. . 

...(lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

13,21... 

. . . ( lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

13,31... 

. . .(lb/ft/sec) 

10.00000 


¥A07D7FDD 


Z 


1 -z 



File ’ plapacap. R’ Page 3 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:32:36 Mon 03 Nov 1986 


"rns 1 " Translational Spring Constant Matrix for RMS Flexure 


Spring 

constant 

matrix , 

element 

ii.u 

(lb/ft) 

Z0. 00000 

Spring 

constant 

matrix , 

element 

[1,2] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[1,3] 

(lb/ft) 

0. 00000 

Spring 

constant 

matrix , 

element 

[2,1] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[2,2] 

(lb/ft) 

40.00000 

Spring 

constant 

matrix , 

el ement 

[2,3] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[3,1] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[3,2] 

(lb/ft) 

0. 00000 

Spring 

constant 

matrix , 

element 

[3,3] 

(lb/ft) 

150.00000 


¥D60BA76B 


2 


1-3 



File ’ plapacap.R’ Page 4 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 10:32:52 Mon 03 Nov 1986 


non" Orbiter Inertia Data 


Orbiter weight (lb) 

CM STA (structural x coordinate of nass center) ....( in) 

CM BL ( structural y coordinate of nass center )....( in) 

CM UL (structural z coordinate of nass center )....( in) 

Ixx about CM, structural coordinates (slug*ft*ft) 

Iyy about CM, structural coordinates (slug*ft*ft) 

Izz about CM, structural coordinates (slug*ft*ft) 

Pxy about CM, structural coordinates (slug*ft*ft) 

Pxz about CM, structural coordinates (slug*ft*ft) 

Pyz about CM, structural coordinates <slug*ft*ft) 


208342.00000 
1 107.80000 
0. 00000 
375.90000 
921642.70000 
6861 141.90000 
7148541.30000 
12353.70000 
228384.60000 
484.50000 


¥ 1 A73641 3 


2 - 1 -4 



File ’plapacap.R’ Page 5 


Updated @ 08:44:Z5 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 198G) Run @ 10:33:09 Mon 03 Nov 198G 


"plapa" Payload Inertia Data 


Payload weight (lb) 

CM STA ( structural x coordinate of mass center )....( in) 

CM BL (structural y coordinate of nass center )....( in) 

CM UL (structural z coordinate of nass center )....( in) 

Ixx about CM, structural coordinates (slug*ft*ft) 

Iyy about CM, structural coordinates (slug*ft*ft) 

Izz about CM, structural coordinates (slug*ft*ft) 

Pxy about CM, structural coordinates (slug*ft*ft) 

Pxz about CM, structural coordinates (slug*ft*ft) 

Pyz about CM, structural coordinates (slug*ft*ft) 


1ZBZ. 00000 
-38.Z0000 
0.00000 
0. 00000 
Z 90. 90000 
Z 80. 75470 
Z54. 94530 
0. 00000 
0. 00000 
1 .8031 Z 


¥BCE8A1E8 


2.1-5 



File ’plapacap.R’ Page G 


Updated @ 08:44:25 Tue 04 Nov 198G 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 1986) Run 6 10:33:25 Mon 03 Nov 1986 


"plapa" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point (in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter WL of PL handling point (in) 

Payload STA of PL handle (in) 

Payload BL of PL handle (in) 

Payload WL of PL handle (in) 

Creuman reach limit from RO in +/- Rx direction. ...( in) 

Crewman reach limit from RO in +/- Ry direction. ...( in) 

Creuman reach limit from RO in +/- Rz direction (in) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (%) 


800. 00000 
24.00000 
G00. 00000 
-132. 90800 
0. 00000 
1 1 . 50000 
24.00000 
24.00000 

24.00000 
6.00000 
6 . 00000 
6.00000 
1.20000 

10.00000 


¥BA44B2C4 


Z - 1 - 6 



File ’plapacap.R’ Page 7 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:33:46 Mon 03 Nov 1986 


"plapa" Attitude Parameters for Payload Flight Control 


Creuman pitch urt Orbiter body axes (deg) 

Crewman yam urt Orbiter body axes (deg) 

Crewman roll wrt Orbiter body axes (deg) 

Desired Payload pitch urt Creuman body axes (deg) 

Desired Payload yaw wrt Creuman body axes (deg) 

Desired Payload roll urt Creuman body axes (deg) 

Positive PL pitch limit urt desired attitude (deg) 

Positive PL yau limit urt desired attitude (deg) 

Positive PL roll limit urt desired attitude (deg) 

Negative PL pitch limit urt desired attitude (deg) 

Negative PL yau limit urt desired attitude (deg) 

Negative PL roll limit urt desired attitude (deg) 

PL pitch tolerance urt desired attitude (deg) 

PL yau tolerance urt desired attitude (deg) 

PL roll tolerance urt desired attitude (deg) 

Nominal maneuver rate about PL Bx axis. ....... (deg/sec) 

Nominal maneuver rate about PL By axis (deg/sec) 

Nominal maneuver rate about PL Bz axis (deg/sec) 

Maneuver rate tolerance (X) 


0. 00000 
90.00000 
0.00000 
-90.00000 
0.00000 
0.00000 
90. 00000 

90. 00000 
360.00000 
-90.00000 
-90.00000 

-360.00000 
5 . 00000 
5.00000 

5 . 00000 

1 .00000 
1 . 00000 
1 . 00000 

10.00000 


¥99438123 


Z 


1 -V 



File ’ plapacap.R’ Page 8 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:34:02 Mon 03 Nov 1986 


M plapa'‘ Force & Torque Parameters for Payload Flight Control 


Spinup axial (PL Bx ) force (lb) 

Spinup normal (PL By) force (lb) 

Spinup tangential (PL Bz ) force . (lb) 

Despin axial (PL Bx ) force (lb) 

Despin normal (PL By) force . (lb) 

Despin tangential (PL Bz ) force , (lb) 

Axial (PL Bx ) force limit for capture (lb) 

Normal (PL By) force limit for capture,... (lb) 

Tangential (PL Bz ) force limit for capture ...(lb) 

Roll (PL Bx ) torque limit for capture (ft*lb) 

Pitch (PL By) torque limit for capture (ft*lb) 

Yau (PL Bz ) torque limit for capture (ft*lb) 


Time constant for computing desired accelerations (sec) 


0 . 00000 
0. 00000 
0. 00000 
0,00000 
0.00000 
0.00000 
2.00000 
2.00000 
2 . 00000 
2.00000 
2.00000 
2 . 00000 
5.00000 


¥ 1 279CD59 


2 


i - e 



File ’ plapacap.R' Page 9 


Updated @ 08:44:25 Tue 04 Nov 1986 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 1986) Run @ 10:34:26 Mon 03 Nov 1986 


“plapa" Initial Conditions for the Simulation 


Orbiter pitch urt I axes (deg) 

Orbiter yau urt I axes (deg) 

Orbiter roll urt I axes (deg) 

Orbiter Bx component of ang vel urt I axes. . ..( deg/sec) 

Orbiter By component of ang vel urt I axes. ...( deg/sec) 

Orbiter Bz component of ang vel urt I axes. ...( deg/sec) 

Rx component of PL handle position (ft) 

Ry component of PL handle position (ft) 

Rz component of PL handle position (ft) 

Payload CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle ........( deg) 

Payload uobble cl ok angle (deg) 


0.00000 
0.00000 
0. 00000 
0.00000 
0 . 00000 
0.00000 
0.00000 
0.00000 
0.00000 
0 . 00000 
0.00000 
0. 00000 
0. 00000 
0.00000 
0.00000 
6.00000 
10.00000 
0.00000 


¥996B040B 


2 


1-9 



File ’plapacap.R* Page 10 Updated @ 0S:44:Z5 Tue 04 Nov 1986 

MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:34:28 Mon 03 Nov 1986 
Palapa Capture 


Tine = 0. 

000 

DesMode 

= CAPTURE 

CurMode 

= CAPTURE 


PL Nonspin = 

6.00 

Wobble 

Cone = 10.00 

Uobble 

Clok = - 

-7.4L-17 


CntrldH: R 

-Z.00 

0.00 

-Z.00 Torq 


0.053 

-0.000 

Fore 

Cntrl@H:PB 

-Z.00 

0.00 

Z.00 Torq 

-0.000 

0.053 

0.000 

Fore 

PB flxes:PD 

0.00 

0.00 

0.00 PYR 

6.000 

0.008 

- 1 . Z07 

Rate 

PL Hndl : R 

-0.00 

0.00 

0.00 Pos 

0.001 

-0.066 

-0. 000 

Vel 

PB fixes: OB 

-90.00 

0. 00 

90.00 PYR 

6. 000 

0.008 

- 1 . Z07 

Rate 

PL CM : OB 

Z5.65 

1.04 

-Z6.57 Pos 

0.000 

0.000 

0.000 

Vel 

PL Rot K E 

1.65 







PLfingno: I 

-90.00 

10.00 

30.93 PYMag 

0.000 

5.371 

30.463 

Hxyz 

PB fixes: I 

-90. 00 

0.00 

90.00 PYR 

6.000 

0.008 

- 1 . Z07 

Rate 

PL CM : I 

-0.00 

-0.96 

-7.89 Pos 

0.000 

0.000 

0.000 

Vel 

OB fixes: I 

0. 00 

0. 00 

0.00 PYR 

0.000 

0.000 

0. 000 

Rate 

Orb CM : I 

-Z5.65 

-Z.00 

18.68 Pos 

0.000 

0.000 

0.000 

Vel 


Tine Stepsize 

0.000 0.200 


¥CB1 8281 8 


Z 


1 - 1 <Z> 



File ’plapacap. 

R’ Page 1 1 


T ine 

zFlex 

DesMode 

CurMode 

T_PBx 

( sec) 

( in ) 



( ft*lb) 

0. 000 

0.00 

C ftP JURE 

CftPTURE 

-Z.00 

0. 100 

0.00 

CftPTURE 

CAPTURE 

-Z.00 

0.200 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

0.300 

0. 00 

CftPTURE 

CftPTURE 

-Z.00 

0.400 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

0.500 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

0.600 

0.00 

CAPTURE 

CAPTURE 

-Z.00 

0.700 

0.00 

CftPTURE 

CAPTURE 

-Z.00 

0.800 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

0.900 

0. 00 

CAPTURE 

CAPTURE 

-Z.00 

1.000 

0.00 

CAPTURE 

CAPTURE 

-Z.00 

1 . 100 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

1.200 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

1.300 

0.00 

CftPTURE 

CAPTURE 

-Z.00 

1.400 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

1.500 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

1.600 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

1 .700 

0.00 

CAPTURE 

CAPTURE 

-Z.00 

1.800 

-0.00 

CftPTURE 

CAPTURE 

-Z.00 

1 .900 

-0. 00 

CftPTURE 

CftPTURE 

-Z.00 

2.000 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

2.100 

-0.00 

CftPTURE 

CAPTURE 

-Z.00 

2.200 

-0.00 

CAPTURE 

CAPTURE 

-Z.00 

2.300 

-0. 00 

CftPTURE 

CftPTURE 

-Z.00 

2.400 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

2.500 

-0.00 

CftPTURE 

CftPTURE 

-Z.00 

2.600 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

2.700 

-0.00 

CAPTURE 

CAPTURE 

-Z.00 

2.800 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

2.900 

0. 00 

CftPTURE 

CftPTURE 

-Z.00 

3.000 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

3. 100 

0.00 

CAPTURE 

CAPTURE 

-Z.00 

3.200 

0. 00 

CAPTURE 

CftPTURE 

-Z.00 

3.300 

0. 00 

CftPTURE 

CAPTURE 

-Z.00 

3.400 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

3.500 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

3.600 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

3.700 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

3.800 

0.00 

CftPTURE 

CftPTURE 

-Z.00 

3.900 

-0.00 

CftPTURE 

CftPTURE 

-Z.00 

4.000 

-0.00 

CAPTURE 

CAPTURE 

-Z.00 

4. 100 

-0.00 

CAPTURE 

CAPTURE 

-Z.00 

4.200 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

4.300 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

4.400 

-0. 00 

CAPTURE 

CAPTURE 

-Z.00 

4.500 

-0.00 

CftPTURE 

CftPTURE 

-Z.00 

4.600 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

4.700 

-0.00 

CAPTURE 

CftPTURE 

-Z.00 

4.800 

-0.00 

CftPTURE 

CftPTURE 

-Z.00 

4.900 

-0.00 

CftPTURE 

CftPTURE 

-Z.00 

5.000 

-0.00 

CAPTURE 

CAPTURE 

-Z.00 

5. 100 

0. 00 

CftPTURE 

CAPTURE 

-Z.00 

5.200 

0. 00 

CftPTURE 

CftPTURE 

-Z.00 

5.300 

0.00 

CftPTURE 

CAPTURE 

-Z.00 

5.400 

0. 00 

CAPTURE 

CftPTURE 

-Z.00 

5.500 

0.00 

CAPTURE 

CftPTURE 

-Z.00 

5.600 

0. 00 

CftPTURE 

CftPTURE 

-Z.00 

¥9E7AF 1 3ft 




2 . 1 


Updated @ 08:44:25 Tue 04 Nov 1986 


T_PBy 

T_PBz 

F_PBx 

F_PBy 

F_PBz 

ft*lb) 

<ft*lb> 

< lb) 

( lb) 

(lb) 

0.00 

2.00 

-0.00 

0.05 

0.00 

0.00 

2.00 

-0. 00 

0.05 

0. 00 

-0.00 

2.00 

-0.00 

0.05 

0.00 

-0.00 

2.00 

-0.00 

0.04 

0.00 

-0.01 

2.00 

-0.00 

0.04 

0.00 

-0.01 

2.00 

-0.00 

0.03 

-0.00 

-0.01 

2.00 

-0.00 

0.03 

0.00 

-0.01 

2.00 

-0.00 

0.0 Z 

0.00 

-0.01 

1.95 

-0.00 

0.02 

0.00 

-0.02 

1.60 

-0.00 

0.01 

0.00 

-0.02 

1.32 

-0.00 

0.01 

0.00 

-0.02 

1.16 

-0.00 

0.00 

0. 00 

-0.02 

0.97 

-0. 00 

0.00 

0.00 

-0.02 

0.85 

-0.00 

0.00 

0.00 

-0.02 

0.72 

-0.00 

0. 00 

0.00 

-0.02 

0.63 

-0.00 

0.00 

0. 00 

-0.02 

0.54 

-0.00 

-0.00 

0. 00 

-0.02 

0.49 

-0.00 

-0.00 

0.00 

-0.02 

0.43 

-0.00 

-0.00 

0.00 

-0.02 

0.39 

-0.00 

-0.00 

0.00 

-0.02 

0.35 

-0.00 

-0.00 

0.00 

-0.02 

0.33 

-0.00 

-0.00 

0.00 

-0.02 

0.30 

-0.00 

-0.00 

0.00 

-0.02 

0.29 

0.00 

-0.00 

0.00 

-0.02 

0.27 

0. 00 

-0. 00 

0.00 

-0.02 

0.26 

0.00 

-0.00 

0.00 

-0.02 

0.25 

0.00 

-0.00 

0.00 

-0.02 

0.24 

0.00 

-0. 00 

0. 00 

-0.02 

0.24 

0.00 

-0.00 

0.00 

-0.02 

0.23 

0. 00 

-0.00 

0.00 

-0.02 

0.23 

0.00 

-0.00 

0.00 

-0.02 

0.22 

0. 00 

-0.00 

0.00 

-0.02 

0.22 

0. 00 

-0.00 

0.00 

-0.02 

0.22 

0. 00 

-0.00 

0.00 

-0.02 

0.22 

0. 00 

-0. 00 

0.00 

-0.02 

0.22 

0.00 

-0.00 

0.00 

-0.02 

0.22 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0. 00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0. 00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0. 00 

-0.02 

0.21 

0. 00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0. 00 

0.00 

-0.02 

0.21 

0. 00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0. 00 

-0.02 

0.21 

0.00 

-0. 00 

0.00 

-0.02 

0.21 

0. 00 

-0. 00 

0.00 

-0.02 

0.21 

0.00 

-0. 00 

0. 00 

-0.02 

0.21 

0. 00 

-0.00 

0. 00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.21 

0.00 

-0.00 

0.00 

-0.02 

0.20 

0.00 

-0.00 

0.00 

-0.02 

0.20 

0. 00 

-0. 00 

0.00 

-0.02 

1 1 

0.20 

0.00 

-0.00 

0.00 



File ’plapacap.R’ Page 1Z 


Updated @ 08:44:25 Tue 04 Nov 198G 


5.700 

0. 00 

5.800 

0. 00 

5.900 

0.00 

6.000 

0.00 

6. 100 

-0.00 

6.200 

-0.00 

6.300 

-0.00 

6.400 

-0.00 

6.500 

-0. 00 

6.600 

-0.00 

6.700 

-0. 00 

6.800 

-0.00 

6.900 

-0. 00 

7.000 

-0.00 

7. 100 

-0.00 

7.200 

-0.00 

7.300 

0.00 

7.400 

0. 00 

7.500 

0.00 

7.600 

0.00 

7.700 

0.00 

7.800 

0.00 

7.900 

0.00 

8.000 

0.00 

8. 100 

0. 00 

8.200 

0. 00 

8.300 

-0.00 

8.400 

-0. 00 

8.500 

-0.00 

8.600 

-0.00 

8.700 

-0.00 

8.800 

-0.00 

8.900 

-0. 00 

9.000 

-0.00 

9. 100 

-0.00 

9.200 

-0.00 

9.300 

-0. 00 

9.400 

0.00 

9.500 

0.00 

9.600 

0. 00 

9.700 

0.00 

9.800 

0.00 

9.900 

0.00 

10.000 

0.00 

10. 100 

0.00 

10.200 

0.00 

10.300 

0.00 

10.400 

0.00 

10.500 

-0.00 

10.600 

-0.00 

10.700 

-0.00 

10.800 

-0. 00 

10.900 

-0. 00 

11.000 

-0.00 

11.100 

-0. 00 

11.200 

-0.00 

11.300 

-0.00 

1 1 .400 

-0.00 

11.500 

0.00 

11.600 

0.00 


¥ 1 ESDI 53D 


CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 


-2.00 

-0.02 

-2.00 

-0.0 Z 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.02 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-Z.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-2.00 

-0.01 

-Z.00 

-0.01 

-2.00 

-0.01 

-1.98 

-0.01 

-1.94 

-0.01 

-1.90 

-0.01 

-1.86 

-0.01 

-1.82 

-0.01 

-1.79 

-0.01 

-1 .75 

-0.01 

-1.72 

-0.01 

-1.68 

-0.01 

-1.65 

-0.01 

-1.62 

-0.01 

-1.59 

-0.01 

-1.55 

-0.01 

2 _ 1 

-12 


0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0. 00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0.20 

0.00 

0. 19 

0.00 

0.19 

0.00 

0.19 

0.00 

0. 19 

0.00 

0. 19 

0. 00 

0. 19 

0.00 

0. 19 

0.00 

0.19 

0. 00 

0.19 

0.00 

0.19 

0.00 

0. 19 

0.00 

0.19 

0. 00 

0.19 

-0.00 

0. 19 

-0.00 

0.19 

-0.00 

0.19 

-0. 00 

0.19 

-0.00 

0.19 

-0.00 

0.18 

-0.00 

0.18 

-0.00 

0.18 

-0.00 

0.18 

-0. 00 

0. 17 

-0. 00 

0. 17 

-0.00 

0. 17 

-0.00 

0.16 

-0.00 


- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0.00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0.00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0. 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0.00 

- 0.00 

0.00 

- 0.00 

0. 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0. 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0. 00 

0.00 

- 0.00 

0.00 



Updated @ 08:44:25 Tue 04 Nov 1986 


File 'plapacap 

11.700 

0.00 

11.800 

0. 00 

11.900 

0.00 

12.000 

0.00 

12. 100 

0. 00 

12.200 

0.00 

12.300 

0.00 

12.400 

0.00 

12.500 

0. 00 

12.600 

0. 00 

12.700 

-0.00 

12.800 

-0.00 

12.900 

-0.00 

13.000 

-0.00 

13. 100 

-0.00 

13.200 

-0.00 

13.300 

-0. 00 

13.400 

-0.00 

13.500 

-0.00 

13.600 

-0.00 

13.700 

-0.00 

13.800 

0.00 

1 3. 900 

0.00 

14.000 

0.00 

14. 100 

0.00 

14.200 

0.00 

14.300 

0.00 

14.400 

0.00 

14.500 

0.00 

14.600 

0. 00 

14.700 

0.00 

14.800 

0.00 

14.900 

-0.00 

15.000 

-0.00 

15. 100 

-0.00 

15.200 

-0.00 

15.300 

-0.00 

15.400 

-0. 00 

15.500 

-0.00 

15.600 

-0.00 

15.700 

0.00 

15.800 

0.00 

15.900 

0.00 

16.000 

0.00 

16. 100 

0.00 

16.200 

0.00 

16.300 

0.00 

16.400 

0.00 

16.500 

0.00 

16.600 

0.00 

16.700 

0. 00 

16.800 

0.00 

16.900 

0.00 

17.000 

0.00 

17. 100 

0.00 

17.200 

0.00 

17.300 

0.00 

17.400 

0.00 

17.500 

0.00 

17.600 

0.00 


Page 1 3 

CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 


-1.52 

-0.01 

-1.49 

-0.01 

-1.46 

-0.01 

-1.43 

-0.01 

-1.41 

-0.01 

-1.38 

-0.01 

-1.35 

-0.01 

-1.32 

-0.01 

-1.30 

-0.01 

-1.27 

-0.00 

-1.25 

-0.00 

-1.22 

-0.00 

-1.20 

-0.00 

-1.17 

-0.00 

-1. 15 

-0.00 

-1.13 

-0.00 

-1.11 

-0.00 

-1.08 

-0.00 

-1 .06 

-0.00 

-1.04 

-0.00 

-1.02 

-0.00 

-1.00 

-0.00 

-0.98 

-0.00 

-0.96 

-0.00 

-0.94 

-0.00 

-0.92 

-0.00 

-0.91 

-0.00 

-0.89 

-0.00 

-0.87 

-0.00 

-0.85 

-0.00 

-0.84 

-0.00 

-0.82 

-0.00 

-0.81 

-0.00 

-0.79 

-0.00 

-0.77 

-0.00 

-0.76 

-0.00 

-0.74 

-0.00 

-0.73 

-0.00 

-0.72 

-0.00 

-0.70 

-0.00 

-0.69 

-0.00 

-0.67 

-0.00 

-0.66 

-0.00 

-0.65 

-0.00 

-0.63 

-0.00 

-0.62 

-0.00 

-0.61 

-0.00 

-0.60 

-0.00 

-0.59 

-0.00 

-0.57 

-0.00 

-0.56 

-0.00 

-0.55 

-0.00 

-0.54 

-0.00 

-0.53 

-0. 00 

-0.52 

-0.00 

-0.51 

-0.00 

-0.50 

-0.00 

-0.49 

-0.00 

-0.48 

-0.00 

-0.47 

-0.00 


0. 16 

-0. 00 

0. 16 

-0.00 

0.16 

-0. 00 

0. 15 

-0,00 

0. 15 

-0. 00 

0. 15 

-0.00 

0. 14 

-0.00 

0. 14 

-0.00 

0. 14 

-0.00 

0. 14 

-0.00 

0.13 

-0.00 

0.13 

-0.00 

0. 13 

-0. 00 

0.13 

-0.00 

0. 12 

-0. 00 

0.12 

-0.00 

0.12 

-0.00 

0.12 

-0. 00 

0. 1 1 

0.00 

0. 1 1 

0.00 

0. 1 1 

0.00 

0. 1 1 

0.00 

0. 10 

0.00 

0. 10 

0.00 

0.10 

0. 00 

0. 10 

0.00 

0. 10 

0.00 

0.09 

0.00 

0.09 

0.00 

0.09 

0.00 

0.09 

0.00 

0.07 

0.00 

0.07 

-0.00 

0.06 

-0.00 

0.05 

-0.00 

0.05 

-0.00 

0.05 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.04 

-0.00 

0.03 

-0. 00 

0.03 

-0.00 

0.03 

-0. 00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0. 00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 


- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0 . 00 

- 0.00 

0 . 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0 . 00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0.00 

- 0 . 00 

0.00 

- 0.00 

0.00 

- 0.00 

0 . 00 

0 . 00 

0.00 

0 . 00 

0.00 

0.00 

0.00 

0.00 

0 . 00 

0 . 00 

0.00 

0 . 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0 . 00 

0.00 

0.00 

0 . 00 

0 . 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0 . 00 

0.00 

0 . 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 


¥86237243 2 _ 1-13 



File ’ plapacap.R’ Page 14 


Updated @ 08:44:25 Tue 04 Nov 1986 


17.700 

0.00 

17.800 

0.00 

17.900 

0. 00 

18.000 

0.00 

18. 100 

0.00 

18.200 

0.00 

18.300 

0. 00 

18.400 

0.00 

18.500 

0.00 

18.600 

0.00 

18.700 

0. 00 

18.800 

0.00 

18.900 

0.00 

19.000 

0.00 

19. 100 

0. 00 

19.200 

0.00 

19.300 

0.00 

19.400 

0.00 

1 9 . 500 

0.00 

19.600 

0.00 

19.700 

0.00 

19.800 

0.00 

19.900 

0.00 

20.000 

0. 00 

20. 100 

0.00 

20.200 

0.00 

20.300 

0. 00 

20.400 

0.00 

20.500 

0.00 

20.600 

0.00 

20.700 

0.00 

20.800 

0.00 

20.900 

0.00 

21.000 

0.00 

21.100 

0. 00 

21.200 

0.00 

2 1 . 300 

0.00 

2 1 . 400 

0.00 

21.500 

0. 00 

2 1 . 600 

0.00 

21.700 

0.00 

2 1 . 800 

0.00 

21.900 

0.00 

22.000 

0.00 

22. 100 

0.00 

22.200 

0.00 

22.300 

0. 00 

22.400 

0.00 

22.500 

0.00 

22.600 

0.00 

22.700 

0. 00 

22.800 

0.00 

22.900 

0.00 

23.000 

0.00 

23. 100 

0.00 

23.200 

0.00 

23.300 

0.00 

23.400 

0.00 

23.500 

0.00 

23.600 

0. 00 

¥DA03AA63 



CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 
CAPTURE CAPTURE 


-0.46 

-0.00 

-0.45 

-0.00 

-0.44 

-0.00 

-0.43 

-0.00 

-0.42 

-0.00 

-0.42 

-0.00 

-0.41 

-0.00 

-0.40 

-0.00 

-0.39 

-0.00 

-0.38 

-0. 00 

-0.38 

-0-00 

-0.37 

-0.00 

-0.36 

-0.00 

-0.35 

0.00 

-0.35 

0.00 

-0.34 

0.00 

-0.33 

0.00 

-0.33 

0.00 

-0.32 

0.00 

-0.31 

0.00 

-0.31 

0.00 

-0.30 

0.00 

-0.30 

0.00 

-0.29 

0.00 

-0.28 

0.00 

-0.28 

0.00 

-0.27 

0.00 

-0.27 

0.00 

-0.26 

0.00 

-0.26 

0.00 

-0.25 

0.00 

-0.25 

0.00 

-0.24 

0. 00 

-0.24 

0.00 

-0.23 

0.00 

-0.23 

0.00 

-0.22 

0.00 

-0.22 

0.00 

-0.21 

0.00 

-0.21 

0.00 

-0.21 

0. 00 

-0.20 

0.00 

-0.20 

0.00 

-0.19 

0.00 

-0.19 

0.00 

-0.19 

0.00 

-0.18 

0.00 

-0.18 

0.00 

-0.18 

0.00 

-0. 17 

0.00 

-0. 17 

0.00 

-0.17 

0.00 

-0.16 

0.00 

-0. 16 

0. 00 

-0. 16 

0.00 

-0.15 

0.00 

-0. 15 

0. 00 

-0. 15 

0.00 

-0. 14 

0.00 

-0. 14 

0.00 

Z . 1 - 

1 Ar 


0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0. 00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.03 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0. 00 

0.02 

-0. 00 

0.02 

-0. 00 

0.02 

-0. 00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0. 00 

0.02 

-0. 00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0. 00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0. 00 

0.02 

-0. 00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.02 

-0.00 

0.01 

-0.00 

0.01 

-0.00 

0.01 

-0.00 

0.01 

-0.00 

0.01 

-0. 00 

0.01 

-0.00 

0.01 

-0. 00 

0.01 

-0.00 

0.01 

-0.00 

0.01 

-0.00 

0.01 

-0.00 


0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0. 00 

0. 00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 



File ’ plapacap. R’ Page 15 Updated @ 08:44:25 Tue 04 Nov 1986 


23.700 

0.00 

CAPTURE 

CAPTURE 

-0. 14 

0. 00 

0.01 

-0.00 

0.00 

0.00 

23.800 

0. 00 

CAPTURE 

CAPTURE 

-0. 14 

0.00 

0.01 

-0. 00 

0.00 

0.00 

23.900 

0.00 

CAPTURE 

CAPTURE 

-0.13 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.000 

0.00 

CAPTURE 

CAPTURE 

-0.13 

0.00 

0.01 

-0.00 

0.00 

0.00 

24. 100 

0.00 

CAPTURE 

CAPTURE 

-0. 13 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.200 

0.00 

CAPTURE 

CAPTURE 

-0.12 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.300 

0. 00 

CAPTURE 

CAPTURE 

-0.12 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.400 

0. 00 

CAPTURE 

CAPTURE 

-0.12 

0.00 

0.01 

-0.00 

0.00 

0. 00 

24.500 

0.00 

CAPTURE 

CAPTURE 

-0.12 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.600 

0.00 

CAPTURE 

CAPTURE 

-0.12 

0.00 

0.01 

-0.00 

0.00 

0.00 

24.700 

0.00 

CAPTURE 

CAPTURE 

-0. 1 1 

0.00 

0.01 

-0.00 

0. 00 

0.00 

24.800 

0.00 

CAPTURE 

CAPTURE 

-0. 1 1 

0.00 

0.01 

-0.00 

0. 00 

0.00 

24.900 

0.00 

CAPTURE 

CAPTURE 

-0. 1 1 

0.00 

0.01 

-0.00 

0.00 

0.00 

25.000 

0.00 

CAPTURE 

CAPTURE 

-0. 1 1 

0.00 

0.01 

-0.00 

0.00 

0.00 

25. 100 

0.00 

CAPTURE 

CAPTURE 

-0. 10 

0.00 

0.01 

-0.00 

0.00 

0.00 

25.200 

0.00 

CAPTURE 

CAPTURE 

-0. 10 

0.00 

0.01 

-0. 00 

0. 00 

0.00 

25.300 

0.00 

CAPTURE 

HOLD 

-0. 10 

0.00 

0.01 

-0.00 

0.00 

0.00 

25.400 

0.00 

CAPTURE 

HOLD 

-0.09 

0.00 

0.01 

-0.00 

0.00 

0.00 

25.500 

0.00 

CAPTURE 

HOLD 

-0.09 

0.00 

0.01 

-0. 00 

0. 00 

0.00 

25.600 

0.00 

CAPTURE 

HOLD 

-0.09 

0.00 

0.02 

-0.00 

0.00 

0.00 

25.700 

0.00 

CAPTURE 

HOLD 

-0.08 

0.00 

0.02 

-0.00 

0. 00 

0.00 

25.800 

0. 00 

CAPTURE 

HOLD 

-0.08 

0.00 

0.02 

-0.00 

0. 00 

0.00 

25.900 

0. 00 

CAPTURE 

HOLD 

-0.08 

0.00 

0.02 

-0.00 

0.00 

0.00 

26.000 

0.00 

CAPTURE 

HOLD 

-0.08 

0.00 

0.02 

-0.00 

0.00 

0.00 

26. 100 

0.00 

CAPTURE 

HOLD 

-0.07 

0.00 

0.02 

-0. 00 

0.00 

0.00 

26.200 

0. 00 

CAPTURE 

HOLD 

-0.07 

0.00 

0.02 

-0.00 

0.00 

0.00 

26.300 

0.00 

CAPTURE 

HOLD 

-0.07 

0.00 

0.02 

-0.00 

0. 00 

0.00 

26.400 

0.00 

CAPTURE 

HOLD 

-0.07 

0.00 

0.02 

-0. 00 

0. 00 

0. 00 

26.500 

0.00 

CAPTURE 

HOLD 

-0.06 

0. 00 

0.02 

-0.00 

0.00 

0.00 

26.600 

0.00 

CAPTURE 

HOLD 

-0.06 

0.00 

0.02 

-0. 00 

0.00 

0.00 

26.700 

0.00 

CAPTURE 

HOLD 

-0.06 

0. 00 

0.02 

-0.00 

0.00 

0.00 

26.800 

0.00 

CAPTURE 

HOLD 

-0.06 

0.00 

0.02 

-0. 00 

0.00 

0.00 

26.900 

0.00 

CAPTURE 

HOLD 

-0.06 

0.00 

0.02 

-0. 00 

0. 00 

0.00 

27.000 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0. 00 

0.00 

27. 100 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.200 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.300 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0. 00 

0.00 

0.00 

27.400 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0. 00 

0.00 

27.500 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.600 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.700 

0.00 

CAPTURE 

HOLD 

-0.05 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.800 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

27.900 

0. 00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0. 00 

0.00 

0.00 

28.000 

0. 00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0. 00 

0.00 

28. 100 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.200 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0. 00 

0.00 

28.300 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.400 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.500 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.600 

0. 00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.700 

0.00 

CAPTURE 

HOLD 

-0.04 

0.00 

0.01 

-0.00 

0. 00 

0.00 

28.800 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

28.900 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.0! 

-0.00 

0.00 

0.00 

29.000 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0. 00 

29.100 

0. 00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

29.200 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

29.300 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

29.400 

0. 00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

29.500 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 

29.600 

0.00 

CAPTURE 

HOLD 

-0.03 

0.00 

0.01 

-0.00 

0.00 

0.00 


Z - 1 - 


¥DCCC854C 


1 5 



File ’ plapacap.R’ Page IB 


Z9.700 

0.00 

CAPTURE 

HOLD 

-0.03 

29.800 

0.00 

CAPTURE 

HOLD 

-0.03 

29.900 

0.00 

CAPTURE 

HOLD 

-0.03 

30. 000 

0.00 

CAPTURE 

HOLD 

-0.03 


Updated @ 08:44:25 Tue 04 Nov 1986 


0.00 

0.01 

- 0 . 00 

0.00 

0.00 

0.00 

0.01 

- 0.00 

0. 00 

0.00 

- 0.00 

0.01 

“ 0. 00 

0.00 

0.00 

- 0.00 

0.01 

- 0.00 

0.00 

0.00 


¥DFADFA0D 


2 _ 1 - 1 B 



File ’ plapacap.R’ Page 17 


Updated @ 08:44:25 Tue 04 Nov 1986 


Tine = 30. 

000 

DesMode 

= CAPTURE 

CurMode 

= HOLD 


PL Nonspin = 

0.05 

Wobble 

Cone = 18.46 

Wobble 

Clok = 

6.91 

Cntrl@H: R 

-0.01 

-0. 00 

-0.03 Torq 

-0.000 

0.000 

-0.000 Fore 

Cntrl@H:PB 

-0.03 

-0.00 

0.01 Torq 

-0.000 

0.000 

0.000 Fore 

PB Axes:PD 

2.91 

-5.52 

50.70 PYR 

0.051 

0.002 

-0.019 Rate 

PL Hndl : R 

0.05 

-0.01 

-0.01 Pos 

0.001 

-0.001 

-0.000 Vel 

PB Axes: OB 

-84.47 

2.90 

140.42 PYR 

0.051 

0.002 

-0.019 Rate 

PL CM : OB 

25.64 

1 .04 

-26.57 Pos 

-0.000 

-0.000 

-0.000 Vel 

PL Rot K E 

0.00 






PLAngno: I 

-100.32 

12.63 

0.28 PYMag 

-0.048 

0.060 

0.264 Hxyz 

PB Axes: I 

-84.47 

2.90 

140.43 PYR 

0.051 

0.002 

-0.019 Rate 

PL CM : I 

-0.01 

-0.96 

-7.89 Pos 

-0.000 

-0.000 

-0.000 Vel 

OB Axes: I 

0. 00 

0.01 

0.00 PYR 

0.000 

0.000 

0.000 Rate 

Orb CM : I 

-25.65 

-2.00 

1 8 • 68 Pos 

0.000 

0.000 

0.000 Vel 


*** END OF SIMULATION *** 

Palapa Capture 

MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:34:28 Mon 03 Nov 1986 


¥472E42EE 


2 _ 1 — 1 V 



Control Torque (ft*lb) Control Force (lb) 


MANHANDLE Version 04B (11: 11:13 Tue 28 Oct 1986) Run I 10:34:28 Mon 03 Nov 1986 



Z Component (Payload Body Axes) 





z _ i - i e 



2 - Z - j 


File ’sncrodslu.R’ Page 1 


Updated @ 08:44:33 Tue 04 Nov 1986 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 1986) Run @ 10:58:45 Mon 03 Nov 1986 


sncmc" Payload Inertia Data 


Payload ueight (lb) 

CM STA ( structural x coordinate of mass center )....( in) 

CM BL (structural y coordinate of nass center )....( in) 

CM WL (structural z coordinate of nass center) ....( in) 

Ixx about CM, structural coordinates (slug*ft*ft) 

Iyy about CM, structural coordinates (slug*ft*ft) 

Izz about CM, structural coordinates. (slug*ft*ft) 

Pxy about CM, structural coordinates (slug*ft»ft) 

Pxz about CM, structural coordinates (slug*ft*ft) 

Pyz about CM, structural coordinates (slug»ft*ft) 


15267.00000 
-17.70378 
-0.03615 
0.08976 
6386.85867 
4428.63556 
5276.48977 
-40.46375 
-26.30184 
30. 36689 


¥00A895A8 


2 _ Z - 1 



File ’sncmdslu.R 1 Page 2 


Updated @ 08:44:33 Tue 04 Nov 1986 


MANHANDLE Version 04B ( 1 1 : 1 1 : I 3 Tue 28 Oct 1386) Run @ 10:59:07 Mon 03 Nov 1986 


“dsdaB" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point....... 

Nominal Orbiter BL of PL handling point....... 

Nominal Orbiter UL of PL handling point 

Payload STA of PL handle 

Payload BL of PL handle 

Payload UL of PL handle.. 

Crewman reach limit from RO in +/- Rx direction 
Crewman reach limit from RO in +/- Ry direction 
Crewman reach limit from RO in +/- Rz direction 

Rx position tolerance for PL handle 

Ry position tolerance for PL handle 

Rz position tolerance for PL handle 

Nominal vel for handle position correction 

Tolerance for corrective velocity 


. . . . ( in) 
. . . . ( in) 
. . . . ( in ) 
. . . . ( in) 
. . . . ( in ) 
. . . . ( in) 
. . . . ( in) 
. . . . ( in) 
. . . . ( in) 
. . . . ( in) 
. . . . ( in) 
. . . . ( in) 
< in/sec) 
(X) 


800.00000 

24.00000 
600.00000 
“11 .70378 
“86. 12500 

0 . 00000 

1 2 . 00000 
12.00000 
12.00000 

6 . 00000 
6 . 00000 
6.00000 
0. 00000 
10.00000 


¥EEF030F0 


z _ z-2 



File ’sncmdslu.R* Page 3 


Updated @ 08:44:33 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 10:59:33 Mon 03 Nov 1986 


“cap" Attitude Parameters for Payload Flight Control 


Crewman pitch urt Orbiter body axes... (deg) 

Crewman yaw urt Orbiter body axes (deg) 

Crewman roll wrt Orbiter body axes (deg) 

Desired Payload pitch urt Creuman body axes., (deg) 

Desired Payload yau urt Creuman body axes (deg) 

Desired Payload roll urt Creuman body axes (deg) 

Positive PL pitch limit urt desired attitude (deg) 

Positive PL yau limit urt desired attitude (deg) 

Positive PL roll limit wrt desired attitude (deg) 

Negative PL pitch limit urt desired attitude (deg) 

Negative PL yau limit wrt desired attitude (deg) 

Negative PL roll limit urt desired attitude (deg) 

PL pitch tolerance wrt desired attitude (deg) 

PL yaw tolerance wrt desired attitude (deg) 

PL roll tolerance wrt desired attitude ....(deg) 

Nominal maneuver rate about PL Bx axis .(deg/sec) 

Nominal maneuver rate about PL By axis (deg/sec) 

Nominal maneuver rate about PL Bz axis (deg/sec) 

Maneuver rate tolerance (%) 


0. 00000 
90.00000 
0. 00000 
0.00000 

90.00000 
180,00000 

15.00000 

15.00000 

20.00000 
- 15. 00000 
-15.00000 
- 10.00000 

2 . 00000 
2.00000 
2 . 00000 
0.50000 
0.50000 
0.50000 
10.00000 


¥296BB40B 


Z 


Z - 3 



File ’sncmdslu.R 1 Page 4 


Updated @08:44:33 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 10:59:56 Mon 03 Nov 1986 


M lim10" Force & Torque Parameters for Payload Flight Control 


Spinup axial (PL Bx ) force.. (lb) 

Spinup normal (PL By) force (lb) 

Spinup tangential (PL Bz ) force... (lb) 

Despin axial (PL Bx ) force...., (lb) 

Despin normal (PL By) force..... (lb) 

Despin tangential (PL Bz ) force ......(lb) 

Axial (PL Bx ) force limit for capture (lb) 

Normal (PL By) force limit for capture (lb) 

Tangential (PL Bz ) force limit for capture. ........ ( lb) 

Roll (PL Bx ) torque limit for capture (ft*lb> 

Pitch (PL By) torque limit for capture (ft*lb) 

Yau (PL Bz ) torque limit for capture (ft*lb) 


Time constant for computing desired accelerations (sec) 


0 . 00000 
0. 00000 
- 10.00000 
0 . 00000 
0.00000 
10.00000 
10.00000 
10.00000 
10.00000 
1 0.00000 
1 0 . 00000 
1 0. 00000 
5. 00000 


¥76CZ8E8Z 


Z 


Z-4 



File ’sncmdslu.R’ Page 5 


Updated @ 08:44:33 Tue 04 Nov I98S 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 1986) Run @ 11:00:20 Mon 03 Nov 1986 


"fds" Initial Conditions for the Simulation 


Qrbiter pitch urt I axes (deg) 

Orbiter yau urt I axes (deg) 

Orbiter roll urt I axes (deg) 

Orbiter Bx component of ang vel urt I axes. ...( deg/sec) 

Orbiter By component of ang vel urt 1 axes. ...( deg/sec) 

Orbiter Bz component of ang vel urt I axes. ...( deg/sec) 

Rx component of PL handle position (ft) 

Ry component of PL handle position (ft) 

Rz component of PL handle position (ft) 

Payload CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle (deg) 

Payload uobble cl ok angle (deg) 


0 . 00000 
0.00000 
0. 00000 
0. 00000 
0.00000 
0. 00000 
1.83333 
0.00000 
-4.80000 
0.00000 
0.00000 
0.00000 
0.00000 
0.00000 
-42.00000 
6 . 00000 
1 .76118 
-138.70817 


¥03CDAA6D 


2 


2-5 



File ’sncmdslu.R’ Page G 


Updated @ 08:44:33 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 198G) Run @ 11:00:Z3 Mon 03 Nov 1986 
Syncon 10#/Z4" Despin Stroke Displaced Aft 6" 


Tine = 0. 

000 

DesMode 

= DESPIN 

CurMode 

= FREE 



PL Nonspin = 

6.00 

Wobble 

Cone = 1.76 

Wobble 

Clok = - 

138.71 


Cntrl@H: R 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0.000 

0. 000 

0.000 

Fore 

PB Axes:PD 

0.00 

4.8L-30 

-4Z.00 PYR 

5.999 

-0. 1ZZ 

0. 139 

Rate 

PL Hndl : R 

1.83 

0. 00 

-4.80 Pos 

-0.505 

0.017 

0.558 

Vel 

PB Axes: OB 

180.00 

0.00 

-4Z.00 PYR 

5.999 

-0. 1ZZ 

0. 139 

Rate 

PL CM : OB 

Z5. 15 

9. 16 

-18.67 Pos 

0.000 

0.000 

0.000 

Vel 

PL Rot K E 

35.05 







PLAngmo: I 

178. Z4 

0.0 Z 

669.15 PYMag 

-668.830 

0.Z54 

-Z0.564 

Hxyz 

PB Axes: I 

180.00 

0.00 

-4Z.00 PYR 

5.999 

-0. 1ZZ 

0.139 

Rate 

PL CM : I 

-0.50 

7. 16 

0.01 Pos 

0.000 

0.000 

0.000 

Vel 

OB Axes: I 

0.00 

0.00 

0.00 PYR 

0.000 

0.000 

0. 000 

Rate 

Orb CM : I 

-Z5.65 

-Z.00 

1 8 . 68 Pos 

0.000 

0.000 

0.000 

Vel 


Time 

St epsize 

0.000 

0.200 


¥A?CAFE8A 


2 


z- e 



File ' sncndslu.R’ Page 7 


Updated @ 08:44:33 Tue 04 Nov 1386 


Tine 
( sec) 

zFlex 
( in ) 

DesMode 

CurMode 

T_PBx 

(ft»lb> 

T_PBy 
f t*lb) 

T_PBz 
( f t»lb) 

F_PBx 
( lb) 

F_PBy 
( lb) 

F_PBz 
< lb) 

0.000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

52 

1.76, 

Clok 


-138.71 

( deg) 

0. 100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

= 

-138.71 

( deg) 

0.Z00 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

0.300 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

a 

1 .76, 

Clok 


-138.71 

( deg) 

0. 400 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

< deg) 

0.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

22 

-138.71 

( deg) 

0.600 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

0.700 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

0.800 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

22 

-138.71 

( deg) 

0.900 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

= 

-138.71 

( deg) 

1 .000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

52 

-138.71 

( deg ) 

1 . 100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg ) 

1.200 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

1.300 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

52 

-138.71 

( deg ) 

1.400 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

22 

1.76, 

Clok 

= 

-138.71 

( deg) 

1.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg ) 

1.600 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

22 

-138.71 

( deg) 

1 .700 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

=5 

-138.71 

(deg) 

1.800 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

25 

-138.71 

( deg ) 

1 .900 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

35 

-138.71 

( deg ) 

2.000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

2= 

-138.71 

( deg ) 

2.100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

2 = 

-138.71 

( deg ) 

2.200 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

* 

-138.71 

( deg ) 

2.300 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

=2 

1.76, 

Clok 

= 

-138.71 

( deg ) 

2.400 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

22 

-138.71 

( deg ) 

2.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

23 

-138.71 

( deg ) 

2.600 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

* 

-138.71 

( deg ) 

2.700 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

52 

-138.71 

( deg ) 

2.800 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

s : 

-138.71 

( deg ) 

2.900 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

22 

-138.71 

( deg) 

3.000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg ) 

3. 100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

= 

-138.71 

( deg ) 

3.200 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

= 

-138.71 

( deg ) 

3.300 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

* 

1 .76, 

Clok 

25 

-138.71 

( deg ) 

3.400 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

* 

1.76, 

Clok 

= 

-138.71 

(deg) 

3.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

= 

-138.71 

( deg ) 

3.600 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

52 

-138.71 

( deg) 

3.700 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

* 

1.76, 

Clok 

=2 

-138.71 

( deg ) 

3.800 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

- 

1.76, 

Clok 

= 

-138.71 

( deg) 

3.900 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

3 T 

-138.71 

( deg) 

4.000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

=2 

1.76, 

Clok 

2 = 

-138.71 

< deg) 

4. 100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

22 

-138.71 

( deg) 

4.200 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

4.300 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

55 

-138.71 

( deg) 

4.400 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1 .76, 

Clok 

22 

-138.71 

( deg) 

4.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

ss 

1 .76, 

Clok 

52 

-138.71 

( deg) 

4.600 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

« 

-138.71 

( deg) 

4.700 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

=2 

1 .76, 

Clok 


-138.71 

( deg) 

4.800 

0.00 

DESPIN 

FREE 

Wobble 

Cone 


1.76, 

Clok 

= 

-138.71 

< deg) 

4.900 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

=2 

1.76, 

Clok 

52 

-138.71 

( deg) 

5.000 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 

5. 100 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

2 = 

1 .76, 

Clok 

= 

-138.71 

( deg) 

5.200 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

S 3 

-138.71 

( deg) 

5.300 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 


1 .76, 

Clok 

=2 

-138.71 

( deg) 

5.400 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

52 

-138.71 

< deg) 

5.500 

0.00 

DESPIN 

FREE 

Wobble 

Cone 

- 

1 .76, 

Clok 

a 

-138.71 

< deg) 

5.600 

0. 00 

DESPIN 

FREE 

Wobble 

Cone 

= 

1.76, 

Clok 

= 

-138.71 

( deg) 


¥763D619D Z.Z-V 



Updated fi 08:44:33 Tue 04 Nov 1986 


: ile ’sncrodslu 

5.700 

0.00 

5.800 

0.00 

5.900 

0.12 

G.000 

0.34 

G. 100 

0.55 

G. 200 

0.80 

6.300 

1 .02 

6.400 

1.21 

6.500 

1.38 

6.600 

1.46 

6.700 

1.53 

6.800 

1.49 

6.900 

1.44 

7.000 

1.30 

7. 100 

1 . 17 

7.200 

0.97 

7.300 

0.80 

7.400 

0.62 

7.500 

0.47 

7.600 

0.36 

7.700 

0.27 

7.800 

0.25 

7.900 

0.25 

8.000 

0.32 

8. 100 

0.40 

8.200 

0.54 

8.300 

0.66 

8.400 

0.81 

8.500 

0.94 

8.600 

1.05 

8.700 

1.15 

8.800 

1.20 

8.900 

1.23 

9.000 

1.21 

9.100 

1 .17 

9.200 

1.08 

9.300 

1.00 

9.400 

0.88 

9.500 

0.78 

9.600 

0.67 

9.700 

0.46 

9.800 

0. 17 

9.900 

-0.08 

10.000 

-0.34 

10. 100 

-0.56 

10.200 

-0.70 

10.300 

-0.81 

10.400 

-0.81 

10.500 

-0.80 

10.600 

-0.67 

10.700 

-0.54 

10.800 

-0.33 

10.900 

-0. 14 

1 1 .000 

0.08 

11.100 

0.27 

11.200 

0.43 

11.300 

0.56 

1 1.400 

0.62 

11.500 

0.66 

11.600 

0.60 


Page 8 


DESPIN 

FREE 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 

DESPIN 

FREE 


Wobble Cone = 


0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 , 

.00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

.00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

,00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 

0 . 

00 


Wobble Cone ~ 
Wobble Cone = 
Wobble Cone « 
Wobble Cone * 
Wobble Cone - 
Wobble Cone * 
Wobble Cone - 
Wobble Cone = 
Wobble Cone = 
Wobble Cone * 
Wobble Cone - 
Wobble Cone - 
Wobble Cone = 
Wobble Cone = 
Wobble Cone = 
Wobble Cone = 
Wobble Cone = 
Wobble Cone - 
Wobble Cone = 
Wobble Cone = 
Wobble Cone = 


1.76, Clok 
0.00 0.00 

0 . 00 0 . 00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0,00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0 . 00 0 . 00 

0.00 0.00 

0 . 00 0 . 00 

0.00 0.00 

0 . 00 0 . 00 

0.00 0.00 

0 . 00 0 . 00 

0 . 00 0 . 00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0.00 0.00 

0 • 00 0 . 00 

0.00 0.00 

0 . 00 0 . 00 

0.00 0.00 

Z . 48 , Clok - 
Z.49, Clok = 
Z .49 , Clok « 
Z . 50, Clok = 
Z . 50, Clok = 
Z . 5 i , Clok = 
Z . 51 , Clok = 
Z.5Z, Clok = 
Z.5Z, Clok = 
Z.5Z, Clok = 
Z.53, Clok » 
Z.53, Clok = 
Z . 54, Clok « 
Z. 54, Clok - 
Z . 55 , Clok = 
Z . 55, Clok = 
Z . 56, Clok - 
Z . 56 , Clok - 
Z.57, Clok * 
Z .57, Clok - 
Z.57, Clok = 


138.71 

( deg) 

0.00 

10.00 

0. 00 

10.00 

0. 00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0. 00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0. 00 

10.00 

0.00 

10.00 

0.00 

10.00 

0. 00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

0. 00 

10.00 

0. 00 

10.00 

0. 00 

10.00 

0.00 

10.00 

0.00 

10.00 

0.00 

10.00 

162.32 

( deg ) 

162.38 

( deg ) 

162.44 

< deg) 

162.51 

( deg) 

162.57 

( deg ) 

162.64 

( deg) 

162.70 

( deg ) 

162.76 

( deg) 

162.83 

( deg ) 

162.89 

< deg ) 

162.95 

( deg ) 

163.02 

( deg ) 

163.08 

( deg ) 

163. 14 

( deg ) 

163.20 

< deg ) 

163.27 

< deg ) 

163.33 

( deg ) 

163.39 

( deg ) 

163.45 

( deg ) 

163.52 

(deg) 

163.58 

( deg ) 


¥614FB8AF Z - Z - 3 



File ’ sncmds I u. R’ Page 9 


11.700 

0.54 

DESPIN 

FREE 

Wobble 

11.800 

0.40 

DESPIN 

FREE 

Wobble 

11.900 

0.27 

DESPIN 

FREE 

Wobble 

12.000 

0.09 

DESPIN 

FREE 

Wobble 

12. 100 

-0.06 

DESPIN 

FREE 

Wobble 

12.200 

-0.22 

DESPIN 

FREE 

Wobble 

12.300 

-0.35 

DESPIN 

FREE 

Wobble 

12.400 

-0.43 

DESPIN 

FREE 

Wobble 

12.500 

-0.50 

DESPIN 

FREE 

Wobble 

12.600 

-0.49 

DESPIN 

FREE 

Wobble 

12.700 

-0.48 

DESPIN 

FREE 

Wobble 

1 2 . 800 

-0.40 

DESPIN 

FREE 

Wobble 

1 2 .900 

-0.32 

DESPIN 

FREE 

Wobble 

13.000 

-0.19 

DESPIN 

FREE 

Wobble 

13. 100 

-0.07 

DESPIN 

FREE 

Wobble 

13.200 

0.06 

DESPIN 

FREE 

Wobble 

13.300 

0. 17 

DESPIN 

FREE 

Wobble 

13.400 

0.27 

DESPIN 

FREE 

Wobble 

13.500 

0.35 

DESPIN 

FREE 

Wobble 

13.600 

0.38 

DESPIN 

FREE 

Wobble 

13.700 

0.40 

DESPIN 

FREE 

Wobble 

13.800 

0.36 

DESPIN 

FREE 

Wobble 

13.900 

0.32 

DESPIN 

FREE 

Wobble 

14.000 

0.23 

DESPIN 

FREE 

Wobble 

14. 100 

0.15 

DESPIN 

FREE 

Wobble 

14.200 

0.05 

DESPIN 

FREE 

Wobble 

14.300 

-0.05 

DESPIN 

FREE 

Wobble 

14.400 

-0. 14 

DESPIN 

FREE 

Wobble 

14.500 

-0.21 

DESPIN 

FREE 

Wobble 

14.600 

-0.26 

DESPIN 

FREE 

Wobble 

14.700 

-0.30 

DESPIN 

FREE 

Wobble 

14.800 

-0.30 

DESPIN 

FREE 

Wobble 

14.900 

-0.29 

DESPIN 

FREE 

Wobble 

15.000 

-0.24 

DESPIN 

FREE 

Wobble 


¥FC3flDB7A 2 . 2 


Updated @ 08:44:33 Tue 04 Nov 198G 


Cone 


2.58, 

Clok 

= 

163.64 

< deg) 

Cone 

= 

2.58, 

Clok 

S3 

163.70 

( deg) 

Cone 

ss 

2.59, 

Clok 

= 

163.76 

( deg) 

Cone 

= 

2.59, 

Clok 

33 

163.83 

< deg) 

Cone 

= 

2.60, 

Clok 

= 

163.89 

( deg) 

Cone 

- 

2.60, 

Clok 

a 

163.95 

( deg) 

Cone 

= 

2.61 , 

Clok 

S3 

164.01 

( deg) 

Cone 

a 

2.61 , 

Clok 

S3 

164.07 

( deg) 

Cone 

= 

2.61 , 

Clok 

33 

164.13 

( deg) 

Cone 

* 

2.62, 

Clok 

33 

164.20 

( deg ) 

Cone 

a 

2.62, 

Clok 

=3 

164.26 

( deg ) 

Cone 

= 

2.63, 

Clok 

» 

164.32 

( deg ) 

Cone 


2.63, 

Clok 

a 

164.38 

< deg ) 

Cone 

= 

2.64, 

Clok 

= 

164.44 

( deg) 

Cone 

* 

2.64, 

Clok 

= 

164.50 

( deg ) 

Cone 

= 

2.65, 

Clok 

33 

164.56 

( deg ) 

Cone 

= 

2.65, 

Clok 

= 

164.62 

( deg ) 

Cone 

a 

2.66, 

Clok 

= 

164.68 

(deg) 

Cone 

= 

2.66, 

Clok 

3= 

164.74 

( deg ) 

Cone 

sc 

2.66, 

Clok 

33 

164.80 

( deg) 

Cone 

= 

2.67, 

Clok 

S3 

164.86 

( deg) 

Cone 

a 

2.67, 

Clok 

ss 

164.92 

( deg) 

Cone 

s 

2.68, 

Clok 

S3 

164.98 

( deg) 

Cone 

= 

2.68, 

Clok 

« 

165.04 

( deg) 

Cone 


2.69, 

Clok 

S3 

165. 10 

< deg) 

Cone 

S3 

2.69, 

Clok 

a 

165. 16 

< deg) 

Cone 

* 

2.70, 

Clok 

= 

165.22 

( deg) 

Cone 

= 

2.70, 

Clok 

= 

165.28 

( deg) 

Cone 

sr 

2.70, 

Clok 

= 

165.34 

( deg) 

Cone 

ss 

2.71 , 

Clok 

ss 

165.40 

( deg) 

Cone 

= 

2.71 , 

Clok 

= 

165.46 

< deg ) 

Cone 

= 

2.72, 

Clok 

33 

165.52 

( deg) 

Cone 

S3 

2.72, 

Clok 

« 

165.58 

( deg ) 

Cone 

33 

2.73, 

Clok 


165.64 

( deg) 


3 



File ’sncndslu.R* Page 10 


Updated @ 08:44:33 Tue 04 Nov 1986 


Tine = 

15. 

000 

DesMode 

= DESPIN 

CurMode 

= FREE 



PL Nonspin = 

3.55 

Wobble 

Cone = 

2.73 

Wobble 

Clok = 

165.64 


Cntrl@H: 

R 

0.00 

0.00 

0.00 

Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H: 

PB 

0.00 

0.00 

0.00 

Torq 

0.000 

0.000 

0.000 

Fore 

PB fixes: 

PD 

-0. 10 

2.63 

29.68 

PYR 

3.560 

0.099 

0. 177 

Rate 

PL Hndl : 

R 

0.91 

0.31 

2.90 

Pos 

0. 173 

-0.015 

0.257 

Vel 

PB fixes: 

OB 

179.90 

2.63 

29.68 

PYR 

3.560 

0.099 

0. 177 

Rate 

PL CM : 

OB 

25.13 

9.14 

-19.34 

Pos 

-0.002 

-0.004 

-0.090 

Vel 

PL Rot K 

E 

12. 32 








PLflngno: 

I 

177.21 

1.90 

396.56 

PYMag 

-395.868 

13.166 

-19.299 

Hxyz 

PB fixes: 

I 

179.84 

2.62 

29.64 

PYR 

3.553 

0.092 

0.180 

Rate 

PL CM : 

I 

-0.50 

7.15 

-0.59 

Pos 

0.000 

-0.002 

-0.080 

Vel 

OB fixes: 

I 

-0.06 

0.00 

0.04 

PYR 

0.006 

-0.008 

0.000 

Rate 

Orb CM : 

I 

-25.65 

-2.00 

18.72 

Pos 

-0.000 

0.000 

0. 006 

Vel 


Tine Stepsize 


15.000 


¥C64DDFED 


2 _ Z — 1 <2> 



File ’ sncmds 1 u. R’ Page 11 Updated @ 08:44:33 Tue 04 Nov 1986 


Tine = 30.000 

DesMode 

= DESPIN 

CurMode 

= FREE 



PL Nonspin = 

3.55 

Wobble 

Cone * 3.34 

Wobble 

Clok = 

173.78 


Cntrl@H: R 

0. 00 

0.00 

0.00 Torq 

0. 000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0. 000 

0.000 

0. 000 

Fore 

PB Axes:PD 

-1.86 

5. 16 

83. Z0 PYR 

3.557 

0.064 

0.ZZ4 

Rate 

PL Hndl : R 

6. 17 

0.36 

5.11 Pos 

0.438 

-0.007 

-0.034 

Vel 

PB Axes: OB 

178. 14 

5.16 

83. Z0 PYR 

3.557 

0.064 

0.ZZ4 

Rate 

PL CM : OB 

Z5. 10 

9.07 

-Z0.69 Pos 

~0. 003 

-0.005 

-0.090 

Vel 

PL Rot K E 

12. 32 







PLAngno: I 

1 77. Z 1 

1 .90 

396.56 PYMag 

-395. 8G8 

13.166 

-19.Z99 

Hxyz 

PB Axes: I 

177.97 

5.16 

83.07 PYR 

3.551 

0.063 

0.Z3Z 

Rate 

PL CM : I 

-0.49 

7. 1Z 

-1.79 Pos 

0.000 

-0.00 Z 

-0.080 

Vel 

OB Axes: I 

-0.18 

0.01 

0.13 PYR 

0. 006 

-0.008 

0.000 

Rate 

Orb CM : I 

-Z5.65 

-Z.00 

18.81 Pos 

-0. 000 

0.000 

0.006 

Vel 


*** END OF SIMULATION *** 

Syncon 10#/Z4" Despin Stroke Displaced Aft 6” 

MANHANDLE Version 04B <11:11:13 Tue Z8 Oct 1986) Run @ 11:00:Z3 Mon 03 Nov 1986 


¥DDZ DA88D 


2 


Z — 1 1 



MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run S 11:00:23 Mon 03 Nov 1986 


•••• X Component (Crewman Reach Axes) 

— Y Component (Crewman Reach Axes) 

— Z Component (Crewman Reach Axes) 



Syncom 10#/24" Despin Stroke Displaced Aft 6" 



File ’ sncncorr . R* Page 1 


Updated © 08:44:39 Tue 04 Nov 198B 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run © 11:19:36 Mon 03 Nov 1986 


"nvr" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point < in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter WL of PL handling point (in) 

Payload STA of PL handle (in) 

Payload BL of PL handle (in) 

Payload UL of PL handle ..(in) 

Crewman reach limit from RO in +/- Rx direction. ...( in) 
Crewman reach limit from RO in +/- Ry direct ion. ...( in) 
Crewman reach limit from RO in +/- Rz direct ion. ...( in ) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (%) 


8 00.00000 

24.00000 
6 00.00000 
- 17.70378 
- 86 . 12500 

0. 00000 

1 2 . 00000 
12.00000 
12.00000 

6.00000 
6 . 00000 
6 . 00000 
1.00000 
10.00000 


¥E4B43234 


2 . 3 - 1 



File ’sncmcorr.R* Page 1 


Updated @ 08:44:39 Tue 04 Nov 1986 


MANHANDLE Version 04B ( 1 I : 11 : 1 3 Tue 28 Oct 1986) Run @ 11:20:08 Mon 03 Nov 1986 


"nvr" Initial Conditions for the Simulation 


Orbiter pitch urt I axes ....(deg) 

Orbiter yau urt I axes.. ..(deg) 

Orbiter roll urt I axes (deg) 

Orbiter Bx component of ang vel urt I axes ....( deg/sec) 

Orbiter By component of ang vel urt I axes ....( deg/sec ) 

Orbiter Bz component of ang vel urt I axes ....( deg/sec) 

Rx component of PL handle position (ft) 

Ry component of PL handle position. (ft) 

Rz component of PL handle position (ft) 

Pay load CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude. (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle (deg) 

Payload uobble clok angle.... (deg) 


0 . 00000 
0.00000 
0.00000 
0. 00000 
0.00000 
0.00000 
0 . 00000 
0.00000 
0.00000 
0. 00000 
0.00000 
0.00000 
10.00000 
-10.00000 
10.00000 
0.00000 
0.00000 
0. 00000 


¥F739801 9 


2 


3— 2 



File sncncorr . R’ Page 3 


Updated @ 08:44:39 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 11:20:10 Mon 03 Nov 1986 
Syncon Attitude Correction Maneuver ( Roll/Yau/Pitch) 


Tine » 0. 

000 

DesMode 

= PITCH 

CurMode 

= ROLL 



PL Nonspin = 

0. 00 

Wobble 

Cone = 0.00 

Wobble 

Clok = 

0.00 


CntrliH: R 

1.81 

-9.69 

-1.68 Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

-10.00 

0.07 

-0.05 Torq 

0.000 

0.000 

0. 000 

Fore 

PB Axes: PD 

10.00 

-10.00 

10.00 PYR 

0.000 

0.000 

0.000 

Rate 

PL Hndl : R 

0.00 

0.00 

0.00 Pos 

0.000 

0.000 

0.000 

Vel 

PB Axes: OB 

-170.00 

-10.00 

10.00 PYR 

0.000 

0.000 

0.000 

Rate 

PL CM : OB 

24. Z3 

8.96 

-19.68 Pos 

0.000 

0.000 

0.000 

Vel 

PL Rot K E 

0.00 







PLAngno: I 

0. 00 

0.00 

0.00 PYMag 

0.000 

0.000 

0.000 

Hxyz 

PB Axes: I 

-170.00 

-10.00 

10.00 PYR 

0.000 

0.000 

0.000 

Rate 

PL CM : I 

-1.42 

6.96 

-1.01 Pos 

0.000 

0.000 

0.000 

Vel 

OB Axes: I 

0.00 

0.00 

0.00 PYR 

0.000 

0.000 

0.000 

Rate 

Orb CM : I 

-25.65 

-2.00 

18.68 Pos 

0. 000 

0, 000 

0.000 

Vel 


T ine 

Stepsize 

0.000 

0.200 


¥D9BF1E5F 


2 


75 - 3 



File ’sncmcorr.R’ Page 4 Updated @ 08:44:39 Tue 04 Nov 1986 


Tine = 135. 

000 

DesMode 

= PITCH 

CurMode 

= HOLD 



PL Nonspin - 

0.00 

Nobble 

Cone = 62.44 

Nobble 

Clok = - 

99.52 


Cntrl@H: R 

0.01 

0.04 

0. 1 1 Torq 

-0.002 

0.015 

-0.006 

Fore 

Cntrl@H:PB 

0.04 

0.00 

-0. 1 1 Torq 

0.015 

-0.002 

0.006 

Fore 

PB Axes:PD 

-0.78 

-1.21 

0.79 PYR 

0.001 

-0.004 

0.001 

Rate 

PL Hndl : R 

-0.09 

-0.37 

0.39 Pos 

0.001 

-0.002 

0.002 

Vel 

PB Axes: OB 

179.22 

-1.21 

0.79 PYR 

0.001 

-0. 004 

0.001 

Rate 

PL CM : OB 

Z5.87 

9.08 

-18.38 Pos 

0.003 

0.001 

0.002 

Vel 

PL Rot K E 

0.00 







PLAngno: I 

163.18 

-62.50 

0.32 PYMag 

-0. 140 

-0.281 

-0.042 

Hxyz 

PB Axes: I 

179.44 

-1.25 

1.13 PYR 

0.001 

-0.004 

0.001 

Rate 

PL CM : I 

0.03 

6.99 

0.07 Pos 

0.002 

0.000 

0.001 

Vel 

OB Axes: I 

0.22 

0.04 

-0.34 PYR 

-0.001 

0.000 

0.000 

Rate 

Orb CM : I 

-25.76 

-2.00 

18.60 Pos 

-0.000 

-0.000 

-0.000 

Vel 


*** END OF SIMULATION *#* 

Syncon Attitude Correction Maneuver (Roll/Yau/Pitch) 

MANHANDLE Version 048 <11:11:13 Tue Z8 Oct 1986) Run @ 11:20:10 Mon 03 Nov 1986 


¥D5361 3F6 


Z 


3-4 



Control Torque (ft* lb) Control Force (lb) 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 11:20:10 Mon 03 Nov 1986 



r 50 60 70 80 90 100 110 120 130 140 150 

Time (sec) 


X Component (Payload Body Axes) 

Y Component (Payload Body Axes) 

Z Component (Payload Body Axes) 







i i yr i i i i i 


40 |*50 /60 70 


I I I I I 


100 110 120 130 140 150 

Time (sec) 


Syncom Attitude Correction Maneuver (Roll /Yaw/P itch) 


. 3-5 




2 . - 


File ’ snccisul u. R’ Page 1 


Updated @ 08:44:47 Tue 04 Nov 198B 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run 6 13:07:42 Mon 03 Nov 1986 


"sncnd" Payload Inertia Data 


Payload ueight.... (lb) 

CM STA (structural x coordinate of mass center )....( in) 

CM BL (structural y coordinate of mass center )....( in) 

CM UL (structural z coordinate of mass center )....( in) 

Ixx about CM, structural coordinates (slug*ft»ft) 

Iyy about CM, structural coordinates (slug*ft*ft) 

Izz about CM, structural coordinates (slug*ft*ft) 

Pxy about CM, structural coordinates (slug*ft*ft) 

Pxz about CM, structural coordinates (slug*ft*ft) 

Pyz about CM, structural coordinates (slug*ft*ft) 


152 32. 50000 
-17.71284 
0.15883 
0.08977 
6331.54180 
4425. 10827 
5217.64945 
-38.70922 
-25.49521 
30.29916 


¥E6B030B0 


Z . * 1 - 1 



File ’sncmsulu.R’ Page 2 


Updated @ 08:44:47 Tue 04 Nov 1986 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 


1986) Run @ 13:08:15 Mon 03 Nov 1986 


"fsu" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point (in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter UL of PL handling point (in) 

Payload STA of PL handle (in) 

Payload BL of PL handle (in) 

Payload IJL of PL handle (in) 

Crewman reach limit from RO in +/- Rx direction- (in) 

Crewman reach limit from RO in +/- Ry direction (in) 

Crewman reach limit from RO in +/- Rz direction (in) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (X) 



768.00000 
18.00000 

572.00000 
-17.71284 
-86.12500 

0.00000 
1 2 . 00000 
1 2 . 00000 
12.00000 
6.00000 
6.00000 
6.00000 
0.00000 
10.00000 


¥0BE 1 67C 1 


2 _ 4-Z 



File ’sncmsutu.R’ Page 3 


Updated @ 08:44:47 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 13:08:42 Mon 03 Nov 1986 


,, dploy M Attitude Paraneters for Payload Flight Control 


Crewman pitch urt Orbiter body axes (deg) 

Crewman yaw urt Orbiter body axes (deg) 

Crewman roll urt Orbiter body axes (deg) 

Desired Payload pitch urt Crewman body axes (deg) 

Desired Payload yau urt Crewman body axes ( deg) 

Desired Payload roll urt Crewman body axes (deg) 

Positive PL pitch limit urt desired attitude ( deg ) 

Positive PL yau limit urt desired attitude (deg) 

Positive PL roll limit wrt desired attitude. .....( deg) 

Negative PL pitch limit urt desired attitude (deg) 

Negative PL yau limit urt desired attitude (deg) 

Negative PL roll limit urt desired attitude (deg) 

PL pitch tolerance wrt desired attitude (deg) 

PL yau tolerance urt desired attitude (deg) 

PL roll tolerance urt desired attitude (deg) 

Nominal maneuver rate about PL Bx axis (deg/sec) 

Nominal maneuver rate about PL By axis (deg/sec) 

Nominal maneuver rate about PL Bz axis (deg/sec) 

Maneuver rate tolerance (%) 


0.00000 

90.00000 
0 . 00000 
0.00000 

-90.00000 

0.00000 

1 5 . 00000 

15.00000 

10.00000 
“15.00000 
“15. 00000 
“ 20.00000 

2.00000 
2 . 00000 
2 . 00000 
0 . 00000 
0.00000 
0.00000 
10,00000 


¥F4906690 


Z 


4~ 3 



File ’ sncmsul u. R’ Page 4 


Updated @ 08:44:47 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 13:09:04 Mon 03 Nov 1986 


"lim15” Force & Torque Parameters for Payload Flight Control 


Spinup axial (PL Bx ) force (lb) 

Spinup normal (PL By) force (lb) 

Spinup tangential (PL Bz ) force (lb) 

Despin axial (PL Bx ) force (lb) 

Despin normal (PL By) force (lb) 

Despin tangential (PL Bz ) force (lb) 

Axial (PL Bx ) force limit for capture (lb) 

Normal (PL By) force limit for capture (lb) 

Tangential (PL Bz ) force limit for capture (lb) 

Roll (PL Bx ) torque limit for capture (ft*lb) 

Pitch (PL By) torque limit for capture (ft*lb) 

Yau (PL Bz ) torque limit for capture <ft*lb) 


Time constant for computing desired accelerations (sec) 


0 . 00000 
0.00000 
- 15. 00000 
0. 00000 
0.00000 
15.00000 
15.00000 
15.00000 
15.00000 
15.00000 
15.00000 
15.00000 
5.00000 


¥078B46EB 


Z 


Ar~A 


File ’ sncmsul u. R’ Page 5 


Updated @ 08:44:47 Tue 04 Nov 198G 


MANHANDLE Version 04B <11:11:13 Tue 28 Oct 1986) Run @ 13:09:32 Mon 03 Nov 1986 


“fsu" Initial Conditions for the Simulation 


Orbiter pitch urt I axes (deg) 

Orbiter yau urt I axes (deg) 

Orbiter roll urt I axes (deg) 

Orbiter Bx component of ang vel urt I axes. . ..( deg/sec) 

Orbiter By component of ang vel urt I axes. ...( deg/ sec) 

Orbiter B 2 component of ang vel urt I axes. ...( deg/sec) 

Rx component of PL handle position (ft) 

Ry component of PL handle position (ft) 

Rz component of PL handle position (ft) 

Payload CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle (deg) 

Payload uobble cl ok angle (deg) 


0.00000 
0. 00000 
0.00000 
0.00000 
0. 00000 
0.00000 
0.00000 
0. 00000 
0.99167 
0. 00000 
0.00000 
0.00000 
0.00000 
0.00000 
-9.00000 
0 . 00000 
0.00000 
0.00000 


¥B81 F4BFF 


2 


4-5 



File ’sncnsulu.R’ Page 6 


Updated @ 08:44:47 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 13:09:35 Mon 
Syncon 158/Z4" Spinup Stroke Without Lateral Corrective Force 


Tine = 0. 

000 

PL Nonspin = 

0. 00 

Cntrl@H: R 

0.00 

Cntrl@H:PB 

0.00 

PB Axes:PD 

0.00 

PL Hndl : R 

0.00 

PB Axes: OB 

0.00 

PL CM : OB 

Z8.3Z 

PL Rot K E 

0.00 

PLAngno: I 

0.00 

PB Axes: I 

0.00 

PL CM : I 

0. 00 

OB Axes: I 

0. 00 

Orb CM : I 

-Z8.3Z 


Time 

Stepsize 

0. 000 

0. 100 


¥39CCC04C 


DesMode = SPINUP 


Wobble 

Cone = 

0.00 

0.00 

0.00 

Torq 

0.00 

0.00 

Torq 

0.00 

-9.00 

PYR 

0.00 

0.99 

Pos 

0.00 

-9.00 

PYR 

8.60 

-16.48 

Pos 

0.00 

0.00 PYMag 

0.00 

-9.00 

PYR 

7.10 

-0.14 

Pos 

0.00 

0.00 

PYR 

-1.50 

16.34 

Pos 


Z - 4- E» 


CurMode 

= SPINUP 

Wobble 

Clok = 

Z.347 

-0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 

0.000 


03 Nov 1986 


>.00 

4.815 Fore 
5.000 Fore 

0.000 Rate 
0.000 Vel 

0.000 Rate 
0.000 Vel 


0.000 Hxyz 
0.000 Rate 
0.000 Vel 

0.000 Rate 
0.000 Vel 



File ’sncmsulu.R’ Page 7 


Updated @ 08:44:47 Tue 04 Nov 198G 


Tine 

z FI ex 

DesMode 

CurMode 

T_PBx 

( sec) 

( in) 



( f t * 1 b > 

0.000 

0.00 

SPINUP 

SPINUP 

0.00 

0.050 

0. 00 

SPINUP 

SPINUP 

0.00 

0. 100 

0.04 

SPINUP 

SPINUP 

0.00 

0.150 

0.09 

SPINUP 

SPINUP 

0.00 

0.Z00 

0. 17 

SPINUP 

SPINUP 

0.00 

0.Z50 

0.Z5 

SPINUP 

SPINUP 

0.00 

0. 300 

0.37 

SPINUP 

SPINUP 

0.00 

0.350 

0.48 

SPINUP 

SPINUP 

0.00 

0.400 

0.6Z 

SPINUP 

SPINUP 

0.00 

0.450 

0.75 

SPINUP 

SPINUP 

0.00 

0.500 

0.89 

SPINUP 

SPINUP 

0.00 

0.550 

1.04 

SPINUP 

SPINUP 

0.00 

0.600 

1.18 

SPINUP 

SPINUP 

0.00 

0.650 

1 . 3Z 

SPINUP 

SPINUP 

0.00 

0.700 

1.45 

SPINUP 

SPINUP 

0.00 

0.750 

1.58 

SPINUP 

SPINUP 

0.00 

0.800 

1.69 

SPINUP 

SPINUP 

0.00 

0.850 

1.80 

SPINUP 

SPINUP 

0.00 

0. 900 

1.88 

SPINUP 

SPINUP 

0.00 

0.950 

1.96 

SPINUP 

SPINUP 

0.00 

1 .000 

Z.01 

SPINUP 

SPINUP 

0.00 

1 .050 

Z.06 

SPINUP 

SPINUP 

0.00 

1 . 100 

Z.07 

SPINUP 

SPINUP 

0.00 

1.150 

Z . 08 

SPINUP 

SPINUP 

0.00 

1 .Z00 

Z.06 

SPINUP 

SPINUP 

0.00 

1 . Z50 

Z . 04 

SPINUP 

SPINUP 

0.00 

1.300 

1.99 

SPINUP 

SPINUP 

0.00 

1.350 

1.94 

SPINUP 

SPINUP 

0.00 

1.400 

1.86 

SPINUP 

SPINUP 

0.00 

1 .450 

1.79 

SPINUP 

SPINUP 

0.00 

1.500 

1.69 

SPINUP 

SPINUP 

0.00 

1.550 

1.59 

SPINUP 

SPINUP 

0.00 

1.600 

1.49 

SPINUP 

SPINUP 

0.00 

1 .650 

1.38 

SPINUP 

SPINUP 

0.00 

1.700 

1 .Z7 

SPINUP 

SPINUP 

0.00 

1 .750 

1 . 17 

SPINUP 

SPINUP 

0.00 

1.800 

1.06 

SPINUP 

SPINUP 

0.00 

1.850 

0.96 

SPINUP 

SPINUP 

0.00 

1.900 

0.87 

SPINUP 

SPINUP 

0.00 

1 .950 

0.79 

SPINUP 

SPINUP 

0.00 

Z.000 

0.7Z 

SPINUP 

SPINUP 

0.00 

Z.050 

0.65 

SPINUP 

SPINUP 

0.00 

Z. 100 

0.60 

SPINUP 

SPINUP 

0.00 

Z. 150 

0.56 

SPINUP 

SPINUP 

0.00 

Z.Z00 

0.54 

SPINUP 

SPINUP 

0.00 

Z.Z50 

0.5Z 

SPINUP 

SPINUP 

0.00 

Z.300 

0.53 

SPINUP 

SPINUP 

0.00 

Z.350 

0.53 

SPINUP 

SPINUP 

0.00 

Z .400 

0.56 

SPINUP 

SPINUP 

0.00 

Z.450 

0.59 

SPINUP 

SPINUP 

0.00 

Z.500 

0.65 

SPINUP 

SPINUP 

0.00 

Z.550 

0.70 

SPINUP 

SPINUP 

0.00 

Z.600 

0.77 

SPINUP 

SPINUP 

0.00 

Z.650 

0.83 

SPINUP 

SPINUP 

0.00 

Z .700 

0.91 

SPINUP 

SPINUP 

0.00 

Z.750 

0.99 

SPINUP 

SPINUP 

0.00 

Z.800 

1 .07 

SPINUP 

SPINUP 

0.00 


T_PBy 

T_PBz 

F_PBx 

F_PBy 

F_PBz 

ft*lb) 

( f t*lb) 

(lb) 

(lb) 

(lb) 

0. 00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0. 00 

-15.00 

0. 00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0. 00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

- 15.00 

0.00 

0.00 # 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0. 00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0. 00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0. 00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0. 00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0. 00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0. 00 

0. 00 

-15.00 

0.00 

0.00 

0. 00 

0.00 

-15.00 


¥0AEEB7ZE 


2 _ A- — V 



File ’sncnsulu.R’ Page 8 


Updated @ 08:44:47 Tue 04 Nov 198G 


2.850 

1 .15 

2.900 

1.23 

2.950 

1.31 

3.000 

1.38 

3.050 

1 .45 

3.100 

1.51 

3. 150 

1.57 

3.200 

1.61 

3.250 

1.65 

3.300 

1.67 

3.350 

1 .70 

3.400 

1 .70 

3.450 

1.70 

3.500 

1.68 

3.550 

1.67 

3.600 

1.64 

3.650 

1.60 

3.700 

1.56 

3.750 

1.51 

3.800 

1.45 

3.850 

1.40 

3.900 

1.34 

3.950 

1.28 

4.000 

1.22 

4.050 

1.16 

4. 100 

1.10 

4. 150 

1.05 

4.200 

1.00 

4.250 

0.95 

4.300 

0.92 

4.350 

0.88 

4.400 

0.86 

4.450 

0.84 

4.500 

0.83 

4.550 

0.82 

4.600 

0.83 

4.650 

0.84 

4.700 

0.86 

4.750 

0.88 

4.800 

0.91 

4.850 

0.94 

4.900 

0.98 

4.950 

1.02 

5.000 

1.06 

5.050 

1.06 

5. 100 

1.02 

5. 150 

0.98 

5.200 

0.90 

5.250 

0.83 

5.300 

0.73 

5.350 

0.62 

5.400 

0.50 

5.450 

0.38 

5.500 

0.25 

5.550 

0.13 

5.600 

-0.00 

5.650 

-0.13 

5.700 

-0.25 

5.750 

-0.36 

5.800 

-0.46 

¥3B541 1D4 



SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 

SPINUP 

FREE 


0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

Uobble 

Cone = 

Uobble 

Cone ■= 

Uobble 

Cone = 

Uobble 

Cone 55 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 

Uobble 

Cone = 


2 . 4 - 8 


0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0. 00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.00 

0.08, 

Cl ok = 

0.09, 

Clok = 

0.09, 

Clok = 

0.09, 

Clok = 

0.09, 

Clok = 

0. 10, 

Clok = 

0. 10. 

Clok = 

0.10, 

Clok = 

0. 10, 

Clok = 

0.11, 

Clok = 

0.11. 

Clok = 

0.11, 

Clok = 

0.11, 

Clok = 

0. 12, 

Clok = 

0.12, 

Clok = 

0.12, 

Clok = 

0.12, 

Clok = 


0, 

.00 

-15 

.00 

0, 

.00 

-15 

.00 

0. 

.00 

-15 

.00 

0. 

.00 

-15 

.00 

0. 

.00 

-15 

.00 

0. 

.00 

-15, 

.00 

0. 

.00 

-15 

.00 

0. 

.00 

-15, 

.00 

0. 

.00 

-IS 

.00 

0. 

.00 

-15, 

.00 

0. 

.00 

-15, 

.00 

0. 

.00 

-15. 

.00 

0. 

,00 

-15, 

.00 

0. 

,00 

-15. 

.00 

0. 

.00 

-15, 

.00 

0. 

,00 

-15. 

,00 

0. 

.00 

-15. 

.00 

0. 

,00 

-15. 

.00 

0. 

,00 

-15. 

.00 

0. 

,00 

-15. 

,00 

0. 

,00 

-15. 

.00 

0. 

,00 

-15. 

.00 

0. 

,00 

-15. 

.00 

0. 

00 

-15. 

,00 

0. 

00 

-15. 

.00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

.00 

0. 

00 

-15. 

,00 

0. 

00 

-15. 

,00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

,00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 

0. 

00 

-15. 

00 


151.90 (deg) 
151.93 (deg) 
151.96 (deg) 
151.98 ( deg) 
152.01 (deg) 
152.03 (deg) 
152.06 (deg) 
152.09 (deg) 
152.11 ( deg ) 
152.14 (deg) 
152.17 (deg) 
152.19 ( deg ) 
152.22 (deg) 
152.25 (deg) 
152.28 (deg) 
152.30 (deg) 
152.33 (deg) 



File ’ sncmsul u. R’ Page 9 


5.850 

-0.56 

SPINUP 

FREE 

5.900 

-0.63 

SPINUP 

FREE 

5.950 

-0.70 

SPINUP 

FREE 

6.000 

-0.74 

SPINUP 

FREE 

6.050 

-0.78 

SPINUP 

FREE 

6. 100 

-0.79 

SPINUP 

FREE 

6. 150 

-0.80 

SPINUP 

FREE 

6.200 

-0.78 

SPINUP 

FREE 

6.250 

-0.76 

SPINUP 

FREE 

6.300 

-0.72 

SPINUP 

FREE 

6.350 

-0.67 

SPINUP 

FREE 

6.400 

-0.60 

SPINUP 

FREE 

6.450 

-0.53 

SPINUP 

FREE 

6.500 

-0.44 

SPINUP 

FREE 

6.550 

-0.36 

SPINUP 

FREE 

6.600 

-0.26 

SPINUP 

FREE 

6.650 

-0. 17 

SPINUP 

FREE 

6.700 

-0.07 

SPINUP 

FREE 

6.750 

0.03 

SPINUP 

FREE 

6.800 

0. 12 

SPINUP 

FREE 

6.850 

0.21 

SPINUP 

FREE 

6.900 

0.29 

SPINUP 

FREE 

6.950 

0.37 

SPINUP 

FREE 

7.000 

0.43 

SPINUP 

FREE 


Updated @ 08:44:47 


Uobble 

Cone 

- 

0.13, 

Clok 

Wobble 

Cone 


0.13, 

Clok 

Wobble 

Cone 

= 

0.13, 

Clok 

Wobble 

Cone 

sc 

0.13, 

Clok 

Wobble 

Cone 

= 

0. 14, 

Clok 

Wobble 

Cone 

« 

0. 14, 

Clok 

Wobble 

Cone 

SS 

0. 14, 

Clok 

Wobble 

Cone 

= 

0.14, 

Clok 

Wobble 

Cone 

s 

0. 15, 

Clok 

Wobble 

Cone 

- 

0.15, 

Clok 

Wobble 

Cone 

- 

0.15, 

Clok 

Wobble 

Cone 

= 

0.15, 

Clok 

Wobble 

Cone 

s= 

0. 16, 

Clok 

Wobble 

Cone 

s= 

0.16, 

Clok 

Wobble 

Cone 

= 

0.16, 

Clok 

Wobble 

Cone 

ss 

0.16, 

Clok 

Wobble 

Cone 

« 

0. 17, 

Clok 

Wobble 

Cone 

- 

0. 17, 

Clok 

Wobble 

Cone 


0. 17, 

Clok 

Wobble 

Cone 

= 

0.17, 

Clok 

Uobble 

Cone 


0.17, 

Clok 

Wobble 

Cone 

= 

0.18, 

Clok 

Wobble 

Cone 

= 

0.18, 

Clok 

Uobble 

Cone 


0.18, 

Clok 


¥F58155A1 


Z . 


Tue 04 Nov 198G 

152.3G (deg) 
152.39 (deg) 
152.42 (deg) 
152.44 (deg) 
152.47 (deg) 
152.50 (deg) 
152.53 (deg) 
152.56 (deg) 
152.59 (deg) 
152.61 (deg) 
152.64 (deg) 
152.67 (deg) 
152.70 (deg) 
152.73 (deg) 
152.76 (deg) 
152.79 (deg) 
152.81 (deg) 
152.84 (deg) 
152.87 (deg) 
152.90 (deg) 
152.93 (deg) 
152.96 (deg) 
152.99 (deg) 
153.02 (deg) 


4 — S 



File ’ sncnsulu.R’ Page 10 


Updated @ 08:44:47 Tue 04 Nov 1986 


Tine = 7. 

000 

DesMode 

= SPINUP 

CurMode 

= FREE 


PL Nonspin = 

4.78 

Wobble 

Cone = 0.18 

Wobble 

Clok = 

153. 0Z 

CntrieH: R 

0.00 

0.00 

0.00 Torq 

0. 000 

0.000 

0.000 Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 Fore 

PB Axes: PD 

0.Z9 

-0.08 

1Z.70 PYR 

4.769 

0.068 

-0.013 Rate 

PL Hndl : R 

-0.01 

-0.00 

-Z.55 Pos 

0.04Z 

-0.030 

-0.860 Vel 

PB Axes: OB 

0.Z9 

-0.08 

1Z.70 PYR 

4.769 

0.068 

-0.013 Rate 

PL CM : OB 

Z8.Z9 

8.49 

-17. Z8 Pos 

-0.005 

-0.0Z0 

-0. 176 Vel 

PL Rot K E 

ZZ.06 






PLAngno: I 

0.03 

-0.0 Z 

5Z8.49 PYMag 

5Z8.488 

-0. 19Z 

-0.308 Hxyz 

PB Axes: I 

0.Z1 

-0.07 

1Z.77 PYR 

4.783 

0.05Z 

-0.007 Rate 

PL CM : I 

-0.00 

7.03 

-0.84 Pos 

-0.000 

-0.014 

-0.154 Vel 

OB Axes: I 

-0.08 

0.01 

0.07 PYR 

0.014 

-0.017 

0.00Z Rate 

Orb CM : I 

-Z8.3Z 

-1.49 

16.39 Pos 

0. 000 

0.001 

0.011 Vel 


T ine 

Stepsize 

7.000 

0. 100 


¥AC00ZC00 


2 


4 — 1 <Z> 



File ’ sncnsul u_R’ Page 11 Updated @ 08:44:47 Tue 04 Nov 198B 


Tine = 30. 

000 

DesMode 

= SPINUP 

CurMode 

= FREE 



PL Nonspin - 

4.78 

Wobble 

Cone = 1.36 

Wobble 

Clok = 

165.89 


CntrlSH: R 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0. 000 

0.000 

0.000 

Fore 

PB Axes:PD 

0.08 

1 .ZZ 

1 ZZ . 39 PYR 

4.768 

0.070 

0.096 

Rate 

PL Hndl : R 

10.36 

0.Z6 

-11.07 Pos 

0.484 

0.006 

0. 144 

Vel 

PB Axes: OB 

0.08 

1 .ZZ 

1 ZZ. 39 PYR 

4.768 

0.070 

0.096 

Rate 

PL CM : OB 

28. 1 5 

8.01 

—21 . 33 Pos 

-0.008 

-0.0 ZZ 

-0. 176 

Vel 

PL Rot K E 

ZZ.06 







PLAngno: I 

0.03 

-0.0 Z 

5Z8.49 PYMag 

5Z8.488 

-0. 19Z 

-0.308 

Hxyz 

PB Axes: I 

-0.40 

1 .Z7 

1ZZ.77 PYR 

4.781 

0.081 

0. 1 10 

Rate 

PL CM : I 

-0.00 

6.71 

-4.39 Pos 

-0.000 

-0.014 

-0.154 

Vel 

OB Axes: I 

-0.48 

0.05 

0.38 PYR 

0.014 

-0.017 

0.00 Z 

Rate 

Orb CM : I 

-Z8.3Z 

-1.47 

16.65 Pos 

0.000 

0.001 

0.01 1 

Vel 


*** END OF SIMULATION *** 

Syncon 15#/Z4“ Spinup Stroke Without Lateral Corrective Force 

MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run 6 13:09:35 Mori 03 Nov 1986 


¥C0B49634 


2 - Ar- 1 1 



MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 13:09:35 Mon 03 Nov 1986 


X Component (Crewman Reach Axes) 

Y Component (Crewman Reach Axes) 

Z Component (Crewman Reach Axes) 



Syncom 15#/24" Spinup Stroke Without Lateral Corrective Force 


Z . A-- 1 Z 


Control Torque (ft* lb) Control Force (lb) 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 13:09:35 Mon 03 Nov 1986 



2 . 4 - 1 3 







File ’sncmsuIc.R 1 Page 1 


Updated @ 08:44:55 Tue 04 Nov 1986 


MANHANDLE Version 04B < 11 : 1 1 s 1 3 Tue 28 Oct 1986) Run e 13:36:32 Mon 03 Nov 1986 


"fsulc 11 Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point (in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter WL of PL handling point (in) 

Payload STA of PL handle. ..(in) 

Payload BL of PL handle (in) 

Payload UL of PL handle (in) 

Crewman reach limit from RO in +/- Rx direction. ...( in) 

Crewman reach limit from RO in +/- Ry direct ion. ..,( in) 

Crewman reach limit from RO in +/- Rz direct ion. ...( in ) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (%) 


768.00000 
18.00000 

572.00000 
-17.71284 
-86. 12500 

0. 00000 
12.00000 
1 2 . 00000 
1 2 . 00000 
6 . 00000 
1 . 00000 
6.00000 
1 . 00000 
10.00000 


¥11530833 


Z - 5 — 1 



File * snensulc. R’ Page Z 


Updated @ 08:44:55 Tue 04 Nov 1986 


MANHANDLE Version 04B 

(11:11:13 

Tue Z8 Oct 1986) 

Run @ 13: 

36:40 Mon 

03 Nov 1986 

Syncon 15#/Z4" 

Spinup 

Stroke With Lateral Corrective Force 



Time = 0.000 

DesMode 

= SPINUP 

CurMode 

= SPINUP 


PL Nonspin = 

0.00 

Wobble 

Cone = 0.00 

Wobble Clok - 

0.00 

Cntrl@H: R 

0.00 

0.00 

0.00 Torq 

-Z.347 

-0.000 - 

14.815 Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0. 000 

0.000 - 

15.000 Fore 

PB Axes: PD 

0.00 

0.00 

-9.00 PYR 

0.000 

0.000 

0.000 Rate 

PL Hndl : R 

0.00 

0.00 

0.99 Pos 

0.000 

0.000 

0.000 Vel 

PB Axes: OB 

0.00 

0.00 

-9.00 PYR 

0.000 

0.000 

0.000 Rate 

PL CM : OB 

Z8.3Z 

8.60 

-16.48 Pos 

0.000 

0.000 

0.000 Vel 

PL Rot K E 

0.00 






PLAngno: I 

0.00 

0.00 

0.00 PYMag 

0.000 

0.000 

0.000 Hxyz 

PB Axes: I 

0.00 

0.00 

-9.00 PYR 

0.000 

0.000 

0.000 Rate 

PL CM : I 

0.00 

7. 10 

-0.14 Pos 

0.000 

0.000 

0.000 Vel 

OB Axes: I 

0.00 

0.00 

0.00 PYR 

0.000 

0.000 

0.000 Rate 

Orb CM : I 

-Z8.3Z 

-1.50 

16.34 Pos 

0. 000 

0.000 

0.000 Vel 


Tine Stepsize 

0. 000 0. 1 00 


¥DB0B0A6B 


Z . 5- Z 



File ’sncmsuIc.R’ Page 3 


Updated @ 08:44:55 Tue 04 Nov 1986 


Tine 
( sec ) 

zFlex 
( in ) 

DesMode 

CurMode 

T_PBx 

(ft*lb> 

0.000 

0.00 

SPINUP 

SPINUP 

0.00 

0.050 

0. 00 

SPINUP 

SPINUP 

0.00 

0. 100 

0.04 

SPINUP 

SPINUP 

0.00 

0.150 

0.09 

SPINUP 

SPINUP 

0. 00 

0.Z00 

0. 17 

SPINUP 

SPINUP 

0.00 

0.250 

0.25 

SPINUP 

SPINUP 

0.00 

0.300 

0.37 

SPINUP 

SPINUP 

0.00 

0.350 

0.48 

SPINUP 

SPINUP 

0.00 

0. 400 

0.62 

SPINUP 

SPINUP 

0.00 

0.450 

0.75 

SPINUP 

SPINUP 

0.00 

0.500 

0.89 

SPINUP 

SPINUP 

0.00 

0.550 

1.04 

SPINUP 

SPINUP 

0.00 

0. 600 

1.18 

SPINUP 

SPINUP 

0.00 

0.G50 

1.32 

SPINUP 

SPINUP 

0.00 

0.700 

1 .45 

SPINUP 

SPINUP 

0.00 

0.750 

1.58 

SPINUP 

SPINUP 

0.00 

0. 800 

1.69 

SPINUP 

SPINUP 

0.00 

0.850 

1.80 

SPINUP 

SPINUP 

0. 00 

0.900 

1.88 

SPINUP 

SPINUP 

0. 00 

0.950 

1.96 

SPINUP 

SPINUP 

0.00 

1.000 

2.01 

SPINUP 

SPINUP 

0.00 

1 .050 

2.06 

SPINUP 

SPINUP 

0.00 

1 . 100 

2.07 

SPINUP 

SPINUP 

0.00 

1.150 

2.08 

SPINUP 

SPINUP 

0. 00 

1.200 

2.06 

SPINUP 

SPINUP 

0.00 

1.250 

2.04 

SPINUP 

SPINUP 

0.00 

1.300 

1.99 

SPINUP 

SPINUP 

0.00 

1.350 

1.94 

SPINUP 

SPINUP 

0.00 

1.400 

1.86 

SPINUP 

SPINUP 

0.00 

1 .450 

1 .78 

SPINUP 

SPINUP 

0.00 

1.500 

1.69 

SPINUP 

SPINUP 

0.00 

1.550 

1.59 

SPINUP 

SPINUP 

0.00 

1.600 

1 .49 

SPINUP 

SPINUP 

0.00 

1.650 

1.38 

SPINUP 

SPINUP 

0. 00 

1 .700 

1.27 

SPINUP 

SPINUP 

0.00 

1 .750 

1 . 17 

SPINUP 

SPINUP 

0.00 

1.800 

1.06 

SPINUP 

SPINUP 

0.00 

1.850 

0.96 

SPINUP 

SPINUP 

0.00 

1.900 

0.87 

SPINUP 

SPINUP 

0.00 

1.950 

0.79 

SPINUP 

SPINUP 

0. 00 

2.000 

0.71 

SPINUP 

SPINUP 

0.00 

2.050 

0.65 

SPINUP 

SPINUP 

0.00 

2. 100 

0.60 

SPINUP 

SPINUP 

0.00 

2.150 

0.56 

SPINUP 

SPINUP 

0.00 

2.200 

0.54 

SPINUP 

SPINUP 

0.00 

2.250 

0.52 

SPINUP 

SPINUP 

0.00 

2.300 

0.53 

SPINUP 

SPINUP 

0.00 

2.350 

0.53 

SPINUP 

SPINUP 

0. 00 

2.400 

0.56 

SPINUP 

SPINUP 

0.00 

2.450 

0.59 

SPINUP 

SPINUP 

0.00 

2.500 

0.65 

SPINUP 

SPINUP 

0. 00 

2.550 

0.70 

SPINUP 

SPINUP 

0.00 

2.600 

0.77 

SPINUP 

SPINUP 

0.00 

2.650 

0.83 

SPINUP 

SPINUP 

0.00 

2.700 

0.91 

SPINUP 

SPINUP 

0.00 

2.750 

0.99 

SPINUP 

SPINUP 

0.00 

2.800 

¥68539233 

1 .07 

SPINUP 

SPINUP 

0.00 
Z _ 5 


T_PBy 

T_PBz 

F_PBx 

F_PBy 

F_PBz 

ft*lb> 

( f t*lb) 

(lb) 

(lb) 

( lb) 

0.00 

0. 00 

0.00 

0.00 

-15.00 

0.00 

0.00 

0.00 

0. 00 

-15.00 

0.00 

0.00 

-0.25 

0.01 

-15.00 

0. 00 

0.00 

-0.45 

0.02 

-15.00 

0.00 

0. 00 

-0.63 

0.02 

-15.00 

0.00 

0.00 

-0.76 

0.03 

-15.00 

0.00 

0.00 

-0.87 

0.03 

-15.00 

0.00 

0.00 

-0.92 

0.03 

-15.00 

0.00 

0.00 

-0.96 

0.03 

-15.00 

0.00 

0.00 

-0.93 

0.03 

-15.00 

0.00 

0.00 

-0.90 

0.03 

-15.00 

0.00 

0.00 

-0.81 

0.03 

-15.00 

0.00 

0. 00 

-0.72 

0.02 

-15.00 

0. 00 

0.00 

-0.58 

0.02 

-15.00 

0.00 

0.00 

-0.44 

0.01 

-15.00 

0.00 

0.00 

-0.26 

0.01 

-15.00 

0.00 

0.00 

-0.04 

0.00 

-15.00 

0. 00 

0.00 

0.07 

-0.00 

-15.00 

0.00 

0.00 

0.30 

-0.01 

-15.00 

0.00 

0.00 

0.49 

-0.02 

-15.00 

0.00 

0.00 

0.68 

-0.02 

-15.00 

0.00 

0.00 

0.85 

-0.03 

-15.00 

0.00 

0.00 

1.02 

-0.03 

-15.00 

0.00 

0.00 

1.16 

-0.04 

-15.00 

0.00 

0.00 

1.30 

-0.04 

-15.00 

0.00 

0.00 

1.39 

-0.04 

-15.00 

0.00 

0.00 

1 .49 

-0.05 

-14.99 

0.00 

0.00 

1.53 

-0.05 

-14.99 

0.00 

0.00 

1.57 

-0.05 

-14.99 

0.00 

0.00 

1.56 

-0.05 

-14.99 

0.00 

0.00 

1.54 

-0.05 

-14.99 

0.00 

0.00 

1 .48 

-0.05 

-14.99 

0.00 

0.00 

1 .41 

-0.04 

-14.99 

0.00 

0.00 

1.30 

-0.04 

-15.00 

0.00 

0. 00 

1 . 19 

-0.04 

-15.00 

0.00 

0.00 

1 .04 

-0.03 

-15.00 

0.00 

0. 00 

0.89 

-0.03 

-15.00 

0,00 

0.00 

0.71 

-0.02 

-15.00 

0.00 

0.00 

0.54 

-0.02 

-15.00 

0.00 

0.00 

0.35 

-0.01 

-15.00 

0.00 

0.00 

0. 16 

-0.01 

-15.00 

0.00 

0.00 

-0.01 

0.00 

-15.00 

0.00 

0.00 

-0.22 

0.01 

-15.00 

0.00 

0.00 

-0.39 

0.01 

-15.00 

0.00 

0.00 

-0.56 

0.02 

-15.00 

0.00 

0.00 

-0.71 

0.02 

-15.00 

0.00 

0.00 

-0.85 

0.03 

-15.00 

0.00 

0.00 

-0.97 

0.03 

-15.00 

0.00 

0.00 

-1.08 

0.04 

-15.00 

0.00 

0.00 

-1.15 

0.04 

-15.00 

0.00 

0.00 

-1.21 

0.04 

-15.00 

0.00 

0.00 

-1.24 

0.04 

-15.00 

0.00 

0.00 

-1.26 

0.04 

-15.01 

0.00 

0.00 

-1.24 

0.04 

-15.00 

0.00 

0.00 

-1.22 

0.04 

-15.00 

0.00 

0.00 

-1.16 

0.04 

-15.00 

0.00 

0.00 

-1 . 10 

0.04 

-15.00 


3 



File ’sncMsulc.R’ Page 4 Updated § 08:44:55 Tue 04 Nov 198G 


Z.850 

1 .15 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-1.00 

0.03 

-15.00 

Z.900 

1.23 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.91 

0.03 

-15.00 

Z.950 

1.31 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

-0.78 

0.03 

-15.00 

3 . 000 

1.38 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

-0.66 

0.02 

-15.00 

3.050 

1.45 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.52 

0.02 

-15.00 

3. 100 

1.51 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.38 

0.01 

-15.00 

3. 150 

1.57 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.24 

0.01 

-15.00 

3.Z00 

1.61 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

-0.06 

0.00 

-15.00 

3.Z50 

1.65 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.01 

-0.00 

-15.00 

3.300 

1.68 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.18 

-0.01 

-15.00 

3.350 

1.70 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.30 

-0.01 

-15.00 

3.400 

1.70 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.42 

-0.01 

-15.00 

3.450 

1.70 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.53 

-0.0Z 

-15.00 

3.500 

1.69 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.63 

-0.02 

-15.00 

3.550 

1.67 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.70 

-0.0Z 

-15.00 

3.600 

1.64 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

0.77 

-0.02 

-15.00 

3.650 

1.60 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.81 

-0.03 

-15.00 

3.700 

1.56 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.85 

-0.03 

-15.00 

3.750 

1.51 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.86 

-0.03 

-15.00 

3.800 

1.45 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.87 

-0.03 

-15.00 

3.850 

1 .40 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.84 

-0.03 

-15.00 

3.900 

1.34 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.82 

-0.03 

-15.00 

3.950 

1.Z8 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.77 

-0.02 

-15.00 

4.000 

1 .Z2 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

0.72 

-0.02 

-15.00 

4.050 

1.16 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.64 

-0.02 

-15.00 

4. 100 

1 . 10 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.57 

-0.02 

-15.00 

4. 150 

1 .04 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

0.48 

-0.02 

-15.00 

4.Z00 

1 .00 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

0.39 

-0.01 

-15.00 

4.Z50 

0.95 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.29 

-0.01 

-15.00 

4.300 

0.91 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

0.20 

-0.01 

-15.00 

4.350 

0.88 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0.06 

-0.00 

-15.00 

4.400 

0.86 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

0. 00 

-0.00 

-15.00 

4.450 

0.83 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.04 

0.00 

-15.00 

4.500 

0.83 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.17 

0.01 

-15.00 

4.550 

0.8Z 

SPINUP 

SPINUP 

0.00 

0.00 

0. 00 

-0.25 

0.01 

-15.00 

4.600 

0.83 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.32 

0.01 

-15.00 

4.650 

0.83 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.37 

0.01 

-15.00 

4.700 

0.86 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

-0.43 

0.01 

-15.00 

4.750 

0.88 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.46 

0.01 

-15.00 

4.800 

0.91 

SPINUP 

SPINUP 

0.00 

0.00 

0.00 

-0.49 

0.02 

-15.00 

4.850 

0.94 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

-0.49 

0.02 

-15.00 

4.900 

0.98 

SPINUP 

SPINUP 

0.00 

0. 00 

0.00 

-0.50 

0.02 

-15.00 

4.950 

1.0Z 

SPINUP 

SPINUP 

0. 00 

0.00 

0.00 

-0.48 

0.02 

-15.00 

5.000 

1.06 

SPINUP 

FREE 

Wobble 

Cone = 

0.25, 

Clok = 

172.51 

( deg) 

5.050 

1 .06 

SPINUP 

FREE 

Wobble 

Cone * 

0.26, 

Clok “ 

172.36 

(deg) 

5. 100 

1 .0Z 

SPINUP 

FREE 

Wobble 

Cone = 

0.26, 

Clok = 

172.21 

( deg) 

5. 150 

0.98 

SPINUP 

FREE 

Wobble 

Cone = 

0.26, 

Clok = 

172.07 

( deg) 

5.Z00 

0.90 

SPINUP 

FREE 

Wobble 

Cone * 

0.26, 

Clok = 

171 .93 

( deg) 

S.Z50 

0.83 

SPINUP 

FREE 

Wobble 

Cone = 

0.26, 

Clok = 

171.79 

(deg) 

5.300 

0.73 

SPINUP 

FREE 

Wobble 

Cone = 

0.27, 

Clok = 

171 .65 

( deg ) 

5.350 

0.63 

SPINUP 

FREE 

Wobble 

Cone = 

0.27, 

Clok = 

171.52 

( deg) 

5.400 

0.50 

SPINUP 

FREE 

Wobble 

Cone = 

0.27, 

Clok = 

171.39 

( deg) 

5.450 

0.38 

SPINUP 

FREE 

Wobbl e 

Cone = 

0. 27, 

Clok = 

171.26 

( deg ) 

5.500 

0.25 

SPINUP 

FREE 

Wobbl e 

Cone = 

0.28, 

Clok = 

171 .14 

( deg ) 

5.550 

0.13 

SPINUP 

FREE 

Wobble 

Cone = 

0.28, 

Clok = 

171.02 

( deg) 

5.600 

-0.00 

SPINUP 

FREE 

Uobble 

Cone = 

0.28, 

Clok = 

170.90 

( deg ) 

5.650 

-0.13 

SPINUP 

FREE 

Wobble 

Cone = 

0.28, 

Clok = 

170.78 

( deg ) 

5.700 

-0.Z5 

SPINUP 

FREE 

Uobble 

Cone = 

0.28, 

Clok = 

170.66 

( deg ) 

5.750 

-0.36 

SPINUP 

FREE 

Wobble 

Cone = 

0.Z9, 

Clok = 

170.55 

(deg) 

5.800 

-0.46 

SPINUP 

FREE 

Wobble 

Cone = 

0.29, 

Clok = 

170.44 

( deg ) 


¥Z 1 E89CE8 


2 . 5—4 



File ’ sncnsul c. R’ Page 5 


5.850 

-0.56 

SPINUP 

FREE 

Wobble 

5.900 

-0.63 

SPINUP 

FREE 

Wobble 

5.950 

-0.70 

SPINUP 

FREE 

Wobble 

6.000 

-0.74 

SPINUP 

FREE 

Wobble 

6.050 

-0.78 

SPINUP 

FREE 

Wobble 

6. 100 

-0.79 

SPINUP 

FREE 

Wobble 

6.150 

-0.80 

SPINUP 

FREE 

Wobble 

6.Z00 

-0.79 

SPINUP 

FREE 

Wobble 

6.250 

-0.77 

SPINUP 

FREE 

Wobble 

6.300 

-0.72 

SPINUP 

FREE 

Wobble 

6.350 

-0.67 

SPINUP 

FREE 

Wobble 

6.400 

-0.60 

SPINUP 

FREE 

Wobble 

6.450 

-0.53 

SPINUP 

FREE 

Wobble 

6.500 

-0.44 

SPINUP 

FREE 

Wobble 

6.550 

-0.36 

SPINUP 

FREE 

Wobbl e 

6.600 

-0.26 

SPINUP 

FREE 

Wobble 

6.650 

-0. 17 

SPINUP 

FREE 

Wobble 

6.700 

-0.07 

SPINUP 

FREE 

Wobble 

6.750 

0.03 

SPINUP 

FREE 

Wobble 

6.800 

0.12 

SPINUP 

FREE 

Wobble 

6.850 

0.21 

SPINUP 

FREE 

Wobble 

6.900 

0.29 

SPINUP 

FREE 

Wobble 

6.950 

0.37 

SPINUP 

FREE 

Wobble 

7.000 

0.43 

SPINUP 

FREE 

Wobble 


¥81 7CGEFC Z _ 5 


Updated @ 08:44:55 Tue 04 Nov 1986 


Cone 


0.29, 

Clok 

= 

170.33 

( deg) 

Cone 


0.29, 

Clok 

= 

170.22 

(deg) 

Cone 

= 

0.30, 

Clok 

= 

170.12 

( deg) 

Cone 

= 

0.30, 

Clok 


170.02 

( deg) 

Cone 

* 

0.30, 

Clok 

= 

169.92 

< deg) 

Cone 

■ 

0.30, 

Clok 

= 

169.82 

( deg) 

Corie 

* 

0.31 , 

Clok 

= 

169.72 

( deg) 

Cone 

= 

0.31 , 

Clok 

sa 

169.63 

( deg) 

Cone 


0.31 , 

Clok 

= 

169.54 

( deg) 

Cone 

= 

0.31 , 

Clok 

- 

169.44 

( deg ) 

Cone 

- 

0.31 , 

Clok 

* 

169.35 

( deg ) 

Cone 

=* 

0.32, 

Clok 

« 

169.27 

( deg) 

Cone 

* 

0.32, 

Clok 

* 

169.18 

( deg ) 

Cone 

= 

0.3Z, 

Clok 

= 

169.10 

( deg ) 

Cone 


0.3Z, 

Clok 

* 

169.01 

( deg ) 

Cone 

= 

0.33, 

Clok 

a 

168.93 

( deg ) 

Cone 

= 

0.33, 

Clok 

a 

168.85 

( deg ) 

Cone 

» 

0.33, 

Clok 

a 

168.78 

( deg ) 

Cone 


0.33, 

Clok 


168.70 

( deg) 

Cone 

* 

0.34, 

Clok 

= 

168.62 

( deg) 

Cone 

« 

0.34, 

Clok 

a : 

168.55 

( deg) 

Cone 

- 

0.34, 

Clok 

ss 

168.48 

( deg) 

Cone 

* 

0.34, 

Clok 

= 

168.41 

( deg) 

Cone 


0.35, 

Clok 


168.34 

( deg) 


5 



File ’ sncrosul c. R' Page G 


Updated @ 08:44:55 Tue 04 Nov 1986 


Tine = 7. 

000 

DesMode 

= SPINUP 

CurMode 

= FREE 


PL Nonspin = 

4.78 

Uobbl e 

Cone = 0.35 

Wobble 

Clok = 

168.34 

Cntrl@H: R 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 Fore 

PB Axes: PD 

0.28 

0.00 

12.70 PYR 

4.769 

0.067 

0.005 Rate 

PL Hndl: R 

-0.01 

-0.02 

-2.55 Pos 

0.042 

-0.025 

-0.860 Vel 

PB Axes: OB 

0.28 

0.00 

12.70 PYR 

4.769 

0.067 

0.005 Rate 

PL CM : OB 

28.30 

8.49 

-17.28 Pos 

-0.005 

-0.020 

-0.176 Vel 

PL Rot K E 

22.06 






PLAngno: I 

-0. 14 

0.01 

528.48 PYMag 

528.483 

0.075 

1.315 Hxyz 

PB Axes: I 

0.20 

0.01 

12.77 PYR 

4.783 

0.050 

0.011 Rate 

PL CM : I 

0.00 

7.03 

-0.84 Pos 

0.000 

-0.014 

-0.154 Vel 

OB Axes: I 

-0.08 

0.01 

0.07 PYR 

0.014 

-0.017 

0.002 Rate 

Orb CM : I 

-28.32 

-1.49 

16.39 Pos 

-0.000 

0.001 

0.011 Vel 


Tine Stepsize 

7.000 0.100 



¥B7FFB81F 


Z 


5- G 



File * sncnsul c. R’ Page 7 


Updated @ 08:44:55 Tue 04 Nov 198G 


Tine = 30. 

000 

DesMode 

= SPINUP 

CurMode 

« FREE 



PL Nonspin = 

4.78 

Wobble 

Cone = 1.48 

Wobble 

Clok = 

170.13 


Cntrl@H: R 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 

Fore 

PB Axes:PD 

-0.Z3 

1 .32 

122.39 PYR 

4.768 

0.060 

0. 1 10 

Rate 

PL Hndl: R 

10.36 

0.Z2 

-11.07 Pos 

0.484 

0. 006 

0. 144 

Vel 

PB Axes: OB 

-0.Z3 

1.32 

122.39 PYR 

4.768 

0.060 

0. 1 10 

Rate 

PL CM : OB 

28. 16 

8.01 

-Z1.33 Pos 

-0.007 

-0.022 

-0. 176 

Vel 

PL Rot K E 

ZZ.06 







PLAngno: I 

-0. 14 

0.01 

528.48 PYMag 

528.483 

0.075 

1.315 

Hxyz 

PB Axes: I 

-0.7Z 

1.37 

122.77 PYR 

4.781 

0.071 

0.124 

Rate 

PL CM : I 

0.01 

6.71 

-4.39 Pos 

0.000 

-0.014 

-0.154 

Vel 

OB Axes: I 

-0.48 

0.05 

0.38 PYR 

0.014 

-0.017 

0.002 

Rate 

Orb CM : I 

-Z8.3Z 

-1.47 

16.65 Pos 

-0.000 

0.001 

0.01 1 

Vel 


*** END OF SIMULATION *** 

Syncon 15#/Z4" Spinup Stroke With Lateral Corrective Force 

MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 13:36:40 Mon 03 Nov 1986 


¥Z5D81ED8 


Z 


5 -V 



RMS Flexure (in) 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 8 13:36:40 Mon 03 Nov 1986 


X Component (Crewman Reach Axes) 

Y Component (Crewman Reach Axes) 

Z Component (Crewman Reach Axes) 




Control Torque (ft*lb) Control Force (lb) 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 8 13:36:40 Hon 03 Nov 1986 



z - 5—9 



Z - G- j 



File ’sncmcala.R' Page 1 


Updated @ 08:45:02 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:03:36 Mon 03 Nov 1986 


"ssu" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point (in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter UL of PL handling point (in) 

Payload STA of PL handle (in) 

Payload BL of PL handle (in) 

Payload WL of PL handle (in) 

Creuman reach limit from RO in + /- Rx direction. ...( in) 

Creuman reach limit from RO in +/- Ry direct ion. ...( in) 

Creuman reach limit from RO in +/- Rz direct ion. ...( in ) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (X) 


800 . 00000 

24.00000 
600.00000 
-17.71284 
-86.12500 

0.00000 

12.00000 
1 2 . 00000 
1 2 . 00000 

6 . 00000 
6.00000 
6 . 00000 
0 . 00000 
0.00000 


¥23850325 


2 . G- 1 



File ’sncmcala.R 1 Page Z 


Updated @ 08:45:02 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 14:04:21 Mon 03 Nov 1986 


"adfra" Initial Conditions for the Simulation 


Orbiter pitch urt I axes .(deg) 

Orbiter yaw urt I axes,. , ..(deg) 

Orbiter roll urt I axes (deg) 

Orbiter Bx component of ang vel urt I axes ....( deg/sec) 

Orbiter By component of ang vel urt I axes ....( deg/sec ) 

Orbiter Bz component of ang vel urt I axes ....( deg/sec ) 

Rx component of PL handle position (ft) 

Ry component of PL handle position (ft) 

Rz component of PL handle position (ft) 

Payload CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude. (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle (deg) 

Payload uobble clok angle (deg) 


0.00000 
0.00000 
0.00000 
0.00000 
0. 00000 
0. 00000 
-0.08000 
0.62000 
-1.48000 
0.00000 
0.00000 
0.00000 
2.21000 
-3,34000 
6.55000 
3.91600 
10.98000 
31.31000 


¥0C 1 4CE94 


2 





File ’ sncmcal a. R* Page 3 


Updated @ 08:45:02 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 14:04:25 Mon 03 Nov 1986 
Syncom Coast After First Spinup Stroke Applied 6" Fud & Rotated 10 deg Aft 


Tine = 0. 

000 

DesMode 

= FREE 

CurMode 

- FREE 


PL Nonspin = 

3.92 

Wobble 

Cone - 10.98 

Wobble 

Clok = 

31.31 

Cntrl@H: R 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 Torq 

0.000 

0.000 

0.000 Fore 

PB Axes:PD 

2.21 

-3. 34 

6.55 PYR 

3.923 

0.605 

-0.810 Rate 

PL Hndl : R 

-0.08 

0.62 

-1.48 Pos 

0.061 

0.117 

-0.485 Vel 

PB Axes: OB 

2.21 

-3.34 

6.55 PYR 

3.923 

0.605 

-0.810 Rate 

PL CM : OB 

25.48 

9.05 

-19.36 Pos 

0.000 

0.000 

0.000 Vel 

PL Rot K E 

15.55 






PLAngmo: I 

10.87 

3.41 

440.81 PYMag 

432 . 1 30 

26.230 

-83.013 Hxyz 

PB Axes: I 

2.21 

-3.34 

6.55 PYR 

3.923 

0.605 

-0.810 Rate 

PL CM : I 

-0. 17 

7.05 

-0.68 Pos 

0.000 

0.000 

0.000 Vel 

OB Axes: I 

0.00 

0.00 

0.00 PYR 

0.000 

0.000 

0.000 Rate 

Orb CM : I 

-25.65 

-2.00 

18.68 Pos 

0.000 

0.000 

0.000 Vel 


Tine Stepsize 


0.000 

268.500 


1.500 

0.500 


YAF59D479 


(S— 3 



File ’sncncala.R’ Page 4 


Updated @ 08:45:02 Tue 04 Nov 1986 


Tine = 269 

.000 

DesMode 

= FREE 

CurMode 

« FREE 



PL Nonspin 

= 3.88 

Uobble 

Cone = 

13.44 

Uobble 

Clok = 

-4.96 


CntrlSH: R 

0.00 

0.00 

0.00 

Torq 

0.000 

0.000 

0.000 

Fore 

Cntrl@H:PB 

0.00 

0.00 

0.00 

Torq 

0.000 

0.000 

0.000 

Fore 

PB Axes:PD 

-2.58 

2.88 

7.58 

PYR 

3.884 

-0.073 

-1.140 

Rate 

PL Hndl : R 

-0.07 

-0.23 

-1.61 

P05 

0.056 

0. 124 

-0.489 

Vel 

PB Axes: OB 

-2.58 

2.88 

7.58 

PYR 

3.884 

-0.073 

-1.140 

Rate 

PL CM : OB 

25.48 

9.05 

-19.36 

Pos 

0.000 

0. 000 

0.000 

Vel 

PL Rot K E 

15.55 








PLAngno: I 

10.87 

3.41 

440.81 

PYMag 

432 . 1 30 

26.226 

-83.012 

Hxyz 

PB Axes: I 

-2.58 

2.88 

7.58 

PYR 

3.884 

-0.073 

-1.140 

Rate 

PL CM : I 

-0. 17 

7.05 

-0.68 

Pos 

0. 000 

0.000 

0.000 

Vel 

OB Axes: I 

0.00 

0.00 

0.00 

PYR 

0.000 

0.000 

0.000 

Rate 

Orb CM : I 

-25.65 

-2.00 

18.68 

Pos 

0.000 

0.000 

0.000 

Vel 


*** END OF SIMULATION *** 

Syncom Coast After First Spinup Stroke Applied 6" Fud & Rotated 10 deg Aft 
MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:04:25 Mon 03 Nov 1986 


¥AA1 B597B 


2 


e-4 



File ’sncmcala.R 


Page 5 


Updated @ 08:45:02 Tue 04 Nov 1986 


Plot 

Start 

Tine 

Payload 

fltt itude 

wrt I fixes 

Symbol 

Rev # 

( sec) 

Pitch 

Yaw 

Roll 

M r 

1 

87.750 

24.41 

-1.52 

-1.03 (deg) 

"Z" 

2 

177.750 

16.37 

14.34 

-0.44 (deg) 

"3" 

3 

Z 57 . 000 

-2.54 

5. 17 

-0.20 (deg) 


¥F49CA71C 


z - e-s 




MANHANDLE Version 04B (11s 11: 13 Tue 28 Oct 1986) Run 6 14:04:25 Mon 03 Nov 1986 



Syncom Coast After First Spinup Stroke Applied 6" Fwd & Rotated 10 deg Aft 


z . e- e 



File ’ anciihold. R’ Page 1 


Updated @ 08:45:10 Tue 04 Nov 1986 


MANHANDLE Version 04B <11:11:13 Tue Z8 Oct 1986) Run @ 14:15:45 Mon 03 Nov 1986 


‘■rigicT Translational Alacrity Matrix 
Alacrity matrix, element [1,1] 

for RMS Flexure 
. . ( ft/sec/sec/lb) 

0.00000 

Alacrity 

matrix, element 

[1,21 

- . ( ft /sec/ sec/ lb > 

0.00000 

Alacrity 

matrix, element 

11,31 

. . ( f t /sec/sec/lb) 

0. 00000 

Alacrity 

matrix, element 

12,11 

. • ( ft/sec/sec/lb) 

0.00000 

Alacrity 

matrix, element 

<2,21 

• - ( f t /sec/ sec/ lb ) 

0.00000 

Alacrity 

matrix, element 

12,31 

. . < ft/sec/ sec/ lb) 

0.00000 

Alacrity 

matrix, element 

[3,11 

. . < ft/ sec/ sec/1 b ) 

0.00000 

Alacrity 

matrix, element 

[3,21 

. . ( ft/sec/sec/lb) 

0 . 00000 

Alacrity 

matrix, element 

[3,31 

. . < f t/sec/sec/lb) 

0. 00000 


¥501 5AFB5 


2 - V- 1 


File ’ sncmhold. R’ Page Z 


Updated @ 08:45:10 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 14:15:57 Mon 03 Nov 1986 


"rigid" Translational Damping Constant Matrix for RMS Flexure 


Damping 

constant 

matrix , 

element 


. ..( lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

M ,Z1... 

...(lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

M ,31... 

. ..( lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

£2,11... 

...(lb/ft/sec) 

0 . 00000 

Damping constant 

matrix , 

element 

£2,21... 

. . . ( lb/f t/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

[2,31... 

- . .< lb/ft/sec> 

0.00000 

Damping 

constant 

matrix , 

element 

£3,11... 

- - .( lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

£3,21. . . 

. . . ( lb/ft/sec) 

0.00000 

Damping 

constant 

matrix , 

element 

[3,31... 

...(lb/ft/sec) 

0.00000 


¥8ED9C5F9 


Z 


V— Z 


File 1 sncnhold. R’ Page 3 


Updated @ 08:45:10 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:16:11 Mon 03 Nov 1986 


"rigid" Translational Spring Constant Matrix for RMS Flexure 


Spring 

constant 

matrix , 

element 

t i,u 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[ 1 ,z\ 

(lb/ft) 

0.00000 

Spring constant 

matrix , 

element 

M,3] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[2,1] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[2,2] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[2,3] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[3,1] 

(lb/ft) 

0.00000 

Spring 

constant 

matrix , 

element 

[3,2] 

( lb/ft > 

0. 00000 

Spring 

constant 

matrix , 

element 

[3,3] 

(lb/ft) 

0. 00000 


¥FCF35Z93 


Z . 7- 3 



File ’ sncmhold.R' Page 4 


Updated 6 08:45:10 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:16:35 Mon 03 Nov 1986 


sncmh" Payload Inertia Data 


Payload weight (lb) 

CM STA (structural x coordinate of mass center )....( in) 

CM BL (structural y coordinate of mass center )....( in) 

CM UL (structural z coordinate of mass center )....( in) 

Ixx about CM, structural coordinates (slug*ft*ft) 

Iyy about CM, structural coordinates (slug»ft*ft) 

Izz about CM, structural coordinates (slug*ft*ft) 

Pxy about CM, structural coordinates (slug*ft*ft) 

Pxz about CM, structural coordinates (slug*ft*ft) 

Pyz about CM, structural coordinates (slug*ft*ft) 


15227.00000 
-17.71000 
0.19000 
0.09000 
6322.70000 
4424.40000 
5208. 10000 
-38.70000 
-26.30000 
30 . 30000 


¥ 10501 A50 


Z . ’7 — 4 - 



File ’ sncmhold. R’ Page 5 


Updated @ 08:45:10 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:16:55 Mon 03 Nov 1986 


‘'hold" Position Parameters for Payload Flight Control 


Nominal Orbiter STA of PL handling point (in) 

Nominal Orbiter BL of PL handling point (in) 

Nominal Orbiter WL of PL handling point (in) 

Payload STA of PL handle (in) 

Payload BL of PL handle (in) 

Payload UL of PL handle (in) 

Crewman reach limit from RO in +/- Rx direction. ...( iri) 

Crewman reach limit from RO in +/- Ry direct ion. ...( in) 

Crewman reach limit from RO in +/- Rz direction. ...( in) 

Rx position tolerance for PL handle (in) 

Ry position tolerance for PL handle (in) 

Rz position tolerance for PL handle (in) 

Nominal vel for handle position correction (in/sec) 

Tolerance for corrective velocity (%) 


768.00000 
9 3 . 00000 

486.00000 
-17.71000 

86.12500 
0.00000 
1 2 . 00000 
12.00000 
1 2 . 00000 
6 . 00000 
6. 00000 
6.00000 
1.00000 
10.00000 


¥68934AF3 


V- !B 



File ’sncmhold.R’ Page G 


Updated 6 08:45:10 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 14:17:16 Mon 03 Nov 1986 


"hold" Attitude Parameters for Payload Flight Control 


Crewman pitch wrt Orbiter body axes (deg) 

Crewman yaw wrt Orbiter body axes (deg) 

Crewman roll wrt Orbiter body axes ....(deg) 

Desired Payload pitch wrt Crewman body axes (deg) 

Desired Payload yaw wrt Crewman body axes (deg) 

Desired Payload roll wrt Crewman body axes (deg) 

Positive PL pitch limit wrt desired attitude (deg) 

Positive PL yaw limit wrt desired att itude ( deg ) 

Positive PL roll limit wrt desired attitude (deg) 

Negative PL pitch limit wrt desired attitude (deg) 

Negative PL yaw limit wrt desired attitude (deg) 

Negative PL roll limit wrt desired attitude (deg) 

PL pitch tolerance wrt desired attitude (deg) 

PL yaw tolerance wrt desired attitude (deg) 

PL roll tolerance wrt desired attitude (deg) 

Nominal maneuver rate about PL Bx axis. .......( deg/sec) 

Nominal maneuver rate about PL By axis (deg/sec) 

Nominal maneuver rate about PL Bz axis (deg/sec) 

Maneuver rate tolerance (X) 


90.00000 

-45.00000 

90. 00000 

0.00000 

-90.00000 

180.00000 

15.00000 

15.00000 

1 0.00000 
-15.00000 
-15.00000 
- 20.00000 

2 . 00000 
2.00000 
2 . 00000 
0.25000 
0.25000 
0.25000 
10.00000 


¥B4BA83FA 


2 


7— G 



File ’sncmhold.R 1 Page 7 


Updated @ 08:45:10 Tue 04 Nov 198G 


MANHANDLE Version 04B (11:11 = 13 Tue 28 Oct 1986) Run @ 14:17:34 Mori 03 Nov 1986 


“hold" Force & Torque Parameters for Payload Flight Control 


Spinup axial (PL Bx ) force .(lb) 

Spinup normal (PL By) force (lb) 

Spinup tangential (PL Bz ) force (lb) 

Despin axial (PL Bx ) force (lb) 

Despin normal (PL By) force (lb) 

Despin tangential (PL Bz ) force (lb) 

Axial (PL Bx ) force limit for capture (lb) 

Normal (PL By) force limit for capture (lb) 

Tangential (PL Bz ) force limit for capture (lb) 

Roll (PL Bx ) torque limit for capture (ft*lb) 

Pitch (PL By) torque limit for capture (ft*lb) 

Yau (PL Bz ) torque limit for capture ( f t * 1 b > 


Time constant for computing desired accelerations (sec) 


0 . 00000 
0 . 00000 
- 10.00000 
0.00000 
0.00000 
10.00000 
10.00000 
10.00000 
10.00000 
2 . 00000 
10.00000 
10.00000 
5.00000 


¥22G9FF49 


2 . V- V 



File ’sncmhold.R 1 Page 8 


Updated @ 08:45:10 Tue 04 Nov 1986 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1986) Run @ 14:17:55 Mori 03 Nov 1986 


"hold" Initial Conditions for the Simulation 


Orbiter pitch urt I axes . (deg) 

Orbiter yau urt I axes .....(deg) 

Orbiter roll urt I axes . (deg) 

Orbiter Bx component of ang vel urt I axes . ...( deg/sec ) 
Orbiter By component of ang vel urt I axes . ...( deg/sec ) 
Orbiter Bz component of ang vel urt I axes . ...( deg/sec ) 

Rx component of PL handle position.. (ft) 

Ry component of PL handle position (ft) 

Rz component of PL handle position (ft) 

Payload CM Xdot urt Orbiter body axes (ft/sec) 

Payload CM Ydot urt Orbiter body axes (ft/sec) 

Payload CM Zdot urt Orbiter body axes (ft/sec) 

Payload pitch urt desired attitude (deg) 

Payload yau urt desired attitude (deg) 

Payload roll urt desired attitude (deg) 

Payload nominal spin rate (deg/sec) 

Payload uobble cone angle (deg) 

Payload uobble clok angle..... (deg) 


0.00000 
0.00000 
0. 00000 
- 0. 0002 6 
-0.20331 
0.00007 
0.00000 
0. 00000 
0.00000 
-0.03686 
0.00000 
0. 10081 
0 . 00000 
0 . 00000 
0 . 00000 
0. 00000 
0. 00000 
0 , 00000 


¥ 1 9BFDE5F 




7- e 



File ’sncnhold.R' Page a 


Updated @ 08:45:10 Tue 04 Nov 1985 


MANHANDLE Version 04B (11:11:13 Tue Z8 Oct 1985) Run @ 14:17:57 Mon 03 Nov 1985 
EVZ / Rigid PFR Hold After -0.Z deg/sec Pitch Inpulse from PRCS Tail Jets 


Tine = 0. 

000 

DesMode 

« HOLD 

CurMode 

= CAPTURE 


PL Nonspin = 

0.00 

Wobble 

Cone = 0.00 

Wobble 

Clok = 

0.00 


CntrlfiH: R 

Z.Z1 

-0.04 

10.00 Torq 

-0.045 

1.358 

0.005 

Fore 

Cntrl@H:PB 

0.04 

-Z.Z1 

-10.00 Torq 

-1.358 

0.045 

-0.005 

Fore 

PB Axes: PD 

0.00 

-3.9L-47 

0.00 PYR 

-0.000 

0. 144 

0. 144 

Rate 

PL Hndl: R 

0.00 

-0.00 

0.00 Pos 

-0.000 

-0.069 

0.000 

Vel 

PB Axes: OB 

180.00 

-0.00 

-45.00 PYR 

-0.000 

0. 144 

0. 144 

Rate 

PL CM : OB 

Z8.3Z 

Z.B8 

-14. Z3 Pos 

-0.087 

0.000 

0.000 

Vel 

PL Rot K E 

0. 00 







PLAngno: I 

0.00 

0.00 

0.00 PYMag 

0. 000 

0. 000 

0.000 

Hxyz 

PB Axes: I 

180.00 

-0.00 

-45.00 PYR 

0.000 

0.000 

0.000 

Rate 

PL CM : I 

0.00 

-5.07 

-5.0B Pos 

-0.037 

0.000 

0.101 

Vel 

OB Axes: I 

0.00 

0.00 

0.00 PYR 

-0.000 

-0.Z03 

0.000 

Rate 

Orb CM : I 

-Z8.3Z 

-7.75 

9.18 Pos 

0.000 

0.000 

0.000 

Vel 


Tine Stepsize 

0.000 0.Z00 


¥AA3D3D9D 


Z 


~~ 7 - 9 



File ’sncnhold.R’ Page 10 Updated @ 08:45:10 Tue 04 Nov 1986 


Tine « 

135. 

000 

DesMode 

= HOLD 

CurMode 

= HOLD 



PL Nonspin - 

-0.00 

Uobble 

Cone = 

90.48 

Uobble 

Clok - - 

■40.08 


CntrlSH: 

R 

-0.02 

-0.52 

-0.97 

Torq 

-0.069 

-0.134 

0.071 

Fore 

Cntrl@H: 

PB 

0.50 

-0.00 

0.98 

Torq 

0.137 

0.064 

-0.069 

Fore 

PB Axes: 

PD 

0.98 

1.99 

-0.11 

PYR 

-0.001 

0.001 

0.000 

Rate 

PL Hndl : 

R 

0. 14 

0.49 

-0.35 

Pos 

0.003 

0.008 

-0.006 

Vel 

PB Axes: 

OB 

-177.90 

0.71 

-45. 10 

PYR 

-0.001 

0.001 

0.000 

Rate 

PL CM : 

OB 

28.56 

2.84 

-14.59 

Pos 

0.008 

0.002 

-0.006 

Vel 

PL Rot K 

E 

0.03 








PLAngno: 

I 

-116.49 

-85.07 

16.83 

PYMag 

-0.645 

-16.770 

1.294 

Hxyz 

PB Axes: 

I 

155.19 

0.63 

-44.99 

PYR 

-0.002 

-0.139 

-0. 141 

Rate 

PL CM : 

I 

3. 16 

-4.91 

9.05 

Pos 

0.007 

0.002 

0.108 

Vel 

OB Axes: 

I 

-26.91 

0.08 

-0. 1 1 

PYR 

-0.002 

-0.199 

0.000 

Rate 

Orb CM : 

I 

-28.91 

-7.76 

9. 14 

Pos 

-0.003 

-0.000 

-0.001 

Vel 


*** END OF SIMULATION *** 

EV2 / Rigid PFR Hold After -0.2 deg/sec Pitch Inpulse fron PRCS Tail Jets 
MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run @ 14:17:57 Mon 03 Nov 1986 


¥08584358 


Z 


7- 1 <z> 



Control Torque (ft*lb) Control Force (lb) 


MANHANDLE Version 04B (11:11:13 Tue 28 Oct 1986) Run 6 14:17:57 Mon 03 Nov 1986 



Y Component (Payload Body Axes) 


Z Component (Payload Body Axes) 



z . v- 1 1 


