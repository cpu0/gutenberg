rpdhrt DOCUMENTATION PAGE 


Form Approved 
OPMNo. 0704-0188 


Pubfc reporting bunfor 
nMttod. and reviewing 
Hoadquartare Sanrica. 
ManagamaitandBud) 


1. AGENCY USE 


AD-A257 906 



duding Ore 'jnt (or reviewing Infonjedont, Marching axisting data aourcaa gathering and mjxXaiAggJ&g^a* 
any other aapad ol thia colaclion o(Mormalion, including tuggaatkxa lor reducing ihia burden, to Washington 
ray, Suit 1204. Arlington. VA 22202-4302, and to the Office ot Information and Regulatory Affaire. Office ol 


3. REPORT TYPE AND DATES COVERED 


Final: 15 Sept. 92 


4. TITLE AND SUBTITLE 

Validation Summary Report: Meridian Software Systems, Inc., Meridian Ada, Version 
4.1.3, Intergraph Interpro 2400 under CLIX System 5, Release 3.1 (Target) 
Intergraph Interpro 2400 under CLIX System 5, Release 3.1 (Host)920915W1.11266 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESSES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

HOLCF C0081 


9. SPONSORING/MONITORING AGENCY NAME(S) AND AODRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D C. 20301-3081 

11. SUPPLEMENTARY NOTES 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 

92-29314 


t till 




12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Meridian Software Systems, Inc., Meridian Ada, Version 4.1.3, Intergraph Interpro 2400 under CLIX System 5, Release 3.1 
(Target) Intergraph Interpro 2400 under CLIX System 5, Release 3.1 (Host), ACVC 1.11. 


_DTIC 

flBLECTElfe 

^|N0V 1219flg||p 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15 NUMBER OF RACES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 




mm 































Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 15, 1992. 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Conputer System: Intergraph Interpro 2400 

under CLIX System 5, Release 3.1 

Target Computer System: Intergraph Interpro 2400 

under CLIX System 5, Release 3.1 

Customer Agreement Number: 92-06-12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
920915W1.11266 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 


liaatic 


Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB OH 


45433-6503 


**T C 











Ada 
Dire< 

Institute f< 
Alexandria VA 


jcgamzation 
iter and Software Engineering Division 
Defense Analyses 
22311 


Tilda Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Aooossion For „ | 

HTIS GRA4I 

sr 

DTIC TAB 

n 

Unannounced 

□ 

Justvrication— 



By---—-» 

^Ci strlbutIon/_ 

kr *liabili ty Co de* 
<A*aU and/or 
but I Spools! 




92-06-12-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 920915W1.11266 
Meridian Software Systems, Inc. 

Meridian Ada, Version 4.1.3 

Intergraph Interpro 2400 under CLIX System 5, Release 3.1 =■> 
Intergraph Interpro 2400 under CLIX System 5, Release 3.1 


(FINAL) 


Prepared By: 

Ada_Validation_Faci1ity 
ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 


HOLCF C0081 




Certificate information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 15, 1992. 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: Intergraph Interpro 2400 

under CLIX System 5, Release 3.1 

Target Computer System: Intergraph interpro 2400 

under CLIX System 5, Release 3.1 

Customer Agreement Number: 92-06-12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
920915W1.11266 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 




_ 

IdValidation Facility 
Steven P. Wilson 
Technical Director 


ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 





Ada Validation Organization 

Director^Computer and software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 





DECLARATION OF CONFORMANCE 


Customer: 

Ada Validation Facility: 
ACVC Version: 


Meridian Software Systems. Inc. 

ASD/SCEL. Wright-Patterson AFB OH 45433-6503 
L.ll 


Ada Implementation: 

< 'ompiler Name and Version: 
Host Computer System: 

Target ('omputer System: 


Meridian Ada. Version 4.1.3 

Intergraph Interpro 2400 
CLIX. System 5 Release 3.1 

Same as Host. 


Customer’s Declaration 


1. 1 lie undersigned, representing Meridian Software Systems. Inc., declare that Meridian 
Software Systems. Inc. lias no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/M1L-STD-1S15A in the implementation listed in this declaration. I declare that 
Meridian Software Systems. Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 



Sto^e Boyd. President 
Meridian Software Systems 
It) Pasteur Street 
Irvine. C.\ 027IS 



Date:_ Ft\Z_ 


Inc. 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT. 1-1 

1.2 REFERENCE*:. 1-2 

1.3 ACVC TEST CLASSES. 1-2 

1.4 DEFINITION OF TERMS. 1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS. 2-1 

2.2 INAPPLICABLE TESTS. 2-1 

2.3 TEST MODIFICATIONS. 2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT. 3-1 

3.2 SUMMARY OF TEST RESULTS . . . .. 3-2 

3.3 TEST EXECUTION. 3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 
For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

Hie organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





IMTRODUCTICN 


1.2 REFERENCES 

[Ada63] Reference Manual for the Ada Programming Language, 

ANSI/M1L-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 19$0. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files written by some of the class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler Hie software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 

Validation consisting of the test.suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its target 

Implementation computer system. 

Ada Joint Hie part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada Hie part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada Hie part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of Hie ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an agree¬ 
ment with an AVF which specifies the terms and conditions 
for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
trfiich validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90J. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 








IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT_FLOAT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 

LGNG_FLQAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 

implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for th. s 

implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 

raised if MACHINEjOVERFLCWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_OVERFLCWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 

for procedures and functions; for this implementation, pragma INLINE 
has no effect unless the program is compiled and linked using global 
optimization. 


2-2 







IMPLEMENTATION DEPENDENCIES 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, GD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIALIO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


2-3 







IMPLEMENTATION DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERRQR is 
raised when this association is attempted. 


CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 
FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks whether legal units of a compilation are accepted 
if one of the compilation units is illegal. This test was processed with 
compiler option "-fl", which forces the compiler to generate code for 
legal units of a compilation. 


2-4 








IMPLEMENTATION DEPENDENCIES 


CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 


2-5 








CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

William E. Crosby 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 


For sales information about this Ada implementation, contact: 

Meridian Software Systems, Inc. 

Attn: Jim Smith 
10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 

Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 


j 




PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicable Tests 3786 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 289 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST.EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun 3 system and then transferred via an 
NFS ethemet to the host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Test results were transferred via the NFS ethernet to a Sun 3 system and 
were printed from that system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. She options invoked explicitly for validation testing 
during this test were: 





PROCESSING INFORMATION 


Switch 

Effect 

-fE 

Generate error file for the Ada listing utility. 

-fl 

Ignore compilation errors and continue generating 
code for legal units within the same compilation 
file (for test EA1003B). 

-£Q 

Suppress "added to library" and "Generating code 
for" information messages. 

-fw 

Suppress informative warning messages. 

-1 

Produce a listing file. 

The following 
in the form - 

switches appear as modifiers to the -1 command, 
lcps: 

-c 

Produce continuous form Ada listings (no page 
headers). 

“P 

Obey PRAGMA PAGE directives within program even 
though the -c flag says not to generate page 
breaks. 

-s 

Output Ada listing to the standard output file 
instead of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 





APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

200 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 «> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

U..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 »> '0') & "690.0" 

$BIG_STRINGl 

'■' & (1..V/2 -> 'A') & '"' 

$BIG_STRING2 

'"' & (1..V-l-V/2 -> 'A') & 

$BLANKS 

(1..V-20 -> ' ') 


$MAX LEW INT BASED LITERAL 

- - - - "2:" & (1..V-5 »> 'O') & "11: 


1 ' 


If 


& 




A-l 








MACRO PARAMETERS 


Macro Parameter Macro Value 


$MAX LEN REAL BASED LITERAL 

”16:'* & (1..V-7 -> '0') & "F.E:" 

$MAX__STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2 _ 147 _ 483 _ 646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

INTERGRAPH 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESS1 

16#1# 

$ENTRY_ADDRESS2 

16#2# 

$field_last 

2 _ 147 _ 483 _ 647 

$FILE_TERMINATOR 

9 9 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$flqat_name 

NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

lift 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_ 

$GR£ATER THAN DURATION 

90_000.0 








MACRO PARAMETERS 


Macro Parameter Macro Value 


$GREATER THAN DURATION BASE LAST I 


I0_00T5_000.0 1 

$GREATER THAN FLOAT BASE LAST 1 


l.SE+308 I 

SGREATER THAN FLOAT SAFE LARGE 1 


1.7E308 I 

$GREATER THAN SHORT FLOAT SAFE LARGE 1 


1.0E308 ■ 

$HIGH_PRIORITY 

20 1 

$ILLEGAL EXTERNAL FILE NAMEl 1 


/NODIRECTORY/FILENAME1 I 

$ILLEGAL EXTERNAL FILE NAME2 1 


/NODIRECTORY/FILENAME2 I 

$INAPPROPRIATE LINE LENGTH 1 


1 

$INAPPROPRIATE RAGE LENGTH 1 


-1 

$INCLUDE_PRAGMAl 

PRAGMA INCLUDE ( "A28006D1 .ADA") 

$INCLUDE_PRAGMA2 

PRAGMA INCLUDE ( "B28006F1 .ADA") 

$INTEGER_FIRST 

-2147483648 

$INTEGER_LAST 

2147483647 

$ INTEGER_LAST_PLUS_1 

2 _ 147 _ 483 _ 648 

$INTERFACE_LANGUAGE 

C 

$LESS_THAN_DURATION 

-90_000.0 

$LESS THAN DURATION BASE FIRST I 


-ltf_000_000.0 

$LINE_TERMINATDR 

ASCII.LF 

$LOW_PRIORITY 

1 

$MACHINE CODE STATEMENT 1 


NULL; 


A-3 









WOO PARAMETERS 


Macro Parameter 


Macro Value 


$MACHINE_CODE_TYPE 

INSTRUCTION 

$MANTISSA__DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2__ 147 _4 83 _648 

$MIN_INT 

-2147483648 

$NAME 

BYTE_INTEGER 

$NAME_LIST 

INTERGRAPH 

$NAME_SPECI FI CATIONl 

/Hisr/n/world/acvc/val/X2120A 

$NAME_SPEC1 FI CAT10N2 

/usr/n/world/acvc/val/X2120B 

$NAME_SPECIFICATI0N3 

/usr/n/uorld/BLCVc/val/X3119A 

$NEG_BASED_1NT 

16#FFFFFFFE# 

$NEW_MEM_SIZE 

1024 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

INTERGRAPH 

$PAGEJTERMINATOR 

ASCII.LF&ASCII.FF 

$RECORD_DEFINITION 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

2048 

$T1CK 

1.0 

$VARIABLE_ADDRESS 

FCNDECL.VAR_ADDRESS 

$VARIABLE_ADDRES S1 

FCNDECL.VAR_ADDRESS1 

$VAR1ABLE_ADDRESS2 

FCNDECL.VAR_ADDRESS2 

$YOUR_PRAGMA 

NO_SUCH_PRAGMA 


A-4 






APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 






Aug 14 15:49 1992 


Intmrgrmph - acvc 1.11 


Pag* 15 


MERIDIAN ADA COMPILER OPTIONS 


-CO Generate debugging output. The -ID option causes the 
compiler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fa Annotate assembly language Hating. The -fe option 
causes the coapiler to annotate an assembly language 
output file. The output is supplemented by comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-££ Generate error log file. The -fE option causes the 

compiler to generate a log file containing all the error 
massages and warning messages produced during compilation. 
The error log file has the same name as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fl. Generate exception location information. The -fL option 
causes location information (source file names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in the event that an 
"Exception never handled” message appears when an 
exception propagates out of the main program. This flag 
causes the code to be somewhat larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled” 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division_check and overflow check. These checks are 
described in section 11.7 of the LRM. This flag reduces 
the size of the code. 

-;q suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

-fs Suppress all checks. The -fs flag suppresses all 






OGKPUAXXQN SYSTMT OPTIONS 


Aug 14 !St49 1992 Inte r gra ph - acvc 1.11 Pag* 16 


automatic checking, including nunaric checking. Thia 
flag ia equivalent to using pragna suppreaa on all checks. 
This flag raducas tha sis* of tha coda, and ia good for 
producing "production quality" coda or for benchmarking 
tha coapilar. Nota that thara is a ralatad ada option, 

-fW to suppress only certain kinds of nunaric chocks. 

-fU Inhibit library updata. Tha -fu option inhibits library 
updates. This is of use in conjunction with tha -S 
option, certain restrictions apply to use of this option. 

-fv Ceapila verbosely. Tha ccaqpiler prints tha naaa of each 
subprogran, package, or generic as it is conpilad. 
Information about the symbol table space rsnaining 
following compilation of tha named entity is also printed 
in tha form M (nK]". 

-fv Suppress warning aasaagas. With this option, the 

coapilar does not print warning sassages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the lrm. 

-g Tha -g option instructs tha compiler to run an additional 

optimisation pass. Tha optimizer removes common 
sub-expressions, dead cod* and unnecessary jumps, it 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal fora files following code 
generation. 

-lmodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional modifiers can be given to 
affect the listing format. You can use non* or any 
combination of the following modifiers: 

c Us* continuous listing format. The listing by 

default contains a header on each page. Specifying 
-lc suppresses both pagination and header output, 
producing a continuous listing. 

P Obey pragma page directives. Specifying -Ip is only 
meaningful if -lc has also been given. Normally -lc 
suppresses all pagination, whereas -lep suppresses 
all pagination except where explicitly called for 
within the sourcs file with a pragma page directive. 

s Use standard output. The listing by default is 

written to a file with the same name as the source 
file and the extension .1st, as in simple.1st from 
simple.ada. Specifying -Is causes the listing file 


B-3 




QQHPIU JION SYSTEM OPTIONS 


\uq 14 13:49 1992 Intergraph - AC7C l.ll Page 


to bo written to tho standard output stream instead. 

t Generate relevant text o u t put only. The listing by 
default contains tbs entire source prograa as well 
as interspersed error messages and warning aessages. 
specifying -it causes the compiler to Hat only the 
source lines to which error aessages or warning 
*••••9** apply, followed by the aessages theaselves. 

The default listing file generated has the saae naae as 
the source file, with the extension .1st. For example, 
the default listing file produced for staple.ada has the 
n a»e staple.let. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -CZ option. 

~L ibrary-naae 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the prograa library. 

-N No coepile. This option causes the ada coaaand to do a 

"dry run" of the compilation process. The coaaand 
invoiced for each processing step is printed. This is 
siailar to the -P option, but no actual processing is 
performed. 

-? Print coapile. This option causes the ada coaaand to 

print out the coaaand invoiced for each processing step 
as it is performed. 

-3 Produce assembly code, causes the code generator to 

produce an assembly language source file and to halt 
further processing. 





COMPILATION SYSTEM OPTIONS 


LINKER OPTICUS 

The linker options o£ this Ada implementation, as described in this 
Appendix, are provided by the customer. unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


B-5 






CCHPXLAZXGN STOTBI OPTIONS 


Aug 14 15:49 1992 


Intergraph - acvc l.11 


Pag* 18 


MERIDIAN ADA LINKER OPTIONS 


-A Aggrassivaly inlina. Thia option instructa tha optimizer 

to aggrasaivaly inlina sutoprograoa whan uaad in addition 
to tha -G option. Typically, thia aaana that suhprograaa 
that ara only called onca are inlined. If only tha -G 
option ia uaad, only suhprograaa for which pragma inlina 
haa baan spacifiad ara ini in ad. 

-c compiler-program-name 

Default: (aa stored in program library) 

Use alternate compiler. Tha -c option specifies the 
complete (non relative) directory path to the Meridian 
Ada compiler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-compiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-f suppress main program generation step. The -f option 

suppresses the creation and additional code generation 
steps for tha temporary main program file. The -t option 
can be used when a simple change has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 

bamp to invoke the global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. The -G option 

causes bamp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, compilation units to be optimized 
must have been compiled with the ada -K option. 

-I Link the program with a version of the tasking run-time 

which supports pre-emptive task scheduling. This option 
produces code which handles interrupts more quickly, but 
has a slight negative impact on performance in general. 

-L library-name 


B-6 





cGHPxxArxaf systbi opticrs- 


Aug 14 15:49 1992 Intergraph - ACVC i.ii Pag* 19 


Default: ada.lib 

Oh alternate library. The -L option specifies the nam* 
of the program library to be consulted by the heap 
prog ra m. This option overrides the default library name. 

-n No link. The -n option suppresses actual object file 

linkage, but creates and p*rforas code generation on the 
sain program file. 

-N No operations. The -N option causes the bamp command to 

do a "dry run"; it prints out the actions it takes to 
generate the executable program, but docs not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-flle-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
by the bamp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the bamp command 

to print out the actions it takas to generate the 
executable program as the actions are performed. 

-v Link verbosely. The -v option causes the bamp command to 

• print out information about whet actions it takes in 
building the main program. 

-w Suppress warnings. This option allows you to suppress 

warnings from the optimizer. 


B-7 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2 147_483 648 .. 2 147_483_647; 
type SHORT_INTEGER is range -327 <j 8 .. 327F7; 
type LONG_INTEGER is range -2 147_483 648 .. 2_147_483_647 ; 
type BYTE_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-l 






Appendix : 




nrsoiementanon-Oepenaeni Cnaracrerisncs 



Ada. Note that then era no pending appendices. Ude appmdfec m called 
Appatda F m order to comp l y with the Ref eren ce Manual for the Ada 
P rogr ammin g Language* (LRM) ANS/MrL-STD-l»15A whx* etatae that 
thia appendix ba naaad Appendix F. 



F.1 Pragmas 

Tha implemented predefined pragma* are: 
elaborate Sa* tha LRM section 10 5 


intarfaas 

See section F.1.1 

Uatt 

See the LRM Appendix B 

peak 

See section F. 1.2 

W 

See the LRM Appendix B 

priority 

See the LRM Appendix B 

suppress 

See section F.1.3 

inline 

See the LRM section 632. This pragma is not actually effective 
unleer /-*u compile/link your program using the global 
optimizer. 


The remaining predefined pragmas are accepted, but presently ignored: 

centiellad cptiatn lyttaa neam 

•harad suragajnit Maory~UM 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms art encountered at compile time, the 
compiler issues a warning message rather than an error, as required bv 
the Ada language definition. Refer to the LRM Appendix B for additional 
information about the predefined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface m Mendian Ada is: 

P**^a interface < teijuayr, tubtnfrtm f, ' link-furrm” 1 ) ; 


nrmrgraor Comcm mars Guoe «mn i/u#t 


POQ9 179 


C-2 






Pag* MO 


subprogram 


fir* 


Thie is th* interface language arm of th* i 
buflHu,c, or internal. in*nun builtinand internal are 
resented for use by Meridian compiler mamtamars m 
nw t u m support p e rlreg et 

This ts th* name of a subprogram to which th* pragma 
mtarfam applies . 

This is an optional string literal specifying th* num of th* 
non-Ada subpro gram cor responding to th* Ada 
subprogram namad m th* aacond parametar. If Imk-mmt is 
o m i tte d , than fink ntt mt default* to th* value of subprogram 
translated to lowercase. Depending on th* language 
spenfieri. some automatic modifications maybe trad* to 
the fink-nerar to produce th* actual object cod* symbol 
name that is generated whenever reference* as* made to 
the corresponding Ada subprogram. The object cod* 
symbol g ener a t e d for fink-name is always translated to 



It is appropr ia te to ua* th* optional fink-name parameter to 
pragma uitarfam only when th* ui ttri a c * su b prog ra m 
has a name that does not co r re sp ond at all to its Ada 
identifier or when the interface subprogr a m name cannot 
be given uemg rule* for co ns t r uc t in g Ada identifiers (e-g, 
if the name contains a 'S' character). 

The cha ra cteri s tics of object code symbola gener a te d for eech interface 
language aim 

The object code symbol it the tame aa link-name. 

The object code symbol is the same as fink-mone, but prefixed with 
two underscore characters ("_*)• This language interface 
is reserved for special in te rla ce s defined by Meridian 
Software Systems, Inc. The builtia interface is presently 
used to declare certain low-ievei run-tune operations 
whose names must not conflict with programmer-defined 
or language system defined names. 

The object code symbol is othe tame as fink-name, but with one 
underscore character prepended. This is the 
conuenuon used by the C c ompi ler. 

No object code symbol is generated for an internal language 
interface; this language interface is reserve d for special 
interfaces defined by Meridian Software Systems, inc. The 
internal interface is presently used to declare certain 
machine-level bit operations. 


internal 


No automatic data co nver si on s are pe rfo rme d on parameters of any 
interface subprograms. It is up to the pro gramm e! to ensure that calling 
conventions match and that any necessary data conversions take place 
when calling interface subprogr am s. 


o wes at/um nra gnjun Com c e er uwrr G*Joe 


C-3 









package body in thte cam. A 
prorate or no n p n v a ee eatapeogr 
part of a 


occur within the i 

inter*ia may not eppeer in the 
na tnrerf aoe de clara tion for ethar a 
declaration may appaar m tha private 


Pragma tnt a rf aaa far library uxats a not su p parl ni . 

Rafer to tha LRM asction 13.9 for additional information about pragma 
iatarfaaa 


F.1.2 Pragma Pack 


Pragma pooh ta anpfet n s nt t d for c o mp os i te typaa (racorda and anaya). 

Pragma pack ia panmttad following tha composts typa declaration to 
which it applies, provided that tha pragma occurs within tha aama 
daciaraova part aa tha co mp os rt s typa declaration, before any objacta or 
components of the co m posite typa are declared. 

Note that tha de cla rative part restriction moans that tha typa declaration 
and acco mpa n y m g pragma pooh cannot be split serosa a' package 
specification and body. 

The affect of pragma pack ia to tnmiinize storage consumption by 
discrete co mp onent types whose ranges permit packing. Use of pragma 
peek does not defeat allocations of alignment storage gaps for some 
record types. Pragma pack does not affect the repr es e n tations of rest 
types, pie-defined integer types, and access types. 


F. 1.3 Pragma Suppress 

Pragma suppress is i m ple m e nt ed as described in the LRM section 11.7, 
with these di f ferences: 

• Pr ese n tly, dlefsion.check and oeeiflow.check must be suppressed 
vis a compiler flag, -CM; pragma suppress is ignored for these two 
numeric checks. 

• The optional "CM «>" parameter name notation for pragma 
suppress is ignored. 

• The optional second parameter to pragma suppress is ignored; the 
pragma aiwa/s applies to the entire scope in which it appears. 


F.2 Attributes 


All attributes described in the LRM Appendix A are supported. 


nt wrgrao n Comcxm tear t Guam ammo mum 


Pop# IB1 


C-4 










AFPBOXX F OF THE Ada STANDARD- 










F.5 Rftricttont on Rap wntot to n Clouts* 


F.5.1 Length Cl o ws 

A n speoficabon (t' also) to njectod if fewer bite «* spoofed fern 
can accomodate the typo. The naramnm sue of a cotnpoasto type may 
be subject to application erf pngs* ptak. It ia pcnmtted to specify 
^Kataaibf rnaparl integer ranges, a.g» 8 far ttwwyO . .255. 

~*~ c ~ r“ — r full **7 Vit range nf li n u gnsrl nhiTt i - ” . (2**33) -1, 
cannot ba defined, even uung a n apaaficattact 

Tha spadficaban of coUactlon sue <t* »tot»q«_«iia) to evaluated at 
nm-tune whan the scope at the type to which ths length ciauaa applies » 
entered, and to thare fui e subject to rej e ct i o n (via atora^a_arror) baaed 
on available storage at tha tine tha allocation ia made. A collection nay 
include atonga used for run-time ad nawatoatt on of the coilactum, and 
tharefoia should not ba expected to accommodate a specific number of 
objects. Furthermore. cartam clta aaa of objects auch aa unco nat r am a d 
dia e nmmani array camponanta of racorda may ba allocated outside a 
given collection, ao a collection may ac comm odate more objects than 
might ba a x pa c tad. 

The specification of atonga for a taak activation («' atoragn^aian) to 
evaluated at nm-tme whan a taak to which the length dause'appttas is 
activated, and to there f ore subject to r ejectio n (via *tora 9 *_«rcar) 
baaed on availabla atorage at the time the allocation ia xnadeTStorage 
reserved for a task activation w aeparate from atonga needed for any 
collections defined withm a taak body. 

The specification of small for a fixed point type (t* one 11) is subject only 
to re s trictions defined in the LRM section 13.2. 


F.5 2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an 
enumeration representation clause must be m the range of 
stsndaie.inta 9 «. 

The value of an internal code may be obtained by applying an 
appropriate instantiation of un wh aakod j _oorrrare».on to an integ er type. 


F.5.3 Record Representation Causes 

The storage unit offset (the at static jsanvlejapressum part) is given m 
terms of 8-bit storage units and must be even. 

A bit position (the range part) applied to a discrete type compone n t mav 
be in the range 0.. IS, with 0 being the least significant bit of a 
component A range specification may not specify a sue smaller than can 
accommodate the component A range specific* Don for a component not 
accommodating bit packing may have a higher upper bound as 
appropriate (e.g., 0.. 31 for a diaennunant scran? component). Refer to 


nnergroon Comes* uter* Guoe 


a•veeoa/M/v; 


Pope I&3 










Co mp onents of diaaets types for which bit portions are s p e cif ied may 
not straddle 16-bit word boundaries. 

The value of an alignment ciauae (the optional at mod part) must evaluate 
to 1, Z 4 or 6, and may not be smaller than the highest alignment 
raqumd by any com pow n t of the record. Or *he CL1X operating system, 
tins mean* that tom* records may not have » punent clauses smaller 
than 2. 


f.BA Address Claus®* 


An address ciauaa may ba supplied for an object (whether constant or 
variable) or a task entry, but not for • subprog ra m, package, or task unit 
The meaning of an address clause supplied for a task entry is given m 
i f£J). 


An addiesa expres s i o n for an object is a 32-bit se gm ent ed memory 
addraaa of type syetee.eddiass. 


F.5.5 Interrupts 


A task entry's address clause can be used to associate the entry with a 
CLDC signaL Values in the range 0.. 31 are meaningful, and represent the 
interr u p ts cor re sp onding to those values. 

An in terr u pt entry may not have any parameters. 


F.5.6 Chang® of Representation 

There are no restrictions for changes of re pr es entation effected by means 
of type co n version. 


F.6 Implementation-Dependent Components 

No names are g ene ra ted by the imp le m e nta tion to denote 
unpiementanofv-depondem co m ponents. 


F.7 Unchecked Conversions 

There are no restrictions on the use of unchecksd_oonvarnoa 
Conversions between o b ject s whose sues do not c onfo rm may result in 
storage arses with undefined values. 


Pope 18 4 


ow e mo i/u/n i ti mgrap n Comet* mart StSoe 


C-7 







F.8 Input-Output Packages 


of that 


• Men than era tnhunai file can beaaeoaatsd with a angle exhaust 

file far r ee ding only. F oe wr it in g , catty one M antel file may be 
rate. « fl*DDiio»in«nntB(<«WBdWi 

* Temporary sequential end direct file* an given name. Tsmpotery 
fdas ate datetad whan they are cloasd. 

* Rk I/O is bu ffered; tax files associated with tenranai devices art 
line-buifared. 

• The packages aaqamtt a 1_io and diroqt^io cannot be 
uistantiatBd with unconatmewd composite types or teeotd types 
with discnsananti without defaults. 


F.9 Source line and Identifier Lengths 

Source lines and identifiers m Ada source progr ams are presently limited 
to 200 characters di length. 


mmgraon Compfr Urn's Guo» taw s/m/w 


Pope lfl5 


C-8 





