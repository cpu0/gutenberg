- AD-A211 558 


•» i '•tr'tcf 

OK PAGE 


Ht h &u 


p C *X/C tXJT*. TT.O^; 

~ _ L _ _ tr f on 'f>v . r * t •«■ • r^»>' 

1 2 to.' azuu'.o* «: l aicipua' s ca'a.o; »j-r .i 




| 4 I i I k t I*'*? W 

Ada Compiler Validation Summary Repor t : verdix 

Corporation, Y.nua-1 10-343-,, Version V5. / , Sun 386i (Host & 

Target), 8b I 11 8V.’i . 10002 


J. AvlHDP.1, 

Vr igT:t“Patt crstr. ATI 
Day tor., OH, USA 


9. PEP'OR*!*. AKt ADDRESS 

Wright-Patterson AFE 
Dayton, OH, USA 


11. LIA* C' f ICf AK: ADDHSS 

Ada Joint Program. Office 

United States Department of Defense 

Washington, DC 20301-3061 


14. Aul*ilT i ADDRiSS(/<0'*t'f -it from Co<lUO,',/r>{ Dfnct; 

Wright-Patterson AFB 
Dayton, OH, USA 


b. im O' I eis;o: CCMREC. 

.8 Nov 1988 to 18 Nov 1988 

e MurofcMiMCtRi *i»of aj-cer 


t COA'AACl 0* SAAK: 


ic. prd:***< pp 

API * l WDH UKM AMEERS 



1 2 . HtPC-P' OtTt 


IS. SUl'I ' C.AES Id'im 

UNCLASSIFIED 


lit plUJSSJfICAUOP DjpsiPPDlSi 

5u*L UUk. t 

K/A 


It. DISIPIEJTIOK S’AUN-PT fofthilRfPOn) 

Approved fcr public release; distribution unlimited. 




IS. *L>»t s tS (Continue >* ,r-jf sot ,f nrteiifj tno idrnvf t b> 6'oc4 numbe r) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Com.piler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/M2L-STD- 
1815A, Ada Joint Program, Office, AJPO 


20 . AES1R*:i {Conr,nu, o" 't *f'»» i '0 r <1 nttttu'y »no i 0 *nhf) 6, blot l numb*') 

Verdix Corporation, VAda-110-3434, Version V5.7, Wright-Patterson AFB, Sun 386i under 
SunOS Release 4.0 (Host & Target), ACVC 1.10. 


00 1473 toniop o> l At. is is oeso.iu 

i jm 7) S'* 0102 - 1**011-6601 _ UNCLASSIFIED _ 

SltU*m ClASSl I K»i 10*i O' 1 «1 S PAil |rtv«04i# (ntt’rd: 















AVF Control Number: AVF-VSR-215.0789 

88-10-06-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 881118V1.10002 
Verdix Corporation 
VAda-110-3434, Version V5.7 
Sun 386i Host and Target 


Completion of On-Site Testing: 
18 November 1988 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 43433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 







m 

Ada Compiler Validation Summary Report: 

Compiler Name: VAda-110-3^3^ } Version V5.7 
Certificate Number: 881118W1.10002 

Host: Sun 386i under SunOS Release H.O 

Target: Sun 386i under SunOS Release 4.0 

Testing Completed 18 November 1988 Using ACVC 1.10 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Wilson 
ASD/SCEL 

Wright-Patterson AF3 OH 45433-6503 



AdjZ Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Hfda Joint Program Office 
Dr. John Solomond T 

Director 


.bj&redhO' 


Department of Defense 
Washington DC 20301 



j Accession For 

NTIS GKA&I 
DTIG TAB 
Unannounced 
Ju'c; 1icat 1 cn_ 


R y- 

Distribution/ 

Availability Codes 
Avail and/or 
Dist Special 

h'\ I 




DO 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-1 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED . 2-1 

2.2 IMPLEMENTATION CHARACTERISTICS . 2-2 

CHAPTER 3 TEST INFORMATION 

3-1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER. 3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS . 3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . . 3-5 

3.7 ADDITIONAL TESTING INFORMATION . 3-6 

3.7.1 Pre validation ..3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANC1' 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 


APPENDIX D 


WITHDRAWN TESTS 


















CHAPTER 1 
INTRODUCTION 



This Validation Summary Report '"-fVSR-) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability KACVC)* -An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

Thi3 VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out.for the following purposes: 


1-1 






INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by SofTech, Inc., under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 18 November 1988 at Verdix Corporation, 
Western Operations, Aloha OR. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-2 




INTRODUCTION 


1.3 REFERENCES 


Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

Ada Compiler Validation Capability Implementers' Guide, SofTech, 
Inc., December 1986. 

Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines . 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 


1-3 








INTRODVCTION 


Inapplicable 

test 


An ACVC test that uses features of the language that a 
compiler is not required to support or may legitimately 
supDort in a way other than the one exnected By the test. 


Passed test 


An ACVC test for which a compiler generates the expected 
result. 


Target Tne computer which executes t.ne code generated by tne 

compiler. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, E, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 


1-4 






INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values , and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 




INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementat_on is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 




CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: VAda-110-3434, Version V5.7 
ACVC Version: 1.10 
Certificate Number: 381118W1.10002 
Host Computer: 

Machine: Sun 386i 

Operating System: SunOS Release 4.0 

Memory Size: 16 Megabytes 

Target Computer: 

Machine: Sun 386i 

Operating System: SunOS Release 4.0 

Memory Size: 16 Megabytes 


2-1 




CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 

(1) The compiler correctly processes a compilation containing ?23 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 

statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 

statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
SHORT_INTEGER, TINY_INTEGER, and SH0RT_FL0AT in the package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Based literals. 

(1) An implementation is allowed to reject a based literal with a 
value exceeding SYSTEM.MAX_INT during compilation, or it may- 
raise NUMERIC_ERROR or CONSTRAINT_ERROR during execution. 
This implementation raises CONSTRAINT_ERROR during execution. 
(See test E24201A.) 


d. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 


2-2 





CONFIGURATION INFORMATION 


(1) All of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 

(4) CONSTRAINT_ERROR is raised when an integer literal operand in 
a comparison or membership test is outside the range of the 
base type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


e. Rounding. 


The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


An ijoieraentation is allowed to raise NUMERIC_ERROR or 
CCV..JtINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 


2-3 






CONFIGURATION INFORMATION 


(2) NUMERIC_ERROP is raised wnen 'LENGTH is applied to an array 
type with INTEGER'LAST + 2 components. 'See test G3t2G2A.) 

(3) NUMERIC_ERROR is raised when ’LENGTH is applied to an array 
type with SYSTEM.MAX_INT + 2 components. (See test G36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER’LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 

INTEGER*LAST components raises NUMERIC_ERROR when the array 
objects are declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER*LAST may raise NUMERIC_ERROR or CONS TRAINT_ERR OR 

either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the exDression is 

evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52073A.) 

(8) In assigning two-dimensional array types, the expression is 

not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 


g. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


h. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that all choices are evaluated before 
checking against the index type. (See tests C43207A and 
C43207B.) 


2-4 




CONFIGURATION INFORMATION 


(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


i. Pragmas. 

(1) The pragma INLINE is supported for functions or procedures. 
(See tests LA3004A..B (2 tests), EA3004C..D (2 tests), and 

CA3004E..F (2 tests).) 


j. Generics. 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 

separate compilations. (See test CA3011A.) 

(3) Generic subprogram declarations and bodies can be compiled in 
separate compilations. (See tests CA1012A and CA2009F.) 

(4) Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

(5) Generic non-library subprogram bodies can be compiled in 

separate compilations from their stubs. (See test CA2009F.) 

(5) Generic package declarations and bodies can be compiled in 

separate compilations. (See tests CA2009C, BC3204C, and 

BC3205D.) 

(7) Generic library package specifications and bodies can be 
compiled in separate compilations. (See tests BC3204C and 
BC3205D.) 

(8) Generic non-library package bodies as subunits can be compiled 
in separate compilations. (See test CA2009C.) 

(9) Generic unit bodies and their subunits can be compiled in 

separate compilations. (See test CA3011A.) 


2-5 








CONFIGURATION INFORMATION 


k. Input and output. 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 


(3) Modes IN_FILE and 0UT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, 0UT_FILE, and INOUT_FILE are supported for 
DIRECT_I0. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN_FILE and 0UT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 

(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 

CE3114A.) 


(9) 

Overwriting to a sequential file truncates 
written. (See test CE22083.) 

to the 

last element 

(10) 

Temporary sequential files are not given 
when closed. (See test CE2103A.) 

names 

and deleted 

(111 

Temporary direct files are not given names 
closed. (See test CE2108C.) 

and 

deleted when 

(12) 

Temporary text files are not given names 
closed. (See test CE3112A.) 

and 

deleted when 

(13) 

Only one internal file can be associated 
file for sequential files when writing or 

with each external 
reading. (See tests 


CE2107A..E (5 tests), CE2102L, CE2110B, and CE2111D.) 

(14) Only one internal file can be associated with each external 
file for direct files when writing or reading. (See tests 
CE2107F..I (4 tests), CE2110D and CE2111H.) 


• 2-6 









CONFIGURATION INFORMATION 


15) More than one internal file can be associated witn each 
external file for text files when writing or reading. (See 
tests CE311U..E (5 tests), CE3'1«B, and CE3115A.) 






CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 25 tests had been withdrawn because of test errors. The AVF 
determined that 331 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation Modifications to the code, processing, or grading for 
8 tests were required to successfully demonstrate the test objective. (See 
section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1133 

2002 

17 

34 

46 

3361 

Inapplicable 

0 

6 

325 

0 

0 

0 

331 

Withdrawn 

1 

1 

23 

0 

0 

0 

25 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 




TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

199 

577 

545 

245 

172 

99 

161 

332 

137 

36 

253 

306 

299 

3361 

N/A 

14 

n 

t i- 

135 

3 

0 

0 

5 

1 

0 

0 

0 

79 

22 

331 

Wdrn 

0 

1 

0 

0 

0 

0 

0 

1 

0 

0 

0 

19 

4 

25 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 25 tests were withdrawn from ACVC Version 1.10 at the time of 
this validation: 


A39005G 

B97102E 

CD2A62D 

CD2A63B 

CD2A63D 

CD2A66B 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2B15C 

CD7105A 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


CE3411B 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 331 tests were inapplicable for the 
reasons indicated: 


3-2 





TEST INFORMATION 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y (1^ tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests; 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type L0NG_FL0AT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type L0NG_INTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52004D C55B07A B55B09C 386001W 

CD7101F 

d. • B86001Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SH0RT_FL0AT. 

e. B86001Y is not applicable because this implementation supports no 
predefined Tixed-point type other than DURATION. 

f. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 
because the value of SYSTEM.MAX_MANTISSA is less than 32. 

g. C86001F is not applicable because, for this implementation, the 
package TEXT_I0 is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

h. C96005B is not applicable because there are no values of type 
DURATION’BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41E, CD2A41A..J (10 tests) are not applicable because 
this implementation does not support size clauses for floating 
point types. 

j. CD2A84B..1 (8 tests), CD2A84K..N (4 tests), and CD2A61I..J 
(2 tests) are not applicable because this implementation does not 
support size clauses for access types in which the size specified 
is smaller then the machine address. 


3-3 





TEST INFORMATION 


k. CD2A91A..E (5 tests) are not applicable because this 
implementation does not support size clauses for task types. 

l. The following 42 tests are not applicable because, for this 

implementation, this implementation does not permit address 
clauses for an initialized object: 

CD5003B..H (7 tests) CD5011A..H (8 tests) CD5011L..N (3 tests) 

CD5011Q..R (2 tests) CD5012A..I (9 tests) CD5012L 

CD5013B CD5013D CD5013F 

CD5013H CD5013L CD5013N 

CD5013R CD5014T..X (5 tests) 

m. CD5007B is not applicable because this implementation does not 
support address clauses for procedures and functions. 

n. CD50110, CD5012J, CD5013S, and CD5014S are not applicable because 
this implementation does not support address clauses for task 
types. 

o. CE2102D is inapplicable because this implementation supports 

CREATE with IN_FILE mode for SEQUENTIAL_IO. 

p. CE2102E is inapplicable because this implementation supports 

CREATE with 0UT_FILE mode for SBQUENTIAL_IO. 

q. CE2102F is inapplicable because this implementation supports 

CREATE with IN0UT_FILE mode for DIRECT_IO. 

r. CE2102I is inapplicable because this implementation supports 

CREATE with IN_FILE mode for DIRECT_IO. 

s. CE2102J is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for DIRECTJLO. 

t. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

u. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

v. CE2102P is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for SEQUENTIALJEO. 

w. 'CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQUENTIAL_IO. 

x. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT FILE mode for DIRECT 10. 


3-4 





TEST INFORMATION’ 


y. CE2102S is inapplicable because this implementation supports RESET 
with INOUT_riLE mode for DIRE0T_I0. 

z, CE2102T is inapplicable because this implementation supports OPEN’ 
with IN’ FILE mode for DIRECT 10. 


aa. CE2102U is inapplicable Decause this implementation supports RESET 
with IN’_FILE mode for DIRECT_I0. 

ab. CE2102V is inapplicable because this implementation supports OPEN 
with 0UT__FILE mode for DIRECT_I0. 

ac. CE2102W is inapplicable because this implementation supports RESET 
with 0UT_FILE mode for DIRECT_I0. 

ad. CE3102E is inapplicable because text file CREATE with IN_FILE mode 
is supported by this implementation. 

ae. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

af. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

ag. CE3102I is inapplicable because text file CREATE with 0UT_FILE 
mode is supported by this implementation. 


ah. CE3102J is inapplicable because text file OPEN with IN_FILE mode 
is supported by this implementation. 


ai. CE3102K is inapplicable because text file OPEN with 0UT_FILE mode 
is not supported by this implementation. 


aj. CE3115A is inapplicable because resetting of external file for 

0UT_FILE mode is not supported with multiple internal files 
assocaiated with the same external file when they have different 
modes. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 


3-5 








TEST INFORMATION 


one exception instead of another). 
Modifications were required for 8 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 


524009A B33301B B38003A 

B38009B BC1303F BC3005B 


B38003B B38009 /. 


3-7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the VAda-110-3434, Version V5.7 was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 

Testing of the VAda-110-3434, Version V5.7 using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in 
which the testing was performed is described by the following designations 
of hardware and software components: 

Host computer: Sun 386i 

Host operating system: SunOS Release 4.0 

Target computer: Same as Host 

Compiler: VAda-110-3434, Version V5.7 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precision was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were not loaded directly onto the host 
computer. The test tape wa3 read onto a Sun 3* The tests were accessed 
via NFS on the Sun 386i machine. 

After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Sun 386i. 
Results were printed from the host computer. 


3-6 





TEST INFORMATION 


The compiler was tested using command scripts provided by Verdix 
Corporation and reviewed by the validation team. 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Verdix Corporation, Western Operations, Aloha OR 
and was completed on 18 November 1988. 


3-7 




APPENDIX A 

DECLARATION OF CONFORMANCE 


Verdix Corporation has submitted the following 
Declaration of Conformance concerning the 
VAda-110-3^3*4, Version V5.7. 


A-1 





DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 
Compiler Implementor: Verdix 

Ada Validation Facility: ADS/SCOL, Wright-Patterson AFE, OH 45t25-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

VAda-110-3^3^, Version: V5.7 
Sun 386i 

SunOS Release M.O 
Sun 38ci 

SunOS Release -4.0 

Implementor’s Declaration 

I, the undersigned, representing Verdix Corporation, have implemented no 
deliberate extensions to the Ada Language Standard ANSI/MIL-STD-1815A in 
the compiler(s) listed in this declaration. I declare that Verdix 
Corporation is the owner of record of the Ada language compiler(s) listed 
above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for 
Ada language compiler(s) listed in this declaration shall be made only in 
the owner's corporate name. 


' _ Date:_ 

David Nomura 

Verdix Corporation, Project Manager, Ada Products Division 

Owner's Declaration 

I, the undersigned, representing Verdix Corporation, take full 
responsibility for implementation and maintenance of the Ada compiler(s) 
listed above, and agree to the public disclosure of the final Validation 
Summary Report. I declare that all of the Ada language compilers listed, 
and their host/target performance, are in compliance with the Ada Language 
Standard ANSI/MIL-STD-1815A. 


_ Date:_ 

David Nomura 

Verdix Corporation, Ada Products Division, Project Manager 


Base Compiler Name: 
Host Architecture: 

Host OS and Version: 
Target Architecture: 
Target OS and Version: 






APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the VAda-110-3434, Version V5.7, as described in this 
appendix, are provided by Verdix Corporation. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 21474831 
type SH0RT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is range 

-2#0.11111111111111111111111111111111111111111111111111111#E1024 
2#0.11111111111ll 1111 111 111111111111111111111111111111ll1#E1024 

type SH0RT_FL0AT range 

-2m . 111111111111111111111111 #E128 .. 

2m. 111111111111111111111111#E128; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-1 






ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 
1.1. INUNE_ONLY Pragma 

The INTJNE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be iniined. This pragma also suppresses the generation of a callable 
version of the routine which save code space. 

1J. BUILT_tN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided. for example the MACHINE_CODE package. 

1_3. SHARE CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declaradve item in a declarative pan or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit. 

The name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included for comparability with earlier versions of VADS. 

1.4. NO IMAGE Pragma 

Tne pragma suppresses the generation of the image array used for the IMAGE attribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. 

1.5. EXTERNAL_NAME Pragma 

Tne EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the user to specify a different external name that may be used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 

1.6. INTERFACE OBJECT Pragma 

The INTERFACE_OBJECT pragma takes the name of a a variable defined in another language and 
allows it to be referenced directly in Ada. The pragma will replace ail occurrences of the variable 
name with an external reference to the second, link_argument. The pragma is allowed at the place of a 
declarative item in a package specification and must apply to an object declared earlier in the same 
package specification. The object must be declared as a scalar or an access type. The object cannot be 


B-2 










any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. rMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

2. Implementation of Predefined Pragmas 
2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 
12. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2J. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C’ and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM. An optional third argument overrides the default link 
name. All parameters must have mode IN. Record and array objects can be passed by reference using 
the ADDRESS attribute. 

15. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMORY SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 

This pragma takes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library p acka ge spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 
package body. 

1A. NOTELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS, a configuration package or an Ada package that is 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 


B-3 



2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVEGNTERRUPT, <numfcer>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no effect 

2.15. STORAGE UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that RANGE_CHECK and DIVISION_CHECK can¬ 
not be supressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P’REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units allocated to P. For a subpro¬ 
gram, package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt. The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 

See section F.4.8 for more information on the use of this attribute. 


B-4 











(ror a package, task uni'., or entry’, the 'RE? attribute is no: supported.) 


4. Specification Of Package SYSTEM 


p■c x11 • SYSTEM i a 

prapae ttppmi! AU- OCCXS ) ; 
p r «pa aiippr ( EXCXFT lQTi TABLES'! ; 

p r a|si oot aiaeoraits; 

type NV<C ii % *a-_Jl6i^«ma >, 

SYSTEM NANC : cooitiDt NaA€ » aec_386 i an i *; 

STORAGE UNIT coomot :• *; 

MEMDRY_S 12£ cc.". last :* 16^777^216; 

. . Sy a t exp-Dcpenden t Nand Naabm 

MIN INT : cooittst :» -2_147_4t3_64i; 

>4VX”lKT ' csnitiat :» 2_1i47_4l3_647; 

MOC"DIGlTS : con a i ant :• IS; 

MOCMANTISSA ; conalant :• 31; 

PINE DELTA : constant :• 2.0*»<-31); 

TIOC* : conatant :» 0.01; 

*- Other Syiiao-dapaBdaBt Doclarationa 


tab type PRIORITY ia INTEGER rant* 0 .. 99; 


MOtRECSITE 

integer :» 64 

•1024; 



typo address 

it privet*; 




(•act ion 

•>• 

(A: ADDRESS; B: 

ADDRESS) 

retem 

BOOLEAN 

(•acti«o 


(A: ACCRESS; B 

ADDRESS) 

retire 

BOOLEAN 

(a»ct ton 

•>■* 

(A: ACCRESS: 8: 

ADDRESS) 

ret«rn 

BOOLEAN 

(idc tion 

*<■ * 

’(A: ACCRESS; B: 

ADDRESS) 

re tern 

BOOLEAN 

fauc tion 

•- * 

f A: ACCRESS; B: 

ADDRESS) 

rc r e r o 

INTEGER 

facet ion 


(A: ADDRESS. I: 

INTEGER) 

return 

ADDRESS 

f leelion 

• • • 

(A: ACDRE5S; I: 

INTEGER) 

return 

ADDRESS 


f.Dct.oti (I: UNSI C2^ED_TYPES . UNS !CNEB_ INTEGER) return ACCRESS ; 

Canet ton KCM3RY ADCRESS 

(I: UNS I GNED_TYTCS .UNS !<XED_ INTEGER) re tern ADDRESS rasanni 
NO ACOR : conatant ADDRESS; 

pri*ala 

type ADDRESS ia no* UNSIOED^TYreS .UNS l ©«ED_ INTEGER; 

N0_ADDR : conatant ADDRESS :» 0; 

pragma BUILT INO")*. 
pragma BUILT*INC<") ; 
prapa BUILT JNf ; 

pragma BUILT_INf*<■"); 
pragma BUILT INf"*"); 
pragma BUILT*INf* + " ) ; 

end SYSTEM; 


S. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eliminate the padding where possible. Pragma 
PACK has no other effect on the storage allocated for record components a record representation is 
required. 

5.2. Record Representation Clauses 

For scalar types a represenation clause will pack to the number of bits required to represent the range of 
the subtype. A record representation applied to a composite type will not cause the object to be packed 
to fit in the space required An explicit representation clause must be given for the component type. An 


B-5 

















■ error will be issued if there is insufficient space allocated. 

5J. Address Clauses 

Address clauses are supported for variables and constants. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record type(s) needed in the code statement, an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE_n'( opcode, operand {, operand) ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The format is as follows: 

CODE_N’( opcode, (operand {, operand]) ); 

For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the 'REF attribute. 

The arguments to any of the functions defined in MACHINE CODE must be static expressions, string 
• literals, or the functions defined in MACHINE_CODE. The ’REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


B-6 










6. Conventions for Implementation'generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 
Address clauses are supported for constants and variables. 

8. Restrictions on Unchecked Conversions 

None. 

9. Restrictions on Unchecked Deallocations 

None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGEJJNITS) when the size of ELEMENTJTPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SI2E is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating DERECTJO to provide an upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGE_UNIT bits. DIRECT_IO will raise USEERROR if 
MAX_REC_SEZE exceeds this absolute limit. 

Instantiations of SEQUENTIALJO use the value MAX REC SEE as the record size (expressed in 
STORaGE_UNTTS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SEE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER JO to provide an upper limit on the record size. SEQUENTIAL JO imposes no 
limn on MAX_REC_SEE. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits are available to every program. 


11.1. Line Length 

Tne implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 


1L2. Record and Array Sizes 

The maximum size of a statically sized array type is 4,000,000 x STORAGEJJNITS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGE JJNITS. A record type or ®ray type 
declaration that exceeds these limits will generate a warning message. 

IIJ. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every cask except the main program 
is allocated a fixed size stack of 10,240 STORAGEJJNITS. This is the value returned by 
T' STORAGEJ3IZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by T’STORAGE_SIZE for 


B-7 




an access type T. 


11.5. Limit on Declared Objects 

There is an absolute limit of 6.000,000 x STORAGE_UNTTS for objects declared statically within a 
compilation unit. If this value is exceeoed the compiler will terminate the compilation of the unit with a 
FATAL error message. 


B-8 





APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning Value 

$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1 .. 498 s> *A’, 499 => ’T) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 

$BIG_ID2 (1 .. 498 => ’A', 499 => ’2’) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG_ID3 ' (1 .. 249 => *A’, 250 => ’3', 251..499 => 'A‘ 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


C-1 







TEST PARAMETERS 


Name and Meaning 
$big_ii>9 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 

value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 

catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$5IG_STRING2 

A string literal which when 

catenated to the end of 
BIGJSTRING1 yields the image of 
BIG_ID1. 

^BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 

TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 

(1 .. 299 => ’A’, 250 => '9', 251 

(1 .. 996 => '0*, 997 .. 999 => " 


(1 .. 993 => ’O’, 999 .. 999 => 


(1 => 2 .. 200 => ’A’, 

201 => 


(1 => •"*, 2 .. 300 => ’A’, 
301 => »1 *, 302 => •"') 


(1 .. 979 => ' ') 


2 197 983 697 


16 777 216 


8 


C-2 


..999 => 'A 


298") 


69.0E1") 



TEST PARAMETERS 


Name and Meaning 

$DEFAULT_SYS_NAME 

Tne value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_D0C 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT_I0.FIELD»LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, 3H0RT_FL0AT, or 

LONG_FLOAT. 

$GRE ATER_THA N_DURA TION 

A universal real literal that 
lies between DURATION’BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATI0NJBA5E_LAST 

A universal real literal that is 
greater than DURATION’BASE’LAST. 

$HIGH_?RIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER*FIRST. 


Value 

SUN_3 861_ T JNTX 

O.OOOOOOOOOM566128~307739257812: 

2_147J483_647 

NO_SUCH_FLOAT_TYPE 

NO_SUCH_FLOAT_TYPE 

100 _ 000.0 

10 _ 000 _ 000.0 

99 

/iIlegal/file_name/2{]$%2102C.DAT 

/illegal/file_name/CE2102C*.DAT 

-2 147 483 648 


C-3 




TEST PARAMETERS 


Name and Meaning 
$INTEGER_LAST 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_D'JRATION 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOW_PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUSJ 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


Value 

2_147_4 83_6-47 

2_147_4 83_648 

-100JD00.0 

- 10 _ 000 _ 000.0 

0 

31 

15 

499 

2147483647 

2147483648 

(1 .. 2 => "20", 3 •• 496 => 'O', 
497 .. 499 => "11#") 


C-4 




EST PARAMETERS 


Name and Meaning 

$max_len_real_3ased_literal 

A universal real based literal 
whose value is 16#F.E/* with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

*MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the on_y statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHO RT_INTEGER, 

L0NG_FL0AT, or LONG_INTEGER. 

*NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG - BASED_IK7 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$ NE W__MEM_S IZ E 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
^DEFAULT MEM SIZE. 


Value 

(1 .. 2 => "2#", 3 .. 496 => 'O’, 
497 .. 499 => "F.E//") 

(1 => 2 .. 498 => ’A', 499 => 

-2147483648 

32 

TINY_INTEGER 

SUN_386I_UNIX 

16#FFFFFFFD# 

16 777 216 


C-5 




TEST PARAMETERS 


Name and Meaning Value 

$ NEW_S TO R_'JN IT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFA’JLT_STOR_ T JKIT. If tnere is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJNIT. 

$NEW_SYS_liAME SUN_386l_UNIX 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 


C-6 





APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 25 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. A39005G: This test unreasonably expects a component clause to 
pack an array component into a minimum size (line 30 ). 

b. 397102E: This test contains an unintended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

c. CD2A62D: This test wrongly requires that an array object's size 
be no greater than 10, although its subtype's size was specified 
to be 40 (line 137). 

d. CD2A63B and D, CD2A66B and D, CD2A73A..D, CD2A76A..D [12 tests]: 
These tests wrongly attempt to check the size of objects of a 
derived type (for which a 'SIZE length clause is given) by passing 
them to a derived subprogram (which implicitly converts them to 
the parent type (Ada standard 3.4:14)). Additionally, they use 
the 'SIZE length clause and attribute, whose interpretation is 
considered problematic ty the WG9 ARG. 

e. CD2A81G and CD2A83G: These tests assume that dependent tasks will 
terminate while the main program executes a loop that simply tests 
for task termination; this is not the case, and the main program 
may loop indefinitely (lines 74, 85, 86 and 96, 86 and 96, and 58, 
respectivly). 

f. CD2B15C and CD7205C: These tests expect that a 'ST0RAGE_SIZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13*7:15 
allows that such control must not be expected. 


D-1 




WITHDRAWN TE2TS 


g. CD7105A: This test requires that successive calls to 

CALENDAR.CLOCK change by at least SYSTEM.TICK; however, by 
Commentary AI-00201, it is only the expected frequency of change 
that must be at least SYSTEM.TICK—particular instances of change 
may be less (line 29). 

h. CD7205D: This test checks ar invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage for 
a collection. 

i. CE2107I: This test requires that objects of two similar scalar 
types be distinguished when read from a file—DATA_ERROR is 
expected to be raised by an attempt to read one object as of the 
other type. However, it is not clear exactly how the Ada standard 
14.2.4:4 is to be interpreted; thus, this test objective is not 
considered valid, (line 90) 

j. CE3111C: This test requires certain behavior when two files are 

associated with the same external file; however, this is not 
required by the Ada standard. 

k. CE2301A: This test contains several calls to END_OF_LINE and 

END_0F_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 

IIS, 132, and I 36 ). 

l. CE3411E: This test requires that a text file's column number be 

set to COUNT'LAST in order to check that LAY0UT_ERR0R is raised by 
a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 
space, and the test would thus encumber validation testing. 


D-2 





