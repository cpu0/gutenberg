AD-A281 661 


KEEP THIS COP 


ODUCTION PURPOSES 


REPORT DOCUMENTATION PAGE 


form Approved 
OMB No 0704 0tftl 


n 


^uMic reoortinq burden tor thi% roMKtion of mformAtion ntimatM to < **out otr fnporst. irKtuding th^ titn« for ri>vt«wtnq mstrurtions. se4rchirt<} ea<>tinq d«U tourer. 

9 «lher<nq ind mamt^inioq ih« data rt««d«d. ar«d <omolelifvq ar>d raviewmq th^ ^oHe<tton of mformattOA S«r>d commenu rMardin^ thi% burden estimate or ar>v other aspect of thti 
coiie<tton of mformatiort. irtciudirt^ vu 9 ^t« 0 h$ for raducin^ thi^ burdert to ^aihirtqton HeadQuarter^ Services. Directorate for information Operations ar\d fteports. \i IS JeffPrson 
OavnHiqnway. Suite W04. Arlington, VA ^2202*4102. ar^ to the Office o* Management and Sudqei. Paperwork Reduction Project (0/04-0186). Washington. DC 20503 


1. AGENCY USE ONLY a«Ave btAnk) 


2. REPORT DATE 
May 1994 


3. REPORT TYPE ANO OATES COVERED 

Final 25 Sep 92-31 Dec 93 


14. TITLE ANO SUBTITLE 

S. FUNDING NUMBERS 

The Highways and Byways of Teaching ADA: Our Backyard 


Approach 

DAAL03-92-G-0414 

t 6. AUTHOR(S) 


1 Edward Caluslnski 


1 Tzllla Elrad 


1 Thomas Grace ^ 





PERFORMING ORGANIZATION 
REPORT NUMBER 




10. SPONSORING/MONITORING 
AGENCY REPORT NUMBER 


ARO 30997.1-MA 


11. SUPPLEMENTARY NOTES 

The views, opinions and/or findings contained in this report are those of the 
author(s) and should not be construed as an official Department of the Army 
position, policy, or decision, unless so designated by other documentation. 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 112b. DISTRIBUTION CODE 


Approved for public release; distribution unlimited. 


13. ABSTRACT (Maximum ^00 words) 

Ada is a modem language, for modem students that solve modem proUema. Ada was 


designed to be a language that promotes the goals of nnodem software engmeering. It promotes 
modifiability, efficiency, reliability, and understandability. Ada was also designed to support the 

principles of modem software engineering. It promotes data abstraction, information M/fing 

modularity, localization, uniformity, completeness and confirmability. Ada's original design chose 

program readability over ease of writing. This attribute promotes code understandability, which 


(continued on reverse side) 


14. SUBJEa TERMS 


ADA, Computer Science, Language, ADA Language, 
Software Engineering 


IS. NUMBER OF PAGES 


16. PIUCE CODE 


17. SECURITY CLASSIFICATION I 18. SECURITY CLASSIFICATION I 19. SECURITY CLASSIFICATION I 20. LIMITATION OF ABSTRACT 

OF REPORT I OF THIS PAGE | OF ABSTRACT | 


UNCLASSIFIED 


NSN 7540-01-280-5500 


UNCLASSIFIED 


UNCLASSIFIED 


i94 7 11 20 6 


Standard Form 298 (Rev 2-89) 

Pr^riM by ANSI Sid /i9-i8 
296-102 



























helps prevent erroneous and error-prone programs. The Ada language supports sq)arate 
compilation units. This hdps in program development and maintenance, i^diich is hetpfiil tidMH 
devdoping large, complex software engineering projects. Givoi all the underlying ftsatures of 
Ada, h is apparent that Ada is an excellent language to use when teaching students the principles 
of computer science. 





THE HIGHWAYS AND BYWAYS OF TEACHING ADA; 
OUR BACKYARD APPROACH 


FINAL REPORT 


EDWARD CALUSINSKI 
DR TZILLAELRAD 
DR THOMAS GRACE 


APRIL 15,1994 


U S ARMY RESEARCH OFFICE 


30997-MA 

DftAL03-92-<3-0414 


Accesion For 

NTfS CRA&I 
OTIC TAB 
Unannounced □ 
Justification 


By 



Oist ibution/ 


Availability Codes 

Dist 

6± 

Avail and / or 1 

Spe 

clai 



ILLINOIS INSTITUTE OF TECHNOLOGY 


APPROVED FOR PUBLIC RELEASE; 
DISTRIBUTION UNLIMITED. 


94-21246 








THE VIEWS. OPINIONS, AND/OR FINDINGS CONTAINED IN THIS REPORT ARE 
THOSE OF THE AUTHOR(S) AND SHOULD NOT BE CONSTRUED AS AN OFHCIAL 
DEPARTMENT OF THE ARMY POSITION. POLICY, OR DECISION. UNLESS SO 
DESIGNATED BY OTHER DOCUMENTATION. 


u 



TaMe of Contents 


1. Background. 1 

2. WhyUseAda. 1 

3. Our Approadi to Int^rating Ada..2 

4. Where and How to Integrate Ada.3 

5. Accomplishments.3 

6. Course Description of Classes that Incorporate Ada.4 

7. Conclusion.6 

APPENDIX A..A-1 

APPENDIX B.A-2 













The Highways and Byways of Teaching Ada: 

Our Backyard Approach 

BACKGROUND 

The lUinob Institute of Technology is a private, medium-sized, coeducational university, 
which offers undergraduate and graduate programs through the Institute of Design and rix 
schools and colleges: the College of Engineering and Sciences; the College of Liberal Arts; the 
College of Architecture; the School of Business; the College of Law and the Graduate School. 
The 120-acre main campus is located about three miles south of Chicago's Loop. The Computer 
Science Department is part of the College of En^neering and Sciences which offers Bachelor of 
Science, Bachelor of Arts, Masters of Science, Masters of Science for Teachers, and Doctor of 
Philosophy degrees. The curriculum is software centered, which is attractive to all types of 
majors. Our platform of choice is the IBM PC. This makes our program more interesting to 
students who have majors other than computer science. This accounts for our large number of 
students, with majors other than computer science, who enroll in our courses. IIT has an unique 
situation in that we offer students an education through IITV (Interactive Instructional Television 
Network). IITV is a live, talk-back teIe>dsion system that enables participating companies to offer 
nTs educational programs to their employees at their places of business. The networic links 
classroom-studios on campus with receiving classrooms at industrial and business locations so 
that employee-students can join ITT day and evening classes without travdii^ to campus. 

WHY USE ADA 

Ada is a modem language, for modem students that solve modem problems. Ada was 
designed to be a language that promotes the goals of modem software engineering. It promotes 


1 


modifiability, efficiency, reliability, and understandability. Ada was also designed to support the 
principles of modem software engineering. It promotes data abstraction, information hiding, 
nnodularity, localization, uniformity, completeness and confiimability. Ada's origiital design chose 
program readability over ease of writing. This attribute promotes code understamlability, v^ch 
helps prevent erroneous and error-prone programs. The Ada language supports separate 
compilation units. This helps in program development and nuuntenance, which is helpfiil when 
devdoping large, complex software en^heering projects. Given all the underlying features of 
Ada, it is apparent that Ada is an excellent language to use when teaching students the principles 
of computer science. 

OUR APPROACH TO INTEGRATING ADA 

When we were first contemplating int^ating Ada into our curriculum, we asked 

ourselves the question, "Why is Ada not already integrated?". We came to the conclusion that 

one, the students and faculty had very Uttle to no exposure or awareness of Ada. Two, the DoD 

and DoD related industries are very limited in our area. Even though Ada is not just limited to the 

DoD, our students would have little interest in learning Ada, if they could not apply it. Three, 

Ada is very rich in its syntax, but our curriculum in the past has favored simpler languages like C, 

Pascal, Lisp/Scheme which are thought to be "easio* to learn". Four; A large population of our 

international students end up returning to there native countries. Most of these countries have 

little or no use for Ada, which makes leanung Ada unattractive. We confer this a "backyard 

approach". There is no real reason for us to teach Ada, except we realize the capabilities and 

powerful features that Ada possesses. Because we are not in the "mainstream" Ada community. 



the acceptance of this becomes difficuk. We are presented with the questions "Where do we 
int^ate Ada into are curriculum?" and "How can this be done given our current curriculum?". 

WHERE AND HOW TO INTEGRATE ADA 

At 6rst we thought of int^ating Ada in our entry levd courses. This seems to work wdl 

for other Universities, but at IIT we felt that to incorporate the more advanced and best features 

that Ada has to offer, we would need to intqjrate Ada at higher level. We based this on the fiict 

that most first year students are unfamiliar with ti^ rigors of software development, and would 

therefor under utilize its features and richness. Our curriculum is devdoped in small incranaits 

due to the accrediting concerns, so a major change would set us back. Our second choice was to 

develop a new sequence of software en^eering courses around Ada. This was a better idea, but 

our undergraduate curriculum is full and adding a new sequence might not attract the interest we 

would need to maintain the courses. This idea also moves away fi-om our objective of int^ating 

Ada. This idea would isolate Ada rather than integrating it. We finally came to the conclusion 

that the best way for IIT to integrate Ada was to put it into our existing, and popular (i.e. 

required) mainstream upper-division courses. We based this decision with the following things in 

mind. This implementation does not require a "^)eciai audience". Our students, once at the 

junior or senior level, will be able to fully appreciate the richness of Ada. Also, there is a good 

probability that Ada would migrate into more of our curriculum. 

ACCOMPLISHMENTS 
Identification and Acquisition of Resources. 

♦ Substantial resources via FTP on Intern^ (code, documentation, etc.). 

♦ Ada Tutor - shareware; copies are available and distributed to students. 

4 LearnAda, by AETech, which is a tutoring system and Ada compiler available to 
students on the IIT PCs 


3 



^ A comprehensive manual "Getting Started With Ada" for the AETech software wMch 
includes the ANSI/MIL-STD-181SA Ada Reference Manual. 

^ Additional Ada literature developed by the Teaching Assistants which has hdped 
support course development and Ada integration. 

♦ We have hired and additional part-time instructor to teach Ada. 

^ A 16 wedc Ada course available on video tape (VHS format). 


COURSE DESCRIPTION OF CLASSES THAT INCORPORATE ADA 


CS440; Programming Languages and Translators. 

This course is a general introduction to theory and structure of languages. It covers 
several programming paradigms (imperative, declarative, object-oriented, functional, etc.) There 

has been a substantial amount of material added regarding Ada, especially; 

rich^tax 

generics 

types and type checking 
overloading 

proposed Ada9X features 

The integration is included in the lecture material, homework and class exercises, examination 
topics and questions. 


CS450; Operating Systems. 

This a standard und^graduate course on opoatmg systems. Its topics indude CPU 
scheduling, process management, memory numagment, file ^ems, multitasking, concurrency, 
synchronization, security, dc. Ada is now the base language for this course. This is, of course, 
espedally important because of the Ada tasking modd. Materials devdoped include examples in 


4 



lecture, exercises, and examination materials. Students are strongly encouraged to submit 
programming assignments in Ada (although, for symmetry with our other courses, a choice of 
languages is provided). 

CS49S: Safety Critical Software Engineering With Ada. 

This course provides an in-depth examination of the prindples behind development of 

software intended for use in critical ntuations. Such situations include air-trafiBc control, medical 

applications, defense weaponry, space exploration, ^c. This course also emphasizes testing, 

maintenance and reusability of code. Ada is the only language used in this course. Extensive 

programming experience in Ada, emphasizing more advanced features, is provided. 

CSS4S; Concurrent Programming. 

This is a graduate course, but it is available to und<»^graduates with an advisor's approval. 
Intensive examination and comparison of the various language testing models and there richness 
of support for concurrency, especially in real-time systems. Ada is the base language for this 
course, and extensive programming experience in Ada is provided. Ad89X issues are also 
explored including protected types, asynchronous transfer of control, mutual control, race 
conditions, etc. 


5 



CONCLUSION 

We believe that our approach is fairly novel We have not tried to duplicate efforts of 
other educators to develop CSl or CS2 courses based on Ada. We have not tried to devdop and 
"Ada Track" of courses. Instead, we are integrating Ada into the voy core of our undergraduate 
curriculum, where Ada can be used to its fullest potential. By implementing this "backyard" 
approach to teaching Ada, we have been able to break the trend of other successful institutions by 
implementing Ada at a higher level. We have been able to take advantage of all the features that 
Ada has to offer, from the most basic to the most advanced. By doing this, we are able to teach 
modem day concepts, using a modem day language, in the comfort of our own backyard. 


6 



APPENDIX A 


CS450 OPERATING SYSTEMS COURSE 


SYLLABUS AND ADA LECTURE NOTES 




Lecture One 


Textbook 

Afanham SilitnclMlz, l«Mi L PMcnaa, Ptitr B. OtMn 

*OpcntiiigSyiUmC<iiiccpli*, Addnoo-WMky, third aditioa, 1991, Ftrt 1, ChiiiUn 1,2 and 3 

References 

O Andraw S. Tanaahaum 

*Modam Operating Syrtaaia*,h«aiio»-Hall, 1992, Part l.Chaptwl 
0 leanBaooa 

*CoBcuntBt SyiteMi« An hdagtiiad Approach to OpenliagS ydfin i . Databaaa. and Di *fcil a d Sy at«ni* ,AdJiiaB-Wailay. 1993, 
Oavtar 1 (1.1.1,1.1.3) andChignar 3 (3.2 - 3.S) 

Goals 

0 Topraaantorgaaizalianoflhaoouna 

0 To review hialaiy and ovoluliooofthaoaapuiar and opcniiQgfjntana 
0 To explain die noliaa of the oparatingayrtem 
0 To ^eeuae comp u ter ayetantehMCturae 
0 TodhcuaaepeiitingeyMcmatnieluiae 

Content 

0 Conlenlofthecoune 

0 Hiiiacy.Evolutian, and Philoiapli)'of Operating Syrtema (3 houn) 


1 



Lecture One 


Organization of the Course 

0 Count Syllabut(«aHiipk in tiwifpMidix) 
0 Ovwvitw of th* Count MalMial 
0 OvtrvitwofllMFinlLtclun 


History and Evolution of Operatiiig Systems 

0 rma(nH«tian(194S-19SS) 

Vacuum liibt and nu||tatrei 

Finttniedisilal comp u ter «ChiritiBSblitat (1792-1171) (u m ucc i f a il ) 

HownfUAikmtHan^UmvcnilyX John ton Noumaiin9iinodonUBivanilyXJ.Pm|MrEci(trt and WaSam 

MauchleyfUiivonityofPanDaylvamaX Konrad ZuaofOcnnaayXtUnMcooded in huiMai|caloutatinfoiadiiMinahig 
vacuum hita 

0hii«i 

0ala«r 

0 uririns npt ptui^oardi to oonmi tte mtefameni btak amctioaa 
0 proy aiwm iH l o n ei i a aia id aaae n i l i iy laapMaefuiik n ow) 

0 ofmadns ayatona (urfiaand oQ 
0 moda ofoptnlian: aviHp Ihr tUoekoftoBia 
0 hmoduoliaoofpunchedcatdiinaleadorplusbotrdaClSJO) 

0 Second (eneration(19J3-196S) 

Tnnaialan and baldi ayitemt 
0 offtiiM operetioo 
0 batch eytoemi 

0 control carde • modem )CL and command imetpreUn 

0 epocial|iro(raoi( the anceator of today*a operating s)ttem)( Fcrinn Monhor Sjtiem • FMS and IBSYS • DdB 
7094) 

0 Hurd generation (196S. 1980) 

Small^eale imegrated dmutla and muhjpropammins 
0 general purpoaa matbinm 
0 huge opera^ aytoaoaa (pSAMO) 

0 muhiprograiiimiqg: aeuanljoba in memory ready ftr execution 

0 tunetharing; variant of anildprograinnaigCCTSS • MIT, MULHCS • MULTiplexed fafonaationaaM 
Computer Syatem) 

0 buffering: overtuiping lie I/O ofajobtvidiita own compulation (1/O4)ouad raid CfWoundjoha) 

0 apooling (Simultaneotta Pcriphoml Operation On Line): one program migla have been executing Male 
I/O occutred for olier joba 
0 Fourth Geoeratioo (1910 > 1990) 

Penonal Computen 

0 LSIcircuila 
0 woriatatiom 

0 highly imerartivc computing power will excellem gtaphica and uaer-friendly aoftware(MS>DOS,OS/2, 

UNDO 

0 network and diatributed operating ayatema 
Traditional Operating Syauma 

In the poet moat computen ran atandalone and moat operatiiig ayatema ware deaigned to tun on a aingie prooeaaor 
Cemnlizod ayatema: aingic CPU, ita memory, peripheiab and aome terminaia 
Diatributed Operatiag Syatema 

roinp i n»i «m«ylienmwiiriMdtngellier,Biekiii|iBmihutad npmiting «yiegiii«iiin»g imp<tMt 

InmidlPSOi; 

0 devdopmerS of poweitU micraprooeaaon 
0devdopmamof hi^ ap i a d local area net w oak a (UKNa) 

Reault: large number ofcmcenni^ by a high a p te d netw^ 

0 notia 
0advaoiagN 
0 diaadvamagea 

Modem computen: one or more pracaaaora, main memory, dodm tonaanaK dnka^ network inteiftom aid odtor K> dOviem 
0 tighl)y«oupied ayatima: procaaaon ahare memory and a dock 
0 looa^r<oupled ayatema: eadi procaaaor hm ka own memory 
Real-Tima Operatiag Syilm 

P i occa a ing muat be dona whhinliadiflnadoon m earn 


2 



LectuieOne 


Computer System Structures 

O CNdtftyiUm-eutlnwfiarindtrtlicCPUcoatriol'kMq'wiMag 
umlittitMniB mitt ft 

. * haAhm ihM€nftiiMfi UCWaadVO^oMU€mOmtthmiimn ntt4 t 6 toaikmw w¥nmm ^ ni 6tcoenidMO 


0 intonipt'^vcodUatniiiAr 

0 poUii« 

0 wMtand irtcmipt lyUcm 



Fltvc 1.1. Example «rtke tatempt-drivoi Sala trwMfcr 


0 dgeO^ntmor y « cccm (DMA) d«u tramfer 

Durinplheiranifo die diA oontroiler if tmufimig data to or from memixy at Ihe tame tmw mUib prooenor ii fetahiDS 
imliiicliom from mcoiofy and icadaig and writing data openndi ia nmnoiy. The inenoiy oomrolkr emwea that only one of 
thematonpeiamakingamemocyacceaa.'niedMccortrolkrmay a cc aa a mamoayba tw eanani B at n ie ti o n ftlchaiidadata 
acceaaadiidiia part offbeirnmiotioacmcuciamtliiaia called cy^aiealaag. DMA alowa down Aerate at whidt die praoeaaor 


tfigh ipeed VO devioea 
DMACoanOar 

Tnmftr of an tarthre Woefc of date 
to (or from) ite own Iw8ir 
fi«in(orto)inenKny 
Arce^ (no inurveatioa by the CPU). 
One iiSomipt per Mode 


3 


















































LectufeOne 



IJ. DMA cMlnIcr 

Opentiiig System 


or virliMl BUdMie tiwt i( «Miff to undcffUnd tad pra^im. 
Keep iTKlc of mMy I/O *» iiine lini* 

Dcvice-StetM ToUcwMi Rc4><^ LM 



0 SyilcmcinifroirHa) 

Put 1K> leqncM irto tbe reqiMrt IM (OS) 

Remm oortrol to floe orSM pravMM ( 08 ) 

0 rompiSatieB (/nptm) 

(!) litanipt(deviw>lMrdw««) 

UiaS<ySieiaune(OS) _ 

bdM Device-Statue Table (read or oiodify the ertiy) (OS) 

Ifduf iicanplelioa 

iotenupt Service Routiie (OS) 

Start new job Sam iwiueat liat (if any) (OS) 
Itetuiii control to one of Sie premu (08) 

0 Cainputatioa(na(rproram) 


4 











Lecture One 


Dual Mode Opemkm 


O 

O 

o 

o 


Sa^MMT (eraennm opnMd) 

Coaural MflAmd to 01 

MptcuttyaMMfRMHlafVO_ „ 

gmt of i > Ui WWW • iac w Mw t [■ o M m « 


■mr* 

AMman 


couldba a*Nntly lifaMa 

^wthtUitoelti 

.byhM*w»» (i ll« »l ■ un i rtiiw • 


0 moiriw (■v«viMr. qfUM) 


‘rnBorioicmut 

mmt nod* # aMaiM awdi 
Alto to job Ot wiUliai *«• 






Lecture One 


Privil^ed Iitttiuctioas 


Syatam calk • awy be UMd fiom laii|uagi 

O ill/OiMltwliaw 
O -*•—-**—**-* 

O tioMropcntMi 

O lepwel i k me leofeefMe irf i it i wi ii H nnwml ta OS - fijced-nee ctodc ead oeurtw, OS 
jBenmaei k • a«o leMnlat« becmial 
O tiniMlim«-Oa 
O euncotliaH 

O iMk 


Opeiating-Systeni Services 

0 08|ii«vidM«viraiaMSfbrSieeaaeMtiaB«flhepraiPMi 
0 SannoaoaeyvMy 
0 Lioadfnsnn 
0 RMifragram 

0 Twiiiiiai tnnimitl) ir ilmiifnnlly) 

0 UOop »a ioM 
0 CMtelta 
0 IMetelite 
0 RewlfilM 
0 Wriiefilet 
0 rnwieinifilioii 

0 Procewce anfte tune rrrrfHiHr 
0 ProcaeetoDlhetqMniedooaipulai 
0 By aeiai of shifcd memoty 
0 B)f netm of maeaec pMaiie 
0 EmrpraleGliaa 
0 EworhaiiSbn 

0 KeaouncallaGalMM 

0 Aw«eHt i n s 

0 Amectiaa 

System Calls 

0 Proceaooiarol 
0 FUe maiiiimlaiioa 
0 Device imaifBletiflQ 
0 Iiifoniiitiaa meinlcaeiMe 
0 Comnunicetiaai 

System Programs 

0 Fik maaipulatiaB 
0 Statue iafaiiielMa 
0 rdemodificatioa 
0 Pite|n i iMiiins-l*«»rmeiu|iport 
0 Program loadins and caecuiiaa 
0 rnnawmirariimi 
0 A p pl i calicaa 


6 



Lecture One 


Opentiog System Stnictuies 


Hue« tyMM n Mpi Nquini pMtiliaaiae iole I 


Synwi KtivMw 


• ctnflilty dMipMd iupul. 011 ^ toBiMM 


hvgnm bMItiUi *>% 

ItaOMi b f£tl!| (K «p«ciSM nnU iaMnicliea to be esMUUd) 
SyilMB «d OMT pnetM 
bipuL-CIV tiMh MOMfy, I/O davioM 

RndiaaK l.CWtfiia(dilHiM)«f<t>|wcMi 

1 StHpaMiM ((MWBpliMi) of the prooM 
3. Sy d rai M tiM 


Maia ■Mawy ia • bfyi amy ofWHdi or bytM adA«Mlil« lad qpiickly MMMibl* 


DatedMi cyda «aa* «r wMaa data 

Pngpaai loadad to ahaokdaaddmaeaialoIlia main 

Mmmryiiiaaae—tacfcaMM * iMidwwa auppQft 
FUmImm: l.BoakkaapioKwhalbiMadaiidl^adiam) 

X Who wiD ba loaded inia avaSaUe ipaoa 
3. Allocata and deaBoGMe ncaBory apoea 
0 Sacowdafy-ntemoiy manapemW 

FUadiaBa: I. Ftao-apace inanaffniwn 
3. Starapeallocalien 
3. DidtafhfdwIiiH 
O l/Oayiiemiiianapemcat 

FUnrtiniir 1. Buffxachnif iyda« 

2. Oanenl deviM Aiw irtaiftea 

3. Driven ier ipaei6c hafdaMM davieaa 

lofenaalMO can be ttond in aevani ddbeaid pliyrical femia: nayeli 

LofiGal aianpe unit (fib) Fhyaica) iicaape unit 

Fonoiiani: I.Cl«alioo(dalaiion)«dfilaanddirecloriaa 

2. ftnnitivMfiirfhemanipiilalianoffilaaaiiddinclariaa 

3. Mappinsfikaonloteoandafynarapa 

4. Bad^ on ilaUa etorape meiSa 

0 Frinedioa lyitan 

Memory a ddm ii n p hai dvi are 
Controffine aoocaa to KMnroea hy ocana of ^Mcification 
CofttoDias aoetae to rcaouroea by nearn «f aidbroeiiieat 
0 NelwoiUag 

DinrilMiad ayaiani doea not diaK nMoray or dodc 
FUndioni: I. Roufinpandconnadianflntesiaa 
2. CooMMO and aaoiarily 
0 Coana n dHUarpra t ar iy i t aai 

Part of the kcntoi (DOS) or nnaanp when job if initialed 


7 



Lecture Two 


Textbook 

Abniitm SObandMli, XanMt L. FMasMi, & OilviB 

’XlpwringSyilMiCaiiMeli*. AMMa-Wtdty.iMadilMi^ l99l,Pirt2,Ckielar4(4.l.4.2) 

Reference! 

O Aaihaw S. TiiiiWhiiwi 

n4odm Opmlire VMliM-IUII, 1992. rirt I. Oufl* 3 at) 

O JmSMoa 

XoaeinMeSyil«-^lierer***dAre'«>^*«<^wriiniSyiiMi^OnibMi^MdDMtaltdSy«HMr,AMMa»-W«lty, 1993. 
CtMipUr! 

Goab 

O Topw w UhecoBciHafWapfoewi 
O To|iv*wiin|ilMofffnniwptMiwiBg 
0 TodHCUMaadMqpUtaptaoMiMaaMdil 
0 TodiKimielulkmtmdia»elaaleptmm$tyilmm 

Content 

0 TMldBe«a4 PwoiwM (3 hoMW) 

0 PraocMCoiiociil 
0 FtocMtSMaModd 
0 hnp hwMW titiwi of Proc w wi 


9 


1 



Lecture Two 


Process Concept 

N«<Im of «n* ei«*«w (pk |Wlck|. w*r pragtMB - <Mk 
0 uniiafvMikiaatyflM 

(oSOTliws) »y*— pr nniM 


O 

O 


•div* «sily • proerMB !■ (wMi • pro^am eoMnunpacilVias ^ M’S iownicbaa to 

prappmcodt 

oumnl adivey 

Hack (aubraiite pamnddi^ lalum aM«Mit taaopoiafy variaM«r») 
data aadka (iMal vnMlaa) 


Daflaad by Sm naouraai k uaaa aad by Su tocatka d wliidi it ia anouliae. 


Typaaafp r a c aaaaa 

0 fydcmpnoaMa 
0 uaarprooMaaa 
0 CPUteHdpMowaa 
0 ro-bointpwoiaaM 
0 aaqaadialpncaMa 

awnSi 11 af a pfociaaa and piiy naa a a aaquinHal ftAina 
0 aancwndpnaaaaa 

aaadiaiafapweaamaypwyaaaapafallalftdiiaa 
laaaaoa Sir aOmtas aanaunaol anodiaa 

0 raaauioa ahariag Qliytical and lafical) 
0c oin pi it a K aB O iaadi y (if diare aw multiple p race aim elaiiaBla) 
0aaadiila^ 

OoanvaiMBea 

0 indepcndea pw c eae a 

caaBot affed er be afibciad by (he other procemci execuiinp a the sydam 
0 dale it aot dared 

0 ddcnnaidic executioii (depcada lolely oa iapul) 

0 rcpraducMe eBeeidioa 
0 caa be dapped and wdatted(aatUdleda) 


0 


0 

0 


coopcratn^ pvooHMM 

aaa a0iKi ar be aibdad by da odar prooaaei eaecidaf a Sa tydara 
0daaiadawd 

0 rcauk ia uapredktable (depcadt oa relative encdiee tequeaoe) 
0 aaaddMBiiaialic cMouiiaa 
beavywei^ praceaaea (ladn with oae (bread • UNDO 
lilfd^^ yrooear3 (daeada • baaic uak of CPU (dilizaiaa) 


I eaviraomeai ia which daeadi 
(fareadaahate: Ocode 

Oaddreaapaae 
OOS waouroca 
decadtown; Owgiderdaoe 
Odach 


“0 


y lea eapcattm coaaxt awaahea 

w 


The exiaativt ahariag aaakea CPU awilchae aaaag peer dareadiiad daeadd cndioeB iaeifeaaive. 
Threadt caa be aupportad by: 

0 Kai^ • ad af ayalam calla (Mach, OS/3) 

0 Above the karoal • ad af la^ at fte uaar levd (Aadeer) 


2 



Lecture Two 




















LectufcTwo 


Process Model 



ngart 2^ rrectn Slate MoSd 


0 ProoetiiUtei(iiimei««aibiliwy and vary from lyatcm to lyteen) 
ailaait 
hold 

ready e waitini to be assigDed to a prooeaor 
fuming e iminictioai are being executed 
waiting e for some event to occur I/O completion 
complete 

Implementation of Processes 

Data atnictnrca 

O Prooesi(Tadc) Control Block (record) 

0atale 

0pointer 

0 ptopam counter (K) 

0 CPU legisten (aocumulatofi, index reghlen, alack pohdcn, gcneral-purpote legincn) 
0prooeain> 

0 acheduling infonnalian 
priority, 

poitfcft to idwdDUBf <|iicu4iii 
ottar acheduling patmieteia 
0 memery-management infonnation 
faimt regjatrti. 

Page Table Baae Regiater,... 

0 accounting nfonnalian 
CPUtnneoaed, 
real time nae^ 
time Umih, 
account nuriber, 
job or praoem nundien,... 







Lecture Two 


01/OiUiwifll'onMlieB 

auUlaiiding I/O nquMU, 

t/O 4 (vicw attonlad to Ail prooMi, 

taoToptofiki,... 

0 idmityofcUAMprocMMi 

0 EXAMPLE •MOiortlieiiNRcaimMafictdipnMnlid in UNIX 


Rcfiilm 

ftopimaiwaur 

PiovunMhiiwafd 

SUtfkpoiflMf 

PiooMiUato 

Time whoi praoMi itottod 
CPUlmMUMd 
CtuMroi^CPUtimi 
Time of nett alifm 

IhiMMfB (|MIM poinKCft 

Pmdingiiipiel^ 

ftooemM 

Viriotttilagbili 


Poitttt to tett MgmMl 

Painter to deto leynml 

Poitter to bm wpMtt 

Exkttttm 

Sifiilttatoi 

ProoMiid 

Psrett peooim 

Fme«i|roup 

Real aid 

EAelivettid 

Reelpd 

Effte^lid 

BRmipifoainek 

Vttiouf flap bin 


.fkiibDMBHBI 

UUASKamk 

Rooldifectoqr 

Woricinsdniolaiy 

FiledMcriptan 

EflecUveuid 

ESbclive^ 

Syttcm caB penmilen 
Variouiflagbili 


0 EXAMPLE-high-levcilanguate (Ada) deacripliaa of tbeproocMdcaciiploriiniGluR 


type STATE ti (SUBMIT. HOLD, READY. RUNNING. WATTING. COMPLETE); 
Qrpc DURATION knew REAL: 
type ADDRESS kacccea LONG INTEGER; 
typePCBk 
record 

-procettmanaganett 
PROCESS ID: INTEGER; 

PROCESS STATE: STATE; 

PC: LONG imEGER: 

ACC: LONO.INTEOER; 

-andetfierngitteR 
SP: ADDRESS; 

MESS QUEUE: ADDRESS; 

CPU_T1ME: DURATION; 

-etc 

- memory manafcmcni 
TEXT SEO: ADDRESS; 

DATA.SEO: ADDRESS; 

-etc 

-fikmanaganem 
ROOT DDL STRING(1..256X 
WORK DIR:STRINO(l..25«X 
FD; ADDRESS; 

-etc 

end record; 


0 TheprocedureofHvingtheiUleofaproccttaDdfeltingwitheilatcafanolhcrifcalkdcanlcttmrllAing. The ineltnctiaiii Attire 
executed in poforming Ame opcrttMoi and Ae fiequcocy II which oomett iwitchiap bippem are an overhead tt Ae loiictt level of 
aiyitcm. 


P —ett ma 

0 ThecrettiananddekliaocfprooeMei 
0 prooemoettiaa 

via mbmlt OS crettei new procemm for a job 

viacreotijyooewiy ttem caB (dynimicaOy daring Ae execution of procmi) (UNIX jbrt) 

0 creating prooenei: portal 

0 created p roc emei : dAirm (UNIX: copy ofAeadAemipaoe of Aeparim) 
children may create Aeir cfaBdrm 

riaoarcca: mhetiled from parent or direclly fix» OS O ovcrloadmg 

cxccedtoa: parett ooncurTenOy wMt dubbea or parett wailf umB aB duMrea torminala 

0 prooeiatemiinalioa 

via (amUnefe/roeeM ayttem caB (after At Uit ttatcmeai) 

(Tfietom data to parent prooea i 
0 aak 08 to dekle prooem 


5 



Lecture Two 


vUMnwpMW/nacuMiyW—c«ll(attfr«ftnwnBneiw>roBWKUnllypiwtflrO^ 

CTtMMaK «xosed«IUMfi«rnMunw 

laA iMifMd to Um ckild it M looiw nquind 

ptrat M tonnittltd • cucaditc tonniiittMa ioilitltd by ibt OS (iwitlly cbilWtB 
^ txHiafttoptntofiaiAM) 

ID oTUto chilAta prooMMi 
tuto ofWt cttldran ptoocMM 

O TbtwewmioaiadnMagiiliaBafiifOcetoM 

0 ItwprovmaaaftoKiiinintfcrprooMityBcInaiztliaa 
0 TItopfwiiioaofMtchMiMilbrprocoto c o —l i r wi f 
0 •n>8provi»ioocfi n t rtiM i w tfcr<ti< Bck fctii<toe 


6 



Lectttfc Three 


Textbook 

Abnium SiB>enchia, itoiM L PMcnoo, PaUr B. Gtlvia 

*Opcnliii( SyiMa CooMplt*, AMiMit-WMky, third cdiliQa^ 199I.Part2,ChifttrS(S.I - S.4) 

Referenoes 

0 Aadnw S. Tiiwntwiim 

*ModamO|Mfatii«Sy«umi’. Picaiioe-H«ll. 1992, PM t.Chiv(«2aM • 2.3.5) 

0 JcmBicc « 

’Concunvot Syilcaa • Aa MtptuA Attproach to Operatiat Sjmmbn, [toti ba it , aad OMbatod Sjatond’, Addboa-WMlfy. 1993, 
Cl«vton3.9 
0 NanhiQchaiii 

*A<t«:ConcuiwatPtoy m antod*. SfliooBPw. l991,Ch«ptor3 

Goals 

0 TnduTnrhiihlinrri t in ( t ii| in«^ipflfttothiirinir«|it'rflli« |W'nrM 
0 TortMlIto p wbto H torfthecoer Aa a tifM iMtyii dto B HiiMoB afocBciawBtadivhMi 
0 ToMtolyieioiito<if<h» p rost Mwiiw g «i tM tinm todw a i tirtt i Mionp r Bt h m 
0 TodbctitohaidivafetuiipMftrfyncfaraaiztoiM 

Content 

0 Tasking and PrDoen«t(l hour) 

0 Language SytocmSuppM for Concurrency 
0 Proceaa Coordiaatian and Synchronization (2 boun) 

0 The Critical-Soclian Problem 
0 Synchronization Hardware 
0 Semaphores 


1 



Lecture Three 


Language System Support for Concurrency 

0 Concuireni lyitem buik frooi sequertitl profremt with lyUcm ctU* 

*Each unit of the eoncumnl lyileai may be t tinck e oque w tiet proceet end the operaiinf lyileni owy provide qntew cale to alee* 
Interactloa artth other procttece in tddhioa to eyetem cetti for requeMinf openlinf eyiiem eervioe.* "A in>ior ptobitm with the 
approach is portaUiiy oftheoaocurrcntiyUem. Theproocaaethavemadeuaeofanoperatinf qoleminierfMa(ai)Uiiiberari)«Uai 
c^) that hM been provided to allow i iUenctiooa bet w een prtoeaaea. IftheeynemiatobeabletonmooaiiyotlteoperalinasjMlCB 
it ia necesaaiy for te aame bscfftoe to be preaeit. SyiUactic difl e rance a can be allowed for when the code ia pottadl but aemartic 
differencea between opcratin(ayatenia are likely to occur in this areai* Jean Bacon, "CoacuneatSyalaaaa* An Iide|r*<od Approach 
to Operatina Systems, Database, and Diatribuled Systems*. Addiaoo-Wesiey, 1993, p. 166 

0 Coroutioea ( Modula>3, BCPL) 

Independent aubproanma within a aiogle program: 

0 ahaieddata 
0 private data (own atack) 

0 inatttKtifloa to create a^ delete a ooroutina 

0 inatruction to suapendoontutine execution temporarily but retain itaatate 
0 inattuction to paaaooidroleiplicitly from the auapendina coroutine to another 
0 natructian to return oaetrol to the caOar 
0 coroutine acthnliooa must be scheduled at the uaer4euBi 
0 ainale thread of cotaltoi 
0 no possibility for immediate reaponae 

0 transfer of control between coroutine activatkma involvea very little overhead 

0 Language-level Ptoceaaea (Coocurreit Pascal, occam) 

Unlike coroutines, control ia managed by an outside agency. 

0 Operating system supports one process for one program: The prooeasea within the program art managed intemally by the 
language runtime system which effectively ro-implemems a process scheduler. The applicslion programmer does not have to 
program the transfer of oor<rol between the language-level processes. Problem: if lai\giiage-level process makes a system call to 
the OS to do I/O and becomea blocked then no other aubprooeaa in the program can run. 

0 Operating system recognizes aubproceasesdefiited in a program: They became operating ayriem ptoceaaea (and may be called 
threads) and art scheduled by the operating lystem to run on proccaaots ooncuntntfy. 

0 Ada Tasking Model 

Tides became active just prior to the first executable statenMoi following the deciaratians in an unapecHied ordir. Talk ia compitted 
after the execution its body or if the exoefXion ia raised for which a handler bat not been providedL A tadc ienninalei if in 
execution is completed and all its dependent tasks have terminated, or if h it waiting at a tiimlnati aHcroativc and all of its 
dependeot tada have temtmitrdi there are no outstanding entry calls, iti nuutcr has completed executioa, all dependeaX ladu of the 
master have either terminated or are waiting at a terminate altemativc. 

0 Task specificatiao 

talk (type] identifier I b 

entry declaratiow 

(representation clauses] U sssociiling inlcmijXs with eaXry cafis 

end identifier ]; 

0 Task body 

task body identifier b 
declaration 

Wgin 

flatemeiXa 
I ci cep Uon 

exceptioa handlen) 
mdidertifier, 

0 Entry declaratiana 

Rendezvous: matching accept slatemeads 

Associated with each eoby a task is a queue where all newly arriving enby calb ne nserted and accepted by the 
fade in FIFO order. 

tbbyaivial; O aynefafoaization 

tatty tel(T: In duritiaa); 
entry read(C: ont dtandtr); 

entry tequeal(ID)(D; M out date); OfiunilyofenlrMr, ID is discrete type: nyFIltST..IDlAST 

accept aipiai; 

accept iel(T: In duratkm) do 
period :“T; 

endset; 

accept tequesl(ID)(D; far otal date) do 
-atetemeab 
endrequeat; 


2 





LecWtTbne 


0 Enlty«iBi 


Mlliat tuk blodMd whik wailins ftr te caB to b* imiptod Ml to 4unlmi of nntewaM 

d h l fw<|H oiK4X«X 


(nktaooaditiaal •>]ok«nwlh«l 


(«toa oaodbiooN •> ] okontoviN 


A acloct okinwiiwt OM howo OM of to tokMMqf toat: 
•ooa^.OWflotto; (iMomMh 1 
(DMvt;(fMoaMto] 

Olintotoi 


Process Coordinstioa and Synduonization 

0 Potcadaloaneumateiiaoulmiof 
0 opcntnigfyilompnoeMCi 
0 uoeriiroooaM 

0 MechaiiimitoorSoilyoxeciitmi 
0 procoM lynchwiniTolioB 
0 proccM oaomunicftiaii 

0 Example ofto potentially oaocun«al|iropam''Produoer*CoiiiuiiicrCUit of ProMcns 

0 A producer piooeMproduoetintomatioa tot it oooaumed by a cowumerptooeN. To allow ooQcintBleMCution, butler nam 
be created to be fined by to producer and emptied by to ooMunier. Buffer may be utibouoded or bouadodl 


pnotprofram characlen primerdri«ar 

oaopte aaaoBridyoodo aaaemMcr 

■aiemblar ot^modulaa loader 

0 Ertooeouieohitioa of to bouadedbuffigrproduoer-eotMmier problem 

prtMcdnrc PRODUCER CONSUMER ii 

N. oenetimt INTE^ m^O^I1000; 

1.0; INTEGERr«igcO..N-l r-X 
COUNTER: INTEGER :-0; 

- toied variable to two taaia - mutually exduaive aooeaa is neocenty! 

BUFFER: i^(INTroERraii(cO..N-l) of ITEM; 

- eynebronfaed accem is n eceee ee y ! 

iMk PRODUCER; 
tmkbedly PRODUCER ii 
NEXT?; ITEM; 


PRODUCE(NEXTPX 

whto COUNTER - N iaoR miB; oeM koK 
- syacfaranBaliea: oatmot ptoduoe bams ifbidto k fidi 
BUFFER(I):-NEXITi 

i:-a+i)»oa»^. 

COUNTERCOUNTER +1; 
-wjdwutmiilual ewbi e i e wp rosra m iierro u oo us 

oaMIuoft 

end PRODUCER; 

tmk CONSUMER; 
tmlt bo^ CONSUMER b 
NEXTC:TrEM; 


3 


Lecture Thrae 


«MeCOUNTER*0 


NEXrC;-BUFFER(0)i 

0:-(P«l)weN: 

COUNTERCOUNTER-1; 

--wWmuI naual Mtckiiioa poinn h < 
0(W8UME(NEXTO( 


I if bulfe ii avly 


I CONSUMER; 


I PRODUCER.OONSUMER; 


Hie Critical-Sectioa Problem 

A critical MolMO H a of eodt in tnhicli Um pnoMi BHor b« chtogiBS ocaanoB variiMa. A toWn to pnUea mMl Hliiiy *• 

fefloiMQI ft^jninnMBlK 
O f 

0 prog»ai:TfBeproccMiia ran ii tiin fa in critical aactioB id e»crea«i«tiaB ia | Borw aoa S id B Mi lBaalar^dr critical aadiaBA 
tlwB OBly thoae praocMca that ate not aaecutfag fa faairnaiafadtriecliaBC caB pHtic^ate fa Sm dacMOB ai to wfcicb trill cdv 
its critical tediaB aeset, aad Ihii fcIcGtioB caaaol be poatpcaed fadcSaitdy.* A SObentchab. fX. Ratcnca^ P.& 
Oalvfa;*Oparatfae S)BtaaiCcBoepU*. third aditiaB.AdfisaB>Wetlcy 1990, p. 134 
0 bounded wNutfag 


Two-preccta solBthiBa 
0 Tnt sohition (etraneoui) 


MdBrcAlXXMlTHMlii 
TURN: INTECKR raB|c 0..i :> 0; 

tMkPO; 

tBritbodyNli 


nfelc TURN o 0 leap bbI; end leap; 

- critical sectfaB 
•nWN;-1; 

- renufader sectioB 

end loop; 

CBdPO; 

ta*Pl; 
tn* body PI la 


etMkTURNollaop 
M Cfilictl MdlQB 
TURN;-0; 


cadAIXIORlTHMl: 

Tbe caeciitiaB sequeBoe athicb docs act satisfy pro0eM lequiccaiaal: 

1. TVRNiiifatiallyO 

3. Task P 0 colats sad casts Rs critical saciioa sad sab TURN lei 

3. TaakPQisinlemipiedfailsrMaafadarssclioB 

4. TaakP| aaktsMsdexiats its critical aectiaa, sots TURN la 0,caan and easts its I 

WdMQ 

5. Task P| has to wail ahbouiditaricPQ is fa its KBiafadar saciioa, because TURN is 0 


its itmsfadar section aad edabca to aeSer hs critical 


4 


Lecture Time 


0 SMa«iMlUli<M(«TaMMM) 

FLAO; amgr(INTEOES NiiteO..I)«rBOOLEAN(FAUE. FAtBEk 


tMkFO; 

(MkMirFOli 

W|l« 

Im^ 

FlAa(p):-T1lUE; 

«Wfe FLAQCl) €■< iMft 

«• crilkAl MctioB 


FLAlQCP).-FALSE; 


mtrOi 


iMkPl; 

tMkMFPlb 

iMf 

FLAIQ(1):>T11UE; 

** firilicil Mctiott 
FLAG(1):-FALSE; 
-renaindcriectiM 

•■lloof; 

<MlPl; 


Ml; 

MS ALGORITHMS; 

'IttMBoiA»M M eBMM<it i chiiMylwi4>oiBJS8ait»ViopiBf cftMlaF0MdF| iBlhe»m|MliM«McMleiiMair. 
1. TaUcpQbirtmnptodafltfMigRnfTRUEtoFLACKO) 

1. TaSk?)tt«««n«|«adalUr«Megia|TR\}EloFLACKl) 

3. BoditaUainypraocediKW but Ihq'win cndlMdyio^widun their whRcjiatcmeai* 

0 Ttufd whitiM 

rr«ccSwc ALGORTTHMS b 

TURN: INTEGER rMceO. t ;«0: 

FLAO: amy (INTEGER raii|c 0.. 1) nT BOOLEAN :> (FALSE, FALSE); 

tMkPO; 

tadihoSyFOb 



FLAO(0):-TRUE; 

TURN;-1; 

wWk (FLAG(I) MS TURN - l)iMf Ml; m 4 loof; 

- critical teclica 
FLACKO);-FALSE; 

-iwnainSereectioii 

caSbop; 

mSFO; 

tMkPl; 

riMkhaSrPlb 

FLAO(l);-TRUE; 

TURN;-0; 

wMe (FI^0)aiM TURN-0) Imp Bi*, MS loan 

- critical eectm 
FLAO()):-FALSE; 

-nmanSertectiM 

MSIaapc 

mSPI; 




5 









6 


Lecture Four 


TexdMok 


AfarahMi SifemchMi; jMnM L PMmoo, M« a Oatvia 

X)pmlireSyU*MCoiMM|«s*,Aitfii«>-W«by,*M«4iliaa. l99l.rM3,Ckafl«’5(5.S>S.7) 


References 

O Aa^a.TmmAmm 

OpMUire Syuen*. IV«eiM-Ilaa im. P«t I. Ckreur 3 (116 . 3.2.9.2J) 

0 JitaBMaa 

•CaaaawHSyil—-AiiliS>|WUdArew*<>Op**tiae*y*—^ <nw»b Mt^iaS Di i rtu li<tyUwrt*,ASShi W wity, ISM. 
OiieUn 10*13.14 


CkMls 


0 TaaMlyMMlHligMt9MMarUMciMic*tprdbl«M«ri)fachfeMnte 
0 TopnMBtSn 


0 ToMMlyw 
0 To4aaHipriMiplH«riPC 

0 ToSbeiM 


Content 

0 Proccn Coordaniiaa tad Syndvanizatioa (3 houn) 

0 Clawicil ft obhm i flf SynchwiitMtioa 
0 Laiifua(eCaiMliucltaiidlBt«|ifaoMiCaanuiiic«tioa 
0 lichedttltngCl hour) 

0 Qmocpl* 


1 





LectttfcFoitf 


Cbttskal PraUans of ^rndutM^^ 


O AtentoMta 


PROOUXR.CXMSUMER h 

lnAPftOOUCEIt; 

taAM^nODUCERIi 

NEXTTrrmi; 


nOOUCECNEXTPk 

BUFFEUNarUltNEXTT); 


mtnOOUCSMi 

iHkOONfUMEI; 

t^ba^rOONHAlBlii 

NEXIC:rm« 


BUFFERlNaonXNEXIC): 

OONSUMECNEXTC); 


MiamSUMES; 

iMkBUFFEiUNOii 

«^PUT(X:tanEM)i 
mIi 7<%T(X: Mt ITEM); 

Mi; 

tMfcboirBUFFERlNOli 

N:cMiMlINTEX%llrMf*0..1 :> 1000; 

I. O; INTEGER iMgt 0-N-l :• ); 

COUNTER: INTEfflR:*0; . 

BUFFER: attvCWTO** "*•• •-**■*) •‘^ ”***^ 


«lMi COUNTER <N-> 

•Mcft PUTl(X kirTEM)i* 
BUFFER(I);-X; 


I:-(I>I)aMiN; 

COUNTERCOUNTER + 1; 

«h«OOUNTER>0» 

OET(X:MirTEM)i* 
'X:-niFFER(OX 

cai: 

O r*(0 + l)a»iiN;_ 

COUNTERCOUNTER • I; 


tnilMpt 

orf BUFFERING; 


oM FRODUCER.OOraUMER; 

0 Ait9Xa)hilk«(8.T^iclwTdt*Ai«FX:AT«d«icdSuo»«y-.CACM.N<^^ 

- 


tntUESSAmjrmiBtitntt; 

^*^*‘ftyi^M^^AR£^YIiMTq(F08nTVErMetO)«f MESSAOE.TYFE; 
tm MA1LB0X(SIZ£: NATURAL) b 
'^IMlM COUNT r«m NATURAL: 

■iHiiMi DOCARD.ALU _ 

mIR FUlXMESSAOE: ki ME8SA(»_TYFB); 

cMiy OETCMESSAOE: Ml MEMAOe.TYFEX 


2 



Lecture P<Mtf 


OONTEKn; MESSAOe.AIUtAY(l-CI2Z)( 
CUUtEyr COUNT; NATOtAL:-#; 

PUT D®^ POeinVE 1 ; 
OCT’INOEX: fOemVE:- 1 ; 

MiMADLSQK.nCO: 

wey l4Alf<BAX_ri^QN 
baer MAILBOX h 

‘ --TmUNTf«lwNA‘n»ALIi 


*ial«mCU«RENTjOOUNT: 
wl COUNT: 


ITCMtaa OUCARO.ALLh 

^*^COUNTr-X 
PUT lNDBX:-t: 

OBT" INDEX;* 1: 

MiDISCMU>.ALL; 

«Bh7 PinXMEaSAOE: ii MESSAtajrmi COUNT < M2E fc 

^**^00NTENT8(PUT_INDEX) MEMAta; 

PUT INDbC;-PUr_INDEX**e*IZE + I: 

COUNT:-COUNT ■*•1; 

•Ml PITT; 

Miliy OET(MESSAOE; *■! MESSAOE_TYPE) wbt* COUNT > 0 N 

CONTENTS(OET_INDEX); 

OET INDEX :-OET_INI»XmMI SIZE+ 1: 

COUNT:-COUNT-1; 

•aSOET; 

«ai MAILBOX; 
arfMAILBOX.nCO; 


aUkTEXr.K). MAILBOX.nCO; 
pncfBanTESTIi 
^jpcUNEIi 

LEHQTH: NATURAL :-0; 
DATA:STRINO(1..SOX 


twIfMMre; 

I LINE BUFFER.PKON 

mtrn UASLbOX PK004ESSAOE_TYPE -> UNEX 
UNE BUFFER: LINE BUFFER_PKO.MAlLBOX(SIZE -> MX 


i PRODUCER; 
iMIir PRODUCER b 
UUNE; 

I 

fhrlMl-lOOlMR 

text i O.OET_ LINE(LDATA. t-LENOTHX 
UNB%UFPEILPUT(LX 


•^PRODUCER; 

(^CONSUMER; 

tHhMjrCONBUMERb 

L: LINE; C: NATURAL; 


fbrIlil-IOOiMp _ 

LINE BUFFEROETCLX 

text WJUT UHB(U>ATA(I..ULENQrrH)X 

CI^_BUFFEILCOUNT{LX 

* TOff WJU^JNECaair CMMMM-* * INTEOER1MAOBP3X 

•iM« 


CONSUMER: 


3 






QGG> 


LectuieFour 














Wfre 4.4. SipiiBhi ■ riiB<Wlun vMlaMe 


Who will be btodccd alter the SIGNAL opentiaa? 

© iignalliiig prooeii: iignailim ptoceti will be put at ttie bead of (he monitor wail queue U mooilor data nut be in a ooiMateit 
Hate before a SIGNAL ia ewculed 

© signalled |irooeH:traiiiftr the tignalledproceaa from the cooditioo variable queue on which it iawaiims to the kadofthe 
queue of prooeaMs wailinf to eolcr the mooiiar 

0 Path Eiqiieaiiaiit 

© Menage Passing Mechatnann 
© Asynchraaoui 

© Reoeiviiiglm "anyone* 

© Requeet and reply prinatiun 
© Multiple ports per pro ce n 
© bputpoittiauqpiit parte and efaanneif 
©Giabalpoin 
O Broadcast and nuiKkan 
© Message forwarding 
© Sy n ch r onous 
© Occam channsi 
© Linda abstraclian 

Scheduling Concqitt 

mikiproftamming • maximiM CPU tdilgnion 

throughput •amouatofwotfc accomplished m a gjven time hderval 

enter the system U job queue (on mam smtage awaibag aOocatioa of main memory) U eater die onin memory U 

toady queue O fuming request of IA) U device queue 


6 











Lecture Four 


tmfmrmtm (MQijantlal) MWMitioii 



CPU I I CPU I I CPU I I I bu| p i CPO I I 

0 idh 0 idh 0 1 idb 1 iOt 1 


rurallal Mnoutlan 


II I I I I • I I 



Figure 45. BeuefltiarikeparallciexccBllM 

Select proceae* from vihous scheduling queues 
0 loog-tenn scheduler (job sdieduler) • may not exisi 
Ml queue is on the mats storage device 

Chooses a amall subset of jobs sutaoutted and leis them into (he lystem 

Creates prooesass 

Assign* some lesouroes 

Requiteanerts: executes leas frequently 

Gontrob the degree of muttqxogrammmg (if stable same tale of creation and deieiiao) 
good process mix (I/CVbound and CFU-bound) 

0 medium4erm scheduler 
Swapping 

Paili^ executed queue • secondary memory 
Requiremeatt: improve the process mix 

reason • cha^ of nmnory lequircnieant 
0 shortterm scheduler (CPU scheduler) 

CPU scheduler manages ready cpieue 
When CPU scheduling takes places? 

0 running state fr waiting state 

Ex. I/O request, wait for terminatioo of the child process 
process is Uodced U another should be selected 
0 naming state # ready state 

Ex. inlerrupt (timeout..^) 

afrer OS services (intcin^ routine^...) finish their job U another process (possibly the same) 
should be selected for executioa 
0 waiting state 9 ready stale 

Ex. oomplelion of I/O 
0 tunniiig slate * complete state 
Frooese oensieu of a cycle of CPU execution and I/O wait 
0 CPUhoundprooeas 
0 I/Oboundprooees 
Functionalily 

1. Choose a process for execution from ready queue 

2. Can dispUcher to do the physical assignment of the job to the processor 
ready queue (main memory) 

assigns processor to a process: which, whm and fer how long? 

RequirmnenlK executes very often U must be very last 

iSstiUicaonCPmairst.tAOJairWcyelemaybeMipMtMemMAffemgMi.Ipwitlini • 

oqieclaticot: a very large number of vety ftMit CPU-buniB 

trigger • change of proceae stale 

Schemes: nonqireemplive sdieduling 

trigger ruiaang to waiting state 
temwistioH 


7 










Lecture Four 


awahitd m amtOm, wwiph, tuy lo inylwiiwi. ly k$ rmwirtli far Iteinaii 
iy U W M (««. d«t ib» i» iyilMii«)whwiBMMlw pwwl aoiMiha*»kMnddMwil 


pncmplive ichaduling 

lri|f*r nnineiofMdyuxtMicmi^taMiiiM) 
waiUaete ready aWe (cnmpliticii of VO) 
citniiiMHitfai»aybadniifadiBdiiiecaappro|»Mladiciiieo—di 

ooatMtfwiicIi 

aavi^ Iho «Ma of *0 old procaM 
loadn« die lavad aiala ibr Ika nov pracaai 
coateat-owilGh taoM (• pin o««A^ d^pMdi OB 
hardMnraaoppart 

OMBNiy ipaad 
auBbaraffagiaun 
tcgialeraab 
aoftMmauppoil 

apacial innioiioa lo loadiMoi* all lagiilan 
phyiaeafly fTw ooadol lo dia aaiactad prooaaa 


awildHageoalart 

a witchiaglo i iaaTi ii o il a 

jumping lo die paopar iocaboo lo italart dw profraa 

cn m p afii o n ctileria 

Qrileria aeledioa defined accoidmg lo die relative imporlanoe of dieae I 
<SPU utilization (<i oftime udien CPU ia boiy ) 

Ohroughpul (nundier of procema per time unit ) 













LecturtFour 


EvihutiMi 


KMnro* L: ^>icuiBC Sy«m^ VoL L Mtt Wi^ 
O tMlyiic evtJualioii 


CSUforite 
CkyMcn vw)fklo«d 


O <«r Ikal woikkMd 


OetonniniAk moMliiif > yndMinaMd MmUoa4 
Quouinc mo4«ning (qucuiBC«il«mk ualyiM) 

O mMiuN dSMOiilMi of M> ad Cru binli 

0 MrivainlM 

0Mrvicefii« 

0 amuUtioo (prai^iimiiiag • aodtl of 1h» ooBipuur lyMcai) 

0 olock - viriablo 

0 dock vohM iacnoMd O lyMen (talc aMdi8ad to nlloci Am ociivite oftfw dovioM, 

pwnooiw pad the ochedulw 
0 Mi«ici of alfaridaB porftnniaM 

0 nodom aunlMr tOMtalor (ftr ovcoli ooooidag to Am fnbobilily diaftoliaM) or tnn 


0i 


AoalyM Am ml ■liMiiaa of cm utilizatioii lakiog Mlo oooouDl Abm ftr OA i 



Lecture Five 


Textbook 

Abraham Silbcndutz, JuMi L. PcUnoB, PtUr B. OalviB 

*OpanlineSyaUmCanGC|ila*, Addboa-Wcalcy.ttiMadiliao, 199l,Part2.Cliaplar4(4.4-4.7),aitf«cr<(<.l *(.2) 

References 

0 Amhtw 8. Tanenbaum 

*Mo4amOperaliiigSyf(ama*,naatie«>Hall, 1992, Part l,aia|iiar2(2.4\Chaetar6(6.1*<.2) 

0 JaaaBacan 

"Conounant Syeant • An Imafratad Apixoach to Operaline Sytfana, Oalabaae, and Dialribiilad SyMaoW*. Addwon-Wcaley, 1993, 
aiaplcr6(6.S-6.tXClHpUr t6(l<.l • 16.9) 

Goals 

0 To analyze aome of the exialineadieduIingaleafiAaa 
0 Toprea^diirereBtevaliialionteGbnkiMa 
0 To tatroduoa the eoiwept of deadlock 

Content 

0 Schedulin(aadOiipaich(3baun) 

0 Scheduling Alcoritfim and Their Evahiatioo 
0 Deadlacki(lhour) 

0 System Meddling 
0 Deadlock Characterisation 


1 




Lecture Five 


Scheduling Algorithms end Their Evahietioo 

A^oriOMiii 

O rwit-C«»M rnt-S«««i(FCFS) 

FITOeuaiM 

® ineoniiV ptooM ii UnlMd aato Um nn ofew mdy VMM 

OcWJiiilloctnJloSMprowitewlwe ofSMiMdyvMM 

Avwtft wuiinetaaM ii kae 

CMnoycIhct Ex.aMCFUeaualpraeMi«iiaMqrM>tMuadpfM(M« 

NaaerMMfdvt 

0 ShaitMt4ab'Finl(SJF) 

0Cril*ri* 

0 prooM wMi MMllMt MX CPU-bunI 
0tk-FCFS 

0 ftovaUy opUMil (mWaan mnft wilting liBM) 



FIgarc M. SJF . OptfMil Algortlfeai 


0n«bkaM 

How MB CPU know gw Iia 0 li of Hu aott CFUeum iolwvil? 

0 WdiiyilenM 

0 jail idMiliilw 

0 Uiw AaiiMsubinHpuadMdo(Mraicw<ilwidip(<Qoc«tinMUiiiitOina»4init-«xceede4«mO 
0pr«dictiaa 

0 Expo o e n tiil avence: • Ot^ (1 • Q)4gi 0 O S O I 

(-•rooenihniocy, Og-piflluWary 
& =0,pisthiilaiyprevaib 
O • 1/3, wiually diilrilMlcd 
O - l.reccoiliiftaiypievaib 
0 Expiiidod formula 

Vi" ®S| * • ®)®Si-i +• + (>• ®)'®s»j+-+(«- of*o 

Og • oonalaal or overall tyitem average 

©Tyje 

0 preempt i ve 


procme ^ in left of the curreatly ewcuUne proceen 

thofteel-nmaBimMtiio-nrW 


0 uo cpree ug mve 
©Exanvle 

tmkSJF SCHEDULERb 

tn^ ADD(X>B;ID; T;OUIlATION); 
e«li 70 ET(X)B:oMlDX 
- rctura the next job to be eaBCUled and driele ft 
cMSJF.SCHEDULEit; 


taekbodpSJF SCHEDULERIi 
tlD; 

PEIUOD:DURATK)N; 


accept ADD(X)B:ID; TJXJRATION) da 
I-.-JOB; 

PERIOD :-T; 

cndAin>, 

INSERTa PERIOD); 


2 














LectufcFive 


HIM wiEMmo 

•MVft OeiTJQft OT« ID} 4* 
SMALLEST(JOB); 

Mi GET; 


Mi S^SCHEDULER; 

p wt tiw OWEintXWaD; TJ)UEAnON)i 

- aid job to *t m; T ■ Em MX GElManl tiaM 
fMMiw SMAIXEETCJDB: Ml 

- JOB it M to iw ii of toijA Em mmBM MX CrUbinl lim Mi toii job « MMi Ami toi Ml; mR 

- SMALLEST oily «bM *■ Ml« Ml oxply 
iMrtiM EMPTY wMmBOCTXAW; 


0Piiofify 

OOrilMto 

piwMi wSB pnonqr 

0«ifPcn 

O SJF • ^pMiol COM p to A 
O AMWi p Hn a : towMMbor * hi|^priari» 

OPriorite 
O iefiMdiXeraally 
OtBMliaiili 
0 ncawy foquitcaMXi 
0 miniMr of opM fikt 
0 avonfi lAMunt/ovengeCPlMiHni 
0 iofiaod cxtcraolly 

0 MportaiiosofEiepnoeH 
0 typo Mi MMoX ^(iindi being paid for conpuUr UM 
0 polkieal md oEier bdon 
0 Prablcai 

lndefiBiloblocluBt(atotvXiM).a l oa dy xteaiiiefbi | blwtort^ fW*^ M M O 
SoiXiaa: 0^1^ • ^aiwliy neraaMgEw priorily of preoaMM 
©Type 

0 pmogilito; priority^ > prioiily,Mag^ 

O MoprotoXliva 
0 Roiiai-Robbi(EIl) 

©Oritaria 

0 lina quaaban (10>100 na) (tinier aal to iatcarapl after one tine quaXun) 

0 raaiy ^uana • dreniar FIFO 
0 average wailing time ■ long 

0 p eribein an cadependiooEica>MofthetinieyaXuai;vtryniiallyanlumOpeo c»M o r abaiing 
0 Problcnn:ConiMiwilcbiag>aohilioo; time quantum At} ooXex>«wiiGh time 
0 Type: praamplivi 
0 MukilcvolQuoua 
©Critoria 

^ -ntr f*—P-f T — r—- — mt ifiTiiT Vetrh irrnrmTa. eyitmi penn mo. 



0OM 

0 crtil^f?eggMia(o. UPbioMd) 

0 tiiMn nbmto iiMato (an. longMinigtiM) 

©QiiiiiXiiUXilifcH 

Mako toafiXe pnate abax partooMMO and iwa op to Emm 

Es. if Ban an n naaea laggX M aach Mi laeaiva IM Xtoa CPU poMar 
Syalaminnil 

0 keep track of bow much CPU tim a naar bn bad fbr ai baa procann aana login and how loiy hM boM log^ M 


3 



Lecture Five 


O eenpMe te MBouil of CPU MdiuMr it MlilM to 
(eyiMnic) 

OconiMit 

idml CPU time uted 
C^tittoetoHM 

0 ran dw pretMt wMi dM lowHl nlio 

O iMcMdt wlMidw mio hto morad tbnvt in dottol earapcdler 
Ejl qfManc pracM in ^wltil dtnger of toiMane in dtodin 

O typw efggoMMn 

ewnqtene 

^ ewnielMduling 

Olotddnnnc 
^ tneeMiM 

tyndnoizaliaa and mtoitl ocdMion not to pick tot nnn praoMt (eontBMn dnn nraeton) 
0 ntMUMUvt tlraetora 

one praottMT tchtdulw 

(uynaielrie trakipracMand) 

heavy tdmhiling toad O mtiUr praocMor 

ovefteaded(b o t U eneck) 

0Coiichition 

mmI arlitAilmg pnligiga 

Scheduling algoridin if ptitinilrlud in feme way, but die parameten can be filled in by the uaer ptocciaei (dynamically, race 7) 


Deadlodc Concept and Characterizadon 


flnile nunber efraaeuccff paitittoMd into acveial lypea eooaiating eft 

? * ^^1**1^ *2^ ^*to> 

DBM IHBlMr Ol pfOOMM 

P-{Pi.Pj. ,Pd) 

0 i«i|iictticaturae(fyalem calif or wait and aignalapeialtont) 

0 uaercaonroa 

0 releaae naturae (ayaiem calla or wait and aignal epcrtliena) 
fcio wc a ado r a ti on yaph 


(flunbccoCidciticil i 







Lecture Five 


O PMdIotfc Onwciwurtwi 

A Ml of frooNMi ■ in • dMdkck atato «flMn «v«y proctM w Um Ml« vMilaiif fer M (vmU ihai CM b* cauMd oiUy by mhUmt 

prooMiiBlfccML 



Flgarc SJ. DninrtiM of ecMBock 


Ncoctttfy oondMow for deadlock: 

0 mutual cxcluiioii(alleaA one rcaourocnua be uiuhanUe) 

0 hoidandwail 
0 oopreemplioa 
0 drcularnak 

SiluatiouaodUrlhiadeadloclnMaiaepiC 0 Ma: 

0 livelock(hMy«ailii>eeaaceadkk«tfMlGauaeverbeoaawtnM) 

0 MatvaiNiQTCoeMitiBdeAHlelypca^peiied) 


5 









Lecture Six 


Textbook 

Abraham SUbcndiaa, JaiHM L Mcnoo, Mar B. Oalvia 

‘X)p««UBf SyMamCanocplf*, AAditaii-Warlay.lliMaditMa, 199I.Piit3.Clia|«ar6(6.3'e.7)a«lMt3,Cht0ar7 

References 

0 Andrew S. TaMohaum 

•MedwnOparmimSyeami*. Praolioo-Hall, l993,Mt l,ClM|itar6(<J-d.6)andCha0ar3(3.l >3J) 

0 laanBaow 

’'Caaramm SyWana • An b(a|raiad Approach to Oparaiinc Syruma. Daiabaat, and Diairibaiad tyaUma*, Addbon-Warfay, IMS, 
Chaplw 6 (6.3 • 6.6X Chipur 3 at - 3.2) 

Goals 

0 ToiattoduoeditfttantlachnieHmftrdaadfeckhandUne 
0 To^nMOl of BMOMiy BMMfBBMfll 

0 To^Muiiap|*o«ch«itoftiyMliiiaaioryfiMii^^ 

Omtent 

0 Deadhickadhour) 

0 Deadlock Handling 

0 Fhytical and Virtual Memory Allocatian (3 houn) 

0 Mentory Managemem 


1 


Lecture Six 








Lecture Scvea 


Todlwak 


AknkMi SdbmctMtt. Imm L Mnoik & OiKm 

*OpmMt SyU«M CoieipM*. «dWaa, 1991, ftit 3. OMflv • 

Refeieiioei 

0 A«*tw8.Tiaifc— 

*MddM Opmta« SyH«W, Miw414 1993. Part I. OMfto 3 (3-3 - )•*) CIm«I« 3 (S.I - S.3) 

O jMBBaeaa 

'^CoaciiatSyUwBa-A« tUin ra m Afewa«h>aQp*aliatS yal —I. r>M il > Ma, ladDirtNlrftiiai—^ iM U m WaJay. 1993, 
aMvHr3(31-)-3) 

Goals 

0 ToiomdttoaoaneipliarvirtBalaMaMrir 

0 TodnGiMaadavieaauMatBMUira|li4tiBlrednol«ycnaapfe«fdevicadriw 

Content 

0 Fliyiical«DdVinBtlMMMiyAllae«iM(2lnin) 

0 Virtual VfaiMiy 
0 Device Maatgemeol (t hour) 


1 


Lecture SevM 


Vutual Menoiy 

O riJinill»aaita««l*eHftTabta 

0 

0 AwadieKwII—y 
0 T^tbubtmm 
0 Pmiieiirii^A^rifcM 
0 

0 Nat«Miri|y4JMAIearite 
0 FTOAleuiliea 
0 SwMriCtaMAI^PfMa 
0 OatkA^griiH 

0 LiMiRictrilyUMdAifKikB 

0 SnifaliiWlJtUiBMAiMm 
0 BiMy^ipaily 
© tedcA^erilii^^ 

0 W«iUi«toMeM 

0 PidiiiM 
0 ABocMtaaflfhiHMi 
0 IMtag 
0 DmMdStVMMra 
0 Se^nenUlkBwilhpagiac 

Device Management 

0 PriDciptcioriOliarewtn 
0 l/OdevioM 
0 Device CoomOMi 
0 DiraciMca«yAooeei(DMA) 

0 Priadplet of VO eelhem 

0 ***** 

0 devioedriven 


tMkPRINTER.DRlVERIi 
eabjr PRDnXL: UNEX 

wetyKEADY; yi l ter tvdylertitci w i e clef 
fbr READY mt et 1«»80»; 
cud PRJMTER.imiVER: 

tMkkodyPRINTER DRIVERb 
tffe STATUS.REOISTER b 

DTIERRUPT ENABLED; BOOLEAN; 

CHAIN.RUNNINO; BOOLEAN; 

fcr STATUS.REOISTERaec 

INTERRUPT WABLED el • RANGE 

-mp INTERRUPT ENABLEDtoUl5efBnl«md(0)ofiloneeelloceledle 
-ot^ of type STATUS REOISTER 
CHAIN.RUNNINO: BOM£AN; 

fcrSTATVS_RECH8TEiraZEHK3; 

- fAetale OM meE (he* IplM per «ert eeiHMi) 

LINE LENGTH: MHiMd:-132; 

■Stypr UNE b STR1N0(1. L1NE LENGTH); 

PRINTER RECHSTERiSTAIUS REGISTER: 
brPRlNm REa8TERwcill6«3FF40«: 

BUFFER: LINE; 

PRINTER BUFFER: CHARACTER; 
fcr PRlNfn.BUFFER we «l<ff3FF43% 

PRINTER REOISTER.INTERRUPT ENABLED:-TRUE; 
PRlNTER_RE(»STERCHAIN_RUWnNOFALSE; 


2 



Lectufe Seven 


acc«ftPMyT(L:LlNE)e* 

BUFFCll:-L; 

wirUNTi 

^■•inUNm.nEOirreiLCHAIN.RUNNINO 

nUNinai IUE0I8TEILCHAIN_RUNN1N0;-TRUE; 

MrfIR 

tor 1 hi t-UNB.LENOTH |M» 

nUNTRR.BUFVER :* BUnFER(IX 

BUITCRa) ASCaLP ar BUFm(D - ASCUT; 

mttmn 

iiImPR1NTSR.R£OISTER.CHAIN_RUNNINO -> 

AiRvlOjOT 

MiMTSS ■P.onTER.CllAlN RUNNWO:-FALSE; 


MiPRannoLDRivERt 

O tovice-iotop«>ita<I/Oionwifi 
0 uMr-ipaoc MftwM 


3 



APPENDIX B 


CS495 SAFETY CRITICAL SOFTWARE ENGINEERING 

WITH ADA 


ADA CLASS REPORT 


Ada Claaa Aaport 

12 August 1993 


ST ATEMEOT QF THE PROBLEM 

Most Department of Defense O^oD) contractors currently use the Ada {nogranuning langnay^, 
primarily because DoD mandates its use. As shown by a recent article in Ada Letters'it u used 
extensive^ outside of the d^mse community : 


Although Ada waa originally dasignad to provida a aingla flaxibla 
yat portabla languaga for raal-tina aodaaddad ayataas to aaat tha 
naada of tha 08 DOD, ita dooiain of application haa axpandad to 
includa aiany othar araaa, auch an larga-acala information ayataaia, 
diatributad ayataaa, aciantifie coiaputation, and ayataaa 
programBing. Furtharmora, ita uaar baaa haa axpand^ to includa 
all major dafanaa aganciaa of tha fteatarn world, tha whola of tha 
aaroapaca comnunity and increaaingly many araaa in civil and 
private aactora auch aa talaconmunicationa, proceaa control and 
monitoring ayatama. Indaad, tha axpanaion in tha civil aactor ia 
auch that civil applicationa now generate the dominant revenuaa of 
many vendora. 


But too few commercial developers use Ada to make H one of the most popular languages. Part 
of the reason for this is that new graduates do not come with a knowledge of Ada. Commerdal 
employers who might be considered prime candidates to use Ada are thus faced with additional 
training time and costs. Worse yet, few in commerdal organizations are familiar with the boiefits 
of using Ada. Even safety-critical applications that need Ada the most are often devdoped by 
practitioners untrained in software engineering prindples^; 


Thm mistakms that were mad* are not unique to this manufacturer 
but are, unfortunately, fairly coonon in other safety-critical 
systems. As Frank Houston of the US Food and Drug Administration 
(FDA) said, *A significant aatount of software for life-critical 
systems comes from small firms, especially in the oiedical device 
industry; firms that fit the profile of those resistant to or 
uninformed of the principles of either system safety or software 
engineering. 

Furthermore, these problems are not listited to the medical 
industry. It is still a common belief that any good engineer can 
build software, regardless of whether he or she is trained in 
state-of-the-art software engineering procedures. 

nT teaches many fordgn-bom students in the Computer Sdence (CS) Department. Because it is 
more difficult for fordgn-bom students to obtain a security clearance, very few obtain jobs with 
firms doing primarily DoD software development. Therefore, the Ada mandate means little or 
nothing to these students. 




APPROA CH T Q A SQUmOM 


To attract foreign-bom students to an Ada class, IIT emphasizes the benefits of using Ada for 
typical application areas. One such area is safety-critical software. IIT offered a CS 495 course in 
the summer 1993 term called, "Safety-Critical Software Engineering >^ith Ada." The 
announcement in Attachment A described some of the benefits of ustpg modem software 
engineering approaches__including the use of Ada_to this ^>plication area. 

The course instructor, Fred Francl, surveyed ti» class at the start of the first class. Attachment B 
presents the results of this survey of what each student hoped to get out of this class. This survey 
shows that all but one of the students surv^ed mentioned Ada as the nuyor attraction of this 
course. This was somewhat surprising because the course announcement (Attachment A) listed 
Object-Orioited (00) techniques as one of the course features. Despite the current popularity of 
OO techniques, only two students in the survey listed them as a course priority. 

The two-credit course covered the first edition of Software Engineering With Ada by Grady 
Booch. Attachment C shows how each chapter was weighted. The course introduced the Ada 
features most widely used in DoD projects, offered industry experience with these features, 
starting in the early eighties and including current experiences. These examples showed how these 
Ada features helped to integrate modem software engineering principles into the product. 

Attachment D presents some of the viewgraphs developed for this course. They were designed to 
emphasize the advantages of the Ada features being taught. Where appropriate, Ada features were 
directly compared to features of other popular languages. 

The strategy in presenting virtually all Ada features was to give the students the sense that Ada is 
a general-purpose language. The instructor reinforced this by using Ada in class problems and 
homework problems to implement solutions to diverse applications. The course also highlighted 
the improvements offered by Ada 9X in writing asynchronous tasks and in supporting 
object-oriented design The instructor included coding examples to help nudce Ada 9X features 
seem more real to the students. 

The tests stressed the Ada language features that bore directly on the needs of safety-critical 
software engineering. The midterm and final exams, which expresses this emphasis, are included 
in Attachments E and F, respectively. 

To obtain a larger enrollment, IIT offered this course over a closed-circuit TV network (ITTV). 
This allowed ITT to tape the course in VHS format. BT is delivering this tape as part of the F inal 
Report material. 



RE SUI^ T& AN P CQNCLUSIQfc[S 


At the end of the Final Exam, the instructor asked if anyone felt his or her goals in taking the 
course were NOT met. Nobody responded, suggesting that the goals had been met reasonably 
well. Several students volunteered after class that they had really enjoyed this course__despite the 
work involved in covering so much material so quickly. 

All indications are that the course did give the students a good sense of the benefits of using Ada 
in safety-critical applications. The payoff will come when they join industry software groups and 
spread the Ada message to their colleagues. 


FOLLOW-UP PLANS 

1. IIT has scheduled this course to be given again in the Spring semester. DT will make another 
video tape, vrith the idea that the second offering of a new course usually goes more 
smoothly than the first. 

2. IIT is offering other courses using Ada, such as an Operatmg Systems course. This is possible 
now that a course that actually teaches the language is available in the curriculum. Ada is the 
teaching language of choice for these courses because of its power and expresriveness. 

3. nT plans to disseminate the improved video tape of this course to instruaors at other 
colleges and universities who are in the process of developing a similar course. 

4. IIT plans to purchase several copies of Ada compilers and Ada tutorials that can be run by 
individual students on PCs. This will allow students in courses that use Ada to learn or 
relearn it at their own pace. 


REFERENCES 

1. John Barnes, "Introducing Ada 9X," ACM Ada Letters, Nov/Dec 1993 

2. Levenson & Tum^, "An Investigation of Tb^ac-25 Acddents," Computer, July 1993. 

F. Houston, "What Do the Simple Folk Do?: Software Safety in the Cottage Industry," IEEE 
Computers in Medicine Conf., 1985. 


3 . 



ATTACHMENT A 
ADA CLASS ANNOUNCEMENT 





CS 49S ^AlCTf-CMTlCAL^OEnVARE ENGINEERING WITH ADA 


Who should enroll? Software students and practitioners with at least one year of programming 

e}q>erience. 

In this course you will learn to: 

* Use Ada, the language being adopted world-wide to inclement the most di£Bcult software 
systems. 

* Use Ada programming features that hdp NASA, the FAA and the military devdop software 
for systons that can't afford surprise bdiavior. 

* Use Ada programming features that help one of the worid's largest telqrhone companies to 
develop systems that work better and cost less. 

* Avoid the three technical problems facing new Ada users. 

* Use Ada 9X with Object Oriented Analysis and Design methods. 

* Double your personal programming productivity_and then double it again with more 
practice. 

* Understand how to change your r^)proach when you are a member of a very large software 
engineering team. 


When: IIT Summer Session, Fridays, 3.10 to 6:50 PM. 

Where: Rice Campus. Also on TV for other locations. 

Credit: Two credit hours. (Discuss with contacts listed below.) 

Text: Grady Booch, Software Engineering With Ada 

Instr: Fred Francl managed real-time, misrion-critical software engineering development for over 
fifteen years. He led several government studies on the effectiveness of Ada for 
this type of software development. He served for three years as a Distinguished 
Reviewer for an Ada Joint Program Office team. Mr. Frand led the Real-Time 
Session of a national Ada conference. He currently consults with the Federal 
Aviation Administration on Ada issues that arise in tte modernization of the U.S. 
Enroute Navigation System. He chairs the Chicago Chapter of the ACM Special 
Interest Group on Ada (SIGAda). 


ATTACHMENT A 



Contacts: 


Dr TzillaEIrad (312)567-5142 CSELRAD@ininna.acc.ut.edu 
Mr.FrcdFrancl (708)627-8098 flfrancI@ajpo.8ei.cinu.edu 


attachment A 






ATTACHMENT B 

ADA CLASS SURVEY RESULTS 







1 

Adt 

2 

Ada 

3 

How Ada fits applications, how it supports 00 

4 

Real-time 00 and Software Engineering principles 

5 

Ada 

6 

Ada and Software Engine^g principles 

7 

^plyiQg Ada to real-world problems 

8 

Ada knowledge 

9 

Ada knowledge 

10 

Rdeam Ada Oeamed from manual 10 years ago) 

11 

Ada 


ATTACHMENT B 

























attachment c 

TEXT CHAPTER WEIGHTING 



Includes lecture nuteriid not in book 


Includes lecture nuiterial not in book 


Espedally 6-step Booch 00 method 


Skip 14.2, 14.3 


Be able to write task specs, to read task bodies 


Skip 17.2,17.3 



Skip 19.3 



To be covered after Final Exam 


To be covered after Final Exam 


To be covered after Final Exam 


A = Almost sure to be in^rtant in the final exam 


F = Definhdy not exam material. For ftuniliarization only. 


ATTACHMENT C 

















































ATTACHMENT D 
SAMPLE VIEW GRAPHS 





ATTACKMBHT B 
MID-TBRM EXAM 



2 July 1993 Mid-tenn Ezan 


Page 1 of2 


APMMSTRIYIA 

Please take this exam with a closed textbook and with a one hour time limit. When complete, ^ve 
to the proctor and leave the classroom. Please r^um one hour after the test start time. 

Record your answers on a sheet of your own paper with your name, *CS49S Md-Term Exam* 
and today's date at the top of the page. If muhipie pages are used, put your name and the page 
munber at the top of each sheet. 

Use the Booch Object-Oriented (00) Development Method to q^cdfy an Ada software 
simulation of an automobile cruise control system. Assume it is to be nm ^ a user__called the 
dHver_who accesses each of the driver controls through the terminal and keyboard. 

PROBLEM APPROACH TO USE 

The first step in tte Booch 00 Development Method, Define the ProUem, is provided on the 
foUovrang page. The final step. Implement Each Object, is not required. Doing the final step_or 
some parts of it_eams extra credit, but only if done well. 

For each step in the Booch 00 Development Method, enter and explain the results of your 
analysis on your test paper. For example, if a Booch 00 Development Method step requires you 
to identify certsun kinds of items, list the items on your test paper and explain your reason for 
choosing them. 

Any code or pseudo-code produced should follow the Ada ^tax rules as much as possible, but 
no points will be deducted for syntax errors. Please use comments to assure that your Ada code 
will be understandable even if the syntax is wrong. 

Your solution will be graded on: 

METHOD (How well the Booch 00 Development Method is followed) 

COMPLEIENESS (Including any exceptions needed for safety) 

CORRECTNESS (>^th respect to the statement of the problem) 

SIMPLICITY (No conq)lexity not required by the problem) 

READABILITY (Of Ada code or Ada pseudo-code produced) 




2 Juiv 1993 Mid-term Eiaai 


Page 2 of2 


STEP 1: DEFINE THE PROBLEM 

A real automobile cruise control system miuntains the speed set by the operatin’ (driver) by 
pressing the accelerator what going up hills and rdeasing it when going down hills. TUs cruise 
control system shall be an abstraction or simulatitm of a real one 

The compiler shall siqtpfy the package Clocks t^ch may be imported: 

package C/ock is 

type Timejrype is private; 
function CurreiUjTime 

return HmeJType; -current clock time to the nearest msec 
function Add_l_Sec^ 

(Curroitjrinie: in TimeJType) 

return TimeJType; -adds one second to Current Jllme 
function TlmerJEjqfind 

(Current_Time; in Timc_Type 
Timer_Sajrime: in TimeJType) 

return Boolean; -True if Current_Time > Timer_Set_Time 

private 

type Time_Type is range O..Long_IntegerTast; 
end Clock; 

The driver shall control the simulation vnth the following inputs: 

1. ON shall display the current speed, randomly change speed each second by a small amount, 

and re^nd to all keys described bdow if the current state is OFF. Othowise it shall do 
nothing. 

2. OFF shall stop displaying the current speed, ignore all keys except the ON key, and erase 

any set spe^ from memory if the current state is ON. Otherwise it shall do nothing. 

3. ACCELERATE shall increase speed at a constant rate each second while hs key is 

depressed. When its key is released the current speed shall be stored in memory as the 
set speed. This speed shall then renuun constant. 

4. shall decrease speed at a constant rate eadi second rutile hs key is d^ressed. When 
its key is released tte curroit q;)eed shall be stored in memory as the se/ qyeed This 
speed shall then remain constant. 

5. BRAKE shall decrease speed at a constant rate ten times that of the COA^ key eadi 

second while its k^ is depressed. When hs key is released the curroit speed diall be 
randomly changed by a small amount eadi second. The xt speed (if ACCELERATE or 
CQ^^Thad previou^ stored h) shall remain in monory. 

6. RESUME shall accelerate at the same rate as the ACCELERATE ker/ or deederate at the 

same rate as the COASTkey until the xt speed is reached. This speed shafl then remain 
constant. 



ATTACHMEHT P 
FINAL EXAM 





Name:_ 

(USE BACK OF PAPER IF YOU NEED MORE ROOM TO ANSWER ANY 
QUESTION) 

1. Assume each member of our class is to write a 100 page paper. If there are no misq^dlings, 
grammatical mistakes, or Victual errors in of the papers, then assume each membtf of the 
class gets $100,000. But if there is even one error in a 0 y of the pi 4 >ers, assume eadi mend>er 
of the class will be killed. 

a. What things would you suggest doing or what things would you suggest obtaining to 
improve the chances for success? 


b. What things would you suggest doing or obtaining if each person had to write an 
error-free 10,000 lines of code portion of a software program instead of a 100 page 
paper? 


c. Assume there is a time linut of two years to finish the class software project. Further 
assume that the class has the usual distribution of software engineering productivity, and 
that the best in the class is ten times as productive as the worst in the class. What wcHild 
you suggest doing to speed up the project to minimize the chances of being late without 
introducing fatal errors_^UteraIly_into the code? 



2. Ada has been called a "large" language. Compared to Pascal it hu many more buth-m 
feature supporting such things as data id>stractkMi, otmcuiTent processii^ and machinn-levd 
operations (such as being able to load a re^ster at a h>o(^c address with a q)ecific 
hexadecimal value.) 

a. When would it be an advantage to use a large language like Ada with these capabilities? 


b. When would you be better off with a smaller language like Pascal? 


3. Assume you work for a company that has standardized on the use of a single language for all 
its projects. This happens because companies often expect this standardization will make it 
easier to transfer en^eers among projects and to reuse code. 

a. What are the added advantages if that single language is Ada? 


b. It is possible to write Ada-like code in another language, but the compiler will not 
enforce things like visibility rules. What are the advantages of designing as if you could 
use Ada and then enforcing needed rules_such as object scope and visibility yourself? 





4. Assume you work for a company that has standardized on a single design method. ‘Hns 
happens because companies oftoi expect this standardization will reduce expoiditures for 
method support tools and/or method training courses. 

a. What are the added advantages if that single design method is Object-Oriented 
Development? 


b. What is the fastest-growing developmoit method today? 


S. A "hacker" can be defined as someone who designs software as quickly as possible, who 
loves to include optimizations, and who thinks a program is good enough if it "woiics" 
for his tests. 

a. What is your definition of a software engineer? 


b. When does a good software engineer add optimizations to the code? 


c. In a large, complex software project, we have learned in this course that Quality if free. 
It is lack of quality that costs money. Explain why tins is true. 



6. The first step in the Booch Object-Oriented (00) DevdofHneiit method it to d^ne the 
problem. 

t. How do you use the problem definition to identify the (Ejects? 


b. How do you use the problem definition to identify the (operations on each object? 


c. How do you represent operations using Ada? 


d. What kind of a diagram is suitable to establish the visibility of eadi ol^ect? 


e. Which Ada language construct is especially suited to establishing the interface for each 
object? 


f Which Ada language construct is espedally siuted to implementing each object? 








7. Ada is better than many traditional languages that were designed to support only procedural 
abstractions (such as could be gotten from a traditional flow chart.) Ada is designed to 
support data abstractions as well as procedural abstractions. 

a. What Ada language construct do you use to express a data abstraction? 


b. If only certain operations nuke sense to be used with this abstraction, how do you show 
this in Ada? 


c. If the data abstraction has internal states (for exanq>le, is the German Shq)herd object 
asleep or awake?) that must be conadered to solve the problem, how do you show this 
in Ada? 


d. What is an encepsuhted type? 


e. How is an encapsulated type shown in Ada? 


f What is a type attributel 


g. If a data abstraction occurs for a numb«’ of different types of object (such as a queue 
that can accept integers, real numbers, character strings, etc.), vAmt Ada language 
construct do you use to avoid rewriting the abstraction for oudi type of object? 






8. Older, traditional languages need to use data dictionaries and set/use taUes (which show 
everywhere a variable value is set or used) to keep track of varices. 

a. What features in Ada_if used properiy__fnake data dictionaries unnecessary? 


b. Colain variables are only used to indicate that abnormal processing must be done, or 
i.iat an error condition Im arisen. What special type does asagn to these variables? 


9. Tasks are used to express concurrent action in Ada. They operate synchronously using a 
mechanism called the rendezvous. 

a. What information about a task can you find in the task specification? 


b. How does an operatmg system decide which task should run? 


c. How do you show asynchronous concurrent action (for example, a mailbox) using Ada 
tasks? 




