

WL-TR-91-1039 


AD-A236 684 

■iiiiiin 







€ \ 


^ J . \j ■) 


■ ZjJ I 






ADA COMPILER EVALUATION CAPABILITY 

Version Description Document, Release 2.0 

Thomas Leavitt 
Kermit Terrell 

Boeing Military Airplanes 
Post Office Box 7730 
Wichita KS 



May 1991 


Interim Report 



Approved for public release; distribution unlimited. 


AVIONICS DIRECTORATE . 

WRIGHT LABORATORY * 

AIR FORCE SYSTEMS COMMAND 

WRIGHT-PATTERSON AIR FORCE BASE, OHIO 45433-6543 

t> 4 109 


91-01209 




4 








REPORT DOCUMENTATION PAGE 


Form Approved 
0MB No 0704-0188 



4. TiTLf: 4N0 SoSTI'Vi t 


f 5 ‘ UNDiNG NUMBf^S 


Ada Compiler Evaluation Capability 
Version Description Document, Release 2.0 


Thomas Leavitt 
Kermit Terrell 


C-F33615-86-C-1059 

PE-63756D 

PR-2853 

TA-01 

WU-03 


' v ■■■■.' i).-;r OJ’V'' ' 4 • Tm ' ICN 

^ ■•i r f"' : S . 5 ' f-- 

Boeing Military Airplanes 
Post Office Box 7730 
Wichita KS 


Raymond Szymanski (513) 255-3947 
Avionics Directorate (WL/AAAF) 

Wright Laboratory 

Wrlght-Patterson, AFB, Oh 45433-6543 


WL-TR-91-1039 


Approved for Public Release; Distribution is unlimited 



The Ada Compiler Evaluation Capability (ACEC) is a set of over 1500 performance 
and usability tests used to assess the quality of Ada compilers. The ACEC also 
provides statistical analysis tools to assist in analyzing the results generated 
by the ACEC. The ACEC is documented through three major documents; the ACEC 
Reader's Guide, the ACEC User's Guide and the ACEC Version Description Document. 

This document, the ACEC Version Description Document, records data pertinent to 
the status and usage of the ACEC. For each test, this document a) provides a 
terse description, b) identifies a source file, and c) identifies primary, 
secondary and incidental purposes. 



Ada, Compiler, Evaluation, ACEC j_ 286 

Metrics, Evaluation & Validation Project j 



Unclass. 


Un 


Un 


DTIC users 
















NOTICE 


When Government drawings* specifications* or other data are used for 
any purpose other than in connection with a definitely Government-related 
procurement, the United States Government Incurs no responsibility or any 
obligation whatsoever. The fact that the government may have formulated or 
in any way supplied the said drawings* specifications, or other data, is not 
to be regarded by implication, or otherwise In any manner construed, as 
licensing the holder, or any other person or corporation; or as conveying 
any rights or permission to manufacture, use, or sell any patented Invention 
that may in any way be related thereto. 


This report is releasable to the National Technical Information Service 
(NTIS). At NTIS, it will be available to the general public. Including 
foreign nations. 


This technical report has been reviewed and Is approved for publica¬ 
tion. 

/ 99 / 

Date 


FOR THE COMMANDER 

CHARLES H. KRULGLR, JR 

Ducrtor 

Syst'-:n Avionk;s Division 


8 m 

Date 



JAYMOND SZYMANS 
Project Engineer" 




If your address has changed, if you wish to be removed from our mailing 
list, or If the addressee Is no longer employed by your organization please 
notify WL/AAAF , WPAFB, OH 45433 - 6543 to help us maintain a current 
mailing list. 


Copies of this report should not be returned unless return Is required by 
security considerations, contractual obligations, or notice on a specific 
document. 



FSCM NO. 


82918 


THIS DOCUMENT IS: 

CONTROLLED BY SOFTWARE AND LANGUAGES 75380 

AL\ R/^iS»ONS TO THIS DOCUMENT SHALL BE APPROVED 
BY THt ABOVE ORGANIZATION PRIOR TO RELEASE 

PREPARED UNDER E) CONTRACT NO. F33615-86-C-1059 

□ IR&D 

□ OTHER 

PREPARED ON FILED UNDER 

DOCUMENT NO. D500-12472-1 MODEL 

TITLE Ada COMPILER EVALUATION CAPABILITY (ACEC) 

VERSION DESCRIPTION DOCUMENT 

RELEASE 2.0 


ORIGINAL RELEASE DATE May 4, 1990 
ISSUE NO. TO 


DATE 


A^S^piTIQ^^L LIMIT^TI^SINS IMPOSED ON^?4lS DOCUMENT 
WICt>BE FOUND ON A^IEPAftATE LIMITATIONS SHFET. 


PREPARED BY ^-- 

CHECKED BY 

(2yiie Leastman 

75380 

75380 


SUPERVISED BY^ 

Sam Ashb^ ^ ^ J 

APPROVED BY 

E. T. Startzman ^ 

75380 

75380 


SIGNATURE 

ORGN 

DATE 





LIMITATIONS 


This document is controlled by the Boeing Military Airplanes (BMA) Software and Languages 
Organization. All revisions to this document shall be approved by the above organization prior 
to release. 


2 







ABSTRACT 


This document identifies and describes Version 2 of the Ada Compiler Evaluation Capability 
(ACEC). The Version Description Document (VDD) records data pertinent to the status and 
usage of the ACEC Software Product. 


3 




ACEC 

Version Description Document (VDD) 


Contents 

1 SCOPE 


1.1 

IDENTIFICATION 

1.2 

PURPOSE . . . . 

1.3 

INTRODUCTION 


5 

5 

5 

5 


2 REFERENCED DOCUMENTS 7 

2.1 GOVERNMENT DOCUMENTS . 7 

2.2 NON-GOVERNMENT DOCUMENTS. 7 

3 VERSION DESCRIPTION 8 

3.1 INVENTORY OF MATERIALS RELEASED. 8 

3.2 INVENTORY OF CSCI CONTENTS. 8 

3.3 ADAPTATION DATA. 8 

3.4 INTERFACE COMPATIBILITY. 8 

3.5 BIBLIOGRAPHY OF REFERENCE DOCUMENTS. 9 

3.6 INSTALLATION INSTRUCTIONS. 9 

3.7 POSSIBLE PROBLEMS AND KNOWN ERRORS. 9 

4 NOTES 10 

4.1 ACRONYMS AND ABBREVIATIONS. 10 


5 APPENDICES 11 

5.1 Appendix 1. TEST PROBLEM DESCRIPTIONS. 11 

5.2 Appendix II, TEST PROBLEM TO SOURCE FILE MAP .... 123 

5.3 Appendix III, TAPE DESCRIPTION.1G7 

5.4 Appendix IV, QUARANTINED TEST PROBLEMS.174 

5.5 Appendix V, ACEC KEYWORD INDEX - 1.190 

5.6 Appendix VI, ACEC KEYWORD INDEX - 2.207 

5.7 Appendix VII, SYSTEM DEPENDENT TEST PROBLEMS . . . 270 

5.8 Appendix VIII, OPTIMIZATION TECHNIQUES.273 

5.9 Appendix IX, WITHDRAWN TEST PROBLEMS .283 


4 
























1 SCOPE 

1.1 IDENTIFICATION 


This Version Description Document (VDD) describes Version 2 of the Software Product of the 
Ada Compiler Evaluation Capability (ACEC) System. 

1.2 PURPOSE 

The purpose of the ACEC is to provide a capability for quantitative evaluation of Ada compi¬ 
lation systems. The ACEC system is a set of software test programs and associated support 
tools and procedures which will determine the performance characteristics of Ada compilation 
systems. This includes the capability to automatically compare the results obtained on differ¬ 
ent Ada compilation systems. Such comparisons will isolate language constructions where one 
optimization has particular problems relative to other compilers tested. The ACEC will test for 
the presence of particular compiler optimizations. 

ACEC software is comprised of the test suite and the support tools. For a list and de¬ 
scription of the tests contained in the test suite, see Section 5.1, ’’Appendix I, Test Problem 
Descriptions.” The support tools consist of: 

• INCLUDE — A tool to perform source text inclusion. It will assist in adapting programs 
to particular targets. 

• FORMAT — A tool to extract the timing and code expansion data which the execution 
of the test suite wrote to standard output in a human readable form. 

• MED_DATA_CONSTRUCTOR — A tool to convert the output from various runs of 
FORMAT (on different systems) into a form usable by the MEDIAN program and the 
SSA program. This format is one of two initialized array aggregates; one which identifies 
each test problem (by name) and gives the execution time for the problem; and one 
which identifies each test problem (by name) and gives the code expansion size for the 
problem. 

• MEDIAN — A tool to compare results of performance tests of various systems. 

• SINGLE SYSTEM ANALYSIS (SSA) — A tool to analyze the results of related sets of 
performance tests from a single system. 

1.3 INTRODUCTION 

This document describes the ACEC Software Product as contained on the release tape. It 
describes the compilation units, programs, test problems, and sample data contained on the 


5 




distribution tape. This document contains several appendices with release dependent informa¬ 
tion, making the Reader's Guide and User's Guide insensitive to releases. See the following 
table for a brief description of each of the appendices included in this document. 


Appendix 

Name 

Contents 

1 

Test Problem Descriptions 

List of test problem names with a brief 
description of each. New or withdrawn 
tests are identified. 

■H 

Test Problem to Source File Map 

List of test problems and the source file 
they are contained in. 

m 

Tape Description 

List of files on the delivery tape 

IV 

Quarantined Test Problems 

Cross reference of test problems 
observed to fail on some systems 

V 

ACEC Keyword Index - 1 

List of primary purposes (with LRM 
references) and their associated 
test problems, as well as secondary, and 
incidental purposes, and comparison tests. 

VI 

ACEC Keyword Index - 2 

List of test problems with their primary 
purposes (which may be for comparison with 
other tests). 

Vll 

System Dependent Test Problems 

List of test problems which exercise 
system dependent features. 

VIII 

Optimization Techniques 

List of optimization techniques and the 
benchmarks designed to test them 

IX 

Withdrawn Test Problems 

List of test problems which have been 
withdrawn 


6 
























2 REFERENCED DOCUMENTS 

The following documents are referenced in this VDD. 


2.1 GOVERNMENT DOCUMENTS 

MIL-STD-1815A Reference Manual for the Ada Programming Language 


2.2 NON-GOVERNMENT DOCUMENTS 

D500-12470-1 Ada Compiler Evaluation Capability (ACEC) 

Technical Operating Report (TOR) 

User's Guide 
RELEASE 2.0 
Boeing Military Airplanes 
P. 0. Box 7730 
Wichita, Kansas 

D500-12471-1 Ada Compiler Evaluation Capability (ACEC) 

Technical Operating Report (TOR) 

Reader's Guide 

RELEASE 2.0 

Boeing Military Airplanes 


7 






3 VERSION DESCRIPTION 


For the second release of the ACEC Software Product, this section contains information on the 
inventory of materials released, the inventory of CSCI contents, the adaptation data (where 
applicable), interface compatibility (where applicable), bibliography of reference documents, 
installation instructions, and possible problems and known errors. 

3.1 INVENTORY OF MATERIALS RELEASED 

The release of the Software Product of the ACEC will be comprised of: 

• the distribution tape, 

• the User’s Guide, 

• the Reader’s Guide, and 

• this VDD. 

3.2 INVENTORY OF CSCI CONTENTS 

The ACEC Software Product product consists of two CSCls; the Operational Software (test 
suite) and the Support Software (support tools). The distribution tape contains the test 
suite and the support tools. For a list of the contents of the test suite, see Section 5.1, 
’’Appendix I, Test Problem Descriptions.” The five support tools are INCLUDE, FORMAT, 
MED DATA CONSTRUCTOR, MEDIAN, and SSA. A brief description of each is found in 
Section 1.2, ” PURPOSE” of this document. For more detailed information, refer to the User’s 
Guide, Sections; ’’USING INCLUDE”, ’’PREPARING THE DATA”, ’’RUNNING MEDIAN”, 
and ”SSA”. 

Refer to Section 5.3, "Appendix III, TAPE DESCRIPTION” for a listing of the files on the 
distribution tape. 

3.3 ADAPTATION DATA 

The ACEC Software Product has no ”unique-to-site” data. Appendix VII (System Dependent 
Test Problems) identifies all system depedencies contained in the items being released. 

3.4 INTERFACE COMPATIBILITY 

Not applicable. For information on how the test suite and the support tools interface, refer to 
the User’s Guide, Section ’’PREPARING THE DATA”. 


8 




3.5 BIBLIOGRAPHY OF REFERENCE DOCUMENTS 

Refer to Section 2, "REFERENCED DOCUMENTS." 

3.6 INSTALLATION INSTRUCTIONS 

For information detailing how to install and checkout the delivered ACEC Software Product, 
refer to the User’s Guide, Section "INSTALLATION". 

3.7 POSSIBLE PROBLEMS AND KNOWN ERRORS 

Refer to 5.4 Appendix IV, "Quarantined Test Problems.” 


9 





4 NOTES 

This section contains information only and is not contractually binding. 


4.1 ACRONYMS AND ABBREVIATIONS 

ACEC Ada Compiler Evaluation Capability 

BMA Boeing Military Airplanes 

CSCI Computer Software Configuration Item 

LRM Language Reference Manual, specifically 

Reference Manual for the Ada Prograi,,rning 
Language, MIL-STD-1815A 

SSA Single System Analysis 

TOR Technical Operating Report 

VDD Version Description Document 


10 



5 APPENDICES 


5.1 Appendix I, TEST PROBLEM DESCRIPTIONS 

This appendix contains an alphabetical list of test problem names with a brief description of 
each. 


11 




Problem Test Name 

Problem Test Description 

a-Star 

Implementation of an Artificial Intelligence 
programming technique. 

ackerl 

Classical test, Ackermann’s function, suppression of 
pragmas; intensive test of function calling 

acl<er2 

Classical test, Ackermann’s function, no suppression 
intensive test of function calling 

activationl 

Use 'address attribute and procedure calling to 
measure the size of activation record when calling a 
procedure in a separate package. Compare with 
activation2, which calls on an INLINED subprogram 
in the same compilation unit. 

activation2 

Use the 'address attribute to measure the size of the 
activation record of inlined subprogram. Compare with 
activationl, not specified as inline. 

ai-create-delete.kb 

AI application study. Large example program 
using non-numeric processing. Create and Delete KB 

ai create object 

AI application study. Large example program using 
non-numeric processing. Create objects, with different 
degrees of inheritance of attributes from higher 
level conceptual objects. 

aiJoad-kb-fromJile 

AI application study. Large example 
program using non-numeric processing. Loads a 
Knowledge-Base from a file and then deletes it. 

ai modify object 

AI application study. Large example 

program using non-numeric processing. Modify values of 

attributes within objects. 

ai.query 

AI application study. Large example 
program using non-numeric processing. Query 
the relationships between objects. 


Problem Test Name 

Problem Test Description 

aliasl 

This is a problem which appears to be subject to loop 
invariant motion but is not because the object has 
aliases (allocated objected referenced by two 
different) access types. It includes an error check. 

alias2 

This is a problem which appears to be subject to 
common subexpression elimination and invariant motion but is 
not because the object has aliases (allocated object 
referenced by two different) access types. It includes 
an error check. 

aliasS 

This is a problem which appears to be subject to dead 
assignment elimination but is not because the object 
has aliases (allocated object referenced by two 


different) access types. It includes an error check. 

alias4 

This is a problem which appears to be subject to 
folding but is not because the object has aliases (allocated 
object referenced by two different) access types. It 
includes an error check. 

aliasS 

This is a problem which is subject to loop invariant 
motion. 

aliasSx 

This is a problem which has had loop invariant motion 
performed "by hand." 

alias6 

This is a problem which is subject to common 
subexpression elimination. 

alias6x 

This is a version of aliasG where common subexpression 
elimination has been performed “by hand." 

alias/ 

This is a problem which is subject to dead assignment 
elimination. 

alias7x 

This is a version of alias? where the dead assignment 
has been eliminated "by hand." 

alias8 

This is a problem which is subject to folding. 

aliasSx 

This is a version of aliasS folded "by hand." 

aliasQ 

This is a problem which is subject to loop invariant 
motion. 


13 






Problem Test Name 

Problem Test Description 

aliaslO 

This is a problem which is subject to common 
subexpression elimination. 

aliasll 

This is a problem which is subject to dead assignment 
elimination. 

aliasl2 

This is a problem which is subject to folding. 

aliaslS 

This is a problem which appears to be subject to loop 
invariant motion but is not because the object has 
aliases. It includes an error check. 

aliasl4 

This is a problem which appears to be subject to 
common subexpression elimination but is not because the 
object has aliases. It includes an error check. 

aliaslS 

This is a problem which appears to be subject to 
dead assignment elimination but is not because the 
object has aliases. It includes an error check. 

aliasl6 

This is a problem which appears to be subject to 
folding but is not because the object has aliases. It includes 
an error check. 

arti.asum 

Avionics application study example; Angle sum 

arti-atan2 

Avionics application study example, Arctangent 

arti_cos 

Avionics application study example; Cosine 

arti fmod 

Avionics application study example, Float mod 

arti ifpm control 

Avionics application study example; 

get input data, initialize In Flight Performance 

Monitor (IFPM); check rotor check problem; calls 
on IFPM-IO; IFPMJNIT; IFPM.ROTORS; 

artiJfpmJnit 

Avionics application study example; 

initialize In Flight Performance Monitor (IFPM) system 

arti ifpm io 

Avionics application study example 

Inflight Performance Monitor (IFPM), 

I/O operation 

artiJfpm-rotors 

Avionics application study example 

IFPM check rotor performance 


14 



Problem Test Name 

Problem Test Description 

arti.nairini 

Avionics application study example; Initialize 
navigation 

arti.nscni 

Avionics application study example; Initialize data 

for Navigation Prime Data Calculation Routine (NSCNDV) 

arti-nutmini 

Avionics application study example; Initialize 

data for NUTMCON and call it. NUTMCOM is a UTM 

conversion routine. 

arti sin 

Avionics application study example, Sine 

asyncl 

1 

Test of console output and task scheduling. It has 
two tasks: a high priority task which does 100 PUTs 
to the console and a low priority task which 
set a boolean flag if it ever gets control. After 
completion of the high priority tasks, the state of the 
flag will let the system know whether the low priority 
task ever got control. The test problem monitors if 
the low priority task got control: never, sometimes, or 


async2 

Perform task rendezvouses while the system has a 
task waiting on a GET from a console in another task. 

async3 

Perform 10 000 procedure calls another task is 
waiting in a long DELAY loop. Need to perform a 
fairly long test problem to permit possible 
overheads from polling to show up. 

async4 

Perform 10 000 procedure calls while another task is 
waiting on a terminal GET. Need to perform a 
fairly long test problem to permit possible 
overheads from polling to show up. 


15 





Problem Test Name 

Problem Test Description 

asyncS 

Test of asynchronous I/O. It has two tasks: a high 
priority task which does 1000 READs from direct file 
and a low priority task which set a boolean flag if 
it ever gets control. After completion of the high 
priority task, the state of the flag will let the 
system know whether the low priority task ever got 
control. The test problem monitors if the low 
priority task got control: never, sometimes, or 
always. 

auto 

Classical test, from the Computer Family Architecture 
(CFA) study; autocorrelation program 

avLO 

An AVL tree, named after (Adelson-Velskii and Landis) 
is a balanced tree supporting both keyed and 
positional records in a random order and delete them 
in reverse insertion order. Tree size is 100 records. 

avi 1 

An AVL tree. This problem inserts records in 

ascending key order and deletes them in descending key order. 

Tree size is 100 records. 

avl_2 

An AVL tree test, it attempts to insert a duplicate 
for each key (which should fail). Tree size is 100 
records. 

avI 3 

An AVL tree, this problem searches for each record 
by key. It will fail if the records are not found. 

Tree size is 100 records. 

avl-4 

An AVL tree, this problem searches for each record 
by position. It will fail if the proper record is not 
found. Tree size is 100 records. 

avi 5 

An AVL tree test, this problem searches for keys not 
present in tree but close to contained values. It 
will fail if the records are found. Tree size is 100 
records. 


16 




Problem Test Name 

Problem Test Description 

avi 6 

An AVL tree, named after (Adelson-Velskii and Landis) 
is a balanced tree supporting both keyed and 
positional records in a random order and delete them 
in reverse insertion order. Tree size is 1 000 
records. 

avl.7 

An AVL tree, This problem inserts records in 

ascending key order and deletes them in descending key order. 


Tree size is 1-000 records. 

avL8 

An AVL tree test, it attempts to insert a duplicate 
for each key (which should fail). Tree size is 

1 000 records. 

avI 9 1 

1 

An AVL tree, this problem searches for each record 
by key. It will fail if the records are not found. 

Tree size is 1.000 records. 

avLlO 

An AVL tree, this problem searches for each record 
by position. It will fail if the proper record is not 
found. Tree size is 1 000 records. 

avi 11 

An AVL tree test, this problem searches for keys not 
present in tree but close to contained values. It 
will fail if the records are not found. Tree size is 


1-000 records. 

bmt 

Classical test, from CFA study - boolean matrix 
transpose heavy use of 2-D array references 

bsortl 

Classical test, sort program, variant of quicksort 
which exploits partially sorted sequences. This 
sequence is not sorted. 

bsort2 

Classical test, sort program, variant of quicksort 
which exploits partially sorted sequences. This 
sequence is sorted. 


17 


Problem Test Name 

Problem Test Description 

catl 

LRM requires that assignment not modify the left hand 
side if the expression on the right hand side will 
raise an exception. In general, a compiler can comply 
with this requirement by copying intermediate results of 
catenation operators to a temporary copy and moving it 
into the left hand side after verifying that no 
exceptions were raised. In some cases, an optimizing 
compiler will be able to verify at compile time that 
no exceptions can be raised and can generate faster 
code by copying directly into the left hand variable 
without using a temporary. This set of problems 
will explore options in this areas. CATl can be 
easily verified not to raise length errors. 

cat2 

Version of catl which will require runtime length check 

cat3 

Version of catl which will raise CONSTRAINT-ERROR 

ciol 

Test performance of console output. Test problem 
redisplays the same string to permit ACEC user to 
observe if the system has an optimizing screen manager 
which omits transmitting characters which do not 
change 

cio2 

Test performance of console output. Test problem 
displays string with different characters in each 
position, forcing an explicit transmission of each 
character. 

cio3 

Test performance of console output. Test problem 
displays string followed by display of a blank string. 

Many terminals have control commands which permit 
the efficient deletion (blanking) of an entire line. 




Problem Test Name 

Problem Test Description 

cio4 

Test performance of console output. Test problem 
displays string followed by a display of a string with 
every other character changed. Some sequence of 
terminal commands might include positioning command 
to move cursor over each unchanged character, but the 
time to process these commands in this example can 
easily be larger than a simple delete and transmission 
of entire string. This should not be slower than cio2 

cio5 

Test performance of console output. Test problem 
changes one character in the display string from the 
prior line. Some sequence of terminal commands can 
move one cursor position instruction, a delete, and 
an insert, which can be much faster than a general 
redisplay where every character must be transmitted. 

cio6 

Test performance of console output. Test problem 
inserts 6 characters in the middle of a display and 
deletes 6 at the end of the display. Some terminals 
can perform this update with a few commands. 

cio7 

Test performance of console output. Test problem 
deletes 6 characters in the middle of a display 
string. Some terminals can perform this update with 
one or two commands (position and delete). 

cio8 

! 

Test performance of console output. Test problem 
deletes 50 characters from tail of a display string. 

Some terminals can perform this update with one or two 
commands (position and delete). 

cio9 

Test performance of console output. Test problem adds 

50 characters to the tail of a 20 character display 
string. Some terminals can perform this update with 
without transmitting each leading character. 





Problem Test Name 

Problem Test Description 

ciolO 

Test performance of console output. Test problem 
replaces string with 70 non blank characters 
with one non-blank at position 60. Some terminals can 
perform this update quicker by blanking line, 
positioning cursor, and inserting one character than 
by transmitting all the (blank) characters. 

cioll 

Test performance of console output. Test problem 
replaces string with 70 non blank characters 
with first 20 characters blank. 

ciol2 

Test performance of console output. Test problem 
replaces string with 70 non blank characters 
with first 20 characters different. 

ciol3 

Test performance of console output. Test problem 
replaces string with 2 character string with another 

2 character string. 

ciol4 

Test performance of console output. Test problem 
replaces string with 60 blanks and an X to all blank 
string. 

ciqsort 

Classical test, quicksort, integer array, no suppression 

claimOl 

Test function returning a discriminated record which 
contains variable sized components. This might 
expose runtime systems which allocate and not 
reclaim the space. 

claim02 

recursive function returning an unconstrained 

STRING type. This might expose runtime systems 
which allocate and not reclaim the space. 

claimOS 

i 

Test function returning a discriminated record which 
contains one variable sized component. This might 
expose runtime systems which allocate and not 
reclaim the space. 




Problem Test Name 

Problem Test Description 

claim04 

Test function returning a discriminated record which 
contains multiple discriminated records. This might 
expose runtime systems which allocate and not 
reclaim the space. 

c(aim05 

Test function returns a "large" (a 1000 character 
array) fixed size type. 

This might expose runtime systems which allocate 
and not reclaim the space. 

claim06 

Test function returns a "small” (a 20 character 
array) fixed size type. 

This might expose runtime systems which allocate 
and not reclaim the space. 

claimO? 

Procedure which declares an unconstrained type as 
a private type within a nested generic package. 

This might allocate and not reclaim storage. 

claimOS 

Package with an unconstrained array type (STRING) 
as as a private type within a generic package. 

Actual formal parameter instantiates with length 8. 

This might allocate and not reclaim storage. 

claim09 

Use a GOTO to exit a nested FOR loop. This might 
implicitly allocate space which is not reclaimed. 

claimlO 

Use a GOTO to exit from nested DECLARE blocks. This 
might implicitly allocate space which is not 
reclaimed. 

claimll 

Raise on exception to exit from a nested FOR loop. 

This might implicitly allocate space which is not 
reclaimed. 

claiml2 

Raise an exception to exit from nested DECLARE 
blocks. This might implicitly allocate space which 
is not reclaimed. 








Problem Test Name 

- 1 

Problem Test Description 

claimlS 

Raise an exception to exit from nested DECLARE 
blocks where the blocks have exception handlers. 

This might implicitly allocate space which is not 
reclaimed. 

claiml4 

Expression containing two function calls on a 
function with side effects returning an 
unconstrained type. The first time it is called 
it will return a string, the second time it will 
raise a predefined exception by dividing by zero. 

claimlB 

Expression containing two function calls on a 
function with side effects returning an 
unconstrained type. The first time it is called 
it will return a string, the second time it will 
raise a user defined exception. 

claiml6 

Problem declaring nested discriminated objects 
within a nested package. The concern is that the 
system might allocate space and not reclaim it. 

claiml? 

Problem which uses the 'IMAGE attribute. This might 
cause some systems to allocate and not reclaim space. 
100-000 executions per timing loop iteration. 

claimlS 

Boolean operator on arrays requiring temporaries. 

Some systems may allocate and not reclaim space here. 

claimlQ 

Boolean operator on arrays requiring temporaries 
where an exception is raised part way through the 
evaluation. Some systems may allocate and not 
reclaim space here. 

claim20 

Catenation of array slices where temporaries are 
required. Some system may allocate and not reclaim 
space. 

claim21 

Catenation of array slices where temporaries are 
required where an exception will be raised by the 
execution of the problem. Some system may allocate 
and not reclaim space. 



Problem Test. Name 

Problem Test Description 

claim22 

Catenation of array slices where temporaries are 
required to save the results of function calls and 
where an exception will be raised. Some system may 
allocate and not reclaim the space. 

claim23 

Problem performs I/O to and from a string. Some 
systems may allocate and not reclaim the space. 

claim24 

Problem performs I/O to and from a file. Some 
systems may allocate and not reclaim the space. 

claim25 

Problem instantiates enumeration.io multiple times. 
Some systems might allocate and not reclaim space. 

claim26 

Problem which allocates a record with a dynamically 
sized component and explicitly deallocates the 
record. 100 000 executions per Vming loop 
iteration. 

claim27 

Problem which allocates a record with a dynamically 
sized component and implicitly deallocates it. 

100-000 executions per timing loop iteration. 

claim28 

Problem which performs a SELECT with multiple open 
alternatives within a declare block. 

claim29 

Problem which performs a SELECT with multiple open 
alternatives where the SELECT is not within a 
declare or subprogram defining an exception handling 
frame. This is similar to CLAIM28 except that some 
systems might not reclaim space for SELECT 
temporaries until a frame is exited. 

claimSO 

Problem which performs a SELECT with DELAY 
alternatives where no alternative is immediately 
open but where alternative is satisfied before 

DELAY expires. The concern is that the system 

DELAY queue might fill up with dummy entries and 
the space used not be reclaimed. 





Problem Test Name 

Problem Test Description 

claimSl 

Problem which performs a SELECT with DELAY 
alternatives where no alternative is immediately 
open but where alternative is satisfied before 

DELAY expires. The concern is that the system 

DELAY queue might fill up with dummy entries and 
the space used not reclaimed. This is similar to 

CLAIM30 except that the entry call loop does NOT 
contain an exception handling frame. 

claim32 

Problem which performs a timed entry call which 
is not immediately callable. Because of task 
priorities, a DELAY alternative is taken, and 
the lower priority task should then be scheduled 
and become callable. The concern is that the 
system DELAY queue might fill up with dummy entries 
and the space not be reclaimed. 

claim33 

Problem which performs a timed entry call which 
is not immediately callable. Because of task 
priorities, a DELAY alternative is taken, and 
the lower priority task should then be scheduled 
and become callable. The concern is that the 
system DELAY queue might fill up with dummy entries 
and the space not be reclaimed. 

Different from claim32 in that the loop performing 
entry calls is NOT in an exception handling frame. 

claim34 

Create a task which immediately terminates. 

The concern is that the system may allocate space 
for task control blocks and not reclaim it. 

claim35 

Create a task which immediately terminates. 

The concern is that the system may allocate space 
for task control blocks and not reclaim it. 

claim36 

Problem which create a task and aborts it. The 
concern is that the system may allocate space for 
task control blocks and not reclaim it. 






Problem Test Name } Problem Test Description 


claim37 

Problem which create a task and aborts it. The 
concern is that the system may allocate space for 
task control blocks and not reclaim it. This 
differs from claim36 in that the loop repetitively 
creating and aborting tasks does not contain an 
exception handler. 

claim38 

Problem elaborates a declarative region including 
assigning to object in a collection before calling 
on a function which raises an exception before 
leaving the declarative region. 

claim39 

Problem calls on function CLOCK. Some system may 
allocate and not reclaim space. 

claim40 

Test function returning a discriminated record which 
contains variable sized components. This might 
expose runtime systems which allocate and not 
reclaim the space. This is a version of claimOl 
with function specified as INLINE. 

claim41 

recursive function returning an unconstrained 

STRING type. This might expose runtime systems 
which allocate and not reclaim the space. 

This is a version of CLAIM02 
with function specified as INLINE. 

claim42 

Test function returning a discriminated record which 
contains one variable sized component. This might 
expose runtime systems which allocate and not 
reclaim the space. This is a version of claim03 with 
function specified as INLINE. 

claim43 

Test function returning a discriminated record which 
contains multiple discriminated records. This might 
expose runtime systems which allocate and not 
reclaim the space. This is a version of claim04 with 
function specified as INLINE. 





Problem Test Name 

Problem Test Description 

claim44 

Test function returns a "large” (1000 character 
array) fixed size type. This might expose runtime 
systems which allocate and not reclaim the space. 
This is a version of claimOS with function specified 
as INLINE. 

claim45 

Test function returns a ” small” (20 character 
array) fixed size type. This might expose runtime 
systems which allocate and not reclaim the space. 

This is a version of claim06 with function 
specified as INLINE. 

claim46 

Expression containing two function calls on a 
function with side effects returning an 
unconstrained type. The first time it is called 
it will return a string, the second time it will 
raise a predefined exception by dividing by zero. 

This is a version of claiml4 with function specified 
as INLINE. 

claim47 

Expression containing two function calls on a 
function with side effects returning an 
unconstrained type. The first time it is called 
it will return a string, the second time it will 
raise a user defined exception. This is a version 
of claimlS with function specified INLINE. 

common 

Optimization test constructed with many 
common subexpressions 

complex recordOl 

Copy a field in a nested record definition to a simple 
variable. Variable is a packed enumeration type with 
a T’SIZE clause specified. 

complex-record02 

Copy a simple variable to a field in a nested record 
definition. 

complex-record03 

Reference a field in a nested record definition 
in an expression. 





Problem Test Name 

Problem Test Description 

complex record04 

Pass a field in a nested record definition as an 
actual parameter to an IN OUT mode parameter. 

complex-recordOB 

Copy a nested variant record to another record. 

complex-record06 

Compare variant records, one of which is nested 
within another record definition. 

complex_record07 

Copy a field which is itself a record. 

complex.recordOS 

Pass a field which is a record embedded in a higher 
order record definition as an IN mode parameter to 
a subprogram. 

complex-record09 

Pass a field which is a record embedded in a higher 
order record definition as an IN OUT mode parameter 
to a procedure. 

consistent! 

This sequence of tests executes an IF statement which 
evaluates to FALSE, skipping the THEN part. Various 
numbers of statements are included in the THEN part to 
observe if the execution time is constant, as it would 
be if the condition always generated the same code to 
evaluate the condition and branches around the THEN 
clause and then this code always executes in the same 
amount of time. Differences can be caused by length 
of the branch required to skip over the THEN clause, 
or by alignment of the instructions. This problem 
has a simple procedure call in the THEN clause. 

consistent2 

This is one of the CONSISTENT family of problems. It 
has two simple procedure calls in the THEN clause. 

consistentS 

This is one of the CONSISTENT family of problems. It 
has three simple procedure calls in the THEN clause. 

consistent4 

This is one of the CONSISTENT family of problems. It 
has four simple procedure calls in the THEN clause. 

consistentB 

This is one of the CONSISTENT family of problems. It 
has five simple procedure calls in the THEN clause. 

consistent6 

This is one of the CONSISTENT family of problems. It 
has 100 simple procedure calls in the THEN clause. 








Problem Test Name 

Problem Test Description 

consistent? 

This is one of the CONSISTENT family of problems. It 
has a declare block with 100 procedure calls in the 

THEN clause. 

crcO 

Initializes cyclic redundancy check lookup 
tables. Test will fail if unique numbers 
are not generated. 

crcl 

Perform a CRC calculation on a string of length one. 

Test will fail if the values generated for the CRC 
check bytes are not those expected. 

crc2 

Perform a CRC calculation on a string of length 100. 

Test will fail if the values generated for the CRC 
check bytes are not those expected. 

crc3 

Perform a CRC calculation on a string of length 200. 

Test will fail if the values generated for the CRC 
check bytes are not those expected. 

crc4 

Perform a CRC calculation on a string of length 400. 

Test will fail if the values generated for the CRC 
check bytes are not those expected. 

csel 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSEl uses 
local variables with intervening procedure calls. It 
can be validly optimized. 

cse2 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE2 
evaluates the expression once and saves it in a local 
variable. If the time for CSEl and CSE2 are 
comparable, then the system is doing common 
subexpression elimination. 

cse3 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE3 
evaluates the expression without intervening 
subprogram calls. A system might recognize these as 
common but not CSEl. 


Problem Test Name 

Problem Test Description 

cse4 1 

! 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE4 uses 
global variables and is NOT really common. If the 
time for it is equal to CSEl, then common 
subexpressions are NOT recognized across subprogram 
calls. 

cse5 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSEl uses 
local variables with intervening procedure calls. 

The subscript expression (i, i, i) is common and 
references to it can be validly optimized. 

cse6 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE6 
evaluates the expression once and saves it in a local 
variable. If the time for CSE5 and CSE6 are 
comparable, then the system is doing common 
subexpression elimination. 

cse7 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE7 
evaluates the expression without intervening 
subprogram calls. A system might recognize these as 
common but not CSE5. 

cse8 

Set of tests to see if compiler recognized common 
subexpressions across subprogram calls. CSE8 uses 
global variables and is NOT really common. If the 
time for it is equal to CSE5, then common 
subexpressions are NOT recognized across subprogram 
calls. 

cse9 

Common subexpression separated by conditional 
procedure call. Saving and restoring register values is possible 
but may not be profitable. 

cselO 

Common subexpression using global separated by 
conditional procedure call. 


29 





Problem Test Name 

Problem Test Description 

d library 1 

j 

1 

This set of test problems measure package elaboration 
times, in particular library package elaboration time 
for packages which declare objects of non-static sizes. 

This problem contains a declare block defining a type, 
no objects, and a null body. It can be translated into 
a null. 

d-library-2 

This is one of the dJibrary-* family of test 

problems. This problem contains a declare block defining a type, 

no objects, and a body with one procedure call. 

d library 3 

This is one of the d library * family of test 

problems. This problem contains nested package declarations 

defining 4 dynamically sized arrays. Package body 


contains one procedure call. 

dJibrary-5 

This is one of the d.library.* family of test 

problems. A declare block which allocates 4 dynamically sized 

arrays on a heap in a named collection and deallocates 

them via UNCHECKED-DEALLOCATION. The allocation is 

expected to be roughly comparable to the overheads of 

allocating dynamically sized objects in a library 

package. 

d library 6 

This is one of the d library * family of test 

problems. A declare block which allocates 4 dynamically sized 

arrays on a heap in a named collection and reclaims 

space by exiting the block the collection is declared 

in. The allocation is expected to be roughly 

comparable to the overheads of allocating dynamically 

sized objects in a library package. 


30 










Problem Test Name 

Problem Test Description 

d library 7 

This is one of the d library * family of test 

problems. Measurement of time to elaborate 5 library packages 

which allocate 4 dynamically sized arrays (same 4 as 

used in the other problems in this set). The 

measurement of this problem has coarser error bounds 

because it must use a variation of the timing loop 

code since it is not possible to force the system to 

elaborate a library package more than once per program 

execution. 

d-library-8 

This is one of the dJibrary.* family of test 

problems. This problem is a versions of d-library_7 using nested 

packages rather than library packages. It can be much 

faster than d library 7 because a simpler (stack 

based) storage allocation scheme can be used for 

nested packages. 

dead 

Optimization test; constructed so that systems 
which do dead assignment elimination will do well 

delayl 

Language feature test, delay statements 
contending tasks. "DELAY 0.0;” All the DELAY 
problems are given an error code as they will 
be ignored by MEDIAN. DELAY problems do not 
follow the basic ACEC modeling assumption that 
the execution time for a problem is approximately the 
product of a system factor and a problem factor. 

The execution time for a (long) DELAY statement 
should be roughly constant and implementation 
independent - a fast system should not execute a 

DELAY 1.0; faster than one second! If measurements 
are made using CPU time, then the modeling assumption 
would apply, but that is not expected to be the 
primary mode of operations. 

delay2 

Language feature test, delay statements 
contending tasks, delay 0.000001; 


31 









Problem Test Name 

Problem Test Description 

delays 

Language feature test, delay statements 
contending tasks, delay 0.000010; 

delay4 

Language feature test, delay statements 
contending tasks, delay 0.000100; 

delay5 

Language feature test, delay statements 
contending tasks, delay 0.001000; 

delayG 

Language feature test, delay statements 
contending tasks, delay 0.0100000; 

delay? 

Language feature test, delay statements 
contending tasks, delay 0.1000000; 

delays 

Language feature test, delay statements 
no contending tasks, delay 0.000000; 

delayQ 

Language feature test, delay statements 
no contending tasks, delay 0.000001; 

delaylO 

Language feature test, delay statements 


no contending tasks, delay 0.000010; 

delayll 

Language feature test, delay statements 
no contending tasks, delay 0.000100; 

delayl2 

Language feature test, delay statements 
no contending tasks, delay 0.001000; 

delaylS 

Language feature test, delay statements 
no contending tasks, delay 0.010000; 

delay 14 

Language feature test, delay statements 
no contending tasks, delay 0.100000; 

delay.abortl 

Tests whether the target system terminates an abnormal 
task at a DELAY 0.0 statement. If the system does not 
print an execution time error code for this statement, 
the system is properly terminating the aborted tasks 
before the DELAY 0.0 statement finishes. 

delay-abort2 

Test whether a system immediately kill a task which 
is aborted while in the middle of a DELAY or whether 
it waits until the DELAY completes. 






delay zeroO 


One of a set of test problems to determine how a 
system 

treats the interaction of task switching and delay 
statements. In all problems in this set, there are two 
equal priority tasks which invoke a routine CHECKIN, 
passing the identification of the calling task, which 
detects whether there has been a task switch since the 
last time CHECKIN was called. This version implements 
CHECKIN as task entry, updating the task switch counter 
and old task identification within a rendezvous. It 
can detect whether the system is using a time-slice 
or a run-till-blocked task scheduling algorithm. 





Problem Test Name 

Problem Test Description 

delay zerol 

One of a set of test problems to determine how a system 
treats the interaction of task switching and delay 
statements. In all problems in this set, there are the two 
equal priority tasks which invoke a routine CHECKIN, 
passing the identification of the calling task, which 
detects whether there has been a task switch since the 
last time CHECKIN was called. This version implements 
CHECKIN as a procedure, has no DELAY statements between 
between calls on CHECKIN, and assumes that the user has 
requested a time-sliced task scheduling algorithm. 

delay_ 2 ero 2 

One of the DELAY-ZERO family of test problems. This 
version implements CHECKIN as a procedure which 
updates the task switch counter and old task 
identification. This problem requests time-sliced 
task scheduling and inserts a literal DELAY 0.0 between 
calls on CHECKIN. 

delay-zero3 

One of the DELAY-ZERO family of test problems. This 
version implements CHECKIN as a procedure. It requests 
time-sliced task scheduling and inserts a DELAY 


DURATION-ZERO between calls on CHECKIN. 


34 








Problem Test Name 

Problem Test Description 

delay-zero4 

One of the DELAY .ZERO family of test problems. This 
version implements CHECKIN as a procedure. It requests 
run-till-blocked task scheduling and inserts no DELAY 
statement between calls on CHECKIN. 

delay zero5 

One of the DELAY .ZERO family of test problems. This 
version implements CHECKIN as a procedure. It requests 
run-till-blocked task scheduling and inserts a literal 

DELAY 0.0; statement between calls on CHECKIN. 

delay_zero6 

One of the DELAY-ZERO family of test problems. This 
version implements CHECKIN as a procedure. It requests 
run-till-blocked task scheduling and inserts a 

DELAY DURATION-ZERO; statement between calls on CHECKIN. 

delay-zero6x 

One of the DELAY-ZERO family of test problems. This 
version implements CHECKIN as a procedure. It uses 
system default task scheduling and inserts a 

DELAY DURATION ZERO; statement between calls on CHECKIN. 

delay zero? 

One of the DELAY ZERO family of test problems. This 
version executes a DELAY DURATION-ZERO; with one 
other task in the system waiting on the delay queue. 

delay-zeroS 

One of the DELAY-ZERO family of test problems. This 
version executes a DELAY DURATION-ZERO; with two 
other tasks in the system waiting on the delay queue. 


35 
















Problem Test Name 

Problem Test Description 

desl 

The Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Problem 
initializes data structures and calls on DES twice to 
encrypt and then decrypt a message. 

des2 

Data Encryption Standard (DES) algorithm is used as an 
example of a nonnumeric application. Version 2 uses 
unpacked boolean arrays, indexing operations. 

des3 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 3 
moves constant array declarations to global scope; 
uses unpacked boolean arrays, indexing operations. 

des4 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 

4 separates initialization into a separate procedure. 

Uses unpacked boolean arrays, indexing operations. 

This (DES4) includes both initialize and call on the 

DES to encrypt and decrypt a message. 

des4a 

1 

j 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 

4 separates initialization into a separate procedure. 

Uses unpacked boolean arrays, indexing operations. 

This (DES4a) is the initialization procedure by 
itself. 

des5 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 

5 is similar to version 4 using packed arrays. 

DES5a is the setup procedure. 

des5a 

1 

Data Encryption Standard (DES) algorithm. Version 

5 is similar to version 4 using packed arrays. 

DES5a is the setup procedure. 





Problem Test Name | 

Problem Test Description 

des6 

Data Encryption Standard (DES) algorithm is used an 
example of a nonnumeric application. Version 6 uses 
logical operators of unconstrained packed boolean 
array types to set bits. Has separate initialization 
procedure. This problem (DES6) includes initialization 
and two calls on DES, one to encrypt and one to 
decrypt. 

des6a 

Data Encryption Standard (DES) algorithm. Version 6 
uses logical operators of unconstrained packed boolean 
array types to set bits. DES6a is the initialization 
procedure. 

des7 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 

7 uses constrained types. This (DES7) calls on an 
initialization procedure and two calls on DES to 
encrypt and decrypt a message. 

des7a 

Data Encryption Standard (DES) algorithm is used 
as an example of a nonnumeric application. Version 

7 uses constrained types. This (DES7) calls on an 
initialization procedure and two calls on DES to 
encrypt and decrypt a message. 

dhrysl-mod 

Classical test, synthetic benchmark, Dhrystone 
without suppression. 

dhrys2-mod 

Classical test, synthetic benchmark, Dhrystone with 
suppression. 

dhrys3-mod 

Classical test, synthetic benchmark, Dhrystone with 
suppression and PRAGMA OPTIMIZE(SPACE) 



Problem Test Name 

Problem Test Description 

elabl 

These sets of tests examine system performance on 
test problems (compiled without suppression) which 
contain calls on subprograms declared in external 
procedures. They are designed to test if the system 
optimized some (any) of the elaboration checking code 
required to verify that the package body has been 
elaborated before subprograms in it are called. 

Because the calls are in a conditional statement, an 
optimizing compiler cannot move the elaboration check 
code out of the timing loop. This problem calls one 
procedure five times in a row. A good compiler would 
only generate code to perform one test. 

elablO 

Version of elabS which specified suppression of 
predefined constraint checking. 

elab2 

These is one of the elab* set of test problems. This 
problem calls different procedures defined in 
different packages five times in a row. Because the 
calls are in a conditional statement, an optimizing 
compiler cannot move the elaboration check code out of 
the timing loop. Relative to ELABl, this version must 
include 5 separate pieces of checking code. 

elabS 

These is one of the elab* set of test problems. This 
problem calls the same procedure four times in a row 
unconditionally and then tests the condition and calls 
it one more time. An optimizing compiler could move 
the elaboration checking code out of the timing loop. 

elab4 

These is one of the elab* set of test problems. This 
problem conditionally calls on five different 
procedures defined in the same package. Similar to 
ELABi, an optimizing compiler could share the checking 
code for the package body elaboration. 




Problem Test Name 

Problem Test Description 

elabS 

This problem calls one procedure five times in a row 
within a conditional statement. The procedure is in 
a package which has a PRAGMA ELABORATE specified, 
permitting an optimizing compiler to omit checking 
code because the PRAGMA guarantees prior elaboration. 

elab6 

Version of elabl which specified suppression of 
predefined constraint checking. 

elab7 

Version of elab2 which specified suppression of 
predefined constraint checking. 

elabS 

Version of elab3 which specified suppression of 


predefined constraint checking. 

elab9 

Version of elab4 which specified suppression of 
predefined constraint checking. 

enum iol 

Instantiate enumeration io in declare block, is 
amenable to loop invariant motion. 

enum io2 

Instantiate enumeration io in declare block twice, is 
amenable to loop invariant motion and can be shared. 

enumJo3 

Instantiate enumerationJo in declare block twice, is 
amenable to loop invariant motion and can’t be shared. 

enumJo4 

Instantiate floatJo in declare block. Is amenable to 
loop invariant motion. 

enumJob 

Instantiate floatJo twice in declare block. Is 
amenable to loop invariant motion and can be shared. 

enum io6 

Instantiate integer io in declare block. Is 
amenable to loop invariant motion. 

enum io7 

Instantiate integer io twice in a declare block. Is 
amenable to loop invariant motion and can be shared. 

enum_io8 

elaborate enumerationJo in library packages. Not 
sharable. 

enumJo9 

elaborate sharable versions of eniimeration-io in 
library packages 












Problem Test Name 

Problem Test Description 

ew 

This is an example drawn from an Electronic Warfare 
application feasibility study. The design intends to 
perform I/O operations using a coprocessor with shared 
memory (the Z80-FIFO). This was modified for testing 
purposes to ’’build in” a set a message to exercise the 
system. Some of the coding style used in this program 
is rather strange and the system has not been fully 
debugged. Some procedures referenced uninitialized 
variables, and have been modified to avoid this usage 
(or to insure that these procedures are not called 
with the test data. As a compilation test, it uses 
both subunits and packages. The original version was 
not fully debugged, and the test problem constructed 
from it does not exercise all the intended functions of 
the application, because it was not appropriate for 

ACEC team to complete and debug the code. Some of the 
original code was modified (marked by tcl”) to 
permit execution - the original version contained 
several errors which were worked around. 

filterl 

1 

Object oriented design approach to implementing a lag 
filter. This problem declare the filter parameters as 
formal parameters to a generic definition of a filter. 

The generic procedures associated with the filter do 
not pass any explicit parameters. This test problem 
resets the filter history. 


40 



Problem Test Name 

Problem Test Description 

filterli 

Object oriented design approach to implementing a lag 
filter. This problem declare the filter parameters as 
formal parameters to a generic definition of a filter. 

The generic procedures associated with the filter do 
not pass any explicit parameters. This test problem 
resets the filter history - it is an inlined version 
of filterl. 

filter2 

Object oriented design approach to implementing a lag 
filter. This problem calls on a generic instantiation 
of a template encapsulating INPUT, OUTPUT, HISTORY, 
and COEFFICIENT. It advances one time step. 

filter2i 

Object oriented design approach to implementing a lag 
filter. This test problem is a variation of FILTER2 
with pragma inline specified for procedure ADVANCE. 

filters 

Object oriented design approach to implementing a lag 
filter. This problem passes the filter parameters as 
actuals to a non-generic procedure. This test problem 
advances one time step. 

filter4 

Object oriented design approach to implementing a lag 
filter. This test problem advances one time step with 
direct "manual insertion" of source code. 

firthl 

Example of record assignment 

firthlx 

Version of FIRTHl performed with 

component-by-component assignment. A system with reasonable record 
processing should perform FIRTHl and FIRTHIX in comparable times. 

firth2 

Example of record comparison 

firtli2x 

Example of record comparison with standardized 

boolean. Optimizing compilers should perform FIRTH2 faster than 

FIRTH2X. 


41 

















Problem Test Name 

Problem Test Description 

firth2y 

Example record comparison using component-by-component 
operations. Many systems will call on a runtime 
library routine to perform a record comparison. An 
optimizing compiler which performed this comparison 
using inline code will execute FIRTH2Y and FIRTH2 in 
comparable times. 

firths 

Example of record aggregate assignment with one 
component being assigned the same value. 

firthSx 

Component-by-component version of FIRTHS, with 
redundant component assignment eliminated. 

firth4 

Use IN operator which has been observed to do poorly 
on some systems. 

firth4x 

Version of FIRTH4 using relational operators rather 
than IN operator. 

firths 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. The 
set of examples can show whether the system uses 
different linkage conventions where profitable - 
whether there are profitable alternatives depends on 
target machine. 

firthSv 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. 

firthSw 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. Uses a 
local procedure named in a pragma INLINE. 

firthSx 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. 

firthSy 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. 

firthSz 

1 

Example where tailoring subprogram linkage conventions 
can provide significant performance advantages. 


42 





Problem Test Name 

Problem Test Description 

firth6 

Example where constant folding and value propagation 
will have a large payoff. An optimizing compiler 
could make this comparable to 3 simple assignments. 

firthGx 

Example where constant folding and value propagation 
will have a large payoff. Hand optimized version of 
FIRTH6. 

firth? 

Example where constant folding and value propagation 
will have a large payoff. 

firthTx 

Hand optimized version of FIRTH? for comparison. 

foldl 

The FOLDl-4 set of test problems are intended to 
determine whether a compilation system is performing 
loop invariant motion and NOT performing constant 
folding for integers, by comparing the performance of 
a set of test problems which could be folded both in 
contexts where loop invariant motion is possible and 
where it is not. This test problem is ”ii:=100;” which 
has a simple translation independent of folding and/or 
loop invariant motion. 

fold2 

This test problem is ”ii:=l+l+l...;” which is amenable 
to both folding and loop invariant motion. 

folds 

This test problem is a call on a procedure containing 

”ii;=100;” 

fold4 

! 

This test problem calls on a procedure containing 
”ii; = l + l + l...;” which is amenable to folding but not 
loop invariant motion. 





Problem Test Name 

Problem Test Description 

folds 

The FOLD5-8 set of test problems are intended to 
determine whether a compilation system is performing 
loop invariant motion and NOT performing constant 
folding for integers, by comparing the performance of a 
set of test problems which could be folded both in 
contexts where loop invariant motion is possible and 
where it is not. This test problem is ’'xx:=100.0;” 
which has a simple translation independent of folding 
and/or loop invariant motion. 

folds 

This test problem is ”xx:=l.0+1.0+...;” which is 
amenable to both folding and loop invariant motion. 

fold? 

This test problem is a call on a procedure containing 
”xx; = 100.0;” which inhibits both folding and loop 
invariant motion. 

folds 

This test problem calls on a procedure containing 
”xx;=l.0+1.0+...;” which is amenable to folding but not 
loop invariant motion. 

fold .mod 

Optimization test. Constructed so that systems 
which perform folding will do well. 

forward.eulerl 

Adapted from a radar application. Contains 12 trig 
function calls, half of which are duplicates (same 
function, same actual parameters). Compare with 
Forward-Euler2, which saves function results and 
omits half the function calls. 

forward-euler2 

1 

Adapted from a radar application. Compare with 
Forward-Eulerl. This version saves function results 
and omits half the function calls. 

funcexcp 

To measure the time associated with cleaning up the 
stack when an exception is raised during nested function 
calls. 

gamm 

Classical test, emphasizes 1-D array access, simple 

6 digits precision floating point arithmetic. 



Problem Test. Name 

Problem Test Description 

gamm2 

Classical test, emphasizes 1-D array access, simple 
extended precision (9 digit) floating point arithmetic 

heapify 

Classical test, from CFA study, partial sort. 

idioms 

Test constructed so that a system which does a good 
job on common machine idioms will do well. This is 
a property of both compiler and the target machine 
architecture. 

instl 

test of performance of instantiating and using the 
generic package ENUMERATION-IO. 

inst2 

test of performance of instantiating and using the 
generic package ENUMERATION-IO. This problem 
uses a previously instantiated package and does a 

PUT to a string. 

instS 

This problem copies from array of strings to string, 
performing similar operation to INSTl, INST2, and 
INST4. 

inst4 

test of performance of instantiating and using the 
generic package ENUMERATION-IO. This problem 
does a string assignment corresponding to the 

PUT in INSTl AND INST2 from a variable using the 
'image attribute. 

instS 

This problem uses a CASE statement to select a 
simple literal string assignment. 

int-0 

int-1 

Timing of a simple task. No interrupt is raised in 
this test. It is used for purposes of comparison. 
Interrupt test. Time simple interrupt. Raise 
interrupt and test a flag which is set by the 
handler. The interrupt task is initiated from the 
main task. 






Problem Test Name 

Problem Test Description 

int 2 

Task switching. An interrupt enables a task with 
a higher priority than the task which was running 
when the interrupt occurred. After the interrupt has 
been serviced, the higher priority task, not the one 
running when the interrupt occurred, will be 
scheduled. 

int-3 

Timing of a simple interrupt is complicated by 
having several tasks on a wait queue. 

int-4 

There are several runable tasks eligible at all times. 

These tasks have a lower priority that the task 
performing the null timing loop, and should not be 
executed. 

int.5 

An exception is raised within the rendezvous of the 
interrupt entry call. This problem tests for the 
performance impact of raising exceptions inside 
the rendezvous. 

int 6 

Int 6 is identical to the structure of Int 5 without 
raising the exception. It is used to compare the 
time required by exception handling. 

int.7 

lnt-7 tests the response time when an interrupt 
occurs during an interrupt handler. As the interrupt tasks 
have the same priority, this test will also check 
whether an interrupt will override an interrupt 
handler. The LRM is not clear in specifying that 
interrupt tasks must have priorities. It is 
permissible for all interrupts to be treated the 
same and not preempt each other. 

int-8 

lnt-8 tests the response time when an interrupt 
occurs during an interrupt handler, lnt-8 is similar 
to lnt-7 except the second interrupt task has a 
higher priority than the executing interrupt. This 
test will determine whether priorities are 
recognized by the handler. 


46 




Problem Test Name 

Problem Test Description 

int 9 

Int 9 tests the response time when an interrupt 
occurs during an interrupt handler. Int_8 is similar 
to lnt_7 except the second interrupt task has a 
higher priority than the executing interrupt. This 
test will determine whether priorities are 
recognized by the handler. 

invar 

Optimization test. Constructed so that systems which 
do a good job of loop invariant motion will do well. 

ioO 

Language feature test. Text-10, Set.Col on named file. 

iol 

Language feature test. Text.lO, OPEN/CLOSE. 

io2 

Language feature test. Text.lO, Open file, Put 1000 
80-character lines. Close file. Writing 80,000 
bytes will cause most systems to perform several 
physical I/O operations. 

io3 

Language feature test. Text 10, Open file, use Get 
of character to read the 1000 80-character records 
written in io2. Close the file. 

io4 

Language feature test. Text.lO, Open file, use 

Get Line to read the 1000 80-character records 
written in io2, Close the file. 

io5 

Language feature test. Text 10, Open file, use 

Put-Line to write 1000 80-character records. Close the 
file. 

io6 

Language feature test. Text.lO, Open file, use Put to 
write 100 512-bytes records. Close the file. The 
records contain 1 6-byte count field, and 406 bytes of 
blanks. 

io7 

Language feature test. Text.lO, Open file, use 

Get-Line to read the 100 512-byte records written in 
io6. Close the file. 

io8 

Language feature test. Text.lO, access the 
end of file function. 

io9 

Language feature test. Text 10, Reset function. 





Problem Test Name 

Problem Test Description 

iolO 

Language feature test. Text 10, Is Open function. 

ioll 

Language feature test, direct file io. Set Index 
function. 

iol2 

i 

Language feature test, direct file io, Set-Index 
function followed by a READ. This will read from the 
same block so no physical 10 operations are required. 
This block is read once outside the loop to set the 
buffers. 

iol3 

Language feature test, direct file io, Set-Index 
function, followed by a WRITE. This will write to the 


same block each time. 

iol4 

Language feature test, direct file io, OPEN/CLOSE. 

iol5 

Language feature test, direct file io. Call on the 

Index function. 

iol6 

Language feature test. Direct file io; call on Size 
function. 

iol7 

Language feature test, sequential file, OPEN/CLOSE. 

iol8 

Language feature test, sequential file, 

OPEN file, WRITE 1000 80 byte records, CLOSE file. 

iol9 

Language feature test, sequential file, 

OPEN file, READ 1000 80 byte records, CLOSE file 
This reads the file written by iol8. 

io20 

Language feature test, sequential file, 
call on END OF FILE function. 

io21 

Language feature test, sequential file, 

OPEN file, WRITE 100 511 byte records, CLOSE file. 

io22 

Language feature test, sequential file, 

OPEN file, READ 100 80 byte records, CLOSE file. 

This reads the file written in io21. 

io23 

Language feature test, sequential file, 
call on SET-INPUT procedure. 

io24 

Test of PUT to an interactive console. This 
problem PUTs an ASCII carriage return 


48 








Problem Test Name 

Problem Test Description 

io25 

Test of PUT to an interactive console. This problem 

PUTs a string and then an ASCII carriage return 

io26 

Test of PUT to an interactive console. This problem 

PUTs a string and then an ASCII carriage return 

io27 

Test of PUT to an interactive console. This 
problem PUTs an ASCII nul character 

io28 

put(” a” ascii.cr ); to console. 

Rewriting the same line to the console repetitively 
can be optimized by a -^mart screen manager which could 
not send any terminal commands which will not change 
the display. Relative to 1029, this problem performs 
only one call on procedure PUT. 

io29 

Put ”A” ^ ascii.cr to console. Rewriting the same line 
to the console repetitively can be optimized by a 
smart screen manager which could not send any terminal 
commands which will not change the display. 

io30 

Display variable character & ascii.cr. Compare with 

1028 

io 80 20 1 

I/O pattern test problem. The 10 80 20 family of test 
problems considers random file processing. This 
problem performs 1-000 reads from direct file with 100 
records using a 80-20 distribution. Problem will do 
well on systems with buffering or cache since the file 
could fit entirely in memory. 

io 80 20 2 

I/O pattern test problem. Performs 1 000 reads from 
direct file with 1_000 records using a 80-20 
distribution. Problem will do well on systems with 
buffering or cache most of time file could fit in 
memory. 

io 80 20 3 

I/O pattern test problem. Performs 1 000 reads from 
direct file with 10-000 records using a 80-20 
distribution. 



Problem Test Name 

Problem Test Description 

io 80 20 4 

I/O pattern test problem. Performs 1.000 reads from 
direct file with 10-000 records using a 80-20 
distribution, after sorting the requests. Because 
requests are sorted, the sequence of requests will be 
strictly non-decreasing and average distance between 
requests will be small and all the requests to the 
same block will be processed before another block is 
accessed. Comparison with io 80 20 3 will show 
performance effect of sorting batches of transactions. 

io-80-20-5 

I/O pattern test problem. Performs 1-000 reads from 
direct file with 100_000 records. 

io_80-20-6 

I/O pattern test problem. Performs 1-000 reads from 
direct file with 100-000 records, after being sorted. 

io-80-20-7 

I/O pattern test problem. Performs 1-000 sequential 
reads from direct file, resetting after scanning 10 
Mbytes. Because the file is large, the value of a 
small cache is limited. Measurements should 
reflect physical I/O time. 

io-80-20-8 

I/O pattern test problem. Performs 1-000 sequential 
reads from direct file, resetting after scanning 1 
Mbytes. Because the file is large, the value of a 
small cache is limited. Measurements should 
reflect physical I/O time. 

io-80-20-9 

I/O pattern test problem. Performs 1.000 sequential 
reads from direct file, resetting after scanning 10 
Kbytes. Because the file is small, the value r ' a 
small cache is enhanced. 

io-80.20-10 

I/O pattern test problem. Performs 1-000 sequential 
reads from direct file, resetting after scanning 1.000 
bytes. Because the file is small, the value of a 
small cache is enhanced. 


50 






Problem Test Name 

Problem Test Description 

io copyl 

I/O pattern test. The 10 COPY* problems are tests of 
sequential processing. This problem copies a 
sequential file with 500 100-byte records by reading 
one record at a time and writing it. This produces 

1000 I/O operations. 

io copy2 

1 

j 

I/O pattern test, copy sequential file with 500 

100-byte records by reading 100 records into 
a buffer and writing the buffer. This produces 1000 

I/O operations. Could be faster than lO .COPYl if the 
system doesn’t perform any buffering. 

io copyS 

I/O pattern test. Copy direct file with 500 

100-byte records by reading one records into 
a buffer and writing the buffer. This produces 1000 

I/O operations. Compare with sequential file copy 
lO-COPYl. 

io copy4 

I/O pattern test. Copy direct file with 500 

100-byte records by reading 100 records into 
a buffer and writing the buffer. This produces 1000 

I/O operations. Could be faster than IO COPYS if the 
system doesn’t perform any buffering. 

io interl 

I/O pattern test. The 10 INTER* family of test 
problems considers interleaved sequence of simple I/O patterns. 
This test problem alternately reads from two 
sequential files, each of 500 100-byte records. 

io-inter2 

I/O pattern test. This test problem alternately reads 
from a sequential and a direct file of 500 100-byte 
records. 

ioJnterS 

I/O pattern test. This test problem alternately reads 
from a sequential file and then reads and writes to 
one record in a direct file. 


51 















Problem Test Name 

Problem Test Description 

io meml 

I/O pattern test. The 10 MEM* family of test problems 
performs patterns of accessing on an array in memory 
which can be compared to the corresponding file I/O 
patterns. This lest problem references 1000 records 
from an array in ascending order. It corresponds to 
I0.5CAN1. 

io-mem2 

I/O pattern test. This test problem references 1000 
records from an array in descending order. It 
corresponds to 10 SCAN3. 

io mem3 

I/O pattern test. This test problem references 1000 
records from an array in descending order. It 
corresponds to IO_SCAN4. 

io-patternl 

I/O pattern test. The lO.PATTERN* family of tests 
perform simple cyclic patterns of access on a direct 
file. This problem uses the constant pattern to read 

1.000 records - it reads the same record every time. 

A system with buffering will perform well on this. 

io-pattern2 

I/O pattern test. This problem uses a two record 
cycle to read 1.000 records; (rl,r2), (rl,r2), (rl,r2)... 

A system with buffering will perform well on this. 

io-pattern3 

I/O pattern test. This problem uses a five record 
cycle to read 1 000 records: (rl,r2,r3,r4,r5), 
(rl,r2,r3,r3,r5),... 


A system with buffering will perform well on this. 

io_pattern4 

I/O pattern test. This problem uses a ten record 
cycle to read 1.000 records: 

(rl,r2,r3,r4,r5,r6,r7,r8,r9,10), 

(rl,r2,r3,r4,r5,r6,r7,r8,r9,10), ... 

A system with ten buffers can perform well on this. 

io-pattern5 

I/O pattern test. This problem uses a one record 
cycle to write 1.000 records: 
rl, rl, rl, rl, rl .... 

j 

A system with buffers can perform well on this. 


52 





Problem Test. Name Problem Test Description 

io pattern6 I/O pattern test. This problem uses a two record 

cycle to write 1_000 records: 

(rl.r2). (rl.r2). (rl.r2). (rl.r2). (rl.r2). ... 

A system with buffers can perform well on this, 
io pattern? I/O pattern test. This problem uses a five record 

cycle to write 1 000 records: 

(rl,r2,r3,r4,r5), (rl,r2,r3,r4,r5), ... 

A system with buffers can perform well on this. 
io_pattern8 I/O pattern test. This problem uses a ten record 

cycle to write 1 000 records: 

(rl,r2,r3,r4,r5,r6,r7,r8.r9,rl0). 

(rl,r2,r3,r4,r5,r6,r7,r8,r9,rl0), ... 

A system with ten buffers can perform well on this. 
io_recurl I/O pattern test. The lO-RECUR* family of test 

problems are composed of cycles of records drawn from a sequence 
of uniform distributions. This problem selects from 
the sequence (pl-plO, pll-pllO, plll-plOOOO), ... 
where the notation pn-pm implies a uniformly 
distributed record between N and M. This problem 
models the many disc based tree structures, 
io recur2 I/O pattern test. This problem selects from the 

sequence (pl-pIO, pll-pllO), ... 

This problem models that of many disc based tree 
structures when the root is forced to be memory 
resident. Buffers and or caches can aid performance, 
io recur3 I/O pattern test. This problem selects from the 

sequence (pl-pl, pl-plOO) ... (always reads pi) 

This problem models that of many disc based tree 
structures when the root is forced to be memory 
resident. Buffers and or caches can aid performance. 















Problem Test. Name 

Problem Test Description 

io scanl 

I/O test pattern. The IO SCAN* family of test problems 
are simple patterns of access (ascending, descending, 
uniformly random) which are applied to direct files. 

This test problem reads 1000 records in ascending 
order. 

io scan2 

I/O test pattern. This test problem reads 1000 records 
in ascending order with a one millisecond delay 
between reads. The delay can add enough extra time to 
force additional disc revolutions between block reads. 

io scan2x 

I/O test pattern. This test problem reads 1000 records 
in ascending order with a ten millisecond delay 
between reads. The delay can add enough extra time to 
force additional disc revolutions between block reads. 

io-scan3 

I/O test pattern. This test problem reads 1000 records 
in descending order. 

io-scan4 

I/O test pattern. This test problem reads 1000 records 
using a random permutation of the records - every 
record is read. 

io-Scan5 

I/O test pattern. This test problem writes 1000 
records to a direct file in ascending order. 

io-scan6 

I/O test pattern. This test problem writes 1000 
records to a direct file in ascending order with a 

1 millisecond delay between each write. 

io scan? 

I/O test pattern. This test problem writes 1000 
records to a direct file in descending order. 

io scanS 

I/O test pattern. This test problem writes 1000 
records to a direct file using random permutation. 

io-scanll 

I/O test pattern. This test problem writes 1000 
records to a sequential file. Record type is unconstrained 
string, alternating between 50 and 150 bytes. 

io-Scan 12 

I/O test pattern. This test problem reads 1000 records 
from a sequential file. Record type is unconstrained 
string, alternating between 50 and 150 bytes. 









Problem Test Name 

Problem Test Description 

io scanl3 

I/O test pattern. This test problem writes 1000 
variant records (with maximum size 100 characters) in 
ascending order to a direct file. Alternate between 

100 and 7 character records. 

io scanl4 

I/O test pattern. This test problem reads 1000 variant 
records in ascending order from a direct file with 
maximum size of 100 characters. Alternate between 100 
and 7 character records. 

io_scanl5 

I/O test pattern. This test problem reads 1000 variant 
records in random order from a direct file with 
maximum size of 100 characters. Alternate between 100 
and 7 character records. 

io_scanl6 

I/O test pattern. This test problem writ » 1000 
variant records in ascending order to a direct file with maximum 
size 100 characters. Alternate between 100 and 7 
character records. 

io scanl7 

I/O test pattern. This test problem read 1000 variant 
records in ascending order from a direct file with 
maximum size 100 characters. Alternate between 100 and 

7 character records. 

io-scanl8 

I/O test pattern. This test problem reads 1000 variant 
records in random order from a direct file with 
maximum size 100 characters. Alternate between 100 and 

7 character records. 

io-unifl 

I/O pattern test problem. Performs 1-000 reads from 
direct file with 100 records using a uniform 
distribution. Systems with buffers or caches may be 
able to keep entire file in memory. 

io.unif2 

I/O pattern test problem. Performs 1.000 reads from 
direct file with 1.000 records using a uniform 
distribution. 


55 














Problem Test Name 

Problem Test Description 

io unifS 

I/O pattern test problem. Performs 1 000 reads from 
direct file with 10-000 records using a uniform 
distribution. 

io_unif4 

I/O pattern test problem. Performs 1.000 reads from 
direct file with 10 000 records using a uniform 
distribution after sorting the records. 

io unif5 

I/O pattern test problem. Performs 1 000 reads from 
direct file with 100.000 records using uniform 
distribution. 

io-unif6 

I/O pattern test problem. Performs 1.000 reads from 
direct file with 100.000 records using sorted uniform 
distribution. 

iqsort 

Classical test, variant of quicksort on integers. 

kalman 

Application study: Kalman Filter 

For the second release, several uninitialized variables 
have been assigned values which may modify timings 
relative to the first release. This program contain 
dummy routines for I/O operations and may not represent 
optimum coding of a Kalman filter. However, even if 
the calculates associated with the filter computations 
are not correct, as a test problem to exercise an Ada 
compilation system it will be useful for the ACEC. 

kerned 

Classical test, livermore loops. Hydro fragment. 

kernel2 

Classical test, livermore loops. 

Incomplete Cholesky - Conjugate Gradient. 

kernels 

Classical test, livermore loops, inner product. 

kernel4 

Classical test, livermore loops, banded linear 
equations. 

kernels 

Classical test, livermore loops, 
tri-diagonal elimination, below diagonal. 

kernels 

Classical test, livermore loops, general 
recurrence equation. 


56 





Problem Test Name 

Problem Test Description 

kernel? 

Classical test, livermore loops, equation of state 
fragment. 

kernels 

Classical test, livermore loops, A.D.I. (Alternate 
Directions Implicit) integration. 

kernelQ 

Classical test, livermore loops. Integrate predictors. 

kernellO 

Classical test, livermore loops, difference predictors 

kernelll 

Classical test, livermore loops, first sum. 

kernell2 

Classical test, livermore loops, first diff. 

kernellS 

Classical test, livermore loops, 2-D particle-in-cell 
(PIC). 

kernell4 

Classical test, livermore loops, 1-D Particle-in-Cell 
(PIC). 

kernellS 

Classical test, livermore loops. Casual FORTRAN 
development version (recoded in Ada). 

kernell6 

Classical test, livermore loops, Monte Carlo search 
loop. 

kernellS goto 

Classical test, livermore loops, Monte Carlo search 
loop; GOTO version. 

kernell? 

Classical test, livermore loops, implicit conditional 
computation. 

kernellS 

Classical test, livermore loops, 2-D explicit 
hydrodynamic. 

kernellQ 

Classical test, livermore loops, general linear 
recurrence equations. 

kernel 20 

Classical test, livermore loops; Discrete ordinates 
transport, conditional recurrence on xx. 

kernel21 

Classical test, livermore loops, matrix * matrix 
product. 

kernel22 

Classical test, livermore loops-Planckian distribution 

kernel23 

Classical test, livermore loops, 2-D implicit 
hydrodynamics fragment. 

kernel24 

Classical test, livermore loops; Find location of 
first minimum in array. 











Problem Test Name 

Problem Test Description 

label 

Observe the performance of a sequence of label null 
statements. 

loopO 

Classical test, Knuth loop, find max abs of array. 

loopl 

Classical test, Knuth loop, multiple matrix by scalar. 

loop2 

Classical test, Knuth loop, serial search. 

loop3 

Classical test, Knuth loop, array computations. 

loop4a 

Classical test, Knuth loop, initialize array with 

call on pseudo-random number generator. Function is 

in separate package. 

loop4b 

Classical test, Knuth loop, initialize array with 

calls on pseudo-random number generator. Function is 

declared inline in same unit. 

loop4c 

Classical test, Knuth loop; Test written as optimized 
inline code, compare to loop4b. 

loops 

Classical test, Knuth loop, exponentials, array 
references. 

loop6 

Classical test, Knuth loops, inner loop containing 
procedure calls. 

loop? 

Classical test, Knuth loop, squares, sqrt function. 

loopS 

Classical test, Knuth loop, complex number processing. 

loop9 

Classical test, Knuth loop, array manipulation. 

looplO 

Classical test, Knuth loop, conditional testing. 

loopl 1 

Classical test, Knuth loop, from FFT. 

loopl2 

Classical test, Knuth loop, 3-D array processing, 
fairly large basic block. 

loop 13 

Classical test, Knuth loop, binary search. 

loopl4 

Classical test, Knuth loop, arithmetic example. 

looplS 

Classical test, Knuth loop, 2-D array processing. 

looplb 

Classical test, Knuth loop, statistical processing 
call on "erf’ function. 

loopl? 

Classical test, Knuth loop, 1 and 2-D array processing 

lu 

Classical test, LU decomposition (lower-upper matrix 
decomposition), from CFA study. 





Problem Test Name 

Problem Test Description 

mergel 

Classical test, mergesort program run on an unsorted 
array. 

merge2 

Classical test, mergesort program run on sorted array 

neural 

Implementation of an Artificial Intelligence 
programming technique. 

purel 

This test problem could, if Ada functions were required 
to be "pure” (without side effects and always 
returning the same function result when given the same 
inputs) be optimized by folding. Ada functions are not 
required to be pure, and this problem tests that they 
have not been improperly optimized. 

pure2 

This test problem is a version of purel which has been 
hand optimized as if it were pure. 

pure3 

This test problem could, if Ada functions were required 
to be "pure” (without side effects and always 
returning the same function result when given the same 
inputs) be optimized by loop invariant motion. Ada 
functions are not required to be pure, and this 
problem tests that they have not been improperly 
optimized. 

pure4 

This test problem is a hand optimized version of PURE3 
coded as if function were "pure.” 

pure5 

This test problem is a version of PUREl using a function 
which is "pure.” 

pure6 

This test problem is a version of pure5 which has been 
hand optimized. This is a pure version of pure2 





Problem Test Name 

Problem Test Description 

pure? 

This test problem is a version of pure3 which uses a 
pure function. 

pureS 

This test problem is a version of pure4 using a pure 
function. 

puzzle 

Classical test. F. Baskett’s cube placing problem 
solver. 

qsortl 

Classical test; median-of-3 nonrecursive quicksort 
on an unsorted array. 

qsort2 

Classical test; median-of-3 nonrecursive quicksort 
on a sorted array. 

queens mod 

Classical test; Eight queens problem. 

reclaim collection constrained 

Check for reuse of reclaimed space when an ACCESS type 
to a constrained object type is allocated and then 
deallocated in a collection. Determine whether space 
is always, never, or sometimes immediately reused. 

reclaim-collection-unconstrained 

Check for reuse of reclaimed space when an ACCESS type 
to a constrained object type is allocated and then 
deallocated in a collection. Determine whether space 
is always, never, or sometimes immediately reused. 

reclaim-global-heap-constrained 

Check for reuse of reclaimed space when an ACCESS type 
to a constrained object type is allocated and then 
deallocated in global heap. Determine whether space 
is always, never, or sometimes immediately reused. 

reclaim-global-heap-unconstrained 

Check for reuse of reclaimed space when an ACCESS type 
to an unconstrained object type is allocated and then 
deallocated in global heap. Determine whether the 
space is always, never, or sometimes immediately 
reused. 

reed-Solomon-0 

Error Correcting Code example of bit manipulation. 

This problem checks that the decoding of an encoded 
message is the same as the original message. 

reed-solomon.l 

Error Correcting Code example of bit manipulation. 

This problem encodes a message. 


60 


























Problem Test Name 

Problem Test Description 

reed solomon 2 

Error Correcting Code example of bit manipulation. 

This problem decodes an error free codeword 

reed_solomon-3 

Error Correcting Code example of bit manipulation. 

This problem decodes a codeword which requires 
correction. 

reed-Solomon-4 

Error Correcting Code example of bit manipulation. 

This problem decodes a uncorrectablexodeword, and 
raises an exception to indicate this. 

runge 

Classical test, from CFA study. This problem is one 
step of a Runge-Kutta iteration. Runge-Kutta is a 
method of solving differential equations. 

sJibrary.l 

This set of test problems measure package elaboration 
times, in particular library package elaboration time 
for packages which declare objects of non-static sizes. 

This problem contains a declare block defining a type, no 
objects, and a null body. It can be translated into a null. 

sJibrary.2 

This is one of the sJibrary.* family of test problems. 

This problem contains a declare block defining a type, 
no objects, and a body with one procedure call. 

s library 3 

This is one of the s library * family of test problems. 

This problem contains nested package declarations 
defining 4 fixed sized arrays. Package body 
contains one procedure call. 








Problem Test Name 

Problem Test Description 

S-library_5 

This is one of the sJibrary-* family of test problems. 

A declare block which allocates 4 fixed sized 
arrays on a heap in a named collection and deallocates 
them via UNCHECKED DEALLOCATION. The allocation is 
expected to be roughly comparable to the overheads of 
allocating fixed sized objects in a library package. 

sJibrary-6 

This is one of the sJibrary-* family of test problems. 

A declare block which allocates 4 fixed sized 
arrays on a heap in a named collection and reclaims 
space by exiting the block the collection is declared 
in. The allocation is expected to be roughly comparable 
to the overheads of allocating fixed sized 
objects in a library package. 

s library 7 

This is one of the sJibrary-* family of test problems. 
Measurement of time to elaborate 5 library packages 
which allocate 4 fixed sized arrays (same 4 as 
used in the other problems in this set). The 
measurement of this problem has coarser error bounds 
because it must use a variation of the timing loop code 
since it is not possible to force the system to 
elaborate a library package more than once per program 
execution. 


62 




Problem Test Name 

Problem Test Description 

S-library-8 

This is one of the sJibrary.* family of test problems. 

This problem is a versions of sJibrary-7 using nested 
packages rather than library packages. It can be much 
faster than s library 7 because a simpler (stack based) 
storage allocation scheme can be used for nested packages. 

search 

Classical test. Search for a 
substring in a string. 

shelll 

Classical test. Shell sort of an unsorted array. 

shell2 

Classical test. Shell sort of a sorted array. 

sieve 

Classical test. Determine prime number via Sieve of 
Erostaphanes. 

simulate.bmbat 

Example extracted from application study 

simulate-emrpm 

Example extracted from application study 

simulate.hmproto 

Example extracted from application study 

simulate qmpitch 

Example extracted from application study 

simulate rcwfrdet 

Example extracted from application study 

simulate umnav 

Example extracted from application study 

simulate kmdump 

Example extracted from application study 

simulate rmkeying 

Example extracted from application study 

slicel 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slice2 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slices 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slice4 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slice5 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 


63 





Problem Test. Name 

Problem Test Description 

sliceG 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slice? 

Determine efficiency of code for length checks and 
overlaps for slice assignments. 

slices 

Assign component by component to a slice with literals 
so there is no possibility of overlap. 

ssO 

Language feature test, null statement 

ssl 

Assign floating point variable from literal value. 

ss2 

Type conversion in static expression - real(l). 

ss2-mocll 

Type conversion in static expression - real(l). 

ss2-mod2 

Type conversion in static expression - real(l). 

ss3 

Assignment of two floating point variables, library 
scope. 

ss4 

Floating point addition. 

ss5 

Floating point multiplication. 

ss6 

Floating point division. 

ss7 

Integer literal assignment, literal " 1" to library 
scope variable. 

ss8 

Type conversion from floating point literal to integer 

ssS-tnod 

Type conversion from floating point literal to integer 

ss9 

Integer addition. 

sslO 

Integer division. 

ssll 

Library scope integer assignment. 

ssl2 

Integer to float type conversion. 

ssl3 

Float to integer type conversion of scalar variable 
(not a literal as in ss8). 

ssl4 

Test of power function using exp and log function. 

ssl5 

Language feature test, (float) ** 2 which can be 
treated as (float) * (float). 

ssl6 

Language feature test, (float) ** 3 which can be 
treated as (float) * (float) * (float). 

ssl? 

Language feature test, assignment to one dimensional 
array of real. 




Problem Test Name 

Problem Test Description 

ssl8 

Language feature test, assignment to two dimensional 
array of real. 

ssl9 

Language feature test, assignment to three dimensional 
array of real. 

ss20 

Assignment of library scope floating point variable to 
local variable. 

ss21 

Assign float to component of array of records. 

ss22 

Allocation overhead test. Enter a block containing a 
statically bounded one dimensional array of float, 
assign to component of it, and access component to 
ensure liveness. 

ss23 

Allocation overhead test. Enter a block containing a 
statically bounded two dimensional array of float, 
assign to component of it, and access component to 
ensure liveness. 

ss24 

Allocation overhead test. Enter a block containing a 
statically bounded three dimensional array of float, 
assign to component of it, and access component to 
ensure liveness. 

ss25 

Allocation overhead test. Enter a block containing a 
dynamically bounded one dimensional array of float, 
assign to component of it, and access component to 
ensure liveness. 

ss26 

Language feature test, GOTO. 

ss27 

Test of SIN function in math library. 

ss28 

Test of COS function in math library. 

ss29 

Language feature test, floating point "abs". 

ss30 

Language feature test, integer "abs” . 

ss31 

Test of EXP function in math library. 

ss32 

Test of LOG function in math library. 

ss33 

Test of SORT function in math library. 

ss34 

Test of ARCTAN function in math library. 








Problem Test Name 

Problem Test Description 

ss35 

1 

Test of SGN function (on floating point variables) in 
GLOBAL. 

ss36 

Language feature test, simple procedure with no 
parameters; call to library scope procedure - 
body is null. 

ss37 

Language feature test, simple procedure with one IN 

OUT floating point parameters, declared in external library 
unit - body is null. 

ss38 

Language feature test, simple procedure with two IN 

OUT floating point parameters, declared in external library 


unit - body is null. 

ss39 

Language feature test, simple procedure with three IN 

OUT floating point parameters, declared in external 
library unit - body is null. 

ss40 

Language feature test, integer unary minus. 

ss41 

Optimization test for folding of static integer 
expression, "1+1”. 

ss41-mod 

Optimization test for folding of static integer 
expression, ”1+1”. Perform statement in an external 


procedure to inhibit loop invariant optimization 

ss42 

Optimization test for folding of static integer 
expression, ”-l”. 

ss42 mod 

Opti:,.ization test for folding of static integer 
expression, ”-l”. Perform statement in an external 
procedure to inhibit loop invariant optimization 

ss43 

Store zero, call procedure, increment integer. 

ss44 

Optimization test for algebraic simplification ”+0” is 
redundant. 

ss45 

Assign external integer to zero. 

ss46 

Assign external integer to "large” literal. 

ss47 

Optimization test for algebraic simplification, ”*1”. 

ss48 

Optimization test for algebraic simplification, ”/l”. 

ss49 

Optimization test for algebraic simplification, "*0”. 


66 





Problem Test Name 

Problem Test Description 

ss50 

Optimization test for algebraic simplification, 

ss51 

Optimization test. Check for algebraic 
simplification, ”**1". 

ss52 

Test use of "INC” instruction for " + 1”. 

ss53 

Reference to subscripted array of int, no checking. 

ss54 

Reference to subscripted array of int, no checking 

ss55 

Reference array with a constant subscript . 

ss56 

Optimization test for dead assignment elimination on 
integers. 

ss57 

Test subscript computation using FOR loop index. 

ss58 

Test expression using FOR loop index. 

ss59 

Unary minus, floating point. 

ss60 

Assign negative floating literal to scalar. 

ss61 

Optimization test for algebraic simplification of 

1.0”. 

ss62 

Optimization test for algebraic simplification of 
71 . 0 ". 

ss63 

Optimization test for algebraic simplification of 


”* 0.0”. 

ss64 

Optimization test for algebraic simplification of 


”+ 0.0”. 

ss65 

Optimization test for algebraic simplification of 
"(float) ** 0”. 

ss66 

Optimization test for algebraic simplification of 
"(float) ** 1”, 

ss67 

Optimization test: algebraic simplification; 
symbolic simplification of variable divided by itself. 

ss68 

Optimization test; dead assignment elimination; 
floating point variable 

ss69 

Test that parentheses are respected. This is a folded 
version ss70. 

ss70 

Test that parentheses are respected. This might be 
improperly folded into ss69. 






Problem Test Name 

Problem Test Description 

ss71 

0ptimi2ation test. Assign float variable to itself. 

ss72 

Language feature test; boolean operator NOT. 

ss73 

Optimization test; algebraic simplification: 
boolean NOT NOT. 

ss74 

Optimization test; algebraic simplification; 
boolean expressions "AND true” and "OR false”. 

ss75 

Optimization test for common subexpression 

elimination; array element is referenced twice in same expression. 

ss76 

common subexpression elimination 

9 references to 3D array index computation 
with different literal terms 

ss77 

array assignment, coding style 
aggregate with range specification 

ss78 

array assignment, coding style 

aggregate with all elements positionally specified 

ss79 

array assignment, coding style copy array 

ss80 

Coding style test. Array assignment using a FOR loop 
to set each element of 10 component real array to 1.0 

ss81 

Coding style test. Array assignment using a FOR loop 

to set the ”ith” element of a 10 component integer array to ”i”. 

ss82 

if statement, integer relation (true) 

ss83 

if statement, integer relation 

similar to ss82, using ”not( >=)” rather than "<" 

ss84 

if statement, integer relation (false), no ELSE clause 

ss85 

if statement, integer relation (true) with ELSE clause 

ss86 

if statement, integer relation (false), ELSE clause 

ss87 

if statement, integer and floating relation (true) 

ss88 

if statement, integer and floating relation (false) 
connected with ’’AND” 

ss89 

if statement, integer and floating relation (false) 

’’AND THEN" 

ss90 

if statement, integer and floating relation (true) 

"OR ELSE” connection 


68 

























Problem Test Name 

Problem Test Description 

ss91 

if statement, IN operator with static bounds (’range) 

ss92 

if statement, IN operator with dynamic bound 

ss93 

if with literal condition, "if false ...” 

ss94 

if statement, simple boolean variable as condition 
(false), no ELSE clause 

ss95 mod 

Make references to local scope variables and avoid 
easy loop invariant optimization. The set of test 
problems (ss95-mod, ss96-mod, ss97_mod, and ss98-mod) 
all include the time to setup the environment, which 
typically will be much larger than the time to make a 
reference to a variable. However, with precise time 
measurements, it will be possible to distinguish 
between systems which use static-links and those which 
use a display. 

ss96 mod 

Reference to intermediate scope variable. One level up 

ss97 mod 

Reference to intermediate scope variable. Two levels up 

ss98 mod 

Reference to intermediate scope var. Three levels up. 

ss99 

String literal assignment . 

sslOO 

Assign one component of an array of records to another 

sslOl 

Standardize boolean. Assign relation on integers to 
boolean variable. 

ssl02 

Language feature test, MOD operator. 

ssl03 

Language feature test, REM operator. 

ssl04 

FOR loop, range null which is not determinable at 
compile time. Test of FOR loop setup time. 

ssl05 

FOR loop, containing procedure call. 

ssl06 

FOR loop with null body, could be noop. 

ssl07 

Convert one fixed point type with DELTA of 0.001 to 
another fixed point type with DELTA of 0.01. 

ssl08 

Convert one fixed point type with DELTA of 0.01 to 
another fixed point type with DELTA of 0.001. 

ssl09 

Fixed point multiplication. 


69 








Problem Test Name 

Problem Test Description 

ssllO 

Fixed point addition (no fixed point conversion 
required). 

sslll 

String slice assignment (static bounds, 2 character 
slice). 

ssll2 

Dynamic string slice assignment . 

ssll3 

Catenation operator. 

ssll4 

Record assignment. 

ssllS 

Record component by component assignment (all fields) 

ssll6 

Record assignment, aggregate. 

ssll7 

Raise range constraint, process exception. 

ssll8 

Case statement, compact alternative range. 

ssll9 

Case statement, sparse alternative range. 

ssl20 

Coding style test: polynomial evaluation; 

Coefficients in array for Horner’s rule. 

ssl21 

Coding style test: polynomial evaluation; Explicit 
powers. 

ssl22 

Coding style test; polynomial evaluation; Inline 

Horner's rule. 

ssl23 

Coding style test; polynomial evaluation; 

Preconditioned. 

ssl24 

Call local procedure with 3 default parameters, 
omitting all parameters on call. 

ssl25 

Call local procedure with 3 default parameters, 
specify all parameters on call. 

ssl26 

Call local procedure with 3 default parameters, 
specify second parameters (by name) on call. 

ssl27 

Lower level procedure that ssl24-ssl26 call on. 

ssl28 

PRED and SUCC functions on enumeration types. 

ssl29 

Same computations as in ssl28 on integers . 

ssl30 

Take POS attribute of enumeration literal. 

ssl31 

Take attributes 'VAL, 'IMAGE, 'POS, 'VALUE of 
enumeration type. 








Problem Test Name 

Problem Test Description 

ssl32 

Comparison between enumeration variable and 
enumeration literal. 

ssl33 

Case with enumerated type (should be dense jump table) 

ssl34 

Language feature test. Floating point put to string, 
default exponent field (not 0). 

ssl35 

Language feature test. Floating point Get from 
string. Exponent field is not zero. 

ssl36 

Language feature test. Floating point Put to string 
exponent. Field is zero. 

ssl37 

Language feature test. Integer Put to string. 

ssl38 

access IN mode scalar parameter 

ssl39 

assign to OUT mode scalar parameter 

ssl40 

reference IN OUT mode scalar parameter 

ssl41 

call on local function 

ssl42 

call on local inline function 

ssl43 

Call function where actual parameter contains another 
function call. 

ssl44 

example of textual substitution to compare to ssl42 

ssl45 

Reference to IN mode array parameter elements. Size 
of input array is 100 elements. 

ssl46 

Reference to IN mode array parameter elements. Size 
of input array is 10 elements. 

ssl47 

Reference to IN mode array parameter elements. Actual 
parameter is dynamic slice which has bounds of 1 .. 1. 

ssl48 

User-defined generic function. 

ssl49 

inline generic procedure on strings 

sslBO 

inline generic procedure on floating point scalar 

ssl51 

provide example to compare with ssl49 

ssl52 

discriminant record assignment 

ssl53 

discriminant record assignment, raising constraint- 
error 

ssl54 

access type reference, checking suppressed 

ssl55 

store into allocated object, checking suppressed 



Problem Test Name 

Problem Test Description 

ssl56 

field assignments to unpacked record 

ssl57 

field assignment to packed record 

ssl58 

record assignment implying reformatting : 
unpacked-packed 

ssl59 

record assignment implying reformatting : 
unpacked-packed 

ssl60 

record field assignment, record movement 

ssl61 

record field assignment, record movement 

ssl62 

allocate 100 linked entries from heap, then follow 
links and deallocate. This may raise storage-error. 

This test uses accesses to constrained objects. 

ssl63 

allocate 100 linked entries from heap, then immediately 
deallocate. An optimizing compiler can omit allocation 
This shouldn’t exhaust space. 

This test uses accesses to constrained objects. 

ssl64 

allocate 100 linked objects in collection and 
immediately deallocate them. 

This test uses accesses to constrained objects. 

An optimizing compiler can omit allocation. 

ssl65 

allocate 100 linked objects in collection and then 
follow links and deallocate. If this works once, 
repetitive executions should not risk raising 
storage error. 

This test uses accesses to constrained objects. 

ssl66 

allocate and follow links. No explicit deallocation 
on. All space in a collection should be freed on 
block exit. May raise storage_error. 

This test uses accesses to constrained objects. 







Prohleiii Test. Name 

Problem Test Description 

ssl67 

allocate 100 linked objects in collection and exit block 

No explicit deallocation, since space in collection 
should be freed on block exit. Specifies pragma 
controlled. May raise storage error. 

This test uses accesses to constrained objects. 

An optimizing compiler can omit allocation. 

ssl68 

ID array store with subscript range check 

ssl69 

fetch from ID array with subscript range checking, 
using constant subscript 

ssl70 

Fetch from and store into ID array (same index) on 
both left and right side of assignment statement with 
subscript range checking enabled. Subscript 
computation need only be verified once. 

ssl71 

subscript with FOR loop index (in range) 
compile time range check possible 

ssl72 

common subexpression elimination subscripts, 
range checking enabled 

ssl73 

constant term in addressing expression, 
subscript range checking enabled 

ssl74 

3 references to same array in expression, subscripting 
expression has constant terms with subscript range 
checking enabled. Bounds checks can be merged. 

ssl75 

Reference to 4 arrays which overlapping static bounds 

Can merge bounds checking. 

ssl76 

Optimization test. Problem is amenable to boolean 
variable elimination. 

ssl77 

Optimization test. Problem has had boolean variable 
elimination performed by hand. 

ssl78 

Problem has tests which be merged. 

ssl79 

Problem has test merged by hand. Compare with ssl78. 

ssl80 

Optimization test. Problem has two separate FOR loops 
which can be fused. 


Problem Test Name 

Problem Test Description 

ssl81 

Problem has one loop fused by hand. Compare with ssl80 

ssl82 

Loop terminates with "EXIT WHEN ... ; END LOOP;” 
Simple translation will have conditional branch to 
exit loop followed by unconditional branch to head of 
loop. Can be improved by jump tracing into one 
conditional branch (with reverse condition). 

ssl83 

Loop terminates with "IF ... WHEN EXIT; END IF; 

END LOOP;" Simple translation will have conditional 
branch to exit loop followed by unconditional branch 
to head of loop. Can be improved by jump tracing into 
one conditional branch (with reverse condition). 

ssl84 

Loop starts "LOOP; EXIT WHEN ... ; ... END LOOP;” 
Simple translation will have conditional branch to 
exit loop and unconditional branch at end of loop to 
the head of the loop. Can be improved by jump tracing 
into one conditional branch (with reverse condition). 

ssl85 

Control folding "WHILE false LOOP ...” can be 
translated into a null. 

ssl86 

IF statement with same statement in THEN and ELSE 
clauses. 

ssl87 

IF statement with null in both THEN and ELSE clauses 
making test unnecessary. 

ssl88 

integer exponent, **2 

ssl89 

Could fold leading unary minus into a literal further 
on in the expression. Compare with ssl90. 

sslQO 

Hand folded version of ssl89. 

ssl91 

integer, exponentiation with variable exponent, 

(-l)**mm LRM Features ; 2.4 4.1.1 4.3 4.5.4 4.5.6 4.6 5.2 

ssl92 

Same subscripting expression of left and right side of 
assignment statement. Checking suppressed. 


74 






Problem Test Name 

Problem Test Description 

ssl93 

3 references to same array in expression, subscripting 
expression has constant terms with subscript range 
checking suppressed. Subscripting expression has 
common subexpression. 

ssl94 

Reference to 4 arrays. Compare with ssl75. This 
version suppresses subscript checking. 

ssl95 

superfluous integer assignment 

ssl96 

natural integer multiplication, * 2 

ssl97 

natural divide multiplication, /2 

ssl98 

natural integer multiplication, *4 

ssl99 

natural integer mod, MOD 4 

ss200 

expression comparable to MOD 4 

ss201 

natural integer multiplication - not power of 2, *1009 

ss202 

integer multiplication 

ss203 

natural division, 1009 

ss204 

natural integer REM, REM 4 

ss205 

Subtract two integers and compare result to 0 

ss206 

Directly compare two integers. Compare with ss205. 

ss207 

Relational test, compare integer variable against 0 

ss208 

relational expression, integer / non-zero literal 
comparison. For comparison with ss207. 

ss209 

WHILE loop comparable to the FOR loop in ss81 

ss210 

Expression with common term. Could be optimized. 

ss211 

Hand optimized common subexpression elimination, uses 
temporary variable to store common expression. 

ss212 

example where invariant motion is possible 

ss213 

example where strength reduction is possible 

ss214 

machine idiom, reuse of condition code setting. Tests 
same relation in IF and ELSIF. The first tests for 
” >" and the second for ” < 

ss215 

machine idiom, block move? Copy two consecutively 
allocated fields from one instance of a record type 
to another. Could be block move here. 





Problem Test Name 

Problem Test Description 

ss216 

example floating point, constant folding, constant 
propagating 

ss216-mod 

ss217 

ss218 

example floating point, constant folding, constant 
propagating 

example integer point constant folding, constant 
propagating 

check for invalid algebraic simplification, respect of 
parenthesis 

ss219 

foldable real expression. Equivalent to ss216 

ss219-mod 

ss220 

foldable real expression. Equivalent to ss216 
algebraic simplification, floating point. Several 
simplifiable subexpressions 

ss221 

algebraic simplification, integer. Several 
simplifiable subexpressions. 

ss222 

Exponential term in an expression is loop invariant 

ss223 

relational expression example, OR 

ss224 

relational expression example”OR ELSE”. Same 
relations as in ss223. 

ss225 

dead assignments within a loop, killed by assignment 
after loop exit. 

ss226 

ss227 

ss228 

ss229 

dead assignments within a block. Variable assigned to 
local which is not referenced before block is exited, 
example of foldable boolean expression, "OR false” 
example of boolean expression, integer relation OR 
boolean variable 

example of boolean expression, integer relation OR 
ELSE boolean variable. Same variables as in ss228 

ss230 

example of foldable boolean expression, 

"OR false OR false” 

ss231 

example of foldable boolean expression 
"OR ELSE false OR ELSE false” 

ss232 

example of foldable boolean expression 
"OR ELSE false” 







Problem Test Name 

Problem Test Description 

ss233 

example of type conversion, 2 integer to float 


conversions 

ss234 

example of type conversion, integer to float 

ss235 

This exchanges two elements of a ID floating point 
array Same logic as ssl50, which is a generic 
instantiation of an exchange procedure for floating 
point values. 

ss236 

example optimizable by application of loop induction 

ss237 

second example optimizable loop induction 

ss238 

simple example amenable to loop unrolling 

ss239 

example of FOR loop with null range, compile time 


determinable 

ss240 

simple example amenable to loop unrolling 
**** How is it different from ss238? 

ss241 

null type conversion, int( ) applied to int type 
variable 

ss242 

reasonable complex function, composed of pieces 
presented in ss243 - ss246 

ss243 

access to array of 2 character strings and assign to a 
slice 

ss244 

assign to float field of record 

ss245 

assignment to discriminant record 

ss246 

attribute 'POS applied to array element 

ss247 

function which returns float value 

ss248 

procedure with OUT mode float parameter 

ss249 

procedure equivalent to function Maxi in ssl41 
returns result IN OUT mode parameter 

ss250 

control flow folding "loop exit; end loop;” 

ss251 

use VAL, POS, SUCC attributes on enumeration type 
without representation clauses. This statement 
enables range checking. 





Problem Test. Name 

Problem Test Description 

ss252 

use VAL, POS, SUCC attributes on enumeration type 
without representation clauses. This statement is 
in a block with suppress RANGE-CHECK. 

Revision ; 11-07-88 

ss253 

use VAL, POS, SUCC attributes on enumeration type with 
representation clause and enable range checking 

ss254 

use VAL, POS, SUCC attributes on enumeration type with 
representation clauses, suppressing range-checking 

ss255 

uses ’SUCC and ’PRED on enumerated type, enabling 


range checking 

ss256 

fetch from access type, pointer to float, enable 
checking 

ss257 

store into access to float object, checking enabled 

ss258 

Pass IN OUT mode array formal parameter, compare with 
ss259 which calls same procedure but requires type 
conversion 

ss259 

Unchecked type conversion on IN OUT mode array formal 
parameter. Converts an array of real with bounds 
given by an enumeration type to array of real with 
bounds given by literal range 1 .. 50. 

ss260 

local procedure call, body is null 

ss261 

GOTO next statement. A peephole optimizer should 
translate this into a null statement. 

ss262 

example where good register usage would show up. 

Floating point variable is used in several consecutive 

IF statements. 

ss263 

example where good register usage would show up. 

Variable used in 2 consecutive statements. 

ss264 

example where good register usage would show up. 

Integer variable stored in one statement is referenced 
in relational test and in statement in the THEN clause 
of the statement. 


78 



Problem Test Name 

Problem Test Description 

ss265 

example where good register usage would show up. 

Integer variable stored in one statement is referenced 
in the next statement. 

ss266 

integer abs 

ss267 

ss267-269 compare the use of a named number, a literal, 
and an initialized variable to perform some 
computation. This version uses named number. 

ss268 

ss267-269 compare the use of a named number, a 
literal, and an initialized variable to perform the 
same computation. This version uses a literal number. 

ss269 

ss267-269 compare the use of a named number, a literal 
and an initialized variable to perform the same 
computation. This version uses initialized variable. 

ss270 

bigint type assignment 

ss271 

bigint type addition 

ss272 

bigint type subtraction 

ss273 

bigint type multiplication 

ss274 

bigint type division 

ss275 

bigint type MOD 

ss276 

bigint type REM 

ss277 

conversion from int to bigint 

ss278 

bigint type increment 

ss279 

bigint type **2 

ss280 

bigint type relational comparison 

ss281 

int multiplication 

3s282 

conversion from bigint to real 

ss283 

conversion from real to bigint 

ss284 

fetch from array of bigint. 

*** How is this different from ss285? 

ss285 

fetch from array of bigint, fold term into 
address computation 

ss286 

extended precision floating point assignment 

ss287 

extended precision floating point addition 





Problem Test Name 

Problem Test Description 

ss288 

extended precision floating point divide 

ss289 

convert double to real 

ss290 

convert real to double 

ss291 

extended precision floai. point **2 

ss292 

extended precision floating point comparison 

ss293 

extended precision floating point abs 

ss294 

extended precision floating point sin 

ss295 

extended precision floating point cos 

ss296 

extended precision floating point exp 

ss297 

extended precision floating point LOG 

ss298 

extended precision iloating point sqrt 

ss299 

extended precision floating point arctan 

ss300 

convert int to double 

ss301 

extended precision floating point array assignment 

ss302 

extended precision floating point literal assignment 

ss303 

convert integer literal to double 

ss304 

floating point exponentiation, **16 

ss305 

floating point exponentiation, **4)**4 

ss306 

floating point exponentiation, **2)**2)**2)**2 

ss307 

floating point exponentiation 
xx:=yy*yy;xx:=xx*xx;xx:=xx*xx:xx;=xx*xx; 

ss308 

compare with ss304-ss308, xx:= exp( 16.0 * log(yy)); 

ss309 

access array of an enumerated type 

ss310 

assign enumeration literal to variable of type 

ss311 

explicit raise of user-defined exception, process it 

ss312 ! 

define user-defined exception, do not raise it 

ss313 

does not define exception 

ss314 

test for constant propagation 

precise floating point literal (9 digits) which can 

be constant propagated into its following statements 

and folded. 

ss315 

hand optimized (folded) version of ss314 





Problem Test Name 

Problem Test Description 

ss316 

test for constant propagation 

*** How is this different from ss317? 

ss317 

test for constant propagation 

*** How is this different from ss316? 

ss318 

use of literal expression in first and second 
occurrences could be folded 

ss319 

algebraic simplification, ”0R false” 

ss320 

boolean algebraic simplification, ”0R ELSE false” 

ss321 

boolean algebraic simplification, ”0R true” 

ss322 

boolean algebraic simplification, "OR ELSE true” 

ss323 

floating point compare against zero 

ss324 

floating point literal comparison against non-zero 

ss325 

CASE statement, statically determined 

ss326 

operations - small unpacked boolean array, =, AND, NOT 

ss327 

operations on small unpacked boolean array, =, AND 

ss328 

operations on small unpacked boolean array, /=, AND 

ss329 

operations on small unpacked boolean array, AND 

ss330 

operations on small unpacked boolean array, OR 

ss331 

operations on small unpacked boolean array, OR 
uses a aggregate with range clause 

ss332 

operations on small unpacked boolean array, XOR 

ss333 

operations on small unpacked boolean array, 
fetch from and store into array element 

ss334 

operations on small unpacked boolean array, 
slice assignment 

ss335 

convert from packed to unpacked small boolean array 

ss336 

fetch element from small unpacked boolean array 

ss337 

operations on small packed boolean array, =, AND, NOT 

ss338 

operations on small packed boolean array, =, AND 

ss339 

operations on small packed boolean array, /=, AND 

ss340 

operations on small packed boolean array, AND 

ss341 

operations on small packed boolean array, OR 


81 








Problem Test Name 

Problem Test Description 

ss342 

operations on small packed boolean array, OR 
uses aggregate with range clause 

ss343 

operations on small packed boolean array, XOR 

ss344 

operations on small packed boolean array, 
fetch from and store into indexed element 

ss345 

operations on small packed boolean array, slice 

ss346 

assignment 

conversion packed to unpacked small boolean array 

ss347 

fetch element from small packed boolean array 

ss348 

operations on large packed boolean array, =, AND, NOT 

ss349 

operations on large packed boolean array, NOT, XOR, 

AND, OR 

ss350 

convert unpacked to packed large boolean array 

ss351 

operations on large unpacked boolean array, =, AND 

ss352 

operations-large unpacked boolean array, AND, OR, XOR 

ss353 

convert large packed boolean array to unpacked 

ss354 

exit from FOR loop with ’’EXIT WHEN" 

ss355 

exit from FOR loop with "IF ... THEN EXIT" 

ss356 

exit from FOR loop with "IF ... THEN GOTO” 

ss357 

exit from FOR loops nested two deep with "EXIT WHEN" 

ss358 

call function with default value, specify parameter. 

Should not evaluate the default expression 
which is a function. 

S5359 

call function with default value, omit parameter. 

Should evaluate the default expression. 

ss360 

call local procedure 

ss361 

call null procedure at non-main nesting level 

ss362 

static expression which must be stored into variable 
with range constraints with checking enabled 

ss363 

range checking simplification possible 

ss364 

range checking, can omit lower limit test since 
guaranteed by bounds of right hand side 

ss365 

pass IN OUT mode parameter with range constraint 


82 







Problem Test Name 

Problem Test Description 

ss366 

assign literal to variable with range constraints 

ss367 

assign int variable to int variable with range 
constraints requiring full upper and lower range 
checking 

ss368 

example using properties of built in function 
to simplify range checking 

ss369 

force divide by zero and process exception 

ss370 

call on function returning string 

ss371 

String slice assignment, lower bound dynamic, upper 
bound static. Moves a 6 character slice. 

ss372 

Successive assignment of same variable to two 

variables with the same range constraints. Can share range checks. 

ss373 

Assign to an int variable with range constraints. 

Then assign that value to another variable of the same type. 

Second assignment need not check constraints again. 

ss374 

Assign to an int variable with range constraints. 

ss375 

assign literal to range checked variable 

ss376 

example with simplifiable control flow 

ss377 

Loop with procedure call and an unconditional EXIT 
followed by a statement. Need not generate any code 
for the statement after the EXIT. Control flow can be 
simplified. 

ss378 

call on procedure with IN OUT mode formal parameter 
(type int) 

ss379 

make two procedure calls. The lowest level has an 
exception handler which can (re) raise an exception 
and propagate it to the next higher level. This 
problem raises the exception. 

ss380 

make two procedure calls. The lowest level does not 
have an exception handler and will simply propagate 
the exception raised to the next higher level. This 
problem raises the exception. 


83 





















Problem Test Name 

Problem Test Description 

ss381 

Block with exception handler which calls on a 
procedure which raises the exception (the procedure it calls 
on does not have a handler but simply raises the 
exception.) 

ss382 

make two procedure calls. The lowest level has an 
exception handler which can (re) raise an exception 
and propagate it to the next higher level. This 
problem does not raise the exception. 

In this problem the exception is NOT raised. 

ss383 

make two procedure calls. The lowest level does not 
have an exception handler and will simply propagate 
exception raised to the next higher level. This 


problem does not raise the exception. 

ss384 

cail on procedure which doesn’t propagate exception 

ss385 

test for loop rotation, WHILE loop. Best code would 
move the condition test to end of loop and not contain 
unconditional branch to head of loop. 

ss385x 

This is GOTO version which has "if ... then goto ..." 
as end of loop. Should have only one branch. The 
address from GOTO label should be merged into the 
relation tests associated with if statement - 
nonoptimizing compilers might test condition, jump 
false to "end if', then execute the GOTO, but this 
is easy to fix with a peephole optimizer. It would be 
disappointing if the loops constructed by a programmer 
with "goto” statements are much faster than the 
"built-in” LOOP constructions, and may encourage poor 
coding style. 

ss386 

test for loop rotation. Loop with EXIT WHEN at the 
beginning of loop. Best code would move the condition 
test to the end of the loop and conditionally branch 
back to the head of loop (and insert an initial branch 
at the initial entry to the loop to go to the test) 


84 





Problem Test Name 

Problem Test Description 

ss387 

! 

FOR loop with reverse option 

This performs the same computations as ss385, ss385x, 
and ss386, using FOR loop index for counting rather 
than a global integer variable. If this problem is 
much faster than the others, the processing of global 
variables and general arithmetic is suspect. 

ss388 

sequence of literal assignment statements to array 
components. Same effect as ss77-ss80 

ss389 

Do superfluous parentheses produce code? Simple 
assignment of float variable to another float variable 
where expression has parentheses. 

ss390 

Do superfluous parentheses produce code? Add three 
float variables without any parentheses. 

ss391 

Do superfluous parentheses produce code? Add 3 float 
variables, parentheses around first two. 

ss392 

Do superfluous parentheses produce code? Add 3 float 
variables, parentheses around last two. 

ss393 

Do superfluous parentheses produce code? Assign one 
integer to another with superfluous parentheses around 
the expression. 

ss394 

Do superfluous parentheses produce code? Add 3 
integer variables, no parentheses. 

ss395 

Do superfluous parentheses produce code? Add 3 
integer variables, parentheses around first two. 

ss396 

Do superfluous parentheses produce code? Add 3 
integer variables, parentheses around last two. 

ss397 

application function, first order lag filter 
using floating point variables 

ss398 

application function, limited integrator 
using floating point variables 

ss399 

application function, symmetric deadzone 
using floating point variables 






Problem Test Name 

Problem Test Description 

ss400 

application function, symn^etric limiter 
using floating point variables 

ss401 

application function, first order lag filter 
using integers 

ss402 

application function, limited integrator 
using integers 

ss403 

application function, symmetric deadzone, 
using integers 

ss404 

application function, symmetric limiter using 
integers using integers 

ss405 

nested for loop to access a 2D array 

ss406 

common subexpression requiring flow analysis 

ss407 

value loaded in one statement is used in next 

ss408 

variable and literal are both referenced twice in the 
same expression 

ss409 

loop induction example, subscripting with FOR loop 
index 

ss410 

search for minimum of array with local function 

ss411 

search for minimum of array with inline function 

ss412 

integer variable referenced in one statement is 
also referenced in next 

ss413 

order of evaluation test, expression has function call 
followed by literal term 

ss414 

order of evaluation test, expression has literal 
followed by add of a function call. A simple 
left-to-right order of evaluation would load the 
literal, save value when it calls on the function, 
and restore it after the function call. 

ss415 

order of evaluation test, simple left-to-right order 
of evaluation will load variable and then have to do a 
register to register operation to add right hand 
subexpression. Compare with ss416. 







Problem Test Name 

Problem Test Description 

ss416 

order of evaluation test, simple left-to-right order 
of evaluation of subexpression is almost best here (perform 
the divide and then add from memory - no need to save 
and restore the quotient- however, the multiply by 

0.5 should be deferred). 

ss417 

coding style check, assign to variable and depending 
on results of IF, reassign to it 

ss418 

coding style check. Depending on IF, assign a value to 
a variable. 

ss419 

Pass a scalar parameter which is an element of a 
dynamically sized array 

ss420 

Pass a scalar parameter which is an element of a 
statically sized array 

ss421 

algebraic simplification, foldable boolean "AND false" 

ss422 

Strength reduction, by hand, of ss213. Reduces an 
exponential by FOR loop index "(-l)**i" 

ss423 

strength reduction test. Has multiply by FOR loop index 

ss424 

strength reduction test. Hand reduced form of ss423, 
with multiply by FOR loop index reduced to add. 

ss425 

strength reduction test. Multiply by induction 
variable which is not a FOR loop index. 

ss426 

strength reduction test. Hand reduced form of 5s425 
with multiply reduced into add. Induction variable 
is not a FOR loop index. 

5s427 

data flow. Assign integer to another integer and test 
if two variables are equal. 

ss428 

common subscripting expressions, including 
several indexing expressing across basic block. 

ss429 

Is constant static array promoted to outer level? 
uses local constant static array. Compare with ss430 

ss430 

Is constant static array promoted to outer level? 

This uses non-local constant array 


87 






Problem Test Name 

Problem Test Description 

ss431 

I/O formatting speed and accuracy. Convert powers of 
two from 2.0**(-75) to 2.0**(+75) to string variable 
with PUT and then GET them and compare with original. 
Remember maximum error and output it after the test. 

The number of replacements (when a new maximum error 
is discovered) will vary between systems. However, 
problem time will be determined mainly by conversion 
time, and should still be comparable between systems. 

ss432 

test of algebraic simplification, can be factored 

ss433 

test algebraic simplification. Factored form of ss432 

ss434 

test algebraic simplification. Expression with 3 
operators. Compare with ss435 

ss435 

test algebraic simplification. Splits the expression 
of ss434 into three separate statements with 
assignments to temporaries. 

ss436 

test algebraic simplification. Sequence of divisions 

ss437 

test algebraic simplification. Combine sequence of 
divisions into multiplications and one division. 

ss438 1 

test swapping. FOR loop with embedded IF statement 
with loop invariant expressions in relation and in the 
conditional statements. "IF” can be moved out of FOR 
loop as done by hand in ss439. 

ss439 

test swapping. Hand optimized version of ss438. 

ss440 

test of test merging. Several IF’s can be merged. 

ss441 

This version has merged tests, compare with ss440 

ss442 

register allocation - with call on external procedure, 
compiler cannot allocate ”xx” to register within FOR 
loop. 

ss443 

register allocation - no call on "die" so 


XX can be allocated to register 


88 






Problem Test Name 

Problem Test Description 

ss444 

evaluate effect of selectively suppressing 
combinations of division.check, overflow-check. 

This problem enables division-check, overflow-check 
on floating point division. 

ss445 

evaluate effect of selectively suppressing 
combinations of division check, overflow check 

This problem enables division-check, overflow-check 
on int division. 

ss446 

evaluate effect of selectively suppressing 
combinations of division check, overflow .check. 

This problem enables division.check, overflow check 
on int MOD. 

ss447 

evaluate effect of selectively suppressing 
combinations of division-check, overflow-check. 

This problem enables division.check, overflow.check 
on int REM. 

ss448 

ss449 

evaluate effect of selectively suppressing 
combinations of division-check, overflow .check. 

This problem suppresses, enables overflow.check on 
floating point division, 
evaluate effect of selectively suppressing 
combinations of division.check, overflow check. 

This problem suppresses division.check, enables 
overflow check on int division. 

ss450 

evaluate effect of selectively suppressing 
combinations of division.check, overflow.check. 

This problem enables division check, suppresses 
overflow-check on floating point division. 

ss451 

evaluate effect of selectively suppressing 
combinations of division.check. overflow.check. 

This problem enables division.check, suppresses 
overflow check on int division. 

ss452 

language feature test, access the function "clock” 












Problem Test Name 

Problem Test Description 

ss453 

language feature test. Call function calendar.seconds 

ss454 

language feature test. Call real(seconds(clocl<)) 

ss455 

language feature test. DELAY 0.0 

It is permissible for a compilation system to optimize 
"DELAY 0.0;" into a NULL statement. However, the 

Ada Uniformity Rapporteur Group (URG) has recommended 
that implementations consider DELAY 0.0 as a 
scheduling point. At such a point, an implementation 
would check whether another task has made it abnormal 
(i.e. aborted it) and if so would terminate itself. In 
general it is desirable that all test problems execute 
as quickly as possible. In this example, the fastest 
execution time (zero) is not necessarily desirable. 

On all systems which do not translate this into a NULL 
the execution time should be as fast as possible. 

ss456 

language feature test, convert floating point variable 
to fixed point type DURATION 

ss457 

language feature test, convert integer to fixed point 
type duration 

ss458 

language feature test. Delay 1 millisecond (long 

enough to actually pause processor). All systems should take 

1 millisecond for this statement, plus perhaps some 
additional scheduling delay, and perhaps some 
quantization when 1 millisecond is not a model number 
of type DURATION. This test problem does not follow 
the general ACEC modeling assumption that execution 
time will be proportional to a systems factor because 
all systems should execute for at least the requested 
delay. This problem is reported with an error code as 
that MEDIAN will not process statements which do not 
follow the modeling assumption. 

ss459 

language feature test. Delay by negative expression 

ss460 

fixed point arithmetic expression, division by literal 


90 





Problem Test Name 

Problem Test Description 

ss461 

fixed point arithmetic, division by variable 

ss462 

fixed point arithmetic expression, addition 

ss463 

fixed point arithmetic assignment 

ss464 

fixed point arithmetic relational test 

ss465 

fixed point arithmetic expression, subtract literal 

ss466 

conversion, fixed point to int 

ss467 

conversion, fixed point to floating point 

ss468 

conversion, int to fixed point 

ss469 

reference variable defined in two packages 
to explore overheads to maintain addressability 

ss470 

reference variable defined in 1 external packages 
to explore overheads to maintain addressability 

ss471 

reference variable defined in local scope plus 3 
external packages to explore overheads to maintain 
addressability. 

ss472 

reference variable defined in three different packages 
to explore overheads to maintain addressability 

ss473 

reference variable defined in four different packages 
to explore overheads to maintain addressability. 

ss474 

reference variable defined in three different packages 
to explore overheads to maintain addressability. 
Multiple references to packages so might share 


addressing setup. 

ss475 

reference variable defined in two different packages 
to explore overheads to maintain addressability. 
Reference one package twice. 

ss476 

reference variable defined in two different packages 
to explore overheads to maintain addressability. 

ss477 

1 

reference variable defined in one external package 
to explore overheads to maintain addressability 

ss478 

test calling a formal generic procedure. The actual 
procedure is procO; an external procedure with a 
null body. 








Problem Test Name 

1 

Problem Test Description 

ss479 

test of coding style variations. Test ’A’ through ’Z’ 
for being vowels using a boolean array of character 

ss480 

test of coding style variations. Test ’A’ through ’Z' 
for being vowels using a local function for 
is a vowel. 

ss481 

test of coding style variations. Test ’A’ through 'Z' 
for being vowels using an IF with ”OR ”s. 

ss482 

test of coding style variations. Test 'A' through ’Z’ 
for being vowels using a case statement on characters. 

ss483 

test of coding style variations. Function which 
accesses a locally declared named number 

ss484 

test of coding style variations. Function which 
accesses a outer level named number 

ss485 

test of coding style variations. Function which 
accesses a literal. 



ss486 

test of coding style variations. Set Boolean if 
character is a vowel using array of Boolean indexed by 
characters; array has value TRUE for vowels, FALSE 
for non-vowels. 

ss487 

test of coding style variations. Set Boolean if 
character is a vowel using local function. 

ss488 

test of coding style variations. Set Boolean if 
character is vowel using case statement on characters. 

ss489 

test of coding style variations. Set Boolean if 
character is a vowel using IF and sequence of OR tests 

ss490 

test of coding style variations. This is NESTED IF 
version of same condition tested in ss491 using 

AND THEN. 

ss491 

test of coding style variations. This is AND THEN 
version of same condition tested in ss490 using 
nested IFs. 

ss492 

test of coding style variations. Set Boolean if 
character is a vowel using external function. 







Problem Test Name 

Problem Test Description 

ss493 

test of coding style variations. Test ’A’ through 'Z' 
for being vowels using an external function. 

ss494 

test of coding style variations. Simple related to 
compare with ss495 which will use NOT and inverse 
relation test. 

ss495 

test of coding style variations. Simple relation to 
compare with ss494. This has NOT and inverse relation 
test. 

ss496 

test of coding style variations. Can be simplified 
into ss497 by DeMorgan’s rule and eliminate an 
explicit NOT operator. 

ss497 

coding style variations. Simplified form of ss496. 

ss498 

test of coding style variations. Set a boolean to 
reflect a relation by "if relation then boolean := 
true ...” Contract with ss499 which does direct 
assignment of relation into boolean. 

ss499 

test of coding style variations. Set a boolean to 
a relation. 

ss500 

language feature test, unchecked conversion between 
int and packed array(l..int’size) of Boolean. AND 
operator on packed Boolean arrays. It should be 
fairly portable. 

boolean, boolean to integer, AND operator. 

ssSOl 

! 

language feature test, unchecked conversion and 
boolean operators. Overloaded AND onto integers. 

Language feature test, unchecked conversions between 
int and packed array(l..int’size) of Boolean, 
overloaded AND operator on INT. 

ss502 

language feature test, unchecked conversion between 

INT and BOOLARRAY, AND (overloaded on INT as packed 
Boolean operator), OR (overloaded on INT as packed 

Boolean operator). 

ss503 

idioms. Increment and decrement same integer scalar. 


93 










Problem Test Name 

Problem Test Description 

ss504 

data flow into noop. Relation test if a variable is 
not equal to itself. 

ss505 

data flow into noop. Relation where value of variable 
is referenced in two subexpressions which are mutually 
exclusive. No value could satisfy both expressions. 

ss506 

language feature test, unchecked conversion between 
INT and BOOLARRAY, AND Boolean array operator. 

ss507 

machine idioms, test of register reuse. Increment 
an integer variable, test it in next statement. 

ss508 

common subexpression shared between the relational 
test in an IF statement and an arithmetic expression 
in the THEN clause of the statement. 

ss509 

common subexpression shared between an arithmetic 
statement and the relational test in an IF statement 
that follows it. 

ss510 

register reuse, test Boolean variable in one 
statement, next statement is an IF with a relation 
test using the Boolean variable. 

ss511 

register allocation. Problem finds the array index 
of the minimum valued element. This version uses 
a temporary scalar variable to remember the minimum 
rather than reference an array element on each FOR 
loop iteration. 

ss512 

register allocation. Problem finds the array index 
of the minimum valued element. This version does 
not use a temporary scalar variable to remember the 
minimum but references the array element which has 
the current minimum on each FOR loop iteration. 

ss513 

coding style variation, record definition with a 
default initialization to a float point literal value. 

ss514 

coding style variation, record definition with a 
default initialization to a float point scalar variable. 



Problem Test Name 

Problem Test Description 

ss515 

coding style variation, record definition with a 
default initialization, which has an explicit initialization 
to a floating point literal to override the default. 

Here the default value is also a literal. 

ss516 

Coding style variation. For loop index references 

value of array from prior iteration. Compare with ss517 which 

saves value from last iteration in temporary scalar. 

ss517 

Coding style variation. Uses temporary scalar to 
refer to value of prior iteration. Contrast to ss516 

ss518 

Sums all elements in a floating point array. 

ss519 

Problem finds the array index of the maximum valued 
element. This version uses a temporary scalar 
variable to remember the minimum rather than 
reference an array element on each FOR loop 
iteration. Array is setup in ascending order so each 
new element is larger than the prior one. 

ss520 

Problem finds the array index of the maximum valued 
element. This version doesn’t use a scalar variable 
to remember the maximum but references the array 
with index of current maximum element on each FOR 
loop iteration. Array is setup in ascending order so 
each new element is larger than the prior one. 

ss521 

call on simple local procedure, no dynamically sized 
objects, no exceptions, no calls on subprograms. 

ss522 

J 

Call on simple procedure, similar to that used in 
ss521, but containing a call on another procedure 
(which is not executed) 

ss523 

! 

Call on a (potentially) recursive procedure. Actual 
control flow is the same as ss521 and ss522. These 
three problems test for presence of different 
subprogram linkages for "simple” subprograms. 


95 





Problem Test Name 

Problem Test Description 

ss524 

coding style variation. Shift a packed Boolean array 
using slice assignments. Contrast with ss525 which 
uses a FOR loop and element by element assignment. 

Could be implemented as integer divide. 

ss525 

coding style variation. Shift a packed Boolean array 
using a FOR loop and element by element assignment. 
Compare with time for ss524 which uses slice 
assignment to perform the same actions. 

ss526 

refer to element of Boolean array with literal subscript. 

ss527 

conditional raise of user defined exception and go 
through handler. Taken. Contract with ss528 where it is not. 
Explicit RAISE could be implemented by simple branch. 

ss528 

conditional raise of user defined exception and go 
through handler. Not taken. Compare with ss527, 
where exception is raised. 

SS529 

constant propagating with local variable not 
visible in any handler 

ss530 

cse with local variable not visible in handler 

ss531 

store suppression of local variable visible in handler 

ss532 

constant propagating : local variable visible in handler 

ss533 

cse with local variable visible in handler 

ss534 

store suppression of local variable visible in handler 

ss535 

sample to embed in code for ss536 

ss536 

test for loop invariant motion 

ss537 

named number literal expression is evaluated. Problem 
tests if expression is evaluated using working precision 
or rational package. 

ss538 

Constant real using literal expression is evaluated. 

Problem tests if expression is evaluated using working 
precision or rational package. Context is one where 
the LRM does not require static expression, and 


working precision is permissible. 


96 










Problem Test Name 

Problem Test Description 

ss539 

Literal expression in relational test is evaluated. 

Problem tests if expression is evaluated using working 
precision or rational package. Context is one where 
the LRM does not require static expression, and 
working precision is permissible. 

ss540 

Literal floating point expression in assignment 

statement. LRM does not require evaluation with rational package. 

Problem also tests precision of evaluation. 

ss541 

unrolling, test elimination. This has variable upper 
bound. Could be partially unrolled. 

ss542 

unrolling, test elimination. This is version of ss541 
with literal upper bound. Could be unrolled. 

ss542x 

Partially unrolled version of ss542 for comparison 

Eliminates tests for FOR loop index variable=l within 
the loop. 

ss543 

Declare block with null body and exception handler, 
which is unreachable and superfluous. 

ss544 

null body check for block overhead 

ss545 

example where non left to right order of evaluation 
of one arithmetic expression can enhance performance. 

ss546 

Call on two parameter function, with left actual 
parameter a literal and right a further function call. 

Nested 8 levels. Integer function (max). A strict 
left to right order of evaluation will result in 
unnecessary storing and reloading of literal values. 

Contract with ss547. 

ss547 

Analogous to ss546 with calls nested on first parameter. 

A left to right order of evaluation is best here. Good 
compiler will do both ss546 and ss547 is about the same 
time. 

ss548 

Floating point version of ss546. Compare with ss549 

ss549 

Floating point version of ss547. Compare with ss548. 


97 











Problem Test Name 

Problem Test Description 

ss550 

Integer addition with parameters nested on second 
operand. A left-to-right order of evaluation may 
generate necessary stores and reloads. Contrast 
with ss551. 

ss551 

Integer addition with parameters nested on first 
operand. A left-to-right order of evaluation is best. 
Contrast with ss550. 

ss552 

example where order of evaluation can enhance 
expression is complex and many targets will run out of 
registers in evaluating it, provoking register spill 

ss553 

idioms - common subexpression elimination on subscript 
on left and right side of an assignment. 

ss554 

common subexpression elimination for subscripts 

ss555 

idioms, register reuse. Use INC instruction if available 

ss556 

Integer constant propagation. Assign zero to a variable, 
increment variable in next statement. 

ss557 

register usage. Variable used in indexing expression on 
left side of assignment statement is also used on right. 

ss558 

data flow analysis based on values of relations in a 
conditional statement can fix values of variables in 
the conditional parts - if they didn’t have values 
which satisfy conditions, code would not execute the 
alternative, therefore optimized can simplify 
expressions by using bounds determined by relations. 

ss559 

comparison for ss558 

ss560 

algebraic simplification - "-1*” 

ss561 

comparison to ss560 without explicit multiply 

ss561x 

data flow analysis based on values of relations in a 
conditional statement can fix values of variables in 
the conditional parts - if they didn’t have values 
which satisfy conditions, code would not execute the 
alternative, therefore optimized can simplify 
expressions by using bounds determined by relations. 







Problem Test Name 

Problem Test Description 

SS562 

language feature test, actual parameter for in out mode 
scalar includes an expression with function call. 

Exposed error in implementation in one system which 
called the function both before and after evaluation. 

ss563 

inline function with literals, can be folded into 
assignment of literal value to integer 

ss564 

inline function test, first actual parameter to max 
function is 0, permitting simplification. 

ss565 

inline function test, second actual parameter to max 
function is 0, permitting simplification. 

ss566 

reference to first formal integer parameter 

ss567 

reference to second formal integer parameter 

ss568 

reference to third formal integer parameter 

ss569 

reference to fourth formal integer parameter 

ss570 

reference to fifth formal integer parameter 

ss571 

reference to sixth formal integer parameter 

ss572 

reference to seventh formal integer parameter 

ss573 

reference to eighth formal integer parameter 

ss574 

reference to ninth formal integer parameter 

ss575 

reference to first formal float parameter 

ss576 

reference to second formal float parameter 

ss577 

reference to third float parameter 

ss578 

reference to fourth first formal float parameter 

ss579 

reference to fifth formal float parameter 

ss580 

reference to sixth formal float parameter 

ss581 

reference to seventh formal float parameter 

ss582 

reference to eighth formal float parameter 

ss583 

reference to ninth formal float parameter 

ss584 

call procedure with 9 integer parameters 

ss585 

call procedure with 9 float parameters 

ss586 

math library test, arcsin 

ss587 

expression - foldable subexpression using named number 

ss588 

expression . foldable subexpression using constant real 





Problem Test Name 

Problem Test Description 

ss589 

expression with foldable subexpression using 
variable initialized with literal and not modified 

ss590 

expression with foldable subexpression using variable 
initialized with expression and not modified 

ss591 

comparison with ss587-590, using variable which is 
modified, but is invariant within the timing loop 

ss592 

comparison with ss587-591, expression not timing loop 
invariant 

ss593 

comparison with ss587-592, variable is global, not 
invariant 

ss594 

comparison with ss587 - 593, hand folded version 

ss595 

expression with foldable subexpression using literals 

ss596 

call on function returning unconstrained object 

ss597 

comparison to ss596, omits call on function returning 
unconstrained object. 

ss598 

assign to fields of discriminant records, no constraint 
error will be raised. 

ss599 

compare with ss598, sequence of assignments to types not 
in discriminant record 

ss600 

assign to one field in discriminant records, no 
constraint error will be raised but will be checked 

ss601 

assign to variable of same type as field in record, 
no discriminant checking will be needed. Compare with 
ss600. 

ss602 

Assign to field of discriminant records, raise 
constraint error 

ss603 

assign whole variant 

ss604 

reference field in discriminant record, see if system 
retests discriminant. 

ss605 

reference field in discriminant record, see if system 
retests discriminant. 


100 





Problem Test Name 

Problem Test Description 

ss606 

Assign literal floating point to scalar in one 

statement, in next statement assign that scalar to another scalar 
variable. Could suppress load in second statement. 

ss607 

Assign literal floating point to scalar in one 

statement, in next statement assign that scalar to another scalar 

variable. Could suppress load in second statement. 

Value is 0.0, so might be able to use some machine idiom 
to further speed processing. 

ss608 

Integer version of ss606. 

ss609 

assign expression to scalar variable in first statement, 
then assign this variable to another in second 
statement. Could suppress load in second statement. 

ss610 

Integer version of ss609. 

ss611 

Integer version of ss607 
or idioms 

ss612 

Loop which frequently references a variable which might 
be allocated to a register, or at least loads suppressed 

ss613 

language feature test, pass parameter to unconstrained 
formal parameter. With checking enabled. Compare with 
ss616 

ss614 

language feature test, pass parameter to unconstrained 
formal parameter. With checking enabled. 

ss615 

language feature test, pass parameter to unconstrained 
formal parameter. With checking enabled. 

ss616 

language feature test, pass parameter to unconstrained 
formal parameter. Suppress checking. 

ss617 

language feature test, pass parameter to unconstrained 
formal parameter. Suppress checking. 

ss618 

language feature test, pass parameter to unconstrained 
formal parameter. Suppress checking. 

ss619 

6 "GOTO” statements which jump to another "GOTO" 
statement. Statements are not in order. Test for jump 
tracing optimization. 


101 














Problem Test Name 

Problem Test Description 

ss620 

6 "GOTO" statements which branch to next statement. 
This is a simpler test for jump tracing that ss619. 

A peephole optimizer which omits a branch to the next 
instruction would suffice to optimize this problem. 

ss621 

language feature test, generic non-inline function, 
instantiated in external unit 

ss622 

language feature test, generic inline function, 
instantiated in external unit 

ss623 

language feature test, generic non-inline function, 
instantiated in same unit 

ss624 

language feature test, generic inline function, 
instantiated in same unit 

ss625 

language feature test, local generic inline function, 

ss626 

language feature test, 

local generic non-inline function, 

ss627 

language feature test comparison, 
non-generic non-inline function, 

ss628 

language feature test, generic non-inline function, 
instantiated in external unit 

ss629 

language feature test, generic inline function, 
instantiated in external unit 

ss630 

language feature test, generic non-inline function, 
instantiated in same unit 

ss631 

language feature test, generic inline function, 
instantiated in same unit 

ss632 1 

language feature test comparison, 
non-generic non-inline function. 

ss633 

language feature test comparison, 
inline in external package 

ss634 

sequence of simple assignments. Check for prefetching 
base addressing overheads, consistency of measurements 

ss635 

sequence of simple assignments. Check for prefetching 
base addressing overheads, consistency of measurements 





Problem Test Name 

Problem Test Description 

ss636 

sequence of simple assignments. Check for prefetching 
base addressing overheads, consistency of measurements. 

ss637 

sequence of simple assignments. Check for prefetching 
base addressing overheads, consistency of measurements 
This version has right sides equal to previous 
statements left sides. Could suppress reload. 

ss638 

comparison to ss639-check for dead variable elimination. 

ss639 

dead variable elimination. State never referenced. 

ss640 

comparison for dead variable elimination, ii global 

ss641 

comparison for dead variable elimination. No assignments 

ss642 

Sequence of procedure calls. Timing consistency check. 

ss643 

floating point cse requiring canonical ordering to detect 

ss643x 

math library test {float)**(float) 

ss644 

boolean cse, some canonical ordering applicable tests 
relation ”ll=mm” 5 times, then tests ”mm=H” 5 times 

ss645 

language feature test, fetch from ID array 

ss646 

language feature test, fetch from 2D array 

ss647 

language feature test, fetch from 3D array 

ss648 

language feature test, deallocation of null pointer 
should be "null’’ 

ss649 

Follow ’’if’ statement, both legs of which assign to a 
variable with an assignment to same variable which is 
independent of the conditional assignments. This makes 
the assignments within the ”if’ dead, and the whole 
"if’ statement becomes unnecessary. 

ss650 

Precede ’’if’ statement, both legs of which assign to a 
variable with an assignment to same variable which is 
independent of the conditional assignments. This makes 
the assignment before the ’’if’ dead. 

ss651 

Assign to variable within a loop, assignment to be after 
loop exit, making all assignments within the loop dead. 

ss652 

Test for packed component spanning a storage unit 
boundary 


103 






Problem Test Name 

Problem Test Description 

ss653 

Test for when unit doesn’t cross unit boundary 

ss654 

Test for both spanning and nonspanning accesses 

ss655 

This tests packing and unpacking 

ss656 

Simple assignment 

ss657 

Test for packed component spanning a storage unit 
boundary 

ss658 

Test for when unit doesn’t cross unit boundary 

ss659 

Test for both spanning and nonspanning accesses 

ss660 

This tests packing and unpacking 

ss661 

Simple assignment 

ss662 

Test for packed component spanning a storage unit 
boundary 

ss663 

Test for when unit doesn’t cross unit boundary 

ss664 

Test for both spanning and nonspanning accesses 

ss665 

This tests packing and unpacking 

ss666 

Simple assignment 

ss667 

Test for packed component spanning a storage unit 
boundary 

ss668 

Test for when unit doesn’t cross unit boundary 

ss669 

Test for both spanning and nonspanning accesses 

ss670 

This tests packing and unpacking 

ss671 

Simple assignment 

ss672 

Test for packed component spanning a storage unit 
boundary 

ss673 

Test for when unit doesn’t cross unit boundary 

ss674 

Test for both spanning and nonspanning accesses 

ss675 

This tests packing and unpacking 

ss676 

Simple assignment 

ss677 ' 

Test for packed component spanning a storage unit 
boundary 

ss678 1 

Test for when unit doesn't cross unit boundary 

ss679 1 

Test for both spanning and nonspanning accesses 

ss680 

This tests packing and unpacking 






Problem Test. Name 

Problem Test Description 

ss681 

Simple assignment 

ss682 

Test left justified boolean field 

ss683 

Test the boolean field next to the left Justified field 

ss684 

Test the boolean field next to the right Justified field 

ss685 

Test right Justified boolean field 

ss686x 

Bit manipulation using array indexing. Doing same 
computations and ss686y. 

ss686y 

Bit manipulation using array wide logical operators 

ss687 

Test for packed component spanning a storage unit 
boundary 

ss688 

Test for when unit doesn’t cross unit boundary 

ss689 

Test for both spanning and nonspanning accesses 

ss690 

This tests packing and unpacking 

ss691 

Simple assignment 

ss692 

Test for packed component spanning a storage unit 
boundary 

ss693 

Test for when unit doesn’t cross unit boundary 

ss694 

Test for both spanning and nonspanning accesses 

ss695 

This tests packing and unpacking 

ss696 

Simple assignment 

ss697 

Test for packed component spanr.ng a storage unit 
boundary 

ss698 

Test for when unit doesn’t cross unit boundary 

ss699 

Test for both spanning and nonspanning accesses 

ss700 

This tests packing and unpacking 

ss701 

Simple assignment 

ss702 

1 

Test for packed component spanning a storage unit 
boundary 

ss703 

Test for when unit doesn’t cross unit boundary 

ss704 

Test for both spanning and nonspanning accesses 

ss705 

This tests packing and unpacking 

ss706 

Simple assignment 










Problem Test Name 

Problem Test Description 

ss707 

Test for packed component spanning a storage unit 
boundary 

ss708 

Test for when unit doesn't cross unit boundary 

ss709 

Test for both spanning and nonspanning accesses 

ss710 

This tests packing and unpacking 

5s711 

Simple assignment 

ss712 

Test for packed component spanning a storage unit 
boundary 

ss713 

Test for when unit doesn’t cross unit boundary 

ss714 

Test for both spanning and nonspanning accesses 

ss715 

This tests packing and unpacking 

ss716 

Simple assignment 

ss717 

Test left justified boolean field, record has 
a representation clause 

ss718 

Test the boolean field next to the left Justified field, 
record has a representation clause 

ss719 

Test the boolean field next to the right justified 
field, record has a representation clause 

ss720 

Test right justified boolean field, record has 


a representation clause 

ss721 

Test fixed point assignment with no conversion 

Dummy version of ss721 which will generate an error 
message to be processed by FORMAT. Helps automate 
the test suite. 

ss722 

Test simple fixed point conversion 

Dummy version of ss722 which will generate an error 
message to be processed by FORMAT. Helps automate 
the test suite. 

ss723 

Test the fixed point conversion from base 10 to base 2 
Revised : 11-07-88 to reflect SPR#16 

Dummy version of ss723 which will generate an error 
message to be processed by FORMAT. Helps automate 
the test suite. 




Problem Test. Name 

Problem Test Description 

ss724 mod 

Test field not on storage unit boundary 

ss725 mod 

Test field on storage unit boundary 

ss726-mod 

Test creation of user-defined named number. User-defined 
named numbers should be treated as literals as SS729-MOD 

ss727 mod 

Test access to system-defined name numbers. 

Access to system defined named numbers should be 
treated as literals as in SS729-MOD. 

ss728-mod 

Test access of user-defined name numbers. 

User-defined named number should be treated as literals 
as in SS729 MOD. 

ss729 mod 

Test access of literal expression. 

Literal usage should be folded. 

ss"30-mod 

Test ADDRESS attribute of a subroutine. 

ss731.mod 

Test ADDRESS attribute of a package object. 

Revision : 11-07-88 

ss732-mod 

Test ADDRESS attribute of a dynamic object. 

ss734.mod 

Test SIZE attribute of a statically allocated object. 

ss735-mod 

Test SIZE attribute of a dynamically allocated object. 

ss736-mod 

Test POSITION attribute for a record component. 

ss737 mod 

Test FIRST BIT attribute for a record component. 

ss738 mod 

Test LAST BIT attribute for a record component. 

ss739 mod 

Test STORAGE TYPE attribute for an access type. 

ss740 mod 

Test STORAGE TYPE attribute for a task type. 


107 







Problem Test Name 

Problem Test Description 

ss741 

TEST FOR STORAGE RECLAMATION IN COLLECTION ACCESSED 
WITH UNCONSTRAINED TYPES. Allocate 52 small objects, 
filling up about 17% of the collection. Then deallocate 
them, and do it again, deallocating in reverse order. 

Then allocate 20 large objects filling up the same 
fraction of the collection. Then deallocate these 
objects. Repeat all the above 2*rep_count times. If the 
deallocated space is not reused, later allocations will 
fail. The collection contains space for approximately 
rep-count times 1000 ”int” variable. Because of 
possible space overhead for allocated objects, the 
number of actual entries the collection can contain is 
permitted by the LRM to vary between implementations. 

This test problem allows a "fudge factor” of 3. For a 
tight system, rep count could be 1, which would fill up 
collection to a bit over 50% each time, and executing 
the allocation of large objects would check that the 
space for small ones had been reused. However, for many 
heap management algorithms, this would provoke failure, 
so the problem does not try to pack the collection as 
tight as might be possible. In any case, the problem 
will fail, raising STORAGE-ERROR, when deallocated 
storage is not reused. 

ss744 

Test using a single shared scalar variable 

ss745 

Test using a pair of shared scalar variables 

ss746 

Test using shared access variables 

ss747 

Test interface to null assembly language routine. 

Interface to assembler is a Chapter 13 feature not 
required to be supported on all implementations. 

ss748 

1 

Access component selected by function call on the left 
side of assignment statement. 


108 












Problem Test Name 

Problem Test Description 

ss749 

Optimization test for invariant loop code motion. This 
example contains an invariant expression in an inner 
loop. For the sake of comparison, see tests ss750 and 
ss222. 

ss750 

Test for loop interchange optimization. 

ss751 

Optimization test: omission of an unreachable assignment 

ss752 

Optimization test; invariant motion: integer 
assignment statement. 

ss753 

Assign out of range static expression to an integer with 
range constraints. See if it optimizes into a simple 
raise of CONSTRAINT.ERROR. 

ss754 

Explicit IF statement which tests static expression out 
of range and raises CONSTRAINT.ERROR. 

ss755 

Assign out-of-range static expression to a variable 
with range constraints. Null handler. 

ss756 

Range checking would be verified at compile time 

ss757 

Assign out of range dynamic expression. Compare with 
ss753 through ss756. This needs explicit checking. 

ss758 

Fetch value from one dimensional array. 

No constraint checking. 

ss759 

Fetch value from two dimensional floating point array. 

No constraint checking. 

ss760 

Fetch value from three dimensional floating point array. 

No constraint checking. 

ss761 

Fetch value from one dimensional array. 

Constraint checking. 

ss762 

Fetch value from two dimensional floating point array. 
Constraint checking. 

ss763 

Fetch value from three dimensional floating point array. 
Constraint checking. 

ss764 

Bit manipulation using array aggregate. Set a component 
of packed boolean array to TRUE by using an OR against a 
variable. 


109 





Problem Test Name 

Problem Test Description 

ss765 

Bit manipulation using array aggregate. Set a component 
of packed boolean array to TRUE by using an OR using an 
aggregate. 

ss766 

Bit manipulation using indexing. Set element of packed 
boolean array to true, selected by literal subscript. 

Similar to ss765. 

ss767 

Bit manipulation using indexing. Set dynamically 
computed element of packed boolean array to true. 

Similar to ss765. 

ss768 

Bit manipulation using indexing. Set dynamically 
determined element of packed boolean array to true, 
using array of bits and OR operator. Similar to ss767. 

ss769 

Consistency check, same problem as ss36, ss770-773 

ss770 

Consistency check, same problem as ss36,ss769,ss771-773 

ss771 

Consistency check. This is same problem as ss36, 

SS769-770, ss772-ss773 

ss772 

Consistency check. This is same problem as ss36, 

SS769-771, ss773 

ss773 

Consistency check, same problem as ss36, ss769 - ss772 

ss774 

declare and reference array, setup by copying from 
another array declared at higher level. Compare this 


with other ways of setting up an initialized array. 

ss775 

declare and reference static array, setup with static 
aggregate. Optimizing compiler could simply make array 
references directly refer to the static aggregate and 
not do a copy. 

ss776 

declare and reference array, setup by executing code in 
a loop in body of the block. 

ss777 

reference array setup in higher level. No initialization 
code need be done here. 

ss778 

declare and reference array, setup by aggregate with 
"others” clause 


110 





Problem Test Name 

Problem Test Description 

ss779 

Reference the 0th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss780 

Reference the 2nd real variable declared in a package. 

Early variables may be able to use short displacements. 

ss781 

Reference the 8th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss782 

Reference the 16th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss783 

Reference the 32th real variable declared in a 
package. Early variables may be able to use short 
displacements. 

ss784 

Reference the 64th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss785 

Reference the 128th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss786 

Reference the 256th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss787 

Reference the 512th real variable declared in a package. 

Early variables may be able to use short displacements. 

ss788 

Reference the 1024th real variable declared in a 

package. Early variables may be able to use short displacements. 

ss789 

Reference the 2nd real field declared in a record. 

Early fields may be able to use short displacements. 

ss790 

Reference the 8th real field declared in a record. 

Early fields may be able to use short displacements. 

ss791 

Reference the 16th real field declared in a record. 

Early fields may be able to use short displacements. 

ss792 

Reference the 32th real field declared in a record. 

Early fields may be able to use short displacements. 

ss793 

Reference the 64th real field declared in a record. 

Early fields may be able to use short displacements. 

ss794 

Reference the 128th real field declared in a record. 

Early fields may be able to use short displacements. 


Ill 
















Problem Test Name 

Problem Test Description 

ss795 

Reference the 256th real field declared in a record. 

Early variable may be able to use short displacements. 

ss796 

Reference the 512th real field declared in a record. 

Early fields may be able to use short displacements. 

ss797 

Reference the 1024th real field declared in a record. 

Early fields may be able to use short displacements. 

ss798 

Reference the 0th real field declared in a record. 

Early fields may be able to use short displacements. 

ss799 

Addition of variables of type CALENDAR.TIME 

ss800 

Greater than comparison of type CALENDAR.TIME 

ss801 

Equal comparison of type CALENDAR.TIME 

ss802 

Comparison of type DURATION with SECONDS(TIME2) 

ss803 

Call on CALENDAR.TIMLOF 

ss804 

Assign an access type to NULL. 

ss805 

Exchange two non-null access type variables. 

ss806 

Test of math-dep.INTEXP function on literal 

ss807 

Test of math-dep.ADX function on literals 

ss808 

Test of math.dep.SETEXP function on literals 

ss809 

Test of math dep.INTEXP function on variables 

ss810 

Test of math dep.ADX function on variables 

ss811 

Test of math dep.SETEXP function on variables 

ssearch 

Serial search ID array of float. 

ssearch2 

Serial Search ID array of float for matching 
component, unrolling the search loop 4 times. 

strength 

Optimization test. Constructed so that systems which 
do strength reduction will do well. 

tak 

Classical test of procedure calling and parameter 
passing. This is the ”TAK” function in Ada adapted 
from the book "Performance and Evaluation of Lisp 
Systems," by R. Gabriel, MIT Press, 1985. It is a 
variant of a program originally developed by Ikuo 

Takeuchi. 

target , 

classical test from CFA study, target tracking 


112 









Problem Test Name 

Problem Test Description 

taskl 

language feature test, task creation and termination 

task2 

language feature test, task creation and termination. 

Uses a procedure which declares 10 tasks of the same 
task type. Implies synchronization with these tasks 
to terminate the procedure. 

tasks 

Simple rendezvous with task making entry call 
arriving at rendezvous first. 

task4 

Language feature test of aspects of tasking. 

Passes a nonscalar parameter. Conditional select statement 
with WHEN clause. 

tasks 

Language feature test of aspects of tasking. Always 
takes ELSE alternative. 

tasks 

Language feature test of aspects of tasking. 

Tests access time to dynamic attributes. 

task? 

Language feature test of aspects of tasking. Classic 
test. Uses rendezvous with scalar parameters, simple 
arithmetic. 

tasks 

Language feature test of aspects of tasking. Classic 
test. Uses rendezvous with scalar parameters, simple 
arithmetic. 

task9 

Language feature test of aspects of tasking. Classic 
test. Uses rendezvous with scalar parameters, simple 
arithmetic. 

tasklO 

Language feature test of aspects of tasking. Classic 
test. Uses rendezvous with scalar parameters, simple 
arithmetic. 

taskll 

Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. 

Accepting task contains a sequence of ACCEPTS with 

DOs containing a simple code sequence. Accepting 
task will arrive at rendezvous first. 


113 





Problem Test Name 

Problem Test Description 

taskl2 

' Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. 

Accepting task contains a SELECT with a list of 
alternatives with a DO containing a simple code 
sequence. Accepting task will arrive at rendezvous 
first. 

tasklS 

language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. 

Accepting task contains a sequence of ACCEPTS with 

DO containing a simple code sequence. Some code 
outside of the rendezvous. Accepting task will 
arrive at rendezvous first. 

taskl4 

Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. 

Accepting task contains a select statement with WHEN 
clauses, only one of which is satisfied. Accepting 
task will arrive at rendezvous first. 

tasklS 

Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. Accepting task 
contains a conditional select statement with WHEN 
clauses, none of which is satisfied. Accepting task 
will arrive at rendezvous first. 

taskl6 

Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. Accepting task 
contains a conditional select statement with WHEN 
clauses, none of which is satisfied. No open 
alternative, no waiting tasks. Selected alternative 
is "DELAY minus one;”. Accepting task will arrive 
at rendezvous first. 


114 




Problem Test Name 

Problem Test Description 

taskl? 

Language feature test of aspects of tasking. 

Accepting task contains a conditional select statement with WHEN 
clauses, all of which are satisfied. There are no 
tasks waiting on accept. The selected alternative 
will be null. 

tasklS 

Language feature test of aspects of tasking. Accepting 
task contains a conditional select statements with 

WHEN clauses, none of which is satisfied. Tasks 
waiting at all entries. Selected alternative is ELSE. 

This test measures the time to test alternatives - 
should be fairly fast. 

tasklQ 

Language feature test of aspects of tasking. 

Accepting task contains a conditional SELECT statement with 
WHEN clauses, only one of which is satisfied. 

Should be tasks waiting on all entries. Accepting 
task will arrive at rendezvous first. Test measures 
evaluation of alternative guards and picking one 
alternative. 

task20 

Language feature test of aspects of tasking. 

Entering tasks makes sequence of entry calls. Accepting task 
contains a SELECT statement with WHEN clauses, only 
one of which is satisfied. Entering task will 
arrive at rendezvous first. 

task21 

Language feature test of aspects of tasking. 

Entering tasks make a sequence of entry calls. Accepting task 
contains conditional SELECT with guards, only one of 
which is satisfied. Entering task will arrive at 

Entering task will arrive at rendezvous first. 


115 















Problem Test Name 

Problem Test Description 

task22 

Language feature test of aspects of tasking. 

Entering 

tasks makes sequence of entry calls. Accepting task 
contains conditional SELECT with guards, only one of 
which is satisfied. Accepting task will arrive at 
rendezvous first. 

tasl<23 

language feature test of aspects of tasking. Simple 
rendezvous : task doing accept arrives at rendezvous 
first 

task24 

Language feature test of aspects of tasking. Simple 
rendezvous with task making entry call arriving at 
rendezvouo first. Task performing the accept is in 
a subunit. 

task25 

Language feature test of aspects of tasking. Classic 
test. Uses rendezvous with scalar parameters, simple 
arithmetic. 

task26 

language feature test of aspects of tasking. Simple 
rendezvous with task making entry call arriving at 
rendezvous first. Task performing the accepts is 
in separate package. 

task27 

Language feature test of aspects of tasking. 

Rendezvous with the task making an entry call 
arriving at rendezvous first. Brackets each ACCEPT 
with a SELECT/END pair. 

task28 

Language feature test of aspects of tasking. 

Rendezvous with the task making an ENTRY call 
arriving first. Brackets each ACCEPT with a SELECT/ 
END pair containing WHEN clauses which can be 
evaluated at compile time. 






Problem Test Name 

Problem Test Description 

task29 

Language feature test of aspects of tasking. 

Rendezvous with the task making an ENTRY call 
arriving at the rendezvous first. Brackets each 

ACCEPT with a SELECT/END pair containing WHEN 
clauses which can be evaluated at compile time. 

tciskSO 

Language feature test of aspects of tasking. 

Selective wait in accepting task. Task will be 
waiting on accept and DELAY alternative will not 
be taken. It should not be necessary to setup 
the DELAY and then cancel it. 

taskSl 

Language feature test of aspects of tasking. 

Selective wait in accepting task. Will take the delay 
alternative, and then the entry call will be made. 

With canonical implementation, the system will have 
to cancel the DELAY notification it sets up to 
awaken the task if an entry was not made within the 
specified delay. 

task32 

Language feature test of aspects of tasking. 

Conditional wait in accepting task, will always take 
the ELSE alternative. 

task33 

Language feature test of aspects of tasking. 

Conditional wait in accepting task, will always take 
the ELSE alternative. 

task34 

Language feature test of aspects of tasking. 

Selective wait in accepting task. Will always take the delay 
alternative, which will expire without an entry call 
being made. 

task34-delta 

Simple delay to compare with task34. 

task35 

Language feature test of aspects of tasking. 

Selective wait in accepting task. Will always take the DELAY 
alternative, which will expire without an entry call 
being made. 

task35 delta 

Provide a delay 0.0 for comparison with task35. 


117 



Problem Test Name 

Problem Test Description 

task36 

Language feature test of aspects of tasking. 

Entering task makes a sequence of calls. Accepting task 
contains a conditional SELECT with ELSE alternatives 
which are never taken. Entering task will arrive at 
rendezvous first. 

task37a 

Language feature test of aspects of tasking. This 
program raises a user-defined exception inside a 
rendezvous. 

task37b 

Language feature test of aspects of tasking. Compare 
this program to task37a. Creates and normally 
terminates the tasks while task37a forces abnormal 
termination of test. 

task38 

Language feature test of aspects of tasking. This 
program makes an entry call on an aborted task. 

Will raise a TASKING ERROR exception. 

task39 

Language feature test of aspects of tasking. This 
program aborts a task which is already aborted. 

task40 

Language feature test of aspects of tasking. This 
program creates a task which aborts itself. 

task41 

Language feature test of aspects of tasking. Simple 
rendezvous. One task in library unit. Accepting 
task will arrive at rendezvous first. 

task42 

Language feature test for aspects of tasking. 

Simple rendezvous with equal priority tasks, one task in 
library unit. 

task43 

Language feature test for aspects of tasking. 

Simple rendezvous with equal priority tasks, both tasks in 
same compilation unit. 

task44a 

i 

Higher priority task becoming eligible to run during 
rendezvous of lower priority tasks. 

task44b 

Higher priority task becoming eligible to 
run during rendezvous of lower priority tasks. 


118 



Problem Test Name 

Problem Test Description 

task45a 

Higher priority task becoming eligible to run during 
running of lower priority task. 

task45b 

Higher priority task becoming eligible to run during 
running of lower priority task. 

task46 

Task with a terminate option which is taken. 

task46x 

Task with a terminate option which is not taken. 

task47 

Bounded buffer with scalar parameter 

task48 

Entries tied to interrupt are called directly. 

task49 

A call to one of an entry family. 

taskSO 

The LRM does not require that there be a unique 
accept statement for each entry. The purpose of this test is 
to present a test problem which has multiple accept 
statements for the same entry to see if this 
introduces additional overhead. 

taskSl 

To dynamically allocate a new record which contains a 
task of higher priority than the allocating task. The 
created task does nothing. This is a test of dynamic 
task creation/termination. 

task52 

To measure the time for a simple rendezvous with a 
task created as a component of a dynamically allocated 
record. The time of task creation/termination is 
excluded. 

taskSS 

To measure the time for a task to abort a different 
task. The aborted task is also created on each 
iteration. 

task54 mod 

To measure the time required when a task specifies 
an inadequate storage-size with a static expression. 

The resulting exception is handled with a null 
statement. 

task55_mod 

To measure the time required when a task specifies 
an inadequate storage size with a dynamic expression. 

The resulting exception is handled with a null 
statement. 


119 



Problem Test Name 

Problem Test Description 

taskSO 

To measure the time required when a task specifies an 
adequate STORAGE-SIZE with a static expression. The 
task body performs a simple call on procO. 

task57 

To measure the time for a simple rendezvous with a 
task created as a component of a dynamically allocated 
record. The time of task creation/termination is 
excluded. 

task58 

To measure the time required when a task has 

multiple open accepts. The accepts can theoretically be done 

in a nondeterministic order. Each open select will 

be accepted one time for each iteration of the 

timing loop. The test notes whether or not the 

accepts were done in lexical order. 

task59 

To evaluate the performance of a task with multiple 
delay alternatives. The LRM permits a select to have 
multiple delay alternatives. 

taskOO 

To measure the time required when a task has 

multiple accepts and is forced to process them in lexical order 

by opening them one at a time in lexical order. This 

is done in order to compare with the 

nondeterministic case. Each select will be opened 

and accepted one time (in lexical order) for each 

iteration of the timing loop. 

task-num-1 

Test the performance of rendezvous when you vary 
the number of tasks. This test has only 1 task. 

task_num-5 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 5. 

task num 10 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 10. 

task num 15 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 15. 

task-num_20 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 20. 


120 







Problem Test. Name 

Problem Test Description 

task num 25 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 25. 

task-num-30 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 30. 

task2-num_l 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 1. 

task2-num-5 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 5. 

task2 num 10 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 10. 

task2 num 15 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 15. 

task2-num-20 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 20. 

task2-num-25 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 25. 

task2-num-30 

Test the performance of rendezvous when you vary 
the number of tasks. This test has 30. This 
will queue up 31 entry calls on one accept before 
being processed. 

triel 

A trie test, this test inserts each of 20 keys 
in the trie in ascending order, and then deletes 
them in descending order. It will fail if a 
duplicate is found during insertion, or if 
a key is not found during deletion. A TRIE is 
also known as a digital search tree. Refer to 

The Art of Computer Programming, Volume 3, Searching 
and Sorting, by D. Knuth, Addison Wesley, 1973, for 


a detailed discussion. 


121 





Problem Test Name 

Problem Test Description 

trie2 

A trie test, this problem searches for each key 
present in trie, and for an equal number of keys 
which are not present in the trie. It will 
fail if the records in the trie are not found, or 
if records which are not in the trie are found. 

Trie size is 20 records. 

unreach 

Optimization test. Systems which do a good job of 
eliminating unreachable code will do well on. 

Primarily a test of space. 

whetl 

classical test (whetstone), general workload 

whet2 

Classical test. Whetstone benchmark with suppression 
of constraint checking. 

whetS 

Classical test. Whetstone benchmark, extended 
precision, checking enabled. 

whet4 

Classical test. Whetstone benchmark, single 
precision, optimize=space, checking suppressed. 






5.2 Appendix II, TEST PROBLEM TO SOURCE FILE MAP 

This appendix provides a cross reference between the test problem name and the file that 
contains it. 


123 




Problem Test Name 

Problem Source File Name 

a-Star 

A-STAR 

ackerl 

HANSON 

acker2 

ACKER2 

activationl 

ACTIVE 

activation2 

ACTIVE 

ai-create.delete-kb 

AIFRAME 

ai-create.object 

AIFRAME 

ai_load-kb_from_file 

AIFRAME 

ai modify object 

AIFRAME 

ai query 

AIFRAME 

aliasl 

ALIAS 

alias2 

ALIAS 

aliasS 

ALIAS 

alias4 

ALIAS 

aliasS 

ALIAS 

aliasSx 

ALIAS 

alias6 

ALIAS 

aliasbx 

ALIAS 

alias? 

ALIAS 

aliasTx 

ALIAS 

alias8 

ALIAS 

aliasSx 

ALIAS 

aliasQ 

ALIAS 

aliaslO 

ALIAS 

aliasll 

ALIAS 

aliasl2 

ALIAS 

aliaslS 

ALIAS 

aliasl4 

ALIAS 

aliaslS 

ALIAS 

aliaslb 

ALIAS 

arti.asum 

ARTI 

arti-atan2 

ARTI 









































Problem Test Name 

Problem Source File Name 

cat3 

SLICE 

ciol 

CIO 

cio2 

CIO 

cio3 

CIO 

cio4 

CIO 

cio5 

CIO 

cio6 

CIO 

cio7 

CIO 

cio8 

CIO 

cio9 

CIO 

ciolO 

CIO 

cioll 

CIO 

ciol2 

CIO 

ciol3 

CIO 

ciol4 

CIO 

ciqsort 

CIQSORT 

cfaimOl 

CLAIMOl 

claim02 

CLAIM02 

claim03 

CLAIM03 

claim04 

CLAIM04 

claimOS 

CLAIM05 

claim06 

CLAIM06 

claim07 

CLAIM07 

claim08 

CLAIM08 

claimOQ 

CLAIM09 

claimlO 

CLAIMIO 

claimll 

CLAIMll 

claiml2 

CLAIM12 

claiml3 

CLAIM13 

claiml4 

CLAIM14 

claiml5 

CLAIM15 

claiml6 

CLAIMi6 

claiml7 

CLAIM17 




Problem Test Name 

Problem Source File Name 

ciaimlS 

CLAIM18 

claimlQ 

CLAIM19 

claim20 

CLAIM20 

claim21 

CLAIM21 

claim22 

CLAIM22 

claim23 

CLAIM23 

claim24 

CLAIM24 

claim25 

CLAIM25 

claim26 

CLAiM26 

claim27 

CLAIM27 

claim28 

CLAIM28 

claim29 

CLAIM29 

claimSO 

CLAIM30 

claim31 

CLAIM31 

claim32 

CLAIM32 

claim33 

CLAIM33 

claim34 

CLAIM34 

claim35 

CLAIM35 

claim36 

CLAIM36 

claim37 

CLAIM37 

claim38 

CLAIM38 

claim39 

CLAIM39 

claim40 

CLAIM40 

claim4i 

CLAIM41 

claim42 

CLAIM42 

claim43 

CLAIM43 

claim44 

CLAIM44 

claim45 

CLAIM45 

claim46 

CLAIM46 

claim47 

CLAIM47 

common 

TECH 

complex recordOl 

C RECORD 

complex-record02 

C.RECORD 






Problem Test Name 

Problem Source File Name 

complex.recordOS 

C RECORD 

complex record04 

C RECORD 

complex recordOS 

C RECORD 

complex record06 

C RECORD 

complex.recordO? 

C-RECORD 

complex.recordOS 

C-RECORD 

complex_record09 

C_RECORD 

consistent! 

CON 

consistent2 

CON 

consistentS 

CON 

consistent4 

CON 

consistent5 

CON 

consistent6 

CON 

consistent? 

CON 

crcO 

CRC 

crcl 

CRC 

crc2 

CRC 

crc3 

CRC 

crc4 

CRC 

csel 

CSE 

cse2 

CSE 

cse3 

CSE 

cse4 

CSE 

cse5 

CSE 

cse6 

CSE 

cse? 

CSE 

cse8 

CSE 

cse9 

CSE 

cselO 

CSE 

d library 1 

D LIB 

d library 2 

D LIB 

d library 3 

D LIB 

dJibrary.5 

D_LIB 



Problem Test Name 

Problem Source File Name 

d library 6 

D LIB 

d library 7 

D LIB 

d library 8 

D LIB 

dead 

TECH 

delayl 

DELAYS 

delay2 

DELAYS 

delays 

DELAYS 

delay4 

DELAYS 

delays 

DELAYS 

delayO 

DELAYS 

delay? 

DELAYS 

delays 

DELAYS 

delayQ 

DELAYS 

delaylO 

DELAYS 

delayl 1 

DELAYS 

delayl2 

DELAYS 

delay 13 

DELAYS 

delay 14 

DELAYS 

delay.abortl 

D-ABORT 

delay-abort2 

D-ABORT 

delay-zeroO 

DELAYO 

delay-zerol 

DELAYl-3 

delay-zero2 

bELAYl-3 

delay-zeroS 

DELAYl-3 

delay Jero4 

DELAY4.6 

delay-zero5 

DELAY4.6 

delay-zero6 

DELAY4-6 

delay zeroCx 

DELAY6X 

delay zero? 

DELAY? 

delay zero8 

DELAYS 

desl 

DESl 

des2 

DES2 

des3 

DES3 



Problem Test Name 

Problem Source File Name 

des4 

DES4 

des4a 

DES4 

des5 

DESS 

des5a 

DESS 

des6 

^"DESe 

des6a 

DES6 

des7 

DES7 

des7a 

DES7 

dhrysl 

WITHDRAWN 

dhrysl.mod 

DHRYSl 

dhrys2 

WITHDRAWN 

dhrys2-mod 

DHRYS2 

dhrys3 

WITHDRAWN 

dhrysS mod 

DHRYS3 

elabl 

ELABl 

elablO 

ELAB2 

elab2 

ELABl 

elabS 

ELABl 

elab4 

ELABl 

elabS 

ELABl 

elab6 

ELAB2 

elab7 

ELAB2 

elabS 

ELAB2 

elab9 

ELAB2 

enumJol 

ENUMJO 

enumJo2 

ENUMJO 

enumJoS 

ENUMJO 

enum io4 

ENUM 10 

enum io5 

ENUM 10 

enum io6 

ENUM 10 

enum io7 

ENUM 10 

enum io8 

ENUM 102 

enumJoQ 

ENUMJ03 






Problem Test Name 

Problem Source File Name 

ew 

EW 

filterl 

FILTER 

filterli 

FILTER 

filter2 

FILTER 

filter2i 

FILTER 

filters 

FILTER 

filter4 

FILTER 

firthl 

FIRTH 

firthlx 

FIRTH 

firth2 

FIRTH 

firth2x 

FIRTH 

firth2y 

FIRTH 

firths 

FIRTH 

firthSx 

FIRTH 

firth4 

FIRTH 

firth4x 

FIRTH 

firths 

FIRTH 

firthSv 

FIRTH 

firthSw 

FIRTH 

firthSx 

FIRTH 

firthSy 

FIRTH 

firthSz 

FIRTH 

firths 

FIRTH 

firthSx 

FIRTH 

firth? 

FIRTH 

firth7x 

FIRTH7X 

fold 

WITHDRAWN 

foldl 

FOLD 

fold2 

FOLD 

folds 

FOLD 

fold4 

FOLD 

folds 

FOLD 

folds 

FOLD 




Problem Test Name 

Problem Source File Name 

fold? 

FOLD 

folds 

FOLD 

fold mod 

TECH 

forward eulerl 

SA8TEST 

forward_euler2 

SA8TEST 

funcexcp 

FUNCEXCP 

gamm 

GAMM 

gamm2 

GAMM2 

heapify 

CFA 

idioms 

TECH 

instl 

INST 

inst2 

INST 

inst3 

INST 

inst4 

INST 

inst5 

INST 

int 0 

INT 0 

int 1 

(NT 1 

int 2 

INT 2 

int.3 

INT.3 

int .4 

INT-4 

int-5 

INT-5 

int-6 

INT-6 

int.7 

INT-7 

int-8 

INT-8 

int.9 

INT-9 

invar 

TECH 

ioO 

lOTESTl 

iol 

lOTESTl 

io2 

lOTESTl 

io3 

lOTESTl 

io4 

lOTESTl 

io5 

lOTESTl 

io6 

lOTESTl 


132 





io7 


io8 


io9 


iolO 


1 
2 
3 

1014 

1015 

1016 


iol7 


iol8 


iol9 


io20 


io21 


io22 


io23 


io24 


25 

26 ‘ 

1027 . 

1028 

1029 

1030 


io-80-20-1 


io.80-20-2 


io.80-20-3 


io 80 20 4 


io 80 20 5 


io 80 20 6 


io 80 20 7 


io 80 20 8 


Problem Source File Name 


lOTESTl 


lOTESTl 


lOTESTl 


lOTESTl 


IOTEST2 

I0TEST2 

IOTEST2 

l6tEST2 

IOTESI2 

I0TEST2 


IOTEST3 


IOTEST3 


IOTEST3 


IOTEST3 


IOTEST3 


I0TEST3 


I0TEST3 


IOTEST4 


IOTEST4 

I0TEST4 


IOTEST4 

|6tEST4 

l6TESt4 

l6tEST4 


' IO.80A 
‘ IO-80A 
' IO-80A 
A 

0 808 
0 808 
8 
8 

0-808 


















































Problem Test Name 

Problem Source File Name 

io 80 20 10 

10 80B 

io copyl 

10 COPY 

io-Copy2 

10 COPY 

io copyS 

10 COPY 

io-copy4 

lO-COPY 

ioJnterl 

lO-INTER 

ioJnter2 

lOJNTER 

ioJnterS 

lO-INTER 

io-tneml 

lO.MEM 

io-mem2 

lO-MEM 

io_mem3 

lO-MEM 

io-patternl 

10-PAT 

io.pattern2 

10-PAT 

io patterns 

10 PAT 

io pattern4 

10 PAT 

io patterns 

10 PAT 

io patterns 

10 PAT 

io pattern? 

10 PAT 

io-patternS 

10-PAT 

io.recurl 

lO-RECUR 

io-recur2 

lO-RECUR 

io.recurS 

lO-RECUR 

io-scanl 

10-SCAN 

io_scan2 

10-SCAN 

io_scan2x 

10-SCAN 

io_scan3 

10-SCAN 

io-Scan4 

10-SCAN 

io scan5 

10 SCAN 

io scan6 

10 SCAN 

io scan? 

10 SCAN 

io scan8 

10 SCAN 

io scanll 

10 SCAN3 

io.scanl2 

I0-SCAN3 










Problem Test Name 

Problem Source File Name 

io scanl3 

10 SCAIM4 

io scan14 

10 SCAN4 

io scanl5 

10 SCAN4 

io scan16 

10 SCAN5 

io-Scanl7 

I0-SCAN5 

io-scanl8 

I0-SCAN5 

io-unifl 

lO-UNIFl 

io_unif2 

lO-UNIFl 

io_unif3 

lO-UNIFl 

io_unif4 

lO-UNIFl 

io-unifB 

I0-UNIF2 

io-unif6 

I0-UNIF2 

iqsort 

SORT 

kalman 

KALMAN 

kernel 1 

KERNELl 

kernel2 

KERNEL2 

kernels 

KERNELS 

kernel4 

KERNEL4 

kernels 

KERNELS 

kernel6 

KERNELS 

kernel? 

KERNEL? 

kernels 

KERNELS 

kernelQ 

KERNEL9 

kernellO 

KERNELIO 

kernelll 

KERNELll 

kernel 12 

KERNEL12 

kernellS 

KERNEL13 

kernell4 

KERNEL14 

kernellB 

KERNELIS 

kernell6 

KERNEL16 

kernel 16 goto 

KERNEL16 

kernell? 

KERNELl? 

kernellS 

KERNELIS 






Problem Test Name 

Problem Source File Name 

kernel 19 

KERNEL19 

kernel20 

KERNEL20 

kernel21 

KERNEL21 

kernel22 

KERNEL22 

kernel23 

KERNEL23 

kernel24 

KERNEL24 

label 

LABEL 

loopO 

LOOPO 

loopl 

LOOPl 

loop2 

L00P2 

loop3 

L00P3 

loop4a 

L00P4A 

loop4b 

L00P4B 

loop4c 

L00P4C 

loop5 

LOOPS 

loop6 

L00P6 

loop? 

LOOP? 

loop8 

LOOPS 

loop9 

L00P9 

looplO 

LOOPlO 

loopll 

LOOPll 

loopl2 

L00P12 

loopl3 

L00P13 

loop 14 

L00P14 

loopl5 

L00P15 

loopl6 

LOOP16 

loopl? 

LOOPl? 

lu 

CFA 

mergel 

SORT 

merge2 

SORT 

neural 

NEURAL 

purel 

PURE 

pure2 

PURE 








Problem Test Name 

Problem Source File Name 

pure3 

PURE 

pure4 

PURE 

pure5 

PURE 

pure6 

PURE 

pure? 

PURE 

pureS 

PURE 

puzzle 

HANSON 

qsortl 

SORT 

qsort2 

SORT 

queens 

WITHDRAWN 

queens.mod 

QUEENS 

reclaim.collection.constrained 

RECLAIM 

reclaim-collection-unconstrained 

RECLAIM 

reclaim global heap constrained 

RECLAIM 

reclaim global heap unconstrained 

RECLAIM 

reed Solomon 0 

REED 

reed solomon 1 

REED 

reed solomon 2 

REED 

reed-solomon.3 

REED 

reed_solomon-4 

REED 

runge 

CFA 

S-library_l 

S-LIB 

sJibrary_2 

S-LIB 

s-library-3 

S-LIB 

sJibrary-5 

S-LIB 

S-library-6 

S-LIB 

s-library-7 

S-LIB 

s library 8 

S LIB 

search 

HANSON 

shelll 

SORT 

shell2 

SORT 

sieve 

HANSON 

simulate-bmbat 

SIMULATE 





Problem Test Name 

Problem Source File Name 

simulate emrpm 

SIMULATE 

simulate hmproto 

SIMULATE 

simulate qmpitch 

SIMULATE 

simulate.rcwfrdet 

SIMULATE 

simulate-umnav 

SIMULATE 

simulate-kmdump 

SIMULATE 

simulate-rmkeying 

SIMULATE 

slicel 

SLICE 

siice2 

SLICE 

slice3 

SLICE 

slice4 

SLICE 

slice5 

SLICE 

slice6 

SLICE 

slice? 

SLICE 

slices 

SLICE 

ssO 

S0000T14 

ssl 

S0000T14 

ss2 

S0000T14 

s£2-modl 

S0000T14 

ss2-mod2 

S0000T14 

ss3 

S0000T14 

ss4 

S0000T14 

ss5 

S0000T14 

ss6 

S0000T14 

ss7 

S0000T14 

ss8 

S0000T14 

ss8-mod 

S0000T14 

ss9 

S0000T14 

sslO 

S0000T14 

ssll 

S0000T14 

ssl2 

S0000T14 

ssl3 

S0000T14 

ssl4 

S0000T14 








Problem Test Name 

Problem Source File Name 

ssl5 

S0015T29 

ssl6 

S0015T29 

ssl7 

S0015T29 

ssl8 

S0015T29 

ssl9 

S0015T29 

ss20 

S0015T29 

ss21 

S0015T29 

ss22 

S0015T29 

ss23 

S0015T29 

ss24 

S0015T29 

ss25 

S0015T29 

ss26 

S0015T29 

ss27 

S0015T29 

ss28 

S0015T29 

ss29 

S0015T29 

ss30 

S0030T44 

ss31 

S0030T44 

ss32 

S0030T44 

ss33 

S0030T44 

ss34 

S0030T44 

ss35 

S0030T44 

ss36 

S0030T44 

ss37 

S0030T44 

ss38 

S0030T44 

ss39 

S0030T44 

ss40 

S0030T44 

ss41 

S0030T44 

ss41 mod 

S0030T44 

ss42 

S0030T44 

ss42 mod 

' S0030T44 

ss43 

S0030T44 

ss44 

S0030T44 

ss45 

S0045T59 



Problem Test Name 

Problem Source File Name 

ss46 

S0045T59 

ss47 

S0045T59 

ss48 

S0045T59 

ss49 

S0045T59 

ss50 

S0045T59 

ss51 

S0045T59 

ss52 

S0045T59 

ss53 

S0045T59 

ss54 

S0045T59 

ss55 

S0045T59 

ss56 

S0045T59 

ss57 

S0045T59 

ss58 

S0045T59 

ss59 

S0045T59 

ss60 

S0060T74 

ss61 

S0060T74 

ss62 

S0060T74 

ss63 

S0060T74 

ss64 

S0060T74 

ss65 

S0060T74 

ss66 

S0060T74 

ss67 

S0060T74 

ss68 

S0060T74 

ss69 

S0060T74 

ss70 

S0060T74 

ss71 

S0060T74 

ss72 

S0060T74 

ss73 

S0060T74 

ss74 

1 

S0060T74 

ss75 

S0075T89 

ss76 

S0075T89 

ss77 

S0075T89 

ss78 

S0075T89 


Problem Test Name 

Problem Source File Name 

ss79 

S0075T89 

ss80 

S0075T89 

ss81 

S0075T89 

ss82 

S0075T89 

ss83 

S0075T89 

ss84 

S0075T89 

ss85 

S0075T89 

ss86 

50075189 

ss87 

S0075T89 

ss88 

S0075T89 

ss89 

S0075T89 

ss90 

S0090T04 

ss91 

S0090T04 

ss92 

S0090T04 

ss93 

S0090T04 

ss94 

S0090T04 

ss95 

WITHDRAWN 

ss95 mod 

S0090T04 

ss96 

WITHDRAWN 

ss96-mod 

S0090T04 

ss97 

WITHDRAWN 

ss97-mod 

S0090T04 

ss98 

WITHDRAWN 

ss98-mod 

S0090T04 

ss99 

S0090T04 

sslOO 

S0090T04 

sslOl ! 

S0090T04 

ssl02 

S0090T04 

ssl03 

S0090T04 

ssl04 

S0090T04 

sslOS 

S0105T19 

sslOe 

S0105T19 

ssl07 

S0105T19 








Problem Test Name 

Problem Source File Name 

ssl08 

S0105T19 

sslOQ 

S0105T19 

ssllO 

S0105T19 

sslll 

S0105T19 

ssll2 

S0105T19 

ssll3 

S0105T19 

ssil4 

S6105T19 

ssll5 

S0105T19 

ssll6 

50105719 

ssll7 

S0105T19 

ssll8 

S0105T19 

ssll9 

S0105T19 

ssl20 

S0120T34 

ssl21 

S0120T34 

ssl22 

S0120T34 

ssl23 

S0120T34 

ssl24 

S0120T34 

ssl25 

S0120T34 

ssl26 

S0120T34 

ssl27 

S0120T34 

ssl28 

S0120T34 

ssl29 

S0120T34 

ssl30 

S0120T34 

ssl31 

S0120T34 

ssl32 

S0120T34 

ssl33 

S0120T34 

ssl34 

S0120T34 

ssl35 

S0135T48 

ssl36 

S0135T48 

ssl37 

S0135T48 

ssl38 

S0135T48 

ssl39 

S0135T48 

ssl40 

S0135T48 





Problem Test Name 

Problem Source File Name 

ssl41 

S0135T48 

ssl42 

S0135T48 

ssl43 

S0135T48 

ssl44 

S0135T48 

ssl45 

S0135T48 

ssl46 

S0135T48 

ssl47 

S0135T48 

ssl48 

S0135T48 

ssl49 

S0149T61 

ssl50 

S0149T61 

ssl51 

S0149T61 

ssl52 

S0149T61 

ssl53 

S0149T61 

ssl54 

S0149T61 

ssl55 

S0149T61 

ssl56 

S0149T61 

ssl57 

S0149T61 

ssl58 

S0149T61 

ssl59 

S0149T61 

ssl60 

S0149T61 

ssl61 

S0149T61 

ssl62 

S0162T67 

ssl63 

S0162T67 

ssl64 

S0162T67 

ssl65 

S0162T67 

ssl66 

S0162T67 

ssl67 

50162T67 

ssl68 

S0168T75 

ssl69 

S0168T75 

ssl70 

S0168T75 

ssl71 

S0168T75 

ssl72 

S0168T75 

ssl73 

S0168T75 



Problem Test. Name 

Problem Source File Name 

ssl74 

S0168T75 

ssl75 

S0168T75 

ssl76 

S0176T82 

ssl77 

S0176T82 

ssl78 

S0176T82 

ssl79 

S0176T82 

ssl80 

S0176T82 

ssl81 

S0176T82 

ssl82 

S0176T82 

ssl83 

S0183T97 

ssl84 

S0183T97 

ssl85 

S0183T97 

ssl86 

S0183T97 

ssl87 

S0183T97 

ssl88 

S0183T97 

ssl89 

S0183T97 

ssl90 

S0183T97 

ssl91 

S0183T97 

ssl92 

S0183T97 

ssl93 

S0183T97 

ssl94 

S0183T97 

ssl95 

S0183T97 

ssl96 

S0183T97 

ssl97 

S0183T97 

ssl98 

S0198T12 

ssl99 

S0198T12 

ss200 ' 

S0198T12 

ss201 

S0198T12 

ss202 

S0198T12 

ss203 

S0198T12 

ss204 

S0198T12 

ss205 

S0198T12 

ss206 

S0198T12 





Problem Test Name 

1 Problem Source File Name 

ss207 

S0198T12 

ss208 

S0198T12 

ss209 

S0198T12 

ss210 

S0198T12 

ss211 

S0198T12 

ss212 

S0198T12 

ss213 

S0213T27 

ss214 

S0213T27 

ss215 

S0213T27 

ss216 

50213727 

ss216-mod 

S0213T27 

ss217 

S0213T27 

ss218 

S0213T27 

ss219 

S0213T27 

ss219 mod 

S0213T27 

ss220 

S0213T27 

ss221 

S0213T27 

ss222 

S0213T27 

SS223 

S0213T27 

ss224 

S0213T27 

ss225 

S0213T27 

ss226 

S0213T27 

ss227 

50213727 

ss228 

S0228f41 

ss229 

50228741 

ss230 

50228741 

ss231 

50228741 

ss232 

50228741 

ss233 

50228741 

ss234 

50228741 

ss235 

50228741 

ss236 

50228741 

ss237 

50228741 


145 



Problem Test Name 

Problem Source File Name 

ss238 

S0228T41 

ss239 

S0228T41 

ss240 

S0228T41 

ss241 

S0228T41 

ss242 

S0242T50 

ss243 

S0242T50 

ss244 

S0242T50 

ss245 

S0242T50 

ss246 

S0242T50 

ss247 

S0242T50 

ss248 

S0242T50 

ss249 

S0242T50 

ss250 

S0242T50 

ss251 

S0251T51 

ss252 

S0252T52 

ss253 

S0253T53 

ss254 

S0254T57 

ss255 

S0254T57 

ss256 

S0254T57 

ss257 

S0254T57 

ss258 ' 

S0258T72 

ss259 

S0258T72 

ss260 

S0258T72 

ss261 

S0258T72 

ss262 

S0258T72 

ss263 

S0258T72 

ss264 

S0258T72 

ss265 

S0258T72 

ss266 

S0258T72 

ss267 

S0258T72 

ss268 

S0258T72 

ss269 

S0258T72 

ss270 

S0258T72 




Problem Test Name 

Problem Source File Name 

ss271 

S0258T72 

ss272 

S0258T72 

ss273 

S0273T85 

ss274 

S0273T85 

ss275 

S0273T85 

ss276 

S0273T85 

ss277 

S0273T85 

ss278 

S0273T85 

ss279 

S0273T85 

ss280 

S0273T85 

ss281 

S0273T85 

ss282 

S0273T85 

ss283 

S0273T85 

ss284 

S0273T85 

ss285 

S0273T85 

ss286 

S0286T00 

ss287 

S0286T00 

ss288 

S0286T00 

ss289 

S0286T00 

ss290 

S0286T00 

ss291 

S0286T00 

ss292 

S0286T00 

ss293 

S0286T00 

ss294 

S0286T00 

ss295 

S0286T00 

ss296 

S0286T00 

ss297 1 

S0286T00 

ss298 

S0286T00 

ss299 

S0286T00 

ss300 

S0286T00 

ss301 

S0301T15 

ss302 

S0301T15 

ss303 

S0301T15 







Problem Test Name 

Problem Source File Name 

ss304 

S0301T15 

ss305 

S0301T15 

ss306 

S0301T15 

ss307 

S0301T15 

ss308 

^$0301715 

ss309 

S0301T15 

ss310 

S0301T15 

ss311 

S0301T15 

ss312 

S0301T15 

ss313 

S0301T15 

ss314 

S0301T15 

ss315 

S0301T15 

ss316 

S0316T30 

ss317 

S0316T30 

ss318 

S0316T30 

ss319 

S0316T30 

ss320 

S0316T30 

ss321 

S0316T30 

ss322 

S0316T30 

ss323 

S0316T30 

ss324 

S0316T30 

ss325 

S0316T30 

ss326 

S0316T30 

ss327 

S0316T30 

ss328 

S0316T30 

ss329 

S0316T30 

ss330 

S0316T30 

ss331 

S0331T45 

ss332 

S0331T45 

ss333 

S0331T45 

ss334 

S0331T45 

ss335 

S0331T45 

ss336 

S0331T45 




Problem Test Name 

Problem Source File Name 

ss337 

S0331T45 

ss338 

S0331T45 

ss339 

S0331T45 

ss340 

S0331T45 

ss341 

S0331T45 

ss342 

S0331T45 

ss343 

S0331T45 

ss344 

S0331T45 

ss345 

S0331T45 

ss346 

S0346T53 

ss347 

S0346T53 

ss348 

S0346T53 

ss349 

S0346T53 

ss350 

S0346T53 

ss351 

S0346T53 

ss352 

S0346T53 

ss353 

S0346T53 

ss354 

S0354T68 

ss355 

S0354T68 

ss356 

S0354T68 

ss357 

S0354T68 

ss358 

S0354T68 

ss359 

S0354T68 

ss360 

S0354T68 

ss361 

S0354T68 

ss362 

S0354T68 

ss363 

S0354T68 

ss364 

S0354T68 

ss365 

S0354T68 

ss366 

S0354T68 

ss367 

S0354T68 

ss368 

S0354T68 

ss369 

S0369T78 





Problem Test Name 

Problem Source File Name 

ss370 

S0369T78 

ss371 

S0369T78 

ss372 

S0369T78 

ss373 

S0369T78 

ss374 

S0369T78 

ss375 

S0369T78 

ss376 

S0369T78 

ss377 

S0369T78 

ss378 

S0369T78 

ss379 

S0379T93 

ss380 

S0379T93 

ss381 

S0379T93 

ss382 

S0379T93 

ss383 

S0379T93 

ss384 

S0379T93 

ss385 

S0379T93 

ss385x 

S0379T93 

ss386 

S0379T93 

ss387 

S0379T93 

ss388 

S0379T93 

ss389 

S0379T93 

ss390 

S0379T93 

ss391 

S0379T93 

ss392 

S0379T93 

ss393 

S0379T93 

ss394 

S0394T08 

ss395 

S0394T08 

ss396 

S0394T08 

ss397 

S0394T08 

ss398 

S0394T08 

ss399 

S0394T08 

ss400 

S0394T08 

ss401 

S0394T08 





Problem Test Name 

Problem Source File Name 

ss402 

S0394T08 

ss403 

S0394T08 

ss404 

S0394T08 

ss405 

S0394T08 

ss406 

S0394T08 

ss407 

S0394T08 

ss408 

S0394T08 

ss409 

S0409T23 

ss410 

S0409T23 

ss411 

S0409T23 

ss412 

S0409T23 

ss413 

S0409T23 

ss414 

S0409T23 

ss415 

S0409T23 

ss416 

S0409T23 

ss417 

50409T23 

ss418 

S0409T23 

ss419 

S0409T23 

ss420 

S0409T23 

ss421 

S0409T23 

ss422 

S0409T23 

ss423 

S0409T23 

ss424 

S0424T38 

ss425 

S0424T38 

ss426 

S0424T38 

ss427 

S0424T38 

ss428 

S0424T38 

ss429 

S0424T38 

ss430 

S0424T38 

ss431 

S0424T38 

ss432 

S0424T38 

ss433 

S0424T38 

ss434 

S0424T38 








Problem Test Name 

Problem Source File Name 

ss435 

S0424T38 

ss436 

S0424T38 

ss437 

S0424T38 

ss438 

S0424T38 

ss439 

S0439T43 

ss440 

S0439T43 

ss441 

S0439T43 

ss442 

S0439T43 

ss443 

S0439T43 

ss444 

S0444T47 

ss445 

S0444T47 

ss446 

S0444T47 

ss447 

S0444T47 

ss448 

S0448T49 

ss449 

S0448T49 

ss450 

S0450T51 

ss451 

S0450T51 

ss452 

S0452T66 

ss453 

S0452T66 

ss454 

S0452T66 

ss455 

S0452T66 

ss456 

S0452T66 

ss457 

50452766 

ss458 

S0452T66 

ss459 

S0452T66 

ss460 

S0452T66 

ss461 

S0452T66 

ss462 

S0452T66 

ss463 

S0452T66 

ss464 

S0452T66 

ss465 

S0452T66 

ss466 

S0452T66 

ss467 

S0467T78 




Problem Test Name 

Problem Source File Name 

ss468 

S0467T78 

ss469 

S0467T78 

ss470 

S0467T78 

ss471 

S0467T78 

ss472 

S0467T78 

ss473 

S0467T78 

ss474 

S0467T78 

ss475 

S0467T78 

ss476 

50467778 

SS477 

S0467T78 

ss478 

S0467T78 

ss479 

S0479T88 

ss480 

S0479T88 

ss481 

S0479T88 

ss482 

S0479T88 

SS483 

S0479T88 

ss484 

S0479T88 

ss485 

S0479T88 

ss486 

S0479T88 

ss487 

S0479T88 

ss488 

S0479T88 

ss489 

S0489T99 

ss490 

S0489T99 

ss491 

S0489T99 

ss492 

S0489T99 

ss493 

S0489T99 

ss494 

S0489T99 

ss495 

S0489T99 

ss496 

S0489T99 

ss497 

S0489T99 

ss498 

S0489T99 

ss499 

S0489T99 

ss500 

S0500T12 



Problem Test Name 

Problem Source File Name 

ss501 

S0500T12 

ss502 

S0500T12 

SS503 

S0500T12 

SS504 

S0500T12 

ss505 

S0500T12 

ss506 

S0500T12 

SS507 

S0500T12 

ss508 

S0500T12 

SS509 

S0500T12 

SS510 

S0500T12 

SS511 

S0500T12 

SS512 

S0500T12 

SS513 

S0513T28 

SS514 

S0513T28 

SS515 

S0513T28 

ss516 

S0513T28 

ss517 

S0513T28 

ss518 

S0513T28 

SS519 

S0513T28 

SS520 

S0513T28 

SS521 

S0513T28 

SS522 

S0513T28 

SS523 

S0513T28 

ss524 

S0513T28 

SS525 

S0513T28 

ss526 

S0513T28 

ss527 

S0513T28 

ss528 

S0513T28 

ss529 

S0529T42 

ss530 

S0529T42 

ss531 

S0529T42 

ss532 

S0529T42 

ss533 

S0529T42 





Problem Test Name 

Problem Source File Name 

ss534 

S0529T42 

ss535 

S0529T42 

ss536 

S0529T42 

ss537 

S0529T42 

ss538 

S0529T42 

ss539 

S0529T42 

ss540 

S0529T42 

ss541 

S0529T42 

ss542 

S0529T42 

ss542x 

S0529T42 

ss543 

S0543T57 

ss544 

S0543T57 

ss545 

S0543T57 

ss546 

S0543T57 

ss547 

S0543T57 

ss548 

S0543T57 

ss549 

S0543T57 

ss550 

S0543T57 

ss551 

S0543T57 

ss552 

S0543T57 

ss553 

S0543T57 

ss554 

S0543T57 

ss555 

S0543T57 

ss556 

S0543T57 

ss557 

S0543T57 

ss558 

S0558T74 

ss559 

S0558T74 

ss560 

S0558T74 

ss561 

S0558T74 

ss561x 

S0558T74 

ss562 

S0558T74 

ss563 

S0558T74 

ss564 

S0558T74 







Problem Test Name 

Problem Source File Name 

ss565 

S0558T74 

ss566 

S0558T74 

ss567 

S0558T74 

ss568 

S0558T74 

ss569 

S0558T74 

ss570 

S0558T74 

ss571 

S0558T74 

ss572 

S0558T74 

ss573 

S0558T74 

ss574 

S0558T74 

ss575 

S0575T89 

ss576 

S0575T89 

ss577 

S0575T89 

ss578 

S0575T89 

ss579 

S0575T89 

ss580 

S0575T89 

ss581 

S0575T89 

ss582 

S0575T89 

ss583 

S0575T89 

ss584 

S0575T89 

ss585 

S0575T89 

ss586 

S0575T89 

ss587 

S0575T89 

ss588 

50575189 

ss589 

S0575T89 

ss590 

S0590T97 

ss591 

S0590T97 

ss592 

S0590T97 

ss593 

S0590T97 

ss594 

S0590T97 

ss595 

S0590T97 

ss596 

S0590T97 

ss597 

S0590T97 




Problem Test Name 

Problem Source File Name 

ss598 

S0598T05 

ss599 

S0598T05 

ss600 

S0598T05 

ss601 

S0598T05 

ss602 

S0598T05 

ss603 

S0598T05 

ss604 

S0598T05 

ss605 

S0598T05 

ss606 

S0606T12 

ss607 

S0606T12 

ss608 

S0606T12 

ss609 

S0606T12 

ss610 

S0606T12 

ss611 

S0606T12 

ss612 

S0606T12 

ss613 

S0613T15 

ss614 

S0613T15 

ss615 

S0613T15 

ss616 

S0616T30 

ss617 

S0616T30 

ss618 

S0616T30 

ss619 

S0616T30 

ss620 

S0616T30 

ss621 

S0616T30 

ss622 

S0616T30 

ss623 

S0616T30 

ss624 

S0616T30 

ss625 

S0616T30 

ss626 

S0616T30 

ss627 

S0616T30 

ss628 

S0616T30 

ss629 

S0616T30 

ss630 

S0616T30 






Problem Test Name 

Problem Source File Name 

ss631 

S0631T44 

ss632 

S0631T44 

ss633 

S0631T44 

ss634 

S0631T44 

ss635 

S0631T44 

ss636 

S0631T44 

ss637 

S0631T44 

ss638 

S0631T44 

ss639 

S0631T44 

ss640 

S0631T44 

ss641 

S0631T44 

ss642 

S0631T44 

ss643 

S0631T44 

ss643x 

S0631T44 

ss644 

S0631T44 

ss645 

S0645T51 

ss646 

S0645T51 

ss647 

S0645T51 

ss648 

S0645T51 

ss649 

S0645T51 

ss650 

S0645T51 

ss651 

S0645T51 

ss652 

S0652T66 

ss653 

S0652T66 

ss654 

S0652T66 

ss655 

S0652T66 

ss656 

S0652T66 

ss657 

S0652T66 

ss658 

S0652T66 

ss659 

S0652T66 

ss660 

S0652T66 

ss661 

S0652T66 

ss662 

S0652T66 







Problem Test Name 

Problem Source File Name 

ss663 

S0652T66 

ss664 

S0652T66 

ss665 

S0652T66 

ss666 

S0652T66 

ss667 

S0667T81 

ss668 

S0667T81 

ss669 

S0667T81 

ss670 

S0667T81 

ss671 

S0667T81 

ss672 

S0667T81 

ss673 

S0667T81 

ss674 

S0667T81 

ss675 

S0667T81 

ss676 

S0667T81 

ss677 

S0667T81 

ss678 

S0667T81 

ss679 

S0667T81 

SS680 

S0667T81 

ss681 

S0667T81 

ss682 

S0682T86 

ss683 

S0682T86 

ss684 

S0682T86 

ss685 

S0682T86 

ss686x 

S0682T86 

ss686y 

S0682T86 

ss687 

S0687T01 

ss688 

S0687T01 

ss689 

S0687T01 

ss690 

50687T01 

ss691 

S0687T01 

ss692 

S0687T01 

ss693 

S0687T01 

ss694 

S0687T01 








Problem Test Name 

Problem Source File Name 

ss695 

S0687T01 

ss696 

S0687T01 

ss697 

S0687T01 

ss698 

S0687T01 

ss699 

S0687T01 

ss700 

S0687f0i 

ss701 

! S0687T01 

ss702 

S0702T16 

ss703 

S0702T16 

ss704 

S0702T16 

ss705 

S0702T16 

ss706 

S0702T16 

ss707 

S0702T16 

ss708 

S0702T16 

ss709 

S0702T16 

ss710 

S0702T16 

ss711 

S0702T16 

ss712 

S0702T16 

ss713 

S0702T16 

55714 

S0702T16 

55715 

S0702T16 

ss716 

50702116 

ss717 

S0717T20 

55718 

S0717T20 

ss719 

S0717T20 

ss720 

S0717T20 

ss721 

X0721T23 

5s722 

X0721T23 

55723 

X0721T23 

557 24 

WITHDRAWN 

ss724 mod 

50724T40 

ss725 

WITHDRAWN 

ss725-mod 

S0724T40 





Problem Test Name 

Problem Source File Name 

ss726 

WITHDRAWN 

ss726 mod 

S0724T40 

ss727 

WITHDRAWN 

ss727 mod 

S0724T40 

ss728 

WITHDRAWN 

ss728-mod 

S0724T40 

ss729 

WITHDRAWN 

ss729-mod 

S0724T40 

ss730 

WITHDRAWN 

ss730-mod 

S0724T40 

ss731 

WITHDRAWN 

ss731-mod 

S0724T40 

ss732 

WITHDRAWN 

ss732 mod 

S0724T40 

ss734 

WITHDRAWN 

ss734 mod 

S0724T40 

ss735 

WITHDRAWN 

ss735 mod 

S0724T40 

ss736 

WITHDRAWN 

ss736-mod 

S0724T40 

ss737 

WITHDRAWN 

ss737-mod 

S0724T40 

ss738 

WITHDRAWN 

ss738-mod 

S0724t40 

ss739 

WITHDRAWN 

ss739-mod 

S0724T40 

ss740 

WITHDRAWN 

ss740 mod 

S0724T40 

ss741 

S0741T41 

ss744 

S0744T46 

ss745 

S0744T46 

ss746 

S0744T46 

ss747 

X0747T47 





Problem Test Name 

Problem Source File Name 

ss748 

S0748T50 

ss7A9 

S0748T50 

ss750 

S0748T50 

ss751 

S0751T57 

ss752 

S0751T57 

ss753 

S0751T57 

ss754 

S0751T57 

ss755 

S0751T57 

ss756 

S0751T57 

ss757 

S0751T57 

ss758 

S0758T60 

ss759 

S0758T60 

ss760 

S0758T60 

ss761 

S0761T63 

ss762 

S0761T63 

ss763 

S0761T63 

ss764 

S0764T78 

ss765 

S0764T78 

ss766 

S0764T78 

ss767 

50764178 

ss768 

50764178 

ss769 

50764T78 

ss770 

50764T78 

ss771 

50764T78 

ss772 

50764T78 

ss773 

50764T78 

ss774 

50764T78 

ss775 

50764T78 

ss776 

50764T78 

ss777 

1 S0764T78 

ss778 

50764T78 

ss779 

50779T88 

ss780 

50779T88 







Problem Test Name 

Problem Source File Name 

ss781 

S0779T88 

SS782 

S0779T88 

ss783 

S0779T88 

ss784 

S0779T88 

ss785 

S0779T88 

ss786 

S0779T88 

ss787 

S0779T88 

ss788 

S0779T88 

ss789 

S0789T98 

ss790 

S0789T98 

ss791 

S0789T98 

ss792 

S0789T98 

ss793 

S0789T98 

ss794 

S0789T98 

ss795 

S0789T98 

ss796 

S0789T98 

ss797 

S0789T98 

ss798 

S0789T98 

ss799 

S0799T05 

ss800 

S0799T05 

ss801 

S0799T05 

ss802 

S0799T05 

ss803 

S0799T05 

ss804 

S0799T05 

ss805 

S0799T05 

ss806 

S0806T11 

ss807 

S0806T11 

ss808 

S0806T11 

ss809 

S0806T11 

ss810 

S0806T11 

ss811 

S0806T11 

ssearch 

SSEARCH 

ssearch2 

SSEARCH2 






Problem Test Name 

Problem Source File Name 

strength 

TECH 

tak 

TAK 

target 

CFA 

taskl 

TASKl 

task2 

TASK2 

tasks 

TASKS 

task4 

TASK4 

tasks 

TASKS 

tasks 

TASK6 

task? 

TASK? 

tasks 

TASKS 

task9 

TASK9 

tasklO 

TASK 10 

taskll 

TASKll 

taskl2 

TASK12 

tasklS 

TASKIS 

task14 

TASK 14 

tasklS 

TASKIS 

tasklS 

TASK 16 

taskl? 

TASKl? 

tasklS 

TASKIS 

tasklQ 

TASK 19 

task20 

TASK20 

task21 

TASK21 

task22 

TASK22 

task23 

TASK2S 

task24 

TASK24 

task25 

TASK2S 

task26 

TASK26 

task2? 

TASK2? 

task28 

TASK2S 

task29 

TASK29 

taskSO 

TASK30 











Problem Test Name 

Problem Source File Name 

taskSl 

TASK31 

task32 

TASK32 

task33 

TASK33 

task34 

TASK34 

task34-delta 

TASK34 

task35 

TASK35 

task35_delta 

TASK35 

task36 

TASK36 

task37a 

TASK37 

task37b 

TASK37 

task38 

TASK38 

task39 

TASK39 

task40 

TASK40 

task41 

TASK41 

task42 

TASK42 

task43 

TASK43 

task44a 

TASK44 

task44b 

TASK44 

task45a 

TASK45 

task45b 

TASK45 

task46 

TASK46 

task46x 

TASK46 

task47 

TASK47 

task48 

TASK48 

task49 

TASK49 

taskbO 

TASK50 

taskSl 

TASK51 

task52 

TASK 52 

task53 

TASK53 

task54 

WITHDRAWN 

task54 mod 

TASK54 

taskSS 

WITHDRAWN 

taskSS.mod 

TASKSS 







Problem Test Name 

Problem Source File Name 

task56 

TASK56 

task57 

TASK57 

task58 

TASK58 

task59 

TASK59 

task60 

TASK60 

task-num-1 

TASKSYS 

task-num-5 

TASKSYS 

task-num.lO 

TASKSYS 

task-num-15 

TASKSYS 

task_num-20 

TASKSYS 

task-num-25 

TASKSYS 

task-num-30 

TASKSYS 

task2-num-l 

TASKSYS2 

task2 num 5 

TASKSYS2 

task2 num 10 

TASKSYS2 

task2 num 15 

TASKSYS2 

task2 num 20 

TASKSYS2 

task2 num 25 

TASKSYS2 

task2-num_30 

TASKSYS2 

triel 

TRIE 

trie2 

TRIE 

unreach 

TECH 

whetl 

WHETl 

whet2 

WHET2 

whet3 

WHET3 

whet4 

WHET4 








5.3 Appendix III, TAPE DESCRIPTION 

This appendix contains a complete list of the 697 files on the delivery tape. These files use 
approximately 8.2 megabytes of disk storage. 


ACKER2.A 

ALIAS.A 

ASYNCl.A 

ASYNC4.A 

A STAR.A 

CIQSORT.A 

CLAIM03.A 

CLAIM06.A 

CLAIM09.A 

CLAIM12.A 

CLAIM15.A 

CLAIM18.A 

CLAIM21.A 

CLAIM24.A 

CLAIM27.A 

CLAIM30.A 

CLAIM33.A 

CLAIM36.A 

CLAIM39.A 

CLAIM42.A 

CLAIM45.A 

CLEANUP.DBG_FILES.COM 

CMP.ACEC.UNX 

CMP DIFF NAMES.COM 

CMP T.UNX 

CMP_TST.PR.UNX 

COMPILE.BASELINE.COM 

COMPILE TOOLS.COM 

COMP.TIME.VAX 


Tape Description 


ACTIVE.A 

ARTI.A 

ASYNC2.A 

ASYNC5.A 

CFA.A 

CLAIMOl.A 

CLAIM04.A 

CLAIM07.A 

CLAIMIO.A 

CLAIM13.A 

CLAIM16.A 

CLAIM19.A 

CLAIM22.A 

CLAIM25.A 

CLAIM28.A 

CLAIM31.A 

CLAIM34.A 

CLAIM37.A 

CLAIM40.A 

CLAIM43.A 

CLAIM46.A 

CMP.COM 

CMP.BASE.UNX 

CMP DIFF NAMES,UNX 

CMP TOOLS.UNX 

COMPILE.ACEC.COM 

COMPILE.FORMAT.COM 

COMP TIME.ADA 

CON.A 


AIFRAME.A 

ASMNUL.MAR 

ASYNC3.A 

AVL.A 

CIO.A 

CLAIM02.A 

CLAIM05.A 

CLAIM08.A 

CLAIMll.A 

CLAIM14.A 

CLAIM17.A 

CLAIM20.A 

CLAIM23.A 

CLAIM26.A 

CLAIM29.A 

CLAIM32.A 

CLAIM35.A 

CLAIM38.A 

CLAIM41.A 

CLAIM44.A 

CLAIM47.A 

CMP.1-DBG.COM 

CMP.CK.COM 

CMP SP COM 

CMP TS.UNX 

COMPILE.AND.RUN.COM 

COMPILE.TEST.SUITE.COM 

COMP TIME.DUMMY 

CRC.A 


167 



Tape Description 


CSE.A 

DBG01.COM 

DBG02.ADA 

DBG02.T.COM 

DBG03 T.ADA 

DBG04.COM 

DBG05.ADA 

DBG06.COM 

DBG07 T.ADA 

DBG08.COM 

DBGIO.ADA 

DBG11.COM 

DBG12B.ADA 

DBG14.T.ADA 

DBG15.COM 

DBG16 1.COM 

DBG17.COM 

DBG19.ADA 

DBG20.COM 

DBG21 T.ADA 

DBG22.COM 

DBG24.ADA 

DBG25.COM 

DBG27.ADA 

DBG28.COM 

DBG-TEMPLATE.TXT 

DBL MATH.PORT 

DELAY1.3.A 

DELAY7.A 

DEPTEST.ADA 

DES3.A 

DES6.A 

DHRYS2.A 

DIAGFILL.COM 

DIAGREAD.ADA 

DIA-E02A.ADA 


C RECORD.A 

DBGOl-T.ADA 

DBG02.COM 

DBG03.ADA 

DBG03 T.COM 

DBG04-T.ADA 

DBG05.COM 

DBG07.ADA 

DBG07 T.COM 

DBG09.ADA 

DBG10.COM 

DBG12A.ADA 

DBG13-T.ADA 

DBG14.T.C0M 

DBG16.ADA 

DBG16 2.C0M 

DBG18.ADA 

DBG19.COM 

DBG20.T.ADA 

DBG21 T.COM 

DBG23.ADA 

DBG24.COM 

DBG26 T.ADA 

DBG27.COM 

DBG29.ADA 

DBL-MATH.ADA 

DBL MATHTEST.ADA 

DELAY4.6.A 

DELAY8.A 

DESl.A 

DES4.A 

DES7.A 

DHRYS3.A 

DIAGLINK.COM 

DIA EOIA.ADA 

DIA.E02B.ADA 


DBGOl.ADA 

DBG01-T.COM 

DBG02-T.ADA 

DBG03.COM 

DBG04.ADA 

DBG04-T.COM 

DBG06.ADA 

DBG07.COM 

DBG08.ADA 

DBG09.COM 

DBGll.ADA 

DBG12A.COM 

DBG13-T.COM 

DBG15.ADA 

DBG16.COM 

DBG17.ADA 

DBG18.COM 

DBG20.ADA 

DBG20.T.COM 

DBG22.ADA 

DBG23.COM 

DBG25.ADA 

DBG26-T.COM 

DBG28.ADA 

DBG29.COM 

DBL-MATH.DEC 

DELAYO.A 

DELAY6X.A 

DELAYS.A 

DES2.A 

DES5.A 

DHRYSl.A 

DIAGCOMP.COM 

DIAGNOS.COM 

DIA EOIB.ADA 

DIA-E03A.ADA 






Tape Description 


DIA E03B.ADA 

DIA-E03E.ADA 

DIA-E03H.ADA 

DIA-E04B.ADA 

DIA E05B.ADA 

DIA_E07A.ADA 

DIA_E08B,ADA 

DIA EllA.ADA 

DIA-E12C.ADA 

DIA-E13A.ADA 

DIA-E16A.ADA 

DIA E17B.ADA 

DIA,L02B.ADA 

DIA.L03A.ADA 

DIA.L04A.ADA 

DIA ROIA.ADA 

DIA.R02C.ADA 

DIA_R04A.ADA 

DIA.R05B.ADA 

DIA W02A.ADA 

DIA.W03A.ADA 

DIA-W04C.ADA 

DIA W05B.ADA 

DIA W07A.ADA 

DIA-WlOA.ADA 

DIA-W13A.ADA 

DIA W14B.ADA 

DIA-W15C.ADA 

DIA-W18A.ADA 

D-LIB.A 

ENUM lO.A 

EW.A 

FIRTH7X.A 

FORMAT.COM 

GAMMA 

GETADR.MAR 


DIA E03C.ADA 

DIA_E03F.ADA 

DIA-E03I.ADA 

DIA-E04C.ADA 

DIA E05C.ADA 

DIA-E07B.ADA 

DIA-E09A.ADA 

DIA E12A.ADA 

DIA-E12D.ADA 

DIA-E14A.ADA 

DIA-E16B.ADA 

DIA LOIA.ADA 

DIA-L02C.ADA 

DIA-L03B.ADA 

DIA.L05A.ADA 

DIA R02A.ADA 

DIA.R02D.ADA 

DIA.R04B.ADA 

DIA-WOIA.ADA 

DIA W02B,ADA 

DIA-W04A.ADA 

DIA-W04D.ADA 

DIA W05C.ADA 

DIA W08A.ADA 

DIA-WllA.ADA 

DIA-W13B.ADA 

DIA W15A.ADA 

DIA-W16A.ADA 

DIA-W18B.ADA 

ELABl.A 

ENUM I02.A 

FILTER.A 

FOLD.A 

FORMAT.UNX 

GAMM2.A 

GLOBAL.CLOCK 


DIA E03D.ADA 

DIA.E03G,ADA 

DIA-E04A.ADA 

DIA.E05A.ADA 

DIA E06A.ADA 

DIA_E08A.ADA 

DIA-EIOA.ADA 

DIA E12B.ADA 

DIA-E12E.ADA 

DIA.E15A.ADA 

DIA.E17A.ADA 

DIA L02A.ADA 

DIA.L02D.ADA 

DIA.L03C.ADA 

DIA.L05B.ADA 

DIA R02B.ADA 

DIA.R03A.ADA 

DIA.R05A.ADA 

DIA.WOIB.ADA 

DIA W02C.ADA 

DIA.W04B.ADA 

DIA-W05A.ADA 

DIA W06A.ADA 

DIA W09A.ADA 

DIA-W12A.ADA 

DIA.W14A.ADA 

DIA W15B.ADA 

DIA.W17A.ADA 

D-ABORT.A 

ELAB2.A 

ENUM I03.A 

FIRTH.A 

FORMAT.ADA 

FUNCEXCP.A 

GEN MATH.ADA 

GLOBAL.CPU 




Tape Description 


GLOBAL.SIZ 

INCLUDE.COM 

INITTIME.SIZ 

INT-O.A 

INT 3.A 

INT_6.A 

INT-9.A 

I0TEST3.A 

10 80B.A 

lO.MEM.A 

lO-SCAN.A 

10 SCAN5.A 

KALMAN.A 

KERNELll.A 

KERNEL14.A 

KERNEL17.A 

KERNEL2.A 

KERNEL22.A 

KERNEL3.A 

KERNEL6.A 

KERNEL9.A 

LIB.COM 

LIB02.ADA 

LIB03A.ADA 

LIB03-2.ADA 

LIB04-A1.ADA 

LIB04 A4.ADA 

LIB04-B2.ADA 

LIB04-B5.ADA 

LIB05.COM 

LIB07.COM 

LIB08B.ADA 

LIB08E.ADA 

LIB08H.ADA 

LIB08K1.ADA 

LIB08K4.ADA 


HANSON.A 

INITTIME.CLOCK 

INITTIME.TXT 

INT-l.A 

INT 4.A 

INT.7.A 

lOTESTl.A 

I0TEST4.A 

(0 COPY.A 

lO.PAT.A 

I0-SCAN3.A 

10 UNIFl.A 

KERNELl.A 

KERNEL12.A 

KERNEL15.A 

KERNEL18.A 

KERNEL20.A 

KERNEL23.A 

KERNEL4.A 

KERNEL7.A 

LABEL.A 

LIBOl.ADA 

LIB02.COM 

LIB03B2.ADA 

LIB03-B1.ADA 

LIB04-A2.ADA 

LIB04 A5.ADA 

LIB04-B3.ADA 

LIB04X.ADA 

LIB06.COM 

LIB08.COM 

L1B08C.ADA 

LIB08F.ADA 

LIB08I.ADA 

LIB08K2.ADA 

LIB08L1.ADA 


INCLUDE.ADA 

INITTIME.CPU 

INST.A 

INT-2.A 

INT 5.A 

INT-8.A 

I0TEST2.A 

10 80A.A 

10 INTER.A 

lO-RECUR.A 

I0-SCAN4.A 

10 UNIF2.A 

KERNELIO.A 

KERNEL13.A 

KERNEL16.A 

KERNEL19.A 

KERNEL21.A 

KERNEL24.A 

KERNEL5.A 

KERNEL8.A 

LF.SSA 

LIB01.COM 

LIB03.COM 

LIB03 l.ADA 

LIB04.COM 

LIB04.A3.ADA 

LIB04 Bl.ADA 

LIB04.B4.ADA 

LIB05.ADA 

LIB07.ADA 

LIB08A.ADA 

LIB08D.ADA 

LIB08G.ADA 

LIB08K0 ADA 

LIB08K3.ADA 

LIB08L2.ADA 



Tape Description 


LIB08L3.ADA 

LIB08M2.ADA 

LIB09.ADA 

LIBIOA.ADA 

LIB11.COM 

LIB13.COM 

LIB14P.COM 

LIB14P2.ADA 

LIB14P5.ADA 

LIB14P8.ADA 

LIB14S1A.ADA 

LIB14S2.COM 

LIB14S2C.ADA 

LIB16.ADA 

LIB17.COM 

LIB19.ADA 

LOOPO.A 

LOOPll.A 

L00P14.A 

L00P17.A 

L00P4A.A 

L00P5.A 

L00P8.A 

MATH.DEC 


LIB08L4.ADA 

LIB08M1.ADA 

LIB08M3.ADA 

LIB08M4.ADA 

LIB09.COM 

LIB10.COM 

LIBIOB.ADA 

LIBll.ADA 

LIB12.COM 

LIB13.ADA 

LIB14.COM 

LIB14D.COM 

LIB14P1.ADA 

LIB14P10.ADA 

LIB14P3.ADA 

LIB14P4.ADA 

LIB14P6.ADA 

LIB14P7.ADA 

LIB14P9.ADA 

LIB14S1.COM 

LIB14S1B.ADA 

LIB14S1C.ADA 

LIB14S2A.ADA 

LIB14S2B.ADA 

LIB15.ADA 

L1B15.COM 

LIB16.COM 

LIB17.ADA 

LIB18.ADA 

LIB18.COM 

LIB19.COM 

LIB TEMPLATE.TXT 

LOOPl.A 

LOOPIO.A 

L00P12.A 

L00P13.A 

L00P15.A 

L00P16.A 

L00P2.A 

L00P3.A 

L00P4B.A 

L00P4C.A 

L00P6.A 

L00P7.A 

L00P9.A 

MATH.ADA 

MATH.PORT 

MATHTEST.ADA 


MATH-DEPENDENT.DEC MATI 
MEDIAN.ADA MED 

MED DATA CONSTRUCTOR.ADA 
MED.DATA-CONSTRUCTOR.UNX 


MATH-DEPENDENT.PORT 
MEDIAN.COM MEDIAN.UNX 


NEURAL.A 

PROPOSAL.STY 

RAN16.ADA 

RECLAIM.A 

RUN-ACEC.COM 

RUN-TST-PR.UNX 

S0030T44.A 

S0075T89.A 


OPT.SSA 

PURE.A 

RAN32.ADA 

REED.A 

RUN.ACEC.UNX 

S0000T14.A 

S0045T59.A 

S0090T04.A 


MED DATA CONSTRUCTOR.COM 
MSC.ADA 

PREPARE-DBG-DIR.COM 

QUEENS.A 

READ2.TEX 

RTS.SSA 

RUN-TEST-PROGRAMS.COM 

S0015T29.A 

S0060T74.A 

S0105T19.A 


171 



Tape Description 


S0120T34.A 

S0135T48.A 

S0162T67.A 

S0168T75.A 

S0183T97.A 

S0198T12.A 

S0228T41.A 

S0242T50.A 

S0252T52.A 

S0253T53.A 

S0258T72.A 

S0273T85.A 

S0301T15.A 

S0316T30.A 

S0346T53.A 

S0354T68.A 

S0379T93.A 

S0394T08.A 

S0424T38.A 

S0439T43.A 

S0448T49.A 

S0450T51.A 

S0467T78.A 

S0479T88.A 

S0500T12.A 

S0513T28.A 

S0543T57.A 

S0558T74.A 

S0590T97.A 

S0598T05.A 

S0613T15.A 

S0616T30.A 

S0645T51.A 

S0652T66.A 

S0682T86.A 

S0686T86.A 

S0702T16.A 

S0717T20.A 

S0724T40.A 

S0741T41.A 

S0747T47.A 

S0748T50.A 

S0758T60.A 

S0761T63.A 

S0779T88.A 

S0789T98.A 

S0806T11.A 

SA8TEST.A 

SETUP-TEST-PROGRAMS.COM 

SIZE.ADA 

SIZE.DUMMY 

SLICE.A 

SORT.A 

SPACEI.ADA 

SPACER.ADA 

SSA.ADA 

SSA.TXT 

SSEARCH2.A 

STARTIME.CLOCK 

STARTIME.SIZ 

STARTIME.TXT 

STOPTIMEO.CPU 

STOPTIMEO.SIZ 

ST0PTIME2.CLOCK 

ST0PTIME2.CPU 

ST0PTIME2.TXT 

STYLE.SSA 

S LIB.A 

TAKA 

TASKIO.A 

TASKll.A 


S0149T61.A 

S0176T82.A 

S0213T27.A 

S0251T51.A 

S0254T57.A 

S0286T00.A 

S0331T45.A 

S0369T78.A 

S0409T23.A 

S0444T47.A 

S0452T66.A 

S0489T99.A 

S0529T42.A 

S0575T89.A 

S0606T12.A 

S0631T44.A 

S0667T81.A 

S0687T01.A 

S0721T23.A 

S0744T46.A 

S0751T57.A 

S0764T78.A 

S0799T05.A 

SETUP DBG.COM 

51MULATE.A 

SIZE.VAX 

SPACEO.ADA 

SPACES.ADA 

SSEARCH.A 

STARTIME.CPU 

STOPTIMEO.CLOCK 

STOPTIMEO.TXT 

ST0PTIME2.SIZ 

SY5NAMES.TXT 

TA5K1.A 

TASK12.A 


172 




Tape Description 


TASK13.A 

TASK16.A 

TASK19.A 

TASK21.A 

TASK24.A 

TASK27.A 

TASK3.A 

TASK32.A 

TASK35.A 

TASK38.A 

TASK40.A 

TASK43.A 

TASK46.A 

TASK49.A 

TASK51.A 

TASK54.A 

TASK57.A 

TASK6.A 

TASK8.A 

TASKSYS2.A 

TESTCALl.ADA 

TIME.DUMMY 

USER2.TEX 

WHET2.A 

X0721T23.A 


TASK14.A 

TASK17.A 

TASK2.A 

TASK22.A 

TASK25.A 

TASK28.A 

TASK30.A 

TASK33.A 

TASK36.A 

TASK39.A 

TASK41.A 

TASK44.A 

TASK47.A 

TASK5.A 

TASK52.A 

TASK55.A 

TASK58,A 

TASK60.A 

TASK9.A 

TECH.A 

TESTCAL2.ADA 

TIME.VAX 

VDD2.TEX 

WHET3.A 

X0747T47.A 


TASK15.A 

TASK18.A 

TASK20.A 

TASK23.A 

TASK26.A 

TASK29.A 

TASK31.A 

TASK34.A 

TASK37.A 

TASK4.A 

TASK42.A 

TASK45.A 

TASK48.A 

TASK50.A 

TASK53.A 

TASK56.A 

TASK59.A 

TASK7,A 

TASKSYS.A 

TEMPLATE.DIA 

TIME.ADA 

TRIE.A 

WHETl.A 

WHET4.A 



5.4 Appendix IV, QUARANTINED TEST PROBLEMS 

This appendix contains a list of test problems which fail on some systems for various reasons 
and a list of test problems which fail for system dependent reasons. 


174 



Problem 

Number of 

Name 

Systems Failing 

A-STAR 

1 

ACKERl 

1 

ACKER2 

1 

ACTIVATIONl 

2 

ACTIVATI0N2 

2 

ALIAS! 

! 

ALIAS2 

1 

ALIAS3 

2 

ALIAS4 

1 

ALIAS5 

! 

ALIA.S5X 

! 

ALIAS6 

! 

ALIAS6X 

1 

ALIAS7 

1 

ALIAS7X 

1 

ALIAS8 

! 

ALIAS8X 

1 

ALIAS9 

1 

ALIASIO 

1 

ALIAS!! 

1 

ALIAS12 

! 

ALIAS13 

3 

ALIAS14 

3 

ALIAS15 

3 

ALIAS16 

3 

ASYNCl 

! 

ASYNC3 

1 

ASYI\IC5 

2 

AVL-0 

2 

AVL-1 

2 

AVL 2 

2 

AVL-3 

2 

AVL-4 

2 

AVL-5 

2 

AVL 6 

2 

AVL-7 

2 


Problem 

Number of 

Name 

Systems Failing 

^vlIs 

2 

AVL_9 

2 

AVL-10 

2 

AVL_11 

2 

BSORTl 

1 

BS0RT2 

1 

CATl 

1 

CAT2 

1 

CAT3 

1 

CIOl 

1 

CI02 

1 

CIOS 

1 

CI04 

1 

CIOS 

1 

CI06 

1 

CI07 

1 

CIOS 

1 

CI09 

1 

ClOlO 

1 

CIOll 

1 

CI012 

1 

CI013 

1 

CI014 

1 

CLAIMOl 

3 

CLAIM02 

3 

CLAIM03 

3 

CLAIM04 

3 

CLAIM05 

3 

CLAIM06 

3 

CLAIM07 

3 

CLAIM08 

3 

CLAIM09 

2 

CLAIMIO 

4 




Problem 

Name 

Number of 

Systems Failing 

CLAIMll 

3 

CLAIM12 

4 

CLAIM13 

4 

CLAIM14 

3 

CLAIM15 

3 

CLAIM16 

3 

CLAIM17 

2 

CLAIM18 

3 

CLAIM19 

3 

CLAIM20 

2 

CLAIM21 

2 

CLAIM22 

2 

CLAIM23 

2 

CLAIM24 

3 

CLAIM25 

2 

CLAIM26 

1 

CLAIM27 

3 

CLAIM28 

2 

CLAIM29 

2 

CLAIM30 

2 

CLAIM31 

1 

CLAIM32 

1 

CLAIM33 

1 

CLAIM34 

2 

CLAIM35 

2 

CLAIM36 

4 

CLAIM37 

4 

CLAIM38 

3 

CLAIM39 

1 

CLAIM40 

1 

CLAIM41 

2 

CLAIM42 

1 

CLAIM43 

1 

CLAIM44 

1 

CLAIM45 

2 

CLAIM46 

2 

CLAIM47 

2 




Problem 

Number of 

Name 

Systems Failing 

COMMON 

2 

COMPLEX-RECORDOl 

2 

COMPLEX.RECORD02 

2 

COMPLEX RECORD03 

2 

COMPLEX-RECORD04 

3 

COMPLEX_RECORD05 

2 

COMPLEX RECORD06 

2 

COMPLEX RECORD07 

2 

COMPLEX.RECORD08 

3 

COMPLEX.RECORD09 

3 

CONSISTENT! 

! 

CONSISTENT2 

! 

CONSISTENT3 

! 

CONSISTENT4 

! 

CONSISTENT5 

! 

CONSISTENT6 

! 

CONSISTENT? 

! 

CRCO 

3 

CRCl 

2 

CRC2 

3 

CRC3 

3 

CRC4 

3 

D LIBRARY 1 

2 

D-LIBRARY.2 

2 

D.LIBRARY-3 

2 

D LIBRARY 5 

2 

□ -LIBRARY 

2 

D-LIBRARY-7 

2 

□-LIBRARY .8 

2 

□EA^ 

2 

□ELAY! 

! 

□ELAY2 

! 

□ELAY3 

! 

□ELAY ABORT! 

2 

□ELAY-ZEROO 

! 

□ELAY-ZER06X 

! 


Problem 

Number of 

Name 

Systems Failing 

DESl 

3 

DES2 

1 

DESS 

1 

DES4 

1 

DES4A 

1 

DES5 

3 

DES5A 

2 

DES6 

3 

DES6A 

2 

DES7 

3 

DES7A 

3 

ELABl 

1 

ELAB2 

1 

ELAB3 

1 

ELAB4 

1 

ELAB5 

1 

ELAB6 

1 

ELAB7 

1 

ELAB8 

1 

ELAB9 

1 

ELABIO 

1 

ENUMJ08 

1 

ENUMJ09 

2 

EW 

2 

FOLD-MOD 

2 

FUNCEXCP 

1 

IDIOMS 

2 

INSTl 

1 

INST2 

1 

INST3 

1 

INST4 

1 

INST5 

1 

INVAR 

2 \ 




Problem Number of 

Name Systems Failin g 


lOO 

1 

101 

1 

102 

1 

103 

1 

104 

1 

105 

1 

106 

1 

107 

2 

108 

2 

109 

2 

lOlO 

2 

1011 

1 

1012 

1 

1013 

1 

1014 

1 

1015 

1 

1016 

1 

1017 

1 

1018 

1 

1019 

1 

1020 

1 

1021 

1 

1022 

1 

1023 

1 

16-80-20.5 

1 

10 80 20 6 

1 

10-80-20.7 

1 

10-80-20-8 

1 

10-80-20.9 

1 

10 80 20 10 

1 

10 COPYl 

1 

I0-C0PY2 

1 

I0.C0PY3 

1 

I0-C0PY4 

1 

lO-INTERl 

1 

10 INTER2 

il 

I0.INTER3 

1 1 






Problem 

Number of 

Name 

Systems Failing 

lO-MEMl 

T 

10 MEM2 

1 

10 MEM3 

1 

10 PATTERN1 

1 

I0-PATTERN2 

1 

I0-PATTERN3 

1 

10 PATTERN4 

1 

I0.PATTERN5 

1 

I0-PATTERN6 

1 

I0-PATTERN7 

1 

10 PATTERNS 

1 

10 RECURl 

1 

10 RECUR2 

1 

I0_RECUR3 

1 

lO-SCANl 

1 

I0-SCAN2 

1 

10 SCAN2X 

1 

10 SCAN3 

1 

I0-SCAN4 

1 

I0-SCAN5 

1 

10 SCAN6 

1 

I0-SCAN7 

1 

I0-SCAN8 

1 

lO.UNIFl 

2 

I0.UNIF2 

2 

10 UNIF3 

2 

I0-UNIF4 

2 

I0-UNIF5 

2 

I0-UNIF6 

2 

IQSORT 

1 

LOOPO 

1 

LOOPl 

1 

L00P4A 

1 

L00P4B 

1 

L00P4C 

1 

LOOPS 

1 

LOOPIO 

1 




Problem 

Number of 

Name 

Systems Failing 

LOOPll 

1 

L00P17 

1 

MERGEl 

1 

MERGE2 

1 

PUZZLE 

1 

QSORTl 

1 

QS0RT2 

1 

RECLAIM COLLECTION.CONSTRAINED 

2 

RECLAIM-COLLECTION.UNCONSTRAINED 

2 

RECLAIM-GLOBAL-HEAP-CONSTRAINED 

1 

RECLAIM GLOBAL HEAP UNCONSTRAINED 

1 

REED SOLOMON 0 

3 

REED SOLOMON 1 

2 

REED-SOLOMON-2 

2 

REED-SOLOMON-3 

2 

REED SOLOMON 4 

2 

S LIBRARY 1 

1 

S LIBRARY 2 

1 

S-LIBRARY-3 

1 

S-LIBRARY-5 

1 

S LIBRARY 6 

2 

S-LIBRARY-7 

1 

S-LIBRARY-8 

1 

SEARCH 

1 

SHELLl 

1 

SHELL2 

1 

SIEVE 

1 

SLICEl 

1 

SLICE2 

1 

SLICE3 

1 

SLICE4 

1 

SLICES 

1 

SLICES 

1 

5LICE7 

1 

SLICE8 

1 


182 






Problem 

Number of 

Name 


Systems Failing 

SS60 .. 

ss74 


SSi62 

. ssl67 

llBBBi 

SS213 . 

. ss227 

1 

SS228 . 

. ss241 

1 

SS242 . 

. ss250 

1 

SS250 

2 

SS253 

1 

SS254 . 

. ss257 

1 

SS316 . 

. ss330 

1 

SS331 . 

. ss345 

1 

SS346 . 

. ss353 

1 

SS369 . 

. ss378 

1 

SS458 

. ss466 

1 

SS50d . 

. ss512 

1 

SS513 

. ss528 

1 

SS537 


1 

SS539 


2 

SS652 . 

. ss666 

1 

SS682 

. ss686 

1 

SS687 . 

. ss701 

3 

SS702 

. ss716 

2 

SS717 . 

. ss720 

1 

SS721 

2 

SS722 

1 

SS741 

3 

SS764 . 

. ss780 

1 

STRENGTH 

2 










































II Problem 

1 Name 

Number of 
Systems Failing 

TASKl 

1 

TASK2 

1 

TASK4 

1 

TASKS 

1 

TASK6 

2 

TASK? 

2 

TASKS 

1 

TASK9 

1 

TASK25 

1 

TASKzS 

1 

TASK30 

1 

TASK31 

1 

TASK32 

1 

TASK35 

2 

TASK35-DELTA 

1 

TASK37A 

2 

TASK37B 

1 

TASK40 

1 

TASK44A 

2 

TASK44B 

2 

TASK45A 

2 

TASK45B 

3 

TASK46 

2 

TASK46X 

2 

TASK47 

1 

TASK49 

2 

TASK50 

2 

TASK51 

2 

TASK52 

2 

TASK53 

2 

TASK54-MOD 

3 

TASK55 MOD 

3 

TASK56 

2 

TASK57 

2 

TASK58 

1 

TASK59 

2 

TASK60 

1 






This part of Appendix IV contains a list of test problems which have been observed to fail 
on some systems for system dependent reasons. 


Problem 

Number of 

Name 

Systems Failing 

ASYNC2 

4 

ASYNC4 

3 

AUTO 

1 

BMT 

1 

DELAY4 

1 

DELAYS 

1 

DELAY6 

1 

DELAY? 

1 

DELAYS 

1 

DELAY9 

1 

DELAYIO 

1 

DELAYll 

1 

DELAY12 

1 

DELAY13 

1 

DELAY14 

1 

DELAY-AB0RT2 

1 

DELAY ZEROl 

1 

DELAY-ZER02 

1 

DELAY-ZEROS 

1 

DELAY-ZER04 

1 

DELAY ZEROS 

1 

DELAY..ZER06 

1 

ENUMJOl 

1 

ENUM.I02 

1 

ENUM-103 

1 

ENUM 104 

1 

ENUMJOS 

1 

ENUMJ06 

1 

ENUM 107 

1 

FORWARD-EULERl 

1 

FORWARD EULER2 

1 

HEAPIFY 

1 


186 



Problem 

Name 


INT_0 
INT.l 
INT 2 
I NT-3 
INT-4 
INT_5 
INT-6 
INT-7 
INT_8 
INT 9 


024 

025 

026 

027 

028 

029 

030 _ 

10-80-20.1 
10-80-20.2 
10 80 20 3 
10-80-20-4 
10-80-20-5 
10-80-20-6 
10 80 20 7 
10-80-20-8 
10-80-20-9 
10 80 20 10 


lO-SCANll 
10 SCAN12 
IO-SCAN13 
I0-SCAN14 
10 SCAN15 
10 SCAN16 
I0-SCAN17 
I0.SCAN18 
KALMAN 


Number of 
Systems Failing 


1 



KERNEL! .. kernel24 ri 












Problem 

Number of 

Name 

Systems Failing 

LOOP? 

1 

LOOPS 

1 

LU 

1 

NEURAL 

1 

RUNGE 

1 

SIMULATE-BMBAT 

2 

SIMULATE EMRPM 

2 

SIMULATE HMPROTO 

2 

SIMULATE-QMPITCH 

2 

SIMULATE.RCWFRDET 

2 

SIMULATE UMNAV 

2 

SIMULATE-KMDUMP 

2 

SIMULATE-RMKEYING 

2 

SSO .. ssl4 

1 

SS15 .. ss29 

1 

SS30 .. ss44 

1 

SS45 .. ss59 

1 

SS258 .. ss272 

1 

SS273 .. ss285 

1 

SS286 .. ss300 

1 

SS301 ss315 

1 

SS394 .. ss408 

1 

SS409 .. ss423 

1 

SS424 .. ss438 

1 

SS439 .. ss443 

1 

SS558 .. ss574 

1 







Problem 

Number of 

Name 

Systems Failing 

SS575 .. ss589 

1 

SS590 .. ss597 

1 

SS616 .. ss630 

1 

SS631 .. ss644 

1 

SS645 .. ss651 

1 

SS723 

4 

SS724.MOD .. SS740-MOD 

1 

SS747 

3 

SS806 .. ss811 

1 1 

TARGET 

1 

TASK48 

1 

WHETl 

2 

WHET2 

2 

WHET3 

2 1 

WHET4 

2 ! 











5.5 Appendix V, ACEC KEYWORD INDEX - 1 

This appendix contains a list of primary purposes (with LRM references) and their associated 
test problems, as well as secondary, and incidental purposes, and comparison tests. 

access.operations 3.8.2 

Primary ; ssl54, ssl55, ss256, ss257, ss648, ss746 (ss744..ss745), 
ss748, ss805 

Secondary : reclaim.collection.constrained, 

reclaim.collection.unconstrained, 

reclaim_global_heap_constrained, 

reclaim_global_heap_unconstrained, ssl61, ssl62, ssl63, 
ssl64. SS165, ssl66, ssl67, ss739_mod, trlel, trie2 
application.ai 1.1.2 

Primary ; a_star, neural 

application.avionics 1.1.2 

Primary ; arti.asum, arti_atan2, arti.cos, arti_fmod, 

arti_ifpm_control, arti_ifpm_init, arti_ifpm_io, 
arti_ifpm_rotors, arti.nairini, arti.nscni, arti.nutmini, 
arti.sin, ew, forward.eulerl, forward_euler2 
application, "^vl.tree 1.1.2 

Primary ; avl.O, avl_l, avl_2, avl_3, avl_4, avl_5, avl_6, avl_7, 
avl_8, avl_9, avl_10, avl.ll 
application.cyclic.redundancy.check 1.1.2 

Primary ; crcO, crcl, crc2, crc3, crc4 
application.data.encryption.standard 1.1.2 

Primary : desl, des2, des3, des4, des4a, des5, desSa, des6, des6a, 
des7, des7a 

application.error.correcting.code 1.1.2 

Primary : reed.solomon.O, reed.solomon.l, reed_solomon_2, 

reed_solomon_3, reed_solomon_4 
application.filter 1.1.2 

Primary : filterl, filterli, filter2, filter2i, filter3, filter4 
application.integration 1.1.2 

Primary : ss398, 88402 

application.kalman.filter 1.1.2 

Primary : kalman 

application.lag.filter 1.1.2 

Primary : ss397, ss401 

application.polynomial.coding.style 1.1.2 

Primary : ssl20, ssl21, 8Sl22, ssl23 


190 









application.simulation 1.1.2 


Primary 

simulate.bmbat, : 

simulate.emrpm, simulate.hmproto, 


simulate.qmpitch 

, simulate.rcwfrdet, simulate.umnav 


simulate.kmdump, 

simulate.rmkeying 

application.S 3 nnmetric_deadzone 

1.1.2 

Primary ; 

ss399, ss403 


application.symmetric.limiter 

1.1.2 

Primary : 

ss400, ss404 


application.trie 


1.1.2 

Primary 

triel, trie2 


array.aggregates 


4.3.1 

Primary 

ss775, ss778 


Secondary : 

ss764, ss765, ss766, ss767, 8s768 

array.constraints 


3.6.1 

Primary 

ss596 (ss597) 


array.dynamic 


3.6 

Primary 

ss419 (ss420) 


array.operations 


3.6.2 


Primary : catl, cat2, cat3, ssl7, ssl8, 8sl9, ss57, sail, 8878, ss79, 
ss80, ss81, 88301, ss645, ss646, ss647, ss758, sb759, ss760, 
ss761, ss762, ss763, ss774, ss776, 88777 
Secondary : claimlS, claiml9, claim20, claim21, claim22, ss53, ss54, 

ss55, ss58, ss75, ss76, ssl20, sslGS, 88169, 88170, ssl72, 


ssl73, 

ssl74. 

ssl75, 

SS192, 

ssl93, 

ssl94, 

88235, 

88243, 

ss246, 

ss258, 

ss259, 

ss284, 

ss285, 

ss309, 

ss388. 

ss429, 

ss430, 

ssSll, 

ss512. 

ss518. 

ss519. 

ss520, 

88553, 

ss554 

Incidental : ss405, 

ss406, 

ss409. 

ss410, 

ss411, 

ss419, 

ss420, 

ss428. 

ss432, 

ss433, 

88434, 

88435, 

ss436, 

ss437. 

88438, 

ss439. 

88442, 

ss443, 

88477, 

SS508, 

ss509, 

ss516. 

ss517. 

ss535, 

ss536, 

ss541, 

ss542. 

ss542x 

, ss545 

, ss557 

, ss562 

, ss596. 

ss597, 

ss648. 

ss652, 

ss653, 

ss654. 

83655, 

ss656, 

ss657. 

ss658, 

ss659, 

ss660, 

SS661, 

ss662. 

ss663, 

ss664. 

ss665, 

ss666, 

ss667, 

ss668. 

ss669. 

ss670. 

88671, 

ss672. 

ss673. 

ss674, 

ss675, 

ss676, 

ss677. 

88678, 

ss679, 

ss680, 

88681, 

ss687. 

ss688, 

ss689. 

ss690. 

ss691, 

ss692, 

88693, 

ss694. 

ss695, 

ss696, 

ss697, 

88698, 

88699, 

88700, 

8s701, 

88702, 

ss703. 

ss704. 

ss705. 

ss706. 

ss707. 

8s708, 

ss709, 

ss710. 

88711, 

ss712. 

ss713. 

ss714. 

ss715, 

ss716. 

ss731j 

mod. 

ss732_: 

mod, ss734_mod 

, ss735. 

.mod, 8 s749, ss750 



191 




boolean.arrays.packed 4.S 

Primary : 88337, ss338, ss339, ss340, ss341, ss342, ss343, 88344, 

ss345, ss347, ss348, ss349, ss524, ss525, ss526, 88764, 

ss765, ss766, ss767, ss768 (ss769..ss773) 

Incidental : ss346, ss353, ss500, ssSOl, ss502, ss506 
booleeui.arrays.unpacked 4.5 

Primary ; ss326, ss327, ss328, ss329, ss330, ss331, ss332, ss333, 
ss334, ss336, ss351, ss352 
Incidental : 88346, ss3S3, 8s486 
boolean.expressions 4.5 

Primary : ss72, sslOl, ssl77, ss228, ss229, ss486, 8s487, ss488, 88489, 
88492, 88499, 8s686x, ss686y 

Secondary : as73, ss74, ssl76, ss227, ss230, 88231, ss232, ss280, ss326, 
ss327, ss329, ss330, ss331, ss332, ss333, ss334, ss335, 

ss336, ss337, ss338, ss339, ss340, ss341, ss342, 88343, 

ss344, ss345, ss346, ss347, ss348, ss349, ss350, ss351, 

ss352, ss353, ss500, ss50i, ss502 

Incidental ; ssl4S, ssl46, ssl47, ss314, ss315, ss316, ss317, ss318, 

ss323, ss464, ss598, ss599, ss602, ss604, ss805 

boolean.record 3.5.3 

Primary ; ss682, ss683, ss684, ss685, ss717, ss718, S8719, ss720 
classical.ackermann’8 1.1.2 

Primary : ackerl, acker2 

classical.cube.placing 1.1.2 

Primary : puzzle 

clas.sical. dining.philosophers 1.1.2 

Primary : task7, task8, task9, tasklO, task25 
classical.dhrystone 1.1.2 

Primary ; dhrysl_mod, dhrys2_mod, dhrys3_mod 

classical.eight.queens 1.1.2 

Primary : queens_mod 

classical.GAMM_measure 1.1.2 

Primary : gamm, gamm2 

classical.numerical.comp_fam_arch(CFA) 1.1.2 

Primary : auto, bmt, heapify, lu, runge, target 

classical.numerical.knuth_loops 1.1.2 

Primary : loopO, loopl, loop2, loop3, loop4a, loop4b, loop4c, loop5, 

loop6, loop7, loop8, loop9, looplO, loopl1, loopl2, loopl3, 

loopl4, loopl5, loopie, loopl7 


192 









classical.numerical.livermore.loops 1.1.2 

Primary ; kernel1, kernel2, kernels, kernel4, kernels, kernels, 

kernel?, kernels, kernels, kernel10, kernelll, kernel12, 
kernellS, kernell4, kernellS, kernellS (kernelIS.goto), 
kernel17, kernellS, kernellS, kernel20, kernel21, kernel22, 
kern0l23, kernel24 

classical.prime.number 1.1.2 

Primary : sieve 

classical.search 1.1.2 

Primary : search, ssearch, ssearch2 

classical.sort 1.1.2 

Primary : bsortl, bsort2, ciqsort, iqsort, mergel, merge2, qsortl, 
qsort2, shelll, shell2 

classical.whetstone 1.1.2 

Primary : whetl, whet2, whet3, whet4 
consistency_check.timing.loop 

Primary : consistent!, consistent2, consistent3, con8istent4, 

consistentS, consistente, consistent?, S8?6S, 8S??0, 88??1, 

ss??2, ss??3 

conversion.fixed 3.5.10 

Primary : sslO?, sslOS, ss466, ss46?, S8?21, ss?22, ss?23 
conversion.float 4.6 

Primary : ss2, ss2_modl (ss2_mod2), sslS, ss28S, S82S0 
Secondary : ss283 

conversion.integer 4.6 

Primary : ssS, ssS.mod, ssl2, ss233, ss234, ss300, ss468 
Secondary : ss2??, ss282, ss303 
conversion.null 4.6 

Primary ; ss241 

conversion.packed,to_unpacked 4.6 

Primary : ss335, ss346, ss353 

conversion.unchecked.conversion 13.10.2 

Primary : ss25S (ss258), ss500, ss501, 88502, S8506 

conversion.unpacked_to_packed 4.6 

Primary ; ss350 


193 




delay.problems 9.6 

Primary : delay1, delay2, delay3, delay4, delays, delayG, delayT, 

delays, delayS, delaylO, delayll, delay12, delay13, delay14, 
delay.zeroO, delay.zerol, delay_zero2, delay_zero3, 
delay_zero4, delay.zeroS, delay.zeroS (delay_zero6x), 
delay_zero7, delay_zero8, ss455, ss458, ss459 
Secondary : async3, delay_abortl, delay_abort2 
exception.handling 11.4 

Primary : funcexcp, ss379, ss380, ss381, ss382, ss383, 8s384, ssS27, 
S8528 

Secondary : ss543 

Incidental : cat3, claiml2, claiml3, claiml4, claimlS, claiml9, claim21, 
claim22, claim38, claini46, claim47, ssS98, ss599, 88602, 



ss604, ss638, ss741 


exception.numeric. 

.error 

11.1 

Primary 

: ss313, ss369 


exception.raise 


11.3 

Primary : 

ssll7, ss311, ss312 


Secondary 

cats, claimlS, ss755. 

ss757 

expression.abs 


4.5.6 

Primary 

ss29, ss30, ss266, ss293 

Secondary 

; ss368 


Incidental 

ss431 


expression.attributes 

4.1 

Primary ; 

ss246 


expression.catenation 

4.5.3 

Primary 

SS113 


expression.exponentiating 

4.5 


Primary : 3sl91 

Secondary ; sslS, ssl6, ss21, ssSO, ssSl, ss65, ss66, ssl88, ss213, 
ss216, ss216_mod, ss217, ss219, ss219_mod, sb279, 8s291, 
ss304, ss30S, ss306, ss307, ss643x 
expression.parenthesis 4.5 

Primary : ss389, ss390, ss391, ss392, ss393, ss394, ss395, ss396 
fixed.operations 3.5.10 

Primary : ssl09, ssllO, ss460, ss461, ss462, ss463, ss464, ss465 


194 





float.operations 3.5.8 

Primary : ssl, ss3, ss4, ss5, ss6, ss211, ss286, ss287, ss288, ss302, 
ss308, ss315, ss324, ss591 (ss592..ss594), ss643x 
Secondary ; ss20, ss21, 8s22, ss23, ss24, 8825, ss59, ss60, ss61, ss62, 
ss63, ss64, 8s65, ss66, ss71, ss134, ss135, 8s136, sslSO, 
ss216, ss216_mod, ss219, ss219_mod, ss220, ss256, ss257. 
ss293, ss294, ss295, ss296, ss297, ss298, ss299, ss301, 

ss314, ss316, 8s317, ss318, ss323, ss389, ss390, ss391, 

ss392, ss552, ss575, ss576, ss577, ss578, ss579, ss580, 

ss581, ss582, ss583, ss585, ss588, ss589, ss590, ss595, 

ss606, ss607, ss609, ss643, ss779, ss780, ss781, 8s782, 

ss783, ss784, ss785, ss786, ss787, ss788, ss789, ss790, 

ss791, ss792, ss793, ss794, ss795, 88796, 88797, 88798 

Incidental : ss67, ss68, ss69, ss70, ssl20, ssl21, ssl22, ssl23, ssl41, 
ssl42, ssl43, sslS4, ssl55, ss210, ss218, ss226, ss233, 

88234, ss262, 88263, ss291, ss292, ss304, 88305, 88306, 

ss307, ss397, ss398, ss399, ss400, ss401, ss402, ss403, 

ss404, ss406, ss407, ss413, ss414, ss415, ss416, 88417, 

ss418, ss431, ss432, ss433, ss434, ss435, 88436, 88437, 

ss442, ss443, ss444, ss448, ss450, ss454, 88467, ss48S, 

88511, ss512, ss513, ss514, ss515, ss529, ss630, 88531, 

ss532, ss533, ss534, ss53S, ss536, ss547, ss548, ssS49, 

ss586, ss621, ss622, ss623, ss624, ss625, 88626, 8s627, 

ss628, ss629, ss630, ss631, ss632, ss633, ss645, 88646, 

ss647, ss649, ss650, ss753, ss754, ss758, ss759, ss760, 

ss761, ss762, ss763 

generic.instanstiation 12.3 

Primary ; enum.iol, enum_io2, enum_io3, enum_io4, enum_io5, enum_io6, 
enum_io7, enum_io8, enum_io9 
generic.package 12. 

Secondary : filter2, filter2i, ss806, ss807, ss808, 8s809, ss810, ss811 
generic.subprogram 12. 

Primary : ssl48, ssl49 (sslSl), ssl50, 88478, 88621, 88622, 88623, 
ss624, ss625, ss626, ss627, ss628, ss629, 88630, 88631 
Secondary : filterl, filterli 
image 3.5.5 

Primary : ssl31 
Secondary : claiml7 
Incidental : in8t4, ss370 


195 








integer.bigint.operations 3.5.5 

Primary : ss270, ss271, ss272, ss273, ss274, ss275, 88276, 88277, 
ss278, ss280, ss282, ss283, ss284 
integer.MOD 3.5.5 

Primary : ssl02 
Secondary : ssl99 
Incidental : ss446 

integer.operations 3.5.5 

Primary : ss7, ss9, sslO, ssll, ss46, 8s201, ss202, 88203, 88268, 
ss269, ss281, ss561, ss729_mod, 88744, S8745 
Secondary : S840, ss41, ss41_mod, ss42, 8842_mod, 8843, 8844, ss45, 8847, 
ss48, ss49, ss50, ss51, ss52, ss56, ssl37, ssl89, ssl95, 
ssl96, ssl97, ssl98, ss217, ss221, ss393, 88394, ss395, 

ss396, ss503, ss550, ss551, 8s556, ss560, ss566, ssS67, 

ss568, ss569, ss570, ss571, ss572, ss573, ss574, ss584, 

ss608, ss610, ss611, ss753, 8s754 

Incidental : ss95_mod, ss96_mod, ss97_mod, 8898_mod, ssl02, ssl03, S8ll7, 


ssl29, ssl30. 

ssl31, 

SS138, 

ssl39. 

ssl40. 

8s190, 

88191, 

ss200, ss209. 

ss213, 

SS214, 

88241, 

ss264. 

88265, 

ss266, 

ss267, ss364. 

ss366, 

88367, 

88369, 

ss372. 

ss373, 

88374, 

ss375, ss384. 

ss385x 

, 8s386 

, ss423 

, 88424 

, ss425 

, 88426 

ss427, ss428. 

88429, 

88430, 

ss431, 

ss440. 

88441, 

ss445, 

ss446, ss447. 

ss449. 

88451, 

ss466. 

ss468. 

88469, 

ss470. 

ss471, ss472. 

ss473. 

ss474. 

ss475. 

ss476. 

8s490, 

88491, 

ss500, ss501. 

ss502, 

ss506. 

ss507, 

ss511, 

ss512. 

88558, 

ss559, ss563. 

ss564, 

88565, 

ss612, 

ss634. 

ss635, 

ss636, 

ss637, ss638. 

ss639, 

88640, 

ss651, 

ss652. 

ss752. 

ss755, 

ss756, ss757. 

ss774. 

88775, 

ss776. 

88777, 

88778 



integer.REM 4.5.5 

Primary ; ssl03 
Secondary : ss204 

Incidental ; ss276, ss362, ss363, ss447 
interface.language.assembly 13.9 

Primary ; ss747 


196 






10.direct 14.2 

Primary : ioll, iol2. iol3, iol4, iol5, iol6, io_80_20_l, io_80_20_2, 
io_80_20_3, io.80.20_4, io_80_20_5, io_80_20_6, io.80_20_7, 
io_80_20_8, io_80_20_9, io_80_20_10, io_copy3, io_copy4, 
io.inter2, io_inter3, io.patternl, io_pattern2, io_pattern3, 
io_pattGrn4, io.patternS, io_pattern6, io.pattern?, 
io_pattern8, io.recurl, io_recur2, io_recur3, io.scanl, 
io_scan2 (io_scan2x), io_scan3, io_scan4, io_scan5, io_scan6, 
io_scan7, io_scan8, io_scanl3, io_scanl4, io_scanl5, 
io_scanl6, io_scanl7, io_scanl8, io.unifl, io_unif2, 
io_unif3, io_unif4, io.unifS, io_unif6 
10.sequential 14.2 

Primary : iol7, iol8, iol9, io20, io21, io22, io23, io.copyl, io_copy2, 
io.interl, io_scanll, io_scanl2 
Secondary : io_inter2, io_inter3 
lO.Text.IO 14.3 

Primary : asyncl, async2, ciol, cio2, cio3, cio4, cio5, cio6, cio7, 
cio8, cio9, ciolO, cioll, ciol2, ciol3, ciol4, 
instl (inst2..instS), ioO, iol, io2, io3, io4, io5, io6, io7, 
io8, io9, iolO, io24, io25, io26, io27, io28, io29, io30 
Secondary : async4, asyncS, claim23 
Incidental : ss537, ss538, ss539, ss540 
lO.Text.IO.float.string 14.3.8 

Primary : ssl34, ssl35, ssl36 

10.Text.IO.integer.string 14.3.7 

Primary ; ssl37, ss431 

loop.exit 5.7 

Primary : ss354, ss355, ss356, ss357 

Secondary : ssl82, ssl83, ssl84, ss250, ss376, ss377, ss386, ss612 

Incidental : ss406, ss427 


197 







loop.for 5.5 

Primary : ss58, ssl04, sslOS, sslSl, 8s422, 8s424, 8s516, ss517, 8s518, 
ss519, ss520, ss535, ss542x 

Secondary ; claim09, claimll, ss57, ss80, ss81, sslOG, ssl71, sslSO, 



ss225, 

ss236, 

ss237, ss238. 

ss239, 

ss240, 

88387, 

ss409, 


ss423, 

ss425, 

ss525, ss536. 

ss541, 

ss542. 

ss651, 

ss749. 


ss750. 

ss752. 

ss776 





Incidental : 

ssl20. 

ssl63. 

ssl64, ssl65. 

ssl66, 

ssl67, 

ss212. 

ss213, 


ss428, 

ss431, 

ss438, ss439. 

ss440, 

ss441, 

ss442, 

ss443, 


ss472, 

ss473, 

ss477, ss490. 

ss491, 

88511, 

88512, 

ss654. 


ss655, 

ss659, 

ss660, 88664, 

ss665, 

ss669, 

88670, 

88674, 


ss675. 

88679, 

ss680, ss686x 

, ss686y, 8 s 689, 88690, 8s694, 


ss695, 

ss699, 

ss700, ss704. 

ss705, 

88709, 

88710, 

ss714, 


ss715, 

ss741 






loop.while 



5.5 





Primary : 

ss209, 

ss426 






Secondary : 

ssl85 







Incidental : 

ssl48, 

ssl62. 

ssl65, 88166, 

ss369, 

ss38S, 

88479, 

ss480, 


ss481, 

SS482 






math.dep.adx 



4.5 





Primary : 

ss810 







Secondary : 

ss807 







math.dep.intexp 



4.5 





Primary ; 

ss809 







Secondary : 

ss806 







math.dep.setexp 



4.5 





Primary : 

ss811 







Secondary : 

ss808 







math.function.arcsin 


4.5 





Primary 

ss586 







math.function.arctan 


4.5 





Primary : 

ss34, 

ss299 






Incidental : 

kalman, uhetl, 

whet2, whet3 

whet4 




math.function.cos 



4.5 





Primary : 

ss28, 

ss295 






Incidental : 

kalman, whetl, 

whet2, whet3 

, whet4 




math.function.exp 



4.5 





Primary : 

ssl4, 

ss31, ss296 





Incidental : 

ss308, 

whetl, 

whet2, whet3. 

whet4 





198 








4.5 


math.function.log 

Primary : ss32, ss297 
Secondary : ssl4 
Incidental : ss308, whetl, whet2, Hhet3, whet4 
math.function.sgn 4.5 

Primary : ss35 

Incidental : ss267, ss268, ss269, ss413, ss414, ss562 
math.function.sin 4.5 

Primary : ss27, ss294 

Incidental ; kalmem, whetl, whet2, whet3, whet4 
math.function.sqrt 4.5 

Primary : ss33, ss298 

Incidental : kalman, whetl, whet2, whet3, whet4 
optimization.algebraic_simplification 10.6 

Primary ; ss44, ss47, ss48, ss49, ss50, ss51, ss61, ss62, ss63, ss64, 
ss65, ss66, ss67, ss73, ss74, ss218, ss220, ss221, S8319, 
ss320, ss321, ss322, ss432 (s8433), 8s434, ss435, 88436, 
ss437, ss560 (ss561) 

optimization.boolean.var.elim 10.6 

Primary ; ssl76 (8Sl77) 
optimization.bounds.check 10.6 

Primary ; ssl74, ssl92, ssl93, ssl94, S8368 
optimization.common.sub.expr.elim 10.6 

Primary : alias2, alias6 (alias6x), aliaslO, aliasH, common, csel, 
cse2, cse3, cse4, cse5, cse6, cse7, cse8, C8e9, ceelO, 
purel (pure2), pureS (pure6), ss75, ss76, ssl72, 
ss210 (ss211), ss406, ss428, ss508, 88509, ss530, ss533, 
ss553, ss554, ss643, ss644 
optimization.constant.propagation 11.6 

Primary : firth6 (firth6x), ss316, ss317, ss529 
optimization.data.flow 10.6 

Primary : ss504, ss505, ss753 (ss757), 88754 (ss757) , 88755 (s8757), 
ss756 (ss757) 

optimization.dead 10.6 

Primary ; alias3, alias7 (alias7x), aliasll, aliaslS, dead, ss56, 8s68, 
ss71, ss225, ss226, ss427, 8s638, 8s639, ss640, ss641, ss642, 
ss649, ss650, 38651 


199 





optimization.folding 10.6 

Primary : alias4, aliasS (aliasSx), aliasl2, aliaslB, foldl, fold2, 
folds, fold4, folds, fold6, fold?, foldS, fold.mod, ss41, 
ss41_mod. ss42, ss42_mod, ss55, ss60, ss70 (ss69), ssl85, 
ssl89 (ssl90), ss216, ss216_mod, ss217, ss219, ss219_mod, 
ss227, ss230, ss231, ss232, ss239, ss285, ss303, ss304, 
ss305, ss306, ss314 (ss315), ss318, ss325, ss362, ss421, 
ss532, ss537, ss538, ss539, ss540, ss556, ss558 (ss559), 
ss561x, ss563, ss564, ss565, ss587 (ss591..ss594), 
ss588 (8s591 ..ss594), ss589 (ss591..8s594), 
ss590 (ss591..ss594), ss595, ss806, ss807, ss808 
Secondary : ss2, ssS, ss54, ss83 
optimization.inline 10.6 

Primary : ss260, ss410 (ss411) 

optimization.jump.tracing 10.6 

Primary : ssl82, ssl83, ssl84, ss250, ss619, ss620 
optimization.loop.flattening 10.6 

Primary ; 8s405 

optimization.loop.fusion 10.6 

Primary : ssl80 (ssl81) 

optimization.loop.induction 10.6 

Primary : ss236, 88237, ss409 

optimization.loop.interchange 10.6 

Primary : ss750 

optimization.loop.invariant 10.6 

Primary ; aliasl, aliasS (aliasSx), alias9, aliaslS, invar, 

pure3 (pure4), pure? (pure8), ss212, ss222, ss429, ss430, 
ss536, ss749, ss752 

optimization.loop.rotation 10.6 

Primary : ss385 (ss385x), ss386, ss387 

optimization.loop.unrolling 10.6 

Primary ; ss238, ss240, ss541, ss542 (ss542x) 

Secondary ; sslOS 

optimization.machine.idiom 10.6 

Primary : idioms, ss40, ss43, ss45, ss52, ss59, ssl73, ssl96, ssl97, 
ssl98, ssl99, ss200, ss204, ss205 (ss206), ss207, ss208, 

ss214, ss215, ss323, ss385x, ss407, ss408, ss503, ssSSS, 

ss611 

Secondary ; ss7, ss29, ss30, ssllS 


200 





optimization.merge.tests 10.6 

Primary : ssl75, ssl78 (ssl79), ss440 (ss441) 
optimization.order.of.evaluation 10.6 

Primary : ss413, ss414, ss415, ss416, ss417, ss418, ss545, ss546, 
ss547, ss548, ss549, ss550, ss551, ss552 
optimization.redundant.code 10.6 

Primary : ssl95, ss261, ss376, ss377 

Secondary : ss93 

optimization.register.allocation 10.6 

Primary : ss235, ss262, ss263, 3s264, 88265, 8s307, 88388, ss412, 

88442, ss443, ss507, ssSlO, 8s511, ss512, 88531, 88534, 

ss557, ss606, ss607, ss608, ss609, ss610, 88612 
optimization.strength.reduction 10.6 

Primary : ssl5, ssl6, ssl88, ss213 (ss422), 88279, 88291, 8s423 (s8424) 
ss425, strength 
Secondary : ss426 

optimization.test.swapping 10.6 

Primary : ss438, ss439 

optimization.unreachable.code 10.6 

Primary : ss543, ss751, unreach 
package.overhead 8. 

Primary : d.library.l, d.library_2, d.library_3, d_library.5, 

d.library.6, d.library.7, d.library.8, s.library.1, 
s.library.2, s.library.3, s.library.5, s.library.6, 

8.library.7, s.library.8, ss469, ss470, ss47l, ss472, ss473, 
ss474, ss475, ss476, ss477, ss779, ss780, ss781, ss782, 
ss783, ss784, ss785, ss780, ss787, ss788 
parameters o.4.1 

Primary : ss419 (ss420), ss584, ss585 

parameters.default 6.4.2 

Primary : ssl24, ssl25, ssl26 

parameters.modes 6.2 

Primary : ssl38, ssl39, ssl40, ssl45, ssl46, ssl47, ss378, ss562 
parameters.passing 6.4 

Primary : ss566, ss567, ss568, ss569, ss570, ss571, ss572, ss573, 

ss574, ss575, ss576, ss577, 33578 , ss579, ss580, ss581, 

ss582, ss583 

Secondary : ss247, ss248, ss249, ss613, ss614, ss615, ss616, ss617, 
ss618 


201 







pragma.numeric.error 11.1 

Primary : ss444, ss445, ss446, ss447, ss448, ss449, ss450, 8s451 
pragma.pack 13.1 

Primary : ssl56, ssl57, ssl58, ssl59, ssl60, ssl61 
pragma.suppress.discriminant.check 11.7 

Primary : ss613, ss614, ss615, ss616, 88617, 8s618 
Secondary : ss242 

pragma.suppress.elaboration.check 11.7 

Primary : elabl, elablO, elab2, elab3, elab4, elabS, elab6, elab7, 
elabS, elab9 

pragma.suppress.index.check 11.7 

Primary : ss53, ss54 

pragma.suppress.range.check 11.7 

Primary : firth7 (firth7x), ssll7, ssl68, ssl69, ssl70, ssl7l, ss3€3, 
ss364, ss365, ss366, ss367, 88372, 88373, 8s374, 8s375, 

SS757 

Secondary : ss242, ss252, ss254, ss255, ss758, 8s759, S8760, ss761, 
ss762, ss763 

record.aggregates 4.3.1 

Primary : firth3 (firthSx), ssll6 

record.assignment 3.7.4 

Primary : firthl (firthlx), sslOO, 8sll4 

record.component.assignment 3.7 

Primary : ss21, ssllS, ss244 

Secondary : ssl56, ssl57, ssl58, ssl59, ssl60, ssl61, ss215, ss724.mod, 
ss725.mod, ss736.mod, ss737.mod, 8s738.mod 
Incidental ; ss407 

record.discriminants 3.7.1 

Primary : ssl52, ssl53, ss242, ss245, S8598 (ss599), ss600 (ss601), 
ss602, ss603, ss604, ss605 
record.operations 3.7.4 

Primary : complex.recordOl, complex_record02, complex_record03, 

complex.record04, complex.recordOS, complex_record06, 

complex_record07, complex.recordOS, complex.record09, 

firth2 (firth2y), firth2x, io.meml, io.mem2, io_mem3, slicel, 

slice2, slices, slice4, sliceS, sliceS, slice7, slices, 
ss513, ss514, ss515 

record.overhead 3.7.4 

Primary : ss789, ss790, ss791, ss792, ss793, ss794, ss795, ss796, 
ss797, ss798 


202 





representation.attributes 13.7.2 

Primary : ss730_mod, ss731_mod, ss732_mod, ss734_mod, ss735_mod, 
ss736_mod, ss737_mod, 3s738_mod, ss739_mod, 88740_mod 
representation.pack.unpack 13.1 

Primary : ss652, ss653, ss654, ss655, ss656, ss657, ss658, ss659, 

ss660, ss661, ss662, ss663, ss664, 88665, 8s666, 88667, 

ss668, ss669, ss670, ss671, ss672, ss673, ss674, 8s675, 

ss676, ss677, ss678, ss679, ss680, ss681, 88687, ss688, 

ss689, ss690, ss691, ss692, ss693, ss694, ss695, ss696, 

ss697, ss698, ss699, ss700, ss701, ss702, ss703, 8s704, 

ss705, ss706, ss707, ss708, ss709, ss710, ss711, ss712, 

ss713, ss714, ss715, ss7l6, ss724_mod, ss725_mod 
scope.intermediate 8.3 

Primary : ss96_mod, ss97_mod, ss98_nod 

scope.local 8.2 

Primary : ss20, ss95_mod 

statement.block 5.6 

Primary : ss22, ss23, ss24, ss25, ss544 

Secondary : claimlO, claiml2, claiml3, claiml6, claim38 

statement.case 5.4 

Primary : ssll8, ssll9 
Secondary : ssl33, ss325 
Incidental : ss482, ss488 
statement.goto S.9 

Primary : ss26 

Secondary : kernel16_goto, ss261, ss385x, ss619, 8s620 
Incidental : claim09, claimlO, claimll, ss356 
statement.if.coding.style 5.3 

Primary : firth4 (firth4x), ss82, ss83, ss84, ss85, ss86, ss87, ss88, 
ss89, ss90, ss91, ss92, ss94, ssl86, S6l87, 8s223, ss224, 
ss490, ss491, ss494 (ss495), 88496, ss497, 88498 (s8499) 


203 



statement.if.condition 5.3 

Primary : ss93, ssl29, ssl44, ssl79, ss206, ss292, 88441, 88559 
Secondary : consistent!, consistent2, consistent3, consistont4, 

con6istent5, consistentG, consistent?, 8s207, S8208, ss324, 
ss328, 88421, SS438, ss439, 8s440, ss504, ss505, 88507, 

ss508, ss509, ssSlO, ss558, ss561, ss644, ss649, ss650, 

ss686x, ss686y, ss751, ss800, ss801, ss802 
Incidental : ssl28, ssl32, ssl76, ssl77, ssl78, ss205, ss214, ss227, 

ss228, ss229, ss230, ss231, ss232, 88262, ss263, ss264, 

88311, ss312, ss313, ss319, ss320, ss321, ss322, ss339, 

ss355, ss356, ss385x, ss398, ss399, ss400, ss402, ss403, 
ss404, 88409, ss417, ss418, ss431, 88479, 88480, ss481, 

ss511, ss512, ss526, ss527, ssS28, ss537, ss538, 88539, 

ss540, ss754 

statement.null 5.1 

Primary : label, ssO, ssl06, ss804 

Secondary ; ss544 

Incidental ; ss543 

statement.overhead 5.2 

Primary ; sa634, ss635, ss636, ss637 
storage.reclamation 4.8 

Primary : claimOl, claim02, claim03, claim04, claimOS, claimOS, 

claim07, claim08, claim09, claimlO, claimll, claiml2, 

clairal3, claiml4, claimlS, claimlS, claiml7, claiml8, 

claiml9, claim20, claim21, claim22, claim23, claim24, 

claim25, claim26, claim27, claim28, claim29, claimSO, 

claim31, claim32, claim33, claim34, claim35, claim36, 

claim37, claim38, claim39, claim40, claim41, claim42, 

claim43, claim44, claim45, claim46, claim47, 

reclaira_collection_constrained, 
reclaim_collection_unconstrained, 
reclaim_global_heap_constrained, 

reclaim_global_heap_unconstrained, ssl62, ssl63, 88164, 
ssl65, ssl66, ssl67, ss741 


204 




subprogram.external 6.4 


Primary ; 

activationl, firthS (firthSv..firthSz), ss36, S837, ssSS, 
ss39, ss632 

Secondary : 

ss641, ss642 

Incidental : 

ss236, 8s237, ss36S, ss385. ss386, ss387, ssSlS, S8S17, 
ss518, ss519, SS&20, ssS46, S8S47, s8S48, 88S49, 8sS96, 
ss638, ss639, ss640, ss730_mod 

subprogram.inline 

6.3.2 

Primary 

activation2. ssl42 (ssl44), ss411, ss633 

Secondary 

claim40, claim41, claim42, claim43, claim44, claim4&, 
claim46, claim47, ss563, ssS64. ssSSS 

subprogram.local 

6.4 

Primary 

ssl27, ssl41, ssl43, ss247, ss248, ss249, ss2S8, 883S8, 
ss3S9, ss360, ss370. ss483, S8484, 8848S, S8S21, 88S22, 
ss523, tak 

Secondary : 

claimOl, claim02, claimOS, claim04, claimOS, claim06, 
claim07, claimOS, claiml4, claimlS, claim24, ss260, S8S96, 
ss748 

Incidental ; 

ss236, ss237, ss379, ss380, ss381, 8s382, 88383, 88384, 
ss486, ss487, ss492, ss598, ss699, 8s600, ss601, 8s603, 
ss604, ss60S 

subprogram.nested 

8.3 

Primary 

ss361 

task.interrupt 

13.6.1 

Primary 

int_0, int.l, int_2, int_3, int.4, int_S, int_6, int_7, 
int_8, int_9 

task.language_feature_tests 9. 


Primary : async3, async4, asyncS, delay.abortl, delay_abort2, taskl, 
task2, tasks, task4, tasks, task6, taskl1, taskl2, tasklS, 
taskl4, tasklS, taskl6, tasklT, tasklS, taskl9, task20, 

task21, task22, task23, task24, task26, task27, task28, 

task29, taskSO, taskSl, task32, task33, task34, task34_delta, 

taskSS, task35_delta, task36, task37a, task37b, taskSS, 

task39, task40, task41, task42, task43, task44a, task44b, 
ta8k4Sa, task4Sb, task46, task46x, ta8k47, task48, task49, 
taskSO, taskSl, taskS2, taskS3, taskS7, taskSS, task59, 
taskSO 

Secondary : claim34, claimSS, claim36, claim37, ss740_mod 


205 



task.rendezvous 9.5 

Primary : task_num_l. task_num_5, task_num_10, task_num_15, 

task_num_20, task_num_25, task.num.SO, task2_num_l, 
task2_num_5, task2_num_10, task2_num_15, task2_num_20, 
task2_num_25, task2_num^30 

Secondary : claim28, claim29, claim30, claimSl, claim32, claim33 
task.storage.size 9.9 

Primary : task54_mod, task55_mod, task56 

timing.calendar 9.6 

Primary : ss453, ss454, ss456, ss457, ss799, ssSOO, ssSOl, 8s802, 

SS803 

timing.clock 9.6 

Primary ; ss452 

Secondary : claim39 

type.character.operations 3.5.5 

Primary : ss479, ss480, ss481, ss482, ss493 

Incidental : ss486, ss487, ss488, ss489, ss492 

type.enumeration.attributes 3.5.5 

Primary : ssl28 (ssl29), ssl30, ss251, ss252, 88253, ss254, 88255 
type.enumeration.operations 3.5.5 

Primary : ssl32, ssl33, ss309, 8s310 

type.named.number 3.2 

Primary : ss267 (ss268..ss269) , S8726_mod, s8727_mod, ss728_mod 
Secondary ; sa483, ss484, ss587 

Incidental : 88529, ss530, ss531, ss534 

type.string.assignment 3.6.3 

Primary ; ss99, sslll, ssll2, ssl51, ss243, ss371 
Secondary : ssll3, ssl49, ss370 
withdrawn.tests 

Primary ; ai_create_delete_kb, ai_create_object, ai_load_kb_from_file, 
ai_raodify_object, ai.query, dhrysl, dhry82, dhrysS, fold, 
queens, ss95, ss96, ss97, ss98, ss686, ss724, ss725, 8s726, 
ss727, ss728, ss729, ss730, ss731, ss732, 88734, ss735, 
ss736, ss737, ss738, ss739, 8s740, task54, task55 


206 






5.6 Appendix VI, ACEC KEYWORD INDEX - 2 

This appendix contains a list of test problems with their primary purposes (syhich may be for comparison 


with other tests). 


a.star 

Primary 

acker1 

Primary 

acker2 

Primary 

activationl 

Primary 

activation2 

Primary 

ai.create.delete.kb 

Primary 

ai.create.object 

Primary 

ai.load.kb.from.file 

Primary 

ai.modify.object 

Primary 

ai.query 

Primary 

alias1 

Primary 

alias2 

Primary 

aliasS 

Primary 

alias4 

Primary 

aliasS 

Primary 

aliasSx 

Comparison 

aliasG 

Primary 

aliasSx 

Comparison 

alias? 

Primary 

alias?x 

Comparison 

aliasS 

Primary 

aliasSx 

Comparison 

aliasS 

Primary 

aliaslO 

Primary 

aliasll 

Primary 

aliasl2 

Primary 

alias13 

Primary 

aliasH 

Primary 

aliaslS 

Primary 

aliaslS 

Primary 

arti.asum 

Primary 

arti.atan2 

Primary 

arti.cos 

Primary 

arti.fmod 

Primary 

arti.ifpm.control 

Primary 

arti.ifpm.init 

Primary 

arti.ifpm.io 

Primary 

arti.ifpm.rotors 

Primary 

arti.nairini 

Primary 


application.ai 

clastical.ackermann’s 

classical.ackermann’s 

subprogram.external 

subprogram.inline 

withdrawn.tests 

withdrawn.tests 

withdrawn.tests 

withdrawn.tests 

withdrawn.tests 

optimization.loop.invariant 

optimization.common.sub.expr.elim 

optimization.dead 

optimization.folding 

optimization.loop.invariant 

aliasS 

optimization.common.sub.expr.elim 
alias6 

optimization.dead 
alias? 

optimization.folding 
alias8 

optimization.loop.invariant 
optimization.common.sub.expr.elim 
optimization.dead 
optimization.folding 

optimization.loop.invariant 
optimization.common.sub.expr.elim 
optimization.dead 
optimization.folding 
application.avionics 
application.avionics 
application.avionics 
application.avionics 
application.avionics 
application.avionics 
application.avionics 
application.avionics 
application.avionics 


207 





arti.nscni 

Primary 

arti.nutmini 

Primary 

arti.sin 

Primary 

asyncl 

Primary 

async2 

Primary 

async3 

Primary 

Secondary 

async4 

Primary 

Secondary 

asyncS 

Primary 

Secondary 

auto 

Primary 

avl.O 

Primary 

avl.l 

Primary 

avl_2 

Primary 

avl_3 

Primary 

avl.4 

Primary 

avl_5 

Primary 

avl.e 

Primary 

avl_7 

Primary 

avl.8 

Primary 

avl.9 

Primary 

avl.lO 

Primary 

avl.ll 

Primary 

bmt 

Primary 

bsortl 

Primary 

bsort2 

Primary 

catl 

Primary 

cat2 

Primary 

cat3 

Primary 

Secondary 

Incidental 

ciol 

Primary 

cio2 

Primary 

cio3 

Primary 

cio4 

Primary 

cio5 

Primary 

cio6 

Primary 

cio7 

Primary 

cio8 

Primary 


application.avionics 
application.avionics 
application.avionics 
10.Text.10 
lO.Text.IO 

task■language.feature.tests 

delay.problems 

task.language.feature.tests 

lO.Text.IO 

task.language.feature.tests 
lO.Text.IO 

classical.numerical.comp.fam.archCCFA) 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

application.avl.tree 

classical.numerical.comp.fam.arch(CFA) 

classical.sort 

classical.sort 

array.operations 

arr ay.op er ations 

array.operations 

exception.raise 

exception, hiuidling 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 


208 





cio9 

ciolO 

ciol 1 

ciol2 

ciol3 

ciol4 

ciqsort 

claimOl 

claim02 

claim03 

claim04 

claimOS 

claiin06 

claim07 

claimOS 

claim09 


claimlO 


claimll 


claiml2 


claimlS 


Primary : lO.Text.IO 
Primary : I0.Text_I0 
Primary : I0.Text_I0 
Primary ; lO.Text.IO 
Primary : lO.Text.IO 
Primary : I0.Text_I0 
Primary : classical.sort 
Primary : storage.reclamation 
Secondary : subprogram.local 
Primary : storage.reclamation 
Secondary : subprogram.local 
Primary : storage.reclamation 
Secondary ; subprogram.local 
Primary ; storage.reclamation 
Secondary ; subprogram.local 
Primary : storage.reclamation 
Secondary : subprogram.local 
Primary : storage.reclamation 
Secondary : subprogram.local 
Primary : storage.reclamation 
Secondary : subprogrzun.local 
Primary : storage.reclamation 
Secondary : subprogram.local 
Primary : storage.reclamation 
Secondary : loop.for 
Incidental : statement.goto 
Primary : storage.recl 2 unation 
Secondary : statement.block 
Incidental : statement.goto 
Primary : storage.reclamation 
Secondary : loop.for 
Incidental : statement.goto 
Primary : storage.reclamation 
Secondary : statement.block 
Incidental : exception.handling 
Primary : storage.reclamation 
Secondary : exception.raise 
statement.block 

Incidental : exception.handling 


209 




claiml4 

Primary 

Secondary 

Incidental 

claimlS 

Primary 

Secondary 

Incidental 

claimlO 

Primary 

Secondary 

claimlT 

Primary 

Secondary 

claimlS 

Primary 

Secondary 

claimlO 

Primary 

Secondary 

Incidental 

claim20 

Primary 

Secondary 

claim21 

Primary 

Secondary 

Incidental 

claim22 

Primary 

Secondary 

Incidental 

claim23 

Primary 

Secondary 

claim24 

Primary 

Secondary 

claim25 

Primary 

claim26 

Primary 

claim27 

Primary 

claim28 

Primary 

Secondary 

claim29 

Primary 

Secondary 

claim30 

Primary 

Secondary 

claimSl 

Primary 

Secondary 

claim32 

Primary 

Secondary 


storage.reclamation 
subprogram.local 
exception.handling 
storage.reelamation 
subprogram.local 
exception.handling 
storage.reclamation 
statement-block 
storage. reclzunation 
image 

storage.reclamation 
array.operations 
storage.reclamation 
array.operations 
exception.handling 
storage.reclamation 
array.operations 
storage.reclamation 
array.operations 
exception.handling 
storage.reclamation 
array.operations 
exception.handling 
storage, reclaunation 
10.Text.10 
storage.reclamation 
subprogram.local 
storage. reclaunation 
storage.reclamation 
storage.reclamation 
storage.reclamation 
task.rendezvous 
storage.reclamation 
task.rendezvous 
storage.reclamation 
task.rendezvous 
storage.reclamation 
task.rendezvous 
storage.reclamation 
: task.rendezvous 


210 






claim33 

Primary 

Secondary 

claim34 

Primary 

Secondary 

claim35 

Primary 

Secondary 

claim36 

Primary 

Secondary 

claim37 

Primary 

Secondary 

claim38 

Primary 

Secondary 

Incidental 

claim39 

Primary 

Secondary 

claim40 

Primary 

Secondary 

claim41 

Primary 

Secondary 

claim42 

Primary 

Secondary 

claim43 

Primary 

Secondary 

claim44 

Primary 

Secondary 

clalm45 

Primary 

Secondary 

claim46 

Primary 

Secondary 

Incidental 

claim47 

Primary 

Secondary 

Incidental 

common 

Primary 

complex.recordGl 

Primary 

complex_record02 

Primary 

complex_record03 

Primary 

complex_record04 

Primary 

complex_record05 

Primary 

complex_record06 

Primary 


storage.reclamation 

task.rendezvous 

storage.reclamation 

task.language.feature.tests 

storage. reclaunation 

task.language.feature.tests 

storage.reclamation 

task.language_feature.tests 

storage.reclamation 

task.language_feature.tests 

storage.reclamation 

statement.block 

exception.handling 

storage.reclamation 

timing.clock 

storage.reclamation 

subprogram.inline 

storage.reclamation 

subprogram.inline 

storage.reclamation 

subprogram.iniine 

storage.reclamation 

subprogram.iniine 

storage.reclamation 

subprogram.inline 

storage.reclamation 

subprogram.inline 

storage.reclamation 

subprogram.iniine 

exception.handling 

storage.reclamation 

subprogram.inline 

exception.handling 

optimization.common_sub_expr_elim 

record.operations 

record.operations 

record.operations 

record.operations 

record.operations 

record.operations 


211 









complex.record07 

Primary 

complex.recordOS 

Primary 

complex.record09 

Primary 

consistent! 

Primary 

Secondary 

consistent2 

Primary 

Secondary 

consistentS 

Primary 

Secondary 

consistent4 

Primary 

Secondary 

consistentS 

Primary 

Secondary 

consistent6 

Primary 

Secondary 

consistent? 

Primary 

Secondary 

crcO 

Primary 

crcl 

Primary 

crc2 

Primary 

crc3 

Primary 

crc4 

Primary 

csel 

Primary 

cse2 

Primary 

cse3 

Primary 

cse4 

Primary 

cseS 

Primary 

cse6 

Primary 

cse? 

Primary 

cse8 

Primary 

cse9 

Primary 

cselO 

Primary 

d.library.l 

Primary 

d.library.2 

Primary 

d.library.3 

Primary 

d.library.S 

Primary 

d.library.6 

Primary 

d.library.7 

Primary 

d.library.S 

Primary 

dead 

Primary 


record.operations 

record.operations 

record.operations 

consiSt ency _check.timing.loop 

statement.if.condition 

consistency_check.timing_loop 

statement.if.condition 

consistency_check.timing.loop 

statement.if.condition 

consistency.check.timing.loop 

statement.if.condition 

consistency_check.timing_loop 

statement.if.condition 
consistency.check.timing.loop 
statement.if.condition 
consistency.check.timing.loop 
statement.if.condition 
application.cyclic_redundancy_check 
application.cyclic_redundancy_check 
application.cyclic.redundancy.check 

application.cyclic.redundancy.check 
application.cyclic.redundancy.check 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
optimization.common.sub.expr.elim 
package.overhead 
package.overhead 
package.overhead 
package.overhead 
package.overhead 
package.overhead 
package.overhead 
optimization.dead 




delay 1 

Primary 

delay2 

Primary 

delays 

Primary 

delay4 

Primary 

delays 

Primary 

delays 

Primary 

delay? 

Primary 

delays 

Primary 

delays 

Primary 

delay 10 

Primary 

delayll 

Primary 

delayl2 

Primary 

delaylS 

Primary 

delayl4 

Primary 

delay.abortl 

Primary 

Secondary 

delay.abort2 

Primary 

Secondary 

delay.zeroO 

Primary 

delay.zerol 

Primary 

delay.zero2 

Primary 

delay.zero3 

Primary 

delay.zero4 

Primary 

delay.zeros 

Primary 

delay.zeros 

Primary 

delay.zeroSx 

Comparison 

delay.zero? 

Primary 

delay.zeros 

Primary 

desl 

Primary 

des2 

Primary 

des3 

Primary 

des4 

Primary 

des4a 

Primary 

desS 

Primary 

desSa 

Primary 

desS 

Primary 

desSa 

Primary 

des? 

Primary 

des?a 

Primary 


delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

task.language.feature_tests 

delay.problems 

task.language.feature.tests 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay.problems 

delay_zero6 

delay.problems 

delay.problems 

application.data_encryption_8tandard 
application.data_encryption_standard 
application.data_encryption_standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 
application.data.encryption.standard 


213 






dhrysl 

Primary 

dhrysl.mod 

Primary 

dhrys2 

Primary 

dhrys2_mod 

Primary 

dhrys3 

Primary 

dhrys3_mod 

Primary 

elabl 

Primary 

elablO 

Primary 

elab2 

Primary 

elab3 

Primary 

elab4 

Primary 

elabS 

Primary 

elab6 

Primary 

elab7 

Primary 

elabS 

Primary 

elab9 

Primary 

enum.iol 

Primary 

onum_io2 

Primary 

enum_io3 

Primary 

enum_io4 

Primary 

enum.ioS 

Primary 

enum_io6 

Primary 

enum_io7 

Primary 

enum.ioS 

Primary 

enum.ioS 

Primary 

ew 

Primary 

filterl 

Primary 

Secondary 

filterli 

Primary 

Secondary 

filter2 

Primary 

Secondary 

filter2i 

Primary 

Secondary 

filter3 

Primary 

filter4 

Primary 

firthl 

Primary 

firthlx 

Comparison 


withdrawn.tests 

classical.dhrystone 

withdrawn.tests 

classical.dhrystone 

withdrawn.tests 

classical.dhrystone 

pragma.suppress.elaboration_chock 

pragma.suppress.elaboration_check 

pragma.suppress.elaboration_check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

pragma.suppress.elaboration.check 

generic.instanstiation 

generic.instanstiation 

generic.instanstiation 

generic.instanstiation 

generic.instanstiation 

generic.instanstiation 

generic. insteuistiation 

generic.instanstiation 

generic.instanstiation 

application.avionics 

application.filter 

generic.subprogram 

application.filter 

generic.subprogram 

application.filter 

generic.package 

application.filter 

generic.package 

application.filter 

application.filter 

record,assignment 

firthl 




firth2 

Primary 

firth2x 

Primary 

firth2y 

Comparison 

firthS 

Primary 

firthSx 

Comparison 

firth4 

Primary 

firth4x 

Comparison 

firthS 

Primary 

firthSv 

Comparison 

firthSw 

Comparison 

firthSx 

Comparison 

firthSy 

Comparison 

firthSz 

Comparison 

firth6 

Primary 

firthSx 

Comparison 

firth? 

Primary 

firth?x 

Comparison 

fold 

Primary 

foldl 

Primary 

fold2 

Primary 

folds 

Primary 

fold4 

Primary 

folds 

Primary 

folds 

Primary 

fold? 

Primary 

folds 

Primary 

fold.mod 

Primary 

forward.eulerl 

Primary 

forward_euler2 

Primary 

funcexcp 

Primary 

gamm 

Primary 

gamm2 

Primary 

heapify 

Primary 

idioms 

Primary 

instl 

Primary 

inst2 

Comparison 

instS 

Comparison 

inst4 

Comparison 

Incidental 

instS 

Comparison 


record.operations 
record.operations 
firth2 

record.aggregates 
firths 

statement.if.coding.style 
firth4 

subprogram.external 

firths 

firths 

firthS 

firths 

firths 

optimization.constamt.propagation 
firth6 

pragma.suppress.ramge.check 
firth? 

withdrawn.tests 

optimizauion.folding 

optimization.folding 

optimization.folding 

optimization.folding 

optimizatj on.folding 

optimization.folding 

optimization.folding 

optimization.folding 

optimization.folding 

application.avionics 

application.avionics 

exception.handling 

classical.GAMM.measure 

classical.GAMM.measure 

classical.numerical.comp_fam_arch(CFA) 

optimization.machine.idiom 

lO.Text.IO 

instl 

instl 

instl 

image 

instl 


215 




int.O 

Primary 

int.l 

Primary 

int_2 

Primary 

int_3 

Primary 

int.4 

Primary 

int.5 

Primary 

int.6 

Primary 

int.7 

Primary 

int.8 

Primary 

int.9 

Primary 

invar 

Primary 

ioO 

Primary 

iol 

Primary 

io2 

Primary 

io3 

Primary 

io4 

Primary 

io5 

Primary 

io6 

Primary 

io7 

Primary 

io8 

Primary 

io9 

Primary 

iolO 

Primary 

ioll 

Primary 

iol2 

Primary 

iol3 

Primary 

iol4 

Primary 

iol5 

Primary 

iol6 

Primary 

iol7 

Primary 

iol8 

Primary 

iol9 

Primary 

io20 

Primary 

io21 

Primary 

io22 

Primary 

io23 

Primary 

io24 

Primary 

io25 

Primary 

io26 

Primary 

io27 

Primary 

io28 

Primary 


task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

task.interrupt 

optimization.loop.invariant 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

10.direct 

10.direct 

10.direct 

10.direct 

10.direct 

10.direct 

10.sequential 

10.sequential 

10.sequential 

10,sequential 

10.sequential 

10.sequential 

10.sequential 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 

lO.Text.IO 


216 




1029 

1030 

io_80_20_l 

io_80_20_2 

io_80.20.3 

io_80_20_4 

io_80_20_5 

io_80_20_6 

io_80_20_7 

io_80_20_8 

io_80_20_9 

io_80_20_10 

io_copyl 

io_copy2 

io_copy3 

io_copy4 

io.interl 

io_inter2 

io_intar3 

io.maml 

io_mem2 

io_niem3 

io.patternl 

io_pattern2 

io_pattern3 

io_pattern4 

io.patternS 

io_pattern6 

io_pattern7 

io.patternS 

io.recurl 

io_recur2 

io_recur3 

io.scanl 

io_scan2 

io_scan2x 

io_6can3 

io.scan4 


Primary 

lO.Text.IO 

Primary 

lO.Text.IO 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.sequential 

Primary 

10.sequential 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.sequential 

Primary 

10.direct 

Secondary 

10.sequential 

Primary 

10.direct 

Secondary 

10.sequential 

Primary 

record.operations 

Primary 

record.operations 

Primary 

record.operations 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Primary 

10.direct 

Comparison 

io_scan2 

Primary 

10.direct 

Primary 

10.direct 




io.scanS 

Primary 

io.scanO 

Primary 

io.scan? 

Primary 

io.scanS 

Primary 

io.scanll 

Primary 

io_scanl2 

Primary 

io.scanlS 

Primary 

io_scanl4 

Primary 

io.scanlS 

Primary 

io.scauiie 

Primary 

io.scanl? 

Primary 

io.scanlS 

Primary 

io.unif1 

Primary 

io.unif2 

Primary 

io.unifS 

Primary 

io_unif4 

Primary 

io.unifS 

Primary 

io.unifS 

Primary 

iqsort 

Primary 

kalman 

Primary 

Incidental 


kernel1 

Primary 

kernel2 

Primary 

kernels 

Primary 

kernel4 

Primary 

kernels 

Primary 

kernels 

Primary 

kernel? 

Primary 

kernels 

Primary 

kernels 

Primary 

kernel10 

Primary 

kernel11 

Primary 

kernel12 

Primary 

kernellS 

Primary 

kernel14 

Primary 

kernellS 

Primary 


10.direct 

10.direct 

10.direct 

10.direct 

10.sequential 

10.sequential 

10.direct 

10.direct 

IQ.direct 

10.direct 

10.direct 

10.direct 

10.direct 

IQ.direct 

10.direct 

10.direct 

10.direct 

10.direct 

classical.sort 

application.kalman.filter 

math. function. eorctan 

math.function.cos 

math.function.sin 

math.function.sqrt 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 

classical.numerical.livermore.loops 





kernel16 

Primary 

kernel16.goto 

Comparison 

Secondary 

kernel17 

Primary 

kernel18 

Primary 

kernel19 

Primary 

kernel20 

Primary 

kernel21 

Primary 

kernel22 

Primary 

kernel23 

Primary 

kernel24 

Primary 

label 

Primary 

loopO 

Primary 

loopl 

Primary 

loop2 

Primary 

loop3 

Primary 

loop4a 

Primary 

loop4b 

Primary 

loop4c 

Primary 

loops 

Primary 

loop6 

Primary 

loop? 

Primary 

loops 

Primary 

loop9 

Primary 

looplO 

Primary 

loop11 

Primary 

loop12 

Primary 

loopl3 

Primary 

loopl4 

Primary 

looplS 

Primary 

loopie 

Primary 

looplT 

Primary 

lu 

Primary 

merge1 

Primary 

merge2 

Primary 

neural 

Primary 

purel 

Primary 

pure2 

Comparison 

pure3 

Primary 

pure4 

Comparison 


classical.numerical.livermore.loops 
kernel16 
statement.goto 

classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
classical.numerical.livermore.loops 
statement.null 

classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.knuth.loops 
classical.niuaerical.knuth.loops 
classical.numerical.knuth.loops 
classical.numerical.comp.fam.arch(CFA) 
classical.sort 
classical.sort 
application.ai 

optimization.common.sub.expr.elim 
purel 

optimization.loop.invariant 
pure3 


219 








pureS 

Primary 

pure6 

Comparison 

pure? 

Primary 

pureS 

Comparison 

puzzle 

Primary 

qsortl 

Primary 

qsort2 

Primary 

queens 

Primary 

queens.mod 

Primary 

reclaim.collection. 

.constrained 

Primary 

Secondary 

reclaim.collection. 

.unconstrained 

Primary 

Secondary 

reclaim.global.heap.constrained 

Primary 

Secondary 

reclaim.global.heap.unconstrained 

Primary 

Secondary 

reed.Solomon.0 

Primary 

reed.Solomon.1 

Primary 

reed.Solomon.2 

Primary 

reed.Solomon.3 

Primary 

reed.Solomon.4 

Primary 

runge 

Primary 

s.library.l 

Primary 

s_library.2 

Primary 

s_library_3 

Primary 

s.library.S 

Primary 

s.library.e 

Primary 

s.library.? 

Primary 

s.library.S 

Primary 

search 

Primary 

shell1 

Primary 

shell2 

Primary 

sieve 

Primary 


optimization.common.sub.expr.elim 
pure 5 

optimization.loop_invariant 
pure? 

classical.cube.placing 
classical.sort 
classical.sort 
withdrawn.tests 
classical.eight.queens 

storage.reclamation 
access.operations 

storage.reclamation 
access.operations 

storage.reclamation 
access.operations 

storage.reclamation 

access.operations 

application.error.correcting.code 

application.error.correcting.code 

application.error.correcting.code 

application.error.correcting.code 

application.error.correcting.code 

classical.numerical.comp.fam.arch(CFA) 

package.overhead 

package.overhead 

package.overhead 

package.overhead 

package.overhead 

package.overhead 

package.overhead 

classical.search 

classical.sort 

classical.sort 

classical.prime.number 


220 





simulate.bmbat 

Primary 

simulate.emrpm 

Primary 

simulate.hmproto 

Primary 

simulate.qmpitch 

Primary 

simulate.rcwfrdet 

Primary 

simulate.umnav 

Primary 

simulate.kmdump 

Primary 

simulate_rmkeying 

Primary 

slicel 

Primary 

slice2 

Primary 

slices 

Primary 

slice4 

Primary 

slices 

Primary 

slices 

Primary 

slice? 

Primary 

sliced 

Primary 

ssO 

Primary 

ssl 

Primary 

ss2 

Primary 

Secondary 

ss2_modl 

Primary 

s82.mod2 

Comparison 

ss3 

Primary 

8S4 

Primary 

ss5 

Primary 

ss6 

Primary 

ss7 

Primary 

Secondary 

ss8 

Primary 

Secondary 

ssS.mod 

Primary 

ss9 

Primary 

sslO 

Primary 

ssll 

Primary 

S8l2 

Primary 

8813 

Primary 

8814 

Primary 

Secondary 

sslS 

Primary 

Secondary 


application.simulation 
application.simulation 
application.simulation 
application.simulation 
application.simulation 
application.simulation 
application.simulation 
application.simulation 
record.operations 
record.operations 
record.operations 
record.operations 
record.operations 
record.operations 
record.operations 
record.operations 
statement.null 
float.operations 
conversion.float 
optimization.folding 
conversion.float 
ss2_modl 

float.operations 

float.operations 

float.operations 

float.operations 

integer.operations 

optimization.machine_idiom 

conversion.integer 

optimization.folding 

conversion.integer 

integer.operations 

integer.operations 

integer.operations 

conversion.integer 

conversion.float 

math.function.exp 

math.function.log 

optimization.strength.reduction 

expression.exponentiating 


221 





8616 

Primary 

optimization.strength.reduction 



Secondary 

expre88ion.exponentiating 


ssl7 

Primary 

array.operations 


sslS 

Primary 

array.operations 


8819 

Primary 

array.operations 


ss20 

Primary 

scope.local 



Secondary 

float.operations 


8821 

Primary 

record.component.assignment 



Secondary 

expression.exponentiating 




float.operations 


8822 

Primary 

statement.block 



Secondary 

float.operations 


ss23 

Primary 

statement.block 



Secondary 

float.operations 


ss24 

Primary 

statement.block 



Secondary 

float.operations 


8825 

Primary 

statement.block 



Secondary 

float.operations 


ss26 

Primary 

statement.goto 


ss27 

Primary 

math.function.sin 


8828 

Primary 

math.function.cos 


ss29 

Primary 

expression.abs 



Secondary 

optimization.machine,idiom 


8830 

Primary 

expression.abs 



Secondary 

optimization.machine,idiom 


8831 

Primary 

math.function.exp 


8832 

Primary 

math.function.log 


8833 

Primary 

math.function.sqrt 


8834 

Primary 

math.function.arctan 


8s35 

Primary 

math.function.sgn 


ss36 

Primary 

subprogram.external 


8837 

Primary 

subprogram.ext ernal 


8s38 

Primary 

subprogram.external 


8839 

Primary 

subprogram.external 


8s40 

Primary 

optimization.machine,idiom 



Secondary 

integer.operations 


8s41 

Primary 

optimization.folding 



Secondary 

integer.operations 


8841,mod 

Primary 

optimization.folding 



Secondary 

integer.operations 





222 





ss42 

Primary 

Secondary 

ss42_mod 

Primary 

Secondary 

ss43 

Primary 

Secondary 

8s44 

Primary 

Secondary 

ss45 

Primary 

Secondary 

ss4€ 

Primary 

S847 

Primary 

Secondary 

ss48 

Primary 

Secondary 

ss49 

Primary 

Secondary 

ssSO 

Primary 

Secondary 

ss51 

Primary 

Secondary 

S852 

Primary 

Secondary 

ss53 

Primary 

Secondary 

ss54 

Primary 

Secondary 

ss55 

Primary 

Secondary 

ss56 

Primary 

Secondary 

ss57 

Primary 

Secondary 

ssSS 

Primary 

Secondary 

ss59 

Primary 

Secondary 


optimization.folding 
integer.operations 
optimization.folding 
integer.operations 
optimization.machine.idiom 
integer.operations 

optimization.algebraic.simplification 
integer.operations 
optimization.machine.idiom 
integer.operations 
Integer.operations 

optimization.algebraic.simplification 
integer.operations 

optimization.algebraic.simplification 
integer.operations 

optimization.algebraic.simplification 
integer.operations 

optimization.algebraic.simplification 
expression.exponentiating 
integer.operations 

optimization.algebraic.simplification 

expression.exponentiating 

integer.operations 

optimization.machine.idiom 

integer.operations 

pragma.suppress.index.check 

array.operations 

pragma.suppress.index.check 

array.operations 

optimization.folding 

optimization.folding 

array.operations 

optimization.dead 

integer.operations 

array.operations 

loop.for 

loop.for 

array.operations 
optimization.machine.idiom 
float.operations 


223 











ss60 

Primary 

Secondary 

ss€l 

Primary 

Secondary 

ss62 

Primary 

Secondary 

8863 

Primary 

Secondary 

8864 

Primary 

Secondary 

ss65 

Primary 

Secondary 

ss66 

Primary 

Secondary 

8s67 

Primary 

Incidental 

ss68 

Primary 

Incidental 

8869 

Comparison 

Incidental 

8870 

Primary 

Incidental 

ss71 

Primary 

Secondary 

ss72 

Primary 

ss73 

Primary 

Secondary 

8874 

Primary 

Secondary 

8s75 

Primary 

Secondary 

ss76 

Primary 

Secondary 

ss77 

Primary 

ss78 

Primary 

ss79 

Primary 

ss80 

Primary 

Secondary 


optimization.folding 
float.operations 

optimization,algebraic.simplification 
float.operations 

optimization.algebraic.simplification 
float.operations 

optimization.algebraic.simplification 
float.operations 

optimization.algebraic.simplification 
float.operations 

optimization.algebraic.simplification 
expression.exponentiating 
float.operations 

: optimization.algebraic.simplification 
: expression.exponentiating 
float.operations 

: optimization.algebraic.simplification 
: float.operations 
: optimization.dead 
: float.operations 
: sb70 

: float.operations 
: optimization.folding 
: float.operations 
: optimization.dead 
: float.operations 
: boolean.expressions 

: optimization.algebraic.simplification 
: boolean.expressions 

: optimization.algebraic.simplification 
: boolean.expressions 
: optimization.common.sub.expr.elim 
: array.operations 

: optimization.common.sub.expr.elim 
: array.operations 
: array.operations 
; array.operations 
: array.operations 
: array.operations 
: loop.for 


224 




ss81 

Primary 

Secondary 

ss82 

Primary 

ss83 

Primary 

Secondary 

ss84 

Primary 

ss85 

Primary 

ss86 

Primary 

ss87 

Primary 

ss88 

Primary 

ss89 

Primary 

ss90 

Primary 

ss91 

Primary 

ss92 

Primary 

ss93 

Primary 

Secondary 

ss94 

Primary 

ss95 

Primary 

ss95.mod 

Primary 

Incidental 

ss96 

Primary 

S896.mod 

Primary 

Incidental 

8s97 

Primary 

ss97_mod 

Primary 

Incidental 

ss98 

Primary 

ss98_mod 

Primary 

Incidental 

ss99 

Primary 

sslOO 

Primary 

sslOl 

Primary 

ssl02 

Primary 

Incidental 

ssl03 

Primary 

Incidental 

ssl04 

Primary 

sslOS 

Primary 

Secondary 


array.operations 
loop.for 

statement.if.coding_style 
statement.if.coding.style 
optimization.folding 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.coding.style 
statement.if.condition 
optimization.redundant.code 
statement.if.coding.style 
withdrawn.tests 
scope.local 
integer.operations 
withdrawn.tests 
scope.intermediate 
integer.operations 
withdrawn.tests 
scope.intermediate 
integer.operations 
withdrawn.tests 
scope.intermediate 
integer.operations 
type.string.assignment 
record.as signment 
boolean.expressions 
integer.MOD 
integer.operations 
integer. REM 
integer.operations 
loop.for 
loop.for 

optimization.loop.unrolling 







ssl06 

Primary 

Secondary 

88107 

Primary 

sslOS 

Primary 

ssl09 

Primary 

ssllO 

Primary 

sslll 

Primary 

88112 

Primary 

ssllS 

Primary 

Secondary 

ssll4 

Primary 

ssllS 

Primary 

Secondary 

sslie 

Primary 

88117 

Primary 

Incidental 

ssllS 

Primary 

ssll9 

Primary 

SS120 

Primary 

Secondary 

Incidental 

88121 

Primary 

Incidental 

ssl22 

Primary 

Incidental 

8s123 

Primary 

Incidental 

ssl24 

Primary 

SS125 

Primary 

SS126 

Primary 

88127 

Primary 

SS128 

Primary 

Incidental 

ssl29 

Primary 

Comparison 

Incidental 

ssl30 

Primary 

Incidental 


statement.null 
loop.for 

conversion.fixed 

conversion.fixed 

fixed.operations 

fixed.operations 

type.string.assignment 

type.string.assignment 

expression.catenation 

type.string.assignment 

record.assignment 

record.component.assignment 

optimization.machine _idiom 

record.aggregates 

exception.raise 

pragma.suppress.range.check 

integer.operations 

statement.case 

statement.case 

application.polynomial.coding.style 
array.operations 
float.operations 
loop.for 

application.polynomial.coding.style 
float.operations 

application.polynomial.coding.style 
float.operations 

application.polynomial.coding.style 

float.operations 

parameters.default 

parameters.default 

parameters.default 

subprogram.local 

type.enumeration.attributes 

statement.if.condition 

statement.if.condition 

SS128 

integer.operations 

type.enumeration.attributes 

integer.operations 


226 







SS131 

Primary 

Incidental 

ssl32 

Primary 

Incidental 

ssl33 

Primary 

Secondary 

ssl34 

Primary 

Secondary 

ssl35 

Primary 

Secondary 

88136 

Primary 

Secondary 

SS137 

Primary 

Secondary 

ssl38 

Primary 

Incidental 

ssl39 

Primary 

Incidental 

ssl40 

Primary 

Incidental 

ssl41 

Primary 

Incidental 

ssl42 

Primary 

Incidental 

ssl43 

Primary 

Incidental 

ssl44 

Primary 

Comparison 

ssl45 

Primary 

Incidental 

SS146 

Primary 

Incidental 

SS147 

Primary 

Incidental 

SS148 

Primary 

Incidental 

88149 

Primary 

Secondary 

sslBO 

Primary 

Secondary 


im^ge 

integer.operations 

type.enumeration.operations 

statement.if.condition 

type.enumeration.operations 

statement.case 

I0.Text_I0.float.string 

float.operations 

10.Text_I0.float.string 

float.operations 

10.Text.ID.float.string 

float.operations 

10.Text.10.integer.string 

integer.operations 

pareuneters .modes 

integer.operations 

parameters.modes 

integer.operations 

parameters.modes 

integer.operations 

subprogram.local 

float.operations 

subprogram.inline 

float.operations 

subprogram.local 

float.operations 

statement.if.condition 

SS142 

parameters.modes 
boolean.expressions 
parameters.modes 
boolean.expressions 
parameters.modes 
boolean.expressions 
generic.subprogram 
loop.while 
generic.subprogram 
type.string.assignment 
generic.subprogram 
float.operations 


227 






sslSl 

Primary 

type.string.assignment 


Comparison 

ssl49 

ssl52 

Primary 

record.discriminants 

ssl53 

Primary 

record.discriminants 

ssl54 

Primary 

access.operations 


Incidental 

float.operations 

ssl55 

Primary 

access.operations 


Incidental 

float.operations 

ssl56 

Primary 

pragma.pack 


Secondary 

record.component.assignment 

SS157 

Primary 

pragma.pack 


Secondary 

record.component.assignment 

ssl58 

Primary 

pragma.pack 


Secondary 

record.component.assignment 

88159 

Primary 

pragma.pack 


Secondary 

record.component.assignment 

88160 

Primary 

pragma.pack 


Secondary 

record.component.assignment 

88161 

Primary 

pragma.pack 


Secondary 

access.operations 

record.component.assignment 

88162 

Primary 

storage.reclamation 


Secondary 

access.operations 


Incidental 

loop.while 

88163 

Primary 

storage.reclamation 


Secondary 

access.operations 


Incidental 

loop.for 

ssl64 

Primary 

storage.reclamation 


Secondary 

access.operations 


Incidental 

loop.for 

88 165 

Primary 

storage.reclamation 


Secondary 

access.operations 


Incidental 

loop.for 
loop.while 

8s166 

Primary 

storage.reclamation 


Secondary 

access.operations 


Incidental 

loop.for 
loop.while 


228 







8s167 

Primary 

Secondary 

Incidental 

S8l68 

Primary 

Secondary 

S8169 

Primary 

Secondary 

ssl70 

Primary 

Secondary 

88171 

Primary 

Secondary 

ssl72 

Primary 

Secondary 

ssl73 

Primary 

Secondary 

SS174 

Primary 

Secondary 

ssl75 

Primary 

Secondary 

ssl76 

Primary 

Secondary 

Incidental 

SS177 

Primary 

Comparison 

Incidental 

ssl78 

Primary 

Incidental 

ssl79 

Primary 

Comparison 

ssl80 

Primary 

Secondary 

ssl81 

Primary 

Comparison 

ssl82 

Primary 

Secondary 

ssl83 

Primary 

Secondary 

S8l84 

Primary 

Secondary 


storage.reclamation 
access.operations 
loop.for 

pragma.suppress.range.check 

array.operations 

pragma.suppress.range.check 

array.operations 

pragma.suppress.range.check 

array.operations 

pragma.suppress.range.check 

loop.for 

optimization.common_sub_expr_elim 

array.operations 

optimization.machine.idiom 

array.operations 

optimization.bounds _ check 

array.operations 

optimization.merge.tests 

array.operations 

optimization.booleam.var.elim 

boolean.expressions 

statement.if.condition 

boolean.expressions 

SS176 

statement.if.condition 
optimization.merge.tests 
statement.if.condition 
statement.if.condition 
SS178 

optimization.loop.fusion 
loop.for 
loop.for 
ssl80 

optimization.jump.tracing 
loop.exit 

optimization.jump.tracing 
loop.exit 

optimization.jump.tracing 
loop.exit 



8s185 

Primary 

Secondary 

ssl86 

Primary 

ssl87 

Primary 

ssl88 

Primary 

Secondary 

ssl89 

Primary 

Secondary 

S8190 

Comparison 

Incidental 

SS191 

Primary 

Incidental 

ssl92 

Primary 

Secondary 

ssl93 

Primary 

Secondary 

SS194 

Primary 

Secondary 

S8i95 

Primary 

Secondary 

ssl96 

Primary 

Secondary 

88197 

Primary 

Secondary 

ssl98 

Primary 

Secondary 

ssl99 

Primary 

Secondary 

ss200 

Primary 

Incidental 

SS201 

Primary 

SS202 

Primary 

ss203 

Primary 

ss204 

Primary 

Secondary 

8s20S 

Primary 

Incidental 

ss206 

Primary 

Comoarison 


optimization.folding 
loop.while 

statement.if.coding.style 
statement.if.coding.style 
optimization.strength.reduction 
expression.exponentiating 
optimization.folding 
integer.operations 
SS189 

integer.operations 
expression.exponentiating 
integer.operations 
optimization.bounds.check 
array.operations 
optimization.bounds.check 
array.operations 
optimization.bounds.check 
array.operations 
optimization.redundant.code 
integer.operations 
optimization.machine.idiom 
integer.operations 
optimization.machine.idiom 
integer.operations 
optimization.machine.idiom 
integer.operations 
optimization.machine.idiom 
integer.MOD 

optimization.machine.idiom 
integer.operations 
integer.operations 
integer.operations 
integer.operations 
optimization.machine.idiom 
integer.REM 

optimization.machine.idiom 
statement.if.condition 
statement.if.condition 
ss205 


230 








ss207 

Primary 

Secondary 

ss208 

Primary 

Secondary 

ss209 

Primary 

Incidental 

ss210 

Primary 

Incidental 

SS211 

Primary 

Comparison 

SS212 

Primary 

Incidental 

ss213 

Primary 

Secondary 

Incidental 

ss214 

Primary 

Incidental 

ss215 

Primary 

Secondary 

8s216 

Primary 

Secondary 

ss216.mod 

Primary 

Secondary 

ss217 

Primary 

Secondary 

SS218 

Primary 

Incidental 

ss219 

Primary 

Secondary 

ss219_mod 

Primary 

Secondary 

ss220 

Primary 

Secondary 


: optimization.machine.idiom 
: statement.if.condition 
: optimization.machine.idiom 
: statement.if.condition 
: loop.while 
: integer.operations 
: optimization.common.sub.expr.elim 
: float.operations 
: float.operations 
: ss210 

: optimization.loop.invariant 
: loop.for 

; optimization.strength.reduction 
: expression.exponentiating 
: integer.operations 
loop.for 

: optimization.machine.idiom 
: integer.operations 
statement.if.condition 
: optimization.machine.idiom 
: record.component.assignment 
: optimization.folding 
: expression.exponentiating 
float.operations 
: optimization.folding 
: expression.exponentiating 
float.operations 
; optimization.folding 
; expression.exponentiating 
integer.operations 

: optimization.algebraic.simplification 
: float.operations 
: optimization.folding 
: expression.exponentiating 
float.operations 
: optimization.folding 
; expression.exponentiating 
float.operations 

: optimization.algebraic.simplification 
: float.operations 


231 




ss221 

Primary 

Secondary 

ss222 

Primary 

ss223 

Primary 

ss224 

Primary 

ss225 

Primary 

Secondary 

ss226 

Primary 

Incidental 

ss227 

Primary 

Secondary 

Incidental 

ss228 

Primary 

Incidental 

ss229 

Primary 

Incidental 

88230 

Primary 

Secondary 

Incidental 

ss231 

Primary 

Secondary 

Incidental 

88232 

Primary 

Secondary 

Incidental 

ss233 

Primary 

Incidental 

ss234 

Primary 

Incidental 

ss235 

Primary 

Secondary 

SS236 

Primary 

Secondary 

Incidental 

88237 

Primary 

Secondary 

Incidental 


: optimization.algabraic.simplification 
; integer.operations 
: optimization.loop.invariant 
: statement.if.coding.style 
: statement.if.coding.style 
: optimization.dead 
: loop.for 
: optimization.dead 
: float.operations 
: optimization.folding 
: boolean.expressions 
: statement.if.condition 
boolean.expressions 
statement.if.condition 
boolean.expressions 
statement.if.condition 
optimization.f olding 
boolean.expressions 
statement.if.condition 
optimization.folding 
boolean.expressions 
statement.if.condition 
optimization.folding 
booleem.expressions 
statement.if.condition 
conversion.integer 
float.operations 
conversion.integer 
float.operations 

optimization.register.allocation 
array.operations 
optimization.loop.induction 
loop.for 

subprogram.external 
subprogram.local 
: optimization.loop.induction 
: loop.for 

: subprogram.external 
subprogram.local 


232 



8s238 

Primary 

Secondary 

ss239 

Primary 

Secondary 

ss240 

Primary 

Secondary 

ss241 

Primary 

Incidental 

88242 

Primary 

Secondary 

S8243 

Primary 

Secondary 

8s244 

Primary 

ss24S 

Primary 

8s246 

Primary 

Secondary 

S8247 

Primary 

Secondary 

ss248 

Primary 

Secondary 

88249 

Primary 

Secondary 

ss250 

Primary 

Secondary 

ss251 

Primary 

ss252 

Primary 

Secondary 

ss253 

Primary 

ss254 

Primary 

Secondary 

ss255 

Primary 

Secondary 

ss256 

Primary 

Secondary 

88257 

Primary 

Secondary 

ss258 

Primary 

Comparison 

Secondary 


optimization, loop.uzirolling 
loop.for 

optimization.folding 
loop.for 

optimization.loop_unrolling 

loop.for 

conversion.null 

integer.operations 

record.discriminemts 

pragma.suppress.discriminant_check 

pragma.suppress.range.check 

type.string.assignment 

array.operations 

record.component.assignment 

record.discriminamts 

expression.attributes 

array.operations 

subprogram.local 

parameters.passing 

subprogram.local 

parameters.passing 

subprogram.local 

parameters.passing 

optimization.jump.tracing 

loop.exit 

type.enumeration.attributes 
type.enumeration.attributes 
pragma.suppress.range_check 
type.enumeration.attributes 
type.enumeration.attributes 
pragma.suppress.range_check 
type.enumeration.attributes 
pragma.suppress.range.check 
access.operations 
float.operations 
access.operations 
float.operations 
subprogram.local 
ss259 

array.operations 





ss259 

Primary 

Secondary 

ss260 

Primary 

Secondary 

ss261 

Primary 

Secondary 

ss262 

Primary 

Incidental 

ss263 

Primary 

Incidental 

ss264 

Primary 

Incidental 

ss265 

Primary 

Incidental 

ss2€6 

Primary 

Incidental 

ss267 

Primary 

Incidental 

ss268 

Primary 

Comparison 

Incidental 

ss269 

Primary 

Comparison 

Incidental 

88270 

Primary 

88271 

Primary 

88272 

Primary 

88273 

Primary 

88274 

Primary 

ss275 

Primary 

88276 

Primary 

Incidental 

8s277 

Primary 

Secondary 

ss278 

Primary 


: conversion.unchecked.conversion 
: array.operations 
: optimization.inline 
: subprogram.local 
: optimization.redundauit.code 
: statement.goto 

: optimization.register.allocation 
: float.operations 

statement.if.condition 
: optimization.register.allocation 
: float.operations 

statement.if.condition 
: optimization.register.allocation 
: integer.operations 
statement.if.condition 
: optimization.register.allocation 
: integer.operations 
: expression.abs 
: integer.operations 
: type.named.number 
: integer.operations 
math.function.sgn 
: integer.operations 
: SS267 

: math.function.sgn 
: integer.operations 
: SS267 

: math.function.sgn 
: integer.bigint.operations 
: integer.bigint.operations 
: integer.bigint.operations 
: integer.bigint.operations 
: integer.bigint.operations 
: integer.bigint.operations 
; integer.bigint.operations 
: integer.REN 

: integer.bigint.operations 
: conversion.integer 
: integer.bigint.operations 








ss279 

Primary 

Secondary 

ss280 

Primary 

Secondary 

ss281 

Primary 

ss282 

Primary 

Secondary 

ss283 

Primary 

Secondary 

ss284 

Primary 

Secondary 

ss285 

Primary 

Secondary 

ss286 

Primary 

SS287 

Primary 

ss288 

Primary 

ss289 

Primary 

ss290 

Primary 

ss291 

Primary 

Secondary 

Incidental 

ss292 

Primary 

Incidental 

ss293 

Primary 

Secondary 

8s294 

Primary 

Secondary 

ss295 

Primary 

Secondary 

ss296 

Primary 

Secondary 

ss297 

Primary 

Secondary 

ss298 

Primary 

Secondary 

ss299 

Primary 

Secondary 

ss300 

Primary 

ss301 

Primary 

Secondary 


optimization.strength.reduction 

expression.exponentiating 

integer.bigint.operations 

boolean.expressions 

integer.operations 

integer.bigint.operations 

conversion.integer 

integer.bigint.operations 

conversion.float 

integer.bigint.operations 

array.operations 

optimization.folding 

array.operations 

float.operations 

float.operations 

float.operations 

conversion.float 

conversion.float 

optimization.strength.reduction 

expression.exponentiating 

float.operations 

statement.if.condition 

float.operations 

expression.abs 

float.operations 

math.function.sin 

float.operations 

math.function.cos 

float.operations 

math.function.exp 

float.operations 

math.function.log 

float.operations 

math.function.sqrt 

float.operations 

math.function.arctan 

float.operations 

conversion.integer 

array.operations 

float.operations 




ss302 

Primary 

ss303 

Primary 

Secondary 

ss304 

Primary 

Secondary 

Incidental 

ss305 

Primary 

Secondary 

Incidental 

ss306 

Primary 

Secondary 

Incidental 

ss307 

Primary 

Secondary 

Incidental 

ss308 

Primary 

Incidental 

ss309 

Primary 

Secondary 

ss310 

Primary 

ss311 

Primary 

Incidental 

ss312 

Primary 

Incidental 

8s313 

Primary 

Incidental 

S8314 

Primary 

Secondary 

Incidental 

ss315 

Primary 

Comparison 

Incidental 

ss316 

Primary 

Secondary 

Incidental 

88317 

Primary 

Secondary 

Incidental 


float.operations 
optimization.folding 
conversion.integer 
optimization.folding 
expression.exponentiating 
float.operations 
optimization.folding 
expression.exponentiating 
float.operations 
optimization.folding 
expression.exponentiating 
float.operations 

optimization.register.allocation 

expression.exponentiating 

float.operations 

float.operations 

math.function.exp 

math.function.log 

type.enumeration.operations 

array.operations 

type.enumeration.operations 

exception.raise 

statement.if.condition 

exception.raise 

statement.if.condition 

exception.numeric.error 

statement.if.condition 

optimization.folding 

float.operations 

boolean.expressions 

float.operations 

ss314 

boolean.expressions 

optimization.constant.propagation 

float.operations 

boolean.expressions 

optimization.constant.propagation 

float.operations 

boolean.expressions 









ss318 

Primary 

Secondary 

Incidental 

ss319 

Primary 

Incidental 

ss320 

Primary 

Incidental 

ss321 

Primary 

Incidental 

sb322 

Primary 

Incidental 

ss323 

Primary 

Secondary 

Incidental 

ss324 

Primary 

Secondary 

ss325 

Primary 

Secondary 

ss326 

Primary 

Secondary 

SS327 

Primary 

Secondary 

ss328 

Primary 

Secondary 

ss329 

Primary 

Secondary 

ss330 

Primary 

Secondary 

ss331 

Primary 

Secondary 

ss332 

Primary 

Secondary 

ss333 

Primary 

Secondary 

ss334 

Primary 

Secondary 

ss335 

Primary 

Secondary 

ss336 

Primary 

Secondary 


optimization.folding 
float.operations 
boolean.expressions 

optimization.algebraic.simplification 

statement.if.condition 

optimization.algebralc.simplification 

statement.if.condition 

optimization.algebraic.simplification 

statement.if.condition 

optimization.algebraic.simplification 

statement.if.condition 

optimization.machine.idiom 

float.operations 

boolean.expressions 

float.operations 

statement.if.condition 

optimization.folding 

statement.case 

boolean.arrays.unpacked 

boolean.expressions 

booleem.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

statement.if.condition 

boolean.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 

conversion.packed.to.unpacked 

boolean.expressions 

boolean.arrays.unpacked 

boolean.expressions 


237 





88337 

Primary 

Secondary 

ss338 

Primary 

Secondary 

ss339 

Primary 

Secondary 

Incidental 

88340 

Primary 

Secondary 

SS341 

Primary 

Secondary 

ss342 

Primary 

Secondary 

ss343 

Primary 

Secondary 

8s344 

Primary 

Secondary 

88345 

Primary 

Secondary 

ss346 

Primary 

Secondary 

Incidental 

88347 

Primary 

Secondary 

S8348 

Primary 

Secondary 

ss349 

Primary 

Secondary 

8s350 

Primary 

Secondary 

ss351 

Primary 

Secondary 

ss352 

Primary 

Secondary 

ss353 

Primary 

Secondary 

Incidental 

ss354 

Primary 


boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
statement.if.condition 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
boolean.expressions 
conversion.packed_to_unpacked 
boolean.expressions 
boolean.arrays.packed 
boolean.arrays.unpacked 
boolean.arrays.packed 
boolean.expressions 
boolean.arrays.packed 
booleem.expressions 
boolean.arrays.packed 
boolean.expressions 
conversion.unpacked_to_packed 
boolean.expressions 
booleeui. arrays. unpacked 
boolean.expressions 
boolean.arrays.unpacked 
boolean.expressions 
conversion.packed_to_unpacked 
boolean.expressions 
boolean.arrays.packed 
boolean.arrays.unpacked 
loop.exit 


238 





88355 

ss356 

8s357 

ss358 

S8359 

ss360 

ss361 

88362 

ss363 

88364 

88365 

88366 
ss367 

88368 

88369 

88370 

88371 
ss372 

88373 

88374 

88375 


Primary : loop.exit 
Incidental : statement.if.condition 
Primary : loop.exit 
Incidental : statement.goto 

statement.if.condition 


Primary : loop.exit 

Primary : subprogram.local 

Primary : subprogram.local 

Primary : subprogram.local 

Primary : subprogram.nested 

Primary : optimization.folding 

Incidental : integer.REM 

Primary : pragma.suppress.range.check 
Incidental ; integer.REM 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary ; pragma.suppress.r 2 uige_check 
Incidental : subprogram.external 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary : optimization.bounds.check 
Secondary : expression.abs 
Primary : exception.numeric.error 
Incidental : integer.operations 
loop.while 

Primary : subprogram.local 
Secondary : type.string.assignment 
Incidental : image 
Primary ; type.string.assignment 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 
Primary : pragma.suppress.range.check 
Incidental : integer.operations 


239 








ss376 

Primary 

Secondary 

ss377 

Primary 

Secondary 

ss378 

Primary 

88379 

Primary 

Incidental 

ss380 

Primary 

Incidental 

ss381 

Primary 

Incidental 

ss382 

Primary 

Incidental 

ss383 

Primary 

Incidental 

8s384 

Primary 

Incidental 

ss385 

Primary 

Incidental 

88385x 

Primary 

Comparison 

Secondary 

Incidental 

88386 

Primary 

Secondary 

Incidental 

88387 

Primary 

Secondary 

Incidental 

ss388 

Primary 

Secondary 

8s389 

Primary 

Secondary 

8s390 

Primary 

Secondary 


; optimization.redundant.code 
loop.exit 

optimization.redundant_code 
loop.exit 
parameters.modes 
exception.handling 
subprogram.local 

exception .hauidling 

subprogram.local 
exception. heuidling 
subprogram.local 
exception.hzmdling 
subprogram.local 
exception.handling 
subprogram.local 
exception.handling 
integer.operations 
subprogram.local 
; optimization.loop.rotation 
: loop.while 

subprogrsun. external 
: optimization.machine.idiom 
; ss385 

: statement.goto 
: integer.operations 
statement.if.condition 
; optimization.loop.rotation 
: loop.exit 
: integer.operations 
subprogram.external 
: optimization.loop.rotation 
; loop.for 

: subprogram.external 
: optimization.register.allocation 
: array.operations 
: expression.parenthesis 
: float.operations 
; expression.parenthesis 
: float.operations 


240 




ss391 

Primary 

Secondary 

ss392 

Primary 

Secondary 

ss393 

Primary 

Secondary 

ss394 

Primary 

Secondary 

ss395 

Primary 

Secondary 

ss396 

Primary 

Secondary 

ss397 

Primary 

Incidental 

ss398 

Primary 

Incidental 

ss399 

Primary 

Incidental 

ss400 

Primary 

Incidental 

ss401 

Primary 

Incidental 

ss402 

Primary 

Incidental 

ss403 

Primary 

Incidental 

ss404 

Primary 

Incidental 

ss405 

Primary 

Incidental 

ss406 

Primary 

Incidental 


expression.parenthesis 
float.operations 
expression.parenthesis 
float.operations 
expression.parenthesis 
integer.operations 
expression.parenthesis 
int eger.operations 
expression.parenthesis 
integer.operations 
expression.parenthesis 
integer.operations 
application.lag_fliter 
float.operations 
application.integration 
float.operations 
statement.if.condition 
application.symmetric.deadzone 
float.operations 
statement.if.condition 
application.symmetric.limiter 
float.operations 
statement.if.condition 
application.lag_fliter 
float.operations 
application.integration 
float.operations 
statement.if.condition 
application.symmetric.deadzone 
float.operations 
statement.if.condition 
application. S3rmmetric_limiter 
float.operations 
Statement.if.condition 
optimization.loop.flattening 
array.operations 

optimization.common.sub_expr_elim 
array.operations 
float.operations 
loop.exit 





ss407 

Primary : 

optimization.machine.iuiom 


Incidental : 

float.operations 

record.component.assignment 

ss408 

Primary 

optimization.machine_idiom 

ss409 

Primary 

optimization.loop_induction 


Secondary 

loop.for 


Incidental 

array.operations 
statement.if.condition 

ss410 

Primary 

optimization.inline 


Incidental 

array.operations 

ss411 

Primary 

subprogram.inline 


Comparison 

ss410 


Incidental 

array.operations 

ss412 

Primary 

optimization.register_allocation 

ss413 

Primary 

optimiz ation.order_of _ evaluation 


Incidental 

float.operations 
math.function.sgn 

ss414 

Primary 

optimization.order.of.evaluation 


Incidental 

float.operations 
math.function.sgn 

ss415 

Primary 

: optimization.order.of _evaluation 


Incidental 

: float.operations 

ss416 

Primary 

: optimization.order.of.evaluation 


Incidental 

: float.operations 

ss4l7 

Primary 

: optimization.order.of.evaluation 


Incidental 

: float.operations 

statement.if.condition 

ss418 

Primary 

: optimization.order.of.evaluation 


Incidental 

: float.operations 

statement.if.condition 

ss419 

Primary 

: array.dynamic 
parameters 


Incidental 

: array.operations 

ss420 

Comparison 

: ss419 


Incidental 

: array.operations 

SS421 

Primary 

: optimization.folding 


Secondary 

; statement.if.condition 

ss422 

Primary 

; loop.for 


Comparison 

; SS213 


242 




ss423 

Primary 

Secondary 

Incidental 

optimization.strength.reduction 
loop.for 

integer.operations 

S8424 

Primary 

Comparison 

Incidental 

loop.for 

SS423 

integer.operations 

ss425 

Primary 

Secondary 

Incidental 

optimization.strength.reduction 
loop.for 

integer.operations 

ss426 

Primary 

Secondary 

Incidental 

loop.while 

optimization.strength.reduction 
integer.operations 

ss427 

Primary 

Incidental 

optimization.dead 
integer.operations 
loop.exit 

ss428 

Primary 

Incidental 

optimization.common_8ub_expr_elim 
array.operations 
integer.operations 
loop.for 

SS429 

Primary 

Secondary 

Incidental 

optimization.loop.invariant 
array.operations 
integer.operations 

ss430 

Primary 

Secondary 

Incidental 

optimization.loop.invariant 
array.operations 
integer.operations 

ss431 

Primary 

Incidental 

10.Text.10.integer.string 
expression.abs 
float.operations 
integer.operations 
loop.for 

statement.if.condition 

SS432 

Primary 

Incidental 

optimization.algebraic.simplification 
array.operations 
float.operations 

ss433 

Comparison 

Incidental 

SS432 

array.operations 
float.operations 

ss434 

Primary 

Incidental 

optimization.algebraic.simplification 
array.operations 
float.operations 


243 





ss435 

Primary 

Incidental 

ss436 

Primary 

Incidental 

ss437 

Primary 

Incidental 

ss438 

Primary 

Secondary 

Incidental 

ss439 

Primary 

Secondary 

Incidental 

ss440 

Primary 

Secondary 

Incidental 

ss441 

Primary 

Comparison 

Incidental 

ss442 

Primary 

Incidental 

ss443 

Primary 

Incidental 

ss444 

Primary 

Incidental 

ss445 

Primary 

Incidental 

ss446 

Primary 

Incidental 


optimization.algebraic.simplification 
array.operations 
float.operations 

optimization.algebraic.simplification 
array.operations 
float.operations 

optimization.algebraic.simplification 

array.operations 

float.operations 

optimization.test.swapping 

statement.if.condition 

array.operations 

loop.for 

optimization.test.swapping 
statement.if.condition 
array.operations 
loop.for 

optimization.merge.tests 
statement.if.condition 
integer.operations 
loop.for 

statement.if.condition 
ss440 

integer.operations 
loop.for 

optimization.register.allocation 
array.operations 
float.operations 
loop.for 

optimization.register.allocation 
array.operations 
float.operations 
loop.for 

pragma.numeric.error 
float.operations 
pragma.numeric _error 
integer.operations 
pragma.numeric.error 
integer.MOD 
integer.operations 


244 



ss447 


ss448 

ss449 

ss450 

ss451 

ss452 

ss453 

ss454 

ss455 

8s456 

SS457 

8s458 

88459 

ss460 

ss461 

8s462 

8s463 

ss464 

88465 

ss466 

88467 

8s468 

8s469 

88470 

88471 


Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Primary 

Primary 

Incidental 

Primary 

Primary 

Primary 

Primary 

Primary 

Primary 

Primary 

Primary 

Primary 

Primary 

Incidental 

Primary 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 

Primary 

Incidental 


pragma.numeric_error 
integer.operationa 
integer.REM 
pragma.numeric_error 
float.operations 
pragma.numeric.error 
integer.operations 
pragma.numeric.error 
float.operations 
pragma.numeric.error 
integer.operations 
timing.clock 
timing.calendar 
timing.calendar 
float.operations 
delay.problems 
timing.calendar 
timing.calendar 
delay.problems 
delay.problems 
fixed.operations 
fixed.operations 
fixed.operations 
fixed.operations 
fixed.operations 
boolean.expressions 
fixed.operations 
conversion.fixed 
integer.operations 
conversion.fixed 
float.operations 
conversion.integer 
integer.operations 
package.overhead 
integer.operations 
package.overhead 
integer.operations 
package.overhead 
integer.operations 




88472 

Primary : 

package.overhead 


Incidental : 

integer.operations 
loop.for 

8s473 

Primary 

package.overhead 


Incidental : 

integer.operations 
loop.for 

8s474 

Primary : 

package.overhead 


Incidental : 

integer.operations 

88475 

Primary : 

package.overhead 


Incidental : 

integer.operations 

88476 

Primary 

package.overhead 


Incidental r 

integer.operations 

88477 

Primary : 

package.overhead 


Incidental ; 

array.operations 
loop.for 

8s478 

Primary : 

generic.subprogram 

88479 

Primary : 

type.character.operations 


Incidental : 

loop.while 

statement.if.condition 

ss480 

Primary : 

type.character.operations 


Incidental : 

loop.while 

statement.if.condition 

88481 

Primary ; 

type.character.operations 


Incidental : 

loop.while 

statement.if.condition 

88482 

Primary : 

type.character.operations 


Incidental : 

loop.while 
statement.case 

ss483 

Primary 

subprogram.local 


Secondary 

type.named.number 

ss484 

Primary 

subprogram.local 


Secondary 

type.named.number 

88485 

Primary 

subprogram.local 


Incidental 

float.operations 

88486 

Primary 

boolean.expressions 


Incidental 

boolean.arrays.unpacked 


subprogram.local 

type.character.operations 





88487 

Primary 

boolean.expressions 


Incidental 

subprogram.local 



type.character.operations 

8s488 

Primary 

boolean.expressions 


Incidental 

statement.case 



type.character.operations 

SS489 

Primary 

boolean.expressions 


Incidental 

type.character.operations 

88490 

Primary 

istatement. if. coding.style 


Incidental 

integer.operations 



loop.for 

ss491 

Primary 

statement.if.coding.style 


Incidental 

Integer.operations 



loop.for 

ss492 

Primary 

boolean.expressions 


Incidental 

subprogram.local 



type.character.operations 

88493 

Primary 

type.character.operations 

88494 

Primary 

statement.if.coding.rtyle 

88495 

Comparison 

88494 

88496 

Primary 

statement.if.coding.style 

88497 

Primary 

statement.if.coding.style 

8b498 

Primary 

statement.if.coding.style 

88499 

Primary 

boolean.expressions 


Comparison 

S8498 

88500 

Primary 

conversion.unchecked.conversion 


Secondary 

booleeui.expressions 


Incidental 

boolean.arrays.packed 



integer.operations 

88501 

Primary 

conversion.unchecked.conversion 


Secondary 

boolean.expressions 


Incidental 

boolean.arrays.packed 



integer.operations 

ss502 

Primary 

conversion.unchecked.conversion 


Secondary 

boolean.expressions 


Incidental 

boolean.arrays.packed 



integer.operations 

8s503 

Primary 

optimization.machine.idiom 


Secondary 

integer.operations 


247 






88504 

Primary 

Secondary 

8s505 

Primary 

Secondary 

88506 

Primary 

Incidental 

8s507 

Primary 

Secondary 

Incidental 

ss508 

Primary 

Secondary 

Incidental 

ss509 

Primary 

Secondary 

Incidental 

ss510 

Primary 

Secondary 

ss511 

Primary 

Secondary 

Incidental 

ss512 

Primary 

Secondary 

Incidental 

8s513 

Primary 

Incidental 

ss514 

Primary 

Incidental 

ss515 

Primary 

Incidental 

ss516 

Primary 

Incidental 


optimization.data.flow 
statement.if.condition 
optimization.data.flow 
statement.if.condition 
conversion.unchecked.conversion 
boolean.arrays.packed 
integer.operations 
optimization.register.allocation 
statement.if.condition 
integer.operations 
optimization.common.sub.expr.elim 
statement.if.condition 
array.operations 

optimization.common.sub.expr.elim 
statement.if.condition 
array.operations 

optimization.register.allocation 

statement.if.condition 

optimization.register.allocation 

array.operations 

float.operations 

integer.operations 

loop.for 

statement.if.condition 

optimization.register.allocation 

array.operations 

float.operations 

integer.operations 

loop.for 

statement.if.condition 
record.operations 
float.operations 
record.operations 
float.operations 
record.operations 
float.operations 
loop.for 
array.operations 
subprogram.external 







SS517 

Primary 

Incidental 

ss518 

Primary 

Secondary 

Incidental 

ss519 

Primary 

Secondary 

Incidental 

ss520 

Primary 

Secondary 

Incidental 

ss521 

Primary 

SS522 

Primary 

ss523 

Primary 

SS524 

Primary 

ss525 

Primary 

Secondary 

ss526 

Primary 

Incidental 

sa527 

Primary 

Incidental 

ss528 

Primary 

Incidental 

ss529 

Primary 

Incidental 

ss530 

Primary 

Incidental 

ss531 

Primary 

Incidental 

ss532 

Primary 

Incidental 

ss533 

Primary 

Incidental 

ss534 

Primary 

Incidental 


: loop.for 
: array.operations 
subprogram.external 
: loop.for 
: array.operations 
: subprogr am.ext ernal 
: loop.for 
: array.operations 
: subprogram.external 
: loop.for 
: eurray.operations 
: subprogram.external 
; subprogram.local 
: subprogram.local 
; subprogram.local 
: boolean.arrays.packed 
: boolean.arrays.packed 
: loop.for 

: booleam.arrays.packed 
: statement.if.condition 
: exception.handling 
: statement.if.condition 
: exception.handling 
: statement.if.condition 
: optimization.constant.propagation 
: float.operations 
type.named.number 

; optimization.common_sub_expr_elim 
: float.operations 
type.named.number 
: optimization.register.allocation 
: float.operations 
type.named.number 
: optimization.folding 
: float.operations 
; optimization.common_sub_expr_elim 
; float.operations 
: optimization.register.allocation 
: float.operations 
type.named.number 






8s535 

Prim€u:y : loop.for 

Incidental : array.operationa 
float.operations 

ss536 

Primary : optimization.loop.invariant 

Secondary ; loop.for 

Incidental : array.operations 
float.operations 

88537 

Primary : optimization.folding 

Incidental : IO.Text_IO 

statement.if.condition 

ss538 

Primary : optimization.folding 

Incidental : lO.Text.IO 

statement.if.condition 

ss539 

Primary : optimization.folding 

Incidental : I0.Text_I0 

statement.if.condition 

ss540 

Primary : optimization.folding 

Incidental : lO.Text.IO 

statement.if.condition 

88541 

Primary : optimization.loop.unrolling 

Secondary : loop.for 

Incidental : array.operations 

88542 

Primary : optimization.loop.unrolling 

Secondary : loop.for 

Incidental : array.operations 

ss542x 

Primary : loop.for 

Comparison : ss542 

Incidental : array.operations 

ss543 

Primary : optimization.unreachable.code 

Secondary ; exception.handling 

Incidental : statement.null 

88544 

Primary : statement.block 

Secondary : statement.null 

ss545 

Primary : optimization.order.of.evaluation 

Incidental : array.operations 

88546 

Primary : optimization.order.of.evaluation 

Incidental ; subprogram.external 

8s547 

Primary : optimization.order.of.evaluation 

Incidental : float.operations 


subprogram.external 



ss548 

Primary 

Incidental 

ss549 

Primary 

Incidental 

88550 

Primary 

Secondary 

8s551 

Primary 

Secondary 

8s552 

Primary 

Secondary 

ss553 

Primary 

Secondary 

88554 

Primary 

Secondary 

ss555 

Primary 

88556 

Primary 

Secondary 

88557 

Primary 

Incidental 

88558 

Primary 

Secondary 

Incidental 

8s559 

Primary 

Comparison 

Incidental 

8s560 

Primary 

Secondary 

ss56i 

Primary 

Comparison 

Secondary 

ssSGlx 

Primary 

ss562 

Primary 

Incidental 

ss563 

Primary 

Secondary 

Incidental 


: optimization.order.of.evaluation 
: float.operations 
subprogram.external 
: optimization.order_of.evaluation 
: float.operations 
subprogram.external 
: optimization.order_of_evaluation 
: integer.operations 
: optimization.order.of.evaluation 
: integer.operations 
: optimization.order.of.evaluation 
: float.operations 
: optimization.common.sub.expr.elim 
: array.operations 
: optimization.common.sub.expr.elim 
: array.operations 
: optimization.machine.idiom 
: optimization.folding 
: integer.operations 
: optimization.register.allocation 
: array.operations 
: optimization.folding 
: statement.if.condition 
: integer.operations 
: statement.if.condition 
: ss558 

: integer.operations 

: optimization.algebraic.simplification 
: integer.operations 
: integer.operations 
: sb560 

: statement.if.condition 
: optimization.folding 
: parameters.modes 
: array.operations 
math.function.sgn 
: optimization.folding 
; subprogram.inline 
: integer.operations 


251 



ss564 

Primary 

optimization.folding 


Secondary 

8ubprogram.inline 


Incidental 

integer.operations 

ss565 

Primary 

optimization.folding 


Secondary 

subprogram.inline 


Incidental 

integer.operations 

ss566 

Primary 

parameters.passing 


Secondary 

integer.operations 

88567 

Primary 

parameters.passing 


Secondary 

integer.operations 

ss568 

Primary 

parameters.passing 


Secondary 

integer.operations 

8s569 

Primary 

parameters.passing 


Secondary 

integer.operations 

88570 

Primary 

parameters.passing 


Secondary 

integer.operations 

ss571 

Primary 

parameters.passing 


Secondary 

integer.operations 

SS572 

Primary 

parameters.passing 


Secondary 

integer.operations 

88573 

Primary 

parameters.passing 


Secondary 

integer.operations 

88574 

Primary 

parameters.passing 


Secondary 

integer.operations 

88575 

Primary 

parameters.passing 


Secondary 

float.operations 

ss576 

Primary 

parameters.passing 


Secondary 

float.operations 

88577 

Primary 

parameters.passing 


Secondary 

float.operations 

8s578 

Primary 

parameters.passing 


Secondary 

float.operations 

88579 

Primary 

parameters.passing 


Secondary 

float.operations 

88580 

Primary 

parameters.passing 


Secondary 

float.operations 

88581 

Primary 

parameters.passing 


Secondary 

float.operations 

ss582 

Primary 

parameters.passing 


Secondary 

float.operations 


252 





8s583 

Primary 

: parameters.passing 


Secondary 

; float.operations 

88584 

Primary 

: parameters 


Secondary 

: integer.operations 

ss585 

Primary 

: parameters 


Secondary 

; float.operations 

ss586 

Primary 

: math.function.zurcsin 


Incidental 

: float.operations 

88587 

Primary 

: optimization.folding 


Secondary 

: type.named_number 

88588 

Primary 

: optimization.folding 


Secondary 

: float.operations 

8s589 

Primary 

; optimization.folding 


Secondary 

: float.operations 

88590 

Primary 

: optimization.folding 


Secondary 

: float.operations 

88591 

Primary 

: float.operations 


Comparison 

: ss587 


ss588 

ss589 

ss590 


ss592 Comparison : ss587 

ss588 

88589 
ss590 
ss591 

sg 593 Comparison ; ss587 

SS&88 

ss589 

88590 
ss591 

gg 594 Comparison : 8s587 

8s588 

ss589 

ss590 

88591 

gg 595 Primary : optimization.folding 

Secondary : float.operations 



ss596 

Primary 

Secondary 

Incidental 

ss597 

Comparison 

Incidental 

ss598 

Primary 

Incidental 

ss599 

Comparison 

Incidental 

ssSOO 

Primary 

Incidental 

ss601 

Comparison 

Incidental 

ss602 

Primary 

Incidental 

ss603 

Primary 

Incidental 

8s604 

Primary 

Incidental 

ss605 

Primary 

Incidental 

ss606 

Primary 

Secondary 

ss607 

Primary 

Secondary 

ss608 

Primary 

Secondary 

ss609 

Primary 

Secondary 

ss610 

Primary 

Secondary 


: array.constraints 
: subprogram.local 
: array.operations 
subprogram.external 
; ss596 

: array.operations 
: record.discriminants 
; booleam.expressions 
exception.handling 
subprogram.local 
: ss598 

: boolean.expressions 
exception.handling 
subprogram.local 
: record.discriminants 
: subprogram.local 
: ss600 

: subprogram.local 
; record.discriminants 
: boolean.expressions 
exception.handling 
: record.discriminants 
: subprogram.local 
; record.discriminants 
: boolean.expressions 
exception.handling 
subprogram.local 
: record.discriminants 
: subprogram.local 
: optimization.register.allocation 
: float.operations 
: optimization.register.allocation 
; float.operations 
: optimization.register_allocation 
: integer.operations 
: optimization.register.allocation 
: float.operations 
: optimization.register.allocation 
: integer.operations 





ss611 

Primary 

Secondary 

ss612 

Primary 

Secondary 

Incidental 

ss613 

Primary 

Secondary 

ss614 

Primary 

Secondary 

ss615 

Primary 

Secondary 

ss616 

Primary 

Secondary 

ss617 

Primary 

Secondary 

ss618 

Primary 

Secondary 

ss619 

Primary 

Secondary 

ss620 

Primary 

Secondary 

8s621 

Primary 

Incidental 

ss622 

Primary 

Incidental 

ss€23 

Primary 

Incidental 

ss624 

Primary 

Incidental 

ss625 

Primary 

Incidental 

ss626 

Primary 

Incidental 

ss627 

Primary 

Incidental 

ss628 

Primary 

Incidental 

ss629 

Primary 

Incidental 


optimization.machine_idiom 
integer.operations 
optimization.register.allocation 
loop.exit 

integer.operations 

pragma.suppress.discriminant.check 

parameters.passing 

pragma. suppress. discrimineint.check 

parameters.passing 

pragma.suppress.discriminant.check 

parameters.passing 

pragma.suppress.discriminant.check 

parameters.passing 

pragma.suppress.discriminant.check 

parameters.passing 

pragma.suppress.discriminant.check 

parameters.passing 

optimization.jump.tracing 

statement.goto 

optimization.jump.tracing 

statement.goto 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

generic.subprogram 

float.operations 




ss630 

Primary 

Incidental 

ss631 

Primary 

Incidental 

ss632 

Primary 

Incidental 

ss633 

Primary 

Incidental 

ss634 

Primary 

Incidental 

ss635 

Primary 

Incidental 

ss636 

Primary 

Incidental 

ss637 

Primary 

Incidental 

ss638 

Primary 

Incidental 

ss639 

Primary 

Incidental 

ss640 

Primary 

Incidental 

S8641 

Primary 

Secondary 

ss642 

Primary 

Secondary 

ss643 

Primary 

Secondary 

ss643x 

Primary 

Secondary 

ss644 

Primary 

Secondary 

ss645 

Primary 

Incidental 

ss646 

Primary 

Incidental 


generic.subprogram 

float.operations 

generic.subprogram 

float.operations 

subprogram.external 

float.operations 

subprogram.inline 

float.operations 

statement.overhead 

integer.operations 

statement.overhead 

integer.operations 

statement.overhead 

integer.operations 

statement.overhead 

integer.operations 

optimization.dead 

exception.handling 

integer.operations 

subprogram.external 

optimization.dead 

integer.operations 

subprogram.external 

optimization.dead 

integer.operations 

subprogram.external 

optimization.dead 

subprogram.ext ernal 

optimization.dead 

subprogram.external 

optimization.common_sub_expr_elim 

float.operations 

float.operations 

expression.exponentiating 

optimization.common_sub_expr_elim 

statement.if.condition 

array.operations 

float.operations 

array.operations 

float.operations 





ss647 

Primary 

array.operations 


Incidental 

float.operations 

ss648 

Primary 

access.operations 


Incidental 

array.operations 

ss649 

Primary 

optimization.dead 


Secondary 

statement.if.condition 


Incidental 

float.operations 

SS650 

Primary 

optimization.dead 


Secondary 

statement.if.condition 


Incidental 

float.operations 

ss651 

Primary 

optimization.dead 


Secondary 

loop.for 


Incidental 

integer.operations 

ss652 

Primary 

represent ation.pack.unpack 


Incidental 

array.operations 
integer.operations 

ss653 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

ss654 

Primary 

representation.pack.unpack 


Incidental 

array.operations 
loop.for 

ss655 

Primary 

representation.pack.unpack 


Incidental 

array.operations 
loop.for 

ss656 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

ss657 

Primary 

repres entation.pack.unpack 


Incidental 

array.operations 

ss658 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

S8659 

Primary 

representation.pack.unpack 


Incidental 

array.operations 
loop.for 

ss660 

Primary 

representation.pack.unpack 


Incidental 

array.operations 
loop.for 

ss661 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

ss662 

Primary 

representation.pack.unpack 


Incidental 

array.operations 


257 






ss663 

Primary : 

repres ent ation.pack.unpack 


Incidental : 

array.operations 

ss664 

Primary : 

representation.pack.unpack 


Incidental : 

array.operations 
loop.for 

ss665 

Primary ; 

representation.pack.unpack 


Incidental : 

array.operations 
loop.for 

38666 

Primary 

representation.pack.unpack 


Incidental : 

array.operations 

ss667 

Primary : 

representation.pack.unpack 


Incidental : 

array.operations 

ss668 

Primary 

representation.pack.unpack 


Incidental : 

array.operations 

ss€69 

Primary 

representation.pack.unpack 


Incidental : 

array.operations 
loop.for 

ss670 

Primary 

representation.pack.unpack 


Incidental : 

array.operations 
loop.for 

88671 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

ss672 

Primary 

repres ent ation.pack.unpack 


Incidental 

array.operations 

8s673 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

88674 

Primary 

representation.pack.unpack 


Incidental 

array.operations 
loop.for 

88675 

Primary 

representation.pack.unpack 


Inci^’ental 

array.operations 
loop.for 

ss676 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

88677 

Primary 

representation.pack.unpack 


Incidental 

array.operations 

88678 

Primary 

representation.pack.unpack 


Incidental 

array■operations 





ss679 

ss680 

ss681 

ss682 

88683 

88684 
ss685 
88686 
s8686x 

88686y 

88687 

8s688 

88689 

88690 

8s691 

88692 

88693 

88694 


Primary : representation.pack.unpack 
Incidental : array.operations 
loop.for 

Primary : representation.pack.unpack 

Incidental : array.operations 

loop.for 

Primary : representation.pack.unpack 

Incidental : array.operations 
Primary : boolean.record 
Primary : boolean.record 
Primary ; booleaji.record 
Primary : boolean.record 
Primary : withdrawn.tests 
Primary : boolean.expressions 
Secondary : statement.if.condition 
Incidental : loop.for 
Primary : boolean.expressions 
Secondary : statement.if.condition 
Incidental ; loop.for 

Primary : representation.pack.unpack 

Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
loop.for 

Primary : representation.pack.unpack 
Incidental : array.operations 
loop.for 

Primary : representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
Primary ; representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
loop.for 


259 






88695 

Primary 

Incidental 

repreaentation.pack.unpack 
array.operations 
loop.for 

ss696 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88697 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

ss698 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88699 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 

88700 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 

88701 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88702 

Primary 

Incidental 

repres ent ation.pack.unpack 
array.operations 

88703 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88704 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 

88705 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 

ss706 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88707 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

88708 

Primary 

Incidental 

representation.pack.unpack 
array.operations 

ss709 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 

88710 

Primary 

Incidental 

representation.pack.unpack 
array.operations 
loop.for 





ss711 

8s712 

SS713 

ss714 


ss715 


SS716 

8s717 

8s718 

88719 

88720 
ss721 

88722 

88723 

88724 
88724_mod 

ss725 

88725_mod 

88726 
88726_mod 

88727 
88727_mod 

88728 
88728_mod 
8s729 
88729_mod 
8s730 
88730_mod 


Primary : representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
Primary : representation.pack.unpack 
Incidental : array.operations 
loop.for 

Primary ; representation.pack.unpack 
Incidental : array.operations 
loop.for 

Primary : representation.pack.unpack 

Incidental : array.operations 

Primary : boolean.record 

Primary ; boolean.record 

Primary : boolean.record 

Primary : boolean.record 

Primary : conversion.fixed 

Primary : conversion.fixed 

Primary : conversion.fixed 

Primary : withdrawn.tests 

Primary ; representation.pack.unpack 

Secondary : record.component.assignment 

Primary : withdrawn.tests 

Primary ; representation.pack.unpack 

Secondary : record.component.assignment 

Primary : withdrawn.tests 

Primary : type.named.number 

Primary : withdrawn.tests 

Primary : type.named_number 

Primary ; withdrawn.tests 

Primary ; type.named.number 

Primary : withdrawn.tests 

Primary : integer.operations 

Primary : withdrawn.tests 

Primary : representation.attributes 

Incidental : subprogram.external 


261 











88731 

Primary 

withdrawn.tests 



ss731_mod 

Primary 

representation.attributes 




Incidental 

array.operations 



8s732 

Primary 

withdrawn.tests 



8s732_mod 

Primary 

representation.attributes 




Incidental 

array.operations 



8s734 

Primary 

withdrawn.tests 



S8734_mod 

Primary 

representation.attributes 




Incidental 

array.operations 



8s735 

Primary 

withdrawn.tests 



8B735_mod 

Primary 

representation.attributes 




Incidental 

array.operations 



88736 

Primary 

withdrawn.tests 



88736_mod 

Primary 

representation.attributes 




Secondary 

record.component.assignment 



8s737 

Primary 

withdrawn.tests 



88737_mod 

Primary 

representation.attributes 




Secondary 

record.component.assignment 



ss738 

Primary 

withdrawn.tests 



88738_mod 

Primary 

representation.attributes 




Secondary 

record.component.assignment 



88739 

Primary 

withdrawn.tests 



88739_mod 

Primary 

representation.attributes 




Secondary 

access.operations 



88740 

Primary 

withdrawn.tests 



8s740_mod 

Primary 

representation.attributes 




Secondary 

task.language.feature.tests 



88741 

Primary 

storage.reclamation 




Incidental 

exception.handling 





loop.for 



88744 

Primary 

integer.operations 




Comparison 

ss746 



88745 

Primary 

integer.operations 




Comparison 

ss746 



ss746 

Primary 

access.operations 



88747 

Primary 

interface.language.assembly 



8s748 

Primary 

access.operations 




Secondary 

subprogram.local 






262 






88749 

Primary 

Secondary 

Incidental 

ss750 

Primary 

Secondary 

Incidental 

ss751 

Primary 

Secondary 

8s752 

Primary 

Secondary 

Incidental 

ss753 

Primary 

Secondary 

Incidental 

8s754 

Primary 

Secondary 

Incidental 

ss755 

Primary 

Secondary 

Incidental 

ss756 

Primary 

Incidental 

88757 

Primary 

Comparison 


Secondary 

Incidental 

ss758 

Primary 

Secondary 

Incidental 

88759 

Primary 

Secondary 

Incidental 

88760 

Primary 

Secondary 

Incidental 


optimization.loop.invariant 
loop.for 

array.operations 
optimization.loop.interchange 
loop.for 

array.operations 
optimization.unreachable.code 
statement.if.condition 
optimization.loop.invariant 
loop.for 

integer.operations 

optimization.data.flow 

integer.operations 

float.operations 

optimization.data.flow 

integer.operations 

float.operations 

statement.if.condition 

optimization.data.flow 

exception.raise 

integer.operations 

optimization.data.flow 

integer.operations 

pragma.suppress.remge.check 

8s753 

38754 

ss755 

ss756 

exception.raise 

integer.operations 

array.operations 

pragma.suppress.range.check 

float.operations 

array.operations 

pragma.suppress.range.check 

float.operations 

array.operations 

pragma.suppress.range.check 

float.operations 







S8761 

Primary 

Secondary 

Incidental 

ss762 

Primary 

Secondary 

Incidental 

8s763 

Primary 

Secondary 

Incidental 

S8764 

Primary 

Secondary 

ss765 

Primary 

Secondary 

ss766 

Primary 

Secondary 

88767 

Primary 

Secondary 

S8768 

Primary 

Secondary 

8s769 

Primary 

Comparison 

8s770 

Primary 

Comparison 

88771 

Primary 

Comparison 

ss772 

Primary 

Comparison 

ss773 

Primary 

Comparison 

88774 

Primary 

Incidental 

ss775 

Primary 

Incidental 

ss776 

Primary 

Secondary 

Incidental 

88777 

Primary 

Incidental 

ss778 

Primary 

Incidental 


array.operations 

pragma.suppress.range.check 

float.operations 

array.operations 

pragma.suppress.range.check 

float.operations 

array.operations 

pragma.suppress.range.check 

float.operations 

boolean.arrays.packed 

array.aggregates 

boolean.arrays.packed 

array.aggregates 

boolean.arrays.packed 

array.aggregates 

boolean.arrays.packed 

array.aggregates 

boolean.arrays.packed 

array.aggregates 

consistency.check.timing.loop 

ss768 

consistency.check.timing.loop 
ss768 

consistency.check.timing.loop 
ss768 

consistency.check.timing.loop 
ss768 

consistency.check.timing.loop 
ss768 

array.operations 
integer.operations 
array.aggregates 
integer.operations 
array.operations 
loop.for 

integer.operations 
array.operations 
integer.operations 
array.aggregates 
integer.operations 


264 








-^ 

8s779 

Primary 

package.overhead 



Secondary 

float.operations 


ss780 

Primary 

package.overhead 



Secondary 

float.operations 


88781 

Primary 

package.overhead 



Secondary 

float.operations 


88782 

Primary 

package.overhead 



Secondary 

float.operations 


88783 

Primary 

package.overhead 



Secondary 

float.operations 


88784 

Primary 

package.overhead 



Secondary 

float.operations 


88785 

Primary 

package.overhead 



Secondary 

float.operations 


88786 

Primary 

package.overhead 



Secondary 

float.operations 


88787 

Primary 

package.overhead 



Secondary 

float.operations 


8s788 

Primary 

package.overhead 



Secondary 

float.operations 


8s789 

Primary 

record.overhead 



Secondary 

float.operations 


88790 

Primary 

record.overhead 



Secondary 

float.operations 


88791 

Primary 

record.overhead 



Secondary 

float.operations 


88792 

Primary 

record.overhead 



Secondary 

float.operations 


88793 

Primary 

record.overhead 



Secondary 

float.operations 


88794 

Primary 

record.overhead 



Secondary 

float.operations 


88795 

Primary 

record.overhead 



Secondary 

float.operations 


88796 

Primary 

record.overhead 



Secondary 

float.operations 


88797 

Primary 

record.overhead 



Secondary 

float.operations 


88798 

Primary 

record.overhead 



Secondary 

float.operations 

265 




ss799 

Primary 

ssSOO 

Primary 

Secondary 

ssSOl 

Primary 

Secondary 

ss802 

Primary 

Secondary 

ss803 

Primary 

ss804 

Primary 

ss805 

Primary 

Incidental 

ss806 

Primary 

Secondary 

ss807 

Primary 

Secondary 

ss808 

Primary 

Secondary 

ss809 

Primary 

Secondary 

8s810 

Primary 

Secondary 

SS811 

Primary 

Secondary 

ssearch 

Primary 

ssearch2 

Primary 

strength 

Primary 

tak 

Primary 

target 

Primary 

taskl 

Primary 

task2 

Primary 

tasks 

Primary 

ta8k4 

Primary 

tasks 

Primary 

tasks 

Primary 

task7 

Primary 

task8 

Primary 

task9 

Primary 


: timing.calendar 
; timing.calendar 
: statement.if.condition 
: timing.calendar 
: statement.if.condition 
: timing.calendar 
: statement.if.condition 
; timing.calendar 
: statement.null 
; access.operations 
: boolean.expressions 
: optimization.folding 
: generic.package 
math.dep.intexp 
: optimization.folding 
: generic.package 
math.dep.adx 
: optimization.folding 
: generic.package 
math.dep.setexp 
: math.dep.intexp 
: generic.package 
: math.dep.adx 
: generic.package 
: math.dep.setexp 
: generic.package 
: classical.search 
: classical.search 
: optimization.strength.reduction 
: subprogram.local 

: classical.numerical.comp.fam.arch(CFA) 
: task.language.feature.tests 
: task.language.feature.tests 
: task.language.feature.tests 
: task.language.feature.tests 
; task.language.feature.tests 
: task.language.feature.tests 
: classical.dining.philosophers 
: classical.dining.philosophers 
: classical.dining.philosophers 


266 







tasklO 

Primary 

taskll 

Primary 

ta8kl2 

Primary 

taskl3 

Primary 

taskl4 

Primary 

tasklS 

Primary 

taskie 

Primary 

taskl7 

Primary 

tasklS 

Primary 

tasklS 

Primary 

ta8k20 

Primary 

task21 

Primary 

task22 

Primary 

task23 

Primary 

task24 

Primary 

task25 

Primary 

task26 

Primary 

task27 

Primary 

ta8k28 

Primary 

task29 

Primary 

task30 

Primary 

task31 

Primary 

task32 

Primary 

ta8k33 

Primary 

task34 

Primary 

task34_delta 

Primary 

task35 

Primary 

task35.delta 

Primary 

task36 

Primary 

task37a 

Primary 

task37b 

Primary 

task38 

Primary 

task39 

Primary 

task40 

Primary 

ta8k41 

Primary 

ta8k42 

Primary 

ta8k43 

Primary 

ta8k44a 

Primary 

task44b 

Primary 


classical.dining.philosophars 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task. Iwguage.f eature.tests 
task.language.feature.tests 
task.language_feature.tests 
task.language_feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
classical.dining.philosophars 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.lemguage.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 
task.language.feature.tests 





task45a 

Primary 

task45b 

Primary 

task46 

Primary 

task46x 

Primary 

task47 

Primary 

task48 

Primary 

task49 

Primary 

taskSO 

Primary 

tasks1 

Primary 

task52 

Primary 

task53 

Primary 

task54 

Primary 

task54_mod 

Primary 

taskSS 

Primary 

taskSS.mod 

Primary 

taskSe 

Primary 

tasks? 

Primary 

taskSS 

Primary 

task59 

Primary 

taskSO 

Primary 

task.num.l 

Primary 

task.num.5 

Primary 

task.num.lO 

Primary 

task.num.lS 

Primary 

task_nuin_20 

Primary 

task.num_25 

Primary 

task.num_30 

Primary 

task2_num.l 

Primary 

task2_num_5 

Primary 

task2_num.l0 

Primary 

task2_nuin_15 

Primary 

ta8k2_num.20 

Primary 

task2_num.25 

Primary 

ta8k2.num.30 

Primary 

triel 

Primary 

Secondary 

trie2 

Primary 

Secondary 

unreach 

Primary 


task.language.feature.tests 

task.language.feature.tests 

task.language.!eature.tests 

task.language.!eature.tests 

task.Ianguage.!eature_te8ts 

task.language_!eature_tests 

task.language_!eature_tests 

task.Iamguage_!eature_test8 

task.Ianguage_!eature_test8 

task.Ianguage.!eature_te8ts 

task.Ianguage_!eature_te8t8 

withdrawn.tests 

task.storage.size 

withdrawn.tests 

task.storage.size 

task.storage.size 

task. lcinguage_!eature.tests 

task.language.leature.tests 

task.Ianguage_!eature_test8 

task.l 2 mguage_!eature.tests 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

task.rendezvous 

application.trie 

access.operations 

application.trie 

access.operations 

optimization.unreachable.code 




whetl 


whet 2 


whets 


whet4 


Primary 

Incidental 


Primary 

Incidental 


Primary 

Incidental 


Primary 

Incidental 


classical.whetstone 
math.function.arct an 
math.function.cos 
math.function.exp 
math.function.log 
math.function.sin 
math.function.sqrt 
classical.whetstone 
math. function. aurctan 
math.function.cos 
math.function.exp 
math.function.log 
math.function.sin 
math.function.sqrt 
classical.whetstone 
math. function. aurctan 
math.function.cos 
math.function.exp 
math.function.log 
math.function.sin 
math.function.sqrt 
classical.whetstone 
math. function. aurctan 
math.function.cos 
math.function.exp 
math.function.log 
math.function.sin 
math.function.sqrt 



5.7 Appendix VII, SYSTEM DEPENDENT TEST PROBLEMS 

This appendix contains a list of test problems which exercise system dependent features. The test prob¬ 
lems are listed in alphabetical order under the system dependent feature (which is also alphabetically 
listed). This appendix also contains a list of test program files that WITH the MATH package. 


270 






System Dependency 

Test Problem Name(s) 

32 bit integers 

kalman 

kernel 13 

kernel 14 


kernellb 

kernell6-goto 



loop4a 

loop4b 

loop4c 


ss258 .. ss285 

ss301 .. ss315 

target 

Double precision 

gamm2 

kalman 

loop3 

reals 

loopl5 

ss286 .. ss303 

whet3 

File I/O 

iol .. io23 



Interface to assembly 

ss747 



language 




Interrupts 

int 0 .. int 9 j 

Length Clause 

ew 

rec coll c* 

rec coll u* 


rec-glob-c* 

rec-glob-u* 



ssl62 .. ssl67 

ss242 .. ss250 

ss687 .. ss741 


task54 

task55 

task56 

MATH package 

forward.eulerl 

forward-euler2 

io-80-20-1..10 


kalman 

kernell .. 16 

kernell6 goto 


kernell7 .. 24 

loop7 .. loop8 

neural 


runge 

ssl4 .. ssl6 

ss27 .. ss28 


ss31 .. ss34 

ss50 .. ss51 

ss267 .. ss268 


ss279 

ss291 

ss294 .. ss299 


ss304 .. ss308 

ss406 

ss413 .. ss414 


ss562 

ss586 

ss590 .. ss596 


ss543x 

ss650 

sim.bmbat* 


sim.emrpm* 

sim.hmproto* 

sim.kmdump* 


sim qmpitch* 

sim rcwfrdet* 

sim rmkeying* | 


sim-umnav* 

target 

whetl 


whet2 

whet4 


Optimize = space 

dhrys3 

whet4 


Packing bit arrays 

de'7 

des7a 


Unchecked .Conversion 

des7 

des7a 

kernel 13 


kernell4 

ss259 

ss500 


ss506 



Unchecked-Deallocation 

rec-ColLc* 

rec.coll.u* 

rec-glob.c* 


rec glob u* 

ssl62 .. ssl65 

ss648 


ss741 



Preemptive Scheduling 

delayl .. delayl4 

task44a 

task44b 


task45a 

task45b 



* — Names have been abbreviated in order to get them to fit in the table. 





The follc/ving test programs WITH package MATH: 


CFA 

IO_80A 

I0.80B 

KALMAN 

KERNEL1 .. KERNEL24 
LOOP? 

L00P8 

NEURAL 

S0000T14 

S0015T29 

S0030T44 

S0045T59 

S0258T72 

S0273T85 

S0286T00 

S0301T15 

S0394T08 

S0409T2O 

♦S0424T38 

♦S0439T43 

S0558T74 

S0575T89 

S0590T97 

*S0616T30 

S0631T44 

S0645T51 

SA8TEST 

SIMULATE 

WHETl 

WHET2 

WHET4 


*These files do not contain test problems requiring a MATH package. 



5.8 Appendix VIII, OPTIMIZATION TECHNIQUES 

Tests for Optimizations 


Algebraic simplification : 29 test problems 


ss44 

ss47 

ss48 

ss49 

ss50 

ss51 

ss61 

ss62 

ss63 

ss64 

ss65 

ss66 

ss67 

ss73 

ss74 

ss218 

ss220 

ss221 

ss319 

ss320 

ss321 

ss322 

ss432 

ss433 

ss434 

ss435 

ss436 

ss437 

ss560 



Boolean variable elimination : 1 test problem 


ssl76 


Bounds check : 6 test problems 


ssl74 

ssl93 

ss255 


ssl92 

ssl94 

ss368 


273 



Tests for Optimizations 


Common subexpression elimination : 15 test problems 


common 

ss75 

ss76 

ssl70 

ssl72 

ss210 

ss406 

ss428 

ss508 

ss509 

ss530 

ss533 

ss554 

ss643 

ss644 



Short delays ; 8 test problems 


delayl 

delay2 

delay3 

delay4 

delays 

delay9 

delaylO 

delay 11 


Data flow : 7 test problems 


ss427 

ss504 

ss505 

ss753 

ss754 

ss755 

ss756 




Tests for Optimizations 


Dead code elimination : 9 test problems 


dead 

ss56 

ss68 

ss71 

ss225 

ss226 

ss649 

ss650 

ss651 



Fold : 57 test problems 


fold 

ss2 

ss2-modl 

ss2-mod2 

ss8 

ss8 mod 

ss41 

ss41-mod 

ss42 

ss42.mod 

ss54 


ss55 

ss60 

ss83 

ssl69 

ssl73 

$sl85 

ssl89 

ssl90 

ss216 

ss216-mod 

ss217 

ss219 

ss219-mod 

ss227 

ss219 

ss227 

ss230 

ss231 

ss232 

ss239 

ss285 

ss291 

ss303 

ss304 

ss305 

ss306 

ss314 

ss318 

ss325 

ss362 

ss366 

ss421 

ss532 

ss537 

ss538 

ss539 

ss540 

ss556 

ss558 

ss559 





Tests for Optimizations 


ss561x 

ss563 

ss564 

ss565 

ss587 

ss588 

ss589 

ss590 

ss591 

ss595 

ss806 

ss807 

ss808 

Task28 

Task29 



Haberniann/Nassi ; 5 test prob lems 


Taskll Taskl2 
Taskl3 Taskl4 
Task20 


Inline : 12 test problems 


loop4b 

loop6 

ssl24 

ssl41 

ssl42 

ss260 

ss410 

$s487 

whetl 

whet2 

Whet3 

Whet4 


Tests for Optimizations 


Jump table : 1 test problem 


ssl33 


Jump tracing ; 6 test problems 


ssl82 

ssl84 

ss619 


ssl83 

ss250 

ss620 


Loop flattening : 1 test problem 


ss405 


Loop fusion : 1 test problem 


ssl80 


Tests for Optimizations 


Loop induction : 3 test problems 


ss236 

ss409 


Loop invariant motion : 7 test problems 


invar 

ss222 

ss430 

ss752 


Loop rotation ; 3 test problems 


ss385 

ss387 


Loop unrolling : 5 test problems 


ssl05 

ss240 

ss542 


s$237 


ss212 

ss429 

ss536 


ss386 


ss238 

ss541 



Tests for Optimizations 


Machine idiom : 33 test problems 


idioms 

ss29 

ss40 

ss45 

ss59 

ssl29 

ssl96 

ssl98 

ss200 

ss205 

ss207 

ss214 

ss323 

ss503 

ss553 

ss608 

ssearch2 


Merge tests : 4 test problems 


ssl75 

ssl79 


ss7 

ss30 

ss43 

ss52 

ssll5 

ssl73 

ssl97 

ssl99 

ss204 

ss206 

ss208 

ss215 

ss466 

ss507 

ss555 

ssearch 


ssl78 

ss440 






Tests for Optimizations 


Nonpositive delay : 2 test problems 


Task35 Task35-delta 


Order of evaluation : 13 test problems 


ss413 

ss414 

ss415 

ss416 

ss417 

ss418 

ss545 

ss546 

ss547 

ss548 

ss549 

ss550 

ss551 



Redundant code elimination : 7 test problems 


$s93 

ss261 

ss377 

unreach 


ssl95 

ss376 

Task27 



Tests for Optimizations 


Register : 34 test problems 


bsortl 

ciqsort 

dhrys2 

qsortl 

runge 

ss262 

ss264 

ss307 

ss388 

ss408 

ss442 

ss510 

ss512 

ss534 

ss606 

ss609 

ss611 


bsort2 

dhrysl 

dhrys3 

qsort2 

ss235 

ss263 

ss265 

ss385x 

ss407 

ss412 

ss443 

ss511 

ss531 

ss557 

ss607 

ss610 

ss612 


Strength : 20 test problems 


auto 

gamm 

loopO 

loop3 

lu 

ssl5 

ssl88 

ss279 

ss424 

ss426 


bmt 

gamm2 

loopl 

loopS 

puzzle 

ssl6 

ss213 

ss423 

ss425 

strength 



Tests for Optimizations 


Test swapping : 2 test problems 


ss438 


$s439 


Unreachable code elimination : 2 test problems 


ss543 


ss751 





5.9 Appendix IX, WITHDRAWN TEST PROBLEMS 

This appendix contains a list of test problems which have been withdrawn because of problem reports. 
Modified versions of these tests are in the current release, with the exception of SS686. The new names 
have an "-mod" appended to the old name. In addition, a list of test problems which have modified 
versions added to the second release is provided. These problems have not been withdrawn, but there 
are now two (or more) versions of each. 


Withdrawn Tests 


DHRYSl 

DHRYS2 

DHRYS3 


FOLD 

QUEENS 



SS95 

SS96 

SS97 

SS98 

SS686 

SS724 

SS725 

SS726 

SS727 

SS728 

SS729 

SS730 

SS731 

SS732 

SS734 

SS735 

SS736 

SS737 

SS738 

SS739 

SS740 

TASK54 

TASK55 




Tests with New Versions 


SS2 

SS2 modi SS2 mod2 

SS8 

SS8 mod 

SS41 

SS41 mod 

SS42 

SS42-mod 

SS216 

SS219 

SS216-mod 

SS219-mod 


283 







