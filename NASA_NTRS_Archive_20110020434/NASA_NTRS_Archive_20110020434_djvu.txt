
Software 


© Estimating Basic Prelimi- 
nary Design Performances 
of Aerospace Vehicles 

Aerodynamics and Performance Esti- 
mation Toolset is a collection of four 
software programs for rapidly estimating 
the preliminary design performance of 
aerospace vehicles represented by doing 
simplified calculations based on ballistic 
trajectories, the ideal rocket equation, 
and supersonic wedges through stan- 
dard atmosphere. The program consists 
of a set of Microsoft Excel worksheet 
subprograms. The input and output 
data are presented in a user-friendly for- 
mat, and calculations are performed 
rapidly enough that the user can iterate 
among different trajectories and/or 
shapes to perform “what-if’ studies. Esti- 
mates that can be computed by these 
programs include: 

1. Ballistic trajectories as a function of de- 
parture angles, initial velocities, initial 
positions, and target altitudes; assum- 
ing point masses and no atmosphere. 
The program plots the trajectory in 
two-dimensions and outputs the posi- 
tion, pitch, and velocity along the tra- 
jectory. 

2. The “Rocket Equation” program calcu- 
lates and plots the trade space for a ve- 
hicle’s propellant mass fraction over a 
range of specific impulse and mission 
velocity values, propellant mass frac- 
tions as functions of specific impulses 
and velocities. 

3. “Standard Atmosphere” will estimate 
the temperature, speed of sound, pres- 
sure, and air density as a function of al- 
titude in a standard atmosphere, prop- 
erties of a standard atmosphere as 
functions of altitude. 

4. “Supersonic Wedges” will calculate the 
free-stream, normal-shock, oblique- 
shock, and isentropic flow properties 
for a wedge-shaped body flying super- 
sonically through a standard atmos- 
phere. It will also calculate the maxi- 
mum angle for which a shock remains 
attached, and the minimum Mach 
number for which a shock becomes at- 
tached, all as functions of the wedge 
angle, altitude, and Mach number. 

This work was done by Paul L. Luz and Regi- 
nald Alexander ^/ Marshall Space Flight Cen- 
ter. For further information, contact Caroline 
Wang, MSFC Software Release Authority, at 
(256) 544-3887 or Caroline.K. Wang@nasa.gov. 
Refer to MFS-31 795. 


Q Framework for Development 
of Object-Oriented Software 

The Real-Time Control (RTC) Appli- 
cation Framework is a high-level soft- 
ware framework written in C++ that sup- 
ports the rapid design and 
implementation of object-oriented ap- 
plication programs. This framework pro- 
vides built-in functionality that solves 
common software development prob- 
lems within distributed client-server, 
multi-threaded, and embedded pro- 
gramming environments. When using 
the RTC Framework to develop software 
for a specific domain, designers and im- 
plementers can focus entirely on the de- 
tails of the domain-specific software 
rather than on creating custom solu- 
tions, utilities, and frameworks for the 
complexities of the programming envi- 
ronment. The RTC Framework was orig- 
inally developed as part of a Space Shut- 
tle Launch Processing System (LPS) 
replacement project called Checkout 
and Launch Control System (CLCS). As 
a result of the framework’s develop- 
ment, CLCS software development time 
was reduced by 66 percent. The frame- 
work is generic enough for developing 
applications outside of the launch-pro- 
cessing system domain. Other applicable 
high-level domains include command 
and control systems and simulation/ 
training systems. 

This software was written by Gus Perez-Poveda 
of 360 Software Corporation, Tony Ciavarella of 
United Space Alliance, and Dan Nieten of 
Kennedy Space Center. For further informa- 
tion, access http:/ / www. 360SoftwareCcnp. com. 

In accordance with Public Law 96-517, 
the contractor has elected to retain title to this 
invention. Inquiries concerning rights for its 
commercial use should be addressed to: 

360 Software Corporation 
12472 Lake Underhill Rd. #1 74 
Orlando, FL 32828 
Phone: (407) 694-2227 
Refer to KSC-12499, volume and number 
of this NASA Tech Briefs issue, and the 
page number. 


® Analyzing Spacecraft 

Telecommunication Systems 

Multi-Mission Telecom Analysis Tool 
(MMTAT) is a C-language computer pro- 
gram for analyzing proposed spacecraft 
telecommunication systems. MMTAT uti- 


lizes parameterized input and computa- 
tional models that can be run on standard 
desktop computers to perform fast and 
accurate analyses of telecommunication 
links. MMTAT is easy to use and can easily 
be integrated with other software applica- 
tions and run as part of almost any com- 
putational simulation. It is distributed as 
either a stand-alone application program 
with a graphical user interface or a link- 
able library with a well-defined set of ap- 
plication programming interface (API) 
calls. As a stand-alone program, MMTAT 
provides both textual and graphical out- 
put. The graphs make it possible to un- 
derstand, quickly and easily, how telecom- 
munication performance varies with 
variations in input parameters. A delim- 
ited text file that can be read by any 
spreadsheet program is generated at the 
end of each run. The API in the linkable- 
library form of MMTAT enables the user 
to control simulation software and to 
change parameters during a simulation 
run. Results can be retrieved either at the 
end of a run or by use of a function call at 
any time step. 

This program was written by Mark Kor- 
don, David Hanks, Roy Gladden, and Eric 
Wood of Caltech for NASA’s Jet Propulsion 
Laboratory. Further information is con- 
tained in a TSP ( see page 1 ). 

This software is available for commercial 
licensing. Please contact Don Hart of the Cal- 
ifornia Institute of Technology at (818) 393- 
3425. Refer to NPO-40298. 


@ Collaborative Planning of 
Robotic Exploration 

The Science Activity Planner (SAP) 
software system includes an uplink-plan- 
ning component, which enables collabo- 
rative planning of activities to be under- 
taken by an exploratory robot on a 
remote planet or on Earth. Included in 
the uplink-planning component is the 
SAP-Uplink Browser, which enables users 
to load multiple spacecraft activity plans 
into a single window, compare them, and 
merge them. The uplink-planning com- 
ponent includes a subcomponent that 
implements the Rover Markup Language 
Activity Planning format (RML-AP), 
based on the Extensible Markup Lan- 
guage (XML) format that enables the 
representation, within a single docu- 
ment, of planned spacecraft and robotic 
activities together with the scientific rea- 


NASA Tech Briefs, August 2004 


15 


