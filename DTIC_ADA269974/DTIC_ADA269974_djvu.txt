0[^ol nr>n 

Copy 20 copies 



IDA DOCUMENT D-KM)2 


SOFTWARE REQUIREMENTS SPECIFICATION FOR THE 
NODE AND VIEW MANAGEMENT TOOL 



Clyde G. Roby. Task Leader 

David J. Camey 
David S. Hough 
Richard P. Morton 
Jonathan D. Wood 


July 1991 


Prepared for 
Ada Joint Program Office 


Approved for public release: distribution unlimited:<6 d un e 1 8 03 . 



05 

(\|: 

(Ol 

ogl 

CVi 
I i 
001 
0)1 


\DA 


INSTITUTE FOR DEFENSE ANALYSES 

I KOI N. Beauregard Street. Alexandria. Virginia 223111772 



lOA Log No. HQ 91-038806 








Best 

Available 

Copy 






DEFINITIONS 

IDA piitllslies Ilia following documanti to rapoit tha reiulti ol Its work. 


Reponte 

Raports ara tha most aulhorltaliva and most canlully considarad products IDA puhHshas. 
Than normally ambody rasults ot maior proiacts which {a| hava a direct haarlog on 
dacisions atfactlng malot programs, (b) address issues ol signilicant concern to the 
Exacuiive Branch, the Congress and/or tha public, or |c| address Issues that have 
signilicant economic Implications. IDA Reports are reviewed by outside panels ol experts 
to ensure their high quality and ralevance to tha problems studied, and they are released 
by ths President ot IDA. 

GroupJReports 

Group Reports record the findings and results ol IDA established working groups and 
panels composed of senior individuals addressing major issues which otherwise would be 
the subject ot an IDA Report. IDA Group Reports are reviewed by the senior individuals 
responsible for the project and others as selected by IDA to ensure their high quality and 
relevance to the problanis suiuied, and are released by the President ot IDA. 

Papers 

Papers, also authoritative and caretully considered products ol IDA, address studies that 
are narrower in scope than those covered in Reports. IDA Papers are reviewed to ensure 
that they meet the high standards expected ol relereed papers In prolesslonal journals or 
formal Agency reports. 

Documents 

IDA Documents are used for the convenience ot the sponsors or the analysts (a) to record 
suostantive work done in quick reaction studies, (b) to record the proceedings ol 
w.olerences and meetings, (cj to make available preliminary and lentalive results ol 
analyses, (d) to record data developed in the course of an investigation, or |e) to forward 
i.'.<ormation that is essentially unanalyced and unevaluated. The review of IDA Docunienis 
is suited to their content and intended use. 













REPORT DOCUMENTATION PAGE 

Apprttved 

OMH ^ 07O4-OihR 

Public rcpon;ng burden ior this coUe>cu*>n of wUoraunon tsesiuuatedio average 1 hour per responw. uk'luduig ific t .uC for rrvie«.uif tasaruenuas, seorctuji^' rxisnui' <li!j s ^ac 
galhering arxJ mainutning the data needeii. and coninlrting and fevw'Jung tlie collection of ia!<^ 14000. .Sertd OKiitucms fcg*iclii'.g Uus butdrn esiUitaic "t aza )>sr»ri a-spra • ' On- 
coilecion of inlonuattw, including suggesnoas for reducing this burdert. to ^^^shuigton Headquaners Services, {^ircctoraie t<w hift7ni.ji>"n f tpcfaturw ajt) kcp^-ri'. ; ‘ -erlr’'.. - 
Ddvis Highvids. Suite 12 <> 4 . Arluigtoa V'A 4n<f to the <)fOce of Management and Budget. Paperwork Reduction }*roitvi 0 j kh Was-tungto;;, I >< ^ S / ^ 

1 . AGENCY 1 SE ONLY (Leave blank) 

2. RH’ORT DaTI; 

July 1991 

'.RII'ORI lYPl and D.ATIN ( OVER! D 

Final 

4. in LE AND subtitle; 

Software Requirements Specification for the Node and View Management 
Tool 

N R NDlNti MMBEKs 

MDA 903 89 C (KK)3 

T-D.‘>-496 

6 Al'THOR(S) 

Clyde G. Roby. David J. Carney, David S. Hough, Richard P. Morton, 
Jonathan Wood 

7 . PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Institute for Defense Analyses (IDA) 

1801 N. Beauregard Street 

Alexandria, VA 22311-1772 

8. PERI OR.MLNt; (JKCJANiZATION REPORT 
NTMBER 

IDA Document D-l(K)2 

9 . SPONSORING/MONITORING AGENCY NAME(S) ANT) ADDRESS(ES) 

Ada Joint Program Office 

The Pentagon. Room 3E114 

Washington, DC 20301-3081 

10. SPONSORJNG/MONTTORINt; AGENCY 
REPORT NXiTvIBER 

11 . SLfPPLEMENTARY NOTES 

12a. DlSIRtBUTlON/AVAtt-ABO-ITY STATEMENT 

12b. DISTRIBLTION CODE 

2A 

13. ABSTRACT (Maximum 200 words) 

This document specifies the requirements for a Node and View Management (NVM) Tool and is doected to the 
designers and developers of such a tool. The NVM Tool has been designed and implemented and has been 
hosted on the NATO Special Working Group (SWG) Ada Programming Support Environment (APSE). The 
NVM Tool enables tool-writers to create, delete, and modify node and view definitions for the NATO SWG 
APSE Node Model (i.e., its database). A node is a representation within the Node Model of an entity relevant 
to the NATO SWG APSE. A view, which is a collection of nodes and their relationships, provides names for 
certain definitions and their properties. A separate User’s Manual has been written for the NVM Tool and 
provides a more detailed description of the tool. 

14. SUBJECT TERMS 

Node and View Management Tool; Ada Programming Support Environment 
(APSE); NATO; Common APSE Interface Set (CAIS); Software Requirements. 

15. NUMBER OF PAGES 

70 

16. PRICE CODE 

17. SECURITY CTA.SSIFICATION 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF REPORT OF THIS PAGE OF ABSTRACT 

Unclassified Unclassified Unclassified 

20. LIMITATION OF ABSTRACT 

SAR 


NSN 7540-01-2''^ Standard Form 298 (Rev. 2-89) 


Prcjciibed by ANSI Std. Z39-18 


298-102 






























IDA DOCUMENT D-l()02 


SOFTWARE REQUIREMENTS SPECIFICATION FOR THE 
NODE AND VIEW MANAGEMENT TOOL 


# 


Clyde G. Roby, Task Leader 

David J. Camey 
David S. Hough 
Richard P. Morton 
Jonathan D. Wood 


July 1991 


. V V 


ACCC"| 

.. /or ^ 

NHS 


DK-, 

O.--, 

U’ J 




By 


D; .1 ii; 

o:o.-/ 

A 

v.oi ■ i; { 

...i 

Dist 

V 1 -J 

M 

i 

- 1 - 


Approved tor public release; distribution unlimited: 



INSTITUTE FOR DEFENSE ANALYSES 

Contract MDA 903 89 C 0003 
Task T-D5-496 







Preface 


This document specifies the requirements for a Node and View Management (NVM) Tool, 
which will be hosted on the NATO Special Working Group (SWG) Ada Programming Suppon 
Environment (APSE). 

This document fulfills the requirement specified in Task Order T-D5-496 (Amendment No. 
5), NATO Special Working Group on Ada Programming Suppon Environments (NATO SWG on 
APSEs), to “specify, design, and develop a tool hosted on the SWG APSE that will enable tool- 
writers to create, delete, and modify node and view definitions for the SWG APSE Node Model." 
This document is directed to the designers and developers of such a tool, giving a list of 
Specifications for its design. 

The Node and View Management Tool was designed and implemented in late 19S9. Since 
then, later versions of the tool have been developed and distributed within the United States. A 
Users Manual has been written for NVM and gives a much more detailed description of the tool as 
it exists today. 

This document was reviewed by Mr. William Akin, Dr. Randy Garrett, Dr. Richard 
Ivanetich, Mr. Robert Knapper, Mr. Terry Mayfield, Dr. Richard Wexelblat, and Mr. David Wheeler. 
The contributions of these reviewers are gratefully acknowledged. 









TABLE OF CONTENTS 


1. INTRODUCTION .1 

2. SCOPE.3 

2.1 Identification.3 

2.2 Purpose .3 

2.3 Contents of Document.3 

3. APPLICABLE DOCUMENTS .5 

3.1 Government Documents.5 

3.2 Non-Government Documents.5 

4. REQUIREMENTS.7 

4.1 Programming Requirements.7 

4.1.1 Programming Language(s).7 

4.1.2 Compiler/Assembler/Linker.7 

4.1.3 Programming Standards.7 

4.1.4 Documentation Requirements.7 

4.2 Design Requirements.8 

4.2.1 Sizing and Timing Requirements.8 

4.2.2 Design Constraints .8 

4.3 Interface Requirements.9 

4.3.1 Interface Relationships.9 

4.3.2 Interface Identification and Documentation.9 

4.3.3 Detailed Interface Requirements.9 

4.3.3.1 NVM to CAIS Interfaces.9 

4.4 Detailed Functional Requirements .10 

4.4.1 Initializing and Terminating NVM.11 

4.4.2 Processing Keyboard Input.11 

4.4.3 Editing Directives.12 

4.4.3.1 Move cursor left.12 

4.4.3.2 Move cursor right.13 

4.4.3.3 Move cursor to end of line.13 

4.4.3.4 Move cursor to beginning of line.13 

4.4.3.5 Delete character.13 

4.4.3.6 Indicate end of input.13 

4.4.3.7 Recall previous NVM command .14 

4.4.3.8 Recall next NVM command.14 

4.4.4 Immediate Signal Processing.14 

4.4.4.1 Abort current NVM command.14 

4.4.4.2 Abort the NVM program .15 

4.4.5 Tailoring NVM.15 












































TABLE OF CONTENTS 

4.4.5.1 Command name aliasing.15 

4.4.5.2 Pathname aliasing .16 

4.4.6 Parsing NVM Commands .16 

4.4.7 Prompting for parameters.16 

4.4.8 Initiating processes.17 

4.4.8.1 Starting spawned processes .17 

4.4.8.2 Starting invoked processes.17 

4.4.8.3 Starting detached processes .17 

4 4.9 Providing Parameter Lists for processes .17 

4.4.10 Interpreting CAIS pathnames.18 

4.4.11 Manipulating the SWG APSE Database.18 

4.4.12 Nodes, Relationships, and Attributes: Creation and Deletion.19 

4.4.12.1 Create Structural Node.19 

4.4.12.2 Create Secondary Relationship.19 

4.4.12.3 Create Bidirectional Secondary Relationship.19 

4.4.12.4 Delete Secondary Relationship.19 

4.4.12.5 Set Node Attribute.20 

4.4.12.6 Set Path Attribute.20 

4.4.12.7 Copy Node.20 

4.4.12.8 Copy Tree .20 

4.4.12.9 Delete Node .21 

4.4.12.10 Delete Tree.21 

4.4.12.11 Move Node .21 

4.4.13 View Operations.21 

4.4.14 Definition Node Operations .22 

4.4.15 File Node Operations .24 

4.4.15.1 Create File Node.24 

4.4.15.2 Create Executable Image File Node .24 

4.4.15.3 Delete Node .24 

4.4.15.4 Expon File Contents.25 

4.4.15.5 Import file contents.25 

4.4.15.6 List File Contents. 25 

4.4.15.7 Write File Contents from Terminal Input.25 

4.4.16 Inspection Operations.26 

4.4.16.1 Display whether or not a Node Is Obtainable.26 

4.4.16.2 Display whether or not Two Pathnames Identify the Same Node . 26 

4.4.16.3 List Current Node .26 

4.4.16.4 List FUe Nodes.26 

4.4.16.5 List Nodes.27 

4.4.16.6 List Node Attributes.27 

4.4.16.7 List Path Attributes.27 












































TABLE OF CONTENTS 

4.4.16.8 List Process Nodes.27 

4.4.16.9 List Primary Relationships.27 

4.4.16.10 List Relationships .28 

4.4.16.11 List Structural Nodes .28 

4.4.16.12 List Secondary Relationships.28 

4.4.16.13 List Spanning Tree.28 

4.4.16.14 Set Current Node .29 

4.4.17 Process Control Commands .29 

4.4.17.1 Activate And Await Process Termination .29 

4.4.17.2 Activate Process.29 

4.4.17.3 Abon Process.29 

4.4.17.4 Await Process Termination.30 

4.4.17.5 Append Results.30 

4.4.17.6 Create Job .30 

4.4.17.7 Create Job Node.30 

4.4.17.8 Create Process Node.30 

4.4.17.9 List Current Status Information of a Process.31 

4.4.17.10 List Priorities.31 

4.4.17.11 Set Priority.31 

4.4.17.12 Delete Job .32 

4.4.17.13 List the Parameters of a Process .32 

4.4.17.14 List the Results of a Process.32 

4.4.17.15 Invoke Process.32 

4.4.17.16 Resume And Await Termination of a process.33 

4.4.17.17 Resume Process .33 

4.4.17.18 Spawn Process .33 

4.4.17.19 Suspend Process.33 

4.4.17.20 Write Results.34 

4.4.18 Access Control Commands.34 

4.4.18.1 Adopt Role.34 

4.4.18.2 Deny Access .34 

4.4.18.3 Delete Deny Relationship.34 

4.4.18.4 Delete Granted Rights.35 

4.4.18.5 Get Granted Rights .35 

4.4.18.6 Is Approved.35 

4.4.18.7 Set Granted Rights.35 

4.4.18.8 Unadopt Role.35 

4.4.19 NVM Utility Commands.36 

4.4.19.1 Providing help.36 

4.4.19.2 Exiting from NVM.36 

4.4.19.3 Display date .37 


IX 















































TABLE OF CONTENTS 


4.4.19.4 Display time.37 

4.4.19.5 Define Command Name Alias.38 

4.4.19.6 Define Pathname Alias .38 

4.4.19.7 Delete Command Name Alias .38 

4.4.19.8 Delete Pathname Alias.38 

4.4.19.9 Display Command Name Aliases.38 

4.4.19.10 Display Pathname Aliases .39 

4.4.19.11 Execute Host Command .39 

4.4.19.12 Execute CAIS System Administration Tool.39 

4.5 Adaptation Requirements.40 

4.5.1 System Environment.40 

4.5.2 System Parameters.40 

4.5.3 System Capacities .40 

4.6 Quality Requirements.40 

4.6.1 Correctness Requirements.40 

4.6.2 Reliability Requirements.41 

4.6.3 Efficiency Requirements.41 

4.6.4 Integrity Requirements.41 

4.6.5 Usability Requirements.42 

4.6.6 Maintainability Requirements.42 

4.6.7 Testability Requirements .42 

4.6.8 Flexibility Requirements.43 

4.6.9 Portability Requirements.43 

4.6.10 Reusability Requirements . 43 

4.6.11 Interoperability Requirements.43 

4.7 Other SWG APSE Tool Support.44 

5. QUALmCATION REQUIREMENTS .45 

5.1 General Qualification Requirements.45 

5.2 Special Qualification Requirements.45 

6. PREPARATION FOR DELIVERY.47 

7. NOTES.49 

7.1 Acronyms .49 

Appendix A.51 

SAMPLE INTERACTIVE SESSION.51 

Appendix B.55 

GUIDELINE FOR NVM COMMAND LANGUAGE SYNTAX.55 


X 










































1. INTRODUCTION 


► 


This Software Requirements Specification (SRS) establishes the requirements ot tlic N\^M 
Tool. Its does this by defining the minimal NVM Command Language and by specifying die overall 
operation of the NVM Tool on a command by command basis. Both the NVM Command Language 
and the commands described herein must be implemented by the NVM Tool. Additional commands 
and NVM Command Language constructs may also be implemented by the NVM Tool. However, 
they must be well documented. 




> 




1 




2. SCOPE 


2.1 Identification 

This Software Requirements Specification establishes the requirements for the Node and 
View Management Tool (NVM). The NVM Tool (also called simply “NVM" within this document) 
is intended to be delivered to the NATO Special Working Group (SWG) on \da Programming 
Support Environments (APSE) as one of the tools hosted upon it. 


22 Purpose 

The NATO SWG APSE shall support the development and maintenance of Ada application 
software. The NATO SWG APSE, which consists of a set of integrated tools, wiM be hosted on a 
DEC VAXVVMS^ and ported to a SUN/UNIX^ computer .system. The main purpose of the NVM 
Tool is to provide users with a capability to create, modify and delete node, attribute, and 
relationship definitions within a CAIS database. It shall also provide the capability to perform a 
variety of other functions. 

The NVM commands shall provide facilities for invoking programs, for reporting on 
various states of entities within the Common APSE Interface Set (CAIS) implementation upon 
which the NVM Tool resides, and for performing CAIS operations. 


23 Contents of Document 

This document contains 6 chapters and 2 appendixes. Chapter 2 addresses the Scope of the 
document, including its purpose. Chapter 3 identifies applicable government and civil documents. 
The requirements for the Node and View Management Tool, its programming and design 
requirements, interface requirements, detailed functional requirements, adaptation requirements, 
and quality requirements are described in Chapter 4. Chapter 5 addresses qualification 

1. VAX is a registered trademark of Digital Equipment Corporation. 

2. VMS is a registered uademark of Digital Equipment Corporation. 

3. UNIX IS a registered trademark of AT&T. 


3 







requirements. Delivery of the .software code and its docuinentaiion is aildressed in Cliaptcr 6. 
Chapter 7 lists acronyms usctl throughout this document, a sample ilialog between a user anil the 
NVM Tool is given in Appendix A. Guidelines for a possible syntax for an NVM Comnianil 
Language are given in Appendix B. 


3. APPLICABLE DOCUMENTS 


3.1 Government Documents 

The following (.locuments of ilic exact issue shown form a pan of itiis spccihcation to the 
extent spcciftec! herein. In the event of conHict between the (locuments referenced herein and the 
contents of this specification, die contents of tltis specification shall be considered a superceding 
requirement. 

(1) Military Standard Defense System Software Development. DOD-STD-2167A. 29 
February 1988. 

(2) Reference Manual for the Ada Programming Language. ANSUMIL-STD- !815A- 
198S. 17 February 1983. 

(3) Military Standard Common APSE Interface Set (CAISi Revision A. MIL-STD- 
1838A, 6 April 1989. 

(4) Requirements for the Ada Programming Support Environment "STONEM.Ay''. 
Department of Defense, February 1980. 


3.2 Non-Government Documents 

The following documents of the exact issue shown form a part of this specification to the 
extent specified herein. In the event of conflict between the documents referenced herein and the 
contents of this specification, the contents of this specification shall be considered a superceding 
requirement. 

( 1 ) NATO SWG APSE Requirements, Version 1.0, 21 May 1987. 

(2) Specifications for the Special Working Group Common Ada Programming Support 
Environment (APSE) Interface Set (CAIS) Implementations, (SWG CAIS Delta 
Document Version 2.0), 8 September 1989. 

(3) VAX/VMS SWG CAIS Users Manual, Version 5.5, December 7, 1990. 




Copies of specifications, standarils, drawings, and publications required by suppliers in 
connection witli specified procurement functions should be obtainetl from the contracting agerK> 
or as directed by tlic contracting officer. 

Technical society and technical association specifications and standards are generally 
available for reference from libraries. They arc also tlistributetl among technical groups and the 
applicable Federal Agencies. 








4. REQUIREMENTS 


Throughout the remainder ot this liocuniem, Uie wonl "may'' appearing in a requiremen! is 
defined to mean that the requirement is optional, is of secondary priority, or is a goal. 

4.1 Programming Requirements 

4.1.1 Programming Language(s) 

The programming language for the NVM Tool shall be Ada as defined in ANSI/MIL-STD- 

1815A. 


4.1.2 Compiler/Assembler/Linker 

NVM, when integrated with the complete set of SWG APSE tools, shall be compiled using 
the SWG APSE compiler and shall be linked using the SWG APSE linker. Development of the 
NVM Tool may be carried out on another validated compiler, with care being taken to ensure that 
all facilities used are available in the SWG APSE compiler. 


4.1.3 Programming Standards 

Programming standards should be in accordance with DOD-STD-2167A. 


4.1.4 Documentation Requirements 

The following disclaimer of warranty and liability shall appear within Ada comments at the 
very beginning of all Ada language source files and all user documents associated with the NVM 
Tool: 


7 





DISCLAIMER OF WARRANTY AND LIABILIT\ 


THIS IS EXPERIMENTAL PROTOTYPE SOFTWARE. IT IS PROVIDED ' AS 
IS” WITHOUT WARRANTY OR REPRESENTATION OF ANY KIND. THE 
INSTITUTE FOR DEFENSE ANALYSES HDA) DOES NOT WARRANT. 
GUARANTEE. OR MAKE ANY REPRESENTATIONS REGARDING THIS 
SOFTWARE WITH RESPECT TO CORRECTNESS. ACCURACY. RELIABILITY. 
MERCHANTABILITY. FITNESS FOR A PARTICULAR PURPOSE. OR OTHERWISE. 

USERS ASSUME ALL RISKS IN USING THIS SOFTWARE. NEITHER IDA 
NOR ANYONE ELSE INVOLVED IN THE CREATION. PRODUCTION. OR 
DISTRIBUTION OF THIS SOFTWARE SHALL BE LIABLE FOR ANY DAMAGE, 
INJURY, OR LOSS RESULTING FROM ITS USE, WHETHER SUCH DAMAGE. 
INJURY, OR LOSS IS CHARACTERIZED AS DIRECT. INDIRECT. 
CONSEQUENTIAL, INCIDENTAL. SPECIAL, OR OTHERWISE. 

42 Design Requirements 

4,2.1 Sizing and Timing Requirements 

NVM shall operate within the hardware and software configurations specified by the NATO 
SWG APSE requirements. The NVM Tool shall share the allocated resources with the other tools 
in the SWG APSE. 

422 Design Constraints 

NVM shall be designed to maximize the portability of the SWG APSE between host 
systems supporting the SWG CAIS. Thus, the SWG CAIS shall be used extensively by NVM to 
provide host operating system services. A host operating system service shall not be directly called 
by NVM if an equivalent service can be provided by the SWG CAIS. NVM may use some of the 
functions provided by the packages CAIS_ADMINISTRATIVE_SERV1CES and 
CAIS_HOST_SPECIFIC_SERVICES in order to properly execute. 





4.3 Interface Requirements 


In this section and the next section, several requirements tor NVM commands arc 
presented. Although most otthe NVM commands do not have an explicit syntax, there are some 
diat do. The NVM Tool shall recognize die syntax of tlic.se tew commamis. 

Tliroughout this section, items that appear in a computer typeface, c.g.. conroand, can be 
either lower or upper case, but must be die same letters. Items diat appear in italics. c.^.,parcinK'ici 
or parametei. must be replaced with an actual corresponding value. Items that appear vs itiim 
curly braces, i.e., { and ), indicate diat the items are optional anti need not be entcrcil. 

(A sample dialog between a user and the NVM Tool is given in Appemiix A. “Sample 
interaedve Session”. Command names ami syntax arc not required to be as shown in this Appendix. 
Guidelines for a possible syntax for an NVM Command Language are given in Appendix B. 
“Guideline for NVM Command Language Syntax”. These are guidelines only and arc not 
requirements for an NVM Command Language.) 


4.3.1 Interface Relationships 

NVM shall provide a command that allows it to invoke another process, passing parameters 
as necessary. 


4J.2 Interface Identification and Documentation 

The information pertaining to the CAIS is found in the Common APSE Interface Set 
(CAIS), MIL-STD-1838A document. 

4 Detailed Interface Requirements 

4.33.1 NVM to CAIS Interfaces 

The SWG CAIS provides the host operating system interface for NVM. NVM may use 
some of the functions provided by the package CAIS_ADMINISTRATIVE_SERV1CES in order to 
properly execute. There shall be a strong functional cohesion between the SWG CAIS and NVM as 
one of the functions of NVM shall be to provide nearly all CAIS operations. In addition, all 
operations that deal with communicating between processes, invoking programs, or obtaining the 





status of the SWG APSE, shall require direct access to die CAIS node model. In order to pcrlomi 
its functions, NVM shall uiili/e. as necessary, CAIS subprograms and types as dehned in die CAIS 
packages. 

NVM shall provide commands to manipulate the CAIS nodes, relationships, and attributes. 

NVM assumes that each SWG APSE user shall have a unique name, and diat this name 
shall be the key of the 'USER relation established for the user in die SWG CAIS. Tliis relation 
shall temiinate at a SWG CAIS user node which shall serve as the top level node for all user files. 

NVM assumes SWG CAIS group nodes will be e.stablished to control access to SWG APSE 
files and tools. However, these controls arc not required for NVM. NVM may provide a means to 
create and manipulate SWG CAIS groups. 

NVM may provide commands to define users and groups. NVM assumes that the process 
that logs a user onto the SWG APSE will create an executing process from the executable image of 
NVM for some subset of all users. 

Every user who executes NVM may have an initialization file whose pathname is given by 
'USEE(W5C/_«amc)'DOT(LOGIN) . If the initialization file is present, NVM commands 
contained in this file shall be interpreted every time that user executes NVM. 

Note that several issues regarding the inidalization of the CAIS node model at the ume of 
the inidalizadon of the SWG APSE and during the logon time of each user have not been addressed. 
These operadons are considered to be outside the scope of NVM and the CAIS. NVM requires a 
number of acdons before it can operate properly: 

{1) The executable image of NVM must be available in a node within the SWG APSE. 

(2) NVM must be established as the root process node for some subset of users when 
they logon to the SWG APSE. 

(3) The secondary reladonships for DEVICE and USEE need to be established for the 
NVM process node. 

(4) The access rights for NVM must be set properly so that NVM can funedon as 
required. 


4.4 Detailed Functional Requirements 

NVM shall be used to process statements formulated in the NVM Command Language. 
Comments, specified in Ada syntax, shall be included in the NVM Command Language. 
They shall not perform any NVM funedon but shall be provided to allow for user documentadon. 






All comniantls within NVM may be invoked interactively by specityini: the command 
name and parameter values in a conuiion tonn. similar to tlie tomi of an Ada procedure call. When 
invoked interactively, some parameters for some of the NVM commands may be prompted for and 
verified by NVM. 

NVM shall be tailorable as it shall provide tlic ability to tlefinc aliases for conuiiands and 
to initialize portions of the environment for a particular user. 

When some users logon to the SWG APSE, NVM may be the root process node for them. 

The subparagraphs within tliis section provide the framework for die design of the NVM 
Tool. When specific syntax of certain commands arc given in these subparagraphs, the NVM Tool 
shall recognize, at a minimum, this .syntax. 


4.4.1 Initializing and Terminating NVM 

For some users, NVM shall be invoked as the top level process when they are logged onto 
the SWG APSE. 

NVM shall look for the existence of a particular file node whose pathname is given by 
'VSEHiusername) 'DOT (LOG IN). If such a file node exists, NVM will read all the lines in that 
file and execute them as if they had been entered by the user. This allows the user to have the same 
environment within NVM each time he logs onto the SWG APSE without having to reenter the 
commands manually. 

Once all initialization has occurred, NVM shall begin interpreting u.ser input interactively. 

NVM terminates when the interactive user enters the bye command or an alias which 
translates to the bye command is entered. If NVM is the top level process, this command shall 
cause the user to be logged out of the SWG APSE. 


4.4.2 Processing Keyboard Input 

All keyboard input shall be retrieved and processed by NVM through either the CAIS 
package CAIS_TEXT_10 or the CAIS package CAIS_TERMINAL_10'‘. NVM, through the 
several interfaces to CAIS_TERMINAL_IO, shall recognize three categories of input: immediate 
signals, editing directives, and NVM commands. Immediate signals shall be those actions that 
require immediate servicing, such as “abort current command.” Editing directives shall be 


4. Throughout the remainder of this document, it is assumed that the NVM Tool has been invoked using 
CAIS_TERMINAL_IO as the means to communicate with the user, unless explicitly documented. 








commands (c.g., move cursor left) tliat arc usetl interactively to modity and correct die NVM 
commands to be interpreted by NVM. All other input from die keyboard diat docs not fail into these 
two categories shall be passed to NVM as pan of NVM commands. 

immediate signals shall be passed directly to NVM where die appropriate action shall be 
perfonned as soon as possible. Immediate signals shall not be echoed to die tenninal device. 

Editing directives shall be processed directly by NVM. Tliey shall provide simple character 
and line oriented functions to aid the user in supplying correct input to NVM. Editing directives 
shall be associated with keys to ensure that they can be interpreted properly. 

NVM commands shall satisfy the input requests to NVM. NVM shall manage a command 
recall facility which shall provide the user with access to previously stored NVM conunands. 


4,4.3 Editing Directives 

Since the insen mode of operation shall accept NVM commands, editing directives shall 
not be required for the insertion of characters. The editing directives shall not be echoed to the 
screen but their effects shall be seen in the change to the program data in the input line, which shall 
be echoed to the screen. Editing directives shall be associated with keys to ensure that they can be 
interpreted properly. 

NVM shall include at least the following editing directives and key bindings: 


CTRL/B 

Move cursor left. 

CTRL/F 

Move cursor right. 

CTRIVE 

Move cursor to end of line. 

CTRL/A 

Move cursor to beginning of line 

DEL 

Delete character. 

CTRUU 

Delete entire line. 

CTRL/P 

Recall previous NVM command. 

CTR17N 

Recall next NVM command. 

CR 

Indicate end of input. 


4.4 J.l Move cursor left 

The current cursor position shall be modified by one column to the left. If the cursor is 
already at the leftmost position in the input line, then no change shall take place. The current 
position of the cursor shall be echoed to the screen. 






4.4.3.2 Move cursor right 


The current cursor position shall be modified by one column to the right. If the cursor is 
already at the righuuosi position in the input line, then no change shall take place. The current 
position of the cursor shall be echoed to tlic screen. 


4.4.3.3 Move cursor to end of line 

The current cursor position shall be modified by making it point to the rightmost position 
in the input line, i.e., one position past the last non-blank character on the input line. If the current 
cursor position is already past the last non-blank character on the input line, the cursor position does 
not change. The current position of the cursor shall be echoed to the screen. 


4.4 J.4 Move cursor to beginning of line 

The current cursor position shall be modified by making it point to the leftmost position in 
the input line. If the cursor is already at the leftmost position in the input line, then no change shall 
take place. The current position of the cursor shall be echoed to the screen. 


4.43.5 Delete character 

The character in the input line at the current cursor position shall be deleted. Every 
character to the right of the deleted character shall be shifted one position to the left in the input line. 
The updated contents of the input line shall be echoed to the screen. 


4.43.6 Indicate end of input 

The contents of the input line shall be made available to NVM. The contents of the input 
line may also be added to the Command History capability for later recall. 









4.4.3.7 Recall previous NVM command 


The previous NVM command which was entered interactively shall be reu’ieved via the 
Command History capability and the current position shall be updated to point to the recalled NVM 
command. The recalled NVM command shall be placed in the input line and echocil on tltc screen. 
If there are no previous entries available via the Command History capability, then no change shall 
be made to the input line or to tlte current cursor position. 


4.4J.8 Recall next NVM command 

The next NVM command which was entered interactively shall be retrieved via the 
Command History capability and the current position shall be updated to point to the recalled NVM 
command. The recalled NVM command shall be placed in the input line and echoed on tlie screen. 
If there are no following entries available via the Command History capability, then no change shall 
be made to the input line or to the current cursor position. 


4.4.4 Immediate Signal Processing 

All immediate signals shall be handled by NVM as soon as possible after they have been 
received. Note that because NVM uses the CAIS_TERMINAL_IO package for its communication 
with the user, immediate signals are checked only when input or output is perfonned via 
CAIS_TERMINAL_10. Immediate signal functions shall not be echoed to the terminal. The 
following is a list of immediate signal functions: 

(1) Abort current NVM command. 

(2) Abort the NVM program. 

These functions must be immediate signals but diere are perhaps other functions which may 
qualify for immediate processing. The following set of commands consists of the immediate signal 
commands that shall be processed by NVM and their complementary functions. 


4.4.4.1 Abort current NVM command 

When this signal is detected by NVM, an Ada exception shall be raised. This exception may 
be detected in the course of the execution of any NVM commands so that any cleanup operations 
for those commands may be performed. 









i 






» 


4.4.4.2 Abort the NVM program 

In the current implementation ot hie .MATO SV\G APSE C.AIS, cntcritM: ilic keyboarti 
equivalent of encl-of-filc (CTRL/Z for DEC VAX/VMS) gives an indication of END_OF_FlLE for 
Ute CAIS_TERMINAL_IO package. NVM should recognize tins condition and raise an appropriate 
Ada exception. Ail exception handlers iliat recognize this exception should reraise the exception so 
that the main NVM processing loop can recognize the condition and exit the .NVM Tool. 


4.4.5 Tailoring NVM 

Several features shall be available to enable tailoring of tlic NVM Tool in the SWG APSE 
environment: 

(1) Command name aliasing shall allow the user to rename an existing NVM com¬ 
mand. 

(2) Pathname aliasing shall allow the user to name a pathname (c.g.. so that a fewer 
number of characters may be used for that pathname in NVM Command Lines). 

(3) Each user shall have his own set of NVM commands that shall be interpreted when 
that user logs in to NVM. The pathname of the file containing these commands is 
'USER( usef_name )' DOT(LOGIN). 

These features are described below. 


► 


I 


I 


4.4.5.1 Command name aliasing 

If certain NVM commands are not to the liking of the user, then the command names may 
be aliased. It shall be possible to alias all NVM commands, except for the bye command (the bye 
command allows the user to exit from the NVM Tool). The syntax of the command to perfomi 
command name aliasing shall be: 

alias {f roin=> }user_najne {t.o=> } existizjg_iia/ne 

Once the userjiame and existingjiame parameters have been verified, the alias shall 
replace any alias currently defined with the same user name. This ensures that a command name 
alias shall refer only to one command at a time. An error message shall be displayed if an attempt 
is made to redefine, via an alias, the bye command. 


I 


15 





4.4.5.2 Pathname aliasing 


The user may also alias parameters that arc paOinamcs. At least two parameters must be 
given with this command, an existing pathname and die user's new pathname alias. Once dicse 
parameters have been verified, the pathname alias shall replace any pathname alias currently 
defined with die same existing pathname. This ensures that a pathname alias shall rcter only to one 
pathname at a time. 


4.4.6 Parsing NVM Commands 

Comments, specified in Ada syntax, shall be included in the NVM Command Language. 
They shall not perform any NVM function but shall be providetl to allow for u.s'cr documentation. 

Command name aliases and pathname aliases shall be dealiased such that the command or 
the pathname shall replace the respective alias in the NVM Conuiiand Line before it is parsed. Once 
aliases arc processed, the NVM Command Line shall be parsed. 

NVM commands shall be parsed before they can be processed. 

4.4.7 Prompting for parameters 

To ensure that NVM is easy to use, the ability to prompt for parameters shall be provided. 
NVM may prompt the user for further program data, i.e., additional data needed for NVM 
commands, if an insufficient number of parameters is supplied for a command. NVM shall supply 
default values for parameters which, in practice, almost always have the same value, e.g., attributes, 
intents, etc. If values are provided for all parameters which do not have default values, then the 
number of parameters supplied shall be considered sufficient. 

If a command is specified with too few parameters, an error shall be displayed. The user 
should then enter values for all essential parameters and modify any of the default values for 
parameters that are not suitable. Once the user is finished providing input for the NVM command, 
NVM shall interpret the command. 



4.4.8 Initiating processes 

NV'M shall provide three facilities for initiating processes. 

{1) The first type of initiated process shall be referred to as a spawned process-, it shares 
the same environment as tiie NVM Tool. NV'M and the spawned process operate 
independently of each other. 

(2) The second type of initiated process shall be referred to as an invoked process-, it 
shares the same environment as the NVM Tool. NVM must wait until the invoked 
process completes before it regains control of the environment. 

(3) The third type of initiated process shall be referred to as a detached process or a 
job. NVM and the new job shall then be able to execute concurrently and indepen¬ 
dently. Since the created job .shall fomi its own process tree, it shall not be affected 
by the user logging off. 


4.4.8.1 Starting spawned processes 

NVM shall have commands to spawn processes and start them. 


4.4.8.2 Starting invoked processes 

NVM shall have commands to invoke processes and start them. 


4.4.8.3 Starting detached processes 

NVM shall have commands to create jobs and start them. 


4.4.9 Providing Parameter Lists for processes 

The input parameters provided for a process shall be formatted by NVM and then stored in 
the predefined PARAMETERS attribute of the invoked process. It shall be the responsibility of the 
invoked program to extract the parameter list from the PARAMETERS attribute associated with its 
process node and to use CAIS facilities to extract the values in their appropriate forms. 


17 




Output parameters shall be stored by the invoked program in the predchned RESl.LTS 
attribute of the associated process node for retrieval by anr'hcr NV'M commaml. As well as 
retrieving the results, NV'M shall obtain tlie .status of the process. Tlic process status shall be siorctl 
in the predefined CURRENT_STATUS attribute. 

Problems encountered by NV’M while storing parameters or results shall be reponed to the 

user. 


4.4.10 Interpreting CAIS pathnames 

NVM shall provide the interactive user with direct access to many CAIS facilities. As a 
result, many of the commands in NV'M shall require the specification of a pathname. Pathnames 
.shall be used to identify nodes in the SWG APSE. These pathnames shall take the same fonn as 
CAIS pathnames, consisting of relation names and relationship key designators. Refer to the CAIS 
specification doci'ment for a complete description of CAIS pathnames. 

Pathnames shall be considered to be full pathnames if they start witlt an apostrophe (or 
lick); otherwise, they shall be abbreviated pathnames. There may be several fomis of abbreviated 
pathnames. NVM shall s"pport at least the form of an abbreviated pathname for which the fu.l 
pathname may be obtained by prefixing it with ' CirREENT_NODE ' so that the pathname given by 
DOT (SMITH) is equivalent to the pathname 'CURRENT_NODE'DOT (SMITH) (or 
■'CURREHT_NODE. SMITH). Whet ever pathnames are required, both of these forms of pathnames 
shall be acceptable. 

Apart from simply referring to a single pathname, it shall be possible to have wildcard 
characters in the name to allow for reference to several nodes, relationships, or attributes. The 
character shall match zero or more characters within a relation name or relationship key 
designator. The character “?" shall match any single character. Wildcard characters may be used in 
pathnames if it is explicitly noted in the description of the NVM command; otherwise, they shall 
not be allowed. 


4.4.11 Manipulating the SWG APSE Database 

In order to use the SWG APSE as a development system, the user -equires the ability to 
manipulate the CAIS nodes, including all the definition and view nodes. In the following sections, 
requirements for manipulating the various nodes, relationships, and attributes of the SWG APSE 
database are described. 



4.4.12 Nodes, Relationships, and AttribiJte.s: ( rcatioti and Deletion 


4.4.12.1 Create Structural Node 

This coniniand shall create a Structural node m die S^^Ci APSh. At least tvso parameters 
must be civen v\ u!i diis command, die relation t whicli ma> have a detauh) and the reiattonslup kev 
of die relationsl'iip to die new Structural noilc to be createti Ativ problems encountered while 
creatine the node shall be reponed to the user. 


4.4.12.2 Create Secondary Relationship 

This commanvl shall create a secondary relationship cmanatinc from one node anil targeted 
to another ncxic. At least three parameters must be given widt diis command: die name of die 
secondary relationship, the identification of the source node (which ma_\ have a default), and the 
identification of the target node. For those relationships drat require a key, a founfi parameter must 
also be given with diis command; die value of that key. 


4.4.12.3 Create Bidirectional Secondary Relationship 

This command shall create a bidirectional secondarv’ relationship emanating from one node 
and targeted to another node. At least three parameters must be given with this command: the name 
of the secondary relationship, the identification of the source node (which may have a default), and 
the identification of the target node. For those bidirectional relationships that require a key. two 
additional parameters may also be given with this command: the values of the keys for the 
secondary relationship and the reverse relationship. Any problems encountered while creating the 
bidirectional secondarv' relationship shall be reported to the user. 


4.4.12,4 Delete Secondary Relationship 

This command shall delete a secondary relationship emanating from a node in the SWG 
APSE. At least two parameters must be given with this command, the name of the secondary 
relation to be deleted from a node, and the identification of that node (which may have a default) in 
the SWG APSE. Any problems encountered while deleting the secondary relationship shall be 
reported to the user. 



4.4.12.5 Set Node Attribute 


This conunami shall sci (or change) the value ol an attribute on a mHic in the SW(i APSf: 
At least tltree parameters must be given with this coinmami. the iilentihcation ot the node sshose 
attribute is to be changed (which may have a dct'auli). the name of tiic node attribute, and the new 
value to be set for tlic node attribute. Any problems encountered while .setting the notle attribute 
shall be reported to the user. 


4.4.12.6 Set Path Attribute 

This contmand shall set (or change) tiic value of an attribute on a relationship in die SWG 
APSE. If the attribute docs not exist, it is first created. At Ica.st three parameters must be given widi 
this command, the name of die relationship who.se attribute is to be changed, die name of the padi 
attribute on diat relationship, and the new value to be set for die padi attribute. Any problems 
encountered while setting the path attribute shall be reported to the user. 


4.4.12.7 Copy Node 

copyn { f rom=> 1 fro/n_patiiname {t.o=> ] to_patJixiame 

This command shall create a copy of a single Structural or Secondary Storage node. At least 
two pathnames are required for this command. The from_palhname shall identify the node that is 
to be copied. The topathname shall specify the name of the new node that is to be a copy of the 
first node; this pathname must not specify an existing node. Any problems encountered while 
copying the node shall be reported to the user. 


4.4.12.8 Copy Tree 

copyt. { f rom= > } from^pa thname {t.o= > } to_pa tbname 

This command shall create a copy of a node tree. At least two pathnames are required for 
this command. The from jyathname shall identify the root node of the tree that is to be copied. The 
to^pathname shall specify the name of the new node that is to be a copy of the root node and under 
which a copy of all the nodes in the node tree arc to be placed; this pathname must not specify an 
existing node. Any problems encountered while copying the tree shall be reported to the user. 






4.4.12.9 Delete Node 


deln {node= > )i3ode_patiLname 

This conuiiancl shall licletc the primary relationship to a node in tlic SWG APSE; tJic node 
becomes unobtainable. This commanil shall require at least one parameter. nodcj>a!hnumc, which 
shall itlentitV tlic patltnamc to an existing node in the SWG APSE. Any problems encountcrcil while 
deleting the Structural node shall be reporteti to the user. 

4.4.12.10 Delete Tree 

delt. {node= > }node_patimajne 

This command shall delete a node tree from the SWG APSE. This command shall require 
at least one parameter, nodejjaihname, which shall identify the pathname to an existing node tree 
in the SWG APSE. Any problems encountered while deleting the node tree shall be reported to the 
user. 


4.4.12.11 Move Node 

move {f rom=> } from_patimaine {t.o=>)to __pathname 

This command shall move a single Structural or Secondary Storage node. At least two 
pathnames are required for this command. The from j>aihname shall identify the node that is to be 
moved (or renamed). The to ^pathname shall specify the pathname of the node after it has been 
moved. Any problems encountered while moving (renaming) the node tree shall be reported to the 
user. 


4.4.13 View Operations 

The following commands shall be supported by the NVM Tool. The number of parameters 
and the parameters themselves are not detailed in this section. However, a list of appropriate 
functions is included here for completeness. The NVM Tool shall have commands which shall: 

(1) Adopt a View, 

(2) Unadopt a View, 

(3) Create a View, and 





(4) Delete a View. 


Any problems encountered while executing any of these commands shall be rcponetl to the 

user. 


4.4.14 Definition Node Operations 

The following commands shall be supported by the NVM Tool. The number of parameters 
and the parameters themselves are not detailed in this section. However, a list of appropriate 
functions is included here for completeness. The NVM Tool shall have comntands which shall: 

(1) Create an Attribute Definition (AD) node, 

(2) Create an Attribute Kind Definition (AKD) node, 

(3) Create a Node Kind Definition (NKD) node, 

(4) Create a Node Kind Interpretation (NKI) node for an existing node kind, 

(5) Create a Node Kind Specialization by designating an existing node kind to be a 
specialization of another existing node kind, 

(6) Create a Relation Specialization by designating one existing relation to be a spe¬ 
cialization of another existing relation, 

(7) Create a Unidirectional Secondary Relation Definition node and its associated 
Relation Interpretation node, 

(8) Create a Bidirectional Secondary Relation Definition (RD) node represented by a 
single RD node (for bidirectional relationships whose two unidirectional compo¬ 
nents are semantically identical) and the associated Relation Interpretation node, 

(9) Create a Bidirectional Relation Definition pair of nodes, i.e., create a Bidirectional 
Relation Definition represented by two distinct Bidirectional Relation Definition 
nodes (for bidirectional relationships whose two unidirectional components are 
semantically distinct) and their associated Relation Interpretation nodes; these 
Relation Definitions can be designated either as primary or secondary Relation 
Definitions, 

(10) Create a Relation Interpretation (RJ) node for an existing Relation Definition node, 

(11) Define an Emanating Relation by creating a secondary EMANATES relationship 
from an NKD node to a Relation Definition node, thus indicating that relationships 
of the Relation defined by the RD node can emanate from nodes (instances) of the 
specified node kind definition, 






(12) Define aTeniiinatinp Relation by creatinji a secondar\' TERMINATES relationship 
from an NKD node to a Relation Definition node, thus indicalinc that relationships 
of the Relation defined by liic RD node can temiinate at nodes (instances) of tiic 
specified node kind definition, 

(13) Define an Attribute for cither a node kind (NKD) or a relation kind (RD), 

(14) Delete an Attribute Definition, i.c.. delete a secondary relationship which defines a 
local name for an attribute definition and optionally delete the corresponding 
Attribute Definition node, 

(15) Delete an Attribute Kind Definition, i.c., delete a secondary relationship which 
defines a local name for an attribute kind definition and optionally delete the cor¬ 
responding Attribute Kind Definition node, 

(16) Delete a Node Kind Interpretation node from a View and optionally the corre¬ 
sponding Node Kind Definition node, 

(17) Delete a Node Kind Specialization, i.e., sever a specialization association between 
two nodes, 

(18) Delete a Relation Specialization, i.e., sever a specialization association between 
two relations, 

(19) Delete a Relation Interpretation and Definition, i.e., delete a Relation Interpretation 
node for either a unidirectional or bidirectional relation from a View and optionally 
the corresponding Relation Definition node for the unidirectional relation, 

(20) Delete a Bidirectional Relation Interpretation and Definition, i.e., delete a Relation 
Interpretation node for a bidirectional relation from a View and optionally the cor¬ 
responding Bidirectional Relation Definition node, 

(21) Delete a tree of definitions, 

(22) Delete an Emanating Relation, i.e., delete a secondary relationship which defines a 
local name for a relation and optionally delete a secondary EMANATES relation¬ 
ship, 

(23) Delete a Terminating Relation, i.e., delete a secondary TERMINATES relationship 
from a Node Kind Definition node to a Relation Definition node, 

(24) Delete an Attribute from an NKD or an RD, i.e., delete from a view a secondary 
ATTRIBUTE_NAME relationship which defines a local name for an attribute and 
optionally deletes a secondary ATTRIBUTE relationship emanating from the NKD 
or RD node and terminating at the AD node. 







(25) Set a Definition Node Attribute value, i.c.. set tlic value of a CA!S-coniroIlcd dcl- 
inilion node attribute, 

(26) Conven a node, i.e., chance a node from an instance of one node kind to be an 
instance of another node kind, anil 

(27) Display all primary and secondary relationships emanating from a specified Defi¬ 
nition node and display all node and relation attributes. 

Any problems encountered while executing any of these commands shall be reponed to the 

user. 


4.4.15 File Node Operations 

The commands described in the following subsections shall be supported. 


4.4.15.1 Create File Node 

This command shall create a File node in the SWG APSE. At least two parameters must be 
given with this command, the relation (which may have a default) and the relationship key of the 
relationship to the new File node to be created. Any problems encountered while creating the notle 
shall be reported to the user. 


4.4.15.2 Create Executable Image File Node 

This command shall create an Executable Image File node in the SWG APSE. At least two 
parameters must be given with this command, the relation (which may have a default) and the 
relationship key of the relationship to the new Executable Image File node to be created. Any 
problems encountered while creating the node shall be reported to the user. 


4.4.15.3 Delete Node 

This command shall delete the primary relationship to a node in the SWG APSE. At least 
one parameter must be given with this command, the pathname to the existing node to be deleted. 
Any problems encountered while deleting the node shall be reported to the user. 








4.4,15.4 Export File Contents 

expfc ( f roin= > } CAIS_file_node_pat2ii3a/ne 1 to= >) liost_filename 

This conunanti shall export the contents of a File node from the SWG APSE to the host file 
system. There shall be at least two parameters to this command. The CAIS_^ftlc_no(lcj)aihnamc 
shall be the pathnarne of the File node in the SWG APSE that contains the file that is to be exporteti 
to the host file system. The hosi_^filename shall be a valid host file system filename. Any problems 
encountered while exporting the file node contents shall be reponed to the user. 


4.4.15.5 Import file contents 

impfc {±rom='>]host_f±lename [■to= > ]CAIS_file_aode_pathi:iaine 

This command shall import the contents of a file from the host file system to tlic SWG 
APSE. There shall be at least two parameters to this command. The hosiJ\lename shall be a valid 
host file system filename of the file to be imported into the SWG APSE. The 
CAISJilejiode_paihname is the pathname of the File node in the SWG APSE that the file is to be 
imponed to. Any problems encountered while importing the file node contents shall be reponed to 
the user. 


4.4.15.6 List File Contents 

This command shall list (display) the contents of a File node (Secondary Storage Text). 
There shall be at least one parameter to this command, the pathname of the File node whose cm* nts 
are to be listed. If the File node can be opened, then the contents of the File node are listed 
(displayed) on the user's terminal. Any problems encountered while displaying the file node 
contents shall be reported to the user. 


4.4.15.7 Write File Contents from Terminal Input 

This command shall write the contents of a File node from what the user enters from the 
terminal. There shall be at least one parameter to this command, the pathname of the File node 
whose contents are to be written to. Any problems encountered while writing the file node contents 
shall be reported to the user. 







4.4.16 Inspection Operations 


The coniniands described in the toliowing subsections stiali be supported. 


4.4.16.1 Display whether or not a Node Is Obtainable 

This cornmand shall determine if a node is obtainable or accessible. Either TRUE or 
FALSE shall be displayed at the user's terminal. There shall be at least one parameter to this 
command, the pathname of the node to be queried for Obtainability. Any pi iblems encountered 
while detennining notle obtainability shall be reported to the user. 


4.4.16.2 Display whether or not Two Pathnames Identify the Same Node 

This command shall compare two pathnames. If the two pathnames refer to the same CAIS 
node, TRUE shall be displayed. Otherwise FALSE shall be displayed. There shall be two 
parameters for this command, each shall be a pathname of a node (which may have a default) in tlie 
SWG APSE identifying nodes that will be queried for sameness. Any problems encountered while 
determining whether two pathnames identify the same node shall be reported to the user. 


4.4.16.3 List Current Node 

This command shall list (display) the full pathname of the node that is the current node for 
the user on the user's terminal. Any problems encountered while displaying the pathname shall be 
reported to the user. 


4.4.16.4 List File Nodes 

This command shall list (display) all File nodes that are reachable from a given node in the 
SWG APSE. There shall be at least one parameter for this command, the pathname identifying the 
node (which may have a default) from which all File nodes that are reachable will be displayed to 
the user. Any problems encountered while displaying the file nodes shall be reported to the user. 


26 







4.4.16.5 List Nodes 


This command shall list (display) ail primary and secondary relationships emanating from 
a specified node and display all noiic and relation attributes. Tlicrc shall be at least one parameter 
required for this command, the identification of a node (which may have a default) for which all tliis 
infomiation is to be displayed. Any problems encountered while displaying the relationships shall 
be reported to the user, 

4.4.16.6 List Node Attributes 

This command shall list (display) all the node attributes for a node in the SWG APSE. 
There shall be at least one parameter for this command, the pathname of the node (which may have 
a default) whose attributes are to be displayed to the user's lemiinal. Any problems encountereil 
while displaying the node attributes shall be reported to the user. 


4.4.16.7 List Path Attributes 

This command shall list (display) all the path attributes for a relationship in the SWG 
APSE. There shall be at least two parameters for this command, the name of a relation and the name 
of the key of the relationships whose attributes are to be displayed to the user's tenninal. Any 
problems encountered while displaying the path attributes shall be reported to the user. 


4.4.16.8 List Process Nodes 

This command shall list (display) all Process nodes that are reachable from a given node in 
the SWG APSE. There shall be at least one parameter for this command, the pathname identifying 
the node (which may have a default) from which all Process nodes that are reachable will be 
displayed to the user. Any problems encountered while displaying the Process nodes shall be 
reported to the user. 


4.4.16.9 List Primary Relationships 

This command shall list (display) all the primary relationships emanating from a node in 
the SWG APSE. There shall be at least one parameter for this command, the pathname of a node 
(which may have a default) whose primary relationships are to be displayed to the user’s terminal. 
Any problems encountered while displaying the primary relationships shall be reported to the user. 









4.4.16.10 List Relationships 


This conunand shall list (display) all the primary and secondary relationships cmanaiini: 
from a node in the SWG APSE. There shall be at least one parameter for tins command, the 
identification of a node (which may have a default) whose primary and secondary relationships are 
to be displayed to the user's terminal. Any problems encountered while displaying the relationships 
shall be reported to the user. 


4.4.16.11 List Structural Nodes 

This command shall list (display) all Structural nodes that are reachable from a given node 
in the SWG APSE. There shall be at least one parameter for this command, the pathname 
identifying the node (which may have a default) from which all Structural nodes that are reachable 
will be displayed to the user. Any problems encountered while displaying the Structural nodes shall 
be reported to the user. 


4.4.16.12 List Secondary Relationships 

This command shall list (display) all the secondary relationships emanating from a node in 
the SWG APSE. There shall be at least one parameter for this command, the pathname of a node 
(which may have a default) whose secondary relationships are to be displayed to the user's terminal. 
Any problems encountered while displaying the secondary relationships shall be reported to the 
user. 


4.4.16.13 List Spanning Tree 

This command shall list (display) the Spanning Tree of a node in the SWG APSE. The 
Spanning Tree shall contain all the nodes reachable from the given node by traversing all of its 
primary relationships recursively. There shall be at least one parameter for this command, the 
pathname of a node (which may have a default) whose Spanning Tree is to be displayed to the user's 
terminal. Any problems encountered while displaying the spanning tree shall be reported to the user. 


28 



4.4.16.14 Set Current Node 


This command shall define tlie Current Node for tlie user. All abbreviated patlmamcs, 
following successful execution of this conunand, shall be considered to be relative to the speciheti 
Current Node. At least one parameter must be given witli this commanil. Uie pathname of the node 
that is to become the Current Node for the user. If the patlinamc is valid, then the specifictl node 
shall become the Current Node. Any problems encountered during the execution of this comn:and 
shall be reported to the user and this command shall have no effect. 


4.4.17 Process Control Commands 

In the following list of commands that shall be supported by the NVM Tool, several 
commands create Process nodes. After the panicular process is terminated, NVM shall 
automatically delete the Process node for that process, by default. There shall be a way that the user 
can override this automatic deletion capability for each of these commands. 


4.4.17.1 Activate And Await Process Termination 

This command shall activate a process in the SWG APSE. There shall be at least one 
parameter, the pathname of the Process node whose process is to be activated and whose process 
termination is to be waited upon. Any problems encountered while activating the process or 
awaiting for process termination shall be reported to the user. 


4.4.17.2 Activate Process 

This command shall activate a process in the SWG APSE. There shall be at least one 
parameter, the pathname of the Process node whose process is to be activated. Any problems 
encountered while activating the process shall be reported to the user. 


4.4.17.3 Abort Process 

abort. lprocess_node=> )process_patlmame 

This command shall abort a process in the SWG APSE. There shall be at least one 
parameter, processpathname is the pathname of the Process node whose process is to be aborted. 
Any problems encountered while aborting the process shall be reported to the user. 






4.4.17.4 Await Process Termination 


This command shall await the tcmiinaiion of a process in tlic SWG APSE. There shall be 
at least one parameter, the pathname of tlic Process node whose process tennination is to be waitctl 
upon. Any problems encountered while awaiting process termination .shall be reported to the user. 


4.4.17.5 Append Results 

This command shall append a value to the RESULTS attribute of the NVM Tool's Process 
node. There shall be at least one parameter, the string value (which may be the null string) that is 
appended to the NVM Tool's Process node's RESULTS attribute. Each time that this command is 
given, an additional string value shall be added to the RESULTS attribute of the NVM Tool's 
Process node. Any problems encountered while appending results shall be reported to the user. 


4.4.17.6 Create Job 

This command shall create and activate a new job in the SWG APSE. Creation of a new Job 
implies creation of a new Job node (Root Process node) in the SWG APSE. There shall be at least 
one parameter for this command, the pathname of the Executable Image File node from which to 
get the program that will be the new job. Any problems encountered while creating the Job shall be 
reported to the user. 


4.4.17.7 Create Job Node 

This command shall create a Job node in the SWG APSE, but shall not activate the Job. 
There shall be at least one parameter for this command, the pathname of the Executable Image File 
node from which to get the program that will loaded into the new Job node. Any problems 
encountered while creating the job node shall be reported to the user. 


4.4.17.8 Create Process Node 

This command shall create a Process node in the SWG APSE, but shall not activate the 
process. There shall be at least one parameter for this command, the pathname of the Executable 
Image File node from which to get the program that will loaded into the new Process node. Any 
problems encountered while creating the process node shall be reported to the user. 



4.4.17.9 List Current Status Information of a Process 


This command shall list (display) the values of tlicse attributes which appear on a i-ioccss 
node: TIME_STARTED, T1ME_FIN1SHED. MACH1NE_T1ME, 10_UNIT_C0UNT. 

OPEN_HANDLE_COUNT, and CURRENT_STATUS. Tlicre shall be at least one parameter for 
this command, the pathname of a Process node (which may have a default) in the SWG APSE. The 
value of the CURRENT_STATUS attribute displayed shall be one of the following: CREATED, 
READY, SUSPENDED, COMPLETED_ABNORMALLY, COMPLETED_NORMALLY, 

ABORTED, or TERMINATED. 

The format of the value of the MACH1NE_TIME attribute shall be 
ss .nuran 

where ss is the value of seconds and irnnm is the value of milliseconds. The fonnat of the values 
of the TIME_FINISHED and T1ME_STARTED attributes shall be 

yr/mo/da hh:inm: ss . sss 

where yr is the year, mo is the month, da is the day, hh is the hour, mm is the minutes, and 
ss.sss is the seconds expressed to three decimal places. Any problems encountered while 
displaying the current status of the process shall be reported to the user. 


4.4.17.10 List Priorities 

This command shall list (display), on the user's terminal, the default process priority of the 
NVM Tool, the highest user priority of a process in the SWG APSE, and the lowest user priority of 
a process in the SWG APSE. Any problems encountered while displaying the priorities of the 
process shall be reported to the user. 


4.4.17.11 Set Priority 

This command shall set the (default) priority of the current (enclosing) process in the SWG 
APSE. There shall be at least one parameter for this command, the value of the priority. Any 
problems encountered while setting the priority of the process shall be reported to the user. 


31 






4.4.17.12 Delete Job 


This command shall delete a Job node in the SWG APSE. Tliere shall be at least one 
parameter for tnis command, the pathname of a Job node to be deleted. Any problems encountered 
while deleting the job shall be reported to the user. 


4.4.17.13 List the Parameters of a Process 

This command shall list (display) the value of the PARAMETERS attribute of the NVM 
Tool's Process node on the user's terminal. Any problems encountered while displaying this value 
shall be reported to the user. 


4.4.17.14 List the Results of a Process 

This command shall list (display) the value of the RESULTS attribute of a Process node in 
the SWG APSE. There shall be at least one parameter for this command, the pathname of a Process 
node (which may have a default) whose RESULTS attribute is to be displayed on the user's 
terminal. Any problems encountered while displaying this value shall be reported to the user. 


4.4.17.15 Invoke Process 

inv {file_node=> } ezecutaJble_ijnagre _j>atbname 

This command shall suspend the N’VM Tool and invoke another process in the SWG APSE. 
There shall be at least one parameter for this command, executable imagej)alhname is the 
pathname of an Executable Image File node. NVM shall no longer have control of the user’s 
terminal once NVM invokes the other process. When the invoked process terminates, NVM shall 
once again gain control and notify the user of the pathname, results, and current status of the 
terminated process. When NVM invokes the other process, it shall do so in a manner that the 
Process node shall be deleted automatically upon termination of that process, unless the user has 
indicated otherwise. If the Process node is not deleted, the user can examine attributes on that 
Process node. Any problems encountered while invoking the process shall be reported to the user. 



4.4.17.16 Resume And Await Termination of a process 

This commorui shall resume and await the termination ot a process in tiie SW’G Ai‘.SL. 
There shall be at least one parameter, the patliname of the Process notle whose process is to be 
resumed and whose temiination is to be w^ahcil upon. Any problems encountered while resuming 
the process or awaiting tor prrx'ess temtination shall be reported to die user. 


4.4.17.17 Resume Process 

res {process_node= > ) pTocess_pathxiame 

This command shall resume a process or process tree in die SWG APSE. Tliere shall be at 
least one parameter, process_paihname is the pathname of the Process node w hose process is to be 
resumed, or, the pathname of the Process node that is the root of the process tree to be resumed. Any 
problems encountered while resuming the process shall be reported to the user. 


4.4.17.18 Spawn Process 

spawn { f ile_node’=> } execatable_image_pat]xaame 

This command shall spawn another process in the SWG APSE. There shall be at least one 
parameter for this command, executable jmage_palhname is the pathname of an Executable Image 
File node. NVM shall continue to have control of the user's terminal once NVM spawns the other 
process. When NVM spawns the other process, it shall do so in a manner that the Process node shall 
be deleted automatically upon termination of that process, unless the user has indicated otherwise. 
If the Process node is not deleted, the user can examine attributes on that Process node. Any 
problems encountered while spawning the process shall be reported to the user. 


4.4.17.19 Suspend Process 

susp {process_node=> 1process_pathnajne 

This command shall suspend a process or process tree in the SWG APSE. There shall be at 
least one parameter, process_pathname is the pathname of the Process node whose process is to be 
suspended. Any problems encountered while suspending the process shall be reported to the user. 








4.4.17.20 Write Results 


This command shall write a value to the RESULTS attribute ot the NVM Tool s Process 
node. Tlierc shall be at least one parameter, the string value (which may be a null string) that is 
written to the NVM Tool's Process node’s RESULTS attribute. Each time that this command is 
given. Uk previous value ot the RESULTS attribute is overwritten. Any problems cncountcrcii 
while writing results shall be reported to tlie user. 


4.4.18 Access Control Commands 

The conunands described in the following subsections shall be supported. 


4.4.18.1 Adopt Role 

This command shall adopt a role in the SWG APSE. There shall be at least two parameters, 
a pathname of the group node to be adopted and a key (which may default to the empty key) of a 
secondary ADOPTED_ROLE relationship that will be created from the NVM Tool to that Group 
node. Any problems encountered while adopting the role shall be reported to the user. 


4.4.18.2 Deny Access 

This command shall create a DENY relationship from a node to a Group node. There shall 
be at least two parameters, each specifying a pathname to the aforementioned nodes. Any problems 
encountered while creating the relationship shall be reported to the user. 


4.4.18.3 Delete Deny Relationship 

This command shall delete a DENY relationship from a node to a Group node. There shall 
be at least two parameters, the pathname of the node from which the DENY relationship emanates 
and the pathname of the node to which the DENY relationship terminates. Any problems 
encountered while deleting the relationship shall be reported to the user 









4.4.18.4 Delete Granted Rights 


This command shall delete an ACCESS relationship from a notic to a Group noilc. Tlicrc 
shall be at least two parameters, die pathname of the node from which die ACCESS relationship 
emanates and the pathname of the node to which the ACCESS relationship terminates. Any 
problems encountered while deleting the rclation.ship shall be reponed to the user 


4.4.18.5 Get Granted Rights 

This command shall obtain granted rights. There shall be at least two parameters, the 
pathname of the node (which may have a default) which has grantetl rights and the pathname of the 
group node (which also may have a default) to which the rights have been granted. Any problems 
encountered while obtaining the granted rights shall be reported to the user 


4.4.18.6 Is Approved 

This command shall display an indicadon whether or not the NVM Tool as a subject has an 
approved access right to a node as an object in the SWG APSE and has not been denied access to 
that node. Either TRUE or FALSE shall be displayed at the user's terminal. Any problems 
encountered while determining this shall be reponed to the user 


4.4.18.7 Set Granted Rights 

This command shall create or modify an ACCESS relationship. There shall be at least three 
parameters, the pathname of the node (which may have a default) from which access control 
information is to be set, the pathname of the group node (which may have a default) to which access 
information is to be set, and the list of the access rights to be granted. Any problems encountered 
while creating or modifying the relationship shall be reported to the user 


4.4.18.8 Unadopt Role 

This command shall unadopt a role in the SWG APSE. There shall be at least one 
parameter, the key of the ADOPTED_ROLE relationship to be deleted. Any problems encountered 
while unadopting the role shall be reported to the user 






4.4,19 NVM Utility Commands 


The commands described in the following subsections shall be supported. 


4.4.19.1 Providing help 

The help command shall provide the user with on-line help information, 
help {f rom=> } lfVM_commaiid 

If the above form of the help command is given, then help information for 
NVM command shall be displayed. 

help 

If this form of the help command is given, then the user will be given the opportunity to 
choose from one of the several NVM commands or groups of commands available and help 
information for that particular command shall be displayed. 

In either case, the help command shall place the user into an interactive mode while the 
help text is presented to him^. The help facility shall make use of the CA1S_TERMINAL_10 
facilities in displaying the information for the user. A new Screen shall be opened for the help 
information. This Screen shall be used until the user no longer requires the help information, then 
the Screen shall be removed from the tenninal display. 

The help text shall contain information on all the commands in the NVM Tool and general 
help about NVM itself. 


4.4.19.2 Exiting from NVM 
bye 

This command shall terminate the NVM Tool. NVM shall not allow the bye command to 
be redefined as an alias. However, other user-defined commands, e.g., logout, can be aliased to 
the bye command. When the bye command is processed, the NVM Tool terminates, thus 
terminating any subprocesses. If NVM is the top level process, then the SWG APSE session shall 


5. Only with the CAIS_TERMINAL_IO implementation 






be tcrniinateU and control shall be returned to the host operating system or die calling environment, 
in general, which could be anodier instance ot die NVM Tool or another CAIS process capable of 
invoking processes. 


4.4.19.3 Display date 
dat.e 

This command shall display the current date from the SWG APSE. The date shall be 
retrieved via the CAIS_CALENDAR package and formatted for display. The format of the date 
value shall be 


mon-th day, year 

where montJh is the name of the month spelled out, day is the day of the month, and year is 
the current year. 


4.4,19.4 Display time 
t.lme 

This command shall display the current time from the SWG APSE. The lime shall be 
retrieved via the CAIS_CALENDAR package and formatted for display. The format of the time 
value shall be 


hli:niin:ss zz 


where hh is the hour, inn is the minutes, ss is the seconds, and zz is either AM or PM. 



4.4.19.5 Define Command Name Alias 


alias [ f rom=> 1 user_iia/ne {t.o=> ) existiiigr_name 

This comniancl shall define a command nai7ie alias. Once the user name and existinf^_namc 
parameters have been verified, the alias shall replace any alias currently defined wiili the same 
userjiamt. Tliis ensures Utat a conunand name alias shall refer only to one command at a time. An 
error message .shall be displayed if an attempt is made to retlefine. via an alias, the bye commaml. 

4.4.19.6 Define Pathname Alias 

The user may also alias parameters that are pathnames. At least two parameters must be 
given with this command, an existing pathname and the user's new pathname alias. Once these 
parameters have been verified, the pathname alias shall replace any pathname alias currently 
defined with the same existing pathname. This ensures that a pathname alias shall refer only to one 
pathname at a time. 


4.4.19.7 Delete Command Name Alias 

unalias I from* > J user_naji»e 

This command shall delete the command name alias given by the userjiame parameter. 

4.4.19.8 Delete Pathname Alias 

The user may also delete pathname aliases. At least one parameter must be given with this 
command, a pathname alias. Once the parameter has been verified, the given pathname alias shall 
no longer be in effect. 


4.4.19.9 Display Command Name Aliases 
alias {from* >} usBx_name 

This form of the command shall display the command name alias and the expanded form 
of the alias identified by userjiame on the user’s terminal. 


38 







This form of the commanci shall display all conuiiaml name aliases and their expanded 
forms on the user's terminal. 


4.4.19.10 Display Pathname Aliases 

The user may also display a particular pathname alias and its expanded fonn. The user may 
also display all pathname aliases and their expanded fomis on the user's temiinal. 

4.4.19.11 Execute Host Command 

host. {paraml=> 1 string^i {param2 = > } striiig2 

This command shall pass the parameters string! and string!, concatenated together as one 
string, and which contains a host command, to the host system. 


4.4.19.12 Execute CAIS System Administration Tool 
sysadmin 

This command shall invoke the CAIS System Administration Tool, located in the 
Executable Image File node identified by the pathname given as 
'USEE(TOOLS).SYSTEM_ADMINISTKATION_TOOL. 

The NVM Tool may, within NVM, perform functions defined in the CAIS System 
Administration Tool. 







4.5 Adaptation Requirements 


4.5.1 System Environment 

For the proper functioning of the NVM Tool, several environment tables must be 
established in File nodes. The tables shall be defined for each installation of the SWG APSE. These 
include; 

(!) Help files. 

(2) Function key definition file. 


4.5.2 System Parameters 

NVM shall execute on the SWG APSE. The SWG APSE will be hosted on a DEC VAX/ 
VMS computer system. The initial operating system version shall be 5.1 or later. The SWG APSE 
shall also be rehosted on a SUN/UNIX system. The initial operating system version shall be SunOS 
4.0 or later. Updates to the operating system(s) and the CAIS implementation(s) shall be transparent 
to the NVM user. 


4,53 System Capacities 

The CAIS implementation shall be responsible for determining the usage of primary 
storage (memory) versus secondary storage (disk space) for the node model. 


4.6 Quality Requirements 
4.6.1 Correctness Requirements 

NVM shall be developed in accordance with the requirements detailed in this Software 
Requirements Specification. 





4.6.2 Reliability Requirements 

NVM shall be a reliable tool in tlie SWG APSE. The tolerance for external software errors 
shall be less than one percent. This tolerance shall be based upon die number of errors detected in 
NVM versus the number of NVM commands performed. Failure of NVM shall not afteci the 
integrity of fhe underlying SWG APSE database. At most, failure shall result in the k)ss of ilie 
current working environment. 

To ensure reliability of the tool, the following attributes of .softw'arc shall be considered in 
the design, development, and quality assurance phases of the NVM implementation; 

(1) Accuracy - NVM must function as specified. 

(2) Robustness - NVM must continue to perform despite some violations of the 
assumptions in the specification. 

(3 ) Consistency - there must be traceability of the NVM code to the requirements. 

(4) Completeness - the final NVM Tool must be complete. 

f5) Self-containedness - the NVM software must perform all of its own error checking. 


4.63 Efficiency Requirements 

NVM should be an efficient tool. 

4.6.4 Integrity Requirements 

For reasons of security, it shall be necessary for users of the SWG APSE to have different 
privileges and access rights. Many commands which are needed by every SWG APSE user should 
be restricted to their own environment, e.g., deletion of nodes is necessary but users should only be 
able to delete nodes that they created. 

The NVM Tool shall adhere to the discretionary and mandatory access control mles 
imposed by the CAIS implementation in order to control unauthorized access to the data in the 
SWG APSE database. 

Process nodes created by NVM shall be given the default role associated with the user's 
group node and the adopted roles of any of the groups of which the user is a potential member. This 
scheme shall ensure that processes created for the user have proper access to the user's node 


struaure. 







4.6.5 Usability Requirements 


NVM shall provide a user interface that is easy to learn and use, :mti adaptable to the 
expertise of the user. It shall not be necessary to know how to tailor the environment in order to use 
the NVM Tool effectively. The default environment shall provide all capabilities necessary for 
invoking processes, reporting the status of the SWG APSE database, and manipulating tlie notles in 
the database. However, users of various levels of expertise shall be able to tailor the environment 
as desired. 

On-line help for each command shall be available to the user. The help facility shall provide 
access to infomiation on the NVM commands. This infonnation shall include at least a summary of 
the command's function and the conunand's parameters. Other information may be provided. 


4.6.6 Maintainability Requirements 

NVM shall be maintainable. The availability of documentation, specifications, and source 
code shall be sufficient for NVM maintenance. 


4.6.7 Testability Requirements 

To enable evaluation of the compliance with the NVM Tool requirements, the software test 
environment shall minimally consist of the following: 

(1) A hardware configuration similar to that defined by the SWG APSE requirements. 

(2) The host software as defined by the SWG APSE requirements. 

(3) The CAIS implementation. 

(4) The SWG APSE compiler. 

(5) The SWG APSE linker. 

(6) The NVM Tool. 

The general NVM test requirements shall be as follows: 

(1) The NVM Tool size and execution time shall be measured. 

(2) The NVM Tool shall be tested using nominal, maximum, and erroneous input val¬ 
ues. 

(3) The NVM Tool shall be tested for error detection and proper error recovery, includ¬ 
ing appropriate error messages. 

(4) The NVM Tool shall be tested using input data from an interactive user. 




(5) The facilities of the NVM Tool shall be tested usinji sample NVM Command Lan¬ 
guage scripts. 

(6) All NVM commands shall be tested. 


4.6.8 Flexibility Requirements 

The extensibility of the NVM Tool shall provide a means to enhance NVM. The extension 
shall consist of modifying the source code of the NVM Tool in order to incorporate the new 
commandls). 

Individual users may also extend or enhance NVM through the use of Command aliases. 


4.6.9 Portability Requirements 

The NVM interface to the underlying operating system shall be via the defined SWG CAIS 
implementation. 

The main portability consideration for rehosting NVM shall be the terminals being used on 
the system. The package CAIS_TERMINAL_IO is used by NVM. This package assumes that a 
screen temiinal is present that can correctly interpret ANSI character sequences. 

Minimally, the SWG CAIS implementation, the compiler and the linker must be rehosted 
before NVM may be rehosted. The NVM Tool has a production dependency on the SWG APSE 
compiler and linker. The features of the Ada language which are compiler dependent may impose 
portability issues on the NVM Tool. 


4.6.10 Reusability Requirements 

There are no requirements for reusability. The NVM implementation shall be available in 
order to be part of the NATO SWG APSE. 


4.6.11 Interoperability Requirements 

Interfaces to other SWG APSE tools shall be provided through the SWG CAIS. 


43 



4.7 Other SWG APSE Tool Support 


The ilevelopmem, operation and support of the NVM Tool shall require the hardware and 
software configurations specified in the NATO SWG APSE Requirements. The minimum toolset 
needed for the proper operation of NVM shall be tlie CAIS implementation, the compiler, and the 
linker. 

The development ami support for the NVM Tool shall require a proficiency in ilic Ada 
programming language. 

Documentation on the NVM Tool shall be provided for the support and operation of NVM. 
All documentation relevant to the operation of NVM shall be available on-line through the NVM 
help facility. 


44 





5. QUALinCATlON REQUIREMENTS 


5.1 General Qualification Requirements 

Since the NVM Tool is a prototype, there should not be an essential need for software 
quality assurance. However, software quality assurance should be a part of the implementation of 
the NVM Tool as much as possible. It should be used to prevent problems from occurring, to 
remove defects from NVM, to contribute to the usability and maintainability of the software, and 
to improve the production rate of deliverable code and documentation. 


5^ Special Qualification Requirements 

At least the following shall be tested: 

(1) The NVM Editing Directives. 

(2) Ail NVM Commands identified in the previous Chapter. 

(3) The abbreviated form of a pathname described in this document. 

i) Execution of at least three NVM Commands from the contents of a file node whose 
pathname is given by ' USEE ( usez_name) ' DOT (LOG IN). 


45 








6. PREPARATION FOR DELIVERY 

The NVM source code and documentation shall be deliverctl on a machine readable 
medium. In addition, at least one hardcopy of the Software Requirements Specification and tlic User 
Manual shall be delivered. 


47 






7. NOTES 


7.1 Acronyms 

AD 

AKD 

ANSI 

APSE 

CAIS 

DEC 

DOD 

MOU 

NATO 

NKD 

NKI 

NVM 

RD 

R1 

SRS 

SWG 

VAX 

VMS 


Attribute Definition 

Attribute Kintl Definition 

American National Standards Institute 

Ada Programming Support System 

Common APSE Interface Set 

Digital Equipment Corporation 

Department of Defense 

Memorandum of Understanding 

North Atlantic Treaty Organization 

Node Kind Definition 

Node Kind Interpretation 

Node and View Management Tool 

Relation Definition 

Relation Interpretation 

Software Requirements Specification 

Special Working Group 

Virtual Address Extension 

Virtual Memory System 


49 








Ill 


Appendix A 


SAMPLE INTERACTIVE SESSION 

The following is an example of ilialogue that may occur in an interactive session of the 
NVM Tool. 

Comments below (intlicatetl by comment") are not pan of ilic NVM command. 

They are included for explanation purposes. 

-- alias some commands so they look like 
-- MS-DOS commands 

:USEIl > alias delete deln -- delete node 
:USER > alias type Ifc -- list file contents 
;USER > alias dir Ipr -- list primary relationships 

list the primary relationships below this node 
NVM;USER > dir 

'USER(USER)'DOT(COLORS) 

'USER(USER)'DOT(LOGIN) 

'USER(USER)'JOB(A) 

-- list the contents of a file node 
NVM-.USER > type .colors 

screen main color white blue ptiinaxy_rendition 

screen info color white green bold 

screen info border white green bold 

screen cmds color white blue priroary_rendition 

screen cmds border red blue bold 

screen help color yellow blue priinary_rendition 

screen help border red blue priinary_rendition 




create a new file node 


NVM:USER > crefn file 


-- copy this file node to another one 
NVM:USEE > copy dot(file) 'user(USER).new_file 


-- now list the primary relationships 
-- below the current one 

NVM:DSER > dir 

'USER(USER)'DOT(COLORS) 

'USER(USER)'DOT(FILE) 

'USER(USER)'DOT(LOGIN) 

'USER(USER)'DOT(NEW_FILE) 

'USER(USER)'JOB(A) 


-- list the contents of the newly created node 
NVMrUSER > type dot(new_file) 

[contents of file listed here...] 


-- delete the newly created file node 
NVM;USER > del dot(new_file) 

[the above command could also have been "del .new file"] 




52 





end the NVM session 


NVM;USER 


bye 


53 







Appendix B 


GUIDELINE FOR NVM COMMAND LANGUAGE SYMAX 

The following may be used as a guideline for die syntax of the NVM Commanti Language. 
Lexical categories defined here are found in Appendix D of MIL-STD- 183KA. The notation u.scd is 
a fomi of Backus-Naur Fomi (BNF): 

Words identify syntactic categories. 

[] identify optional items; 

{> identify items which may be repeated zero or more times; 

“I" separates alternatives; and 

separates the left-hand anti right-hand sides of productions. 


NVM_Conimand : ; = coniment._sta'tement. | command_st.at.ement: 

coniment_statement ::= --(graphic_character) 

conTmand_statement ::= NVM_conimand (parametex_associat.ion) 

parameter_associat.ion ::= [formaljparameter =>] actual_parameter 

formal_parameter ::= IdenLifiez 

actual_paramet.er ; : = identifier 
1 integer_literal 
1 string_literal 
I list 
I pathname 
I host_filename 


pathname ::= path_name 





abort 


NVM_coniinand : : = 

I alias 
I bye 
I copyn 
I copyt 
I date 
I deln 
I delt 
I expfc 
I help 
I host 
I impfc 
I inv 
I move 
1 res 
! spawn 
I SUSP 
I sysadmin 
1 time 
j unalias 

1 other_NVM_comroand 
other NVM coiranand ; : = 


identifier 







