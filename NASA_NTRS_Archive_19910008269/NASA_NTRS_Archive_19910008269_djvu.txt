SOFTWARE ENGINEERING LABORATORY SERIES 


SEL-89-008 


PROCEEDINGS OF THE SECOND 
NASA ADA USERS’ SYMPOSIUM 


NOVEMBER 1989 



National Aeronautics and 
Space Administration 


Goddard Space Flight Center 

Greenbelt, Maryland 20771 



SEL-89-008 


PROCEEDINGS OF THE SECOND NASA ADA 
USERS’ SYMPOSIUM 


November 1989 


GODDARD SPACE FLIGHT CENTER 


Greenbelt, Maryland 





FOREWORD 


The Software Engineering Laboratory (SEL) is an organization sponsored by the 
National Aeronautics and Space Administration/Goddard Space Flight Center 
(NASA/GSFC) and created for the purpose of investigating the effectiveness of 
software engineering technologies when applied to the development of applications 
software. The SEL was created in 1977 and has three primary organizational 
members: 

NASA/GSFC, Systems Development Branch 

The University of Maryland, Computer Sciences Department 

Computer Sciences Corporation, Systems Development Operation 

The goals of the SEL are (1) to understand the software development process in 
the GSFC environment; (2) to measure the effect of various methodologies, tools, 
and models on this process; and (3) to identify and then to apply successful devel- 
opment practices. The activities, findings, and recommendations of the SEL are 
recorded in the Software Engineering Laboratory Series, a continuing series of 
reports that include this document. 

Single copies of this document can be obtained by writing to 

Systems Development Branch 
Code 552 

Goddard Space Flight Center 
Greenbelt, Maryland 20771 


ft 

0 61 \ v INTENTION Alii RANI 


5798 


'^PRECEDING PAGE BLANK NOT FILMED 





AGENDA 


SECOND NASA ADA USERS’ SYMPOSIUM 
NASA/GODDARD SPACE FLIGHT CENTER 
BUILDING 8 AUDITORIUM 
NOVEMBER 30, 1989 


Summary of Presentations 

R. Kester (CSC) 

Session 1 

Topic: NASA-Wide Activities 

Session Leader: E. Seidewitz (NASA/GSFC) 

Ada in NASA: Policy and Directions 
F.E. McGarry (NASA/GSFC) 

Ada and the Space Station 

R. Nelson (Space Station Freedom Program Office) 

Software Support Environment (SSE): Program Status 
F. Barnes and D. Badal (Lockheed) 

Session 2 

Topic: Center and Project Activities 

Session Leader: M. Stark (NASA/GSFC) 

Ada in the SEL: Experiences with Operational Ada Projects 
E. Seidewitz and M. Stark (NASA/GSFC) 

The Application of CASE Technology and Structured Analysis to a Real-Time Ada Project 

S. Cohen (GE/STGT) 

Ada at JPL: Experiences and Directions 

T. Fouser (JPL) 

Ada and the OMV Project 
W. Harless (TRW) 


5798 


AGENDA (Cont’d) 


Session 3 

Topic: Space Station Activities 

Session Leader: D. Littman (NASA/GSFC) 

Lessons Learned: Prototyping with Ada for the Space Station Freedom Program 
K. Rogers and L. Ambrose (MITRE) 

Software Support Environment: Architecture and Design Overview 
C. Carmody (PRC/GIS) 

Flight Telerobotic Servicer 
R. LaBaugh (Martin Marietta) 

Lessons Learned in Prototyping the Space Station Remote Manipulator System Control 
Algorithms in Ada 

P. Gacuk (SPAR Aerospace) 

Appendix A - List of Attendees 

Appendix B - Standard Bibliography of SEL Literature 


5798 



SUMMARY OF PRESENTATIONS 


R. Kester, CSC 


5798 





SUMMARY OF THE SECOND NASA ADA USERS’ SYMPOSIUM 


On November 30, 1989, approximately 370 attendees gathered in Building 8 at the 
National Aeronautics and Space Administration (NASA)/Goddard Space Flight 
Center (GSFC) for the Second NASA Ada Users’ Symposium. The symposium 
was created as a forum for NASA centers and contractors to exchange their ideas, 
plans, and experiences in using the Ada language or related methods and tools. It 
is sponsored by NASA/GSFC and hosted by the Goddard Ada Users’ Group. 
Among the audience were representatives from 3 universities, 17 government agen- 
cies, 7 NASA centers, and 75 private corporations and institutions. Eleven papers 
were presented in three sessions: 

• NASA-wide Activities 

• Center and Project Activities 

• Space Station Activities 
SESSION 1 - NASA-WIDE ACTIVITIES 

Ed Seidewitz of GSFC opened the symposium, welcomed attendees, and intro- 
duced the first speaker. The lead-off presentation, “Ada in NASA: Policy and 
Directions,” was given by Frank McGarry, also of GSFC. McGarry described the 
four-step process of formulating NASA policies for Ada: 

1. Assess current capabilities/needs/directions 

2. Conduct an open review of findings/recommendations 

3. Formulate the positions/recommendations of each NASA center/office 

4. Develop an action plan for NASA 

McGarry indicated that the first three steps have been completed. The response 
from NASA contractors has been very supportive of the recommendation that 
NASA adopt Ada, but issues, questions, and considerations were identified. The 
response from NASA centers has been mixed, with four centers supporting an Ada 
mandate, five supporting Ada but without mandate, four uncertain, and three op- 
posed. The primary concerns expressed by NASA are the cost and maturity of 


5798 


R. Kcsler 
CSC 
1 of 7 


Ada technology. McGarry concluded by stating that completion of the NASA ac- 
tion plan has been understandably delayed by a change in NASA administration, 
but that some centers may move ahead and adopt Ada on a center-wide basis. 

The second speaker, Robert Nelson of the Space Station Freedom Program Office, 
provided an update on the current status of the Space Station Freedom program 
and discussed where Ada fits in (“Ada and the Space Station”). Most systems are 
currently reviewing software requirements. A major impact on the program has 
been the reduction in the power budget for the in-orbit portion, which has caused 
reevaluation of the planned software and computer capabilities. 

Nelson discussed the program-level risk management plan and noted that Ada was 
not identified as one of the top 10 risks, although it does appear on the list. An 
object-oriented architecture is evolving and a task team met recently to address 
some overall architectural issues. The current estimate of the total size of space 
station software is 10.5 million source lines of code (SLOC), mostly Ada. Nelson 
pointed to the number of interfaces and to the phased on-orbit assembly as repre- 
senting significant software challenges for the Space Station Freedom program. 

The final speaker in the first session, Frank Barnes of Lockheed, presented “Soft- 
ware Support Environment (SSE): Program Status.” The intent of the SSE is to 
support the management of Space Station software development by NASA and its 
contractors. Barnes described the dissatisfaction of users with the current release 
of SSE. The overhead that results from managing any process, along with the 
immaturity of the current SSE release, account for much of this dissatisfaction. 
Although the final system is scheduled for release in mid-1993, much of its capa- 
bilities are needed now. Barnes described the current user interface as “user- 
surly,” while noting that improvements in this area are planned for August 1990. 
The current release is also manually intensive, a problem that should be addressed 
by January 1991. Barnes summarized the SSE’s major challenges as achieving a 
consensus among its many users, supporting multiple host systems, and providing 
capabilities that match the Space Station development schedule. 


5798 


R. Kester 
CSC 
2 of 7 



SESSION 2 - CENTER AND PROJECT ACTIVITIES 

Ed Seidewitz of NASA/GSFC presented “Ada in the SEL: Experiences with Op- 
erational Ada Projects.” The Software Engineering Laboratory (SEL) develops 
about 15 percent of its software in Ada for systems ranging in size from 68K to 
170K SLOC. The SEL is currently in its fourth generation of Ada projects and 
some trends have been noted. The use of generic packages and user-defined types 
has increased, while the average size of packages and the use of tasks has de- 
creased. Productivity, in statements per day, has been comparable to or lower than 
that typical of FORTRAN projects. However, a strong trend in the latest Ada 
projects toward increased reuse, attributable to Ada and Object-Oriented Design 
(OOD), has had the effect of greatly increasing effective productivity. 

Seidewitz also described the results of a study porting a system from DEC VAX/ 
VMS Ada to Alsys IBM/MVS Ada. The study indicates that even without designing 
for portability, the conversion of Ada code required only half as much time as 
would be expected for an equivalent FORTRAN system. Seidewitz concluded by 
identifying plans for future Ada work, which include a real-time embedded system; 
a large generalized flight dynamics support system; and studies of performance, 
reliability, and maintainability. 

Discussing activities on the Second TDRSS Ground Terminal project (STGT), 
Sara Cohen of General Electric presented “The Application of CASE Technology 
and Structured Analysis to a Real-Time Ada Project.” At the start of the project, 
all engineers and managers were trained in Ada. In addition, the effort was led by 
a core team experienced in Ada, large projects, and ground station development. 
These factors, along with the use of CASE technology, have contributed to the 
success of the project to date. Diagrams have proved an excellent means of com- 
munication among the team and with the customer. A data dictionary helped 
ensure consistent naming among team members. Not only did the CASE tool 
make design updates easier, it performed better consistency checking than would 
have been possible otherwise. 

Cohen concluded by summarizing the benefits of using the CASE tool. The analy- 
sis and design products developed using the CASE tool made up about 80 percent 
of the Software Requirements Specification, which resulted in higher productivity 
than traditionally estimated. During preliminary design, the CASE model evolved 


5798 


R. Kester 
CSC 
3 of 7 


into the software design. The model also served as the basis for the system per- 
formance study and facilitated production of the software test plans. 

Tom Fouser from the Jet Propulsion Laboratory (JPL) presented “Ada at JPL: 
Experiences and Directions.” JPL develops systems for internal research and de- 
velopment and for the Department of Defense, as well 'as for NASA missions. 
Currently JPL is working on a number of Ada projects. When used by Ada experts 
for rapid prototyping, high productivity (18 statements per day) has been achieved. 
Several other projects have seen the early design phases take longer, but anticipate 
that later phases will be shortened. For training, JPL has used a combination of 
in-house courses presented over a period of weeks and intensive courses brought in 
from outside. In addition to development using DEC’S VAX/VMS environment, 
there is an increased use of the Rational development environment. Also, a study 
performed for flight software found some deficiencies in performance and schedul- 
ing, but these have been overcome by using a non-Ada real-time kernel in conjunc- 
tion with an Ada application. 

Fouser observed several common features among the variety of projects using Ada. 
The general approach has been to staff a project with a mix of outside Ada con- 
sultants and in-house management and engineers. In this way the base of trained 
and experienced JPL engineers and managers is growing. Each project generally 
encounters some problems, but finds a satisfactory work-around. More and more 
projects are starting to use Ada; even those initially skeptical are beginning to 
consider it a viable option. 

The last speaker of the morning sessions, Walton Harless of TRW, presented “Ada 
and the OMV Project.” The Orbital Maneuvering Vehicle (OMV) is a remotely 
controlled vehicle that will be used to assist in the launch and retrieval of satellites 
beyond the shuttle s range. The flight segment contains about 14K to 20K SLOC, 
almost exclusively in Ada. The ground system uses a mix of languages, including 
Ada. Although initially proposed in FORTRAN and C, by the time of contract 
award the motivation to use Ada had increased; hence, the flight segment and 
ground system command and control software are being developed in Ada. 

Harless characterized training for the project as including formal on-site training 
for managers, designers, and developers. After an extensive trade study, the 


5798 


R. Kester 
CSC 
4 of 7 



project selected the TLX) VAX-to-1750A cross-development system. Prototyping 
on the TLD system indicated that some Ada features (e.g., tasking, variant re- 
cords, and dynamic storage) were inappropriate for the flight segment. Harless 
described the porting of Ada software between VAX, Alliant, Sun, and PCs as 
relatively painless. However, when attempting to interface between dissimilar sys- 
tems, he noted that tighter control must be used in specifying data representation. 
Harless concluded by stressing the importance of early prototyping with the target 
compiler in order to understand its strengths and weaknesses and thus guide the 
design. 

SESSION 3 - SPACE STATION ACTIVITIES 

Kathy Rogers of MITRE presented “Lessons Learned: Prototyping with Ada for 
the Space Station Freedom Program.” The goal of the prototyping effort was to 
examine human interface factors and gain experience with Ada and OOD. Al- 
though OOD seemed to fit the problem and Ada design well, extra effort was 
required to translate from functional requirements to an OOD and again from the 
OOD to the data flow diagrams that the reviewers felt comfortable with. During 
coding, the project found that Ada’s ability to separate specification from imple- 
mentation facilitated independent development. The parallel evolution of the 
project’s external interfaces, however, caused significant reworking of the simula- 
tion code that was used for testing, a consideration not included in the project 
plans. The project found that DEC’S documentation and technical support were 
weak in interfacing with other languages and operating system services, an area 
where an expert consultant would have helped. Rogers concluded the presentation 
by stating that much was learned on the project, and overall Ada was found to be a 
good tool. 

Next, Cora Carmody of Planning Research Corporation presented “Software Sup- 
port Environment Architecture and Design Overview.” Carmody began by reiterat- 
ing the point made earlier by Barnes that the Space Station SSE must satisfy the 
often conflicting needs of creating a long-term, lower cost life-cycle and supporting 
immediate user needs in a variety of environments. The current design, based on 
stable standard interfaces, represents this balance. The architecture utilizes an 
object specification-driven definition of life-cycle products and processes. 


5798 


R. Kester 
CSC 
5 of 7 


The architecture is divided into four layers: Common User Interface Services, 
Environment Applications, Process/Object Management, and Platform. The Com- 
mon User Interface Services provides both a graphical and a textual command 
interface. The Environment Applications layer provides the real tools from the 
user’s viewpoint. The Process/Object Management layer provides access control, 
and the Platform layer implements a virtual machine that insulates the higher lev- 
els from the host system implementation. For performance reasons, the upper 
layers may bypass intermediate layers and use the Platform layer directly. 

Carmody summarized the benefits of the object-oriented approach as reduction of 
life-cycle costs (by encouraging reuse and reducing maintenance costs) and en- 
hanced system integrity and security. 

Robert LaBaugh from Martin Marietta spoke next on their experiences developing 
Ada software for the “Flight Telerobotic Servicer.” The Flight Telerobotic Ser- 
vicer (FTS) is a sophisticated robot that will be able to perform remote servicing 
tasks controlled from the Space Station. The current estimate is that 224K SLOC 
will be developed for the FTS, entirely in Ada. The flight software represents the 
most significant category of code and will be implemented on a distributed system 
of 22 Intel 80386 microprocessors that control the motion of the robot in real time. 
The project is using the DDC-I Ada Compiler for 80386 protected mode, which 
allows full use of the 32-bit architecture. The flight software will run without any 
operating system, using the Ada run-time system to support interrupt handling, 
low-level I/O, tasking, and memory management. 

LaBaugh stated that to date, their prototyping efforts have not uncovered any defi- 
ciencies in the Ada run-time system that preclude its use for real-time robotic 
control. LaBaugh closed by presenting the results of performance benchmarks on 
various control algorithms and matrix operations. 

The final speaker of the symposium, Pete Gacuk of SPAR Aerospace, presented 
“Lessons Learned in Prototyping the Space Station Remote Manipulator System 
Control Algorithms in Ada.” The Space Station Remote Manipulator System will 
be an advanced descendant of the space shuttle robot arm. The multiple goals of 
the prototyping effort examined issues related to life-cycle, methodologies, Ada 
development, technical communications, Ada performance, and configuration 


5798 


R. Kesler 
CSC 
6 of 7 



management. Rather than use an informal or shortened life-cycle, the prototype 
effort used a full life-cycle with formal reviews and participation by product assur- 
ance and configuration management personnel in order to better represent the 
production environment and broaden the organization’s experience. 

Gacuk stated that the project adopted a hybrid methodology (a combination of 
NASA/GSFC GOOD and Booch OOD), as this provided a transition from struc- 
tured analysis to OOD. They found that typical Ada and OOD diagrams did not 
provide a good basis for communications between software developers and hard- 
ware engineers or testers, but that multiple notations (data flows, Booch-grams, 
withing diagrams, tasking diagrams, timing diagrams, state diagrams, and excep- 
tion diagrams) were needed to represent different aspects and to provide interdisci- 
plinary communications. The initial performance of the prototype was 
disappointing; however, after profiling and some recoding, the desired perform- 
ance was achieved. 

Gacuk concluded by presenting some “lessons learned about lessons learned.” 
First, good notes are needed throughout the process in order to document lessons 
learned. Second, the conclusions reached are likely to change during the process 
as you learn more. Third, lessons learned should be “stale dated,” as they often 
lose their value over time. Finally, without champions who continue to present and 
push lessons learned, the lessons often go unlearned. 


5798 


R. Kester 
CSC 
7 of 7 





SESSION 1 - NASA WIDE ACTIVITIES 
Session Leader: E. Seidewitz, NASA/GSFC 


Ada in NASA: Policy and Directions 
F.E. McGarry 

Ada and the Space Station 
R. Nelson 

Software Support Environment (SSE): Program Status 
F. Barnes and D. Badal 


5798 






“ADA IN NASA: POLICY AND DIRECTIONS” 


F. McGarry, NASA/GSFC 







NOVEMBER 30, 1989 



5 ° 

< Li- 
es 0) 
o O 

^ 0 ) 

z < 

< 2 

£E 


F. MeGarry 
NASA/GSFC 
1 of 20 


K217.001 




STEPS IN FORMULATING NASA POLICIES FOR Ada 


Q 

CQ 


CO > 
Q < 3 
LU O 
HI -I 

z o 

CO x 

s a 


< co 

S 5 
3 9 
o s 

z o 

x i- 

9 o 


a § 

LU LU 

n 

o 5 

CC ^ 

< 9 k 

LU Q 

Z iu 
u. > 

LU LU 
Q Q 


vj —a 

z < 

0 CC 

g o 

I J 

LU £ CO 

1 I 

8o| 

£ 5 o 

5 LU < 
CO O CO 

o < < 

Z CL Z 
^ CO 

Q o j 

p cc < 

11 LU v 

li_ < m 
O LL 7 

S ? Q 
w £ co 
> lu co 

LU p> 3 

cc iu o 

-7 CC CO 


^ Zi LU 
H- O CL 
O CO O 

— ' I I 


LU 

O CO 

5 Q 
2 % 

5 3 

5 5 

6 £ 


UJ 

I- 

Z O 
iu LU 

2 w 
CO UJ 
CO > 
LU p 
CO B 
w o 

LU 


1 8 

1 § 

2 < 

B© 


LU — 

o o 


S s 
2 2 
b LU 

CO cc 


< UJ 

? 2 

cc ^ 

P o 

z 9 

I- £ 


£ 0 

CC CL 

CC CO 
< LU 

o cc 


< 

CO 

i© 

£ © 


o O 

H Q 
O LU 
< CO 

CL < 


F. McGarry 
NASA/GSFC 
2 of 20 



INTERNAL NASA STUDY 


uj 

< CD 

CO < 

tu z 
x < 
£ 2 

m £ 

i£ S 

a § 

— LU 

o cc 

§ 8 

8 8 

__ Q_ 


< 5 

CO 2 

< CO 
2 CO 
-=* LU 
g CO 

CD ^5 


LU -J 
CO O 

< z 

CD x 
LU O 

o w 
z *- 

£ CO 

Q_ < 

x A 

LU O 
Q CO 

< § 

LU < 

cd 5 

Q o 

n ^ 
O < 


m £ 

RS 


< -> 
LU CL 


lu y 

2 LU 
ll > 
LU UJ 

a o 


t 2 


S LU 

LU CD 

_J < 

0- Z 

O ^ 

O LU 

CO 5 

1- ^ 

CC ^ 

o Ft 

a. t 
lu O 
tr co 

CVJ Q 

->z 

0> <r 

co *** 

CD 03 
TD 

x" 
o * 
cc 
< 


z 03 

28 


§§ 
O > 
UJ UJ 

* < 

Q CO 

z < 
< z 


3 

=! O 
O ll. 

li 

Q CO 


O W 

^ UJ 
CD -I 
Z 3 

x o 

lu lu 

~ x 


CD 

co !=: 

cd h- 


F. McGarry 
NASA/GSFC 
3 of 20 


K217.003 


FINDINGS* OF ASMAWG 


LU 2 
X LU 
3 C 3 
CO < 


LU — 

_J o 

|3 

X 1X1 

CO w 


w < 


< CO 
CO ^ 

< f= 

^z 

x O 

KO 

| 2 i 

CL h- 

x O 
x x 
x x 

< 3 


LU W 
h- X 

< X 
3 3 
O O 
LU 

g C 

< LU 


CO t 
2 2 
< 5 

X z 

o < 

o o 

X LU 
X CO 

2 m 


< z 

X LU 

£ ffi 

m x 

X LU 

gc co 

3 5 


X O > 

o?o 

flES 

|li 

LU ^ 5 

3*0: 

y £o 

3 |_l 
X CO ^ 


§3 


< O 
CO ^ 

< z 


Q — 1 
LU CO 

5 Q 

< X 
X < 
LU Q 
DC Z 

9= < 


co ^ m 


CD h- 


F. McGarry 
NASA/GSFC 
4 of 20 


REFERENCE: “Ada AND SOFTWARE MANAGEMENT IN NASA - ASSESSMENT AND RECOMMENDATIONS” (4/89) 



RECOMMENDATIONS* OF ASMAWG 


C O CO 


CO 

cc 

LU 

> 

< Q 


< O 

DC CC 
CL LL 

O z: 

cc dc 

8tS5 


LU &- 
Q (3 


2 < 

CC DC 


o; 

< hi 


cc O 
lu co 

§ LU 

f § 


O to 
I— "O 

ii 

0, n 


3 DC 
I- LU 
DC LU 
O Z 


co m 
I < 


§£ 
O LU 
. Q 


* 2 
CO < 

< cc 
»- o 

0 O 

z £F 

DC Q_ 
LU CD 
LU Z 


$ < 

LU (E 

CO LU 
CO Q 
LU g 

2 < 

£ 3 

LU Z 


CD UL LL m 
<00 =J 

LU . • _ 


LU X 

L o 

g< 

O LU 

S- ^ 

HI 

Q cc 


O co 

2 CO 

s => 
o O 
o o 

CL ^ 

s§ 

£ £ 
LU X 
Q LU 


CO 


lO CO I s - 00 05 


F. McGarry 
NASA/GSFC 
5 of 20 


REFERENCE: “Ada AND SOFTWARE MANAGEMENT IN NASA - ASSESSMENT AND RECOMMENDATIONS" (4/89) 


MISSION SOFTWARE* 


2 

*5. 

^ 

§ *c 

P ^ Q 
k u. 2 
-j O ■< 

fees 

QC co 5 

O uj £ 

CO ^ O 

r~ 5 co 

s°fc 

r -C 

(= o 2 

Uj QC rJ 
QC P- ^ 


si 

Uj 

K S 

£ i- 

gp 

§8* 

£ 

O 


g 


£ 


QC 

O 


Uj 

O 


n~. — 

^ ^ ~J 
>0-1 
O ^ 


O <f uj 

CO o CO 

CO UJ o 

uj o ° 

5 .fc 

^ CD 

gg^ 

o i ^ 

2 3 3 

g a! Q: 

n o. 

^ K 

r r* *w 


>. 
uj O 

QC CL 

Q ^ 
K O 

? £5 

rs co 


Uj 

QC 

s: 


u. 

O 

co 


Go < K- 

CO CD 3: 
§ CO CD 

■*= uj ^3 

■ . 


i 

O 

QC 


1 

Q uj CD O co oZ 


K 

o 

£ 

Q 

-u 

CD 

o 

o 

QC 


K- 

Co 

i±f 

QC 

O 


§ 

§ 


Uj 

. £ 
-J $ 

O ^ 

^ £ t 

S ^ o 
£ o 

Uj o ^1 

P- . -j 

^ CD ^ 

| uT 


§ 

oc 

8 

£ 

§ 

O 


Uj 

QC 

s: 


u. 

O 


8 

§ 

Q 

S 

QC 

k> _r 

CC Uj 
CD O 

i i 

§ 1 * 

33 

o § 

QC ^ 

P- co 

11 

O co 

Co ° 
co Uj 

§ oc 

GO ^ 

o t 

^ O 

^ CO 

§ -J 

>r -J 

Q 

t f° 

3: uj 
CD Q 


CD" 


2 


F. McGarry 
NASA/GSFC 
6 of 20 


MS DEFINED BY THE ASMAWG 



REVIEW FINDINGS AND RECOMMENDATIONS* 



LU 

O 

< 

CL 

CO 

O 

cc 

LU 

< 

Q 

< 

CO 

LU 

O 

LL 

LL 

O 

CO 

cn 

LU 


LU 

o 

< 

CO 

< 


< 

o 

I- 

CO 

z cc 

LU O 
CO p 

CO O 
< 
cc 


cc 

o 

CL 

LU 

CC 


LU 

□ 


LU 

> 

LU 
CC 

o 

h- 

Q 
LU 

CO 

< 

CO 

o 

I- 
< 
cc 

o 

CL 
CC CO 
O LU 

O cc 

LU LU 

O cc 


O 

O 


< 

CL 
CO 

o 

cc 

LU 

< 

00 < 


< 

CL 

LU 

QC 

CL 


3 

CC 

O O 

LL LL 


Q 


LU 

CO 

z 

o 

CL 


CC 

o 


CO 

CL 

LU 

CC 


CO 

0 


I- < 


< 

<r “ 

o 

1- 

LU 

Z 

3 

o 


LU 


* 

0 

0 

< 


0 


z 

o 

Q 

_l 


LU 

s 

I 

z. 


< 

3 

0 

0 


CC 


CO 


o 

CL 


CO > 
<£ CO 


O £ 

RF 2 


LU 

CL 

O 


< 

CO 

< 


CO 0 

o ^ 
£2 


LU 

0 0 
LU LU 
LU CC 
Q 0- 


LU 

£ 

O 

o 

CM 


O 

0 

0 

3 

O 

0 

Q 




CC 

O 


LU 
Cl 
go O 


h~~ 

o 

o 

h- 


F. McGarry 
NASA/GSFC 
7 of 20 


REFERENCE: “Ada AND SOFTWARE MANAGEMENT IN NASA: SYMPOSIUM/FORUM” (6/89) 



Ada SOFTWARE MANAGEMENT IN NASA 


Z C I U 
5 O CD 

^ £ £ 
> * ^ 


< => 

CC “D 


^ O 

Q -D 


X 


o 

o 


H 

5 

O 

_l 

0 

2 

o 

LU 


_i 

U_ 

21 

_i 


Z 

o 

LU 

LU 

X 

Z 

_l 

LU 

LL 

H 


LL 

Z 


LU 

LU 

2 

“D 

* 


CO 




Q 




1— 




_i 




z 

< 

Q_ 

CO 



LU 



O 

LU 

LU 

O 

LU 






X 

I— 
c c 

X 

0 


O 

o 

Q 

5 

LU 

o 

< 

D 

2 

CO 

O 

X 

o 

CL 

X 

CD 

O 


h- 

0 

_J 


F. McGarry 
NASA/GSFC 
8 of 20 


BOEING WELDON JACKSON 



NASA FORUM/SYMPOSIUM 
INDUSTRY PERSPECTIVE ® 


cc 

O 


tr 

< 

co 

CO LLI 

gs 


cc 

O 

CL 

CL 

3 

CO 


< 

CC 

LLI 

> 

o 

(3 

O 

cc 

I — 
CO 


CO 

CL 

3 

LU 

> 

LU 

O 


CO 

LU 

> 


LU 

O 


CC 

O 


CO O 

■Q < 


< 

LU 

< 

Q 


CC 

I- 

z 

o 

o 


< o 


o- 

LU 

< 

Q CO 
Z Q 

< 5 
■q < 


< 

O 

l- 

LU 

3 

o 

> 

LU 


CO S : 
> CC § 
z LU 

gO[D 


CO 

LU 

O 

3 

D 

O 

CC 

Q_ 


w uj 

F o Q 

§ CQ ^ 

CO < jr 1 
O X ^ 
0 0-5 
050 

LL LU O 


0 


CO 

Q 

CC 

< 

Q 

Z 

< 

h- 


cc 

O 

Q_ 
CL 
- 3 

CO CO 


< 

cc 

I- 

LU 


Q 

z 

< 

CO 

T 3 

< 

LU 

<C 

Q 


^ p" 

“ CC 
O 


< 

cc 

LU 

z 

LU 

O 

o 

z 

o 

CC 


^ I — 
2 CO 


Q 

CC 

o 

O 

O 

LU 

£ 

o 

Q 

£ 

O 


o 

< 

cc 

h- 

z 

O 

O 

I 

< 

CO 

< 


• • 


CO 

LU 

X 


o 


o 

3 


CO 

X 

CD 

o 

• 

• 

• 


CO = 

§S 

x u_ 

O LL 

H iu 

30 
O o 

CO Q 

<7 

Q 
LU 


CC 

LU 

O 

O 

O 


O 

UJ 

O 

< 

cc 

UJ 

> 

LU 


CO 

5 

(3 

3 

O 

Q 


UJ 


O 

O 

O 


s? 


F. McGarry 
NASA/GSFC 
9 of 20 


...IN GENERAL SUPPORTS... 



NASA FORUM/SYMPOSIUM 
INDUSTRY PERSPECTIVE ® 


LU 


O 

DC 

> 


CD 

< 

> 

Q 

Z 

< 

CO 


< 

o 


LU 

dc 

3 

\— 

O 

3 

GC 

I- 

CO 

CO 

Q 

CC 

< 

Q 


CO 

To 

■o 

< 


m ^ 

ZclO 
O ^ i= 


OO 

Oco 

si 

CO CO 
3UJ 

°2 

o o 


CO _ 

of 

°-3 

Oco 

y= o 

os= 

LU 2 
CL >- 
CO CO 


z 

o 


o 

o 

CO 
Q 
dc 
< 
Q 
Z 
< 
I — 
CO 

CL 

O 

LU 

> 

LU 

Q 

To 

TJ 

< 

LU 

Q 


I— 

Z 

LU 

2 

LU 

CO 

CC 

O 

Q 

z 

LU 


LU 


LU 

CO 

< 

CO 


LU 

z 

O 

DC 

> 


< 

lu w 
> < 
Ox 

O co 


< Z H 
2 LU 


5<M 
CC LU 
CO 
CO 3 


LU 

O 

O 


LU 


LU 

o 

O 


c^- 

c 

CO 

LU 

o 

CC 

O 


CO 

< 


LU 


oQ _ 

5s 2 


LU 

> 

1— 

O 

LU 

CL 


< 

DC 

tr 

DC 

o 


CO LL 
DC 


LU 

CL 

LU 

CO 

CO 


DC 

O 

CL 

CL 

3 

CO 

O 

z 

o 

DC 


o 

i — 
QC 
< 

b CC 
< h- 
O CO 

LU Q 
2Z 


Q 
LU 
CO 

< t— 

CD CO 


O 

O 

LU 

CC 


CO 

LU 

O 

O 


£ 

DC 


Q 

LU 

LU 


LU 

(D 


O 

O 


F. McGarry 
NASA/GSFC 
10 of 20 


• BOEING • STRONG OVERALL SUPPORT 

• NO INCENTIVES SHOULD BE NECESSARY 

• IMPACT ON BOEING WOULD BE POSITIVE 



NASA FORUM/SYMPOSIUM 
NASA COMMENTS 0 


CO 


LU 3 


< ^ 
DC LU 
LU ^ 


or- -y 


LU 

CO 

3 

< 

O 



^ CO 

2 z 

iZQ 

00 T 

O CQ 

o o 


CO 

z 

O 

Q 

Z 

LU 


LU 

0 

< 


LU 

0 

3 

LU 

cc 

LU 

GO 


DC 

O 

CL 

CL 

3 

0 

> 


0 

O 

o 
o 

Q 

0 W 


$ 

Q 

< 

a) 

"D 

< 

LL 

o 


o 
o 

S|8i 

S5 


0 

0 

o 

O 

LL 

0 

LU 

> 


< 
DC 
I — 
0 


LU 

O 


a 

O LU 

y lu 
i= z 


o 

a 

z 

LU 


< 

H 


LU 

2 0 
O LU 

O LU 
LU O 
CC DC 

H ° 

< u ' 

JC0 

O < 

LL I- 

oE 

CL 
CL 

0 

0 

Z 

o 

DC ^ 
I- LU 

0 O 


Q 

LU 

N 

_l 

< 

DC 

h- 



F. McGarry 
NASA/GSFC 
11 of 20 


IMPLEMENTATION SHOULD BE ACCELERATED 



NASA FORUM/SYMPOSIUM 
NASA COMMENTS © 


CL 

O 


□ (/) LU 
Z — LU 
< Z ^ 




Q 

< 

O 

GC 

CO 

O 

O 

F- 

CO 


CL 

LU 

O 

O 

O 

LU 

CO 

CO 


CO 

p 

CO 

o 

CO 

cti 

T3 

< 

LU 

< 

Q 


O 

Q 


LU 

0 


LU 


Q 


CO 




> 

o 

LU 


LU 

* 


CL 

Q_ 



O 

Q 


2 


F. McGarry 
NASA/GSFC 
12 of 20 


• 0S0 (CARRO) • PROPOSED TRANSITION TO Ada TOO LONG 

• NEED COST STUDY AND COST CONTROL 



NASA FORUM/SYMPOSIUM 






o 

o 

< 

(/> 

< 



0 


LJU 


CC 

LLJ 

LU 


< 

Q ( 3 

< LU 
^ LU 

o 5 

H < 


CO 
I — 
CO 

o 

o 


LU 

82 

5 $ 

z ^ 

< CO 


LU 

Q 


co <° < 

> o 2 

LU Tj -§ 
Z < 

O 2 O 
z z z 




CO 

< 

o 



2 


F. McGarry 
NASA/GSFC 
13 of 20 


• LEWIS (SCHUBERT) • CONCERN FOR COSTS 

• “MANDATE” WILL RECEIVE RESISTANCE 



PREPARE “OFFICIAL” CENTER/OFFICE RESPONSES © 



Q 

DC 

< 

O 


Q 

o 

o 

o 

CO 




CO 


So 


LU 


QC 

o 

CL 
CL 

3 _ 
CO DC 


CL 

O 


CO 

o 

DC 


= LU 


LU tL 

O-o^ 
CO < I] 


CO 

DC 

LU 


h“ 

DC 

O 

CL 

CL 

3 

CO 

Q 


LU 

LU 

LU 

DC 

0 

< 


3 

Li- 


CC 

~o 

< 

LU 

< 

Q 


O 

I — 
CL 
LU 

O 

X 

LU 

LU 

N 


CO 

LU 

O 

DC 

o 

LL 

* 

CO 


< 

X 

I- 

LU 

DC 

o 


< Q 
LU LU 
DC LU 


LU 


LU 


LU < 
LU Q 
OC 2 
0 < 
< 2 
q r 


LU 

O LU 

i-o 


CO 

LU 

> 

I— 


< S o 


uj 
dc 

LU 



CC 

O 

CL 

CL 

3 

CO 


Q 

< 



LU 

UJ 

DC 

0 

< 




O 

h- 

£! 


F. MeGarry 
NASA/GSFC 
14 of 20 


(MANDATE Ada + ) 

• MUST SUPPORT STRONG CENTRAL OFFICE (HQ) 



OFFICIAL” CENTER/OFFICE RESPONSES ® 


CD LU 
co CD 


£ Q 

O lu 
CD Z 


rS UJ 
° O 
c\j q: 
— Li- 

hfiO 

nr LU 

8|S 

a. 2 z 

□ So 

C/)D U 
I CO co 

CC > < 
LU > X 
z ^ a. 
LU > 2 

O CO LU 


CD o 

.. < 


>“ 

LU 

_l 

CD 

Z 

CD 

£ 

_l 

< 

X 

CD 

CC 

5 

LU 

_J 


• 

• 

• 


F. McGarry 
NASA/GSFC 
15 of 20 


STENNIS • FULL AGREEMENT AND SUPPORT 

• EXTEND SCOPE OF Ada USE BEYOND “MISSION SOFTWARE 



OFFICIAL” CENTER/OFFICE RESPONSES (jE> 


DO 
U. Z 


uu 

DC 

eg 

< 2 o 

CO LU 
ID LU 

< z 


LU O 

b° 

q LU 
9 DC 

<< 

Zr 

< LU 
I— 0 
O < 


o 

: LU 
UJ ^ 
O O 

< SF 

DC CL 

2ir 


F. McGarry 
NASA/GSFC 
16 of 20 


NO INDICATION OF SUPPORT OR AGREEMENT 



OFFICIAL” CENTER/OFFICE RESPONSES © 
(CENTER/OFFICE LETTERS) 


O 

LU * 

Q 


CO 

U 

< 

LU 

*< 

Q 

Z 

< 


LU 


O 

o 

LU 

DC 

LL 

O 

O 


DC 

O 

CL 


LU 

DC 

Z> 


LU 

DC 

CL 


LU 

O 

O 

O 

DC 

Q. 


CO 

LU 

CD 

< 

CD 


Q 

DC 

< 

Q 


CO 

Q 

LU 

Q 

LU 


O 

O 

LU 

DC 


CO 

Q 

DC 

< 

O > 

z 5 
< < 
I — CO 
CO CO 
1 1 1 LU 

ij o 

CD LU 

< Z 

X |_ 

O o 


DC 

o 

CL 

CL 


CO 

LU 

> 

H 

LU 

o 


o 

CO 

o 

LU 

o 

< 

LU 

< 


OC 

LU 

0 

< 


LU 

< 

Q 


CO 

■D 

< 


CO ±: 


O 

LU 

— D 

o 

DC 

CL 

X 

o 

< 

LU 


LU 

CD 

< 

CD 


LU 

CO 

H* 

OC 

O 

CL 

Q_ 

CO 

o 

H 

LU 

o 

LL 

LL 

O 

0 

X 

X 

o 

LL 

H" 

X 

O 

X 

X 


<j CO 
LU ^ 

fo 

x 


^Oco 


CO 

LU 

X 

LU 

h- 


< 

X 

LU 

Z 

LU 

CD 



< 

X 

CO 

CO 

CO 

O 

o 


LU 

• 

• 


CO 

CO 


o 


CO 


o 

2 


F. McGarry 
NASA/GSFC 
17 of 20 


• B/D/H/L/X • NOT APPLICABLE 



RESPONSE SUMMARY 


>- 

cc 

< 

CO 

CO & 

qlu 

CC o 
< HI 

Q Z 


CO 
CC LU 

< CO 
CO o 

S3 

Q x 

< o 

Q LU 


O cQ 

5 < 

f£ 

cotfj 

<r lu 

cc o 
co 
Q 

u _5 


CO > 
Z> Q 

qP 


rS LU 

O cc 
5 <C 


CO LU 

<I>] 

m < cc 

2? LU LU 

See CO 

< H ^ 
CO CO CC 
< < LU 
Z I > 


F. MeGatry 
NASA/GSFC 
18 of 20 


• MATURITY 

• INERTIA 



DEVELOP NASA ACTION PLAN 




F. McGarry 
NASA/GSFC 
19 of 20 


K217.019 



Ada IN NASA - POLICY AND DIRECTIONS 


(/) 




LU 

O 


JJf Q 

‘ ' LU 


Ll3 


l — o 

LU O 

£ co 

O Si 

I H 

O CO 

0- rf - 
(0 Li_ 

2 2 
o *? 


CO 


> 


5 


LU 


Q 


UJ 


_J 


CO 


< 


Q 


z 


< 


1 — 


CO 


X 


LU 


Q 


z 


3 


UJ 

2 

O 

Q 

X 

5 

UJ 

CO 

> 

o 

LU 

LU 

X 

CO 

CD 

< 

Z 

O 

lu 

CO 

cn 

< 

co 

X 

_j 

LU 

o 

CD 

z 

z 

3 

< 

O 

T 

o 

o 

X 

z 

O 

o 

UJ 


X 

< 

3 

X 

\— 

F- 

O 

CO 

3 

z 

X 


|— 


CO 

o 

1 

< 



i 


cd 

-o 

< 


CO 

-O 

< 


CD 


z 

UJ 


o 

o 


X 

Q 

LU 

CO 

o 

X 

o 

x 

X 

UJ 

X 

CO 

x 

LU 


UJ 

O 

< 

CO 

< 


o 

o 

CO 
I — 

o 

LU 

”3 

o 

cc 

X 

u 

< 

z 

o 

K 

Q 

Q 

< 

? 

LU 

LL 

LU 

2 

8 

iu o 

UJ r 
-r LU 


CO 

CO 

< 

CD 

X 

UJ 


UJ 

O 


LU 

CO 


3 

I- 

Z 

UJ 

O 

2 

LU 

o 

co 


c 

CO 

UJ 

o 


o 

X 

3 


CO CD 

2 1 
CD ^ 


X 

O 

X 

X 

O 

£ 

go 

co 

co 

O 

x 


F. McGarry 
NASA/GSFC 
20 of 20 


K2 17.020 



“ADA AND THE SPACE STATION” 


R. Nelson, Space Station Freedom Program Office 






R. Nelson 

Space Station Freedom 
Program Office 
1 of 20 




(0 

a> 

c 

o 

+* 

(0 

a> 


0) 

S 



c 

o 


CO 

c 

0) 

C/> 

CD 

Ol 


eg 

w 

O 

> 

O 

w 

3 

CD 

25 


E 


(0 


O) 

o 

CL 


(/) 

O 

« w 
IM 
> 

o 

< 



V) 

£ 

0) 

> 

o 

cc 

e/> 

c 

a> 

E 

© 

3 

O’ 

<D 

CC 


O 

(/) 




fc 

eg 

3) 

H 


(0 

eo 

H 


0) 


3 

** 

a 

a> 


x: 

o 

Nn 


< 


I 


c 

o 

M 

o 



*o 

c 

(0 

c 

o 


(0 

O) 

Q 

** 

£ 


£ 

O 


E 


a> 

O) 

(0 

c 

(0 


Cf) 

■ ■M 

CC 


U) 

c 


o 

(0 

H 


CO 

o 


<>>* 

a> 



CO 

o 

■r*» 

■3 

3 

o 


co 

o 

>» 

CO 

c 

< 

CO 

■o 

< 


I I I I 


R. Nelson 

Space Station Freedom 
Program Office 
2 of 20 


BN/GSFC 11/30/89 






m 



66 AO 

-Q. 

-3 

< 

“3 

© 

r- <5 

O) O) 

S 

> 

o 

n 

El 

El 

| 4 © i 

CY 97 

■SI 

El 

S| i©*i 

^ S tn q o __LL_co 

96 AO 

_£L 

“3 

< 

* i s 8 ? 8 8 S S~ 

CT) • S’ jP , != O 2 UJ 32 

w & * . 3 • c co 2 q Z ^ ^ 

1 5 ? 9 ; S ^ 5 < a S© = 

CY 95 

■51 

El 

El 

- tr o n « O ff J S? n 3 

? 1 s *l sS i fc ©© * 

!.°i § ft f loGG 0 

CY 94 

n 

El 

S! o' 8 

He©® 6 ® 

CY 93 

■51 

El 

§ » 
f i© 

CY 92 

n 

El 

3 & 

e© 

CY91 

_a 

< 

—i 

Q. 

LL 

8 

^ 

06 AO 

la 

-3 

< 

“3 


CY 69 

■51 

El 

Ml 

QC 

Ql 

i 

fc 

CY 88 

_a 

“3 

< 

“3 

® 1 

— * !E °_5_ 

Program Milestones 

Program Requirements Review 
Preliminary Design Review 
Critical Design Review 
SSF Training Facility ORD 
SSF Control Center ORD 
Design Certification Review 
Operations Readiness Review (ORF 
SSF Processing Facility ORD 
First Right Hardware Delivery (FFHC 
Payload Training Complex ORD 
First Right Readiness Review (FFRF 
First Element Launch (FEL) 

FTS Availability 

F>rogram Operation Integration Cent 
Canadian Mobile Servicing Center 
Early Man-Tended Capability 
Permanently Manned Capability (Phr 
Japanese Experimental Module (JEI 
Attached Pressurized Module (ESA) 
Assembly Complete 


R. Nelson 

Space Station Freedom 
Program Office 
3 of 20 


SSFPO 342 

1 1/07/M M/AK 990 M0 1 007 

















BASELINE DOCUMENTS 


CO 

UJ 

o 

_j 

o 

Q. 

I- 

z 

UJ 

2 

UJ 

O 

< 


Q 

X 

Q 

0. 


UJ 

3 

O 

o 

Q 

CO 

h- 

Z 

UJ 

2 

UJ 

X 

3 

O 

UJ 

x 

z 

o 

co 

UJ 

Q 

< 

DC 

O 

O 

OC 

CL 


(0 

Q 

O 

2 ® 
Z tf) 
UJ > 

s 00 

O fl> 

O D 

o A 


V CO 

SE3 

o « 

UJ • 
OC }r 
3 ° 
I- 

O 0 > 


UJ 

H 

X 

o 

X 

< 


c 

o 


UJ ^ 
■» ® 
5 o) 

7 ? ® 

O .£ 

O g 

c/) _ 


UJ £ 
x O 
5 

X a> 
O 

uj g 
x *2 

S o 

UJ C 

I- O 

CO '— 

> 

CO 


_co 

UJ 

o ^ 

z S 

O E 

F * 

< 0) 

2-a 
x c 

O a 

111 E 

o. g 

co £ 

co 

S > 
IS ® 
K £ 

Q CO 
Z ® 
UJ 

1-2 

<g 

Eo 


o 

o 


<71 

CO 


o 

o 

o 

z 

UJ 


CO 

CO 

X 

CO 

CO 


< 

o 

LL 

o 

UJ 

a. 

co 

co 


UJ 

2 

UJ 

X 

3 

o 

UJ 

X 

UJ 

X 

< 

£ 

t 

o 

CO 


1 


— • 

> 

mm 1 

™ * 

“ * 


_i ! 

j; 

-i! 

-J 

UJ. 

uj; 

uj. 

;u 

> - 

5** i 

>* 

> 

UJ 1 

UJ ' 

UJ* 

UJ 


_J < 

J 1 

1 



R. Nelson 

Space Station Freedom 
Program Office 
4 of 20 


INTERFACE REQUIREMENT DOCUMENTS (IRDs) 


BASELINE REQUIREMENT CHARACTERIZATION 


CO 

UJ 

Q 

> 

o 

cc 

CL 

CO 

LU 

O 



(0 

Q. 


CO 

O 


E 


0) 


G 

£C 

Q 

a. 



LU 

2 

UJ 

O 

< 


co 

l- 

z 

UJ 

2 

UJ 

cc 


UJ 

cc 

< 


o 

CO 


o 

UJ 

cc 

UJ 

-I 

o 

o 

Ul 

LL 


UJ 

> 

UJ 


o 

CO 

< 

CD 


c/> 

h 

o 

< 

cc 

h- 


o 

o 


LU 


cc 

0. 

Q z 

UJ “ 
<0 Q 
< UJ 
CD h- 




UJ 

cc 

G 

o 

ui 

CC 

UJ 


UJ 

CO 

< 

CD 

co 

T 3 

< 


UJ 

> <0 


I- UJ 
O O 
UJ . 
CC <0 
~ Q 


— C/5 


mi o 

> £ 

UJ o 

-I o. 


z 




CC uj 


ZD 

o 

UJ 

CC 



< 

cc 

Ul 

z 

Ul 

(3 


CL 

o 


UJ 

> 

UJ 

Q 


cc 

o 


UJ 

c/) 

CS) 


u_ 

O 


UJ 

C/) 


I 






R. Nelson 

Space Station Freedom 
Program Office 
5 of 20 


ENG 004 11/9/89 



SOFTWARE REQUIREMENTS REVIEW TOPICS 


(0 

o 

• MB 

Q. 

O 


5 

0 
■ MB 

> 

0 

tr 

</> 

c 

0 

E 

0 


0 

DC 

0 

L_ 

0 


o 

co 

o 

0 ) 


„ (0 
m (0 

C 4 > 
C O 

'3 o 
<a 
c 

o © 

3 m 
a co 

o £ 

© 2 

2 * 

® *o 

o *r 

*•— 3 

4 ) 9 " 
(0 -C 

0 O) 
3 

*- O 

k. 

CT.C 

c 

1 » 

I § 

~ E 
- o 

If 

1 s 

2 » 
3 2 

o* a> 
a> <n 

*- 0 ) 
k. 

0 ) 

Sfl 

(0 c 
E 2 


G 

W 

O 


o 

») 

MM 

c 

a> 

E 

o> 

k. 

•MM 

3 

cr 

0 ) 

4 . 

a> 

.c 

mm 

C <o 


o 

a 

a 

3 

0 ) 


CT 

C 

Q. 

>% 

mm 

O 

mm 

o 

k. 

Q. 

CT 

c 

(0 


c 

0 ) 

E 

3 

a 

o 

-a 

o> 

c 


a> 

> 

o 

CT 


p> 

c 

to 

0 ) 


(0 

ct 

o 

x: 

mm 

E 

CT 

c 

(0 _ 

2 % 

a> o 

© o 
— -C 
0 ) ~ 

A © 
co <2 
a z 
= a. 
a c 

A c 

o 
o 

>* *- 
a: co 


Q. 

(0 


C 3 
0 ) 

O T 5 « 

*- — c 

^ 4 - d) 

.= ” E 

3 C) 

O 4- 

C0 


A 

(0 

MM 

CO 

o 


XJ 

CO 

c 

’5 

mm 

c 

<5 

E 

•t 

>% 

a 

c 

© 

a 

© 


-Q 

CO 


a> 

« >* 
co 

*-• — 
c _Q 

E 2 

jjj © 


a. 3 


CO 

MM 

c 

© 

E 

CD 

3 

CT 

a> 

k. 

© 

a 

c 

CO 

k. 

0 ) 


(0 

O 

W 

O 

a> 


co 

0 ) 

mm 

CT 

c 

CO 


© 

E 

Q. 

O 

© 

> 

0 ) 

■a 

0 ) 


CO 


c 

a> 

E 

CO 

CO 

0 ) 

CO 

CO 

CO 


>* 

£ 

$ 

0 ) 

> 

k. 

0 ) 

o 

r 

a> 

Q. 

E 

4 ) 

k. 

3 

CT 

CO 

© 

co 

>* 

CO 

0 ) 

O 

co 

k. 

mm 

mm 

C 

CD 

E 

a> 

CT 

a> 

k. 

CD 

•5 2 

O- 4 ) 

2 c 

o 

MM 

MM 

3 

CO 

a> 

3 

CT 

CD 

CO 

k 

>. 

mm 

o 

k. 

CO 

k_ 

> 

o 

O 

(0 

0 ) 

k. 

a> 

c 

CO 

CO 

MM 

c 

© 

3 

CT 

CD 

(0 

5 

k> M 

o >* 
o = 

M— 

T 3 

c 

O 

CO 

CO 

0 ) 

M- 

CO 

CO 

© 

1 c 

o 

CO 

c 

o 

V- 

o 

c 

O 

75 

>_ 

a> 

O 

CO 

o 

MM 

CO 

o 

CO 

MM 

3 

CO 

E 

© 

k. 

3 

CT 

k. 

CT 

C 

*3 

CO 

o 

CO 

0 ) 

£ 

MM 

5 -Q 
a 

>»tr 
= o 
75 a- 

co 

CD 

k. 

3 

CD 

c 

o 

MM 

CO 

a> 

0 ) 

k. 

co 

£ 

MM 

(/) 

3 

> 


© 

CD 

0 ) 


3 

*5 

... 

o 

O 

LL 

O 


oc 

QC 

h- 


a 

u. 

S 

cn 


o 

c n 


o> 

® 

o 


* 


o 

LL 

00 


O 


z 

CD 


R. Nelson 

Space Station Freedom 
Program Office 
6 of 20 


Software criticality assessment and associated verification planning 


SOFTWARE REQUIREMENTS REVIEW TOPICS 


c 

o 



O) 

C 

3 

T3 

0) 

O 

W 

D) 

C 


c 

o 

4-* 

CD 

i_ 

O) 

<D 


“O 

C 

CD 

C 

o 

44 

CD 

O 


4) 

o 


a> 

o 

c 

a> 

3 

c r 
a> 
to 

>% 

.o 

E 

a> 

0) 

</) 

CD 


3 a> 
c 
c 

jD 
CL 


E 

o 


O) 

c 

V* 

3 

0) 

0) 

k- 

O) 

c 

CO 

CD 

£ 

Q. 

0) 

i— 

CD 

5 

44 

14— 

o 

£0 


0) 

a 

c 

0) 

3 

CT 

0) 

CO 

>* 

A 

E 

0) 

CO 

CO 

CD 

0) 


E 

o 


O) 

c 


CO 

0) 

CO 

44 

c 

a> 

E 

CD 

u 

3 

O" 

0) 

DC 


CO 

N 


u. 

a. 

to 


o 

CD 

IL 

C 

o 

4-* 

a 

3 

T3 

o 


CD 

3 

O 

co 

ulT 

CO 

CO 


c 

0) 

E 

c 

o 

k_ 

> 

c 

LU 


o 

CO 

o 

a> 

.c 


a> 

co 


£ 

o 

o 

44 

CD 

JZ 


0) .3 


o 

CL 

a. 

3 
CO 

a> 

zw 

CD 

£ a 


o 

c 

3 

0) 

i_ 

CD 

3 

h— 

o 

co 

a> 


a 

CD 

CD 

c 

CD 

a> 

3 

4* 

CD 

-Q 

o 


0) 

CD 

5 

O 

co 

"O 

c 

CD 

CD 

L. 

CO 

| E 

p d> 

Sub ^ 

(0 w 
£ >* 
<0 

a> o> 
j= jz 


*- o 

(0 _ 

c 
o 


"75 
c £ 

g £ 

X 

<3 • 

CO T> 

° S 
0) — 
£ (0 
*- C 


o 

0) 


a 

a 


c o> 

a> .E 
5 _ 

® r 

■°s 

CO 

44 CO 

| i 

E .tr 
£ c 
*5 5 

?2 
*“ 3 
4) O) 
a 5= 
to c 

r o 

0) O 


“O 

c 

CO 




DJ 

0) 

> 

0) 


“O 

0) 

"O 

0) 

a> 

c 

O) 

c 

“O 

3 


£ CO 


c 

o 

E co 
a> o> 

|i 

® j= 
*“ o 
to 

■O £ 

g ® 
J= E 

c 9- 
o £ 

■5 ® 

to > 
® 


£/> 


(0 

N 


ill 

(/) 


c 

a> 

E 

c 

o 

> 

c 

LU 


o 

a. 

a. 

3 

CO 


© 

e> 


R. Nelson 

Space Station Freedom 
Program Office 
7 of 20 


BN/GSFC 11/30/89 


SRR SCHEDULE 



< < < < < < 

o o o o o o 



® .E W m 

i- _ £ r W 

$ O O 0 ) U uS 

^ ^ (D (0 

2 2 c > cq r *8 

m > O LU < 

2 =0 08 „ = 

H E 08 _.Q- O 

•— Q) 0) ^ (I) 

< i ^ O o .£ Cd 

OhS q -2o8 o -g w q. 3 cn 
2 o8oQ5zSo_i22S 
00 25 <( 3 < Q 3 H IU IL 


LU) 

H 

< 

a 


0 ) 0 ) 00 ) 0 ) 0 ) 0 ) 00 ) ooo 
0000000000000000000)0)0) 


h-O)^tOC0inCMCMO)CMO)00 

OOrrNOrrrOrN 


rrrrrNCMNNrrr 

r-r-r-i-'r-T-i-i-'i-OOO 


R. Nelson 

Space Station Freedom 
Program Office 
8 of 20 


BN/GSFC 11/30/89 


REQUIREMENTS FOR SSMB SOFTWARE 
ARCHITECTURE DEVELOPMENT 



Structure - How is the 
data organized? Hew 
does a building Block 
access it? 



SSMB GLOBAL DATA STRUCTURE ORGANIZATION 
AND ACCESS CRITICAL TO CSCI DEVELOPMENT 



O 

E 



CO 

o 



■g « 

£ O. 

5 § 

cr 

o> o 

*- > 

<D ^ 

■*- 

3 = 

Is 

■*5 w 

co 

CO -O 
TJ O 


0) ~ 


0 ) 

> 

<D 


<D 

5 

o 

cn 

o 

CO 

Q. 

E 

(J) 

o 

0) 

£ 

o 

0> 


<D <D 
O 


C w 
CD e 

i •- « 
° « s 

8 So 

•r* o *- 

■Q o <D 

O < a 


R. Nelson 

Space Station Freedom 
Program Office 
10 of 20 




SOFTWARE l&V PROCESS 


4 


G 


D 


?? 





O CO 
u 


* 


Ct 



3 

o 

* 

o 

UI 


O 3 

o 

s • 

S 5 

o u 

• 

2 • 

O 


1 • 
* JC 

O u 
UI • 

5 5 



01 

> 

CO 

oi 

> 

01 



?? 2 • 

c 2 • S 
- > > < 


• • • • 


o 

<0 

o 

o 

0) 

o 



I • • # 


UI 

•I 

LU 

a 

UI 

.J 

UJ 

> 

00 


O 

< 

2 

0) 


0) 

> 

0) 


> • A 

?: ti • 


2 55=3 

§ 


O 

CO 

O 



<0 

w 

3 


<7> 

00 

I'* 



R. Nelson 

Space Station Freedom 
Program Office 
11 of 20 




POTENTIAL 

SYSTEM / SYSTEM SOFTWARE INTERFACES 



(H - WP/WP SOFTWARE INTERFACE 
X - SYSTEM /SYSTEM SOFTWARE INTERFACE 


CCS 

1 0/1 7/89 

R. Nelson 

Space Station Freedom 
Program Office 
12 of 20 
















































































SOFTWARE RELEASES PER ASSEMBLY SEQUENCE 



ORIGINAL P"~- ;g 
OF POOR QUALITY 


R. Nelson 

Space Station Freedom 
Program Office 
13 of 20 













































Software Risk Management 


co 

-*— * 

c 

0) 

E 

CO 

“q. 

E 

o 

o 

o 

< 


o 

tr 


>* 

_a 

*o 

a) 

"D 

C 

a) 

E 

E 

o 

o 

<D 

k_ 

c 

0 

co 

c 

0 

E 

_a> 

OL 

E 

1 « 

0 

of 
£ 2 

II 

h 

c co 

CO £ 
^ CD 

co 

v» CO 

io « 

if ° 


CO 

c 

0 

a. 

c 

0 

E 

0 

O) 

co 

c 

CO 


0 

co 

£ 

o 

CO 


0 

> 

<D 


~G 

CD 


C 

CD 

-g 

c 

CD 

CD 

_Q 

0 

> 

CO 

_c 

CO 

CO 


0 

CO 

I 

o 

CO 


5 
c r 


"O 

c 

CO 


0 

> 

0 

_Q 

"O 

0 

E 


0 

Q. 

0 

0 

X) 

CO 

0 


0 

N 


o 

Q. 

"D 

C 

0 


0 

v- 

0 

■c 

3 


0 


~o 

0 

C 

0 

0 

0 


"O 

c 

0 

■o 

0 

Q_ 

_g 

0 

> 

0 

■Q 

C 

0 

0 

-Q 

0 

0 


C 
_0 

Q_ 

C 
0 

E * 


0 

O) 

0 


0 


CJ) 

0 

C 

0 


0 "S 

g 

h= 

^ .52 

DC 

0 
v_ 

0 

$ 


0 

L. 

0 

£ 

XT 

O 

CO 


Q_ 
_ LL 

O CO 
CO CO 


R. Nelson 

Space Staiion Freedom 
Program Office 
14 of 20 


RISK MANAGEMENT = RISK ASSESSMENT* CONTROL + MONITORING 






TOP 10 SSF SOFTWARE RISK ITEMS 
IDENTIFIED BY TRW 




Cg CO ^ U) CO N 



R. Nelson 

Space Station Freedom 
Program Office 
16 of 20 


R033 Operating System Selection - real time shortfall 





m 



o 

R. Nelson 

Space Station Freedom 
Program Office 
17 of 20 


68/8/1 1 900 AVI SQOIS >1 OOCl «0OlS X <. LL 







SFP SOFTWARE SIZE ESTIMATE 
BY SOFTWARE TYPE 



R. Nelson 

Space Station Freedom 
Program Office 
19 of 20 


POST SCRUB 

INSTITUTIONAL GROUND FACILITY CSCIs NOT CURRENTLY IDENTIFIED lav 006 1 1/8/89 




Should there be a standard for the conversion of Ada source 
lines of code to computer memory usage? 



© 


© 


© 

T3 


3 =5 c 

a. c 

s to ® 

o £ £ 

o 2 » 

T, ^ C 

s!j 
• si 

n 

Co 

<*> ® § 


01 


(0 

5 

a 

o 

a 


o> 

o 

o 

c 

o 

o 


$ 

CO 

© 

•M 

Q. 

E 

o 

0 

O) © 
- co 

1 = 
1 2 



c 

o 


CO 8 
© « 

(5 CL 

E a 
.5 to 

o5 o 
o « 

0)0 
.E 8. 

N « 

w - "d 
o 2 $ 
<0 O 2 

<0 3 3 

m c <d 

</) rt 

. C 

T) o o 

£ O «- 
CO 

= J = 

<5 < Q. 
S-J- £ 

© ° 8 

T3C 

> O T3 
? C C 
n <0 CO 

C 

co = .5 

w □ ® 

O C o 
Z OT3 


o> 

1 

<3 


o 

U. 

CO 

§ 

c5 



R. Nelson 

Space Station Freedom 
Program Office 
20 of 20 






“SOFTWARE SUPPORT ENVIRONMENT (SSE) 
PROGRAM STATUS” 


F. Barnes, Lockheed 





2ND NASA ADA USERS SYMPOSIUM 


LU 

CO 

CO 




O 

LU 

IU 

LE 


LL 



0 
< 

01 
CO 




O LU 




CE CO 
< 


£ 

H 

LL 


O 

CO 


CO 

HI 

z 

DC 

< 

CD 


LL 


F Barnes 
Lockheed 
1 of 28 


30 NOVEMBER 1989 


STATUS AND CHALLENGES 



F. Barnes 
Lockheed 
2 of 28 


SSE PROJECT OVERVIEW 



ORIGINAL PAGE IS 
OF POOR QUALITY 


F. Barnes 
Lockheed 
3 of 28 






STATUS AND CHALLENGES 



F. Barnes 
Lockheed 
4 of 28 


SRRs PDRs CDRs 









STATUS AND CHALLENGES 



5 

LU 



O 

CO 

LU 

Q 

> 

x 

< 


LU 

X 

0. 


LU 

H 

CO 

>■ 

CO 

LU 

CO 

CO 


LU CO 

> 1 L 

” Q 

Q uj 
Z I- 

< LU 

— X 
“ 2 

2 8 

> •" 
LU CO 
-J X 

O 

< 3 
$ a 

z o 

Li. 

X 

H X 

5 Q 

> a. 


LU 

2 

LU 

o 


LU 

LU 

-J 

X 

o 


< 

X 

OC < 

^ Q 
LU LU 
X 7 

Z 
OQ X 


O 

Li. 

c 

I- 


O CO 
CO CO 

<3 

o z 

S 21 

5 T LU 

O f 
X ^ 
X x 

.o 


g 

co 

LU 

Q 


2 g 
co 

LU 

o 


< 

X 

X 

h 

o 

LU 


LU 


O 


O 

X 

< 

LU 

CO 

CO 

LU 

X 

H 


co < 

in Q 


O 

O 

X 

o 

X 


X o 

Q X 


>• 


< 

H 

LU 

O 


X 

o 




lu 

g 

O 

x 

x 

H 

O 


g 

o 

> 


X 

Q 

X 


< 

I- 

< 

Q 


o 

H 

in 

h- 


o 

x 


< 

g 

x 



h- 

X 

CD 

CO 

CO 

LU 

O 

o 

X 

CO 

< 

Q 

X 

X 

in 

g 

co 


O 

o 

co 

< 

5 


x 

Q 

X 




F. Barnes 
Lockheed 
5 of 28 




STATUS AND CHALLENGES 



o 

z 

co 

< 


LU 

h- 

O 

Q 


ll 

O 


O 

H 

< 


X 

LU 

h 

LU 

O 


X 

o 

h 

CO 


o 

z 

CC 

LU 



CO 




< 

o 



X 

CL 

o 

CO 



> 

LU 




CC 

CO 

o 


o 

z 

< 

Z 

2 

h 

CO 

CO 

o 

h 

o 

z 

X 

o 

LJ_ 

Q 

LU 

O 

UJ 

X 

< 

X 

X 

3 

X 

UJ 


Ul 

LL 

UJ 

5 

z 

Q 

z 

UJ 

“JP 

CO 

LU 

CO 


LU 

CO 

CO 

1— 

CO 

O 

UJ 


o 

CL 

X 

S 

X 

o 

CL 

X 

o 

DC 

X 

3 

X 

CL 

UJ 

CO 

X 

UJ 

CO 

CO 

CO 

X 

3 

CO 

X 

5 

UJ 

CO 

CO 

■ ■ 
o> 

• ■ 
o> 

• • 
o> 

■ • 
o> 

CO 

CO 

CO 

CO 


LA 

CO 

CO 


LU 

LU 

cr 

o 

< 

CO 

o 

CO 

0. 

3 

■ VN 

o 

CO 

< 


CO 

UJ 

CO 

O 

0. 

O 

DC 

0. 

< 

CO 

< 


O) 

CO 


LU 


O 

o 


CO 

LU 


LU 

CO 

< 

CD 

< 

CO 

< 


o> 

CO 


o> o> 


F. Barnes 
Lockheed 


10/89: NASA LEVEL 2 HOSTS 01 4/5/6 CONTENT MEETING 

• 01 4 REOPENED 

• SOFTWARE RELEASE 3.2.1 CREATED 
. 01 5 "ACCEPTED" 

• 01 6 DEFERRED 


STATUS AND CHALLENGES 



o> 

CO 

CM 




CM 

O) 

O) 

LL 

O 

LU 

CO 

CO 




CO 

cc 

HI 

> 

o 



O 

CO 

o 


A 


< 

h 

111 

o 


LL 

O 



LU 
I- 
C 0 

CO 


• • • 


F. Barnes 
Lockheed 
7 of 28 


STATUS AND CHALLENGES 



CD 

UJ 

P 

$> 
OH 
JO 
U. < 

(0 Ul 
UJ«0 

Is 

H 

O Q 

< Z 

UJ < 

18 

cd 

Q UJ 

z o 

< CD 
2 CD 

e>> 

uj 2 


CD (3 
CD Z 
> ^ 

<2 

^8 

U_ 
H- O 
QC 

< Z 

S 2 

u- < 

oc 

UJ 

ZH 

O” 

HO 

<z 

go 

ig 

2o 


H o 



I s - 


F. Barnes 
Lockheed 
8 of 28 



SSE SYSTEM PROJECT 



F. Barnes 
Lockheed 
9 of 28 


SSE SYSTEM PROJECT 


UJ 


<0 


< 

O 

z 

UJ 

o 

< 


UJ 

CO 

O 

CL 

CC 


o 

CC 


UJ 


UJ 

s 

Ul 

o 

< 


UJ 

o 

o 

o 


o 

< 

o 

CC 

QL 

0. 

< 


UJ 

m 

(D 


fc 

Q 

0 

| 

1 

CC 

UJ 


o 

o 


(0 

CC 

UJ 


o 

o 

& 

o 

CC 

o 


UJ 

CC 

I 

Q 

CC 

< 


(/) 

§ 

CO 

£ 

Ul 

o 


CC 

o 

LJ- 

GC 

UJ 

Q. 



F. Barnes 
Lockheed 
10 of 28 


SCHEDULE: 


SSE SYSTEM PROJECT 




o 

IS 


CO 


K 


LU O 

CO S 


2 IS 


F. Barnes 
Lockheed 
11 of 28 


Si 

o o 

85 

.C T3 

g3 

18 

If 
® © 

'o © 

if 

> © 

•* « 

|S« 
-.c o 

° 

C > 

2 £ 5 
© «S? o 

3 O 
~ © © 
g c © 
© o a 
_ o >* 

?!* 
I 3 * 
°i » 

® ~e 

.O O ® 
O — 3 

© C*g 

> m 2 
i9® 
T 3 c a 


«& e E 2 ~-s«® 

1 ® g ®i--S~E *■ 
X *5 ■§ >L~ o ® - 2 

2 c J S'© o p© 

_© _2 O _ O X o? 
— ~e o X © 52 x c 
9 2£ ® ® 

>.§5 2*2 o£ © © 

fSS SfigS? 

- 9-? o2 




?«®°®c£ 2 - 
5 w ji £ c : c ® 

a 3_ ®- R ® £ 


= o «£ c » £ ® 

= .c £= « o^-g £ 


f|5t 


> •= ~= > w 

> 5 as m O 

« T3 ® *— 


C o o . 
«c ® ° c x: 


| 2 ?|| 8 E^|| 
8 !c|o E llis 


© a® | v 


w _ _ ® 25 5 m 

^ - § ® ® 5 ~ ® - - 

”«=o a o®S S o 

CM^O©r=§ 2^C 

>2 >oa 2 c ?-*§ 

■£ 5 i'2 i ® ° S | | 
°2 * ® 8-° ?« I 2 

fl^SlpP 

gSz 5 2= 2 ®° 8 

C _ k— _ O r *c 


v © 1 


v w w i C ' j 2 

gc t -D> g >£ 
°£CO^®San 
Q'oi^v-.'OoocO 
Q.©®— © 0 ©“^ 3 

C^=n nO r m 


- - © 


©*C 

£% 

ft 

Ecn 

0 a 

“I 

S *o 

1 © 

2 H 

1 T3 
« O 

*° a 
® © 

— ® 

© $ 

£ © 

© *§ 
E»® 

° © X 

|«8 

o ® ,® 
^ £ XI 

o ® 2 

s i * 

® ® M 

8 u x 

•O ®< 
2 2> 


QX®®coC©x:f 

- o < c u c 


Q 2 
2 ! 
- E 

© g 
E~ 

o - 

^ S 

©x: 


*- ^ © 
a o o H 



x2 © 5 


2 

« 


> 

o 


o 

a 

T3 

C 

© 


I c 

f © 

ii 

<S 

• w 

S c 

o o 

2 s 

X t 
. © 

®K 

S 1 
E a 

o c 

°E 
® E 


© a 

JC O 

o © 

O 3 
H- X> 


I|5I| 

«S£3i 

c " « » j 
© 2 *-* 
cPcco 

I!? If 

flsll 

Jcsss 

- c 2 v © « 
® S E-if « 
c w g c ^ a 


= o 


T3 « 2 i E "a 

fl rf I s - 

■giiui 

• pis ® 
®-i s ? - 

-j 5 ®T3 o © 

© > 5 , 2 co ^ 

£|El ^ 8 
081 ^® a 

2 ® * «x: -o 
E| 2 o^ ® 
E 2 ■© •= ®- © 

© ® © S 2 — — 
os © -o 3 c *2 
o 05*0 © c « 
w )S © « © 

Q. ® .0 © *2 © 



<2^*5 E 
0-2 ® ® 

S ^ © j= 

~ ^ . o . 
^Oh^n 

I S< «£ 

^ £ - u 2 
1 P o E 

®d®So 

Ss»«c 
£• - " ® i 

5o£ = i 

■g "6 = ■© -o 

s^igg 

-ct® 
Sgi £•» 

2 «-g| ® 

S — * a. o o 
iQoSg 

S°® 8 s 

m » S -1 — 


C 3 * 


- > — w > 
© o — W ® 

Z -D ® « W 

c © © ® 

i?p; 

r.iit 

8 «SS. 

S -5J: 

° < © ‘5 £ 


O 

cc 

< 

Ui 

O 

CO 

Ui 

o 

GC 


J 

LU 

X 

H 

l 

Z 

1 

o 


< 

X 

a 

o 

X 

CL 

LU 

X 


© -2 
5 © 

© o 
x: o 


c t: 

1 5 
£ o 


o ^ 

t- w © 

°“i 


x: 

o 

© 

o 


© = 
a a 
© c 
® o 


a£ £ 

*■? s 

m u- 
? LU © 
~ tn ~ 
^ cn © 

0 ©£ 
c£ c 
.2 o 
ao*o 
o © 
O © to 

s ^ ® 

©0*3 

13 °T3 
CO © c 

o © 

^3-0 

o © 
a> © = 


c 

r © 

> -D 
2 < 

2T3 
© 

? © w 

hJ d 


a 

E 

o 

0 

1 

© 

© 

o 


i ® C ffJ i ^ __r © u. ©©TD®©w* 

>5 E 
= o o 



© CL 

_ _ ^ 5 -CO- 

E=I£^ “2 © m ® o 
— »- 2 ®^^o©'E 

|8|&|3 5 £a^« 
!5 £ Siogd 

3 3 © = > © S ~ 

!Q> f -£® a *O IT , ^ 

-o c © ? ©. 

5^©c<E = £'f 
^ ® c o ^ ^ 


T3 © © © __ 

" *■ - 5 e 5 


to 


© © © © 
X 3 ® Z *” £ 


I ®? 3 if 

flPo°o£ 
c © — ^ © ^ 

®sgl®“ 


^ X ■ A 


- ® = cs“ 
Q.T3 o c ‘a 

o « t: © t: 

:sif ! 

l?s°g 

o « ® 13 a 



o as 


”.&■ 


>'§®®.= ®°eE«e 
• 5=o5«®5a<»8 
= 5|g32«2 o; 

®-" : i8§®?l'i 

■° § a o 

a® c 


■g |£ 

E§o|®J 

•S ® 1 ® 8 ® 

< 50^0 
c< " ® ® = 
® ®'2= t t 


- >- O 5 

£ Otj OsiJxj 

**— _ n 


8 


;c®©S 5-2® qj c 

:fll3lig*i« 


I ® 8® 


> © 

© i; TD © © 

13 oz a 
® o>° - ® 
® £ ® o E 
£ 5iE ° a 
K 3K - ® 
T3 . © 

•©eg© 
® « ° o "S 

O m — o O 

| 2 © o o 
x; © g ® 


_ C 3 ^ 

® i ^3 ? 
>0Pli® 


o--g 


CO o m 
a ® - ® 


inU , O^ W w r«iS 

•5’ 2 °o£®c a> Eg-o 

> ^ m _ v -m — © o 


a> ® -* 

tnc^oc 

es - ® S 


_'0 c ® 
cs X .b 


-«'5oui^ 


b o 


'© OJ o 


3 O 


go© 


^ o ^ 

>■■■5 ^ P .2 ® 8 < CO * ® 


t 


T»I*5£„£vg. 

c O ^ ^ - © -C - 


« o® lll 


u-r 3 r-2« 
_c©*o| , gr^ 

© © O O — - 


3 © 
_ ° 3 

o © *o 
c $ Q 


3 a T£ ^ 
’O c ^ ^ 

;i5 d il 

§.£ oSf® 
o *- « © > © 

® 0 * « OT p 
> ©®5 t 3^ 
® w -c X c T 
10 2 « c 

®° .*>1 
£ =*s®ii 

IsSocc 
© S 5 - 


OX)-gx5 g, 
® — O « ? 
- > 5 2® 


® 5 *- ® 

®533©©®i-J^2^=>sgo©© 
£Ex:E o.o©oxOt 5© 5«c©c 


w m ® *0 "2 . 
C ® c © C *0 

® o o O® ® 

X 3 © 3 

5 © 

•£S!S 8 

E ? 2 *iS 

o^x c > © 
ffl m ^ 3 T3 *o 
2 2 C « © O 
X Q. o 2 t: n 
=. o 2 ® u 

,<»> © © o 36^ 


c > x: o ® OT 

OO-tiu^O 
O *0 © Q. S xz 


A © t» — 

E © © © 

o o w © 
O CL c »- 
*“ © 


® s 

t: c 

© o ■ 

| ® 5 15 I © 

^ 5 i ~ 1 i -o 


= ® c © © 


*° 5 i 5 c ■ 
5 -? 0 $ : 
= 'r' © -q x < 
J ,2 E 2 c 1 

5 ®fS® I 

O © >,'-D ® " 
O Jj ^ © > l 

© o a&"° j= : 
x: 5 c © 2 t 

w -- X3 to j 

o*S=®- 

= 5 S 5 s 1 
!-°g^ 

° £ c .£ £ j 

If !! “; 

m g ° °£ ! 
S®x© j 

2 ® 2 ;^; 

a ?« 2 ® 
?s w ® si 

|®li 8 i 

2 «S®°' 

2 l§M; 


« O (f)£4- 

® ilz® 

w w 3 > M 

jc © 5 

c 5w<i 
Ti E £ o ® 
® 9^ S E 


© 

© > 


© 

_ © _ 

^ © o 
© o © 

E 2s 

c a> © ^ 

c25®i3 

3 & C O >, 

° ©co « 

T3 F 

ll §2 . 

c ® w .9 ® 

1 1 IP 

® ® 0 * E 

°«-5s 
o r « S ® 

®2o;s 

jE£5S2 
® ■§ .2 o ■“ 

l.l£ u ® 

E$ £ = 
o t • «o 
uXc! 

3 


« © .2 
:t3£5 

k-« 

! c if ^ 

>SS 


0 ® ® 

1 £ £ 


F. Barnes 
Lockheed 
12 of 28 




F. Barnes 
Lockheed 
13 of 28 





SURVEY OF CANDIDATES; 

As of June 1989, over 260 Ada compilers have been validated. The best form of Informa- 
tion to determine the vendor and type of computers that these compilers were validated on 
comes from the "Ada Information Clearing House" newsletter. Another source is the "Lan- 
guage Control Facility Ada-Jovial" newsletter. 


o 


«0 

3 

2 




in 

E 

® 

>. 

CO 


<i M 






So 


o 




* a 


c 

<D 

E 

a> 

3 

<n 

<o 

a> 

E 

a> 

o 

c 

CO 

E 


<D 

Q. 

T> 

C 

CO 

^ C 
m O 

1 J 

0 CO 

§ £ 

r) 

_ ® 
a> = 

1 § 

§ ? 

CO 

9 8 


g a 

I 9 

CL < 


a. 

3 

O 

*_ 

O 

a> 

c 

§ 

$ 

0) 

3 

CO 

i2 

a> 

o 

c 

CO 

E 

•§ 

® 

CL 


s. 

as 

O 

c 

o 

as 

3 

5 

UJ 


3 

CO 

to 

® 


0 <0 
== o 

c 2 

E 2 
o 5 

o < 

co o 

5 CO 
< —> 


a] h O T- CM CO 


m (O 


r . Banes 
Lockheed 
14 of 28 


Hard Ada Real Time Test Suite (HARTSTONE) 

SSE Ada Test Suite (SATSTONE) - to be generated 
ln__Circuit_Emulator (ICE) and Software Analyst Workstation (SAW) 



SSE SYSTEM PROJECT 




■O 

© 

.S2 

TL 

E 

o 

o 

o 

CO 

2 


o 

$ 


W 

© 

c 


O 

© 

ID 

"D 

© 

c 

© 

CO 

© 

CL 

© 

CO 

“D 

© 

x: 

CO 

Q. CO 

Eg 

o~ 

B-o 

CO £ 

C o 
0-0 
CD _ 
jQXI 

co *5 
CO > 

-o-o 

CO *55 
£8 

o-S 


O 

C\J 

00 

00 

X 

<0 

> 

© 

£ 

c 

o 

-O 

£ 

© 

.3 

co 

> 

CD 

CD 

© 

£ 

CO 

“O 

< 

o 

LU 

Q 

-o 

c 

co 

X 

T3 

i— 

CD 

> 


s 


CO 

Ul 

2 

< 

GC 


O 

to 

a) 

CD 


c 

© 

co 

H 


co 

CO 

$ 

S-i 

to (0 

7£ 

o = 
o> <2 

0.3 

co 

__ © 
2 o 

CQ d 
® w 
— ® 
c o 
o </> 

"3 75 
© o 
© c 

3X1 

?© 


© 

© 

© 


CO -Q 

.9 © 

© Q 

E <*> 
© * 
c 


“O 

c 

© 


CO 

© 

$ 

CO 

> 


e ~ co 

~ £< 
JO 

< © 
_-E 

o 2 

© r ‘ 


c 

o 

Q- 

O 

c 

© 


LL 

a 

LU 

CO 

CO 

C 

o 

co 

E 

© 

00 

>S 

© 


* © 
c 
O 


© s 


© 

QC 

© 


“O 

© 


© © 


© 

© 

© 

© 

5 


o 

E 

© 

c 

o 


c 

»< p (D 

” i'l 


© 

c 


CO 

GC 

LU 


5 2 


£.ss S 


t- CM 


© 
© 
© 

,s€ 

CO 3 

£E Q. 


co 


O 

O 

o 

i- 

< 

H 

(/) 

* 

DC 

O 


c 

o 

« 

w 

k_ 

o 

£ 

LL 

O 

LU 

CO 

CO 

a> 

x: 

c 

o 

"O 

© 

© 

_3 

© 

> 

© 

© 


c 

© 

T3 


2 © jo jo 

© 1 
$ 


© 

v_ 

Q- 

E 

o 

0 

O) 

c 

1 

o 


© 

-C 


0 

1 I 


© 

£ 

c 

o 

c 

© 

;u 

u. 

© 


TD 

c 

© 

c 

o 

© 

© 

© 


© 

>S 

© 


o 

CO 

CM 
CO 
Q. 

“O w 
C © 
© © 

O ^ 

of 
0.2 
< w 

o jcg 
© “O 

< < MS 

a) co 
£3 

j§5 

<p © 
£ © 

to 

©as 


C 

© 

© 


"O 

c 

© 

© 

3 

C 

© 


© 

>s 

© 


o 

CD 

CM 

CO 

Q. 


© 

© 

X 
T 3 

w 

© 

> 

CO 

>v 

© 




O 

CL 

< 


30 
U< 
© ^ 


1- CM CO 


O 
o 

_ CO 

SJ « 
«a 

< c 


© 

05 

L. 

© 


o _ 


o 

CM 

00 

00 

X 

© 

> 

E 

o 


-O 

© 

© 

3 

© 

© 

© 

n 


O 

Q 

Q 

c 

© 

© 


X 

"a 

v» 
© 
> 

O 
© 
© 

© 
H 

= © 
£ >* 

2 < 
ri I 

CD 
00 
CO 
O 
00 


CL 

E 

o 

0 

1 

© 

© 

o 


© 

a> 


o c5 

a tr 
C 2 

5 
o 


o 

CM 

00 

00 


© 

Q. 

© 

XI 

© 

© 

V— 

© 

o 

sz 

5 

© 

© 

o 

3 

O 

© 

© 


© 


E 

o 


-O 

© 

k_ 

© 

-C 

© 

O) 

O) 

c 

© 

XD 

CO 

© 

© 

-a 

© 

O) 

k_ 

© 

X 

X 

o 

00 

CD 

© 


© x _ 
x: © c 
K > O 


F. Bamcs 
Lockheed 
16 of 28 


formed an evaluation on the 68K. 



SYSTEM PROJECT 


ADA BASE AND CROSS-COMPILER 
EVALUATION REPORT 


ALSYS 



ALSYS 



TELESOFT 


F. Barnes 
Lockheed 
17 of 28 



This figure shows the hardware configuration of the 80386 ’’bare” target test facility. It 
includes a PS2/80-1 1 1 to serve as the target. Also included Is a PS2/60 and IBM AT to be 
used for the running of performance measurement systems. 


O 

eg 

oo 

oo 

X 

€0 

> 

0 


C 

0 

•U 

0 

“O 

1 


.22 

& 

o 

0 

c 

c 

o 

o 

eg 

co 

eg 

co 

oc 

T> 

c 

CO 


0 

0 

A 


0 

E 

o 

w- 

0 

o 

c 

CO 

E 


0 

Q. 


0 

C 

c 

0 

E 

0 

CO 

3 

•? -o 
it £ 

0 X 

c • 
“ 0 

•i 

(0 © 
S "S 

o c 
■O I 

0 -o 
0 w 
3 0 

© co 
«° £ 


? ^ 

0 
A 

LU 


O 
0 

0 
0 

W -5 
0 o> 
£ 0 


o c 

m 

0 

§ * 
W O 

2 £ 
0) < 

S w 

O) (D 
<D £ 

lE © 

^ CO 

. 3 
E c 

0 © 
To £ 
« -o 
© w 
— LU 

r o 
0 — 

? s 

If 

o E 

*- 0 
T3 % 

© >» 
w CO 

© 
CD 


© _ 
A 2 
= 0 

^ 0 

uj £ 

Q r 
^ 0 


o 

0 

3 

E 

LU 


0 
I 

Q. 

is 

“ cd 
O -D 

^ © 
3 © Q 
O -Q C 
•fe = CO 

°,S i 

_c -o o 

I- ® te 
c CO © 

<3 0. 


c 

.25 

"a. 

E 

o 

0 

1 

>< 

CO 

O 

CL 

0 

A 

0 

0 

T) 

C 

0 

0 

O) 

k_ 

0 


0 

k_ 

0 

JO 


c 

o 

c 

3 

0 

JD 

0 

JD 


0 

C 

o 

0 

3 

0 

> 

0 


0 

0 

0 


0 

JC 


F. Barnes 
Lockheed 
18 of 28 


operating system becomes available, the compilers will be re-run with the OS, thus provid- 
ing performance data that can be normalized to the ’’bare” configuration. The following 
two charts show each configuration. 





Terminal 

















Terminal 
















The following performance measurement benchmark systems will be used during the 
cross-compiler evaluation period: 

1 . Ada Compiler Evaluation Capability (ACEC) 


CD 

| 

CL 

3 

O 

k_ 

CD 

03 

C 

XL 

o £ 

* a 


0 

13 

0 

JO 

0 

o 

C 

<0 

E 


<D 

CL 


C\i 


<0 

(D 


<o 

g 

5 

CO 


© 

3 

CO 

oo 

(D 


lli 

z 

o 

CO 

r— 

a: 

< 

x 

<D 

E 


(0 
© 
t r 

© 

■o 

< 


CO 

X 


uli % 

8 a 

SIS 

O CO A 

“ « s 

© © 
E -c 


CO 

<0 


E o c 
jc c o 
o © — 

C JQ T3 
- © 
© "O 
<o 5 
© © 5 

EfS 


<D 

n 


o 

CO 

“D 

CD 

Q. 

O 

CD 

> 

CD 

"O 

CO 

0 


LU 

CO 

CO 

0 

sz 


co 

co 

0 

O 

O 


0 

CO 

E £ 

2 - 
0 c 
>* 0 
0 t 

3 
O 

T3 
C 
0 


0 

| 

T 

0 

0 


co 

LU 


"O 
0 
“U 
"D 
0 
-Q 

E < 
0 00 


O 

K- 

CO 


m Q- 
C 

o 


CO 


0 

3 

0 

$ 

0 

£ 

a> 

c 

3 

o 


0 «- 
0 

0 ® 

1 © 
c ~o 

i < 

•= UJ 

a- w 
5 co 

*“ CO 

o © 

a © 

8-1 


4 


F. Barnes 
Lockheed 
21 of 28 



H 

O 

LU 

o 

DC 

Q. 

s 

LU 

(/) 

(/) 

LU 

CO 

(/) 



o 

< 


z 

LU 


(0 

CO o 


o 

z 

< 

H* 

o 

LU 

o 

o 


UJ 

QC 

< 

m 

z 

O 

z 

</> 

H 

(0 

LU 

K 

LU 

O 


QC 

o 

u. 

QC 

UJ 

Z 


TJ 

< 


o 

5 

a 


a — 
5 co 


o 

> 

< 

a 

CO 

< 

CO 


95 

o ^ ~ 


? <2 


CO 


X n 
H UJ 
< Q 

£z£ 2 

* occ s: 

O * * UJ 
O CO CO o 

-J < < x 

O h h UJ 


CO 

H 

CO 

UJ 


o 

z 

2 

ES 

s? 

QC Z 
O uj 
uj z m 

co oc 

— J -I 

UJ ^ < 

£ Si~< o 
uj >• 55 <o 

X UJ < C CO 
H CO J < < 
- < UJ QC J 

St o a z a 


J c. 


CO 

H- 

<0 


o 

z 

2 

z 

'< 


o? - 


= o 


a 

UJ 


z 

o 


o 

CO 

UJ 

oc 

* 

o 

o 


< 

u 

CO 
CO 

< 
•J u 

a a 


co 

x 

a 

UJ 

z 

o 

UJ 

2 


o S 

ti 


X Z 

■ a 
< 


o 2 

§£ 

< UJ 

z o 

> X 

a uj 


co 

z 

< _ 
UJ P 

o r 

Si 

CO 
z QC 

II 

* ° 
* Q 

O W 

ss 

<g 

2 UJ 
O I 
< o 
a z 

Z 3 


SI 

CO 

UJ 

CO P 
3 i- 
< ~ 
ri co 


5 < 
o a 

5 co 

z 5 
uj 2 

co Q 

UJ UJ 

oc O 
a O 
uj oc 

OC Z 


O 

H 

CO 

h- 

Z 

< 


co 

X 

co 

< 
CO h* 
X 

CO o 

K o 
o £ 

o a 
E >■ 

UJ O 

a z 

> s 

«o 

O “■ 
uj o 

21 

O 2 

zg 

o i 


o 
z 
< 

o 
5 
o 

£ 

UJ 

z 

> co 
O X 
z CO 

I? 

UJ 

QC o 

LL. Z 

si 

is 


CO 

X 

CO 

< 


< 

N 

z 

S s 


a 
5 

o _ 
£ o 

UJ — 

a h 

u| 

z * 

uj O 

3 QC 
O Z 
UJ Q 
QC z 
> 
O w 


5> 
8" 
z z 

UJ H 

a 


co 


UJ 


QC 

< 

Z 


Z QC 
O < 


* * i 


< 

z 


CO 

o< 

UJ ^ 

£ o 

il 

O QC 
2 UJ 

z 5 
< < 
z 


co co 

h- UJ 
‘CO -J 
UJ QL 

H 2 


CO 

3 

o 

> 

N 

UJ 

Q 

Z p 

UJ W 

QC 

> 
X < 
CO -J 

< x 

I- Q 


O 
UJ £ 

2 Z 

Z X 
O uj 

3 UJ 

o a 
uj o 
x o 

UJ 


a 


o -J 


CO 

H 

Z 

UJ 

2 

UJ 

I- 

< 

H 

CO 

a 

“O 

< 

UJ 

.J 

a 


— ^ O x ^ — 


< 
z 
o 

z 2 
a C 


uj 
^z 
_ < 


UJ 

z 

o 

K 

CO 

K 

< 

CO 


UJ 

o 

o 

a 


2-2 


UJ 

O 

< 

3 

8 2 
o2 

UJ 

9r jj ui 

9 § « 

uj < <0 
> -J m 
“|<I 
Q O ►“ 

0) Ui a: 

< S; O 

i « it 

lujro 

(0 CO mi 

w “ E 

UJ 3 

z o a 

H K UJ 

>co a 

r| ui w 

t Z UJ 

z o z 

iii . Sr 


z <n 
ac h 

3 < 
O CO 


3 

H 

< 


o 2 


UJ 

o 

< 

a 

co 


Q ^ ^ 


a < 
< 


< 

o 
£ 
co 
< 
2 -J 
CO o 


O co 
P 2 

U < 2 

“2o 

s! > 

z < 
< 


O z 

H< 

a _ 

g y 5 

z z 
uj O 
z c 

< U < 

t ui 5 

< -I < 
Q UJ Z 


E#h 
UJ ~ O 

= i§ 

* < ° 

S 3 O 
-J 2 OC 
< z a 

x co uj 


^ UJ 

s .?< 

o < 


CO 


— O o 

UJ x 

^(0 Z t 

^ H- ^ 
^ QL U. UJ 

'-'S o = 


= ^ z 




rr UJ 

£ <2 x 

z UJ 5 UJ < 

a £ z h 


p 


z 

UJ 

o 

X 

UJ 

z 

UJ 

§5 

O Z 

51 

52 

Z _l 
uj a 
z 

X 
X o 
CO < 
< H 
K CO 


F. Barnes 
Lockheed 
22 of 28 


SSE SYSTEM PROJECT 



F. Barnes 
Lockheed 
23 of 28 


OBJECT DE-ALLOCATION AT 
INTERRUPT RESPONSE TIME 


This chart reflects the tasks associated with the cross-compiler evaluation. For the first 
half of 1989, the following tasks were planned and have been completed. 

1 . Run all the benchmark test suites on SSEDF equipment. 


® < c c 

Itt 

oi ‘ o*o 
00 CO CO CO 

- ® i © 

© O ® >“ 


© © 
® O 

JD — 
© CO 

!2 c 

|S 

22 

|§ 

z CO 

o E 

S CD 


LL <o 

P 2 


CT> — 

00 -Q 


I s 

1 2 
© 2 
cn m 


13 03 

■o -c ^ 
c © 

« °-oi 

■DC® 

<0 o OJ 

© © 7. 

I 5 2 

R © m 


3 

© .® CD 
”35 
© D - / 

1 £ & 
S § z 

© C\i > 
JC C/) © 
H- Q I 


© 

°.:f 

IS 

o c 

O S 

a 2 
" i 

0 .C 
o LU 

O E 

® CO 

a o 

£ 3 

S3 

o cc 

co co 
0 0 
“O "D 
3 3 

o o 


F. Barnes 
Lockheed 
24 of 2P 



SSE SYSTEM PROJECT 



F. Barnes 
Lockheed 
25 of 28 



SSE SYSTEM PROJECT 














SSE SYSTEM PROJECT 



VERDIX SCHEDULED TO BE AT SSE ON 6 NOV WITH COMPILERS 






















SSE SYSTEM PROJECT 



> 

cc 

< 




LU 

fc 


o 

0 

1 

CO 

2 

LU 

CO 

> 

CO 


LU 

2 

LU 

CC 

z> 

CO 

< 

Ui 


LU 

O 


DC 

O 

LL 

CC 

LU 

CL 


CO 

■u 

< 

ir 

< 

i 

LU 


I 

LL 

0 

I 

LU 

1 


o 

5 

§ 


8 

LU 

O 

o 

cc 

CL 


o 

cc 

£ 

LU 

CC 

< 

CD 


CO 

CC 

LU 


O n 


O 

O 

I 

CO 

CO 

o 

cc 

o 






F. Barnes 
Lockheed 
28 of 28 


SESSION 2 - CENTER AND PROJECT ACTIVITIES 


Session Leader: M. Stark, NASA/GSFC 


Ada in the SEL: Experiences with Operational Ada Projects 
E. Seidewitz and M. Stark 

The Application of CASE Technology and Structured Analysis 
to a Real-Time Ada Project 

S. Cohen 

Ada at JPL: Experiences and Directions 

T. Fouser 

Ada and the OMV Project 
W. Harless 






“ADA IN THE SEL: EXPERIENCES WITH OPERATIONAL ADA 

PROJECTS” 

E. Seidewitz, NASA/GSFC 


5798 





Ada IN THE SOFTWARE ENGINEERING 
LABORATORY: EXPERIENCES WITH 



N 


LD 

Q 

LU 

C n 

Q 

LU 


o 


CL 

< 

o 

LL 


1— 

LL 

CD 


CD 

CD 

CD 

Q 

z 


CD 

< 

< 

LU 

< 

CD 


< 

CD 

< 


X 

< 

Z 


o 

z 


E. Seidewitz 
NASA/GSFC 
1 of 11 


R07C\ mi 



SOFTWARE ENGINEERING LABORATORY 
PRODUCTION ENVIRONMENT 


CO 


0 LU 

1 E 
< 9 

CC 3 

O O 

LU 
CC 


LU 

> 

P UJ 

O co 
< 


cc 

UJ 


Q 

UJ 

CO 

< 

CO 

I 

a 

z 

3 

o 

CE 

O 


o 

Ql 


I- CO 

UJ 
CE 

Q 


£ 


CD 

< 

—I 

LU 

X 


d LU 

y= < 

H* DC 
Z LU 
LU Q 

o O 
co 2 


O 


O 


< 

o 

CO 

< 

X 

DC 

LU 

X 


vO 

o x 

O 


03 

"O 

< 

vP 

LO 


< 

X 

h- 

X 

O 


LO 

r^ 


UJ 

0 

CO 

o 

CO 

o 

LO 

O 

CO 

z 

1 

CO 

1 

CM 

CM 

i 

i 

CO 

< 

T“ 

o 

LO 

o 

DC 



CM 



LU 

O 

< 

CC 

LU 

> 

< 


o 

LO 

o o 

^ o o 

00 o 

o 

c 6 

cr> 

CO C\j 

LO o ^ 

lo 

o 

CM 


CD O 

i- CM 




LO 

00 


(/) 

LU 

0. 

t 


cn 

LU 

0 

< 

3 

0 


CO 

o 

H* 

C/> 

CC 

UJ 

h- 

o 

< 

CC 

< 

z 

o 

I- 

o 

LU 

“0 

o 

CC 

Q. 


CO 

I 


< 

CC 

3 

Cl 


CO 

CC 

< 

UJ 

it g 

H - 1 

CO O 
o 
I- o 
cc C- 

£ LU 

t N 

UJ CO 


£ Q 
Q. LU 

o CL 

3 LU 
LU > 
> 3 
LU LU 
Q Q 


> 

3 

o 

LU 

LU 


CO 

LU ^ 

o S 

< 9 
cc > 
LU < Q 
> uj 9 

< 0. 2 


< 

I — 

CO 


CO 

cc 

< 

LU 

> 

LU 

O 

z 

UJ 

cc 

LU 

0. 

X 

LU 


LL 

LL 

< 


9 o 

< 

o 


CO 3 
CC ^ 

LU O 

9 5 

? ° 

<. LU 


CL 

CL 

< 


CO 

cc 

< 

LU 

> 

LU 

O 


CO LU 


CC 

LU 

CL 

X 

UJ 


< 

cc 

LU 

> 

O 


LL 

< 

I 

CO 

CO 

X 

LU O 

oz 

< x 

< LU 


o 

rx 

c\j 

CD 


E. Seidewiiz 
NASA/GSFC 
2 of 11 


SAMPLE OF 9 FORTRAN PROJECTS 



LU 




o 

cc 

o 

* 

o 

< 

DQ 



co 

h“ 

o 

LU 

—> 

o 

cc 

CL 

00 


I- 

3 


O 

LL 

CO 

0 

< 
( X 
< 


O 

00 

> 

Q 


C/D 

< 

X 

CO 

-O 

< 


C/D 

Q 

LU 

• 

o 

LU 


O 

o 


N < 


< 

X 

¥ < 


LU ^ 

lu£ 

m o 

CO LU 


LU 
LU 
CD CO 


O 


Q 


“3 

o 

x 

x 


!< 

iiS 

< U - 
h - — 1 
LU LU 
Q CO 


LU 

_l 

X 


z 

0 

CO 

X 

Q 

0 


< 

X 


o 

< 

o 

X 

X 

X 

< 


o 

LU 

> 

_l 

o 

> 

LU 

CO 

< 

X 

0 


CO 

X 


O 

LU 

(/) 

(/) 

LU 

QC 

Q 

Q 

< 

LU 

CD 



co 

O 


CO 



h— 


X 

> 


CO 


X 

P 


X 


3 



X 


h- 



t - 


< 

h* 


o 


X 

o 


< 


X 

3 


X 


CO 

Q 


< 


■O 

< 

O 

X 


X 

o 

1 

X 

X 

X 

X 

X 

X 

< 

CJ 

h~ 

CO 

o 

1 — 

X 

CO 

3 

X 

X 

CO 

O 

X 

X 

o 

3 

o 

X 

X 

X 

• 

• 

• 

• 

• 


O 

CL 


CO 

o 

o 

o 

r- 

CM 

CD 


E. Seidewitz 
NASA/GSFC 
3 of 11 



Ada PROJECTS IN FLIGHT DYNAMICS DIVISION 



O 

CD 


<J> 

00 


00 

00 


oo 


co 

oo 


in 

oo 


E. Seidewitz 
NASA/GSFC 
4 of 11 


B270.004 




USE OF Ada FEATURES 



E. Seidewitz 
NASA/GSFC 
5 of 11 


• USE OF Ada FEATURES CHANGES APPRECIATELY 
WITH EXPERIENCE 

• NOT ALL FEATURE APPROPRIATE FOR APPLICATION 








E. Seidewitz 
NASA/GSFC 
6 of 11 






E. Seidewitz 
NASA/GSFC 
7 of 11 


EUVETELS SPECS WRITTEN AS A DERIVATION OF UARSTELS 



ERROR CHARACTERISTICS 



E. Seidewilz 
NASA/GSFC 
8 of 11 


• Ada HELPS CUT INTERFACE ERRORS 



PORTABILITY STUDY 



O 

cc 

u_ 


CO cO 
>< 



Q 

LU 

0 


< CO o 


LU 

_J LU 

o 

LU 
X 
LU 


O 

O 


O 

CO 

H 

Z 

LU 

O 

Ql 

O 

o 

co 

oo 


LU 

z 

O 

CL 

o 

o 


LU 


CO 


o 


CO 


£ ll 

< LL 

I — <f 
CO f 

LO CO 

c\i 


CO 

CO 


< I, 

DC h= 
I- 

DC LU 

O 2 

ll cl 

s 3 

’ LU 

CO > 
H UJ 
Z Q 
LU 


CC 
< 
LU 
> 

LL 
LL 
< 

o CO 00 
CT> LO CO 


— O 

o % 

3 o 

CO o 
__ 


E. Seidewitz 
NASA/GSFC 
9 of 11 


B270.010 





LU 


LU 

Q 


CC 

LU 

CL 

X 

LU LU 

w m 
O H 

fc x 

^ LU 


LU 


LU 



1= 

< 

Q 

< 

O 


3 

Q. 

O 

CO ^ 
CO CO 

s < 
—I CL 

< 2 

q8 


< 

CC 

LU 

Q_ 

O 

Q 

LU 

Z 

m 


LU 
I- 

co 
>“ 
CO 

I — 
CC 

o 

CL 

03 

O CO 


f— 

g 

LL 

LU 

_J 

CQ 

< 

CC 

3 

0 

E S 
z LU 

8 | 

Q 0/5 O 
LU H O 
n cr _i 
— i O z 

<9-n 

dc n y 

LU 3 H 
z CO =d 

^ | * 

1 Q CO 


o 

o 

h- 

CM 

CQ 


E. Seidewitz 
NASA/GSFC 
10 of 11 


- EFFORT: ~250 STAFF YEARS 

- SCHEDULE: 1989-1996 





if) 

<f) 

LU 

if) 

if) 

< 


if) 

LU 


g 

X 

o 

LU 

I- 

Q 

LU 

< 

O 

O 

if) 

if) 

< 

O 

cc < 
3 CD 

< LU 


CL 

O 

Q 

< 


if) 

if) 

LU 

O 

O 

cr 

CL 

LU 

_l 

o 

>- 

o 

LU 

LL 


if) 

LU 

CD 


I I 

o ^ 

Q E x 

0S0 


o o 

M 

X 

< 

< CL 

X CD 

LU O 


O LU 

x 0- 


LU 


LU 


y 3 


u_ — — j 

£ Z < 
“■05 
Op 0) 

ZU)> 
x X =! 
x < g 

< x O 

LU I— - 

X < _| 

< LU < 
UJ > p 

O X 
00 — 


g 

co 

LU 

Q 

Q 

LU 

I- 

LU 

X 

O 

I 

I - 

o 

LU 

“3 

X 

O 


=i t < 


x 

< 


CO 

T3 

< 


I — 
if) 

o 

o 

ill 

> 

h- 

o o 

X m 
— X 

X X 

X LU 

<j X 

xO 


< 

o 

111 

CL 

if) 

if) 

LU 

X 

z> 

o 

LU 


o 

Z> 

Q 

X 

X 

if) 

X 

> 

X 


if) 

x 


if) LL 
X ^ 

cc LU 

oScoyj CO 

x 

x O 

< H- 

X^__ 

2odcq - 


X 

^-E< 

CD X X 

Z<0 


CD 

o 

o 

o 

r- 

CM 

X 


E. Seidewitz 
NASA/GSFC 
1 1 of 1 1 


FUTURE STUDIES 

- RELIABILITY 

- MAINTAINABILITY 





“THE APPLICATION OF CASE TECHNOLOGY AND STRUCTURED 
ANALYSIS TO A REAL-TIME ADA PROJECT” 

S. Cohen, GE/STGT 


5798 






The Application of CASE Technology and Structured 
Analysis to a Real-Time Ada Project 

Sara Cohen 

General Electric/STGT 
P.O. Box 8048 - Bldg. 25, Rm. 22S05 
Philadelphia, PA 19101 

Introduction 

System requirements analysis frequently poses a challenge to a project development team. 
Traditional life-cycle methods used to analyze system and software requirements often re- 
sult in lengthy text without graphical representation. This documentation is difficult to 
modify and check for consistency. The use of Structured Analysis (SA) has alleviated many 
of the disadvantages associated with traditional system and software requirements analysis 
methods. System and software requirements analysis using SA techniques is more com- 
plete, easily understood, precise and comprehensive. Benefits of SA are apparent in the 
System Requirements Analysis/System Design and Software Requirements Analysis phases. 
The experiences of the Second Tracking and Data Relay Satellite System (TDRSS) Ground 
Terminal (STGT) project to date have shown that the benefits of SA can be realized as 
far into the project life-cycle as the Detailed Design Phase. This paper will discuss the 
requirements analysis methodology exercised on the STGT project, as well as its benefits 
into the Detailed Design Phase. 

Background 

The Second Tracking and Data Relay Satellite System (TDRSS) Ground Terminal (STGT) 
is a real-time project which will contain over 450,000 lines of custom executable Ada code 
and approximately 2,000,000 lines of Commercial Off The Shelf (COTS) software. It pro- 
vides the National Aeronautics and Space Administration (NASA) with tracking, telemetry 
and command of the TDRS, and high quality data communication service to the user com- 
munity. The STGT mission requirements include implementing NASA's allocation of sys- 
tem resources, maintaining high quality forward and return links, providing system perform- 
ance and status data to the Network Control Center (NCC). and providing efficient ground 
station maintenance to meet the high quality and availability requirements of the STGT 
users. STGT will provide high operational availability to the user community with less than 
fifty-five minutes down time per year (no more than 10 seconds at a time). A distributed 
architecture and multiple Computer Software Configuration Items (CSCIs) ate employed 
to facilitate development, flexibility, maintenance, documentation, and control of the soft- 
ware necessary to operate and maintain the STGT. 


1 


S. Cohen 
GE/STGT 
1 of 24 


Upon completing successful project reviews - a System/Subsystem Requirements Review 
in March 1989 and a Preliminary Design Review in August 1989, STGT is currently in the 
Detailed Design Phase. Software developers are identifying units according to DoD- 
STD-2167 and producing Ada package specifications and Ada Program Design Language 
(PDL). Subsystem Critical Design Reviews are scheduled to begin in January 1990 with 
the infrastructure CSCIs and continue through April 1990 for the remainding CSCIs. A 
system Critical Design Review is scheduled for June 1990. The Coding, Unit and CSC Test- 
ing Phase will begin in January 1990 and continue through October 1990. 

STGT’s software development team currently numbers fifty-five. Eleven STGT developers 
participated in an intensive Ada training program for one year prior to the start of full- 
scale STGT development. During this training, they completed at least one Ada project 
in technology directly applicable to STGT. In addition, they are experienced in the area 
of large-scale ground station projects. These software developers were assigned to lead 
the development of the CSCIs. All STGT software developers were required to complete 
an Ada individualized training program which required at least eighty hours. This self- 
paced program consisted of a multi-media curriculum including computer-based and text- 
based training, lectures, and hands-on application. Many STGT software managers either 
had previous Ada experience or completed the Ada training program. STGT software devel- 
opment management recognized the importance of management, as well as individual con- 
tributors, receiving software engineering and Ada design training specifically for real-time 
systems. Additionally, STGT software managers attended Ada management training 
classes. 

Traditional Requirements Analysis vs. Structured Analysis 

The early '70s introduced project management methods based upon models of the software 
development life-cycle. This called for documents to be produced at specific points within 
the life-cycle according to prescribed forms and standards or document content guidelines. 
These methods stressed the capture of documentation during the development process, but 
did not adequately provide for the continued usefulness of the documents. The specifica- 
tions were often incomplete, inconsistent, incorrect and not always updated to reflect 
changes made to the system. Lack of formality, resulting in inconsistency, and lack of main- 
tainablity have been identified as the problems which have limited the effectiveness of the 
life-cycle based methods. 

It was obvious that more formal methods than those mentioned above were nece^arv it 
greater productivity was to be achieved. In the late ‘70s and early ‘80s. more formal methods 
were introduced, most notably structured analysis and structured design. These methods 
shifted the emphasis from later phases of the life-cycle to earlier ones. More time should be 
spent in the Requirements Analysis Phase, as well as the Preliminary and Detailed Design 
Phases. Less time and money would be spent in the Coding, Testing and Maintenance 


2 


S. Cohen 
GE/STGT 
2 of 24 



Phases, since errors would be detected at the earliest possible time. Implementation would 
be easier and the resulting software would be of higher quality. 

Tom DeMarco is credited with popularizing structured analysis. He explained that through 
the use of data flow diagrams and descriptions of data (i.e. data dictionary, process specifi- 
cations and decision tables), one could build a systematic description of a system’s logical 
(functional) and physical (implementation) aspects. Management could control the activi- 
ties by conducting walkthroughs where data flow diagrams, the data dictionary, process 
specifications and decision tables could be manually validated. The data flow diagrams and 
the data dictionary became system document deliverables. According to DeMarco, if the 
person performing the structured analysis is doing so correctly, the structured specification 
would have the following qualities (l): 

1. It would be graphic. The data flow diagrams would present a meaningful, easily 
understood, picture of what is being specified. 

2. It would be partitioned. The processes depicted on the data flow diagrams would 
represent the basic elements of the system. 

3. It would be rigorous. The data dictionary would provide a rigorous document of the 
interfaces and the process specification would be rigorous as well. 

4. It would be maintainable. Redundancy would be minimized and used in a controlled 
manner. 

5. It would be iterative. The specification would be shared with the user and modified 
according to his/her needs until correct. 

6. It would be logical, not physical. By eliminating elements that depend upon things 
such as hardware and vendor, one need not concern oneself with changes in physical 
thinking. 

7. It would be precise, concise and highly readable. 

Fulfilling these qualities, the structured specification would then exemplify the popular 
saying “a picture is worth a thousand words”. A system specification properly decomposed 
into data flow diagrams would be more easily communicated than the traditional tonnage of 
requirements documentation. 

With the methodology in place, there was a need for tools in order to provide automation. 
Without these tools, it would be less practical or economical to use formal system de\<l<>p- 
ment methods. In the mid ’80s, with the spread of desktop computers, a technologv known 
as Computer Aided Software Engineering (CASE) was introduced. It was comprised ul 
environments and tools which would allow the user to model a system from its initial user 
requirements through design and implementation. Tests could be applied in order to check 
for consistency, completeness and conformance to standards. In other words, these tools 
would assist the user in expressing his/her structured analysis and design models. They 
would not create the models for the user. 


3 


S. Cohen 
GE/STGT 
3 of 24 


Benefits of Structured Analysis During the Requirements Analysis 
Phase 

Given the complexity of the STGT, analyzing the system requirements was a challenge. The 
NASA Requirements Specification for STGT was analyzed using Structured Analysis (SA) 
techniques. Cadre Technologies Inc.’s TeamvwrL/SA® was selected as the CASE tool to 
support the structured requirements analysis process. This selection was due to GE Military 
& Data Systems. Operations’ (M&DSO) business association with Cadre Technologies Inc. 
Cadre Technologies Inc. is a large, stable company willing to accomodate M&DSO’s needs. 
Their products met M&DSO’s key requirements, among which was the capability to support 
multi-users and multiple platforms. 

The system requirements analysis was rigorous, easily understood, precise and comprehen- 
sive. The system model’s data dictionary served as a basis for hardware/software interface 
specifications. The system model itself provided a sound foundation upon which software 
requirements analysis could be performed. 

Applying the same techniques as were applied in the systems requirements analysis phase, 
each CSC1 developed a levelled model in which the requirements specific to the CSCI were 
captured. The models consisted of multiple levels of data flow diagrams reflecting corre- 
sponding levels of functional detail. Individual requirements were enumerated in the pro- 
cess specifications. Intra-CSCI, as well as, inter-CSCI data flows were defined in the data 
dictionaries. The use of Teamwor£/SA®’s checking capability ensured that the data flow 
diagrams were syntactically correct and that they balanced with their child data flow dia- 
grams and process specifications. The software requirements specifications produced were 
precise, concise and highly readable. 

Teamww*/SA® did, however, have one limitation. Since the number of users accessing 
a particular data base simultaneously was limited to eight, it was decided that each CSCI 
would develop its own model. All of the CSCls could not be accomodated in one data base. 
This meant that each CSCI would have its own data base. All consistency checking between 
CSCls was performed manually. A manual procedure was used where data dictionaries 
were merged and definitions were checked for consistency. This procedure, unfortunately, 
was not 100% foolproof. An automated procedure would have been more efficient. 

The software requirements models and data dictionaries provided for 80 % of the SRSs' 
content. Interleaf Publishing Software was used to produce the SRS documents. The produc- 
tion of the SRSs was enhanced due to the software utilities, commercial and in-house, 
available to incorporate the Teamwork® models into Interleaf documents. 


Teamwwtf/SA® is a registered trademark of Cadre Technologies. Inc. 


ORIGINAL PAGE IS 
OF POOR QUALITY 

4 

S. Cohen 
GE/STGT 
4 of 24 



Software developers produced the SRSs using these tools, leaving the Technical Publications 
group the task of merely applying cosmetic changes.These SRSs were delivered to the cus- 
tomer at the System/Subsystem Requirements Review. 

Based upon GE’s initial Ada project experiences and modern software engineering princi- 
ples, it was projected that STGT would spend 10-15% of its software hours in the Require- 
ments Analysis Phase. In fact, over 9% of STGT’s budgeted software hours were spent 
performing requirements analysis. 

The development of the requirements models produced some unexpected benefits. The 
graphics depicted in these specifications proved to be an excellent means of communication 
with NASA during the requirements analysis walkthroughs. They were equally helpful to 
convey ideas or work out issues with colleagues. In addition, the data flow diagram models 
served as good training medium as new STGT personnel familiarized themselves with the 
system. 

Benefits of Structured Analysis During the Preliminary Design Phase 

The basic goals of the Preliminary Design Phase were to develop a top-level design for 
each CSCI reflecting the requirements specified in the SRSs and to develop a lower-level 
design for Computer Software Components (CSCs) which were identified as critical ele- 
ments of the design. Critical elements were defined as those required at an early date for 
the development of other CSCs, those having a long development period and/or those hav ing 
performance requirements that would be especially critical. 

Employing an object-oriented design approach tailored to the needs of STGT, the first step 
of preliminary design was to identify objects, physical and abstract, in the system. The 
objects would contain state data and provide operations on that data. Object-oriented CSCs 
encapsulated objects within a CSCI. Object-oriented design, however, had its limitations. 
Concurrency would not be addressed until object implementation. Overall system concur- 
rency would not be addressed and control was not obvious. In order to address these limita- 
tions, process-oriented CSCs were identified. The process-oriented CSCs encompassed 
major portions of the processing to be employed by the CSCI. 

The identification of concurrent processes within STGT was based upon an “Edges-ln” 
approach, where the processes necessary to control the external devices were identified 
first. The rules used to identify concurrent processes were: 

1. External devices: These processes were designed as simple device 
drivers to run at the speed of the device. 

2. Functional cohesion: Closely related functions were combined into a 
single process. 

3. Time-critical functions: High-priority processes were identified due 
to their time criticality. 


5 

omoiim "age is 
OF FOOt? QUALITY 


S. Cohen 
GE/STGT 
5 of 24 


4. Periodic functions: Separate processes were identified for periodic 
functions to be activated at the proper time intervals. 

5. Computational requirements: Low-priority processes were identified 
for functions which were not time critical and often computationally 
intensive. 

6. Temporal cohesion: Functions performed during same time period or 
immediately following certain events were combined into a single pro- 
cess. 

7. Data base functions: Functions which needed access to a shared data 
base were aggregated into a single process with mutual exclusion as 
the access mechanism. 

With the design approach in place, the software requirements model was an excellent start- 
ing point for the “carving process”. Transforms and their decompositions were examined 
with the rules described above in mind. Process-oriented CSCs were identified as a result 
of this technique. Many of the data stores in the model were initial object candidates. Figure 
1 illustrates the results of the “carving” process. The data flow diagram depicted is a high 
level data flow diagram. This data flow diagram, in addition to its child data flow diagrams 
were used to carve out the Ground Equipment object-oriented CSC, Perform Operator Initi- 
ated Testing process-oriented CSC, Maintain Service Status Data process-oriented CSC. 
Perform Failover and Automatic Fault Isolation process-oriented CSC, Monitor Ground 
Equipment process-oriented CSC and Control Ground Equipment process-oriented CSC. 

During the Preliminary Design Phase, two activities, other than software design, benefited 
by the results of the Requirements Analysis Phase. A system performance study was con- 
ducted and used the software requirements models to define transactions. In addition, the 
software test group found that production of the software test plans was facilitated by the 
clarity of the requirements. 

Benefits of Structured Analysis During the Detailed Design Phase 

Entering the Detailed Design Phase, the initial goals were to refine the CSCs, identify Ada 
tasks and VMS processes and finally to select units, generate Ada package specifications 
and Ada PDL. The role of the software requirements model was smaller than in the previous 
phases. The models represented a solid understanding of the physical requirements. In a 
number of areas, however, software developers felt the need to address implementation 
issues, prior to unit selection. This was satisfied by further decomposing the Miltwao n- 
quirements models. Again, the “carving" technique was employed. Data Morev a- well 
as transforms or groups of transforms were prime candidates for units. 

Lessons Learned 

To date, the STGT team. GE and NASA, feels that the requirements analysis performed 
on this program was successful. There have been, however, a couple of lessons learned 
from this experience. 


6 


ORIGINAL PAGE IS 
OF POOR QUALITY 


S. Cohen 
GE/STGT 
6 of 24 






2 o a „ 

ttH}U Op 
o<bS 
IlcSk 
DC UIJ- 5 ) 

UJ & z Ul[ 
a. O — t- 1 


S ID 


I * 




gi 

| 


M 


1 

*mm& Su 

1 MaZllflS 

B| 

HH 


ZOD 

|oao 

UOut 

gp 


■f 


''Sn w “ ^ 

' r*S5^ 

Jo5“ j. I >— ■ 

tEOB f 2 1 
z o ui o 1»», L_ 

o g'— i s'? E 
i,J Sr-lte 






f 0 \\ z s 

^s\ <o5 v ^3P 

ini® 

te^fc 

yplfl 

HUT 


Mil 

“ w 3 * LU 

*oafr u 
o eoHU 

S(9ui<p 


'W/M 

^5u. 

^issBg 

<^5 c/3 cn Q 



OR’GiMAL PAGE fS 
OF POOR QUAUTY 


S. Cohen 
GE/STGT 
7 of 24 



• The use of modern software engineering principles on a program 
whose schedule has been set with the traditional emphasis of effort 
in the later project phases (e.g. Code and Unit Test Phase) can cause 
a conflict. Typically, in this situation, not enough time is allocated to 
the Requirements Analysis Phase causing requirements analysis to be 
continued into the Preliminary Design Phase. 

• It is not easy to separate implementation from requirements issues 
when developing a requirements analysis model. However, when de- 
sign concepts are incorporated into the requirements model, the SRSs 
have to be repeatedly updated during the course of the project to reflect 
changes in the design! Additionally, as derived requirements are incor- 
porated into the models, software developers spend much of their time 
balancing the models. This interrupts precious time which could be 
spent on design activities. 

Conclusion 

“Is SA suitable for an Ada project to be designed using an object-oriented approach?” is 
a question often asked. The experiences of STGT have shown that using SA for a large-scale 
Ada project resulted in a rigourous, precise and comprehensive requirements analysis. The 
software requirements models were useful in many areas - directly and indirectly related 
to the software development process. It is our feeling that the use of SA played a key role 
in the success of STGT’s requirements analysis. The effect of using SA was so great that 
its benefits were realized into the Detailed Design Phase. 


8 


S. Cohen 
GE/STGT 
8 of 24 



References 

1. DeMarco, T., Structured Analysis and System Specification, Yourdon Press, New York, 
1978. 

2. Chikofsky, E.J. and Rubenstein, B.L., “CASE: Reliability Engineering for Information Sys- 
tems ", IEEE Software, March 1988, pp. 11-16. 

3. Booch, G., Software Engineering With Ada - Second Edition , Benjamin/Cummings Publish- 
ing Company Inc., Menlo Park, CA, 1987. 

4. Hanner, M.A., “ CASE Tools - Productivity for the Masses", DEC Professional, December 
1988, pp. 38-47. 

5. Washenko, R.A., CASE Tools Evaluation, TIS 87C1T016, November 1987. 

6. Cohen, S. “ CASE - Methodology and Tool ”, Proceedings GE Software Engineering Confer- 
ence, May 1989. 

7. Nielsen, K. and Shumate, K., Designing Large Real-Time Systems with Ada , McGraw-Hill 
Book Company, New York, New York 1988. 


9 


S. Cohen 
GE/STGT 
9 of 24 





S. Cohen 
GE/STGT 
10 of 24 


Chart 1 



cn 2 
co.E 
an p 

f=i E 

CD 



O c= 

o ZD 

CD o 
CD <— 
CD 


On 

oo 

o* 


o 

a> 

jd 

B 

> 

o 

2 


§JD 


'O C3 
G 'O 
<S << 

a> 

s 

1 ^ 

rj C3 

S a> 

w <c 

23 ® 

u ^ 

c/j 

Cm 

o £ 

S « 

is 

U 

2 a> 

a b 

e-3 

<C « 
2 2 
H c/5 


E-^l 

s 

90 


Q 

Si 


J*. 

£■3 

2 I 

e-o 

CO 

Co 

«s 

^3 

si 

o 

CJ 

CO 



CM 
t : 

(a 

x: 

O 



CO 

cc 

Q 

H* 

o 

u. t 

0 i 

& * 

I 8 

1 s 

i S 

O o 

o 2 


< 

£ 

& 


CO 

oc 

Ui 


co co 
uj S 
o Zi 
> O 

£ 3 

CO > 

CM 


y o t 


UJ 

p ^ 
* 8 
8i 

< S 

CC O 

h a 

< < 
co P 
< < 
z a 

co co 
uj ui 
a a 
> > 
o o 

0C CC 

a. a. 


z 

3 


O 

a 

CL 

UJ 

co 

D 

6 


i 

UJ 

CL 

D 

P 

a 

UJ 


a 

CL 

< 

s 

s 

CQ 

£ 

P 

CO 


CL 
< 
UJ 
>- 

fc UJ 

d a 

CQ UJ 

i\ 

-i o 
< o 

Z CO 
O ui 

5 1 
ac z 

uj 5 

Q. 2 

O *> 
w m 

is 

» E 

UJ CO 
Q <0 

|3 

CC 

Q. I 


uj I 
p 1 

Zt UJ 
< »- 


r? 3 

5 o 

5 cc 
O CQ 

0 

Uj CO 
CO O 

II 

UJ $ 

§e 

* a 

1 3 

o 
< 
I CQ 


S. Cohen 
GE/STGT 
11 of 24 

















cn 

CO 

On 

oo 

CD 

c= 

q : 

"E 

ON 

P 

"O 

c_ 

CD 

o’ 

m 

1— 

u. 

<U 


£ 

c 

o 

c= 

c 

a> 

o 


> 

CD 

CO 

o 

£_ 

CD 

o 

Z 


~Q CS 
C 
C3 

$& 2 

0 S 

1 ^ 
fj CQ 

2 a) 
H OS 

W < 

S3 


Si 

g 


<J 


o 

H 

CA 


® & 

s ^ 

15 

^3 S 

a ^ 

*<3 

^ s 
££ 


C-> o 

O I 
S-I 1 

Cu ^ 

S 



© 

■o 

o 

O 

© 

■o 

< 

© 

o -g 

0 <o 

o' 3 

kl O 

Q. © 

m X 

(0 A 

■o Jl 

< o 

© © 

II 

1 


CO 

I- 

o 

o 


© 

CO 

© 

H 

3= 

O 

© 

o 

© 

E 

E 

o 

O 


© 

© 


© 

© 

oc 

© 

© 

o 

CO 

© 

O) 

© 


o 

o 

o 

•% 

o 

m 


© 

> 

O 


o 

o© w 

<N © 0 

I? o 


CO 

■c 

<0 

r: 

o 


I I 


in 

m 

i 

!& 

© 

CO 

C E 
D 
O 

O) ? 

f g 

!S 

© 

CO I 


o> 

I 

© 

CO 

© 

.© 


© 

■o 

o 

o 


£ 

© 

© 

A 

E 

© 

ii 
© ® 
|2 © 

£ x 
o ® 
O c 

©5 
2 « 

■O 3 
© O 

fl 

II 

if 

O Q. 
© © 

5j © 

© o 

© *o © 
| O §> 

® CO ^ 

5 o« 

a. 

x 

ui i 


i i 


S. Cohen 
GE/STGT 
12 of 24 


Developers Ada certified 

Significant software engineering, Ada design, and Ada 
management training 

Managers trained in software engineering and Ada - major 
contributor to success 



JtMTtAl PUNNING 













































^ a 
S3 T3 

a> 

s 

O H 

^ - 

t3 co 

5 CD 

H OS 

<< &H 

U ^ 

««-< *£ 

° & 
5 gj 

s I 

es ^ 

O 'rt 

S3 o> 

a ^ 
a 3 
t5 

3 
u 




2 


^1 

Q 

SS 


QJ 


U C 
0) 

‘o 5 B 

CL 

^ . 

QJ 

si 

0 

• k 

1 


H ^ 



W 

■D 

O 

© 

2 

« 

© 

"5 

c 

< 

(0 

c 

a> 

E ^ 

a> = 
•- 2 
2. E 

i; 

a> o 

a £ 


jjc 

o 

a> 

o 

■o 

c 

© 


TD 

O 

E 


3 

O 

3= 

■a 

W 


co 

C £ 

O O) 


TJ 

CO 


CO 

"co 

>* ^ 


^ O CO = 


c 

CO 


CO 

■O 

o 

© 

E 


© 

E 


© 

c 

o 

•NM 

■a 

© 


o 

J£ 

O 

© 


© © 
E © 
3 To 

8 = 

5 ° 

Q o 


£5 

© 

© 2 
J& 

s © 


© 

© 


o 

o 


© 

© 

o 

© 

a = 

© 

©2 
«5 © 

© c 

o 

© ° 
c*o 
o c 
!J3 (0 

g © 

S= -Q 

O © 

© £ 
Q. © 

co 2 


CO 


to 

t: 

co 

-C 

O 


S. Cohen 
GE/STGT 
14 of 24 


A PICTURE IS WORTH A THOUSAND WORDS 





S. Cohen 
GE/STGT 
15 of 24 









CO <o 

CO.C 

an p 
E = 

F- CD 


£-0 
o cz 
O 3 
CD o 
CO <— 
CD 


bB 


X> c« 
s ^ 

o> 

e 

1 £ 

5 JL 

t3 cs 
H « 

22 © 

*< Fh 

w c« 

Cm #p * 

® >> 

S ^ 

i 5 

o 73 
— QJ 

a jj 

^ S 

_g 2 
H ^ 


-Si 

Q 

S2 




K 
• *•** 

u ^ 

2 2f* 

«- -c 

3 


CO 


3 

CKJ 

s: 

j^> 

oq 



CO 

= (0 
E To 

(0 c 

s« 

O- CO 

fs 
£ © 
o E 

a) 5 


CO 

CO 


cr 

0) 


To* 

c c 

<i 

»(S 

§JT 

®£ 

3*0 
O’ a> 
0) co 
(E3 

<D <D 
k. CO 
CO O 

C 1“ 

o o 
COP 


O -T 


CO 

CO 

CD 


D) 

c 

o 

Q. 

a> 

Q 


o 

u_ 


■o 

a> 

5 c 
O C 
= © 
< CO 


■2® « 
0) © 

*o £ 
o'" 

So 

■o-g 

© E 

5® 

-JUJ 


a> .= 

> 

a> 

— co 


a> 

o 

o 

c 

n 

■o 

0> 

■o 

o 

a 

x 

a> 

CO 

E 

o 

To 


Zl co 

?§ 
a> o 

— Its 

.e © 
£>§ 


<D 

E 

£ 

*5 

cr 

a> 


co 

3 

2 

~ co 

IS 

To 

o£ 

o 
c o 

£S- 

2 M 
4 ) CO 

c a> 
5 o 
5 o 


■o 
a> 

£ 

o _ 

5 5 


0 
co 
a 

1 

o 

J_ 

O 

CO 

o 

■a 

c 

CO 

CO 

S 

o 

5 

To 

■a 

o 

co 


3 HI a. 


CO 

c 

o 

o 

o 

To 

Q 


ico 

a> © 

■a a 

s*s 

(j) CD 

O.E 


r- 

t: 

03 

H 

O 


S. Cohen 
GE/STGT 
16 of 24 


Unique name for each data item 




CO OT 
CO.E S 
2 


CD 



<=-o 

o c; 

S i 


o 

rn 

u, 

<L> 

-C 

s 

<U 

> 

o 

z 


T 3 C 3 

S3 TJ 
CO 

a> 

£ 


biD 


o 

S3 

43 

CJ 

cu 

H 

W 

<Z) 

3 

o 


H 

■s § 


-Sj 

£ 

S£ 


CO 

a> 

Pti 


8i 

> ^4 

^ 1 

a*, j 


I § 

*< 

u 

;=3 cu 
0U £ 

o<5 
^ g 

a> r 
43 £ 
H cz> 


as 

'o’ Sfl 

i- -b 
(3n b 

£ ^ 


o 

H 

CA 

*C« 


■i3 

O 

&s 


S3 

GQ 


w 

(0 

>* 

(0 

c 

< 

tr 

o 

CL 

CL 

3 

CO 

o 

■o 

© 

(0 


< 

co 


i 

i 

.© 


LU 

CO 

< 

o 


W 

(0 

© 

o 

o 


c 

o 

© 

c 

a> 

£ 

3 

O 

o 

■o 

< 

CO 

XJ 

a> 


© 

o 

o 

E 

TJ 

© 2k 

(0 o 

« c 
a> § 


« «o 

o § 
.O o 


3 

< 


O .2 

m <0 
•a c 
a> o 

— o 

o 32 

— © 

Q. 3 
£ c 

3 LU 


CO £ 


I I 


CO 

cr 

co 


c 

o 

CO 

o 

o 

0) 

a. 

CO 


co 

c 

a> 

E 

© 


oo 


© 

e 

o 

CO 


c O) 

0 ) .£ 


a* 

© 

DC 

■ ■ 

C 

m O 
© r; 

is 

S-a 

?2 
CO Q- 


O 

O 


c 

© 

CO 

43 

3 

© 

T3 

© 


> 

O 


W 

© 

■o 

o 


CO 

n 

3 

a 


o 

S 

© 

© 

Q © 

M- © 
© © 
© o 

TI O 

ia 
— © 

of 

© Q. 
« X 
D © 


l l 



00 

t: 

© 

n 


O 


S. Cohen 
GE/STGT 
17 of 24 


Teamwor*/SA® is a registered trademark of Cadre Technologies, Inc. 




S. Cohen 
GE/STGT 
18 of 24 


Chart 9 



Chart 10 




S. Cohen 
GE/STGT 
20 of 24 


wnen Design concepts Incorporated 
Requirements Model, SRSs Repeatedly Updated 



GRIG-' ,1 PAGE IS 
OF PC QUALITY 


S. Cohen 
GE/STCT 
21 of 24 


CONTROL 

GROUND 

EQUIPMENT 






co 2 
cn_E 

O 

oo 

£ E 

ON 

-o 1- 

o 

ro 

u 

0> 

c-o 

JO 

c 

o Cl 

c 

V 

o 3 

> 

.9? o 

o 

7 

CD *- 
<_□ 

*-* 


'cS 

0> 

PS 


.&o 

5 

Q 

Q 


NN 

2 


o 
H 

◄ • -1 
50 J *3 

■§£* 

CS O | 

C3 ^3 

u 3 | 

'S • 

Z S S’ 

o s s 

*B ^ «CL 

cs S’ 

= J 

a 0=5 

P« T3 

Si 

t u a 

jS "5S 

H Q< 



a> 

c 

® 

Q 


2 >* 


r 
-= ® 
a. 

|E 
® 2 
E £ 
geo 

□■2 

(T c 
o 

0) 7 
2 o 
<u a 

£ 2 

c c 

o g 

COH 


c 

CB 


C© 

.® 


■o £ 


a 

£ 

c 

o 

CO 


® 35 

« ® 

^ o 
c 

CD <8 

• E 2 

o| £ 


o 

CB 

u_ 

n 

c 

® 

E 

® 


SE § 

£*3 
TO 
« O 

Oa 


S. Cohen 
GE/STGT 
22 of 24 


Chart 12 



Chart 14 


o a 

£ i 


'O C8 
C 'O 
c« 

§38 g 

© S 
2 H 

.3 -i- 

0 68 

5 <u 

H PS 


s ® 

.2 _g 

cj x3 
*pS cl> 

a j* 

< § 


© 7j 

£* ^ 

Pu o 

U 


H ^ 




S. Cohen 
GE/STGT 
24 of 24 


Documentation Burden!! 





“ADA AT JPL: EXPERIENCES AND DIRECTIONS” 


T. Fouser, JPL 






JPL 


CO 


c 


o 

• m—m 


o 


0 ) 




5 


■O 


c 


CO 


CO 

a) 

CD 

<0 

O 

o 

c 

Um 

0 

"5 

■ MM 
0 

(0 

(0 

E 

Q. 

o 

X 


LU 


■ ■ 


CL 


”3 


H 


< 


0 


"O 


< 



LU 

o 

oc 

o 

CO 


2 

c 

a) 


O 


a> 

a 


o 

<o 

0 ) 

GC 


a> 

k. 

(0 

£ 

**- 

o 

(/} 


T. Fouser 
JPL 
1 of 12 


November 30 , 1989 



Ada AT JPL: Experiences and Directions 



T. Fouser 
JPL 
2 of 12 


adaupdt.f89 TJF 11/30/89 



Ada AT JPL: Experiences and Directions 


2 2 
3 5 
£ 5 


5 < 

o £ 
® £ 
S o 

o “• 


I 1 

i I 
> 0) 
c > 
0) <D 
4- "O 

c = 

0) <D 

E > 
Q. ^ 

O O 
— *-» 

0) o 

> Jr 
<D Q. 

■o -O 

O *5. 
LU (0 
Q > 


<n )- 

a) « 


T. Fouser 
JPL 
3 of 12 


Ada compile time slow (up to 5x FORTRAN); run time okay 



Ada AT JPL: Experiences and Directions 


•o 

c 

o 

o 


a 

© 

co 

to 

r 

o 

Q 

Q 

3 

CO 

c 

o 

’5 

o 

0) 


>* 

(0 

TJ 

1— 

0) 

CL 

O 

3 

</> 

co 


</> ■“ 
c 

.2 f 

'co * s 

t % 

I 1 

o a. 

& s 

> < 

§ • 

TJ 

O 


o 

CO 


CO 

— 3- 

1 « 

! 1 

a> 

TJ TJ 

a) 

o 0) 

c T3 

(0 <0 
■O c 
< o 
_ a 

0) m 

g 5 

2 ° 
-Q f 


c 

o 


CO 

a 


a> 

o 


2 S 


0) 

Q. 

X 

0) 


CD 

E 

CD 

O) 

CO 

c 

CO 

co E 
.£ co 

CO ID 

o> < 

£ 3 

1 1 

a. a> 

CO > 

o o> 
co 

3 • 


a. 

c ® 

o c 

© 

• g 

g • s- 

2 ® ® 

r 1 5 

g | i 

Cm*- 

o ? S 

2 S o 

©Q-o 

Q- _J >*- 

■O 0. ° 

c “» « 

o TJ 2 

SK ® -2 

« i ® 

o © o) 

| © 5 

5 2 ~ 

3 5 


CO 

n 

o 

(3 


T. Fouser 
JPL 
4 of 12 


adaupdt.f89 



JPL Ada AT JPL: Experiences and Directions 



T. Fouser 
JPL 
5 of 12 


used DEC Windows ( Ada binding not mature ) 



Real-Time Weather Processor ( Cont’d ): 


CO 

c 

O 

+5 

O 

a> 

a 

■o 

c 

CO 

CO 

Ml 



EL 

n 


T. Fouser 
JPL 
6 of 12 


adaupdt.f09 TJF 11/30/89 5 



JPL Ada AT JPL: Experiences and Directions 


c 

o 

E 

~ E 

a> o 

1 o 

2 ® 

> £ 

c o> ~ 

® ® g 

C _ E 

a> a. 
E •- o 

a. £ a> 

° £ > 

*5 as ® 

> 5 ? 

■§ « ’« 

T3 Q. 

2 < ^ 

3 O O 

I 2 | 

O 05 

5*2 

8 9 | 

UJ i- = 


® -s 

Q. O 
X C 


<0 < 

0 2 

1 § 

- S 

CO ~<D 


CO ® 

® CO 


T. Fouser 
JPL 
7 of 12 


TJF 11/30/89 6 



Ground Communications Facility (Cont’d): 


CO 

c 

o 

o 

0) 


"O 

c 

CM 


s 

•5 

3 

s 

o 

$ 

(0 

© 

O 

> 

o 




© 

o 


© © 


© 

Q. 

X 

© 


co 

o 


"D © 

3 © 

© ■Q 
Q. < 

ii 

c _ 

0) £ 

1 5 

w CO 

ki 

2 E 

© £ 

o> © 

£ ? 

— l. 

A O. 

Q. $2 

CO i 
O 1- 

«0 ^ 

3 • 


(0 

O) 

CO 

c 

CO 

E 

■o 

c 

CO 

CO 

k. 

0) 

CD 

c 

O) 

c 

CD 

c 

D> 

*55 

0) 

"O 

c 

CO 

N 


CO 

"O 

< 


o> _ 

§ 3 

1 1 

I I 


o 

CO 


0) 

Q. 

X 

CD 



T. Fouser 
JPL 
8 of 12 


adaupdt.f89 TJF 11/30/89 7 



Ada AT JPL: Experiences and Directions 


CO 



h- 


X 

IT) 


Ot 

c 

‘<5 

k. 

H 

<0 

"D 

< 

75 

v_ 

a> 


x 

T> TZ, 

< 0 
£ CO 


5 

O) 


o 

o 


4-4 O) 

O) LU 

1 1 


= -S 

a> 3 
a> < 

S -a 
~ ® 
O 


CO 


CB 
> 
T3 
< 

s .* .* 

2 2 8 

§ * ^ 

O T- 1- 

0 N 


O 


CD 


CO 

c 

Q> “O 


N 

o 
CD 

^ “D 

c <5 c5 

" £ £ 

-TOO 

§ £ £ 

0) 

V 

t 

o 

£ 

CO 


<0 

® 

E 


■o 

® 

v. 

® 

*= 

o 

= C0 

T» 

< 


m 

co 

c 

<0 ® 

a> E 

» co 

3 ? 

o £ 

° if 

® = 
CO 
3 
O 


c 

a> 

E 

Q. 

4- O 

m ® 

® > 

E ® 

a T3 

® ■§ .E 

I | =« 

<M <D £ 

*■ C s 

I r 2 

a « °- 

? 3 S 

V> S < 

3 5° 

.i c ! 

s £ i 

c 3 CT 

O) Q (0 

co c c 

® O ® 

Q O 5 


« 

® 

E 

f 1 

® 2 

0 _ 

O 2 
= ® 

a o 

c — 
0 0 

E 


4- '2 


• s 

CO 
QC 

iT -a 
— ® 
(O o 
c c 
o <o 

S3 > 
CO T3 
QC < 


I 

c 


O) 

$2 

tj 

CL 


T. Fouser 
JPL 
9 of 12 


Project-specific training also 



Ada AT JPL: Experiences and Directions 


05 



T. Fouser 
JPL 

10 of 12 


have possibilities ( functional and performance ) 



JPL Ada AT JPL: Experiences and Directions 


o 


1- 

i- 





z 

z 




c 

HI 

LU 




0) 

2 

2 




*5 

CL 

O 

z 

o 

CO 

CO 

CO 

k> 

5 

_J 

GC 

c 

c 

e 

CO 

LLI 

> 

> 

o 

o 

s 

o 

'•H 

Q) 

LU 

Z 

*3 

co 

CO 

> 

O 

LU 

DC 

GC 

GC 

O 

CO 






0) 


<5 




E 

Ada 

O 

GC 

CL 


oo 

c- 

1 

CO 

CD 






u. 






O) 


O 




c 

_i 





< 

O 




u 

c 

i- 

O 

H 

CO 

* 

in 

20G 

o- 

CO 

E 

CD 






"O 






4-< 


o 




CO 

o 

Ada 

O 

CO 

in 

o 

in 

o 

in 

CM 

E 

<D 

* 



A 




CO 

CO 

(0 


a) 

E 


(0 

CD 

DC 


* 


Q. 


T. Fouser 
JPL 

11 of 12 


in C or assembly language 



Ada AT JPL: Experiences and Directions 



T. Fouser 
JPL 

12 of 12 


adaupdt.f89 TJF 11/30/89 



“ADA AND THE OMV PROJECT” 


W. Harless, TRW 






OMV Overview and Ada Lessons Being Learned 
Walton Harless 

Abstract . The Orbital Maneuvering Vehicle (OMV) project is involved 
in the development of an unmanned, remote control, reusable 
utilitarian space vehicle and the associated support subsystems. 
The vehicle is to be deployed and recaptured by the Space Shuttle. 
All functional requirements are derived from a set of Design 
Reference Missions which describe a composite set of overall 
capabilities. The development effort is managed by the Marshall 
Space Flight Center with a launch date scheduled for late 1993. The 
operational flight software and the ground control software are 
being developed in Ada. These software systems are currently in PDR 
phase. This paper discusses some of the Ada related observations 
that have been made to date. 

OMV Background. The OMV project is the result of a need to extend 
the capability of the Space Shuttle to meet an anticipated set of 
diverse requirements as they evolve for the Space Station and other 
orbiting space platforms. There is an existing Shuttle capability 
to place and retrieve satellites in low earth orbit. Servicing of 
platforms and vehicles at higher orbits becomes considerably more 
impractical or impossible. The OMV capability is responsive to this 
need and the various OMV configurations provide a flexibility over 
a wide range of mission requirements. 

The OMV is an unmanned vehicle that is deployed from the Shuttle 
and piloted from a ground station or commanded from the Space 
Station. The vehicle may be configured to accommodate differences 
in payload mass, mission length and mission duration. The OMV may 
be space based for an extended period between missions and refueled 
or serviced on orbit. Vehicle navigation is highly automated by 
means of the on board guidance and control software and the mission 
sequencing capability. The actual docking phase of rendezvous 
operations is accomplished by a man-in-the-loop pilot that controls 
the vehicle through a ground based pilot interface. 

The ground station provides the pilot with mission critical data 
and vehicle control in real time via the NASCOM link. The on board 
radar information, position data and video image are displayed on 
the pilot station chromatics graphics terminal. All other 
information in the vehicle downlink is available to the pilot for 
analysis. This data is also made available by the ground control 
system in real time and historically for the various mission 
support and monitoring functions. The actual real time control of 
the vehicle is accomplished by the pilot with the custom hand 
controllers and switches the comprise the pilot station controls. 

Software . The two basic software categories for the OMV program 
are the Flight Software and the Ground Software. The major portion 
of flight software is that which resides in the OMV on board 
computer (OBC) and it will be primarily Ada (95%). The remainder 
of that which is called flight software is non Ada software and it 


W. Harless 
TRW 
1 of 22 



consists of the embedded OMV subsystem firmware and the control 
software intended to reside in the Space Station computer network. 

There are seven different software entities that comprise the 
ground portion of the OMV effort. The software for five of these 
areas will be largely comprised of that which has previously 
existed on other related programs or was developed in prototyping 
efforts early in the OMV program. These software systems provide 
the flight planning, pilot training and much of the test and 
integration capability. However, the actual Mission Operations 
Software that will reside in the Ground Control Console is to be 
developed entirely in Ada. Also, any additional test sets that are 
to be developed for use with the Electronics Ground Support 
Equipment (EGSE) will be written in Ada. 

Of significance is the fact that the most visible and critical 
portions of the OMV software are to be developed in Ada. These are 
the Operational Flight Software and the Mission Operations 
Software. These two subsystems complement each other as the air 
and ground portions of the real time OMV capability. The flight 
software provides the typical on board GNC and communications 
functions as well as mission sequencing, status monitoring and 
redundancy management. The flight machine is the CDC 444RR (1750A) 
with a dual CPU. 

The ground control software is to be hosted in the ground 
control console (GCC) which is comprised of two VAX 3600 machines 
that communicate with each other through a DMA link. In addition 
to pilot display and control, the ground software will provide all 
telemetry and command processing, data management, operations 
control and data analyst services. 

OMV Ada Evolution . The conclusion of a programming language 
evaluation study during the proposal phase of the OMV project 
stated that Ada was the most suitable high order language 
(independent of hardware and other considerations) when compared 
to FORTRAN or JOVIAL. However, at the time of the original study 
(1984), additional selection factors such as existing hardware 
availability, software development environment maturity and the 
existence of ''reusable" FORTRAN code for implementing OMV 
algorithms were enough to tilt the scale in favor of a FORTRAN 
implementation for both the flight and ground systems. The existing 
FORTRAN implementations of closely related algorithms and test 
systems represented a considerable amount of cost savings in the 
overall developed system. 

Nevertheless, by joint agreement at the beginning of the 
contract, the suitability of Ada to the OMV project was to be 
reviewed. The continuing evaluation strengthened the original 
conclusion that Ada best met the language requirements for both 
ground and flight software on OMV. Then in an OMV language trade 
study released in March 1987, a revised conclusion stated that Ada 
was not only the best choice, but that no other language offered 
a defensible alternative for a development effort whose anticipated 
useful life extends beyond the end of this century. The maturity 
of the available support had progressed to a very credible stage. 
The availability of Ada experience and Ada training also looked 
attractive. With emphasis on the fact that Ada was the language of 
choice for development efforts of significant expected life span, 


2 


W. Harless 
TRW 
2 of 22 



the decision was made to implement the major development efforts 
of the OMV project in Ada. This meant that the Operational Flight 
Software and the Mission Operations Software were targeted as Ada 
development efforts. 

Development Teams . The flight and ground software development 
efforts are two distinct segments of the overall effort. It is 
proper to describe them in different terms since they are separated 
by geography as well as experience base. The flight team is largely 
composed of personnel with extensive experience in real time flight 
systems. The actual language experience is mostly assembly language 
with a significant amount of non Ada high order language 
experience. Before the OMV project, there was virtually no prior 
Ada experience. 

The ground team background contains noticeably more application 
experience as opposed to real time development. The experience in 
high order language is much more prevalent than assembly as well. 
Most of the ground team had been involved with at least one 
previous Ada development effort, although the software systems 
produced were applications, software tools and environments. 

All of development team members have been involved in extensive 
Ada training. The types and amount varied considerably. There has 
been a considerable amount of accredited course work as well as 
various types of seminar involvement, in house training and hands 
on experience. 

Significant Implementat ion Factors. There are several factors that 
are a part of the OMV program by design that are noted at this 
point since these factors have a significant influence on Ada 
experiences thus far. Observations concerning the Ada experiences 
are made with these factors in mind. 

1750A Flight Machine Architecture. The originally intended Litton 
4516 target machine selection virtually eliminated Ada from 
consideration due to lack of availability of an Ada tool set. At 
the time of the post award language study, there existed at least 
four validated compilers for the 1750A and three others were to be 
validated shortly. 

VAX/VMS Ada Development Environment. The VMS Ada environment is 
the system of choice as the development host for both the flight 
and ground software efforts. It is generally agreed that VMS is 
one of the most mature environments available for Ada development. 

TLD Toolset. Of those systems available, the VAX/VMS hosted version 
of the TLD cross compiler and toolset was chosen for the flight 
software development effort. The factors in the decision involved 
the existence of the TLD Interpretive Computer Simulation for the 
1750A architecture, the proximity of the TLD (Terry L. Dunbar) 
Corporation to the development effort and the reasonable cost. 

Prototyping/Benchmarking Exercise. The decision to acquire the TLD 
toolset provided both a motivation and opportunity to perform a 
comprehensive set of prototype/benchmark tests. These tests were 
to evaluate the efficiency of the TLD toolset from an operational 


3 


W. Harless 
TRW 
3 of 22 



point of view and to evaluate the efficiency of the code generated 
by the compiler for each language construct. Also, the benchmarks 
were used to evaluate the TLD 1750A simulator and run time kernels. 
The results from this effort were captured in the Software 
Standards and Procedures Document for the OMV project. 

Prototype Conclusions . The overall impression of the TLD compiler 
is that it is very efficient and reliable. The compiler is 
intelligent in optimizing source code into efficient object code. 
There are problems and needed enhancements, but no show stoppers 
and the support from the vendor has been extremely responsive. The 
development environment is reasonable for developing software for 
a generic 1750A architecture. There will be enhancements required 
in order to emulate unique characteristics of the actual target 
machine. Basically, these enhancements are in the areas of 
simulating the timing and memory conflict associated with a dual 
CPU, more flexibility with regard to interrupts, a more 
representative I/O system and provisions for input to the 1750A 
simulation from an outside program. 

The implementation of several Ada constructs were judged as 
inappropriate for use in the flight system. Generally the 
associated expense of such structures was cited as the offending 
characteristic. A detailed list of these recommendations are 
available, however the more significant constructs to be avoided 
appear to be the tasking, variant record, private formal parameters 
in generics and access types. 

In general, any constructs that utilize dynamic memory 
allocation are not regarded as desirable in the flight system 
software. Reasons for this go beyond the concern in terms of memory 
and CPU expense. Of significance is that it is desirable for 
program execution to be deterministic for verification purposes. 
It is also desirable for memory to not be dynamically allocated so 
that everything in memory can be in a known location for telemetry 
fetching purposes and to accommodate on orbit patching. 

Observations to Date . The VAX/VMS development environment for both 
the flight and ground software systems is performing very 
satisfactorily. The ground team uses as a basis for comparison 
their prior development experience in a number of environments 
including the Alliant, SUN and various PC hosted environments. The 
compiler and linker are very efficient and reliable in terms of 
user interface as well as the generated code. The symbolic debugger 
is very mature providing an extremely useful run time environment. 
The CMS provides a flexible library system that tracks the various 
modules and their change history, enforces user control of modules 
and provides group and class operations. 

The eventual porting of software to the respective target 
machine is not expected to be an issue. In the case of the flight 
effort, the executable image will simply move from the TLD 
simulated environment to the target machine. The initial 
impressions of the simulator have been that it provides an accurate 
rendering of a generic 1750A target computer. Tailoring of the 
simulator to more closely represent the actual flight machine is 
expected to have been completed well in advance of the test and 
integration phase. The relatively small percentage of flight 


4 


W. Harless 
TRW 
4 of 22 



software that is expected to be implemented in assembly language 
may be integrated within the simulator environment. 

The ground software migration will be from an initial 
development environment on the VAX 780 to an environment on one of 
the VAX 3600 series computers. This move will be conducted when the 
hardware is available in a timeframe well before the test and 
integration phase. The experience of the ground team with porting 
Ada source code between various vendors and models of hardware 
indicates that this should be a relatively painless procedure 
regardless of the development phase in which it takes place. The 
ground control software is to be implemented entirely in Ada. The 
only exception is the Job Control Language file that actually boots 

the system. . 

The generally accepted view that the integration and test phase 
of an Ada development effort may be significantly reduced in 
comparison with the integration phase of other languages is 
supported by the prior Ada experience of the ground software team. 
The observations to date indicate that even with the very large 
complex systems, source code that compiles cleanly will run 
comparatively well the first time that it is integrated. The 
problems associated with inconsistencies in definition and with 
unexpected side effects are greatly minimized. The mature ACS will 
eliminate problems associated with incompatible object versions and 
compilations in general are simplified by the Ada packaging 
concepts . 

observations on Constructs . The largest single factor in 
determining the desirability of an Ada construct for a particular 
application appears to be the maturity of the compiler and the 
associated Ada environment. Currently, the second leading factor 
is the set of constraints with the target system although the 
importance of this may diminish as the Ada language tools continue 
to mature and the hosting hardware improves. These trends would 
tend to reduce the number and magnitude of target host constraints . 
Finally, an increasingly significant factor is the experience and 
training of the developers. As the tools and hardware improve, the 
familiarity of the developers with the language becomes the 
significant factor in determining the degree to which the Ada 
capability is fully exploited. 

For purposes of observation, consider that there are three basic 
levels or categories that describe the usage of Ada constructs on 
a particular development effort. These are: 1) Constructs that are 
avoided - a diminishing yet stubborn group 2) Constructs that are 
applauded - those that are used universally throughout the effort 
3) Constructs that are Contested - those for which no universal 
opinion exists. The members of these categories for the OHV project 
are determined officially and otherwise by the factors described 
in the previous paragraph. A discussion of representative members 
of these categories follows. The list is not exhaustive because, 
among other reasons, membership sets continue to be dynamic. 

In the category of Constructs that are Avoided, Tasking is the 
most notable member. For the OMV, project the reasons are numerous 
and typical . There is a considerable amount of expense in terms of 
memory and CPU with all implementations of tasking. For the flight 
software, there is a desire to avoid all dynamic memory constructs 


5 


W. Harless 
TRW 
5 of 22 


and those that would prohibit a deterministic execution. At the 
noise level, there is distaste for the fact that the 
implementations of tasking do not resemble virtual tasks in many 
respects . 

Many constructs are applauded and for the reasons that were 
intended by the language design. Most notable are the packaging 
and information hiding constructs. Also the Ada exception handling 
approach offers a very clean and efficient approach to anomalous 
conditions. The concept of generic code is often applauded and 
cited as having great potential in the reusability arena; however, 
in the OMV effort and from experience, it would appear that there 
will not be an overwhelming amount of generic code in the final 
product . 

Many constructs are contested for reasons ranging from 
prohibitive circumstances to preference. For example, variant 
records are prohibited in the flight code because the TLD compiler 
generates a tremendous amount of control code. However, in the 
ground control software, there are a number of message passing 
applications that are greatly simplified with the use of this 
construct. The Separate construct instruction to the compiler has 
experienced difficulty in the early VAX/VMS implementations as well 
as the TLD compiler. This may have influenced decisions to 
eliminate large employment of this construct although temporary 
usage of it during various development stages is quite common for 
convenience reasons. Mandates concerning uniform usage of context 
clauses receive mixed reviews from the developers. The trade off 
is in the area of readability versus self documentation. The 
relative merits of many other constructs are weighed in terms of 
utility and readability versus perceived or actual expense. These 
types of constructs include Arrays with initial values, IF 
statements with compound conditions and Private types as formal 
parameters in generics. 

Overall Observations . The overall impressions with the Ada language 
are extremely good. This is not unexpected considering that the 
language of choice for the OMV project apart from non language 
constraints has been Ada since the proposal phase of the program. 
Experience since the program start continues to reinforce this 
position. Some of the observations follow although this is not to 
be considered an exhaustive list. 

Prototyping. The prototyping/benchmarking exercise that was 
conducted shortly after the Ada implementation decisions were made 
produced a number of significant benefits. In addition to 
identifying the constraints that existed for an Ada implementation, 
the exercise provided an extremely good hands on learning 
experience. A similar exercise should be considered in the early 
stages of any Ada development task and especially where performance 
characteristics of Ada for the particular target are unfamiliar. 

Maintainability. The enhanced maintainability characteristic of 
Ada is generally recognized. In addition, observations of the team 
members from previous efforts as well as the OMV effort thus far 
substantiate the opinion that? the code is inherently very readable. 
The strong typing and information hiding characteristics of the 


6 


W. Harless 
TRW 
6 of 22 



language minimize opportunities for breaking existing software in 
any modification or update process. 

Automation. The opportunities for automation of project related 
activities are enormous. The structured, coherent and consistent 
nature of the language are of course intended to support a language 
oriented tool set. Of particular note in the OMV effort has been 
the ' favorable results achieved with the use of portions of the 
ADADL development tool set. The developers have utilized automated 
assistance such as cross reference aids, pretty printers and 
reguirements allocation trackers. The PDR documentation for the 
flight and ground software PDRs was generated almost entirely by 
the DOCGEN tool . The actual development environment of the average 
Ada Compilation System (ACS) possess the capability to automate 
compilations, provide class and version operations and generate 
change histories. The availability of state of the art development 
automation as well as commercially available software packages 
appears to be guaranteed with the Ada language. For instance, the 
OMV project is utilizing a commercial data base system (SYBASE) 
server for all ground software data base related activities as the 
result of an extensive trade analysis between a large number of 
potential candidates. The selected system is a fast, mature and 
reliable system that interfaces with Ada extremely well. 

A final observation concerning automation opportunities in the 
Ada environment concerns the capability for automatically generated 
graphical representations of structure and control flow from source 
code. Typically the Ada developers are very satisfied with Ada PDL 
as a very reasonable and utilitarian representation of overall 
structure and control flow. However, there exists at present and 
for the foreseeable future a very significant demand for graphical 
representations of the software for use in interface with 
management, systems engineering and the customer. 


7 


W. Harless 
TRW 
7 of 22 



OMV OVERVIEW 



O 

LU 






LU 

ffi 

CO 

Z 

O 

CO 

CO 

LU 


(0 

■o 

< 


W. Harless 
TRW 
8 of 22 


November 30, 1989 



ORBITAL MANEUVERING VEHICLE (OMV) 



W. Harless 
TRW 
9 of 22 








OMV OPERATIONAL COMMUNICATIONS 



W. Harless 
TRW 
10 of 22 


POCC 





OVERALL OMV SOFTWARE STRUCTURE 



o 

UJ < CO > 


I ^ Vi 

J DC UJ t 
O O H - 

SxiiiQc 
-euj tz< 
5 h > S < u 


UJ 

r 

CO 

> 

50 h co 

CD CO h- 
7 D UJ UJ 

5 co k co 


UJ 

CO 


o 


^ Q- — 
WHO 

_ o < 

±Z(0IL 


£0-2 

-W3U 

ESwc 


_ -I UJ 

□ o — J 

2 CC O 

3 H CO 
0 2 2 

-OCOO 

?C300 


ill OP 

oF| 

-2?o 
5 co co o 


co 

UJ 2 
££ 
BE> 

_ Q </) 

> dc m 
— So 
_ O I W 


O DC 

\ P 

g 2 

_ 2 2 O 

Eoou 


o 

o 

Vi 

a > 
c 



o 



*: ac 


© ra 

1 «< 

w CC 5 CO 

co O ® ® 

Co U. Z (/) 



?< 


cc 

o n 

rvi V 



CO 

CD 

C 


-J 15“ 



o 


CO 


W. Harless 
TRW 
11 of 22 









TOP-LEVEL OFP SOFTWARE DATA FLOW 



W. Harless 
TRW 
12 of 22 


rv TCinMETflY 




MOS FUNCTIONAL BLOCK DIAGRAM 



W. Harless 
TRW 
13 of 22 











ORIGINAL PROPOSAL BID FORTRAN 
Known Tools & Experience 


£ 

CD 

£ 

o 

CO 


c 

D) 

'55 

a> 

Q 

O) 

c 

■ MM 

w 

■ ^M 

X 

LU 


a> 

co 

3 

a> 

cc 


<D 

CO 

3 

O 

CC 


T3 £ 

§ i 


■D 

0) 

"(D 

e^M 

O 

o 

CO 

CO 

< 

CO 

O) 

c 

> 

CD 

CO 

“co 

o 

o 


a> 

.Q 

■ MM 

T3 

£ 

O 


O 

o. 

a. 

3 

> CO 
Q a> 

£ s 

&S 5 

BJ 2 

3< 

a o 

w >, 

I- .tr 
co !r 
lu 5 
3 co 
O S 

LU 

CC 

< , 
CO 
< 


G) 

JQ 

JD 

‘co 


r < 


a> 

o 


© 

Q. 

X 

LU 

CO 

■o 

< 

c 

CO 

o 

• MM 

c 

O) 

CO 


a> 

o 

c 

CO 

c 

a> 


co 


.2 E 


0) 

h- 

a> 

c 

o 


CO 

.X 

o 

CO 

A 

>» 

CO 

CL 


CO 

■o 

2 < 

2 <= 

CO 0) 


-J g 
O | 

Z 5 

o o 
O 2 

111 n 

co .2* 


O 

cc 

CL 


CO 

■o 

< 


a> 

CO 

*: 

o 

CO 

co 

c 

o 


CO 

CO 


CO 

■o 

< 

£ 
■ MM 

LU 

CO 

o 

LU 


X .= O O 

co a> - g - 

iw <0 CO 

ra *r 


CO 

5 0) 

a. CO 

o «- 

_ CO 

£ a> 


$ 

a> 


O 

O 


W. Harless 
TRW 
14 of 22 


Remaining Software in FORTRAN or 'C' 



DEVELOPMENT TEAM BACKGROUND 


§ a 

5 Q 

o X 

E LU 

< ca 

4 - "O 

s < 

o <0 

1 1 

</) 2 


a> o> 

5 -| 

o.E 
— (0 


2 <H 


W. Harless 
TRW 
15 of 22 


All Development Team Candidates Have Participated in Ada 
Training 



o 


< 

DC 

H 

co 

"O 

< 

LU 

> 

(/) 

Z 

LU 

h 

X 

UJ 


* 

oc 

o 
5 

LU 
CO 
OC 
3 

o 

o 

a s 


a 

LU 

oc 

o 


LU 

2 (0 
w E 
> (0 
— I a> 
O H 
> ~ 
z c 

— <D 


0. 

O 


E 

Q. 


i £ 

co g> 

V > 
rr ® 

£ o 

P «- 


CO 

LU 

-J 

o 

oc 

H 

O 

LU 

O 

OC 

0. 

o 

oc 

< 

o 

H 

Q 

LU 

CO 

3 

O 

O 

LL 

(D 


OC 

O 


CO 

k. 


O 

<D 

z 

CO 

® 

OC 

o 

< 

a> 

00 

a> 

E 

< 

z 

a 

oc 

i- 

O) 

CO 

c 

® 

SE 

o 


CO 

CO 

LU 

® 

< 

2 

o 

CO 

O 

o 

a 

2 

oc 

5 


UJ 


o 

CO 

Q. 

u_ 

o 

LL 

“O 

3 

MH 

55 

Z 

LL 

LU 

h 

< 

1 

LU 

K 

Z 

1 

CO 

1 

z 

O 

I 


CO 

® 

<0 

o 

5 

x 

UJ 

D) 


C 

’55 

H 

(0 


00 


CO 

CO 

® 


3 

O 

CO 

CO 

a> 

CL 


£ 

o 

O 

c 

o> 

'55 

O 

0) 

> 

o 

5 

e 

3 

1- 

0) 

IHfe 

o 

a> 

<D 

z 

CO 

■o 

£ 

Q 

a 

< 

a> 

a> 

CO 



oc 

H 

z 

CO 

00 

3 

o 

CO 

o 

»♦— 

CO 

3 

O 

0 

1 

o 

s mm 
> 

0> 

k. 

TJ 

T3 

o 

CO 

D 

z 

1 

O 

< 

< 

c 

0- 

0L 

1 

1 

1 

1 

1 


W. Harless 
TRW 
16 of 22 



0) 

cc 

o 

h 

o 

< 

Li. 

z 

o 


111 

s 

LU 

-I 

CL 


(0 

~o 

< 


LU S 

5 o 

o 6 
< 0 ) 
2 .£ 

t | 

2 £ 

£C 

2 T3 

^ m 

^ % 

0 > 

Q 0> 

9. ^ 

1 1 1 -q 

DC "O 

3 0) 

h •£ 

i 

1 S 
5 3 

cr 

< 


LO 


(/) 

H 

co 

o 


LU 

CL 

O 

LU 

> 

LU 

Q 

o 

00 

1^ 

X 

< 

o 

Z 

< 

o 

in 

ID 

00 

X 

< 


CO 

** 

o> 

o 

X 

o 

CL 

co 

3 

O 

'C 

CO 

> 


.5 

C < 

<D 

E 

c _ 
O £ 
.is 5 
> = 
C 9 
LU ^ 

<0 2 
< I 
s> i 

3 O 


CO 


CO 


0) 

■o 

o 

o 

o 

0) 

S' 

O 

< 

o 

lf> 

1^ 


o 

ro 

3 

E 

CO 




co 

0> 

o 

3 


3 

a. 

E 



? O 

LU 


a S 

C/> 


IS ® 

CD O 

JC 5- 

O 

cr 


Q. 

u J- 

LU 


0) 0) 

X 


a. I 

LU 


E x 

O Tf 
O 2 

X 

cr 


co n 

< 


co O 

O Q 



a> ® o 

X 

a> 

CO 

o 

o 

o 

Iff 

C£ c 

LU 

ffl 

1- 

o a> .= 
O Q CO 

o 

a 

z 

H 

• • • 

E 

>■ 



h 



o 

■ 


1- 

■ 


o 



X 



CL 


>* 

o 

c 

0) 

0 

1 an 

iu 

o 

H 

o 


CO 

3 

CO 

> 

LU 


W. Harless 
TRW 
17 of 22 


Ada Constructs Trade-off Analysis 


CONCLUSIONS FROM PROTOTYPING 


CO 


> 

£ 

DC 

3 

h- 

< 


CO 


O) 

n 

CO 

C 

o tr 
<g o 

CD X 


Q LU 

n 

§ i 

Q 

LU 

5 ■ 

LU 


a> 

DC 3- 

(5 co 

CO "O 

o O 

o o 

H O 


o 

H 

< 

o 

CL 

0. 

< 

LU 


< 

LU 

DC 

DC 

o 

U- 

m 

UJ 

> 

CO 

z 

LU 

Q. 

X 

LU 


0) 

> 

s 

o 

C3 

&- 

CO 

c 


CO 

o 


CO 

CO 

4> 

a 

o 


S3 CL 

» 2 

fl> 


a> 

T3 

o 

o 

jC 

o 

3 


O 

o 


c 

£ LU 

2 22 


m 


x: 

o 

O) 

c 


W 

fl) A 
« 
3 « 
O-Q 

a> 


JC w 

</) nr JC 
<0 “■ 0) 


0. 

O 

x: 

o 

3 


3 H ^ 


o 
o 

I- 

co 

-J C o 

CC2 
h co 
CO « • 

o 

o 

LU • 

2 

O 

CO 


(0 
O (0 

“ H 
c 


<D « 

£ c 

O E .. 

§s§ 

f- 


<o 


"O 

0> 

<-* 

<0 

k_ 

© 

c 

a> 

O 

0) 

T3 

O 

o 

<5 ® 
^ c 

»- 3 
O O 

O E 

CD < 

co 
C « 

coZ 

■ ■■> 

CD • 


CO 

o 

a> 

c 

<D co 

o? 

o $ 

— a 

2 «= 

a> .2 

% 2 

|8 

CD CD 

m <3 
CO m 

0-S 

CO o 

E j2 

2 O | 


CO 


CO 


CO m 

a> 1 
Q-c 

HE 

CD 2 

II 

■=«£ 

is 

tr co 
O is 

<2 « 

og 


W. Harless 
TRW 
18 of 22 


SOME CONSTRUCTS IMPRACTICAL FOR FLIGHT REQUIREMENTS 
Dynamic Memory Constructs 

• TLM Fetching 

• Patching 

• Debug 



tn 

o 

LU 

CO 

“O 

< 


U) 

c 


o 

c 

LU 

I- 

< 

D 

O 

CO 

z 

o 


cc 

UJ 

CO 

CD 

O 


LU 


O 

cc 


LU 

(0 

■D 

< 

LU 

GQ 

< 

-J 

LU 

CC 

LU 

CC 


O 5.§> 

S ^ nCO 

0) OoO 
- OQ< 
CO 


X 

< 


CO 

CO 

LU 


< 

CL 


LU 


LU 

CC 

5 

CO 

Q 

LU 

0. 

O 

-I 

LU 

> 

LU 

O 


CC 

O 

0. 

CO 

z 

< 

cc 


00 

oo 


w o 

O g~ 

I s - c 


x,2Z 
< = 30 
>< CO Ci- 


ne O 

5 g 

't X 

o < 

!±i 8 a 


CO 

CO 


o 

z 

CO 


< 

H 

o 

H 

I- 


0. 

O 


LU 


* § 

8" 
CD X 
00 ^ 

X > 

If 

4- 3 

.C O 

o> 


h 
LU 

O 

CC = o 

* 6 * 

*•" c 

s ° 

o = 


= CO 
CO 


LU ~ c 


o 

E 


(D 

E 

0> 


* "oL 


E — 

LU “ CO 
Q fl TJ 
T3 < 

5 < 


O 

CC 

LL 

O 


CC 

o 

Q. 


^ Q 
0 s O 

IO o 

O) 1- 


W. Harless 
TRW 
19 of 22 


INTEGRATION TIME SIGNIFICANTLY REDUCED 
- Compilable Code 2 correct code 



OBSERVATIONS TO DATE (Including prior Ada 
(Continued) 


<0 

t: 



Q 

LU 

o 

o 


CO 

CO 

H 

o 

3 

DC O) 

fc % 


o 

o 

LU 

S 

o 

CO 


CO 

co 

H 


o 


a 

LU 


LU 

o 


h 

3 


CO 

< 

2 o> 

LU 

1- 

0l 

z 

0. 

a> c 

o 

< 

■o 5 

a 

CO 

H 

O 

§ I 
I c 

co 

h 

O 

3 

c co .2 

3 

cc 

H 

CO 

z 

tg o>{5 
a. co E 
o .* § 
o o o 

CC 

h 

CO 

z 

o 

x cp*p 

o 

o 

LU Q_ .E 

o 

LU 


LU 

2 

1 1 1 

2 

o 


o 

CO 


CO 


C 

o 

** 

iS 

o 

o 

o 

CO 

> 

CO 

0 > 


CO 

O 

3 

CO 


CO ■— 

is 

o 


CO CO® .IS 
3 (DOC > 

® §.£ 2 
CO CD CO tl 

D(0>< 


W. Harless 
TRW 
20 of 22 



OVERALL OBSERVATIONS 



LU 

CO 

O 

DC 

LU 

X 

LU 


(D 

Zlu 

It 

go 

y dc 

LU Q- 

cd> 

ogj 

z> 

£cc 

So 

0.0 


0> 

o 

c 

<D 

A) 

j2 S. 

c * 
■<5 UJ 
£ g> 

II 

Og 

♦3 *D 
C O 

0) o 

2(5 


CO 


o 

■o 

0 ) 

> 

To 

CD 

3 

o 

O) 

CO 

t 

0 > 

DC 

Li. 

(0 

CD 

LU 

O 

Z 

c 

LU 

(0 

CD 

3 

z 

>- 


I- 

CO 

-1 

a> <j> 

CD 

■Q 55 : 

< 

CO LU 

< 

■g o> 
®2 


CCO) 


z 

< 

2 


LU 



C/> 

LU 


DC 

O 

o 

o 

O 


O 


H 

< 



< 


Q 

Q •••• 

< 


I 


W. Harless 
TRW 
21 of 22 


One of many Ada Design tools 
Cross reference 
Pretty Print 

Document Generator (DocGen for Preliminary Design) 



OVERALL OBSERVATIONS (Continued) 


CO 

S 

o 

CO 

o 

< 

o 

LU 

Q 


V) 

c 

o 


l/i 

u. 

<u 

> 


§i 

.5 i 

t! 

O ( 
O .2 
O *♦ 


LU 

CD 

< 

DC 

CO 

LU 

Q 

> 

DC 

LU 


H 

DC 

O 

CL 

Q. 

CO 

DC 

O 

D 

LU 

> 

Q 

LU 

LU 


< 

DC 

< 

O 


>» 

o> 

o 

<0 £ 
<u ^ 

ALU O 

<2co£ 

«j < 

DOS 


LU 

O 

o 

o 

LU 

o 

DC 

3 

O 

CO 

s 

o 

DC 

Li. 

O 

LU 

o 

3 

Q 

O 

DC 

CL 

CO 

o 

X 

Q. 

< 

dc 

o 


Q 

CL 


(/> 


*| I 
§:> 

5 E 
<0 o 

s **■ 


O) 

c 

*c 

( 1 ) 

<D 

c 


-2 £ 

> E 
a> o 
QQ 


• • • 


W. Harless 
TRW 
22 of 22 



SESSION 3 — SPACE STATION ACTIVITIES 
Session Leader: D. Littman, NASA/GSFC 


Lessons Learned: Prototyping with Ada for the Space Station Freedom Program 

K. Rogers and L. Ambrose 

Software Support Environment: Architecture and Design Overview 

C. Carmody 

Flight Telerobotic Servicer 
R. LaBaugh 

Lessons Learned in Prototyping the Space Station Remote 
Manipulator System Control Algorithms in Ada 
P. Gacuk 


S798 






“LESSONS LEARNED: PROTOTYPING WITH ADA FOR THE 
SPACE STATION FREEDOM PROGRAM” 

K. Rogers, MITRE 


5798 






LESSONS LEARNED: 

PROTOTYPING WITH ADA FOR THE SPACE STATION FREEDOM 

Kathy Rogers 
Leslie Ambrose 
The MITRE Corporation 
1 120 NASA Road 1 
Houston, Texas 77058 


ABSTRACT 

Developing prototype software in Ada leads to some conclusions about the language as well as the 
available methods and services. Results from this project address the use of the Ada language in a network 
environment intended to emulate that which will exist onboard the Space Station Freedom. Conclusions are 
drawn concerning the strengths and weaknesses of Ada for prototyping projects. 


PURPOSE OF THIS PAPER 

This paper documents the lessons learned as a result of building the Human-Computer Interaction Lab 
(HCIL) Ada Executive (HAE). The HAE is a specialized program which obtains data from a testbed 
network built to evaluate candidate services and resources that will be required of the Data Management 
System (DMS) for the Space Station Freedom Program (SSFP). The HAE supplies data to the HCIL 
Multi-Purpose Application Console (MPAC) prototype which evaluates the presentation of data and 
information. 

This paper is an attempt to glean from the HAE that information which may have applicability to an 
audience larger than that which was directly involved in the effort The experience of prototyping a 
relatively small system in Ada, in a network environment provided insight into challenges that might be 
expected when developing larger software systems, especially those systems that might exist on the Space 
Station Freedom. To that end, many details of the project’s history have been omitted and other aspects 
have been elaborated in a manner which is not in proportion to the actual effort 

This paper will focus on the process of developing the Ada production and test software that was used 
as part of the larger testbed effort to evaluate various data services and resources 1 . After a brief history of 
the prototype, this paper addresses the Ada and software engineering issues confronted by the prototype. 


BACKGROUND ON THE HCIL MPAC PROTOTYPE 

The electronic component of a workstation onboard Space Station Freedom is an MPAC. The effective 
use of this instrument will be important to crew productivity. As such, the National Aeronautics and Space 
Administration (NASA) wished to investigate the human factors issues associated with the presentation of 
infoimation on the MPAC. The DMS testbed at the Johnson Space Center (JSC) provided the necessary 
resources and data for MPAC analysis as part of the System (QMS) Integration effort. 


1 This project was done as part of contract NAS9- 18057, project 3100K. This paper is a partial summary of a 
larger report, “Lessons Learned: Object Oriented Methodologies, Ada, The Data Management System Testbed, and 
Prototyping”, JSC 23903, September 1989. 


K. Rogers 
MITRE 
1 of 29 



The OMS Integration effort is an ongoing series of prototype demonstrations, focussing on establishing 
interoperability between Space Station Freedom system simulations. It runs in the environment of the DMS 
Testbed, which is based upon an Apollo token ring network with Ethernet The configuration of the DMS 
Testbed for OMS Integration Demonstration 3A is shown in Figure 1. System simulations are hosted on 



Figure 1. OMS Integration Demonstration 3 A Participants 


the various nodes of this network. It was in this environment that the HCIL MPAC Prototype was to 
become a player, focussing on the data from the Guidance, Navigation, and Control (GN&C) node. The 
OMS Integration effort represented a good source of realistic data which could serve as the basis for 
analysis of candidate MPAC displays. 

A User Interface Management System (UIMS) is a piece of software which facilitates the 
development of consistent, effective user interfaces by providing development tools and a runtime 
environment to present the products of those tools. The BLOX® UIMS is controlled by user-defined state 
tables, which respond to interface commands by invoking user-defined programs. The combination of the 
commercial BLOX package, its external tables, and the display process programming, will be referred to 
collectively as BLOX. 

The need for the HAE arose due to the fact that the services and resources provided by the DMS 
Testbed did not match the needs of the BLOX UIMS. The HAE acts as a middleman, requesting data from 
the DMS Testbed network (in the proper format) and making it available in the proper format for BLOX. 
Figure 2 shows the relationship of the HAE software to the other HCIL MPAC Prototype components. 


® BLOX is a product of Template. 


K. Rogers 
MITRE 
2 of 29 











Had the Testbed services provided a more tailorable, extensible interface, there would have been no need to 
develop additional software. 



OMS 

TESTBED 

NETWORK 


To GN&C and 
other nodes 


Figure 2. HCTL MPAC Prototype Components 


HAE OVERVIEW 

The HAE is a relatively small piece of software, consisting of approximately 2000 Ada statements of 
unique source code 1 . It was developed under VMS® 4.7 on a VAX® cluster, which included a VAX 785 
and 8810. It was run on a Micro VAX®. The prototype configuration is depicted in Figure 3. Its 
executable code occupies 95K bytes and the additional object file which is linked into the BLOX program 
occupies 53K. No code metrics were kept during this effort, but an informal evaluation of libraries upon 
completion revealed that approximately 6500 lines of test code had been written. 

The HAE provides services to BLOX through a series of procedure calls. The interface was designed 
to accommodate communication between two very different languages, C and Ada, and is simple and 
straightforward as a result. The HAE services include 1) periodically gathering data values from the 
network, 2) returning those values to the user, 3) returning the type and units of available data, and 4) 
stopping the HAE. 

The HAE performed satisfactorily in its intended demonstration. It handled data updates from the 
network at the rate of 0.3 messages per second, where each message contained up to 48 data elements. The 
BLOX system takes several seconds to update the screen. The HAE provides data values in approximately 
1/4 second per query. 1 This is fast enough for the present application, since it is not a "hard" real time 
system. The end user has expressed satisfaction with the system. 


1 Reused software is counted only once, and software from outside sources is not counted at all. The statistics on 
Ada statements were generated by counting semicolons which occur outside of comments and parentheses. The 
overall statement statistics can be found in Appendix A. 

® MieroVAX, VAX and VMS are registered trademarks of Digital Equipment Corporation. 

1 This average is based upon tests using a test harness which accesses and prints system time immediately before and 
after issuing a call to the HAE. 


K. Rogers 
MITRE 
3 of 29 










4 


MCROVAX 



Legend: 

VAX services 

BLOX routines 

Screen Definitions (C code) 


53 HAE Ada code 
m DMS Ada code 
2j Tables 


Figure 3. HCIL MPAC Prototype Software Architecture 

The HAE has not been fully exercised, but so far has proven to be robust (i.e., it has not failed to 
perform its intended functions). It was designed to support queries to multiple systems, but this capability 
has not been exercised. The overall design of the HAE was found to be sound and resulted in a functional 
product. 


ADA IMPLEMENTATION LESSONS 

One of the goals of this task was to gain some firsthand impressions of the Ada language. Since the use 
of Ada has been mandated for the Space Station Freedom Program, the Spacecraft Software Division (SSD) 
at JSC was interested in exploring software engineering and Ada. The observations of the language as an 
implementation tool are presented in this paper 2 . 

The use of Ada for this project was quite successful. In many ways, the properties of the language, 
particularly information hiding, contributed to the success of the prototype. The problems encountered do 
not appear to impinge upon the usefulness of Ada as a software engineering tool or as a prototyping 
language. They do have implications, however, for required tools, approaches, and support systems. 

The remaining discussion on Ada implementation issues is organized into two categories: successful 
aspects of our use of Ada, and areas which require attention in order to achieve positive results. 

Successes 

Ada proved to be a workable language whose use offered some specific benefits to this project. We had 
positive experience with Ada in the areas of information hiding, readability, language-to-language interface, 


2 Other issues such as object oriented methodologies, the Data Management System testbed, and prototype project 
management are described in the full report, JSC-23903. 


K. Rogers 
MITRE 
4 of 29 




and tasking. We also found that performance was not a problem in this system. Information hiding and 
readability were anticipated benefits of the language. The remainder, however, were areas where we were 
initially apprehensive about success. Instead, we found them to be straightforward. 

Ada’s information hiding capabilities facilitated independent development of components. The first step 
in the coding process was to formalize the design into Ada package specifications. The MITRE team did 
modify these specifications twice due to changes in types, but the consequences were minor and limited 
mainly to recompilation and linking. Eventually, a set of stub programs was created to allow unit testing. 
We possibly could have enjoyed even more of the benefits of this feature of Ada by building these stubs 
earlier in the project 

The use of modular specifications facilitated independent work, with each team member coding separate 
units. Eventually these were combined for system testing, which worked surprisingly well. No interface 
problems were encountered which could be attributed to the use of Ada; rather, Ada greatly facilitated this 
step. 

The only interface problem was due to the use of integer codes to return error conditions back to the 
BLOX program (e.g., 0=Successful, l=MSID_Not_Iri_MML). This resulted in tight coupling between 
several modules because the information about each value’s meaning had to be contained in each module 
involved. This was a memory burden for the programmer as well. In an all- Ada system, this would have 
been neatly solved by use of an enumerated type coupled with the use of exceptions and handlers. 

The Ada code for this project proved to be readable, at least from the perspective of the team members. 
We had one code review and several occasions where one member had to pick up the work of the other due 
to absence. Our observation was that, even with minimal use of comments, the structure and purpose of the 
code was accessible to the moderately informed reader. A strong reminder of this characteristic of Ada was 
provided when we had to make alterations to the screen definition code for BLOX, which was written in C. 
Minor changes proved to be a difficult undertaking. This comparison is somewhat suspect since neither 
team member is an expert C programmer, but both had experience with the language and the advantage of 
having reviewed the code with the author. 

When formal prologues were included in the code, programmers making modifications were inspired to 
record their changes. When there was no prologue, change comments were rarely added. Providing a 
prologue at the beginning of the coding phase and contributing information incrementally was much easier 
than recreating it upon completion of coding. Consequently, we recommend the use of prologues on all 
files. As only a minimal amount of information was required, the sample prologue in Figure 4 could be 
used as a basis. 

Other prologue information, which could be part of the abstract, should include the performance 
characteristics of the compilation unit (e.g., whether it was optimized to minimize the use of storage or 
minimize execution time), and the effects of the use of the object (e.g., side effects, exceptions raised, 
exceptions handled). 

Part of this project involved an interface between the C and Ada languages. The independent HAE 
process wrote to and read from VAX VMS mailboxes. Ada procedures to access these mailboxes were 
made available to the BLOX C program via the DEC-supplied pragma EXPORT. This process worked 
well, due to the hospitable environment provided by the VAX VMS operating system. 


K. Rogers 
MITRE 
5 of 29 



- Package Name: <Ada package name>, <ope rating system file name> 

- System Specification: 

- <hardware> miming coperating system> <version/revision> 

- Abstract: deference the design document section or page> 

- cdescription should include discussion of object > 

- cdescription of modifications should be added as needed> 

- Authors): 

- <name> <affiliation> 

- Modification History: 

- Created: cdate> 

- Modified: cdate(s)> 


Figure 4. Sample Ada Prologue 

One minor restriction was found: only base types could be used at the interface of procedures to be 
exported. Initially, we used restricted integer types which made sense from an Ada perspective, but which 
caused errors when used from C. As a consequence, we had to modify some package specifications and 
deal directly with DEC-supplied types for floating point numbers (i.e., gjloat or h Jloat instead of float). 
This obviously impinges on the customary benefits of Ada: we suspect that such loss at a language-to- 
language interface is inevitable. Where possible, such interfaces should be avoided in order to maximize the 
benefits of using Ada. 

Evaluation of tasking was not originally called out as an area of investigation within this project; 
however, the design appeared to be most easily addressed using tasks. Each of the top-level, concurrent 
objects could be a task, with its methods supplied by task entries. Overall, tasking worked well in spite of 
our concerns that it would add a level of technical difficulty. We were able to consider each unit 
independently, working from specifications. 

We shielded our task entries with procedure calls (Figure 5). Unshielded tasks can be aborted from 
anywhere within their scope, an undesirable situation for our purposes. The shielding offers the added 
benefit of reduced runtime overhead. If we were required to reduce the code size, the abort semantics could 
be removed from the task semantics since they could not be used. The shielding technique also allowed us 
to replace the task packages with non-tasking dummy versions. In these dummies the procedure calls, 
instead of calling task entries, merely supplied hard-coded values. This was helpful for testing and 
indicates that, had tasking proved to be a problem, we could have substituted a non-tasking version without 
affecting the remainder of the system. 

Much has been said on the performance weaknesses of Ada. Our requirements were not strenuous, but 
we had to provide adequate performance to update a display screen fast enough for a waiting human user. 
We did not experience any performance problems attributable to Ada. 

File I/O on the VAX was quite slow, but that is a characteristic of the system, not the language 
implementation. For example, one procedure call causes the HAE to open a file, read its contents and create 
some data structures. This is the slowest procedure call, taking approximately 2 seconds to execute. 


K. Rogers 
MITRE 
6 of 29 





package Master_Measurement JList is 

procedure Supply_MSlD_Spec(...); 
end Master_Measurement_List; 


package body Master_Measurement_List is 

task The_MML_Process is 

entry Supply_MSID_Spec(...); 

end The_MML_Process; 

procedure Supply_MSID_Spec(...) is 
begin 

The_MML_Process.Supply_MSID_Spec(. 
end Supply_MSID_Spec; 

task body The_MML_Process is 

select 

accept Supply_MSID_Spec(...) 
do ... 

end Supply_MSID_Spec; 
or 

end select; 

end The_MML_Process; 

begin 

null; 

end Master_Measurement_List; 


Figure 5. Shielding Task Entries 

Areas to Watch 

Support is critical to effective use of any new tool. Although both members of the development team 
had experience in Ada development, neither was expert in the VMS environment There were a number of 
times when having an expert in the combination of Ada and VMS would have greatly facilitated the 
development process. The usefulness to a project of one system expert should not be under rated. 


K. Rogers 
MITRE 
7 of 29 



Testing progressed slowly and a large amount of test code was generated, more than three times as 
many statements as the product. The features of Ada which make it good for large, complex projects — in 
particular, strong typing — slowed down the testing process. Test scaffolding took longer to create than 
was anticipated based on experience with other languages. “Quick and dirty” is only relatively possible 
with Ada. Test programs must be carefully constructed: packages must be instantiated to allow debugging 
print statements, types must be matched, values of records must be fully redefined with each change. This 
rigor is arguably a virtue, since better testing programs might lead to a stronger product. However, the 
additional time was not built into the schedule of this task. In a prototype, whose life span is expected to be 
short, it is not clear whether this rigor is a net benefit. It is therefore important to manage the whole 
process, planning in extra time and taking a more formal approach to testing than might otherwise be done. 
In a larger project, success or failure could hinge on the creation and management of test structures. 

A repository of existing Ada code was available for reuse on our host machine. The NASA Ada 
Software Repository provided for the acquisition and analysis of Ada software (developed by, for, and 
outside of NASA) for possible distribution and reuse within NASA. Ultimately the software within the 
NASA Ada Software Repository will be used to seed the reuse libraries of various NASA software 
development efforts. Tools to qualify software items into the library, classify them according to their 
projected uses, and retrieve them from the library based on the users' specifications are in the analysis and 
evaluation stages. At the current time, the software carries no warranties because of the disparate sources of 
software and the diversity of conditions under which the software may be used. 

Although we encountered some difficulty, we did reuse two programs from the repository, after making 
the minor corrections required to compile them. These programs accounted for approximately 1% of the 
final product Even with the searching, analyzing, correcting, and testing, this process was much faster 
than developing the code. Providing libraries of reusable code is complex, but judging even by our limited 
use of such services, it is a potentially powerful aid to progr amming 

Configuration management is another difficult task in software engineering. We used the VAX’s file 
numbering scheme coupled with named directories and paper records. Better configuration management 
tools and practices would have been useful during this project, although we experienced no real disasters. 

No code was irretrievably lost, but time was occasionally taken up in finding it In short, we were 
vulnerable to machine failure or human error at many points in the project Only the stability and small size 
of the design team, the relatively short development time, and a healthy dose of luck kept us from a major 
loss of work. 

We advocate almost complete avoidance of the USE clause in Ada. This clause, which allows the 
programmer to reference parts of library packages without supplying their full names, leads to confusion for 
anyone attempting to read the code. Our recommendation is based upon the experience of tracing references 
to find the source of a certain type or procedure — a frustrating exercise. The DMS Services supplied on the 
testbed include the Data Acquisition and Distribution Service (DADS) and the Network Operating System 
(NOS). These services, used by testbed participants to effect data transfer, are supplied via a series of 
procedures which may be incorporated into a node’s code. The sample programs demonstrating the use of 
these procedures employ the USE clause to the whole compilation unit and supply only local names for the 
type and procedure names. Since ten or more libraries are imported by these programs, the programmer is 
left with the options of examining the specifications of each to find the source of each type and procedure, 
or of including all the referenced libraries in his/her own code. 


K. Rogers 
MITRE 
8 of 29 



There are very few, if any, good uses for the USE clause. Currently available pretty printers do not 
provide the capability to fully qualify references, to our knowledge. Even if that capability became 
available, it may still be inappropriate to use the USE clause because it can increase compile time for 
resolving overloaded subprograms. Not only must a compiler find an appropriate reference (in terms of 
subprogram name, number of arguments, type of arguments, etc.), it must assure that there is no other 
subprogram that could possibly fit the profile. Therefore, it has to look at everything that has been 
referenced by a USE clause. 

Fully qualified names are generally straightforward and readable for procedures and data types. 
However, they are less convenient for infix operators. In an application which requires an overloaded infix 
operator (or whenever package names become cumbersome), the RENAMES construct is preferable to the 
USE. For example, consider overloading the "+" operator for addition of two matrices. Direct referencing 
of the operator is clear but awkward: 

Result := Math_Routines."+”( Left, Right) 

The renames construct, however, allows a more natural format: 

— declarative part 

function "+"(L, R: Some_Type) return Some_Type renames Math_Routines."+"; 

-- sequence of statements 

Result := Left + Right; 

Additionally, only the "+" operation would be visible, eliminating the readability and compilation 
problems within the scope where the "+" is needed. To make other subprograms visible, other renames 
clauses would have to be used. 

In a tasking program, robustness of tasks becomes very desirable. User-defined exceptions whose 
handlers caused tasks to fail were difficult to diagnose and were removed from the final system. There was 
no situation encountered in this project where failing was preferable to continuing to run, although one can 
imagine a program such as a robot driver where the opposite might be true. 

The experience base of users familiar with both VMS and Ada is limited, and DEC’S Ada is not as 
mature as some of their other languages. We encountered a number of areas where we were unable to find 
other users who had exercised the capabilities we needed, particularly in the use of VAX system services. 
At least part of these troubles can be attributed to our lack of experience with VMS. The DEC 
documentation was a source of problems for two reasons: the necessary information was spread out over a 
number of manuals (five in one case 1 ); and the Ada documentation contained many inaccuracies. Needless 
to say, this slowed down our efforts. 

The VAX debugger changed the observed behavior of the system, particularly in matters related to 
timing. Code compiled with the debug option produced different results from that compiled without debug, 
even if run in the / nodebug mode. Fortran programmers report that this is a known characteristic of the 
debugger, so this does not appear to be an Ada-only problem. It should be noted that, even with this 


1 The problem was the use of mailboxes. The manuals were the following: VAX Ada Programmers Run-Time 
Reference Manual; VAX Ada Language Reference Manual; VAX VMS System Services; VAX VMS I/O User’s 
Reference Manual; Developing Ada Programs on VAX/VMS. 


K. Rogers 
MITRE 
9 of 29 


problem, the debugger was a useful tool However, the confusing results combined with our unwise faith 
in the tool slowed down the resolution of some problems. In this, and other im plementation pro blems , we 
found it helpful to use the technique of keeping a "lab book" describing die problem encountered, steps 
taken to isolate the problem, and the success or failure of each attempt This book fostered deliberate 
debugging and acted as a communication device during the absence of a team member. 

Some apparently inconsistent results were obtained. One particularly annoying problem was the failure 
of some code to “scale up”. It seemed nonsensical to claim that the mailbox reads and writes worked in a 
small program but not when included in the whole system, yet that was the observed behavior. A 
systematic set of tests finally revealed the culprit, as shown in Figures 6 and 7. Calls to the package 
VAX_Mailbox_Services, which invoked VAX system services, failed when done from a subprogram 
defined within the scope of the main procedure. The simple test program had its calls in line and therefore 
avoided this problem. We are unaware of any place where this is documented. 

In a process which uses tasks, direct calls to VMS general input/output system service routines $QIO 
and$QIOW from a single task result in blocking the whole process. DEC Ada tasking is implemented 
using a run-until-blocked method. According to the VMS documentation, the system does not recognize 
that the individual task is waiting and therefore does not allow any other task to run (Digital, February 
1985). In order to avoid this affect, the user is directed to employ the DEC-supplied package 
Tasking_Services which avoids this problem. An additional work-around is offered by the DEC-supplied 
pragma TIME SUCE. This allows the programmer to control the maximum amount of time given to any 
one task. 


SUMMARY 

This project resulted in a working prototype which met its objectives of being a participant in the 
OMS Integrated Demonstration and of providing a tool for examining data presentation issues. The HAE 
software itself is a functional piece of software which could be used to attach another node to the DMS 
Testbed, at least until the Testbed Services are upgraded in 1990. Any UIMS or other software which can 
call Ada procedures in a VAX VMS environment could make use of the HAE. 

In the process of creating one portion of the prototype, the HAE, lessons were learned on the 
techniques and tools used to create the software as well as about the process of prototyping itself. Ada is a 
useful language whose benefits were clearly recognized during this project Its information hiding and 
tasking were particularly helpful: the use of Ada specifications allowed independent development of 
packages, and the tasking model fit well into a design of independent functional units. Each portion could 
be considered in isolation. 

Some planning, however, is required to avoid potential trouble spots. The youth of the language 
means that the support systems, both human and machine, are not as mature as is desirable. The availability 
of good programming tools and of a repository of indexed and qualified reusable code would greatly speed 
project development Further, the aspects of Ada which are its strengths, such as compiler-enforced typing, 
mean that quick and dirty development is only relatively possible. This does not mean that it is not a good 
prototyping language, but the schedule impacts must be considered. A second prototype, implemented by 
the same team, would undoubtedly be much faster to develop than the first 


K. Rogers 
MITRE 
10 of 29 



“This program does not work. 


with Text_IO; 
with Staiiet; 

with VAX_Mailbox_Services_Without_Tasks; 

procedure User_Mailbox_Manager is 

package VMS renames VAX_Mailbox_Services_Without_Tasks; 

Receiving_Channel Starlet. Channel_Type; 

Sending_Channel : Starlet Channel_Type; 

procedure Stait_Mailbox( R_Channel : out StarietChannel_Type; 

S_Channel : out Starlet. Channel_Type ) is 
From_BLOX : VMS.HAE_or_BLOX := VMS.HAE; 

For_BLOX : VMS.HAE_or_BLOX := VMS.BLOX; 

Start_Status : VMS .HAE_Status := 0; - o.k. 

S_Mailbox_Status : VMS.Status_Value := VMS.Success; 

R_Mailbox_Status : VMS.Status_Value := VMS.Success; 

Sending_Channel : StarieLChannel_Type; -for Sending mailbox 

begin 

VMS.Create_Mailbox( For_BLOX, 

S_Mailbox_Status, 

S_Channel ); - for sending 
VMS.Create_Mailbox( From_BLOX, 

R_Mailbox_Status, 

R_Channel); - for receiving 

end Stait_Mailbox; 

begin 

Start_Mailbox(Receiving_Channel, Sending_Channel); 
end User_Mailbox_Manager; 


Figure 6. Indirect Call Which Fails 


K. Rogers 
MITRE 
11 of 29 




— This program works. 


with Text_IO; 
with Starlet; 

with VAX_Mailbox_Services_Without_Tasks; 

procedure User_Mailbox_Manager is 

package VMS renames VAX_Mailbox_Services_Without_Tasks; 

R_Channel : Starlet Channel_Type; 

S_Channel : Starlet. Channel_Type; 

From.BLOX : VMS.HAE_or_BLOX := VMS.HAE; 

For_BLOX : VMS.HAE_or_BLOX := VMS.BLOX; 

Start_Status : VMS.HAE_Status := 0; — o.k. 

S_Mailbox_Status : VMS.Status_Value := VMS. Success; 

R_Mailbox_Status : VMS.Status_Value := VMS. Success; 

Sending_Channel : StarietChannel_Type; —for Sending mailbox 

begin - procedure Start Mailboxes and Network 

VMS.Create_Mailbox( For_BLOX, 

S_Mailbox_Status, 

S_Channel ); -- for sending 

VMS.Create_Mailbox( From_BLOX, 

R_Mailbox_Status, 

R_Channel ); - for receiving 

end User_Mailbox_Manager, 


Figure 7. Direct Call Which Works 


K. Rogers 
MITRE 
12 of 29 




APPENDIX A 


STATISTICS ON MODULES AND ADA STATEMENTS 


During the process of writing the code, information was not captured about versions or number of lines 
written or tested. I nstead, after-the-fact analysis has been done on die rather ad hoc library structure which 
was in place upon the successful completion of the product We attempted to gamer some information 
about reuse of code from external sources, the creation of code that was reusable within the context of the 
product, and the amount of test code required to produce a working result 

The following assumptions were made in examining the libraries: 

• It is not feasible to determine reuse below the module level. 

• If a module has a unique name, it is counted as a unique piece of code, recognizing that 

much code was duplicated. 

• If two modules of the same name have different numbers of statements, they are 

considered to be two different modules. 

The modules were classified by purpose (product , discarded, or test) and by source (new, reused, or 
new used multiple times). For each category, the number of modules and Ada statements was determined. 
The following table contains the overall results: 


Statements Modules Statements/Module 


Total 

11802 

Product 

2212 

Test 

6581 

Discarded 

3009 

Reused 

228 

New 

11419 

New Multiple 

155 


188 

62 

33 

67 

118 

55 

37 

81 

4 

57 

179 

63 

5 

31 


K. Rogers 
MITRE 
13 of 29 



To examine just the product code for reuse, the following table was developed: 



Statements 

Modules 

Statements/Module 

Product 

2212 

33 

67 

Reused 

174 

2 

87 

New 

1929 

27 

71 

New Multiple 

109 

4 

27 


Some ratios of possible interest follow: 



Statements 

Modul 

Test /Product 

2.9 

3.5 

Reused Product /Total Product 

0.08 

0.06 

New Multiple / Total Product 

0.05 

0.12 

New Multiple+Reused / Total Product 

0.13 

0.18 


These ratios reveal that the amount of test code is roughly three times the size of the product Reused 
code from external sources accounted for about 7% of the code, while code employed multiple times was 
5% of product statements and 12% of modules. The combined multiple purpose code accounted for 13- 
18% of total product code. 


K. Rogers 
MITRE 
14 of 29 



BIBLIOGRAPHY 


Ambrose, L.A. and K. L. Rogers (September 1989), “Lessons Learned: Object Oriented Methodologies, 
Ada, The Data Management System Testbed, and Prototyping,” JSC-23903, Houston, TX: The MITRE 
Corporation. 

Boehm, B.W. (1981), Software Engineering Economics, Englewood Cliffs, NJ: Prentice-Hall. 

Booch, G. (1987 a ), Software Components with Ada, Menlo Park, CA: Benjamin/Cummings Publishing 
Company, Inc. 

Booch, G. (1987^), Software Engineering with Ada , Second Edition, Menlo Park, CA: 
Benjamin/Cummings Publishing Company, Inc. 

Cohen, N. (1986), Ada as a Second Language, New York, NY: McGraw-Hill. 

Digital Equipment Corporation (February 1985), VAX Ada Programmer’s Run-Time Reference Manual, 
Maynard, MA: Digital Equipment Corporation. 

Lockheed Engineering and Sciences Company (August 1988), ‘The End-to-End Test Capability (ETC) Test 
Bed Nodal Interface Control Document (I CD) (Initial Phase of Demonstration No. 3),” LESC-251 17, 
Houston, TX, Job Order 33-102, Contract NAS9-17900. 

NASA Goddard Space Flight Center (May 1987), Ada Style Guide, Version 1.1, Software Engineering 
Laboratory Series, SEL-87-002, Greenbelt, MD: Goddard Space Flight Center. 

Nissen, J. and P. Wallis (1984), Portability and Style in Ada, Cambridge, MA: Cambridge University 
Press. 

Robinson, T. (March 1988), “Requirements for Project Management in a High Productivity Software 
Engineering Environment,” unpublished, Houston, TX: The MITRE Corporation. 

Swartout, W. and R. Balzer (July 1982), “On the Inevitable Intertwining of Specification and 
Implementation," Communications of the ACM, XXV:7, pp. 438-440. 

Ulmer, J. (June 1989), “OMS Integration Test Bed With OMGA Control,” Test Report (Demonstration 
3A), Job Order 052-32-369, Houston, TX: TRW. 


K. Rogers 
MITRE 
15 of 29 


ACRONYM LIST 


ACS 

Ada Compilation System 

ADS 

Ancillary Data Service 

ANSI 

American National Standards Institute 

DADS 

Data Acquisition and Distribution Service 

DEC 

Digital Equipment Coiporation 

DMS 

Data Management System 

GN&C 

Guidance, Navigation and Control 

HAE 

HCIL Ada Executive 

HCIL 

Human Computer Interaction Laboratory 

JSC 

Johnson Space Center 

MML 

Master Measurement List 

MPAC 

Multi Purpose Application Console 

MSID 

Measurement/Stimulus Identifier 

NASA 

National Aeronautics and Space Administration 

CMS 

Operations Management System 

SSE 

Software Support Environment 

SSD 

Spacecraft Software Division 

SSFP 

Space Station Freedom Program 

UIMS 

User Interface Management System 

UMM 

User Mailbox Manager 


K. Rogers 
MITRE 
16 of 29 



U) c 

c o 




<o m 

® o 



(0 (0 
^ a> 


o> 

oo 

O) 


a> 

.Q 


E 


<D 

> 

O 


CO 


K. Rogers 
MITRE 
17 of 29 


MITRE 



History 


CM 


o> -o 

C 0 

0 S 
a> .2 

1)0 

§ S 
2 S' 
g o 

J 10 
5 c 

o co 
w " 

(D "O 
O < 
Q-£ 

x ■■£ 

® £ 

S "D 

2 « CO 

55 o .2 
a> o o 
^ (0 o 

o ! go 

CO 8 o 
o 3 ^ 

to w 0 

=; « 5 


2 co 

?2 

c o) 
0 2 

E 5 
0 c 
U) o 

2 CD 

S.E 
2 ■* 
0 o 

it 

Si 

a. (5 
o c 

0 o 


o o> 
<u S 


K. Rogers 
MITRE 
18 of 29 


Exploration of user interface issues in the DMS 


How the Human Computer 
Interaction Lab (HCIL) MPAC Works 


CO 



K. Rogers 
MITRE 
19 of 29 


Screen Definitions (C code) KSM Tables 


Statistics on the HCIL Ada Executive (HAE) 


■'t 


0 <0 
■o o 
o ~ 


0 


(0 


O’ C 

1 E 

M- 0) 

O % 

2 <0 
c — 
a) to 

E § 
2 =5 

(0 "O 

CO « 
■O O 

c o 

^ LO 
O CD 

o ^ 

0 — 
cm a> 

° I 

C 0 .E 

1 g 

CO 


CO w 

a> E 

c? c "c/T JQ 

C0 .E q w 

(0 x — 

CD CO (0 

EES 
- CO c0 2 


CO 


O) 


0 


c « 
° ■- c 

■■5 2 0 
8=2 
O C0 


c 

3 

E 

E 

o 

o 


0 — 

O) 3 
0 C 

0 .E 

S 55 

I E = 

O r <d 

M a e 
0 2 0 


o 

0 

CO 


0 

X 

O 

ffl 

o 

0 

0 

2 > 

g 0 
^ 3 
Q C 


CO 


0 

CL 


0 0 0 0 0 



0 0 

= c 

0 

0 

0 

■0 

■0 

c 

0 

■0 

2 0 


■ MM 
> 
O 

0 

0 

0 

0 o) 

CO 

w 

0 

0 

X 0 


£ 

0 


£ 

2 


K. Rogers 
MITRE 
20 of 29 


1 1/28/89 


Ada Lessons - Successes 


un 


73 

0) 

to 


o 

45 

co 


CO 


to 3 

O 73 
« 0) 

o ■§ 
o> S 


(0 


0) 

to 


73 
C 
(0 

5 2 . 

I 2 

(/) H- 

o 

tl 

73 


O) 


CO _ 

§ § 

I £ 

CO 


CO 

0) 


a co a> 


. 2=5 

<C ■— *5 


a> 


co 
co 
a> 
o 
o 
co 

a> 

73 

o 
o 

■o 
c 

3 

£ o> 
co o 

a> 2 

E -J 

a) 2 
E § 

E £ 

C0 H- 

a> o 

CD 
^ 2 


^ 0 ) 
■o -s 


co 


CO 


i§ 

•Si 


0) 

c 

o 


73 

CO 


K 

S 10 

O ® 

D CO 

* 3 
m a> 

co fj 

E 2 

o) 3 
co o 

Is 

O g; 

LU ^ 

Q CD 
CO 

CD « 
o -= 

45 >» 

n 

■S C 
co o 

^ ‘.3 
^ .2 
o £: 

■w (/) 
Cj a> 


a> 

73 

O 

E 

CO 

3 

to 

c 

CO 

O) 

c 

■ MM 

XI 

• ^Ml 
> 
o 

a. 

>* 

.o 

Q 

o 

o 

73 

a> 

to 


o 

2 E 

.. CD 

fi 

CO 


CO 


a> 


CO 

73 

< 

O 

a> 

.a 

CO 


i 5 s 


CO 

CO 

E 

a> 

n 

o 


o 

c 

m m 
0) 
O 

§ 

£ 

£ 


| 

I 


K. Rogers 
MITRE 
21 of 29 


11/28/89 


Ada Lessons - Potential Difficulties 


CD 



i 


K. Rogers 
MITRE 
22 of 29 


11/28/89 


Effective Use of Tools Requires Support 


i"- 


c 

CO 

■o 

a> 

co 

3 

a> 

> 

co 


3 

O 

o 


CO 

a 


§ 

s 

C 

.2 

£ 


CO 

CO 

■O 

< 


c 

a> 

a> 

o 

<0 


CO c 

a> co 

o £ 
(0 


a 

C0 

t: 

S c 

Ql a> 

a a. 

3 X 
(0 0) 

X 

< 


CO 

5 

CO 

o 

c 

C0 

CO 

£ 

c 

o 


CO 

c 

0) 

E 

3 

o 

0 
Q 

1 


■O 

a> 

■o 

a> 

a> 

c 


o 

o 


2 E 


* 



o> 

% 

c 

0) 

c 

im 

mmm 

O 

CO 




co 

2 

CO 

MB 

a. 

£ 

E 

o 

o> 

c 

■ MB 

o 

c 

■o 

‘5 

c 


CO 


k. 

o 

o 

o 

■ MB 

H 

■U 

1 

a> 


CO 

c 

0> 

a> 

n 

o 

> 

CO 


o 

o 

«•» 

c 

Q> 

E 

0) 

£> 

§ 

CQ 

E 

c 

.2 

2 

3 

£> 

h5 

C 

3 


(0 

E 

2 

n 

o 


CO 

E 

(0 


■a 

a) 

“5 

(0 

a> 

V. 

a> 

N 

'<0 

E o 

a> 

2 o 

2 

Q- I 


i 


K. Rogers 
MITRE 
23 of 29 


11/28/89 


Testing Creation Takes Longer 


00 



■o 

O 

O 

O) 




I 


o 

o 

<n 

a> 

! ? 

E ® 
o c 

CO ■- 

__ o> 
5? c 
.E © 

Q. o> 

£ 5 
o c 

£ § 


a> 

E 




I 


i 


K. Rogers 
MITRE 
24 of 29 


11/28/89 



Standards to Support Ada Development 


CD 



3 

a> 

0 



r 


0 

o 

■O 

c 

CO 

CO 

0 ) 

o 

■ MM 

T3 



O 

CO 

0 ) 

■o 

■o 

c 

0 ) 

E 

E 


0 
a 
0 ) 
cc 

1 



O) 

c 


■o 

c 

o 

CO 


© 

i ® 

O <D 
TJ £ 

E I 

CO a> 

S c 

Q. CO 

0 £ 

3 ) i_ 
0 Q) 

3 £ 

8 s 

0 c 

0 g 

0 c 

3 Q. 
O) O 

£ 0 

o > 

A- ® 

a. -o 




E 

o 

o 

0 

0 

0 

0 

0 

o 



O 0 


S a 

3 £ 


0 

0 

3 

0 



0 
O 
0 
DC 

1 




K. Rogers 
MITRE 
25 of 29 


11 / 28/89 


Rationale for Restricting the Use Clause 


o 


0) 

3 

(0 

CO 


® 2 
" ■§ 

S' 3 

E | 

M £ 

4) ^ 

3 <0 
■O <U 

8 E (0 
2 2 8 
“•■O > 

(0 == w 

1 IS 

(I) 3 £ 

- 4— 

E o> c 

2 .£ Z 

O) >*.t2 

o Q. £ 

3-^ 

? £ I 

t 3 <n 

0 o c 
o. _c a> 

ESS 

— 5 0) 

1 


CO 

E 

© 

o 

a! 


o ■= 


CO 

Is 

8 « 
« <D 
CO 0 
3 £ 

£ r 

15 

5 ® 
o *c 
o fc 

0 ) o 

O CO 

c co 
co O 


= CO 


T3 
CO 

■ MM 

CO 
0) 
o 
c 
a> 

a> 

£ 

O) 

J *1 E 

CO 


CO 


a> zi 
co ■= 

CO 5 

0) 3 
o £* 
.E 2 

0) -Q 

E = 

■£= *U 
o) 8 

■5-| 

o £ 


O) 

n 

E 

co 


o 


CO 

c 

o 

o 

<p 

Q> 

E 

co 

c: 

£ 

QC 

o> 

co 

3 
■ ■ 
C 

o 


O p> *= j=! 

w ^ co « 


I I 


o 

CO 


c 

o 

■ mmm 

5 

o 

c 

X 

• mmm 

C 

o 

"co 

0 
H 

1 


CD 

CO 

— 

GO 

CM 


K. Rogers 
MITRE 
26 of 29 


To shorten extremely long names 


Renames Clause as an Alternative 


c 

o 

■ ■MB 

2 

o 

c 

X 

m mmm 

C 

• MB 

5 

o 

To 

o 


(0 

0 ) 

E 

CO 

c: 

£ 

o 

Q> 

<0 

3 


5 

i 


i 

i 

CO 


4> 


DD 

5 


C/3 

QJ 

# a 

*-3 

a 

o 

04 


I 


a 

s 


H- II 
3 

o 


a 

C/3 

<U 

0* 


£ 

0) 

i 

i 


5 

I 


C/3 

0/ 

# e 

*3 

a 

o 

Q 4 


I 


a 


C/3 

0/ 


a 

a 

o> 

u 

'oT 

o- 


I 


a/ 

S 

o 

C/3 

• • 

C4 


e 

o 

0> 

C 

.a 



V* 

0) 

s 

q> 

-Q 

■ 

■ 


0X) 

5 

+ 

0) 

nJ 

II 


a 

C/3 

0/ 

P 4 


0) 

a> 

E 

co 

c 

o> 

c 

o 


o 

E 

d> 

v. 

X 

0) 

c 

0) 


CO 

o 


0/ 


C/3 

0/ 

£ 

a 

a 

a/ 

s- 


o> 


03 

OX) 

a 

03 

a 

a. 


g 

i 


CO 

CM 


K. Rogers 
MITRE 
27 of 29 



DEC-Specific Problems 


C\J 


0 ) 

CO 

*o 

< 



0 

To 

o 

0 

o 


0) 

(0 


E 

0) 

0 

>» 

0) 


0 

O 

c 

a> 

B^M 

a> 

CL 

X 

0) 

a> 

co _ 

“* © 

O .tr 

UJ E 

Q = 


a> 

c 

o 

■o 

c 

© 


0 

■O 

o 

a 

0 




0 

o> 

o> 

3 

n 

0 

Q 


0 

0 

0 

X 

o 

£ 

"ca 

E 

a> 

co 

0 

O 

O 

0 

0 _ 

•« I 
£ 2 
m O) 
0 O 

E Q- 

S 3 

0 0 

0 « 

x E 
< o 


0 

0 

0 

o 

o 

a. 

© 

o 


o 

o 


0 

0 

o 


0 

0 


CO 

0 

c 

0 

o> 

CO 


g 

i 


K. Rogers 
MITRE 
28 of 29 


11 / 28/89 


Conclusions on HCIL MPAC Prototype 


CO 





0 

0 

3 

CO 

(0 
• MM 

CO 

TJ 

< 


c 

o 

■ ■MB 

4-» 

CO 


E 


o 

4— 

c 


I 



■O 

0) 


O) 


0) 

CO 

3 

0) 

O) 

CO 

3 

U) 

c 

0 

0) 

CO o 

< I 

® ■- 

o> 

co 2 
0 3 

j> I 
2 3 


CO c 

Q. 

•jt CO 


c 

CO 

0 

.a 

2 

3 

o 


o 

o 

■D 

c 

CO 

0 

o 

o 


CO 
CO 

E 
0 ) 

o 

Cl 

o tr 
o 

■ ^M .riM. 

o 
0 ) 


CO 

0 ) 

3 

O" 

a> 


T> 

a> 

■D 

a> 

a> 

c 


CO 

■o 

c 

CO 

4-» 

CO 


O) 2 > 
C c 

'E ^ 
c O 

« o 

a. i 


co 

■ 

c 

a> 

E 

c 

0 

■ H^M 
> 
c 

LU 

1 


3 

CO 

c 

0) 

E 

a. 

0 

a> 

> 

a> 

Q 

1 


0 

.Q 

CO 

'co 

0 

"O 

CO 

■ MM 

CO 

0 

3 

0 

0 

■ MM 

0 

o 


0 

0 

E 

0 

0 

0 

C 

o 

c 

0 

3 

0 

C 

o 

o 

tr 

0 

CL 

X 

LU 

1 


oo 

04 


K, Rogers 
MITRE 
29 of 29 


- Testing requires adequate schedule allowances 





“SOFTWARE SUPPORT ENVIRONMENT: ARCHITECTURE AND 

DESIGN OVERVIEW” 

C. Carmody, PRC/GIS 


5798 






2ND NASA ADA USERS SYMPOSIUM 


>- 

Q 

O 


QC 

< 

O 


o 


O 

Z 

< £ 

UJ y 
QC > 
3 QC 
I- UJ 
O > 
UJ O 


o 

QC 

< 

LU 

CO 

CO 


g 

CO 

UJ 

o 



C. Carmody 
PRC/GIS 
1 of 18 


30 NOVEMBER 1989 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
2 of 18 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
3 of 18 



SSE PROJECT OVERVIEW 



D Du 



SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
5 of 18 


= SSE Standard Interface 
= No Interface Across Line 





SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
6 of 18 


VIRTUAL MACHINE SERVICE 



SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
7 of 18 



SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
S of 18 



SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
9 of 18 


The SSE Architectural Design must satisfy both long-term requirements for 
technical viability, and immediate, user-oriented needs. These two demands are 
often in conflict. 



SSE ARCHITECTURE AND DESIGN 


O 

0 

o 

k_ 

CL 

Q. 

< 

•o 

0 ) 
-*— > 

c 

CD 


O 

0 

Iff 

o 


o 

3 

■D 

O 


0 


CO CD 

° E 
E 


o 


® CO 
O i- 

>* O) 

0 o 

1 1— 

Q) Q_ 
— U) 

c 


CO 

CO 

o 

o 

0 

o 

0 0 
CO c 
3 0 

0 -S< 

2: c 

O) ’0 

.£ E 
<o S’ 


■f— » 

o 
■*— > 

o 

c 

2 8 8 
O- ® -O 

.ig® 

3 

O 

0 

0 

■O 

g 


0 



O 

o 


c 

3 

1 1 1 

0 

•o 



0 


c 

cc 


LU 


0 

3 

o 

]g 

*0 

E 

“D 

C 

0 

76 

0 

■g 

o 

o 

0 


o 

_Q 

0 

0 

0 

0 

E 

0 


C 

g 

’-M 

Q. 

3 

0 t 
> O 
0 O 



0 

O 

0 

O 

’E 

O) 

OD 


C. Carmody 
PRC/GIS 
10 of 18 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
11 of 18 


SSE ARCHITECTURE AND DESIGN 



o 

CO 

o 

CO 

o 


o 

co 

CD 



c 

CD 

CO 

CD 

Q 


CO 

o 

LL 

CO 1c 

-5 °- 

Q- CO 
CO 

> 5 CO 

> ^ CD 

O O -g 

lLO° 

_co 2 

03 

Q 


CO 

CO 


CO 

LL © O 

^ o — 
CO CO >r 
Q) 

CD -C^ > 

i'Jm 

Sis 

I'i: 8. 

if « ® 
■£ = = 
CD 
CO 

3 


CO 

o 

O 

c 

o 

CO 

o 

o 

CD 

Q. 

CO 

CO 

CO 

_co 

O 

~0 

C 

CD CO 

■gts 

8° 

.o' 

O 


CO 

CO 

> 

CO 

c 

< 

CO 

ir 


C. Carmody 
PRC/GIS 
12 of 18 


Make/Buy/Adapt Recommendation 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
13 of 18 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
14 of 18 


pefqo 6 mss 900 Jd luguinooa 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/G1S 
15 of 18 


lnstructional_Material_Object 


SSE ARCHITECTURE AND DESIGN 



C. Carmody 
PRC/GIS 
16 of 18 


SSE ARCHITECTURE AND DESIGN 

SSE Object Class Specification - Outline 



c 

o 


o 

to 

<x> 

Q 

03 

CO 

o 

c 

o 

O 


cd 

03 

co 

o 

03 


as 

a) 

as 

x: 
«•— * 

.2 

o 

<n 

o 

as 

S' 

o 

03 


C 

o 

C 03 
CD 5 

Q 5 

IS 

CO “C 
-Q O 
< £ 


CO 

o 

SI 

la 

o 

0) 


CO 

c 

o 

as 

CD 

Q. 

O 


CD 

CD 

x: 

£ 

03 

as 

a 

T 3 

c 


o 

as *c: 

§2 
£5 O 
<o 2 
cc fa 

a 5 /r 

(flO 

o »- 

cl a; 

Is 


CL t“ 


C\J CO 


CO 

c 

o 

03 ~ 

E a 

03 

as O 

CO CD 
• — if) 

fee 

£iS 

Q> {2 

r C 

s 8 
Is 

CD 03 
O 03 

11 

°-a 

.2-g 

as .c 

c 

o 

Q 


o 

as 

c 

03 

CO 

03 

w. 

CL 

03 

tr 

o 

CD 

a5 


CO 

c 

O . c 
‘5® o 

03 c iS 
CL 03 
0)0 

1 8:2 
■if! 

k- 

£ « c 

- </) CO, 

co cc i 

o'coF 
<o ! _® 

■O O) 

s« 

of = 
co “o 
05 03 
O 5 

II 


o 

9L 

la 

o 

03 


o 

£ 

03 


O 03 
CO 


as co 


Or CO 
~ 03 


as 

E 

03 

CO 


CD ^ 

CO :Q 
C £3 

O *5 

o< 


CD 

03 

a_ 


CO 

k. 

o 

2 

a 

■Is 

CC O 
iz <u 
4) © 

men c 

© S 2 © B 

5 § 2 ^t 

CC Q_ O ♦- o 

A {/) p (/J (/) 

J2 03 -fc C 03 

§CC <2 OQ 

5 c°S § 

S-S-ooS 

^ 03 . 1 =! IX 03 

gO 8 -so 


03 

3= 


O co 


a 

a" 

03 

DC 


o 

evi 


o 

CO 


C. Carmody 
PRC/GIS 
17 of 18 


SSE ARCHITECTURE AND DESIGN 

SSE Object Class Specification - Outline, continued 



C. Carmody 
PRC/GIS 
18 of 18 


a> 

o 

> 

a> 

CO 


o 

• mm 

o 

n 

o 


a> 

a> 


o 

OT 

j= a 

?! 

co © 

® § 

Co Jz 


W "0 

E? 

® o 

W "o 


-I tS > 


V) 

-i< 

SI 

«! 

cc 5 


CO 


o 


CD 

o © 

co > 

«s 


o> 

• i^m 

EH 


t r 
03 


R. LaBaugh 
Martin Marietta 
1 of 11 





“FLIGHT TELEROBOTIC SERVICER” 


R. LaBaugh, Martin Marietta 


CO 

4> 

o 

o> 

0) 

OS 

o 

g> 

(5 

5 

O 

CO 


>, 

o 

03 

C/3 

CD 

O 

£3 

aj 

E 

o 

-♦— * 

2 

a5 

a. 

<d ^ 

O o' 

« H 

2 o o 

1*0 

o — 

C/3 — 

^ ^ a> 

.2> CO f— 


CD 

O 

03 

CL 

CO 


“O 
c 
03 

4 — » 

O 
_Q 
O 
CL 

O 

OJ >, 
-D 03 

R CL 
vj CO 

o Q 
« la 

CD o 

0 C ~ 

ffl-i a 

1 oiO 

CO , . 


O 2 Z .— 

rrt I 


C 

o 

4 — » 

03 

CD 

CL 

O 


CD 

T3 

O 

O 


O *§- "a (§ CO 

r? CT 3 =3 *?=; 00 


CO 

CD 

C 


CD ^ 

•= O 
2 CO 


co 

3 

Q. 

C 

03 

2 

a 

"5 

03 

k_ 

T3 

>. 

X 


c 

© 

E 

a. 


O 3 

i- cr 

^ lu 

5 tr 

*- S 

5 §: 

^ a> 

co ^ 


© 

"D 

O 

O 

tr 

o 

a. 

a. 

3 


O b 

O ® 

_ c 

CO Zi 
o 

~ v- — 
i= Jt * w 
o LO © 
© f- 
LU . . 


© 


© 


E -D 
© © 
*t CD 

£ © z. 

C /5 "5 W 
t,J O © 

(0 O I- 

Q) *♦— 4—* 

Li O C 

a> E 

~ C Q. 
Q J O 
CD w CD 
C > 

Q 

LU . . 


03 

■a 

< 

_c 

c 

CD 


CD 

c5 

5 
-*— « 
* 4 — 

o 

C/3 


R. LaBaugh 
Martin Marietta 
2 of 11 


• Extensive Reuse of Flight Code In Simulator, Trainer, EGSE, ETS 



Flight Computer Architecture 
























Allocation of Flight Software Elements to Processors 


O 


<D C 

= O 

go 

C TO 

O c 

o g 

* 8 
■Q 3 

E Li- 

© C 

<0 o 

CO *= 

< iS 

co -E 

o.° 

.S2 ^ 

Q , 


c 
o 
O 
o 

CO £ 
O © 
c 05 

o *- 
£ © 

I- tt = 


TO 

E 

CD 


s § 

SI 

Q_ oo 

c -E 
O o 

§ ^ 
o 

— 

o to 

^ Q- 


8 2 

“ § 
©o 

1 - 
£ TO 

C X 
O o 

?s 

a a- 


o 

O 

E 

co 

c 

cd 

-C 

a 

CD 


0 ) 4 ^ 

= 3 

o o 
- cd 


C 

o 

O 

o 

£ 

_ CD 
O (/) 


C CO 

o cd h 
O £ c 
— O o 
0-0 

o 3= a> 
(t m CO 

**■0 0 
CO C o 
■Z LU 


5 ° 

§3 

2 . 1 - 

CD c 

S3 

— 'S 

co r 
^ CL 


o 

O 

o 

CO ® 
o 5 05 


o>_ £ 


c 

_ o 

E o 


o 

-M 

05 

13 

g. 

c 

cd 


£ 2 

•% o 

is 

£ a. 


o f 9 2 

E p § 


° Eo 


o 


CD 


<D 05 
.ci >- s 
.*S O 'F 

z> i ™ I 

Q- £ g> 

O . L. 

“oS2 

Sl|§ 

«J 3 ^ t 
TO Q. O LU 

s = tr -O 

Q. <5 TO C 
Q 2 CL LU 

0 ) , , , 


2 Q 

s § 

O 5 ; 
CD 05 
. 2 ! *- 
ZZ CD 

E =5 


u- c 

M 8 

TO 

X 


c 

o 

O 

T 3 

C 

TO 

X 


o 

tr 

TO 

CL 


=> O 
Q. is 

« 8 
c o 
o 

a. o 
0.-0 
3 2 
0 ) _© 
Q. CD 

Q I- 
0 > . 


co 

c 

_ o 

o ‘-F 


s<3 

c O 

o £ 
O © 
05 

<S - 

8 2 
4 = TO 
O — 


TO 

O 


E 

E 
o 
O 

c 
o 

3 2 

CL 


C CO 

_ 2 -E 

« 5 *- <S TO P 

8-0 

© t 
© TO 
h- CL 


•8 = 

TO O ^ 

3 0.-0 _ 

.0- © 2 o 

c 2 ® c 

iS © © TO 
S CL |- CL 


R. LaBaugh 
Martin Marietta 
4 of 11 


Allocation of Flight Software Elements to Processors (cont) 


— 0 ) 
O JZ 

ii 

03 © 

© V 
E 

a 5 
o s 

© o 

_Q 

-2 § 
CD cl 


o c 
| o 
Z. O 
o o 
— © 
CO .-5 

Q- > 


c/> 

>* 

w 

2 to 

-M 

O o 

c ° 
E CL 

c/3 

c o 
5 O 
§ ® 

f o 

o) tr 

03 © 
O CL 


“1 

o o 

© JZ 

Q. 2 

c > 

© CO 

? o 
5 © 
5 "2 

© > 

cc , 


c 

o 

o 

© 

k. 

© 

E _ 
© o 
O i= 

© o 

0 0) 

1 jo 

— o 

O -T- 

o 


s s 

o © 

0 CO 

2 o 

CD 

1 s 

0 E 

-o £ 
co c 
© o 

1 O 


® © 

o $ 

k_ o 

c 

O _Q 

© 2 
3 © 
73 © 
O I— 

SB 

© £ 

5 £ 


R. La Baugh 
Marlin Marielta 
5 of 11 


Control Algorithms Processing/Data Flow 










Development Environment 


CL 

O) 2 
C © 

'© "3 

s g- 

o 

%o 

03 T, 
CO £ 


© LL 


C 

E 1 

CD O 


3 rt 
T 3 2 
CD “■ 

■gfe 

03 g 


■ 5.3 


co c 

5 < 

<. +- 

— m 

O CM 
Q CO 

Q . 


CO 
Ui O 

-Q "O 
*2 CO 
3 CD 


T 3 o 

g 03 
co 

« © 
m -h-» 

H 

o 

•C © 

9 

.y IS 

is CO 
03 CL 


}S © 
3 CD 

ffl §> 
C X) 
— CD 
O Q 


o E 
co > 
CL 03 


w © 
O 03 

! 3-S 

3 O 

E £ 3 

111 

8° § 
- 2 J 

O CO o 

c £ 03 

ill 

8g 5 

(13 C ^ 


R. LaBaugh 
Martin Marietta 
7 of 11 


O) J 2 


X5 

c 

CO 

X 


o 

CO 

<0 

CD 

o 

o 


E 

0) 

T5 

>» 

co 

0) 

E 


c 

3 

IT 

(0 

■O 

< 

© 

c 

O 

CO 

2 

© 

CO 

CD 


■o 

© 

w 

© 

m 

>< 

‘c 

ES 

$>< 

>s < 

W C 

CD 3 

C £E 

© o 

© *~ 
Q.T 3 

O | 

< © 
^ OT 
O) © 
.£ CD 

* 0 . 
- ) Q 

o co 


© 

©1 

|5 

'© £ 

~ T 3 
CL CD 
CL 
< 


a i 

t < 


CD 

E 


CO 

o 

o 

CO 

CO 

< 

“O 

(0 

CD 


To "O .y 

CD 

cc 


0 CD C 

1 ^ 


<D 

> 

O 

"O 

c 


0 

LL 

"O 

CD 

CO 

Z) 

E 

CD 

4-' 

CO 

>N 

CO 

CD 

E 

H 

1 

c 

3 

oc 


<D "O 

0 5 

-O < 

o <5 


co 


“O 
CD 

c _ 

.g> co 

£ Q. 

Q >< i2 E 


” CD 
O Q. 

^ E 
x o 
c O 
3 . 


O) 

c 


o 

O 

CD 

E 

co 

CO 


co 

CD 


-Q 

CO 

CL 

CO 

o 

E 

CD 

■M 

CO 

CO 

CD 

E C 
P-2 
I CO 
C N 

ir .H 

< , 


> 

CD 


C 

o 

CO 

o 


E 

E 

o 

O 

"D 

C 

< 


CO 

N 


c O 

CD _ 

E 9 

CD 
O) 

CO — 
c 5 
CO 5 


^ c 

?3 eg S 
g i-g-s e 

E 3 a c © 
© rC © ^ o) 
^ vj © c /5 © 
^■o x — c 

© S o. o>.§ 
0)< 3 c ^ 

a si 

c/) - - h h 


co 

c 

o 

o 

c 

3 

LL 

E 

0 

CO 

> 

CO 

O) 

c 

CO 

w. 

0 

Q. 

O 

0 

E 

o 

CO 

c 

0 

E 

0 

CL 

E 

4~» 

0 

3 


E 

2 

CD 

O 


© 0 
C •“ 

.2 © 

©^ 
O CL 

t< 


R. La Baugh 
Martin Marietta 
8 of 11 


- Interface To Peripherals 
* Desirable For Embedded Systems 



Prototyping Efforts 


c 

g> 

* 0 ) 

cd 

Q 

0) 

8 

4— » 

c 

o 

O 

o 

C/) 

CD 

CL 

O 

o 


Q. 

II 

if 

CO > 

X . 


<13 

O 

<0 

tc 

05 — 

6 CD 
LU co 

>s in 

o « 

© 6 

CL — 

O 


CD 

-Q 

E 

CD 

O 

CD 

2 Q 

3 <D 
13 13 

- E? 

ll 8 

O)^ 0) 

5 ~0 ® 
-0^-0 
03 CO O 
O O £- 

g CQ CL 

£ 03 ® 

OfS 

o c/D -a 
^ CD c5 
o S ■o 

■n 2 C 

§0(0 

_ CO 

m 

^ cS 

/m t: m 


co HI CO 

CO — 2 
X 03 2. 

, — CO 


o 

Vr 

o 1 

o -6 

«•- 03 

0 .c 
w O 

03 03 

> o 

03 (0 
-I t 

■Q 03 

§ — 
<0 ® 

§1 

1 <5 
c X 

2 1 

03 £! ® 

|=DC J 
5 co > 
l< O 

O z — 1 
CO , , 


o i= 


c 

o 

o 

CD 

o 

as 

'tz 

CD 

_E CD 
_ o 
OQ as 
co tr 
in a) 
in ~ 


H o 

fc 5 

^ 8 . 

2 o 


co 

o 


03 

E 

o ® 


O 

03 — 

E 2r 

iZ c ° 

t § w 

“OS 
c c ® 
■B o E 

E 3 ® 
° o ®> 

o> g co 
< x £ 
_ LU ® 

So 2 

Co® 
o >> Cd 

o o a 


R. La Baugh 
Martin Marietta 
9 of 11 


Cyclic Operations 



0) 

"O 

c 

CO 

X 


0) 


i'l 

© E 

o'* - 

© >s 

it CD 
*-> O 
© © 
© = 
sz © 
giQ 

X >s 


>s O 

Q £ 


c 
CD “O 
3 CD 

cr c 

CD O) 


o 

CO 

LU 

u- 

o 

LL 

CO 

CO 

h- 

CO 

“O 

< 


iS 

- O 

S3 

a w .£ 

W * £ 

< £ > 

*C ^ © 
O Q. ^ 
C O o 
Q_ O g 
4-» — 1 X 

§ 

g>~ 3 

X £ 2 







OJ t- 

^ © 
© w c 
© © .== 
t— I— f— 


R. La Baugh 
Marlin Marietta 
10 of 11 



Preliminary Timing Data 


o 03 — * 

y C N 
DQ .t T 

cn \- ^ 

2 g <o 
■So- 


o 

o 

to 

E 

o o in o o o 

inow^N^r 

CD in T- CD CO T- 
t- t- 


r^. i^- h- oo ^ 

CD 't- o> o CO CD 
t- i- i- O t- t- OJ 


td 

o 

(ti 

o 

CO 


0 ) ^ 


=D 
CL 

o ^ 


CD 


O 

CD 

CO 

E 

CO CD O CM CM N 

05 CO 00 O in 

in tj- t- oo co co 

<75 T— T— 


O N O) CO CD CO 05 in 00 

® r- ^ in r- n co -m- co 

P- ^ T- O T- CCJ CM t— 


CO , 
O ;!= 
JD I— 


CD 

e n r 

X 


CO 

<d 

□5 


ID 

CL 

o 


00 


o 

CD 

CO 

E 

CD (N O 00 ^ 00 
03 03 CO CO O t- 

t- 00 CM N (D N 

t“ ‘ oo cvi c\i 

CO 


O) oo oo cd i" lo oo o uo 

N CO O) O 00 lO N oo h- 

00 CM CM CM 00 LO CM 


c 

o 

o 

c 

13 


(/) 

O 

■4— » 

o 

CD 

> 

c 

<D 

E 

CD 

CD 

</) 

u. 

3 o 

il -E 

O) ^ 

b 


CD _ 

■§■5 

o o 

"2 CO 

00 'T- 


c 

o 

a5 

3 O W 
-2 ^ O 

<U CO TS 

O E c 

.* g I 

4_ C 

(D CO ^ y 
co co w 

c £ o 

® O > 

-E LJL -£ 


CD 


X c 

5 .2 

aj c 

E 

<C CT3 

.. 2 d 
2 § 2 
® E -c 

> (D -p 

i ■*- CO 

x co c 

2 2 ' 

co O < 


CL 


o 

_>* O >N 

o. to 


>* .w- < y. 

% % 


C 

g 

c 


TO 

TO 

< 


<D 
_ CO 

O to 
o c 

CD CO 

> - 


to 

c 
o 

„ CO 
— F 

9- E 

V; O 

i | 

X 2 


C0 CD 

2 o> 


to O .g 


to 

CO 

O 


o 
*— » 
o 
CD 
> 


aj cti 


E < 
<2 ill 

LU 


c 

o 

■S E 

« § 

E § 

< O 
o o 

_g a 

O) CD 
c c 

< < 

JD JD 
13 3 

LU LU 


R. LaBaugh 
Martin Marietta 
11 of 11 






“LESSONS LEARNED IN PROTOTYPING THE SPACE STATION 
REMOTE MANIPULATOR SYSTEM CONTROL ALGORITHMS 

IN ADA” 


P. Gacuk, SPAR Aerospace 


5798 






Lessons Learned In Ada Prototyping 


co 

o 

co 

in 

> 


0 

I 

CO 


co 

c: 

o 

•*-» 

03 

0 

1 

CD 

O 

03 

eg- 

.§ 

03 

C 

03 

o 


o 

co 

O 


0 

c 

0 

(0 

0 


o 

c 

‘co 

v_ 

I- 

o 

T3 

CO 

CO 

c 2 

0 CL 

l— c/> 

O _Q 

o E 

A" ° 
Ql _i 


CD 

c 

73 

CO 

X 


C 

O 

T3 f 

(D 2 

-2 Q 


CD 
X) 
<0 
c 
CD 

o 

o 

co S 


a 

c 

0 

0 

5 

t 

« 


— 1 

© 

O 

o 

GO 

o 

91 

00 

© 

00 

c 

CO 

o> 

0 

9) 

o 

CO 

o 

o 

£ 

(0 


To 

m 

c 


Q. 

CO 

o 

*CD 

© 


0 

w 

0 

**- 

o> 

o 

w 

© 

< 

3 

Q. 

C 

CD 

© 

> 

Q 

co 

c 

o 

o 

« 

*o 

3 

d 

3 

< 


S 



< 


© 

o 

© 

c 

o 


O 


CO 

O 

E 

© 

CC 

E 

O 

o 


CO 

2 

o 

< 




o 






h- 





<D 


Q 

UJ 


E 

3 
CO 

2 c 
E O 
<0 


o> 


r* co 

2 $ 

W 3 

Hi 

CC (0 

ui < 

^ < 
(fl 
< 


TJ 

C 

CM 


00 

*- « £ 

o> 2* 

= <0 £ 

li. 5 o 

© - « 
o ±S w 
<0 © ® 
q. n -g 
</> c E 

"2 © > 

■S C3 2 

T3 

o 

o 


ZJ 

o 

0 

(D 


P. Gacuk 
SPAR Aerospace 
1 of 62 


* 



CO 


t 

CO 

CL 


I 

CD 



(0 

is 

c 

a> 






CO 

CD 

3 

O" 

'c 


o 

CD 


CO 


CD 

3 

CO 

CO 



P. Gacuk 
SPAR Aerospace 
2 of 62 


V-SS-081 



* 


cc 

< 

0. 

0 




0 

O 

E 

0 

cc 

c 

o 

0 ” 

♦; co 

</) *o 
0 < 
O c 
CO -= 

Or </) 

g 

0 £ 


L_ o 

O) D> 

.£ 

Q. 

f fi 

2 § 

Q. O 



CO 


cc 

CO 

CO 


c 

o 


o 

CO 

0 

Q 

0 

Q. 

E 

in 


-a 

0 

co 

0 

0 

*D 

0 

0 


2 

0 

£ 

4^ 

O 

CO 



n 


P. Gacuk 
SPAR Aerospace 
3 of 62 


V-SS-081 


Part I 



P. Gacuk 
SPAR Aerospace 
4 of 62 


V-SS-081 



■ To Reduce Risk 


* 



LD 


o- 

<D 







co 

c 

o 

CO 

CO 


CD 

_l 

CD 

CO 

c 


E 

CD 

CO 

CO 

b 





E 

o 

o 


CO 

CO 

CD 

O 

O 

ZJ 

CO 



P. Gacuk 
SPAR Aerospace 
5 of 62 


V-SS-081 



to 

co 

O 

in 

in 

i 

> 


P. Gacuk 
SPAR Aerospace 
6 of 62 


e) a generalized, hypothetical description... 
used in analyzing or explaining something 



Definitions Of Prototyping: 



N. 

00 

CD 

T- 

I 

CO 

o 

O 

00 


42 

c: 

CD 

E 

.§ 

O' 

<d 


c 

O 

CO 

0 

8- 

1 

5 

o) .-2 

■i. ® 

Q. si 

S O 
S t: 

Q. * 


£ 

CO 

co .s 

c ^ 

O v » 
*■5 CO 
o -c: 


c: 

.o 


O 

5 


c: jo 

-~= co 

c; CD 

cd tr 

22 "O 

1 1 
x: jo 
cd tz 
Q O) 
^ c: 

§ -Q 

CO ^ 
CD O 
O co 
co CO 
*tr co 
m 

42 O 
•E g 


E § 

0 t: 

II 

(/) .E 

g> CD 

1 S 

1 8 

</) -5 

O) § 

c .5 

■q. «0 

"co 

3 & 

2 CD 

* s 


0 5 

*= 42 

CD .C 

1 s 

s co 

sf o 
§ o 

"co 00 

8 

■O v. 
CD O 
73 

C CD 
CD .N 

g 40 

4 o 

*2 QJ 

h- Q_ 

O co 


O 

00 

o> 

Y— ■ 

I 

:s 

O 

CD 

CD 


* 

§ 

CD 

-Q 


CD 

§ 

O 

i 

2 

Q. 

CD 


CO 

1 

■45 

o 

« 

•v 

CD 

§ 

O 


CD 

C ^ 

.2 c 

CO J? 

fe g> 

O 5 
<u ^ 

o 5 

« R 
§■ ® 
f S 

2 o 


V) 

CO 


P. Gacuk 
SPAR Aerospace 
7 of 62 


after the prototyping activity is complete 



to 

to 


CO 

0> 

0-1 

■ MB* 

c 

o 

o 

H 

O) 

c 

CL 

> 

o 

o 

cl 


<D 

Q. 


LL 

08 


O 

LL 

© 

N 


O ^ 


jco 

O 

O 

I- 

O) 

c 

Q. 

o 

o 

w 

CL 

"D 

0 

N 


0 

1 

o <D 
c 9r O) 
w <o 
c 3 
o O) 


c 

O) 

0 

0 

Q 


0 

o 

0 

5= 

yj 


E £ c t 


0 

O 1 


0 

0 

o> 

o 

o 

c 

sz 

o 

0 


$ 

0 


5k 
0 
$ 

< 

« •£ 


O 

L. 

-C 

K 


c 

O) 

0 

0 

o 

0 

0 


0 

C 

0 

c 


&£ 


© <0 
o c 

s - 

CO CO 

E o 

>r © 

£ Q 


Q_ = -4= « ^ © 


< 

cc 

5 

a 

Q 

LL 

o 

_l 

LU 

> 

LU 

_l 

£ 

o 


© 

25 © 

s-> 

□ 


CO 

o 

© 

Q. 

CO 


Q. C 

Qi O 

< to 

£ g 
o E 

2 w 


© oa 

CO 

C§ 

E fi 

© £ 
© o 
Q O 


c 

o 

"C 

c 

■t- © 

Q. ts 
0 
O 


C 

o 

O 


c 

© 

.c 

l- 


<J 

■O 


_OJ 
£ 

0 □□□□ d: □□□ 


o 

o 


3 

0 


o 

= 06 
0 — 
3 O 

O 0 

Si 

m 

E 2 

¥ © 
CL 3 

~ © 

5 > 

Z LU 


E 
o 

CO o 

Q) 

o c 
o ~ 

^ S2 
GQ x 
_ LU 

C* £ 

2 ,2 

u. 

m s 

D) E 
c: 0 
■== 0 
0 


0 

0 

3 

0 

_0 

>* 

o 

c 

0 

o 

5= 

LU 


~ < 

□ 


& 


e- 

O 

E 

© 

2 

08 S 

© *3 

g. CD 

m 00 
2 C 
O CD 

& E 

O 0 

b 

□ c 


© 

c 

o 

V- 

o 

c 

3 

LL 

0 

0 


o I 

r © 

< §■ 

CL © 

Q = 
© 

3 © 
LL CL 


□ □□ 


© 

k_ 

0 

$ 

£ 

O 

C/D 

0 

L. 

0 

$ 

■D 

k- 

0 

X 

32 

o 

0 

o 

© ~ 
o © 
© 3 
Q.O 

© c 
QC g 

sfE O 
© 3 
c "O 
© 2 
E CL 
® sz 


ss 


o 

I- 

< 

cc 

< 

_i 

o 

LU 

Q 


LU 

LU 

CC 

0 
LU 
Q 

1 

o 

X 


P. Gacuk 
SPAR Aerospace 
8 of 62 



NASA Space Station Freedom Program Software Life-Cycle 



ORIGINAL PAGE IS 
OF POOR QUALITY 


P. Gacuk 
SPAR Aerospace 
9 of 62 


180 SS-A 



co 

0} 


P. Gacuk 
SPAR Aerospace 
10 of 62 


V-SS 081 


Preferred Software Prototype Life-Cycle 

SPIRAL MODEL (Boehm, 1986) 


* 




cc 

c 

m 

m 

i 

> 


Preferred Software Production Life-Cycle 

b-Model (Birrell and Quid, 1985) 



P. Gacuk 
SPAR Aerospace 
12 of 62 


Emphasis on cost and length of maintenance 



Part II 


c» 


CO 


cc 

CO 

CO 



a> 


o 

05 

ZJ 


9- co 
^ 5 

o ^ 

CD 


O 

O 

Ql 


O 

E 


CD 

a: 






o 

o 


CD 

O 

CO 

CL 

CO 



P. Gacuk 
SPAR Aerospace 
13 of 62 


V-SS-081 



Mobile Servicing Centre (MSC) 



'-SS-078 



Software Goals Or Risks Addressed By The Prototype: 



P. Gacuk 
SPAR Aerospace 
15 of 62 


V-SS-081 


Prototype Metrics 



Record notes and lesons learned during entire life-cycle 











a> 

•MM 

Q 

0)1 


3 

Q 

T5 

a> 

0) 


a> 

T3 

O 

® 


OS 

(0 

a> 

f 

o 

T3 

O 

a> 


O 

x 


>*1 


■a 

® 

eg 

'a 

o 

co 

to 

< 

co 

■O 

o 

0 


_g 

‘as 


CD 

c 

V- > 

c 

0 CO 

co p 


0 

0 


2 

CL .-= 
0 U 
T3 

O <° 
"§) 
_ 3 

E 5 

S -a 

0 C 

5- © 

cr _q 

0 _ 

"O ^ 
0 3 

>> ° 
= -d 

0 «0 
O 4/3 

4=1 -a 
0 ^ 

0 -ft 
T3 2 

> E 

2 0 


C .-ti 


O **- 


c 

CD 

’co 

0 

■Q 

O 

E 

j) 

JD 

O 

Q_ 

0 


CD 

C 

T3 

C 

0 

XI 

c 

0 

Jd 


Q_ -d i_ 


O 

C 


c 

0 

0 £ 
0 - 
O C 
T3 O 

l| 

O o 

T3 *♦= 
O .£ 


0 

0 

a> 

a_ 

E 

0 

8 « 
o? 


0 0 O g 

^'50^ 

* S' o | 


P. Gacuk 
SPAR Aerospace 
17 of 62 


V-SS-081 



P. Gacuk 
SPAR Aerospace 
18 of 62 


V-SS-081 




£ 

0) 

*55 

■g'c 

go 

< 3 


o 

o 

2 

oB 

TJ 

(0 

g 

vs 

v\ 

0 

.Q 

0 

3 

o 

o> 

x 

w w 
- <0 
o>E 
.£ o 

2 o 

Q (/) 

§ § 

o-B 

fi 

3 g 

3= § 
Qh 


0 

0 

c 

0 

CO 


0 


0 




CO 




03 

g 

CO 




0 

0 

b 

CO 

b 

I 

0 

E 


08 



c 

0 

0 


Hi 


0 


CO 


CD 

g 

'-Q 

‘o 

0 

Q 



CO 

0 

o 

> 


O 


CO 

£ 

o 


0 

o 

■> 

0 

CL 


0 
3 
Q 

0 
Q. 

£ 0 
CO 3 

c § 
0 > 
JC 5- 

H O 


E 

o 

LL 

CO 


0 


0 

0 


O 

CD I— 

ii 

o -r 
0 - 1 - 
Q o 3 


T3 

0 

_Q 

0 

c 

LU 


— w 


0 

_Q 

JD 

13 

CO 

< 

0 

E 


JC 

o 

0 

LU 

c 

0 

0 


0 

C 

o 

u 

< 

03 

_g 

0 

O 

izs 

c 


c 

0 

> 

LU 

0 

o 

o 

0 

c 

0 

C 

0 

3 

_c 

O 

CD 

C 

o 

c 

0 

o 

cr 

0 

CO 

O) 

_C 

3 

o 

"o 

c 


■O 

0 

T 3 

0 

0 


0 


0 

1 
_c 
0 
CO 

0 

-Q 

0 

3 

o 

0 

X 

LU 

0 


0 

3 


E 


c 

< 




T3 

0 

3 

E 



c 

< 


P. Gacuk 
SPAR Aerospace 
19 of 62 


V-SS-081 



Requirements Analysis & Definition Phase: 

Engineering Interdisciplinary Communication; 



CO 

CO 

CD 


< 

C/3 

< 

C/3 

O 

0 

E 

< 

C/3 

V 

03 

O 

o 

T3 

O 

£ c 

03 O 

2 1 


5 £ 

CO “ 
m 10 

£ -E 

CO O 
’d 0) 

a. S’ 

CL «= 
< CO 
O 

j2 - £ 

S| 

1 § 
5 ° 

m O 


c^. o 

CO jfi 

t5 “ 

CO CO 
its d 

■c c 

< £5 

2 8* 
g Q 

$ m 

? £ 

co E 

co 25 

0 O) 

■a .55 

C Q 

CO *5 

Q. .52, 

3 _Q 

2 O 
a co 

CO CO 

O E 

6 a 

o o 

O C/5 

oS c 

CO s= 

E g 
0 E 

to b 

to £2 

c CO 
CO ^ 

O t 


>» 

0 

CO 

k- 

0 

> 

c 

o 

o 


c^- 

CO 

o 

« 4— 

E 

< 

_CO 

Q 


O 

O 

o3 

E £ 

0 LU 
co 


£ 


CO 

E 

-o 2 

0 0 

co Q 
0 Q_ 

-a o 

c o 


r O 
TO ,2 

O t- 


P. Gacuk 
SPAR Aerospace 
20 of 62 


V-SS-081 



Preliminary Design Phase: 




<2 a> 

o I. 

CO c[ 
o <1> 

t & 

Q 

CO “O 

£ a> 

E c 

© .2 

b 6 


6 | 

_sz !o 

O O 

ii ii 

□ 

O 

O 


P. Gacuk 
SPAR Aerospace 
21 of 62 


V-SS-081 


Preliminary / Detailed Design Phase: 




^ CO 

2 < 

E. <d 

<D O) 
CD co 
3 

CD O) 




P. Gacuk 
SPAR Aerospace 
22 of 62 


V-SS-081 



fn CO 
U} CO 
oQ a 

n TT 

•1£ Q 

i 8 

a o 

« r 

ft 

T3 o 

CD 

■C ^ 
iS <D 
CO Q 


^ (D 
.C Q. 

T3 ■g' 
0 2 
03 2 

O q- 

2- CD 

o .g 

o 

c co 
— 0 


P. Gacuk 
SPAR Aerospace 
23 of 62 


V-SS-081 17 



00 

CO 

o 

I 

in 

in 

i 

> 


P. Gaculc 
SPAR Aerospace 
24 of 62 


■ Centralized Vs Decentralized Control Decision Left To The Designer 




03 


• a 

C 

o 


CO 

3 

CO 

m 

i 




•a 

Q) 

C 

0) 


o O 


a> 


5 


I- 5 

2 O 

Q _ 

^ 2 

§ <D 

i c 
~ a> 

I a 





T3 

O 

O 


O 


<D 

< 

"cB 



Q 

O 

O 

0 


c 

CO 

c 

o 


CO 

CO 

3 

O 

CO 


P. Gacuk 
SPAR Aerospace 
25 of 62 


V-SS-081 



32 

*_ 

o 


CO 

CD 

cc 

0 

f— 

o 


03 

3 

CO 

> 

UJ 

I 

Q 

O 

O 

<3 

c 

o 

E 

Q. 

O 

CD 

> 

0) 

Q 

*o 

0) 

c 

a> 


I o 

0, O 

g> 3* 

5 O 

Q 

C « 

1 m 

* s 

0 


w 

CO 

>* 

CO 

c 

< 


o 

CO 

to 

n 

< 


"D 

0 

0 

C 

3 

O 

O 

c 

UJ 

co 

E 

0 

£3 

O 


w 

c 

CO 

c 
LU 


c 

< 

CO 


0 

a 

c 

o 

*co 

3 

*C 

O 

o 


c 

0 

o 

0 


CD 


5 

to 

0 

DC 

O « 

r- CO 

.2 -g 1 

c 

11 

§•! 

ul 2 

s < 

CQ 0 

c jE 

0 

C/D ^ 

o CJ) 

6 2 


0 

^ CQ 

1 ? 

0 

O 

5 


CD 

<3 5 
w (S' 
8 S 

S 2 


o 


P. Gacuk 
SPAR Aerospace 
26 of 62 


V-SS-Ofll 




P. Gacuk 
SPAR Aerospace 
27 of 62 


V-SS-081 ?\ 




CO o 

<D CO 


CD -Q 

T3 O 


C C 

(D (D 


P. Gacuk 
SPAR Aerospace 
28 of 62 


V-SS-081 



■ Hierarchical Layered Object Diagrams 



r 

cv 


P. Gacuk 
SPAR Aerospace 
29 of 62 


V-SS-0A1 


V-SS-081 



* Composite Objects 

(Note: The arrows indicate direction of control.) 


P. Gacuk 
SPAR Aerospace 
30 of 62 








Hybrid Methodology Object Diagrams: 






O) 

c 


3 

cr 

CD 

DC 

o 

CD 

S' 

o 

0 CO 
JC C 

I- O 

E £5 

o 0 

is- 

.E 0 

£ H 



CO 

*o 

< 

6 





P. Gacuk 
SPAR Aerospace 
31 of 62 


V-SS-081 



m 

E 

S 

m 

(B 

mmmm 

o 

o 

<D 

■ MM 

-Q 

o 

> 


o 

■a 

o 


85 -C 

I © 
IS 

£ 'Z 

I 12 


3 

O 

ifc 

b 

.00 

cn 

o 

<D 

S' 

o 

JD 

3 

CO 

T3 

O 

O 

O 

CD 

C 

T3 

C 


TD 

a) 

>s 

.g 

Q. 

£ 

LU 

£ 

3 

O 

<o 

c 

o 

"-t— • 

'co 

o 

CL 

E 

0 

O 

CL 

3 

1 

E 

o 

£2 


o3 

c 

£ 

0 

a 

1 

CL 

O 


CO 

E 

2 

CD 

CO 


CD 

C 


o 

CD 

S' 

o 

CL 

E 

CO 

£ 

co 


.1 

CO 


CO 

0 

CO 

3 


CO 

0 

CD 

0 

o 

0 

CL 

0 

T3 

< 


J>% 

CD 

C 

2 

co 

CL 

0 


CO 


O 

m -i 


o 

0 

S' 

O 


s 

0 

_J 

§ 


P. Gacuk 
SPAR Aerospace 
32 of 62 


HR i 





<0 

CD 

3 

CT 

'c 

o 

<D 


(D 


CD 

o 


CO 

CD 

o> 

co 32 

c ^ 
co c 
> — 
33 -o 

7 _ *o 
co o 
a> O 

O CD 

CO CA 
CO o 


c 05 
O) J= 

•<o § 
CD > 

^ O 

■§ ^ 
C O 
<d U_ 

St 

I 8 

s' 8 - 

O LU 



cc 

<\ 


P. Gacuk 
SPAR Aerospace 
33 of 62 


V-SS-0B1 



P. Gacuk 
SPAR Aerospace 
34 of 62 


_Ss_nRi 



V-SS-081 

Old Approach of Mapping Ada Units to CSCs & CSUs 


SPAR 


Object Oriented 
Design World 


Ada Implementation 
World 



„ i 


i_ „ 


World 


i 


i „ 


System - CSCI ~ 

Object A - CSC 

Pkg 1 - Super CSU 

Proc i - CSU 
Func i - CSU 
Task i - CSU 

Pkg 2 - Super CSU 

Proc ii - CSU 
Func ii - CSU 
Task ii - CSU 


Object B - CSC 

Pkg 3 - Super CSU 


Proc iii - CSU 
Func iii - CSU 
Task iii - CSU 


P. Gacuk 
SPAR Aerospace 






■ ■ 
c 
o 



<0 

O) 



0) 

<5 

g 

& 

o 


(0 



s s CD 
.Q TO ^ 


t: b 
co o 
cl co 

■o 
c: 
co 


CD 


73 

CD 

C 

CD 


CD 
CO 

O o 
1° 


t§ 


o 

o 

« 

"co 

x: 


73 

C 

CO 


o 

€ 

So' 


co O 

CO 


73 

—N O 

O co -c: 

9 ? | 


8 

§■ 


p c 

CO CD 

b £ 

c: o — . 

0 Q. Q) 

° g $ 

|83^ 

H ^ 

.p 1 a 

-12 -C « 

a f * 

6 co g 

§>§ I 

b a? 

§ | 8 

co o o 

1 O to 

o 2 
co c: — s 
v. 2 5^ 

Q) ^ O 

y co 

s-o 

S ^ Cp 

2 C5 

O co 5 
5 CD 


CD cd 
b £: 

33 *- 

Cr cd 

CD ts 

^ a 

CD ^ 

^ O 

£ a 

co o ^ 

S S <N 

CD ^ 

C CD - . 

=3 .p 
CO ^ K 

c ^ co 

CD ^ b 
^ CD ^ 

11 ^ 

2 73 A 
p C Q 

P co o 

g. 73 Q 

§ a ^ 

O co 5 . 

© 2 b 



CO 


o 

CO 

o 

c 

o 

c 

o 

Q. 

E 

o 

o 

o 

CO 


o 

CO 

CD 

3 

Q. 

E 

o 

o 


o 

tr 

co 

CL _ 

iw K, 

o . 

.c: CO 


s 

CO 


.CO 

73 

Is 

o 6 

co O 

s a 


o 

c: 

.33 


o 

(3 




4 s 

73 cl 
CD 

CD -Q 

.cd o 
cl 

i •§ 

8 8 

■g D) 

y .s 

«C 

^ c: 

5 CD 

£ E 
.p> § 


8 & 
■O .S 

t> i. 

=§ I 

co =: 

■fc <° 
*& o 

CD ^ 

£ a 

-8 

"O 

CD c 
.p 
o .o 

CD ^ 

S-^ 

Co to 

-2 

c c 

CD ,Q 

4m 

cp P 

■S3 § 

CD 2 
2 _g> 

S> g> 


c: 

CD 

"co 

.O 

1 

a 

"co 

=3 

Vi 

o 

co 

CD 

£ 

co 

2 £? 
'c °N 
3 ^ 


2 

=3 


s 

co 

r~ 

_ CM 

Ifi 

c: Q 
m bi 
73 ^ 

c: ** . 

CD a 
CL 73 

-S3 P 

^3 O 

•2 .c: 


a 

"co 


co 
co 

m ^ 
CD J3 

£ ’8 
= co 


a 

CVJ 


P. Gacuk 
SPAR Aerospace 
36 of 62 


“An element specified in the design of a Computer Software Component (CSC) 
that is separately testable ” [ DOD-STD-2167A ] 




< 

h- 

CD 

C\J <d 

CD h " 

■D 3 

CD O 


JD 

.Q 

0 

00 

0 

J— 


cr 
0 
DC 

w 

< 

jp 

JQ 

.2 o 
0 Z 
0 

I— i 2 

_>> 0 

0 g> 

■S5 CO 

*2 

0 CL 

SP -g 

V, is 

= CD 

0 <r 

w ^ 


P. Gacuk 
SPAR Aerospace 
37 of 62 


V-SS-081 



P. Gacuk 
SPAR Aerospace 
38 of 62 


V-SS-081 



v-ss-oai 

Proposed Approach of Mapping Ada Units 
to CSCs & CSUs 


* 


SPAR 


CSC 


CSCI 



CSC 


CSC 


csu 


csu 


f ACU -► Library Unit -► Ada Spec 
I ACU Secondary Unit Ada Body 

| ACU -► Secondary Unit -► Ada Subunit 
1 ACU “► Secondary Unit -► Ada Subunit 


CSU 


ACU * Ada Compilation Unit 


CSCI 


Subsystem_A 


> 

Specification— Exports 


Implements 

^ Imports ^ 

SubsystemB 


/ Specification — Exports \ 

OK 


Q Q 

- 

Imports 

t 

Subsystem C 


> 

Specification — Exports 


Implements 

Imports 

J 





ORIGINAL PAGE IS 
OF POOR QUALITY 



P. Gacuk 
SPAR Aerospace 
39 of 62 






Detailed Design Phase: 

Multiple Views Of The Design Are Required: 



P. Gacuk 
SPAR Aerospace 
40 of 62 


V-SS-081 



Withing Diagram 



ORIGINAL PAGE IS 
OF POOR QUALITY 


P. Gacuk 
SPAR Aerospace 
41 of 62 









V-SS-081 



Package A Package B Package C Package D does 

generates handles handles and not handle and 

exception X exception Y re-raises therefore 

exception Z propogates 

exception W 


P. Gacuk 
SPAR Aerospace 
42 of 62 






<L> 

to 

a 

£ 

.§> 

2 




Q 


c 

o 

cS 

c 

0 ) 

E 

3 

O 

o 


< 

(O 

5 

k. 

o 

<3- 

CM 

O 

CO 

O 

C/D 

</) 

© 

S 

a. 

£ 

© 

l- 

© 

E 

3 

O 

o 

Q 

75 

c 

o 


<0 


k. 

o 

3: 

a> 


=6 CC 

S <D 
H > 
© <2 

j£ © 

O LU 
75 ® 


© 3 
> ^ 
© © 
CO CC 


© 

"D 

< 


o 

© 

Q. 

£ 


w 

© 

"O 

© 

© 

CC 

o& 

© 

© 


© 


© 

o 

d 

© 

•g 

0 


© 

© 

Z) 


c 

o 

T3 

~o 

< 


n 

S.'s 

Q. © 
3 ~0 


CO 

© 

© 

3 

o 

CO 


c 

© 

CO 

c 

© 

© 

Q. 

O 


2 <3 

% cf 
Z © 
Q- 

& 

"0 © 
co -g 
o © 

& § 
£ O 

a> co~ 
.9 3 

© «- 
CD g 

^ £ 

1 1 
5 ° 
0 cr 

« OT 
d CO 
© ^ 

1 1 
® i 
© 2 

1 1 

z 111 


a> 

c 

g 

75 

g 

o 


© 

_Q 

© 

© 

■g 

"w 

c 

o 

O 

© 

3 

cr 

© 

CC 

C/) 

© 

© 

CL 

£ 

© 


© © 
C ”D 

I < 

8 03 
Q Q 
c O 
g) O 

'CO j_ 

© o 

Q LL 


P. Gacuk 
SPAR Aerospace 
43 of 62 


V-SS-081 




<r 

r 


> 


(0 

T 3 

< 

08 

D 

O 

O 

o 

LL. 

CO 

C 

o 

“5 

o 

a mm 

B^M 

“D 

O 


CD 

E 


CO 

■ BBM 

c 

O) 

w 

© 

O 

■o 

© 

c 

© 

O 

o 

© 

S' 

O 

© 

£ 

© 

.Q 

•c 

o 

© 

© 

Q 


O 

O 


I O 


c 

.00 

I 


t3 

a 

3 


0)1 

’5 

CD 

o 


o 

T3 

© 

CO 

E 

CO 

C 

o 

H. 


5° 

'i_ 

3 

k_ 

O) 

o 

CO 

© 

Q 

O’ 

© 

oc 

© 

b 

c 

o 

o 

o 

© 

© 

s 

S 

S' 

g 

O 

o 

m 

■ 

■ 


CO 

© 

JD 

£ 

© 

O 

.Q 

*i_ 

o 

© 

S' 

O 


CO 

_© 

JD 

£ 

i 

© 

Q. 

O 
■*— • 
o 
© 

S' 

O 


P. Gacuk 
SPAR Aerospace 
44 of 62 


-SS oai 




■ ■ 
(0 
TJ 
< 

o& 

Q 

O 

O 






*2 </) 

^ O 

I Q 



w 


CO 

c 

o 

gj 

c 

co 
-*— > 
CO 
_C 

o 

*v_ 

CD 

C 

<D 

O 

CD 

< 


<D 

CO 

3 

CD 

cr 


E 

o 


~o 

CD 

c 

CO 

25 

O 

CD 

CO 


8 I i 



P. Gacuk 
SPAR Aerospace 
45 of 62 


v-ss-ori 



O O 

CO £ 

o ~ 

o CO 

Q_ c 

*1 

o 


O CO 

O 3 

Q T3 
CO <D 
CD jQ 

Z5 O 
cr co 
<d o 
DC Q 


to 

S ! i 
I § g 


S‘.s b 

a a o 

— o>'-5 

o C Q. 

<d -p a> 

i= O 

O > LU 


(O £ — I 

£ o c 
ro *= o) 

■si I 

Q O CJ 
_ © c 

O) Q. C 

.£ co ® 

to 45 o 
(0 T3 C 
I- < CL 


□ □□□□□ 


P. Gacuk 
SPAR Aerospace 
46 of 62 


V-SS-081 




P. Gacuk 
SPAR Aerospace 
47 of 62 


V-SS-001 36 



c 

o 

CO 

.o 

o. 

Q. 

< 

0 

sz 

1— 

ns 

c 

< 

0 

0 

ZJ 




0 


0 

cr 




E 

h- 


£ 

o 

’c 

_c 

o 

0 




C 


05 

1 — 




0 

E 


c 

c 

O) 

C 




Q_ 


0 

0 

_l 





O 

0 

•~> 


0 

0 

C 




0 


< 

05 




Q 



C 




0 

0 


o 

LU 





LL 

0 




0 


0 

0 

£ 

O 




s 

o 


■o 

0 

■«— > 
C 
0 
■c 





0 

C/D 

o 


■ ■ 
(0 

o 

Z 


CO 

_C 

Ql 

E 


"D 

TD 

a 


GO 

05 



< 



C 

‘c 

0 

8 

If. 

0 


0 

'0 

> 

€ 

o 

< 

■ 

■ 

0 

o 

i— 

1 - 

_0 

•2 


H— 

■ 

V. 

c 

0 

T 3 

0 

o 

o 

0 

0 

■a 

a 

** 

(0 

0 

> 

0 

o 

0 

0 

< 

£ 

Q. 

0 

£ 

o 

< 

( 

o 

-2 

" 5 . 

£ 


CL 

h- 

.§ 


■ 

X 

■ 

• 



f'- 

r 


P. Gacuk 
SWAM AMoipaei 
46 of*l 


V-SS-001 




P. Gacuk 
SPAR Aerospace 
49 of 62 


V-SS-081 



■ m 

CD 

O 

C 

(0 

■U 





0 

x: 

h- 

0 

C 

*0 

Q 

o 

0 § 

to > 

^2 <n 

O O) 

0 

0 O 
0 CO 

? DL 

- 1_ 

M- O 
O LL 

0 >s 

W c 

ID 


0 

CO 


0 

CJ) 

0 

O 

0 

CL 


0 

o 

o 

6 

c 

0 

iH 5 
"0 
C 

TB 

■D 
'O 

cS £ 


c 

0 

o 


0 

E 

0 


0 E 

3 2 

0 O) 

° 8 . 
0 -§ 
g <o 

0 <* 

S Q. 


_co 

0 

o 

0 

JC 

I- 

o 

CO 

c 

0 

W 

o 

6 

0 

CD 

33 

3 

O 

.c 

CO 

co 

0 

E 

0 


0 

C 

c 

0 


0 


E -c 

3 .22 


E 5 o> 

< iS 

£ C 

< 

c c 

o& 0 


o 


0 


CL 

E 

_ 0 
0 fC 

O h- 

2 o 

0- h- 


> 


P. Gacuk 
SPAR Aerospace 
50 of 62 


r -SS Ofll 




■ ■ 
G) 
O 
C 
CO 
"O 


3 

o 

cu 





.g 

O 




"O 




c 



05 

§ 



0 

0 

TD 



E 

CO 



2 

*0 

_C 



r 




i 

_0 



T3 

o 



0 

0 5 



E 

3 



0 

o 



z 

0 



0 

< 



CO 



05 

JD 

o 


C 

3 

O 

2 

3 

O 

CO 

3 

CO 

0 

c 

o 

O) 

C 

*05 

3 

0 

0 

0 

LL 

CO 

o 

h- 

c 

o 

T3 

0 

6 

_Q 

> 

F 

0 

3 

0 

c 

CO 

> 

o 

o 

Z 

0 

CO 

H 

0 

O) 

05 

c 

f— 

E 

0 

T3 

13 

O 

'c 

3 

0 

o 

0 

E 

E 

CO 

DC 

o 

05 

w 

LL 


c 

c 


o> 

.g 

o 

C 



*0 

o 

o 

o 

-*— ■ 

lk. 

Q. 

c 

3 

c 

3 

C 

o 

-Q 

LL 

LL 

O 

<o 

■ 

■ 




P. Gacuk 
SPAR Aerospace 
51 of 62 


V-SS 081 



A <0 

o & 

'> <8 

— o 

CO 

±S CO 
13 c 
CO o 

0 -J3 

OC 0 
~I c 

p 

5 o 

> o 

8 0 

o O ) 

.§: V 


o < 

££ 


o 3 g 

0 .2 


* I 

0 Z 

a je 
■g* 1 ” 

5 I — 

.£? a ) 
0 ^ 
QC Q 


P. Gacuk 
SPAR Aerospace 
52 of 62 


V-SS-081 



Implementation Phase: 

Ada Feature Usage Guidance: 


cv 


cc 

< 

CL 

CO 


CD 

> 

"k_ 

0 

Q 


co 

2» co 
> o 


0 

6 


0 

JO 

X 

0 

LL 

0 

> 


CO 

O 

0 0 

0 


CO o 

Q. 

£ 

M— C 


O co 

H 

T3 

0 

> 

a^M 

< 

0 

< 

t £ 

0 

Q 

O 

CO 

0 

§ e 
O <D 

■ MB 

Q_ 

o a. 

5 


z 0 

0 

T3 

w fE 

£ 

0 

£t 

O 

0 

.> 

0 

Q 

£ E 
0 o 

P LL 

CL 

■ 

■ 



P. Gacuk 
SPAR Aerospace 
53 of 62 


V-SS Ofll 



Implementation Phase: 

Ada Feature Usage Guidance: 




co 

03 
CO +3 

Q 8 

*2 

CO 

03 "O 
Q. C 

_ CO 
0 C 
> O 
0 

_i J2 

§ E 


fi c 

CO S 
0 ^ 
03 0 
C 0 
0 O 
-C 0 

o o 



r’ 


P. Gacuk 
SPAR Aerospace 
54 of 62 


L80-SS-A 



Implementation Phase: 

Avoiding Recompilations Guidance: 



CO 


co 
c 
o 

5 <tr 
’q_ 

E 
o 
o 
0 
CL 

T3 
CD 
O 


0 

CD 

CO 

1 

CD 

CD 


c 

3 

c 

o 

‘q. 

E 

o 

O 

c 

CD 

CD 

£ 

c 5 

CD 

co 

CD 

'o 

c 

CD 

TD 

C 

CD 

Q_ CD 
CD CD 

Q i 
O 6 

IS 

CD — ' 

-- n 
o u 

CD O 

§ a 

§ e 


O ^ CO 


CO 
CO 
CD 

_ o 

iS < 

■§ 

c 

2 < 


CO 

O 

0) 

c 

CD 

0 

1 

c 

o 


CO 

< 


CO 

.o 

0 

c 

CD 

CD 

Q. 

O 

CD 

> 

CD 

Q 


> 

(D 

0) 

LL 

CO 
■ «— < 

‘c 

.Q 

3 

CO 


c 

o 


00 iS 

E 
o 
O 
0 
co 


CO 

Q_ 

0 

CO 

0 

co 

3 


P. Gacuk 
SPAR Aerospace 
55 of 62 


V-SS 081 



§- £ 

.E c 

to 3 

2 S 

§ -g 

$ £ 

* | 

0 ^ 

05 CD 

§ tS 

O) w 

C 0 
0 O 


to 


*< a> 

m Q- 
^ 0 
f= Q 


P. Gacuk 
SPAR Aerosp 
56 of 62 


V-vSS-08 1 



Configuration Management Problems: 







C 

o 

'cl 

E 

o 

o 

0 

cc 

u 

00 

E 

o 


TO 

-= 

'Q. 

E 

o 

0 

CD 

C 

'0 

CD 

1 

Ll 

< 

S' 

.c 

I— 

c 

CD 


<0 

0 


0 

O 

3 

O 

CO 

CO 

0 

TO 

6 

Q. 

0 


TO 

0 

>» H= 

S o 
£ ^ 

m C 
0 0 

-g 0 

< CD 

0 0 

f 0 


TO S 

eE 

o ® 


> 

TO 

0 

0 


LL < 


W 


0 

o 

c 

0 

TO 

c 

0 

CL 

0 

Q 

0 


O I- 
c — 
.2 ^ 
0 q5 

O 

o 

cc o 


3 

CD 


0 

■g 

'§ 


0 O 

E z 

a g? 

3 <2 

< 2 


P. Gacuk 
SPAR Aerospace 
57 of 62 


V-SS-081 



Configuration Management Problems: 



P. Gacuk 
SPAR Aerospace 
58 of 62 


V-SS-081 



* 



a 

5; 

<o 

£ 

s; 

*2 

§? 


0 ) 

a 

c 

<0 

"□ 

3 

(D 

to 

a> 

o 3 

c 

o 

to 

0)1 

o 


CO 

*5 

o 

o 

CL 

0 

n 

S 

ca 

Q. 

£ 

o 

o 


c 

CO 


a> 

*55 

co 

in 

CO 

(0 

5 

C 

0 

c 3 

§>o 

1 6 

£ § 

2 £ 
<D o 

S 4; 

o £ 


CD 

C 

j*: 

o 

0 

6 

0 

E 

\— 

0 

'Q. 

E 

o 

O 

CO 

0 

T3 

< 

.2 

0 

13 

Q 

.>> 

CD 

05 

co 


0 

-C= 

s 

E 

o 


CO 
CD 
O 
CO 
*t: 

CD 

2 s 

o ^ 


c 

£ 

CD 


C 

CO 

o 

c 

CD 

In 


_co 

CO 

E 

CO 

k_ 

05 

O 

qI 

o 3 

CO 

■ 4—* 

'c 

3 


0 

T3 

< 

0 

0 

05 

• 

• 

05 

0 

u 


3 

0 


05 

> 

CO 

C 

0 

0 

0 


1— 

_J 

O 

■ 


X 


CD 

C 

"co 

0 

h- 

CD 


13 

D 

CO 

0 


0 

0 

LL 

0 

'o 

0 

Q. 

<n 

1 

0 

~o 

< 

£ ? 

JO 

£ J2 

A 2 

1 

5 -S 
” 8- 
O X 

E w 

.£ CD 

5 w 


P. Gacuk 
SPAR Aerospace 
59 of 62 


V-SS-081 


o> 

V 



P. Gacuk 
SPAR Aerospace 
60 of 62 


V-SS-081 



Results Of Initial Code Optimizations: 



© 

> 

</> 

CO 

© 

o 

o 

0) 

TO 

3 

o 

TO 

O 

|2 

£ 

3 

CT 

0) 

CC 

TO 

E 

F 

TO 

O 

TO C 

i£ 1 

11 

£ O 

a § 

TO ■- 

Q *5 

s. 

CO 

TO c 
__ TO 

g>cc 

il 


© © CO W CO CO 

2 2 2 2 2 2 

o co oo co o 

co oo CM in CM 

CVJ 1- T- 


© 

^ © 
c c 

N 3 

2 2 
ll n 

22 <n 

i x 

o 

O 2 

£ E c 

5 < -S 


<o 

c 

o 

3 

o 

co 

O 


<D 

E 

o 

© 

O 

co 

£ CO 


3 

O 

w_ 

n 

3 

CO 

CD 

co 


CD 

CO 

CO 

O 


O 

o 

CD 

> 


_ c 


co 

E 


CD 

O 

CD 

C 

c 

3 


O 


c 

o 


CO 

c 


c 

o 

© 

3 

O 

CO 

O 

© 

© 

DC 

C 

o 


c 

o 

V- 

co 

N 


CO 

CL 


© 

g 

1 £ 
© LU 
© _ 
CL £ 

C < 

© © 
CL CL 
O O 
O O 


CL 

O © 


“O 

c 

< 


a> 
© 

a 

© ^ 
CL 

1 1 
© ® 
O © 


o o o o 


c 

o 


c 

o 


c 

o 


c 

o 


O) 

c 

c 


c 

TO 


TO 

E 

TO 

co 

CO 

< 

o 


TO 

TJ 

O 

O 

TO 

5 


TO 

T3 

TO 


CO 

C 

o 

TO 

O 

"a 

o 


<D 
*D 
O 
O 

75 "w ’«/) « '« c 

C C c c c c sss 

” (0 (B ffl ffl ® <f 

D) Q_ Q. Q. Q. <1> 

L X X X X J= m 

O LU LU LU 111 CO ■ 


TO 

■o 

O 


c 

2 

u- 

13 

o 

GO 


I £ 


^ o 

TO co 

co © 

' TO 

Q. O 

2 o 
O CL 
TO 

CD TO 
00 Q 

O 

§ ■§ 

® "g 

C _Q 


TO 

■a 
o 

O 

CD 

oo 
CM 

o 

oo 

_ "to 

TO ■*=: 


CO LU 

Q_ _ 


CM TO 
cvi CO 

CD $ 

^ 8 

■8 w 

s "8 

co 

CM O 

j£ s 

CQ O 


co 

TO 

TO 

TO 

C 

TO 

o 

■a 

TO 

CO 


-= 

’cl 

E 

o 

O 

TO 

•o 

< 


o 

IT 


P. Gacuk 
SPAR Aerospace 
61 of 62 


V-SS-081 




P. Gacuk 
SPAR Aerospace 
62 of 62 


V-SS-081 



APPENDIX A - LIST OF ATTENDEES 





SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


ADAMS, NEIL BENDIX FIELD ENGINEERING CORP. 

AIKENS , STEPHEN D DEPT. OF DEFENSE 

ALANEN, JACK SOHAR, INC. 

AMBROSE, LESLIE THE MITRE CORP. 

ANDERSEN, BILL DEPT. OF DEFENSE 

ANDERSON, FRANCES STANFORD TELECOMMUNICATIONS, INC. 

ANDERSON, MARSHALL DEPT. OF DEFENSE 

ANDREOTTA, DONALD J NASA/HEADQUARTERS 

ANGIER, BRUCE INSTITUTE FOR DEFENSE ANALYSIS 

APPLEGET, PATRICIA WESTINGHOUSE ELECTRIC CORP. 

ARBOGAST, GORDON W.- DEFENSE COMMUNICATIONS AGENCY 

ARMSTRONG, MARY IIT RESEARCH INSTITUTE 

ARMSTRONG, ROSE MOUNTAINET , INC. 

ASHTON, ANNETTE NAVAL SURFACE WEAPONS CENTER 

ATKINS, EARL ELECTRONIC WARFARE ASSOCIATION 

AZUMA, KENNETH I FORD AEROSPACE CO. 

BACHMAN, SCOTT DEPT. OF DEFENSE 

BAILEY, KIRK COMPUTER SCIENCES CORP. 

BARBER, TOM COMPUTER SCIENCES CORP. 

BARDIN, BRYCE M HUGHES AIRCRAFT CO. 

BARKSDALE, JOE NASA/GSFC 

BARNES, DAVID UNISYS CORP. 

BARNES, FRANK LOCKHEED MISSILE & SPACE CO. 

BARRY, GLEN EBA, INC. 

BASSMAN, MITCHELL J COMPUTER SCIENCES CORP. 

BEARD, ROBERT M COMPUTER SCIENCES CORP. 

BECK, HANK JET PROPULSION LAB 

BENEDICT, ROBERT J BOOZ , ALLEN & HAMILTON, INC. 

BENITEZ, MEG DEPT. OF DEFENSE 

BERRENS, MIKE TELEDYNE BROWN ENGINEERING 

BEWTRA, MANJU CTA, INC. 

BLAND, SKIP A UNISYS CORP. 

BOND, PAUL SAIC 

BOOTH, ERIC COMPUTER SCIENCES CORP. 

BREDESON, MIMI SPACE TELESCOPE SCIENCE INSTITUTE 

BREDESON, RICHARD W OMITRON, INC. 

BRENNEMAN, DALE COMPUTER SCIENCES CORP. 

BRESLIN, MARK GENERAL ELECTRIC CORP. 

BRINKER, ELISABETH NASV<*SFC 

BROWN, HARROLD E NASA/MSFC 

BROWN, MARTY COMPUTER SCIENCES CORP. 

BROWN, NEIL F DEPT. OF DEFENSE 

BROWN, OTIS GRUMMAN 

BUCKLEY, JOE COMPUTER SCIENCES CORP. 

BUELL, JOHN COMPUTER SCIENCES CORP. 

BUNCH, ALEDA SOCIAL SECURITY ADMINISTRATION 

BURLEY, RICK NASA/GSFC 

BUSBY, MARY B IBM 

BUTLER, MADELINE J NASA/GSFC 

CAKE, SPENCER C HQ USAF/SCTT 

CARLISLE, CANDACE NASA/GSFC 

A-l 


SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


CARMODY, CORA 

CARPENTER, MARI BETH B 

CARRIO, MIGUEL 

CAS AS ANT A, RALPH . . . 

CASE, ROBERT 

CATO, WILLIAM 

CERNOSEK, GARY J 

CHANG, JOAN 

CHEDGEY , CHRIS 

CHU, MARTHA 

CHU, RICHARD 

CHUNG, ANDREW 

CHURCH, VIC 

CISNEY, LEE 

COHEN, HERBERT E 

COHEN, SARA 

COLEMAN, MONTE 

COLSTON, RAYNETT . . . 

COOLEY, JAMES 

COUCHOUD, CARL B 

COVER, DONNA 

CRAFTS , RALPH 

CRAINE, BOB 

CRAMBLITT, FRANK . . . 

CRAWFORD, STEW 

CREASY, PHIL 

CREEGAN, JIM 

CREPS, DICK 

CROKER, JOHN 

CUCE, ROBERT J 

CUESTA, ERNESTO 

CUTTS, ROY D 


PLANNING RESEARCH CORP. 

CARNEGIE MELLON UNIVERSITY 
TELEDYNE BROWN ENGINEERING 
COMPUTER SCIENCES CORP. 

DEPT. OF DEFENSE 
HQ USAF/SCTT 

MCDONNELL DOUGLAS SPACE SYSTEMS CO. 
COMPUTER SCIENCES CORP. 

SPAR AEROSPACE CO. 

COMPUTER SCIENCES CORP. 

FORD AEROSPACE CO. 

FAA TECHNICAL CENTER 
COMPUTER SCIENCES CORP. 

NASA/GSFC 

AMSAA 

GENERAL ELECTRIC CORP. 

DEPT. OF THE ARMY 
COMPUTER SCIENCES CORP. 

NASA/GSFC 

SOCIAL SECURITY ADMINISTRATION 
COMPUTER SCIENCES CORP. 

SS&T, INC. 

LOGICON, INC. 

IIT RESEARCH INSTITUTE 

MCDONNELL DOUGLAS ASTRONAUTICS CO. 
FORD AEROSPACE CO. 

UNISYS CORP. 

LISAN CORP. 

DEFENSE COMMUNICATIONS AGENCY 
COMPUTER SCIENCES CORP. 

DEPT. OF DEFENSE 


D ' AGOSTINO , JEFF . . . 

DAKU, WALTER 

DANGERFIELD , JOSEPH W 

DANIELL, WALTER E 

DAVIS , TIM 

DECKER, WILLIAM 

DEGRAFF, GEORGE 

DEMAIO, LOUIS 

DEMEO, JOSEPH R 

DEMILLO, RICH 

DERENZO, BILL 

DEVARAJ , SAVITHRI . . 

DEVLIN, MIKE 

DEWBRE, DOYLE 

DIGNAN, DAVID M 

DIKEL, DAVID 

DOUGLAS, FRANK J 

DUBIN, HENRY C 

DUNIHO , MICKEY 

DUREK, TOM 


OAO CORP. 

VITRO CORP. 

TELESOFT 

IBM 

NASA/GSFC 

COMPUTER SCIENCES CORP. 

GRUMMAN 

NASA/GSFC 

FEDERAL AVIATION AGENCY 
NATIONAL SCIENCE FOUNDATION 
TARTAN LABS 

COMPUTER SCIENCES CORP. 
CONCURRENT COMPUTER CO. 

DEPT. OF DEFENSE 
DEPT. OF DEFENSE 
FOCUSED ADA RESEARCH 
SOFTRAN , INC . 

U.S. ARMY OFFICE OF TEST & EVAL. 

DEPT. OF DEFENSE 

TRW 


AGEN 


A-2 



SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


DUTTINE, VALERIE NASA/GSFC 

EGLITIS , JOHN LOGICON, INC. 

ELLIOTT, DEAN F SWALES & ASSOCIATES INC. 

ELLIS , WALTER IBM 

EMEIGH, MICHAEL LOGICON, INC. 

EMERSON, CURTIS NASA/GSFC 

EMERY, RICHARD VITRO CORP. 

ERB, DONA M THE MITRE CORP. 

ESHLEMAN, LAURA DEPT. OF DEFENSE 

ESKER, LINDA COMPUTER SCIENCES CORP. 

EUSTICE, ANN IIT RESEARCH INSTITUTE 

FAFF, TIM IIT RESEARCH INSTITUTE 

FEERRAR, WALLACE THE MITRE CORP. 

FERNANDEZ, AL COMPUTER SCIENCES CORP. 

FINK, MARY LOUISE A EPA 

FISHER, TOM BOOZ, ALLEN & HAMILTON, INC. 

FISHKIND, STAN NASA/ HEADQUARTERS 

FORSYTHE, RON NASA/WALLOPS FLIGHT FACILITY 

FOURROUX, KATHY TELEDYNE BROWN ENGINEERING 

FOUSER, THOMAS J JET PROPULSION LAB 

FOX, EILEEN M IDE 

FRIEND, GREGG COMPUTER SCIENCES CORP. 

GACUK, PETER SPAR AEROSPACE CO. 

GAFFKE , WILLIAM E PROJECT ENGINEERING, INC. 

GALLAGHER, BARBARA DEPT. OF DEFENSE 

GARCIA, ENRIQUE A JET PROPULSION LAB 

GARY, ALAN V TELEDYNE BROWN ENGINEERING 

GIESER, JIM VITRO CORP. 

GILL, CHARLES W COMPUTER SCIENCES CORP. 

GILLILAND, DENISE STANFORD TELECOMMUNICATIONS, INC. 

GILYEAT, COLIN ADVANCED TECHNOLOGY, INC. 

GIRAGOSIAN , PAUL ..THE MITRE CORP. 

GLASS, JEFF PROJECT ENGINEERING, INC. 

GLIES , MARK TELESOFT 

GODFREY, SALLY NASA/GSFC 

GOUW, ROBERT TRW 

GRAHAM, MARCELLUS NASA/MS FC 

GRAYBEAL, KYLE FEDERAL AVIATION AGENCY 

GREEN, DAVID COMPUTER SCIENCES CORP. 

GRIMALDI, STEVE BOOZ, ALLEN & HAMILTON, INC. 

GRONDALSKI, JEAN COMPUTER SCIENCES CORP. 

GRONECK, MIKE IBM 

GUENTERBERG, SHARON PLANNING RESEARCH CORP. 

HAIN, GERTRUD SABAS 

HAIN, KLAUS SABAS 

HALL, DANA SYSTEMS ENGINEERING AND SECURITY, INC 

HALTERMAN, KAREN NASA/GSFC 

HAMILTON, JOHN R FEDERAL AVIATION AGENCY 

HAND, ROBERT GRUMMAN 


A- 3 


SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


HANG, BAILEY T 

HARLESS, WALTON N 

HARRIS, BERNARD 

HAYES , CAROL 

HEASTY, RICHARD 

HEFFERNAN, HENRY G 

HELLER, GERRY 

HENDRICK, ROBERT B 

HENRY-NICKENS , STEPHANIE 
HERBOLSHEIMER , CHARLES 

HEYL, NORMAN F. . . . 

HIGGINS, HERMAN 

HILL, MIKE 

HILL, VICKI 

HIOTT, JIM 

HOLLADAY, WENDY T 

HOLLOWAY , MI CHAE L 

HOOTEN, MONICA 

HOUSTON, SUSAN 

HSU, JAMES 

HUDSON, WENDY 

HUTCHISON, GREG 


BALLISTIC RESEARCH LAB 
TRW 

NASA/GSFC 
UNISYS CORP. 

COMPUTER SCIENCES CORP. 

EDP NEWS SERVICES 
COMPUTER SCIENCES CORP. 
COMPUTER SCIENCES CORP. 
NASA/GSFC 

FEDERAL AVIATION AGENCY 

U.S. GENERAL ACCOUNTING OFFICE 

DEPT. OF DEFENSE 

MARTIN MARIETTA 

THE MITRE CORP. 

UNISYS CORP. 

NASA 

NASA/LARC 

FORD AEROSPACE CO. 

LIS AN CORP. 

INFORMATION DYNAMICS, INC. 
CONCURRENT COMPUTER CO. 

IBM 


IRELAND, THOMAS 


TEKTRONIX DEFENSE SYSTEMS 


JAHANGIRI, MAJID 

JENKINS-BNAFA, JOVITA 
JENKINS -HUNTER, CARA R 

JESSEN, WILLIAM 

JOHANNS ON, HANK 

JONES , CARL 

JONES, DAVID 


COMPUTER SCIENCES CORP. 

TRW 

FEDERAL AVATION AGENCY 
GENERAL ELECTRIC CORP. 

FORD AEROSPACE CO. 

SCIENCE APPLICATIONS , INC . 
UNISYS CORP. 


KARLIN, JAY 

KASPUTYS , JACKIE . . 

KELLY, JOHN C 

KENNEDY, ELIZABETH A 

KESTER, RUSH 

KETCHUM, HARRY .... 

KILE, THOMAS 

KIM, ROBERT D 

KIMMINAU, PAMELA S.. 
KIRKPATRICK, MARK . 

KOPP, ALLAN 

KRAHN, MARGIE 

KREIDER, ROBERT ... 

KREMER, AUDREY 

KRIEGMAN, DAVID . . . 
KUDLINSKI, ROBERT A. 
KUNKEL, HENRY 


PROJECT ENGINEERING, INC. 
NATIONAL SCIENCE FOUNDATION 
JET PROPULSION LAB 
ROCKWELL INTERNATIONAL 
COMPUTER SCIENCES CORP. 
STATISTICA, INC. 

DEPT. OF THE ARMY 
COMPUTER SCIENCES CORP. 
DEPT. OF DEFENSE 
CARLOW ASSOC. 

TELESOFT 

DEPT. OF DEFENSE 

NASA/HEADQUARTERS 

IBM 

SRA CORP. 

NASA/LARC 

BOEING AEROSPACE CO. 


LABAUGH, MODENNA 
LABAUGH, ROBERT 


MARTIN MARIETTA 
MARTIN MARIETTA 



SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


LANDIS , LINDA 

LAVALLEE, DAVID 

LEE, JOHN A 

LEFEVRE , JEANNE 

LEVITT, DAVID S 

LIGHT, WARREN 

LIN, CHI Y 

LITTLEWOOD, CHRISTOPHER 

LIU, JEAN C 

LIU, KUEN-SAN 

LOCKMAN, ABE 

LOESH, BOB E 

LONGENECKER, SALLY . . . 

LUCZAK , RAY 

LaMARSH , MARGO 

MADDOCK, KAREN R 

MADISON, DAVE 

MADSEN, KENT 

MALAY, SUSAN 

MALTHOUSE, NANCY 

MARCINIAK, JOHN 

MARGONO, JOHAN 

MARKS, TOM 

MARSHLICK, MICHAEL . . . 

MARTIN, GEORGE W 

MARTINEZ, BILL 

MARVRAY , ESMOND 

MATHIASEN, CANDY 

MAURY, JESSE 

MCCLURE, MARTY 

MCDERMOTT, TIM 

MCDONALD, BETH 

MCGARRY , FRANK 

MCKENNA, JOHN J 

MCWEE, HARRY 

MEDEIROS, EDWARD 

MERIFIELD, JAMES 

MICKEL, SUSAN 

MILLER, JOHN 

MILLER, KENNETH 

MOONEY, PAT 

MOYLEN, ALDEN 

MULLER, ERICH 

MYERS , MONTGOMERY 

MYERS, PHILIP I 

NARROWS , BERNIE 

NELSON, ROBERT W 

NICKENS, DON O 

O'BRIEN, DAVID 

O'MALLEY, JAMES 


COMPUTER SCIENCES CORP. 

FORD AEROSPACE CO. 

GENERAL DYNAMICS 
UNISYS CORP. 

COMPUTER SCIENCES CORP. 

CTA, INC. 

JET PROPULSION LAB 
MARTIN MARIETTA 
COMPUTER SCIENCES CORP. 
COMPUTER SCIENCES CORP. 

GTE 

JET PROPULSION LAB 
COMPUTER SCIENCES CORP. 
COMPUTER SCIENCES CORP. 
NASA/LARC 

TECHNOLOGY PLANNING, INC. 

I IT RESEARCH INSTITUTE 
UNIVERSITY OF CALIFORNIA 
PLANNING ANALYSIS CORP. 
LOGICON, INC. 

CTA, INC. 

COMPUTER SCIENCES CORP. 

DEPT. OF DEFENSE 
COMPUTER SCIENCES CORP. 
PROJECT ENGINEERING, INC. 

FORD AEROSPACE CO. 

NASA/GSFC 
UNISYS CORP. 

NASA/GSFC 

BENDIX FIELD ENGINEERING CORP 
COMPUTER SCIENCES CORP. 

DEPT. OF DEFENSE 
NASA/GSFC 
DEPT. OF DEFENSE 
DEPT. OF DEFENSE 
COMPUTER SCIENCES CORP. 
ADVANCED TECHNOLOGY, INC. 
GENERAL ELECTRIC CORP. 
COMPUTER SCIENCES CORP. 

THE MITRE CORP. 

IBM 

COMPUTER SCIENCES CORP. 
SPARTA, INC. 

UNISYS CORP. 

COMPUTER SCIENCES CORP. 

BENDIX FIELD ENGINEERING CORP 

NASA/HEADQUARTERS 

HARRIS SPACE SYSTEMS CORP. 

CONCURRENT COMPUTER CO. 

HGO TECHNOLOGY 


A-5 



O'MALLEY, RUTH E 
O'NEIL, BOB T. . . 


SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


HGO TECHNOLOGY 
NASA/HEADQUARTERS 


PAGE, GERALD COMPUTER SCIENCES CORP. 

PAJERSKI, ROSE NASA/GSFC 

PALMER, JAMES G APPLIED PHYSICS LAB 

PARESO, SAM HGO TECHNOLOGY 

PASCIUTO , MIKE NASA/HEADQUARTERS 

PELNIK, TAMMY M THE MITRE CORP. 

PEREZ, FRANK UNISYS CORP. 

PFLARTER , DAVE MCDONNELL DOUGLAS CORP. 

PLETT, MICHAEL E COMPUTER SCIENCES CORP. 

PLUNKETT, THERESA DEPT. OF DEFENSE 

POLE, THOMAS SOFTWARE PRODUCTIVITY CONSORTIUM 

PORTER, ADAM A UNIVERSITY OF CALIFORNIA 

POTTER, WILLIAM NASA/GSFC 

PRESSMAN, TOM STRICTLY BUSINESS COMPUTER SYSTEMS 

PRESTON, DAVID IIT RESEARCH INSTITUTE 

PRISEKIN, JULIA IIT RESEARCH INSTITUTE 

PURCELL, ELIZABETH THE MITRE CORP. 

QUANN, EILEEN S FASTRAK TRAINING, INC. 

RADOSEVICH, JIM NASA/HEADQUARTERS 

RANADE, PRAKASH V COMPUTER SCIENCES CORP. 

RANEY, DALE L UNISYS CORP. 

RAPP, DAVE DEPT. OF DEFENSE 

REDDY, JAY STRICTLY BUSINESS COMPUTER SYSTEMS 

RIGTERINK, PAUL COMPUTER SCIENCES CORP. 

RITTER, SHEILA J NASA/GSFC 

ROBESON, THERESA IIT RESEARCH INSTITUTE 

ROGERS, KATHY THE MITRE CORP. 

ROSENZWEIG, DAVE HARRIS SPACE SYSTEMS CORP. 

ROTTERMAN, GENE GENERAL DYNAMICS 

ROY, DAN FORD AEROSPACE CO. 

RUDOLPH, RUTH COMPUTER SCIENCES CORP. 

RUMPL, WILLIAM M COMPUTER SCIENCES CORP. 

RUSKIN, LESLIE COMPUTER SCIENCES CORP. 

RUTEMILLER, OREN G STANFORD TELECOMMUNICATIONS, INC. 


SABATINO, RICK 

SAUBLE , GEORGE 

SCHELLHASE, RONALD J 
SCHOENBORN, BOB ... 

SCHUETZLE, JIM 

SCHULER, MARY P 

SCHWARTZ, KAREN D. . . 

SCOTT, STEVE 

SEAVER, DAVID P 

SEIDEWITZ , ED 

SEVERINO, TONY 

SHAW, CHARLES E 

SHAWE, M 


OMITRON, INC. 

OMITRON, INC. 

COMPUTER SCIENCES CORP. 
STATISTICA, INC. 

FORD AEROSPACE CO. 

NASA/LARC 

GOVERNMENT COMPUTER NEWS 
UNISYS CORP. 

PROJECT ENGINEERING, INC. 
NASA/GSFC 

GENERAL ELECTRIC/RCA 
CENTURY COMPUTING , INC . 

BENDIX FIELD ENGINEERING CORP. 


A-6 



SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


SHEKARCHI, JOHN COMPUTER SCIENCES CORP. 

SHEPPARD, SYLVIA B NASA/GSFC 

SHI, JEFF RMS TECHNOLOGIES, INC. 

SHOAN, WENDY NASA/GSFC 

SHYMAN, STEVEN INSTITUTE FOR DEFENSE ANALYSIS 

SIEGERT, GREG IIT RESEARCH INSTITUTE 

SILBERBERG, DAVID NATIONAL COMPUTER SECURITY CENTER 

SIMMONS, BARBARA DEPT. OF DEFENSE 

SIMONS, MARK NASA/GSFC 

SLACK, IKE MCDONNELL DOUGLAS ASTRONAUTICS CO. 

SLEDGE , FRANK GTE 

SMITH, GENE NASA/GSFC 

SMITH, OLIVER EG&G WASC, INC. 

SMITH, PAUL H NASA/HEADQUARTERS 

SOLOMON, CARL ST SYSTEMS CORP. 

SPENCE, BAILEY COMPUTER SCIENCES CORP. 

SQUIRE, JON WESTINGHOUSE ELECTRIC CORP. 

SQUIRES, BURTON E CONSULTANT 

STARK, MICHAEL NASA/GSFC 

STEGER, WARREN COMPUTER SCIENCES CORP. 

STEINBACHER, JODY NASA/JPL 

STOKES, ED COMPUTER SCIENCES CORP. 

STUART, ANTOINETTE D DEPT. OF THE NAVY 

SUBOTIN, ROSA COMPUTER SCIENCES CORP. 

SULLIVAN, JOHN D FEDERAL AVIATION AGENCY 

SUN, ALICE THE MITRE CORP. 

SWALTZ, LEON IBM 

SWEIGERT, DAVID DAEDALEAN 

SZULEWSKI, PAUL C. S. DRAPER LAB, INC. 

TASAKI, KEIJI NASA/GSFC 

TAUSWORTHE, BOB NASA/JPL 

TAVASSOLI , NAZ COMPUTER SCIENCES CORP. 

TAYLOR, GUY FLEET COMBAT DIRECTION SYSTEMS 

THACKREY, KENT PLANNING ANALYSIS CORP. 

THOMPSON, JOHN T FORD AEROSPACE CO. 

THORNTON, THOMAS NASA/JPL 

TRAYSYELUE, WEISNER COMPUTER SCIENCES CORP. 

TSAGOS , DINOS GRUMMAN 

TZENG, NIGL NASA/STX 


UPPERT, DICK GRUMMAN 

URBINA, DANIEL FORD AEROSPACE CO. 

VALETT, JON NASA/GSFC 

VAN METER, DAVID LOGICON, INC. 

VEHMEIER, DAWN R OASD (P&L) WSIG 

VIENNEAU, ROBERT KAMAN SCIENCES CORP. 

VOIGT, DAVID BENDIX FIELD ENGINEERING CORP. 

VOIGT, SUSAN NASA/LARC 


WALIGORA , SHARON R COMPUTER SCIENCES CORP. 

WALKER, CARRIE K NASA/LARC 


A-7 



SECOND NASA Ada USERS SYMPOSIUM ATTENDEES 


WALKER, GARY N JET PROPULSION LAB 

WALKER, JOHN IIT RESEARCH INSTITUTE 

WATSON, BARRY IIT RESEARCH INSTITUTE 

WAUGH, DOUG IBM 

WEEKLEY, JIM FORD AEROSPACE CO. 

WEISMAN, DAVID UNISYS CORP. 

WELBORN, RICHARD P STANFORD TELECOMMUNICATIONS, INC. 

WENDE, ROY FAIRCHILD SPACE CO. 

WESTON, WILLIAM NASA/GSFC 

WILDER, DAVID C DEPT. OF DEFENSE 

WILLIAMS, CHERYL CTA, INC. 

WILSON, BILL M QUONG ASSOC. 

WILSON, RUSSELL BOEING AEROSPACE CO. 

WITTIG, MIKE IIT RESEARCH INSTITUTE 

WONG, ALICE A FEDERAL AVIATION AGENCY 

WOOD, DICK COMPUTER SCIENCES CORP. 

WOODWARD, HERBERT P TRW FEDERAL SYSTEMS GROUP 

YANG, CHAO NASA/GSFC 

YOUNG, LEON WESTINGHOUSE ELECTRIC CORP. 

ZAVELER, SAUL U.S. AIR FORCE 

ZELKOWITZ, MARV UNIVERSITY OF MARYLAND 

ZOCH, DAVID FORD AEROSPACE CO. 


A-8 



APPENDIX B — STANDARD BIBLIOGRAPHY OF SEL LITERATURE 


5798 





STANDARD BIBLIOGRAPHY OF SEL LITERATURE 


The technical papers, memorandums, and documents listed in 
this bibliography are organized into two groups. The first 
group is composed of documents issued by the Software Engi- 
neering Laboratory (SEL) during its research and development 
activities. The second group includes materials that were 
published elsewhere but pertain to SEL activities. 


SEL-ORIGINATED DOCUMENTS 

SEL-76-001, Proceedings From the First Summer Software Engi- 
neering Workshop . August 1976 

SEL-77-002 , Proceedings From the Second Summer Software En- 
gineering Workshop . September 1977 

SEL-77-004, A Demonstration of AXES for NAVPAK . M. Hamilton 
and S. Zeldin, September 1977 

SEL-77-005, GSFC NAVPAK Design Specifications Languages 
Study . P. A. Scheffer and C. E. Velez, October 1977 

SEL-78-005, Proceedings From the Third Summer Software Engi- 
neering Workshop , September 1978 

SEL-78-006, GSFC Software Engineering Research Reguirements 
Analysis Study , P. A. Scheffer and C. E. Velez, November 1978 

SEL-78-007 , Applicability of the Rayleigh Curve to the SEL 
Environment . T. E. Mapp, December 1978 

SEL-78-302 , FORTRAN Static Source Code Analyzer Program (SAP) 
User's Guide (Revision 3) . W. J. Decker and W. A. Taylor, 

July 1986 

SEL-79-002, The Software Engineering Laboratory; Relation- 
ship Equations , K. Freburger and V. R. Basili, May 1979 

SEL-79-003, Common Software Module Repository (CSMR) System 
Description and User's Guide . C. E. Goorevich, A. L. Green, 
and S. R. Waligora, August 1979 

SEL- 7 9 - 004 , Evaluation of the Caine. Farber, and Gordon Pro- 
gram Design Language (PPL) in the Goddard Space Flight Center 
(GSFC) Code 580 Software Design Environment , C. E. Goorevich, 
A. L. Green, and W. J. Decker, September 1979 


B-l 












SEL-79-005 , Proceedings From the Fourth Summer Software En- 
gineering Workshop . November 1979 

SEL-80-002, Multi-Level Exp ression Design Language- 
Beguirement Level (MEDL-R) System Evaluation . W. J. Decker 
and C. E. Goorevich, May 1980 

SEL-80-003 , Multimission Mo dular Spacecraft Ground Support 
Software System (MMS/GSSS) State-of-the-Art Computer Systems/ 
Compatibility Study . T. Welden, M. McClellan, and 
P. Liebertz, May 1980 

SEL-80-005, A Study of the Musa Reliability Model , 

A. M, Miller, November 1980 

SEL-80-006 , Proceedings From the Fifth Annual Software Engi- 
neering Workshop , November 1980 

SEL-80-007 , An Appraisal of .Selected Cost/Resource Estimation 
Models for Software Systems . J. F. Cook and F. E. McGarry, 
December 1980 

SEL-81-008 , Cost and Reliability Estimation Models (CAREM) 
User's Guide . J. F. Cook and E. Edwards, February 1981 

SEL-81-009 , Software Engineering Laboratory Programmer Work- 
bench Phase 1 Evaluation . W. J. Decker and F. E. McGarry, 
March 1981 

SEL-81-011, Evaluating Software Development bv Analysis of 
Change Data , D. M. Weiss, November 1981 

SEL-81-012 , The Rayleigh Curve as a Model for Effort Distri- 
butio n Over the Life of Medium Scale Software Systems . 

G. 0. Picasso, December 1981 

SEL-81-013, Proceedings From the Sixth Annual Software Engi- 
neering Workshop . December 1981 

SEL-81-014 , Automated Collection of Software Engineering Dat-a 
in the Software Engineering Laboratory (SEL) , A. L. Green, 

W. J. Decker, and F. E. McGarry, September 1981 

SEL-81-101, Guide to Data Collection . V. E. Church, 

D. N. Card, F. E. McGarry, et al., August 1982 

SEL-81-104 , The Software Engineering Laboratory . D. N. Card, 

F. E. McGarry, G. Page, et al., February 1982 


B-2 





SEL-81-107, Software Engineering Laboratory (SEL) Compendium 
of Tools . W. J. Decker, W. A. Taylor, and E. J. Smith, 
February 1982 

SEL-81-110 , Evaluation of an Independent Verification and 
Validation (IV&V) Methodology for Flight Dynamics , G. Page, 

F. E. McGarry, and D. N. Card, June 1985 

SEL-81-205, Recommended Approach to Software Development . 

F. E. McGarry, G. Page, S. Eslinger, et al., April 1983 

SEL-82-001 , Evaluation of Management Measures of Software 
Development . G. Page, D. N. Card, and F. E. McGarry, 

September 1982, vols. 1 and 2 

SEL-82-004 , Collected Software Engineering Papers: VqLz 

ume 1 , July 1982 

SEL-82-007, Proceedings From the Seventh Annual Software 
Engineering Workshop . December 1982 

SEL-82-008, Evaluating Software Development bv Analysis of 
Change s ; The Data From the Software Engineering Laboratory , 

V. R. Basili and D. M. Weiss, December 1982 

SEL-82-102 , FORTRAN Static Source Code Analyzer Program 
( SAP) System Description (Revision 1) . W. A. Taylor and 

W. J. Decker, April 1985 

SEL-82-105 , Glossary of Software Engineering Laboratory 
Terms , T. A. Babst, F. E. McGarry, and M. G. Rohleder, 

October 1983 

SEL-82-806, Annotated Bibliography of Software Engineering 
Laboratory Literature . M. Buhler and J. Valett, November 1989 

SEL-83-001 , An Approach to Software Cost Estimation , 

F. E. McGarry, G. Page, D. N. Card, et al., February 1984 

SEL-83-002 , Measures and Metrics for Software Development . 

D. N. Card, F. E. McGarry, G. Page, et al., March 1984 

SEL-83-003, Collected Software Engineering Papers: Vol- 

ume I I . November 1983 

SEL-83-006, Monitoring Software Development Through Dynamic 
Variables , C. W. Doerflinger, November 1983 

SEL-83-007, Proceedings From the Eighth Annual Software En- 
gineering Workshop . November 1983 


B-3 


SEL-83-106 , Monitoring Soft ware Development Through Dynamic: 
Variables — (.Revision 1) . C. W. Doerflinger, November 1989 

SEL-84-001 , Manager's Handbook for Software Development . 

W. W. Agresti, F. E. McGarry, D. N. Card, et al., April 1984 

SEL-84-003 , Investigation of Specification Measures for the 
Software Engineering Laboratory (SEL> . w. w. Agresti, 

V. E. Church, and F. E. McGarry, December 1984 

SEL-84-004 , Proceedings From the Ninth Annual Software Engi- 
neering Workshop . November 1984 

SEL-85-001, A Comparison of Software Verification Technigues . 
D. N. Card, R. W. Selby, Jr., F. E. McGarry, et al., April 
1985 

SEL-85-002 , Ada Training E valuation and Recommendations From 
the Gamma Rav Obser vatory Ada Development Team . R. Murphy 
and M. Stark, October 1985 

SEL-85-003, Collected Software Engineering Papers: Vol- 

ume III . November 1985 

SEL-85-004 , Evaluations of Software Technologies: Testing. 

CLEANROOM. and Metrics . R. W. Selby, Jr., May 1985 

SEL-85-005 , Software Verification and Testing . D. N. Card, 

C. Antle, and E. Edwards, December 1985 

SEL-85-006, Proceedings From the Tenth Annual Software Engi- 
neering Workshop . December 1985 

SEL-86-001 , Programmer's Handbook for Fligh t Dynamics Soft- 
wsre Development, R. Wood and E. Edwards, March 1986 

SEL-86— 002, General Obi ec t-Oriented Software Development . 

E. Seidewitz and M. Stark, August 1986 

SEL-8 6-003 , Flight Dynamics System Software Development En- 
vironment Tutorial . J. Buell and P. Myers, July 1986 

SEL-86-004 , Collec ted Software Engineering Papers: Vol- 

ume IV . November 1986 

SEL-8 6-005 , Measuring Software Design . D. N. Card, October 
1986 

SEL-86-006 , Proceedings From the Eleventh Annual Software 
Engineering Workshop . December 1986 


B-4 










SEL-87-001, Product Assurance Policies and Procedures for 
Flight Dynamics Software Development , S. Perry et al., March 
1987 

SEL-87-002 , Ada Style Guide (Version 1.1) , E. Seidewitz 
et arl . , May 1987 

SEL-87-003 , Guidelines for Applying the Composite Specifica- . 
tion Model (CSM) . W. W. Agresti, June 1987 

SEL-87-004 , Assessing the Ada Design Process and Its Impli- 
cations: A Case Study , S. Godfrey, C. Brophy, et al., 

July 1987 

SEL-87— 008 , Data Collection Procedures for the Rehosted SEL 
Database . G. Heller, October 1987 

SEL-87-009, Collected Software Engineering Papers: Volume V . 

S. DeLong, November 1987 

SEL-87-010 , Proceedings From the Twelfth Annual Software En- 
gineering Workshop . December 1987 

SEL-88-001 , System Testing of a Production Ada Project: The 

GRODY Study . J. Seigle, L. Esker, and Y. Shi, November 1988 

SEL-88-002, Collected Software Engineering Papers: Vol- 

ume VI . November 1988 

SEL-88-003, Evolution of Ada Technology in the Flight Dynam- 
ics Area: Design Phase Analysis . K. Quimby and L. Esker, 

December 1988 

SEL-88-004, Proceeding of the Thirteenth Annual Software 
Engineering Workshop . November 1988 

SEL-88-005 , Proceedings of the First NASA Ada User's Sympo- 
sium . December 1988 

SEL-89-002, Implementation of a Production Ada Project: The 

GRODY Study . S. Godfrey and C. Brophy, September 1989 

SEL-89-003, Software Management Environment ( SME ) Concepts 
and Architecture . W. Decker and J. Valett, August 1989 

SEL-89-004, Evolution of Ada Technology in the Flight Dy- 
namics Area: Implementation/Testing Phase Analysis . 

K. Quimby, L. Esker, L. Smith, M. Stark, and F. McGarry, 
November 1989 


B-5 









SEL-89-005, Lessons Learned in the Transition to Ada From 
FORTRAN at NASA/Goddard , C. Brophy, November 1989 

SEL-89-006 , Collecte d Software Engineering Papers: Vol- 

ume VII , November 1989 

SEL-89-007, Proceedings of the Fourteenth Annual Software 
Engineering Workshop, November 1989 

SEL-89-008, Proceedin gs of the Second NASA Ada Users' Sympo- 
sium . November 1989 

SEL-89-101, Software Engineering Laboratory (SEL) Database 
Organisat ion and User»s Guide (Revision jj, M. So, G. Heller, 
S. Steinberg, K. Pumphrey, and D. Spiegel, February 1990 

SEL-9 0-001, Database Access Manager fo r the Software Engi- 
neering Laboratory (DAMSEL) , N. Buhler and K. Pumphrey, 

March 1990 

fiUT-PWTATtt Q LITERATURE 

4 Agresti, w. w., V. E. Church, D. N. Card, and P. L. Lo, 
"Designing With Ada for Satellite Simulation: A Case Study," 

Proceedings of the First International Symposium on Ada for 
the NASA Space Station . June 1986 

2 Agresti, w. W. , F. E. McGarry, D. N. Card, et al., "Meas- 
uring Software Technology," Program Transforma tion and Pro- 
gramming Environments. New York: Springer-Verlag, 1984 

1 Bailey, J. W. , and V. R. Basili, "A Meta-Model for Soft- 
ware Development Resource Expenditures,” Proceedings of the 
Fifth International Conference on Software Eng ineering. 

New York: IEEE Computer Society Press, 1981 

7 Basili, V. R., Maintenan ce ■ Reuse-Oriented Software 
Development . University of Maryland, Technical Report 
TR-2244 , May 1989 

^Basili, V. R., "Models and Metrics for Software Manage- 
ment and Engineering," ASME Advances in Computer Technology , 
January 1980, vol. 1 

7 Basili, V. R., Software Development: A Paradigm for the 

Future . University of Maryland, Technical Report TR-2263, 

June 1989 

Basili, V. R., Tutorial on Models and Metrics for S oftware 
Management and Engineering . New York: IEEE Computer Society 

Press, 1980 (also designated SEL-80-008) 



3 Basili, V. R., "Quantitative Evaluation of Software Meth- 
odology, " Proceedings of the First Pan-Pacific Computer Con- 
ference . September 1985 

^Basili, V. R., and J. Beane, "Can the Parr Curve Help With 
Manpower Distribution and Resource Estimation Problems?," 
Journal of Systems and Software . February 1981, vol. 2, no. 1 

^Basili, V. R. , and K. Freburger, "Programming Measurement 
and Estimation in the Software Engineering Laboratory," 
Journal of Systems and Software . February 1981, vol. 2, no. 1 

3 Basili, V. R., and N. M. Panlilio-Yap, "Finding Relation- 
ships Between Effort and Other Variables in the SEL," 
Proceedings of the International Computer Software and Ap- 
plications Conference . October 1985 

^Basili, V. R., and D. Patnaik, A Study on Fault Prediction 
and Reliability Assessment in the SEL Environment . University 
of Maryland, Technical Report TR-1699, August 1986 

^Basili, V. R., and B. T. Perricone, "Software Errors and 
Complexity: An Empirical Investigation," Communications of 

the ACM . January 1984, vol. 27, no. 1 

^-Basili, V. R., and T. Phillips, "Evaluating and Comparing 
Software Metrics in the Software Engineering Laboratory," 
Proceedings of the ACM SIGMETRICS Symposium/Workshop: Qual- 

ity Metrics , March 1981 


Basili, V. R. , and J. Ramsey, Structural Coverage of Func- 
tional Testing . University of Maryland, Technical Report 
TR-1442 , September 1984 


3 Basili, V. R., and C. L. Ramsey, "ARROWSMITH-P — A Proto- 
type Expert System for Software Engineering Management," 
Proceedings of the IEEE/MITRE Expert Systems in Government 
October 1985 


Basili, V. R., and R. Reiter, "Evaluating Automatable Meas- 
ures for Software Development," Proceedings of the Workshop 
on Quantitative Software Models for Reliability. Complexity, 
and Cost . New York: IEEE Computer Society Press, 1979 

^Basili, V., and H. D. Rombach, "Tailoring the Software 
Process to Project Goals and Environments," Proceedings of 
the 9th International Conference on Software Engineering . 
March 1987 


B-7 




5 Basili , V., and H. D. Rombach, "T A M E: Tailoring an Ada 

Measurement Environment/" Proceed ings of the Joint Ada Con- 
ference . March 1987 

SBasili, V., and H. D. Rombach, "TAME: Integrating 

Measurement Into Software Environments," University of 
Maryland, Technical Report TR-1764, June 1987 

6 Basili, V. R., and H. D. Rombach, "The TAME Project: 

Towards Improvement-Oriented Software Environments," USEE 
Transactions on Sof tware Engineering, June 1988 

7 Basili, V. R., and H. D. Rombach, Towards A Comprehensive 
Framework for Reuse: A Reuse -Enabling Software Evolution 

invl ronment . University of Maryland, Technical Report 
TR-2158, December 1988 

2 Basili, V. R., R. W. Selby, Jr., and T. Phillips, "Metric 
Analysis and Data Validation Across FORTRAN Projects," IEEE 
Transactions on Software Engineering. November 1983 

3 Basili, V. R., and R. w. Selby, Jr., "Calculation and Use 
of an Environments's Characteristic Software Metric Set," 
Proceedings of the Eighth International Conference on Soft- 
ware Engineering . New York: IEEE Computer Society Press, 

1985 

Basili, V. R., and R. W. Selby, Jr., Comparin g the Effective- 
ness of Software Testing Strategies . University of Maryland, 
Technical Report TR-1501, May 1985 

3 Basili, V. R., and R. W. Selby, Jr., "Four Applications 
of a Software Data Collection and Analysis Methodology," Pro- 
ceedings of the NATO Advanced Study Institute , August 1985 

4 Basili, V. R., R. W. Selby, Jr., and D. H. Hutchens, "Ex- 
perimentation in Software Engineering," IEEE Tr ansactions on 
Software Engineering. July 1986 

5 Basili, V. and R. Selby, Jr., "Comparing the Effective- 
ness of Software Testing' Strategies, " IEEE Tr ansactions on 
Software Engineering . December 1987 

2 Basili, V. R., and D. M. Weiss, A Methodology for Collecting 
Valid Software Engineering Data . University of Maryland, 
Technical Report TR-1235, December 1982 

3 Basili, V. R., and D. M. Weiss, "A Methodology for Collect- 
ing Valid Software Engineering Data," IEEE Transacti ons on 
Software Engineering. November 1984 


B-8 


^Basili, V. R. , and M. V. Zelkowitz, "The Software Engi- 
neering Laboratory: Objectives," Proceedings of the Fif- 

teenth Annual Conference on Computer Personnel Research , 
August 1977 

Basili, V. R. , and M. V. Zelkowitz, "Designing a Software 
Measurement Experiment," Proceedings of the Software Life 
Cycle Management Workshop , September 1977 

^•Basili, V. R., and M. V. Zelkowitz, "Operation of the Soft- 
ware Engineering Laboratory," Proceedings of the Second Soft- 
ware Life Cycle Management Workshop . August 1978 

^Basili, V. R. , and M. V. Zelkowitz, "Measuring Software 
Development Characteristics in the Local Environment," Com- 
puters an d Structures, August 1978, vol. 10 

Basili, V. R., and M. V. Zelkowitz, "Analyzing Medium Scale 
Software Development," Proceedings of the Third Interna- 
tional Conference on Software Engineering . New York: IEEE 

Computer Society Press, 1978 

5 Brophy, C., W. Agresti, and V. Basili, "Lessons Learned 
in Use of Ada-Oriented Design Methods," Proceedings of the 
Joint Ada Conference , March 1987 

6 Brophy, C. E., S. Godfrey, W. W. Agresti, and V. R. Basili, 
"Lessons Learned in the Implementation Phase of a Large Ada 
Project," Proceedings of the Washington Ada Technical Con- 
ference . March 1988 

2 Card, D. N., "Early Estimation of Resource Expenditures and 
Program Size," Computer Sciences Corporation, Technical Memo- 
randum, June 1982 

2 Card, D. N., "Comparison of Regression Modeling Techniques 
for Resource Estimation," Computer Sciences Corporation, 
Technical Memorandum, November 1982 

2 Card, D. N., “A Software Technology Evaluation Program," 
Annais do XVIII Conoresso Nacional de Informatica , 

October 1985 

5 Card, D., and W. Agresti, "Resolving the Software Science 
Anomaly," The Journal of Systems and Software . 1987 

^Card, D. N., and W. Agresti, "Measuring Software Design 
Complexity," The Journal of Systems and Software , June 1988 


B-9 


Card, D. N., V. E. Church, W. W. Agresti, and Q. L. Jordan, 

"A Software Engineering View of Flight Dynamics Analysis 
System," Parts I and II, Computer Sciences Corporation, 
Technical Memorandum, February 1984 

4 Card, D. N., V. E. Church, and W. W. Agresti, "An Empirical 
Study of Software Design Practices," IEEE Transactions on 
Software Enoi nee ring . February 1986 

Card, D. N. , Q. L. Jordan, and V. E. Church, "Characteris- 
tics of FORTRAN Modules," Computer Sciences Corporation, 
Technical Memorandum, June 1984 

5 Card, D., F. McGarry, and G. Page, "Evaluating Software 
Engineering Technologies," IEEE Transactions on Software 
Engineering . July 1987 

3 Card, D. N., G. T. Page, and F. E. McGarry, "Criteria for 
Software Modularization," Proceedings of the Eighth Interna- 
tional Conference on Software Engineering . New York: IEEE 

Computer Society Press, 1985 

ichen, E., and M. V. Zelkowitz, "Use of Cluster Analysis To 
Evaluate Software Engineering Methodologies," Proceedings of 
the Fifth International Conference on Software Engineering . 
New York: IEEE Computer Society Press, 1981 

4 Church, V. E., D. N. Card, W. W. Agresti, and Q. L. Jordan, 
"An Approach for Assessing Software Prototypes," ACM Software 
Engineering Notes . July 1986 

2 Doerf linger , C. W. , and V. R. Basili, "Monitoring Software 
Development Through Dynamic Variables," Proceedings of the 
Seventh International Computer Software and Applications 
Conference . New York: IEEE Computer Society Press, 1983 

5 Doubleday, D., “ASAP: An Ada Static Source Code Analyzer 

Program," University of Maryland, Technical Report TR-1895, 
August 1987 (NOTE: 100 pages long) 

6 Godfrey, S., and C. Brophy, "Experiences in the Implemen- 
tation of a Large Ada Project," Proceedings of the 1988 
Washington Ada Symposium . June 1988 

Hamilton, M. , and S. Zeldin, A Demonstration of AXES for 
NAVPAK . Higher Order Software, Inc., TR-9, September 1977 
(also designated SEL-77-005) 

Jeffery, D. R., and V. Basili, Characterizing Resource Data: 

A Model for Logical Association of Software Data , University 
of Maryland, Technical Report TR-1848, May 1987 


B-10 


6 Jeffery, D. R., and V. R. Basili, "Validating the TAME Re- 
source Data Model , " Proceedings of the Tenth Internation al 
Conference on Software Engineering , April 1988 

5 Mark, L., and H. D. Rombach, A Meta Information Base for 
Software Engineering , University of Maryland, Technical Re- 
port TR-1765 , July 1987 

6 Mark, L., and H. D. Rombach, "Generating Customized Software 
Engineering Information Bases From Software Process and Prod- 
uct Specifications," Proceedings of the 2 2nd Annual Hawaii 
international Conference on System Sciences , January 1989 

^McGarry, F., and W. Agresti, "Measuring Ada for Software 
Development in the Software Engineering Laboratory (SEL)," 
Proceedings of the 21st Annual Hawaii I nternational — C<?n~ 
ference on System Sciences , January 1988 

7 McGarry, F. , L. Esker, and K. Quimby, "Evolution of Ada 
Technology in a Production Software Environment," Proceedings 
of the Sixth Washington Ada Symposium (WADAS) . June 1989 

3 McGarry, F. E., J. Valett, and D. Hall, "Measuring the 
Impact of Computer Resource Quality on the Software Develop- 
ment Process and Product," Proceedings o f the Hawaiian Inter= 
national Conference on System Sciences , January 1985 

National Aeronautics and Space Administration (NASA) , NASA 
Software Research Technology Workshop (Proceedings), March 
1980 

3 Page, G., F. E. McGarry, and D. N. Card, "A Practical Ex- 
perience With Independent Verification and Validation," 
Proceedings of the Eighth International Computer Software 
and Applications Conference , November 1984 

5 Ramsey, C., and V. R. Basili, An Evaluation of Expert Sys- 
tems for Software Engineering Management , University of 
Maryland, Technical Report TR-1708, September 1986 

3 Ramsey, J., and V. R. Basili, "Analyzing the Test Process 
Using Structural Coverage," Proceedings of the Eighth Inter- 
national Conference on Software Engineering . New York: 

IEEE Computer Society Press, 1985 

5 Rombach, H. D., "A Controlled Experiment on the Impact of 
Software Structure on Maintainability," IEEE Transactions on 
Software Engineering , March 1987 


B-ll 



®Rombach, H. D., and V. R. Basili, "Quantitative Assessment 
of Maintenance: An Industrial Case Study," Proceedings From 

the Conference on Softwa re Maintenance . September 1987 

®Rombach, H. D., and L. Mark, "Software Process and Prod- 
uct Specifications: A Basis for Generating Customized SE 

Information Bases,” Proceedi ngs of the 22nd Annual Hawaii 
International Conference on System Sciences , January 1989 

7 Rombach, H. D., and B. T. Ulery, Establishing a Measure- 
ment Based Maintenance Improvemen t Program: Lessons Learned 

in the SEL . University of Maryland, Technical Report 
TR-2252 , May 1989 

^Seidewitz, E., "General Object-Oriented Software Develop- 
ment: Background and Experience," Proceedings of the 21st 

Hawaii International Conf erence on System Sciences , January 
1988 

^Seidewitz, E., "General Object-Oriented Software Develop- 
ment with Ada: A Life Cycle Approach," Proceedings of the 

CASE Tec hnology Conference . April 1988 

^Seidewitz, E., "Object-Oriented Programming in Smalltalk 
and Ada," Proceedings of the 1987 C onference on Object- 
Oriented Programming Systems. Langu ages, and Applications , 
October 1987 

4 Seidewitz, E., and M. Stark, "Towards a General Object- 
Oriented Software Development Methodology," Proceedings of 
the First International Symposium on Ada for the NASA Space 
Station , June 1986 

7 Stark, M. E. and E. W. Booth, "Using Ada to Maximize 
Verbatim Software Reuse," Proceedings of TRI-Ada 1989 , 

October 1989 

Stark, M. , and E. Seidewitz, "Towards a General Object- 
Oriented Ada Lifecycle," Proceedings of the Joint Ada Con- 
ference , March 1987 

7 Sunazuka . T., and V. R. Basili, Integrat ing Automated Sup- 
port for a Software Managem ent Cycle Into the TAME System . 
University of Maryland, Technical Report TR-2289, July 1989 

Turner, C., and G. Caron, A Compari son of RADC and NASA/SEL 
Software Devel opment Data . Data and Analysis Center for 
Software, Special Publication, May 1981 


B-12 


Turner, C., G. Caron, and G. Brement, NASA/SEL Data Compen- 
dium . Data and Analysis Center for Software, Special Publi- 
cation, April 1981 

5 Valett, J., and F. McGarry, "A Summary of Software Measure- 
ment Experiences in the Software Engineering Laboratory," 
Proceedings of the 21st An n ual Hawaii International Confer-. 
ence on System Sciences , January 1988 

3 Weiss, D. M., and V. R. Basili, "Evaluating Software De- 
velopment by Analysis of Changes: Some Data From the. Soft- 

ware Engineering Laboratory," IEEE Tra nsactions on Software 
Engineering , February 1985 

5 Wu, L., V. Basili, and K. Reed, "A Structure Coverage Tool 
for Ada Software Systems," Proceedin gs of the Joint Ada Con- 
ference , March 1987 

J-Zelkowitz, M. V., "Resource Estimation for Medium Scale 
Software Projects," Proceedings of th e Twelfth Conference on 
the Interface of Statistics and Computer Science . New York: 
IEEE Computer Society Press, 1979 

2 Zelkowitz, M. V., "Data Collection and Evaluation for Ex- 
perimental Computer Science Research," Empirica l Foundations 
for Computer and Information Science (proceedings), 

November 1982 

6 Zelkowitz, M. V., "The Effectiveness of Software Proto- 
typing: A Case Study," Proceedings of th e 26th Annual Tech- 

nical Symposium of the Washington, D. C., Chapter of the ACM , 
June 1987 

6 Zelkowitz, M. V., "Resource Utilization During Software 
Development," Journal of Systems and Software , 1988 

Zelkowitz, M. V., and V. R. Basili, "Operational Aspects of 
a Software Measurement Facility," Proceedings of the Soft- 
ware Life Cycle Manageme nt Workshop, September 1977 

NOTES : 

^This article also appears in SEL-82-004, Collect ed Soft- 
ware Engineering Papers: Volume 1/ July 1962. 

2 This article also appears in SEL-83-003, Collecte d Soft- 
ware Engineering Papers: Volume II , November 1983. 

3 This article also appears in SEL-85-003, Collected Soft- 
ware Engineering Papers: Volume III , November 1985. 


B-13 


4 This article also appears in SEL-86-004, Collected Soft- 
ware Engineering Papers: Volume IV . November 1986. 

5 This article also appears in SEL-87-009, Collected Soft- 
ware Engineering Papers: Volume V . November 1987. 

6 This article also appears in SEL-88-002, Collected Soft- 
ware Engineering Papers: Volume VI . November 1988. 

7 This article also appears in SEL-89-006, Collected Soft- 
ware Engineering Papers: Volume VII . November 1989. 


B-14 







