REPORT jatiON PAGE 

Form Approved 1 

OPM No. 0704 01B8 

Pub - fL nylC ISK./ J'PPr'MborM.lncludkiglh*llin«fari«viwbnglf«ru:tk>tw.iMreblnguWngdiUiourc«*gill<wingandnuinainngirw<Mi 

OMi /HP Uk ^ "T J wfbwi ntlnuM or iny olhw MpMi ol Itiii cdKtion or Monnation, indudkig •uggMtna lor rtducing «)■ burdan. 10 WMTwigBn 

Hmi ,|ui im illl laraon OaviiHiBlnMy, Sum 1204. AfIngwn.VA 22202-4302. and to thaOriicaol Woimatlon and HaguliJotvanan.Ollicaol 

iiiiiiiti iiiill Illl 

1 A iBiiiiimiii 

III! mil mil i'll 111 ' IT DATE 3. REPORT TYPE AND DATES COVERED 

I Final: lUuly 1991 to OUun 1993 

4. TITLE AND SUBTITLE 

GSE Gesellschaft fur Software-Engineering mbH Meridian Ada, Version 4.1, 
Concurrent Computer Corp. M8000, Model 8500, RTU 5.1A (Host & Target), 
910711W1.11187 

5. FUNDING NUMBERS 

6. ALfTHOn(S) 

Wright-Patterson AFB, Dayton, OH 

USA 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-486-1191 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D C. 20301-3081 

10. SPONSORINGA40NITORING AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release: distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

GSE Gesellschaft fur Software-Engineering mbH Meridian Ada, Version 4.1, Concurrent Computer Corp. M8000, Model 
8500, RTU 5.1 A (Host & Target), ACVC 1.11 

OTIC 

^ FEB0 41S32| | 

U D ^ 

14 SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 

Capability. Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17 SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18 SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

nC ARCTOAPT 

UNCLASSIFED UNCLASSIFIED 

20 LIMITATION OF ABSTRACT 


NSN 7540-01 280-550 


Standard Form 298. (Rev 2 89) 
Prescribed by ANSI Std 239 128 


















AVF Control Number: AVF-VSR-486-1191 

11 November 1991 
91-04-26-GSE 


Ada COMPILER 
VALIDATION SUI-IMARY REPORT: 

Certificate Number: 910711W1.11187 
GSE Gesellschaft fur Software-Engineering mbH 
Meridian Ada, Version 4.1 

Concurrent Computer Corp. M8000 => Concurrent Computer Corp. M8000 
Model 8500, RTU 5.1A Model 8500, RTU 5.1A 


Prepared By: 
Ada_Validation_Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



92-02663 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was couipleted on 11 July 1991. 

Compiler Name and Version: Meridian Ada, Version 4.1 

Host Computer System: Concurrent Computer Corp. M8000 

Model 3500, RTU 5.1A 

Target Computer System: Concurrent Computer Corp. M8000 

Model 8500, RTU 5.1A 

Customer Agreement Number: 91-04-26-GSE 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910711W1.11187 is awarded to GSE. This certificate expires on 1 June 1993. 


This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 


ASD,SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada VaKdayioh Organization 
Direc^r, Cemputer and Software Eng: 
Institute for Defense Analyses 
Alexandria VA 22311 


.neering Division 


ma Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 


GSE Gesellschaft fur Software-Engineering mbH 
ASO/SCEL, Wright-Patterson AFB OH 45433-6503 
1.11 


Meridian Aia, Version 4.1 

Concurrent Conputer Corporation M8000 Model 8500 
RTU 5.1A 

Concurrent Conputer Corporation M8000 Model 8500 
RTU 5.1A 


Custoner's Declaration 

I, the undersigned, representing GSE Gesellschaft fur Software-Engineering mbH, declare that GSE 
Gesellschaft fur Software-Engineering mbH has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/M1L-STD-18^A in the itiplementation listed in this declaration. I declare that GSE 
Gesellschaft fiir Softyar;^Engineering mbH is the licensee of the above inplementation and the 
certificates shall btf awarded in the licensee's corporate name. 

iM. _ 

Klaus Rf!H, Prokurist 

GSE Gesellschaft fiir Software-Engineering mbH 
Brabanterstr. 4 
8000 Munchen 40 
Germany 



Customer: 

Ada Validation Facility: 

ACVC Version: 

Ada Implementation: 

Conpiler Name and Version: 
Host Computer System 

Target Conputer System 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures lPro90] against the Ada Standard [AdaSS] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
{Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 








INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability 
(ACVC) 

Ada 

Implementation 

Ada Joint 
Program 
Office (AJPO) 

Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliance of 
an Ada 

Implementation 

Computer 

System 


The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the 4CVC 
user's guide and the template for the validation summary 
report. 

An Ada compiler with its host computer system and its 
target computer system. 

The part of the certification body which provide^ policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


The ability of the implementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an 

agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
which validation status is realized. 

Host Computer A computer system where Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 

System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 3 May 1991. 


E28005C 

B28006C 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 




2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 







IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SH0RT_FL0AT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
L0NG_FL0AT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINE_0VERFL0WS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_OVERFLOWS is FALSE. 

C45531M..F and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009C, CA2009F, BC3204C, and BC3205D check whether a generic unit 
can be instantiated before its body (and any of its subunits) is 
compiled; this implementation creates a dependence on generic units as 
allowed by AI-00408 and A1-U0506 such that the compilation of the 
generic unit bodies makes the instantiating units obsolete. (See 
section 2.3.) 


LA3004A..B, EA3004C..J, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation does not support 
pragma INLINE. 


2-2 








IMPLEMENTATION DEPENDENCIES 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types v.ith 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERR0R is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102U 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


2-3 







IMPLEMENTATION DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised when this association is attempted. 


CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE__LEIGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate %'alues for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the 
page number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 8 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST. .FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

BC3204C, BC3205D, CA2009C and CA2009F were graded inapplicable by 
Evaluation Modification as direci-'^d by the AVO. These tests contain 
instantiations of a generic unit prior to t.he compilation of that unit's 
body; as allowed by AI-00408 and AI-00506, the compilation of the generic 
unit ccdies makes the compilation amt that contains the instantiations 
obsolete. 




CHAPTER 2 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

Anthony Patchett 

GSE Gesellschaft fur Software-Engineering mbH 
Brabanter Strasse 4 
W-8000 Munich 40 
FRG 

For sales information about this Ada implementation, contact: 

Michael Gedon 

GSE Gesellschaft fur Software-Engineering mbH 
Brabanter Strasse 4 
W-8000 Munich 40 
FRG 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 







PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicable Tests 3786 

b) Total Number of Withdrawn Tests 93 

c) Processed Inapplicable Tests 90 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 291 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a MicroVAX II system and then transferred to 
the Concurrent Computer Corp. M8000 Model 8500 system via an NFS ethernet 
connection. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled, linked, and executed on the computer system, as 
appropriate. 


3-2 




PROCESSING INFORMATION 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Program 

Switch 

Effect 

ada 

-fE 

Generate error file for the Ada listing utility (alu). 

ada 

-fl 

Ignore compilation errors and continue generating 
code for legal units within the same compilation 
(for test EA1003B). 

ada 

-fQ 

Suppress "added to library" and "Generating code for" 
information messages. 

ada 

-fw 

Suppress informative warning messages. 

alu 

-c 

Produce continuous form Ada listings (no page 
headers). 

alu 

-p 

Obey PRAGMA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

alu 

-s 

Output Ada listing to the standard output file instead 
of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

200 — Value of 

V 

$BIG_ID1 

(1..V-1 => 'A', 

V »> '1') 

$BIG_ID2 

(1..V-1 => 'A', 

V => '2') 

$BIG_ID3 

(1..V/2 => 'A') 
(1..V-1-V/2 

& '3' & 

=> 'A') 

$BIG_ID4 

(1..V/2 => 'A') 
(1..V-l-V/2 

& '4' & 

=> 'A') 

$BIG_INT_LIT 

(1..V-3 => '0') 

& "298" 

$BIG_REAL_LIT 

(1..V-5 => '0') 

£. "690.0" 

$BIG_STRING1 

& (1..V/2 => 

'A') & ' 

$BIG_STRING2 

& (1..V-l-V/2 => 'A') 

SBLANKS 

(1..V-20 => ' ') 


$MAX LEN INT BASED 

LITERAL 



"2;" 61 (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 










MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 => 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 1024 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME R3000 

$DELTA_D0C 2.0**(-31) 

$ENTRY_ADDRESS 16#0# 

$ENTRY_ADDRESS1 16#1# 

$ENTRY_ADDRESS2 16#2# 

$FIELD_LAST 2_147_483_647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FL0AT_NAME N0_SUCH_FL0AT_TYPE 

$F0RM_STRING 

$ F0RM_STRING2 "CANN0T_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION 

90_000.0 

$GREATER_THAN_DURATION_BASE_LAST 

10 _ 000 _ 000.0 

$GREATER_THAN_FLOAT_BASE_LAST 

1.8E+308 

$GREATER_THAN_FLOAT_SAFE_LARGE 

1.0E308 


A-2 







MACRO PARAMETERS 


SGREATER THAN SHORT FLOAT_SAFE_LARGE 
" “ " 1.0E308 


$HIGH_PRIORITY 20 

SILLEGAL EXTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAME1 

SILLEGAL EXTERNAL_FILE_NAME2 

/NODIRECTORY/FILENAME2 

SINAPPROPRIATE LINE_LENGTH 

-1 

SINAPPROPRIATE PAGE_LENGTH 

-1 


SINCLUDE_PRAGMA1 
SINCLUDE_PRAGMA2 
SINTEGER_FIRST 
SINTEGER LAST 


PRAGMA INCLUDE("A28006D1.ADA") 
PRAGMA INCLUDE("B28006F1.ADA") 
-2147483648 
2147483647 


SINTEGER_LAST_PLUS_1 2_147_483_648 

SINTERFACE_LANGUAGE C 

SLESS THAN_DURATION -90_000.0 

SLESS THAN DURATION_BASE_FIRST 

-10 000 000.0 


SLINE_TERMINATOR 
SLOW PRIORITY 


ASCII.LF 
1 


SMACHINE_CODE_STATEMENT 

NULL; 


SMACHINE_CODE_TYPE 

SMANTISSA_DOC 

SMAX_DIGITS 

SMAX_INT 

SMAX_INT_PLUS_1 

SMIN_INT 

SNAME 


INSTRUCTION 

31 

15 

2147483647 

2_147_483_648 

-2147483648 

BYTE_INTEGER 

A-3 




MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEU_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 
SVARIABLE_ADDRESS1 
SVARIABLE_ADDRESS2 
SYOUR_PRAGMA 


R3000 

/usr/acvc/val/X2102A 

/usr/acvc/val/X2102B 

/usr/acvc/val/X3119A 

16#FFFFFFFE# 

1024 

8 

R3000 

ASCII.LF & ASCII.FF 
NEV INTEGER 
INSTRUCTION 
32 

2048 

1.0 

FCNDECL.VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL.VAR_ADDRESS2 
NO SUCH PRAGMA 


A-4 





APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


B-1 






MERIDIAN ADA COMPILER OPTIONS 


-fD Generate debugging output. The -fD option causes 

the compiler to generate the appropriate code and 
data for operation with the Meridian Ada 
Debugger. 

-fe Annotate assembly language listing. The -fe 

option causes the compiler to annotate an 
assembly language output file. The output is 
supplemented by comments containing the Ada 
source statements corresponding to the assembly 
language code sections written by the code 
generator. To use this option, the -S option must 
also be specified, otherwise the annotated file 
is not emitted. 

-fE Generate error log file. The -fE option causes 

the compiler to generate a log file containing 
all the error messages and warning messages 
produced during compilation. The error log file 
has the same name as the source file, with the 
extension .err. The error log file is placed in 
the current working directory. In the absence of 
the -fE option, the error log information is sent 
to the standard output stream. 

-fl Ignore compilation errors and continue generating 

code for legal units within the same compilation 
f ile. 

-fL Generate exception location information. The -fL 

option causes location information (source file 
names and line numbers) to be maintained for 
internal checks. This information is useful for 
debugging in the event that an "Exception never 
handled" message appears when an exception 
propagates out of the main program. This flag 
causes the code to be somewhat larger. If -fL is 
not used, exceptions that propagate out of the 
main program will behave in the s£une way, but no 
location information will be printed with the 
"Exception never handled" message. 

-fN Suppress numeric checking. The -fN flag 

suppresses two kinds of numeric checks for the 
entire compilation: division_ch6ck and 
overflow_check. These checks aredescribed in 
section 11.7 of the LRM. This flag reduces the 
size of the code. 

-fQ Suppress "added to library" and "Generating code 

for" information messages normally output by the 
compiler. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. 
This flag is equivalent to using pragma suppress 








on all checks. This flag reduces the size of the 
code, and is good for producing "production 
quality" code for benchmarking the compiler. Note 
that there is a related ada option, -fN to 
suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fu option inhibits 

library updates. This is of use in conjunction 
with the -S option. Certain restrictions apply to 
use of this option. 

-fv Compile verbosely. The compiler prints the name 

of each subprogram, package, or generic as it is 
compiled. Information about the symbol table 
space remaining following compilation of the 
named entity is also printed in the form "[nK]". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning messages about 
ignored pragmas, exceptions that are certain to 
be raised at run-time, or other potential 
problems that the compiler is otherwise forbidden 
to deem as errors by the LFIM. 

-g The -g option instructs the compiler to run an 

additional optimization pass. The optimizer 
removes common sub-expressions, dead code and 
unnecessary jumps. It also does loop 
optimization. 

-K Keep internal form file. This option is used in 

conjunction with the optimizer. Without this 
option, the compiler deletes internal form files 
following code generation. 

-Imodifiers 

Generate listing file. The -1 option causes the 
compiler to create a listing. Optional modifiers 
can be given to affect the listing format. You 
can use one or any combination of the following 
modifiers: 

c Use contiuous listing format. The listing by 
default contains a header on each page. 
Specifying -Ic suppresses both pagination and 
header output, producing a continuous 
listing. 

p Obey pragma page directives. Specifying -Ip 
is only meaningful if -Ic has also been 
given. Normally -Ic suppresses all 
pagination, whereas -Ipc suppresses all 
pagination except where explicitly called for 
within the source file with a pragma page 
directive. 

s Use standard output. The listing by default 
is written to a file with the same name as 
the source file and the extension .1st, as in 






simple.1st from simple.ada. Specifying -Is 
causes the listing file to be written to the 
standard output stream instead. 

t Generate relevant text output only. The 

listing by default contains the entire source 
program as well as interspersed error 
messages and warning messages. Specifying -It 
causes the compiler to list only the source 
lines to which error messages or warning 
messages apply, followed by the messages 
themselves. 

The default listing file generated has the same 
name as the source file, with the extension .1st. 
For example, the default listing file produced 
for simple.ada has the name simple.1st. The 
listing file is placed in the current working 
directory. Note: -1 also causes an error log file 
to be produced, as with the -fE option. 

-L library-name 

Default; ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No compile. This option causes the ada command to 

do a "dry run" of the compilation process. The 
command invoked for each processing step is 
printed. This is similar to the -P option, but no 
actual processing is performed. 

-P Print compile. This option causes the ada command 

to print out the command invoked for each 
processing step as it is performed. 

-S Produce assembly code. Causes the code generator 

to produce an assembly language source file and 
to halt further processing. 





MERIDIAN ADA LINKER OPTIONS 


-A Aggressively inline. This option instructs the 

optimizer to aggressively inline subprograms when 
used in addition to the -G option. Typically, 
this means that subprograms that are only called 
once are inlined. If only the -G option is used, 
only subprograms for which pragma inline has been 
specified are inlined. 

-c compiler-program-name 

Default; (as stored in program library) 

Use alternate compiler. The -c option specifies 
the complete (non relative) directory path to the 
Merxdian Ada compiler. This option overrides the 
compiler program neune stored in the program 
library. The -c option is intended for use in 
cross-compiler configurations, although under 
such circumstances, an appropriate library 
configuration is normally used instead. 

-f Suppress main program generation step. The -f 

option suppresses the creation and additional 
code generation steps for the temporary main 
program file. The -f option can be used when a 
simple change has been made to the body of a 
compilation unit. If unit elaboration order is 
changed, or if the specification of a unit is 
changed, or if new units are added, then this 
option should not be used. 

-g Perform global optimization only. The -g option 

causes bamp to invoke the global optimizer on 
your program. Compilation units to be optimized 
globally must have been compiled with the ada -K 
option. 

-G Perform global and local optimization. The -G 

option causes bamp to perform both global and 
local optimization on your program. This includes 
performing pragma inline. As with the -g option, 
compilation units to be optimized must have been 
compiled with the ada -K option. 

-I Link the program with a version of the tasking 

run-time which supports pre-emptive task 
scheduling. This option produces code which 
handles interrupts more quickly, but has a slight 
negative impact on performance in general. 

-L library-name 


Default; 


ada.lib 





Use alternate library. The -L option specifies 
the name of the program library to be consulted 
by the bamp program. This option overrides the 
default library name. 

-n No link. The -n option suppresses actual object 

file linkage, but creates and performs code 
generation on the main program file. 

-N No operations. The -N option causes the bamp 

command to do a "dry run"; it prints out the 
actions it takes to generate the executable 
program, but does not actually perform those 
actions. The same kind of information is printed 
by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o 
option specifies the name of the executable 
program file written by the bamp command. This 
option overrides the default output file name. 

-p Print operations. The -P option causes the bamp 

command to print out the actions it takes to 
generate the executable program as the actions 
are performed. 

-V Link verbosely. The -v option causes the bamp 

command to print out information about what 
actions it takes in building the main program. 

-w Suppress warnings. This option allows you to 

suppress warnings from the optimizer. 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2_147_483_646 .. •’_14~_483_647; 
type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type SHORT_INTEGER is range -32_768 .. 32_767; 
type BYTE_INTEGER is range -128 .. 127; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 

end STANDARD; 


C-1 







Appendix F Implementation-Dependent Characteristics 


This appendix lists implementation-dependent characteristics of Meridian Ada. Note that there are no pre¬ 
ceding appendices. This appendix is called Appendix F in order to comply with the Reference Manual for 
the Ada Programming Language* (LRM) ANSI/MIL-STD-1815 A which slates that this appendix be named 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration representation clauses, record repre¬ 
sentation clauses, address clauses, interrupts, package system, machine code insertions, pragma inter¬ 
face. and unchecked programming. 

F.l Pragmas 

The implemented pre-defined pragmas ate; 

elaborate See the LRM section 10.5. 
interface See section F.l. 1. 
list See the LRM Appendix B. 

pack See section F. 1.2. 

page See the LRM Appendix B. 

priority See the LRM Appendix B. 
suppress See section F.l.3. 

inline See the LRM section 6.3.2. This pragma is not actually effective unless you compile/link 
your program using the global optimizer. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled optimize system name 

shared storage_unit 

memory_size 

Named parameter notation for pragmas is not supported. 

V^tTien illegal parameter forms are encountered at compile time, the compiler issues a warning message rather 
than an error, as required by the Ada language definition. Refer to the LRM Appendix B for additional infor¬ 
mation about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface inMeridian Ada is; 

pragma Lnt&rfa.ce { language, subprogram [, "link-name” 1 ) ; 
where: 

language is the interface language, one of the names assembly, builtin, c, or internal. The names 
builtin and internal are reserved for use by Meridian compiler maintainers in run-time sup¬ 
port packages. 

subprogram is the name of a subprogram to which the pragma interface applies. 

link-name is an optional siring literal specifying the name of the norv-Ada subprogram corresponding to 
the Ada subprogram named in the second parameter. If link-name is omined, then link- 

*A11 future references to the Reference Manual for the Ada Programming Language appear as the LRM. 


249 


Meridian Ada Compiler User’s Guide 



Appendix F 


name defaults to the value of subprogram translated to lowercase. Depending on the lan¬ 
guage specified, some automatic modifications may be made to the link-name to produce the 
actual object code symbol name that is generated whenever references are made to the corre¬ 
sponding Ada subprogram. 

It is appropriate to use the optional link-name parameter to pragma interface only when 
the interface subprogram has a name that does not correspond at all to its Ada identifier or 
when the interface subprogram name cannot be given using rules for constructing Ada identi¬ 
fiers (e.g. if the name contains a *$* character). 

The characteristics of object code symbols generated for each interface language are: 
assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same asbut prefixed with two underscore charac¬ 

ters (“_ _”)• This language interface is reserved for special interfaces defined by Meridian 
Software Systems. Inc. The builtin interface is presently used to declare certain low-level 
run-time operations whose names must not conflict with programmer-defined or language 
system defined names. 

c The object code symbol is thesameas/I/iit-name, but with one underscore character (*_’) 

prepended. This is the convention used by the C compiler. 

internal No object code symbol is generated for an internal language interface; this language inter¬ 
face is reserved for special interfaces defined by Meridian Software Systems, Inc. The inter¬ 
nal interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to the pro¬ 
grammer to ensure that calling conventions match and that any necessary data conversions take place when 
calling interface subprograms. 

A pragma interface may appear within the same declarative part as the subprogram to which the pragma 
interface applies, following the subprogram declaration, and prior to the first use of the subprogram. A 
pragma interface that applies to a subprogram declared in a package specification must occur w.diin the 
same package specification as the subprogram declaration; the pragma interface may not appear in the 
package body in this case. A pragma interface declaration for either a private or nonprivate subprogram 
declaration may appear in the private part of a package specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional information about pragma interface. 

F.1.2 Pragma Pack 

FYagma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that the 
pragma occurs within the same declarative part as the composite type declaration, before any objects or com¬ 
ponents of the composite type are declared. 

Note that the declarative part restriction means that the type declaration and accompanying pragma pack 
cannot be split across a package specification and body. 

The effect of pragma pack is to minimize storage consumption by discrete component types whose ranges 
permit packing. Use of pragma pack does not defeat aUocations of alignment storage gaps for some record 
types. Pragma pack does not affect the representations of real types, pre-defined integer types, and access 
types. 

F.1.3 Pragma Suppress 

Pragma suppress is implemented as described in the LRM section 11.7, with these differences; 


Meridian Ada Compiler User's Guide 


250 






Appendix F 


• PresenUy, <livision_check and overnow_check must be suppressed via a compiler 
flag. -£K ; pragm^suppress is ignored for these two numeric checks. 

• The optional “ON =>" parametername notation forpragma suppress is ignored. 

• The optional second parameter to pragma suppress is ignored; the pragma always 
applies to the entire scope in which it appears. 

F.2 Attributes 

All attributes described in the LRM Appendix A are supported. 


F.3 Standard Types 

Additional standard types are defined in Meridian Ada; 

• byte_integer 

• short integer 


• long__integer 
The standard numeric types are defined as: 

type byte__integer is range -128 .. 127; 


type short_integer is range -32768 
type integer is range -2147483648 


32767; 

.. 2147483647; 


type long integer is range -2147483648 .. 2147483647; 


type float is digits 15 

range -1.79769313486231E+308 1.79769313486231E+308; 

type duration is delta 0.0001 range —86400.0000 .. 86400.0000, 


F.4 Package System 


The specification of package system is: 

package system is 

type address is new integer; 

type name is (i80386); 

system name constant name := i80386; 

storage_unit : constant := 8; 

xaemory size constant : = 1024; 

— System-Dependent Named Numbers 

niin__int : constant := -2147483648; 

maif int : constant := 2147483647; 

may digits constant := 15; 

max mantissa constant := 31; 

fine^delta : constant := 2.0 ** (-31); 

tick : constant := 1.0; 

— Other System-Dependent Declarations 


251 


Meridian Ada Compiler User’s Guide 






Appendix F 


subtype priority is integer range 1 .. 20; 

The value of system. Baeiaory__size is presently meaningless. 

F.5 Restrictions on Representation Clauses 
F.5.1 Length Clauses 

A size specification (t' size) is rejected if fewer bits are specified than can accommodate the type. The 
minimum size of a composite type may be subject to application of pragma pack. It is permiaed to specify 
precise sizes for unsigned integer ranges, e.g. 8 for the range 0. .255. However, because of requirements 
imposedby the Ada language definition, a full 32-bit range of unsigned values, i.e. 0. . (2**32) -1, cannot 
be defined, even using a size specification. 

The specification of collection size (t' s t orage_size) is evaluated at run-time when the scope of the type 
to which the length clause applies is entered, and is therefore subject to rejection (via storage_error) 
based on available storage at the time the allocation is made. A coUection may include storage used for run¬ 
time administration of the collection, and therefore should not be expected to accommodate a specific number 
of objects. Furthermore, certain classes of objects such as unconstrained discriminant array components of 
records may be allocated outside a given collection, so a collection may accommodate more objects than 
might be expected. 

The specification of storage for a task activation (t'storage_size) is evaluated at nm-time when 
a task to which the length clause applies is activated, and is therefore subject to rejection (via st orage_er- 
ror) based on available storage at the time the allocation is made. Storage reserved for a task activation is 
separate from storage needed for any collections defined within a task body. 

The specification of small for a fixed point type (t' small) is subject only to restrictions defined in the LRM 
section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enumeration representation clause must 
be in the range of standard, integer. 

The value of an internal code may be obtained by applying an appropriate instantiation of un- 
checked_conversion to an integer type. 

F.5.3 Record Representation Clauses 

The storage unit offset (the at static_simple_expression pan) is given in terms of 8-bit storage units and must 
be even. 

A bit position (the range part) applied to a discrete type component may be in the range 0. . 15, withO being 
the least significant bit of a component. A range specification may not specify a size smaller than can accom¬ 
modate the component. A range specification for a component not accommodating bit packing may have 
a higher upper bound as appropriate (e.g. 0. .31 for a discriminant string component). Refer to the inter¬ 
nal data representation of a given component in determining the component size and assigning offsets. 

Components of discrete types for which bit positions are specified may not straddle 16-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must evaluate to 1,2,4. or 8, and may not be 
smaller than the highest alignment required by any component of the record. 

F.5.4 Address Clauses 

An address clause may be supplied for an object (whether constant or variable) or a task entry, but not for a 
subprogram, package, or task unit. The meaning of an address clause supplied fora task entry is given in sec¬ 
tion F.5.5. 


Meridian Ada Compiler User’s Guide 


252 




Appendix F 


An address expression for an object is a 32-bii segmented memory address of type system, address. 

F.5.5 Interrupts 

A task entry's address clause can be used to associate the entry with a UNIX signal. Values in the range 0. . 31 
are meaningful, and represent the signals corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversion. 

F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependent components. 

F.7 Unchecked Conversions 

There are no restrictions on the use of unchecked_conversion. Conversiorts between objects whose 
sizes do not conform may result in storage areas with undefined values. 

F.8 Input-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

• In calls to open and create, the/omi parameter must be the empty string (the de¬ 
fault value). 

• More than one internal file can be associated with a single external file for reading 
only. For writing, only one internal file may be associated with an external file; Do 
not use reset to get around this rule. 

• Temporary sequential and direct files are given names. Temporary files are deleted 
when they are closed. 

• File I/O is buffered; text files associated with terminal devices are line-buffered. 

• The packages sequent ial_io and direct_io cannot be instantiated with un¬ 
constrained composite types or record types with discriminants without defaults. 

F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


253 


Meridian Ada Compiler User’s Guide 





