REPORT DOni iMENTATION PAGE 

wiQtl hour p«fWipoM«.lne>iidhoii> Urn* lor m ^wili 
_ A inlngtikburdM)MtinMMor«fVfl(twMpMlolM>M 

IV 11 — XA , 1215Jrt*nonDn*Hi||^w*y,SulM12M.Ailnglon. 

■■■•I nui iiiu nil nil 


Form Approved 
OPM No. 0704-018$ 


wiQt 1 l«iup«frMpoM«.lne>iidhoii>lliii*lor i ii^wiilnQlnMiucMDn«,i«« f c W ng>»Mii 9 dM«oure«ijnwliQindiii«Wilnlngt»idMi 
in»ng>il»btrtw>mlnii<«of«n»att»Hip«clolt>l»conc»lonflHrloiiiMllDn.lnekidhgiuggMtlBnilofi»dudngWihi»dwi.ieWMNnjDn 
, 1215 Jrt*nonDnliHi|^w*y,Sukt12M.Ailnglon.VA222(e43l».ind loth* Olka olMsiiiwion and RiguMMy MU*. OHmoI 


REPORT DATE 


111 tj: AND SUBTITLE 

Validation Summary Report; Meridian Ada, Version 4.1, Sequoia Series 400, Topix, 
Ver. 6.5 (Host & Target), 911216W1.11232 


6. ALrTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND A00RESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


3. REPORT TYPE AND DATES COVERED 

Rnal: 16 Dec 1991 to 01 Jun 1993 


5. FUNDING NUMBERS 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-518-1191 


9. SPONSORINGAAONITORING AGENCY NAME(S) AND ADDRESS{ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


10. SPONSORINGAilONITORING AGENCY 
-PORT NUMBER 



13. ABSiMCT (Maximum200¥wras) 

Meridian Ada, Version 4.1, Sequoia Series 400, Wright-Patterson AFB, Topix, Ver. 6.5 (Host & Target), ACVC 1.11. 


92 


4 29 0 69 


92-11779 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Tasting. Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


15. NUMBER OF PAGES 


16. PRIC 




OF REPORT 

UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

19. SECURITY CLASSIFICATION 

OF ABSTRACT 

20 UMITATION OF ABSTRAC 

UNCLASSIFED 

UNCLASSIFIED 



r4SN7S40-01-280-S50 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Sid. 239-128 













Certificate Information 


Ihe following Ada iinplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 16 December 1991. 

Ccmpiler Name and Version: Meridian Ada, Version 4.1 

Host Conputer System: Sequoia Series 400 

Topix, Version 6.5 

Target Computer System: Sequoia Series 400 

Topix, Version 6.5 

Customer Agreement Number: 91-10-29-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
911216W1.11232 is awarded to Meridian Computer Systems, Inc. This 
certificate expires on 1 Jme 1993. 


Ihis report has been reviewed and is approved. 




Ada Validation Facility 
Steven P. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada \^itiiSOon Orgwization 
Direo^r j^^^^ponputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 




Joint Program Offi^ 


Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 



Ac«««3-l>>a For 
liTT,] OKlAl 


ly- 

i‘ ImX l«n/ 

Av^llatllltr Co^ee 
nad/or 







AVF Control Number: AVF-VSR-518-1191 

5 December 1991 
91-10-29-MSS 


Ada C(»1PILE31 
VALIDATION SUMMARY REPORT: 

Certificate Number: 911216W1.11232 
Neridi 2 m Ada, Version 4.1 

Sequoia Series 400, Topix, Ver. 6.5 -> Sequoia Series 400, Topix, Ver. 6.5 


Prepared By: 
Ada_Validation_Facility 
ASD/SCEL 

Wright-Patterson AEB OH 45433-6503 





DECLARATION OF CONFORMANCE 


Customer: 

Ada Validation Facility: 
AC VC Version: 


Meridian Software Systems, Inc. 

ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

1.11 


Ada Implementation: 

Compiler Name and Version: 
Host Computer System: 

Target Computer System: 


Meridian Ada, Version 4.1 

Sequoia Series 400 
Topix, Version 6.5 

Same as Host 


Customer's Declaration 


I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 

^- ■- 1 , ' *^ ■■ ' 

otowe/Ooyd, PresidenvCOO 

Meridian Software Systems, I^c. 

10 Pasteur Street 
Irvine, CA 92718 


Date: 







1ABLE OF CONTENTS 


CHAPTER 1 INTRODUCTIW 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITICXN OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS .2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION .3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COIPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRODUCTION 


Itie Ada inplementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
IPro90]. A detailed description of the ACVC may be foiind in the current 
ACVC User's Guide [UG89], 


1.1 USE OF THIS VALIDATiai SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public frcan the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


1.2 REFERENCES 

[Acla83] Reference Manual for the Ada Proqramming Language, 

ANSI/MIL-STD-1815A, February 1983 and I^ 86b2-lS87. 

tPro90J Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Con^iler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Ccm^liance of Ada inplementations is tested by means of the ACVC. Die ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at conpile time and link time, 
respectively. 

The executable tests are written in a self-checking manner emd produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vdien they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ai^ Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CEJECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal leuiguage usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in i^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRMXJCTION 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIC*! OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target conputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Con^iler The means for testing cospliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body vhich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guid^ce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an ^a 

Implementation 

Ccmputer A functional unit, consisting of one or more computers euid 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or cc rporate entity who enters into an 

agreement with an AVF vdiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
\diich validation status is realized. 

Host Conputer A ccmputer system v^ere Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada isplementation. 

ISO International Organization for Standardization. 

LBM The Ada Standard, or Language Reference Manual, published as 

ANSI/MlL-SID-iaiSA-igea and iso 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware inplementations are possible. 

Target A conputer system vAiere the executable form of Ada programs 

Conputer are executed. 

System 

Validated Ada The conpiler of a validated Ada inplementation. 

Conpiler 

Validated Ada An Ada inplementation that has been validated successfully 
Implementation either by AVF testing or fcy registration [Pro90]. 

Validation The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 







CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Itie following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
pijblication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

(7>9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vdiich are irrelevant 
for a given Ada iirplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Connentaries and commonly referenced in the format Al-ddddd. For this 
iiqplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




INPLENENIATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.nAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L. Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H chec)c for the predefined type 
SHORT_FLQAT; for this in^lementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
LONG_FLQAT; for this iiq>lementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LGNG_FLCIAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
in^lementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINE_OVEE^FLOWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inplementation, HACHINE_OVERFLOW5 is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX_MAMTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA2009F check v^ether a generic unit can be instantiated 
before its body (and a^y of its subunits) is conpiled; this 
inplementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation does not support 
pragma INLINE. 

CD1009C checks \diether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 




IMPLEMENTATICN DEPENDENCIES 


CD2AB4A, CD2AB4E, CD2A84I..J (2 tests), euid CD2A840 use length clauses 
to specify non-default sizes for access types; this in 5 )leinentation 
does not support such sizes. 

BD8001A, BDd003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this inf)leinentation provides no package MACHINE__CC®E. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this ccaiqpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package D1RECT_I0 
with imconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this con^jiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN PILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INCUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN PILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

sequential"10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CF3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


2-3 







IMPLEMENTATION DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised vdien this association is attempted. 


CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CESlllB CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CA2009C and C3^009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic \jnit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic \anit bodies makes the compilation 
unit that contains the instantiations obsolete. 


2-4 









IMPLEMENTATICX4 DEPENDENCIES 


EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks Aether legal units of a compilation are accepted 
if one of the conpilation units is illegal- This test was processed with 
the compiler option "-fl", which forces the compiler to generate code for 
legal units of a compilation. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the compilation of the generic bodies maikes the 
instemtiating units obsolete—^no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 


2-5 






CHAPTER 3 


PROCESSING INFORMATIC»J 


3.1 TESTING ENVIRCMIENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

Meridian Software Systems 
Technical Support 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 

For sales information about this Ada implementation, contact: 

Meridian Software Systems 
Attn: Jim Smith 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 


Testing of this Ada inplementation was conducted at the customer's site 
a vali^tion team from the AVF. 


3-1 





PROCESSING INPORMATI(»i 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

Hie list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of ^plicable Tests 3786 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 289 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto the Sequoia machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled, linked, and executed on the computer system, as 
appropriate. The test results were transferred from the Sequoia machine to 
a Sun-3 system and printed. 


3-2 








PROCESSING INFORMATIOJ 


Testing was performed using command scripts provided by the customer and 
• reviewed by the validation teeim. See Appendix B for a conplete listing of 
the processing options for this inplementation. It also indicates the 
default options. Ihe options invoked explicitly for validation testing 
during this test were: 


Program 

Switch 

Effect 

ada 

-fE 

Generate error file for the Ada listing utility (alu). 

ada 

-fl 

Ignore compilation errors and continue generating 
code for legal units within the same compilation 
(for test EA1003B). 

ada 

-fQ 

Suppress "added to library" and "Generating code for" 
information messages. 

ada 

-fw 

Suppress informative warning messages. 

alu 

-c 

Produce continuous form Ada listings (no page 
headers). 

alu 

-P 

Obey PRAQIA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

alu 

-s 

Output Ada listing to the standard output file instead 
of to a disk file. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tap and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two taibles. The first tadsle lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere ”V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


200 — Value of V 

(1..V-1 -> 'A', V =»> '1' ) 

(1..V-1 -> 'A', V -> ’2’) 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 »> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 »> "O') & "298" 

(1..V-5 -> "0") & "690.0" 

& (l..V,^ *> "A") & 

& (1..V-1-V/2 -> "A") & '1' & 
(1..V-20 


$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "11:" 


$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 








MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1.-V-2 => 'A') & 

The following tedDle lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COONT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 1024 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME M68000 

$DELTA_DOC 2.0**(-31) 

$ENTRY_ADDRESS 16#0# 

$ENTRY_AE©RESS1 16#1# 

$ENTRY_ADDRESS2 16#2# 

$FIELD_LAST 2_147_483_647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLQAT_NAME NO_SUCH_FLQAT_TYPE 

$FORM_STRING 

$FORM_STRING2 "aV®K)T_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN DURATION 

90_000.0 

$GREATER THAN DURATICX^ BASE LAST 

T0_007_000.0 

$GREATER_THAN FLOAT BASE LAST 

l.^E+308 

$GREATER_TOAN FLOAT SAFE LARGE 

1.IJE308 

A-2 








MACRO PARAMETERS 


$GREATER_'IHAN_SHORT_PLQAT SAFE LARGE 

1.0E308 

$HIGH_PRIORITY 20 

$ILLEGALJE3CTERNAL_FILE_NAME1 

/NODIRECTORY/FILENAMEl 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/NODIRECrORY/FILENAME2 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAO!Al PRAOIA INCLUDE( "A28006D1 .ADA") 

$INCLUDE_PRAaiA2 PRAGMA INCLUDE( "B28006F1 .ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 
$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATiag -90_000.0 

$LESS_THAN_DURATION_BASE FIRST 

-iiy_ooo_ooo.o 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 1 

$MACHINE_OODE_STATEMENT 

NULL; 

$MACHINE_CODE_TYPE INSTRUCTIC»I 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME 


BYTE INTEGER 




MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECI FICATiail 

$NAME_SPECIFICATICN2 

$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$NEM_MEM_SIZE 

$NEW_ST0R_UN1T 

$NEW_SyS_NAME 

$PAGEjrERMINATOR 

$RECORD_DEFINITIC»I 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR_PRAGMA 


M68000 

Aisers/ineridianArorld/ac:vc/val/X2102A 

/users/taeridian/Vrorld/acvc/val/X2102B 

/users/meridian/Vrorld/acvc/val/X3119A 

16#FFFFFFFE# 

1024 

8 

M68000 

ASCII.LF & ASCII.FF 
NEW INTEGER; 

NO_SUCH_MACHINE_CODE_TYPE 

32 

2048 

1.0 

FCNDECL.VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL.VAR_ADDRESS2 
NO SUCH PRAOIA 


A-4 





APPENDIX B 


CX»1PILAT1C»I SYSTEM 0PTIC3NS 


Ihe conpiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to conpiler docinnentation and 
not to this report. 


MERIDIAN ADA COMPILER OPTIC»IS 


-fD Generate debugging output. The -fD option causes the 
con^iler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the conpiler to annotate an assembly language 
output file. Ihe output is supplemented by comments 
containing the Ada source statenrents corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-fE Generate error log file. The -fE option causes the 

conpiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the same name as the source file, 
with the extension .err. For example, the error log file 
for simple.ada is simple.err. The error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fL Generate exception location information. The -fL option 


B-1 





CWIPILATION SYSTEM OPTIC»IS 


causes location information (source file names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in the event that an 
"Exception never handled" message appears vrfien an 
exception propagates out of the main program. This flag 
causes the code to be some^diat larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division check and overflow check. These checks are 
described in section 11.7 oT the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all checks. 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the conpiler. Note that there is a related ada option, 
-fN to suppress only certain kinds of numeric checks. 

-fU Inhibit library update. The -fu option inhibits library 
updates. This is of use in conjunction with the -S 
option. Certain restrictions apply to use of this option. 

-fv Conpile verbosely. The compiler prints the name of each 
subprogram, package, or generic as it is compiled. 
Information about the symbol ted^le space remaining 
following compilation of the named entity is also printed 
in the form "[nK]". 

-fw Suppress warning messages. With this option, the 

compiler does not print warning messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler to run an additional 
optimization pass. The optimizer removes common 
sub-expressions, dead code and \jnnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 





COMPILATIC»I SYSTEM OPTIONS 


-Imodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional modifiers can be given to 
affect the listing format. You can use none or any 
combination of the following nodifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -Ip is only 
meaningful if -Ic has also been given. Normally -Ic 
suppresses all pagination, whereas -Icp suppresses 
all pagination except vdiere explicitly called for 
within the source file with a pragma page directive. 

s Use standard output. The listing by default is 
written to a file with the same name as the source 
file and the extension .1st, as in sinple.lst from 
single.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead- 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages and warning messages. 
Specifying -It causes the conpiler to list only the 
source lines to which error messages or warning 
messages aj^ly, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For exanple, 
the default listing file produced for sinple.ada has the 
name sin^ile.lst. The listing file is placed in the 
current working directory. Note: -1 also causes an 
error log file to be produced, as with the -fE option. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No compile. This option causes the ada command to do a 
"dry run" of the conpilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

-P Print conpile. This option causes the ada command to 
print out the command invoked for each processing step 
as it is performed. 


B-3 



CXMPILATION SYSTEM OPTIC»IS 


-S Prcxiuce assembly code. Causes the code generator to 

produce an assembly language source file and to halt 
further processing. 


B-4 



COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


MERIDIAN ADA LINKER OPTIONS 


-A Aggressively inline. This option instructs the optimizer 
to aggressively inline siabprograms when used in addition 
to the -G option. Typically, this means that subprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for which pragma inline 
has been specified are inlined. 

-c compiler-program-name 

Default: (as stored in program librar^^ y 

Use alternate conpiler. The -c option specifies the 
conplete (non relative) directory path to the Meridian 
Ada conpiler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-conpiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 
suppresses the creation and additional code generation 
steps for the tenporary main program file. The -f option 
can be used when a sinple change has been made to the 
body of a conpilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. 

-g Perform global optimization only. The -g option causes 
baitp to invoke the global optimizer on your program. 
Conpilation units to be optimized globally must have been 
conpiled with the ada -K option. 

-G Perform global and local optimization. The -<3 option 

causes banp to perform both global ai.d local optimization 
on your program. This includes performing pragma inline. 
As with the -g option, conpilation units to be optimized 
must have been conpiled with the ada -K option. 


B-5 




COMPILATION SYSTEM OPTIONS 


-I Link the program with a version of the tasking run-time 

which supports pre-enptive task scheduling. This option 
produces code which handles interrupts more quickly, but 
has a slight negative iiq)act on performance in general. 

-L library-name 

Default: ada.lib 

Use alternate library. Ihe -L option specifies the name 
of the program library to be consulted by the bamp 
program. This option overrides the default libra.y name. 

-n No link. The -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. The -N option causes the bamp commeund to 
do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

-o output-file-name 

Default: file 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
by the banp command. This option overrides the default 
output file name. 

-P Print operations. The -P option causes the banp command 
to print out the actions it takes to generate the 
executable program as the actions are performed. 

-V Link verbosely. The -v option causes the banp command to 
print out information about vhat actions it takes in 
building the main program. 

-W Suppress warnings. This option allows you to suppress 
warnings from the optimizer. 


B-6 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed in 5 )leinentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses- The implementation-dependent 
characteristics of this Ada inplementation, as described in this i^pendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, v^ich 
are not a part of ^pendix F, are: 


package STANDARD is 

type INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type SHORT_INTEGER is range -32_768 .. 32_767; 
type ByTE_INTEGER is remge -128 .. 127; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATICXI is delta 0.0001 range -86400.0 .. 86400.0; 

end STANDARD; 


C-1 












This appendix lists implementation-dependent characteristics of Meridian Ada. Note that there are no preceding 
^^ndices. This i^pen^ix is called Appendix F in order to comply with the Reference Manual for the Ada 
Programming Language (LRM) ANSI/MIL-STD-1815A which states that this t^>pendix be named Appendix F. 

Implemented Qiapter 13 features include length clauses, enumeration representation clauses, record representation 
clauses, address clauses, inteirupts, package system, machine code insertions, pragma interface, and unchecked 
programming. 


F.l Pragmas 


The implemented pre-deflned pragmas are.i.implemented pragmas;: 


•labora-te 

intaxface 

list 

pack 

page 

priority 

suppress 

Inline 


See the LRM section 10.5. 

See section F.1.1. 

See the LRM Appendix B. 

See section F.l.2. 

See the LRM Appendix B. 

See the LRM Appendix B. 

See section F.l.3. 

See the LRM section 6.3.2. This pragma is not actually effective unless you 
compile/link your program using the global optimizer. 


The remaining pre-defined pragmas are accepted, but presently ignored: 


contxollsd optlni-zs systsn nama 

sharsd storage_unlt memozy^slze 

Named parameter notation for pragmas is not supported. 


When illegal parameter forms are encountered at compile time, the compiler issues a warning message rather than 
an error, as required by the Ada language definition. Refer to the LRM Appendix B for additional iitfoimation 
about the pre-deiined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface in Meridian Ada is: 

pragma Interf aca (language, subprogram L ”lmk~namdl); 
where: 

language This is the interface language, one of the names builtin, c, or internal. The names builtin and 
internal are resenred for use by Meridian compiler maintainers in run-time support packages. 

subprogram This is the name of a subprogram to which the pragma interface tqiplies. 


• All future references to the Reference Manual for the Ada Programming Language appear as the LRM. 


Revised lip/91 


153 


Meridian Ada Compiler User's Guide 








Appendix F 


link-name This is an optional string literal specifying the name of the non-Ada sul^rogram corresponding to the 

Ada subprogram named in the second parameter. If link-name is omitted, then link-name 
defaults to the value of subprogram translated to lowercase. Depending on the language 
specified, some automatic modifications may be made to the link-name to produce the actual 
object code symbol name that is generated whenever references are m»le to the coirespoiKling 
Ada subprogram. 

It is i^ropriate to use die optional link-name parameter to pragma interface only when the 
interface subprogram has a name that does not correspond at all to its Ada identifier or when 
the interface subprogram name caimot be given using rules for constructing Ada idendfieis 
(e.g. if the name contains a ‘$* character). 

The characteristics of objea code symbols generated for each interface language are: 

builtin The object code symbol is the same as link-name^ but prefixed with two underscore characters ("_ _"). 

This language interface is reserved for special interfaces defined by Meridian Software 
Systems, Inc. The builtin interface is presently used to dedare certain low-level tun-time 
operations whose names must not conflict with programmer-defined or language system 
defined names. 

c The object code symbol is the same as link-name, but with one underscore charaaer 

prepended. This is the convention used by the C compiler. 

internal No object code symbol is generated for an internal language interface; this language interface is 
reserved for special interfaces defined by Meridian Software Systems, Inc. The internal 
interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to the 
programmer to ensure that calling conventions match and that any necessary data conversions take place when 
calling interface sul^rograms. 

A pragma interface may appear within the same declarative part as the subprogram to which die pragma interface 
applies, following the subprogram declaration, and prior to the first use of the subprogram. A pragma interface 
that applies to a subprogram declared in a package specification must occur within the same package specification 
as the subprogram declaration; the pragma interface may not appear in the package body in this case. A pragma 
interface declaration for either a private or nonprivate subprogram declaration may i^ipear in the private part of a 
package specification. 

Pragma interface for library units is not supported. Refer to the LRM section 13.9 for additional 
information about pragma interface. 

F.1,2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it apidies, provided that the [xagma 
occurs within the same declarative part as the composite type declaration, before any objects or components of the 
composite type ate declared. 

Note that the declarative part restriction means that the type declaration and accompanying pragma pack cannot 
be split across a package specification and body. 

The effect of pragma pack is to minimize storage consumption by discrete component types whose ranges permit 
packing. Use of pragma pack does not defeat allocations of alignment storage gaps for some record types. Pragma 
pack does not afiect the representations of teal types, pre-defined integer types, and access types. 


Meridian Ada Compiler User's Guide 


154 


Revised 11P191 







Appendix F 


F.13 Pragma Suppress 

Pragma suppress is implemented as described in the LRM section 11.7. with these differences; 

* Presently, division.check and overflow.check must be suppressed via a compiler flag, -fN; 
pragma suppress is ignored for these two numeric checks. 

* The optional "ON s>" parameter name notation for pragma suppress is ignored. 

* The optioital second parameter to pragma suppress is ignored; the pragma always applies to the 
entire scope in which it appears. 


F.2 Attributes 

All attributes described in the LRM Appendix A are supported. 

FJ Standard Types 

Additional standard types are defined in Meridian Ada: 

• byte_integer 

• short_integer; 

• long_integer 

The standard numeric types are defined as: 

type byt«_lnt«ger is range -128 .. 127; 

type shoxt__lnteger is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type longinteger is range -2147483648 .. 2147483647; 

type float is digits 15 

range -1.7976931348623lE-f308 .. 1.79769313486231E-(-308; 

type duration is delta 0.0001 range -86400.0000 .. 86400.0000; 


F.4 Package System 


The specification of package system is: 

package system is 

type adless is new integer; 

type name is (m68000); 

system^nasie : constant name :« a68000; 

storage_unit : constant :* 8; 
sMunory^sise : constant 1024; 

— System-Dependent Mamed Nuaibers 


min_iat : constant 
max~int : constant 
aaxjdigits : constant 
max^Btntlssa : constant 
flxiejdelta : constant 
tick'~ : constant 


-2147483648; 

2147483647; 

15 

31; 

2.0 *• (-31); 
1 . 0 ; 


Ramed 11/7191 


Meridian Ada Compiler User's Guide 





Appendix F 


— Other System-Dependent Declarations 
subtype priority Is Integer range 1 .. 20; 
The value of systein.ineinory_size is presently meaningless. 


F.5 Restrictions on Representation Clauses 

F^.l Length Clauses 

A size specihcadon (t’size) is rejected if fewer bits are specified than can accommodate the type. The minimum 
size of a composite type may be subject to application of pragma pack. It is permitted to spedfy precise sizes for 
unsigned integer ranges, e.g. 8 for the range0..255. However, because of requirements impo^ by the Ada language 
definition, a full 32-bit range of unsigned values. i.e. 042**32)-!, cannot be defined, even using a size specificafiom 

The specification of collection size (t*storage_size) is evaluated at run-time when the scope of the type to which 
the length clause Julies is entered, and is th^fore subject to rejection (via storagejerror) based on available 
storage at the time the allocation is made. A collection may include storage used for lun-time administration of the 
collection, and therefore should not be expected to accommodate a specific number of objects. Furthermore, certain 
classes of objects such as unconstrained discriminant array components of records may be allocated outside a given 
collection, so a collection may accommodate more objects than might be expected. 

The specification of storage for a task activation (t’storage_size) is evaluated at run-time «1ien a task to which the 
length clause applies is activated, and is therefore subject to mjection (via storagejerror) based on available storage 
at the time the location is made. Storage reserved for a task activation is separate fiom storage needed for any 
collections defined within a task body. 

The specification of small for a fixed point type (t’small) is subject only to restrictions defined in the LRM section 
132. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an enumeration representation clause must be in 
the range of standardJnteger. 

The value of an internal code may be obtained by applying an ^ropriate instantiation of unchecked_conversion 
to an integer type. 

F.S3 Record Representation Clauses 

The storage unit offset (the at stcuic_simple_expressionpm) is given in terms of 8-bit storage units and must be 
everL 

A bit position (the range part) applied to a discrete type component may be in the range 0~15, with 0 being the 
least significant bit of a component A range specification may not specify a size smaller dian can accommodate 
the component A range specification for a component not accommodating bit packing may have a higher upper 
bound as appropriate (e.g. 0.J1 for a discriminant string component). Refer to the internal data rq)resentation of 
a given component in determining the component size and assigning offsets. 

Components of discrete types for which bit positions are specified may ix)t straddle 16-bit word boundaries. 

The value of an alignment clause (the optional at mod part) must evaluate to 1,2,4, or 8. and may not be analler 
than the highest alignment required by any component of the record. 


Meridian Ada Compiler User's Guide 156 


Rarised 11/7191 



Appendix F 


F^.4 Address Clauses 

An address clause may be supplied for an object (whether constant or variable) or a task entry, but not for a 
subprogram, package, or task unit The meaning of an address clause supplied for a task entry is given in section 
F.5,5. 

An address expression for an object is a 32-bit offset of type systeimaddress. 

¥33 Interrupts 

A task entry’s address clause can be used to associate the entry with a UNIX signal. Values in the range 0,J1 are 
meaningful, and represent the intemipts corresponding to those values. 

An interrupt entry may not have any parameters. 

F^.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversiotL 


F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependem components. 


F.7 Unchecked Conversions 

There are no restrictions on the use of iinchecked_conversion Conversions between objects whose sizes do not 
conform may result in storage areas widi undefined values. 


F.8 Input-Output Packages 

A summary of the implonentation-dependent input-output characteristics is: 

* In calls to open and create, the form parameter must be the empty string (the dehiult value). 

* More than one internal file can be associated with a single external file for reading only. For 
writing only one internal file may be associated with an external file; Do not use reset to get 
around this rule. 

* Temporary sequential and direct files are given names. Temporary files are deleted when they 
are closed. 

* File I/O is buffered; text files associated with terminal devices are line-buffered. 

* The packages sequential.io and direct.io cannot be instantiated with imconstrained composite 
types or record types wiUi discriminants without defaults. 


F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


RansedURm 


157 Meridian Ada Compiler User's Guide 





