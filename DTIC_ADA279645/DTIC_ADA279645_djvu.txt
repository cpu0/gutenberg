AD-A279 645 ATION PAGE 


nmnAppiwaa 

CPUNo. 



a •! M artMiw •! iNtoiMten. Mu«m 
OMk tula ISM. W 





940325S1.11354, AVE: 94ddc500_4 

DDC-I, DACS Sun SPARC/Solaris Native Ada Cdmpller System, 
.Version 4.6.2 




National Institute of Standards and Technology 
Gaithersburg, Maryland 





teflSTSS JeiriSiiSS Technology 

Gaithersburg, Maryland 20899 

USA 




Ada Joint Program Office 
The Pentagon, Rn 3E118 
thtaahington. DC 20301-3080 




ORGANIZATION 




OTIC 




Ef-ni I ;r :!r| |T.-77.V/JTF l 


Approved for Public Release; distribution unlimited 



Host/Target: Sun SPARCclasslc (under Solaris, Release 2.1) 


94-1S744 

IIIHHIII 


ire ’» 


Ada programnlng linguage, Ada Compler Validation Siminary Report, A( 

T'*l• Testing, Ma Val. Office. Ada Val. I 




GtAMPCATION 




UNCLASSiFED 




lync IH3PEC5SD1 

94 5 25 027 


UNCLASSIFED 


PraKxtMdbyANSiM. 


ttai 
























AVF Control Nunber: NIST94DDC500_4_l.ii 
DATE COMPLETED 

BEFORE ON-SITE: 94-03-18 
AFTER ON-SITE: 94-03-28 
REVISIONS: 94-04-11 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Niunber: 940325S1.11354 
DDC-I 

DACS Sun SPARC/Solaris Native Ada Compiler System, Version 4.6.2 
Sun SPARCclassic -> Sun SPARCclasric 


Prepared By: 

Software Standards Validation Group 
Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 


Accesion For 


NTIS CRA&J 
DTIC TAB 
Unannounced 

a 

Justification 


By 


Dist. ibution / 



Availability Codes 

Avail and/or 
Dist Special 








AVF Control Huabor: NIST94DDC500 4 1.11 


Cortlficato Infonatlon 


Th« following Ada iiqplanantation was tastad and datarminad to pass ACVC 
1.11. Tasting was cosplatad on March 25 , 1994. 

Coapllar Naaa and Varslon: DACS Sun SPARC/Solaris Nativa Ada Cospllar 

Systan, Varslon 4.6.2 


Host Cosputar Systan: 


Targat Coaputar Systaa: 


Sun SPARCclassic running imdar Solaris, 
Ralaasa 2.1 

Sun SPARCclassic running undar Solaris, 
Ralaasa 2.1 


Saa sactlon 3.1 for any additional inforaatlon about tha tasting 
anvlronaant. ' 

As a rasult of this validation affort. Validation Cartificata 
940325S1.11354 is awardad to DDC-X. This cartificata axpiras 2 yaars 
aftar ANSI/MIL>STD-1815B is approvad by ANSI. 

This raport has baan ravlawad and is approvad. 


Ada Validation (IfacilLlty 
Or. David K. J^fazjsop 
Chiaf, Inforsation Systana 
Snginaaring Division (ZSED) 


Ada ValidatiOT Fa&iXlty 
Mr. L. Arnold Johiison 
Nanagar, Softwalra Standards 
Validation Group 


Co^initar Systaas Laboratory (CSL) 
National Znstituta of Standards and Tachnology 
Building 225, Room A266 
Gaitharsburg, Maryland 20899 
U.S.A. 


Ada Yal(i^uion Organization 
DlraotorT^Conputar & Softwara 
Snginaaring Division 
Znstituta for Oafansa Analysas 
Alaxandrla VA 22311 


U.S.A. 


Ada Joint Program Offica 
David R. Basal 
Oaputy Diractor, 

Ada Joint Program Offica 
Dafansa Information Systams Agancy, 
Cantar for Information Managamant 
Washington DC 20301 






N1ST94DDC500_4_1.11 
DECIARATION OF CONFORMANCE 

Th* following declaration of conformance was supplied by the customer. 
Customer: DDC-Z 

Certificate Awardee: DDC-Z 

Ada Validation Facility: National Institute of Standards and 

Technology 

Computer Systems Laboratory (CSL) 

■> Software Standards Validation Group 

Building 225, Room A266 
Gaithersburg, Maryland 20899 
U.S.A. 

ACVC Version: 1.11 


Ada Znplementation: 

Compiler Name and Version: DACS Sun SPARC/Solaris Native Ada Compiler System, 

Version 4.6.2 

Host Computer System: Sun SPARCclassic running under Solaris, Release 2.1 

Target Conputer System: Sun SPARCclassic running under Solaris, Release 2.1 

Declaration: 


Z the undersigned, declare that Z have no knowledge of deliberate deviations from the 
Ada Language Standard ANSZ/MZL-STD-1815A ZSO 8652-1987 in the implementation listed 
above. 








TABLE OF CONTENTS 


CHAPTER 1.1-1 

INTRODUCTION.1-1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPT EP ••••••••••2*1 

IMPLEM^ATION DEPEND^CIES. !...!!!!!!!!!!!!!!!! .2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3.3-1 

PROCESSING INFORMATION.3-1 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A.A-1 

MACRO PARAMETERS.A-1 

APPENDIX B.B-1 

COMPILATION SYSTEM OPTIONS.B-1 

LINKER OPTIONS. B-2 

APPENDIX C.C-1 

APPENDIX F OF THE Ada STANDARD.C-1 






























CHAPTER 1 


INTRODUCTION 


Thtt Ada im)leBentation described above was tested according to the 
Ada Validation Procedures [Pro92] against the Ada Standard [Ada83] 
using the current Ada Compiler Validation Capability (ACVC). This 
Validation Siimaary Report (VSR) gives an account of the testing of 
this Ada iaqpleaentation. For any technical terms used in this 
report, the reader is referred to [Pro92]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure of 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U.S.C. #552). The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the subject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield, Virginia 22161 
U.S.A. 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 


Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria, Virginia 22311-1772 

U.S.A. 


1-1 






1.2 REFERENCES 


[Ada83] R^g^rgnc?_Mflnyfll_ for the Ada Pro arammina_Language. 

ANSI/NIL-STD~1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures. Version 3.1, Ada Joint 
Program Office, August 1992. 

[U689] Ada Compiler Validation Ca pability U ser's Guide. 21 June 
1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, 0, E, and L. The first letter of a test 
name identifies the class to which it belongs. Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circiimvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECK_FILE is used to check the contents 
of text files %ra:ltten by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executedile tests. If these iinits are not 
operating correctly, validation testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is 
compiled and the resulting compilation listing is examined to 
verify that all violations of the Ada Standard are detected. Some 
of the class B tests contain legal Ada code which must not be 
flagged illegal by the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values—for example, the 


1-2 




largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is produced by 
the AVF. This customization consists of making the modifications 
described in the preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [U689]). 

In order to pass an AGVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability (ACVC) 


Ada Implementation 


Ada Joint Program 
Office (AJPO) 


Ada Validation 
Facility (AVF) 


Ada Validation 
Organization (AVO) 

Compliance of an 
Ada Implementation 


The software and any needed hardware that 
have to be added to a given host and target 
computer system to allow transformation of 
Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada 
implementations. Validation consisting of 
the test suite, the support programs, the 
ACVC Capability User's Guide and the 
template for the validation sximmary (ACVC) 
report. 

An Ada compiler with its host computer 
system and its target computer system. 

The part of the certification body which 
provides policy and guidance for the Ada 
certification Office system. 

The part of the certification body which 
carries out the procedures required to 
establish the compliance of an Ada 
implementation. 

The part of the certification body that 
provides technical guidance for operations 
of the Ada certification system. 

The ability of the implementation to pass an 
ACVC version. 


1-3 



Computer System 


Conformity 

Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable Test 

ISO 

LRH 


Operating System 


Target Computer 
System 


A functional unit, consisting of one or more 
computers and associated software, that uses 
common storage for all or part of a program 
and also for all or part of the data 
necessary for the execution of the program; 
executes user- written or user-designated 
programs; perfosrms user-designated data 
manipulation, including arithmetic 
operations and logic operations; and that 
can execute programs that modify themselves 
during execution. A computer system may be a 
stand-alone unit or may consist of several 
inter-connected units. 

Fulfillment by a product, process, or 
service of all requirements specified. 

An individual or corporate entity who enters 
into an agreement with an AVF which 
specifies the tenns and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring 
that conformity is realized or attainable on 
the Ada implementation for which validation 
status is realized. 

A computer system where Ada source programs 
are transformed into executable form. 

A test that contains one or more test 
objectives found to be irrelevant for the 
given Ada implementation. 

International Organization for 
Standardization. 

The Ada standard, or Language Reference 
Manual, published as ANSI/HIL-STD-1815A 
-1983 and ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>: 
<paragraph>." 

Software that controls the execution of 
programs and that provides services such as 
resource allocation, scheduling, 
input/output control, and data management. 
Usually, operating systems are predominantly 
software, but partial or complete hardware 
implementations are possible. 

A computer system where the executable form 
of Ada programs are executed. 


1-4 






Ada 


Validatad Ada 
Coapiler 

Validated Ada 
Ziqpleaentation 


Validation 


Withdra%m Test 


The compiler of a validated 
implementation. 

An Ada implementation that has been 
validated successfully either by AVF testing 
or by registration [Pro92]. 

The process of checking the conformity of an 
Ada compiler to the Ada programming language 
and of issuing a certificate for this 
implementation. 

A test found to be incorrect and not used in 
conformity testing. A test may be incorrect 
because it has an invalid test objective, 
fails to meet its test objective, or 
contains erroneous or illegal use of the Ada 
programming language. 


1-5 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Soae tests are withdrawn by the AVO front the ACVC because they do 
not conform to the Ada Standard. The following 104 tests had been 
wlthdranm by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test Is 
available from either the AVO or the AVF. The publication date for 
this list of withdrawn tests Is 93-11-22. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C355070 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

C04024D 

CD4031A 

C04051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

A07006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

COA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 

A test Is Inapplicable If It contains test objectives which are 
Irrelevant for a given Ada Implementation. The Inapplicability 
criteria for some tests are explained in documents Issued by ISO 
and the AJPO known as Ada Commentaries and commonly referenced In 
the format Al-ddddd. For this Implementation, the following tests 
were determined to be Inapplicable for the reasons indicated; 
references to Ada Commentaries are included as appropriate. 

The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 


2-1 





C35706L..y (14 tests) C35707L..Y (14 tests) 
C35708L..Y (14 tests) C35802L. .Z (15 tests) 
C45241L..Y (14 tests) C45321L. .Y (14 tests) 
C45421L..Y (14 tests) C45521L. .Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

C24113I..K (3 tests) use a line length in the input file which 
exceeds 126 characters. 

The following 20 tests check for the predefined type LONG_INTEGER; 
for this implementation, there is no such type: 

C35404C C4S231C C45304C C45411C C45412C 
C45502C C45503C C45504C C45504F C45611C 
C45613C C45614C C45631C C45632C B52004D 
C55B07A B55B09C B86001W C86006C CD7101F 

C35404D, C45231D, B86001X, C86006E, and CD7101G check for a 
predefined integer type with a name other than INTEGER, 
L0NG_INTEGER, or SHORT_INTEGER; for this implementation, there is 
no such type. 

C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SHORT_FLOAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with 
a name other than FLOAT, LONG_FLOAT, or SH0RT_FL0AT; for this 
implementation, there is no such type. 

C45531N..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for 
this implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types and the results 
of various floating-point operations lie outside the range of the 
base type; for this implementation, MACHINE_OVERFLOWS is TRUE. 

C4A013B contains a static universal real expression that exceeds 
the range of this implementation's largest floating-point type; 
this expression is rejected by the compiler. 

B86001Y uses the name of a predefined fixed-point type other than 
type DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside 
the range of type DURATION; for this implementation, the ranges are 
the same. 

CA2009C and CA2009F check whether a generic unit can be 


2-2 




instantiated before its body (and any of its subunits) is compiled; 
this implementation creates a dependence on generic units as 
allowed by AI-00408 and AI-00506 such that the compilation of the 
^^aneric unit bodies makes the instantiating units obsolete. (See 
section 2.3.) 

CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 

CD2A84A, CD2A84E, CD2A84I. .J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
iiqplenentation does not support such sizes. 

The 18 tests listed in the following table check that USE_ERROR is 
raised if the given file operations are not supported for ^e given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL lO 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE31026 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The 3 tests listed in the following table check the given file 
operations for the given combination of mode and access method; 
this implementation does not support these operations. 

Test File Operation Mode File Access Method 


CE2105A CREATE IN_FILE SEQUENTIAL_IO 

CE2105B CREATE IN_FILE DIRECT_IO 

CE3109A CREATE IN_FILE TEXT_IO 

CE2203A checks that WRITE raises USE_EREOR if the capacity of an 


2-3 












mct«rnal saquential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot 
restrict file capacity. 

CB3111B and CE3115A associate multiple internal text files with the 
same external file and attempt to read from one file what was 
written to the other, «rtxich is assumed to be immediately available; 
this implementation buffers output. (Sea section 2.3.) 

CB3304A checks that 8ET_LIIfE_ZiEN6TH and SET_PA6E_LEM6TH raise 
USS_ERROR if they specify an inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for thrs iaqplementation, the value 
of COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 

2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 69 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in 
the way expected by the original tests. 

B22003A B26001A B26002A B26005A B28003A B29001A B33301B 
B35101A B37106A B37301B B37302A B38003A B38003B B38009A 
B38009B B55A01A B61001C B61001F B61001H B61001I B61001M 
B61001R B61001W B67001H B83A07A B83A07B B83A07C B83E01C 
B83E01D B83E01E B85001D B85008D B91001A B91002A B91002B 
B91002C B91002D B91002E B91002F B91002G B91002H B91002I 
B91002J B91002K B91002L B95d30A B95061A B95061F B95061G 
B95077A B97103E B97104G BAIOOIA BAllOlB BC1109A BC1109C 
BC1109D BC1202A BC1202F BC12026 BE2210A BE2413A 

CD2A83A was graded passed by Test Modification as directed by the 
AVO. This test uses a length clause to specify the collection size 
for an access type whose designated type is STRING; eight 
designated objects are allocated, with a combined length of 30 
characters. Because of this implementation's heap-management 
strategy and alignment requirements, the collection size at line 22 
had to be increased to 812. 

CA2009C and CA2009F were graded inapplicable by Evaluation 
Modification as directed by the AVO. These tests contain 
instantiations of a generic \mit prior to the compilation of that 
unit's body; as allowed by AI-00408 and AI-00506, the compilation 


2-4 






of tho gonoric unit bodies makes the compilation unit that contains 
the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification 
as directed by the AVO. These tests check that instantiations of 
generic units with unconstrained types as generic actual parameters 
are illegal if the generic bodies contain uses of the types that 
require a constraint. However, the generic bodies are compiled 
after the units that contain the instantiations, and this 
implementation creates a dependence of the instantiating units on 
the generic units as allowed by AI~00408 and AI-00506 such that the 
compilation of the generic bodies makes, the instantiating iinits 
obsolete—no errors are detected. The processing of these tests 
was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 

CB3111B and CE3115A were graded inapplicable by Evaluation 
Modification as directed by the AVO. The tests assume that output 
from one internal file is unbuffered and may be immediately read by 
another file that shares the same external file. This 
implementation raises END_ERROR on the attempts to read at lines 87 
and 101, respectively. 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Th« Ada laplenentatlon tested in thie validation effort is 
described adequately by the infomation given in the initial pages 
of this report. 

For technical information about this Ada implementation, contact: 

Forrest Holemon 

410 North 44th Street, Suite 320 
Phoenix, Arizona 85008 (U.S.A.) 

Telephone: 602-275-7172 

Telefax: 602-275-7502 

For sales information about this Ada implementation, contact: 

Mike Halpin 

410 North 44th Street, Suite 320 
Phoenix, Arizona 85008 (U.S.A.) 

Telephone: 602-275-7172 
Telefax: 602-275-7502 

Testing of this Ada implementation was conducted at the customer's 
site by a validation tezun from the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro92]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the nvunber of ACVC tests in various 
categories. All tests were processed, except those that were 
withdrawn because of test errors (item b; see section 2.1), those 
that require a floating-point precision that exceeds the 
implementation's maximum precision (item e; see section 2.2), and 
those that depend on the support of a file system—if none is 
supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 




a) Total Nunber of Applicable Tests 


3783 


b) Total Nunber of Withdrawn Tests 104 

c) Processed Inapplicable Tests 283 

d) Mon-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 0 


f) Total Nunber of Inapplicable Tests 283 (oHl-fe) 

g) Total Nunber of Tests for ACVC l.ll 4170 (atb+f) 


3.3 TEST EXECUTION 

A nagnetic tape containing the custonized test suite (see section 
1.3} was taken on-site by the validation tean for processing. The 
contents of the nagnetic tape were loaded directly onto the host 
coiqputer. 

After the test files were loaded onto the host caiiig>uter, the full 
set of tests was processed by the Ada inplenentation. 

The tests were conpiled, linked, and executed on the host/target 
conputer systen. l%e results were captured on the host/target 
conputer systen. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation tean. See Appendix B for 
a complete listing of the processing options for this 
inplenentation. It also indicates the default options. The 
options invoked explicitly for validation testing during this test 
were: 

-list 

Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3-2 






5 ADA COMPILER 


The Ada OmpXkx oompiles aU pR^pam units within die qpedfied source file «d inseits the 
geneiaied otijeas into the cuncnt prognm libmy. Ooai[riler options are provided to dlow die 
user camrol of optimization, nm-time checks, ant oompOer input and output options sudi as list 
ffles, oon^unuion files, and the progiam libnry used. 

The to die conqiiler oonsists of the source file, the configurttion file (whidi oontnds die 
fbnnat of tte list file), and the compiler options. Secdrni S.l provides a list of all compiler 
options, and Section S.2 describes the source and configuration files. 

Output oonsists of an ot:!ject placed in die program libnuy, diagnostic messages, and t^itional 
Ihrings. The configuration file and the compiler tuitions ^lecify the format and cmuents of the 
list ir^nnation. Output is described in Section S.3. 

' If any diagnostic messages are produced during the compilation, they are ouqiwt in the diagnostic 
file and on the current output file. The diagnostic file and the diagnostic message format are 
described in Section S.3.2. 

The compiler uses a program library during the compilation. The compilation unit may refer to 
units fiom the program library, and an ii^mal representation of the compilation unit will be 
induded in die program library as a result of a successful comitilation. The program library is 
described in Chapter 3. Section S.4 briefly describes how the Ada compiler uses the library. 


5.1 hivocation Comimiiid 

Invoke the Ada compiler widi the following cmmnand: 


ada {<option>} <source-or>uiiit*naiiie> {ooiiroeK>r>unit-name>} 







DACS Sun SPARC/SunOS nd Sun SPARCySoiaiis Native Ada Compiler Synem. User’s Guide 

Ada Compiler 


5.1.1 Smsmiary of Options 

This section presents a summaiy of options supported by die conqiiler. 


OPTIONS DESCRIPTION REFERENCE 


•mrtojniinc SmaU local subprograms are automaticdly 5.1.2 

inline expanded. 

•body Conroile body imit from souroe saved in libraiy. 5.1.3 

-nocbeck <keyword>{,<keywor d> } Siqipress generation of lun-tiine constraLx chedcs. 5.1.4 

•confignration <flcHmine> Spedfres die file used by die compiler. 5.1.5 

•debug ^ledfies that information for die IX)C-I 5.1.6 

Symbdic Ada Debugger is to be generated. 

•Murary <fllfr>nanie> Spedfies the pro gr am library to be used. 5.1.7 

•lat Creates a source list file. 5.1.8 

-mnchtawjoode Generates a machiiie code dump for the oonroiladon. 5.1.9 

<4pdndae <keyword>{,<koywonl>} Specifies comdler optimizations. 5.1.10 

•profile Specifies that code fin* profiling is to be generated. 5.1.11 

•progress Di^days compiler progress. 5.1.12 

•nos8ve_sourGe The source is not saved in die program library. 5.1.13 

•specMication Cominle specificadon unit from souroe saved 

in library. 5.1.14 

•aramfaigi Suppress warnings frmn the compiler. 5.1.15 

-xref Creates a cross reference listing. 5.1.16 


$ ada -Hat taatpzog 

TUs example oomfdles die source file testprog and generates a list file with die name tesforogJis. 
Example: 

$ ada -lib aqf_llbzazy taat 

TMs exsmfde oonroiles the source file test into the library myjibrary. 


40 







DACS S« SPARC/SmOS nd Sm SPARQSolaris Native Ada CompUer System. User's Guide 

Ada CbapOer 


Definlt vahies eadat fbr o|)tions as indicated in die ftdlowdng sections. Optkm nan^ may be 
aUxeviaied (dunden omitted 6om the right) as k»g as no ambiguity arises. 


S.1 J AirrO.lNLINE 
Syntax: 

•nmo.iiM 

This <ytion spedfles vritedter local subprogr a ms should be inline expanded. The hilme expanrion 
only oocuis if die sdiprogiam oont^ no mme dian 3 objed declarations (and no odter 
dedttutionsX no more than S stdemenis and no exception handler and if die subpro^am fulfills 
die requiremetts defined ftir pragma inline. A warning is issued when automatic inline expansion 
is petfonned. 


SJ J BODY 
Syntax: 

•body 

When using the option •body die Ada compiter will recompile the body of the unit ^ledfied as 
parameter to the Ada compiler (see section S.1.17) into the currant sutdilnafy. The source code 
saved in die program fibrary at die previous coropilatim of the body is used as the source code 
to be compiM. If no source code is present or the body fiir the unit does not edst in die library, 
an error message is issued. This opt^ is primarily for use by the Ada Recompiler (see chapter 
7). 

5.1.4 NOCHECK 
Syntax: 

•nocheck <kqrword>(,rckeyword>} 

By defiuilt. all nm-time checks listed below will be generated by the compiler. The following 
m^dt checks can be suppressed: 

ALL Suppress all checks. 

INDEX Index check. 

ACCESS Chedt for access values bdr% non NULL. 

DISCRIMINANT Qiedcs for discriminated fidds. 

LENGTH Array length dieck. 


41 




DACS Sun ^ARC/SunOS ml Sim SPAROSolaris Native Ada Compiler System. User's Guide 

Ada Qmipiler 


RANGE 

OVERFLOW 

ELABORA’nON 

STORAGE 


Checks for values bemg in range. 

Ex|didt overflow checks. 

Checks for su b programs being ehfooiaied. 
Cheda for sufficient stmage available. 


Note tfmt the Divi8ioQ_cliecfc suppiesskm mernioned in ARM 11.7 is not impiemenied. 


S.LS CONnGURATION.FILE 
Syntax: 

-coa fl g u ration <file-iMiae> 

This option qwcifies the configuration file to be used by the compiler. The configuration file 
aBows the user to format compiler listings, set error limits, etc. If the option is omitted the 
configuration file designated by the tuane c^nf^ is used by default. Section 5J22 contafos a 
description of the conjuration file. 

5,\J6 DEBUG 
Syntax: 


Generate ddxig information for tiie compilation &:)d store the information in the program library. 
This is necessary if the unit is to be debugged with the DDC-I Ada Symbolic Cross Ddmgger. 
Note that die program must also be linked widi the •debug option, if die program is to be 
debugged widi the DDC-I Ada Symbolic Cross Dtixigger. See Sectkxi 6.3.3.I. Please note that 
no extra information is included in the code or data generated. 


5.1.7 LIBRARY 
Syntax: 

•Ibrary <lihrary<4Uime> 

This option ^pedfies the current subtibrary that will be used in die compilatxm arxl will receive 
die ob^ udien the conqrilation is con^lete. By specifying a currern suUibrary, die current 
program libraiy (currern rablibrary and ancestors up to root) is also imidicidy spedfied. 


42 





OACS SPARC/SunOS md Sun SPARCySoUris Native Ada Compiler System. User’s Guide 

Ada Compiler 


If this option is omitted, the subUbcaiy designated by the envinmmm variable name 
ADAJLIBRARY is used as the current sutdibrary. Section 5.4 ttesoibes how the Ada compiler 
uses fte library. 


5.1 JUST 
Syntax: 

•Mat 

•list specifies th« a source listii^ will be produced. 'The source Ustiitg is written on the list file, 
whidi has the name of the source file wifii the extension Jis. Sectkm S.3.1.1 contains a 
des cri pt io o of the source listing. 


5.1 J MACilINE_CODE 
Syntax: 

•BMcMnejoode 

Dump a machine code list of the compiled code at starxlard output The instructions are dunqxd 
symbolically, but addresses are not Calls are described by a "pard)”, whidi consists of a unit 
number and an entry number. The unit number is a unique number defining the library unit and 
the entry number is the number of the subiMogram within that unit 


5.1.10 OPTIMIZE 
Syntax: 

•optimin <li^rword>(,<kcyword>} 

This option ^ledfies which (^mizations will be performed during code generatioa Default is 
no optimizations. 

Sdection of optimizations can be done in two basic ways. 

1) Sdecting individual optimizations. 

2) Selecting predefined dasses of optimizations. 


43 



DACS Sun SPARC/SunOS and Sun S'^ARC/SoUris Native Ada Compiler System. User’s Guide 

Ada Omipiler 


[NO]LOOP_REGISTERS(a<number-of-iterations>] 

Controls the extent to wluch legisteis ate sdlociUed to varices in loops, 
paiticulaily inner loqjs. 

It is postiUe to specify an (^ximization level, where the level specifies the 
numto of times the t^jtimi:^ diall loop through the code. If no level is 
qtecified only tme loop wUl be peifonned. 

[NO]COMMON_SUBEXPRESSION_ELIMINATION[»<mimber-of-iterations>] 

Specify to which extent common subexpressimi elimination should be 
perfonned. 

It is possible to specify an optimization level, udiere the level qjedfies the 
number of times the optimizer shall loop throu^ the code. If no level is 
qtecified only one loop will be peifoimed. 

[NOKX)PY_PROPAGATION[s<number-of-iteiati(»is>] 

Specify to stiiidt extent copy pn^pagation should be perfonned. 

It is possiUe to specify an t^jtimization level, where the level specifies the 
num^ of times the qjtimizer shall lo(^ thimigh the code. If no level is 
q)ecifled only one loq) will be performed. 

[NOJCONSTANT.FOLDING 

Ctmtrols vrfiether arithmetic expressions which have become static due to 
other q)timizati(His are calculated at compile time and folded into the code. 

[NOJLOOP^UNROLLING 

Perfbnns unrolling of static loops into sequential code. The algoridun for 
deciding ^irfKther a loop is a candidate for unrolling is given in the 
Reference Manual. 

IN0]L00P_INVARIANT_C0DE_M0T10N 

Controls the movemoit of invariant code outside of loqts. 

[NO]DEAD_CODE_REMOVAL[s<number-of'iterations>] 

Controls whether dead code should be removed or not E>ead code can 
occur \rfiai conditions become static or when a variable is not used 
anymore. Please note that this optimization can be a very time consuming. 

It is possiUe to qtecify an optimization level, where the level specifies the 
number of times the optimizer shall loop throu^ the code. If no level is 
q)ecified only one loop will be peifonned. 


The fttilowing options select a predefined level of qttimizatitms: 

LOW - Selects a predefined set of optimizations equal to the following list: 

LOOP REGISTERS. COMMON_SUBEXPR. 
COPY.PROPAGA’nON. CONSTANT_FOLDING. 

NODEAD CODE REMOVAL. LOOP_UNROLLING. 
LOOP_INVARIANT_CODE_MOTION 


44 





DACS Sun SPARC/SunOS md Sun SPARCVSidafis Native Ada Compiler System. User’s Guide 

Ada Compiler 


MEDIUM - Selects a predefined set of optimizatkms equal to the following list: 

LXX)P_REG1STERS=25. COMMON_SUBEXPR=2S. 
OOPY_PROPAGATION*25. CONSTANT.FOLDING. 
DEAD.CODEJIEMOVAL. LOOP.UNROLUNG, 
LOOP_INVARIAhrr_CODE_MOTION 

HIGH - Sdects a predefined set of optimizatkms equal to the following list: 

LOOP.REGISTERS»1000. COMMON_SUBEXPR=1000. 
COPY_PROPAGATION=1000. CONSTANT.FOLDING, 
DEAD_CODE_REMOVAL=1000. LOOP.UNROLUNG, 
LOOP_INVARIANT_CODE_MOnON 

ALL Equivalent to HIGH 

Examine: 

$ ada -opelsisa all axanpla_l 

Both of these commands compile the program with all the optimizations active at dieir highest 
levels. 

$ ada -opt low.loop_xag«1000/noloopjanroll) axaaiplaJZ 

This command compile the program with low optimizations.but no loop.uniolling is wanted and 
rasters dwuld be used to the greatest extent possible in loops. 


5.1.11 PROFILE 
Syntax: 

•profile 

Hiis option ^)eciffos that code for profiling shall be generated. This option in conjunction with 
foe linker option profile enables profiling of an executable program. 


5.1.12 PROGRESS 
Syittax: 

•progress 

When this optimi is given, the compiler will output data about which pass foe compiler is 
currently tunning. 


45 




DACS Sun SSPARC/SunOS «id Sun SPARC/S(daris Native Ada Compiler System, User’s Guide 

Ada Compiler 


5.1.13 NOSAVE_SOl)RCE 
Syntax: 


When Hiosave^sottroe is specified, souioe code will not be retained in the program library, diis 
save some spaM in the suWbrary. The default is to save a o^y of the comj^ed source code in 
the progran library. Ifereby die user is always ceitain of verskm of the source code 
con^ikd. The source code may be displayed the siddibrary with the PLU Type command. 

-nosave^aomre will he^ keeping Ubtaiy sizes smaller, but it will not be possiUe to use 
the reoompiler’br the symbolic Ada Dehugger. 


5.1J4 SPECinCATION 
Syntax: 

•specification 

When using die option -specification the Ada comi»ler will recompile the specification of the unit 
qwcified as parameter to the Ada com(»ler (see secdcm 5.1.17) into the current sublibraiy. The 
source code saved in the program library at the previous compUadon of the specificadmi is used 
as the source code to be compiled. If no source code is present or die specificadcm for the unit 
does not exist in the library, an error message is issued. This tuition is primarily for use by the 
Ada Recompiler (see chapter 7). 


5.1.15 WARNINGS 
Syntax: 

•warnings 

Suppress warnings from the compiler in the diagnostics file. All diagnostics will always come on 
standard output, only the omitents of the diagnostics file is affected by the warnings option. If a 
conqnlidion only generates warnings and die warnings option is specifies no diagnostics file is 
cretaed. 


5.1.16 XREF 
Syntax: 

-xref 

A cross-reference listing can be requested by the user by means of the option -xref in conjunction 
with option list. If the -xref option is given and no severe or fatal errors are found during the 
compilation, the cross-reference listing is written to the list file. The cross-reference listing is 
described in Section S.3.1.3. 


46 






DACS Sun SPARCTSunOS and Sun SPARCTSc^s Native Ada Compiler System, User’s Guide 

Ada Compiler 


5.1.17 Source File Parameter 
<8ource<or>unit-minie> {<soiarceH>r-imit-nanie>} 

This parametBr specifies either the text file containing the Ada source text to be compiled or, 
when option >body •apedffcatkm is used, the name of the unit to be compiled. When inteipreted 
as a file name, the fite type Jida is assumed by default. More than one file name can be 
specifwd, each <soufoe-file-name> can be a file name with wildcards as defined by the shell. 

The compilation staits with dre leftmost file name in the file name list, and ends with the 
rightmost If the list of file names includes a file name with wildcards, the files matching the 
wildcard name are compiled in ai^dtabetical order. If any file name occurs several times in the 
list of file names, the iUe is compiled several times. i.e. one file is compiled as many times as 
its name occurs in the list of file names. 

The allowed fonnat of the source text is described in Section S.2.1. 


5.2 Compiler Input 

Input to die compfler consists of die command line options, a list of source text files and, 
optiaially. a configuration file. 


5.2.1 Source Text 

The user submits one file contaimng a source text in each compilation. The source text may 
consist of one or more comftilation units (see ARM Section 10.1). 

The format of die source text must be in ISO-FORMAT ASCII. This fonnat requires that the 
source text is a sequence of ISO characters (ISO standard 646), where each line is terminated by 
either (me of the following termination secfuences (CR means carriage return, VT means vertical 
tabulation. LF means line feed, and FF means form feed): 

1) A seqpience of one or more CRs, where the sequence is neither immediately preceded nor 
immc^ately followed by any of die characters VT, LF, or FF. 

2) Any of the characters VT, LF, or FF. immediately preceded and followed by a sequence 
of zero or more CRs. 


In general, ISO control characters are not permitted in the source text widi the following 
excqitions: 

1) The horizontal tabulation (HT) (diaracter may be used as a separator between lexical units. 

2) li^, VT, FF. and CR may be used to terminate lines, as described above. 


47 




DACS Sun SPARC/SunOS and Sun SPARQSdaris Native Ada Compiler System, User’s Guide 

Ada Onnpiler 


The maximum munber of chaiacters in an input line is detennined by the ooments of 
ooirf^untion fite (see Section S.1.4). The oontrol characters CR, VT. LF. and FF are 
consideied a put of the line. Lhies contMidng more than the maximum number of diaracteis 
mmcated and an error message is issued. 


SJ12 Configuration File 

Certain proces^ng diaracteiisdcs of the comixler. such as format of input and output, and error 
limit, may be mo^fied by the user. These characteristics are passed to the compiler by means 
of a configuration file, vrtiidi is a standard UNIX text file. The contents of the oc^guratimi file 
must be m Ada posidoiud aggiegue, written on one line, of Ae type 
CONnGURATION_RECORD, is described below. 

The configuration file "config" is not accepted by the conqnler in the following cases: 

1) The qmtax does not conform wiA the tytttax for poational Ada aggregates. 

2) A value is outside the rar^ specified. 

3) A value is not qredfird as a literal. 

4) LINES_PER_PAGE is not greater than TOP_MARGIN + BCTTOMJklARGIN. 

5) The aggregate occuixes mote than one line. 

If the cotrtpiler is uruible to accept the configuratitm file, an error message is written on the 
current ou^ file attd the compilation is terminated. 

This is the record whose valtKS must appear in aggregate form within fire configuration file. The 
record declaration makes use of some o^r types (given below) for the sake of clarity. 


type C0NFIGURAT10N_REC0RD is 


record 

IN_FORMAT 
OUT_FORMAT 
ERR0R_LIM1T 
end record; 


INFORMATTING; 

OUTFORMATTING; 

INTEGER; 


type INPUT_FORMATS is (ASCII); 


type INFORHATTING is 
record 

INPUT_FORMAT 
INPUT__LINELENGTH 
end record; 


INPUT_FORMATSr 
INTEGER range 70..250; 


type OUTFORMATTING is 
record 

LINES_PER_PAGE 
TOPJWARGIN 
BOTT(»l MARGIN 


INTEGER range 30..100 
INTEGER range 4.. 90 
INTEGER range 0.. 90 


48 


SI? 





QACS Swi SPARC/SmOS nd Sun SPARCys<daris Native Ada Compiler System. User's G<^ 

Ada Uidcer 


Main Program Name 
Ada Library 
Linker Options 

Linker Logical Names 
Ada Itinker Options 
Target Linker C^ions 
RTS Configuration Options 
Shell Script Template 



Shell Script 

nCD Module in A.OUT Format 
1 Object Module in A.OUT Format 



An executable A.OUT Module 


Flgiorc 6>1 

The Uiddng Process 


<13 bivocathwi Command 
Enter the following command to invoke the linker 
al (<o|ition>} <unit>mime> 

The options and parameters siqtported by the linker are described in die following sections. 


61 





DACS Sun SPARC/SunOS and Sun SPARQSolaris Native Ada Compiler System. User’s Guide 

Ada Litdcer 


4L3.1 Paraiaelcr 
<iuiit>aame> 

lUs panmeler is required md indicates the main piogiam. The <iniit.jiame> must be a Ulxaiy 
uidt ta the civrent prognun library, but not necessarily of the current suUilxary. 

Note, dut a midn program must be a procedure without parameters, and that <unit-name> is the 
ideiKifier of die procedure, not a file qiecification. The main procedure is not checked for 
parameters, but the execution of a program with a main procedure with parameters is undefined. 

6S2 Summary of Options 

This sectitm briefly describes all optkms siqjported by the Ada linker. 


OPTIONS 

DESCRIPTION REFERENCE 

•debug 

Specify that the executable file is 
to be used by the DDC-1 Svmbolic Ada 
Debugger. 

6.3.3.1 

•nocxceptions 

No ^Kllings of user mtu^vitions will be 
included in the executable file. 

6.3.3.2 

-executable <file-naiiie> 

Specify the name of the executable file. 

6.3.3.3 

-keep 

Peifonn Ada link only, and keeps 
object files. 

6.3.3.4 

•Ubrary <library-iiaine> 

Specify the library to be used in 
die link. 

6.3.3.5 

•log <flle-natiie> 

Specify creation of a log file. 

6.3.3.6 

•niain_atack_size <mitural> 

Default stack size for main program. 

6.3.3.7 

-period <duration> 

Timer resolution. 

6.3.3.8 

-priority <positive> 

Default task priority. 

6.3.3.9 

-profile 

Eiudde ixofiling of the executable program. 

6.3.3.10 

-selective 

EnaUes selective linking. 

6.3.3.11 

-statistics 

Disjday statistics. 

6.3.3.12 

•targetjoptkms <string> 

Spedfy a string which is passed to 
the template without interpretation. 

6.3.3.13 


62 









DACS SiBi SPARC/SmOS nd &m SPARCVScdaiis Native Ada Compiler System, User’s Guide 

Ada Linker 


•t»di._stack_sfaEe <iiidiiral> 
•tasks <iuitural> 

-teiBplate_me <teiiiplatfr4iaiiie> 
HMtiBsar 

•timejdice <dunitiiMi> 
>traoelMck_inode <kcyword> 

•usrjibrary <flle^iiaiiie> 
•svandngs 


Default stack size for all tasks. 6.3.3.14 

Maximum number of tadcs. 6.3.3.IS 

Specify temjdate file for die tai]get link. 6.3.3.16 

IXsdde timer setup in the executdile program. 6.3.3.17 

Task time slicing enabled and time slice value. 6.3.3.18 

EnaUe traceback when a program has 6.3.3.19 

an uiihandled exceptimi. 

libraries or object modules to include in link. 6.3.3.20 
Specify that warnings are displayed. 6.3.3.21 


All options must be emeicd in lowercase, and may be abbreviated to the minimal unique substring 
(e.g. ”-d" is sufficient to denote "-debug"). 


J Ada link Options 

This section describes in detail all Ada link options, including default settings. 


6JJ.1 DEBUG 
Syntax: 

•debi^ 

This tuition specifies that information for the DDC-I Symbolic Ada Debugger is to be generated. 
Mease note that no extra infoimation is included in the code or data generated. 


63JJ NOEXCEFTION TABLES 
Syntax: 


•noexccptions 

This option specifms that no table containing the spellings of user-defined exceptions ^uld 
indud^ in die executable file. Withmit spellings for user-defined exceptions a stack trace for 
unhandled user-defined exoqition will appear with a reference to the unit number in whidi 
exoq)tion is defined and an excq)tion number within the unit 


63 











• • 


DACS Sto SPARC/SunOS aid Sun SPAROSolaiu Native Ada Ompikr System. User's Guide 

Ada Ltadcer 

EXECUTABLE FILENAME 

Syntax: 

•cnciitabie ^Be4ianM> 

Specifies the name of the omput module. Default is tiie name of the main program. 

$ al p 

• Links the su b p ro g r am P and stores the execmaUe program in the file p 
$ al -aaae aqrjexa_dlr/aain p 

- Links tile subprogram P and stores the exeoitable program in the file main in die diiectoiy 
my_cxe_dir. 


6S3A KEEP 
Syntax: 

•keep 

This optkm omtrols whether or not the native link phase is executed, i.e., wfiedier or not control 
is passed to the flexible linker template file, and the imermediate link files are preserved. The 
option specifies to stop Unking before the native link and keep the intermediate Imk files. 


633JS LIBRARY 
Syntax: 

-libniry <iibrary<naiiie> 

This option defines the program library that ccmtains the <unit>nanie>. If <library-naine> is not 
qiecified, the default Ubraiy ^^ified by the environmait variaUe ADA_LIBRARY will be 
selected. 


64 







DACS Son SPARC/SunOS ind Son SPARCySoiaris Native Ada Compiler System. User’s Guide 

Ada Lmker 


6SS£ LOG 
Syntax: 


Tbe option ^edfies if a log file will be produced fimn the fiont end linker. As default, no log 
file is prodn^ Tbe log fUe contains extensive infonnalion on the results of the link. The file 
includes: 

1) An eltdxMatkm older list with an entry f(V each unit included, showing the order in which 
die units wffl be eUboiated. 

2) AH options and dieir actual values. 

3) The fun rusne of die program lilxaty (the cuneitt sublibraiy and its ancestor sublilwaiies). 


63S.7 MAIN STACK SIZE 
Syrttax: 

•mafai_stack_siae <iiatiaral> (Defnilt is 4096) 

The main stack ax tuition specifies the main i»t^ram stack size N in 32 bit words. The range 
of this pansneter is limited physical riKniory size. The range of main stack size is from 0 to 
2,147.483.647 

Configurable Data 

The Ada linker generates the following data rouctures: 

DCD$MP_Stack_Size j N | 

UCD$MP 

UCD$MP 




65 





DACS Sm SPARCySunOS and Sun SPAROSolaris Native Ada Cbmptler System, User's Guide 

Ada Linker 


$ al -awia X024 p 

- Link the pn^nm p with a stack of 4096 bytes. 


iJJJ PERIOD 

Syntax: 

•period <dedniol-auinbcr> (Default is 0.0S) 

The period option specifies the testdution of calls to the Run-Time System routine RTSSTIMER. 
The number apedfin die nurntw of seconds between two successive calls to RTSSTIMER. The 
munber must be widdn the range duiadon’small to 2.0 


Configurable Data 

The Ada Uidoer generates the ftdlowmg 32 bit integer. 


UCD$Tlmer 


absolute integer 


&S3S PRIORITY 
Syntax: 

•priorHy <integer> (Defiuilt is 16) 

The ptlotiQr option spedfies die default prkmty N for task execution. The main program will nm 
at this prkuity, as w^ as tasks wtudi have had no prioriQ^ level defined via pragma PRIORITY. 
The rai^ of prkmties is fiom 1 to 32. 


Ctmflginrabie Data 

The Ada Linker generates the following constant data: 


OCD$Priority 


N 


66 






DACS Sim SPARC/SunOS and Sun SPARCySolaris Native Ada CompUer System, User’s Guide 

Ada Linker 


Exanylc: 

$ ai •priority 8 p 

- Liidc the subprogram P uduch has the main program and tasks running at default priority 

8 . 


PROFILE 

Syntax: 

-profile 

This option specifies that the executaUe program shall allocate memory for pnrfiling informatitm 
ndTbe Bidted with a profiling tihrary. Tte option is used together with the lUXT-I Ada Profiler. 
If probiems with intemqjted system calls thn link with option -notlmer (see Section 6.3.3.17). 
Fhtthetmoie, the profiler timer has a hi^ier resolutian thtn the Ada timer, whidi makes better 
profile infbrinatkm. If the program use task do not link with tuition -notiina’. 


6JJ.11 SELECTIVE LINKING 
Syntax: 

•selective 


Specifies that only those subprograms fiom eadi compilation v^iich are referred to femn other 
subprograms i.e. only those subfmgrams v^ch actually are in the program are linked widiin the 
program, and thereby minimizing die size of the executable program. 


6JJJ2 STATISTICS 
Syntax: 

•statistics 


Specifies that short statistics dull be displayed about how many cmnirilatitHi units included in the 
program and how many dependencies ttey ha^. 


6JJ.13 TARGET OPTIONS 
Syntax: 

•targetjoptions <8tring> 





DACS Sun SPARCTSunOS and Sun SPARQSoUris Native Ada Compiler System. User’s Guide 

Ada Linker 


This option allows the user to specify tar^ t^ons which is passed to the muive linker (Id) 
without interpretatkm. It therefore allows dre user to qxcify mher optior^ than th(»e mentioned 
m thb section. 


$ al -tazgat "-L/uar/loeal/lib" p 

- Links the su b program P and substitutes the macro lemphtte %target_options% by the string 
"-LAist/locaVUb'’. 

This opdan allows any string to be propagated to the resulting command file via die macro 
template %TARGET_0P110NS«. 


TASK STACK SIZE 

Syntax: 

•tasfc_stack_aize <natural> (Default is 1024) 

This option sets the default storage size N in 32 bit words for stacks of all tasks. This value can 
be overridden with a representation clause. 


Configurable Data 


The Ada Linker generates the following data structure: 


UCD$Task Stack Size 



dJJ.15 TASKS 
Sytttax: 

•tasks <iiatural> (default is 128) 

This option qtedfies the maximum number of tasks allowed by the RTS. If specified, N must 
be greater than or equal to zero. 


68 







DACS Sun SPARQSonOS and Sun SPARCySolaiis Nttive Ada GompUer System. User’s Guide 

Ada Ltaker 


CoaH^fvibk Dtta 

For the tada option, the linker genuates die ftdlowing configuraUe data: 


UCD$lfnx_Ta8k8 

0CD$TCB8 


N 



$ al -tuks 3 p 

- Liirit the program p, which has at most 3 tadcs, including the main program. 


dJJJd TEMPLATE 
Syntax: 

-IwnplatejMe <file>nanie> 

This option specifies a tem(date file to use for die native link. The default is to use the file 
named Adajcinplate^xt (dined in the same directory as the Ada linker. See section 6.5 for an 
explanation'of the temfdate file and die flexiUe linker. 


dJJd? NOnMER 
Syntax: 


This option disables timer setup in the executdde program. Specifies that die Ada timer is not set 
tqi. TUs canses dim delays waits forever, and that the t^on -tinie_sUce will not functitm. This 
option is usefol \dien debugging [NOgrams using dbx. Tlie (^Nkm ii also useful when usir^ the 
iprafite option, because the (irofile timer has a hi^ier resolution dian the Ada timer, uiuch gives 
a more detailed profiling infonnadtm. The opdoa can also be used to (nevoit intenuiits at lA) 
opmdons widi Uocknig and odier kerod calls. 


dJJJS TIMESUCE 
Syntax: 

4ine_sHce <clediiial*nniiibcr> 

69 







DACS Sim SPARCVSunOS and Sun SPARCVSoUris Native Ada Onupiler System. User’s Guide 

Ada Linker 


Hie time slice (^Nkm specifies the time slicing period for tasks. 

If specified, it is a decimal taunber of seconds lepresenting the default time slice to be used. If 
not specified, there wifi be no time dicing. The number must be in the range Duration’Small..2.0 
and imist be greater than or equal to die distance between two successive calls to RTSSTIMER. 

Tiine didiqi only milfos to tasks running at e^ial priotity. Because the RTS is a preemptive 
priority scheduler, die Utfiest prtoriQr task will always ran befcHe any lower priority task. Only 
when two or more tasks are running at the same priority is time slicing qpfdied to each task. 

Time dicing is not apfdkable unless taddng is being used. This means that die tasks option must 
be set to at kast 2 for time slice to be efi^ve. 


Configurable Data 


The Ada Linker geimates the following data: 


UCD$Time Slice 


absolute integer 


s 0 -> No time slicing 

/s 0 •> The length of a time slice 


The munber of timer ticks (USD$Hme_Slice) constituting a time_slice is onnputed as 
FTimeSlioe/Periodl 

Example: 

$ al “tioM 0.125 p 

- Specifies tasks of equal priority to be time sliced each eighth of a second. 


TRACEBACK MODE 

Syntax; 

-traccback_iiMKle (never j main | always) (default is main) 

*nus option instructs die excqition handler to produce a stack trace when a program termiiutes 
because of an imhandled excqition. DisaUmg traceback (with never) exclude tracdiack taUes 
fiom the executaUe program. If never is qiecified, the RTS variable UCDSTRACE will be set 
to 0 and no trace will be produced if the program terminates with an unlmndled exoqition. If 
main is specified a trace will be produced if the main program terminates widi an unhandled 
exceptitxL The RTS variable UCDSTRACE will be set to 1. If die always is specified the RTS 
varb^ UCD$TRACE will be set to 2 and a trace will be produced if either the main program 
or a task terminate with an unhandled exceptitm. 


70 






DACS Sun ^ARQSunOS and Sun SPAROSolaris Native Ada Compiler System. User’s CHiide 

Ada Linker 


Conflgunible Data 


UCD$Trace 


absolute integer 


s 0 -> Trace disd^ed 

s 1 -> Trace enabled for main program 

s 2 -> Trace enaUed for main program and tasks 


dJJJO USERUBRARY 
Syntax: 

•usrjibrary <file<nanie> 

The user library q)tion is intended for the specification of libraries or object files whidi should 
contain the usms own object code. 

The user library option is also intended to H^ccify libraries of routines referenced from the Ada 
program via pragma INTERFACE. 


63321 WARNINGS 
Syntax: 

-warnings 

This option specifies that warnings ate displayed if detected by the linker, otherwise they are 
suppressed. Warnings can be goierated when conflicts between target program attributes arid the 
specified opticms are found and when a packr^e has an inconsistent body. 


6A Linker Output 

Tlus chapter describes the results of the linking process. 


Executable File 

Using the default options and die template provided with the system the linking process will result 
in an executaUe file which is ready for execution. This file is named after the main program: 

<mainjprogram_nanie> 


71 







DACS Sun SPARCySunOS and Sun SPARC/Solaris Native Ada C 0 ni[^r System, User’s Guide 

Ada Linker 


6A2, Diagnostic Messages 

Dit^nostic messages bom the Ada Linker are ouqmt to die currem ouqxit file. The messages 
are output in the order they are generated by die linker. 

The linker may issue two kinds of diagnostic messages: warnings and severe errors. 


Warnings 

A warning reports something which does not prevent a successful linking, but whidi might be an 
error. A warning is issued if diere is something wrong with the body unit of a program unit 
which formally does not need a body unit, e.g. if the body unit is invalid or if there is no object 
code container for the body unit. 


6AJJI Severe Errors 

A severe error message reports an error which {Hevents a successful linking. Any inconsistency 
detected by the linker will, for instance, cause a severe error message, e.g. if sc»ne required unit 
does not exist in the litoary or if some time stamps do not agree. 

A unit not marked as invalid in the program library may be reported as being invalid by d» 
linker if there is somethii^ wrong with the unit itself or v^di some of die units it depends on. 


<S.4,2J Return Codes 

The linker set the return code to the following values: 
Error code Description 

0 Success, warnings 

1 Errors 

2 Fatal Error 


Flexible Unker 

The DACS Ada Linker is referred to as a flexible linker because it has been designed to be very 
flexiUe in die way it interfaces to target tools such as assemblers, librarians, and linkers. The 
flexiUe linker can produce a target link in any manner that the user desires, i.e, the linker adapts 
to eadi user’s needs in a simple and straightforward manner. 


72 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing 
the ACVC. The meaning and purpose of these parameters are 
explained in [UG89]. The pareuneter values are presented in two 
tables. The first teUsle lists the values that are defined in terms 
of the maximum input-line length, which is the value for 
$ifAX_IM LEM—also listed here. These values are expressed here as 
Ada strFng aggregates, where "V* represents the maximum input-line 
length. 


Macro Parameter Macro Value 


$MAX_IN_LEN 

126 — Value of V 

$BIG_ID1 

(1..V-1 «> 'A', V »> *1') 

$BIG_ID2 

(1..V-1 «> 'A', V => '2') 

$BIG_ID3 

(1..V/2 «> 'A') & *3' & (1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 => 'A') & '4' & (1..V-1-V/2 => 'A') 

$BIG_INT_LIT 

(1..V-3 => '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 => '0') & "690.0" 

$BIG_STRING1 

'""' & (1..V/2 => 'A') & '""' 

$BIG_STRING2 

& (1..V-1-V/2 *> 'A') & '1' & 

$BIiANKS 

(1..V-20 *> ' ') 


$MAX_LEN_INT_BASED_LITERAI 

& (1..V-5 => 'O') & ''ll:*' 

$MAX_LEN_REAL_BASED_LITERAL 

''16:" & (1..V-7 => '0') & "F.E:" 

$MAX_STRING_LITERAL """ & (1. .V-2 *> 'A') & 


A-1 






The following table contains the values for the remaining 
macro parameters. 


Macro Parameter 


Macro Value 


ACC SIZE 
AU^IMEilT 
COUNT LAST 
DBPAl^ MEM_SIZE 
DEPAULT~‘STOR UNIT 

uefault'sysJkame 

DELTA_bOC 
ENTRY_ADDRESS 
ENTRY_ADDRESS1 
ENTRY_AD0RESS2 
FZELD_LAST 
FZLE_TERMINATOR 
FIXED_NAME 
FLOAT NAME 
F0RN_STRIM6 
FORM_STRING2 

GREATER THAN_DURATION 

greater''than_duration_base last 
greater'’than_float_base_last 
greater'than_float_safe__large 

GREATER'THAN__SHORT_FLOAT_SAFE_IiARGE 

HIGH_PRIORITY 

ILLEGAL_EXTERNAL_FILE_NAME1 

ILLEGAL_EXTERMAL_FILE_NAME2 

inappropriate_line_length 

inappropriate_page_length 

INCLUDE PRAGMAl 


32 

4 

2_147_483_647 

2048*1024 

8 

DACS^SPARC 

2«1.0«E-31 

SYSTEM."-"(16110709180#) 
SYSTEM."-"(16«10709188#; 
SYSTEM."-"(16110709190#) 
35 

I • 

NO_SUCH_FIXED_TYPE 

NO_SUCH_PIXED_TYPE 

MM 


" CANNOT_RESTRICT_FI LE__CAPACITY " 
100000.0 
200000.0 
16#1.0#E+32 
16#5.FFFF_F0#E+31 
16#5.FFFF_F0#E+31 
31 

/NODIRECTORY/FILENAMEl 
/NODIRECTORY/FILENAME2 
-1 
-1 

PRAGMA INCLUDE ("A28006D1.ADA") 


INCLUDE_PRAGMA2 

INTEGER_FIRST 

INTEGER_LAST 

integer_last_plus_i 

INTERFACE_LANGUAGE 

LESS_THAN_DDRATION 

LESS_THAN_DURATION_BASE_FIRST 

LINE_TERMINATOR 

L0W_PRIORITY 

MACHINE_CODE_STATEMENT 

MACHINE__CODE_TYPE 

MANTISSA_DOC 

MAX_DIGITS 

MAX INT 


PRAGMA INCLUDE ("B28006E1.ADA") 
: -2147483648 
: 2147483647 

: 2147483648 

. 

: -75000.0 

: -131073.0 

.11 

• 

: 0 

: NULL; 

: NO_SUCH_TYPE 
: 31 
: 15 

: 2147483647 











IIAX__INT_PmS_l 

NAME 

IIAIIE__LIST 

MAMS SPECXFICATIOMl 


2147483648 

•2147483648 

KO_SUCH_TyPB_AVAILABLE 
DACS SPARC 


/hone/sparcla/ada/test/prevalld/work/X212 OA 


KAME SPECZFICATION2 


/hoae/sparcla/ada/test/prevalid/work/X2120B 


NA1IE_SPECIFICATI0N3 : 

/hone/sparcla/ada/test/prevalid/work/X3119A 


NE6_BASED_INT 

NEW HEN SIZE 

MSW~ST(« UNIT 

NEW SYS NAME 

PA6B_T^MIMATOR 

RECORD_OEFINITION 

RECORO.NANE 

TASK_SIZE 

TASK_ST0RA6E_SIZE 

TICK 

VARIABLE_AODRESS 
VARIABLE_ADDRESS1 
VARIABLE_ADDRESS2 
YOUR PRAGMA 


16#F000000E« 

2097152 

8 

DACS_SPARC 

I I 

NEW INTEGER 

MACHINE_INSTRUCTION 

32 

1024 

2#1.0#E-14 

SYSTEM.(16#10709198#) 
SYSTEM."-"(16#107091A0#) 
SYSTEM.(16#107091A8#) 
INTERFACE SPELLING 


A-3 








APPENDIX B 


COMPILATION SYSTEM OPTIONS 


Th« coapiler options of this Ada inplementation, as described in this 
J^ppendix, are provided by the custoner. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 










LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and 
not to this report. 


B-2 




APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
ia^lenentation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 

package STANDARD is 

type SHORT_INTEGER is range -32_768 .. 32_767; 

type INTEGER is range -2_147_483_648 .. 2_147_483_647; 

type FLOAT is digits 6 

range -16#0.FFFF_FF#E32 .. 16#0.FFFF_FF#E32; 

type LONG_FLOAT is digits 15 

range -16#0.FFFF_FFFF_FFFF_F8#E256 .. 16#0.FFFF_FFFF_FFFF_F8#E256; 
type DURATION is delta 2#1.0#E-14 range -131_072.0 .. 131_071.0; 
end STANDARD; 


C-1 






APP. F - IMPLEMENTATION DEPENDENT CHARACTERISTICS 


This appendix describes the iin(deinentati(Mi dependent characteristics of DACS Sun SPARC/SunOS 
and Sm SPARC/Solaris as required in Appendix F of the Ada Reference Manual 
(ANSVMIL-STD-1815A). 


F.1 ImpicnienUition Dependent Pragmas 

This sectim describes all imfdementation defined pragmas. 


F.1.1 Pragma INTERFACE_SPELLING 

This pragma aOows an Ada {xogram to call a non-Ada program whose name contains characters 
that would be an invalid A^ subprogram id entifie r. This pragma must be used in conjunction 
with pragma INTERFACE, i.e.. pragma INTQtFACE must be ^)ecified for the non-Ada 
subprogram name i»ior to using pragma INTERFACE.SPELLING. 


F.1.1.1 F<n*mat 

The pragma has the format: 

pragma INTERFACE_SPELLING (subprogram name, string literal); 

^riiere the subprogram name is that of one previously given in pragma INTERFACTE and the 
string literal is the exact filing of the interfaced subprogram in its native language. This pragma 
is (Mily required when the subprogram name contains invdid characters for Ada identifiers. 


F.1.1,2 Example 

function ASSEMBLY_MODULE_NAME return INTEGER; 

pragma INTERFACE (AS, ASSEMBLy_MODULE_NAME); 
pragma INTERFACE_SPELLING (ASSEMBLY_MODULE_NAME, 

"Illegal$Ada_Name"); 


F.1,2 Pragma EXTERNAL_NAME 

This pragma allows an Ada (Hogram to expoit the name of an Ada sub[»Dgram so that it can be 


169 








DACS Sun SPARCySunOS and Sim SPARCTSdaris Native Ada Compikr System, User’s Guide 

Inqjlenientaiion DqwKtem Chaiacteristics 


cidkd fiom a non-Ada component. 

F.1J.1 Format 

The pragma has the fimnat: 

pragma EXTER1IAL_NAME (ada entity, string literal) 
adieie ada emity should be die nmne of: 

• A permanent oti|ect. i«. an object placed in the pennanent pool of the compilation unit - such 
ol^ects originate in package spedScatioas and bodies only. 

• A constant object, i.e. an otgect placed in die constant pool of the compilation unit - {dease 
note thm scalar constants embedded in the code, and composite constants are NOT always 
placed in the constant potd, because die constant is not considered constam by die compiler. 

• A subprogram name, i.e. a nme of a su b prog ram defined in this compilation unit - please 
notice diat aqiaraie su b progra m apecifiouions cannot be used, the code for the subprogrun 
MUST be prarent in the compOa^ unit code. 

Ot^ects or subprograms that are local to subprograms or block cannot have extenud names 
associated. The en^ being made extemal Cpublic") MUST be defined in die ccmpilation unit 
itadf. Attempts to name aidties fiom odier compiladon units will be tweeted with a warning. 

The string literal literal is die external name associated the ada emity. The external name riwuld 
the unique, ^lecifying identical spellmgs for differait ada entities will generate errois at compile 
and/or link time, and the reroomibiliQr for this is left to the uso'. Also die user should avoid 
spellings similar to die generated by the compiler. e.g. M_<unit-4io>_<section-ra» and 

odier intenial identifications. 

It is also die responsibility of the user to pieserveAestme register %g2 when/if returning to Ada. 

When an entity in an object die value associated with the symbd will be the lelocataUe address 
of the first byte assigned to die object 


F.1JL2 Example 

This example shows how to export die name of an Ada subprogram and an integer objea to be 
used in a C routine. The C routine is called fimn the Ada program. 

The Ada program: 

package ext is 

var : integer 0; 

pragma extemal_n 2 une (var, "_var_na]ne”); 
procedure outerjproc(a : integer); 

pragma external_name(inner_proc, '’_inner_proc”); 

end; 


170 










DACS Sun SPAROSunOS and Sun SPARCySoiaiis Native Ada Oompikr System, User’s Guide 

bqdementation Dependem Characteristics 


package body ext is 

procedure inner_proc(a : integer) is 
begin 

var :■ var + a; 
end innerjproc; 
end; 

with ext; use ext; 
with report; use report; 
procedure extem_test is 

procedure call_inner_proc(a : integer); 
pragisa interface (c, call_inner_proc); 
begin 

test fEXTERN_TEST",""); 
var 1; 

call_inner_proc(3); 
if var /« 7 then 

failed("inner_proc not call properly'*); 
nd if; 

^sult; 


The C fMOgram: 

extern inner_proc(); 
extern int var^nasie; 
cal l_inner_jproc (in) 
int in; 

I 

var__naaie ■ var_name + in; 
inner_proc(3); 


F2 Inplanentation Depeidcnt Attribi^ 

No imidementation dqrendent attributes are defined. 


FJ PMfcafe SYSTEM 


The package SYSTEM is described in ARM 13.4. 

package SYSTEM is 


type ATORESS is new INTEGER; 
type NAME is (DACS_SPARC); 


SYSTEM_MAME 
STORAGEJUNIT 
MEMORY_SIZE 
MIN iiro 
MAX“lNT 

max3>igits 

MAX MANTISSA 


: constant NAME 
: constant 
: constant 
: constant 
: constant 
: constant 
: constant 


- DACS_SPARC; 

* 8 ; 

- 2048 * 1024; 

- -2_147 483_648; 

- 2_147_483_647; 

- 15 

- 31 


171 





DACS SPARCySunOS and Sun SPARC/Solaris Native Ada Compiler System, User’s Guide 

Implementation Dqiendem Characteri^ics 


FINEJDBLTA : constant 2#1.0#E-31; 

TICK : constant 2#1.0#E-14; 


subtype PRIORITY is IMTEGER range 1..31 
type IHTERFACE_IAMGUAGE is (C, AS); -- 

— Compiler system dependent types: 


subtype Integer_l€ 
sxibtype Natural_16 
subtype Positive_16 

subtype Integer_32 
subtype Natural_32 
subtype Positive_32 

end SYSTBM; 


is short_integer; 
is Integer_16 range 
is Integer_16 range 

is integer; 
is Integer_32 range 
is Integer_32 range 


inplementation dependent 


0..Integer_16'last; 
1..Integer_16'last; 


0..Integer_32'last; 
0..Integer_32'last; 


F.4 Rcprcacntation Cfauiaes 

The repieaentation clauses tluK are accepted are described below. Note that representation 
specifications can be given on derived types as well. 


F.4.1 Lengfii Clause 

Four kinds of length clauses are accepted. 

Siae specifications: 

The size attribute for a type T is acoq)ted in die following cases: 

- If T is a discrete type then the qxcified size must be greater than or equal to the number 
of bits needed to represent a value of the type, and less than or equid to 32. Note that 
vdien the number of bits needed to hold any value of the type is calculated, the range is 
extended to include 0 if necessary, i.e. the range 3..4 cannot be represented in 1 bit, but 
needs 3 bits. 

- If T is a fixed point type, then the specified size must be greater than or equal to the 
smallest number of Ints needed to hold any value of the fixed poim type, and less than 
32 Mts. Note that the Reference Manual pmmits a iquesoitation, \^iere the lower bound 
and the upper bound is not represerttsdile in die ^pe. Thus the type 

type FIX is delta 1.0 range -1.0 .. 7.0; 

is rqiresentaUe in 3 bits. As for discrete types, the number of bits needed for a fixed 
poim type is calculated using the range of the fixed poim type possibly extended to 
bidude 0.0. 

- If T is a floating poim type, an access type or a ta^ type die specified size must be equal 
to the number of bits used to represem values of the t^ per default (floating points: 32 
or 64, access types : 32 bits and task types : 32 Ixts). 


172 







DACS Sun S*ARC/SibiOS nd Sim SPARC/Solttis Native Ada Compiter Systran. User’s Guide 

Imptementation Dependent Chraacteristics 


- If T is a record type the ^Kcified sue must be gretter or equal to the minimal number 
of bits used to represent values of the type per dtfaulL 

• If T is an array ^pe the of the array must be static, i.e. known at compite time and 
the qiecified size must be equal to the minimal number of bits used to represem values 
of the type per default. 

The size given in die length clause win be used when allocating space for values of the Qqie in 
all contexts e.g. as pan of an array or record. For declared objects the size win be rounded to the 
nearest number of l^tes before the objea is aUocated. 


Collcctkm size specifications: 

Using the STORAGE_SIZE attribute on an access type wiU set an upper limit on die total size 
of objects aUocated in die ooUection adocated for the access type. If funher adocation is attempted, 
the exception STORAGEJBRROR is raised. The specified storage size must be less than or eipial 
to INTEGER’LAST 


Task storage size 

Whmi the STORAGE_SI2E attribute is givoi <m a task type, the task stack area wiU be of the 
qiecified size. The specified storage size must be less than or equal to INTEGER’LAST. 


Small specifications 

Any value of the SMALL attribute less than the ^cified delta for the fixed point type can be 
given. 


F.4,2 Enumeration Representation Clauses 

Enumeration iquesentatitm clauses may specify rqitesentations in the range of 
SHORT.INTEGER’FIRST.. SHORT_INTEGER’LAST. An enumeratimi representation clause may 
be combined with a Iragth clause. If an enumeration representation clause has been given for a 
type the re(»eseittational values are considered when the number of bits needed to hold any value 
of the type is evaluated. Thus die type 

type ENUM is (A,B,C); 
for ENUM use (1,2,3); 

needs 3 bits to re(nesent any value of the type. 


173 



DACS Sun SPARC/l^inOS and Sun SPAROS<^s Native Ada Compiler System. User’s Guide 

Implementation Dependem Characteristics 


F.4J Record Representation Clauses 

When component clauses are applied to a record type, the followii^ should be noted: 

- Components can start at any bit boundary. Placing e.g. mm packed arrays on odd bit 
bouni^es will cause costly imfdidt conversion to be generated, however. 

• All values of the omaptment type must be representable within the specified number of 
bits in the component dause. 

- If the omiponeiit type is dther a discrete type or a fixed point type, then the componeru 
is packed into the specified number of bits (see however the restriction in the paragraph 
above). 

- If the componem type is not one of the types spedfied in die paragraph above, the default 
size calculated by the compiler must be given as the dt width. i.e. the comptment must 
be qxdfied as 

component at N range X..X component_type'SIZE - 1 

where N specifies the relative storage unit number (0.1^-) hmn the beginning of the 
record, and X is any bit number. 

- The maximum bit width for components of describe or fixed poim types is 32. 


If the record type contains components wliich are not covered by a component clause, they are 
allocated consecutively after the component with the highest offset specified by a component 
clause. Holes created because of component clauses are not otherwise utilized by the compiler. 

When the omipiler determines the size of a record component the following is taken into account 
in the spedfied order 

. a comporKiit clause 

. a length clause (’SIZE) on the component type 
. a posside pragma PACK on the record type 
. the default size of the component type 


F.4J.1 Alignmoit Clauses 

Alignrnem clauses for records are supported widi the following restrictions: 

• The q)edfied alignment boundary must be 1, 2, 4. 8. or 16. 

• The spedfied alignment must not conflict with the aligranent requirement for the record 
componoits. i.e. an alignment boundary of 4 is not accepted if the record has a component 
of an array type with size 1(X) byt^ (such arrays should be aligned on a 16 byte 
boundary). 


174 





DACS Sun S^ARCySon^ and Sun SPARCySolaris Native Ada Compiler Syston, User’s Guitte 

Implementation Dependent Characteristics 


FJ Names fbr Imfricmentation Dq>endent Compements 
None defined by the oomfriler. 

Address Clauses 

Address dauses are supported for scalar and composite drjects whose size can be determined 
at compite time. Address clauses are not supported for subprograms, padcages. tasks or task 
entries. 


F.7 Unchecked Conversion 

Uhdiecked conversion is rnily allowed between objects of the same "size". However, if scalar 
type has different sizes ^rad^ and unpadted), undiecked conversum between such a type and 
ariother type is accepted if dther the packed or the urq)adced size fits the other type. 


F.8 Input/Output Padcages 

The imfdementaticm supports all requirements of the Ada language and the POSIX standard 
described in document P1003.5 Draft 4.0/WG15-N45. It is an effective interface to the 
SunOS/Solaris file system, aid in the case of text VO. it is also an effective interface to the 
SunOS/Solaris standard input, ^andard output, and standard error streams. 

’This section describes die functional aspects of the imerface to the SunOS/Solaris file system, 
induding the methods of using the interface to take advantage of the file control facilities 
provided. 

The Ada irqMt-output ocmcept as defined in Chapter 14 of the ARM does not cmistitute a 
comfAete furictional specification of the irqMt-mitpot packages. Some aspects of the I/O system are 
twt described at all. with others intenticmi^y left open for implementatioa This sectiem describes 
those sections not covered in the ARM. Please notice that the POSIX standard puts restrictions 
(Ml some of the aqiects not described in Chapter 14 of the ARM. 

The SunOS/Solaris grating syston considers all files to be sequences of bytes. Hies can either 
be accessed sequentiaUy or ranctonily. Files are not stractured into records, but an access routine 
can treat a file as a secjuence of records if it arranges the record level input-ouqwt 

Note that for sequential or text files (Ada files not SunOS/Solaris external files) RESET on a file 
in mode OUT_I%£ will empty the file. Also, a sequential or text file opened as an OUT.FILE 
will be emptied. 


175 



DACS SiBi SPARCySunOS and Sun SPARC/Solaris Native Ada Compiler System. User's Guide 

Impiememation Dependent Chanu^eiistics 


FAl External Files 

An external file b either a SunO^Solaris di^ file, a SunOS/Solaris FIFO (named pipe), a 
SimOS/Solaris pipe, mr any device defined in the SunOS/Solaris diiectoiy. The use of devices sudi 
as a tape drive or communication line may require special access pennissions or have restrictitms. 
If an imqipiopriaie operation is attempted on a device, the USE.ERROR excqtrion is raised. 

External files created within the SunOS/Solaris file system shall exist after the tenninttitm of the 
program that oteated it. and will be accessible fiom other Ada {xogruns. However, pipes and 
temporary files will not exist after program teimination. 

Qearion of a file with the same name as an existing external file will cause the existii^ file to 
be overwritten. 

Qearion of files with mode IN_FILE will cause USE_ERROR to be raised. 

The name parameter to the input-output routines must be a valid SunOS/Solaris file name. If the 
name parameter is empty, thm a temporary file is created in the AisrAmp directory. Temporary 
files are auttMnarically deteted when they are closed 


FA2 File Management 

This section provides useful information for performing file maiugonent functions within an Ada 
program. 

The oidy restrictions in performing Sequential and Direa VO are: 

The maximum size of an object of ELEMENTJTYPE is 2_147_483_647 bits. 

If the size of an object of ELEMENT.TYPE is variable, the maximum size must be 
determinable at the point of instantiatitm from the value of the SIZE attribute. 


The NAME parameter 

The NAME parameter must be a valid SunOS/Solaris path name (unless it is the empty string). 
If any directory in die path nanoe is inaccessible, a USE.ERROR or a NAME_ERROR is raised. 

The SunOS/Solaris names "stdin", "stdout", and "stderr" can be used with TEXT_IO.OPEN. No 
fdiysical opening of the external fife is performed and the internal Ada file will be associated with 
the already open external file. These names have no significance for other lA) packages. 

Temporary files (NAME = null string) are created using tmpname(3) and are deleted whoi 
OXXSED. Abnormal iMogram termination may leave traiporary files in existoice. The name 
fimetion will return the full name of a temporary file when it exists. 




DACS Sun SPARC/SunOS «id Sun SPARC/Sdaris Native Ada Ctmipiler System. User’s Guide 

Implementation Dependent Characteristics 


The FORM parameter 

The Foim parameter, as described below, is applicable to DIRECr_IO, SEQUENTIALJO and 
TEXT_IO operations. The value of the Form parameter ftnr Ada I/O shall be a character string. 
The value of the character string shall be a series of fields separated by commas. Each field shall 
consist of optional separators, followed by a field name identifier, followed by optional separators, 
followed by "so", followed by optional separators, foUowed a field value, followed by optional 
separators. The allowed values for the field names and the coiiesponding field values are 
d^ribed below. All field names and field values are case-insensitive. 


The fidlowing BNF describes the symax of the FORM parameter 


form 
. fields 

rights 

access 

access.underscor 

append 

blocking 

terminal_ii^t 

fifo 

posix_file_descriptor 


[lield {. field)*l 

rights I append I blocking I 
teiminai.input i fifo I 
posix_file_descriptor 

::= OWNER I GROUP I WORLD => 
access (.access_underscor) 

;:= READ 1 WRITE I EXECUTE I NONE 

..READ I .WRITE I .EXECUTE I .NONE 

::= APPEND => YES I NO 

::= BLOCKING => TASKS I PROGRAM 

::= TERMINAL.INPUT => LINES I CHARACTERS 

FIFO => YES I NO 

::= POSIX.HLE.DESCRIPTOR => 2 


The FORM parameter is used to ccmtiol the following ; 

• Rle ownership: 

Access rights to a file is ctmtiolled by the following field names "OWNER", "GROUP" 
and "WORLD". The field values are "READ". "WRITE", "EXECUTE" and "NONE" 
or ai^ combination of the previously listed values separated by underscores. The access 
ri^ts field iiames are apfdicable to TEXT.IO, DIRECT.IO and SEQUENTIAL.IO. The 
default value is OWNER => READ.WRITE, GROUP => READ.WRITE and WORLD 
=> READ.WRITE. The actual access rights on a created file wiU be the default value 
subtracted the value of the environment variable umask. 


177 




DACS Sun SPARC/SunOS and Sun SPARC/Sdaris Native Ada Compikr System. User’s Guide 

Imi^tenientation Dependem Chaiacteristics 


Example 

To make a file readable and wiitaUe by the owner only, die Form parameter should look 
someditag like ttiis: 


"Owner s>fea(Lwrite, Woild=> none. Gioup=>none" 


If one m mme of die field names are missing die default value is used. The pennission 
field is evabiaied in left-to-rigitt order. An ambiguity may arise with a Form parameter 
of the following: 


"Owner=!:Aead_Execute_None_WriteJRead" 


In this instance, using the left-to-ri^ evaluation order, the "None” field will essentially 
reset die pennissions to mme and this examfde would have the access rights WRITE and 
READ. 

- Appending to a file: 

^{pending to a file is achieved by uang the field name "AIT’END" and (me of the two 
fi^ values "YES" or "NO". The default value is "NO”. "Append" is allowed widi 
both TEXT_10 and SEQUENTIAL.IO. The effect of appending to a file is that all 
output to that file is written to the end of die named external file. This field may only 
be used with the "OPEN" (^ration, using the field name "AITEND” in connection with 
a "QftEATE" operation shall raise USE_ERROR. Furthermore, a USE.ERROR is raised 
if the specified file is a terminal device or another device. 


Example 

To append to a file, one would write: 


"Append *> Yes" 


- Blotddng vs. non-blo(ddng I/O: 

The Uocking field name is "Blotddng” and tte field values are "TASKS" and 
"PROGRAM". The default value is "PROGRAM". "Blocking=>Tasks" causes the 
calling tmk, but no others, to wait for the completitm of an I/O operation. 
"B]ockii^s>program" causes the all tarics within die program to wait for the ccunpletion 
of the I/O operatitm. The blocking mechanism is applicable to TEXTJO, DIRECTJO 
and SEQUQ^mAL_IO. UNIX does not allow die support of "BL0CK1NG=>TASKS" 
currently. 

- How characters are read fiom die keyboard: 

The field name is "TERMINAL.INPUT" and the field value is either "LINES" or 







DACS Son SPARC/SunOS nd Sim SPARC/SoUiis Nttive Ada Com{^r System, User’s Guide 

Imfdememadon Dependou Characteristics 


"OHARACTERS". The effea of the field value Tenninal.input => Characters" is that 
chuacters are read in a noncanooicai fariikm with Minimum_coum=l'. meaning one 
character at a time and Time^O.O otxresponding to that the read opoatkm is not satisfied 
andl MBntanum_Goont characters are r^ved. If die field value TJNES" is used the 
chara cters are read one line at a time in canonical mode. The defailt value is Lines. 
’TTBRMINAL.INPUT" has no effect if die specified file is not already open or if the file 
is not open on a terminal. It is pennitted for the same terminal device to be tqiened for 
input in both modes as separate Ada file objects, hi dds case, no user input diaracters 
sb^ be read from t he input device without an explidt iiqiut operation tm one of the file 
objeds. The *TERMINAL_INFUT" mechanism is only tqiidicable to TEXT_IO. 

- Creation of FIFO files: 

The field name is "Fifb" and the field value is dther "YES" or "NO". "FIFO => YES" 
means that die file shall be a luoned FIFO file. The default value is "No". 

For use whh TEXTJIA), the "Hfo" field is only allowed with the Create operation. If 
used in connecdon with an open operation an USEJERROR is raised. 

For SEQUENTIAL_10. the FIFO medianism is applicaUe for both the Create and Open 
operation. 

In connection with SEQUENTIAL_IO, an additional fidd name "0_Ni:ffiLAY" is used. 
The fidd values allowed for "0_NDELAY" are "YES" and ’NO". Default is "NO". 
The "OJNDELAY" fidd name is provided to allow waiting or immediate return. If. for 
exan{de, the following tom parameter is given: 


"Fifo=>Ycs, 0_Ndday=>Yes" 


then waiting is performed until ccmidetion of the operation. The "O.Ndelay" field name 
only has meaning in amnection with the FIFO facility and is otherwise ignored. 

- Access to C^ien POSDC files: 

The fidd name is "POSIX_FUe_Descriptor". The fidd value is the character string "2" 
Driiich denotes the stderr file. Any other fidd value will result in USEJERROR being 
raised. The Name parameter provides the value whidi will be returned by subsequent 
usage of the Name function. The operatirm does not change tiie state of tiie file. 
During tile period that the Ada file is opoi, tiie result of any file operations on tiie file 
descriptor are undefined. Note that this is a method to malm stderr accessible from an 
Ada program. 


File Access 

The foUowing guidelines should be observed when performing file I/O operations: 

At a given instant, any number of files in an Ada program can be associated with 
correqionding extenud files. 


179 






DACS Sun ^ARC/SunOS and Sun SPARCySdaris Native Ada Compiler System. User’s Gukte 

Imidemeiitatum Dependem Characteristics 


When diaring files between programs, it is the leqxmsibiliQ' of the programmer to determine 
die effects of sharing files. 

The RESET and OPEN (operations to files with mode OUT_pILE will empty the contents of 
the file in SEQUENTIALJO and TEXTJO. 

Hies can be interduuiged between SEQUENTIALJO and DIRECT JO without any q)ecial 
openoions if the files ate of the same object type. 


FA3 Biilferring 

The Ada I/O system provides buffering in additi<m to the buffering provided by SunOS/Solaris. 
The Ada TEXTJO pacicages will flush all (Mtput to the operating system under the f(^owing 
circumstances: 

1. The device is a termirud device and an end of line, end of page, or end of file has 
occurred. 

2. The device is a terminal device and the same Ada program makes an Ada TEXTJO 
irqMt request or another file object rqnesenting the same device. 


Please refer to ^rpendix E (Root library Support) for die full specifications of all I/O packages. 


F,9 Machine Code Insertions 

Cunendy nuKhine cocte insertions ate not supported. 


180 








