AD-A265 43<^ntation PAGE 


Form Appn)\».<i ' 
OPM No. 0704-01Ba 


(A1 


10 IMft btMn Of any »tm Mpod ot ti» ooliction of Hormotion. «>eiudffiQ lugoMioro tof roducino 9 »« birdoo. to ^Nmfun^on 

2^ S JoHinon Otv« Highwoy, SoA* 1 ^. Arfnoton. VA 222Q2'4302. tnd to tn» OHk» oI InlormAiMn «a 0 RooUMory Mton Oftiot at 


Marv^mtm ana ouogov Tv^kn* ^V4t, Ir^/s/VW- 


1. AGENCY USE ONLY (Laavo Blank) 2. REPORT DATE 3 I^EPORT TYPE AND DATES COVERED 

Final: 18 Sep 92 

4. TITLE AND SUBTITLE 

Validation Summary Report: U S. NAVY. Ada/M, Version 4.5 (/OPTIMIZE), VAX 
8550/8600/8650 (Cluster) (host) => VHSIC Processor Module (VPM) AN/AYK-14 
(Bare Board) (target). 920918S1.11273 

5 FUNDING NUMBERS 

6. AUTHOR(S) 

National Institute of Standards and Technology 

Gaithersburg, MD 

USA 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

National Institute of Standards and Technology 

National Computer Systems Laboratory 

Bldg. 255, Rm A266 

Gaithersburg, MD 20899 USA 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

NIST92USN500_4_1.11 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESSEES) 

Ada Joint Program Office 

United States Department of Defense 11 I 1 1 . 

Pentagon, RM 3E114 PI 

Washington, D.C. 20301-3081 1 t ^ 

_____ HIM n tQQT ^ ■ 

10. SPONSORlNGAfONITORlNG AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES -■ ■ 

O A 

12a. OISTRI8UTION/AVAILABIUTY STATEMENT 

Approved for public release: distribution unlimited. 

12b DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

U.S. NAVY, Ada/M, Version 4.5 (/OPTIMIZE), VAX 8550/8600/8650 (Cluster), (running VAX/VMS Version 5.3) (host) to 
VHSIC Processor Module (VPM) AN/AYK-14 (Bare Board) (target), ACVC 1.11 

9S 0 - '■ . ^ llllilliii 

14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 

Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A. AJPO. 

1? NUMBER OF PAGES 

16. PRICE CODE 

17. SECURITY CLASSIFICATION 18. SECURITY CUSSIFICATION 10. SECURITY CLASSIFICATION 

OF REPORT OF ABSTRACT 

UNCLASSIFIED UNCLASSIFED UNCLASSIFIED 

20 UMITAT'iON OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 208, (Rev. 2-80) 
Prescribod by ANSI Std. 230-128 


















AVF Control Number: NIST92USN500_4_1.11 
DATE COMPLETED 

BEFORE ON-SITE: 1992-08-21 
AFTER ON-SITE: 1992-09-18 
REVISIONS: 1992-10-27 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 920918S1.11273 
U.S. NAVY 

- Ada/M, Version 4.5 (/OPTIMIZE) 

VAX 8550/8600/8650 (Cluster) => VHSIC Processor Module (VPM) 

AN/AYK-14 (Bare Board) 


Prepared By: 

Software Standards Validation Group 
National Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 










Accesio:) For 


NTIS CRA&t 


Ui.Uf; !0'j''ced 
Juititic.Htion 


By . 

Dr.t. ib-.ition / 


.AvaMjb.iiiy C.ij.'ies 


Aval cii.cJ / O' 

Dist 


DQ 








AVF Control Number: NIST92USN500 4 1.11 


Certificate Information 


The following Ada implementation was tested and determined to pass 
ACVC 1.11. Testing was completed on September 18, 1992. 

Compiler Name and Version: Ada/M, Version 4.5 (/OPTIMIZE) 

Host Computer System: VAX 8550/8600/8650 (Cluster), 

running VAX/VMS Version 5.3 

Target Computer System: VHSIC Processor Module (VPM) AN/AYK- 

14 (Bare Board) 

A more detailed description of this Ada implementation is found in 
section 3.1 of this report. 

As a result of this validation eff'.rt. Validation Certificate 
920918S1.11273 is awarded to U.S. NAVY. This certificate expires 
on 2 years after ANSI/MIL-STD“1815B is approved by ANSI. 

This report has been reviewed and is approved. 



Ada Validatior 
Dr. David K. 

Chief, Information Systems 
Engineering Division (ISED) 




Facility 


ilidal 

Mr. L. Arn6^ Johnson 
Manager, Software Standards 
Validation Group 


Computer Systems Laboratory (CLS) 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, MD 20899 


. ,_ 

^tion Organization 




Ada Vs— . ^ ^ 

Director ,Mcbmputer & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 






DECIABATIOK OF COKFOKHKKCF 

The following declaration of conformance was supplied by the 
customer. 


DECLASATZOK OF COKFOSMAKCD 


Customer: U.S. NAVY 

Certificate Awardee: U-S. navy 

Ada Validation Facility: National Institute of standards and 

Technology 

CoT^uter Systems Laboratory (CSL; 
Software Validation Group 
Building 225, Room A266 
Gaithersburg, Maryland 20899 

ACVC Version; 1.11 


Ada Implementation: 

Compiler Name and Version: Ada/M, Version 4.5 (/OPTIMIZE) 

Host Computer System; VAX 8550/8600/8650 (Cluster), 

running VAX/VMS Version 5.3 

Target Computer System; VHSIC Processor Module (VPK) AN/AYK- 

14 (Bare Board) 

Declaration: 

I the undersigned, declare that I have no )cnowledge of deliberate 
deviations from the Ada Language standard ANSI/MIL-STD*1815A ISO 
8652-1987 in the implementation listed above. 



Certificate AVafdee Signature Date 

Company U.S. Navy 

Titi« 









TABLE OF CONTENTS 


CHAPTER 1.1-1 

INTRODUCTION . 1-1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .... 1-1 

1.2 REFERENCES.1-1 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2.2-1 

IMPLEMENTATION DEPENDENCIES . 2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3.3-1 

PROCESSING INFORMATION . 3-1 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A.A-1 

MACRO PARAMETERS. A-1 

APPENDIX B.B-1 

COMPILATION SYSTEM OPTIONS . B-1 

LINKER OPTIONS . B-2 

APPENDIX C.C-1 

APPENDIX F OF THE Ada STANDARD.C-1 


* 




























CHAPTER 1 


INTRODUCTION 


The Ada inplexnentation described above was tested according to the 
Ada Validation Procedures [ProSO] against the Ada Standard [Ada83] 
using the current Ada Compiler Validation Capability (ACVC). This 
Validation Summary Report (VSR) gives an account of the testing of 
this Ada implementation. For any technical terms used in this 
report, the reader is referred to [Pro90]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMHARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure of 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U-S.C. #552). The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the subject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 


Ada Validation Organization 
Computer and Software Engineering Division 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311-1772 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


1-1 








[Pro90] Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide . 21 June 
1989, 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, D, E, and L. The first letter of a test 
name identifies the class to which it belongs. Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK_FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECK_FILE is used to check the contents 
of text files written by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. If these units are not 
operating correctly, validation testing is discontinued. Class B 
tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled 
and the resulting compilation listing is examined to verify that 
all violations of the Ada Standard are detected. Some of the class 
B tests contain legal Ada code which roust not be flagged illegal by 
the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values — for example, the 
largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is.produced by 


1-2 










the AVF. This customization consists of making the modifications 
described in the preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [UG89]). 

In order to pass an ACVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to 
be added to a given host and target computer 
system to allow transformation of Ada programs 
into executable form and execution thereof. 

The means for testing compliance of Ada 
implementations. Validation consisting of the 
test suite, the support programs, the ACVC 
Capability user's guide and the template for 
the validation summary (ACVC) report. 

Ada An Ada compiler with its host computer system and 

Implementation its target computer system. 

Ada The part of the certification body which carries 

Validation out the procedures required to establish the 

Facility (AVF) compliance of an Ada implementation. 

Ada The part of the certification body that provides 

Validation technical guidance for operations of the Ada 
Organization certification system. 

(AVO) 

Compliance of The ability of the implementation to pass an ACVC 
an Ada version. 

Implementation 

Computer A functional unit, consisting of one or more 

System computers and associated software, that uses 

common storage for all or part of a program and 
also for all or part of the data necessary for 
the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including 
arithmetic operations and logic operations; and 
that can execute programs that modify themselves 
during execution. A computer system may be a 
stand-alone unit or may consist of several 
inter-connected units. 


Ada Compiler 
Validation 
Capability 
(ACVC) 


1-3 









Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 


Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of 
all requirements specified. 

An individual or corporate entity who enters into 
an agreement with an AVF which specifies the terms 
and conditions for AVF services (of any kind) to 
be performed. 

A formal statement from a customer assuring that 
conformity is realized or attainable on the Ada 
implementation for which validation status is 
realized. 

A computer system where Ada source programs are 
transformed into executable form. 

A test that contains one or more test objectives 
found to be irrelevant for the given Ada 
implementation. 

Software that controls the execution of programs 
and that provides services such as resource 
allocation, scheduling, input/output control, 
and data management. Usually, operating systems 
are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada 
programs are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated 
successfully either by AVF testing or by 
registration [Pro90). 

The process of checking the conformity of an Ada 
compiler to the Ada programming language and of 
issuing a certificate for this implementation. 

A test found to be incorrect and not used in 
conformity testing. A test may be incorrect 
because it has an invalid test objective, fails 
to meet its test objective, or contains erroneous 
or illegal use of the Ada programming language. 


1-4 







CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Some tests are withdrawn by the AVO from the ACVC because they do 
not conform to the Ada Standard. The following 95 tests had been 
withdrawn by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for 
this list of withdrawn tests is 91-08-02. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are 
irrelevant for a given Ada implementation. The inapplicability 
criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Issues and commonly referenced in the 
format Al-dddd. For this implementation, the following tests were 
inapplicable for the reasons indicated; references to Ada Issues 
are included as appropriate. 

The following 327 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113C..Y 

(23 

tests) 

C35705C..Y 

(23 

tests) 

C35706C..Y 

(23 

tests) 

C35707C..Y 

(23 

tests) 

C35708C..Y 

(23 

tests) 

C35802C..Z 

(24 

tests) 


2-1 



C^52,1C..Y (23 tests) 
C,j 421C..Y (23 tests) 
C45524C..Z (24 tests) 
C45641C..Y (23 tests) 


C45321C..Y (23 tests) 
C45521C..Z (24 tests) 
r:4562ic,.z (24 tests) 
C46012C..Z (24 tests) 


The following 21 tests check for the predefined type SHORT_INTEGER; 
for this implementation, there is no such type; 


C35404B 

B36105C 

C45231B 

C45304B 

C45411B 

C45412B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

C55B07B 

B55B09D 

BB6001V 

C86006D 


CD7101E 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a 
predefined integer type with a name other than INTEGER, 
LONG_INTEGER, or SHORT_INTEGER; for this implementation, there is 
no such type. 


C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SHORT_FLOAT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
LONG_FLOAT; for this implementation, there is no such type. 

C35713D and B860012 check for a predefined floating-point type with 
a name other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for 
this implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types and the results 
of various floating-point operations lie outside the range of the 
base type; for this implementation, MACHINE_OVERFLOWS is TRUE. 

D64005F uses 10 levels of recursive procedure calls nesting; this 
level of nesting for procedure calls exceeds the capacity of the 
compiler. 

D64005G uses 17 levels of recursive procedure calls nesting; this 
test exceeds the linkable size of i28KBytes. 


B86001Y uses the name of a predefined fixed-point type other than 
DURATION; for this implementation, there is no such type. 

CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 


2-2 







CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
implementation does not support such sizes. 

AE2101C uses instantiations of package SEQUENTIAL__IO with 
unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this 
compiler. 

AE2101H uses instantiations of package DIRECT_IO with unconstrained 
array types and record types with discriminants without defaults; 
these instantiations are rejected by this compiler. 

The following 264 tests check operations on sequential, text, and 
direct access files; this implementation does not support external 
files: 


CE2102A. 

.C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y 

(12) 

CE2103C. 

.D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A.,B 

(2) 

CE2107A. 

.H 

(8) 

CE2107L 


CE2108A..H 

(8) 

CE2109A..C 

(3) 

CE2110A. 

.D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A..B 

(2) 

CE2201A. 

.C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2203A 


CE2204A. 

.D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A. 

.C 

(3) 

EE2401D 


Cr2401E..F 

(2) 

EE2401G 


CE2401H. 

.L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 



CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A..B 

(2) 

CE2410A. 

.B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J. 

.K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 



CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A. 

.B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 



CE3119A 


EE3203A 


EE3204A 


CE3207A 



CE3208A 


CE3301A 


EE3301B 


CE3302A 



CE3304A 


CE3305A 


CE3401A 


CE3402A 



EE3402B 


CE3402C..D 

(2) 

CE3403A..C 

(3) 

CE3403E. 

.F 

(2) 

CE3404B. .D 

(3) 

CE3405A 


EE3405B 


CE3406C. 

.D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 



CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C. 

.E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 



EE3412C 


CE3413A..C 

(3) 

CE3414A 


CE3602A. 

.D 

(4) 

CE3603A 


CE3604A..B 

(2) 

CE3605A..E 

(5) 

CE3606A. 

.B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 

(3) 

CE3705A..E 

(5) 

CE3706D 



CE3706F..G 

(2) 

CE3804A..P 

(16) 

CE3805A..B 

(2) 

CE3806A, 

.B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3904A..B 

(2) 

CE3905A. 

.C 

(3) 

CE3905L 


CE3906A..C 

(3) 

CE3906E..F 

(2) 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 44 tests. 


2-3 









The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in 
the way expected by the original tests. 


B22003A 

B22004A 

B23004A 

B24005A 

B24005B 

B28003A 

B33201C 

B33202C 

B33203C 

B33301B 

B37106A 

B37301I 

B38003A 

B38003B 

B38009A 

B38009B 

B44001A 

B44004A 

B54A01L 

B55A01A 

B61005A 

B85008G 

B85008H 

B95063A 

B97103E 

BB1006B 

BC1102A 

BC1109A 

BC1109B 

BC1109C 

BC1109D 

BC1201F 

BC1201G 

BC1201H 

BC1201I 

BC1201J 

BC1201L 

BC3013A 

BE2210A 

BE2413A 



C830^DC and 

C86007A were graded 

passed by 

Test Modification as 

directed by 

the AVO. 

These tests were 

modified by 

inserting 


"PRAGMA ELABORATE (REPORT);" before the package declarations at 
lines 13 and 11, respectively. Without the pragma, the packages 
may be elaborated prior to package Report's body, and thus the 
packages' calls to function REPORT.IDENT_INT at lines 14 and 13, 
respectively, will raise PROGRAM_ERROR. 

C34005P and C34005S were graded passed by Test Modification as 
directed by the AVO. These tests contain expressions of the form 
"I - X'FIRST + Y'FIRST", where X and Y are of an array type with a 
lower bound of INTEGER'FIRST; this implementation recognizes that 
"X'FIRST + Y'FIRST’ is a loop invariant and so evaluates this part 
of the expression separately, which raises NUMERIC_ERROR. These 
tests were modified by inserting parens to force a different order 
of evaluation (i.p., to force the subtraction to be evaluated 
first) at lines 187 and 262/263, respectively; those modified lines 


[C34005P, line 187) 

IF NOT EQUAL (X (I), Y ((I - X'FIRST) + Y'FIRST)) THEN 

[C34005S, lines 261..4 (only 262 & 263 were modified)] 

IF NOT EQUAL (X (I, J), 

Y ((I - X'FIRST) + Y'FIRST, 

(J - X'FIRST(2)) + 

Y'FIRST(2))) THEN 


2-4 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is 
described adequately by the information given in the initial pages 
of this report. 

For a point of contact for technical infojrmation about this Ada 
implementation system, see: 

Mr. Christopher T. Geyer 

Fleet Combat Directions Systems Support Activity 
Code 81, Room 30ID 
200 Catalina Blvd. 

San Diego, California 92147 
619-553-9447 


For a point of contact for sales information about this Ada 
implementation system, see: 

NOT APPLICABLE FOR THIS IMPLEMENTATION 

Testing of this Ada implementation was conducted at the customer's 
site by a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro90]. 

For all processed tests (inapplicable and applicable}, a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were 
withdrawn because of test errors (item b; see section 2.1), those 
that require a floating-point precision that exceeds the 
implementation's maximum precision (item e; see section 2,2), and 
those that depend on the support of a file system — if none is 
supported (item d). All tests passed, except those that are listed 


3-1 








in sections 2.1 and 2.2 (counted in items b and f, below). 


a) Total Number of Applicable Tests 3428 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 647 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 0 


f) Total Number of Inapplicable Tests 647 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a-fb+f) 

When this implementation was tested, the tests listed in section 
2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 
1.3) was taken on-site by the validation team for processing. The 
contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded onto the host computer, the full 
set of tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system and 
executed on the target computer system. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation team. See Appendix B for 
a complete listing of the processing options for this 
implementation. It also indicates the default options. The 
options invoked explicitly for validation testing during this test 
were: 


/SUMMARY /OPTIMIZE /SOURCE /OUT=<filename> 

The options invoked by default for validation testing during this 
test were: 

NO_MACHINE_CODE NO__ATTRIBUTE NO_CROSS_REFERE3<CE 

N0_DIAGNOSTICS NO_NOTES PRIVATE LIST CONTAINER GENERATION 
CODE ON_WARNING NO_MEASURE DEBUG CHECKS NO_EXECUTIVE 
NO_RfE_ONLY TRACE_BACK 

Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. Selected 
listings examined on-site by the validation team were also 
archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for 
customizing the ACVC. The meaning and purpose of these 
parameters are explained in [UG89]. The parameter values are 
presented in two tables. The first table lists the values 
that are defined in terms of the maximum input-line length, 
which is I the value for $MAX_IN_LEN—also listed here. 
These values are expressed here as Ada string aggregates, 
where "V represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 120 

$BIG_ID1 (1..V-1 => 'A', V «?> '1') 

$BIG_ID2 (1..V-1 => 'A', V => '2') 

$BIG_ID3 {1..V/2 => 'A') & '3" & (1..V-1-V/2 => 'A') 

$BIG_ID4 (1..V/2 => 'AM & '4' & (1..V-1-V/2 *> 'AM 

$BIG_INT_LIT {1..V-3 => '0') & «298" 

$BIG_REAL_LIT (1..V-5 => '0') & "690.0” 

$BIG_STRING1 '"' & (l.,V/2 *> 'A') & '”' 

$BIG_STRING2 '"' & (1..V-l-V/2 => 'A') & '1' & '"' 

$BLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BAS ED_LITERAL 

"2:" & (1..V-5 *> '0') & "111” 

$MAX_LEN_REAL BASED_LITERAL 

”16:" & (1..V-7 *> '0') & "F.E:” 

$MAX_STRING__LITERAL '”' & (l.,V-2 »> 'A') & '”' 


A-1 









The following table contains the values for the remaining 
macro parameters. 

Macro Parameter Macro Value 


$ACC_SIZE 

$ALIGNMENT 

$COUNT_LAST 

$DEFAULT_MEM_SIZE 

$DEFAULT_STOR_UNIT 

$DEFAULT_SYS_NAME 

$DELTA_DOC 

$ENTRy_ADDRESS 

$ENTRY_ADDRESS1 

$ENTRY_ADDRESS2 

$FIELD_LAST 

$FILE_TERMINATOR 

$FIXED_NAME 

$FLOAT_NAME 

$FORM_STRING 

$F0RM__STRING2 

$GREATER_TJlAN_DURATION 

$GREATER THAN DURATION BASE 


16 

4 

32767 

65_536 

16 

ANAYK14 

2 # 0 . 0000 _ 0000_0000 0000 0000_0 
000 _ 0000 _ 001 # 

16#0800# 

16#1800# 

16#2800# 

32767 
/ ! 

NO_SUCH_TYPE 

NO_SUCH__TYPE 

till 

« CANNOT_RESTRICT_FI LE_CAPACITY'' 

131071.5 

lST 131073.0 


$GREATER_THAN_FLOAT_BASE_LAST 7.5E+7 5 

$GREATER_THAN_FLOAT_SAFE_LARGE 7.5E+75 

$GREATER_THAN__SHORT_FLOAT_SAFE_LARGE 0. OEO 


$HIGH PRIORITY 


15 


A--2 








A-3 






$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 
$TASK_SIZE 
$TASK_STORAGE_SIZE 
$TICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR_PRAGMA 


X3119A 

16#FFFFFFFE# 

65_536 

16 

ANUYK44 

ASCII.FF 

RECORD value : signed_byte; END 
RECORD; 

signed_byte_value 

32 

2048 

0.00003125 

16#0020# 

16#0021# 

16#0023# 

EXECUTIVE 



APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically 
noted otherwise, references in this appendix are to compiler 
documentation and not to this report. 


B-1 





Version 3,5 Ada/M PSE Handbook 

29 March 1991 

--- 

I Option Function | 

---- 

I 

I EXECUTIVE Enables pragma EXECUTIVE and allows 

I visibility to units which have been 

I compiled with the RTE ONLY option. 

I Default; N0_EXECUTIVE'“ 

I MEASURE Generates code to monitor execution 

1 frequency at the subprogram level for 

the current unit. Default: NO_MEASURE 

I NO__CHECKS NO_CHECKS suppresses all run-time 


error checking. CHECKS provides 
run-time error checking. 

Default; CHECKS 

NO_CODE_ON_WAR NING 

NO__CODE_ON_WARNING means no code is 
generated when there is a diagnostic 
of severity WARNING or higher. 
CODE__ON_WARNING generates code 
only if there are no diagnostics 
of a severity higher than WARNING. 
Default; CODE_ON_WARNING 

N0_C0NTAINER GENERATION 

N0_C0NTAINER_GENERATI0N means that no 
container is^produced even if there 
are no diagnostics. 
CONTAINER^GENERATION produces a 
container’”if diagnostic serverity 
permits. 

Default; CONTAINER GENERATION 


Table F-4a - Special Processing Options 


P-56 


P.14 Compiler Options 





Ada/M PSE Handbook Version 3.5 

29 March 1991 

^ - + 

I Option Function 1 

+ - + 

1 I 

I NO_DEBUG If NO_DEBUG is specified, only that | 

I information needed to link, export j 


and execute the current unit is 
included in the compiler output. 

With the DEBUG option in effect, 
internal representations and 
additional symbolic information are 
stored in the container. 

Default: DEBUG 

NO_TRACE_BACK Disables the location of source 
” exceptions that are not handled by 

built-in exception handlers. 

Default: TRACE^BACK 

OPTIMIZE Enables global optimizations in 

accordance with the optimization 
pragmas specified in the source 
program. If the pragma OPTIMIZE is 
not included, the optimizations 
emphasize TIME over SPACE. 

When NO^OPTIMIZE is in effect, no 
global optimizations are performed, 
regardless of the pragmas specified. 
Default: NO_OPTIMIZE 

RTE_ONLy Restricts visibility of this unit 

only to those units compiled with 
the EXECUTIVE option. 

Default: NO RTE ONLY 


•f-+ 

Table F-5b - Special Processing Options (Continued) 


F.14 Compiler Options 


F-57 













Version 3.5 
29 March 1991 


Ada/M PSE Handbook 


+--f 

I Option Function I 

+--► 

I I 

I ATTRIBUTE Produces a Symbol Attribute Listing. 1 

I (Produces an attribute cross-reference j 

1 listing when both ATTRIBUTE and 1 

I CROSS_REFERENCE are specified.) I 

1 Default: NO ATTRIBUTE. 1 


CROSS_REFERENCE Produces a Cross-Reference Listing. 

(Produces an attribute cross-reference 
listing when both ATTRIBUTE and 
CROSS_REFERENCE are Specified.) 

Default: NO_CROSS_REFERENCE. 

DIAGNOSTICS Produces a Diagnostic Summary Listing. 

Default: NO_DIAGNOSTICS. 

MACHINE_CODE Produces a Machine Code Listing if 

code is generated. Code is generated 
when CONTAINER_GENERATION option is 
in effect and (1) there are no 
diagnostics of severity ERROR, SYSTEM, 
or FATAL, and/or (2) NO_CODE_ON_WARNING 
option is in effect and~there are no 
diagnostics of severity higher than 
NOTE. A diagnostic of severity NOTE 
is reported when a Machine Code 
Listing is requested and no code is 
generated. OCTAL is an additional 
option that may be used with 
MACHINE_CODE to output ocatal values 
on the Tisting instead of hex values. 
Default: NO MACHINE CODE. 


1 NOTES Includes diagnostics of NOTE severity 

1 level in the Source Listing. 

I Default; NO_NOTES. 

1 SOURCE Produces listing of Ada source 

1 statements. Default: NO_SOURCE. 

j SUMMARY Produces a Summary Listing; always 

j produced when there are errors in the 

I compilation. Default: NO__SUMMARY. 

+-+ 


Table r-6 - Ada/M Listing Control Options 


F-58 


F.14 Compiler Options 











Ada/M PSE Handbook 


Version 3.5 
29 March 1991 


Option 

Function 

MSG 

Sends error messages and the 

Diagnostic Summary Listing to the 
file specified. The default is to 
send error messages and the Diagnostic 
Summary Listing to Message Output 
(usually the terminal). 

OUT 

Sends all selected listings to a 
single file specified. The default 
is to send listings to Standard 

Output (ususally the terminal). 


Table F-7 - Control_Part (Redirection) Options 


F.14 Compiler Options 


P-59 










LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation 
and not to this report. 





Version 3.5 
2 ? March 1991 


Ada/M PSE Handbook 


P.16 Linker Options 


+-+ 

1 Option Function | 

-+ 

I ■ I 

I DEBUG Produces a linked container to be I 

I debugged. Default: NO_DEBUG. I 

I LOAD Deferred. I 

1 ! 

I MEASURE Produces a linked container to be I 

I analyzed. Default: NO_MEASURE. 1 


NO__IO_SUBSYSTEM Does not automatically pull in Ada/M 
“ predefined 10 subsystem phases 

SySTEM_IO 1 and SySTEM_I0 2. 

Default: "l0_SUBSySTEM. 

PARTIAL Produces an incomplete linked 

container with unresolved 
references. Default: NO_PARTIAL. 

RTL^SELECTIVE Similar to the SELECTIVE option 

“ except that it only refers to RTLIB 

units. This option is not supported 
during phase links. 

Default: NO RTL SELECTIVE. 


I SEARCH Explicitly searches for the units to | 
1 be included in the linked container. j 
I Default; SEARCH for final links; j 
I NO^SEARCH for phase links. I 

I SELECTIVE Maps into the program only the ) 
I subprograms called by the main i 
j subprogram. Default: SELECTIVE for j 
I final links; NO_SELECTIVE for phase j 
I links. j 

I i 

+-+ 


Table F-10 - Ada/M Linker Special Processing Options 


F-62 


F.16 Linker Options 










Ada/M PSE Handbook 


Version 3.5 
29 March 1991 


Option 

Function 

No option 

Linker summary listing always 
produced. 

DEBUGMAP 

Deferred. 

ELAB_LIST 

Generates an elaboration order 
listing. Default: NO_ELAB__LiST. 

LOADMAP 

Generates a loadmap listing. 

Default: NO_LOADMAP. 

LOCALESfMBOLS 

Generates a symbols listing with 
all internal as well as external 
definitions in the program. 
LOCAL^SYMBOLS is to be used in 
conjunction with the SYMBOLS 
option. If LOCAL_SYMBOLS is 
specified with NO^SYMBOLS, a 

WARNING is produced and the SYMBOLS 
option is activated. 

Default; NO_LOCAL_SYMBOLS 

SYMBOLS 

Produces a Linker symbols listing. 
Default: NO__SYMBOLS. 

UNITS 

Produces a Linker units listing. 
Default: NO_UNITS. 


Table F-11 - Linker Listings Options 


F.16 Linker Options 


r-63 










Version 3.5 
29 March 1991 


Ada/M PSE Handbook 


Option 

Function 

MSG 

Sends error messages to the file 
specified. The default is to send 


error messages to Message Output 
(usually the terminal). 

OUT 

Sends all selected listings to the 
single file specified. The default 
is to send listings to Standard 

Output (usually the terminal). 


Table F-12 - Control_Part (Redirection) Options 


F-64 


F.16 Linker Options 










Ada/M PSE Handbook 


Version 3.5 
29 March 1991 


F.17 Exporter Options 


+-- 

I Option Function j 

^-+ 

No option Exporter summary listing always 

produced. 

DEBUG Permits the generation of a load 


module with all debugging facilities 
available. When NO_DEBUG is 
specified or is in effect by default, 
no debugging facilities are made 
available. Export the program for 
debugging with either the Run-Time 
Debugger (RTD) or the Embedded Target 
Debugger (ETD). 

Default: NO_DEBUG. 

DYNAMIC Deferred. 

LOAD Deferred. 

MEASURE Permits the generation cf a load 

module with all performance 

measurement facilities available. 

When NO MEASURE is specified or is in 
effect Ey default, no performance 
measurement facilities are made 
available. Default: NO_M£ASURE 

+ - - -- - - --—-----+ 

Table F-13 - Ada/M Special Processing Options 


F.17 Exporter Options 


F-65 









Version 3.5 Ada/M PSE Handbook 

29 March 1991 

- ----- ^ 

1 Option Function | 

+- - --- - ^ 

MSG Sends error messages to the file I 

specified. The default is to send j 

error messages to Message Output j 

(usually the terminal). 1 

OUT Sends all selected listings to the | 

single file specified. The default j 

is to send listings to Standard | 

Output (usually the terminal). I 

I 

--- 


Table F-14 - Control^Part (Redirection) Options 


F-66 


F.17 Exporter Options 






Ada/M PSE Handbook 


Version 3.5 
29 March 1991 


Option 

Function 

DEBUGMAP 

Deferred 

LOADMAP 

Produces an Exporter Loadmap 

Listing. This listing shows the 
location of each program section for 
each phase. Default: NO_LOADMAP. 

LOCAL^SYMBOLS 

Includes names local to library 
package bodies in the Exporter 

Symbol Definition Listing, if 
produced. This option has no effect 
if NO SYMBOLS is in effect. 

Default: NO LOCAL_SYMBOLS 

(include only names 

which are externally visible). 

RTEXEC 

Produces executive listings instead 
of user application listings. It can 
only be used with the /LOADMAP 
option, i.e., /LOADMAP/RTEXEC. 

Default: NO_RTEXEC. 

SYMBOLS 

Produces an Exporter Symbol 

Definition Listing. This listing 
shows the virtual and physical 
locations of the symbols in memory 
for each virtual memory phase. 

Default: NO_SYMBOLS. 

UNITS 

Produces an Exporter Units Listing. 
Default: NO_UNITS. 


Table F-15 - Ada/M Exporter Listing Options 


F.17 Exporter Options 


F-67 








APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are; 

package STANDARD is 

type INTEGER is range -32_768 .. 32_767; 

type LONG_INTEGER is range -2_147_483_647 .. 2_147_483_647; 

type FLOAT is digits 6 range 

-(16#0.FF_FFF8#E63) .. (16/0.FF_FFF8#E63); 

type DURATION is delta 2.0 ** (-14) range 
-131_071.0 .. 131_071.0; 

end STANDARD; 











Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


Appendix F 

The Ada Language for the AN/OYR-44 and AN/AyK-14 Targets 


The source language accepted by the compiler is Ada, as 
described in the Military Standard, Ada Programming Language, 
ANSI/MIL-STD-1815A-1983, 17 February 1983 ("Ada Language 
Reference Manual"). 

The Ada definition permits certain implementation 
dependencies. Each Ada implementation is required to supply a 
complete description of its dependencies, to be thought of as 
Appendix F to the Ada Language Reference Manual. This section is 
that description for the AN/UyK-44 and AN/AyK-14 targets. 


F.l Options 

There are several compiler options provided by all ALS/N 
compilers that directly affect the pragmas defined in the Ada 
Language Reference Manual. These compiler options currently 
include the CHECKS and OPTIMIZE options which affect the SUPPRESS 
and OPTIMIZE pragmas, respectively. A complete list of ALS/N 
compiler options can be found in Section 9. 

The CHECKS option enables all run-time error checking for the 
source file being compiled, which can contain one or more 
compilation units. This allows the SUPPRESS pragma to be used in 
suppressing the run-time checks discussed in the Ada Language 
Reference Manual, but note that the SUPPRESS pragma(s) must be 
applied to each compilation unit. The NO^CHECKS option disables 
all run-time error checking for all compilation units within the 
source file and is equivalent to SUPPRESSing all run-time checks 
within every compilation unit. 

The OPTIMIZE option enables all compile-time optimizations 
for the source file being compiled, which can contain one or more 
compilation units. This allows the OPTIMIZE pragma to request 
either TIME-oriented or SPACE-oriented optimizations be 
performed, but note that the OPTIMIZE pragma must be applied to 
each compilation unit. If the OPTIMIZE pragma is not present, 
the ALS/N compiler's Global Optimizer tends to optimize for TIME 
over SPACE. The NO OPTIMIZE option disables all compile-time 
optimizations for aTl compilation units within the source file 
regardless of whether or not the OPTIMIZE pragma is present. 


F.l Options 


F-01 










Version 4.0 
30 December 1991 


Ada/M PS£ Handbook 


In addition to those compiler options normally provided by 
the ALS/N Common Ada Baseline compilers, the Ada/M compiler also 
implements the EXECUTIVE, DEBUG, and MEASURE options. 

The EXECUTIVE compiler option enables processing of PRAGMA 
EXECUTIVE and allows WITH of units compiled with the RTE^ONLY 
option. IF NO_EXECUTIVE is specified on the command line, the 
pragma will be~ignored and will have no effect on the generated 
code. 

The DEBUG compiler option enables processing of PRAGMA DEBUG 
to provide debugging support. If NO__DEBUG is specified, the 
DEBUG pragmas shall have no effect. "“Program units containing 
DEBUG pragmas and compiled with the DEBUG compiler option may be 
linked with program units containing DEBUG pragmas and compiled 
with the NO_DEBUG option; only those program units compiled with 
the DEBUG option shall have additional DEBUG support. 

The MEASURE compiler option enables run-time calls to 
Run-Time Performance Measurement Aids (RTAids) to record the 
entrance into all subprograms whose bodies are in the 
compilation. Program units compiled with the MEASURE option may 
be linked with program units not compiled with the MEASURE 
option; at run-time, only those subprograms in program units 
compiled with the MEASURE option shall have this additional 
MEASURE support. 


F-02 


F.l Options 











Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.2 Pragmas 

Both implementation-defined and Ada language-defined pragmas 
are provided by all ALS/N compilers. These paragraphs describe 
the pragmas recognized and processed by the Ada/M compiler. The 
syntax defined in Section 2.8 of the Ada Language Reference 
Manual allows pragmas as the only element in a compilation, 
before a compilation unit, at defined places within a compilation 
unit, or following a compilation unit. Ada/M associates pragmas 
with compilation units as follows; 

a. If a pragma appears before any compilation unit in a 
compilation, it will affect all following compilation units, 
as specified below and in Section 10.1 of the Ada Language 
Reference Manual. 

b. If a pragma appears inside a compilation unit, it will be 
associated with that compilation unit, and with the listings 
associated with that compilation unit, as described in the 
Ada Language Reference Manual, or below. 

c. If a pragma follows a compilation unit, it will be associated 
with the preceding compilation unit, and effects of the 
pragma will be found in the container of that compilation 
unit and in the listings associated with that container. 

The pragmas MEMORY SIZE, STORAGE_UNIT, and SYSTEM_NAME are 
described in Section ll.7 of the Ada”Language Reference Manual. 
They may appear only at the start of the first compilation when 
creating a program library. In the ALS/N, however, since program 
libraries are created by the Program Library Manager and not by 
the compiler, the use of these pragmas is obviated. If they 
appear anywhere, a diagnostic of severity level WARNING is 
generated. 


F.2 Pragmas 


F-03 



Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.2.1 Language-Defined Pragmas 

The following notes specify implementation-specific changes 
to those pragmas described in Appendix B of the Ada Language 
Reference Manual. Unmentioned pragmas are implemented as defined 
in the Ada Language Reference Manual. 

pragma INLINE (arg {#arg}); 

The arguments designate subprograms. There are three 
instances in which the INLINE pragma is ignored. Each 
of these cases produces a warning message which states 
that the INLINE did not occur. 

a. If the compilation unit containing the INLINEd 
subprogram depends on the compilation unit of its 
caller, a routine call is made instead. 

b. If the INLINEd subprogram's compilation unit 
depends on the compilation unit of its caller (a 
routine call is made instead). 

c. If an immediately recursive subprogram call is made 
within the body of the INLINEd subprogram, the 
recursive call is not inlined. 

pragma INTERFACE (language_name, subprogram_name); 

The language_name specifies the language and type of 
interface to be used in calls used to the externally 
supplied subprogram specified by subprogram name. The 
only value allowed for the first argument (Tanguage 
name) is MACRO NORMAL. MACRO_NORMAL indicates that 
parameters wilT be passed on the stack and the calling 
conventions used for normal Ada subprogram calls will 
apply. 

You must ensure that an assembly-language body 
container will exist in the program library before 
linking. • 


F-04 


F.2.1 


Language-Defined Pragmas 








Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


pragma MEMORY_SIZE; 

This pragma is ignored and a WARNING diagnostic is 
issued. 

pragma OPTIMIZE (arg); 

The argument is either TIME or SPACE. If TIME is 
specified, the optimizer concentrates on optimizing 
code execution time. If SPACE is specified, the 
optimizer concentrates on optimizing code size. The 
default is SPACE, "f the OPTIMIZE option is enabled 
and pragma OPTIMIZE is not present, global optimization 
is still performed with the default argument, SPACE. 
Program units containing OPTIMIZE pragmas and compiled 
with the OPTIMIZE option may be linked with program 
units containing OPTIMIZE pragmas and compiled with the 
NO__OPTIMIZE option; but only those program units 
compiled with the OPTIMIZE option will have global 
optimization support. 

pragma PRIORITY (arg); 

The argument is an integer static expression in the 
range 0..15, where 0 is the lowest user-specifiable 
task priority and 15 is the highest. If the value of 
the argument is out of range, the pragma will have no 
effect other than to generate a WARNING diagnostic. A 
value of zero will be used if priority is not defined. 
The pragma will have no effect when not specified in a 
task (type) specification or the outermost declarative 
part of a subprogram. If the pragma appears in the 
declarative part of a subprogram, it will have no 
effect unless that subprogram is designated as the main 
subprogram at link time. 


F.2.1 


Language-Defined Pragmas 


F-05 








Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


I pragma STORAGE_SIZE; 

I This pragma is ignored and a WARNING diagnostic is 
I issued. 

pragma SUPPRESS (arg {^arg}); 

This pragma is unchanged with the following exceptions: 

Suppression of OVERFLOW__CHECK applies only to integer 
operations; and PRAGMA SUPPRESS has effect only within 
the compilation unit in which it appears, except that 
suppression of ELABORATION^CHECK applied at the 
declaration of a subprogram or task unit applies to all 
calls or activations. 

pr4igma SYSTEM_NAME; 

I This pragma is ignored and a MARKING diagnostic is 
I issued. 


F-06 


F.2.1 Language-Defined Pragmas 







Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.2.2 Implementation-Defined Pragmas 

This paragraph describes the use and meaning of those pragmas 
recognized by Ada/M which are not specified in Appendix B of the 
Ada Language Reference Manual. 

pragma DEBUG; 

This pragma enables the inclusion of full symbolic 
information and support for the Embedded Target 
Debugger. The DEBUG PRAGMA is enabled by the DEBUG 
command line option and has no effect if this option is 
not provided. This pragma must appear within a 
compilation unit, before the first declaration or 
statement. 

pragma EXECUTIVE [(arg)]; 

This pragma allows you to specify that a compilation 
unit is to run in the executive state of the machine 
and/or utilize privileged instructions. The pragma has 
no effect if the compiler option NO EXECUTIVE is 
enabled, either explicitly or by default. 

If PRAGMA EXECUTIVE is specified without an argument, 
executive state is in effect for the compilation unit 
and the code generator does not generate privileged 
instructions for the compilation unit. If PRAGMA 
EXECUTIVE {INHERIT) is specified, a subprogram in the 
compilation unit inherits the state of its caller and 
the code generator does not generate privileged 
instructions for the compilation unit. If PRAGMA 
^ EXECUTIVE (PRIVILEGED) is specified, the executive 

state is in effect and the code generator may generate 
privileged instructions for the compilation unit. In 
the absence of PRAGMA EXECUTIVE, the compilation unit 
executes in task state and the code generator does not 
generate privileged instructions. 

PRAGMA EXECUTIVE is applied once per compilation unit, 
so its scope is the entire compilation unit, PRAGMA 
EXECUTIVE may appear between the context clause and the 
outermost unit. If there is no context clause, PRAGMA 
EXECUTIVE must appear within that unit before the first 
declaration or statement. The placement of the pragma 
before the context clause has no effect on any or all 
following compilation units. If PRAGMA EXECUTIVE 
appears in the specification of a compilation unit, it 
must also appear in the body of that unit, and vice 
versa. If the pragma appears in a specification but is 
absent from the body, you are warned and the pragma is 
effective. If the pragma appears in the body of a 
compilation unit, but is absent from the corresponding 


F.2.2 Implementation-Defined Pragmas 


F-07 




Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


specification, you are warned and the pragma has no 
effect. PRAGMA EXECUTIVE does not propagate to 
subunits. If a subunit is compiled without PRAGMA 
EXECUTIVE and the parent of the subunit is compiled 
with PRAGMA EXECUTIVE, you are warned and PRAGMA 
EXECUTIVE has no effect on the subunit. 

pragma FAST_INTERRUPT_ENTRy (entry_name, IMMEDIATE); 

This pragma provides for situations of high interrupt 
rates with simple processing per interrupt, (such as 
adding data to a buffer), and where complex processing 
occurs only after large numbers of these interrupts, 
(such as when the buffer is full). This allows for 
lower overhead and faster response capability by 
restricting you to disciplines that are commensurate 
with limitations normally found in machine level 
interrupt service routine processing. 

pragma MEASURE (extraction__set, [arg {,arg)}); 

This pragma enables one or more performance measurement 
features. Pragma MEASURE specifies a user-defined 
extraction set for the Run-Time Performance Measurement 
Aids and Embedded Target Profiler. The user-defined 
extraction set consists of all occurences pragma 
MEASURE throughout the program. Extraction_set is a 
numeric literal, which is an index into a user-supplied 
table. Arg is a variable or a list of variables whose 
values are reported at this point in the execution. 
These values describe the nature (TYPE) of the values 
collected to an independent data reduction program. 
Pragma MEASURE is enabled by the MEASURE command line 
option and has no effect if this option is not 
provided. This pragma should be applied to a package 
body rather than a package specification. 

pragma STATIC (INTERRUPT_HANDLER_TASK); 

The pragma STATIC is only allowed immediately after the 
declaration of a task body containing an immediate 
interrupt entry. The argument is 

INTERRUPT_HANDLER_TASK. The effect Of this pragma will 
be to allow generation of nonreentrant and nonrecursive 
code in a compilation unit, and to allow static 
allocation of all data in a compilation unit. This 
pragma shall be used to allow for procedures within 
immediate (fast) interrupt entries. The effect will be 
for the compiler to generate nonreentrant code for the 
affected procedure bodies. If a STATIC procedure is 
called recursively, the program is erroneous. 


F-08 


F.2.2 Implementation-Defined Pragmas 









Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


pragma TICK (arg)y 

This is a system configuration pragma. It takes a 
single argument of type universal_real, which specifies 
the value of the named number SYSTEM.TICK. This pragma 
may appear only at the start of the first compilation 
when creating a program library. If this pragma 
appears elsewhere, a diagnostic of severity WARNING is 
generated. 

pragma TITLE (arg); 

This is a listing control pragma. It takes a single 
argument of type string. The string specified will 
appear on the second line of each page of the source 
listing produced for the compilation unit within which 
it appears. The pragma should be the first lexical 
unit to appear within a compilation unit (excluding 
comments). If it is not, a warning message is issued. 

pragma TRIVIAL^ENTRY (NAME: entry_simple_naroe); 

This pragma is only allowed within a task specification 
after an entry declaration and identifies a 
Trivial_Entry to the system. A trivial entry 
represents a synchronization point, contained in a 
normal Ada task, for rendezvous with a fast interrupt 
entry body. The body of a trivial entry must be null. 

pragma UNMAPPED (arg {,arg}); 

The effect of this pragma is for unmapped (i.e., not 
consistently mapped within the virtual space) 
allocation of data in a compilation unit. The 
arguments of this pragma are access types to be 
unmapped. If a program tries to allocate more UNMAPPED 
space than is available in the physical configuration, 
STORAGE_ERROR will be raised at run-time. PRAGMA 
* UNMAPPED must appear in the same declarative region as 
the type and after the type declaration. 


P.2,2 Implementation-Defined Pragmas 


F-09 








Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.2.3 Scope of Pragmas 

The scope for each pragma previously described as differing 

from the Ada Language Reference Manual is given below. 

DEBUG Applies to the compilation unit in which the -pragma 

appears. 

EXECUTIVE Applies to the compilation unit in which the pragma 
appears, i.e.# to all subprograms and tasks within 
the unit. Elaboration code is not affected. The 
pragma is not propagated from specifications to 
bodies, or from bodies to subunits. The pragma 
must appear consistently in the specification, 
body, and subunits associated with a library unit. 

FAST_INTERRUPT ENTRY 

Applies to the compilation unit in which the pragma 
appears. 

INLINE Applies only to subprograms named in its 

arguments. If the argument is an overloaded 
subprogram name, the INLINE pragma applies to 
all definitions of that subprogram name which 
appear in the same declarative part as the 
INLINE pragma 

INTERFACE Applies to all invocations of the named 
imported subprogram. 

MEASURE No scope, but a WARNING diagnostic is 

generated. 

MEMORy_SIZE No scope, but a WARNING diagnostic is 
generated. 

OPTIMIZE Applies to the entire compilation unit in 

which the pragma appears. 

PRIORITY Applies to the task specification in which it 

appears, or to the environment task if it 
appears in the main subprogram. 

STATIC Applies to the compilation unit in which the pragma 

appears. 

STORAGE_SIZ£ No scope, but a WARNING diagnostic is 
” generated. 

SUPPRESS Applies to the block or body that contains 

the declarative part in which the pragma 
appears. 


P-IO 


F.2.3 Scope of Pragmas 







Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


SYSTEM_NAME 

TICK 

TITLE 

TRIVIAL^ENTRY 

UNMAPPED 


No scope# but a WARNING diagnostic is 
generated. 

Applies to the entire program library in 
which the pragma appears. 

The compilation unit within which the pragma 
occurs. 

Applies to the compilation unit in which the pragma 
appears. 

Applies to all objects of the access type 
named as arguments. 


F.2.3 Scope of Pragmas 


F-11 




Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


P.3 Attributes 

The following notes augment the language-required definitions 
of the predefined attributes found in Appendix A of the Ada 


Language Reference Manual. 



T'MACHINE^EMAX 

is 

63. 

T'MACHINE_EMIK 

is 

-64. 

T'MACHINE_MANTIS SA 

is 

6. 

T'MACHINE_OVERFLOWS 

is 

TRUE. 

T'MACHINE_RADIX 

is 

16. 

T'MACHINE ROUNDS 

is 

FALSE 


F-12 


r.3 Attributes 





Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.4 Predefined Language Environment 

The predefined Ada language environment consists of the 
packages STANDARD and SYSTEM, which are described below. 


F.4.1 Package STANDARD 

The package STANDARD contains the following definitions in 
addition to those specified in Appendix C of the Ada Language 
Reference Manual. 


TYPE boolean IS (false, true); 
FOR boolean*SIZE USE 1; 


TYPE integer IS RANGE -32 768 .. 32 767; 

TYPE long_integer IS RANGE -2_147_4f3_648 .. 2_147_483_647; 

TYPE float IS DIGITS 6 RANGE 

-(16#0.FFFFF8#E63) .. (16#0.FFFFF8#E63); 

— Additions to predefined subtypes; 

SUBTYPE long_natural IS long_integer RANGE 0..integer'LAST; 
SUBTYPE long“positive IS long_integer RANGE 1..integer'LAST; 

FOR character'SIZE USE 8; 

TYPE string IS ARRAY (positive RANGE <>) OF character; 
PRAGMA PACK(string); 

TYPE duration IS DELTA 2.0 ** (-14) 

RANGE -131 071.0 .. 131 071.0; 


— The predefined exceptions; 


const raint__error 

numeric_er7or 

program_error 

storage__error 

*tasking_error 


; exception; 
; exception; 
; exception; 
; exception; 
; exception; 


F.4.1 


Package STANDARD 


P-13 



Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.4.2 Package SYSTEM 

The SYSTEM packages for Ada/M are as follows: 


F.4.2.1 AN/UYK-44 SYSTEM 

The package SYSTEM for the AN/UYK_44 is: 

TYPE name IS (anuyk44, anaykl4); 

system_name : CONSTANT system.name :>= system.anuyk44; 
storage__unit ; CONSTANT :« 16; 
memory size : CONSTANT ;* 65_536; 

TYPE address IS RANGE 0..system.memory size - 1; 

FOR address'SIZE USE 16; 

— System Dependent Named Numbers 

min int : CONSTANT := -{2**31); 

max'int : CONSTANT := (2**31)“1; 

max_digits : CONSTANT := 6; 

max_mantissa : CONSTANT := 31; 

fine_delta : CONSTANT := 

2 # 0 , 0000_0000 0000 0000 0000 0000_0000 001 #; 
tick : CONSTAIJT 3.l25e-05; 

— 1/32000 seconds is the basic clock period. 

— Other System Dependent Declarations 

SUBTYPE priority IS integer RANGE 0..15; 

TYPE entry__kind IS (normal, immediate); 

physical_memory size : CONSTANT :» 2**22; 

TYPE physical_a3dress IS 

RANGE 0..system.physical_memory_size - 1; 

TYPE external_interrupt_word IS RANGE 0 .. 65_536; 

— Address clause (interrupt) address codes for the 

ANUYK-44 

Class_I_Unhandled_address : CONSTANT 

~ address 1610800#; 

Class_II_Unhandled_address ; CONSTANT 

address 16#1800#; 

Class__III__Unhandled_address : CONSTANT 

** address 16#2800#; 


F-14 


F.4.2.1 AN/UYK-44 SYSTEM 







Ada/M PSE Handbook Version 4.0 

30 December 1991 


- Class I interrupts - 

CP Memory Resume address ; CONSTANT 

“ address :* 16il000#; 

CP_Memory_Parity_addrcss : CONSTANT 

” address :« 1611400#; 

IOC Memory Parity address ; CONSTANT 

~ “ address :* 1611700#; 

IOC_Memory_Resurae_address ; CONSTANT 

address :* 16#1A00#; 

Power Fault address : CONSTANT 

address 16#1F00#; 

- Class II interrupts - 

CP Instruction Fault address : CONSTANT 

” address 16#2200#; 

Executive Mode Fault address ; CONSTANT 

“ “ “ address := 16#2300#; 

IOC Instruction Fault address : CONSTANT 

“ ~ address ;» 16#2400#; 

IOC Protect Fault address ; CONSTANT 

address := 16#2500#; 

CP Protect Fault address ; CONSTANT 

“ - — address ;= 16#2900#; 

once_only pti ; CONSTANT duration ;* 0.0; 

— Used to indicate that a PTI is not to be periodic. 
SUBTYPE pti address IS address RANGE 16#2P01#..16#2F1F#; 
TYPE pti_state IS (active,inactive,unregistered); 

- Class III (I/O) interrupts - 

MMIO Discrete Interrupt address ; CONSTANT 

~ " address ;* 16#3C00# 

MMIO External Interrupt address : CONSTANT 

” address ;* 16#3D00# 

MMIO Output Data Ready address : CONSTANT 

“ ~ “ address ;» 16#3E00# 

MMIO Input Data Ready address ; CONSTANT 

■“ “ address := 16#3F00# 

IOC Intercomputer Timeout address ; CONSTANT 

• “■ ” address :» 16#3C00# 

IOC External Int Discrete address ; CONSTANT 

“ ” address ;* 16#3D00# 

IOC Output Chain Interrupt address : CONSTANT 

“ “ address ;* 16#3E00# 

IOC Input Chain Interrupt address : CONSTANT 

“ address ;« 16#3F00# 


F.4.2.1 AN/UYK-44 SYSTEM 


F-15 



























Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


— The following exceptions are provided as a "convention" 

— whereby the Ada program can be compiled with all implicit 

— checks suppressed (i.e., pragma SUPPRESS or equivalent), 

— explicit checks included as necessary, the appropriate 

— exception raised when required, and then the exception is 

— either handled or the Ada program terminates. 


access_check : EXCEPTION; 
discriminant check : EXCEPTION; 
index_check “ ; EXCEPTION; 
length_check : EXCEPTION; 
range check ; EXCEPTION; 
divisIon_check : EXCEPTION; 
overflow check : EXCEPTION; 
elaboratTon^check ; EXCEPTION; 
storage_check ; EXCEPTION; 


— implementation-defined exceptions. 
unresolved_reference ; EXCEPTION; 
system_error : EXCEPTION; 

capacity_error ; EXCEPTION; 


F-16 


F.4.2.1 AN/UYK-44 SYSTEM 











Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.4.2.2 AN/AYK-14 SYSTEM 

The package SYSTEM for the AN/AyK-14 is: 

TYPE name IS (anuyk44, anaykl4); 

system__name : CONSTANT system.name := system.anaykl4; 
storage__unit : CONSTANT :» 16; 

memory size ; CONSTANT :* 65_536; 

TYPE address IS RANGE 0..system.memory size - 1; 

FOR address'SIZE USE 16; 

— System Dependent Named Numbers 

min int : CONSTANT := -(2**31); 

max“int ; CONSTANT := (2**31)-l; 

max”digits ; CONSTANT := 6; 

max_mantissa : CONSTANT := 31; 

fine delta : CONSTANT :* 

2 # 0.0000 0000_0000 0000_0000 0000 0000 001 #; 
tick ^ : CONSTANT :* 3.T25e-^5; 

— 1/32000 seconds is the basic clock period. 

— Other System Dependent Declarations 

-SUBTYPE priority IS integer RANGE 0..15; 

TYPE entry^kind IS (normal, immediate); 

physical^memory size : CONSTANT ;= 2**22; 

TYPE physical_a3dress IS 

RANGE 0..system.physicaX_memory_size - 1; 

TYPE external_interrupt_word IS RANGE 0 .. 65_536; 

Address clause (interrupt) address codes for the 

ANAYK-14 

Class I Unhandled address : CONSTANT 

address :« 16#0800# 

Class_II_Unhandled_address i CONSTANT 

■ ” address := 16#1800# 

Class_III_Unhandled_address : CONSTANT 

address ;= 16#2800# 


F.4.2.2 AN/AYK-14 SYSTEM 


F-17 









Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


- Class I interrupts - 

Memory Resume_address ; CONSTANT 

address 16«1000«; 

Memory_Parity_address : CONSTANT 

address ;» 16#1400#; 

Thermal_Overload_address : CONSTANT 

address := 16#1900|; 

IO_Failure_address : CONSTANT 

address 16«1B00«; 

Hardware BIT Fault_address : CONSTANT 

address := 16«1C00«; 

Hardware_Fault_Warning_address : CONSTANT 

“ address ;« 16#1D00#; 

Power__Fault_address : CONSTANT 

address := 16«1F00«; 

- Class II interrupts - 

CP_Instruction_Fault__address : CONSTANT 

** address := 1612200#; 

Executive Mode_Instruction Fault__address : 

CONSTANT 

address 1612300#; 

10 Instruction Fault_address : CONSTANT 

address := 16#2400#; 

System_Reset address ; CONSTANT 

” ^ address ;= 1612500#; 

Overtemp address : CONSTANT 

address ;= 16#2700#; 

Memory Protect_Fault address ; CONSTANT 

address := 16#2900#; 

External_Interrupt_2_address : CONSTANT 

address 16#2C00#; 

External_Interrupt_3__address : CONSTANT 

” address ;= 16#2D00#; 

External_Interrupt_4_address ; CONSTANT 

address := 16#2£00#; 

once^only pti : CONSTANT duration ;= 0.0; 

-- Used to indicate that a PTI is not to be periodic. 

SUBTYPE pti^address IS address RANGE 16#2F01#..16#2F1F#; 

TYPE pti__state IS (active,inactive,unregistered); 

- Class III (I/O) interrupts - 

10 Channel Abnormal address : CONSTANT 

“ ■” address i« 16#3C00#; 

External__Interrupt_address : CONSTANT 

address 16#3D00#; 

Output Chain Interrupt address i CONSTANT 

” address ;» 16#3E00#; 

Input_Chain_Interrupt_address : CONSTANT 

address 16#3F00#; 


F-18 


F.4.2.2 AN/AYK-14 SYSTEM 


















Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


— The following exceptions are provided as a "convention" 

— whereby the Ada program can be compiled with all implicit 

— checks suppressed (i.e., pragma SUPPRESS or equivalent), 

— explicit checks included as necessary, the appropriate 

— exception -aised when required, and then the exception is 

— either handled or the Ada program terminates. 


access_check 
discr iminant__check 
index_check 
length_check 
range check 
divisron_^check 
overflow~check 
elaboratron_check 
storage check 


EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 


— implementation-defined exceptions, 
unresolved^reference : EXCEPTION; 
system_error ; EXCEPTION; 

capacity^error : EXCEPTION; 


F.4.2.2 AN/AYK-14 SYSTEM 


F-19 









Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.5 Character Set 

Ada compilations may be expressed using the following 
characters in addition to the basic character set: 

lower case letters: 

abcdefghi jklmnopqrstuvwxyz 
special characters: 

!$%?§( 

The following transliterations are permitted; 

a. Exclamation point for vertical bar, 

b. Colon for sharp, and 

c. Percent for double-quote. 


F-20 


F.5 Character Set 



Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.6 Declaration and Representation Restrictions 

Declarations are described in Section 3 of the Ada Language 
Reference Manual, and representation specifications are described 
in Section 13 of the Ada Language Reference Manual and discussed 
here. 

In the following specifications, the capitalized word SIZE 
indicates the number of bits used to represent an object of the 
type under discussion. The upper case symbols D, L, R, 
correspond to those discussed in Section 3.5.9 of the Ada 
Language Reference Manual. 


F.6.1 Integer Types 

Integer types are specified with constraints of the form: 
RANGE L..R 

where; 

R <= SYSTEM.MAX_INT & L >= SYSTEM.MIN__INT 

For a prefix "t” denoting an integer type, length specifications 
of the form; 

FOR t'SIZE USE n ; 

may specify integer values n such that n in 2..16, 

R <= 2**(n-l)-l & L >= -(2**(n-l)) 
or else such that 

R <= (2**n)-l & L >= 0 
and 1 < n <® 15. 

For a- stand-alone object of integer type, a default SIZE of 16 is 
used when; 

R <= 2**15-1 4 L >= -2**15 

Otherwise, a SIZE of 32 is used. 

For components of integer types within packed composite 
objects, the smaller of the default stand-alone SIZE or the SIZE 
from a length specification is used. 


F.6.1 Integer Types 


F-21 



Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.6.2 Floating Types 

Floating types are specified with constraints of the form: 
DIGITS D 

where D is an integer in the range 1 through 6. 

For a prefix "t" denoting a floating point type, length 
specifications of the form: 

FOR t'SIZE USE n; 

may specify integer values n = 32 when D <= 6. All floating 
point values have SIZE = 32. 


F.6.3 Fixed Types 

Fixed types are specified with constraints of the form; 
DELTA D RANGE L..R 


where; 


MAX (ABS(R), ABS{L)) 

- <= 2**31-1. 

actual_delta 

The actual delta defaults to the largest integral power of 7 less 
than or equal to the specified delta D. (This implies that fixed 
values are stored right-aligned.) 

For fixed point types, length specifications of the form; 
for T'SIZE use N; 

are permitted only when N in 1 .. 32, if: 

R - actual_delta <= 2**(N-1)-1 * actual delta, and 
L + actual delta >= -2**(n-l) * actual 3elta 


or 


R - actual delta <= 2**(N)-1 * actual_delta, and 
L >* 0 ~ 


F-22 


F.6.3 Fixed Types 




Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


For stand-alone objects of fixed point type, a default size of 32 | 
is used. For components of fixed point types within packed I 
composite objects, the size from the length specification will be j 
used. 1 

For specifications of the form; i 

FOR t'SMALL USE n; ! 

The 'SMALL value of a fixed point type may be set to any value I 
less than D, are permitted for any value of X, such that X <= D. ! 
X must be specified either as a base 2 value or as a base 10 j 
value. If X is a power of 2, then X will be used for the actual j 
delta; if X is a power of 10, then an actual delta will be chosen j 
which is one eighth (1/8) of the largest integral power of 2 less j 
than or equal to X; otherwise, the largest integral power of two i 
less than X will be used as the actual delta. All stand-alone i 
fixed point objects have a size of 32. If a 'SIZE specification i 
is given, fixed point components of packed composites will have I 
the size specified. i 


F.6.4 Enumeration Types 

In the absence of a representation specification for an 
enumeration type "t," the internal representation of t'FIRST is 
0. The default size for a stand-alone object of enumeration type 
"t" is 16, so the internal representations of t'FIRST and t'LAST 
both fall within the range 

-2**15 .. 2**15 - 1. 

For enumeration types, length specifications of the form; 

FOR t'SIZE USE n; 

and/or enumeration representations of the form; 

FOR t USE <aggregate>; 

are permitted for n in 2..16, provided the representations and 
the SIZE conform to the relationship specified above. 

Or else for n in 1..16, is supported for enumeration types 
and provides an internal representation of; 

t'FIRST >= 0 .. t'LAST <= 2**(t'SIZE) - 1. 

For components of enumeration types within packed composite 
objects, the smaller of the default stand-alone SIZE and the SIZE 
from a length specification is used. 


F.6.4 Enumeration Types 


F-23 







Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


Enumeration representations for types derived from the 
predefined type STANDARD.BOOLEAN will not be accepted, but length 
specifications will be accepted. 


F-24 


F,6.4 Enumeration Types 








Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.6.5 Access Types 

For access type, "t," length specifications of the form: 

FOR t'SIZE USE n; 

will not affect the runtime implementation of "t," therefore n « 
16 is the only value permitted for SIZE, which is the value 
returned by the attrib ite. 

For collection size specification of the form: 

FOR t*STORAGE_SIZE USE n; 

for any value of "n” is permitted for STORAGE_SIZE (and that 
value will be returned by the attribute call). The collection 
size specification will affect the implementation of "t” and its 
collection at runtime by limiting the number of objects for type 
"t” that can be allocated. 

The value of t'STORAGE_SIZE for an access type "t" specifies 
the maximum number of storage_units used for all objects in the 
collection for type "t." This includes all space used by the 
allocated objects, plus any additional storage required to 
maintain the collection. 


F.6.6 Arrays and Records 

For arrays and records, a length specification of the form; 

FOR t'size USE n; 

may cause arrays and records to be packed, if required, to 
accommodate the length specification. If the size specified is 
not large enough to contain any value of the type, a diagnostic 
message of severity ERROR is generated. 

The PACK pragma may be used to minimize wasted space between 
components of arrays and records. The pragma causes the type 
representation to be chosen such that the storage space 
requirements are minimized at the possible expense of data access 
time and code space. 

A record type representation specification may be used to 
describe the allocation of components in a record. Bits are 
numbered 0..15 from the right. 16 starts at the right of the 
next higher numbered word. Each location specification must 
allow at least n bits of range, where n is large enough to hold 
any value of the subtype of the component being allocated. 
Otherwise, a diagnostic message of severity ERROR is generated. 
Components that are arrays, records, tasks, or access variables 
may not be allocated to specified locations. If a specification 


F.6.6 Arrays and Records 


r-25 





Version 4.0 
30 December X9S1 


Ada/M PS£ Handbook 


of this form is entered, a diagnostic message of severity CRHOR 
is generated. 

For records, an alignment clause of the form: 

AT MOD n 

specify alignments of 1 word (word alignment) or 2 words 
(doubleword alignment). 

If it is determinable at compile time that the SIZE of a 
record or array type or subtype is outside the range of 
STANDARD,LONG_INTEGER, a diagnostic of severity WARNING is 
generated. Declaration of such a type or subtype would raise 
NUMERIC ERROR when elaborated. 


F.6.7 Other Length Specifications 

Length Specifications are described in Section 13.2 of the 
Ada Language Reference Manual. 

A length specification for a task type "t" of the form; 

FOR t'STORAGE_SIZE use n; 

specifies the number of S7STEM.ST0RAGE_UN1TS that are allocated 
for the execution of each task object of type "t." This includes 
the runtime stack for the task object but does not include 
objects allocated at runtime by the task object. If a 
t'STORAGE_SIZE is not specified for a task type "t," the default 
I value is 8K (words). 

I A length specification for a task type "t" of the form: 

I FOR t'SIZE USE n; 

I 

1 is allowable only for n = 32. 


F-26 


F.6.7 Other Length Specifications 







Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.7 System Generated Names 

Refer to Section 13.7 of the Ada Language Reference Manual 
and the section above on the Predefined Language Environment for 
a discussion of package SYSTEM. 

The system name is chosen based on the target(s) supported, 
but it cannot be changed. In the case of Ada/M, the system name 
is ANUYK44 or ANAYK14. 


F.8 Address Clauses 

Refer to Section 13.5 of the Ada Language Reference Manual 
for a description of address clauses. All rules and restrictions 
described there apply. In addition, the following restrictions 
apply. 

An address clause may designate a single task entry. Such an 
address clause is allowed only within a task specification. The 
meaningful values of the simple expression are the allowable 
interrupt entry addresses as defined in Table F-1. The use of 
other values will result in the raising of a PROGRAM__ERROR 
exception upon creation of the task. " 

If more than one task entry is equated to the same interrupt 
entry address, the most recently executed interrupt entry 
registration permanently overrides any previous registrations. 

At most one address clause is allowed for a single task 
entry. Specification of more than one interrupt address for a 
task entry is erroneous. 

Address clauses for objects and code other tha task entries 
are allowed by the Ada/M target, but they have no effect beyond 
changing the value returned by the 'ADDRESS attribute call. 


F.8 Address Clauses 


F-27 





Version 4.0 
30 December 1991 


Ada/M PSE Bandbook 


AN/uyK-44 Interrupt Summary 


i Class 0 interrupts (with interrupt entry address) include: 


o Class I Unhandled Interrupt 16#0B00i 


I Class I interrupts (with interrupt entry address) include: 


o Class II Unhandled 16«1800« 
o CP Memory Resume 1611000# 
o CP Memory Parity 16#1400# 
o IOC Memory Parity 16#1700# 
o IOC Memory Resume 16#1A00# 
o Power Fault 16#1F00# 


1 Class II interrupts (with interrupt entry address) include; 


o Class III Unhandled 
o Floating Point Over/Underflow 
o CP Instruction Fault 
o Executive Mode Fault 
o IOC Instruction Fault 
o IOC Protect Fault 
o Executive Return 
o Overtemp address 
o CP Protect Fault 
o Real-Time Clock 
o Monitor Clock 


16»2800# 

16#2100# UNDEFINABLE 
16«2200* 

16«2300« 

1612400# 

16#2500# 

16#2600# UNDEFINABLE 
16#2700# 

16#2900# 

16#2E00# UNDEFINABLE 
16#2F00# UNDEFINABLE 


Table F-la - Interropt Entry Addresses 


r-28 


F.8 Address Clauses 





















Ada/M PS£ Handbook 


Version 4.0 
30 December 1991 


AN/UYK-44 Interrupt Summary 


+- 

I 

+- 


Class III interrupts (with interrupt entry address) include; 

o MMIO Discrete Interrupt 16#3C00# 

o MMIO External Interrupt 16I3D00# 

o MMIO Output Data Ready 16#3E00# 

o MMIO Input Data Ready 16«3F00« 

o IOC Intercomputer Timeout 16#3C00# 

o IOC External Interrupt/Discrete 16#3D00# 
o IOC Output Chain Interrupt 16#3E00I 

o IOC Input Chain Interrupt 16#3F00# 

For all class III interrupts, the following interpretations 

apply: 

IC => IOC, CHANNEL pair, 16#00#..16#0F# indicates IOC 0 
16#10#..16#1F# indicates TOC 1 
16#20#,.16#2F# indicates IOC 2 
16#30#..16#3F# indicates IOC 3 

CC »> CHANNEL number, 16#00#..16#3F# indicates channel 0..63 


Table F-lb - Interrupt Entry Addresses (Continued) 


F.8 Address Clauses 


F-29 













Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


AN/AYK-14 Interrupt Summary 


I Class 0 interrupts (with interrupt entry address) include: 


o Class I CJnhandled Interrupt 1610800# 


) Class I interrupts (with interrupt entry address) include: 


o Class II Unhandled 
o CP Memory Resume 
o CP Memory Parity 
o Thermal Overload 
o 10 Failure 
o Hardware BIT Fault 
o Hardware Fault Warning 
o Power Fault 


16#1800# 

1611000# 

16#1400# 

16#1900# 

16#1BOO# 

16#1C00« 

16#1D00# 

16#1F00# 


I Class II interrupts (with interrupt entry address) include: 


o Class III Unhandled 
o Floating Point Over/Underflow 
o CP Instruction Fault 
o Executive Mode Fault 
o IOC Instruction Fault 
o System Reset 
o Executive Return 
o Over temp address 
o CP Protect Fault 
o Real-Time Clock 
o Monitor Clock 


16#2800# 

16#2100# UNDEFINABLE 
16#2200# 

16#2300# 

16#2400# 

16#2500# 

16#2600# UNDEFINABLE 
16#2700# 

16#2900# 

16#2E00# UNDEFINABLE 
16#2F00# UNDEFINABLE 


Table F-lc - Interrupt Entry Addresses (Continued) 


F-30 


F.8 Address Clauses 















Ada/N PSE Handbook 


Version 4.0 
30 December 1991 


AN/AyK--14 Interrupt Summary 


Class III interrupts (with interrupt entry address) include: 


o 10 Channel Abnormal 16#3C00I 

o External Interrupt 1643D00# 

o Output Chain Interrupt 16#3E00# 

o Input Chain Interrupt 16#3F00# 

For all class III interrupts» the following interpretations 

apply: 

IC => IOC, CHANNEL pair, 16100#..16#0F# indicates IOC 0 
16#10#..16#1F# indicates IOC 1 
16#20#..16#2F# indicates IOC 2 
16#30#..16#3F# indicates IOC 3 

CC => CHANNEL number, 16#00#..16#3F# indicates channel 0..63 


Table F-ld - Interrupt Entry Addresses (Continued) 


F.8 Address Clauses 


F-31 












Version 4.Q 
30 December 1991 


Ada/M PSE Handbook 


F.9 Unchecked Conversions 

Refer to Section 13.10.2 of the Ada Language Reference Manual 
for a description of UNCHECKED_CONVERSION. It is erroneous if 
your Ada program performs UNCHECKED CONVERSION when the source 
and target objects have different sizes. 


F.IO Restrictions on the Main Subprogram 

Refer to Section 10.1 (8) of the Ada Language Reference 
Manual for a description of the main subprogram. The subprogram 
designated as the main subprogram cannot have parameters. The 
designation as the main subprogram of a subprogram whose 
specification contains a formaljpart results in a diagnostic of 
severity ERROR at link time. 

The main subprogram can be a function, but the return value 
will not be available upon completion of the main subprogram's 
execution. The main subprogram may not be an import unit. 


F-32 


F.IO Restrictions on the Main Subprogram 






Ada/N PSE Handbook 


Version 4.0 
30 December 1991 


F.ll Input/Output 

Refer to Section 14 of the Ada Language Reference Manual for 
a discussion of Ada Input/Output and to Section 12 of the Ada/M 
Run Time Environment Handbook for more specifics on the Ada/M 
input/output subsystem. 

The Ada/M Input/Output subsystem provides the following 
packages: TEXT^IO, SEQUENT I AL_IO, DIRECT^IO, and LOW_^LEVEL_IO. 
These packages~execute in the context of“the user-wrTtten Ada 
program task making the I/O request. Consequently, all of the 
code that processes an I/O request on behalf of the user-written 
Ada program executes sequentially. The package IO__EXCEPTIONS 
defines all of the exceptions needed by the packages 
SEQUENTIAL^IO, DIRECT_I0, and TEXT 10. The specification of this 
package is^given in Section 14.5 ol the Ada Language Reference 
Manual. This package is visible to all of the constituent 
packages of the Ada/M I/O subsystem so that appropriate exception 
handlers can be inserted. 

I/O in Ada/M is performed solely on external files. No 
allowance is provided in the I/O subsystem for memory resident 
files (i.e., files which do not reside on a peripheral device). 
This is true even in the case of temporary files. With the 
external files residing on the peripheral devices, Ada/M makes 
the further restriction on the number of files that may be open 
on an individual peripheral device. 

Section 14.1 of the Ada Language Reference Manual states that 
all I/O operations are expressed as operations on objects of some 
file type, rather than in terms of an external file. File 
objects are implemented in Ada/M as access objects which point to 
a data structure called the File Control Block. This File 
Control Block is defined internally to each of the high-level I/O 
packages; its purpose is to represent an external file. The File 
Control Block contains all of the I/O-specific information about 
an external file needed by the high-level I/O packages to 
accomplish requested I/O operations. 


F.11.1 Naming External Files 

The naming conventions for external files in Ada/M are of 
particular importance. All of the system-dependent information 
needed by the I/O subsystem about an external file is contained 
in the file name. External files may be named using one of three 
file naming conventions: standard, temporary, and user-derived. 


F.11.1 Naming External Files 


F-33 






Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.11.1.1 Standard File Names 

The star4dard external file naming convention used in Ada/M 
identifies the specific location of the external file in terms of 
the physical device on which it is stored. For this reason, you 
should be aware of the configuration of the peripheral devices on 
the AN/UYK-44 or AN/AYK-14 at your particular site. 

Standard file names consist of a six character prefix and a 
file name of up to fourteen characters. The six character prefix 
has a predefined format. The first and second characters must be 
either ''CT," "MT," or "tt," designating an AN/USH-26 Signal Data 
Recorder/Reproducer Set, the RD-358 Magnetic Tape Subsystem, or 
the AN/USQ-69 Data Terminal Set, respectively. These characters 
must be in upper case. 

The third and fourth characters specify the channel on which 
the peripheral device is connected. Since there are sixty-four 
channels on the Ada/M system, the values for the third and fourth 
positions must lie in the range "00" to "63." 

The range of values for the fifth position in the external 
file nar.e's prefix (the unit number) depends upon the device 
specified by the characters in the first and second positions of 
the external file name. If the specified-peripheral device is 
the AN/USH-26 magnetic tape drive, the character in the fifth 
position must be one of the characters "0," "1," "2," or 
"3." This value determines which of the four tape cartridge 
units available on the AN/USH-26 is to be accessed. If the 
specified peripheral device is the RD-358 magnetic tape drive, 
the character in the fifth position must be one of the characters 
"0," "1," "2," or "3." This value determines which of the four 
tape units available on the RD-358 is to be accessed. If the 
specified peripheral device is the AN/USQ-69 militarized display 
terminal, the character in the fifth position must be a "0." The 
AN/USQ-69 has only one unit on a channel. 

The colon (;; is the only character allowed in the sixth 
position. If any character other than the colon is in this 
position, the file name will be considered non-standard and the 
file will reside on the default device defined during the 
elaboration of CONFIGURE^IO. 

Positions seven through twenty are optional to your Ada 
program and may be used as desired. These positions may contain 
any printable character you choose in order to make the file name 
more intelligible. Embedded blanks, however, are not allowed. 


F-34 


F.11.1.1 Standard File Names 




Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


The location of an external file on a peripheral device is 
thus a function of the first six characters of the file name 
regardless of the characters that might follow. For example, if 
the external file ''CT000:Old_Data" has been created and not 
subsequently closed, an attempt to create the external file 
"CTOOO;New_Data'' will cause the exception DEVICE^ERROR (rather 
than NAME__ERROR or USE_ERROR) to be raised because the peripheral 
device on channel "00" and cartridge "0" is already in use. 

You are advised that any file name beginning with "xxxxx:" 
(where x denotes any printable character) is assumed to be a 
standard external file name. If this external file name does not 
conform to the Ada/M standard file naming conventions, the 
exception NAME_ERROR will be raised. 


F.11.1.2 Temporary File Names 

Section 14.2.1 of the Ada Language Reference Manual defines a 
temporary file to be an external file that is not accessible 
after completion of the main subprogram. If the null string is 
supplied for the external file name, the external file is 
considered temporary. In this case, the high level I/O packages 
internally create an external file name to be used by the lower 
level I/O packages. The internal naming scheme used by the I/O 
subsystem is a function of the type of file to be created (text, 
direct or sequential), the temporary nature of the external file, 
and the number of requests made thus far for creating temporary 
external files of the given type. This scheme is consistent with 
the requirement specified in the Ada Language Reference Manual 
that all externr.l file names be unique. 

The first three characters of the file name are "TEX," "DIR," 
or "SEQ." The next six characters are "_TEMP The remaining 
characters are the image of an integer which denotes the number 
of temporary files of the given type successfully created. There 
are two types of temporary files? one is used by SEQUENTIAL_IO 
and DIRECT_IO, and the other is used by TEXT_IO. For instance, 
the temporary external file name "TEX_TEMP_10" would be the name 
of the tenth temporary external file successfully created by your 
Ada program through calls to TEXT__IO. 


F.11.1.2 Temporary File Names 


F-35 




Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


P.11.1.3 Dser-Derived Pile Names 

A random string containing a sequence of characters of length 
one to twenty may also be used to name an external file. 

External files with names of this nature are considered to be 
permanent external files. You are cautioned from using names 
which conform to the scheme used by the I/O subsystem to name 
temporary external files (see list item ‘'b”). 

It is not possible to associate two or more internal files 
with the same external file. The exception USE__ERROR will be 
raised if this restriction is violated. “ 


P.11.2 The PORM Specification for External Piles 

Section 14.2.1 of the Ada Language Reference Manual defines a 
string argument called the FORM, which supplies system-dependent 
information that is sometimes required to correctly process a 
request to create or open a file. In Ada/M, the string argument 
supplied to the FORM parameter on calls to CREATE and OPEN is 
retained while the file is open, so that calls to the function 
FORM can return the string to your Ada program. Form options 
specified on calls to CREATE have the effects stated below. Form 
options specified on calls to OPEN have no effect. 

The REWIND and APPEND options are mutually exclusive; an 
attempt to specify both options on a call to CREATE will raise 
the exception USE_ERROR. 

The NOHEAD option may be specified in combination with either 
the REWIND or the APPEND option. 

If one form option is specified, the FORM string should 
contain only the option, without any extraneous characters. If 
two form options are specified, the FORM string should contain 
the first form option followed by a comma followed by the second 
form option. The form options may be specified in any 
combination of upper and lower case. 

If the supplied FORM string is longer than the maximum 
allowed FORM string (13 characters), CREATE and OPEN will raise 
the exception USE^ERROR. 

If the procedure CREATE does not recognize the options 
specified in the FORM string, it raises the exception USE__ERROR. 
The procedure OPEN does not validate the contents of the supplied 
FORM string. 


F-36 


F.11.2 The FORM Specification for External Files 











Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


Positioning arguments allow control of tape before its use. 
The following positioning arguments are available: 

a. REWIND - specifies that a rewind will be performed prior to 
the requested operation. 

b. NOREWIND - specifies that the tape remains positioned as is. 

c. APPEND - specifies that the tape be positioned at the logical 
end of tape (LEOT) prior to the requested operation. The 
LEOT is denoted by two consecutive tape_marks. 

Note that, to ensure a tape file created by a previous 
program is available for use by a new program, you must have 
knowledge of the tape being used and must use the APPEND form 
option when creating new files. 

The formatting argument specifies information about tape 
format. If a formatting argument is not supplied, the file is 
assumed to contain a format header record determined by the ALS/N 
I/O system. The following formatting argument is available: 

a. NOHEAD - specifies that the designated file has no header 
record. This argument allows the reading and writing of 
tapes used on computer systems using different header 
formats. Note that files created with the NOHEAD option 
cannot be opened by the Ada/M I/O subsystem. 


F.11.3 File Processing 

Processing allowed on Ada/M files is influenced by the 
characteristics of the underlying device. The following 
restrictions apply: 


a. Only one file may be open on an individual AN/USH-26 tape 
cartridge at a time. 

b. Only one input and one output file may simultaneously be open 
on an AN/USQ-69 terminal at one time. 

c. An Ada program is erroneous if it does not close or delete 
all files it creates or opens. 

d. The attempt to CREATE a file with the mode IN FILE is not 
supported since there will be no data in the ?ile to read. 


F.11.3 File Processing 


F~37 








Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.li.4 Text Input/Output 

TEXT 10 is invoked by your Ada program to perform sequential 
access l7o operations on text files (i.e, files whose content is 
in human-readable form). TEXT_IO is not a generic package and, 
thus, its subprograms may be invoked directly from your program, 
using objects with base type or parent type in the 
language-defined type character. TEXT_I0 also provides the 
generic packages INTEGER_IO, FLOAT__IO, FIXED 10, and 
ENUMERATION_IO for the reading and^writing 61 numeric values and 
enumeration values. The generic packages within TEXT^IO require 
an instantiation for a given element type before any of their 
subprograms are invoked. The specification of this package is 
given in Section 14.3.10 of the Ada Language Reference Manual. 

The implementation-defined type COUNT that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows; 


type COUNT is range 0..INTEGER*LAST; 

The implementation-defined subtype FIELD that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows; 


subtype FIELD is INTEGER range 0..INTEGER'LAST; 

At the beginning of program execution, the STANDARD_INPUT 
file and the STANDARD^OUTPUT file are open, and associated with 
the files specified by you at export time. Additionally, if a 
program terminates before an open file is closed (except for 
STANDARD_INPUT and STANDARD_OUTPUT), the last line added to the 
file may be lost; if the file is on magnetic tape, the file 
structure on the tape may be inconsistent. 

A program is erroneous if concurrently executing tasks 
attempt to perform overlapping GET and/or PUT operations on the 
same terminal. The semantics of text layout as specified in the 
Ada Language Reference Manual, Section 14.3.2, (especially the 
concepts of current column number and current line) cannot be 
guaranteed when GET operations are interweaved with PUT 
operations. A program which relies on the semantics of text 
layout under those circumstances is erroneous. 

For TEXT_IO processing, the line length can be no longer than 
532 characters. An attempt to set the line length through 
SET_LINE_LENGTH to a length greater than 532 will result in 
USE ERROR. 


F-38 


F.li.4 Text Input/Output 








Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


F.11.5 Sequential Input/Output 

SEQUENTIAL__IO is invoked by your Ada program to perform I/O 
on the records of a file in sequential order. The SEOUENTIAL_10 
package also requires a generic instantiation for a given element 
type before any of its subprograms may be invoked. Once the 
package SEQUENTIAL_IO is made visible, it will perform any 
service defined by the subprograms declared in its specification. 
The specification of this package is given in Section 14.2.3 of 
the Ada Language Reference Manual. 

The following restrictions are imposed on the use of the 
package SEQUENTIAL^IO: 

a. SEQUENTIAL_IO cannot be instantiated with an unconstrained 
array typeT 

b. SEQUENTIAL_IO cannot be instantiated with a record type with 
discriminants with no default values. 

c. Ada/M does not raise DATA^^ERROR on a read operation if the 
data input from the external file is not of the instantiating 
type (see the Ada Language Reference Manual, Section 14.2.2). 


F.11.6 Direct Input/Output 

Calls to the subprograms of an instantiation of DIRECT__IO 
have one of three possible outcomes. The exception USE ERROR is 
raised if an attempt is made to CREATE and/or OPEN a fiTe since 
direct access I/O operations are not supported in Ada/M. The 
exception STATUS_ERROR is raised on calls to subprograms other 
than CREATE, OPEN, and IS_OPEN. The function IS_OPEN always 
returns the value FALSE. 

The implementation-defined type COUNT that appears in Section 
14.2.5 of the Ada Language Reference Manual is defined as 
follows: 


type COUNT is range 0..LONG_INTEGER'LAST. 

The following restrictions are imposed on the use of the 
package DIRECT_IO: 

a. DIRECT 10 cannot be instantiated with an unconstrained array 
type. 

b. DIRECT_IO cannot be instantiated with a record type with 
discriminants with no default values. 


F.11.6 Direct Input/Output 


F-39 








Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


P.11.7 Low Level Input/Output 

LOW__LEVEL_IO is invoked by your Ada program to initiate 
physical operations on peripheral devices, and thus executes as 
part of a program task. Requests made to LOW_LEVEL_IO from your 
program are passed through the RTEXEC GATEWAY to the channel 
programs in CHANNEL^IO. Any status cHeck or result information 
is the responsibility of the invoking subprogram and can be 
obtained from the subprogram RECEIVE_CONTROL within LOW_LEVEL_IO. 

The package LOW_LEVEL_IO allows your program to send I/O 
commands to the I/O devices (using SEND_CONTROL) and to receive 
status information from the I/O devices~(using RECEIVE__CONTROL). 

A program is erroneous if it uses LOW LEVEL_IO to access a device 
that is also accessed by high-level l7o packages such as 
SEQUENTIAL_IO and TEXT_IO. The following is excerpted from the 
package LOW_LEVEL_IO. 

— IO_CHANNEL RANGE is the type for the parameter DEVICE 

— for both SEND___CONTROL and RECEIVE__CONTROL. DEVICE 

— identifies whTch device to perform the operation for, 

— and the channel number is a convenient means for 

— identifying a device. 

SUBTYPE io_channel_range IS integer RANGE 0..63; 

— Range of values allowed for channel 
— number. 


SUBTYPE buffer_address IS system.physical_address; 

— Type of variables used to specify 

— address of buffer for the I/O 

— operation. 

SUBTYPE command_word IS long_integer RANGE 0..65535; 
SUBTYPE operation IS INTEGER; 

TYPE send__control_block IS 

— data passed to SEND_CONTROL for operations on 

— ALL devices. • ~ 

RECORD 

operation ; low_level_io.operation; 

— Indicates what kind of operation is requested 

— of LOW_LEVEL 10: read data, write data, 

— control, or Initialize, 

command ; low_level_io.command_word; 

— This is the co^mmand to send to the device 

data_length ; integer range 0..integer'last; 

— Indicates number of words of data in the 

— buffer. 


F-40 


F.11.7 Low Level Input/Output 









Ada/M PSE Handbook 


Version 4.0 
30 Decemoer 1991 


buffer_addr : low level_io.buffer address; 

— physical address of data buffer. 

io_channe_l : io_channel_range ;= 0; 

— The I/O channel being communicated with. 

unit : integer range 0..10 :« 0; 

— The unit number on the channel. 


END RECORD; 


— Data structures used in communication with the AN/USH-26. 

ush26_programs ; CONSTANT := 3; 

— This is the number of channel programs in 
— CHANNEL__IO for AN/USH-26 devices. 

SUBTYPE ush26_operation IS operation; 

— Used to indicate to CHANNEL^IO which channel 

— program to use. “ 

ush26_reset channel ; CONSTANT ush26_operation ;= 0; 

ush26_read_3ata ; CONSTANT ush26_operation ;= 1; 

ush26~write__data : CONSTANT ush26_operation := 2; 

ush26”control ; CONSTANT ush26”operation ;= 3; 

SUBTYPE ush26_data IS send_control block; 

— data passed to SEND CONTROL for operations on 
— AN/USH-26 devices. 

— Data structures used in communication with the AN/USQ-69. 


usq69_programs : CONSTANT ;= 4; 

— This is the number of channel programs in 
— CHANNEL 10 for AN/USQ~69 devices. 


SUBTYPE usq69_operation IS operation; 

— Used to indicate to CHANNEL^IO which channel 
— program to use. 


usq69_reset_channel 
usq69_header 
usq69_read__data 
usq6 9__wr i te__da t a 
usq69~eot 


CONSTANT usq69_operation := 0 
CONSTANT usq69~operation := 1 
CONSTANT usq69_operation ;* 2 
CONSTANT usq69“operation := 3 
CONSTANT usq69_operation := 4 


SUBTYPE usq69_data IS send_control_block; 

— information needed to do I/O“to a AN/USQ-69. device. 

rd358_programs : CONSTANT :* 3; 

— This is the number of channel programs in 
— CHANNEL 10 for RD-358 devices. 


F.11.7 Low Level Input/Output 


F-41 






Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


SUBTYPE rd358_operation IS operation; 

— Used to indicate to CHANNEL_IO which channel 

— program to use. 

rd358_reset channel : CONSTANT rd358__operation :* 0; 

rdSSB^readJffata : CONSTANT rd358“operation ;* 1; 

rd358_write__data : CONSTANT rd3583operation ;» 2; 

rd358_control ; CONSTANT rdSSS^operation :* 3; 

SUBTYPE rd358_data IS send_control_block; 

— information needed to do I/O”to an RD-358 device. 

— Below are the types used for intercomputer I/O operations. 

ic_programs : CONSTANT :® 10; 

— This is the number of channel programs in 
— CHAN:JEL_I0 for AN/USH-26 devices. 

SUBTYPE intercomputer^operation IS operation; 

— Used to indicate to CHANNEL__IO which channel 
— program to use. ~ 

ic^reset channel : CONSTANT intercomputer__operation :* 0; 

ic_read__3ata ; CONSTANT intercomputer~operation := 1; 

ic~write_data : CONSTANT intercoroputer”operation ;= 2; 

ic~control : CONSTANT intercomputer”operation ;* 3; 


SUBTYPE intercomputer data IS send__control__block; 

— information needed to do I/O to an 

— intercomputer channel 


— Data type identifiers for RECEIVE_CONTROL. 

TYPE io_status_word IS NEW long__integer RANGE 0..65535; 
— Used to pass I/O status word to 
— RECEIVE CONTROL. 


SUBTYPE external_interrupt_word IS 
system.external_interrupt_^word; 


— SENDjCONTROL is an overloaded Ada procedure which passes I/O 

— control information to a procedure in CHANNEL_IO in order to 

— carry out a read, write, or control operation. In Ada/M, 

— there are two overloaded subprograms for SENDJCONTROL, one 

— to be used when the physical channel number is already - 

— known, and one to be used when only a logical device name is 

— available. 


r-42 


F.11.7 Low Level Input/Output 







Ada/M PS£ Handbook 


Version 4.0 
30 December 1991 


— If the version which uses a logical device name is used, it 

— will return the channel and unit numbers in the data record 

— for use in subsequent calls to LOW_^LEVEL_IO. 

— It is recommended that for speed purposes, the logical name 

— be used only on the first request (usually the RESET 

— request). The actual channel and unit numbers will be 

— returned by this request and can be used in subsequent 

— requests. 

— SEND_CONTROL for all devices when the channel number 

— (the device) is already known. 

PROCEDURE SEND_CONTROL ( 

device ; IK low_level_io.io_channel_range; 

— Channel number of the peripheral device. 

data : IN OUT low_level__io.send_control__block 
— I/O control information for ALL devices. 


); 


— SEND_CONTROL for all devices when using a 

— logical device name. 

PROCEDURE SEND_CONTROL ( 

device ; IN STRING 

— The logical device name of the 
— device to communicate with. 

data ; IN OUT low level_io.send control block 
— I/O controT information ?or ALL devices. 


); 


— RECEIVE_CONTROL is a procedure which passes I/O control 

— information to a procedure in CHANNEL_IO in order to obtain 

— the value of the status word for the specified channel. 

a 

PROCEDURE RECEIVE_CONTROL ( 

device ; IN low_level_io.io_channel__range; 

— Specifies device type for which status is requested. 

data ; IN OUT lo-w_level_io.io_status_word 
—’ Returns the”status word““for 
— the channel specified. 

); 


RECEIVE_CONTROL for getting the external interrupt 


F.11.7 Low Level Input/Output 


F-43 







Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


— data for the specified channel. 

PROCEDURE RECEIVE_CONTROL ( 

device ; IN low^level__io.io_channel_range; 

— Channel number of the peripheral device. 

data ; IN OUT low_level_io.external_interrupt_word 
— External interrupt word for channel specified. 


); 


— RECEIVE^CONTROL for getting input transfer count 

— for the^specified channel. 

PROCEDURE RECEIVE__CONTROL ( 

device : IN low__level_^io.io_channel_range; 

— Channel number of the peripheral device. 

data ; IN OUT integer 

— Input count for channel specified. 


); 


F.12 System-Defined Exceptions 

In addition to the exceptions defined in the Ada Language 
Reference Manual, this implementation pre-defines the exceptions 
shown in Table F-2 below. 


F-44 


F.12 


System-Defined Exceptions 







Ada/M PSE Handbook 

Version 
30 December 

4.0 

1991 

1 

Name 

Significance 

1 

1 

I 

1 

1 

1 

ACCESS_CHECK 

The ACCESS CHECK exception has been 
raised explicitly within the program. 

1 

1 

1 

1 

1 

i 

1 

1 

1 

CAPACITY_ERROR 

Raised by the Run-Time Executive when 
Pre-Runtime specified resource limits 
are exceeded. 

1 

1 

1 

1 

1 

1 

1 

1 

1 

1 

DISCRIMINANT CHECK 

DISCRIMINANT^CHECK exception has been 
raised explicitly within the program. 

1 

1 

1 

1 

I 

1 

1 

1 

1 

DIVISION_CHECK 

The DIVISION^CHECK exception has been 
raised explicitly within the program. 

i 

1 

1 

1 

1 

1 

1 

1 

1 

1 

ELABORATION CHECK 

" The ELABORATION CHECK exception has 

been raised explicitly within the 
program. 

1 

1 

\ 

1 

1 

1 

INDEX_CHECK 

The INDEX_CHECK exception has been 
raised explicitly within the program. 


1 

1 

1 

1 

LENGTH_CHECK 

The LENGTH CHECK exception has been 
raised explicitly within the program. 


1 

1 

1 

1 

OVERFLOW_CHECK 

The OVERFLOW_CHECK exception has been 
raised explicitly within the program. 


1 

1 

1 

1 

RANGE_CHECK 

The RANGE_CHECK exception has been 
raised explicitly within the program. 


1 

1 

1 

1 

SYSTEM_ERROR 

Serious error detected in underlying 
AN/uyK-43 operating system. 


1 

1 

i 

1 

1 

1 

UNRESOLVED REFERENCE 

• Attempted call to a subprogram whose 
body is not linked into the executable 
program image. 

..f 

T* 

Table 

F-2 - System Defined Exceptions 



F.12 System-Defined Exceptions 


F-45 














Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


F.13 Machine Code Insertions 

The Ada language permits machine code insertions as defined 
in Section 13.8 of the Ada Language Reference Manual. This 
section describes the specific details for writing machine code 
insertions as provided by the predefined package MACHINE_CODE. 

You may, if desired, include AN/UYK-44 or AN/AYK-14 
instructions within an Ada program. This is done by including a 
procedure in the program which contains only record aggregates 
defining machine instructions. The package MACHINE_CODE, 
included in the system program library, contains type, record, 
and constant declarations which are used to form the 
instructions. Each field of the aggregate contains a field of 
the resulting machine instruction. These fields are specified in 
the order in which they appear in the actual instruction. 

A procedure containing machine-code insertions looks similar 
to this; 

with machine_code; use machine_code; 
procedure machine_samples is 
begin 

instr'(OPCODE,A,M,Y); — first instruction 

instr'(OPCODE,A,M,Y); — second instruction 

• « • 

instr’(OPCODE,A,M,Y); — last instruction 
end; 

OPCODE, A, M, and Y in all these examples are replaced by the 
actual opcode, A register, M register, and Y field desired for 
each AN/UYK-44 or AN/AYK-14 instruction. Whenever possible, 
MACRO/M mnemonics are used to specify the opcode field. The A 
and M register fields are specified as RO, Rl, ... R15. The Y 

field may be specified by any static expression which will fit in 
a 16-bit integer. For certain instructions such as unary 
arithmetic operations, the opcode and either the A or M register 
determine which instruction is executed. The specification of 
these instructions and certain others is somewhat more 
complicated and is explained in detail below.* Here are some 
examples of possible MACRO/M instructions and the Ada/M record 
aggregates that correspond to them: 


MACRO/M 

Ada/M 

spt 

A,Y,M 

instr'(spt,A,M,Y); 

Ir 

A,M 

instr'(Ir,A,M); 

1 

A,Y,M 

instr•(1,A,M,Y); 

mi 

A,M 

instr'(mi,A,M); 
instr'(ork,A,M,Y); 

ork 

A,Y,M 


F-46 


F.13 Machine Code Insertions 








Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


In some cases, A or M register fields do not appear in the 
MACRO/M instruction because the field is always zero in the 
machine instruction. RO must be used in that field of the record 
aggregate in Ada/M, however, since no missing fields are allowed. 
Here are some examples where that occurs: 

MACRO/M Ada/M 


Ipi M 
Ip Y,M 
sfsc H 


instr‘(lpi,rO,M); 
instr*{lp#rO,M,y); 
instr*(sfsc,rO,M); 


Some MACRO/M mnemonics are ambiguous and are assembled into 
one of two or more opcodes based on the operands specified in the 
instruction. Ada/M opcode mnemonics must be unambiguous, so 
either the letter K (indicating an RK format instruction) or the 
letter X (indicating an RX format instruction) has been added to 
the end of otherwise ambiguous mnemonics. Some examples of this 
are as follows: 

MACRO/M Ada/M 


jz A,Y,M instr*(jzk,A,M,Y); 

jp A,*Y,M instr'(jpx,A,M,Y); 


For those MACRO/M mnemonics which determine both the opcode 
and either the A or M register, the MACRO/M mnemonic 
(disambiguated as above if necessary) is used for the A or M 
field and an opcode mnemonic is invented. Some examples of this 
are as follows: 


MACRO/M 

Ada/M 

pr A 

instr' 

drtr A 

instr * 

sqr A 

instr' 

jne Y,M 

instr * 

her 

instr' 


(ua_opcode,A,pr); 
(ua_opcode,A,drtr); 
(us_opcode,A,sqr); 
(cjkjopcode,jnek,M,Y); 
(ec_opcode,hcr,rO); 


F.13 Machine Code Insertions 


F“47 













Version 4.0 Ada/M PSE Handbook 

30 December 1991 


You must be able to include data as well as instructions in 
machine code. The MACHINE CODE package defines record types 
which allow you to create Indirect words, signed bytes, unsigned 
bytes, words, double words, and floating point numbers. The 
format for including data is as follows: 

Data Ada/M 


indirect word (iw J,Y,X) indirect__word'(Jf X,Y); 

unsigned byte (0 .. 255) unsigned“byte_vaiue'(VALUE); 
word (16-bit value) word_value'(VALUE); 

double word (32-bit value) doubTe_word_value'(VALUE); 
float value (32-bit value) float value’(VALUE); 


Table F-3 contains a list of MACRO/M instructions and their 
Ada/M machine code equivalents, sorted by MACRO/M mnemonic. 


F-48 


F.13 Machine Code Insertions 





Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


I MACRO/M 

-- 

I a A,Y,M. 

I acos A 
acr M 
ad A,Y,M 
adi A,H 
adr A,M 
ai A,M 
ak A,Y,M 
aid A,Y,M 
aldr A,M 
alog A 
als A,Y,M 
alsr A,M 
and A,Y,M 
andi A,M 
andk A,Y,M 
andr A,M 
I ar A,M 
I ard A,Y,M 
I ardr A,M 
I ars A,Y,M 
I arsr A,M 
I asin A 
I atan A 
i ba A,Y,M 
I be A,Y,M 
I bci A,M 
I bex A,Y,M 
I bexi A,M 
bf Y,M 
bfi M 
bl A,Y,M 
bli A,M 
blx A,Y,M 
blxi ArM 
bs A,Y,M 
bsi A,M 
bsu A,Y,M 
bsx A,Y,M 
bsxi A,M 

built-in test - dec 
built-in test - eec 


instr’(a,A,M,Y); 
instr*{mf_opcode,A,acos) 
instr•(Ipar,rO,M); 
instr'(ad,A,M,Y); 
instr*(adi,A,N}; 
instr*(adr,A,M); 
instr *(ai,A,M); 
instr'(ak,A,M,Y); 
instr *(ald,A,M,Y); 
instr *(aldr,A,M); 
instr*(mf opcode,A,alog) 
instr *(als,A,M,Y); 
instr *(alsr,A,M); 
instr *(and,A,M,Y); 
instr*(andi,A,M); 
instr*(andk,A,M,Y); 
instr'(andr,A,M); 
instr *(ar,A,M); 
instr'(ard,A,M,Y); 
instr'(ardr,A,M); 
instr’(ars,A,M,Y); 
instr'(arsr,A,M); 
instr'(mf opcode,A,asin); 
instr*(mf“opcode,A,atan); 
instr’{ba7A,M,Y); 
instr'(bc,A,M,Y); 
instr’(bci,A,M); 
instr’(bcx,A,M,Y); 
instr *(bexi,A,M); 
instr'(bf,rO,M,Y); 
instr*(bfi,rO,M); 
instr *(bl,A,M,Y); 
instr *(bli,A,M); 
instr*(blx,A,M,Y); 
instr*(blxi,A,M); 
instr*{bs,A,M,Y); 
instr*(bsi,A,M); 
instr'(bsu,A,M,Y); 
instr'(b8x,A,M,Y); 
instr *(bsxi,A,M); 
instr'(bit_opcode,dec); 
instr’(bit_opcode,eec); 


Table F-3a - Machine Code Instructions 


P.13 Machine Code Insertions 


F-49 






Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


+-+ 

I MACRO/M Ada/M I 

+-+ 

built-in test - icp instr‘(bit_opcode,icp); I 

built-in test - ids instr'(bit_opcode,ids); 

built-in test - imp instr’(bit_opcode,imp); 

built-in test - Irm instr'(bit_opcode,lrm); 

built-in test - tscs instr*(bit_opcode,rscs); 

built-in test - sel instr' (bit__opcode,sel); 

built-in test - srm instr'(bit_opcode,srm); 

c A,y,M instr'(c,A,M,y); 

cbr A,M instr'(cbrrA,M); 

ccr A,M instr'(Ipar,A/M); 

cd A,Y,M instr'(cd/A/M/Y); 

cdi A/M instr'(cdi,A,M); 

cdr A,M instr'(cdr,A,M); 

ci A,M instr'(ci,A,M); 

ck A/Y,M instr*(ck,A,M/Y); 

cl A,Y,M instr’(cl,A,M,Y); 

cld A,Y,M instr'(cld,A,M,Y); 

cldr A,M instr'(cldr,A/M); 

cli A,M instr'(cli/A,M); 

elk A,Y/M instr’(clk/A/M/Y); 

clr A/M instr'(clr/A/M); 

els A/Y,M instr'(clS/A/M/Y); 

clsr A,M instr’(clsr,A/M); 

cm A/Y/M instr’(cm/A,M/Y); 

cmi A,M instr'(cmi/A,M); 

cmk A,Y,M instr‘(cmk/A/M/Y); 

cmr A/M instr'(cmr/A/M); 

ent A instr’(us_opcode,A/cnt)? 

cos A instr'(mf_opcode,A/cos); 

cr A,M instr’(cr/A/M); 

d A,Y,M instr’(d,A/M/Y); 

data - double word double_word value’(VALUE); 

data - float float value'’’(VALUE); 

data - signed byte signe3_byte_value’(VALUE); 

data - unsigned byte unsigned_byte_value'(VALUE); 

data - word word__value' (VALUE); 

dcir instr'(uc_opcode,rO/dcir); 

dcr instr'{uc“opcode/rO,dcr); 

dd A/Y/M instr'(dd/A/M,Y); 

ddi A/M instr'(ddi,A/M); 

ddr A,M instr’(ddr,A,M); 

di A/M instr*(di,A/M); 

dk A/Y/M instr*(dk/A,M/Y); 

--- 

Table F-3b - Machine Code Instructions (Continued) 


F-50 


F.13 Machine Code Insertions 









Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


MACRO/M 

Ada/H 

dm 

instr ' (uc__opcode, r0,dm); 

dr A,M 

instr'(dr,A,M); 

dror A 

instr'(ua opcode,A,dror); 

drtr A 

instr'(ua opcode,A,drtr); 

ecir 

instr' (uc__opcode,r0,ecir); 

ecr 

instr'(uc opcode,rO,ecr); 

er A 

instr'(uc opcode,A,er); 

exp A 

instr'(mf_opcode,A,exp); 

fa A,y,M 

instr'{fa,A,M,Y); 

fai A,M 

instr'(fai,A,M)j 

far A,M 

instr'(far,A,M); 

fc A,y 

instr'{mp opcode,A,fc); 
wor3 value'(Y); 

fd A,Y,M 

instr'(fd,A,M,Y); 

fdi A,M 

instr'{fdi,A,M); 

fdr A,M 

instr'(fdr,A,M); 

flc A 

instr'(mp opcode,A,flc); 

fled A 

instr'(mp_opcode,A,flcd); 
instr'(fm,A,M,Y); 

fm A,Y,M 

fmi A,M 

instr'(fmi,A,M); 

fmr A,M 

instr’(fmr,A,M); 

fsu A,Y,M 

instr'(fsu,A,M,Y); 

fsui A,M 

instr’(fsui,A,M); 

fsur A,M 

instr'(fsur,A,M); 
instr'(mp_opcode,A,fxc); 
instr’(mp~opcode,A,fxed); 
instr'(us opcode,A,ib); 

fxc A 

fxed A 

ib A 

ick A,Y 

instr'(e6_opcode,A,ick,Y); 

ioc A,Y,M 

instr'(iocr,A,M); 

word value'(Y); 

iocr 

instr'(iocr , rO,rO); 

iror A 

instr'(ua opcode,A,iror); 

irtr A 

instr'(ua_opcode,A,irtr ); 

is A 

instr'(us_opcode,A,is); 
indirect word'(J,X,Y); 

iw Y,Y,X 

j *Y,M 

instr'(cJx_opcode,jx,M); 

j Y,M 

instr'(cjk_opcode,jk,M); 

jb *Y,M 

instr'{cjx_opcode,jbx,M); 

jb Y,M 

instr'{cjk_opcode,jbk,M); 
instr'(cjr_opcode,jbr,Mj; 
instr'(cjx_opcode,jcx,M); 

jbr M 

jc *Y,M 

jc Y,M 

instr'(cjk_opcode,jck,M); 
instr ' (cjr__opcode, jer ,M); 
instr'(cjx_opcode,jex,M) ; 

jer M 

je *y,M 

je Y,M 

instr'(cjk_opcode,jek,M); 


Table F-3c Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-51 









Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


! MACRO/M Ada/M 1 

+---+ 

jer M instr*(cjr_opcode,jer,M); 1 

jge *y,M instr'(cjx_opcode,jgex,M); j 

jge Y,M instr' (cjk~opcode, jgek,M) ;• 1 

jger M instr'icjr”opcodefjger.M); I 

jks 1,*Y,M instr’{cjx_opcode,jksxl,M); j 

jks 1,Y,M instr*(cjk_opcode/jkskl,M); I 

jks 2,*Y,M instr'(cjx_opcode,jksx2,M); I 

jks 2,Y,M instr'(cjk_opcode^jksk2,M); I 

jksr 1,M instr ’ {cjr_opcodeoksrl,M); 1 

jksr 2,M instr*(cjr_opcode,jksr2,M); 1 

jlm *Y,M instr'{jlmx,rO,M,Y); I 

jlm Y,M instr‘ijlmk,rO,M/Y); I 

jlr A,*Y,M instr'(jlrx,A,M,Y); I 

jlr A,Y,M instr'(jlrk,A,M,Y); 1 

jlrr A,M instr‘(jlrr,A,M); I 

jls *Y,M instr'(cjx_opcode,jlsx,M); j 

jls Y,M instr'(cjk_opcode,jlsk,M); | 

jlsr M instr’(cjr_opcode,jlsr,M); j 

jn A,*Y/M instr•(jnx,A,M,Y); i 

jn A,Y,M instr’(jnk,A,M,Y)J I 

jne *Y,M instr ’ (cjx_opcodeonex,M); i 

jne Y,M instr’{cjk_opcode,jnek,M); I 

jner M instr'(cjr^opcode,jner,M); 1 

jnr A,M instr'(jnr,A,M); I 

jnz A,*Y,M instr'(jn 2 X,A,M,Y); j 

jnz A,y,M instr'(jnzk,A,M,Y); ! 

jnzr A,M instr'(jnzr,A,M); I 

jo *Y,M instr’(cjx_opcode,jox,M); i 

jo y,M instr'(cjk_opcode,jok,M); j 

jor M instr'(cjr^opcodefjor,M); 1 

jp A,*Y,M instr’{jpx7A,M,Y); j 

jp A,Y,M instr’(jpk,A,M,y); 1 

jpr A,M instr'(jpr,A,M); 1 

jpt *Y,M instr ' (cjx_opcode,jptx,M) r I 

jpt y,M instr' (cjk_opcode,jptk,M) ,* I 

jptr M instr'(cjr_opcode,jptr, M) ; I 

• jr M instr'(cjr_opcode,jr,M); I 

I js *Y,M instr•(cjx_opcodefjsx,M); j 

1 js Y,M instr ’ (cjk_opcodeosk,M); 1 

j jsr M instr' (cjr~opcodeosr ,M) ; I 

j jz A,*Y,M instr’(j2x7A,M,Y); i 

I jz A,y,M instr '( jzk,A,M,Y) ; j 

1 jzr A,M instr•(jzr,A,M); | 

------+ 


Table F-3d - Machine Code Instructions (Continued) 


F-52 


F,13 Machine Code Insertions 










Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


MACRO/M 

Ada/M 

—+ 

1 

1 A,Y,M 

instr'(1,A,M,Y); 


la A,M 

instr'(la,A,M); 


lad A,M 

instr*(ladfA,M); 


laid A,M 

instr'(laid,A,M); 


IdXs AfM 

instr'(lals,A,M); 


lard A,M 

instr'(lard,A,M); 


lari A,M 

instr'(lari,A,M); 


larm A,Y,M 

instr'(larm,A,M,Y); 


larr A,M 

instr'(larr,A,M); 


lars A,M 

instr’(lars,A,M); 


Ibxi A,Y,M 

instr'(lbxi,A,M,Y}; 


IC A,M 

instr'(lc,A,M); 


Icep A 

instr'(us opcode,A,Icep); 


Iclc A,M 

instr'(Iclc,A,M); 


Icld A,M 

instr'(Iclc,A,M); 


Icr A 

instr'(uc opcode,A,Icr); 


Icrd A 

instr'(uc opcode,A,Icrd); 


Id A,Y,M 

instr'(ld,A,Y,M); 


Idi A,M 

instr'(Idi,A,M); 


Idiv A,M 

instr'(Idiv,A,M); 


Idx A,Y,M 

instr' (ldx,A,M,Y) ,* 


Idxi A,M 

instr'(Idxi,A,M); 


lem A 

instr’(uc_opcode,A,lem); 


li A,M 

instr'(li,A,M); 


lir A,M 

instr’{lir,A,M) ; 


Ij D 

instr’(1j,D); 


Ije D 

instr'(1je,D); 


Ijge D 

instr'(1jge,D); 


Iji D 

instr'(1ji,D); 


Ijlm D 

instr' (1 jlni,D); 


Ijls D 

instr’(1jls,D) ; 


Ijne D 

instr'(1jne,D); 


Ik A,Y,M 

instr'(lk,A,M,y); 


11 A,M 

instr'(11,A,M); 


llrd A,M 

instr'(llrd,A,M); 


llrs A,M 

instr'(llrs,A,M); 


Im A,Y,M 

instr'(lm,A,M,Y); 


Imap A,Y,M 

instr ■ (linap,A,M,Y); 


Imr A,Y,M 

instr'(Imr,A,H,Y}; 


Imul A,H 

instr'(Imul,A,M); 


Ip Y,M 

instr'(lp,rO,M,Y); 

1 

Ipa A,Y,M 

instr’(lpa,A,M,Y); 

1 

Ipai A,M 

instr'(Ipai,A,M); 

1 

4 . 


Table F-3e - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-53 









Version 4.0 
30 December 1991 


Ada/M PSE Handbook 


MACRO/M 

Ada/M 

1 

Ipak A,Y,M 

Ipar A,M 

Ipi M 

instr'(Ipak,A,MrY); 
instr'(Ipar,A,M); 
instr’(lpi,r0rM); 


Ipl A,Y,M 

instr'(IplrArMrY); 


Ipli A,M 

instr *(Ipli,A,M); 


Ipr A 

instr*(uc_opcode,A,lpr); 
instr’(IrTA/M); 


Ir A,M 


Ird A,Y,M 

instr’(lrd,ArM,y); 


Irdr A,M 

instr'(Irdr,A,M); 


Irs A,Y,M 

instr'(lrs,A,M/Y); 
instr'(Irsr,A,M); 


Irsr A,M 


Isor A 

instr'(uc opcode,A,lsor); 


Istr A 

instr'(uc opcode,A,lstr); 


Isu A,M 

instr'(lsu,A,M); 


Isud A,M 

instr *(Isud,A,M); 


lx A,Y,M 

instr'(lx,A,M,y); 


Ixi A,M 

instr'(Ixi,A,M ); 


m A,y,M 

instr•(mrArMrY)? 


mb A,M 

instr'(robrA/M); 


mdi A,M 

instr'(mdi,ArM); 


mdm A,YfM 

instr'(mdm,ArM,Y); 


mdr A,M 

instr’(mdr,ArM); 


mi A,M 

instr *(mi,A,M); 

mk A,Y,M 

instr'(mk,A,M,y); 


mr A,M 

instr'(mr,A,M); 


ms A,Y,M 

instr’(mSrArM,Y)? 


msi A,M 

instr'(msirA,M)j 


msk A,Y,M 

instr’(msk,ArM,y); 


msr A,M 

instr'(msr,A,M); 


nf A 

instr'{mp_opcode,A,nf); 
instr*(ua opcode,A,nr); 


nr A 


ock A,Y 

instr'(e6 opcode,A,ock,y); 


ocr A 

instr•(ua_opcode,A,ocr); 
instr *(or,A,M,Y); 


or A,y,M 


ori A,M 

instr’(ori,A,M); 


ork A,Y,M 

instr'(ork,ArM,y); 


• orr A,M 

instr'(orr,A,M); 


pr A 

instr’(ua_opcoderA,pr); 


qal A,Y 

instr’(rop_opcode,A,qai); 
word value'(Y); 


qar A,y 

instr * (mp__opcode,A,qar); 
wolrd value'(Y); 


qgt A,Y,M 

instr'(qgtrA,MrY ); 
instr'(qpb,ArM,Y); 


qpb A,Y,M 

—+ 


Table F-3f - Machine Code Instructions (Continued) 


F-54 


F.13 Machine Code Insertions 










Ada/M PSE Handbook 


Version 4.0 
30 December 1991 


MACRO/M 


Ada/M 

I 

qpt A,Y,M 
rex YrM 
rf A 


instr'(qpt#A,M,Y); 
instr'(rex,rO,M,Y); 
instr‘(mp_opcode,A,rf); 
instr'(mp_opcode,A,rfp); 
instr'(mp_opcode,A,rh); 
instr'(mp_opcode,A,rhp ); 
instr'(smap,A,MrY); 

1 

1 

1 

rfp A 
rh A 


1 

! 

rhp A 
rim k,Y,K 


i 

1 

rr A 


instr'(ua opcode,A,rr); 

1 

rvr A 


instr'(us opcode,A,rvr); 

i 

S A,Y,M 


instr'(s,A,M,Y); 

1 

sari A,M 


instr'(sari,A,M); 

1 

sarm A,Y,M 


instr'(sarm,A,M,Y); 

1 

sarr A,M 


instr'{sarr,A,M); 

1 

sbr AfM 


instr'(sbr,A,M); 

1 

sbxi A,Y>M 


instr’(sbxi,A,M,Y); 

1 

scr A 


instr'(uc opcode,A,scr); 

1 

scrd A 


instr'(uc opcode,A,scrd); 

1 

sd A,Y,M 


instr'(sd,A,M,Y); 

1 

sdi A,M 


instr'(sdi,A,M); 

1 

Sdx A,Y,M 


instr'(sdx,A,M,Y); 

1 

sdxi A,M 


instr'(sdxi,A,M)j 

1 

sedr A,M 


instr'(sedr,A,M); 

! 

ser A,M 


instr'(ser,A,M); 

1 

sfr A 


instr'(us opcode,A,sfr); 

1 

sgt A,Y,M 


instr'{sgt,A,M,Y); 

1 

si A,M 


instr'(si,A,M ); 

1 

sin A 


instr'(mf_opcode,A,sin); 

1 

sir A,M 


instr'(sir,A,M); 

i 

sm A,Y,M 


instr'(sm,A,M,Y ); 

i 

smap ArYfM 


instr'{smap,A,M,Y); 

1 

smc A 


instr'(us opcode,A,smc); 

1 

smr A,Y,M 


instr’(smr,A,M,Y); 

1 

spl A,Y,M 


instr'(spl,A,M,Y); 

1 

spli A,M 


instr'(spli,A,M); 

i 

spt A,Y,M 


instr’(spt,A,M,Y); 

1 

sqr A 


instr'(us_opcode,A,sqr); 

1 

sqrt A 

• 

instr'(us_opcode,A,sqrt); 

1 

ssor A 


instr'(uc opcode,A,ssor); 

1 

sstr A 


instr' (uc__opcode,A,sstr) j 

1 

su A,Y,M 


instr'(su,A,M,Y); 

1 

sud A,Y,M 


instr'(sud,A,M,Y); 

1 

sudi A,M 


instr'(sudi,A,M); 

1 

sudr A,M 


instr'(sudr,A,M); 

1 

— + 


Table F-Sg - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F~55 











Version 4.0 
30 December.1991 


Ada/M PSE Handbook 


MACRO/M 

Ada/M 

SUi A,M 

instr'(suirA,M); 

suk A,Y,M 

instr'(suk,A,M/Y); 

sur A,M 

instr'(sur »ArM}; 

sx A,Y,H 

instr'(8 x,A,M,Y); 

sxi A,M 

instr*(sxifA^M); 

sz Y,M 

instr*(sZrrO,M,Y); 

szi M 

instr*(szi,r0rM); 

tan A 

instr*(mf opcode,A,tan); 

tcdr A 

instr*(ua opcode,Artcdr); 

ter A 

instr*(ua opcode,A,tcr); 

vf A 

instr*(mp opcode,A,vf); 

vfp A 

instr*(mp opcode,A,vfp); 

vh A 

instr*(mp opcode,A,vh); 

vhp A 

instr*(mp_opcode,A,vhp); 

wem A,Y,M 

instr'(lroap,A,M,Y); 

wemk AM,Y 

instr*(e6 opcode,A,M,Y); 

wim A,YrM 

instr *(lmap,A,M,Y); 

wimk A,Y,M 

instr*(e6 opcode,A,M,Y); 

xj A,*Y,M 

instr*(xjx,A,M,Y)j 

Xj A,Y,M 

instr * (X jk,A,M,Y); 

xjr A,M 

instr *(xjr,A,M); 

xor A,YrM 

instr *(xor,A,M,Y); 

xori A,M 

instr *(xori,A,M); 

xork A,Y,M 

instr *(xork,A,M,Y); 

xorr A,M 

instr*(xorr,A,M); 

xsdi ArM 

instr'(xsdi,A,M ); 

xsi A,M 

instr*(xsi,A,M); 

zbr AfM 

instr *(zbr,A,M); 


Table F-3h - Machine Code Instructions (Continued) 


F-56 F.13 Machine Code Insertions 










