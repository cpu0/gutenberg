AD-A214 954 


UNCLASSIFIED 1 

UCVPVl Cl*SSl* IC**ION 0* This PAGE flVfrpn D*u ( 

I REPORT DOCUMENTATION PAGE 


FiLE COW 




1 . HWl NUNSiR 


pore had D*rnuTnoNi 

rwut RTOM CQyp.tTtrsoroTLv 

|t. GOVT ACCESSION NO. 3. RECIPIENTS CATALOG RUNbER 


a. mu JSHSmmU) s. type or report a period covered 

Ada Compiler Validation Summary Keport iRationai, 12 July 1989 to 12 July 1990 

MIL-STD-1750A Cross Development Facility, Version 5, R1000 r STiToiSiTNC^RE ntrort mMn— 
Series 200 Model 20 (Host) to Mikros MRS 1750A/SO (target) 8 number 


t. authoro; 

WrigTItfi-Patterson AFB 
Dayton, OH, USA 


(MOANING ORGANIZATION AND ADDRESS 

Wright-Patterson AFB 
Dayton, OH, USA 


U. CONTROaING Office NAME AND ADDRESS 
Ada Joint Program Office 
United States Department of Defense 


14. MONITORING AGENCY NAME A ADDRESS ^/from Controlling OH**) 

Wtight-Patterson AFB 
Dayton, OH, USA 


16. D1STRIIJTION STATEMENT (ofthitHtpon) 


6. CONTAACT 0A GRAS7 NUMEE A(jJ 


to. program element. »r::e:t. tasr 
AREA A *0R* UNIT NUMBERS 


1Z. REPORT DATE 


is. securitt class iou^ittpom 
UNCLASSIFIED 


IS*. ^C^ASS^riCATlON.'OOMSSRADING 
UL N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (o*TN# itrtrsa »«ff 'f 3 >" t SC* iC lipMtrrnrfromPtpori) 

UNCLASSIFIED 


DTIC 



DEG 041989 




II. IEynDRDS (Cent,nut pnitrtrit $idt ifntctu*') tnpidrnt'fy b) block number) 


Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1B15A, Ada Joint Program Office, AJPO 


16. AISTRAC1 (Cbntmut O" »»»»UP t>3f ifn*ctu*'t $»a .tfpnt.E> 6, block number) 

Rational, MIL-STD-1750A, Cross Development Facility, Version 5, Wright-Patterson AFB, 
R1000 Series 200 Model 20 under Rational Environment, Version D_ll_0_8 (Host) to 
Mikros MRS 1850A/S0 (bare machine)(Target), ACVC 1.10. 


im n 


S? // SO CS3 


EDITION 0* 1 ROv IS IS MSOltU 

»/n ei6t*LE*ii«‘6ioi _ UNCLASSIFIED _ 

SICURUY Class:* ICA110N Of INIS PAGl <»nenD*t*lnt fffrf) 











f 


Ada Compiler Validation Summary Report: 


Compiler Name: MIL-STD-1750A Cross Development Facility, Version 5 
Certificate Number: 890712W1.10111 


Host: R1000 Series 200 Model 20 under 

Rational Environment, Version D_ll_0_8 

Target: Mikros MKS 1750A/S0 
(bare machine) 


Testing Completed 12 July 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Aaa Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 





AVP Control Number: AVF-VSR-291.0789 

89-04-13-RAT 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890712V1.10111 
Rational 

MIL-STD-1750A Cross Development Facility, Version 5 
R1000 Series 200 Model 20 Host and Mikros MKS 1750A/S0 Target 


Completion of On-Site Testing: 
12 July 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 


APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 



Aooasslon For 

MIS GRA4I 
OTIC TAB 
Unannounced 
Just 1flootlon_ 




□ 

□ 


By- 

Distribution/ 


Availability Codes_ 
'Avail and/or 


Diet 




Special 























CHAPTER 1 


INTRODUCTION 




This Validation Summary Report ^TVSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results o f.- testi ng this compiler using the Ada Compiler 
Validation Capability • fRCVG^^'^-An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard.^ 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences /between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report.V 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. -\The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 





1-1 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR docuaents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 


. To atteapt to identify any language constructs supported by the 
coapiler that do not conform to the Ada Standard 

. To atteapt to identify any language constructs not supported by 
the coapiler but required by the Ada Standard 

. To deteraine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this coapiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Prograa Office and adainistered by the Ada Validation Organization (AVO). 
On-site testing was coapleted (*STOP_DATE*) at Santa Clara CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.4SS2). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 






INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute £or Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language. 
AMSI/MIL-SfSCTOTsST - FeBruary 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC 


Ada 

Commentary 


The Ada Compiler Validation Capability. The set of Ada 
programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 


1-3 








INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for vhich the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 


Host 


The computer on vhich the compiler resides. 


Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support or may legitimately 

support in a vay other than the one expected by the test. 


Passed test An ACVC test for vhich a compiler generates the expected 
result. 

Target The computer for vhich a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, vhich may comprise one or more 
files. 


Vithdravn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to vhich it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the vay in vhich a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs vith 
certain language constructs vhich cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved vords of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved vords by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


1-4 





INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
nay refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by vhich executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable vithout modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines vith a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 










INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that vas determined to contain an illegal 
language construct or an erroneous language construct is vithdravn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
vithdravn at the time of this validation are given in Appendix D. 


1-6 











CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation vas tested under the 
following configuration: 

Compiler: MIL-STD-1750A Cross Development Facility, Version 5 

ACVC Version: 1.10 

Certificate Number: 890712V1.10111 

Host Computer: 

Machine: R1000 Series 200 Model 20 

Operating System: Rational Environment 

Version D_ll_0_8 

Memory Size: 32 MB 


Target Computer: 

Machine: 

Operating System: 
Memory Size: 


Mikros MRS 1/50A/S0 
bare machine 
128 Kvords 


2-1 








CONFIGURATION INFORMATION 


Communications Network: RS232 serial line 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 10 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined type 
L0NG_FL0AT in package STANDARD. (See tests B86001T..Z (7 
tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type (See test C35712B.) 


2-2 




CONFIGURATION INFORMATION 


(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 

(4) No exception is raised vhen an integer literal operand in a 
comparison or membership test is outside the range of the base 
type. (See test C45232A.) 

(5) NUMERIC ERROR is raised vhen a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflov is not gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by vhich values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round away from 
zero. (See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round away 
from zero. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round avay from zero. (See test C4A014A.) 


e. Array types. 

An implementation is alloved to raise NUMERIC_ERROR or 

CONSTRAINT ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAXINT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX INT components raises no exception. (See test 
C36003A.) 

(2) NUMERIC ERROR is raised vhen a null array type with 

INTEGER~LAST + 2 components is declared. (See test C36202A.) 

(3) NUMERIC ERROR is raised vhen a null array type with 

SYSTEM.RAX INT + 2 components is declared. (See test 

C36202B.) 






CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERICJERROR or CONSTRAINTERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


2-4 






CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Sequential, Direct, and Text files are not supported by this 
implementation. 








CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler vas 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 689 tests vere inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 285 
executable tests that use floating-point precision exceeding that supported 
by the implementation and 238 executable tests that use file operations not 
supported by the implementation. Modifications to the code, processing, or 
grading for 78 tests were required to successfully demonstrate the test 
objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1128 

1652 

15 

16 

46 

2984 

Inapplicable 

2 

10 

663 

2 

12 

0 

689 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

CHAPTER 
7 8 

9 

10 

11 

12 

13 

TOTAL 

14 

Passed 

192 

547 

483 

242 

171 

99 

160 

331 

137 

36 

252 

260 

74 

2984 

Inappl 

20 

102 

197 

6 

1 

0 

6 

1 

0 

0 

0 

109 

247 

689 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests vere withdrawn from ACVC Version 1.10 at the time of 
this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CE3301A 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 689 tests were inapplicable for the 
reasons indicated: 


a. The following 285 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24U3F..Y 

C35708F..Y 

C45421F..Y 


C35705F..Y 

C35802F..Z 

C45521F..Z 


C35706F..Y 
C45241F..Y 
C45524F..Z 


C35707F..Y 
C45321F..Y 
C45621F..Z 


3-2 





TEST INFORMATION 


C45641F..Y C46012F..Z 

b. C3S702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

c. The folloving 16 tests are not applicable because this 
iapleaentation does not support a predefined type SHORT_INTEGER: 


C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C4S632B 

CD7101E 

B52004E 

C55B07B 

B55B09D 

B86001V 

d. The following 

16 i 

tests are not 

applicable 

because 

implementation does not 

support a predefined type L0NG_INTEG1 

C45231C 

C45304C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

CD7101F 

B52004D 

C55B07A 

B55B09C 

B86001V 


e. C452310, B86001X, and CD7101G are not applicable because this 

iapleaentation does not support any predefined integer type with a 
name other than INTEGER, LONGINTEGER, or SHORTINTEGER. 

f. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAXMANTISSA is less than 47. 

g. C4A013B is not applicable because the evaluation of an expression 
involving 'MACHINERADIX applied to the most precise 
floating-point type would raise an exception; since the expression 
must be static, it is rejected at compile time. 

h. D4A004B is not applicable because this implementation does not 

support a static universal expression with a value that lies 
outside of the range SYSTEM.MIN_INT ... SYSTEM.MAX_INT. 

i. D64005G is not applicable because this implementation does not 

support nesting 17 levels of recursive procedure calls. 

j. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

It. B86001Z is not applicable because this implementation supports no 
predefined floating-point type vith a name other than FLOAT, 
L0NG_FL0AT, or SHORT_FLOAT. 

l. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

m. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
•re not applicable because this implementation does not support 
size clauses for floating point types unless the size given is the 


3-3 





TEST INFORMATION 


saae as would have been chosen by the compiler. 

n. CD1C04E is not applicable because this implementation does not 
support a size larger than 16 for a discrete field in a record 
representation specification. 

o. CD2A61E and CD2A61G are not applicable because these tests assume 
that strings cam be stored using only 8 bits per character, but 
this implementation uses 16 bits per character. 

p. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

q. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types unless the size given is 16. 

r. CD2B15B is not applicable because this implementation allocates 
more memory to collection size than is asked for by the test. 

s. The following 76 tests are not applicable because, for this 
implementation, address clauses may be used only in static scopes: 

CD5003B..I (8) CD5011A..I (9) CD5011K..N (4) 

CD50110..S (3) CD5012A..J (10) CD5012L..M (2) 

CD5013A..1 (9) CD5013K..0 (5) CD5013R..S (2) 

CD5014A..0 (15) C05014R..Z (9) 

t. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

u. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriiinants without defaults. These instantiations are rejected 
by this compiler. 

v. The following 238 tests are inapplicable because sequential, text, 
and direct access files are not supported: 

CE2102A..C(3) CE2102G..8(2) CE2102K 

CE2102N..7(12) CE2103C..0(2) CE2104A..D(4) 

CE2105A..B(2) CE2106A..B(2) CE2107A..H(8) 

CE2107L CE2108A..B(2) CE2108C..H(6) 

CE2109A..C(3) CE2110A..0(4) CE2111A..1(9) 

CE2115A..B(2) CE2201A..0(3) CE2201F..N(9) 

CE2204A..0(4) CE2205A CE2208B 

CE2401A..C(3) CE2401E..F(2) CE2401H..L(5) 

CE2404A..B(2) CE2405B CE2406A 


3-4 







TEST INFORMATION 


CE2407A..B(2) 
CE2410A..B(2) 
EE3102C 
CE3103A 
CE3108A..B(2) 
CE3111A..B(2) 
CE3114A..B(2) 
CE3208A 
CE3305A 
CE3402C..D(2) 
CE3404B..0(3) 
CE340SC.*0(2) 
CE3408A..C(3) 
EE3409F 
EE3410F 
CE3412A 
CE3413C 
CE3604A..B(2) 
CE3704A..F(6) 
CE3706F..G(2) 
CE3806A..B(2) 
CE3905A..C(3) 
CE3906E..F(2) 


CE2408A..B(2) 
CE2411A 
CE3102F..H(3) 
CE3104A..C(3) 
CE3109A 
CE3111D..E(2) 
CE3115A 
EE3301B 
CE3402A 
CE3403A..C(3) 
CE3405A 
CE3406A..D(4) 
CE3409A 
CE3410A 
CE3411A 
EE3412C 
CE3602A..0(4) 
CE3605A.>E(5) 
CE3704M..0(3) 
CE3804A..P(16) 
CE3806D..E(2) 
CE3905L 


CE2409A.. B(2) 
CE3102A.. B(2) 
CE3102J..K(2) 
CE3107B 
CE3110A 
CE3112A..D(4) 
EE3203A 
CE3302A 
EE3402B 
CE3403E..F(2) 
EE3405B 
CE3407A..C(3) 
CE3409C..E(3) 
CE3410C..E(3) 
CE3411C 
CE3413A 
CE3603A 
CE3606A..B(2) 
CE3706D 
CE3805A..B(2) 
CE3806G..H(2) 
CE3906A..C(3) 


w. CE2103A, CE2103B, and CE3107A are not applicable because this 

implementation does not support external file CREATE and OPEN 
operations. These tests terminate with an unhandled exception. 
(See Section 3.6.) 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications includes 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 78 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 


B22003A 

B23004B 

B24007A 

B26001A 

B2A003B 


B22003B 

B24001A 

B24009A 

B26002A 

B2A003C 


B22004A 

B24001B 

B24204B 

B26005A 

B2A003D 


B22004B 

B24001C 

B24204C 

B28003A 

B2A007A 


B22004C 
B24005A 
B24204D 
B28003C 
B32103A 


B23004A 

B24005B 

B25002B 

B29001A 

B33201B 


3-5 







TEST INFORMATION 


B33202B 

B33203B 

B33301B 

B35101A 

B36002A 

B36201A 

B37205A 

B37307B 

B38003A 

B38003B 

B38009A 

B38009B 

B41201A 

B41202A 

B44001A 

B44004B 

B44004C 

B45205A 

B48002A 

B48002D 

B51001A 

B51003A 

B51003B 

B53003A 

B5SA01A 

B64001B 

B64006A 

B67001H 

B74003A 

B91001H 

B95001C 

B95003A 

B95004A 

B95079A 

BB3005A 

BC1303F 

BC2001D 

BD5008A 

BC2001E 

BC3003A 

BC3003B 

BC3005B 

BC3013A 


C45651A required evaluation modification because the test contains an if 
statement vith a range that excludes some allowable values and FAILED may 
be called. The AVO has ruled that the failure message n ABS 928.0 NOT IN 
CORRECT RANGE” may be ignored and the test graded as passed. 

D4A004B vas rejected at compile time because it contains a static universal 
expression vith a value that lies outside of the range 
SYSTEM.MIN_INT ... SYSTEM.MAX_INT. The AVO has ruled this test as not 
applicable~to this implementation. 

CE2103A, CE2103B, and CE3107A required evaluation modification because 
these tests do not allov the implementation to raise USE_ERR0R for external 
file CREATE and OPEN operations when these operations are not supported by 
the implementation. Execution of these tests terminates vith an unhandled 
exception. The AVO has ruled these tests as not applicable to this 
implementation. 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the MIL-STD-1750A Cross Development Facility vas submitted to the AVF by 
the applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the MIL-STD-1750A Cross Development Facility using ACVC Version 
1.10 vas conducted on-site by a validation team from the AVF. The 
configuration in vhich the testing vas performed is described by the 
following designations of hardware and software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


R1000 Series 200 Model 20 
Rational Environment, Version D 11_0_8 
Kikros MRS 1750A/S0 
bare machine 

MIL-STD-1750A Cross Development 
Facility, Version 5 


3-6 






TEST INFORMATION 


The host and target computers vere linked via RS232 serial line. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing vere included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host 
computer. 

After the test files vere loaded to disk, the full set of tests vas 
compiled and linked on the R1000 Series 200 Model 20, then all executable 
images vere transferred to the Mikros MRS 17S0A/S0 via RS232 serial line 
and run. Results vere printed from the host computer. 

The compiler vas tested using command scripts provided by Rational and 
reviewed by the validation team. The compiler vas tested using all default 
option settings except for the following: 

OPTION EFFECT 


Create_Subprogram_Specs :« False Missing subprogram specs are not 

automatically created when a 
subprogram body is added to the 
program library. 


Tests vere compiled, linked, and executed (as appropriate) using a single 
host and target computer. Test output, compilation listings, and job logs 
vere captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team vere also archived. 


3.7.3 Test Site 

Testing was conducted at Santa Clara CA and vas completed on 12 July 1989. 


3-7 










APPENDIX A 


DECLARATION OP CONFORMANCE 


Rational has submitted the following Declaration of 
Conformance concerning the MIL-STD-1750A Cross 
Development Facility. 






DECLARATION OF CONFORMANCE 


Compiler Implementor: Rational 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

MIL-STD-1750A Cross Development Facility Version: 5 
R1000 Series 200, Model 20 
Rational Environment Version D_ll_0_8 

Mikros MKS 1750A/SO 
Bare Machine 


Implementor's Declaration 

I, die undersigned, re pr e senting Rational, have implemented no deliberate extensions to the 
Ada Language Standard ANSI/MIL-STD-1815A in the compiler listed in this declaration. 

I declare that Rational is the owner of record of the Ada language compilers listed above 
and, as such, is responsible for maintaining said compiler in conformance to ANSI/MIL-STD- 
1815A. All certificates and registrations for Ada language compilers(s) listed in this 



Vice President, Product Development 


Base Compiler Name: 
Host Architecture: 
Operating System: 

Target Architecture: 
Operating System: 


Owners Declaration 

I, the undersigned, rep re s enting Rational, take full responsibility for implementation and 
maintenance of the Ada compilers) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that ail of the Ada language compilers 
listed, and their host/target perfor ma nce are in compliance with the Ada Language 



David H. Bernstein 

Vice President, Product Development 








APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the MIL-STD-1750A Cross Development Facility, Version 5, 
as described in this Appendix, are provided by Rational. Unless 
specifically noted otherwise, references in this Appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 
type FLOAT is digits 6 

range -16*1.0# * 2.0 ** 127 .. 16#1.FFFFFC# * 2.0 ** 126; 
type L0NG_FL0AT is digits 9 

range -16*1.0# * 2.0 ** 127 .. 16#1.FPFFFC# * 2.0 ** 126; 

type DURATION is delta 16*1.0# * 2.0 ** (-14) 

range -16*1.0# * 2.0 ** 17 .. 16*FFFFFC# * 2.0 ** 16; 


end STANDARD; 


B-l 






Appendix F to the LRM for the M1750a_Bare Target 


The Reference Manual for the Ada Programming Language (LRM) specifies that certain features of 
the language are implementation-dependent. It requires that these implementation dependen¬ 
cies be defined in an appendix called Appendix F. This is Appendix F for the M1750a_Bare 
target, compiler Version 5. It contains materials on the following topics listed for inclusion by 
the LRM on page F-l: 

• Implementation-dependent pragmas 

• Implementation-dependent attributes 

• Package System 

• Representation clauses 

• Implementation-dependent components 

• Interpretation of expressions that appear in address clauses 

• Unchecked conversion 

• Implementation-dependent characteristics of 1/O Packages 

These topics appear in section and subsection titles of this appendix. The appendix contains 
other topics mentioned in the LRM as being implementation dependent. For these, a reference 
to the LRM is given in the section or subsection title. 


IMPLEMENTATION-DEPENDENT PRAGMAS 

The MIL-STD-1750A cross-compiler supports pragmas for application software development in 
addition to those listed in Annex B of the LRM. They are described below, along with 
additional clarifications and restrictions for pragmas defined in Annex B of the LRM. 

Pragma Main 

A parameterless library-unit procedure without subunits can be designated as a main program 
by including a pragma Main at the end of the unit specification or body. This pragma causes 
the linker to run and create an executable program when the body of this subprogram is coded. 
Before a unit having a pragma Main can be coded, all units in the with closure of the unit must 

be coded. 

The pragma Main has three arguments: 


RATIONAL 








MIL-STD-1750A CDF Appendix F 


• Taxgat: A string specifying the target key. If this argument appears and it does not match 
the current target key, the pragma Main is ignored. If the Target parameter matches the 
current target key or does not appear, pragma Main is honored. A single source copy of a 
main program may be used for different targets by putting in multiple Main pragmas with 
different target parameters and different stack_sizes and/or different heap_sizes. 

• stack_sixa: A static integer expression specifying the size in bytes of the main task stack. 
The value must lie in the range 256 .. 32767. If not specified, the default value is 3K 16-bit 
words. 

• Haap_siza: A static integer expression specifying the size in bytes of the heap. The value 
must lie in the range 0 .. 32767. If not specified, the default value is the remainder of physical 

target memory. 

The complete syntax for this pragma is: 

pragma_main :: = PRAGMA MAIN 

[ ( jaai.n_opti.on { , aain_option } > ] ; 

ma i n_option : : ■ TARGET «> sixopla_nama | 

STACX_SXZE =*> static_integar_axprassion | 

HEAP_SZZE =■> static_intagar_axprassion 

The pragma Main must appear immediately after the declaration or body of a parameterless 
library-unit procedure without subunits. 

Pragma Nickname 

The pragma Nickname can be used to give a unique string name to a procedure or function in 
addition to its normal Ada name This unique name can be used to distinguish among over¬ 
loaded procedures or functions in the importing and exporting pragmas defined in subsequent 
sections. 

The pragma Nickname must appear immediately following the declaration for which it is to 
provide a nickname. It has a single argument, the nickname, which must be a string constant. 

For example: 

function Cat (L: Zntagac; R: String) cttura String; 
pragma Nicknaaa ("Int-Str-Cat"); 

function Cat (L: String; R: Zntagar) raturn String; 
pragma Nicknaaa ("Str-Int-Cat"); 

pragma Zntarfaca (Aasambly, Cat); 

pragma XoportJTunction (Xntarnal ■> Cat, 

” Nicknama ■> "Int-Str-Cat", 

Extamal ■> "CAT$INT_STR_COMCAT", 

Machaniam ■> (Valua, Rafaranca)); 

pragma Zaport_Function (Zntamal •> Cat, 


B-3 


RATIONAL 




Appendix IV: Appendix F for the M1750a_Bare Target 


Nickname *> "Str-lnt-Cat”, 

External ■> "CAT$STR_INT_CONCAT", 

Mechanism ■> (Reference, Value)); 

Pragmas Import.Procedure and Import.Function 

A subprogram written in another language (typically, assembly language) can be called from an 
Ada program if it is declared with a pragma Interface. The rules for placement of pragma 
Interface are given in Section 13.9 of the LRM. Every interfaced subprogram must have an 
importing pragma recognized by the MIL-STD-1750A cross-compiler, either Import_Procedure 
or Import_Function. These pragmas are used to declare the external name of the subprogram 
and the parameter-passing mechanism for the subprogram call. If an interfaced subprogram 
does not have an importing pragma, or if the importing pragma is incorrect, pragma interface is 
ignored. 

Importing pragmas can be applied only to nongeneric procedures and functions. 

The pragmas Import_Procedure and Import_Function are used for importing subprograms. 
Import_Procedure is used to call a non-Ada procedure; ImportJFunction, a non-Ada function. 

Each import pragma must be preceded by a pragma Interface; otherwise, the placement rules 
for these pragmas are identical to those of the pragma Interface. 

The importing pragmas have the form: 

::■ PRAGMA importing_typ« 

( [ INTERNAL ■> ] intemal_nama 

[ , [ EXTERNAL s> J «xtamal_nama ] 

[ [ , [ PARAMETERJTYPES *> ] 

paramater_typ«3 ] 

[ , [ RESULT_TYPE »> ] type_mark ] ] 

C , NICKNAME <■> str±ng_litaral ] 

[ , [ MECHANISM «> ] mechanisms ] ) ; 

: : ■ IMPORTJPROCEDORE | IMPORT_FXJNCT I ON | 
IMPORT~VALUED_PROCEDURE 
::• identifier | 

string__literal -- An oparator designator 

:identifier | string_lit#ral 

::■ ( NOIL ) | ( typa_aark { , typa_mark } ) 

::“ aachanl«a_nama | 

( machani«m_naiaa { , machanism_nama ) ) 

VALUE | REFERENCE 

The internal name is the Ada name of the subprogram being interfaced. If more than one 
subprogram is in the declarative region preceding the importing pragma, the correct 
subprogram must be identified by either using the argument types (and result type, if a 


importing_pragma 


importing_typa 

intarnal_nama 

axtarnal_nama 
paraaatar_typaa 
■achanl mam 

mantian I mi am 


B-4 


RATIONAL 





MIL-STD-1750A CDF Appendix F 


function) or specifying the nickname. 

If it is used to identify a subprogram with an overloaded internal name, the value of the 
Parameter_Types argument consists of a list of type or subtype names, not names of 
parameters. Each one corresponds positionally to a formal parameter in the subprogram's 
declaration. If the subprogram has no parameters, the list consists of the single word null. For a 
function, the value of the Result_Type argument is the name of the type returned by the 
function. 

The external designator, specified with the External parameter, is a character string that is an 
identifier suitable for the assembler. If the external designator is not specified, the internal 
name is used. 

The Mechanism argument is required if the subprogram has any parameters. The argument 
specifies, in a parenthesized list, the passing mechanism for each parameter to be passed. There 
must be a mechanism specified for each parameter listed in parametar__types and they must 
correspond positionally. The types of mechanism are as follows. 

• Value: Specifies that the parameter is passed on the stack by immediate value. 

• Reference: Specifies that the parameter is passed on the stack by address. Used for 
structures having many values. 

For functions, it is not possible to specify the passing mechanism of the function result; the 
standard Ada mechanism for the given type of the function result must be used by the 
interfaced subprogram. If there are parameters, and they all use the same passing mechanism, 
then an alternate form for the Mechanism argument can be used: instead of a parenthesized list 
with an element for each parameter, the single mechanism name (not parenthesized) can be 
used instead. 

Examples: 

procedure Locate (Source: ia String; 

Target: in String; 

Index: out Natural); 

pragma Interface (Assembler, Locate); 
pragma Import.^Procedure 

(Internal •> Locata, 
external ■> "STRSLOCATR", 

Parameter_Types -> (String, String, Natural), 

Mec h a n is m *> (Refaranca, Reference, Value)); 


function Per (I: Integer; N: Integer) return Float; 
function Per (F: Float; N: Integer) return Float; 

pragma Interface (Assembler, Pur); 

pragma Inport_Function 

(Internal ■> Pur, 


8-5 


RATIONAL 






Appendix IV: Appendix F for the M1750a_Bare Target 


Faramaterjrypes ■> (Integer, Integer), 

Rasult^Type ■> Float, 

Mach an 1 inn ■> Valua, 

External ■> "MA,TH$PKR_0F_INTEGER") ; 
pragma Xaport_Function 

(Internal ■> Pwr, 

Paraxaatar__Typaa ■> (Float, Integer), 

Rasult_Type *> Float, 

Machanlam *> Valua, 

Kxtarnal -> "MATH$FWR._OF_FLGAT") ; 

Pragmas Export_Procedure and Export_Function 

A subprogram written in Ada can be made accessible to code written in another language by 
using an exporting pragma defined by the MIL-STD-1750A cross-compiler. The effect of such a 
pragma is to give the subprogram a defined symbolic name that the linker can use when 
resolving references between object modules. 

Exporting pragmas can be applied only to nongeneric procedures and functions. 

An exporting pragma can be given only for subprograms that are library units or that are 
declared in the specification of a library package. An exporting pragma can be placed after a 
subprogram body only if the subprogram does not have a separate specification. Thus, an 
exporting pragma cannot be applied to the body of a library subprogram that has a separate 
specification. 

These pragmas have similar arguments to the importing pragmas, except that it is not possible 
to specify the parameter-passing mechanism. The standard Ada parameter-passing 
mechanisms are chosen. For descriptions of the pragma's arguments (Internal, External, 
Parameter_Types, Result_Type, and Nickname), see the preceding section on the importing 
pragmas. 

The full syntax of the pragmas for exporting subprograms is: . 

exportin gp ragma ::■ PRAGMA exporting_type 

( C INTERNAL ■> ] internal_name 

[ , [ EXTERNAL *> ] extem*l_nama ] 

[ [ , [ PARAMETER_TYPES =*> ] parameter_types ] 

[ , [ RXSULT_TTFE -> 1 typejnarlc ] | 

[ , NICKNAME ■> atring_litaral ] ] ) ; 
exportlogotype ::« EXPORT_PROCEDURX | EXPORT JTONCTXON 
latemaljoaae identifier | 

string_literal — An operator designator 
exteraal_na— ::■ identifier | string_literal 

paraaeter_types ::« ( NULL ) f ( typejaark { , type_mark } ) 

Examples: 

procedure Matrix_Multiply 

(A, B: in Matrix; C: out Matrix) ; 


RATIONAL 


B-6 







MIL-STD-1750A CDF Appendix F 


pragma Export JProcedur* (Hatrix_Multiply); 

— Kztarnal nut is tbs string "Matrix_Multiply" 
function Sin (R: Radians) return Float; 

pragaa ExportJTunction 

(Internal m > Sin, 

External ■> "SIN_RADIANS”); 

— External name is the string "SIN_RADIANS" 


Pragma Export_Elaboration_Procedure 

The pragma Export_Elaborafion_Procedure makes the elaboration procedure for a given 
compilation unit available to external code by defining a global symbolic name. This procedure 
is otherwise unnamable by the user. Its use is confined to the exceptional circumstances where 
an Ada module is not elaborated because it is not in the closure of the main program or if the 
main program is not an Ada program. This pragma is not recommended for use in application 
programs unless the user has a thorough understanding of elaboration, runtime and storage 
model considerations. 

The pragma Export_Elaboration_Procedure must appear immediately following the 
compilation unit 

The complete syntax for this pragma is: 

pragaa_«xport_«laborationj>xoc*<iur* :: * 

PRAGMA ZXPORT_ELABORArXON_PROCZDCRE ( KXTERNAL_NAME »> external_name ) ; 

•xtcznaljEUuaa ::- identifier I atring_litoral 

Pragmas Import_Object and Export_Object 

Objects can be imported or exported from an Ada unit with the pragmas Import_Object and 
Export_Object. The pragma Import_Object causes an Ada name to reference storage declared 
and allocated in some external (non-Ada) object module. The pragma Export_Object provides 
an object declared within an Ada unit with an external symbolic name that the linker can use to 
allow another program to access the object. It is the responsibility of the programmer to ensure 
that the internal structure of the object and the assumptions made by the importing code and 
data structures correspond. The cross-compiler cannot check for such correspondence. 

The object to be imported or exported must be a variable declared at the outermost level of a 
library package specification or body. 

The size of the object must be static. Thus, the type of the object must be one of: 

• A scalar type (or subtype) 

• An array subtype with static index constraints whose component size is static 

• A simple record type or subtype 

Objects of a private or limited private type can be imported or exported only into the package 
that declares the type. 


B-7 


RATIONAL 






Appendix IV: Appendix F for the M1750a_Bare Target 


Imported objects cannot have an initial value and thus cannot be: 

• A constant 

• An access type 

• A task type 

• A record type with discriminants, with components having default initial expressions, or 
with components that are access types or task types 

In addition, the object must not be in a generic unit. The external name specified must be 
suitable as an identifier in the assembler. 

The full syntax for the pragmas Import_Object and Export_Object is: 

objact_pcagma :;■ PRAGMA objectjpragma_typa 

( [ INTERNAL ■> ] identifier 

[ , [ EXTERNAL ■> ] string- literal ] ) ; 

object_pragma_type ::- IMPORT_OBJECT | EXPORT_0BJECT 


Pragma Suppress_All 

This pragma is equivalent to the following sequence of pragmas: 

pragma Suppress (AccessjChack); 
pragma Suppress (DiscrlminantjChack); 
pragma Suppress (Division_Check); 
pragma Suppress (ElaborationjCheck); 
pragma Suppress (InderjCbeck); 
pragma Suppress (Length_Cbeck); 
pragma Suppress (Overflow_Check); 
pragma Suppress (Range_Cbeck); 
pragma Suppress (Storage_Check); 

Note that, like pragma Suppress, pragma Suppress_All does not prevent the raising of certain 
exceptions. For example, numeric overflow or dividing by zero is detected by the hardware, 
which results in the predefined exception Numeric_Error. Refer to Chapter 5, "Runtime 
Organization," for more information. 

Pragma Suppress.All must appear immediately within a declarative part. 


IMPLEMENTATION-DEPENDENT ATTRIBUTES 

There are no implementation-dependent attributes. 


PACKAGE STANDARD (LRM Annex O 

Package Standard defines all the predefined identifiers in the language. 


RATIONAL 


B-8 





MIL-STD-1750A CDF Appendix F 


package Standard is 

type *TJniversal_Integar* is ... 
type *univsrsal_Real* is ... 

type *Uhiversal_rixed* is_ 

type Boolaaa is (Talas, Trus); 


typs Xntsgar is sang* -32768 .. 32767; 

type Float is digits 6 rangs -16#1.0# * 2.0 ** 127 .. 

16#l.rFFF_FC# * 2.0 ** 126; 

typs Long_rioat is digits 9 rangs -16#1.0# * 2.0 ** 127 .. 

16#1.FFFF_FC# * 2.0 ** 126; 
typs Duration is dslta 16#1.0# * 2.0 ** (-14) 

rangs -16#1.0# * 2.0 ** 17 .. 

16#1.FFFF_FC# * 2.0 ** 16; 
subtype Natural is Zntagsr rangs 0 .. 32767; 
subtyps Positive is Zntagsr rangs 1 .. 32767; 


typs Charactsr is ... 

typs String is array (Positivs rangs <>) of Character; 
pragma Pack; (String) ; 

package Ascii is ... 

Constraint_Error : exception; 

Nuasric_Srror ; exception; 

StoragsJBrror : exception; 

TaskingJRrror : exception; 

PxograaJBrror : exception; 


end Standard; 

The following table shows the default integer and floating-point types: 

Supported Integer and Floating-Point Types 


B-9 


RATIONAL 







Appendix IV: Appendix F for the M1750a_Bare Target 


Ada Type Name 

Sire 

Integer 

16 bits 

Float 

32 bits 

Long_Float 

48 bits 


Fixed-point types arc implemented using the smallest discrete type possible; it may be 8,16, or 
32 bits. Standard.Duration is 32 bits. 

PACKAGE SYSTEM (LRM 23.7) 

package System Is 

type Address is private; 
type Hama is (M1750a_Bara); 

Systea_Wa«e ; constant Hama M1750a_Bare; 


Storage JOttit : constant :• 16; 

Mamory_Si*a : constant :» +(2 ** 15) - 1; 

Min_int : constant :■ -<2 ** 15); 

Max_Int : constant :■ + (2 ** 15) - 1; 

MaacJDiglts : constant :■ 9; 

Max_Mantissa : constant :» 31; 
rinajDalta : constant :* 2.0 ** (-31); 

Tick : constant :» 1.0Z-04; 

subtype Priority is Integer range 0 .. 255; 


function "+" 
function "+" 
function 
function •-* 


(Laft ; Address; 
(Left : Integer; 
(Left : Address; 
(Left : Address; 


Right ; Integer) 
Right : Address) 
Right : Address) 
Right ; Integer) 


return Address, 
return Address, 
return Integer, 
return Address 


function "<” (Left, Right : Address) return Boolean; 
function "<«" (Laft, Right : Address) return Boolean; 
function ">" (Left, Right : Address) raturn Boolean; 
function ”>•" (Left, Right : Address) raturn Boolaan; 


RATIONAL 


B-10 









MIL-STD-1750A CDF Appendix F 


— The functions abov* art unsigned in nature. Neither Numeric_Error 

— nor Constraint_Error will ever be propagated by these functions. 

— Note that this implies: 

— To_Address (Integer'First) > To_Address (Integer'Last) 

— and that: 

To_Addraa3 (0) < To_Xddress (-1) 

— Also, the unsigned range of Address includes values which are 

— larger than those implied by Memory_Size. 


Address_Zero : constant Address; 
private 


end System; 


REPRESENTATION CLAUSES AND CHANGES OF REPRESENTATON 

The CDF support for representation clauses is described in this section with reference to the 
relevant section of the LRM. Usage of a clause that is unsupported as specified in this section or 
usage contrary to LRM specification will cause a semantic error unless specifically noted. 

Length Clauses (LRM 23.2) 

Length clauses are supported for the MIL-STD-1750A CDF as follows: 

• The value in a 'Size clause must be a positive static integer expression. 'Size clauses are 
supported for all scalar and composite types, including derived types, with the following 
restrictions: 

— For all types the value of the size attribute must be greater than equal to the minimum size 
necessary to store the largest possible value of the type. 

— For discrete types, the value of the size attribute must be less than or equal to 16. 

— For fixed types, the value of the size attribute must be less than or equal to 32. 

— For float types, the size clause can only specify the size the type would have if there were 
no clause. 

— For access and task types, the value of the size attribute must be 16. 

— For composite types, a size specification must not imply compression of composite 
components. Such compression must have been explicitly requested using a length clause 


B-ll 


RATIONAL 





Appendix IV: Appendix F for the M1750a_Bare Target 


or pragma Pack on the component type. 

• 'StoragejSize clauses are supported for access and task types. The value given in a 
Storage_Size clause may be any integer expression, and it is not required to be static. 

• 'Small clauses are supported for fixed point types. The value given in a 'Small clause must 
be a non-zero static real number. 

Enumeration Representation Clauses (LRM 13.3) 

Enumeration representation clauses are supported with the following restrictions. 

• The values given in the clause must be in ascending order. 

• Every enumeration literal must have a unique integer value assigned to it. 

• The allowable values for an enumeration clause range from (Integer'First + 1) to Integer'Last. 

• Negative numbers are allowed. 

Record Representation Clauses (LRM 13.4 ) 

Both full and partial representation clauses are supported for both discriminated and 
undiscriminated records. The staeic_siapie_®xprassion in the alignment clause part of a 
record representation clause (see LRM 13.4 (4) ) must be a power of two with the following 
limits: 1 <* statlc_atwpl*_mxprasaion <= 8. 

The size specified for a discrete field in the component clause must not exceed 16 . 

Implementation-Dependent Components 

The LRM allows for the generation of names denoting implementation-dependent components 
in records. For the MIL-STEM 750A CDF, there are no such names visible to the user. 

Address Clauses (LRM 135) 

Address clauses can be applied to objects. The address must be determinable at compile time, 
but it need not be Ada static (as defined in the LRM, Section 4.9). The 'Address attribute does 
not produce a compile-time static value. Addresses must be specified using constants and 
operators from package System. Objects to which address clauses apply must not appear 
within any subprograms or task body. 

Change of Representation ( LRM 13.6) 

Change of representation is supported wherever it is implied by support for representation 
specifications. In particular, type conversions between array types or record types may cause 
packing or unpacking to occur; conversions between related enumeration types with different 
representations may result in table lookup operations. 


RATIONAL 


B-12 






MIL-STD-1750A CDF Appendix F 


OTHER IMPLEMENTATION-DEPENDENT FEATURES 

Machine Code (LRM 13.8 ) 

Machine-code insertions are not supported at this time. 

Unchecked Storage Deallocation (LRM 13.10.1) 

Unchecked storage deallocation is implemented by the generic function 
onctMdMd_D«allocmti.oa defined by the LRM. This procedure can be instantiated with an 
object type and its access type resulting in a procdure that deallocates the object's storage. 
Objects of any type may be deallocated. 

The storage reserved for the entire collection is reclaimed when the program exits the scope in 
which the access type is declared. Placing an access type declaration within a block can be a 
useful implementation strategy when conservation of memory is necessary. Space on the free 
list is coalesced when objects are deallocated. 

Erroneous use of dangling references may be detected in certain cases. When detected, the 
exception Storage_Error is raised. Deallocation of objects that were not created through 
allocation (ie through Unchecked_Conversion) may also be detected in certain cases and raises 
Storage_Error. 

Unchecked Type Conversion (LRM 13.10.2) 

Unchecked conversion is implemented by the generic function UnchecJced_Convarsion defined 
by the LRM. This function can be instantiated with Source and Target types resulting in a 
function that converts source data values into target data values. 

Unchecked conversion moves storage units from the source object to the target object 
sequentially, starting with the lowest address. Transfer continues until the source object is 
exhausted or the target object runs out of room. If the target is larger than the source then the 
remaining bits are undefined. Depending on the target computer architecture, the result of 
conversions may be right or left aligned. 

Restrictions on Unchecked Type Conversion 

• The target type of an unchecked conversion cannot be an unconstrained array type or an 
unconstrained discriminated type without default discriminants. 

• Internal consistency among components of the target type is not guaranteed. Discriminant 
components may contain illegal values or be inconsistent with the use of those discriminants 
elsewhere in the type representation. 

CHARACTERISTICS OF I/O PACKAGES 

External files are not supported for Directjo, Sequentialjo, or Text_Io. Directjo and 
Sequential_Io may not be instantiated with unconstrained array types or unconstrained record 


B—13 


RATIONAL 





Appendix IV: Appendix F for the M17L>0a_Bare Target 


types not having default discriminants. 


RATIONAL 


B-14 




APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
belov. 


Name and Meaning _ Value _ 

$ACC SIZE 16 

Xn integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..253 -> 'A', 254 «> '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 

$BIG_ID2 (1..253 -> 'A', 254 «> '2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG ID3 (1..126 -> 'A', 127 -> '3', 

An identifier the size of the 128..254 *> 'A') 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near~the middle. 





TEST PARAMETERS 


Name and Meaning _ 

$BIG ID4 

An identifier the size of the 
maximum input line length vhich 
is identical to $BIG_ID3 except 
for a character near'the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maxinua line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

SBIGSTRINGl 

A string literal vhich when 
catenated with BIG_STRING2 

yields the image of BIG_ID1. 

SBIGSTRING2 

A string literal which when 
catenated to the end of 
BIG STRING1 yields the image of 
BIG'IDI. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A ~ universal integer 

literal whose value is 
TEXTIO.COUNT'LAST. 

$DEFAULT_MEM_SI2E 

An integer literal whose value 
is SYSTEM.MEMORYSIZE. 

$DBPAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..12 «> 'A', 127 => '4', 
128..254 «> 'A') 


(1..251 => 'O', 252..254 .> "298”) 


(1..249 -> 'O', 250..254 »> "690.0") 


(1 >> 2..128 «> 'A', 129 -> '"') 


(1 *> 2..127 *> 'A', 128 => '1', 

129 -> '"') 


(1..234 -> ' ') 

32760 

32767 

16 


C-2 


TEST PARAMETERS 


Naae and Meaning_._ Value 


$DEFAULT_SYS NAME 

The ~ value of the constant 
SYSTEM.SYSTEM_NAME. 

$DBLTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

SFIELDLAST 

A ~ universal integer 

literal vhose value is 
TEXTIO.FIELD'LAST. 

SFIXEDNAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

SFLOATNAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORTFLOAT, or 

LONGFLOAT. 

SGREATERTHANDURATION 

A univerial real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

SGREATER THAN_DURATION BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

SHIGHPRIORITY 

An integer literal vhose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$1LLEGAL_EXTERNAL_FILE NAME1 

An “external" file naae which 
contains invalid characters. 

$ILLEGAL_RXTERNAL_FILE_NAME2 

An external fili naae vhich 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
vhose value is INTEGER'FIRST. 


M1750A_BARE 

0.0000000004656612873077392578125 

32767 

N0_SUCH_FIXED_TYPE 

N0_SUCH_FL0AT_TYPE 

1.0 

131073.0 

255 

\N0DIRECT0RY\FILENAME 

THIS-PILE-NAME-IS-T00-L0NG-F0R-MY-SYSTEM 

-32768 


TEST PARAMETERS 


Name and Meaning Value 


$INTEGER_LAST 32767 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 32768 

A universal ~ integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION -1.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 


$LKSS_THAN_DURATION BASEFIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


-131073.0 


SLOW PRIORITY 0 

5n integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

SMANTISSADOC 31 

An integer literal whose value 
is SYSTEM.MAXMANTISSA. 

$MAX DIGITS 9 

flaximum digits supported for 
floating-point types. 

$MAX IN LEN 25 

Maximum input line length 
permitted by the implementation. 


SMAXINT 

A universal integer literal 
vhose value is SYSTEM.MAXINT. 

$MAX INT_PLUS_1 

X universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX LEN_INT_BASED_LITERAL 

X universal ~ integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN LEN 
long. 


32767 


32768 


(1..2 -> "2:\ 3..251 «> 'O', 
252..254 -> "11s") 


C-4 








TEST PARAMETERS 


Name and Meaning _ 

$MAX LEN_REAL_BA SED_LITERAL 

X universal rial based literal 
vhose value is 16:F.E: vith 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX STRING_LITERAL 

X string literal of size 
MAX_IN_LBN, including the quote 
characters. 

$MIN INT 

X universal integer literal 
vhose value is SYSTEM.MIN_INT. 

SHIN TASKSIZE 

Xn integer literal vhose value 
is the number of bits required 
to hold a task object vhich has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT FLOAT, SHORTINTEGER, 

LONGPLOAT, or LONG_INTEGER. 

SNAMELIST 

A'list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG BASEDINT 

X based integer literal vhose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX INT. 

$NEV MEMSIZE 

Xn integer literal vhose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DBFAULT_MEM_3lZE. If there is 
no othir 'value, then use 
SOBFAULT MEM SIZE. 


Value _ 

(1..3 «> "16:", 4..250 -> 'O', 

251..254 -> "F.E:") 

(1 -> '"', 2..253 -> 'A', 254 «> '"' 

-32768 

16 

NOSUCHINTEGERTYPE 

M1750A_BARE 

16#FFFE# 

32767 




TEST PARAMETERS 


Ha— and Meaning _ Value _ 

$NEU STOR_UNIT 16 

Xn integer literal whose value 
is a peraitted argument for 
pragma STORAGE UNIT, other than 
$DEFAULT_STOR_ONIT. If there is 
no other - periitted value, then 
use value of SYSTEM.STORAGE_UNIT. 

$NEV SYS NAME M1750A BARE 

X value of the type SYSTEM.NAME, 
other than $DBFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 16 

An integer literal whose value 
is the number of bits required 
to hold a task object vhich has 
a single entry vith one 'IN OUT' 
parameter. 

STICK 0.0001 

A real literal whose value is 
SYSTEM.TICK. 


C-6 






APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. B28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56.~ 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 







WITHDRAWN TESTS 


tests vrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (vhich implicitly converts them to the parent type 
(Ada standard ,3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks vill terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allovs that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
on ly the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the VG9 
ARG. 

o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object - as of the other type. 
However, it is not clear exactly hov the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 




WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the sane external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_0F LINE and 
END OF PAGE that have no parameter: these calls vere intended to 
specify a file, not to refer to STANDARD INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UTERR0R is raised by a 
subsequent PUT operation. But the former operation vill generally 
raise an exception due to a lack of available disk space, and the test 
vould thus encumber validation testing. 


D-3 





