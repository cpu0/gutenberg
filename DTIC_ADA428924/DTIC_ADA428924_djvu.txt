Abstract Presentation Back to Agenda 


Building the Support for Radar Processing across Memory Hierarchies: 
On the Development of an Array Class with Shapes 
using Expression Templates in C ++ * 

Lenore R. Mullin Xingmin Luo ' Lawrence A. Bush* 


August 7, 2003 


Abstract 


n-d Artsy Summation Capability 


“Embedded software processing requirements for DSP, especially for radar, are ex¬ 
pected to exceed 1 x 10 12 operations per second within five years [3].” Therefore, 
the efficient use of memory at all levels of the hierarchy is essential. These array 
based computations involve the composition of linear and multi-linear operators. 
Previous work illustrated how a general array algebra (MoA), and a “suitably rich 
compatible index calculus [3]” (Psi-Calculus), could be used to develop software 
for radar and other DSP applications. This software needs to be tuned to use the 
levels of memory hierarchies efficiently without the materialization of array val¬ 
ued temporaries [3]. Monolithic compiler experiments presented in [4] illustrated 
how these theories could be mechanized using expression templates in C++. The 
present work continues these investigations by defining an N-dimensional array 
class with shape in order to support the mechanization of linear transformations 
in the Psi-Calculus 00-Calculus). We show that this class extends the support for 
array operations in the Portable Expression Template Engine (< PETE>) while 
offering performance that is competitive with hand coded C. Such extensions are 
needed to support the dimension lifting which maps arrays to all levels of a mem¬ 
ory/processor hierarchy. 

Keywords: embedded digital systems, radar, signal processing, arrays, 
high performance, index calculus, shapes, psi, MoA. 



environment OS AtK version 5 t Compete g:< version 3 21. CPU; IBM powenx Memory;«OB 
Now Array class supports any aata fif* ano aimemsion 


Figure 1: Array class with shape for N-dimensional support. 


TD Convolution 


Introduction 

Motivating this paper is the development of efficient algorithms for radar and more 
generally DSP applications. “Reasoning about radar, from a computational per¬ 
spective, entails reasoning about the data structures underlying the algorithms for 
radar computations [3].” Arrays are the data structures underlying algorithms for 
radar computations. These algorithms are characterized by linear and multi-linear 
matrix operations. Therefore, a high level array algebra can facilitate an efficient, 
scalable and portable algorithm design. “Consequently, we believe that the future 
development of efficient, scalable, portable algorithms, for radar, more generally 
for DSP applications, will be greatly facilitated by the use of a high-level array 
algebra during algorithm design. Additionally, since program efficiency depends 
critically upon the efficient use of memory/processor hierarchies, this array al¬ 
gebra should be combined with a suitably powerful index calculus. This calculus 
should facilitate data layout, movement, and manipulation at all levels of the mem¬ 
ory/processor hierarchy. [3].” In [5, 1] it is shown that MoA and 0-Calculus are 
suitable for such an algebra and calculus. For example, [1] presents in detail how 
MoA and the 0-Calculus can be integrated into a Time Domain (TD) convolution 
algorithm. The algorithm development presented in [1] entailed array dimension 
lifting and data restructuring. These were driven by the memory/processor hierar¬ 
chy, coincident with array decompositions and layouts. This process was shown to 
minimize temporary array materializations using these theories. Prior to this, com¬ 
piler experiments were presented in [4] which demonstrated the machanization of 
these theories via expression templates in C++. 

*NSF CCR 0105536 

t Department of Computer Science, University of Albany, State University of 
New York, Albany, NY 12222, U.S.A.{lenore, xluo}@cs.albany.edu 

•^Department of Computer Science, Rensselaer Polytechnic Institute, Troy, NY 
12180, U.S.A. BushL2@cs.rpi.edu 


Synthetic aperture radar (SAR) has many application (i.e. target detection, contin¬ 
uous observation of dynamic phenomena and classification of vegetation [6]). This 
is due to its high resolution imaging capabilities under varying conditions (day and 
night, all-weather). Various SAR signal processing methods have been developed 
(i.e. spectral analysis (FFT) and frequency domain convolution). However, the 
time-domain (TD) analysis is the simplest and most accurate algorithm for SAR 
signal processing [6]. The TD algorithm is also the most computational intensive 
which makes it useful only with SAR data of limited size [6]. Consequently, faster 
TD algorithms are needed as the size and resolution requirements increase. 

TD Convolution: MoA Design 

In [4] a C++ vector class to define the TD convolution was presented. The related 
experiments showed that the creation of array valued temporaries could be avoided, 
enabling performance competitive with hand coded C. 

A uni-processor using vector arguments on the vector class presented in [4] 
was sufficient for those experiments. However, to support mapping to processor 
memory hierarchies, vector arguments must be algebraically abstracted to higher 
dimensional arrays. When processors are added to the design, the dimension of the 
problem is lifted up. Adding a cache loop adds yet another dimension. Thus, we 
started with a 1 -dimensional problem, then abstracted the computation to a second 
(time) dimension. Adding processor and cache mapping ultimately resulted in a 4- 
dimensional problem. In addition, if we desire to support 3-dimensional or higher 
array arguments, dimension lifting may require 10 or more dimensions. Such a 
high dimensionality is not typically supported in today’s languages or libraries. 
Figure 1 illustrates our ability to do so. 

Shape : a new class 

< PETE> facilitates the creation of optimized C++ code to do various mathe¬ 
matical operations. However, < PETE> operates on scalars and does not provide 
an interface for multi-dimensional array computations that are required for the 0- 
Calculus. In addition to the dimension limitation, < PETE> does not support 


1 



























Report Documentation Page 

Form Approved 

OMB No. 0704-0188 

Public reporting burden for the collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and 
maintaining the data needed, and completing and reviewing the collection of information. Send comments regarding this burden estimate or any other aspect of this collection of information, 
including suggestions for reducing this burden, to Washington Headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington 

VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to a penalty for failing to comply with a collection of information if it 
does not display a currently valid OMB control number. 

1. REPORT DATE 2. REPORT TYPE 

20 AUG 2004 N/A 

3. DATES COVERED 

4. TITLE AND SUBTITLE 

Building the Support for Radar Processing across Memory Hierarchies: 

On the Development of an Array Class with Shapes using Expression 
Templates in C++ 

5a. CONTRACT NUMBER 

5b. GRANT NUMBER 

5c. PROGRAM ELEMENT NUMBER 

6. AUTHOR(S) 

5d. PROIECT NUMBER 

5e. TASK NUMBER 

5f. WORK UNIT NUMBER 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Department of Computer Science, University of Albany, State University 
of New York, Albany, NY 12222, U.S.A. 12222; Department of Computer 
Science, Rensselaer Polytechnic Institute, Troy, NY 12180, U.S.A. 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

10. SPONSOR/MONITOR'S ACRONYM(S) 

11. SPONSOR/MONITOR'S REPORT 
NUMBER(S) 

12. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release, distribution unlimited 

13. SUPPLEMENTARY NOTES 

See also ADM001694, HPEC-6-VoI 1 ESC-TR-2003-081; High Performance Embedded Computing 
(HPEC) Workshop (7th)., The original document contains color images. 

14. ABSTRACT 

15. SUBIECT TERMS 

16. SECURITY CLASSIFICATION OF: 17. LIMITATION OF 

18. NUMBER 19a. NAME OF 

a. REPORT b. ABSTRACT c. THIS PAGE |J|J 

unclassified unclassified unclassified 

17 


Standard Form 298 (Rev. 8-98) 

Prescribed by ANSI Std Z39-18 





Abstract 


Presentation 


Next Abstract 


Paper; Building the Support for Radar 

Processing Across Memory 
^^Hierarchies: 


On the Development of an 
felfay Class with Shape using 


C ++ Expression Templates 


by Lenore R. Mullin, Xingmin Luo 
and Lawrence A. Bush 


1 


IT H)-1 

Z \M CHE 

ffHH 

Z i=W CHE 


m 
Z i=T HE 


11 H ) -1 

Z iS' CHE 

nibi 

Z i=T HE 


IT H)-1 

Z i^' CHE 


Processor / Memory Mapping 


(7 H ) -1 
^ 1=0 

(T H)-1 
£ 1=0 


(T H ) -1 
£ 1=0 


< 15 14 13 > 

< 12 11 10 > 

< 15 14 13 > 


< 12 11 10 > 
v. y 


r < 15 14 13 

< 12 11 10 > 
v. y 


r 


< 0 0 0 > 
< 0 0 1 > 


vC "\ 

< 0 0 0 > 

< 0 1 2 > 

v y 


r 

< 1 2 3 > 




< 4 5 6 > 


■> processor 0 


(7 H ) -1 
^ 1=0 

(7 H)-1 
£ 1=0 


(7 H ) -1 
£ 1=0 


< 15 1413 > 



f 

< 2 3 4 > 

< 12 11 10 > 




< 5 6 7 > 

s. > 




■s. > 

< 15 14 13 > 




r 

< 3 4 5 > 

< 12 11 10> 




< 6 7 8 > 

v. y 



v. y 

. 


X 

: 

% 15 14 13 




r < 9 0 0 > 

< 12 11 10 > 
v. y 

) 



< 0 0 0 > 

y 


-► processor 1 


2 



const Expression 


<BinaryNod 

BinaryNod 


Reference< 


Shape 


















Programmability 


C++ 



Object - Oriented 
Programming 
Language 






Mechanization 







Reduction 

Semantics 



Calculus 



Processor Mapping 




Performance 

Efficient Loops 




0 

0 

0 

1 


>T\ 


1 > 

0 > 
2 > 


processor 0 


2 3 
5 6 


:] 


Si 


emory 




3 4 > 

6 7 > 

4 5 > 

7 8 > 




y 



(TH)-I (TH)-1 

S h T HE S 1=0 




< 15 14 13 > 
12 11 10 > 



r 

< 9 0 0 > 

J 

, < 0 0 0 > i 

Vi: is 


processor 1 














































Operations 



Array, h 

template <class T = int> 
class Array 

{ 

■ ■ ■ 

template<class RHS> 

Array &operator=(const Expression<RHS> &rhs) 

{ 

for(long i=0; i<this->size; i++) 

d[i] = forEach(rhs, EvalLeafl(i), OpCombineO); 
return *this; //equivalent to: a.d[i] = b.d[i]+c.d[i]+d.d[i] 

} 

■ ■ ■ 

private: 

T * d; 

vector <int> shape; 
long size; 



Array.h 


integrates 

with 

<PETE> 


Psi-Calculus 

platform 


N - dimensional capability 

(required for processor / 
memory mapping ) 



Time - Seconds 




0 700 1400 2100 2800 

Matrix Size 





















Abstract 


Presentation 



the shape notion which is a component used to calculate the attribute evaluation 
rules needed to rewrite an Abstract Syntax Tree (AST) defining array expressions. 
Fortunately, < PETE> is designed to be extendable. To that end, we have imple¬ 
mented a multi-dimensional array object extension to support shape. The shape 
vector uses the Standard Template Library (STL) vector<int> class which 
conveniently enables the needed N-dimensionality. The shape vector is passed to a 
specialized Array class which constructs the multi-dimensional array and enables 
assignments and arithmetic using operator overloading and expression templates 
respectively. 

Our experiments test the efficiency of our implementation and show that ours 
is much faster than a standard C - *" - * - implementation and is similar in speed to an 
implementation in hand-coded C. It also shows that the N-dimensional function¬ 
ality of our Array class does not increase the overhead compared to a typical 
PETE implementation. 


1 ' 
■ 

2 Cl* 


Matrix Summation Comparison 


Back to Agenda 


Next Abstract 


r~i i i i i i i i i 

















— C+*tsUi*ic I inl) 

— Array classldynamc, int) 

typical PETE(dynarmc.int) 

— C(dynamic.mt) 

. —C(stauc,int) 






















































| 















































































- 

£ 

2 




















55 





IT 





EfMronmerit OS Redhrt limn 12. CompOn: iruti C* • comp<«r 7 i, CPU: P* 0OOMHZ. Mmimw 32GW8 
Ncd« A*r in dws support* any Mi lypu an«J dimension Typical PETE only supports on* specified data tipv (inO 


Implementation 

In a previous paper [4], experimental results were presented for computing 1- 
Dimensional Arrays. To demonstrate our efforts to extend these ideas to multi¬ 
dimensional arrays, we present experimental results of our multi-dimensional Array 
object implementation. The class is templated and therefore supports any data 
type. This is necessary so that we can use common scientific computing data types 
such as float and double. The experiments, therefore, test the integer and 
float data types for basic math operations which are fundamental to '0-Calculus 
(i.e. distributing indexing over scalar operations). 

The results presented here are for the addition 1 of three multi-dimensional 
arrays and the assignment of their result to a forth multi-dimensional array. 

The Array is defined through a shape vector. This vector stores the size 
of each dimension of an Array and is passed to the Array class constructor. 
Default and copy constructors are also defined. This class incorporates operator 
overloading and < PETE> related expression tree definitions. Our class gets its 
efficiency by defining and implementing the high level operation of the expression 
template. This allows our class to interface with < PETE>, utilizing its standard 
mathematical operations and expression tree operation evaluation ordering. The 
shape vector mentioned above is a relevant feature of'll?-Calculus. 

Essentially, the -0-Calculus rules can be implemented at the iterator level. 
Basically, we have complex non-algebraic array expressions that can be reduced 
to memory access patterns. The multiple levels of indirection can be handled by 
the iterator abstraction (the pointer on steroids). 

Experiments 

Our tests were compiled on two COTS platforms: an 800 MHz Pentium III pro¬ 
cessor with 320MB of memory running Redhat Linux 7.2 and a 200 MHz IBM 
PowerPC with 4GB of memory running AIX Version 5. The test code was com¬ 
piled using Intel C~*" + and GCC respectively. 

Figure 2 and 3 show our results which measure the differences between six 
implementations of multi-dimensional array addition 2 : C+ - *" (static, int). 
Array class (dynamic, float). Array class (dynamic, int), < PETE> 
(dynamic, int), C (dynamic, int) and C (static, int). 

The results were similar on both platforms. Specifically, the C (static, 
int) version performed the fastest and the C + ~*~ (static, int) version per¬ 
formed the slowest. It is clear that the Object Oriented Programming (OOP) con¬ 
structs of C++ affect performance. However, it is well known that OOP constructs 
improve programmability (ease of use, extendibility, reusability and quality [2]) 
over C, in particular when extending the implementation to complex applications. 
With < PETE> and our C ++ Array class, we achieved similar performance as 
is obtained using C where the loops are optimized by hand. This is shown by the 
results using the integer type which performed the same as the pure < PETE> 
coded results. However, the float data type version was still significantly faster 
than the traditional C ++ (static, int) implementation. These results further 
validate that we can integrate the high performance of optimized C loops into the 
00/C++ paradigm. 

Overall, these experiments show that extending < PETE> to N-Dimensional 
Array operations via the -0-Calculus shape notion is viable. The speed of the 
computations is impressive even when using templated types including the float 
data type. 

’All < PETE> scalar operations are included. 

2 This could be any binary scalar operation: divide, ceiling, etc. 


Figure 2: Five implementations of multi-dimensional addition. 


Matrix Summation Comparison 

16 r m i --i—n~ Trrr i 

-C+>{s 1 ailic.irt!) 

' ”-Array cl»»s(dyn»mie. flow) 

^ ^ -A/ray cbss(dyn«rac. int) I 

PETE(ifyn»mic,int) 



Mjnusa* 


environment OS AK version 5 i Con*4*i: pee version 3 2 i CPI* Du powerp: Memory: 4GB 

NoM A/rsy class supports eny osts type and flimomsion Typical PETE only supports one speorteo data type <ing 

Figure 3: Six implementations of multi-dimensional addition. 


Conclusion and Future Work 

The results shown demonstrate the viability of using < PETE> as a means to 
optimize operations that are essential to a fully functional 0-Calculus library. They 
represent a very important step: inclusion of the shape notion into the Array 
class. 

These results are encouraging. Future work may be in reducing the detri¬ 
mental performance caused by templating the Array type and adding additional 
algorithm methods to enable 0-Calculus operations. 

References 

[1] H. B. Hunt III, L. Mullin, and D. J. Rosenkrantz. Towards an indexing calculus 
for efficient distributed array computation. Technical Report 97—4, University 
at Albany, Department of Computer Science, 1997. 

[2] B. Meyer. Object-Oriented Software Construction, Second Edition. Prentice 
Hall PTR, Upper Saddle River, New Jersey, 1997. 

[3] L. Mullin, H. H. Ill, D. Rosenkrantz, and X. Luo. Efficient radar processing 
via array and index algebras. In Proceedings of the 1st Workshop on Opti¬ 
mizations for DSP and Embedded Systems(ODES), 2003. 

[4] L. Mullin, E. Rutledge, and R. Bond. Monolithic compiler experiments using 
C+-b Expression Templates. In Proceedings of the High Performance Embed¬ 
ded Computing Workshop HPEC 2002, MIT Lincoln Laboratory, Lexington, 
MA, 2002. 

[5] L. M. R. Mullin. A Mathematics of Arrays. PhD thesis, Syracuse University, 
Dec. 1988. 

[6] B. Wu, Y. Zhang, and J. Kong. Time-domain computer simulation of Synthetic 
Apeture Radar(SAR) image for rough surface. In Proceedings of Progress in 
Electromagnetics Research Symposium. Research Laboratory of Electronics, 
Massachussetts Institute of Technology, Cambridge, MA, July 2000. 


2 



































































































