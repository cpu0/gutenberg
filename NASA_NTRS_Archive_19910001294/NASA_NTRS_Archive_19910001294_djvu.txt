N91 - 10 607 

EVOLVING IMPACT OF ADA ON A / , / 

PRODUCTION SOFTWARE ENVIRONMENT 


F. McGarry (NASA/GSFC) 
L. Esker (CSC) 

K. Quimby (CSC) 



1.0 BACKGROUND (Chart 1) 

Since 1985, the Software Engineering Laboratory (SEL) has been 
studying the impact of Ada and Ada-related technologies on the 
software development of production projects within the Flight 
Dynamics Division (FDD) at NASA/GSFC. Until then, all software 
development projects had used FORTRAN as the primary implemen- 
tation language. The Ada development work began with a pilot 
project and a research project that paralleled a production 
FORTRAN development project (References 1 and 2) . After this 
initial Ada experience, several later production projects were 
developed in Ada. For each project, the SEL has collected such 
detailed information as resource data, error data, component 
information, methodology, and project characteristics, so that 
the SEL could study the evolution of the use of Ada itself and 
the actual characteristics of the Ada development process 
(Reference 3) . 

Analysis of the Ada projects has led personnel to document 
lessons learned during the development of Ada projects 
(References 4 through 7) . These lessons have provided valuable 
insight into the impact of Ada, especially in the following 
areas : 


F. McGarry 
NASA/GSFC 
1 of 33 



1. The impact of Ada on the software development process, 

that is, the impact Ada has on such measures as productivity, 
reliability, and maintainability. 

2. The impact of Ada over time, as shown by the differences 
between the first, second, and third Ada projects. 

3. The use of Ada and Ada features as the development environ- 
ment gains more experience in using Ada. 

4. The timeframe for realizing the benefits of using Ada. 


1.1 ADA PROJECTS STUDIED (Chart 2) 

Ada use within the FDD began in January 1985 with the GRODY 
project. As part of the preparation for developing this system, 
personnel first participated in a practice Ada project by 
implementing an electronic mail system (EMS) . These two projects 
actually represent a first Ada experience. 

After the GRODY project was well under way, two new Ada simulator 
projects for the GOES satellite began. GOADA, the dynamics 
simulator, and GOESIM, the telemetry simulator, collectively 
represent a second major experience with Ada. They are 
considered second projects because (1) some team members had 
previous experience in developing systems in Ada and (2) these 
two projects could draw on lessons learned from GRODY. Not only 
were the staffing profiles of the two GOES simulator teams 
different from the GRODY team, but the two GOES teams began using 
additional software tools available within the DEC Ada 
development environment. 


F. McGarry 
NASA/GSFC 
2 of 33 



Late in 1987 and 1988, two more projects, UARSTELS and Build 4 of 
FDAS began; these projects represent a third distinct Ada 
experience. Currently, two more Ada projects are in their early 
stages: EUVEDSIM and EUVETELS , but these projects are very early 

in their lifecycles and are not yet available for study. 


1.2 PROJECT STATUS AND CHARACTERISTICS (Chart 3) 

All totaled, Ada has been used on eight projects in the flight 
dynamics area. Two projects (EMS and GRODY) are completed; three 
(GOADA, GOESIM, and FDAS) are well into system testing; and one 
(UARSTELS) is in the implementation phase. The other two 
projects (EUVEDSIM and EUVETELS) are in the early requirements 
analysis phase. These projects range from nearly 6K to 163K SLOC 
in size, where SLOC is total source lines of code including 
comments, blanks, newly developed code, and reused code. These 
projects have required or are expected to require from 4 to 36 
months to complete and had from three to seven people working on 
them. Although GRODY lasted for 36 months, it should be noted 
that most personnel on this project did not work fulltime on its 
development. The small EMS project could have been completed 
by 2 or 3 people; but since it was part of the Ada training for 
the GRODY project, all GRODY developers participated in some part 
of the EMS project. 


2.0 ADA EVOLUTION 


2.1 TEAM EXPERIENCE AND DEVELOPMENT ENVIRONMENT (Chart 4) 


F. McGarry 
NASA/GSFC 
3 of 33 



Of the eight Ada projects currently under way, six projects have 
progressed far enough to be studied: EMS, GRODY, GOADA, GOESIM, 

FDAS, and UARSTELS. All six of the projects studied have been 
staffed with personnel with a similar level of software develop- 
ment experience, an average of 4 to 5 years. Except for UARSTELS, 
each project also had personnel with a similar level of experi- 
ence in the application. To date, the SEL has not observed any 
impact due to differences in team experience between projects. 

It is also too early to observe any differences in the effect of 
varied levels of Ada experience on project development. The 
number of people who are formally trained in Ada and/or the 
number of those who have been on previous Ada projects is still 
too small. Only the first Ada projects have been completed. 

Some personnel on those projects have contributed to current, 
ongoing projects; however, there are not enough people in the 
environment, even on the most recent Ada projects, to signifi- 
cantly change the ratio of experienced Ada personnel to those 
with no Ada experience. 

The use of tools has evolved somewhat from the first Ada 
projects. The practice Ada project (EMS) had only rudimentary 
tools available (compiler, linker, editor) . GRODY made use of 
the DEC symbolic debugger (SD) , and the Configuration Management 
System (CMS) . All subsequent Ada projects are using these tools 
as well as the Language Sensitive Editor (LSE) . Project person- 
nel have also developed some additional tools in house to create 
package bodies and templates for the associated subunits they 
need to develop. 


F. McGarry 
NASA/GSFC 
4 of 33 


2.2 SOFTWARE CHARACTERISTICS (Chart 5) 


Traditionally, software size has been described in terms of the 
lines of code developed for the system. However, software size 
can be expressed by many other measurements (Reference 8) , 
including 

1. Total physical lines of code (carriage returns) 

2. Noncomment/nonblank physical lines of code 

3. Executable lines of code (ELOC) (not including type 
declarations) 

4. Statements (semicolons in Ada, which include type 
declarations) 

Chart 5 describes the size of the Ada projects in the flight 
dynamics area using these four measurements. The FORTRAN 
project, GROSS, was also included in the summary for comparison. 
The GROSS project is the FORTRAN implementation of the GRODY 
project, and the GRODY/GROSS comparison has been detailed in 
previous papers. Because the GOESIM and UARSTELS projects are 
both telemetry simulators, they are also very similar in terms of 
their functionality. These two Ada projects are estimated to be 
between 75 and 78 thousand lines of code (KSLOC) . In comparison, 
a typical telemetry simulator in FORTRAN consists of 
approximately 28 KSLOC. 

Unless one counts only Ada statements, these figures tell us that 
the use of Ada results in many more lines of code than the use of 
FORTRAN. The increase in lines of code is not necessarily a 


F. McGarry 
NASA/GSFC 
5 of 33 



negative result. Rather, it is simply that the size of the 
system implemented in Ada will be larger than an equivalent 
system in FORTRAN. It is also clear that a precise definition is 
needed of what is a line of code in Ada and what code is included 
in that measurement. 

Throughout the years of developing similar systems in FORTRAN in 
the flight dynamics area, the average level of software reuse has 
been between 15 and 20 percent (Reference 9) . FORTRAN projects 
that attained a 35 percent or higher level of reuse of previously 
developed code are rare. After the first Ada project and with 
only 5 to 6 years of maturing in the environment, Ada projects 
have now achieved a software reuse rate of over 30 percent. This 
is already greater than the typical FORTRAN project. The 
UARSTELS project is expected to consist of more than 40 percent 
reused code. This trend of increasing software reuse is very 
promising. 

2.3 LIFE-CYCLE EFFORT DISTRIBUTION (Chart 6) 

The GROSS project followed the typical FORTRAN life-cycle effort 
distribution (Reference 10) . Specifically, a small amount (8 
percent) of the total effort expended on the project was spent 
during the pre-design or requirements analysis phase of the 
project; 27 percent of the effort was spent during the design 
phase, 40 percent during the code implementation phase; and 25 
percent during the system testing phase. For the Ada projects, 
significant changes to the life cycle have not yet been observed. 
However, the Ada life cycle is changing slightly with each 
project and may soon show a different life cycle than that 
expected for a FORTRAN project. The life cycles for the second 
and third Ada projects are shifting slightly to show more design 


F. McGarry 
NASA/GSFC 
6 of 33 



time required with less system test time. 


As the Ada environment matures and the SEL learns more about Ada, 
the life cycle is expected to continue shifting in the direction 
that the early literature has reported (Reference 11) : more time 

spent in the design phase and less time in the system test phase. 
FORTRAN projects could assume the reuse of the life cycle based 
on past experience. This life cycle cannot be automatically 
reused in Ada, and more study is needed to determine the duration 
and products of each phase of an Ada project. 

With the current projects, the SEL has not observed significant 
changes to the life-cycle phases. However, effort by phase is 
time driven. The SEL also collects effort data by activity 
across all phases. With this data the amount of effort spent on 
such activities as design, coding, and testing is very different 
than the distribution of effort on activities for FORTRAN 
projects. Much more time is spent on design for the Ada 
projects, but more analysis is still needed in this area. 

2.4 ADA COST/PRODUCTIVITY (Chart 7) 

Discussions on Ada productivity are somewhat confusing because so 
many interpretations exist of software size measures in Ada. 
Depending on the measurement used and an individual's 
inclination, one could determine that Ada is either as good or 
not as good as FORTRAN. Using the total lines of delivered code 
as a measure, the first, second, and third Ada projects show an 
improving productivity over time, and they show a productivity 
greater than FORTRAN. However, considering only code statements 
(excluding all comments and continued lines of code) , the results 
are different. An increasing productivity trend remains in the 


F. McGarry 
NASA/GSFC 
7 of 33 



Ada projects over time, but the Ada projects have not yet 
achieved the productivity level of FORTRAN projects. 

Within the flight dynamics environment, many software components 
are reused on FORTRAN projects. Since no Ada components existed 
previously, the first Ada projects were, in fact, developing a 
greater percentage of their delivered code than the typical 
FORTRAN project. Based on a past study by the SEL and on 
experience with FORTRAN projects, personnel concluded that reused 
code costs around 20 percent of the cost of new code (ref 15) . 

The cost of reused code lies in the effort needed to test, 
integrate, and document the reused code in the new system. Using 
this estimate, reusability can be factored into software size by 
estimating the amount of developed code. Because of the 
differences in cost of new and reused code, developed code is 
calculated as the amount of new code plus 20 percent of the 
reused code. With software reusability factored in, the 
productivity for developed statements on Ada projects is 
approximately the same as that for FORTRAN projects. 

The trends in Ada productivity are very positive. Again, lines of 
code must be clearly defined when discussing productivity. Using 
total number of lines as the measurement of software size, Ada 
productivity was always greater than FORTRAN productivity. 

However, due to the greater number of lines of an Ada project 
compared to a similar FORTRAN project, this measure can be 
misleading. 


2.5 USE OF ADA FEATURES (Chart 8) 


F. McGarry 
NASA/GSFC 
8 of 33 



It is difficult to tell whether a given project really used the 
Ada language to its fullest capacity. Different applications may 
or may not need all the features available in Ada. However, in 
an effort to achieve some measurement in the use of the features 
available in the Ada language, the SEL identified six Ada 
features to monitor: generic packages, type declarations, 

packages, tasks, compilable PDL, and exception handling. The SEL 
then examined the code to see how little or how much these 
features were used. 

The numbers of packages and type declarations were normalized to 
the size of the system, and the number of generic packages was 
divided by the total number of packages in the system. As seen 
in chart 8, the use of four of these features has evolved over 
time: generic packages, type declarations, packages, and 

tasking. Compilable PDL and exception handling did not show any 
trends. Perhaps it is too early to see results in these areas. 

The average size of packages (in SLOC) for the first Ada projects 
is much higher than the average size of packages for the second 
and third Ada projects. This is due to a difference in the 
structuring method between the first Ada projects and all 
subsequent Ada projects (Reference 4). The first Ada projects 
were designed with one package at the root of each subsystem, 
which led to a heavily nested structure. In addition, nesting of 
package specifications with package bodies was used to control 
package visibility. Current Ada projects are utilizing the view 
of subsystems described by Grady Booch (Reference 12) as an 
abstract design entity whose interface is defined by a number of 
separately compilable packages, and nesting of Ada packages is 
limited to generic package instantiations. 


F. McGarry 
NASA/GSFC 
9 of 33 



The use of generic packages from the first to the current Ada 
projects seems to be increasing. More tham a third of the 
packages on current projects are generic packages. This higher 
use of generics reflects both a stronger emphasis on the 
development of verbatim reusable components and increased 
understanding of how to effectively utilize generic Ada packages 
within the flight dynamics area. 

The use of strong typing within these software systems is also 
increasing, as measured by the number of type declarations per 
KSLOC. With experience, developers are more comfortable with the 
strong typing features of Ada and are using its capabilities to a 
fuller extent. 

The use of tasking shows the most dramatic evolution over time for 
any particular Ada feature in the flight dynamics environment; 
its use has decreased markedly. The first Ada project, GRODY, 
contained eight tasks. However, from lessons learned on the 
GRODY project, personnel on subsequent Ada dynamics simulator 
projects have reduced that number to four tasks. Current 
telemetry simulator projects require no tasks at all. in the 
area of tasking, experience has shown that extensive use of this 
Ada feature is not appropriate for many applications. Although 

®^tsri£>ive use of tasking might be very appropriate for other 
applications, the use of this Ada feature has definitely changed 
as project personnel have learned to use tasking only in those 
situations that are appropriate. 

2.6 RELIABILITY, ERROR/CHANGE RATE AND CHARACTERISTICS (Charts 9 
and 10) 


F. McGarry 
NASA/GSFC 
10 of 33 


The SEL measures software reliability by the number of changes or 
error corrections made to the software. For Ada projects, 
software error and change rates show a very positive trend. While 
it is too early to observe a definite difference from the FORTRAN 
rates, the reliability of the Ada projects is at least as good as 
that of FORTRAN projects. The error and change rates on the Ada 
projects are also declining over time, a promising trend. The 
types of errors also show an evolution from first through third 
Ada projects. 

On a typical FORTRAN project, design errors amount to only 3 
percent of the total errors on the project. For the first and 
second Ada projects, 25 to 35 percent of all errors were 
classified as design errors, a substantial increase. However, 
for the third Ada project, design errors are dropping signifi- 
cantly and are estimated to be approximately 7 percent. This 
rate is close to what is experienced on FORTRAN projects and 
clearly shows a maturation process with growing expertise in Ada. 

Much of the literature on Ada reports that the use of Ada should 
help reduce the number of interface errors in the software 
(Reference 13) . In our FORTRAN environment, about one-third of 
all errors on a project are interface errors. On our first and 
second Ada projects, the number of interface errors was not 
greatly reduced. Around one-fourth of the errors were interface 
errors. However, with current projects, the SEL is now seeing 
the expected results: interface errors are decreasing. 

"Errors due to a previous change" is a category of errors that 
was caused by a previous modification to the software. The first 
Ada project showed a large jump in the number of these errors 
compared to those using FORTRAN. However, all subsequent Ada 


F. McGarry 
NASA/GSFC 
II of 33 



projects show a rate for "errors due to a previous change" very 
similar to the FORTRAN rate. Many things probably contributed to 
this initial jump in the error rate: inexperience with Ada, 

inexperience with Ada design methodologies, and a nested software 
architecture that made the software much more complex. Again, 
the error profile is decreasing with the maturity of the Ada 
environment . 

3.0 OVERALL OBSERVATIONS ON THE IMPACT OF ADA (Chart 11) 

In summary, many aspects of software development with Ada have 
evolved as our Ada development environment has matured and our 
personnel have become more experienced in the use of Ada. The 
SEL has seen differences in the areas of cost, reliability, 
reuse, size, and use of Ada features. 

A first Ada project can be expected to cost about 30 percent more 
than an equivalent FORTRAN project (Reference 14) . However, the 
SEL has observed significant improvements over time as a develop- 
ment environment progresses to second and third uses of Ada. 

The reliability of Ada projects is initially similar to what is 
expected in a mature FORTRAN environment. However, with time, 
one can expect to gain improvements as experience with the 
language increases. 

Reuse is one of the most promising aspects of Ada. The proportion 
of reusable Ada software on our Ada projects exceeds the propor- 
tion of reusable FORTRAN software on our FORTRAN projects. This 
result was noted fairly early in our Ada projects, and our exper- 
ience shows an increasing trend over time. 


F. McGarry 
NASA/GSFC 
12 of 33 



The size of an Ada system will be larger than a similar system in 
FORTRAN when considering SLOC. Size measurements can be 
misleading because different measurements reveal different 
results. Ratios of Ada to FORTRAN range from 3 to 1 for total 
physical lines to 1 to 1 for statements. 

The use of Ada features definitely evolves with experience. As 
more experience is gained, some Ada features may be found to be 
inappropriate for specific applications. However, the lessons 
learned on an earlier project play an invaluable part in the 
success of later projects. 


ri-vu 

OF POOR QUALITY 


F. McGarry 
NASA/GSFC 
13 of 33 



REFERENCES 


1. Software Engineering Laboratory (SEL) , SEL-85-002, Ada 
Training Eval uation and Recommendations . R. Murphy and 
M. Stark, October 1985 

2. F. McGarry and R. Nelson, "An Experiment with Ada — The GRO 
Dynamics Simulator," NASA/GSFC, April 1985 

3. SEL, SEL-81-104, The Software Engineering Laboratory . 

D. Card, F. McGarry, G. Page, et al., February 1982 

4. , SEL-88-003, Evolution of Ada Technology in the Fliaht 

Dynamics Area: Design Phase Analysis . K. Quimby and 

L. Esker, 1988 

5. — , SEL-88— 001, System Testing of a Production Ada Project: 
The GRODY Study, J. Seigle, L. Esker, and Y. Shi, November 
1988 

6. C. Brophy , S. Godfrey, et al., "Lessons Learned in the 
Implementation Phase of a Large Ada Project," Proceedings of 

— Sixth — Natio nal Conference on Ada Technology . 1988. 

7. SEL, SEL-87-004, Assessing the Ada Design Process and Its 

Iropl i cat ions : A Case Study . S. Godfrey and C. Brophy, 

July 1987 

8. D. Firesmith, "Mixing Applies and Oranges: Or What Is an 

Ada Line of Code Anyway?," Ada Letters . September/October 
1988 


F. McGarry 
NASA/GSFC 
14 of 33 


OhsLs.c./T'. 

OF PQ Oh Q. 



9 . 


Computer Sciences Corporation (CSC), IM-88/083(59 253), 
Software Reuse Profile Study of Recent FORTRAN Projects in 
the Flight Dynamics Area , L. Esker, January 1989 

10. SEL, SEL-81-205, Recommended Approach to Software 
Development . F. McGarry, G. Page, et al., April 1983 

11 . v. Castor and D. Preston, "Programmers Produce More With 
Ada," Defence Electronics . June 1987 

12. G. Booch, Software Engineering With Ada . Menlo Park, CA: 
Benjamin/Cummings Publishing Company, 1983 

13. The MITRE Corporation, Use of Ada for FAA's Advanced 
Automation System (AAS) , V. Basili et al., April 1987 

14. B. Boehm, "Improving Software Productivity," Computer , 
September 1987 

15. SEL, SEL-84-001 , Manager's Handbook For Software 
Development . W. Agresti, F. McGarry, et al., April 1984 


F. McGarry 
NASA/GSFC 
15 of 33 



THE VIEWGRAPH MATERIALS 


MCGARRY 


FOR THE 

PRESENTATION FOLLOW 


fiGT FiLMED 


/ 4 INTENtiqmam y BUNK 




CO 

73 




o 


LL 

o o 

(/) 


o 


o 

< Q 

9= O 

CC 

a. 

< 




oc m 

m ^ 

CO ^ 
ill o 

< z: 

§3 

Z3 LLI 


> 

cc 

cc 

< 

(5 




CC 

LL 


if LwU'fll lAU 1 FsLiVJcL) 


muk 


/? 


INTENTIONALLY BLANK 


F. McGarry ? 
NASA/GSFC g 
19 of 33 a 


NASA/GSFC COMPUTER SCIENCES 

CORPORATION 


3 

o 

DC 

(3 

* 

O 

< 

00 


I 

0 


0 

i- 

o 
111 
“0 

o_ 

QC CO 

0 


O 


00 


< 

0 

< 


< 

0 

o 

U_ 

Q 

LLJ 

Q 

3 

H 

CO 

Q 
111 
I — 
O 
111 
_l 
_i 

o 

o 


N < 

-I 2 

Fg 

^ 0 

-1 

LU L-J 

0 0 

0Q 

<2 3 


HI _j 

0 CO 

0UJ 

Sf 


§ 

Q 


>- 

0 

I 

0 


O 
LU O 
' LU 


CO 

u 

< 


< < “2 


Q 


O 

LU QC 
D 0 


0 

h— 

0 

LU 


0 

1 

2 
LU 

LU 

_l 

0 


g 

0 

LU 

Q 

0 

2 


< 

0 


5| 

CC m 
0 0 
0 < 
< X 


Q 

LU 

0) 

CO 

LU 

DC 

Q 

Q 

< 

LU 

CD 


CO 


O 

DL 


0 

LU 


o 

0 

0 

I- 

LU 

0 

O 

LU 

Si 

Q 


co 

ID 

< 

0 

o 

h- 

o 

< 

0 


LU 

X 

I— 

0 

<c 

X 


2 

o 

h 

3 

0 

0 
I — 
0 

Q 

h— 

0 

o 

0 

0 

LU 

0 

LU 


0 

< 

2 

2 

2 

< 

£ 


0 

< 

_J 

LU 

0 


> 

I — 

o 

3 

Q 

o 

0 

0 


0 

I — 
O 
LU 
0 
0 
LU 

0 

0 

< 


LU 

H 

H 

0 


C0 

T3 

< 

0 

o 

h- 

o 

< 

0 


0 


2 2 


0 


< £ 


O 

LU 

X 

I- 

0 


!< !< 
x x 
$ § 


0 

UJ 


Pit 

i ■ • • 


0 
0 

iii 

1 
i — 

0 

m 

O 

h 

h- 

LU 

0 

0 

rv.. 0 

LU 0 
Q 


co 

o 5 
oc < 
00 LU 

UJ- “ 

0| 
Q ^ 
Z O 

CM Q 


F. McGarry 
NASA/GSFC 
20 of 33 


04 


8 


h- 

T — 

CM 

Q 


HOW LONG DOES IT TAKE TO REAP PROMISED BENEFITS? 



Ada PROJECTS IN FLIGHT DYNAMICS DIVISION 



o 

CD 


CJ> 

CO 


00 

00 


00 


CO 

00 


LO 

00 


CN 


F. McGarry ? 
NASA/GSFC g 
21 of 33 Q 


CHART 





Ada PROJECTS STUDIED 


F. McGarry 
NASA/GSFC 
22 of 33 


U 1 

LL LLI 
< > ^ 
F- 111 

0 _l 


CO 


co co 

CO ^ 

O F- 

co < 


T- CO 


111 

I— 

LU 


P 9= 


O 

o 


LU 

h - 

LU 

_l 

CL 

o 

o 


h~ 

CO 


LU 
I — 
CO 
>- 
CO 


CO 

LU 

h- 


LU 

h" 

CO 

>- 

CO 


co 

LU 

H 

LU 

I- 

co 

CO 


LU 

Q 

O 

O 


z 

o 


o 

o 

o 

o 

o 

<c 

nr 

o 



2 



CO 

o 

CO 

CO 

00 



CO 

CM 


r— 


Q 


LO 

LO 

r^- 


00 

00 


00 

00 

co 

CO 

CO 

CO 


CO 

00 

p 

03 

■t— 

c\i 

LU o 

n 3 


o 

o 

o 

o 

o 

o 

o 

o 

o 

o 

o 

o 

o 

CO 

00 

T”“ 

o 

h- 

o 

CO CO 

r^ 

04 

■M* 

CO 

00 

LO 


LO 



h- 

LO 

h- 


LU 

CL 


0 

i\ 

2 < 
cc 

O H 
LU 

o 
o ^ 

tig 


o 

QC 


LU 
I — 
CO 
>- 
CO 

o 

QC 

I— 

Z 

£ o 

Oo 

3 0 


LU 
I — 
CO 
> 
CO 

_l 

o 

QC 


£ o 

P O 


5 

3 


I — 
X 
0 


LU 


CL ^ LL 7a LL 


o 

QC 


g£ 

§ ID 

3 s 


CO 


CO 


LU 


QC 

O 

§ 

3 

CO 


P 

CC 

in 

LU 

_l 

LU 

I- 


F- 

O 

LU 

“0 

o 

QC 

CL 



> 

< 

2 



Q 

Q 

0 

0 

0) 

o 

< 

LU 


QC 

o 

o 

Q 

LU 

0 

0 

0 

UL 


CO 

_l 

LU 

F- 

CO 

QC 

< 

3 


s 

o 

L 

CJ 

o 


*SLOC = TOTAL LINES (CARRIAGE RETURNS) INCLUDES COMMENTS/BLANKS/REUSED 
ALL PROJECTS DEVELOPED ON DEC VAX 11/780 OR VAX 8600 


TEAM EXPERIENCE AND ENVIRONMENT USED 


2 

>- 

>- 

> 

>- 

>- 

2 

> 

> 

>- 

> 

> 

2 

2 

>- 

> 

> 

> 

2 

2 

>- 

>- 

2 

>- 


_j O 

=1 w 

< O 

2 Q 
CO LU 
O CO 


Q LU 

is 

< _i 
LU < 
h- * 

•* -K 



>- 

< 



Q 

Q 

CO 

CO 

O 

< 

LU 


cc 

O 

O 

LU 

0 

0 

0 


F. McGarry P 
NASA/GSFC - 
23 of 33 Q 


SOFTWARE CHARACTERISTICS 


F. McGarry 
NASA/GSFC 
24 of 33 


P O z 

i=: — i CC 

Q- 4 O 

— ll 
f- C/D 


o 

O 

o 

o 

o 

O 

o 

o 

o 

O 

m 

o 

CO 

m 

CM 

CM 

CM 



' — 


vO 

0 s 

IO 


C/D 

_l 

_ 

1 




LU 
1 — 
C/D 
DC 
< 

CO 

TD 

< 

LU 

2 

75000 

i 

1 

t 

> 

C/D 

f- 

Q 

O 

o 

o 

o 

o 

o 

o 

o 

< 

DC 

CO 

in 

CO 

T— 

o 

o 

CO 

y— 

I s - 

T— 

ll 


CO 

T— 

1— 

2 


o 

o 

o 

o 

C/D 

LU 

a? 

o 

o 

o 

o 

TO 

o 

o 

o 

o 

< 

CO 

CD 



O 

O 

LU 

2 

h- 

CO 

CM 

1 — 


I- 

Q 


< 

Z 

O 




r\ 

CM 

o 

o 

o 

o 

LJ 

< 


o 

a> 

o 

in 

o 

o 

8 

O 


CO 

CD 

CM 

to 

o 

03 

T3 

T— 

CO 


CM 


< 






LU 





>- 


o 

o 

o 

O 

Q 

|— 

o 

o 

to 

o 



o 

o 

CM 

to 

o 


CO 

o 

O 

CM 

DC 

C/5 

CM 

CD 


CM 

o 







C/D < 
C/D GC 
O h- 
cc cc 

o o 


O 

o 

o 

o 

o 

o 

in 

o 

to 

in 

CD 

CM 


CM 

CM 


DC 

O 

a d 

LU 


< 

(- 

O 


LU 

o5 

O CD 

z z 

o o 


C/D 

LU 

iff 

SS 

< LU 
I- Q- 

LU 6 


8 

CO 

CM 

CM 


O 
LU 
O 

LU 
Q. 

£ 

w O LU 
So Q 
I) 


C/D Z 


2 

C/D 


LU O 
C/D Z 


o' 

CM 


< 

z 


vO 

o' 

CM 

CO 


vO 

O' 

CO 

CO 


sP 

CO 

CO 


o 

LU 

C/D 

ID 

LU 

CC 

N$ 



LO 


CcJ 

Q 


CHART 



Ada IMPACTS ON LIFE CYCLE EFFORT DISTRIBUTION 


* 

I — 

CC 

O 

LL 

LI- 

LLI 


CO ^ 

y ■§ 

CC LLl 

< 5 

D 

CO 

< 

Q 


CO 

LU 

O 

CD 

< 

Q 

< 

O 

CD 


S ° 
fc 00 

O CD 

h- 


h- 

a 

cc 

CO 


03 

*U 

< 

LU 

1 

H 

a 

z 

CM 


03 

T3 

< 


Q LU 


1 

h- 

I- 

CO 


co < 

CO cc 
O I- 
cc oc 
0 o 

UL 


CO 


CO 


CO 


CO 


co 


co 

co 


o 

CM 


CO 


CM 

CO 


CM 


CM 


o 

CM 


CM 


CM 


co 

CM 


h- 

CM 


o 


in 

CM 


z 




o 




CO 




111 

z 



Q 

LU 

o 

CO 

UJ 

Q 

h~ 

CO 

CE 

LU 

O 

LU 

a. 

Q 

O 

1- 


* 

¥ 

o 

co 

co 


¥ 

¥ 

o 

CO 

CO 

o 


¥ 

¥ 

o 

CO 

CM 

CM 


O 

CO 

CO 

ymm 

CM 


O 

in 

CM 


oc 

O 




CO 

LU 

f- 

Q 

2 

LU 



+ 

¥ 


< 

u 


F. McGarry 
NASA/GSFC 
25 of 33 


CM 

n 



Ada COST/PRODUCTIVITY 

(TOTAL LINES) DEVELOPED LINES (NEW + 20% OLD) 





F. McGarry 
NASA/GSFC 
26 of 33 


• Ada TRENDS ARE IN POSITIVE DIRECTION 
(GROSS/GRODY/GOADA/GOESIM/FDAS) 









03 

T3 

< 

X3 

i— 

CO 



u 

< 

CL 

O 

CC 

LU 

Z 

UJ 

(3 



F. McGarry P 
NASA/GSFC £ 
27 of 33 o 


WITH EXPERIENCE 

• NOT ALL FEATURE APPROPRIATE FOR APPLICATION 






Ada AND ERROR/CHANGE RATE 




co ti- 

iri co 


F. McGarry 
NASA/GSFC 
28 of 33 




SLOC = TOTAL LINES (INCLUDES COMMENTS/REUSED) 




ERROR CHARACTERISTICS 




HI 

co 

3 

LL 

O 


OC 

3 

< 


I 

I- 


CO 

cc 

^ ° 

DC 

co <r 

LU LLi 

o 


< 

X 

o 


LLI 

o 

< 

li- 

ce 


yUJ 

rr z 


u_ 

O 
cc 

Q_ 

CC 

o 

cc 
oc 

LLi 

cc ca 
u ~o 
< < 


H 

3 

O 

CO 

CL 

I 

LU 

X 


(X 

< 

PH 

u 


F. MeGarry P 
NASA/GSFC £ 
29 of 33 3 






F. McGarry 
NASA/GSFC 
30 of 33 


£ 

_l 



CQ 

UJ 

1 — 

< 

CO 

CO 


3 

O 

UJ 

LU 

O 

OC 

OC 

T - 

c\i 

CO 


o o 


co 


CM 

CO 

UJ 

2 


UJ P 


2 
UJ 

2 

UJ 

E 

CO 

• • 


CO 

i£ 

3 

O 

UJ 

a 


OC ^ 

LLj O O 

0 h- J— 
5 CO CM 

5 - 

• CM 


2 

< 

or 


co 

t- 
2 
CO UJ 

ii 

- 1 o 
<° 
O O 


UJ 

o 

2 

LLJ 

OC 

UJ 

CL 

X 

U1 

3 

X 

I- 


2 

o 

I- 

3 

3 

o 

> 

UJ 

t— 

< 

2 


5 

LU 

oc 

co 


UJ 

_i 

CQ 

o 

cc 

Q_ 

O 


uj y= 


CL 

2 

UJ 

> 

LU 

Q 

Q 

UJ 

> 

o 

oc 

CL 


u_ 

O 

LU 

CL 

CO 


LU 

< 

OC 

CL 

O 

OC 

CL 

CL 

< 


Q CO 

UJ UJ 


OC 
3 

S 

LL 

_ UJ 

oEi 

oc uj O 

CL CO CO 


UJ 

N 

CO 


UJ 

CC 

3 

!< 

LU 

LL 

(0 

*o 

< 

LL 

O 

UJ 

CO 

3 


to 


CHART 11 



CO 

Ul 

IT 


< 

LLI 

LL 

< 

Q 

< 

LL 

o 

LU 

CO 


CO 














UJ 



CM 

o 

o 

to 

1 — 
CO 
ac 

> 

nO 

O' 

h- 

in 

CM 

t — 


T "~- 

< 


CO 





3 







* 







CO 



T— 

o 

1— 

o 

< 

z 

£ 


p 


T~- 

Q 


CD 

T~ 

T“* 



U_ 













CO 

> 


CD 


o 

N- 

LU 

s? 

CD 




O 


CO 

oJ 




CD 


lo 

C\i 





< 







a 



h- 

in 

CO 


< 

> 


CO 

p 


CM 

o 

vO 

0 s 

CM 




CD 


CM 






CM 





>- 







Q 


v o 

CO 

in 

00 

in 

O 

-p' 


CO 

CO 


T“ 

QC 

* — 

h- 

T— 




CD 


in 






T™ 





EMS* 


o 

CD 

in 

o 

'f- 

z 


CO 

CO 

o 

T~ 





— i 

UJ 

CO 

CD 

< 

UJ 

CD 

2 

a 

3 

< 

O 

CL 

< 

o 

CL 

1 

CC 

1 

< 

LU 

1 — 

z 

o 

LU 

h~ 

i£ 



1 Q 

LLI 

CC 

3 

o 


cn 

LU 

CL 


o 

8 

if) 






“1 

z 


o 

CO 

1- 

H* 

CL 

UJ 

O 

z 

Z> 

X 


l_ 

1 


a 


(D 




CL 


z 




UJ 


CL 




— 1 
CQ 

5 

CO 

o 

t 

O 

CO 

LU 

CD 

CD 

if 


DC 

z 

z 

Q_ -J 

Q. 

1 

LU 

o 


X 

LU Q 


Z 

DC 

o 

CO 


o 

LU 

1 — 

< 

< 

X < 

o 

CD 

CO 

CL 

1 — 

UJ I 


LU 

z ^ 

uj O 

cc b 

LU < 

X □ o 
LU Q_ 2 
^ CL ^ 

£ < 


>:S2 

LL 


CO 

< 


CQ 

< 

O 

LU 

DC 

CL 


O < 
2 
< 

X 


< 

LU 


CD 

CD 


o 

LU 
Q- iLJ 

CO > 
DC 


CL O O 

< LL LU 

CO LU 
LU ' 


LL 

LU 


< 

CC 
CL 

O 

O CC 

CO £ 

LU < 

CC ^ - 
3 CO Q 
LU LU 
DC 
3 

!< 

LU 
LL 


< 

Q 

< 

LL 

O 

LU 


CO 

CO 

< 

z 

< 


DC 

< 

LU 


< 

H 


w-* W 

CO O 
3 — 


CO 

z 

o 

CO 

CO 

LU 


F. McGarry ? 
NASA/GSFC - 
31 of 33 


<\ i 

C. 


MUCH DIFFERENT APPLICATION THAN OTHERS 



ERROR CHARACTERISTICS 


(0 

T3 

< 


LU 

IE 

F- 




co 

<J) 


CO 

in 


Q 

DC 

CO 


CO 

“O 

< 


LU 


m 

co 


CD 

cn 


CM 

eg 


O 

Z 

CM 



o> 

in 

CM 


CO 

CD 



CD Tf 

in ^ 

CM 


CO 

CO 

o 

cc 

o 



CO 


CO 

CD 


CO 


CO 

CO 


CM 


F. MeGarry 
NASA/GSFC 
32 of 33 


CO 

CC 

O 

cc 

cc 

LU 

z 

CD 

CO 

LU 

Q 

xO 


c 

+ >< 

LU 

— Q 

u_g 

o> 

•“ CO 

CO LU 

< > 

LU CC 

LU 

> 


-o 

o- 


co 

DC 

o 

DC 

DC 

LU 

LU 

O 

< 

U_ 

DC 

UJ 


LU 

3 

Q 

CO 

CC 

O 

cc 

DC 


LU 

O 

z 

< 

X 

o 

CO 

ID 

o 

> 


LU LU 




o 

oj 

Q 


CHART 13 




Ada COST/PRODUCTIVITY 

PRODUCTIVITY 
(LINES PER STAFF-DAY) 

GROSS 

(FORTRAN) GRODY GOADA GOESIM 


C/5 I f0 00 CD 05 O 



CO 

F. McGarry P 
NASA/GSFC - 
33 of 33 


CHART 14 




