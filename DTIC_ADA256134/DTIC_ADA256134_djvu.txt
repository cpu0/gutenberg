

AD-A256 134 




NAVAL POSTGRADUATE SCHOOL 
Monterey, California 



DT!C 

ELECTE 

0CT19i392 

A 




THESIS 


Extended Surface Heat Sinks for 
Electronic Components: 

A Computer Optimization 

by 

John Reynold Censure 
June 1992 

Thesis Advisor: Allan D. Kraus 


Approved for public release; distribution is unlimited. 


> V 



^ J/4S C; 


,,,£ 2 - 27334 " 








la RfPORT SK.URITV Cl aSSinf AT lOtV) 

UNCLASSIF^"^ 


Ja SECUR.TY C. ASSlHCAT'OI\i AUTHORITY 


2d OECLASSIHCATIOrvJ UOWNGRADIMG SCHEDULE 


4 PERFORMiMu CiRCiANi2A1 ION REE'ORT NUMBE R(S) 


REPORT DOCUMENTATION PAGE 


lb RESTRICTIVE MARKINGS 


form Apf)rovr^d 
OMbNo 0704 0188 


i DISTRIBUTION-'AVAILABHilY Cjf R;i'T,R- 

Approved for public release; 
distribution is unlimited. 


S MONITORING ORGANIZATION HFEC^f'I r., r/ic R'S, 


6a NAME OF PERFORMING ORGANIZATION 

Naval Postgraduate School 


6c ADORES' vC/fy, Sfafe, and/IPCode) 

Monterey, CA 93943-5000 


6b OFFICE SYMBOL 
(If applicable) 

Code 32 


7a NAME OF MONITORING ORGAN ZA' Orj 

Naval Postqraduate School 


7b AODRESS(Ofy, State. and/IPCode) 

Monterey, CA 93943-5000 


8a NAME OF FUNDING I SPONSORING 
ORGANIZATION 


8b OFFICE SYMBOL 9 PROCUREMENT INSTRUMENT IDENTIFICATION NUMBER 
(If applicable) 


8c ADDRESS (Cify, State, and ^IP Code) 


10 SOURCE Of FUNDING NUMBERS 


PROGRAM 

PROJECT 

TASK 

ELEMENT NO 

NO 

NO 


WORK UNIT 
ACCESSION NO 


11 TITLE (Include Security Classification) 

EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS; A COMPUTER OPTIMIZATION 


12 personal AUTHOR(S) 
Censure, John Revnol 


16 supplementary NOTATION ylews Bxpressed in this thesis are those of the author and do 
1 not reflect the official policy or position of the Dept, of Defenss or che U.S. Govt. 


13b time covered 
FROM_ TO 


14 DATE OF REPORT (Year, Month Day) 

June 1992 


18 Subject terms {Continue on reverse d necessary and identify by block number) 

Extended Surfaces, Fins, Heat Sinks 


COSATI CODES 


FIELD GROUP SUBGROUP 


19 ABSTRACT {Continue on reverse if necessary and identify by blocic number) 

Heat sinks consisting of individual fins and arrays of fins are used extensively 
throughout the Navy and industry. The fins serve to increase the surface area through 
which heat is transferred to the surrounding environment by natural convection. Extended 
surfaces or fins are commonly found on electronic components ranging from power supplies 
to transformers. The dissipation and subsequent rejection of potentially destructive 
self produced heat is an important aspect of electronic equipment design. 

Fin design theory is examined starting with the optimization of individual fin 
dimensions. The insights obtained are utilized in an investigation of the optimal 
number and spacing of elements in an array of fins. The results are implemented in a 
computer program written in ADA and compiled for use on IBM compatible machines. The 
program takes as inputs thermal and physical data and outputs an optimized fin 
configuration. Menu driven, the program serves to greatly simplify and accelerate the 


,’0 D'Stribijtion availabii 11 y of abstract 


21 ABSTRACT SECURITY CLASSIFICATION 


: UNCI ASSIFiED UNLIMITED □ SAME AS RPT □ DTIC USERS I I 


DD Form 1473, JUN 86 



22c OFFICE symbol 


■•RTirsI 


Previous editions are obsolete 

S/N 0102-LF-014-6601 


_SEC].lRI_TY c L ASSIFIC A nCIN ill THIS PAL:F_ 

UNCLASSIFIED 






































Approved for public release; distribution is unlimited. 


Author: 


Approved by: 


Extended Surface Heat Sinks for 
Electronic Components: 

A Computer Optimization 

by 

John Reynold Censure 
Lieutenant, United States Navy 
B.S., United States Naval Academy, 1986 


0 




Submitted in partial fulfillment of the 
requirements for the degree of 

MASTER OF SCIENCE IN ELECTRICAL ENGINEERING 

from the 

NAVAL POSTGRADUATE SCHOOL 
June 1992 




( Matthew Dennis Kelleher, Second Reader 




Michael A. Morgan’l^Chairman 
Department of Electrical and Computer Engineering 


111 









ABSTRACT 


Heat sinks consisting of individual fins and arrays of fins are used 
extensively throughout the Navy and industry. The fins serve to increase the 
surface area thorough which heat is transferred to the surrounding 
environment by natural convection. Extended surfaces or fins are commonly 
found on electronic components ranging from power supplies to transformers. 
The dissipation and subsequent rejection of potentially destructive self 
produced heat is an important aspect of electronic equipment design. 

Fin design theory is examined starting with the optimization of individual 
fin dimensions. The insights obtained are utilized in an investigation of the 
optimal number and spacing of elements in an array of fins. The results are 
implemented in a computer program written in ADA and compiled for use on 
IBM compatible machines. The program takes as inputs thermal and physical 
data and outputs an optimized fin configuration. Menu driven, the program is 
easily employed without any amplifying documentation. The program serves 
to greatly simplify and accelerate the fin design process and should be an 
invaluable tool to electronic component designers, especially those with a 
limited backgiound in heat transfer and fin optimization theory. 


iv 


o 

I, 

1 } 

I 


Accesion Fo- 


NTIS CRA&l 
DTIC i AB 



Unani:oiji;cecf 

Justificafion 


By 


_ 

Diit ibution / 

Availabiliiy Cou j.; 

Oist 

Avaii 

Sa; 

1 

1 

/)'/ 


1 

1 

1 








TABLE OF CONTENTS 


I. INTRODUCTION. 1 

II. SINGLE FIN HEAT TRANSFER THEORY. 4 

A. INTRODUCTION.4 

B. ARBITRARILY SHAPED FINS. 4 

1. Temperature Profile Differential Equation. 4 

2. Temperature Distribution Equation. 7 

3. Fin Tip Temperature Equation. 9 

4. Heat Dissipation Equation. 10 

5. Fin Efficiency.10 

C SPECIFIC FIN CONFIGURATIONS. 12 

1. Cylindrical Spine. 12 

2. Logitudinal Fin of Rectangular Profile. 13 

III. SINGLE FIN OPTIMIZATION THEORY. 15 

A. INTRODUCTION.15 

B. CYLINDRICAL SPINE.15 

1, Maximum Heat Transfer for a Given Volume. 15 

2, Minimum Volume for a Given Heat Transfer. 17 

C. RECTANGULAR FIN. 18 

1. Maximum Heat Transfer for a Given Volume and Length... 18 

2. Minimum Volume for a Given Heat Transfer and Length... 20 

IV. MULTIPLE FIN HEAT TRANSFER THEORY...22 

A. INTRODUCTION.22 


V 




























B. ARRAY OF RECTANGULAR FINS. 22 

1. Heat Dissipation Equation. 22 

V. MULTIPLE FIN OPTIMIZATION THEORY. 26 

A. ARRAY OF RECTANGULAR FINS. 26 

1. Maximum Heat Transfer for a Given Wall Area.26 

2. Maximum Heat Transfer from Each Fin.28 

VI. COMPUTER PROGRAM DEMONSTRATION. 29 

A. INTRODUCTION.29 

B. SINGLE NON-STAGGERED FIN ARRAY. 29 

C. TWO STAGGERED FIN ARRAYS. 34 

1. Same Spacing and Number of Fins. 36 

2. Optimization of Spacing and Number of Fins. 38 

VIL CONCLUSION.40 

APPENDIX SOURCE CODE FOR THE COMPUTER PROGRAM. 41 

LIST OF REFERENCES. 110 

INITIAL DISTRIBUTION LIST. Ill 


Vi 























1. INTRODUCTION 


Convection is the transfer of energy from a heat source to a cooler 
surrounding fluid due to the motion of the fluid. The rate of heat transfer by 
convection, , is governed by Newton’s Law of Cooling which is 

q,=hA^(T-TJ (1-1) 

where h is the coefficient of heat transfer in convection, is the surface area, 
T is the fin temperature at position x, and 7^ is the ambient temperature. One 
method of increasing q^ is to increase h by going from natural to forced 
convection. Natural convection is a phenomenon in which the fluid motion is 
induced by differences in buoyancy and density between parcels of fluid at the 
confining surface and within the bulk of the fluid. Forced convection occurs 
when the fluid motion is induced or forced by a fan, pump, or blower. Because 
the addition of a fan or pump may increase operating costs, backgrotmd noise, 
and component size, forced convection is often undesirable. An alternative 
method of increasing q^ is to increase by adding extended surfaces or fins. 

[Ref. l:pp. 114-119] 

In the design of electronic components, the disadvantages of forced 
convection often lead to the use of natural convection and fins to dissipate 
potentially destructive component produced heat. Fin design and optimization 
in a natural convective environment is the subject of this work. 

Fin design theory may be examined by beginning with the single fin 
problem. The temperature profile differential equation can be developed for 
arbitrarily shaped fins and subsequently applied to fins of constant cross- 


1 





sectional area. The temperature distribution, fin tip temperature, heat 
dissipation, and fin efficiency equations are all derived here and the equations 
are then applied to the cylindrical spine and rectangular fin, which are two 
commonly employed fin designs. 

Single fin optimization theory is explored for the cylindrical spine and 
rectangular fin. Two separate situations are examined. First, for a given 
volume or quantity of material, the fin dimensions can be optimized to 
maximize the heat transfer rate. Second, for a given heat transfer rate, the fin 
dimensions can be provided which will minimize the volume of material 
required. 

Multiple fin heat transfer and optimization theories can also be developed 
for an array of symmetric isothermal rectangular fins. Here too, the equation 
for the heat dissipation can be derived. This leads to an optimization where 
the number and spacing of fins can be provided to give the maximum heat 
transfer rate from a wall of given dimensions. In addition, the number and 
spacing of fins can be optimized to maximize the heat transfer rate from each 
fin on a wall of given dimensions. 

The single and multiple fin heat transfer and optimization equations are 
implemented in a computer program written in ADA and compiled for use on 
IBM compatible machines. The emphasis of the program is on ease of use. The 
program is menu driven and does not require any amplifying documentation. 
Knowledge of heat transfer theory is not required. When faced with a fin 
optimization problem, an electronic component designer is no longer forced to 
choose between conducting laborious heat transfer calculations or resorting to 
trial and error. 


2 







The computer program is illustrated by means of an actual fin array 
design problem. The increase in heat transfer rate resulting from a staggering 
of fin arrays, without any increase in materials or wall placement area, is also 
demonstrated. 


3 







II. SINGLE FIN HEAT TRANSFER THEORY 


A. INTRODUCTION 

In order to make the mathematical analysis of extended surfaces 
tractable, Murray (Ref. 2:p. A78] and Gardner [Ref. 3:p. 621] proposed several 
limiting assumptions. These are: 

(1) The heat flow and temperature distribution throughout the fin are 
independent of time i.e., the heat flow is steady. 

(2) The fin material is homogeneous and isotropic. 

(3) There are no heat sources in the fin itself. 

(4) The heat flow to or from the fin surface at any point is directly 
proportional to the temperature difference between the surface at 
that point and the surrounding fluid. 

(5) The thermal conductivity of the fin is constant. 

(6) The heat transfer coefficient is the same over all the fin surface. 

(7) The temperature of the surrounding fluid is uniform. 

(8) The temperature of the base of the fin is uniform. 

(9) The thickness is so small compared to its height that temperature 
gradients normal to the surface may be neglected. 

(10) The heat transferred through the outermost edge of the fin is 
negligible compared to that passing through the sides. 

These assumptions serve to narrow the scope of the extended surface problem 

and are applicable in the analysis that follows. [Ref. 3:p. 324] 


B. ARBITRARILY SHAPED FINS 

1. Temperature Profile Differential Equation 

Figure 2-1 is an example of an arbitrarily shaped fin of height b, 
differential surface area dA^, and varying cross-sectional area A(x). The Fourier 

and Newton Laws are used to derive the differential equation for the 


4 







temperature profile of the fin shown in Figure 2-1. As fins are generally thin, b 
is assumed to be much greater than r. Although the fin temperature varies 
with r and a, the radial variation is small and assumed to be negligible. (Ref. 
l:pp. 117-118] 



In Figure 2-1, Heat enters the control volume by conduction at a rate 
of q(x) and exits at a rate of q{x + dx). Heat is dissipated by convection through 
dA, at a rate of dq^. [Ref. l:p. 118] ‘ 

Ignoring radiation and assuming no internal heat generation, the 
heat balance energy equation for the control volume can be written as 

qix) = q{x + dx) + dq^ ( 2 -i) 


Substituting for q(x+dx) 


q{x) = ( q{x) + dx] + dq^ 


( 2 - 2 ) 







and simplifying yields 


dx 


(2-3) 


Fourier's Law can be expressed as 

q{x) = -kA{x)^ (2-4) 

dx 

where k is the thermal conductivity of the fin material and dTjdx is the 
temperature gradient. Differentiating Equation 2-4 with respect to x gives 


dq{x) . d ( 
dx dx 


At 

A(x)— 

dx , 


(2-5) 


Newton's Law of Cooling can be written as 

dq^ ^hdA,{T-T.) 

Substituting Equations 2-5 and 2-6 into Equation 2-3 gives 


«i(AM^y = hdA.{T-T.) 


Then, differentiating and dividing both sides by kdx provides 

dA{x) dT . . d^T ^hdA^rrj. j, ^ 
dx dx dx^ k dx 

so that a simplification then gives 


( 2 - 6 ) 


(2-7) 


( 2 - 8 ) 


d^T 1 dA{x) dT h dA, 
dx^ A(x) dx dx kA{x) dx 


{T-Tj = 0 


(2-9) 


Equation 2-9 is the temperature profile differential equation for an arbitrarily 
shaped fin of varying cross-sectional area. [Ref, l:pp. 118-119] 


6 







2. Temperature Distribution Equation 

A general solution to Equation 2-9, is found for a fin with constant 
cross-sectional area, A Uniform cross-sectional area means that A(x) = A {a 
constant) and permits the simplification 


dAjx) 

dx 


( 2 - 10 ) 


and with this in Equation 2-9, the result is 

d^T h dA. 


cbc kA dx 


{T-Tj = 0 


If the surface area is expressed in terms of the perimeter, P 

dA^ = Pdx 

a substitution into Equation 2 11 yields 


and if a change of variables 


is made, then 


dx^ kA^ 


esT-r. 


T = e+T^ 

dx dx 


and 


d^T ^ d^Q 
dx^ dx^ 

Use of these permits Equation 2-13 to be written as 

dx kA 

and if the parameter, m, is introduced 


( 2 - 11 ) 

( 2 - 12 ) 

(2-13) 

(2-14) 

(2-15) 

(2-16) 

(2-17) 

(2-18) 


7 





m = 


(2-19) 


\kA 

then Equation 2-18 can be written as 

44-m^e = 0 (2-20) 

dx^ 

The general solution to Equation 2-20 is 

e = Cl cosh(mx)Cj smh(7nx) (2-21) 

where the arbitrary constants, Cj and C 2 , are evaluated from the boundary 

conditions 

• At position x = 0,T=T^ and Q^=T^- 

. , dT ^ , dQ ^ 

• At position x = t, —— = 0 and — = 0 

dx dx 

where is the wall temperature. The second boundary condition is based on 
the earlier assumption that b is much greater than r so that the surface area at 
the fin tip is very small and that the heat dissipated at the tip is negligible. The 
heat convected away from the surface area at the tip of the fin is considered 
negligible. Applying the first boundary condition to Equation 2-21 yields 

9,, =C,l-i-C2 0 (2-22) 

so that 

C, =e„ (2-23) 

Then, a differentiation of Equation 2-21 gives 

— = Q^msinhimx) + C 2 mcosh(mx) (2-24) 

so that employment of the second boundary condition provides 

0 = Q^rnsmh{mb) + C 2 rncosh{inb) (2-25) 

and hence 


8 






^ smh(mb) 

^ cosh{mb) 

After substitution for C, and C 2 , Equation 2-21 becomes 

e cosh(mb) cosh(mA:) - smh(mf7) siiih(mx) 


(2-26) 


(2 -27) 


6^ cosh(mfo) 

Using a hyperbolic function identity in Equation 2-27 allows the representation 


_ 0 ^ 


cosh 

mb 




1 b)} 


cosh{mb) 


(2-28) 


and returning to Q^ = T^- 


T=T^ + 


(T,-rJcosh 


mb 

( x^l 
1-? 


1 


cosh{mb) 


(2-29) 


Equation 2-29 gives the temperature profile for a fin of constant cross-sectional 
area. The temperature at any position x along the fin can be calculated using 
Equation 2-29. [Ref. l:pp. 120-123] 

3. Fin Tip Temperature Equation 

Often, a value of interest is the temperature at the tip of the fin, 7^^. 

Substituting x = b into Equation 2-29 gives 

Equation 2-30 is the equation for the fin tip temperature for a fin of constant 
cross-sectional area. [Ref. l:pp. 145-146] 


9 






4. Heat Dissipation Equation 


The heat dissipation equation for a fin of constant cross-sectional 
area is derived using Fourier's Law and Equation 2-27. From Fourier’s Law, 


q = -kA 


dx 


x=0 


= -fc4^l 
dx 


x=0 


Differentiation of Equation 2-27 yields 


(2-31) 


ijQ Q„ mcosh(mi>)sinh(mx)-msinh(mZ7)cosh(mx)] 
dx cosh{mb) 

and this may be put into Equation 2-31 to obtain 


kAQ^ [m cosh{mb) sinh(mx) - m smh.{mb) cosh(7rix)] 


cosh(mb) 


(2-33) 


x=0 


A simplification then yields 


kAQ^[msmh{inb)j 
^ coshimb) 


and substituting for 0,^ gives 


q = kAm{T^ - ) tanh(mfc>) 


(2-34) 


(2-35) 


Equation 2-35 is the heat dissipation equation for a fin of constant cross- 
sectional area, [Ref. l:p. 123] 

5. Fin Efficiency 

A common parameter employed in the design of finned surfaces is 
the fin efficiency, "n. The definition of ti is the actual heat dissipated by the fin 

divided by that which would be dissipated if the fin operated throughout at the 
wall temperature. If Equation 2-35, which gives the actual dissipation, is 


10 









divided by Newton's Law of Cooling, which gives the ideal dissipation, the 
result is 


kAm{T^ - T^)Xanh{mb) 

Hence 


and 


tl = 


kAm tanh(mi>) 


_ kArit^ tanh(mb) 

^ mhA^ 

and with ni^ = hPjkA by Equation 2-19 


Thus 


kAhP tanh(mh) 
kAmhA, 


Ptai\h{mb) 


(2-3G) 


(2-37) 


(2-38) 


(2-39) 


(2-40) 


But = Pb, and this simplification gives the final expression for the fin of 
constant cross-section. 

tanhfmi?) 

n- ^ (2-41) 

Equation 2-41 provides the efficiency of a fin with constant cross-sectional 
area. (Ref. l:p. 125] 


11 




C. SPECIFIC FIN CONFIGURATIONS 


1. Cylindrical Spine 

As shown in Figure 2-2, a cylindrical spine is essentially a bar of 
height b and diameter d attached to the surface to be cooled. As the fin has a 
constant cross-sectional area, the equations derived in the previous section 
apply to the cylindrical spine. [Ref. l:p. 120] 



For the cylindrical spine, the perimeter and area are written as 

P = nd (2-42) 

and 


Hence, Equation 2-19 becomes 



(2-43) 


12 






2. Longitudinal Fin of Rectangular Profile 

A commonly encountered fin configuration is that of the 
longitudinal fin of rectangular profile. Figure 2-3 is an example of a 
rectangular fin of height b, length L, and width 5. The equations derived for 
fins of constant cross-sectional area are applicable to the rectangular fin 
configuration. [Ref. l:p. 120] 



For the longitudinal fin of rectangular profile, the perimeter and area 







P = 2B + 2L 


(2-45) 




(2-48) 


14 




III. SINGLE FIN OPTIMIZATION THEORY 


A. INTRODUCTION 

Single fin optimization theory can be divided into two categories. In the 
first category the fin shape is known. Two commonly employed fin shapes, the 
cylindrical spine and the rectangular fin, may be examined from two different 
perspectives. Either the dimensions of the fin are optimized to yield the 
maximum heat transfer rate from a given volume or, for a given heat transfer 
rate, the fin dimensions are optimized to minimize the required volume of 
material. The second category is based on the determination of an optimal fin 
shape. Fin shapes are found which minimize the volume of material required 
to obtain a given heat transfer rate. Curved fins are commonly produced in the 
shape optimization problem. As curved fins are difficult and expensive to 
manufacture, the shape optimization problem will not be addressed. [Ref. 5:p. 
155] 

B. CYLINDRICAL SPINE 

1. Maxiinum Heat Transfer for a Given Volume 

Substituting Equations 2-43 and 2-44 into Equation 2-35 yields 

If 



15 








kKdHT„-Tjl 
d= - —- Ptanh(p) 


(3-3) 


and for a cylinder of volume V 


and 




or 

d = 

Substituting Equation 3-5 into Equation 3-3 yields 



(3-4) 


(3-5) 


(3-6) 


<? = (3-7) 

iDV 

Then, taking the derivative with respect to d, simplifying, and setting it equal 

to zero leads to the following transcendental equation. 

10p = 3sinh(2p) (3-8) 

with a solution which can be determined by trial and error 

p = 0.9193 (3-9) 

Substitution of this value of P into Equation 3-2 produces 

0.9193 = bJ^ 

Mkd 


(3-10) 






Expressing b by Equation 3-5 gives 


0 9193 = — 


Hence, the optimized value for the diameter, d, is 

hV 




=1.5031 




and substitution of Equation 3-6 into Equation 3-10 yields 


(3-11) 


(3-12) 


0.9193 = b 


4h 




V2 


nb ) 


Thus, the optimized value for the height, b, is 


= 0.5636 




(3-13) 


(3-14) 


Equations 3-12 and 3-14 specify the optimal dimensions of a cylindrical spine 
to achieve the maximum heat transfer rate for a given volume. [Ref. 5:p. 158) 

2. Minimum Volume for a Given Heat Transfer 
Solve Equation 3-10 for b 


b = 0.9193,^ 
V 4h 


(3-15) 


and then substitute Equations 3-15 and 3-9 into Equation 3-3 to obtain 




4 ( 0 . 9193)^11 


0.9193 tanh(0.9193) 


(3-16) 


17 








Hence 


=0.9165 


\l/3 


hHT,-Tj 


The solution of the transcendental, Equation 3-10, is for d 


d = 


4hb^ 


k(0.9193)' 

and substituting Equations 3-18 and 3-9 into Equation 3-3 yields 




16h^b^ht{T„-Tj 

4 ^)^ 2 ( 0 . 9193 )“ 


0.9193 tanli(0.9193) 


Thus 


0.4400 


qk 


sl/3 


Ww-t:) 


(3-17) 


(3-18) 


(3-19) 


(3-20) 


Equations 3-17 and 3-20 specify the optimal dimensions of a cylindrical spine 
to achieve the minimum volume for a given heat transfer rate. [Ref. 5:p. 158] 


C. RECTANGULAR FIN 

1. Maximum Heat Transfer for a Given Volume and Length 
Substituting Equations 2-46 and 2-48 into Equation 2-35 gives 


q = ISLM(T^-T.)tanbl 


IkS 




(3-21) 


For a rectangular fin 


V = 5Lb 


(3-22) 


18 



or 


b = 


and 


6 = 


V_ 

5L 


V_ 

bL 


(3-23) 


(3-24) 


Substituting Equation 3-23 into Equation 3-21 yields 


<} = kSLj^(T^-T.)tanbl 

and, once more, making a change of variables 


[7 = ^^ 


V 2h 
6L\kb 


(3-25) 


(3-26) 


gives 


4 = m^(r,-r.)taiih(u) 


(3-27) 


Taking the derivative with respect to 5, simplifying, and setting the result equal 

to zero, yields the transcendental equation 

617 = siiih(2l7) (3-28) 

A trial and error solution gives 

17 = L4192 (3-29) 

and substituting this result into Equation 3-26 gives 

V f2h 


This shows that the optimized value for the width, 5, is 


(3-30) 


19 




= 0.9977 


V^h 

Ilk 


-,1/3 


Substituting Equation 3-24 into Equation 3-30 yields 


(3-31) 


V 

1.4192 = -5- 
L 


2h 


k\^ 

[bL. 


(3-32) 


and 


=1.0023 


Vk 

Lh 


-,1/3 


(3-33) 


Equations 3-31 and 3-33 specify the optimal dimensions of a rectangular fin to 
achieve the maximum heat transfer rate for a given volume and length. [Ref. 
5:p. 156] 

2. Minimum Volume for a Given Heat Transfer and Length 
Substituting Equation 3-29 into Equation 3-27 gives 


q = lc5iJ^(r, -r.)tanh(1.4192) 


and from this the optimum 5 is obtained 


^opt ~ 


0.6321 


r 


hk 






Then, substituting Equation 3-24 into Equation 3-35 yields 

(1 


V ^ 0.6321 
bL hk 


L{T„-TJ 


(3-34) 


(3-35) 


(3-36) 


and solving Equation 3-33 for Vprovides 


20 






y - 

~ {L0023)'k 


(3-37) 


Then, substituting this result into Equation 3-36 produces 


b^Lh 

il.0023f kbL 


0.6321 r q 
hk 


and the optimum value of the fin height, b is 


(3-38) 



= 0.7978 


Q 

LhiT^-Tj 


(3-39) 


Equations 3-3.') and 3-39 specify the optimal dimensions of a rectangular fin to 
achieve the minimum volume for a given heat transfer rate and length. [Ref, 
5:p. 156] 


21 





IV. MULTIPLE FIN HEAT TRANSFER THEORY 


A. INTRODUCTION 

In their 1984 landmark paper, Bar-Cohen and Rohsenow described the 
heat transfer and optimization equations for an array of rectangular fins. 
However, they did not provide a design procedure with which to use their data 
to formulate optimum arrays. [Ref. 6:pp. 116-123] 


B. ARRAY OF RECTANGULAR FINS 
1. Heat Dissipation Equation 

In Figure 4-1, adjacent fins form a channel. The channel Rayleigh 
number, Ra' is defined as 


Ra's 


-Tj 

pLk, 


where 

• p = density of the surrounding fluid, kg/m^ 

• g = gravitational acceleration, m/s^ 

• (3 = volumetric coefficient of thermal expansion, 1/°K 

• Cp = specific heat of the surrounding fluid, J/kg^C 


• z = clear spacing, m 

• = wall temperature, “C 

• = ambient temperature, "C 

• p = dynamic viscosity of the surrounding fluid, kg/m»s 


(4-1) 


22 











(4-2) 


(4-3) 


23 








where 


T = 


T +r 

*w 


The dynamic viscosity is 


9c 

where v is the kinematic viscosity of the surrounding fluid and 


5c =32.2 


Ibm ft 
Ibfs^^ 


or, in SI units 


, ^ kg • m 


If the fins are assumed to be symmetric and isothermal 


576 2.873 

NMo= 7— 7T + -r^ (4.8) 

(Ra'f 

where NUq is the channel Nusselt number. Thus, the heat transfer coefficient 


is for n fins attached to the wall 


ft 


(4-9) 


For a rectangular fin, the parameter m is given by Equation 2-48. The fin 
efficiency, t], is given by Equation 2-41. The surface area of the wall that is 


open for heat transfer, A„, is 

K = (KK)-(nl£) 

and the combined heat transfer area for all fins, is 

= n{2bL) 


(4-10) 


(4-11) 


24 




(4-12) 


Hence, the total area available for heat transfer, is 

Aolal = Av + ) 

and according to Newton’s Law of Cooling 

^ = (4-13) 

Equation 4-13 is the heat dissipation equation for an array of symmetric, 
isothermal rectangular fins. {Ref. 6:pp. 116-119] 


25 





V. MULTIPLE FIN OPTIMIZATION THEORY 


A. ARRAY OF RECTANGULAR FINS 

1. Maximum Heat Transfer for a Given Wall Area 

in an array of symmetric, isothermal rectangular fins, the heat 
transfer rate of each fin decreases as fin spacing decreases. Yet, a reduction in 
fin spacing allows for a greater number of fins to be placed on a wall of given 
dimensions. An optimal fin spacing exists which maximizes the heat transfer 

rate for a given wall area. [Ref, 6:p. 120] 

As the wall will be fully populated with fins to maximize q, Ap^ is 

assumed to be much greater than A^. Replacing A,^, in Equation 4-13 with 

q = hAp^{T^-Tj (5-1) 

and substitution of this into Equations 4-9 and 4-11 gives 

q = N{2bL){T^ - Tj (5-2) 

To fully populate the wall with fins 


N = 


''w 

(z + 5) 


(5-3) 


The value obtained for N from Equation 5-3 must be truncated to produce an 
integral number of fins. Substitution of Equations 4-8 and 5-3 into Equation 5- 
2 gives 


26 








576 

(Mf 


2.873 


j-V2 

^ k,6j2bL){T^-Tj 


z(2 + 5) 


and then making a change of variables. 


Ra' P^9^Cp{T„-Tj 
z'‘ pLkf 


(5-4) 


(5-5) 


one obtains 


9 = 


576 

P^z* 


2.873 

^7p? 


-1-V2 


kfbj2bL){T^-Tj 


z(z 5) 


(5-6) 


or 


9 

2kf8MT^-Tj 


z(z + 5) 


576 

P^z« 


2.873' 


V2 


(5-7) 


Taking the derivative dq/dz, simplifying, and then setting the result equal to 
zero gives 

2z-»-35 - 0.005P^z" = 0 (5-8) 

If the width is assumed to be negligible. 


z = 

^opt 


2.714 

pV* 


(5-9) 


Equation 5-9 gives the optimal fin spacing to maximize the heat transfer rate 
for a wall of given dimensions. [Ref. 6:p. 120] 


27 






2. Maximum Heat Transfer from Each Fin 

It is often desired to maximize the heat transfer rate from each fin 
in an array of symmetric, isothermal rectangular fins. Although an infinite fin 
spacing is theoretically required, setting Nu^ equal to 9996 of the isolated fin 

value leads to 

_ 4.64 

^max ~ pi/4 (5-10) 

Equation 5-10 gives the optimal fin spacing to maximize the heat transfer rate 
from each fin on a wall of given dimensions. Substituting the of Equation 

5-3 provides the value for the maximum number of fins. (Ref. 6:p. 120] 

The value of is approximately double that of the boundary layer 
thicknesses along each of the surfaces at the channel exit. The value z^^ 

coincides with approximately 1.2 boundary layer thicknesses. (Ref. 6:p. 120] 


28 



VI. COMPUTER PROGRAM DEMONSTRATION 


A. INTRODUCTION 

To provide a demonstration of the computer program, a fin array design 
example involving a wall of given dimensions populated by two different 
arrangements of rectangular fins, is analyzed and the results are compared. 


B. SINGLE NON-STAGGERED FIN ARRAY 

In the first arrangement, the wall is populated by a single, non-staggered 
fin array. The dimensions of the array are shown in Figure 6-1. The computer 
program will optimize fin spacing to maximize the array's heat transfer rate. 


2S cm 



Figure 6-1. Single Non-Staggered Fin Array 


29 









The program is initiated by the typing the following command at the DOS 
prompt. 

C:\>finopt J 

After the introduction and continuation screens, Figure 6-2 is presented. 



Figure 6-2. Unit System Menu 


As the dimensions in Figure 6-1 are in centimeters, the enter key (J) is pressed 
to select the SI unit system. Figure 6-3 is shown on the screen. 



Figure 6-3. Fin Optimization Menu 












3* ft «Q 3 


Enter is pressed to select the multiple fin problem. The drawing in Figure 6-4 is 
then shown on the screen. 


Wall Width 


w 

a 

1 

1 

L 


l\ \ l\ \ l\ \ I 

1 \ \ I \ \ 1 \ \ WALL 1 

I \ \ I \ \ I \ \ I 

I \ \ I \ \ I \ \ I 

I \ \ \ \ \ \ 1 

I \ _\ \ _\ \ _\ _l_ 

I F II II I I I I 

I I II II I I I I 

\ N II II I I I I 

\ II 11 I I I I Length 

I \ ll\ ll\ II II 

l_\_\ I I_\ I I_\ I I_I I 

l\\ll \ll \ll I 

\ \l_l \l_I \l_I _l_ 

Height \ 

\ I I-1 I —I 

I Spacing Width 



Figure 6-4. Multiple Fin Drawing 


Figure 6-4 graphically shows the nomenclature for the parameters that will be 
requested by the program so that the optimization and heat transfer 
calculations can be instituted. After pressing any key, the menu in Figure 6-5 is 
displayed. Enter is pressed to choose the third selection listed in the menu. 


31 



















Figure 6-5. Type of Optimization Menu 
Figure 6-6 illustrates the format used for the input of the parameters needed 
by the optimization and heat transfer equations. 




Required Inputs 


AU values must be inputted as 
floats. Examples: 5.0 or 2.0E-3 
Do not input OJB as .8 !!! 


- 1 ^.— .,, 1 — 


Length of the fin placement area s 2.0000E-I-01 cm 

Width of the fin placement area (cm) = 

Press enter to accept default or any other key to enter new value 
New value = 25.0 

Figure 6-6. Request for Inputs 

Once the user has supplied the required inputs, the input-output summary 
screens in Figure 6-7 are presented. 


32 












Inputs => Outputs 



Length of the fin placement area = 

Width of the fin placement area = 

Length of each fin = 

Height of each fin = 

Width of each fin = 

Density of surrounding fluid = 

Specific heat of surrounding fluid 
Thermal conductivity of material, k 
Thermal conductivity of surrounding fluid, k = 
Kinematic viscosity of surrounding fluid = 

Ambient Temperature = 

WaU Temperature = 


2.0000E+01 cm 
2.5000E+01 cm 
2.0000E+01 cm 
5.0000E+00 cm 
2.0000E-01 cm 
1.1770E+00 kg/mA3 
1.005 7E+03 J/(kg*deg-K) 
2.1000E+02 W/(m*deg-K) 
2.6240E-02 W/(m*deg-K) 
1.5680E-05 mA2/s 
2.5000E+01 deg-C 
7.5000E+01 deg-C 



I Outputs 


Heat transferred away by the fins, q 
Spacing between fins 
Number of fins 
The fin efficiency 

The temperature at the tip of the fins 
Channel Rayleigh number 
Channel Nusselt number 


» 1.3816E-h02 W 
= 7.0603E-01 cm 
= 2.7000E-I-01 fins 
= 9.8116E-01 
= 7.3589E-H01 deg-C 
* 5.4255E-»-01 
= 1.3066EH-00 



Figure 6-7. Input-Output S umm ary 


The user can print the summary information in Figure 6-7 by performing a DOS 
screen dump, simultaneously pressing the Shift and Print Screen keys. The 
information can be imported into a word processor for editing by running the 
program under Microsoft Windows and using its clipboard screen capture 


33 









functions (Ref. 7;pp. 248-250). Pressing any key will produce the drawing in 
Figure 6-8. 


2.5000E+01 cm 

I- 


2 

1 1 

1 1 

l\ 

\ 

l\ \ l\ \ 


1 

1 

0 

1 1 

1 \ 

\ 

1 \ \ 1 \ \ 

WALL 

1 

0 

1 1 

1 

\ \ 

1 \ \ 1 \ 

\ 

1 

0 

1 1 

1 

\ \ 

1 \ \ 1 

\ \ 

1 

0 

1 1 

1 

\ 

\ \ \ 

\ \ 

1 

E 

1 1 

1 


\ \ \ \ 

\ \ 

1 

+ 

1 1 

1 

F 

II II 

1 1 

1 1 

c 

1 I 

1 

I 

II II 

1 1 

1 1 

1 

1 1 

\ 

N 

II II 

1 1 

1 1 


1 1 

\ 


II II 

1 1 

12.OE+Olcm 

c 

1 1 

1 

\ 

! 1 \ 1 1 \ 

1 1 

1 1 

m 


1 \ 

\ 

1 1 \ 11 

\ 1 1 

1 1 



1 

\ \ 

II \ 1 1 

\ 1 1 

1 




\ 

\ 1 1 Ml 

\l 1 

1 


5.0000E-H00 

cm \ 







\ 

1 1-. 

1 —1 






1 7.0603E-01 cm 

2.0000E-01 

cm 



Figure 6-8. Input-Output Summary Drawing 


The drawing in Figure 6-8 graphically displays the outputs of the optimization 
calculations. 


C. TWO STAGGERED FIN ARRAYS 

In the second arrangement, the wall is populated by two staggered fin 
arrays. The dimensions of the arrays are shown in Figure 6-9. Each array will 


34 


















be dealt with separately. The heat transfer rate for a single array will be 
calculated and doubled to find the total heat transfer rate for the wall of given 
dimensions. 



Figure 6-9. Two Staggered Fin Arrays 















1. Same Spacing and Number of Fins 

First, the staggered fin problem is examined using the spacing and 
number of fins found in the previous non-staggered fin example. Pressing any 
key after viewing the drawing in Figure 6-8 results in the continuation menu in 
Figure 6-10. 



Figure 6-10. Continuation Menu 


Pressing Enter will allow the user to continue in the program. All the defaults 
are set to the values inputted by the user in the preceding problem to facilitate 
rapid sensitivity analysis. After proceeding through the screens in Figures 6-2, 
6-3, and 6-4, the first item, "No Optimization," is chosen from the menu in 
Figure 6-5. This option will allow the user to input the fin spacing and number 
of fins rather than conducting an optimization of those values. The 
parameters required by the heat transfer equations are inputted in the format 
demonstrated in Figure 6-6. Once the user has supplied the required inputs, 
the input-output summary screens in Figure 6-11 are presented. 


36 













Inputs => Outputs 



Length of the fin placement area 
Width of the fin placement area 
Length of each fin 

Height of each fin = 

Width of each fin 

Spacing between fins = 

Number of fins 

Density of surro unding fluid 

Specific heat of surroimding fluid 

Thermal conductivity of material, k = 

Thermal conductivity of surrounding fluid, k = 

Kinematic viscosity of surro unding fluid 

Ambient Temperature 

Wall Temperature = 


l.OOOOE+01 cm 
2.5000E+01 cm 
l.OOOOE+01 cm 
5.0000E+00 cm 
2.0000E-01 cm 
7.0603E-01 cm 
2.7000E+01 fins 
1.1770E+00 kg/mA3 
1.0057E+03 J/(kg*deg-K) 
2.1000E+02 W/(m*deg-K) 
2.6240E-02 W/(m*deg-K) 
1.5680E-05 mA2/s 
2.5000E+01 deg-C 
7.5000E+01 deg-C 



Heat transferred away by the fins, q 
The fin efficiency 

The temperature at the tip of the fins 
Channel Rayleigh number 
Channel Nusselt number 


= 9.2229E-t^01 W 
= 9.7490E-01 
= 7.3120E-I-01 deg-C 
= 1.085 lE-i-02 
= 1.7549E-H00 



Figure 6-11. Input-Output Summary 


The value for the single array heat transfer rate, q, is doubled to obtain for 
the given wall area. 


37 








= 2(92.229) = 184.46 W 


(6-1) 


The improvement is 


184.46-138.16 

138.16 


33.5% 


( 6 - 2 ) 


and one may conclude that staggering the arrays produces a 33.5% increase in 
the heat transfer rate, without any change in the number of fins, spacing, or 
materials required. Unfortunately the machining required to produce staggered 
fin arrays may be expensive. 

2. Optiinizatioii of Spacing and Number of Fins 

The increase in the heat transfer rate shown in Equation 6-2 can be 
further enhanced by optimizing the number of fins and spacing in the 
individual fin arrays. Again the third item is chosen from the menu in Figure 
6-5. The input-output summary screens produced are shown in Figure 6-12. 
The value obtained for q is again doubled to obtain for the given wall 

dimensions. 

q,g^, = 2(92.944) = 185.89 W (6-3) 


and 


185.89-138.16 

138.16 


= 34.5% 


(6-4) 


and, in addition 


185.89-184.46 

184.46 


0.775% 


(6-5) 


The percentage increase found in Equation 6-5 is small, since the non-staggered 
array of fins had already been previously optimized. 


38 







l.OOOOE+01 cm 
2.5000E+01 cm 
l.OOOOE+01 cm 
5.0000E+00 cm 
2.0000E-01 cm 
1.1770E+00 kg/mA3 
1.0057E+03 J/(kg*deg-K) 
2.1000E+02 W/(m*deg-K) 
2.6240E-02 W/(m*deg-K) 
1.5680E-0S mA2/s 
2.5000E+01 deg-C 
7.5000E+01 deg-C 


Length of the fin placement area 
Width of the hn placement area 
Length of each tin 
Height of each fin 

Width of each fin = 

Density of surrounding fluid 
Specific heat of surro unding fluid 
Thermal conductivity of material, k 
Thermal conductivity of surro unding fluid, k = 
Kinematic viscosity of surro unding fluid = 

Ambient Temperature 
Wall Temperature 



Heat transferred away by the fins, q 
Spacing between fins 
Number of fins 
The fin efficiency 

The temperature at the tip of the fins 
Channel Rayleigh number 
Channel Nusselt number 


= 9.2944E-t-01 W 
= 5.9370E-01 cm 
= 3.1000E+01 fins 
= 9.7770E-01 
= 7.3329E-H01 deg-C 
= 5.4255E-H01 
= 1.3066E-^00 



Figure 6-12. Input-Output Summary 


39 






VII. CONCLUSION 


In the design of electronic equipment, a proper heat sink configuration is 
essential. As the design example in the previous section demonstrates, the 
computer program developed for this thesis can serve to greatly simplify and 
accelerate the fin design process. The program should prove to be valuable tool 
to electronic component designers, especially those with a limited background 
in heat transfer and fin optimization theory. A listing of the source code for 
the computer program is included in the Appendix. 


40 







APPENDIX 


SOURCE CODE FOR THE COMPUTER PROGRAM 


— Title : EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS: 

: A COMPUTER OPTIMIZATION 

— Author : John Reynold Censure 

— Date : June 1992 

with TEXT_IO, COMMON_DISPLAY_TYPES, TTY, CURSOR, VIDEO, 

FINOPT_SINGLE, FINOPT_MULTIPLE, FINOPT_PICTURES, 

FINOPT_DRAWINGS; 

use TEXT_IO, COMMON_DISPLAY_TYPES, FINOPT_SINGLE, FINOPT_MULTIPLE; 

procedure FINOPT is 

PAUSE, CONTINUE, UNITS, FIN_SING_MULT, FIN_CYL_RECT, 

FIN_OPT_TYP, DEFAULT_KEY : 

INTEGER; 

SPACING_ENGLISH, DENSITY_ENGLISH, SPECIFIC_HEAT_ENGLISH, 

NU_ENGLISH, K_FLUID_ENGLISH, WALL_LENGTH_ENGLISH, 

WALL_WIDTH_ENGLISH, DIAMETER_ENGLISH, HEIGHT_ENGLISH, 

WIDTH_ENGLISH, LENGTH_ENGLISH, V0LUME_ENGL1SH, H_ENGLISH, 

K_ENGLISH, T_AMBIENT_ENGLISH, T_WALL_ENGLISH, Q_ENGLISH, 

SPACING_SI, DENSITY_SI, SPECIFIC_HEAT_SI, NU_SI, 

K_FLUID_SI, WALL_LENGTH_SI, WALL_WIDTH_SI, DIAMETER_SI, 

HEIGHT_SI, WIDTH_SI, LENGTH_SI, VOLUME_SI, H_SI, K_SI, 

T_AMBIENT_SI, T_WALL_SI, Q_SI, SPACING, DENSITY, 

SPECIFIC_HEAT, NU, K_FLUID, WALL_LENGTH, WALL_WIDTH, 

DIAMETER, HEIGHT, WIDTH, LENGTH, VOLUME, H, K, T_AMBIENT, 

T_WALL, Q, CONVERT_DIST, CONVERT_TEMP, GRAVITY, G_C, 

AREA_PROFILE, NUM_FINS, NUM_FINS_ENGLISH, NUM_FINS_SI : FLOAT; 

PI : constant ;= 3.14159_26535_89793_23846_26433_83279_50288_41972; 

SPACING_UNITS, WALL_LENGTH_UNITS, 

WALL_WIDTH_UNITS, DIAMETER_UNITS, HEIGHT_UNITS, 

WIDTH_UNITS, LENGTH_UNITS ; 

STRING (1..2); 

VOLUME_UNITS, NUM_FINS_UNITS 
STRINGd. .4) ; 

T_UNITS : 

STRINGd . .5) ; 

NU_UNITS, Q_UNITS : 

STRINGd. .6) ; 


41 






DENSITY_UNITS : 

STRINGd. .8) ; 

NUMBER_OUT : 

STRINGd. .10) ; 

WIDTH_MSG, LENGTH_MSG, ri;^METER_MSG, 

HEIGHT_MSG, SPACING_MSG, WALL_LENGTH_MSG, 

WALL_WIDTH_MSG : 

STRINGd. .13) ; 

SPECIFIC_HEAT_UNITS : 

STRINGd. . 15) ; 

K_UNITS : 

STRINGd. . 17) ; 

H_UNITS 
STRINGd. .19) ; 

INPUT_MSG ; 

STRINGd. .33) ; 

CHAR ; CHARACTER; 


paclcage FLOAT_INOUT is new FLOAT_IO(FLOAT) ; 
use FLOAT INOUT; 


begin 



— 

Introduction Page 

— 

VIDEO. 

FINOPT 

SET COLOR PALETTE (BLUE); 

_PICTURES.THESIS_MSG; 


— 

Output Program Name 

— 

FINOPT 

_PICTURES.FINOPT_MSG; 


— 

Initialize Variables English System 

— 


SPACING_ENGLISH := 0.5; 

— Spacing (in) 

DENSITY_ENGLISH ;= 0.05928; 

— Density of surrounding fluid (lbm/ft''3) 

SPECIFIC_HEAT_ENGLISH := 0.2404; 

— Specific heat of surrounding fluid (BTU/(lbin*deg-R) ) 
NU_ENGLISH ;= 19.1774E-5; 

— Kinematic viscosity of surrounding fluid (ft^2/s) 
K_FLUID_ENGLISH := 0.01608; 

— Thermal conductivity of surrounding fluid (BTU/(hr*ft*deg-R)) 
WALL_LENGTH_ENGLISH := 6.0; 

-- Length of multi-fin placement area (in) 


42 















WALL_WIDTH_ENGLISH := 9.0; 

-- Width of multi-fin placement area (in) 

DIAMETER_ENGLISH := 0.3125; 

-- Diameter (in) 

HEIGHT_ENGLISH := 4.5; 

-- Height (in) 

WIDTH_ENGLISH := 0.0625; 

-- Width (in) 

LENGTH_ENGLISH := 2.25; 

-- Length (in) 

VOLUME_ENGLTSH := 0.3451; 

-- Volume {in''3) 

H_ENGLISH := 1.0; 

-- Convection heat transfer coefficient (BTU/(hr*ft''2*deg-R) ) 
K_ENGLISH := 24.8; 

— Thermal conductivity (BTU/(hr*ft*deg-R)) 

T_AMBIENT_ENGLISH := 70.0; 

— Ambient Temperature (deg-F) 

T_WALL_ENGLISH ;= 200.0; 

-- Wall temperature (deg-F) 

Q_ENGLISH := 3.13; 

-- Heat transferred (BTU/hr) 


Initialize Variables SI System 


SPACING_SI ;= 1.04; 

— Spacing (cm) 

DENSITY_SI := 1.177; 

— Density~of surrounding fluid (kg/m^3) 

SPECIFIC_HEAT_SI := 1005.7; 

— Specific heat of surrounding fluid (J/()cg*deg-K) ) 

NU_SI := 1.568E-5; 

— Kinematic viscosity of surrounding fluid (m''2/s) 
K_FLUID_SI ;= 0.02624; 

-- Thermal conductivity of surrounding fluid (W/(m*deg-K)) 
WALL_LENGTH_SI := 9.0; 

— Length of multi-fin placement area (in) 

WALL_WIDTH_SI := 22.14; 

— Width of multi-fin placement area (in) 

DIAMETER_SI := 0.7; 

— Diameter (cm) 

HEIGHT_SI := 4.7; 

— Height (cm) 

WIDTH_SI := 0.18; 

— Width (cm) 

LENGTH_SI := 9.0; 

— Length (cm) 

VOLUME_SI ;= 16.3516; 

— Volume (cm''3) 

H_SI ;= 7.0; 

— Convection heat transfer coefficient (W/(m"2*deg-K)) 
K_SI := 236.0; 

— Thermal conductivity (W/(m*deg-K)) 

T_AMBIENT_SI := 20.0; 

— Ambient temperature (deg-C) 


43 







T_WALL_SI := 60.0; 

— Wall temperature (deg-C) 
Q_SI := 5.902; 

-- Heat transferred (W) 


Continue? 


loop 

TTY.CLEAR SCREEN; 


TTY.PUT 

( 6, 

21, 

If 






If 

9 

YELLOW, 

CYAN) 

! 








TTY.PUT 

( 7, 

21, 

II 






II 

9 

YELLOW, 

CYAN) 

$ 








TTY.PUT 

( 8, 

21, 

11 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

{ 8, 

55, 

II 

•I 

9 

YELLOW, 

CYAN) 




TTY.PUT 

( 9, 

21, 

II 

If 

9 

YELLOW, 

CYAN) 




TTY.PUT 

( 9, 

55, 

If 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(10, 

21, 

II 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(10, 

55, 

If 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(11, 

21, 

II 

n 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(11, 

55, 

II 

If 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(12, 

21, 

II 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(12, 

55, 

II 

If 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(13, 

21, 

It 

If 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(13, 

55, 

11 

•I 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(14, 

21, 

tl 

11 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(14, 

55, 

If 

II 

9 

YELLOW, 

CYAN) 




TTY . PUT 

(15, 

21, 

II 

If 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(15, 

55, 

If 

ft 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(16, 

21, 

ft 

tl 

9 

YELLOW, 

CYAN) 




TTY . PUT 

(16, 

55, 

tl 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(17, 

21, 

•1 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(17, 

55, 

ft 

II 

9 

YELLOW, 

CYAN) 




TTY.PUT 

(18, 

21, 

It 






II 

9 

YELLOW, 

CYAN) 

9 








TTY.PUT 

(19, 

21, 

II 






II 

9 

YELLOW, 

CYAN) 

9 








TTY.PUT 

( 8, 

24, 

If 





If 

t 

YELLOW, RED) ; 

TTY.PUT 

( 9, 

24, 

11 

Do 

you wish to continue ? 

II 

/ 

BRIGHT_WHITE, 

RED) ; 










TTY.PUT 

(10, 

24, 

If 





•1 

9 

YELLOW, RED) ; 

TTY.PUT 

(11, 

24, 

II 


1) Exit to 

DOS 

II 

9 

YELLOW, RED); 

TTY.PUT 

(12, 

24, 

II 





II 

9 

YELLOW, RED); 

TTY.PUT 

(13, 

24, 

11 


2) Continue 

II 

9 

YELLOW, RED) ; 

TTY.PUT 

(14, 

24, 

ft 





II 

9 

YELLOW, RED); 

TTY . PUT 

(15, 

24, 

11 

Input your 

selection: [2] 

II 

9 

YELLOW, RED) ; 

TTY.PUT 

(16, 

24, 

11 

Press enter 

to accept default 

II 

9 

BRIGHT_WHITE, 

TTY.PUT 

(17, 

24, 

II 





•1 

9 

YELLOW, RED) ; 


CURSOR.SET_SIZE(13,13); 
loop 

CURSOR.MOVE (15, 50); 

TTY.GET (CONTINUE, CHAR); 

if CONTINUE = 2 or CONTINUE = 3 or CONTINUE =28 then 
exit; 


44 









else 

TTY.PUT (21, 24, " Improper input, please reenter ", 
BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


Do Not Continue 


exit when CONTINUE = 2; 


Continue With Program 


Select Unit System 


TTY.CLEAR SCREEN; 


TTY.PUT 

( 6, 

21, 

tf 





II 

9 


YELLOW, 

CYAN) 









TTY.PUT 

( 7, 

21, 

tt 





It 

9 


YELLOW, 

CYAN) 

t 








TTY.PUT 

( 8, 

21, 

f« 

", YELLOW, 

CYAN) 





TTY.PUT 

( 8, 

55, 

H 

", YELLOW, 

CYAN) 





TTY.PUT 

( 9, 

21, 

n 

", YELLOW, 

CYAN) 





TTY.PUT 

( 9, 

55, 

•I 

", YELLOW, 

CYAN) 





TTY.PUT 

(10, 

21, 

i« 

", YELLOW, 

CYAN) 





TTY.PUT 

(10, 

55, 

i« 

", YELLOW, 

CYAN) 





TTY.PUT 

(11, 

21, 

f< 

", YELLOW, 

CYAN) 





TTY.PUT 

(11, 

55, 

II 

", YELLOW, 

CYAN) 





TTY.PUT 

(12, 

21, 

II 

", YELLOW, 

CYAN) 





TTY.PUT 

(12, 

55, 

II 

", YELLOW, 

CYAN) 





TTY.PUT 

(13, 

21, 

n 

", YELLOW, 

CYAN) 





TTY.PUT 

(13, 

55, 

II 

", YELLOW, 

CYAN) 





TTY.PUT 

(14, 

21, 

•1 

", YELLOW, 

CYAN) 





TTY.PUT 

(14, 

55, 

It 

", YELLOW, 

CYAN) 





TTY.PUT 

(15, 

21, 

II 

", YELLOW, 

CYAN) 





TTY . PUT 

(15, 

55, 

f» 

", YELLOW, 

CYAN) 





TTY . PUT 

(16, 

21, 

n 

", YELLOW, 

CYAN) 





TTY.PUT 

(16, 

55, 

II 

", YELLOW, 

CYAN) 





TTY . PUT 

(17, 

21, 

fi 

", YELLOW, 

CYAN) 





TTY . PUT 

(17, 

55, 

II 

", YELLOW, 

CYAN) 





TTY.PUT 

(18, 

21, 

•1 





II 

9 


YELLOW, 

CYAN) 

f 








TTY . PUT 

(19, 

21, 

II 





It 

9 


YELLOW, 

CYAN) 

f 








TTY.PUT 

( 8, 

24, 

II 




It 

t 

YELLOW, 

RED) 

TTY . PUT 

( 9, 

24, 

II 

Select Desired Unit System 

II 

f 



BRIGHT WHITE, 

RED) ; 







TTY . PUT 

(10, 

24, 

•1 




fl 

f 

YELLOW, 

RED) 

TTY . PUT 

(11, 

24, 

II 

1) English Engineering 

n 

f 

YELLOW, 

RED) 

TTY.PUT 

(12, 

24, 

It 




tt 

/ 

YELLOW, 

RED) 

TTY.PUT 

(13, 

24, 

It 

2) SI 



tt 

YELLOW, 

RED) 

TTY.PUT 

(14, 

24, 

It 




It 

t 

YELLOW, 

RED) 


45 















TTY.PUT (15, 24, ” Input your selection: [2] ", YELLOW, RED); 
TTY.PUT (16, 24, " Press enter to accept default ", BRIGHT_WHITE, 

RED) ; 

TTY.PUT (17, 24, " ", YELLOW, RED); 

CURSOR.SET_SIZE(13, 13); 

loop 

CURSOR.MOVE (15, 50); 

TTY.GET (UNITS, CHAR); 

if UNITS = 2 or UNITS = 3 or UNITS = 28 then 
exit; 
else 

TTY.PUT (21, 24, " Improper input, please reenter ", 

BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


Use English Engineering System 


if (UNITS = 2) then 

CONVERT_DIST := 12.0; 

Convert inches to feet 
CONVERT_TEMP := 460.0; 

Convert deg-F to deg-R 
GRAVITY := 32.2; 

Acceleration of gravity (ft/s''2) 

G_C := 32.2; 

Conversion factor (lbm*ft/(lbf*s''2) ) 
SPACING := SPACING_ENGLISH; 

SPACING_UNITS ;= "in"; 

DENSITY ;= DENSITY_ENGLISH; 

DENSITY_UNITS := "lbm/ft^3"; 

SPECIFIC_HEAT := SPECIFIC_HEAT_ENGLISH; 
SPECIFIC_HEAT_UNITS := "BTU/(Ibm*deg-R)"; 
NU := NU_ENGLISH; 

NU_UNITS := "ft''2/s"; 

WALL_LENGTH := WALL_LENGTH_ENGLISH; 
WALL_LENGTH_UNITS := "in"; 

WALL_WIDTH := WALL_WIDTH_ENGLISH; 
WALL_WIDTH_UNITS := "in"; 

NUM_FINS_UNITS := "fins"; 

DIAMETER := DIAMETER_ENGLISH; 
DIAMETER_UNITS := "in"; 

HEIGHT := HEIGHT_ENGLISH; 

HEIGHT_UNITS := "in"; 

WIDTH := WIDTH_ENGLISH; 

WIDTH_UNITS := "in"; 

LENGTH := LENGTH_ENGLISH; 

LENGTH_UNITS := "in"; 

VOLUME := VOLUME_ENGLISH; 

VOLUME_UNITS := "in''3"; 

H := H_ENGLISH; 

H_UNITS := "BTU/(hr*ft^2*deg-R)"; 

K := K_ENGLISH; 

K FLUID := K FLUID ENGLISH; 


46 







K_UNITS := "BTU/(hr*ft*deg-R) 
T_AMBIENT ;= T_AMBIENT_ENGLISH; 
T_WALL := T_WALL_ENGLISH; 
T_UNITS := "deg-F"; 

Q := Q_ENGLISH; 

Q UNITS := "BTU/hr"; 


Use SI System 


else 

CONVERT_DIST := 100.0; 

Convert centimeters to meters 
CONVERT_TEMP := 273.15; 

Convert deg-C to deg-K 
GRAVITY := 9.81; 

Acceleration of gravity (m/s''2) 

G_C := 1.0; 

Conversion factor (kg*m/ {N*s''2) ) 
SPACING := SPACING_SI; 

SPACING_UNITS := "cm"; 

DENSITY := DENSITY_SI; 

DENSITY_UNITS := "kg/m''3 "; 

SPECIFIC_HEAT := SPECIFIC_HEAT_SI; 
SPEC1FIC_HEAT_UNITS := "J/(kg*deg-.K) 
NU := NU_SI; 

NU_UNITS := "m''2/s "; 

WALL_LENGTH := WALL_LENGTH_SI; 
WALL_LENGTH_UNITS := "cm"; 
WALL_WIDTH := WALL_WIDTH_SI; 
WALL_WIDTH_UNITS := "cm"; 
NUM_FINS_UNITS := "fins"; 

DIAMETER := DIAMETER_SI; 
DIAMETER_UNITS := "cm"; 

HEIGHT := HEIGHT_SI; 

HEIGHT_UNITS := "cm"; 

WIDTH := WIDTH_SI; 

WIDTH_UNITS := "cm"; 

LENGTH := LENGTH_SI; 

LENGTH_UNITS := "cm"; 

VOLUME := VOLUME_SI; 

VOLUME_UNITS := "cm''3"; 

H := H_SI; 

H_UNITS := "W/(m''2*deg-K) "; 

K := K_SI; 

K_FLUID := K_FLUID_SI; 

K_UNITS := "W/(m*deg-K) 

T_AMBIENT := T_AMBIENT_SI; 

T_WALL := T_WALL_SI; 

T_UNITS := "deg-C"; 

Q := Q_SI; 

Q_UNITS := "W "; 

end if; 


Select Single or Multiple Fin Optimization 


47 








TTY.CLEAR SCREEN; 


TTY.PUT 

( 6, 

21, 

It 



II 

9 

YELLOW, 

CYAN 

/ 





TTY.PUT 

( 7, 

2., 

It 



II 

9 

YELLOW, 

CYAN) 

$ 





TTY.PUT 

( 8, 

21, 

It 

11 

t 

YELLOW, CYAN); 


TTY.PUT 

( 8, 

55, 

II 

11 

i 

YELLOW, CYAN); 


TTY.PUT 

( 9, 

21, 

II 

II 

t 

YELLOW, CYAN); 


TTY.PUT 

( 9, 

55, 

II 

II 

/ 

YELLOW, CYAN); 


TTY.PUT 

(10, 

21, 

II 

> 1 

t 

YELLOW, CYAN); 


TTY.PUT 

(10, 

55, 

II 

II 

/ 

YELLOW, CYAN); 


TTY.PUT 

(11, 

21, 

II 

II 

/ 

YELLOW, CYAN); 


TTY.PUT 

(11, 

55, 

II 

It 

9 

YELLOW, CYAN); 


TTY.PUT 

(12, 

21, 

II 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(12, 

55, 

II 

It 

9 

YELLOW, CYAN); 


TTY.PUT 

(13, 

21, 

It 

11 

9 

YELLOW, CYAN); 


TTY.PUT 

(13, 

55, 

II 

II 

9 

YEI IW, CYAN); 


TTY.PUT 

(14, 

21, 

II 

It 

9 

YELLOW, CYAN); 


TTY.PUT 

(14, 

55, 

II 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(15, 

21, 

It 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(15, 

55, 

II 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(16, 

21, 

II 

11 

9 

YELLOW, CYAN); 


TTY PUT 

(16, 

55, 

II 

II 

9 

YELLOW, CYAN); 


TTY. JT 

(17, 

21, 

It 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(17, 

55, 

11 

II 

9 

YELLOW, CYAN); 


TTY.PUT 

(18, 

21, 

II 



II 

/ 

YELLOW, 

CYAN) 






TTY.PUT 

(19, 

21, 

II 



II 

9 

YELLOW, 

CYAN) 

$ 





TTY.PUT 

( 8, 

24, 

II 


It 

f 

YELLOW, RED); 

TTY.PUT 

( 9, 

24, 

If 

Select Fin Optimization ", 


BRIGHT V. 

LITE, 

RED) ; 




TTY.PUT 

(10, 

24, 

It 


II 

9 

YELLOW, RED); 

TTY . PUT 

(11, 

24, 

II 


1) Single Fin ", 

YELLOW, RED) ; 

TTY . PUT 

(12, 

24, 

11 


II 

9 

YELLOW, RED) ; 

TTY.PUT 

(13, 

24, 

II 


2) Multiple Fins ", 

YELLOW, RED) ; 

TTY.PUT 

(14, 

24, 

It 


II 

9 

YELLOW, RED) ; 

TTY.PUT 

(15, 

24, 

II 

Input your selection: ", 

YELLOW, FED) ; 

TTY . PUT 

(16, 

24, 

II 

Press 

enter to accept default ", 

BRIGHT_WHITE, 

TTY . PUT 

(17, 

24, 

II 


It 

9 

YELLOW, RED) ; 


CURSOR.SET_SIZE(13, 13) ; 
loop 

CURSOR.MOVE (15, 50); 

TTY.GET (F1N_SING_MULT. CHAR); 
if FIN_SING_MULT = 2 or FIN_SING_MULT = 3 or 
FIN_SING_MULT =28 then 
exit; 
else 

TTY.PUT (21, 24, ” Improper input, please r;enter ", 
BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


48 










Single Fin Problem, Select Cylindrical or Rectangular Fin Type 


RED) ; 

RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 

RED) ; 


if (FIN SING MULT = 2) then 


TTY.CLEAR SCREEN; 


TTY.PUT 

( 6, 

21, 

It 




YELLOW, 

CYAN) 

/ 





TTY.PUT 

( 7, 

21, 

It 




YELLOW, 

CYAN) 

/ 





TTY.PUT 

( 8, 

21, 

It 

tl 

9 

YELLOW, 

CYAN) 


TTY.PUT 

( 8, 

55, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

( 9, 

21, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

( 9, 

55, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(10, 

21, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(10, 

55, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(11, 

21, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(11, 

55, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(12, 

21, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(12, 

55, 

tt 

tf 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(13, 

21, 

tt 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(13, 

55, 

tl 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(14, 

21, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(14, 

55, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(15, 

21, 

tt 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(15, 

55, 

tl 

tt 

/ 

YELLOW, 

CYAN) 


TTY.PUT 

(16, 

21, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(16, 

55, 

It 

tt 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(17, 

21, 

It 

tl 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(17, 

55, 

It 

It 

9 

YELLOW, 

CYAN) 


TTY.PUT 

(18, 

21, 

It 




YELLOW, 

CYAN) 

/ 





TTY.PUT 

(19, 

21, 

It 




YELLOW, 

CYAN) 

9 





TTY.PUT 

( 8, 

24, 

It 




TTY.PUT 

( 9, 

24, 

It 

Select Desired 

rin Shape 

BRIGHT WHITE, 

RED) ; 




TTY.PUT 

(10, 

24, 

It 




TTY.PUT 

(11, 

24, 

It 


1) Cylindrica. 

. Spine 

TTY.PUT 

(12, 

24, 

It 




TTY.PUT 

(13, 

24, 

If 


2) Rectangulaj 

c fin 

TTY.PUT 

(14, 

24, 

It 




TTY.PUT 

(15, 

24, 

tf 

Input your 

selection: [2] 

TTY.PUT 

(16, 

24, 

It 

Press enter 

to accept default 


BRIGHT_WHITE, RED) ; 

TTY.PUT (17, 24, " 

CURSOR.SET_SIZE(13,13); 
loop 

CURSOR.MOVE (15, 50); 


II 

r 

, YELLOW, 

f 

, YELLOW, 
, YELLOW, 
, YELLOW, 
, YELLOW, 
, YELLOW, 
, YELLOW, 

f 

, YELLOW, 


49 










TTY.GET (FIN_CYL_RECT, CHAR); 
if FIN_CYL_RECT = 2 or FIN_CYL_RECT = 3 or 
FIN_CYL_RECT =28 then 
exit; 
else 

TTY.PUT (21, 24, " Improper input, please reenter ", 
BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


— 

Single Fin Problem, Cylindrical Spine, 

Jraw Cylindrical Spine 

— 

if 

HEIGHT_MSG) 

(FIN CYL RECT = 2) then 
DIAMETER MSG := "Diameter 
HEIGHT MSG := " Height 

FINOPT_DRAWINGS.CYLINDRICAL_ 

i 

•• • 
f 

tt • 

/ 

DRAWING(DIAMETER_MSG, 


-- 

Single Fin Problem, Cylindrical Spine 

— 

— 

Choose Optimization 

— 


TTY.CLEAR SCREEN; 


TTY.PUT 

{ 2, 

21, 

ft 




YELLOW, 

CYAN) 

f 





TTY.PUT 

( 3, 

21, 

ft 




YELLOW, 

CYAN) 

} 





TTY.PUT 

( 4, 

21, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 4, 

55, 

tl 

It 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 5, 

21, 

ft 

H 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 5, 

55, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 6, 

21, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

{ 6, 

55, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

{ 7, 

21, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 7, 

55, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

< 8, 

21, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 8, 

55, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

{ 9, 

21, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

( 9, 

55, 

ff 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(10, 

21, 

fl 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(10, 

55, 

ft 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(11, 

21, 

ft 

It 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(11, 

55, 

ff 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(12, 

21, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(12, 

55, 

ff 

If 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(13, 

21, 

ff 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(13, 

55, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(14, 

21, 

ff 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(14, 

55, 

ft 

If 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(15, 

21, 

ff 

ff 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(15, 

55, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(16, 

21, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY.PUT 

(16, 

55, 

ff 

ff 

9 

YELLOW, 

CYAN) 


50 











RED) ; 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) 

RED) ; 



51 









— 

Single Fin Problem, Cylindrical Spine, No Optimization 

— 


if (FIN OPT TYP = 2) then 

CYLINDRICAL NO OPT(UNITS, CONVERT DIST, DIAMETER, 
DIAMETER UNITS, HEIGHT, HEIGHi UNITS, H, H UNITS, 
K_UNITS, T_AMBIENT, T_WALL, T UNITS, Q, Q_UNITS); 

K, 

— 

Single Fin Problem, Cylindrical Spine, Maximum Heat 
Transfer Capability for a Given Volume 

— 

elsif (FIN OPT TYP = 3) then 

CYLINDRICAL GIVEN VOL(UNITS, CONVERT DIST, VOLUME, 

VOLUME UNITS, DIAMETER, DIAMETER UNITS, HEIGHT, 

HEIGHT UNITS, H, H UNITS, K, K UNITS, T AMBIENT, 

T WALL, T UNITS, Q, Q UNITS); 

— 

Single Fin Problem, Cylindrical Spine, Minimum Volume 
for a Given Heat Transfer Capability 

— 


else 

CYLINDRICAL GIVEN Q(UNITS, CONA/ERT DIST, DIAMETER, 
DIAMETER UNITS, HEIGHT, HEIGHT UNITS, H, H UNITS, 
K_UNITS, T_AMBIENT, T_WALL, T_UNITS, Q, Q_UNITS); 
end if; 

K, 

— 

Single Fin Problem, Cylindrical Spine 

Draw Cylindrical Spine With Calculated Dimensions 

— 

HEIGHT 

PUT (DIAMETER MSG(1..10), DIAMETER, 4, 3); 

DIAMETER MSG(11) ;= ’ ’; 

DIAMETER MSG(12..13) := DIAMETER UNITS; 

PUT (HEIGHT MSG(1..10), HEIGHT, 4, 3); 

HEIGHT MSG(11) := ' ’; 

HEIGHT MSG(12..13) := HEIGHT UNITS; 

FINOPT DRAWINGS.CYLINDRICAL DRAWING(DIAMETER MSG, 

_MSG); 


— 

Single Fin Problem, Rectangular Fin, 

Draw Rectangular Fin 

— 


else 

WIDTH MSG := "Width 

LENGTH MSG ;= "Length 

HEIGHT MSG := " Height 

FINOPT DRAWINGS.RECTANGULAR DRAWING(WIDTH MSG, LENGTH 
HEIGHT_MSG); 

_MSG, 

— 

Single Fin Problem, Rectangular Fin 

Choose Optimization 

— 


52 





















RED) ; 


RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 


TTY.CLEAR SCREEN 

0 







TTY . PUT 

( 2, 

21, 

•« 






It 

0 

YELLOW, 

CYAN) 

# 








TTY.PUT 

( 3, 

21, 

II 






II 

0 

YELLOW, 

CYAN) 

0 








TTY . PUT 

( 4, 

21, 

II 

II 

0 

YELLOW, 

CYAN) 




TTY . PUT 

( 4, 

55, 

II 

II 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 5, 

21, 

II 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 5, 

55, 

It 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 6, 

21, 

It 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 6, 

55, 

II 

tt 

0 

YELLOW, 

CYAN) 




TTY . PUT 

( 7, 

21. 

II 

H 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 7, 

55, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 8, 

21, 

II 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

{ 8, 

55, 

fl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

( 9, 

21, 

•1 

H 

t 

YELLOW, 

CYAN) 




TTY.PUT 

( 9, 

55, 

tl 

It 

/ 

YELLOW, 

CYAN) 




TTY.PUT 

(10, 

21, 

It 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(10, 

55, 

H 

H 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(11, 

21, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(11, 

55, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(12, 

21, 

tl 

It 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(12, 

55, 

It 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(13, 

21, 

fl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(13, 

55, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(14, 

21, 

It 

ft 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(14, 

55, 

tl 

It 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(15, 

21, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(15, 

55, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(16, 

21, 

tl 

It 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(16, 

55, 

It 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(17, 

21, 

ft 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(17, 

55, 

H 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(18, 

21, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(18, 

55, 

tl 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(19, 

21, 

tt 

ft 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(19, 

55, 

If 

tt 

0 

YELLOW, 

CYAN) 




TTY.PUT 

(20, 

21, 

tf 






tt 

0 

YELLOW, 

CYAN) 

0 








TTY.PUT 

(21, 

21, 

It 






tl 

0 

YELLOW, 

CYAN) 

0 








TTY.PUT 

( 4, 

24, 

tt 





tl 

0 

YELLOW 

TTY.PUT 

( 5, 

24, 

ft 

Choose Type 

of Optimization 

tt 

0 


BRIGHT WHITE, 

RED) ; 







TTY.PUT 

( 6, 

24, 

ft 





tt 

0 

YELLOW 

TTY.PUT 

( 7, 

24, 

It 

1) 

No Optimization 

tt 

0 

YELLOW 

TTY.PUT 

( 8, 

24, 

tt 





tl 

0 

YELLOW 

TTY.PUT 

( 9, 

24, 

tl 

2) 

Maximum heat 

transfer 

n 

0 

YELLOW 

TTY.PUT 

(10, 

24, 

tt 


capability for a given 

II 

YELLOW 


53 







RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 

RED) ; 


TTY.PUT 

(11, 

24, 

II 


volume and length 

II 

/ 

YELLOW 

TTY.PUT 

(12, 

24, 

II 



II 

f 

YELLOW 

TTY.PUT 

(13, 

24, 

II 

3) 

Minimum volume for a 

II 

9 

YELLOW 

TTY.PUT 

(14, 

24, 

It 


given heat transfer 

II 

9 

YELLOW 

TTY.PUT 

(15, 

24, 

II 


capability 

II 

9 

YELLOW 

TTY.PUT 

(16, 

24, 

II 



II 

9 

YELLOW 

TTY.PUT 

(17, 

24, 

It 

Input your selection: [3] 

II 

9 

YELLOW 

TTY.PUT 

(18, 

24, 

ft 

Press 

enter to accept default 

II 

9 


BRIGHT WHITE, 

RED) ; 





TTY.PUT 

(19, 

24, 

II 



II 

9 

YELLOW 


CURSOR.SET_SIZE(13,13); 
loop 

CURSOR.MOVE (17, 50); 

TTY.GET (FIN_OPT_TYP, CHAR); 
if FIN_OPT_TYP = 2 or FIN_OPT_TYP = 3 or 
FIN_OPT_TYP = 4 or FINjOPT_TYP =28 then 
exit; 
else 

TTY.PUT (23, 24, " Improper input, please reenter ", 
BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


Single Fin Problem, Rectangular Fin, No Optimization 


if (FIN_OPT_TYP = 2) then 

RECTANGULAR_NO_OPT(UNITS, CONVERT_DIST, LENGTH, 
LENGTH_UNITS, HEIGHT, HEIGHT_UNITS, WIDTH, 
WIDTH_UNITS, H, H_UNITS, K, K_UNITS, T_AMBIENT, 
T WALL, T UNITS, Q, Q UNITS); 


Single Fin Problem, Rectangular Fin, Maximxan Heat 
Transfer Capability for a Given Volume and Length 


elsif (FIN_OPT_TYP = 3) then 

RECTANGULAR_GIVEN_VOL(UNITS, CONVERT_DIST, VOLUME, 
VOLUME_UNITS, LENGTH, LENGTH_UNITS, HEIGHT, HEIGHT_UNITS, 
WIDTH, WIDTH_UNITS, H, H_UNITS, K, K_UNITS, 

T AMBIENT, T WALL, T UNITS, Q, Q UNITS); 


Single Fin Problem, Rectangular Fin, Minimum Volume 
for a Given Heat Transfer Capability 


54 













else 

RECTANGULAR_GIVEN_Q(UNITS, CONVERT_DIST, LENGTH, 
LENGTH_UNITS, HEIGHT, HEIGHT_UNITS, WIDTH, 
WIDTH_UNITS, H, H_UNITS, K, K_UNITS, T_AMBIENT, 
T_WALL, T_UNITS, Q, Q_UNITS); 
end if; 


Single Fin Problem, Rectangular Fin, 

Draw Rectangular Fin With Calculated Dimensions 


PUT {WIDTH_MSG(1..10), WIDTH, 4, 3); 

WIDTH_MSG(11) := ’ 

WIDTH_MSG(12..13) := WIDTH_UNITS; 

PUT {LENGTH_MSG(1..10) , LENGTH, 4, 3); 

LENGTH_MSG{11) := ’ ’; 

LENGTH_MSG(12..13) := LENGTH_UNITS; 

PUT (HEIGHT_MSG(1..10), HEIGHT, 4, 3); 

HEIGHT_MSG(11) := * 

HEIGHT_MSG(12..13) := HEIGHT_UNITS; 

FINOPT_DRAWINGS.RECTANGULAR_DRAWING(WIDTH_MSG, LENGTH_MSG, 
HEIGHT_MSG); 
end if; 


Multiple Fin Problem, Rectangular Fins, Draw Rectangular Fins 


else 

WIDTH_MSG 
LENGTH_MSG 
HEIGHT_MSG 
SPACING_MSG 
WALL LENGTH_MSG 
WALL'wIDTH MSG 


•• Width 

"Length 

" Height"; 

" Spacing 
" Wall Length 
" Wall Width 

FINOPT_DRAWINGS.MULTI_FIN_DRAWING(WIDTH_MSG, LENGTH_MSG, 
HEIGHT MSG, SPACING MSG, WALL LENGTH MSG, WALL WIDTH MSG); 


Multiple Fin Problem, Rectangular Fins, Choose Optimization 


TTY.CLEAR SCREEN; 


TTY . PUT 

{ 

2, 

21, 

fr 




YELLOW, 

CYAN) 

/ 





TTY.PUT 

( 

3, 

21, 

ti 




YELLOW, 

CYAN) 

r 





TTY.PUT 

( 

4, 

21, 

tf 

tt 

f 

YELLOW, 

CYAN) 

TTY.PUT 

( 

4, 

55, 

fi 

tt 

f 

YELLOW, 

CYAN) 

TTY . PUT 

( 

5, 

21, 

t« 

ft 

f 

YELLOW, 

CYAN) 

TTY.PUT 

( 

5, 

55, 

tt 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

6, 

21, 

If 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

6, 

55, 

ft 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

7, 

21, 

ft 

ft 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

7, 

55, 

ft 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

8, 

21, 

tf 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

8, 

55, 

ff 

tt 

9 

YELLOW, 

CYAN) 

TTY . PUT 

( 

9, 

21, 

tf 

tt 

9 

YELLOW, 

CYAN) 


55 















RED) ; 

RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 
RED) ; 


TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
TTY.PUT 
YELLOW, 
TTY.PUT 
YELLOW, 
TTY.PUT 


( 9, 
( 10 , 
( 10 , 
( 11 , 
( 11 , 
( 12 , 
( 12 , 
(13, 
(13, 
(14, 
(14, 
(15, , 
(15, 
(16, 
(16, 
(17, : 
(17, 
(18, , 
(18, 
(19, : 
(19, 
( 20 , : 
CYAN) 
( 21 , : 
CYAN) 

( 4, : 


55, 

It 

II 

t 

YELLOW, 

CYAN) 

’ 



21, 

If 

II 

9 

YELLOW, 

CYAN) 

■ 



55, 

•1 

II 

9 

YELLOW, 

CYAN) 

' 



21, 

II 

II 

9 

YELLOW, 

CYAN) 

■ 



55, 

II 

•1 

9 

YELLOW, 

CYAN) 

' 



21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

It 

II 

9 

YELLOW, 

CYAN) 




21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

II 

II 

9 

YELLOW, 

CYAN) 




21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

II 

11 

9 

YELLOW, 

CYAN) 




21, 

II 

•1 

9 

YELLOW, 

CYAN) 




55, 

It 

M 

/ 

YELLOW, 

CYAN) 




21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

•1 

II 

9 

YELLOW, 

CYAN) 




21, 

II 

11 

9 

YELLOW, 

CYAN) 




55, 

II 

II 

9 

YELLOW, 

CYAN) 




21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

•I 

II 

9 

YELLOW, 

CYAN) 




21, 

II 

II 

9 

YELLOW, 

CYAN) 




55, 

II 

II 

9 

YELLOW, 

CYAN) 




21, 

II 






II 

9 

21, 

II 






■1 

9 

24, 

II 





II 

9 

YELLOW, 

24, 

n 

Choose Type 

of Optimization 

II 

9 


RED) ; 







24, 

ft 





n 

9 

YELLOW, 

CM 

II 

1) 

No Optimization 

n 

9 

YELLOW, 

24, 

fi 





n 

9 

YELLOW, 

24, 

n 

2) 

Maximum heat 

transfer 

n 

9 

YELLOW, 

24, 

II 


capability from each 

II 

9 

YELLOW, 

24, 

n 


fin in 

a given area 

II 

9 

YELLOW, 

24, 

ft 





II 

9 

YELLOW, 

24, 

II 

3) 

Maximum heat 

transfer 

II 

9 

YELLOW. 

24, 

•1 


capability for a given 

II 

9 

YELLOW, 

24, 

II 


area 



•1 

9 

YELLOW, 

CM 

ti 





II 

9 

YELLOW, 


TTY.PUT (11, 24, " fin in a given area ", YELLOW, 

TTY.PUT (12, 24, " ", YELLOW, 

TTY.PUT (13, 24, " 3) Maximum heat transfer ", YELLOW. 

TTY.PUT (14, 24, " capability for a given ", YELLOW, 

TTY.PUT (15, 24, " area ", YELLOW, 

TTY.PUT (16, 24, " ", YELLOW, 

TTY.PUT (17, 24, " Input your selection: [3] ", YELLOW, 

TTY.PUT (18, 24, " Press enter to accept default ", 

BRIGHT WHITE, RED); 


56 





RED) ; 


TTY.PUT (19, 24 


YELLOW 


II 11 

/ f 

CURSOR.SET_SIZE(13,13) ; 
loop 

CURSOR.MOVE (17, 50); 

TTY.GET (FIN_OPT_TYP, CHAR); 
if FIN_OPT_TYP = 2 or FIN_OPT_TYP = 3 or 
FIN_OPT_TYP = 4 or FIN_OPT_TYP =28 then 
exit; 
else 

TTY.PUT (23, 24, ” Improper input, please reenter ", 
BLUE, CYAN); 
end if; 
end loop; 

CURSOR.INHIBIT; 


Multiple Fin Problem, Rectangular Fins, No Optimization 


if (FIN_OPT_TYP = 2) then 

MULTIPLE_NO_OPT(UNITS, CONVERT_DIST, CONVERT_TEMP, G_C, 
GRAVITY, WALL_LENGTH, WALL_LENGTH_UNITS, WALL_WIDTH, 
WALL_WIDTH_UNITS, LENGTH, LENGTH_UNITS, HEIGHT, 
HEIGHT_UNITS, WIDTH, WIDTH_UNITS, SPACING, 
SPACING_UNITS, NUM_FINS, NUM_FINS_UNITS, DENSITY, 
DENSITY_UNITS, SPECIFIC_HEAT, SPECIFIC_HEAT_UNITS, K, 
K_FLUID, K_UNITS, NU, NU UNITS, T_AMBIENT, T_WALL, 

T UNITS, Q, Q UNITS); 


Multiple Fin Problem, Rectangular Fins, Maximvun Heat 
Transfer Capability From Each Fin in a Given area 


elsif (FIN_OPT_TYP = 3) then 

MULTIPLE_MAX_FIN(UNITS, CONVERT_DIST, CONVERT_TEMP, G_C, 
GRAVITY, WALL_LENGTH, WALL_LENGTH_UNITS, WALL_WIDTH, 
WALL_WIDTH_UNITS, LENGTH, LENGTH_UNITS, HEIGHT, 
HEIGHT_UNITS, WIDTH, WIDTH_UNITS, SPACING, 

SPACING_UNITS, NUM_FINS, NUM_FINS_UNITS, DENSITY, 
DENSITY_UNITS, SPECIFIC_HEAT, SPECIFIC_HEAT_UNITS, K, 
K_FLUID, K_UNITS, NU, NU_UNITS, T_AMBIENT, T_WALL, 

T UNITS, Q, Q UNITS); 


Single Fin Problem, Rectangular Fin, Maximum Heat Transfer 
Capability for a Given Area 


else 

MULTIPLE_MAX_Q(UNITS, CONVERT_DIST, CONVERT_TEMP, G_C, 
GRAVITY, WALL_LENGTH, WALL_LENGTH_UNITS, WALL_WIDTH, 
WALL_WIDTH_UNITS, LENGTH, LENGTH_UNITS, HEIGHT, 
HEIGHT_UNITS, WIDTH, WIDTH_UNITS, SPACING, 
SPACING_UNITS, NUM_FINS, NUM_FINS_UNITS, DENSITY, 
DENSITY_UNITS, SPECIFIC_HEU>kT, SPECIFIC_HEAT_UNITS, K, 
K_FLUID, K_UNITS, NU, NU_UNITS, T_AMBIENT, T_WALL, 

T UNITS, Q, Q UNITS); 


57 













end if; 


Multiple Fin Problem, Rectangular Fins, 

Draw Rectangular Fins With Calculated Dimensions 


PUT (WIDTH_MSG{1..10), WIDTH, 4, 3); 

WIDTH_MSG(11) ;= ' 

WIDTH_MSG(12..13) := WIDTH_UNITS; 

PUT (LENGTH_MSG(1..10), LENGTH, 4, 3); 

LENGTH_MSG{11) := ' ' ; 

LENGTH_MSG{12..13) := LENGTH_UNITS; 

PUT (HEIGHT_MSG(1..10), HEIGHT, 4, 3); 

HEIGHT_MSG(11) := ' 

HEIGHT_MSG(12..13) := HEIGHT_UNITS; 

PUT (SPACING_MSG(1..10), SPACING, 4, 3); 

SPACING_MSG{11) ;= ' 

SPACING_MSG{12..13) := SPACING_UNITS; 

PUT (WALL_LENGTH_MSG(1..10), WALL_LENGTH, 4, 3); 
WALL_LENGTH_MSG(11) := * ’ ; 

WALL_LENGTH_MSG(12..13) := WALL_LENGTH_UNITS; 

PUT (WALL_WIDTH_MSG(1..10), WALL_WIDTH, 4, 3); 
WALL_WIDTH_MSG{11) := * ' ; 

WALL_WIDTH_MSG(12..13) := WALL_WIDTH_UNITS; 

FINOPT_DRAWINGS.MULTI_FIN_DRAWING(14IDTH_MSG, LENGTH_MSG, 
HEIGHT_MSG, SPACING_MSG, WALL_LENGTH_MSG, WALL_WIDTH_MSG); 
end if; 


Reinitialize Variables 


if (UNITS = 2) then 

SPACING_ENGLISH := SPACING; 
DENSITY_ENGLISH ;= DENSITY; 
SPECIFIC_HEAT_ENGLISH := SPECIFIC_HEAT; 
NU_ENGLISH := NU; 

K_FLUID_ENGLISH := K_FLUID; 
WALL_LENGTH_ENGLISH ;= WALL_LENGTH; 
WALL_WIDTH_ENGLISH := WALL_WIDTH; 
NUM_FINS_ENGLISH := NUM_FINS; 
DIAMETER_ENGLISH ;= DIAMETER; 
HEIGHT_ENGLISH := HEIGHT; 

WIDTH_ENGLISH := WIDTH; 

LENGTH_ENGLISH ;= LENGTH; 

VOLUME_ENGLISH := VOLUME; 

H_ENGLISH := H; 

K_ENGLISH := K; 

T_AMBIENT_ENGLISH := T_AMBIENT; 
T_WALL_ENGLISH := T_WALL; 

Q_ENGLISH := Q; 
else 

SPACING_SI := SPACING; 

DENSITY_SI := DENSITY; 

SPECIFIC_HEAT_SI := SPECIFIC_HEAT; 

NU_SI := NU; 

K FLUID SI := K FLUID; 


58 










WALL_LENGTH_SI := WALL_LENGTH; 
WALL_WIDTH_SI := WALL_WIDTH; 
NUM_FINS_SI ;= NUM_FINS; 
DIAMETER_SI := DIAMETER; 
HEIGHT_SI ;= HEIGHT; 

WIDTH_SI := WIDTH; 

LENGTH_SI := LENGTH; 

VOLUME_SI := VOLUME; 

H_SI := H; 

K_SI := K; 

T_AMBIENT_SI := T_AMBIENT; 
T_WALL_SI := T_WALL; 

Q_SI := Q; 
end if; 
end loop; 


Exit to DOS 


FINOPT_PICTURES.EXIT_MSG; 

VIDEO.SET_COLOR_PALETTE (BLACK); 
CURSOR.MOVE (22, 1); 

CURSOR.SET_SIZE(13, 13) ; 
end FINOPT; 


59 








— Title 

— Author 
-- Date 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 
A COMPUTER OPTIMIZATION 
John Reynold Censure 
June 1992 


package FINOPT_COMMON is 

procedure GET_INPUT{INPUT_VALUE 

INPUT_MSG 
SIZE_INPUT_MSG 
INPUT VALUE_UNITS 
SIZE_INPUT_VALUE_UNITS 
ROW START 


: in out FLOAT; 
: in STRING; 

: in INTEGER; 

: in STRING; 

: in INTEGER; 

: in INTEGER); 


end FINOPT COMMON; 


60 






— Title 

— Author 

— Date 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 
A COMPUTER OPTIMIZATION 
John Reynold Censure 
June 1992 


with TEXT_IO, COMMON_DISPLAY_TYPES, TTY, CURSOR; 

use TEXT_IO, COMMON_DISPLAY_TYPES; 

package body FIHOPT_COMMON is 

package FLOAT_INOUT is new FLOAT_IO(FLOAT); 
use FLOAT INOUT; 

: in out FLOAT; 

: in STRING; 

: in INTEGER; 

: in STRING; 

: in INTEGER; 

: in INTEGER) is 

: STRINGd. . 10) ; 

: CHARACTER; 

: INTEGER; 


procedure GET_INPUT(INPUT_VALUE 

INPUT_MSG 

SIZE_INPUT_MSG 

INPUT_VALUE_UNITS 

SIZ E_INPUT_VALUE_UNITS 

ROW_START 

NUMBER_OUT 

CHAR 

DEFAULT KEY 


begin 

TTY.PUT (ROW_START, 1, INPUT_MSG, YELLOW, BLACK); 

TTY. PUT (ROW_START, 1+SIZE_INPUT_MSG, ’* (", YELLOW, BLACK); 

TTY.PUT (ROW_START, 3+SIZE_INPUT_MSG, 

INPUT_VALUE_UNITS(1..SIZE_INPUT_VALUE_UNITS), YELLOW, BLACK); 

TTY.PUT (R0W_START, SIZE_INPUT_VALUE_UNITS+3+SIZE_INPUT_MSG, ”) = 

If 

f 

YELLOW, BLACK); 

TTY.PUT (ROW_START+l, 1, 

"Press enter to accept default or any other key to enter new 
value", 

BRIGHT_WHITE, BLACK); 

PUT (NUMBER_OUT, INPUT_VALUE, 4, 3); 

TTY.PUT (ROW_START, SIZE_INPUT_VALUE_UNITS+7+SIZE_INPUT_MSG, 
NUMBER_OUT, YELLOW, BLACK); 

CURSOR.SET_SIZE (13,13); 

TTY.GET (DEFAULT_KEY, CHAR); 

CURSOR.INHIBIT,■ 
if DEFAULT_KEY /= 28 then 
loop 

begin 

TTY.PUT (ROW_START, 

SIZE_INPUT_VALUE_UNITS+7+SIZE_INPUT_MSG, 

" ", BLACK, BLACK); 

TTY.PUT (ROW_START+2, 1, "New value = ", BRIGHT_WHITE, 

BLACK) ; 

CURSOR.SET_SIZE (13,13); 

GET (INPUT_VALUE); 

SKIP LINE; 


61 








CURSOR.INHIBIT; 
exit; 
exception 

when others => 

TTY.PUT (23, 24, " Improper input, please reenter ”, 
BLUE, CYAN); 
end; 

end loop; 

TTY.PUT (23, 2i, ” ", 

BLACK, BLACK); 

TTY.PUT (ROW_START+2, 1, " 

BLACK, BLACK); 
end if; 

TTY.PUT (ROW START+1, 1, 


BLACK, BLACK); 

TTY.PUT (ROW_START, 1+SIZE_INPUT_MSG, " 

tl 

f 

YELLOW, BLACK); 

TTY.PUT (ROW_START, 46, " ", BLACK, BLACK); 

TTY.PUT (ROW_START, 45, " = ", YELLOW, BLACK); 

PUT (NUMBER_OUT, INPUT_VALUE, 4, 3); 

TTY.PUT (ROW_START, 48, NUMBER_OUT, YELLOW, BLACK); 
TTY.PUT (ROW_START, 58, " ", YELLOW, BLACK); 

TTY.PUT (ROW_START, 59, 

INPUT_VALUE_UNITS(1..SIZE_INPUT_VALUE_UNITS) , 

YELLOW, BLACK); 

TTY.PUT (ROW_START, 59+SIZE_INPUT_VALUE_UNITS, 

" ", YELLOW, BLACK); 

end GET_INPUT; 

end FINOPT COMMON; 


62 







— Title : EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 

: A COMPUTER OPTIMIZATION 

-- Author : John Reynold Censure 

-- Date : June 1992 

package FINOPT_DRAWINGS is 

procedure CYLINDRICAL_DRAWING(DIAMETER_MSG 

HEIGHT_MSG 

procedure RECTANGULAR_DRAWING(WIDTH_MSG 

LENGTH_MSG 
HEIGHT_MSG 

procedure MULTI_FIN DRAWING(WIDTH_MSG 

LENGTH_MSG 
HEIGHT_MSG 
SPACING_MSG 
WALL_LENGTH_MS G 
WALL WIDTH MSG 


: in STRING; 

: in STRING); 

: in STRING; 

: in STRING; 

: in STRING); 

: in STRING; 

: in STRING; 

: in STRING; 

: in STRING; 

: in STRING; 

: in STRING); 


end FINOPT DRAWINGS; 


63 





— Title 

— Author 

— Date 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 
A COMPUTER OPTIMIZATION 
John Reynold Censure 
June 1992 


with COMMON DISPLAY TYPES, TTY; 


use COMMON_DISPLAY_TyPES; 

package body FINOPT_DRAWINGS is 

procedure CYLINDRICAL_DRAWING(DIAMETER_MSG 

HEIGHT MSG 


: in STRING; 

: in STRING) is 


PAUSE 

CHAR 


: INTEGER; 

: CHARACTER; 


begin 


I ", 


I ", 


TTY.CLEAR_SCREEN; 
TTY.PUT ( 0, 20, ' 
TTY.PUT { 1, 18, 
TTY.PUT { 1, 19, 
TTY.PUT ( 2, 16, 
TTY.PUT ( 2, 17, 
TTY.PUT ( 3, 14, 
TTY.PUT ( 3, 15, 
TTY.PUT ( 4, 12, 
TTY.PUT { 4, 13, 
TTY.PUT ( 5, 10, 
TTY.PUT ( 5, 11, 


TTY.PUT ( 6, 8, 

TTY.PUT ( 6, 9, 

TTY.PUT ( 7, 6, 

TTY.PUT ( 7, 7, 

TTY.PUT ( 8, 5, 

TTY.PUT ( 8, 25, 
YELLOW, BLACK); 
TTY.PUT ( 9, 5, 

YELLOW, RED); 
TTY.PUT ( 9, 50, 
TTY.PUT (10, 5, 


II 

II 

II 

It 

II 

II 

II 

"T 


YELLOW, BLACK); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

YELLOW, BLACK) ; 

/ 1", YELLOW, RED); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

YELLOW, BLACK); 

/ I", YELLOW, RED); 

I _", YELLOW, RED) ; 


/ 


\ 


"\ 

"I 


I", YELLOW, BLACK); 

/ \ 


YELLOW, BLACK); 


YELLOW, RED); 

TTY.PUT (10, 52, "\ 

TTY.PUT (11, 5, "I I 1 I FIN 

YELLOW, RED); 

TTY.PUT (11, 54, " I", YELLOW, BLACK); 

TTY.PUT (11, 61, DIAMETER MSG, YELLOW, BLACK); 


TTY.PUT (12, 5, 

YELLOW, RED); 
TTY.PUT (12, 54, 


I 


", YELLOW, BLACK); 


64 






TTY.PUT 

If 

(13, 

5, 

"1 W 

1 \ / \ 

/ 

YELLOW, 

RED) 




TTY.PUT 

(13, 

52, 

*’/ 

1 ", YELLOW, BLACK); 

TTY.PUT 

(14, 

5, 

"1 A 

1 \ / \ ". 

YELLOW, 

RED) 

i 



TTY.PUT 

(14, 

50, 

"/ 

1 ", YELLOW, BLACK); 

TTY.PUT 

(15, 

5, 

"1 L 

1 ", YELLOW, RED); 

TTY.PUT 

(15, 

22, 

"/", 

YELLOW, BLACK); 

TTY.PUT 

(16, 

5, 

"1 L 

1 1", YELLOW, RED); 

TTY.PUT 

(16, 

20, 

"/ 

1", YELLOW, BLACK); 

TTY.PUT 

(17, 

5, 

"1 

1 ", YELLOW, RED); 

TTY.PUT 

(17, 

18, 

"/I 

1", YELLOW, 

BLACK) ; 





TTY.PUT 

(18, 

5, 

"1 

1 ", YELLOW, RED); 

TTY.PUT 

(18, 

16, 

’■/ 1 

-!<•, YELLOW, 

BLACK) ; 





TTY.PUT 

(19, 

5, 

"1 

1 ", YELLOW, RED); 

TTY.PUT 

(19, 

14, 


1 1", YELLOW, 

BLACK) ; 





TTY.PUT 

(19, 

28, 

HEIGHT MSG, YELLOW, BLACK); 

TTY.PUT 

(20, 

5, 

"1 

1 ", YELLOW, RED); 

TTY.PUT 

(20, 

12, 

"/ 

1 1", 

YELLOW, 

BLACK); 



TTY.PUT 

(21, 

5, 

"1 

1", YELLOW, RED); 

TTY.PUT 

(21, 

10, 


YELLOW, BLACK); 

TTY.PUT 

(23, 

27, 

” Press any )cey to continue ", BLUE, CYAN) ; 

TTY.GET 

(PAUSE, 

CHAR) ; 



end CYLINDRICAL DRAWING; 


procedure RECTANGULAR_DRAWING(WIDTH_MSG 

LENGTH_MSG 
HEIGHT MSG 


in STRING; 

: in STRING; 

: in STRING) is 


PAUSE 


INTEGER; 


CHAR 


CHARACTER; 


begin 


RED) ; 


TTY.CLEAR SCREEN; 


TTY.PUT 

( 

0, 

25, 

ff 

", YELLOW, BLACK); 

TTY.PUT 

( 

1, 

23, 


YELLOW, BLACK); 

TTY.PUT 

( 

1, 

24, 


/ 1", YELLOW, RED); 

TTY.PUT 

( 

2, 

21, 


YELLOW, BLACK); 

TTY.PUT 

( 

2, 

22, 

ff 

/ 1", YELLOW, RED); 

TTY.PUT 

( 

3, 

19, 


YELLOW, BLACK); 

TTY.PUT 

( 

3, 

20, 

It 

/ 1", YELLOW, RED); 

TTY.PUT 

( 

4, 

17, 


YELLOW, BLACK); 

TTY.PUT 

( 

4, 

18, 

11 

/ 1", YELLOW, RED); 

TTY.PUT 

( 

4, 

32, 

ff 

", YELLOW 

TTY.PUT 

( 

5, 

15, 


YELLOW, BLACK); 

TTY.PUT 

( 

5, 

16, 

ff 

_ / / /I 

TTY.PUT 

( 

5, 

53, 

"1 ", 

YELLOW, BLACK); 


BLACK) ; 
YELLOW, 


65 






RED) ; 


RED) ; 


TTY.PUT 

( 6, 

14 

TTY.PUT 

( 6, 

53 

TTY.PUT 

( 6, 

56 

TTY.PUT 

( 7, 

14 

TTY.PUT 

( 7, 

51 

TTY.PUT 

( 8, 

14 

TTY.PUT 

{ 8, 

46 

TTY.PUT 

{ 9, 

14 

TTY.PUT 

{ 9, 

44 

TTY.PUT 

(10, 

14 

TTY.PUT 

(10, 

42 

TTY.PUT 

(11, 

14 

TTY.PUT 

(11, 

40 

TTY.PUT 

(12, 

14 

TTY.PUT 

(12, 

38 

TTY.PUT 

(13, 

14 

TTY.PUT 

(13, 

36 

TTY.PUT 

(14, 

14 

TTY.PUT 

(14, 

27 

TTY.PUT 

(15, 

14 

TTY.PUT 

(15, 

25 

TTY.PUT 

(16, 

14 

TTY.PUT 

(16, 

23 

TTY.PUT 

(17, 

14 

TTY.PUT 

(17, 

21 

TTY.PUT 

(17, 

41 

TTY.PUT 

(18, 

35 

TTY.PUT 

(19, 

20 

TTY.PUT 

(20, 

20 

TTY.PUT 

(21, 

20 

TTY.PUT 

(21, 

22 

TTY.PUT 

(21, 

35 

TTY.PUT 

(23, 

27 

TTY.GET 

(PAUSE, 


"I I / /I", YELLOW, 

"I", YELLOW, BLACK); 

WIDTH_MSG, YELLOW, BLACK); 

"I I / / I", YELLOW, 

"_I_", YELLOW, BLACK); 

"11/ / ", YELLOW, RED) 

"/", YELLOW, BLACK); 

"I I / / ", YELLOW, RED); 

"/ I", YELLOW, BLACK); 

"I W 1/_ / ", YELLOW, RED); 

"/ I ", YELLOW, BLACK); 

"I A I ", YELLOW, RED); 

"/ I", YELLOW, BLACK); 

"I L FIN I ", YELLOW, RED) ; 

"/ /I", YELLOW, BLACK); 

"I L _I", YELLOW, RED) ; 

"/ / I", YELLOW, BLACK); 

"I I ", YELLOW, RED); 

"/ / I", YELLOW, BLACK); 

"I I ", YELLOW, RED); 

"/ I / I", YELLOW, BLACK); 

"I I ", YELLOW, RED); 

"/ I /", YELLOW, BLACK); 

"I_I ", YELLOW, RED) ; 

"/ I /", YELLOW, BLACK); 

LENGTH_MSG, YELLOW, BLACK); 

"I", YELLOW, BLACK); 

"I I", YELLOW, BLACK); 

H|-1-, yellow, BLACK); 

"i", YELLOW, BLACK); 

HEIGHT_MSG, YELLOW, BLACK); 

"I", YELLOW, BLACK); 

" Press any key to continue ", BLUE, CYAN); 
CHAR) ; 


end RECTANGULAR DRAWING; 


procedure MULTI_FIN_DRAWING{WIDTH_MSG 

LENGTH MSG 
height'msg 

SPACING_MSG 
WALL_LENGTH_MS G 
WALL WIDTH MSG 


in STRING; 

: in STRING; 

: in STRING; 

: in STRING; 

: in STRING; 

: in STRING) is 


PAUSE 


INTEGER; 


CHAR 


CHARACTER; 


begin 

TTY.CLEAR_SCREEN; 

TTY.PUT ( 0, 27, WALL_WIDTH_MSG, YELLOW, BLACK); 
TTY.PUT ( 1, 10, 


66 






"1- 





— 1", 

YELLOW, 



BLACK); 









TTY.PUT 

If 

( 2, 

6, 




If 

9 



YELLOW, 

BLACK); 







TTY.PUT 

( 3, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

( 3, 

10, 







"1 





1", 

YELLOW, 

RED) ; 


TTY.PUT 

( 4, 

7, 

"1", 

YELLOW, BLACK); 





TTY.PUT 

( 4, 

10, 






• 

"1 l\ 

\ 


l\ 

\ l\ \ 

I", 

YELLOW, 

RED) ; 


TTY.PUT 

( 5, 

7, 

"1", 

YELLOW, BLACK); 





TTY.PUT 

( 5, 

10, 







"1 1 

\ \ 


1 \ 

\ 1 \ \ WALL 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

{ 6, 

7, 

"1", 

YELLOW, BLACK); 





TTY.PUT 

( 6, 

10, 







"1 1 

\ 

\ 

1 

\ \ 1 \ \ 

1”, 

YELLOW, 

RED) ; 


TTY.PUT 

( 7, 

7, 

"1", 

YELLOW, BLACK); 





TTY.PUT 

( 7, 

10, 







"1 1 


\ \ 

1 

\ \ 1 \ \ 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

( 8, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

( 8, 

10, 







"1 1 


\ 

\ 

\ \ \ \ 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

( 9, 

7, 

"I", 

YELLOW, BLACK) ; 





TTY.PUT 

( 9, 

10, 







"1 1 



\ \ 

\ \ \ \ 

I", 

YELLOW, 

RED) ; 


TTY.PUT 

( 9, 

59, 

ft 

", YELLOW, BLACK); 





TTY.PUT 

(10, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(10, 

10, 







"1 1 

F 


1 1 

II II 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

(10, 

62, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(11, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(11, 

10, 







"1 1 

I 


1 1 

II II 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

(11, 

62, 

"I", 

YELLOW, BLACK) ; 





TTY.PUT 

(12, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(12, 

10, 







"I \ 

N 


1 1 

II II 

1”, 

YELLOW, 

RED) ; 


TTY.PUT 

(12, 

62, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(13, 

7, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(13, 

10, 







"1 

\ 


1 1 

II II 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

(13, 

62, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(13, 

64, 

LENGTH MSG, YELLOW, BLACK) ; 





TTY.PUT 

(14, 

7, 

"1", 

YELLOW, BLACK); 





TTY.PUT 

(14, 

10, 







"1 1 

\ 


1 1 

\ 1 1 \ II 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

(14, 

62, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(15, 

6, 

" 1 

", YELLOW, BLACK); 





TTY.PUT 

(15, 

10, 







"1 1 \ 


\ 

1 1 

\ 1 1 \ II 

1", 

YELLOW, 

RED) ; 


TTY.PUT 

(15, 

62, 

"1", 

YELLOW, BLACK) ; 





TTY.PUT 

(16, 

14, 

"1 

\ \", YELLOW, BLACK); 





TTY.PUT 

(16, 

24, 

" 1 

1", YELLOW, RED); 




' 

TTY.PUT 

(16, 

35, 


YELLOW, BLACK); 





TTY.PUT 

(16, 

36, 

" 1 

1 ", YELLOW, RED); 









67 












TTY.PUT (16, 47, "\", YELLOW, BLACK); 

TTY.PUT (16, 48, " | |", YELLOW, RED); 

TTY. PUT (16, 62, " I , YELLOW, BLACK) ; 

TTY.PUT (17, 20, "\ \", YELLOW, BLACK); 

TTY.PUT (17, 26, "|_|", YELLOW, RED); 

TTY.PUT (17, 37, "\", YELLOW, BLACK); 

TTY.PUT (17, 38, "|_I", YELLOW, RED); 

TTY.PUT (17, 49, "\", YELLOW, BLACK); 

TTY. PUT (17, 50, "I_| ", YELLOW, RED) ; 

TTY.PUT (17, 56, "_|_", YELLOW, BLACK); 

TTY.PUT (18, 7, HEIGHT_MSG, YELLOW, BLACK); 

TTY.PUT (18, 22, "\", YELLOW, BLACK); 

TTY. PUT (19, 24, "\ I |-1 | —I", YELLOW, BLACK) 

TTY.PUT (20, 26, "|", YELLOW, BLACK); 

TTY.PUT (20, 28, SPACING_MSG, YELLOW, BLACK); 

TTY.PUT (20, 45, WIDTH MSG, YELLOW, BLACK); 


TTY.PUT 
TTY.PUT 

(21, 

( 3, 

26, 

4, 

"1", YELLOW, BLACK) 
WALL LENGTH MSG(1) , 

i 

YELLOW, 

BLACK); 

TTY.PUT 

( 4, 

4, 

WALL LENGTH MSG(2), 

YELLOW, 

BLACK); 

TTY.PUT 

( 5, 

4, 

WALL LENGTH MSG(3), 

YELLOW, 

BLACK); 

TTY.PUT 

( 6, 

4, 

WALL LENGTH MSG(4), 

YELLOW, 

BLACK) ; 

TTY.PUT 

( 7, 

4, 

WALL LENGTH MSG(5), 

YELLOW, 

BLACK) ; 

TTY.PUT 

{ 8, 

4, 

WALL LENGTH MSG(6), 

YELLOW, 

BLACK) ; 

TTY.PUT 

{ 9, 

4, 

WALL LENGTH MSG(7), 

YELLOW, 

BLACK); 

TTY.PUT 

(10, 

4, 

WALL LENGTH MSG(8), 

YELLOW, 

BLACK); 

TTY.PUT 

(11, 

4, 

WALL LENGTH MSG(9), 

YELLOW, 

BLACK); 

TTY.PUT 

(12, 

4, 

WALL LENGTH MSG(10) 

, YELLOW, 

BLACK) ; 

TTY.PUT 

(13, 

4, 

WALL LENGTH MSG(11) 

, YELLOW, 

BLACK); 

TTY.PUT 

(14, 

4, 

WALL LENGTH MSG(12) 

, YELLOW, 

BLACK); 

TTY.PUT 

(15, 

4, 

WALL LENGTH MSG(13) 

, YELLOW, 

BLACK); 


TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 
end MULTI_FIN_DRAWING; 

end FINOPT DRAWINGS; 


68 







Title 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 
A COMPUTER OPTIMIZATION 
-- Author ; John Reynold Censure 

-- Date : June 1992 

package FINOPT_MULTIPLE is 


procedure MULTIPLE_NO_OPT(UNITS 

CONVERT_DIST 

CONVERT_TEMP 

G_C 

GRAVITY 
WALL_LENGTH 
WALL_LENGTH_UNITS 
WALL_WIDTH 
WALL_WIDTH_UNITS 
LENGTH 

LENGTH_UNITS 

HEIGHT 

HEIGHT_UNITS 

WIDTH 

WIDTH_UNITS 

SPACING 

SPACING_UNITS 

NUM_FINS 

NUM_FINS_UNITS 

DENSITY 

DENSITYJJNITS 

SPECIFIC_HEAT 

SPECIFIC_HEAT_UNITS 

K 

K_FLUID 

K_UNITS 

NU 

NU_UNITS 

T_AMBIENT 

T_WALL 

T_UNITS 

Q 

Q UNITS 


in INTEGER; 
in FLOAT; 
in FLOAT; 
in FLOAT; 
in FLOAT; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING); 


procedure MULTIPLE_MAX_FIN(UNITS 

CONVERT_DIST 

CONVERT_TEMP 

G_C 

GRAVITY 

WALL_LENGTH 

WALL_LENGTH_UNITS 

WALL_WIDTH 

WALL_WIDTH_UNITS 

LENGTH 

LENGTH_UNITS 

HEIGHT 

HEIGHT_UNITS 

WIDTH 

WIDTH UNITS 


in INTEGER; 
in FLOAT; 
in FLOAT; 
in FLOAT; 
in FLOAT; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 
in out FLOAT; 
in STRING; 


69 








procedure MULTIPLE 


end FINOPT MULTIPLE; 


SPACING 


in 

out FLOAT 

SPACING UNITS 


in 

STRING; 

NUM FINS 


in 

out FLOAT 

NUM FINS UNITS 


in 

STRING; 

DENSITY 


in 

out FLOAT 

DENSITY UNITS 


in 

STRING; 

SPECIFIC HEAT 


in 

out FLOAT 

SPECIFIC HEAT UNITS 


in 

STRING; 

K 


in 

out FLOAT 

K FLUID 


in 

out FLOAT 

K UNITS 


in 

STRING; 

NU 


in 

out FLOAT 

NU UNITS 


in 

STRING; 

T AMBIENT 


in 

out FLOAT 

T WALL 


in 

out FLOAT 

T UNITS 


in 

STRING; 

Q 


in 

out FLOAT 

Q UNITS 


in 

STRING); 


; Q(UNITS 


in 

INTEGER; 

CONVERT DIST 


in 

FLOAT; 

CONVERT TEMP 


in 

FLOAT; 

G C 


in 

FLOAT; 

GRAVITY 


in 

FLOAT; 

WALL LENGTH 


in 

out FLOAT 

WALL LENGTH UNITS 


in 

STRING; 

WALL WIDTH 


in 

out FLOAT 

WALL WIDTH UNITS 


in 

STRING; 

LENGTH 


in 

out FLOAT 

LENGTH UNITS 


in 

STRING; 

HEIGHT 


in 

out FLOAT 

HEIGHT UNITS 


in 

STRING; 

WIDTH 


in 

out FLOAT 

WIDTH UNITS 


in 

STRING; 

SPACING 


in 

out FLOAT 

SPACING UNITS 


in 

STRING; 

NUM FINS 


in 

out FLOAT 

NUM FINS UNITS 


in 

STRING; 

DENSITY 


in 

out FLOAT 

DENSITY UNITS 


in 

STRING; 

SPECIFIC HEAT 


in 

out FLOAT 

SPECIFIC HEAT UNITS 


in 

STRING; 

K 


in 

out FLOAT 

K FLUID 


in 

out FLOAT 

K UNITS 


in 

STRING; 

NU 


in 

out FLOAT 

NU UNITS 


in 

STRING; 

T AMBIENT 


in 

out FLOAT 

T WALL 


in 

out FLOAT 

T UNITS 


in 

STRING; 

Q 


in 

out FLOAT 

Q UNITS 


in 

STRING); 


70 







— Title ; EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 

: A COMPUTER OPTIMIZATION 

-- Author : John Reynold Censure 

-- Date : June 1992 

with TEXT_IO, COMMON_DISPLAY_TYPES, TTY, CURSOR, FINOPT_COMMON, 

GENERIC_ELEMENTARY_FUNCTIONS, FINOPT_PICTURES; 

use TEXT_IO, COMMON_DISPLAY_TYPES, FINOPT_COMMON; 

package body FINOPT_MULTIPLE is 

package FLOAT_INOUT is new FLOAT_IO{FLOAT); 
package MY_ELEMENTARY_FUNCTIONS is 

new GENERIC_ELEMENTARY_FUNCTIONS(FLOAT); 
use FLOAT INOUT, MY ELEMENTARY FUNCTIONS; 


procedure MULTIPLE 

NO OPT(UNITS 


in 

INTEGER; 



CONVERT DIST 


in 

FLOAT; 



CONVERT TEMP 


in 

FLOAT; 



G C 


in 

FLOAT; 



GRAVITY 


in 

FLOAT; 



WALL LENGTH 


in 

out FLOAT; 



WALL LENGTH UNITS 


in 

STRING; 



WALL WIDTH 


in 

out FLOAT; 



WALL WIDTH UNITS 


in 

STRING; 



LENGTH 


in 

out FLOAT; 



LENGTH UNITS 


in 

STRING; 



HEIGHT 


in 

out FLOAT; 



HEIGHT UNITS 


in 

STRING; 



WIDTH 


in 

out FLOAT; 



WIDTH UNITS 


in 

STRING; 



SPACING 


in 

out FLOAT; 



SPACING UNITS 


in 

STRING; 



NUM_FINS 


in 

out FLOAT; 



NUM~FINS UNITS 


in 

STRING; 



DENSITY 


in 

out FLOAT; 



DENSITY UNITS 


in 

STRING; 



SPECIFIC HEAT 


in 

out FLOAT; 



SPECIFIC HEAT UNITS 


in 

STRING; 



K 


in 

out FLOAT; 



K FLUID 


in 

out FLOAT; 



K UNITS 


in 

STRING; 



NU 


in 

out FLOAT; 



NU UNITS 


in 

STRING; 



T AMBIENT 


in 

out FLOAT; 



T WALL 


in 

out FLOAT; 



T UNITS 


in 

STRING; 



Q 


in 

out FLOAT; 



Q_UNITS 


in 

STRING) IS 

NUMBER_ 

OUT 



STRINGd. .10) 

CHAR 



■ 

CHARACTER; 

PAUSE, 

NUM FINS 

I NT 

; 

INTEGER; 


71 








PERIMETER, AREA, M, EFFICIENCY, 

DELTA_T, T_TIP, T_AVG, BETA, MU, 

RAYLEIGH_CHANNEL, NUSSELT_CHANNEL, H, 

AREA_BASE, AREA_FIN, AREA_10TAL : FLOAT; 

begin 


Inputs 

FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT{WALL_LENGTH, "Length of the fin placement area", 32, 
WALL_LENGTH_UNITS, 2, 13); 

GET_INPUT(WALL_WIDTH, "Width of the fin placement area", 31, 
WALL_WIDTH_UNITS, 2, 14); 

GET_INPUT(LENGTH, "Length of each fin", 18, LENGTH_UNITS, 2, 15) 
GET_INPUT(HEIGHT, "Height of each fin", 18, HEIGHT_UNITS, 2, 16) 
GET_INPUT(WIDTH, "Width of each fin", 17, WIDTH_UNITS, 2, 17); 
GET_INPUT(SPACING, "Spacing between fins", 20, SPACING_UNITS, 2, 

18 ) ; 

NUM_FINS := (WALL_WIDTH-WIDTH)/(SPACING+WIDTH); 

NUM_FINS ;= NUM_FINS-0.49999999999; 

NUM_FINS_INT ;= INTEGER(NUM_FINS); 

NUM_FINS_INT ;= NUM_FINS_INT+1; 

NUM_FINS := FLOAT(NUM_FINS_INT); 

GET_INPUT(NUM_FINS, "Number of fins, default is maximum niunber", 
41, NUM_FINS_UNITS, 4, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 

TTY.GET (PAUSE, CHAR); 

FINOPT_PICTURES.INPUT_CONT_MSG; 
if (UNITS = 2 ) then 

GET_INPUT(DENSITY, "Density of surrounding fluid", 

28, DENSITY_UNITS, 8, 13); 
else 

GET_INPUT(DENSITY, "Density of surrounding fluid", 

28, DENSITY_UNITS, 6, 13); 
end if; 

if (UNITS = 2) then 

GET_INPUT(SPECIFIC_HEAT, "Specific heat of surrounding fluid" 
34, SPECIFIC_HEAT_UNITS, 15, 14); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 17, 15); 

GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, k", 44, 

K_UNITS, 17, 16); 

GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 6, 17); 
else 

GET_INPUT(SPECIFIC_HEAT, "Specific heat of surrounding fluid" 
34, SPECIFIC_HEAT_UNITS, 12, 14); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 11, 15); 

GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, k", 44, 

K UNITS, 11, 16); 


72 






GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 5, 17); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, T_UNITS, 5, 18); 
GET_INPUT(T_WALL, "Wall Temperature", 16, T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any )cey to continue ", BLUE, CYAN) ; 

TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length >> Width 


T_AVG := (T_WALL+T_AMBIENT)/2.0; 

BETA := 1.0/(T_AVG+CONVERT_TEMP); 

DELTA_T := T_WALL-T_AMBIENT; 

MU := (NU*DENSITY)/G_C; 

RAYLEIGH_CHANNEL := ((DENSITY**2)*GRAVITY*BETA*SPECIFIC_HEUVT 
*((SPACING/CONVERT_DIST)**4)*DELTA_T)/(MU*(LENGTH/CONVERT_DIST) 
*K_FLUID); 

NUSSELT_CHANNEL := ((576.0/(RAYLEIGH_CHANNEL**2)) 
+(2.873/SQRT(RAYLEIGH_CHANNEL)))**(-0.5); 

H := (NUSSELT_CHANNEL*K_FLUID)/(SPACING/C0NVERT;_DIST); 

PERIMETER := 2.0*LENGTH/CONVERT_DIST; 

AREA := (WIDTH/C0NVERT_DIST)*(LENGTH/C0NVERT_DIST); 

M ;= SQRT((H*PERIMETER)/(K*AREA)); 

EFFICIENCY := (TANK(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

AREA_BASE := 

( (WALL_WIDTH/CONVERT_DIST)*(WALL_LENGTH/CONVERT_DIST)) 

-(NUM_FINS*(LENGTH/CONVERT_DIST)*(WIDTH/CONVERT_DIST)); 
AREA_FIN := NUM_FINS*(2.0*{HEIGHT/CONVERT_DIST) 

*(LENGTH/CONVERT_DIST)) ; 

AREA_TOTAL := AREA_BASE+(EFFICIENCY*AREA_FIN); 

2 := H*AREA_TOTAL*DELTA_T; 

T TIP ;= T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 
TTY.PUT (7, 1, "Length of the fin placement area 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_LENGTH, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT { 7, 59, WALL_LENGTH_UNITS, YELLOW, BLACK); 
TTY.PUT ( 8, 1, "Width of the fin placement area 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_WIDTH, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, WALL_WIDTH_UNITS, YELLOW, BLACK); 
TTY.PUT (9, 1, "Length of each fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, LENGTH, 4, 3) ; 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, LENGTHJJNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Height of each fin 


73 









YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Width of each fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Spacing between fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, SPACING, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, SPACING_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Number of fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NUM_FINS, 4, 3) ; 

TTY.PUT (13, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (13, 59, NUM_FINS_UNITS, YELLOW, BLACK); 

TTY.PUT (14, 1, "Density of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, DENSITY, 4, 3); 

TTY.PUT (14, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (14, 59, DENSITY_UNi;TS, YELLOW, BLACK); 

TTY.PUT (15, 1, "Specific heat of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, SPECIFIC_HEAT, 4, 3); 

TTY.PUT (15, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (15, 59, SPECIFIC_HEAT__UNITS, YELLOW, BLACK); 

TTY. PUT (16, 1, "Thermal conductivity of material, )c 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "Thermal conductivity of surrounding fluid, )c 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K_FLUID, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "Kinematic viscosity of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NU, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, NU_UNITS, YELLOW, BLACK); 

TTY.PUT (19, 1, "Ambient Temperature ‘ 

YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (19, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 59, T_UNITS, YELLOW, BLACK); 

TTY. PUT (20, 1, "Wall Ten^>erature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (20, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (20, 59, T_UNITS, YELLOW, BLACK); 

TTY. PUT (23, 27, " Press any Icey to continue ", BLUE, CYAN) ; 
TTY.GET (PAUSE, CHAR); 


74 






FINOPT_PICTURES.OUTPUT_CONT_MSG; 

TTY.PUT ( 6, 35, " Outputs ”, BRIGHT_WHITE, GREEN); 

TTY.PUT { 8, 1, "Heat transferred away by the fins, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT { 6, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3) ; 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 1, "The temperature at the tip of the fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Channel Rayleigh number 
YELLOW, BLACK); 

PUT (NUMBER OUT, RAYLEIGH CHANNEL, 4, 3); 


TTY.PUT (11, 48, NUMBER OUT, YELLOW, BLACK); 

TTY.PUT (12, 1, "Channel Nusselt number 



= 

YELLOW, BLACK); 

PUT (NUMBER OUT, NUSSELT CHANNEL, 4, 3); 

TTY.PUT (12, 48, NUMBER OUT, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", 

BLUE, 

CYAN); 

TTY.GET (PAUSE, CHAR); 

end MULTIPLE_NO_OPT; 

procedure MULTIPLE MAX FIN(UNITS 


in 

INTEGER; 

CONVERT DIST 


in 

FLOAT; 

CONVERT TEMP 


in 

FLOAT; 

G C 


in 

FLOAT; 

GRAVITY 


in 

FLOAT; 

WALL LENGTH 


in 

out FLOAT; 

WALL LISNGTH UNITS 


in 

STRING; 

WALL WIDTH 


in 

out FLOAT; 

WALL WIDTH UNITS 


in 

STRING; 

LENGTH 


in 

out FLOAT; 

LENGTH UNITS 


in 

STRING; 

HEIGHT 


in 

out FLOAT; 

HEIGHT UNITS 


in 

STRING; 

WIDTH 


in 

out FLOAT; 

WIDTH UNITS 


in 

STRING; 

SPACING 


in 

out FLOAT; 

SPACING UNITS 


in 

STRING; 

NUM FINS 


in 

out FLOAT; 

NUM FINS UNITS 


in 

STRING; 

DENSITY 


in 

out FLOAT; 

DENSITY UNITS 


in 

STRING; 

SPECIFIC HEAT 


in 

out FLOAT; 

SPECIFIC HEAT UNITS 


in 

STRING; 

K 


in 

out FLOAT; 

K FLUID 


in 

out FLOAT; 

K UNITS 


in 

STRING; 

NU 


in 

out FLOAT; 








NU UNITS 

: in 

STRING; 


T AMBIENT 

: in 

out FLOAT; 


T WALL 

: in 

out FLOAT; 


T UNITS 

: in 

STRING; 


Q 

: in 

out FLOAT; 


Q_UNITS 

: in 

STRING) is 

NUMBER_OUT 


: STRING(1..10) 

CHAR 


: CHARACTER; 

PAUSE, NUM_ 

_FINS_INT 

: INTEGER; 

PERIMETER, 

AREA, M, EFFICIENCY, 



DELTA T, T 

TIP, T AVG, BETA, MU, 



RAYLEIGH CHANNEL, NUSSELT CHANNEL, H, 



AREA_BASE, 

AREA_FIN, AREA_TOTAL, P 

; FLOAT; 


begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT(WALL_LENGTH, "Length of the fin placement area", 32, 
WALL_LENGTH_UNITS, 2, 14); 

GET_INPUT(WALL_WIDTH, "Width of the fin placement area", 31, 
WALL_WIDTH_UNITS, 2, 15); 

GET_INPUT(LENGTH, "Lengtn of each fin", 18, LENGTH UNITS, 2, 16); 
GET_INPUT(HEIGHT, "Height of each fin", 18, HEIGHT~UNITS, 2, 17); 
GET_INPUT(WIDTH, "Width of each fin", 17, WIDTH_UnIts, 2, 18); 
if (UNITS = 2) then 

GET_INPUT(DENSITY, "Density of surrounding fluid", 28, 
DENSITY_UNITS, 8, 19); 
else 

GET_INPUT(DENSITY, "Density of surrounding fluid", 28, 
DENSITY_UNITS, 6, 19) ; 
end if; 

TTY.PUT (23, 27, " Press any Icey to continue ", BLUE, CYAN); 

TTY.GET (PAUSE, CHAR); 

FINOPT_PICTURES.INPUT_CC: r_MSG; 
if (UNixS = 2) then 

GET_INPUT.(SPECIFIC_HEAT, "Specific heat of surrounding fluid", 
34 , SPECi 'pi C_HEAT_UNITS , 15, 14); 

GET_INPUT(K, "Thermal conductivity of material. It", 35, 
K_UNITS, 17, 15); 

GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, )c' , 44, 

K_UNITS, 17, 16); 

GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 6, 17); 
else 

GET_INPUT(SPECIFIC_HEAT, "Specific neat of surrounding f]uid", 
34,“SPECIFIC_HEAT_UNn , 12, 14); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 

K UNITS, 11, 15) ; 


76 







GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, k", 44, 

K_UNITS, 11, 16); 

GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 5, 17); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, T_UNITS, 5, 18); 
GET_INPUT(T_WALL, "Wall Temperature", 16, T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 

TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length » Width 


T_AVG := (T_WALL+T_AMBIENT)/2.0; 

BETA := 1.0/(T_AVG+CONVERT_TEMP); 

DELTA_T := T_WALL-T_AMBIENT; 

MU := (NU*DENSITY)/G_C; 

P ;= ((DENSITY**2)*GRAVITY*BETA*SPECIFIC_HEAT*DELTA_T) 

/(MU*(LENGTH/CONVERT_DIST)*K_FLUID); 

SPACING := CONVERT_DIST*(4.64/(P**(0.25) )) ; 

NUM_FINS := (WALL_WIDTH-WIDTH)/(SPACING+WIDTH); 

NUM_FINS := NUM_FINS-0.49999999999; 

NUM_FINS_INT := INTEGER(NUM_FINS); 

NUM_FINS_INT ;= NUM_FINS_INT+1; 

NUM_FINS := FLOAT(NUM_FINS_INT); 

RAYLEIGH_CHANNEL := ((DENSITY**2)*GRAVITY*BETA*SPECIFIC_HEAT 
*({SPACING/CONVERT_DIST)**4)*DELTA_T)/(MU*(LENGTH/CONVERT_DIST) 
*K_FLUID); 

NUSSELT_CHANNEL ;= ((576.0/(RAYLEIGH_CHANNEL**2)) 

+(2.873/SQRT(RAYLEIGH_CHANNEL)))**(-0.5); 

H := (NUSSELT_CHANNEL*K_FLUID)/(SPACING/CONVERT_DIST); 
PERIMETER := 2.0*LENGTH/CONVERT_DIST; 

AREA := (WIDTH/CON\^RT_DIST)*(LENGTH/CONVERT_DIST); 

M := SQRT((H*PERIMETER)/(K*AREA)); 

EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

AREA_BASE := 

( (WALL_WIDTH/CONVERT_DIST)*(WALL_LENGTH/CONVERT_DIST)) 

-(NUM_FINS*(LENGTH/CONVERT_DIST)*(WIDTH/CONVERT_DIST)); 
AREA_FIN ;= NUM_FINS*(2.0*(HEIGHT/CONVERT_DIST) 

*(LENGTH/CONVERT_DI3T)); 

AREA_TOTAL := AREA_BASE+(EFFICIENCY*AREA_FIN); 

Q := H*AREA_TOTAL*DELTA_T; 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 
TTY.PUT ( 7, 1, "Length of the fin placement area 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_LENGTH, 4, 3); 

TTY.PUT ( 7, 48, NUMEER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, WALL LENGTH UNITS, YELLOW, BLACK); 


77 







TTY.PUT ( 8, 1, "Width of the fin placement area 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_WIDTH, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, WALL_WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (9, 1, "Length of each fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, LENGTH, 4, 3) ; 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT { 9, 59, LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Height of each fin 
YELLOW, BLACK); 

PUT {NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Width of each fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Density of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, DENSITY, 4, 3) ; 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, DENSITY_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Specific heat of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, SPECIFIC_HEAT, 4, 3); 

TTY.PUT (13, 48, NUMBER OUT, YELLOW, BLACK); 

TTY.PUT (13, 59, SPECIfIc_HEAT_UNITS, YELLOW, BLACK); 

TTY.PUT (14, 1, "Thermal conductivity of material, k 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (14, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (14, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (15, 1, "Thermal conductivity of surrounding fluid, k 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K_FLUID, 4, 3); 

TTY.PUT (15, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (15, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (16, 1, "Kinematic viscosity of surrounding fluid 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NU, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, NU_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 


78 






TTY.GET (PAUSE, CHAR); 

FINOPT_PICTURES.OUTPUT_CONT_MSG; 

TTY.PUT ( 6, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY. PUT ( 8, 1, "Heat transferred away by tlie fins, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Spacing between fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, SPACING, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, SPACING_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Number of fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NUM_FINS, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, NUM_FINS_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3) ; 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 1, "The temperature at the tip of the fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Channel Rayleigh number 
YELLOW, BLACK); 

PUT (NUMBER_OUT, RAYLEIGH_CHANNEL, 4, 3); 

TTY.PUT (13, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (14, 1, "Channel Nusselt number 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NUSSELT_CHANNEL, 4, 3); 

TTY.PUT (14, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any )cey to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


end MULTIPLE MAX FIN; 


procedure 


MULTIPLE MAX Q(UNITS 


in 

INTEGER; 

CONVERT DIST 


in 

FLOAT; 

CON'/ERT TEMP 


in 

FLOAT; 

G C 


in 

FLOAT; 

GRAVITY 


in 

FLOAT; 

WALL LENGTH 


in 

out FLOAT 

WALL LENGTH UNITS 


in 

STRING; 

WALL WIDTH 


in 

out FLOAT 

WALL WIDTH UNITS 


in 

STRING; 

LENGTH 


in 

out FLOAT 

LENGTH UNITS 


in 

STRING; 

HEIGHT 


in 

out FLOAT 

HEIGHT UNITS 


in 

STRING; 

WIDTH 


in 

out FLOAT 

WIDTH UNITS 


in 

STRING; 

SPACING 


in 

out FLOAT 


79 







SPACING UNITS 


in 

STRING; 


NUM FINS 


in 

out FLOAT; 


NUM FINS UNITS 


in 

STRING; 


DENSITY 


in 

out FLOAT; 


DENSITY UNITS 


in 

STRING; 


SPECIFIC HEAT 


in 

out FLOAT; 


SPECIFIC HEAT UNITS 


in 

STRING; 


K 


in 

out FLOAT; 


K FLUID 


in 

out FLOAT; 


K UNITS 


in 

STRING; 


NU 


in 

out FLOAT; 


NU UNITS 


in 

STRING; 


T AMBIENT 


in 

out FLOAT; 


T WALL 


in 

out FLOAT; 


T UNITS 


in 

STRING; 


Q 


in 

out FLOAT; 


Q_UNITS 


in 

STRING) is 

NUMBER_OUT 


; 

STRING(1. . 10) 

CHAR 



CHARACTER; 

PAUSE, NUM_ 

_FINS_INT 


INTEGER; 

PERIMETER, 

AREA, M, EFFICIENCY, 




DELTA T, T 

TIP, T AVG, BETA, MU, 




RAYLEIGH CHANNEL, NUSSELT CHANNEL, H, 




AREA_BASE, 

AREA_FIN, AREA_TOTAL, P 

: 

FLOAT; 


begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT(WALL_LENGTH, "Length of the fin placement area", 32, 
WALL_LENGTH_UNITS, 2, 14); 

GET_INPUT(WALL_WIDTH, "Width of the fin placement area", 31, 
WALL_WIDTH_UNITS, 2, 15); 

GET_INPUT(LENGTH, "Length of each fin", 18, LENGTH_UNITS, 2, 16); 
GET_INPUT(HEIGHT, "Height of each fin", 18, HEIGHT_UNITS, 2, 17); 
GET_INPUT(WIDTH, "Width of each fin", 17, WIDTH_UNITS, 2, 18); 
if (UNITS = 2) then 

GET_INPUT(DENSITY, "Density of surrounding fluid", 28, 
DENSITY_UNITS, 8, 19); 
else 

GET_INPUT(DENSITY, "Density of surrounding fluid", 28, 
DENSITY_UNITS, 6, 19); 
end if; 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 

TTY.GET (PAUSE, CHAR); 

FINOPT_PICTURES.INPUT_CONT_MSG; 
if (UNITS = 2) then 

GET_INPUT(SPECIFIC_HEAT, "Specific heat of surrounding fluid", 
34, SPECIFIC_HEAT_UNITS, 15, 14); 

GET INPUT(K, "Thermal conductivity of material, k", 35, 


80 








K_UNITS, 11 , 15); 

GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, k", 44, 

K_UNITS, 17, 16); 

GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 6, 17); 
else 

GET_INPUT(SPECIFIC_HEAT, "Specific heat of surrounding fluid", 
34, SPECIFIC_HEAT_UNITS, 12, 14); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 11, 15); 

GET_INPUT(K_FLUID, 

"Thermal conductivity of surrounding fluid, k", 44, 

K_UNITS, 11, 16); 

GET_INPUT(NU, "Kinematic viscosity of surrounding fluid", 

40, NU_UNITS, 5, 17); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, T_UNITS, 5, 18); 
GET_INPUT(TJWALL, "Wall Temperature", 16, T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 

TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length » Width 


T_AVG := (T_WALL+T_AMBIENT)/2.0; 

BETA := 1.0/(T_AVG+CONVERT_TEMP); 

DELTA_T := T_WALL-T_AMBIENT; 

MU := (NU*DENSITY)/G_C; 

P := ((DENSITY**2)*GRAVITY*BETA*SPECIFIC_HEAT*DELTA_T) 

/(MU*(LENGTH/CONVERT_DIST)*K_FLUID); 

SPACING ;= CONVERT_DIST*(2.714/(P**(0.25))); 

NUM_FINS := (WALL_WIDTH-WIDTH)/(SPACING+WIDTH); 

NUM_FINS := NUM_FINS-0.49999999999; 

NUM_FINS_INT := INTEGER(NUM_FINS); 

NUM_FINS_INT := NUM_FINS_INT+1; 

NUM_FINS := FLOAT(NUM_FINS_INT); 

RAYLEIGH_CHANNEL ;= ((DENSITY**2)*GRAVITY*BETA*SPECIFIC_HEAT 
*((SPACING/CONVERT_DIST)**4)*DELTA_T)/(MU*(LENGTH/CONVERT_DIST) 
*K_FLUID); 

NUSSELT_CHANNEL := ((576.0/(RAYLEIGH_CHANNEL**2)) 
+(2.873/SQRT(RAYLEIGH_CHANNEL)))**(-0.5); 

H := (NUSSELT_CHANNEL*K_FLUID)/(SPACING/CONVERT_DIST); 

PERIMETER ;= 2.0*LENGTH/CONVERT_DIST; 

AREA := (WIDTH/CONVERT_DIST)*(LENGTH/CONVERT_DIST); 

M := SQRT((H*PERIMETER)/(K*AREA)); 

EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

AREA_BASE := 

( (WALL_WIDTH/CONVERT_DIST)*(WALL_LENGTH/CONVERT_DIST)) 

-(NUM_FINS*(LENGTH/CONVERT_DIST)*(WIDTH/CONVERT_DIST)); 
AREA_FIN ;= NUM_FINS*(2.0*(HEIGHT/CONVERT_DIST) 

*(LENGTH/CONVERT_DIST)); 

AREA_TOTAL := AREA_BASE+(EFFICIENCY*AREA_FIN); 

Q := H*AREA_TOTAL*DELTA_T; 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


81 







Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, ” Inputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 7, 1, "Length of the fin placement area = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_LENGTH, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, WALL_LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Width of the fin placement area = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, WALL_WIDTH, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, WALL_WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Length of each fin = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, LENGTH, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Height of each fin = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Width of each fin = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Density of surrounding fluid = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, DENSITY, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, DENSITY_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Specific heat of surrounding fluid = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, SPECIFIC_HEAT, 4, 3); 

TTY.PUT (13, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (13, 59, SPECIFIC_HEAT_UNITS, YELLOW, BLACK); 

TTY. PUT (14, 1, "Thermal conductivity of material, )c = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (14, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (14, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (15, 1, "Thermal conductivity of surrounding fluid, k = ", 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K_FLUID, 4, 3); 

TTY.PUT (15, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (15, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (16, 1, "Kinematic viscosity of surrounding fluid = ", 

YELLOW, BLACK); 

PUT (NUMBER_OUT, NU, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, NU UNITS, YELLOW, BLACK); 


82 









TTY.PUT (17, 1, "Ambient Temperatu.t 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN) 
TTY.GET (PAUSE, CHAR); 

FINOPT_PICTURES.OUTPUT_CONT_MSG; 

TTY.PUT ( 6, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 8, 1, "Heat transferred away by the fins, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Spacing between fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, SPACING, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, SPACING_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Number of fins 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NUM_FINS, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, NUM_FINS_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 1, "The temperature at the tip of the fins 
YELLOW, BLACK )} 

PUT (NUMBER_OUT, T_T1P, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Channel Rayleigh number 
YELLOW, BLACK); 

PUT (NUMBER_OUT, RAYLEIGH_CHANNEL, 4, 3); 

TTY.PUT (13, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY. PUT (14, 1, "Channel Nusselt niamber 
YELLOW, BLACK); 

PUT (NUMBER_OUT, NUSSELT_CHANNEL, 4, 3); 

TTY.PUT (14, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN) 
TTY.GET (PAUSE, CHAR); 

end MULTIPLE_MAX_Q; 

end FINOPT MULTIPLE; 


83 



— Title ; EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS: 

: A COMPUTER OPTIMIZATION 

-- Author : John Reynold Censure 

-- Date : June 1992 

package FINOPT_PICTURES is 

procedure THESIS_MSG; 

procedure FINOPT_MSG; 

procedure INPUT_MSG; 

procedure INPUT_CONT_MSG; 

procedure OUTPUT_MSG; 

procedure OUTPUT_CONT_MSG; 

procedure EXIT_MSG; 

end FINOPT PICTURES; 


84 





— Title 

-- Author 

— Date 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS 
A COMPUTER OPTIMIZATION 
John Reynold Gensure 
June 1992 


with COMMON DISPLAY TYPES, TTY, CURSOR; 


use COMMON_DISPLAY_ 

TYPES; 


package body 

FINOPT_PICTURES is 



procedure ' 

THESIS_MSG is 



PAUSE 



: INTEGER; 


CHAR 



: CHARACTER 


begin 





CURSOR. 

INHIBIT; 




TTY.CLEAR SCREEN; 




TTY.PUT 

(2, 28, 

"NAVAL POSTGRADUATE SCHOOL", YELLOW, BLACK); 


TTY.PUT 

(4, 31, 

"Monterey, 

California", YELLOW, BLACK); 


TTY.PUT 

(6, 37, 

"THESIS", 

YELLOW, BLACK); 

tf 

TTY.PUT 

(8, 16, 

tt 


t 

YELLOW, 

RED) ; 



It 

TTY.PUT 

( 9, 16, 

It 

EXTENDED SURFACE HEAT SINKS 

t 

YELLOW, 

RED) ; 



II 

TTY.PUT 

(10, 16, 

tt 

FOR ELECTRONIC COMPONENTS: 

f 

YELLOW, 

RED) ; 



II 

TTY.PUT 

(11, 16, 

tf 

A COMPUTER OPTIMIZATION 

9 

YELLOW, 

RED) ; 



ft 

TTY.PUT 

(12, 16, 

tf 


9 

YELLOW, 

RED) ; 



tl 

TTY.PUT 

(13, 16, 

ff 

by 

9 

YELLOW, 

RED) ; 



tf 

TTY.PUT 

(14, 16, 

ft 


9 

YELLOW, 

RED) ; 



II 

TTY.PUT 

(15, 16, 

ff 

John Reynold Gensure 

9 

YELLOW, 

RED) ; 



It 

TTY.PUT 

(16, 16, 

It 


9 

YELLOW, 

RED) ; 



II 

TTY.PUT 

(17, 16, 

ft 

June 1992 

9 

YELLOW, 

RED) ; 



tl 

TTY.PUT 

(18, 16, 

ft 


9 

YELLOW, 

RED) ; 




85 






TTY.PUT (19, 16 


Thesis Advisor: 


Allan D. Kraus 


YELLOW, RED); 

TTY.PUT (20, 16, " 

YELLOW, RED); 

TTY. PUT (23, 27, " Press any )cey to continue " 
TTY.GET (PAUSE, CHAR); 

end THESIS MSG; 


procedure FINOPT_MSG is 
PAUSE 
CHAR 


begin 

TTY.CLEAR SCREEN; 


TTY.PUT 

(4, 

34, 


Welcome To", GREEN, 

BLACK) 

TTY.PUT 

(8, 

18, 



", YELLOW, GREEN); 

TTY.PUT 

(8, 

24, 


tf 

i 

YELLOW, GREEN); 


TTY.PUT 

(8, 

27, 


II 

/ 

YELLOW, GREEN); 


TTY.PUT 

(8, 

31, 


tl 

t 

YELLOW, GREEN); 


TTY.PUT 

(8, 

34, 



", YELLOW, GREEN); 

TTY.PUT 

(8, 

41, 



", YELLOW, GREEN); 

TTY.PUT 

(8, 

48, 



", YELLOW, GREEN); 

TTY.PUT 

(8, 

55, 


If 

/ 

YELLOW, GREEN); 


TTY.PUT 

(8, 

58, 


II 

f 

YELLOW, GREEN); 


TTY.PUT 

(8, 

61, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

18, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

24, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

27, 


II 

, YELLOW, GREEN); 

TTY.PUT 

(9, 

31, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

34, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

38, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

41, 


tl 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

45, 


II 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

50, 


11 

9 

YELLOW, GREEN) ; 


TTY.PUT 

{9, 

55, 


11 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

58, 


11 

9 

YELLOW, GREEN); 


TTY.PUT 

(9, 

61, 


11 

9 

YELLOW, GREEN); 


TTY.PUT 

(10, 

18, 


II 

", YELLOW, GREEN); 

TTY.PUT 

(10, 

24, 


II 11 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

27, 


If If 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

29, 


11 If 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

31, 


11 If 

, YELLOW, GREEN) 


TTY . PUT 

(10, 

34, 


•1 11 

, YELLOW, GREEN) 


TTY . PUT 

(10, 

38, 


II If 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

41, 


II 

", YELLOW, GREEN) ; 

TTY.PUT 

(10, 

50, 


in •• 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

55, 


If If 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

58, 


If It 

, YELLOW, GREEN) 


TTY.PUT 

(10, 

61, 


ft ft 

, YELLOW, GREEN) 


TTY.PUT 

(11, 

18, 


II If 

, YELLOW, GREEN) 


TTY . PUT 

(11, 

24, 


II 11 

, YELLOW, GREEN) 



, BLUE, CYAN); 


: INTEGER; 

: CHARACTER; 


86 









TTY . PUT 

(11, 

27, 

II II 

t 

YELLOW, 

GREEN); 


TTY.PUT 

(11. 

30, 

II II 

, YELLOW 

, GREEN); 


TTY.PUT 

(11. 

34, 

It II 

» 

YELLOW, 

GREEN); 


TTY.PUT 

(11. 

38, 

II II 

/ 

YELLOW, 

GREEN) ; 


TTY.PUT 

(11. 

41, 

II II 

t 

YELLOW, 

GREEN); 


TTY.PUT 

(11. 

50, 

It It 

$ 

YELLOW, 

GREEN); 


TTY . PUT 

(12, 

18, 

It It 

r 

YELLOW, 

GREEN); 


TTY . PUT 

(12, 

24, 

II II 

t 

YELLOW, 

GREEN) ; 


TTY.PUT 

(12, 

27, 

It 11 

t 

YELLOW, 

GREEN); 


TTY.PUT 

(12, 

31, 

II It 

t 

YELLOW, 

GREEN) ; 


TTY.PUT 

(12, 

34, 

II 

", YELLOW, GREEN); 


TTY . PUT 

(12, 

41, 

It It 

/ 

YELLOW, 

GREEN) ; 


TTY . PUT 

(12, 

50, 

II It 

t 

YELLOW, 

GREEN); 


TTY . PUT 

(12, 

55, 

II It 

f 

YELLOW, 

GREEN) ; 


TTY . PUT 

(12, 

58, 

It II 

f 

YELLOW, 

GREEN); 


TTY.PUT 

(12, 

61, 

It II 

f 

YELLOW, 

GREEN); 


TTY.PUT 

(17, 

26, 

"Version 1.0 

dated June 1992", GREEN, 

BLACK); 

TTY.PUT 

(19, 

24, 

"Written by 

John Reynold Gensure", GREEN, BLACK); 

TTY.PUT 

(23, 

26, 

" Press any 

Jcey to continue ", BLUE, 

CYAN); 

TTY.GET 

(PAUSE, 

CHAR) 





end FINOPT_MSG; 
procedure INPUT_MSG is 
begin 

TTY.CLEAR SCREEN; 


TTY . PUT 

( 

1, 

19, 







II 








", YELLOW, 

CYAN) 

TTY.PUT 

( 

2, 

19, 







II 








", YELLOW, 

CYAN) 

TTY.PUT 

( 

3, 

19, 

•1 

It 

t 

YELLOW, 

CYAN) 



TTY.PUT 

( 

3, 

58, 

11 

It 

f 

YELLOW, 

CYAN) 



TTY.PUT 

( 

4, 

19, 

II 

It 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

4, 

58, 

ft 

It 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

5, 

19, 

II 

It 

9 

YELLOW, 

CYAN) 



TTY . PUT 

( 

5, 

58, 

•1 

It 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

6, 

19, 

ft 

II 

9 

YELLOW, 

CYAN) 



TTY . PUT 

( 

6, 

58, 

If 

If 

9 

YELLOW, 

CYAN) 



TTY . PUT 

( 

7, 

19, 

It 

11 

9 

YELLOW, 

CYAN) 



TTY . PUT 

( 

7, 

58, 

II 

II 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

8, 

19, 

tt 

It 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

8, 

58, 

II 

II 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

9, 

19, 

tl 

II 

9 

YELLOW, 

CYAN) 



TTY.PUT 

( 

9, 

58, 

If 

II 

9 

YELLOW, 

CYAN) 



TTY.PUT 

(10, 

19, 







If 








", YELLOW, 

CYAN) 

TTY.PUT 

(11, 

19, 







If 








", YELLOW, 

CYAN 

TTY.PUT 

( 

3, 

22, 

If 





tl 

9 

YELLOW, 

RED) ; 








TTY.PUT 

( 

4, 

22, 

II 


Required Inputs 

It 

9 

BRIGHT WHITE, 

RED) ; 






TTY.PUT 

( 

5, 

22, 

If 





It 

9 

YELLOW, 

RED) ; 








TTY.PUT 

( 

6, 

22, 

fl 

Press enter 

to choose default or 

It 

9 



87 








YELLOW, 

RED) ; 





TTY.PUT 
YELLOW, 

( 7, 
RED) ; 

22, 

It 

any other key to input new value. 

II 

t 

TTY.PUT 
YELLOW, 

( 6, 
RED) ; 

CM 

CM 

It 

All values must be inputted as 

11 

t 

TTY.PUT 
YELLOW, 

( 7, 
RED) ; 

22, 

M 

floats. Examples: 5.0 or 2.0E-3 

II 

f 

TTY.PUT ( 8, 
BRIGHT WHITE, 

22, " 
RED) ; 

Do not input 0.8 as .8 !!! 

II 

9 

TTY.PUT 
YELLOW, 

( 9, 
RED) ; 

22, 

It 


II 

t 


end INPUT MSG; 


procedure INPUT_CONT_MSG is 


begin 


TTY . CLEAR 

SCREEN; 







TTY . PUT 

( 

1, 

19, 







II 








", YELLOW, 

CYAN) ; 

TTY.PUT 

( 

2, 

19, 







II 








", YELLOW, 

CYAN) ; 

TTY.PUT 

( 

3, 

19, 

It 

It 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

3, 

58, 

II 

II 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

4, 

19, 

II 

It 

YELLOW, 

CYAN) ; 



TTY . PUT 

( 

4, 

58, 

It 

It 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

5, 

19, 

II 

It 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

5, 

58, 

If 

tt 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

6, 

19, 

It 

tl 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

6, 

58, 

tt 

tt 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

7, 

19, 

t1 

tt 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

7, 

58, 

tt 

tt 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

8, 

19, 

tt 

tt 

YELLOW, 

CYAN) ; 



TTY.PUT 

( 

8, 

58, 

tt 

It 

YELLOW, 

CYAN); 



TTY.PUT 

( 

9, 

19, 

tt 

tt 

YELLOW, 

CYAN); 



TTY.PUT 

( 

9, 

58, 

11 

tt 

YELLOW, 

CYAN); 



TTY.PUT 

(10, 

19, 







11 








", YELLOW, 

CYAN); 

TTY.PUT 

(11, 

19, 







II 








", YELLOW, 

CYAN) 

TTY.PUT 

( 

3, 

22, 

If 





tt 

f 

YELLOW, 

RED) 

t 







TTY.PUT 

( 

4, 

22, 

tt 


Required 

Inputs 

Continued 

It 

f 

BRIGHT WHITE 

, RED); 






TTY.PUT 

( 

5, 

22, 

tt 





It 

f 

YELLOW, 

RED) 

9 







TTY.PUT 

( 

6, 

22, 

It 

Press enter 

to choose default or 

tl 

f 

YELLOW, 

RED) 








TTY.PUT 

( 

7, 

22, 

tt 

any 

other key to input new value. 

II 

f 

YELLOW, 

RED) 








TTY.PUT 

( 

6, 

' 22 , 

tt 

All 

values must be 

inputted as 

II 

9 

YELLOW, 

RED) 








TTY.PUT 

( 

7, 

' 22 , 

t1 

floats. Examples: 5 

.0 or 2.0E-3 

tl 

9 

YELLOW, 

RED) 








TTY.PUT 

( 

8, 

22, 

It 


Do not input 0.8 

as .8 !!! 

It 

9 

BRIGHT WHITE 

, RED) ; 







88 








TTY.PUT ( 9, 22 
YELLOW, RED); 



end INPUT_CONT_MSG; 
procedure OUTPUT_MSG is 
begin 

TTi.CLEAR_SCREEN; 

TTY.PUT ( 1, 26, " ”, YELLOW, CYAN); 

TTY.PUT ( 2, 26, " ", YELLOW, CYAN); 

TTY.PUT ( 2, 53, " ", YELLOW, CYAN); 

TTY.PUT { 3, 26, " ", YELLOW, CYAN); 

TTY.PUT ( 2, 28, " Inputs => Outputs ", BRIGHT_WHITE, RED) 

end OUTPUT_MSG; 

procedure OUTPUT_CONT_MSG is 

begin 

TTY.CLEAR_SCREEN; 

TTY.PUT { 1, 26, " 

TTY.PUT ( 2, 26, " ", YELLOW, CYAN); 

TTY.PUT ( 2, 53, " ", YELLOW, CYAN); 

TTY.PUT ( 3, 26, " ", YELLOW, CYAN); 

TTY.PUT ( 3, 53, " ", YELLOW, CYAN); 

TTY.PUT ( 4, 26, " 

TTY.PUT ( 2, 28, " Inputs *> Outputs 
TTY.PUT ( 3, 28, " Continued 

end OUTPUT_CONT_MSG; 

procedure EXIT_MSG is 

begin 



TTY.CLEAR SCREEN; 


TTY.PUT 

(11, 

18, 

It 

It 

f 

YELLOW, 

CYAN); 


TTY.PUT 

(11, 

58, 

It 

II 

f 

YELLOW, 

CYAN); 


TTY.PUT 

(12, 

18, 

11 

II 

t 

YELLOW, 

CYAN); 


TTY.PUT 

(12, 

58, 

It 

II 

9 

YELLOW, 

CYAN); 


TTY.PUT 

(13, 

18, 

It 

II 

9 

YELLOW, 

CYAN); 


TTY.PUT 

(13, 

58, 

It 

II 

9 

YELLOW, 

CYAN); 


TTY.PUT 

( 9, 

18, 

It 




II 

YELLOW, 

CYAN) 







TTY.PUT 

(10, 

CD 

It 




II 

YELLOW, 

CYAN) 

r 






TTY.PUT 

(14, 

18, 

It 




II 

f 

YELLOW, 

CYAN) 







TTY.PUT 

(15, 

18, 

It 




It 

9 

YELLOW, 

CYAN) 







TTY.PUT 

(11, 

21, 

It 




", YELLOW, 


RED) ; 


89 





YELLOW, 
YELLOW, 

end EXIT_MSG; 
end FINOPT PICTURES; 


TTY.PUT (12, 21, " Thank you for using FINOPT !!! 

RED) ; 

TTY.PUT (13, 21, " 

RED) ; 


9U 





Title 


EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS: 
A COMPUTER OPTIMIZATION 

— Author : John Reynold Gensure 

— Date : June 1992 

package FINOPT_SINGLE is 


procedure 

CYLINDRICAL_ 

NO OPT(UNITS 


in 

INTEGER; 



CONVERT DIST 


in 

FLOAT; 



DIAMETER 


in 

out FLOAT; 



DIAMETER UNITS 


in 

STRING; 



HEIGHT 


in 

out FLOAT; 



HEIGHT UNITS 


in 

STRING; 



H 



in 

out FLOAT; 



H 

UNITS 


in 

STRING; 



k‘ 



in 

out FLOAT; 



K 

UNITS 


in 

STRING; 



t' 

"ambient 


in 

out FLOAT; 



T* 

"wall 


in 

out FLOAT; 



t‘ 

"units 


in 

STRING; 



q' 



in 

out FLOAT; 



Q 

units 


in 

STRING); 

procedure 

CYLINDRICAL_ 

GIVEN VOL(UNITS 



in 

INTEGER; 



CONVERT DIST 


• 

in FLOAT; 




VOLUME 


: 

in out 

FLOAT; 



VOLUME UNITS 


, 

in STRING; 




DIAMETER 


; 

in out 

FLOAT; 



DIAMETER UNITS 


• 

in STRING; 




HEIGHT 


t 

in out 

FLOAT; 



HEIGHT UNITS 


• 

in STRING; 




H 


: 

in out 

FLOAT; 



H UNITS 


• 

in STRING; 




K 


: 

in out 

FLOAT; 



K UNITS 


• 

in STRING; 




T_AMBIENT 


: 

in out 

FLOAT; 










T_WALL 


: 

in out 

FLOAT; 










T UNITS 


: 

in STRING; 




Q 


i 

in out 

FLOAT; 



Q_UNITS 


• 

in 

STRING); 








procedure CYLINDRICAL_GIVEN_Q(UNITS 


CONVERT_DIST 

DIAMETER 


FLOAT; 


DIAMETER UNITS 


in INTEGER; 
in FLOAT; 
in out 

in STRING; 


91 






HEIGHT 

; 

in 

out 

FLOAT; 

HEIGHT_UNITS 

; 

in 

STRING; 


H 

: 

in 

out 

FLOAT; 

H UNITS 

. 

in 

STRING; 


K 

: 

in 

out 

FLOAT; 

K UNITS 

; 

in 

STRING; 


T_AMBIENT 

: 

in 

out 

FLOAT; 

T_WALL 

: 

in 

out 

FLOAT; 

T UNITS 

; 

in 

STRING; 


Q 

: 

in 

out 

FLOAT; 

Q UNITS 

2 

in 

STRING); 


procedure 

RECTANGULAR_ 

NO OPT(UNITS 


in 

INTEGER; 


CONVERT_DIST 


in 

FLOAT; 



LENGTH 


in 

out FLOAT; 



LENGTH UNITS 


in 

STRING; 



HEIGHT 


in 

out FLOAT; 



HEIGHT_UNITS 


in 

STRING; 



WIDTH 


in 

out FLOAT; 



WIDTH UNITS 


in 

STRING; 



H 


in 

out FLOAT; 



H UNITS 


in 

STRING; 



K 


in 

out FLOAT; 



K UNITS 


in 

STRING; 



T AMBIENT 


in 

out FLOAT; 



T WALL 


in 

out FLOAT; 



T UNITS 


in 

STRING; 



Q 


in 

out FLOAT; 



Q_UNITS 


in 

STRING); 

procedure 

RECTANGULAR_ 

_GIVEN_VOL(UNITS 


: 

in 

INTEGER; 


CONVERT_DIST 


; 

in FLOAT; 



VOLUME 


: 

in out 

FLOAT; 


VOLUME UNITS 


; 

in STRING; 



LENGTH 


: 

in out 

FLOAT; 


LENGTH UNITS 


; 

in STRING; 



HEIGHT 


: 

in out 

FLOAT; 


HEIGHT_UNITS 


: 

in STRING; 



WIDTH 


; 

in out 

FLOAT; 


WIDTH UNITS 


; 

in STRING; 



H 


: 

in out 

FLOAT; 


H UNITS 


; 

in STRING; 


92 






K 


: in out 

FLOAT; 

K UNITS 


: in STRING 


T_AMBIENT 


: in out 

FLOATY- 





T_WALL 


; in out 

FLOAT; 





T UNITS 


: in STRING 


Q 


: in out 

FLOAT; 

QJJNITS 


: in 

STRING); 




procedure 

RECTANGULAR GIVEN Q(UNITS 


in INTEGER; 


CONVERT DIST 

: 

in FLOAT; 


LENGTH 

: 

in out 

FLOAT; 

LENGTH UNITS 

• 

in STRING; 


HEIGHT 

: 

in out 

FLOAT; 

HEIGHT UNITS 

• 

in STRING; 


WIDTH 


in out 

FLOAT; 

WIDTH UNITS 

• 

in STRING; 


H 

: 

in out 

FLOAT; 

H UNITS 

» 

in STRING; 


K 

: 

in out 

FLOAT; 

K UNITS 

• 

in STRING; 


TJVMBIENT 

: 

in out 

FLOAT; 





TJWALL 

: 

in out 

FLOAT; 





T UNITS 

: 

in STRING; 


Q 

; 

in out 

FLOAT; 

Q UNITS 

. 

in STRING) ; 


end FINOPT SINGLE; 


93 




— Title : EXTENDED SURFACE HEAT SINKS FOR ELECTRONIC COMPONENTS: 

: A COMPUTER OPTIMIZATION 

— Author : John Reynold Censure 

-- Date : June 1992 

with TEXT_IO, COMMON_DISPLAy_TYPES, TTY, CURSOR, FINOPT_COMMON, 

GENERIC_ELEMENTARY_FUNCTIONS, FINOPT_PICTURES; 

use TEXT_IO, COMMON_DISPLAY_TYPES, FINOPT_COMMON; 

package body FINOPT_SINGLE is 

package FLOAT_INOUT is new FLOAT_IO(FLOAT); 
package MY_ELEMENTARY_FUNCTIONS is 

new GENERIC_ELEMENTARY_FUNCTIONS(FLOAT); 
use FLOAT_INOUT, MY_ELEMENTARY_FUNCTIONS; 

procedure CYLINDRICAL_NO_OPT(UNITS 

CONVERT_DIST 
DIAMETER 
DIAMETER_UNITS 
HEIGHT 
HEIGHT_UNITS 
H 

H_UNITS 
K 

K_UNITS 
T_AMBIENT 
T_WALL 
T_UNITS 
Q 

Q_UNITS 

NUMBER_OUT 
STRING(1..10) ; 

CHAR : CHARACTER; 

PAUSE : INTEGER; 

PERIMETER, AREA, M, EFFICIENCY, 

DELTA_T, T_TIP : FLOAT; 

PI : constant ;= 

3.1415<’_26535_89793_23846_26433_e3279_50288_41972 ; 
begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT(DIAMETER, "Diameter of the cylindrical spine", 33, 
DIAMETER_UNITS, 2, 14); 

GET_INPUT(HEIGHT, "Height of the cylindrical spine", 31, 
HEIGHT UNITS, 2, 15); 


: in INTEGER; 

: in FLOAT; 

: in out FLOAT; 
: in STRING; 

: in out FLOAT; 
: in STRING; 

: in out FLOAT; 
: in STRING; 

: in out FLOAT; 
: in STRING; 

: in out FLOAT; 
: in out FLOAT; 
: in STRING; 

: in out FLOAT; 
: in STRING) is 


94 







if (UNITS = 2) then 

GET_INPUT{H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 19, 16); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 17, 17); 
else 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 13, 16); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 
K_UNITS, 11, 17); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 

T_UNITS, 5, 18); 

GET_INPUT(T_WALL, "Wall Temperature”, 16, 

T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) 


PERIMETER := PI*DIAMETER/CONVERT_DIST; 

AREA := (PI*((DIAMETER/C0NVERT_DIST)**2))/4.0; 

M := SQRT((H*PERIMETER)/(K*AREA)); 

DELTA_T ;= T_WALL-T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT DIST); 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 7, 1, "Diameter of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, DIAMETER, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, DIAMETER_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Height of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Convection heat transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, H_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Thermal conductivity of material, k 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Ambient Temperature 


II 


r 


95 







YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (14, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT (16, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 


TTY.GET 

(PAUSE, 

CHAR); 

- j - j - - , 




end CYLINDRICAL_NO_ 

_OPT; 





procedure 

CYLINDRICAL GIVEN 

_VOL(UNITS 

• 

in 


INTEGER; 



CONVERT DIST 

• 

in 

FLOAT; 




VOLUME 

: 

in 

out 

FLOAT; 



VOLUME_UNITS 

• 

in 

STRING; 




DIAMETER 

: 

in 

out 

FLOAT; 



DIAMETER UNITS 

• 

in 

STRING; 




HEIGHT 

: 

in 

out 

FLOAT; 



HEIGHT UNITS 

. 

in 

STRING; 




H 

: 

in 

out 

FLOAT; 



H UNITS 

• 

in 

STRING; 




K 

: 

in 

out 

FLOAT; 



K UNITS 

• 

in 

STRING; 




T_AMBIENT 

: 

in 

out 

FLOAT; 



T_WALL 

• 

in 

out 

FLOAT; 










T UNITS 

: 

in 

STRING; 




Q 

; 

in 

out 

FLOAT; 



Q_UNITS 

: 

in 

STRING) 


is 


96 






NUMBER_OUT : 

STRING(1..10); 

CHAR : CHARACTER; 

PAUSE : INTEGER; 

PERIMETER, AREA, M, EFFICIENCY, 

DELTA_T, T_TIP : FLOAT; 

PI : constant := 

3.14159 26535 89793 23846 26433 83279 50288 41972 ; 


begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT(VOLUME, "Volume of the cylindrical spine", 31, 
VOLUME_UNITS, 4, 14); 
if (UNITS = 2) then 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 19, 15); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 
K_UNITS, 17, 16); 
else 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 13, 15); 

GET_INPUT(K, "Thermal conductivity of material, )t", 35, 
K_UNITS, 11, 16); 
end if; 


GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 

T_UNITS, 5, 17); 

GET_INPUT(T_WALL, "Wall Temperature", 16, 

T_UNITS, 5, 18); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) 


DIAMETER := CONVERT_DIST*1.5031*(H/K*(VOLUME 
/CONVERT_DIST**3)**2)**(0.2) ; 

HEIGHT ;= CONVERT_DIST*0.5636*((VOLUME 
/CONVERT_DIST**3)*(K/H)**2)**(0.2); 

PERIMETER := PI*DIAMETER/CONVERT_DIST; 

AREA := (PI*((DIAMETER/CONVERT_DIST)**2))/4.0; 

M := SQRT((H*PERIMETER)/(K*AREA)); 

DELTA_T := T_WALL-T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY := (TANK(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT_DIST)); 


97 








Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHTJWHITE, GREEN); 

TTY.PUT ( 7, 1, "Volume of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, VOLUME, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, VOLUME_UNITS, YELLOW, BLACK); 

TTY.PUT { 8, 1, "Convection heat transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, H_UNITS, YELLOW, BLACK); 

TTY. PUT ( 9, 1, "Thermal conductivity of material, )c 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3) ; 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, T_UNITS, YELLOW, BLACK); 

TTY. PUT (13, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT (15, 1, "Optimum diameter of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, DIAMETER, 4, 3); 

TTY.PUT (15, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (15, 59, DIAMETER_UNITS, YELLOW, ’ BLACK); 

TTY.PUT (16, 1, "Optimum height of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY. PUT (16, 59, HEIGHr_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUt, YELLOW, BLACK); 

TTY.PUT (17, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3) ; 

TTY.PUT (19, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 


98 







TTY.GET (PAUSE, CHAR); 
end CYLINDRICAL_GIVEN_VOL; 
rocedure CYLINDRICAL GIVEN Q(UNITS 


FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

is 

NUMBER_OUT 
STRINGd. .10) ; 

CHAR 

PAUSE 

PERIMETER, AREA, M, 
DELTA_T, T_TIP 

PI ; constant := 
3.14159_26535_e9793_23846 

begin 


CONVERT_DIST 

DIAMETER 

DIAMETER_UNITS 

HEIGHT 

HEIGHT_UNITS 

H 

H_UNITS 

K 

K_UNITS 

T_AMBIENT 

T_WALL 

T_UNITS 

Q 

Q UNITS 


EFFICIENCY, 


26433 83279 50288 41972 


: in INTEGER; 
: in FLOAT; 

: in out 

: in STRING; 

: in out 

: in STRING; 

: in out 

: in STRING; 

: in out 

: in STRING; 

: in out 

: in out 

: in STRING; 

: in out 

: in STRING) 


: CHARACTER; 
: INTEGER; 


: FLOAT; 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 
if (UNITS = 2) then 

GET_INPUT(Q, "Heat transferred away by the fin, q", 35, 
Q_UNITS, 6, 14); 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 19, 15); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 
K_UNITS, 17, 16); 
else 

GET INPUT(Q, "Heat transferred away by the fin, q", 35, 


99 





Q_UNITS, 1, 14); 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 13, 15); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 
K_UNITS, 11, 16); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 

T_UNITS, 5, 17); 

GET_INPUT(T_WALL, "Wall Temperature", 16, 

T_UNITS, 5, 18); 

TTY.PUT (23, 27, " Press any )cey to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) 


DIAMETER := CONVERT_DIST*0. 9165* ((Q**2) 

/(H*K*((T_WALL-T_AMBIENT)**2)))**(1.0/3.0) ; 

HEIGHT := CONVERT_DIST*0.4400*{(Q*K) 

/((H**2)*(T_WALL-T_AMBIENT)))**(1.0/3.0); 

PERIMETER := PI*DIAMETER/CONVERT_DIST; 

AREA := (PI*((DIAMETER/CONVERT_DIST)**2))/4.0; 

M := SQRT((H*PERIMETER)/(K*AREA)); 

DELTA_T := T_WALL-T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

T TIP ;= T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 7, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Convection heat transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, H_UNITS, YELLOW, BLACK); 

TTY. PUT ( 9, 1, "Thermal conductivity of material, )c 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Wall Temperature 
YELLOW, BLACK); 


100 







PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 35, " Outputs BRIGHT_WHITE, GREEN); 

TTY. PUT (15, 1, "Optimum diameter of t)ie cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, DIAMETER, 4, 3); 

TTY.PUT (15, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (15, 59, DIAMETER_UNITS, YELLOW, BLACK); 

TTY.PUT (16, 1, "Optimum height of the cylindrical spine 
YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIF, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 

end CYLINDRICAL GIVEN Q; 


procedure RECTANGULAR NO OPT(UNITS 


in 

INTEGER; 


CONVERT DIST 


in 

FLOAT; 


LENGTH 


in 

out FLOAT; 


LENGTH UNITS 


in 

STRING; 


HEIGHT 


in 

out FLOAT; 


HEIGHT UNITS 


in 

STRING; 


WIDTH 


in 

out FLOAT; 


WIDTH UNITS 


in 

STRING; 


H 


in 

out FLOAT; 


H UNITS 


in 

STRING; 


K 


in 

out FLOAT; 


K UNITS 


in 

STRING; 


T AMBIENT 


in 

out FLOAT; 


T WALL 


in 

out FLOAT; 


T UNITS 


in 

STRING; 


Q 


in 

out FLOAT; 


Q_UNITS 


in 

STRING) is 

NUMBER OUT 


: 



STRINGd. .10) ; 





CHAR 


5 

CHARACTER; 

PAUSE 


: 

INTEGER; 

PERIMETER, 

AREA, M, EFFICIENCY, 




DELTA_T, T_ 

_TIP 

; 

FLOAT; 


101 





begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT{LENGTH, "Length of the rectangular fin", 29, 
LENGTH_UNITS, 2, 14); 

GET_INPUT(HEIGHT, "Height of the rectangular fin", 29, 
HEIGHT_UNITS, 2, 15); 

GET_INPUT(WIDTH, "Width of the rectangular fin", 28, 
WIDTH_UNITS, 2, 16); 
if (UNITS = 2) then 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 19, 17); 

GET_INPUT(K, "Thermal conductivity of material, )c", 35, 
K_UNITS, 17, 18); 
else 


GET_INPUT(H, 
H_UNITS, 13, 
GET_INPUT(K, 
K_UNITS, 11, 
end if; 


"Convection heat transfer coefficient, h", 39, 

17) ; 

"Thermal conductivity of material, k", 35, 

18) ; 


GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 

T_UNITS, 5, 19); 

GET_INPUT(T_WALL, "Wall Temperature", 16, 

T_UNITS, 5, 20); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length » Width 


PERIMETER := 2.0*-LENGTH/CONVERT_DIST; 

AREA ;= (WIDTH/CONVERT_DIST)*(LENGTH/CONVERT_DIST); 

M := SQRT((H*PERIMETER)/(K*AREA)); 

DELTA_T := T_WALL'T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 
TTY.PUT ( 7, 1, "Length of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER OUT, LENGTH, 4, 3); 

TTY.PUT ( 7 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Height of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER OUT, HEIGHT, 4, 3); 


102 










TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Width of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Convection heat transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, H_UNITS, YELLOW, BLACK); 

TTY. PUT (11, 1, "Thermal conductivity of material, Ic 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3); 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (13, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (13, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (13, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (15, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT (17, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3) ; 

TTY.PUT (19, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


end RECTANGULAR NO OPT; 


procedure RECTANGULAR_GIVEN_VOL(UNITS 
INTEGER; 

CONVERT_DIST 

VOLUME 

FLOAT; 

VOLUME_UNITS 

LENGTH 

FLOAT; 

LENGTH UNITS 


: in 

: in FLOAT; 

: in out 

: in STRING; 
: in out 

: in STRING; 


103 








HEIGHT 

: in 

out 

FLOAT; 


HEIGHT UNITS 

: in 

STRING; 


WIDTH 

: in 

out 

FLOAT; 


WIDTH UNITS 

: in 

STRING; 


H 

: in 

out 

FLOAT; 


H UNITS 

: in 

STRING; 


K 

: in 

out 

FLOAT; 


K UNITS 

: in 

STRING; 

FLOAT; 

T_AMBIENT 

: in 

out 

FLOAT; 

T_WALL 

: in 

out 


T UNITS 

: in 

STRING; 


Q 

: in 

out 

FLOAT; 


Q_UNITS 

: in 

STRING) 

is 

NUMBER_OUT 


: 



STRING(1..10); 


CHAR 


: CHARACTER; 

PAUSE 


: INTEGER; 

PERIMETER, 
DELTA T, T 

AREA, M, EFFICIENCY, 

TIP, AREA PROFILE 

: FLOAT; 


begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 

GET_INPUT(VOLUME, "Volume of the rectangular fin", 29, 
VOLUME_UNITS, 4, 14); 

GET_INPUT(LENGTH, "Length of the rectangular fin", 29, 
LENGTH_UNITS, 2, 15); 
if (UNITS = 2) then 

GET_INPUT(H, "Convection heat transfer coefficient, 
H_UNITS, 19, 16); 

GET_INPUT(K, "Thermal conductivity of material, Ic", 
K_UNITS, 17, 17); 
else 


GET_INPUT(H, 
H_UNITS, 13, 
GET_INPUT(K, 
K_UNITS, 11, 
end if; 


"Convection heat transfer coefficient, 
16) ; 


"Thermal conductivity of material. It", 
17) ; 


GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 
T_UNITS, 5, 18); 

GET INPUT(T_WALL, "Wall Temperature", 16, 


h", 

35, 


h", 

35 , 


39, 


39 , 


104 








T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length >> Width 


AREA_PROFILE := (VOLUME/(CONVERT_DIST**3)) 

/(LENGTH/CONVERT_DIST); 

WIDTH := CONVERT_DIST*0.9977 
*((AREA_PROFILE**2)*H/K)**(1.0/3.0); 

HEIGHT := CONVERT_DIST*1.0023 
*(AREA_PROFILE*K/H)**(1.0/3.0); 

PERIMETER := 2.0*LENGTH/CONVERT_DIST; 

AREA := (WIDTH/CONVERT_DIST)*(LENGTH/CONVERT_DIST); 

M := SQRT((H*PERIMETER)/(K*AREA)); 

DELTA_T := T_WALL-T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY ;= (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 7, 1, "Volume of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, VOLUME, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, VOLUME_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Length of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, LENGTH, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Convection heat transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, H_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Thermal conductivity of material, k 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3) ; 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_WALL, 4, 3); 

TTY.PUT (12, 48, NUMBER OUT, YELLOW, BLACK); 


105 









TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (14, 35, " Outputs ”, BRIGHT_WHITE, GREEN); 

TTY.PUT (16, 1, "Optimum height of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "Optimum width of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT (18, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (18, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT (19, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3) ; 

TTY.PUT (19, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (20, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3); 

TTY.PUT (20, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (20, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


end RECTANGULAR GIVEN VOL; 


procedure 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 

FLOAT; 


RECTANGULAR GIVEN Q(UNITS 

; 

in 

INTEGER; 

CONVERT DIST 

; 

in 

FLOAT; 

LENGTH 

• 

in 

out 

LENGTH UNITS 

. 

in 

STRING; 

HEIGHT 


in 

out 

HEIGHT UNITS 

: 

in 

STRING; 

WIDTH 

! 

in 

out 

WIDTH UNITS 

; 

in 

STRING; 

H 

5 

in 

out 

H UNITS 

; 

in 

STRING; 

K 

; 

in 

out 

K UNITS 

: 

in 

STRING; 

T_AMBIENT 

: 

in 

out 

T_WALL 

: 

in 

out 

T UNITS 

; 

in 

STRING; 

Q 

: 

in 

out 


106 





Q UNITS 


: in STRING) 


NUMBER_OUT : 

STRINGd. . 10) ; 

CHAR : CHARACTER; 

PAUSE : INTEGER; 

PERIMETER, AREA, M, EFFICIENCY, 

DELTA_T, T_TIP : FLOAT; 

begin 


Inputs 


FINOPT_PICTURES.INPUT_MSG; 
if (UNITS = 2) then 

GET_INPUT(Q, "Heat transferred away by the fin, q", 35, 
Q_UNITS, 6, 14); 
else 

GET_INPUT(Q, "Heat transferred away by the fin, q", 35, 
Q_UNITS, 1, 14); 
end if; 

GET_INPUT(LENGTH, "Length of the rectangular fin", 29, 
LENGTH_UNITS, 2, 15); 
if (UNITS = 2) then 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 19, 16); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 17, 17); 
else 

GET_INPUT(H, "Convection heat transfer coefficient, h", 39, 
H_UNITS, 13, 16); 

GET_INPUT(K, "Thermal conductivity of material, k", 35, 
K_UNITS, 11, 17); 
end if; 

GET_INPUT(T_AMBIENT, "Ambient Temperature", 19, 

T_UNITS, 5, 18); 

GET_INPUT(T_WALL, "Wall Temperature", 16, 

T_UNITS, 5, 19); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN); 
TTY.GET (PAUSE, CHAR); 


Calculations (Assume Tip is Insulated) and Length » Width 


WIDTH := CONVERT_DIST*(0.6321/(H*K)) 

*(((Q/(LENGTH/CONVERT_DIST))/(T_WALL-T_AMBIENT))**2); 
HEIGHT := CONVERT_DIST*0. 7978 

*(Q/(LENGTH/CONVERT_DIST))/(H*(T_WALL-T_AMBIENT)); 
PERIMETER := 2.0*LENGTH/CONVERT_DIST; 

AREA := (WIDTH/CONVERT_DIST) * (LENGTH/C014VERT_DIST) ; 

M := SQRT((H*PERIMETER)/(K*AREA)) ; 


107 







DELTA_T := T_WALL-T_AMBIENT; 

Q := K*AREA*M*DELTA_T*TANH(M*HEIGHT/CONVERT_DIST); 
EFFICIENCY := (TANH(M*HEIGHT/CONVERT_DIST)) 

/(M*HEIGHT/CONVERT_DIST); 

T TIP := T AMBIENT+(DELTA T/COSH(M*HEIGHT/CONVERT DIST)); 


Outputs 


FINOPT_PICTURES.OUTPUT_MSG; 

TTY.PUT ( 5, 36, " Inputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT ( 7, 1, "Heat transferred away by the fin, q 
YELLOW, BLACK); 

PUT (NUMBER_OUT, Q, 4, 3); 

TTY.PUT ( 7, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 7, 59, Q_UNITS, YELLOW, BLACK); 

TTY.PUT ( 8, 1, "Length of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, LENGTH, 4, 3); 

TTY.PUT ( 8, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 8, 59, LENGTH_UNITS, YELLOW, BLACK); 

TTY.PUT ( 9, 1, "Convection h^at transfer coefficient, h 
YELLOW, BLACK); 

PUT (NUMBER_OUT, H, 4, 3); 

TTY.PUT ( 9, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT ( 9, 59, H_UNITS, YELLOW, BLACK); 

TTY.PUT (10, 1, "Thermal conductivity of material, k 
YELLOW, BLACK); 

PUT (NUMBER_OUT, K, 4, 3); 

TTY.PUT (10, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (10, 59, K_UNITS, YELLOW, BLACK); 

TTY.PUT (11, 1, "Ambient Temperature 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_AMBIENT, 4, 3) ; 

TTY.PUT (11, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (11, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (12, 1, "Wall Temperature 
YELLOW, BLACK); 

PUT {NUMBER_OUT, T_WALL, 4, 3) ; 

TTY.PUT (12, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (12, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (14, 35, " Outputs ", BRIGHT_WHITE, GREEN); 

TTY.PUT (16, 1, "Optimum height of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, HEIGHT, 4, 3); 

TTY.PUT (16, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (16, 59, HEIGHT_UNITS, YELLOW, BLACK); 

TTY.PUT (17, 1, "Optimum width of the rectangular fin 
YELLOW, BLACK); 

PUT (NUMBER_OUT, WIDTH, 4, 3); 

TTY.PUT (17, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (17, 59, WIDTH_UNITS, YELLOW, BLACK); 

TTY.PUT (18, 1, "The fin efficiency 
YELLOW, BLACK); 

PUT (NUMBER_OUT, EFFICIENCY, 4, 3) ; 

TTY.PUT (18, 48, NUMBER OUT, YELLOW, BLACK); 


108 






TTY.PUT (19, 1, "The temperature at the tip 
YELLOW, BLACK); 

PUT (NUMBER_OUT, T_TIP, 4, 3); 

TTY.PUT (19, 48, NUMBER_OUT, YELLOW, BLACK); 

TTY.PUT (19, 59, T_UNITS, YELLOW, BLACK); 

TTY.PUT (23, 27, " Press any key to continue ", BLUE, CYAN) 
TTY.GET (PAUSE, CHAR); 

end RECTANGULAR_GIVEN_Q; 

end FINOPT SINGLE; 


109 







UST OF REFERENCES 


1. Janna, W. S., Engineering Heat Transfer, Prindle, Weber, and Schmidt, 
1986. 

2. Murray, W. M., "Heat Transfer through an Annular Disk or Fin of 
Uniform Thickness," Trans ASME Journal of Applied Mechanics, v. 60, 
1938. 

3. Gardner, K. A., "Efficiency of Extended Surface," Trans ASME, v. 67, 
1945. 

4. Kraus, Allan D. "Sixty-five Years of Extended Surface Technology," 
Applied Mechanics Reviews, v. 41, n. 9, September 1988. 

5. Aziz, A., "Optimum Dimensions of Extended Surfaces Operating in a 
Convective Environment," Applied Mechanics Reviews, v. 45, n. 5, May 
1992. 

6. Bar-Cohen, A., and Rohsenow, W. M., "Thermally Optimum Spacing of 
Vertical, Natural Convection Cooled, Parallel Plates," Journal of Heat 
Transfer, v. 106, February 1984. 

7. Microsoft Windows User's Guide, Microsoft Corporation, 1992. 


110 




INITIAL DISTRIBUTION UST 


1. Defense Technical Information Center 
Cameron Station 

Alexandria. VA 22304-6145 

2. Library, Code 52 

Naval Postgraduate School 
Monterey, CA 93943-5002 

3. Chairman, Code EC 

Department of Electrical and Computer Engineering 
Naval Postgraduate School 
Monterey, CA 93943-5000 

4. Professor Allan D. Kraus, Code EC/Ks 
Department of Electrical and Computer Engineering 
Naval Postgraduate School 

Monterey, CA 93943-5000 

5. Professor Matthew D. Kelleher, Code ME/Kk 
Department of Mechanical Engineering 
Naval Postgraduate School 

Monterey, CA 93943-5000 

6. LT John R. Censure 
Commanding Officer 
Pearl Harbor Naval Shipyard 
Box 400 

Pearl Harbor, HI 96860-5350 


111 






