ATTR Syntax: Attr filename [permissions] Usage : Examine or 

a f" 
on 



change the security permissions of a file Opts: -perm = turn off 
specified permission perm= turn 



AUSTRALIAN 
0S9 

NEWSLETTER 







inhibi 
s - n( 
to owi 
pw - 
Synta 
one d< 
single 
BasicO 
filenai 
CHD S 
specif 
directors 
Usage : 
Usage 
Syntax 
Syntax 
one fil 
Date ft 
specify 
: Checl 
for woi 
= save 
cluster 
print i 
Kdevn 
iilenan 
delete 
directo 

w w 

names 
executi 

— w . i * i riff i i fi n , t ^wl iiii ■! mil 

Display TcSHJWS 



.-:-■ 



.'.V.'-'^.'.V,':'.' 



specified permission -a = 

rms : d - directory file 
l^owner w - write permit 
MM read permit to public 

permit to public BACKUP 
pi Copies all data from 
&£§ error occurs s = 
Ilrites BASIC09 Syntax : 
|j|BUILD Syntax: Build 
Sglfrom standard input 
1 working directory to 
sage: Change execution 
|||Sg|jl§|| filename! filename2 

Cobbler devname 






EDITOR : 
Gordon Bentzen 
8 Odin Street 
SUNNYBANK Qld 4109 

(07) 345-5141 



x: 

Creates W current boot CONFIG 

r».-^_ tt . r> — i.- — j. — v - -a- ,_ j — *~n disks COPY 

data from 

IkaSyntax : 

Ii&i> Usage 
iHectory 
-m 
unused 

£&eyname> 

U M [-x] 

Si-*-X = 

Iflbeldir 
x: Dir 
file 
$=print 



WSSKBSBSBHM 



„|| Syntax 
Dsave [-o|i^H^^HHHfiHHHM^H^HMiiure file 
to copy all files in a directory system Opts : -b make a system 
disk by using OS9boot if present -b=<path> = make system disk 

process b 
command 
ECHO Syn 
output EI 
:t 



makdir 

Iy0i7 Siitard 

pUnted 

error messagf " r 'W^SK^BS^^m- IHilliamO 



SEPTEMBER 



Usage: Chain w^t :: fpel^ 

<devname> Usace : Initializes an OS-9 diskette Opts ; R - Ready L 

- Logical format only "disk name" 1/2 number of sides 'No of 



AUSTRALIAN 0S9 NEWSLETTER 
Newsletter of the National 0S9 User Group 



EDITOR : Gordon Bentzen 

HELPERS : Bob Devries and Don Berrie 

SUPPORT : Brisbane 0S9 Level 2 User Group. 



Welcome to the 14th edition of the Australian OS? Newsletter produced in sunny Queensland, 

This edition represents the commencement of our second subscription year and the commitment to produce future 
editions through to August 1990, Just in case the above statements don't quite add up to you? we produced two 
newsletters as a trial in 1983? being July and August? and thanks to the support of the members we commenced a 
subscription period in September 1988. 

We do hope that all members of the National 0S9 User Group have enjoyed the many articles presented over the last 
year, and that we have all learnt something new about this powerful operating system. 

At the time of writing? we have received a total of 25 subscription renewals which is more than the minimum we have 
set as being the basis for continuing this project. We a^ also confident that this number will increase. 

This edition will be mailed to all members whose name has been in our database. However) the mailing list will be 
updated at END SEPTEMBER to include only financial members. So please send your renewal now so that you don't miss 
out on future editions. 

I must praise the efforts of Bob Devries and Don Berrie and thank them both for their high quality articles 
contributed over the last year? because without their dedication to this project we would have had a lot of blank 
pages in each Newsletter. 

Also a special thanks to members of the user group who have taken the trouble to send in articles and to share 
their knowledge with us. These include George Francis? Nicholas Harentes? "Roskc" McKay? Ian Clarke? Ross Pratt? 
and Phil Frost. Thanks for your participation. 

As we have stated many times? this newsletter is intended as a medium by which we can all share in the combined 
knowledge of 0S9 and its many application programmes? and it is only by many members being willing to pass on their 
experiences that this will be achieved. 

We would like to present a question and answer series in the coming months to assist those members who are new to 
0S9 and those not so new to 0S9. So come on? let us have those curly questions. 

I have found from my own limited experience? that there is nothing like having to find the answer to a problem to 
make you learn. The only problem being that this can be very time consuming, and at times seem wasteful especially 
if someone already has the solution. We do not set ourselves up as experts by any frieans? but are willing to tackle 
any problem relating to the operating system. Having said that? I must also point out that the modification or 
debugging of commercial software packages is not our intent? as there does come a point where such a task is just 
not practical? or even possible? without the source code. 

Well that is probably enough raving for any month? so let's move on to this month's edition and I trust that your 
continued support will result in some very interesting reading in the months ahead. 

Until ne>:t month? Happy Computing. - Gordon Bentzen. 



Page 2 



AUSTRALIAN 0S9 NEWSLETTER 

The following submission from Ole Eskildsen is presented as the first of a three part series, The content of this 
series serves as an example of just what can be done with 0S9 (even with the humble Color Computer) and another 
reason why we ail need to maintain interest in this versatile Operating System, Please let us have your comments 
so that we can endeavour to cater to your needs. Remember* no feedback can be very difficult to deal with. 

Editor, 



FOURTH GENERATION LANGUAGES (4GLs) AND OS-9 
PART 1 - WHAT ARE 4 GLs AND WHAT IS AVAILABLE FOR OS-9? 



This is the first part of what I think will become 
three parts (or perhaps more which may also 
depend on your reactions to the subject) on 4GLs, 
what they are, and what is available for the OS-9 
operating system. At the end I hope to be able to 
make you a special offer to try out such a 4GL. For 
reasons of space availability in this newsletter 
I will obviously have to be fairly brief, however, 
I hope to cover the subjects sufficiently to 
benefit the general reader. The more 
experienced reader will probably find that in 
particular Part 1 does not provide him with a lot 
of new information, but please bear with me. 

In the three parts I intend to cover the following 

subjects: 

Part 1 - What Are 4GLs and What Is Available 

for OS-9? 

Part 2 - A Real 4GL Called Sculptor 

Part 3 - A Sample Application Using Sculptor 

and a Special Offer to Try It 

So, what are 4GLs? As the name implies there must 
have been first, second and third generations before 
and perhaps fifth, sixth and seventh generations to 
follow. Let us therefore briefly review the 
history of computing as it relates to software. 

Way back in the dim, dark ages of the forties the 
first computers started to appear and, as we all 
know now, the internal workings is based on the 
binary (two state) principle such as 
positive/negative, on/off and expressed 
mathematically as and 1. In order to get the 
computer to work the 'programmer" had to enter a 
long string represented by Os and Is which had the 
effect of switching the gates in the circuit on and 
off in order to finally arrive at the desired 



result. For instance, to add two numbers together 
he might have entered: '111100110011000000000000' 
This is machine language, the FIRST GENERATION. 
Little wonder you had to be a mathematics 
professor to program the early computers. Next 
someone decided to group the binary digits (bits) 
together in groups of four and use the hexadecimal 
numbering system to represent the bits so the 
string above becomes: "1111 0011 0011 0000 0000 
0000" or hex "F 3 3 0" which incidentally in 
6809 machine language means to add the value stored 
in hex address 3000 to the value in register D. This 
is somewhat easier to read, but to use it in the 
computer it was necessary to make a simple program 
that could translate the hex numbers into binary. 
Wow! Aren't you glad you don't have to program like 
that? 

The SECOND GENERATION was born when someone decided 
that the above method was a bit too cumbersome for 
his liking and came on the idea of using mnemonics to 
represent the individual machine language 
instructions, such as add, subtract, store, move 
data, etc as well as performing jumps from one 
place in the program to another perhaps depending 
on a condition that had been tested for, and so on. 
This language is of course Assembler, where 
one mnemonic instruction correspond to one machine 
language instruction. This is therefore known as a 
Mow level' programming language because it is very 
close to the way the hardware (the Central 
Processing Unit or CPU) works and that also 
accounts for the fact that Assembler language 
differs from one type of processor to another 
such as Motorola 5809 (in the CoCo) and Intel 8088 in 
the original IBM PC. Still, this was a vast 
improvement over the first generation way of 
programming but again necessitated that a program was 
developed (in the first generation language) to 



Pag© 3 



AUSTRALIAN 0S9 NEWSLETTER 



translate the programmer's Assembler language 
instructions and this program is simply known as 
"the Assembler". The add instruction shown above 
now looks like this: "ADDD $3000" in 6809 Assembler 
language which, I am sure you will agree, is a lot 
easier than the First Generation. Sometimes you 
hear a programmer say that he is programming in 
machine language. What he probably means is that 
he is programming in Assembler language and his 
program is assembled into machine language. As you 
can probably imagine this is the most effecient way 
of programming and that is the reason why most 
system functions and system software is written 
in Assembler although there is at least one 
notable exception which I will explain under Third 
Generation languages. 

The THIRD GENERATION languages came into existence 
when some programmers realized that it was too 
tedious to program in Assembler language since even 
a short program may soon run into hundreds and 
thousands of instructions. The idea was therefore 
conceived to develop a 'high level' programming 
language where one instruction may be 
translated into many machine language 
instructions. In other words, it would now be 
possible to write programs with fewer instructions 
which would mean that it could be written and 
debugged in a shorter time (fewer instructions = 
fewer potential bugs). Two of the first 3GLs were 
FORTRAN and COBOL. Other 3GLs include (yes, you 
guessed it) BASIC as well as PASCAL, RPG, PLt, and 
many others. How would you now perform the example 
instruction shown in the preceeding paragraphs? 
Well, you cannot! (At least I don't think you can 
in any of the languages mentioned.) This is why 3GLs 
are called 'high level' languages. I said in the 
previous paragraph that there was an exception and 
that is the 'C programming language, which is a 
very powerful 3GL but at the same time it allows the 
programmer to dive down to a low level close to 
the hardware whenever required and as a result C is 
also very useful for systems programming. Of course 
the 3GL cannot directly be executed by the 
processor, so a translating program, called a 
compiler, had to be developed for each language. 
This introduced a new benefit, namely that of 
portability of an application. By developing 
compilers for e.g. COBOL in Assembler language for 
many different processors it became possible to write 
a program in COBOL and then port the source program 
to different hardware and recompile it using the 
resident COBOL compiler. 



Now then, what about FOURTH GENERATION languages? 

Well, there seems to be several different 
opinions about what constitutes a 4GL, however, we 
can probably agree that it has to be even more 
powerful than a 3GL, i.e. one 4GL instruction must 
result in even more work being done by the processor. 
All of this is aimed at improving the productivity 
of the programmer so that he can churn out more 
and more solutions in as short a timeframe as 
possible. 4GLs usually have some of the following 
characteristics. 1) A powerful database management 
system (DBMS), perhaps a relational DBMS, which 
will store and retrieve the data for the 
programmer without him having to actually tell the 
system where or how to do this, thus removing an 
enormous burden from the programmer. 2) A 
powerful programming language which performs the most 
work with the least number of instructions. 3) A 
program generator of some sort whereby the 
programmer or perhaps even the end user can 
specify his requirements and the generator then 
automatically 'writes' the program (with no bugs). 
4) The ability to modify (or fine tune) a program 
generated by the program generator. It should be 
easier to learn than 3GLs and it should be possible 
for an experienced programmer to produce a desired 
result in a much shorter timeframe, some say as much 
as ten times faster than using a 3GL, this however, 
would vary from language to language, still 
it would be a considerable improvement. 

One such 4GL is SCULPTOR which I have used on and 
off for the last couple of years to develop real 
applications in that are installed and running at 
customer sites. In Part 2 I will describe some of 
the main functions of Sculptor and in Part 3 I 
will present a sample application. The Sculptor 
distributor for Australia has kindly agreed to 
provide a demo version so that you can try out the 
sample application. If you like it you can then 
obtain Sculptor either from myself or from the 
distributor. There may be other 4GLs available for 
OS-9 but I have never seen them, but I would of 
course be interested to hear about and particularly 
to try out any other 4GLs. Questions or comments 
should be addressed to: 



Ole Eskildsen 
It Monarch Street 
Kingston QLD 4114 
Tel: (07) 209 4322 



Page 4 



AUSTRALIAN OS? NEWSLETTER 



OS- 1 ? PROFILE 
A review By, Gordon Bentzen 

.ily thought af, is to organize lists of data of softE kind, 
The requirements can vary from a simple file of Najisei Address etc. to a rather complex list of variables. Sub 
Devries has features his 7 C' database in this newsletter which is a good example of some of the complexifies in 
creating a simple name and address type database. 

nany commercial database programmes have been developed for most operating system and of these* opinion as to the 
best will vary widely. "Sculptor 5 for the OS-? operating system is probably the most powerful database for the 
CeCo and perhaps could be comparaDie to many powerful databases available for P.C's running other operating 
systems. 

The purpose of this article however, is not to present views on all the available database programmes available, 
but to comment on just one of these, i.e. PROFILE. The Computerware "Profile" is available it) RS-DOS and OS-? 
versions which from a users point of view b:ce very similar, The 03-? version distributed by Tandy for the CoCo 
will run under OS-? level i only and mill format its displays to the available screens of the system. Profile will 
present a correctly formatted display in the standard 32 column screen and will also give the same pleasing results 
if the OS-? system uses an 68 column display produced by 3 WordPak H . OS-? Level 2 users should not stop reading 
i 

Profile is simple to set up ana use! and has many features which will allow the management of information in such a 
variety of ways that it should suit most requirements- Profile is ilenu driven by interactive menus which Stakes it 
extremely easy to use once ail the database structures have been defined. 

The first step of course* is to define the 'Record* format. To do this the type and size of each field must be 
decided. l^hen creating a new database? simply type in a name for the database in the opening menu. Profile will 
look in the current data directory for that name and when not found a message will advise you of this fact and give 

same. 

Field types availaDie are "- 
Type 1 = Alphanumeric 

T i i ft .— » "J — { '; - f ft : j-1 ft £ -. i \ I +■ ^nu\ir, -. -J* ft ■*• *.t : ,-i ,-i :' : i n ft— . j ♦. f i T> ". f i T ~ ,— i ; ^ ■?* ~. ft 1 i -t t- t i t 

i-j^C i. - Udl-Z iUCiQLlii -Lrri-.i-ai. '_>} S:liSl/ «U/ ay «IOij iliiiiY il3 =-U i \. SSLfi i i L 3 .' 

Type 3 = Hath (used in tt)? four normal math functions plus report totals) 
Type 4 = Derived (calculated by Profile) 



Limitations' A record may contain a maximum of 35 fields. 
Fields may contain up to 64 characters. 
The maximum capacity for any one record is 512 characters. 

Features: Up to ? different screen display formats may be defined for each database file. 
Up to ? different file access methods may be defined (sort methods) ; 
Up to ? different report formats may be defined. 
Up to 3 different levels of sorting P9r method, . 
Read "Dynacalc" files into the database. 
Save database files in "Dynacalc" format. 
Restore deleted records. 

Compress database files (this effectively removes deleted records- deleted records not restorabls), 
.af 

Mow some of the "bugs" or unexpected results, and I have not found many, 

When a record is simply deleted* it is not accessible in screen displays as one would expect- however the deleted 
record nILL be included in a report when the key field (access method) is different to the key field under which 
the deletion was made. The only sure way of excluding deleted records from reports is to compress the database 
file prior to running reports. Perhaps this bug is a predictable result when you think about it, but it has caught 
me more than once. 



iA '-) '<::! .J 



AUSTRALIAN 0S9 NEWSLETTER 



Reports offer the option of Entering a "selection criteria' at report r\ir\ timei which can be very useful. The 
selection criteria say include all the usual logical operators of =, <, >» which are not case sensitive in alpha 
fields. The selection criteria must be based on the current key field ^the current access method's primary field), 

I have noted that Profile stores all the defined screen, report and other format files? in fact all files -eiarec 
r o a database^ under a directory, The directory name is the name given at creation of the database, Profile uii 1 1 
automatically create this directory and sets the "pe" (public execute) atfridute off. This allocs Profile to 
distinguish its own database directories from other normal directories which may be on the same disk. 

*hile this may not be a foolproof method? it does seem to work as desired most of the time. The database may of 
course be copied under OS-9 in the normal way of makdir etc. If you use this method and want Profile to read the 
directory as the name of a database file, you mill need to set the pe attribute off, e.g. aftr filename -pe 

Conclusions^ OS-9 Profile is very flexible and easy to use and uji 1 1 alloy a database to be set up with only a 
little practice. The limitation of 512 characters in any one record may be a problem for a complex database, 
however I have found that all my applications on the CoCo Are comfortably accommodated within this limit, 

So, if you do not ha\'e a copy of 03-9 Profile, I suggest a phone around of your local Tandy stores and you say be 
lucky enough to pick up a copy. Since Intertan Australia have dropped the CoCo in Australia we have noted many 
bargains at clearance prices for CoCo hardware and software though you may have to resort to a purchase direct frois 



MLr'iir El i ~ CI iiliiC 



the U.b. Un the other hand, you may nave already picked up a copy at tne bargain prices am 
disappointed that it won't run under OS-9 Level 2. The foi lowing patches will h&e you smiling again, 



PATCH 0S9 PROFILE FOR LEVEL 2 

0S9 Profile consists of two programme modules, PROFILE^ the main database? and MGT the database management 
utilities, Both of these programme modules look for the 0S9 system module SYS50, which of course is a Level 1 

tne code so f 

The easiest way to gairti Profile and MGT is to create a modpafch script using 'Build' T Edit' or any text processor 
of your cnoice, Then load the module to be patched (e,g, Profile) into memory* and use : !1odpatch ? with tne script 
file as a command line parameter, e.g. mcdpatch patcn.profiie 

Patch_PROFILE (This is the name uncer which to create the modpatch script) 

L PROFILE 
C S9 11 12 
C m E4 27 
C 1227 31 32 
C 1228 59 C? 
C 1229 26 34 
C 122A F5 13 
C 122B 35 9F 
C 122C 79 99 
V 

(The modpatch script file should contain the above boidtype lines and be located in the current data directory) 

Now, load /dl /dads/profile (this line assumes that ihe Original 'Profile 3 is loaded from /dl) 
mdpatch patch.profile 
save /dfl/cads/profile profile 

Tkg* ii- -.1 1 +■ k .-t, in i-j i j" 4- .—v i 4- Tkn ir.rirt I 1 nc ' ?p2,"i' ' rr.ri rii-i ^ — r* K ' inri • r^iin' rr.iir-T- :-,i-i ni T-r.g'j; -, r% Tr.rj n-qv. i s .— .\n ■'->.,—. .— - . : ■« yi ,-ir-. -i- 

iisai. i=- an iii?< 3 .i = iu lii rijc !:l0uuicS iOoLi ?>!u-CiMCi i. »_ii 3^0 bdV e ii:u:i jjc SiiiiS; ^:-> >nBi:rd-i -J -j- . :;-z vjircili 

-iinr'ifiqn n'*er*1*li ' i J rllS / j~ it, J C * « fkn ,-n \t -i it. n "i .-> jhnun I •' C" a-.jfl-' .— s-irr.--.r- i,n fk rkn 1 Q\;b1 - : Unite i r.nir.rni- L'l i.-tt;"! -—•■.'. ■--..-. r-.vr, f"'.C'Q 

-AtfCiiLiUH un SLi.0i y i ,' uu/ LiiiuS i-i -.-ic c-iCiiriHic dLrUi-c.-t jdVc uulfjcz- iifiUH wt£ i-t'iti i. L'uVtiL^s;!t!; * ^« = i. tr;:- ? us .■ ;_■;;! ■•.■■-•< 



age 



AUSTRALIAN 039 NEWSLETTER 






Level i trney are ioenticau 

The procedure for patching M5T ail I require similar co^anda, '^GT 7 should be su h - f ^>^^ f ™ ==--^ ^^^^^ 
7 profile 3 , Here is the ;r>Ddpatch script to paten nGT. 

Patch J1ST 

L KST 

C 3A S8 43 
C 543 31 32 
C 544 59 C9 
C 545 26 34 
C 546 F5 13 
C 547 35 9F 
C 548 78 89 
V 

NcMi load /dl/cnds/jngt 
aodpatch patch jag t 
save /dB/cffids/agt 



gdooggogggOOCKiOOOOOOggogcgggo 

A Database in C 
By Bcb Devries 

Included in this month's section of the cede for the datadass is the functions insert and usageO? 

Database record structure* n)u uinen everything is correct* it calls the saveO *unct.vcn to save it to the disk. The 

:ir -nni 1 \ riinrr^ pr, pr. ill li^rppi Mr,r.r. -. r~ r—. it. it, -i T-. j-i 'i i t-i i-i ?-,v. -u^r"!*^ i r- nnr? - .! ;t^ + n-jinri ^" rp j * .— V ?*. i-i u^rttf, i,ik -, — *• ^ — { * .-•■ ■ . -. ---v ,^ n ^ -- — . t —- ~i- '■ -r .— 

U=.avj&\ ■ !U!iLiiw:H L':ij.'J JjfiG iiJIiCH O. Li." ■•■(■,□ I ) L: 1 1 1 ; = =■ ) :■_?■ i = Cli'.l-'ui! ICrEGl L^il: L-:!T LIZ"- MJi-Ci. :?U i-- i L' -i!-_-;,--j5 J : ■ U -i.U i i. =• 

trie progrsniiTje. 

Next month ui II be the last installment of the database^ in anion I aill be presenting the satchi) and 
as>endu functions, and also give you seine details on compiling the full code, Of course? any errors that cro? u? 

i.i-. 1 1 r-L^ ;Hri'/,nrrni"l -. r- - r. n r 3 ^Q-Jirr.-t r- c 3 n H i.ik^n 1:1-1.11 137 rr.r-. ?/t. .— ,1.1 ■$- t. -, +■ r.-.rr.riTi-. i ■np :.ir3pk i.ir.nnn T k.— .1-1.— 1 : 1 ni : 1,11 1 1 K-iiia +I'r L 

i-iii Gc aLiu; ~ z-z-Si-:- a=- z-r*ai_^ ;--=! i-fi i - i anu uJ;it?i ^u--; i^L ;nc -i!;-_'Uf u!ai =■:_■:::•=! '. i.i • -9 iicMi. a/iysi'ji i ■i'-'j-'- --j'wiJ !l!ii ■ iidvS ■ ul; 

stage ujith the ; -r ; switch, Weill uiithout further ado. here's this month's piece of code. 

insert O 

/'* this routine inputs data ivAo the Ball structure and keeps repeating */ 

/* until the user is satisfieo it is correct* and then saves it. */ 

/* it returns a long value for the record number and requires no parens */' 

/* stmcpyO uas used to input the strings to stop overflow of fields */ 

i 

char ch? 

char tsRtpstr[2I3; /# teinporary string for data input */ 

int temprec = l; /# temporary record nuniber t/ 

int replace = FALSE; /* flag to signal usrite to end of file */ 

ahile (TRUE) 
{ 

scrniDask ■( ) ; /* display eiTipty screen ^ask */ 

cursor (14? 5); 

gets(tespstr); 

strncpy i uia i I . surnafnei teirtpstr , 23) « 



; c.i *~i v- i 



AUSTRALIAN OS? NEWSLETTER 

gets(fempstr); 

cursor (13, 7) ; 
gets( tempstr) ', 

strncpy (mail. street, tempstr, 23 >; 

cursor (1 1,3); 

gets(tempstr); 

strncpy(mail.city, tempstr^S) ; 

cursor(i2 T 9} ? 

gets(tempstr); 

strncpy(mail.state,tempstr,3}; 

cursor-: 15,10); 

gets(tempstr); 

mail. postcode = atai t teropstr ) ; 

cursor ( 13, 23); 

erasel in(); 

cursor ( 10,23) ; 

printfi H AIl correct ? y or n " ) ; /'* display prompt */ 

ch = '\0'; 

uhile (ich != } W) si (ch != 'Y')) 

ch = toupper(getch( ) )« 
cursor (10, 23); 
eraselm( ) ; 

if (ch == ? Y 7 ) /* at no , go dc it again */ 
break; 

if (mail.surnameOj == : 'W) /* if no valid input quit */ 

return ( temprec) : /* without saving record */ 
temprec = save( temprec. replace); /* save record and */ 
return( temprec) ; /* return record number */ 



/ 
\ 

printf( s \n\n Usage ' database <dbfile>.\n\n ii ) ; 



ooooooooooOOOOOOOOOOoooooooooo 

CALENDAR PROGRAM 
By Ole Esfcildsen 



Hsre is a little quicky irrBASICS?. This program will print a calendar to the standard output (the screen). It is 
a program I have converted from a Microsoft basic program uhich I keyed in years ago on a Tandy node! Ill (no 
not a CgCo-3) from somewhere I cannot ncu remember, In the conversion to BASICS? I didn't have to do very mucn, 
but one of the things I did ahich is not actually necessary ms to remove all the unnessary line numbers to make 
the program more readable in BASICE9. what I am telling you is that many programs that run in Microsoft BASIC caj\ 
be converted to 3A5IC39 aith very little and sometimes nil effort. Haybe someone should make that a subject of 
another article. 

To use Cal, simply place it in your execution directory together isith RunB and then type ' 

cal S 198? 

and you should see the month of August 198? on your screen. This is provided you use the Shell called ShellPIus 



age 



AUSTRALIAN 0S9 NEWSLETTER 

available from the User Group public detain library, If you use the standard Shell frcs Tandy then.., 

type: cai r3 a T J i?39 i '} 

Not very neat, don't ycu agree 7 

The syntax for using Cal is sliest the =s?ae as the UNIX Cal function, but one of the differences is that if you 
want to get the ahole year then... 

type: cal 3 1989 
If you want to print the calendar on your pointer simply- . . 

types cal 3 1939 > /p 
You could alsD redirect it to a file thusly... 

type: cal 3 193? > /dl/calendari?S9 

and then use ycur editor or yard processor to add a message, print it out and send it to your friends at the end of 
the year. 

Please enjoy it and happy computing... Cheers* Ole 



PROCEDURE Cai 

3333 (* Calendar program similar to UNIX Cal 

2327 «* By: Ole Eskildsen, 193? 

3041 £* Placed in the Public Domain and it *ay freely be copied and used 

3084 i* for non-coiiiRiercial purposes. 

32A4 (* Usage i Cal scnth year 

03EC (* if ;nonth = 3 then calendar for umois year is printed, 

23F4 -i* Note^ month parameter is iiiandatory, unlike the UNIX cousin, 

3132 

2133 PARAM nith,yr'STRIN5[4] 

3143 

3144 BIH son th, year: REAL 

214F DIM A,B,C,D,P,R:INTESEP 

216A DIM J: REAL 

0171 

2172 mGnth=VAL(mth) 

017B year=VAL(yr) 

3184 

3135 203 IF ii;cnth<3 OR month/ 12 OR year<i&30 OR year>23?9 THEN 

31AF PRINT "Usage: Cal ftonth year" 

21C8 PRINT ' Displays calendar, ;i;ay be redirected, 3 

31F3 PRINT 3 if months entire ^&ar displayed" 

3223 PRINT n Valid year range: itm-WT 

3249 PRINT 

324B END 

324D END IF 

324F 

3253 A=3 \B=0 \C=0 \D=0 \J=0 \P=0 \R=0 

3232 PRINT 

3234 

3235 C=6 



p&y& S 



AUSTRALIAN 0S9 NEWSLETTER 

328C FOR J=1633 TO year 

32?F IF J=year THEN 3213 

32AF IF J/40INTU/4) THEN 3233 

32C3 IF <J-i700)*<J-i3i3a3*<J-i?00>*(J-2iSa)*<J-22S!3j*< J-2330) = 

13 THEN 3230 

333A C=C+2 

3315 GOTO 3213 

331? 3233 C=C+I 

3327 3213 IF C<7 THEN 3233 

3339 C=C-7 

0344 3233 NEXT J 
3352 

3353 PRINT \ PRINT 
3357 

3353 3253 FOR R=i TO 12 

336B READ A$ 

3373 READ 3 

3375 IF year/4<>INT(year/4) THEN 3323 

33SE IF A$O a FEBRUARV a THEN 3323 

33A5 3=B+i 
33B3 

33B1 (* Print calendar 

33C2 3323 IF HiGnth=3 OR month=R THEN 

33DB PRINT TABU4); A$; " a ; year 

03EC PRINT ================================== ======= 

341? PRINT B SUN HON TUE wED THU FRI SAT ■ 

3446 PRINT 

3473 FOR D=i TO B 

3484 PRINT TAB(6*C+2); \ PRINT USING *I3>" 4 ; D; \ 

349F C=C+1 

34AA IF C<7 THEN 3423 

34B? PRINT s * \ 

34BF C=3 

34C6 3423 NEXT D 

34D4 PRINT 

24D6 PR INT * =========================================* 

3533 3453 FOR F=i TO 2 

3516 PRINT 

3513 3473 NEXT P 

3526 ELSE 

352A FOR D=l TO B 

353B C=Oi 

3546 IF C=7 THEN 

355? ENDIF 

355B NEXT D 

3566 ENDIF 

3568 34S3 NEXT R 

3576 3493 DATA H JANUARY B ,31, TEBRUARY e T 23, ii hARCH%31, ti APRIL%33 

05AE DATA "MAY" ,31, "JUNE ",30," JULY", 31, 3 AUGUST", 31, 3 SEPTEMBER L * 

35E7 DATA 33, 8 OCTOBER" ,31 ,' NOVEMBER 3 ,33, 'DECEHEER 6 , 31 



0617 
3613 

3619 



Kag 



