1 TX* .-1 * C't ’T*trn 


AD-A215 203 


D*'* [ntrrrd' 


' i ! 


♦Mr 


L 


TION PAGE 


uc ixrin.rno'.s 
Ifovi 'o 1 ' - .f t i rov- 


|Z 60vT ACCESSION MO 


2 (HCIMCmT S CATALOG 


i TyRE or HODS’ l RERIOD C 0 * £ RID 


Ada Compiler Validation Summary Report Holerant 
Systems, Inc, Tolerant Ada Development System, Version 2-3 
Tolerant Eternity (Host & Target), 890911W1.10135 


11 Sept. 1989 to LI Sept. 

6. RERrORHNG^RG (USDS’ Nj«si 


1. t 

WrigTTt’^Patterson AFB 
Dayton, OH, USA 


CON’ AAC1 OR GRAM MjNEiR.j) 


19901 

A 


9. RERfQRMJNG ORGANIZATION AND ADDRESS 

Wright-Patterson AFB 

Dayton, OH, USA 

10. RRDGRA* ElCM'N’. »a;:<C7 USa 
ARE* l NORA UNIT NjHiRS 

11 CON’RD.IJNG 0 r r 1CE NA“: AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 

1Z. RERuR ’ DATE 

13. BJVeTP Of”PUL'S 

14. MONITORING AGENCY nan: j, ADDRESS^ O'Ht'ini from Controlling Office) 

Wright-Patterson AFB 

Dayton, OH, USA 

IS. SECvRJTi ClRSS (o' tn,j reps'll 

UNCLASSIFIED 

IS*. g£Ck»SS’r 1CATJ0N DOWNGRADING 

K/A 


16. DISTRIBUTION STATEMENT (Of this Report) 


Approved for public release; distribution unlimited. 


17. ClS’RJB.’JOs S7*'i“:*>’ (o‘tot *br?*n tott-fO'* $ sc* 2C if o ft-e nr fro"" Rtpon) 


UNCLASSIFIED 



Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20 . AES7 RAC 1 (Con‘Pvt or I,or if ruetoo 'Oer t.Y) b, b'oci number) 


Tolerant Systems, Inc., Tolerant Ada Development System, Version 2-3, Tolerant Eternity 
under TX, 5.4.0 (Host & Target), Wright-Patterson AFB, AVCV 1.10. 


DO n '*'* 

t jam n 


1473 toiuoN o> i nov is oesoau 

S'N 0102-L(*C14-e601 


UNCLASSIFIED 



// =32 6 


SECURITY ClASSI I 1CA710N or IMIS RAGl (*NNfnC>«T« fnif-ftf’ 










Ada Compiler Validation Summary Report: 


Compiler Name: Tolerant Ada Development System, Version 2-3 

Certificate Number: 890911V1.10135 

> 

Host: Tolerant Eternity under 

TX, 5.4.0 

Target: Tolerant Eternity under 
TX, 5.4.0 

Testing Completed 11 September 1989 Using ACVC 1.10 
Customer Agreement Number: 89-06-08-T0L 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 


45433-6503 



Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 







AVF Control Number: AVF-VSR-308.0989 

89-06-08-T0L 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890911W1.10135 
Tolerant Systems, Inc. 

Tolerant Ada Development System, Version 2-3 
Tolerant Eternity 


Completion of On-Site Testing: 
11 September 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 









TABLE OF CONTENTS 

CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 


1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS. 3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED BY TOLERANT SYSTEMS, INC. 



Accession For 

NTIS CFAJcI 
DT’: TA3 
Uiit r>nounced 
Jiijt.; r l oat t on_ 


: By- 

' Distribution/ 

j Availability Codes 
! 'Avail and/or 

Diat j Special 




*1 


□ □ 


























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of,., testing this compiler using the Ada Compiler 
Validation Capability (ACVC). 'An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 11 September 1989 at San Jose CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rn. 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL - 

Wright-Patterson AFB OH 45433-6503 


1-2 









INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Biauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office^ 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December i486. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 







INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdrawn 

test 


1-4 



INlivJDUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters — for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler'. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-depenuent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the-Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable cesta. These r^sts nrr>A>ire messages that 
are examined to verify-that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 
















INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values — for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in tne suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 






CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: Tolerant Ada Development System, Version 2-3 

ACVC Version: 1.10 

Certificate Number: 890911W1.10135 

Host Computer: 

Machine: Tolerant Eternity 

Operating System: TX 

5.4.0 

Memory Size: 12 Megabytes 

Target Computer: 

Machine: Tolerant Eternity 

Operating System: TX 

5.4.0 

Memory Size: 12 Megabytes 


2-1 








CONFIGURATION INFORMATION 


Communications Network: Ethernet 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY_INTEGER, SHORT_INTEGER, and SHORT_FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 


2-2 













CONFIGURATION INFORMATION 


(3) This implementation uses no extra bits for extra precision and 
uses all exrra bits for extra range. (See test C35903A.) 

(4) Sometimes NUMERIC_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 

a.nge of the base type. (See test C45232A.) 

(5) No exception is raised when a literal operand in a fixed-point 
comparison or membership test is outside the range of the base 
type. (See test C45252A.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language, while the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46G12A..Z (26 tests).) 

(2) The method used for r oundirg to longest integer is round to 
even. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding tt integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD. INTEGER "AST and/or SYSTEM. MAX INT. 


For this implementstion: 


(1) Declaration of an array type or subtype declaration with more 

than SYSTEM.MAX INT components raises no exception. (See test 

C36003A.) 

(2) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 

array type with INTEGER'LAST + 2 components. .'See test 

C36202A.) 


(3) NUMKRIC_ERROR is raised when 'LENGTH is applied to a null 
array type with SYSTEM.MAX_INT + 2 components. (See test 

C36202B.) 


2-3 












CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 

(5) A packed tvo-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, ah 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when cheating whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


2-4 









CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B (2 tests), EA3004C..D (2 tests), and 
CA3004E..F (2 tests).) 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL 10 can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECTIO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and 0UT_FILE are supported for SEQUENTIAL_I0. 
(See tests CE2102D..E (2 tests), CE2102N, and CE2102P.) 

(4) Modes IN_FILE, 0UT_FILE, and IN0UT_FILE are supported for 
DIRECT_I0. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN FILE and 0UT_FILE are supported for text files. (See 
tests CEI102E and CE3I02I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_I0. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 

(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 

CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 


2-5 











CONFIGURATION INFORMATION 


closed. (See test CE2108A.) 

(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files when writing or reading. 
(See tests CE2107A..E (5 tests), CE2102L, CE2110B, and 
CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when writing or reading. (See 
tests CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when writing or reading. (See 
tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 


2-6 








CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 328 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 10 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1132 

1993 

17 

28 

46 

3345 

Inapplicable 

0 

6 

322 

0 

0 

0 

• 328 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

331 

137 

36 

252 

292 

300 

3345 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

21 

328 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 

WITHDRAWN TESTS 





The 

following 44 

tests were 

withdrawn 

from ACVC Version 1.10 at 

the time of 

this 

validation: 







E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 


CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 


CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 


CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 


CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 


ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 


CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


CE3301A 

CE3411B 






See Appendix D for the reason that each of these tests vas withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 328 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) C35706L..Y (14 tests) 

C35707L..Y (14 tests) C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L.,Y (14 tests) C45421L..Y (14 tests) 


3-2 








TEST INFORMATION 


C45521L..Z (15 tests) C45524L..Z (15 tests) C45621L..Z (15 tests) 
C45641L..Y (14 tests) C46012L..Z (15 tests) 

b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type LONG_FLOAT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type LONG_INTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52004D C55B07A B55B09C B86001V 

CD7101F 

d. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

e. C86001F is not applicable because, for this implementation, the 
package TEXT_I0 is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and hence 
package REPORT, obsolete. 

f. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORTFLOAT. 

h. C96005B is not applicable because there are no values of type 
DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not 

applicable because this implementation does not support size 
clauses for tasks or task types. 

m. The following 42 tests are not applicable because this 
implementation does not support an address clause when a dynamic 
address is applied to a variable requiring initialization: 


3-3 












TEST INFORMATION 


CD5003B..H (7 tests) CD5011A..H (8 tests) CD5011L..N (2 tests) 
CD5011Q CD5011R CD5012A..I (9 tests) 


CD5012L 

CD5013F 

CD5013B 

CD5013H 

CD5013D 

CD5013L 


CD5013N 

CD5013R 

CD5014T..X 

(5 tests) 

n. CE2102D is 
CREATE with 

inapplicable because this implementation 
IN_FILE mode for SEQUENTIAL_I0. 

supports 

o. CE2102E is 
CREATE with 

inapplicable because this 
0UT_FILE mode for SEQUENTIAL^ 

implementation 

10 . 

supports 

p. CE2102F is 
CREATE with 

inapplicable because this 
INOUT_FILE mode for DIRECT_I0 

implementation 

supports 

q. CE2102I is 
CREATE with 

inapplicable because this 
IN_FILE mode for DIRECT_IO. 

implementation 

supports 

r. CE2102J is 
CREATE with 

inapplicable because this 
OUT FILE mode for DIRECT 10. 

implementation 

supports 


s. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

u. CE2102P is inapplicable because this implementation supports OPEN 
with 0UT_FILE mode for SEQUENTIAL_IO. 

v. CE2102Q is inapplicable because this implementation supports RESET 
with OUTFILE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT_FILE mode for DIRECT_IO. 

x. CE2102S is inapplicable because this implementation supports RESET 
with INOUT_FILE mode for DIRECT_I0. 

y. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FILE mode for DIRECT_I0. 

z. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_I0. 

aa. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIRECT_I0. 

ab. CE2102W is inapplicable because this implementation supports RESET 
with OUT_FILE mode for DIRECT_I0. 

ac. CE3102E is inapplicable because text file CREATE with IN_FILE mode 
for text files is supported by this implementation. 


3-4 








TEST INFORMATION 


ad. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

ae. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

af. CE3102I is inapplicable because this implementation supports 

CREATE with 0UT_FILE mode for text files. 

ag. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

ah. CE3102K is inapplicable because this implementation supports OPEN 
with OUT FILE mode for text files. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
ccr. forming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 10 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A B91001H BC1303F BC3005B 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the Tolerant Ada Development System was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3-5 













TEST INFORMATION 


3.7.2 Test Method 

Testing of the Tolerant Ada Development System using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in 
which the testing was performed is described by the following designations 
of hardware and software components: 

Host computer: Tolerant Eternity 

Host operating system: TX, 5.4.0 

Target computer: Tolerant Eternity 

Target operating system: TX, 5.4.0 

Compiler: Tolerant Ada Development System, 

Version 2-3 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents oi the magnetic tape were loaded directly onto the host 
computer. 

After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Tolerant 
Eternity. Results were tranfer to another Tolerant Eternity via Ethernet 
and printed. 

The compiler was tested using command scripts provided by Tolerant Systems, 
Inc. and reviewed by the validation team. The compiler was tested using 
all default option settings except for the following: 

OPTION EFFECT 


-M Produce an executable program using the 

named main program or source root name. 


Tests were compiled, linked, and executed (as appropriate) using 2 
computers. Test output, compilation listings, and job logs were captured 
on magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-6 











TEST INFORMATION 


3.7.3 Test Site 

Testing was conducted at San Jose CA and was completed on 11 September 
1989. 


3-7 












APPENDIX A 


DECLARATION OF CONFORMANCE 


Tolerant Systems, Inc. has submitted the following 
Declaration of Conformance concerning the Tolerant Ada 
Development System. 


A-1 












DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 


Compiler Implementor: Tolerant Systems 

Ada Validation Facility: ASD/SCEL, Wright - Patterson AF3 OH 45433-6503 
Ada Compiler Validation Capability (AC7C) Version: 1.10 


Base Configuration 

Tolerant Ada Version: Version 2-3 

Development System 

Tolerant Eternity OS&VER *: TX, Release 5.4.0 
Tolerant Eternity OS&VER #: TX, Release 5.4.0 


Base Compiler Name: 

Host Architecture ISA: 
Target Architecture ISA: 


Implementor's Declaration 


I, the undersigned, representing Tolerant Systems, have implemented no deliberate 
extensions to the Ada Language Standard ANSI/MIL-STD-1815 a in the compiler listed 
in this declaration. I declare that Tolerant Systems is the owner of record of 
the Ada language compiler listed above and, as such, is responsible for 
maintaining said compiler in conformance to ANSI/MIL-STD-1815A. All certificates 
and registrations for the Ada language compiler listed in this declaration shall 
be made only in the owner's corporate name. 





Tolerant Sysnems 

Victor Maxted, Vice President of Engineering 



Owner's Declaration 


I, the undersigned, representing Tolerant Systems, take full responsibilirv for 
implementation and maintenance of the Ada compiler listed above, and agree to t: 
public disclosure of the final Validation Summary Report. I further agree to 
continue to comply with the Ada trademark policy, as defined bv the Ada Joint 
Program Office. I declare that all of the Ada language compilers listed, ar.c 
their host/target performance, are in compliance with the Ada Language Starca-d 
ANSI/MIL-STD-1815A. 


4.V 


( (j-— Ss 


Toierant Systems 

Victor Maxted, Vice President of Engineering 



Jo 



Date : 









APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the Tolerant Ada Development System, Version 2-3, as 
described in this Appendix, are provided by Tolerant Systems, Inc. Unless 
specifically noted otherwise, references in this Appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range 

-2#1.1111111111_1111111111_1111111111_1111111111 1111111111_11#E1023 .. 
2#1.1111111111_1111111111 1111111111_1111111111 1111111111 11#E1023; 
type SHORT_FLOAT is digits 6~range -2#1.11111_111 lT_l 1111_11 lTl_l 11#E12 7 .. 

2#1.11111_11111_11111_11111_111#E127; 

type DURATION is delta 2#1.0#E-14 range 
- 21100000000000000000 . 0 # .. 2 * 11111111111111111 . 11111111111111 #; 


end STANDARD; 


B-l 











ATTACHMENT II: Appendix F Criteria 

1. Implementation-Dependent Pragmas 

1.1 INLI»E_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same wav as progma IN-INE, 
indicates to the compiler that the subprogram must always be mimed. 
This pragma also suppresses the generation of a callable version of 
the routine which save code space. 

1.2 BUILT_IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined 
Ada packages, but provides no user access. It is used only to impiemen 
code bodies for which no actual Ada body can be provided, for example 
the MACHIN£_CODE package. 

1.3 F' J AR£_;ODE Pragma 

The SHARS_CODE pragma takes the name of a generic instantiation or 
a generic unit as the first argument and one of the identifiers TRUE or 
FALSE as the second argument. This pragma is only allowed immediately 
at the place of a declarative item in a declarative part or package 
specification, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies to all 
instantiations of that generic. When the first argument is the name 
of a generic instantiation the pragma applies only to the specified 
instantiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code 
generated for a generic instantiation with code generated for other 
instantiations of the same generic. When the second argument is FALSE 
each instantiation will get a unique copy of the generated code. The 
extent to which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared for the 
generic unit. 

The name pragma SHARE_BODY is also recognized by the implementation and 
has the 3ame effect as 5HARE_C0DE. It is included for comparability wi 
earlier versions of TADS. 


1.4 N0_IMAGE Pragma 

The pragma suppresses the generation of the image array used for the 
IMAGE attribute of enumeration types. This eliminates the overhead 
required to store the array in the executable image. 

1.5 EXTERNAL_NAM£ Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable 
defined in Ada and allows the user to specify a different external name 
that may be used to reference the entity from other languages. 

The pragma is allowed at the place of a declarative item in a package 
specification and must apply to an object declared earlier in the same 
package specification. 




1.6 INTERFACE OBJECT Pragma 


The INTERFACE_OBJECT pragma takes the name of a a variable defined in 
another language and allows it to be referenced directly m Ada. The 
pragma will replace all occurrences of the variable name with an externa 
reference to the second, link_aigument. The pragma is allowed at the 
place of a declarative item in a package specification and must apply 
to an object declared earlier in the same package specif icatio.n. The 
object must be declared as a scalar or an access type. The object canr.c 
be any of the following: 

a loop variable, 
a constant, 

an -'nitialized variable, 
an array, or 
a record. 


1.7 IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. 
This pragma is only allowed within a machine code procedure. 

It specifies that implicit code generated by the compiler be 
allowed or disallowed. 

A warning is issued if OFF is used and any implicit code needs 
to be generated. 

The default is ON. 


2. Implementation of Predefined Pragmas 

2.1 CONTROLLED 

This pragma is recognized by the implementation but has no effect. 

2.2 ELABORATE 

This pragma is implemented as described in Appendix 3 of the Ada RM. 

2.3 INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4 INTERFACE 

This pragma supports calls to 'C and FORTRAN functions. The Ada 
subprograms can be either functions or procedures. The types of 
parameters and the result type for functions must be scalar, access 
or the predefined type ADDRESS in SYSTEM. 

An optional third argument overrides the default link name. 

All parameters must have mode IN. Record and array objects can be passed 
by reference using the ADDRESS attribute. 

2.5 LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 


2.6 MEMORY SIZE 


B-3 











This pragma is recognized by the implementation. The implementation 
does not allow SYSTEM to be modified by means of pragmas, the SYSTEM 
package must be recompiled. 

2." 7 OPTIMIZE 

This pragma is recognized by the implementation but has r.o effect. 

2.3 PACK 

This pragma will cause the compiler to choose a non-aligned represent 
for composite types. It will not causes objects to be packed at the b 
level. 

2.9 PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.10 PRIORITY 

This pragma is implemented as described ir. Appendix B of the Ada RM. 

2.11 SHARED 

This pragma is recognized by the implementation but has no effect. 

2.12 STORAGE JJU IT 

This pragma is recognized by the implementation. The implementation 
dees not allow SYSTEM to be modified by means of pragmas, the SYSTEM 
package must be recompiled. 

2.13 SUPPRESS 

This pragma is implemented as described, except that RANGE CHECK and 
DIVISION_CHECK cannot be supressed. 

2.14 SYSTEM_NAME 

This pragma is recognized by the implementation. The implementation 
does not allow SYSTEM to be modified by means of pragmas, the SYSTEM 
package must be recompiled. 


3. Implementation-Dependent Attributes 
3.1 P'REE 

Eor a prefix that denotes an object, a program unit, a label, 
or an entry: 

This attribute denotes the effective address of the first of the 
storage units allocated to P. 

For a subprogram, package, task unit, or label, it refers to the 
address of the machine code associated with the corresponding body 

B-4 





or statement. 


For an entry for which an address clause has been given, 
it refers to the corresponding hardware interrupt. 

The attribute is of the type OPERAND defined in the package MACHINE_CCDE. 
The attribute is only allowed within a machine code procedure. 

(For a package, task unit, or entry, the 'REF attribute is not supported.) 

4. Restrictions On Representation Clauses 

4.1 Pragma PACK 

Sit packing is not supported. 

Objects and larger components are packed to the nearest whole 3TCPAGE_ r JNIT. 


4.2 Record Representation Clauses 

Record representation clause cannot specify a smaller sice for a component 
than would otherwise be occupied by the component without the use of a pragma 
PACK. 

Components clauses must be aligned on STORAGE_'JNIT boundaries. 


4.3 Address Clauses 

Address clauses are supported for variables and constants. Address clauses 
for initialized variables and objects of task types, however, are not 
supported. 


4.4 Interrupts 

Interact entries are supported for UNIX signals. The Ada for clause 
gives the UNIX signal number. 

4.5 Representation Attributes 

The ADDRESS attribute is not supported for uie following entities: 

Packages 

Tasks 

Labels 

Entries 

A meaningless value would be returned when the above attributes are used. 

4.6 Machine Code Insertions 

Machine code insertions are supported. 


4.7 Size clauses 

Size clauses are not supported for task types, floating point types and access 
types. When the component type of an array type is of composite or floating 
point type, an explicit size clause on the component type is required. 


5. Conventions for Implementation-generated Names 
There are no implementation-generated names, or 













6 . 


Interpretation of Expressions in Address Clauses 


Address clauses are supported for constants and variables. 

Interupt entries are specified with the number of the UNIX signal. 

7. Restrictions on Unchecked Conversions 
None. 


8. Restrictions on Unchecked Deallocations 
None. 


9. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as the record 
size (expressed in STCRAGE_UNITS) when the size or ELEMENT_TY?E 
exceeds that value. For example for unconstrained arrays such as string 
where ELEMENT_TYPE'SIZE is very large, MAX_REC_SI2E is used instead. 
MAX_RECCRD_SIZE is defined in SYSTEM and can be changed by a program 
before instantiating DIRECT_IO to provide an upper limit on the record 
size. In any case the maximum size supported is 1024 x 1C24 STORAGE UNIT 
bits. DIRECT_IO will raise USE_ERRCR if MAX_REC_5IZE exceeds this absolute 
limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE as the record 
size (expressed in STORAGE_UNITS) when the size of ELEMENT_TYPE 
exceeds that value. For example for unconstrained arrays such as string 
where ELEM£NT_TYPE'SIZE is very large, MAX_REC_3IZE is used instead. 
MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program 
before instantiating INTEGER_IO to provide an upper limit on the record 
size. 3£QUENTIAL__IO imposes no limit on MAX_REC_SIZE. 

The FORM parameter to TEXT_IO CREATE and OPEN has been implemented to 
provide access to additional file characteristics supported by the TX 
operating system. 


10. Implementation Limits 

The following limits are actually enforced by the implementation. It is 
not intended to imply that resources up to or even near these limits are 
available to every program. 


10.1 Line Length 

The implementation supports a maximum line length of 500 characters including 
the end of line character. 


10.2 Record and Array Sizes 

The maximum size of a statically sized array type is 4,000,000 x STORAGE_UNITS. 
The maximum size of a statically sized record type is 4,000,000 x STORAGE_ r JNITS. 
A record type or array type declaration that exceeds these limits will 
generate a warning message. 


10.3 Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every 
task except the main program is allocated a fixed size stack of 10,240 

B-6 













3TCRA5E_UNITS. This is the value returned by T'5TCRAGE_3IIE :;r a tasx 
type T. 

10.4 Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default 
collection size for an access type is 100,000 STCRAGE_UNITS. This is the 
value returned by T'STCRAGE_SIZE for an access type T. 


10.5 Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for objects 
declared statically within a compilation unit. If this value is exceeded 
the compiler will terminate the compilation of the unit with a FATAL error 
message. 


11. FORM parameters conventions 

The required format for FORM parameter is of type STRING. 

The FORM string uses a simple syntax of the form: 
keyword(value, value) 

The keywords valid at the outer level will be MODE and FLAG. Within the 
MODE paramter, additional keywords USER, GROUP and PUBLIC will be recognized, 
while within USER, GROUP and PUBLIC, only the READ/'WRITE/EXEC values will be 
recognized. 

Acceptable values for FLAG are as follows: 

0_RDONLY 

OJWRONLY 

0_RDWR 

0_NDELAY 

0_AP?END 

0_5BLOCK 

0_EXL0CK 

0_CREAT 

0_TRUNC 

0_EXCL 

0_C0NTR0L 

0_DETACH 

0_MESSAGE 

0_F0RCE0P EN 

0_MXIPC 

0_PEER 

OJCLIENT 

0_SERVER 

Acceptable values for MODE are as follows: 

S_ISUID 

S_ISGID 

S_IREAD 

S_IWRITE 

S_IEXEC 

S ISECURE 


B-7 








Attachment IV: Package System 


package SYSTEM 
is 

type NAME is 

SYSTEM_NAM£ 

STORAGE_UNIT 

MEMORY_SIZE 

— System-Dep 

MIN_INT 
MAX__XNT 
MAX_DIGITS 
MAX_MANTIS SA 
FINE_DELTA 
TICK 


( eternity_t:-c ) ; 

: constant 

: constant 
: constant 

ndent Named Numbers 

: constant 
: constant 
: constant 
: constant 
: constant 
: constant 


NAME := eternity t::; 
:* 3; 

:= 16 T’’ 1 215; 


= -2_147_483_54' 7 - 1; 
= 2_14' ? _4 83_547; 

= 15; 

= 31; 

= 2.0**(-31) ; 

= 0.31; 


-- Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 

M AX_REC_SIZE ; integer ;= 64*1024; 
type ADDRESS xs private; 

NO_ADDR: constant ADDRESS; 

function ?HYSICAL_ADDRESS(I: INTEGER) return ADDRESS; 

function ADDR_GT(A, B: ADDRESS) return BOOLEAN; 

function ADDR_LT(A, B: ADDRESS) return BOOLEAN; 

function ADDR_GE(A, B: ADDRESS) return BOOLEAN; 

function ADDR_LE(A, B: ADDRESS) return BOOLEAN; 

function ADDR_DIFF(A, B: ADDRESS) return INTEGER; 

function INCR_ADDR(A: ADDRESS; INCR: INTEGER) return ADDRESS; 

function DECR_ADDR(A: ADDRESS; DECR: INTEGER) return ADDRESS; 

function ">"(A, B: ADDRESS) return BOOLEAN renames ADDR_GT; 
function n <"(A, B: ADDRESS) return BOOLEAN renames ADDR_LT; 
function ">="(A, B; ADDRESS) return BOOLEAN renames ADDR_GE; 
function (A, B; ADDRESS) return BOOLEAN renames ADDR_LE; 

function "-"(A, B; ADDRESS) return INTEGER renames ADDR_DIFF; 
function "f"(A; ADDRESS; INCR: INTEGER) return ADDRESS 
renames INCR_ADDR; 

function (A: ADDRESS; DECR: INTEGER) return ADDRESS 
renames DECR ADDR; 


pragma inline(PHYSICAL_ADDRESS); 
pragma inline(ADDR_GT) ; - 

pragma inline(ADDR_LT); 
pragma inline(ADDR_GE); 
pragma inline(ADDR_LE); 
pragma inline(ADDR_DIFF); 
pragma inline{INCR_ADDR); 
pragma inline(DECR_ADDR); 

private 

type ADDRESS is new INTEGER; 
no addr: constant address :» 0; 


end SYSTEM; 


B-8 













APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..498 => 'A', 499 => '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498 => 'A', 499 => '2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 => 'A', 250 => '3', 
251..499 => 'A') 


C-l 













TEST PARAMETERS 


Name and Meaning_ Value 


$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIGIDl. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


(1..249 => 'A', 250 => '4', 
251..499 => 'A') 


(1..496 => 'O', 497..499 => "298") 


(1..493 =>.'0', 494..499 => "69.0E1") 


(1 => 2..200 => 'A', 201 => '"') 


(1 => 2..300 => 'A', 301 => '1', 

302 => 


(1..479 => ' ') 


2147483647 


16777216 


C-2 











TEST PARAMETERS 


Name and Meaning 


Value 


$DEFAULT_SYS NAME ETERNITY TX 

The value of the constant 
SYSTEM.SYSTEM NAME, 


$DELTA_D0C 0.0000000004656612873077392578125 

A real literal whose value is 
SYSTEM.FINE DELTA. 


$FIELD_LAST 

A universal integer 
literal whose value is 
TEXT 10.FIELD'LAST. 


2147483647 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 


NO SUCH FIXED TYPE 


$FLOAT_NAME NO_SUCH_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, o r 

LONG FLOAT. 


$GREATER_THAN_DURATI0N 100000.0 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 


$GREATER_THAN_DURATION_BASE LAST 10000000.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 


$HIGH_PRI0RITY 99 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 /illegal/fi1e__name /2{]$%2102 C.DAT 

An external file name which 
contains invalid characters. 


$ILLEGAL_EXTERNAL_FILE_NAME2 /illegal/file name/CE2102C*.DAT 

An external file name which 
is too long. 

$INTEGER_FIRST -2147483648 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 



TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 2147483647 

A universal integer literal 
whose value is INTEGER'LAST. 


$INTEGER_LACT_?IUS_: 2147432C43 

A universal integer literal 
whose value is INTEGER'LAST + 1. 


$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LF,SS_THAN_DURATION BASE_FIRST -10000000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$LOU_PRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 


SMANTISSA_D0C 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN LEN 499 

Maximum input line length 
permitted by the implementation. 


$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL- (1..2 => "2:", 3. 

A universal integer based 497..499 => "11: 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


.496 => '0' 
") 












TEST PARAMETERS 


Name and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

SNAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORTINTEGER, 

L0NG_FL0AT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1..3 => "16:", 4..495 => '0' , 

496..499 => "F.E:") 

(1 => 2..498 => 'A', 499 => '"') 

-2147483648 

32 

TINY_INTEGER 

ETERNITY_TX 

16#FFFFFFFD# 

16777216 


C-5 












TEST PARAMETERS 


Name and Meaning _ Value _ 

$NEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE_UNIT. 

$NEU_SYS NAME ETERNITY_TX 

A value of the type SYSTEM. NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN 0(JT' 
parameter. 

STICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 








APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-1 





WITHDRAWN TESTS 


tests vrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requi~es that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 

o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test-requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not rlear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 









WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_OF_LINE and 

END_OF_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERJR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 











APPENDIX E 


COMPILER OPTIONS AS SUPPLIED BY TOLERANT SYSTEMS, INC. 

Compiler: Tolerant Ada Development System, Version 2-3 

ACVC Version: 1.10 


E-l 








TAOS Compiler 


Tablft 3-0. ada Compiler Options 

_ Option _ Function _ 

-a file (archive) Link the specified archive file into the load 

module using full file name. 

(dependencies) Analyze for dependencies only. 

(error) Process syntax error messages using a.error 
and direct the output to stdoui. i.e.. list only the er¬ 
rors. 

-«i (error listing) Generate an error listing using a.error 

and direct it to stdoui. i.e.. list the entire source file. 

-«v (error w) Process syntax error messages using a.error. 

embed them in the source file, and call W. 

-\file_abbrev (link) Link this library file. (No space between the -I 

and file_abbrev ) 

(output) With the -M option, rename the executable 
program. 

(update) Update the library ada. lib even if syntax 
errors are present. 

-v (verbose) Print information about the compilation. 

-w (warnings) Suppress warning diagnostics. 

-E 

-E file 

-E directory (error output) Use a.error to process error messages 

and direct the output to stdoui as well as the following 
files, ada_source.err (-E); file (-E file), and 
directory ada_source.err (-E directory). 

-El 

-El fie 

-El directors (error listing) Use a.error to produce source listing 

with errors and direct the output to stdoui as well as 
the following files: ada_source.err (-E): file (-E file): 
and directory. ada_source.err (-E directory ). 

-M untt_name 

—VI ada_source.a (main) Produce an executable program using the 
named main program or source root name. 

-0(1-91 (optimizer) Invoke the code optimizer. An optional 

digit limits the number of passes made by the optimiz¬ 
er The default. 0. optimizes as far as possible. 


-o executable_file 

-u 













TAOS Compiler 


Ttdle 3-0. ada Compiler Optiona (continued) 

Option _ Function _ 

-R TADSJibrary (recompile instantiation) Force analysis of ail gen¬ 
eric instantiations, causing reinstantiation of any 
that are out-of-date. 

-S (suppress) Apply PRAGMA SUPPRESS to the en¬ 

tire compilation. 

-T (timings) Prints a table of computer activities, in¬ 

cluding wall time. CPU time, and heap memory. 

-V (verbose) Prints information about the compila¬ 

tion. 


Each option (and possible associated arguments) should be separately listed on the 
command line with spaces separating each option as shown below. 












