Abstract 


Presentation 


Back to Agenda 
Next Presentation 


VSIPL++: Serial and Parallel Performance 

Mark Mitchell 
Jeffrey Oldham 
Nathan Sidwell 
CodeSourcery, LLC 

May 22, 2003 


1 Introduction 

The VSIPL (the Vector, Signal, and Image Processing Library) specification 
defines a portable, C programming language interface to use in linear algebra 
and signal-processing applications. The VSIPL standard has been implemented 
by a variety of vendors. VSIPL’s portable interface provides developers the 
ability to write code once and reuse it in multiple environments. 

At HPEC 2002, we presented an overview of VSIPL-I—1-, a C-|—I- specification 
designed to perform the same types of computations as VSIPL. The primary 
goals for VSIPL-I—I- are improved serial performance relative to VSIPL, support 
for multi-processor systems, extensibility, and simpler syntax. 

The serial VSIPL-I—I- specification is virtually complete. By HPEC 2003, 
we expect to have a successful implementation of the specification. We antic¬ 
ipate that the performance of the VSIPL-I—I- reference implementation will be 
superior to that of VSIPL for some applications. By HPEC 2003, the refer¬ 
ence implementation of VSIPL-I—I- will contain preliminary support for parallel 
systems. 

Our presentation will compare the performance of VSIPL-I—I- with VSIPL, 
and demonstrate the VSIPL-I—I- support for parallel computation. We will also 
discuss VSIPL-I—I- implementation strategies, including the use of an exist¬ 
ing VSIPL implementation, a native C-|—I- implementation using expression- 
templates, and a hybrid approach that allows an implementor to incrementally 
reimplement portions of VSIPL-I—h to achieve higher performance. 


2 Performance Comparisons 

VSIPL-I—h can be implemented on either uni-processor or multi-processor hard¬ 
ware. As a first step, we are implementing VSIPL-I—I- using an existing C 
VSIPL library. While this implementation is straightforward, the performance 
is of course limited by the performance of the underlying VSIPL implementa¬ 
tion. We also have a preliminary implementation of some portions of VSIPL-I—h 


I 


Report Documentation Page 

Form Approved 

0MB No. 0704-0188 

Public reporting burden for the collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and 
maintaining the data needed, and completing and reviewing the collection of information. Send comments regarding this burden estimate or any other aspect of this collection of information, 
including suggestions for reducing this burden, to Washington Headquarters Services, Directorate for Information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington 

VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to a penalty for failing to comply with a collection of information if it 
does not display a currently valid 0MB control number. 

1. REPORT DATE 

20 AUG 2004 

2. REPORT TYPE 

N/A 

3. DATES COVERED 

4. TITLE AND SUBTITLE 

VSIPL++: Serial and Parallel Performance 

5a. CONTRACT NUMBER 

5b. GRANT NUMBER 

5c. PROGRAM ELEMENT NUMBER 

6. AUTHOR(S) 

5d. PROJECT NUMBER 

5e. TASK NUMBER 

5f. WORK UNIT NUMBER 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

CodeSourcery, LLC 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

10. SPONSOR/MONITOR’S ACRONYM(S) 

11. SPONSOR/MONITOR’S REPORT 
NUMBER(S) 

12. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release, distribution unlimited 

13. SUPPLEMENTARY NOTES 

See also ADM001694, HPEC-6-VoI 1 ESC-TR-2003-081; High Performance Embedded Computing 
(HPEC) Workshop (7th)., The original document contains color images. 

14. ABSTRACT 

15. SUBJECT TERMS 

16. SECURITY CLASSIFICATION OF: 

17. LIMITATION OF 
ABSTRACT 

uu 

18. NUMBER 
OF PAGES 

16 

19a. NAME OF 
RESPONSIBLE PERSON 

a. REPORT 

unclassified 

b. ABSTRACT 

unclassified 

c. THIS PAGE 

unclassified 


standard Form 298 (Rev. 8-98) 

Prescribed by ANSI Std Z39-18 





Abstract 


Presentation 


Back to Agenda 
Next Presentation 


using a high-performance expression-template technique. By HPEC 2003, we 
plan to have a partial parallel implementation of VSIPL-I—1-. 

We are using a simple FIR-filter and narrowband beamforming applica¬ 
tion as a benchmark. These computations are fundamental to many signal¬ 
processing applications. We plan to present performance comparisons between 
VSIPL, VSIPL-I—I- built atop VSIPL, VSIPL-I—I- using expression templates, 
and VSIPL-I—I- using multiple processors. 


3 Parallel Computation Model 

VSIPL-I--I- uses a Single Program Multiple Data (SPMD) model when perform¬ 
ing parallel computations. The VSIPL-I—I- model divides rectangular arrays of 
data (known as “blocks”) into sections using combinations of block and cyclic 
data distributions. We will explain the VSIPL-I—I- model, and demonstrate 
how a very simple distribution model can accommodate systems ranging from 
small embedded systems to large systems with thousands of nodes. We will also 
explain how a wide variety of distribution policies can be implemented atop 
the simple distribution model provided by VSIPL-I—I-. Finally, we will explain 
how the VSIPL-I--I- parallelism model provides support for fault-tolerance via 
dynamic reallocation of processors. 


2 


Abstract f Presentation 


Back to Agenda 
Next Presentation 




Serial and Parallel 
Performanee 


CodeSourcery, LLC 
September 23, 2003 


CooeSourcerj 


1 


www.codesourcerv.com 





Design Path 








specification Status 


• Serial Specification 

- 216-page draft. 

- Under review by VSIPL Forum. 

• Parallel Specification 

- 24-page preliminary draft. 

- Initial conceptual review complete. 


COOfSOURCERJ 


3 


www.codesourcerv.com 




Serial Performance 



• Uses VSIPL reference implementation. 

- Not the fastest implementation... 

- ... but the relative performance is important. 

• Environment: 

- 2GHz Pentium-M 

- 512KB cache, 512MB RAM 

- GNU/Linux, G++ 3.4 


CooeSourcerj 


4 


www.codesourcerv.com 




Matrix/V ector 



V += mv 


200 
150 

QJ 

.1 100 

H 

50 
0 

100 330 1000 3300 10000 

Vector Length 


VSIPL 

^VSIPL++ 


CooeSourcerj 


5 


www.codesourcerv.com 







Matrix/Matrix 



result += tan(sin(m) + cos(m)) 



Matrix Size 


CooeSourcerj 


6 


www.codesourcerv.com 






Checked Vector Access 



50 
45 
40 
35 
0, 30 
S 25 
^ 20 
15 
10 
5 
0 

lOM 10^5 10^6 10^7 



VSIPL 

^VSIPL++ 


Vector Length 


CooeSourcerj 


7 


www.codesourcerv.com 






Performance Conclusions 



• VSIPL++ has approximately zero overhead. 

- Memory effects actually enable VSIPL++ to 
outperform VSIPL. 

- Expression-template techniques may also improve 
performance. 

• Exceptions are expensive. 

- We are not sure if this overhead can be eliminated. 

• Reference implementation will be directly useful. 

- Vendor-optimized versions will probably be better. 


CooeSourcerj 


8 


www.codesourcerv.com 




Parallelism 



• Target systems: 

- Support 1-64K+processors. 

- Support MPI, POSIX threads. 

• Conceptual model: 

- Single-program multiple-data model. 

- Owner computes. 

- Parallelism requires changing only declarations, not 
expressions. 


CooeSourcerj 


9 


www.codesourcerv.com 





Parallel VSIPL++ Model 



viewO viewl view2 view3 



A 




user 

program 


j 

■ hardware 


CooeSourcerj 


10 


www.codesourcerv.com 




Using Parallelism 


• Declaration: 

Vector<double , 

Dense<l, double, 

Map<Block> > > 

V (17, 1.0, Block(4)); 

• Meaning: 

- 17: Vector length. 

- 1.0: Intial value. 

- Block (4) : Block distribution over 4 processors. 


CooeSourcerj 


11 


www.codesourcerv.com 





FY04 Objectives 


• Specification: 

- Finalize serial and parallel specifications. 

- Get approval from VSIPL Forum. 

• Implementation: 

- Finish serial implementation. 

- Draft parallel implementation. 

• Measurement: 

- Performance analysis. 


CooeSourcerj 


12 


www.codesourcerv.com 




Contact Information 



• Mark Mitchell 
mark@codesourcerv.com 

• Jeffrey Oldham 
oldham@codesourcerv.com 

• Nathan Sidwell 
nathan@codesourcerv.com 


CooeSourcerj 


13 


www.codesourcerv.com 




Abstract Presentation 


Back to Agenda 
Next Presentation 




Serial and Parallel 
Performanee 


CodeSourcery, LLC 
September 23, 2003 


CooeSourcerj 


14 


www.codesourcerv.com 




