Software 


If) Flightspeed Integral Image 
Analysis Toolkit 

The Flightspeed Integral Image 
Analysis Toolkit (FIIAT) is a C library 
that provides image analysis functions in 
a single, portable package. It provides 
basic low-level filtering, texture analysis, 
and subwindow descriptor for applica- 
tions dealing with image interpretation 
and object recognition. Designed with 
spaceflight in mind, it addresses: 

• Ease of integration (minimal exter- 
nal dependencies) 

• Fast, real-time operation using integer 
arithmetic where possible (useful for 
platforms lacking a dedicated floating- 
point processor) 

• Written entirely in C (easily modified) 

• “Mosdy static” memory allocation 

• 8-bit image data 

The basic goal of the FIIAT library is 
to compute meaningful numerical de- 
scriptors for images or rectangular 
image regions. These n-vectors can then 
be used directly for novelty detection or 
pattern recognition, or as a feature 
space for “higher-level” pattern recogni- 
tion tasks. The library provides routines 
for leveraging training data to derive de- 
scriptors that are most useful for a spe- 
cific data set. Its runtime algorithms ex- 
ploit a structure known as the “integral 
image.” This is a caching method that 
permits fast summation of values within 
rectangular regions of an image. This in- 
tegral frame facilitates a wide range of 
fast image-processing functions. 

This toolkit has applicability to a wide 
range of autonomous image analysis 
tasks in the space-flight domain, includ- 
ing novelty detection, object and scene 
classification, target detection for au- 
tonomous instrument placement, and 
science analysis of geomorphology. It 
makes real-time texture and pattern 
recognition possible for platforms with 
severe computational restraints. The 
software provides an order of magnitude 
speed increase over alternative software 
libraries currently in use by the research 
community. 

FIIAT can commercially support intel- 
ligent video cameras used in intelligent 
surveillance. It is also useful for object 
recognition by robots or other au- 
tonomous vehicles. 

This work was done by David ft Thompson 
of Caltech for NASA’s Jet Propulsion Laboratory. 


The software used in this innovation is 
available for commercial licensing. Please 
contact Karina Edmonds of the California In- 
stitute of Technology at (626) 395-2322. 
Refer to NPO-46871. 


Work Coordination Engine 

The Work Coordination Engine 
(WCE) is a Java application integrated 
into the Service Management Database 
(SMDB), which coordinates the dis- 
patching and monitoring of a work 
order system. WCE de-queues work or- 
ders from SMDB and orchestrates the 
dispatching of work to a registered set of 
software worker applications distributed 
over a set of local, or remote, heteroge- 
neous computing systems. WCE moni- 
tors the execution of work orders once 
dispatched, and accepts the results of 
the work order by storing to the SMDB 
persistent store. 

The software leverages the use of a 
relational database, Java Messaging Sys- 
tem (JMS) , and Web Services using Sim- 
ple Object Access Protocol (SOAP) 
technologies to implement an efficient 
work-order dispatching mechanism ca- 
pable of coordinating the work of mul- 
tiple computer servers on various plat- 
forms working concurrently on 
different, or similar, types of data or al- 
gorithmic processing. Existing (legacy) 
applications can be wrapped with a 
proxy object so that no changes to the 
application are needed to make them 
available for integration into the work 
order system as “workers.” WCE auto- 
matically reschedules work orders that 
fail to be executed by one server to a 
different server if available. From initia- 
tion to completion, the system manages 
the execution state of work orders and 
workers via a well-defined set of events, 
states, and actions. It allows for config- 
urable work-order execution timeouts 
by work-order type. 

This innovation eliminates a current 
processing bottleneck by providing a 
highly scalable, distributed work-order 
system used to quickly generate products 
needed by the Deep Space Network 
(DSN) to support space flight operations. 
WCE is driven by asynchronous messages 
delivered via JMS indicating the availabil- 
ity of new work or workers. It runs com- 
pletely unattended in support of the 
lights-out operations concept in the DSN. 


This work was done by Silvino Zendejas, 
Tung Bui, Bach Bui, Shantanu Malhotra, 
Fannie Chen, Rachel Kim, Christopher • Allen, 
Ivy Luong, and George Chang of Caltech and 
Syed Sadaqathulla of Raytheon for NASA’s Jet 
Propulsion Laboratory. Further information is 
contained in a TSP (see page 1 ). 

This software is available for commercial li- 
censing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(626) 395-2322. Refer to NPO-45014. ' 


ta Multi-Mission Automated 
Task Invocation Subsystem 

Multi-Mission Automated Task Invoca- 
tion Subsystem (MATIS) is software that 
establishes a distributed data-processing 
framework for automated generation of 
instrument data products from a space- 
craft mission. Each mission may set up a 
set of MATIS servers for processing its 
data products. MATIS embodies lessons 
learned in experience with prior instru- 
ment-data-product-generation software. 

MATIS is an event-driven workflow 
manager that interprets project-specific, 
user-defined rules for managing 
processes. It executes programs in re- 
sponse to specific events under specific 
conditions according to the rules. Be- 
cause requirements of different mis- 
sions are too diverse to be satisfied by 
one program, MATIS accommodates 
plug-in programs. MATIS is flexible in 
that users can control such processing 
parameters as how many pipelines to 
run and on which computing machines 
to run them. 

MATIS has a fail-safe capability. At 
each step, MATIS captures and retains 
pertinent information needed to com- 
plete the step and start the next step. In 
the event of a restart, this information is 
retrieved so that processing can be re- 
sumed appropriately. 

At this writing, it is planned to develop 
a graphical user interface (GUI) for 
monitoring and controlling a product- 
generation engine in MATIS. The GUI 
would enable users to schedule multiple 
processes and manage the data products 
produced in the processes. Although 
MATIS was initially designed for instru- 
ment data product generation, the ar- 
chitecture does not preclude it from 
being used for different applications. It 
is planned that the MATIS team mem- 
bers will provide a set of application 


NASA Tech Briefs, November 2009 


17 


