AD-A247 336 _ 

■iiiiiin 

thliburtinM>lmil«of«nyel)wnip>aii(lhiieofccllenotWbnMllon.lndm<ng m imi ti ewloft»duc*igW»bi«fcn.loW! MW ngBn 
I (•■wtfwatOTi* wviviM. iw* ••n/Mtwilwii w|w«hmi» wiu rmim*. ic i 5 MItrapn Dnk Highway. SiiM 1204. Artr^on, VA 22202-4302. and to Via Ollica ol Momiaton and RaguWoty Attata, Onoa ol 

ManagamantandBudjgat WaaMngMn. DC 20S03. 


1. AGENCY USE ONLY (Leave Blank) 


2. REPORT DATE 


4. TITLE AND SUBTIT 

Validation Summary Report; IBM Canada Ltd., AIX Ada/6000 Internal Development 
Version. RISC System/6000, model 7012-320 (Host & Target). 920121W1.11234 


6. AUrHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


3. REPORT TYPE AND DATES COVERED 

Final: 21 Jan 1992 to 01 Jun 1993 


5. FUNDING NUMBERS 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-524.0292 


9 SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ESJ 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 



10. SP0NS0RING440NIT0RING AGENCY 
REPORT NUMBER 


12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

IBM Canada Ltd., AIX Ada/6000 Internal Development Version, Wright-Patterson AFB, RISC System/6000, irxxlel 

7012-320 (Host & Target). ACVC 1.11. 





Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-iai5A, AJPO. 


17, SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


15. NUMBER OF PAGES 


16. 


20. UMITATKDN OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev 2 89) 
Prea c ribed by ANSI Sid. 236-126 









AVF Control Number: AVF-VSR-524.0292 

13 Febniary 1992 
91-11-12-IBM 


Ada COMPILER 
VALIDATICW SUMMARY REPORT: 

Certificate Number: 920121W1.11234 
IBM Canada Ltd. 

AIX Ada/6000 Internal Development Version 
RISC Systenv/6000, model 7012-320 -> RISC System/SOOO, model 7012-320 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Aca««sioa ttr 

N T : QRkkl 

?n4C Tib 


; iy—--- 

i AvSllablilty Co4«b 
a«4/or 

Dl 3 t j Sp«oial 



□ □ 





Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 21 January 1992. 

Conpiler Name and Version: AIX Ada/6000 Internal Development Version 

Host Computer System: RISC SysteV6000, model 7012-320, AIX 3.2 

Target Conputer System; RISC SysteiV6000, model 7012-320, AIX 3.2 

Customer Agreement Number; 91-11-12-IBM 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

920121W1,11234 is awarded to IBM Canada Ltd. This certificate expires on 1 

Jione 1993. 


This report has been reviewed and is approved. 



aa Validation Facility 
Steven P. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



tronOrganTiatlon 

_,^Coinputer and Software Engineering Division 

Institute for Defense Analyses 
Alexandria VA 22311 



la Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


92 H 





declaration ot confocnanoc 


Hon Jan 20 12:23:04 1992 


I 


DECLARATION OF CONFORMANCE 


Cusiomot: IBM Canada Ltd. 

Ada Validation Facility: Wright Fatteraon AVF 

ASO/6CEL 
NPAFB Oil 4S433 
USA 

ACVC Veipluii; 1 11 

Ada liii|jl«iiieiitaLlun: 

COIVJinP^ and Vgriioni ATX Ada/COOO tcvclopmor.T voibaoii 

Host Computer Syotem: RISC System/COOO, node! 7012-320, AIX 3.2 

Target Computer gyotcm: RISC Cy»twm/C006, aiudwl 7012-320, AiX 3.2 


Customer'8 Declaration 

1, the undersigned, representing IBM Canada Ltd., declare that IBM Canada Ltd. 
has no knowledge of deliberate deviations from the Ada Language Standard 
ANSI/M1L-STD-1815A in the implementation listed in this declaration. 



Peter Moogk 

IBM Canada Ltd. Laboratory 
844 Don Mills Road 
North York, Ontario 
CANADA M3C 1V7 


Date:. /g?? 

Paul Kohlbrenner 
OC Systems, Inc. 

9926 Main St. Suite ilUU 
Fairfax, VA 22031 
USA 








TABLE OF CXKTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATICN SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITIOJ OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS .3-2 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATIC»I SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTRDDUCTIC3N 


The Ada inqplementation described above was tested according to the Ada 
Validation Procedures (Pro90] against the Ada Standard [AdaSB] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an accoxjnt of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
lPro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide tUG89]. 


1.1 USE OF THIS VALIDATICW SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and conpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vbich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer emd Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRCMXJCTION 


1.2 REFERENCES 

tAda83] Reference Manual for the Ada Progreunminq Lcinquage, 

ANSI/MIL-S-m-lSlSA, February 1983 and ISO 8652-1987. 

tPro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

IUG89] Ada Compiler Validation Capability User's Guide , 21 J^JUle 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
\^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_F1LE is checked by a set of 
executedDle tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for exanple, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTIC»I 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inpleraentation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITICXa OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
tn a given host and target ccmiputer system to allow 
treunsformation of Ada programs into executable form and 
execution thereof. 

Ada Coirpiler The means for testing conpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capadsility user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada coitpiler with its host conpater system and its 

Inplementation target conputer system. 

Ada Joint The part of the certification body vrfiich provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Ccxnputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 







INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Ccmqpiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF v^ich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
v^ich validation status is realized. 

A computer system v^ere Ada source programs are tremsformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration tPro90]. 

Ihe process of checking the conformiity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 



CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVD or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B63025B 

B83025D 

CB3026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BO1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814i. 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and conmonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Canmentaries are included as 
appropriate. 


2-1 




ZnPLEKErnATION DEPENDENCIES 


Bie following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXJDIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..2 (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..2 (15 tests) 

C45524L..Z (15 tests) C45621L..2 (15 tests) 

C45641L..Y (14 tests) C46012L..2 (15 tests) 

The following 20 tests check for the predefined type L<»JG_INTEGER; for 
this implementation, there is no such type: 

C35404C C45231C C45304C C45411C C45412C 

C45502C C45503C C45504C C45504F C45611C 

C45613C C45614C C45631C C45632C B52004D 

C55B07A B55B09C B86001W C86006C CD7101F 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT_FLCiAT; for this implementation, there is no such type. 

C35713D zmd B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG FLOAT, or SH0RT_FLQAT; for this 
inpleroentation, there is no such ty^. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX MANTISSA of 47 or greater? for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE__OVERFIX]WS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHlNE_OVERFLCiWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inpleroentation, there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
tefore its body (and any of its subunits) is conpiled; this 
implementation creates a dependence on generic units as allowed 
AI-00408 and AI-00506 such that the compilation of the generic xuiit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 

for procedures and functions; this inpleroentation does not support 
pragma INLINE. 


2-2 





IMPLEMENTA'ilON DEPENDENCIES 


CD2A84A, CD2A84E, CD2A841..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A. .B (2 tests), and AD8011A use machine code 
insertions; this in^jlementation provides no package MACHINE_CODE. 

The tests listed in the following taible check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

C:E2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised vdien this association is attenpted. 

CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 
C:e2111D CE2111H CE3111B CE3111D. .E CE3114B 
CE3115A 


CE2203A checks that WRITE raises USE_ERROR if the ripacity of an 
external sequential file is exceeded; this implemencation cannot 
restrict file capacity. 


2-3 






IMPLEMENTATION DEPENDENCIES 


EE2401D uses an instantiation of DIRECT 10 with an mconstrained array 
type vdiose index type is INTEGER; this Tnipleinentation raises USE_ERR0R 
on the attenpt to create a file of such a type, as the array type's 
size exceeds the in^lementation's meocimum element size. 

CE2403A checks that WRITE raises USE_ERR0R if the capacity of an 
external direct file is exceeded; this in^jlementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERR0R if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 26 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B28003A BAIOOIA BA2001C BA2001E BA3006A BA3006B 

BA3007B BA3008A BA3008B BA3013A 

C52008B was graded passed by Test Modification as directed by the AVO. 

This test uses a record type with discriminants with defaults; this test 
also has array components v4iose length depends on the values of some 
discriminants of type INTEGER. On elaboration of the type declaration, 
this implementation raises NUMERIC_ERROR as it attempts to calculate the 
maximum possible size for objects of the type. The AVO ruled that this 
behavior was acceptable, and that the test should be modified to constrain 
the subtype of the discriminants. Line 16 was modified to create a 
constrained subtype of INTEGER, and discriminant specifications in lines 
17 and 25 were modified to use that subtype; these lines are given below: 

16 SUBTYPE SUBINT IS INTEGER RAI'KSE -128 .. 127; 

17 TYPE REC1(D1,D2 : SUBINT) IS 

25 TYPE REC2(D1,D2,D3,D4 : SUBINT := 0) IS 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the conpilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the ccmpilation of the generic unit bodies makes the conpilation 
unit that contains the instantiations obsolete. 


2-4 






IMPLEMENTATION DEPENDENCIES 


CD1009A, 0)10091, OICOBA, a)2A2lA. .C (3 tests), CD2A22J, a>2A23A..B (2 
tests), a)2A24A, Q)2A3lA, a)2A3lB and a)2A31C were graded passed by 
Evalxiation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_affiCK, vdiich uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_affiac—i.e, the allowed Report.Failed messages have 
the general form: 

" * OJECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-5 





CHAPTER 3 


PROCESSING INFORMATIC»I 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact; 

Paul Kohlebrenner 
OC Systems, Inc. 

9926 Main Street, Suite 200 
Fairfax, VA 22031 


For sales information about this Ada inplementation, contact: 

Peter Moogk 

IBM Canada Ltd. Laboratory 
844 Don Mills Road 
North York, Ontario 
Canada M3C 1V7 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 




PROCESSING INFORMATION 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada inplementation fails ^e ACVC [Pro901. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of ^plicable Tests 3777 

b) Total Number of Withdrawn Tests 95 

c) Processed inapplicable Tests 97 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 298 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the vali^tion team for processing. Uie contents of the 
magnetic tape were (loaded directly onto the host computer. 

After the test files were loaded onto the host conputer, the full set of 
tests was processed by the Ada inplementation. 

Itie tests were conpiled and linked on the host computer system, as 
afpropriate. The results were captured on the computer system. 


3-2 





PROCESSING INFORMATION 


Testing was performed using conmand scripts provided by the customer and 
reviewed ty the validation team. See Appendix B for a conplete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


-1 

-b BIND NAME 


-m 


-v 


Conpiler Options: 

Produces a compiler listing 

Binds the object into an executable 
with BINDJNAME as the main unit. 

Binds the object into an executable 
with the first compilation unit in 
the file as the main unit. 

Produces compiler banner. 


Test output, compiler 2 uid linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


•fliis appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. Ihe 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maucimum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$B1G_ID1 

$BIG_ID2 

$BIG_ID3 

$B1G_ID4 

$B1G_INT_LIT 

$BIG_REAL_LIT 

$B1G_STRING1 

$B1G_STRING2 

$BIANKS 


200 — Value of V 

(1..V-1 -> »A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' 

(1..V-20 


f »»r 


$MAX_LEN_INT_BASED__LITERAL 

"2:" & (1..V-5 •> '0') & "11;" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

A-1 





MACRO PARAMETERS 


The follovdng table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAtILT_MEM_SIZE 268_435_456 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME AIX_6000 

$DELTA_DOC 2#1.0#E^31 

$ENTRY_ADDRESS ENTRYO'ADDRESS 

$ENTRY_ADDRESS1 ENTRYl'ADDRESS 

$ENTRY_ADDRESS2 ENTRY2'ADDRESS 

$FIELD_LAST 1000 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLQAT_NAME NO_SUCH_TYPE 

$PORM_STRING "" 

$FORM_STRING2 "CAN^roT_RESTRICT_FILE_CAPACITY" 

$GREATER_1HAN_DURATI0N 

100_000.0 

$GREATER THAN DURATION BASE LAST 

T31_073.0 

$GREATER_THAN_FLOAT BASE LAST 

1.TIE308 

$GREATER_'IHAN_FLQAT SAFE LARCX 

3.7E38 

$greater__than_short_flqat_safe_larct: 

A^2 





macro parameters 


1.0E308 

$HIGH_PRIORI'IY 255 

$1LLEGAL EXTERNAL FILE_NAMEl 

A* 

$ILLEGftL EXTERNAL_FXLE_NAME2 

$INAPPI»PRIATE LINE LEUGIH 

"■ -1 

$ZNAFPR0PR1ATE PAGE LENGTH 

" -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAOIA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE FORTRAN 

$LESS_THAN_DURATION -100_000.0 

$LESS THAN DURATION BASE FIRST 
" ” " -m_073.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE CCX)E_STATEMENT 

NULL; 

$MACHINE_CaDE_TYPE NO_SUCHjm»E 
$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME SHORT SHORT_INTEGER 



macro parameters 


$NAME_LIST 

AIX_6000 

$NAME_SPECIFICATICN1 

/dino/valA'ork/ctests/X2120A 

$NAME SPECIF1CAT10N2 

/dinoAal./work/ctests/X2120B 

$NAME SPECIFICAT1C»J3 

/dinoAalAork/ctests/X3119A 

$NEG BASED_INT 

16#f000000E# 

$NEW_MEM_SIZE 

65535 

$NEW_STOR_UNIT 

16 

$NEW_SYS_NAME 

AIX_6000 

$PAGE TERMINATOR 

ASCII.FF 

$RECORD DEFINITION 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

32768 

$TICK 

0.00006 

$VARIABLE__ADDRESS 

VARIABLE 'ADDRESS 

$VARIABLE_ADDRESSl 

VARIABLEl'ADDRESS 

$VARIABLE_ADDRESS2 

VARIABLE2' ADDRESS 

$YOUR_PRAGMA 

EXPORT 


A-4 




APPENDIX B 


CtXlPILATION SYSTEM OPTIONS 


Itie compiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to ccxnpiler documentation and 
not to this report. 



USAGE: ada [Option | PileName] 

OPTION/SWITCH 

EFPECT 

-a 

Produce assembler code. 

-b UnitNaine 

Bind and link unit. 

-d 

Keep debug info in the Ada sublibrary. 

-e 

Sv^ress creation of executable file. 

-G 

Do partial optomization. 

-h 

Display info about the ada command. 

-i PileName 

Inclixle archive or object file PileName 
when binding. 

-I 

Read a list of files to compile fron 
standard input. 

-1 

Generate a coopilation listing. 

-L Library 

Use this library list file. 

-m 

Compile and bind the last unit as the 
main program. 

~o PileName 

Specify the name of the executable is to 
be PileName. 


B-1 




CXJMPIIATION SYSTEM OPTICXJS 


OPTION/SWITCH 

-O 

-P 

-Q 

-q Pararoeter*Value 


-S 


-u 


-V 


-V Pages 


EFFECT 


Produce fully optoinized code. 

Turn on execution profiling option. 

Consistently detect single precision 
floating point overflow. 

Special parameters as follows:. 
task_stack«Bytes 
time si ice“Mi Hi seconds. 

Suppress run-time checks for Ada 
exceptions. 

Itolock the working sublibrary. 

Verbose - display informative messages. 

Specify the nimiber of IK memory pages 
to be used. 


CC»1PIIATI0N SYSTEM OPTICWS 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
Appendix, are provided by the custcaner. lAiless specifically noted 
otherwise, references in this a^Jendix are to linker documentation and not 
to this report. 


There is no separate linker. 


B-3 





APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada in^lementation, as described in this Appendix, 
are provided by the custcxner. unless specifically noted otherwise, 
references in this Appendix are to con^siler documentation emd not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INrEGER is range -32768 .. 32767; 
type SHORT_SHORT_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 range 

-3.40282E-»-38 .. 3.40282Ert-38; 
type LONG FLOAT is digits 15 range 

-1.7^769313486232E+308 .. 1.79769313486232E+308; 

type DURATION is delta 2**(-14) range 
-86400.0 .. 86400.0; 


end STANDARD; 


C-1 





Pre-validation Overview RISC System/6000 Ada 


Appendix 5 - Appendix F of the Ada Language Reference Manual 


Appendix F. Implementation-Dependent Characteristics 

The Ada language definition allows for certain target dependencies in a 
controlled manner. This appendix, called Appendix F as prescribed in the Ada 
Language Reference, describes implementation-dependent characteristics of the 
AIX Ada/6000 compiler running under the AIX operating system Version 3. 

Ijqslementation-Oefined Pragmas 

Implementation dependent pragmas are: 

pragma COMMENT(String_Literal); 

Imbeds String^Literal into object code. 

pragma IMAGES (Enumeration_Type, immediate I deferred); 

Generates a table of images for the enumeration type, deferred causes the table 
to be generated only if the enu.T.eration type is used in a compilation unit. 

pragma INTERFACE_1NF0RMATI0N 

(Interfaced;_Subprogram_Name, Lir.k_Name) ; 

When used in conjunction wit.h pragma INTERFACE, provides access to any routine 
whose name can be specified by an Ada string literal. 

pragma LINKNAME (Interfaced_Sutprocram_Name, LinkJMame); 

When used in conjunction with pragma INTERFACE, provides access to any routine 
whose name can be specified by an .Ada string literal. Pragma 
INTERFACE_INFORMATION is the preferred method for naming non-Ada routines. 

pragma OS_TASK (Priority); 

Appears within the declaration for a task or task ty^te (in the same context as 
pragma PRIORITY) , and causes the task or task type to be placed into a separate 
AIX process. The priority value is of type SYSTEM.PRIORITY, and is not 
currently acted upon. To maintain upward compatibility, always use a 0 for this 
parameter. 

pragma NO_SUPPRESS(Condition_Name); 

Prevents checks for a specified condition from being suppressed. It has the 
same scope as pragma SUPPRESS. 

pragma PRESERVE_LAYOUT (Record_Type); 

Prevents the compiler from re-ordering record components. It must occur in a 
declarative region, following the declaration of thu record type to which it is 
applied. 


OC Systems. Inc. - December 19.1991 


18 




ne-validatioa Overview RISC System^SOOO Ada 


pragma SUPPRESS_AZiL; 

Suppressea all error cbecks, including elaboration checJca. It has the same 
scope as pragma SUPPRESS. 

pragma EXPORT(object, String_Litocal, Language); 

Makes the named object visible to other programs. The object can be 
a procedure or a function or a data object. The atring_literal is the 
name the linker will make global. The Language must be C, FORTRAN, or 
Assembler, all of which have the same effect. 

Predefined Pragmas 

Supported pragmas are INTERFACE, ELABORATE, SUPPRESS, PACK, PAGE, LIST, INLINE, 
and PRIORITY. 

All pragmas have conventional meanings except LIST, which suppresses listings 
prior to pragma LIST(ON) regardless of the user request. 

Pragma INTERFACE supports the interface languages C, FORTRAN, and ASSEMBLY. 

Unrecognized and unsupported pragmas are ignored with the appropriate warning 
message. 

Representation Clauses 

Supported representation clauses include: 
w Length clauses 

w Enumeration representation clauses, except for Boolean types 

w Record representation clauses 

w Address clauses, including those for interrupt entries. 

Records are aligned by default on 32-bit boundaries. You can use a 

representation clause to force them to be aligned on 64-bit boundaries. 

Restrictions on Unchecked Conversion 

The only restriction on unchecked conversion is that the two types (or 
subtypes) A and B must be the same static size, and that neither A nor B are 
private. 

Package System 

The package SYSTEM has the following characteristics: 

PACKAGE system IS 
— for integer use 32; 

TYPE Memory is private; 

TYPE Address is access Memory; 

TYPE name IS (AIX 6000) ; 


<X Systems, Inc. - December 19,1991 


19 





Rre-validation Overvuw RISC System/6000 Ada 


System__Naine : CONSTANT name AIX_6000; 

Storage_Dnit : CONSTANT 8; 

Memory_Size : CONSTANT 1024*1024*256; 

— 256“‘Mb. 

— System-Dependent Named Numbers: 

Min_lnt 

: CONSTANT -(2**31); 

Max_lnt ; CONSTANT (2 ** 31) -1; 

MaxJDigits : CONSTANT IS; 

Max3fantlssa : CONSTANT :* 31; 

FineJDelta : CONSTANT 1.0 / (2 ** MAX_MANTISSA) ; 

TicJc"" : CONSTANT 0.00006; ~ 

— Other System-Dependent Declarations 
SUBTYPE Priority IS integer RANGE 0..255; 

END System; 

Representation Attributes 

All defined representation attributes shall be supported. 
Isplementation-Generated Names 

There are no ioplementation-generated names denoting inplementation-dependent 
components. CoiQ>onent names generated by the compiler shall not interfere with 
prograimner-defined names. 

Xnqpleroentation-Dependent Characteristics of the I/O Packages 
w Pac)cages SEQUENTIAL_IO, DIRECT_IO, and TEXT_IO are supported, 

w Package LON_L£VEL_IO is not supported. 

w Unconstrained array types and unconstrained types with discriminants 

may be instantiated for I/O. 

w File names follow the conventions and restrictions of the target 

operating system, except that non-printing characters, blan]c(' ') and asterisk 
('*') are disallowed. 

w In TEXT_IO, the type FIELD is defined as follows: 

subtype Field is integer range 0..1000; 

w In TEXT_IO, the type COUNT is defined as follows: 

type Count is range 0..2_147_483_646; 

Form Parameters for File Operations 

Section 14.2 of the Language Reference describes the Ada functions for 
manipulating files. As stated in that section, the form string parameter allows 
you to set file protections when you create a file. The details of file 
protections and privileges under the AIX op>erating system are described under 
the chfflod call in the AIX Calls and Subroutines Reference for IBM RISC 
Systmn/6000 (SC23-2198). 


OC Systems. bK. • December 19.1991 


20 






fte-viUdatioa Overview RSC SysteoiA6000 Ada 


If you do not specify a fozn string, the default file protection is both read 
and write privileges for the owner, group, and all others. If you do specify a 
form string, it is interpreted in the following way: 

w The form string consists of a series of substrings, separated by 

blanks. 

w The substrings are not case sensitive. 

w The order of the substrings does not matter. 

w Some substrings control the file protection settings. 

w Some substrings enable special AIX behavior for file opening, for 

exanple opening with no delay and opening a file for append. 

w The list of recognized substrings is contained in the section entitled 

iInput/Output" in the User's Guide for IBM AIX Ada/6000 (SC09-I321). 

Predefined Numeric Types 

The current specification of package STANDARD includes: 

type SHORT_SHORT_INTEGER 
is range -128 .. 127; 

type SHORT_lNTEGER 

is range”-32768 .. 32767; 

type INTEGER is 

range -2147483648 .. 2147483647; 
type FLOAT is 

digits € range -3.40282E+38 .. 3.40282E'l'38; 

type LONG_FLOAT is 
digits 15 range 

-1.797693134S6232E+308 .. 1.79769313486232E-«-308; 
type DURATION is 

delta 2**(-14) range -86400.0 .. 86400.0; 

SHORT_SHORT_lNTEGER 
'First - -128 
'Last - 127 
'Size ■ 8 
SHORT_INTEGER 
'First - -32768 
'Last - 32767 


(XT Systems, Inc. - December 19,1991 


21 






WrB-vlitfarinn Ovoview RISC SyMBmAKIOO Ada 

'Size “ 16 
INTEGER 

'First - -2147483648 
'Last - 2147483647 
'Size - 32 
FLOAT 

'Digits ■ 6 
'Bnax * 84 

'Epsilon * 9.53674E—07 

'Itarge " 1.93428E4'25 
'Machine^Emax * 128 
'Machine^Entin " -125 
'Machlne_Mantlssa - 24 

'MachinejOverfloes • TRUE 

'Macbine^Radix • 2 
'MachineJRounds • TRUE 
'Mantissa * 21 

' Safe_Einax • 125 

'Safe_I«arge • 4.25353E+37 
'Sa£e_SiDall - 1.17549E-38 
'Size ■ 32 
'Small - 2.S8494E-26 
LONG_FLOAT 
'Digits - 15 
'Baiax * 204 

'Epsilon - 8.88178419700125E-16 

'Large - 2.57110087081438E+61 
'Machine Emax * 1024 


OC Systems, Inc. - December 19.1991 


22 






Re-validatiao Omview RISC Syaeoi^tiOOO Ada 


'Machine_Einin • -1021 
'MachineJMantissa ■ S3 

'MachlnejOvexflowa - TRUE 

'Machlne_Radix 2 
'Machln«_nounds TRUE 
'Mantissa > SI 

'Slxe ■ 64 
' Safe_Eniax > 1021 

'Safe_lArge - 2.247116418S7789E-f307 

'Safe^Snall - 2.22S0738S8S0720E-308 

'Soall - 1.94469227433161E-62 
DURATION 

'Delta - 2**(-14) 

'First • -86400.0 
'lisst ■■ 86400.0 
'MachlnajDvarflows ■ FALSE 

'MachlnaJRounds - FALSE 
Restrictions on Machine Code Insertions 
Machine code Insertions are not supported. 

ParasMters to a Main Subprogran 

You can code an Ada/6000 main subprogram to accept parameterSr or to return a 
value If It Is a function. Any paraswters to the main subprogram have undefined 
values when the program Is run; use the subprograms In package COMMAND_LINE If 
you need to pass Information to an Ada program idien It Is run. The operating 
system always Ignores any function value It returns; use 

COMMAMD_LIME. SETJRETURNjCODE If you need to return a value when the program Is 
coiqpleted. 


OC Systems, be. • December 19.1991 


23 




